import{S as $e,i as Te,s as ye,e as i,k as p,w as f,t as ae,M as Re,c as r,d as o,m as d,a as m,x,h as me,b as a,F as t,g as X,y as v,L as be,q as O,o as z,B as $,v as Pe}from"../../chunks/vendor-19e06bd2.js";import{D as A}from"../../chunks/Docstring-395e5a9c.js";import{I as ze}from"../../chunks/IconCopyLink-3c713d38.js";function we(se){let c,M,h,_,S,T,j,H,K,q,l,g,V,y,Q,F,Y,B,n,R,Z,C,ee,te,L,b,oe,D,P,ne,E,w,ie,U,N,re,I,k,G;return T=new ze({}),y=new ze({}),R=new A({props:{name:"class optimum.onnxruntime.ORTOptimizer",anchor:"optimum.onnxruntime.ORTOptimizer",parameters:[{name:"tokenizer",val:": PreTrainedTokenizer"},{name:"model",val:": PreTrainedModel"},{name:"feature",val:": str = 'default'"},{name:"opset",val:": typing.Optional[int] = None"}],source:"https://github.com/huggingface/optimum/blob/pr_112/src/optimum/onnxruntime/optimization.py#L33"}}),b=new A({props:{name:"export",anchor:"optimum.onnxruntime.ORTOptimizer.export",parameters:[{name:"onnx_model_path",val:": typing.Union[str, os.PathLike]"},{name:"onnx_optimized_model_output_path",val:": typing.Union[str, os.PathLike]"},{name:"optimization_config",val:": OptimizationConfig"},{name:"use_external_data_format",val:": bool = False"}],source:"https://github.com/huggingface/optimum/blob/pr_112/src/optimum/onnxruntime/optimization.py#L96",parametersDescription:[{anchor:"optimum.onnxruntime.ORTOptimizer.export.onnx_model_path",description:`<strong>onnx_model_path</strong> (<code>Union[str, os.PathLike]</code>) &#x2014;
The path used to save the model exported to an ONNX Intermediate Representation (IR).`,name:"onnx_model_path"},{anchor:"optimum.onnxruntime.ORTOptimizer.export.onnx_optimized_model_output_path",description:`<strong>onnx_optimized_model_output_path</strong> (<code>Union[str, os.PathLike]</code>) &#x2014;
The path used to save the optimized model exported to an ONNX Intermediate Representation (IR).`,name:"onnx_optimized_model_output_path"},{anchor:"optimum.onnxruntime.ORTOptimizer.export.optimization_config",description:`<strong>optimization_config</strong> (<code>OptimizationConfig</code>) &#x2014;
The optimization configuration containing the parameters related to optimization.`,name:"optimization_config"},{anchor:"optimum.onnxruntime.ORTOptimizer.export.use_external_data_format",description:`<strong>use_external_data_format</strong> (<code>bool</code>, defaults to <code>False</code>) &#x2014;
Whether uto se external data format to store model which size is &gt;= 2Gb.`,name:"use_external_data_format"}],returnDescription:`
<p>The path of the resulting optimized model.</p>
`}}),P=new A({props:{name:"from_pretrained",anchor:"optimum.onnxruntime.ORTOptimizer.from_pretrained",parameters:[{name:"model_name_or_path",val:": typing.Union[str, os.PathLike]"},{name:"feature",val:": str"},{name:"opset",val:": typing.Optional[int] = None"}],source:"https://github.com/huggingface/optimum/blob/pr_112/src/optimum/onnxruntime/optimization.py#L38",parametersDescription:[{anchor:"optimum.onnxruntime.ORTOptimizer.from_pretrained.model_name_or_path",description:`<strong>model_name_or_path</strong> (<code>Union[str, os.PathLike]</code>) &#x2014;
Repository name in the Hugging Face Hub or path to a local directory hosting the model.`,name:"model_name_or_path"},{anchor:"optimum.onnxruntime.ORTOptimizer.from_pretrained.feature",description:`<strong>feature</strong> (<code>str</code>) &#x2014;
Feature to use when exporting the model.`,name:"feature"},{anchor:"optimum.onnxruntime.ORTOptimizer.from_pretrained.opset",description:`<strong>opset</strong> (<code>int</code>, <em>optional</em>) &#x2014;
ONNX opset version to export the model with.`,name:"opset"}],returnDescription:`
<p>An instance of <code>ORTOptimizer</code>.</p>
`}}),w=new A({props:{name:"get_fused_operators",anchor:"optimum.onnxruntime.ORTOptimizer.get_fused_operators",parameters:[{name:"onnx_model_path",val:": typing.Union[str, os.PathLike]"}],source:"https://github.com/huggingface/optimum/blob/pr_112/src/optimum/onnxruntime/optimization.py#L187",parametersDescription:[{anchor:"optimum.onnxruntime.ORTOptimizer.get_fused_operators.onnx_model_path",description:`<strong>onnx_model_path</strong> (<code>Union[str, os.PathLike]</code>) &#x2014;
Path of the ONNX model.`,name:"onnx_model_path"}],returnDescription:`
<p>The dictionary mapping the name of the fused operators to their number of apparition in the model.</p>
`}}),N=new A({props:{name:"get_nodes_difference",anchor:"optimum.onnxruntime.ORTOptimizer.get_nodes_difference",parameters:[{name:"onnx_model_path",val:": typing.Union[str, os.PathLike]"},{name:"onnx_optimized_model_path",val:": typing.Union[str, os.PathLike]"}],source:"https://github.com/huggingface/optimum/blob/pr_112/src/optimum/onnxruntime/optimization.py#L160",parametersDescription:[{anchor:"optimum.onnxruntime.ORTOptimizer.get_nodes_difference.onnx_model_path",description:`<strong>onnx_model_path</strong> (<code>Union[str, os.PathLike]</code>) &#x2014;
Path of the ONNX model.`,name:"onnx_model_path"},{anchor:"optimum.onnxruntime.ORTOptimizer.get_nodes_difference.onnx_optimized_model_path",description:`<strong>onnx_optimized_model_path</strong> (<code>Union[str, os.PathLike]</code>) &#x2014;
Path of the corresponding optimized ONNX model.`,name:"onnx_optimized_model_path"}],returnDescription:`
<p>The number of nodes decrease resulting from optimization.</p>
`}}),k=new A({props:{name:"get_operators_difference",anchor:"optimum.onnxruntime.ORTOptimizer.get_operators_difference",parameters:[{name:"onnx_model_path",val:": typing.Union[str, os.PathLike]"},{name:"onnx_optimized_model_path",val:": typing.Union[str, os.PathLike]"}],source:"https://github.com/huggingface/optimum/blob/pr_112/src/optimum/onnxruntime/optimization.py#L204",parametersDescription:[{anchor:"optimum.onnxruntime.ORTOptimizer.get_operators_difference.onnx_model_path",description:`<strong>onnx_model_path</strong> (<code>Union[str, os.PathLike]</code>) &#x2014;
Path of the ONNX model.`,name:"onnx_model_path"},{anchor:"optimum.onnxruntime.ORTOptimizer.get_operators_difference.onnx_optimized_model_path",description:`<strong>onnx_optimized_model_path</strong> (<code>Union[str, os.PathLike]</code>) &#x2014;
Path of the corresponding optimized ONNX model.`,name:"onnx_optimized_model_path"}],returnDescription:`
<p>The dictionary mapping the name of the operators to the number difference between the original and the
optimized model.</p>
`}}),{c(){c=i("meta"),M=p(),h=i("h1"),_=i("a"),S=i("span"),f(T.$$.fragment),j=p(),H=i("span"),K=ae("Optimization"),q=p(),l=i("h2"),g=i("a"),V=i("span"),f(y.$$.fragment),Q=p(),F=i("span"),Y=ae("ORTOptimizer"),B=p(),n=i("div"),f(R.$$.fragment),Z=p(),C=i("p"),ee=ae("Handles the ONNX Runtime optimization process for models shared on huggingface.co/models."),te=p(),L=i("div"),f(b.$$.fragment),oe=p(),D=i("div"),f(P.$$.fragment),ne=p(),E=i("div"),f(w.$$.fragment),ie=p(),U=i("div"),f(N.$$.fragment),re=p(),I=i("div"),f(k.$$.fragment),this.h()},l(e){const u=Re('[data-svelte="svelte-1phssyn"]',document.head);c=r(u,"META",{name:!0,content:!0}),u.forEach(o),M=d(e),h=r(e,"H1",{class:!0});var J=m(h);_=r(J,"A",{id:!0,class:!0,href:!0});var pe=m(_);S=r(pe,"SPAN",{});var de=m(S);x(T.$$.fragment,de),de.forEach(o),pe.forEach(o),j=d(J),H=r(J,"SPAN",{});var ce=m(H);K=me(ce,"Optimization"),ce.forEach(o),J.forEach(o),q=d(e),l=r(e,"H2",{class:!0});var W=m(l);g=r(W,"A",{id:!0,class:!0,href:!0});var he=m(g);V=r(he,"SPAN",{});var le=m(V);x(y.$$.fragment,le),le.forEach(o),he.forEach(o),Q=d(W),F=r(W,"SPAN",{});var ue=m(F);Y=me(ue,"ORTOptimizer"),ue.forEach(o),W.forEach(o),B=d(e),n=r(e,"DIV",{class:!0});var s=m(n);x(R.$$.fragment,s),Z=d(s),C=r(s,"P",{});var _e=m(C);ee=me(_e,"Handles the ONNX Runtime optimization process for models shared on huggingface.co/models."),_e.forEach(o),te=d(s),L=r(s,"DIV",{class:!0});var ge=m(L);x(b.$$.fragment,ge),ge.forEach(o),oe=d(s),D=r(s,"DIV",{class:!0});var fe=m(D);x(P.$$.fragment,fe),fe.forEach(o),ne=d(s),E=r(s,"DIV",{class:!0});var xe=m(E);x(w.$$.fragment,xe),xe.forEach(o),ie=d(s),U=r(s,"DIV",{class:!0});var ve=m(U);x(N.$$.fragment,ve),ve.forEach(o),re=d(s),I=r(s,"DIV",{class:!0});var Oe=m(I);x(k.$$.fragment,Oe),Oe.forEach(o),s.forEach(o),this.h()},h(){a(c,"name","hf:doc:metadata"),a(c,"content",JSON.stringify(Ne)),a(_,"id","optimization"),a(_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),a(_,"href","#optimization"),a(h,"class","relative group"),a(g,"id","optimum.onnxruntime.ORTOptimizer"),a(g,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),a(g,"href","#optimum.onnxruntime.ORTOptimizer"),a(l,"class","relative group"),a(L,"class","docstring"),a(D,"class","docstring"),a(E,"class","docstring"),a(U,"class","docstring"),a(I,"class","docstring"),a(n,"class","docstring")},m(e,u){t(document.head,c),X(e,M,u),X(e,h,u),t(h,_),t(_,S),v(T,S,null),t(h,j),t(h,H),t(H,K),X(e,q,u),X(e,l,u),t(l,g),t(g,V),v(y,V,null),t(l,Q),t(l,F),t(F,Y),X(e,B,u),X(e,n,u),v(R,n,null),t(n,Z),t(n,C),t(C,ee),t(n,te),t(n,L),v(b,L,null),t(n,oe),t(n,D),v(P,D,null),t(n,ne),t(n,E),v(w,E,null),t(n,ie),t(n,U),v(N,U,null),t(n,re),t(n,I),v(k,I,null),G=!0},p:be,i(e){G||(O(T.$$.fragment,e),O(y.$$.fragment,e),O(R.$$.fragment,e),O(b.$$.fragment,e),O(P.$$.fragment,e),O(w.$$.fragment,e),O(N.$$.fragment,e),O(k.$$.fragment,e),G=!0)},o(e){z(T.$$.fragment,e),z(y.$$.fragment,e),z(R.$$.fragment,e),z(b.$$.fragment,e),z(P.$$.fragment,e),z(w.$$.fragment,e),z(N.$$.fragment,e),z(k.$$.fragment,e),G=!1},d(e){o(c),e&&o(M),e&&o(h),$(T),e&&o(q),e&&o(l),$(y),e&&o(B),e&&o(n),$(R),$(b),$(P),$(w),$(N),$(k)}}}const Ne={local:"optimization",sections:[{local:"optimum.onnxruntime.ORTOptimizer",title:"ORTOptimizer"}],title:"Optimization"};function ke(se){return Pe(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class Ue extends $e{constructor(c){super();Te(this,c,ke,we,ye,{})}}export{Ue as default,Ne as metadata};
