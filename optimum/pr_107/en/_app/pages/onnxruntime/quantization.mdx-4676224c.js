import{S as de,i as ce,s as he,e as n,k as s,w as h,t as u,M as ge,c as o,d as a,m,a as r,x as g,h as p,b as i,F as e,g as f,y as _,L as fe,q as v,o as $,B as x,v as _e}from"../../chunks/vendor-19e06bd2.js";import{D as B}from"../../chunks/Docstring-395e5a9c.js";import{I as jt}from"../../chunks/IconCopyLink-3c713d38.js";function ve(Gt){let b,rt,R,z,j,L,Rt,G,Ot,it,O,y,K,P,wt,Y,zt,st,k,C,mt,w,T,Z,I,yt,tt,Tt,lt,l,A,Dt,D,S,Et,et,Qt,qt,E,U,Nt,at,Lt,Pt,Q,F,kt,H,Ct,nt,It,At,St,q,V,Ut,X,Ft,ot,Ht,Vt,Xt,N,M,Mt,W,Wt,J,Bt,Jt,ut;return L=new jt({}),P=new jt({}),C=new B({props:{name:"class optimum.onnxruntime.quantization.ORTCalibrationDataReader",anchor:"optimum.onnxruntime.quantization.ORTCalibrationDataReader",parameters:[{name:"calib_dataloader",val:": DataLoader"}],source:"https://github.com/huggingface/optimum/blob/pr_107/src/optimum/onnxruntime/quantization.py#L60"}}),I=new jt({}),A=new B({props:{name:"class optimum.onnxruntime.ORTQuantizer",anchor:"optimum.onnxruntime.ORTQuantizer",parameters:[{name:"ort_config",val:": typing.Union[str, optimum.onnxruntime.configuration.ORTConfig]"},{name:"calib_dataset",val:": typing.Optional[datasets.arrow_dataset.Dataset] = None"},{name:"dataset_name",val:": typing.Optional[str] = None"},{name:"dataset_config_name",val:": typing.Optional[str] = None"},{name:"data_files",val:": typing.Optional[str] = None"},{name:"preprocess_function",val:": typing.Optional[typing.Callable] = None"},{name:"data_collator",val:": typing.Optional[DataCollator] = None"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/optimum/blob/pr_107/src/optimum/onnxruntime/quantization.py#L68"}}),S=new B({props:{name:"export",anchor:"optimum.onnxruntime.ORTQuantizer.export",parameters:[{name:"model_name_or_path",val:": typing.Union[str, os.PathLike]"},{name:"output_path",val:": typing.Union[str, os.PathLike]"},{name:"feature",val:": str = 'default'"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/optimum/blob/pr_107/src/optimum/onnxruntime/quantization.py#L147",parametersDescription:[{anchor:"optimum.onnxruntime.ORTQuantizer.export.model_name_or_path",description:`<strong>model_name_or_path</strong> (<em>Union[str, os.PathLike]</em>) &#x2014;
Repository name in the Hugging Face Hub or path to a local directory hosting the model.`,name:"model_name_or_path"},{anchor:"optimum.onnxruntime.ORTQuantizer.export.output_path",description:`<strong>output_path</strong> (<em>os.PathLike</em>) &#x2014;
The path used to save the model exported to an ONNX Intermediate Representation (IR).`,name:"output_path"},{anchor:"optimum.onnxruntime.ORTQuantizer.export.feature",description:`<strong>feature</strong> (<em>str</em>, defaults to <em>&#x201C;default&#x201D;</em>) &#x2014;
Feature to use when exporting the model.`,name:"feature"},{anchor:"optimum.onnxruntime.ORTQuantizer.export.cache_dir",description:`<strong>cache_dir</strong> (<em>str</em>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"optimum.onnxruntime.ORTQuantizer.export.force_download",description:`<strong>force_download</strong> (<em>bool</em>, <em>optional</em>, defaults to <em>False</em>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"optimum.onnxruntime.ORTQuantizer.export.resume_download",description:`<strong>resume_download</strong> (<em>bool</em>, <em>optional</em>, defaults to <em>False</em>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"optimum.onnxruntime.ORTQuantizer.export.revision(str,",description:`<strong>revision(<em>str</em>,</strong> <em>optional</em>) &#x2014;
The specific version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"}]}}),U=new B({props:{name:"fit",anchor:"optimum.onnxruntime.ORTQuantizer.fit",parameters:[{name:"model_name_or_path",val:": typing.Union[str, os.PathLike]"},{name:"output_dir",val:": typing.Union[str, os.PathLike]"},{name:"feature",val:": str = 'default'"},{name:"config",val:": typing.Optional[transformers.configuration_utils.PretrainedConfig] = None"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/optimum/blob/pr_107/src/optimum/onnxruntime/quantization.py#L200",parametersDescription:[{anchor:"optimum.onnxruntime.ORTQuantizer.fit.model_name_or_path",description:`<strong>model_name_or_path</strong> (<code>Union[str, os.PathLike]</code>) &#x2014;
Repository name in the Hugging Face Hub, path to a local directory hosting the model or path to a
pre-existing onnx model.`,name:"model_name_or_path"},{anchor:"optimum.onnxruntime.ORTQuantizer.fit.output_dir",description:`<strong>output_dir</strong> (<code>Union[str, os.PathLike]</code>) &#x2014;
The output directory where the quantized model will be saved.`,name:"output_dir"},{anchor:"optimum.onnxruntime.ORTQuantizer.fit.feature",description:`<strong>feature</strong> (<code>str</code>, defaults to <code>&quot;default&quot;</code>) &#x2014;
Feature to use when exporting the model.`,name:"feature"},{anchor:"optimum.onnxruntime.ORTQuantizer.fit.config",description:`<strong>config</strong> (<code>PretrainedConfig</code>, <code>optional</code>) &#x2014;
A configuration associated to the pre-existing ONNX model.`,name:"config"}]}}),F=new B({props:{name:"get_calib_dataloader",anchor:"optimum.onnxruntime.ORTQuantizer.get_calib_dataloader",parameters:[{name:"calib_dataset",val:": typing.Optional[datasets.arrow_dataset.Dataset] = None"}],source:"https://github.com/huggingface/optimum/blob/pr_107/src/optimum/onnxruntime/quantization.py#L310",parametersDescription:[{anchor:"optimum.onnxruntime.ORTQuantizer.get_calib_dataloader.calib_dataset",description:`<strong>calib_dataset</strong> (<em>torch.utils.data.Dataset</em>, <em>optional</em>) &#x2014;
If provided, will override <em>self.calib_dataset</em>.`,name:"calib_dataset"}]}}),V=new B({props:{name:"get_calib_dataset",anchor:"optimum.onnxruntime.ORTQuantizer.get_calib_dataset",parameters:[],source:"https://github.com/huggingface/optimum/blob/pr_107/src/optimum/onnxruntime/quantization.py#L285"}}),M=new B({props:{name:"get_data_reader",anchor:"optimum.onnxruntime.ORTQuantizer.get_data_reader",parameters:[{name:"calib_dataloader",val:": DataLoader"}],source:"https://github.com/huggingface/optimum/blob/pr_107/src/optimum/onnxruntime/quantization.py#L339",parametersDescription:[{anchor:"optimum.onnxruntime.ORTQuantizer.get_data_reader.calib_dataloader",description:`<strong>calib_dataloader</strong> (<em>torch.utils.data.DataLoader</em>) &#x2014;
Calibration dataloader to use for the post-training static quantization calibration step.`,name:"calib_dataloader"}]}}),{c(){b=n("meta"),rt=s(),R=n("h1"),z=n("a"),j=n("span"),h(L.$$.fragment),Rt=s(),G=n("span"),Ot=u("Quantization"),it=s(),O=n("h2"),y=n("a"),K=n("span"),h(P.$$.fragment),wt=s(),Y=n("span"),zt=u("ORTCalibrationDataReader"),st=s(),k=n("div"),h(C.$$.fragment),mt=s(),w=n("h2"),T=n("a"),Z=n("span"),h(I.$$.fragment),yt=s(),tt=n("span"),Tt=u("ORTQuantizer"),lt=s(),l=n("div"),h(A.$$.fragment),Dt=s(),D=n("div"),h(S.$$.fragment),Et=s(),et=n("p"),Qt=u("Loads and exports a model to an ONNX Intermediate Representation (IR)."),qt=s(),E=n("div"),h(U.$$.fragment),Nt=s(),at=n("p"),Lt=u("Applies ONNX Runtime quantization on a given model and saves the resulting model."),Pt=s(),Q=n("div"),h(F.$$.fragment),kt=s(),H=n("p"),Ct=u("Returns the calibration "),nt=n("code"),It=u("DataLoader"),At=u("."),St=s(),q=n("div"),h(V.$$.fragment),Ut=s(),X=n("p"),Ft=u("Returns the calibration "),ot=n("code"),Ht=u("Dataset"),Vt=u(` to use for the post-training static
quantization calibration step.`),Xt=s(),N=n("div"),h(M.$$.fragment),Mt=s(),W=n("p"),Wt=u("Returns the calibration "),J=n("a"),Bt=u("ORTCalibrationDataReader"),Jt=u("."),this.h()},l(t){const d=ge('[data-svelte="svelte-1phssyn"]',document.head);b=o(d,"META",{name:!0,content:!0}),d.forEach(a),rt=m(t),R=o(t,"H1",{class:!0});var pt=r(R);z=o(pt,"A",{id:!0,class:!0,href:!0});var Kt=r(z);j=o(Kt,"SPAN",{});var Yt=r(j);g(L.$$.fragment,Yt),Yt.forEach(a),Kt.forEach(a),Rt=m(pt),G=o(pt,"SPAN",{});var Zt=r(G);Ot=p(Zt,"Quantization"),Zt.forEach(a),pt.forEach(a),it=m(t),O=o(t,"H2",{class:!0});var dt=r(O);y=o(dt,"A",{id:!0,class:!0,href:!0});var te=r(y);K=o(te,"SPAN",{});var ee=r(K);g(P.$$.fragment,ee),ee.forEach(a),te.forEach(a),wt=m(dt),Y=o(dt,"SPAN",{});var ae=r(Y);zt=p(ae,"ORTCalibrationDataReader"),ae.forEach(a),dt.forEach(a),st=m(t),k=o(t,"DIV",{class:!0});var ne=r(k);g(C.$$.fragment,ne),ne.forEach(a),mt=m(t),w=o(t,"H2",{class:!0});var ct=r(w);T=o(ct,"A",{id:!0,class:!0,href:!0});var oe=r(T);Z=o(oe,"SPAN",{});var re=r(Z);g(I.$$.fragment,re),re.forEach(a),oe.forEach(a),yt=m(ct),tt=o(ct,"SPAN",{});var ie=r(tt);Tt=p(ie,"ORTQuantizer"),ie.forEach(a),ct.forEach(a),lt=m(t),l=o(t,"DIV",{class:!0});var c=r(l);g(A.$$.fragment,c),Dt=m(c),D=o(c,"DIV",{class:!0});var ht=r(D);g(S.$$.fragment,ht),Et=m(ht),et=o(ht,"P",{});var se=r(et);Qt=p(se,"Loads and exports a model to an ONNX Intermediate Representation (IR)."),se.forEach(a),ht.forEach(a),qt=m(c),E=o(c,"DIV",{class:!0});var gt=r(E);g(U.$$.fragment,gt),Nt=m(gt),at=o(gt,"P",{});var me=r(at);Lt=p(me,"Applies ONNX Runtime quantization on a given model and saves the resulting model."),me.forEach(a),gt.forEach(a),Pt=m(c),Q=o(c,"DIV",{class:!0});var ft=r(Q);g(F.$$.fragment,ft),kt=m(ft),H=o(ft,"P",{});var _t=r(H);Ct=p(_t,"Returns the calibration "),nt=o(_t,"CODE",{});var le=r(nt);It=p(le,"DataLoader"),le.forEach(a),At=p(_t,"."),_t.forEach(a),ft.forEach(a),St=m(c),q=o(c,"DIV",{class:!0});var vt=r(q);g(V.$$.fragment,vt),Ut=m(vt),X=o(vt,"P",{});var $t=r(X);Ft=p($t,"Returns the calibration "),ot=o($t,"CODE",{});var ue=r(ot);Ht=p(ue,"Dataset"),ue.forEach(a),Vt=p($t,` to use for the post-training static
quantization calibration step.`),$t.forEach(a),vt.forEach(a),Xt=m(c),N=o(c,"DIV",{class:!0});var xt=r(N);g(M.$$.fragment,xt),Mt=m(xt),W=o(xt,"P",{});var bt=r(W);Wt=p(bt,"Returns the calibration "),J=o(bt,"A",{href:!0});var pe=r(J);Bt=p(pe,"ORTCalibrationDataReader"),pe.forEach(a),Jt=p(bt,"."),bt.forEach(a),xt.forEach(a),c.forEach(a),this.h()},h(){i(b,"name","hf:doc:metadata"),i(b,"content",JSON.stringify($e)),i(z,"id","quantization"),i(z,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),i(z,"href","#quantization"),i(R,"class","relative group"),i(y,"id","optimum.onnxruntime.quantization.ORTCalibrationDataReader"),i(y,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),i(y,"href","#optimum.onnxruntime.quantization.ORTCalibrationDataReader"),i(O,"class","relative group"),i(k,"class","docstring"),i(T,"id","optimum.onnxruntime.ORTQuantizer"),i(T,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),i(T,"href","#optimum.onnxruntime.ORTQuantizer"),i(w,"class","relative group"),i(D,"class","docstring"),i(E,"class","docstring"),i(Q,"class","docstring"),i(q,"class","docstring"),i(J,"href","/docs/optimum/pr_107/en/onnxruntime/quantization#optimum.onnxruntime.quantization.ORTCalibrationDataReader"),i(N,"class","docstring"),i(l,"class","docstring")},m(t,d){e(document.head,b),f(t,rt,d),f(t,R,d),e(R,z),e(z,j),_(L,j,null),e(R,Rt),e(R,G),e(G,Ot),f(t,it,d),f(t,O,d),e(O,y),e(y,K),_(P,K,null),e(O,wt),e(O,Y),e(Y,zt),f(t,st,d),f(t,k,d),_(C,k,null),f(t,mt,d),f(t,w,d),e(w,T),e(T,Z),_(I,Z,null),e(w,yt),e(w,tt),e(tt,Tt),f(t,lt,d),f(t,l,d),_(A,l,null),e(l,Dt),e(l,D),_(S,D,null),e(D,Et),e(D,et),e(et,Qt),e(l,qt),e(l,E),_(U,E,null),e(E,Nt),e(E,at),e(at,Lt),e(l,Pt),e(l,Q),_(F,Q,null),e(Q,kt),e(Q,H),e(H,Ct),e(H,nt),e(nt,It),e(H,At),e(l,St),e(l,q),_(V,q,null),e(q,Ut),e(q,X),e(X,Ft),e(X,ot),e(ot,Ht),e(X,Vt),e(l,Xt),e(l,N),_(M,N,null),e(N,Mt),e(N,W),e(W,Wt),e(W,J),e(J,Bt),e(W,Jt),ut=!0},p:fe,i(t){ut||(v(L.$$.fragment,t),v(P.$$.fragment,t),v(C.$$.fragment,t),v(I.$$.fragment,t),v(A.$$.fragment,t),v(S.$$.fragment,t),v(U.$$.fragment,t),v(F.$$.fragment,t),v(V.$$.fragment,t),v(M.$$.fragment,t),ut=!0)},o(t){$(L.$$.fragment,t),$(P.$$.fragment,t),$(C.$$.fragment,t),$(I.$$.fragment,t),$(A.$$.fragment,t),$(S.$$.fragment,t),$(U.$$.fragment,t),$(F.$$.fragment,t),$(V.$$.fragment,t),$(M.$$.fragment,t),ut=!1},d(t){a(b),t&&a(rt),t&&a(R),x(L),t&&a(it),t&&a(O),x(P),t&&a(st),t&&a(k),x(C),t&&a(mt),t&&a(w),x(I),t&&a(lt),t&&a(l),x(A),x(S),x(U),x(F),x(V),x(M)}}}const $e={local:"quantization",sections:[{local:"optimum.onnxruntime.quantization.ORTCalibrationDataReader",title:"ORTCalibrationDataReader"},{local:"optimum.onnxruntime.ORTQuantizer",title:"ORTQuantizer"}],title:"Quantization"};function xe(Gt){return _e(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class we extends de{constructor(b){super();ce(this,b,xe,ve,he,{})}}export{we as default,$e as metadata};
