import{S as ie,i as se,s as le,e as r,k as y,w as S,t as K,M as ce,c as a,d as t,m as $,a as i,x as z,h as Q,b as o,F as n,g as T,y as C,L as me,q as U,o as q,B as R,v as pe}from"../../chunks/vendor-19e06bd2.js";import{D as ae}from"../../chunks/Docstring-395e5a9c.js";import{I as oe}from"../../chunks/IconCopyLink-3c713d38.js";function de(W){let s,P,l,d,k,g,B,b,F,x,c,u,w,f,H,N,V,E,m,_,j,h,v,J,I,G,A;return g=new oe({}),f=new oe({}),_=new ae({props:{name:"class optimum.intel.IncTrainer",anchor:"optimum.intel.IncTrainer",parameters:[{name:"model",val:": typing.Union[transformers.modeling_utils.PreTrainedModel, torch.nn.modules.module.Module] = None"},{name:"args",val:": TrainingArguments = None"},{name:"data_collator",val:": typing.Optional[DataCollator] = None"},{name:"train_dataset",val:": typing.Optional[torch.utils.data.dataset.Dataset] = None"},{name:"eval_dataset",val:": typing.Optional[torch.utils.data.dataset.Dataset] = None"},{name:"tokenizer",val:": typing.Optional[transformers.tokenization_utils_base.PreTrainedTokenizerBase] = None"},{name:"model_init",val:": typing.Callable[[], transformers.modeling_utils.PreTrainedModel] = None"},{name:"compute_metrics",val:": typing.Union[typing.Callable[[transformers.trainer_utils.EvalPrediction], typing.Dict], NoneType] = None"},{name:"callbacks",val:": typing.Optional[typing.List[transformers.trainer_callback.TrainerCallback]] = None"},{name:"optimizers",val:": typing.Tuple[torch.optim.optimizer.Optimizer, torch.optim.lr_scheduler.LambdaLR] = (None, None)"}],source:"https://github.com/huggingface/optimum/blob/pr_125/src/optimum/intel/neural_compressor/trainer.py#L51"}}),v=new ae({props:{name:"train",anchor:"optimum.intel.IncTrainer.train",parameters:[{name:"pruner",val:": typing.Optional[neural_compressor.experimental.pruning.Pruning] = None"},{name:"resume_from_checkpoint",val:": typing.Union[str, bool, NoneType] = None"},{name:"trial",val:": typing.Union[ForwardRef('optuna.Trial'), typing.Dict[str, typing.Any]] = None"},{name:"ignore_keys_for_eval",val:": typing.Optional[typing.List[str]] = None"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/optimum/blob/pr_125/src/optimum/intel/neural_compressor/trainer.py#L52",parametersDescription:[{anchor:"optimum.intel.IncTrainer.train.pruner",description:`<strong>pruner</strong> (<code>Pruning</code>, <em>optional</em>) &#x2014;
Pruning object handling the pruning process.`,name:"pruner"},{anchor:"optimum.intel.IncTrainer.train.resume_from_checkpoint",description:`<strong>resume_from_checkpoint</strong> (<code>str</code> or <code>bool</code>, <em>optional</em>) &#x2014;
If a <code>str</code>, local path to a saved checkpoint as saved by a previous instance of
<code>Trainer</code>. If a <code>bool</code> and equals <em>True</em>, load the last checkpoint in
<em>args.output_dir</em> as saved by a previous instance of <code>Trainer</code>. If present,
training will resume from the model/optimizer/scheduler states loaded here.`,name:"resume_from_checkpoint"},{anchor:"optimum.intel.IncTrainer.train.trial",description:`<strong>trial</strong> (<code>optuna.Trial</code> or <code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The trial run or the hyperparameter dictionary for hyperparameter search.`,name:"trial"},{anchor:"optimum.intel.IncTrainer.train.ignore_keys_for_eval",description:`<strong>ignore_keys_for_eval</strong> (<code>List[str]</code>, <em>optional</em>) &#x2014;
A list of keys in the output of your model (if it is a dictionary) that should be ignored when
gathering predictions for evaluation during the training.
kwargs &#x2014;
Additional keyword arguments used to hide deprecated arguments`,name:"ignore_keys_for_eval"}]}}),{c(){s=r("meta"),P=y(),l=r("h1"),d=r("a"),k=r("span"),S(g.$$.fragment),B=y(),b=r("span"),F=K("Trainer"),x=y(),c=r("h2"),u=r("a"),w=r("span"),S(f.$$.fragment),H=y(),N=r("span"),V=K("IncTrainer"),E=y(),m=r("div"),S(_.$$.fragment),j=y(),h=r("div"),S(v.$$.fragment),J=y(),I=r("p"),G=K("Main training entry point."),this.h()},l(e){const p=ce('[data-svelte="svelte-1phssyn"]',document.head);s=a(p,"META",{name:!0,content:!0}),p.forEach(t),P=$(e),l=a(e,"H1",{class:!0});var D=i(l);d=a(D,"A",{id:!0,class:!0,href:!0});var X=i(d);k=a(X,"SPAN",{});var Y=i(k);z(g.$$.fragment,Y),Y.forEach(t),X.forEach(t),B=$(D),b=a(D,"SPAN",{});var Z=i(b);F=Q(Z,"Trainer"),Z.forEach(t),D.forEach(t),x=$(e),c=a(e,"H2",{class:!0});var L=i(c);u=a(L,"A",{id:!0,class:!0,href:!0});var ee=i(u);w=a(ee,"SPAN",{});var te=i(w);z(f.$$.fragment,te),te.forEach(t),ee.forEach(t),H=$(L),N=a(L,"SPAN",{});var ne=i(N);V=Q(ne,"IncTrainer"),ne.forEach(t),L.forEach(t),E=$(e),m=a(e,"DIV",{class:!0});var O=i(m);z(_.$$.fragment,O),j=$(O),h=a(O,"DIV",{class:!0});var M=i(h);z(v.$$.fragment,M),J=$(M),I=a(M,"P",{});var re=i(I);G=Q(re,"Main training entry point."),re.forEach(t),M.forEach(t),O.forEach(t),this.h()},h(){o(s,"name","hf:doc:metadata"),o(s,"content",JSON.stringify(ue)),o(d,"id","trainer"),o(d,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),o(d,"href","#trainer"),o(l,"class","relative group"),o(u,"id","optimum.intel.IncTrainer"),o(u,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),o(u,"href","#optimum.intel.IncTrainer"),o(c,"class","relative group"),o(h,"class","docstring"),o(m,"class","docstring")},m(e,p){n(document.head,s),T(e,P,p),T(e,l,p),n(l,d),n(d,k),C(g,k,null),n(l,B),n(l,b),n(b,F),T(e,x,p),T(e,c,p),n(c,u),n(u,w),C(f,w,null),n(c,H),n(c,N),n(N,V),T(e,E,p),T(e,m,p),C(_,m,null),n(m,j),n(m,h),C(v,h,null),n(h,J),n(h,I),n(I,G),A=!0},p:me,i(e){A||(U(g.$$.fragment,e),U(f.$$.fragment,e),U(_.$$.fragment,e),U(v.$$.fragment,e),A=!0)},o(e){q(g.$$.fragment,e),q(f.$$.fragment,e),q(_.$$.fragment,e),q(v.$$.fragment,e),A=!1},d(e){t(s),e&&t(P),e&&t(l),R(g),e&&t(x),e&&t(c),R(f),e&&t(E),e&&t(m),R(_),R(v)}}}const ue={local:"trainer",sections:[{local:"optimum.intel.IncTrainer",title:"IncTrainer"}],title:"Trainer"};function he(W){return pe(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class ve extends ie{constructor(s){super();se(this,s,he,de,le,{})}}export{ve as default,ue as metadata};
