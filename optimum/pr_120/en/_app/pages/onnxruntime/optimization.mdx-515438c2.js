import{S as Ke,i as Qe,s as Ye,e as n,k as m,w as y,t as h,M as Ze,c as i,d as o,m as p,a as r,x as T,h as c,b as s,F as e,g as H,y as P,L as et,q as R,o as w,B as k,v as tt}from"../../chunks/vendor-19e06bd2.js";import{D as V}from"../../chunks/Docstring-395e5a9c.js";import{I as je}from"../../chunks/IconCopyLink-3c713d38.js";function ot(Ce){let l,Y,u,g,F,N,he,M,ce,Z,_,x,q,E,le,B,ue,ee,a,L,_e,G,fe,ge,z,D,xe,U,ze,J,ve,Oe,$e,v,I,be,C,ye,W,Te,Pe,Re,O,X,we,j,ke,Ne,$,A,Ee,K,Le,De,b,S,Ue,Q,Ie,te;return N=new je({}),E=new je({}),L=new V({props:{name:"class optimum.onnxruntime.ORTOptimizer",anchor:"optimum.onnxruntime.ORTOptimizer",parameters:[{name:"tokenizer",val:": PreTrainedTokenizer"},{name:"model",val:": PreTrainedModel"},{name:"feature",val:": str = 'default'"},{name:"opset",val:": typing.Optional[int] = None"}],source:"https://github.com/huggingface/optimum/blob/pr_120/src/optimum/onnxruntime/optimization.py#L33"}}),D=new V({props:{name:"export",anchor:"optimum.onnxruntime.ORTOptimizer.export",parameters:[{name:"onnx_model_path",val:": typing.Union[str, os.PathLike]"},{name:"onnx_optimized_model_output_path",val:": typing.Union[str, os.PathLike]"},{name:"optimization_config",val:": OptimizationConfig"},{name:"use_external_data_format",val:": bool = False"}],source:"https://github.com/huggingface/optimum/blob/pr_120/src/optimum/onnxruntime/optimization.py#L95",parametersDescription:[{anchor:"optimum.onnxruntime.ORTOptimizer.export.onnx_model_path",description:`<strong>onnx_model_path</strong> (<code>Union[str, os.PathLike]</code>) &#x2014;
The path used to save the model exported to an ONNX Intermediate Representation (IR).`,name:"onnx_model_path"},{anchor:"optimum.onnxruntime.ORTOptimizer.export.onnx_optimized_model_output_path",description:`<strong>onnx_optimized_model_output_path</strong> (<code>Union[str, os.PathLike]</code>) &#x2014;
The path used to save the optimized model exported to an ONNX Intermediate Representation (IR).`,name:"onnx_optimized_model_output_path"},{anchor:"optimum.onnxruntime.ORTOptimizer.export.optimization_config",description:`<strong>optimization_config</strong> (<code>OptimizationConfig</code>) &#x2014;
The configuration containing the parameters related to optimization.`,name:"optimization_config"},{anchor:"optimum.onnxruntime.ORTOptimizer.export.use_external_data_format",description:`<strong>use_external_data_format</strong> (<code>bool</code>, defaults to <code>False</code>) &#x2014;
Whether uto se external data format to store model which size is &gt;= 2Gb.`,name:"use_external_data_format"}],returnDescription:`
<p>The path of the resulting optimized model.</p>
`}}),I=new V({props:{name:"from_pretrained",anchor:"optimum.onnxruntime.ORTOptimizer.from_pretrained",parameters:[{name:"model_name_or_path",val:": typing.Union[str, os.PathLike]"},{name:"feature",val:": str"},{name:"opset",val:": typing.Optional[int] = None"}],source:"https://github.com/huggingface/optimum/blob/pr_120/src/optimum/onnxruntime/optimization.py#L38",parametersDescription:[{anchor:"optimum.onnxruntime.ORTOptimizer.from_pretrained.model_name_or_path",description:`<strong>model_name_or_path</strong> (<code>Union[str, os.PathLike]</code>) &#x2014;
Repository name in the Hugging Face Hub or path to a local directory hosting the model.`,name:"model_name_or_path"},{anchor:"optimum.onnxruntime.ORTOptimizer.from_pretrained.feature",description:`<strong>feature</strong> (<code>str</code>) &#x2014;
Feature to use when exporting the model.`,name:"feature"},{anchor:"optimum.onnxruntime.ORTOptimizer.from_pretrained.opset",description:`<strong>opset</strong> (<code>int</code>, <em>optional</em>) &#x2014;
ONNX opset version to export the model with.`,name:"opset"}],returnDescription:`
<p>An instance of <code>ORTOptimizer</code>.</p>
`}}),X=new V({props:{name:"get_fused_operators",anchor:"optimum.onnxruntime.ORTOptimizer.get_fused_operators",parameters:[{name:"onnx_model_path",val:": typing.Union[str, os.PathLike]"}],source:"https://github.com/huggingface/optimum/blob/pr_120/src/optimum/onnxruntime/optimization.py#L161",parametersDescription:[{anchor:"optimum.onnxruntime.ORTOptimizer.get_fused_operators.onnx_model_path",description:`<strong>onnx_model_path</strong> (<code>Union[str, os.PathLike]</code>) &#x2014;
Path of the ONNX model.`,name:"onnx_model_path"}],returnDescription:`
<p>The dictionary mapping the name of the fused operators to their number of apparition in the model.</p>
`}}),A=new V({props:{name:"get_nodes_number_difference",anchor:"optimum.onnxruntime.ORTOptimizer.get_nodes_number_difference",parameters:[{name:"onnx_model_path",val:": typing.Union[str, os.PathLike]"},{name:"onnx_optimized_model_path",val:": typing.Union[str, os.PathLike]"}],source:"https://github.com/huggingface/optimum/blob/pr_120/src/optimum/onnxruntime/optimization.py#L180",parametersDescription:[{anchor:"optimum.onnxruntime.ORTOptimizer.get_nodes_number_difference.onnx_model_path",description:`<strong>onnx_model_path</strong> (<code>Union[str, os.PathLike]</code>) &#x2014;
Path of the ONNX model.`,name:"onnx_model_path"},{anchor:"optimum.onnxruntime.ORTOptimizer.get_nodes_number_difference.onnx_optimized_model_path",description:`<strong>onnx_optimized_model_path</strong> (<code>Union[str, os.PathLike]</code>) &#x2014;
Path of the optimized ONNX model.`,name:"onnx_optimized_model_path"}],returnDescription:`
<p>The difference in the number of nodes between the original and the optimized model.</p>
`}}),S=new V({props:{name:"get_operators_difference",anchor:"optimum.onnxruntime.ORTOptimizer.get_operators_difference",parameters:[{name:"onnx_model_path",val:": typing.Union[str, os.PathLike]"},{name:"onnx_optimized_model_path",val:": typing.Union[str, os.PathLike]"}],source:"https://github.com/huggingface/optimum/blob/pr_120/src/optimum/onnxruntime/optimization.py#L209",parametersDescription:[{anchor:"optimum.onnxruntime.ORTOptimizer.get_operators_difference.onnx_model_path",description:`<strong>onnx_model_path</strong> (<code>Union[str, os.PathLike]</code>) &#x2014;
Path of the ONNX model.`,name:"onnx_model_path"},{anchor:"optimum.onnxruntime.ORTOptimizer.get_operators_difference.onnx_optimized_model_path",description:`<strong>onnx_optimized_model_path</strong> (<code>Union[str, os.PathLike]</code>) &#x2014;
Path of the optimized ONNX model.`,name:"onnx_optimized_model_path"}],returnDescription:`
<p>The dictionary mapping the operators name to the difference in the number of corresponding nodes between the
original and the optimized model.</p>
`}}),{c(){l=n("meta"),Y=m(),u=n("h1"),g=n("a"),F=n("span"),y(N.$$.fragment),he=m(),M=n("span"),ce=h("Optimization"),Z=m(),_=n("h2"),x=n("a"),q=n("span"),y(E.$$.fragment),le=m(),B=n("span"),ue=h("ORTOptimizer"),ee=m(),a=n("div"),y(L.$$.fragment),_e=m(),G=n("p"),fe=h("Handles the ONNX Runtime optimization process for models shared on huggingface.co/models."),ge=m(),z=n("div"),y(D.$$.fragment),xe=m(),U=n("p"),ze=h("Optimize a model given the optimization specifications defined in "),J=n("code"),ve=h("optimization_config"),Oe=h("."),$e=m(),v=n("div"),y(I.$$.fragment),be=m(),C=n("p"),ye=h("Instantiate a "),W=n("code"),Te=h("ORTOptimizer"),Pe=h(" from a pretrained pytorch model and tokenizer."),Re=m(),O=n("div"),y(X.$$.fragment),we=m(),j=n("p"),ke=h("Compute the dictionary mapping the name of the fused operators to their number of apparition in the model."),Ne=m(),$=n("div"),y(A.$$.fragment),Ee=m(),K=n("p"),Le=h("Compute the difference in the number of nodes between the original and the optimized model."),De=m(),b=n("div"),y(S.$$.fragment),Ue=m(),Q=n("p"),Ie=h(`Compute the dictionary mapping the operators name to the difference in the number of corresponding nodes between
the original and the optimized model.`),this.h()},l(t){const f=Ze('[data-svelte="svelte-1phssyn"]',document.head);l=i(f,"META",{name:!0,content:!0}),f.forEach(o),Y=p(t),u=i(t,"H1",{class:!0});var oe=r(u);g=i(oe,"A",{id:!0,class:!0,href:!0});var Xe=r(g);F=i(Xe,"SPAN",{});var Ae=r(F);T(N.$$.fragment,Ae),Ae.forEach(o),Xe.forEach(o),he=p(oe),M=i(oe,"SPAN",{});var Se=r(M);ce=c(Se,"Optimization"),Se.forEach(o),oe.forEach(o),Z=p(t),_=i(t,"H2",{class:!0});var ne=r(_);x=i(ne,"A",{id:!0,class:!0,href:!0});var He=r(x);q=i(He,"SPAN",{});var Ve=r(q);T(E.$$.fragment,Ve),Ve.forEach(o),He.forEach(o),le=p(ne),B=i(ne,"SPAN",{});var Fe=r(B);ue=c(Fe,"ORTOptimizer"),Fe.forEach(o),ne.forEach(o),ee=p(t),a=i(t,"DIV",{class:!0});var d=r(a);T(L.$$.fragment,d),_e=p(d),G=i(d,"P",{});var Me=r(G);fe=c(Me,"Handles the ONNX Runtime optimization process for models shared on huggingface.co/models."),Me.forEach(o),ge=p(d),z=i(d,"DIV",{class:!0});var ie=r(z);T(D.$$.fragment,ie),xe=p(ie),U=i(ie,"P",{});var re=r(U);ze=c(re,"Optimize a model given the optimization specifications defined in "),J=i(re,"CODE",{});var qe=r(J);ve=c(qe,"optimization_config"),qe.forEach(o),Oe=c(re,"."),re.forEach(o),ie.forEach(o),$e=p(d),v=i(d,"DIV",{class:!0});var ae=r(v);T(I.$$.fragment,ae),be=p(ae),C=i(ae,"P",{});var me=r(C);ye=c(me,"Instantiate a "),W=i(me,"CODE",{});var Be=r(W);Te=c(Be,"ORTOptimizer"),Be.forEach(o),Pe=c(me," from a pretrained pytorch model and tokenizer."),me.forEach(o),ae.forEach(o),Re=p(d),O=i(d,"DIV",{class:!0});var pe=r(O);T(X.$$.fragment,pe),we=p(pe),j=i(pe,"P",{});var Ge=r(j);ke=c(Ge,"Compute the dictionary mapping the name of the fused operators to their number of apparition in the model."),Ge.forEach(o),pe.forEach(o),Ne=p(d),$=i(d,"DIV",{class:!0});var se=r($);T(A.$$.fragment,se),Ee=p(se),K=i(se,"P",{});var Je=r(K);Le=c(Je,"Compute the difference in the number of nodes between the original and the optimized model."),Je.forEach(o),se.forEach(o),De=p(d),b=i(d,"DIV",{class:!0});var de=r(b);T(S.$$.fragment,de),Ue=p(de),Q=i(de,"P",{});var We=r(Q);Ie=c(We,`Compute the dictionary mapping the operators name to the difference in the number of corresponding nodes between
the original and the optimized model.`),We.forEach(o),de.forEach(o),d.forEach(o),this.h()},h(){s(l,"name","hf:doc:metadata"),s(l,"content",JSON.stringify(nt)),s(g,"id","optimization"),s(g,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),s(g,"href","#optimization"),s(u,"class","relative group"),s(x,"id","optimum.onnxruntime.ORTOptimizer"),s(x,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),s(x,"href","#optimum.onnxruntime.ORTOptimizer"),s(_,"class","relative group"),s(z,"class","docstring"),s(v,"class","docstring"),s(O,"class","docstring"),s($,"class","docstring"),s(b,"class","docstring"),s(a,"class","docstring")},m(t,f){e(document.head,l),H(t,Y,f),H(t,u,f),e(u,g),e(g,F),P(N,F,null),e(u,he),e(u,M),e(M,ce),H(t,Z,f),H(t,_,f),e(_,x),e(x,q),P(E,q,null),e(_,le),e(_,B),e(B,ue),H(t,ee,f),H(t,a,f),P(L,a,null),e(a,_e),e(a,G),e(G,fe),e(a,ge),e(a,z),P(D,z,null),e(z,xe),e(z,U),e(U,ze),e(U,J),e(J,ve),e(U,Oe),e(a,$e),e(a,v),P(I,v,null),e(v,be),e(v,C),e(C,ye),e(C,W),e(W,Te),e(C,Pe),e(a,Re),e(a,O),P(X,O,null),e(O,we),e(O,j),e(j,ke),e(a,Ne),e(a,$),P(A,$,null),e($,Ee),e($,K),e(K,Le),e(a,De),e(a,b),P(S,b,null),e(b,Ue),e(b,Q),e(Q,Ie),te=!0},p:et,i(t){te||(R(N.$$.fragment,t),R(E.$$.fragment,t),R(L.$$.fragment,t),R(D.$$.fragment,t),R(I.$$.fragment,t),R(X.$$.fragment,t),R(A.$$.fragment,t),R(S.$$.fragment,t),te=!0)},o(t){w(N.$$.fragment,t),w(E.$$.fragment,t),w(L.$$.fragment,t),w(D.$$.fragment,t),w(I.$$.fragment,t),w(X.$$.fragment,t),w(A.$$.fragment,t),w(S.$$.fragment,t),te=!1},d(t){o(l),t&&o(Y),t&&o(u),k(N),t&&o(Z),t&&o(_),k(E),t&&o(ee),t&&o(a),k(L),k(D),k(I),k(X),k(A),k(S)}}}const nt={local:"optimization",sections:[{local:"optimum.onnxruntime.ORTOptimizer",title:"ORTOptimizer"}],title:"Optimization"};function it(Ce){return tt(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class pt extends Ke{constructor(l){super();Qe(this,l,it,ot,Ye,{})}}export{pt as default,nt as metadata};
