import{S as _t,i as ct,s as dt,e,k as m,w as _,t as c,M as ft,c as r,d as n,m as s,a as o,x as d,h as f,b as i,F as t,g as b,y as h,L as ht,q as g,o as v,B as $,v as gt}from"../../chunks/vendor-19e06bd2.js";import{D as L}from"../../chunks/Docstring-395e5a9c.js";import{I as Ga}from"../../chunks/IconCopyLink-3c713d38.js";function vt(Ka){let x,ia,z,R,G,C,za,K,ya,ma,y,O,W,N,qa,X,Ra,sa,A,I,pa,q,w,Y,S,Oa,Z,wa,la,p,F,Ea,E,V,Ta,aa,Da,Pa,T,U,Qa,ta,ka,La,D,M,Ca,na,Na,Aa,P,H,Ia,ea,Sa,Fa,Q,B,Va,J,Ua,ra,Ma,Ha,Ba,k,j,Ja,oa,ja,ua;return C=new Ga({}),N=new Ga({}),I=new L({props:{name:"class optimum.onnxruntime.quantization.ORTCalibrationDataReader",anchor:"optimum.onnxruntime.quantization.ORTCalibrationDataReader",parameters:[{name:"dataset",val:": Dataset"},{name:"batch_size",val:": int = 1"}],source:"https://github.com/huggingface/optimum/blob/pr_113/src/optimum/onnxruntime/quantization.py#L38"}}),S=new Ga({}),F=new L({props:{name:"class optimum.onnxruntime.ORTQuantizer",anchor:"optimum.onnxruntime.ORTQuantizer",parameters:[{name:"tokenizer",val:": PreTrainedTokenizer"},{name:"model",val:": PreTrainedModel"},{name:"feature",val:": str = 'default'"},{name:"opset",val:": typing.Optional[int] = None"}],source:"https://github.com/huggingface/optimum/blob/pr_113/src/optimum/onnxruntime/quantization.py#L77"}}),V=new L({props:{name:"compute_ranges",anchor:"optimum.onnxruntime.ORTQuantizer.compute_ranges",parameters:[],source:"https://github.com/huggingface/optimum/blob/pr_113/src/optimum/onnxruntime/quantization.py#L221"}}),U=new L({props:{name:"export",anchor:"optimum.onnxruntime.ORTQuantizer.export",parameters:[{name:"onnx_model_path",val:": typing.Union[str, os.PathLike]"},{name:"onnx_quantized_model_output_path",val:": typing.Union[str, os.PathLike]"},{name:"quantization_config",val:": QuantizationConfig"},{name:"calibration_tensors_range",val:": typing.Union[typing.Dict[str, typing.Tuple[float, float]], NoneType] = None"},{name:"use_external_data_format",val:": bool = False"},{name:"preprocessor",val:": typing.Optional[optimum.onnxruntime.preprocessors.quantization.QuantizationPreprocessor] = None"}],source:"https://github.com/huggingface/optimum/blob/pr_113/src/optimum/onnxruntime/quantization.py#L234"}}),M=new L({props:{name:"fit",anchor:"optimum.onnxruntime.ORTQuantizer.fit",parameters:[{name:"dataset",val:": Dataset"},{name:"calibration_config",val:": CalibrationConfig"},{name:"onnx_model_path",val:": typing.Union[str, os.PathLike, pathlib.Path]"},{name:"onnx_augmented_model_name",val:": str = 'augmented_model.onnx'"},{name:"operators_to_quantize",val:": typing.Optional[typing.List[str]] = None"},{name:"batch_size",val:": int = 1"},{name:"use_external_data_format",val:": bool = False"},{name:"use_gpu",val:": bool = False"},{name:"force_symmetric_range",val:": bool = False"}],source:"https://github.com/huggingface/optimum/blob/pr_113/src/optimum/onnxruntime/quantization.py#L124"}}),H=new L({props:{name:"from_pretrained",anchor:"optimum.onnxruntime.ORTQuantizer.from_pretrained",parameters:[{name:"model_name_or_path",val:": typing.Union[str, os.PathLike]"},{name:"feature",val:": str"},{name:"opset",val:": typing.Optional[int] = None"}],source:"https://github.com/huggingface/optimum/blob/pr_113/src/optimum/onnxruntime/quantization.py#L80"}}),B=new L({props:{name:"get_calibration_dataset",anchor:"optimum.onnxruntime.ORTQuantizer.get_calibration_dataset",parameters:[{name:"dataset_name",val:": str"},{name:"num_samples",val:": int = 100"},{name:"dataset_config_name",val:": typing.Optional[str] = None"},{name:"dataset_split",val:": typing.Optional[str] = None"},{name:"preprocess_function",val:": typing.Optional[typing.Callable] = None"},{name:"preprocess_batch",val:": bool = True"},{name:"seed",val:": int = 2016"}],source:"https://github.com/huggingface/optimum/blob/pr_113/src/optimum/onnxruntime/quantization.py#L324"}}),j=new L({props:{name:"partial_fit",anchor:"optimum.onnxruntime.ORTQuantizer.partial_fit",parameters:[{name:"dataset",val:": Dataset"},{name:"calibration_config",val:": CalibrationConfig"},{name:"onnx_model_path",val:": typing.Union[str, os.PathLike]"},{name:"onnx_augmented_model_name",val:": str = 'augmented_model.onnx'"},{name:"operators_to_quantize",val:": typing.Optional[typing.List[str]] = None"},{name:"batch_size",val:": int = 1"},{name:"use_external_data_format",val:": bool = False"},{name:"use_gpu",val:": bool = False"},{name:"force_symmetric_range",val:": bool = False"}],source:"https://github.com/huggingface/optimum/blob/pr_113/src/optimum/onnxruntime/quantization.py#L169"}}),{c(){x=e("meta"),ia=m(),z=e("h1"),R=e("a"),G=e("span"),_(C.$$.fragment),za=m(),K=e("span"),ya=c("Quantization"),ma=m(),y=e("h2"),O=e("a"),W=e("span"),_(N.$$.fragment),qa=m(),X=e("span"),Ra=c("ORTCalibrationDataReader"),sa=m(),A=e("div"),_(I.$$.fragment),pa=m(),q=e("h2"),w=e("a"),Y=e("span"),_(S.$$.fragment),Oa=m(),Z=e("span"),wa=c("ORTQuantizer"),la=m(),p=e("div"),_(F.$$.fragment),Ea=m(),E=e("div"),_(V.$$.fragment),Ta=m(),aa=e("p"),Da=c(":return:"),Pa=m(),T=e("div"),_(U.$$.fragment),Qa=m(),ta=e("p"),ka=c(`:param onnx_model_path:
:param onnx_quantized_model_output_path:
:param quantization_config:
:param calibration_tensors_range:
:param use_external_data_format:
:param preprocessor:
:return:`),La=m(),D=e("div"),_(M.$$.fragment),Ca=m(),na=e("p"),Na=c(`:param dataset
:param calibration_config:
:param onnx_model_path:
:param onnx_augmented_model_name
:param operators_to_quantize:
:param batch_size:
:param use_external_data_format:
:param use_gpu:
:param force_symmetric_range:
:return:`),Aa=m(),P=e("div"),_(H.$$.fragment),Ia=m(),ea=e("p"),Sa=c(`:param model_name_or_path:
:param feature:
:param opset:
:return:`),Fa=m(),Q=e("div"),_(B.$$.fragment),Va=m(),J=e("p"),Ua=c("Returns the calibration "),ra=e("code"),Ma=c("Dataset"),Ha=c(` to use for the post-training static
quantization calibration step.`),Ba=m(),k=e("div"),_(j.$$.fragment),Ja=m(),oa=e("p"),ja=c(`:param dataset:
:param calibration_config:
:param onnx_model_path:
:param onnx_augmented_model_name:
:param operators_to_quantize:
:param batch_size:
:param use_external_data_format:
:param use_gpu:
:param force_symmetric_range
:return:`),this.h()},l(a){const u=ft('[data-svelte="svelte-1phssyn"]',document.head);x=r(u,"META",{name:!0,content:!0}),u.forEach(n),ia=s(a),z=r(a,"H1",{class:!0});var _a=o(z);R=r(_a,"A",{id:!0,class:!0,href:!0});var Wa=o(R);G=r(Wa,"SPAN",{});var Xa=o(G);d(C.$$.fragment,Xa),Xa.forEach(n),Wa.forEach(n),za=s(_a),K=r(_a,"SPAN",{});var Ya=o(K);ya=f(Ya,"Quantization"),Ya.forEach(n),_a.forEach(n),ma=s(a),y=r(a,"H2",{class:!0});var ca=o(y);O=r(ca,"A",{id:!0,class:!0,href:!0});var Za=o(O);W=r(Za,"SPAN",{});var at=o(W);d(N.$$.fragment,at),at.forEach(n),Za.forEach(n),qa=s(ca),X=r(ca,"SPAN",{});var tt=o(X);Ra=f(tt,"ORTCalibrationDataReader"),tt.forEach(n),ca.forEach(n),sa=s(a),A=r(a,"DIV",{class:!0});var nt=o(A);d(I.$$.fragment,nt),nt.forEach(n),pa=s(a),q=r(a,"H2",{class:!0});var da=o(q);w=r(da,"A",{id:!0,class:!0,href:!0});var et=o(w);Y=r(et,"SPAN",{});var rt=o(Y);d(S.$$.fragment,rt),rt.forEach(n),et.forEach(n),Oa=s(da),Z=r(da,"SPAN",{});var ot=o(Z);wa=f(ot,"ORTQuantizer"),ot.forEach(n),da.forEach(n),la=s(a),p=r(a,"DIV",{class:!0});var l=o(p);d(F.$$.fragment,l),Ea=s(l),E=r(l,"DIV",{class:!0});var fa=o(E);d(V.$$.fragment,fa),Ta=s(fa),aa=r(fa,"P",{});var it=o(aa);Da=f(it,":return:"),it.forEach(n),fa.forEach(n),Pa=s(l),T=r(l,"DIV",{class:!0});var ha=o(T);d(U.$$.fragment,ha),Qa=s(ha),ta=r(ha,"P",{});var mt=o(ta);ka=f(mt,`:param onnx_model_path:
:param onnx_quantized_model_output_path:
:param quantization_config:
:param calibration_tensors_range:
:param use_external_data_format:
:param preprocessor:
:return:`),mt.forEach(n),ha.forEach(n),La=s(l),D=r(l,"DIV",{class:!0});var ga=o(D);d(M.$$.fragment,ga),Ca=s(ga),na=r(ga,"P",{});var st=o(na);Na=f(st,`:param dataset
:param calibration_config:
:param onnx_model_path:
:param onnx_augmented_model_name
:param operators_to_quantize:
:param batch_size:
:param use_external_data_format:
:param use_gpu:
:param force_symmetric_range:
:return:`),st.forEach(n),ga.forEach(n),Aa=s(l),P=r(l,"DIV",{class:!0});var va=o(P);d(H.$$.fragment,va),Ia=s(va),ea=r(va,"P",{});var pt=o(ea);Sa=f(pt,`:param model_name_or_path:
:param feature:
:param opset:
:return:`),pt.forEach(n),va.forEach(n),Fa=s(l),Q=r(l,"DIV",{class:!0});var $a=o(Q);d(B.$$.fragment,$a),Va=s($a),J=r($a,"P",{});var ba=o(J);Ua=f(ba,"Returns the calibration "),ra=r(ba,"CODE",{});var lt=o(ra);Ma=f(lt,"Dataset"),lt.forEach(n),Ha=f(ba,` to use for the post-training static
quantization calibration step.`),ba.forEach(n),$a.forEach(n),Ba=s(l),k=r(l,"DIV",{class:!0});var xa=o(k);d(j.$$.fragment,xa),Ja=s(xa),oa=r(xa,"P",{});var ut=o(oa);ja=f(ut,`:param dataset:
:param calibration_config:
:param onnx_model_path:
:param onnx_augmented_model_name:
:param operators_to_quantize:
:param batch_size:
:param use_external_data_format:
:param use_gpu:
:param force_symmetric_range
:return:`),ut.forEach(n),xa.forEach(n),l.forEach(n),this.h()},h(){i(x,"name","hf:doc:metadata"),i(x,"content",JSON.stringify($t)),i(R,"id","quantization"),i(R,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),i(R,"href","#quantization"),i(z,"class","relative group"),i(O,"id","optimum.onnxruntime.quantization.ORTCalibrationDataReader"),i(O,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),i(O,"href","#optimum.onnxruntime.quantization.ORTCalibrationDataReader"),i(y,"class","relative group"),i(A,"class","docstring"),i(w,"id","optimum.onnxruntime.ORTQuantizer"),i(w,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),i(w,"href","#optimum.onnxruntime.ORTQuantizer"),i(q,"class","relative group"),i(E,"class","docstring"),i(T,"class","docstring"),i(D,"class","docstring"),i(P,"class","docstring"),i(Q,"class","docstring"),i(k,"class","docstring"),i(p,"class","docstring")},m(a,u){t(document.head,x),b(a,ia,u),b(a,z,u),t(z,R),t(R,G),h(C,G,null),t(z,za),t(z,K),t(K,ya),b(a,ma,u),b(a,y,u),t(y,O),t(O,W),h(N,W,null),t(y,qa),t(y,X),t(X,Ra),b(a,sa,u),b(a,A,u),h(I,A,null),b(a,pa,u),b(a,q,u),t(q,w),t(w,Y),h(S,Y,null),t(q,Oa),t(q,Z),t(Z,wa),b(a,la,u),b(a,p,u),h(F,p,null),t(p,Ea),t(p,E),h(V,E,null),t(E,Ta),t(E,aa),t(aa,Da),t(p,Pa),t(p,T),h(U,T,null),t(T,Qa),t(T,ta),t(ta,ka),t(p,La),t(p,D),h(M,D,null),t(D,Ca),t(D,na),t(na,Na),t(p,Aa),t(p,P),h(H,P,null),t(P,Ia),t(P,ea),t(ea,Sa),t(p,Fa),t(p,Q),h(B,Q,null),t(Q,Va),t(Q,J),t(J,Ua),t(J,ra),t(ra,Ma),t(J,Ha),t(p,Ba),t(p,k),h(j,k,null),t(k,Ja),t(k,oa),t(oa,ja),ua=!0},p:ht,i(a){ua||(g(C.$$.fragment,a),g(N.$$.fragment,a),g(I.$$.fragment,a),g(S.$$.fragment,a),g(F.$$.fragment,a),g(V.$$.fragment,a),g(U.$$.fragment,a),g(M.$$.fragment,a),g(H.$$.fragment,a),g(B.$$.fragment,a),g(j.$$.fragment,a),ua=!0)},o(a){v(C.$$.fragment,a),v(N.$$.fragment,a),v(I.$$.fragment,a),v(S.$$.fragment,a),v(F.$$.fragment,a),v(V.$$.fragment,a),v(U.$$.fragment,a),v(M.$$.fragment,a),v(H.$$.fragment,a),v(B.$$.fragment,a),v(j.$$.fragment,a),ua=!1},d(a){n(x),a&&n(ia),a&&n(z),$(C),a&&n(ma),a&&n(y),$(N),a&&n(sa),a&&n(A),$(I),a&&n(pa),a&&n(q),$(S),a&&n(la),a&&n(p),$(F),$(V),$(U),$(M),$(H),$(B),$(j)}}}const $t={local:"quantization",sections:[{local:"optimum.onnxruntime.quantization.ORTCalibrationDataReader",title:"ORTCalibrationDataReader"},{local:"optimum.onnxruntime.ORTQuantizer",title:"ORTQuantizer"}],title:"Quantization"};function bt(Ka){return gt(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class qt extends _t{constructor(x){super();ct(this,x,bt,vt,dt,{})}}export{qt as default,$t as metadata};
