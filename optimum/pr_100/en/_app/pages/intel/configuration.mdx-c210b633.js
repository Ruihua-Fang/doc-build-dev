import{S as ie,i as ce,s as se,e as a,k as w,w as L,t as Q,M as le,c as r,d as o,m as $,a as s,x as j,h as U,b as i,F as n,g as b,y as q,L as fe,q as T,o as M,B as O}from"../../chunks/vendor-19e06bd2.js";import{D as ae}from"../../chunks/Docstring-395e5a9c.js";import{I as re}from"../../chunks/IconCopyLink-3c713d38.js";function me(V){let l,y,t,c,I,g,W,C,B,A,f,h,x,u,J,E,R,N,m,_,z,p,v,G,k,K,S;return g=new re({}),u=new re({}),_=new ae({props:{name:"class optimum.intel.IncConfig",anchor:"optimum.intel.IncConfig",parameters:[{name:"config_path",val:": str"}],source:"https://github.com/huggingface/optimum/blob/pr_100/src/optimum/intel/neural_compressor/config.py#L31"}}),v=new ae({props:{name:"from_pretrained",anchor:"optimum.intel.IncConfig.from_pretrained",parameters:[{name:"config_name_or_path",val:": str"},{name:"config_file_name",val:": typing.Optional[str] = None"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/optimum/blob/pr_100/src/optimum/intel/neural_compressor/config.py#L65",parametersDescription:[{anchor:"optimum.intel.IncConfig.from_pretrained.config_name_or_path",description:`<strong>config_name_or_path</strong> (<code>str</code>) &#x2014;
Repository name in the Hugging Face Hub or path to a local directory containing the configuration file.`,name:"config_name_or_path"},{anchor:"optimum.intel.IncConfig.from_pretrained.config_file_name",description:`<strong>config_file_name</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Name of the configuration file.`,name:"config_file_name"},{anchor:"optimum.intel.IncConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded configuration should be cached if the standard cache should
not be used.`,name:"cache_dir"},{anchor:"optimum.intel.IncConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the configuration files and override the cached versions if
they exist.`,name:"force_download"},{anchor:"optimum.intel.IncConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"optimum.intel.IncConfig.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"}],returnDescription:`
<p>IncConfig object.</p>
`,returnType:`
<p>config</p>
`}}),{c(){l=a("meta"),y=w(),t=a("h1"),c=a("a"),I=a("span"),L(g.$$.fragment),W=w(),C=a("span"),B=Q("Configuration"),A=w(),f=a("h2"),h=a("a"),x=a("span"),L(u.$$.fragment),J=w(),E=a("span"),R=Q("IncConfig"),N=w(),m=a("div"),L(_.$$.fragment),z=w(),p=a("div"),L(v.$$.fragment),G=w(),k=a("p"),K=Q(`Instantiate an IncConfig object from a configuration file which can either be hosted on
huggingface.co or from a local directory path.`),this.h()},l(e){const d=le('[data-svelte="svelte-1phssyn"]',document.head);l=r(d,"META",{name:!0,content:!0}),d.forEach(o),y=$(e),t=r(e,"H1",{class:!0});var D=s(t);c=r(D,"A",{id:!0,class:!0,href:!0});var X=s(c);I=r(X,"SPAN",{});var Y=s(I);j(g.$$.fragment,Y),Y.forEach(o),X.forEach(o),W=$(D),C=r(D,"SPAN",{});var Z=s(C);B=U(Z,"Configuration"),Z.forEach(o),D.forEach(o),A=$(e),f=r(e,"H2",{class:!0});var P=s(f);h=r(P,"A",{id:!0,class:!0,href:!0});var ee=s(h);x=r(ee,"SPAN",{});var oe=s(x);j(u.$$.fragment,oe),oe.forEach(o),ee.forEach(o),J=$(P),E=r(P,"SPAN",{});var ne=s(E);R=U(ne,"IncConfig"),ne.forEach(o),P.forEach(o),N=$(e),m=r(e,"DIV",{class:!0});var F=s(m);j(_.$$.fragment,F),z=$(F),p=r(F,"DIV",{class:!0});var H=s(p);j(v.$$.fragment,H),G=$(H),k=r(H,"P",{});var te=s(k);K=U(te,`Instantiate an IncConfig object from a configuration file which can either be hosted on
huggingface.co or from a local directory path.`),te.forEach(o),H.forEach(o),F.forEach(o),this.h()},h(){i(l,"name","hf:doc:metadata"),i(l,"content",JSON.stringify(de)),i(c,"id","configuration"),i(c,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),i(c,"href","#configuration"),i(t,"class","relative group"),i(h,"id","optimum.intel.IncConfig"),i(h,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),i(h,"href","#optimum.intel.IncConfig"),i(f,"class","relative group"),i(p,"class","docstring"),i(m,"class","docstring")},m(e,d){n(document.head,l),b(e,y,d),b(e,t,d),n(t,c),n(c,I),q(g,I,null),n(t,W),n(t,C),n(C,B),b(e,A,d),b(e,f,d),n(f,h),n(h,x),q(u,x,null),n(f,J),n(f,E),n(E,R),b(e,N,d),b(e,m,d),q(_,m,null),n(m,z),n(m,p),q(v,p,null),n(p,G),n(p,k),n(k,K),S=!0},p:fe,i(e){S||(T(g.$$.fragment,e),T(u.$$.fragment,e),T(_.$$.fragment,e),T(v.$$.fragment,e),S=!0)},o(e){M(g.$$.fragment,e),M(u.$$.fragment,e),M(_.$$.fragment,e),M(v.$$.fragment,e),S=!1},d(e){o(l),e&&o(y),e&&o(t),O(g),e&&o(A),e&&o(f),O(u),e&&o(N),e&&o(m),O(_),O(v)}}}const de={local:"configuration",sections:[{local:"optimum.intel.IncConfig",title:"IncConfig"}],title:"Configuration"};function he(V,l,y){let{fw:t}=l;return V.$$set=c=>{"fw"in c&&y(0,t=c.fw)},[t]}class _e extends ie{constructor(l){super();ce(this,l,he,me,se,{fw:0})}}export{_e as default,de as metadata};
