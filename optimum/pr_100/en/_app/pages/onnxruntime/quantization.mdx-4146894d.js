import{S as pe,i as ce,s as he,e as n,k as s,w as _,t as u,M as fe,c as o,d as a,m,a as r,x as v,h as d,b as i,F as e,g as x,y as $,L as ge,q as b,o as R,B as O}from"../../chunks/vendor-19e06bd2.js";import{D as B}from"../../chunks/Docstring-395e5a9c.js";import{I as Gt}from"../../chunks/IconCopyLink-3c713d38.js";function _e(Rt){let g,J,c,f,G,L,Ot,K,wt,it,w,y,Y,k,zt,Z,yt,st,C,P,mt,z,T,tt,I,Tt,et,Dt,lt,l,A,Et,D,S,Qt,at,qt,Nt,E,U,Lt,nt,kt,Ct,Q,F,Pt,H,It,ot,At,St,Ut,q,V,Ft,X,Ht,rt,Vt,Xt,Mt,N,M,Wt,W,Bt,j,Jt,jt,ut;return L=new Gt({}),k=new Gt({}),P=new B({props:{name:"class optimum.onnxruntime.quantization.ORTCalibrationDataReader",anchor:"optimum.onnxruntime.quantization.ORTCalibrationDataReader",parameters:[{name:"calib_dataloader",val:": DataLoader"}],source:"https://github.com/huggingface/optimum/blob/pr_100/src/optimum/onnxruntime/quantization.py#L60"}}),I=new Gt({}),A=new B({props:{name:"class optimum.onnxruntime.ORTQuantizer",anchor:"optimum.onnxruntime.ORTQuantizer",parameters:[{name:"ort_config",val:": typing.Union[str, optimum.onnxruntime.configuration.ORTConfig]"},{name:"calib_dataset",val:": typing.Optional[datasets.arrow_dataset.Dataset] = None"},{name:"dataset_name",val:": typing.Optional[str] = None"},{name:"dataset_config_name",val:": typing.Optional[str] = None"},{name:"data_files",val:": typing.Optional[str] = None"},{name:"preprocess_function",val:": typing.Optional[typing.Callable] = None"},{name:"data_collator",val:": typing.Optional[DataCollator] = None"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/optimum/blob/pr_100/src/optimum/onnxruntime/quantization.py#L68"}}),S=new B({props:{name:"export",anchor:"optimum.onnxruntime.ORTQuantizer.export",parameters:[{name:"model_name_or_path",val:": typing.Union[str, os.PathLike]"},{name:"output_path",val:": typing.Union[str, os.PathLike]"},{name:"feature",val:": str = 'default'"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/optimum/blob/pr_100/src/optimum/onnxruntime/quantization.py#L147",parametersDescription:[{anchor:"optimum.onnxruntime.ORTQuantizer.export.model_name_or_path",description:`<strong>model_name_or_path</strong> (<em>Union[str, os.PathLike]</em>) &#x2014;
Repository name in the Hugging Face Hub or path to a local directory hosting the model.`,name:"model_name_or_path"},{anchor:"optimum.onnxruntime.ORTQuantizer.export.output_path",description:`<strong>output_path</strong> (<em>os.PathLike</em>) &#x2014;
The path used to save the model exported to an ONNX Intermediate Representation (IR).`,name:"output_path"},{anchor:"optimum.onnxruntime.ORTQuantizer.export.feature",description:`<strong>feature</strong> (<em>str</em>, defaults to <em>&#x201C;default&#x201D;</em>) &#x2014;
Feature to use when exporting the model.`,name:"feature"},{anchor:"optimum.onnxruntime.ORTQuantizer.export.cache_dir",description:`<strong>cache_dir</strong> (<em>str</em>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"optimum.onnxruntime.ORTQuantizer.export.force_download",description:`<strong>force_download</strong> (<em>bool</em>, <em>optional</em>, defaults to <em>False</em>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"optimum.onnxruntime.ORTQuantizer.export.resume_download",description:`<strong>resume_download</strong> (<em>bool</em>, <em>optional</em>, defaults to <em>False</em>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"optimum.onnxruntime.ORTQuantizer.export.revision(str,",description:`<strong>revision(<em>str</em>,</strong> <em>optional</em>) &#x2014;
The specific version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"}]}}),U=new B({props:{name:"fit",anchor:"optimum.onnxruntime.ORTQuantizer.fit",parameters:[{name:"model_name_or_path",val:": typing.Union[str, os.PathLike]"},{name:"output_dir",val:": typing.Union[str, os.PathLike]"},{name:"feature",val:": str = 'default'"},{name:"config",val:": typing.Optional[transformers.configuration_utils.PretrainedConfig] = None"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/optimum/blob/pr_100/src/optimum/onnxruntime/quantization.py#L200",parametersDescription:[{anchor:"optimum.onnxruntime.ORTQuantizer.fit.model_name_or_path",description:`<strong>model_name_or_path</strong> (<code>Union[str, os.PathLike]</code>) &#x2014;
Repository name in the Hugging Face Hub, path to a local directory hosting the model or path to a
pre-existing onnx model.`,name:"model_name_or_path"},{anchor:"optimum.onnxruntime.ORTQuantizer.fit.output_dir",description:`<strong>output_dir</strong> (<code>Union[str, os.PathLike]</code>) &#x2014;
The output directory where the quantized model will be saved.`,name:"output_dir"},{anchor:"optimum.onnxruntime.ORTQuantizer.fit.feature",description:`<strong>feature</strong> (<code>str</code>, defaults to <code>&quot;default&quot;</code>) &#x2014;
Feature to use when exporting the model.`,name:"feature"},{anchor:"optimum.onnxruntime.ORTQuantizer.fit.config",description:`<strong>config</strong> (<code>PretrainedConfig</code>, <code>optional</code>) &#x2014;
A configuration associated to the pre-existing ONNX model.`,name:"config"}]}}),F=new B({props:{name:"get_calib_dataloader",anchor:"optimum.onnxruntime.ORTQuantizer.get_calib_dataloader",parameters:[{name:"calib_dataset",val:": typing.Optional[datasets.arrow_dataset.Dataset] = None"}],source:"https://github.com/huggingface/optimum/blob/pr_100/src/optimum/onnxruntime/quantization.py#L310",parametersDescription:[{anchor:"optimum.onnxruntime.ORTQuantizer.get_calib_dataloader.calib_dataset",description:`<strong>calib_dataset</strong> (<em>torch.utils.data.Dataset</em>, <em>optional</em>) &#x2014;
If provided, will override <em>self.calib_dataset</em>.`,name:"calib_dataset"}]}}),V=new B({props:{name:"get_calib_dataset",anchor:"optimum.onnxruntime.ORTQuantizer.get_calib_dataset",parameters:[],source:"https://github.com/huggingface/optimum/blob/pr_100/src/optimum/onnxruntime/quantization.py#L285"}}),M=new B({props:{name:"get_data_reader",anchor:"optimum.onnxruntime.ORTQuantizer.get_data_reader",parameters:[{name:"calib_dataloader",val:": DataLoader"}],source:"https://github.com/huggingface/optimum/blob/pr_100/src/optimum/onnxruntime/quantization.py#L339",parametersDescription:[{anchor:"optimum.onnxruntime.ORTQuantizer.get_data_reader.calib_dataloader",description:`<strong>calib_dataloader</strong> (<em>torch.utils.data.DataLoader</em>) &#x2014;
Calibration dataloader to use for the post-training static quantization calibration step.`,name:"calib_dataloader"}]}}),{c(){g=n("meta"),J=s(),c=n("h1"),f=n("a"),G=n("span"),_(L.$$.fragment),Ot=s(),K=n("span"),wt=u("Quantization"),it=s(),w=n("h2"),y=n("a"),Y=n("span"),_(k.$$.fragment),zt=s(),Z=n("span"),yt=u("ORTCalibrationDataReader"),st=s(),C=n("div"),_(P.$$.fragment),mt=s(),z=n("h2"),T=n("a"),tt=n("span"),_(I.$$.fragment),Tt=s(),et=n("span"),Dt=u("ORTQuantizer"),lt=s(),l=n("div"),_(A.$$.fragment),Et=s(),D=n("div"),_(S.$$.fragment),Qt=s(),at=n("p"),qt=u("Loads and exports a model to an ONNX Intermediate Representation (IR)."),Nt=s(),E=n("div"),_(U.$$.fragment),Lt=s(),nt=n("p"),kt=u("Applies ONNX Runtime quantization on a given model and saves the resulting model."),Ct=s(),Q=n("div"),_(F.$$.fragment),Pt=s(),H=n("p"),It=u("Returns the calibration "),ot=n("code"),At=u("DataLoader"),St=u("."),Ut=s(),q=n("div"),_(V.$$.fragment),Ft=s(),X=n("p"),Ht=u("Returns the calibration "),rt=n("code"),Vt=u("Dataset"),Xt=u(` to use for the post-training static
quantization calibration step.`),Mt=s(),N=n("div"),_(M.$$.fragment),Wt=s(),W=n("p"),Bt=u("Returns the calibration "),j=n("a"),Jt=u("ORTCalibrationDataReader"),jt=u("."),this.h()},l(t){const p=fe('[data-svelte="svelte-1phssyn"]',document.head);g=o(p,"META",{name:!0,content:!0}),p.forEach(a),J=m(t),c=o(t,"H1",{class:!0});var dt=r(c);f=o(dt,"A",{id:!0,class:!0,href:!0});var Kt=r(f);G=o(Kt,"SPAN",{});var Yt=r(G);v(L.$$.fragment,Yt),Yt.forEach(a),Kt.forEach(a),Ot=m(dt),K=o(dt,"SPAN",{});var Zt=r(K);wt=d(Zt,"Quantization"),Zt.forEach(a),dt.forEach(a),it=m(t),w=o(t,"H2",{class:!0});var pt=r(w);y=o(pt,"A",{id:!0,class:!0,href:!0});var te=r(y);Y=o(te,"SPAN",{});var ee=r(Y);v(k.$$.fragment,ee),ee.forEach(a),te.forEach(a),zt=m(pt),Z=o(pt,"SPAN",{});var ae=r(Z);yt=d(ae,"ORTCalibrationDataReader"),ae.forEach(a),pt.forEach(a),st=m(t),C=o(t,"DIV",{class:!0});var ne=r(C);v(P.$$.fragment,ne),ne.forEach(a),mt=m(t),z=o(t,"H2",{class:!0});var ct=r(z);T=o(ct,"A",{id:!0,class:!0,href:!0});var oe=r(T);tt=o(oe,"SPAN",{});var re=r(tt);v(I.$$.fragment,re),re.forEach(a),oe.forEach(a),Tt=m(ct),et=o(ct,"SPAN",{});var ie=r(et);Dt=d(ie,"ORTQuantizer"),ie.forEach(a),ct.forEach(a),lt=m(t),l=o(t,"DIV",{class:!0});var h=r(l);v(A.$$.fragment,h),Et=m(h),D=o(h,"DIV",{class:!0});var ht=r(D);v(S.$$.fragment,ht),Qt=m(ht),at=o(ht,"P",{});var se=r(at);qt=d(se,"Loads and exports a model to an ONNX Intermediate Representation (IR)."),se.forEach(a),ht.forEach(a),Nt=m(h),E=o(h,"DIV",{class:!0});var ft=r(E);v(U.$$.fragment,ft),Lt=m(ft),nt=o(ft,"P",{});var me=r(nt);kt=d(me,"Applies ONNX Runtime quantization on a given model and saves the resulting model."),me.forEach(a),ft.forEach(a),Ct=m(h),Q=o(h,"DIV",{class:!0});var gt=r(Q);v(F.$$.fragment,gt),Pt=m(gt),H=o(gt,"P",{});var _t=r(H);It=d(_t,"Returns the calibration "),ot=o(_t,"CODE",{});var le=r(ot);At=d(le,"DataLoader"),le.forEach(a),St=d(_t,"."),_t.forEach(a),gt.forEach(a),Ut=m(h),q=o(h,"DIV",{class:!0});var vt=r(q);v(V.$$.fragment,vt),Ft=m(vt),X=o(vt,"P",{});var xt=r(X);Ht=d(xt,"Returns the calibration "),rt=o(xt,"CODE",{});var ue=r(rt);Vt=d(ue,"Dataset"),ue.forEach(a),Xt=d(xt,` to use for the post-training static
quantization calibration step.`),xt.forEach(a),vt.forEach(a),Mt=m(h),N=o(h,"DIV",{class:!0});var $t=r(N);v(M.$$.fragment,$t),Wt=m($t),W=o($t,"P",{});var bt=r(W);Bt=d(bt,"Returns the calibration "),j=o(bt,"A",{href:!0});var de=r(j);Jt=d(de,"ORTCalibrationDataReader"),de.forEach(a),jt=d(bt,"."),bt.forEach(a),$t.forEach(a),h.forEach(a),this.h()},h(){i(g,"name","hf:doc:metadata"),i(g,"content",JSON.stringify(ve)),i(f,"id","quantization"),i(f,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),i(f,"href","#quantization"),i(c,"class","relative group"),i(y,"id","optimum.onnxruntime.quantization.ORTCalibrationDataReader"),i(y,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),i(y,"href","#optimum.onnxruntime.quantization.ORTCalibrationDataReader"),i(w,"class","relative group"),i(C,"class","docstring"),i(T,"id","optimum.onnxruntime.ORTQuantizer"),i(T,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),i(T,"href","#optimum.onnxruntime.ORTQuantizer"),i(z,"class","relative group"),i(D,"class","docstring"),i(E,"class","docstring"),i(Q,"class","docstring"),i(q,"class","docstring"),i(j,"href","/docs/optimum/pr_100/en/onnxruntime/quantization#optimum.onnxruntime.quantization.ORTCalibrationDataReader"),i(N,"class","docstring"),i(l,"class","docstring")},m(t,p){e(document.head,g),x(t,J,p),x(t,c,p),e(c,f),e(f,G),$(L,G,null),e(c,Ot),e(c,K),e(K,wt),x(t,it,p),x(t,w,p),e(w,y),e(y,Y),$(k,Y,null),e(w,zt),e(w,Z),e(Z,yt),x(t,st,p),x(t,C,p),$(P,C,null),x(t,mt,p),x(t,z,p),e(z,T),e(T,tt),$(I,tt,null),e(z,Tt),e(z,et),e(et,Dt),x(t,lt,p),x(t,l,p),$(A,l,null),e(l,Et),e(l,D),$(S,D,null),e(D,Qt),e(D,at),e(at,qt),e(l,Nt),e(l,E),$(U,E,null),e(E,Lt),e(E,nt),e(nt,kt),e(l,Ct),e(l,Q),$(F,Q,null),e(Q,Pt),e(Q,H),e(H,It),e(H,ot),e(ot,At),e(H,St),e(l,Ut),e(l,q),$(V,q,null),e(q,Ft),e(q,X),e(X,Ht),e(X,rt),e(rt,Vt),e(X,Xt),e(l,Mt),e(l,N),$(M,N,null),e(N,Wt),e(N,W),e(W,Bt),e(W,j),e(j,Jt),e(W,jt),ut=!0},p:ge,i(t){ut||(b(L.$$.fragment,t),b(k.$$.fragment,t),b(P.$$.fragment,t),b(I.$$.fragment,t),b(A.$$.fragment,t),b(S.$$.fragment,t),b(U.$$.fragment,t),b(F.$$.fragment,t),b(V.$$.fragment,t),b(M.$$.fragment,t),ut=!0)},o(t){R(L.$$.fragment,t),R(k.$$.fragment,t),R(P.$$.fragment,t),R(I.$$.fragment,t),R(A.$$.fragment,t),R(S.$$.fragment,t),R(U.$$.fragment,t),R(F.$$.fragment,t),R(V.$$.fragment,t),R(M.$$.fragment,t),ut=!1},d(t){a(g),t&&a(J),t&&a(c),O(L),t&&a(it),t&&a(w),O(k),t&&a(st),t&&a(C),O(P),t&&a(mt),t&&a(z),O(I),t&&a(lt),t&&a(l),O(A),O(S),O(U),O(F),O(V),O(M)}}}const ve={local:"quantization",sections:[{local:"optimum.onnxruntime.quantization.ORTCalibrationDataReader",title:"ORTCalibrationDataReader"},{local:"optimum.onnxruntime.ORTQuantizer",title:"ORTQuantizer"}],title:"Quantization"};function xe(Rt,g,J){let{fw:c}=g;return Rt.$$set=f=>{"fw"in f&&J(0,c=f.fw)},[c]}class Oe extends pe{constructor(g){super();ce(this,g,xe,_e,he,{fw:0})}}export{Oe as default,ve as metadata};
