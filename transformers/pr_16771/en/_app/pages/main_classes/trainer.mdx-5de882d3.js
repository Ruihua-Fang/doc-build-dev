import{S as AU,i as DU,s as qU,e as n,k as l,w as h,t as r,M as SU,c as s,d as o,m as d,a as i,x as u,h as a,b as p,F as e,g as m,y as f,q as g,o as _,B as v,v as PU}from"../../chunks/vendor-6b77c823.js";import{T as Db}from"../../chunks/Tip-39098574.js";import{D as $}from"../../chunks/Docstring-af1d0ae0.js";import{C as q}from"../../chunks/CodeBlock-3a8b25a8.js";import{I as oe}from"../../chunks/IconCopyLink-7a11ce68.js";function IU(Qe){let E,z,x,P,me,L,F,G,pe,K,R,re,ae,Q,ne,V,Ge,he,C,S,et,ee,tt,ot,ue,ta,oa,Me,Ee,ra,fe,aa,na;return{c(){E=n("p"),z=r("The "),x=n("a"),P=r("Trainer"),me=r(` class is optimized for \u{1F917} Transformers models and can have surprising behaviors
when you use it on other models. When using it on your own model, make sure:`),L=l(),F=n("ul"),G=n("li"),pe=r("your model always return tuples or subclasses of "),K=n("a"),R=r("ModelOutput"),re=r("."),ae=l(),Q=n("li"),ne=r("your model can compute the loss if a "),V=n("code"),Ge=r("labels"),he=r(` argument is provided and that loss is returned as the first
element of the tuple (if your model returns tuples)`),C=l(),S=n("li"),et=r("your model can accept multiple label arguments (use the "),ee=n("code"),tt=r("label_names"),ot=r(" in your "),ue=n("a"),ta=r("TrainingArguments"),oa=r(" to indicate their name to the "),Me=n("a"),Ee=r("Trainer"),ra=r(") but none of them should be named "),fe=n("code"),aa=r('"label"'),na=r("."),this.h()},l(B){E=s(B,"P",{});var M=i(E);z=a(M,"The "),x=s(M,"A",{href:!0});var Ys=i(x);P=a(Ys,"Trainer"),Ys.forEach(o),me=a(M,` class is optimized for \u{1F917} Transformers models and can have surprising behaviors
when you use it on other models. When using it on your own model, make sure:`),M.forEach(o),L=d(B),F=s(B,"UL",{});var ge=i(F);G=s(ge,"LI",{});var Io=i(G);pe=a(Io,"your model always return tuples or subclasses of "),K=s(Io,"A",{href:!0});var Zs=i(K);R=a(Zs,"ModelOutput"),Zs.forEach(o),re=a(Io,"."),Io.forEach(o),ae=d(ge),Q=s(ge,"LI",{});var Vt=i(Q);ne=a(Vt,"your model can compute the loss if a "),V=s(Vt,"CODE",{});var D=i(V);Ge=a(D,"labels"),D.forEach(o),he=a(Vt,` argument is provided and that loss is returned as the first
element of the tuple (if your model returns tuples)`),Vt.forEach(o),C=d(ge),S=s(ge,"LI",{});var H=i(S);et=a(H,"your model can accept multiple label arguments (use the "),ee=s(H,"CODE",{});var Oo=i(ee);tt=a(Oo,"label_names"),Oo.forEach(o),ot=a(H," in your "),ue=s(H,"A",{href:!0});var Js=i(ue);ta=a(Js,"TrainingArguments"),Js.forEach(o),oa=a(H," to indicate their name to the "),Me=s(H,"A",{href:!0});var Xs=i(Me);Ee=a(Xs,"Trainer"),Xs.forEach(o),ra=a(H,") but none of them should be named "),fe=s(H,"CODE",{});var Ks=i(fe);aa=a(Ks,'"label"'),Ks.forEach(o),na=a(H,"."),H.forEach(o),ge.forEach(o),this.h()},h(){p(x,"href","/docs/transformers/pr_16771/en/main_classes/trainer#transformers.Trainer"),p(K,"href","/docs/transformers/pr_16771/en/main_classes/output#transformers.utils.ModelOutput"),p(ue,"href","/docs/transformers/pr_16771/en/main_classes/trainer#transformers.TrainingArguments"),p(Me,"href","/docs/transformers/pr_16771/en/main_classes/trainer#transformers.Trainer")},m(B,M){m(B,E,M),e(E,z),e(E,x),e(x,P),e(E,me),m(B,L,M),m(B,F,M),e(F,G),e(G,pe),e(G,K),e(K,R),e(G,re),e(F,ae),e(F,Q),e(Q,ne),e(Q,V),e(V,Ge),e(Q,he),e(F,C),e(F,S),e(S,et),e(S,ee),e(ee,tt),e(S,ot),e(S,ue),e(ue,ta),e(S,oa),e(S,Me),e(Me,Ee),e(S,ra),e(S,fe),e(fe,aa),e(S,na)},d(B){B&&o(E),B&&o(L),B&&o(F)}}}function OU(Qe){let E,z,x,P,me,L,F,G,pe,K,R,re,ae,Q,ne,V,Ge;return{c(){E=n("p"),z=r("To use this method, you need to have provided a "),x=n("code"),P=r("model_init"),me=r(" when initializing your "),L=n("a"),F=r("Trainer"),G=r(`: we need to
reinitialize the model at each new run. This is incompatible with the `),pe=n("code"),K=r("optimizers"),R=r(` argument, so you need to
subclass `),re=n("a"),ae=r("Trainer"),Q=r(" and override the method "),ne=n("a"),V=r("create_optimizer_and_scheduler()"),Ge=r(` for custom
optimizer/scheduler.`),this.h()},l(he){E=s(he,"P",{});var C=i(E);z=a(C,"To use this method, you need to have provided a "),x=s(C,"CODE",{});var S=i(x);P=a(S,"model_init"),S.forEach(o),me=a(C," when initializing your "),L=s(C,"A",{href:!0});var et=i(L);F=a(et,"Trainer"),et.forEach(o),G=a(C,`: we need to
reinitialize the model at each new run. This is incompatible with the `),pe=s(C,"CODE",{});var ee=i(pe);K=a(ee,"optimizers"),ee.forEach(o),R=a(C,` argument, so you need to
subclass `),re=s(C,"A",{href:!0});var tt=i(re);ae=a(tt,"Trainer"),tt.forEach(o),Q=a(C," and override the method "),ne=s(C,"A",{href:!0});var ot=i(ne);V=a(ot,"create_optimizer_and_scheduler()"),ot.forEach(o),Ge=a(C,` for custom
optimizer/scheduler.`),C.forEach(o),this.h()},h(){p(L,"href","/docs/transformers/pr_16771/en/main_classes/trainer#transformers.Trainer"),p(re,"href","/docs/transformers/pr_16771/en/main_classes/trainer#transformers.Trainer"),p(ne,"href","/docs/transformers/pr_16771/en/main_classes/trainer#transformers.Trainer.create_optimizer_and_scheduler")},m(he,C){m(he,E,C),e(E,z),e(E,x),e(x,P),e(E,me),e(E,L),e(L,F),e(E,G),e(E,pe),e(pe,K),e(E,R),e(E,re),e(re,ae),e(E,Q),e(E,ne),e(ne,V),e(E,Ge)},d(he){he&&o(E)}}}function CU(Qe){let E,z;return{c(){E=n("p"),z=r(`If your predictions or labels have different sequence length (for instance because you\u2019re doing dynamic padding
in a token classification task) the predictions will be padded (on the right) to allow for concatenation into
one array. The padding index is -100.`)},l(x){E=s(x,"P",{});var P=i(E);z=a(P,`If your predictions or labels have different sequence length (for instance because you\u2019re doing dynamic padding
in a token classification task) the predictions will be padded (on the right) to allow for concatenation into
one array. The padding index is -100.`),P.forEach(o)},m(x,P){m(x,E,P),e(E,z)},d(x){x&&o(E)}}}function NU(Qe){let E,z;return{c(){E=n("p"),z=r(`If your predictions or labels have different sequence lengths (for instance because you\u2019re doing dynamic
padding in a token classification task) the predictions will be padded (on the right) to allow for
concatenation into one array. The padding index is -100.`)},l(x){E=s(x,"P",{});var P=i(E);z=a(P,`If your predictions or labels have different sequence lengths (for instance because you\u2019re doing dynamic
padding in a token classification task) the predictions will be padded (on the right) to allow for
concatenation into one array. The padding index is -100.`),P.forEach(o)},m(x,P){m(x,E,P),e(E,z)},d(x){x&&o(E)}}}function UU(Qe){let E,z,x,P,me,L,F,G,pe,K,R,re,ae,Q,ne,V,Ge,he,C,S,et,ee,tt,ot,ue,ta,oa,Me,Ee,ra,fe,aa,na,B,M,Ys,ge,Io,Zs,Vt,D,H,Oo,Js,Xs,Ks,Qs,tc,qb,Sb,Pb,ei,oc,Ib,Ob,Cb,ti,rc,Nb,Ub,zb,rt,ac,Lb,Fb,nc,Rb,Wb,sc,jb,Gb,Mb,oi,ic,Hb,Vb,Bb,ri,lc,Yb,Zb,Jb,ai,dc,Xb,Kb,Qb,ni,cc,ey,ty,oy,si,mc,ry,ay,ny,ii,pc,sy,iy,ly,li,hc,dy,cy,ig,Co,lg,No,my,di,py,hy,dg,sa,cg,at,uy,ci,fy,gy,mi,_y,vy,mg,Bt,Uo,uc,ia,by,fc,yy,pg,b,la,wy,gc,Ty,Ey,_c,$y,ky,_e,zo,vc,xy,Ay,pi,Dy,qy,Sy,Y,bc,Py,Iy,yc,Oy,Cy,wc,Ny,Uy,Tc,zy,Ly,Ec,Fy,Ry,$c,Wy,jy,Gy,hi,kc,My,Hy,Vy,$e,xc,By,Yy,Ac,Zy,Jy,Dc,Xy,Ky,qc,Qy,e2,t2,ke,Sc,o2,r2,Pc,a2,n2,Ic,s2,i2,Oc,l2,d2,c2,Lo,da,m2,ca,p2,Cc,h2,u2,f2,Fo,ma,g2,pa,_2,Nc,v2,b2,y2,nt,ha,w2,Uc,T2,E2,zc,$2,k2,st,ua,x2,Lc,A2,D2,fa,q2,Fc,S2,P2,I2,it,ga,O2,Rc,C2,N2,He,U2,Wc,z2,L2,jc,F2,R2,Gc,W2,j2,G2,Ro,_a,M2,Mc,H2,V2,xe,va,B2,Hc,Y2,Z2,ba,J2,Vc,X2,K2,Q2,Bc,ew,tw,lt,ya,ow,Yt,rw,Yc,aw,nw,Zc,sw,iw,lw,Jc,dw,cw,Wo,wa,mw,Ta,pw,ui,hw,uw,fw,dt,Ea,gw,$a,_w,Xc,vw,bw,yw,Kc,ww,Tw,jo,ka,Ew,Qc,$w,kw,ct,xa,xw,Aa,Aw,em,Dw,qw,Sw,tm,Pw,Iw,Ae,Da,Ow,qa,Cw,om,Nw,Uw,zw,Zt,Lw,rm,Fw,Rw,am,Ww,jw,Gw,nm,Mw,Hw,mt,Sa,Vw,ve,Bw,sm,Yw,Zw,im,Jw,Xw,lm,Kw,Qw,dm,e0,t0,o0,Go,r0,Mo,Pa,a0,Ia,n0,cm,s0,i0,l0,Ho,Oa,d0,mm,c0,m0,Vo,Ca,p0,Na,h0,pm,u0,f0,g0,pt,Ua,_0,za,v0,hm,b0,y0,w0,um,T0,E0,k,La,$0,fm,k0,x0,gm,A0,D0,_m,q0,S0,Jt,P0,vm,I0,O0,bm,C0,N0,U0,ym,z0,L0,Fa,F0,wm,Tm,R0,W0,Ve,be,j0,Em,G0,M0,$m,H0,V0,km,B0,Y0,xm,Z0,J0,X0,Xt,K0,Am,Q0,eT,Dm,tT,oT,rT,fi,qm,aT,nT,sT,ht,Sm,iT,lT,Pm,dT,cT,Im,mT,pT,hT,Om,uT,fT,Cm,gT,_T,Ra,vT,Nm,bT,yT,wT,Be,TT,Um,ET,$T,zm,kT,xT,Lm,AT,DT,qT,te,ST,gi,PT,IT,Fm,OT,CT,Rm,NT,UT,Wm,zT,LT,jm,FT,RT,WT,I,jT,Gm,GT,MT,Mm,HT,VT,Hm,BT,YT,Vm,ZT,JT,Wa,XT,KT,Bm,QT,eE,Ym,tE,oE,Zm,rE,aE,Jm,nE,sE,Xm,iE,lE,dE,ye,cE,_i,mE,pE,Km,hE,uE,vi,fE,gE,Qm,_E,vE,bE,ep,yE,wE,Bo,ja,TE,tp,EE,$E,Yo,Ga,kE,Ma,xE,op,AE,DE,qE,ut,Ha,SE,Va,PE,rp,IE,OE,CE,Ba,NE,ap,UE,zE,LE,Z,Ya,FE,np,RE,WE,Za,jE,sp,GE,ME,HE,Zo,VE,Ja,BE,ip,YE,ZE,JE,Kt,Qt,XE,lp,KE,QE,dp,e4,t4,o4,eo,r4,cp,a4,n4,mp,s4,i4,l4,to,d4,pp,c4,m4,hp,p4,h4,u4,ft,Xa,f4,oo,g4,up,_4,v4,fp,b4,y4,w4,gp,T4,E4,gt,Ka,$4,ro,k4,_p,x4,A4,vp,D4,q4,S4,bp,P4,I4,Jo,Qa,O4,Ye,C4,yp,N4,U4,wp,z4,L4,Tp,F4,R4,W4,Xo,en,j4,tn,G4,Ep,M4,H4,V4,De,on,B4,rn,Y4,$p,Z4,J4,X4,kp,K4,Q4,an,e7,bi,t7,o7,r7,_t,nn,a7,sn,n7,xp,s7,i7,l7,Ap,d7,c7,vt,ln,m7,Dp,p7,h7,qp,u7,f7,Ko,dn,g7,Sp,_7,v7,bt,cn,b7,Pp,y7,w7,Ip,T7,hg,ao,Qo,Op,mn,E7,Cp,$7,ug,Ze,pn,k7,qe,hn,x7,Np,A7,D7,un,q7,Up,S7,P7,I7,zp,O7,C7,J,fn,N7,Lp,U7,z7,gn,L7,Fp,F7,R7,W7,er,j7,_n,G7,Rp,M7,H7,V7,no,so,B7,Wp,Y7,Z7,jp,J7,X7,K7,io,Q7,Gp,e$,t$,Mp,o$,r$,a$,lo,n$,Hp,s$,i$,Vp,l$,d$,fg,co,tr,Bp,vn,c$,Yp,m$,gg,N,bn,p$,yn,h$,Zp,u$,f$,g$,mo,_$,yi,v$,b$,wn,y$,w$,T$,se,Tn,E$,Jp,$$,k$,po,x$,Xp,A$,D$,Kp,q$,S$,P$,ho,I$,Qp,O$,C$,eh,N$,U$,z$,En,L$,th,F$,R$,W$,or,$n,j$,oh,G$,M$,yt,kn,H$,rh,V$,B$,uo,Y$,ah,Z$,J$,nh,X$,K$,Q$,rr,xn,e6,An,t6,sh,o6,r6,a6,ar,Dn,n6,ih,s6,i6,nr,qn,l6,lh,d6,_g,fo,sr,dh,Sn,c6,ch,m6,vg,Je,Pn,p6,In,h6,mh,u6,f6,g6,go,_6,wi,v6,b6,On,y6,w6,bg,_o,ir,ph,Cn,T6,hh,E6,yg,ie,$6,Ti,k6,x6,uh,A6,D6,Ei,q6,S6,fh,P6,I6,wg,lr,O6,$i,C6,N6,Tg,dr,ki,gh,U6,z6,L6,xi,_h,F6,R6,Eg,Se,W6,vh,j6,G6,bh,M6,H6,Ai,V6,B6,$g,cr,mr,yh,Y6,Z6,wh,J6,X6,K6,Di,Th,Q6,ek,kg,vo,pr,Eh,Nn,tk,$h,ok,xg,Pe,rk,qi,ak,nk,kh,sk,ik,xh,lk,dk,Ag,wt,ck,Ah,mk,pk,Si,hk,uk,Dg,hr,Pi,Dh,fk,gk,_k,Ii,qh,vk,bk,qg,Ie,yk,Oi,wk,Tk,Sh,Ek,$k,Ph,kk,xk,Sg,X,Ak,Ci,Dk,qk,Ih,Sk,Pk,Oh,Ik,Ok,Ch,Ck,Nk,Ni,Uk,zk,Pg,Ui,Lk,Ig,Un,Og,zi,Fk,Cg,zn,Ng,Li,Rk,Ug,Ln,zg,Fi,Wk,Lg,Ri,jk,Fg,Fn,Rg,ur,Gk,Nh,Mk,Hk,Wg,bo,fr,Uh,Rn,Vk,zh,Bk,jg,le,Yk,Wi,Zk,Jk,Lh,Xk,Kk,Fh,Qk,e3,Rh,t3,o3,Gg,Tt,r3,Wn,a3,n3,Wh,s3,i3,Mg,yo,gr,jh,jn,l3,Gh,d3,Hg,ji,c3,Vg,_r,m3,Gn,Mh,p3,h3,Bg,Mn,Yg,Et,u3,Hn,Hh,f3,g3,Vn,Vh,_3,v3,Zg,Bn,Jg,Yn,Xg,vr,b3,Gi,y3,w3,Kg,Mi,T3,Qg,Hi,E3,e_,Vi,Bh,Yh,$3,t_,br,k3,Zh,x3,A3,o_,Bi,D3,r_,Zn,a_,$t,q3,Jh,S3,P3,Xh,I3,O3,n_,Yi,C3,s_,Jn,i_,kt,N3,Kh,U3,z3,Qh,L3,F3,l_,xt,R3,eu,W3,j3,Xn,tu,G3,M3,d_,Kn,c_,Zi,H3,m_,Qn,p_,Ji,V3,h_,es,u_,Xi,B3,f_,Ki,ou,ru,Y3,g_,yr,Z3,au,J3,X3,__,Qi,ts,K3,nu,Q3,ex,v_,os,b_,rs,su,tx,y_,as,w_,At,ox,iu,rx,ax,lu,nx,sx,T_,el,ix,E_,ns,$_,tl,lx,k_,wr,dx,du,cx,mx,x_,wo,Tr,cu,ss,px,mu,hx,A_,Er,ux,ol,fx,gx,D_,Oe,_x,is,vx,bx,ls,yx,wx,ds,Tx,Ex,q_,rl,$x,S_,al,P_,To,$r,pu,cs,kx,hu,xx,I_,nl,Ax,O_,Dt,Dx,ms,qx,Sx,ps,Px,Ix,C_,sl,Ox,N_,hs,U_,il,Cx,z_,qt,Nx,uu,Ux,zx,fu,Lx,Fx,L_,Eo,kr,gu,us,Rx,_u,Wx,F_,ll,jx,R_,Ce,Gx,vu,Mx,Hx,bu,Vx,Bx,yu,Yx,Zx,W_,St,Jx,wu,Xx,Kx,Tu,Qx,e5,j_,fs,G_,xr,t5,gs,o5,r5,M_,$o,Ar,Eu,_s,a5,$u,n5,H_,dl,s5,V_,vs,B_,Pt,i5,ku,l5,d5,xu,c5,m5,Y_,cl,p5,Z_,bs,J_,ml,h5,X_,Dr,u5,Au,f5,g5,K_,Xe,Du,_5,v5,qu,b5,y5,Su,w5,T5,Q_,pl,E5,ev,ys,tv,hl,$5,ov,Ne,k5,Pu,x5,A5,Iu,D5,q5,Ou,S5,P5,rv,ko,qr,Cu,ws,I5,Nu,O5,av,It,C5,Uu,N5,U5,zu,z5,L5,nv,ul,F5,sv,fl,R5,iv,Sr,W5,Lu,j5,G5,lv,Ts,dv,W,M5,Fu,H5,V5,Ru,B5,Y5,Wu,Z5,J5,ju,X5,K5,Gu,Q5,eA,Mu,tA,oA,cv,gl,rA,mv,xo,Pr,Hu,Es,aA,Vu,nA,pv,Ue,sA,$s,iA,lA,_l,dA,cA,ks,mA,pA,hv,ze,Bu,hA,uA,Yu,fA,gA,Zu,_A,vA,Ju,bA,uv,vl,yA,fv,xs,Xu,wA,TA,gv,bl,EA,_v,As,vv,Ot,$A,Ku,kA,xA,Qu,AA,DA,bv,Ds,yv,Ct,qA,ef,SA,PA,qs,IA,OA,wv,Ir,CA,yl,NA,UA,Tv,wl,zA,Ev,Ss,tf,LA,FA,$v,Ps,kv,Tl,RA,xv,Is,Av,Os,of,WA,jA,Dv,Cs,qv,El,GA,Sv,Ns,Pv,$l,MA,Iv,Or,HA,Us,VA,BA,Ov,zs,rf,YA,ZA,Cv,Nt,JA,af,XA,KA,nf,QA,e9,Nv,Cr,t9,sf,o9,r9,Uv,Ls,zv,kl,a9,Lv,Le,lf,n9,s9,df,i9,l9,Fs,d9,cf,c9,m9,p9,Rs,h9,mf,u9,f9,Fv,Ws,Ke,g9,pf,_9,v9,hf,b9,y9,uf,w9,T9,Rv,Nr,E9,ff,$9,k9,Wv,js,jv,Ao,gf,x9,A9,_f,D9,q9,Gv,Ut,S9,vf,P9,I9,bf,O9,C9,Mv,xl,N9,Hv,de,yf,U9,z9,wf,L9,F9,Gs,R9,Tf,W9,j9,G9,Do,M9,Ef,H9,V9,$f,B9,Y9,Z9,kf,J9,Vv,Al,X9,Bv,Ur,qo,K9,xf,Q9,eD,Af,tD,oD,rD,we,aD,Df,nD,sD,qf,iD,lD,Sf,dD,cD,Pf,mD,pD,Yv,Dl,hD,Zv,y,uD,ql,fD,If,gD,Sl,_D,Of,vD,Pl,bD,Cf,yD,Il,wD,Nf,TD,Ol,ED,Uf,$D,Cl,kD,zf,xD,Nl,AD,Lf,DD,Ul,qD,Ff,SD,zl,PD,Rf,ID,Ll,OD,Wf,CD,Fl,ND,jf,UD,Rl,zD,Gf,LD,Wl,FD,Mf,RD,jl,WD,Hf,jD,Gl,GD,Vf,MD,Ml,HD,Bf,VD,Hl,BD,Yf,YD,Vl,ZD,Zf,JD,Bl,XD,Jf,KD,Yl,QD,Xf,eq,Zl,tq,Kf,oq,Jl,rq,Qf,aq,Xl,nq,eg,sq,Jv;return L=new oe({}),Co=new Db({props:{warning:!0,$$slots:{default:[IU]},$$scope:{ctx:Qe}}}),sa=new q({props:{code:`from torch import nn
from transformers import Trainer


class CustomTrainer(Trainer):
    def compute_loss(self, model, inputs, return_outputs=False):
        labels = inputs.get("labels")
        # forward pass
        outputs = model(**inputs)
        logits = outputs.get("logits")
        # compute custom loss (suppose one has 3 labels with different weights)
        loss_fct = nn.CrossEntropyLoss(weight=torch.tensor([1.0, 2.0, 3.0]))
        loss = loss_fct(logits.view(-1, self.model.config.num_labels), labels.view(-1))
        return (loss, outputs) if return_outputs else loss`,highlighted:`<span class="hljs-keyword">from</span> torch <span class="hljs-keyword">import</span> nn
<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> Trainer


<span class="hljs-keyword">class</span> <span class="hljs-title class_">CustomTrainer</span>(<span class="hljs-title class_ inherited__">Trainer</span>):
    <span class="hljs-keyword">def</span> <span class="hljs-title function_">compute_loss</span>(<span class="hljs-params">self, model, inputs, return_outputs=<span class="hljs-literal">False</span></span>):
        labels = inputs.get(<span class="hljs-string">&quot;labels&quot;</span>)
        <span class="hljs-comment"># forward pass</span>
        outputs = model(**inputs)
        logits = outputs.get(<span class="hljs-string">&quot;logits&quot;</span>)
        <span class="hljs-comment"># compute custom loss (suppose one has 3 labels with different weights)</span>
        loss_fct = nn.CrossEntropyLoss(weight=torch.tensor([<span class="hljs-number">1.0</span>, <span class="hljs-number">2.0</span>, <span class="hljs-number">3.0</span>]))
        loss = loss_fct(logits.view(-<span class="hljs-number">1</span>, self.model.config.num_labels), labels.view(-<span class="hljs-number">1</span>))
        <span class="hljs-keyword">return</span> (loss, outputs) <span class="hljs-keyword">if</span> return_outputs <span class="hljs-keyword">else</span> loss`}}),ia=new oe({}),la=new $({props:{name:"class transformers.Trainer",anchor:"transformers.Trainer",parameters:[{name:"model",val:": typing.Union[transformers.modeling_utils.PreTrainedModel, torch.nn.modules.module.Module] = None"},{name:"args",val:": TrainingArguments = None"},{name:"data_collator",val:": typing.Optional[DataCollator] = None"},{name:"train_dataset",val:": typing.Optional[torch.utils.data.dataset.Dataset] = None"},{name:"eval_dataset",val:": typing.Optional[torch.utils.data.dataset.Dataset] = None"},{name:"tokenizer",val:": typing.Optional[transformers.tokenization_utils_base.PreTrainedTokenizerBase] = None"},{name:"model_init",val:": typing.Callable[[], transformers.modeling_utils.PreTrainedModel] = None"},{name:"compute_metrics",val:": typing.Union[typing.Callable[[transformers.trainer_utils.EvalPrediction], typing.Dict], NoneType] = None"},{name:"callbacks",val:": typing.Optional[typing.List[transformers.trainer_callback.TrainerCallback]] = None"},{name:"optimizers",val:": typing.Tuple[torch.optim.optimizer.Optimizer, torch.optim.lr_scheduler.LambdaLR] = (None, None)"},{name:"preprocess_logits_for_metrics",val:": typing.Callable[[torch.Tensor, torch.Tensor], torch.Tensor] = None"}],source:"https://github.com/huggingface/transformers/blob/pr_16771/src/transformers/trainer.py#L195",parametersDescription:[{anchor:"transformers.Trainer.model",description:`<strong>model</strong> (<a href="/docs/transformers/pr_16771/en/main_classes/model#transformers.PreTrainedModel">PreTrainedModel</a> or <code>torch.nn.Module</code>, <em>optional</em>) &#x2014;
The model to train, evaluate or use for predictions. If not provided, a <code>model_init</code> must be passed.</p>
<div class="course-tip  bg-gradient-to-br dark:bg-gradient-to-r before:border-green-500 dark:before:border-green-800 from-green-50 dark:from-gray-900 to-white dark:to-gray-950 border border-green-50 text-green-700 dark:text-gray-400">
						
<p><a href="/docs/transformers/pr_16771/en/main_classes/trainer#transformers.Trainer">Trainer</a> is optimized to work with the <a href="/docs/transformers/pr_16771/en/main_classes/model#transformers.PreTrainedModel">PreTrainedModel</a> provided by the library. You can still use
your own models defined as <code>torch.nn.Module</code> as long as they work the same way as the &#x1F917; Transformers
models.</p>

					</div>`,name:"model"},{anchor:"transformers.Trainer.args",description:`<strong>args</strong> (<a href="/docs/transformers/pr_16771/en/main_classes/trainer#transformers.TrainingArguments">TrainingArguments</a>, <em>optional</em>) &#x2014;
The arguments to tweak for training. Will default to a basic instance of <a href="/docs/transformers/pr_16771/en/main_classes/trainer#transformers.TrainingArguments">TrainingArguments</a> with the
<code>output_dir</code> set to a directory named <em>tmp_trainer</em> in the current directory if not provided.`,name:"args"},{anchor:"transformers.Trainer.data_collator",description:`<strong>data_collator</strong> (<code>DataCollator</code>, <em>optional</em>) &#x2014;
The function to use to form a batch from a list of elements of <code>train_dataset</code> or <code>eval_dataset</code>. Will
default to <a href="/docs/transformers/pr_16771/en/main_classes/data_collator#transformers.default_data_collator">default_data_collator()</a> if no <code>tokenizer</code> is provided, an instance of
<a href="/docs/transformers/pr_16771/en/main_classes/data_collator#transformers.DataCollatorWithPadding">DataCollatorWithPadding</a> otherwise.`,name:"data_collator"},{anchor:"transformers.Trainer.train_dataset",description:`<strong>train_dataset</strong> (<code>torch.utils.data.Dataset</code> or <code>torch.utils.data.IterableDataset</code>, <em>optional</em>) &#x2014;
The dataset to use for training. If it is an <code>datasets.Dataset</code>, columns not accepted by the
<code>model.forward()</code> method are automatically removed.</p>
<p>Note that if it&#x2019;s a <code>torch.utils.data.IterableDataset</code> with some randomization and you are training in a
distributed fashion, your iterable dataset should either use a internal attribute <code>generator</code> that is a
<code>torch.Generator</code> for the randomization that must be identical on all processes (and the Trainer will
manually set the seed of this <code>generator</code> at each epoch) or have a <code>set_epoch()</code> method that internally
sets the seed of the RNGs used.`,name:"train_dataset"},{anchor:"transformers.Trainer.eval_dataset",description:`<strong>eval_dataset</strong> (<code>torch.utils.data.Dataset</code>, <em>optional</em>) &#x2014;
The dataset to use for evaluation. If it is an <code>datasets.Dataset</code>, columns not accepted by the
<code>model.forward()</code> method are automatically removed.`,name:"eval_dataset"},{anchor:"transformers.Trainer.tokenizer",description:`<strong>tokenizer</strong> (<a href="/docs/transformers/pr_16771/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase">PreTrainedTokenizerBase</a>, <em>optional</em>) &#x2014;
The tokenizer used to preprocess the data. If provided, will be used to automatically pad the inputs the
maximum length when batching inputs, and it will be saved along the model to make it easier to rerun an
interrupted training or reuse the fine-tuned model.`,name:"tokenizer"},{anchor:"transformers.Trainer.model_init",description:`<strong>model_init</strong> (<code>Callable[[], PreTrainedModel]</code>, <em>optional</em>) &#x2014;
A function that instantiates the model to be used. If provided, each call to <a href="/docs/transformers/pr_16771/en/main_classes/trainer#transformers.Trainer.train">train()</a> will start
from a new instance of the model as given by this function.</p>
<p>The function may have zero argument, or a single one containing the optuna/Ray Tune/SigOpt trial object, to
be able to choose different architectures according to hyper parameters (such as layer count, sizes of
inner layers, dropout probabilities etc).`,name:"model_init"},{anchor:"transformers.Trainer.compute_metrics",description:`<strong>compute_metrics</strong> (<code>Callable[[EvalPrediction], Dict]</code>, <em>optional</em>) &#x2014;
The function that will be used to compute metrics at evaluation. Must take a <a href="/docs/transformers/pr_16771/en/internal/trainer_utils#transformers.EvalPrediction">EvalPrediction</a> and return
a dictionary string to metric values.`,name:"compute_metrics"},{anchor:"transformers.Trainer.callbacks",description:`<strong>callbacks</strong> (List of <a href="/docs/transformers/pr_16771/en/main_classes/callback#transformers.TrainerCallback">TrainerCallback</a>, <em>optional</em>) &#x2014;
A list of callbacks to customize the training loop. Will add those to the list of default callbacks
detailed in <a href="callback">here</a>.</p>
<p>If you want to remove one of the default callbacks used, use the <a href="/docs/transformers/pr_16771/en/main_classes/trainer#transformers.Trainer.remove_callback">Trainer.remove_callback()</a> method.`,name:"callbacks"},{anchor:"transformers.Trainer.optimizers",description:`<strong>optimizers</strong> (<code>Tuple[torch.optim.Optimizer, torch.optim.lr_scheduler.LambdaLR]</code>, <em>optional</em>) &#x2014; A tuple
containing the optimizer and the scheduler to use. Will default to an instance of <a href="/docs/transformers/pr_16771/en/main_classes/optimizer_schedules#transformers.AdamW">AdamW</a> on your model
and a scheduler given by <a href="/docs/transformers/pr_16771/en/main_classes/optimizer_schedules#transformers.get_linear_schedule_with_warmup">get_linear_schedule_with_warmup()</a> controlled by <code>args</code>.`,name:"optimizers"},{anchor:"transformers.Trainer.preprocess_logits_for_metrics",description:`<strong>preprocess_logits_for_metrics</strong> (<code>Callable[[torch.Tensor, torch.Tensor], torch.Tensor]</code>, <em>optional</em>) &#x2014;
A function that preprocess the logits right before caching them at each evaluation step. Must take two
tensors, the logits and the labels, and return the logits once processed as desired. The modifications made
by this function will be reflected in the predictions received by <code>compute_metrics</code>.</p>
<p>Note that the labels (second parameter) will be <code>None</code> if the dataset does not have them.`,name:"preprocess_logits_for_metrics"}]}}),da=new $({props:{name:"add_callback",anchor:"transformers.Trainer.add_callback",parameters:[{name:"callback",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16771/src/transformers/trainer.py#L509",parametersDescription:[{anchor:"transformers.Trainer.add_callback.callback",description:`<strong>callback</strong> (<code>type</code> or <code>TrainerCallback</code>) &#x2014;
A <code>TrainerCallback</code> class or an instance of a <code>TrainerCallback</code>. In the
first case, will instantiate a member of that class.`,name:"callback"}]}}),ma=new $({props:{name:"autocast_smart_context_manager",anchor:"transformers.Trainer.autocast_smart_context_manager",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_16771/src/transformers/trainer.py#L1969"}}),ha=new $({props:{name:"compute_loss",anchor:"transformers.Trainer.compute_loss",parameters:[{name:"model",val:""},{name:"inputs",val:""},{name:"return_outputs",val:" = False"}],source:"https://github.com/huggingface/transformers/blob/pr_16771/src/transformers/trainer.py#L2033"}}),ua=new $({props:{name:"create_optimizer",anchor:"transformers.Trainer.create_optimizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_16771/src/transformers/trainer.py#L832"}}),ga=new $({props:{name:"create_optimizer_and_scheduler",anchor:"transformers.Trainer.create_optimizer_and_scheduler",parameters:[{name:"num_training_steps",val:": int"}],source:"https://github.com/huggingface/transformers/blob/pr_16771/src/transformers/trainer.py#L821"}}),_a=new $({props:{name:"create_scheduler",anchor:"transformers.Trainer.create_scheduler",parameters:[{name:"num_training_steps",val:": int"},{name:"optimizer",val:": Optimizer = None"}],source:"https://github.com/huggingface/transformers/blob/pr_16771/src/transformers/trainer.py#L917",parametersDescription:[{anchor:"transformers.Trainer.create_scheduler.num_training_steps",description:"<strong>num_training_steps</strong> (int) &#x2014; The number of training steps to do.",name:"num_training_steps"}]}}),va=new $({props:{name:"evaluate",anchor:"transformers.Trainer.evaluate",parameters:[{name:"eval_dataset",val:": typing.Optional[torch.utils.data.dataset.Dataset] = None"},{name:"ignore_keys",val:": typing.Optional[typing.List[str]] = None"},{name:"metric_key_prefix",val:": str = 'eval'"}],source:"https://github.com/huggingface/transformers/blob/pr_16771/src/transformers/trainer.py#L2247",parametersDescription:[{anchor:"transformers.Trainer.evaluate.eval_dataset",description:`<strong>eval_dataset</strong> (<code>Dataset</code>, <em>optional</em>) &#x2014;
Pass a dataset if you wish to override <code>self.eval_dataset</code>. If it is an <code>datasets.Dataset</code>, columns not
accepted by the <code>model.forward()</code> method are automatically removed. It must implement the <code>__len__</code>
method.`,name:"eval_dataset"},{anchor:"transformers.Trainer.evaluate.ignore_keys",description:`<strong>ignore_keys</strong> (<code>Lst[str]</code>, <em>optional</em>) &#x2014;
A list of keys in the output of your model (if it is a dictionary) that should be ignored when
gathering predictions.`,name:"ignore_keys"},{anchor:"transformers.Trainer.evaluate.metric_key_prefix",description:`<strong>metric_key_prefix</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;eval&quot;</code>) &#x2014;
An optional prefix to be used as the metrics key prefix. For example the metrics &#x201C;bleu&#x201D; will be named
&#x201C;eval_bleu&#x201D; if the prefix is &#x201C;eval&#x201D; (default)`,name:"metric_key_prefix"}],returnDescription:`
<p>A dictionary containing the evaluation loss and the potential metrics computed from the predictions. The
dictionary also contains the epoch number which comes from the training state.</p>
`}}),ya=new $({props:{name:"evaluation_loop",anchor:"transformers.Trainer.evaluation_loop",parameters:[{name:"dataloader",val:": DataLoader"},{name:"description",val:": str"},{name:"prediction_loss_only",val:": typing.Optional[bool] = None"},{name:"ignore_keys",val:": typing.Optional[typing.List[str]] = None"},{name:"metric_key_prefix",val:": str = 'eval'"}],source:"https://github.com/huggingface/transformers/blob/pr_16771/src/transformers/trainer.py#L2375"}}),wa=new $({props:{name:"floating_point_ops",anchor:"transformers.Trainer.floating_point_ops",parameters:[{name:"inputs",val:": typing.Dict[str, typing.Union[torch.Tensor, typing.Any]]"}],source:"https://github.com/huggingface/transformers/blob/pr_16771/src/transformers/trainer.py#L2730",parametersDescription:[{anchor:"transformers.Trainer.floating_point_ops.inputs",description:`<strong>inputs</strong> (<code>Dict[str, Union[torch.Tensor, Any]]</code>) &#x2014;
The inputs and targets of the model.`,name:"inputs"}],returnDescription:`
<p>The number of floating-point operations.</p>
`,returnType:`
<p><code>int</code></p>
`}}),Ea=new $({props:{name:"get_eval_dataloader",anchor:"transformers.Trainer.get_eval_dataloader",parameters:[{name:"eval_dataset",val:": typing.Optional[torch.utils.data.dataset.Dataset] = None"}],source:"https://github.com/huggingface/transformers/blob/pr_16771/src/transformers/trainer.py#L731",parametersDescription:[{anchor:"transformers.Trainer.get_eval_dataloader.eval_dataset",description:`<strong>eval_dataset</strong> (<code>torch.utils.data.Dataset</code>, <em>optional</em>) &#x2014;
If provided, will override <code>self.eval_dataset</code>. If it is an <code>datasets.Dataset</code>, columns not accepted by
the <code>model.forward()</code> method are automatically removed. It must implement <code>__len__</code>.`,name:"eval_dataset"}]}}),ka=new $({props:{name:"get_optimizer_cls_and_kwargs",anchor:"transformers.Trainer.get_optimizer_cls_and_kwargs",parameters:[{name:"args",val:": TrainingArguments"}],source:"https://github.com/huggingface/transformers/blob/pr_16771/src/transformers/trainer.py#L869",parametersDescription:[{anchor:"transformers.Trainer.get_optimizer_cls_and_kwargs.args",description:`<strong>args</strong> (<code>transformers.training_args.TrainingArguments</code>) &#x2014;
The training arguments for the training session.`,name:"args"}]}}),xa=new $({props:{name:"get_test_dataloader",anchor:"transformers.Trainer.get_test_dataloader",parameters:[{name:"test_dataset",val:": Dataset"}],source:"https://github.com/huggingface/transformers/blob/pr_16771/src/transformers/trainer.py#L778",parametersDescription:[{anchor:"transformers.Trainer.get_test_dataloader.test_dataset",description:`<strong>test_dataset</strong> (<code>torch.utils.data.Dataset</code>, <em>optional</em>) &#x2014;
The test dataset to use. If it is an <code>datasets.Dataset</code>, columns not accepted by the <code>model.forward()</code>
method are automatically removed. It must implement <code>__len__</code>.`,name:"test_dataset"}]}}),Da=new $({props:{name:"get_train_dataloader",anchor:"transformers.Trainer.get_train_dataloader",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_16771/src/transformers/trainer.py#L656"}}),Sa=new $({props:{name:"hyperparameter_search",anchor:"transformers.Trainer.hyperparameter_search",parameters:[{name:"hp_space",val:": typing.Union[typing.Callable[[ForwardRef('optuna.Trial')], typing.Dict[str, float]], NoneType] = None"},{name:"compute_objective",val:": typing.Union[typing.Callable[[typing.Dict[str, float]], float], NoneType] = None"},{name:"n_trials",val:": int = 20"},{name:"direction",val:": str = 'minimize'"},{name:"backend",val:": typing.Union[ForwardRef('str'), transformers.trainer_utils.HPSearchBackend, NoneType] = None"},{name:"hp_name",val:": typing.Union[typing.Callable[[ForwardRef('optuna.Trial')], str], NoneType] = None"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16771/src/transformers/trainer.py#L1825",parametersDescription:[{anchor:"transformers.Trainer.hyperparameter_search.hp_space",description:`<strong>hp_space</strong> (<code>Callable[[&quot;optuna.Trial&quot;], Dict[str, float]]</code>, <em>optional</em>) &#x2014;
A function that defines the hyperparameter search space. Will default to
<code>default_hp_space_optuna()</code> or <code>default_hp_space_ray()</code> or
<code>default_hp_space_sigopt()</code> depending on your backend.`,name:"hp_space"},{anchor:"transformers.Trainer.hyperparameter_search.compute_objective",description:`<strong>compute_objective</strong> (<code>Callable[[Dict[str, float]], float]</code>, <em>optional</em>) &#x2014;
A function computing the objective to minimize or maximize from the metrics returned by the <code>evaluate</code>
method. Will default to <code>default_compute_objective()</code>.`,name:"compute_objective"},{anchor:"transformers.Trainer.hyperparameter_search.n_trials",description:`<strong>n_trials</strong> (<code>int</code>, <em>optional</em>, defaults to 100) &#x2014;
The number of trial runs to test.`,name:"n_trials"},{anchor:"transformers.Trainer.hyperparameter_search.direction(str,",description:`<strong>direction(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;minimize&quot;</code>) &#x2014;
Whether to optimize greater or lower objects. Can be <code>&quot;minimize&quot;</code> or <code>&quot;maximize&quot;</code>, you should pick
<code>&quot;minimize&quot;</code> when optimizing the validation loss, <code>&quot;maximize&quot;</code> when optimizing one or several metrics.`,name:"direction(str,"},{anchor:"transformers.Trainer.hyperparameter_search.backend(str",description:`<strong>backend(<code>str</code></strong> or <code>HPSearchBackend</code>, <em>optional</em>) &#x2014;
The backend to use for hyperparameter search. Will default to optuna or Ray Tune or SigOpt, depending
on which one is installed. If all are installed, will default to optuna.
kwargs &#x2014;
Additional keyword arguments passed along to <code>optuna.create_study</code> or <code>ray.tune.run</code>. For more
information see:</p>
<ul>
<li>the documentation of
<a href="https://optuna.readthedocs.io/en/stable/reference/generated/optuna.study.create_study.html" rel="nofollow">optuna.create_study</a></li>
<li>the documentation of <a href="https://docs.ray.io/en/latest/tune/api_docs/execution.html#tune-run" rel="nofollow">tune.run</a></li>
<li>the documentation of <a href="https://app.sigopt.com/docs/endpoints/experiments/create" rel="nofollow">sigopt</a></li>
</ul>`,name:"backend(str"}],returnDescription:`
<p>All the information about the best run.</p>
`,returnType:`
<p><code>trainer_utils.BestRun</code></p>
`}}),Go=new Db({props:{warning:!0,$$slots:{default:[OU]},$$scope:{ctx:Qe}}}),Pa=new $({props:{name:"init_git_repo",anchor:"transformers.Trainer.init_git_repo",parameters:[{name:"at_init",val:": bool = False"}],source:"https://github.com/huggingface/transformers/blob/pr_16771/src/transformers/trainer.py#L2748",parametersDescription:[{anchor:"transformers.Trainer.init_git_repo.at_init",description:`<strong>at_init</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether this function is called before any training or not. If <code>self.args.overwrite_output_dir</code> is
<code>True</code> and <code>at_init</code> is <code>True</code>, the path to the repo (which is <code>self.args.output_dir</code>) might be wiped
out.`,name:"at_init"}]}}),Oa=new $({props:{name:"is_local_process_zero",anchor:"transformers.Trainer.is_local_process_zero",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_16771/src/transformers/trainer.py#L2057"}}),Ca=new $({props:{name:"is_world_process_zero",anchor:"transformers.Trainer.is_world_process_zero",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_16771/src/transformers/trainer.py#L2064"}}),Ua=new $({props:{name:"log",anchor:"transformers.Trainer.log",parameters:[{name:"logs",val:": typing.Dict[str, float]"}],source:"https://github.com/huggingface/transformers/blob/pr_16771/src/transformers/trainer.py#L1918",parametersDescription:[{anchor:"transformers.Trainer.log.logs",description:`<strong>logs</strong> (<code>Dict[str, float]</code>) &#x2014;
The values to log.`,name:"logs"}]}}),La=new $({props:{name:"log_metrics",anchor:"transformers.Trainer.log_metrics",parameters:[{name:"split",val:""},{name:"metrics",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16771/src/transformers/trainer_pt_utils.py#L845",parametersDescription:[{anchor:"transformers.Trainer.log_metrics.split",description:`<strong>split</strong> (<code>str</code>) &#x2014;
Mode/split name: one of <code>train</code>, <code>eval</code>, <code>test</code>`,name:"split"},{anchor:"transformers.Trainer.log_metrics.metrics",description:`<strong>metrics</strong> (<code>Dict[str, float]</code>) &#x2014;
The metrics returned from train/evaluate/predictmetrics: metrics dict`,name:"metrics"}]}}),Fa=new q({props:{code:`init_mem_cpu_alloc_delta   =     1301MB
init_mem_cpu_peaked_delta  =      154MB
init_mem_gpu_alloc_delta   =      230MB
init_mem_gpu_peaked_delta  =        0MB
train_mem_cpu_alloc_delta  =     1345MB
train_mem_cpu_peaked_delta =        0MB
train_mem_gpu_alloc_delta  =      693MB
train_mem_gpu_peaked_delta =        7MB`,highlighted:`<span class="hljs-attr">init_mem_cpu_alloc_delta</span>   =     <span class="hljs-number">1301</span>MB
<span class="hljs-attr">init_mem_cpu_peaked_delta</span>  =      <span class="hljs-number">154</span>MB
<span class="hljs-attr">init_mem_gpu_alloc_delta</span>   =      <span class="hljs-number">230</span>MB
<span class="hljs-attr">init_mem_gpu_peaked_delta</span>  =        <span class="hljs-number">0</span>MB
<span class="hljs-attr">train_mem_cpu_alloc_delta</span>  =     <span class="hljs-number">1345</span>MB
<span class="hljs-attr">train_mem_cpu_peaked_delta</span> =        <span class="hljs-number">0</span>MB
<span class="hljs-attr">train_mem_gpu_alloc_delta</span>  =      <span class="hljs-number">693</span>MB
<span class="hljs-attr">train_mem_gpu_peaked_delta</span> =        <span class="hljs-number">7</span>MB`}}),ja=new $({props:{name:"metrics_format",anchor:"transformers.Trainer.metrics_format",parameters:[{name:"metrics",val:": typing.Dict[str, float]"}],source:"https://github.com/huggingface/transformers/blob/pr_16771/src/transformers/trainer_pt_utils.py#L819",parametersDescription:[{anchor:"transformers.Trainer.metrics_format.metrics",description:`<strong>metrics</strong> (<code>Dict[str, float]</code>) &#x2014;
The metrics returned from train/evaluate/predict`,name:"metrics"}],returnDescription:`
<p>The reformatted metrics</p>
`,returnType:`
<p>metrics (<code>Dict[str, float]</code>)</p>
`}}),Ga=new $({props:{name:"num_examples",anchor:"transformers.Trainer.num_examples",parameters:[{name:"dataloader",val:": DataLoader"}],source:"https://github.com/huggingface/transformers/blob/pr_16771/src/transformers/trainer.py#L934"}}),Ha=new $({props:{name:"pop_callback",anchor:"transformers.Trainer.pop_callback",parameters:[{name:"callback",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16771/src/transformers/trainer.py#L520",parametersDescription:[{anchor:"transformers.Trainer.pop_callback.callback",description:`<strong>callback</strong> (<code>type</code> or <code>TrainerCallback</code>) &#x2014;
A <code>TrainerCallback</code> class or an instance of a <code>TrainerCallback</code>. In the
first case, will pop the first member of that class found in the list of callbacks.`,name:"callback"}],returnDescription:`
<p>The callback removed, if found.</p>
`,returnType:`
<p><code>TrainerCallback</code></p>
`}}),Ya=new $({props:{name:"predict",anchor:"transformers.Trainer.predict",parameters:[{name:"test_dataset",val:": Dataset"},{name:"ignore_keys",val:": typing.Optional[typing.List[str]] = None"},{name:"metric_key_prefix",val:": str = 'test'"}],source:"https://github.com/huggingface/transformers/blob/pr_16771/src/transformers/trainer.py#L2316",parametersDescription:[{anchor:"transformers.Trainer.predict.test_dataset",description:`<strong>test_dataset</strong> (<code>Dataset</code>) &#x2014;
Dataset to run the predictions on. If it is an <code>datasets.Dataset</code>, columns not accepted by the
<code>model.forward()</code> method are automatically removed. Has to implement the method <code>__len__</code>`,name:"test_dataset"},{anchor:"transformers.Trainer.predict.ignore_keys",description:`<strong>ignore_keys</strong> (<code>Lst[str]</code>, <em>optional</em>) &#x2014;
A list of keys in the output of your model (if it is a dictionary) that should be ignored when
gathering predictions.`,name:"ignore_keys"},{anchor:"transformers.Trainer.predict.metric_key_prefix",description:`<strong>metric_key_prefix</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;test&quot;</code>) &#x2014;
An optional prefix to be used as the metrics key prefix. For example the metrics &#x201C;bleu&#x201D; will be named
&#x201C;test_bleu&#x201D; if the prefix is &#x201C;test&#x201D; (default)`,name:"metric_key_prefix"}]}}),Zo=new Db({props:{$$slots:{default:[CU]},$$scope:{ctx:Qe}}}),Xa=new $({props:{name:"prediction_loop",anchor:"transformers.Trainer.prediction_loop",parameters:[{name:"dataloader",val:": DataLoader"},{name:"description",val:": str"},{name:"prediction_loss_only",val:": typing.Optional[bool] = None"},{name:"ignore_keys",val:": typing.Optional[typing.List[str]] = None"},{name:"metric_key_prefix",val:": str = 'eval'"}],source:"https://github.com/huggingface/transformers/blob/pr_16771/src/transformers/trainer.py#L2926"}}),Ka=new $({props:{name:"prediction_step",anchor:"transformers.Trainer.prediction_step",parameters:[{name:"model",val:": Module"},{name:"inputs",val:": typing.Dict[str, typing.Union[torch.Tensor, typing.Any]]"},{name:"prediction_loss_only",val:": bool"},{name:"ignore_keys",val:": typing.Optional[typing.List[str]] = None"}],source:"https://github.com/huggingface/transformers/blob/pr_16771/src/transformers/trainer.py#L2633",parametersDescription:[{anchor:"transformers.Trainer.prediction_step.model",description:`<strong>model</strong> (<code>nn.Module</code>) &#x2014;
The model to evaluate.`,name:"model"},{anchor:"transformers.Trainer.prediction_step.inputs",description:`<strong>inputs</strong> (<code>Dict[str, Union[torch.Tensor, Any]]</code>) &#x2014;
The inputs and targets of the model.</p>
<p>The dictionary will be unpacked before being fed to the model. Most models expect the targets under the
argument <code>labels</code>. Check your model&#x2019;s documentation for all accepted arguments.`,name:"inputs"},{anchor:"transformers.Trainer.prediction_step.prediction_loss_only",description:`<strong>prediction_loss_only</strong> (<code>bool</code>) &#x2014;
Whether or not to return the loss only.`,name:"prediction_loss_only"},{anchor:"transformers.Trainer.prediction_step.ignore_keys",description:`<strong>ignore_keys</strong> (<code>Lst[str]</code>, <em>optional</em>) &#x2014;
A list of keys in the output of your model (if it is a dictionary) that should be ignored when
gathering predictions.`,name:"ignore_keys"}],returnDescription:`
<p>A tuple with the loss,
logits and labels (each being optional).</p>
`,returnType:`
<p>Tuple[Optional[torch.Tensor], Optional[torch.Tensor], Optional[torch.Tensor]]</p>
`}}),Qa=new $({props:{name:"push_to_hub",anchor:"transformers.Trainer.push_to_hub",parameters:[{name:"commit_message",val:": typing.Optional[str] = 'End of training'"},{name:"blocking",val:": bool = True"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16771/src/transformers/trainer.py#L2872",parametersDescription:[{anchor:"transformers.Trainer.push_to_hub.commit_message",description:`<strong>commit_message</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;End of training&quot;</code>) &#x2014;
Message to commit while pushing.`,name:"commit_message"},{anchor:"transformers.Trainer.push_to_hub.blocking",description:`<strong>blocking</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether the function should return only when the <code>git push</code> has finished.
kwargs &#x2014;
Additional keyword arguments passed along to <code>create_model_card()</code>.`,name:"blocking"}],returnDescription:`
<p>The url of the commit of your model in the given repository if <code>blocking=False</code>, a tuple with the url of
the commit and an object to track the progress of the commit if <code>blocking=True</code></p>
`}}),en=new $({props:{name:"remove_callback",anchor:"transformers.Trainer.remove_callback",parameters:[{name:"callback",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16771/src/transformers/trainer.py#L536",parametersDescription:[{anchor:"transformers.Trainer.remove_callback.callback",description:`<strong>callback</strong> (<code>type</code> or <code>TrainerCallback</code>) &#x2014;
A <code>TrainerCallback</code> class or an instance of a <code>TrainerCallback</code>. In the
first case, will remove the first member of that class found in the list of callbacks.`,name:"callback"}]}}),on=new $({props:{name:"save_metrics",anchor:"transformers.Trainer.save_metrics",parameters:[{name:"split",val:""},{name:"metrics",val:""},{name:"combined",val:" = True"}],source:"https://github.com/huggingface/transformers/blob/pr_16771/src/transformers/trainer_pt_utils.py#L935",parametersDescription:[{anchor:"transformers.Trainer.save_metrics.split",description:`<strong>split</strong> (<code>str</code>) &#x2014;
Mode/split name: one of <code>train</code>, <code>eval</code>, <code>test</code>, <code>all</code>`,name:"split"},{anchor:"transformers.Trainer.save_metrics.metrics",description:`<strong>metrics</strong> (<code>Dict[str, float]</code>) &#x2014;
The metrics returned from train/evaluate/predict`,name:"metrics"},{anchor:"transformers.Trainer.save_metrics.combined",description:`<strong>combined</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Creates combined metrics by updating <code>all_results.json</code> with metrics of this call`,name:"combined"}]}}),nn=new $({props:{name:"save_model",anchor:"transformers.Trainer.save_model",parameters:[{name:"output_dir",val:": typing.Optional[str] = None"},{name:"_internal_call",val:": bool = False"}],source:"https://github.com/huggingface/transformers/blob/pr_16771/src/transformers/trainer.py#L2076"}}),ln=new $({props:{name:"save_state",anchor:"transformers.Trainer.save_state",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_16771/src/transformers/trainer_pt_utils.py#L973"}}),dn=new $({props:{name:"train",anchor:"transformers.Trainer.train",parameters:[{name:"resume_from_checkpoint",val:": typing.Union[str, bool, NoneType] = None"},{name:"trial",val:": typing.Union[ForwardRef('optuna.Trial'), typing.Dict[str, typing.Any]] = None"},{name:"ignore_keys_for_eval",val:": typing.Optional[typing.List[str]] = None"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16771/src/transformers/trainer.py#L1103",parametersDescription:[{anchor:"transformers.Trainer.train.resume_from_checkpoint",description:`<strong>resume_from_checkpoint</strong> (<code>str</code> or <code>bool</code>, <em>optional</em>) &#x2014;
If a <code>str</code>, local path to a saved checkpoint as saved by a previous instance of <a href="/docs/transformers/pr_16771/en/main_classes/trainer#transformers.Trainer">Trainer</a>. If a
<code>bool</code> and equals <code>True</code>, load the last checkpoint in <em>args.output_dir</em> as saved by a previous instance
of <a href="/docs/transformers/pr_16771/en/main_classes/trainer#transformers.Trainer">Trainer</a>. If present, training will resume from the model/optimizer/scheduler states loaded here.`,name:"resume_from_checkpoint"},{anchor:"transformers.Trainer.train.trial",description:`<strong>trial</strong> (<code>optuna.Trial</code> or <code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The trial run or the hyperparameter dictionary for hyperparameter search.`,name:"trial"},{anchor:"transformers.Trainer.train.ignore_keys_for_eval",description:`<strong>ignore_keys_for_eval</strong> (<code>List[str]</code>, <em>optional</em>) &#x2014;
A list of keys in the output of your model (if it is a dictionary) that should be ignored when
gathering predictions for evaluation during the training.
kwargs &#x2014;
Additional keyword arguments used to hide deprecated arguments`,name:"ignore_keys_for_eval"}]}}),cn=new $({props:{name:"training_step",anchor:"transformers.Trainer.training_step",parameters:[{name:"model",val:": Module"},{name:"inputs",val:": typing.Dict[str, typing.Union[torch.Tensor, typing.Any]]"}],source:"https://github.com/huggingface/transformers/blob/pr_16771/src/transformers/trainer.py#L1984",parametersDescription:[{anchor:"transformers.Trainer.training_step.model",description:`<strong>model</strong> (<code>nn.Module</code>) &#x2014;
The model to train.`,name:"model"},{anchor:"transformers.Trainer.training_step.inputs",description:`<strong>inputs</strong> (<code>Dict[str, Union[torch.Tensor, Any]]</code>) &#x2014;
The inputs and targets of the model.</p>
<p>The dictionary will be unpacked before being fed to the model. Most models expect the targets under the
argument <code>labels</code>. Check your model&#x2019;s documentation for all accepted arguments.`,name:"inputs"}],returnDescription:`
<p>The tensor with training loss on this batch.</p>
`,returnType:`
<p><code>torch.Tensor</code></p>
`}}),mn=new oe({}),pn=new $({props:{name:"class transformers.Seq2SeqTrainer",anchor:"transformers.Seq2SeqTrainer",parameters:[{name:"model",val:": typing.Union[transformers.modeling_utils.PreTrainedModel, torch.nn.modules.module.Module] = None"},{name:"args",val:": TrainingArguments = None"},{name:"data_collator",val:": typing.Optional[DataCollator] = None"},{name:"train_dataset",val:": typing.Optional[torch.utils.data.dataset.Dataset] = None"},{name:"eval_dataset",val:": typing.Optional[torch.utils.data.dataset.Dataset] = None"},{name:"tokenizer",val:": typing.Optional[transformers.tokenization_utils_base.PreTrainedTokenizerBase] = None"},{name:"model_init",val:": typing.Callable[[], transformers.modeling_utils.PreTrainedModel] = None"},{name:"compute_metrics",val:": typing.Union[typing.Callable[[transformers.trainer_utils.EvalPrediction], typing.Dict], NoneType] = None"},{name:"callbacks",val:": typing.Optional[typing.List[transformers.trainer_callback.TrainerCallback]] = None"},{name:"optimizers",val:": typing.Tuple[torch.optim.optimizer.Optimizer, torch.optim.lr_scheduler.LambdaLR] = (None, None)"},{name:"preprocess_logits_for_metrics",val:": typing.Callable[[torch.Tensor, torch.Tensor], torch.Tensor] = None"}],source:"https://github.com/huggingface/transformers/blob/pr_16771/src/transformers/trainer_seq2seq.py#L30"}}),hn=new $({props:{name:"evaluate",anchor:"transformers.Seq2SeqTrainer.evaluate",parameters:[{name:"eval_dataset",val:": typing.Optional[torch.utils.data.dataset.Dataset] = None"},{name:"ignore_keys",val:": typing.Optional[typing.List[str]] = None"},{name:"metric_key_prefix",val:": str = 'eval'"},{name:"max_length",val:": typing.Optional[int] = None"},{name:"num_beams",val:": typing.Optional[int] = None"}],source:"https://github.com/huggingface/transformers/blob/pr_16771/src/transformers/trainer_seq2seq.py#L31",parametersDescription:[{anchor:"transformers.Seq2SeqTrainer.evaluate.eval_dataset",description:`<strong>eval_dataset</strong> (<code>Dataset</code>, <em>optional</em>) &#x2014;
Pass a dataset if you wish to override <code>self.eval_dataset</code>. If it is an <code>datasets.Dataset</code>, columns not
accepted by the <code>model.forward()</code> method are automatically removed. It must implement the <code>__len__</code>
method.`,name:"eval_dataset"},{anchor:"transformers.Seq2SeqTrainer.evaluate.ignore_keys",description:`<strong>ignore_keys</strong> (<code>List[str]</code>, <em>optional</em>) &#x2014;
A list of keys in the output of your model (if it is a dictionary) that should be ignored when
gathering predictions.`,name:"ignore_keys"},{anchor:"transformers.Seq2SeqTrainer.evaluate.metric_key_prefix",description:`<strong>metric_key_prefix</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;eval&quot;</code>) &#x2014;
An optional prefix to be used as the metrics key prefix. For example the metrics &#x201C;bleu&#x201D; will be named
&#x201C;eval_bleu&#x201D; if the prefix is <code>&quot;eval&quot;</code> (default)`,name:"metric_key_prefix"},{anchor:"transformers.Seq2SeqTrainer.evaluate.max_length",description:`<strong>max_length</strong> (<code>int</code>, <em>optional</em>) &#x2014;
The maximum target length to use when predicting with the generate method.`,name:"max_length"},{anchor:"transformers.Seq2SeqTrainer.evaluate.num_beams",description:`<strong>num_beams</strong> (<code>int</code>, <em>optional</em>) &#x2014;
Number of beams for beam search that will be used when predicting with the generate method. 1 means no
beam search.`,name:"num_beams"}],returnDescription:`
<p>A dictionary containing the evaluation loss and the potential metrics computed from the predictions. The
dictionary also contains the epoch number which comes from the training state.</p>
`}}),fn=new $({props:{name:"predict",anchor:"transformers.Seq2SeqTrainer.predict",parameters:[{name:"test_dataset",val:": Dataset"},{name:"ignore_keys",val:": typing.Optional[typing.List[str]] = None"},{name:"metric_key_prefix",val:": str = 'test'"},{name:"max_length",val:": typing.Optional[int] = None"},{name:"num_beams",val:": typing.Optional[int] = None"}],source:"https://github.com/huggingface/transformers/blob/pr_16771/src/transformers/trainer_seq2seq.py#L72",parametersDescription:[{anchor:"transformers.Seq2SeqTrainer.predict.test_dataset",description:`<strong>test_dataset</strong> (<code>Dataset</code>) &#x2014;
Dataset to run the predictions on. If it is an <code>datasets.Dataset</code>, columns not accepted by the
<code>model.forward()</code> method are automatically removed. Has to implement the method <code>__len__</code>`,name:"test_dataset"},{anchor:"transformers.Seq2SeqTrainer.predict.ignore_keys",description:`<strong>ignore_keys</strong> (<code>List[str]</code>, <em>optional</em>) &#x2014;
A list of keys in the output of your model (if it is a dictionary) that should be ignored when
gathering predictions.`,name:"ignore_keys"},{anchor:"transformers.Seq2SeqTrainer.predict.metric_key_prefix",description:`<strong>metric_key_prefix</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;eval&quot;</code>) &#x2014;
An optional prefix to be used as the metrics key prefix. For example the metrics &#x201C;bleu&#x201D; will be named
&#x201C;eval_bleu&#x201D; if the prefix is <code>&quot;eval&quot;</code> (default)`,name:"metric_key_prefix"},{anchor:"transformers.Seq2SeqTrainer.predict.max_length",description:`<strong>max_length</strong> (<code>int</code>, <em>optional</em>) &#x2014;
The maximum target length to use when predicting with the generate method.`,name:"max_length"},{anchor:"transformers.Seq2SeqTrainer.predict.num_beams",description:`<strong>num_beams</strong> (<code>int</code>, <em>optional</em>) &#x2014;
Number of beams for beam search that will be used when predicting with the generate method. 1 means no
beam search.`,name:"num_beams"}]}}),er=new Db({props:{$$slots:{default:[NU]},$$scope:{ctx:Qe}}}),vn=new oe({}),bn=new $({props:{name:"class transformers.TrainingArguments",anchor:"transformers.TrainingArguments",parameters:[{name:"output_dir",val:": str"},{name:"overwrite_output_dir",val:": bool = False"},{name:"do_train",val:": bool = False"},{name:"do_eval",val:": bool = False"},{name:"do_predict",val:": bool = False"},{name:"evaluation_strategy",val:": IntervalStrategy = 'no'"},{name:"prediction_loss_only",val:": bool = False"},{name:"per_device_train_batch_size",val:": int = 8"},{name:"per_device_eval_batch_size",val:": int = 8"},{name:"per_gpu_train_batch_size",val:": typing.Optional[int] = None"},{name:"per_gpu_eval_batch_size",val:": typing.Optional[int] = None"},{name:"gradient_accumulation_steps",val:": int = 1"},{name:"eval_accumulation_steps",val:": typing.Optional[int] = None"},{name:"eval_delay",val:": typing.Optional[float] = 0"},{name:"learning_rate",val:": float = 5e-05"},{name:"weight_decay",val:": float = 0.0"},{name:"adam_beta1",val:": float = 0.9"},{name:"adam_beta2",val:": float = 0.999"},{name:"adam_epsilon",val:": float = 1e-08"},{name:"max_grad_norm",val:": float = 1.0"},{name:"num_train_epochs",val:": float = 3.0"},{name:"max_steps",val:": int = -1"},{name:"lr_scheduler_type",val:": SchedulerType = 'linear'"},{name:"warmup_ratio",val:": float = 0.0"},{name:"warmup_steps",val:": int = 0"},{name:"log_level",val:": typing.Optional[str] = 'passive'"},{name:"log_level_replica",val:": typing.Optional[str] = 'passive'"},{name:"log_on_each_node",val:": bool = True"},{name:"logging_dir",val:": typing.Optional[str] = None"},{name:"logging_strategy",val:": IntervalStrategy = 'steps'"},{name:"logging_first_step",val:": bool = False"},{name:"logging_steps",val:": int = 500"},{name:"logging_nan_inf_filter",val:": bool = True"},{name:"save_strategy",val:": IntervalStrategy = 'steps'"},{name:"save_steps",val:": int = 500"},{name:"save_total_limit",val:": typing.Optional[int] = None"},{name:"save_on_each_node",val:": bool = False"},{name:"no_cuda",val:": bool = False"},{name:"seed",val:": int = 42"},{name:"data_seed",val:": int = None"},{name:"bf16",val:": bool = False"},{name:"fp16",val:": bool = False"},{name:"fp16_opt_level",val:": str = 'O1'"},{name:"half_precision_backend",val:": str = 'auto'"},{name:"bf16_full_eval",val:": bool = False"},{name:"fp16_full_eval",val:": bool = False"},{name:"tf32",val:": bool = None"},{name:"local_rank",val:": int = -1"},{name:"xpu_backend",val:": str = None"},{name:"tpu_num_cores",val:": typing.Optional[int] = None"},{name:"tpu_metrics_debug",val:": bool = False"},{name:"debug",val:": str = ''"},{name:"dataloader_drop_last",val:": bool = False"},{name:"eval_steps",val:": int = None"},{name:"dataloader_num_workers",val:": int = 0"},{name:"past_index",val:": int = -1"},{name:"run_name",val:": typing.Optional[str] = None"},{name:"disable_tqdm",val:": typing.Optional[bool] = None"},{name:"remove_unused_columns",val:": typing.Optional[bool] = True"},{name:"label_names",val:": typing.Optional[typing.List[str]] = None"},{name:"load_best_model_at_end",val:": typing.Optional[bool] = False"},{name:"metric_for_best_model",val:": typing.Optional[str] = None"},{name:"greater_is_better",val:": typing.Optional[bool] = None"},{name:"ignore_data_skip",val:": bool = False"},{name:"sharded_ddp",val:": str = ''"},{name:"deepspeed",val:": typing.Optional[str] = None"},{name:"label_smoothing_factor",val:": float = 0.0"},{name:"optim",val:": OptimizerNames = 'adamw_hf'"},{name:"adafactor",val:": bool = False"},{name:"group_by_length",val:": bool = False"},{name:"length_column_name",val:": typing.Optional[str] = 'length'"},{name:"report_to",val:": typing.Optional[typing.List[str]] = None"},{name:"ddp_find_unused_parameters",val:": typing.Optional[bool] = None"},{name:"ddp_bucket_cap_mb",val:": typing.Optional[int] = None"},{name:"dataloader_pin_memory",val:": bool = True"},{name:"skip_memory_metrics",val:": bool = True"},{name:"use_legacy_prediction_loop",val:": bool = False"},{name:"push_to_hub",val:": bool = False"},{name:"resume_from_checkpoint",val:": typing.Optional[str] = None"},{name:"hub_model_id",val:": str = None"},{name:"hub_strategy",val:": HubStrategy = 'every_save'"},{name:"hub_token",val:": str = None"},{name:"hub_private_repo",val:": bool = False"},{name:"gradient_checkpointing",val:": bool = False"},{name:"include_inputs_for_metrics",val:": bool = False"},{name:"fp16_backend",val:": str = 'auto'"},{name:"push_to_hub_model_id",val:": str = None"},{name:"push_to_hub_organization",val:": str = None"},{name:"push_to_hub_token",val:": str = None"},{name:"mp_parameters",val:": str = ''"}],source:"https://github.com/huggingface/transformers/blob/pr_16771/src/transformers/training_args.py#L85",parametersDescription:[{anchor:"transformers.TrainingArguments.output_dir",description:`<strong>output_dir</strong> (<code>str</code>) &#x2014;
The output directory where the model predictions and checkpoints will be written.`,name:"output_dir"},{anchor:"transformers.TrainingArguments.overwrite_output_dir",description:`<strong>overwrite_output_dir</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>True</code>, overwrite the content of the output directory. Use this to continue training if <code>output_dir</code>
points to a checkpoint directory.`,name:"overwrite_output_dir"},{anchor:"transformers.TrainingArguments.do_train",description:`<strong>do_train</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether to run training or not. This argument is not directly used by <a href="/docs/transformers/pr_16771/en/main_classes/trainer#transformers.Trainer">Trainer</a>, it&#x2019;s intended to be used
by your training/evaluation scripts instead. See the <a href="https://github.com/huggingface/transformers/tree/main/examples" rel="nofollow">example
scripts</a> for more details.`,name:"do_train"},{anchor:"transformers.TrainingArguments.do_eval",description:`<strong>do_eval</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether to run evaluation on the validation set or not. Will be set to <code>True</code> if <code>evaluation_strategy</code> is
different from <code>&quot;no&quot;</code>. This argument is not directly used by <a href="/docs/transformers/pr_16771/en/main_classes/trainer#transformers.Trainer">Trainer</a>, it&#x2019;s intended to be used by your
training/evaluation scripts instead. See the <a href="https://github.com/huggingface/transformers/tree/main/examples" rel="nofollow">example
scripts</a> for more details.`,name:"do_eval"},{anchor:"transformers.TrainingArguments.do_predict",description:`<strong>do_predict</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether to run predictions on the test set or not. This argument is not directly used by <a href="/docs/transformers/pr_16771/en/main_classes/trainer#transformers.Trainer">Trainer</a>, it&#x2019;s
intended to be used by your training/evaluation scripts instead. See the <a href="https://github.com/huggingface/transformers/tree/main/examples" rel="nofollow">example
scripts</a> for more details.`,name:"do_predict"},{anchor:"transformers.TrainingArguments.evaluation_strategy",description:`<strong>evaluation_strategy</strong> (<code>str</code> or <a href="/docs/transformers/pr_16771/en/internal/trainer_utils#transformers.IntervalStrategy">IntervalStrategy</a>, <em>optional</em>, defaults to <code>&quot;no&quot;</code>) &#x2014;
The evaluation strategy to adopt during training. Possible values are:</p>
<ul>
<li><code>&quot;no&quot;</code>: No evaluation is done during training.</li>
<li><code>&quot;steps&quot;</code>: Evaluation is done (and logged) every <code>eval_steps</code>.</li>
<li><code>&quot;epoch&quot;</code>: Evaluation is done at the end of each epoch.</li>
</ul>`,name:"evaluation_strategy"},{anchor:"transformers.TrainingArguments.prediction_loss_only",description:`<strong>prediction_loss_only</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
When performing evaluation and generating predictions, only returns the loss.`,name:"prediction_loss_only"},{anchor:"transformers.TrainingArguments.per_device_train_batch_size",description:`<strong>per_device_train_batch_size</strong> (<code>int</code>, <em>optional</em>, defaults to 8) &#x2014;
The batch size per GPU/TPU core/CPU for training.`,name:"per_device_train_batch_size"},{anchor:"transformers.TrainingArguments.per_device_eval_batch_size",description:`<strong>per_device_eval_batch_size</strong> (<code>int</code>, <em>optional</em>, defaults to 8) &#x2014;
The batch size per GPU/TPU core/CPU for evaluation.`,name:"per_device_eval_batch_size"},{anchor:"transformers.TrainingArguments.gradient_accumulation_steps",description:`<strong>gradient_accumulation_steps</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
Number of updates steps to accumulate the gradients for, before performing a backward/update pass.</p>
<div class="course-tip course-tip-orange bg-gradient-to-br dark:bg-gradient-to-r before:border-orange-500 dark:before:border-orange-800 from-orange-50 dark:from-gray-900 to-white dark:to-gray-950 border border-orange-50 text-orange-700 dark:text-gray-400">
						
<p>When using gradient accumulation, one step is counted as one step with backward pass. Therefore, logging,
evaluation, save will be conducted every <code>gradient_accumulation_steps * xxx_step</code> training examples.</p>

					</div>`,name:"gradient_accumulation_steps"},{anchor:"transformers.TrainingArguments.eval_accumulation_steps",description:`<strong>eval_accumulation_steps</strong> (<code>int</code>, <em>optional</em>) &#x2014;
Number of predictions steps to accumulate the output tensors for, before moving the results to the CPU. If
left unset, the whole predictions are accumulated on GPU/TPU before being moved to the CPU (faster but
requires more memory).`,name:"eval_accumulation_steps"},{anchor:"transformers.TrainingArguments.eval_delay",description:`<strong>eval_delay</strong> (<code>float</code>, <em>optional</em>) &#x2014;
Number of epochs or steps to wait for before the first evaluation can be performed, depending on the
evaluation_strategy.`,name:"eval_delay"},{anchor:"transformers.TrainingArguments.learning_rate",description:`<strong>learning_rate</strong> (<code>float</code>, <em>optional</em>, defaults to 5e-5) &#x2014;
The initial learning rate for <a href="/docs/transformers/pr_16771/en/main_classes/optimizer_schedules#transformers.AdamW">AdamW</a> optimizer.`,name:"learning_rate"},{anchor:"transformers.TrainingArguments.weight_decay",description:`<strong>weight_decay</strong> (<code>float</code>, <em>optional</em>, defaults to 0) &#x2014;
The weight decay to apply (if not zero) to all layers except all bias and LayerNorm weights in <a href="/docs/transformers/pr_16771/en/main_classes/optimizer_schedules#transformers.AdamW">AdamW</a>
optimizer.`,name:"weight_decay"},{anchor:"transformers.TrainingArguments.adam_beta1",description:`<strong>adam_beta1</strong> (<code>float</code>, <em>optional</em>, defaults to 0.9) &#x2014;
The beta1 hyperparameter for the <a href="/docs/transformers/pr_16771/en/main_classes/optimizer_schedules#transformers.AdamW">AdamW</a> optimizer.`,name:"adam_beta1"},{anchor:"transformers.TrainingArguments.adam_beta2",description:`<strong>adam_beta2</strong> (<code>float</code>, <em>optional</em>, defaults to 0.999) &#x2014;
The beta2 hyperparameter for the <a href="/docs/transformers/pr_16771/en/main_classes/optimizer_schedules#transformers.AdamW">AdamW</a> optimizer.`,name:"adam_beta2"},{anchor:"transformers.TrainingArguments.adam_epsilon",description:`<strong>adam_epsilon</strong> (<code>float</code>, <em>optional</em>, defaults to 1e-8) &#x2014;
The epsilon hyperparameter for the <a href="/docs/transformers/pr_16771/en/main_classes/optimizer_schedules#transformers.AdamW">AdamW</a> optimizer.`,name:"adam_epsilon"},{anchor:"transformers.TrainingArguments.max_grad_norm",description:`<strong>max_grad_norm</strong> (<code>float</code>, <em>optional</em>, defaults to 1.0) &#x2014;
Maximum gradient norm (for gradient clipping).`,name:"max_grad_norm"},{anchor:"transformers.TrainingArguments.num_train_epochs(float,",description:`<strong>num_train_epochs(<code>float</code>,</strong> <em>optional</em>, defaults to 3.0) &#x2014;
Total number of training epochs to perform (if not an integer, will perform the decimal part percents of
the last epoch before stopping training).`,name:"num_train_epochs(float,"},{anchor:"transformers.TrainingArguments.max_steps",description:`<strong>max_steps</strong> (<code>int</code>, <em>optional</em>, defaults to -1) &#x2014;
If set to a positive number, the total number of training steps to perform. Overrides <code>num_train_epochs</code>.
In case of using a finite iterable dataset the training may stop before reaching the set number of steps
when all data is exhausted`,name:"max_steps"},{anchor:"transformers.TrainingArguments.lr_scheduler_type",description:`<strong>lr_scheduler_type</strong> (<code>str</code> or <a href="/docs/transformers/pr_16771/en/main_classes/optimizer_schedules#transformers.SchedulerType">SchedulerType</a>, <em>optional</em>, defaults to <code>&quot;linear&quot;</code>) &#x2014;
The scheduler type to use. See the documentation of <a href="/docs/transformers/pr_16771/en/main_classes/optimizer_schedules#transformers.SchedulerType">SchedulerType</a> for all possible values.`,name:"lr_scheduler_type"},{anchor:"transformers.TrainingArguments.warmup_ratio",description:`<strong>warmup_ratio</strong> (<code>float</code>, <em>optional</em>, defaults to 0.0) &#x2014;
Ratio of total training steps used for a linear warmup from 0 to <code>learning_rate</code>.`,name:"warmup_ratio"},{anchor:"transformers.TrainingArguments.warmup_steps",description:`<strong>warmup_steps</strong> (<code>int</code>, <em>optional</em>, defaults to 0) &#x2014;
Number of steps used for a linear warmup from 0 to <code>learning_rate</code>. Overrides any effect of <code>warmup_ratio</code>.`,name:"warmup_steps"},{anchor:"transformers.TrainingArguments.log_level",description:`<strong>log_level</strong> (<code>str</code>, <em>optional</em>, defaults to <code>passive</code>) &#x2014;
Logger log level to use on the main process. Possible choices are the log levels as strings: &#x2018;debug&#x2019;,
&#x2018;info&#x2019;, &#x2018;warning&#x2019;, &#x2018;error&#x2019; and &#x2018;critical&#x2019;, plus a &#x2018;passive&#x2019; level which doesn&#x2019;t set anything and lets the
application set the level.`,name:"log_level"},{anchor:"transformers.TrainingArguments.log_level_replica",description:`<strong>log_level_replica</strong> (<code>str</code>, <em>optional</em>, defaults to <code>passive</code>) &#x2014;
Logger log level to use on replicas. Same choices as <code>log_level</code>&#x201D;`,name:"log_level_replica"},{anchor:"transformers.TrainingArguments.log_on_each_node",description:`<strong>log_on_each_node</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
In multinode distributed training, whether to log using <code>log_level</code> once per node, or only on the main
node.`,name:"log_on_each_node"},{anchor:"transformers.TrainingArguments.logging_dir",description:`<strong>logging_dir</strong> (<code>str</code>, <em>optional</em>) &#x2014;
<a href="https://www.tensorflow.org/tensorboard" rel="nofollow">TensorBoard</a> log directory. Will default to
*output_dir/runs/<strong>CURRENT_DATETIME_HOSTNAME*</strong>.`,name:"logging_dir"},{anchor:"transformers.TrainingArguments.logging_strategy",description:`<strong>logging_strategy</strong> (<code>str</code> or <a href="/docs/transformers/pr_16771/en/internal/trainer_utils#transformers.IntervalStrategy">IntervalStrategy</a>, <em>optional</em>, defaults to <code>&quot;steps&quot;</code>) &#x2014;
The logging strategy to adopt during training. Possible values are:</p>
<ul>
<li><code>&quot;no&quot;</code>: No logging is done during training.</li>
<li><code>&quot;epoch&quot;</code>: Logging is done at the end of each epoch.</li>
<li><code>&quot;steps&quot;</code>: Logging is done every <code>logging_steps</code>.</li>
</ul>`,name:"logging_strategy"},{anchor:"transformers.TrainingArguments.logging_first_step",description:`<strong>logging_first_step</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether to log and evaluate the first <code>global_step</code> or not.`,name:"logging_first_step"},{anchor:"transformers.TrainingArguments.logging_steps",description:`<strong>logging_steps</strong> (<code>int</code>, <em>optional</em>, defaults to 500) &#x2014;
Number of update steps between two logs if <code>logging_strategy=&quot;steps&quot;</code>.`,name:"logging_steps"},{anchor:"transformers.TrainingArguments.logging_nan_inf_filter",description:`<strong>logging_nan_inf_filter</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether to filter <code>nan</code> and <code>inf</code> losses for logging. If set to <code>True</code> the loss of every step that is <code>nan</code>
or <code>inf</code> is filtered and the average loss of the current logging window is taken instead.</p>
<div class="course-tip  bg-gradient-to-br dark:bg-gradient-to-r before:border-green-500 dark:before:border-green-800 from-green-50 dark:from-gray-900 to-white dark:to-gray-950 border border-green-50 text-green-700 dark:text-gray-400">
						
<p><code>logging_nan_inf_filter</code> only influences the logging of loss values, it does not change the behavior the
gradient is computed or applied to the model.</p>

					</div>`,name:"logging_nan_inf_filter"},{anchor:"transformers.TrainingArguments.save_strategy",description:`<strong>save_strategy</strong> (<code>str</code> or <a href="/docs/transformers/pr_16771/en/internal/trainer_utils#transformers.IntervalStrategy">IntervalStrategy</a>, <em>optional</em>, defaults to <code>&quot;steps&quot;</code>) &#x2014;
The checkpoint save strategy to adopt during training. Possible values are:</p>
<ul>
<li><code>&quot;no&quot;</code>: No save is done during training.</li>
<li><code>&quot;epoch&quot;</code>: Save is done at the end of each epoch.</li>
<li><code>&quot;steps&quot;</code>: Save is done every <code>save_steps</code>.</li>
</ul>`,name:"save_strategy"},{anchor:"transformers.TrainingArguments.save_steps",description:`<strong>save_steps</strong> (<code>int</code>, <em>optional</em>, defaults to 500) &#x2014;
Number of updates steps before two checkpoint saves if <code>save_strategy=&quot;steps&quot;</code>.`,name:"save_steps"},{anchor:"transformers.TrainingArguments.save_total_limit",description:`<strong>save_total_limit</strong> (<code>int</code>, <em>optional</em>) &#x2014;
If a value is passed, will limit the total amount of checkpoints. Deletes the older checkpoints in
<code>output_dir</code>.`,name:"save_total_limit"},{anchor:"transformers.TrainingArguments.save_on_each_node",description:`<strong>save_on_each_node</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
When doing multi-node distributed training, whether to save models and checkpoints on each node, or only on
the main one.</p>
<p>This should not be activated when the different nodes use the same storage as the files will be saved with
the same names for each node.`,name:"save_on_each_node"},{anchor:"transformers.TrainingArguments.no_cuda",description:`<strong>no_cuda</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether to not use CUDA even when it is available or not.`,name:"no_cuda"},{anchor:"transformers.TrainingArguments.seed",description:`<strong>seed</strong> (<code>int</code>, <em>optional</em>, defaults to 42) &#x2014;
Random seed that will be set at the beginning of training. To ensure reproducibility across runs, use the
<code>model_init</code> function to instantiate the model if it has some randomly initialized parameters.`,name:"seed"},{anchor:"transformers.TrainingArguments.data_seed",description:`<strong>data_seed</strong> (<code>int</code>, <em>optional</em>) &#x2014;
Random seed to be used with data samplers. If not set, random generators for data sampling will use the
same seed as <code>seed</code>. This can be used to ensure reproducibility of data sampling, independent of the model
seed.`,name:"data_seed"},{anchor:"transformers.TrainingArguments.bf16",description:`<strong>bf16</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether to use bf16 16-bit (mixed) precision training instead of 32-bit training. Requires Ampere or higher
NVIDIA architecture. This is an experimental API and it may change.`,name:"bf16"},{anchor:"transformers.TrainingArguments.fp16",description:`<strong>fp16</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether to use fp16 16-bit (mixed) precision training instead of 32-bit training.`,name:"fp16"},{anchor:"transformers.TrainingArguments.fp16_opt_level",description:`<strong>fp16_opt_level</strong> (<code>str</code>, <em>optional</em>, defaults to &#x2018;O1&#x2019;) &#x2014;
For <code>fp16</code> training, Apex AMP optimization level selected in [&#x2018;O0&#x2019;, &#x2018;O1&#x2019;, &#x2018;O2&#x2019;, and &#x2018;O3&#x2019;]. See details on
the <a href="https://nvidia.github.io/apex/amp" rel="nofollow">Apex documentation</a>.`,name:"fp16_opt_level"},{anchor:"transformers.TrainingArguments.fp16_backend",description:`<strong>fp16_backend</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;auto&quot;</code>) &#x2014;
This argument is deprecated. Use <code>half_precision_backend</code> instead.`,name:"fp16_backend"},{anchor:"transformers.TrainingArguments.half_precision_backend",description:`<strong>half_precision_backend</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;auto&quot;</code>) &#x2014;
The backend to use for mixed precision training. Must be one of <code>&quot;auto&quot;</code>, <code>&quot;amp&quot;</code> or <code>&quot;apex&quot;</code>. <code>&quot;auto&quot;</code>
will use AMP or APEX depending on the PyTorch version detected, while the other choices will force the
requested backend.`,name:"half_precision_backend"},{anchor:"transformers.TrainingArguments.bf16_full_eval",description:`<strong>bf16_full_eval</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether to use full bfloat16 evaluation instead of 32-bit. This will be faster and save memory but can harm
metric values. This is an experimental API and it may change.`,name:"bf16_full_eval"},{anchor:"transformers.TrainingArguments.fp16_full_eval",description:`<strong>fp16_full_eval</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether to use full float16 evaluation instead of 32-bit. This will be faster and save memory but can harm
metric values.`,name:"fp16_full_eval"},{anchor:"transformers.TrainingArguments.tf32",description:`<strong>tf32</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether to enable the TF32 mode, available in Ampere and newer GPU architectures. The default value depends
on PyTorch&#x2019;s version default of <code>torch.backends.cuda.matmul.allow_tf32</code>. For more details please refer to
the <a href="https://huggingface.co/docs/transformers/performance#tf32" rel="nofollow">TF32</a> documentation. This is an
experimental API and it may change.`,name:"tf32"},{anchor:"transformers.TrainingArguments.local_rank",description:`<strong>local_rank</strong> (<code>int</code>, <em>optional</em>, defaults to -1) &#x2014;
Rank of the process during distributed training.`,name:"local_rank"},{anchor:"transformers.TrainingArguments.xpu_backend",description:`<strong>xpu_backend</strong> (<code>str</code>, <em>optional</em>) &#x2014;
The backend to use for xpu distributed training. Must be one of <code>&quot;mpi&quot;</code> or <code>&quot;ccl&quot;</code>.`,name:"xpu_backend"},{anchor:"transformers.TrainingArguments.tpu_num_cores",description:`<strong>tpu_num_cores</strong> (<code>int</code>, <em>optional</em>) &#x2014;
When training on TPU, the number of TPU cores (automatically passed by launcher script).`,name:"tpu_num_cores"},{anchor:"transformers.TrainingArguments.dataloader_drop_last",description:`<strong>dataloader_drop_last</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether to drop the last incomplete batch (if the length of the dataset is not divisible by the batch size)
or not.`,name:"dataloader_drop_last"},{anchor:"transformers.TrainingArguments.eval_steps",description:`<strong>eval_steps</strong> (<code>int</code>, <em>optional</em>) &#x2014;
Number of update steps between two evaluations if <code>evaluation_strategy=&quot;steps&quot;</code>. Will default to the same
value as <code>logging_steps</code> if not set.`,name:"eval_steps"},{anchor:"transformers.TrainingArguments.dataloader_num_workers",description:`<strong>dataloader_num_workers</strong> (<code>int</code>, <em>optional</em>, defaults to 0) &#x2014;
Number of subprocesses to use for data loading (PyTorch only). 0 means that the data will be loaded in the
main process.`,name:"dataloader_num_workers"},{anchor:"transformers.TrainingArguments.past_index",description:`<strong>past_index</strong> (<code>int</code>, <em>optional</em>, defaults to -1) &#x2014;
Some models like <a href="../model_doc/transformerxl">TransformerXL</a> or <a href="../model_doc/xlnet">XLNet</a> can make use of
the past hidden states for their predictions. If this argument is set to a positive int, the <code>Trainer</code> will
use the corresponding output (usually index 2) as the past state and feed it to the model at the next
training step under the keyword argument <code>mems</code>.`,name:"past_index"},{anchor:"transformers.TrainingArguments.run_name",description:`<strong>run_name</strong> (<code>str</code>, <em>optional</em>) &#x2014;
A descriptor for the run. Typically used for <a href="https://www.wandb.com/" rel="nofollow">wandb</a> and
<a href="https://www.mlflow.org/" rel="nofollow">mlflow</a> logging.`,name:"run_name"},{anchor:"transformers.TrainingArguments.disable_tqdm",description:`<strong>disable_tqdm</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to disable the tqdm progress bars and table of metrics produced by
<code>NotebookTrainingTracker</code> in Jupyter Notebooks. Will default to <code>True</code> if the logging level is
set to warn or lower (default), <code>False</code> otherwise.`,name:"disable_tqdm"},{anchor:"transformers.TrainingArguments.remove_unused_columns",description:`<strong>remove_unused_columns</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
If using <code>datasets.Dataset</code> datasets, whether or not to automatically remove the columns unused by the
model forward method.</p>
<p>(Note that this behavior is not implemented for <code>TFTrainer</code> yet.)`,name:"remove_unused_columns"},{anchor:"transformers.TrainingArguments.label_names",description:`<strong>label_names</strong> (<code>List[str]</code>, <em>optional</em>) &#x2014;
The list of keys in your dictionary of inputs that correspond to the labels.</p>
<p>Will eventually default to <code>[&quot;labels&quot;]</code> except if the model used is one of the <code>XxxForQuestionAnswering</code> in
which case it will default to <code>[&quot;start_positions&quot;, &quot;end_positions&quot;]</code>.`,name:"label_names"},{anchor:"transformers.TrainingArguments.load_best_model_at_end",description:`<strong>load_best_model_at_end</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to load the best model found during training at the end of training.</p>
<div class="course-tip  bg-gradient-to-br dark:bg-gradient-to-r before:border-green-500 dark:before:border-green-800 from-green-50 dark:from-gray-900 to-white dark:to-gray-950 border border-green-50 text-green-700 dark:text-gray-400">
						
<p>When set to <code>True</code>, the parameters <code>save_strategy</code> needs to be the same as <code>eval_strategy</code>, and in the case
it is &#x201C;steps&#x201D;, <code>save_steps</code> must be a round multiple of <code>eval_steps</code>.</p>

					</div>`,name:"load_best_model_at_end"},{anchor:"transformers.TrainingArguments.metric_for_best_model",description:`<strong>metric_for_best_model</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Use in conjunction with <code>load_best_model_at_end</code> to specify the metric to use to compare two different
models. Must be the name of a metric returned by the evaluation with or without the prefix <code>&quot;eval_&quot;</code>. Will
default to <code>&quot;loss&quot;</code> if unspecified and <code>load_best_model_at_end=True</code> (to use the evaluation loss).</p>
<p>If you set this value, <code>greater_is_better</code> will default to <code>True</code>. Don&#x2019;t forget to set it to <code>False</code> if
your metric is better when lower.`,name:"metric_for_best_model"},{anchor:"transformers.TrainingArguments.greater_is_better",description:`<strong>greater_is_better</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Use in conjunction with <code>load_best_model_at_end</code> and <code>metric_for_best_model</code> to specify if better models
should have a greater metric or not. Will default to:</p>
<ul>
<li><code>True</code> if <code>metric_for_best_model</code> is set to a value that isn&#x2019;t <code>&quot;loss&quot;</code> or <code>&quot;eval_loss&quot;</code>.</li>
<li><code>False</code> if <code>metric_for_best_model</code> is not set, or set to <code>&quot;loss&quot;</code> or <code>&quot;eval_loss&quot;</code>.</li>
</ul>`,name:"greater_is_better"},{anchor:"transformers.TrainingArguments.ignore_data_skip",description:`<strong>ignore_data_skip</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
When resuming training, whether or not to skip the epochs and batches to get the data loading at the same
stage as in the previous training. If set to <code>True</code>, the training will begin faster (as that skipping step
can take a long time) but will not yield the same results as the interrupted training would have.`,name:"ignore_data_skip"},{anchor:"transformers.TrainingArguments.sharded_ddp",description:`<strong>sharded_ddp</strong> (<code>bool</code>, <code>str</code> or list of <code>ShardedDDPOption</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Use Sharded DDP training from <a href="https://github.com/facebookresearch/fairscale" rel="nofollow">FairScale</a> (in distributed
training only). This is an experimental feature.</p>
<p>A list of options along the following:</p>
<ul>
<li><code>&quot;simple&quot;</code>: to use first instance of sharded DDP released by fairscale (<code>ShardedDDP</code>) similar to ZeRO-2.</li>
<li><code>&quot;zero_dp_2&quot;</code>: to use the second instance of sharded DPP released by fairscale (<code>FullyShardedDDP</code>) in
Zero-2 mode (with <code>reshard_after_forward=False</code>).</li>
<li><code>&quot;zero_dp_3&quot;</code>: to use the second instance of sharded DPP released by fairscale (<code>FullyShardedDDP</code>) in
Zero-3 mode (with <code>reshard_after_forward=True</code>).</li>
<li><code>&quot;offload&quot;</code>: to add ZeRO-offload (only compatible with <code>&quot;zero_dp_2&quot;</code> and <code>&quot;zero_dp_3&quot;</code>).</li>
</ul>
<p>If a string is passed, it will be split on space. If a bool is passed, it will be converted to an empty
list for <code>False</code> and <code>[&quot;simple&quot;]</code> for <code>True</code>.`,name:"sharded_ddp"},{anchor:"transformers.TrainingArguments.deepspeed",description:`<strong>deepspeed</strong> (<code>str</code> or <code>dict</code>, <em>optional</em>) &#x2014;
Use <a href="https://github.com/microsoft/deepspeed" rel="nofollow">Deepspeed</a>. This is an experimental feature and its API may
evolve in the future. The value is either the location of DeepSpeed json config file (e.g.,
<code>ds_config.json</code>) or an already loaded json file as a <code>dict</code>&#x201D;`,name:"deepspeed"},{anchor:"transformers.TrainingArguments.label_smoothing_factor",description:`<strong>label_smoothing_factor</strong> (<code>float</code>, <em>optional</em>, defaults to 0.0) &#x2014;
The label smoothing factor to use. Zero means no label smoothing, otherwise the underlying onehot-encoded
labels are changed from 0s and 1s to <code>label_smoothing_factor/num_labels</code> and <code>1 - label_smoothing_factor + label_smoothing_factor/num_labels</code> respectively.`,name:"label_smoothing_factor"},{anchor:"transformers.TrainingArguments.debug",description:`<strong>debug</strong> (<code>str</code> or list of <code>DebugOption</code>, <em>optional</em>, defaults to <code>&quot;&quot;</code>) &#x2014;
Enable one or more debug features. This is an experimental feature.</p>
<p>Possible options are:</p>
<ul>
<li><code>&quot;underflow_overflow&quot;</code>: detects overflow in model&#x2019;s input/outputs and reports the last frames that led to
the event</li>
<li><code>&quot;tpu_metrics_debug&quot;</code>: print debug metrics on TPU</li>
</ul>
<p>The options should be separated by whitespaces.`,name:"debug"},{anchor:"transformers.TrainingArguments.optim",description:`<strong>optim</strong> (<code>str</code> or <code>training_args.OptimizerNames</code>, <em>optional</em>, defaults to <code>&quot;adamw_hf&quot;</code>) &#x2014;
The optimizer to use: adamw_hf, adamw_torch, adamw_apex_fused, or adafactor.`,name:"optim"},{anchor:"transformers.TrainingArguments.adafactor",description:`<strong>adafactor</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
This argument is deprecated. Use <code>--optim adafactor</code> instead.`,name:"adafactor"},{anchor:"transformers.TrainingArguments.group_by_length",description:`<strong>group_by_length</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to group together samples of roughly the same length in the training dataset (to minimize
padding applied and be more efficient). Only useful if applying dynamic padding.`,name:"group_by_length"},{anchor:"transformers.TrainingArguments.length_column_name",description:`<strong>length_column_name</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;length&quot;</code>) &#x2014;
Column name for precomputed lengths. If the column exists, grouping by length will use these values rather
than computing them on train startup. Ignored unless <code>group_by_length</code> is <code>True</code> and the dataset is an
instance of <code>Dataset</code>.`,name:"length_column_name"},{anchor:"transformers.TrainingArguments.report_to",description:`<strong>report_to</strong> (<code>str</code> or <code>List[str]</code>, <em>optional</em>, defaults to <code>&quot;all&quot;</code>) &#x2014;
The list of integrations to report the results and logs to. Supported platforms are <code>&quot;azure_ml&quot;</code>,
<code>&quot;comet_ml&quot;</code>, <code>&quot;mlflow&quot;</code>, <code>&quot;tensorboard&quot;</code> and <code>&quot;wandb&quot;</code>. Use <code>&quot;all&quot;</code> to report to all integrations
installed, <code>&quot;none&quot;</code> for no integrations.`,name:"report_to"},{anchor:"transformers.TrainingArguments.ddp_find_unused_parameters",description:`<strong>ddp_find_unused_parameters</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
When using distributed training, the value of the flag <code>find_unused_parameters</code> passed to
<code>DistributedDataParallel</code>. Will default to <code>False</code> if gradient checkpointing is used, <code>True</code> otherwise.`,name:"ddp_find_unused_parameters"},{anchor:"transformers.TrainingArguments.ddp_bucket_cap_mb",description:`<strong>ddp_bucket_cap_mb</strong> (<code>int</code>, <em>optional</em>) &#x2014;
When using distributed training, the value of the flag <code>bucket_cap_mb</code> passed to <code>DistributedDataParallel</code>.`,name:"ddp_bucket_cap_mb"},{anchor:"transformers.TrainingArguments.dataloader_pin_memory",description:`<strong>dataloader_pin_memory</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether you want to pin memory in data loaders or not. Will default to <code>True</code>.`,name:"dataloader_pin_memory"},{anchor:"transformers.TrainingArguments.skip_memory_metrics",description:`<strong>skip_memory_metrics</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether to skip adding of memory profiler reports to metrics. This is skipped by default because it slows
down the training and evaluation speed.`,name:"skip_memory_metrics"},{anchor:"transformers.TrainingArguments.push_to_hub",description:`<strong>push_to_hub</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to push the model to the Hub every time the model is saved. If this is activated,
<code>output_dir</code> will begin a git directory synced with the the repo (determined by <code>hub_model_id</code>) and the
content will be pushed each time a save is triggered (depending on your <code>save_strategy</code>). Calling
<a href="/docs/transformers/pr_16771/en/main_classes/trainer#transformers.Trainer.save_model">save_model()</a> will also trigger a push.</p>
<div class="course-tip course-tip-orange bg-gradient-to-br dark:bg-gradient-to-r before:border-orange-500 dark:before:border-orange-800 from-orange-50 dark:from-gray-900 to-white dark:to-gray-950 border border-orange-50 text-orange-700 dark:text-gray-400">
						
<p>If <code>output_dir</code> exists, it needs to be a local clone of the repository to which the <a href="/docs/transformers/pr_16771/en/main_classes/trainer#transformers.Trainer">Trainer</a> will be
pushed.</p>

					</div>`,name:"push_to_hub"},{anchor:"transformers.TrainingArguments.resume_from_checkpoint",description:`<strong>resume_from_checkpoint</strong> (<code>str</code>, <em>optional</em>) &#x2014;
The path to a folder with a valid checkpoint for your model. This argument is not directly used by
<a href="/docs/transformers/pr_16771/en/main_classes/trainer#transformers.Trainer">Trainer</a>, it&#x2019;s intended to be used by your training/evaluation scripts instead. See the <a href="https://github.com/huggingface/transformers/tree/main/examples" rel="nofollow">example
scripts</a> for more details.`,name:"resume_from_checkpoint"},{anchor:"transformers.TrainingArguments.hub_model_id",description:`<strong>hub_model_id</strong> (<code>str</code>, <em>optional</em>) &#x2014;
The name of the repository to keep in sync with the local <em>output_dir</em>. It can be a simple model ID in
which case the model will be pushed in your namespace. Otherwise it should be the whole repository name,
for instance <code>&quot;user_name/model&quot;</code>, which allows you to push to an organization you are a member of with
<code>&quot;organization_name/model&quot;</code>. Will default to <code>user_name/output_dir_name</code> with <em>output_dir_name</em> being the
name of <code>output_dir</code>.</p>
<p>Will default to to the name of <code>output_dir</code>.`,name:"hub_model_id"},{anchor:"transformers.TrainingArguments.hub_strategy",description:`<strong>hub_strategy</strong> (<code>str</code> or <code>HubStrategy</code>, <em>optional</em>, defaults to <code>&quot;every_save&quot;</code>) &#x2014;
Defines the scope of what is pushed to the Hub and when. Possible values are:</p>
<ul>
<li><code>&quot;end&quot;</code>: push the model, its configuration, the tokenizer (if passed along to the <a href="/docs/transformers/pr_16771/en/main_classes/trainer#transformers.Trainer">Trainer</a>) and a
draft of a model card when the <a href="/docs/transformers/pr_16771/en/main_classes/trainer#transformers.Trainer.save_model">save_model()</a> method is called.</li>
<li><code>&quot;every_save&quot;</code>: push the model, its configuration, the tokenizer (if passed along to the <a href="/docs/transformers/pr_16771/en/main_classes/trainer#transformers.Trainer">Trainer</a>) and
a draft of a model card each time there is a model save. The pushes are asynchronous to not block
training, and in case the save are very frequent, a new push is only attempted if the previous one is
finished. A last push is made with the final model at the end of training.</li>
<li><code>&quot;checkpoint&quot;</code>: like <code>&quot;every_save&quot;</code> but the latest checkpoint is also pushed in a subfolder named
last-checkpoint, allowing you to resume training easily with
<code>trainer.train(resume_from_checkpoint=&quot;last-checkpoint&quot;)</code>.</li>
<li><code>&quot;all_checkpoints&quot;</code>: like <code>&quot;checkpoint&quot;</code> but all checkpoints are pushed like they appear in the output
folder (so you will get one checkpoint folder per folder in your final repository)</li>
</ul>`,name:"hub_strategy"},{anchor:"transformers.TrainingArguments.hub_token",description:`<strong>hub_token</strong> (<code>str</code>, <em>optional</em>) &#x2014;
The token to use to push the model to the Hub. Will default to the token in the cache folder obtained with
<code>huggingface-cli login</code>.`,name:"hub_token"},{anchor:"transformers.TrainingArguments.hub_private_repo",description:`<strong>hub_private_repo</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If True, the Hub repo will be set to private.`,name:"hub_private_repo"},{anchor:"transformers.TrainingArguments.gradient_checkpointing",description:`<strong>gradient_checkpointing</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If True, use gradient checkpointing to save memory at the expense of slower backward pass.`,name:"gradient_checkpointing"},{anchor:"transformers.TrainingArguments.include_inputs_for_metrics",description:`<strong>include_inputs_for_metrics</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not the inputs will be passed to the <code>compute_metrics</code> function. This is intended for metrics
that need inputs, predictions and references for scoring calculation in Metric class.`,name:"include_inputs_for_metrics"}]}}),Tn=new $({props:{name:"get_process_log_level",anchor:"transformers.TrainingArguments.get_process_log_level",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_16771/src/transformers/training_args.py#L1225"}}),$n=new $({props:{name:"get_warmup_steps",anchor:"transformers.TrainingArguments.get_warmup_steps",parameters:[{name:"num_training_steps",val:": int"}],source:"https://github.com/huggingface/transformers/blob/pr_16771/src/transformers/training_args.py#L1311"}}),kn=new $({props:{name:"main_process_first",anchor:"transformers.TrainingArguments.main_process_first",parameters:[{name:"local",val:" = True"},{name:"desc",val:" = 'work'"}],source:"https://github.com/huggingface/transformers/blob/pr_16771/src/transformers/training_args.py#L1256",parametersDescription:[{anchor:"transformers.TrainingArguments.main_process_first.local",description:`<strong>local</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
if <code>True</code> first means process of rank 0 of each node if <code>False</code> first means process of rank 0 of node
rank 0 In multi-node environment with a shared filesystem you most likely will want to use
<code>local=False</code> so that only the main process of the first node will do the processing. If however, the
filesystem is not shared, then the main process of each node will need to do the processing, which is
the default behavior.`,name:"local"},{anchor:"transformers.TrainingArguments.main_process_first.desc",description:`<strong>desc</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;work&quot;</code>) &#x2014;
a work description to be used in debug logs`,name:"desc"}]}}),xn=new $({props:{name:"to_dict",anchor:"transformers.TrainingArguments.to_dict",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_16771/src/transformers/training_args.py#L1320"}}),Dn=new $({props:{name:"to_json_string",anchor:"transformers.TrainingArguments.to_json_string",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_16771/src/transformers/training_args.py#L1335"}}),qn=new $({props:{name:"to_sanitized_dict",anchor:"transformers.TrainingArguments.to_sanitized_dict",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_16771/src/transformers/training_args.py#L1341"}}),Sn=new oe({}),Pn=new $({props:{name:"class transformers.Seq2SeqTrainingArguments",anchor:"transformers.Seq2SeqTrainingArguments",parameters:[{name:"output_dir",val:": str"},{name:"overwrite_output_dir",val:": bool = False"},{name:"do_train",val:": bool = False"},{name:"do_eval",val:": bool = False"},{name:"do_predict",val:": bool = False"},{name:"evaluation_strategy",val:": IntervalStrategy = 'no'"},{name:"prediction_loss_only",val:": bool = False"},{name:"per_device_train_batch_size",val:": int = 8"},{name:"per_device_eval_batch_size",val:": int = 8"},{name:"per_gpu_train_batch_size",val:": typing.Optional[int] = None"},{name:"per_gpu_eval_batch_size",val:": typing.Optional[int] = None"},{name:"gradient_accumulation_steps",val:": int = 1"},{name:"eval_accumulation_steps",val:": typing.Optional[int] = None"},{name:"eval_delay",val:": typing.Optional[float] = 0"},{name:"learning_rate",val:": float = 5e-05"},{name:"weight_decay",val:": float = 0.0"},{name:"adam_beta1",val:": float = 0.9"},{name:"adam_beta2",val:": float = 0.999"},{name:"adam_epsilon",val:": float = 1e-08"},{name:"max_grad_norm",val:": float = 1.0"},{name:"num_train_epochs",val:": float = 3.0"},{name:"max_steps",val:": int = -1"},{name:"lr_scheduler_type",val:": SchedulerType = 'linear'"},{name:"warmup_ratio",val:": float = 0.0"},{name:"warmup_steps",val:": int = 0"},{name:"log_level",val:": typing.Optional[str] = 'passive'"},{name:"log_level_replica",val:": typing.Optional[str] = 'passive'"},{name:"log_on_each_node",val:": bool = True"},{name:"logging_dir",val:": typing.Optional[str] = None"},{name:"logging_strategy",val:": IntervalStrategy = 'steps'"},{name:"logging_first_step",val:": bool = False"},{name:"logging_steps",val:": int = 500"},{name:"logging_nan_inf_filter",val:": bool = True"},{name:"save_strategy",val:": IntervalStrategy = 'steps'"},{name:"save_steps",val:": int = 500"},{name:"save_total_limit",val:": typing.Optional[int] = None"},{name:"save_on_each_node",val:": bool = False"},{name:"no_cuda",val:": bool = False"},{name:"seed",val:": int = 42"},{name:"data_seed",val:": int = None"},{name:"bf16",val:": bool = False"},{name:"fp16",val:": bool = False"},{name:"fp16_opt_level",val:": str = 'O1'"},{name:"half_precision_backend",val:": str = 'auto'"},{name:"bf16_full_eval",val:": bool = False"},{name:"fp16_full_eval",val:": bool = False"},{name:"tf32",val:": bool = None"},{name:"local_rank",val:": int = -1"},{name:"xpu_backend",val:": str = None"},{name:"tpu_num_cores",val:": typing.Optional[int] = None"},{name:"tpu_metrics_debug",val:": bool = False"},{name:"debug",val:": str = ''"},{name:"dataloader_drop_last",val:": bool = False"},{name:"eval_steps",val:": int = None"},{name:"dataloader_num_workers",val:": int = 0"},{name:"past_index",val:": int = -1"},{name:"run_name",val:": typing.Optional[str] = None"},{name:"disable_tqdm",val:": typing.Optional[bool] = None"},{name:"remove_unused_columns",val:": typing.Optional[bool] = True"},{name:"label_names",val:": typing.Optional[typing.List[str]] = None"},{name:"load_best_model_at_end",val:": typing.Optional[bool] = False"},{name:"metric_for_best_model",val:": typing.Optional[str] = None"},{name:"greater_is_better",val:": typing.Optional[bool] = None"},{name:"ignore_data_skip",val:": bool = False"},{name:"sharded_ddp",val:": str = ''"},{name:"deepspeed",val:": typing.Optional[str] = None"},{name:"label_smoothing_factor",val:": float = 0.0"},{name:"optim",val:": OptimizerNames = 'adamw_hf'"},{name:"adafactor",val:": bool = False"},{name:"group_by_length",val:": bool = False"},{name:"length_column_name",val:": typing.Optional[str] = 'length'"},{name:"report_to",val:": typing.Optional[typing.List[str]] = None"},{name:"ddp_find_unused_parameters",val:": typing.Optional[bool] = None"},{name:"ddp_bucket_cap_mb",val:": typing.Optional[int] = None"},{name:"dataloader_pin_memory",val:": bool = True"},{name:"skip_memory_metrics",val:": bool = True"},{name:"use_legacy_prediction_loop",val:": bool = False"},{name:"push_to_hub",val:": bool = False"},{name:"resume_from_checkpoint",val:": typing.Optional[str] = None"},{name:"hub_model_id",val:": str = None"},{name:"hub_strategy",val:": HubStrategy = 'every_save'"},{name:"hub_token",val:": str = None"},{name:"hub_private_repo",val:": bool = False"},{name:"gradient_checkpointing",val:": bool = False"},{name:"include_inputs_for_metrics",val:": bool = False"},{name:"fp16_backend",val:": str = 'auto'"},{name:"push_to_hub_model_id",val:": str = None"},{name:"push_to_hub_organization",val:": str = None"},{name:"push_to_hub_token",val:": str = None"},{name:"mp_parameters",val:": str = ''"},{name:"sortish_sampler",val:": bool = False"},{name:"predict_with_generate",val:": bool = False"},{name:"generation_max_length",val:": typing.Optional[int] = None"},{name:"generation_num_beams",val:": typing.Optional[int] = None"}],source:"https://github.com/huggingface/transformers/blob/pr_16771/src/transformers/training_args_seq2seq.py#L28",parametersDescription:[{anchor:"transformers.Seq2SeqTrainingArguments.output_dir",description:`<strong>output_dir</strong> (<code>str</code>) &#x2014;
The output directory where the model predictions and checkpoints will be written.`,name:"output_dir"},{anchor:"transformers.Seq2SeqTrainingArguments.overwrite_output_dir",description:`<strong>overwrite_output_dir</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>True</code>, overwrite the content of the output directory. Use this to continue training if <code>output_dir</code>
points to a checkpoint directory.`,name:"overwrite_output_dir"},{anchor:"transformers.Seq2SeqTrainingArguments.do_train",description:`<strong>do_train</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether to run training or not. This argument is not directly used by <a href="/docs/transformers/pr_16771/en/main_classes/trainer#transformers.Trainer">Trainer</a>, it&#x2019;s intended to be used
by your training/evaluation scripts instead. See the <a href="https://github.com/huggingface/transformers/tree/main/examples" rel="nofollow">example
scripts</a> for more details.`,name:"do_train"},{anchor:"transformers.Seq2SeqTrainingArguments.do_eval",description:`<strong>do_eval</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether to run evaluation on the validation set or not. Will be set to <code>True</code> if <code>evaluation_strategy</code> is
different from <code>&quot;no&quot;</code>. This argument is not directly used by <a href="/docs/transformers/pr_16771/en/main_classes/trainer#transformers.Trainer">Trainer</a>, it&#x2019;s intended to be used by your
training/evaluation scripts instead. See the <a href="https://github.com/huggingface/transformers/tree/main/examples" rel="nofollow">example
scripts</a> for more details.`,name:"do_eval"},{anchor:"transformers.Seq2SeqTrainingArguments.do_predict",description:`<strong>do_predict</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether to run predictions on the test set or not. This argument is not directly used by <a href="/docs/transformers/pr_16771/en/main_classes/trainer#transformers.Trainer">Trainer</a>, it&#x2019;s
intended to be used by your training/evaluation scripts instead. See the <a href="https://github.com/huggingface/transformers/tree/main/examples" rel="nofollow">example
scripts</a> for more details.`,name:"do_predict"},{anchor:"transformers.Seq2SeqTrainingArguments.evaluation_strategy",description:`<strong>evaluation_strategy</strong> (<code>str</code> or <a href="/docs/transformers/pr_16771/en/internal/trainer_utils#transformers.IntervalStrategy">IntervalStrategy</a>, <em>optional</em>, defaults to <code>&quot;no&quot;</code>) &#x2014;
The evaluation strategy to adopt during training. Possible values are:</p>
<ul>
<li><code>&quot;no&quot;</code>: No evaluation is done during training.</li>
<li><code>&quot;steps&quot;</code>: Evaluation is done (and logged) every <code>eval_steps</code>.</li>
<li><code>&quot;epoch&quot;</code>: Evaluation is done at the end of each epoch.</li>
</ul>`,name:"evaluation_strategy"},{anchor:"transformers.Seq2SeqTrainingArguments.prediction_loss_only",description:`<strong>prediction_loss_only</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
When performing evaluation and generating predictions, only returns the loss.`,name:"prediction_loss_only"},{anchor:"transformers.Seq2SeqTrainingArguments.per_device_train_batch_size",description:`<strong>per_device_train_batch_size</strong> (<code>int</code>, <em>optional</em>, defaults to 8) &#x2014;
The batch size per GPU/TPU core/CPU for training.`,name:"per_device_train_batch_size"},{anchor:"transformers.Seq2SeqTrainingArguments.per_device_eval_batch_size",description:`<strong>per_device_eval_batch_size</strong> (<code>int</code>, <em>optional</em>, defaults to 8) &#x2014;
The batch size per GPU/TPU core/CPU for evaluation.`,name:"per_device_eval_batch_size"},{anchor:"transformers.Seq2SeqTrainingArguments.gradient_accumulation_steps",description:`<strong>gradient_accumulation_steps</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
Number of updates steps to accumulate the gradients for, before performing a backward/update pass.</p>
<div class="course-tip course-tip-orange bg-gradient-to-br dark:bg-gradient-to-r before:border-orange-500 dark:before:border-orange-800 from-orange-50 dark:from-gray-900 to-white dark:to-gray-950 border border-orange-50 text-orange-700 dark:text-gray-400">
						
<p>When using gradient accumulation, one step is counted as one step with backward pass. Therefore, logging,
evaluation, save will be conducted every <code>gradient_accumulation_steps * xxx_step</code> training examples.</p>

					</div>`,name:"gradient_accumulation_steps"},{anchor:"transformers.Seq2SeqTrainingArguments.eval_accumulation_steps",description:`<strong>eval_accumulation_steps</strong> (<code>int</code>, <em>optional</em>) &#x2014;
Number of predictions steps to accumulate the output tensors for, before moving the results to the CPU. If
left unset, the whole predictions are accumulated on GPU/TPU before being moved to the CPU (faster but
requires more memory).`,name:"eval_accumulation_steps"},{anchor:"transformers.Seq2SeqTrainingArguments.eval_delay",description:`<strong>eval_delay</strong> (<code>float</code>, <em>optional</em>) &#x2014;
Number of epochs or steps to wait for before the first evaluation can be performed, depending on the
evaluation_strategy.`,name:"eval_delay"},{anchor:"transformers.Seq2SeqTrainingArguments.learning_rate",description:`<strong>learning_rate</strong> (<code>float</code>, <em>optional</em>, defaults to 5e-5) &#x2014;
The initial learning rate for <a href="/docs/transformers/pr_16771/en/main_classes/optimizer_schedules#transformers.AdamW">AdamW</a> optimizer.`,name:"learning_rate"},{anchor:"transformers.Seq2SeqTrainingArguments.weight_decay",description:`<strong>weight_decay</strong> (<code>float</code>, <em>optional</em>, defaults to 0) &#x2014;
The weight decay to apply (if not zero) to all layers except all bias and LayerNorm weights in <a href="/docs/transformers/pr_16771/en/main_classes/optimizer_schedules#transformers.AdamW">AdamW</a>
optimizer.`,name:"weight_decay"},{anchor:"transformers.Seq2SeqTrainingArguments.adam_beta1",description:`<strong>adam_beta1</strong> (<code>float</code>, <em>optional</em>, defaults to 0.9) &#x2014;
The beta1 hyperparameter for the <a href="/docs/transformers/pr_16771/en/main_classes/optimizer_schedules#transformers.AdamW">AdamW</a> optimizer.`,name:"adam_beta1"},{anchor:"transformers.Seq2SeqTrainingArguments.adam_beta2",description:`<strong>adam_beta2</strong> (<code>float</code>, <em>optional</em>, defaults to 0.999) &#x2014;
The beta2 hyperparameter for the <a href="/docs/transformers/pr_16771/en/main_classes/optimizer_schedules#transformers.AdamW">AdamW</a> optimizer.`,name:"adam_beta2"},{anchor:"transformers.Seq2SeqTrainingArguments.adam_epsilon",description:`<strong>adam_epsilon</strong> (<code>float</code>, <em>optional</em>, defaults to 1e-8) &#x2014;
The epsilon hyperparameter for the <a href="/docs/transformers/pr_16771/en/main_classes/optimizer_schedules#transformers.AdamW">AdamW</a> optimizer.`,name:"adam_epsilon"},{anchor:"transformers.Seq2SeqTrainingArguments.max_grad_norm",description:`<strong>max_grad_norm</strong> (<code>float</code>, <em>optional</em>, defaults to 1.0) &#x2014;
Maximum gradient norm (for gradient clipping).`,name:"max_grad_norm"},{anchor:"transformers.Seq2SeqTrainingArguments.num_train_epochs(float,",description:`<strong>num_train_epochs(<code>float</code>,</strong> <em>optional</em>, defaults to 3.0) &#x2014;
Total number of training epochs to perform (if not an integer, will perform the decimal part percents of
the last epoch before stopping training).`,name:"num_train_epochs(float,"},{anchor:"transformers.Seq2SeqTrainingArguments.max_steps",description:`<strong>max_steps</strong> (<code>int</code>, <em>optional</em>, defaults to -1) &#x2014;
If set to a positive number, the total number of training steps to perform. Overrides <code>num_train_epochs</code>.
In case of using a finite iterable dataset the training may stop before reaching the set number of steps
when all data is exhausted`,name:"max_steps"},{anchor:"transformers.Seq2SeqTrainingArguments.lr_scheduler_type",description:`<strong>lr_scheduler_type</strong> (<code>str</code> or <a href="/docs/transformers/pr_16771/en/main_classes/optimizer_schedules#transformers.SchedulerType">SchedulerType</a>, <em>optional</em>, defaults to <code>&quot;linear&quot;</code>) &#x2014;
The scheduler type to use. See the documentation of <a href="/docs/transformers/pr_16771/en/main_classes/optimizer_schedules#transformers.SchedulerType">SchedulerType</a> for all possible values.`,name:"lr_scheduler_type"},{anchor:"transformers.Seq2SeqTrainingArguments.warmup_ratio",description:`<strong>warmup_ratio</strong> (<code>float</code>, <em>optional</em>, defaults to 0.0) &#x2014;
Ratio of total training steps used for a linear warmup from 0 to <code>learning_rate</code>.`,name:"warmup_ratio"},{anchor:"transformers.Seq2SeqTrainingArguments.warmup_steps",description:`<strong>warmup_steps</strong> (<code>int</code>, <em>optional</em>, defaults to 0) &#x2014;
Number of steps used for a linear warmup from 0 to <code>learning_rate</code>. Overrides any effect of <code>warmup_ratio</code>.`,name:"warmup_steps"},{anchor:"transformers.Seq2SeqTrainingArguments.log_level",description:`<strong>log_level</strong> (<code>str</code>, <em>optional</em>, defaults to <code>passive</code>) &#x2014;
Logger log level to use on the main process. Possible choices are the log levels as strings: &#x2018;debug&#x2019;,
&#x2018;info&#x2019;, &#x2018;warning&#x2019;, &#x2018;error&#x2019; and &#x2018;critical&#x2019;, plus a &#x2018;passive&#x2019; level which doesn&#x2019;t set anything and lets the
application set the level.`,name:"log_level"},{anchor:"transformers.Seq2SeqTrainingArguments.log_level_replica",description:`<strong>log_level_replica</strong> (<code>str</code>, <em>optional</em>, defaults to <code>passive</code>) &#x2014;
Logger log level to use on replicas. Same choices as <code>log_level</code>&#x201D;`,name:"log_level_replica"},{anchor:"transformers.Seq2SeqTrainingArguments.log_on_each_node",description:`<strong>log_on_each_node</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
In multinode distributed training, whether to log using <code>log_level</code> once per node, or only on the main
node.`,name:"log_on_each_node"},{anchor:"transformers.Seq2SeqTrainingArguments.logging_dir",description:`<strong>logging_dir</strong> (<code>str</code>, <em>optional</em>) &#x2014;
<a href="https://www.tensorflow.org/tensorboard" rel="nofollow">TensorBoard</a> log directory. Will default to
*output_dir/runs/<strong>CURRENT_DATETIME_HOSTNAME*</strong>.`,name:"logging_dir"},{anchor:"transformers.Seq2SeqTrainingArguments.logging_strategy",description:`<strong>logging_strategy</strong> (<code>str</code> or <a href="/docs/transformers/pr_16771/en/internal/trainer_utils#transformers.IntervalStrategy">IntervalStrategy</a>, <em>optional</em>, defaults to <code>&quot;steps&quot;</code>) &#x2014;
The logging strategy to adopt during training. Possible values are:</p>
<ul>
<li><code>&quot;no&quot;</code>: No logging is done during training.</li>
<li><code>&quot;epoch&quot;</code>: Logging is done at the end of each epoch.</li>
<li><code>&quot;steps&quot;</code>: Logging is done every <code>logging_steps</code>.</li>
</ul>`,name:"logging_strategy"},{anchor:"transformers.Seq2SeqTrainingArguments.logging_first_step",description:`<strong>logging_first_step</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether to log and evaluate the first <code>global_step</code> or not.`,name:"logging_first_step"},{anchor:"transformers.Seq2SeqTrainingArguments.logging_steps",description:`<strong>logging_steps</strong> (<code>int</code>, <em>optional</em>, defaults to 500) &#x2014;
Number of update steps between two logs if <code>logging_strategy=&quot;steps&quot;</code>.`,name:"logging_steps"},{anchor:"transformers.Seq2SeqTrainingArguments.logging_nan_inf_filter",description:`<strong>logging_nan_inf_filter</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether to filter <code>nan</code> and <code>inf</code> losses for logging. If set to <code>True</code> the loss of every step that is <code>nan</code>
or <code>inf</code> is filtered and the average loss of the current logging window is taken instead.</p>
<div class="course-tip  bg-gradient-to-br dark:bg-gradient-to-r before:border-green-500 dark:before:border-green-800 from-green-50 dark:from-gray-900 to-white dark:to-gray-950 border border-green-50 text-green-700 dark:text-gray-400">
						
<p><code>logging_nan_inf_filter</code> only influences the logging of loss values, it does not change the behavior the
gradient is computed or applied to the model.</p>

					</div>`,name:"logging_nan_inf_filter"},{anchor:"transformers.Seq2SeqTrainingArguments.save_strategy",description:`<strong>save_strategy</strong> (<code>str</code> or <a href="/docs/transformers/pr_16771/en/internal/trainer_utils#transformers.IntervalStrategy">IntervalStrategy</a>, <em>optional</em>, defaults to <code>&quot;steps&quot;</code>) &#x2014;
The checkpoint save strategy to adopt during training. Possible values are:</p>
<ul>
<li><code>&quot;no&quot;</code>: No save is done during training.</li>
<li><code>&quot;epoch&quot;</code>: Save is done at the end of each epoch.</li>
<li><code>&quot;steps&quot;</code>: Save is done every <code>save_steps</code>.</li>
</ul>`,name:"save_strategy"},{anchor:"transformers.Seq2SeqTrainingArguments.save_steps",description:`<strong>save_steps</strong> (<code>int</code>, <em>optional</em>, defaults to 500) &#x2014;
Number of updates steps before two checkpoint saves if <code>save_strategy=&quot;steps&quot;</code>.`,name:"save_steps"},{anchor:"transformers.Seq2SeqTrainingArguments.save_total_limit",description:`<strong>save_total_limit</strong> (<code>int</code>, <em>optional</em>) &#x2014;
If a value is passed, will limit the total amount of checkpoints. Deletes the older checkpoints in
<code>output_dir</code>.`,name:"save_total_limit"},{anchor:"transformers.Seq2SeqTrainingArguments.save_on_each_node",description:`<strong>save_on_each_node</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
When doing multi-node distributed training, whether to save models and checkpoints on each node, or only on
the main one.</p>
<p>This should not be activated when the different nodes use the same storage as the files will be saved with
the same names for each node.`,name:"save_on_each_node"},{anchor:"transformers.Seq2SeqTrainingArguments.no_cuda",description:`<strong>no_cuda</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether to not use CUDA even when it is available or not.`,name:"no_cuda"},{anchor:"transformers.Seq2SeqTrainingArguments.seed",description:`<strong>seed</strong> (<code>int</code>, <em>optional</em>, defaults to 42) &#x2014;
Random seed that will be set at the beginning of training. To ensure reproducibility across runs, use the
<code>model_init</code> function to instantiate the model if it has some randomly initialized parameters.`,name:"seed"},{anchor:"transformers.Seq2SeqTrainingArguments.data_seed",description:`<strong>data_seed</strong> (<code>int</code>, <em>optional</em>) &#x2014;
Random seed to be used with data samplers. If not set, random generators for data sampling will use the
same seed as <code>seed</code>. This can be used to ensure reproducibility of data sampling, independent of the model
seed.`,name:"data_seed"},{anchor:"transformers.Seq2SeqTrainingArguments.bf16",description:`<strong>bf16</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether to use bf16 16-bit (mixed) precision training instead of 32-bit training. Requires Ampere or higher
NVIDIA architecture. This is an experimental API and it may change.`,name:"bf16"},{anchor:"transformers.Seq2SeqTrainingArguments.fp16",description:`<strong>fp16</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether to use fp16 16-bit (mixed) precision training instead of 32-bit training.`,name:"fp16"},{anchor:"transformers.Seq2SeqTrainingArguments.fp16_opt_level",description:`<strong>fp16_opt_level</strong> (<code>str</code>, <em>optional</em>, defaults to &#x2018;O1&#x2019;) &#x2014;
For <code>fp16</code> training, Apex AMP optimization level selected in [&#x2018;O0&#x2019;, &#x2018;O1&#x2019;, &#x2018;O2&#x2019;, and &#x2018;O3&#x2019;]. See details on
the <a href="https://nvidia.github.io/apex/amp" rel="nofollow">Apex documentation</a>.`,name:"fp16_opt_level"},{anchor:"transformers.Seq2SeqTrainingArguments.fp16_backend",description:`<strong>fp16_backend</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;auto&quot;</code>) &#x2014;
This argument is deprecated. Use <code>half_precision_backend</code> instead.`,name:"fp16_backend"},{anchor:"transformers.Seq2SeqTrainingArguments.half_precision_backend",description:`<strong>half_precision_backend</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;auto&quot;</code>) &#x2014;
The backend to use for mixed precision training. Must be one of <code>&quot;auto&quot;</code>, <code>&quot;amp&quot;</code> or <code>&quot;apex&quot;</code>. <code>&quot;auto&quot;</code>
will use AMP or APEX depending on the PyTorch version detected, while the other choices will force the
requested backend.`,name:"half_precision_backend"},{anchor:"transformers.Seq2SeqTrainingArguments.bf16_full_eval",description:`<strong>bf16_full_eval</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether to use full bfloat16 evaluation instead of 32-bit. This will be faster and save memory but can harm
metric values. This is an experimental API and it may change.`,name:"bf16_full_eval"},{anchor:"transformers.Seq2SeqTrainingArguments.fp16_full_eval",description:`<strong>fp16_full_eval</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether to use full float16 evaluation instead of 32-bit. This will be faster and save memory but can harm
metric values.`,name:"fp16_full_eval"},{anchor:"transformers.Seq2SeqTrainingArguments.tf32",description:`<strong>tf32</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether to enable the TF32 mode, available in Ampere and newer GPU architectures. The default value depends
on PyTorch&#x2019;s version default of <code>torch.backends.cuda.matmul.allow_tf32</code>. For more details please refer to
the <a href="https://huggingface.co/docs/transformers/performance#tf32" rel="nofollow">TF32</a> documentation. This is an
experimental API and it may change.`,name:"tf32"},{anchor:"transformers.Seq2SeqTrainingArguments.local_rank",description:`<strong>local_rank</strong> (<code>int</code>, <em>optional</em>, defaults to -1) &#x2014;
Rank of the process during distributed training.`,name:"local_rank"},{anchor:"transformers.Seq2SeqTrainingArguments.xpu_backend",description:`<strong>xpu_backend</strong> (<code>str</code>, <em>optional</em>) &#x2014;
The backend to use for xpu distributed training. Must be one of <code>&quot;mpi&quot;</code> or <code>&quot;ccl&quot;</code>.`,name:"xpu_backend"},{anchor:"transformers.Seq2SeqTrainingArguments.tpu_num_cores",description:`<strong>tpu_num_cores</strong> (<code>int</code>, <em>optional</em>) &#x2014;
When training on TPU, the number of TPU cores (automatically passed by launcher script).`,name:"tpu_num_cores"},{anchor:"transformers.Seq2SeqTrainingArguments.dataloader_drop_last",description:`<strong>dataloader_drop_last</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether to drop the last incomplete batch (if the length of the dataset is not divisible by the batch size)
or not.`,name:"dataloader_drop_last"},{anchor:"transformers.Seq2SeqTrainingArguments.eval_steps",description:`<strong>eval_steps</strong> (<code>int</code>, <em>optional</em>) &#x2014;
Number of update steps between two evaluations if <code>evaluation_strategy=&quot;steps&quot;</code>. Will default to the same
value as <code>logging_steps</code> if not set.`,name:"eval_steps"},{anchor:"transformers.Seq2SeqTrainingArguments.dataloader_num_workers",description:`<strong>dataloader_num_workers</strong> (<code>int</code>, <em>optional</em>, defaults to 0) &#x2014;
Number of subprocesses to use for data loading (PyTorch only). 0 means that the data will be loaded in the
main process.`,name:"dataloader_num_workers"},{anchor:"transformers.Seq2SeqTrainingArguments.past_index",description:`<strong>past_index</strong> (<code>int</code>, <em>optional</em>, defaults to -1) &#x2014;
Some models like <a href="../model_doc/transformerxl">TransformerXL</a> or <a href="../model_doc/xlnet">XLNet</a> can make use of
the past hidden states for their predictions. If this argument is set to a positive int, the <code>Trainer</code> will
use the corresponding output (usually index 2) as the past state and feed it to the model at the next
training step under the keyword argument <code>mems</code>.`,name:"past_index"},{anchor:"transformers.Seq2SeqTrainingArguments.run_name",description:`<strong>run_name</strong> (<code>str</code>, <em>optional</em>) &#x2014;
A descriptor for the run. Typically used for <a href="https://www.wandb.com/" rel="nofollow">wandb</a> and
<a href="https://www.mlflow.org/" rel="nofollow">mlflow</a> logging.`,name:"run_name"},{anchor:"transformers.Seq2SeqTrainingArguments.disable_tqdm",description:`<strong>disable_tqdm</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to disable the tqdm progress bars and table of metrics produced by
<code>NotebookTrainingTracker</code> in Jupyter Notebooks. Will default to <code>True</code> if the logging level is
set to warn or lower (default), <code>False</code> otherwise.`,name:"disable_tqdm"},{anchor:"transformers.Seq2SeqTrainingArguments.remove_unused_columns",description:`<strong>remove_unused_columns</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
If using <code>datasets.Dataset</code> datasets, whether or not to automatically remove the columns unused by the
model forward method.</p>
<p>(Note that this behavior is not implemented for <code>TFTrainer</code> yet.)`,name:"remove_unused_columns"},{anchor:"transformers.Seq2SeqTrainingArguments.label_names",description:`<strong>label_names</strong> (<code>List[str]</code>, <em>optional</em>) &#x2014;
The list of keys in your dictionary of inputs that correspond to the labels.</p>
<p>Will eventually default to <code>[&quot;labels&quot;]</code> except if the model used is one of the <code>XxxForQuestionAnswering</code> in
which case it will default to <code>[&quot;start_positions&quot;, &quot;end_positions&quot;]</code>.`,name:"label_names"},{anchor:"transformers.Seq2SeqTrainingArguments.load_best_model_at_end",description:`<strong>load_best_model_at_end</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to load the best model found during training at the end of training.</p>
<div class="course-tip  bg-gradient-to-br dark:bg-gradient-to-r before:border-green-500 dark:before:border-green-800 from-green-50 dark:from-gray-900 to-white dark:to-gray-950 border border-green-50 text-green-700 dark:text-gray-400">
						
<p>When set to <code>True</code>, the parameters <code>save_strategy</code> needs to be the same as <code>eval_strategy</code>, and in the case
it is &#x201C;steps&#x201D;, <code>save_steps</code> must be a round multiple of <code>eval_steps</code>.</p>

					</div>`,name:"load_best_model_at_end"},{anchor:"transformers.Seq2SeqTrainingArguments.metric_for_best_model",description:`<strong>metric_for_best_model</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Use in conjunction with <code>load_best_model_at_end</code> to specify the metric to use to compare two different
models. Must be the name of a metric returned by the evaluation with or without the prefix <code>&quot;eval_&quot;</code>. Will
default to <code>&quot;loss&quot;</code> if unspecified and <code>load_best_model_at_end=True</code> (to use the evaluation loss).</p>
<p>If you set this value, <code>greater_is_better</code> will default to <code>True</code>. Don&#x2019;t forget to set it to <code>False</code> if
your metric is better when lower.`,name:"metric_for_best_model"},{anchor:"transformers.Seq2SeqTrainingArguments.greater_is_better",description:`<strong>greater_is_better</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Use in conjunction with <code>load_best_model_at_end</code> and <code>metric_for_best_model</code> to specify if better models
should have a greater metric or not. Will default to:</p>
<ul>
<li><code>True</code> if <code>metric_for_best_model</code> is set to a value that isn&#x2019;t <code>&quot;loss&quot;</code> or <code>&quot;eval_loss&quot;</code>.</li>
<li><code>False</code> if <code>metric_for_best_model</code> is not set, or set to <code>&quot;loss&quot;</code> or <code>&quot;eval_loss&quot;</code>.</li>
</ul>`,name:"greater_is_better"},{anchor:"transformers.Seq2SeqTrainingArguments.ignore_data_skip",description:`<strong>ignore_data_skip</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
When resuming training, whether or not to skip the epochs and batches to get the data loading at the same
stage as in the previous training. If set to <code>True</code>, the training will begin faster (as that skipping step
can take a long time) but will not yield the same results as the interrupted training would have.`,name:"ignore_data_skip"},{anchor:"transformers.Seq2SeqTrainingArguments.sharded_ddp",description:`<strong>sharded_ddp</strong> (<code>bool</code>, <code>str</code> or list of <code>ShardedDDPOption</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Use Sharded DDP training from <a href="https://github.com/facebookresearch/fairscale" rel="nofollow">FairScale</a> (in distributed
training only). This is an experimental feature.</p>
<p>A list of options along the following:</p>
<ul>
<li><code>&quot;simple&quot;</code>: to use first instance of sharded DDP released by fairscale (<code>ShardedDDP</code>) similar to ZeRO-2.</li>
<li><code>&quot;zero_dp_2&quot;</code>: to use the second instance of sharded DPP released by fairscale (<code>FullyShardedDDP</code>) in
Zero-2 mode (with <code>reshard_after_forward=False</code>).</li>
<li><code>&quot;zero_dp_3&quot;</code>: to use the second instance of sharded DPP released by fairscale (<code>FullyShardedDDP</code>) in
Zero-3 mode (with <code>reshard_after_forward=True</code>).</li>
<li><code>&quot;offload&quot;</code>: to add ZeRO-offload (only compatible with <code>&quot;zero_dp_2&quot;</code> and <code>&quot;zero_dp_3&quot;</code>).</li>
</ul>
<p>If a string is passed, it will be split on space. If a bool is passed, it will be converted to an empty
list for <code>False</code> and <code>[&quot;simple&quot;]</code> for <code>True</code>.`,name:"sharded_ddp"},{anchor:"transformers.Seq2SeqTrainingArguments.deepspeed",description:`<strong>deepspeed</strong> (<code>str</code> or <code>dict</code>, <em>optional</em>) &#x2014;
Use <a href="https://github.com/microsoft/deepspeed" rel="nofollow">Deepspeed</a>. This is an experimental feature and its API may
evolve in the future. The value is either the location of DeepSpeed json config file (e.g.,
<code>ds_config.json</code>) or an already loaded json file as a <code>dict</code>&#x201D;`,name:"deepspeed"},{anchor:"transformers.Seq2SeqTrainingArguments.label_smoothing_factor",description:`<strong>label_smoothing_factor</strong> (<code>float</code>, <em>optional</em>, defaults to 0.0) &#x2014;
The label smoothing factor to use. Zero means no label smoothing, otherwise the underlying onehot-encoded
labels are changed from 0s and 1s to <code>label_smoothing_factor/num_labels</code> and <code>1 - label_smoothing_factor + label_smoothing_factor/num_labels</code> respectively.`,name:"label_smoothing_factor"},{anchor:"transformers.Seq2SeqTrainingArguments.debug",description:`<strong>debug</strong> (<code>str</code> or list of <code>DebugOption</code>, <em>optional</em>, defaults to <code>&quot;&quot;</code>) &#x2014;
Enable one or more debug features. This is an experimental feature.</p>
<p>Possible options are:</p>
<ul>
<li><code>&quot;underflow_overflow&quot;</code>: detects overflow in model&#x2019;s input/outputs and reports the last frames that led to
the event</li>
<li><code>&quot;tpu_metrics_debug&quot;</code>: print debug metrics on TPU</li>
</ul>
<p>The options should be separated by whitespaces.`,name:"debug"},{anchor:"transformers.Seq2SeqTrainingArguments.optim",description:`<strong>optim</strong> (<code>str</code> or <code>training_args.OptimizerNames</code>, <em>optional</em>, defaults to <code>&quot;adamw_hf&quot;</code>) &#x2014;
The optimizer to use: adamw_hf, adamw_torch, adamw_apex_fused, or adafactor.`,name:"optim"},{anchor:"transformers.Seq2SeqTrainingArguments.adafactor",description:`<strong>adafactor</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
This argument is deprecated. Use <code>--optim adafactor</code> instead.`,name:"adafactor"},{anchor:"transformers.Seq2SeqTrainingArguments.group_by_length",description:`<strong>group_by_length</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to group together samples of roughly the same length in the training dataset (to minimize
padding applied and be more efficient). Only useful if applying dynamic padding.`,name:"group_by_length"},{anchor:"transformers.Seq2SeqTrainingArguments.length_column_name",description:`<strong>length_column_name</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;length&quot;</code>) &#x2014;
Column name for precomputed lengths. If the column exists, grouping by length will use these values rather
than computing them on train startup. Ignored unless <code>group_by_length</code> is <code>True</code> and the dataset is an
instance of <code>Dataset</code>.`,name:"length_column_name"},{anchor:"transformers.Seq2SeqTrainingArguments.report_to",description:`<strong>report_to</strong> (<code>str</code> or <code>List[str]</code>, <em>optional</em>, defaults to <code>&quot;all&quot;</code>) &#x2014;
The list of integrations to report the results and logs to. Supported platforms are <code>&quot;azure_ml&quot;</code>,
<code>&quot;comet_ml&quot;</code>, <code>&quot;mlflow&quot;</code>, <code>&quot;tensorboard&quot;</code> and <code>&quot;wandb&quot;</code>. Use <code>&quot;all&quot;</code> to report to all integrations
installed, <code>&quot;none&quot;</code> for no integrations.`,name:"report_to"},{anchor:"transformers.Seq2SeqTrainingArguments.ddp_find_unused_parameters",description:`<strong>ddp_find_unused_parameters</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
When using distributed training, the value of the flag <code>find_unused_parameters</code> passed to
<code>DistributedDataParallel</code>. Will default to <code>False</code> if gradient checkpointing is used, <code>True</code> otherwise.`,name:"ddp_find_unused_parameters"},{anchor:"transformers.Seq2SeqTrainingArguments.ddp_bucket_cap_mb",description:`<strong>ddp_bucket_cap_mb</strong> (<code>int</code>, <em>optional</em>) &#x2014;
When using distributed training, the value of the flag <code>bucket_cap_mb</code> passed to <code>DistributedDataParallel</code>.`,name:"ddp_bucket_cap_mb"},{anchor:"transformers.Seq2SeqTrainingArguments.dataloader_pin_memory",description:`<strong>dataloader_pin_memory</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether you want to pin memory in data loaders or not. Will default to <code>True</code>.`,name:"dataloader_pin_memory"},{anchor:"transformers.Seq2SeqTrainingArguments.skip_memory_metrics",description:`<strong>skip_memory_metrics</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether to skip adding of memory profiler reports to metrics. This is skipped by default because it slows
down the training and evaluation speed.`,name:"skip_memory_metrics"},{anchor:"transformers.Seq2SeqTrainingArguments.push_to_hub",description:`<strong>push_to_hub</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to push the model to the Hub every time the model is saved. If this is activated,
<code>output_dir</code> will begin a git directory synced with the the repo (determined by <code>hub_model_id</code>) and the
content will be pushed each time a save is triggered (depending on your <code>save_strategy</code>). Calling
<a href="/docs/transformers/pr_16771/en/main_classes/trainer#transformers.Trainer.save_model">save_model()</a> will also trigger a push.</p>
<div class="course-tip course-tip-orange bg-gradient-to-br dark:bg-gradient-to-r before:border-orange-500 dark:before:border-orange-800 from-orange-50 dark:from-gray-900 to-white dark:to-gray-950 border border-orange-50 text-orange-700 dark:text-gray-400">
						
<p>If <code>output_dir</code> exists, it needs to be a local clone of the repository to which the <a href="/docs/transformers/pr_16771/en/main_classes/trainer#transformers.Trainer">Trainer</a> will be
pushed.</p>

					</div>`,name:"push_to_hub"},{anchor:"transformers.Seq2SeqTrainingArguments.resume_from_checkpoint",description:`<strong>resume_from_checkpoint</strong> (<code>str</code>, <em>optional</em>) &#x2014;
The path to a folder with a valid checkpoint for your model. This argument is not directly used by
<a href="/docs/transformers/pr_16771/en/main_classes/trainer#transformers.Trainer">Trainer</a>, it&#x2019;s intended to be used by your training/evaluation scripts instead. See the <a href="https://github.com/huggingface/transformers/tree/main/examples" rel="nofollow">example
scripts</a> for more details.`,name:"resume_from_checkpoint"},{anchor:"transformers.Seq2SeqTrainingArguments.hub_model_id",description:`<strong>hub_model_id</strong> (<code>str</code>, <em>optional</em>) &#x2014;
The name of the repository to keep in sync with the local <em>output_dir</em>. It can be a simple model ID in
which case the model will be pushed in your namespace. Otherwise it should be the whole repository name,
for instance <code>&quot;user_name/model&quot;</code>, which allows you to push to an organization you are a member of with
<code>&quot;organization_name/model&quot;</code>. Will default to <code>user_name/output_dir_name</code> with <em>output_dir_name</em> being the
name of <code>output_dir</code>.</p>
<p>Will default to to the name of <code>output_dir</code>.`,name:"hub_model_id"},{anchor:"transformers.Seq2SeqTrainingArguments.hub_strategy",description:`<strong>hub_strategy</strong> (<code>str</code> or <code>HubStrategy</code>, <em>optional</em>, defaults to <code>&quot;every_save&quot;</code>) &#x2014;
Defines the scope of what is pushed to the Hub and when. Possible values are:</p>
<ul>
<li><code>&quot;end&quot;</code>: push the model, its configuration, the tokenizer (if passed along to the <a href="/docs/transformers/pr_16771/en/main_classes/trainer#transformers.Trainer">Trainer</a>) and a
draft of a model card when the <a href="/docs/transformers/pr_16771/en/main_classes/trainer#transformers.Trainer.save_model">save_model()</a> method is called.</li>
<li><code>&quot;every_save&quot;</code>: push the model, its configuration, the tokenizer (if passed along to the <a href="/docs/transformers/pr_16771/en/main_classes/trainer#transformers.Trainer">Trainer</a>) and
a draft of a model card each time there is a model save. The pushes are asynchronous to not block
training, and in case the save are very frequent, a new push is only attempted if the previous one is
finished. A last push is made with the final model at the end of training.</li>
<li><code>&quot;checkpoint&quot;</code>: like <code>&quot;every_save&quot;</code> but the latest checkpoint is also pushed in a subfolder named
last-checkpoint, allowing you to resume training easily with
<code>trainer.train(resume_from_checkpoint=&quot;last-checkpoint&quot;)</code>.</li>
<li><code>&quot;all_checkpoints&quot;</code>: like <code>&quot;checkpoint&quot;</code> but all checkpoints are pushed like they appear in the output
folder (so you will get one checkpoint folder per folder in your final repository)</li>
</ul>`,name:"hub_strategy"},{anchor:"transformers.Seq2SeqTrainingArguments.hub_token",description:`<strong>hub_token</strong> (<code>str</code>, <em>optional</em>) &#x2014;
The token to use to push the model to the Hub. Will default to the token in the cache folder obtained with
<code>huggingface-cli login</code>.`,name:"hub_token"},{anchor:"transformers.Seq2SeqTrainingArguments.hub_private_repo",description:`<strong>hub_private_repo</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If True, the Hub repo will be set to private.`,name:"hub_private_repo"},{anchor:"transformers.Seq2SeqTrainingArguments.gradient_checkpointing",description:`<strong>gradient_checkpointing</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If True, use gradient checkpointing to save memory at the expense of slower backward pass.`,name:"gradient_checkpointing"},{anchor:"transformers.Seq2SeqTrainingArguments.include_inputs_for_metrics",description:`<strong>include_inputs_for_metrics</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not the inputs will be passed to the <code>compute_metrics</code> function. This is intended for metrics
that need inputs, predictions and references for scoring calculation in Metric class.`,name:"include_inputs_for_metrics"},{anchor:"transformers.Seq2SeqTrainingArguments.sortish_sampler",description:`<strong>sortish_sampler</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether to use a <em>sortish sampler</em> or not. Only possible if the underlying datasets are <em>Seq2SeqDataset</em>
for now but will become generally available in the near future.</p>
<p>It sorts the inputs according to lengths in order to minimize the padding size, with a bit of randomness
for the training set.`,name:"sortish_sampler"},{anchor:"transformers.Seq2SeqTrainingArguments.predict_with_generate",description:`<strong>predict_with_generate</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether to use generate to calculate generative metrics (ROUGE, BLEU).`,name:"predict_with_generate"},{anchor:"transformers.Seq2SeqTrainingArguments.generation_max_length",description:`<strong>generation_max_length</strong> (<code>int</code>, <em>optional</em>) &#x2014;
The <code>max_length</code> to use on each evaluation loop when <code>predict_with_generate=True</code>. Will default to the
<code>max_length</code> value of the model configuration.`,name:"generation_max_length"},{anchor:"transformers.Seq2SeqTrainingArguments.generation_num_beams",description:`<strong>generation_num_beams</strong> (<code>int</code>, <em>optional</em>) &#x2014;
The <code>num_beams</code> to use on each evaluation loop when <code>predict_with_generate=True</code>. Will default to the
<code>num_beams</code> value of the model configuration.`,name:"generation_num_beams"}]}}),Cn=new oe({}),Nn=new oe({}),Un=new q({props:{code:`[...]
logger = logging.getLogger(__name__)

# Setup logging
logging.basicConfig(
    format="%(asctime)s - %(levelname)s - %(name)s - %(message)s",
    datefmt="%m/%d/%Y %H:%M:%S",
    handlers=[logging.StreamHandler(sys.stdout)],
)

# set the main code and the modules it uses to the same log-level according to the node
log_level = training_args.get_process_log_level()
logger.setLevel(log_level)
datasets.utils.logging.set_verbosity(log_level)
transformers.utils.logging.set_verbosity(log_level)

trainer = Trainer(...)`,highlighted:`[...]
logger = logging.getLogger(__name__)

<span class="hljs-comment"># Setup logging</span>
logging.basicConfig(
    <span class="hljs-built_in">format</span>=<span class="hljs-string">&quot;%(asctime)s - %(levelname)s - %(name)s - %(message)s&quot;</span>,
    datefmt=<span class="hljs-string">&quot;%m/%d/%Y %H:%M:%S&quot;</span>,
    handlers=[logging.StreamHandler(sys.stdout)],
)

<span class="hljs-comment"># set the main code and the modules it uses to the same log-level according to the node</span>
log_level = training_args.get_process_log_level()
logger.setLevel(log_level)
datasets.utils.logging.set_verbosity(log_level)
transformers.utils.logging.set_verbosity(log_level)

trainer = Trainer(...)`}}),zn=new q({props:{code:"my_app.py ... --log_level warning --log_level_replica error",highlighted:"my_app.py ... --log_level warning --log_level_replica error"}}),Ln=new q({props:{code:"my_app.py ... --log_level warning --log_level_replica error --log_on_each_node 0",highlighted:"my_app.py ... --log_level warning --log_level_replica error --log_on_each_node 0"}}),Fn=new q({props:{code:"my_app.py ... --log_level error --log_level_replica error --log_on_each_node 0",highlighted:"my_app.py ... --log_level error --log_level_replica error --log_on_each_node 0"}}),Rn=new oe({}),jn=new oe({}),Mn=new q({props:{code:"python -m torch.distributed.launch --nproc_per_node=2  trainer-program.py ...",highlighted:"python -m torch.distributed.launch --nproc_per_node=2  trainer-program.py ..."}}),Bn=new q({props:{code:"accelerate launch --num_processes 2 trainer-program.py ...",highlighted:"accelerate launch --num_processes 2 trainer-program.py ..."}}),Yn=new q({props:{code:"deepspeed --num_gpus 2 trainer-program.py ...",highlighted:"deepspeed --num_gpus 2 trainer-program.py ..."}}),Zn=new q({props:{code:"CUDA_VISIBLE_DEVICES=0,2 python -m torch.distributed.launch trainer-program.py ...",highlighted:"CUDA_VISIBLE_DEVICES=0,2 python -m torch.distributed.launch trainer-program.py ..."}}),Jn=new q({props:{code:"CUDA_VISIBLE_DEVICES=2,0 python -m torch.distributed.launch trainer-program.py ...",highlighted:"CUDA_VISIBLE_DEVICES=2,0 python -m torch.distributed.launch trainer-program.py ..."}}),Kn=new q({props:{code:"CUDA_VISIBLE_DEVICES=2,0 python trainer-program.py ...",highlighted:"CUDA_VISIBLE_DEVICES=2,0 python trainer-program.py ..."}}),Qn=new q({props:{code:"CUDA_VISIBLE_DEVICES= python trainer-program.py ...",highlighted:"CUDA_VISIBLE_DEVICES= python trainer-program.py ..."}}),es=new q({props:{code:`export CUDA_VISIBLE_DEVICES=0,2
python -m torch.distributed.launch trainer-program.py ...`,highlighted:`<span class="hljs-built_in">export</span> CUDA_VISIBLE_DEVICES=0,2
python -m torch.distributed.launch trainer-program.py ...`}}),os=new q({props:{code:"export CUDA_DEVICE_ORDER=PCI_BUS_ID",highlighted:'<span class="hljs-built_in">export</span> CUDA_DEVICE_ORDER=PCI_BUS_ID'}}),as=new q({props:{code:"export CUDA_DEVICE_ORDER=FASTEST_FIRST",highlighted:'<span class="hljs-built_in">export</span> CUDA_DEVICE_ORDER=FASTEST_FIRST'}}),ns=new q({props:{code:"export CUDA_VISIBLE_DEVICES=1,0",highlighted:'<span class="hljs-built_in">export</span> CUDA_VISIBLE_DEVICES=1,0'}}),ss=new oe({}),cs=new oe({}),hs=new q({props:{code:`pip install fairscale
pip install deepspeed`,highlighted:`pip install fairscale
pip install deepspeed`}}),us=new oe({}),fs=new q({props:{code:"which nvcc",highlighted:'<span class="hljs-built_in">which</span> nvcc'}}),_s=new oe({}),vs=new q({props:{code:`/usr/local/cuda-10.2
/usr/local/cuda-11.0`,highlighted:`/usr/local/cuda-10.2
/usr/local/cuda-11.0`}}),bs=new q({props:{code:`echo $PATH
echo $LD_LIBRARY_PATH`,highlighted:`<span class="hljs-built_in">echo</span> <span class="hljs-variable">$PATH</span>
<span class="hljs-built_in">echo</span> <span class="hljs-variable">$LD_LIBRARY_PATH</span>`}}),ys=new q({props:{code:`export PATH=/usr/local/cuda-10.2/bin:$PATH
export LD_LIBRARY_PATH=/usr/local/cuda-10.2/lib64:$LD_LIBRARY_PATH`,highlighted:`<span class="hljs-built_in">export</span> PATH=/usr/local/cuda-10.2/bin:<span class="hljs-variable">$PATH</span>
<span class="hljs-built_in">export</span> LD_LIBRARY_PATH=/usr/local/cuda-10.2/lib64:<span class="hljs-variable">$LD_LIBRARY_PATH</span>`}}),ws=new oe({}),Ts=new q({props:{code:`sudo ln -s /usr/bin/gcc-7  /usr/local/cuda-10.2/bin/gcc
sudo ln -s /usr/bin/g++-7  /usr/local/cuda-10.2/bin/g++`,highlighted:`sudo <span class="hljs-built_in">ln</span> -s /usr/bin/gcc-7  /usr/local/cuda-10.2/bin/gcc
sudo <span class="hljs-built_in">ln</span> -s /usr/bin/g++-7  /usr/local/cuda-10.2/bin/g++`}}),Es=new oe({}),As=new q({props:{code:"pip install fairscale",highlighted:"pip install fairscale"}}),Ds=new q({props:{code:"pip install transformers[fairscale]",highlighted:"pip install transformers[fairscale]"}}),Ps=new q({props:{code:"pip install fairscale --no-build-isolation .",highlighted:"pip install fairscale --no-build-isolation ."}}),Is=new q({props:{code:`git clone https://github.com/facebookresearch/fairscale/
cd fairscale
rm -r dist build
python setup.py bdist_wheel
pip uninstall -y fairscale
pip install dist/fairscale-*.whl`,highlighted:`git <span class="hljs-built_in">clone</span> https://github.com/facebookresearch/fairscale/
<span class="hljs-built_in">cd</span> fairscale
<span class="hljs-built_in">rm</span> -r dist build
python setup.py bdist_wheel
pip uninstall -y fairscale
pip install dist/fairscale-*.whl`}}),Cs=new q({props:{code:`pip uninstall -y fairscale; pip install fairscale --pre \\
-f https://download.pytorch.org/whl/nightly/cu110/torch_nightly \\
--no-cache --no-build-isolation`,highlighted:`pip uninstall -y fairscale; pip install fairscale --pre \\
-f https://download.pytorch.org/whl/nightly/cu110/torch_nightly \\
--no-cache --no-build-isolation`}}),Ns=new q({props:{code:`pip install -v --disable-pip-version-check . \\
-f https://download.pytorch.org/whl/nightly/cu110/torch_nightly --pre`,highlighted:`pip install -v --disable-pip-version-check . \\
-f https://download.pytorch.org/whl/nightly/cu110/torch_nightly --pre`}}),Ls=new q({props:{code:`python -m torch.distributed.launch --nproc_per_node=2 examples/pytorch/translation/run_translation.py \\
--model_name_or_path t5-small --per_device_train_batch_size 1   \\
--output_dir output_dir --overwrite_output_dir \\
--do_train --max_train_samples 500 --num_train_epochs 1 \\
--dataset_name wmt16 --dataset_config "ro-en" \\
--source_lang en --target_lang ro \\
--fp16 --sharded_ddp simple`,highlighted:`python -m torch.distributed.launch --nproc_per_node=2 examples/pytorch/translation/run_translation.py \\
--model_name_or_path t5-small --per_device_train_batch_size 1   \\
--output_dir output_dir --overwrite_output_dir \\
--do_train --max_train_samples 500 --num_train_epochs 1 \\
--dataset_name wmt16 --dataset_config <span class="hljs-string">&quot;ro-en&quot;</span> \\
--source_lang en --target_lang ro \\
--fp16 --sharded_ddp simple`}}),js=new q({props:{code:`python -m torch.distributed.launch --nproc_per_node=2 examples/pytorch/translation/run_translation.py \\
--model_name_or_path t5-small --per_device_train_batch_size 1   \\
--output_dir output_dir --overwrite_output_dir \\
--do_train --max_train_samples 500 --num_train_epochs 1 \\
--dataset_name wmt16 --dataset_config "ro-en" \\
--source_lang en --target_lang ro \\
--fp16 --sharded_ddp zero_dp_2`,highlighted:`python -m torch.distributed.launch --nproc_per_node=2 examples/pytorch/translation/run_translation.py \\
--model_name_or_path t5-small --per_device_train_batch_size 1   \\
--output_dir output_dir --overwrite_output_dir \\
--do_train --max_train_samples 500 --num_train_epochs 1 \\
--dataset_name wmt16 --dataset_config <span class="hljs-string">&quot;ro-en&quot;</span> \\
--source_lang en --target_lang ro \\
--fp16 --sharded_ddp zero_dp_2`}}),{c(){E=n("meta"),z=l(),x=n("h1"),P=n("a"),me=n("span"),h(L.$$.fragment),F=l(),G=n("span"),pe=r("Trainer"),K=l(),R=n("p"),re=r("The "),ae=n("a"),Q=r("Trainer"),ne=r(" class provides an API for feature-complete training in PyTorch for most standard use cases. It\u2019s used in most of the "),V=n("a"),Ge=r("example scripts"),he=r("."),C=l(),S=n("p"),et=r("Before instantiating your "),ee=n("a"),tt=r("Trainer"),ot=r(", create a "),ue=n("a"),ta=r("TrainingArguments"),oa=r(" to access all the points of customization during training."),Me=l(),Ee=n("p"),ra=r("The API supports distributed training on multiple GPUs/TPUs, mixed precision through "),fe=n("a"),aa=r("NVIDIA Apex"),na=r(" and Native AMP for PyTorch."),B=l(),M=n("p"),Ys=r("The "),ge=n("a"),Io=r("Trainer"),Zs=r(" contains the basic training loop which supports the above features. To inject custom behavior you can subclass them and override the following methods:"),Vt=l(),D=n("ul"),H=n("li"),Oo=n("strong"),Js=r("get_train_dataloader"),Xs=r(" \u2014 Creates the training DataLoader."),Ks=l(),Qs=n("li"),tc=n("strong"),qb=r("get_eval_dataloader"),Sb=r(" \u2014 Creates the evaluation DataLoader."),Pb=l(),ei=n("li"),oc=n("strong"),Ib=r("get_test_dataloader"),Ob=r(" \u2014 Creates the test DataLoader."),Cb=l(),ti=n("li"),rc=n("strong"),Nb=r("log"),Ub=r(" \u2014 Logs information on the various objects watching training."),zb=l(),rt=n("li"),ac=n("strong"),Lb=r("create_optimizer_and_scheduler"),Fb=r(` \u2014 Sets up the optimizer and learning rate scheduler if they were not passed at
init. Note, that you can also subclass or override the `),nc=n("code"),Rb=r("create_optimizer"),Wb=r(" and "),sc=n("code"),jb=r("create_scheduler"),Gb=r(` methods
separately.`),Mb=l(),oi=n("li"),ic=n("strong"),Hb=r("create_optimizer"),Vb=r(" \u2014 Sets up the optimizer if it wasn\u2019t passed at init."),Bb=l(),ri=n("li"),lc=n("strong"),Yb=r("create_scheduler"),Zb=r(" \u2014 Sets up the learning rate scheduler if it wasn\u2019t passed at init."),Jb=l(),ai=n("li"),dc=n("strong"),Xb=r("compute_loss"),Kb=r(" - Computes the loss on a batch of training inputs."),Qb=l(),ni=n("li"),cc=n("strong"),ey=r("training_step"),ty=r(" \u2014 Performs a training step."),oy=l(),si=n("li"),mc=n("strong"),ry=r("prediction_step"),ay=r(" \u2014 Performs an evaluation/test step."),ny=l(),ii=n("li"),pc=n("strong"),sy=r("evaluate"),iy=r(" \u2014 Runs an evaluation loop and returns metrics."),ly=l(),li=n("li"),hc=n("strong"),dy=r("predict"),cy=r(" \u2014 Returns predictions (with metrics if labels are available) on a test set."),ig=l(),h(Co.$$.fragment),lg=l(),No=n("p"),my=r("Here is an example of how to customize "),di=n("a"),py=r("Trainer"),hy=r(" to use a weighted loss (useful when you have an unbalanced training set):"),dg=l(),h(sa.$$.fragment),cg=l(),at=n("p"),uy=r("Another way to customize the training loop behavior for the PyTorch "),ci=n("a"),fy=r("Trainer"),gy=r(" is to use "),mi=n("a"),_y=r("callbacks"),vy=r(" that can inspect the training loop state (for progress reporting, logging on TensorBoard or other ML platforms\u2026) and take decisions (like early stopping)."),mg=l(),Bt=n("h2"),Uo=n("a"),uc=n("span"),h(ia.$$.fragment),by=l(),fc=n("span"),yy=r("Trainer"),pg=l(),b=n("div"),h(la.$$.fragment),wy=l(),gc=n("p"),Ty=r("Trainer is a simple but feature-complete training and eval loop for PyTorch, optimized for \u{1F917} Transformers."),Ey=l(),_c=n("p"),$y=r("Important attributes:"),ky=l(),_e=n("ul"),zo=n("li"),vc=n("strong"),xy=r("model"),Ay=r(" \u2014 Always points to the core model. If using a transformers model, it will be a "),pi=n("a"),Dy=r("PreTrainedModel"),qy=r(`
subclass.`),Sy=l(),Y=n("li"),bc=n("strong"),Py=r("model_wrapped"),Iy=r(` \u2014 Always points to the most external model in case one or more other modules wrap the
original model. This is the model that should be used for the forward pass. For example, under `),yc=n("code"),Oy=r("DeepSpeed"),Cy=r(`,
the inner model is wrapped in `),wc=n("code"),Ny=r("DeepSpeed"),Uy=r(" and then again in "),Tc=n("code"),zy=r("torch.nn.DistributedDataParallel"),Ly=r(`. If the inner
model hasn\u2019t been wrapped, then `),Ec=n("code"),Fy=r("self.model_wrapped"),Ry=r(" is the same as "),$c=n("code"),Wy=r("self.model"),jy=r("."),Gy=l(),hi=n("li"),kc=n("strong"),My=r("is_model_parallel"),Hy=r(` \u2014 Whether or not a model has been switched to a model parallel mode (different from
data parallelism, this means some of the model layers are split on different GPUs).`),Vy=l(),$e=n("li"),xc=n("strong"),By=r("place_model_on_device"),Yy=r(` \u2014 Whether or not to automatically place the model on the device - it will be set
to `),Ac=n("code"),Zy=r("False"),Jy=r(` if model parallel or deepspeed is used, or if the default
`),Dc=n("code"),Xy=r("TrainingArguments.place_model_on_device"),Ky=r(" is overridden to return "),qc=n("code"),Qy=r("False"),e2=r(" ."),t2=l(),ke=n("li"),Sc=n("strong"),o2=r("is_in_train"),r2=r(" \u2014 Whether or not a model is currently running "),Pc=n("code"),a2=r("train"),n2=r(" (e.g. when "),Ic=n("code"),s2=r("evaluate"),i2=r(` is called while
in `),Oc=n("code"),l2=r("train"),d2=r(")"),c2=l(),Lo=n("div"),h(da.$$.fragment),m2=l(),ca=n("p"),p2=r("Add a callback to the current list of "),Cc=n("code"),h2=r("TrainerCallback"),u2=r("."),f2=l(),Fo=n("div"),h(ma.$$.fragment),g2=l(),pa=n("p"),_2=r("A helper wrapper that creates an appropriate context manager for "),Nc=n("code"),v2=r("autocast"),b2=r(` while feeding it the desired
arguments, depending on the situation.`),y2=l(),nt=n("div"),h(ha.$$.fragment),w2=l(),Uc=n("p"),T2=r("How the loss is computed by Trainer. By default, all models return the loss in the first element."),E2=l(),zc=n("p"),$2=r("Subclass and override for custom behavior."),k2=l(),st=n("div"),h(ua.$$.fragment),x2=l(),Lc=n("p"),A2=r("Setup the optimizer."),D2=l(),fa=n("p"),q2=r(`We provide a reasonable default that works well. If you want to use something else, you can pass a tuple in the
Trainer\u2019s init through `),Fc=n("code"),S2=r("optimizers"),P2=r(", or subclass and override this method in a subclass."),I2=l(),it=n("div"),h(ga.$$.fragment),O2=l(),Rc=n("p"),C2=r("Setup the optimizer and the learning rate scheduler."),N2=l(),He=n("p"),U2=r(`We provide a reasonable default that works well. If you want to use something else, you can pass a tuple in the
Trainer\u2019s init through `),Wc=n("code"),z2=r("optimizers"),L2=r(", or subclass and override this method (or "),jc=n("code"),F2=r("create_optimizer"),R2=r(` and/or
`),Gc=n("code"),W2=r("create_scheduler"),j2=r(") in a subclass."),G2=l(),Ro=n("div"),h(_a.$$.fragment),M2=l(),Mc=n("p"),H2=r(`Setup the scheduler. The optimizer of the trainer must have been set up either before this method is called or
passed as an argument.`),V2=l(),xe=n("div"),h(va.$$.fragment),B2=l(),Hc=n("p"),Y2=r("Run evaluation and returns metrics."),Z2=l(),ba=n("p"),J2=r(`The calling script will be responsible for providing a method to compute metrics, as they are task-dependent
(pass it to the init `),Vc=n("code"),X2=r("compute_metrics"),K2=r(" argument)."),Q2=l(),Bc=n("p"),ew=r("You can also subclass and override this method to inject custom behavior."),tw=l(),lt=n("div"),h(ya.$$.fragment),ow=l(),Yt=n("p"),rw=r("Prediction/evaluation loop, shared by "),Yc=n("code"),aw=r("Trainer.evaluate()"),nw=r(" and "),Zc=n("code"),sw=r("Trainer.predict()"),iw=r("."),lw=l(),Jc=n("p"),dw=r("Works both with or without labels."),cw=l(),Wo=n("div"),h(wa.$$.fragment),mw=l(),Ta=n("p"),pw=r("For models that inherit from "),ui=n("a"),hw=r("PreTrainedModel"),uw=r(`, uses that method to compute the number of floating point
operations for every backward + forward pass. If using another model, either implement such a method in the
model or subclass and override this method.`),fw=l(),dt=n("div"),h(Ea.$$.fragment),gw=l(),$a=n("p"),_w=r("Returns the evaluation "),Xc=n("code"),vw=r("DataLoader"),bw=r("."),yw=l(),Kc=n("p"),ww=r("Subclass and override this method if you want to inject some custom behavior."),Tw=l(),jo=n("div"),h(ka.$$.fragment),Ew=l(),Qc=n("p"),$w=r("Returns the optimizer class and optimizer parameters based on the training arguments."),kw=l(),ct=n("div"),h(xa.$$.fragment),xw=l(),Aa=n("p"),Aw=r("Returns the test "),em=n("code"),Dw=r("DataLoader"),qw=r("."),Sw=l(),tm=n("p"),Pw=r("Subclass and override this method if you want to inject some custom behavior."),Iw=l(),Ae=n("div"),h(Da.$$.fragment),Ow=l(),qa=n("p"),Cw=r("Returns the training "),om=n("code"),Nw=r("DataLoader"),Uw=r("."),zw=l(),Zt=n("p"),Lw=r("Will use no sampler if "),rm=n("code"),Fw=r("train_dataset"),Rw=r(" does not implement "),am=n("code"),Ww=r("__len__"),jw=r(`, a random sampler (adapted to distributed
training if necessary) otherwise.`),Gw=l(),nm=n("p"),Mw=r("Subclass and override this method if you want to inject some custom behavior."),Hw=l(),mt=n("div"),h(Sa.$$.fragment),Vw=l(),ve=n("p"),Bw=r("Launch an hyperparameter search using "),sm=n("code"),Yw=r("optuna"),Zw=r(" or "),im=n("code"),Jw=r("Ray Tune"),Xw=r(" or "),lm=n("code"),Kw=r("SigOpt"),Qw=r(`. The optimized quantity is determined
by `),dm=n("code"),e0=r("compute_objective"),t0=r(`, which defaults to a function returning the evaluation loss when no metric is provided,
the sum of all metrics otherwise.`),o0=l(),h(Go.$$.fragment),r0=l(),Mo=n("div"),h(Pa.$$.fragment),a0=l(),Ia=n("p"),n0=r("Initializes a git repo in "),cm=n("code"),s0=r("self.args.hub_model_id"),i0=r("."),l0=l(),Ho=n("div"),h(Oa.$$.fragment),d0=l(),mm=n("p"),c0=r(`Whether or not this process is the local (e.g., on one machine if training in a distributed fashion on several
machines) main process.`),m0=l(),Vo=n("div"),h(Ca.$$.fragment),p0=l(),Na=n("p"),h0=r(`Whether or not this process is the global main process (when training in a distributed fashion on several
machines, this is only going to be `),pm=n("code"),u0=r("True"),f0=r(" for one process)."),g0=l(),pt=n("div"),h(Ua.$$.fragment),_0=l(),za=n("p"),v0=r("Log "),hm=n("code"),b0=r("logs"),y0=r(" on the various objects watching training."),w0=l(),um=n("p"),T0=r("Subclass and override this method to inject custom behavior."),E0=l(),k=n("div"),h(La.$$.fragment),$0=l(),fm=n("p"),k0=r("Log metrics in a specially formatted way"),x0=l(),gm=n("p"),A0=r("Under distributed environment this is done only for a process with rank 0."),D0=l(),_m=n("p"),q0=r("Notes on memory reports:"),S0=l(),Jt=n("p"),P0=r("In order to get memory usage report you need to install "),vm=n("code"),I0=r("psutil"),O0=r(". You can do that with "),bm=n("code"),C0=r("pip install psutil"),N0=r("."),U0=l(),ym=n("p"),z0=r("Now when this method is run, you will see a report that will include: :"),L0=l(),h(Fa.$$.fragment),F0=l(),wm=n("p"),Tm=n("strong"),R0=r("Understanding the reports:"),W0=l(),Ve=n("ul"),be=n("li"),j0=r("the first segment, e.g., "),Em=n("code"),G0=r("train__"),M0=r(", tells you which stage the metrics are for. Reports starting with "),$m=n("code"),H0=r("init_"),V0=r(`
will be added to the first stage that gets run. So that if only evaluation is run, the memory usage for the
`),km=n("code"),B0=r("__init__"),Y0=r(" will be reported along with the "),xm=n("code"),Z0=r("eval_"),J0=r(" metrics."),X0=l(),Xt=n("li"),K0=r("the third segment, is either "),Am=n("code"),Q0=r("cpu"),eT=r(" or "),Dm=n("code"),tT=r("gpu"),oT=r(`, tells you whether it\u2019s the general RAM or the gpu0 memory
metric.`),rT=l(),fi=n("li"),qm=n("code"),aT=r("*_alloc_delta"),nT=r(` - is the difference in the used/allocated memory counter between the end and the start of the
stage - it can be negative if a function released more memory than it allocated.`),sT=l(),ht=n("li"),Sm=n("code"),iT=r("*_peaked_delta"),lT=r(` - is any extra memory that was consumed and then freed - relative to the current allocated
memory counter - it is never negative. When you look at the metrics of any stage you add up `),Pm=n("code"),dT=r("alloc_delta"),cT=r(` +
`),Im=n("code"),mT=r("peaked_delta"),pT=r(" and you know how much memory was needed to complete that stage."),hT=l(),Om=n("p"),uT=r(`The reporting happens only for process of rank 0 and gpu 0 (if there is a gpu). Typically this is enough since the
main process does the bulk of work, but it could be not quite so if model parallel is used and then other GPUs may
use a different amount of gpu memory. This is also not the same under DataParallel where gpu0 may require much more
memory than the rest since it stores the gradient and optimizer states for all participating GPUS. Perhaps in the
future these reports will evolve to measure those too.`),fT=l(),Cm=n("p"),gT=r(`The CPU RAM metric measures RSS (Resident Set Size) includes both the memory which is unique to the process and the
memory shared with other processes. It is important to note that it does not include swapped out memory, so the
reports could be imprecise.`),_T=l(),Ra=n("p"),vT=r(`The CPU peak memory is measured using a sampling thread. Due to python\u2019s GIL it may miss some of the peak memory if
that thread didn\u2019t get a chance to run when the highest memory was used. Therefore this report can be less than
reality. Using `),Nm=n("code"),bT=r("tracemalloc"),yT=r(` would have reported the exact peak memory, but it doesn\u2019t report memory allocations
outside of python. So if some C++ CUDA extension allocated its own memory it won\u2019t be reported. And therefore it
was dropped in favor of the memory sampling approach, which reads the current process memory usage.`),wT=l(),Be=n("p"),TT=r("The GPU allocated and peak memory reporting is done with "),Um=n("code"),ET=r("torch.cuda.memory_allocated()"),$T=r(` and
`),zm=n("code"),kT=r("torch.cuda.max_memory_allocated()"),xT=r(`. This metric reports only \u201Cdeltas\u201D for pytorch-specific allocations, as
`),Lm=n("code"),AT=r("torch.cuda"),DT=r(` memory management system doesn\u2019t track any memory allocated outside of pytorch. For example, the very
first cuda call typically loads CUDA kernels, which may take from 0.5 to 2GB of GPU memory.`),qT=l(),te=n("p"),ST=r("Note that this tracker doesn\u2019t account for memory allocations outside of "),gi=n("a"),PT=r("Trainer"),IT=r("\u2019s "),Fm=n("code"),OT=r("__init__"),CT=r(", "),Rm=n("code"),NT=r("train"),UT=r(`,
`),Wm=n("code"),zT=r("evaluate"),LT=r(" and "),jm=n("code"),FT=r("predict"),RT=r(" calls."),WT=l(),I=n("p"),jT=r("Because "),Gm=n("code"),GT=r("evaluation"),MT=r(" calls may happen during "),Mm=n("code"),HT=r("train"),VT=r(`, we can\u2019t handle nested invocations because
`),Hm=n("code"),BT=r("torch.cuda.max_memory_allocated"),YT=r(" is a single counter, so if it gets reset by a nested eval call, "),Vm=n("code"),ZT=r("train"),JT=r(`\u2019s tracker
will report incorrect info. If this `),Wa=n("a"),XT=r("pytorch issue"),KT=r(` gets resolved
it will be possible to change this class to be re-entrant. Until then we will only track the outer level of
`),Bm=n("code"),QT=r("train"),eE=r(", "),Ym=n("code"),tE=r("evaluate"),oE=r(" and "),Zm=n("code"),rE=r("predict"),aE=r(" methods. Which means that if "),Jm=n("code"),nE=r("eval"),sE=r(" is called during "),Xm=n("code"),iE=r("train"),lE=r(`, it\u2019s the latter
that will account for its memory usage and that of the former.`),dE=l(),ye=n("p"),cE=r("This also means that if any other tool that is used along the "),_i=n("a"),mE=r("Trainer"),pE=r(` calls
`),Km=n("code"),hE=r("torch.cuda.reset_peak_memory_stats"),uE=r(", the gpu peak memory stats could be invalid. And the "),vi=n("a"),fE=r("Trainer"),gE=r(` will disrupt
the normal behavior of any such tools that rely on calling `),Qm=n("code"),_E=r("torch.cuda.reset_peak_memory_stats"),vE=r(" themselves."),bE=l(),ep=n("p"),yE=r("For best performance you may want to consider turning the memory profiling off for production runs."),wE=l(),Bo=n("div"),h(ja.$$.fragment),TE=l(),tp=n("p"),EE=r("Reformat Trainer metrics values to a human-readable format"),$E=l(),Yo=n("div"),h(Ga.$$.fragment),kE=l(),Ma=n("p"),xE=r("Helper to get number of samples in a "),op=n("code"),AE=r("DataLoader"),DE=r(` by accessing its dataset. When
dataloader.dataset does not exist or has no length, estimates as best it can`),qE=l(),ut=n("div"),h(Ha.$$.fragment),SE=l(),Va=n("p"),PE=r("Remove a callback from the current list of "),rp=n("code"),IE=r("TrainerCallback"),OE=r(" and returns it."),CE=l(),Ba=n("p"),NE=r("If the callback is not found, returns "),ap=n("code"),UE=r("None"),zE=r(" (and no error is raised)."),LE=l(),Z=n("div"),h(Ya.$$.fragment),FE=l(),np=n("p"),RE=r("Run prediction and returns predictions and potential metrics."),WE=l(),Za=n("p"),jE=r(`Depending on the dataset and your use case, your test dataset may contain labels. In that case, this method
will also return metrics, like in `),sp=n("code"),GE=r("evaluate()"),ME=r("."),HE=l(),h(Zo.$$.fragment),VE=l(),Ja=n("p"),BE=r("Returns: "),ip=n("em"),YE=r("NamedTuple"),ZE=r(" A namedtuple with the following keys:"),JE=l(),Kt=n("ul"),Qt=n("li"),XE=r("predictions ("),lp=n("code"),KE=r("np.ndarray"),QE=r("): The predictions on "),dp=n("code"),e4=r("test_dataset"),t4=r("."),o4=l(),eo=n("li"),r4=r("label_ids ("),cp=n("code"),a4=r("np.ndarray"),n4=r(", "),mp=n("em"),s4=r("optional"),i4=r("): The labels (if the dataset contained some)."),l4=l(),to=n("li"),d4=r("metrics ("),pp=n("code"),c4=r("Dict[str, float]"),m4=r(", "),hp=n("em"),p4=r("optional"),h4=r(`): The potential dictionary of metrics (if the dataset contained
labels).`),u4=l(),ft=n("div"),h(Xa.$$.fragment),f4=l(),oo=n("p"),g4=r("Prediction/evaluation loop, shared by "),up=n("code"),_4=r("Trainer.evaluate()"),v4=r(" and "),fp=n("code"),b4=r("Trainer.predict()"),y4=r("."),w4=l(),gp=n("p"),T4=r("Works both with or without labels."),E4=l(),gt=n("div"),h(Ka.$$.fragment),$4=l(),ro=n("p"),k4=r("Perform an evaluation step on "),_p=n("code"),x4=r("model"),A4=r(" using "),vp=n("code"),D4=r("inputs"),q4=r("."),S4=l(),bp=n("p"),P4=r("Subclass and override to inject custom behavior."),I4=l(),Jo=n("div"),h(Qa.$$.fragment),O4=l(),Ye=n("p"),C4=r("Upload "),yp=n("em"),N4=r("self.model"),U4=r(" and "),wp=n("em"),z4=r("self.tokenizer"),L4=r(" to the \u{1F917} model hub on the repo "),Tp=n("em"),F4=r("self.args.hub_model_id"),R4=r("."),W4=l(),Xo=n("div"),h(en.$$.fragment),j4=l(),tn=n("p"),G4=r("Remove a callback from the current list of "),Ep=n("code"),M4=r("TrainerCallback"),H4=r("."),V4=l(),De=n("div"),h(on.$$.fragment),B4=l(),rn=n("p"),Y4=r("Save metrics into a json file for that split, e.g. "),$p=n("code"),Z4=r("train_results.json"),J4=r("."),X4=l(),kp=n("p"),K4=r("Under distributed environment this is done only for a process with rank 0."),Q4=l(),an=n("p"),e7=r("To understand the metrics please read the docstring of "),bi=n("a"),t7=r("log_metrics()"),o7=r(`. The only difference is that raw
unformatted numbers are saved in the current method.`),r7=l(),_t=n("div"),h(nn.$$.fragment),a7=l(),sn=n("p"),n7=r("Will save the model, so you can reload it using "),xp=n("code"),s7=r("from_pretrained()"),i7=r("."),l7=l(),Ap=n("p"),d7=r("Will only save from the main process."),c7=l(),vt=n("div"),h(ln.$$.fragment),m7=l(),Dp=n("p"),p7=r("Saves the Trainer state, since Trainer.save_model saves only the tokenizer with the model"),h7=l(),qp=n("p"),u7=r("Under distributed environment this is done only for a process with rank 0."),f7=l(),Ko=n("div"),h(dn.$$.fragment),g7=l(),Sp=n("p"),_7=r("Main training entry point."),v7=l(),bt=n("div"),h(cn.$$.fragment),b7=l(),Pp=n("p"),y7=r("Perform a training step on a batch of inputs."),w7=l(),Ip=n("p"),T7=r("Subclass and override to inject custom behavior."),hg=l(),ao=n("h2"),Qo=n("a"),Op=n("span"),h(mn.$$.fragment),E7=l(),Cp=n("span"),$7=r("Seq2SeqTrainer"),ug=l(),Ze=n("div"),h(pn.$$.fragment),k7=l(),qe=n("div"),h(hn.$$.fragment),x7=l(),Np=n("p"),A7=r("Run evaluation and returns metrics."),D7=l(),un=n("p"),q7=r(`The calling script will be responsible for providing a method to compute metrics, as they are task-dependent
(pass it to the init `),Up=n("code"),S7=r("compute_metrics"),P7=r(" argument)."),I7=l(),zp=n("p"),O7=r("You can also subclass and override this method to inject custom behavior."),C7=l(),J=n("div"),h(fn.$$.fragment),N7=l(),Lp=n("p"),U7=r("Run prediction and returns predictions and potential metrics."),z7=l(),gn=n("p"),L7=r(`Depending on the dataset and your use case, your test dataset may contain labels. In that case, this method
will also return metrics, like in `),Fp=n("code"),F7=r("evaluate()"),R7=r("."),W7=l(),h(er.$$.fragment),j7=l(),_n=n("p"),G7=r("Returns: "),Rp=n("em"),M7=r("NamedTuple"),H7=r(" A namedtuple with the following keys:"),V7=l(),no=n("ul"),so=n("li"),B7=r("predictions ("),Wp=n("code"),Y7=r("np.ndarray"),Z7=r("): The predictions on "),jp=n("code"),J7=r("test_dataset"),X7=r("."),K7=l(),io=n("li"),Q7=r("label_ids ("),Gp=n("code"),e$=r("np.ndarray"),t$=r(", "),Mp=n("em"),o$=r("optional"),r$=r("): The labels (if the dataset contained some)."),a$=l(),lo=n("li"),n$=r("metrics ("),Hp=n("code"),s$=r("Dict[str, float]"),i$=r(", "),Vp=n("em"),l$=r("optional"),d$=r(`): The potential dictionary of metrics (if the dataset contained
labels).`),fg=l(),co=n("h2"),tr=n("a"),Bp=n("span"),h(vn.$$.fragment),c$=l(),Yp=n("span"),m$=r("TrainingArguments"),gg=l(),N=n("div"),h(bn.$$.fragment),p$=l(),yn=n("p"),h$=r("TrainingArguments is the subset of the arguments we use in our example scripts "),Zp=n("strong"),u$=r(`which relate to the training loop
itself`),f$=r("."),g$=l(),mo=n("p"),_$=r("Using "),yi=n("a"),v$=r("HfArgumentParser"),b$=r(` we can turn this class into
`),wn=n("a"),y$=r("argparse"),w$=r(` arguments that can be specified on the
command line.`),T$=l(),se=n("div"),h(Tn.$$.fragment),E$=l(),Jp=n("p"),$$=r(`Returns the log level to be used depending on whether this process is the main process of node 0, main process
of node non-0, or a non-main process.`),k$=l(),po=n("p"),x$=r("For the main process the log level defaults to "),Xp=n("code"),A$=r("logging.INFO"),D$=r(" unless overridden by "),Kp=n("code"),q$=r("log_level"),S$=r(" argument."),P$=l(),ho=n("p"),I$=r("For the replica processes the log level defaults to "),Qp=n("code"),O$=r("logging.WARNING"),C$=r(" unless overridden by "),eh=n("code"),N$=r("log_level_replica"),U$=r(`
argument.`),z$=l(),En=n("p"),L$=r("The choice between the main and replica process settings is made according to the return value of "),th=n("code"),F$=r("should_log"),R$=r("."),W$=l(),or=n("div"),h($n.$$.fragment),j$=l(),oh=n("p"),G$=r("Get number of steps used for a linear warmup."),M$=l(),yt=n("div"),h(kn.$$.fragment),H$=l(),rh=n("p"),V$=r(`A context manager for torch distributed environment where on needs to do something on the main process, while
blocking replicas, and when it\u2019s finished releasing the replicas.`),B$=l(),uo=n("p"),Y$=r("One such use is for "),ah=n("code"),Z$=r("datasets"),J$=r("\u2019s "),nh=n("code"),X$=r("map"),K$=r(` feature which to be efficient should be run once on the main process,
which upon completion saves a cached version of results and which then automatically gets loaded by the
replicas.`),Q$=l(),rr=n("div"),h(xn.$$.fragment),e6=l(),An=n("p"),t6=r("Serializes this instance while replace "),sh=n("code"),o6=r("Enum"),r6=r(` by their values (for JSON serialization support). It obfuscates
the token values by removing their value.`),a6=l(),ar=n("div"),h(Dn.$$.fragment),n6=l(),ih=n("p"),s6=r("Serializes this instance to a JSON string."),i6=l(),nr=n("div"),h(qn.$$.fragment),l6=l(),lh=n("p"),d6=r("Sanitized serialization to use with TensorBoard\u2019s hparams"),_g=l(),fo=n("h2"),sr=n("a"),dh=n("span"),h(Sn.$$.fragment),c6=l(),ch=n("span"),m6=r("Seq2SeqTrainingArguments"),vg=l(),Je=n("div"),h(Pn.$$.fragment),p6=l(),In=n("p"),h6=r("TrainingArguments is the subset of the arguments we use in our example scripts "),mh=n("strong"),u6=r(`which relate to the training loop
itself`),f6=r("."),g6=l(),go=n("p"),_6=r("Using "),wi=n("a"),v6=r("HfArgumentParser"),b6=r(` we can turn this class into
`),On=n("a"),y6=r("argparse"),w6=r(` arguments that can be specified on the
command line.`),bg=l(),_o=n("h2"),ir=n("a"),ph=n("span"),h(Cn.$$.fragment),T6=l(),hh=n("span"),E6=r("Checkpoints"),yg=l(),ie=n("p"),$6=r("By default, "),Ti=n("a"),k6=r("Trainer"),x6=r(" will save all checkpoints in the "),uh=n("code"),A6=r("output_dir"),D6=r(` you set in the
`),Ei=n("a"),q6=r("TrainingArguments"),S6=r(" you are using. Those will go in subfolder named "),fh=n("code"),P6=r("checkpoint-xxx"),I6=r(` with xxx
being the step at which the training was at.`),wg=l(),lr=n("p"),O6=r("Resuming training from a checkpoint can be done when calling "),$i=n("a"),C6=r("Trainer.train()"),N6=r(" with either:"),Tg=l(),dr=n("ul"),ki=n("li"),gh=n("code"),U6=r("resume_from_checkpoint=True"),z6=r(" which will resume training from the latest checkpoint"),L6=l(),xi=n("li"),_h=n("code"),F6=r("resume_from_checkpoint=checkpoint_dir"),R6=r(` which will resume training from the specific checkpoint in the directory
passed.`),Eg=l(),Se=n("p"),W6=r("In addition, you can easily save your checkpoints on the Model Hub when using "),vh=n("code"),j6=r("push_to_hub=True"),G6=r(`. By default, all
the models saved in intermediate checkpoints are saved in different commits, but not the optimizer state. You can adapt
the `),bh=n("code"),M6=r("hub-strategy"),H6=r(" value of your "),Ai=n("a"),V6=r("TrainingArguments"),B6=r(" to either:"),$g=l(),cr=n("ul"),mr=n("li"),yh=n("code"),Y6=r('"checkpoint"'),Z6=r(`: the latest checkpoint is also pushed in a subfolder named last-checkpoint, allowing you to
resume training easily with `),wh=n("code"),J6=r('trainer.train(resume_from_checkpoint="output_dir/last-checkpoint")'),X6=r("."),K6=l(),Di=n("li"),Th=n("code"),Q6=r('"all_checkpoints"'),ek=r(`: all checkpoints are pushed like they appear in the output folder (so you will get one
checkpoint folder per folder in your final repository)`),kg=l(),vo=n("h2"),pr=n("a"),Eh=n("span"),h(Nn.$$.fragment),tk=l(),$h=n("span"),ok=r("Logging"),xg=l(),Pe=n("p"),rk=r("By default "),qi=n("a"),ak=r("Trainer"),nk=r(" will use "),kh=n("code"),sk=r("logging.INFO"),ik=r(" for the main process and "),xh=n("code"),lk=r("logging.WARNING"),dk=r(" for the replicas if any."),Ag=l(),wt=n("p"),ck=r("These defaults can be overridden to use any of the 5 "),Ah=n("code"),mk=r("logging"),pk=r(" levels with "),Si=n("a"),hk=r("TrainingArguments"),uk=r(`\u2019s
arguments:`),Dg=l(),hr=n("ul"),Pi=n("li"),Dh=n("code"),fk=r("log_level"),gk=r(" - for the main process"),_k=l(),Ii=n("li"),qh=n("code"),vk=r("log_level_replica"),bk=r(" - for the replicas"),qg=l(),Ie=n("p"),yk=r("Further, if "),Oi=n("a"),wk=r("TrainingArguments"),Tk=r("\u2019s "),Sh=n("code"),Ek=r("log_on_each_node"),$k=r(" is set to "),Ph=n("code"),kk=r("False"),xk=r(` only the main node will
use the log level settings for its main process, all other nodes will use the log level settings for replicas.`),Sg=l(),X=n("p"),Ak=r("Note that "),Ci=n("a"),Dk=r("Trainer"),qk=r(" is going to set "),Ih=n("code"),Sk=r("transformers"),Pk=r(`\u2019s log level separately for each node in its
`),Oh=n("code"),Ik=r("Trainer.__init__()"),Ok=r(`. So you may want to set this sooner (see the next example) if you tap into other
`),Ch=n("code"),Ck=r("transformers"),Nk=r(" functionality before creating the "),Ni=n("a"),Uk=r("Trainer"),zk=r(" object."),Pg=l(),Ui=n("p"),Lk=r("Here is an example of how this can be used in an application:"),Ig=l(),h(Un.$$.fragment),Og=l(),zi=n("p"),Fk=r(`And then if you only want to see warnings on the main node and all other nodes to not print any most likely duplicated
warnings you could run it as:`),Cg=l(),h(zn.$$.fragment),Ng=l(),Li=n("p"),Rk=r(`In the multi-node environment if you also don\u2019t want the logs to repeat for each node\u2019s main process, you will want to
change the above to:`),Ug=l(),h(Ln.$$.fragment),zg=l(),Fi=n("p"),Wk=r(`and then only the main process of the first node will log at the \u201Cwarning\u201D level, and all other processes on the main
node and all processes on other nodes will log at the \u201Cerror\u201D level.`),Lg=l(),Ri=n("p"),jk=r("If you need your application to be as quiet as possible you could do:"),Fg=l(),h(Fn.$$.fragment),Rg=l(),ur=n("p"),Gk=r("(add "),Nh=n("code"),Mk=r("--log_on_each_node 0"),Hk=r(" if on multi-node environment)"),Wg=l(),bo=n("h2"),fr=n("a"),Uh=n("span"),h(Rn.$$.fragment),Vk=l(),zh=n("span"),Bk=r("Randomness"),jg=l(),le=n("p"),Yk=r("When resuming from a checkpoint generated by "),Wi=n("a"),Zk=r("Trainer"),Jk=r(` all efforts are made to restore the
`),Lh=n("em"),Xk=r("python"),Kk=r(", "),Fh=n("em"),Qk=r("numpy"),e3=r(" and "),Rh=n("em"),t3=r("pytorch"),o3=r(` RNG states to the same states as they were at the moment of saving that checkpoint,
which should make the \u201Cstop and resume\u201D style of training as close as possible to non-stop training.`),Gg=l(),Tt=n("p"),r3=r(`However, due to various default non-deterministic pytorch settings this might not fully work. If you want full
determinism please refer to `),Wn=n("a"),a3=r("Controlling sources of randomness"),n3=r(`. As explained in the document, that some of those settings
that make things deterministic (.e.g., `),Wh=n("code"),s3=r("torch.backends.cudnn.deterministic"),i3=r(`) may slow things down, therefore this
can\u2019t be done by default, but you can enable those yourself if needed.`),Mg=l(),yo=n("h2"),gr=n("a"),jh=n("span"),h(jn.$$.fragment),l3=l(),Gh=n("span"),d3=r("Specific GPUs Selection"),Hg=l(),ji=n("p"),c3=r("Let\u2019s discuss how you can tell your program which GPUs are to be used and in what order."),Vg=l(),_r=n("p"),m3=r("When using "),Gn=n("a"),Mh=n("code"),p3=r("DistributedDataParallel"),h3=r(" to use only a subset of your GPUs, you simply specify the number of GPUs to use. For example, if you have 4 GPUs, but you wish to use the first 2 you can do:"),Bg=l(),h(Mn.$$.fragment),Yg=l(),Et=n("p"),u3=r("if you have either "),Hn=n("a"),Hh=n("code"),f3=r("accelerate"),g3=r(" or "),Vn=n("a"),Vh=n("code"),_3=r("deepspeed"),v3=r(" installed you can also accomplish the same by using one of:"),Zg=l(),h(Bn.$$.fragment),Jg=l(),h(Yn.$$.fragment),Xg=l(),vr=n("p"),b3=r("You don\u2019t need to use the Accelerate or "),Gi=n("a"),y3=r("the Deepspeed integration"),w3=r(" features to use these launchers."),Kg=l(),Mi=n("p"),T3=r("Until now you were able to tell the program how many GPUs to use. Now let\u2019s discuss how to select specific GPUs and control their order."),Qg=l(),Hi=n("p"),E3=r("The following environment variables help you control which GPUs to use and their order."),e_=l(),Vi=n("p"),Bh=n("strong"),Yh=n("code"),$3=r("CUDA_VISIBLE_DEVICES"),t_=l(),br=n("p"),k3=r("If you have multiple GPUs and you\u2019d like to use only 1 or a few of those GPUs, set the environment variable "),Zh=n("code"),x3=r("CUDA_VISIBLE_DEVICES"),A3=r(" to a list of the GPUs to be used."),o_=l(),Bi=n("p"),D3=r("For example, let\u2019s say you have 4 GPUs: 0, 1, 2 and 3. To run only on the physical GPUs 0 and 2, you can do:"),r_=l(),h(Zn.$$.fragment),a_=l(),$t=n("p"),q3=r("So now pytorch will see only 2 GPUs, where your physical GPUs 0 and 2 are mapped to "),Jh=n("code"),S3=r("cuda:0"),P3=r(" and "),Xh=n("code"),I3=r("cuda:1"),O3=r(" correspondingly."),n_=l(),Yi=n("p"),C3=r("You can even change their order:"),s_=l(),h(Jn.$$.fragment),i_=l(),kt=n("p"),N3=r("Here your physical GPUs 0 and 2 are mapped to "),Kh=n("code"),U3=r("cuda:1"),z3=r(" and "),Qh=n("code"),L3=r("cuda:0"),F3=r(" correspondingly."),l_=l(),xt=n("p"),R3=r("The above examples were all for "),eu=n("code"),W3=r("DistributedDataParallel"),j3=r(" use pattern, but the same method works for "),Xn=n("a"),tu=n("code"),G3=r("DataParallel"),M3=r(" as well:"),d_=l(),h(Kn.$$.fragment),c_=l(),Zi=n("p"),H3=r("To emulate an environment without GPUs simply set this environment variable to an empty value like so:"),m_=l(),h(Qn.$$.fragment),p_=l(),Ji=n("p"),V3=r("As with any environment variable you can, of course, export those instead of adding these to the command line, as in:"),h_=l(),h(es.$$.fragment),u_=l(),Xi=n("p"),B3=r("but this approach can be confusing since you may forget you set up the environment variable earlier and not understand why the wrong GPUs are used. Therefore, it\u2019s a common practice to set the environment variable just for a specific run on the same command line as it\u2019s shown in most examples of this section."),f_=l(),Ki=n("p"),ou=n("strong"),ru=n("code"),Y3=r("CUDA_DEVICE_ORDER"),g_=l(),yr=n("p"),Z3=r("There is an additional environment variable "),au=n("code"),J3=r("CUDA_DEVICE_ORDER"),X3=r(" that controls how the physical devices are ordered. The two choices are:"),__=l(),Qi=n("ol"),ts=n("li"),K3=r("ordered by PCIe bus IDs (matches "),nu=n("code"),Q3=r("nvidia-smi"),ex=r("\u2019s order) - this is the default."),v_=l(),h(os.$$.fragment),b_=l(),rs=n("ol"),su=n("li"),tx=r("ordered by GPU compute capabilities"),y_=l(),h(as.$$.fragment),w_=l(),At=n("p"),ox=r("Most of the time you don\u2019t need to care about this environment variable, but it\u2019s very helpful if you have a lopsided setup where you have an old and a new GPUs physically inserted in such a way so that the slow older card appears to be first. One way to fix that is to swap the cards. But if you can\u2019t swap the cards (e.g., if the cooling of the devices gets impacted) then setting "),iu=n("code"),rx=r("CUDA_DEVICE_ORDER=FASTEST_FIRST"),ax=r(" will always put the newer faster card first. It\u2019ll be somewhat confusing though since "),lu=n("code"),nx=r("nvidia-smi"),sx=r(" will still report them in the PCIe order."),T_=l(),el=n("p"),ix=r("The other solution to swapping the order is to use:"),E_=l(),h(ns.$$.fragment),$_=l(),tl=n("p"),lx=r("In this example we are working with just 2 GPUs, but of course the same would apply to as many GPUs as your computer has."),k_=l(),wr=n("p"),dx=r("Also if you do set this environment variable it\u2019s the best to set it in your "),du=n("code"),cx=r("~/.bashrc"),mx=r(" file or some other startup config file and forget about it."),x_=l(),wo=n("h2"),Tr=n("a"),cu=n("span"),h(ss.$$.fragment),px=l(),mu=n("span"),hx=r("Trainer Integrations"),A_=l(),Er=n("p"),ux=r("The "),ol=n("a"),fx=r("Trainer"),gx=r(` has been extended to support libraries that may dramatically improve your training
time and fit much bigger models.`),D_=l(),Oe=n("p"),_x=r("Currently it supports third party solutions, "),is=n("a"),vx=r("DeepSpeed"),bx=r(" and "),ls=n("a"),yx=r("FairScale"),wx=r(", which implement parts of the paper "),ds=n("a"),Tx=r(`ZeRO: Memory Optimizations
Toward Training Trillion Parameter Models, by Samyam Rajbhandari, Jeff Rasley, Olatunji Ruwase, Yuxiong He`),Ex=r("."),q_=l(),rl=n("p"),$x=r("This provided support is new and experimental as of this writing."),S_=l(),al=n("a"),P_=l(),To=n("h3"),$r=n("a"),pu=n("span"),h(cs.$$.fragment),kx=l(),hu=n("span"),xx=r("CUDA Extension Installation Notes"),I_=l(),nl=n("p"),Ax=r("As of this writing, both FairScale and Deepspeed require compilation of CUDA C++ code, before they can be used."),O_=l(),Dt=n("p"),Dx=r("While all installation issues should be dealt with through the corresponding GitHub Issues of "),ms=n("a"),qx=r("FairScale"),Sx=r(" and "),ps=n("a"),Px=r("Deepspeed"),Ix=r(`, there are a few common issues that one may encounter while building
any PyTorch extension that needs to build CUDA extensions.`),C_=l(),sl=n("p"),Ox=r("Therefore, if you encounter a CUDA-related build issue while doing one of the following or both:"),N_=l(),h(hs.$$.fragment),U_=l(),il=n("p"),Cx=r("please, read the following notes first."),z_=l(),qt=n("p"),Nx=r("In these notes we give examples for what to do when "),uu=n("code"),Ux=r("pytorch"),zx=r(" has been built with CUDA "),fu=n("code"),Lx=r("10.2"),Fx=r(`. If your situation is
different remember to adjust the version number to the one you are after.`),L_=l(),Eo=n("h4"),kr=n("a"),gu=n("span"),h(us.$$.fragment),Rx=l(),_u=n("span"),Wx=r("Possible problem #1"),F_=l(),ll=n("p"),jx=r(`While, Pytorch comes with its own CUDA toolkit, to build these two projects you must have an identical version of CUDA
installed system-wide.`),R_=l(),Ce=n("p"),Gx=r("For example, if you installed "),vu=n("code"),Mx=r("pytorch"),Hx=r(" with "),bu=n("code"),Vx=r("cudatoolkit==10.2"),Bx=r(` in the Python environment, you also need to have
CUDA `),yu=n("code"),Yx=r("10.2"),Zx=r(" installed system-wide."),W_=l(),St=n("p"),Jx=r("The exact location may vary from system to system, but "),wu=n("code"),Xx=r("/usr/local/cuda-10.2"),Kx=r(` is the most common location on many
Unix systems. When CUDA is correctly set up and added to the `),Tu=n("code"),Qx=r("PATH"),e5=r(` environment variable, one can find the
installation location by doing:`),j_=l(),h(fs.$$.fragment),G_=l(),xr=n("p"),t5=r(`If you don\u2019t have CUDA installed system-wide, install it first. You will find the instructions by using your favorite
search engine. For example, if you\u2019re on Ubuntu you may want to search for: `),gs=n("a"),o5=r("ubuntu cuda 10.2 install"),r5=r("."),M_=l(),$o=n("h4"),Ar=n("a"),Eu=n("span"),h(_s.$$.fragment),a5=l(),$u=n("span"),n5=r("Possible problem #2"),H_=l(),dl=n("p"),s5=r(`Another possible common problem is that you may have more than one CUDA toolkit installed system-wide. For example you
may have:`),V_=l(),h(vs.$$.fragment),B_=l(),Pt=n("p"),i5=r("Now, in this situation you need to make sure that your "),ku=n("code"),l5=r("PATH"),d5=r(" and "),xu=n("code"),c5=r("LD_LIBRARY_PATH"),m5=r(` environment variables contain
the correct paths to the desired CUDA version. Typically, package installers will set these to contain whatever the
last version was installed. If you encounter the problem, where the package build fails because it can\u2019t find the right
CUDA version despite you having it installed system-wide, it means that you need to adjust the 2 aforementioned
environment variables.`),Y_=l(),cl=n("p"),p5=r("First, you may look at their contents:"),Z_=l(),h(bs.$$.fragment),J_=l(),ml=n("p"),h5=r("so you get an idea of what is inside."),X_=l(),Dr=n("p"),u5=r("It\u2019s possible that "),Au=n("code"),f5=r("LD_LIBRARY_PATH"),g5=r(" is empty."),K_=l(),Xe=n("p"),Du=n("code"),_5=r("PATH"),v5=r(" lists the locations of where executables can be found and "),qu=n("code"),b5=r("LD_LIBRARY_PATH"),y5=r(` is for where shared libraries
are to looked for. In both cases, earlier entries have priority over the later ones. `),Su=n("code"),w5=r(":"),T5=r(` is used to separate multiple
entries.`),Q_=l(),pl=n("p"),E5=r(`Now, to tell the build program where to find the specific CUDA toolkit, insert the desired paths to be listed first by
doing:`),ev=l(),h(ys.$$.fragment),tv=l(),hl=n("p"),$5=r("Note that we aren\u2019t overwriting the existing values, but prepending instead."),ov=l(),Ne=n("p"),k5=r(`Of course, adjust the version number, the full path if need be. Check that the directories you assign actually do
exist. `),Pu=n("code"),x5=r("lib64"),A5=r(" sub-directory is where the various CUDA "),Iu=n("code"),D5=r(".so"),q5=r(" objects, like "),Ou=n("code"),S5=r("libcudart.so"),P5=r(` reside, it\u2019s unlikely
that your system will have it named differently, but if it is adjust it to reflect your reality.`),rv=l(),ko=n("h4"),qr=n("a"),Cu=n("span"),h(ws.$$.fragment),I5=l(),Nu=n("span"),O5=r("Possible problem #3"),av=l(),It=n("p"),C5=r("Some older CUDA versions may refuse to build with newer compilers. For example, you my have "),Uu=n("code"),N5=r("gcc-9"),U5=r(` but it wants
`),zu=n("code"),z5=r("gcc-7"),L5=r("."),nv=l(),ul=n("p"),F5=r("There are various ways to go about it."),sv=l(),fl=n("p"),R5=r("If you can install the latest CUDA toolkit it typically should support the newer compiler."),iv=l(),Sr=n("p"),W5=r(`Alternatively, you could install the lower version of the compiler in addition to the one you already have, or you may
already have it but it\u2019s not the default one, so the build system can\u2019t see it. If you have `),Lu=n("code"),j5=r("gcc-7"),G5=r(` installed but the
build system complains it can\u2019t find it, the following might do the trick:`),lv=l(),h(Ts.$$.fragment),dv=l(),W=n("p"),M5=r("Here, we are making a symlink to "),Fu=n("code"),H5=r("gcc-7"),V5=r(" from "),Ru=n("code"),B5=r("/usr/local/cuda-10.2/bin/gcc"),Y5=r(` and since
`),Wu=n("code"),Z5=r("/usr/local/cuda-10.2/bin/"),J5=r(" should be in the "),ju=n("code"),X5=r("PATH"),K5=r(` environment variable (see the previous problem\u2019s solution), it
should find `),Gu=n("code"),Q5=r("gcc-7"),eA=r(" (and "),Mu=n("code"),tA=r("g++7"),oA=r(") and then the build will succeed."),cv=l(),gl=n("p"),rA=r("As always make sure to edit the paths in the example to match your situation."),mv=l(),xo=n("h3"),Pr=n("a"),Hu=n("span"),h(Es.$$.fragment),aA=l(),Vu=n("span"),nA=r("FairScale"),pv=l(),Ue=n("p"),sA=r("By integrating "),$s=n("a"),iA=r("FairScale"),lA=r(" the "),_l=n("a"),dA=r("Trainer"),cA=r(`
provides support for the following features from `),ks=n("a"),mA=r("the ZeRO paper"),pA=r(":"),hv=l(),ze=n("ol"),Bu=n("li"),hA=r("Optimizer State Sharding"),uA=l(),Yu=n("li"),fA=r("Gradient Sharding"),gA=l(),Zu=n("li"),_A=r("Model Parameters Sharding (new and very experimental)"),vA=l(),Ju=n("li"),bA=r("CPU offload (new and very experimental)"),uv=l(),vl=n("p"),yA=r("You will need at least two GPUs to use this feature."),fv=l(),xs=n("p"),Xu=n("strong"),wA=r("Installation"),TA=r(":"),gv=l(),bl=n("p"),EA=r("Install the library via pypi:"),_v=l(),h(As.$$.fragment),vv=l(),Ot=n("p"),$A=r("or via "),Ku=n("code"),kA=r("transformers"),xA=r("\u2019 "),Qu=n("code"),AA=r("extras"),DA=r(":"),bv=l(),h(Ds.$$.fragment),yv=l(),Ct=n("p"),qA=r("(available starting from "),ef=n("code"),SA=r("transformers==4.6.0"),PA=r(") or find more details on "),qs=n("a"),IA=r("the FairScale\u2019s GitHub page"),OA=r("."),wv=l(),Ir=n("p"),CA=r("If you\u2019re still struggling with the build, first make sure to read "),yl=n("a"),NA=r("CUDA Extension Installation Notes"),UA=r("."),Tv=l(),wl=n("p"),zA=r("If it\u2019s still not resolved the build issue, here are a few more ideas."),Ev=l(),Ss=n("p"),tf=n("code"),LA=r("fairscale"),FA=r(` seems to have an issue with the recently introduced by pip build isolation feature. If you have a problem
with it, you may want to try one of:`),$v=l(),h(Ps.$$.fragment),kv=l(),Tl=n("p"),RA=r("or:"),xv=l(),h(Is.$$.fragment),Av=l(),Os=n("p"),of=n("code"),WA=r("fairscale"),jA=r(" also has issues with building against pytorch-nightly, so if you use it you may have to try one of:"),Dv=l(),h(Cs.$$.fragment),qv=l(),El=n("p"),GA=r("or:"),Sv=l(),h(Ns.$$.fragment),Pv=l(),$l=n("p"),MA=r("Of course, adjust the urls to match the cuda version you use."),Iv=l(),Or=n("p"),HA=r(`If after trying everything suggested you still encounter build issues, please, proceed with the GitHub Issue of
`),Us=n("a"),VA=r("FairScale"),BA=r("."),Ov=l(),zs=n("p"),rf=n("strong"),YA=r("Usage"),ZA=r(":"),Cv=l(),Nt=n("p"),JA=r("To use the first version of Sharded data-parallelism, add "),af=n("code"),XA=r("--sharded_ddp simple"),KA=r(` to the command line arguments, and
make sure you have added the distributed launcher `),nf=n("code"),QA=r("-m torch.distributed.launch --nproc_per_node=NUMBER_OF_GPUS_YOU_HAVE"),e9=r(" if you haven\u2019t been using it already."),Nv=l(),Cr=n("p"),t9=r("For example here is how you could use it for "),sf=n("code"),o9=r("run_translation.py"),r9=r(" with 2 GPUs:"),Uv=l(),h(Ls.$$.fragment),zv=l(),kl=n("p"),a9=r("Notes:"),Lv=l(),Le=n("ul"),lf=n("li"),n9=r("This feature requires distributed training (so multiple GPUs)."),s9=l(),df=n("li"),i9=r("It is not implemented for TPUs."),l9=l(),Fs=n("li"),d9=r("It works with "),cf=n("code"),c9=r("--fp16"),m9=r(" too, to make things even faster."),p9=l(),Rs=n("li"),h9=r("One of the main benefits of enabling "),mf=n("code"),u9=r("--sharded_ddp simple"),f9=r(` is that it uses a lot less GPU memory, so you should be
able to use significantly larger batch sizes using the same hardware (e.g. 3x and even bigger) which should lead to
significantly shorter training time.`),Fv=l(),Ws=n("ol"),Ke=n("li"),g9=r("To use the second version of Sharded data-parallelism, add "),pf=n("code"),_9=r("--sharded_ddp zero_dp_2"),v9=r(" or "),hf=n("code"),b9=r("--sharded_ddp zero_dp_3"),y9=r(" to the command line arguments, and make sure you have added the distributed launcher "),uf=n("code"),w9=r("-m torch.distributed.launch --nproc_per_node=NUMBER_OF_GPUS_YOU_HAVE"),T9=r(" if you haven\u2019t been using it already."),Rv=l(),Nr=n("p"),E9=r("For example here is how you could use it for "),ff=n("code"),$9=r("run_translation.py"),k9=r(" with 2 GPUs:"),Wv=l(),h(js.$$.fragment),jv=l(),Ao=n("p"),gf=n("code"),x9=r("zero_dp_2"),A9=r(" is an optimized version of the simple wrapper, while "),_f=n("code"),D9=r("zero_dp_3"),q9=r(` fully shards model weights,
gradients and optimizer states.`),Gv=l(),Ut=n("p"),S9=r("Both are compatible with adding "),vf=n("code"),P9=r("cpu_offload"),I9=r(" to enable ZeRO-offload (activate it like this: "),bf=n("code"),O9=r('--sharded_ddp "zero_dp_2 cpu_offload"'),C9=r(")."),Mv=l(),xl=n("p"),N9=r("Notes:"),Hv=l(),de=n("ul"),yf=n("li"),U9=r("This feature requires distributed training (so multiple GPUs)."),z9=l(),wf=n("li"),L9=r("It is not implemented for TPUs."),F9=l(),Gs=n("li"),R9=r("It works with "),Tf=n("code"),W9=r("--fp16"),j9=r(" too, to make things even faster."),G9=l(),Do=n("li"),M9=r("The "),Ef=n("code"),H9=r("cpu_offload"),V9=r(" additional option requires "),$f=n("code"),B9=r("--fp16"),Y9=r("."),Z9=l(),kf=n("li"),J9=r(`This is an area of active development, so make sure you have a source install of fairscale to use this feature as
some bugs you encounter may have been fixed there already.`),Vv=l(),Al=n("p"),X9=r("Known caveats:"),Bv=l(),Ur=n("ul"),qo=n("li"),K9=r("This feature is incompatible with "),xf=n("code"),Q9=r("--predict_with_generate"),eD=r(" in the "),Af=n("em"),tD=r("run_translation.py"),oD=r(" script."),rD=l(),we=n("li"),aD=r("Using "),Df=n("code"),nD=r("--sharded_ddp zero_dp_3"),sD=r(` requires wrapping each layer of the model in the special container
`),qf=n("code"),iD=r("FullyShardedDataParallelism"),lD=r(" of fairscale. It should be used with the option "),Sf=n("code"),dD=r("auto_wrap"),cD=r(` if you are not
doing this yourself: `),Pf=n("code"),mD=r('--sharded_ddp "zero_dp_3 auto_wrap"'),pD=r("."),Yv=l(),Dl=n("p"),hD=r("Sections that were moved:"),Zv=l(),y=n("p"),uD=r("[ "),ql=n("a"),fD=r("DeepSpeed"),If=n("a"),gD=r(`
| `),Sl=n("a"),_D=r("Installation"),Of=n("a"),vD=r(`
| `),Pl=n("a"),bD=r("Deployment with multiple GPUs"),Cf=n("a"),yD=r(`
| `),Il=n("a"),wD=r("Deployment with one GPU"),Nf=n("a"),TD=r(`
| `),Ol=n("a"),ED=r("Deployment in Notebooks"),Uf=n("a"),$D=r(`
| `),Cl=n("a"),kD=r("Configuration"),zf=n("a"),xD=r(`
| `),Nl=n("a"),AD=r("Passing Configuration"),Lf=n("a"),DD=r(`
| `),Ul=n("a"),qD=r("Shared Configuration"),Ff=n("a"),SD=r(`
| `),zl=n("a"),PD=r("ZeRO"),Rf=n("a"),ID=r(`
| `),Ll=n("a"),OD=r("ZeRO-2 Config"),Wf=n("a"),CD=r(`
| `),Fl=n("a"),ND=r("ZeRO-3 Config"),jf=n("a"),UD=r(`
| `),Rl=n("a"),zD=r("NVMe Support"),Gf=n("a"),LD=r(`
| `),Wl=n("a"),FD=r("ZeRO-2 vs ZeRO-3 Performance"),Mf=n("a"),RD=r(`
| `),jl=n("a"),WD=r("ZeRO-2 Example"),Hf=n("a"),jD=r(`
| `),Gl=n("a"),GD=r("ZeRO-3 Example"),Vf=n("a"),MD=r(`
| `),Ml=n("a"),HD=r("Optimizer"),Bf=n("a"),VD=r(`
| `),Hl=n("a"),BD=r("Scheduler"),Yf=n("a"),YD=r(`
| `),Vl=n("a"),ZD=r("fp32 Precision"),Zf=n("a"),JD=r(`
| `),Bl=n("a"),XD=r("Automatic Mixed Precision"),Jf=n("a"),KD=r(`
| `),Yl=n("a"),QD=r("Batch Size"),Xf=n("a"),eq=r(`
| `),Zl=n("a"),tq=r("Gradient Accumulation"),Kf=n("a"),oq=r(`
| `),Jl=n("a"),rq=r("Gradient Clipping"),Qf=n("a"),aq=r(`
| `),Xl=n("a"),nq=r("Getting The Model Weights Out"),eg=n("a"),sq=r(`
]`),this.h()},l(t){const c=SU('[data-svelte="svelte-1phssyn"]',document.head);E=s(c,"META",{name:!0,content:!0}),c.forEach(o),z=d(t),x=s(t,"H1",{class:!0});var Ms=i(x);P=s(Ms,"A",{id:!0,class:!0,href:!0});var tg=i(P);me=s(tg,"SPAN",{});var og=i(me);u(L.$$.fragment,og),og.forEach(o),tg.forEach(o),F=d(Ms),G=s(Ms,"SPAN",{});var rg=i(G);pe=a(rg,"Trainer"),rg.forEach(o),Ms.forEach(o),K=d(t),R=s(t,"P",{});var Kl=i(R);re=a(Kl,"The "),ae=s(Kl,"A",{href:!0});var qq=i(ae);Q=a(qq,"Trainer"),qq.forEach(o),ne=a(Kl," class provides an API for feature-complete training in PyTorch for most standard use cases. It\u2019s used in most of the "),V=s(Kl,"A",{href:!0});var Sq=i(V);Ge=a(Sq,"example scripts"),Sq.forEach(o),he=a(Kl,"."),Kl.forEach(o),C=d(t),S=s(t,"P",{});var Ql=i(S);et=a(Ql,"Before instantiating your "),ee=s(Ql,"A",{href:!0});var Pq=i(ee);tt=a(Pq,"Trainer"),Pq.forEach(o),ot=a(Ql,", create a "),ue=s(Ql,"A",{href:!0});var Iq=i(ue);ta=a(Iq,"TrainingArguments"),Iq.forEach(o),oa=a(Ql," to access all the points of customization during training."),Ql.forEach(o),Me=d(t),Ee=s(t,"P",{});var Xv=i(Ee);ra=a(Xv,"The API supports distributed training on multiple GPUs/TPUs, mixed precision through "),fe=s(Xv,"A",{href:!0,rel:!0});var Oq=i(fe);aa=a(Oq,"NVIDIA Apex"),Oq.forEach(o),na=a(Xv," and Native AMP for PyTorch."),Xv.forEach(o),B=d(t),M=s(t,"P",{});var Kv=i(M);Ys=a(Kv,"The "),ge=s(Kv,"A",{href:!0});var Cq=i(ge);Io=a(Cq,"Trainer"),Cq.forEach(o),Zs=a(Kv," contains the basic training loop which supports the above features. To inject custom behavior you can subclass them and override the following methods:"),Kv.forEach(o),Vt=d(t),D=s(t,"UL",{});var O=i(D);H=s(O,"LI",{});var iq=i(H);Oo=s(iq,"STRONG",{});var Nq=i(Oo);Js=a(Nq,"get_train_dataloader"),Nq.forEach(o),Xs=a(iq," \u2014 Creates the training DataLoader."),iq.forEach(o),Ks=d(O),Qs=s(O,"LI",{});var lq=i(Qs);tc=s(lq,"STRONG",{});var Uq=i(tc);qb=a(Uq,"get_eval_dataloader"),Uq.forEach(o),Sb=a(lq," \u2014 Creates the evaluation DataLoader."),lq.forEach(o),Pb=d(O),ei=s(O,"LI",{});var dq=i(ei);oc=s(dq,"STRONG",{});var zq=i(oc);Ib=a(zq,"get_test_dataloader"),zq.forEach(o),Ob=a(dq," \u2014 Creates the test DataLoader."),dq.forEach(o),Cb=d(O),ti=s(O,"LI",{});var cq=i(ti);rc=s(cq,"STRONG",{});var Lq=i(rc);Nb=a(Lq,"log"),Lq.forEach(o),Ub=a(cq," \u2014 Logs information on the various objects watching training."),cq.forEach(o),zb=d(O),rt=s(O,"LI",{});var Hs=i(rt);ac=s(Hs,"STRONG",{});var Fq=i(ac);Lb=a(Fq,"create_optimizer_and_scheduler"),Fq.forEach(o),Fb=a(Hs,` \u2014 Sets up the optimizer and learning rate scheduler if they were not passed at
init. Note, that you can also subclass or override the `),nc=s(Hs,"CODE",{});var Rq=i(nc);Rb=a(Rq,"create_optimizer"),Rq.forEach(o),Wb=a(Hs," and "),sc=s(Hs,"CODE",{});var Wq=i(sc);jb=a(Wq,"create_scheduler"),Wq.forEach(o),Gb=a(Hs,` methods
separately.`),Hs.forEach(o),Mb=d(O),oi=s(O,"LI",{});var mq=i(oi);ic=s(mq,"STRONG",{});var jq=i(ic);Hb=a(jq,"create_optimizer"),jq.forEach(o),Vb=a(mq," \u2014 Sets up the optimizer if it wasn\u2019t passed at init."),mq.forEach(o),Bb=d(O),ri=s(O,"LI",{});var pq=i(ri);lc=s(pq,"STRONG",{});var Gq=i(lc);Yb=a(Gq,"create_scheduler"),Gq.forEach(o),Zb=a(pq," \u2014 Sets up the learning rate scheduler if it wasn\u2019t passed at init."),pq.forEach(o),Jb=d(O),ai=s(O,"LI",{});var hq=i(ai);dc=s(hq,"STRONG",{});var Mq=i(dc);Xb=a(Mq,"compute_loss"),Mq.forEach(o),Kb=a(hq," - Computes the loss on a batch of training inputs."),hq.forEach(o),Qb=d(O),ni=s(O,"LI",{});var uq=i(ni);cc=s(uq,"STRONG",{});var Hq=i(cc);ey=a(Hq,"training_step"),Hq.forEach(o),ty=a(uq," \u2014 Performs a training step."),uq.forEach(o),oy=d(O),si=s(O,"LI",{});var fq=i(si);mc=s(fq,"STRONG",{});var Vq=i(mc);ry=a(Vq,"prediction_step"),Vq.forEach(o),ay=a(fq," \u2014 Performs an evaluation/test step."),fq.forEach(o),ny=d(O),ii=s(O,"LI",{});var gq=i(ii);pc=s(gq,"STRONG",{});var Bq=i(pc);sy=a(Bq,"evaluate"),Bq.forEach(o),iy=a(gq," \u2014 Runs an evaluation loop and returns metrics."),gq.forEach(o),ly=d(O),li=s(O,"LI",{});var _q=i(li);hc=s(_q,"STRONG",{});var Yq=i(hc);dy=a(Yq,"predict"),Yq.forEach(o),cy=a(_q," \u2014 Returns predictions (with metrics if labels are available) on a test set."),_q.forEach(o),O.forEach(o),ig=d(t),u(Co.$$.fragment,t),lg=d(t),No=s(t,"P",{});var Qv=i(No);my=a(Qv,"Here is an example of how to customize "),di=s(Qv,"A",{href:!0});var Zq=i(di);py=a(Zq,"Trainer"),Zq.forEach(o),hy=a(Qv," to use a weighted loss (useful when you have an unbalanced training set):"),Qv.forEach(o),dg=d(t),u(sa.$$.fragment,t),cg=d(t),at=s(t,"P",{});var ed=i(at);uy=a(ed,"Another way to customize the training loop behavior for the PyTorch "),ci=s(ed,"A",{href:!0});var Jq=i(ci);fy=a(Jq,"Trainer"),Jq.forEach(o),gy=a(ed," is to use "),mi=s(ed,"A",{href:!0});var Xq=i(mi);_y=a(Xq,"callbacks"),Xq.forEach(o),vy=a(ed," that can inspect the training loop state (for progress reporting, logging on TensorBoard or other ML platforms\u2026) and take decisions (like early stopping)."),ed.forEach(o),mg=d(t),Bt=s(t,"H2",{class:!0});var e1=i(Bt);Uo=s(e1,"A",{id:!0,class:!0,href:!0});var Kq=i(Uo);uc=s(Kq,"SPAN",{});var Qq=i(uc);u(ia.$$.fragment,Qq),Qq.forEach(o),Kq.forEach(o),by=d(e1),fc=s(e1,"SPAN",{});var e8=i(fc);yy=a(e8,"Trainer"),e8.forEach(o),e1.forEach(o),pg=d(t),b=s(t,"DIV",{class:!0});var w=i(b);u(la.$$.fragment,w),wy=d(w),gc=s(w,"P",{});var t8=i(gc);Ty=a(t8,"Trainer is a simple but feature-complete training and eval loop for PyTorch, optimized for \u{1F917} Transformers."),t8.forEach(o),Ey=d(w),_c=s(w,"P",{});var o8=i(_c);$y=a(o8,"Important attributes:"),o8.forEach(o),ky=d(w),_e=s(w,"UL",{});var zt=i(_e);zo=s(zt,"LI",{});var ag=i(zo);vc=s(ag,"STRONG",{});var r8=i(vc);xy=a(r8,"model"),r8.forEach(o),Ay=a(ag," \u2014 Always points to the core model. If using a transformers model, it will be a "),pi=s(ag,"A",{href:!0});var a8=i(pi);Dy=a(a8,"PreTrainedModel"),a8.forEach(o),qy=a(ag,`
subclass.`),ag.forEach(o),Sy=d(zt),Y=s(zt,"LI",{});var Te=i(Y);bc=s(Te,"STRONG",{});var n8=i(bc);Py=a(n8,"model_wrapped"),n8.forEach(o),Iy=a(Te,` \u2014 Always points to the most external model in case one or more other modules wrap the
original model. This is the model that should be used for the forward pass. For example, under `),yc=s(Te,"CODE",{});var s8=i(yc);Oy=a(s8,"DeepSpeed"),s8.forEach(o),Cy=a(Te,`,
the inner model is wrapped in `),wc=s(Te,"CODE",{});var i8=i(wc);Ny=a(i8,"DeepSpeed"),i8.forEach(o),Uy=a(Te," and then again in "),Tc=s(Te,"CODE",{});var l8=i(Tc);zy=a(l8,"torch.nn.DistributedDataParallel"),l8.forEach(o),Ly=a(Te,`. If the inner
model hasn\u2019t been wrapped, then `),Ec=s(Te,"CODE",{});var d8=i(Ec);Fy=a(d8,"self.model_wrapped"),d8.forEach(o),Ry=a(Te," is the same as "),$c=s(Te,"CODE",{});var c8=i($c);Wy=a(c8,"self.model"),c8.forEach(o),jy=a(Te,"."),Te.forEach(o),Gy=d(zt),hi=s(zt,"LI",{});var vq=i(hi);kc=s(vq,"STRONG",{});var m8=i(kc);My=a(m8,"is_model_parallel"),m8.forEach(o),Hy=a(vq,` \u2014 Whether or not a model has been switched to a model parallel mode (different from
data parallelism, this means some of the model layers are split on different GPUs).`),vq.forEach(o),Vy=d(zt),$e=s(zt,"LI",{});var So=i($e);xc=s(So,"STRONG",{});var p8=i(xc);By=a(p8,"place_model_on_device"),p8.forEach(o),Yy=a(So,` \u2014 Whether or not to automatically place the model on the device - it will be set
to `),Ac=s(So,"CODE",{});var h8=i(Ac);Zy=a(h8,"False"),h8.forEach(o),Jy=a(So,` if model parallel or deepspeed is used, or if the default
`),Dc=s(So,"CODE",{});var u8=i(Dc);Xy=a(u8,"TrainingArguments.place_model_on_device"),u8.forEach(o),Ky=a(So," is overridden to return "),qc=s(So,"CODE",{});var f8=i(qc);Qy=a(f8,"False"),f8.forEach(o),e2=a(So," ."),So.forEach(o),t2=d(zt),ke=s(zt,"LI",{});var Po=i(ke);Sc=s(Po,"STRONG",{});var g8=i(Sc);o2=a(g8,"is_in_train"),g8.forEach(o),r2=a(Po," \u2014 Whether or not a model is currently running "),Pc=s(Po,"CODE",{});var _8=i(Pc);a2=a(_8,"train"),_8.forEach(o),n2=a(Po," (e.g. when "),Ic=s(Po,"CODE",{});var v8=i(Ic);s2=a(v8,"evaluate"),v8.forEach(o),i2=a(Po,` is called while
in `),Oc=s(Po,"CODE",{});var b8=i(Oc);l2=a(b8,"train"),b8.forEach(o),d2=a(Po,")"),Po.forEach(o),zt.forEach(o),c2=d(w),Lo=s(w,"DIV",{class:!0});var t1=i(Lo);u(da.$$.fragment,t1),m2=d(t1),ca=s(t1,"P",{});var o1=i(ca);p2=a(o1,"Add a callback to the current list of "),Cc=s(o1,"CODE",{});var y8=i(Cc);h2=a(y8,"TrainerCallback"),y8.forEach(o),u2=a(o1,"."),o1.forEach(o),t1.forEach(o),f2=d(w),Fo=s(w,"DIV",{class:!0});var r1=i(Fo);u(ma.$$.fragment,r1),g2=d(r1),pa=s(r1,"P",{});var a1=i(pa);_2=a(a1,"A helper wrapper that creates an appropriate context manager for "),Nc=s(a1,"CODE",{});var w8=i(Nc);v2=a(w8,"autocast"),w8.forEach(o),b2=a(a1,` while feeding it the desired
arguments, depending on the situation.`),a1.forEach(o),r1.forEach(o),y2=d(w),nt=s(w,"DIV",{class:!0});var td=i(nt);u(ha.$$.fragment,td),w2=d(td),Uc=s(td,"P",{});var T8=i(Uc);T2=a(T8,"How the loss is computed by Trainer. By default, all models return the loss in the first element."),T8.forEach(o),E2=d(td),zc=s(td,"P",{});var E8=i(zc);$2=a(E8,"Subclass and override for custom behavior."),E8.forEach(o),td.forEach(o),k2=d(w),st=s(w,"DIV",{class:!0});var od=i(st);u(ua.$$.fragment,od),x2=d(od),Lc=s(od,"P",{});var $8=i(Lc);A2=a($8,"Setup the optimizer."),$8.forEach(o),D2=d(od),fa=s(od,"P",{});var n1=i(fa);q2=a(n1,`We provide a reasonable default that works well. If you want to use something else, you can pass a tuple in the
Trainer\u2019s init through `),Fc=s(n1,"CODE",{});var k8=i(Fc);S2=a(k8,"optimizers"),k8.forEach(o),P2=a(n1,", or subclass and override this method in a subclass."),n1.forEach(o),od.forEach(o),I2=d(w),it=s(w,"DIV",{class:!0});var rd=i(it);u(ga.$$.fragment,rd),O2=d(rd),Rc=s(rd,"P",{});var x8=i(Rc);C2=a(x8,"Setup the optimizer and the learning rate scheduler."),x8.forEach(o),N2=d(rd),He=s(rd,"P",{});var zr=i(He);U2=a(zr,`We provide a reasonable default that works well. If you want to use something else, you can pass a tuple in the
Trainer\u2019s init through `),Wc=s(zr,"CODE",{});var A8=i(Wc);z2=a(A8,"optimizers"),A8.forEach(o),L2=a(zr,", or subclass and override this method (or "),jc=s(zr,"CODE",{});var D8=i(jc);F2=a(D8,"create_optimizer"),D8.forEach(o),R2=a(zr,` and/or
`),Gc=s(zr,"CODE",{});var q8=i(Gc);W2=a(q8,"create_scheduler"),q8.forEach(o),j2=a(zr,") in a subclass."),zr.forEach(o),rd.forEach(o),G2=d(w),Ro=s(w,"DIV",{class:!0});var s1=i(Ro);u(_a.$$.fragment,s1),M2=d(s1),Mc=s(s1,"P",{});var S8=i(Mc);H2=a(S8,`Setup the scheduler. The optimizer of the trainer must have been set up either before this method is called or
passed as an argument.`),S8.forEach(o),s1.forEach(o),V2=d(w),xe=s(w,"DIV",{class:!0});var Lr=i(xe);u(va.$$.fragment,Lr),B2=d(Lr),Hc=s(Lr,"P",{});var P8=i(Hc);Y2=a(P8,"Run evaluation and returns metrics."),P8.forEach(o),Z2=d(Lr),ba=s(Lr,"P",{});var i1=i(ba);J2=a(i1,`The calling script will be responsible for providing a method to compute metrics, as they are task-dependent
(pass it to the init `),Vc=s(i1,"CODE",{});var I8=i(Vc);X2=a(I8,"compute_metrics"),I8.forEach(o),K2=a(i1," argument)."),i1.forEach(o),Q2=d(Lr),Bc=s(Lr,"P",{});var O8=i(Bc);ew=a(O8,"You can also subclass and override this method to inject custom behavior."),O8.forEach(o),Lr.forEach(o),tw=d(w),lt=s(w,"DIV",{class:!0});var ad=i(lt);u(ya.$$.fragment,ad),ow=d(ad),Yt=s(ad,"P",{});var nd=i(Yt);rw=a(nd,"Prediction/evaluation loop, shared by "),Yc=s(nd,"CODE",{});var C8=i(Yc);aw=a(C8,"Trainer.evaluate()"),C8.forEach(o),nw=a(nd," and "),Zc=s(nd,"CODE",{});var N8=i(Zc);sw=a(N8,"Trainer.predict()"),N8.forEach(o),iw=a(nd,"."),nd.forEach(o),lw=d(ad),Jc=s(ad,"P",{});var U8=i(Jc);dw=a(U8,"Works both with or without labels."),U8.forEach(o),ad.forEach(o),cw=d(w),Wo=s(w,"DIV",{class:!0});var l1=i(Wo);u(wa.$$.fragment,l1),mw=d(l1),Ta=s(l1,"P",{});var d1=i(Ta);pw=a(d1,"For models that inherit from "),ui=s(d1,"A",{href:!0});var z8=i(ui);hw=a(z8,"PreTrainedModel"),z8.forEach(o),uw=a(d1,`, uses that method to compute the number of floating point
operations for every backward + forward pass. If using another model, either implement such a method in the
model or subclass and override this method.`),d1.forEach(o),l1.forEach(o),fw=d(w),dt=s(w,"DIV",{class:!0});var sd=i(dt);u(Ea.$$.fragment,sd),gw=d(sd),$a=s(sd,"P",{});var c1=i($a);_w=a(c1,"Returns the evaluation "),Xc=s(c1,"CODE",{});var L8=i(Xc);vw=a(L8,"DataLoader"),L8.forEach(o),bw=a(c1,"."),c1.forEach(o),yw=d(sd),Kc=s(sd,"P",{});var F8=i(Kc);ww=a(F8,"Subclass and override this method if you want to inject some custom behavior."),F8.forEach(o),sd.forEach(o),Tw=d(w),jo=s(w,"DIV",{class:!0});var m1=i(jo);u(ka.$$.fragment,m1),Ew=d(m1),Qc=s(m1,"P",{});var R8=i(Qc);$w=a(R8,"Returns the optimizer class and optimizer parameters based on the training arguments."),R8.forEach(o),m1.forEach(o),kw=d(w),ct=s(w,"DIV",{class:!0});var id=i(ct);u(xa.$$.fragment,id),xw=d(id),Aa=s(id,"P",{});var p1=i(Aa);Aw=a(p1,"Returns the test "),em=s(p1,"CODE",{});var W8=i(em);Dw=a(W8,"DataLoader"),W8.forEach(o),qw=a(p1,"."),p1.forEach(o),Sw=d(id),tm=s(id,"P",{});var j8=i(tm);Pw=a(j8,"Subclass and override this method if you want to inject some custom behavior."),j8.forEach(o),id.forEach(o),Iw=d(w),Ae=s(w,"DIV",{class:!0});var Fr=i(Ae);u(Da.$$.fragment,Fr),Ow=d(Fr),qa=s(Fr,"P",{});var h1=i(qa);Cw=a(h1,"Returns the training "),om=s(h1,"CODE",{});var G8=i(om);Nw=a(G8,"DataLoader"),G8.forEach(o),Uw=a(h1,"."),h1.forEach(o),zw=d(Fr),Zt=s(Fr,"P",{});var ld=i(Zt);Lw=a(ld,"Will use no sampler if "),rm=s(ld,"CODE",{});var M8=i(rm);Fw=a(M8,"train_dataset"),M8.forEach(o),Rw=a(ld," does not implement "),am=s(ld,"CODE",{});var H8=i(am);Ww=a(H8,"__len__"),H8.forEach(o),jw=a(ld,`, a random sampler (adapted to distributed
training if necessary) otherwise.`),ld.forEach(o),Gw=d(Fr),nm=s(Fr,"P",{});var V8=i(nm);Mw=a(V8,"Subclass and override this method if you want to inject some custom behavior."),V8.forEach(o),Fr.forEach(o),Hw=d(w),mt=s(w,"DIV",{class:!0});var dd=i(mt);u(Sa.$$.fragment,dd),Vw=d(dd),ve=s(dd,"P",{});var Lt=i(ve);Bw=a(Lt,"Launch an hyperparameter search using "),sm=s(Lt,"CODE",{});var B8=i(sm);Yw=a(B8,"optuna"),B8.forEach(o),Zw=a(Lt," or "),im=s(Lt,"CODE",{});var Y8=i(im);Jw=a(Y8,"Ray Tune"),Y8.forEach(o),Xw=a(Lt," or "),lm=s(Lt,"CODE",{});var Z8=i(lm);Kw=a(Z8,"SigOpt"),Z8.forEach(o),Qw=a(Lt,`. The optimized quantity is determined
by `),dm=s(Lt,"CODE",{});var J8=i(dm);e0=a(J8,"compute_objective"),J8.forEach(o),t0=a(Lt,`, which defaults to a function returning the evaluation loss when no metric is provided,
the sum of all metrics otherwise.`),Lt.forEach(o),o0=d(dd),u(Go.$$.fragment,dd),dd.forEach(o),r0=d(w),Mo=s(w,"DIV",{class:!0});var u1=i(Mo);u(Pa.$$.fragment,u1),a0=d(u1),Ia=s(u1,"P",{});var f1=i(Ia);n0=a(f1,"Initializes a git repo in "),cm=s(f1,"CODE",{});var X8=i(cm);s0=a(X8,"self.args.hub_model_id"),X8.forEach(o),i0=a(f1,"."),f1.forEach(o),u1.forEach(o),l0=d(w),Ho=s(w,"DIV",{class:!0});var g1=i(Ho);u(Oa.$$.fragment,g1),d0=d(g1),mm=s(g1,"P",{});var K8=i(mm);c0=a(K8,`Whether or not this process is the local (e.g., on one machine if training in a distributed fashion on several
machines) main process.`),K8.forEach(o),g1.forEach(o),m0=d(w),Vo=s(w,"DIV",{class:!0});var _1=i(Vo);u(Ca.$$.fragment,_1),p0=d(_1),Na=s(_1,"P",{});var v1=i(Na);h0=a(v1,`Whether or not this process is the global main process (when training in a distributed fashion on several
machines, this is only going to be `),pm=s(v1,"CODE",{});var Q8=i(pm);u0=a(Q8,"True"),Q8.forEach(o),f0=a(v1," for one process)."),v1.forEach(o),_1.forEach(o),g0=d(w),pt=s(w,"DIV",{class:!0});var cd=i(pt);u(Ua.$$.fragment,cd),_0=d(cd),za=s(cd,"P",{});var b1=i(za);v0=a(b1,"Log "),hm=s(b1,"CODE",{});var eS=i(hm);b0=a(eS,"logs"),eS.forEach(o),y0=a(b1," on the various objects watching training."),b1.forEach(o),w0=d(cd),um=s(cd,"P",{});var tS=i(um);T0=a(tS,"Subclass and override this method to inject custom behavior."),tS.forEach(o),cd.forEach(o),E0=d(w),k=s(w,"DIV",{class:!0});var A=i(k);u(La.$$.fragment,A),$0=d(A),fm=s(A,"P",{});var oS=i(fm);k0=a(oS,"Log metrics in a specially formatted way"),oS.forEach(o),x0=d(A),gm=s(A,"P",{});var rS=i(gm);A0=a(rS,"Under distributed environment this is done only for a process with rank 0."),rS.forEach(o),D0=d(A),_m=s(A,"P",{});var aS=i(_m);q0=a(aS,"Notes on memory reports:"),aS.forEach(o),S0=d(A),Jt=s(A,"P",{});var md=i(Jt);P0=a(md,"In order to get memory usage report you need to install "),vm=s(md,"CODE",{});var nS=i(vm);I0=a(nS,"psutil"),nS.forEach(o),O0=a(md,". You can do that with "),bm=s(md,"CODE",{});var sS=i(bm);C0=a(sS,"pip install psutil"),sS.forEach(o),N0=a(md,"."),md.forEach(o),U0=d(A),ym=s(A,"P",{});var iS=i(ym);z0=a(iS,"Now when this method is run, you will see a report that will include: :"),iS.forEach(o),L0=d(A),u(Fa.$$.fragment,A),F0=d(A),wm=s(A,"P",{});var lS=i(wm);Tm=s(lS,"STRONG",{});var dS=i(Tm);R0=a(dS,"Understanding the reports:"),dS.forEach(o),lS.forEach(o),W0=d(A),Ve=s(A,"UL",{});var Rr=i(Ve);be=s(Rr,"LI",{});var Ft=i(be);j0=a(Ft,"the first segment, e.g., "),Em=s(Ft,"CODE",{});var cS=i(Em);G0=a(cS,"train__"),cS.forEach(o),M0=a(Ft,", tells you which stage the metrics are for. Reports starting with "),$m=s(Ft,"CODE",{});var mS=i($m);H0=a(mS,"init_"),mS.forEach(o),V0=a(Ft,`
will be added to the first stage that gets run. So that if only evaluation is run, the memory usage for the
`),km=s(Ft,"CODE",{});var pS=i(km);B0=a(pS,"__init__"),pS.forEach(o),Y0=a(Ft," will be reported along with the "),xm=s(Ft,"CODE",{});var hS=i(xm);Z0=a(hS,"eval_"),hS.forEach(o),J0=a(Ft," metrics."),Ft.forEach(o),X0=d(Rr),Xt=s(Rr,"LI",{});var pd=i(Xt);K0=a(pd,"the third segment, is either "),Am=s(pd,"CODE",{});var uS=i(Am);Q0=a(uS,"cpu"),uS.forEach(o),eT=a(pd," or "),Dm=s(pd,"CODE",{});var fS=i(Dm);tT=a(fS,"gpu"),fS.forEach(o),oT=a(pd,`, tells you whether it\u2019s the general RAM or the gpu0 memory
metric.`),pd.forEach(o),rT=d(Rr),fi=s(Rr,"LI",{});var bq=i(fi);qm=s(bq,"CODE",{});var gS=i(qm);aT=a(gS,"*_alloc_delta"),gS.forEach(o),nT=a(bq,` - is the difference in the used/allocated memory counter between the end and the start of the
stage - it can be negative if a function released more memory than it allocated.`),bq.forEach(o),sT=d(Rr),ht=s(Rr,"LI",{});var Vs=i(ht);Sm=s(Vs,"CODE",{});var _S=i(Sm);iT=a(_S,"*_peaked_delta"),_S.forEach(o),lT=a(Vs,` - is any extra memory that was consumed and then freed - relative to the current allocated
memory counter - it is never negative. When you look at the metrics of any stage you add up `),Pm=s(Vs,"CODE",{});var vS=i(Pm);dT=a(vS,"alloc_delta"),vS.forEach(o),cT=a(Vs,` +
`),Im=s(Vs,"CODE",{});var bS=i(Im);mT=a(bS,"peaked_delta"),bS.forEach(o),pT=a(Vs," and you know how much memory was needed to complete that stage."),Vs.forEach(o),Rr.forEach(o),hT=d(A),Om=s(A,"P",{});var yS=i(Om);uT=a(yS,`The reporting happens only for process of rank 0 and gpu 0 (if there is a gpu). Typically this is enough since the
main process does the bulk of work, but it could be not quite so if model parallel is used and then other GPUs may
use a different amount of gpu memory. This is also not the same under DataParallel where gpu0 may require much more
memory than the rest since it stores the gradient and optimizer states for all participating GPUS. Perhaps in the
future these reports will evolve to measure those too.`),yS.forEach(o),fT=d(A),Cm=s(A,"P",{});var wS=i(Cm);gT=a(wS,`The CPU RAM metric measures RSS (Resident Set Size) includes both the memory which is unique to the process and the
memory shared with other processes. It is important to note that it does not include swapped out memory, so the
reports could be imprecise.`),wS.forEach(o),_T=d(A),Ra=s(A,"P",{});var y1=i(Ra);vT=a(y1,`The CPU peak memory is measured using a sampling thread. Due to python\u2019s GIL it may miss some of the peak memory if
that thread didn\u2019t get a chance to run when the highest memory was used. Therefore this report can be less than
reality. Using `),Nm=s(y1,"CODE",{});var TS=i(Nm);bT=a(TS,"tracemalloc"),TS.forEach(o),yT=a(y1,` would have reported the exact peak memory, but it doesn\u2019t report memory allocations
outside of python. So if some C++ CUDA extension allocated its own memory it won\u2019t be reported. And therefore it
was dropped in favor of the memory sampling approach, which reads the current process memory usage.`),y1.forEach(o),wT=d(A),Be=s(A,"P",{});var Wr=i(Be);TT=a(Wr,"The GPU allocated and peak memory reporting is done with "),Um=s(Wr,"CODE",{});var ES=i(Um);ET=a(ES,"torch.cuda.memory_allocated()"),ES.forEach(o),$T=a(Wr,` and
`),zm=s(Wr,"CODE",{});var $S=i(zm);kT=a($S,"torch.cuda.max_memory_allocated()"),$S.forEach(o),xT=a(Wr,`. This metric reports only \u201Cdeltas\u201D for pytorch-specific allocations, as
`),Lm=s(Wr,"CODE",{});var kS=i(Lm);AT=a(kS,"torch.cuda"),kS.forEach(o),DT=a(Wr,` memory management system doesn\u2019t track any memory allocated outside of pytorch. For example, the very
first cuda call typically loads CUDA kernels, which may take from 0.5 to 2GB of GPU memory.`),Wr.forEach(o),qT=d(A),te=s(A,"P",{});var Fe=i(te);ST=a(Fe,"Note that this tracker doesn\u2019t account for memory allocations outside of "),gi=s(Fe,"A",{href:!0});var xS=i(gi);PT=a(xS,"Trainer"),xS.forEach(o),IT=a(Fe,"\u2019s "),Fm=s(Fe,"CODE",{});var AS=i(Fm);OT=a(AS,"__init__"),AS.forEach(o),CT=a(Fe,", "),Rm=s(Fe,"CODE",{});var DS=i(Rm);NT=a(DS,"train"),DS.forEach(o),UT=a(Fe,`,
`),Wm=s(Fe,"CODE",{});var qS=i(Wm);zT=a(qS,"evaluate"),qS.forEach(o),LT=a(Fe," and "),jm=s(Fe,"CODE",{});var SS=i(jm);FT=a(SS,"predict"),SS.forEach(o),RT=a(Fe," calls."),Fe.forEach(o),WT=d(A),I=s(A,"P",{});var U=i(I);jT=a(U,"Because "),Gm=s(U,"CODE",{});var PS=i(Gm);GT=a(PS,"evaluation"),PS.forEach(o),MT=a(U," calls may happen during "),Mm=s(U,"CODE",{});var IS=i(Mm);HT=a(IS,"train"),IS.forEach(o),VT=a(U,`, we can\u2019t handle nested invocations because
`),Hm=s(U,"CODE",{});var OS=i(Hm);BT=a(OS,"torch.cuda.max_memory_allocated"),OS.forEach(o),YT=a(U," is a single counter, so if it gets reset by a nested eval call, "),Vm=s(U,"CODE",{});var CS=i(Vm);ZT=a(CS,"train"),CS.forEach(o),JT=a(U,`\u2019s tracker
will report incorrect info. If this `),Wa=s(U,"A",{href:!0,rel:!0});var NS=i(Wa);XT=a(NS,"pytorch issue"),NS.forEach(o),KT=a(U,` gets resolved
it will be possible to change this class to be re-entrant. Until then we will only track the outer level of
`),Bm=s(U,"CODE",{});var US=i(Bm);QT=a(US,"train"),US.forEach(o),eE=a(U,", "),Ym=s(U,"CODE",{});var zS=i(Ym);tE=a(zS,"evaluate"),zS.forEach(o),oE=a(U," and "),Zm=s(U,"CODE",{});var LS=i(Zm);rE=a(LS,"predict"),LS.forEach(o),aE=a(U," methods. Which means that if "),Jm=s(U,"CODE",{});var FS=i(Jm);nE=a(FS,"eval"),FS.forEach(o),sE=a(U," is called during "),Xm=s(U,"CODE",{});var RS=i(Xm);iE=a(RS,"train"),RS.forEach(o),lE=a(U,`, it\u2019s the latter
that will account for its memory usage and that of the former.`),U.forEach(o),dE=d(A),ye=s(A,"P",{});var Rt=i(ye);cE=a(Rt,"This also means that if any other tool that is used along the "),_i=s(Rt,"A",{href:!0});var WS=i(_i);mE=a(WS,"Trainer"),WS.forEach(o),pE=a(Rt,` calls
`),Km=s(Rt,"CODE",{});var jS=i(Km);hE=a(jS,"torch.cuda.reset_peak_memory_stats"),jS.forEach(o),uE=a(Rt,", the gpu peak memory stats could be invalid. And the "),vi=s(Rt,"A",{href:!0});var GS=i(vi);fE=a(GS,"Trainer"),GS.forEach(o),gE=a(Rt,` will disrupt
the normal behavior of any such tools that rely on calling `),Qm=s(Rt,"CODE",{});var MS=i(Qm);_E=a(MS,"torch.cuda.reset_peak_memory_stats"),MS.forEach(o),vE=a(Rt," themselves."),Rt.forEach(o),bE=d(A),ep=s(A,"P",{});var HS=i(ep);yE=a(HS,"For best performance you may want to consider turning the memory profiling off for production runs."),HS.forEach(o),A.forEach(o),wE=d(w),Bo=s(w,"DIV",{class:!0});var w1=i(Bo);u(ja.$$.fragment,w1),TE=d(w1),tp=s(w1,"P",{});var VS=i(tp);EE=a(VS,"Reformat Trainer metrics values to a human-readable format"),VS.forEach(o),w1.forEach(o),$E=d(w),Yo=s(w,"DIV",{class:!0});var T1=i(Yo);u(Ga.$$.fragment,T1),kE=d(T1),Ma=s(T1,"P",{});var E1=i(Ma);xE=a(E1,"Helper to get number of samples in a "),op=s(E1,"CODE",{});var BS=i(op);AE=a(BS,"DataLoader"),BS.forEach(o),DE=a(E1,` by accessing its dataset. When
dataloader.dataset does not exist or has no length, estimates as best it can`),E1.forEach(o),T1.forEach(o),qE=d(w),ut=s(w,"DIV",{class:!0});var hd=i(ut);u(Ha.$$.fragment,hd),SE=d(hd),Va=s(hd,"P",{});var $1=i(Va);PE=a($1,"Remove a callback from the current list of "),rp=s($1,"CODE",{});var YS=i(rp);IE=a(YS,"TrainerCallback"),YS.forEach(o),OE=a($1," and returns it."),$1.forEach(o),CE=d(hd),Ba=s(hd,"P",{});var k1=i(Ba);NE=a(k1,"If the callback is not found, returns "),ap=s(k1,"CODE",{});var ZS=i(ap);UE=a(ZS,"None"),ZS.forEach(o),zE=a(k1," (and no error is raised)."),k1.forEach(o),hd.forEach(o),LE=d(w),Z=s(w,"DIV",{class:!0});var Re=i(Z);u(Ya.$$.fragment,Re),FE=d(Re),np=s(Re,"P",{});var JS=i(np);RE=a(JS,"Run prediction and returns predictions and potential metrics."),JS.forEach(o),WE=d(Re),Za=s(Re,"P",{});var x1=i(Za);jE=a(x1,`Depending on the dataset and your use case, your test dataset may contain labels. In that case, this method
will also return metrics, like in `),sp=s(x1,"CODE",{});var XS=i(sp);GE=a(XS,"evaluate()"),XS.forEach(o),ME=a(x1,"."),x1.forEach(o),HE=d(Re),u(Zo.$$.fragment,Re),VE=d(Re),Ja=s(Re,"P",{});var A1=i(Ja);BE=a(A1,"Returns: "),ip=s(A1,"EM",{});var KS=i(ip);YE=a(KS,"NamedTuple"),KS.forEach(o),ZE=a(A1," A namedtuple with the following keys:"),A1.forEach(o),JE=d(Re),Kt=s(Re,"UL",{});var ud=i(Kt);Qt=s(ud,"LI",{});var fd=i(Qt);XE=a(fd,"predictions ("),lp=s(fd,"CODE",{});var QS=i(lp);KE=a(QS,"np.ndarray"),QS.forEach(o),QE=a(fd,"): The predictions on "),dp=s(fd,"CODE",{});var eP=i(dp);e4=a(eP,"test_dataset"),eP.forEach(o),t4=a(fd,"."),fd.forEach(o),o4=d(ud),eo=s(ud,"LI",{});var gd=i(eo);r4=a(gd,"label_ids ("),cp=s(gd,"CODE",{});var tP=i(cp);a4=a(tP,"np.ndarray"),tP.forEach(o),n4=a(gd,", "),mp=s(gd,"EM",{});var oP=i(mp);s4=a(oP,"optional"),oP.forEach(o),i4=a(gd,"): The labels (if the dataset contained some)."),gd.forEach(o),l4=d(ud),to=s(ud,"LI",{});var _d=i(to);d4=a(_d,"metrics ("),pp=s(_d,"CODE",{});var rP=i(pp);c4=a(rP,"Dict[str, float]"),rP.forEach(o),m4=a(_d,", "),hp=s(_d,"EM",{});var aP=i(hp);p4=a(aP,"optional"),aP.forEach(o),h4=a(_d,`): The potential dictionary of metrics (if the dataset contained
labels).`),_d.forEach(o),ud.forEach(o),Re.forEach(o),u4=d(w),ft=s(w,"DIV",{class:!0});var vd=i(ft);u(Xa.$$.fragment,vd),f4=d(vd),oo=s(vd,"P",{});var bd=i(oo);g4=a(bd,"Prediction/evaluation loop, shared by "),up=s(bd,"CODE",{});var nP=i(up);_4=a(nP,"Trainer.evaluate()"),nP.forEach(o),v4=a(bd," and "),fp=s(bd,"CODE",{});var sP=i(fp);b4=a(sP,"Trainer.predict()"),sP.forEach(o),y4=a(bd,"."),bd.forEach(o),w4=d(vd),gp=s(vd,"P",{});var iP=i(gp);T4=a(iP,"Works both with or without labels."),iP.forEach(o),vd.forEach(o),E4=d(w),gt=s(w,"DIV",{class:!0});var yd=i(gt);u(Ka.$$.fragment,yd),$4=d(yd),ro=s(yd,"P",{});var wd=i(ro);k4=a(wd,"Perform an evaluation step on "),_p=s(wd,"CODE",{});var lP=i(_p);x4=a(lP,"model"),lP.forEach(o),A4=a(wd," using "),vp=s(wd,"CODE",{});var dP=i(vp);D4=a(dP,"inputs"),dP.forEach(o),q4=a(wd,"."),wd.forEach(o),S4=d(yd),bp=s(yd,"P",{});var cP=i(bp);P4=a(cP,"Subclass and override to inject custom behavior."),cP.forEach(o),yd.forEach(o),I4=d(w),Jo=s(w,"DIV",{class:!0});var D1=i(Jo);u(Qa.$$.fragment,D1),O4=d(D1),Ye=s(D1,"P",{});var jr=i(Ye);C4=a(jr,"Upload "),yp=s(jr,"EM",{});var mP=i(yp);N4=a(mP,"self.model"),mP.forEach(o),U4=a(jr," and "),wp=s(jr,"EM",{});var pP=i(wp);z4=a(pP,"self.tokenizer"),pP.forEach(o),L4=a(jr," to the \u{1F917} model hub on the repo "),Tp=s(jr,"EM",{});var hP=i(Tp);F4=a(hP,"self.args.hub_model_id"),hP.forEach(o),R4=a(jr,"."),jr.forEach(o),D1.forEach(o),W4=d(w),Xo=s(w,"DIV",{class:!0});var q1=i(Xo);u(en.$$.fragment,q1),j4=d(q1),tn=s(q1,"P",{});var S1=i(tn);G4=a(S1,"Remove a callback from the current list of "),Ep=s(S1,"CODE",{});var uP=i(Ep);M4=a(uP,"TrainerCallback"),uP.forEach(o),H4=a(S1,"."),S1.forEach(o),q1.forEach(o),V4=d(w),De=s(w,"DIV",{class:!0});var Gr=i(De);u(on.$$.fragment,Gr),B4=d(Gr),rn=s(Gr,"P",{});var P1=i(rn);Y4=a(P1,"Save metrics into a json file for that split, e.g. "),$p=s(P1,"CODE",{});var fP=i($p);Z4=a(fP,"train_results.json"),fP.forEach(o),J4=a(P1,"."),P1.forEach(o),X4=d(Gr),kp=s(Gr,"P",{});var gP=i(kp);K4=a(gP,"Under distributed environment this is done only for a process with rank 0."),gP.forEach(o),Q4=d(Gr),an=s(Gr,"P",{});var I1=i(an);e7=a(I1,"To understand the metrics please read the docstring of "),bi=s(I1,"A",{href:!0});var _P=i(bi);t7=a(_P,"log_metrics()"),_P.forEach(o),o7=a(I1,`. The only difference is that raw
unformatted numbers are saved in the current method.`),I1.forEach(o),Gr.forEach(o),r7=d(w),_t=s(w,"DIV",{class:!0});var Td=i(_t);u(nn.$$.fragment,Td),a7=d(Td),sn=s(Td,"P",{});var O1=i(sn);n7=a(O1,"Will save the model, so you can reload it using "),xp=s(O1,"CODE",{});var vP=i(xp);s7=a(vP,"from_pretrained()"),vP.forEach(o),i7=a(O1,"."),O1.forEach(o),l7=d(Td),Ap=s(Td,"P",{});var bP=i(Ap);d7=a(bP,"Will only save from the main process."),bP.forEach(o),Td.forEach(o),c7=d(w),vt=s(w,"DIV",{class:!0});var Ed=i(vt);u(ln.$$.fragment,Ed),m7=d(Ed),Dp=s(Ed,"P",{});var yP=i(Dp);p7=a(yP,"Saves the Trainer state, since Trainer.save_model saves only the tokenizer with the model"),yP.forEach(o),h7=d(Ed),qp=s(Ed,"P",{});var wP=i(qp);u7=a(wP,"Under distributed environment this is done only for a process with rank 0."),wP.forEach(o),Ed.forEach(o),f7=d(w),Ko=s(w,"DIV",{class:!0});var C1=i(Ko);u(dn.$$.fragment,C1),g7=d(C1),Sp=s(C1,"P",{});var TP=i(Sp);_7=a(TP,"Main training entry point."),TP.forEach(o),C1.forEach(o),v7=d(w),bt=s(w,"DIV",{class:!0});var $d=i(bt);u(cn.$$.fragment,$d),b7=d($d),Pp=s($d,"P",{});var EP=i(Pp);y7=a(EP,"Perform a training step on a batch of inputs."),EP.forEach(o),w7=d($d),Ip=s($d,"P",{});var $P=i(Ip);T7=a($P,"Subclass and override to inject custom behavior."),$P.forEach(o),$d.forEach(o),w.forEach(o),hg=d(t),ao=s(t,"H2",{class:!0});var N1=i(ao);Qo=s(N1,"A",{id:!0,class:!0,href:!0});var kP=i(Qo);Op=s(kP,"SPAN",{});var xP=i(Op);u(mn.$$.fragment,xP),xP.forEach(o),kP.forEach(o),E7=d(N1),Cp=s(N1,"SPAN",{});var AP=i(Cp);$7=a(AP,"Seq2SeqTrainer"),AP.forEach(o),N1.forEach(o),ug=d(t),Ze=s(t,"DIV",{class:!0});var kd=i(Ze);u(pn.$$.fragment,kd),k7=d(kd),qe=s(kd,"DIV",{class:!0});var Mr=i(qe);u(hn.$$.fragment,Mr),x7=d(Mr),Np=s(Mr,"P",{});var DP=i(Np);A7=a(DP,"Run evaluation and returns metrics."),DP.forEach(o),D7=d(Mr),un=s(Mr,"P",{});var U1=i(un);q7=a(U1,`The calling script will be responsible for providing a method to compute metrics, as they are task-dependent
(pass it to the init `),Up=s(U1,"CODE",{});var qP=i(Up);S7=a(qP,"compute_metrics"),qP.forEach(o),P7=a(U1," argument)."),U1.forEach(o),I7=d(Mr),zp=s(Mr,"P",{});var SP=i(zp);O7=a(SP,"You can also subclass and override this method to inject custom behavior."),SP.forEach(o),Mr.forEach(o),C7=d(kd),J=s(kd,"DIV",{class:!0});var We=i(J);u(fn.$$.fragment,We),N7=d(We),Lp=s(We,"P",{});var PP=i(Lp);U7=a(PP,"Run prediction and returns predictions and potential metrics."),PP.forEach(o),z7=d(We),gn=s(We,"P",{});var z1=i(gn);L7=a(z1,`Depending on the dataset and your use case, your test dataset may contain labels. In that case, this method
will also return metrics, like in `),Fp=s(z1,"CODE",{});var IP=i(Fp);F7=a(IP,"evaluate()"),IP.forEach(o),R7=a(z1,"."),z1.forEach(o),W7=d(We),u(er.$$.fragment,We),j7=d(We),_n=s(We,"P",{});var L1=i(_n);G7=a(L1,"Returns: "),Rp=s(L1,"EM",{});var OP=i(Rp);M7=a(OP,"NamedTuple"),OP.forEach(o),H7=a(L1," A namedtuple with the following keys:"),L1.forEach(o),V7=d(We),no=s(We,"UL",{});var xd=i(no);so=s(xd,"LI",{});var Ad=i(so);B7=a(Ad,"predictions ("),Wp=s(Ad,"CODE",{});var CP=i(Wp);Y7=a(CP,"np.ndarray"),CP.forEach(o),Z7=a(Ad,"): The predictions on "),jp=s(Ad,"CODE",{});var NP=i(jp);J7=a(NP,"test_dataset"),NP.forEach(o),X7=a(Ad,"."),Ad.forEach(o),K7=d(xd),io=s(xd,"LI",{});var Dd=i(io);Q7=a(Dd,"label_ids ("),Gp=s(Dd,"CODE",{});var UP=i(Gp);e$=a(UP,"np.ndarray"),UP.forEach(o),t$=a(Dd,", "),Mp=s(Dd,"EM",{});var zP=i(Mp);o$=a(zP,"optional"),zP.forEach(o),r$=a(Dd,"): The labels (if the dataset contained some)."),Dd.forEach(o),a$=d(xd),lo=s(xd,"LI",{});var qd=i(lo);n$=a(qd,"metrics ("),Hp=s(qd,"CODE",{});var LP=i(Hp);s$=a(LP,"Dict[str, float]"),LP.forEach(o),i$=a(qd,", "),Vp=s(qd,"EM",{});var FP=i(Vp);l$=a(FP,"optional"),FP.forEach(o),d$=a(qd,`): The potential dictionary of metrics (if the dataset contained
labels).`),qd.forEach(o),xd.forEach(o),We.forEach(o),kd.forEach(o),fg=d(t),co=s(t,"H2",{class:!0});var F1=i(co);tr=s(F1,"A",{id:!0,class:!0,href:!0});var RP=i(tr);Bp=s(RP,"SPAN",{});var WP=i(Bp);u(vn.$$.fragment,WP),WP.forEach(o),RP.forEach(o),c$=d(F1),Yp=s(F1,"SPAN",{});var jP=i(Yp);m$=a(jP,"TrainingArguments"),jP.forEach(o),F1.forEach(o),gg=d(t),N=s(t,"DIV",{class:!0});var j=i(N);u(bn.$$.fragment,j),p$=d(j),yn=s(j,"P",{});var R1=i(yn);h$=a(R1,"TrainingArguments is the subset of the arguments we use in our example scripts "),Zp=s(R1,"STRONG",{});var GP=i(Zp);u$=a(GP,`which relate to the training loop
itself`),GP.forEach(o),f$=a(R1,"."),R1.forEach(o),g$=d(j),mo=s(j,"P",{});var Sd=i(mo);_$=a(Sd,"Using "),yi=s(Sd,"A",{href:!0});var MP=i(yi);v$=a(MP,"HfArgumentParser"),MP.forEach(o),b$=a(Sd,` we can turn this class into
`),wn=s(Sd,"A",{href:!0,rel:!0});var HP=i(wn);y$=a(HP,"argparse"),HP.forEach(o),w$=a(Sd,` arguments that can be specified on the
command line.`),Sd.forEach(o),T$=d(j),se=s(j,"DIV",{class:!0});var Wt=i(se);u(Tn.$$.fragment,Wt),E$=d(Wt),Jp=s(Wt,"P",{});var VP=i(Jp);$$=a(VP,`Returns the log level to be used depending on whether this process is the main process of node 0, main process
of node non-0, or a non-main process.`),VP.forEach(o),k$=d(Wt),po=s(Wt,"P",{});var Pd=i(po);x$=a(Pd,"For the main process the log level defaults to "),Xp=s(Pd,"CODE",{});var BP=i(Xp);A$=a(BP,"logging.INFO"),BP.forEach(o),D$=a(Pd," unless overridden by "),Kp=s(Pd,"CODE",{});var YP=i(Kp);q$=a(YP,"log_level"),YP.forEach(o),S$=a(Pd," argument."),Pd.forEach(o),P$=d(Wt),ho=s(Wt,"P",{});var Id=i(ho);I$=a(Id,"For the replica processes the log level defaults to "),Qp=s(Id,"CODE",{});var ZP=i(Qp);O$=a(ZP,"logging.WARNING"),ZP.forEach(o),C$=a(Id," unless overridden by "),eh=s(Id,"CODE",{});var JP=i(eh);N$=a(JP,"log_level_replica"),JP.forEach(o),U$=a(Id,`
argument.`),Id.forEach(o),z$=d(Wt),En=s(Wt,"P",{});var W1=i(En);L$=a(W1,"The choice between the main and replica process settings is made according to the return value of "),th=s(W1,"CODE",{});var XP=i(th);F$=a(XP,"should_log"),XP.forEach(o),R$=a(W1,"."),W1.forEach(o),Wt.forEach(o),W$=d(j),or=s(j,"DIV",{class:!0});var j1=i(or);u($n.$$.fragment,j1),j$=d(j1),oh=s(j1,"P",{});var KP=i(oh);G$=a(KP,"Get number of steps used for a linear warmup."),KP.forEach(o),j1.forEach(o),M$=d(j),yt=s(j,"DIV",{class:!0});var Od=i(yt);u(kn.$$.fragment,Od),H$=d(Od),rh=s(Od,"P",{});var QP=i(rh);V$=a(QP,`A context manager for torch distributed environment where on needs to do something on the main process, while
blocking replicas, and when it\u2019s finished releasing the replicas.`),QP.forEach(o),B$=d(Od),uo=s(Od,"P",{});var Cd=i(uo);Y$=a(Cd,"One such use is for "),ah=s(Cd,"CODE",{});var eI=i(ah);Z$=a(eI,"datasets"),eI.forEach(o),J$=a(Cd,"\u2019s "),nh=s(Cd,"CODE",{});var tI=i(nh);X$=a(tI,"map"),tI.forEach(o),K$=a(Cd,` feature which to be efficient should be run once on the main process,
which upon completion saves a cached version of results and which then automatically gets loaded by the
replicas.`),Cd.forEach(o),Od.forEach(o),Q$=d(j),rr=s(j,"DIV",{class:!0});var G1=i(rr);u(xn.$$.fragment,G1),e6=d(G1),An=s(G1,"P",{});var M1=i(An);t6=a(M1,"Serializes this instance while replace "),sh=s(M1,"CODE",{});var oI=i(sh);o6=a(oI,"Enum"),oI.forEach(o),r6=a(M1,` by their values (for JSON serialization support). It obfuscates
the token values by removing their value.`),M1.forEach(o),G1.forEach(o),a6=d(j),ar=s(j,"DIV",{class:!0});var H1=i(ar);u(Dn.$$.fragment,H1),n6=d(H1),ih=s(H1,"P",{});var rI=i(ih);s6=a(rI,"Serializes this instance to a JSON string."),rI.forEach(o),H1.forEach(o),i6=d(j),nr=s(j,"DIV",{class:!0});var V1=i(nr);u(qn.$$.fragment,V1),l6=d(V1),lh=s(V1,"P",{});var aI=i(lh);d6=a(aI,"Sanitized serialization to use with TensorBoard\u2019s hparams"),aI.forEach(o),V1.forEach(o),j.forEach(o),_g=d(t),fo=s(t,"H2",{class:!0});var B1=i(fo);sr=s(B1,"A",{id:!0,class:!0,href:!0});var nI=i(sr);dh=s(nI,"SPAN",{});var sI=i(dh);u(Sn.$$.fragment,sI),sI.forEach(o),nI.forEach(o),c6=d(B1),ch=s(B1,"SPAN",{});var iI=i(ch);m6=a(iI,"Seq2SeqTrainingArguments"),iI.forEach(o),B1.forEach(o),vg=d(t),Je=s(t,"DIV",{class:!0});var Nd=i(Je);u(Pn.$$.fragment,Nd),p6=d(Nd),In=s(Nd,"P",{});var Y1=i(In);h6=a(Y1,"TrainingArguments is the subset of the arguments we use in our example scripts "),mh=s(Y1,"STRONG",{});var lI=i(mh);u6=a(lI,`which relate to the training loop
itself`),lI.forEach(o),f6=a(Y1,"."),Y1.forEach(o),g6=d(Nd),go=s(Nd,"P",{});var Ud=i(go);_6=a(Ud,"Using "),wi=s(Ud,"A",{href:!0});var dI=i(wi);v6=a(dI,"HfArgumentParser"),dI.forEach(o),b6=a(Ud,` we can turn this class into
`),On=s(Ud,"A",{href:!0,rel:!0});var cI=i(On);y6=a(cI,"argparse"),cI.forEach(o),w6=a(Ud,` arguments that can be specified on the
command line.`),Ud.forEach(o),Nd.forEach(o),bg=d(t),_o=s(t,"H2",{class:!0});var Z1=i(_o);ir=s(Z1,"A",{id:!0,class:!0,href:!0});var mI=i(ir);ph=s(mI,"SPAN",{});var pI=i(ph);u(Cn.$$.fragment,pI),pI.forEach(o),mI.forEach(o),T6=d(Z1),hh=s(Z1,"SPAN",{});var hI=i(hh);E6=a(hI,"Checkpoints"),hI.forEach(o),Z1.forEach(o),yg=d(t),ie=s(t,"P",{});var jt=i(ie);$6=a(jt,"By default, "),Ti=s(jt,"A",{href:!0});var uI=i(Ti);k6=a(uI,"Trainer"),uI.forEach(o),x6=a(jt," will save all checkpoints in the "),uh=s(jt,"CODE",{});var fI=i(uh);A6=a(fI,"output_dir"),fI.forEach(o),D6=a(jt,` you set in the
`),Ei=s(jt,"A",{href:!0});var gI=i(Ei);q6=a(gI,"TrainingArguments"),gI.forEach(o),S6=a(jt," you are using. Those will go in subfolder named "),fh=s(jt,"CODE",{});var _I=i(fh);P6=a(_I,"checkpoint-xxx"),_I.forEach(o),I6=a(jt,` with xxx
being the step at which the training was at.`),jt.forEach(o),wg=d(t),lr=s(t,"P",{});var J1=i(lr);O6=a(J1,"Resuming training from a checkpoint can be done when calling "),$i=s(J1,"A",{href:!0});var vI=i($i);C6=a(vI,"Trainer.train()"),vI.forEach(o),N6=a(J1," with either:"),J1.forEach(o),Tg=d(t),dr=s(t,"UL",{});var X1=i(dr);ki=s(X1,"LI",{});var yq=i(ki);gh=s(yq,"CODE",{});var bI=i(gh);U6=a(bI,"resume_from_checkpoint=True"),bI.forEach(o),z6=a(yq," which will resume training from the latest checkpoint"),yq.forEach(o),L6=d(X1),xi=s(X1,"LI",{});var wq=i(xi);_h=s(wq,"CODE",{});var yI=i(_h);F6=a(yI,"resume_from_checkpoint=checkpoint_dir"),yI.forEach(o),R6=a(wq,` which will resume training from the specific checkpoint in the directory
passed.`),wq.forEach(o),X1.forEach(o),Eg=d(t),Se=s(t,"P",{});var Hr=i(Se);W6=a(Hr,"In addition, you can easily save your checkpoints on the Model Hub when using "),vh=s(Hr,"CODE",{});var wI=i(vh);j6=a(wI,"push_to_hub=True"),wI.forEach(o),G6=a(Hr,`. By default, all
the models saved in intermediate checkpoints are saved in different commits, but not the optimizer state. You can adapt
the `),bh=s(Hr,"CODE",{});var TI=i(bh);M6=a(TI,"hub-strategy"),TI.forEach(o),H6=a(Hr," value of your "),Ai=s(Hr,"A",{href:!0});var EI=i(Ai);V6=a(EI,"TrainingArguments"),EI.forEach(o),B6=a(Hr," to either:"),Hr.forEach(o),$g=d(t),cr=s(t,"UL",{});var K1=i(cr);mr=s(K1,"LI",{});var ng=i(mr);yh=s(ng,"CODE",{});var $I=i(yh);Y6=a($I,'"checkpoint"'),$I.forEach(o),Z6=a(ng,`: the latest checkpoint is also pushed in a subfolder named last-checkpoint, allowing you to
resume training easily with `),wh=s(ng,"CODE",{});var kI=i(wh);J6=a(kI,'trainer.train(resume_from_checkpoint="output_dir/last-checkpoint")'),kI.forEach(o),X6=a(ng,"."),ng.forEach(o),K6=d(K1),Di=s(K1,"LI",{});var Tq=i(Di);Th=s(Tq,"CODE",{});var xI=i(Th);Q6=a(xI,'"all_checkpoints"'),xI.forEach(o),ek=a(Tq,`: all checkpoints are pushed like they appear in the output folder (so you will get one
checkpoint folder per folder in your final repository)`),Tq.forEach(o),K1.forEach(o),kg=d(t),vo=s(t,"H2",{class:!0});var Q1=i(vo);pr=s(Q1,"A",{id:!0,class:!0,href:!0});var AI=i(pr);Eh=s(AI,"SPAN",{});var DI=i(Eh);u(Nn.$$.fragment,DI),DI.forEach(o),AI.forEach(o),tk=d(Q1),$h=s(Q1,"SPAN",{});var qI=i($h);ok=a(qI,"Logging"),qI.forEach(o),Q1.forEach(o),xg=d(t),Pe=s(t,"P",{});var Vr=i(Pe);rk=a(Vr,"By default "),qi=s(Vr,"A",{href:!0});var SI=i(qi);ak=a(SI,"Trainer"),SI.forEach(o),nk=a(Vr," will use "),kh=s(Vr,"CODE",{});var PI=i(kh);sk=a(PI,"logging.INFO"),PI.forEach(o),ik=a(Vr," for the main process and "),xh=s(Vr,"CODE",{});var II=i(xh);lk=a(II,"logging.WARNING"),II.forEach(o),dk=a(Vr," for the replicas if any."),Vr.forEach(o),Ag=d(t),wt=s(t,"P",{});var zd=i(wt);ck=a(zd,"These defaults can be overridden to use any of the 5 "),Ah=s(zd,"CODE",{});var OI=i(Ah);mk=a(OI,"logging"),OI.forEach(o),pk=a(zd," levels with "),Si=s(zd,"A",{href:!0});var CI=i(Si);hk=a(CI,"TrainingArguments"),CI.forEach(o),uk=a(zd,`\u2019s
arguments:`),zd.forEach(o),Dg=d(t),hr=s(t,"UL",{});var eb=i(hr);Pi=s(eb,"LI",{});var Eq=i(Pi);Dh=s(Eq,"CODE",{});var NI=i(Dh);fk=a(NI,"log_level"),NI.forEach(o),gk=a(Eq," - for the main process"),Eq.forEach(o),_k=d(eb),Ii=s(eb,"LI",{});var $q=i(Ii);qh=s($q,"CODE",{});var UI=i(qh);vk=a(UI,"log_level_replica"),UI.forEach(o),bk=a($q," - for the replicas"),$q.forEach(o),eb.forEach(o),qg=d(t),Ie=s(t,"P",{});var Br=i(Ie);yk=a(Br,"Further, if "),Oi=s(Br,"A",{href:!0});var zI=i(Oi);wk=a(zI,"TrainingArguments"),zI.forEach(o),Tk=a(Br,"\u2019s "),Sh=s(Br,"CODE",{});var LI=i(Sh);Ek=a(LI,"log_on_each_node"),LI.forEach(o),$k=a(Br," is set to "),Ph=s(Br,"CODE",{});var FI=i(Ph);kk=a(FI,"False"),FI.forEach(o),xk=a(Br,` only the main node will
use the log level settings for its main process, all other nodes will use the log level settings for replicas.`),Br.forEach(o),Sg=d(t),X=s(t,"P",{});var je=i(X);Ak=a(je,"Note that "),Ci=s(je,"A",{href:!0});var RI=i(Ci);Dk=a(RI,"Trainer"),RI.forEach(o),qk=a(je," is going to set "),Ih=s(je,"CODE",{});var WI=i(Ih);Sk=a(WI,"transformers"),WI.forEach(o),Pk=a(je,`\u2019s log level separately for each node in its
`),Oh=s(je,"CODE",{});var jI=i(Oh);Ik=a(jI,"Trainer.__init__()"),jI.forEach(o),Ok=a(je,`. So you may want to set this sooner (see the next example) if you tap into other
`),Ch=s(je,"CODE",{});var GI=i(Ch);Ck=a(GI,"transformers"),GI.forEach(o),Nk=a(je," functionality before creating the "),Ni=s(je,"A",{href:!0});var MI=i(Ni);Uk=a(MI,"Trainer"),MI.forEach(o),zk=a(je," object."),je.forEach(o),Pg=d(t),Ui=s(t,"P",{});var HI=i(Ui);Lk=a(HI,"Here is an example of how this can be used in an application:"),HI.forEach(o),Ig=d(t),u(Un.$$.fragment,t),Og=d(t),zi=s(t,"P",{});var VI=i(zi);Fk=a(VI,`And then if you only want to see warnings on the main node and all other nodes to not print any most likely duplicated
warnings you could run it as:`),VI.forEach(o),Cg=d(t),u(zn.$$.fragment,t),Ng=d(t),Li=s(t,"P",{});var BI=i(Li);Rk=a(BI,`In the multi-node environment if you also don\u2019t want the logs to repeat for each node\u2019s main process, you will want to
change the above to:`),BI.forEach(o),Ug=d(t),u(Ln.$$.fragment,t),zg=d(t),Fi=s(t,"P",{});var YI=i(Fi);Wk=a(YI,`and then only the main process of the first node will log at the \u201Cwarning\u201D level, and all other processes on the main
node and all processes on other nodes will log at the \u201Cerror\u201D level.`),YI.forEach(o),Lg=d(t),Ri=s(t,"P",{});var ZI=i(Ri);jk=a(ZI,"If you need your application to be as quiet as possible you could do:"),ZI.forEach(o),Fg=d(t),u(Fn.$$.fragment,t),Rg=d(t),ur=s(t,"P",{});var tb=i(ur);Gk=a(tb,"(add "),Nh=s(tb,"CODE",{});var JI=i(Nh);Mk=a(JI,"--log_on_each_node 0"),JI.forEach(o),Hk=a(tb," if on multi-node environment)"),tb.forEach(o),Wg=d(t),bo=s(t,"H2",{class:!0});var ob=i(bo);fr=s(ob,"A",{id:!0,class:!0,href:!0});var XI=i(fr);Uh=s(XI,"SPAN",{});var KI=i(Uh);u(Rn.$$.fragment,KI),KI.forEach(o),XI.forEach(o),Vk=d(ob),zh=s(ob,"SPAN",{});var QI=i(zh);Bk=a(QI,"Randomness"),QI.forEach(o),ob.forEach(o),jg=d(t),le=s(t,"P",{});var Gt=i(le);Yk=a(Gt,"When resuming from a checkpoint generated by "),Wi=s(Gt,"A",{href:!0});var eO=i(Wi);Zk=a(eO,"Trainer"),eO.forEach(o),Jk=a(Gt,` all efforts are made to restore the
`),Lh=s(Gt,"EM",{});var tO=i(Lh);Xk=a(tO,"python"),tO.forEach(o),Kk=a(Gt,", "),Fh=s(Gt,"EM",{});var oO=i(Fh);Qk=a(oO,"numpy"),oO.forEach(o),e3=a(Gt," and "),Rh=s(Gt,"EM",{});var rO=i(Rh);t3=a(rO,"pytorch"),rO.forEach(o),o3=a(Gt,` RNG states to the same states as they were at the moment of saving that checkpoint,
which should make the \u201Cstop and resume\u201D style of training as close as possible to non-stop training.`),Gt.forEach(o),Gg=d(t),Tt=s(t,"P",{});var Ld=i(Tt);r3=a(Ld,`However, due to various default non-deterministic pytorch settings this might not fully work. If you want full
determinism please refer to `),Wn=s(Ld,"A",{href:!0,rel:!0});var aO=i(Wn);a3=a(aO,"Controlling sources of randomness"),aO.forEach(o),n3=a(Ld,`. As explained in the document, that some of those settings
that make things deterministic (.e.g., `),Wh=s(Ld,"CODE",{});var nO=i(Wh);s3=a(nO,"torch.backends.cudnn.deterministic"),nO.forEach(o),i3=a(Ld,`) may slow things down, therefore this
can\u2019t be done by default, but you can enable those yourself if needed.`),Ld.forEach(o),Mg=d(t),yo=s(t,"H2",{class:!0});var rb=i(yo);gr=s(rb,"A",{id:!0,class:!0,href:!0});var sO=i(gr);jh=s(sO,"SPAN",{});var iO=i(jh);u(jn.$$.fragment,iO),iO.forEach(o),sO.forEach(o),l3=d(rb),Gh=s(rb,"SPAN",{});var lO=i(Gh);d3=a(lO,"Specific GPUs Selection"),lO.forEach(o),rb.forEach(o),Hg=d(t),ji=s(t,"P",{});var dO=i(ji);c3=a(dO,"Let\u2019s discuss how you can tell your program which GPUs are to be used and in what order."),dO.forEach(o),Vg=d(t),_r=s(t,"P",{});var ab=i(_r);m3=a(ab,"When using "),Gn=s(ab,"A",{href:!0,rel:!0});var cO=i(Gn);Mh=s(cO,"CODE",{});var mO=i(Mh);p3=a(mO,"DistributedDataParallel"),mO.forEach(o),cO.forEach(o),h3=a(ab," to use only a subset of your GPUs, you simply specify the number of GPUs to use. For example, if you have 4 GPUs, but you wish to use the first 2 you can do:"),ab.forEach(o),Bg=d(t),u(Mn.$$.fragment,t),Yg=d(t),Et=s(t,"P",{});var Fd=i(Et);u3=a(Fd,"if you have either "),Hn=s(Fd,"A",{href:!0,rel:!0});var pO=i(Hn);Hh=s(pO,"CODE",{});var hO=i(Hh);f3=a(hO,"accelerate"),hO.forEach(o),pO.forEach(o),g3=a(Fd," or "),Vn=s(Fd,"A",{href:!0,rel:!0});var uO=i(Vn);Vh=s(uO,"CODE",{});var fO=i(Vh);_3=a(fO,"deepspeed"),fO.forEach(o),uO.forEach(o),v3=a(Fd," installed you can also accomplish the same by using one of:"),Fd.forEach(o),Zg=d(t),u(Bn.$$.fragment,t),Jg=d(t),u(Yn.$$.fragment,t),Xg=d(t),vr=s(t,"P",{});var nb=i(vr);b3=a(nb,"You don\u2019t need to use the Accelerate or "),Gi=s(nb,"A",{href:!0});var gO=i(Gi);y3=a(gO,"the Deepspeed integration"),gO.forEach(o),w3=a(nb," features to use these launchers."),nb.forEach(o),Kg=d(t),Mi=s(t,"P",{});var _O=i(Mi);T3=a(_O,"Until now you were able to tell the program how many GPUs to use. Now let\u2019s discuss how to select specific GPUs and control their order."),_O.forEach(o),Qg=d(t),Hi=s(t,"P",{});var vO=i(Hi);E3=a(vO,"The following environment variables help you control which GPUs to use and their order."),vO.forEach(o),e_=d(t),Vi=s(t,"P",{});var bO=i(Vi);Bh=s(bO,"STRONG",{});var yO=i(Bh);Yh=s(yO,"CODE",{});var wO=i(Yh);$3=a(wO,"CUDA_VISIBLE_DEVICES"),wO.forEach(o),yO.forEach(o),bO.forEach(o),t_=d(t),br=s(t,"P",{});var sb=i(br);k3=a(sb,"If you have multiple GPUs and you\u2019d like to use only 1 or a few of those GPUs, set the environment variable "),Zh=s(sb,"CODE",{});var TO=i(Zh);x3=a(TO,"CUDA_VISIBLE_DEVICES"),TO.forEach(o),A3=a(sb," to a list of the GPUs to be used."),sb.forEach(o),o_=d(t),Bi=s(t,"P",{});var EO=i(Bi);D3=a(EO,"For example, let\u2019s say you have 4 GPUs: 0, 1, 2 and 3. To run only on the physical GPUs 0 and 2, you can do:"),EO.forEach(o),r_=d(t),u(Zn.$$.fragment,t),a_=d(t),$t=s(t,"P",{});var Rd=i($t);q3=a(Rd,"So now pytorch will see only 2 GPUs, where your physical GPUs 0 and 2 are mapped to "),Jh=s(Rd,"CODE",{});var $O=i(Jh);S3=a($O,"cuda:0"),$O.forEach(o),P3=a(Rd," and "),Xh=s(Rd,"CODE",{});var kO=i(Xh);I3=a(kO,"cuda:1"),kO.forEach(o),O3=a(Rd," correspondingly."),Rd.forEach(o),n_=d(t),Yi=s(t,"P",{});var xO=i(Yi);C3=a(xO,"You can even change their order:"),xO.forEach(o),s_=d(t),u(Jn.$$.fragment,t),i_=d(t),kt=s(t,"P",{});var Wd=i(kt);N3=a(Wd,"Here your physical GPUs 0 and 2 are mapped to "),Kh=s(Wd,"CODE",{});var AO=i(Kh);U3=a(AO,"cuda:1"),AO.forEach(o),z3=a(Wd," and "),Qh=s(Wd,"CODE",{});var DO=i(Qh);L3=a(DO,"cuda:0"),DO.forEach(o),F3=a(Wd," correspondingly."),Wd.forEach(o),l_=d(t),xt=s(t,"P",{});var jd=i(xt);R3=a(jd,"The above examples were all for "),eu=s(jd,"CODE",{});var qO=i(eu);W3=a(qO,"DistributedDataParallel"),qO.forEach(o),j3=a(jd," use pattern, but the same method works for "),Xn=s(jd,"A",{href:!0,rel:!0});var SO=i(Xn);tu=s(SO,"CODE",{});var PO=i(tu);G3=a(PO,"DataParallel"),PO.forEach(o),SO.forEach(o),M3=a(jd," as well:"),jd.forEach(o),d_=d(t),u(Kn.$$.fragment,t),c_=d(t),Zi=s(t,"P",{});var IO=i(Zi);H3=a(IO,"To emulate an environment without GPUs simply set this environment variable to an empty value like so:"),IO.forEach(o),m_=d(t),u(Qn.$$.fragment,t),p_=d(t),Ji=s(t,"P",{});var OO=i(Ji);V3=a(OO,"As with any environment variable you can, of course, export those instead of adding these to the command line, as in:"),OO.forEach(o),h_=d(t),u(es.$$.fragment,t),u_=d(t),Xi=s(t,"P",{});var CO=i(Xi);B3=a(CO,"but this approach can be confusing since you may forget you set up the environment variable earlier and not understand why the wrong GPUs are used. Therefore, it\u2019s a common practice to set the environment variable just for a specific run on the same command line as it\u2019s shown in most examples of this section."),CO.forEach(o),f_=d(t),Ki=s(t,"P",{});var NO=i(Ki);ou=s(NO,"STRONG",{});var UO=i(ou);ru=s(UO,"CODE",{});var zO=i(ru);Y3=a(zO,"CUDA_DEVICE_ORDER"),zO.forEach(o),UO.forEach(o),NO.forEach(o),g_=d(t),yr=s(t,"P",{});var ib=i(yr);Z3=a(ib,"There is an additional environment variable "),au=s(ib,"CODE",{});var LO=i(au);J3=a(LO,"CUDA_DEVICE_ORDER"),LO.forEach(o),X3=a(ib," that controls how the physical devices are ordered. The two choices are:"),ib.forEach(o),__=d(t),Qi=s(t,"OL",{});var FO=i(Qi);ts=s(FO,"LI",{});var lb=i(ts);K3=a(lb,"ordered by PCIe bus IDs (matches "),nu=s(lb,"CODE",{});var RO=i(nu);Q3=a(RO,"nvidia-smi"),RO.forEach(o),ex=a(lb,"\u2019s order) - this is the default."),lb.forEach(o),FO.forEach(o),v_=d(t),u(os.$$.fragment,t),b_=d(t),rs=s(t,"OL",{start:!0});var WO=i(rs);su=s(WO,"LI",{});var jO=i(su);tx=a(jO,"ordered by GPU compute capabilities"),jO.forEach(o),WO.forEach(o),y_=d(t),u(as.$$.fragment,t),w_=d(t),At=s(t,"P",{});var Gd=i(At);ox=a(Gd,"Most of the time you don\u2019t need to care about this environment variable, but it\u2019s very helpful if you have a lopsided setup where you have an old and a new GPUs physically inserted in such a way so that the slow older card appears to be first. One way to fix that is to swap the cards. But if you can\u2019t swap the cards (e.g., if the cooling of the devices gets impacted) then setting "),iu=s(Gd,"CODE",{});var GO=i(iu);rx=a(GO,"CUDA_DEVICE_ORDER=FASTEST_FIRST"),GO.forEach(o),ax=a(Gd," will always put the newer faster card first. It\u2019ll be somewhat confusing though since "),lu=s(Gd,"CODE",{});var MO=i(lu);nx=a(MO,"nvidia-smi"),MO.forEach(o),sx=a(Gd," will still report them in the PCIe order."),Gd.forEach(o),T_=d(t),el=s(t,"P",{});var HO=i(el);ix=a(HO,"The other solution to swapping the order is to use:"),HO.forEach(o),E_=d(t),u(ns.$$.fragment,t),$_=d(t),tl=s(t,"P",{});var VO=i(tl);lx=a(VO,"In this example we are working with just 2 GPUs, but of course the same would apply to as many GPUs as your computer has."),VO.forEach(o),k_=d(t),wr=s(t,"P",{});var db=i(wr);dx=a(db,"Also if you do set this environment variable it\u2019s the best to set it in your "),du=s(db,"CODE",{});var BO=i(du);cx=a(BO,"~/.bashrc"),BO.forEach(o),mx=a(db," file or some other startup config file and forget about it."),db.forEach(o),x_=d(t),wo=s(t,"H2",{class:!0});var cb=i(wo);Tr=s(cb,"A",{id:!0,class:!0,href:!0});var YO=i(Tr);cu=s(YO,"SPAN",{});var ZO=i(cu);u(ss.$$.fragment,ZO),ZO.forEach(o),YO.forEach(o),px=d(cb),mu=s(cb,"SPAN",{});var JO=i(mu);hx=a(JO,"Trainer Integrations"),JO.forEach(o),cb.forEach(o),A_=d(t),Er=s(t,"P",{});var mb=i(Er);ux=a(mb,"The "),ol=s(mb,"A",{href:!0});var XO=i(ol);fx=a(XO,"Trainer"),XO.forEach(o),gx=a(mb,` has been extended to support libraries that may dramatically improve your training
time and fit much bigger models.`),mb.forEach(o),D_=d(t),Oe=s(t,"P",{});var Yr=i(Oe);_x=a(Yr,"Currently it supports third party solutions, "),is=s(Yr,"A",{href:!0,rel:!0});var KO=i(is);vx=a(KO,"DeepSpeed"),KO.forEach(o),bx=a(Yr," and "),ls=s(Yr,"A",{href:!0,rel:!0});var QO=i(ls);yx=a(QO,"FairScale"),QO.forEach(o),wx=a(Yr,", which implement parts of the paper "),ds=s(Yr,"A",{href:!0,rel:!0});var eC=i(ds);Tx=a(eC,`ZeRO: Memory Optimizations
Toward Training Trillion Parameter Models, by Samyam Rajbhandari, Jeff Rasley, Olatunji Ruwase, Yuxiong He`),eC.forEach(o),Ex=a(Yr,"."),Yr.forEach(o),q_=d(t),rl=s(t,"P",{});var tC=i(rl);$x=a(tC,"This provided support is new and experimental as of this writing."),tC.forEach(o),S_=d(t),al=s(t,"A",{id:!0}),i(al).forEach(o),P_=d(t),To=s(t,"H3",{class:!0});var pb=i(To);$r=s(pb,"A",{id:!0,class:!0,href:!0});var oC=i($r);pu=s(oC,"SPAN",{});var rC=i(pu);u(cs.$$.fragment,rC),rC.forEach(o),oC.forEach(o),kx=d(pb),hu=s(pb,"SPAN",{});var aC=i(hu);xx=a(aC,"CUDA Extension Installation Notes"),aC.forEach(o),pb.forEach(o),I_=d(t),nl=s(t,"P",{});var nC=i(nl);Ax=a(nC,"As of this writing, both FairScale and Deepspeed require compilation of CUDA C++ code, before they can be used."),nC.forEach(o),O_=d(t),Dt=s(t,"P",{});var Md=i(Dt);Dx=a(Md,"While all installation issues should be dealt with through the corresponding GitHub Issues of "),ms=s(Md,"A",{href:!0,rel:!0});var sC=i(ms);qx=a(sC,"FairScale"),sC.forEach(o),Sx=a(Md," and "),ps=s(Md,"A",{href:!0,rel:!0});var iC=i(ps);Px=a(iC,"Deepspeed"),iC.forEach(o),Ix=a(Md,`, there are a few common issues that one may encounter while building
any PyTorch extension that needs to build CUDA extensions.`),Md.forEach(o),C_=d(t),sl=s(t,"P",{});var lC=i(sl);Ox=a(lC,"Therefore, if you encounter a CUDA-related build issue while doing one of the following or both:"),lC.forEach(o),N_=d(t),u(hs.$$.fragment,t),U_=d(t),il=s(t,"P",{});var dC=i(il);Cx=a(dC,"please, read the following notes first."),dC.forEach(o),z_=d(t),qt=s(t,"P",{});var Hd=i(qt);Nx=a(Hd,"In these notes we give examples for what to do when "),uu=s(Hd,"CODE",{});var cC=i(uu);Ux=a(cC,"pytorch"),cC.forEach(o),zx=a(Hd," has been built with CUDA "),fu=s(Hd,"CODE",{});var mC=i(fu);Lx=a(mC,"10.2"),mC.forEach(o),Fx=a(Hd,`. If your situation is
different remember to adjust the version number to the one you are after.`),Hd.forEach(o),L_=d(t),Eo=s(t,"H4",{class:!0});var hb=i(Eo);kr=s(hb,"A",{id:!0,class:!0,href:!0});var pC=i(kr);gu=s(pC,"SPAN",{});var hC=i(gu);u(us.$$.fragment,hC),hC.forEach(o),pC.forEach(o),Rx=d(hb),_u=s(hb,"SPAN",{});var uC=i(_u);Wx=a(uC,"Possible problem #1"),uC.forEach(o),hb.forEach(o),F_=d(t),ll=s(t,"P",{});var fC=i(ll);jx=a(fC,`While, Pytorch comes with its own CUDA toolkit, to build these two projects you must have an identical version of CUDA
installed system-wide.`),fC.forEach(o),R_=d(t),Ce=s(t,"P",{});var Zr=i(Ce);Gx=a(Zr,"For example, if you installed "),vu=s(Zr,"CODE",{});var gC=i(vu);Mx=a(gC,"pytorch"),gC.forEach(o),Hx=a(Zr," with "),bu=s(Zr,"CODE",{});var _C=i(bu);Vx=a(_C,"cudatoolkit==10.2"),_C.forEach(o),Bx=a(Zr,` in the Python environment, you also need to have
CUDA `),yu=s(Zr,"CODE",{});var vC=i(yu);Yx=a(vC,"10.2"),vC.forEach(o),Zx=a(Zr," installed system-wide."),Zr.forEach(o),W_=d(t),St=s(t,"P",{});var Vd=i(St);Jx=a(Vd,"The exact location may vary from system to system, but "),wu=s(Vd,"CODE",{});var bC=i(wu);Xx=a(bC,"/usr/local/cuda-10.2"),bC.forEach(o),Kx=a(Vd,` is the most common location on many
Unix systems. When CUDA is correctly set up and added to the `),Tu=s(Vd,"CODE",{});var yC=i(Tu);Qx=a(yC,"PATH"),yC.forEach(o),e5=a(Vd,` environment variable, one can find the
installation location by doing:`),Vd.forEach(o),j_=d(t),u(fs.$$.fragment,t),G_=d(t),xr=s(t,"P",{});var ub=i(xr);t5=a(ub,`If you don\u2019t have CUDA installed system-wide, install it first. You will find the instructions by using your favorite
search engine. For example, if you\u2019re on Ubuntu you may want to search for: `),gs=s(ub,"A",{href:!0,rel:!0});var wC=i(gs);o5=a(wC,"ubuntu cuda 10.2 install"),wC.forEach(o),r5=a(ub,"."),ub.forEach(o),M_=d(t),$o=s(t,"H4",{class:!0});var fb=i($o);Ar=s(fb,"A",{id:!0,class:!0,href:!0});var TC=i(Ar);Eu=s(TC,"SPAN",{});var EC=i(Eu);u(_s.$$.fragment,EC),EC.forEach(o),TC.forEach(o),a5=d(fb),$u=s(fb,"SPAN",{});var $C=i($u);n5=a($C,"Possible problem #2"),$C.forEach(o),fb.forEach(o),H_=d(t),dl=s(t,"P",{});var kC=i(dl);s5=a(kC,`Another possible common problem is that you may have more than one CUDA toolkit installed system-wide. For example you
may have:`),kC.forEach(o),V_=d(t),u(vs.$$.fragment,t),B_=d(t),Pt=s(t,"P",{});var Bd=i(Pt);i5=a(Bd,"Now, in this situation you need to make sure that your "),ku=s(Bd,"CODE",{});var xC=i(ku);l5=a(xC,"PATH"),xC.forEach(o),d5=a(Bd," and "),xu=s(Bd,"CODE",{});var AC=i(xu);c5=a(AC,"LD_LIBRARY_PATH"),AC.forEach(o),m5=a(Bd,` environment variables contain
the correct paths to the desired CUDA version. Typically, package installers will set these to contain whatever the
last version was installed. If you encounter the problem, where the package build fails because it can\u2019t find the right
CUDA version despite you having it installed system-wide, it means that you need to adjust the 2 aforementioned
environment variables.`),Bd.forEach(o),Y_=d(t),cl=s(t,"P",{});var DC=i(cl);p5=a(DC,"First, you may look at their contents:"),DC.forEach(o),Z_=d(t),u(bs.$$.fragment,t),J_=d(t),ml=s(t,"P",{});var qC=i(ml);h5=a(qC,"so you get an idea of what is inside."),qC.forEach(o),X_=d(t),Dr=s(t,"P",{});var gb=i(Dr);u5=a(gb,"It\u2019s possible that "),Au=s(gb,"CODE",{});var SC=i(Au);f5=a(SC,"LD_LIBRARY_PATH"),SC.forEach(o),g5=a(gb," is empty."),gb.forEach(o),K_=d(t),Xe=s(t,"P",{});var Bs=i(Xe);Du=s(Bs,"CODE",{});var PC=i(Du);_5=a(PC,"PATH"),PC.forEach(o),v5=a(Bs," lists the locations of where executables can be found and "),qu=s(Bs,"CODE",{});var IC=i(qu);b5=a(IC,"LD_LIBRARY_PATH"),IC.forEach(o),y5=a(Bs,` is for where shared libraries
are to looked for. In both cases, earlier entries have priority over the later ones. `),Su=s(Bs,"CODE",{});var OC=i(Su);w5=a(OC,":"),OC.forEach(o),T5=a(Bs,` is used to separate multiple
entries.`),Bs.forEach(o),Q_=d(t),pl=s(t,"P",{});var CC=i(pl);E5=a(CC,`Now, to tell the build program where to find the specific CUDA toolkit, insert the desired paths to be listed first by
doing:`),CC.forEach(o),ev=d(t),u(ys.$$.fragment,t),tv=d(t),hl=s(t,"P",{});var NC=i(hl);$5=a(NC,"Note that we aren\u2019t overwriting the existing values, but prepending instead."),NC.forEach(o),ov=d(t),Ne=s(t,"P",{});var Jr=i(Ne);k5=a(Jr,`Of course, adjust the version number, the full path if need be. Check that the directories you assign actually do
exist. `),Pu=s(Jr,"CODE",{});var UC=i(Pu);x5=a(UC,"lib64"),UC.forEach(o),A5=a(Jr," sub-directory is where the various CUDA "),Iu=s(Jr,"CODE",{});var zC=i(Iu);D5=a(zC,".so"),zC.forEach(o),q5=a(Jr," objects, like "),Ou=s(Jr,"CODE",{});var LC=i(Ou);S5=a(LC,"libcudart.so"),LC.forEach(o),P5=a(Jr,` reside, it\u2019s unlikely
that your system will have it named differently, but if it is adjust it to reflect your reality.`),Jr.forEach(o),rv=d(t),ko=s(t,"H4",{class:!0});var _b=i(ko);qr=s(_b,"A",{id:!0,class:!0,href:!0});var FC=i(qr);Cu=s(FC,"SPAN",{});var RC=i(Cu);u(ws.$$.fragment,RC),RC.forEach(o),FC.forEach(o),I5=d(_b),Nu=s(_b,"SPAN",{});var WC=i(Nu);O5=a(WC,"Possible problem #3"),WC.forEach(o),_b.forEach(o),av=d(t),It=s(t,"P",{});var Yd=i(It);C5=a(Yd,"Some older CUDA versions may refuse to build with newer compilers. For example, you my have "),Uu=s(Yd,"CODE",{});var jC=i(Uu);N5=a(jC,"gcc-9"),jC.forEach(o),U5=a(Yd,` but it wants
`),zu=s(Yd,"CODE",{});var GC=i(zu);z5=a(GC,"gcc-7"),GC.forEach(o),L5=a(Yd,"."),Yd.forEach(o),nv=d(t),ul=s(t,"P",{});var MC=i(ul);F5=a(MC,"There are various ways to go about it."),MC.forEach(o),sv=d(t),fl=s(t,"P",{});var HC=i(fl);R5=a(HC,"If you can install the latest CUDA toolkit it typically should support the newer compiler."),HC.forEach(o),iv=d(t),Sr=s(t,"P",{});var vb=i(Sr);W5=a(vb,`Alternatively, you could install the lower version of the compiler in addition to the one you already have, or you may
already have it but it\u2019s not the default one, so the build system can\u2019t see it. If you have `),Lu=s(vb,"CODE",{});var VC=i(Lu);j5=a(VC,"gcc-7"),VC.forEach(o),G5=a(vb,` installed but the
build system complains it can\u2019t find it, the following might do the trick:`),vb.forEach(o),lv=d(t),u(Ts.$$.fragment,t),dv=d(t),W=s(t,"P",{});var ce=i(W);M5=a(ce,"Here, we are making a symlink to "),Fu=s(ce,"CODE",{});var BC=i(Fu);H5=a(BC,"gcc-7"),BC.forEach(o),V5=a(ce," from "),Ru=s(ce,"CODE",{});var YC=i(Ru);B5=a(YC,"/usr/local/cuda-10.2/bin/gcc"),YC.forEach(o),Y5=a(ce,` and since
`),Wu=s(ce,"CODE",{});var ZC=i(Wu);Z5=a(ZC,"/usr/local/cuda-10.2/bin/"),ZC.forEach(o),J5=a(ce," should be in the "),ju=s(ce,"CODE",{});var JC=i(ju);X5=a(JC,"PATH"),JC.forEach(o),K5=a(ce,` environment variable (see the previous problem\u2019s solution), it
should find `),Gu=s(ce,"CODE",{});var XC=i(Gu);Q5=a(XC,"gcc-7"),XC.forEach(o),eA=a(ce," (and "),Mu=s(ce,"CODE",{});var KC=i(Mu);tA=a(KC,"g++7"),KC.forEach(o),oA=a(ce,") and then the build will succeed."),ce.forEach(o),cv=d(t),gl=s(t,"P",{});var QC=i(gl);rA=a(QC,"As always make sure to edit the paths in the example to match your situation."),QC.forEach(o),mv=d(t),xo=s(t,"H3",{class:!0});var bb=i(xo);Pr=s(bb,"A",{id:!0,class:!0,href:!0});var eN=i(Pr);Hu=s(eN,"SPAN",{});var tN=i(Hu);u(Es.$$.fragment,tN),tN.forEach(o),eN.forEach(o),aA=d(bb),Vu=s(bb,"SPAN",{});var oN=i(Vu);nA=a(oN,"FairScale"),oN.forEach(o),bb.forEach(o),pv=d(t),Ue=s(t,"P",{});var Xr=i(Ue);sA=a(Xr,"By integrating "),$s=s(Xr,"A",{href:!0,rel:!0});var rN=i($s);iA=a(rN,"FairScale"),rN.forEach(o),lA=a(Xr," the "),_l=s(Xr,"A",{href:!0});var aN=i(_l);dA=a(aN,"Trainer"),aN.forEach(o),cA=a(Xr,`
provides support for the following features from `),ks=s(Xr,"A",{href:!0,rel:!0});var nN=i(ks);mA=a(nN,"the ZeRO paper"),nN.forEach(o),pA=a(Xr,":"),Xr.forEach(o),hv=d(t),ze=s(t,"OL",{});var Kr=i(ze);Bu=s(Kr,"LI",{});var sN=i(Bu);hA=a(sN,"Optimizer State Sharding"),sN.forEach(o),uA=d(Kr),Yu=s(Kr,"LI",{});var iN=i(Yu);fA=a(iN,"Gradient Sharding"),iN.forEach(o),gA=d(Kr),Zu=s(Kr,"LI",{});var lN=i(Zu);_A=a(lN,"Model Parameters Sharding (new and very experimental)"),lN.forEach(o),vA=d(Kr),Ju=s(Kr,"LI",{});var dN=i(Ju);bA=a(dN,"CPU offload (new and very experimental)"),dN.forEach(o),Kr.forEach(o),uv=d(t),vl=s(t,"P",{});var cN=i(vl);yA=a(cN,"You will need at least two GPUs to use this feature."),cN.forEach(o),fv=d(t),xs=s(t,"P",{});var kq=i(xs);Xu=s(kq,"STRONG",{});var mN=i(Xu);wA=a(mN,"Installation"),mN.forEach(o),TA=a(kq,":"),kq.forEach(o),gv=d(t),bl=s(t,"P",{});var pN=i(bl);EA=a(pN,"Install the library via pypi:"),pN.forEach(o),_v=d(t),u(As.$$.fragment,t),vv=d(t),Ot=s(t,"P",{});var Zd=i(Ot);$A=a(Zd,"or via "),Ku=s(Zd,"CODE",{});var hN=i(Ku);kA=a(hN,"transformers"),hN.forEach(o),xA=a(Zd,"\u2019 "),Qu=s(Zd,"CODE",{});var uN=i(Qu);AA=a(uN,"extras"),uN.forEach(o),DA=a(Zd,":"),Zd.forEach(o),bv=d(t),u(Ds.$$.fragment,t),yv=d(t),Ct=s(t,"P",{});var Jd=i(Ct);qA=a(Jd,"(available starting from "),ef=s(Jd,"CODE",{});var fN=i(ef);SA=a(fN,"transformers==4.6.0"),fN.forEach(o),PA=a(Jd,") or find more details on "),qs=s(Jd,"A",{href:!0,rel:!0});var gN=i(qs);IA=a(gN,"the FairScale\u2019s GitHub page"),gN.forEach(o),OA=a(Jd,"."),Jd.forEach(o),wv=d(t),Ir=s(t,"P",{});var yb=i(Ir);CA=a(yb,"If you\u2019re still struggling with the build, first make sure to read "),yl=s(yb,"A",{href:!0});var _N=i(yl);NA=a(_N,"CUDA Extension Installation Notes"),_N.forEach(o),UA=a(yb,"."),yb.forEach(o),Tv=d(t),wl=s(t,"P",{});var vN=i(wl);zA=a(vN,"If it\u2019s still not resolved the build issue, here are a few more ideas."),vN.forEach(o),Ev=d(t),Ss=s(t,"P",{});var xq=i(Ss);tf=s(xq,"CODE",{});var bN=i(tf);LA=a(bN,"fairscale"),bN.forEach(o),FA=a(xq,` seems to have an issue with the recently introduced by pip build isolation feature. If you have a problem
with it, you may want to try one of:`),xq.forEach(o),$v=d(t),u(Ps.$$.fragment,t),kv=d(t),Tl=s(t,"P",{});var yN=i(Tl);RA=a(yN,"or:"),yN.forEach(o),xv=d(t),u(Is.$$.fragment,t),Av=d(t),Os=s(t,"P",{});var Aq=i(Os);of=s(Aq,"CODE",{});var wN=i(of);WA=a(wN,"fairscale"),wN.forEach(o),jA=a(Aq," also has issues with building against pytorch-nightly, so if you use it you may have to try one of:"),Aq.forEach(o),Dv=d(t),u(Cs.$$.fragment,t),qv=d(t),El=s(t,"P",{});var TN=i(El);GA=a(TN,"or:"),TN.forEach(o),Sv=d(t),u(Ns.$$.fragment,t),Pv=d(t),$l=s(t,"P",{});var EN=i($l);MA=a(EN,"Of course, adjust the urls to match the cuda version you use."),EN.forEach(o),Iv=d(t),Or=s(t,"P",{});var wb=i(Or);HA=a(wb,`If after trying everything suggested you still encounter build issues, please, proceed with the GitHub Issue of
`),Us=s(wb,"A",{href:!0,rel:!0});var $N=i(Us);VA=a($N,"FairScale"),$N.forEach(o),BA=a(wb,"."),wb.forEach(o),Ov=d(t),zs=s(t,"P",{});var Dq=i(zs);rf=s(Dq,"STRONG",{});var kN=i(rf);YA=a(kN,"Usage"),kN.forEach(o),ZA=a(Dq,":"),Dq.forEach(o),Cv=d(t),Nt=s(t,"P",{});var Xd=i(Nt);JA=a(Xd,"To use the first version of Sharded data-parallelism, add "),af=s(Xd,"CODE",{});var xN=i(af);XA=a(xN,"--sharded_ddp simple"),xN.forEach(o),KA=a(Xd,` to the command line arguments, and
make sure you have added the distributed launcher `),nf=s(Xd,"CODE",{});var AN=i(nf);QA=a(AN,"-m torch.distributed.launch --nproc_per_node=NUMBER_OF_GPUS_YOU_HAVE"),AN.forEach(o),e9=a(Xd," if you haven\u2019t been using it already."),Xd.forEach(o),Nv=d(t),Cr=s(t,"P",{});var Tb=i(Cr);t9=a(Tb,"For example here is how you could use it for "),sf=s(Tb,"CODE",{});var DN=i(sf);o9=a(DN,"run_translation.py"),DN.forEach(o),r9=a(Tb," with 2 GPUs:"),Tb.forEach(o),Uv=d(t),u(Ls.$$.fragment,t),zv=d(t),kl=s(t,"P",{});var qN=i(kl);a9=a(qN,"Notes:"),qN.forEach(o),Lv=d(t),Le=s(t,"UL",{});var Qr=i(Le);lf=s(Qr,"LI",{});var SN=i(lf);n9=a(SN,"This feature requires distributed training (so multiple GPUs)."),SN.forEach(o),s9=d(Qr),df=s(Qr,"LI",{});var PN=i(df);i9=a(PN,"It is not implemented for TPUs."),PN.forEach(o),l9=d(Qr),Fs=s(Qr,"LI",{});var Eb=i(Fs);d9=a(Eb,"It works with "),cf=s(Eb,"CODE",{});var IN=i(cf);c9=a(IN,"--fp16"),IN.forEach(o),m9=a(Eb," too, to make things even faster."),Eb.forEach(o),p9=d(Qr),Rs=s(Qr,"LI",{});var $b=i(Rs);h9=a($b,"One of the main benefits of enabling "),mf=s($b,"CODE",{});var ON=i(mf);u9=a(ON,"--sharded_ddp simple"),ON.forEach(o),f9=a($b,` is that it uses a lot less GPU memory, so you should be
able to use significantly larger batch sizes using the same hardware (e.g. 3x and even bigger) which should lead to
significantly shorter training time.`),$b.forEach(o),Qr.forEach(o),Fv=d(t),Ws=s(t,"OL",{start:!0});var CN=i(Ws);Ke=s(CN,"LI",{});var ea=i(Ke);g9=a(ea,"To use the second version of Sharded data-parallelism, add "),pf=s(ea,"CODE",{});var NN=i(pf);_9=a(NN,"--sharded_ddp zero_dp_2"),NN.forEach(o),v9=a(ea," or "),hf=s(ea,"CODE",{});var UN=i(hf);b9=a(UN,"--sharded_ddp zero_dp_3"),UN.forEach(o),y9=a(ea," to the command line arguments, and make sure you have added the distributed launcher "),uf=s(ea,"CODE",{});var zN=i(uf);w9=a(zN,"-m torch.distributed.launch --nproc_per_node=NUMBER_OF_GPUS_YOU_HAVE"),zN.forEach(o),T9=a(ea," if you haven\u2019t been using it already."),ea.forEach(o),CN.forEach(o),Rv=d(t),Nr=s(t,"P",{});var kb=i(Nr);E9=a(kb,"For example here is how you could use it for "),ff=s(kb,"CODE",{});var LN=i(ff);$9=a(LN,"run_translation.py"),LN.forEach(o),k9=a(kb," with 2 GPUs:"),kb.forEach(o),Wv=d(t),u(js.$$.fragment,t),jv=d(t),Ao=s(t,"P",{});var sg=i(Ao);gf=s(sg,"CODE",{});var FN=i(gf);x9=a(FN,"zero_dp_2"),FN.forEach(o),A9=a(sg," is an optimized version of the simple wrapper, while "),_f=s(sg,"CODE",{});var RN=i(_f);D9=a(RN,"zero_dp_3"),RN.forEach(o),q9=a(sg,` fully shards model weights,
gradients and optimizer states.`),sg.forEach(o),Gv=d(t),Ut=s(t,"P",{});var Kd=i(Ut);S9=a(Kd,"Both are compatible with adding "),vf=s(Kd,"CODE",{});var WN=i(vf);P9=a(WN,"cpu_offload"),WN.forEach(o),I9=a(Kd," to enable ZeRO-offload (activate it like this: "),bf=s(Kd,"CODE",{});var jN=i(bf);O9=a(jN,'--sharded_ddp "zero_dp_2 cpu_offload"'),jN.forEach(o),C9=a(Kd,")."),Kd.forEach(o),Mv=d(t),xl=s(t,"P",{});var GN=i(xl);N9=a(GN,"Notes:"),GN.forEach(o),Hv=d(t),de=s(t,"UL",{});var Mt=i(de);yf=s(Mt,"LI",{});var MN=i(yf);U9=a(MN,"This feature requires distributed training (so multiple GPUs)."),MN.forEach(o),z9=d(Mt),wf=s(Mt,"LI",{});var HN=i(wf);L9=a(HN,"It is not implemented for TPUs."),HN.forEach(o),F9=d(Mt),Gs=s(Mt,"LI",{});var xb=i(Gs);R9=a(xb,"It works with "),Tf=s(xb,"CODE",{});var VN=i(Tf);W9=a(VN,"--fp16"),VN.forEach(o),j9=a(xb," too, to make things even faster."),xb.forEach(o),G9=d(Mt),Do=s(Mt,"LI",{});var Qd=i(Do);M9=a(Qd,"The "),Ef=s(Qd,"CODE",{});var BN=i(Ef);H9=a(BN,"cpu_offload"),BN.forEach(o),V9=a(Qd," additional option requires "),$f=s(Qd,"CODE",{});var YN=i($f);B9=a(YN,"--fp16"),YN.forEach(o),Y9=a(Qd,"."),Qd.forEach(o),Z9=d(Mt),kf=s(Mt,"LI",{});var ZN=i(kf);J9=a(ZN,`This is an area of active development, so make sure you have a source install of fairscale to use this feature as
some bugs you encounter may have been fixed there already.`),ZN.forEach(o),Mt.forEach(o),Vv=d(t),Al=s(t,"P",{});var JN=i(Al);X9=a(JN,"Known caveats:"),JN.forEach(o),Bv=d(t),Ur=s(t,"UL",{});var Ab=i(Ur);qo=s(Ab,"LI",{});var ec=i(qo);K9=a(ec,"This feature is incompatible with "),xf=s(ec,"CODE",{});var XN=i(xf);Q9=a(XN,"--predict_with_generate"),XN.forEach(o),eD=a(ec," in the "),Af=s(ec,"EM",{});var KN=i(Af);tD=a(KN,"run_translation.py"),KN.forEach(o),oD=a(ec," script."),ec.forEach(o),rD=d(Ab),we=s(Ab,"LI",{});var Ht=i(we);aD=a(Ht,"Using "),Df=s(Ht,"CODE",{});var QN=i(Df);nD=a(QN,"--sharded_ddp zero_dp_3"),QN.forEach(o),sD=a(Ht,` requires wrapping each layer of the model in the special container
`),qf=s(Ht,"CODE",{});var eU=i(qf);iD=a(eU,"FullyShardedDataParallelism"),eU.forEach(o),lD=a(Ht," of fairscale. It should be used with the option "),Sf=s(Ht,"CODE",{});var tU=i(Sf);dD=a(tU,"auto_wrap"),tU.forEach(o),cD=a(Ht,` if you are not
doing this yourself: `),Pf=s(Ht,"CODE",{});var oU=i(Pf);mD=a(oU,'--sharded_ddp "zero_dp_3 auto_wrap"'),oU.forEach(o),pD=a(Ht,"."),Ht.forEach(o),Ab.forEach(o),Yv=d(t),Dl=s(t,"P",{});var rU=i(Dl);hD=a(rU,"Sections that were moved:"),rU.forEach(o),Zv=d(t),y=s(t,"P",{});var T=i(y);uD=a(T,"[ "),ql=s(T,"A",{href:!0});var aU=i(ql);fD=a(aU,"DeepSpeed"),aU.forEach(o),If=s(T,"A",{id:!0}),i(If).forEach(o),gD=a(T,`
| `),Sl=s(T,"A",{href:!0});var nU=i(Sl);_D=a(nU,"Installation"),nU.forEach(o),Of=s(T,"A",{id:!0}),i(Of).forEach(o),vD=a(T,`
| `),Pl=s(T,"A",{href:!0});var sU=i(Pl);bD=a(sU,"Deployment with multiple GPUs"),sU.forEach(o),Cf=s(T,"A",{id:!0}),i(Cf).forEach(o),yD=a(T,`
| `),Il=s(T,"A",{href:!0});var iU=i(Il);wD=a(iU,"Deployment with one GPU"),iU.forEach(o),Nf=s(T,"A",{id:!0}),i(Nf).forEach(o),TD=a(T,`
| `),Ol=s(T,"A",{href:!0});var lU=i(Ol);ED=a(lU,"Deployment in Notebooks"),lU.forEach(o),Uf=s(T,"A",{id:!0}),i(Uf).forEach(o),$D=a(T,`
| `),Cl=s(T,"A",{href:!0});var dU=i(Cl);kD=a(dU,"Configuration"),dU.forEach(o),zf=s(T,"A",{id:!0}),i(zf).forEach(o),xD=a(T,`
| `),Nl=s(T,"A",{href:!0});var cU=i(Nl);AD=a(cU,"Passing Configuration"),cU.forEach(o),Lf=s(T,"A",{id:!0}),i(Lf).forEach(o),DD=a(T,`
| `),Ul=s(T,"A",{href:!0});var mU=i(Ul);qD=a(mU,"Shared Configuration"),mU.forEach(o),Ff=s(T,"A",{id:!0}),i(Ff).forEach(o),SD=a(T,`
| `),zl=s(T,"A",{href:!0});var pU=i(zl);PD=a(pU,"ZeRO"),pU.forEach(o),Rf=s(T,"A",{id:!0}),i(Rf).forEach(o),ID=a(T,`
| `),Ll=s(T,"A",{href:!0});var hU=i(Ll);OD=a(hU,"ZeRO-2 Config"),hU.forEach(o),Wf=s(T,"A",{id:!0}),i(Wf).forEach(o),CD=a(T,`
| `),Fl=s(T,"A",{href:!0});var uU=i(Fl);ND=a(uU,"ZeRO-3 Config"),uU.forEach(o),jf=s(T,"A",{id:!0}),i(jf).forEach(o),UD=a(T,`
| `),Rl=s(T,"A",{href:!0});var fU=i(Rl);zD=a(fU,"NVMe Support"),fU.forEach(o),Gf=s(T,"A",{id:!0}),i(Gf).forEach(o),LD=a(T,`
| `),Wl=s(T,"A",{href:!0});var gU=i(Wl);FD=a(gU,"ZeRO-2 vs ZeRO-3 Performance"),gU.forEach(o),Mf=s(T,"A",{id:!0}),i(Mf).forEach(o),RD=a(T,`
| `),jl=s(T,"A",{href:!0});var _U=i(jl);WD=a(_U,"ZeRO-2 Example"),_U.forEach(o),Hf=s(T,"A",{id:!0}),i(Hf).forEach(o),jD=a(T,`
| `),Gl=s(T,"A",{href:!0});var vU=i(Gl);GD=a(vU,"ZeRO-3 Example"),vU.forEach(o),Vf=s(T,"A",{id:!0}),i(Vf).forEach(o),MD=a(T,`
| `),Ml=s(T,"A",{href:!0});var bU=i(Ml);HD=a(bU,"Optimizer"),bU.forEach(o),Bf=s(T,"A",{id:!0}),i(Bf).forEach(o),VD=a(T,`
| `),Hl=s(T,"A",{href:!0});var yU=i(Hl);BD=a(yU,"Scheduler"),yU.forEach(o),Yf=s(T,"A",{id:!0}),i(Yf).forEach(o),YD=a(T,`
| `),Vl=s(T,"A",{href:!0});var wU=i(Vl);ZD=a(wU,"fp32 Precision"),wU.forEach(o),Zf=s(T,"A",{id:!0}),i(Zf).forEach(o),JD=a(T,`
| `),Bl=s(T,"A",{href:!0});var TU=i(Bl);XD=a(TU,"Automatic Mixed Precision"),TU.forEach(o),Jf=s(T,"A",{id:!0}),i(Jf).forEach(o),KD=a(T,`
| `),Yl=s(T,"A",{href:!0});var EU=i(Yl);QD=a(EU,"Batch Size"),EU.forEach(o),Xf=s(T,"A",{id:!0}),i(Xf).forEach(o),eq=a(T,`
| `),Zl=s(T,"A",{href:!0});var $U=i(Zl);tq=a($U,"Gradient Accumulation"),$U.forEach(o),Kf=s(T,"A",{id:!0}),i(Kf).forEach(o),oq=a(T,`
| `),Jl=s(T,"A",{href:!0});var kU=i(Jl);rq=a(kU,"Gradient Clipping"),kU.forEach(o),Qf=s(T,"A",{id:!0}),i(Qf).forEach(o),aq=a(T,`
| `),Xl=s(T,"A",{href:!0});var xU=i(Xl);nq=a(xU,"Getting The Model Weights Out"),xU.forEach(o),eg=s(T,"A",{id:!0}),i(eg).forEach(o),sq=a(T,`
]`),T.forEach(o),this.h()},h(){p(E,"name","hf:doc:metadata"),p(E,"content",JSON.stringify(zU)),p(P,"id","trainer"),p(P,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),p(P,"href","#trainer"),p(x,"class","relative group"),p(ae,"href","/docs/transformers/pr_16771/en/main_classes/trainer#transformers.Trainer"),p(V,"href","../examples"),p(ee,"href","/docs/transformers/pr_16771/en/main_classes/trainer#transformers.Trainer"),p(ue,"href","/docs/transformers/pr_16771/en/main_classes/trainer#transformers.TrainingArguments"),p(fe,"href","https://github.com/NVIDIA/apex"),p(fe,"rel","nofollow"),p(ge,"href","/docs/transformers/pr_16771/en/main_classes/trainer#transformers.Trainer"),p(di,"href","/docs/transformers/pr_16771/en/main_classes/trainer#transformers.Trainer"),p(ci,"href","/docs/transformers/pr_16771/en/main_classes/trainer#transformers.Trainer"),p(mi,"href","callback"),p(Uo,"id","transformers.Trainer"),p(Uo,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),p(Uo,"href","#transformers.Trainer"),p(Bt,"class","relative group"),p(pi,"href","/docs/transformers/pr_16771/en/main_classes/model#transformers.PreTrainedModel"),p(Lo,"class","docstring"),p(Fo,"class","docstring"),p(nt,"class","docstring"),p(st,"class","docstring"),p(it,"class","docstring"),p(Ro,"class","docstring"),p(xe,"class","docstring"),p(lt,"class","docstring"),p(ui,"href","/docs/transformers/pr_16771/en/main_classes/model#transformers.PreTrainedModel"),p(Wo,"class","docstring"),p(dt,"class","docstring"),p(jo,"class","docstring"),p(ct,"class","docstring"),p(Ae,"class","docstring"),p(mt,"class","docstring"),p(Mo,"class","docstring"),p(Ho,"class","docstring"),p(Vo,"class","docstring"),p(pt,"class","docstring"),p(gi,"href","/docs/transformers/pr_16771/en/main_classes/trainer#transformers.Trainer"),p(Wa,"href","https://github.com/pytorch/pytorch/issues/16266"),p(Wa,"rel","nofollow"),p(_i,"href","/docs/transformers/pr_16771/en/main_classes/trainer#transformers.Trainer"),p(vi,"href","/docs/transformers/pr_16771/en/main_classes/trainer#transformers.Trainer"),p(k,"class","docstring"),p(Bo,"class","docstring"),p(Yo,"class","docstring"),p(ut,"class","docstring"),p(Z,"class","docstring"),p(ft,"class","docstring"),p(gt,"class","docstring"),p(Jo,"class","docstring"),p(Xo,"class","docstring"),p(bi,"href","/docs/transformers/pr_16771/en/main_classes/trainer#transformers.Trainer.log_metrics"),p(De,"class","docstring"),p(_t,"class","docstring"),p(vt,"class","docstring"),p(Ko,"class","docstring"),p(bt,"class","docstring"),p(b,"class","docstring"),p(Qo,"id","transformers.Seq2SeqTrainer"),p(Qo,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),p(Qo,"href","#transformers.Seq2SeqTrainer"),p(ao,"class","relative group"),p(qe,"class","docstring"),p(J,"class","docstring"),p(Ze,"class","docstring"),p(tr,"id","transformers.TrainingArguments"),p(tr,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),p(tr,"href","#transformers.TrainingArguments"),p(co,"class","relative group"),p(yi,"href","/docs/transformers/pr_16771/en/internal/trainer_utils#transformers.HfArgumentParser"),p(wn,"href","https://docs.python.org/3/library/argparse#module-argparse"),p(wn,"rel","nofollow"),p(se,"class","docstring"),p(or,"class","docstring"),p(yt,"class","docstring"),p(rr,"class","docstring"),p(ar,"class","docstring"),p(nr,"class","docstring"),p(N,"class","docstring"),p(sr,"id","transformers.Seq2SeqTrainingArguments"),p(sr,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),p(sr,"href","#transformers.Seq2SeqTrainingArguments"),p(fo,"class","relative group"),p(wi,"href","/docs/transformers/pr_16771/en/internal/trainer_utils#transformers.HfArgumentParser"),p(On,"href","https://docs.python.org/3/library/argparse#module-argparse"),p(On,"rel","nofollow"),p(Je,"class","docstring"),p(ir,"id","checkpoints"),p(ir,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),p(ir,"href","#checkpoints"),p(_o,"class","relative group"),p(Ti,"href","/docs/transformers/pr_16771/en/main_classes/trainer#transformers.Trainer"),p(Ei,"href","/docs/transformers/pr_16771/en/main_classes/trainer#transformers.TrainingArguments"),p($i,"href","/docs/transformers/pr_16771/en/main_classes/trainer#transformers.Trainer.train"),p(Ai,"href","/docs/transformers/pr_16771/en/main_classes/trainer#transformers.TrainingArguments"),p(pr,"id","logging"),p(pr,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),p(pr,"href","#logging"),p(vo,"class","relative group"),p(qi,"href","/docs/transformers/pr_16771/en/main_classes/trainer#transformers.Trainer"),p(Si,"href","/docs/transformers/pr_16771/en/main_classes/trainer#transformers.TrainingArguments"),p(Oi,"href","/docs/transformers/pr_16771/en/main_classes/trainer#transformers.TrainingArguments"),p(Ci,"href","/docs/transformers/pr_16771/en/main_classes/trainer#transformers.Trainer"),p(Ni,"href","/docs/transformers/pr_16771/en/main_classes/trainer#transformers.Trainer"),p(fr,"id","randomness"),p(fr,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),p(fr,"href","#randomness"),p(bo,"class","relative group"),p(Wi,"href","/docs/transformers/pr_16771/en/main_classes/trainer#transformers.Trainer"),p(Wn,"href","https://pytorch.org/docs/stable/notes/randomness"),p(Wn,"rel","nofollow"),p(gr,"id","specific-gpus-selection"),p(gr,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),p(gr,"href","#specific-gpus-selection"),p(yo,"class","relative group"),p(Gn,"href","https://pytorch.org/docs/stable/generated/torch.nn.parallel.DistributedDataParallel.html"),p(Gn,"rel","nofollow"),p(Hn,"href","https://github.com/huggingface/accelerate"),p(Hn,"rel","nofollow"),p(Vn,"href","https://github.com/microsoft/DeepSpeed"),p(Vn,"rel","nofollow"),p(Gi,"href","Deepspeed"),p(Xn,"href","https://pytorch.org/docs/stable/generated/torch.nn.DataParallel.html"),p(Xn,"rel","nofollow"),p(rs,"start","2"),p(Tr,"id","trainer-integrations"),p(Tr,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),p(Tr,"href","#trainer-integrations"),p(wo,"class","relative group"),p(ol,"href","/docs/transformers/pr_16771/en/main_classes/trainer#transformers.Trainer"),p(is,"href","https://github.com/microsoft/DeepSpeed"),p(is,"rel","nofollow"),p(ls,"href","https://github.com/facebookresearch/fairscale/"),p(ls,"rel","nofollow"),p(ds,"href","https://arxiv.org/abs/1910.02054"),p(ds,"rel","nofollow"),p(al,"id","zero-install-notes"),p($r,"id","cuda-extension-installation-notes"),p($r,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),p($r,"href","#cuda-extension-installation-notes"),p(To,"class","relative group"),p(ms,"href","https://github.com/facebookresearch/fairscale/issues"),p(ms,"rel","nofollow"),p(ps,"href","https://github.com/microsoft/DeepSpeed/issues"),p(ps,"rel","nofollow"),p(kr,"id","possible-problem-1"),p(kr,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),p(kr,"href","#possible-problem-1"),p(Eo,"class","relative group"),p(gs,"href","https://www.google.com/search?q=ubuntu+cuda+10.2+install"),p(gs,"rel","nofollow"),p(Ar,"id","possible-problem-2"),p(Ar,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),p(Ar,"href","#possible-problem-2"),p($o,"class","relative group"),p(qr,"id","possible-problem-3"),p(qr,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),p(qr,"href","#possible-problem-3"),p(ko,"class","relative group"),p(Pr,"id","fairscale"),p(Pr,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),p(Pr,"href","#fairscale"),p(xo,"class","relative group"),p($s,"href","https://github.com/facebookresearch/fairscale/"),p($s,"rel","nofollow"),p(_l,"href","/docs/transformers/pr_16771/en/main_classes/trainer#transformers.Trainer"),p(ks,"href","https://arxiv.org/abs/1910.02054"),p(ks,"rel","nofollow"),p(qs,"href","https://github.com/facebookresearch/fairscale/#installation"),p(qs,"rel","nofollow"),p(yl,"href","#zero-install-notes"),p(Us,"href","https://github.com/facebookresearch/fairscale/issues"),p(Us,"rel","nofollow"),p(Ws,"start","3"),p(ql,"href","./deepspeed#deepspeed-trainer-integration"),p(If,"id","deepspeed"),p(Sl,"href","./deepspeed#deepspeed-installation"),p(Of,"id","installation"),p(Pl,"href","./deepspeed#deepspeed-multi-gpu"),p(Cf,"id","deployment-with-multiple-gpus"),p(Il,"href","./deepspeed#deepspeed-one-gpu"),p(Nf,"id","deployment-with-one-gpu"),p(Ol,"href","./deepspeed#deepspeed-notebook"),p(Uf,"id","deployment-in-notebooks"),p(Cl,"href","./deepspeed#deepspeed-config"),p(zf,"id","configuration"),p(Nl,"href","./deepspeed#deepspeed-config-passing"),p(Lf,"id","passing-configuration"),p(Ul,"href","./deepspeed#deepspeed-config-shared"),p(Ff,"id","shared-configuration"),p(zl,"href","./deepspeed#deepspeed-zero"),p(Rf,"id","zero"),p(Ll,"href","./deepspeed#deepspeed-zero2-config"),p(Wf,"id","zero-2-config"),p(Fl,"href","./deepspeed#deepspeed-zero3-config"),p(jf,"id","zero-3-config"),p(Rl,"href","./deepspeed#deepspeed-nvme"),p(Gf,"id","nvme-support"),p(Wl,"href","./deepspeed#deepspeed-zero2-zero3-performance"),p(Mf,"id","zero-2-vs-zero-3-performance"),p(jl,"href","./deepspeed#deepspeed-zero2-example"),p(Hf,"id","zero-2-example"),p(Gl,"href","./deepspeed#deepspeed-zero3-example"),p(Vf,"id","zero-3-example"),p(Ml,"href","./deepspeed#deepspeed-optimizer"),p(Bf,"id","optimizer"),p(Hl,"href","./deepspeed#deepspeed-scheduler"),p(Yf,"id","scheduler"),p(Vl,"href","./deepspeed#deepspeed-fp32"),p(Zf,"id","fp32-precision"),p(Bl,"href","./deepspeed#deepspeed-amp"),p(Jf,"id","automatic-mixed-precision"),p(Yl,"href","./deepspeed#deepspeed-bs"),p(Xf,"id","batch-size"),p(Zl,"href","./deepspeed#deepspeed-grad-acc"),p(Kf,"id","gradient-accumulation"),p(Jl,"href","./deepspeed#deepspeed-grad-clip"),p(Qf,"id","gradient-clipping"),p(Xl,"href","./deepspeed#deepspeed-weight-extraction"),p(eg,"id","getting-the-model-weights-out")},m(t,c){e(document.head,E),m(t,z,c),m(t,x,c),e(x,P),e(P,me),f(L,me,null),e(x,F),e(x,G),e(G,pe),m(t,K,c),m(t,R,c),e(R,re),e(R,ae),e(ae,Q),e(R,ne),e(R,V),e(V,Ge),e(R,he),m(t,C,c),m(t,S,c),e(S,et),e(S,ee),e(ee,tt),e(S,ot),e(S,ue),e(ue,ta),e(S,oa),m(t,Me,c),m(t,Ee,c),e(Ee,ra),e(Ee,fe),e(fe,aa),e(Ee,na),m(t,B,c),m(t,M,c),e(M,Ys),e(M,ge),e(ge,Io),e(M,Zs),m(t,Vt,c),m(t,D,c),e(D,H),e(H,Oo),e(Oo,Js),e(H,Xs),e(D,Ks),e(D,Qs),e(Qs,tc),e(tc,qb),e(Qs,Sb),e(D,Pb),e(D,ei),e(ei,oc),e(oc,Ib),e(ei,Ob),e(D,Cb),e(D,ti),e(ti,rc),e(rc,Nb),e(ti,Ub),e(D,zb),e(D,rt),e(rt,ac),e(ac,Lb),e(rt,Fb),e(rt,nc),e(nc,Rb),e(rt,Wb),e(rt,sc),e(sc,jb),e(rt,Gb),e(D,Mb),e(D,oi),e(oi,ic),e(ic,Hb),e(oi,Vb),e(D,Bb),e(D,ri),e(ri,lc),e(lc,Yb),e(ri,Zb),e(D,Jb),e(D,ai),e(ai,dc),e(dc,Xb),e(ai,Kb),e(D,Qb),e(D,ni),e(ni,cc),e(cc,ey),e(ni,ty),e(D,oy),e(D,si),e(si,mc),e(mc,ry),e(si,ay),e(D,ny),e(D,ii),e(ii,pc),e(pc,sy),e(ii,iy),e(D,ly),e(D,li),e(li,hc),e(hc,dy),e(li,cy),m(t,ig,c),f(Co,t,c),m(t,lg,c),m(t,No,c),e(No,my),e(No,di),e(di,py),e(No,hy),m(t,dg,c),f(sa,t,c),m(t,cg,c),m(t,at,c),e(at,uy),e(at,ci),e(ci,fy),e(at,gy),e(at,mi),e(mi,_y),e(at,vy),m(t,mg,c),m(t,Bt,c),e(Bt,Uo),e(Uo,uc),f(ia,uc,null),e(Bt,by),e(Bt,fc),e(fc,yy),m(t,pg,c),m(t,b,c),f(la,b,null),e(b,wy),e(b,gc),e(gc,Ty),e(b,Ey),e(b,_c),e(_c,$y),e(b,ky),e(b,_e),e(_e,zo),e(zo,vc),e(vc,xy),e(zo,Ay),e(zo,pi),e(pi,Dy),e(zo,qy),e(_e,Sy),e(_e,Y),e(Y,bc),e(bc,Py),e(Y,Iy),e(Y,yc),e(yc,Oy),e(Y,Cy),e(Y,wc),e(wc,Ny),e(Y,Uy),e(Y,Tc),e(Tc,zy),e(Y,Ly),e(Y,Ec),e(Ec,Fy),e(Y,Ry),e(Y,$c),e($c,Wy),e(Y,jy),e(_e,Gy),e(_e,hi),e(hi,kc),e(kc,My),e(hi,Hy),e(_e,Vy),e(_e,$e),e($e,xc),e(xc,By),e($e,Yy),e($e,Ac),e(Ac,Zy),e($e,Jy),e($e,Dc),e(Dc,Xy),e($e,Ky),e($e,qc),e(qc,Qy),e($e,e2),e(_e,t2),e(_e,ke),e(ke,Sc),e(Sc,o2),e(ke,r2),e(ke,Pc),e(Pc,a2),e(ke,n2),e(ke,Ic),e(Ic,s2),e(ke,i2),e(ke,Oc),e(Oc,l2),e(ke,d2),e(b,c2),e(b,Lo),f(da,Lo,null),e(Lo,m2),e(Lo,ca),e(ca,p2),e(ca,Cc),e(Cc,h2),e(ca,u2),e(b,f2),e(b,Fo),f(ma,Fo,null),e(Fo,g2),e(Fo,pa),e(pa,_2),e(pa,Nc),e(Nc,v2),e(pa,b2),e(b,y2),e(b,nt),f(ha,nt,null),e(nt,w2),e(nt,Uc),e(Uc,T2),e(nt,E2),e(nt,zc),e(zc,$2),e(b,k2),e(b,st),f(ua,st,null),e(st,x2),e(st,Lc),e(Lc,A2),e(st,D2),e(st,fa),e(fa,q2),e(fa,Fc),e(Fc,S2),e(fa,P2),e(b,I2),e(b,it),f(ga,it,null),e(it,O2),e(it,Rc),e(Rc,C2),e(it,N2),e(it,He),e(He,U2),e(He,Wc),e(Wc,z2),e(He,L2),e(He,jc),e(jc,F2),e(He,R2),e(He,Gc),e(Gc,W2),e(He,j2),e(b,G2),e(b,Ro),f(_a,Ro,null),e(Ro,M2),e(Ro,Mc),e(Mc,H2),e(b,V2),e(b,xe),f(va,xe,null),e(xe,B2),e(xe,Hc),e(Hc,Y2),e(xe,Z2),e(xe,ba),e(ba,J2),e(ba,Vc),e(Vc,X2),e(ba,K2),e(xe,Q2),e(xe,Bc),e(Bc,ew),e(b,tw),e(b,lt),f(ya,lt,null),e(lt,ow),e(lt,Yt),e(Yt,rw),e(Yt,Yc),e(Yc,aw),e(Yt,nw),e(Yt,Zc),e(Zc,sw),e(Yt,iw),e(lt,lw),e(lt,Jc),e(Jc,dw),e(b,cw),e(b,Wo),f(wa,Wo,null),e(Wo,mw),e(Wo,Ta),e(Ta,pw),e(Ta,ui),e(ui,hw),e(Ta,uw),e(b,fw),e(b,dt),f(Ea,dt,null),e(dt,gw),e(dt,$a),e($a,_w),e($a,Xc),e(Xc,vw),e($a,bw),e(dt,yw),e(dt,Kc),e(Kc,ww),e(b,Tw),e(b,jo),f(ka,jo,null),e(jo,Ew),e(jo,Qc),e(Qc,$w),e(b,kw),e(b,ct),f(xa,ct,null),e(ct,xw),e(ct,Aa),e(Aa,Aw),e(Aa,em),e(em,Dw),e(Aa,qw),e(ct,Sw),e(ct,tm),e(tm,Pw),e(b,Iw),e(b,Ae),f(Da,Ae,null),e(Ae,Ow),e(Ae,qa),e(qa,Cw),e(qa,om),e(om,Nw),e(qa,Uw),e(Ae,zw),e(Ae,Zt),e(Zt,Lw),e(Zt,rm),e(rm,Fw),e(Zt,Rw),e(Zt,am),e(am,Ww),e(Zt,jw),e(Ae,Gw),e(Ae,nm),e(nm,Mw),e(b,Hw),e(b,mt),f(Sa,mt,null),e(mt,Vw),e(mt,ve),e(ve,Bw),e(ve,sm),e(sm,Yw),e(ve,Zw),e(ve,im),e(im,Jw),e(ve,Xw),e(ve,lm),e(lm,Kw),e(ve,Qw),e(ve,dm),e(dm,e0),e(ve,t0),e(mt,o0),f(Go,mt,null),e(b,r0),e(b,Mo),f(Pa,Mo,null),e(Mo,a0),e(Mo,Ia),e(Ia,n0),e(Ia,cm),e(cm,s0),e(Ia,i0),e(b,l0),e(b,Ho),f(Oa,Ho,null),e(Ho,d0),e(Ho,mm),e(mm,c0),e(b,m0),e(b,Vo),f(Ca,Vo,null),e(Vo,p0),e(Vo,Na),e(Na,h0),e(Na,pm),e(pm,u0),e(Na,f0),e(b,g0),e(b,pt),f(Ua,pt,null),e(pt,_0),e(pt,za),e(za,v0),e(za,hm),e(hm,b0),e(za,y0),e(pt,w0),e(pt,um),e(um,T0),e(b,E0),e(b,k),f(La,k,null),e(k,$0),e(k,fm),e(fm,k0),e(k,x0),e(k,gm),e(gm,A0),e(k,D0),e(k,_m),e(_m,q0),e(k,S0),e(k,Jt),e(Jt,P0),e(Jt,vm),e(vm,I0),e(Jt,O0),e(Jt,bm),e(bm,C0),e(Jt,N0),e(k,U0),e(k,ym),e(ym,z0),e(k,L0),f(Fa,k,null),e(k,F0),e(k,wm),e(wm,Tm),e(Tm,R0),e(k,W0),e(k,Ve),e(Ve,be),e(be,j0),e(be,Em),e(Em,G0),e(be,M0),e(be,$m),e($m,H0),e(be,V0),e(be,km),e(km,B0),e(be,Y0),e(be,xm),e(xm,Z0),e(be,J0),e(Ve,X0),e(Ve,Xt),e(Xt,K0),e(Xt,Am),e(Am,Q0),e(Xt,eT),e(Xt,Dm),e(Dm,tT),e(Xt,oT),e(Ve,rT),e(Ve,fi),e(fi,qm),e(qm,aT),e(fi,nT),e(Ve,sT),e(Ve,ht),e(ht,Sm),e(Sm,iT),e(ht,lT),e(ht,Pm),e(Pm,dT),e(ht,cT),e(ht,Im),e(Im,mT),e(ht,pT),e(k,hT),e(k,Om),e(Om,uT),e(k,fT),e(k,Cm),e(Cm,gT),e(k,_T),e(k,Ra),e(Ra,vT),e(Ra,Nm),e(Nm,bT),e(Ra,yT),e(k,wT),e(k,Be),e(Be,TT),e(Be,Um),e(Um,ET),e(Be,$T),e(Be,zm),e(zm,kT),e(Be,xT),e(Be,Lm),e(Lm,AT),e(Be,DT),e(k,qT),e(k,te),e(te,ST),e(te,gi),e(gi,PT),e(te,IT),e(te,Fm),e(Fm,OT),e(te,CT),e(te,Rm),e(Rm,NT),e(te,UT),e(te,Wm),e(Wm,zT),e(te,LT),e(te,jm),e(jm,FT),e(te,RT),e(k,WT),e(k,I),e(I,jT),e(I,Gm),e(Gm,GT),e(I,MT),e(I,Mm),e(Mm,HT),e(I,VT),e(I,Hm),e(Hm,BT),e(I,YT),e(I,Vm),e(Vm,ZT),e(I,JT),e(I,Wa),e(Wa,XT),e(I,KT),e(I,Bm),e(Bm,QT),e(I,eE),e(I,Ym),e(Ym,tE),e(I,oE),e(I,Zm),e(Zm,rE),e(I,aE),e(I,Jm),e(Jm,nE),e(I,sE),e(I,Xm),e(Xm,iE),e(I,lE),e(k,dE),e(k,ye),e(ye,cE),e(ye,_i),e(_i,mE),e(ye,pE),e(ye,Km),e(Km,hE),e(ye,uE),e(ye,vi),e(vi,fE),e(ye,gE),e(ye,Qm),e(Qm,_E),e(ye,vE),e(k,bE),e(k,ep),e(ep,yE),e(b,wE),e(b,Bo),f(ja,Bo,null),e(Bo,TE),e(Bo,tp),e(tp,EE),e(b,$E),e(b,Yo),f(Ga,Yo,null),e(Yo,kE),e(Yo,Ma),e(Ma,xE),e(Ma,op),e(op,AE),e(Ma,DE),e(b,qE),e(b,ut),f(Ha,ut,null),e(ut,SE),e(ut,Va),e(Va,PE),e(Va,rp),e(rp,IE),e(Va,OE),e(ut,CE),e(ut,Ba),e(Ba,NE),e(Ba,ap),e(ap,UE),e(Ba,zE),e(b,LE),e(b,Z),f(Ya,Z,null),e(Z,FE),e(Z,np),e(np,RE),e(Z,WE),e(Z,Za),e(Za,jE),e(Za,sp),e(sp,GE),e(Za,ME),e(Z,HE),f(Zo,Z,null),e(Z,VE),e(Z,Ja),e(Ja,BE),e(Ja,ip),e(ip,YE),e(Ja,ZE),e(Z,JE),e(Z,Kt),e(Kt,Qt),e(Qt,XE),e(Qt,lp),e(lp,KE),e(Qt,QE),e(Qt,dp),e(dp,e4),e(Qt,t4),e(Kt,o4),e(Kt,eo),e(eo,r4),e(eo,cp),e(cp,a4),e(eo,n4),e(eo,mp),e(mp,s4),e(eo,i4),e(Kt,l4),e(Kt,to),e(to,d4),e(to,pp),e(pp,c4),e(to,m4),e(to,hp),e(hp,p4),e(to,h4),e(b,u4),e(b,ft),f(Xa,ft,null),e(ft,f4),e(ft,oo),e(oo,g4),e(oo,up),e(up,_4),e(oo,v4),e(oo,fp),e(fp,b4),e(oo,y4),e(ft,w4),e(ft,gp),e(gp,T4),e(b,E4),e(b,gt),f(Ka,gt,null),e(gt,$4),e(gt,ro),e(ro,k4),e(ro,_p),e(_p,x4),e(ro,A4),e(ro,vp),e(vp,D4),e(ro,q4),e(gt,S4),e(gt,bp),e(bp,P4),e(b,I4),e(b,Jo),f(Qa,Jo,null),e(Jo,O4),e(Jo,Ye),e(Ye,C4),e(Ye,yp),e(yp,N4),e(Ye,U4),e(Ye,wp),e(wp,z4),e(Ye,L4),e(Ye,Tp),e(Tp,F4),e(Ye,R4),e(b,W4),e(b,Xo),f(en,Xo,null),e(Xo,j4),e(Xo,tn),e(tn,G4),e(tn,Ep),e(Ep,M4),e(tn,H4),e(b,V4),e(b,De),f(on,De,null),e(De,B4),e(De,rn),e(rn,Y4),e(rn,$p),e($p,Z4),e(rn,J4),e(De,X4),e(De,kp),e(kp,K4),e(De,Q4),e(De,an),e(an,e7),e(an,bi),e(bi,t7),e(an,o7),e(b,r7),e(b,_t),f(nn,_t,null),e(_t,a7),e(_t,sn),e(sn,n7),e(sn,xp),e(xp,s7),e(sn,i7),e(_t,l7),e(_t,Ap),e(Ap,d7),e(b,c7),e(b,vt),f(ln,vt,null),e(vt,m7),e(vt,Dp),e(Dp,p7),e(vt,h7),e(vt,qp),e(qp,u7),e(b,f7),e(b,Ko),f(dn,Ko,null),e(Ko,g7),e(Ko,Sp),e(Sp,_7),e(b,v7),e(b,bt),f(cn,bt,null),e(bt,b7),e(bt,Pp),e(Pp,y7),e(bt,w7),e(bt,Ip),e(Ip,T7),m(t,hg,c),m(t,ao,c),e(ao,Qo),e(Qo,Op),f(mn,Op,null),e(ao,E7),e(ao,Cp),e(Cp,$7),m(t,ug,c),m(t,Ze,c),f(pn,Ze,null),e(Ze,k7),e(Ze,qe),f(hn,qe,null),e(qe,x7),e(qe,Np),e(Np,A7),e(qe,D7),e(qe,un),e(un,q7),e(un,Up),e(Up,S7),e(un,P7),e(qe,I7),e(qe,zp),e(zp,O7),e(Ze,C7),e(Ze,J),f(fn,J,null),e(J,N7),e(J,Lp),e(Lp,U7),e(J,z7),e(J,gn),e(gn,L7),e(gn,Fp),e(Fp,F7),e(gn,R7),e(J,W7),f(er,J,null),e(J,j7),e(J,_n),e(_n,G7),e(_n,Rp),e(Rp,M7),e(_n,H7),e(J,V7),e(J,no),e(no,so),e(so,B7),e(so,Wp),e(Wp,Y7),e(so,Z7),e(so,jp),e(jp,J7),e(so,X7),e(no,K7),e(no,io),e(io,Q7),e(io,Gp),e(Gp,e$),e(io,t$),e(io,Mp),e(Mp,o$),e(io,r$),e(no,a$),e(no,lo),e(lo,n$),e(lo,Hp),e(Hp,s$),e(lo,i$),e(lo,Vp),e(Vp,l$),e(lo,d$),m(t,fg,c),m(t,co,c),e(co,tr),e(tr,Bp),f(vn,Bp,null),e(co,c$),e(co,Yp),e(Yp,m$),m(t,gg,c),m(t,N,c),f(bn,N,null),e(N,p$),e(N,yn),e(yn,h$),e(yn,Zp),e(Zp,u$),e(yn,f$),e(N,g$),e(N,mo),e(mo,_$),e(mo,yi),e(yi,v$),e(mo,b$),e(mo,wn),e(wn,y$),e(mo,w$),e(N,T$),e(N,se),f(Tn,se,null),e(se,E$),e(se,Jp),e(Jp,$$),e(se,k$),e(se,po),e(po,x$),e(po,Xp),e(Xp,A$),e(po,D$),e(po,Kp),e(Kp,q$),e(po,S$),e(se,P$),e(se,ho),e(ho,I$),e(ho,Qp),e(Qp,O$),e(ho,C$),e(ho,eh),e(eh,N$),e(ho,U$),e(se,z$),e(se,En),e(En,L$),e(En,th),e(th,F$),e(En,R$),e(N,W$),e(N,or),f($n,or,null),e(or,j$),e(or,oh),e(oh,G$),e(N,M$),e(N,yt),f(kn,yt,null),e(yt,H$),e(yt,rh),e(rh,V$),e(yt,B$),e(yt,uo),e(uo,Y$),e(uo,ah),e(ah,Z$),e(uo,J$),e(uo,nh),e(nh,X$),e(uo,K$),e(N,Q$),e(N,rr),f(xn,rr,null),e(rr,e6),e(rr,An),e(An,t6),e(An,sh),e(sh,o6),e(An,r6),e(N,a6),e(N,ar),f(Dn,ar,null),e(ar,n6),e(ar,ih),e(ih,s6),e(N,i6),e(N,nr),f(qn,nr,null),e(nr,l6),e(nr,lh),e(lh,d6),m(t,_g,c),m(t,fo,c),e(fo,sr),e(sr,dh),f(Sn,dh,null),e(fo,c6),e(fo,ch),e(ch,m6),m(t,vg,c),m(t,Je,c),f(Pn,Je,null),e(Je,p6),e(Je,In),e(In,h6),e(In,mh),e(mh,u6),e(In,f6),e(Je,g6),e(Je,go),e(go,_6),e(go,wi),e(wi,v6),e(go,b6),e(go,On),e(On,y6),e(go,w6),m(t,bg,c),m(t,_o,c),e(_o,ir),e(ir,ph),f(Cn,ph,null),e(_o,T6),e(_o,hh),e(hh,E6),m(t,yg,c),m(t,ie,c),e(ie,$6),e(ie,Ti),e(Ti,k6),e(ie,x6),e(ie,uh),e(uh,A6),e(ie,D6),e(ie,Ei),e(Ei,q6),e(ie,S6),e(ie,fh),e(fh,P6),e(ie,I6),m(t,wg,c),m(t,lr,c),e(lr,O6),e(lr,$i),e($i,C6),e(lr,N6),m(t,Tg,c),m(t,dr,c),e(dr,ki),e(ki,gh),e(gh,U6),e(ki,z6),e(dr,L6),e(dr,xi),e(xi,_h),e(_h,F6),e(xi,R6),m(t,Eg,c),m(t,Se,c),e(Se,W6),e(Se,vh),e(vh,j6),e(Se,G6),e(Se,bh),e(bh,M6),e(Se,H6),e(Se,Ai),e(Ai,V6),e(Se,B6),m(t,$g,c),m(t,cr,c),e(cr,mr),e(mr,yh),e(yh,Y6),e(mr,Z6),e(mr,wh),e(wh,J6),e(mr,X6),e(cr,K6),e(cr,Di),e(Di,Th),e(Th,Q6),e(Di,ek),m(t,kg,c),m(t,vo,c),e(vo,pr),e(pr,Eh),f(Nn,Eh,null),e(vo,tk),e(vo,$h),e($h,ok),m(t,xg,c),m(t,Pe,c),e(Pe,rk),e(Pe,qi),e(qi,ak),e(Pe,nk),e(Pe,kh),e(kh,sk),e(Pe,ik),e(Pe,xh),e(xh,lk),e(Pe,dk),m(t,Ag,c),m(t,wt,c),e(wt,ck),e(wt,Ah),e(Ah,mk),e(wt,pk),e(wt,Si),e(Si,hk),e(wt,uk),m(t,Dg,c),m(t,hr,c),e(hr,Pi),e(Pi,Dh),e(Dh,fk),e(Pi,gk),e(hr,_k),e(hr,Ii),e(Ii,qh),e(qh,vk),e(Ii,bk),m(t,qg,c),m(t,Ie,c),e(Ie,yk),e(Ie,Oi),e(Oi,wk),e(Ie,Tk),e(Ie,Sh),e(Sh,Ek),e(Ie,$k),e(Ie,Ph),e(Ph,kk),e(Ie,xk),m(t,Sg,c),m(t,X,c),e(X,Ak),e(X,Ci),e(Ci,Dk),e(X,qk),e(X,Ih),e(Ih,Sk),e(X,Pk),e(X,Oh),e(Oh,Ik),e(X,Ok),e(X,Ch),e(Ch,Ck),e(X,Nk),e(X,Ni),e(Ni,Uk),e(X,zk),m(t,Pg,c),m(t,Ui,c),e(Ui,Lk),m(t,Ig,c),f(Un,t,c),m(t,Og,c),m(t,zi,c),e(zi,Fk),m(t,Cg,c),f(zn,t,c),m(t,Ng,c),m(t,Li,c),e(Li,Rk),m(t,Ug,c),f(Ln,t,c),m(t,zg,c),m(t,Fi,c),e(Fi,Wk),m(t,Lg,c),m(t,Ri,c),e(Ri,jk),m(t,Fg,c),f(Fn,t,c),m(t,Rg,c),m(t,ur,c),e(ur,Gk),e(ur,Nh),e(Nh,Mk),e(ur,Hk),m(t,Wg,c),m(t,bo,c),e(bo,fr),e(fr,Uh),f(Rn,Uh,null),e(bo,Vk),e(bo,zh),e(zh,Bk),m(t,jg,c),m(t,le,c),e(le,Yk),e(le,Wi),e(Wi,Zk),e(le,Jk),e(le,Lh),e(Lh,Xk),e(le,Kk),e(le,Fh),e(Fh,Qk),e(le,e3),e(le,Rh),e(Rh,t3),e(le,o3),m(t,Gg,c),m(t,Tt,c),e(Tt,r3),e(Tt,Wn),e(Wn,a3),e(Tt,n3),e(Tt,Wh),e(Wh,s3),e(Tt,i3),m(t,Mg,c),m(t,yo,c),e(yo,gr),e(gr,jh),f(jn,jh,null),e(yo,l3),e(yo,Gh),e(Gh,d3),m(t,Hg,c),m(t,ji,c),e(ji,c3),m(t,Vg,c),m(t,_r,c),e(_r,m3),e(_r,Gn),e(Gn,Mh),e(Mh,p3),e(_r,h3),m(t,Bg,c),f(Mn,t,c),m(t,Yg,c),m(t,Et,c),e(Et,u3),e(Et,Hn),e(Hn,Hh),e(Hh,f3),e(Et,g3),e(Et,Vn),e(Vn,Vh),e(Vh,_3),e(Et,v3),m(t,Zg,c),f(Bn,t,c),m(t,Jg,c),f(Yn,t,c),m(t,Xg,c),m(t,vr,c),e(vr,b3),e(vr,Gi),e(Gi,y3),e(vr,w3),m(t,Kg,c),m(t,Mi,c),e(Mi,T3),m(t,Qg,c),m(t,Hi,c),e(Hi,E3),m(t,e_,c),m(t,Vi,c),e(Vi,Bh),e(Bh,Yh),e(Yh,$3),m(t,t_,c),m(t,br,c),e(br,k3),e(br,Zh),e(Zh,x3),e(br,A3),m(t,o_,c),m(t,Bi,c),e(Bi,D3),m(t,r_,c),f(Zn,t,c),m(t,a_,c),m(t,$t,c),e($t,q3),e($t,Jh),e(Jh,S3),e($t,P3),e($t,Xh),e(Xh,I3),e($t,O3),m(t,n_,c),m(t,Yi,c),e(Yi,C3),m(t,s_,c),f(Jn,t,c),m(t,i_,c),m(t,kt,c),e(kt,N3),e(kt,Kh),e(Kh,U3),e(kt,z3),e(kt,Qh),e(Qh,L3),e(kt,F3),m(t,l_,c),m(t,xt,c),e(xt,R3),e(xt,eu),e(eu,W3),e(xt,j3),e(xt,Xn),e(Xn,tu),e(tu,G3),e(xt,M3),m(t,d_,c),f(Kn,t,c),m(t,c_,c),m(t,Zi,c),e(Zi,H3),m(t,m_,c),f(Qn,t,c),m(t,p_,c),m(t,Ji,c),e(Ji,V3),m(t,h_,c),f(es,t,c),m(t,u_,c),m(t,Xi,c),e(Xi,B3),m(t,f_,c),m(t,Ki,c),e(Ki,ou),e(ou,ru),e(ru,Y3),m(t,g_,c),m(t,yr,c),e(yr,Z3),e(yr,au),e(au,J3),e(yr,X3),m(t,__,c),m(t,Qi,c),e(Qi,ts),e(ts,K3),e(ts,nu),e(nu,Q3),e(ts,ex),m(t,v_,c),f(os,t,c),m(t,b_,c),m(t,rs,c),e(rs,su),e(su,tx),m(t,y_,c),f(as,t,c),m(t,w_,c),m(t,At,c),e(At,ox),e(At,iu),e(iu,rx),e(At,ax),e(At,lu),e(lu,nx),e(At,sx),m(t,T_,c),m(t,el,c),e(el,ix),m(t,E_,c),f(ns,t,c),m(t,$_,c),m(t,tl,c),e(tl,lx),m(t,k_,c),m(t,wr,c),e(wr,dx),e(wr,du),e(du,cx),e(wr,mx),m(t,x_,c),m(t,wo,c),e(wo,Tr),e(Tr,cu),f(ss,cu,null),e(wo,px),e(wo,mu),e(mu,hx),m(t,A_,c),m(t,Er,c),e(Er,ux),e(Er,ol),e(ol,fx),e(Er,gx),m(t,D_,c),m(t,Oe,c),e(Oe,_x),e(Oe,is),e(is,vx),e(Oe,bx),e(Oe,ls),e(ls,yx),e(Oe,wx),e(Oe,ds),e(ds,Tx),e(Oe,Ex),m(t,q_,c),m(t,rl,c),e(rl,$x),m(t,S_,c),m(t,al,c),m(t,P_,c),m(t,To,c),e(To,$r),e($r,pu),f(cs,pu,null),e(To,kx),e(To,hu),e(hu,xx),m(t,I_,c),m(t,nl,c),e(nl,Ax),m(t,O_,c),m(t,Dt,c),e(Dt,Dx),e(Dt,ms),e(ms,qx),e(Dt,Sx),e(Dt,ps),e(ps,Px),e(Dt,Ix),m(t,C_,c),m(t,sl,c),e(sl,Ox),m(t,N_,c),f(hs,t,c),m(t,U_,c),m(t,il,c),e(il,Cx),m(t,z_,c),m(t,qt,c),e(qt,Nx),e(qt,uu),e(uu,Ux),e(qt,zx),e(qt,fu),e(fu,Lx),e(qt,Fx),m(t,L_,c),m(t,Eo,c),e(Eo,kr),e(kr,gu),f(us,gu,null),e(Eo,Rx),e(Eo,_u),e(_u,Wx),m(t,F_,c),m(t,ll,c),e(ll,jx),m(t,R_,c),m(t,Ce,c),e(Ce,Gx),e(Ce,vu),e(vu,Mx),e(Ce,Hx),e(Ce,bu),e(bu,Vx),e(Ce,Bx),e(Ce,yu),e(yu,Yx),e(Ce,Zx),m(t,W_,c),m(t,St,c),e(St,Jx),e(St,wu),e(wu,Xx),e(St,Kx),e(St,Tu),e(Tu,Qx),e(St,e5),m(t,j_,c),f(fs,t,c),m(t,G_,c),m(t,xr,c),e(xr,t5),e(xr,gs),e(gs,o5),e(xr,r5),m(t,M_,c),m(t,$o,c),e($o,Ar),e(Ar,Eu),f(_s,Eu,null),e($o,a5),e($o,$u),e($u,n5),m(t,H_,c),m(t,dl,c),e(dl,s5),m(t,V_,c),f(vs,t,c),m(t,B_,c),m(t,Pt,c),e(Pt,i5),e(Pt,ku),e(ku,l5),e(Pt,d5),e(Pt,xu),e(xu,c5),e(Pt,m5),m(t,Y_,c),m(t,cl,c),e(cl,p5),m(t,Z_,c),f(bs,t,c),m(t,J_,c),m(t,ml,c),e(ml,h5),m(t,X_,c),m(t,Dr,c),e(Dr,u5),e(Dr,Au),e(Au,f5),e(Dr,g5),m(t,K_,c),m(t,Xe,c),e(Xe,Du),e(Du,_5),e(Xe,v5),e(Xe,qu),e(qu,b5),e(Xe,y5),e(Xe,Su),e(Su,w5),e(Xe,T5),m(t,Q_,c),m(t,pl,c),e(pl,E5),m(t,ev,c),f(ys,t,c),m(t,tv,c),m(t,hl,c),e(hl,$5),m(t,ov,c),m(t,Ne,c),e(Ne,k5),e(Ne,Pu),e(Pu,x5),e(Ne,A5),e(Ne,Iu),e(Iu,D5),e(Ne,q5),e(Ne,Ou),e(Ou,S5),e(Ne,P5),m(t,rv,c),m(t,ko,c),e(ko,qr),e(qr,Cu),f(ws,Cu,null),e(ko,I5),e(ko,Nu),e(Nu,O5),m(t,av,c),m(t,It,c),e(It,C5),e(It,Uu),e(Uu,N5),e(It,U5),e(It,zu),e(zu,z5),e(It,L5),m(t,nv,c),m(t,ul,c),e(ul,F5),m(t,sv,c),m(t,fl,c),e(fl,R5),m(t,iv,c),m(t,Sr,c),e(Sr,W5),e(Sr,Lu),e(Lu,j5),e(Sr,G5),m(t,lv,c),f(Ts,t,c),m(t,dv,c),m(t,W,c),e(W,M5),e(W,Fu),e(Fu,H5),e(W,V5),e(W,Ru),e(Ru,B5),e(W,Y5),e(W,Wu),e(Wu,Z5),e(W,J5),e(W,ju),e(ju,X5),e(W,K5),e(W,Gu),e(Gu,Q5),e(W,eA),e(W,Mu),e(Mu,tA),e(W,oA),m(t,cv,c),m(t,gl,c),e(gl,rA),m(t,mv,c),m(t,xo,c),e(xo,Pr),e(Pr,Hu),f(Es,Hu,null),e(xo,aA),e(xo,Vu),e(Vu,nA),m(t,pv,c),m(t,Ue,c),e(Ue,sA),e(Ue,$s),e($s,iA),e(Ue,lA),e(Ue,_l),e(_l,dA),e(Ue,cA),e(Ue,ks),e(ks,mA),e(Ue,pA),m(t,hv,c),m(t,ze,c),e(ze,Bu),e(Bu,hA),e(ze,uA),e(ze,Yu),e(Yu,fA),e(ze,gA),e(ze,Zu),e(Zu,_A),e(ze,vA),e(ze,Ju),e(Ju,bA),m(t,uv,c),m(t,vl,c),e(vl,yA),m(t,fv,c),m(t,xs,c),e(xs,Xu),e(Xu,wA),e(xs,TA),m(t,gv,c),m(t,bl,c),e(bl,EA),m(t,_v,c),f(As,t,c),m(t,vv,c),m(t,Ot,c),e(Ot,$A),e(Ot,Ku),e(Ku,kA),e(Ot,xA),e(Ot,Qu),e(Qu,AA),e(Ot,DA),m(t,bv,c),f(Ds,t,c),m(t,yv,c),m(t,Ct,c),e(Ct,qA),e(Ct,ef),e(ef,SA),e(Ct,PA),e(Ct,qs),e(qs,IA),e(Ct,OA),m(t,wv,c),m(t,Ir,c),e(Ir,CA),e(Ir,yl),e(yl,NA),e(Ir,UA),m(t,Tv,c),m(t,wl,c),e(wl,zA),m(t,Ev,c),m(t,Ss,c),e(Ss,tf),e(tf,LA),e(Ss,FA),m(t,$v,c),f(Ps,t,c),m(t,kv,c),m(t,Tl,c),e(Tl,RA),m(t,xv,c),f(Is,t,c),m(t,Av,c),m(t,Os,c),e(Os,of),e(of,WA),e(Os,jA),m(t,Dv,c),f(Cs,t,c),m(t,qv,c),m(t,El,c),e(El,GA),m(t,Sv,c),f(Ns,t,c),m(t,Pv,c),m(t,$l,c),e($l,MA),m(t,Iv,c),m(t,Or,c),e(Or,HA),e(Or,Us),e(Us,VA),e(Or,BA),m(t,Ov,c),m(t,zs,c),e(zs,rf),e(rf,YA),e(zs,ZA),m(t,Cv,c),m(t,Nt,c),e(Nt,JA),e(Nt,af),e(af,XA),e(Nt,KA),e(Nt,nf),e(nf,QA),e(Nt,e9),m(t,Nv,c),m(t,Cr,c),e(Cr,t9),e(Cr,sf),e(sf,o9),e(Cr,r9),m(t,Uv,c),f(Ls,t,c),m(t,zv,c),m(t,kl,c),e(kl,a9),m(t,Lv,c),m(t,Le,c),e(Le,lf),e(lf,n9),e(Le,s9),e(Le,df),e(df,i9),e(Le,l9),e(Le,Fs),e(Fs,d9),e(Fs,cf),e(cf,c9),e(Fs,m9),e(Le,p9),e(Le,Rs),e(Rs,h9),e(Rs,mf),e(mf,u9),e(Rs,f9),m(t,Fv,c),m(t,Ws,c),e(Ws,Ke),e(Ke,g9),e(Ke,pf),e(pf,_9),e(Ke,v9),e(Ke,hf),e(hf,b9),e(Ke,y9),e(Ke,uf),e(uf,w9),e(Ke,T9),m(t,Rv,c),m(t,Nr,c),e(Nr,E9),e(Nr,ff),e(ff,$9),e(Nr,k9),m(t,Wv,c),f(js,t,c),m(t,jv,c),m(t,Ao,c),e(Ao,gf),e(gf,x9),e(Ao,A9),e(Ao,_f),e(_f,D9),e(Ao,q9),m(t,Gv,c),m(t,Ut,c),e(Ut,S9),e(Ut,vf),e(vf,P9),e(Ut,I9),e(Ut,bf),e(bf,O9),e(Ut,C9),m(t,Mv,c),m(t,xl,c),e(xl,N9),m(t,Hv,c),m(t,de,c),e(de,yf),e(yf,U9),e(de,z9),e(de,wf),e(wf,L9),e(de,F9),e(de,Gs),e(Gs,R9),e(Gs,Tf),e(Tf,W9),e(Gs,j9),e(de,G9),e(de,Do),e(Do,M9),e(Do,Ef),e(Ef,H9),e(Do,V9),e(Do,$f),e($f,B9),e(Do,Y9),e(de,Z9),e(de,kf),e(kf,J9),m(t,Vv,c),m(t,Al,c),e(Al,X9),m(t,Bv,c),m(t,Ur,c),e(Ur,qo),e(qo,K9),e(qo,xf),e(xf,Q9),e(qo,eD),e(qo,Af),e(Af,tD),e(qo,oD),e(Ur,rD),e(Ur,we),e(we,aD),e(we,Df),e(Df,nD),e(we,sD),e(we,qf),e(qf,iD),e(we,lD),e(we,Sf),e(Sf,dD),e(we,cD),e(we,Pf),e(Pf,mD),e(we,pD),m(t,Yv,c),m(t,Dl,c),e(Dl,hD),m(t,Zv,c),m(t,y,c),e(y,uD),e(y,ql),e(ql,fD),e(y,If),e(y,gD),e(y,Sl),e(Sl,_D),e(y,Of),e(y,vD),e(y,Pl),e(Pl,bD),e(y,Cf),e(y,yD),e(y,Il),e(Il,wD),e(y,Nf),e(y,TD),e(y,Ol),e(Ol,ED),e(y,Uf),e(y,$D),e(y,Cl),e(Cl,kD),e(y,zf),e(y,xD),e(y,Nl),e(Nl,AD),e(y,Lf),e(y,DD),e(y,Ul),e(Ul,qD),e(y,Ff),e(y,SD),e(y,zl),e(zl,PD),e(y,Rf),e(y,ID),e(y,Ll),e(Ll,OD),e(y,Wf),e(y,CD),e(y,Fl),e(Fl,ND),e(y,jf),e(y,UD),e(y,Rl),e(Rl,zD),e(y,Gf),e(y,LD),e(y,Wl),e(Wl,FD),e(y,Mf),e(y,RD),e(y,jl),e(jl,WD),e(y,Hf),e(y,jD),e(y,Gl),e(Gl,GD),e(y,Vf),e(y,MD),e(y,Ml),e(Ml,HD),e(y,Bf),e(y,VD),e(y,Hl),e(Hl,BD),e(y,Yf),e(y,YD),e(y,Vl),e(Vl,ZD),e(y,Zf),e(y,JD),e(y,Bl),e(Bl,XD),e(y,Jf),e(y,KD),e(y,Yl),e(Yl,QD),e(y,Xf),e(y,eq),e(y,Zl),e(Zl,tq),e(y,Kf),e(y,oq),e(y,Jl),e(Jl,rq),e(y,Qf),e(y,aq),e(y,Xl),e(Xl,nq),e(y,eg),e(y,sq),Jv=!0},p(t,[c]){const Ms={};c&2&&(Ms.$$scope={dirty:c,ctx:t}),Co.$set(Ms);const tg={};c&2&&(tg.$$scope={dirty:c,ctx:t}),Go.$set(tg);const og={};c&2&&(og.$$scope={dirty:c,ctx:t}),Zo.$set(og);const rg={};c&2&&(rg.$$scope={dirty:c,ctx:t}),er.$set(rg)},i(t){Jv||(g(L.$$.fragment,t),g(Co.$$.fragment,t),g(sa.$$.fragment,t),g(ia.$$.fragment,t),g(la.$$.fragment,t),g(da.$$.fragment,t),g(ma.$$.fragment,t),g(ha.$$.fragment,t),g(ua.$$.fragment,t),g(ga.$$.fragment,t),g(_a.$$.fragment,t),g(va.$$.fragment,t),g(ya.$$.fragment,t),g(wa.$$.fragment,t),g(Ea.$$.fragment,t),g(ka.$$.fragment,t),g(xa.$$.fragment,t),g(Da.$$.fragment,t),g(Sa.$$.fragment,t),g(Go.$$.fragment,t),g(Pa.$$.fragment,t),g(Oa.$$.fragment,t),g(Ca.$$.fragment,t),g(Ua.$$.fragment,t),g(La.$$.fragment,t),g(Fa.$$.fragment,t),g(ja.$$.fragment,t),g(Ga.$$.fragment,t),g(Ha.$$.fragment,t),g(Ya.$$.fragment,t),g(Zo.$$.fragment,t),g(Xa.$$.fragment,t),g(Ka.$$.fragment,t),g(Qa.$$.fragment,t),g(en.$$.fragment,t),g(on.$$.fragment,t),g(nn.$$.fragment,t),g(ln.$$.fragment,t),g(dn.$$.fragment,t),g(cn.$$.fragment,t),g(mn.$$.fragment,t),g(pn.$$.fragment,t),g(hn.$$.fragment,t),g(fn.$$.fragment,t),g(er.$$.fragment,t),g(vn.$$.fragment,t),g(bn.$$.fragment,t),g(Tn.$$.fragment,t),g($n.$$.fragment,t),g(kn.$$.fragment,t),g(xn.$$.fragment,t),g(Dn.$$.fragment,t),g(qn.$$.fragment,t),g(Sn.$$.fragment,t),g(Pn.$$.fragment,t),g(Cn.$$.fragment,t),g(Nn.$$.fragment,t),g(Un.$$.fragment,t),g(zn.$$.fragment,t),g(Ln.$$.fragment,t),g(Fn.$$.fragment,t),g(Rn.$$.fragment,t),g(jn.$$.fragment,t),g(Mn.$$.fragment,t),g(Bn.$$.fragment,t),g(Yn.$$.fragment,t),g(Zn.$$.fragment,t),g(Jn.$$.fragment,t),g(Kn.$$.fragment,t),g(Qn.$$.fragment,t),g(es.$$.fragment,t),g(os.$$.fragment,t),g(as.$$.fragment,t),g(ns.$$.fragment,t),g(ss.$$.fragment,t),g(cs.$$.fragment,t),g(hs.$$.fragment,t),g(us.$$.fragment,t),g(fs.$$.fragment,t),g(_s.$$.fragment,t),g(vs.$$.fragment,t),g(bs.$$.fragment,t),g(ys.$$.fragment,t),g(ws.$$.fragment,t),g(Ts.$$.fragment,t),g(Es.$$.fragment,t),g(As.$$.fragment,t),g(Ds.$$.fragment,t),g(Ps.$$.fragment,t),g(Is.$$.fragment,t),g(Cs.$$.fragment,t),g(Ns.$$.fragment,t),g(Ls.$$.fragment,t),g(js.$$.fragment,t),Jv=!0)},o(t){_(L.$$.fragment,t),_(Co.$$.fragment,t),_(sa.$$.fragment,t),_(ia.$$.fragment,t),_(la.$$.fragment,t),_(da.$$.fragment,t),_(ma.$$.fragment,t),_(ha.$$.fragment,t),_(ua.$$.fragment,t),_(ga.$$.fragment,t),_(_a.$$.fragment,t),_(va.$$.fragment,t),_(ya.$$.fragment,t),_(wa.$$.fragment,t),_(Ea.$$.fragment,t),_(ka.$$.fragment,t),_(xa.$$.fragment,t),_(Da.$$.fragment,t),_(Sa.$$.fragment,t),_(Go.$$.fragment,t),_(Pa.$$.fragment,t),_(Oa.$$.fragment,t),_(Ca.$$.fragment,t),_(Ua.$$.fragment,t),_(La.$$.fragment,t),_(Fa.$$.fragment,t),_(ja.$$.fragment,t),_(Ga.$$.fragment,t),_(Ha.$$.fragment,t),_(Ya.$$.fragment,t),_(Zo.$$.fragment,t),_(Xa.$$.fragment,t),_(Ka.$$.fragment,t),_(Qa.$$.fragment,t),_(en.$$.fragment,t),_(on.$$.fragment,t),_(nn.$$.fragment,t),_(ln.$$.fragment,t),_(dn.$$.fragment,t),_(cn.$$.fragment,t),_(mn.$$.fragment,t),_(pn.$$.fragment,t),_(hn.$$.fragment,t),_(fn.$$.fragment,t),_(er.$$.fragment,t),_(vn.$$.fragment,t),_(bn.$$.fragment,t),_(Tn.$$.fragment,t),_($n.$$.fragment,t),_(kn.$$.fragment,t),_(xn.$$.fragment,t),_(Dn.$$.fragment,t),_(qn.$$.fragment,t),_(Sn.$$.fragment,t),_(Pn.$$.fragment,t),_(Cn.$$.fragment,t),_(Nn.$$.fragment,t),_(Un.$$.fragment,t),_(zn.$$.fragment,t),_(Ln.$$.fragment,t),_(Fn.$$.fragment,t),_(Rn.$$.fragment,t),_(jn.$$.fragment,t),_(Mn.$$.fragment,t),_(Bn.$$.fragment,t),_(Yn.$$.fragment,t),_(Zn.$$.fragment,t),_(Jn.$$.fragment,t),_(Kn.$$.fragment,t),_(Qn.$$.fragment,t),_(es.$$.fragment,t),_(os.$$.fragment,t),_(as.$$.fragment,t),_(ns.$$.fragment,t),_(ss.$$.fragment,t),_(cs.$$.fragment,t),_(hs.$$.fragment,t),_(us.$$.fragment,t),_(fs.$$.fragment,t),_(_s.$$.fragment,t),_(vs.$$.fragment,t),_(bs.$$.fragment,t),_(ys.$$.fragment,t),_(ws.$$.fragment,t),_(Ts.$$.fragment,t),_(Es.$$.fragment,t),_(As.$$.fragment,t),_(Ds.$$.fragment,t),_(Ps.$$.fragment,t),_(Is.$$.fragment,t),_(Cs.$$.fragment,t),_(Ns.$$.fragment,t),_(Ls.$$.fragment,t),_(js.$$.fragment,t),Jv=!1},d(t){o(E),t&&o(z),t&&o(x),v(L),t&&o(K),t&&o(R),t&&o(C),t&&o(S),t&&o(Me),t&&o(Ee),t&&o(B),t&&o(M),t&&o(Vt),t&&o(D),t&&o(ig),v(Co,t),t&&o(lg),t&&o(No),t&&o(dg),v(sa,t),t&&o(cg),t&&o(at),t&&o(mg),t&&o(Bt),v(ia),t&&o(pg),t&&o(b),v(la),v(da),v(ma),v(ha),v(ua),v(ga),v(_a),v(va),v(ya),v(wa),v(Ea),v(ka),v(xa),v(Da),v(Sa),v(Go),v(Pa),v(Oa),v(Ca),v(Ua),v(La),v(Fa),v(ja),v(Ga),v(Ha),v(Ya),v(Zo),v(Xa),v(Ka),v(Qa),v(en),v(on),v(nn),v(ln),v(dn),v(cn),t&&o(hg),t&&o(ao),v(mn),t&&o(ug),t&&o(Ze),v(pn),v(hn),v(fn),v(er),t&&o(fg),t&&o(co),v(vn),t&&o(gg),t&&o(N),v(bn),v(Tn),v($n),v(kn),v(xn),v(Dn),v(qn),t&&o(_g),t&&o(fo),v(Sn),t&&o(vg),t&&o(Je),v(Pn),t&&o(bg),t&&o(_o),v(Cn),t&&o(yg),t&&o(ie),t&&o(wg),t&&o(lr),t&&o(Tg),t&&o(dr),t&&o(Eg),t&&o(Se),t&&o($g),t&&o(cr),t&&o(kg),t&&o(vo),v(Nn),t&&o(xg),t&&o(Pe),t&&o(Ag),t&&o(wt),t&&o(Dg),t&&o(hr),t&&o(qg),t&&o(Ie),t&&o(Sg),t&&o(X),t&&o(Pg),t&&o(Ui),t&&o(Ig),v(Un,t),t&&o(Og),t&&o(zi),t&&o(Cg),v(zn,t),t&&o(Ng),t&&o(Li),t&&o(Ug),v(Ln,t),t&&o(zg),t&&o(Fi),t&&o(Lg),t&&o(Ri),t&&o(Fg),v(Fn,t),t&&o(Rg),t&&o(ur),t&&o(Wg),t&&o(bo),v(Rn),t&&o(jg),t&&o(le),t&&o(Gg),t&&o(Tt),t&&o(Mg),t&&o(yo),v(jn),t&&o(Hg),t&&o(ji),t&&o(Vg),t&&o(_r),t&&o(Bg),v(Mn,t),t&&o(Yg),t&&o(Et),t&&o(Zg),v(Bn,t),t&&o(Jg),v(Yn,t),t&&o(Xg),t&&o(vr),t&&o(Kg),t&&o(Mi),t&&o(Qg),t&&o(Hi),t&&o(e_),t&&o(Vi),t&&o(t_),t&&o(br),t&&o(o_),t&&o(Bi),t&&o(r_),v(Zn,t),t&&o(a_),t&&o($t),t&&o(n_),t&&o(Yi),t&&o(s_),v(Jn,t),t&&o(i_),t&&o(kt),t&&o(l_),t&&o(xt),t&&o(d_),v(Kn,t),t&&o(c_),t&&o(Zi),t&&o(m_),v(Qn,t),t&&o(p_),t&&o(Ji),t&&o(h_),v(es,t),t&&o(u_),t&&o(Xi),t&&o(f_),t&&o(Ki),t&&o(g_),t&&o(yr),t&&o(__),t&&o(Qi),t&&o(v_),v(os,t),t&&o(b_),t&&o(rs),t&&o(y_),v(as,t),t&&o(w_),t&&o(At),t&&o(T_),t&&o(el),t&&o(E_),v(ns,t),t&&o($_),t&&o(tl),t&&o(k_),t&&o(wr),t&&o(x_),t&&o(wo),v(ss),t&&o(A_),t&&o(Er),t&&o(D_),t&&o(Oe),t&&o(q_),t&&o(rl),t&&o(S_),t&&o(al),t&&o(P_),t&&o(To),v(cs),t&&o(I_),t&&o(nl),t&&o(O_),t&&o(Dt),t&&o(C_),t&&o(sl),t&&o(N_),v(hs,t),t&&o(U_),t&&o(il),t&&o(z_),t&&o(qt),t&&o(L_),t&&o(Eo),v(us),t&&o(F_),t&&o(ll),t&&o(R_),t&&o(Ce),t&&o(W_),t&&o(St),t&&o(j_),v(fs,t),t&&o(G_),t&&o(xr),t&&o(M_),t&&o($o),v(_s),t&&o(H_),t&&o(dl),t&&o(V_),v(vs,t),t&&o(B_),t&&o(Pt),t&&o(Y_),t&&o(cl),t&&o(Z_),v(bs,t),t&&o(J_),t&&o(ml),t&&o(X_),t&&o(Dr),t&&o(K_),t&&o(Xe),t&&o(Q_),t&&o(pl),t&&o(ev),v(ys,t),t&&o(tv),t&&o(hl),t&&o(ov),t&&o(Ne),t&&o(rv),t&&o(ko),v(ws),t&&o(av),t&&o(It),t&&o(nv),t&&o(ul),t&&o(sv),t&&o(fl),t&&o(iv),t&&o(Sr),t&&o(lv),v(Ts,t),t&&o(dv),t&&o(W),t&&o(cv),t&&o(gl),t&&o(mv),t&&o(xo),v(Es),t&&o(pv),t&&o(Ue),t&&o(hv),t&&o(ze),t&&o(uv),t&&o(vl),t&&o(fv),t&&o(xs),t&&o(gv),t&&o(bl),t&&o(_v),v(As,t),t&&o(vv),t&&o(Ot),t&&o(bv),v(Ds,t),t&&o(yv),t&&o(Ct),t&&o(wv),t&&o(Ir),t&&o(Tv),t&&o(wl),t&&o(Ev),t&&o(Ss),t&&o($v),v(Ps,t),t&&o(kv),t&&o(Tl),t&&o(xv),v(Is,t),t&&o(Av),t&&o(Os),t&&o(Dv),v(Cs,t),t&&o(qv),t&&o(El),t&&o(Sv),v(Ns,t),t&&o(Pv),t&&o($l),t&&o(Iv),t&&o(Or),t&&o(Ov),t&&o(zs),t&&o(Cv),t&&o(Nt),t&&o(Nv),t&&o(Cr),t&&o(Uv),v(Ls,t),t&&o(zv),t&&o(kl),t&&o(Lv),t&&o(Le),t&&o(Fv),t&&o(Ws),t&&o(Rv),t&&o(Nr),t&&o(Wv),v(js,t),t&&o(jv),t&&o(Ao),t&&o(Gv),t&&o(Ut),t&&o(Mv),t&&o(xl),t&&o(Hv),t&&o(de),t&&o(Vv),t&&o(Al),t&&o(Bv),t&&o(Ur),t&&o(Yv),t&&o(Dl),t&&o(Zv),t&&o(y)}}}const zU={local:"trainer",sections:[{local:"transformers.Trainer",title:"Trainer"},{local:"transformers.Seq2SeqTrainer",title:"Seq2SeqTrainer"},{local:"transformers.TrainingArguments",title:"TrainingArguments"},{local:"transformers.Seq2SeqTrainingArguments",title:"Seq2SeqTrainingArguments"},{local:"checkpoints",title:"Checkpoints"},{local:"logging",title:"Logging"},{local:"randomness",title:"Randomness"},{local:"specific-gpus-selection",title:"Specific GPUs Selection"},{local:"trainer-integrations",sections:[{local:"cuda-extension-installation-notes",sections:[{local:"possible-problem-1",title:"Possible problem #1"},{local:"possible-problem-2",title:"Possible problem #2"},{local:"possible-problem-3",title:"Possible problem #3"}],title:"CUDA Extension Installation Notes"},{local:"fairscale",title:"FairScale"}],title:"Trainer Integrations"}],title:"Trainer"};function LU(Qe){return PU(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class MU extends AU{constructor(E){super();DU(this,E,LU,UU,qU,{})}}export{MU as default,zU as metadata};
