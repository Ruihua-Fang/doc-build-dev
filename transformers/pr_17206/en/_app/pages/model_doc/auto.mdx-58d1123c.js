import{S as _wt,i as bwt,s as vwt,e as a,k as l,w as F,t as o,M as Fwt,c as n,d as t,m as i,a as s,x as T,h as r,b as c,F as e,g as b,y as M,q as E,o as C,B as w,v as Twt,L as I}from"../../chunks/vendor-6b77c823.js";import{T as eNr}from"../../chunks/Tip-39098574.js";import{D as R}from"../../chunks/Docstring-1088f2fb.js";import{C as B}from"../../chunks/CodeBlock-3a8b25a8.js";import{I as ee}from"../../chunks/IconCopyLink-7a11ce68.js";import{E as P}from"../../chunks/ExampleCodeBlock-5212b321.js";function Mwt(A){let g,v,p,m,u,d,h,Mo,li,mf,et,ii,di,Vw,gf,qe,Xe,ci,An,Xw,yn,Ln,zw,fi,xn,Qw,mi,hf,Ma;return{c(){g=a("p"),v=o("If your "),p=a("code"),m=o("NewModelConfig"),u=o(" is a subclass of "),d=a("code"),h=o("PretrainedConfig"),Mo=o(`, make sure its
`),li=a("code"),mf=o("model_type"),et=o(" attribute is set to the same key you use when registering the config (here "),ii=a("code"),di=o('"new-model"'),Vw=o(")."),gf=l(),qe=a("p"),Xe=o("Likewise, if your "),ci=a("code"),An=o("NewModel"),Xw=o(" is a subclass of "),yn=a("a"),Ln=o("PreTrainedModel"),zw=o(`, make sure its
`),fi=a("code"),xn=o("config_class"),Qw=o(` attribute is set to the same class you use when registering the model (here
`),mi=a("code"),hf=o("NewModelConfig"),Ma=o(")."),this.h()},l(ze){g=n(ze,"P",{});var Ae=s(g);v=r(Ae,"If your "),p=n(Ae,"CODE",{});var c$=s(p);m=r(c$,"NewModelConfig"),c$.forEach(t),u=r(Ae," is a subclass of "),d=n(Ae,"CODE",{});var gi=s(d);h=r(gi,"PretrainedConfig"),gi.forEach(t),Mo=r(Ae,`, make sure its
`),li=n(Ae,"CODE",{});var f$=s(li);mf=r(f$,"model_type"),f$.forEach(t),et=r(Ae," attribute is set to the same key you use when registering the config (here "),ii=n(Ae,"CODE",{});var m$=s(ii);di=r(m$,'"new-model"'),m$.forEach(t),Vw=r(Ae,")."),Ae.forEach(t),gf=i(ze),qe=n(ze,"P",{});var Eo=s(qe);Xe=r(Eo,"Likewise, if your "),ci=n(Eo,"CODE",{});var Ea=s(ci);An=r(Ea,"NewModel"),Ea.forEach(t),Xw=r(Eo," is a subclass of "),yn=n(Eo,"A",{href:!0});var g$=s(yn);Ln=r(g$,"PreTrainedModel"),g$.forEach(t),zw=r(Eo,`, make sure its
`),fi=n(Eo,"CODE",{});var pf=s(fi);xn=r(pf,"config_class"),pf.forEach(t),Qw=r(Eo,` attribute is set to the same class you use when registering the model (here
`),mi=n(Eo,"CODE",{});var h$=s(mi);hf=r(h$,"NewModelConfig"),h$.forEach(t),Ma=r(Eo,")."),Eo.forEach(t),this.h()},h(){c(yn,"href","/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel")},m(ze,Ae){b(ze,g,Ae),e(g,v),e(g,p),e(p,m),e(g,u),e(g,d),e(d,h),e(g,Mo),e(g,li),e(li,mf),e(g,et),e(g,ii),e(ii,di),e(g,Vw),b(ze,gf,Ae),b(ze,qe,Ae),e(qe,Xe),e(qe,ci),e(ci,An),e(qe,Xw),e(qe,yn),e(yn,Ln),e(qe,zw),e(qe,fi),e(fi,xn),e(qe,Qw),e(qe,mi),e(mi,hf),e(qe,Ma)},d(ze){ze&&t(g),ze&&t(gf),ze&&t(qe)}}}function Ewt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

config.unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config.unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Cwt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wwt(A){let g,v,p,m,u;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),u=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Mo=s(p);m=r(Mo,"use_auth_token=True"),Mo.forEach(t),u=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,u)},d(d){d&&t(g)}}}function Awt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ywt(A){let g,v,p,m,u;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),u=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Mo=s(p);m=r(Mo,"use_auth_token=True"),Mo.forEach(t),u=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,u)},d(d){d&&t(g)}}}function Lwt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xwt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $wt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kwt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Swt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Rwt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Bwt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Pwt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Iwt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qwt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Nwt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jwt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Dwt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Gwt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Owt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Vwt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Xwt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zwt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Qwt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Wwt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Hwt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Uwt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Jwt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ywt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Kwt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Zwt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function eAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function aAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _At(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function FAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function TAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function MAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function EAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function CAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function AAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function LAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $At(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function SAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function RAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function BAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function PAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function IAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function NAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function DAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function GAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function OAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function VAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function XAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function QAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function WAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function HAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function UAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function JAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function YAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function KAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ZAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function eyt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oyt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ryt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tyt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ayt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nyt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function syt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lyt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iyt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dyt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cyt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fyt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function myt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gyt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hyt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pyt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uyt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _yt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function byt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vyt(A){let g,v,p,m,u,d,h,Mo,li,mf,et,ii,di,Vw,gf,qe,Xe,ci,An,Xw,yn,Ln,zw,fi,xn,Qw,mi,hf,Ma,ze,Ae,c$,gi,f$,m$,Eo,Ea,g$,pf,h$,Nje,yPe,hi,uf,QZ,Ww,jje,WZ,Dje,LPe,$n,Gje,HZ,Oje,Vje,UZ,Xje,zje,xPe,Hw,$Pe,p$,Qje,kPe,_f,SPe,pi,bf,JZ,Uw,Wje,YZ,Hje,RPe,Co,Jw,Uje,Yw,Jje,u$,Yje,Kje,Zje,Kw,eDe,KZ,oDe,rDe,tDe,Er,Zw,aDe,ZZ,nDe,sDe,ui,lDe,eee,iDe,dDe,oee,cDe,fDe,mDe,y,vf,ree,gDe,hDe,_$,pDe,uDe,_De,Ff,tee,bDe,vDe,b$,FDe,TDe,MDe,Tf,aee,EDe,CDe,v$,wDe,ADe,yDe,Mf,nee,LDe,xDe,F$,$De,kDe,SDe,Ef,see,RDe,BDe,T$,PDe,IDe,qDe,Cf,lee,NDe,jDe,M$,DDe,GDe,ODe,wf,iee,VDe,XDe,E$,zDe,QDe,WDe,Af,dee,HDe,UDe,C$,JDe,YDe,KDe,yf,cee,ZDe,eGe,w$,oGe,rGe,tGe,Lf,fee,aGe,nGe,A$,sGe,lGe,iGe,xf,mee,dGe,cGe,y$,fGe,mGe,gGe,$f,gee,hGe,pGe,L$,uGe,_Ge,bGe,kf,hee,vGe,FGe,x$,TGe,MGe,EGe,Sf,pee,CGe,wGe,$$,AGe,yGe,LGe,Rf,uee,xGe,$Ge,k$,kGe,SGe,RGe,Bf,_ee,BGe,PGe,S$,IGe,qGe,NGe,Pf,bee,jGe,DGe,R$,GGe,OGe,VGe,If,vee,XGe,zGe,B$,QGe,WGe,HGe,qf,Fee,UGe,JGe,P$,YGe,KGe,ZGe,Nf,Tee,eOe,oOe,I$,rOe,tOe,aOe,jf,Mee,nOe,sOe,q$,lOe,iOe,dOe,Df,Eee,cOe,fOe,N$,mOe,gOe,hOe,Gf,Cee,pOe,uOe,j$,_Oe,bOe,vOe,Of,wee,FOe,TOe,D$,MOe,EOe,COe,Vf,Aee,wOe,AOe,G$,yOe,LOe,xOe,Xf,yee,$Oe,kOe,O$,SOe,ROe,BOe,zf,Lee,POe,IOe,V$,qOe,NOe,jOe,Qf,xee,DOe,GOe,X$,OOe,VOe,XOe,Wf,$ee,zOe,QOe,z$,WOe,HOe,UOe,Hf,kee,JOe,YOe,Q$,KOe,ZOe,eVe,Uf,See,oVe,rVe,W$,tVe,aVe,nVe,Jf,Ree,sVe,lVe,H$,iVe,dVe,cVe,Yf,Bee,fVe,mVe,U$,gVe,hVe,pVe,Kf,Pee,uVe,_Ve,J$,bVe,vVe,FVe,Zf,Iee,TVe,MVe,Y$,EVe,CVe,wVe,em,qee,AVe,yVe,K$,LVe,xVe,$Ve,om,Nee,kVe,SVe,Z$,RVe,BVe,PVe,rm,jee,IVe,qVe,ek,NVe,jVe,DVe,tm,Dee,GVe,OVe,ok,VVe,XVe,zVe,am,Gee,QVe,WVe,rk,HVe,UVe,JVe,nm,Oee,YVe,KVe,tk,ZVe,eXe,oXe,sm,Vee,rXe,tXe,ak,aXe,nXe,sXe,lm,Xee,lXe,iXe,nk,dXe,cXe,fXe,im,zee,mXe,gXe,sk,hXe,pXe,uXe,dm,Qee,_Xe,bXe,lk,vXe,FXe,TXe,cm,Wee,MXe,EXe,ik,CXe,wXe,AXe,fm,Hee,yXe,LXe,dk,xXe,$Xe,kXe,mm,Uee,SXe,RXe,ck,BXe,PXe,IXe,gm,Jee,qXe,NXe,fk,jXe,DXe,GXe,hm,Yee,OXe,VXe,mk,XXe,zXe,QXe,pm,Kee,WXe,HXe,gk,UXe,JXe,YXe,um,Zee,KXe,ZXe,hk,eze,oze,rze,_m,eoe,tze,aze,pk,nze,sze,lze,bm,ooe,ize,dze,uk,cze,fze,mze,vm,roe,gze,hze,_k,pze,uze,_ze,Fm,toe,bze,vze,bk,Fze,Tze,Mze,Tm,aoe,Eze,Cze,vk,wze,Aze,yze,Mm,noe,Lze,xze,Fk,$ze,kze,Sze,Em,soe,Rze,Bze,Tk,Pze,Ize,qze,Cm,loe,Nze,jze,Mk,Dze,Gze,Oze,wm,ioe,Vze,Xze,Ek,zze,Qze,Wze,Am,doe,Hze,Uze,Ck,Jze,Yze,Kze,ym,coe,Zze,eQe,wk,oQe,rQe,tQe,Lm,foe,aQe,nQe,Ak,sQe,lQe,iQe,xm,moe,dQe,cQe,yk,fQe,mQe,gQe,$m,goe,hQe,pQe,Lk,uQe,_Qe,bQe,km,hoe,vQe,FQe,xk,TQe,MQe,EQe,Sm,poe,CQe,wQe,$k,AQe,yQe,LQe,Rm,uoe,xQe,$Qe,kk,kQe,SQe,RQe,Bm,_oe,BQe,PQe,Sk,IQe,qQe,NQe,Pm,boe,jQe,DQe,Rk,GQe,OQe,VQe,Im,voe,XQe,zQe,Bk,QQe,WQe,HQe,qm,Foe,UQe,JQe,Pk,YQe,KQe,ZQe,Nm,Toe,eWe,oWe,Ik,rWe,tWe,aWe,jm,Moe,nWe,sWe,qk,lWe,iWe,dWe,Dm,Eoe,cWe,fWe,Nk,mWe,gWe,hWe,Gm,Coe,pWe,uWe,jk,_We,bWe,vWe,Om,woe,FWe,TWe,Dk,MWe,EWe,CWe,Vm,Aoe,wWe,AWe,Gk,yWe,LWe,xWe,Xm,yoe,$We,kWe,Ok,SWe,RWe,BWe,zm,Loe,PWe,IWe,Vk,qWe,NWe,jWe,Qm,xoe,DWe,GWe,Xk,OWe,VWe,XWe,Wm,$oe,zWe,QWe,zk,WWe,HWe,UWe,Hm,koe,JWe,YWe,Qk,KWe,ZWe,eHe,Um,Soe,oHe,rHe,Wk,tHe,aHe,nHe,Jm,Roe,sHe,lHe,Hk,iHe,dHe,cHe,Ym,Boe,fHe,mHe,Uk,gHe,hHe,pHe,Km,Poe,uHe,_He,Jk,bHe,vHe,FHe,Zm,Ioe,THe,MHe,Yk,EHe,CHe,wHe,eg,qoe,AHe,yHe,Kk,LHe,xHe,$He,og,Noe,kHe,SHe,Zk,RHe,BHe,PHe,rg,joe,IHe,qHe,eS,NHe,jHe,DHe,tg,Doe,GHe,OHe,oS,VHe,XHe,zHe,ag,Goe,QHe,WHe,rS,HHe,UHe,JHe,ng,Ooe,YHe,KHe,tS,ZHe,eUe,oUe,sg,Voe,rUe,tUe,aS,aUe,nUe,sUe,lg,Xoe,lUe,iUe,nS,dUe,cUe,fUe,ig,zoe,mUe,gUe,sS,hUe,pUe,uUe,dg,Qoe,_Ue,bUe,lS,vUe,FUe,TUe,cg,Woe,MUe,EUe,iS,CUe,wUe,AUe,fg,Hoe,yUe,LUe,dS,xUe,$Ue,kUe,mg,Uoe,SUe,RUe,cS,BUe,PUe,IUe,gg,Joe,qUe,NUe,fS,jUe,DUe,GUe,hg,Yoe,OUe,VUe,mS,XUe,zUe,QUe,pg,WUe,ug,eA,HUe,Koe,UUe,BPe,_i,_g,Zoe,oA,JUe,ere,YUe,PPe,wo,rA,KUe,tA,ZUe,gS,eJe,oJe,rJe,aA,tJe,ore,aJe,nJe,sJe,Cr,nA,lJe,rre,iJe,dJe,Ca,cJe,tre,fJe,mJe,are,gJe,hJe,nre,pJe,uJe,_Je,k,kn,sre,bJe,vJe,hS,FJe,TJe,pS,MJe,EJe,CJe,Sn,lre,wJe,AJe,uS,yJe,LJe,_S,xJe,$Je,kJe,Rn,ire,SJe,RJe,bS,BJe,PJe,vS,IJe,qJe,NJe,bg,dre,jJe,DJe,FS,GJe,OJe,VJe,Bn,cre,XJe,zJe,TS,QJe,WJe,MS,HJe,UJe,JJe,vg,fre,YJe,KJe,ES,ZJe,eYe,oYe,Fg,mre,rYe,tYe,CS,aYe,nYe,sYe,Tg,gre,lYe,iYe,wS,dYe,cYe,fYe,Pn,hre,mYe,gYe,AS,hYe,pYe,yS,uYe,_Ye,bYe,In,pre,vYe,FYe,LS,TYe,MYe,xS,EYe,CYe,wYe,qn,ure,AYe,yYe,$S,LYe,xYe,kS,$Ye,kYe,SYe,Mg,_re,RYe,BYe,SS,PYe,IYe,qYe,Eg,bre,NYe,jYe,RS,DYe,GYe,OYe,Nn,vre,VYe,XYe,BS,zYe,QYe,PS,WYe,HYe,UYe,Cg,Fre,JYe,YYe,IS,KYe,ZYe,eKe,jn,Tre,oKe,rKe,qS,tKe,aKe,NS,nKe,sKe,lKe,Dn,Mre,iKe,dKe,jS,cKe,fKe,DS,mKe,gKe,hKe,Gn,Ere,pKe,uKe,GS,_Ke,bKe,OS,vKe,FKe,TKe,wg,Cre,MKe,EKe,VS,CKe,wKe,AKe,On,wre,yKe,LKe,XS,xKe,$Ke,zS,kKe,SKe,RKe,Vn,Are,BKe,PKe,QS,IKe,qKe,WS,NKe,jKe,DKe,Xn,yre,GKe,OKe,HS,VKe,XKe,US,zKe,QKe,WKe,zn,Lre,HKe,UKe,JS,JKe,YKe,YS,KKe,ZKe,eZe,Qn,xre,oZe,rZe,KS,tZe,aZe,ZS,nZe,sZe,lZe,Wn,$re,iZe,dZe,eR,cZe,fZe,oR,mZe,gZe,hZe,Ag,kre,pZe,uZe,rR,_Ze,bZe,vZe,Hn,Sre,FZe,TZe,tR,MZe,EZe,aR,CZe,wZe,AZe,yg,Rre,yZe,LZe,nR,xZe,$Ze,kZe,Un,Bre,SZe,RZe,sR,BZe,PZe,lR,IZe,qZe,NZe,Jn,Pre,jZe,DZe,iR,GZe,OZe,dR,VZe,XZe,zZe,Yn,Ire,QZe,WZe,cR,HZe,UZe,fR,JZe,YZe,KZe,Kn,qre,ZZe,eeo,mR,oeo,reo,gR,teo,aeo,neo,Zn,Nre,seo,leo,hR,ieo,deo,pR,ceo,feo,meo,Lg,jre,geo,heo,uR,peo,ueo,_eo,es,Dre,beo,veo,_R,Feo,Teo,bR,Meo,Eeo,Ceo,os,Gre,weo,Aeo,vR,yeo,Leo,FR,xeo,$eo,keo,rs,Ore,Seo,Reo,TR,Beo,Peo,MR,Ieo,qeo,Neo,ts,Vre,jeo,Deo,ER,Geo,Oeo,CR,Veo,Xeo,zeo,as,Xre,Qeo,Weo,wR,Heo,Ueo,AR,Jeo,Yeo,Keo,ns,zre,Zeo,eoo,yR,ooo,roo,LR,too,aoo,noo,xg,Qre,soo,loo,xR,ioo,doo,coo,ss,Wre,foo,moo,$R,goo,hoo,kR,poo,uoo,_oo,$g,Hre,boo,voo,SR,Foo,Too,Moo,kg,Ure,Eoo,Coo,RR,woo,Aoo,yoo,ls,Jre,Loo,xoo,BR,$oo,koo,PR,Soo,Roo,Boo,is,Yre,Poo,Ioo,IR,qoo,Noo,qR,joo,Doo,Goo,ds,Kre,Ooo,Voo,NR,Xoo,zoo,jR,Qoo,Woo,Hoo,Sg,Zre,Uoo,Joo,DR,Yoo,Koo,Zoo,cs,ete,ero,oro,GR,rro,tro,OR,aro,nro,sro,fs,ote,lro,iro,VR,dro,cro,XR,fro,mro,gro,ms,rte,hro,pro,zR,uro,_ro,QR,bro,vro,Fro,gs,tte,Tro,Mro,WR,Ero,Cro,HR,wro,Aro,yro,hs,ate,Lro,xro,UR,$ro,kro,JR,Sro,Rro,Bro,ps,nte,Pro,Iro,YR,qro,Nro,KR,jro,Dro,Gro,Rg,ste,Oro,Vro,ZR,Xro,zro,Qro,Bg,lte,Wro,Hro,eB,Uro,Jro,Yro,Pg,ite,Kro,Zro,oB,eto,oto,rto,Ig,dte,tto,ato,rB,nto,sto,lto,us,cte,ito,dto,tB,cto,fto,aB,mto,gto,hto,qg,fte,pto,uto,nB,_to,bto,vto,_s,mte,Fto,Tto,sB,Mto,Eto,lB,Cto,wto,Ato,bs,gte,yto,Lto,iB,xto,$to,dB,kto,Sto,Rto,vs,hte,Bto,Pto,cB,Ito,qto,fB,Nto,jto,Dto,Fs,pte,Gto,Oto,mB,Vto,Xto,gB,zto,Qto,Wto,Ts,ute,Hto,Uto,hB,Jto,Yto,pB,Kto,Zto,eao,Ms,_te,oao,rao,uB,tao,aao,_B,nao,sao,lao,Ng,bte,iao,dao,bB,cao,fao,mao,jg,vte,gao,hao,vB,pao,uao,_ao,Es,Fte,bao,vao,FB,Fao,Tao,TB,Mao,Eao,Cao,Cs,Tte,wao,Aao,MB,yao,Lao,EB,xao,$ao,kao,ws,Mte,Sao,Rao,CB,Bao,Pao,wB,Iao,qao,Nao,Dg,Ete,jao,Dao,AB,Gao,Oao,Vao,Gg,Cte,Xao,zao,yB,Qao,Wao,Hao,Og,wte,Uao,Jao,LB,Yao,Kao,Zao,As,Ate,eno,ono,xB,rno,tno,$B,ano,nno,sno,Vg,yte,lno,ino,kB,dno,cno,fno,Xg,Lte,mno,gno,SB,hno,pno,uno,ys,xte,_no,bno,RB,vno,Fno,BB,Tno,Mno,Eno,zg,$te,Cno,wno,PB,Ano,yno,Lno,Qg,kte,xno,$no,IB,kno,Sno,Rno,Ls,Ste,Bno,Pno,qB,Ino,qno,NB,Nno,jno,Dno,xs,Rte,Gno,Ono,jB,Vno,Xno,DB,zno,Qno,Wno,$s,Bte,Hno,Uno,GB,Jno,Yno,OB,Kno,Zno,eso,ks,Pte,oso,rso,VB,tso,aso,XB,nso,sso,lso,Wg,iso,Hg,sA,dso,Ite,cso,IPe,bi,Ug,qte,lA,fso,Nte,mso,qPe,Ao,iA,gso,dA,hso,zB,pso,uso,_so,cA,bso,jte,vso,Fso,Tso,Qe,fA,Mso,Dte,Eso,Cso,wa,wso,Gte,Aso,yso,Ote,Lso,xso,Vte,$so,kso,Sso,oe,Jg,Xte,Rso,Bso,QB,Pso,Iso,qso,Yg,zte,Nso,jso,WB,Dso,Gso,Oso,Kg,Qte,Vso,Xso,HB,zso,Qso,Wso,Zg,Wte,Hso,Uso,UB,Jso,Yso,Kso,eh,Hte,Zso,elo,JB,olo,rlo,tlo,oh,Ute,alo,nlo,YB,slo,llo,ilo,rh,Jte,dlo,clo,KB,flo,mlo,glo,th,Yte,hlo,plo,ZB,ulo,_lo,blo,ah,Kte,vlo,Flo,eP,Tlo,Mlo,Elo,nh,Zte,Clo,wlo,oP,Alo,ylo,Llo,sh,eae,xlo,$lo,rP,klo,Slo,Rlo,lh,oae,Blo,Plo,tP,Ilo,qlo,Nlo,ih,rae,jlo,Dlo,aP,Glo,Olo,Vlo,dh,tae,Xlo,zlo,nP,Qlo,Wlo,Hlo,ch,aae,Ulo,Jlo,sP,Ylo,Klo,Zlo,fh,nae,eio,oio,lP,rio,tio,aio,mh,sae,nio,sio,iP,lio,iio,dio,gh,lae,cio,fio,dP,mio,gio,hio,hh,iae,pio,uio,cP,_io,bio,vio,ph,dae,Fio,Tio,fP,Mio,Eio,Cio,uh,cae,wio,Aio,mP,yio,Lio,xio,_h,fae,$io,kio,gP,Sio,Rio,Bio,bh,mae,Pio,Iio,hP,qio,Nio,jio,vh,gae,Dio,Gio,pP,Oio,Vio,Xio,Fh,hae,zio,Qio,uP,Wio,Hio,Uio,Th,Jio,Mh,Yio,Eh,mA,Kio,pae,Zio,NPe,vi,Ch,uae,gA,edo,_ae,odo,jPe,yo,hA,rdo,pA,tdo,_P,ado,ndo,sdo,uA,ldo,bae,ido,ddo,cdo,We,_A,fdo,vae,mdo,gdo,Fi,hdo,Fae,pdo,udo,Tae,_do,bdo,vdo,be,wh,Mae,Fdo,Tdo,bP,Mdo,Edo,Cdo,Ah,Eae,wdo,Ado,Cae,ydo,Ldo,xdo,yh,wae,$do,kdo,vP,Sdo,Rdo,Bdo,Lh,Aae,Pdo,Ido,FP,qdo,Ndo,jdo,xh,yae,Ddo,Gdo,TP,Odo,Vdo,Xdo,$h,Lae,zdo,Qdo,MP,Wdo,Hdo,Udo,kh,xae,Jdo,Ydo,EP,Kdo,Zdo,eco,Sh,$ae,oco,rco,CP,tco,aco,nco,Rh,kae,sco,lco,wP,ico,dco,cco,Bh,Sae,fco,mco,AP,gco,hco,pco,Ph,Rae,uco,_co,yP,bco,vco,Fco,Ih,Bae,Tco,Mco,LP,Eco,Cco,wco,qh,Pae,Aco,yco,xP,Lco,xco,$co,Nh,Iae,kco,Sco,$P,Rco,Bco,Pco,jh,qae,Ico,qco,kP,Nco,jco,Dco,Dh,Gco,Gh,Oco,Oh,bA,Vco,Nae,Xco,DPe,Ti,Vh,jae,vA,zco,Dae,Qco,GPe,Lo,FA,Wco,Mi,Hco,SP,Uco,Jco,RP,Yco,Kco,Zco,TA,efo,Gae,ofo,rfo,tfo,ot,MA,afo,Oae,nfo,sfo,Ei,lfo,Vae,ifo,dfo,BP,cfo,ffo,mfo,Xh,gfo,He,EA,hfo,Xae,pfo,ufo,Aa,_fo,zae,bfo,vfo,Qae,Ffo,Tfo,Wae,Mfo,Efo,Cfo,x,zh,Hae,wfo,Afo,PP,yfo,Lfo,xfo,Qh,Uae,$fo,kfo,IP,Sfo,Rfo,Bfo,Wh,Jae,Pfo,Ifo,qP,qfo,Nfo,jfo,Hh,Yae,Dfo,Gfo,NP,Ofo,Vfo,Xfo,Uh,Kae,zfo,Qfo,jP,Wfo,Hfo,Ufo,Jh,Zae,Jfo,Yfo,DP,Kfo,Zfo,emo,Yh,ene,omo,rmo,GP,tmo,amo,nmo,Kh,one,smo,lmo,OP,imo,dmo,cmo,Zh,rne,fmo,mmo,VP,gmo,hmo,pmo,ep,tne,umo,_mo,XP,bmo,vmo,Fmo,op,ane,Tmo,Mmo,zP,Emo,Cmo,wmo,rp,nne,Amo,ymo,QP,Lmo,xmo,$mo,tp,sne,kmo,Smo,WP,Rmo,Bmo,Pmo,ap,lne,Imo,qmo,HP,Nmo,jmo,Dmo,np,ine,Gmo,Omo,UP,Vmo,Xmo,zmo,sp,dne,Qmo,Wmo,JP,Hmo,Umo,Jmo,lp,cne,Ymo,Kmo,YP,Zmo,ego,ogo,ip,fne,rgo,tgo,KP,ago,ngo,sgo,dp,mne,lgo,igo,ZP,dgo,cgo,fgo,cp,gne,mgo,ggo,eI,hgo,pgo,ugo,fp,hne,_go,bgo,oI,vgo,Fgo,Tgo,mp,pne,Mgo,Ego,rI,Cgo,wgo,Ago,gp,une,ygo,Lgo,tI,xgo,$go,kgo,hp,_ne,Sgo,Rgo,aI,Bgo,Pgo,Igo,pp,bne,qgo,Ngo,nI,jgo,Dgo,Ggo,up,vne,Ogo,Vgo,sI,Xgo,zgo,Qgo,_p,Fne,Wgo,Hgo,lI,Ugo,Jgo,Ygo,bp,Tne,Kgo,Zgo,iI,eho,oho,rho,vp,Mne,tho,aho,dI,nho,sho,lho,Fp,Ene,iho,dho,cI,cho,fho,mho,Tp,Cne,gho,hho,fI,pho,uho,_ho,Ss,wne,bho,vho,mI,Fho,Tho,gI,Mho,Eho,Cho,Mp,Ane,who,Aho,hI,yho,Lho,xho,Ep,yne,$ho,kho,pI,Sho,Rho,Bho,Cp,Lne,Pho,Iho,uI,qho,Nho,jho,wp,xne,Dho,Gho,_I,Oho,Vho,Xho,Ap,$ne,zho,Qho,bI,Who,Hho,Uho,yp,kne,Jho,Yho,vI,Kho,Zho,epo,Lp,Sne,opo,rpo,FI,tpo,apo,npo,xp,Rne,spo,lpo,TI,ipo,dpo,cpo,$p,Bne,fpo,mpo,MI,gpo,hpo,ppo,kp,Pne,upo,_po,EI,bpo,vpo,Fpo,Sp,Ine,Tpo,Mpo,CI,Epo,Cpo,wpo,Rp,qne,Apo,ypo,wI,Lpo,xpo,$po,Bp,Nne,kpo,Spo,AI,Rpo,Bpo,Ppo,Pp,jne,Ipo,qpo,yI,Npo,jpo,Dpo,Ip,Dne,Gpo,Opo,LI,Vpo,Xpo,zpo,qp,Gne,Qpo,Wpo,xI,Hpo,Upo,Jpo,Np,One,Ypo,Kpo,$I,Zpo,euo,ouo,jp,Vne,ruo,tuo,kI,auo,nuo,suo,Dp,Xne,luo,iuo,SI,duo,cuo,fuo,Gp,zne,muo,guo,RI,huo,puo,uuo,Op,Qne,_uo,buo,BI,vuo,Fuo,Tuo,Vp,Wne,Muo,Euo,PI,Cuo,wuo,Auo,Xp,Hne,yuo,Luo,II,xuo,$uo,kuo,zp,Une,Suo,Ruo,qI,Buo,Puo,Iuo,Qp,Jne,quo,Nuo,NI,juo,Duo,Guo,Wp,Yne,Ouo,Vuo,jI,Xuo,zuo,Quo,Hp,Kne,Wuo,Huo,DI,Uuo,Juo,Yuo,Up,Zne,Kuo,Zuo,GI,e_o,o_o,r_o,Jp,ese,t_o,a_o,OI,n_o,s_o,l_o,Yp,ose,i_o,d_o,VI,c_o,f_o,m_o,Kp,rse,g_o,h_o,XI,p_o,u_o,__o,Zp,tse,b_o,v_o,zI,F_o,T_o,M_o,eu,ase,E_o,C_o,QI,w_o,A_o,y_o,ou,nse,L_o,x_o,WI,$_o,k_o,S_o,ru,sse,R_o,B_o,HI,P_o,I_o,q_o,tu,lse,N_o,j_o,UI,D_o,G_o,O_o,au,ise,V_o,X_o,JI,z_o,Q_o,W_o,nu,dse,H_o,U_o,YI,J_o,Y_o,K_o,su,cse,Z_o,e2o,KI,o2o,r2o,t2o,lu,fse,a2o,n2o,ZI,s2o,l2o,i2o,iu,mse,d2o,c2o,eq,f2o,m2o,g2o,du,gse,h2o,p2o,oq,u2o,_2o,b2o,cu,hse,v2o,F2o,rq,T2o,M2o,E2o,fu,pse,C2o,w2o,tq,A2o,y2o,L2o,mu,use,x2o,$2o,aq,k2o,S2o,R2o,gu,_se,B2o,P2o,nq,I2o,q2o,N2o,hu,bse,j2o,D2o,sq,G2o,O2o,V2o,pu,vse,X2o,z2o,lq,Q2o,W2o,H2o,uu,Fse,U2o,J2o,iq,Y2o,K2o,Z2o,_u,Tse,e1o,o1o,dq,r1o,t1o,a1o,bu,Mse,n1o,s1o,cq,l1o,i1o,d1o,vu,Ese,c1o,f1o,fq,m1o,g1o,h1o,Fu,Cse,p1o,u1o,mq,_1o,b1o,v1o,Tu,wse,F1o,T1o,gq,M1o,E1o,C1o,Mu,Ase,w1o,A1o,hq,y1o,L1o,x1o,Eu,yse,$1o,k1o,pq,S1o,R1o,B1o,Cu,Lse,P1o,I1o,uq,q1o,N1o,j1o,wu,xse,D1o,G1o,_q,O1o,V1o,X1o,Au,$se,z1o,Q1o,bq,W1o,H1o,U1o,yu,kse,J1o,Y1o,vq,K1o,Z1o,ebo,Lu,Sse,obo,rbo,Fq,tbo,abo,nbo,xu,Rse,sbo,lbo,Tq,ibo,dbo,cbo,$u,Bse,fbo,mbo,Mq,gbo,hbo,pbo,ku,Pse,ubo,_bo,Eq,bbo,vbo,Fbo,Su,Tbo,Ise,Mbo,Ebo,qse,Cbo,wbo,Ru,OPe,Ci,Bu,Nse,CA,Abo,jse,ybo,VPe,xo,wA,Lbo,wi,xbo,Cq,$bo,kbo,wq,Sbo,Rbo,Bbo,AA,Pbo,Dse,Ibo,qbo,Nbo,rt,yA,jbo,Gse,Dbo,Gbo,Ai,Obo,Ose,Vbo,Xbo,Aq,zbo,Qbo,Wbo,Pu,Hbo,Ue,LA,Ubo,Vse,Jbo,Ybo,ya,Kbo,Xse,Zbo,evo,zse,ovo,rvo,Qse,tvo,avo,nvo,G,Iu,Wse,svo,lvo,yq,ivo,dvo,cvo,qu,Hse,fvo,mvo,Lq,gvo,hvo,pvo,Nu,Use,uvo,_vo,xq,bvo,vvo,Fvo,ju,Jse,Tvo,Mvo,$q,Evo,Cvo,wvo,Du,Yse,Avo,yvo,kq,Lvo,xvo,$vo,Gu,Kse,kvo,Svo,Sq,Rvo,Bvo,Pvo,Ou,Zse,Ivo,qvo,Rq,Nvo,jvo,Dvo,Vu,ele,Gvo,Ovo,Bq,Vvo,Xvo,zvo,Xu,ole,Qvo,Wvo,Pq,Hvo,Uvo,Jvo,zu,rle,Yvo,Kvo,Iq,Zvo,eFo,oFo,Qu,tle,rFo,tFo,qq,aFo,nFo,sFo,Wu,ale,lFo,iFo,Nq,dFo,cFo,fFo,Hu,nle,mFo,gFo,jq,hFo,pFo,uFo,Uu,sle,_Fo,bFo,Dq,vFo,FFo,TFo,Ju,lle,MFo,EFo,Gq,CFo,wFo,AFo,Yu,ile,yFo,LFo,Oq,xFo,$Fo,kFo,Ku,dle,SFo,RFo,Vq,BFo,PFo,IFo,Zu,cle,qFo,NFo,Xq,jFo,DFo,GFo,e_,fle,OFo,VFo,zq,XFo,zFo,QFo,o_,mle,WFo,HFo,Qq,UFo,JFo,YFo,r_,gle,KFo,ZFo,Wq,e0o,o0o,r0o,t_,hle,t0o,a0o,Hq,n0o,s0o,l0o,a_,ple,i0o,d0o,Uq,c0o,f0o,m0o,n_,ule,g0o,h0o,Jq,p0o,u0o,_0o,s_,_le,b0o,v0o,Yq,F0o,T0o,M0o,l_,ble,E0o,C0o,Kq,w0o,A0o,y0o,i_,vle,L0o,x0o,Zq,$0o,k0o,S0o,d_,Fle,R0o,B0o,eN,P0o,I0o,q0o,c_,Tle,N0o,j0o,oN,D0o,G0o,O0o,f_,Mle,V0o,X0o,rN,z0o,Q0o,W0o,m_,Ele,H0o,U0o,tN,J0o,Y0o,K0o,g_,Cle,Z0o,e6o,aN,o6o,r6o,t6o,h_,wle,a6o,n6o,nN,s6o,l6o,i6o,p_,Ale,d6o,c6o,sN,f6o,m6o,g6o,u_,yle,h6o,p6o,lN,u6o,_6o,b6o,__,Lle,v6o,F6o,iN,T6o,M6o,E6o,b_,xle,C6o,w6o,dN,A6o,y6o,L6o,v_,$le,x6o,$6o,cN,k6o,S6o,R6o,F_,kle,B6o,P6o,fN,I6o,q6o,N6o,T_,Sle,j6o,D6o,mN,G6o,O6o,V6o,M_,X6o,Rle,z6o,Q6o,Ble,W6o,H6o,E_,XPe,yi,C_,Ple,xA,U6o,Ile,J6o,zPe,$o,$A,Y6o,Li,K6o,gN,Z6o,eTo,hN,oTo,rTo,tTo,kA,aTo,qle,nTo,sTo,lTo,tt,SA,iTo,Nle,dTo,cTo,xi,fTo,jle,mTo,gTo,pN,hTo,pTo,uTo,w_,_To,Je,RA,bTo,Dle,vTo,FTo,La,TTo,Gle,MTo,ETo,Ole,CTo,wTo,Vle,ATo,yTo,LTo,z,A_,Xle,xTo,$To,uN,kTo,STo,RTo,y_,zle,BTo,PTo,_N,ITo,qTo,NTo,L_,Qle,jTo,DTo,bN,GTo,OTo,VTo,x_,Wle,XTo,zTo,vN,QTo,WTo,HTo,$_,Hle,UTo,JTo,FN,YTo,KTo,ZTo,k_,Ule,e7o,o7o,TN,r7o,t7o,a7o,S_,Jle,n7o,s7o,MN,l7o,i7o,d7o,R_,Yle,c7o,f7o,EN,m7o,g7o,h7o,B_,Kle,p7o,u7o,CN,_7o,b7o,v7o,P_,Zle,F7o,T7o,wN,M7o,E7o,C7o,I_,eie,w7o,A7o,AN,y7o,L7o,x7o,q_,oie,$7o,k7o,yN,S7o,R7o,B7o,N_,rie,P7o,I7o,LN,q7o,N7o,j7o,j_,tie,D7o,G7o,xN,O7o,V7o,X7o,D_,aie,z7o,Q7o,$N,W7o,H7o,U7o,G_,nie,J7o,Y7o,kN,K7o,Z7o,eMo,O_,sie,oMo,rMo,SN,tMo,aMo,nMo,V_,lie,sMo,lMo,RN,iMo,dMo,cMo,X_,iie,fMo,mMo,BN,gMo,hMo,pMo,z_,die,uMo,_Mo,PN,bMo,vMo,FMo,Q_,cie,TMo,MMo,IN,EMo,CMo,wMo,W_,fie,AMo,yMo,qN,LMo,xMo,$Mo,H_,mie,kMo,SMo,NN,RMo,BMo,PMo,U_,gie,IMo,qMo,jN,NMo,jMo,DMo,J_,hie,GMo,OMo,DN,VMo,XMo,zMo,Y_,pie,QMo,WMo,GN,HMo,UMo,JMo,K_,uie,YMo,KMo,ON,ZMo,e4o,o4o,Z_,_ie,r4o,t4o,VN,a4o,n4o,s4o,e2,bie,l4o,i4o,XN,d4o,c4o,f4o,o2,vie,m4o,g4o,zN,h4o,p4o,u4o,r2,Fie,_4o,b4o,QN,v4o,F4o,T4o,t2,Tie,M4o,E4o,WN,C4o,w4o,A4o,a2,Mie,y4o,L4o,HN,x4o,$4o,k4o,n2,Eie,S4o,R4o,UN,B4o,P4o,I4o,s2,Cie,q4o,N4o,JN,j4o,D4o,G4o,l2,O4o,wie,V4o,X4o,Aie,z4o,Q4o,i2,QPe,$i,d2,yie,BA,W4o,Lie,H4o,WPe,ko,PA,U4o,ki,J4o,YN,Y4o,K4o,KN,Z4o,eEo,oEo,IA,rEo,xie,tEo,aEo,nEo,at,qA,sEo,$ie,lEo,iEo,Si,dEo,kie,cEo,fEo,ZN,mEo,gEo,hEo,c2,pEo,Ye,NA,uEo,Sie,_Eo,bEo,xa,vEo,Rie,FEo,TEo,Bie,MEo,EEo,Pie,CEo,wEo,AEo,Q,f2,Iie,yEo,LEo,ej,xEo,$Eo,kEo,m2,qie,SEo,REo,oj,BEo,PEo,IEo,g2,Nie,qEo,NEo,rj,jEo,DEo,GEo,h2,jie,OEo,VEo,tj,XEo,zEo,QEo,p2,Die,WEo,HEo,aj,UEo,JEo,YEo,u2,Gie,KEo,ZEo,nj,e5o,o5o,r5o,_2,Oie,t5o,a5o,sj,n5o,s5o,l5o,b2,Vie,i5o,d5o,lj,c5o,f5o,m5o,v2,Xie,g5o,h5o,ij,p5o,u5o,_5o,F2,zie,b5o,v5o,dj,F5o,T5o,M5o,T2,Qie,E5o,C5o,cj,w5o,A5o,y5o,M2,Wie,L5o,x5o,fj,$5o,k5o,S5o,E2,Hie,R5o,B5o,mj,P5o,I5o,q5o,C2,Uie,N5o,j5o,gj,D5o,G5o,O5o,w2,Jie,V5o,X5o,hj,z5o,Q5o,W5o,A2,Yie,H5o,U5o,pj,J5o,Y5o,K5o,y2,Kie,Z5o,eCo,uj,oCo,rCo,tCo,L2,Zie,aCo,nCo,_j,sCo,lCo,iCo,x2,ede,dCo,cCo,bj,fCo,mCo,gCo,$2,ode,hCo,pCo,vj,uCo,_Co,bCo,k2,rde,vCo,FCo,Fj,TCo,MCo,ECo,S2,tde,CCo,wCo,Tj,ACo,yCo,LCo,R2,ade,xCo,$Co,Mj,kCo,SCo,RCo,B2,nde,BCo,PCo,Ej,ICo,qCo,NCo,P2,sde,jCo,DCo,Cj,GCo,OCo,VCo,I2,lde,XCo,zCo,wj,QCo,WCo,HCo,q2,ide,UCo,JCo,Aj,YCo,KCo,ZCo,N2,dde,e3o,o3o,yj,r3o,t3o,a3o,j2,cde,n3o,s3o,Lj,l3o,i3o,d3o,D2,fde,c3o,f3o,xj,m3o,g3o,h3o,G2,mde,p3o,u3o,gde,_3o,b3o,v3o,O2,hde,F3o,T3o,$j,M3o,E3o,C3o,V2,pde,w3o,A3o,kj,y3o,L3o,x3o,X2,ude,$3o,k3o,Sj,S3o,R3o,B3o,z2,_de,P3o,I3o,Rj,q3o,N3o,j3o,Q2,D3o,bde,G3o,O3o,vde,V3o,X3o,W2,HPe,Ri,H2,Fde,jA,z3o,Tde,Q3o,UPe,So,DA,W3o,Bi,H3o,Bj,U3o,J3o,Pj,Y3o,K3o,Z3o,GA,ewo,Mde,owo,rwo,two,nt,OA,awo,Ede,nwo,swo,Pi,lwo,Cde,iwo,dwo,Ij,cwo,fwo,mwo,U2,gwo,Ke,VA,hwo,wde,pwo,uwo,$a,_wo,Ade,bwo,vwo,yde,Fwo,Two,Lde,Mwo,Ewo,Cwo,he,J2,xde,wwo,Awo,qj,ywo,Lwo,xwo,Y2,$de,$wo,kwo,Nj,Swo,Rwo,Bwo,K2,kde,Pwo,Iwo,jj,qwo,Nwo,jwo,Z2,Sde,Dwo,Gwo,Dj,Owo,Vwo,Xwo,e1,Rde,zwo,Qwo,Gj,Wwo,Hwo,Uwo,o1,Bde,Jwo,Ywo,Oj,Kwo,Zwo,eAo,r1,Pde,oAo,rAo,Vj,tAo,aAo,nAo,t1,Ide,sAo,lAo,Xj,iAo,dAo,cAo,a1,qde,fAo,mAo,zj,gAo,hAo,pAo,n1,Nde,uAo,_Ao,Qj,bAo,vAo,FAo,s1,jde,TAo,MAo,Wj,EAo,CAo,wAo,l1,Dde,AAo,yAo,Hj,LAo,xAo,$Ao,i1,Gde,kAo,SAo,Uj,RAo,BAo,PAo,d1,Ode,IAo,qAo,Jj,NAo,jAo,DAo,c1,Vde,GAo,OAo,Yj,VAo,XAo,zAo,f1,Xde,QAo,WAo,Kj,HAo,UAo,JAo,m1,zde,YAo,KAo,Zj,ZAo,eyo,oyo,g1,ryo,Qde,tyo,ayo,Wde,nyo,syo,h1,JPe,Ii,p1,Hde,XA,lyo,Ude,iyo,YPe,Ro,zA,dyo,qi,cyo,eD,fyo,myo,oD,gyo,hyo,pyo,QA,uyo,Jde,_yo,byo,vyo,st,WA,Fyo,Yde,Tyo,Myo,Ni,Eyo,Kde,Cyo,wyo,rD,Ayo,yyo,Lyo,u1,xyo,Ze,HA,$yo,Zde,kyo,Syo,ka,Ryo,ece,Byo,Pyo,oce,Iyo,qyo,rce,Nyo,jyo,Dyo,q,_1,tce,Gyo,Oyo,tD,Vyo,Xyo,zyo,b1,ace,Qyo,Wyo,aD,Hyo,Uyo,Jyo,v1,nce,Yyo,Kyo,nD,Zyo,eLo,oLo,F1,sce,rLo,tLo,sD,aLo,nLo,sLo,T1,lce,lLo,iLo,lD,dLo,cLo,fLo,M1,ice,mLo,gLo,iD,hLo,pLo,uLo,E1,dce,_Lo,bLo,dD,vLo,FLo,TLo,C1,cce,MLo,ELo,cD,CLo,wLo,ALo,w1,fce,yLo,LLo,fD,xLo,$Lo,kLo,A1,mce,SLo,RLo,mD,BLo,PLo,ILo,y1,gce,qLo,NLo,gD,jLo,DLo,GLo,L1,hce,OLo,VLo,hD,XLo,zLo,QLo,x1,pce,WLo,HLo,pD,ULo,JLo,YLo,$1,uce,KLo,ZLo,uD,e8o,o8o,r8o,k1,_ce,t8o,a8o,_D,n8o,s8o,l8o,S1,bce,i8o,d8o,bD,c8o,f8o,m8o,R1,vce,g8o,h8o,vD,p8o,u8o,_8o,B1,Fce,b8o,v8o,FD,F8o,T8o,M8o,P1,Tce,E8o,C8o,TD,w8o,A8o,y8o,I1,Mce,L8o,x8o,MD,$8o,k8o,S8o,q1,Ece,R8o,B8o,ED,P8o,I8o,q8o,N1,Cce,N8o,j8o,CD,D8o,G8o,O8o,j1,wce,V8o,X8o,wD,z8o,Q8o,W8o,D1,Ace,H8o,U8o,AD,J8o,Y8o,K8o,G1,yce,Z8o,exo,yD,oxo,rxo,txo,O1,Lce,axo,nxo,LD,sxo,lxo,ixo,V1,xce,dxo,cxo,xD,fxo,mxo,gxo,X1,$ce,hxo,pxo,$D,uxo,_xo,bxo,z1,kce,vxo,Fxo,kD,Txo,Mxo,Exo,Q1,Sce,Cxo,wxo,SD,Axo,yxo,Lxo,W1,Rce,xxo,$xo,RD,kxo,Sxo,Rxo,H1,Bce,Bxo,Pxo,BD,Ixo,qxo,Nxo,U1,Pce,jxo,Dxo,PD,Gxo,Oxo,Vxo,J1,Ice,Xxo,zxo,ID,Qxo,Wxo,Hxo,Y1,qce,Uxo,Jxo,qD,Yxo,Kxo,Zxo,K1,Nce,e9o,o9o,ND,r9o,t9o,a9o,Z1,jce,n9o,s9o,jD,l9o,i9o,d9o,eb,Dce,c9o,f9o,DD,m9o,g9o,h9o,ob,Gce,p9o,u9o,GD,_9o,b9o,v9o,rb,Oce,F9o,T9o,OD,M9o,E9o,C9o,tb,Vce,w9o,A9o,VD,y9o,L9o,x9o,ab,Xce,$9o,k9o,XD,S9o,R9o,B9o,nb,zce,P9o,I9o,zD,q9o,N9o,j9o,sb,Qce,D9o,G9o,QD,O9o,V9o,X9o,lb,Wce,z9o,Q9o,WD,W9o,H9o,U9o,ib,Hce,J9o,Y9o,HD,K9o,Z9o,e$o,db,Uce,o$o,r$o,UD,t$o,a$o,n$o,cb,s$o,Jce,l$o,i$o,Yce,d$o,c$o,fb,KPe,ji,mb,Kce,UA,f$o,Zce,m$o,ZPe,Bo,JA,g$o,Di,h$o,JD,p$o,u$o,YD,_$o,b$o,v$o,YA,F$o,efe,T$o,M$o,E$o,lt,KA,C$o,ofe,w$o,A$o,Gi,y$o,rfe,L$o,x$o,KD,$$o,k$o,S$o,gb,R$o,eo,ZA,B$o,tfe,P$o,I$o,Sa,q$o,afe,N$o,j$o,nfe,D$o,G$o,sfe,O$o,V$o,X$o,Y,hb,lfe,z$o,Q$o,ZD,W$o,H$o,U$o,pb,ife,J$o,Y$o,eG,K$o,Z$o,eko,ub,dfe,oko,rko,oG,tko,ako,nko,_b,cfe,sko,lko,rG,iko,dko,cko,bb,ffe,fko,mko,tG,gko,hko,pko,vb,mfe,uko,_ko,aG,bko,vko,Fko,Fb,gfe,Tko,Mko,nG,Eko,Cko,wko,Tb,hfe,Ako,yko,sG,Lko,xko,$ko,Mb,pfe,kko,Sko,lG,Rko,Bko,Pko,Eb,ufe,Iko,qko,iG,Nko,jko,Dko,Cb,_fe,Gko,Oko,dG,Vko,Xko,zko,wb,bfe,Qko,Wko,cG,Hko,Uko,Jko,Ab,vfe,Yko,Kko,fG,Zko,eSo,oSo,yb,Ffe,rSo,tSo,mG,aSo,nSo,sSo,Lb,Tfe,lSo,iSo,gG,dSo,cSo,fSo,xb,Mfe,mSo,gSo,hG,hSo,pSo,uSo,$b,Efe,_So,bSo,pG,vSo,FSo,TSo,kb,Cfe,MSo,ESo,uG,CSo,wSo,ASo,Sb,wfe,ySo,LSo,_G,xSo,$So,kSo,Rb,Afe,SSo,RSo,bG,BSo,PSo,ISo,Bb,yfe,qSo,NSo,vG,jSo,DSo,GSo,Pb,Lfe,OSo,VSo,FG,XSo,zSo,QSo,Ib,xfe,WSo,HSo,TG,USo,JSo,YSo,qb,$fe,KSo,ZSo,MG,eRo,oRo,rRo,Nb,kfe,tRo,aRo,EG,nRo,sRo,lRo,jb,Sfe,iRo,dRo,CG,cRo,fRo,mRo,Db,Rfe,gRo,hRo,wG,pRo,uRo,_Ro,Gb,Bfe,bRo,vRo,AG,FRo,TRo,MRo,Ob,Pfe,ERo,CRo,yG,wRo,ARo,yRo,Vb,LRo,Ife,xRo,$Ro,qfe,kRo,SRo,Xb,eIe,Oi,zb,Nfe,ey,RRo,jfe,BRo,oIe,Po,oy,PRo,Vi,IRo,LG,qRo,NRo,xG,jRo,DRo,GRo,ry,ORo,Dfe,VRo,XRo,zRo,it,ty,QRo,Gfe,WRo,HRo,Xi,URo,Ofe,JRo,YRo,$G,KRo,ZRo,eBo,Qb,oBo,oo,ay,rBo,Vfe,tBo,aBo,Ra,nBo,Xfe,sBo,lBo,zfe,iBo,dBo,Qfe,cBo,fBo,mBo,Yr,Wb,Wfe,gBo,hBo,kG,pBo,uBo,_Bo,Hb,Hfe,bBo,vBo,SG,FBo,TBo,MBo,Ub,Ufe,EBo,CBo,RG,wBo,ABo,yBo,Jb,Jfe,LBo,xBo,BG,$Bo,kBo,SBo,Yb,Yfe,RBo,BBo,PG,PBo,IBo,qBo,Kb,NBo,Kfe,jBo,DBo,Zfe,GBo,OBo,Zb,rIe,zi,ev,eme,ny,VBo,ome,XBo,tIe,Io,sy,zBo,Qi,QBo,IG,WBo,HBo,qG,UBo,JBo,YBo,ly,KBo,rme,ZBo,ePo,oPo,dt,iy,rPo,tme,tPo,aPo,Wi,nPo,ame,sPo,lPo,NG,iPo,dPo,cPo,ov,fPo,ro,dy,mPo,nme,gPo,hPo,Ba,pPo,sme,uPo,_Po,lme,bPo,vPo,ime,FPo,TPo,MPo,U,rv,dme,EPo,CPo,jG,wPo,APo,yPo,tv,cme,LPo,xPo,DG,$Po,kPo,SPo,av,fme,RPo,BPo,GG,PPo,IPo,qPo,nv,mme,NPo,jPo,OG,DPo,GPo,OPo,sv,gme,VPo,XPo,VG,zPo,QPo,WPo,lv,hme,HPo,UPo,XG,JPo,YPo,KPo,iv,pme,ZPo,eIo,zG,oIo,rIo,tIo,dv,ume,aIo,nIo,QG,sIo,lIo,iIo,cv,_me,dIo,cIo,WG,fIo,mIo,gIo,fv,bme,hIo,pIo,HG,uIo,_Io,bIo,mv,vme,vIo,FIo,UG,TIo,MIo,EIo,gv,Fme,CIo,wIo,JG,AIo,yIo,LIo,hv,Tme,xIo,$Io,YG,kIo,SIo,RIo,pv,Mme,BIo,PIo,KG,IIo,qIo,NIo,uv,Eme,jIo,DIo,ZG,GIo,OIo,VIo,_v,Cme,XIo,zIo,eO,QIo,WIo,HIo,bv,wme,UIo,JIo,oO,YIo,KIo,ZIo,vv,Ame,eqo,oqo,rO,rqo,tqo,aqo,Fv,yme,nqo,sqo,tO,lqo,iqo,dqo,Tv,Lme,cqo,fqo,aO,mqo,gqo,hqo,Mv,xme,pqo,uqo,nO,_qo,bqo,vqo,Ev,$me,Fqo,Tqo,sO,Mqo,Eqo,Cqo,Cv,kme,wqo,Aqo,lO,yqo,Lqo,xqo,wv,Sme,$qo,kqo,iO,Sqo,Rqo,Bqo,Av,Rme,Pqo,Iqo,dO,qqo,Nqo,jqo,yv,Bme,Dqo,Gqo,cO,Oqo,Vqo,Xqo,Lv,Pme,zqo,Qqo,fO,Wqo,Hqo,Uqo,xv,Ime,Jqo,Yqo,mO,Kqo,Zqo,eNo,$v,qme,oNo,rNo,gO,tNo,aNo,nNo,kv,Nme,sNo,lNo,hO,iNo,dNo,cNo,Sv,jme,fNo,mNo,pO,gNo,hNo,pNo,Rv,Dme,uNo,_No,uO,bNo,vNo,FNo,Bv,Gme,TNo,MNo,_O,ENo,CNo,wNo,Pv,ANo,Ome,yNo,LNo,Vme,xNo,$No,Iv,aIe,Hi,qv,Xme,cy,kNo,zme,SNo,nIe,qo,fy,RNo,Ui,BNo,bO,PNo,INo,vO,qNo,NNo,jNo,my,DNo,Qme,GNo,ONo,VNo,ct,gy,XNo,Wme,zNo,QNo,Ji,WNo,Hme,HNo,UNo,FO,JNo,YNo,KNo,Nv,ZNo,to,hy,ejo,Ume,ojo,rjo,Pa,tjo,Jme,ajo,njo,Yme,sjo,ljo,Kme,ijo,djo,cjo,O,jv,Zme,fjo,mjo,TO,gjo,hjo,pjo,Dv,ege,ujo,_jo,MO,bjo,vjo,Fjo,Gv,oge,Tjo,Mjo,EO,Ejo,Cjo,wjo,Ov,rge,Ajo,yjo,CO,Ljo,xjo,$jo,Vv,tge,kjo,Sjo,wO,Rjo,Bjo,Pjo,Xv,age,Ijo,qjo,AO,Njo,jjo,Djo,zv,nge,Gjo,Ojo,yO,Vjo,Xjo,zjo,Qv,sge,Qjo,Wjo,LO,Hjo,Ujo,Jjo,Wv,lge,Yjo,Kjo,xO,Zjo,eDo,oDo,Hv,ige,rDo,tDo,$O,aDo,nDo,sDo,Uv,dge,lDo,iDo,kO,dDo,cDo,fDo,Jv,cge,mDo,gDo,SO,hDo,pDo,uDo,Yv,fge,_Do,bDo,RO,vDo,FDo,TDo,Kv,mge,MDo,EDo,BO,CDo,wDo,ADo,Zv,gge,yDo,LDo,PO,xDo,$Do,kDo,eF,hge,SDo,RDo,IO,BDo,PDo,IDo,oF,pge,qDo,NDo,qO,jDo,DDo,GDo,rF,uge,ODo,VDo,NO,XDo,zDo,QDo,tF,_ge,WDo,HDo,jO,UDo,JDo,YDo,aF,bge,KDo,ZDo,DO,eGo,oGo,rGo,nF,vge,tGo,aGo,GO,nGo,sGo,lGo,sF,Fge,iGo,dGo,OO,cGo,fGo,mGo,lF,Tge,gGo,hGo,VO,pGo,uGo,_Go,iF,Mge,bGo,vGo,XO,FGo,TGo,MGo,dF,Ege,EGo,CGo,zO,wGo,AGo,yGo,cF,Cge,LGo,xGo,QO,$Go,kGo,SGo,fF,wge,RGo,BGo,WO,PGo,IGo,qGo,mF,Age,NGo,jGo,HO,DGo,GGo,OGo,gF,yge,VGo,XGo,UO,zGo,QGo,WGo,hF,Lge,HGo,UGo,JO,JGo,YGo,KGo,pF,xge,ZGo,eOo,YO,oOo,rOo,tOo,uF,$ge,aOo,nOo,KO,sOo,lOo,iOo,_F,kge,dOo,cOo,ZO,fOo,mOo,gOo,bF,Sge,hOo,pOo,eV,uOo,_Oo,bOo,vF,Rge,vOo,FOo,oV,TOo,MOo,EOo,FF,Bge,COo,wOo,rV,AOo,yOo,LOo,TF,Pge,xOo,$Oo,tV,kOo,SOo,ROo,MF,Ige,BOo,POo,aV,IOo,qOo,NOo,EF,qge,jOo,DOo,nV,GOo,OOo,VOo,CF,XOo,Nge,zOo,QOo,jge,WOo,HOo,wF,sIe,Yi,AF,Dge,py,UOo,Gge,JOo,lIe,No,uy,YOo,Ki,KOo,sV,ZOo,eVo,lV,oVo,rVo,tVo,_y,aVo,Oge,nVo,sVo,lVo,ft,by,iVo,Vge,dVo,cVo,Zi,fVo,Xge,mVo,gVo,iV,hVo,pVo,uVo,yF,_Vo,ao,vy,bVo,zge,vVo,FVo,Ia,TVo,Qge,MVo,EVo,Wge,CVo,wVo,Hge,AVo,yVo,LVo,Uge,LF,Jge,xVo,$Vo,dV,kVo,SVo,RVo,xF,BVo,Yge,PVo,IVo,Kge,qVo,NVo,$F,iIe,ed,kF,Zge,Fy,jVo,ehe,DVo,dIe,jo,Ty,GVo,od,OVo,cV,VVo,XVo,fV,zVo,QVo,WVo,My,HVo,ohe,UVo,JVo,YVo,mt,Ey,KVo,rhe,ZVo,eXo,rd,oXo,the,rXo,tXo,mV,aXo,nXo,sXo,SF,lXo,no,Cy,iXo,ahe,dXo,cXo,qa,fXo,nhe,mXo,gXo,she,hXo,pXo,lhe,uXo,_Xo,bXo,Fe,RF,ihe,vXo,FXo,gV,TXo,MXo,EXo,BF,dhe,CXo,wXo,hV,AXo,yXo,LXo,PF,che,xXo,$Xo,pV,kXo,SXo,RXo,Rs,fhe,BXo,PXo,uV,IXo,qXo,_V,NXo,jXo,DXo,IF,mhe,GXo,OXo,bV,VXo,XXo,zXo,gt,ghe,QXo,WXo,vV,HXo,UXo,FV,JXo,YXo,TV,KXo,ZXo,ezo,qF,hhe,ozo,rzo,MV,tzo,azo,nzo,NF,phe,szo,lzo,EV,izo,dzo,czo,jF,uhe,fzo,mzo,CV,gzo,hzo,pzo,DF,_he,uzo,_zo,wV,bzo,vzo,Fzo,GF,bhe,Tzo,Mzo,AV,Ezo,Czo,wzo,OF,vhe,Azo,yzo,yV,Lzo,xzo,$zo,VF,Fhe,kzo,Szo,LV,Rzo,Bzo,Pzo,XF,Izo,The,qzo,Nzo,Mhe,jzo,Dzo,zF,cIe,td,QF,Ehe,wy,Gzo,Che,Ozo,fIe,Do,Ay,Vzo,ad,Xzo,xV,zzo,Qzo,$V,Wzo,Hzo,Uzo,yy,Jzo,whe,Yzo,Kzo,Zzo,ht,Ly,eQo,Ahe,oQo,rQo,nd,tQo,yhe,aQo,nQo,kV,sQo,lQo,iQo,WF,dQo,so,xy,cQo,Lhe,fQo,mQo,Na,gQo,xhe,hQo,pQo,$he,uQo,_Qo,khe,bQo,vQo,FQo,She,HF,Rhe,TQo,MQo,SV,EQo,CQo,wQo,UF,AQo,Bhe,yQo,LQo,Phe,xQo,$Qo,JF,mIe,sd,YF,Ihe,$y,kQo,qhe,SQo,gIe,Go,ky,RQo,ld,BQo,RV,PQo,IQo,BV,qQo,NQo,jQo,Sy,DQo,Nhe,GQo,OQo,VQo,pt,Ry,XQo,jhe,zQo,QQo,id,WQo,Dhe,HQo,UQo,PV,JQo,YQo,KQo,KF,ZQo,lo,By,eWo,Ghe,oWo,rWo,ja,tWo,Ohe,aWo,nWo,Vhe,sWo,lWo,Xhe,iWo,dWo,cWo,Ne,ZF,zhe,fWo,mWo,IV,gWo,hWo,pWo,e0,Qhe,uWo,_Wo,qV,bWo,vWo,FWo,o0,Whe,TWo,MWo,NV,EWo,CWo,wWo,r0,Hhe,AWo,yWo,jV,LWo,xWo,$Wo,t0,Uhe,kWo,SWo,DV,RWo,BWo,PWo,a0,Jhe,IWo,qWo,GV,NWo,jWo,DWo,n0,Yhe,GWo,OWo,OV,VWo,XWo,zWo,s0,Khe,QWo,WWo,VV,HWo,UWo,JWo,l0,YWo,Zhe,KWo,ZWo,epe,eHo,oHo,i0,hIe,dd,d0,ope,Py,rHo,rpe,tHo,pIe,Oo,Iy,aHo,cd,nHo,XV,sHo,lHo,zV,iHo,dHo,cHo,qy,fHo,tpe,mHo,gHo,hHo,ut,Ny,pHo,ape,uHo,_Ho,fd,bHo,npe,vHo,FHo,QV,THo,MHo,EHo,c0,CHo,io,jy,wHo,spe,AHo,yHo,Da,LHo,lpe,xHo,$Ho,ipe,kHo,SHo,dpe,RHo,BHo,PHo,Ga,f0,cpe,IHo,qHo,WV,NHo,jHo,DHo,m0,fpe,GHo,OHo,HV,VHo,XHo,zHo,g0,mpe,QHo,WHo,UV,HHo,UHo,JHo,h0,gpe,YHo,KHo,JV,ZHo,eUo,oUo,p0,rUo,hpe,tUo,aUo,ppe,nUo,sUo,u0,uIe,md,_0,upe,Dy,lUo,_pe,iUo,_Ie,Vo,Gy,dUo,gd,cUo,YV,fUo,mUo,KV,gUo,hUo,pUo,Oy,uUo,bpe,_Uo,bUo,vUo,_t,Vy,FUo,vpe,TUo,MUo,hd,EUo,Fpe,CUo,wUo,ZV,AUo,yUo,LUo,b0,xUo,co,Xy,$Uo,Tpe,kUo,SUo,Oa,RUo,Mpe,BUo,PUo,Epe,IUo,qUo,Cpe,NUo,jUo,DUo,je,v0,wpe,GUo,OUo,eX,VUo,XUo,zUo,F0,Ape,QUo,WUo,oX,HUo,UUo,JUo,T0,ype,YUo,KUo,rX,ZUo,eJo,oJo,M0,Lpe,rJo,tJo,tX,aJo,nJo,sJo,E0,xpe,lJo,iJo,aX,dJo,cJo,fJo,C0,$pe,mJo,gJo,nX,hJo,pJo,uJo,w0,kpe,_Jo,bJo,sX,vJo,FJo,TJo,A0,Spe,MJo,EJo,lX,CJo,wJo,AJo,y0,yJo,Rpe,LJo,xJo,Bpe,$Jo,kJo,L0,bIe,pd,x0,Ppe,zy,SJo,Ipe,RJo,vIe,Xo,Qy,BJo,ud,PJo,iX,IJo,qJo,dX,NJo,jJo,DJo,Wy,GJo,qpe,OJo,VJo,XJo,bt,Hy,zJo,Npe,QJo,WJo,_d,HJo,jpe,UJo,JJo,cX,YJo,KJo,ZJo,$0,eYo,fo,Uy,oYo,Dpe,rYo,tYo,Va,aYo,Gpe,nYo,sYo,Ope,lYo,iYo,Vpe,dYo,cYo,fYo,Jy,k0,Xpe,mYo,gYo,fX,hYo,pYo,uYo,S0,zpe,_Yo,bYo,mX,vYo,FYo,TYo,R0,MYo,Qpe,EYo,CYo,Wpe,wYo,AYo,B0,FIe,bd,P0,Hpe,Yy,yYo,Upe,LYo,TIe,zo,Ky,xYo,vd,$Yo,gX,kYo,SYo,hX,RYo,BYo,PYo,Zy,IYo,Jpe,qYo,NYo,jYo,vt,eL,DYo,Ype,GYo,OYo,Fd,VYo,Kpe,XYo,zYo,pX,QYo,WYo,HYo,I0,UYo,mo,oL,JYo,Zpe,YYo,KYo,Xa,ZYo,eue,eKo,oKo,oue,rKo,tKo,rue,aKo,nKo,sKo,za,q0,tue,lKo,iKo,uX,dKo,cKo,fKo,N0,aue,mKo,gKo,_X,hKo,pKo,uKo,j0,nue,_Ko,bKo,bX,vKo,FKo,TKo,D0,sue,MKo,EKo,vX,CKo,wKo,AKo,G0,yKo,lue,LKo,xKo,iue,$Ko,kKo,O0,MIe,Td,V0,due,rL,SKo,cue,RKo,EIe,Qo,tL,BKo,Md,PKo,FX,IKo,qKo,TX,NKo,jKo,DKo,aL,GKo,fue,OKo,VKo,XKo,Ft,nL,zKo,mue,QKo,WKo,Ed,HKo,gue,UKo,JKo,MX,YKo,KKo,ZKo,X0,eZo,go,sL,oZo,hue,rZo,tZo,Qa,aZo,pue,nZo,sZo,uue,lZo,iZo,_ue,dZo,cZo,fZo,Cd,z0,bue,mZo,gZo,EX,hZo,pZo,uZo,Q0,vue,_Zo,bZo,CX,vZo,FZo,TZo,W0,Fue,MZo,EZo,wX,CZo,wZo,AZo,H0,yZo,Tue,LZo,xZo,Mue,$Zo,kZo,U0,CIe,wd,J0,Eue,lL,SZo,Cue,RZo,wIe,Wo,iL,BZo,Ad,PZo,AX,IZo,qZo,yX,NZo,jZo,DZo,dL,GZo,wue,OZo,VZo,XZo,Tt,cL,zZo,Aue,QZo,WZo,yd,HZo,yue,UZo,JZo,LX,YZo,KZo,ZZo,Y0,eer,ho,fL,oer,Lue,rer,ter,Wa,aer,xue,ner,ser,$ue,ler,ier,kue,der,cer,fer,mL,K0,Sue,mer,ger,xX,her,per,uer,Z0,Rue,_er,ber,$X,ver,Fer,Ter,e6,Mer,Bue,Eer,Cer,Pue,wer,Aer,o6,AIe,Ld,r6,Iue,gL,yer,que,Ler,yIe,Ho,hL,xer,xd,$er,kX,ker,Ser,SX,Rer,Ber,Per,pL,Ier,Nue,qer,Ner,jer,Mt,uL,Der,jue,Ger,Oer,$d,Ver,Due,Xer,zer,RX,Qer,Wer,Her,t6,Uer,po,_L,Jer,Gue,Yer,Ker,Ha,Zer,Oue,eor,oor,Vue,ror,tor,Xue,aor,nor,sor,zue,a6,Que,lor,ior,BX,dor,cor,mor,n6,gor,Wue,hor,por,Hue,uor,_or,s6,LIe,kd,l6,Uue,bL,bor,Jue,vor,xIe,Uo,vL,For,Sd,Tor,PX,Mor,Eor,IX,Cor,wor,Aor,FL,yor,Yue,Lor,xor,$or,Et,TL,kor,Kue,Sor,Ror,Rd,Bor,Zue,Por,Ior,qX,qor,Nor,jor,i6,Dor,uo,ML,Gor,e_e,Oor,Vor,Ua,Xor,o_e,zor,Qor,r_e,Wor,Hor,t_e,Uor,Jor,Yor,Ja,d6,a_e,Kor,Zor,NX,err,orr,rrr,c6,n_e,trr,arr,jX,nrr,srr,lrr,f6,s_e,irr,drr,DX,crr,frr,mrr,m6,l_e,grr,hrr,GX,prr,urr,_rr,g6,brr,i_e,vrr,Frr,d_e,Trr,Mrr,h6,$Ie,Bd,p6,c_e,EL,Err,f_e,Crr,kIe,Jo,CL,wrr,Pd,Arr,OX,yrr,Lrr,VX,xrr,$rr,krr,wL,Srr,m_e,Rrr,Brr,Prr,Ct,AL,Irr,g_e,qrr,Nrr,Id,jrr,h_e,Drr,Grr,XX,Orr,Vrr,Xrr,u6,zrr,_o,yL,Qrr,p_e,Wrr,Hrr,Ya,Urr,u_e,Jrr,Yrr,__e,Krr,Zrr,b_e,etr,otr,rtr,v_e,_6,F_e,ttr,atr,zX,ntr,str,ltr,b6,itr,T_e,dtr,ctr,M_e,ftr,mtr,v6,SIe,qd,F6,E_e,LL,gtr,C_e,htr,RIe,Yo,xL,ptr,Nd,utr,QX,_tr,btr,WX,vtr,Ftr,Ttr,$L,Mtr,w_e,Etr,Ctr,wtr,wt,kL,Atr,A_e,ytr,Ltr,jd,xtr,y_e,$tr,ktr,HX,Str,Rtr,Btr,T6,Ptr,wr,SL,Itr,L_e,qtr,Ntr,Ka,jtr,x_e,Dtr,Gtr,$_e,Otr,Vtr,k_e,Xtr,ztr,Qtr,j,M6,S_e,Wtr,Htr,UX,Utr,Jtr,Ytr,E6,R_e,Ktr,Ztr,JX,ear,oar,rar,C6,B_e,tar,aar,YX,nar,sar,lar,w6,P_e,iar,dar,KX,car,far,mar,A6,I_e,gar,har,ZX,par,uar,_ar,y6,q_e,bar,Far,ez,Tar,Mar,Ear,L6,N_e,Car,war,oz,Aar,yar,Lar,x6,j_e,xar,$ar,rz,kar,Sar,Rar,$6,D_e,Bar,Par,tz,Iar,qar,Nar,k6,G_e,jar,Dar,az,Gar,Oar,Var,S6,O_e,Xar,zar,nz,Qar,War,Har,R6,V_e,Uar,Jar,sz,Yar,Kar,Zar,B6,X_e,enr,onr,lz,rnr,tnr,anr,P6,z_e,nnr,snr,iz,lnr,inr,dnr,I6,Q_e,cnr,fnr,dz,mnr,gnr,hnr,q6,W_e,pnr,unr,cz,_nr,bnr,vnr,N6,H_e,Fnr,Tnr,fz,Mnr,Enr,Cnr,Bs,U_e,wnr,Anr,mz,ynr,Lnr,gz,xnr,$nr,knr,j6,J_e,Snr,Rnr,hz,Bnr,Pnr,Inr,D6,Y_e,qnr,Nnr,pz,jnr,Dnr,Gnr,G6,K_e,Onr,Vnr,uz,Xnr,znr,Qnr,O6,Z_e,Wnr,Hnr,_z,Unr,Jnr,Ynr,V6,e2e,Knr,Znr,bz,esr,osr,rsr,X6,o2e,tsr,asr,vz,nsr,ssr,lsr,z6,r2e,isr,dsr,Fz,csr,fsr,msr,Q6,t2e,gsr,hsr,Tz,psr,usr,_sr,W6,a2e,bsr,vsr,Mz,Fsr,Tsr,Msr,H6,n2e,Esr,Csr,Ez,wsr,Asr,ysr,U6,s2e,Lsr,xsr,Cz,$sr,ksr,Ssr,J6,l2e,Rsr,Bsr,wz,Psr,Isr,qsr,Y6,i2e,Nsr,jsr,Az,Dsr,Gsr,Osr,K6,d2e,Vsr,Xsr,yz,zsr,Qsr,Wsr,Z6,c2e,Hsr,Usr,Lz,Jsr,Ysr,Ksr,eT,f2e,Zsr,elr,xz,olr,rlr,tlr,oT,m2e,alr,nlr,$z,slr,llr,ilr,rT,g2e,dlr,clr,kz,flr,mlr,glr,tT,h2e,hlr,plr,Sz,ulr,_lr,blr,aT,p2e,vlr,Flr,Rz,Tlr,Mlr,Elr,nT,u2e,Clr,wlr,Bz,Alr,ylr,Llr,sT,_2e,xlr,$lr,Pz,klr,Slr,Rlr,lT,b2e,Blr,Plr,Iz,Ilr,qlr,Nlr,iT,v2e,jlr,Dlr,qz,Glr,Olr,Vlr,dT,F2e,Xlr,zlr,Nz,Qlr,Wlr,Hlr,cT,T2e,Ulr,Jlr,jz,Ylr,Klr,Zlr,fT,M2e,eir,oir,Dz,rir,tir,air,mT,BIe,Dd,gT,E2e,RL,nir,C2e,sir,PIe,Ko,BL,lir,Gd,iir,Gz,dir,cir,Oz,fir,mir,gir,PL,hir,w2e,pir,uir,_ir,At,IL,bir,A2e,vir,Fir,Od,Tir,y2e,Mir,Eir,Vz,Cir,wir,Air,hT,yir,Ar,qL,Lir,L2e,xir,$ir,Za,kir,x2e,Sir,Rir,$2e,Bir,Pir,k2e,Iir,qir,Nir,se,pT,S2e,jir,Dir,Xz,Gir,Oir,Vir,uT,R2e,Xir,zir,zz,Qir,Wir,Hir,_T,B2e,Uir,Jir,Qz,Yir,Kir,Zir,bT,P2e,edr,odr,Wz,rdr,tdr,adr,vT,I2e,ndr,sdr,Hz,ldr,idr,ddr,FT,q2e,cdr,fdr,Uz,mdr,gdr,hdr,TT,N2e,pdr,udr,Jz,_dr,bdr,vdr,MT,j2e,Fdr,Tdr,Yz,Mdr,Edr,Cdr,ET,D2e,wdr,Adr,Kz,ydr,Ldr,xdr,CT,G2e,$dr,kdr,Zz,Sdr,Rdr,Bdr,wT,O2e,Pdr,Idr,eQ,qdr,Ndr,jdr,AT,V2e,Ddr,Gdr,oQ,Odr,Vdr,Xdr,yT,X2e,zdr,Qdr,rQ,Wdr,Hdr,Udr,LT,z2e,Jdr,Ydr,tQ,Kdr,Zdr,ecr,xT,Q2e,ocr,rcr,aQ,tcr,acr,ncr,$T,W2e,scr,lcr,nQ,icr,dcr,ccr,kT,H2e,fcr,mcr,sQ,gcr,hcr,pcr,ST,U2e,ucr,_cr,lQ,bcr,vcr,Fcr,RT,J2e,Tcr,Mcr,iQ,Ecr,Ccr,wcr,BT,Y2e,Acr,ycr,dQ,Lcr,xcr,$cr,PT,K2e,kcr,Scr,cQ,Rcr,Bcr,Pcr,IT,Z2e,Icr,qcr,fQ,Ncr,jcr,Dcr,qT,e1e,Gcr,Ocr,mQ,Vcr,Xcr,zcr,NT,IIe,Vd,jT,o1e,NL,Qcr,r1e,Wcr,qIe,Zo,jL,Hcr,Xd,Ucr,gQ,Jcr,Ycr,hQ,Kcr,Zcr,efr,DL,ofr,t1e,rfr,tfr,afr,yt,GL,nfr,a1e,sfr,lfr,zd,ifr,n1e,dfr,cfr,pQ,ffr,mfr,gfr,DT,hfr,yr,OL,pfr,s1e,ufr,_fr,en,bfr,l1e,vfr,Ffr,i1e,Tfr,Mfr,d1e,Efr,Cfr,wfr,Te,GT,c1e,Afr,yfr,uQ,Lfr,xfr,$fr,OT,f1e,kfr,Sfr,_Q,Rfr,Bfr,Pfr,VT,m1e,Ifr,qfr,bQ,Nfr,jfr,Dfr,XT,g1e,Gfr,Ofr,vQ,Vfr,Xfr,zfr,zT,h1e,Qfr,Wfr,FQ,Hfr,Ufr,Jfr,QT,p1e,Yfr,Kfr,TQ,Zfr,emr,omr,WT,u1e,rmr,tmr,MQ,amr,nmr,smr,HT,_1e,lmr,imr,EQ,dmr,cmr,fmr,UT,b1e,mmr,gmr,CQ,hmr,pmr,umr,JT,v1e,_mr,bmr,wQ,vmr,Fmr,Tmr,YT,F1e,Mmr,Emr,AQ,Cmr,wmr,Amr,KT,T1e,ymr,Lmr,yQ,xmr,$mr,kmr,ZT,NIe,Qd,e7,M1e,VL,Smr,E1e,Rmr,jIe,er,XL,Bmr,Wd,Pmr,LQ,Imr,qmr,xQ,Nmr,jmr,Dmr,zL,Gmr,C1e,Omr,Vmr,Xmr,Lt,QL,zmr,w1e,Qmr,Wmr,Hd,Hmr,A1e,Umr,Jmr,$Q,Ymr,Kmr,Zmr,o7,egr,Lr,WL,ogr,y1e,rgr,tgr,on,agr,L1e,ngr,sgr,x1e,lgr,igr,$1e,dgr,cgr,fgr,Ud,r7,k1e,mgr,ggr,kQ,hgr,pgr,ugr,t7,S1e,_gr,bgr,SQ,vgr,Fgr,Tgr,a7,R1e,Mgr,Egr,RQ,Cgr,wgr,Agr,n7,DIe,Jd,s7,B1e,HL,ygr,P1e,Lgr,GIe,or,UL,xgr,Yd,$gr,BQ,kgr,Sgr,PQ,Rgr,Bgr,Pgr,JL,Igr,I1e,qgr,Ngr,jgr,xt,YL,Dgr,q1e,Ggr,Ogr,Kd,Vgr,N1e,Xgr,zgr,IQ,Qgr,Wgr,Hgr,l7,Ugr,xr,KL,Jgr,j1e,Ygr,Kgr,rn,Zgr,D1e,ehr,ohr,G1e,rhr,thr,O1e,ahr,nhr,shr,ie,i7,V1e,lhr,ihr,qQ,dhr,chr,fhr,d7,X1e,mhr,ghr,NQ,hhr,phr,uhr,c7,z1e,_hr,bhr,jQ,vhr,Fhr,Thr,f7,Q1e,Mhr,Ehr,DQ,Chr,whr,Ahr,m7,W1e,yhr,Lhr,GQ,xhr,$hr,khr,g7,H1e,Shr,Rhr,OQ,Bhr,Phr,Ihr,h7,U1e,qhr,Nhr,VQ,jhr,Dhr,Ghr,p7,J1e,Ohr,Vhr,XQ,Xhr,zhr,Qhr,u7,Y1e,Whr,Hhr,zQ,Uhr,Jhr,Yhr,_7,K1e,Khr,Zhr,QQ,epr,opr,rpr,b7,Z1e,tpr,apr,WQ,npr,spr,lpr,v7,ebe,ipr,dpr,HQ,cpr,fpr,mpr,F7,obe,gpr,hpr,UQ,ppr,upr,_pr,T7,rbe,bpr,vpr,JQ,Fpr,Tpr,Mpr,M7,tbe,Epr,Cpr,YQ,wpr,Apr,ypr,E7,abe,Lpr,xpr,KQ,$pr,kpr,Spr,C7,nbe,Rpr,Bpr,ZQ,Ppr,Ipr,qpr,w7,sbe,Npr,jpr,eW,Dpr,Gpr,Opr,A7,lbe,Vpr,Xpr,oW,zpr,Qpr,Wpr,y7,ibe,Hpr,Upr,rW,Jpr,Ypr,Kpr,L7,OIe,Zd,x7,dbe,ZL,Zpr,cbe,eur,VIe,rr,e8,our,ec,rur,tW,tur,aur,aW,nur,sur,lur,o8,iur,fbe,dur,cur,fur,$t,r8,mur,mbe,gur,hur,oc,pur,gbe,uur,_ur,nW,bur,vur,Fur,$7,Tur,$r,t8,Mur,hbe,Eur,Cur,tn,wur,pbe,Aur,yur,ube,Lur,xur,_be,$ur,kur,Sur,ye,k7,bbe,Rur,Bur,sW,Pur,Iur,qur,S7,vbe,Nur,jur,lW,Dur,Gur,Our,R7,Fbe,Vur,Xur,iW,zur,Qur,Wur,B7,Tbe,Hur,Uur,dW,Jur,Yur,Kur,P7,Mbe,Zur,e_r,cW,o_r,r_r,t_r,I7,Ebe,a_r,n_r,fW,s_r,l_r,i_r,q7,Cbe,d_r,c_r,mW,f_r,m_r,g_r,N7,wbe,h_r,p_r,gW,u_r,__r,b_r,j7,Abe,v_r,F_r,hW,T_r,M_r,E_r,D7,ybe,C_r,w_r,pW,A_r,y_r,L_r,G7,XIe,rc,O7,Lbe,a8,x_r,xbe,$_r,zIe,tr,n8,k_r,tc,S_r,uW,R_r,B_r,_W,P_r,I_r,q_r,s8,N_r,$be,j_r,D_r,G_r,kt,l8,O_r,kbe,V_r,X_r,ac,z_r,Sbe,Q_r,W_r,bW,H_r,U_r,J_r,V7,Y_r,kr,i8,K_r,Rbe,Z_r,e2r,an,o2r,Bbe,r2r,t2r,Pbe,a2r,n2r,Ibe,s2r,l2r,i2r,Z,X7,qbe,d2r,c2r,vW,f2r,m2r,g2r,z7,Nbe,h2r,p2r,FW,u2r,_2r,b2r,Q7,jbe,v2r,F2r,TW,T2r,M2r,E2r,W7,Dbe,C2r,w2r,MW,A2r,y2r,L2r,H7,Gbe,x2r,$2r,EW,k2r,S2r,R2r,U7,Obe,B2r,P2r,CW,I2r,q2r,N2r,J7,Vbe,j2r,D2r,wW,G2r,O2r,V2r,Y7,Xbe,X2r,z2r,AW,Q2r,W2r,H2r,K7,zbe,U2r,J2r,yW,Y2r,K2r,Z2r,Z7,Qbe,e1r,o1r,LW,r1r,t1r,a1r,eM,Wbe,n1r,s1r,xW,l1r,i1r,d1r,oM,Hbe,c1r,f1r,$W,m1r,g1r,h1r,rM,Ube,p1r,u1r,kW,_1r,b1r,v1r,tM,Jbe,F1r,T1r,SW,M1r,E1r,C1r,aM,Ybe,w1r,A1r,RW,y1r,L1r,x1r,nM,Kbe,$1r,k1r,BW,S1r,R1r,B1r,sM,Zbe,P1r,I1r,PW,q1r,N1r,j1r,lM,eve,D1r,G1r,IW,O1r,V1r,X1r,iM,ove,z1r,Q1r,qW,W1r,H1r,U1r,dM,rve,J1r,Y1r,NW,K1r,Z1r,ebr,cM,tve,obr,rbr,jW,tbr,abr,nbr,fM,ave,sbr,lbr,DW,ibr,dbr,cbr,mM,nve,fbr,mbr,GW,gbr,hbr,pbr,gM,sve,ubr,_br,OW,bbr,vbr,Fbr,hM,lve,Tbr,Mbr,VW,Ebr,Cbr,wbr,pM,ive,Abr,ybr,XW,Lbr,xbr,$br,uM,QIe,nc,_M,dve,d8,kbr,cve,Sbr,WIe,ar,c8,Rbr,sc,Bbr,zW,Pbr,Ibr,QW,qbr,Nbr,jbr,f8,Dbr,fve,Gbr,Obr,Vbr,St,m8,Xbr,mve,zbr,Qbr,lc,Wbr,gve,Hbr,Ubr,WW,Jbr,Ybr,Kbr,bM,Zbr,Sr,g8,evr,hve,ovr,rvr,nn,tvr,pve,avr,nvr,uve,svr,lvr,_ve,ivr,dvr,cvr,pe,vM,bve,fvr,mvr,HW,gvr,hvr,pvr,FM,vve,uvr,_vr,UW,bvr,vvr,Fvr,TM,Fve,Tvr,Mvr,JW,Evr,Cvr,wvr,MM,Tve,Avr,yvr,YW,Lvr,xvr,$vr,EM,Mve,kvr,Svr,KW,Rvr,Bvr,Pvr,CM,Eve,Ivr,qvr,ZW,Nvr,jvr,Dvr,wM,Cve,Gvr,Ovr,eH,Vvr,Xvr,zvr,AM,wve,Qvr,Wvr,oH,Hvr,Uvr,Jvr,yM,Ave,Yvr,Kvr,rH,Zvr,eFr,oFr,LM,yve,rFr,tFr,tH,aFr,nFr,sFr,xM,Lve,lFr,iFr,aH,dFr,cFr,fFr,$M,xve,mFr,gFr,nH,hFr,pFr,uFr,kM,$ve,_Fr,bFr,sH,vFr,FFr,TFr,SM,kve,MFr,EFr,lH,CFr,wFr,AFr,RM,Sve,yFr,LFr,iH,xFr,$Fr,kFr,BM,Rve,SFr,RFr,dH,BFr,PFr,IFr,PM,Bve,qFr,NFr,cH,jFr,DFr,GFr,IM,HIe,ic,qM,Pve,h8,OFr,Ive,VFr,UIe,nr,p8,XFr,dc,zFr,fH,QFr,WFr,mH,HFr,UFr,JFr,u8,YFr,qve,KFr,ZFr,e0r,Rt,_8,o0r,Nve,r0r,t0r,cc,a0r,jve,n0r,s0r,gH,l0r,i0r,d0r,NM,c0r,Rr,b8,f0r,Dve,m0r,g0r,sn,h0r,Gve,p0r,u0r,Ove,_0r,b0r,Vve,v0r,F0r,T0r,v8,jM,Xve,M0r,E0r,hH,C0r,w0r,A0r,DM,zve,y0r,L0r,pH,x0r,$0r,k0r,GM,JIe,fc,OM,Qve,F8,S0r,Wve,R0r,YIe,sr,T8,B0r,mc,P0r,uH,I0r,q0r,_H,N0r,j0r,D0r,M8,G0r,Hve,O0r,V0r,X0r,Bt,E8,z0r,Uve,Q0r,W0r,gc,H0r,Jve,U0r,J0r,bH,Y0r,K0r,Z0r,VM,e6r,Br,C8,o6r,Yve,r6r,t6r,ln,a6r,Kve,n6r,s6r,Zve,l6r,i6r,eFe,d6r,c6r,f6r,oFe,XM,rFe,m6r,g6r,vH,h6r,p6r,u6r,zM,KIe,hc,QM,tFe,w8,_6r,aFe,b6r,ZIe,lr,A8,v6r,pc,F6r,FH,T6r,M6r,TH,E6r,C6r,w6r,y8,A6r,nFe,y6r,L6r,x6r,Pt,L8,$6r,sFe,k6r,S6r,uc,R6r,lFe,B6r,P6r,MH,I6r,q6r,N6r,WM,j6r,Pr,x8,D6r,iFe,G6r,O6r,dn,V6r,dFe,X6r,z6r,cFe,Q6r,W6r,fFe,H6r,U6r,J6r,de,HM,mFe,Y6r,K6r,EH,Z6r,eTr,oTr,UM,gFe,rTr,tTr,CH,aTr,nTr,sTr,JM,hFe,lTr,iTr,wH,dTr,cTr,fTr,YM,pFe,mTr,gTr,AH,hTr,pTr,uTr,KM,uFe,_Tr,bTr,yH,vTr,FTr,TTr,ZM,_Fe,MTr,ETr,LH,CTr,wTr,ATr,e4,bFe,yTr,LTr,xH,xTr,$Tr,kTr,o4,vFe,STr,RTr,$H,BTr,PTr,ITr,r4,FFe,qTr,NTr,kH,jTr,DTr,GTr,t4,TFe,OTr,VTr,SH,XTr,zTr,QTr,a4,MFe,WTr,HTr,RH,UTr,JTr,YTr,n4,EFe,KTr,ZTr,BH,e7r,o7r,r7r,s4,CFe,t7r,a7r,PH,n7r,s7r,l7r,l4,wFe,i7r,d7r,IH,c7r,f7r,m7r,i4,AFe,g7r,h7r,qH,p7r,u7r,_7r,d4,yFe,b7r,v7r,NH,F7r,T7r,M7r,c4,LFe,E7r,C7r,jH,w7r,A7r,y7r,f4,xFe,L7r,x7r,DH,$7r,k7r,S7r,m4,$Fe,R7r,B7r,GH,P7r,I7r,q7r,g4,kFe,N7r,j7r,OH,D7r,G7r,O7r,h4,eqe,_c,p4,SFe,$8,V7r,RFe,X7r,oqe,ir,k8,z7r,bc,Q7r,VH,W7r,H7r,XH,U7r,J7r,Y7r,S8,K7r,BFe,Z7r,eMr,oMr,It,R8,rMr,PFe,tMr,aMr,vc,nMr,IFe,sMr,lMr,zH,iMr,dMr,cMr,u4,fMr,Ir,B8,mMr,qFe,gMr,hMr,cn,pMr,NFe,uMr,_Mr,jFe,bMr,vMr,DFe,FMr,TMr,MMr,ce,_4,GFe,EMr,CMr,QH,wMr,AMr,yMr,b4,OFe,LMr,xMr,WH,$Mr,kMr,SMr,v4,VFe,RMr,BMr,HH,PMr,IMr,qMr,F4,XFe,NMr,jMr,UH,DMr,GMr,OMr,T4,zFe,VMr,XMr,JH,zMr,QMr,WMr,M4,QFe,HMr,UMr,YH,JMr,YMr,KMr,E4,WFe,ZMr,e4r,KH,o4r,r4r,t4r,C4,HFe,a4r,n4r,ZH,s4r,l4r,i4r,w4,UFe,d4r,c4r,eU,f4r,m4r,g4r,A4,JFe,h4r,p4r,oU,u4r,_4r,b4r,y4,YFe,v4r,F4r,rU,T4r,M4r,E4r,L4,KFe,C4r,w4r,tU,A4r,y4r,L4r,x4,ZFe,x4r,$4r,aU,k4r,S4r,R4r,$4,e0e,B4r,P4r,nU,I4r,q4r,N4r,k4,o0e,j4r,D4r,sU,G4r,O4r,V4r,S4,r0e,X4r,z4r,lU,Q4r,W4r,H4r,R4,t0e,U4r,J4r,iU,Y4r,K4r,Z4r,B4,a0e,eEr,oEr,dU,rEr,tEr,aEr,P4,n0e,nEr,sEr,cU,lEr,iEr,dEr,I4,s0e,cEr,fEr,fU,mEr,gEr,hEr,q4,rqe,Fc,N4,l0e,P8,pEr,i0e,uEr,tqe,dr,I8,_Er,Tc,bEr,mU,vEr,FEr,gU,TEr,MEr,EEr,q8,CEr,d0e,wEr,AEr,yEr,qt,N8,LEr,c0e,xEr,$Er,Mc,kEr,f0e,SEr,REr,hU,BEr,PEr,IEr,j4,qEr,qr,j8,NEr,m0e,jEr,DEr,fn,GEr,g0e,OEr,VEr,h0e,XEr,zEr,p0e,QEr,WEr,HEr,u0e,D4,_0e,UEr,JEr,pU,YEr,KEr,ZEr,G4,aqe,Ec,O4,b0e,D8,e5r,v0e,o5r,nqe,cr,G8,r5r,Cc,t5r,uU,a5r,n5r,_U,s5r,l5r,i5r,O8,d5r,F0e,c5r,f5r,m5r,Nt,V8,g5r,T0e,h5r,p5r,wc,u5r,M0e,_5r,b5r,bU,v5r,F5r,T5r,V4,M5r,Nr,X8,E5r,E0e,C5r,w5r,mn,A5r,C0e,y5r,L5r,w0e,x5r,$5r,A0e,k5r,S5r,R5r,y0e,X4,L0e,B5r,P5r,vU,I5r,q5r,N5r,z4,sqe,Ac,Q4,x0e,z8,j5r,$0e,D5r,lqe,fr,Q8,G5r,yc,O5r,FU,V5r,X5r,TU,z5r,Q5r,W5r,W8,H5r,k0e,U5r,J5r,Y5r,jt,H8,K5r,S0e,Z5r,eCr,Lc,oCr,R0e,rCr,tCr,MU,aCr,nCr,sCr,W4,lCr,jr,U8,iCr,B0e,dCr,cCr,gn,fCr,P0e,mCr,gCr,I0e,hCr,pCr,q0e,uCr,_Cr,bCr,re,H4,N0e,vCr,FCr,EU,TCr,MCr,ECr,U4,j0e,CCr,wCr,CU,ACr,yCr,LCr,J4,D0e,xCr,$Cr,wU,kCr,SCr,RCr,Y4,G0e,BCr,PCr,AU,ICr,qCr,NCr,K4,O0e,jCr,DCr,yU,GCr,OCr,VCr,Z4,V0e,XCr,zCr,LU,QCr,WCr,HCr,eE,X0e,UCr,JCr,xU,YCr,KCr,ZCr,oE,z0e,e3r,o3r,$U,r3r,t3r,a3r,rE,Q0e,n3r,s3r,kU,l3r,i3r,d3r,tE,W0e,c3r,f3r,SU,m3r,g3r,h3r,aE,H0e,p3r,u3r,RU,_3r,b3r,v3r,nE,U0e,F3r,T3r,BU,M3r,E3r,C3r,sE,J0e,w3r,A3r,PU,y3r,L3r,x3r,lE,Y0e,$3r,k3r,IU,S3r,R3r,B3r,iE,K0e,P3r,I3r,qU,q3r,N3r,j3r,dE,Z0e,D3r,G3r,NU,O3r,V3r,X3r,cE,e6e,z3r,Q3r,jU,W3r,H3r,U3r,fE,o6e,J3r,Y3r,DU,K3r,Z3r,ewr,mE,r6e,owr,rwr,GU,twr,awr,nwr,gE,t6e,swr,lwr,OU,iwr,dwr,cwr,hE,a6e,fwr,mwr,VU,gwr,hwr,pwr,pE,n6e,uwr,_wr,XU,bwr,vwr,Fwr,uE,s6e,Twr,Mwr,zU,Ewr,Cwr,wwr,_E,l6e,Awr,ywr,QU,Lwr,xwr,$wr,bE,i6e,kwr,Swr,WU,Rwr,Bwr,Pwr,vE,iqe,xc,FE,d6e,J8,Iwr,c6e,qwr,dqe,mr,Y8,Nwr,$c,jwr,HU,Dwr,Gwr,UU,Owr,Vwr,Xwr,K8,zwr,f6e,Qwr,Wwr,Hwr,Dt,Z8,Uwr,m6e,Jwr,Ywr,kc,Kwr,g6e,Zwr,eAr,JU,oAr,rAr,tAr,TE,aAr,Dr,ex,nAr,h6e,sAr,lAr,hn,iAr,p6e,dAr,cAr,u6e,fAr,mAr,_6e,gAr,hAr,pAr,ke,ME,b6e,uAr,_Ar,YU,bAr,vAr,FAr,EE,v6e,TAr,MAr,KU,EAr,CAr,wAr,CE,F6e,AAr,yAr,ZU,LAr,xAr,$Ar,wE,T6e,kAr,SAr,eJ,RAr,BAr,PAr,AE,M6e,IAr,qAr,oJ,NAr,jAr,DAr,yE,E6e,GAr,OAr,rJ,VAr,XAr,zAr,LE,C6e,QAr,WAr,tJ,HAr,UAr,JAr,xE,w6e,YAr,KAr,aJ,ZAr,eyr,oyr,$E,A6e,ryr,tyr,nJ,ayr,nyr,syr,kE,cqe,Sc,SE,y6e,ox,lyr,L6e,iyr,fqe,gr,rx,dyr,Rc,cyr,sJ,fyr,myr,lJ,gyr,hyr,pyr,tx,uyr,x6e,_yr,byr,vyr,Gt,ax,Fyr,$6e,Tyr,Myr,Bc,Eyr,k6e,Cyr,wyr,iJ,Ayr,yyr,Lyr,RE,xyr,Gr,nx,$yr,S6e,kyr,Syr,pn,Ryr,R6e,Byr,Pyr,B6e,Iyr,qyr,P6e,Nyr,jyr,Dyr,Me,BE,I6e,Gyr,Oyr,dJ,Vyr,Xyr,zyr,PE,q6e,Qyr,Wyr,cJ,Hyr,Uyr,Jyr,IE,N6e,Yyr,Kyr,fJ,Zyr,eLr,oLr,qE,j6e,rLr,tLr,mJ,aLr,nLr,sLr,NE,D6e,lLr,iLr,gJ,dLr,cLr,fLr,jE,G6e,mLr,gLr,hJ,hLr,pLr,uLr,DE,O6e,_Lr,bLr,pJ,vLr,FLr,TLr,GE,V6e,MLr,ELr,uJ,CLr,wLr,ALr,OE,X6e,yLr,LLr,_J,xLr,$Lr,kLr,VE,z6e,SLr,RLr,bJ,BLr,PLr,ILr,XE,Q6e,qLr,NLr,vJ,jLr,DLr,GLr,zE,W6e,OLr,VLr,FJ,XLr,zLr,QLr,QE,mqe,Pc,WE,H6e,sx,WLr,U6e,HLr,gqe,hr,lx,ULr,Ic,JLr,TJ,YLr,KLr,MJ,ZLr,e8r,o8r,ix,r8r,J6e,t8r,a8r,n8r,Ot,dx,s8r,Y6e,l8r,i8r,qc,d8r,K6e,c8r,f8r,EJ,m8r,g8r,h8r,HE,p8r,Or,cx,u8r,Z6e,_8r,b8r,un,v8r,eTe,F8r,T8r,oTe,M8r,E8r,rTe,C8r,w8r,A8r,Le,UE,tTe,y8r,L8r,CJ,x8r,$8r,k8r,JE,aTe,S8r,R8r,wJ,B8r,P8r,I8r,YE,nTe,q8r,N8r,AJ,j8r,D8r,G8r,KE,sTe,O8r,V8r,yJ,X8r,z8r,Q8r,ZE,lTe,W8r,H8r,LJ,U8r,J8r,Y8r,e5,iTe,K8r,Z8r,xJ,exr,oxr,rxr,o5,dTe,txr,axr,$J,nxr,sxr,lxr,r5,cTe,ixr,dxr,kJ,cxr,fxr,mxr,t5,fTe,gxr,hxr,SJ,pxr,uxr,_xr,a5,mTe,bxr,vxr,RJ,Fxr,Txr,Mxr,n5,hqe,Nc,s5,gTe,fx,Exr,hTe,Cxr,pqe,pr,mx,wxr,jc,Axr,BJ,yxr,Lxr,PJ,xxr,$xr,kxr,gx,Sxr,pTe,Rxr,Bxr,Pxr,Vt,hx,Ixr,uTe,qxr,Nxr,Dc,jxr,_Te,Dxr,Gxr,IJ,Oxr,Vxr,Xxr,l5,zxr,Vr,px,Qxr,bTe,Wxr,Hxr,_n,Uxr,vTe,Jxr,Yxr,FTe,Kxr,Zxr,TTe,e9r,o9r,r9r,Se,i5,MTe,t9r,a9r,qJ,n9r,s9r,l9r,d5,ETe,i9r,d9r,NJ,c9r,f9r,m9r,c5,CTe,g9r,h9r,jJ,p9r,u9r,_9r,f5,wTe,b9r,v9r,DJ,F9r,T9r,M9r,m5,ATe,E9r,C9r,GJ,w9r,A9r,y9r,g5,yTe,L9r,x9r,OJ,$9r,k9r,S9r,h5,LTe,R9r,B9r,VJ,P9r,I9r,q9r,p5,xTe,N9r,j9r,XJ,D9r,G9r,O9r,u5,$Te,V9r,X9r,zJ,z9r,Q9r,W9r,_5,uqe,Gc,b5,kTe,ux,H9r,STe,U9r,_qe,ur,_x,J9r,Oc,Y9r,QJ,K9r,Z9r,WJ,e$r,o$r,r$r,bx,t$r,RTe,a$r,n$r,s$r,Xt,vx,l$r,BTe,i$r,d$r,Vc,c$r,PTe,f$r,m$r,HJ,g$r,h$r,p$r,v5,u$r,Xr,Fx,_$r,ITe,b$r,v$r,bn,F$r,qTe,T$r,M$r,NTe,E$r,C$r,jTe,w$r,A$r,y$r,xe,F5,DTe,L$r,x$r,UJ,$$r,k$r,S$r,T5,GTe,R$r,B$r,JJ,P$r,I$r,q$r,M5,OTe,N$r,j$r,YJ,D$r,G$r,O$r,E5,VTe,V$r,X$r,KJ,z$r,Q$r,W$r,C5,XTe,H$r,U$r,ZJ,J$r,Y$r,K$r,w5,zTe,Z$r,ekr,eY,okr,rkr,tkr,A5,QTe,akr,nkr,oY,skr,lkr,ikr,y5,WTe,dkr,ckr,rY,fkr,mkr,gkr,L5,HTe,hkr,pkr,tY,ukr,_kr,bkr,x5,UTe,vkr,Fkr,aY,Tkr,Mkr,Ekr,$5,bqe,Xc,k5,JTe,Tx,Ckr,YTe,wkr,vqe,_r,Mx,Akr,zc,ykr,nY,Lkr,xkr,sY,$kr,kkr,Skr,Ex,Rkr,KTe,Bkr,Pkr,Ikr,zt,Cx,qkr,ZTe,Nkr,jkr,Qc,Dkr,e7e,Gkr,Okr,lY,Vkr,Xkr,zkr,S5,Qkr,zr,wx,Wkr,o7e,Hkr,Ukr,vn,Jkr,r7e,Ykr,Kkr,t7e,Zkr,eSr,a7e,oSr,rSr,tSr,$e,R5,n7e,aSr,nSr,iY,sSr,lSr,iSr,B5,s7e,dSr,cSr,dY,fSr,mSr,gSr,P5,l7e,hSr,pSr,cY,uSr,_Sr,bSr,I5,i7e,vSr,FSr,fY,TSr,MSr,ESr,q5,d7e,CSr,wSr,mY,ASr,ySr,LSr,N5,c7e,xSr,$Sr,gY,kSr,SSr,RSr,j5,f7e,BSr,PSr,hY,ISr,qSr,NSr,D5,m7e,jSr,DSr,pY,GSr,OSr,VSr,G5,g7e,XSr,zSr,uY,QSr,WSr,HSr,O5,h7e,USr,JSr,_Y,YSr,KSr,ZSr,V5,Fqe,Wc,X5,p7e,Ax,eRr,u7e,oRr,Tqe,br,yx,rRr,Hc,tRr,bY,aRr,nRr,vY,sRr,lRr,iRr,Lx,dRr,_7e,cRr,fRr,mRr,Qt,xx,gRr,b7e,hRr,pRr,Uc,uRr,v7e,_Rr,bRr,FY,vRr,FRr,TRr,z5,MRr,Qr,$x,ERr,F7e,CRr,wRr,Fn,ARr,T7e,yRr,LRr,M7e,xRr,$Rr,E7e,kRr,SRr,RRr,De,Q5,C7e,BRr,PRr,TY,IRr,qRr,NRr,W5,w7e,jRr,DRr,MY,GRr,ORr,VRr,H5,A7e,XRr,zRr,EY,QRr,WRr,HRr,U5,y7e,URr,JRr,CY,YRr,KRr,ZRr,J5,L7e,eBr,oBr,wY,rBr,tBr,aBr,Y5,x7e,nBr,sBr,AY,lBr,iBr,dBr,K5,$7e,cBr,fBr,yY,mBr,gBr,hBr,Z5,k7e,pBr,uBr,LY,_Br,bBr,vBr,eC,Mqe,Jc,oC,S7e,kx,FBr,R7e,TBr,Eqe,vr,Sx,MBr,Yc,EBr,xY,CBr,wBr,$Y,ABr,yBr,LBr,Rx,xBr,B7e,$Br,kBr,SBr,Wt,Bx,RBr,P7e,BBr,PBr,Kc,IBr,I7e,qBr,NBr,kY,jBr,DBr,GBr,rC,OBr,Wr,Px,VBr,q7e,XBr,zBr,Tn,QBr,N7e,WBr,HBr,j7e,UBr,JBr,D7e,YBr,KBr,ZBr,Ge,tC,G7e,ePr,oPr,SY,rPr,tPr,aPr,aC,O7e,nPr,sPr,RY,lPr,iPr,dPr,nC,V7e,cPr,fPr,BY,mPr,gPr,hPr,sC,X7e,pPr,uPr,PY,_Pr,bPr,vPr,lC,z7e,FPr,TPr,IY,MPr,EPr,CPr,iC,Q7e,wPr,APr,qY,yPr,LPr,xPr,dC,W7e,$Pr,kPr,NY,SPr,RPr,BPr,cC,H7e,PPr,IPr,jY,qPr,NPr,jPr,fC,Cqe,Zc,mC,U7e,Ix,DPr,J7e,GPr,wqe,Fr,qx,OPr,ef,VPr,DY,XPr,zPr,GY,QPr,WPr,HPr,Nx,UPr,Y7e,JPr,YPr,KPr,Ht,jx,ZPr,K7e,eIr,oIr,of,rIr,Z7e,tIr,aIr,OY,nIr,sIr,lIr,gC,iIr,Hr,Dx,dIr,eMe,cIr,fIr,Mn,mIr,oMe,gIr,hIr,rMe,pIr,uIr,tMe,_Ir,bIr,vIr,aMe,hC,nMe,FIr,TIr,VY,MIr,EIr,CIr,pC,Aqe,rf,uC,sMe,Gx,wIr,lMe,AIr,yqe,Tr,Ox,yIr,tf,LIr,XY,xIr,$Ir,zY,kIr,SIr,RIr,Vx,BIr,iMe,PIr,IIr,qIr,Ut,Xx,NIr,dMe,jIr,DIr,af,GIr,cMe,OIr,VIr,QY,XIr,zIr,QIr,_C,WIr,Ur,zx,HIr,fMe,UIr,JIr,En,YIr,mMe,KIr,ZIr,gMe,eqr,oqr,hMe,rqr,tqr,aqr,Qx,bC,pMe,nqr,sqr,WY,lqr,iqr,dqr,vC,uMe,cqr,fqr,HY,mqr,gqr,hqr,FC,Lqe,nf,TC,_Me,Wx,pqr,bMe,uqr,xqe,Mr,Hx,_qr,sf,bqr,UY,vqr,Fqr,JY,Tqr,Mqr,Eqr,Ux,Cqr,vMe,wqr,Aqr,yqr,Jt,Jx,Lqr,FMe,xqr,$qr,lf,kqr,TMe,Sqr,Rqr,YY,Bqr,Pqr,Iqr,MC,qqr,Jr,Yx,Nqr,MMe,jqr,Dqr,Cn,Gqr,EMe,Oqr,Vqr,CMe,Xqr,zqr,wMe,Qqr,Wqr,Hqr,AMe,EC,yMe,Uqr,Jqr,KY,Yqr,Kqr,Zqr,CC,$qe;return d=new ee({}),Ma=new B({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),Ww=new ee({}),Hw=new B({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),_f=new eNr({props:{warning:!0,$$slots:{default:[Mwt]},$$scope:{ctx:A}}}),Uw=new ee({}),Jw=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/configuration_auto.py#L566"}}),Zw=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/configuration_auto.py#L589"}}),pg=new P({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[Ewt]},$$scope:{ctx:A}}}),eA=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/configuration_auto.py#L711"}}),oA=new ee({}),rA=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/tokenization_auto.py#L377"}}),nA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_17206/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/tokenization_auto.py#L391"}}),Wg=new P({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[Cwt]},$$scope:{ctx:A}}}),sA=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/tokenization_auto.py#L587"}}),lA=new ee({}),iA=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/feature_extraction_auto.py#L178"}}),fA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_17206/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/feature_extraction_auto.py#L192"}}),Th=new eNr({props:{$$slots:{default:[wwt]},$$scope:{ctx:A}}}),Mh=new P({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[Awt]},$$scope:{ctx:A}}}),mA=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/feature_extraction_auto.py#L319"}}),gA=new ee({}),hA=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/processing_auto.py#L77"}}),_A=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/processing_auto.py#L91"}}),Dh=new eNr({props:{$$slots:{default:[ywt]},$$scope:{ctx:A}}}),Gh=new P({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[Lwt]},$$scope:{ctx:A}}}),bA=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/processing_auto.py#L244"}}),vA=new ee({}),FA=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/modeling_auto.py#L719"}}),MA=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17206/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/flava#transformers.FlavaModel">FlavaModel</a> (Flava model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_17206/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/yolos#transformers.YolosModel">YolosModel</a> (YOLOS model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/auto_factory.py#L389"}}),Xh=new P({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[xwt]},$$scope:{ctx:A}}}),EA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/auto_factory.py#L417"}}),Ru=new P({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[$wt]},$$scope:{ctx:A}}}),CA=new ee({}),wA=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/modeling_auto.py#L726"}}),yA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17206/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/flava#transformers.FlavaForPreTraining">FlavaForPreTraining</a> (Flava model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/auto_factory.py#L389"}}),Pu=new P({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[kwt]},$$scope:{ctx:A}}}),LA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/auto_factory.py#L417"}}),E_=new P({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[Swt]},$$scope:{ctx:A}}}),xA=new ee({}),$A=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/modeling_auto.py#L741"}}),SA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17206/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/auto_factory.py#L389"}}),w_=new P({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[Rwt]},$$scope:{ctx:A}}}),RA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/auto_factory.py#L417"}}),i2=new P({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[Bwt]},$$scope:{ctx:A}}}),BA=new ee({}),PA=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/modeling_auto.py#L748"}}),qA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17206/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/auto_factory.py#L389"}}),c2=new P({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[Pwt]},$$scope:{ctx:A}}}),NA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/auto_factory.py#L417"}}),W2=new P({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[Iwt]},$$scope:{ctx:A}}}),jA=new ee({}),DA=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/modeling_auto.py#L755"}}),OA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17206/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLMProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/auto_factory.py#L389"}}),U2=new P({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[qwt]},$$scope:{ctx:A}}}),VA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/auto_factory.py#L417"}}),h1=new P({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[Nwt]},$$scope:{ctx:A}}}),XA=new ee({}),zA=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/modeling_auto.py#L764"}}),WA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17206/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/auto_factory.py#L389"}}),u1=new P({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[jwt]},$$scope:{ctx:A}}}),HA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/auto_factory.py#L417"}}),fb=new P({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[Dwt]},$$scope:{ctx:A}}}),UA=new ee({}),JA=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/modeling_auto.py#L798"}}),KA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17206/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice">DebertaV2ForMultipleChoice</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/auto_factory.py#L389"}}),gb=new P({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[Gwt]},$$scope:{ctx:A}}}),ZA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/auto_factory.py#L417"}}),Xb=new P({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[Owt]},$$scope:{ctx:A}}}),ey=new ee({}),oy=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/modeling_auto.py#L805"}}),ty=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17206/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/auto_factory.py#L389"}}),Qb=new P({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[Vwt]},$$scope:{ctx:A}}}),ay=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/auto_factory.py#L417"}}),Zb=new P({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[Xwt]},$$scope:{ctx:A}}}),ny=new ee({}),sy=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/modeling_auto.py#L791"}}),iy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17206/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/auto_factory.py#L389"}}),ov=new P({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[zwt]},$$scope:{ctx:A}}}),dy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/auto_factory.py#L417"}}),Iv=new P({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[Qwt]},$$scope:{ctx:A}}}),cy=new ee({}),fy=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/modeling_auto.py#L773"}}),gy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17206/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/auto_factory.py#L389"}}),Nv=new P({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[Wwt]},$$scope:{ctx:A}}}),hy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/auto_factory.py#L417"}}),wF=new P({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[Hwt]},$$scope:{ctx:A}}}),py=new ee({}),uy=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/modeling_auto.py#L780"}}),by=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17206/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/auto_factory.py#L389"}}),yF=new P({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[Uwt]},$$scope:{ctx:A}}}),vy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/auto_factory.py#L417"}}),$F=new P({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[Jwt]},$$scope:{ctx:A}}}),Fy=new ee({}),Ty=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/modeling_auto.py#L814"}}),Ey=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17206/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_17206/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_17206/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_17206/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/auto_factory.py#L389"}}),SF=new P({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[Ywt]},$$scope:{ctx:A}}}),Cy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/auto_factory.py#L417"}}),zF=new P({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[Kwt]},$$scope:{ctx:A}}}),wy=new ee({}),Ay=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/modeling_auto.py#L853"}}),Ly=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17206/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/auto_factory.py#L389"}}),WF=new P({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[Zwt]},$$scope:{ctx:A}}}),xy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/auto_factory.py#L417"}}),JF=new P({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[eAt]},$$scope:{ctx:A}}}),$y=new ee({}),ky=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/modeling_auto.py#L860"}}),Ry=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17206/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/auto_factory.py#L389"}}),KF=new P({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[oAt]},$$scope:{ctx:A}}}),By=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/auto_factory.py#L417"}}),i0=new P({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[rAt]},$$scope:{ctx:A}}}),Py=new ee({}),Iy=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/modeling_auto.py#L883"}}),Ny=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17206/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/auto_factory.py#L389"}}),c0=new P({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[tAt]},$$scope:{ctx:A}}}),jy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/auto_factory.py#L417"}}),u0=new P({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[aAt]},$$scope:{ctx:A}}}),Dy=new ee({}),Gy=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/modeling_auto.py#L867"}}),Vy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17206/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/auto_factory.py#L389"}}),b0=new P({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[nAt]},$$scope:{ctx:A}}}),Xy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/auto_factory.py#L417"}}),L0=new P({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[sAt]},$$scope:{ctx:A}}}),zy=new ee({}),Qy=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/modeling_auto.py#L874"}}),Hy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17206/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/auto_factory.py#L389"}}),$0=new P({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[lAt]},$$scope:{ctx:A}}}),Uy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/auto_factory.py#L417"}}),B0=new P({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[iAt]},$$scope:{ctx:A}}}),Yy=new ee({}),Ky=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/modeling_auto.py#L892"}}),eL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17206/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/auto_factory.py#L389"}}),I0=new P({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[dAt]},$$scope:{ctx:A}}}),oL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/auto_factory.py#L417"}}),O0=new P({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[cAt]},$$scope:{ctx:A}}}),rL=new ee({}),tL=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/modeling_auto.py#L899"}}),nL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17206/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/auto_factory.py#L389"}}),X0=new P({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[fAt]},$$scope:{ctx:A}}}),sL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/auto_factory.py#L417"}}),U0=new P({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[mAt]},$$scope:{ctx:A}}}),lL=new ee({}),iL=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/modeling_auto.py#L846"}}),cL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17206/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/yolos#transformers.YolosForObjectDetection">YolosForObjectDetection</a> (YOLOS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/auto_factory.py#L389"}}),Y0=new P({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[gAt]},$$scope:{ctx:A}}}),fL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/auto_factory.py#L417"}}),o6=new P({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[hAt]},$$scope:{ctx:A}}}),gL=new ee({}),hL=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/modeling_auto.py#L821"}}),uL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17206/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/auto_factory.py#L389"}}),t6=new P({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[pAt]},$$scope:{ctx:A}}}),_L=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/auto_factory.py#L417"}}),s6=new P({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[uAt]},$$scope:{ctx:A}}}),bL=new ee({}),vL=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/modeling_auto.py#L828"}}),TL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17206/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/auto_factory.py#L389"}}),i6=new P({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[_At]},$$scope:{ctx:A}}}),ML=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/auto_factory.py#L417"}}),h6=new P({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[bAt]},$$scope:{ctx:A}}}),EL=new ee({}),CL=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/modeling_auto.py#L837"}}),AL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17206/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/auto_factory.py#L389"}}),u6=new P({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[vAt]},$$scope:{ctx:A}}}),yL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/auto_factory.py#L417"}}),v6=new P({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[FAt]},$$scope:{ctx:A}}}),LL=new ee({}),xL=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/modeling_tf_auto.py#L383"}}),kL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17206/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/data2vec#transformers.TFData2VecVisionModel">TFData2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_17206/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/auto_factory.py#L389"}}),T6=new P({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[TAt]},$$scope:{ctx:A}}}),SL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/auto_factory.py#L417"}}),mT=new P({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[MAt]},$$scope:{ctx:A}}}),RL=new ee({}),BL=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/modeling_tf_auto.py#L390"}}),IL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17206/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/auto_factory.py#L389"}}),hT=new P({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[EAt]},$$scope:{ctx:A}}}),qL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/auto_factory.py#L417"}}),NT=new P({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[CAt]},$$scope:{ctx:A}}}),NL=new ee({}),jL=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/modeling_tf_auto.py#L405"}}),GL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17206/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/auto_factory.py#L389"}}),DT=new P({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[wAt]},$$scope:{ctx:A}}}),OL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/auto_factory.py#L417"}}),ZT=new P({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[AAt]},$$scope:{ctx:A}}}),VL=new ee({}),XL=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/modeling_tf_auto.py#L412"}}),QL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17206/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification">TFData2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/auto_factory.py#L389"}}),o7=new P({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[yAt]},$$scope:{ctx:A}}}),WL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/auto_factory.py#L417"}}),n7=new P({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[LAt]},$$scope:{ctx:A}}}),HL=new ee({}),UL=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/modeling_tf_auto.py#L428"}}),YL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17206/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/auto_factory.py#L389"}}),l7=new P({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[xAt]},$$scope:{ctx:A}}}),KL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/auto_factory.py#L417"}}),L7=new P({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[$At]},$$scope:{ctx:A}}}),ZL=new ee({}),e8=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/modeling_tf_auto.py#L435"}}),r8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17206/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/auto_factory.py#L389"}}),$7=new P({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[kAt]},$$scope:{ctx:A}}}),t8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/auto_factory.py#L417"}}),G7=new P({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[SAt]},$$scope:{ctx:A}}}),a8=new ee({}),n8=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/modeling_tf_auto.py#L444"}}),l8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17206/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/auto_factory.py#L389"}}),V7=new P({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[RAt]},$$scope:{ctx:A}}}),i8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/auto_factory.py#L417"}}),uM=new P({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[BAt]},$$scope:{ctx:A}}}),d8=new ee({}),c8=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/modeling_tf_auto.py#L480"}}),m8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17206/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/auto_factory.py#L389"}}),bM=new P({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[PAt]},$$scope:{ctx:A}}}),g8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/auto_factory.py#L417"}}),IM=new P({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[IAt]},$$scope:{ctx:A}}}),h8=new ee({}),p8=new R({props:{name:"class transformers.TFAutoModelForNextSentencePrediction",anchor:"transformers.TFAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/modeling_tf_auto.py#L487"}}),_8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17206/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/bert#transformers.TFBertForNextSentencePrediction">TFBertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction">TFMobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/auto_factory.py#L389"}}),NM=new P({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[qAt]},$$scope:{ctx:A}}}),b8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/auto_factory.py#L417"}}),GM=new P({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[NAt]},$$scope:{ctx:A}}}),F8=new ee({}),T8=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/modeling_tf_auto.py#L460"}}),E8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17206/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/auto_factory.py#L389"}}),VM=new P({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[jAt]},$$scope:{ctx:A}}}),C8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/auto_factory.py#L417"}}),zM=new P({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[DAt]},$$scope:{ctx:A}}}),w8=new ee({}),A8=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/modeling_tf_auto.py#L471"}}),L8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17206/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/auto_factory.py#L389"}}),WM=new P({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[GAt]},$$scope:{ctx:A}}}),x8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/auto_factory.py#L417"}}),h4=new P({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[OAt]},$$scope:{ctx:A}}}),$8=new ee({}),k8=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/modeling_tf_auto.py#L453"}}),R8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17206/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/auto_factory.py#L389"}}),u4=new P({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[VAt]},$$scope:{ctx:A}}}),B8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/auto_factory.py#L417"}}),q4=new P({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[XAt]},$$scope:{ctx:A}}}),P8=new ee({}),I8=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/modeling_tf_auto.py#L421"}}),N8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17206/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/auto_factory.py#L389"}}),j4=new P({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[zAt]},$$scope:{ctx:A}}}),j8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/auto_factory.py#L417"}}),G4=new P({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[QAt]},$$scope:{ctx:A}}}),D8=new ee({}),G8=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/modeling_tf_auto.py#L496"}}),V8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17206/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/auto_factory.py#L389"}}),V4=new P({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[WAt]},$$scope:{ctx:A}}}),X8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/auto_factory.py#L417"}}),z4=new P({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[HAt]},$$scope:{ctx:A}}}),z8=new ee({}),Q8=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/modeling_flax_auto.py#L241"}}),H8=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17206/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/auto_factory.py#L389"}}),W4=new P({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[UAt]},$$scope:{ctx:A}}}),U8=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/auto_factory.py#L417"}}),vE=new P({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[JAt]},$$scope:{ctx:A}}}),J8=new ee({}),Y8=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/modeling_flax_auto.py#L255"}}),Z8=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17206/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/bert#transformers.FlaxBertForCausalLM">FlaxBertForCausalLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM">FlaxBigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/electra#transformers.FlaxElectraForCausalLM">FlaxElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM">FlaxRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/auto_factory.py#L389"}}),TE=new P({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[YAt]},$$scope:{ctx:A}}}),ex=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/auto_factory.py#L417"}}),kE=new P({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[KAt]},$$scope:{ctx:A}}}),ox=new ee({}),rx=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/modeling_flax_auto.py#L248"}}),ax=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17206/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/auto_factory.py#L389"}}),RE=new P({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[ZAt]},$$scope:{ctx:A}}}),nx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/auto_factory.py#L417"}}),QE=new P({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[eyt]},$$scope:{ctx:A}}}),sx=new ee({}),lx=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/modeling_flax_auto.py#L262"}}),dx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17206/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/auto_factory.py#L389"}}),HE=new P({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[oyt]},$$scope:{ctx:A}}}),cx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/auto_factory.py#L417"}}),n5=new P({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[ryt]},$$scope:{ctx:A}}}),fx=new ee({}),mx=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/modeling_flax_auto.py#L269"}}),hx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17206/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/auto_factory.py#L389"}}),l5=new P({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[tyt]},$$scope:{ctx:A}}}),px=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/auto_factory.py#L417"}}),_5=new P({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[ayt]},$$scope:{ctx:A}}}),ux=new ee({}),_x=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/modeling_flax_auto.py#L278"}}),vx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17206/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/auto_factory.py#L389"}}),v5=new P({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[nyt]},$$scope:{ctx:A}}}),Fx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/auto_factory.py#L417"}}),$5=new P({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[syt]},$$scope:{ctx:A}}}),Tx=new ee({}),Mx=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/modeling_flax_auto.py#L287"}}),Cx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17206/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/auto_factory.py#L389"}}),S5=new P({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[lyt]},$$scope:{ctx:A}}}),wx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/auto_factory.py#L417"}}),V5=new P({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[iyt]},$$scope:{ctx:A}}}),Ax=new ee({}),yx=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/modeling_flax_auto.py#L294"}}),xx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17206/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/auto_factory.py#L389"}}),z5=new P({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[dyt]},$$scope:{ctx:A}}}),$x=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/auto_factory.py#L417"}}),eC=new P({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[cyt]},$$scope:{ctx:A}}}),kx=new ee({}),Sx=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/modeling_flax_auto.py#L303"}}),Bx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17206/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/auto_factory.py#L389"}}),rC=new P({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[fyt]},$$scope:{ctx:A}}}),Px=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/auto_factory.py#L417"}}),fC=new P({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[myt]},$$scope:{ctx:A}}}),Ix=new ee({}),qx=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/modeling_flax_auto.py#L310"}}),jx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17206/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/auto_factory.py#L389"}}),gC=new P({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[gyt]},$$scope:{ctx:A}}}),Dx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/auto_factory.py#L417"}}),pC=new P({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[hyt]},$$scope:{ctx:A}}}),Gx=new ee({}),Ox=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/modeling_flax_auto.py#L319"}}),Xx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17206/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17206/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/auto_factory.py#L389"}}),_C=new P({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[pyt]},$$scope:{ctx:A}}}),zx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/auto_factory.py#L417"}}),FC=new P({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[uyt]},$$scope:{ctx:A}}}),Wx=new ee({}),Hx=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/modeling_flax_auto.py#L328"}}),Jx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17206/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17206/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/auto_factory.py#L389"}}),MC=new P({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[_yt]},$$scope:{ctx:A}}}),Yx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17206/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17206/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17206/src/transformers/models/auto/auto_factory.py#L417"}}),CC=new P({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[byt]},$$scope:{ctx:A}}}),{c(){g=a("meta"),v=l(),p=a("h1"),m=a("a"),u=a("span"),F(d.$$.fragment),h=l(),Mo=a("span"),li=o("Auto Classes"),mf=l(),et=a("p"),ii=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),di=a("code"),Vw=o("from_pretrained()"),gf=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),qe=l(),Xe=a("p"),ci=o("Instantiating one of "),An=a("a"),Xw=o("AutoConfig"),yn=o(", "),Ln=a("a"),zw=o("AutoModel"),fi=o(`, and
`),xn=a("a"),Qw=o("AutoTokenizer"),mi=o(" will directly create a class of the relevant architecture. For instance"),hf=l(),F(Ma.$$.fragment),ze=l(),Ae=a("p"),c$=o("will create a model that is an instance of "),gi=a("a"),f$=o("BertModel"),m$=o("."),Eo=l(),Ea=a("p"),g$=o("There is one class of "),pf=a("code"),h$=o("AutoModel"),Nje=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),yPe=l(),hi=a("h2"),uf=a("a"),QZ=a("span"),F(Ww.$$.fragment),jje=l(),WZ=a("span"),Dje=o("Extending the Auto Classes"),LPe=l(),$n=a("p"),Gje=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),HZ=a("code"),Oje=o("NewModel"),Vje=o(", make sure you have a "),UZ=a("code"),Xje=o("NewModelConfig"),zje=o(` then you can add those to the auto
classes like this:`),xPe=l(),F(Hw.$$.fragment),$Pe=l(),p$=a("p"),Qje=o("You will then be able to use the auto classes like you would usually do!"),kPe=l(),F(_f.$$.fragment),SPe=l(),pi=a("h2"),bf=a("a"),JZ=a("span"),F(Uw.$$.fragment),Wje=l(),YZ=a("span"),Hje=o("AutoConfig"),RPe=l(),Co=a("div"),F(Jw.$$.fragment),Uje=l(),Yw=a("p"),Jje=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),u$=a("a"),Yje=o("from_pretrained()"),Kje=o(" class method."),Zje=l(),Kw=a("p"),eDe=o("This class cannot be instantiated directly using "),KZ=a("code"),oDe=o("__init__()"),rDe=o(" (throws an error)."),tDe=l(),Er=a("div"),F(Zw.$$.fragment),aDe=l(),ZZ=a("p"),nDe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),sDe=l(),ui=a("p"),lDe=o("The configuration class to instantiate is selected based on the "),eee=a("code"),iDe=o("model_type"),dDe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),oee=a("code"),cDe=o("pretrained_model_name_or_path"),fDe=o(":"),mDe=l(),y=a("ul"),vf=a("li"),ree=a("strong"),gDe=o("albert"),hDe=o(" \u2014 "),_$=a("a"),pDe=o("AlbertConfig"),uDe=o(" (ALBERT model)"),_De=l(),Ff=a("li"),tee=a("strong"),bDe=o("bart"),vDe=o(" \u2014 "),b$=a("a"),FDe=o("BartConfig"),TDe=o(" (BART model)"),MDe=l(),Tf=a("li"),aee=a("strong"),EDe=o("beit"),CDe=o(" \u2014 "),v$=a("a"),wDe=o("BeitConfig"),ADe=o(" (BEiT model)"),yDe=l(),Mf=a("li"),nee=a("strong"),LDe=o("bert"),xDe=o(" \u2014 "),F$=a("a"),$De=o("BertConfig"),kDe=o(" (BERT model)"),SDe=l(),Ef=a("li"),see=a("strong"),RDe=o("bert-generation"),BDe=o(" \u2014 "),T$=a("a"),PDe=o("BertGenerationConfig"),IDe=o(" (Bert Generation model)"),qDe=l(),Cf=a("li"),lee=a("strong"),NDe=o("big_bird"),jDe=o(" \u2014 "),M$=a("a"),DDe=o("BigBirdConfig"),GDe=o(" (BigBird model)"),ODe=l(),wf=a("li"),iee=a("strong"),VDe=o("bigbird_pegasus"),XDe=o(" \u2014 "),E$=a("a"),zDe=o("BigBirdPegasusConfig"),QDe=o(" (BigBirdPegasus model)"),WDe=l(),Af=a("li"),dee=a("strong"),HDe=o("blenderbot"),UDe=o(" \u2014 "),C$=a("a"),JDe=o("BlenderbotConfig"),YDe=o(" (Blenderbot model)"),KDe=l(),yf=a("li"),cee=a("strong"),ZDe=o("blenderbot-small"),eGe=o(" \u2014 "),w$=a("a"),oGe=o("BlenderbotSmallConfig"),rGe=o(" (BlenderbotSmall model)"),tGe=l(),Lf=a("li"),fee=a("strong"),aGe=o("camembert"),nGe=o(" \u2014 "),A$=a("a"),sGe=o("CamembertConfig"),lGe=o(" (CamemBERT model)"),iGe=l(),xf=a("li"),mee=a("strong"),dGe=o("canine"),cGe=o(" \u2014 "),y$=a("a"),fGe=o("CanineConfig"),mGe=o(" (Canine model)"),gGe=l(),$f=a("li"),gee=a("strong"),hGe=o("clip"),pGe=o(" \u2014 "),L$=a("a"),uGe=o("CLIPConfig"),_Ge=o(" (CLIP model)"),bGe=l(),kf=a("li"),hee=a("strong"),vGe=o("convbert"),FGe=o(" \u2014 "),x$=a("a"),TGe=o("ConvBertConfig"),MGe=o(" (ConvBERT model)"),EGe=l(),Sf=a("li"),pee=a("strong"),CGe=o("convnext"),wGe=o(" \u2014 "),$$=a("a"),AGe=o("ConvNextConfig"),yGe=o(" (ConvNext model)"),LGe=l(),Rf=a("li"),uee=a("strong"),xGe=o("ctrl"),$Ge=o(" \u2014 "),k$=a("a"),kGe=o("CTRLConfig"),SGe=o(" (CTRL model)"),RGe=l(),Bf=a("li"),_ee=a("strong"),BGe=o("data2vec-audio"),PGe=o(" \u2014 "),S$=a("a"),IGe=o("Data2VecAudioConfig"),qGe=o(" (Data2VecAudio model)"),NGe=l(),Pf=a("li"),bee=a("strong"),jGe=o("data2vec-text"),DGe=o(" \u2014 "),R$=a("a"),GGe=o("Data2VecTextConfig"),OGe=o(" (Data2VecText model)"),VGe=l(),If=a("li"),vee=a("strong"),XGe=o("data2vec-vision"),zGe=o(" \u2014 "),B$=a("a"),QGe=o("Data2VecVisionConfig"),WGe=o(" (Data2VecVision model)"),HGe=l(),qf=a("li"),Fee=a("strong"),UGe=o("deberta"),JGe=o(" \u2014 "),P$=a("a"),YGe=o("DebertaConfig"),KGe=o(" (DeBERTa model)"),ZGe=l(),Nf=a("li"),Tee=a("strong"),eOe=o("deberta-v2"),oOe=o(" \u2014 "),I$=a("a"),rOe=o("DebertaV2Config"),tOe=o(" (DeBERTa-v2 model)"),aOe=l(),jf=a("li"),Mee=a("strong"),nOe=o("decision_transformer"),sOe=o(" \u2014 "),q$=a("a"),lOe=o("DecisionTransformerConfig"),iOe=o(" (Decision Transformer model)"),dOe=l(),Df=a("li"),Eee=a("strong"),cOe=o("deit"),fOe=o(" \u2014 "),N$=a("a"),mOe=o("DeiTConfig"),gOe=o(" (DeiT model)"),hOe=l(),Gf=a("li"),Cee=a("strong"),pOe=o("detr"),uOe=o(" \u2014 "),j$=a("a"),_Oe=o("DetrConfig"),bOe=o(" (DETR model)"),vOe=l(),Of=a("li"),wee=a("strong"),FOe=o("distilbert"),TOe=o(" \u2014 "),D$=a("a"),MOe=o("DistilBertConfig"),EOe=o(" (DistilBERT model)"),COe=l(),Vf=a("li"),Aee=a("strong"),wOe=o("dpr"),AOe=o(" \u2014 "),G$=a("a"),yOe=o("DPRConfig"),LOe=o(" (DPR model)"),xOe=l(),Xf=a("li"),yee=a("strong"),$Oe=o("dpt"),kOe=o(" \u2014 "),O$=a("a"),SOe=o("DPTConfig"),ROe=o(" (DPT model)"),BOe=l(),zf=a("li"),Lee=a("strong"),POe=o("electra"),IOe=o(" \u2014 "),V$=a("a"),qOe=o("ElectraConfig"),NOe=o(" (ELECTRA model)"),jOe=l(),Qf=a("li"),xee=a("strong"),DOe=o("encoder-decoder"),GOe=o(" \u2014 "),X$=a("a"),OOe=o("EncoderDecoderConfig"),VOe=o(" (Encoder decoder model)"),XOe=l(),Wf=a("li"),$ee=a("strong"),zOe=o("flaubert"),QOe=o(" \u2014 "),z$=a("a"),WOe=o("FlaubertConfig"),HOe=o(" (FlauBERT model)"),UOe=l(),Hf=a("li"),kee=a("strong"),JOe=o("flava"),YOe=o(" \u2014 "),Q$=a("a"),KOe=o("FlavaConfig"),ZOe=o(" (Flava model)"),eVe=l(),Uf=a("li"),See=a("strong"),oVe=o("fnet"),rVe=o(" \u2014 "),W$=a("a"),tVe=o("FNetConfig"),aVe=o(" (FNet model)"),nVe=l(),Jf=a("li"),Ree=a("strong"),sVe=o("fsmt"),lVe=o(" \u2014 "),H$=a("a"),iVe=o("FSMTConfig"),dVe=o(" (FairSeq Machine-Translation model)"),cVe=l(),Yf=a("li"),Bee=a("strong"),fVe=o("funnel"),mVe=o(" \u2014 "),U$=a("a"),gVe=o("FunnelConfig"),hVe=o(" (Funnel Transformer model)"),pVe=l(),Kf=a("li"),Pee=a("strong"),uVe=o("glpn"),_Ve=o(" \u2014 "),J$=a("a"),bVe=o("GLPNConfig"),vVe=o(" (GLPN model)"),FVe=l(),Zf=a("li"),Iee=a("strong"),TVe=o("gpt2"),MVe=o(" \u2014 "),Y$=a("a"),EVe=o("GPT2Config"),CVe=o(" (OpenAI GPT-2 model)"),wVe=l(),em=a("li"),qee=a("strong"),AVe=o("gpt_neo"),yVe=o(" \u2014 "),K$=a("a"),LVe=o("GPTNeoConfig"),xVe=o(" (GPT Neo model)"),$Ve=l(),om=a("li"),Nee=a("strong"),kVe=o("gptj"),SVe=o(" \u2014 "),Z$=a("a"),RVe=o("GPTJConfig"),BVe=o(" (GPT-J model)"),PVe=l(),rm=a("li"),jee=a("strong"),IVe=o("hubert"),qVe=o(" \u2014 "),ek=a("a"),NVe=o("HubertConfig"),jVe=o(" (Hubert model)"),DVe=l(),tm=a("li"),Dee=a("strong"),GVe=o("ibert"),OVe=o(" \u2014 "),ok=a("a"),VVe=o("IBertConfig"),XVe=o(" (I-BERT model)"),zVe=l(),am=a("li"),Gee=a("strong"),QVe=o("imagegpt"),WVe=o(" \u2014 "),rk=a("a"),HVe=o("ImageGPTConfig"),UVe=o(" (ImageGPT model)"),JVe=l(),nm=a("li"),Oee=a("strong"),YVe=o("layoutlm"),KVe=o(" \u2014 "),tk=a("a"),ZVe=o("LayoutLMConfig"),eXe=o(" (LayoutLM model)"),oXe=l(),sm=a("li"),Vee=a("strong"),rXe=o("layoutlmv2"),tXe=o(" \u2014 "),ak=a("a"),aXe=o("LayoutLMv2Config"),nXe=o(" (LayoutLMv2 model)"),sXe=l(),lm=a("li"),Xee=a("strong"),lXe=o("led"),iXe=o(" \u2014 "),nk=a("a"),dXe=o("LEDConfig"),cXe=o(" (LED model)"),fXe=l(),im=a("li"),zee=a("strong"),mXe=o("longformer"),gXe=o(" \u2014 "),sk=a("a"),hXe=o("LongformerConfig"),pXe=o(" (Longformer model)"),uXe=l(),dm=a("li"),Qee=a("strong"),_Xe=o("luke"),bXe=o(" \u2014 "),lk=a("a"),vXe=o("LukeConfig"),FXe=o(" (LUKE model)"),TXe=l(),cm=a("li"),Wee=a("strong"),MXe=o("lxmert"),EXe=o(" \u2014 "),ik=a("a"),CXe=o("LxmertConfig"),wXe=o(" (LXMERT model)"),AXe=l(),fm=a("li"),Hee=a("strong"),yXe=o("m2m_100"),LXe=o(" \u2014 "),dk=a("a"),xXe=o("M2M100Config"),$Xe=o(" (M2M100 model)"),kXe=l(),mm=a("li"),Uee=a("strong"),SXe=o("marian"),RXe=o(" \u2014 "),ck=a("a"),BXe=o("MarianConfig"),PXe=o(" (Marian model)"),IXe=l(),gm=a("li"),Jee=a("strong"),qXe=o("maskformer"),NXe=o(" \u2014 "),fk=a("a"),jXe=o("MaskFormerConfig"),DXe=o(" (MaskFormer model)"),GXe=l(),hm=a("li"),Yee=a("strong"),OXe=o("mbart"),VXe=o(" \u2014 "),mk=a("a"),XXe=o("MBartConfig"),zXe=o(" (mBART model)"),QXe=l(),pm=a("li"),Kee=a("strong"),WXe=o("megatron-bert"),HXe=o(" \u2014 "),gk=a("a"),UXe=o("MegatronBertConfig"),JXe=o(" (MegatronBert model)"),YXe=l(),um=a("li"),Zee=a("strong"),KXe=o("mobilebert"),ZXe=o(" \u2014 "),hk=a("a"),eze=o("MobileBertConfig"),oze=o(" (MobileBERT model)"),rze=l(),_m=a("li"),eoe=a("strong"),tze=o("mpnet"),aze=o(" \u2014 "),pk=a("a"),nze=o("MPNetConfig"),sze=o(" (MPNet model)"),lze=l(),bm=a("li"),ooe=a("strong"),ize=o("mt5"),dze=o(" \u2014 "),uk=a("a"),cze=o("MT5Config"),fze=o(" (mT5 model)"),mze=l(),vm=a("li"),roe=a("strong"),gze=o("nystromformer"),hze=o(" \u2014 "),_k=a("a"),pze=o("NystromformerConfig"),uze=o(" (Nystromformer model)"),_ze=l(),Fm=a("li"),toe=a("strong"),bze=o("openai-gpt"),vze=o(" \u2014 "),bk=a("a"),Fze=o("OpenAIGPTConfig"),Tze=o(" (OpenAI GPT model)"),Mze=l(),Tm=a("li"),aoe=a("strong"),Eze=o("pegasus"),Cze=o(" \u2014 "),vk=a("a"),wze=o("PegasusConfig"),Aze=o(" (Pegasus model)"),yze=l(),Mm=a("li"),noe=a("strong"),Lze=o("perceiver"),xze=o(" \u2014 "),Fk=a("a"),$ze=o("PerceiverConfig"),kze=o(" (Perceiver model)"),Sze=l(),Em=a("li"),soe=a("strong"),Rze=o("plbart"),Bze=o(" \u2014 "),Tk=a("a"),Pze=o("PLBartConfig"),Ize=o(" (PLBart model)"),qze=l(),Cm=a("li"),loe=a("strong"),Nze=o("poolformer"),jze=o(" \u2014 "),Mk=a("a"),Dze=o("PoolFormerConfig"),Gze=o(" (PoolFormer model)"),Oze=l(),wm=a("li"),ioe=a("strong"),Vze=o("prophetnet"),Xze=o(" \u2014 "),Ek=a("a"),zze=o("ProphetNetConfig"),Qze=o(" (ProphetNet model)"),Wze=l(),Am=a("li"),doe=a("strong"),Hze=o("qdqbert"),Uze=o(" \u2014 "),Ck=a("a"),Jze=o("QDQBertConfig"),Yze=o(" (QDQBert model)"),Kze=l(),ym=a("li"),coe=a("strong"),Zze=o("rag"),eQe=o(" \u2014 "),wk=a("a"),oQe=o("RagConfig"),rQe=o(" (RAG model)"),tQe=l(),Lm=a("li"),foe=a("strong"),aQe=o("realm"),nQe=o(" \u2014 "),Ak=a("a"),sQe=o("RealmConfig"),lQe=o(" (Realm model)"),iQe=l(),xm=a("li"),moe=a("strong"),dQe=o("reformer"),cQe=o(" \u2014 "),yk=a("a"),fQe=o("ReformerConfig"),mQe=o(" (Reformer model)"),gQe=l(),$m=a("li"),goe=a("strong"),hQe=o("regnet"),pQe=o(" \u2014 "),Lk=a("a"),uQe=o("RegNetConfig"),_Qe=o(" (RegNet model)"),bQe=l(),km=a("li"),hoe=a("strong"),vQe=o("rembert"),FQe=o(" \u2014 "),xk=a("a"),TQe=o("RemBertConfig"),MQe=o(" (RemBERT model)"),EQe=l(),Sm=a("li"),poe=a("strong"),CQe=o("resnet"),wQe=o(" \u2014 "),$k=a("a"),AQe=o("ResNetConfig"),yQe=o(" (ResNet model)"),LQe=l(),Rm=a("li"),uoe=a("strong"),xQe=o("retribert"),$Qe=o(" \u2014 "),kk=a("a"),kQe=o("RetriBertConfig"),SQe=o(" (RetriBERT model)"),RQe=l(),Bm=a("li"),_oe=a("strong"),BQe=o("roberta"),PQe=o(" \u2014 "),Sk=a("a"),IQe=o("RobertaConfig"),qQe=o(" (RoBERTa model)"),NQe=l(),Pm=a("li"),boe=a("strong"),jQe=o("roformer"),DQe=o(" \u2014 "),Rk=a("a"),GQe=o("RoFormerConfig"),OQe=o(" (RoFormer model)"),VQe=l(),Im=a("li"),voe=a("strong"),XQe=o("segformer"),zQe=o(" \u2014 "),Bk=a("a"),QQe=o("SegformerConfig"),WQe=o(" (SegFormer model)"),HQe=l(),qm=a("li"),Foe=a("strong"),UQe=o("sew"),JQe=o(" \u2014 "),Pk=a("a"),YQe=o("SEWConfig"),KQe=o(" (SEW model)"),ZQe=l(),Nm=a("li"),Toe=a("strong"),eWe=o("sew-d"),oWe=o(" \u2014 "),Ik=a("a"),rWe=o("SEWDConfig"),tWe=o(" (SEW-D model)"),aWe=l(),jm=a("li"),Moe=a("strong"),nWe=o("speech-encoder-decoder"),sWe=o(" \u2014 "),qk=a("a"),lWe=o("SpeechEncoderDecoderConfig"),iWe=o(" (Speech Encoder decoder model)"),dWe=l(),Dm=a("li"),Eoe=a("strong"),cWe=o("speech_to_text"),fWe=o(" \u2014 "),Nk=a("a"),mWe=o("Speech2TextConfig"),gWe=o(" (Speech2Text model)"),hWe=l(),Gm=a("li"),Coe=a("strong"),pWe=o("speech_to_text_2"),uWe=o(" \u2014 "),jk=a("a"),_We=o("Speech2Text2Config"),bWe=o(" (Speech2Text2 model)"),vWe=l(),Om=a("li"),woe=a("strong"),FWe=o("splinter"),TWe=o(" \u2014 "),Dk=a("a"),MWe=o("SplinterConfig"),EWe=o(" (Splinter model)"),CWe=l(),Vm=a("li"),Aoe=a("strong"),wWe=o("squeezebert"),AWe=o(" \u2014 "),Gk=a("a"),yWe=o("SqueezeBertConfig"),LWe=o(" (SqueezeBERT model)"),xWe=l(),Xm=a("li"),yoe=a("strong"),$We=o("swin"),kWe=o(" \u2014 "),Ok=a("a"),SWe=o("SwinConfig"),RWe=o(" (Swin model)"),BWe=l(),zm=a("li"),Loe=a("strong"),PWe=o("t5"),IWe=o(" \u2014 "),Vk=a("a"),qWe=o("T5Config"),NWe=o(" (T5 model)"),jWe=l(),Qm=a("li"),xoe=a("strong"),DWe=o("tapas"),GWe=o(" \u2014 "),Xk=a("a"),OWe=o("TapasConfig"),VWe=o(" (TAPAS model)"),XWe=l(),Wm=a("li"),$oe=a("strong"),zWe=o("tapex"),QWe=o(" \u2014 "),zk=a("a"),WWe=o("BartConfig"),HWe=o(" (TAPEX model)"),UWe=l(),Hm=a("li"),koe=a("strong"),JWe=o("transfo-xl"),YWe=o(" \u2014 "),Qk=a("a"),KWe=o("TransfoXLConfig"),ZWe=o(" (Transformer-XL model)"),eHe=l(),Um=a("li"),Soe=a("strong"),oHe=o("trocr"),rHe=o(" \u2014 "),Wk=a("a"),tHe=o("TrOCRConfig"),aHe=o(" (TrOCR model)"),nHe=l(),Jm=a("li"),Roe=a("strong"),sHe=o("unispeech"),lHe=o(" \u2014 "),Hk=a("a"),iHe=o("UniSpeechConfig"),dHe=o(" (UniSpeech model)"),cHe=l(),Ym=a("li"),Boe=a("strong"),fHe=o("unispeech-sat"),mHe=o(" \u2014 "),Uk=a("a"),gHe=o("UniSpeechSatConfig"),hHe=o(" (UniSpeechSat model)"),pHe=l(),Km=a("li"),Poe=a("strong"),uHe=o("van"),_He=o(" \u2014 "),Jk=a("a"),bHe=o("VanConfig"),vHe=o(" (VAN model)"),FHe=l(),Zm=a("li"),Ioe=a("strong"),THe=o("vilt"),MHe=o(" \u2014 "),Yk=a("a"),EHe=o("ViltConfig"),CHe=o(" (ViLT model)"),wHe=l(),eg=a("li"),qoe=a("strong"),AHe=o("vision-encoder-decoder"),yHe=o(" \u2014 "),Kk=a("a"),LHe=o("VisionEncoderDecoderConfig"),xHe=o(" (Vision Encoder decoder model)"),$He=l(),og=a("li"),Noe=a("strong"),kHe=o("vision-text-dual-encoder"),SHe=o(" \u2014 "),Zk=a("a"),RHe=o("VisionTextDualEncoderConfig"),BHe=o(" (VisionTextDualEncoder model)"),PHe=l(),rg=a("li"),joe=a("strong"),IHe=o("visual_bert"),qHe=o(" \u2014 "),eS=a("a"),NHe=o("VisualBertConfig"),jHe=o(" (VisualBert model)"),DHe=l(),tg=a("li"),Doe=a("strong"),GHe=o("vit"),OHe=o(" \u2014 "),oS=a("a"),VHe=o("ViTConfig"),XHe=o(" (ViT model)"),zHe=l(),ag=a("li"),Goe=a("strong"),QHe=o("vit_mae"),WHe=o(" \u2014 "),rS=a("a"),HHe=o("ViTMAEConfig"),UHe=o(" (ViTMAE model)"),JHe=l(),ng=a("li"),Ooe=a("strong"),YHe=o("wav2vec2"),KHe=o(" \u2014 "),tS=a("a"),ZHe=o("Wav2Vec2Config"),eUe=o(" (Wav2Vec2 model)"),oUe=l(),sg=a("li"),Voe=a("strong"),rUe=o("wavlm"),tUe=o(" \u2014 "),aS=a("a"),aUe=o("WavLMConfig"),nUe=o(" (WavLM model)"),sUe=l(),lg=a("li"),Xoe=a("strong"),lUe=o("xglm"),iUe=o(" \u2014 "),nS=a("a"),dUe=o("XGLMConfig"),cUe=o(" (XGLM model)"),fUe=l(),ig=a("li"),zoe=a("strong"),mUe=o("xlm"),gUe=o(" \u2014 "),sS=a("a"),hUe=o("XLMConfig"),pUe=o(" (XLM model)"),uUe=l(),dg=a("li"),Qoe=a("strong"),_Ue=o("xlm-prophetnet"),bUe=o(" \u2014 "),lS=a("a"),vUe=o("XLMProphetNetConfig"),FUe=o(" (XLMProphetNet model)"),TUe=l(),cg=a("li"),Woe=a("strong"),MUe=o("xlm-roberta"),EUe=o(" \u2014 "),iS=a("a"),CUe=o("XLMRobertaConfig"),wUe=o(" (XLM-RoBERTa model)"),AUe=l(),fg=a("li"),Hoe=a("strong"),yUe=o("xlm-roberta-xl"),LUe=o(" \u2014 "),dS=a("a"),xUe=o("XLMRobertaXLConfig"),$Ue=o(" (XLM-RoBERTa-XL model)"),kUe=l(),mg=a("li"),Uoe=a("strong"),SUe=o("xlnet"),RUe=o(" \u2014 "),cS=a("a"),BUe=o("XLNetConfig"),PUe=o(" (XLNet model)"),IUe=l(),gg=a("li"),Joe=a("strong"),qUe=o("yolos"),NUe=o(" \u2014 "),fS=a("a"),jUe=o("YolosConfig"),DUe=o(" (YOLOS model)"),GUe=l(),hg=a("li"),Yoe=a("strong"),OUe=o("yoso"),VUe=o(" \u2014 "),mS=a("a"),XUe=o("YosoConfig"),zUe=o(" (YOSO model)"),QUe=l(),F(pg.$$.fragment),WUe=l(),ug=a("div"),F(eA.$$.fragment),HUe=l(),Koe=a("p"),UUe=o("Register a new configuration for this class."),BPe=l(),_i=a("h2"),_g=a("a"),Zoe=a("span"),F(oA.$$.fragment),JUe=l(),ere=a("span"),YUe=o("AutoTokenizer"),PPe=l(),wo=a("div"),F(rA.$$.fragment),KUe=l(),tA=a("p"),ZUe=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),gS=a("a"),eJe=o("AutoTokenizer.from_pretrained()"),oJe=o(" class method."),rJe=l(),aA=a("p"),tJe=o("This class cannot be instantiated directly using "),ore=a("code"),aJe=o("__init__()"),nJe=o(" (throws an error)."),sJe=l(),Cr=a("div"),F(nA.$$.fragment),lJe=l(),rre=a("p"),iJe=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),dJe=l(),Ca=a("p"),cJe=o("The tokenizer class to instantiate is selected based on the "),tre=a("code"),fJe=o("model_type"),mJe=o(` property of the config object (either
passed as an argument or loaded from `),are=a("code"),gJe=o("pretrained_model_name_or_path"),hJe=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nre=a("code"),pJe=o("pretrained_model_name_or_path"),uJe=o(":"),_Je=l(),k=a("ul"),kn=a("li"),sre=a("strong"),bJe=o("albert"),vJe=o(" \u2014 "),hS=a("a"),FJe=o("AlbertTokenizer"),TJe=o(" or "),pS=a("a"),MJe=o("AlbertTokenizerFast"),EJe=o(" (ALBERT model)"),CJe=l(),Sn=a("li"),lre=a("strong"),wJe=o("bart"),AJe=o(" \u2014 "),uS=a("a"),yJe=o("BartTokenizer"),LJe=o(" or "),_S=a("a"),xJe=o("BartTokenizerFast"),$Je=o(" (BART model)"),kJe=l(),Rn=a("li"),ire=a("strong"),SJe=o("barthez"),RJe=o(" \u2014 "),bS=a("a"),BJe=o("BarthezTokenizer"),PJe=o(" or "),vS=a("a"),IJe=o("BarthezTokenizerFast"),qJe=o(" (BARThez model)"),NJe=l(),bg=a("li"),dre=a("strong"),jJe=o("bartpho"),DJe=o(" \u2014 "),FS=a("a"),GJe=o("BartphoTokenizer"),OJe=o(" (BARTpho model)"),VJe=l(),Bn=a("li"),cre=a("strong"),XJe=o("bert"),zJe=o(" \u2014 "),TS=a("a"),QJe=o("BertTokenizer"),WJe=o(" or "),MS=a("a"),HJe=o("BertTokenizerFast"),UJe=o(" (BERT model)"),JJe=l(),vg=a("li"),fre=a("strong"),YJe=o("bert-generation"),KJe=o(" \u2014 "),ES=a("a"),ZJe=o("BertGenerationTokenizer"),eYe=o(" (Bert Generation model)"),oYe=l(),Fg=a("li"),mre=a("strong"),rYe=o("bert-japanese"),tYe=o(" \u2014 "),CS=a("a"),aYe=o("BertJapaneseTokenizer"),nYe=o(" (BertJapanese model)"),sYe=l(),Tg=a("li"),gre=a("strong"),lYe=o("bertweet"),iYe=o(" \u2014 "),wS=a("a"),dYe=o("BertweetTokenizer"),cYe=o(" (Bertweet model)"),fYe=l(),Pn=a("li"),hre=a("strong"),mYe=o("big_bird"),gYe=o(" \u2014 "),AS=a("a"),hYe=o("BigBirdTokenizer"),pYe=o(" or "),yS=a("a"),uYe=o("BigBirdTokenizerFast"),_Ye=o(" (BigBird model)"),bYe=l(),In=a("li"),pre=a("strong"),vYe=o("bigbird_pegasus"),FYe=o(" \u2014 "),LS=a("a"),TYe=o("PegasusTokenizer"),MYe=o(" or "),xS=a("a"),EYe=o("PegasusTokenizerFast"),CYe=o(" (BigBirdPegasus model)"),wYe=l(),qn=a("li"),ure=a("strong"),AYe=o("blenderbot"),yYe=o(" \u2014 "),$S=a("a"),LYe=o("BlenderbotTokenizer"),xYe=o(" or "),kS=a("a"),$Ye=o("BlenderbotTokenizerFast"),kYe=o(" (Blenderbot model)"),SYe=l(),Mg=a("li"),_re=a("strong"),RYe=o("blenderbot-small"),BYe=o(" \u2014 "),SS=a("a"),PYe=o("BlenderbotSmallTokenizer"),IYe=o(" (BlenderbotSmall model)"),qYe=l(),Eg=a("li"),bre=a("strong"),NYe=o("byt5"),jYe=o(" \u2014 "),RS=a("a"),DYe=o("ByT5Tokenizer"),GYe=o(" (ByT5 model)"),OYe=l(),Nn=a("li"),vre=a("strong"),VYe=o("camembert"),XYe=o(" \u2014 "),BS=a("a"),zYe=o("CamembertTokenizer"),QYe=o(" or "),PS=a("a"),WYe=o("CamembertTokenizerFast"),HYe=o(" (CamemBERT model)"),UYe=l(),Cg=a("li"),Fre=a("strong"),JYe=o("canine"),YYe=o(" \u2014 "),IS=a("a"),KYe=o("CanineTokenizer"),ZYe=o(" (Canine model)"),eKe=l(),jn=a("li"),Tre=a("strong"),oKe=o("clip"),rKe=o(" \u2014 "),qS=a("a"),tKe=o("CLIPTokenizer"),aKe=o(" or "),NS=a("a"),nKe=o("CLIPTokenizerFast"),sKe=o(" (CLIP model)"),lKe=l(),Dn=a("li"),Mre=a("strong"),iKe=o("convbert"),dKe=o(" \u2014 "),jS=a("a"),cKe=o("ConvBertTokenizer"),fKe=o(" or "),DS=a("a"),mKe=o("ConvBertTokenizerFast"),gKe=o(" (ConvBERT model)"),hKe=l(),Gn=a("li"),Ere=a("strong"),pKe=o("cpm"),uKe=o(" \u2014 "),GS=a("a"),_Ke=o("CpmTokenizer"),bKe=o(" or "),OS=a("a"),vKe=o("CpmTokenizerFast"),FKe=o(" (CPM model)"),TKe=l(),wg=a("li"),Cre=a("strong"),MKe=o("ctrl"),EKe=o(" \u2014 "),VS=a("a"),CKe=o("CTRLTokenizer"),wKe=o(" (CTRL model)"),AKe=l(),On=a("li"),wre=a("strong"),yKe=o("data2vec-text"),LKe=o(" \u2014 "),XS=a("a"),xKe=o("RobertaTokenizer"),$Ke=o(" or "),zS=a("a"),kKe=o("RobertaTokenizerFast"),SKe=o(" (Data2VecText model)"),RKe=l(),Vn=a("li"),Are=a("strong"),BKe=o("deberta"),PKe=o(" \u2014 "),QS=a("a"),IKe=o("DebertaTokenizer"),qKe=o(" or "),WS=a("a"),NKe=o("DebertaTokenizerFast"),jKe=o(" (DeBERTa model)"),DKe=l(),Xn=a("li"),yre=a("strong"),GKe=o("deberta-v2"),OKe=o(" \u2014 "),HS=a("a"),VKe=o("DebertaV2Tokenizer"),XKe=o(" or "),US=a("a"),zKe=o("DebertaV2TokenizerFast"),QKe=o(" (DeBERTa-v2 model)"),WKe=l(),zn=a("li"),Lre=a("strong"),HKe=o("distilbert"),UKe=o(" \u2014 "),JS=a("a"),JKe=o("DistilBertTokenizer"),YKe=o(" or "),YS=a("a"),KKe=o("DistilBertTokenizerFast"),ZKe=o(" (DistilBERT model)"),eZe=l(),Qn=a("li"),xre=a("strong"),oZe=o("dpr"),rZe=o(" \u2014 "),KS=a("a"),tZe=o("DPRQuestionEncoderTokenizer"),aZe=o(" or "),ZS=a("a"),nZe=o("DPRQuestionEncoderTokenizerFast"),sZe=o(" (DPR model)"),lZe=l(),Wn=a("li"),$re=a("strong"),iZe=o("electra"),dZe=o(" \u2014 "),eR=a("a"),cZe=o("ElectraTokenizer"),fZe=o(" or "),oR=a("a"),mZe=o("ElectraTokenizerFast"),gZe=o(" (ELECTRA model)"),hZe=l(),Ag=a("li"),kre=a("strong"),pZe=o("flaubert"),uZe=o(" \u2014 "),rR=a("a"),_Ze=o("FlaubertTokenizer"),bZe=o(" (FlauBERT model)"),vZe=l(),Hn=a("li"),Sre=a("strong"),FZe=o("fnet"),TZe=o(" \u2014 "),tR=a("a"),MZe=o("FNetTokenizer"),EZe=o(" or "),aR=a("a"),CZe=o("FNetTokenizerFast"),wZe=o(" (FNet model)"),AZe=l(),yg=a("li"),Rre=a("strong"),yZe=o("fsmt"),LZe=o(" \u2014 "),nR=a("a"),xZe=o("FSMTTokenizer"),$Ze=o(" (FairSeq Machine-Translation model)"),kZe=l(),Un=a("li"),Bre=a("strong"),SZe=o("funnel"),RZe=o(" \u2014 "),sR=a("a"),BZe=o("FunnelTokenizer"),PZe=o(" or "),lR=a("a"),IZe=o("FunnelTokenizerFast"),qZe=o(" (Funnel Transformer model)"),NZe=l(),Jn=a("li"),Pre=a("strong"),jZe=o("gpt2"),DZe=o(" \u2014 "),iR=a("a"),GZe=o("GPT2Tokenizer"),OZe=o(" or "),dR=a("a"),VZe=o("GPT2TokenizerFast"),XZe=o(" (OpenAI GPT-2 model)"),zZe=l(),Yn=a("li"),Ire=a("strong"),QZe=o("gpt_neo"),WZe=o(" \u2014 "),cR=a("a"),HZe=o("GPT2Tokenizer"),UZe=o(" or "),fR=a("a"),JZe=o("GPT2TokenizerFast"),YZe=o(" (GPT Neo model)"),KZe=l(),Kn=a("li"),qre=a("strong"),ZZe=o("gptj"),eeo=o(" \u2014 "),mR=a("a"),oeo=o("GPT2Tokenizer"),reo=o(" or "),gR=a("a"),teo=o("GPT2TokenizerFast"),aeo=o(" (GPT-J model)"),neo=l(),Zn=a("li"),Nre=a("strong"),seo=o("herbert"),leo=o(" \u2014 "),hR=a("a"),ieo=o("HerbertTokenizer"),deo=o(" or "),pR=a("a"),ceo=o("HerbertTokenizerFast"),feo=o(" (HerBERT model)"),meo=l(),Lg=a("li"),jre=a("strong"),geo=o("hubert"),heo=o(" \u2014 "),uR=a("a"),peo=o("Wav2Vec2CTCTokenizer"),ueo=o(" (Hubert model)"),_eo=l(),es=a("li"),Dre=a("strong"),beo=o("ibert"),veo=o(" \u2014 "),_R=a("a"),Feo=o("RobertaTokenizer"),Teo=o(" or "),bR=a("a"),Meo=o("RobertaTokenizerFast"),Eeo=o(" (I-BERT model)"),Ceo=l(),os=a("li"),Gre=a("strong"),weo=o("layoutlm"),Aeo=o(" \u2014 "),vR=a("a"),yeo=o("LayoutLMTokenizer"),Leo=o(" or "),FR=a("a"),xeo=o("LayoutLMTokenizerFast"),$eo=o(" (LayoutLM model)"),keo=l(),rs=a("li"),Ore=a("strong"),Seo=o("layoutlmv2"),Reo=o(" \u2014 "),TR=a("a"),Beo=o("LayoutLMv2Tokenizer"),Peo=o(" or "),MR=a("a"),Ieo=o("LayoutLMv2TokenizerFast"),qeo=o(" (LayoutLMv2 model)"),Neo=l(),ts=a("li"),Vre=a("strong"),jeo=o("layoutxlm"),Deo=o(" \u2014 "),ER=a("a"),Geo=o("LayoutXLMTokenizer"),Oeo=o(" or "),CR=a("a"),Veo=o("LayoutXLMTokenizerFast"),Xeo=o(" (LayoutXLM model)"),zeo=l(),as=a("li"),Xre=a("strong"),Qeo=o("led"),Weo=o(" \u2014 "),wR=a("a"),Heo=o("LEDTokenizer"),Ueo=o(" or "),AR=a("a"),Jeo=o("LEDTokenizerFast"),Yeo=o(" (LED model)"),Keo=l(),ns=a("li"),zre=a("strong"),Zeo=o("longformer"),eoo=o(" \u2014 "),yR=a("a"),ooo=o("LongformerTokenizer"),roo=o(" or "),LR=a("a"),too=o("LongformerTokenizerFast"),aoo=o(" (Longformer model)"),noo=l(),xg=a("li"),Qre=a("strong"),soo=o("luke"),loo=o(" \u2014 "),xR=a("a"),ioo=o("LukeTokenizer"),doo=o(" (LUKE model)"),coo=l(),ss=a("li"),Wre=a("strong"),foo=o("lxmert"),moo=o(" \u2014 "),$R=a("a"),goo=o("LxmertTokenizer"),hoo=o(" or "),kR=a("a"),poo=o("LxmertTokenizerFast"),uoo=o(" (LXMERT model)"),_oo=l(),$g=a("li"),Hre=a("strong"),boo=o("m2m_100"),voo=o(" \u2014 "),SR=a("a"),Foo=o("M2M100Tokenizer"),Too=o(" (M2M100 model)"),Moo=l(),kg=a("li"),Ure=a("strong"),Eoo=o("marian"),Coo=o(" \u2014 "),RR=a("a"),woo=o("MarianTokenizer"),Aoo=o(" (Marian model)"),yoo=l(),ls=a("li"),Jre=a("strong"),Loo=o("mbart"),xoo=o(" \u2014 "),BR=a("a"),$oo=o("MBartTokenizer"),koo=o(" or "),PR=a("a"),Soo=o("MBartTokenizerFast"),Roo=o(" (mBART model)"),Boo=l(),is=a("li"),Yre=a("strong"),Poo=o("mbart50"),Ioo=o(" \u2014 "),IR=a("a"),qoo=o("MBart50Tokenizer"),Noo=o(" or "),qR=a("a"),joo=o("MBart50TokenizerFast"),Doo=o(" (mBART-50 model)"),Goo=l(),ds=a("li"),Kre=a("strong"),Ooo=o("megatron-bert"),Voo=o(" \u2014 "),NR=a("a"),Xoo=o("BertTokenizer"),zoo=o(" or "),jR=a("a"),Qoo=o("BertTokenizerFast"),Woo=o(" (MegatronBert model)"),Hoo=l(),Sg=a("li"),Zre=a("strong"),Uoo=o("mluke"),Joo=o(" \u2014 "),DR=a("a"),Yoo=o("MLukeTokenizer"),Koo=o(" (mLUKE model)"),Zoo=l(),cs=a("li"),ete=a("strong"),ero=o("mobilebert"),oro=o(" \u2014 "),GR=a("a"),rro=o("MobileBertTokenizer"),tro=o(" or "),OR=a("a"),aro=o("MobileBertTokenizerFast"),nro=o(" (MobileBERT model)"),sro=l(),fs=a("li"),ote=a("strong"),lro=o("mpnet"),iro=o(" \u2014 "),VR=a("a"),dro=o("MPNetTokenizer"),cro=o(" or "),XR=a("a"),fro=o("MPNetTokenizerFast"),mro=o(" (MPNet model)"),gro=l(),ms=a("li"),rte=a("strong"),hro=o("mt5"),pro=o(" \u2014 "),zR=a("a"),uro=o("MT5Tokenizer"),_ro=o(" or "),QR=a("a"),bro=o("MT5TokenizerFast"),vro=o(" (mT5 model)"),Fro=l(),gs=a("li"),tte=a("strong"),Tro=o("nystromformer"),Mro=o(" \u2014 "),WR=a("a"),Ero=o("AlbertTokenizer"),Cro=o(" or "),HR=a("a"),wro=o("AlbertTokenizerFast"),Aro=o(" (Nystromformer model)"),yro=l(),hs=a("li"),ate=a("strong"),Lro=o("openai-gpt"),xro=o(" \u2014 "),UR=a("a"),$ro=o("OpenAIGPTTokenizer"),kro=o(" or "),JR=a("a"),Sro=o("OpenAIGPTTokenizerFast"),Rro=o(" (OpenAI GPT model)"),Bro=l(),ps=a("li"),nte=a("strong"),Pro=o("pegasus"),Iro=o(" \u2014 "),YR=a("a"),qro=o("PegasusTokenizer"),Nro=o(" or "),KR=a("a"),jro=o("PegasusTokenizerFast"),Dro=o(" (Pegasus model)"),Gro=l(),Rg=a("li"),ste=a("strong"),Oro=o("perceiver"),Vro=o(" \u2014 "),ZR=a("a"),Xro=o("PerceiverTokenizer"),zro=o(" (Perceiver model)"),Qro=l(),Bg=a("li"),lte=a("strong"),Wro=o("phobert"),Hro=o(" \u2014 "),eB=a("a"),Uro=o("PhobertTokenizer"),Jro=o(" (PhoBERT model)"),Yro=l(),Pg=a("li"),ite=a("strong"),Kro=o("plbart"),Zro=o(" \u2014 "),oB=a("a"),eto=o("PLBartTokenizer"),oto=o(" (PLBart model)"),rto=l(),Ig=a("li"),dte=a("strong"),tto=o("prophetnet"),ato=o(" \u2014 "),rB=a("a"),nto=o("ProphetNetTokenizer"),sto=o(" (ProphetNet model)"),lto=l(),us=a("li"),cte=a("strong"),ito=o("qdqbert"),dto=o(" \u2014 "),tB=a("a"),cto=o("BertTokenizer"),fto=o(" or "),aB=a("a"),mto=o("BertTokenizerFast"),gto=o(" (QDQBert model)"),hto=l(),qg=a("li"),fte=a("strong"),pto=o("rag"),uto=o(" \u2014 "),nB=a("a"),_to=o("RagTokenizer"),bto=o(" (RAG model)"),vto=l(),_s=a("li"),mte=a("strong"),Fto=o("realm"),Tto=o(" \u2014 "),sB=a("a"),Mto=o("RealmTokenizer"),Eto=o(" or "),lB=a("a"),Cto=o("RealmTokenizerFast"),wto=o(" (Realm model)"),Ato=l(),bs=a("li"),gte=a("strong"),yto=o("reformer"),Lto=o(" \u2014 "),iB=a("a"),xto=o("ReformerTokenizer"),$to=o(" or "),dB=a("a"),kto=o("ReformerTokenizerFast"),Sto=o(" (Reformer model)"),Rto=l(),vs=a("li"),hte=a("strong"),Bto=o("rembert"),Pto=o(" \u2014 "),cB=a("a"),Ito=o("RemBertTokenizer"),qto=o(" or "),fB=a("a"),Nto=o("RemBertTokenizerFast"),jto=o(" (RemBERT model)"),Dto=l(),Fs=a("li"),pte=a("strong"),Gto=o("retribert"),Oto=o(" \u2014 "),mB=a("a"),Vto=o("RetriBertTokenizer"),Xto=o(" or "),gB=a("a"),zto=o("RetriBertTokenizerFast"),Qto=o(" (RetriBERT model)"),Wto=l(),Ts=a("li"),ute=a("strong"),Hto=o("roberta"),Uto=o(" \u2014 "),hB=a("a"),Jto=o("RobertaTokenizer"),Yto=o(" or "),pB=a("a"),Kto=o("RobertaTokenizerFast"),Zto=o(" (RoBERTa model)"),eao=l(),Ms=a("li"),_te=a("strong"),oao=o("roformer"),rao=o(" \u2014 "),uB=a("a"),tao=o("RoFormerTokenizer"),aao=o(" or "),_B=a("a"),nao=o("RoFormerTokenizerFast"),sao=o(" (RoFormer model)"),lao=l(),Ng=a("li"),bte=a("strong"),iao=o("speech_to_text"),dao=o(" \u2014 "),bB=a("a"),cao=o("Speech2TextTokenizer"),fao=o(" (Speech2Text model)"),mao=l(),jg=a("li"),vte=a("strong"),gao=o("speech_to_text_2"),hao=o(" \u2014 "),vB=a("a"),pao=o("Speech2Text2Tokenizer"),uao=o(" (Speech2Text2 model)"),_ao=l(),Es=a("li"),Fte=a("strong"),bao=o("splinter"),vao=o(" \u2014 "),FB=a("a"),Fao=o("SplinterTokenizer"),Tao=o(" or "),TB=a("a"),Mao=o("SplinterTokenizerFast"),Eao=o(" (Splinter model)"),Cao=l(),Cs=a("li"),Tte=a("strong"),wao=o("squeezebert"),Aao=o(" \u2014 "),MB=a("a"),yao=o("SqueezeBertTokenizer"),Lao=o(" or "),EB=a("a"),xao=o("SqueezeBertTokenizerFast"),$ao=o(" (SqueezeBERT model)"),kao=l(),ws=a("li"),Mte=a("strong"),Sao=o("t5"),Rao=o(" \u2014 "),CB=a("a"),Bao=o("T5Tokenizer"),Pao=o(" or "),wB=a("a"),Iao=o("T5TokenizerFast"),qao=o(" (T5 model)"),Nao=l(),Dg=a("li"),Ete=a("strong"),jao=o("tapas"),Dao=o(" \u2014 "),AB=a("a"),Gao=o("TapasTokenizer"),Oao=o(" (TAPAS model)"),Vao=l(),Gg=a("li"),Cte=a("strong"),Xao=o("tapex"),zao=o(" \u2014 "),yB=a("a"),Qao=o("TapexTokenizer"),Wao=o(" (TAPEX model)"),Hao=l(),Og=a("li"),wte=a("strong"),Uao=o("transfo-xl"),Jao=o(" \u2014 "),LB=a("a"),Yao=o("TransfoXLTokenizer"),Kao=o(" (Transformer-XL model)"),Zao=l(),As=a("li"),Ate=a("strong"),eno=o("visual_bert"),ono=o(" \u2014 "),xB=a("a"),rno=o("BertTokenizer"),tno=o(" or "),$B=a("a"),ano=o("BertTokenizerFast"),nno=o(" (VisualBert model)"),sno=l(),Vg=a("li"),yte=a("strong"),lno=o("wav2vec2"),ino=o(" \u2014 "),kB=a("a"),dno=o("Wav2Vec2CTCTokenizer"),cno=o(" (Wav2Vec2 model)"),fno=l(),Xg=a("li"),Lte=a("strong"),mno=o("wav2vec2_phoneme"),gno=o(" \u2014 "),SB=a("a"),hno=o("Wav2Vec2PhonemeCTCTokenizer"),pno=o(" (Wav2Vec2Phoneme model)"),uno=l(),ys=a("li"),xte=a("strong"),_no=o("xglm"),bno=o(" \u2014 "),RB=a("a"),vno=o("XGLMTokenizer"),Fno=o(" or "),BB=a("a"),Tno=o("XGLMTokenizerFast"),Mno=o(" (XGLM model)"),Eno=l(),zg=a("li"),$te=a("strong"),Cno=o("xlm"),wno=o(" \u2014 "),PB=a("a"),Ano=o("XLMTokenizer"),yno=o(" (XLM model)"),Lno=l(),Qg=a("li"),kte=a("strong"),xno=o("xlm-prophetnet"),$no=o(" \u2014 "),IB=a("a"),kno=o("XLMProphetNetTokenizer"),Sno=o(" (XLMProphetNet model)"),Rno=l(),Ls=a("li"),Ste=a("strong"),Bno=o("xlm-roberta"),Pno=o(" \u2014 "),qB=a("a"),Ino=o("XLMRobertaTokenizer"),qno=o(" or "),NB=a("a"),Nno=o("XLMRobertaTokenizerFast"),jno=o(" (XLM-RoBERTa model)"),Dno=l(),xs=a("li"),Rte=a("strong"),Gno=o("xlm-roberta-xl"),Ono=o(" \u2014 "),jB=a("a"),Vno=o("RobertaTokenizer"),Xno=o(" or "),DB=a("a"),zno=o("RobertaTokenizerFast"),Qno=o(" (XLM-RoBERTa-XL model)"),Wno=l(),$s=a("li"),Bte=a("strong"),Hno=o("xlnet"),Uno=o(" \u2014 "),GB=a("a"),Jno=o("XLNetTokenizer"),Yno=o(" or "),OB=a("a"),Kno=o("XLNetTokenizerFast"),Zno=o(" (XLNet model)"),eso=l(),ks=a("li"),Pte=a("strong"),oso=o("yoso"),rso=o(" \u2014 "),VB=a("a"),tso=o("AlbertTokenizer"),aso=o(" or "),XB=a("a"),nso=o("AlbertTokenizerFast"),sso=o(" (YOSO model)"),lso=l(),F(Wg.$$.fragment),iso=l(),Hg=a("div"),F(sA.$$.fragment),dso=l(),Ite=a("p"),cso=o("Register a new tokenizer in this mapping."),IPe=l(),bi=a("h2"),Ug=a("a"),qte=a("span"),F(lA.$$.fragment),fso=l(),Nte=a("span"),mso=o("AutoFeatureExtractor"),qPe=l(),Ao=a("div"),F(iA.$$.fragment),gso=l(),dA=a("p"),hso=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),zB=a("a"),pso=o("AutoFeatureExtractor.from_pretrained()"),uso=o(" class method."),_so=l(),cA=a("p"),bso=o("This class cannot be instantiated directly using "),jte=a("code"),vso=o("__init__()"),Fso=o(" (throws an error)."),Tso=l(),Qe=a("div"),F(fA.$$.fragment),Mso=l(),Dte=a("p"),Eso=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),Cso=l(),wa=a("p"),wso=o("The feature extractor class to instantiate is selected based on the "),Gte=a("code"),Aso=o("model_type"),yso=o(` property of the config object
(either passed as an argument or loaded from `),Ote=a("code"),Lso=o("pretrained_model_name_or_path"),xso=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Vte=a("code"),$so=o("pretrained_model_name_or_path"),kso=o(":"),Sso=l(),oe=a("ul"),Jg=a("li"),Xte=a("strong"),Rso=o("beit"),Bso=o(" \u2014 "),QB=a("a"),Pso=o("BeitFeatureExtractor"),Iso=o(" (BEiT model)"),qso=l(),Yg=a("li"),zte=a("strong"),Nso=o("clip"),jso=o(" \u2014 "),WB=a("a"),Dso=o("CLIPFeatureExtractor"),Gso=o(" (CLIP model)"),Oso=l(),Kg=a("li"),Qte=a("strong"),Vso=o("convnext"),Xso=o(" \u2014 "),HB=a("a"),zso=o("ConvNextFeatureExtractor"),Qso=o(" (ConvNext model)"),Wso=l(),Zg=a("li"),Wte=a("strong"),Hso=o("data2vec-audio"),Uso=o(" \u2014 "),UB=a("a"),Jso=o("Wav2Vec2FeatureExtractor"),Yso=o(" (Data2VecAudio model)"),Kso=l(),eh=a("li"),Hte=a("strong"),Zso=o("data2vec-vision"),elo=o(" \u2014 "),JB=a("a"),olo=o("BeitFeatureExtractor"),rlo=o(" (Data2VecVision model)"),tlo=l(),oh=a("li"),Ute=a("strong"),alo=o("deit"),nlo=o(" \u2014 "),YB=a("a"),slo=o("DeiTFeatureExtractor"),llo=o(" (DeiT model)"),ilo=l(),rh=a("li"),Jte=a("strong"),dlo=o("detr"),clo=o(" \u2014 "),KB=a("a"),flo=o("DetrFeatureExtractor"),mlo=o(" (DETR model)"),glo=l(),th=a("li"),Yte=a("strong"),hlo=o("dpt"),plo=o(" \u2014 "),ZB=a("a"),ulo=o("DPTFeatureExtractor"),_lo=o(" (DPT model)"),blo=l(),ah=a("li"),Kte=a("strong"),vlo=o("flava"),Flo=o(" \u2014 "),eP=a("a"),Tlo=o("FlavaFeatureExtractor"),Mlo=o(" (Flava model)"),Elo=l(),nh=a("li"),Zte=a("strong"),Clo=o("glpn"),wlo=o(" \u2014 "),oP=a("a"),Alo=o("GLPNFeatureExtractor"),ylo=o(" (GLPN model)"),Llo=l(),sh=a("li"),eae=a("strong"),xlo=o("hubert"),$lo=o(" \u2014 "),rP=a("a"),klo=o("Wav2Vec2FeatureExtractor"),Slo=o(" (Hubert model)"),Rlo=l(),lh=a("li"),oae=a("strong"),Blo=o("layoutlmv2"),Plo=o(" \u2014 "),tP=a("a"),Ilo=o("LayoutLMv2FeatureExtractor"),qlo=o(" (LayoutLMv2 model)"),Nlo=l(),ih=a("li"),rae=a("strong"),jlo=o("maskformer"),Dlo=o(" \u2014 "),aP=a("a"),Glo=o("MaskFormerFeatureExtractor"),Olo=o(" (MaskFormer model)"),Vlo=l(),dh=a("li"),tae=a("strong"),Xlo=o("perceiver"),zlo=o(" \u2014 "),nP=a("a"),Qlo=o("PerceiverFeatureExtractor"),Wlo=o(" (Perceiver model)"),Hlo=l(),ch=a("li"),aae=a("strong"),Ulo=o("poolformer"),Jlo=o(" \u2014 "),sP=a("a"),Ylo=o("PoolFormerFeatureExtractor"),Klo=o(" (PoolFormer model)"),Zlo=l(),fh=a("li"),nae=a("strong"),eio=o("regnet"),oio=o(" \u2014 "),lP=a("a"),rio=o("ConvNextFeatureExtractor"),tio=o(" (RegNet model)"),aio=l(),mh=a("li"),sae=a("strong"),nio=o("resnet"),sio=o(" \u2014 "),iP=a("a"),lio=o("ConvNextFeatureExtractor"),iio=o(" (ResNet model)"),dio=l(),gh=a("li"),lae=a("strong"),cio=o("segformer"),fio=o(" \u2014 "),dP=a("a"),mio=o("SegformerFeatureExtractor"),gio=o(" (SegFormer model)"),hio=l(),hh=a("li"),iae=a("strong"),pio=o("speech_to_text"),uio=o(" \u2014 "),cP=a("a"),_io=o("Speech2TextFeatureExtractor"),bio=o(" (Speech2Text model)"),vio=l(),ph=a("li"),dae=a("strong"),Fio=o("swin"),Tio=o(" \u2014 "),fP=a("a"),Mio=o("ViTFeatureExtractor"),Eio=o(" (Swin model)"),Cio=l(),uh=a("li"),cae=a("strong"),wio=o("van"),Aio=o(" \u2014 "),mP=a("a"),yio=o("ConvNextFeatureExtractor"),Lio=o(" (VAN model)"),xio=l(),_h=a("li"),fae=a("strong"),$io=o("vit"),kio=o(" \u2014 "),gP=a("a"),Sio=o("ViTFeatureExtractor"),Rio=o(" (ViT model)"),Bio=l(),bh=a("li"),mae=a("strong"),Pio=o("vit_mae"),Iio=o(" \u2014 "),hP=a("a"),qio=o("ViTFeatureExtractor"),Nio=o(" (ViTMAE model)"),jio=l(),vh=a("li"),gae=a("strong"),Dio=o("wav2vec2"),Gio=o(" \u2014 "),pP=a("a"),Oio=o("Wav2Vec2FeatureExtractor"),Vio=o(" (Wav2Vec2 model)"),Xio=l(),Fh=a("li"),hae=a("strong"),zio=o("yolos"),Qio=o(" \u2014 "),uP=a("a"),Wio=o("YolosFeatureExtractor"),Hio=o(" (YOLOS model)"),Uio=l(),F(Th.$$.fragment),Jio=l(),F(Mh.$$.fragment),Yio=l(),Eh=a("div"),F(mA.$$.fragment),Kio=l(),pae=a("p"),Zio=o("Register a new feature extractor for this class."),NPe=l(),vi=a("h2"),Ch=a("a"),uae=a("span"),F(gA.$$.fragment),edo=l(),_ae=a("span"),odo=o("AutoProcessor"),jPe=l(),yo=a("div"),F(hA.$$.fragment),rdo=l(),pA=a("p"),tdo=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),_P=a("a"),ado=o("AutoProcessor.from_pretrained()"),ndo=o(" class method."),sdo=l(),uA=a("p"),ldo=o("This class cannot be instantiated directly using "),bae=a("code"),ido=o("__init__()"),ddo=o(" (throws an error)."),cdo=l(),We=a("div"),F(_A.$$.fragment),fdo=l(),vae=a("p"),mdo=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),gdo=l(),Fi=a("p"),hdo=o("The processor class to instantiate is selected based on the "),Fae=a("code"),pdo=o("model_type"),udo=o(` property of the config object (either
passed as an argument or loaded from `),Tae=a("code"),_do=o("pretrained_model_name_or_path"),bdo=o(" if possible):"),vdo=l(),be=a("ul"),wh=a("li"),Mae=a("strong"),Fdo=o("clip"),Tdo=o(" \u2014 "),bP=a("a"),Mdo=o("CLIPProcessor"),Edo=o(" (CLIP model)"),Cdo=l(),Ah=a("li"),Eae=a("strong"),wdo=o("flava"),Ado=o(" \u2014 "),Cae=a("code"),ydo=o("FLAVAProcessor"),Ldo=o(" (Flava model)"),xdo=l(),yh=a("li"),wae=a("strong"),$do=o("layoutlmv2"),kdo=o(" \u2014 "),vP=a("a"),Sdo=o("LayoutLMv2Processor"),Rdo=o(" (LayoutLMv2 model)"),Bdo=l(),Lh=a("li"),Aae=a("strong"),Pdo=o("layoutxlm"),Ido=o(" \u2014 "),FP=a("a"),qdo=o("LayoutXLMProcessor"),Ndo=o(" (LayoutXLM model)"),jdo=l(),xh=a("li"),yae=a("strong"),Ddo=o("sew"),Gdo=o(" \u2014 "),TP=a("a"),Odo=o("Wav2Vec2Processor"),Vdo=o(" (SEW model)"),Xdo=l(),$h=a("li"),Lae=a("strong"),zdo=o("sew-d"),Qdo=o(" \u2014 "),MP=a("a"),Wdo=o("Wav2Vec2Processor"),Hdo=o(" (SEW-D model)"),Udo=l(),kh=a("li"),xae=a("strong"),Jdo=o("speech_to_text"),Ydo=o(" \u2014 "),EP=a("a"),Kdo=o("Speech2TextProcessor"),Zdo=o(" (Speech2Text model)"),eco=l(),Sh=a("li"),$ae=a("strong"),oco=o("speech_to_text_2"),rco=o(" \u2014 "),CP=a("a"),tco=o("Speech2Text2Processor"),aco=o(" (Speech2Text2 model)"),nco=l(),Rh=a("li"),kae=a("strong"),sco=o("trocr"),lco=o(" \u2014 "),wP=a("a"),ico=o("TrOCRProcessor"),dco=o(" (TrOCR model)"),cco=l(),Bh=a("li"),Sae=a("strong"),fco=o("unispeech"),mco=o(" \u2014 "),AP=a("a"),gco=o("Wav2Vec2Processor"),hco=o(" (UniSpeech model)"),pco=l(),Ph=a("li"),Rae=a("strong"),uco=o("unispeech-sat"),_co=o(" \u2014 "),yP=a("a"),bco=o("Wav2Vec2Processor"),vco=o(" (UniSpeechSat model)"),Fco=l(),Ih=a("li"),Bae=a("strong"),Tco=o("vilt"),Mco=o(" \u2014 "),LP=a("a"),Eco=o("ViltProcessor"),Cco=o(" (ViLT model)"),wco=l(),qh=a("li"),Pae=a("strong"),Aco=o("vision-text-dual-encoder"),yco=o(" \u2014 "),xP=a("a"),Lco=o("VisionTextDualEncoderProcessor"),xco=o(" (VisionTextDualEncoder model)"),$co=l(),Nh=a("li"),Iae=a("strong"),kco=o("wav2vec2"),Sco=o(" \u2014 "),$P=a("a"),Rco=o("Wav2Vec2Processor"),Bco=o(" (Wav2Vec2 model)"),Pco=l(),jh=a("li"),qae=a("strong"),Ico=o("wavlm"),qco=o(" \u2014 "),kP=a("a"),Nco=o("Wav2Vec2Processor"),jco=o(" (WavLM model)"),Dco=l(),F(Dh.$$.fragment),Gco=l(),F(Gh.$$.fragment),Oco=l(),Oh=a("div"),F(bA.$$.fragment),Vco=l(),Nae=a("p"),Xco=o("Register a new processor for this class."),DPe=l(),Ti=a("h2"),Vh=a("a"),jae=a("span"),F(vA.$$.fragment),zco=l(),Dae=a("span"),Qco=o("AutoModel"),GPe=l(),Lo=a("div"),F(FA.$$.fragment),Wco=l(),Mi=a("p"),Hco=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),SP=a("a"),Uco=o("from_pretrained()"),Jco=o(" class method or the "),RP=a("a"),Yco=o("from_config()"),Kco=o(` class
method.`),Zco=l(),TA=a("p"),efo=o("This class cannot be instantiated directly using "),Gae=a("code"),ofo=o("__init__()"),rfo=o(" (throws an error)."),tfo=l(),ot=a("div"),F(MA.$$.fragment),afo=l(),Oae=a("p"),nfo=o("Instantiates one of the base model classes of the library from a configuration."),sfo=l(),Ei=a("p"),lfo=o(`Note:
Loading a model from its configuration file does `),Vae=a("strong"),ifo=o("not"),dfo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),BP=a("a"),cfo=o("from_pretrained()"),ffo=o(" to load the model weights."),mfo=l(),F(Xh.$$.fragment),gfo=l(),He=a("div"),F(EA.$$.fragment),hfo=l(),Xae=a("p"),pfo=o("Instantiate one of the base model classes of the library from a pretrained model."),ufo=l(),Aa=a("p"),_fo=o("The model class to instantiate is selected based on the "),zae=a("code"),bfo=o("model_type"),vfo=o(` property of the config object (either
passed as an argument or loaded from `),Qae=a("code"),Ffo=o("pretrained_model_name_or_path"),Tfo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wae=a("code"),Mfo=o("pretrained_model_name_or_path"),Efo=o(":"),Cfo=l(),x=a("ul"),zh=a("li"),Hae=a("strong"),wfo=o("albert"),Afo=o(" \u2014 "),PP=a("a"),yfo=o("AlbertModel"),Lfo=o(" (ALBERT model)"),xfo=l(),Qh=a("li"),Uae=a("strong"),$fo=o("bart"),kfo=o(" \u2014 "),IP=a("a"),Sfo=o("BartModel"),Rfo=o(" (BART model)"),Bfo=l(),Wh=a("li"),Jae=a("strong"),Pfo=o("beit"),Ifo=o(" \u2014 "),qP=a("a"),qfo=o("BeitModel"),Nfo=o(" (BEiT model)"),jfo=l(),Hh=a("li"),Yae=a("strong"),Dfo=o("bert"),Gfo=o(" \u2014 "),NP=a("a"),Ofo=o("BertModel"),Vfo=o(" (BERT model)"),Xfo=l(),Uh=a("li"),Kae=a("strong"),zfo=o("bert-generation"),Qfo=o(" \u2014 "),jP=a("a"),Wfo=o("BertGenerationEncoder"),Hfo=o(" (Bert Generation model)"),Ufo=l(),Jh=a("li"),Zae=a("strong"),Jfo=o("big_bird"),Yfo=o(" \u2014 "),DP=a("a"),Kfo=o("BigBirdModel"),Zfo=o(" (BigBird model)"),emo=l(),Yh=a("li"),ene=a("strong"),omo=o("bigbird_pegasus"),rmo=o(" \u2014 "),GP=a("a"),tmo=o("BigBirdPegasusModel"),amo=o(" (BigBirdPegasus model)"),nmo=l(),Kh=a("li"),one=a("strong"),smo=o("blenderbot"),lmo=o(" \u2014 "),OP=a("a"),imo=o("BlenderbotModel"),dmo=o(" (Blenderbot model)"),cmo=l(),Zh=a("li"),rne=a("strong"),fmo=o("blenderbot-small"),mmo=o(" \u2014 "),VP=a("a"),gmo=o("BlenderbotSmallModel"),hmo=o(" (BlenderbotSmall model)"),pmo=l(),ep=a("li"),tne=a("strong"),umo=o("camembert"),_mo=o(" \u2014 "),XP=a("a"),bmo=o("CamembertModel"),vmo=o(" (CamemBERT model)"),Fmo=l(),op=a("li"),ane=a("strong"),Tmo=o("canine"),Mmo=o(" \u2014 "),zP=a("a"),Emo=o("CanineModel"),Cmo=o(" (Canine model)"),wmo=l(),rp=a("li"),nne=a("strong"),Amo=o("clip"),ymo=o(" \u2014 "),QP=a("a"),Lmo=o("CLIPModel"),xmo=o(" (CLIP model)"),$mo=l(),tp=a("li"),sne=a("strong"),kmo=o("convbert"),Smo=o(" \u2014 "),WP=a("a"),Rmo=o("ConvBertModel"),Bmo=o(" (ConvBERT model)"),Pmo=l(),ap=a("li"),lne=a("strong"),Imo=o("convnext"),qmo=o(" \u2014 "),HP=a("a"),Nmo=o("ConvNextModel"),jmo=o(" (ConvNext model)"),Dmo=l(),np=a("li"),ine=a("strong"),Gmo=o("ctrl"),Omo=o(" \u2014 "),UP=a("a"),Vmo=o("CTRLModel"),Xmo=o(" (CTRL model)"),zmo=l(),sp=a("li"),dne=a("strong"),Qmo=o("data2vec-audio"),Wmo=o(" \u2014 "),JP=a("a"),Hmo=o("Data2VecAudioModel"),Umo=o(" (Data2VecAudio model)"),Jmo=l(),lp=a("li"),cne=a("strong"),Ymo=o("data2vec-text"),Kmo=o(" \u2014 "),YP=a("a"),Zmo=o("Data2VecTextModel"),ego=o(" (Data2VecText model)"),ogo=l(),ip=a("li"),fne=a("strong"),rgo=o("data2vec-vision"),tgo=o(" \u2014 "),KP=a("a"),ago=o("Data2VecVisionModel"),ngo=o(" (Data2VecVision model)"),sgo=l(),dp=a("li"),mne=a("strong"),lgo=o("deberta"),igo=o(" \u2014 "),ZP=a("a"),dgo=o("DebertaModel"),cgo=o(" (DeBERTa model)"),fgo=l(),cp=a("li"),gne=a("strong"),mgo=o("deberta-v2"),ggo=o(" \u2014 "),eI=a("a"),hgo=o("DebertaV2Model"),pgo=o(" (DeBERTa-v2 model)"),ugo=l(),fp=a("li"),hne=a("strong"),_go=o("decision_transformer"),bgo=o(" \u2014 "),oI=a("a"),vgo=o("DecisionTransformerModel"),Fgo=o(" (Decision Transformer model)"),Tgo=l(),mp=a("li"),pne=a("strong"),Mgo=o("deit"),Ego=o(" \u2014 "),rI=a("a"),Cgo=o("DeiTModel"),wgo=o(" (DeiT model)"),Ago=l(),gp=a("li"),une=a("strong"),ygo=o("detr"),Lgo=o(" \u2014 "),tI=a("a"),xgo=o("DetrModel"),$go=o(" (DETR model)"),kgo=l(),hp=a("li"),_ne=a("strong"),Sgo=o("distilbert"),Rgo=o(" \u2014 "),aI=a("a"),Bgo=o("DistilBertModel"),Pgo=o(" (DistilBERT model)"),Igo=l(),pp=a("li"),bne=a("strong"),qgo=o("dpr"),Ngo=o(" \u2014 "),nI=a("a"),jgo=o("DPRQuestionEncoder"),Dgo=o(" (DPR model)"),Ggo=l(),up=a("li"),vne=a("strong"),Ogo=o("dpt"),Vgo=o(" \u2014 "),sI=a("a"),Xgo=o("DPTModel"),zgo=o(" (DPT model)"),Qgo=l(),_p=a("li"),Fne=a("strong"),Wgo=o("electra"),Hgo=o(" \u2014 "),lI=a("a"),Ugo=o("ElectraModel"),Jgo=o(" (ELECTRA model)"),Ygo=l(),bp=a("li"),Tne=a("strong"),Kgo=o("flaubert"),Zgo=o(" \u2014 "),iI=a("a"),eho=o("FlaubertModel"),oho=o(" (FlauBERT model)"),rho=l(),vp=a("li"),Mne=a("strong"),tho=o("flava"),aho=o(" \u2014 "),dI=a("a"),nho=o("FlavaModel"),sho=o(" (Flava model)"),lho=l(),Fp=a("li"),Ene=a("strong"),iho=o("fnet"),dho=o(" \u2014 "),cI=a("a"),cho=o("FNetModel"),fho=o(" (FNet model)"),mho=l(),Tp=a("li"),Cne=a("strong"),gho=o("fsmt"),hho=o(" \u2014 "),fI=a("a"),pho=o("FSMTModel"),uho=o(" (FairSeq Machine-Translation model)"),_ho=l(),Ss=a("li"),wne=a("strong"),bho=o("funnel"),vho=o(" \u2014 "),mI=a("a"),Fho=o("FunnelModel"),Tho=o(" or "),gI=a("a"),Mho=o("FunnelBaseModel"),Eho=o(" (Funnel Transformer model)"),Cho=l(),Mp=a("li"),Ane=a("strong"),who=o("glpn"),Aho=o(" \u2014 "),hI=a("a"),yho=o("GLPNModel"),Lho=o(" (GLPN model)"),xho=l(),Ep=a("li"),yne=a("strong"),$ho=o("gpt2"),kho=o(" \u2014 "),pI=a("a"),Sho=o("GPT2Model"),Rho=o(" (OpenAI GPT-2 model)"),Bho=l(),Cp=a("li"),Lne=a("strong"),Pho=o("gpt_neo"),Iho=o(" \u2014 "),uI=a("a"),qho=o("GPTNeoModel"),Nho=o(" (GPT Neo model)"),jho=l(),wp=a("li"),xne=a("strong"),Dho=o("gptj"),Gho=o(" \u2014 "),_I=a("a"),Oho=o("GPTJModel"),Vho=o(" (GPT-J model)"),Xho=l(),Ap=a("li"),$ne=a("strong"),zho=o("hubert"),Qho=o(" \u2014 "),bI=a("a"),Who=o("HubertModel"),Hho=o(" (Hubert model)"),Uho=l(),yp=a("li"),kne=a("strong"),Jho=o("ibert"),Yho=o(" \u2014 "),vI=a("a"),Kho=o("IBertModel"),Zho=o(" (I-BERT model)"),epo=l(),Lp=a("li"),Sne=a("strong"),opo=o("imagegpt"),rpo=o(" \u2014 "),FI=a("a"),tpo=o("ImageGPTModel"),apo=o(" (ImageGPT model)"),npo=l(),xp=a("li"),Rne=a("strong"),spo=o("layoutlm"),lpo=o(" \u2014 "),TI=a("a"),ipo=o("LayoutLMModel"),dpo=o(" (LayoutLM model)"),cpo=l(),$p=a("li"),Bne=a("strong"),fpo=o("layoutlmv2"),mpo=o(" \u2014 "),MI=a("a"),gpo=o("LayoutLMv2Model"),hpo=o(" (LayoutLMv2 model)"),ppo=l(),kp=a("li"),Pne=a("strong"),upo=o("led"),_po=o(" \u2014 "),EI=a("a"),bpo=o("LEDModel"),vpo=o(" (LED model)"),Fpo=l(),Sp=a("li"),Ine=a("strong"),Tpo=o("longformer"),Mpo=o(" \u2014 "),CI=a("a"),Epo=o("LongformerModel"),Cpo=o(" (Longformer model)"),wpo=l(),Rp=a("li"),qne=a("strong"),Apo=o("luke"),ypo=o(" \u2014 "),wI=a("a"),Lpo=o("LukeModel"),xpo=o(" (LUKE model)"),$po=l(),Bp=a("li"),Nne=a("strong"),kpo=o("lxmert"),Spo=o(" \u2014 "),AI=a("a"),Rpo=o("LxmertModel"),Bpo=o(" (LXMERT model)"),Ppo=l(),Pp=a("li"),jne=a("strong"),Ipo=o("m2m_100"),qpo=o(" \u2014 "),yI=a("a"),Npo=o("M2M100Model"),jpo=o(" (M2M100 model)"),Dpo=l(),Ip=a("li"),Dne=a("strong"),Gpo=o("marian"),Opo=o(" \u2014 "),LI=a("a"),Vpo=o("MarianModel"),Xpo=o(" (Marian model)"),zpo=l(),qp=a("li"),Gne=a("strong"),Qpo=o("maskformer"),Wpo=o(" \u2014 "),xI=a("a"),Hpo=o("MaskFormerModel"),Upo=o(" (MaskFormer model)"),Jpo=l(),Np=a("li"),One=a("strong"),Ypo=o("mbart"),Kpo=o(" \u2014 "),$I=a("a"),Zpo=o("MBartModel"),euo=o(" (mBART model)"),ouo=l(),jp=a("li"),Vne=a("strong"),ruo=o("megatron-bert"),tuo=o(" \u2014 "),kI=a("a"),auo=o("MegatronBertModel"),nuo=o(" (MegatronBert model)"),suo=l(),Dp=a("li"),Xne=a("strong"),luo=o("mobilebert"),iuo=o(" \u2014 "),SI=a("a"),duo=o("MobileBertModel"),cuo=o(" (MobileBERT model)"),fuo=l(),Gp=a("li"),zne=a("strong"),muo=o("mpnet"),guo=o(" \u2014 "),RI=a("a"),huo=o("MPNetModel"),puo=o(" (MPNet model)"),uuo=l(),Op=a("li"),Qne=a("strong"),_uo=o("mt5"),buo=o(" \u2014 "),BI=a("a"),vuo=o("MT5Model"),Fuo=o(" (mT5 model)"),Tuo=l(),Vp=a("li"),Wne=a("strong"),Muo=o("nystromformer"),Euo=o(" \u2014 "),PI=a("a"),Cuo=o("NystromformerModel"),wuo=o(" (Nystromformer model)"),Auo=l(),Xp=a("li"),Hne=a("strong"),yuo=o("openai-gpt"),Luo=o(" \u2014 "),II=a("a"),xuo=o("OpenAIGPTModel"),$uo=o(" (OpenAI GPT model)"),kuo=l(),zp=a("li"),Une=a("strong"),Suo=o("pegasus"),Ruo=o(" \u2014 "),qI=a("a"),Buo=o("PegasusModel"),Puo=o(" (Pegasus model)"),Iuo=l(),Qp=a("li"),Jne=a("strong"),quo=o("perceiver"),Nuo=o(" \u2014 "),NI=a("a"),juo=o("PerceiverModel"),Duo=o(" (Perceiver model)"),Guo=l(),Wp=a("li"),Yne=a("strong"),Ouo=o("plbart"),Vuo=o(" \u2014 "),jI=a("a"),Xuo=o("PLBartModel"),zuo=o(" (PLBart model)"),Quo=l(),Hp=a("li"),Kne=a("strong"),Wuo=o("poolformer"),Huo=o(" \u2014 "),DI=a("a"),Uuo=o("PoolFormerModel"),Juo=o(" (PoolFormer model)"),Yuo=l(),Up=a("li"),Zne=a("strong"),Kuo=o("prophetnet"),Zuo=o(" \u2014 "),GI=a("a"),e_o=o("ProphetNetModel"),o_o=o(" (ProphetNet model)"),r_o=l(),Jp=a("li"),ese=a("strong"),t_o=o("qdqbert"),a_o=o(" \u2014 "),OI=a("a"),n_o=o("QDQBertModel"),s_o=o(" (QDQBert model)"),l_o=l(),Yp=a("li"),ose=a("strong"),i_o=o("reformer"),d_o=o(" \u2014 "),VI=a("a"),c_o=o("ReformerModel"),f_o=o(" (Reformer model)"),m_o=l(),Kp=a("li"),rse=a("strong"),g_o=o("regnet"),h_o=o(" \u2014 "),XI=a("a"),p_o=o("RegNetModel"),u_o=o(" (RegNet model)"),__o=l(),Zp=a("li"),tse=a("strong"),b_o=o("rembert"),v_o=o(" \u2014 "),zI=a("a"),F_o=o("RemBertModel"),T_o=o(" (RemBERT model)"),M_o=l(),eu=a("li"),ase=a("strong"),E_o=o("resnet"),C_o=o(" \u2014 "),QI=a("a"),w_o=o("ResNetModel"),A_o=o(" (ResNet model)"),y_o=l(),ou=a("li"),nse=a("strong"),L_o=o("retribert"),x_o=o(" \u2014 "),WI=a("a"),$_o=o("RetriBertModel"),k_o=o(" (RetriBERT model)"),S_o=l(),ru=a("li"),sse=a("strong"),R_o=o("roberta"),B_o=o(" \u2014 "),HI=a("a"),P_o=o("RobertaModel"),I_o=o(" (RoBERTa model)"),q_o=l(),tu=a("li"),lse=a("strong"),N_o=o("roformer"),j_o=o(" \u2014 "),UI=a("a"),D_o=o("RoFormerModel"),G_o=o(" (RoFormer model)"),O_o=l(),au=a("li"),ise=a("strong"),V_o=o("segformer"),X_o=o(" \u2014 "),JI=a("a"),z_o=o("SegformerModel"),Q_o=o(" (SegFormer model)"),W_o=l(),nu=a("li"),dse=a("strong"),H_o=o("sew"),U_o=o(" \u2014 "),YI=a("a"),J_o=o("SEWModel"),Y_o=o(" (SEW model)"),K_o=l(),su=a("li"),cse=a("strong"),Z_o=o("sew-d"),e2o=o(" \u2014 "),KI=a("a"),o2o=o("SEWDModel"),r2o=o(" (SEW-D model)"),t2o=l(),lu=a("li"),fse=a("strong"),a2o=o("speech_to_text"),n2o=o(" \u2014 "),ZI=a("a"),s2o=o("Speech2TextModel"),l2o=o(" (Speech2Text model)"),i2o=l(),iu=a("li"),mse=a("strong"),d2o=o("splinter"),c2o=o(" \u2014 "),eq=a("a"),f2o=o("SplinterModel"),m2o=o(" (Splinter model)"),g2o=l(),du=a("li"),gse=a("strong"),h2o=o("squeezebert"),p2o=o(" \u2014 "),oq=a("a"),u2o=o("SqueezeBertModel"),_2o=o(" (SqueezeBERT model)"),b2o=l(),cu=a("li"),hse=a("strong"),v2o=o("swin"),F2o=o(" \u2014 "),rq=a("a"),T2o=o("SwinModel"),M2o=o(" (Swin model)"),E2o=l(),fu=a("li"),pse=a("strong"),C2o=o("t5"),w2o=o(" \u2014 "),tq=a("a"),A2o=o("T5Model"),y2o=o(" (T5 model)"),L2o=l(),mu=a("li"),use=a("strong"),x2o=o("tapas"),$2o=o(" \u2014 "),aq=a("a"),k2o=o("TapasModel"),S2o=o(" (TAPAS model)"),R2o=l(),gu=a("li"),_se=a("strong"),B2o=o("transfo-xl"),P2o=o(" \u2014 "),nq=a("a"),I2o=o("TransfoXLModel"),q2o=o(" (Transformer-XL model)"),N2o=l(),hu=a("li"),bse=a("strong"),j2o=o("unispeech"),D2o=o(" \u2014 "),sq=a("a"),G2o=o("UniSpeechModel"),O2o=o(" (UniSpeech model)"),V2o=l(),pu=a("li"),vse=a("strong"),X2o=o("unispeech-sat"),z2o=o(" \u2014 "),lq=a("a"),Q2o=o("UniSpeechSatModel"),W2o=o(" (UniSpeechSat model)"),H2o=l(),uu=a("li"),Fse=a("strong"),U2o=o("van"),J2o=o(" \u2014 "),iq=a("a"),Y2o=o("VanModel"),K2o=o(" (VAN model)"),Z2o=l(),_u=a("li"),Tse=a("strong"),e1o=o("vilt"),o1o=o(" \u2014 "),dq=a("a"),r1o=o("ViltModel"),t1o=o(" (ViLT model)"),a1o=l(),bu=a("li"),Mse=a("strong"),n1o=o("vision-text-dual-encoder"),s1o=o(" \u2014 "),cq=a("a"),l1o=o("VisionTextDualEncoderModel"),i1o=o(" (VisionTextDualEncoder model)"),d1o=l(),vu=a("li"),Ese=a("strong"),c1o=o("visual_bert"),f1o=o(" \u2014 "),fq=a("a"),m1o=o("VisualBertModel"),g1o=o(" (VisualBert model)"),h1o=l(),Fu=a("li"),Cse=a("strong"),p1o=o("vit"),u1o=o(" \u2014 "),mq=a("a"),_1o=o("ViTModel"),b1o=o(" (ViT model)"),v1o=l(),Tu=a("li"),wse=a("strong"),F1o=o("vit_mae"),T1o=o(" \u2014 "),gq=a("a"),M1o=o("ViTMAEModel"),E1o=o(" (ViTMAE model)"),C1o=l(),Mu=a("li"),Ase=a("strong"),w1o=o("wav2vec2"),A1o=o(" \u2014 "),hq=a("a"),y1o=o("Wav2Vec2Model"),L1o=o(" (Wav2Vec2 model)"),x1o=l(),Eu=a("li"),yse=a("strong"),$1o=o("wavlm"),k1o=o(" \u2014 "),pq=a("a"),S1o=o("WavLMModel"),R1o=o(" (WavLM model)"),B1o=l(),Cu=a("li"),Lse=a("strong"),P1o=o("xglm"),I1o=o(" \u2014 "),uq=a("a"),q1o=o("XGLMModel"),N1o=o(" (XGLM model)"),j1o=l(),wu=a("li"),xse=a("strong"),D1o=o("xlm"),G1o=o(" \u2014 "),_q=a("a"),O1o=o("XLMModel"),V1o=o(" (XLM model)"),X1o=l(),Au=a("li"),$se=a("strong"),z1o=o("xlm-prophetnet"),Q1o=o(" \u2014 "),bq=a("a"),W1o=o("XLMProphetNetModel"),H1o=o(" (XLMProphetNet model)"),U1o=l(),yu=a("li"),kse=a("strong"),J1o=o("xlm-roberta"),Y1o=o(" \u2014 "),vq=a("a"),K1o=o("XLMRobertaModel"),Z1o=o(" (XLM-RoBERTa model)"),ebo=l(),Lu=a("li"),Sse=a("strong"),obo=o("xlm-roberta-xl"),rbo=o(" \u2014 "),Fq=a("a"),tbo=o("XLMRobertaXLModel"),abo=o(" (XLM-RoBERTa-XL model)"),nbo=l(),xu=a("li"),Rse=a("strong"),sbo=o("xlnet"),lbo=o(" \u2014 "),Tq=a("a"),ibo=o("XLNetModel"),dbo=o(" (XLNet model)"),cbo=l(),$u=a("li"),Bse=a("strong"),fbo=o("yolos"),mbo=o(" \u2014 "),Mq=a("a"),gbo=o("YolosModel"),hbo=o(" (YOLOS model)"),pbo=l(),ku=a("li"),Pse=a("strong"),ubo=o("yoso"),_bo=o(" \u2014 "),Eq=a("a"),bbo=o("YosoModel"),vbo=o(" (YOSO model)"),Fbo=l(),Su=a("p"),Tbo=o("The model is set in evaluation mode by default using "),Ise=a("code"),Mbo=o("model.eval()"),Ebo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),qse=a("code"),Cbo=o("model.train()"),wbo=l(),F(Ru.$$.fragment),OPe=l(),Ci=a("h2"),Bu=a("a"),Nse=a("span"),F(CA.$$.fragment),Abo=l(),jse=a("span"),ybo=o("AutoModelForPreTraining"),VPe=l(),xo=a("div"),F(wA.$$.fragment),Lbo=l(),wi=a("p"),xbo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Cq=a("a"),$bo=o("from_pretrained()"),kbo=o(" class method or the "),wq=a("a"),Sbo=o("from_config()"),Rbo=o(` class
method.`),Bbo=l(),AA=a("p"),Pbo=o("This class cannot be instantiated directly using "),Dse=a("code"),Ibo=o("__init__()"),qbo=o(" (throws an error)."),Nbo=l(),rt=a("div"),F(yA.$$.fragment),jbo=l(),Gse=a("p"),Dbo=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Gbo=l(),Ai=a("p"),Obo=o(`Note:
Loading a model from its configuration file does `),Ose=a("strong"),Vbo=o("not"),Xbo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Aq=a("a"),zbo=o("from_pretrained()"),Qbo=o(" to load the model weights."),Wbo=l(),F(Pu.$$.fragment),Hbo=l(),Ue=a("div"),F(LA.$$.fragment),Ubo=l(),Vse=a("p"),Jbo=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Ybo=l(),ya=a("p"),Kbo=o("The model class to instantiate is selected based on the "),Xse=a("code"),Zbo=o("model_type"),evo=o(` property of the config object (either
passed as an argument or loaded from `),zse=a("code"),ovo=o("pretrained_model_name_or_path"),rvo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qse=a("code"),tvo=o("pretrained_model_name_or_path"),avo=o(":"),nvo=l(),G=a("ul"),Iu=a("li"),Wse=a("strong"),svo=o("albert"),lvo=o(" \u2014 "),yq=a("a"),ivo=o("AlbertForPreTraining"),dvo=o(" (ALBERT model)"),cvo=l(),qu=a("li"),Hse=a("strong"),fvo=o("bart"),mvo=o(" \u2014 "),Lq=a("a"),gvo=o("BartForConditionalGeneration"),hvo=o(" (BART model)"),pvo=l(),Nu=a("li"),Use=a("strong"),uvo=o("bert"),_vo=o(" \u2014 "),xq=a("a"),bvo=o("BertForPreTraining"),vvo=o(" (BERT model)"),Fvo=l(),ju=a("li"),Jse=a("strong"),Tvo=o("big_bird"),Mvo=o(" \u2014 "),$q=a("a"),Evo=o("BigBirdForPreTraining"),Cvo=o(" (BigBird model)"),wvo=l(),Du=a("li"),Yse=a("strong"),Avo=o("camembert"),yvo=o(" \u2014 "),kq=a("a"),Lvo=o("CamembertForMaskedLM"),xvo=o(" (CamemBERT model)"),$vo=l(),Gu=a("li"),Kse=a("strong"),kvo=o("ctrl"),Svo=o(" \u2014 "),Sq=a("a"),Rvo=o("CTRLLMHeadModel"),Bvo=o(" (CTRL model)"),Pvo=l(),Ou=a("li"),Zse=a("strong"),Ivo=o("data2vec-text"),qvo=o(" \u2014 "),Rq=a("a"),Nvo=o("Data2VecTextForMaskedLM"),jvo=o(" (Data2VecText model)"),Dvo=l(),Vu=a("li"),ele=a("strong"),Gvo=o("deberta"),Ovo=o(" \u2014 "),Bq=a("a"),Vvo=o("DebertaForMaskedLM"),Xvo=o(" (DeBERTa model)"),zvo=l(),Xu=a("li"),ole=a("strong"),Qvo=o("deberta-v2"),Wvo=o(" \u2014 "),Pq=a("a"),Hvo=o("DebertaV2ForMaskedLM"),Uvo=o(" (DeBERTa-v2 model)"),Jvo=l(),zu=a("li"),rle=a("strong"),Yvo=o("distilbert"),Kvo=o(" \u2014 "),Iq=a("a"),Zvo=o("DistilBertForMaskedLM"),eFo=o(" (DistilBERT model)"),oFo=l(),Qu=a("li"),tle=a("strong"),rFo=o("electra"),tFo=o(" \u2014 "),qq=a("a"),aFo=o("ElectraForPreTraining"),nFo=o(" (ELECTRA model)"),sFo=l(),Wu=a("li"),ale=a("strong"),lFo=o("flaubert"),iFo=o(" \u2014 "),Nq=a("a"),dFo=o("FlaubertWithLMHeadModel"),cFo=o(" (FlauBERT model)"),fFo=l(),Hu=a("li"),nle=a("strong"),mFo=o("flava"),gFo=o(" \u2014 "),jq=a("a"),hFo=o("FlavaForPreTraining"),pFo=o(" (Flava model)"),uFo=l(),Uu=a("li"),sle=a("strong"),_Fo=o("fnet"),bFo=o(" \u2014 "),Dq=a("a"),vFo=o("FNetForPreTraining"),FFo=o(" (FNet model)"),TFo=l(),Ju=a("li"),lle=a("strong"),MFo=o("fsmt"),EFo=o(" \u2014 "),Gq=a("a"),CFo=o("FSMTForConditionalGeneration"),wFo=o(" (FairSeq Machine-Translation model)"),AFo=l(),Yu=a("li"),ile=a("strong"),yFo=o("funnel"),LFo=o(" \u2014 "),Oq=a("a"),xFo=o("FunnelForPreTraining"),$Fo=o(" (Funnel Transformer model)"),kFo=l(),Ku=a("li"),dle=a("strong"),SFo=o("gpt2"),RFo=o(" \u2014 "),Vq=a("a"),BFo=o("GPT2LMHeadModel"),PFo=o(" (OpenAI GPT-2 model)"),IFo=l(),Zu=a("li"),cle=a("strong"),qFo=o("ibert"),NFo=o(" \u2014 "),Xq=a("a"),jFo=o("IBertForMaskedLM"),DFo=o(" (I-BERT model)"),GFo=l(),e_=a("li"),fle=a("strong"),OFo=o("layoutlm"),VFo=o(" \u2014 "),zq=a("a"),XFo=o("LayoutLMForMaskedLM"),zFo=o(" (LayoutLM model)"),QFo=l(),o_=a("li"),mle=a("strong"),WFo=o("longformer"),HFo=o(" \u2014 "),Qq=a("a"),UFo=o("LongformerForMaskedLM"),JFo=o(" (Longformer model)"),YFo=l(),r_=a("li"),gle=a("strong"),KFo=o("lxmert"),ZFo=o(" \u2014 "),Wq=a("a"),e0o=o("LxmertForPreTraining"),o0o=o(" (LXMERT model)"),r0o=l(),t_=a("li"),hle=a("strong"),t0o=o("megatron-bert"),a0o=o(" \u2014 "),Hq=a("a"),n0o=o("MegatronBertForPreTraining"),s0o=o(" (MegatronBert model)"),l0o=l(),a_=a("li"),ple=a("strong"),i0o=o("mobilebert"),d0o=o(" \u2014 "),Uq=a("a"),c0o=o("MobileBertForPreTraining"),f0o=o(" (MobileBERT model)"),m0o=l(),n_=a("li"),ule=a("strong"),g0o=o("mpnet"),h0o=o(" \u2014 "),Jq=a("a"),p0o=o("MPNetForMaskedLM"),u0o=o(" (MPNet model)"),_0o=l(),s_=a("li"),_le=a("strong"),b0o=o("openai-gpt"),v0o=o(" \u2014 "),Yq=a("a"),F0o=o("OpenAIGPTLMHeadModel"),T0o=o(" (OpenAI GPT model)"),M0o=l(),l_=a("li"),ble=a("strong"),E0o=o("retribert"),C0o=o(" \u2014 "),Kq=a("a"),w0o=o("RetriBertModel"),A0o=o(" (RetriBERT model)"),y0o=l(),i_=a("li"),vle=a("strong"),L0o=o("roberta"),x0o=o(" \u2014 "),Zq=a("a"),$0o=o("RobertaForMaskedLM"),k0o=o(" (RoBERTa model)"),S0o=l(),d_=a("li"),Fle=a("strong"),R0o=o("squeezebert"),B0o=o(" \u2014 "),eN=a("a"),P0o=o("SqueezeBertForMaskedLM"),I0o=o(" (SqueezeBERT model)"),q0o=l(),c_=a("li"),Tle=a("strong"),N0o=o("t5"),j0o=o(" \u2014 "),oN=a("a"),D0o=o("T5ForConditionalGeneration"),G0o=o(" (T5 model)"),O0o=l(),f_=a("li"),Mle=a("strong"),V0o=o("tapas"),X0o=o(" \u2014 "),rN=a("a"),z0o=o("TapasForMaskedLM"),Q0o=o(" (TAPAS model)"),W0o=l(),m_=a("li"),Ele=a("strong"),H0o=o("transfo-xl"),U0o=o(" \u2014 "),tN=a("a"),J0o=o("TransfoXLLMHeadModel"),Y0o=o(" (Transformer-XL model)"),K0o=l(),g_=a("li"),Cle=a("strong"),Z0o=o("unispeech"),e6o=o(" \u2014 "),aN=a("a"),o6o=o("UniSpeechForPreTraining"),r6o=o(" (UniSpeech model)"),t6o=l(),h_=a("li"),wle=a("strong"),a6o=o("unispeech-sat"),n6o=o(" \u2014 "),nN=a("a"),s6o=o("UniSpeechSatForPreTraining"),l6o=o(" (UniSpeechSat model)"),i6o=l(),p_=a("li"),Ale=a("strong"),d6o=o("visual_bert"),c6o=o(" \u2014 "),sN=a("a"),f6o=o("VisualBertForPreTraining"),m6o=o(" (VisualBert model)"),g6o=l(),u_=a("li"),yle=a("strong"),h6o=o("vit_mae"),p6o=o(" \u2014 "),lN=a("a"),u6o=o("ViTMAEForPreTraining"),_6o=o(" (ViTMAE model)"),b6o=l(),__=a("li"),Lle=a("strong"),v6o=o("wav2vec2"),F6o=o(" \u2014 "),iN=a("a"),T6o=o("Wav2Vec2ForPreTraining"),M6o=o(" (Wav2Vec2 model)"),E6o=l(),b_=a("li"),xle=a("strong"),C6o=o("xlm"),w6o=o(" \u2014 "),dN=a("a"),A6o=o("XLMWithLMHeadModel"),y6o=o(" (XLM model)"),L6o=l(),v_=a("li"),$le=a("strong"),x6o=o("xlm-roberta"),$6o=o(" \u2014 "),cN=a("a"),k6o=o("XLMRobertaForMaskedLM"),S6o=o(" (XLM-RoBERTa model)"),R6o=l(),F_=a("li"),kle=a("strong"),B6o=o("xlm-roberta-xl"),P6o=o(" \u2014 "),fN=a("a"),I6o=o("XLMRobertaXLForMaskedLM"),q6o=o(" (XLM-RoBERTa-XL model)"),N6o=l(),T_=a("li"),Sle=a("strong"),j6o=o("xlnet"),D6o=o(" \u2014 "),mN=a("a"),G6o=o("XLNetLMHeadModel"),O6o=o(" (XLNet model)"),V6o=l(),M_=a("p"),X6o=o("The model is set in evaluation mode by default using "),Rle=a("code"),z6o=o("model.eval()"),Q6o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ble=a("code"),W6o=o("model.train()"),H6o=l(),F(E_.$$.fragment),XPe=l(),yi=a("h2"),C_=a("a"),Ple=a("span"),F(xA.$$.fragment),U6o=l(),Ile=a("span"),J6o=o("AutoModelForCausalLM"),zPe=l(),$o=a("div"),F($A.$$.fragment),Y6o=l(),Li=a("p"),K6o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),gN=a("a"),Z6o=o("from_pretrained()"),eTo=o(" class method or the "),hN=a("a"),oTo=o("from_config()"),rTo=o(` class
method.`),tTo=l(),kA=a("p"),aTo=o("This class cannot be instantiated directly using "),qle=a("code"),nTo=o("__init__()"),sTo=o(" (throws an error)."),lTo=l(),tt=a("div"),F(SA.$$.fragment),iTo=l(),Nle=a("p"),dTo=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),cTo=l(),xi=a("p"),fTo=o(`Note:
Loading a model from its configuration file does `),jle=a("strong"),mTo=o("not"),gTo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pN=a("a"),hTo=o("from_pretrained()"),pTo=o(" to load the model weights."),uTo=l(),F(w_.$$.fragment),_To=l(),Je=a("div"),F(RA.$$.fragment),bTo=l(),Dle=a("p"),vTo=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),FTo=l(),La=a("p"),TTo=o("The model class to instantiate is selected based on the "),Gle=a("code"),MTo=o("model_type"),ETo=o(` property of the config object (either
passed as an argument or loaded from `),Ole=a("code"),CTo=o("pretrained_model_name_or_path"),wTo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vle=a("code"),ATo=o("pretrained_model_name_or_path"),yTo=o(":"),LTo=l(),z=a("ul"),A_=a("li"),Xle=a("strong"),xTo=o("bart"),$To=o(" \u2014 "),uN=a("a"),kTo=o("BartForCausalLM"),STo=o(" (BART model)"),RTo=l(),y_=a("li"),zle=a("strong"),BTo=o("bert"),PTo=o(" \u2014 "),_N=a("a"),ITo=o("BertLMHeadModel"),qTo=o(" (BERT model)"),NTo=l(),L_=a("li"),Qle=a("strong"),jTo=o("bert-generation"),DTo=o(" \u2014 "),bN=a("a"),GTo=o("BertGenerationDecoder"),OTo=o(" (Bert Generation model)"),VTo=l(),x_=a("li"),Wle=a("strong"),XTo=o("big_bird"),zTo=o(" \u2014 "),vN=a("a"),QTo=o("BigBirdForCausalLM"),WTo=o(" (BigBird model)"),HTo=l(),$_=a("li"),Hle=a("strong"),UTo=o("bigbird_pegasus"),JTo=o(" \u2014 "),FN=a("a"),YTo=o("BigBirdPegasusForCausalLM"),KTo=o(" (BigBirdPegasus model)"),ZTo=l(),k_=a("li"),Ule=a("strong"),e7o=o("blenderbot"),o7o=o(" \u2014 "),TN=a("a"),r7o=o("BlenderbotForCausalLM"),t7o=o(" (Blenderbot model)"),a7o=l(),S_=a("li"),Jle=a("strong"),n7o=o("blenderbot-small"),s7o=o(" \u2014 "),MN=a("a"),l7o=o("BlenderbotSmallForCausalLM"),i7o=o(" (BlenderbotSmall model)"),d7o=l(),R_=a("li"),Yle=a("strong"),c7o=o("camembert"),f7o=o(" \u2014 "),EN=a("a"),m7o=o("CamembertForCausalLM"),g7o=o(" (CamemBERT model)"),h7o=l(),B_=a("li"),Kle=a("strong"),p7o=o("ctrl"),u7o=o(" \u2014 "),CN=a("a"),_7o=o("CTRLLMHeadModel"),b7o=o(" (CTRL model)"),v7o=l(),P_=a("li"),Zle=a("strong"),F7o=o("data2vec-text"),T7o=o(" \u2014 "),wN=a("a"),M7o=o("Data2VecTextForCausalLM"),E7o=o(" (Data2VecText model)"),C7o=l(),I_=a("li"),eie=a("strong"),w7o=o("electra"),A7o=o(" \u2014 "),AN=a("a"),y7o=o("ElectraForCausalLM"),L7o=o(" (ELECTRA model)"),x7o=l(),q_=a("li"),oie=a("strong"),$7o=o("gpt2"),k7o=o(" \u2014 "),yN=a("a"),S7o=o("GPT2LMHeadModel"),R7o=o(" (OpenAI GPT-2 model)"),B7o=l(),N_=a("li"),rie=a("strong"),P7o=o("gpt_neo"),I7o=o(" \u2014 "),LN=a("a"),q7o=o("GPTNeoForCausalLM"),N7o=o(" (GPT Neo model)"),j7o=l(),j_=a("li"),tie=a("strong"),D7o=o("gptj"),G7o=o(" \u2014 "),xN=a("a"),O7o=o("GPTJForCausalLM"),V7o=o(" (GPT-J model)"),X7o=l(),D_=a("li"),aie=a("strong"),z7o=o("marian"),Q7o=o(" \u2014 "),$N=a("a"),W7o=o("MarianForCausalLM"),H7o=o(" (Marian model)"),U7o=l(),G_=a("li"),nie=a("strong"),J7o=o("mbart"),Y7o=o(" \u2014 "),kN=a("a"),K7o=o("MBartForCausalLM"),Z7o=o(" (mBART model)"),eMo=l(),O_=a("li"),sie=a("strong"),oMo=o("megatron-bert"),rMo=o(" \u2014 "),SN=a("a"),tMo=o("MegatronBertForCausalLM"),aMo=o(" (MegatronBert model)"),nMo=l(),V_=a("li"),lie=a("strong"),sMo=o("openai-gpt"),lMo=o(" \u2014 "),RN=a("a"),iMo=o("OpenAIGPTLMHeadModel"),dMo=o(" (OpenAI GPT model)"),cMo=l(),X_=a("li"),iie=a("strong"),fMo=o("pegasus"),mMo=o(" \u2014 "),BN=a("a"),gMo=o("PegasusForCausalLM"),hMo=o(" (Pegasus model)"),pMo=l(),z_=a("li"),die=a("strong"),uMo=o("plbart"),_Mo=o(" \u2014 "),PN=a("a"),bMo=o("PLBartForCausalLM"),vMo=o(" (PLBart model)"),FMo=l(),Q_=a("li"),cie=a("strong"),TMo=o("prophetnet"),MMo=o(" \u2014 "),IN=a("a"),EMo=o("ProphetNetForCausalLM"),CMo=o(" (ProphetNet model)"),wMo=l(),W_=a("li"),fie=a("strong"),AMo=o("qdqbert"),yMo=o(" \u2014 "),qN=a("a"),LMo=o("QDQBertLMHeadModel"),xMo=o(" (QDQBert model)"),$Mo=l(),H_=a("li"),mie=a("strong"),kMo=o("reformer"),SMo=o(" \u2014 "),NN=a("a"),RMo=o("ReformerModelWithLMHead"),BMo=o(" (Reformer model)"),PMo=l(),U_=a("li"),gie=a("strong"),IMo=o("rembert"),qMo=o(" \u2014 "),jN=a("a"),NMo=o("RemBertForCausalLM"),jMo=o(" (RemBERT model)"),DMo=l(),J_=a("li"),hie=a("strong"),GMo=o("roberta"),OMo=o(" \u2014 "),DN=a("a"),VMo=o("RobertaForCausalLM"),XMo=o(" (RoBERTa model)"),zMo=l(),Y_=a("li"),pie=a("strong"),QMo=o("roformer"),WMo=o(" \u2014 "),GN=a("a"),HMo=o("RoFormerForCausalLM"),UMo=o(" (RoFormer model)"),JMo=l(),K_=a("li"),uie=a("strong"),YMo=o("speech_to_text_2"),KMo=o(" \u2014 "),ON=a("a"),ZMo=o("Speech2Text2ForCausalLM"),e4o=o(" (Speech2Text2 model)"),o4o=l(),Z_=a("li"),_ie=a("strong"),r4o=o("transfo-xl"),t4o=o(" \u2014 "),VN=a("a"),a4o=o("TransfoXLLMHeadModel"),n4o=o(" (Transformer-XL model)"),s4o=l(),e2=a("li"),bie=a("strong"),l4o=o("trocr"),i4o=o(" \u2014 "),XN=a("a"),d4o=o("TrOCRForCausalLM"),c4o=o(" (TrOCR model)"),f4o=l(),o2=a("li"),vie=a("strong"),m4o=o("xglm"),g4o=o(" \u2014 "),zN=a("a"),h4o=o("XGLMForCausalLM"),p4o=o(" (XGLM model)"),u4o=l(),r2=a("li"),Fie=a("strong"),_4o=o("xlm"),b4o=o(" \u2014 "),QN=a("a"),v4o=o("XLMWithLMHeadModel"),F4o=o(" (XLM model)"),T4o=l(),t2=a("li"),Tie=a("strong"),M4o=o("xlm-prophetnet"),E4o=o(" \u2014 "),WN=a("a"),C4o=o("XLMProphetNetForCausalLM"),w4o=o(" (XLMProphetNet model)"),A4o=l(),a2=a("li"),Mie=a("strong"),y4o=o("xlm-roberta"),L4o=o(" \u2014 "),HN=a("a"),x4o=o("XLMRobertaForCausalLM"),$4o=o(" (XLM-RoBERTa model)"),k4o=l(),n2=a("li"),Eie=a("strong"),S4o=o("xlm-roberta-xl"),R4o=o(" \u2014 "),UN=a("a"),B4o=o("XLMRobertaXLForCausalLM"),P4o=o(" (XLM-RoBERTa-XL model)"),I4o=l(),s2=a("li"),Cie=a("strong"),q4o=o("xlnet"),N4o=o(" \u2014 "),JN=a("a"),j4o=o("XLNetLMHeadModel"),D4o=o(" (XLNet model)"),G4o=l(),l2=a("p"),O4o=o("The model is set in evaluation mode by default using "),wie=a("code"),V4o=o("model.eval()"),X4o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Aie=a("code"),z4o=o("model.train()"),Q4o=l(),F(i2.$$.fragment),QPe=l(),$i=a("h2"),d2=a("a"),yie=a("span"),F(BA.$$.fragment),W4o=l(),Lie=a("span"),H4o=o("AutoModelForMaskedLM"),WPe=l(),ko=a("div"),F(PA.$$.fragment),U4o=l(),ki=a("p"),J4o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),YN=a("a"),Y4o=o("from_pretrained()"),K4o=o(" class method or the "),KN=a("a"),Z4o=o("from_config()"),eEo=o(` class
method.`),oEo=l(),IA=a("p"),rEo=o("This class cannot be instantiated directly using "),xie=a("code"),tEo=o("__init__()"),aEo=o(" (throws an error)."),nEo=l(),at=a("div"),F(qA.$$.fragment),sEo=l(),$ie=a("p"),lEo=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),iEo=l(),Si=a("p"),dEo=o(`Note:
Loading a model from its configuration file does `),kie=a("strong"),cEo=o("not"),fEo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ZN=a("a"),mEo=o("from_pretrained()"),gEo=o(" to load the model weights."),hEo=l(),F(c2.$$.fragment),pEo=l(),Ye=a("div"),F(NA.$$.fragment),uEo=l(),Sie=a("p"),_Eo=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),bEo=l(),xa=a("p"),vEo=o("The model class to instantiate is selected based on the "),Rie=a("code"),FEo=o("model_type"),TEo=o(` property of the config object (either
passed as an argument or loaded from `),Bie=a("code"),MEo=o("pretrained_model_name_or_path"),EEo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Pie=a("code"),CEo=o("pretrained_model_name_or_path"),wEo=o(":"),AEo=l(),Q=a("ul"),f2=a("li"),Iie=a("strong"),yEo=o("albert"),LEo=o(" \u2014 "),ej=a("a"),xEo=o("AlbertForMaskedLM"),$Eo=o(" (ALBERT model)"),kEo=l(),m2=a("li"),qie=a("strong"),SEo=o("bart"),REo=o(" \u2014 "),oj=a("a"),BEo=o("BartForConditionalGeneration"),PEo=o(" (BART model)"),IEo=l(),g2=a("li"),Nie=a("strong"),qEo=o("bert"),NEo=o(" \u2014 "),rj=a("a"),jEo=o("BertForMaskedLM"),DEo=o(" (BERT model)"),GEo=l(),h2=a("li"),jie=a("strong"),OEo=o("big_bird"),VEo=o(" \u2014 "),tj=a("a"),XEo=o("BigBirdForMaskedLM"),zEo=o(" (BigBird model)"),QEo=l(),p2=a("li"),Die=a("strong"),WEo=o("camembert"),HEo=o(" \u2014 "),aj=a("a"),UEo=o("CamembertForMaskedLM"),JEo=o(" (CamemBERT model)"),YEo=l(),u2=a("li"),Gie=a("strong"),KEo=o("convbert"),ZEo=o(" \u2014 "),nj=a("a"),e5o=o("ConvBertForMaskedLM"),o5o=o(" (ConvBERT model)"),r5o=l(),_2=a("li"),Oie=a("strong"),t5o=o("data2vec-text"),a5o=o(" \u2014 "),sj=a("a"),n5o=o("Data2VecTextForMaskedLM"),s5o=o(" (Data2VecText model)"),l5o=l(),b2=a("li"),Vie=a("strong"),i5o=o("deberta"),d5o=o(" \u2014 "),lj=a("a"),c5o=o("DebertaForMaskedLM"),f5o=o(" (DeBERTa model)"),m5o=l(),v2=a("li"),Xie=a("strong"),g5o=o("deberta-v2"),h5o=o(" \u2014 "),ij=a("a"),p5o=o("DebertaV2ForMaskedLM"),u5o=o(" (DeBERTa-v2 model)"),_5o=l(),F2=a("li"),zie=a("strong"),b5o=o("distilbert"),v5o=o(" \u2014 "),dj=a("a"),F5o=o("DistilBertForMaskedLM"),T5o=o(" (DistilBERT model)"),M5o=l(),T2=a("li"),Qie=a("strong"),E5o=o("electra"),C5o=o(" \u2014 "),cj=a("a"),w5o=o("ElectraForMaskedLM"),A5o=o(" (ELECTRA model)"),y5o=l(),M2=a("li"),Wie=a("strong"),L5o=o("flaubert"),x5o=o(" \u2014 "),fj=a("a"),$5o=o("FlaubertWithLMHeadModel"),k5o=o(" (FlauBERT model)"),S5o=l(),E2=a("li"),Hie=a("strong"),R5o=o("fnet"),B5o=o(" \u2014 "),mj=a("a"),P5o=o("FNetForMaskedLM"),I5o=o(" (FNet model)"),q5o=l(),C2=a("li"),Uie=a("strong"),N5o=o("funnel"),j5o=o(" \u2014 "),gj=a("a"),D5o=o("FunnelForMaskedLM"),G5o=o(" (Funnel Transformer model)"),O5o=l(),w2=a("li"),Jie=a("strong"),V5o=o("ibert"),X5o=o(" \u2014 "),hj=a("a"),z5o=o("IBertForMaskedLM"),Q5o=o(" (I-BERT model)"),W5o=l(),A2=a("li"),Yie=a("strong"),H5o=o("layoutlm"),U5o=o(" \u2014 "),pj=a("a"),J5o=o("LayoutLMForMaskedLM"),Y5o=o(" (LayoutLM model)"),K5o=l(),y2=a("li"),Kie=a("strong"),Z5o=o("longformer"),eCo=o(" \u2014 "),uj=a("a"),oCo=o("LongformerForMaskedLM"),rCo=o(" (Longformer model)"),tCo=l(),L2=a("li"),Zie=a("strong"),aCo=o("mbart"),nCo=o(" \u2014 "),_j=a("a"),sCo=o("MBartForConditionalGeneration"),lCo=o(" (mBART model)"),iCo=l(),x2=a("li"),ede=a("strong"),dCo=o("megatron-bert"),cCo=o(" \u2014 "),bj=a("a"),fCo=o("MegatronBertForMaskedLM"),mCo=o(" (MegatronBert model)"),gCo=l(),$2=a("li"),ode=a("strong"),hCo=o("mobilebert"),pCo=o(" \u2014 "),vj=a("a"),uCo=o("MobileBertForMaskedLM"),_Co=o(" (MobileBERT model)"),bCo=l(),k2=a("li"),rde=a("strong"),vCo=o("mpnet"),FCo=o(" \u2014 "),Fj=a("a"),TCo=o("MPNetForMaskedLM"),MCo=o(" (MPNet model)"),ECo=l(),S2=a("li"),tde=a("strong"),CCo=o("nystromformer"),wCo=o(" \u2014 "),Tj=a("a"),ACo=o("NystromformerForMaskedLM"),yCo=o(" (Nystromformer model)"),LCo=l(),R2=a("li"),ade=a("strong"),xCo=o("perceiver"),$Co=o(" \u2014 "),Mj=a("a"),kCo=o("PerceiverForMaskedLM"),SCo=o(" (Perceiver model)"),RCo=l(),B2=a("li"),nde=a("strong"),BCo=o("qdqbert"),PCo=o(" \u2014 "),Ej=a("a"),ICo=o("QDQBertForMaskedLM"),qCo=o(" (QDQBert model)"),NCo=l(),P2=a("li"),sde=a("strong"),jCo=o("reformer"),DCo=o(" \u2014 "),Cj=a("a"),GCo=o("ReformerForMaskedLM"),OCo=o(" (Reformer model)"),VCo=l(),I2=a("li"),lde=a("strong"),XCo=o("rembert"),zCo=o(" \u2014 "),wj=a("a"),QCo=o("RemBertForMaskedLM"),WCo=o(" (RemBERT model)"),HCo=l(),q2=a("li"),ide=a("strong"),UCo=o("roberta"),JCo=o(" \u2014 "),Aj=a("a"),YCo=o("RobertaForMaskedLM"),KCo=o(" (RoBERTa model)"),ZCo=l(),N2=a("li"),dde=a("strong"),e3o=o("roformer"),o3o=o(" \u2014 "),yj=a("a"),r3o=o("RoFormerForMaskedLM"),t3o=o(" (RoFormer model)"),a3o=l(),j2=a("li"),cde=a("strong"),n3o=o("squeezebert"),s3o=o(" \u2014 "),Lj=a("a"),l3o=o("SqueezeBertForMaskedLM"),i3o=o(" (SqueezeBERT model)"),d3o=l(),D2=a("li"),fde=a("strong"),c3o=o("tapas"),f3o=o(" \u2014 "),xj=a("a"),m3o=o("TapasForMaskedLM"),g3o=o(" (TAPAS model)"),h3o=l(),G2=a("li"),mde=a("strong"),p3o=o("wav2vec2"),u3o=o(" \u2014 "),gde=a("code"),_3o=o("Wav2Vec2ForMaskedLM"),b3o=o(" (Wav2Vec2 model)"),v3o=l(),O2=a("li"),hde=a("strong"),F3o=o("xlm"),T3o=o(" \u2014 "),$j=a("a"),M3o=o("XLMWithLMHeadModel"),E3o=o(" (XLM model)"),C3o=l(),V2=a("li"),pde=a("strong"),w3o=o("xlm-roberta"),A3o=o(" \u2014 "),kj=a("a"),y3o=o("XLMRobertaForMaskedLM"),L3o=o(" (XLM-RoBERTa model)"),x3o=l(),X2=a("li"),ude=a("strong"),$3o=o("xlm-roberta-xl"),k3o=o(" \u2014 "),Sj=a("a"),S3o=o("XLMRobertaXLForMaskedLM"),R3o=o(" (XLM-RoBERTa-XL model)"),B3o=l(),z2=a("li"),_de=a("strong"),P3o=o("yoso"),I3o=o(" \u2014 "),Rj=a("a"),q3o=o("YosoForMaskedLM"),N3o=o(" (YOSO model)"),j3o=l(),Q2=a("p"),D3o=o("The model is set in evaluation mode by default using "),bde=a("code"),G3o=o("model.eval()"),O3o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vde=a("code"),V3o=o("model.train()"),X3o=l(),F(W2.$$.fragment),HPe=l(),Ri=a("h2"),H2=a("a"),Fde=a("span"),F(jA.$$.fragment),z3o=l(),Tde=a("span"),Q3o=o("AutoModelForSeq2SeqLM"),UPe=l(),So=a("div"),F(DA.$$.fragment),W3o=l(),Bi=a("p"),H3o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Bj=a("a"),U3o=o("from_pretrained()"),J3o=o(" class method or the "),Pj=a("a"),Y3o=o("from_config()"),K3o=o(` class
method.`),Z3o=l(),GA=a("p"),ewo=o("This class cannot be instantiated directly using "),Mde=a("code"),owo=o("__init__()"),rwo=o(" (throws an error)."),two=l(),nt=a("div"),F(OA.$$.fragment),awo=l(),Ede=a("p"),nwo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),swo=l(),Pi=a("p"),lwo=o(`Note:
Loading a model from its configuration file does `),Cde=a("strong"),iwo=o("not"),dwo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Ij=a("a"),cwo=o("from_pretrained()"),fwo=o(" to load the model weights."),mwo=l(),F(U2.$$.fragment),gwo=l(),Ke=a("div"),F(VA.$$.fragment),hwo=l(),wde=a("p"),pwo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),uwo=l(),$a=a("p"),_wo=o("The model class to instantiate is selected based on the "),Ade=a("code"),bwo=o("model_type"),vwo=o(` property of the config object (either
passed as an argument or loaded from `),yde=a("code"),Fwo=o("pretrained_model_name_or_path"),Two=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lde=a("code"),Mwo=o("pretrained_model_name_or_path"),Ewo=o(":"),Cwo=l(),he=a("ul"),J2=a("li"),xde=a("strong"),wwo=o("bart"),Awo=o(" \u2014 "),qj=a("a"),ywo=o("BartForConditionalGeneration"),Lwo=o(" (BART model)"),xwo=l(),Y2=a("li"),$de=a("strong"),$wo=o("bigbird_pegasus"),kwo=o(" \u2014 "),Nj=a("a"),Swo=o("BigBirdPegasusForConditionalGeneration"),Rwo=o(" (BigBirdPegasus model)"),Bwo=l(),K2=a("li"),kde=a("strong"),Pwo=o("blenderbot"),Iwo=o(" \u2014 "),jj=a("a"),qwo=o("BlenderbotForConditionalGeneration"),Nwo=o(" (Blenderbot model)"),jwo=l(),Z2=a("li"),Sde=a("strong"),Dwo=o("blenderbot-small"),Gwo=o(" \u2014 "),Dj=a("a"),Owo=o("BlenderbotSmallForConditionalGeneration"),Vwo=o(" (BlenderbotSmall model)"),Xwo=l(),e1=a("li"),Rde=a("strong"),zwo=o("encoder-decoder"),Qwo=o(" \u2014 "),Gj=a("a"),Wwo=o("EncoderDecoderModel"),Hwo=o(" (Encoder decoder model)"),Uwo=l(),o1=a("li"),Bde=a("strong"),Jwo=o("fsmt"),Ywo=o(" \u2014 "),Oj=a("a"),Kwo=o("FSMTForConditionalGeneration"),Zwo=o(" (FairSeq Machine-Translation model)"),eAo=l(),r1=a("li"),Pde=a("strong"),oAo=o("led"),rAo=o(" \u2014 "),Vj=a("a"),tAo=o("LEDForConditionalGeneration"),aAo=o(" (LED model)"),nAo=l(),t1=a("li"),Ide=a("strong"),sAo=o("m2m_100"),lAo=o(" \u2014 "),Xj=a("a"),iAo=o("M2M100ForConditionalGeneration"),dAo=o(" (M2M100 model)"),cAo=l(),a1=a("li"),qde=a("strong"),fAo=o("marian"),mAo=o(" \u2014 "),zj=a("a"),gAo=o("MarianMTModel"),hAo=o(" (Marian model)"),pAo=l(),n1=a("li"),Nde=a("strong"),uAo=o("mbart"),_Ao=o(" \u2014 "),Qj=a("a"),bAo=o("MBartForConditionalGeneration"),vAo=o(" (mBART model)"),FAo=l(),s1=a("li"),jde=a("strong"),TAo=o("mt5"),MAo=o(" \u2014 "),Wj=a("a"),EAo=o("MT5ForConditionalGeneration"),CAo=o(" (mT5 model)"),wAo=l(),l1=a("li"),Dde=a("strong"),AAo=o("pegasus"),yAo=o(" \u2014 "),Hj=a("a"),LAo=o("PegasusForConditionalGeneration"),xAo=o(" (Pegasus model)"),$Ao=l(),i1=a("li"),Gde=a("strong"),kAo=o("plbart"),SAo=o(" \u2014 "),Uj=a("a"),RAo=o("PLBartForConditionalGeneration"),BAo=o(" (PLBart model)"),PAo=l(),d1=a("li"),Ode=a("strong"),IAo=o("prophetnet"),qAo=o(" \u2014 "),Jj=a("a"),NAo=o("ProphetNetForConditionalGeneration"),jAo=o(" (ProphetNet model)"),DAo=l(),c1=a("li"),Vde=a("strong"),GAo=o("t5"),OAo=o(" \u2014 "),Yj=a("a"),VAo=o("T5ForConditionalGeneration"),XAo=o(" (T5 model)"),zAo=l(),f1=a("li"),Xde=a("strong"),QAo=o("tapex"),WAo=o(" \u2014 "),Kj=a("a"),HAo=o("BartForConditionalGeneration"),UAo=o(" (TAPEX model)"),JAo=l(),m1=a("li"),zde=a("strong"),YAo=o("xlm-prophetnet"),KAo=o(" \u2014 "),Zj=a("a"),ZAo=o("XLMProphetNetForConditionalGeneration"),eyo=o(" (XLMProphetNet model)"),oyo=l(),g1=a("p"),ryo=o("The model is set in evaluation mode by default using "),Qde=a("code"),tyo=o("model.eval()"),ayo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Wde=a("code"),nyo=o("model.train()"),syo=l(),F(h1.$$.fragment),JPe=l(),Ii=a("h2"),p1=a("a"),Hde=a("span"),F(XA.$$.fragment),lyo=l(),Ude=a("span"),iyo=o("AutoModelForSequenceClassification"),YPe=l(),Ro=a("div"),F(zA.$$.fragment),dyo=l(),qi=a("p"),cyo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),eD=a("a"),fyo=o("from_pretrained()"),myo=o(" class method or the "),oD=a("a"),gyo=o("from_config()"),hyo=o(` class
method.`),pyo=l(),QA=a("p"),uyo=o("This class cannot be instantiated directly using "),Jde=a("code"),_yo=o("__init__()"),byo=o(" (throws an error)."),vyo=l(),st=a("div"),F(WA.$$.fragment),Fyo=l(),Yde=a("p"),Tyo=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Myo=l(),Ni=a("p"),Eyo=o(`Note:
Loading a model from its configuration file does `),Kde=a("strong"),Cyo=o("not"),wyo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rD=a("a"),Ayo=o("from_pretrained()"),yyo=o(" to load the model weights."),Lyo=l(),F(u1.$$.fragment),xyo=l(),Ze=a("div"),F(HA.$$.fragment),$yo=l(),Zde=a("p"),kyo=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Syo=l(),ka=a("p"),Ryo=o("The model class to instantiate is selected based on the "),ece=a("code"),Byo=o("model_type"),Pyo=o(` property of the config object (either
passed as an argument or loaded from `),oce=a("code"),Iyo=o("pretrained_model_name_or_path"),qyo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rce=a("code"),Nyo=o("pretrained_model_name_or_path"),jyo=o(":"),Dyo=l(),q=a("ul"),_1=a("li"),tce=a("strong"),Gyo=o("albert"),Oyo=o(" \u2014 "),tD=a("a"),Vyo=o("AlbertForSequenceClassification"),Xyo=o(" (ALBERT model)"),zyo=l(),b1=a("li"),ace=a("strong"),Qyo=o("bart"),Wyo=o(" \u2014 "),aD=a("a"),Hyo=o("BartForSequenceClassification"),Uyo=o(" (BART model)"),Jyo=l(),v1=a("li"),nce=a("strong"),Yyo=o("bert"),Kyo=o(" \u2014 "),nD=a("a"),Zyo=o("BertForSequenceClassification"),eLo=o(" (BERT model)"),oLo=l(),F1=a("li"),sce=a("strong"),rLo=o("big_bird"),tLo=o(" \u2014 "),sD=a("a"),aLo=o("BigBirdForSequenceClassification"),nLo=o(" (BigBird model)"),sLo=l(),T1=a("li"),lce=a("strong"),lLo=o("bigbird_pegasus"),iLo=o(" \u2014 "),lD=a("a"),dLo=o("BigBirdPegasusForSequenceClassification"),cLo=o(" (BigBirdPegasus model)"),fLo=l(),M1=a("li"),ice=a("strong"),mLo=o("camembert"),gLo=o(" \u2014 "),iD=a("a"),hLo=o("CamembertForSequenceClassification"),pLo=o(" (CamemBERT model)"),uLo=l(),E1=a("li"),dce=a("strong"),_Lo=o("canine"),bLo=o(" \u2014 "),dD=a("a"),vLo=o("CanineForSequenceClassification"),FLo=o(" (Canine model)"),TLo=l(),C1=a("li"),cce=a("strong"),MLo=o("convbert"),ELo=o(" \u2014 "),cD=a("a"),CLo=o("ConvBertForSequenceClassification"),wLo=o(" (ConvBERT model)"),ALo=l(),w1=a("li"),fce=a("strong"),yLo=o("ctrl"),LLo=o(" \u2014 "),fD=a("a"),xLo=o("CTRLForSequenceClassification"),$Lo=o(" (CTRL model)"),kLo=l(),A1=a("li"),mce=a("strong"),SLo=o("data2vec-text"),RLo=o(" \u2014 "),mD=a("a"),BLo=o("Data2VecTextForSequenceClassification"),PLo=o(" (Data2VecText model)"),ILo=l(),y1=a("li"),gce=a("strong"),qLo=o("deberta"),NLo=o(" \u2014 "),gD=a("a"),jLo=o("DebertaForSequenceClassification"),DLo=o(" (DeBERTa model)"),GLo=l(),L1=a("li"),hce=a("strong"),OLo=o("deberta-v2"),VLo=o(" \u2014 "),hD=a("a"),XLo=o("DebertaV2ForSequenceClassification"),zLo=o(" (DeBERTa-v2 model)"),QLo=l(),x1=a("li"),pce=a("strong"),WLo=o("distilbert"),HLo=o(" \u2014 "),pD=a("a"),ULo=o("DistilBertForSequenceClassification"),JLo=o(" (DistilBERT model)"),YLo=l(),$1=a("li"),uce=a("strong"),KLo=o("electra"),ZLo=o(" \u2014 "),uD=a("a"),e8o=o("ElectraForSequenceClassification"),o8o=o(" (ELECTRA model)"),r8o=l(),k1=a("li"),_ce=a("strong"),t8o=o("flaubert"),a8o=o(" \u2014 "),_D=a("a"),n8o=o("FlaubertForSequenceClassification"),s8o=o(" (FlauBERT model)"),l8o=l(),S1=a("li"),bce=a("strong"),i8o=o("fnet"),d8o=o(" \u2014 "),bD=a("a"),c8o=o("FNetForSequenceClassification"),f8o=o(" (FNet model)"),m8o=l(),R1=a("li"),vce=a("strong"),g8o=o("funnel"),h8o=o(" \u2014 "),vD=a("a"),p8o=o("FunnelForSequenceClassification"),u8o=o(" (Funnel Transformer model)"),_8o=l(),B1=a("li"),Fce=a("strong"),b8o=o("gpt2"),v8o=o(" \u2014 "),FD=a("a"),F8o=o("GPT2ForSequenceClassification"),T8o=o(" (OpenAI GPT-2 model)"),M8o=l(),P1=a("li"),Tce=a("strong"),E8o=o("gpt_neo"),C8o=o(" \u2014 "),TD=a("a"),w8o=o("GPTNeoForSequenceClassification"),A8o=o(" (GPT Neo model)"),y8o=l(),I1=a("li"),Mce=a("strong"),L8o=o("gptj"),x8o=o(" \u2014 "),MD=a("a"),$8o=o("GPTJForSequenceClassification"),k8o=o(" (GPT-J model)"),S8o=l(),q1=a("li"),Ece=a("strong"),R8o=o("ibert"),B8o=o(" \u2014 "),ED=a("a"),P8o=o("IBertForSequenceClassification"),I8o=o(" (I-BERT model)"),q8o=l(),N1=a("li"),Cce=a("strong"),N8o=o("layoutlm"),j8o=o(" \u2014 "),CD=a("a"),D8o=o("LayoutLMForSequenceClassification"),G8o=o(" (LayoutLM model)"),O8o=l(),j1=a("li"),wce=a("strong"),V8o=o("layoutlmv2"),X8o=o(" \u2014 "),wD=a("a"),z8o=o("LayoutLMv2ForSequenceClassification"),Q8o=o(" (LayoutLMv2 model)"),W8o=l(),D1=a("li"),Ace=a("strong"),H8o=o("led"),U8o=o(" \u2014 "),AD=a("a"),J8o=o("LEDForSequenceClassification"),Y8o=o(" (LED model)"),K8o=l(),G1=a("li"),yce=a("strong"),Z8o=o("longformer"),exo=o(" \u2014 "),yD=a("a"),oxo=o("LongformerForSequenceClassification"),rxo=o(" (Longformer model)"),txo=l(),O1=a("li"),Lce=a("strong"),axo=o("mbart"),nxo=o(" \u2014 "),LD=a("a"),sxo=o("MBartForSequenceClassification"),lxo=o(" (mBART model)"),ixo=l(),V1=a("li"),xce=a("strong"),dxo=o("megatron-bert"),cxo=o(" \u2014 "),xD=a("a"),fxo=o("MegatronBertForSequenceClassification"),mxo=o(" (MegatronBert model)"),gxo=l(),X1=a("li"),$ce=a("strong"),hxo=o("mobilebert"),pxo=o(" \u2014 "),$D=a("a"),uxo=o("MobileBertForSequenceClassification"),_xo=o(" (MobileBERT model)"),bxo=l(),z1=a("li"),kce=a("strong"),vxo=o("mpnet"),Fxo=o(" \u2014 "),kD=a("a"),Txo=o("MPNetForSequenceClassification"),Mxo=o(" (MPNet model)"),Exo=l(),Q1=a("li"),Sce=a("strong"),Cxo=o("nystromformer"),wxo=o(" \u2014 "),SD=a("a"),Axo=o("NystromformerForSequenceClassification"),yxo=o(" (Nystromformer model)"),Lxo=l(),W1=a("li"),Rce=a("strong"),xxo=o("openai-gpt"),$xo=o(" \u2014 "),RD=a("a"),kxo=o("OpenAIGPTForSequenceClassification"),Sxo=o(" (OpenAI GPT model)"),Rxo=l(),H1=a("li"),Bce=a("strong"),Bxo=o("perceiver"),Pxo=o(" \u2014 "),BD=a("a"),Ixo=o("PerceiverForSequenceClassification"),qxo=o(" (Perceiver model)"),Nxo=l(),U1=a("li"),Pce=a("strong"),jxo=o("plbart"),Dxo=o(" \u2014 "),PD=a("a"),Gxo=o("PLBartForSequenceClassification"),Oxo=o(" (PLBart model)"),Vxo=l(),J1=a("li"),Ice=a("strong"),Xxo=o("qdqbert"),zxo=o(" \u2014 "),ID=a("a"),Qxo=o("QDQBertForSequenceClassification"),Wxo=o(" (QDQBert model)"),Hxo=l(),Y1=a("li"),qce=a("strong"),Uxo=o("reformer"),Jxo=o(" \u2014 "),qD=a("a"),Yxo=o("ReformerForSequenceClassification"),Kxo=o(" (Reformer model)"),Zxo=l(),K1=a("li"),Nce=a("strong"),e9o=o("rembert"),o9o=o(" \u2014 "),ND=a("a"),r9o=o("RemBertForSequenceClassification"),t9o=o(" (RemBERT model)"),a9o=l(),Z1=a("li"),jce=a("strong"),n9o=o("roberta"),s9o=o(" \u2014 "),jD=a("a"),l9o=o("RobertaForSequenceClassification"),i9o=o(" (RoBERTa model)"),d9o=l(),eb=a("li"),Dce=a("strong"),c9o=o("roformer"),f9o=o(" \u2014 "),DD=a("a"),m9o=o("RoFormerForSequenceClassification"),g9o=o(" (RoFormer model)"),h9o=l(),ob=a("li"),Gce=a("strong"),p9o=o("squeezebert"),u9o=o(" \u2014 "),GD=a("a"),_9o=o("SqueezeBertForSequenceClassification"),b9o=o(" (SqueezeBERT model)"),v9o=l(),rb=a("li"),Oce=a("strong"),F9o=o("tapas"),T9o=o(" \u2014 "),OD=a("a"),M9o=o("TapasForSequenceClassification"),E9o=o(" (TAPAS model)"),C9o=l(),tb=a("li"),Vce=a("strong"),w9o=o("tapex"),A9o=o(" \u2014 "),VD=a("a"),y9o=o("BartForSequenceClassification"),L9o=o(" (TAPEX model)"),x9o=l(),ab=a("li"),Xce=a("strong"),$9o=o("transfo-xl"),k9o=o(" \u2014 "),XD=a("a"),S9o=o("TransfoXLForSequenceClassification"),R9o=o(" (Transformer-XL model)"),B9o=l(),nb=a("li"),zce=a("strong"),P9o=o("xlm"),I9o=o(" \u2014 "),zD=a("a"),q9o=o("XLMForSequenceClassification"),N9o=o(" (XLM model)"),j9o=l(),sb=a("li"),Qce=a("strong"),D9o=o("xlm-roberta"),G9o=o(" \u2014 "),QD=a("a"),O9o=o("XLMRobertaForSequenceClassification"),V9o=o(" (XLM-RoBERTa model)"),X9o=l(),lb=a("li"),Wce=a("strong"),z9o=o("xlm-roberta-xl"),Q9o=o(" \u2014 "),WD=a("a"),W9o=o("XLMRobertaXLForSequenceClassification"),H9o=o(" (XLM-RoBERTa-XL model)"),U9o=l(),ib=a("li"),Hce=a("strong"),J9o=o("xlnet"),Y9o=o(" \u2014 "),HD=a("a"),K9o=o("XLNetForSequenceClassification"),Z9o=o(" (XLNet model)"),e$o=l(),db=a("li"),Uce=a("strong"),o$o=o("yoso"),r$o=o(" \u2014 "),UD=a("a"),t$o=o("YosoForSequenceClassification"),a$o=o(" (YOSO model)"),n$o=l(),cb=a("p"),s$o=o("The model is set in evaluation mode by default using "),Jce=a("code"),l$o=o("model.eval()"),i$o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Yce=a("code"),d$o=o("model.train()"),c$o=l(),F(fb.$$.fragment),KPe=l(),ji=a("h2"),mb=a("a"),Kce=a("span"),F(UA.$$.fragment),f$o=l(),Zce=a("span"),m$o=o("AutoModelForMultipleChoice"),ZPe=l(),Bo=a("div"),F(JA.$$.fragment),g$o=l(),Di=a("p"),h$o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),JD=a("a"),p$o=o("from_pretrained()"),u$o=o(" class method or the "),YD=a("a"),_$o=o("from_config()"),b$o=o(` class
method.`),v$o=l(),YA=a("p"),F$o=o("This class cannot be instantiated directly using "),efe=a("code"),T$o=o("__init__()"),M$o=o(" (throws an error)."),E$o=l(),lt=a("div"),F(KA.$$.fragment),C$o=l(),ofe=a("p"),w$o=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),A$o=l(),Gi=a("p"),y$o=o(`Note:
Loading a model from its configuration file does `),rfe=a("strong"),L$o=o("not"),x$o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),KD=a("a"),$$o=o("from_pretrained()"),k$o=o(" to load the model weights."),S$o=l(),F(gb.$$.fragment),R$o=l(),eo=a("div"),F(ZA.$$.fragment),B$o=l(),tfe=a("p"),P$o=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),I$o=l(),Sa=a("p"),q$o=o("The model class to instantiate is selected based on the "),afe=a("code"),N$o=o("model_type"),j$o=o(` property of the config object (either
passed as an argument or loaded from `),nfe=a("code"),D$o=o("pretrained_model_name_or_path"),G$o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sfe=a("code"),O$o=o("pretrained_model_name_or_path"),V$o=o(":"),X$o=l(),Y=a("ul"),hb=a("li"),lfe=a("strong"),z$o=o("albert"),Q$o=o(" \u2014 "),ZD=a("a"),W$o=o("AlbertForMultipleChoice"),H$o=o(" (ALBERT model)"),U$o=l(),pb=a("li"),ife=a("strong"),J$o=o("bert"),Y$o=o(" \u2014 "),eG=a("a"),K$o=o("BertForMultipleChoice"),Z$o=o(" (BERT model)"),eko=l(),ub=a("li"),dfe=a("strong"),oko=o("big_bird"),rko=o(" \u2014 "),oG=a("a"),tko=o("BigBirdForMultipleChoice"),ako=o(" (BigBird model)"),nko=l(),_b=a("li"),cfe=a("strong"),sko=o("camembert"),lko=o(" \u2014 "),rG=a("a"),iko=o("CamembertForMultipleChoice"),dko=o(" (CamemBERT model)"),cko=l(),bb=a("li"),ffe=a("strong"),fko=o("canine"),mko=o(" \u2014 "),tG=a("a"),gko=o("CanineForMultipleChoice"),hko=o(" (Canine model)"),pko=l(),vb=a("li"),mfe=a("strong"),uko=o("convbert"),_ko=o(" \u2014 "),aG=a("a"),bko=o("ConvBertForMultipleChoice"),vko=o(" (ConvBERT model)"),Fko=l(),Fb=a("li"),gfe=a("strong"),Tko=o("data2vec-text"),Mko=o(" \u2014 "),nG=a("a"),Eko=o("Data2VecTextForMultipleChoice"),Cko=o(" (Data2VecText model)"),wko=l(),Tb=a("li"),hfe=a("strong"),Ako=o("deberta-v2"),yko=o(" \u2014 "),sG=a("a"),Lko=o("DebertaV2ForMultipleChoice"),xko=o(" (DeBERTa-v2 model)"),$ko=l(),Mb=a("li"),pfe=a("strong"),kko=o("distilbert"),Sko=o(" \u2014 "),lG=a("a"),Rko=o("DistilBertForMultipleChoice"),Bko=o(" (DistilBERT model)"),Pko=l(),Eb=a("li"),ufe=a("strong"),Iko=o("electra"),qko=o(" \u2014 "),iG=a("a"),Nko=o("ElectraForMultipleChoice"),jko=o(" (ELECTRA model)"),Dko=l(),Cb=a("li"),_fe=a("strong"),Gko=o("flaubert"),Oko=o(" \u2014 "),dG=a("a"),Vko=o("FlaubertForMultipleChoice"),Xko=o(" (FlauBERT model)"),zko=l(),wb=a("li"),bfe=a("strong"),Qko=o("fnet"),Wko=o(" \u2014 "),cG=a("a"),Hko=o("FNetForMultipleChoice"),Uko=o(" (FNet model)"),Jko=l(),Ab=a("li"),vfe=a("strong"),Yko=o("funnel"),Kko=o(" \u2014 "),fG=a("a"),Zko=o("FunnelForMultipleChoice"),eSo=o(" (Funnel Transformer model)"),oSo=l(),yb=a("li"),Ffe=a("strong"),rSo=o("ibert"),tSo=o(" \u2014 "),mG=a("a"),aSo=o("IBertForMultipleChoice"),nSo=o(" (I-BERT model)"),sSo=l(),Lb=a("li"),Tfe=a("strong"),lSo=o("longformer"),iSo=o(" \u2014 "),gG=a("a"),dSo=o("LongformerForMultipleChoice"),cSo=o(" (Longformer model)"),fSo=l(),xb=a("li"),Mfe=a("strong"),mSo=o("megatron-bert"),gSo=o(" \u2014 "),hG=a("a"),hSo=o("MegatronBertForMultipleChoice"),pSo=o(" (MegatronBert model)"),uSo=l(),$b=a("li"),Efe=a("strong"),_So=o("mobilebert"),bSo=o(" \u2014 "),pG=a("a"),vSo=o("MobileBertForMultipleChoice"),FSo=o(" (MobileBERT model)"),TSo=l(),kb=a("li"),Cfe=a("strong"),MSo=o("mpnet"),ESo=o(" \u2014 "),uG=a("a"),CSo=o("MPNetForMultipleChoice"),wSo=o(" (MPNet model)"),ASo=l(),Sb=a("li"),wfe=a("strong"),ySo=o("nystromformer"),LSo=o(" \u2014 "),_G=a("a"),xSo=o("NystromformerForMultipleChoice"),$So=o(" (Nystromformer model)"),kSo=l(),Rb=a("li"),Afe=a("strong"),SSo=o("qdqbert"),RSo=o(" \u2014 "),bG=a("a"),BSo=o("QDQBertForMultipleChoice"),PSo=o(" (QDQBert model)"),ISo=l(),Bb=a("li"),yfe=a("strong"),qSo=o("rembert"),NSo=o(" \u2014 "),vG=a("a"),jSo=o("RemBertForMultipleChoice"),DSo=o(" (RemBERT model)"),GSo=l(),Pb=a("li"),Lfe=a("strong"),OSo=o("roberta"),VSo=o(" \u2014 "),FG=a("a"),XSo=o("RobertaForMultipleChoice"),zSo=o(" (RoBERTa model)"),QSo=l(),Ib=a("li"),xfe=a("strong"),WSo=o("roformer"),HSo=o(" \u2014 "),TG=a("a"),USo=o("RoFormerForMultipleChoice"),JSo=o(" (RoFormer model)"),YSo=l(),qb=a("li"),$fe=a("strong"),KSo=o("squeezebert"),ZSo=o(" \u2014 "),MG=a("a"),eRo=o("SqueezeBertForMultipleChoice"),oRo=o(" (SqueezeBERT model)"),rRo=l(),Nb=a("li"),kfe=a("strong"),tRo=o("xlm"),aRo=o(" \u2014 "),EG=a("a"),nRo=o("XLMForMultipleChoice"),sRo=o(" (XLM model)"),lRo=l(),jb=a("li"),Sfe=a("strong"),iRo=o("xlm-roberta"),dRo=o(" \u2014 "),CG=a("a"),cRo=o("XLMRobertaForMultipleChoice"),fRo=o(" (XLM-RoBERTa model)"),mRo=l(),Db=a("li"),Rfe=a("strong"),gRo=o("xlm-roberta-xl"),hRo=o(" \u2014 "),wG=a("a"),pRo=o("XLMRobertaXLForMultipleChoice"),uRo=o(" (XLM-RoBERTa-XL model)"),_Ro=l(),Gb=a("li"),Bfe=a("strong"),bRo=o("xlnet"),vRo=o(" \u2014 "),AG=a("a"),FRo=o("XLNetForMultipleChoice"),TRo=o(" (XLNet model)"),MRo=l(),Ob=a("li"),Pfe=a("strong"),ERo=o("yoso"),CRo=o(" \u2014 "),yG=a("a"),wRo=o("YosoForMultipleChoice"),ARo=o(" (YOSO model)"),yRo=l(),Vb=a("p"),LRo=o("The model is set in evaluation mode by default using "),Ife=a("code"),xRo=o("model.eval()"),$Ro=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),qfe=a("code"),kRo=o("model.train()"),SRo=l(),F(Xb.$$.fragment),eIe=l(),Oi=a("h2"),zb=a("a"),Nfe=a("span"),F(ey.$$.fragment),RRo=l(),jfe=a("span"),BRo=o("AutoModelForNextSentencePrediction"),oIe=l(),Po=a("div"),F(oy.$$.fragment),PRo=l(),Vi=a("p"),IRo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),LG=a("a"),qRo=o("from_pretrained()"),NRo=o(" class method or the "),xG=a("a"),jRo=o("from_config()"),DRo=o(` class
method.`),GRo=l(),ry=a("p"),ORo=o("This class cannot be instantiated directly using "),Dfe=a("code"),VRo=o("__init__()"),XRo=o(" (throws an error)."),zRo=l(),it=a("div"),F(ty.$$.fragment),QRo=l(),Gfe=a("p"),WRo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),HRo=l(),Xi=a("p"),URo=o(`Note:
Loading a model from its configuration file does `),Ofe=a("strong"),JRo=o("not"),YRo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$G=a("a"),KRo=o("from_pretrained()"),ZRo=o(" to load the model weights."),eBo=l(),F(Qb.$$.fragment),oBo=l(),oo=a("div"),F(ay.$$.fragment),rBo=l(),Vfe=a("p"),tBo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),aBo=l(),Ra=a("p"),nBo=o("The model class to instantiate is selected based on the "),Xfe=a("code"),sBo=o("model_type"),lBo=o(` property of the config object (either
passed as an argument or loaded from `),zfe=a("code"),iBo=o("pretrained_model_name_or_path"),dBo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qfe=a("code"),cBo=o("pretrained_model_name_or_path"),fBo=o(":"),mBo=l(),Yr=a("ul"),Wb=a("li"),Wfe=a("strong"),gBo=o("bert"),hBo=o(" \u2014 "),kG=a("a"),pBo=o("BertForNextSentencePrediction"),uBo=o(" (BERT model)"),_Bo=l(),Hb=a("li"),Hfe=a("strong"),bBo=o("fnet"),vBo=o(" \u2014 "),SG=a("a"),FBo=o("FNetForNextSentencePrediction"),TBo=o(" (FNet model)"),MBo=l(),Ub=a("li"),Ufe=a("strong"),EBo=o("megatron-bert"),CBo=o(" \u2014 "),RG=a("a"),wBo=o("MegatronBertForNextSentencePrediction"),ABo=o(" (MegatronBert model)"),yBo=l(),Jb=a("li"),Jfe=a("strong"),LBo=o("mobilebert"),xBo=o(" \u2014 "),BG=a("a"),$Bo=o("MobileBertForNextSentencePrediction"),kBo=o(" (MobileBERT model)"),SBo=l(),Yb=a("li"),Yfe=a("strong"),RBo=o("qdqbert"),BBo=o(" \u2014 "),PG=a("a"),PBo=o("QDQBertForNextSentencePrediction"),IBo=o(" (QDQBert model)"),qBo=l(),Kb=a("p"),NBo=o("The model is set in evaluation mode by default using "),Kfe=a("code"),jBo=o("model.eval()"),DBo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Zfe=a("code"),GBo=o("model.train()"),OBo=l(),F(Zb.$$.fragment),rIe=l(),zi=a("h2"),ev=a("a"),eme=a("span"),F(ny.$$.fragment),VBo=l(),ome=a("span"),XBo=o("AutoModelForTokenClassification"),tIe=l(),Io=a("div"),F(sy.$$.fragment),zBo=l(),Qi=a("p"),QBo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),IG=a("a"),WBo=o("from_pretrained()"),HBo=o(" class method or the "),qG=a("a"),UBo=o("from_config()"),JBo=o(` class
method.`),YBo=l(),ly=a("p"),KBo=o("This class cannot be instantiated directly using "),rme=a("code"),ZBo=o("__init__()"),ePo=o(" (throws an error)."),oPo=l(),dt=a("div"),F(iy.$$.fragment),rPo=l(),tme=a("p"),tPo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),aPo=l(),Wi=a("p"),nPo=o(`Note:
Loading a model from its configuration file does `),ame=a("strong"),sPo=o("not"),lPo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),NG=a("a"),iPo=o("from_pretrained()"),dPo=o(" to load the model weights."),cPo=l(),F(ov.$$.fragment),fPo=l(),ro=a("div"),F(dy.$$.fragment),mPo=l(),nme=a("p"),gPo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),hPo=l(),Ba=a("p"),pPo=o("The model class to instantiate is selected based on the "),sme=a("code"),uPo=o("model_type"),_Po=o(` property of the config object (either
passed as an argument or loaded from `),lme=a("code"),bPo=o("pretrained_model_name_or_path"),vPo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ime=a("code"),FPo=o("pretrained_model_name_or_path"),TPo=o(":"),MPo=l(),U=a("ul"),rv=a("li"),dme=a("strong"),EPo=o("albert"),CPo=o(" \u2014 "),jG=a("a"),wPo=o("AlbertForTokenClassification"),APo=o(" (ALBERT model)"),yPo=l(),tv=a("li"),cme=a("strong"),LPo=o("bert"),xPo=o(" \u2014 "),DG=a("a"),$Po=o("BertForTokenClassification"),kPo=o(" (BERT model)"),SPo=l(),av=a("li"),fme=a("strong"),RPo=o("big_bird"),BPo=o(" \u2014 "),GG=a("a"),PPo=o("BigBirdForTokenClassification"),IPo=o(" (BigBird model)"),qPo=l(),nv=a("li"),mme=a("strong"),NPo=o("camembert"),jPo=o(" \u2014 "),OG=a("a"),DPo=o("CamembertForTokenClassification"),GPo=o(" (CamemBERT model)"),OPo=l(),sv=a("li"),gme=a("strong"),VPo=o("canine"),XPo=o(" \u2014 "),VG=a("a"),zPo=o("CanineForTokenClassification"),QPo=o(" (Canine model)"),WPo=l(),lv=a("li"),hme=a("strong"),HPo=o("convbert"),UPo=o(" \u2014 "),XG=a("a"),JPo=o("ConvBertForTokenClassification"),YPo=o(" (ConvBERT model)"),KPo=l(),iv=a("li"),pme=a("strong"),ZPo=o("data2vec-text"),eIo=o(" \u2014 "),zG=a("a"),oIo=o("Data2VecTextForTokenClassification"),rIo=o(" (Data2VecText model)"),tIo=l(),dv=a("li"),ume=a("strong"),aIo=o("deberta"),nIo=o(" \u2014 "),QG=a("a"),sIo=o("DebertaForTokenClassification"),lIo=o(" (DeBERTa model)"),iIo=l(),cv=a("li"),_me=a("strong"),dIo=o("deberta-v2"),cIo=o(" \u2014 "),WG=a("a"),fIo=o("DebertaV2ForTokenClassification"),mIo=o(" (DeBERTa-v2 model)"),gIo=l(),fv=a("li"),bme=a("strong"),hIo=o("distilbert"),pIo=o(" \u2014 "),HG=a("a"),uIo=o("DistilBertForTokenClassification"),_Io=o(" (DistilBERT model)"),bIo=l(),mv=a("li"),vme=a("strong"),vIo=o("electra"),FIo=o(" \u2014 "),UG=a("a"),TIo=o("ElectraForTokenClassification"),MIo=o(" (ELECTRA model)"),EIo=l(),gv=a("li"),Fme=a("strong"),CIo=o("flaubert"),wIo=o(" \u2014 "),JG=a("a"),AIo=o("FlaubertForTokenClassification"),yIo=o(" (FlauBERT model)"),LIo=l(),hv=a("li"),Tme=a("strong"),xIo=o("fnet"),$Io=o(" \u2014 "),YG=a("a"),kIo=o("FNetForTokenClassification"),SIo=o(" (FNet model)"),RIo=l(),pv=a("li"),Mme=a("strong"),BIo=o("funnel"),PIo=o(" \u2014 "),KG=a("a"),IIo=o("FunnelForTokenClassification"),qIo=o(" (Funnel Transformer model)"),NIo=l(),uv=a("li"),Eme=a("strong"),jIo=o("gpt2"),DIo=o(" \u2014 "),ZG=a("a"),GIo=o("GPT2ForTokenClassification"),OIo=o(" (OpenAI GPT-2 model)"),VIo=l(),_v=a("li"),Cme=a("strong"),XIo=o("ibert"),zIo=o(" \u2014 "),eO=a("a"),QIo=o("IBertForTokenClassification"),WIo=o(" (I-BERT model)"),HIo=l(),bv=a("li"),wme=a("strong"),UIo=o("layoutlm"),JIo=o(" \u2014 "),oO=a("a"),YIo=o("LayoutLMForTokenClassification"),KIo=o(" (LayoutLM model)"),ZIo=l(),vv=a("li"),Ame=a("strong"),eqo=o("layoutlmv2"),oqo=o(" \u2014 "),rO=a("a"),rqo=o("LayoutLMv2ForTokenClassification"),tqo=o(" (LayoutLMv2 model)"),aqo=l(),Fv=a("li"),yme=a("strong"),nqo=o("longformer"),sqo=o(" \u2014 "),tO=a("a"),lqo=o("LongformerForTokenClassification"),iqo=o(" (Longformer model)"),dqo=l(),Tv=a("li"),Lme=a("strong"),cqo=o("megatron-bert"),fqo=o(" \u2014 "),aO=a("a"),mqo=o("MegatronBertForTokenClassification"),gqo=o(" (MegatronBert model)"),hqo=l(),Mv=a("li"),xme=a("strong"),pqo=o("mobilebert"),uqo=o(" \u2014 "),nO=a("a"),_qo=o("MobileBertForTokenClassification"),bqo=o(" (MobileBERT model)"),vqo=l(),Ev=a("li"),$me=a("strong"),Fqo=o("mpnet"),Tqo=o(" \u2014 "),sO=a("a"),Mqo=o("MPNetForTokenClassification"),Eqo=o(" (MPNet model)"),Cqo=l(),Cv=a("li"),kme=a("strong"),wqo=o("nystromformer"),Aqo=o(" \u2014 "),lO=a("a"),yqo=o("NystromformerForTokenClassification"),Lqo=o(" (Nystromformer model)"),xqo=l(),wv=a("li"),Sme=a("strong"),$qo=o("qdqbert"),kqo=o(" \u2014 "),iO=a("a"),Sqo=o("QDQBertForTokenClassification"),Rqo=o(" (QDQBert model)"),Bqo=l(),Av=a("li"),Rme=a("strong"),Pqo=o("rembert"),Iqo=o(" \u2014 "),dO=a("a"),qqo=o("RemBertForTokenClassification"),Nqo=o(" (RemBERT model)"),jqo=l(),yv=a("li"),Bme=a("strong"),Dqo=o("roberta"),Gqo=o(" \u2014 "),cO=a("a"),Oqo=o("RobertaForTokenClassification"),Vqo=o(" (RoBERTa model)"),Xqo=l(),Lv=a("li"),Pme=a("strong"),zqo=o("roformer"),Qqo=o(" \u2014 "),fO=a("a"),Wqo=o("RoFormerForTokenClassification"),Hqo=o(" (RoFormer model)"),Uqo=l(),xv=a("li"),Ime=a("strong"),Jqo=o("squeezebert"),Yqo=o(" \u2014 "),mO=a("a"),Kqo=o("SqueezeBertForTokenClassification"),Zqo=o(" (SqueezeBERT model)"),eNo=l(),$v=a("li"),qme=a("strong"),oNo=o("xlm"),rNo=o(" \u2014 "),gO=a("a"),tNo=o("XLMForTokenClassification"),aNo=o(" (XLM model)"),nNo=l(),kv=a("li"),Nme=a("strong"),sNo=o("xlm-roberta"),lNo=o(" \u2014 "),hO=a("a"),iNo=o("XLMRobertaForTokenClassification"),dNo=o(" (XLM-RoBERTa model)"),cNo=l(),Sv=a("li"),jme=a("strong"),fNo=o("xlm-roberta-xl"),mNo=o(" \u2014 "),pO=a("a"),gNo=o("XLMRobertaXLForTokenClassification"),hNo=o(" (XLM-RoBERTa-XL model)"),pNo=l(),Rv=a("li"),Dme=a("strong"),uNo=o("xlnet"),_No=o(" \u2014 "),uO=a("a"),bNo=o("XLNetForTokenClassification"),vNo=o(" (XLNet model)"),FNo=l(),Bv=a("li"),Gme=a("strong"),TNo=o("yoso"),MNo=o(" \u2014 "),_O=a("a"),ENo=o("YosoForTokenClassification"),CNo=o(" (YOSO model)"),wNo=l(),Pv=a("p"),ANo=o("The model is set in evaluation mode by default using "),Ome=a("code"),yNo=o("model.eval()"),LNo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Vme=a("code"),xNo=o("model.train()"),$No=l(),F(Iv.$$.fragment),aIe=l(),Hi=a("h2"),qv=a("a"),Xme=a("span"),F(cy.$$.fragment),kNo=l(),zme=a("span"),SNo=o("AutoModelForQuestionAnswering"),nIe=l(),qo=a("div"),F(fy.$$.fragment),RNo=l(),Ui=a("p"),BNo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),bO=a("a"),PNo=o("from_pretrained()"),INo=o(" class method or the "),vO=a("a"),qNo=o("from_config()"),NNo=o(` class
method.`),jNo=l(),my=a("p"),DNo=o("This class cannot be instantiated directly using "),Qme=a("code"),GNo=o("__init__()"),ONo=o(" (throws an error)."),VNo=l(),ct=a("div"),F(gy.$$.fragment),XNo=l(),Wme=a("p"),zNo=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),QNo=l(),Ji=a("p"),WNo=o(`Note:
Loading a model from its configuration file does `),Hme=a("strong"),HNo=o("not"),UNo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),FO=a("a"),JNo=o("from_pretrained()"),YNo=o(" to load the model weights."),KNo=l(),F(Nv.$$.fragment),ZNo=l(),to=a("div"),F(hy.$$.fragment),ejo=l(),Ume=a("p"),ojo=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),rjo=l(),Pa=a("p"),tjo=o("The model class to instantiate is selected based on the "),Jme=a("code"),ajo=o("model_type"),njo=o(` property of the config object (either
passed as an argument or loaded from `),Yme=a("code"),sjo=o("pretrained_model_name_or_path"),ljo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kme=a("code"),ijo=o("pretrained_model_name_or_path"),djo=o(":"),cjo=l(),O=a("ul"),jv=a("li"),Zme=a("strong"),fjo=o("albert"),mjo=o(" \u2014 "),TO=a("a"),gjo=o("AlbertForQuestionAnswering"),hjo=o(" (ALBERT model)"),pjo=l(),Dv=a("li"),ege=a("strong"),ujo=o("bart"),_jo=o(" \u2014 "),MO=a("a"),bjo=o("BartForQuestionAnswering"),vjo=o(" (BART model)"),Fjo=l(),Gv=a("li"),oge=a("strong"),Tjo=o("bert"),Mjo=o(" \u2014 "),EO=a("a"),Ejo=o("BertForQuestionAnswering"),Cjo=o(" (BERT model)"),wjo=l(),Ov=a("li"),rge=a("strong"),Ajo=o("big_bird"),yjo=o(" \u2014 "),CO=a("a"),Ljo=o("BigBirdForQuestionAnswering"),xjo=o(" (BigBird model)"),$jo=l(),Vv=a("li"),tge=a("strong"),kjo=o("bigbird_pegasus"),Sjo=o(" \u2014 "),wO=a("a"),Rjo=o("BigBirdPegasusForQuestionAnswering"),Bjo=o(" (BigBirdPegasus model)"),Pjo=l(),Xv=a("li"),age=a("strong"),Ijo=o("camembert"),qjo=o(" \u2014 "),AO=a("a"),Njo=o("CamembertForQuestionAnswering"),jjo=o(" (CamemBERT model)"),Djo=l(),zv=a("li"),nge=a("strong"),Gjo=o("canine"),Ojo=o(" \u2014 "),yO=a("a"),Vjo=o("CanineForQuestionAnswering"),Xjo=o(" (Canine model)"),zjo=l(),Qv=a("li"),sge=a("strong"),Qjo=o("convbert"),Wjo=o(" \u2014 "),LO=a("a"),Hjo=o("ConvBertForQuestionAnswering"),Ujo=o(" (ConvBERT model)"),Jjo=l(),Wv=a("li"),lge=a("strong"),Yjo=o("data2vec-text"),Kjo=o(" \u2014 "),xO=a("a"),Zjo=o("Data2VecTextForQuestionAnswering"),eDo=o(" (Data2VecText model)"),oDo=l(),Hv=a("li"),ige=a("strong"),rDo=o("deberta"),tDo=o(" \u2014 "),$O=a("a"),aDo=o("DebertaForQuestionAnswering"),nDo=o(" (DeBERTa model)"),sDo=l(),Uv=a("li"),dge=a("strong"),lDo=o("deberta-v2"),iDo=o(" \u2014 "),kO=a("a"),dDo=o("DebertaV2ForQuestionAnswering"),cDo=o(" (DeBERTa-v2 model)"),fDo=l(),Jv=a("li"),cge=a("strong"),mDo=o("distilbert"),gDo=o(" \u2014 "),SO=a("a"),hDo=o("DistilBertForQuestionAnswering"),pDo=o(" (DistilBERT model)"),uDo=l(),Yv=a("li"),fge=a("strong"),_Do=o("electra"),bDo=o(" \u2014 "),RO=a("a"),vDo=o("ElectraForQuestionAnswering"),FDo=o(" (ELECTRA model)"),TDo=l(),Kv=a("li"),mge=a("strong"),MDo=o("flaubert"),EDo=o(" \u2014 "),BO=a("a"),CDo=o("FlaubertForQuestionAnsweringSimple"),wDo=o(" (FlauBERT model)"),ADo=l(),Zv=a("li"),gge=a("strong"),yDo=o("fnet"),LDo=o(" \u2014 "),PO=a("a"),xDo=o("FNetForQuestionAnswering"),$Do=o(" (FNet model)"),kDo=l(),eF=a("li"),hge=a("strong"),SDo=o("funnel"),RDo=o(" \u2014 "),IO=a("a"),BDo=o("FunnelForQuestionAnswering"),PDo=o(" (Funnel Transformer model)"),IDo=l(),oF=a("li"),pge=a("strong"),qDo=o("gptj"),NDo=o(" \u2014 "),qO=a("a"),jDo=o("GPTJForQuestionAnswering"),DDo=o(" (GPT-J model)"),GDo=l(),rF=a("li"),uge=a("strong"),ODo=o("ibert"),VDo=o(" \u2014 "),NO=a("a"),XDo=o("IBertForQuestionAnswering"),zDo=o(" (I-BERT model)"),QDo=l(),tF=a("li"),_ge=a("strong"),WDo=o("layoutlmv2"),HDo=o(" \u2014 "),jO=a("a"),UDo=o("LayoutLMv2ForQuestionAnswering"),JDo=o(" (LayoutLMv2 model)"),YDo=l(),aF=a("li"),bge=a("strong"),KDo=o("led"),ZDo=o(" \u2014 "),DO=a("a"),eGo=o("LEDForQuestionAnswering"),oGo=o(" (LED model)"),rGo=l(),nF=a("li"),vge=a("strong"),tGo=o("longformer"),aGo=o(" \u2014 "),GO=a("a"),nGo=o("LongformerForQuestionAnswering"),sGo=o(" (Longformer model)"),lGo=l(),sF=a("li"),Fge=a("strong"),iGo=o("lxmert"),dGo=o(" \u2014 "),OO=a("a"),cGo=o("LxmertForQuestionAnswering"),fGo=o(" (LXMERT model)"),mGo=l(),lF=a("li"),Tge=a("strong"),gGo=o("mbart"),hGo=o(" \u2014 "),VO=a("a"),pGo=o("MBartForQuestionAnswering"),uGo=o(" (mBART model)"),_Go=l(),iF=a("li"),Mge=a("strong"),bGo=o("megatron-bert"),vGo=o(" \u2014 "),XO=a("a"),FGo=o("MegatronBertForQuestionAnswering"),TGo=o(" (MegatronBert model)"),MGo=l(),dF=a("li"),Ege=a("strong"),EGo=o("mobilebert"),CGo=o(" \u2014 "),zO=a("a"),wGo=o("MobileBertForQuestionAnswering"),AGo=o(" (MobileBERT model)"),yGo=l(),cF=a("li"),Cge=a("strong"),LGo=o("mpnet"),xGo=o(" \u2014 "),QO=a("a"),$Go=o("MPNetForQuestionAnswering"),kGo=o(" (MPNet model)"),SGo=l(),fF=a("li"),wge=a("strong"),RGo=o("nystromformer"),BGo=o(" \u2014 "),WO=a("a"),PGo=o("NystromformerForQuestionAnswering"),IGo=o(" (Nystromformer model)"),qGo=l(),mF=a("li"),Age=a("strong"),NGo=o("qdqbert"),jGo=o(" \u2014 "),HO=a("a"),DGo=o("QDQBertForQuestionAnswering"),GGo=o(" (QDQBert model)"),OGo=l(),gF=a("li"),yge=a("strong"),VGo=o("reformer"),XGo=o(" \u2014 "),UO=a("a"),zGo=o("ReformerForQuestionAnswering"),QGo=o(" (Reformer model)"),WGo=l(),hF=a("li"),Lge=a("strong"),HGo=o("rembert"),UGo=o(" \u2014 "),JO=a("a"),JGo=o("RemBertForQuestionAnswering"),YGo=o(" (RemBERT model)"),KGo=l(),pF=a("li"),xge=a("strong"),ZGo=o("roberta"),eOo=o(" \u2014 "),YO=a("a"),oOo=o("RobertaForQuestionAnswering"),rOo=o(" (RoBERTa model)"),tOo=l(),uF=a("li"),$ge=a("strong"),aOo=o("roformer"),nOo=o(" \u2014 "),KO=a("a"),sOo=o("RoFormerForQuestionAnswering"),lOo=o(" (RoFormer model)"),iOo=l(),_F=a("li"),kge=a("strong"),dOo=o("splinter"),cOo=o(" \u2014 "),ZO=a("a"),fOo=o("SplinterForQuestionAnswering"),mOo=o(" (Splinter model)"),gOo=l(),bF=a("li"),Sge=a("strong"),hOo=o("squeezebert"),pOo=o(" \u2014 "),eV=a("a"),uOo=o("SqueezeBertForQuestionAnswering"),_Oo=o(" (SqueezeBERT model)"),bOo=l(),vF=a("li"),Rge=a("strong"),vOo=o("xlm"),FOo=o(" \u2014 "),oV=a("a"),TOo=o("XLMForQuestionAnsweringSimple"),MOo=o(" (XLM model)"),EOo=l(),FF=a("li"),Bge=a("strong"),COo=o("xlm-roberta"),wOo=o(" \u2014 "),rV=a("a"),AOo=o("XLMRobertaForQuestionAnswering"),yOo=o(" (XLM-RoBERTa model)"),LOo=l(),TF=a("li"),Pge=a("strong"),xOo=o("xlm-roberta-xl"),$Oo=o(" \u2014 "),tV=a("a"),kOo=o("XLMRobertaXLForQuestionAnswering"),SOo=o(" (XLM-RoBERTa-XL model)"),ROo=l(),MF=a("li"),Ige=a("strong"),BOo=o("xlnet"),POo=o(" \u2014 "),aV=a("a"),IOo=o("XLNetForQuestionAnsweringSimple"),qOo=o(" (XLNet model)"),NOo=l(),EF=a("li"),qge=a("strong"),jOo=o("yoso"),DOo=o(" \u2014 "),nV=a("a"),GOo=o("YosoForQuestionAnswering"),OOo=o(" (YOSO model)"),VOo=l(),CF=a("p"),XOo=o("The model is set in evaluation mode by default using "),Nge=a("code"),zOo=o("model.eval()"),QOo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),jge=a("code"),WOo=o("model.train()"),HOo=l(),F(wF.$$.fragment),sIe=l(),Yi=a("h2"),AF=a("a"),Dge=a("span"),F(py.$$.fragment),UOo=l(),Gge=a("span"),JOo=o("AutoModelForTableQuestionAnswering"),lIe=l(),No=a("div"),F(uy.$$.fragment),YOo=l(),Ki=a("p"),KOo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),sV=a("a"),ZOo=o("from_pretrained()"),eVo=o(" class method or the "),lV=a("a"),oVo=o("from_config()"),rVo=o(` class
method.`),tVo=l(),_y=a("p"),aVo=o("This class cannot be instantiated directly using "),Oge=a("code"),nVo=o("__init__()"),sVo=o(" (throws an error)."),lVo=l(),ft=a("div"),F(by.$$.fragment),iVo=l(),Vge=a("p"),dVo=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),cVo=l(),Zi=a("p"),fVo=o(`Note:
Loading a model from its configuration file does `),Xge=a("strong"),mVo=o("not"),gVo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),iV=a("a"),hVo=o("from_pretrained()"),pVo=o(" to load the model weights."),uVo=l(),F(yF.$$.fragment),_Vo=l(),ao=a("div"),F(vy.$$.fragment),bVo=l(),zge=a("p"),vVo=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),FVo=l(),Ia=a("p"),TVo=o("The model class to instantiate is selected based on the "),Qge=a("code"),MVo=o("model_type"),EVo=o(` property of the config object (either
passed as an argument or loaded from `),Wge=a("code"),CVo=o("pretrained_model_name_or_path"),wVo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hge=a("code"),AVo=o("pretrained_model_name_or_path"),yVo=o(":"),LVo=l(),Uge=a("ul"),LF=a("li"),Jge=a("strong"),xVo=o("tapas"),$Vo=o(" \u2014 "),dV=a("a"),kVo=o("TapasForQuestionAnswering"),SVo=o(" (TAPAS model)"),RVo=l(),xF=a("p"),BVo=o("The model is set in evaluation mode by default using "),Yge=a("code"),PVo=o("model.eval()"),IVo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Kge=a("code"),qVo=o("model.train()"),NVo=l(),F($F.$$.fragment),iIe=l(),ed=a("h2"),kF=a("a"),Zge=a("span"),F(Fy.$$.fragment),jVo=l(),ehe=a("span"),DVo=o("AutoModelForImageClassification"),dIe=l(),jo=a("div"),F(Ty.$$.fragment),GVo=l(),od=a("p"),OVo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),cV=a("a"),VVo=o("from_pretrained()"),XVo=o(" class method or the "),fV=a("a"),zVo=o("from_config()"),QVo=o(` class
method.`),WVo=l(),My=a("p"),HVo=o("This class cannot be instantiated directly using "),ohe=a("code"),UVo=o("__init__()"),JVo=o(" (throws an error)."),YVo=l(),mt=a("div"),F(Ey.$$.fragment),KVo=l(),rhe=a("p"),ZVo=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),eXo=l(),rd=a("p"),oXo=o(`Note:
Loading a model from its configuration file does `),the=a("strong"),rXo=o("not"),tXo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mV=a("a"),aXo=o("from_pretrained()"),nXo=o(" to load the model weights."),sXo=l(),F(SF.$$.fragment),lXo=l(),no=a("div"),F(Cy.$$.fragment),iXo=l(),ahe=a("p"),dXo=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),cXo=l(),qa=a("p"),fXo=o("The model class to instantiate is selected based on the "),nhe=a("code"),mXo=o("model_type"),gXo=o(` property of the config object (either
passed as an argument or loaded from `),she=a("code"),hXo=o("pretrained_model_name_or_path"),pXo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lhe=a("code"),uXo=o("pretrained_model_name_or_path"),_Xo=o(":"),bXo=l(),Fe=a("ul"),RF=a("li"),ihe=a("strong"),vXo=o("beit"),FXo=o(" \u2014 "),gV=a("a"),TXo=o("BeitForImageClassification"),MXo=o(" (BEiT model)"),EXo=l(),BF=a("li"),dhe=a("strong"),CXo=o("convnext"),wXo=o(" \u2014 "),hV=a("a"),AXo=o("ConvNextForImageClassification"),yXo=o(" (ConvNext model)"),LXo=l(),PF=a("li"),che=a("strong"),xXo=o("data2vec-vision"),$Xo=o(" \u2014 "),pV=a("a"),kXo=o("Data2VecVisionForImageClassification"),SXo=o(" (Data2VecVision model)"),RXo=l(),Rs=a("li"),fhe=a("strong"),BXo=o("deit"),PXo=o(" \u2014 "),uV=a("a"),IXo=o("DeiTForImageClassification"),qXo=o(" or "),_V=a("a"),NXo=o("DeiTForImageClassificationWithTeacher"),jXo=o(" (DeiT model)"),DXo=l(),IF=a("li"),mhe=a("strong"),GXo=o("imagegpt"),OXo=o(" \u2014 "),bV=a("a"),VXo=o("ImageGPTForImageClassification"),XXo=o(" (ImageGPT model)"),zXo=l(),gt=a("li"),ghe=a("strong"),QXo=o("perceiver"),WXo=o(" \u2014 "),vV=a("a"),HXo=o("PerceiverForImageClassificationLearned"),UXo=o(" or "),FV=a("a"),JXo=o("PerceiverForImageClassificationFourier"),YXo=o(" or "),TV=a("a"),KXo=o("PerceiverForImageClassificationConvProcessing"),ZXo=o(" (Perceiver model)"),ezo=l(),qF=a("li"),hhe=a("strong"),ozo=o("poolformer"),rzo=o(" \u2014 "),MV=a("a"),tzo=o("PoolFormerForImageClassification"),azo=o(" (PoolFormer model)"),nzo=l(),NF=a("li"),phe=a("strong"),szo=o("regnet"),lzo=o(" \u2014 "),EV=a("a"),izo=o("RegNetForImageClassification"),dzo=o(" (RegNet model)"),czo=l(),jF=a("li"),uhe=a("strong"),fzo=o("resnet"),mzo=o(" \u2014 "),CV=a("a"),gzo=o("ResNetForImageClassification"),hzo=o(" (ResNet model)"),pzo=l(),DF=a("li"),_he=a("strong"),uzo=o("segformer"),_zo=o(" \u2014 "),wV=a("a"),bzo=o("SegformerForImageClassification"),vzo=o(" (SegFormer model)"),Fzo=l(),GF=a("li"),bhe=a("strong"),Tzo=o("swin"),Mzo=o(" \u2014 "),AV=a("a"),Ezo=o("SwinForImageClassification"),Czo=o(" (Swin model)"),wzo=l(),OF=a("li"),vhe=a("strong"),Azo=o("van"),yzo=o(" \u2014 "),yV=a("a"),Lzo=o("VanForImageClassification"),xzo=o(" (VAN model)"),$zo=l(),VF=a("li"),Fhe=a("strong"),kzo=o("vit"),Szo=o(" \u2014 "),LV=a("a"),Rzo=o("ViTForImageClassification"),Bzo=o(" (ViT model)"),Pzo=l(),XF=a("p"),Izo=o("The model is set in evaluation mode by default using "),The=a("code"),qzo=o("model.eval()"),Nzo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Mhe=a("code"),jzo=o("model.train()"),Dzo=l(),F(zF.$$.fragment),cIe=l(),td=a("h2"),QF=a("a"),Ehe=a("span"),F(wy.$$.fragment),Gzo=l(),Che=a("span"),Ozo=o("AutoModelForVision2Seq"),fIe=l(),Do=a("div"),F(Ay.$$.fragment),Vzo=l(),ad=a("p"),Xzo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),xV=a("a"),zzo=o("from_pretrained()"),Qzo=o(" class method or the "),$V=a("a"),Wzo=o("from_config()"),Hzo=o(` class
method.`),Uzo=l(),yy=a("p"),Jzo=o("This class cannot be instantiated directly using "),whe=a("code"),Yzo=o("__init__()"),Kzo=o(" (throws an error)."),Zzo=l(),ht=a("div"),F(Ly.$$.fragment),eQo=l(),Ahe=a("p"),oQo=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),rQo=l(),nd=a("p"),tQo=o(`Note:
Loading a model from its configuration file does `),yhe=a("strong"),aQo=o("not"),nQo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),kV=a("a"),sQo=o("from_pretrained()"),lQo=o(" to load the model weights."),iQo=l(),F(WF.$$.fragment),dQo=l(),so=a("div"),F(xy.$$.fragment),cQo=l(),Lhe=a("p"),fQo=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),mQo=l(),Na=a("p"),gQo=o("The model class to instantiate is selected based on the "),xhe=a("code"),hQo=o("model_type"),pQo=o(` property of the config object (either
passed as an argument or loaded from `),$he=a("code"),uQo=o("pretrained_model_name_or_path"),_Qo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),khe=a("code"),bQo=o("pretrained_model_name_or_path"),vQo=o(":"),FQo=l(),She=a("ul"),HF=a("li"),Rhe=a("strong"),TQo=o("vision-encoder-decoder"),MQo=o(" \u2014 "),SV=a("a"),EQo=o("VisionEncoderDecoderModel"),CQo=o(" (Vision Encoder decoder model)"),wQo=l(),UF=a("p"),AQo=o("The model is set in evaluation mode by default using "),Bhe=a("code"),yQo=o("model.eval()"),LQo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Phe=a("code"),xQo=o("model.train()"),$Qo=l(),F(JF.$$.fragment),mIe=l(),sd=a("h2"),YF=a("a"),Ihe=a("span"),F($y.$$.fragment),kQo=l(),qhe=a("span"),SQo=o("AutoModelForAudioClassification"),gIe=l(),Go=a("div"),F(ky.$$.fragment),RQo=l(),ld=a("p"),BQo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),RV=a("a"),PQo=o("from_pretrained()"),IQo=o(" class method or the "),BV=a("a"),qQo=o("from_config()"),NQo=o(` class
method.`),jQo=l(),Sy=a("p"),DQo=o("This class cannot be instantiated directly using "),Nhe=a("code"),GQo=o("__init__()"),OQo=o(" (throws an error)."),VQo=l(),pt=a("div"),F(Ry.$$.fragment),XQo=l(),jhe=a("p"),zQo=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),QQo=l(),id=a("p"),WQo=o(`Note:
Loading a model from its configuration file does `),Dhe=a("strong"),HQo=o("not"),UQo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),PV=a("a"),JQo=o("from_pretrained()"),YQo=o(" to load the model weights."),KQo=l(),F(KF.$$.fragment),ZQo=l(),lo=a("div"),F(By.$$.fragment),eWo=l(),Ghe=a("p"),oWo=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),rWo=l(),ja=a("p"),tWo=o("The model class to instantiate is selected based on the "),Ohe=a("code"),aWo=o("model_type"),nWo=o(` property of the config object (either
passed as an argument or loaded from `),Vhe=a("code"),sWo=o("pretrained_model_name_or_path"),lWo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xhe=a("code"),iWo=o("pretrained_model_name_or_path"),dWo=o(":"),cWo=l(),Ne=a("ul"),ZF=a("li"),zhe=a("strong"),fWo=o("data2vec-audio"),mWo=o(" \u2014 "),IV=a("a"),gWo=o("Data2VecAudioForSequenceClassification"),hWo=o(" (Data2VecAudio model)"),pWo=l(),e0=a("li"),Qhe=a("strong"),uWo=o("hubert"),_Wo=o(" \u2014 "),qV=a("a"),bWo=o("HubertForSequenceClassification"),vWo=o(" (Hubert model)"),FWo=l(),o0=a("li"),Whe=a("strong"),TWo=o("sew"),MWo=o(" \u2014 "),NV=a("a"),EWo=o("SEWForSequenceClassification"),CWo=o(" (SEW model)"),wWo=l(),r0=a("li"),Hhe=a("strong"),AWo=o("sew-d"),yWo=o(" \u2014 "),jV=a("a"),LWo=o("SEWDForSequenceClassification"),xWo=o(" (SEW-D model)"),$Wo=l(),t0=a("li"),Uhe=a("strong"),kWo=o("unispeech"),SWo=o(" \u2014 "),DV=a("a"),RWo=o("UniSpeechForSequenceClassification"),BWo=o(" (UniSpeech model)"),PWo=l(),a0=a("li"),Jhe=a("strong"),IWo=o("unispeech-sat"),qWo=o(" \u2014 "),GV=a("a"),NWo=o("UniSpeechSatForSequenceClassification"),jWo=o(" (UniSpeechSat model)"),DWo=l(),n0=a("li"),Yhe=a("strong"),GWo=o("wav2vec2"),OWo=o(" \u2014 "),OV=a("a"),VWo=o("Wav2Vec2ForSequenceClassification"),XWo=o(" (Wav2Vec2 model)"),zWo=l(),s0=a("li"),Khe=a("strong"),QWo=o("wavlm"),WWo=o(" \u2014 "),VV=a("a"),HWo=o("WavLMForSequenceClassification"),UWo=o(" (WavLM model)"),JWo=l(),l0=a("p"),YWo=o("The model is set in evaluation mode by default using "),Zhe=a("code"),KWo=o("model.eval()"),ZWo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),epe=a("code"),eHo=o("model.train()"),oHo=l(),F(i0.$$.fragment),hIe=l(),dd=a("h2"),d0=a("a"),ope=a("span"),F(Py.$$.fragment),rHo=l(),rpe=a("span"),tHo=o("AutoModelForAudioFrameClassification"),pIe=l(),Oo=a("div"),F(Iy.$$.fragment),aHo=l(),cd=a("p"),nHo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),XV=a("a"),sHo=o("from_pretrained()"),lHo=o(" class method or the "),zV=a("a"),iHo=o("from_config()"),dHo=o(` class
method.`),cHo=l(),qy=a("p"),fHo=o("This class cannot be instantiated directly using "),tpe=a("code"),mHo=o("__init__()"),gHo=o(" (throws an error)."),hHo=l(),ut=a("div"),F(Ny.$$.fragment),pHo=l(),ape=a("p"),uHo=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),_Ho=l(),fd=a("p"),bHo=o(`Note:
Loading a model from its configuration file does `),npe=a("strong"),vHo=o("not"),FHo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QV=a("a"),THo=o("from_pretrained()"),MHo=o(" to load the model weights."),EHo=l(),F(c0.$$.fragment),CHo=l(),io=a("div"),F(jy.$$.fragment),wHo=l(),spe=a("p"),AHo=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),yHo=l(),Da=a("p"),LHo=o("The model class to instantiate is selected based on the "),lpe=a("code"),xHo=o("model_type"),$Ho=o(` property of the config object (either
passed as an argument or loaded from `),ipe=a("code"),kHo=o("pretrained_model_name_or_path"),SHo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dpe=a("code"),RHo=o("pretrained_model_name_or_path"),BHo=o(":"),PHo=l(),Ga=a("ul"),f0=a("li"),cpe=a("strong"),IHo=o("data2vec-audio"),qHo=o(" \u2014 "),WV=a("a"),NHo=o("Data2VecAudioForAudioFrameClassification"),jHo=o(" (Data2VecAudio model)"),DHo=l(),m0=a("li"),fpe=a("strong"),GHo=o("unispeech-sat"),OHo=o(" \u2014 "),HV=a("a"),VHo=o("UniSpeechSatForAudioFrameClassification"),XHo=o(" (UniSpeechSat model)"),zHo=l(),g0=a("li"),mpe=a("strong"),QHo=o("wav2vec2"),WHo=o(" \u2014 "),UV=a("a"),HHo=o("Wav2Vec2ForAudioFrameClassification"),UHo=o(" (Wav2Vec2 model)"),JHo=l(),h0=a("li"),gpe=a("strong"),YHo=o("wavlm"),KHo=o(" \u2014 "),JV=a("a"),ZHo=o("WavLMForAudioFrameClassification"),eUo=o(" (WavLM model)"),oUo=l(),p0=a("p"),rUo=o("The model is set in evaluation mode by default using "),hpe=a("code"),tUo=o("model.eval()"),aUo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ppe=a("code"),nUo=o("model.train()"),sUo=l(),F(u0.$$.fragment),uIe=l(),md=a("h2"),_0=a("a"),upe=a("span"),F(Dy.$$.fragment),lUo=l(),_pe=a("span"),iUo=o("AutoModelForCTC"),_Ie=l(),Vo=a("div"),F(Gy.$$.fragment),dUo=l(),gd=a("p"),cUo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),YV=a("a"),fUo=o("from_pretrained()"),mUo=o(" class method or the "),KV=a("a"),gUo=o("from_config()"),hUo=o(` class
method.`),pUo=l(),Oy=a("p"),uUo=o("This class cannot be instantiated directly using "),bpe=a("code"),_Uo=o("__init__()"),bUo=o(" (throws an error)."),vUo=l(),_t=a("div"),F(Vy.$$.fragment),FUo=l(),vpe=a("p"),TUo=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),MUo=l(),hd=a("p"),EUo=o(`Note:
Loading a model from its configuration file does `),Fpe=a("strong"),CUo=o("not"),wUo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ZV=a("a"),AUo=o("from_pretrained()"),yUo=o(" to load the model weights."),LUo=l(),F(b0.$$.fragment),xUo=l(),co=a("div"),F(Xy.$$.fragment),$Uo=l(),Tpe=a("p"),kUo=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),SUo=l(),Oa=a("p"),RUo=o("The model class to instantiate is selected based on the "),Mpe=a("code"),BUo=o("model_type"),PUo=o(` property of the config object (either
passed as an argument or loaded from `),Epe=a("code"),IUo=o("pretrained_model_name_or_path"),qUo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cpe=a("code"),NUo=o("pretrained_model_name_or_path"),jUo=o(":"),DUo=l(),je=a("ul"),v0=a("li"),wpe=a("strong"),GUo=o("data2vec-audio"),OUo=o(" \u2014 "),eX=a("a"),VUo=o("Data2VecAudioForCTC"),XUo=o(" (Data2VecAudio model)"),zUo=l(),F0=a("li"),Ape=a("strong"),QUo=o("hubert"),WUo=o(" \u2014 "),oX=a("a"),HUo=o("HubertForCTC"),UUo=o(" (Hubert model)"),JUo=l(),T0=a("li"),ype=a("strong"),YUo=o("sew"),KUo=o(" \u2014 "),rX=a("a"),ZUo=o("SEWForCTC"),eJo=o(" (SEW model)"),oJo=l(),M0=a("li"),Lpe=a("strong"),rJo=o("sew-d"),tJo=o(" \u2014 "),tX=a("a"),aJo=o("SEWDForCTC"),nJo=o(" (SEW-D model)"),sJo=l(),E0=a("li"),xpe=a("strong"),lJo=o("unispeech"),iJo=o(" \u2014 "),aX=a("a"),dJo=o("UniSpeechForCTC"),cJo=o(" (UniSpeech model)"),fJo=l(),C0=a("li"),$pe=a("strong"),mJo=o("unispeech-sat"),gJo=o(" \u2014 "),nX=a("a"),hJo=o("UniSpeechSatForCTC"),pJo=o(" (UniSpeechSat model)"),uJo=l(),w0=a("li"),kpe=a("strong"),_Jo=o("wav2vec2"),bJo=o(" \u2014 "),sX=a("a"),vJo=o("Wav2Vec2ForCTC"),FJo=o(" (Wav2Vec2 model)"),TJo=l(),A0=a("li"),Spe=a("strong"),MJo=o("wavlm"),EJo=o(" \u2014 "),lX=a("a"),CJo=o("WavLMForCTC"),wJo=o(" (WavLM model)"),AJo=l(),y0=a("p"),yJo=o("The model is set in evaluation mode by default using "),Rpe=a("code"),LJo=o("model.eval()"),xJo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Bpe=a("code"),$Jo=o("model.train()"),kJo=l(),F(L0.$$.fragment),bIe=l(),pd=a("h2"),x0=a("a"),Ppe=a("span"),F(zy.$$.fragment),SJo=l(),Ipe=a("span"),RJo=o("AutoModelForSpeechSeq2Seq"),vIe=l(),Xo=a("div"),F(Qy.$$.fragment),BJo=l(),ud=a("p"),PJo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),iX=a("a"),IJo=o("from_pretrained()"),qJo=o(" class method or the "),dX=a("a"),NJo=o("from_config()"),jJo=o(` class
method.`),DJo=l(),Wy=a("p"),GJo=o("This class cannot be instantiated directly using "),qpe=a("code"),OJo=o("__init__()"),VJo=o(" (throws an error)."),XJo=l(),bt=a("div"),F(Hy.$$.fragment),zJo=l(),Npe=a("p"),QJo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),WJo=l(),_d=a("p"),HJo=o(`Note:
Loading a model from its configuration file does `),jpe=a("strong"),UJo=o("not"),JJo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cX=a("a"),YJo=o("from_pretrained()"),KJo=o(" to load the model weights."),ZJo=l(),F($0.$$.fragment),eYo=l(),fo=a("div"),F(Uy.$$.fragment),oYo=l(),Dpe=a("p"),rYo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),tYo=l(),Va=a("p"),aYo=o("The model class to instantiate is selected based on the "),Gpe=a("code"),nYo=o("model_type"),sYo=o(` property of the config object (either
passed as an argument or loaded from `),Ope=a("code"),lYo=o("pretrained_model_name_or_path"),iYo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vpe=a("code"),dYo=o("pretrained_model_name_or_path"),cYo=o(":"),fYo=l(),Jy=a("ul"),k0=a("li"),Xpe=a("strong"),mYo=o("speech-encoder-decoder"),gYo=o(" \u2014 "),fX=a("a"),hYo=o("SpeechEncoderDecoderModel"),pYo=o(" (Speech Encoder decoder model)"),uYo=l(),S0=a("li"),zpe=a("strong"),_Yo=o("speech_to_text"),bYo=o(" \u2014 "),mX=a("a"),vYo=o("Speech2TextForConditionalGeneration"),FYo=o(" (Speech2Text model)"),TYo=l(),R0=a("p"),MYo=o("The model is set in evaluation mode by default using "),Qpe=a("code"),EYo=o("model.eval()"),CYo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Wpe=a("code"),wYo=o("model.train()"),AYo=l(),F(B0.$$.fragment),FIe=l(),bd=a("h2"),P0=a("a"),Hpe=a("span"),F(Yy.$$.fragment),yYo=l(),Upe=a("span"),LYo=o("AutoModelForAudioXVector"),TIe=l(),zo=a("div"),F(Ky.$$.fragment),xYo=l(),vd=a("p"),$Yo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),gX=a("a"),kYo=o("from_pretrained()"),SYo=o(" class method or the "),hX=a("a"),RYo=o("from_config()"),BYo=o(` class
method.`),PYo=l(),Zy=a("p"),IYo=o("This class cannot be instantiated directly using "),Jpe=a("code"),qYo=o("__init__()"),NYo=o(" (throws an error)."),jYo=l(),vt=a("div"),F(eL.$$.fragment),DYo=l(),Ype=a("p"),GYo=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),OYo=l(),Fd=a("p"),VYo=o(`Note:
Loading a model from its configuration file does `),Kpe=a("strong"),XYo=o("not"),zYo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pX=a("a"),QYo=o("from_pretrained()"),WYo=o(" to load the model weights."),HYo=l(),F(I0.$$.fragment),UYo=l(),mo=a("div"),F(oL.$$.fragment),JYo=l(),Zpe=a("p"),YYo=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),KYo=l(),Xa=a("p"),ZYo=o("The model class to instantiate is selected based on the "),eue=a("code"),eKo=o("model_type"),oKo=o(` property of the config object (either
passed as an argument or loaded from `),oue=a("code"),rKo=o("pretrained_model_name_or_path"),tKo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rue=a("code"),aKo=o("pretrained_model_name_or_path"),nKo=o(":"),sKo=l(),za=a("ul"),q0=a("li"),tue=a("strong"),lKo=o("data2vec-audio"),iKo=o(" \u2014 "),uX=a("a"),dKo=o("Data2VecAudioForXVector"),cKo=o(" (Data2VecAudio model)"),fKo=l(),N0=a("li"),aue=a("strong"),mKo=o("unispeech-sat"),gKo=o(" \u2014 "),_X=a("a"),hKo=o("UniSpeechSatForXVector"),pKo=o(" (UniSpeechSat model)"),uKo=l(),j0=a("li"),nue=a("strong"),_Ko=o("wav2vec2"),bKo=o(" \u2014 "),bX=a("a"),vKo=o("Wav2Vec2ForXVector"),FKo=o(" (Wav2Vec2 model)"),TKo=l(),D0=a("li"),sue=a("strong"),MKo=o("wavlm"),EKo=o(" \u2014 "),vX=a("a"),CKo=o("WavLMForXVector"),wKo=o(" (WavLM model)"),AKo=l(),G0=a("p"),yKo=o("The model is set in evaluation mode by default using "),lue=a("code"),LKo=o("model.eval()"),xKo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),iue=a("code"),$Ko=o("model.train()"),kKo=l(),F(O0.$$.fragment),MIe=l(),Td=a("h2"),V0=a("a"),due=a("span"),F(rL.$$.fragment),SKo=l(),cue=a("span"),RKo=o("AutoModelForMaskedImageModeling"),EIe=l(),Qo=a("div"),F(tL.$$.fragment),BKo=l(),Md=a("p"),PKo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),FX=a("a"),IKo=o("from_pretrained()"),qKo=o(" class method or the "),TX=a("a"),NKo=o("from_config()"),jKo=o(` class
method.`),DKo=l(),aL=a("p"),GKo=o("This class cannot be instantiated directly using "),fue=a("code"),OKo=o("__init__()"),VKo=o(" (throws an error)."),XKo=l(),Ft=a("div"),F(nL.$$.fragment),zKo=l(),mue=a("p"),QKo=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),WKo=l(),Ed=a("p"),HKo=o(`Note:
Loading a model from its configuration file does `),gue=a("strong"),UKo=o("not"),JKo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),MX=a("a"),YKo=o("from_pretrained()"),KKo=o(" to load the model weights."),ZKo=l(),F(X0.$$.fragment),eZo=l(),go=a("div"),F(sL.$$.fragment),oZo=l(),hue=a("p"),rZo=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),tZo=l(),Qa=a("p"),aZo=o("The model class to instantiate is selected based on the "),pue=a("code"),nZo=o("model_type"),sZo=o(` property of the config object (either
passed as an argument or loaded from `),uue=a("code"),lZo=o("pretrained_model_name_or_path"),iZo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_ue=a("code"),dZo=o("pretrained_model_name_or_path"),cZo=o(":"),fZo=l(),Cd=a("ul"),z0=a("li"),bue=a("strong"),mZo=o("deit"),gZo=o(" \u2014 "),EX=a("a"),hZo=o("DeiTForMaskedImageModeling"),pZo=o(" (DeiT model)"),uZo=l(),Q0=a("li"),vue=a("strong"),_Zo=o("swin"),bZo=o(" \u2014 "),CX=a("a"),vZo=o("SwinForMaskedImageModeling"),FZo=o(" (Swin model)"),TZo=l(),W0=a("li"),Fue=a("strong"),MZo=o("vit"),EZo=o(" \u2014 "),wX=a("a"),CZo=o("ViTForMaskedImageModeling"),wZo=o(" (ViT model)"),AZo=l(),H0=a("p"),yZo=o("The model is set in evaluation mode by default using "),Tue=a("code"),LZo=o("model.eval()"),xZo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Mue=a("code"),$Zo=o("model.train()"),kZo=l(),F(U0.$$.fragment),CIe=l(),wd=a("h2"),J0=a("a"),Eue=a("span"),F(lL.$$.fragment),SZo=l(),Cue=a("span"),RZo=o("AutoModelForObjectDetection"),wIe=l(),Wo=a("div"),F(iL.$$.fragment),BZo=l(),Ad=a("p"),PZo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),AX=a("a"),IZo=o("from_pretrained()"),qZo=o(" class method or the "),yX=a("a"),NZo=o("from_config()"),jZo=o(` class
method.`),DZo=l(),dL=a("p"),GZo=o("This class cannot be instantiated directly using "),wue=a("code"),OZo=o("__init__()"),VZo=o(" (throws an error)."),XZo=l(),Tt=a("div"),F(cL.$$.fragment),zZo=l(),Aue=a("p"),QZo=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),WZo=l(),yd=a("p"),HZo=o(`Note:
Loading a model from its configuration file does `),yue=a("strong"),UZo=o("not"),JZo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),LX=a("a"),YZo=o("from_pretrained()"),KZo=o(" to load the model weights."),ZZo=l(),F(Y0.$$.fragment),eer=l(),ho=a("div"),F(fL.$$.fragment),oer=l(),Lue=a("p"),rer=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),ter=l(),Wa=a("p"),aer=o("The model class to instantiate is selected based on the "),xue=a("code"),ner=o("model_type"),ser=o(` property of the config object (either
passed as an argument or loaded from `),$ue=a("code"),ler=o("pretrained_model_name_or_path"),ier=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kue=a("code"),der=o("pretrained_model_name_or_path"),cer=o(":"),fer=l(),mL=a("ul"),K0=a("li"),Sue=a("strong"),mer=o("detr"),ger=o(" \u2014 "),xX=a("a"),her=o("DetrForObjectDetection"),per=o(" (DETR model)"),uer=l(),Z0=a("li"),Rue=a("strong"),_er=o("yolos"),ber=o(" \u2014 "),$X=a("a"),ver=o("YolosForObjectDetection"),Fer=o(" (YOLOS model)"),Ter=l(),e6=a("p"),Mer=o("The model is set in evaluation mode by default using "),Bue=a("code"),Eer=o("model.eval()"),Cer=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Pue=a("code"),wer=o("model.train()"),Aer=l(),F(o6.$$.fragment),AIe=l(),Ld=a("h2"),r6=a("a"),Iue=a("span"),F(gL.$$.fragment),yer=l(),que=a("span"),Ler=o("AutoModelForImageSegmentation"),yIe=l(),Ho=a("div"),F(hL.$$.fragment),xer=l(),xd=a("p"),$er=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),kX=a("a"),ker=o("from_pretrained()"),Ser=o(" class method or the "),SX=a("a"),Rer=o("from_config()"),Ber=o(` class
method.`),Per=l(),pL=a("p"),Ier=o("This class cannot be instantiated directly using "),Nue=a("code"),qer=o("__init__()"),Ner=o(" (throws an error)."),jer=l(),Mt=a("div"),F(uL.$$.fragment),Der=l(),jue=a("p"),Ger=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),Oer=l(),$d=a("p"),Ver=o(`Note:
Loading a model from its configuration file does `),Due=a("strong"),Xer=o("not"),zer=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),RX=a("a"),Qer=o("from_pretrained()"),Wer=o(" to load the model weights."),Her=l(),F(t6.$$.fragment),Uer=l(),po=a("div"),F(_L.$$.fragment),Jer=l(),Gue=a("p"),Yer=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),Ker=l(),Ha=a("p"),Zer=o("The model class to instantiate is selected based on the "),Oue=a("code"),eor=o("model_type"),oor=o(` property of the config object (either
passed as an argument or loaded from `),Vue=a("code"),ror=o("pretrained_model_name_or_path"),tor=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xue=a("code"),aor=o("pretrained_model_name_or_path"),nor=o(":"),sor=l(),zue=a("ul"),a6=a("li"),Que=a("strong"),lor=o("detr"),ior=o(" \u2014 "),BX=a("a"),dor=o("DetrForSegmentation"),cor=o(" (DETR model)"),mor=l(),n6=a("p"),gor=o("The model is set in evaluation mode by default using "),Wue=a("code"),hor=o("model.eval()"),por=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Hue=a("code"),uor=o("model.train()"),_or=l(),F(s6.$$.fragment),LIe=l(),kd=a("h2"),l6=a("a"),Uue=a("span"),F(bL.$$.fragment),bor=l(),Jue=a("span"),vor=o("AutoModelForSemanticSegmentation"),xIe=l(),Uo=a("div"),F(vL.$$.fragment),For=l(),Sd=a("p"),Tor=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),PX=a("a"),Mor=o("from_pretrained()"),Eor=o(" class method or the "),IX=a("a"),Cor=o("from_config()"),wor=o(` class
method.`),Aor=l(),FL=a("p"),yor=o("This class cannot be instantiated directly using "),Yue=a("code"),Lor=o("__init__()"),xor=o(" (throws an error)."),$or=l(),Et=a("div"),F(TL.$$.fragment),kor=l(),Kue=a("p"),Sor=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),Ror=l(),Rd=a("p"),Bor=o(`Note:
Loading a model from its configuration file does `),Zue=a("strong"),Por=o("not"),Ior=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qX=a("a"),qor=o("from_pretrained()"),Nor=o(" to load the model weights."),jor=l(),F(i6.$$.fragment),Dor=l(),uo=a("div"),F(ML.$$.fragment),Gor=l(),e_e=a("p"),Oor=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),Vor=l(),Ua=a("p"),Xor=o("The model class to instantiate is selected based on the "),o_e=a("code"),zor=o("model_type"),Qor=o(` property of the config object (either
passed as an argument or loaded from `),r_e=a("code"),Wor=o("pretrained_model_name_or_path"),Hor=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),t_e=a("code"),Uor=o("pretrained_model_name_or_path"),Jor=o(":"),Yor=l(),Ja=a("ul"),d6=a("li"),a_e=a("strong"),Kor=o("beit"),Zor=o(" \u2014 "),NX=a("a"),err=o("BeitForSemanticSegmentation"),orr=o(" (BEiT model)"),rrr=l(),c6=a("li"),n_e=a("strong"),trr=o("data2vec-vision"),arr=o(" \u2014 "),jX=a("a"),nrr=o("Data2VecVisionForSemanticSegmentation"),srr=o(" (Data2VecVision model)"),lrr=l(),f6=a("li"),s_e=a("strong"),irr=o("dpt"),drr=o(" \u2014 "),DX=a("a"),crr=o("DPTForSemanticSegmentation"),frr=o(" (DPT model)"),mrr=l(),m6=a("li"),l_e=a("strong"),grr=o("segformer"),hrr=o(" \u2014 "),GX=a("a"),prr=o("SegformerForSemanticSegmentation"),urr=o(" (SegFormer model)"),_rr=l(),g6=a("p"),brr=o("The model is set in evaluation mode by default using "),i_e=a("code"),vrr=o("model.eval()"),Frr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),d_e=a("code"),Trr=o("model.train()"),Mrr=l(),F(h6.$$.fragment),$Ie=l(),Bd=a("h2"),p6=a("a"),c_e=a("span"),F(EL.$$.fragment),Err=l(),f_e=a("span"),Crr=o("AutoModelForInstanceSegmentation"),kIe=l(),Jo=a("div"),F(CL.$$.fragment),wrr=l(),Pd=a("p"),Arr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),OX=a("a"),yrr=o("from_pretrained()"),Lrr=o(" class method or the "),VX=a("a"),xrr=o("from_config()"),$rr=o(` class
method.`),krr=l(),wL=a("p"),Srr=o("This class cannot be instantiated directly using "),m_e=a("code"),Rrr=o("__init__()"),Brr=o(" (throws an error)."),Prr=l(),Ct=a("div"),F(AL.$$.fragment),Irr=l(),g_e=a("p"),qrr=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),Nrr=l(),Id=a("p"),jrr=o(`Note:
Loading a model from its configuration file does `),h_e=a("strong"),Drr=o("not"),Grr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),XX=a("a"),Orr=o("from_pretrained()"),Vrr=o(" to load the model weights."),Xrr=l(),F(u6.$$.fragment),zrr=l(),_o=a("div"),F(yL.$$.fragment),Qrr=l(),p_e=a("p"),Wrr=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),Hrr=l(),Ya=a("p"),Urr=o("The model class to instantiate is selected based on the "),u_e=a("code"),Jrr=o("model_type"),Yrr=o(` property of the config object (either
passed as an argument or loaded from `),__e=a("code"),Krr=o("pretrained_model_name_or_path"),Zrr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),b_e=a("code"),etr=o("pretrained_model_name_or_path"),otr=o(":"),rtr=l(),v_e=a("ul"),_6=a("li"),F_e=a("strong"),ttr=o("maskformer"),atr=o(" \u2014 "),zX=a("a"),ntr=o("MaskFormerForInstanceSegmentation"),str=o(" (MaskFormer model)"),ltr=l(),b6=a("p"),itr=o("The model is set in evaluation mode by default using "),T_e=a("code"),dtr=o("model.eval()"),ctr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),M_e=a("code"),ftr=o("model.train()"),mtr=l(),F(v6.$$.fragment),SIe=l(),qd=a("h2"),F6=a("a"),E_e=a("span"),F(LL.$$.fragment),gtr=l(),C_e=a("span"),htr=o("TFAutoModel"),RIe=l(),Yo=a("div"),F(xL.$$.fragment),ptr=l(),Nd=a("p"),utr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),QX=a("a"),_tr=o("from_pretrained()"),btr=o(" class method or the "),WX=a("a"),vtr=o("from_config()"),Ftr=o(` class
method.`),Ttr=l(),$L=a("p"),Mtr=o("This class cannot be instantiated directly using "),w_e=a("code"),Etr=o("__init__()"),Ctr=o(" (throws an error)."),wtr=l(),wt=a("div"),F(kL.$$.fragment),Atr=l(),A_e=a("p"),ytr=o("Instantiates one of the base model classes of the library from a configuration."),Ltr=l(),jd=a("p"),xtr=o(`Note:
Loading a model from its configuration file does `),y_e=a("strong"),$tr=o("not"),ktr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),HX=a("a"),Str=o("from_pretrained()"),Rtr=o(" to load the model weights."),Btr=l(),F(T6.$$.fragment),Ptr=l(),wr=a("div"),F(SL.$$.fragment),Itr=l(),L_e=a("p"),qtr=o("Instantiate one of the base model classes of the library from a pretrained model."),Ntr=l(),Ka=a("p"),jtr=o("The model class to instantiate is selected based on the "),x_e=a("code"),Dtr=o("model_type"),Gtr=o(` property of the config object (either
passed as an argument or loaded from `),$_e=a("code"),Otr=o("pretrained_model_name_or_path"),Vtr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),k_e=a("code"),Xtr=o("pretrained_model_name_or_path"),ztr=o(":"),Qtr=l(),j=a("ul"),M6=a("li"),S_e=a("strong"),Wtr=o("albert"),Htr=o(" \u2014 "),UX=a("a"),Utr=o("TFAlbertModel"),Jtr=o(" (ALBERT model)"),Ytr=l(),E6=a("li"),R_e=a("strong"),Ktr=o("bart"),Ztr=o(" \u2014 "),JX=a("a"),ear=o("TFBartModel"),oar=o(" (BART model)"),rar=l(),C6=a("li"),B_e=a("strong"),tar=o("bert"),aar=o(" \u2014 "),YX=a("a"),nar=o("TFBertModel"),sar=o(" (BERT model)"),lar=l(),w6=a("li"),P_e=a("strong"),iar=o("blenderbot"),dar=o(" \u2014 "),KX=a("a"),car=o("TFBlenderbotModel"),far=o(" (Blenderbot model)"),mar=l(),A6=a("li"),I_e=a("strong"),gar=o("blenderbot-small"),har=o(" \u2014 "),ZX=a("a"),par=o("TFBlenderbotSmallModel"),uar=o(" (BlenderbotSmall model)"),_ar=l(),y6=a("li"),q_e=a("strong"),bar=o("camembert"),Far=o(" \u2014 "),ez=a("a"),Tar=o("TFCamembertModel"),Mar=o(" (CamemBERT model)"),Ear=l(),L6=a("li"),N_e=a("strong"),Car=o("clip"),war=o(" \u2014 "),oz=a("a"),Aar=o("TFCLIPModel"),yar=o(" (CLIP model)"),Lar=l(),x6=a("li"),j_e=a("strong"),xar=o("convbert"),$ar=o(" \u2014 "),rz=a("a"),kar=o("TFConvBertModel"),Sar=o(" (ConvBERT model)"),Rar=l(),$6=a("li"),D_e=a("strong"),Bar=o("convnext"),Par=o(" \u2014 "),tz=a("a"),Iar=o("TFConvNextModel"),qar=o(" (ConvNext model)"),Nar=l(),k6=a("li"),G_e=a("strong"),jar=o("ctrl"),Dar=o(" \u2014 "),az=a("a"),Gar=o("TFCTRLModel"),Oar=o(" (CTRL model)"),Var=l(),S6=a("li"),O_e=a("strong"),Xar=o("data2vec-vision"),zar=o(" \u2014 "),nz=a("a"),Qar=o("TFData2VecVisionModel"),War=o(" (Data2VecVision model)"),Har=l(),R6=a("li"),V_e=a("strong"),Uar=o("deberta"),Jar=o(" \u2014 "),sz=a("a"),Yar=o("TFDebertaModel"),Kar=o(" (DeBERTa model)"),Zar=l(),B6=a("li"),X_e=a("strong"),enr=o("deberta-v2"),onr=o(" \u2014 "),lz=a("a"),rnr=o("TFDebertaV2Model"),tnr=o(" (DeBERTa-v2 model)"),anr=l(),P6=a("li"),z_e=a("strong"),nnr=o("distilbert"),snr=o(" \u2014 "),iz=a("a"),lnr=o("TFDistilBertModel"),inr=o(" (DistilBERT model)"),dnr=l(),I6=a("li"),Q_e=a("strong"),cnr=o("dpr"),fnr=o(" \u2014 "),dz=a("a"),mnr=o("TFDPRQuestionEncoder"),gnr=o(" (DPR model)"),hnr=l(),q6=a("li"),W_e=a("strong"),pnr=o("electra"),unr=o(" \u2014 "),cz=a("a"),_nr=o("TFElectraModel"),bnr=o(" (ELECTRA model)"),vnr=l(),N6=a("li"),H_e=a("strong"),Fnr=o("flaubert"),Tnr=o(" \u2014 "),fz=a("a"),Mnr=o("TFFlaubertModel"),Enr=o(" (FlauBERT model)"),Cnr=l(),Bs=a("li"),U_e=a("strong"),wnr=o("funnel"),Anr=o(" \u2014 "),mz=a("a"),ynr=o("TFFunnelModel"),Lnr=o(" or "),gz=a("a"),xnr=o("TFFunnelBaseModel"),$nr=o(" (Funnel Transformer model)"),knr=l(),j6=a("li"),J_e=a("strong"),Snr=o("gpt2"),Rnr=o(" \u2014 "),hz=a("a"),Bnr=o("TFGPT2Model"),Pnr=o(" (OpenAI GPT-2 model)"),Inr=l(),D6=a("li"),Y_e=a("strong"),qnr=o("gptj"),Nnr=o(" \u2014 "),pz=a("a"),jnr=o("TFGPTJModel"),Dnr=o(" (GPT-J model)"),Gnr=l(),G6=a("li"),K_e=a("strong"),Onr=o("hubert"),Vnr=o(" \u2014 "),uz=a("a"),Xnr=o("TFHubertModel"),znr=o(" (Hubert model)"),Qnr=l(),O6=a("li"),Z_e=a("strong"),Wnr=o("layoutlm"),Hnr=o(" \u2014 "),_z=a("a"),Unr=o("TFLayoutLMModel"),Jnr=o(" (LayoutLM model)"),Ynr=l(),V6=a("li"),e2e=a("strong"),Knr=o("led"),Znr=o(" \u2014 "),bz=a("a"),esr=o("TFLEDModel"),osr=o(" (LED model)"),rsr=l(),X6=a("li"),o2e=a("strong"),tsr=o("longformer"),asr=o(" \u2014 "),vz=a("a"),nsr=o("TFLongformerModel"),ssr=o(" (Longformer model)"),lsr=l(),z6=a("li"),r2e=a("strong"),isr=o("lxmert"),dsr=o(" \u2014 "),Fz=a("a"),csr=o("TFLxmertModel"),fsr=o(" (LXMERT model)"),msr=l(),Q6=a("li"),t2e=a("strong"),gsr=o("marian"),hsr=o(" \u2014 "),Tz=a("a"),psr=o("TFMarianModel"),usr=o(" (Marian model)"),_sr=l(),W6=a("li"),a2e=a("strong"),bsr=o("mbart"),vsr=o(" \u2014 "),Mz=a("a"),Fsr=o("TFMBartModel"),Tsr=o(" (mBART model)"),Msr=l(),H6=a("li"),n2e=a("strong"),Esr=o("mobilebert"),Csr=o(" \u2014 "),Ez=a("a"),wsr=o("TFMobileBertModel"),Asr=o(" (MobileBERT model)"),ysr=l(),U6=a("li"),s2e=a("strong"),Lsr=o("mpnet"),xsr=o(" \u2014 "),Cz=a("a"),$sr=o("TFMPNetModel"),ksr=o(" (MPNet model)"),Ssr=l(),J6=a("li"),l2e=a("strong"),Rsr=o("mt5"),Bsr=o(" \u2014 "),wz=a("a"),Psr=o("TFMT5Model"),Isr=o(" (mT5 model)"),qsr=l(),Y6=a("li"),i2e=a("strong"),Nsr=o("openai-gpt"),jsr=o(" \u2014 "),Az=a("a"),Dsr=o("TFOpenAIGPTModel"),Gsr=o(" (OpenAI GPT model)"),Osr=l(),K6=a("li"),d2e=a("strong"),Vsr=o("pegasus"),Xsr=o(" \u2014 "),yz=a("a"),zsr=o("TFPegasusModel"),Qsr=o(" (Pegasus model)"),Wsr=l(),Z6=a("li"),c2e=a("strong"),Hsr=o("rembert"),Usr=o(" \u2014 "),Lz=a("a"),Jsr=o("TFRemBertModel"),Ysr=o(" (RemBERT model)"),Ksr=l(),eT=a("li"),f2e=a("strong"),Zsr=o("roberta"),elr=o(" \u2014 "),xz=a("a"),olr=o("TFRobertaModel"),rlr=o(" (RoBERTa model)"),tlr=l(),oT=a("li"),m2e=a("strong"),alr=o("roformer"),nlr=o(" \u2014 "),$z=a("a"),slr=o("TFRoFormerModel"),llr=o(" (RoFormer model)"),ilr=l(),rT=a("li"),g2e=a("strong"),dlr=o("speech_to_text"),clr=o(" \u2014 "),kz=a("a"),flr=o("TFSpeech2TextModel"),mlr=o(" (Speech2Text model)"),glr=l(),tT=a("li"),h2e=a("strong"),hlr=o("t5"),plr=o(" \u2014 "),Sz=a("a"),ulr=o("TFT5Model"),_lr=o(" (T5 model)"),blr=l(),aT=a("li"),p2e=a("strong"),vlr=o("tapas"),Flr=o(" \u2014 "),Rz=a("a"),Tlr=o("TFTapasModel"),Mlr=o(" (TAPAS model)"),Elr=l(),nT=a("li"),u2e=a("strong"),Clr=o("transfo-xl"),wlr=o(" \u2014 "),Bz=a("a"),Alr=o("TFTransfoXLModel"),ylr=o(" (Transformer-XL model)"),Llr=l(),sT=a("li"),_2e=a("strong"),xlr=o("vit"),$lr=o(" \u2014 "),Pz=a("a"),klr=o("TFViTModel"),Slr=o(" (ViT model)"),Rlr=l(),lT=a("li"),b2e=a("strong"),Blr=o("vit_mae"),Plr=o(" \u2014 "),Iz=a("a"),Ilr=o("TFViTMAEModel"),qlr=o(" (ViTMAE model)"),Nlr=l(),iT=a("li"),v2e=a("strong"),jlr=o("wav2vec2"),Dlr=o(" \u2014 "),qz=a("a"),Glr=o("TFWav2Vec2Model"),Olr=o(" (Wav2Vec2 model)"),Vlr=l(),dT=a("li"),F2e=a("strong"),Xlr=o("xlm"),zlr=o(" \u2014 "),Nz=a("a"),Qlr=o("TFXLMModel"),Wlr=o(" (XLM model)"),Hlr=l(),cT=a("li"),T2e=a("strong"),Ulr=o("xlm-roberta"),Jlr=o(" \u2014 "),jz=a("a"),Ylr=o("TFXLMRobertaModel"),Klr=o(" (XLM-RoBERTa model)"),Zlr=l(),fT=a("li"),M2e=a("strong"),eir=o("xlnet"),oir=o(" \u2014 "),Dz=a("a"),rir=o("TFXLNetModel"),tir=o(" (XLNet model)"),air=l(),F(mT.$$.fragment),BIe=l(),Dd=a("h2"),gT=a("a"),E2e=a("span"),F(RL.$$.fragment),nir=l(),C2e=a("span"),sir=o("TFAutoModelForPreTraining"),PIe=l(),Ko=a("div"),F(BL.$$.fragment),lir=l(),Gd=a("p"),iir=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Gz=a("a"),dir=o("from_pretrained()"),cir=o(" class method or the "),Oz=a("a"),fir=o("from_config()"),mir=o(` class
method.`),gir=l(),PL=a("p"),hir=o("This class cannot be instantiated directly using "),w2e=a("code"),pir=o("__init__()"),uir=o(" (throws an error)."),_ir=l(),At=a("div"),F(IL.$$.fragment),bir=l(),A2e=a("p"),vir=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Fir=l(),Od=a("p"),Tir=o(`Note:
Loading a model from its configuration file does `),y2e=a("strong"),Mir=o("not"),Eir=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Vz=a("a"),Cir=o("from_pretrained()"),wir=o(" to load the model weights."),Air=l(),F(hT.$$.fragment),yir=l(),Ar=a("div"),F(qL.$$.fragment),Lir=l(),L2e=a("p"),xir=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),$ir=l(),Za=a("p"),kir=o("The model class to instantiate is selected based on the "),x2e=a("code"),Sir=o("model_type"),Rir=o(` property of the config object (either
passed as an argument or loaded from `),$2e=a("code"),Bir=o("pretrained_model_name_or_path"),Pir=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),k2e=a("code"),Iir=o("pretrained_model_name_or_path"),qir=o(":"),Nir=l(),se=a("ul"),pT=a("li"),S2e=a("strong"),jir=o("albert"),Dir=o(" \u2014 "),Xz=a("a"),Gir=o("TFAlbertForPreTraining"),Oir=o(" (ALBERT model)"),Vir=l(),uT=a("li"),R2e=a("strong"),Xir=o("bart"),zir=o(" \u2014 "),zz=a("a"),Qir=o("TFBartForConditionalGeneration"),Wir=o(" (BART model)"),Hir=l(),_T=a("li"),B2e=a("strong"),Uir=o("bert"),Jir=o(" \u2014 "),Qz=a("a"),Yir=o("TFBertForPreTraining"),Kir=o(" (BERT model)"),Zir=l(),bT=a("li"),P2e=a("strong"),edr=o("camembert"),odr=o(" \u2014 "),Wz=a("a"),rdr=o("TFCamembertForMaskedLM"),tdr=o(" (CamemBERT model)"),adr=l(),vT=a("li"),I2e=a("strong"),ndr=o("ctrl"),sdr=o(" \u2014 "),Hz=a("a"),ldr=o("TFCTRLLMHeadModel"),idr=o(" (CTRL model)"),ddr=l(),FT=a("li"),q2e=a("strong"),cdr=o("distilbert"),fdr=o(" \u2014 "),Uz=a("a"),mdr=o("TFDistilBertForMaskedLM"),gdr=o(" (DistilBERT model)"),hdr=l(),TT=a("li"),N2e=a("strong"),pdr=o("electra"),udr=o(" \u2014 "),Jz=a("a"),_dr=o("TFElectraForPreTraining"),bdr=o(" (ELECTRA model)"),vdr=l(),MT=a("li"),j2e=a("strong"),Fdr=o("flaubert"),Tdr=o(" \u2014 "),Yz=a("a"),Mdr=o("TFFlaubertWithLMHeadModel"),Edr=o(" (FlauBERT model)"),Cdr=l(),ET=a("li"),D2e=a("strong"),wdr=o("funnel"),Adr=o(" \u2014 "),Kz=a("a"),ydr=o("TFFunnelForPreTraining"),Ldr=o(" (Funnel Transformer model)"),xdr=l(),CT=a("li"),G2e=a("strong"),$dr=o("gpt2"),kdr=o(" \u2014 "),Zz=a("a"),Sdr=o("TFGPT2LMHeadModel"),Rdr=o(" (OpenAI GPT-2 model)"),Bdr=l(),wT=a("li"),O2e=a("strong"),Pdr=o("layoutlm"),Idr=o(" \u2014 "),eQ=a("a"),qdr=o("TFLayoutLMForMaskedLM"),Ndr=o(" (LayoutLM model)"),jdr=l(),AT=a("li"),V2e=a("strong"),Ddr=o("lxmert"),Gdr=o(" \u2014 "),oQ=a("a"),Odr=o("TFLxmertForPreTraining"),Vdr=o(" (LXMERT model)"),Xdr=l(),yT=a("li"),X2e=a("strong"),zdr=o("mobilebert"),Qdr=o(" \u2014 "),rQ=a("a"),Wdr=o("TFMobileBertForPreTraining"),Hdr=o(" (MobileBERT model)"),Udr=l(),LT=a("li"),z2e=a("strong"),Jdr=o("mpnet"),Ydr=o(" \u2014 "),tQ=a("a"),Kdr=o("TFMPNetForMaskedLM"),Zdr=o(" (MPNet model)"),ecr=l(),xT=a("li"),Q2e=a("strong"),ocr=o("openai-gpt"),rcr=o(" \u2014 "),aQ=a("a"),tcr=o("TFOpenAIGPTLMHeadModel"),acr=o(" (OpenAI GPT model)"),ncr=l(),$T=a("li"),W2e=a("strong"),scr=o("roberta"),lcr=o(" \u2014 "),nQ=a("a"),icr=o("TFRobertaForMaskedLM"),dcr=o(" (RoBERTa model)"),ccr=l(),kT=a("li"),H2e=a("strong"),fcr=o("t5"),mcr=o(" \u2014 "),sQ=a("a"),gcr=o("TFT5ForConditionalGeneration"),hcr=o(" (T5 model)"),pcr=l(),ST=a("li"),U2e=a("strong"),ucr=o("tapas"),_cr=o(" \u2014 "),lQ=a("a"),bcr=o("TFTapasForMaskedLM"),vcr=o(" (TAPAS model)"),Fcr=l(),RT=a("li"),J2e=a("strong"),Tcr=o("transfo-xl"),Mcr=o(" \u2014 "),iQ=a("a"),Ecr=o("TFTransfoXLLMHeadModel"),Ccr=o(" (Transformer-XL model)"),wcr=l(),BT=a("li"),Y2e=a("strong"),Acr=o("vit_mae"),ycr=o(" \u2014 "),dQ=a("a"),Lcr=o("TFViTMAEForPreTraining"),xcr=o(" (ViTMAE model)"),$cr=l(),PT=a("li"),K2e=a("strong"),kcr=o("xlm"),Scr=o(" \u2014 "),cQ=a("a"),Rcr=o("TFXLMWithLMHeadModel"),Bcr=o(" (XLM model)"),Pcr=l(),IT=a("li"),Z2e=a("strong"),Icr=o("xlm-roberta"),qcr=o(" \u2014 "),fQ=a("a"),Ncr=o("TFXLMRobertaForMaskedLM"),jcr=o(" (XLM-RoBERTa model)"),Dcr=l(),qT=a("li"),e1e=a("strong"),Gcr=o("xlnet"),Ocr=o(" \u2014 "),mQ=a("a"),Vcr=o("TFXLNetLMHeadModel"),Xcr=o(" (XLNet model)"),zcr=l(),F(NT.$$.fragment),IIe=l(),Vd=a("h2"),jT=a("a"),o1e=a("span"),F(NL.$$.fragment),Qcr=l(),r1e=a("span"),Wcr=o("TFAutoModelForCausalLM"),qIe=l(),Zo=a("div"),F(jL.$$.fragment),Hcr=l(),Xd=a("p"),Ucr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),gQ=a("a"),Jcr=o("from_pretrained()"),Ycr=o(" class method or the "),hQ=a("a"),Kcr=o("from_config()"),Zcr=o(` class
method.`),efr=l(),DL=a("p"),ofr=o("This class cannot be instantiated directly using "),t1e=a("code"),rfr=o("__init__()"),tfr=o(" (throws an error)."),afr=l(),yt=a("div"),F(GL.$$.fragment),nfr=l(),a1e=a("p"),sfr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),lfr=l(),zd=a("p"),ifr=o(`Note:
Loading a model from its configuration file does `),n1e=a("strong"),dfr=o("not"),cfr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pQ=a("a"),ffr=o("from_pretrained()"),mfr=o(" to load the model weights."),gfr=l(),F(DT.$$.fragment),hfr=l(),yr=a("div"),F(OL.$$.fragment),pfr=l(),s1e=a("p"),ufr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),_fr=l(),en=a("p"),bfr=o("The model class to instantiate is selected based on the "),l1e=a("code"),vfr=o("model_type"),Ffr=o(` property of the config object (either
passed as an argument or loaded from `),i1e=a("code"),Tfr=o("pretrained_model_name_or_path"),Mfr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),d1e=a("code"),Efr=o("pretrained_model_name_or_path"),Cfr=o(":"),wfr=l(),Te=a("ul"),GT=a("li"),c1e=a("strong"),Afr=o("bert"),yfr=o(" \u2014 "),uQ=a("a"),Lfr=o("TFBertLMHeadModel"),xfr=o(" (BERT model)"),$fr=l(),OT=a("li"),f1e=a("strong"),kfr=o("camembert"),Sfr=o(" \u2014 "),_Q=a("a"),Rfr=o("TFCamembertForCausalLM"),Bfr=o(" (CamemBERT model)"),Pfr=l(),VT=a("li"),m1e=a("strong"),Ifr=o("ctrl"),qfr=o(" \u2014 "),bQ=a("a"),Nfr=o("TFCTRLLMHeadModel"),jfr=o(" (CTRL model)"),Dfr=l(),XT=a("li"),g1e=a("strong"),Gfr=o("gpt2"),Ofr=o(" \u2014 "),vQ=a("a"),Vfr=o("TFGPT2LMHeadModel"),Xfr=o(" (OpenAI GPT-2 model)"),zfr=l(),zT=a("li"),h1e=a("strong"),Qfr=o("gptj"),Wfr=o(" \u2014 "),FQ=a("a"),Hfr=o("TFGPTJForCausalLM"),Ufr=o(" (GPT-J model)"),Jfr=l(),QT=a("li"),p1e=a("strong"),Yfr=o("openai-gpt"),Kfr=o(" \u2014 "),TQ=a("a"),Zfr=o("TFOpenAIGPTLMHeadModel"),emr=o(" (OpenAI GPT model)"),omr=l(),WT=a("li"),u1e=a("strong"),rmr=o("rembert"),tmr=o(" \u2014 "),MQ=a("a"),amr=o("TFRemBertForCausalLM"),nmr=o(" (RemBERT model)"),smr=l(),HT=a("li"),_1e=a("strong"),lmr=o("roberta"),imr=o(" \u2014 "),EQ=a("a"),dmr=o("TFRobertaForCausalLM"),cmr=o(" (RoBERTa model)"),fmr=l(),UT=a("li"),b1e=a("strong"),mmr=o("roformer"),gmr=o(" \u2014 "),CQ=a("a"),hmr=o("TFRoFormerForCausalLM"),pmr=o(" (RoFormer model)"),umr=l(),JT=a("li"),v1e=a("strong"),_mr=o("transfo-xl"),bmr=o(" \u2014 "),wQ=a("a"),vmr=o("TFTransfoXLLMHeadModel"),Fmr=o(" (Transformer-XL model)"),Tmr=l(),YT=a("li"),F1e=a("strong"),Mmr=o("xlm"),Emr=o(" \u2014 "),AQ=a("a"),Cmr=o("TFXLMWithLMHeadModel"),wmr=o(" (XLM model)"),Amr=l(),KT=a("li"),T1e=a("strong"),ymr=o("xlnet"),Lmr=o(" \u2014 "),yQ=a("a"),xmr=o("TFXLNetLMHeadModel"),$mr=o(" (XLNet model)"),kmr=l(),F(ZT.$$.fragment),NIe=l(),Qd=a("h2"),e7=a("a"),M1e=a("span"),F(VL.$$.fragment),Smr=l(),E1e=a("span"),Rmr=o("TFAutoModelForImageClassification"),jIe=l(),er=a("div"),F(XL.$$.fragment),Bmr=l(),Wd=a("p"),Pmr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),LQ=a("a"),Imr=o("from_pretrained()"),qmr=o(" class method or the "),xQ=a("a"),Nmr=o("from_config()"),jmr=o(` class
method.`),Dmr=l(),zL=a("p"),Gmr=o("This class cannot be instantiated directly using "),C1e=a("code"),Omr=o("__init__()"),Vmr=o(" (throws an error)."),Xmr=l(),Lt=a("div"),F(QL.$$.fragment),zmr=l(),w1e=a("p"),Qmr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Wmr=l(),Hd=a("p"),Hmr=o(`Note:
Loading a model from its configuration file does `),A1e=a("strong"),Umr=o("not"),Jmr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$Q=a("a"),Ymr=o("from_pretrained()"),Kmr=o(" to load the model weights."),Zmr=l(),F(o7.$$.fragment),egr=l(),Lr=a("div"),F(WL.$$.fragment),ogr=l(),y1e=a("p"),rgr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),tgr=l(),on=a("p"),agr=o("The model class to instantiate is selected based on the "),L1e=a("code"),ngr=o("model_type"),sgr=o(` property of the config object (either
passed as an argument or loaded from `),x1e=a("code"),lgr=o("pretrained_model_name_or_path"),igr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$1e=a("code"),dgr=o("pretrained_model_name_or_path"),cgr=o(":"),fgr=l(),Ud=a("ul"),r7=a("li"),k1e=a("strong"),mgr=o("convnext"),ggr=o(" \u2014 "),kQ=a("a"),hgr=o("TFConvNextForImageClassification"),pgr=o(" (ConvNext model)"),ugr=l(),t7=a("li"),S1e=a("strong"),_gr=o("data2vec-vision"),bgr=o(" \u2014 "),SQ=a("a"),vgr=o("TFData2VecVisionForImageClassification"),Fgr=o(" (Data2VecVision model)"),Tgr=l(),a7=a("li"),R1e=a("strong"),Mgr=o("vit"),Egr=o(" \u2014 "),RQ=a("a"),Cgr=o("TFViTForImageClassification"),wgr=o(" (ViT model)"),Agr=l(),F(n7.$$.fragment),DIe=l(),Jd=a("h2"),s7=a("a"),B1e=a("span"),F(HL.$$.fragment),ygr=l(),P1e=a("span"),Lgr=o("TFAutoModelForMaskedLM"),GIe=l(),or=a("div"),F(UL.$$.fragment),xgr=l(),Yd=a("p"),$gr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),BQ=a("a"),kgr=o("from_pretrained()"),Sgr=o(" class method or the "),PQ=a("a"),Rgr=o("from_config()"),Bgr=o(` class
method.`),Pgr=l(),JL=a("p"),Igr=o("This class cannot be instantiated directly using "),I1e=a("code"),qgr=o("__init__()"),Ngr=o(" (throws an error)."),jgr=l(),xt=a("div"),F(YL.$$.fragment),Dgr=l(),q1e=a("p"),Ggr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Ogr=l(),Kd=a("p"),Vgr=o(`Note:
Loading a model from its configuration file does `),N1e=a("strong"),Xgr=o("not"),zgr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),IQ=a("a"),Qgr=o("from_pretrained()"),Wgr=o(" to load the model weights."),Hgr=l(),F(l7.$$.fragment),Ugr=l(),xr=a("div"),F(KL.$$.fragment),Jgr=l(),j1e=a("p"),Ygr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Kgr=l(),rn=a("p"),Zgr=o("The model class to instantiate is selected based on the "),D1e=a("code"),ehr=o("model_type"),ohr=o(` property of the config object (either
passed as an argument or loaded from `),G1e=a("code"),rhr=o("pretrained_model_name_or_path"),thr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),O1e=a("code"),ahr=o("pretrained_model_name_or_path"),nhr=o(":"),shr=l(),ie=a("ul"),i7=a("li"),V1e=a("strong"),lhr=o("albert"),ihr=o(" \u2014 "),qQ=a("a"),dhr=o("TFAlbertForMaskedLM"),chr=o(" (ALBERT model)"),fhr=l(),d7=a("li"),X1e=a("strong"),mhr=o("bert"),ghr=o(" \u2014 "),NQ=a("a"),hhr=o("TFBertForMaskedLM"),phr=o(" (BERT model)"),uhr=l(),c7=a("li"),z1e=a("strong"),_hr=o("camembert"),bhr=o(" \u2014 "),jQ=a("a"),vhr=o("TFCamembertForMaskedLM"),Fhr=o(" (CamemBERT model)"),Thr=l(),f7=a("li"),Q1e=a("strong"),Mhr=o("convbert"),Ehr=o(" \u2014 "),DQ=a("a"),Chr=o("TFConvBertForMaskedLM"),whr=o(" (ConvBERT model)"),Ahr=l(),m7=a("li"),W1e=a("strong"),yhr=o("deberta"),Lhr=o(" \u2014 "),GQ=a("a"),xhr=o("TFDebertaForMaskedLM"),$hr=o(" (DeBERTa model)"),khr=l(),g7=a("li"),H1e=a("strong"),Shr=o("deberta-v2"),Rhr=o(" \u2014 "),OQ=a("a"),Bhr=o("TFDebertaV2ForMaskedLM"),Phr=o(" (DeBERTa-v2 model)"),Ihr=l(),h7=a("li"),U1e=a("strong"),qhr=o("distilbert"),Nhr=o(" \u2014 "),VQ=a("a"),jhr=o("TFDistilBertForMaskedLM"),Dhr=o(" (DistilBERT model)"),Ghr=l(),p7=a("li"),J1e=a("strong"),Ohr=o("electra"),Vhr=o(" \u2014 "),XQ=a("a"),Xhr=o("TFElectraForMaskedLM"),zhr=o(" (ELECTRA model)"),Qhr=l(),u7=a("li"),Y1e=a("strong"),Whr=o("flaubert"),Hhr=o(" \u2014 "),zQ=a("a"),Uhr=o("TFFlaubertWithLMHeadModel"),Jhr=o(" (FlauBERT model)"),Yhr=l(),_7=a("li"),K1e=a("strong"),Khr=o("funnel"),Zhr=o(" \u2014 "),QQ=a("a"),epr=o("TFFunnelForMaskedLM"),opr=o(" (Funnel Transformer model)"),rpr=l(),b7=a("li"),Z1e=a("strong"),tpr=o("layoutlm"),apr=o(" \u2014 "),WQ=a("a"),npr=o("TFLayoutLMForMaskedLM"),spr=o(" (LayoutLM model)"),lpr=l(),v7=a("li"),ebe=a("strong"),ipr=o("longformer"),dpr=o(" \u2014 "),HQ=a("a"),cpr=o("TFLongformerForMaskedLM"),fpr=o(" (Longformer model)"),mpr=l(),F7=a("li"),obe=a("strong"),gpr=o("mobilebert"),hpr=o(" \u2014 "),UQ=a("a"),ppr=o("TFMobileBertForMaskedLM"),upr=o(" (MobileBERT model)"),_pr=l(),T7=a("li"),rbe=a("strong"),bpr=o("mpnet"),vpr=o(" \u2014 "),JQ=a("a"),Fpr=o("TFMPNetForMaskedLM"),Tpr=o(" (MPNet model)"),Mpr=l(),M7=a("li"),tbe=a("strong"),Epr=o("rembert"),Cpr=o(" \u2014 "),YQ=a("a"),wpr=o("TFRemBertForMaskedLM"),Apr=o(" (RemBERT model)"),ypr=l(),E7=a("li"),abe=a("strong"),Lpr=o("roberta"),xpr=o(" \u2014 "),KQ=a("a"),$pr=o("TFRobertaForMaskedLM"),kpr=o(" (RoBERTa model)"),Spr=l(),C7=a("li"),nbe=a("strong"),Rpr=o("roformer"),Bpr=o(" \u2014 "),ZQ=a("a"),Ppr=o("TFRoFormerForMaskedLM"),Ipr=o(" (RoFormer model)"),qpr=l(),w7=a("li"),sbe=a("strong"),Npr=o("tapas"),jpr=o(" \u2014 "),eW=a("a"),Dpr=o("TFTapasForMaskedLM"),Gpr=o(" (TAPAS model)"),Opr=l(),A7=a("li"),lbe=a("strong"),Vpr=o("xlm"),Xpr=o(" \u2014 "),oW=a("a"),zpr=o("TFXLMWithLMHeadModel"),Qpr=o(" (XLM model)"),Wpr=l(),y7=a("li"),ibe=a("strong"),Hpr=o("xlm-roberta"),Upr=o(" \u2014 "),rW=a("a"),Jpr=o("TFXLMRobertaForMaskedLM"),Ypr=o(" (XLM-RoBERTa model)"),Kpr=l(),F(L7.$$.fragment),OIe=l(),Zd=a("h2"),x7=a("a"),dbe=a("span"),F(ZL.$$.fragment),Zpr=l(),cbe=a("span"),eur=o("TFAutoModelForSeq2SeqLM"),VIe=l(),rr=a("div"),F(e8.$$.fragment),our=l(),ec=a("p"),rur=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),tW=a("a"),tur=o("from_pretrained()"),aur=o(" class method or the "),aW=a("a"),nur=o("from_config()"),sur=o(` class
method.`),lur=l(),o8=a("p"),iur=o("This class cannot be instantiated directly using "),fbe=a("code"),dur=o("__init__()"),cur=o(" (throws an error)."),fur=l(),$t=a("div"),F(r8.$$.fragment),mur=l(),mbe=a("p"),gur=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),hur=l(),oc=a("p"),pur=o(`Note:
Loading a model from its configuration file does `),gbe=a("strong"),uur=o("not"),_ur=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nW=a("a"),bur=o("from_pretrained()"),vur=o(" to load the model weights."),Fur=l(),F($7.$$.fragment),Tur=l(),$r=a("div"),F(t8.$$.fragment),Mur=l(),hbe=a("p"),Eur=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Cur=l(),tn=a("p"),wur=o("The model class to instantiate is selected based on the "),pbe=a("code"),Aur=o("model_type"),yur=o(` property of the config object (either
passed as an argument or loaded from `),ube=a("code"),Lur=o("pretrained_model_name_or_path"),xur=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_be=a("code"),$ur=o("pretrained_model_name_or_path"),kur=o(":"),Sur=l(),ye=a("ul"),k7=a("li"),bbe=a("strong"),Rur=o("bart"),Bur=o(" \u2014 "),sW=a("a"),Pur=o("TFBartForConditionalGeneration"),Iur=o(" (BART model)"),qur=l(),S7=a("li"),vbe=a("strong"),Nur=o("blenderbot"),jur=o(" \u2014 "),lW=a("a"),Dur=o("TFBlenderbotForConditionalGeneration"),Gur=o(" (Blenderbot model)"),Our=l(),R7=a("li"),Fbe=a("strong"),Vur=o("blenderbot-small"),Xur=o(" \u2014 "),iW=a("a"),zur=o("TFBlenderbotSmallForConditionalGeneration"),Qur=o(" (BlenderbotSmall model)"),Wur=l(),B7=a("li"),Tbe=a("strong"),Hur=o("encoder-decoder"),Uur=o(" \u2014 "),dW=a("a"),Jur=o("TFEncoderDecoderModel"),Yur=o(" (Encoder decoder model)"),Kur=l(),P7=a("li"),Mbe=a("strong"),Zur=o("led"),e_r=o(" \u2014 "),cW=a("a"),o_r=o("TFLEDForConditionalGeneration"),r_r=o(" (LED model)"),t_r=l(),I7=a("li"),Ebe=a("strong"),a_r=o("marian"),n_r=o(" \u2014 "),fW=a("a"),s_r=o("TFMarianMTModel"),l_r=o(" (Marian model)"),i_r=l(),q7=a("li"),Cbe=a("strong"),d_r=o("mbart"),c_r=o(" \u2014 "),mW=a("a"),f_r=o("TFMBartForConditionalGeneration"),m_r=o(" (mBART model)"),g_r=l(),N7=a("li"),wbe=a("strong"),h_r=o("mt5"),p_r=o(" \u2014 "),gW=a("a"),u_r=o("TFMT5ForConditionalGeneration"),__r=o(" (mT5 model)"),b_r=l(),j7=a("li"),Abe=a("strong"),v_r=o("pegasus"),F_r=o(" \u2014 "),hW=a("a"),T_r=o("TFPegasusForConditionalGeneration"),M_r=o(" (Pegasus model)"),E_r=l(),D7=a("li"),ybe=a("strong"),C_r=o("t5"),w_r=o(" \u2014 "),pW=a("a"),A_r=o("TFT5ForConditionalGeneration"),y_r=o(" (T5 model)"),L_r=l(),F(G7.$$.fragment),XIe=l(),rc=a("h2"),O7=a("a"),Lbe=a("span"),F(a8.$$.fragment),x_r=l(),xbe=a("span"),$_r=o("TFAutoModelForSequenceClassification"),zIe=l(),tr=a("div"),F(n8.$$.fragment),k_r=l(),tc=a("p"),S_r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),uW=a("a"),R_r=o("from_pretrained()"),B_r=o(" class method or the "),_W=a("a"),P_r=o("from_config()"),I_r=o(` class
method.`),q_r=l(),s8=a("p"),N_r=o("This class cannot be instantiated directly using "),$be=a("code"),j_r=o("__init__()"),D_r=o(" (throws an error)."),G_r=l(),kt=a("div"),F(l8.$$.fragment),O_r=l(),kbe=a("p"),V_r=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),X_r=l(),ac=a("p"),z_r=o(`Note:
Loading a model from its configuration file does `),Sbe=a("strong"),Q_r=o("not"),W_r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bW=a("a"),H_r=o("from_pretrained()"),U_r=o(" to load the model weights."),J_r=l(),F(V7.$$.fragment),Y_r=l(),kr=a("div"),F(i8.$$.fragment),K_r=l(),Rbe=a("p"),Z_r=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),e2r=l(),an=a("p"),o2r=o("The model class to instantiate is selected based on the "),Bbe=a("code"),r2r=o("model_type"),t2r=o(` property of the config object (either
passed as an argument or loaded from `),Pbe=a("code"),a2r=o("pretrained_model_name_or_path"),n2r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ibe=a("code"),s2r=o("pretrained_model_name_or_path"),l2r=o(":"),i2r=l(),Z=a("ul"),X7=a("li"),qbe=a("strong"),d2r=o("albert"),c2r=o(" \u2014 "),vW=a("a"),f2r=o("TFAlbertForSequenceClassification"),m2r=o(" (ALBERT model)"),g2r=l(),z7=a("li"),Nbe=a("strong"),h2r=o("bert"),p2r=o(" \u2014 "),FW=a("a"),u2r=o("TFBertForSequenceClassification"),_2r=o(" (BERT model)"),b2r=l(),Q7=a("li"),jbe=a("strong"),v2r=o("camembert"),F2r=o(" \u2014 "),TW=a("a"),T2r=o("TFCamembertForSequenceClassification"),M2r=o(" (CamemBERT model)"),E2r=l(),W7=a("li"),Dbe=a("strong"),C2r=o("convbert"),w2r=o(" \u2014 "),MW=a("a"),A2r=o("TFConvBertForSequenceClassification"),y2r=o(" (ConvBERT model)"),L2r=l(),H7=a("li"),Gbe=a("strong"),x2r=o("ctrl"),$2r=o(" \u2014 "),EW=a("a"),k2r=o("TFCTRLForSequenceClassification"),S2r=o(" (CTRL model)"),R2r=l(),U7=a("li"),Obe=a("strong"),B2r=o("deberta"),P2r=o(" \u2014 "),CW=a("a"),I2r=o("TFDebertaForSequenceClassification"),q2r=o(" (DeBERTa model)"),N2r=l(),J7=a("li"),Vbe=a("strong"),j2r=o("deberta-v2"),D2r=o(" \u2014 "),wW=a("a"),G2r=o("TFDebertaV2ForSequenceClassification"),O2r=o(" (DeBERTa-v2 model)"),V2r=l(),Y7=a("li"),Xbe=a("strong"),X2r=o("distilbert"),z2r=o(" \u2014 "),AW=a("a"),Q2r=o("TFDistilBertForSequenceClassification"),W2r=o(" (DistilBERT model)"),H2r=l(),K7=a("li"),zbe=a("strong"),U2r=o("electra"),J2r=o(" \u2014 "),yW=a("a"),Y2r=o("TFElectraForSequenceClassification"),K2r=o(" (ELECTRA model)"),Z2r=l(),Z7=a("li"),Qbe=a("strong"),e1r=o("flaubert"),o1r=o(" \u2014 "),LW=a("a"),r1r=o("TFFlaubertForSequenceClassification"),t1r=o(" (FlauBERT model)"),a1r=l(),eM=a("li"),Wbe=a("strong"),n1r=o("funnel"),s1r=o(" \u2014 "),xW=a("a"),l1r=o("TFFunnelForSequenceClassification"),i1r=o(" (Funnel Transformer model)"),d1r=l(),oM=a("li"),Hbe=a("strong"),c1r=o("gpt2"),f1r=o(" \u2014 "),$W=a("a"),m1r=o("TFGPT2ForSequenceClassification"),g1r=o(" (OpenAI GPT-2 model)"),h1r=l(),rM=a("li"),Ube=a("strong"),p1r=o("gptj"),u1r=o(" \u2014 "),kW=a("a"),_1r=o("TFGPTJForSequenceClassification"),b1r=o(" (GPT-J model)"),v1r=l(),tM=a("li"),Jbe=a("strong"),F1r=o("layoutlm"),T1r=o(" \u2014 "),SW=a("a"),M1r=o("TFLayoutLMForSequenceClassification"),E1r=o(" (LayoutLM model)"),C1r=l(),aM=a("li"),Ybe=a("strong"),w1r=o("longformer"),A1r=o(" \u2014 "),RW=a("a"),y1r=o("TFLongformerForSequenceClassification"),L1r=o(" (Longformer model)"),x1r=l(),nM=a("li"),Kbe=a("strong"),$1r=o("mobilebert"),k1r=o(" \u2014 "),BW=a("a"),S1r=o("TFMobileBertForSequenceClassification"),R1r=o(" (MobileBERT model)"),B1r=l(),sM=a("li"),Zbe=a("strong"),P1r=o("mpnet"),I1r=o(" \u2014 "),PW=a("a"),q1r=o("TFMPNetForSequenceClassification"),N1r=o(" (MPNet model)"),j1r=l(),lM=a("li"),eve=a("strong"),D1r=o("openai-gpt"),G1r=o(" \u2014 "),IW=a("a"),O1r=o("TFOpenAIGPTForSequenceClassification"),V1r=o(" (OpenAI GPT model)"),X1r=l(),iM=a("li"),ove=a("strong"),z1r=o("rembert"),Q1r=o(" \u2014 "),qW=a("a"),W1r=o("TFRemBertForSequenceClassification"),H1r=o(" (RemBERT model)"),U1r=l(),dM=a("li"),rve=a("strong"),J1r=o("roberta"),Y1r=o(" \u2014 "),NW=a("a"),K1r=o("TFRobertaForSequenceClassification"),Z1r=o(" (RoBERTa model)"),ebr=l(),cM=a("li"),tve=a("strong"),obr=o("roformer"),rbr=o(" \u2014 "),jW=a("a"),tbr=o("TFRoFormerForSequenceClassification"),abr=o(" (RoFormer model)"),nbr=l(),fM=a("li"),ave=a("strong"),sbr=o("tapas"),lbr=o(" \u2014 "),DW=a("a"),ibr=o("TFTapasForSequenceClassification"),dbr=o(" (TAPAS model)"),cbr=l(),mM=a("li"),nve=a("strong"),fbr=o("transfo-xl"),mbr=o(" \u2014 "),GW=a("a"),gbr=o("TFTransfoXLForSequenceClassification"),hbr=o(" (Transformer-XL model)"),pbr=l(),gM=a("li"),sve=a("strong"),ubr=o("xlm"),_br=o(" \u2014 "),OW=a("a"),bbr=o("TFXLMForSequenceClassification"),vbr=o(" (XLM model)"),Fbr=l(),hM=a("li"),lve=a("strong"),Tbr=o("xlm-roberta"),Mbr=o(" \u2014 "),VW=a("a"),Ebr=o("TFXLMRobertaForSequenceClassification"),Cbr=o(" (XLM-RoBERTa model)"),wbr=l(),pM=a("li"),ive=a("strong"),Abr=o("xlnet"),ybr=o(" \u2014 "),XW=a("a"),Lbr=o("TFXLNetForSequenceClassification"),xbr=o(" (XLNet model)"),$br=l(),F(uM.$$.fragment),QIe=l(),nc=a("h2"),_M=a("a"),dve=a("span"),F(d8.$$.fragment),kbr=l(),cve=a("span"),Sbr=o("TFAutoModelForMultipleChoice"),WIe=l(),ar=a("div"),F(c8.$$.fragment),Rbr=l(),sc=a("p"),Bbr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),zW=a("a"),Pbr=o("from_pretrained()"),Ibr=o(" class method or the "),QW=a("a"),qbr=o("from_config()"),Nbr=o(` class
method.`),jbr=l(),f8=a("p"),Dbr=o("This class cannot be instantiated directly using "),fve=a("code"),Gbr=o("__init__()"),Obr=o(" (throws an error)."),Vbr=l(),St=a("div"),F(m8.$$.fragment),Xbr=l(),mve=a("p"),zbr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Qbr=l(),lc=a("p"),Wbr=o(`Note:
Loading a model from its configuration file does `),gve=a("strong"),Hbr=o("not"),Ubr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),WW=a("a"),Jbr=o("from_pretrained()"),Ybr=o(" to load the model weights."),Kbr=l(),F(bM.$$.fragment),Zbr=l(),Sr=a("div"),F(g8.$$.fragment),evr=l(),hve=a("p"),ovr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),rvr=l(),nn=a("p"),tvr=o("The model class to instantiate is selected based on the "),pve=a("code"),avr=o("model_type"),nvr=o(` property of the config object (either
passed as an argument or loaded from `),uve=a("code"),svr=o("pretrained_model_name_or_path"),lvr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_ve=a("code"),ivr=o("pretrained_model_name_or_path"),dvr=o(":"),cvr=l(),pe=a("ul"),vM=a("li"),bve=a("strong"),fvr=o("albert"),mvr=o(" \u2014 "),HW=a("a"),gvr=o("TFAlbertForMultipleChoice"),hvr=o(" (ALBERT model)"),pvr=l(),FM=a("li"),vve=a("strong"),uvr=o("bert"),_vr=o(" \u2014 "),UW=a("a"),bvr=o("TFBertForMultipleChoice"),vvr=o(" (BERT model)"),Fvr=l(),TM=a("li"),Fve=a("strong"),Tvr=o("camembert"),Mvr=o(" \u2014 "),JW=a("a"),Evr=o("TFCamembertForMultipleChoice"),Cvr=o(" (CamemBERT model)"),wvr=l(),MM=a("li"),Tve=a("strong"),Avr=o("convbert"),yvr=o(" \u2014 "),YW=a("a"),Lvr=o("TFConvBertForMultipleChoice"),xvr=o(" (ConvBERT model)"),$vr=l(),EM=a("li"),Mve=a("strong"),kvr=o("distilbert"),Svr=o(" \u2014 "),KW=a("a"),Rvr=o("TFDistilBertForMultipleChoice"),Bvr=o(" (DistilBERT model)"),Pvr=l(),CM=a("li"),Eve=a("strong"),Ivr=o("electra"),qvr=o(" \u2014 "),ZW=a("a"),Nvr=o("TFElectraForMultipleChoice"),jvr=o(" (ELECTRA model)"),Dvr=l(),wM=a("li"),Cve=a("strong"),Gvr=o("flaubert"),Ovr=o(" \u2014 "),eH=a("a"),Vvr=o("TFFlaubertForMultipleChoice"),Xvr=o(" (FlauBERT model)"),zvr=l(),AM=a("li"),wve=a("strong"),Qvr=o("funnel"),Wvr=o(" \u2014 "),oH=a("a"),Hvr=o("TFFunnelForMultipleChoice"),Uvr=o(" (Funnel Transformer model)"),Jvr=l(),yM=a("li"),Ave=a("strong"),Yvr=o("longformer"),Kvr=o(" \u2014 "),rH=a("a"),Zvr=o("TFLongformerForMultipleChoice"),eFr=o(" (Longformer model)"),oFr=l(),LM=a("li"),yve=a("strong"),rFr=o("mobilebert"),tFr=o(" \u2014 "),tH=a("a"),aFr=o("TFMobileBertForMultipleChoice"),nFr=o(" (MobileBERT model)"),sFr=l(),xM=a("li"),Lve=a("strong"),lFr=o("mpnet"),iFr=o(" \u2014 "),aH=a("a"),dFr=o("TFMPNetForMultipleChoice"),cFr=o(" (MPNet model)"),fFr=l(),$M=a("li"),xve=a("strong"),mFr=o("rembert"),gFr=o(" \u2014 "),nH=a("a"),hFr=o("TFRemBertForMultipleChoice"),pFr=o(" (RemBERT model)"),uFr=l(),kM=a("li"),$ve=a("strong"),_Fr=o("roberta"),bFr=o(" \u2014 "),sH=a("a"),vFr=o("TFRobertaForMultipleChoice"),FFr=o(" (RoBERTa model)"),TFr=l(),SM=a("li"),kve=a("strong"),MFr=o("roformer"),EFr=o(" \u2014 "),lH=a("a"),CFr=o("TFRoFormerForMultipleChoice"),wFr=o(" (RoFormer model)"),AFr=l(),RM=a("li"),Sve=a("strong"),yFr=o("xlm"),LFr=o(" \u2014 "),iH=a("a"),xFr=o("TFXLMForMultipleChoice"),$Fr=o(" (XLM model)"),kFr=l(),BM=a("li"),Rve=a("strong"),SFr=o("xlm-roberta"),RFr=o(" \u2014 "),dH=a("a"),BFr=o("TFXLMRobertaForMultipleChoice"),PFr=o(" (XLM-RoBERTa model)"),IFr=l(),PM=a("li"),Bve=a("strong"),qFr=o("xlnet"),NFr=o(" \u2014 "),cH=a("a"),jFr=o("TFXLNetForMultipleChoice"),DFr=o(" (XLNet model)"),GFr=l(),F(IM.$$.fragment),HIe=l(),ic=a("h2"),qM=a("a"),Pve=a("span"),F(h8.$$.fragment),OFr=l(),Ive=a("span"),VFr=o("TFAutoModelForNextSentencePrediction"),UIe=l(),nr=a("div"),F(p8.$$.fragment),XFr=l(),dc=a("p"),zFr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),fH=a("a"),QFr=o("from_pretrained()"),WFr=o(" class method or the "),mH=a("a"),HFr=o("from_config()"),UFr=o(` class
method.`),JFr=l(),u8=a("p"),YFr=o("This class cannot be instantiated directly using "),qve=a("code"),KFr=o("__init__()"),ZFr=o(" (throws an error)."),e0r=l(),Rt=a("div"),F(_8.$$.fragment),o0r=l(),Nve=a("p"),r0r=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),t0r=l(),cc=a("p"),a0r=o(`Note:
Loading a model from its configuration file does `),jve=a("strong"),n0r=o("not"),s0r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gH=a("a"),l0r=o("from_pretrained()"),i0r=o(" to load the model weights."),d0r=l(),F(NM.$$.fragment),c0r=l(),Rr=a("div"),F(b8.$$.fragment),f0r=l(),Dve=a("p"),m0r=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),g0r=l(),sn=a("p"),h0r=o("The model class to instantiate is selected based on the "),Gve=a("code"),p0r=o("model_type"),u0r=o(` property of the config object (either
passed as an argument or loaded from `),Ove=a("code"),_0r=o("pretrained_model_name_or_path"),b0r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vve=a("code"),v0r=o("pretrained_model_name_or_path"),F0r=o(":"),T0r=l(),v8=a("ul"),jM=a("li"),Xve=a("strong"),M0r=o("bert"),E0r=o(" \u2014 "),hH=a("a"),C0r=o("TFBertForNextSentencePrediction"),w0r=o(" (BERT model)"),A0r=l(),DM=a("li"),zve=a("strong"),y0r=o("mobilebert"),L0r=o(" \u2014 "),pH=a("a"),x0r=o("TFMobileBertForNextSentencePrediction"),$0r=o(" (MobileBERT model)"),k0r=l(),F(GM.$$.fragment),JIe=l(),fc=a("h2"),OM=a("a"),Qve=a("span"),F(F8.$$.fragment),S0r=l(),Wve=a("span"),R0r=o("TFAutoModelForTableQuestionAnswering"),YIe=l(),sr=a("div"),F(T8.$$.fragment),B0r=l(),mc=a("p"),P0r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),uH=a("a"),I0r=o("from_pretrained()"),q0r=o(" class method or the "),_H=a("a"),N0r=o("from_config()"),j0r=o(` class
method.`),D0r=l(),M8=a("p"),G0r=o("This class cannot be instantiated directly using "),Hve=a("code"),O0r=o("__init__()"),V0r=o(" (throws an error)."),X0r=l(),Bt=a("div"),F(E8.$$.fragment),z0r=l(),Uve=a("p"),Q0r=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),W0r=l(),gc=a("p"),H0r=o(`Note:
Loading a model from its configuration file does `),Jve=a("strong"),U0r=o("not"),J0r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bH=a("a"),Y0r=o("from_pretrained()"),K0r=o(" to load the model weights."),Z0r=l(),F(VM.$$.fragment),e6r=l(),Br=a("div"),F(C8.$$.fragment),o6r=l(),Yve=a("p"),r6r=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),t6r=l(),ln=a("p"),a6r=o("The model class to instantiate is selected based on the "),Kve=a("code"),n6r=o("model_type"),s6r=o(` property of the config object (either
passed as an argument or loaded from `),Zve=a("code"),l6r=o("pretrained_model_name_or_path"),i6r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),eFe=a("code"),d6r=o("pretrained_model_name_or_path"),c6r=o(":"),f6r=l(),oFe=a("ul"),XM=a("li"),rFe=a("strong"),m6r=o("tapas"),g6r=o(" \u2014 "),vH=a("a"),h6r=o("TFTapasForQuestionAnswering"),p6r=o(" (TAPAS model)"),u6r=l(),F(zM.$$.fragment),KIe=l(),hc=a("h2"),QM=a("a"),tFe=a("span"),F(w8.$$.fragment),_6r=l(),aFe=a("span"),b6r=o("TFAutoModelForTokenClassification"),ZIe=l(),lr=a("div"),F(A8.$$.fragment),v6r=l(),pc=a("p"),F6r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),FH=a("a"),T6r=o("from_pretrained()"),M6r=o(" class method or the "),TH=a("a"),E6r=o("from_config()"),C6r=o(` class
method.`),w6r=l(),y8=a("p"),A6r=o("This class cannot be instantiated directly using "),nFe=a("code"),y6r=o("__init__()"),L6r=o(" (throws an error)."),x6r=l(),Pt=a("div"),F(L8.$$.fragment),$6r=l(),sFe=a("p"),k6r=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),S6r=l(),uc=a("p"),R6r=o(`Note:
Loading a model from its configuration file does `),lFe=a("strong"),B6r=o("not"),P6r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),MH=a("a"),I6r=o("from_pretrained()"),q6r=o(" to load the model weights."),N6r=l(),F(WM.$$.fragment),j6r=l(),Pr=a("div"),F(x8.$$.fragment),D6r=l(),iFe=a("p"),G6r=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),O6r=l(),dn=a("p"),V6r=o("The model class to instantiate is selected based on the "),dFe=a("code"),X6r=o("model_type"),z6r=o(` property of the config object (either
passed as an argument or loaded from `),cFe=a("code"),Q6r=o("pretrained_model_name_or_path"),W6r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fFe=a("code"),H6r=o("pretrained_model_name_or_path"),U6r=o(":"),J6r=l(),de=a("ul"),HM=a("li"),mFe=a("strong"),Y6r=o("albert"),K6r=o(" \u2014 "),EH=a("a"),Z6r=o("TFAlbertForTokenClassification"),eTr=o(" (ALBERT model)"),oTr=l(),UM=a("li"),gFe=a("strong"),rTr=o("bert"),tTr=o(" \u2014 "),CH=a("a"),aTr=o("TFBertForTokenClassification"),nTr=o(" (BERT model)"),sTr=l(),JM=a("li"),hFe=a("strong"),lTr=o("camembert"),iTr=o(" \u2014 "),wH=a("a"),dTr=o("TFCamembertForTokenClassification"),cTr=o(" (CamemBERT model)"),fTr=l(),YM=a("li"),pFe=a("strong"),mTr=o("convbert"),gTr=o(" \u2014 "),AH=a("a"),hTr=o("TFConvBertForTokenClassification"),pTr=o(" (ConvBERT model)"),uTr=l(),KM=a("li"),uFe=a("strong"),_Tr=o("deberta"),bTr=o(" \u2014 "),yH=a("a"),vTr=o("TFDebertaForTokenClassification"),FTr=o(" (DeBERTa model)"),TTr=l(),ZM=a("li"),_Fe=a("strong"),MTr=o("deberta-v2"),ETr=o(" \u2014 "),LH=a("a"),CTr=o("TFDebertaV2ForTokenClassification"),wTr=o(" (DeBERTa-v2 model)"),ATr=l(),e4=a("li"),bFe=a("strong"),yTr=o("distilbert"),LTr=o(" \u2014 "),xH=a("a"),xTr=o("TFDistilBertForTokenClassification"),$Tr=o(" (DistilBERT model)"),kTr=l(),o4=a("li"),vFe=a("strong"),STr=o("electra"),RTr=o(" \u2014 "),$H=a("a"),BTr=o("TFElectraForTokenClassification"),PTr=o(" (ELECTRA model)"),ITr=l(),r4=a("li"),FFe=a("strong"),qTr=o("flaubert"),NTr=o(" \u2014 "),kH=a("a"),jTr=o("TFFlaubertForTokenClassification"),DTr=o(" (FlauBERT model)"),GTr=l(),t4=a("li"),TFe=a("strong"),OTr=o("funnel"),VTr=o(" \u2014 "),SH=a("a"),XTr=o("TFFunnelForTokenClassification"),zTr=o(" (Funnel Transformer model)"),QTr=l(),a4=a("li"),MFe=a("strong"),WTr=o("layoutlm"),HTr=o(" \u2014 "),RH=a("a"),UTr=o("TFLayoutLMForTokenClassification"),JTr=o(" (LayoutLM model)"),YTr=l(),n4=a("li"),EFe=a("strong"),KTr=o("longformer"),ZTr=o(" \u2014 "),BH=a("a"),e7r=o("TFLongformerForTokenClassification"),o7r=o(" (Longformer model)"),r7r=l(),s4=a("li"),CFe=a("strong"),t7r=o("mobilebert"),a7r=o(" \u2014 "),PH=a("a"),n7r=o("TFMobileBertForTokenClassification"),s7r=o(" (MobileBERT model)"),l7r=l(),l4=a("li"),wFe=a("strong"),i7r=o("mpnet"),d7r=o(" \u2014 "),IH=a("a"),c7r=o("TFMPNetForTokenClassification"),f7r=o(" (MPNet model)"),m7r=l(),i4=a("li"),AFe=a("strong"),g7r=o("rembert"),h7r=o(" \u2014 "),qH=a("a"),p7r=o("TFRemBertForTokenClassification"),u7r=o(" (RemBERT model)"),_7r=l(),d4=a("li"),yFe=a("strong"),b7r=o("roberta"),v7r=o(" \u2014 "),NH=a("a"),F7r=o("TFRobertaForTokenClassification"),T7r=o(" (RoBERTa model)"),M7r=l(),c4=a("li"),LFe=a("strong"),E7r=o("roformer"),C7r=o(" \u2014 "),jH=a("a"),w7r=o("TFRoFormerForTokenClassification"),A7r=o(" (RoFormer model)"),y7r=l(),f4=a("li"),xFe=a("strong"),L7r=o("xlm"),x7r=o(" \u2014 "),DH=a("a"),$7r=o("TFXLMForTokenClassification"),k7r=o(" (XLM model)"),S7r=l(),m4=a("li"),$Fe=a("strong"),R7r=o("xlm-roberta"),B7r=o(" \u2014 "),GH=a("a"),P7r=o("TFXLMRobertaForTokenClassification"),I7r=o(" (XLM-RoBERTa model)"),q7r=l(),g4=a("li"),kFe=a("strong"),N7r=o("xlnet"),j7r=o(" \u2014 "),OH=a("a"),D7r=o("TFXLNetForTokenClassification"),G7r=o(" (XLNet model)"),O7r=l(),F(h4.$$.fragment),eqe=l(),_c=a("h2"),p4=a("a"),SFe=a("span"),F($8.$$.fragment),V7r=l(),RFe=a("span"),X7r=o("TFAutoModelForQuestionAnswering"),oqe=l(),ir=a("div"),F(k8.$$.fragment),z7r=l(),bc=a("p"),Q7r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),VH=a("a"),W7r=o("from_pretrained()"),H7r=o(" class method or the "),XH=a("a"),U7r=o("from_config()"),J7r=o(` class
method.`),Y7r=l(),S8=a("p"),K7r=o("This class cannot be instantiated directly using "),BFe=a("code"),Z7r=o("__init__()"),eMr=o(" (throws an error)."),oMr=l(),It=a("div"),F(R8.$$.fragment),rMr=l(),PFe=a("p"),tMr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),aMr=l(),vc=a("p"),nMr=o(`Note:
Loading a model from its configuration file does `),IFe=a("strong"),sMr=o("not"),lMr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zH=a("a"),iMr=o("from_pretrained()"),dMr=o(" to load the model weights."),cMr=l(),F(u4.$$.fragment),fMr=l(),Ir=a("div"),F(B8.$$.fragment),mMr=l(),qFe=a("p"),gMr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),hMr=l(),cn=a("p"),pMr=o("The model class to instantiate is selected based on the "),NFe=a("code"),uMr=o("model_type"),_Mr=o(` property of the config object (either
passed as an argument or loaded from `),jFe=a("code"),bMr=o("pretrained_model_name_or_path"),vMr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),DFe=a("code"),FMr=o("pretrained_model_name_or_path"),TMr=o(":"),MMr=l(),ce=a("ul"),_4=a("li"),GFe=a("strong"),EMr=o("albert"),CMr=o(" \u2014 "),QH=a("a"),wMr=o("TFAlbertForQuestionAnswering"),AMr=o(" (ALBERT model)"),yMr=l(),b4=a("li"),OFe=a("strong"),LMr=o("bert"),xMr=o(" \u2014 "),WH=a("a"),$Mr=o("TFBertForQuestionAnswering"),kMr=o(" (BERT model)"),SMr=l(),v4=a("li"),VFe=a("strong"),RMr=o("camembert"),BMr=o(" \u2014 "),HH=a("a"),PMr=o("TFCamembertForQuestionAnswering"),IMr=o(" (CamemBERT model)"),qMr=l(),F4=a("li"),XFe=a("strong"),NMr=o("convbert"),jMr=o(" \u2014 "),UH=a("a"),DMr=o("TFConvBertForQuestionAnswering"),GMr=o(" (ConvBERT model)"),OMr=l(),T4=a("li"),zFe=a("strong"),VMr=o("deberta"),XMr=o(" \u2014 "),JH=a("a"),zMr=o("TFDebertaForQuestionAnswering"),QMr=o(" (DeBERTa model)"),WMr=l(),M4=a("li"),QFe=a("strong"),HMr=o("deberta-v2"),UMr=o(" \u2014 "),YH=a("a"),JMr=o("TFDebertaV2ForQuestionAnswering"),YMr=o(" (DeBERTa-v2 model)"),KMr=l(),E4=a("li"),WFe=a("strong"),ZMr=o("distilbert"),e4r=o(" \u2014 "),KH=a("a"),o4r=o("TFDistilBertForQuestionAnswering"),r4r=o(" (DistilBERT model)"),t4r=l(),C4=a("li"),HFe=a("strong"),a4r=o("electra"),n4r=o(" \u2014 "),ZH=a("a"),s4r=o("TFElectraForQuestionAnswering"),l4r=o(" (ELECTRA model)"),i4r=l(),w4=a("li"),UFe=a("strong"),d4r=o("flaubert"),c4r=o(" \u2014 "),eU=a("a"),f4r=o("TFFlaubertForQuestionAnsweringSimple"),m4r=o(" (FlauBERT model)"),g4r=l(),A4=a("li"),JFe=a("strong"),h4r=o("funnel"),p4r=o(" \u2014 "),oU=a("a"),u4r=o("TFFunnelForQuestionAnswering"),_4r=o(" (Funnel Transformer model)"),b4r=l(),y4=a("li"),YFe=a("strong"),v4r=o("gptj"),F4r=o(" \u2014 "),rU=a("a"),T4r=o("TFGPTJForQuestionAnswering"),M4r=o(" (GPT-J model)"),E4r=l(),L4=a("li"),KFe=a("strong"),C4r=o("longformer"),w4r=o(" \u2014 "),tU=a("a"),A4r=o("TFLongformerForQuestionAnswering"),y4r=o(" (Longformer model)"),L4r=l(),x4=a("li"),ZFe=a("strong"),x4r=o("mobilebert"),$4r=o(" \u2014 "),aU=a("a"),k4r=o("TFMobileBertForQuestionAnswering"),S4r=o(" (MobileBERT model)"),R4r=l(),$4=a("li"),e0e=a("strong"),B4r=o("mpnet"),P4r=o(" \u2014 "),nU=a("a"),I4r=o("TFMPNetForQuestionAnswering"),q4r=o(" (MPNet model)"),N4r=l(),k4=a("li"),o0e=a("strong"),j4r=o("rembert"),D4r=o(" \u2014 "),sU=a("a"),G4r=o("TFRemBertForQuestionAnswering"),O4r=o(" (RemBERT model)"),V4r=l(),S4=a("li"),r0e=a("strong"),X4r=o("roberta"),z4r=o(" \u2014 "),lU=a("a"),Q4r=o("TFRobertaForQuestionAnswering"),W4r=o(" (RoBERTa model)"),H4r=l(),R4=a("li"),t0e=a("strong"),U4r=o("roformer"),J4r=o(" \u2014 "),iU=a("a"),Y4r=o("TFRoFormerForQuestionAnswering"),K4r=o(" (RoFormer model)"),Z4r=l(),B4=a("li"),a0e=a("strong"),eEr=o("xlm"),oEr=o(" \u2014 "),dU=a("a"),rEr=o("TFXLMForQuestionAnsweringSimple"),tEr=o(" (XLM model)"),aEr=l(),P4=a("li"),n0e=a("strong"),nEr=o("xlm-roberta"),sEr=o(" \u2014 "),cU=a("a"),lEr=o("TFXLMRobertaForQuestionAnswering"),iEr=o(" (XLM-RoBERTa model)"),dEr=l(),I4=a("li"),s0e=a("strong"),cEr=o("xlnet"),fEr=o(" \u2014 "),fU=a("a"),mEr=o("TFXLNetForQuestionAnsweringSimple"),gEr=o(" (XLNet model)"),hEr=l(),F(q4.$$.fragment),rqe=l(),Fc=a("h2"),N4=a("a"),l0e=a("span"),F(P8.$$.fragment),pEr=l(),i0e=a("span"),uEr=o("TFAutoModelForVision2Seq"),tqe=l(),dr=a("div"),F(I8.$$.fragment),_Er=l(),Tc=a("p"),bEr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),mU=a("a"),vEr=o("from_pretrained()"),FEr=o(" class method or the "),gU=a("a"),TEr=o("from_config()"),MEr=o(` class
method.`),EEr=l(),q8=a("p"),CEr=o("This class cannot be instantiated directly using "),d0e=a("code"),wEr=o("__init__()"),AEr=o(" (throws an error)."),yEr=l(),qt=a("div"),F(N8.$$.fragment),LEr=l(),c0e=a("p"),xEr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),$Er=l(),Mc=a("p"),kEr=o(`Note:
Loading a model from its configuration file does `),f0e=a("strong"),SEr=o("not"),REr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hU=a("a"),BEr=o("from_pretrained()"),PEr=o(" to load the model weights."),IEr=l(),F(j4.$$.fragment),qEr=l(),qr=a("div"),F(j8.$$.fragment),NEr=l(),m0e=a("p"),jEr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),DEr=l(),fn=a("p"),GEr=o("The model class to instantiate is selected based on the "),g0e=a("code"),OEr=o("model_type"),VEr=o(` property of the config object (either
passed as an argument or loaded from `),h0e=a("code"),XEr=o("pretrained_model_name_or_path"),zEr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),p0e=a("code"),QEr=o("pretrained_model_name_or_path"),WEr=o(":"),HEr=l(),u0e=a("ul"),D4=a("li"),_0e=a("strong"),UEr=o("vision-encoder-decoder"),JEr=o(" \u2014 "),pU=a("a"),YEr=o("TFVisionEncoderDecoderModel"),KEr=o(" (Vision Encoder decoder model)"),ZEr=l(),F(G4.$$.fragment),aqe=l(),Ec=a("h2"),O4=a("a"),b0e=a("span"),F(D8.$$.fragment),e5r=l(),v0e=a("span"),o5r=o("TFAutoModelForSpeechSeq2Seq"),nqe=l(),cr=a("div"),F(G8.$$.fragment),r5r=l(),Cc=a("p"),t5r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),uU=a("a"),a5r=o("from_pretrained()"),n5r=o(" class method or the "),_U=a("a"),s5r=o("from_config()"),l5r=o(` class
method.`),i5r=l(),O8=a("p"),d5r=o("This class cannot be instantiated directly using "),F0e=a("code"),c5r=o("__init__()"),f5r=o(" (throws an error)."),m5r=l(),Nt=a("div"),F(V8.$$.fragment),g5r=l(),T0e=a("p"),h5r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),p5r=l(),wc=a("p"),u5r=o(`Note:
Loading a model from its configuration file does `),M0e=a("strong"),_5r=o("not"),b5r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bU=a("a"),v5r=o("from_pretrained()"),F5r=o(" to load the model weights."),T5r=l(),F(V4.$$.fragment),M5r=l(),Nr=a("div"),F(X8.$$.fragment),E5r=l(),E0e=a("p"),C5r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),w5r=l(),mn=a("p"),A5r=o("The model class to instantiate is selected based on the "),C0e=a("code"),y5r=o("model_type"),L5r=o(` property of the config object (either
passed as an argument or loaded from `),w0e=a("code"),x5r=o("pretrained_model_name_or_path"),$5r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),A0e=a("code"),k5r=o("pretrained_model_name_or_path"),S5r=o(":"),R5r=l(),y0e=a("ul"),X4=a("li"),L0e=a("strong"),B5r=o("speech_to_text"),P5r=o(" \u2014 "),vU=a("a"),I5r=o("TFSpeech2TextForConditionalGeneration"),q5r=o(" (Speech2Text model)"),N5r=l(),F(z4.$$.fragment),sqe=l(),Ac=a("h2"),Q4=a("a"),x0e=a("span"),F(z8.$$.fragment),j5r=l(),$0e=a("span"),D5r=o("FlaxAutoModel"),lqe=l(),fr=a("div"),F(Q8.$$.fragment),G5r=l(),yc=a("p"),O5r=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),FU=a("a"),V5r=o("from_pretrained()"),X5r=o(" class method or the "),TU=a("a"),z5r=o("from_config()"),Q5r=o(` class
method.`),W5r=l(),W8=a("p"),H5r=o("This class cannot be instantiated directly using "),k0e=a("code"),U5r=o("__init__()"),J5r=o(" (throws an error)."),Y5r=l(),jt=a("div"),F(H8.$$.fragment),K5r=l(),S0e=a("p"),Z5r=o("Instantiates one of the base model classes of the library from a configuration."),eCr=l(),Lc=a("p"),oCr=o(`Note:
Loading a model from its configuration file does `),R0e=a("strong"),rCr=o("not"),tCr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),MU=a("a"),aCr=o("from_pretrained()"),nCr=o(" to load the model weights."),sCr=l(),F(W4.$$.fragment),lCr=l(),jr=a("div"),F(U8.$$.fragment),iCr=l(),B0e=a("p"),dCr=o("Instantiate one of the base model classes of the library from a pretrained model."),cCr=l(),gn=a("p"),fCr=o("The model class to instantiate is selected based on the "),P0e=a("code"),mCr=o("model_type"),gCr=o(` property of the config object (either
passed as an argument or loaded from `),I0e=a("code"),hCr=o("pretrained_model_name_or_path"),pCr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),q0e=a("code"),uCr=o("pretrained_model_name_or_path"),_Cr=o(":"),bCr=l(),re=a("ul"),H4=a("li"),N0e=a("strong"),vCr=o("albert"),FCr=o(" \u2014 "),EU=a("a"),TCr=o("FlaxAlbertModel"),MCr=o(" (ALBERT model)"),ECr=l(),U4=a("li"),j0e=a("strong"),CCr=o("bart"),wCr=o(" \u2014 "),CU=a("a"),ACr=o("FlaxBartModel"),yCr=o(" (BART model)"),LCr=l(),J4=a("li"),D0e=a("strong"),xCr=o("beit"),$Cr=o(" \u2014 "),wU=a("a"),kCr=o("FlaxBeitModel"),SCr=o(" (BEiT model)"),RCr=l(),Y4=a("li"),G0e=a("strong"),BCr=o("bert"),PCr=o(" \u2014 "),AU=a("a"),ICr=o("FlaxBertModel"),qCr=o(" (BERT model)"),NCr=l(),K4=a("li"),O0e=a("strong"),jCr=o("big_bird"),DCr=o(" \u2014 "),yU=a("a"),GCr=o("FlaxBigBirdModel"),OCr=o(" (BigBird model)"),VCr=l(),Z4=a("li"),V0e=a("strong"),XCr=o("blenderbot"),zCr=o(" \u2014 "),LU=a("a"),QCr=o("FlaxBlenderbotModel"),WCr=o(" (Blenderbot model)"),HCr=l(),eE=a("li"),X0e=a("strong"),UCr=o("blenderbot-small"),JCr=o(" \u2014 "),xU=a("a"),YCr=o("FlaxBlenderbotSmallModel"),KCr=o(" (BlenderbotSmall model)"),ZCr=l(),oE=a("li"),z0e=a("strong"),e3r=o("clip"),o3r=o(" \u2014 "),$U=a("a"),r3r=o("FlaxCLIPModel"),t3r=o(" (CLIP model)"),a3r=l(),rE=a("li"),Q0e=a("strong"),n3r=o("distilbert"),s3r=o(" \u2014 "),kU=a("a"),l3r=o("FlaxDistilBertModel"),i3r=o(" (DistilBERT model)"),d3r=l(),tE=a("li"),W0e=a("strong"),c3r=o("electra"),f3r=o(" \u2014 "),SU=a("a"),m3r=o("FlaxElectraModel"),g3r=o(" (ELECTRA model)"),h3r=l(),aE=a("li"),H0e=a("strong"),p3r=o("gpt2"),u3r=o(" \u2014 "),RU=a("a"),_3r=o("FlaxGPT2Model"),b3r=o(" (OpenAI GPT-2 model)"),v3r=l(),nE=a("li"),U0e=a("strong"),F3r=o("gpt_neo"),T3r=o(" \u2014 "),BU=a("a"),M3r=o("FlaxGPTNeoModel"),E3r=o(" (GPT Neo model)"),C3r=l(),sE=a("li"),J0e=a("strong"),w3r=o("gptj"),A3r=o(" \u2014 "),PU=a("a"),y3r=o("FlaxGPTJModel"),L3r=o(" (GPT-J model)"),x3r=l(),lE=a("li"),Y0e=a("strong"),$3r=o("marian"),k3r=o(" \u2014 "),IU=a("a"),S3r=o("FlaxMarianModel"),R3r=o(" (Marian model)"),B3r=l(),iE=a("li"),K0e=a("strong"),P3r=o("mbart"),I3r=o(" \u2014 "),qU=a("a"),q3r=o("FlaxMBartModel"),N3r=o(" (mBART model)"),j3r=l(),dE=a("li"),Z0e=a("strong"),D3r=o("mt5"),G3r=o(" \u2014 "),NU=a("a"),O3r=o("FlaxMT5Model"),V3r=o(" (mT5 model)"),X3r=l(),cE=a("li"),e6e=a("strong"),z3r=o("pegasus"),Q3r=o(" \u2014 "),jU=a("a"),W3r=o("FlaxPegasusModel"),H3r=o(" (Pegasus model)"),U3r=l(),fE=a("li"),o6e=a("strong"),J3r=o("roberta"),Y3r=o(" \u2014 "),DU=a("a"),K3r=o("FlaxRobertaModel"),Z3r=o(" (RoBERTa model)"),ewr=l(),mE=a("li"),r6e=a("strong"),owr=o("roformer"),rwr=o(" \u2014 "),GU=a("a"),twr=o("FlaxRoFormerModel"),awr=o(" (RoFormer model)"),nwr=l(),gE=a("li"),t6e=a("strong"),swr=o("t5"),lwr=o(" \u2014 "),OU=a("a"),iwr=o("FlaxT5Model"),dwr=o(" (T5 model)"),cwr=l(),hE=a("li"),a6e=a("strong"),fwr=o("vision-text-dual-encoder"),mwr=o(" \u2014 "),VU=a("a"),gwr=o("FlaxVisionTextDualEncoderModel"),hwr=o(" (VisionTextDualEncoder model)"),pwr=l(),pE=a("li"),n6e=a("strong"),uwr=o("vit"),_wr=o(" \u2014 "),XU=a("a"),bwr=o("FlaxViTModel"),vwr=o(" (ViT model)"),Fwr=l(),uE=a("li"),s6e=a("strong"),Twr=o("wav2vec2"),Mwr=o(" \u2014 "),zU=a("a"),Ewr=o("FlaxWav2Vec2Model"),Cwr=o(" (Wav2Vec2 model)"),wwr=l(),_E=a("li"),l6e=a("strong"),Awr=o("xglm"),ywr=o(" \u2014 "),QU=a("a"),Lwr=o("FlaxXGLMModel"),xwr=o(" (XGLM model)"),$wr=l(),bE=a("li"),i6e=a("strong"),kwr=o("xlm-roberta"),Swr=o(" \u2014 "),WU=a("a"),Rwr=o("FlaxXLMRobertaModel"),Bwr=o(" (XLM-RoBERTa model)"),Pwr=l(),F(vE.$$.fragment),iqe=l(),xc=a("h2"),FE=a("a"),d6e=a("span"),F(J8.$$.fragment),Iwr=l(),c6e=a("span"),qwr=o("FlaxAutoModelForCausalLM"),dqe=l(),mr=a("div"),F(Y8.$$.fragment),Nwr=l(),$c=a("p"),jwr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),HU=a("a"),Dwr=o("from_pretrained()"),Gwr=o(" class method or the "),UU=a("a"),Owr=o("from_config()"),Vwr=o(` class
method.`),Xwr=l(),K8=a("p"),zwr=o("This class cannot be instantiated directly using "),f6e=a("code"),Qwr=o("__init__()"),Wwr=o(" (throws an error)."),Hwr=l(),Dt=a("div"),F(Z8.$$.fragment),Uwr=l(),m6e=a("p"),Jwr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Ywr=l(),kc=a("p"),Kwr=o(`Note:
Loading a model from its configuration file does `),g6e=a("strong"),Zwr=o("not"),eAr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),JU=a("a"),oAr=o("from_pretrained()"),rAr=o(" to load the model weights."),tAr=l(),F(TE.$$.fragment),aAr=l(),Dr=a("div"),F(ex.$$.fragment),nAr=l(),h6e=a("p"),sAr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),lAr=l(),hn=a("p"),iAr=o("The model class to instantiate is selected based on the "),p6e=a("code"),dAr=o("model_type"),cAr=o(` property of the config object (either
passed as an argument or loaded from `),u6e=a("code"),fAr=o("pretrained_model_name_or_path"),mAr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_6e=a("code"),gAr=o("pretrained_model_name_or_path"),hAr=o(":"),pAr=l(),ke=a("ul"),ME=a("li"),b6e=a("strong"),uAr=o("bart"),_Ar=o(" \u2014 "),YU=a("a"),bAr=o("FlaxBartForCausalLM"),vAr=o(" (BART model)"),FAr=l(),EE=a("li"),v6e=a("strong"),TAr=o("bert"),MAr=o(" \u2014 "),KU=a("a"),EAr=o("FlaxBertForCausalLM"),CAr=o(" (BERT model)"),wAr=l(),CE=a("li"),F6e=a("strong"),AAr=o("big_bird"),yAr=o(" \u2014 "),ZU=a("a"),LAr=o("FlaxBigBirdForCausalLM"),xAr=o(" (BigBird model)"),$Ar=l(),wE=a("li"),T6e=a("strong"),kAr=o("electra"),SAr=o(" \u2014 "),eJ=a("a"),RAr=o("FlaxElectraForCausalLM"),BAr=o(" (ELECTRA model)"),PAr=l(),AE=a("li"),M6e=a("strong"),IAr=o("gpt2"),qAr=o(" \u2014 "),oJ=a("a"),NAr=o("FlaxGPT2LMHeadModel"),jAr=o(" (OpenAI GPT-2 model)"),DAr=l(),yE=a("li"),E6e=a("strong"),GAr=o("gpt_neo"),OAr=o(" \u2014 "),rJ=a("a"),VAr=o("FlaxGPTNeoForCausalLM"),XAr=o(" (GPT Neo model)"),zAr=l(),LE=a("li"),C6e=a("strong"),QAr=o("gptj"),WAr=o(" \u2014 "),tJ=a("a"),HAr=o("FlaxGPTJForCausalLM"),UAr=o(" (GPT-J model)"),JAr=l(),xE=a("li"),w6e=a("strong"),YAr=o("roberta"),KAr=o(" \u2014 "),aJ=a("a"),ZAr=o("FlaxRobertaForCausalLM"),eyr=o(" (RoBERTa model)"),oyr=l(),$E=a("li"),A6e=a("strong"),ryr=o("xglm"),tyr=o(" \u2014 "),nJ=a("a"),ayr=o("FlaxXGLMForCausalLM"),nyr=o(" (XGLM model)"),syr=l(),F(kE.$$.fragment),cqe=l(),Sc=a("h2"),SE=a("a"),y6e=a("span"),F(ox.$$.fragment),lyr=l(),L6e=a("span"),iyr=o("FlaxAutoModelForPreTraining"),fqe=l(),gr=a("div"),F(rx.$$.fragment),dyr=l(),Rc=a("p"),cyr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),sJ=a("a"),fyr=o("from_pretrained()"),myr=o(" class method or the "),lJ=a("a"),gyr=o("from_config()"),hyr=o(` class
method.`),pyr=l(),tx=a("p"),uyr=o("This class cannot be instantiated directly using "),x6e=a("code"),_yr=o("__init__()"),byr=o(" (throws an error)."),vyr=l(),Gt=a("div"),F(ax.$$.fragment),Fyr=l(),$6e=a("p"),Tyr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Myr=l(),Bc=a("p"),Eyr=o(`Note:
Loading a model from its configuration file does `),k6e=a("strong"),Cyr=o("not"),wyr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),iJ=a("a"),Ayr=o("from_pretrained()"),yyr=o(" to load the model weights."),Lyr=l(),F(RE.$$.fragment),xyr=l(),Gr=a("div"),F(nx.$$.fragment),$yr=l(),S6e=a("p"),kyr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Syr=l(),pn=a("p"),Ryr=o("The model class to instantiate is selected based on the "),R6e=a("code"),Byr=o("model_type"),Pyr=o(` property of the config object (either
passed as an argument or loaded from `),B6e=a("code"),Iyr=o("pretrained_model_name_or_path"),qyr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),P6e=a("code"),Nyr=o("pretrained_model_name_or_path"),jyr=o(":"),Dyr=l(),Me=a("ul"),BE=a("li"),I6e=a("strong"),Gyr=o("albert"),Oyr=o(" \u2014 "),dJ=a("a"),Vyr=o("FlaxAlbertForPreTraining"),Xyr=o(" (ALBERT model)"),zyr=l(),PE=a("li"),q6e=a("strong"),Qyr=o("bart"),Wyr=o(" \u2014 "),cJ=a("a"),Hyr=o("FlaxBartForConditionalGeneration"),Uyr=o(" (BART model)"),Jyr=l(),IE=a("li"),N6e=a("strong"),Yyr=o("bert"),Kyr=o(" \u2014 "),fJ=a("a"),Zyr=o("FlaxBertForPreTraining"),eLr=o(" (BERT model)"),oLr=l(),qE=a("li"),j6e=a("strong"),rLr=o("big_bird"),tLr=o(" \u2014 "),mJ=a("a"),aLr=o("FlaxBigBirdForPreTraining"),nLr=o(" (BigBird model)"),sLr=l(),NE=a("li"),D6e=a("strong"),lLr=o("electra"),iLr=o(" \u2014 "),gJ=a("a"),dLr=o("FlaxElectraForPreTraining"),cLr=o(" (ELECTRA model)"),fLr=l(),jE=a("li"),G6e=a("strong"),mLr=o("mbart"),gLr=o(" \u2014 "),hJ=a("a"),hLr=o("FlaxMBartForConditionalGeneration"),pLr=o(" (mBART model)"),uLr=l(),DE=a("li"),O6e=a("strong"),_Lr=o("mt5"),bLr=o(" \u2014 "),pJ=a("a"),vLr=o("FlaxMT5ForConditionalGeneration"),FLr=o(" (mT5 model)"),TLr=l(),GE=a("li"),V6e=a("strong"),MLr=o("roberta"),ELr=o(" \u2014 "),uJ=a("a"),CLr=o("FlaxRobertaForMaskedLM"),wLr=o(" (RoBERTa model)"),ALr=l(),OE=a("li"),X6e=a("strong"),yLr=o("roformer"),LLr=o(" \u2014 "),_J=a("a"),xLr=o("FlaxRoFormerForMaskedLM"),$Lr=o(" (RoFormer model)"),kLr=l(),VE=a("li"),z6e=a("strong"),SLr=o("t5"),RLr=o(" \u2014 "),bJ=a("a"),BLr=o("FlaxT5ForConditionalGeneration"),PLr=o(" (T5 model)"),ILr=l(),XE=a("li"),Q6e=a("strong"),qLr=o("wav2vec2"),NLr=o(" \u2014 "),vJ=a("a"),jLr=o("FlaxWav2Vec2ForPreTraining"),DLr=o(" (Wav2Vec2 model)"),GLr=l(),zE=a("li"),W6e=a("strong"),OLr=o("xlm-roberta"),VLr=o(" \u2014 "),FJ=a("a"),XLr=o("FlaxXLMRobertaForMaskedLM"),zLr=o(" (XLM-RoBERTa model)"),QLr=l(),F(QE.$$.fragment),mqe=l(),Pc=a("h2"),WE=a("a"),H6e=a("span"),F(sx.$$.fragment),WLr=l(),U6e=a("span"),HLr=o("FlaxAutoModelForMaskedLM"),gqe=l(),hr=a("div"),F(lx.$$.fragment),ULr=l(),Ic=a("p"),JLr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),TJ=a("a"),YLr=o("from_pretrained()"),KLr=o(" class method or the "),MJ=a("a"),ZLr=o("from_config()"),e8r=o(` class
method.`),o8r=l(),ix=a("p"),r8r=o("This class cannot be instantiated directly using "),J6e=a("code"),t8r=o("__init__()"),a8r=o(" (throws an error)."),n8r=l(),Ot=a("div"),F(dx.$$.fragment),s8r=l(),Y6e=a("p"),l8r=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),i8r=l(),qc=a("p"),d8r=o(`Note:
Loading a model from its configuration file does `),K6e=a("strong"),c8r=o("not"),f8r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),EJ=a("a"),m8r=o("from_pretrained()"),g8r=o(" to load the model weights."),h8r=l(),F(HE.$$.fragment),p8r=l(),Or=a("div"),F(cx.$$.fragment),u8r=l(),Z6e=a("p"),_8r=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),b8r=l(),un=a("p"),v8r=o("The model class to instantiate is selected based on the "),eTe=a("code"),F8r=o("model_type"),T8r=o(` property of the config object (either
passed as an argument or loaded from `),oTe=a("code"),M8r=o("pretrained_model_name_or_path"),E8r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rTe=a("code"),C8r=o("pretrained_model_name_or_path"),w8r=o(":"),A8r=l(),Le=a("ul"),UE=a("li"),tTe=a("strong"),y8r=o("albert"),L8r=o(" \u2014 "),CJ=a("a"),x8r=o("FlaxAlbertForMaskedLM"),$8r=o(" (ALBERT model)"),k8r=l(),JE=a("li"),aTe=a("strong"),S8r=o("bart"),R8r=o(" \u2014 "),wJ=a("a"),B8r=o("FlaxBartForConditionalGeneration"),P8r=o(" (BART model)"),I8r=l(),YE=a("li"),nTe=a("strong"),q8r=o("bert"),N8r=o(" \u2014 "),AJ=a("a"),j8r=o("FlaxBertForMaskedLM"),D8r=o(" (BERT model)"),G8r=l(),KE=a("li"),sTe=a("strong"),O8r=o("big_bird"),V8r=o(" \u2014 "),yJ=a("a"),X8r=o("FlaxBigBirdForMaskedLM"),z8r=o(" (BigBird model)"),Q8r=l(),ZE=a("li"),lTe=a("strong"),W8r=o("distilbert"),H8r=o(" \u2014 "),LJ=a("a"),U8r=o("FlaxDistilBertForMaskedLM"),J8r=o(" (DistilBERT model)"),Y8r=l(),e5=a("li"),iTe=a("strong"),K8r=o("electra"),Z8r=o(" \u2014 "),xJ=a("a"),exr=o("FlaxElectraForMaskedLM"),oxr=o(" (ELECTRA model)"),rxr=l(),o5=a("li"),dTe=a("strong"),txr=o("mbart"),axr=o(" \u2014 "),$J=a("a"),nxr=o("FlaxMBartForConditionalGeneration"),sxr=o(" (mBART model)"),lxr=l(),r5=a("li"),cTe=a("strong"),ixr=o("roberta"),dxr=o(" \u2014 "),kJ=a("a"),cxr=o("FlaxRobertaForMaskedLM"),fxr=o(" (RoBERTa model)"),mxr=l(),t5=a("li"),fTe=a("strong"),gxr=o("roformer"),hxr=o(" \u2014 "),SJ=a("a"),pxr=o("FlaxRoFormerForMaskedLM"),uxr=o(" (RoFormer model)"),_xr=l(),a5=a("li"),mTe=a("strong"),bxr=o("xlm-roberta"),vxr=o(" \u2014 "),RJ=a("a"),Fxr=o("FlaxXLMRobertaForMaskedLM"),Txr=o(" (XLM-RoBERTa model)"),Mxr=l(),F(n5.$$.fragment),hqe=l(),Nc=a("h2"),s5=a("a"),gTe=a("span"),F(fx.$$.fragment),Exr=l(),hTe=a("span"),Cxr=o("FlaxAutoModelForSeq2SeqLM"),pqe=l(),pr=a("div"),F(mx.$$.fragment),wxr=l(),jc=a("p"),Axr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),BJ=a("a"),yxr=o("from_pretrained()"),Lxr=o(" class method or the "),PJ=a("a"),xxr=o("from_config()"),$xr=o(` class
method.`),kxr=l(),gx=a("p"),Sxr=o("This class cannot be instantiated directly using "),pTe=a("code"),Rxr=o("__init__()"),Bxr=o(" (throws an error)."),Pxr=l(),Vt=a("div"),F(hx.$$.fragment),Ixr=l(),uTe=a("p"),qxr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Nxr=l(),Dc=a("p"),jxr=o(`Note:
Loading a model from its configuration file does `),_Te=a("strong"),Dxr=o("not"),Gxr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),IJ=a("a"),Oxr=o("from_pretrained()"),Vxr=o(" to load the model weights."),Xxr=l(),F(l5.$$.fragment),zxr=l(),Vr=a("div"),F(px.$$.fragment),Qxr=l(),bTe=a("p"),Wxr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Hxr=l(),_n=a("p"),Uxr=o("The model class to instantiate is selected based on the "),vTe=a("code"),Jxr=o("model_type"),Yxr=o(` property of the config object (either
passed as an argument or loaded from `),FTe=a("code"),Kxr=o("pretrained_model_name_or_path"),Zxr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),TTe=a("code"),e9r=o("pretrained_model_name_or_path"),o9r=o(":"),r9r=l(),Se=a("ul"),i5=a("li"),MTe=a("strong"),t9r=o("bart"),a9r=o(" \u2014 "),qJ=a("a"),n9r=o("FlaxBartForConditionalGeneration"),s9r=o(" (BART model)"),l9r=l(),d5=a("li"),ETe=a("strong"),i9r=o("blenderbot"),d9r=o(" \u2014 "),NJ=a("a"),c9r=o("FlaxBlenderbotForConditionalGeneration"),f9r=o(" (Blenderbot model)"),m9r=l(),c5=a("li"),CTe=a("strong"),g9r=o("blenderbot-small"),h9r=o(" \u2014 "),jJ=a("a"),p9r=o("FlaxBlenderbotSmallForConditionalGeneration"),u9r=o(" (BlenderbotSmall model)"),_9r=l(),f5=a("li"),wTe=a("strong"),b9r=o("encoder-decoder"),v9r=o(" \u2014 "),DJ=a("a"),F9r=o("FlaxEncoderDecoderModel"),T9r=o(" (Encoder decoder model)"),M9r=l(),m5=a("li"),ATe=a("strong"),E9r=o("marian"),C9r=o(" \u2014 "),GJ=a("a"),w9r=o("FlaxMarianMTModel"),A9r=o(" (Marian model)"),y9r=l(),g5=a("li"),yTe=a("strong"),L9r=o("mbart"),x9r=o(" \u2014 "),OJ=a("a"),$9r=o("FlaxMBartForConditionalGeneration"),k9r=o(" (mBART model)"),S9r=l(),h5=a("li"),LTe=a("strong"),R9r=o("mt5"),B9r=o(" \u2014 "),VJ=a("a"),P9r=o("FlaxMT5ForConditionalGeneration"),I9r=o(" (mT5 model)"),q9r=l(),p5=a("li"),xTe=a("strong"),N9r=o("pegasus"),j9r=o(" \u2014 "),XJ=a("a"),D9r=o("FlaxPegasusForConditionalGeneration"),G9r=o(" (Pegasus model)"),O9r=l(),u5=a("li"),$Te=a("strong"),V9r=o("t5"),X9r=o(" \u2014 "),zJ=a("a"),z9r=o("FlaxT5ForConditionalGeneration"),Q9r=o(" (T5 model)"),W9r=l(),F(_5.$$.fragment),uqe=l(),Gc=a("h2"),b5=a("a"),kTe=a("span"),F(ux.$$.fragment),H9r=l(),STe=a("span"),U9r=o("FlaxAutoModelForSequenceClassification"),_qe=l(),ur=a("div"),F(_x.$$.fragment),J9r=l(),Oc=a("p"),Y9r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),QJ=a("a"),K9r=o("from_pretrained()"),Z9r=o(" class method or the "),WJ=a("a"),e$r=o("from_config()"),o$r=o(` class
method.`),r$r=l(),bx=a("p"),t$r=o("This class cannot be instantiated directly using "),RTe=a("code"),a$r=o("__init__()"),n$r=o(" (throws an error)."),s$r=l(),Xt=a("div"),F(vx.$$.fragment),l$r=l(),BTe=a("p"),i$r=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),d$r=l(),Vc=a("p"),c$r=o(`Note:
Loading a model from its configuration file does `),PTe=a("strong"),f$r=o("not"),m$r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),HJ=a("a"),g$r=o("from_pretrained()"),h$r=o(" to load the model weights."),p$r=l(),F(v5.$$.fragment),u$r=l(),Xr=a("div"),F(Fx.$$.fragment),_$r=l(),ITe=a("p"),b$r=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),v$r=l(),bn=a("p"),F$r=o("The model class to instantiate is selected based on the "),qTe=a("code"),T$r=o("model_type"),M$r=o(` property of the config object (either
passed as an argument or loaded from `),NTe=a("code"),E$r=o("pretrained_model_name_or_path"),C$r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jTe=a("code"),w$r=o("pretrained_model_name_or_path"),A$r=o(":"),y$r=l(),xe=a("ul"),F5=a("li"),DTe=a("strong"),L$r=o("albert"),x$r=o(" \u2014 "),UJ=a("a"),$$r=o("FlaxAlbertForSequenceClassification"),k$r=o(" (ALBERT model)"),S$r=l(),T5=a("li"),GTe=a("strong"),R$r=o("bart"),B$r=o(" \u2014 "),JJ=a("a"),P$r=o("FlaxBartForSequenceClassification"),I$r=o(" (BART model)"),q$r=l(),M5=a("li"),OTe=a("strong"),N$r=o("bert"),j$r=o(" \u2014 "),YJ=a("a"),D$r=o("FlaxBertForSequenceClassification"),G$r=o(" (BERT model)"),O$r=l(),E5=a("li"),VTe=a("strong"),V$r=o("big_bird"),X$r=o(" \u2014 "),KJ=a("a"),z$r=o("FlaxBigBirdForSequenceClassification"),Q$r=o(" (BigBird model)"),W$r=l(),C5=a("li"),XTe=a("strong"),H$r=o("distilbert"),U$r=o(" \u2014 "),ZJ=a("a"),J$r=o("FlaxDistilBertForSequenceClassification"),Y$r=o(" (DistilBERT model)"),K$r=l(),w5=a("li"),zTe=a("strong"),Z$r=o("electra"),ekr=o(" \u2014 "),eY=a("a"),okr=o("FlaxElectraForSequenceClassification"),rkr=o(" (ELECTRA model)"),tkr=l(),A5=a("li"),QTe=a("strong"),akr=o("mbart"),nkr=o(" \u2014 "),oY=a("a"),skr=o("FlaxMBartForSequenceClassification"),lkr=o(" (mBART model)"),ikr=l(),y5=a("li"),WTe=a("strong"),dkr=o("roberta"),ckr=o(" \u2014 "),rY=a("a"),fkr=o("FlaxRobertaForSequenceClassification"),mkr=o(" (RoBERTa model)"),gkr=l(),L5=a("li"),HTe=a("strong"),hkr=o("roformer"),pkr=o(" \u2014 "),tY=a("a"),ukr=o("FlaxRoFormerForSequenceClassification"),_kr=o(" (RoFormer model)"),bkr=l(),x5=a("li"),UTe=a("strong"),vkr=o("xlm-roberta"),Fkr=o(" \u2014 "),aY=a("a"),Tkr=o("FlaxXLMRobertaForSequenceClassification"),Mkr=o(" (XLM-RoBERTa model)"),Ekr=l(),F($5.$$.fragment),bqe=l(),Xc=a("h2"),k5=a("a"),JTe=a("span"),F(Tx.$$.fragment),Ckr=l(),YTe=a("span"),wkr=o("FlaxAutoModelForQuestionAnswering"),vqe=l(),_r=a("div"),F(Mx.$$.fragment),Akr=l(),zc=a("p"),ykr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),nY=a("a"),Lkr=o("from_pretrained()"),xkr=o(" class method or the "),sY=a("a"),$kr=o("from_config()"),kkr=o(` class
method.`),Skr=l(),Ex=a("p"),Rkr=o("This class cannot be instantiated directly using "),KTe=a("code"),Bkr=o("__init__()"),Pkr=o(" (throws an error)."),Ikr=l(),zt=a("div"),F(Cx.$$.fragment),qkr=l(),ZTe=a("p"),Nkr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),jkr=l(),Qc=a("p"),Dkr=o(`Note:
Loading a model from its configuration file does `),e7e=a("strong"),Gkr=o("not"),Okr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lY=a("a"),Vkr=o("from_pretrained()"),Xkr=o(" to load the model weights."),zkr=l(),F(S5.$$.fragment),Qkr=l(),zr=a("div"),F(wx.$$.fragment),Wkr=l(),o7e=a("p"),Hkr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Ukr=l(),vn=a("p"),Jkr=o("The model class to instantiate is selected based on the "),r7e=a("code"),Ykr=o("model_type"),Kkr=o(` property of the config object (either
passed as an argument or loaded from `),t7e=a("code"),Zkr=o("pretrained_model_name_or_path"),eSr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),a7e=a("code"),oSr=o("pretrained_model_name_or_path"),rSr=o(":"),tSr=l(),$e=a("ul"),R5=a("li"),n7e=a("strong"),aSr=o("albert"),nSr=o(" \u2014 "),iY=a("a"),sSr=o("FlaxAlbertForQuestionAnswering"),lSr=o(" (ALBERT model)"),iSr=l(),B5=a("li"),s7e=a("strong"),dSr=o("bart"),cSr=o(" \u2014 "),dY=a("a"),fSr=o("FlaxBartForQuestionAnswering"),mSr=o(" (BART model)"),gSr=l(),P5=a("li"),l7e=a("strong"),hSr=o("bert"),pSr=o(" \u2014 "),cY=a("a"),uSr=o("FlaxBertForQuestionAnswering"),_Sr=o(" (BERT model)"),bSr=l(),I5=a("li"),i7e=a("strong"),vSr=o("big_bird"),FSr=o(" \u2014 "),fY=a("a"),TSr=o("FlaxBigBirdForQuestionAnswering"),MSr=o(" (BigBird model)"),ESr=l(),q5=a("li"),d7e=a("strong"),CSr=o("distilbert"),wSr=o(" \u2014 "),mY=a("a"),ASr=o("FlaxDistilBertForQuestionAnswering"),ySr=o(" (DistilBERT model)"),LSr=l(),N5=a("li"),c7e=a("strong"),xSr=o("electra"),$Sr=o(" \u2014 "),gY=a("a"),kSr=o("FlaxElectraForQuestionAnswering"),SSr=o(" (ELECTRA model)"),RSr=l(),j5=a("li"),f7e=a("strong"),BSr=o("mbart"),PSr=o(" \u2014 "),hY=a("a"),ISr=o("FlaxMBartForQuestionAnswering"),qSr=o(" (mBART model)"),NSr=l(),D5=a("li"),m7e=a("strong"),jSr=o("roberta"),DSr=o(" \u2014 "),pY=a("a"),GSr=o("FlaxRobertaForQuestionAnswering"),OSr=o(" (RoBERTa model)"),VSr=l(),G5=a("li"),g7e=a("strong"),XSr=o("roformer"),zSr=o(" \u2014 "),uY=a("a"),QSr=o("FlaxRoFormerForQuestionAnswering"),WSr=o(" (RoFormer model)"),HSr=l(),O5=a("li"),h7e=a("strong"),USr=o("xlm-roberta"),JSr=o(" \u2014 "),_Y=a("a"),YSr=o("FlaxXLMRobertaForQuestionAnswering"),KSr=o(" (XLM-RoBERTa model)"),ZSr=l(),F(V5.$$.fragment),Fqe=l(),Wc=a("h2"),X5=a("a"),p7e=a("span"),F(Ax.$$.fragment),eRr=l(),u7e=a("span"),oRr=o("FlaxAutoModelForTokenClassification"),Tqe=l(),br=a("div"),F(yx.$$.fragment),rRr=l(),Hc=a("p"),tRr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),bY=a("a"),aRr=o("from_pretrained()"),nRr=o(" class method or the "),vY=a("a"),sRr=o("from_config()"),lRr=o(` class
method.`),iRr=l(),Lx=a("p"),dRr=o("This class cannot be instantiated directly using "),_7e=a("code"),cRr=o("__init__()"),fRr=o(" (throws an error)."),mRr=l(),Qt=a("div"),F(xx.$$.fragment),gRr=l(),b7e=a("p"),hRr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),pRr=l(),Uc=a("p"),uRr=o(`Note:
Loading a model from its configuration file does `),v7e=a("strong"),_Rr=o("not"),bRr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),FY=a("a"),vRr=o("from_pretrained()"),FRr=o(" to load the model weights."),TRr=l(),F(z5.$$.fragment),MRr=l(),Qr=a("div"),F($x.$$.fragment),ERr=l(),F7e=a("p"),CRr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),wRr=l(),Fn=a("p"),ARr=o("The model class to instantiate is selected based on the "),T7e=a("code"),yRr=o("model_type"),LRr=o(` property of the config object (either
passed as an argument or loaded from `),M7e=a("code"),xRr=o("pretrained_model_name_or_path"),$Rr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),E7e=a("code"),kRr=o("pretrained_model_name_or_path"),SRr=o(":"),RRr=l(),De=a("ul"),Q5=a("li"),C7e=a("strong"),BRr=o("albert"),PRr=o(" \u2014 "),TY=a("a"),IRr=o("FlaxAlbertForTokenClassification"),qRr=o(" (ALBERT model)"),NRr=l(),W5=a("li"),w7e=a("strong"),jRr=o("bert"),DRr=o(" \u2014 "),MY=a("a"),GRr=o("FlaxBertForTokenClassification"),ORr=o(" (BERT model)"),VRr=l(),H5=a("li"),A7e=a("strong"),XRr=o("big_bird"),zRr=o(" \u2014 "),EY=a("a"),QRr=o("FlaxBigBirdForTokenClassification"),WRr=o(" (BigBird model)"),HRr=l(),U5=a("li"),y7e=a("strong"),URr=o("distilbert"),JRr=o(" \u2014 "),CY=a("a"),YRr=o("FlaxDistilBertForTokenClassification"),KRr=o(" (DistilBERT model)"),ZRr=l(),J5=a("li"),L7e=a("strong"),eBr=o("electra"),oBr=o(" \u2014 "),wY=a("a"),rBr=o("FlaxElectraForTokenClassification"),tBr=o(" (ELECTRA model)"),aBr=l(),Y5=a("li"),x7e=a("strong"),nBr=o("roberta"),sBr=o(" \u2014 "),AY=a("a"),lBr=o("FlaxRobertaForTokenClassification"),iBr=o(" (RoBERTa model)"),dBr=l(),K5=a("li"),$7e=a("strong"),cBr=o("roformer"),fBr=o(" \u2014 "),yY=a("a"),mBr=o("FlaxRoFormerForTokenClassification"),gBr=o(" (RoFormer model)"),hBr=l(),Z5=a("li"),k7e=a("strong"),pBr=o("xlm-roberta"),uBr=o(" \u2014 "),LY=a("a"),_Br=o("FlaxXLMRobertaForTokenClassification"),bBr=o(" (XLM-RoBERTa model)"),vBr=l(),F(eC.$$.fragment),Mqe=l(),Jc=a("h2"),oC=a("a"),S7e=a("span"),F(kx.$$.fragment),FBr=l(),R7e=a("span"),TBr=o("FlaxAutoModelForMultipleChoice"),Eqe=l(),vr=a("div"),F(Sx.$$.fragment),MBr=l(),Yc=a("p"),EBr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),xY=a("a"),CBr=o("from_pretrained()"),wBr=o(" class method or the "),$Y=a("a"),ABr=o("from_config()"),yBr=o(` class
method.`),LBr=l(),Rx=a("p"),xBr=o("This class cannot be instantiated directly using "),B7e=a("code"),$Br=o("__init__()"),kBr=o(" (throws an error)."),SBr=l(),Wt=a("div"),F(Bx.$$.fragment),RBr=l(),P7e=a("p"),BBr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),PBr=l(),Kc=a("p"),IBr=o(`Note:
Loading a model from its configuration file does `),I7e=a("strong"),qBr=o("not"),NBr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),kY=a("a"),jBr=o("from_pretrained()"),DBr=o(" to load the model weights."),GBr=l(),F(rC.$$.fragment),OBr=l(),Wr=a("div"),F(Px.$$.fragment),VBr=l(),q7e=a("p"),XBr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),zBr=l(),Tn=a("p"),QBr=o("The model class to instantiate is selected based on the "),N7e=a("code"),WBr=o("model_type"),HBr=o(` property of the config object (either
passed as an argument or loaded from `),j7e=a("code"),UBr=o("pretrained_model_name_or_path"),JBr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),D7e=a("code"),YBr=o("pretrained_model_name_or_path"),KBr=o(":"),ZBr=l(),Ge=a("ul"),tC=a("li"),G7e=a("strong"),ePr=o("albert"),oPr=o(" \u2014 "),SY=a("a"),rPr=o("FlaxAlbertForMultipleChoice"),tPr=o(" (ALBERT model)"),aPr=l(),aC=a("li"),O7e=a("strong"),nPr=o("bert"),sPr=o(" \u2014 "),RY=a("a"),lPr=o("FlaxBertForMultipleChoice"),iPr=o(" (BERT model)"),dPr=l(),nC=a("li"),V7e=a("strong"),cPr=o("big_bird"),fPr=o(" \u2014 "),BY=a("a"),mPr=o("FlaxBigBirdForMultipleChoice"),gPr=o(" (BigBird model)"),hPr=l(),sC=a("li"),X7e=a("strong"),pPr=o("distilbert"),uPr=o(" \u2014 "),PY=a("a"),_Pr=o("FlaxDistilBertForMultipleChoice"),bPr=o(" (DistilBERT model)"),vPr=l(),lC=a("li"),z7e=a("strong"),FPr=o("electra"),TPr=o(" \u2014 "),IY=a("a"),MPr=o("FlaxElectraForMultipleChoice"),EPr=o(" (ELECTRA model)"),CPr=l(),iC=a("li"),Q7e=a("strong"),wPr=o("roberta"),APr=o(" \u2014 "),qY=a("a"),yPr=o("FlaxRobertaForMultipleChoice"),LPr=o(" (RoBERTa model)"),xPr=l(),dC=a("li"),W7e=a("strong"),$Pr=o("roformer"),kPr=o(" \u2014 "),NY=a("a"),SPr=o("FlaxRoFormerForMultipleChoice"),RPr=o(" (RoFormer model)"),BPr=l(),cC=a("li"),H7e=a("strong"),PPr=o("xlm-roberta"),IPr=o(" \u2014 "),jY=a("a"),qPr=o("FlaxXLMRobertaForMultipleChoice"),NPr=o(" (XLM-RoBERTa model)"),jPr=l(),F(fC.$$.fragment),Cqe=l(),Zc=a("h2"),mC=a("a"),U7e=a("span"),F(Ix.$$.fragment),DPr=l(),J7e=a("span"),GPr=o("FlaxAutoModelForNextSentencePrediction"),wqe=l(),Fr=a("div"),F(qx.$$.fragment),OPr=l(),ef=a("p"),VPr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),DY=a("a"),XPr=o("from_pretrained()"),zPr=o(" class method or the "),GY=a("a"),QPr=o("from_config()"),WPr=o(` class
method.`),HPr=l(),Nx=a("p"),UPr=o("This class cannot be instantiated directly using "),Y7e=a("code"),JPr=o("__init__()"),YPr=o(" (throws an error)."),KPr=l(),Ht=a("div"),F(jx.$$.fragment),ZPr=l(),K7e=a("p"),eIr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),oIr=l(),of=a("p"),rIr=o(`Note:
Loading a model from its configuration file does `),Z7e=a("strong"),tIr=o("not"),aIr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),OY=a("a"),nIr=o("from_pretrained()"),sIr=o(" to load the model weights."),lIr=l(),F(gC.$$.fragment),iIr=l(),Hr=a("div"),F(Dx.$$.fragment),dIr=l(),eMe=a("p"),cIr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),fIr=l(),Mn=a("p"),mIr=o("The model class to instantiate is selected based on the "),oMe=a("code"),gIr=o("model_type"),hIr=o(` property of the config object (either
passed as an argument or loaded from `),rMe=a("code"),pIr=o("pretrained_model_name_or_path"),uIr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tMe=a("code"),_Ir=o("pretrained_model_name_or_path"),bIr=o(":"),vIr=l(),aMe=a("ul"),hC=a("li"),nMe=a("strong"),FIr=o("bert"),TIr=o(" \u2014 "),VY=a("a"),MIr=o("FlaxBertForNextSentencePrediction"),EIr=o(" (BERT model)"),CIr=l(),F(pC.$$.fragment),Aqe=l(),rf=a("h2"),uC=a("a"),sMe=a("span"),F(Gx.$$.fragment),wIr=l(),lMe=a("span"),AIr=o("FlaxAutoModelForImageClassification"),yqe=l(),Tr=a("div"),F(Ox.$$.fragment),yIr=l(),tf=a("p"),LIr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),XY=a("a"),xIr=o("from_pretrained()"),$Ir=o(" class method or the "),zY=a("a"),kIr=o("from_config()"),SIr=o(` class
method.`),RIr=l(),Vx=a("p"),BIr=o("This class cannot be instantiated directly using "),iMe=a("code"),PIr=o("__init__()"),IIr=o(" (throws an error)."),qIr=l(),Ut=a("div"),F(Xx.$$.fragment),NIr=l(),dMe=a("p"),jIr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),DIr=l(),af=a("p"),GIr=o(`Note:
Loading a model from its configuration file does `),cMe=a("strong"),OIr=o("not"),VIr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QY=a("a"),XIr=o("from_pretrained()"),zIr=o(" to load the model weights."),QIr=l(),F(_C.$$.fragment),WIr=l(),Ur=a("div"),F(zx.$$.fragment),HIr=l(),fMe=a("p"),UIr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),JIr=l(),En=a("p"),YIr=o("The model class to instantiate is selected based on the "),mMe=a("code"),KIr=o("model_type"),ZIr=o(` property of the config object (either
passed as an argument or loaded from `),gMe=a("code"),eqr=o("pretrained_model_name_or_path"),oqr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hMe=a("code"),rqr=o("pretrained_model_name_or_path"),tqr=o(":"),aqr=l(),Qx=a("ul"),bC=a("li"),pMe=a("strong"),nqr=o("beit"),sqr=o(" \u2014 "),WY=a("a"),lqr=o("FlaxBeitForImageClassification"),iqr=o(" (BEiT model)"),dqr=l(),vC=a("li"),uMe=a("strong"),cqr=o("vit"),fqr=o(" \u2014 "),HY=a("a"),mqr=o("FlaxViTForImageClassification"),gqr=o(" (ViT model)"),hqr=l(),F(FC.$$.fragment),Lqe=l(),nf=a("h2"),TC=a("a"),_Me=a("span"),F(Wx.$$.fragment),pqr=l(),bMe=a("span"),uqr=o("FlaxAutoModelForVision2Seq"),xqe=l(),Mr=a("div"),F(Hx.$$.fragment),_qr=l(),sf=a("p"),bqr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),UY=a("a"),vqr=o("from_pretrained()"),Fqr=o(" class method or the "),JY=a("a"),Tqr=o("from_config()"),Mqr=o(` class
method.`),Eqr=l(),Ux=a("p"),Cqr=o("This class cannot be instantiated directly using "),vMe=a("code"),wqr=o("__init__()"),Aqr=o(" (throws an error)."),yqr=l(),Jt=a("div"),F(Jx.$$.fragment),Lqr=l(),FMe=a("p"),xqr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),$qr=l(),lf=a("p"),kqr=o(`Note:
Loading a model from its configuration file does `),TMe=a("strong"),Sqr=o("not"),Rqr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),YY=a("a"),Bqr=o("from_pretrained()"),Pqr=o(" to load the model weights."),Iqr=l(),F(MC.$$.fragment),qqr=l(),Jr=a("div"),F(Yx.$$.fragment),Nqr=l(),MMe=a("p"),jqr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Dqr=l(),Cn=a("p"),Gqr=o("The model class to instantiate is selected based on the "),EMe=a("code"),Oqr=o("model_type"),Vqr=o(` property of the config object (either
passed as an argument or loaded from `),CMe=a("code"),Xqr=o("pretrained_model_name_or_path"),zqr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wMe=a("code"),Qqr=o("pretrained_model_name_or_path"),Wqr=o(":"),Hqr=l(),AMe=a("ul"),EC=a("li"),yMe=a("strong"),Uqr=o("vision-encoder-decoder"),Jqr=o(" \u2014 "),KY=a("a"),Yqr=o("FlaxVisionEncoderDecoderModel"),Kqr=o(" (Vision Encoder decoder model)"),Zqr=l(),F(CC.$$.fragment),this.h()},l(f){const _=Fwt('[data-svelte="svelte-1phssyn"]',document.head);g=n(_,"META",{name:!0,content:!0}),_.forEach(t),v=i(f),p=n(f,"H1",{class:!0});var Kx=s(p);m=n(Kx,"A",{id:!0,class:!0,href:!0});var LMe=s(m);u=n(LMe,"SPAN",{});var xMe=s(u);T(d.$$.fragment,xMe),xMe.forEach(t),LMe.forEach(t),h=i(Kx),Mo=n(Kx,"SPAN",{});var $Me=s(Mo);li=r($Me,"Auto Classes"),$Me.forEach(t),Kx.forEach(t),mf=i(f),et=n(f,"P",{});var Zx=s(et);ii=r(Zx,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),di=n(Zx,"CODE",{});var kMe=s(di);Vw=r(kMe,"from_pretrained()"),kMe.forEach(t),gf=r(Zx,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Zx.forEach(t),qe=i(f),Xe=n(f,"P",{});var wn=s(Xe);ci=r(wn,"Instantiating one of "),An=n(wn,"A",{href:!0});var SMe=s(An);Xw=r(SMe,"AutoConfig"),SMe.forEach(t),yn=r(wn,", "),Ln=n(wn,"A",{href:!0});var RMe=s(Ln);zw=r(RMe,"AutoModel"),RMe.forEach(t),fi=r(wn,`, and
`),xn=n(wn,"A",{href:!0});var BMe=s(xn);Qw=r(BMe,"AutoTokenizer"),BMe.forEach(t),mi=r(wn," will directly create a class of the relevant architecture. For instance"),wn.forEach(t),hf=i(f),T(Ma.$$.fragment,f),ze=i(f),Ae=n(f,"P",{});var e9=s(Ae);c$=r(e9,"will create a model that is an instance of "),gi=n(e9,"A",{href:!0});var PMe=s(gi);f$=r(PMe,"BertModel"),PMe.forEach(t),m$=r(e9,"."),e9.forEach(t),Eo=i(f),Ea=n(f,"P",{});var o9=s(Ea);g$=r(o9,"There is one class of "),pf=n(o9,"CODE",{});var IMe=s(pf);h$=r(IMe,"AutoModel"),IMe.forEach(t),Nje=r(o9," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),o9.forEach(t),yPe=i(f),hi=n(f,"H2",{class:!0});var r9=s(hi);uf=n(r9,"A",{id:!0,class:!0,href:!0});var qMe=s(uf);QZ=n(qMe,"SPAN",{});var NMe=s(QZ);T(Ww.$$.fragment,NMe),NMe.forEach(t),qMe.forEach(t),jje=i(r9),WZ=n(r9,"SPAN",{});var jMe=s(WZ);Dje=r(jMe,"Extending the Auto Classes"),jMe.forEach(t),r9.forEach(t),LPe=i(f),$n=n(f,"P",{});var df=s($n);Gje=r(df,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),HZ=n(df,"CODE",{});var DMe=s(HZ);Oje=r(DMe,"NewModel"),DMe.forEach(t),Vje=r(df,", make sure you have a "),UZ=n(df,"CODE",{});var GMe=s(UZ);Xje=r(GMe,"NewModelConfig"),GMe.forEach(t),zje=r(df,` then you can add those to the auto
classes like this:`),df.forEach(t),xPe=i(f),T(Hw.$$.fragment,f),$Pe=i(f),p$=n(f,"P",{});var OMe=s(p$);Qje=r(OMe,"You will then be able to use the auto classes like you would usually do!"),OMe.forEach(t),kPe=i(f),T(_f.$$.fragment,f),SPe=i(f),pi=n(f,"H2",{class:!0});var t9=s(pi);bf=n(t9,"A",{id:!0,class:!0,href:!0});var VMe=s(bf);JZ=n(VMe,"SPAN",{});var XMe=s(JZ);T(Uw.$$.fragment,XMe),XMe.forEach(t),VMe.forEach(t),Wje=i(t9),YZ=n(t9,"SPAN",{});var zMe=s(YZ);Hje=r(zMe,"AutoConfig"),zMe.forEach(t),t9.forEach(t),RPe=i(f),Co=n(f,"DIV",{class:!0});var Kr=s(Co);T(Jw.$$.fragment,Kr),Uje=i(Kr),Yw=n(Kr,"P",{});var a9=s(Yw);Jje=r(a9,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),u$=n(a9,"A",{href:!0});var QMe=s(u$);Yje=r(QMe,"from_pretrained()"),QMe.forEach(t),Kje=r(a9," class method."),a9.forEach(t),Zje=i(Kr),Kw=n(Kr,"P",{});var n9=s(Kw);eDe=r(n9,"This class cannot be instantiated directly using "),KZ=n(n9,"CODE",{});var WMe=s(KZ);oDe=r(WMe,"__init__()"),WMe.forEach(t),rDe=r(n9," (throws an error)."),n9.forEach(t),tDe=i(Kr),Er=n(Kr,"DIV",{class:!0});var Zr=s(Er);T(Zw.$$.fragment,Zr),aDe=i(Zr),ZZ=n(Zr,"P",{});var HMe=s(ZZ);nDe=r(HMe,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),HMe.forEach(t),sDe=i(Zr),ui=n(Zr,"P",{});var cf=s(ui);lDe=r(cf,"The configuration class to instantiate is selected based on the "),eee=n(cf,"CODE",{});var UMe=s(eee);iDe=r(UMe,"model_type"),UMe.forEach(t),dDe=r(cf,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),oee=n(cf,"CODE",{});var JMe=s(oee);cDe=r(JMe,"pretrained_model_name_or_path"),JMe.forEach(t),fDe=r(cf,":"),cf.forEach(t),mDe=i(Zr),y=n(Zr,"UL",{});var L=s(y);vf=n(L,"LI",{});var wC=s(vf);ree=n(wC,"STRONG",{});var YMe=s(ree);gDe=r(YMe,"albert"),YMe.forEach(t),hDe=r(wC," \u2014 "),_$=n(wC,"A",{href:!0});var KMe=s(_$);pDe=r(KMe,"AlbertConfig"),KMe.forEach(t),uDe=r(wC," (ALBERT model)"),wC.forEach(t),_De=i(L),Ff=n(L,"LI",{});var AC=s(Ff);tee=n(AC,"STRONG",{});var ZMe=s(tee);bDe=r(ZMe,"bart"),ZMe.forEach(t),vDe=r(AC," \u2014 "),b$=n(AC,"A",{href:!0});var e4e=s(b$);FDe=r(e4e,"BartConfig"),e4e.forEach(t),TDe=r(AC," (BART model)"),AC.forEach(t),MDe=i(L),Tf=n(L,"LI",{});var yC=s(Tf);aee=n(yC,"STRONG",{});var o4e=s(aee);EDe=r(o4e,"beit"),o4e.forEach(t),CDe=r(yC," \u2014 "),v$=n(yC,"A",{href:!0});var r4e=s(v$);wDe=r(r4e,"BeitConfig"),r4e.forEach(t),ADe=r(yC," (BEiT model)"),yC.forEach(t),yDe=i(L),Mf=n(L,"LI",{});var LC=s(Mf);nee=n(LC,"STRONG",{});var t4e=s(nee);LDe=r(t4e,"bert"),t4e.forEach(t),xDe=r(LC," \u2014 "),F$=n(LC,"A",{href:!0});var a4e=s(F$);$De=r(a4e,"BertConfig"),a4e.forEach(t),kDe=r(LC," (BERT model)"),LC.forEach(t),SDe=i(L),Ef=n(L,"LI",{});var xC=s(Ef);see=n(xC,"STRONG",{});var n4e=s(see);RDe=r(n4e,"bert-generation"),n4e.forEach(t),BDe=r(xC," \u2014 "),T$=n(xC,"A",{href:!0});var s4e=s(T$);PDe=r(s4e,"BertGenerationConfig"),s4e.forEach(t),IDe=r(xC," (Bert Generation model)"),xC.forEach(t),qDe=i(L),Cf=n(L,"LI",{});var $C=s(Cf);lee=n($C,"STRONG",{});var l4e=s(lee);NDe=r(l4e,"big_bird"),l4e.forEach(t),jDe=r($C," \u2014 "),M$=n($C,"A",{href:!0});var i4e=s(M$);DDe=r(i4e,"BigBirdConfig"),i4e.forEach(t),GDe=r($C," (BigBird model)"),$C.forEach(t),ODe=i(L),wf=n(L,"LI",{});var kC=s(wf);iee=n(kC,"STRONG",{});var d4e=s(iee);VDe=r(d4e,"bigbird_pegasus"),d4e.forEach(t),XDe=r(kC," \u2014 "),E$=n(kC,"A",{href:!0});var c4e=s(E$);zDe=r(c4e,"BigBirdPegasusConfig"),c4e.forEach(t),QDe=r(kC," (BigBirdPegasus model)"),kC.forEach(t),WDe=i(L),Af=n(L,"LI",{});var SC=s(Af);dee=n(SC,"STRONG",{});var f4e=s(dee);HDe=r(f4e,"blenderbot"),f4e.forEach(t),UDe=r(SC," \u2014 "),C$=n(SC,"A",{href:!0});var m4e=s(C$);JDe=r(m4e,"BlenderbotConfig"),m4e.forEach(t),YDe=r(SC," (Blenderbot model)"),SC.forEach(t),KDe=i(L),yf=n(L,"LI",{});var RC=s(yf);cee=n(RC,"STRONG",{});var g4e=s(cee);ZDe=r(g4e,"blenderbot-small"),g4e.forEach(t),eGe=r(RC," \u2014 "),w$=n(RC,"A",{href:!0});var h4e=s(w$);oGe=r(h4e,"BlenderbotSmallConfig"),h4e.forEach(t),rGe=r(RC," (BlenderbotSmall model)"),RC.forEach(t),tGe=i(L),Lf=n(L,"LI",{});var BC=s(Lf);fee=n(BC,"STRONG",{});var p4e=s(fee);aGe=r(p4e,"camembert"),p4e.forEach(t),nGe=r(BC," \u2014 "),A$=n(BC,"A",{href:!0});var u4e=s(A$);sGe=r(u4e,"CamembertConfig"),u4e.forEach(t),lGe=r(BC," (CamemBERT model)"),BC.forEach(t),iGe=i(L),xf=n(L,"LI",{});var PC=s(xf);mee=n(PC,"STRONG",{});var _4e=s(mee);dGe=r(_4e,"canine"),_4e.forEach(t),cGe=r(PC," \u2014 "),y$=n(PC,"A",{href:!0});var b4e=s(y$);fGe=r(b4e,"CanineConfig"),b4e.forEach(t),mGe=r(PC," (Canine model)"),PC.forEach(t),gGe=i(L),$f=n(L,"LI",{});var IC=s($f);gee=n(IC,"STRONG",{});var v4e=s(gee);hGe=r(v4e,"clip"),v4e.forEach(t),pGe=r(IC," \u2014 "),L$=n(IC,"A",{href:!0});var F4e=s(L$);uGe=r(F4e,"CLIPConfig"),F4e.forEach(t),_Ge=r(IC," (CLIP model)"),IC.forEach(t),bGe=i(L),kf=n(L,"LI",{});var qC=s(kf);hee=n(qC,"STRONG",{});var T4e=s(hee);vGe=r(T4e,"convbert"),T4e.forEach(t),FGe=r(qC," \u2014 "),x$=n(qC,"A",{href:!0});var M4e=s(x$);TGe=r(M4e,"ConvBertConfig"),M4e.forEach(t),MGe=r(qC," (ConvBERT model)"),qC.forEach(t),EGe=i(L),Sf=n(L,"LI",{});var NC=s(Sf);pee=n(NC,"STRONG",{});var E4e=s(pee);CGe=r(E4e,"convnext"),E4e.forEach(t),wGe=r(NC," \u2014 "),$$=n(NC,"A",{href:!0});var C4e=s($$);AGe=r(C4e,"ConvNextConfig"),C4e.forEach(t),yGe=r(NC," (ConvNext model)"),NC.forEach(t),LGe=i(L),Rf=n(L,"LI",{});var jC=s(Rf);uee=n(jC,"STRONG",{});var w4e=s(uee);xGe=r(w4e,"ctrl"),w4e.forEach(t),$Ge=r(jC," \u2014 "),k$=n(jC,"A",{href:!0});var A4e=s(k$);kGe=r(A4e,"CTRLConfig"),A4e.forEach(t),SGe=r(jC," (CTRL model)"),jC.forEach(t),RGe=i(L),Bf=n(L,"LI",{});var DC=s(Bf);_ee=n(DC,"STRONG",{});var y4e=s(_ee);BGe=r(y4e,"data2vec-audio"),y4e.forEach(t),PGe=r(DC," \u2014 "),S$=n(DC,"A",{href:!0});var L4e=s(S$);IGe=r(L4e,"Data2VecAudioConfig"),L4e.forEach(t),qGe=r(DC," (Data2VecAudio model)"),DC.forEach(t),NGe=i(L),Pf=n(L,"LI",{});var GC=s(Pf);bee=n(GC,"STRONG",{});var x4e=s(bee);jGe=r(x4e,"data2vec-text"),x4e.forEach(t),DGe=r(GC," \u2014 "),R$=n(GC,"A",{href:!0});var $4e=s(R$);GGe=r($4e,"Data2VecTextConfig"),$4e.forEach(t),OGe=r(GC," (Data2VecText model)"),GC.forEach(t),VGe=i(L),If=n(L,"LI",{});var OC=s(If);vee=n(OC,"STRONG",{});var k4e=s(vee);XGe=r(k4e,"data2vec-vision"),k4e.forEach(t),zGe=r(OC," \u2014 "),B$=n(OC,"A",{href:!0});var S4e=s(B$);QGe=r(S4e,"Data2VecVisionConfig"),S4e.forEach(t),WGe=r(OC," (Data2VecVision model)"),OC.forEach(t),HGe=i(L),qf=n(L,"LI",{});var VC=s(qf);Fee=n(VC,"STRONG",{});var R4e=s(Fee);UGe=r(R4e,"deberta"),R4e.forEach(t),JGe=r(VC," \u2014 "),P$=n(VC,"A",{href:!0});var B4e=s(P$);YGe=r(B4e,"DebertaConfig"),B4e.forEach(t),KGe=r(VC," (DeBERTa model)"),VC.forEach(t),ZGe=i(L),Nf=n(L,"LI",{});var XC=s(Nf);Tee=n(XC,"STRONG",{});var P4e=s(Tee);eOe=r(P4e,"deberta-v2"),P4e.forEach(t),oOe=r(XC," \u2014 "),I$=n(XC,"A",{href:!0});var I4e=s(I$);rOe=r(I4e,"DebertaV2Config"),I4e.forEach(t),tOe=r(XC," (DeBERTa-v2 model)"),XC.forEach(t),aOe=i(L),jf=n(L,"LI",{});var zC=s(jf);Mee=n(zC,"STRONG",{});var q4e=s(Mee);nOe=r(q4e,"decision_transformer"),q4e.forEach(t),sOe=r(zC," \u2014 "),q$=n(zC,"A",{href:!0});var N4e=s(q$);lOe=r(N4e,"DecisionTransformerConfig"),N4e.forEach(t),iOe=r(zC," (Decision Transformer model)"),zC.forEach(t),dOe=i(L),Df=n(L,"LI",{});var QC=s(Df);Eee=n(QC,"STRONG",{});var j4e=s(Eee);cOe=r(j4e,"deit"),j4e.forEach(t),fOe=r(QC," \u2014 "),N$=n(QC,"A",{href:!0});var D4e=s(N$);mOe=r(D4e,"DeiTConfig"),D4e.forEach(t),gOe=r(QC," (DeiT model)"),QC.forEach(t),hOe=i(L),Gf=n(L,"LI",{});var WC=s(Gf);Cee=n(WC,"STRONG",{});var G4e=s(Cee);pOe=r(G4e,"detr"),G4e.forEach(t),uOe=r(WC," \u2014 "),j$=n(WC,"A",{href:!0});var oNr=s(j$);_Oe=r(oNr,"DetrConfig"),oNr.forEach(t),bOe=r(WC," (DETR model)"),WC.forEach(t),vOe=i(L),Of=n(L,"LI",{});var O4e=s(Of);wee=n(O4e,"STRONG",{});var rNr=s(wee);FOe=r(rNr,"distilbert"),rNr.forEach(t),TOe=r(O4e," \u2014 "),D$=n(O4e,"A",{href:!0});var tNr=s(D$);MOe=r(tNr,"DistilBertConfig"),tNr.forEach(t),EOe=r(O4e," (DistilBERT model)"),O4e.forEach(t),COe=i(L),Vf=n(L,"LI",{});var V4e=s(Vf);Aee=n(V4e,"STRONG",{});var aNr=s(Aee);wOe=r(aNr,"dpr"),aNr.forEach(t),AOe=r(V4e," \u2014 "),G$=n(V4e,"A",{href:!0});var nNr=s(G$);yOe=r(nNr,"DPRConfig"),nNr.forEach(t),LOe=r(V4e," (DPR model)"),V4e.forEach(t),xOe=i(L),Xf=n(L,"LI",{});var X4e=s(Xf);yee=n(X4e,"STRONG",{});var sNr=s(yee);$Oe=r(sNr,"dpt"),sNr.forEach(t),kOe=r(X4e," \u2014 "),O$=n(X4e,"A",{href:!0});var lNr=s(O$);SOe=r(lNr,"DPTConfig"),lNr.forEach(t),ROe=r(X4e," (DPT model)"),X4e.forEach(t),BOe=i(L),zf=n(L,"LI",{});var z4e=s(zf);Lee=n(z4e,"STRONG",{});var iNr=s(Lee);POe=r(iNr,"electra"),iNr.forEach(t),IOe=r(z4e," \u2014 "),V$=n(z4e,"A",{href:!0});var dNr=s(V$);qOe=r(dNr,"ElectraConfig"),dNr.forEach(t),NOe=r(z4e," (ELECTRA model)"),z4e.forEach(t),jOe=i(L),Qf=n(L,"LI",{});var Q4e=s(Qf);xee=n(Q4e,"STRONG",{});var cNr=s(xee);DOe=r(cNr,"encoder-decoder"),cNr.forEach(t),GOe=r(Q4e," \u2014 "),X$=n(Q4e,"A",{href:!0});var fNr=s(X$);OOe=r(fNr,"EncoderDecoderConfig"),fNr.forEach(t),VOe=r(Q4e," (Encoder decoder model)"),Q4e.forEach(t),XOe=i(L),Wf=n(L,"LI",{});var W4e=s(Wf);$ee=n(W4e,"STRONG",{});var mNr=s($ee);zOe=r(mNr,"flaubert"),mNr.forEach(t),QOe=r(W4e," \u2014 "),z$=n(W4e,"A",{href:!0});var gNr=s(z$);WOe=r(gNr,"FlaubertConfig"),gNr.forEach(t),HOe=r(W4e," (FlauBERT model)"),W4e.forEach(t),UOe=i(L),Hf=n(L,"LI",{});var H4e=s(Hf);kee=n(H4e,"STRONG",{});var hNr=s(kee);JOe=r(hNr,"flava"),hNr.forEach(t),YOe=r(H4e," \u2014 "),Q$=n(H4e,"A",{href:!0});var pNr=s(Q$);KOe=r(pNr,"FlavaConfig"),pNr.forEach(t),ZOe=r(H4e," (Flava model)"),H4e.forEach(t),eVe=i(L),Uf=n(L,"LI",{});var U4e=s(Uf);See=n(U4e,"STRONG",{});var uNr=s(See);oVe=r(uNr,"fnet"),uNr.forEach(t),rVe=r(U4e," \u2014 "),W$=n(U4e,"A",{href:!0});var _Nr=s(W$);tVe=r(_Nr,"FNetConfig"),_Nr.forEach(t),aVe=r(U4e," (FNet model)"),U4e.forEach(t),nVe=i(L),Jf=n(L,"LI",{});var J4e=s(Jf);Ree=n(J4e,"STRONG",{});var bNr=s(Ree);sVe=r(bNr,"fsmt"),bNr.forEach(t),lVe=r(J4e," \u2014 "),H$=n(J4e,"A",{href:!0});var vNr=s(H$);iVe=r(vNr,"FSMTConfig"),vNr.forEach(t),dVe=r(J4e," (FairSeq Machine-Translation model)"),J4e.forEach(t),cVe=i(L),Yf=n(L,"LI",{});var Y4e=s(Yf);Bee=n(Y4e,"STRONG",{});var FNr=s(Bee);fVe=r(FNr,"funnel"),FNr.forEach(t),mVe=r(Y4e," \u2014 "),U$=n(Y4e,"A",{href:!0});var TNr=s(U$);gVe=r(TNr,"FunnelConfig"),TNr.forEach(t),hVe=r(Y4e," (Funnel Transformer model)"),Y4e.forEach(t),pVe=i(L),Kf=n(L,"LI",{});var K4e=s(Kf);Pee=n(K4e,"STRONG",{});var MNr=s(Pee);uVe=r(MNr,"glpn"),MNr.forEach(t),_Ve=r(K4e," \u2014 "),J$=n(K4e,"A",{href:!0});var ENr=s(J$);bVe=r(ENr,"GLPNConfig"),ENr.forEach(t),vVe=r(K4e," (GLPN model)"),K4e.forEach(t),FVe=i(L),Zf=n(L,"LI",{});var Z4e=s(Zf);Iee=n(Z4e,"STRONG",{});var CNr=s(Iee);TVe=r(CNr,"gpt2"),CNr.forEach(t),MVe=r(Z4e," \u2014 "),Y$=n(Z4e,"A",{href:!0});var wNr=s(Y$);EVe=r(wNr,"GPT2Config"),wNr.forEach(t),CVe=r(Z4e," (OpenAI GPT-2 model)"),Z4e.forEach(t),wVe=i(L),em=n(L,"LI",{});var eEe=s(em);qee=n(eEe,"STRONG",{});var ANr=s(qee);AVe=r(ANr,"gpt_neo"),ANr.forEach(t),yVe=r(eEe," \u2014 "),K$=n(eEe,"A",{href:!0});var yNr=s(K$);LVe=r(yNr,"GPTNeoConfig"),yNr.forEach(t),xVe=r(eEe," (GPT Neo model)"),eEe.forEach(t),$Ve=i(L),om=n(L,"LI",{});var oEe=s(om);Nee=n(oEe,"STRONG",{});var LNr=s(Nee);kVe=r(LNr,"gptj"),LNr.forEach(t),SVe=r(oEe," \u2014 "),Z$=n(oEe,"A",{href:!0});var xNr=s(Z$);RVe=r(xNr,"GPTJConfig"),xNr.forEach(t),BVe=r(oEe," (GPT-J model)"),oEe.forEach(t),PVe=i(L),rm=n(L,"LI",{});var rEe=s(rm);jee=n(rEe,"STRONG",{});var $Nr=s(jee);IVe=r($Nr,"hubert"),$Nr.forEach(t),qVe=r(rEe," \u2014 "),ek=n(rEe,"A",{href:!0});var kNr=s(ek);NVe=r(kNr,"HubertConfig"),kNr.forEach(t),jVe=r(rEe," (Hubert model)"),rEe.forEach(t),DVe=i(L),tm=n(L,"LI",{});var tEe=s(tm);Dee=n(tEe,"STRONG",{});var SNr=s(Dee);GVe=r(SNr,"ibert"),SNr.forEach(t),OVe=r(tEe," \u2014 "),ok=n(tEe,"A",{href:!0});var RNr=s(ok);VVe=r(RNr,"IBertConfig"),RNr.forEach(t),XVe=r(tEe," (I-BERT model)"),tEe.forEach(t),zVe=i(L),am=n(L,"LI",{});var aEe=s(am);Gee=n(aEe,"STRONG",{});var BNr=s(Gee);QVe=r(BNr,"imagegpt"),BNr.forEach(t),WVe=r(aEe," \u2014 "),rk=n(aEe,"A",{href:!0});var PNr=s(rk);HVe=r(PNr,"ImageGPTConfig"),PNr.forEach(t),UVe=r(aEe," (ImageGPT model)"),aEe.forEach(t),JVe=i(L),nm=n(L,"LI",{});var nEe=s(nm);Oee=n(nEe,"STRONG",{});var INr=s(Oee);YVe=r(INr,"layoutlm"),INr.forEach(t),KVe=r(nEe," \u2014 "),tk=n(nEe,"A",{href:!0});var qNr=s(tk);ZVe=r(qNr,"LayoutLMConfig"),qNr.forEach(t),eXe=r(nEe," (LayoutLM model)"),nEe.forEach(t),oXe=i(L),sm=n(L,"LI",{});var sEe=s(sm);Vee=n(sEe,"STRONG",{});var NNr=s(Vee);rXe=r(NNr,"layoutlmv2"),NNr.forEach(t),tXe=r(sEe," \u2014 "),ak=n(sEe,"A",{href:!0});var jNr=s(ak);aXe=r(jNr,"LayoutLMv2Config"),jNr.forEach(t),nXe=r(sEe," (LayoutLMv2 model)"),sEe.forEach(t),sXe=i(L),lm=n(L,"LI",{});var lEe=s(lm);Xee=n(lEe,"STRONG",{});var DNr=s(Xee);lXe=r(DNr,"led"),DNr.forEach(t),iXe=r(lEe," \u2014 "),nk=n(lEe,"A",{href:!0});var GNr=s(nk);dXe=r(GNr,"LEDConfig"),GNr.forEach(t),cXe=r(lEe," (LED model)"),lEe.forEach(t),fXe=i(L),im=n(L,"LI",{});var iEe=s(im);zee=n(iEe,"STRONG",{});var ONr=s(zee);mXe=r(ONr,"longformer"),ONr.forEach(t),gXe=r(iEe," \u2014 "),sk=n(iEe,"A",{href:!0});var VNr=s(sk);hXe=r(VNr,"LongformerConfig"),VNr.forEach(t),pXe=r(iEe," (Longformer model)"),iEe.forEach(t),uXe=i(L),dm=n(L,"LI",{});var dEe=s(dm);Qee=n(dEe,"STRONG",{});var XNr=s(Qee);_Xe=r(XNr,"luke"),XNr.forEach(t),bXe=r(dEe," \u2014 "),lk=n(dEe,"A",{href:!0});var zNr=s(lk);vXe=r(zNr,"LukeConfig"),zNr.forEach(t),FXe=r(dEe," (LUKE model)"),dEe.forEach(t),TXe=i(L),cm=n(L,"LI",{});var cEe=s(cm);Wee=n(cEe,"STRONG",{});var QNr=s(Wee);MXe=r(QNr,"lxmert"),QNr.forEach(t),EXe=r(cEe," \u2014 "),ik=n(cEe,"A",{href:!0});var WNr=s(ik);CXe=r(WNr,"LxmertConfig"),WNr.forEach(t),wXe=r(cEe," (LXMERT model)"),cEe.forEach(t),AXe=i(L),fm=n(L,"LI",{});var fEe=s(fm);Hee=n(fEe,"STRONG",{});var HNr=s(Hee);yXe=r(HNr,"m2m_100"),HNr.forEach(t),LXe=r(fEe," \u2014 "),dk=n(fEe,"A",{href:!0});var UNr=s(dk);xXe=r(UNr,"M2M100Config"),UNr.forEach(t),$Xe=r(fEe," (M2M100 model)"),fEe.forEach(t),kXe=i(L),mm=n(L,"LI",{});var mEe=s(mm);Uee=n(mEe,"STRONG",{});var JNr=s(Uee);SXe=r(JNr,"marian"),JNr.forEach(t),RXe=r(mEe," \u2014 "),ck=n(mEe,"A",{href:!0});var YNr=s(ck);BXe=r(YNr,"MarianConfig"),YNr.forEach(t),PXe=r(mEe," (Marian model)"),mEe.forEach(t),IXe=i(L),gm=n(L,"LI",{});var gEe=s(gm);Jee=n(gEe,"STRONG",{});var KNr=s(Jee);qXe=r(KNr,"maskformer"),KNr.forEach(t),NXe=r(gEe," \u2014 "),fk=n(gEe,"A",{href:!0});var ZNr=s(fk);jXe=r(ZNr,"MaskFormerConfig"),ZNr.forEach(t),DXe=r(gEe," (MaskFormer model)"),gEe.forEach(t),GXe=i(L),hm=n(L,"LI",{});var hEe=s(hm);Yee=n(hEe,"STRONG",{});var ejr=s(Yee);OXe=r(ejr,"mbart"),ejr.forEach(t),VXe=r(hEe," \u2014 "),mk=n(hEe,"A",{href:!0});var ojr=s(mk);XXe=r(ojr,"MBartConfig"),ojr.forEach(t),zXe=r(hEe," (mBART model)"),hEe.forEach(t),QXe=i(L),pm=n(L,"LI",{});var pEe=s(pm);Kee=n(pEe,"STRONG",{});var rjr=s(Kee);WXe=r(rjr,"megatron-bert"),rjr.forEach(t),HXe=r(pEe," \u2014 "),gk=n(pEe,"A",{href:!0});var tjr=s(gk);UXe=r(tjr,"MegatronBertConfig"),tjr.forEach(t),JXe=r(pEe," (MegatronBert model)"),pEe.forEach(t),YXe=i(L),um=n(L,"LI",{});var uEe=s(um);Zee=n(uEe,"STRONG",{});var ajr=s(Zee);KXe=r(ajr,"mobilebert"),ajr.forEach(t),ZXe=r(uEe," \u2014 "),hk=n(uEe,"A",{href:!0});var njr=s(hk);eze=r(njr,"MobileBertConfig"),njr.forEach(t),oze=r(uEe," (MobileBERT model)"),uEe.forEach(t),rze=i(L),_m=n(L,"LI",{});var _Ee=s(_m);eoe=n(_Ee,"STRONG",{});var sjr=s(eoe);tze=r(sjr,"mpnet"),sjr.forEach(t),aze=r(_Ee," \u2014 "),pk=n(_Ee,"A",{href:!0});var ljr=s(pk);nze=r(ljr,"MPNetConfig"),ljr.forEach(t),sze=r(_Ee," (MPNet model)"),_Ee.forEach(t),lze=i(L),bm=n(L,"LI",{});var bEe=s(bm);ooe=n(bEe,"STRONG",{});var ijr=s(ooe);ize=r(ijr,"mt5"),ijr.forEach(t),dze=r(bEe," \u2014 "),uk=n(bEe,"A",{href:!0});var djr=s(uk);cze=r(djr,"MT5Config"),djr.forEach(t),fze=r(bEe," (mT5 model)"),bEe.forEach(t),mze=i(L),vm=n(L,"LI",{});var vEe=s(vm);roe=n(vEe,"STRONG",{});var cjr=s(roe);gze=r(cjr,"nystromformer"),cjr.forEach(t),hze=r(vEe," \u2014 "),_k=n(vEe,"A",{href:!0});var fjr=s(_k);pze=r(fjr,"NystromformerConfig"),fjr.forEach(t),uze=r(vEe," (Nystromformer model)"),vEe.forEach(t),_ze=i(L),Fm=n(L,"LI",{});var FEe=s(Fm);toe=n(FEe,"STRONG",{});var mjr=s(toe);bze=r(mjr,"openai-gpt"),mjr.forEach(t),vze=r(FEe," \u2014 "),bk=n(FEe,"A",{href:!0});var gjr=s(bk);Fze=r(gjr,"OpenAIGPTConfig"),gjr.forEach(t),Tze=r(FEe," (OpenAI GPT model)"),FEe.forEach(t),Mze=i(L),Tm=n(L,"LI",{});var TEe=s(Tm);aoe=n(TEe,"STRONG",{});var hjr=s(aoe);Eze=r(hjr,"pegasus"),hjr.forEach(t),Cze=r(TEe," \u2014 "),vk=n(TEe,"A",{href:!0});var pjr=s(vk);wze=r(pjr,"PegasusConfig"),pjr.forEach(t),Aze=r(TEe," (Pegasus model)"),TEe.forEach(t),yze=i(L),Mm=n(L,"LI",{});var MEe=s(Mm);noe=n(MEe,"STRONG",{});var ujr=s(noe);Lze=r(ujr,"perceiver"),ujr.forEach(t),xze=r(MEe," \u2014 "),Fk=n(MEe,"A",{href:!0});var _jr=s(Fk);$ze=r(_jr,"PerceiverConfig"),_jr.forEach(t),kze=r(MEe," (Perceiver model)"),MEe.forEach(t),Sze=i(L),Em=n(L,"LI",{});var EEe=s(Em);soe=n(EEe,"STRONG",{});var bjr=s(soe);Rze=r(bjr,"plbart"),bjr.forEach(t),Bze=r(EEe," \u2014 "),Tk=n(EEe,"A",{href:!0});var vjr=s(Tk);Pze=r(vjr,"PLBartConfig"),vjr.forEach(t),Ize=r(EEe," (PLBart model)"),EEe.forEach(t),qze=i(L),Cm=n(L,"LI",{});var CEe=s(Cm);loe=n(CEe,"STRONG",{});var Fjr=s(loe);Nze=r(Fjr,"poolformer"),Fjr.forEach(t),jze=r(CEe," \u2014 "),Mk=n(CEe,"A",{href:!0});var Tjr=s(Mk);Dze=r(Tjr,"PoolFormerConfig"),Tjr.forEach(t),Gze=r(CEe," (PoolFormer model)"),CEe.forEach(t),Oze=i(L),wm=n(L,"LI",{});var wEe=s(wm);ioe=n(wEe,"STRONG",{});var Mjr=s(ioe);Vze=r(Mjr,"prophetnet"),Mjr.forEach(t),Xze=r(wEe," \u2014 "),Ek=n(wEe,"A",{href:!0});var Ejr=s(Ek);zze=r(Ejr,"ProphetNetConfig"),Ejr.forEach(t),Qze=r(wEe," (ProphetNet model)"),wEe.forEach(t),Wze=i(L),Am=n(L,"LI",{});var AEe=s(Am);doe=n(AEe,"STRONG",{});var Cjr=s(doe);Hze=r(Cjr,"qdqbert"),Cjr.forEach(t),Uze=r(AEe," \u2014 "),Ck=n(AEe,"A",{href:!0});var wjr=s(Ck);Jze=r(wjr,"QDQBertConfig"),wjr.forEach(t),Yze=r(AEe," (QDQBert model)"),AEe.forEach(t),Kze=i(L),ym=n(L,"LI",{});var yEe=s(ym);coe=n(yEe,"STRONG",{});var Ajr=s(coe);Zze=r(Ajr,"rag"),Ajr.forEach(t),eQe=r(yEe," \u2014 "),wk=n(yEe,"A",{href:!0});var yjr=s(wk);oQe=r(yjr,"RagConfig"),yjr.forEach(t),rQe=r(yEe," (RAG model)"),yEe.forEach(t),tQe=i(L),Lm=n(L,"LI",{});var LEe=s(Lm);foe=n(LEe,"STRONG",{});var Ljr=s(foe);aQe=r(Ljr,"realm"),Ljr.forEach(t),nQe=r(LEe," \u2014 "),Ak=n(LEe,"A",{href:!0});var xjr=s(Ak);sQe=r(xjr,"RealmConfig"),xjr.forEach(t),lQe=r(LEe," (Realm model)"),LEe.forEach(t),iQe=i(L),xm=n(L,"LI",{});var xEe=s(xm);moe=n(xEe,"STRONG",{});var $jr=s(moe);dQe=r($jr,"reformer"),$jr.forEach(t),cQe=r(xEe," \u2014 "),yk=n(xEe,"A",{href:!0});var kjr=s(yk);fQe=r(kjr,"ReformerConfig"),kjr.forEach(t),mQe=r(xEe," (Reformer model)"),xEe.forEach(t),gQe=i(L),$m=n(L,"LI",{});var $Ee=s($m);goe=n($Ee,"STRONG",{});var Sjr=s(goe);hQe=r(Sjr,"regnet"),Sjr.forEach(t),pQe=r($Ee," \u2014 "),Lk=n($Ee,"A",{href:!0});var Rjr=s(Lk);uQe=r(Rjr,"RegNetConfig"),Rjr.forEach(t),_Qe=r($Ee," (RegNet model)"),$Ee.forEach(t),bQe=i(L),km=n(L,"LI",{});var kEe=s(km);hoe=n(kEe,"STRONG",{});var Bjr=s(hoe);vQe=r(Bjr,"rembert"),Bjr.forEach(t),FQe=r(kEe," \u2014 "),xk=n(kEe,"A",{href:!0});var Pjr=s(xk);TQe=r(Pjr,"RemBertConfig"),Pjr.forEach(t),MQe=r(kEe," (RemBERT model)"),kEe.forEach(t),EQe=i(L),Sm=n(L,"LI",{});var SEe=s(Sm);poe=n(SEe,"STRONG",{});var Ijr=s(poe);CQe=r(Ijr,"resnet"),Ijr.forEach(t),wQe=r(SEe," \u2014 "),$k=n(SEe,"A",{href:!0});var qjr=s($k);AQe=r(qjr,"ResNetConfig"),qjr.forEach(t),yQe=r(SEe," (ResNet model)"),SEe.forEach(t),LQe=i(L),Rm=n(L,"LI",{});var REe=s(Rm);uoe=n(REe,"STRONG",{});var Njr=s(uoe);xQe=r(Njr,"retribert"),Njr.forEach(t),$Qe=r(REe," \u2014 "),kk=n(REe,"A",{href:!0});var jjr=s(kk);kQe=r(jjr,"RetriBertConfig"),jjr.forEach(t),SQe=r(REe," (RetriBERT model)"),REe.forEach(t),RQe=i(L),Bm=n(L,"LI",{});var BEe=s(Bm);_oe=n(BEe,"STRONG",{});var Djr=s(_oe);BQe=r(Djr,"roberta"),Djr.forEach(t),PQe=r(BEe," \u2014 "),Sk=n(BEe,"A",{href:!0});var Gjr=s(Sk);IQe=r(Gjr,"RobertaConfig"),Gjr.forEach(t),qQe=r(BEe," (RoBERTa model)"),BEe.forEach(t),NQe=i(L),Pm=n(L,"LI",{});var PEe=s(Pm);boe=n(PEe,"STRONG",{});var Ojr=s(boe);jQe=r(Ojr,"roformer"),Ojr.forEach(t),DQe=r(PEe," \u2014 "),Rk=n(PEe,"A",{href:!0});var Vjr=s(Rk);GQe=r(Vjr,"RoFormerConfig"),Vjr.forEach(t),OQe=r(PEe," (RoFormer model)"),PEe.forEach(t),VQe=i(L),Im=n(L,"LI",{});var IEe=s(Im);voe=n(IEe,"STRONG",{});var Xjr=s(voe);XQe=r(Xjr,"segformer"),Xjr.forEach(t),zQe=r(IEe," \u2014 "),Bk=n(IEe,"A",{href:!0});var zjr=s(Bk);QQe=r(zjr,"SegformerConfig"),zjr.forEach(t),WQe=r(IEe," (SegFormer model)"),IEe.forEach(t),HQe=i(L),qm=n(L,"LI",{});var qEe=s(qm);Foe=n(qEe,"STRONG",{});var Qjr=s(Foe);UQe=r(Qjr,"sew"),Qjr.forEach(t),JQe=r(qEe," \u2014 "),Pk=n(qEe,"A",{href:!0});var Wjr=s(Pk);YQe=r(Wjr,"SEWConfig"),Wjr.forEach(t),KQe=r(qEe," (SEW model)"),qEe.forEach(t),ZQe=i(L),Nm=n(L,"LI",{});var NEe=s(Nm);Toe=n(NEe,"STRONG",{});var Hjr=s(Toe);eWe=r(Hjr,"sew-d"),Hjr.forEach(t),oWe=r(NEe," \u2014 "),Ik=n(NEe,"A",{href:!0});var Ujr=s(Ik);rWe=r(Ujr,"SEWDConfig"),Ujr.forEach(t),tWe=r(NEe," (SEW-D model)"),NEe.forEach(t),aWe=i(L),jm=n(L,"LI",{});var jEe=s(jm);Moe=n(jEe,"STRONG",{});var Jjr=s(Moe);nWe=r(Jjr,"speech-encoder-decoder"),Jjr.forEach(t),sWe=r(jEe," \u2014 "),qk=n(jEe,"A",{href:!0});var Yjr=s(qk);lWe=r(Yjr,"SpeechEncoderDecoderConfig"),Yjr.forEach(t),iWe=r(jEe," (Speech Encoder decoder model)"),jEe.forEach(t),dWe=i(L),Dm=n(L,"LI",{});var DEe=s(Dm);Eoe=n(DEe,"STRONG",{});var Kjr=s(Eoe);cWe=r(Kjr,"speech_to_text"),Kjr.forEach(t),fWe=r(DEe," \u2014 "),Nk=n(DEe,"A",{href:!0});var Zjr=s(Nk);mWe=r(Zjr,"Speech2TextConfig"),Zjr.forEach(t),gWe=r(DEe," (Speech2Text model)"),DEe.forEach(t),hWe=i(L),Gm=n(L,"LI",{});var GEe=s(Gm);Coe=n(GEe,"STRONG",{});var eDr=s(Coe);pWe=r(eDr,"speech_to_text_2"),eDr.forEach(t),uWe=r(GEe," \u2014 "),jk=n(GEe,"A",{href:!0});var oDr=s(jk);_We=r(oDr,"Speech2Text2Config"),oDr.forEach(t),bWe=r(GEe," (Speech2Text2 model)"),GEe.forEach(t),vWe=i(L),Om=n(L,"LI",{});var OEe=s(Om);woe=n(OEe,"STRONG",{});var rDr=s(woe);FWe=r(rDr,"splinter"),rDr.forEach(t),TWe=r(OEe," \u2014 "),Dk=n(OEe,"A",{href:!0});var tDr=s(Dk);MWe=r(tDr,"SplinterConfig"),tDr.forEach(t),EWe=r(OEe," (Splinter model)"),OEe.forEach(t),CWe=i(L),Vm=n(L,"LI",{});var VEe=s(Vm);Aoe=n(VEe,"STRONG",{});var aDr=s(Aoe);wWe=r(aDr,"squeezebert"),aDr.forEach(t),AWe=r(VEe," \u2014 "),Gk=n(VEe,"A",{href:!0});var nDr=s(Gk);yWe=r(nDr,"SqueezeBertConfig"),nDr.forEach(t),LWe=r(VEe," (SqueezeBERT model)"),VEe.forEach(t),xWe=i(L),Xm=n(L,"LI",{});var XEe=s(Xm);yoe=n(XEe,"STRONG",{});var sDr=s(yoe);$We=r(sDr,"swin"),sDr.forEach(t),kWe=r(XEe," \u2014 "),Ok=n(XEe,"A",{href:!0});var lDr=s(Ok);SWe=r(lDr,"SwinConfig"),lDr.forEach(t),RWe=r(XEe," (Swin model)"),XEe.forEach(t),BWe=i(L),zm=n(L,"LI",{});var zEe=s(zm);Loe=n(zEe,"STRONG",{});var iDr=s(Loe);PWe=r(iDr,"t5"),iDr.forEach(t),IWe=r(zEe," \u2014 "),Vk=n(zEe,"A",{href:!0});var dDr=s(Vk);qWe=r(dDr,"T5Config"),dDr.forEach(t),NWe=r(zEe," (T5 model)"),zEe.forEach(t),jWe=i(L),Qm=n(L,"LI",{});var QEe=s(Qm);xoe=n(QEe,"STRONG",{});var cDr=s(xoe);DWe=r(cDr,"tapas"),cDr.forEach(t),GWe=r(QEe," \u2014 "),Xk=n(QEe,"A",{href:!0});var fDr=s(Xk);OWe=r(fDr,"TapasConfig"),fDr.forEach(t),VWe=r(QEe," (TAPAS model)"),QEe.forEach(t),XWe=i(L),Wm=n(L,"LI",{});var WEe=s(Wm);$oe=n(WEe,"STRONG",{});var mDr=s($oe);zWe=r(mDr,"tapex"),mDr.forEach(t),QWe=r(WEe," \u2014 "),zk=n(WEe,"A",{href:!0});var gDr=s(zk);WWe=r(gDr,"BartConfig"),gDr.forEach(t),HWe=r(WEe," (TAPEX model)"),WEe.forEach(t),UWe=i(L),Hm=n(L,"LI",{});var HEe=s(Hm);koe=n(HEe,"STRONG",{});var hDr=s(koe);JWe=r(hDr,"transfo-xl"),hDr.forEach(t),YWe=r(HEe," \u2014 "),Qk=n(HEe,"A",{href:!0});var pDr=s(Qk);KWe=r(pDr,"TransfoXLConfig"),pDr.forEach(t),ZWe=r(HEe," (Transformer-XL model)"),HEe.forEach(t),eHe=i(L),Um=n(L,"LI",{});var UEe=s(Um);Soe=n(UEe,"STRONG",{});var uDr=s(Soe);oHe=r(uDr,"trocr"),uDr.forEach(t),rHe=r(UEe," \u2014 "),Wk=n(UEe,"A",{href:!0});var _Dr=s(Wk);tHe=r(_Dr,"TrOCRConfig"),_Dr.forEach(t),aHe=r(UEe," (TrOCR model)"),UEe.forEach(t),nHe=i(L),Jm=n(L,"LI",{});var JEe=s(Jm);Roe=n(JEe,"STRONG",{});var bDr=s(Roe);sHe=r(bDr,"unispeech"),bDr.forEach(t),lHe=r(JEe," \u2014 "),Hk=n(JEe,"A",{href:!0});var vDr=s(Hk);iHe=r(vDr,"UniSpeechConfig"),vDr.forEach(t),dHe=r(JEe," (UniSpeech model)"),JEe.forEach(t),cHe=i(L),Ym=n(L,"LI",{});var YEe=s(Ym);Boe=n(YEe,"STRONG",{});var FDr=s(Boe);fHe=r(FDr,"unispeech-sat"),FDr.forEach(t),mHe=r(YEe," \u2014 "),Uk=n(YEe,"A",{href:!0});var TDr=s(Uk);gHe=r(TDr,"UniSpeechSatConfig"),TDr.forEach(t),hHe=r(YEe," (UniSpeechSat model)"),YEe.forEach(t),pHe=i(L),Km=n(L,"LI",{});var KEe=s(Km);Poe=n(KEe,"STRONG",{});var MDr=s(Poe);uHe=r(MDr,"van"),MDr.forEach(t),_He=r(KEe," \u2014 "),Jk=n(KEe,"A",{href:!0});var EDr=s(Jk);bHe=r(EDr,"VanConfig"),EDr.forEach(t),vHe=r(KEe," (VAN model)"),KEe.forEach(t),FHe=i(L),Zm=n(L,"LI",{});var ZEe=s(Zm);Ioe=n(ZEe,"STRONG",{});var CDr=s(Ioe);THe=r(CDr,"vilt"),CDr.forEach(t),MHe=r(ZEe," \u2014 "),Yk=n(ZEe,"A",{href:!0});var wDr=s(Yk);EHe=r(wDr,"ViltConfig"),wDr.forEach(t),CHe=r(ZEe," (ViLT model)"),ZEe.forEach(t),wHe=i(L),eg=n(L,"LI",{});var e5e=s(eg);qoe=n(e5e,"STRONG",{});var ADr=s(qoe);AHe=r(ADr,"vision-encoder-decoder"),ADr.forEach(t),yHe=r(e5e," \u2014 "),Kk=n(e5e,"A",{href:!0});var yDr=s(Kk);LHe=r(yDr,"VisionEncoderDecoderConfig"),yDr.forEach(t),xHe=r(e5e," (Vision Encoder decoder model)"),e5e.forEach(t),$He=i(L),og=n(L,"LI",{});var o5e=s(og);Noe=n(o5e,"STRONG",{});var LDr=s(Noe);kHe=r(LDr,"vision-text-dual-encoder"),LDr.forEach(t),SHe=r(o5e," \u2014 "),Zk=n(o5e,"A",{href:!0});var xDr=s(Zk);RHe=r(xDr,"VisionTextDualEncoderConfig"),xDr.forEach(t),BHe=r(o5e," (VisionTextDualEncoder model)"),o5e.forEach(t),PHe=i(L),rg=n(L,"LI",{});var r5e=s(rg);joe=n(r5e,"STRONG",{});var $Dr=s(joe);IHe=r($Dr,"visual_bert"),$Dr.forEach(t),qHe=r(r5e," \u2014 "),eS=n(r5e,"A",{href:!0});var kDr=s(eS);NHe=r(kDr,"VisualBertConfig"),kDr.forEach(t),jHe=r(r5e," (VisualBert model)"),r5e.forEach(t),DHe=i(L),tg=n(L,"LI",{});var t5e=s(tg);Doe=n(t5e,"STRONG",{});var SDr=s(Doe);GHe=r(SDr,"vit"),SDr.forEach(t),OHe=r(t5e," \u2014 "),oS=n(t5e,"A",{href:!0});var RDr=s(oS);VHe=r(RDr,"ViTConfig"),RDr.forEach(t),XHe=r(t5e," (ViT model)"),t5e.forEach(t),zHe=i(L),ag=n(L,"LI",{});var a5e=s(ag);Goe=n(a5e,"STRONG",{});var BDr=s(Goe);QHe=r(BDr,"vit_mae"),BDr.forEach(t),WHe=r(a5e," \u2014 "),rS=n(a5e,"A",{href:!0});var PDr=s(rS);HHe=r(PDr,"ViTMAEConfig"),PDr.forEach(t),UHe=r(a5e," (ViTMAE model)"),a5e.forEach(t),JHe=i(L),ng=n(L,"LI",{});var n5e=s(ng);Ooe=n(n5e,"STRONG",{});var IDr=s(Ooe);YHe=r(IDr,"wav2vec2"),IDr.forEach(t),KHe=r(n5e," \u2014 "),tS=n(n5e,"A",{href:!0});var qDr=s(tS);ZHe=r(qDr,"Wav2Vec2Config"),qDr.forEach(t),eUe=r(n5e," (Wav2Vec2 model)"),n5e.forEach(t),oUe=i(L),sg=n(L,"LI",{});var s5e=s(sg);Voe=n(s5e,"STRONG",{});var NDr=s(Voe);rUe=r(NDr,"wavlm"),NDr.forEach(t),tUe=r(s5e," \u2014 "),aS=n(s5e,"A",{href:!0});var jDr=s(aS);aUe=r(jDr,"WavLMConfig"),jDr.forEach(t),nUe=r(s5e," (WavLM model)"),s5e.forEach(t),sUe=i(L),lg=n(L,"LI",{});var l5e=s(lg);Xoe=n(l5e,"STRONG",{});var DDr=s(Xoe);lUe=r(DDr,"xglm"),DDr.forEach(t),iUe=r(l5e," \u2014 "),nS=n(l5e,"A",{href:!0});var GDr=s(nS);dUe=r(GDr,"XGLMConfig"),GDr.forEach(t),cUe=r(l5e," (XGLM model)"),l5e.forEach(t),fUe=i(L),ig=n(L,"LI",{});var i5e=s(ig);zoe=n(i5e,"STRONG",{});var ODr=s(zoe);mUe=r(ODr,"xlm"),ODr.forEach(t),gUe=r(i5e," \u2014 "),sS=n(i5e,"A",{href:!0});var VDr=s(sS);hUe=r(VDr,"XLMConfig"),VDr.forEach(t),pUe=r(i5e," (XLM model)"),i5e.forEach(t),uUe=i(L),dg=n(L,"LI",{});var d5e=s(dg);Qoe=n(d5e,"STRONG",{});var XDr=s(Qoe);_Ue=r(XDr,"xlm-prophetnet"),XDr.forEach(t),bUe=r(d5e," \u2014 "),lS=n(d5e,"A",{href:!0});var zDr=s(lS);vUe=r(zDr,"XLMProphetNetConfig"),zDr.forEach(t),FUe=r(d5e," (XLMProphetNet model)"),d5e.forEach(t),TUe=i(L),cg=n(L,"LI",{});var c5e=s(cg);Woe=n(c5e,"STRONG",{});var QDr=s(Woe);MUe=r(QDr,"xlm-roberta"),QDr.forEach(t),EUe=r(c5e," \u2014 "),iS=n(c5e,"A",{href:!0});var WDr=s(iS);CUe=r(WDr,"XLMRobertaConfig"),WDr.forEach(t),wUe=r(c5e," (XLM-RoBERTa model)"),c5e.forEach(t),AUe=i(L),fg=n(L,"LI",{});var f5e=s(fg);Hoe=n(f5e,"STRONG",{});var HDr=s(Hoe);yUe=r(HDr,"xlm-roberta-xl"),HDr.forEach(t),LUe=r(f5e," \u2014 "),dS=n(f5e,"A",{href:!0});var UDr=s(dS);xUe=r(UDr,"XLMRobertaXLConfig"),UDr.forEach(t),$Ue=r(f5e," (XLM-RoBERTa-XL model)"),f5e.forEach(t),kUe=i(L),mg=n(L,"LI",{});var m5e=s(mg);Uoe=n(m5e,"STRONG",{});var JDr=s(Uoe);SUe=r(JDr,"xlnet"),JDr.forEach(t),RUe=r(m5e," \u2014 "),cS=n(m5e,"A",{href:!0});var YDr=s(cS);BUe=r(YDr,"XLNetConfig"),YDr.forEach(t),PUe=r(m5e," (XLNet model)"),m5e.forEach(t),IUe=i(L),gg=n(L,"LI",{});var g5e=s(gg);Joe=n(g5e,"STRONG",{});var KDr=s(Joe);qUe=r(KDr,"yolos"),KDr.forEach(t),NUe=r(g5e," \u2014 "),fS=n(g5e,"A",{href:!0});var ZDr=s(fS);jUe=r(ZDr,"YolosConfig"),ZDr.forEach(t),DUe=r(g5e," (YOLOS model)"),g5e.forEach(t),GUe=i(L),hg=n(L,"LI",{});var h5e=s(hg);Yoe=n(h5e,"STRONG",{});var eGr=s(Yoe);OUe=r(eGr,"yoso"),eGr.forEach(t),VUe=r(h5e," \u2014 "),mS=n(h5e,"A",{href:!0});var oGr=s(mS);XUe=r(oGr,"YosoConfig"),oGr.forEach(t),zUe=r(h5e," (YOSO model)"),h5e.forEach(t),L.forEach(t),QUe=i(Zr),T(pg.$$.fragment,Zr),Zr.forEach(t),WUe=i(Kr),ug=n(Kr,"DIV",{class:!0});var kqe=s(ug);T(eA.$$.fragment,kqe),HUe=i(kqe),Koe=n(kqe,"P",{});var rGr=s(Koe);UUe=r(rGr,"Register a new configuration for this class."),rGr.forEach(t),kqe.forEach(t),Kr.forEach(t),BPe=i(f),_i=n(f,"H2",{class:!0});var Sqe=s(_i);_g=n(Sqe,"A",{id:!0,class:!0,href:!0});var tGr=s(_g);Zoe=n(tGr,"SPAN",{});var aGr=s(Zoe);T(oA.$$.fragment,aGr),aGr.forEach(t),tGr.forEach(t),JUe=i(Sqe),ere=n(Sqe,"SPAN",{});var nGr=s(ere);YUe=r(nGr,"AutoTokenizer"),nGr.forEach(t),Sqe.forEach(t),PPe=i(f),wo=n(f,"DIV",{class:!0});var Ps=s(wo);T(rA.$$.fragment,Ps),KUe=i(Ps),tA=n(Ps,"P",{});var Rqe=s(tA);ZUe=r(Rqe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),gS=n(Rqe,"A",{href:!0});var sGr=s(gS);eJe=r(sGr,"AutoTokenizer.from_pretrained()"),sGr.forEach(t),oJe=r(Rqe," class method."),Rqe.forEach(t),rJe=i(Ps),aA=n(Ps,"P",{});var Bqe=s(aA);tJe=r(Bqe,"This class cannot be instantiated directly using "),ore=n(Bqe,"CODE",{});var lGr=s(ore);aJe=r(lGr,"__init__()"),lGr.forEach(t),nJe=r(Bqe," (throws an error)."),Bqe.forEach(t),sJe=i(Ps),Cr=n(Ps,"DIV",{class:!0});var Is=s(Cr);T(nA.$$.fragment,Is),lJe=i(Is),rre=n(Is,"P",{});var iGr=s(rre);iJe=r(iGr,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),iGr.forEach(t),dJe=i(Is),Ca=n(Is,"P",{});var HC=s(Ca);cJe=r(HC,"The tokenizer class to instantiate is selected based on the "),tre=n(HC,"CODE",{});var dGr=s(tre);fJe=r(dGr,"model_type"),dGr.forEach(t),mJe=r(HC,` property of the config object (either
passed as an argument or loaded from `),are=n(HC,"CODE",{});var cGr=s(are);gJe=r(cGr,"pretrained_model_name_or_path"),cGr.forEach(t),hJe=r(HC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nre=n(HC,"CODE",{});var fGr=s(nre);pJe=r(fGr,"pretrained_model_name_or_path"),fGr.forEach(t),uJe=r(HC,":"),HC.forEach(t),_Je=i(Is),k=n(Is,"UL",{});var S=s(k);kn=n(S,"LI",{});var s9=s(kn);sre=n(s9,"STRONG",{});var mGr=s(sre);bJe=r(mGr,"albert"),mGr.forEach(t),vJe=r(s9," \u2014 "),hS=n(s9,"A",{href:!0});var gGr=s(hS);FJe=r(gGr,"AlbertTokenizer"),gGr.forEach(t),TJe=r(s9," or "),pS=n(s9,"A",{href:!0});var hGr=s(pS);MJe=r(hGr,"AlbertTokenizerFast"),hGr.forEach(t),EJe=r(s9," (ALBERT model)"),s9.forEach(t),CJe=i(S),Sn=n(S,"LI",{});var l9=s(Sn);lre=n(l9,"STRONG",{});var pGr=s(lre);wJe=r(pGr,"bart"),pGr.forEach(t),AJe=r(l9," \u2014 "),uS=n(l9,"A",{href:!0});var uGr=s(uS);yJe=r(uGr,"BartTokenizer"),uGr.forEach(t),LJe=r(l9," or "),_S=n(l9,"A",{href:!0});var _Gr=s(_S);xJe=r(_Gr,"BartTokenizerFast"),_Gr.forEach(t),$Je=r(l9," (BART model)"),l9.forEach(t),kJe=i(S),Rn=n(S,"LI",{});var i9=s(Rn);ire=n(i9,"STRONG",{});var bGr=s(ire);SJe=r(bGr,"barthez"),bGr.forEach(t),RJe=r(i9," \u2014 "),bS=n(i9,"A",{href:!0});var vGr=s(bS);BJe=r(vGr,"BarthezTokenizer"),vGr.forEach(t),PJe=r(i9," or "),vS=n(i9,"A",{href:!0});var FGr=s(vS);IJe=r(FGr,"BarthezTokenizerFast"),FGr.forEach(t),qJe=r(i9," (BARThez model)"),i9.forEach(t),NJe=i(S),bg=n(S,"LI",{});var p5e=s(bg);dre=n(p5e,"STRONG",{});var TGr=s(dre);jJe=r(TGr,"bartpho"),TGr.forEach(t),DJe=r(p5e," \u2014 "),FS=n(p5e,"A",{href:!0});var MGr=s(FS);GJe=r(MGr,"BartphoTokenizer"),MGr.forEach(t),OJe=r(p5e," (BARTpho model)"),p5e.forEach(t),VJe=i(S),Bn=n(S,"LI",{});var d9=s(Bn);cre=n(d9,"STRONG",{});var EGr=s(cre);XJe=r(EGr,"bert"),EGr.forEach(t),zJe=r(d9," \u2014 "),TS=n(d9,"A",{href:!0});var CGr=s(TS);QJe=r(CGr,"BertTokenizer"),CGr.forEach(t),WJe=r(d9," or "),MS=n(d9,"A",{href:!0});var wGr=s(MS);HJe=r(wGr,"BertTokenizerFast"),wGr.forEach(t),UJe=r(d9," (BERT model)"),d9.forEach(t),JJe=i(S),vg=n(S,"LI",{});var u5e=s(vg);fre=n(u5e,"STRONG",{});var AGr=s(fre);YJe=r(AGr,"bert-generation"),AGr.forEach(t),KJe=r(u5e," \u2014 "),ES=n(u5e,"A",{href:!0});var yGr=s(ES);ZJe=r(yGr,"BertGenerationTokenizer"),yGr.forEach(t),eYe=r(u5e," (Bert Generation model)"),u5e.forEach(t),oYe=i(S),Fg=n(S,"LI",{});var _5e=s(Fg);mre=n(_5e,"STRONG",{});var LGr=s(mre);rYe=r(LGr,"bert-japanese"),LGr.forEach(t),tYe=r(_5e," \u2014 "),CS=n(_5e,"A",{href:!0});var xGr=s(CS);aYe=r(xGr,"BertJapaneseTokenizer"),xGr.forEach(t),nYe=r(_5e," (BertJapanese model)"),_5e.forEach(t),sYe=i(S),Tg=n(S,"LI",{});var b5e=s(Tg);gre=n(b5e,"STRONG",{});var $Gr=s(gre);lYe=r($Gr,"bertweet"),$Gr.forEach(t),iYe=r(b5e," \u2014 "),wS=n(b5e,"A",{href:!0});var kGr=s(wS);dYe=r(kGr,"BertweetTokenizer"),kGr.forEach(t),cYe=r(b5e," (Bertweet model)"),b5e.forEach(t),fYe=i(S),Pn=n(S,"LI",{});var c9=s(Pn);hre=n(c9,"STRONG",{});var SGr=s(hre);mYe=r(SGr,"big_bird"),SGr.forEach(t),gYe=r(c9," \u2014 "),AS=n(c9,"A",{href:!0});var RGr=s(AS);hYe=r(RGr,"BigBirdTokenizer"),RGr.forEach(t),pYe=r(c9," or "),yS=n(c9,"A",{href:!0});var BGr=s(yS);uYe=r(BGr,"BigBirdTokenizerFast"),BGr.forEach(t),_Ye=r(c9," (BigBird model)"),c9.forEach(t),bYe=i(S),In=n(S,"LI",{});var f9=s(In);pre=n(f9,"STRONG",{});var PGr=s(pre);vYe=r(PGr,"bigbird_pegasus"),PGr.forEach(t),FYe=r(f9," \u2014 "),LS=n(f9,"A",{href:!0});var IGr=s(LS);TYe=r(IGr,"PegasusTokenizer"),IGr.forEach(t),MYe=r(f9," or "),xS=n(f9,"A",{href:!0});var qGr=s(xS);EYe=r(qGr,"PegasusTokenizerFast"),qGr.forEach(t),CYe=r(f9," (BigBirdPegasus model)"),f9.forEach(t),wYe=i(S),qn=n(S,"LI",{});var m9=s(qn);ure=n(m9,"STRONG",{});var NGr=s(ure);AYe=r(NGr,"blenderbot"),NGr.forEach(t),yYe=r(m9," \u2014 "),$S=n(m9,"A",{href:!0});var jGr=s($S);LYe=r(jGr,"BlenderbotTokenizer"),jGr.forEach(t),xYe=r(m9," or "),kS=n(m9,"A",{href:!0});var DGr=s(kS);$Ye=r(DGr,"BlenderbotTokenizerFast"),DGr.forEach(t),kYe=r(m9," (Blenderbot model)"),m9.forEach(t),SYe=i(S),Mg=n(S,"LI",{});var v5e=s(Mg);_re=n(v5e,"STRONG",{});var GGr=s(_re);RYe=r(GGr,"blenderbot-small"),GGr.forEach(t),BYe=r(v5e," \u2014 "),SS=n(v5e,"A",{href:!0});var OGr=s(SS);PYe=r(OGr,"BlenderbotSmallTokenizer"),OGr.forEach(t),IYe=r(v5e," (BlenderbotSmall model)"),v5e.forEach(t),qYe=i(S),Eg=n(S,"LI",{});var F5e=s(Eg);bre=n(F5e,"STRONG",{});var VGr=s(bre);NYe=r(VGr,"byt5"),VGr.forEach(t),jYe=r(F5e," \u2014 "),RS=n(F5e,"A",{href:!0});var XGr=s(RS);DYe=r(XGr,"ByT5Tokenizer"),XGr.forEach(t),GYe=r(F5e," (ByT5 model)"),F5e.forEach(t),OYe=i(S),Nn=n(S,"LI",{});var g9=s(Nn);vre=n(g9,"STRONG",{});var zGr=s(vre);VYe=r(zGr,"camembert"),zGr.forEach(t),XYe=r(g9," \u2014 "),BS=n(g9,"A",{href:!0});var QGr=s(BS);zYe=r(QGr,"CamembertTokenizer"),QGr.forEach(t),QYe=r(g9," or "),PS=n(g9,"A",{href:!0});var WGr=s(PS);WYe=r(WGr,"CamembertTokenizerFast"),WGr.forEach(t),HYe=r(g9," (CamemBERT model)"),g9.forEach(t),UYe=i(S),Cg=n(S,"LI",{});var T5e=s(Cg);Fre=n(T5e,"STRONG",{});var HGr=s(Fre);JYe=r(HGr,"canine"),HGr.forEach(t),YYe=r(T5e," \u2014 "),IS=n(T5e,"A",{href:!0});var UGr=s(IS);KYe=r(UGr,"CanineTokenizer"),UGr.forEach(t),ZYe=r(T5e," (Canine model)"),T5e.forEach(t),eKe=i(S),jn=n(S,"LI",{});var h9=s(jn);Tre=n(h9,"STRONG",{});var JGr=s(Tre);oKe=r(JGr,"clip"),JGr.forEach(t),rKe=r(h9," \u2014 "),qS=n(h9,"A",{href:!0});var YGr=s(qS);tKe=r(YGr,"CLIPTokenizer"),YGr.forEach(t),aKe=r(h9," or "),NS=n(h9,"A",{href:!0});var KGr=s(NS);nKe=r(KGr,"CLIPTokenizerFast"),KGr.forEach(t),sKe=r(h9," (CLIP model)"),h9.forEach(t),lKe=i(S),Dn=n(S,"LI",{});var p9=s(Dn);Mre=n(p9,"STRONG",{});var ZGr=s(Mre);iKe=r(ZGr,"convbert"),ZGr.forEach(t),dKe=r(p9," \u2014 "),jS=n(p9,"A",{href:!0});var eOr=s(jS);cKe=r(eOr,"ConvBertTokenizer"),eOr.forEach(t),fKe=r(p9," or "),DS=n(p9,"A",{href:!0});var oOr=s(DS);mKe=r(oOr,"ConvBertTokenizerFast"),oOr.forEach(t),gKe=r(p9," (ConvBERT model)"),p9.forEach(t),hKe=i(S),Gn=n(S,"LI",{});var u9=s(Gn);Ere=n(u9,"STRONG",{});var rOr=s(Ere);pKe=r(rOr,"cpm"),rOr.forEach(t),uKe=r(u9," \u2014 "),GS=n(u9,"A",{href:!0});var tOr=s(GS);_Ke=r(tOr,"CpmTokenizer"),tOr.forEach(t),bKe=r(u9," or "),OS=n(u9,"A",{href:!0});var aOr=s(OS);vKe=r(aOr,"CpmTokenizerFast"),aOr.forEach(t),FKe=r(u9," (CPM model)"),u9.forEach(t),TKe=i(S),wg=n(S,"LI",{});var M5e=s(wg);Cre=n(M5e,"STRONG",{});var nOr=s(Cre);MKe=r(nOr,"ctrl"),nOr.forEach(t),EKe=r(M5e," \u2014 "),VS=n(M5e,"A",{href:!0});var sOr=s(VS);CKe=r(sOr,"CTRLTokenizer"),sOr.forEach(t),wKe=r(M5e," (CTRL model)"),M5e.forEach(t),AKe=i(S),On=n(S,"LI",{});var _9=s(On);wre=n(_9,"STRONG",{});var lOr=s(wre);yKe=r(lOr,"data2vec-text"),lOr.forEach(t),LKe=r(_9," \u2014 "),XS=n(_9,"A",{href:!0});var iOr=s(XS);xKe=r(iOr,"RobertaTokenizer"),iOr.forEach(t),$Ke=r(_9," or "),zS=n(_9,"A",{href:!0});var dOr=s(zS);kKe=r(dOr,"RobertaTokenizerFast"),dOr.forEach(t),SKe=r(_9," (Data2VecText model)"),_9.forEach(t),RKe=i(S),Vn=n(S,"LI",{});var b9=s(Vn);Are=n(b9,"STRONG",{});var cOr=s(Are);BKe=r(cOr,"deberta"),cOr.forEach(t),PKe=r(b9," \u2014 "),QS=n(b9,"A",{href:!0});var fOr=s(QS);IKe=r(fOr,"DebertaTokenizer"),fOr.forEach(t),qKe=r(b9," or "),WS=n(b9,"A",{href:!0});var mOr=s(WS);NKe=r(mOr,"DebertaTokenizerFast"),mOr.forEach(t),jKe=r(b9," (DeBERTa model)"),b9.forEach(t),DKe=i(S),Xn=n(S,"LI",{});var v9=s(Xn);yre=n(v9,"STRONG",{});var gOr=s(yre);GKe=r(gOr,"deberta-v2"),gOr.forEach(t),OKe=r(v9," \u2014 "),HS=n(v9,"A",{href:!0});var hOr=s(HS);VKe=r(hOr,"DebertaV2Tokenizer"),hOr.forEach(t),XKe=r(v9," or "),US=n(v9,"A",{href:!0});var pOr=s(US);zKe=r(pOr,"DebertaV2TokenizerFast"),pOr.forEach(t),QKe=r(v9," (DeBERTa-v2 model)"),v9.forEach(t),WKe=i(S),zn=n(S,"LI",{});var F9=s(zn);Lre=n(F9,"STRONG",{});var uOr=s(Lre);HKe=r(uOr,"distilbert"),uOr.forEach(t),UKe=r(F9," \u2014 "),JS=n(F9,"A",{href:!0});var _Or=s(JS);JKe=r(_Or,"DistilBertTokenizer"),_Or.forEach(t),YKe=r(F9," or "),YS=n(F9,"A",{href:!0});var bOr=s(YS);KKe=r(bOr,"DistilBertTokenizerFast"),bOr.forEach(t),ZKe=r(F9," (DistilBERT model)"),F9.forEach(t),eZe=i(S),Qn=n(S,"LI",{});var T9=s(Qn);xre=n(T9,"STRONG",{});var vOr=s(xre);oZe=r(vOr,"dpr"),vOr.forEach(t),rZe=r(T9," \u2014 "),KS=n(T9,"A",{href:!0});var FOr=s(KS);tZe=r(FOr,"DPRQuestionEncoderTokenizer"),FOr.forEach(t),aZe=r(T9," or "),ZS=n(T9,"A",{href:!0});var TOr=s(ZS);nZe=r(TOr,"DPRQuestionEncoderTokenizerFast"),TOr.forEach(t),sZe=r(T9," (DPR model)"),T9.forEach(t),lZe=i(S),Wn=n(S,"LI",{});var M9=s(Wn);$re=n(M9,"STRONG",{});var MOr=s($re);iZe=r(MOr,"electra"),MOr.forEach(t),dZe=r(M9," \u2014 "),eR=n(M9,"A",{href:!0});var EOr=s(eR);cZe=r(EOr,"ElectraTokenizer"),EOr.forEach(t),fZe=r(M9," or "),oR=n(M9,"A",{href:!0});var COr=s(oR);mZe=r(COr,"ElectraTokenizerFast"),COr.forEach(t),gZe=r(M9," (ELECTRA model)"),M9.forEach(t),hZe=i(S),Ag=n(S,"LI",{});var E5e=s(Ag);kre=n(E5e,"STRONG",{});var wOr=s(kre);pZe=r(wOr,"flaubert"),wOr.forEach(t),uZe=r(E5e," \u2014 "),rR=n(E5e,"A",{href:!0});var AOr=s(rR);_Ze=r(AOr,"FlaubertTokenizer"),AOr.forEach(t),bZe=r(E5e," (FlauBERT model)"),E5e.forEach(t),vZe=i(S),Hn=n(S,"LI",{});var E9=s(Hn);Sre=n(E9,"STRONG",{});var yOr=s(Sre);FZe=r(yOr,"fnet"),yOr.forEach(t),TZe=r(E9," \u2014 "),tR=n(E9,"A",{href:!0});var LOr=s(tR);MZe=r(LOr,"FNetTokenizer"),LOr.forEach(t),EZe=r(E9," or "),aR=n(E9,"A",{href:!0});var xOr=s(aR);CZe=r(xOr,"FNetTokenizerFast"),xOr.forEach(t),wZe=r(E9," (FNet model)"),E9.forEach(t),AZe=i(S),yg=n(S,"LI",{});var C5e=s(yg);Rre=n(C5e,"STRONG",{});var $Or=s(Rre);yZe=r($Or,"fsmt"),$Or.forEach(t),LZe=r(C5e," \u2014 "),nR=n(C5e,"A",{href:!0});var kOr=s(nR);xZe=r(kOr,"FSMTTokenizer"),kOr.forEach(t),$Ze=r(C5e," (FairSeq Machine-Translation model)"),C5e.forEach(t),kZe=i(S),Un=n(S,"LI",{});var C9=s(Un);Bre=n(C9,"STRONG",{});var SOr=s(Bre);SZe=r(SOr,"funnel"),SOr.forEach(t),RZe=r(C9," \u2014 "),sR=n(C9,"A",{href:!0});var ROr=s(sR);BZe=r(ROr,"FunnelTokenizer"),ROr.forEach(t),PZe=r(C9," or "),lR=n(C9,"A",{href:!0});var BOr=s(lR);IZe=r(BOr,"FunnelTokenizerFast"),BOr.forEach(t),qZe=r(C9," (Funnel Transformer model)"),C9.forEach(t),NZe=i(S),Jn=n(S,"LI",{});var w9=s(Jn);Pre=n(w9,"STRONG",{});var POr=s(Pre);jZe=r(POr,"gpt2"),POr.forEach(t),DZe=r(w9," \u2014 "),iR=n(w9,"A",{href:!0});var IOr=s(iR);GZe=r(IOr,"GPT2Tokenizer"),IOr.forEach(t),OZe=r(w9," or "),dR=n(w9,"A",{href:!0});var qOr=s(dR);VZe=r(qOr,"GPT2TokenizerFast"),qOr.forEach(t),XZe=r(w9," (OpenAI GPT-2 model)"),w9.forEach(t),zZe=i(S),Yn=n(S,"LI",{});var A9=s(Yn);Ire=n(A9,"STRONG",{});var NOr=s(Ire);QZe=r(NOr,"gpt_neo"),NOr.forEach(t),WZe=r(A9," \u2014 "),cR=n(A9,"A",{href:!0});var jOr=s(cR);HZe=r(jOr,"GPT2Tokenizer"),jOr.forEach(t),UZe=r(A9," or "),fR=n(A9,"A",{href:!0});var DOr=s(fR);JZe=r(DOr,"GPT2TokenizerFast"),DOr.forEach(t),YZe=r(A9," (GPT Neo model)"),A9.forEach(t),KZe=i(S),Kn=n(S,"LI",{});var y9=s(Kn);qre=n(y9,"STRONG",{});var GOr=s(qre);ZZe=r(GOr,"gptj"),GOr.forEach(t),eeo=r(y9," \u2014 "),mR=n(y9,"A",{href:!0});var OOr=s(mR);oeo=r(OOr,"GPT2Tokenizer"),OOr.forEach(t),reo=r(y9," or "),gR=n(y9,"A",{href:!0});var VOr=s(gR);teo=r(VOr,"GPT2TokenizerFast"),VOr.forEach(t),aeo=r(y9," (GPT-J model)"),y9.forEach(t),neo=i(S),Zn=n(S,"LI",{});var L9=s(Zn);Nre=n(L9,"STRONG",{});var XOr=s(Nre);seo=r(XOr,"herbert"),XOr.forEach(t),leo=r(L9," \u2014 "),hR=n(L9,"A",{href:!0});var zOr=s(hR);ieo=r(zOr,"HerbertTokenizer"),zOr.forEach(t),deo=r(L9," or "),pR=n(L9,"A",{href:!0});var QOr=s(pR);ceo=r(QOr,"HerbertTokenizerFast"),QOr.forEach(t),feo=r(L9," (HerBERT model)"),L9.forEach(t),meo=i(S),Lg=n(S,"LI",{});var w5e=s(Lg);jre=n(w5e,"STRONG",{});var WOr=s(jre);geo=r(WOr,"hubert"),WOr.forEach(t),heo=r(w5e," \u2014 "),uR=n(w5e,"A",{href:!0});var HOr=s(uR);peo=r(HOr,"Wav2Vec2CTCTokenizer"),HOr.forEach(t),ueo=r(w5e," (Hubert model)"),w5e.forEach(t),_eo=i(S),es=n(S,"LI",{});var x9=s(es);Dre=n(x9,"STRONG",{});var UOr=s(Dre);beo=r(UOr,"ibert"),UOr.forEach(t),veo=r(x9," \u2014 "),_R=n(x9,"A",{href:!0});var JOr=s(_R);Feo=r(JOr,"RobertaTokenizer"),JOr.forEach(t),Teo=r(x9," or "),bR=n(x9,"A",{href:!0});var YOr=s(bR);Meo=r(YOr,"RobertaTokenizerFast"),YOr.forEach(t),Eeo=r(x9," (I-BERT model)"),x9.forEach(t),Ceo=i(S),os=n(S,"LI",{});var $9=s(os);Gre=n($9,"STRONG",{});var KOr=s(Gre);weo=r(KOr,"layoutlm"),KOr.forEach(t),Aeo=r($9," \u2014 "),vR=n($9,"A",{href:!0});var ZOr=s(vR);yeo=r(ZOr,"LayoutLMTokenizer"),ZOr.forEach(t),Leo=r($9," or "),FR=n($9,"A",{href:!0});var eVr=s(FR);xeo=r(eVr,"LayoutLMTokenizerFast"),eVr.forEach(t),$eo=r($9," (LayoutLM model)"),$9.forEach(t),keo=i(S),rs=n(S,"LI",{});var k9=s(rs);Ore=n(k9,"STRONG",{});var oVr=s(Ore);Seo=r(oVr,"layoutlmv2"),oVr.forEach(t),Reo=r(k9," \u2014 "),TR=n(k9,"A",{href:!0});var rVr=s(TR);Beo=r(rVr,"LayoutLMv2Tokenizer"),rVr.forEach(t),Peo=r(k9," or "),MR=n(k9,"A",{href:!0});var tVr=s(MR);Ieo=r(tVr,"LayoutLMv2TokenizerFast"),tVr.forEach(t),qeo=r(k9," (LayoutLMv2 model)"),k9.forEach(t),Neo=i(S),ts=n(S,"LI",{});var S9=s(ts);Vre=n(S9,"STRONG",{});var aVr=s(Vre);jeo=r(aVr,"layoutxlm"),aVr.forEach(t),Deo=r(S9," \u2014 "),ER=n(S9,"A",{href:!0});var nVr=s(ER);Geo=r(nVr,"LayoutXLMTokenizer"),nVr.forEach(t),Oeo=r(S9," or "),CR=n(S9,"A",{href:!0});var sVr=s(CR);Veo=r(sVr,"LayoutXLMTokenizerFast"),sVr.forEach(t),Xeo=r(S9," (LayoutXLM model)"),S9.forEach(t),zeo=i(S),as=n(S,"LI",{});var R9=s(as);Xre=n(R9,"STRONG",{});var lVr=s(Xre);Qeo=r(lVr,"led"),lVr.forEach(t),Weo=r(R9," \u2014 "),wR=n(R9,"A",{href:!0});var iVr=s(wR);Heo=r(iVr,"LEDTokenizer"),iVr.forEach(t),Ueo=r(R9," or "),AR=n(R9,"A",{href:!0});var dVr=s(AR);Jeo=r(dVr,"LEDTokenizerFast"),dVr.forEach(t),Yeo=r(R9," (LED model)"),R9.forEach(t),Keo=i(S),ns=n(S,"LI",{});var B9=s(ns);zre=n(B9,"STRONG",{});var cVr=s(zre);Zeo=r(cVr,"longformer"),cVr.forEach(t),eoo=r(B9," \u2014 "),yR=n(B9,"A",{href:!0});var fVr=s(yR);ooo=r(fVr,"LongformerTokenizer"),fVr.forEach(t),roo=r(B9," or "),LR=n(B9,"A",{href:!0});var mVr=s(LR);too=r(mVr,"LongformerTokenizerFast"),mVr.forEach(t),aoo=r(B9," (Longformer model)"),B9.forEach(t),noo=i(S),xg=n(S,"LI",{});var A5e=s(xg);Qre=n(A5e,"STRONG",{});var gVr=s(Qre);soo=r(gVr,"luke"),gVr.forEach(t),loo=r(A5e," \u2014 "),xR=n(A5e,"A",{href:!0});var hVr=s(xR);ioo=r(hVr,"LukeTokenizer"),hVr.forEach(t),doo=r(A5e," (LUKE model)"),A5e.forEach(t),coo=i(S),ss=n(S,"LI",{});var P9=s(ss);Wre=n(P9,"STRONG",{});var pVr=s(Wre);foo=r(pVr,"lxmert"),pVr.forEach(t),moo=r(P9," \u2014 "),$R=n(P9,"A",{href:!0});var uVr=s($R);goo=r(uVr,"LxmertTokenizer"),uVr.forEach(t),hoo=r(P9," or "),kR=n(P9,"A",{href:!0});var _Vr=s(kR);poo=r(_Vr,"LxmertTokenizerFast"),_Vr.forEach(t),uoo=r(P9," (LXMERT model)"),P9.forEach(t),_oo=i(S),$g=n(S,"LI",{});var y5e=s($g);Hre=n(y5e,"STRONG",{});var bVr=s(Hre);boo=r(bVr,"m2m_100"),bVr.forEach(t),voo=r(y5e," \u2014 "),SR=n(y5e,"A",{href:!0});var vVr=s(SR);Foo=r(vVr,"M2M100Tokenizer"),vVr.forEach(t),Too=r(y5e," (M2M100 model)"),y5e.forEach(t),Moo=i(S),kg=n(S,"LI",{});var L5e=s(kg);Ure=n(L5e,"STRONG",{});var FVr=s(Ure);Eoo=r(FVr,"marian"),FVr.forEach(t),Coo=r(L5e," \u2014 "),RR=n(L5e,"A",{href:!0});var TVr=s(RR);woo=r(TVr,"MarianTokenizer"),TVr.forEach(t),Aoo=r(L5e," (Marian model)"),L5e.forEach(t),yoo=i(S),ls=n(S,"LI",{});var I9=s(ls);Jre=n(I9,"STRONG",{});var MVr=s(Jre);Loo=r(MVr,"mbart"),MVr.forEach(t),xoo=r(I9," \u2014 "),BR=n(I9,"A",{href:!0});var EVr=s(BR);$oo=r(EVr,"MBartTokenizer"),EVr.forEach(t),koo=r(I9," or "),PR=n(I9,"A",{href:!0});var CVr=s(PR);Soo=r(CVr,"MBartTokenizerFast"),CVr.forEach(t),Roo=r(I9," (mBART model)"),I9.forEach(t),Boo=i(S),is=n(S,"LI",{});var q9=s(is);Yre=n(q9,"STRONG",{});var wVr=s(Yre);Poo=r(wVr,"mbart50"),wVr.forEach(t),Ioo=r(q9," \u2014 "),IR=n(q9,"A",{href:!0});var AVr=s(IR);qoo=r(AVr,"MBart50Tokenizer"),AVr.forEach(t),Noo=r(q9," or "),qR=n(q9,"A",{href:!0});var yVr=s(qR);joo=r(yVr,"MBart50TokenizerFast"),yVr.forEach(t),Doo=r(q9," (mBART-50 model)"),q9.forEach(t),Goo=i(S),ds=n(S,"LI",{});var N9=s(ds);Kre=n(N9,"STRONG",{});var LVr=s(Kre);Ooo=r(LVr,"megatron-bert"),LVr.forEach(t),Voo=r(N9," \u2014 "),NR=n(N9,"A",{href:!0});var xVr=s(NR);Xoo=r(xVr,"BertTokenizer"),xVr.forEach(t),zoo=r(N9," or "),jR=n(N9,"A",{href:!0});var $Vr=s(jR);Qoo=r($Vr,"BertTokenizerFast"),$Vr.forEach(t),Woo=r(N9," (MegatronBert model)"),N9.forEach(t),Hoo=i(S),Sg=n(S,"LI",{});var x5e=s(Sg);Zre=n(x5e,"STRONG",{});var kVr=s(Zre);Uoo=r(kVr,"mluke"),kVr.forEach(t),Joo=r(x5e," \u2014 "),DR=n(x5e,"A",{href:!0});var SVr=s(DR);Yoo=r(SVr,"MLukeTokenizer"),SVr.forEach(t),Koo=r(x5e," (mLUKE model)"),x5e.forEach(t),Zoo=i(S),cs=n(S,"LI",{});var j9=s(cs);ete=n(j9,"STRONG",{});var RVr=s(ete);ero=r(RVr,"mobilebert"),RVr.forEach(t),oro=r(j9," \u2014 "),GR=n(j9,"A",{href:!0});var BVr=s(GR);rro=r(BVr,"MobileBertTokenizer"),BVr.forEach(t),tro=r(j9," or "),OR=n(j9,"A",{href:!0});var PVr=s(OR);aro=r(PVr,"MobileBertTokenizerFast"),PVr.forEach(t),nro=r(j9," (MobileBERT model)"),j9.forEach(t),sro=i(S),fs=n(S,"LI",{});var D9=s(fs);ote=n(D9,"STRONG",{});var IVr=s(ote);lro=r(IVr,"mpnet"),IVr.forEach(t),iro=r(D9," \u2014 "),VR=n(D9,"A",{href:!0});var qVr=s(VR);dro=r(qVr,"MPNetTokenizer"),qVr.forEach(t),cro=r(D9," or "),XR=n(D9,"A",{href:!0});var NVr=s(XR);fro=r(NVr,"MPNetTokenizerFast"),NVr.forEach(t),mro=r(D9," (MPNet model)"),D9.forEach(t),gro=i(S),ms=n(S,"LI",{});var G9=s(ms);rte=n(G9,"STRONG",{});var jVr=s(rte);hro=r(jVr,"mt5"),jVr.forEach(t),pro=r(G9," \u2014 "),zR=n(G9,"A",{href:!0});var DVr=s(zR);uro=r(DVr,"MT5Tokenizer"),DVr.forEach(t),_ro=r(G9," or "),QR=n(G9,"A",{href:!0});var GVr=s(QR);bro=r(GVr,"MT5TokenizerFast"),GVr.forEach(t),vro=r(G9," (mT5 model)"),G9.forEach(t),Fro=i(S),gs=n(S,"LI",{});var O9=s(gs);tte=n(O9,"STRONG",{});var OVr=s(tte);Tro=r(OVr,"nystromformer"),OVr.forEach(t),Mro=r(O9," \u2014 "),WR=n(O9,"A",{href:!0});var VVr=s(WR);Ero=r(VVr,"AlbertTokenizer"),VVr.forEach(t),Cro=r(O9," or "),HR=n(O9,"A",{href:!0});var XVr=s(HR);wro=r(XVr,"AlbertTokenizerFast"),XVr.forEach(t),Aro=r(O9," (Nystromformer model)"),O9.forEach(t),yro=i(S),hs=n(S,"LI",{});var V9=s(hs);ate=n(V9,"STRONG",{});var zVr=s(ate);Lro=r(zVr,"openai-gpt"),zVr.forEach(t),xro=r(V9," \u2014 "),UR=n(V9,"A",{href:!0});var QVr=s(UR);$ro=r(QVr,"OpenAIGPTTokenizer"),QVr.forEach(t),kro=r(V9," or "),JR=n(V9,"A",{href:!0});var WVr=s(JR);Sro=r(WVr,"OpenAIGPTTokenizerFast"),WVr.forEach(t),Rro=r(V9," (OpenAI GPT model)"),V9.forEach(t),Bro=i(S),ps=n(S,"LI",{});var X9=s(ps);nte=n(X9,"STRONG",{});var HVr=s(nte);Pro=r(HVr,"pegasus"),HVr.forEach(t),Iro=r(X9," \u2014 "),YR=n(X9,"A",{href:!0});var UVr=s(YR);qro=r(UVr,"PegasusTokenizer"),UVr.forEach(t),Nro=r(X9," or "),KR=n(X9,"A",{href:!0});var JVr=s(KR);jro=r(JVr,"PegasusTokenizerFast"),JVr.forEach(t),Dro=r(X9," (Pegasus model)"),X9.forEach(t),Gro=i(S),Rg=n(S,"LI",{});var $5e=s(Rg);ste=n($5e,"STRONG",{});var YVr=s(ste);Oro=r(YVr,"perceiver"),YVr.forEach(t),Vro=r($5e," \u2014 "),ZR=n($5e,"A",{href:!0});var KVr=s(ZR);Xro=r(KVr,"PerceiverTokenizer"),KVr.forEach(t),zro=r($5e," (Perceiver model)"),$5e.forEach(t),Qro=i(S),Bg=n(S,"LI",{});var k5e=s(Bg);lte=n(k5e,"STRONG",{});var ZVr=s(lte);Wro=r(ZVr,"phobert"),ZVr.forEach(t),Hro=r(k5e," \u2014 "),eB=n(k5e,"A",{href:!0});var eXr=s(eB);Uro=r(eXr,"PhobertTokenizer"),eXr.forEach(t),Jro=r(k5e," (PhoBERT model)"),k5e.forEach(t),Yro=i(S),Pg=n(S,"LI",{});var S5e=s(Pg);ite=n(S5e,"STRONG",{});var oXr=s(ite);Kro=r(oXr,"plbart"),oXr.forEach(t),Zro=r(S5e," \u2014 "),oB=n(S5e,"A",{href:!0});var rXr=s(oB);eto=r(rXr,"PLBartTokenizer"),rXr.forEach(t),oto=r(S5e," (PLBart model)"),S5e.forEach(t),rto=i(S),Ig=n(S,"LI",{});var R5e=s(Ig);dte=n(R5e,"STRONG",{});var tXr=s(dte);tto=r(tXr,"prophetnet"),tXr.forEach(t),ato=r(R5e," \u2014 "),rB=n(R5e,"A",{href:!0});var aXr=s(rB);nto=r(aXr,"ProphetNetTokenizer"),aXr.forEach(t),sto=r(R5e," (ProphetNet model)"),R5e.forEach(t),lto=i(S),us=n(S,"LI",{});var z9=s(us);cte=n(z9,"STRONG",{});var nXr=s(cte);ito=r(nXr,"qdqbert"),nXr.forEach(t),dto=r(z9," \u2014 "),tB=n(z9,"A",{href:!0});var sXr=s(tB);cto=r(sXr,"BertTokenizer"),sXr.forEach(t),fto=r(z9," or "),aB=n(z9,"A",{href:!0});var lXr=s(aB);mto=r(lXr,"BertTokenizerFast"),lXr.forEach(t),gto=r(z9," (QDQBert model)"),z9.forEach(t),hto=i(S),qg=n(S,"LI",{});var B5e=s(qg);fte=n(B5e,"STRONG",{});var iXr=s(fte);pto=r(iXr,"rag"),iXr.forEach(t),uto=r(B5e," \u2014 "),nB=n(B5e,"A",{href:!0});var dXr=s(nB);_to=r(dXr,"RagTokenizer"),dXr.forEach(t),bto=r(B5e," (RAG model)"),B5e.forEach(t),vto=i(S),_s=n(S,"LI",{});var Q9=s(_s);mte=n(Q9,"STRONG",{});var cXr=s(mte);Fto=r(cXr,"realm"),cXr.forEach(t),Tto=r(Q9," \u2014 "),sB=n(Q9,"A",{href:!0});var fXr=s(sB);Mto=r(fXr,"RealmTokenizer"),fXr.forEach(t),Eto=r(Q9," or "),lB=n(Q9,"A",{href:!0});var mXr=s(lB);Cto=r(mXr,"RealmTokenizerFast"),mXr.forEach(t),wto=r(Q9," (Realm model)"),Q9.forEach(t),Ato=i(S),bs=n(S,"LI",{});var W9=s(bs);gte=n(W9,"STRONG",{});var gXr=s(gte);yto=r(gXr,"reformer"),gXr.forEach(t),Lto=r(W9," \u2014 "),iB=n(W9,"A",{href:!0});var hXr=s(iB);xto=r(hXr,"ReformerTokenizer"),hXr.forEach(t),$to=r(W9," or "),dB=n(W9,"A",{href:!0});var pXr=s(dB);kto=r(pXr,"ReformerTokenizerFast"),pXr.forEach(t),Sto=r(W9," (Reformer model)"),W9.forEach(t),Rto=i(S),vs=n(S,"LI",{});var H9=s(vs);hte=n(H9,"STRONG",{});var uXr=s(hte);Bto=r(uXr,"rembert"),uXr.forEach(t),Pto=r(H9," \u2014 "),cB=n(H9,"A",{href:!0});var _Xr=s(cB);Ito=r(_Xr,"RemBertTokenizer"),_Xr.forEach(t),qto=r(H9," or "),fB=n(H9,"A",{href:!0});var bXr=s(fB);Nto=r(bXr,"RemBertTokenizerFast"),bXr.forEach(t),jto=r(H9," (RemBERT model)"),H9.forEach(t),Dto=i(S),Fs=n(S,"LI",{});var U9=s(Fs);pte=n(U9,"STRONG",{});var vXr=s(pte);Gto=r(vXr,"retribert"),vXr.forEach(t),Oto=r(U9," \u2014 "),mB=n(U9,"A",{href:!0});var FXr=s(mB);Vto=r(FXr,"RetriBertTokenizer"),FXr.forEach(t),Xto=r(U9," or "),gB=n(U9,"A",{href:!0});var TXr=s(gB);zto=r(TXr,"RetriBertTokenizerFast"),TXr.forEach(t),Qto=r(U9," (RetriBERT model)"),U9.forEach(t),Wto=i(S),Ts=n(S,"LI",{});var J9=s(Ts);ute=n(J9,"STRONG",{});var MXr=s(ute);Hto=r(MXr,"roberta"),MXr.forEach(t),Uto=r(J9," \u2014 "),hB=n(J9,"A",{href:!0});var EXr=s(hB);Jto=r(EXr,"RobertaTokenizer"),EXr.forEach(t),Yto=r(J9," or "),pB=n(J9,"A",{href:!0});var CXr=s(pB);Kto=r(CXr,"RobertaTokenizerFast"),CXr.forEach(t),Zto=r(J9," (RoBERTa model)"),J9.forEach(t),eao=i(S),Ms=n(S,"LI",{});var Y9=s(Ms);_te=n(Y9,"STRONG",{});var wXr=s(_te);oao=r(wXr,"roformer"),wXr.forEach(t),rao=r(Y9," \u2014 "),uB=n(Y9,"A",{href:!0});var AXr=s(uB);tao=r(AXr,"RoFormerTokenizer"),AXr.forEach(t),aao=r(Y9," or "),_B=n(Y9,"A",{href:!0});var yXr=s(_B);nao=r(yXr,"RoFormerTokenizerFast"),yXr.forEach(t),sao=r(Y9," (RoFormer model)"),Y9.forEach(t),lao=i(S),Ng=n(S,"LI",{});var P5e=s(Ng);bte=n(P5e,"STRONG",{});var LXr=s(bte);iao=r(LXr,"speech_to_text"),LXr.forEach(t),dao=r(P5e," \u2014 "),bB=n(P5e,"A",{href:!0});var xXr=s(bB);cao=r(xXr,"Speech2TextTokenizer"),xXr.forEach(t),fao=r(P5e," (Speech2Text model)"),P5e.forEach(t),mao=i(S),jg=n(S,"LI",{});var I5e=s(jg);vte=n(I5e,"STRONG",{});var $Xr=s(vte);gao=r($Xr,"speech_to_text_2"),$Xr.forEach(t),hao=r(I5e," \u2014 "),vB=n(I5e,"A",{href:!0});var kXr=s(vB);pao=r(kXr,"Speech2Text2Tokenizer"),kXr.forEach(t),uao=r(I5e," (Speech2Text2 model)"),I5e.forEach(t),_ao=i(S),Es=n(S,"LI",{});var K9=s(Es);Fte=n(K9,"STRONG",{});var SXr=s(Fte);bao=r(SXr,"splinter"),SXr.forEach(t),vao=r(K9," \u2014 "),FB=n(K9,"A",{href:!0});var RXr=s(FB);Fao=r(RXr,"SplinterTokenizer"),RXr.forEach(t),Tao=r(K9," or "),TB=n(K9,"A",{href:!0});var BXr=s(TB);Mao=r(BXr,"SplinterTokenizerFast"),BXr.forEach(t),Eao=r(K9," (Splinter model)"),K9.forEach(t),Cao=i(S),Cs=n(S,"LI",{});var Z9=s(Cs);Tte=n(Z9,"STRONG",{});var PXr=s(Tte);wao=r(PXr,"squeezebert"),PXr.forEach(t),Aao=r(Z9," \u2014 "),MB=n(Z9,"A",{href:!0});var IXr=s(MB);yao=r(IXr,"SqueezeBertTokenizer"),IXr.forEach(t),Lao=r(Z9," or "),EB=n(Z9,"A",{href:!0});var qXr=s(EB);xao=r(qXr,"SqueezeBertTokenizerFast"),qXr.forEach(t),$ao=r(Z9," (SqueezeBERT model)"),Z9.forEach(t),kao=i(S),ws=n(S,"LI",{});var e$=s(ws);Mte=n(e$,"STRONG",{});var NXr=s(Mte);Sao=r(NXr,"t5"),NXr.forEach(t),Rao=r(e$," \u2014 "),CB=n(e$,"A",{href:!0});var jXr=s(CB);Bao=r(jXr,"T5Tokenizer"),jXr.forEach(t),Pao=r(e$," or "),wB=n(e$,"A",{href:!0});var DXr=s(wB);Iao=r(DXr,"T5TokenizerFast"),DXr.forEach(t),qao=r(e$," (T5 model)"),e$.forEach(t),Nao=i(S),Dg=n(S,"LI",{});var q5e=s(Dg);Ete=n(q5e,"STRONG",{});var GXr=s(Ete);jao=r(GXr,"tapas"),GXr.forEach(t),Dao=r(q5e," \u2014 "),AB=n(q5e,"A",{href:!0});var OXr=s(AB);Gao=r(OXr,"TapasTokenizer"),OXr.forEach(t),Oao=r(q5e," (TAPAS model)"),q5e.forEach(t),Vao=i(S),Gg=n(S,"LI",{});var N5e=s(Gg);Cte=n(N5e,"STRONG",{});var VXr=s(Cte);Xao=r(VXr,"tapex"),VXr.forEach(t),zao=r(N5e," \u2014 "),yB=n(N5e,"A",{href:!0});var XXr=s(yB);Qao=r(XXr,"TapexTokenizer"),XXr.forEach(t),Wao=r(N5e," (TAPEX model)"),N5e.forEach(t),Hao=i(S),Og=n(S,"LI",{});var j5e=s(Og);wte=n(j5e,"STRONG",{});var zXr=s(wte);Uao=r(zXr,"transfo-xl"),zXr.forEach(t),Jao=r(j5e," \u2014 "),LB=n(j5e,"A",{href:!0});var QXr=s(LB);Yao=r(QXr,"TransfoXLTokenizer"),QXr.forEach(t),Kao=r(j5e," (Transformer-XL model)"),j5e.forEach(t),Zao=i(S),As=n(S,"LI",{});var o$=s(As);Ate=n(o$,"STRONG",{});var WXr=s(Ate);eno=r(WXr,"visual_bert"),WXr.forEach(t),ono=r(o$," \u2014 "),xB=n(o$,"A",{href:!0});var HXr=s(xB);rno=r(HXr,"BertTokenizer"),HXr.forEach(t),tno=r(o$," or "),$B=n(o$,"A",{href:!0});var UXr=s($B);ano=r(UXr,"BertTokenizerFast"),UXr.forEach(t),nno=r(o$," (VisualBert model)"),o$.forEach(t),sno=i(S),Vg=n(S,"LI",{});var D5e=s(Vg);yte=n(D5e,"STRONG",{});var JXr=s(yte);lno=r(JXr,"wav2vec2"),JXr.forEach(t),ino=r(D5e," \u2014 "),kB=n(D5e,"A",{href:!0});var YXr=s(kB);dno=r(YXr,"Wav2Vec2CTCTokenizer"),YXr.forEach(t),cno=r(D5e," (Wav2Vec2 model)"),D5e.forEach(t),fno=i(S),Xg=n(S,"LI",{});var G5e=s(Xg);Lte=n(G5e,"STRONG",{});var KXr=s(Lte);mno=r(KXr,"wav2vec2_phoneme"),KXr.forEach(t),gno=r(G5e," \u2014 "),SB=n(G5e,"A",{href:!0});var ZXr=s(SB);hno=r(ZXr,"Wav2Vec2PhonemeCTCTokenizer"),ZXr.forEach(t),pno=r(G5e," (Wav2Vec2Phoneme model)"),G5e.forEach(t),uno=i(S),ys=n(S,"LI",{});var r$=s(ys);xte=n(r$,"STRONG",{});var ezr=s(xte);_no=r(ezr,"xglm"),ezr.forEach(t),bno=r(r$," \u2014 "),RB=n(r$,"A",{href:!0});var ozr=s(RB);vno=r(ozr,"XGLMTokenizer"),ozr.forEach(t),Fno=r(r$," or "),BB=n(r$,"A",{href:!0});var rzr=s(BB);Tno=r(rzr,"XGLMTokenizerFast"),rzr.forEach(t),Mno=r(r$," (XGLM model)"),r$.forEach(t),Eno=i(S),zg=n(S,"LI",{});var O5e=s(zg);$te=n(O5e,"STRONG",{});var tzr=s($te);Cno=r(tzr,"xlm"),tzr.forEach(t),wno=r(O5e," \u2014 "),PB=n(O5e,"A",{href:!0});var azr=s(PB);Ano=r(azr,"XLMTokenizer"),azr.forEach(t),yno=r(O5e," (XLM model)"),O5e.forEach(t),Lno=i(S),Qg=n(S,"LI",{});var V5e=s(Qg);kte=n(V5e,"STRONG",{});var nzr=s(kte);xno=r(nzr,"xlm-prophetnet"),nzr.forEach(t),$no=r(V5e," \u2014 "),IB=n(V5e,"A",{href:!0});var szr=s(IB);kno=r(szr,"XLMProphetNetTokenizer"),szr.forEach(t),Sno=r(V5e," (XLMProphetNet model)"),V5e.forEach(t),Rno=i(S),Ls=n(S,"LI",{});var t$=s(Ls);Ste=n(t$,"STRONG",{});var lzr=s(Ste);Bno=r(lzr,"xlm-roberta"),lzr.forEach(t),Pno=r(t$," \u2014 "),qB=n(t$,"A",{href:!0});var izr=s(qB);Ino=r(izr,"XLMRobertaTokenizer"),izr.forEach(t),qno=r(t$," or "),NB=n(t$,"A",{href:!0});var dzr=s(NB);Nno=r(dzr,"XLMRobertaTokenizerFast"),dzr.forEach(t),jno=r(t$," (XLM-RoBERTa model)"),t$.forEach(t),Dno=i(S),xs=n(S,"LI",{});var a$=s(xs);Rte=n(a$,"STRONG",{});var czr=s(Rte);Gno=r(czr,"xlm-roberta-xl"),czr.forEach(t),Ono=r(a$," \u2014 "),jB=n(a$,"A",{href:!0});var fzr=s(jB);Vno=r(fzr,"RobertaTokenizer"),fzr.forEach(t),Xno=r(a$," or "),DB=n(a$,"A",{href:!0});var mzr=s(DB);zno=r(mzr,"RobertaTokenizerFast"),mzr.forEach(t),Qno=r(a$," (XLM-RoBERTa-XL model)"),a$.forEach(t),Wno=i(S),$s=n(S,"LI",{});var n$=s($s);Bte=n(n$,"STRONG",{});var gzr=s(Bte);Hno=r(gzr,"xlnet"),gzr.forEach(t),Uno=r(n$," \u2014 "),GB=n(n$,"A",{href:!0});var hzr=s(GB);Jno=r(hzr,"XLNetTokenizer"),hzr.forEach(t),Yno=r(n$," or "),OB=n(n$,"A",{href:!0});var pzr=s(OB);Kno=r(pzr,"XLNetTokenizerFast"),pzr.forEach(t),Zno=r(n$," (XLNet model)"),n$.forEach(t),eso=i(S),ks=n(S,"LI",{});var s$=s(ks);Pte=n(s$,"STRONG",{});var uzr=s(Pte);oso=r(uzr,"yoso"),uzr.forEach(t),rso=r(s$," \u2014 "),VB=n(s$,"A",{href:!0});var _zr=s(VB);tso=r(_zr,"AlbertTokenizer"),_zr.forEach(t),aso=r(s$," or "),XB=n(s$,"A",{href:!0});var bzr=s(XB);nso=r(bzr,"AlbertTokenizerFast"),bzr.forEach(t),sso=r(s$," (YOSO model)"),s$.forEach(t),S.forEach(t),lso=i(Is),T(Wg.$$.fragment,Is),Is.forEach(t),iso=i(Ps),Hg=n(Ps,"DIV",{class:!0});var Pqe=s(Hg);T(sA.$$.fragment,Pqe),dso=i(Pqe),Ite=n(Pqe,"P",{});var vzr=s(Ite);cso=r(vzr,"Register a new tokenizer in this mapping."),vzr.forEach(t),Pqe.forEach(t),Ps.forEach(t),IPe=i(f),bi=n(f,"H2",{class:!0});var Iqe=s(bi);Ug=n(Iqe,"A",{id:!0,class:!0,href:!0});var Fzr=s(Ug);qte=n(Fzr,"SPAN",{});var Tzr=s(qte);T(lA.$$.fragment,Tzr),Tzr.forEach(t),Fzr.forEach(t),fso=i(Iqe),Nte=n(Iqe,"SPAN",{});var Mzr=s(Nte);mso=r(Mzr,"AutoFeatureExtractor"),Mzr.forEach(t),Iqe.forEach(t),qPe=i(f),Ao=n(f,"DIV",{class:!0});var qs=s(Ao);T(iA.$$.fragment,qs),gso=i(qs),dA=n(qs,"P",{});var qqe=s(dA);hso=r(qqe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),zB=n(qqe,"A",{href:!0});var Ezr=s(zB);pso=r(Ezr,"AutoFeatureExtractor.from_pretrained()"),Ezr.forEach(t),uso=r(qqe," class method."),qqe.forEach(t),_so=i(qs),cA=n(qs,"P",{});var Nqe=s(cA);bso=r(Nqe,"This class cannot be instantiated directly using "),jte=n(Nqe,"CODE",{});var Czr=s(jte);vso=r(Czr,"__init__()"),Czr.forEach(t),Fso=r(Nqe," (throws an error)."),Nqe.forEach(t),Tso=i(qs),Qe=n(qs,"DIV",{class:!0});var Yt=s(Qe);T(fA.$$.fragment,Yt),Mso=i(Yt),Dte=n(Yt,"P",{});var wzr=s(Dte);Eso=r(wzr,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),wzr.forEach(t),Cso=i(Yt),wa=n(Yt,"P",{});var UC=s(wa);wso=r(UC,"The feature extractor class to instantiate is selected based on the "),Gte=n(UC,"CODE",{});var Azr=s(Gte);Aso=r(Azr,"model_type"),Azr.forEach(t),yso=r(UC,` property of the config object
(either passed as an argument or loaded from `),Ote=n(UC,"CODE",{});var yzr=s(Ote);Lso=r(yzr,"pretrained_model_name_or_path"),yzr.forEach(t),xso=r(UC,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Vte=n(UC,"CODE",{});var Lzr=s(Vte);$so=r(Lzr,"pretrained_model_name_or_path"),Lzr.forEach(t),kso=r(UC,":"),UC.forEach(t),Sso=i(Yt),oe=n(Yt,"UL",{});var ae=s(oe);Jg=n(ae,"LI",{});var X5e=s(Jg);Xte=n(X5e,"STRONG",{});var xzr=s(Xte);Rso=r(xzr,"beit"),xzr.forEach(t),Bso=r(X5e," \u2014 "),QB=n(X5e,"A",{href:!0});var $zr=s(QB);Pso=r($zr,"BeitFeatureExtractor"),$zr.forEach(t),Iso=r(X5e," (BEiT model)"),X5e.forEach(t),qso=i(ae),Yg=n(ae,"LI",{});var z5e=s(Yg);zte=n(z5e,"STRONG",{});var kzr=s(zte);Nso=r(kzr,"clip"),kzr.forEach(t),jso=r(z5e," \u2014 "),WB=n(z5e,"A",{href:!0});var Szr=s(WB);Dso=r(Szr,"CLIPFeatureExtractor"),Szr.forEach(t),Gso=r(z5e," (CLIP model)"),z5e.forEach(t),Oso=i(ae),Kg=n(ae,"LI",{});var Q5e=s(Kg);Qte=n(Q5e,"STRONG",{});var Rzr=s(Qte);Vso=r(Rzr,"convnext"),Rzr.forEach(t),Xso=r(Q5e," \u2014 "),HB=n(Q5e,"A",{href:!0});var Bzr=s(HB);zso=r(Bzr,"ConvNextFeatureExtractor"),Bzr.forEach(t),Qso=r(Q5e," (ConvNext model)"),Q5e.forEach(t),Wso=i(ae),Zg=n(ae,"LI",{});var W5e=s(Zg);Wte=n(W5e,"STRONG",{});var Pzr=s(Wte);Hso=r(Pzr,"data2vec-audio"),Pzr.forEach(t),Uso=r(W5e," \u2014 "),UB=n(W5e,"A",{href:!0});var Izr=s(UB);Jso=r(Izr,"Wav2Vec2FeatureExtractor"),Izr.forEach(t),Yso=r(W5e," (Data2VecAudio model)"),W5e.forEach(t),Kso=i(ae),eh=n(ae,"LI",{});var H5e=s(eh);Hte=n(H5e,"STRONG",{});var qzr=s(Hte);Zso=r(qzr,"data2vec-vision"),qzr.forEach(t),elo=r(H5e," \u2014 "),JB=n(H5e,"A",{href:!0});var Nzr=s(JB);olo=r(Nzr,"BeitFeatureExtractor"),Nzr.forEach(t),rlo=r(H5e," (Data2VecVision model)"),H5e.forEach(t),tlo=i(ae),oh=n(ae,"LI",{});var U5e=s(oh);Ute=n(U5e,"STRONG",{});var jzr=s(Ute);alo=r(jzr,"deit"),jzr.forEach(t),nlo=r(U5e," \u2014 "),YB=n(U5e,"A",{href:!0});var Dzr=s(YB);slo=r(Dzr,"DeiTFeatureExtractor"),Dzr.forEach(t),llo=r(U5e," (DeiT model)"),U5e.forEach(t),ilo=i(ae),rh=n(ae,"LI",{});var J5e=s(rh);Jte=n(J5e,"STRONG",{});var Gzr=s(Jte);dlo=r(Gzr,"detr"),Gzr.forEach(t),clo=r(J5e," \u2014 "),KB=n(J5e,"A",{href:!0});var Ozr=s(KB);flo=r(Ozr,"DetrFeatureExtractor"),Ozr.forEach(t),mlo=r(J5e," (DETR model)"),J5e.forEach(t),glo=i(ae),th=n(ae,"LI",{});var Y5e=s(th);Yte=n(Y5e,"STRONG",{});var Vzr=s(Yte);hlo=r(Vzr,"dpt"),Vzr.forEach(t),plo=r(Y5e," \u2014 "),ZB=n(Y5e,"A",{href:!0});var Xzr=s(ZB);ulo=r(Xzr,"DPTFeatureExtractor"),Xzr.forEach(t),_lo=r(Y5e," (DPT model)"),Y5e.forEach(t),blo=i(ae),ah=n(ae,"LI",{});var K5e=s(ah);Kte=n(K5e,"STRONG",{});var zzr=s(Kte);vlo=r(zzr,"flava"),zzr.forEach(t),Flo=r(K5e," \u2014 "),eP=n(K5e,"A",{href:!0});var Qzr=s(eP);Tlo=r(Qzr,"FlavaFeatureExtractor"),Qzr.forEach(t),Mlo=r(K5e," (Flava model)"),K5e.forEach(t),Elo=i(ae),nh=n(ae,"LI",{});var Z5e=s(nh);Zte=n(Z5e,"STRONG",{});var Wzr=s(Zte);Clo=r(Wzr,"glpn"),Wzr.forEach(t),wlo=r(Z5e," \u2014 "),oP=n(Z5e,"A",{href:!0});var Hzr=s(oP);Alo=r(Hzr,"GLPNFeatureExtractor"),Hzr.forEach(t),ylo=r(Z5e," (GLPN model)"),Z5e.forEach(t),Llo=i(ae),sh=n(ae,"LI",{});var eCe=s(sh);eae=n(eCe,"STRONG",{});var Uzr=s(eae);xlo=r(Uzr,"hubert"),Uzr.forEach(t),$lo=r(eCe," \u2014 "),rP=n(eCe,"A",{href:!0});var Jzr=s(rP);klo=r(Jzr,"Wav2Vec2FeatureExtractor"),Jzr.forEach(t),Slo=r(eCe," (Hubert model)"),eCe.forEach(t),Rlo=i(ae),lh=n(ae,"LI",{});var oCe=s(lh);oae=n(oCe,"STRONG",{});var Yzr=s(oae);Blo=r(Yzr,"layoutlmv2"),Yzr.forEach(t),Plo=r(oCe," \u2014 "),tP=n(oCe,"A",{href:!0});var Kzr=s(tP);Ilo=r(Kzr,"LayoutLMv2FeatureExtractor"),Kzr.forEach(t),qlo=r(oCe," (LayoutLMv2 model)"),oCe.forEach(t),Nlo=i(ae),ih=n(ae,"LI",{});var rCe=s(ih);rae=n(rCe,"STRONG",{});var Zzr=s(rae);jlo=r(Zzr,"maskformer"),Zzr.forEach(t),Dlo=r(rCe," \u2014 "),aP=n(rCe,"A",{href:!0});var eQr=s(aP);Glo=r(eQr,"MaskFormerFeatureExtractor"),eQr.forEach(t),Olo=r(rCe," (MaskFormer model)"),rCe.forEach(t),Vlo=i(ae),dh=n(ae,"LI",{});var tCe=s(dh);tae=n(tCe,"STRONG",{});var oQr=s(tae);Xlo=r(oQr,"perceiver"),oQr.forEach(t),zlo=r(tCe," \u2014 "),nP=n(tCe,"A",{href:!0});var rQr=s(nP);Qlo=r(rQr,"PerceiverFeatureExtractor"),rQr.forEach(t),Wlo=r(tCe," (Perceiver model)"),tCe.forEach(t),Hlo=i(ae),ch=n(ae,"LI",{});var aCe=s(ch);aae=n(aCe,"STRONG",{});var tQr=s(aae);Ulo=r(tQr,"poolformer"),tQr.forEach(t),Jlo=r(aCe," \u2014 "),sP=n(aCe,"A",{href:!0});var aQr=s(sP);Ylo=r(aQr,"PoolFormerFeatureExtractor"),aQr.forEach(t),Klo=r(aCe," (PoolFormer model)"),aCe.forEach(t),Zlo=i(ae),fh=n(ae,"LI",{});var nCe=s(fh);nae=n(nCe,"STRONG",{});var nQr=s(nae);eio=r(nQr,"regnet"),nQr.forEach(t),oio=r(nCe," \u2014 "),lP=n(nCe,"A",{href:!0});var sQr=s(lP);rio=r(sQr,"ConvNextFeatureExtractor"),sQr.forEach(t),tio=r(nCe," (RegNet model)"),nCe.forEach(t),aio=i(ae),mh=n(ae,"LI",{});var sCe=s(mh);sae=n(sCe,"STRONG",{});var lQr=s(sae);nio=r(lQr,"resnet"),lQr.forEach(t),sio=r(sCe," \u2014 "),iP=n(sCe,"A",{href:!0});var iQr=s(iP);lio=r(iQr,"ConvNextFeatureExtractor"),iQr.forEach(t),iio=r(sCe," (ResNet model)"),sCe.forEach(t),dio=i(ae),gh=n(ae,"LI",{});var lCe=s(gh);lae=n(lCe,"STRONG",{});var dQr=s(lae);cio=r(dQr,"segformer"),dQr.forEach(t),fio=r(lCe," \u2014 "),dP=n(lCe,"A",{href:!0});var cQr=s(dP);mio=r(cQr,"SegformerFeatureExtractor"),cQr.forEach(t),gio=r(lCe," (SegFormer model)"),lCe.forEach(t),hio=i(ae),hh=n(ae,"LI",{});var iCe=s(hh);iae=n(iCe,"STRONG",{});var fQr=s(iae);pio=r(fQr,"speech_to_text"),fQr.forEach(t),uio=r(iCe," \u2014 "),cP=n(iCe,"A",{href:!0});var mQr=s(cP);_io=r(mQr,"Speech2TextFeatureExtractor"),mQr.forEach(t),bio=r(iCe," (Speech2Text model)"),iCe.forEach(t),vio=i(ae),ph=n(ae,"LI",{});var dCe=s(ph);dae=n(dCe,"STRONG",{});var gQr=s(dae);Fio=r(gQr,"swin"),gQr.forEach(t),Tio=r(dCe," \u2014 "),fP=n(dCe,"A",{href:!0});var hQr=s(fP);Mio=r(hQr,"ViTFeatureExtractor"),hQr.forEach(t),Eio=r(dCe," (Swin model)"),dCe.forEach(t),Cio=i(ae),uh=n(ae,"LI",{});var cCe=s(uh);cae=n(cCe,"STRONG",{});var pQr=s(cae);wio=r(pQr,"van"),pQr.forEach(t),Aio=r(cCe," \u2014 "),mP=n(cCe,"A",{href:!0});var uQr=s(mP);yio=r(uQr,"ConvNextFeatureExtractor"),uQr.forEach(t),Lio=r(cCe," (VAN model)"),cCe.forEach(t),xio=i(ae),_h=n(ae,"LI",{});var fCe=s(_h);fae=n(fCe,"STRONG",{});var _Qr=s(fae);$io=r(_Qr,"vit"),_Qr.forEach(t),kio=r(fCe," \u2014 "),gP=n(fCe,"A",{href:!0});var bQr=s(gP);Sio=r(bQr,"ViTFeatureExtractor"),bQr.forEach(t),Rio=r(fCe," (ViT model)"),fCe.forEach(t),Bio=i(ae),bh=n(ae,"LI",{});var mCe=s(bh);mae=n(mCe,"STRONG",{});var vQr=s(mae);Pio=r(vQr,"vit_mae"),vQr.forEach(t),Iio=r(mCe," \u2014 "),hP=n(mCe,"A",{href:!0});var FQr=s(hP);qio=r(FQr,"ViTFeatureExtractor"),FQr.forEach(t),Nio=r(mCe," (ViTMAE model)"),mCe.forEach(t),jio=i(ae),vh=n(ae,"LI",{});var gCe=s(vh);gae=n(gCe,"STRONG",{});var TQr=s(gae);Dio=r(TQr,"wav2vec2"),TQr.forEach(t),Gio=r(gCe," \u2014 "),pP=n(gCe,"A",{href:!0});var MQr=s(pP);Oio=r(MQr,"Wav2Vec2FeatureExtractor"),MQr.forEach(t),Vio=r(gCe," (Wav2Vec2 model)"),gCe.forEach(t),Xio=i(ae),Fh=n(ae,"LI",{});var hCe=s(Fh);hae=n(hCe,"STRONG",{});var EQr=s(hae);zio=r(EQr,"yolos"),EQr.forEach(t),Qio=r(hCe," \u2014 "),uP=n(hCe,"A",{href:!0});var CQr=s(uP);Wio=r(CQr,"YolosFeatureExtractor"),CQr.forEach(t),Hio=r(hCe," (YOLOS model)"),hCe.forEach(t),ae.forEach(t),Uio=i(Yt),T(Th.$$.fragment,Yt),Jio=i(Yt),T(Mh.$$.fragment,Yt),Yt.forEach(t),Yio=i(qs),Eh=n(qs,"DIV",{class:!0});var jqe=s(Eh);T(mA.$$.fragment,jqe),Kio=i(jqe),pae=n(jqe,"P",{});var wQr=s(pae);Zio=r(wQr,"Register a new feature extractor for this class."),wQr.forEach(t),jqe.forEach(t),qs.forEach(t),NPe=i(f),vi=n(f,"H2",{class:!0});var Dqe=s(vi);Ch=n(Dqe,"A",{id:!0,class:!0,href:!0});var AQr=s(Ch);uae=n(AQr,"SPAN",{});var yQr=s(uae);T(gA.$$.fragment,yQr),yQr.forEach(t),AQr.forEach(t),edo=i(Dqe),_ae=n(Dqe,"SPAN",{});var LQr=s(_ae);odo=r(LQr,"AutoProcessor"),LQr.forEach(t),Dqe.forEach(t),jPe=i(f),yo=n(f,"DIV",{class:!0});var Ns=s(yo);T(hA.$$.fragment,Ns),rdo=i(Ns),pA=n(Ns,"P",{});var Gqe=s(pA);tdo=r(Gqe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),_P=n(Gqe,"A",{href:!0});var xQr=s(_P);ado=r(xQr,"AutoProcessor.from_pretrained()"),xQr.forEach(t),ndo=r(Gqe," class method."),Gqe.forEach(t),sdo=i(Ns),uA=n(Ns,"P",{});var Oqe=s(uA);ldo=r(Oqe,"This class cannot be instantiated directly using "),bae=n(Oqe,"CODE",{});var $Qr=s(bae);ido=r($Qr,"__init__()"),$Qr.forEach(t),ddo=r(Oqe," (throws an error)."),Oqe.forEach(t),cdo=i(Ns),We=n(Ns,"DIV",{class:!0});var Kt=s(We);T(_A.$$.fragment,Kt),fdo=i(Kt),vae=n(Kt,"P",{});var kQr=s(vae);mdo=r(kQr,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),kQr.forEach(t),gdo=i(Kt),Fi=n(Kt,"P",{});var ZY=s(Fi);hdo=r(ZY,"The processor class to instantiate is selected based on the "),Fae=n(ZY,"CODE",{});var SQr=s(Fae);pdo=r(SQr,"model_type"),SQr.forEach(t),udo=r(ZY,` property of the config object (either
passed as an argument or loaded from `),Tae=n(ZY,"CODE",{});var RQr=s(Tae);_do=r(RQr,"pretrained_model_name_or_path"),RQr.forEach(t),bdo=r(ZY," if possible):"),ZY.forEach(t),vdo=i(Kt),be=n(Kt,"UL",{});var ve=s(be);wh=n(ve,"LI",{});var pCe=s(wh);Mae=n(pCe,"STRONG",{});var BQr=s(Mae);Fdo=r(BQr,"clip"),BQr.forEach(t),Tdo=r(pCe," \u2014 "),bP=n(pCe,"A",{href:!0});var PQr=s(bP);Mdo=r(PQr,"CLIPProcessor"),PQr.forEach(t),Edo=r(pCe," (CLIP model)"),pCe.forEach(t),Cdo=i(ve),Ah=n(ve,"LI",{});var uCe=s(Ah);Eae=n(uCe,"STRONG",{});var IQr=s(Eae);wdo=r(IQr,"flava"),IQr.forEach(t),Ado=r(uCe," \u2014 "),Cae=n(uCe,"CODE",{});var qQr=s(Cae);ydo=r(qQr,"FLAVAProcessor"),qQr.forEach(t),Ldo=r(uCe," (Flava model)"),uCe.forEach(t),xdo=i(ve),yh=n(ve,"LI",{});var _Ce=s(yh);wae=n(_Ce,"STRONG",{});var NQr=s(wae);$do=r(NQr,"layoutlmv2"),NQr.forEach(t),kdo=r(_Ce," \u2014 "),vP=n(_Ce,"A",{href:!0});var jQr=s(vP);Sdo=r(jQr,"LayoutLMv2Processor"),jQr.forEach(t),Rdo=r(_Ce," (LayoutLMv2 model)"),_Ce.forEach(t),Bdo=i(ve),Lh=n(ve,"LI",{});var bCe=s(Lh);Aae=n(bCe,"STRONG",{});var DQr=s(Aae);Pdo=r(DQr,"layoutxlm"),DQr.forEach(t),Ido=r(bCe," \u2014 "),FP=n(bCe,"A",{href:!0});var GQr=s(FP);qdo=r(GQr,"LayoutXLMProcessor"),GQr.forEach(t),Ndo=r(bCe," (LayoutXLM model)"),bCe.forEach(t),jdo=i(ve),xh=n(ve,"LI",{});var vCe=s(xh);yae=n(vCe,"STRONG",{});var OQr=s(yae);Ddo=r(OQr,"sew"),OQr.forEach(t),Gdo=r(vCe," \u2014 "),TP=n(vCe,"A",{href:!0});var VQr=s(TP);Odo=r(VQr,"Wav2Vec2Processor"),VQr.forEach(t),Vdo=r(vCe," (SEW model)"),vCe.forEach(t),Xdo=i(ve),$h=n(ve,"LI",{});var FCe=s($h);Lae=n(FCe,"STRONG",{});var XQr=s(Lae);zdo=r(XQr,"sew-d"),XQr.forEach(t),Qdo=r(FCe," \u2014 "),MP=n(FCe,"A",{href:!0});var zQr=s(MP);Wdo=r(zQr,"Wav2Vec2Processor"),zQr.forEach(t),Hdo=r(FCe," (SEW-D model)"),FCe.forEach(t),Udo=i(ve),kh=n(ve,"LI",{});var TCe=s(kh);xae=n(TCe,"STRONG",{});var QQr=s(xae);Jdo=r(QQr,"speech_to_text"),QQr.forEach(t),Ydo=r(TCe," \u2014 "),EP=n(TCe,"A",{href:!0});var WQr=s(EP);Kdo=r(WQr,"Speech2TextProcessor"),WQr.forEach(t),Zdo=r(TCe," (Speech2Text model)"),TCe.forEach(t),eco=i(ve),Sh=n(ve,"LI",{});var MCe=s(Sh);$ae=n(MCe,"STRONG",{});var HQr=s($ae);oco=r(HQr,"speech_to_text_2"),HQr.forEach(t),rco=r(MCe," \u2014 "),CP=n(MCe,"A",{href:!0});var UQr=s(CP);tco=r(UQr,"Speech2Text2Processor"),UQr.forEach(t),aco=r(MCe," (Speech2Text2 model)"),MCe.forEach(t),nco=i(ve),Rh=n(ve,"LI",{});var ECe=s(Rh);kae=n(ECe,"STRONG",{});var JQr=s(kae);sco=r(JQr,"trocr"),JQr.forEach(t),lco=r(ECe," \u2014 "),wP=n(ECe,"A",{href:!0});var YQr=s(wP);ico=r(YQr,"TrOCRProcessor"),YQr.forEach(t),dco=r(ECe," (TrOCR model)"),ECe.forEach(t),cco=i(ve),Bh=n(ve,"LI",{});var CCe=s(Bh);Sae=n(CCe,"STRONG",{});var KQr=s(Sae);fco=r(KQr,"unispeech"),KQr.forEach(t),mco=r(CCe," \u2014 "),AP=n(CCe,"A",{href:!0});var ZQr=s(AP);gco=r(ZQr,"Wav2Vec2Processor"),ZQr.forEach(t),hco=r(CCe," (UniSpeech model)"),CCe.forEach(t),pco=i(ve),Ph=n(ve,"LI",{});var wCe=s(Ph);Rae=n(wCe,"STRONG",{});var eWr=s(Rae);uco=r(eWr,"unispeech-sat"),eWr.forEach(t),_co=r(wCe," \u2014 "),yP=n(wCe,"A",{href:!0});var oWr=s(yP);bco=r(oWr,"Wav2Vec2Processor"),oWr.forEach(t),vco=r(wCe," (UniSpeechSat model)"),wCe.forEach(t),Fco=i(ve),Ih=n(ve,"LI",{});var ACe=s(Ih);Bae=n(ACe,"STRONG",{});var rWr=s(Bae);Tco=r(rWr,"vilt"),rWr.forEach(t),Mco=r(ACe," \u2014 "),LP=n(ACe,"A",{href:!0});var tWr=s(LP);Eco=r(tWr,"ViltProcessor"),tWr.forEach(t),Cco=r(ACe," (ViLT model)"),ACe.forEach(t),wco=i(ve),qh=n(ve,"LI",{});var yCe=s(qh);Pae=n(yCe,"STRONG",{});var aWr=s(Pae);Aco=r(aWr,"vision-text-dual-encoder"),aWr.forEach(t),yco=r(yCe," \u2014 "),xP=n(yCe,"A",{href:!0});var nWr=s(xP);Lco=r(nWr,"VisionTextDualEncoderProcessor"),nWr.forEach(t),xco=r(yCe," (VisionTextDualEncoder model)"),yCe.forEach(t),$co=i(ve),Nh=n(ve,"LI",{});var LCe=s(Nh);Iae=n(LCe,"STRONG",{});var sWr=s(Iae);kco=r(sWr,"wav2vec2"),sWr.forEach(t),Sco=r(LCe," \u2014 "),$P=n(LCe,"A",{href:!0});var lWr=s($P);Rco=r(lWr,"Wav2Vec2Processor"),lWr.forEach(t),Bco=r(LCe," (Wav2Vec2 model)"),LCe.forEach(t),Pco=i(ve),jh=n(ve,"LI",{});var xCe=s(jh);qae=n(xCe,"STRONG",{});var iWr=s(qae);Ico=r(iWr,"wavlm"),iWr.forEach(t),qco=r(xCe," \u2014 "),kP=n(xCe,"A",{href:!0});var dWr=s(kP);Nco=r(dWr,"Wav2Vec2Processor"),dWr.forEach(t),jco=r(xCe," (WavLM model)"),xCe.forEach(t),ve.forEach(t),Dco=i(Kt),T(Dh.$$.fragment,Kt),Gco=i(Kt),T(Gh.$$.fragment,Kt),Kt.forEach(t),Oco=i(Ns),Oh=n(Ns,"DIV",{class:!0});var Vqe=s(Oh);T(bA.$$.fragment,Vqe),Vco=i(Vqe),Nae=n(Vqe,"P",{});var cWr=s(Nae);Xco=r(cWr,"Register a new processor for this class."),cWr.forEach(t),Vqe.forEach(t),Ns.forEach(t),DPe=i(f),Ti=n(f,"H2",{class:!0});var Xqe=s(Ti);Vh=n(Xqe,"A",{id:!0,class:!0,href:!0});var fWr=s(Vh);jae=n(fWr,"SPAN",{});var mWr=s(jae);T(vA.$$.fragment,mWr),mWr.forEach(t),fWr.forEach(t),zco=i(Xqe),Dae=n(Xqe,"SPAN",{});var gWr=s(Dae);Qco=r(gWr,"AutoModel"),gWr.forEach(t),Xqe.forEach(t),GPe=i(f),Lo=n(f,"DIV",{class:!0});var js=s(Lo);T(FA.$$.fragment,js),Wco=i(js),Mi=n(js,"P",{});var eK=s(Mi);Hco=r(eK,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),SP=n(eK,"A",{href:!0});var hWr=s(SP);Uco=r(hWr,"from_pretrained()"),hWr.forEach(t),Jco=r(eK," class method or the "),RP=n(eK,"A",{href:!0});var pWr=s(RP);Yco=r(pWr,"from_config()"),pWr.forEach(t),Kco=r(eK,` class
method.`),eK.forEach(t),Zco=i(js),TA=n(js,"P",{});var zqe=s(TA);efo=r(zqe,"This class cannot be instantiated directly using "),Gae=n(zqe,"CODE",{});var uWr=s(Gae);ofo=r(uWr,"__init__()"),uWr.forEach(t),rfo=r(zqe," (throws an error)."),zqe.forEach(t),tfo=i(js),ot=n(js,"DIV",{class:!0});var JC=s(ot);T(MA.$$.fragment,JC),afo=i(JC),Oae=n(JC,"P",{});var _Wr=s(Oae);nfo=r(_Wr,"Instantiates one of the base model classes of the library from a configuration."),_Wr.forEach(t),sfo=i(JC),Ei=n(JC,"P",{});var oK=s(Ei);lfo=r(oK,`Note:
Loading a model from its configuration file does `),Vae=n(oK,"STRONG",{});var bWr=s(Vae);ifo=r(bWr,"not"),bWr.forEach(t),dfo=r(oK,` load the model weights. It only affects the
model\u2019s configuration. Use `),BP=n(oK,"A",{href:!0});var vWr=s(BP);cfo=r(vWr,"from_pretrained()"),vWr.forEach(t),ffo=r(oK," to load the model weights."),oK.forEach(t),mfo=i(JC),T(Xh.$$.fragment,JC),JC.forEach(t),gfo=i(js),He=n(js,"DIV",{class:!0});var Zt=s(He);T(EA.$$.fragment,Zt),hfo=i(Zt),Xae=n(Zt,"P",{});var FWr=s(Xae);pfo=r(FWr,"Instantiate one of the base model classes of the library from a pretrained model."),FWr.forEach(t),ufo=i(Zt),Aa=n(Zt,"P",{});var YC=s(Aa);_fo=r(YC,"The model class to instantiate is selected based on the "),zae=n(YC,"CODE",{});var TWr=s(zae);bfo=r(TWr,"model_type"),TWr.forEach(t),vfo=r(YC,` property of the config object (either
passed as an argument or loaded from `),Qae=n(YC,"CODE",{});var MWr=s(Qae);Ffo=r(MWr,"pretrained_model_name_or_path"),MWr.forEach(t),Tfo=r(YC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wae=n(YC,"CODE",{});var EWr=s(Wae);Mfo=r(EWr,"pretrained_model_name_or_path"),EWr.forEach(t),Efo=r(YC,":"),YC.forEach(t),Cfo=i(Zt),x=n(Zt,"UL",{});var $=s(x);zh=n($,"LI",{});var $Ce=s(zh);Hae=n($Ce,"STRONG",{});var CWr=s(Hae);wfo=r(CWr,"albert"),CWr.forEach(t),Afo=r($Ce," \u2014 "),PP=n($Ce,"A",{href:!0});var wWr=s(PP);yfo=r(wWr,"AlbertModel"),wWr.forEach(t),Lfo=r($Ce," (ALBERT model)"),$Ce.forEach(t),xfo=i($),Qh=n($,"LI",{});var kCe=s(Qh);Uae=n(kCe,"STRONG",{});var AWr=s(Uae);$fo=r(AWr,"bart"),AWr.forEach(t),kfo=r(kCe," \u2014 "),IP=n(kCe,"A",{href:!0});var yWr=s(IP);Sfo=r(yWr,"BartModel"),yWr.forEach(t),Rfo=r(kCe," (BART model)"),kCe.forEach(t),Bfo=i($),Wh=n($,"LI",{});var SCe=s(Wh);Jae=n(SCe,"STRONG",{});var LWr=s(Jae);Pfo=r(LWr,"beit"),LWr.forEach(t),Ifo=r(SCe," \u2014 "),qP=n(SCe,"A",{href:!0});var xWr=s(qP);qfo=r(xWr,"BeitModel"),xWr.forEach(t),Nfo=r(SCe," (BEiT model)"),SCe.forEach(t),jfo=i($),Hh=n($,"LI",{});var RCe=s(Hh);Yae=n(RCe,"STRONG",{});var $Wr=s(Yae);Dfo=r($Wr,"bert"),$Wr.forEach(t),Gfo=r(RCe," \u2014 "),NP=n(RCe,"A",{href:!0});var kWr=s(NP);Ofo=r(kWr,"BertModel"),kWr.forEach(t),Vfo=r(RCe," (BERT model)"),RCe.forEach(t),Xfo=i($),Uh=n($,"LI",{});var BCe=s(Uh);Kae=n(BCe,"STRONG",{});var SWr=s(Kae);zfo=r(SWr,"bert-generation"),SWr.forEach(t),Qfo=r(BCe," \u2014 "),jP=n(BCe,"A",{href:!0});var RWr=s(jP);Wfo=r(RWr,"BertGenerationEncoder"),RWr.forEach(t),Hfo=r(BCe," (Bert Generation model)"),BCe.forEach(t),Ufo=i($),Jh=n($,"LI",{});var PCe=s(Jh);Zae=n(PCe,"STRONG",{});var BWr=s(Zae);Jfo=r(BWr,"big_bird"),BWr.forEach(t),Yfo=r(PCe," \u2014 "),DP=n(PCe,"A",{href:!0});var PWr=s(DP);Kfo=r(PWr,"BigBirdModel"),PWr.forEach(t),Zfo=r(PCe," (BigBird model)"),PCe.forEach(t),emo=i($),Yh=n($,"LI",{});var ICe=s(Yh);ene=n(ICe,"STRONG",{});var IWr=s(ene);omo=r(IWr,"bigbird_pegasus"),IWr.forEach(t),rmo=r(ICe," \u2014 "),GP=n(ICe,"A",{href:!0});var qWr=s(GP);tmo=r(qWr,"BigBirdPegasusModel"),qWr.forEach(t),amo=r(ICe," (BigBirdPegasus model)"),ICe.forEach(t),nmo=i($),Kh=n($,"LI",{});var qCe=s(Kh);one=n(qCe,"STRONG",{});var NWr=s(one);smo=r(NWr,"blenderbot"),NWr.forEach(t),lmo=r(qCe," \u2014 "),OP=n(qCe,"A",{href:!0});var jWr=s(OP);imo=r(jWr,"BlenderbotModel"),jWr.forEach(t),dmo=r(qCe," (Blenderbot model)"),qCe.forEach(t),cmo=i($),Zh=n($,"LI",{});var NCe=s(Zh);rne=n(NCe,"STRONG",{});var DWr=s(rne);fmo=r(DWr,"blenderbot-small"),DWr.forEach(t),mmo=r(NCe," \u2014 "),VP=n(NCe,"A",{href:!0});var GWr=s(VP);gmo=r(GWr,"BlenderbotSmallModel"),GWr.forEach(t),hmo=r(NCe," (BlenderbotSmall model)"),NCe.forEach(t),pmo=i($),ep=n($,"LI",{});var jCe=s(ep);tne=n(jCe,"STRONG",{});var OWr=s(tne);umo=r(OWr,"camembert"),OWr.forEach(t),_mo=r(jCe," \u2014 "),XP=n(jCe,"A",{href:!0});var VWr=s(XP);bmo=r(VWr,"CamembertModel"),VWr.forEach(t),vmo=r(jCe," (CamemBERT model)"),jCe.forEach(t),Fmo=i($),op=n($,"LI",{});var DCe=s(op);ane=n(DCe,"STRONG",{});var XWr=s(ane);Tmo=r(XWr,"canine"),XWr.forEach(t),Mmo=r(DCe," \u2014 "),zP=n(DCe,"A",{href:!0});var zWr=s(zP);Emo=r(zWr,"CanineModel"),zWr.forEach(t),Cmo=r(DCe," (Canine model)"),DCe.forEach(t),wmo=i($),rp=n($,"LI",{});var GCe=s(rp);nne=n(GCe,"STRONG",{});var QWr=s(nne);Amo=r(QWr,"clip"),QWr.forEach(t),ymo=r(GCe," \u2014 "),QP=n(GCe,"A",{href:!0});var WWr=s(QP);Lmo=r(WWr,"CLIPModel"),WWr.forEach(t),xmo=r(GCe," (CLIP model)"),GCe.forEach(t),$mo=i($),tp=n($,"LI",{});var OCe=s(tp);sne=n(OCe,"STRONG",{});var HWr=s(sne);kmo=r(HWr,"convbert"),HWr.forEach(t),Smo=r(OCe," \u2014 "),WP=n(OCe,"A",{href:!0});var UWr=s(WP);Rmo=r(UWr,"ConvBertModel"),UWr.forEach(t),Bmo=r(OCe," (ConvBERT model)"),OCe.forEach(t),Pmo=i($),ap=n($,"LI",{});var VCe=s(ap);lne=n(VCe,"STRONG",{});var JWr=s(lne);Imo=r(JWr,"convnext"),JWr.forEach(t),qmo=r(VCe," \u2014 "),HP=n(VCe,"A",{href:!0});var YWr=s(HP);Nmo=r(YWr,"ConvNextModel"),YWr.forEach(t),jmo=r(VCe," (ConvNext model)"),VCe.forEach(t),Dmo=i($),np=n($,"LI",{});var XCe=s(np);ine=n(XCe,"STRONG",{});var KWr=s(ine);Gmo=r(KWr,"ctrl"),KWr.forEach(t),Omo=r(XCe," \u2014 "),UP=n(XCe,"A",{href:!0});var ZWr=s(UP);Vmo=r(ZWr,"CTRLModel"),ZWr.forEach(t),Xmo=r(XCe," (CTRL model)"),XCe.forEach(t),zmo=i($),sp=n($,"LI",{});var zCe=s(sp);dne=n(zCe,"STRONG",{});var eHr=s(dne);Qmo=r(eHr,"data2vec-audio"),eHr.forEach(t),Wmo=r(zCe," \u2014 "),JP=n(zCe,"A",{href:!0});var oHr=s(JP);Hmo=r(oHr,"Data2VecAudioModel"),oHr.forEach(t),Umo=r(zCe," (Data2VecAudio model)"),zCe.forEach(t),Jmo=i($),lp=n($,"LI",{});var QCe=s(lp);cne=n(QCe,"STRONG",{});var rHr=s(cne);Ymo=r(rHr,"data2vec-text"),rHr.forEach(t),Kmo=r(QCe," \u2014 "),YP=n(QCe,"A",{href:!0});var tHr=s(YP);Zmo=r(tHr,"Data2VecTextModel"),tHr.forEach(t),ego=r(QCe," (Data2VecText model)"),QCe.forEach(t),ogo=i($),ip=n($,"LI",{});var WCe=s(ip);fne=n(WCe,"STRONG",{});var aHr=s(fne);rgo=r(aHr,"data2vec-vision"),aHr.forEach(t),tgo=r(WCe," \u2014 "),KP=n(WCe,"A",{href:!0});var nHr=s(KP);ago=r(nHr,"Data2VecVisionModel"),nHr.forEach(t),ngo=r(WCe," (Data2VecVision model)"),WCe.forEach(t),sgo=i($),dp=n($,"LI",{});var HCe=s(dp);mne=n(HCe,"STRONG",{});var sHr=s(mne);lgo=r(sHr,"deberta"),sHr.forEach(t),igo=r(HCe," \u2014 "),ZP=n(HCe,"A",{href:!0});var lHr=s(ZP);dgo=r(lHr,"DebertaModel"),lHr.forEach(t),cgo=r(HCe," (DeBERTa model)"),HCe.forEach(t),fgo=i($),cp=n($,"LI",{});var UCe=s(cp);gne=n(UCe,"STRONG",{});var iHr=s(gne);mgo=r(iHr,"deberta-v2"),iHr.forEach(t),ggo=r(UCe," \u2014 "),eI=n(UCe,"A",{href:!0});var dHr=s(eI);hgo=r(dHr,"DebertaV2Model"),dHr.forEach(t),pgo=r(UCe," (DeBERTa-v2 model)"),UCe.forEach(t),ugo=i($),fp=n($,"LI",{});var JCe=s(fp);hne=n(JCe,"STRONG",{});var cHr=s(hne);_go=r(cHr,"decision_transformer"),cHr.forEach(t),bgo=r(JCe," \u2014 "),oI=n(JCe,"A",{href:!0});var fHr=s(oI);vgo=r(fHr,"DecisionTransformerModel"),fHr.forEach(t),Fgo=r(JCe," (Decision Transformer model)"),JCe.forEach(t),Tgo=i($),mp=n($,"LI",{});var YCe=s(mp);pne=n(YCe,"STRONG",{});var mHr=s(pne);Mgo=r(mHr,"deit"),mHr.forEach(t),Ego=r(YCe," \u2014 "),rI=n(YCe,"A",{href:!0});var gHr=s(rI);Cgo=r(gHr,"DeiTModel"),gHr.forEach(t),wgo=r(YCe," (DeiT model)"),YCe.forEach(t),Ago=i($),gp=n($,"LI",{});var KCe=s(gp);une=n(KCe,"STRONG",{});var hHr=s(une);ygo=r(hHr,"detr"),hHr.forEach(t),Lgo=r(KCe," \u2014 "),tI=n(KCe,"A",{href:!0});var pHr=s(tI);xgo=r(pHr,"DetrModel"),pHr.forEach(t),$go=r(KCe," (DETR model)"),KCe.forEach(t),kgo=i($),hp=n($,"LI",{});var ZCe=s(hp);_ne=n(ZCe,"STRONG",{});var uHr=s(_ne);Sgo=r(uHr,"distilbert"),uHr.forEach(t),Rgo=r(ZCe," \u2014 "),aI=n(ZCe,"A",{href:!0});var _Hr=s(aI);Bgo=r(_Hr,"DistilBertModel"),_Hr.forEach(t),Pgo=r(ZCe," (DistilBERT model)"),ZCe.forEach(t),Igo=i($),pp=n($,"LI",{});var e3e=s(pp);bne=n(e3e,"STRONG",{});var bHr=s(bne);qgo=r(bHr,"dpr"),bHr.forEach(t),Ngo=r(e3e," \u2014 "),nI=n(e3e,"A",{href:!0});var vHr=s(nI);jgo=r(vHr,"DPRQuestionEncoder"),vHr.forEach(t),Dgo=r(e3e," (DPR model)"),e3e.forEach(t),Ggo=i($),up=n($,"LI",{});var o3e=s(up);vne=n(o3e,"STRONG",{});var FHr=s(vne);Ogo=r(FHr,"dpt"),FHr.forEach(t),Vgo=r(o3e," \u2014 "),sI=n(o3e,"A",{href:!0});var THr=s(sI);Xgo=r(THr,"DPTModel"),THr.forEach(t),zgo=r(o3e," (DPT model)"),o3e.forEach(t),Qgo=i($),_p=n($,"LI",{});var r3e=s(_p);Fne=n(r3e,"STRONG",{});var MHr=s(Fne);Wgo=r(MHr,"electra"),MHr.forEach(t),Hgo=r(r3e," \u2014 "),lI=n(r3e,"A",{href:!0});var EHr=s(lI);Ugo=r(EHr,"ElectraModel"),EHr.forEach(t),Jgo=r(r3e," (ELECTRA model)"),r3e.forEach(t),Ygo=i($),bp=n($,"LI",{});var t3e=s(bp);Tne=n(t3e,"STRONG",{});var CHr=s(Tne);Kgo=r(CHr,"flaubert"),CHr.forEach(t),Zgo=r(t3e," \u2014 "),iI=n(t3e,"A",{href:!0});var wHr=s(iI);eho=r(wHr,"FlaubertModel"),wHr.forEach(t),oho=r(t3e," (FlauBERT model)"),t3e.forEach(t),rho=i($),vp=n($,"LI",{});var a3e=s(vp);Mne=n(a3e,"STRONG",{});var AHr=s(Mne);tho=r(AHr,"flava"),AHr.forEach(t),aho=r(a3e," \u2014 "),dI=n(a3e,"A",{href:!0});var yHr=s(dI);nho=r(yHr,"FlavaModel"),yHr.forEach(t),sho=r(a3e," (Flava model)"),a3e.forEach(t),lho=i($),Fp=n($,"LI",{});var n3e=s(Fp);Ene=n(n3e,"STRONG",{});var LHr=s(Ene);iho=r(LHr,"fnet"),LHr.forEach(t),dho=r(n3e," \u2014 "),cI=n(n3e,"A",{href:!0});var xHr=s(cI);cho=r(xHr,"FNetModel"),xHr.forEach(t),fho=r(n3e," (FNet model)"),n3e.forEach(t),mho=i($),Tp=n($,"LI",{});var s3e=s(Tp);Cne=n(s3e,"STRONG",{});var $Hr=s(Cne);gho=r($Hr,"fsmt"),$Hr.forEach(t),hho=r(s3e," \u2014 "),fI=n(s3e,"A",{href:!0});var kHr=s(fI);pho=r(kHr,"FSMTModel"),kHr.forEach(t),uho=r(s3e," (FairSeq Machine-Translation model)"),s3e.forEach(t),_ho=i($),Ss=n($,"LI",{});var l$=s(Ss);wne=n(l$,"STRONG",{});var SHr=s(wne);bho=r(SHr,"funnel"),SHr.forEach(t),vho=r(l$," \u2014 "),mI=n(l$,"A",{href:!0});var RHr=s(mI);Fho=r(RHr,"FunnelModel"),RHr.forEach(t),Tho=r(l$," or "),gI=n(l$,"A",{href:!0});var BHr=s(gI);Mho=r(BHr,"FunnelBaseModel"),BHr.forEach(t),Eho=r(l$," (Funnel Transformer model)"),l$.forEach(t),Cho=i($),Mp=n($,"LI",{});var l3e=s(Mp);Ane=n(l3e,"STRONG",{});var PHr=s(Ane);who=r(PHr,"glpn"),PHr.forEach(t),Aho=r(l3e," \u2014 "),hI=n(l3e,"A",{href:!0});var IHr=s(hI);yho=r(IHr,"GLPNModel"),IHr.forEach(t),Lho=r(l3e," (GLPN model)"),l3e.forEach(t),xho=i($),Ep=n($,"LI",{});var i3e=s(Ep);yne=n(i3e,"STRONG",{});var qHr=s(yne);$ho=r(qHr,"gpt2"),qHr.forEach(t),kho=r(i3e," \u2014 "),pI=n(i3e,"A",{href:!0});var NHr=s(pI);Sho=r(NHr,"GPT2Model"),NHr.forEach(t),Rho=r(i3e," (OpenAI GPT-2 model)"),i3e.forEach(t),Bho=i($),Cp=n($,"LI",{});var d3e=s(Cp);Lne=n(d3e,"STRONG",{});var jHr=s(Lne);Pho=r(jHr,"gpt_neo"),jHr.forEach(t),Iho=r(d3e," \u2014 "),uI=n(d3e,"A",{href:!0});var DHr=s(uI);qho=r(DHr,"GPTNeoModel"),DHr.forEach(t),Nho=r(d3e," (GPT Neo model)"),d3e.forEach(t),jho=i($),wp=n($,"LI",{});var c3e=s(wp);xne=n(c3e,"STRONG",{});var GHr=s(xne);Dho=r(GHr,"gptj"),GHr.forEach(t),Gho=r(c3e," \u2014 "),_I=n(c3e,"A",{href:!0});var OHr=s(_I);Oho=r(OHr,"GPTJModel"),OHr.forEach(t),Vho=r(c3e," (GPT-J model)"),c3e.forEach(t),Xho=i($),Ap=n($,"LI",{});var f3e=s(Ap);$ne=n(f3e,"STRONG",{});var VHr=s($ne);zho=r(VHr,"hubert"),VHr.forEach(t),Qho=r(f3e," \u2014 "),bI=n(f3e,"A",{href:!0});var XHr=s(bI);Who=r(XHr,"HubertModel"),XHr.forEach(t),Hho=r(f3e," (Hubert model)"),f3e.forEach(t),Uho=i($),yp=n($,"LI",{});var m3e=s(yp);kne=n(m3e,"STRONG",{});var zHr=s(kne);Jho=r(zHr,"ibert"),zHr.forEach(t),Yho=r(m3e," \u2014 "),vI=n(m3e,"A",{href:!0});var QHr=s(vI);Kho=r(QHr,"IBertModel"),QHr.forEach(t),Zho=r(m3e," (I-BERT model)"),m3e.forEach(t),epo=i($),Lp=n($,"LI",{});var g3e=s(Lp);Sne=n(g3e,"STRONG",{});var WHr=s(Sne);opo=r(WHr,"imagegpt"),WHr.forEach(t),rpo=r(g3e," \u2014 "),FI=n(g3e,"A",{href:!0});var HHr=s(FI);tpo=r(HHr,"ImageGPTModel"),HHr.forEach(t),apo=r(g3e," (ImageGPT model)"),g3e.forEach(t),npo=i($),xp=n($,"LI",{});var h3e=s(xp);Rne=n(h3e,"STRONG",{});var UHr=s(Rne);spo=r(UHr,"layoutlm"),UHr.forEach(t),lpo=r(h3e," \u2014 "),TI=n(h3e,"A",{href:!0});var JHr=s(TI);ipo=r(JHr,"LayoutLMModel"),JHr.forEach(t),dpo=r(h3e," (LayoutLM model)"),h3e.forEach(t),cpo=i($),$p=n($,"LI",{});var p3e=s($p);Bne=n(p3e,"STRONG",{});var YHr=s(Bne);fpo=r(YHr,"layoutlmv2"),YHr.forEach(t),mpo=r(p3e," \u2014 "),MI=n(p3e,"A",{href:!0});var KHr=s(MI);gpo=r(KHr,"LayoutLMv2Model"),KHr.forEach(t),hpo=r(p3e," (LayoutLMv2 model)"),p3e.forEach(t),ppo=i($),kp=n($,"LI",{});var u3e=s(kp);Pne=n(u3e,"STRONG",{});var ZHr=s(Pne);upo=r(ZHr,"led"),ZHr.forEach(t),_po=r(u3e," \u2014 "),EI=n(u3e,"A",{href:!0});var eUr=s(EI);bpo=r(eUr,"LEDModel"),eUr.forEach(t),vpo=r(u3e," (LED model)"),u3e.forEach(t),Fpo=i($),Sp=n($,"LI",{});var _3e=s(Sp);Ine=n(_3e,"STRONG",{});var oUr=s(Ine);Tpo=r(oUr,"longformer"),oUr.forEach(t),Mpo=r(_3e," \u2014 "),CI=n(_3e,"A",{href:!0});var rUr=s(CI);Epo=r(rUr,"LongformerModel"),rUr.forEach(t),Cpo=r(_3e," (Longformer model)"),_3e.forEach(t),wpo=i($),Rp=n($,"LI",{});var b3e=s(Rp);qne=n(b3e,"STRONG",{});var tUr=s(qne);Apo=r(tUr,"luke"),tUr.forEach(t),ypo=r(b3e," \u2014 "),wI=n(b3e,"A",{href:!0});var aUr=s(wI);Lpo=r(aUr,"LukeModel"),aUr.forEach(t),xpo=r(b3e," (LUKE model)"),b3e.forEach(t),$po=i($),Bp=n($,"LI",{});var v3e=s(Bp);Nne=n(v3e,"STRONG",{});var nUr=s(Nne);kpo=r(nUr,"lxmert"),nUr.forEach(t),Spo=r(v3e," \u2014 "),AI=n(v3e,"A",{href:!0});var sUr=s(AI);Rpo=r(sUr,"LxmertModel"),sUr.forEach(t),Bpo=r(v3e," (LXMERT model)"),v3e.forEach(t),Ppo=i($),Pp=n($,"LI",{});var F3e=s(Pp);jne=n(F3e,"STRONG",{});var lUr=s(jne);Ipo=r(lUr,"m2m_100"),lUr.forEach(t),qpo=r(F3e," \u2014 "),yI=n(F3e,"A",{href:!0});var iUr=s(yI);Npo=r(iUr,"M2M100Model"),iUr.forEach(t),jpo=r(F3e," (M2M100 model)"),F3e.forEach(t),Dpo=i($),Ip=n($,"LI",{});var T3e=s(Ip);Dne=n(T3e,"STRONG",{});var dUr=s(Dne);Gpo=r(dUr,"marian"),dUr.forEach(t),Opo=r(T3e," \u2014 "),LI=n(T3e,"A",{href:!0});var cUr=s(LI);Vpo=r(cUr,"MarianModel"),cUr.forEach(t),Xpo=r(T3e," (Marian model)"),T3e.forEach(t),zpo=i($),qp=n($,"LI",{});var M3e=s(qp);Gne=n(M3e,"STRONG",{});var fUr=s(Gne);Qpo=r(fUr,"maskformer"),fUr.forEach(t),Wpo=r(M3e," \u2014 "),xI=n(M3e,"A",{href:!0});var mUr=s(xI);Hpo=r(mUr,"MaskFormerModel"),mUr.forEach(t),Upo=r(M3e," (MaskFormer model)"),M3e.forEach(t),Jpo=i($),Np=n($,"LI",{});var E3e=s(Np);One=n(E3e,"STRONG",{});var gUr=s(One);Ypo=r(gUr,"mbart"),gUr.forEach(t),Kpo=r(E3e," \u2014 "),$I=n(E3e,"A",{href:!0});var hUr=s($I);Zpo=r(hUr,"MBartModel"),hUr.forEach(t),euo=r(E3e," (mBART model)"),E3e.forEach(t),ouo=i($),jp=n($,"LI",{});var C3e=s(jp);Vne=n(C3e,"STRONG",{});var pUr=s(Vne);ruo=r(pUr,"megatron-bert"),pUr.forEach(t),tuo=r(C3e," \u2014 "),kI=n(C3e,"A",{href:!0});var uUr=s(kI);auo=r(uUr,"MegatronBertModel"),uUr.forEach(t),nuo=r(C3e," (MegatronBert model)"),C3e.forEach(t),suo=i($),Dp=n($,"LI",{});var w3e=s(Dp);Xne=n(w3e,"STRONG",{});var _Ur=s(Xne);luo=r(_Ur,"mobilebert"),_Ur.forEach(t),iuo=r(w3e," \u2014 "),SI=n(w3e,"A",{href:!0});var bUr=s(SI);duo=r(bUr,"MobileBertModel"),bUr.forEach(t),cuo=r(w3e," (MobileBERT model)"),w3e.forEach(t),fuo=i($),Gp=n($,"LI",{});var A3e=s(Gp);zne=n(A3e,"STRONG",{});var vUr=s(zne);muo=r(vUr,"mpnet"),vUr.forEach(t),guo=r(A3e," \u2014 "),RI=n(A3e,"A",{href:!0});var FUr=s(RI);huo=r(FUr,"MPNetModel"),FUr.forEach(t),puo=r(A3e," (MPNet model)"),A3e.forEach(t),uuo=i($),Op=n($,"LI",{});var y3e=s(Op);Qne=n(y3e,"STRONG",{});var TUr=s(Qne);_uo=r(TUr,"mt5"),TUr.forEach(t),buo=r(y3e," \u2014 "),BI=n(y3e,"A",{href:!0});var MUr=s(BI);vuo=r(MUr,"MT5Model"),MUr.forEach(t),Fuo=r(y3e," (mT5 model)"),y3e.forEach(t),Tuo=i($),Vp=n($,"LI",{});var L3e=s(Vp);Wne=n(L3e,"STRONG",{});var EUr=s(Wne);Muo=r(EUr,"nystromformer"),EUr.forEach(t),Euo=r(L3e," \u2014 "),PI=n(L3e,"A",{href:!0});var CUr=s(PI);Cuo=r(CUr,"NystromformerModel"),CUr.forEach(t),wuo=r(L3e," (Nystromformer model)"),L3e.forEach(t),Auo=i($),Xp=n($,"LI",{});var x3e=s(Xp);Hne=n(x3e,"STRONG",{});var wUr=s(Hne);yuo=r(wUr,"openai-gpt"),wUr.forEach(t),Luo=r(x3e," \u2014 "),II=n(x3e,"A",{href:!0});var AUr=s(II);xuo=r(AUr,"OpenAIGPTModel"),AUr.forEach(t),$uo=r(x3e," (OpenAI GPT model)"),x3e.forEach(t),kuo=i($),zp=n($,"LI",{});var $3e=s(zp);Une=n($3e,"STRONG",{});var yUr=s(Une);Suo=r(yUr,"pegasus"),yUr.forEach(t),Ruo=r($3e," \u2014 "),qI=n($3e,"A",{href:!0});var LUr=s(qI);Buo=r(LUr,"PegasusModel"),LUr.forEach(t),Puo=r($3e," (Pegasus model)"),$3e.forEach(t),Iuo=i($),Qp=n($,"LI",{});var k3e=s(Qp);Jne=n(k3e,"STRONG",{});var xUr=s(Jne);quo=r(xUr,"perceiver"),xUr.forEach(t),Nuo=r(k3e," \u2014 "),NI=n(k3e,"A",{href:!0});var $Ur=s(NI);juo=r($Ur,"PerceiverModel"),$Ur.forEach(t),Duo=r(k3e," (Perceiver model)"),k3e.forEach(t),Guo=i($),Wp=n($,"LI",{});var S3e=s(Wp);Yne=n(S3e,"STRONG",{});var kUr=s(Yne);Ouo=r(kUr,"plbart"),kUr.forEach(t),Vuo=r(S3e," \u2014 "),jI=n(S3e,"A",{href:!0});var SUr=s(jI);Xuo=r(SUr,"PLBartModel"),SUr.forEach(t),zuo=r(S3e," (PLBart model)"),S3e.forEach(t),Quo=i($),Hp=n($,"LI",{});var R3e=s(Hp);Kne=n(R3e,"STRONG",{});var RUr=s(Kne);Wuo=r(RUr,"poolformer"),RUr.forEach(t),Huo=r(R3e," \u2014 "),DI=n(R3e,"A",{href:!0});var BUr=s(DI);Uuo=r(BUr,"PoolFormerModel"),BUr.forEach(t),Juo=r(R3e," (PoolFormer model)"),R3e.forEach(t),Yuo=i($),Up=n($,"LI",{});var B3e=s(Up);Zne=n(B3e,"STRONG",{});var PUr=s(Zne);Kuo=r(PUr,"prophetnet"),PUr.forEach(t),Zuo=r(B3e," \u2014 "),GI=n(B3e,"A",{href:!0});var IUr=s(GI);e_o=r(IUr,"ProphetNetModel"),IUr.forEach(t),o_o=r(B3e," (ProphetNet model)"),B3e.forEach(t),r_o=i($),Jp=n($,"LI",{});var P3e=s(Jp);ese=n(P3e,"STRONG",{});var qUr=s(ese);t_o=r(qUr,"qdqbert"),qUr.forEach(t),a_o=r(P3e," \u2014 "),OI=n(P3e,"A",{href:!0});var NUr=s(OI);n_o=r(NUr,"QDQBertModel"),NUr.forEach(t),s_o=r(P3e," (QDQBert model)"),P3e.forEach(t),l_o=i($),Yp=n($,"LI",{});var I3e=s(Yp);ose=n(I3e,"STRONG",{});var jUr=s(ose);i_o=r(jUr,"reformer"),jUr.forEach(t),d_o=r(I3e," \u2014 "),VI=n(I3e,"A",{href:!0});var DUr=s(VI);c_o=r(DUr,"ReformerModel"),DUr.forEach(t),f_o=r(I3e," (Reformer model)"),I3e.forEach(t),m_o=i($),Kp=n($,"LI",{});var q3e=s(Kp);rse=n(q3e,"STRONG",{});var GUr=s(rse);g_o=r(GUr,"regnet"),GUr.forEach(t),h_o=r(q3e," \u2014 "),XI=n(q3e,"A",{href:!0});var OUr=s(XI);p_o=r(OUr,"RegNetModel"),OUr.forEach(t),u_o=r(q3e," (RegNet model)"),q3e.forEach(t),__o=i($),Zp=n($,"LI",{});var N3e=s(Zp);tse=n(N3e,"STRONG",{});var VUr=s(tse);b_o=r(VUr,"rembert"),VUr.forEach(t),v_o=r(N3e," \u2014 "),zI=n(N3e,"A",{href:!0});var XUr=s(zI);F_o=r(XUr,"RemBertModel"),XUr.forEach(t),T_o=r(N3e," (RemBERT model)"),N3e.forEach(t),M_o=i($),eu=n($,"LI",{});var j3e=s(eu);ase=n(j3e,"STRONG",{});var zUr=s(ase);E_o=r(zUr,"resnet"),zUr.forEach(t),C_o=r(j3e," \u2014 "),QI=n(j3e,"A",{href:!0});var QUr=s(QI);w_o=r(QUr,"ResNetModel"),QUr.forEach(t),A_o=r(j3e," (ResNet model)"),j3e.forEach(t),y_o=i($),ou=n($,"LI",{});var D3e=s(ou);nse=n(D3e,"STRONG",{});var WUr=s(nse);L_o=r(WUr,"retribert"),WUr.forEach(t),x_o=r(D3e," \u2014 "),WI=n(D3e,"A",{href:!0});var HUr=s(WI);$_o=r(HUr,"RetriBertModel"),HUr.forEach(t),k_o=r(D3e," (RetriBERT model)"),D3e.forEach(t),S_o=i($),ru=n($,"LI",{});var G3e=s(ru);sse=n(G3e,"STRONG",{});var UUr=s(sse);R_o=r(UUr,"roberta"),UUr.forEach(t),B_o=r(G3e," \u2014 "),HI=n(G3e,"A",{href:!0});var JUr=s(HI);P_o=r(JUr,"RobertaModel"),JUr.forEach(t),I_o=r(G3e," (RoBERTa model)"),G3e.forEach(t),q_o=i($),tu=n($,"LI",{});var O3e=s(tu);lse=n(O3e,"STRONG",{});var YUr=s(lse);N_o=r(YUr,"roformer"),YUr.forEach(t),j_o=r(O3e," \u2014 "),UI=n(O3e,"A",{href:!0});var KUr=s(UI);D_o=r(KUr,"RoFormerModel"),KUr.forEach(t),G_o=r(O3e," (RoFormer model)"),O3e.forEach(t),O_o=i($),au=n($,"LI",{});var V3e=s(au);ise=n(V3e,"STRONG",{});var ZUr=s(ise);V_o=r(ZUr,"segformer"),ZUr.forEach(t),X_o=r(V3e," \u2014 "),JI=n(V3e,"A",{href:!0});var eJr=s(JI);z_o=r(eJr,"SegformerModel"),eJr.forEach(t),Q_o=r(V3e," (SegFormer model)"),V3e.forEach(t),W_o=i($),nu=n($,"LI",{});var X3e=s(nu);dse=n(X3e,"STRONG",{});var oJr=s(dse);H_o=r(oJr,"sew"),oJr.forEach(t),U_o=r(X3e," \u2014 "),YI=n(X3e,"A",{href:!0});var rJr=s(YI);J_o=r(rJr,"SEWModel"),rJr.forEach(t),Y_o=r(X3e," (SEW model)"),X3e.forEach(t),K_o=i($),su=n($,"LI",{});var z3e=s(su);cse=n(z3e,"STRONG",{});var tJr=s(cse);Z_o=r(tJr,"sew-d"),tJr.forEach(t),e2o=r(z3e," \u2014 "),KI=n(z3e,"A",{href:!0});var aJr=s(KI);o2o=r(aJr,"SEWDModel"),aJr.forEach(t),r2o=r(z3e," (SEW-D model)"),z3e.forEach(t),t2o=i($),lu=n($,"LI",{});var Q3e=s(lu);fse=n(Q3e,"STRONG",{});var nJr=s(fse);a2o=r(nJr,"speech_to_text"),nJr.forEach(t),n2o=r(Q3e," \u2014 "),ZI=n(Q3e,"A",{href:!0});var sJr=s(ZI);s2o=r(sJr,"Speech2TextModel"),sJr.forEach(t),l2o=r(Q3e," (Speech2Text model)"),Q3e.forEach(t),i2o=i($),iu=n($,"LI",{});var W3e=s(iu);mse=n(W3e,"STRONG",{});var lJr=s(mse);d2o=r(lJr,"splinter"),lJr.forEach(t),c2o=r(W3e," \u2014 "),eq=n(W3e,"A",{href:!0});var iJr=s(eq);f2o=r(iJr,"SplinterModel"),iJr.forEach(t),m2o=r(W3e," (Splinter model)"),W3e.forEach(t),g2o=i($),du=n($,"LI",{});var H3e=s(du);gse=n(H3e,"STRONG",{});var dJr=s(gse);h2o=r(dJr,"squeezebert"),dJr.forEach(t),p2o=r(H3e," \u2014 "),oq=n(H3e,"A",{href:!0});var cJr=s(oq);u2o=r(cJr,"SqueezeBertModel"),cJr.forEach(t),_2o=r(H3e," (SqueezeBERT model)"),H3e.forEach(t),b2o=i($),cu=n($,"LI",{});var U3e=s(cu);hse=n(U3e,"STRONG",{});var fJr=s(hse);v2o=r(fJr,"swin"),fJr.forEach(t),F2o=r(U3e," \u2014 "),rq=n(U3e,"A",{href:!0});var mJr=s(rq);T2o=r(mJr,"SwinModel"),mJr.forEach(t),M2o=r(U3e," (Swin model)"),U3e.forEach(t),E2o=i($),fu=n($,"LI",{});var J3e=s(fu);pse=n(J3e,"STRONG",{});var gJr=s(pse);C2o=r(gJr,"t5"),gJr.forEach(t),w2o=r(J3e," \u2014 "),tq=n(J3e,"A",{href:!0});var hJr=s(tq);A2o=r(hJr,"T5Model"),hJr.forEach(t),y2o=r(J3e," (T5 model)"),J3e.forEach(t),L2o=i($),mu=n($,"LI",{});var Y3e=s(mu);use=n(Y3e,"STRONG",{});var pJr=s(use);x2o=r(pJr,"tapas"),pJr.forEach(t),$2o=r(Y3e," \u2014 "),aq=n(Y3e,"A",{href:!0});var uJr=s(aq);k2o=r(uJr,"TapasModel"),uJr.forEach(t),S2o=r(Y3e," (TAPAS model)"),Y3e.forEach(t),R2o=i($),gu=n($,"LI",{});var K3e=s(gu);_se=n(K3e,"STRONG",{});var _Jr=s(_se);B2o=r(_Jr,"transfo-xl"),_Jr.forEach(t),P2o=r(K3e," \u2014 "),nq=n(K3e,"A",{href:!0});var bJr=s(nq);I2o=r(bJr,"TransfoXLModel"),bJr.forEach(t),q2o=r(K3e," (Transformer-XL model)"),K3e.forEach(t),N2o=i($),hu=n($,"LI",{});var Z3e=s(hu);bse=n(Z3e,"STRONG",{});var vJr=s(bse);j2o=r(vJr,"unispeech"),vJr.forEach(t),D2o=r(Z3e," \u2014 "),sq=n(Z3e,"A",{href:!0});var FJr=s(sq);G2o=r(FJr,"UniSpeechModel"),FJr.forEach(t),O2o=r(Z3e," (UniSpeech model)"),Z3e.forEach(t),V2o=i($),pu=n($,"LI",{});var ewe=s(pu);vse=n(ewe,"STRONG",{});var TJr=s(vse);X2o=r(TJr,"unispeech-sat"),TJr.forEach(t),z2o=r(ewe," \u2014 "),lq=n(ewe,"A",{href:!0});var MJr=s(lq);Q2o=r(MJr,"UniSpeechSatModel"),MJr.forEach(t),W2o=r(ewe," (UniSpeechSat model)"),ewe.forEach(t),H2o=i($),uu=n($,"LI",{});var owe=s(uu);Fse=n(owe,"STRONG",{});var EJr=s(Fse);U2o=r(EJr,"van"),EJr.forEach(t),J2o=r(owe," \u2014 "),iq=n(owe,"A",{href:!0});var CJr=s(iq);Y2o=r(CJr,"VanModel"),CJr.forEach(t),K2o=r(owe," (VAN model)"),owe.forEach(t),Z2o=i($),_u=n($,"LI",{});var rwe=s(_u);Tse=n(rwe,"STRONG",{});var wJr=s(Tse);e1o=r(wJr,"vilt"),wJr.forEach(t),o1o=r(rwe," \u2014 "),dq=n(rwe,"A",{href:!0});var AJr=s(dq);r1o=r(AJr,"ViltModel"),AJr.forEach(t),t1o=r(rwe," (ViLT model)"),rwe.forEach(t),a1o=i($),bu=n($,"LI",{});var twe=s(bu);Mse=n(twe,"STRONG",{});var yJr=s(Mse);n1o=r(yJr,"vision-text-dual-encoder"),yJr.forEach(t),s1o=r(twe," \u2014 "),cq=n(twe,"A",{href:!0});var LJr=s(cq);l1o=r(LJr,"VisionTextDualEncoderModel"),LJr.forEach(t),i1o=r(twe," (VisionTextDualEncoder model)"),twe.forEach(t),d1o=i($),vu=n($,"LI",{});var awe=s(vu);Ese=n(awe,"STRONG",{});var xJr=s(Ese);c1o=r(xJr,"visual_bert"),xJr.forEach(t),f1o=r(awe," \u2014 "),fq=n(awe,"A",{href:!0});var $Jr=s(fq);m1o=r($Jr,"VisualBertModel"),$Jr.forEach(t),g1o=r(awe," (VisualBert model)"),awe.forEach(t),h1o=i($),Fu=n($,"LI",{});var nwe=s(Fu);Cse=n(nwe,"STRONG",{});var kJr=s(Cse);p1o=r(kJr,"vit"),kJr.forEach(t),u1o=r(nwe," \u2014 "),mq=n(nwe,"A",{href:!0});var SJr=s(mq);_1o=r(SJr,"ViTModel"),SJr.forEach(t),b1o=r(nwe," (ViT model)"),nwe.forEach(t),v1o=i($),Tu=n($,"LI",{});var swe=s(Tu);wse=n(swe,"STRONG",{});var RJr=s(wse);F1o=r(RJr,"vit_mae"),RJr.forEach(t),T1o=r(swe," \u2014 "),gq=n(swe,"A",{href:!0});var BJr=s(gq);M1o=r(BJr,"ViTMAEModel"),BJr.forEach(t),E1o=r(swe," (ViTMAE model)"),swe.forEach(t),C1o=i($),Mu=n($,"LI",{});var lwe=s(Mu);Ase=n(lwe,"STRONG",{});var PJr=s(Ase);w1o=r(PJr,"wav2vec2"),PJr.forEach(t),A1o=r(lwe," \u2014 "),hq=n(lwe,"A",{href:!0});var IJr=s(hq);y1o=r(IJr,"Wav2Vec2Model"),IJr.forEach(t),L1o=r(lwe," (Wav2Vec2 model)"),lwe.forEach(t),x1o=i($),Eu=n($,"LI",{});var iwe=s(Eu);yse=n(iwe,"STRONG",{});var qJr=s(yse);$1o=r(qJr,"wavlm"),qJr.forEach(t),k1o=r(iwe," \u2014 "),pq=n(iwe,"A",{href:!0});var NJr=s(pq);S1o=r(NJr,"WavLMModel"),NJr.forEach(t),R1o=r(iwe," (WavLM model)"),iwe.forEach(t),B1o=i($),Cu=n($,"LI",{});var dwe=s(Cu);Lse=n(dwe,"STRONG",{});var jJr=s(Lse);P1o=r(jJr,"xglm"),jJr.forEach(t),I1o=r(dwe," \u2014 "),uq=n(dwe,"A",{href:!0});var DJr=s(uq);q1o=r(DJr,"XGLMModel"),DJr.forEach(t),N1o=r(dwe," (XGLM model)"),dwe.forEach(t),j1o=i($),wu=n($,"LI",{});var cwe=s(wu);xse=n(cwe,"STRONG",{});var GJr=s(xse);D1o=r(GJr,"xlm"),GJr.forEach(t),G1o=r(cwe," \u2014 "),_q=n(cwe,"A",{href:!0});var OJr=s(_q);O1o=r(OJr,"XLMModel"),OJr.forEach(t),V1o=r(cwe," (XLM model)"),cwe.forEach(t),X1o=i($),Au=n($,"LI",{});var fwe=s(Au);$se=n(fwe,"STRONG",{});var VJr=s($se);z1o=r(VJr,"xlm-prophetnet"),VJr.forEach(t),Q1o=r(fwe," \u2014 "),bq=n(fwe,"A",{href:!0});var XJr=s(bq);W1o=r(XJr,"XLMProphetNetModel"),XJr.forEach(t),H1o=r(fwe," (XLMProphetNet model)"),fwe.forEach(t),U1o=i($),yu=n($,"LI",{});var mwe=s(yu);kse=n(mwe,"STRONG",{});var zJr=s(kse);J1o=r(zJr,"xlm-roberta"),zJr.forEach(t),Y1o=r(mwe," \u2014 "),vq=n(mwe,"A",{href:!0});var QJr=s(vq);K1o=r(QJr,"XLMRobertaModel"),QJr.forEach(t),Z1o=r(mwe," (XLM-RoBERTa model)"),mwe.forEach(t),ebo=i($),Lu=n($,"LI",{});var gwe=s(Lu);Sse=n(gwe,"STRONG",{});var WJr=s(Sse);obo=r(WJr,"xlm-roberta-xl"),WJr.forEach(t),rbo=r(gwe," \u2014 "),Fq=n(gwe,"A",{href:!0});var HJr=s(Fq);tbo=r(HJr,"XLMRobertaXLModel"),HJr.forEach(t),abo=r(gwe," (XLM-RoBERTa-XL model)"),gwe.forEach(t),nbo=i($),xu=n($,"LI",{});var hwe=s(xu);Rse=n(hwe,"STRONG",{});var UJr=s(Rse);sbo=r(UJr,"xlnet"),UJr.forEach(t),lbo=r(hwe," \u2014 "),Tq=n(hwe,"A",{href:!0});var JJr=s(Tq);ibo=r(JJr,"XLNetModel"),JJr.forEach(t),dbo=r(hwe," (XLNet model)"),hwe.forEach(t),cbo=i($),$u=n($,"LI",{});var pwe=s($u);Bse=n(pwe,"STRONG",{});var YJr=s(Bse);fbo=r(YJr,"yolos"),YJr.forEach(t),mbo=r(pwe," \u2014 "),Mq=n(pwe,"A",{href:!0});var KJr=s(Mq);gbo=r(KJr,"YolosModel"),KJr.forEach(t),hbo=r(pwe," (YOLOS model)"),pwe.forEach(t),pbo=i($),ku=n($,"LI",{});var uwe=s(ku);Pse=n(uwe,"STRONG",{});var ZJr=s(Pse);ubo=r(ZJr,"yoso"),ZJr.forEach(t),_bo=r(uwe," \u2014 "),Eq=n(uwe,"A",{href:!0});var eYr=s(Eq);bbo=r(eYr,"YosoModel"),eYr.forEach(t),vbo=r(uwe," (YOSO model)"),uwe.forEach(t),$.forEach(t),Fbo=i(Zt),Su=n(Zt,"P",{});var _we=s(Su);Tbo=r(_we,"The model is set in evaluation mode by default using "),Ise=n(_we,"CODE",{});var oYr=s(Ise);Mbo=r(oYr,"model.eval()"),oYr.forEach(t),Ebo=r(_we,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),qse=n(_we,"CODE",{});var rYr=s(qse);Cbo=r(rYr,"model.train()"),rYr.forEach(t),_we.forEach(t),wbo=i(Zt),T(Ru.$$.fragment,Zt),Zt.forEach(t),js.forEach(t),OPe=i(f),Ci=n(f,"H2",{class:!0});var Qqe=s(Ci);Bu=n(Qqe,"A",{id:!0,class:!0,href:!0});var tYr=s(Bu);Nse=n(tYr,"SPAN",{});var aYr=s(Nse);T(CA.$$.fragment,aYr),aYr.forEach(t),tYr.forEach(t),Abo=i(Qqe),jse=n(Qqe,"SPAN",{});var nYr=s(jse);ybo=r(nYr,"AutoModelForPreTraining"),nYr.forEach(t),Qqe.forEach(t),VPe=i(f),xo=n(f,"DIV",{class:!0});var Ds=s(xo);T(wA.$$.fragment,Ds),Lbo=i(Ds),wi=n(Ds,"P",{});var rK=s(wi);xbo=r(rK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Cq=n(rK,"A",{href:!0});var sYr=s(Cq);$bo=r(sYr,"from_pretrained()"),sYr.forEach(t),kbo=r(rK," class method or the "),wq=n(rK,"A",{href:!0});var lYr=s(wq);Sbo=r(lYr,"from_config()"),lYr.forEach(t),Rbo=r(rK,` class
method.`),rK.forEach(t),Bbo=i(Ds),AA=n(Ds,"P",{});var Wqe=s(AA);Pbo=r(Wqe,"This class cannot be instantiated directly using "),Dse=n(Wqe,"CODE",{});var iYr=s(Dse);Ibo=r(iYr,"__init__()"),iYr.forEach(t),qbo=r(Wqe," (throws an error)."),Wqe.forEach(t),Nbo=i(Ds),rt=n(Ds,"DIV",{class:!0});var KC=s(rt);T(yA.$$.fragment,KC),jbo=i(KC),Gse=n(KC,"P",{});var dYr=s(Gse);Dbo=r(dYr,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),dYr.forEach(t),Gbo=i(KC),Ai=n(KC,"P",{});var tK=s(Ai);Obo=r(tK,`Note:
Loading a model from its configuration file does `),Ose=n(tK,"STRONG",{});var cYr=s(Ose);Vbo=r(cYr,"not"),cYr.forEach(t),Xbo=r(tK,` load the model weights. It only affects the
model\u2019s configuration. Use `),Aq=n(tK,"A",{href:!0});var fYr=s(Aq);zbo=r(fYr,"from_pretrained()"),fYr.forEach(t),Qbo=r(tK," to load the model weights."),tK.forEach(t),Wbo=i(KC),T(Pu.$$.fragment,KC),KC.forEach(t),Hbo=i(Ds),Ue=n(Ds,"DIV",{class:!0});var ea=s(Ue);T(LA.$$.fragment,ea),Ubo=i(ea),Vse=n(ea,"P",{});var mYr=s(Vse);Jbo=r(mYr,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),mYr.forEach(t),Ybo=i(ea),ya=n(ea,"P",{});var ZC=s(ya);Kbo=r(ZC,"The model class to instantiate is selected based on the "),Xse=n(ZC,"CODE",{});var gYr=s(Xse);Zbo=r(gYr,"model_type"),gYr.forEach(t),evo=r(ZC,` property of the config object (either
passed as an argument or loaded from `),zse=n(ZC,"CODE",{});var hYr=s(zse);ovo=r(hYr,"pretrained_model_name_or_path"),hYr.forEach(t),rvo=r(ZC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qse=n(ZC,"CODE",{});var pYr=s(Qse);tvo=r(pYr,"pretrained_model_name_or_path"),pYr.forEach(t),avo=r(ZC,":"),ZC.forEach(t),nvo=i(ea),G=n(ea,"UL",{});var V=s(G);Iu=n(V,"LI",{});var bwe=s(Iu);Wse=n(bwe,"STRONG",{});var uYr=s(Wse);svo=r(uYr,"albert"),uYr.forEach(t),lvo=r(bwe," \u2014 "),yq=n(bwe,"A",{href:!0});var _Yr=s(yq);ivo=r(_Yr,"AlbertForPreTraining"),_Yr.forEach(t),dvo=r(bwe," (ALBERT model)"),bwe.forEach(t),cvo=i(V),qu=n(V,"LI",{});var vwe=s(qu);Hse=n(vwe,"STRONG",{});var bYr=s(Hse);fvo=r(bYr,"bart"),bYr.forEach(t),mvo=r(vwe," \u2014 "),Lq=n(vwe,"A",{href:!0});var vYr=s(Lq);gvo=r(vYr,"BartForConditionalGeneration"),vYr.forEach(t),hvo=r(vwe," (BART model)"),vwe.forEach(t),pvo=i(V),Nu=n(V,"LI",{});var Fwe=s(Nu);Use=n(Fwe,"STRONG",{});var FYr=s(Use);uvo=r(FYr,"bert"),FYr.forEach(t),_vo=r(Fwe," \u2014 "),xq=n(Fwe,"A",{href:!0});var TYr=s(xq);bvo=r(TYr,"BertForPreTraining"),TYr.forEach(t),vvo=r(Fwe," (BERT model)"),Fwe.forEach(t),Fvo=i(V),ju=n(V,"LI",{});var Twe=s(ju);Jse=n(Twe,"STRONG",{});var MYr=s(Jse);Tvo=r(MYr,"big_bird"),MYr.forEach(t),Mvo=r(Twe," \u2014 "),$q=n(Twe,"A",{href:!0});var EYr=s($q);Evo=r(EYr,"BigBirdForPreTraining"),EYr.forEach(t),Cvo=r(Twe," (BigBird model)"),Twe.forEach(t),wvo=i(V),Du=n(V,"LI",{});var Mwe=s(Du);Yse=n(Mwe,"STRONG",{});var CYr=s(Yse);Avo=r(CYr,"camembert"),CYr.forEach(t),yvo=r(Mwe," \u2014 "),kq=n(Mwe,"A",{href:!0});var wYr=s(kq);Lvo=r(wYr,"CamembertForMaskedLM"),wYr.forEach(t),xvo=r(Mwe," (CamemBERT model)"),Mwe.forEach(t),$vo=i(V),Gu=n(V,"LI",{});var Ewe=s(Gu);Kse=n(Ewe,"STRONG",{});var AYr=s(Kse);kvo=r(AYr,"ctrl"),AYr.forEach(t),Svo=r(Ewe," \u2014 "),Sq=n(Ewe,"A",{href:!0});var yYr=s(Sq);Rvo=r(yYr,"CTRLLMHeadModel"),yYr.forEach(t),Bvo=r(Ewe," (CTRL model)"),Ewe.forEach(t),Pvo=i(V),Ou=n(V,"LI",{});var Cwe=s(Ou);Zse=n(Cwe,"STRONG",{});var LYr=s(Zse);Ivo=r(LYr,"data2vec-text"),LYr.forEach(t),qvo=r(Cwe," \u2014 "),Rq=n(Cwe,"A",{href:!0});var xYr=s(Rq);Nvo=r(xYr,"Data2VecTextForMaskedLM"),xYr.forEach(t),jvo=r(Cwe," (Data2VecText model)"),Cwe.forEach(t),Dvo=i(V),Vu=n(V,"LI",{});var wwe=s(Vu);ele=n(wwe,"STRONG",{});var $Yr=s(ele);Gvo=r($Yr,"deberta"),$Yr.forEach(t),Ovo=r(wwe," \u2014 "),Bq=n(wwe,"A",{href:!0});var kYr=s(Bq);Vvo=r(kYr,"DebertaForMaskedLM"),kYr.forEach(t),Xvo=r(wwe," (DeBERTa model)"),wwe.forEach(t),zvo=i(V),Xu=n(V,"LI",{});var Awe=s(Xu);ole=n(Awe,"STRONG",{});var SYr=s(ole);Qvo=r(SYr,"deberta-v2"),SYr.forEach(t),Wvo=r(Awe," \u2014 "),Pq=n(Awe,"A",{href:!0});var RYr=s(Pq);Hvo=r(RYr,"DebertaV2ForMaskedLM"),RYr.forEach(t),Uvo=r(Awe," (DeBERTa-v2 model)"),Awe.forEach(t),Jvo=i(V),zu=n(V,"LI",{});var ywe=s(zu);rle=n(ywe,"STRONG",{});var BYr=s(rle);Yvo=r(BYr,"distilbert"),BYr.forEach(t),Kvo=r(ywe," \u2014 "),Iq=n(ywe,"A",{href:!0});var PYr=s(Iq);Zvo=r(PYr,"DistilBertForMaskedLM"),PYr.forEach(t),eFo=r(ywe," (DistilBERT model)"),ywe.forEach(t),oFo=i(V),Qu=n(V,"LI",{});var Lwe=s(Qu);tle=n(Lwe,"STRONG",{});var IYr=s(tle);rFo=r(IYr,"electra"),IYr.forEach(t),tFo=r(Lwe," \u2014 "),qq=n(Lwe,"A",{href:!0});var qYr=s(qq);aFo=r(qYr,"ElectraForPreTraining"),qYr.forEach(t),nFo=r(Lwe," (ELECTRA model)"),Lwe.forEach(t),sFo=i(V),Wu=n(V,"LI",{});var xwe=s(Wu);ale=n(xwe,"STRONG",{});var NYr=s(ale);lFo=r(NYr,"flaubert"),NYr.forEach(t),iFo=r(xwe," \u2014 "),Nq=n(xwe,"A",{href:!0});var jYr=s(Nq);dFo=r(jYr,"FlaubertWithLMHeadModel"),jYr.forEach(t),cFo=r(xwe," (FlauBERT model)"),xwe.forEach(t),fFo=i(V),Hu=n(V,"LI",{});var $we=s(Hu);nle=n($we,"STRONG",{});var DYr=s(nle);mFo=r(DYr,"flava"),DYr.forEach(t),gFo=r($we," \u2014 "),jq=n($we,"A",{href:!0});var GYr=s(jq);hFo=r(GYr,"FlavaForPreTraining"),GYr.forEach(t),pFo=r($we," (Flava model)"),$we.forEach(t),uFo=i(V),Uu=n(V,"LI",{});var kwe=s(Uu);sle=n(kwe,"STRONG",{});var OYr=s(sle);_Fo=r(OYr,"fnet"),OYr.forEach(t),bFo=r(kwe," \u2014 "),Dq=n(kwe,"A",{href:!0});var VYr=s(Dq);vFo=r(VYr,"FNetForPreTraining"),VYr.forEach(t),FFo=r(kwe," (FNet model)"),kwe.forEach(t),TFo=i(V),Ju=n(V,"LI",{});var Swe=s(Ju);lle=n(Swe,"STRONG",{});var XYr=s(lle);MFo=r(XYr,"fsmt"),XYr.forEach(t),EFo=r(Swe," \u2014 "),Gq=n(Swe,"A",{href:!0});var zYr=s(Gq);CFo=r(zYr,"FSMTForConditionalGeneration"),zYr.forEach(t),wFo=r(Swe," (FairSeq Machine-Translation model)"),Swe.forEach(t),AFo=i(V),Yu=n(V,"LI",{});var Rwe=s(Yu);ile=n(Rwe,"STRONG",{});var QYr=s(ile);yFo=r(QYr,"funnel"),QYr.forEach(t),LFo=r(Rwe," \u2014 "),Oq=n(Rwe,"A",{href:!0});var WYr=s(Oq);xFo=r(WYr,"FunnelForPreTraining"),WYr.forEach(t),$Fo=r(Rwe," (Funnel Transformer model)"),Rwe.forEach(t),kFo=i(V),Ku=n(V,"LI",{});var Bwe=s(Ku);dle=n(Bwe,"STRONG",{});var HYr=s(dle);SFo=r(HYr,"gpt2"),HYr.forEach(t),RFo=r(Bwe," \u2014 "),Vq=n(Bwe,"A",{href:!0});var UYr=s(Vq);BFo=r(UYr,"GPT2LMHeadModel"),UYr.forEach(t),PFo=r(Bwe," (OpenAI GPT-2 model)"),Bwe.forEach(t),IFo=i(V),Zu=n(V,"LI",{});var Pwe=s(Zu);cle=n(Pwe,"STRONG",{});var JYr=s(cle);qFo=r(JYr,"ibert"),JYr.forEach(t),NFo=r(Pwe," \u2014 "),Xq=n(Pwe,"A",{href:!0});var YYr=s(Xq);jFo=r(YYr,"IBertForMaskedLM"),YYr.forEach(t),DFo=r(Pwe," (I-BERT model)"),Pwe.forEach(t),GFo=i(V),e_=n(V,"LI",{});var Iwe=s(e_);fle=n(Iwe,"STRONG",{});var KYr=s(fle);OFo=r(KYr,"layoutlm"),KYr.forEach(t),VFo=r(Iwe," \u2014 "),zq=n(Iwe,"A",{href:!0});var ZYr=s(zq);XFo=r(ZYr,"LayoutLMForMaskedLM"),ZYr.forEach(t),zFo=r(Iwe," (LayoutLM model)"),Iwe.forEach(t),QFo=i(V),o_=n(V,"LI",{});var qwe=s(o_);mle=n(qwe,"STRONG",{});var eKr=s(mle);WFo=r(eKr,"longformer"),eKr.forEach(t),HFo=r(qwe," \u2014 "),Qq=n(qwe,"A",{href:!0});var oKr=s(Qq);UFo=r(oKr,"LongformerForMaskedLM"),oKr.forEach(t),JFo=r(qwe," (Longformer model)"),qwe.forEach(t),YFo=i(V),r_=n(V,"LI",{});var Nwe=s(r_);gle=n(Nwe,"STRONG",{});var rKr=s(gle);KFo=r(rKr,"lxmert"),rKr.forEach(t),ZFo=r(Nwe," \u2014 "),Wq=n(Nwe,"A",{href:!0});var tKr=s(Wq);e0o=r(tKr,"LxmertForPreTraining"),tKr.forEach(t),o0o=r(Nwe," (LXMERT model)"),Nwe.forEach(t),r0o=i(V),t_=n(V,"LI",{});var jwe=s(t_);hle=n(jwe,"STRONG",{});var aKr=s(hle);t0o=r(aKr,"megatron-bert"),aKr.forEach(t),a0o=r(jwe," \u2014 "),Hq=n(jwe,"A",{href:!0});var nKr=s(Hq);n0o=r(nKr,"MegatronBertForPreTraining"),nKr.forEach(t),s0o=r(jwe," (MegatronBert model)"),jwe.forEach(t),l0o=i(V),a_=n(V,"LI",{});var Dwe=s(a_);ple=n(Dwe,"STRONG",{});var sKr=s(ple);i0o=r(sKr,"mobilebert"),sKr.forEach(t),d0o=r(Dwe," \u2014 "),Uq=n(Dwe,"A",{href:!0});var lKr=s(Uq);c0o=r(lKr,"MobileBertForPreTraining"),lKr.forEach(t),f0o=r(Dwe," (MobileBERT model)"),Dwe.forEach(t),m0o=i(V),n_=n(V,"LI",{});var Gwe=s(n_);ule=n(Gwe,"STRONG",{});var iKr=s(ule);g0o=r(iKr,"mpnet"),iKr.forEach(t),h0o=r(Gwe," \u2014 "),Jq=n(Gwe,"A",{href:!0});var dKr=s(Jq);p0o=r(dKr,"MPNetForMaskedLM"),dKr.forEach(t),u0o=r(Gwe," (MPNet model)"),Gwe.forEach(t),_0o=i(V),s_=n(V,"LI",{});var Owe=s(s_);_le=n(Owe,"STRONG",{});var cKr=s(_le);b0o=r(cKr,"openai-gpt"),cKr.forEach(t),v0o=r(Owe," \u2014 "),Yq=n(Owe,"A",{href:!0});var fKr=s(Yq);F0o=r(fKr,"OpenAIGPTLMHeadModel"),fKr.forEach(t),T0o=r(Owe," (OpenAI GPT model)"),Owe.forEach(t),M0o=i(V),l_=n(V,"LI",{});var Vwe=s(l_);ble=n(Vwe,"STRONG",{});var mKr=s(ble);E0o=r(mKr,"retribert"),mKr.forEach(t),C0o=r(Vwe," \u2014 "),Kq=n(Vwe,"A",{href:!0});var gKr=s(Kq);w0o=r(gKr,"RetriBertModel"),gKr.forEach(t),A0o=r(Vwe," (RetriBERT model)"),Vwe.forEach(t),y0o=i(V),i_=n(V,"LI",{});var Xwe=s(i_);vle=n(Xwe,"STRONG",{});var hKr=s(vle);L0o=r(hKr,"roberta"),hKr.forEach(t),x0o=r(Xwe," \u2014 "),Zq=n(Xwe,"A",{href:!0});var pKr=s(Zq);$0o=r(pKr,"RobertaForMaskedLM"),pKr.forEach(t),k0o=r(Xwe," (RoBERTa model)"),Xwe.forEach(t),S0o=i(V),d_=n(V,"LI",{});var zwe=s(d_);Fle=n(zwe,"STRONG",{});var uKr=s(Fle);R0o=r(uKr,"squeezebert"),uKr.forEach(t),B0o=r(zwe," \u2014 "),eN=n(zwe,"A",{href:!0});var _Kr=s(eN);P0o=r(_Kr,"SqueezeBertForMaskedLM"),_Kr.forEach(t),I0o=r(zwe," (SqueezeBERT model)"),zwe.forEach(t),q0o=i(V),c_=n(V,"LI",{});var Qwe=s(c_);Tle=n(Qwe,"STRONG",{});var bKr=s(Tle);N0o=r(bKr,"t5"),bKr.forEach(t),j0o=r(Qwe," \u2014 "),oN=n(Qwe,"A",{href:!0});var vKr=s(oN);D0o=r(vKr,"T5ForConditionalGeneration"),vKr.forEach(t),G0o=r(Qwe," (T5 model)"),Qwe.forEach(t),O0o=i(V),f_=n(V,"LI",{});var Wwe=s(f_);Mle=n(Wwe,"STRONG",{});var FKr=s(Mle);V0o=r(FKr,"tapas"),FKr.forEach(t),X0o=r(Wwe," \u2014 "),rN=n(Wwe,"A",{href:!0});var TKr=s(rN);z0o=r(TKr,"TapasForMaskedLM"),TKr.forEach(t),Q0o=r(Wwe," (TAPAS model)"),Wwe.forEach(t),W0o=i(V),m_=n(V,"LI",{});var Hwe=s(m_);Ele=n(Hwe,"STRONG",{});var MKr=s(Ele);H0o=r(MKr,"transfo-xl"),MKr.forEach(t),U0o=r(Hwe," \u2014 "),tN=n(Hwe,"A",{href:!0});var EKr=s(tN);J0o=r(EKr,"TransfoXLLMHeadModel"),EKr.forEach(t),Y0o=r(Hwe," (Transformer-XL model)"),Hwe.forEach(t),K0o=i(V),g_=n(V,"LI",{});var Uwe=s(g_);Cle=n(Uwe,"STRONG",{});var CKr=s(Cle);Z0o=r(CKr,"unispeech"),CKr.forEach(t),e6o=r(Uwe," \u2014 "),aN=n(Uwe,"A",{href:!0});var wKr=s(aN);o6o=r(wKr,"UniSpeechForPreTraining"),wKr.forEach(t),r6o=r(Uwe," (UniSpeech model)"),Uwe.forEach(t),t6o=i(V),h_=n(V,"LI",{});var Jwe=s(h_);wle=n(Jwe,"STRONG",{});var AKr=s(wle);a6o=r(AKr,"unispeech-sat"),AKr.forEach(t),n6o=r(Jwe," \u2014 "),nN=n(Jwe,"A",{href:!0});var yKr=s(nN);s6o=r(yKr,"UniSpeechSatForPreTraining"),yKr.forEach(t),l6o=r(Jwe," (UniSpeechSat model)"),Jwe.forEach(t),i6o=i(V),p_=n(V,"LI",{});var Ywe=s(p_);Ale=n(Ywe,"STRONG",{});var LKr=s(Ale);d6o=r(LKr,"visual_bert"),LKr.forEach(t),c6o=r(Ywe," \u2014 "),sN=n(Ywe,"A",{href:!0});var xKr=s(sN);f6o=r(xKr,"VisualBertForPreTraining"),xKr.forEach(t),m6o=r(Ywe," (VisualBert model)"),Ywe.forEach(t),g6o=i(V),u_=n(V,"LI",{});var Kwe=s(u_);yle=n(Kwe,"STRONG",{});var $Kr=s(yle);h6o=r($Kr,"vit_mae"),$Kr.forEach(t),p6o=r(Kwe," \u2014 "),lN=n(Kwe,"A",{href:!0});var kKr=s(lN);u6o=r(kKr,"ViTMAEForPreTraining"),kKr.forEach(t),_6o=r(Kwe," (ViTMAE model)"),Kwe.forEach(t),b6o=i(V),__=n(V,"LI",{});var Zwe=s(__);Lle=n(Zwe,"STRONG",{});var SKr=s(Lle);v6o=r(SKr,"wav2vec2"),SKr.forEach(t),F6o=r(Zwe," \u2014 "),iN=n(Zwe,"A",{href:!0});var RKr=s(iN);T6o=r(RKr,"Wav2Vec2ForPreTraining"),RKr.forEach(t),M6o=r(Zwe," (Wav2Vec2 model)"),Zwe.forEach(t),E6o=i(V),b_=n(V,"LI",{});var eAe=s(b_);xle=n(eAe,"STRONG",{});var BKr=s(xle);C6o=r(BKr,"xlm"),BKr.forEach(t),w6o=r(eAe," \u2014 "),dN=n(eAe,"A",{href:!0});var PKr=s(dN);A6o=r(PKr,"XLMWithLMHeadModel"),PKr.forEach(t),y6o=r(eAe," (XLM model)"),eAe.forEach(t),L6o=i(V),v_=n(V,"LI",{});var oAe=s(v_);$le=n(oAe,"STRONG",{});var IKr=s($le);x6o=r(IKr,"xlm-roberta"),IKr.forEach(t),$6o=r(oAe," \u2014 "),cN=n(oAe,"A",{href:!0});var qKr=s(cN);k6o=r(qKr,"XLMRobertaForMaskedLM"),qKr.forEach(t),S6o=r(oAe," (XLM-RoBERTa model)"),oAe.forEach(t),R6o=i(V),F_=n(V,"LI",{});var rAe=s(F_);kle=n(rAe,"STRONG",{});var NKr=s(kle);B6o=r(NKr,"xlm-roberta-xl"),NKr.forEach(t),P6o=r(rAe," \u2014 "),fN=n(rAe,"A",{href:!0});var jKr=s(fN);I6o=r(jKr,"XLMRobertaXLForMaskedLM"),jKr.forEach(t),q6o=r(rAe," (XLM-RoBERTa-XL model)"),rAe.forEach(t),N6o=i(V),T_=n(V,"LI",{});var tAe=s(T_);Sle=n(tAe,"STRONG",{});var DKr=s(Sle);j6o=r(DKr,"xlnet"),DKr.forEach(t),D6o=r(tAe," \u2014 "),mN=n(tAe,"A",{href:!0});var GKr=s(mN);G6o=r(GKr,"XLNetLMHeadModel"),GKr.forEach(t),O6o=r(tAe," (XLNet model)"),tAe.forEach(t),V.forEach(t),V6o=i(ea),M_=n(ea,"P",{});var aAe=s(M_);X6o=r(aAe,"The model is set in evaluation mode by default using "),Rle=n(aAe,"CODE",{});var OKr=s(Rle);z6o=r(OKr,"model.eval()"),OKr.forEach(t),Q6o=r(aAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ble=n(aAe,"CODE",{});var VKr=s(Ble);W6o=r(VKr,"model.train()"),VKr.forEach(t),aAe.forEach(t),H6o=i(ea),T(E_.$$.fragment,ea),ea.forEach(t),Ds.forEach(t),XPe=i(f),yi=n(f,"H2",{class:!0});var Hqe=s(yi);C_=n(Hqe,"A",{id:!0,class:!0,href:!0});var XKr=s(C_);Ple=n(XKr,"SPAN",{});var zKr=s(Ple);T(xA.$$.fragment,zKr),zKr.forEach(t),XKr.forEach(t),U6o=i(Hqe),Ile=n(Hqe,"SPAN",{});var QKr=s(Ile);J6o=r(QKr,"AutoModelForCausalLM"),QKr.forEach(t),Hqe.forEach(t),zPe=i(f),$o=n(f,"DIV",{class:!0});var Gs=s($o);T($A.$$.fragment,Gs),Y6o=i(Gs),Li=n(Gs,"P",{});var aK=s(Li);K6o=r(aK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),gN=n(aK,"A",{href:!0});var WKr=s(gN);Z6o=r(WKr,"from_pretrained()"),WKr.forEach(t),eTo=r(aK," class method or the "),hN=n(aK,"A",{href:!0});var HKr=s(hN);oTo=r(HKr,"from_config()"),HKr.forEach(t),rTo=r(aK,` class
method.`),aK.forEach(t),tTo=i(Gs),kA=n(Gs,"P",{});var Uqe=s(kA);aTo=r(Uqe,"This class cannot be instantiated directly using "),qle=n(Uqe,"CODE",{});var UKr=s(qle);nTo=r(UKr,"__init__()"),UKr.forEach(t),sTo=r(Uqe," (throws an error)."),Uqe.forEach(t),lTo=i(Gs),tt=n(Gs,"DIV",{class:!0});var e3=s(tt);T(SA.$$.fragment,e3),iTo=i(e3),Nle=n(e3,"P",{});var JKr=s(Nle);dTo=r(JKr,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),JKr.forEach(t),cTo=i(e3),xi=n(e3,"P",{});var nK=s(xi);fTo=r(nK,`Note:
Loading a model from its configuration file does `),jle=n(nK,"STRONG",{});var YKr=s(jle);mTo=r(YKr,"not"),YKr.forEach(t),gTo=r(nK,` load the model weights. It only affects the
model\u2019s configuration. Use `),pN=n(nK,"A",{href:!0});var KKr=s(pN);hTo=r(KKr,"from_pretrained()"),KKr.forEach(t),pTo=r(nK," to load the model weights."),nK.forEach(t),uTo=i(e3),T(w_.$$.fragment,e3),e3.forEach(t),_To=i(Gs),Je=n(Gs,"DIV",{class:!0});var oa=s(Je);T(RA.$$.fragment,oa),bTo=i(oa),Dle=n(oa,"P",{});var ZKr=s(Dle);vTo=r(ZKr,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),ZKr.forEach(t),FTo=i(oa),La=n(oa,"P",{});var o3=s(La);TTo=r(o3,"The model class to instantiate is selected based on the "),Gle=n(o3,"CODE",{});var eZr=s(Gle);MTo=r(eZr,"model_type"),eZr.forEach(t),ETo=r(o3,` property of the config object (either
passed as an argument or loaded from `),Ole=n(o3,"CODE",{});var oZr=s(Ole);CTo=r(oZr,"pretrained_model_name_or_path"),oZr.forEach(t),wTo=r(o3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vle=n(o3,"CODE",{});var rZr=s(Vle);ATo=r(rZr,"pretrained_model_name_or_path"),rZr.forEach(t),yTo=r(o3,":"),o3.forEach(t),LTo=i(oa),z=n(oa,"UL",{});var W=s(z);A_=n(W,"LI",{});var nAe=s(A_);Xle=n(nAe,"STRONG",{});var tZr=s(Xle);xTo=r(tZr,"bart"),tZr.forEach(t),$To=r(nAe," \u2014 "),uN=n(nAe,"A",{href:!0});var aZr=s(uN);kTo=r(aZr,"BartForCausalLM"),aZr.forEach(t),STo=r(nAe," (BART model)"),nAe.forEach(t),RTo=i(W),y_=n(W,"LI",{});var sAe=s(y_);zle=n(sAe,"STRONG",{});var nZr=s(zle);BTo=r(nZr,"bert"),nZr.forEach(t),PTo=r(sAe," \u2014 "),_N=n(sAe,"A",{href:!0});var sZr=s(_N);ITo=r(sZr,"BertLMHeadModel"),sZr.forEach(t),qTo=r(sAe," (BERT model)"),sAe.forEach(t),NTo=i(W),L_=n(W,"LI",{});var lAe=s(L_);Qle=n(lAe,"STRONG",{});var lZr=s(Qle);jTo=r(lZr,"bert-generation"),lZr.forEach(t),DTo=r(lAe," \u2014 "),bN=n(lAe,"A",{href:!0});var iZr=s(bN);GTo=r(iZr,"BertGenerationDecoder"),iZr.forEach(t),OTo=r(lAe," (Bert Generation model)"),lAe.forEach(t),VTo=i(W),x_=n(W,"LI",{});var iAe=s(x_);Wle=n(iAe,"STRONG",{});var dZr=s(Wle);XTo=r(dZr,"big_bird"),dZr.forEach(t),zTo=r(iAe," \u2014 "),vN=n(iAe,"A",{href:!0});var cZr=s(vN);QTo=r(cZr,"BigBirdForCausalLM"),cZr.forEach(t),WTo=r(iAe," (BigBird model)"),iAe.forEach(t),HTo=i(W),$_=n(W,"LI",{});var dAe=s($_);Hle=n(dAe,"STRONG",{});var fZr=s(Hle);UTo=r(fZr,"bigbird_pegasus"),fZr.forEach(t),JTo=r(dAe," \u2014 "),FN=n(dAe,"A",{href:!0});var mZr=s(FN);YTo=r(mZr,"BigBirdPegasusForCausalLM"),mZr.forEach(t),KTo=r(dAe," (BigBirdPegasus model)"),dAe.forEach(t),ZTo=i(W),k_=n(W,"LI",{});var cAe=s(k_);Ule=n(cAe,"STRONG",{});var gZr=s(Ule);e7o=r(gZr,"blenderbot"),gZr.forEach(t),o7o=r(cAe," \u2014 "),TN=n(cAe,"A",{href:!0});var hZr=s(TN);r7o=r(hZr,"BlenderbotForCausalLM"),hZr.forEach(t),t7o=r(cAe," (Blenderbot model)"),cAe.forEach(t),a7o=i(W),S_=n(W,"LI",{});var fAe=s(S_);Jle=n(fAe,"STRONG",{});var pZr=s(Jle);n7o=r(pZr,"blenderbot-small"),pZr.forEach(t),s7o=r(fAe," \u2014 "),MN=n(fAe,"A",{href:!0});var uZr=s(MN);l7o=r(uZr,"BlenderbotSmallForCausalLM"),uZr.forEach(t),i7o=r(fAe," (BlenderbotSmall model)"),fAe.forEach(t),d7o=i(W),R_=n(W,"LI",{});var mAe=s(R_);Yle=n(mAe,"STRONG",{});var _Zr=s(Yle);c7o=r(_Zr,"camembert"),_Zr.forEach(t),f7o=r(mAe," \u2014 "),EN=n(mAe,"A",{href:!0});var bZr=s(EN);m7o=r(bZr,"CamembertForCausalLM"),bZr.forEach(t),g7o=r(mAe," (CamemBERT model)"),mAe.forEach(t),h7o=i(W),B_=n(W,"LI",{});var gAe=s(B_);Kle=n(gAe,"STRONG",{});var vZr=s(Kle);p7o=r(vZr,"ctrl"),vZr.forEach(t),u7o=r(gAe," \u2014 "),CN=n(gAe,"A",{href:!0});var FZr=s(CN);_7o=r(FZr,"CTRLLMHeadModel"),FZr.forEach(t),b7o=r(gAe," (CTRL model)"),gAe.forEach(t),v7o=i(W),P_=n(W,"LI",{});var hAe=s(P_);Zle=n(hAe,"STRONG",{});var TZr=s(Zle);F7o=r(TZr,"data2vec-text"),TZr.forEach(t),T7o=r(hAe," \u2014 "),wN=n(hAe,"A",{href:!0});var MZr=s(wN);M7o=r(MZr,"Data2VecTextForCausalLM"),MZr.forEach(t),E7o=r(hAe," (Data2VecText model)"),hAe.forEach(t),C7o=i(W),I_=n(W,"LI",{});var pAe=s(I_);eie=n(pAe,"STRONG",{});var EZr=s(eie);w7o=r(EZr,"electra"),EZr.forEach(t),A7o=r(pAe," \u2014 "),AN=n(pAe,"A",{href:!0});var CZr=s(AN);y7o=r(CZr,"ElectraForCausalLM"),CZr.forEach(t),L7o=r(pAe," (ELECTRA model)"),pAe.forEach(t),x7o=i(W),q_=n(W,"LI",{});var uAe=s(q_);oie=n(uAe,"STRONG",{});var wZr=s(oie);$7o=r(wZr,"gpt2"),wZr.forEach(t),k7o=r(uAe," \u2014 "),yN=n(uAe,"A",{href:!0});var AZr=s(yN);S7o=r(AZr,"GPT2LMHeadModel"),AZr.forEach(t),R7o=r(uAe," (OpenAI GPT-2 model)"),uAe.forEach(t),B7o=i(W),N_=n(W,"LI",{});var _Ae=s(N_);rie=n(_Ae,"STRONG",{});var yZr=s(rie);P7o=r(yZr,"gpt_neo"),yZr.forEach(t),I7o=r(_Ae," \u2014 "),LN=n(_Ae,"A",{href:!0});var LZr=s(LN);q7o=r(LZr,"GPTNeoForCausalLM"),LZr.forEach(t),N7o=r(_Ae," (GPT Neo model)"),_Ae.forEach(t),j7o=i(W),j_=n(W,"LI",{});var bAe=s(j_);tie=n(bAe,"STRONG",{});var xZr=s(tie);D7o=r(xZr,"gptj"),xZr.forEach(t),G7o=r(bAe," \u2014 "),xN=n(bAe,"A",{href:!0});var $Zr=s(xN);O7o=r($Zr,"GPTJForCausalLM"),$Zr.forEach(t),V7o=r(bAe," (GPT-J model)"),bAe.forEach(t),X7o=i(W),D_=n(W,"LI",{});var vAe=s(D_);aie=n(vAe,"STRONG",{});var kZr=s(aie);z7o=r(kZr,"marian"),kZr.forEach(t),Q7o=r(vAe," \u2014 "),$N=n(vAe,"A",{href:!0});var SZr=s($N);W7o=r(SZr,"MarianForCausalLM"),SZr.forEach(t),H7o=r(vAe," (Marian model)"),vAe.forEach(t),U7o=i(W),G_=n(W,"LI",{});var FAe=s(G_);nie=n(FAe,"STRONG",{});var RZr=s(nie);J7o=r(RZr,"mbart"),RZr.forEach(t),Y7o=r(FAe," \u2014 "),kN=n(FAe,"A",{href:!0});var BZr=s(kN);K7o=r(BZr,"MBartForCausalLM"),BZr.forEach(t),Z7o=r(FAe," (mBART model)"),FAe.forEach(t),eMo=i(W),O_=n(W,"LI",{});var TAe=s(O_);sie=n(TAe,"STRONG",{});var PZr=s(sie);oMo=r(PZr,"megatron-bert"),PZr.forEach(t),rMo=r(TAe," \u2014 "),SN=n(TAe,"A",{href:!0});var IZr=s(SN);tMo=r(IZr,"MegatronBertForCausalLM"),IZr.forEach(t),aMo=r(TAe," (MegatronBert model)"),TAe.forEach(t),nMo=i(W),V_=n(W,"LI",{});var MAe=s(V_);lie=n(MAe,"STRONG",{});var qZr=s(lie);sMo=r(qZr,"openai-gpt"),qZr.forEach(t),lMo=r(MAe," \u2014 "),RN=n(MAe,"A",{href:!0});var NZr=s(RN);iMo=r(NZr,"OpenAIGPTLMHeadModel"),NZr.forEach(t),dMo=r(MAe," (OpenAI GPT model)"),MAe.forEach(t),cMo=i(W),X_=n(W,"LI",{});var EAe=s(X_);iie=n(EAe,"STRONG",{});var jZr=s(iie);fMo=r(jZr,"pegasus"),jZr.forEach(t),mMo=r(EAe," \u2014 "),BN=n(EAe,"A",{href:!0});var DZr=s(BN);gMo=r(DZr,"PegasusForCausalLM"),DZr.forEach(t),hMo=r(EAe," (Pegasus model)"),EAe.forEach(t),pMo=i(W),z_=n(W,"LI",{});var CAe=s(z_);die=n(CAe,"STRONG",{});var GZr=s(die);uMo=r(GZr,"plbart"),GZr.forEach(t),_Mo=r(CAe," \u2014 "),PN=n(CAe,"A",{href:!0});var OZr=s(PN);bMo=r(OZr,"PLBartForCausalLM"),OZr.forEach(t),vMo=r(CAe," (PLBart model)"),CAe.forEach(t),FMo=i(W),Q_=n(W,"LI",{});var wAe=s(Q_);cie=n(wAe,"STRONG",{});var VZr=s(cie);TMo=r(VZr,"prophetnet"),VZr.forEach(t),MMo=r(wAe," \u2014 "),IN=n(wAe,"A",{href:!0});var XZr=s(IN);EMo=r(XZr,"ProphetNetForCausalLM"),XZr.forEach(t),CMo=r(wAe," (ProphetNet model)"),wAe.forEach(t),wMo=i(W),W_=n(W,"LI",{});var AAe=s(W_);fie=n(AAe,"STRONG",{});var zZr=s(fie);AMo=r(zZr,"qdqbert"),zZr.forEach(t),yMo=r(AAe," \u2014 "),qN=n(AAe,"A",{href:!0});var QZr=s(qN);LMo=r(QZr,"QDQBertLMHeadModel"),QZr.forEach(t),xMo=r(AAe," (QDQBert model)"),AAe.forEach(t),$Mo=i(W),H_=n(W,"LI",{});var yAe=s(H_);mie=n(yAe,"STRONG",{});var WZr=s(mie);kMo=r(WZr,"reformer"),WZr.forEach(t),SMo=r(yAe," \u2014 "),NN=n(yAe,"A",{href:!0});var HZr=s(NN);RMo=r(HZr,"ReformerModelWithLMHead"),HZr.forEach(t),BMo=r(yAe," (Reformer model)"),yAe.forEach(t),PMo=i(W),U_=n(W,"LI",{});var LAe=s(U_);gie=n(LAe,"STRONG",{});var UZr=s(gie);IMo=r(UZr,"rembert"),UZr.forEach(t),qMo=r(LAe," \u2014 "),jN=n(LAe,"A",{href:!0});var JZr=s(jN);NMo=r(JZr,"RemBertForCausalLM"),JZr.forEach(t),jMo=r(LAe," (RemBERT model)"),LAe.forEach(t),DMo=i(W),J_=n(W,"LI",{});var xAe=s(J_);hie=n(xAe,"STRONG",{});var YZr=s(hie);GMo=r(YZr,"roberta"),YZr.forEach(t),OMo=r(xAe," \u2014 "),DN=n(xAe,"A",{href:!0});var KZr=s(DN);VMo=r(KZr,"RobertaForCausalLM"),KZr.forEach(t),XMo=r(xAe," (RoBERTa model)"),xAe.forEach(t),zMo=i(W),Y_=n(W,"LI",{});var $Ae=s(Y_);pie=n($Ae,"STRONG",{});var ZZr=s(pie);QMo=r(ZZr,"roformer"),ZZr.forEach(t),WMo=r($Ae," \u2014 "),GN=n($Ae,"A",{href:!0});var eet=s(GN);HMo=r(eet,"RoFormerForCausalLM"),eet.forEach(t),UMo=r($Ae," (RoFormer model)"),$Ae.forEach(t),JMo=i(W),K_=n(W,"LI",{});var kAe=s(K_);uie=n(kAe,"STRONG",{});var oet=s(uie);YMo=r(oet,"speech_to_text_2"),oet.forEach(t),KMo=r(kAe," \u2014 "),ON=n(kAe,"A",{href:!0});var ret=s(ON);ZMo=r(ret,"Speech2Text2ForCausalLM"),ret.forEach(t),e4o=r(kAe," (Speech2Text2 model)"),kAe.forEach(t),o4o=i(W),Z_=n(W,"LI",{});var SAe=s(Z_);_ie=n(SAe,"STRONG",{});var tet=s(_ie);r4o=r(tet,"transfo-xl"),tet.forEach(t),t4o=r(SAe," \u2014 "),VN=n(SAe,"A",{href:!0});var aet=s(VN);a4o=r(aet,"TransfoXLLMHeadModel"),aet.forEach(t),n4o=r(SAe," (Transformer-XL model)"),SAe.forEach(t),s4o=i(W),e2=n(W,"LI",{});var RAe=s(e2);bie=n(RAe,"STRONG",{});var net=s(bie);l4o=r(net,"trocr"),net.forEach(t),i4o=r(RAe," \u2014 "),XN=n(RAe,"A",{href:!0});var set=s(XN);d4o=r(set,"TrOCRForCausalLM"),set.forEach(t),c4o=r(RAe," (TrOCR model)"),RAe.forEach(t),f4o=i(W),o2=n(W,"LI",{});var BAe=s(o2);vie=n(BAe,"STRONG",{});var iet=s(vie);m4o=r(iet,"xglm"),iet.forEach(t),g4o=r(BAe," \u2014 "),zN=n(BAe,"A",{href:!0});var det=s(zN);h4o=r(det,"XGLMForCausalLM"),det.forEach(t),p4o=r(BAe," (XGLM model)"),BAe.forEach(t),u4o=i(W),r2=n(W,"LI",{});var PAe=s(r2);Fie=n(PAe,"STRONG",{});var cet=s(Fie);_4o=r(cet,"xlm"),cet.forEach(t),b4o=r(PAe," \u2014 "),QN=n(PAe,"A",{href:!0});var fet=s(QN);v4o=r(fet,"XLMWithLMHeadModel"),fet.forEach(t),F4o=r(PAe," (XLM model)"),PAe.forEach(t),T4o=i(W),t2=n(W,"LI",{});var IAe=s(t2);Tie=n(IAe,"STRONG",{});var met=s(Tie);M4o=r(met,"xlm-prophetnet"),met.forEach(t),E4o=r(IAe," \u2014 "),WN=n(IAe,"A",{href:!0});var get=s(WN);C4o=r(get,"XLMProphetNetForCausalLM"),get.forEach(t),w4o=r(IAe," (XLMProphetNet model)"),IAe.forEach(t),A4o=i(W),a2=n(W,"LI",{});var qAe=s(a2);Mie=n(qAe,"STRONG",{});var het=s(Mie);y4o=r(het,"xlm-roberta"),het.forEach(t),L4o=r(qAe," \u2014 "),HN=n(qAe,"A",{href:!0});var pet=s(HN);x4o=r(pet,"XLMRobertaForCausalLM"),pet.forEach(t),$4o=r(qAe," (XLM-RoBERTa model)"),qAe.forEach(t),k4o=i(W),n2=n(W,"LI",{});var NAe=s(n2);Eie=n(NAe,"STRONG",{});var uet=s(Eie);S4o=r(uet,"xlm-roberta-xl"),uet.forEach(t),R4o=r(NAe," \u2014 "),UN=n(NAe,"A",{href:!0});var _et=s(UN);B4o=r(_et,"XLMRobertaXLForCausalLM"),_et.forEach(t),P4o=r(NAe," (XLM-RoBERTa-XL model)"),NAe.forEach(t),I4o=i(W),s2=n(W,"LI",{});var jAe=s(s2);Cie=n(jAe,"STRONG",{});var bet=s(Cie);q4o=r(bet,"xlnet"),bet.forEach(t),N4o=r(jAe," \u2014 "),JN=n(jAe,"A",{href:!0});var vet=s(JN);j4o=r(vet,"XLNetLMHeadModel"),vet.forEach(t),D4o=r(jAe," (XLNet model)"),jAe.forEach(t),W.forEach(t),G4o=i(oa),l2=n(oa,"P",{});var DAe=s(l2);O4o=r(DAe,"The model is set in evaluation mode by default using "),wie=n(DAe,"CODE",{});var Fet=s(wie);V4o=r(Fet,"model.eval()"),Fet.forEach(t),X4o=r(DAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Aie=n(DAe,"CODE",{});var Tet=s(Aie);z4o=r(Tet,"model.train()"),Tet.forEach(t),DAe.forEach(t),Q4o=i(oa),T(i2.$$.fragment,oa),oa.forEach(t),Gs.forEach(t),QPe=i(f),$i=n(f,"H2",{class:!0});var Jqe=s($i);d2=n(Jqe,"A",{id:!0,class:!0,href:!0});var Met=s(d2);yie=n(Met,"SPAN",{});var Eet=s(yie);T(BA.$$.fragment,Eet),Eet.forEach(t),Met.forEach(t),W4o=i(Jqe),Lie=n(Jqe,"SPAN",{});var Cet=s(Lie);H4o=r(Cet,"AutoModelForMaskedLM"),Cet.forEach(t),Jqe.forEach(t),WPe=i(f),ko=n(f,"DIV",{class:!0});var Os=s(ko);T(PA.$$.fragment,Os),U4o=i(Os),ki=n(Os,"P",{});var sK=s(ki);J4o=r(sK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),YN=n(sK,"A",{href:!0});var wet=s(YN);Y4o=r(wet,"from_pretrained()"),wet.forEach(t),K4o=r(sK," class method or the "),KN=n(sK,"A",{href:!0});var Aet=s(KN);Z4o=r(Aet,"from_config()"),Aet.forEach(t),eEo=r(sK,` class
method.`),sK.forEach(t),oEo=i(Os),IA=n(Os,"P",{});var Yqe=s(IA);rEo=r(Yqe,"This class cannot be instantiated directly using "),xie=n(Yqe,"CODE",{});var yet=s(xie);tEo=r(yet,"__init__()"),yet.forEach(t),aEo=r(Yqe," (throws an error)."),Yqe.forEach(t),nEo=i(Os),at=n(Os,"DIV",{class:!0});var r3=s(at);T(qA.$$.fragment,r3),sEo=i(r3),$ie=n(r3,"P",{});var Let=s($ie);lEo=r(Let,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Let.forEach(t),iEo=i(r3),Si=n(r3,"P",{});var lK=s(Si);dEo=r(lK,`Note:
Loading a model from its configuration file does `),kie=n(lK,"STRONG",{});var xet=s(kie);cEo=r(xet,"not"),xet.forEach(t),fEo=r(lK,` load the model weights. It only affects the
model\u2019s configuration. Use `),ZN=n(lK,"A",{href:!0});var $et=s(ZN);mEo=r($et,"from_pretrained()"),$et.forEach(t),gEo=r(lK," to load the model weights."),lK.forEach(t),hEo=i(r3),T(c2.$$.fragment,r3),r3.forEach(t),pEo=i(Os),Ye=n(Os,"DIV",{class:!0});var ra=s(Ye);T(NA.$$.fragment,ra),uEo=i(ra),Sie=n(ra,"P",{});var ket=s(Sie);_Eo=r(ket,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),ket.forEach(t),bEo=i(ra),xa=n(ra,"P",{});var t3=s(xa);vEo=r(t3,"The model class to instantiate is selected based on the "),Rie=n(t3,"CODE",{});var Set=s(Rie);FEo=r(Set,"model_type"),Set.forEach(t),TEo=r(t3,` property of the config object (either
passed as an argument or loaded from `),Bie=n(t3,"CODE",{});var Ret=s(Bie);MEo=r(Ret,"pretrained_model_name_or_path"),Ret.forEach(t),EEo=r(t3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Pie=n(t3,"CODE",{});var Bet=s(Pie);CEo=r(Bet,"pretrained_model_name_or_path"),Bet.forEach(t),wEo=r(t3,":"),t3.forEach(t),AEo=i(ra),Q=n(ra,"UL",{});var H=s(Q);f2=n(H,"LI",{});var GAe=s(f2);Iie=n(GAe,"STRONG",{});var Pet=s(Iie);yEo=r(Pet,"albert"),Pet.forEach(t),LEo=r(GAe," \u2014 "),ej=n(GAe,"A",{href:!0});var Iet=s(ej);xEo=r(Iet,"AlbertForMaskedLM"),Iet.forEach(t),$Eo=r(GAe," (ALBERT model)"),GAe.forEach(t),kEo=i(H),m2=n(H,"LI",{});var OAe=s(m2);qie=n(OAe,"STRONG",{});var qet=s(qie);SEo=r(qet,"bart"),qet.forEach(t),REo=r(OAe," \u2014 "),oj=n(OAe,"A",{href:!0});var Net=s(oj);BEo=r(Net,"BartForConditionalGeneration"),Net.forEach(t),PEo=r(OAe," (BART model)"),OAe.forEach(t),IEo=i(H),g2=n(H,"LI",{});var VAe=s(g2);Nie=n(VAe,"STRONG",{});var jet=s(Nie);qEo=r(jet,"bert"),jet.forEach(t),NEo=r(VAe," \u2014 "),rj=n(VAe,"A",{href:!0});var Det=s(rj);jEo=r(Det,"BertForMaskedLM"),Det.forEach(t),DEo=r(VAe," (BERT model)"),VAe.forEach(t),GEo=i(H),h2=n(H,"LI",{});var XAe=s(h2);jie=n(XAe,"STRONG",{});var Get=s(jie);OEo=r(Get,"big_bird"),Get.forEach(t),VEo=r(XAe," \u2014 "),tj=n(XAe,"A",{href:!0});var Oet=s(tj);XEo=r(Oet,"BigBirdForMaskedLM"),Oet.forEach(t),zEo=r(XAe," (BigBird model)"),XAe.forEach(t),QEo=i(H),p2=n(H,"LI",{});var zAe=s(p2);Die=n(zAe,"STRONG",{});var Vet=s(Die);WEo=r(Vet,"camembert"),Vet.forEach(t),HEo=r(zAe," \u2014 "),aj=n(zAe,"A",{href:!0});var Xet=s(aj);UEo=r(Xet,"CamembertForMaskedLM"),Xet.forEach(t),JEo=r(zAe," (CamemBERT model)"),zAe.forEach(t),YEo=i(H),u2=n(H,"LI",{});var QAe=s(u2);Gie=n(QAe,"STRONG",{});var zet=s(Gie);KEo=r(zet,"convbert"),zet.forEach(t),ZEo=r(QAe," \u2014 "),nj=n(QAe,"A",{href:!0});var Qet=s(nj);e5o=r(Qet,"ConvBertForMaskedLM"),Qet.forEach(t),o5o=r(QAe," (ConvBERT model)"),QAe.forEach(t),r5o=i(H),_2=n(H,"LI",{});var WAe=s(_2);Oie=n(WAe,"STRONG",{});var Wet=s(Oie);t5o=r(Wet,"data2vec-text"),Wet.forEach(t),a5o=r(WAe," \u2014 "),sj=n(WAe,"A",{href:!0});var Het=s(sj);n5o=r(Het,"Data2VecTextForMaskedLM"),Het.forEach(t),s5o=r(WAe," (Data2VecText model)"),WAe.forEach(t),l5o=i(H),b2=n(H,"LI",{});var HAe=s(b2);Vie=n(HAe,"STRONG",{});var Uet=s(Vie);i5o=r(Uet,"deberta"),Uet.forEach(t),d5o=r(HAe," \u2014 "),lj=n(HAe,"A",{href:!0});var Jet=s(lj);c5o=r(Jet,"DebertaForMaskedLM"),Jet.forEach(t),f5o=r(HAe," (DeBERTa model)"),HAe.forEach(t),m5o=i(H),v2=n(H,"LI",{});var UAe=s(v2);Xie=n(UAe,"STRONG",{});var Yet=s(Xie);g5o=r(Yet,"deberta-v2"),Yet.forEach(t),h5o=r(UAe," \u2014 "),ij=n(UAe,"A",{href:!0});var Ket=s(ij);p5o=r(Ket,"DebertaV2ForMaskedLM"),Ket.forEach(t),u5o=r(UAe," (DeBERTa-v2 model)"),UAe.forEach(t),_5o=i(H),F2=n(H,"LI",{});var JAe=s(F2);zie=n(JAe,"STRONG",{});var Zet=s(zie);b5o=r(Zet,"distilbert"),Zet.forEach(t),v5o=r(JAe," \u2014 "),dj=n(JAe,"A",{href:!0});var eot=s(dj);F5o=r(eot,"DistilBertForMaskedLM"),eot.forEach(t),T5o=r(JAe," (DistilBERT model)"),JAe.forEach(t),M5o=i(H),T2=n(H,"LI",{});var YAe=s(T2);Qie=n(YAe,"STRONG",{});var oot=s(Qie);E5o=r(oot,"electra"),oot.forEach(t),C5o=r(YAe," \u2014 "),cj=n(YAe,"A",{href:!0});var rot=s(cj);w5o=r(rot,"ElectraForMaskedLM"),rot.forEach(t),A5o=r(YAe," (ELECTRA model)"),YAe.forEach(t),y5o=i(H),M2=n(H,"LI",{});var KAe=s(M2);Wie=n(KAe,"STRONG",{});var tot=s(Wie);L5o=r(tot,"flaubert"),tot.forEach(t),x5o=r(KAe," \u2014 "),fj=n(KAe,"A",{href:!0});var aot=s(fj);$5o=r(aot,"FlaubertWithLMHeadModel"),aot.forEach(t),k5o=r(KAe," (FlauBERT model)"),KAe.forEach(t),S5o=i(H),E2=n(H,"LI",{});var ZAe=s(E2);Hie=n(ZAe,"STRONG",{});var not=s(Hie);R5o=r(not,"fnet"),not.forEach(t),B5o=r(ZAe," \u2014 "),mj=n(ZAe,"A",{href:!0});var sot=s(mj);P5o=r(sot,"FNetForMaskedLM"),sot.forEach(t),I5o=r(ZAe," (FNet model)"),ZAe.forEach(t),q5o=i(H),C2=n(H,"LI",{});var eye=s(C2);Uie=n(eye,"STRONG",{});var lot=s(Uie);N5o=r(lot,"funnel"),lot.forEach(t),j5o=r(eye," \u2014 "),gj=n(eye,"A",{href:!0});var iot=s(gj);D5o=r(iot,"FunnelForMaskedLM"),iot.forEach(t),G5o=r(eye," (Funnel Transformer model)"),eye.forEach(t),O5o=i(H),w2=n(H,"LI",{});var oye=s(w2);Jie=n(oye,"STRONG",{});var dot=s(Jie);V5o=r(dot,"ibert"),dot.forEach(t),X5o=r(oye," \u2014 "),hj=n(oye,"A",{href:!0});var cot=s(hj);z5o=r(cot,"IBertForMaskedLM"),cot.forEach(t),Q5o=r(oye," (I-BERT model)"),oye.forEach(t),W5o=i(H),A2=n(H,"LI",{});var rye=s(A2);Yie=n(rye,"STRONG",{});var fot=s(Yie);H5o=r(fot,"layoutlm"),fot.forEach(t),U5o=r(rye," \u2014 "),pj=n(rye,"A",{href:!0});var mot=s(pj);J5o=r(mot,"LayoutLMForMaskedLM"),mot.forEach(t),Y5o=r(rye," (LayoutLM model)"),rye.forEach(t),K5o=i(H),y2=n(H,"LI",{});var tye=s(y2);Kie=n(tye,"STRONG",{});var got=s(Kie);Z5o=r(got,"longformer"),got.forEach(t),eCo=r(tye," \u2014 "),uj=n(tye,"A",{href:!0});var hot=s(uj);oCo=r(hot,"LongformerForMaskedLM"),hot.forEach(t),rCo=r(tye," (Longformer model)"),tye.forEach(t),tCo=i(H),L2=n(H,"LI",{});var aye=s(L2);Zie=n(aye,"STRONG",{});var pot=s(Zie);aCo=r(pot,"mbart"),pot.forEach(t),nCo=r(aye," \u2014 "),_j=n(aye,"A",{href:!0});var uot=s(_j);sCo=r(uot,"MBartForConditionalGeneration"),uot.forEach(t),lCo=r(aye," (mBART model)"),aye.forEach(t),iCo=i(H),x2=n(H,"LI",{});var nye=s(x2);ede=n(nye,"STRONG",{});var _ot=s(ede);dCo=r(_ot,"megatron-bert"),_ot.forEach(t),cCo=r(nye," \u2014 "),bj=n(nye,"A",{href:!0});var bot=s(bj);fCo=r(bot,"MegatronBertForMaskedLM"),bot.forEach(t),mCo=r(nye," (MegatronBert model)"),nye.forEach(t),gCo=i(H),$2=n(H,"LI",{});var sye=s($2);ode=n(sye,"STRONG",{});var vot=s(ode);hCo=r(vot,"mobilebert"),vot.forEach(t),pCo=r(sye," \u2014 "),vj=n(sye,"A",{href:!0});var Fot=s(vj);uCo=r(Fot,"MobileBertForMaskedLM"),Fot.forEach(t),_Co=r(sye," (MobileBERT model)"),sye.forEach(t),bCo=i(H),k2=n(H,"LI",{});var lye=s(k2);rde=n(lye,"STRONG",{});var Tot=s(rde);vCo=r(Tot,"mpnet"),Tot.forEach(t),FCo=r(lye," \u2014 "),Fj=n(lye,"A",{href:!0});var Mot=s(Fj);TCo=r(Mot,"MPNetForMaskedLM"),Mot.forEach(t),MCo=r(lye," (MPNet model)"),lye.forEach(t),ECo=i(H),S2=n(H,"LI",{});var iye=s(S2);tde=n(iye,"STRONG",{});var Eot=s(tde);CCo=r(Eot,"nystromformer"),Eot.forEach(t),wCo=r(iye," \u2014 "),Tj=n(iye,"A",{href:!0});var Cot=s(Tj);ACo=r(Cot,"NystromformerForMaskedLM"),Cot.forEach(t),yCo=r(iye," (Nystromformer model)"),iye.forEach(t),LCo=i(H),R2=n(H,"LI",{});var dye=s(R2);ade=n(dye,"STRONG",{});var wot=s(ade);xCo=r(wot,"perceiver"),wot.forEach(t),$Co=r(dye," \u2014 "),Mj=n(dye,"A",{href:!0});var Aot=s(Mj);kCo=r(Aot,"PerceiverForMaskedLM"),Aot.forEach(t),SCo=r(dye," (Perceiver model)"),dye.forEach(t),RCo=i(H),B2=n(H,"LI",{});var cye=s(B2);nde=n(cye,"STRONG",{});var yot=s(nde);BCo=r(yot,"qdqbert"),yot.forEach(t),PCo=r(cye," \u2014 "),Ej=n(cye,"A",{href:!0});var Lot=s(Ej);ICo=r(Lot,"QDQBertForMaskedLM"),Lot.forEach(t),qCo=r(cye," (QDQBert model)"),cye.forEach(t),NCo=i(H),P2=n(H,"LI",{});var fye=s(P2);sde=n(fye,"STRONG",{});var xot=s(sde);jCo=r(xot,"reformer"),xot.forEach(t),DCo=r(fye," \u2014 "),Cj=n(fye,"A",{href:!0});var $ot=s(Cj);GCo=r($ot,"ReformerForMaskedLM"),$ot.forEach(t),OCo=r(fye," (Reformer model)"),fye.forEach(t),VCo=i(H),I2=n(H,"LI",{});var mye=s(I2);lde=n(mye,"STRONG",{});var kot=s(lde);XCo=r(kot,"rembert"),kot.forEach(t),zCo=r(mye," \u2014 "),wj=n(mye,"A",{href:!0});var Sot=s(wj);QCo=r(Sot,"RemBertForMaskedLM"),Sot.forEach(t),WCo=r(mye," (RemBERT model)"),mye.forEach(t),HCo=i(H),q2=n(H,"LI",{});var gye=s(q2);ide=n(gye,"STRONG",{});var Rot=s(ide);UCo=r(Rot,"roberta"),Rot.forEach(t),JCo=r(gye," \u2014 "),Aj=n(gye,"A",{href:!0});var Bot=s(Aj);YCo=r(Bot,"RobertaForMaskedLM"),Bot.forEach(t),KCo=r(gye," (RoBERTa model)"),gye.forEach(t),ZCo=i(H),N2=n(H,"LI",{});var hye=s(N2);dde=n(hye,"STRONG",{});var Pot=s(dde);e3o=r(Pot,"roformer"),Pot.forEach(t),o3o=r(hye," \u2014 "),yj=n(hye,"A",{href:!0});var Iot=s(yj);r3o=r(Iot,"RoFormerForMaskedLM"),Iot.forEach(t),t3o=r(hye," (RoFormer model)"),hye.forEach(t),a3o=i(H),j2=n(H,"LI",{});var pye=s(j2);cde=n(pye,"STRONG",{});var qot=s(cde);n3o=r(qot,"squeezebert"),qot.forEach(t),s3o=r(pye," \u2014 "),Lj=n(pye,"A",{href:!0});var Not=s(Lj);l3o=r(Not,"SqueezeBertForMaskedLM"),Not.forEach(t),i3o=r(pye," (SqueezeBERT model)"),pye.forEach(t),d3o=i(H),D2=n(H,"LI",{});var uye=s(D2);fde=n(uye,"STRONG",{});var jot=s(fde);c3o=r(jot,"tapas"),jot.forEach(t),f3o=r(uye," \u2014 "),xj=n(uye,"A",{href:!0});var Dot=s(xj);m3o=r(Dot,"TapasForMaskedLM"),Dot.forEach(t),g3o=r(uye," (TAPAS model)"),uye.forEach(t),h3o=i(H),G2=n(H,"LI",{});var _ye=s(G2);mde=n(_ye,"STRONG",{});var Got=s(mde);p3o=r(Got,"wav2vec2"),Got.forEach(t),u3o=r(_ye," \u2014 "),gde=n(_ye,"CODE",{});var Oot=s(gde);_3o=r(Oot,"Wav2Vec2ForMaskedLM"),Oot.forEach(t),b3o=r(_ye," (Wav2Vec2 model)"),_ye.forEach(t),v3o=i(H),O2=n(H,"LI",{});var bye=s(O2);hde=n(bye,"STRONG",{});var Vot=s(hde);F3o=r(Vot,"xlm"),Vot.forEach(t),T3o=r(bye," \u2014 "),$j=n(bye,"A",{href:!0});var Xot=s($j);M3o=r(Xot,"XLMWithLMHeadModel"),Xot.forEach(t),E3o=r(bye," (XLM model)"),bye.forEach(t),C3o=i(H),V2=n(H,"LI",{});var vye=s(V2);pde=n(vye,"STRONG",{});var zot=s(pde);w3o=r(zot,"xlm-roberta"),zot.forEach(t),A3o=r(vye," \u2014 "),kj=n(vye,"A",{href:!0});var Qot=s(kj);y3o=r(Qot,"XLMRobertaForMaskedLM"),Qot.forEach(t),L3o=r(vye," (XLM-RoBERTa model)"),vye.forEach(t),x3o=i(H),X2=n(H,"LI",{});var Fye=s(X2);ude=n(Fye,"STRONG",{});var Wot=s(ude);$3o=r(Wot,"xlm-roberta-xl"),Wot.forEach(t),k3o=r(Fye," \u2014 "),Sj=n(Fye,"A",{href:!0});var Hot=s(Sj);S3o=r(Hot,"XLMRobertaXLForMaskedLM"),Hot.forEach(t),R3o=r(Fye," (XLM-RoBERTa-XL model)"),Fye.forEach(t),B3o=i(H),z2=n(H,"LI",{});var Tye=s(z2);_de=n(Tye,"STRONG",{});var Uot=s(_de);P3o=r(Uot,"yoso"),Uot.forEach(t),I3o=r(Tye," \u2014 "),Rj=n(Tye,"A",{href:!0});var Jot=s(Rj);q3o=r(Jot,"YosoForMaskedLM"),Jot.forEach(t),N3o=r(Tye," (YOSO model)"),Tye.forEach(t),H.forEach(t),j3o=i(ra),Q2=n(ra,"P",{});var Mye=s(Q2);D3o=r(Mye,"The model is set in evaluation mode by default using "),bde=n(Mye,"CODE",{});var Yot=s(bde);G3o=r(Yot,"model.eval()"),Yot.forEach(t),O3o=r(Mye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vde=n(Mye,"CODE",{});var Kot=s(vde);V3o=r(Kot,"model.train()"),Kot.forEach(t),Mye.forEach(t),X3o=i(ra),T(W2.$$.fragment,ra),ra.forEach(t),Os.forEach(t),HPe=i(f),Ri=n(f,"H2",{class:!0});var Kqe=s(Ri);H2=n(Kqe,"A",{id:!0,class:!0,href:!0});var Zot=s(H2);Fde=n(Zot,"SPAN",{});var ert=s(Fde);T(jA.$$.fragment,ert),ert.forEach(t),Zot.forEach(t),z3o=i(Kqe),Tde=n(Kqe,"SPAN",{});var ort=s(Tde);Q3o=r(ort,"AutoModelForSeq2SeqLM"),ort.forEach(t),Kqe.forEach(t),UPe=i(f),So=n(f,"DIV",{class:!0});var Vs=s(So);T(DA.$$.fragment,Vs),W3o=i(Vs),Bi=n(Vs,"P",{});var iK=s(Bi);H3o=r(iK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Bj=n(iK,"A",{href:!0});var rrt=s(Bj);U3o=r(rrt,"from_pretrained()"),rrt.forEach(t),J3o=r(iK," class method or the "),Pj=n(iK,"A",{href:!0});var trt=s(Pj);Y3o=r(trt,"from_config()"),trt.forEach(t),K3o=r(iK,` class
method.`),iK.forEach(t),Z3o=i(Vs),GA=n(Vs,"P",{});var Zqe=s(GA);ewo=r(Zqe,"This class cannot be instantiated directly using "),Mde=n(Zqe,"CODE",{});var art=s(Mde);owo=r(art,"__init__()"),art.forEach(t),rwo=r(Zqe," (throws an error)."),Zqe.forEach(t),two=i(Vs),nt=n(Vs,"DIV",{class:!0});var a3=s(nt);T(OA.$$.fragment,a3),awo=i(a3),Ede=n(a3,"P",{});var nrt=s(Ede);nwo=r(nrt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),nrt.forEach(t),swo=i(a3),Pi=n(a3,"P",{});var dK=s(Pi);lwo=r(dK,`Note:
Loading a model from its configuration file does `),Cde=n(dK,"STRONG",{});var srt=s(Cde);iwo=r(srt,"not"),srt.forEach(t),dwo=r(dK,` load the model weights. It only affects the
model\u2019s configuration. Use `),Ij=n(dK,"A",{href:!0});var lrt=s(Ij);cwo=r(lrt,"from_pretrained()"),lrt.forEach(t),fwo=r(dK," to load the model weights."),dK.forEach(t),mwo=i(a3),T(U2.$$.fragment,a3),a3.forEach(t),gwo=i(Vs),Ke=n(Vs,"DIV",{class:!0});var ta=s(Ke);T(VA.$$.fragment,ta),hwo=i(ta),wde=n(ta,"P",{});var irt=s(wde);pwo=r(irt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),irt.forEach(t),uwo=i(ta),$a=n(ta,"P",{});var n3=s($a);_wo=r(n3,"The model class to instantiate is selected based on the "),Ade=n(n3,"CODE",{});var drt=s(Ade);bwo=r(drt,"model_type"),drt.forEach(t),vwo=r(n3,` property of the config object (either
passed as an argument or loaded from `),yde=n(n3,"CODE",{});var crt=s(yde);Fwo=r(crt,"pretrained_model_name_or_path"),crt.forEach(t),Two=r(n3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lde=n(n3,"CODE",{});var frt=s(Lde);Mwo=r(frt,"pretrained_model_name_or_path"),frt.forEach(t),Ewo=r(n3,":"),n3.forEach(t),Cwo=i(ta),he=n(ta,"UL",{});var ue=s(he);J2=n(ue,"LI",{});var Eye=s(J2);xde=n(Eye,"STRONG",{});var mrt=s(xde);wwo=r(mrt,"bart"),mrt.forEach(t),Awo=r(Eye," \u2014 "),qj=n(Eye,"A",{href:!0});var grt=s(qj);ywo=r(grt,"BartForConditionalGeneration"),grt.forEach(t),Lwo=r(Eye," (BART model)"),Eye.forEach(t),xwo=i(ue),Y2=n(ue,"LI",{});var Cye=s(Y2);$de=n(Cye,"STRONG",{});var hrt=s($de);$wo=r(hrt,"bigbird_pegasus"),hrt.forEach(t),kwo=r(Cye," \u2014 "),Nj=n(Cye,"A",{href:!0});var prt=s(Nj);Swo=r(prt,"BigBirdPegasusForConditionalGeneration"),prt.forEach(t),Rwo=r(Cye," (BigBirdPegasus model)"),Cye.forEach(t),Bwo=i(ue),K2=n(ue,"LI",{});var wye=s(K2);kde=n(wye,"STRONG",{});var urt=s(kde);Pwo=r(urt,"blenderbot"),urt.forEach(t),Iwo=r(wye," \u2014 "),jj=n(wye,"A",{href:!0});var _rt=s(jj);qwo=r(_rt,"BlenderbotForConditionalGeneration"),_rt.forEach(t),Nwo=r(wye," (Blenderbot model)"),wye.forEach(t),jwo=i(ue),Z2=n(ue,"LI",{});var Aye=s(Z2);Sde=n(Aye,"STRONG",{});var brt=s(Sde);Dwo=r(brt,"blenderbot-small"),brt.forEach(t),Gwo=r(Aye," \u2014 "),Dj=n(Aye,"A",{href:!0});var vrt=s(Dj);Owo=r(vrt,"BlenderbotSmallForConditionalGeneration"),vrt.forEach(t),Vwo=r(Aye," (BlenderbotSmall model)"),Aye.forEach(t),Xwo=i(ue),e1=n(ue,"LI",{});var yye=s(e1);Rde=n(yye,"STRONG",{});var Frt=s(Rde);zwo=r(Frt,"encoder-decoder"),Frt.forEach(t),Qwo=r(yye," \u2014 "),Gj=n(yye,"A",{href:!0});var Trt=s(Gj);Wwo=r(Trt,"EncoderDecoderModel"),Trt.forEach(t),Hwo=r(yye," (Encoder decoder model)"),yye.forEach(t),Uwo=i(ue),o1=n(ue,"LI",{});var Lye=s(o1);Bde=n(Lye,"STRONG",{});var Mrt=s(Bde);Jwo=r(Mrt,"fsmt"),Mrt.forEach(t),Ywo=r(Lye," \u2014 "),Oj=n(Lye,"A",{href:!0});var Ert=s(Oj);Kwo=r(Ert,"FSMTForConditionalGeneration"),Ert.forEach(t),Zwo=r(Lye," (FairSeq Machine-Translation model)"),Lye.forEach(t),eAo=i(ue),r1=n(ue,"LI",{});var xye=s(r1);Pde=n(xye,"STRONG",{});var Crt=s(Pde);oAo=r(Crt,"led"),Crt.forEach(t),rAo=r(xye," \u2014 "),Vj=n(xye,"A",{href:!0});var wrt=s(Vj);tAo=r(wrt,"LEDForConditionalGeneration"),wrt.forEach(t),aAo=r(xye," (LED model)"),xye.forEach(t),nAo=i(ue),t1=n(ue,"LI",{});var $ye=s(t1);Ide=n($ye,"STRONG",{});var Art=s(Ide);sAo=r(Art,"m2m_100"),Art.forEach(t),lAo=r($ye," \u2014 "),Xj=n($ye,"A",{href:!0});var yrt=s(Xj);iAo=r(yrt,"M2M100ForConditionalGeneration"),yrt.forEach(t),dAo=r($ye," (M2M100 model)"),$ye.forEach(t),cAo=i(ue),a1=n(ue,"LI",{});var kye=s(a1);qde=n(kye,"STRONG",{});var Lrt=s(qde);fAo=r(Lrt,"marian"),Lrt.forEach(t),mAo=r(kye," \u2014 "),zj=n(kye,"A",{href:!0});var xrt=s(zj);gAo=r(xrt,"MarianMTModel"),xrt.forEach(t),hAo=r(kye," (Marian model)"),kye.forEach(t),pAo=i(ue),n1=n(ue,"LI",{});var Sye=s(n1);Nde=n(Sye,"STRONG",{});var $rt=s(Nde);uAo=r($rt,"mbart"),$rt.forEach(t),_Ao=r(Sye," \u2014 "),Qj=n(Sye,"A",{href:!0});var krt=s(Qj);bAo=r(krt,"MBartForConditionalGeneration"),krt.forEach(t),vAo=r(Sye," (mBART model)"),Sye.forEach(t),FAo=i(ue),s1=n(ue,"LI",{});var Rye=s(s1);jde=n(Rye,"STRONG",{});var Srt=s(jde);TAo=r(Srt,"mt5"),Srt.forEach(t),MAo=r(Rye," \u2014 "),Wj=n(Rye,"A",{href:!0});var Rrt=s(Wj);EAo=r(Rrt,"MT5ForConditionalGeneration"),Rrt.forEach(t),CAo=r(Rye," (mT5 model)"),Rye.forEach(t),wAo=i(ue),l1=n(ue,"LI",{});var Bye=s(l1);Dde=n(Bye,"STRONG",{});var Brt=s(Dde);AAo=r(Brt,"pegasus"),Brt.forEach(t),yAo=r(Bye," \u2014 "),Hj=n(Bye,"A",{href:!0});var Prt=s(Hj);LAo=r(Prt,"PegasusForConditionalGeneration"),Prt.forEach(t),xAo=r(Bye," (Pegasus model)"),Bye.forEach(t),$Ao=i(ue),i1=n(ue,"LI",{});var Pye=s(i1);Gde=n(Pye,"STRONG",{});var Irt=s(Gde);kAo=r(Irt,"plbart"),Irt.forEach(t),SAo=r(Pye," \u2014 "),Uj=n(Pye,"A",{href:!0});var qrt=s(Uj);RAo=r(qrt,"PLBartForConditionalGeneration"),qrt.forEach(t),BAo=r(Pye," (PLBart model)"),Pye.forEach(t),PAo=i(ue),d1=n(ue,"LI",{});var Iye=s(d1);Ode=n(Iye,"STRONG",{});var Nrt=s(Ode);IAo=r(Nrt,"prophetnet"),Nrt.forEach(t),qAo=r(Iye," \u2014 "),Jj=n(Iye,"A",{href:!0});var jrt=s(Jj);NAo=r(jrt,"ProphetNetForConditionalGeneration"),jrt.forEach(t),jAo=r(Iye," (ProphetNet model)"),Iye.forEach(t),DAo=i(ue),c1=n(ue,"LI",{});var qye=s(c1);Vde=n(qye,"STRONG",{});var Drt=s(Vde);GAo=r(Drt,"t5"),Drt.forEach(t),OAo=r(qye," \u2014 "),Yj=n(qye,"A",{href:!0});var Grt=s(Yj);VAo=r(Grt,"T5ForConditionalGeneration"),Grt.forEach(t),XAo=r(qye," (T5 model)"),qye.forEach(t),zAo=i(ue),f1=n(ue,"LI",{});var Nye=s(f1);Xde=n(Nye,"STRONG",{});var Ort=s(Xde);QAo=r(Ort,"tapex"),Ort.forEach(t),WAo=r(Nye," \u2014 "),Kj=n(Nye,"A",{href:!0});var Vrt=s(Kj);HAo=r(Vrt,"BartForConditionalGeneration"),Vrt.forEach(t),UAo=r(Nye," (TAPEX model)"),Nye.forEach(t),JAo=i(ue),m1=n(ue,"LI",{});var jye=s(m1);zde=n(jye,"STRONG",{});var Xrt=s(zde);YAo=r(Xrt,"xlm-prophetnet"),Xrt.forEach(t),KAo=r(jye," \u2014 "),Zj=n(jye,"A",{href:!0});var zrt=s(Zj);ZAo=r(zrt,"XLMProphetNetForConditionalGeneration"),zrt.forEach(t),eyo=r(jye," (XLMProphetNet model)"),jye.forEach(t),ue.forEach(t),oyo=i(ta),g1=n(ta,"P",{});var Dye=s(g1);ryo=r(Dye,"The model is set in evaluation mode by default using "),Qde=n(Dye,"CODE",{});var Qrt=s(Qde);tyo=r(Qrt,"model.eval()"),Qrt.forEach(t),ayo=r(Dye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Wde=n(Dye,"CODE",{});var Wrt=s(Wde);nyo=r(Wrt,"model.train()"),Wrt.forEach(t),Dye.forEach(t),syo=i(ta),T(h1.$$.fragment,ta),ta.forEach(t),Vs.forEach(t),JPe=i(f),Ii=n(f,"H2",{class:!0});var eNe=s(Ii);p1=n(eNe,"A",{id:!0,class:!0,href:!0});var Hrt=s(p1);Hde=n(Hrt,"SPAN",{});var Urt=s(Hde);T(XA.$$.fragment,Urt),Urt.forEach(t),Hrt.forEach(t),lyo=i(eNe),Ude=n(eNe,"SPAN",{});var Jrt=s(Ude);iyo=r(Jrt,"AutoModelForSequenceClassification"),Jrt.forEach(t),eNe.forEach(t),YPe=i(f),Ro=n(f,"DIV",{class:!0});var Xs=s(Ro);T(zA.$$.fragment,Xs),dyo=i(Xs),qi=n(Xs,"P",{});var cK=s(qi);cyo=r(cK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),eD=n(cK,"A",{href:!0});var Yrt=s(eD);fyo=r(Yrt,"from_pretrained()"),Yrt.forEach(t),myo=r(cK," class method or the "),oD=n(cK,"A",{href:!0});var Krt=s(oD);gyo=r(Krt,"from_config()"),Krt.forEach(t),hyo=r(cK,` class
method.`),cK.forEach(t),pyo=i(Xs),QA=n(Xs,"P",{});var oNe=s(QA);uyo=r(oNe,"This class cannot be instantiated directly using "),Jde=n(oNe,"CODE",{});var Zrt=s(Jde);_yo=r(Zrt,"__init__()"),Zrt.forEach(t),byo=r(oNe," (throws an error)."),oNe.forEach(t),vyo=i(Xs),st=n(Xs,"DIV",{class:!0});var s3=s(st);T(WA.$$.fragment,s3),Fyo=i(s3),Yde=n(s3,"P",{});var ett=s(Yde);Tyo=r(ett,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),ett.forEach(t),Myo=i(s3),Ni=n(s3,"P",{});var fK=s(Ni);Eyo=r(fK,`Note:
Loading a model from its configuration file does `),Kde=n(fK,"STRONG",{});var ott=s(Kde);Cyo=r(ott,"not"),ott.forEach(t),wyo=r(fK,` load the model weights. It only affects the
model\u2019s configuration. Use `),rD=n(fK,"A",{href:!0});var rtt=s(rD);Ayo=r(rtt,"from_pretrained()"),rtt.forEach(t),yyo=r(fK," to load the model weights."),fK.forEach(t),Lyo=i(s3),T(u1.$$.fragment,s3),s3.forEach(t),xyo=i(Xs),Ze=n(Xs,"DIV",{class:!0});var aa=s(Ze);T(HA.$$.fragment,aa),$yo=i(aa),Zde=n(aa,"P",{});var ttt=s(Zde);kyo=r(ttt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),ttt.forEach(t),Syo=i(aa),ka=n(aa,"P",{});var l3=s(ka);Ryo=r(l3,"The model class to instantiate is selected based on the "),ece=n(l3,"CODE",{});var att=s(ece);Byo=r(att,"model_type"),att.forEach(t),Pyo=r(l3,` property of the config object (either
passed as an argument or loaded from `),oce=n(l3,"CODE",{});var ntt=s(oce);Iyo=r(ntt,"pretrained_model_name_or_path"),ntt.forEach(t),qyo=r(l3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rce=n(l3,"CODE",{});var stt=s(rce);Nyo=r(stt,"pretrained_model_name_or_path"),stt.forEach(t),jyo=r(l3,":"),l3.forEach(t),Dyo=i(aa),q=n(aa,"UL",{});var N=s(q);_1=n(N,"LI",{});var Gye=s(_1);tce=n(Gye,"STRONG",{});var ltt=s(tce);Gyo=r(ltt,"albert"),ltt.forEach(t),Oyo=r(Gye," \u2014 "),tD=n(Gye,"A",{href:!0});var itt=s(tD);Vyo=r(itt,"AlbertForSequenceClassification"),itt.forEach(t),Xyo=r(Gye," (ALBERT model)"),Gye.forEach(t),zyo=i(N),b1=n(N,"LI",{});var Oye=s(b1);ace=n(Oye,"STRONG",{});var dtt=s(ace);Qyo=r(dtt,"bart"),dtt.forEach(t),Wyo=r(Oye," \u2014 "),aD=n(Oye,"A",{href:!0});var ctt=s(aD);Hyo=r(ctt,"BartForSequenceClassification"),ctt.forEach(t),Uyo=r(Oye," (BART model)"),Oye.forEach(t),Jyo=i(N),v1=n(N,"LI",{});var Vye=s(v1);nce=n(Vye,"STRONG",{});var ftt=s(nce);Yyo=r(ftt,"bert"),ftt.forEach(t),Kyo=r(Vye," \u2014 "),nD=n(Vye,"A",{href:!0});var mtt=s(nD);Zyo=r(mtt,"BertForSequenceClassification"),mtt.forEach(t),eLo=r(Vye," (BERT model)"),Vye.forEach(t),oLo=i(N),F1=n(N,"LI",{});var Xye=s(F1);sce=n(Xye,"STRONG",{});var gtt=s(sce);rLo=r(gtt,"big_bird"),gtt.forEach(t),tLo=r(Xye," \u2014 "),sD=n(Xye,"A",{href:!0});var htt=s(sD);aLo=r(htt,"BigBirdForSequenceClassification"),htt.forEach(t),nLo=r(Xye," (BigBird model)"),Xye.forEach(t),sLo=i(N),T1=n(N,"LI",{});var zye=s(T1);lce=n(zye,"STRONG",{});var ptt=s(lce);lLo=r(ptt,"bigbird_pegasus"),ptt.forEach(t),iLo=r(zye," \u2014 "),lD=n(zye,"A",{href:!0});var utt=s(lD);dLo=r(utt,"BigBirdPegasusForSequenceClassification"),utt.forEach(t),cLo=r(zye," (BigBirdPegasus model)"),zye.forEach(t),fLo=i(N),M1=n(N,"LI",{});var Qye=s(M1);ice=n(Qye,"STRONG",{});var _tt=s(ice);mLo=r(_tt,"camembert"),_tt.forEach(t),gLo=r(Qye," \u2014 "),iD=n(Qye,"A",{href:!0});var btt=s(iD);hLo=r(btt,"CamembertForSequenceClassification"),btt.forEach(t),pLo=r(Qye," (CamemBERT model)"),Qye.forEach(t),uLo=i(N),E1=n(N,"LI",{});var Wye=s(E1);dce=n(Wye,"STRONG",{});var vtt=s(dce);_Lo=r(vtt,"canine"),vtt.forEach(t),bLo=r(Wye," \u2014 "),dD=n(Wye,"A",{href:!0});var Ftt=s(dD);vLo=r(Ftt,"CanineForSequenceClassification"),Ftt.forEach(t),FLo=r(Wye," (Canine model)"),Wye.forEach(t),TLo=i(N),C1=n(N,"LI",{});var Hye=s(C1);cce=n(Hye,"STRONG",{});var Ttt=s(cce);MLo=r(Ttt,"convbert"),Ttt.forEach(t),ELo=r(Hye," \u2014 "),cD=n(Hye,"A",{href:!0});var Mtt=s(cD);CLo=r(Mtt,"ConvBertForSequenceClassification"),Mtt.forEach(t),wLo=r(Hye," (ConvBERT model)"),Hye.forEach(t),ALo=i(N),w1=n(N,"LI",{});var Uye=s(w1);fce=n(Uye,"STRONG",{});var Ett=s(fce);yLo=r(Ett,"ctrl"),Ett.forEach(t),LLo=r(Uye," \u2014 "),fD=n(Uye,"A",{href:!0});var Ctt=s(fD);xLo=r(Ctt,"CTRLForSequenceClassification"),Ctt.forEach(t),$Lo=r(Uye," (CTRL model)"),Uye.forEach(t),kLo=i(N),A1=n(N,"LI",{});var Jye=s(A1);mce=n(Jye,"STRONG",{});var wtt=s(mce);SLo=r(wtt,"data2vec-text"),wtt.forEach(t),RLo=r(Jye," \u2014 "),mD=n(Jye,"A",{href:!0});var Att=s(mD);BLo=r(Att,"Data2VecTextForSequenceClassification"),Att.forEach(t),PLo=r(Jye," (Data2VecText model)"),Jye.forEach(t),ILo=i(N),y1=n(N,"LI",{});var Yye=s(y1);gce=n(Yye,"STRONG",{});var ytt=s(gce);qLo=r(ytt,"deberta"),ytt.forEach(t),NLo=r(Yye," \u2014 "),gD=n(Yye,"A",{href:!0});var Ltt=s(gD);jLo=r(Ltt,"DebertaForSequenceClassification"),Ltt.forEach(t),DLo=r(Yye," (DeBERTa model)"),Yye.forEach(t),GLo=i(N),L1=n(N,"LI",{});var Kye=s(L1);hce=n(Kye,"STRONG",{});var xtt=s(hce);OLo=r(xtt,"deberta-v2"),xtt.forEach(t),VLo=r(Kye," \u2014 "),hD=n(Kye,"A",{href:!0});var $tt=s(hD);XLo=r($tt,"DebertaV2ForSequenceClassification"),$tt.forEach(t),zLo=r(Kye," (DeBERTa-v2 model)"),Kye.forEach(t),QLo=i(N),x1=n(N,"LI",{});var Zye=s(x1);pce=n(Zye,"STRONG",{});var ktt=s(pce);WLo=r(ktt,"distilbert"),ktt.forEach(t),HLo=r(Zye," \u2014 "),pD=n(Zye,"A",{href:!0});var Stt=s(pD);ULo=r(Stt,"DistilBertForSequenceClassification"),Stt.forEach(t),JLo=r(Zye," (DistilBERT model)"),Zye.forEach(t),YLo=i(N),$1=n(N,"LI",{});var eLe=s($1);uce=n(eLe,"STRONG",{});var Rtt=s(uce);KLo=r(Rtt,"electra"),Rtt.forEach(t),ZLo=r(eLe," \u2014 "),uD=n(eLe,"A",{href:!0});var Btt=s(uD);e8o=r(Btt,"ElectraForSequenceClassification"),Btt.forEach(t),o8o=r(eLe," (ELECTRA model)"),eLe.forEach(t),r8o=i(N),k1=n(N,"LI",{});var oLe=s(k1);_ce=n(oLe,"STRONG",{});var Ptt=s(_ce);t8o=r(Ptt,"flaubert"),Ptt.forEach(t),a8o=r(oLe," \u2014 "),_D=n(oLe,"A",{href:!0});var Itt=s(_D);n8o=r(Itt,"FlaubertForSequenceClassification"),Itt.forEach(t),s8o=r(oLe," (FlauBERT model)"),oLe.forEach(t),l8o=i(N),S1=n(N,"LI",{});var rLe=s(S1);bce=n(rLe,"STRONG",{});var qtt=s(bce);i8o=r(qtt,"fnet"),qtt.forEach(t),d8o=r(rLe," \u2014 "),bD=n(rLe,"A",{href:!0});var Ntt=s(bD);c8o=r(Ntt,"FNetForSequenceClassification"),Ntt.forEach(t),f8o=r(rLe," (FNet model)"),rLe.forEach(t),m8o=i(N),R1=n(N,"LI",{});var tLe=s(R1);vce=n(tLe,"STRONG",{});var jtt=s(vce);g8o=r(jtt,"funnel"),jtt.forEach(t),h8o=r(tLe," \u2014 "),vD=n(tLe,"A",{href:!0});var Dtt=s(vD);p8o=r(Dtt,"FunnelForSequenceClassification"),Dtt.forEach(t),u8o=r(tLe," (Funnel Transformer model)"),tLe.forEach(t),_8o=i(N),B1=n(N,"LI",{});var aLe=s(B1);Fce=n(aLe,"STRONG",{});var Gtt=s(Fce);b8o=r(Gtt,"gpt2"),Gtt.forEach(t),v8o=r(aLe," \u2014 "),FD=n(aLe,"A",{href:!0});var Ott=s(FD);F8o=r(Ott,"GPT2ForSequenceClassification"),Ott.forEach(t),T8o=r(aLe," (OpenAI GPT-2 model)"),aLe.forEach(t),M8o=i(N),P1=n(N,"LI",{});var nLe=s(P1);Tce=n(nLe,"STRONG",{});var Vtt=s(Tce);E8o=r(Vtt,"gpt_neo"),Vtt.forEach(t),C8o=r(nLe," \u2014 "),TD=n(nLe,"A",{href:!0});var Xtt=s(TD);w8o=r(Xtt,"GPTNeoForSequenceClassification"),Xtt.forEach(t),A8o=r(nLe," (GPT Neo model)"),nLe.forEach(t),y8o=i(N),I1=n(N,"LI",{});var sLe=s(I1);Mce=n(sLe,"STRONG",{});var ztt=s(Mce);L8o=r(ztt,"gptj"),ztt.forEach(t),x8o=r(sLe," \u2014 "),MD=n(sLe,"A",{href:!0});var Qtt=s(MD);$8o=r(Qtt,"GPTJForSequenceClassification"),Qtt.forEach(t),k8o=r(sLe," (GPT-J model)"),sLe.forEach(t),S8o=i(N),q1=n(N,"LI",{});var lLe=s(q1);Ece=n(lLe,"STRONG",{});var Wtt=s(Ece);R8o=r(Wtt,"ibert"),Wtt.forEach(t),B8o=r(lLe," \u2014 "),ED=n(lLe,"A",{href:!0});var Htt=s(ED);P8o=r(Htt,"IBertForSequenceClassification"),Htt.forEach(t),I8o=r(lLe," (I-BERT model)"),lLe.forEach(t),q8o=i(N),N1=n(N,"LI",{});var iLe=s(N1);Cce=n(iLe,"STRONG",{});var Utt=s(Cce);N8o=r(Utt,"layoutlm"),Utt.forEach(t),j8o=r(iLe," \u2014 "),CD=n(iLe,"A",{href:!0});var Jtt=s(CD);D8o=r(Jtt,"LayoutLMForSequenceClassification"),Jtt.forEach(t),G8o=r(iLe," (LayoutLM model)"),iLe.forEach(t),O8o=i(N),j1=n(N,"LI",{});var dLe=s(j1);wce=n(dLe,"STRONG",{});var Ytt=s(wce);V8o=r(Ytt,"layoutlmv2"),Ytt.forEach(t),X8o=r(dLe," \u2014 "),wD=n(dLe,"A",{href:!0});var Ktt=s(wD);z8o=r(Ktt,"LayoutLMv2ForSequenceClassification"),Ktt.forEach(t),Q8o=r(dLe," (LayoutLMv2 model)"),dLe.forEach(t),W8o=i(N),D1=n(N,"LI",{});var cLe=s(D1);Ace=n(cLe,"STRONG",{});var Ztt=s(Ace);H8o=r(Ztt,"led"),Ztt.forEach(t),U8o=r(cLe," \u2014 "),AD=n(cLe,"A",{href:!0});var eat=s(AD);J8o=r(eat,"LEDForSequenceClassification"),eat.forEach(t),Y8o=r(cLe," (LED model)"),cLe.forEach(t),K8o=i(N),G1=n(N,"LI",{});var fLe=s(G1);yce=n(fLe,"STRONG",{});var oat=s(yce);Z8o=r(oat,"longformer"),oat.forEach(t),exo=r(fLe," \u2014 "),yD=n(fLe,"A",{href:!0});var rat=s(yD);oxo=r(rat,"LongformerForSequenceClassification"),rat.forEach(t),rxo=r(fLe," (Longformer model)"),fLe.forEach(t),txo=i(N),O1=n(N,"LI",{});var mLe=s(O1);Lce=n(mLe,"STRONG",{});var tat=s(Lce);axo=r(tat,"mbart"),tat.forEach(t),nxo=r(mLe," \u2014 "),LD=n(mLe,"A",{href:!0});var aat=s(LD);sxo=r(aat,"MBartForSequenceClassification"),aat.forEach(t),lxo=r(mLe," (mBART model)"),mLe.forEach(t),ixo=i(N),V1=n(N,"LI",{});var gLe=s(V1);xce=n(gLe,"STRONG",{});var nat=s(xce);dxo=r(nat,"megatron-bert"),nat.forEach(t),cxo=r(gLe," \u2014 "),xD=n(gLe,"A",{href:!0});var sat=s(xD);fxo=r(sat,"MegatronBertForSequenceClassification"),sat.forEach(t),mxo=r(gLe," (MegatronBert model)"),gLe.forEach(t),gxo=i(N),X1=n(N,"LI",{});var hLe=s(X1);$ce=n(hLe,"STRONG",{});var lat=s($ce);hxo=r(lat,"mobilebert"),lat.forEach(t),pxo=r(hLe," \u2014 "),$D=n(hLe,"A",{href:!0});var iat=s($D);uxo=r(iat,"MobileBertForSequenceClassification"),iat.forEach(t),_xo=r(hLe," (MobileBERT model)"),hLe.forEach(t),bxo=i(N),z1=n(N,"LI",{});var pLe=s(z1);kce=n(pLe,"STRONG",{});var dat=s(kce);vxo=r(dat,"mpnet"),dat.forEach(t),Fxo=r(pLe," \u2014 "),kD=n(pLe,"A",{href:!0});var cat=s(kD);Txo=r(cat,"MPNetForSequenceClassification"),cat.forEach(t),Mxo=r(pLe," (MPNet model)"),pLe.forEach(t),Exo=i(N),Q1=n(N,"LI",{});var uLe=s(Q1);Sce=n(uLe,"STRONG",{});var fat=s(Sce);Cxo=r(fat,"nystromformer"),fat.forEach(t),wxo=r(uLe," \u2014 "),SD=n(uLe,"A",{href:!0});var mat=s(SD);Axo=r(mat,"NystromformerForSequenceClassification"),mat.forEach(t),yxo=r(uLe," (Nystromformer model)"),uLe.forEach(t),Lxo=i(N),W1=n(N,"LI",{});var _Le=s(W1);Rce=n(_Le,"STRONG",{});var gat=s(Rce);xxo=r(gat,"openai-gpt"),gat.forEach(t),$xo=r(_Le," \u2014 "),RD=n(_Le,"A",{href:!0});var hat=s(RD);kxo=r(hat,"OpenAIGPTForSequenceClassification"),hat.forEach(t),Sxo=r(_Le," (OpenAI GPT model)"),_Le.forEach(t),Rxo=i(N),H1=n(N,"LI",{});var bLe=s(H1);Bce=n(bLe,"STRONG",{});var pat=s(Bce);Bxo=r(pat,"perceiver"),pat.forEach(t),Pxo=r(bLe," \u2014 "),BD=n(bLe,"A",{href:!0});var uat=s(BD);Ixo=r(uat,"PerceiverForSequenceClassification"),uat.forEach(t),qxo=r(bLe," (Perceiver model)"),bLe.forEach(t),Nxo=i(N),U1=n(N,"LI",{});var vLe=s(U1);Pce=n(vLe,"STRONG",{});var _at=s(Pce);jxo=r(_at,"plbart"),_at.forEach(t),Dxo=r(vLe," \u2014 "),PD=n(vLe,"A",{href:!0});var bat=s(PD);Gxo=r(bat,"PLBartForSequenceClassification"),bat.forEach(t),Oxo=r(vLe," (PLBart model)"),vLe.forEach(t),Vxo=i(N),J1=n(N,"LI",{});var FLe=s(J1);Ice=n(FLe,"STRONG",{});var vat=s(Ice);Xxo=r(vat,"qdqbert"),vat.forEach(t),zxo=r(FLe," \u2014 "),ID=n(FLe,"A",{href:!0});var Fat=s(ID);Qxo=r(Fat,"QDQBertForSequenceClassification"),Fat.forEach(t),Wxo=r(FLe," (QDQBert model)"),FLe.forEach(t),Hxo=i(N),Y1=n(N,"LI",{});var TLe=s(Y1);qce=n(TLe,"STRONG",{});var Tat=s(qce);Uxo=r(Tat,"reformer"),Tat.forEach(t),Jxo=r(TLe," \u2014 "),qD=n(TLe,"A",{href:!0});var Mat=s(qD);Yxo=r(Mat,"ReformerForSequenceClassification"),Mat.forEach(t),Kxo=r(TLe," (Reformer model)"),TLe.forEach(t),Zxo=i(N),K1=n(N,"LI",{});var MLe=s(K1);Nce=n(MLe,"STRONG",{});var Eat=s(Nce);e9o=r(Eat,"rembert"),Eat.forEach(t),o9o=r(MLe," \u2014 "),ND=n(MLe,"A",{href:!0});var Cat=s(ND);r9o=r(Cat,"RemBertForSequenceClassification"),Cat.forEach(t),t9o=r(MLe," (RemBERT model)"),MLe.forEach(t),a9o=i(N),Z1=n(N,"LI",{});var ELe=s(Z1);jce=n(ELe,"STRONG",{});var wat=s(jce);n9o=r(wat,"roberta"),wat.forEach(t),s9o=r(ELe," \u2014 "),jD=n(ELe,"A",{href:!0});var Aat=s(jD);l9o=r(Aat,"RobertaForSequenceClassification"),Aat.forEach(t),i9o=r(ELe," (RoBERTa model)"),ELe.forEach(t),d9o=i(N),eb=n(N,"LI",{});var CLe=s(eb);Dce=n(CLe,"STRONG",{});var yat=s(Dce);c9o=r(yat,"roformer"),yat.forEach(t),f9o=r(CLe," \u2014 "),DD=n(CLe,"A",{href:!0});var Lat=s(DD);m9o=r(Lat,"RoFormerForSequenceClassification"),Lat.forEach(t),g9o=r(CLe," (RoFormer model)"),CLe.forEach(t),h9o=i(N),ob=n(N,"LI",{});var wLe=s(ob);Gce=n(wLe,"STRONG",{});var xat=s(Gce);p9o=r(xat,"squeezebert"),xat.forEach(t),u9o=r(wLe," \u2014 "),GD=n(wLe,"A",{href:!0});var $at=s(GD);_9o=r($at,"SqueezeBertForSequenceClassification"),$at.forEach(t),b9o=r(wLe," (SqueezeBERT model)"),wLe.forEach(t),v9o=i(N),rb=n(N,"LI",{});var ALe=s(rb);Oce=n(ALe,"STRONG",{});var kat=s(Oce);F9o=r(kat,"tapas"),kat.forEach(t),T9o=r(ALe," \u2014 "),OD=n(ALe,"A",{href:!0});var Sat=s(OD);M9o=r(Sat,"TapasForSequenceClassification"),Sat.forEach(t),E9o=r(ALe," (TAPAS model)"),ALe.forEach(t),C9o=i(N),tb=n(N,"LI",{});var yLe=s(tb);Vce=n(yLe,"STRONG",{});var Rat=s(Vce);w9o=r(Rat,"tapex"),Rat.forEach(t),A9o=r(yLe," \u2014 "),VD=n(yLe,"A",{href:!0});var Bat=s(VD);y9o=r(Bat,"BartForSequenceClassification"),Bat.forEach(t),L9o=r(yLe," (TAPEX model)"),yLe.forEach(t),x9o=i(N),ab=n(N,"LI",{});var LLe=s(ab);Xce=n(LLe,"STRONG",{});var Pat=s(Xce);$9o=r(Pat,"transfo-xl"),Pat.forEach(t),k9o=r(LLe," \u2014 "),XD=n(LLe,"A",{href:!0});var Iat=s(XD);S9o=r(Iat,"TransfoXLForSequenceClassification"),Iat.forEach(t),R9o=r(LLe," (Transformer-XL model)"),LLe.forEach(t),B9o=i(N),nb=n(N,"LI",{});var xLe=s(nb);zce=n(xLe,"STRONG",{});var qat=s(zce);P9o=r(qat,"xlm"),qat.forEach(t),I9o=r(xLe," \u2014 "),zD=n(xLe,"A",{href:!0});var Nat=s(zD);q9o=r(Nat,"XLMForSequenceClassification"),Nat.forEach(t),N9o=r(xLe," (XLM model)"),xLe.forEach(t),j9o=i(N),sb=n(N,"LI",{});var $Le=s(sb);Qce=n($Le,"STRONG",{});var jat=s(Qce);D9o=r(jat,"xlm-roberta"),jat.forEach(t),G9o=r($Le," \u2014 "),QD=n($Le,"A",{href:!0});var Dat=s(QD);O9o=r(Dat,"XLMRobertaForSequenceClassification"),Dat.forEach(t),V9o=r($Le," (XLM-RoBERTa model)"),$Le.forEach(t),X9o=i(N),lb=n(N,"LI",{});var kLe=s(lb);Wce=n(kLe,"STRONG",{});var Gat=s(Wce);z9o=r(Gat,"xlm-roberta-xl"),Gat.forEach(t),Q9o=r(kLe," \u2014 "),WD=n(kLe,"A",{href:!0});var Oat=s(WD);W9o=r(Oat,"XLMRobertaXLForSequenceClassification"),Oat.forEach(t),H9o=r(kLe," (XLM-RoBERTa-XL model)"),kLe.forEach(t),U9o=i(N),ib=n(N,"LI",{});var SLe=s(ib);Hce=n(SLe,"STRONG",{});var Vat=s(Hce);J9o=r(Vat,"xlnet"),Vat.forEach(t),Y9o=r(SLe," \u2014 "),HD=n(SLe,"A",{href:!0});var Xat=s(HD);K9o=r(Xat,"XLNetForSequenceClassification"),Xat.forEach(t),Z9o=r(SLe," (XLNet model)"),SLe.forEach(t),e$o=i(N),db=n(N,"LI",{});var RLe=s(db);Uce=n(RLe,"STRONG",{});var zat=s(Uce);o$o=r(zat,"yoso"),zat.forEach(t),r$o=r(RLe," \u2014 "),UD=n(RLe,"A",{href:!0});var Qat=s(UD);t$o=r(Qat,"YosoForSequenceClassification"),Qat.forEach(t),a$o=r(RLe," (YOSO model)"),RLe.forEach(t),N.forEach(t),n$o=i(aa),cb=n(aa,"P",{});var BLe=s(cb);s$o=r(BLe,"The model is set in evaluation mode by default using "),Jce=n(BLe,"CODE",{});var Wat=s(Jce);l$o=r(Wat,"model.eval()"),Wat.forEach(t),i$o=r(BLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Yce=n(BLe,"CODE",{});var Hat=s(Yce);d$o=r(Hat,"model.train()"),Hat.forEach(t),BLe.forEach(t),c$o=i(aa),T(fb.$$.fragment,aa),aa.forEach(t),Xs.forEach(t),KPe=i(f),ji=n(f,"H2",{class:!0});var rNe=s(ji);mb=n(rNe,"A",{id:!0,class:!0,href:!0});var Uat=s(mb);Kce=n(Uat,"SPAN",{});var Jat=s(Kce);T(UA.$$.fragment,Jat),Jat.forEach(t),Uat.forEach(t),f$o=i(rNe),Zce=n(rNe,"SPAN",{});var Yat=s(Zce);m$o=r(Yat,"AutoModelForMultipleChoice"),Yat.forEach(t),rNe.forEach(t),ZPe=i(f),Bo=n(f,"DIV",{class:!0});var zs=s(Bo);T(JA.$$.fragment,zs),g$o=i(zs),Di=n(zs,"P",{});var mK=s(Di);h$o=r(mK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),JD=n(mK,"A",{href:!0});var Kat=s(JD);p$o=r(Kat,"from_pretrained()"),Kat.forEach(t),u$o=r(mK," class method or the "),YD=n(mK,"A",{href:!0});var Zat=s(YD);_$o=r(Zat,"from_config()"),Zat.forEach(t),b$o=r(mK,` class
method.`),mK.forEach(t),v$o=i(zs),YA=n(zs,"P",{});var tNe=s(YA);F$o=r(tNe,"This class cannot be instantiated directly using "),efe=n(tNe,"CODE",{});var ent=s(efe);T$o=r(ent,"__init__()"),ent.forEach(t),M$o=r(tNe," (throws an error)."),tNe.forEach(t),E$o=i(zs),lt=n(zs,"DIV",{class:!0});var i3=s(lt);T(KA.$$.fragment,i3),C$o=i(i3),ofe=n(i3,"P",{});var ont=s(ofe);w$o=r(ont,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),ont.forEach(t),A$o=i(i3),Gi=n(i3,"P",{});var gK=s(Gi);y$o=r(gK,`Note:
Loading a model from its configuration file does `),rfe=n(gK,"STRONG",{});var rnt=s(rfe);L$o=r(rnt,"not"),rnt.forEach(t),x$o=r(gK,` load the model weights. It only affects the
model\u2019s configuration. Use `),KD=n(gK,"A",{href:!0});var tnt=s(KD);$$o=r(tnt,"from_pretrained()"),tnt.forEach(t),k$o=r(gK," to load the model weights."),gK.forEach(t),S$o=i(i3),T(gb.$$.fragment,i3),i3.forEach(t),R$o=i(zs),eo=n(zs,"DIV",{class:!0});var na=s(eo);T(ZA.$$.fragment,na),B$o=i(na),tfe=n(na,"P",{});var ant=s(tfe);P$o=r(ant,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),ant.forEach(t),I$o=i(na),Sa=n(na,"P",{});var d3=s(Sa);q$o=r(d3,"The model class to instantiate is selected based on the "),afe=n(d3,"CODE",{});var nnt=s(afe);N$o=r(nnt,"model_type"),nnt.forEach(t),j$o=r(d3,` property of the config object (either
passed as an argument or loaded from `),nfe=n(d3,"CODE",{});var snt=s(nfe);D$o=r(snt,"pretrained_model_name_or_path"),snt.forEach(t),G$o=r(d3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sfe=n(d3,"CODE",{});var lnt=s(sfe);O$o=r(lnt,"pretrained_model_name_or_path"),lnt.forEach(t),V$o=r(d3,":"),d3.forEach(t),X$o=i(na),Y=n(na,"UL",{});var K=s(Y);hb=n(K,"LI",{});var PLe=s(hb);lfe=n(PLe,"STRONG",{});var int=s(lfe);z$o=r(int,"albert"),int.forEach(t),Q$o=r(PLe," \u2014 "),ZD=n(PLe,"A",{href:!0});var dnt=s(ZD);W$o=r(dnt,"AlbertForMultipleChoice"),dnt.forEach(t),H$o=r(PLe," (ALBERT model)"),PLe.forEach(t),U$o=i(K),pb=n(K,"LI",{});var ILe=s(pb);ife=n(ILe,"STRONG",{});var cnt=s(ife);J$o=r(cnt,"bert"),cnt.forEach(t),Y$o=r(ILe," \u2014 "),eG=n(ILe,"A",{href:!0});var fnt=s(eG);K$o=r(fnt,"BertForMultipleChoice"),fnt.forEach(t),Z$o=r(ILe," (BERT model)"),ILe.forEach(t),eko=i(K),ub=n(K,"LI",{});var qLe=s(ub);dfe=n(qLe,"STRONG",{});var mnt=s(dfe);oko=r(mnt,"big_bird"),mnt.forEach(t),rko=r(qLe," \u2014 "),oG=n(qLe,"A",{href:!0});var gnt=s(oG);tko=r(gnt,"BigBirdForMultipleChoice"),gnt.forEach(t),ako=r(qLe," (BigBird model)"),qLe.forEach(t),nko=i(K),_b=n(K,"LI",{});var NLe=s(_b);cfe=n(NLe,"STRONG",{});var hnt=s(cfe);sko=r(hnt,"camembert"),hnt.forEach(t),lko=r(NLe," \u2014 "),rG=n(NLe,"A",{href:!0});var pnt=s(rG);iko=r(pnt,"CamembertForMultipleChoice"),pnt.forEach(t),dko=r(NLe," (CamemBERT model)"),NLe.forEach(t),cko=i(K),bb=n(K,"LI",{});var jLe=s(bb);ffe=n(jLe,"STRONG",{});var unt=s(ffe);fko=r(unt,"canine"),unt.forEach(t),mko=r(jLe," \u2014 "),tG=n(jLe,"A",{href:!0});var _nt=s(tG);gko=r(_nt,"CanineForMultipleChoice"),_nt.forEach(t),hko=r(jLe," (Canine model)"),jLe.forEach(t),pko=i(K),vb=n(K,"LI",{});var DLe=s(vb);mfe=n(DLe,"STRONG",{});var bnt=s(mfe);uko=r(bnt,"convbert"),bnt.forEach(t),_ko=r(DLe," \u2014 "),aG=n(DLe,"A",{href:!0});var vnt=s(aG);bko=r(vnt,"ConvBertForMultipleChoice"),vnt.forEach(t),vko=r(DLe," (ConvBERT model)"),DLe.forEach(t),Fko=i(K),Fb=n(K,"LI",{});var GLe=s(Fb);gfe=n(GLe,"STRONG",{});var Fnt=s(gfe);Tko=r(Fnt,"data2vec-text"),Fnt.forEach(t),Mko=r(GLe," \u2014 "),nG=n(GLe,"A",{href:!0});var Tnt=s(nG);Eko=r(Tnt,"Data2VecTextForMultipleChoice"),Tnt.forEach(t),Cko=r(GLe," (Data2VecText model)"),GLe.forEach(t),wko=i(K),Tb=n(K,"LI",{});var OLe=s(Tb);hfe=n(OLe,"STRONG",{});var Mnt=s(hfe);Ako=r(Mnt,"deberta-v2"),Mnt.forEach(t),yko=r(OLe," \u2014 "),sG=n(OLe,"A",{href:!0});var Ent=s(sG);Lko=r(Ent,"DebertaV2ForMultipleChoice"),Ent.forEach(t),xko=r(OLe," (DeBERTa-v2 model)"),OLe.forEach(t),$ko=i(K),Mb=n(K,"LI",{});var VLe=s(Mb);pfe=n(VLe,"STRONG",{});var Cnt=s(pfe);kko=r(Cnt,"distilbert"),Cnt.forEach(t),Sko=r(VLe," \u2014 "),lG=n(VLe,"A",{href:!0});var wnt=s(lG);Rko=r(wnt,"DistilBertForMultipleChoice"),wnt.forEach(t),Bko=r(VLe," (DistilBERT model)"),VLe.forEach(t),Pko=i(K),Eb=n(K,"LI",{});var XLe=s(Eb);ufe=n(XLe,"STRONG",{});var Ant=s(ufe);Iko=r(Ant,"electra"),Ant.forEach(t),qko=r(XLe," \u2014 "),iG=n(XLe,"A",{href:!0});var ynt=s(iG);Nko=r(ynt,"ElectraForMultipleChoice"),ynt.forEach(t),jko=r(XLe," (ELECTRA model)"),XLe.forEach(t),Dko=i(K),Cb=n(K,"LI",{});var zLe=s(Cb);_fe=n(zLe,"STRONG",{});var Lnt=s(_fe);Gko=r(Lnt,"flaubert"),Lnt.forEach(t),Oko=r(zLe," \u2014 "),dG=n(zLe,"A",{href:!0});var xnt=s(dG);Vko=r(xnt,"FlaubertForMultipleChoice"),xnt.forEach(t),Xko=r(zLe," (FlauBERT model)"),zLe.forEach(t),zko=i(K),wb=n(K,"LI",{});var QLe=s(wb);bfe=n(QLe,"STRONG",{});var $nt=s(bfe);Qko=r($nt,"fnet"),$nt.forEach(t),Wko=r(QLe," \u2014 "),cG=n(QLe,"A",{href:!0});var knt=s(cG);Hko=r(knt,"FNetForMultipleChoice"),knt.forEach(t),Uko=r(QLe," (FNet model)"),QLe.forEach(t),Jko=i(K),Ab=n(K,"LI",{});var WLe=s(Ab);vfe=n(WLe,"STRONG",{});var Snt=s(vfe);Yko=r(Snt,"funnel"),Snt.forEach(t),Kko=r(WLe," \u2014 "),fG=n(WLe,"A",{href:!0});var Rnt=s(fG);Zko=r(Rnt,"FunnelForMultipleChoice"),Rnt.forEach(t),eSo=r(WLe," (Funnel Transformer model)"),WLe.forEach(t),oSo=i(K),yb=n(K,"LI",{});var HLe=s(yb);Ffe=n(HLe,"STRONG",{});var Bnt=s(Ffe);rSo=r(Bnt,"ibert"),Bnt.forEach(t),tSo=r(HLe," \u2014 "),mG=n(HLe,"A",{href:!0});var Pnt=s(mG);aSo=r(Pnt,"IBertForMultipleChoice"),Pnt.forEach(t),nSo=r(HLe," (I-BERT model)"),HLe.forEach(t),sSo=i(K),Lb=n(K,"LI",{});var ULe=s(Lb);Tfe=n(ULe,"STRONG",{});var Int=s(Tfe);lSo=r(Int,"longformer"),Int.forEach(t),iSo=r(ULe," \u2014 "),gG=n(ULe,"A",{href:!0});var qnt=s(gG);dSo=r(qnt,"LongformerForMultipleChoice"),qnt.forEach(t),cSo=r(ULe," (Longformer model)"),ULe.forEach(t),fSo=i(K),xb=n(K,"LI",{});var JLe=s(xb);Mfe=n(JLe,"STRONG",{});var Nnt=s(Mfe);mSo=r(Nnt,"megatron-bert"),Nnt.forEach(t),gSo=r(JLe," \u2014 "),hG=n(JLe,"A",{href:!0});var jnt=s(hG);hSo=r(jnt,"MegatronBertForMultipleChoice"),jnt.forEach(t),pSo=r(JLe," (MegatronBert model)"),JLe.forEach(t),uSo=i(K),$b=n(K,"LI",{});var YLe=s($b);Efe=n(YLe,"STRONG",{});var Dnt=s(Efe);_So=r(Dnt,"mobilebert"),Dnt.forEach(t),bSo=r(YLe," \u2014 "),pG=n(YLe,"A",{href:!0});var Gnt=s(pG);vSo=r(Gnt,"MobileBertForMultipleChoice"),Gnt.forEach(t),FSo=r(YLe," (MobileBERT model)"),YLe.forEach(t),TSo=i(K),kb=n(K,"LI",{});var KLe=s(kb);Cfe=n(KLe,"STRONG",{});var Ont=s(Cfe);MSo=r(Ont,"mpnet"),Ont.forEach(t),ESo=r(KLe," \u2014 "),uG=n(KLe,"A",{href:!0});var Vnt=s(uG);CSo=r(Vnt,"MPNetForMultipleChoice"),Vnt.forEach(t),wSo=r(KLe," (MPNet model)"),KLe.forEach(t),ASo=i(K),Sb=n(K,"LI",{});var ZLe=s(Sb);wfe=n(ZLe,"STRONG",{});var Xnt=s(wfe);ySo=r(Xnt,"nystromformer"),Xnt.forEach(t),LSo=r(ZLe," \u2014 "),_G=n(ZLe,"A",{href:!0});var znt=s(_G);xSo=r(znt,"NystromformerForMultipleChoice"),znt.forEach(t),$So=r(ZLe," (Nystromformer model)"),ZLe.forEach(t),kSo=i(K),Rb=n(K,"LI",{});var e8e=s(Rb);Afe=n(e8e,"STRONG",{});var Qnt=s(Afe);SSo=r(Qnt,"qdqbert"),Qnt.forEach(t),RSo=r(e8e," \u2014 "),bG=n(e8e,"A",{href:!0});var Wnt=s(bG);BSo=r(Wnt,"QDQBertForMultipleChoice"),Wnt.forEach(t),PSo=r(e8e," (QDQBert model)"),e8e.forEach(t),ISo=i(K),Bb=n(K,"LI",{});var o8e=s(Bb);yfe=n(o8e,"STRONG",{});var Hnt=s(yfe);qSo=r(Hnt,"rembert"),Hnt.forEach(t),NSo=r(o8e," \u2014 "),vG=n(o8e,"A",{href:!0});var Unt=s(vG);jSo=r(Unt,"RemBertForMultipleChoice"),Unt.forEach(t),DSo=r(o8e," (RemBERT model)"),o8e.forEach(t),GSo=i(K),Pb=n(K,"LI",{});var r8e=s(Pb);Lfe=n(r8e,"STRONG",{});var Jnt=s(Lfe);OSo=r(Jnt,"roberta"),Jnt.forEach(t),VSo=r(r8e," \u2014 "),FG=n(r8e,"A",{href:!0});var Ynt=s(FG);XSo=r(Ynt,"RobertaForMultipleChoice"),Ynt.forEach(t),zSo=r(r8e," (RoBERTa model)"),r8e.forEach(t),QSo=i(K),Ib=n(K,"LI",{});var t8e=s(Ib);xfe=n(t8e,"STRONG",{});var Knt=s(xfe);WSo=r(Knt,"roformer"),Knt.forEach(t),HSo=r(t8e," \u2014 "),TG=n(t8e,"A",{href:!0});var Znt=s(TG);USo=r(Znt,"RoFormerForMultipleChoice"),Znt.forEach(t),JSo=r(t8e," (RoFormer model)"),t8e.forEach(t),YSo=i(K),qb=n(K,"LI",{});var a8e=s(qb);$fe=n(a8e,"STRONG",{});var est=s($fe);KSo=r(est,"squeezebert"),est.forEach(t),ZSo=r(a8e," \u2014 "),MG=n(a8e,"A",{href:!0});var ost=s(MG);eRo=r(ost,"SqueezeBertForMultipleChoice"),ost.forEach(t),oRo=r(a8e," (SqueezeBERT model)"),a8e.forEach(t),rRo=i(K),Nb=n(K,"LI",{});var n8e=s(Nb);kfe=n(n8e,"STRONG",{});var rst=s(kfe);tRo=r(rst,"xlm"),rst.forEach(t),aRo=r(n8e," \u2014 "),EG=n(n8e,"A",{href:!0});var tst=s(EG);nRo=r(tst,"XLMForMultipleChoice"),tst.forEach(t),sRo=r(n8e," (XLM model)"),n8e.forEach(t),lRo=i(K),jb=n(K,"LI",{});var s8e=s(jb);Sfe=n(s8e,"STRONG",{});var ast=s(Sfe);iRo=r(ast,"xlm-roberta"),ast.forEach(t),dRo=r(s8e," \u2014 "),CG=n(s8e,"A",{href:!0});var nst=s(CG);cRo=r(nst,"XLMRobertaForMultipleChoice"),nst.forEach(t),fRo=r(s8e," (XLM-RoBERTa model)"),s8e.forEach(t),mRo=i(K),Db=n(K,"LI",{});var l8e=s(Db);Rfe=n(l8e,"STRONG",{});var sst=s(Rfe);gRo=r(sst,"xlm-roberta-xl"),sst.forEach(t),hRo=r(l8e," \u2014 "),wG=n(l8e,"A",{href:!0});var lst=s(wG);pRo=r(lst,"XLMRobertaXLForMultipleChoice"),lst.forEach(t),uRo=r(l8e," (XLM-RoBERTa-XL model)"),l8e.forEach(t),_Ro=i(K),Gb=n(K,"LI",{});var i8e=s(Gb);Bfe=n(i8e,"STRONG",{});var ist=s(Bfe);bRo=r(ist,"xlnet"),ist.forEach(t),vRo=r(i8e," \u2014 "),AG=n(i8e,"A",{href:!0});var dst=s(AG);FRo=r(dst,"XLNetForMultipleChoice"),dst.forEach(t),TRo=r(i8e," (XLNet model)"),i8e.forEach(t),MRo=i(K),Ob=n(K,"LI",{});var d8e=s(Ob);Pfe=n(d8e,"STRONG",{});var cst=s(Pfe);ERo=r(cst,"yoso"),cst.forEach(t),CRo=r(d8e," \u2014 "),yG=n(d8e,"A",{href:!0});var fst=s(yG);wRo=r(fst,"YosoForMultipleChoice"),fst.forEach(t),ARo=r(d8e," (YOSO model)"),d8e.forEach(t),K.forEach(t),yRo=i(na),Vb=n(na,"P",{});var c8e=s(Vb);LRo=r(c8e,"The model is set in evaluation mode by default using "),Ife=n(c8e,"CODE",{});var mst=s(Ife);xRo=r(mst,"model.eval()"),mst.forEach(t),$Ro=r(c8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),qfe=n(c8e,"CODE",{});var gst=s(qfe);kRo=r(gst,"model.train()"),gst.forEach(t),c8e.forEach(t),SRo=i(na),T(Xb.$$.fragment,na),na.forEach(t),zs.forEach(t),eIe=i(f),Oi=n(f,"H2",{class:!0});var aNe=s(Oi);zb=n(aNe,"A",{id:!0,class:!0,href:!0});var hst=s(zb);Nfe=n(hst,"SPAN",{});var pst=s(Nfe);T(ey.$$.fragment,pst),pst.forEach(t),hst.forEach(t),RRo=i(aNe),jfe=n(aNe,"SPAN",{});var ust=s(jfe);BRo=r(ust,"AutoModelForNextSentencePrediction"),ust.forEach(t),aNe.forEach(t),oIe=i(f),Po=n(f,"DIV",{class:!0});var Qs=s(Po);T(oy.$$.fragment,Qs),PRo=i(Qs),Vi=n(Qs,"P",{});var hK=s(Vi);IRo=r(hK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),LG=n(hK,"A",{href:!0});var _st=s(LG);qRo=r(_st,"from_pretrained()"),_st.forEach(t),NRo=r(hK," class method or the "),xG=n(hK,"A",{href:!0});var bst=s(xG);jRo=r(bst,"from_config()"),bst.forEach(t),DRo=r(hK,` class
method.`),hK.forEach(t),GRo=i(Qs),ry=n(Qs,"P",{});var nNe=s(ry);ORo=r(nNe,"This class cannot be instantiated directly using "),Dfe=n(nNe,"CODE",{});var vst=s(Dfe);VRo=r(vst,"__init__()"),vst.forEach(t),XRo=r(nNe," (throws an error)."),nNe.forEach(t),zRo=i(Qs),it=n(Qs,"DIV",{class:!0});var c3=s(it);T(ty.$$.fragment,c3),QRo=i(c3),Gfe=n(c3,"P",{});var Fst=s(Gfe);WRo=r(Fst,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Fst.forEach(t),HRo=i(c3),Xi=n(c3,"P",{});var pK=s(Xi);URo=r(pK,`Note:
Loading a model from its configuration file does `),Ofe=n(pK,"STRONG",{});var Tst=s(Ofe);JRo=r(Tst,"not"),Tst.forEach(t),YRo=r(pK,` load the model weights. It only affects the
model\u2019s configuration. Use `),$G=n(pK,"A",{href:!0});var Mst=s($G);KRo=r(Mst,"from_pretrained()"),Mst.forEach(t),ZRo=r(pK," to load the model weights."),pK.forEach(t),eBo=i(c3),T(Qb.$$.fragment,c3),c3.forEach(t),oBo=i(Qs),oo=n(Qs,"DIV",{class:!0});var sa=s(oo);T(ay.$$.fragment,sa),rBo=i(sa),Vfe=n(sa,"P",{});var Est=s(Vfe);tBo=r(Est,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Est.forEach(t),aBo=i(sa),Ra=n(sa,"P",{});var f3=s(Ra);nBo=r(f3,"The model class to instantiate is selected based on the "),Xfe=n(f3,"CODE",{});var Cst=s(Xfe);sBo=r(Cst,"model_type"),Cst.forEach(t),lBo=r(f3,` property of the config object (either
passed as an argument or loaded from `),zfe=n(f3,"CODE",{});var wst=s(zfe);iBo=r(wst,"pretrained_model_name_or_path"),wst.forEach(t),dBo=r(f3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qfe=n(f3,"CODE",{});var Ast=s(Qfe);cBo=r(Ast,"pretrained_model_name_or_path"),Ast.forEach(t),fBo=r(f3,":"),f3.forEach(t),mBo=i(sa),Yr=n(sa,"UL",{});var Ws=s(Yr);Wb=n(Ws,"LI",{});var f8e=s(Wb);Wfe=n(f8e,"STRONG",{});var yst=s(Wfe);gBo=r(yst,"bert"),yst.forEach(t),hBo=r(f8e," \u2014 "),kG=n(f8e,"A",{href:!0});var Lst=s(kG);pBo=r(Lst,"BertForNextSentencePrediction"),Lst.forEach(t),uBo=r(f8e," (BERT model)"),f8e.forEach(t),_Bo=i(Ws),Hb=n(Ws,"LI",{});var m8e=s(Hb);Hfe=n(m8e,"STRONG",{});var xst=s(Hfe);bBo=r(xst,"fnet"),xst.forEach(t),vBo=r(m8e," \u2014 "),SG=n(m8e,"A",{href:!0});var $st=s(SG);FBo=r($st,"FNetForNextSentencePrediction"),$st.forEach(t),TBo=r(m8e," (FNet model)"),m8e.forEach(t),MBo=i(Ws),Ub=n(Ws,"LI",{});var g8e=s(Ub);Ufe=n(g8e,"STRONG",{});var kst=s(Ufe);EBo=r(kst,"megatron-bert"),kst.forEach(t),CBo=r(g8e," \u2014 "),RG=n(g8e,"A",{href:!0});var Sst=s(RG);wBo=r(Sst,"MegatronBertForNextSentencePrediction"),Sst.forEach(t),ABo=r(g8e," (MegatronBert model)"),g8e.forEach(t),yBo=i(Ws),Jb=n(Ws,"LI",{});var h8e=s(Jb);Jfe=n(h8e,"STRONG",{});var Rst=s(Jfe);LBo=r(Rst,"mobilebert"),Rst.forEach(t),xBo=r(h8e," \u2014 "),BG=n(h8e,"A",{href:!0});var Bst=s(BG);$Bo=r(Bst,"MobileBertForNextSentencePrediction"),Bst.forEach(t),kBo=r(h8e," (MobileBERT model)"),h8e.forEach(t),SBo=i(Ws),Yb=n(Ws,"LI",{});var p8e=s(Yb);Yfe=n(p8e,"STRONG",{});var Pst=s(Yfe);RBo=r(Pst,"qdqbert"),Pst.forEach(t),BBo=r(p8e," \u2014 "),PG=n(p8e,"A",{href:!0});var Ist=s(PG);PBo=r(Ist,"QDQBertForNextSentencePrediction"),Ist.forEach(t),IBo=r(p8e," (QDQBert model)"),p8e.forEach(t),Ws.forEach(t),qBo=i(sa),Kb=n(sa,"P",{});var u8e=s(Kb);NBo=r(u8e,"The model is set in evaluation mode by default using "),Kfe=n(u8e,"CODE",{});var qst=s(Kfe);jBo=r(qst,"model.eval()"),qst.forEach(t),DBo=r(u8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Zfe=n(u8e,"CODE",{});var Nst=s(Zfe);GBo=r(Nst,"model.train()"),Nst.forEach(t),u8e.forEach(t),OBo=i(sa),T(Zb.$$.fragment,sa),sa.forEach(t),Qs.forEach(t),rIe=i(f),zi=n(f,"H2",{class:!0});var sNe=s(zi);ev=n(sNe,"A",{id:!0,class:!0,href:!0});var jst=s(ev);eme=n(jst,"SPAN",{});var Dst=s(eme);T(ny.$$.fragment,Dst),Dst.forEach(t),jst.forEach(t),VBo=i(sNe),ome=n(sNe,"SPAN",{});var Gst=s(ome);XBo=r(Gst,"AutoModelForTokenClassification"),Gst.forEach(t),sNe.forEach(t),tIe=i(f),Io=n(f,"DIV",{class:!0});var Hs=s(Io);T(sy.$$.fragment,Hs),zBo=i(Hs),Qi=n(Hs,"P",{});var uK=s(Qi);QBo=r(uK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),IG=n(uK,"A",{href:!0});var Ost=s(IG);WBo=r(Ost,"from_pretrained()"),Ost.forEach(t),HBo=r(uK," class method or the "),qG=n(uK,"A",{href:!0});var Vst=s(qG);UBo=r(Vst,"from_config()"),Vst.forEach(t),JBo=r(uK,` class
method.`),uK.forEach(t),YBo=i(Hs),ly=n(Hs,"P",{});var lNe=s(ly);KBo=r(lNe,"This class cannot be instantiated directly using "),rme=n(lNe,"CODE",{});var Xst=s(rme);ZBo=r(Xst,"__init__()"),Xst.forEach(t),ePo=r(lNe," (throws an error)."),lNe.forEach(t),oPo=i(Hs),dt=n(Hs,"DIV",{class:!0});var m3=s(dt);T(iy.$$.fragment,m3),rPo=i(m3),tme=n(m3,"P",{});var zst=s(tme);tPo=r(zst,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),zst.forEach(t),aPo=i(m3),Wi=n(m3,"P",{});var _K=s(Wi);nPo=r(_K,`Note:
Loading a model from its configuration file does `),ame=n(_K,"STRONG",{});var Qst=s(ame);sPo=r(Qst,"not"),Qst.forEach(t),lPo=r(_K,` load the model weights. It only affects the
model\u2019s configuration. Use `),NG=n(_K,"A",{href:!0});var Wst=s(NG);iPo=r(Wst,"from_pretrained()"),Wst.forEach(t),dPo=r(_K," to load the model weights."),_K.forEach(t),cPo=i(m3),T(ov.$$.fragment,m3),m3.forEach(t),fPo=i(Hs),ro=n(Hs,"DIV",{class:!0});var la=s(ro);T(dy.$$.fragment,la),mPo=i(la),nme=n(la,"P",{});var Hst=s(nme);gPo=r(Hst,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Hst.forEach(t),hPo=i(la),Ba=n(la,"P",{});var g3=s(Ba);pPo=r(g3,"The model class to instantiate is selected based on the "),sme=n(g3,"CODE",{});var Ust=s(sme);uPo=r(Ust,"model_type"),Ust.forEach(t),_Po=r(g3,` property of the config object (either
passed as an argument or loaded from `),lme=n(g3,"CODE",{});var Jst=s(lme);bPo=r(Jst,"pretrained_model_name_or_path"),Jst.forEach(t),vPo=r(g3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ime=n(g3,"CODE",{});var Yst=s(ime);FPo=r(Yst,"pretrained_model_name_or_path"),Yst.forEach(t),TPo=r(g3,":"),g3.forEach(t),MPo=i(la),U=n(la,"UL",{});var J=s(U);rv=n(J,"LI",{});var _8e=s(rv);dme=n(_8e,"STRONG",{});var Kst=s(dme);EPo=r(Kst,"albert"),Kst.forEach(t),CPo=r(_8e," \u2014 "),jG=n(_8e,"A",{href:!0});var Zst=s(jG);wPo=r(Zst,"AlbertForTokenClassification"),Zst.forEach(t),APo=r(_8e," (ALBERT model)"),_8e.forEach(t),yPo=i(J),tv=n(J,"LI",{});var b8e=s(tv);cme=n(b8e,"STRONG",{});var elt=s(cme);LPo=r(elt,"bert"),elt.forEach(t),xPo=r(b8e," \u2014 "),DG=n(b8e,"A",{href:!0});var olt=s(DG);$Po=r(olt,"BertForTokenClassification"),olt.forEach(t),kPo=r(b8e," (BERT model)"),b8e.forEach(t),SPo=i(J),av=n(J,"LI",{});var v8e=s(av);fme=n(v8e,"STRONG",{});var rlt=s(fme);RPo=r(rlt,"big_bird"),rlt.forEach(t),BPo=r(v8e," \u2014 "),GG=n(v8e,"A",{href:!0});var tlt=s(GG);PPo=r(tlt,"BigBirdForTokenClassification"),tlt.forEach(t),IPo=r(v8e," (BigBird model)"),v8e.forEach(t),qPo=i(J),nv=n(J,"LI",{});var F8e=s(nv);mme=n(F8e,"STRONG",{});var alt=s(mme);NPo=r(alt,"camembert"),alt.forEach(t),jPo=r(F8e," \u2014 "),OG=n(F8e,"A",{href:!0});var nlt=s(OG);DPo=r(nlt,"CamembertForTokenClassification"),nlt.forEach(t),GPo=r(F8e," (CamemBERT model)"),F8e.forEach(t),OPo=i(J),sv=n(J,"LI",{});var T8e=s(sv);gme=n(T8e,"STRONG",{});var slt=s(gme);VPo=r(slt,"canine"),slt.forEach(t),XPo=r(T8e," \u2014 "),VG=n(T8e,"A",{href:!0});var llt=s(VG);zPo=r(llt,"CanineForTokenClassification"),llt.forEach(t),QPo=r(T8e," (Canine model)"),T8e.forEach(t),WPo=i(J),lv=n(J,"LI",{});var M8e=s(lv);hme=n(M8e,"STRONG",{});var ilt=s(hme);HPo=r(ilt,"convbert"),ilt.forEach(t),UPo=r(M8e," \u2014 "),XG=n(M8e,"A",{href:!0});var dlt=s(XG);JPo=r(dlt,"ConvBertForTokenClassification"),dlt.forEach(t),YPo=r(M8e," (ConvBERT model)"),M8e.forEach(t),KPo=i(J),iv=n(J,"LI",{});var E8e=s(iv);pme=n(E8e,"STRONG",{});var clt=s(pme);ZPo=r(clt,"data2vec-text"),clt.forEach(t),eIo=r(E8e," \u2014 "),zG=n(E8e,"A",{href:!0});var flt=s(zG);oIo=r(flt,"Data2VecTextForTokenClassification"),flt.forEach(t),rIo=r(E8e," (Data2VecText model)"),E8e.forEach(t),tIo=i(J),dv=n(J,"LI",{});var C8e=s(dv);ume=n(C8e,"STRONG",{});var mlt=s(ume);aIo=r(mlt,"deberta"),mlt.forEach(t),nIo=r(C8e," \u2014 "),QG=n(C8e,"A",{href:!0});var glt=s(QG);sIo=r(glt,"DebertaForTokenClassification"),glt.forEach(t),lIo=r(C8e," (DeBERTa model)"),C8e.forEach(t),iIo=i(J),cv=n(J,"LI",{});var w8e=s(cv);_me=n(w8e,"STRONG",{});var hlt=s(_me);dIo=r(hlt,"deberta-v2"),hlt.forEach(t),cIo=r(w8e," \u2014 "),WG=n(w8e,"A",{href:!0});var plt=s(WG);fIo=r(plt,"DebertaV2ForTokenClassification"),plt.forEach(t),mIo=r(w8e," (DeBERTa-v2 model)"),w8e.forEach(t),gIo=i(J),fv=n(J,"LI",{});var A8e=s(fv);bme=n(A8e,"STRONG",{});var ult=s(bme);hIo=r(ult,"distilbert"),ult.forEach(t),pIo=r(A8e," \u2014 "),HG=n(A8e,"A",{href:!0});var _lt=s(HG);uIo=r(_lt,"DistilBertForTokenClassification"),_lt.forEach(t),_Io=r(A8e," (DistilBERT model)"),A8e.forEach(t),bIo=i(J),mv=n(J,"LI",{});var y8e=s(mv);vme=n(y8e,"STRONG",{});var blt=s(vme);vIo=r(blt,"electra"),blt.forEach(t),FIo=r(y8e," \u2014 "),UG=n(y8e,"A",{href:!0});var vlt=s(UG);TIo=r(vlt,"ElectraForTokenClassification"),vlt.forEach(t),MIo=r(y8e," (ELECTRA model)"),y8e.forEach(t),EIo=i(J),gv=n(J,"LI",{});var L8e=s(gv);Fme=n(L8e,"STRONG",{});var Flt=s(Fme);CIo=r(Flt,"flaubert"),Flt.forEach(t),wIo=r(L8e," \u2014 "),JG=n(L8e,"A",{href:!0});var Tlt=s(JG);AIo=r(Tlt,"FlaubertForTokenClassification"),Tlt.forEach(t),yIo=r(L8e," (FlauBERT model)"),L8e.forEach(t),LIo=i(J),hv=n(J,"LI",{});var x8e=s(hv);Tme=n(x8e,"STRONG",{});var Mlt=s(Tme);xIo=r(Mlt,"fnet"),Mlt.forEach(t),$Io=r(x8e," \u2014 "),YG=n(x8e,"A",{href:!0});var Elt=s(YG);kIo=r(Elt,"FNetForTokenClassification"),Elt.forEach(t),SIo=r(x8e," (FNet model)"),x8e.forEach(t),RIo=i(J),pv=n(J,"LI",{});var $8e=s(pv);Mme=n($8e,"STRONG",{});var Clt=s(Mme);BIo=r(Clt,"funnel"),Clt.forEach(t),PIo=r($8e," \u2014 "),KG=n($8e,"A",{href:!0});var wlt=s(KG);IIo=r(wlt,"FunnelForTokenClassification"),wlt.forEach(t),qIo=r($8e," (Funnel Transformer model)"),$8e.forEach(t),NIo=i(J),uv=n(J,"LI",{});var k8e=s(uv);Eme=n(k8e,"STRONG",{});var Alt=s(Eme);jIo=r(Alt,"gpt2"),Alt.forEach(t),DIo=r(k8e," \u2014 "),ZG=n(k8e,"A",{href:!0});var ylt=s(ZG);GIo=r(ylt,"GPT2ForTokenClassification"),ylt.forEach(t),OIo=r(k8e," (OpenAI GPT-2 model)"),k8e.forEach(t),VIo=i(J),_v=n(J,"LI",{});var S8e=s(_v);Cme=n(S8e,"STRONG",{});var Llt=s(Cme);XIo=r(Llt,"ibert"),Llt.forEach(t),zIo=r(S8e," \u2014 "),eO=n(S8e,"A",{href:!0});var xlt=s(eO);QIo=r(xlt,"IBertForTokenClassification"),xlt.forEach(t),WIo=r(S8e," (I-BERT model)"),S8e.forEach(t),HIo=i(J),bv=n(J,"LI",{});var R8e=s(bv);wme=n(R8e,"STRONG",{});var $lt=s(wme);UIo=r($lt,"layoutlm"),$lt.forEach(t),JIo=r(R8e," \u2014 "),oO=n(R8e,"A",{href:!0});var klt=s(oO);YIo=r(klt,"LayoutLMForTokenClassification"),klt.forEach(t),KIo=r(R8e," (LayoutLM model)"),R8e.forEach(t),ZIo=i(J),vv=n(J,"LI",{});var B8e=s(vv);Ame=n(B8e,"STRONG",{});var Slt=s(Ame);eqo=r(Slt,"layoutlmv2"),Slt.forEach(t),oqo=r(B8e," \u2014 "),rO=n(B8e,"A",{href:!0});var Rlt=s(rO);rqo=r(Rlt,"LayoutLMv2ForTokenClassification"),Rlt.forEach(t),tqo=r(B8e," (LayoutLMv2 model)"),B8e.forEach(t),aqo=i(J),Fv=n(J,"LI",{});var P8e=s(Fv);yme=n(P8e,"STRONG",{});var Blt=s(yme);nqo=r(Blt,"longformer"),Blt.forEach(t),sqo=r(P8e," \u2014 "),tO=n(P8e,"A",{href:!0});var Plt=s(tO);lqo=r(Plt,"LongformerForTokenClassification"),Plt.forEach(t),iqo=r(P8e," (Longformer model)"),P8e.forEach(t),dqo=i(J),Tv=n(J,"LI",{});var I8e=s(Tv);Lme=n(I8e,"STRONG",{});var Ilt=s(Lme);cqo=r(Ilt,"megatron-bert"),Ilt.forEach(t),fqo=r(I8e," \u2014 "),aO=n(I8e,"A",{href:!0});var qlt=s(aO);mqo=r(qlt,"MegatronBertForTokenClassification"),qlt.forEach(t),gqo=r(I8e," (MegatronBert model)"),I8e.forEach(t),hqo=i(J),Mv=n(J,"LI",{});var q8e=s(Mv);xme=n(q8e,"STRONG",{});var Nlt=s(xme);pqo=r(Nlt,"mobilebert"),Nlt.forEach(t),uqo=r(q8e," \u2014 "),nO=n(q8e,"A",{href:!0});var jlt=s(nO);_qo=r(jlt,"MobileBertForTokenClassification"),jlt.forEach(t),bqo=r(q8e," (MobileBERT model)"),q8e.forEach(t),vqo=i(J),Ev=n(J,"LI",{});var N8e=s(Ev);$me=n(N8e,"STRONG",{});var Dlt=s($me);Fqo=r(Dlt,"mpnet"),Dlt.forEach(t),Tqo=r(N8e," \u2014 "),sO=n(N8e,"A",{href:!0});var Glt=s(sO);Mqo=r(Glt,"MPNetForTokenClassification"),Glt.forEach(t),Eqo=r(N8e," (MPNet model)"),N8e.forEach(t),Cqo=i(J),Cv=n(J,"LI",{});var j8e=s(Cv);kme=n(j8e,"STRONG",{});var Olt=s(kme);wqo=r(Olt,"nystromformer"),Olt.forEach(t),Aqo=r(j8e," \u2014 "),lO=n(j8e,"A",{href:!0});var Vlt=s(lO);yqo=r(Vlt,"NystromformerForTokenClassification"),Vlt.forEach(t),Lqo=r(j8e," (Nystromformer model)"),j8e.forEach(t),xqo=i(J),wv=n(J,"LI",{});var D8e=s(wv);Sme=n(D8e,"STRONG",{});var Xlt=s(Sme);$qo=r(Xlt,"qdqbert"),Xlt.forEach(t),kqo=r(D8e," \u2014 "),iO=n(D8e,"A",{href:!0});var zlt=s(iO);Sqo=r(zlt,"QDQBertForTokenClassification"),zlt.forEach(t),Rqo=r(D8e," (QDQBert model)"),D8e.forEach(t),Bqo=i(J),Av=n(J,"LI",{});var G8e=s(Av);Rme=n(G8e,"STRONG",{});var Qlt=s(Rme);Pqo=r(Qlt,"rembert"),Qlt.forEach(t),Iqo=r(G8e," \u2014 "),dO=n(G8e,"A",{href:!0});var Wlt=s(dO);qqo=r(Wlt,"RemBertForTokenClassification"),Wlt.forEach(t),Nqo=r(G8e," (RemBERT model)"),G8e.forEach(t),jqo=i(J),yv=n(J,"LI",{});var O8e=s(yv);Bme=n(O8e,"STRONG",{});var Hlt=s(Bme);Dqo=r(Hlt,"roberta"),Hlt.forEach(t),Gqo=r(O8e," \u2014 "),cO=n(O8e,"A",{href:!0});var Ult=s(cO);Oqo=r(Ult,"RobertaForTokenClassification"),Ult.forEach(t),Vqo=r(O8e," (RoBERTa model)"),O8e.forEach(t),Xqo=i(J),Lv=n(J,"LI",{});var V8e=s(Lv);Pme=n(V8e,"STRONG",{});var Jlt=s(Pme);zqo=r(Jlt,"roformer"),Jlt.forEach(t),Qqo=r(V8e," \u2014 "),fO=n(V8e,"A",{href:!0});var Ylt=s(fO);Wqo=r(Ylt,"RoFormerForTokenClassification"),Ylt.forEach(t),Hqo=r(V8e," (RoFormer model)"),V8e.forEach(t),Uqo=i(J),xv=n(J,"LI",{});var X8e=s(xv);Ime=n(X8e,"STRONG",{});var Klt=s(Ime);Jqo=r(Klt,"squeezebert"),Klt.forEach(t),Yqo=r(X8e," \u2014 "),mO=n(X8e,"A",{href:!0});var Zlt=s(mO);Kqo=r(Zlt,"SqueezeBertForTokenClassification"),Zlt.forEach(t),Zqo=r(X8e," (SqueezeBERT model)"),X8e.forEach(t),eNo=i(J),$v=n(J,"LI",{});var z8e=s($v);qme=n(z8e,"STRONG",{});var eit=s(qme);oNo=r(eit,"xlm"),eit.forEach(t),rNo=r(z8e," \u2014 "),gO=n(z8e,"A",{href:!0});var oit=s(gO);tNo=r(oit,"XLMForTokenClassification"),oit.forEach(t),aNo=r(z8e," (XLM model)"),z8e.forEach(t),nNo=i(J),kv=n(J,"LI",{});var Q8e=s(kv);Nme=n(Q8e,"STRONG",{});var rit=s(Nme);sNo=r(rit,"xlm-roberta"),rit.forEach(t),lNo=r(Q8e," \u2014 "),hO=n(Q8e,"A",{href:!0});var tit=s(hO);iNo=r(tit,"XLMRobertaForTokenClassification"),tit.forEach(t),dNo=r(Q8e," (XLM-RoBERTa model)"),Q8e.forEach(t),cNo=i(J),Sv=n(J,"LI",{});var W8e=s(Sv);jme=n(W8e,"STRONG",{});var ait=s(jme);fNo=r(ait,"xlm-roberta-xl"),ait.forEach(t),mNo=r(W8e," \u2014 "),pO=n(W8e,"A",{href:!0});var nit=s(pO);gNo=r(nit,"XLMRobertaXLForTokenClassification"),nit.forEach(t),hNo=r(W8e," (XLM-RoBERTa-XL model)"),W8e.forEach(t),pNo=i(J),Rv=n(J,"LI",{});var H8e=s(Rv);Dme=n(H8e,"STRONG",{});var sit=s(Dme);uNo=r(sit,"xlnet"),sit.forEach(t),_No=r(H8e," \u2014 "),uO=n(H8e,"A",{href:!0});var lit=s(uO);bNo=r(lit,"XLNetForTokenClassification"),lit.forEach(t),vNo=r(H8e," (XLNet model)"),H8e.forEach(t),FNo=i(J),Bv=n(J,"LI",{});var U8e=s(Bv);Gme=n(U8e,"STRONG",{});var iit=s(Gme);TNo=r(iit,"yoso"),iit.forEach(t),MNo=r(U8e," \u2014 "),_O=n(U8e,"A",{href:!0});var dit=s(_O);ENo=r(dit,"YosoForTokenClassification"),dit.forEach(t),CNo=r(U8e," (YOSO model)"),U8e.forEach(t),J.forEach(t),wNo=i(la),Pv=n(la,"P",{});var J8e=s(Pv);ANo=r(J8e,"The model is set in evaluation mode by default using "),Ome=n(J8e,"CODE",{});var cit=s(Ome);yNo=r(cit,"model.eval()"),cit.forEach(t),LNo=r(J8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Vme=n(J8e,"CODE",{});var fit=s(Vme);xNo=r(fit,"model.train()"),fit.forEach(t),J8e.forEach(t),$No=i(la),T(Iv.$$.fragment,la),la.forEach(t),Hs.forEach(t),aIe=i(f),Hi=n(f,"H2",{class:!0});var iNe=s(Hi);qv=n(iNe,"A",{id:!0,class:!0,href:!0});var mit=s(qv);Xme=n(mit,"SPAN",{});var git=s(Xme);T(cy.$$.fragment,git),git.forEach(t),mit.forEach(t),kNo=i(iNe),zme=n(iNe,"SPAN",{});var hit=s(zme);SNo=r(hit,"AutoModelForQuestionAnswering"),hit.forEach(t),iNe.forEach(t),nIe=i(f),qo=n(f,"DIV",{class:!0});var Us=s(qo);T(fy.$$.fragment,Us),RNo=i(Us),Ui=n(Us,"P",{});var bK=s(Ui);BNo=r(bK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),bO=n(bK,"A",{href:!0});var pit=s(bO);PNo=r(pit,"from_pretrained()"),pit.forEach(t),INo=r(bK," class method or the "),vO=n(bK,"A",{href:!0});var uit=s(vO);qNo=r(uit,"from_config()"),uit.forEach(t),NNo=r(bK,` class
method.`),bK.forEach(t),jNo=i(Us),my=n(Us,"P",{});var dNe=s(my);DNo=r(dNe,"This class cannot be instantiated directly using "),Qme=n(dNe,"CODE",{});var _it=s(Qme);GNo=r(_it,"__init__()"),_it.forEach(t),ONo=r(dNe," (throws an error)."),dNe.forEach(t),VNo=i(Us),ct=n(Us,"DIV",{class:!0});var h3=s(ct);T(gy.$$.fragment,h3),XNo=i(h3),Wme=n(h3,"P",{});var bit=s(Wme);zNo=r(bit,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),bit.forEach(t),QNo=i(h3),Ji=n(h3,"P",{});var vK=s(Ji);WNo=r(vK,`Note:
Loading a model from its configuration file does `),Hme=n(vK,"STRONG",{});var vit=s(Hme);HNo=r(vit,"not"),vit.forEach(t),UNo=r(vK,` load the model weights. It only affects the
model\u2019s configuration. Use `),FO=n(vK,"A",{href:!0});var Fit=s(FO);JNo=r(Fit,"from_pretrained()"),Fit.forEach(t),YNo=r(vK," to load the model weights."),vK.forEach(t),KNo=i(h3),T(Nv.$$.fragment,h3),h3.forEach(t),ZNo=i(Us),to=n(Us,"DIV",{class:!0});var ia=s(to);T(hy.$$.fragment,ia),ejo=i(ia),Ume=n(ia,"P",{});var Tit=s(Ume);ojo=r(Tit,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Tit.forEach(t),rjo=i(ia),Pa=n(ia,"P",{});var p3=s(Pa);tjo=r(p3,"The model class to instantiate is selected based on the "),Jme=n(p3,"CODE",{});var Mit=s(Jme);ajo=r(Mit,"model_type"),Mit.forEach(t),njo=r(p3,` property of the config object (either
passed as an argument or loaded from `),Yme=n(p3,"CODE",{});var Eit=s(Yme);sjo=r(Eit,"pretrained_model_name_or_path"),Eit.forEach(t),ljo=r(p3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kme=n(p3,"CODE",{});var Cit=s(Kme);ijo=r(Cit,"pretrained_model_name_or_path"),Cit.forEach(t),djo=r(p3,":"),p3.forEach(t),cjo=i(ia),O=n(ia,"UL",{});var X=s(O);jv=n(X,"LI",{});var Y8e=s(jv);Zme=n(Y8e,"STRONG",{});var wit=s(Zme);fjo=r(wit,"albert"),wit.forEach(t),mjo=r(Y8e," \u2014 "),TO=n(Y8e,"A",{href:!0});var Ait=s(TO);gjo=r(Ait,"AlbertForQuestionAnswering"),Ait.forEach(t),hjo=r(Y8e," (ALBERT model)"),Y8e.forEach(t),pjo=i(X),Dv=n(X,"LI",{});var K8e=s(Dv);ege=n(K8e,"STRONG",{});var yit=s(ege);ujo=r(yit,"bart"),yit.forEach(t),_jo=r(K8e," \u2014 "),MO=n(K8e,"A",{href:!0});var Lit=s(MO);bjo=r(Lit,"BartForQuestionAnswering"),Lit.forEach(t),vjo=r(K8e," (BART model)"),K8e.forEach(t),Fjo=i(X),Gv=n(X,"LI",{});var Z8e=s(Gv);oge=n(Z8e,"STRONG",{});var xit=s(oge);Tjo=r(xit,"bert"),xit.forEach(t),Mjo=r(Z8e," \u2014 "),EO=n(Z8e,"A",{href:!0});var $it=s(EO);Ejo=r($it,"BertForQuestionAnswering"),$it.forEach(t),Cjo=r(Z8e," (BERT model)"),Z8e.forEach(t),wjo=i(X),Ov=n(X,"LI",{});var exe=s(Ov);rge=n(exe,"STRONG",{});var kit=s(rge);Ajo=r(kit,"big_bird"),kit.forEach(t),yjo=r(exe," \u2014 "),CO=n(exe,"A",{href:!0});var Sit=s(CO);Ljo=r(Sit,"BigBirdForQuestionAnswering"),Sit.forEach(t),xjo=r(exe," (BigBird model)"),exe.forEach(t),$jo=i(X),Vv=n(X,"LI",{});var oxe=s(Vv);tge=n(oxe,"STRONG",{});var Rit=s(tge);kjo=r(Rit,"bigbird_pegasus"),Rit.forEach(t),Sjo=r(oxe," \u2014 "),wO=n(oxe,"A",{href:!0});var Bit=s(wO);Rjo=r(Bit,"BigBirdPegasusForQuestionAnswering"),Bit.forEach(t),Bjo=r(oxe," (BigBirdPegasus model)"),oxe.forEach(t),Pjo=i(X),Xv=n(X,"LI",{});var rxe=s(Xv);age=n(rxe,"STRONG",{});var Pit=s(age);Ijo=r(Pit,"camembert"),Pit.forEach(t),qjo=r(rxe," \u2014 "),AO=n(rxe,"A",{href:!0});var Iit=s(AO);Njo=r(Iit,"CamembertForQuestionAnswering"),Iit.forEach(t),jjo=r(rxe," (CamemBERT model)"),rxe.forEach(t),Djo=i(X),zv=n(X,"LI",{});var txe=s(zv);nge=n(txe,"STRONG",{});var qit=s(nge);Gjo=r(qit,"canine"),qit.forEach(t),Ojo=r(txe," \u2014 "),yO=n(txe,"A",{href:!0});var Nit=s(yO);Vjo=r(Nit,"CanineForQuestionAnswering"),Nit.forEach(t),Xjo=r(txe," (Canine model)"),txe.forEach(t),zjo=i(X),Qv=n(X,"LI",{});var axe=s(Qv);sge=n(axe,"STRONG",{});var jit=s(sge);Qjo=r(jit,"convbert"),jit.forEach(t),Wjo=r(axe," \u2014 "),LO=n(axe,"A",{href:!0});var Dit=s(LO);Hjo=r(Dit,"ConvBertForQuestionAnswering"),Dit.forEach(t),Ujo=r(axe," (ConvBERT model)"),axe.forEach(t),Jjo=i(X),Wv=n(X,"LI",{});var nxe=s(Wv);lge=n(nxe,"STRONG",{});var Git=s(lge);Yjo=r(Git,"data2vec-text"),Git.forEach(t),Kjo=r(nxe," \u2014 "),xO=n(nxe,"A",{href:!0});var Oit=s(xO);Zjo=r(Oit,"Data2VecTextForQuestionAnswering"),Oit.forEach(t),eDo=r(nxe," (Data2VecText model)"),nxe.forEach(t),oDo=i(X),Hv=n(X,"LI",{});var sxe=s(Hv);ige=n(sxe,"STRONG",{});var Vit=s(ige);rDo=r(Vit,"deberta"),Vit.forEach(t),tDo=r(sxe," \u2014 "),$O=n(sxe,"A",{href:!0});var Xit=s($O);aDo=r(Xit,"DebertaForQuestionAnswering"),Xit.forEach(t),nDo=r(sxe," (DeBERTa model)"),sxe.forEach(t),sDo=i(X),Uv=n(X,"LI",{});var lxe=s(Uv);dge=n(lxe,"STRONG",{});var zit=s(dge);lDo=r(zit,"deberta-v2"),zit.forEach(t),iDo=r(lxe," \u2014 "),kO=n(lxe,"A",{href:!0});var Qit=s(kO);dDo=r(Qit,"DebertaV2ForQuestionAnswering"),Qit.forEach(t),cDo=r(lxe," (DeBERTa-v2 model)"),lxe.forEach(t),fDo=i(X),Jv=n(X,"LI",{});var ixe=s(Jv);cge=n(ixe,"STRONG",{});var Wit=s(cge);mDo=r(Wit,"distilbert"),Wit.forEach(t),gDo=r(ixe," \u2014 "),SO=n(ixe,"A",{href:!0});var Hit=s(SO);hDo=r(Hit,"DistilBertForQuestionAnswering"),Hit.forEach(t),pDo=r(ixe," (DistilBERT model)"),ixe.forEach(t),uDo=i(X),Yv=n(X,"LI",{});var dxe=s(Yv);fge=n(dxe,"STRONG",{});var Uit=s(fge);_Do=r(Uit,"electra"),Uit.forEach(t),bDo=r(dxe," \u2014 "),RO=n(dxe,"A",{href:!0});var Jit=s(RO);vDo=r(Jit,"ElectraForQuestionAnswering"),Jit.forEach(t),FDo=r(dxe," (ELECTRA model)"),dxe.forEach(t),TDo=i(X),Kv=n(X,"LI",{});var cxe=s(Kv);mge=n(cxe,"STRONG",{});var Yit=s(mge);MDo=r(Yit,"flaubert"),Yit.forEach(t),EDo=r(cxe," \u2014 "),BO=n(cxe,"A",{href:!0});var Kit=s(BO);CDo=r(Kit,"FlaubertForQuestionAnsweringSimple"),Kit.forEach(t),wDo=r(cxe," (FlauBERT model)"),cxe.forEach(t),ADo=i(X),Zv=n(X,"LI",{});var fxe=s(Zv);gge=n(fxe,"STRONG",{});var Zit=s(gge);yDo=r(Zit,"fnet"),Zit.forEach(t),LDo=r(fxe," \u2014 "),PO=n(fxe,"A",{href:!0});var edt=s(PO);xDo=r(edt,"FNetForQuestionAnswering"),edt.forEach(t),$Do=r(fxe," (FNet model)"),fxe.forEach(t),kDo=i(X),eF=n(X,"LI",{});var mxe=s(eF);hge=n(mxe,"STRONG",{});var odt=s(hge);SDo=r(odt,"funnel"),odt.forEach(t),RDo=r(mxe," \u2014 "),IO=n(mxe,"A",{href:!0});var rdt=s(IO);BDo=r(rdt,"FunnelForQuestionAnswering"),rdt.forEach(t),PDo=r(mxe," (Funnel Transformer model)"),mxe.forEach(t),IDo=i(X),oF=n(X,"LI",{});var gxe=s(oF);pge=n(gxe,"STRONG",{});var tdt=s(pge);qDo=r(tdt,"gptj"),tdt.forEach(t),NDo=r(gxe," \u2014 "),qO=n(gxe,"A",{href:!0});var adt=s(qO);jDo=r(adt,"GPTJForQuestionAnswering"),adt.forEach(t),DDo=r(gxe," (GPT-J model)"),gxe.forEach(t),GDo=i(X),rF=n(X,"LI",{});var hxe=s(rF);uge=n(hxe,"STRONG",{});var ndt=s(uge);ODo=r(ndt,"ibert"),ndt.forEach(t),VDo=r(hxe," \u2014 "),NO=n(hxe,"A",{href:!0});var sdt=s(NO);XDo=r(sdt,"IBertForQuestionAnswering"),sdt.forEach(t),zDo=r(hxe," (I-BERT model)"),hxe.forEach(t),QDo=i(X),tF=n(X,"LI",{});var pxe=s(tF);_ge=n(pxe,"STRONG",{});var ldt=s(_ge);WDo=r(ldt,"layoutlmv2"),ldt.forEach(t),HDo=r(pxe," \u2014 "),jO=n(pxe,"A",{href:!0});var idt=s(jO);UDo=r(idt,"LayoutLMv2ForQuestionAnswering"),idt.forEach(t),JDo=r(pxe," (LayoutLMv2 model)"),pxe.forEach(t),YDo=i(X),aF=n(X,"LI",{});var uxe=s(aF);bge=n(uxe,"STRONG",{});var ddt=s(bge);KDo=r(ddt,"led"),ddt.forEach(t),ZDo=r(uxe," \u2014 "),DO=n(uxe,"A",{href:!0});var cdt=s(DO);eGo=r(cdt,"LEDForQuestionAnswering"),cdt.forEach(t),oGo=r(uxe," (LED model)"),uxe.forEach(t),rGo=i(X),nF=n(X,"LI",{});var _xe=s(nF);vge=n(_xe,"STRONG",{});var fdt=s(vge);tGo=r(fdt,"longformer"),fdt.forEach(t),aGo=r(_xe," \u2014 "),GO=n(_xe,"A",{href:!0});var mdt=s(GO);nGo=r(mdt,"LongformerForQuestionAnswering"),mdt.forEach(t),sGo=r(_xe," (Longformer model)"),_xe.forEach(t),lGo=i(X),sF=n(X,"LI",{});var bxe=s(sF);Fge=n(bxe,"STRONG",{});var gdt=s(Fge);iGo=r(gdt,"lxmert"),gdt.forEach(t),dGo=r(bxe," \u2014 "),OO=n(bxe,"A",{href:!0});var hdt=s(OO);cGo=r(hdt,"LxmertForQuestionAnswering"),hdt.forEach(t),fGo=r(bxe," (LXMERT model)"),bxe.forEach(t),mGo=i(X),lF=n(X,"LI",{});var vxe=s(lF);Tge=n(vxe,"STRONG",{});var pdt=s(Tge);gGo=r(pdt,"mbart"),pdt.forEach(t),hGo=r(vxe," \u2014 "),VO=n(vxe,"A",{href:!0});var udt=s(VO);pGo=r(udt,"MBartForQuestionAnswering"),udt.forEach(t),uGo=r(vxe," (mBART model)"),vxe.forEach(t),_Go=i(X),iF=n(X,"LI",{});var Fxe=s(iF);Mge=n(Fxe,"STRONG",{});var _dt=s(Mge);bGo=r(_dt,"megatron-bert"),_dt.forEach(t),vGo=r(Fxe," \u2014 "),XO=n(Fxe,"A",{href:!0});var bdt=s(XO);FGo=r(bdt,"MegatronBertForQuestionAnswering"),bdt.forEach(t),TGo=r(Fxe," (MegatronBert model)"),Fxe.forEach(t),MGo=i(X),dF=n(X,"LI",{});var Txe=s(dF);Ege=n(Txe,"STRONG",{});var vdt=s(Ege);EGo=r(vdt,"mobilebert"),vdt.forEach(t),CGo=r(Txe," \u2014 "),zO=n(Txe,"A",{href:!0});var Fdt=s(zO);wGo=r(Fdt,"MobileBertForQuestionAnswering"),Fdt.forEach(t),AGo=r(Txe," (MobileBERT model)"),Txe.forEach(t),yGo=i(X),cF=n(X,"LI",{});var Mxe=s(cF);Cge=n(Mxe,"STRONG",{});var Tdt=s(Cge);LGo=r(Tdt,"mpnet"),Tdt.forEach(t),xGo=r(Mxe," \u2014 "),QO=n(Mxe,"A",{href:!0});var Mdt=s(QO);$Go=r(Mdt,"MPNetForQuestionAnswering"),Mdt.forEach(t),kGo=r(Mxe," (MPNet model)"),Mxe.forEach(t),SGo=i(X),fF=n(X,"LI",{});var Exe=s(fF);wge=n(Exe,"STRONG",{});var Edt=s(wge);RGo=r(Edt,"nystromformer"),Edt.forEach(t),BGo=r(Exe," \u2014 "),WO=n(Exe,"A",{href:!0});var Cdt=s(WO);PGo=r(Cdt,"NystromformerForQuestionAnswering"),Cdt.forEach(t),IGo=r(Exe," (Nystromformer model)"),Exe.forEach(t),qGo=i(X),mF=n(X,"LI",{});var Cxe=s(mF);Age=n(Cxe,"STRONG",{});var wdt=s(Age);NGo=r(wdt,"qdqbert"),wdt.forEach(t),jGo=r(Cxe," \u2014 "),HO=n(Cxe,"A",{href:!0});var Adt=s(HO);DGo=r(Adt,"QDQBertForQuestionAnswering"),Adt.forEach(t),GGo=r(Cxe," (QDQBert model)"),Cxe.forEach(t),OGo=i(X),gF=n(X,"LI",{});var wxe=s(gF);yge=n(wxe,"STRONG",{});var ydt=s(yge);VGo=r(ydt,"reformer"),ydt.forEach(t),XGo=r(wxe," \u2014 "),UO=n(wxe,"A",{href:!0});var Ldt=s(UO);zGo=r(Ldt,"ReformerForQuestionAnswering"),Ldt.forEach(t),QGo=r(wxe," (Reformer model)"),wxe.forEach(t),WGo=i(X),hF=n(X,"LI",{});var Axe=s(hF);Lge=n(Axe,"STRONG",{});var xdt=s(Lge);HGo=r(xdt,"rembert"),xdt.forEach(t),UGo=r(Axe," \u2014 "),JO=n(Axe,"A",{href:!0});var $dt=s(JO);JGo=r($dt,"RemBertForQuestionAnswering"),$dt.forEach(t),YGo=r(Axe," (RemBERT model)"),Axe.forEach(t),KGo=i(X),pF=n(X,"LI",{});var yxe=s(pF);xge=n(yxe,"STRONG",{});var kdt=s(xge);ZGo=r(kdt,"roberta"),kdt.forEach(t),eOo=r(yxe," \u2014 "),YO=n(yxe,"A",{href:!0});var Sdt=s(YO);oOo=r(Sdt,"RobertaForQuestionAnswering"),Sdt.forEach(t),rOo=r(yxe," (RoBERTa model)"),yxe.forEach(t),tOo=i(X),uF=n(X,"LI",{});var Lxe=s(uF);$ge=n(Lxe,"STRONG",{});var Rdt=s($ge);aOo=r(Rdt,"roformer"),Rdt.forEach(t),nOo=r(Lxe," \u2014 "),KO=n(Lxe,"A",{href:!0});var Bdt=s(KO);sOo=r(Bdt,"RoFormerForQuestionAnswering"),Bdt.forEach(t),lOo=r(Lxe," (RoFormer model)"),Lxe.forEach(t),iOo=i(X),_F=n(X,"LI",{});var xxe=s(_F);kge=n(xxe,"STRONG",{});var Pdt=s(kge);dOo=r(Pdt,"splinter"),Pdt.forEach(t),cOo=r(xxe," \u2014 "),ZO=n(xxe,"A",{href:!0});var Idt=s(ZO);fOo=r(Idt,"SplinterForQuestionAnswering"),Idt.forEach(t),mOo=r(xxe," (Splinter model)"),xxe.forEach(t),gOo=i(X),bF=n(X,"LI",{});var $xe=s(bF);Sge=n($xe,"STRONG",{});var qdt=s(Sge);hOo=r(qdt,"squeezebert"),qdt.forEach(t),pOo=r($xe," \u2014 "),eV=n($xe,"A",{href:!0});var Ndt=s(eV);uOo=r(Ndt,"SqueezeBertForQuestionAnswering"),Ndt.forEach(t),_Oo=r($xe," (SqueezeBERT model)"),$xe.forEach(t),bOo=i(X),vF=n(X,"LI",{});var kxe=s(vF);Rge=n(kxe,"STRONG",{});var jdt=s(Rge);vOo=r(jdt,"xlm"),jdt.forEach(t),FOo=r(kxe," \u2014 "),oV=n(kxe,"A",{href:!0});var Ddt=s(oV);TOo=r(Ddt,"XLMForQuestionAnsweringSimple"),Ddt.forEach(t),MOo=r(kxe," (XLM model)"),kxe.forEach(t),EOo=i(X),FF=n(X,"LI",{});var Sxe=s(FF);Bge=n(Sxe,"STRONG",{});var Gdt=s(Bge);COo=r(Gdt,"xlm-roberta"),Gdt.forEach(t),wOo=r(Sxe," \u2014 "),rV=n(Sxe,"A",{href:!0});var Odt=s(rV);AOo=r(Odt,"XLMRobertaForQuestionAnswering"),Odt.forEach(t),yOo=r(Sxe," (XLM-RoBERTa model)"),Sxe.forEach(t),LOo=i(X),TF=n(X,"LI",{});var Rxe=s(TF);Pge=n(Rxe,"STRONG",{});var Vdt=s(Pge);xOo=r(Vdt,"xlm-roberta-xl"),Vdt.forEach(t),$Oo=r(Rxe," \u2014 "),tV=n(Rxe,"A",{href:!0});var Xdt=s(tV);kOo=r(Xdt,"XLMRobertaXLForQuestionAnswering"),Xdt.forEach(t),SOo=r(Rxe," (XLM-RoBERTa-XL model)"),Rxe.forEach(t),ROo=i(X),MF=n(X,"LI",{});var Bxe=s(MF);Ige=n(Bxe,"STRONG",{});var zdt=s(Ige);BOo=r(zdt,"xlnet"),zdt.forEach(t),POo=r(Bxe," \u2014 "),aV=n(Bxe,"A",{href:!0});var Qdt=s(aV);IOo=r(Qdt,"XLNetForQuestionAnsweringSimple"),Qdt.forEach(t),qOo=r(Bxe," (XLNet model)"),Bxe.forEach(t),NOo=i(X),EF=n(X,"LI",{});var Pxe=s(EF);qge=n(Pxe,"STRONG",{});var Wdt=s(qge);jOo=r(Wdt,"yoso"),Wdt.forEach(t),DOo=r(Pxe," \u2014 "),nV=n(Pxe,"A",{href:!0});var Hdt=s(nV);GOo=r(Hdt,"YosoForQuestionAnswering"),Hdt.forEach(t),OOo=r(Pxe," (YOSO model)"),Pxe.forEach(t),X.forEach(t),VOo=i(ia),CF=n(ia,"P",{});var Ixe=s(CF);XOo=r(Ixe,"The model is set in evaluation mode by default using "),Nge=n(Ixe,"CODE",{});var Udt=s(Nge);zOo=r(Udt,"model.eval()"),Udt.forEach(t),QOo=r(Ixe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),jge=n(Ixe,"CODE",{});var Jdt=s(jge);WOo=r(Jdt,"model.train()"),Jdt.forEach(t),Ixe.forEach(t),HOo=i(ia),T(wF.$$.fragment,ia),ia.forEach(t),Us.forEach(t),sIe=i(f),Yi=n(f,"H2",{class:!0});var cNe=s(Yi);AF=n(cNe,"A",{id:!0,class:!0,href:!0});var Ydt=s(AF);Dge=n(Ydt,"SPAN",{});var Kdt=s(Dge);T(py.$$.fragment,Kdt),Kdt.forEach(t),Ydt.forEach(t),UOo=i(cNe),Gge=n(cNe,"SPAN",{});var Zdt=s(Gge);JOo=r(Zdt,"AutoModelForTableQuestionAnswering"),Zdt.forEach(t),cNe.forEach(t),lIe=i(f),No=n(f,"DIV",{class:!0});var Js=s(No);T(uy.$$.fragment,Js),YOo=i(Js),Ki=n(Js,"P",{});var FK=s(Ki);KOo=r(FK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),sV=n(FK,"A",{href:!0});var ect=s(sV);ZOo=r(ect,"from_pretrained()"),ect.forEach(t),eVo=r(FK," class method or the "),lV=n(FK,"A",{href:!0});var oct=s(lV);oVo=r(oct,"from_config()"),oct.forEach(t),rVo=r(FK,` class
method.`),FK.forEach(t),tVo=i(Js),_y=n(Js,"P",{});var fNe=s(_y);aVo=r(fNe,"This class cannot be instantiated directly using "),Oge=n(fNe,"CODE",{});var rct=s(Oge);nVo=r(rct,"__init__()"),rct.forEach(t),sVo=r(fNe," (throws an error)."),fNe.forEach(t),lVo=i(Js),ft=n(Js,"DIV",{class:!0});var u3=s(ft);T(by.$$.fragment,u3),iVo=i(u3),Vge=n(u3,"P",{});var tct=s(Vge);dVo=r(tct,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),tct.forEach(t),cVo=i(u3),Zi=n(u3,"P",{});var TK=s(Zi);fVo=r(TK,`Note:
Loading a model from its configuration file does `),Xge=n(TK,"STRONG",{});var act=s(Xge);mVo=r(act,"not"),act.forEach(t),gVo=r(TK,` load the model weights. It only affects the
model\u2019s configuration. Use `),iV=n(TK,"A",{href:!0});var nct=s(iV);hVo=r(nct,"from_pretrained()"),nct.forEach(t),pVo=r(TK," to load the model weights."),TK.forEach(t),uVo=i(u3),T(yF.$$.fragment,u3),u3.forEach(t),_Vo=i(Js),ao=n(Js,"DIV",{class:!0});var da=s(ao);T(vy.$$.fragment,da),bVo=i(da),zge=n(da,"P",{});var sct=s(zge);vVo=r(sct,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),sct.forEach(t),FVo=i(da),Ia=n(da,"P",{});var _3=s(Ia);TVo=r(_3,"The model class to instantiate is selected based on the "),Qge=n(_3,"CODE",{});var lct=s(Qge);MVo=r(lct,"model_type"),lct.forEach(t),EVo=r(_3,` property of the config object (either
passed as an argument or loaded from `),Wge=n(_3,"CODE",{});var ict=s(Wge);CVo=r(ict,"pretrained_model_name_or_path"),ict.forEach(t),wVo=r(_3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hge=n(_3,"CODE",{});var dct=s(Hge);AVo=r(dct,"pretrained_model_name_or_path"),dct.forEach(t),yVo=r(_3,":"),_3.forEach(t),LVo=i(da),Uge=n(da,"UL",{});var cct=s(Uge);LF=n(cct,"LI",{});var qxe=s(LF);Jge=n(qxe,"STRONG",{});var fct=s(Jge);xVo=r(fct,"tapas"),fct.forEach(t),$Vo=r(qxe," \u2014 "),dV=n(qxe,"A",{href:!0});var mct=s(dV);kVo=r(mct,"TapasForQuestionAnswering"),mct.forEach(t),SVo=r(qxe," (TAPAS model)"),qxe.forEach(t),cct.forEach(t),RVo=i(da),xF=n(da,"P",{});var Nxe=s(xF);BVo=r(Nxe,"The model is set in evaluation mode by default using "),Yge=n(Nxe,"CODE",{});var gct=s(Yge);PVo=r(gct,"model.eval()"),gct.forEach(t),IVo=r(Nxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Kge=n(Nxe,"CODE",{});var hct=s(Kge);qVo=r(hct,"model.train()"),hct.forEach(t),Nxe.forEach(t),NVo=i(da),T($F.$$.fragment,da),da.forEach(t),Js.forEach(t),iIe=i(f),ed=n(f,"H2",{class:!0});var mNe=s(ed);kF=n(mNe,"A",{id:!0,class:!0,href:!0});var pct=s(kF);Zge=n(pct,"SPAN",{});var uct=s(Zge);T(Fy.$$.fragment,uct),uct.forEach(t),pct.forEach(t),jVo=i(mNe),ehe=n(mNe,"SPAN",{});var _ct=s(ehe);DVo=r(_ct,"AutoModelForImageClassification"),_ct.forEach(t),mNe.forEach(t),dIe=i(f),jo=n(f,"DIV",{class:!0});var Ys=s(jo);T(Ty.$$.fragment,Ys),GVo=i(Ys),od=n(Ys,"P",{});var MK=s(od);OVo=r(MK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),cV=n(MK,"A",{href:!0});var bct=s(cV);VVo=r(bct,"from_pretrained()"),bct.forEach(t),XVo=r(MK," class method or the "),fV=n(MK,"A",{href:!0});var vct=s(fV);zVo=r(vct,"from_config()"),vct.forEach(t),QVo=r(MK,` class
method.`),MK.forEach(t),WVo=i(Ys),My=n(Ys,"P",{});var gNe=s(My);HVo=r(gNe,"This class cannot be instantiated directly using "),ohe=n(gNe,"CODE",{});var Fct=s(ohe);UVo=r(Fct,"__init__()"),Fct.forEach(t),JVo=r(gNe," (throws an error)."),gNe.forEach(t),YVo=i(Ys),mt=n(Ys,"DIV",{class:!0});var b3=s(mt);T(Ey.$$.fragment,b3),KVo=i(b3),rhe=n(b3,"P",{});var Tct=s(rhe);ZVo=r(Tct,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Tct.forEach(t),eXo=i(b3),rd=n(b3,"P",{});var EK=s(rd);oXo=r(EK,`Note:
Loading a model from its configuration file does `),the=n(EK,"STRONG",{});var Mct=s(the);rXo=r(Mct,"not"),Mct.forEach(t),tXo=r(EK,` load the model weights. It only affects the
model\u2019s configuration. Use `),mV=n(EK,"A",{href:!0});var Ect=s(mV);aXo=r(Ect,"from_pretrained()"),Ect.forEach(t),nXo=r(EK," to load the model weights."),EK.forEach(t),sXo=i(b3),T(SF.$$.fragment,b3),b3.forEach(t),lXo=i(Ys),no=n(Ys,"DIV",{class:!0});var ca=s(no);T(Cy.$$.fragment,ca),iXo=i(ca),ahe=n(ca,"P",{});var Cct=s(ahe);dXo=r(Cct,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Cct.forEach(t),cXo=i(ca),qa=n(ca,"P",{});var v3=s(qa);fXo=r(v3,"The model class to instantiate is selected based on the "),nhe=n(v3,"CODE",{});var wct=s(nhe);mXo=r(wct,"model_type"),wct.forEach(t),gXo=r(v3,` property of the config object (either
passed as an argument or loaded from `),she=n(v3,"CODE",{});var Act=s(she);hXo=r(Act,"pretrained_model_name_or_path"),Act.forEach(t),pXo=r(v3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lhe=n(v3,"CODE",{});var yct=s(lhe);uXo=r(yct,"pretrained_model_name_or_path"),yct.forEach(t),_Xo=r(v3,":"),v3.forEach(t),bXo=i(ca),Fe=n(ca,"UL",{});var Ee=s(Fe);RF=n(Ee,"LI",{});var jxe=s(RF);ihe=n(jxe,"STRONG",{});var Lct=s(ihe);vXo=r(Lct,"beit"),Lct.forEach(t),FXo=r(jxe," \u2014 "),gV=n(jxe,"A",{href:!0});var xct=s(gV);TXo=r(xct,"BeitForImageClassification"),xct.forEach(t),MXo=r(jxe," (BEiT model)"),jxe.forEach(t),EXo=i(Ee),BF=n(Ee,"LI",{});var Dxe=s(BF);dhe=n(Dxe,"STRONG",{});var $ct=s(dhe);CXo=r($ct,"convnext"),$ct.forEach(t),wXo=r(Dxe," \u2014 "),hV=n(Dxe,"A",{href:!0});var kct=s(hV);AXo=r(kct,"ConvNextForImageClassification"),kct.forEach(t),yXo=r(Dxe," (ConvNext model)"),Dxe.forEach(t),LXo=i(Ee),PF=n(Ee,"LI",{});var Gxe=s(PF);che=n(Gxe,"STRONG",{});var Sct=s(che);xXo=r(Sct,"data2vec-vision"),Sct.forEach(t),$Xo=r(Gxe," \u2014 "),pV=n(Gxe,"A",{href:!0});var Rct=s(pV);kXo=r(Rct,"Data2VecVisionForImageClassification"),Rct.forEach(t),SXo=r(Gxe," (Data2VecVision model)"),Gxe.forEach(t),RXo=i(Ee),Rs=n(Ee,"LI",{});var i$=s(Rs);fhe=n(i$,"STRONG",{});var Bct=s(fhe);BXo=r(Bct,"deit"),Bct.forEach(t),PXo=r(i$," \u2014 "),uV=n(i$,"A",{href:!0});var Pct=s(uV);IXo=r(Pct,"DeiTForImageClassification"),Pct.forEach(t),qXo=r(i$," or "),_V=n(i$,"A",{href:!0});var Ict=s(_V);NXo=r(Ict,"DeiTForImageClassificationWithTeacher"),Ict.forEach(t),jXo=r(i$," (DeiT model)"),i$.forEach(t),DXo=i(Ee),IF=n(Ee,"LI",{});var Oxe=s(IF);mhe=n(Oxe,"STRONG",{});var qct=s(mhe);GXo=r(qct,"imagegpt"),qct.forEach(t),OXo=r(Oxe," \u2014 "),bV=n(Oxe,"A",{href:!0});var Nct=s(bV);VXo=r(Nct,"ImageGPTForImageClassification"),Nct.forEach(t),XXo=r(Oxe," (ImageGPT model)"),Oxe.forEach(t),zXo=i(Ee),gt=n(Ee,"LI",{});var ff=s(gt);ghe=n(ff,"STRONG",{});var jct=s(ghe);QXo=r(jct,"perceiver"),jct.forEach(t),WXo=r(ff," \u2014 "),vV=n(ff,"A",{href:!0});var Dct=s(vV);HXo=r(Dct,"PerceiverForImageClassificationLearned"),Dct.forEach(t),UXo=r(ff," or "),FV=n(ff,"A",{href:!0});var Gct=s(FV);JXo=r(Gct,"PerceiverForImageClassificationFourier"),Gct.forEach(t),YXo=r(ff," or "),TV=n(ff,"A",{href:!0});var Oct=s(TV);KXo=r(Oct,"PerceiverForImageClassificationConvProcessing"),Oct.forEach(t),ZXo=r(ff," (Perceiver model)"),ff.forEach(t),ezo=i(Ee),qF=n(Ee,"LI",{});var Vxe=s(qF);hhe=n(Vxe,"STRONG",{});var Vct=s(hhe);ozo=r(Vct,"poolformer"),Vct.forEach(t),rzo=r(Vxe," \u2014 "),MV=n(Vxe,"A",{href:!0});var Xct=s(MV);tzo=r(Xct,"PoolFormerForImageClassification"),Xct.forEach(t),azo=r(Vxe," (PoolFormer model)"),Vxe.forEach(t),nzo=i(Ee),NF=n(Ee,"LI",{});var Xxe=s(NF);phe=n(Xxe,"STRONG",{});var zct=s(phe);szo=r(zct,"regnet"),zct.forEach(t),lzo=r(Xxe," \u2014 "),EV=n(Xxe,"A",{href:!0});var Qct=s(EV);izo=r(Qct,"RegNetForImageClassification"),Qct.forEach(t),dzo=r(Xxe," (RegNet model)"),Xxe.forEach(t),czo=i(Ee),jF=n(Ee,"LI",{});var zxe=s(jF);uhe=n(zxe,"STRONG",{});var Wct=s(uhe);fzo=r(Wct,"resnet"),Wct.forEach(t),mzo=r(zxe," \u2014 "),CV=n(zxe,"A",{href:!0});var Hct=s(CV);gzo=r(Hct,"ResNetForImageClassification"),Hct.forEach(t),hzo=r(zxe," (ResNet model)"),zxe.forEach(t),pzo=i(Ee),DF=n(Ee,"LI",{});var Qxe=s(DF);_he=n(Qxe,"STRONG",{});var Uct=s(_he);uzo=r(Uct,"segformer"),Uct.forEach(t),_zo=r(Qxe," \u2014 "),wV=n(Qxe,"A",{href:!0});var Jct=s(wV);bzo=r(Jct,"SegformerForImageClassification"),Jct.forEach(t),vzo=r(Qxe," (SegFormer model)"),Qxe.forEach(t),Fzo=i(Ee),GF=n(Ee,"LI",{});var Wxe=s(GF);bhe=n(Wxe,"STRONG",{});var Yct=s(bhe);Tzo=r(Yct,"swin"),Yct.forEach(t),Mzo=r(Wxe," \u2014 "),AV=n(Wxe,"A",{href:!0});var Kct=s(AV);Ezo=r(Kct,"SwinForImageClassification"),Kct.forEach(t),Czo=r(Wxe," (Swin model)"),Wxe.forEach(t),wzo=i(Ee),OF=n(Ee,"LI",{});var Hxe=s(OF);vhe=n(Hxe,"STRONG",{});var Zct=s(vhe);Azo=r(Zct,"van"),Zct.forEach(t),yzo=r(Hxe," \u2014 "),yV=n(Hxe,"A",{href:!0});var eft=s(yV);Lzo=r(eft,"VanForImageClassification"),eft.forEach(t),xzo=r(Hxe," (VAN model)"),Hxe.forEach(t),$zo=i(Ee),VF=n(Ee,"LI",{});var Uxe=s(VF);Fhe=n(Uxe,"STRONG",{});var oft=s(Fhe);kzo=r(oft,"vit"),oft.forEach(t),Szo=r(Uxe," \u2014 "),LV=n(Uxe,"A",{href:!0});var rft=s(LV);Rzo=r(rft,"ViTForImageClassification"),rft.forEach(t),Bzo=r(Uxe," (ViT model)"),Uxe.forEach(t),Ee.forEach(t),Pzo=i(ca),XF=n(ca,"P",{});var Jxe=s(XF);Izo=r(Jxe,"The model is set in evaluation mode by default using "),The=n(Jxe,"CODE",{});var tft=s(The);qzo=r(tft,"model.eval()"),tft.forEach(t),Nzo=r(Jxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Mhe=n(Jxe,"CODE",{});var aft=s(Mhe);jzo=r(aft,"model.train()"),aft.forEach(t),Jxe.forEach(t),Dzo=i(ca),T(zF.$$.fragment,ca),ca.forEach(t),Ys.forEach(t),cIe=i(f),td=n(f,"H2",{class:!0});var hNe=s(td);QF=n(hNe,"A",{id:!0,class:!0,href:!0});var nft=s(QF);Ehe=n(nft,"SPAN",{});var sft=s(Ehe);T(wy.$$.fragment,sft),sft.forEach(t),nft.forEach(t),Gzo=i(hNe),Che=n(hNe,"SPAN",{});var lft=s(Che);Ozo=r(lft,"AutoModelForVision2Seq"),lft.forEach(t),hNe.forEach(t),fIe=i(f),Do=n(f,"DIV",{class:!0});var Ks=s(Do);T(Ay.$$.fragment,Ks),Vzo=i(Ks),ad=n(Ks,"P",{});var CK=s(ad);Xzo=r(CK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),xV=n(CK,"A",{href:!0});var ift=s(xV);zzo=r(ift,"from_pretrained()"),ift.forEach(t),Qzo=r(CK," class method or the "),$V=n(CK,"A",{href:!0});var dft=s($V);Wzo=r(dft,"from_config()"),dft.forEach(t),Hzo=r(CK,` class
method.`),CK.forEach(t),Uzo=i(Ks),yy=n(Ks,"P",{});var pNe=s(yy);Jzo=r(pNe,"This class cannot be instantiated directly using "),whe=n(pNe,"CODE",{});var cft=s(whe);Yzo=r(cft,"__init__()"),cft.forEach(t),Kzo=r(pNe," (throws an error)."),pNe.forEach(t),Zzo=i(Ks),ht=n(Ks,"DIV",{class:!0});var F3=s(ht);T(Ly.$$.fragment,F3),eQo=i(F3),Ahe=n(F3,"P",{});var fft=s(Ahe);oQo=r(fft,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),fft.forEach(t),rQo=i(F3),nd=n(F3,"P",{});var wK=s(nd);tQo=r(wK,`Note:
Loading a model from its configuration file does `),yhe=n(wK,"STRONG",{});var mft=s(yhe);aQo=r(mft,"not"),mft.forEach(t),nQo=r(wK,` load the model weights. It only affects the
model\u2019s configuration. Use `),kV=n(wK,"A",{href:!0});var gft=s(kV);sQo=r(gft,"from_pretrained()"),gft.forEach(t),lQo=r(wK," to load the model weights."),wK.forEach(t),iQo=i(F3),T(WF.$$.fragment,F3),F3.forEach(t),dQo=i(Ks),so=n(Ks,"DIV",{class:!0});var fa=s(so);T(xy.$$.fragment,fa),cQo=i(fa),Lhe=n(fa,"P",{});var hft=s(Lhe);fQo=r(hft,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),hft.forEach(t),mQo=i(fa),Na=n(fa,"P",{});var T3=s(Na);gQo=r(T3,"The model class to instantiate is selected based on the "),xhe=n(T3,"CODE",{});var pft=s(xhe);hQo=r(pft,"model_type"),pft.forEach(t),pQo=r(T3,` property of the config object (either
passed as an argument or loaded from `),$he=n(T3,"CODE",{});var uft=s($he);uQo=r(uft,"pretrained_model_name_or_path"),uft.forEach(t),_Qo=r(T3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),khe=n(T3,"CODE",{});var _ft=s(khe);bQo=r(_ft,"pretrained_model_name_or_path"),_ft.forEach(t),vQo=r(T3,":"),T3.forEach(t),FQo=i(fa),She=n(fa,"UL",{});var bft=s(She);HF=n(bft,"LI",{});var Yxe=s(HF);Rhe=n(Yxe,"STRONG",{});var vft=s(Rhe);TQo=r(vft,"vision-encoder-decoder"),vft.forEach(t),MQo=r(Yxe," \u2014 "),SV=n(Yxe,"A",{href:!0});var Fft=s(SV);EQo=r(Fft,"VisionEncoderDecoderModel"),Fft.forEach(t),CQo=r(Yxe," (Vision Encoder decoder model)"),Yxe.forEach(t),bft.forEach(t),wQo=i(fa),UF=n(fa,"P",{});var Kxe=s(UF);AQo=r(Kxe,"The model is set in evaluation mode by default using "),Bhe=n(Kxe,"CODE",{});var Tft=s(Bhe);yQo=r(Tft,"model.eval()"),Tft.forEach(t),LQo=r(Kxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Phe=n(Kxe,"CODE",{});var Mft=s(Phe);xQo=r(Mft,"model.train()"),Mft.forEach(t),Kxe.forEach(t),$Qo=i(fa),T(JF.$$.fragment,fa),fa.forEach(t),Ks.forEach(t),mIe=i(f),sd=n(f,"H2",{class:!0});var uNe=s(sd);YF=n(uNe,"A",{id:!0,class:!0,href:!0});var Eft=s(YF);Ihe=n(Eft,"SPAN",{});var Cft=s(Ihe);T($y.$$.fragment,Cft),Cft.forEach(t),Eft.forEach(t),kQo=i(uNe),qhe=n(uNe,"SPAN",{});var wft=s(qhe);SQo=r(wft,"AutoModelForAudioClassification"),wft.forEach(t),uNe.forEach(t),gIe=i(f),Go=n(f,"DIV",{class:!0});var Zs=s(Go);T(ky.$$.fragment,Zs),RQo=i(Zs),ld=n(Zs,"P",{});var AK=s(ld);BQo=r(AK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),RV=n(AK,"A",{href:!0});var Aft=s(RV);PQo=r(Aft,"from_pretrained()"),Aft.forEach(t),IQo=r(AK," class method or the "),BV=n(AK,"A",{href:!0});var yft=s(BV);qQo=r(yft,"from_config()"),yft.forEach(t),NQo=r(AK,` class
method.`),AK.forEach(t),jQo=i(Zs),Sy=n(Zs,"P",{});var _Ne=s(Sy);DQo=r(_Ne,"This class cannot be instantiated directly using "),Nhe=n(_Ne,"CODE",{});var Lft=s(Nhe);GQo=r(Lft,"__init__()"),Lft.forEach(t),OQo=r(_Ne," (throws an error)."),_Ne.forEach(t),VQo=i(Zs),pt=n(Zs,"DIV",{class:!0});var M3=s(pt);T(Ry.$$.fragment,M3),XQo=i(M3),jhe=n(M3,"P",{});var xft=s(jhe);zQo=r(xft,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),xft.forEach(t),QQo=i(M3),id=n(M3,"P",{});var yK=s(id);WQo=r(yK,`Note:
Loading a model from its configuration file does `),Dhe=n(yK,"STRONG",{});var $ft=s(Dhe);HQo=r($ft,"not"),$ft.forEach(t),UQo=r(yK,` load the model weights. It only affects the
model\u2019s configuration. Use `),PV=n(yK,"A",{href:!0});var kft=s(PV);JQo=r(kft,"from_pretrained()"),kft.forEach(t),YQo=r(yK," to load the model weights."),yK.forEach(t),KQo=i(M3),T(KF.$$.fragment,M3),M3.forEach(t),ZQo=i(Zs),lo=n(Zs,"DIV",{class:!0});var ma=s(lo);T(By.$$.fragment,ma),eWo=i(ma),Ghe=n(ma,"P",{});var Sft=s(Ghe);oWo=r(Sft,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),Sft.forEach(t),rWo=i(ma),ja=n(ma,"P",{});var E3=s(ja);tWo=r(E3,"The model class to instantiate is selected based on the "),Ohe=n(E3,"CODE",{});var Rft=s(Ohe);aWo=r(Rft,"model_type"),Rft.forEach(t),nWo=r(E3,` property of the config object (either
passed as an argument or loaded from `),Vhe=n(E3,"CODE",{});var Bft=s(Vhe);sWo=r(Bft,"pretrained_model_name_or_path"),Bft.forEach(t),lWo=r(E3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xhe=n(E3,"CODE",{});var Pft=s(Xhe);iWo=r(Pft,"pretrained_model_name_or_path"),Pft.forEach(t),dWo=r(E3,":"),E3.forEach(t),cWo=i(ma),Ne=n(ma,"UL",{});var bo=s(Ne);ZF=n(bo,"LI",{});var Zxe=s(ZF);zhe=n(Zxe,"STRONG",{});var Ift=s(zhe);fWo=r(Ift,"data2vec-audio"),Ift.forEach(t),mWo=r(Zxe," \u2014 "),IV=n(Zxe,"A",{href:!0});var qft=s(IV);gWo=r(qft,"Data2VecAudioForSequenceClassification"),qft.forEach(t),hWo=r(Zxe," (Data2VecAudio model)"),Zxe.forEach(t),pWo=i(bo),e0=n(bo,"LI",{});var e9e=s(e0);Qhe=n(e9e,"STRONG",{});var Nft=s(Qhe);uWo=r(Nft,"hubert"),Nft.forEach(t),_Wo=r(e9e," \u2014 "),qV=n(e9e,"A",{href:!0});var jft=s(qV);bWo=r(jft,"HubertForSequenceClassification"),jft.forEach(t),vWo=r(e9e," (Hubert model)"),e9e.forEach(t),FWo=i(bo),o0=n(bo,"LI",{});var o9e=s(o0);Whe=n(o9e,"STRONG",{});var Dft=s(Whe);TWo=r(Dft,"sew"),Dft.forEach(t),MWo=r(o9e," \u2014 "),NV=n(o9e,"A",{href:!0});var Gft=s(NV);EWo=r(Gft,"SEWForSequenceClassification"),Gft.forEach(t),CWo=r(o9e," (SEW model)"),o9e.forEach(t),wWo=i(bo),r0=n(bo,"LI",{});var r9e=s(r0);Hhe=n(r9e,"STRONG",{});var Oft=s(Hhe);AWo=r(Oft,"sew-d"),Oft.forEach(t),yWo=r(r9e," \u2014 "),jV=n(r9e,"A",{href:!0});var Vft=s(jV);LWo=r(Vft,"SEWDForSequenceClassification"),Vft.forEach(t),xWo=r(r9e," (SEW-D model)"),r9e.forEach(t),$Wo=i(bo),t0=n(bo,"LI",{});var t9e=s(t0);Uhe=n(t9e,"STRONG",{});var Xft=s(Uhe);kWo=r(Xft,"unispeech"),Xft.forEach(t),SWo=r(t9e," \u2014 "),DV=n(t9e,"A",{href:!0});var zft=s(DV);RWo=r(zft,"UniSpeechForSequenceClassification"),zft.forEach(t),BWo=r(t9e," (UniSpeech model)"),t9e.forEach(t),PWo=i(bo),a0=n(bo,"LI",{});var a9e=s(a0);Jhe=n(a9e,"STRONG",{});var Qft=s(Jhe);IWo=r(Qft,"unispeech-sat"),Qft.forEach(t),qWo=r(a9e," \u2014 "),GV=n(a9e,"A",{href:!0});var Wft=s(GV);NWo=r(Wft,"UniSpeechSatForSequenceClassification"),Wft.forEach(t),jWo=r(a9e," (UniSpeechSat model)"),a9e.forEach(t),DWo=i(bo),n0=n(bo,"LI",{});var n9e=s(n0);Yhe=n(n9e,"STRONG",{});var Hft=s(Yhe);GWo=r(Hft,"wav2vec2"),Hft.forEach(t),OWo=r(n9e," \u2014 "),OV=n(n9e,"A",{href:!0});var Uft=s(OV);VWo=r(Uft,"Wav2Vec2ForSequenceClassification"),Uft.forEach(t),XWo=r(n9e," (Wav2Vec2 model)"),n9e.forEach(t),zWo=i(bo),s0=n(bo,"LI",{});var s9e=s(s0);Khe=n(s9e,"STRONG",{});var Jft=s(Khe);QWo=r(Jft,"wavlm"),Jft.forEach(t),WWo=r(s9e," \u2014 "),VV=n(s9e,"A",{href:!0});var Yft=s(VV);HWo=r(Yft,"WavLMForSequenceClassification"),Yft.forEach(t),UWo=r(s9e," (WavLM model)"),s9e.forEach(t),bo.forEach(t),JWo=i(ma),l0=n(ma,"P",{});var l9e=s(l0);YWo=r(l9e,"The model is set in evaluation mode by default using "),Zhe=n(l9e,"CODE",{});var Kft=s(Zhe);KWo=r(Kft,"model.eval()"),Kft.forEach(t),ZWo=r(l9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),epe=n(l9e,"CODE",{});var Zft=s(epe);eHo=r(Zft,"model.train()"),Zft.forEach(t),l9e.forEach(t),oHo=i(ma),T(i0.$$.fragment,ma),ma.forEach(t),Zs.forEach(t),hIe=i(f),dd=n(f,"H2",{class:!0});var bNe=s(dd);d0=n(bNe,"A",{id:!0,class:!0,href:!0});var emt=s(d0);ope=n(emt,"SPAN",{});var omt=s(ope);T(Py.$$.fragment,omt),omt.forEach(t),emt.forEach(t),rHo=i(bNe),rpe=n(bNe,"SPAN",{});var rmt=s(rpe);tHo=r(rmt,"AutoModelForAudioFrameClassification"),rmt.forEach(t),bNe.forEach(t),pIe=i(f),Oo=n(f,"DIV",{class:!0});var el=s(Oo);T(Iy.$$.fragment,el),aHo=i(el),cd=n(el,"P",{});var LK=s(cd);nHo=r(LK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),XV=n(LK,"A",{href:!0});var tmt=s(XV);sHo=r(tmt,"from_pretrained()"),tmt.forEach(t),lHo=r(LK," class method or the "),zV=n(LK,"A",{href:!0});var amt=s(zV);iHo=r(amt,"from_config()"),amt.forEach(t),dHo=r(LK,` class
method.`),LK.forEach(t),cHo=i(el),qy=n(el,"P",{});var vNe=s(qy);fHo=r(vNe,"This class cannot be instantiated directly using "),tpe=n(vNe,"CODE",{});var nmt=s(tpe);mHo=r(nmt,"__init__()"),nmt.forEach(t),gHo=r(vNe," (throws an error)."),vNe.forEach(t),hHo=i(el),ut=n(el,"DIV",{class:!0});var C3=s(ut);T(Ny.$$.fragment,C3),pHo=i(C3),ape=n(C3,"P",{});var smt=s(ape);uHo=r(smt,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),smt.forEach(t),_Ho=i(C3),fd=n(C3,"P",{});var xK=s(fd);bHo=r(xK,`Note:
Loading a model from its configuration file does `),npe=n(xK,"STRONG",{});var lmt=s(npe);vHo=r(lmt,"not"),lmt.forEach(t),FHo=r(xK,` load the model weights. It only affects the
model\u2019s configuration. Use `),QV=n(xK,"A",{href:!0});var imt=s(QV);THo=r(imt,"from_pretrained()"),imt.forEach(t),MHo=r(xK," to load the model weights."),xK.forEach(t),EHo=i(C3),T(c0.$$.fragment,C3),C3.forEach(t),CHo=i(el),io=n(el,"DIV",{class:!0});var ga=s(io);T(jy.$$.fragment,ga),wHo=i(ga),spe=n(ga,"P",{});var dmt=s(spe);AHo=r(dmt,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),dmt.forEach(t),yHo=i(ga),Da=n(ga,"P",{});var w3=s(Da);LHo=r(w3,"The model class to instantiate is selected based on the "),lpe=n(w3,"CODE",{});var cmt=s(lpe);xHo=r(cmt,"model_type"),cmt.forEach(t),$Ho=r(w3,` property of the config object (either
passed as an argument or loaded from `),ipe=n(w3,"CODE",{});var fmt=s(ipe);kHo=r(fmt,"pretrained_model_name_or_path"),fmt.forEach(t),SHo=r(w3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dpe=n(w3,"CODE",{});var mmt=s(dpe);RHo=r(mmt,"pretrained_model_name_or_path"),mmt.forEach(t),BHo=r(w3,":"),w3.forEach(t),PHo=i(ga),Ga=n(ga,"UL",{});var A3=s(Ga);f0=n(A3,"LI",{});var i9e=s(f0);cpe=n(i9e,"STRONG",{});var gmt=s(cpe);IHo=r(gmt,"data2vec-audio"),gmt.forEach(t),qHo=r(i9e," \u2014 "),WV=n(i9e,"A",{href:!0});var hmt=s(WV);NHo=r(hmt,"Data2VecAudioForAudioFrameClassification"),hmt.forEach(t),jHo=r(i9e," (Data2VecAudio model)"),i9e.forEach(t),DHo=i(A3),m0=n(A3,"LI",{});var d9e=s(m0);fpe=n(d9e,"STRONG",{});var pmt=s(fpe);GHo=r(pmt,"unispeech-sat"),pmt.forEach(t),OHo=r(d9e," \u2014 "),HV=n(d9e,"A",{href:!0});var umt=s(HV);VHo=r(umt,"UniSpeechSatForAudioFrameClassification"),umt.forEach(t),XHo=r(d9e," (UniSpeechSat model)"),d9e.forEach(t),zHo=i(A3),g0=n(A3,"LI",{});var c9e=s(g0);mpe=n(c9e,"STRONG",{});var _mt=s(mpe);QHo=r(_mt,"wav2vec2"),_mt.forEach(t),WHo=r(c9e," \u2014 "),UV=n(c9e,"A",{href:!0});var bmt=s(UV);HHo=r(bmt,"Wav2Vec2ForAudioFrameClassification"),bmt.forEach(t),UHo=r(c9e," (Wav2Vec2 model)"),c9e.forEach(t),JHo=i(A3),h0=n(A3,"LI",{});var f9e=s(h0);gpe=n(f9e,"STRONG",{});var vmt=s(gpe);YHo=r(vmt,"wavlm"),vmt.forEach(t),KHo=r(f9e," \u2014 "),JV=n(f9e,"A",{href:!0});var Fmt=s(JV);ZHo=r(Fmt,"WavLMForAudioFrameClassification"),Fmt.forEach(t),eUo=r(f9e," (WavLM model)"),f9e.forEach(t),A3.forEach(t),oUo=i(ga),p0=n(ga,"P",{});var m9e=s(p0);rUo=r(m9e,"The model is set in evaluation mode by default using "),hpe=n(m9e,"CODE",{});var Tmt=s(hpe);tUo=r(Tmt,"model.eval()"),Tmt.forEach(t),aUo=r(m9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ppe=n(m9e,"CODE",{});var Mmt=s(ppe);nUo=r(Mmt,"model.train()"),Mmt.forEach(t),m9e.forEach(t),sUo=i(ga),T(u0.$$.fragment,ga),ga.forEach(t),el.forEach(t),uIe=i(f),md=n(f,"H2",{class:!0});var FNe=s(md);_0=n(FNe,"A",{id:!0,class:!0,href:!0});var Emt=s(_0);upe=n(Emt,"SPAN",{});var Cmt=s(upe);T(Dy.$$.fragment,Cmt),Cmt.forEach(t),Emt.forEach(t),lUo=i(FNe),_pe=n(FNe,"SPAN",{});var wmt=s(_pe);iUo=r(wmt,"AutoModelForCTC"),wmt.forEach(t),FNe.forEach(t),_Ie=i(f),Vo=n(f,"DIV",{class:!0});var ol=s(Vo);T(Gy.$$.fragment,ol),dUo=i(ol),gd=n(ol,"P",{});var $K=s(gd);cUo=r($K,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),YV=n($K,"A",{href:!0});var Amt=s(YV);fUo=r(Amt,"from_pretrained()"),Amt.forEach(t),mUo=r($K," class method or the "),KV=n($K,"A",{href:!0});var ymt=s(KV);gUo=r(ymt,"from_config()"),ymt.forEach(t),hUo=r($K,` class
method.`),$K.forEach(t),pUo=i(ol),Oy=n(ol,"P",{});var TNe=s(Oy);uUo=r(TNe,"This class cannot be instantiated directly using "),bpe=n(TNe,"CODE",{});var Lmt=s(bpe);_Uo=r(Lmt,"__init__()"),Lmt.forEach(t),bUo=r(TNe," (throws an error)."),TNe.forEach(t),vUo=i(ol),_t=n(ol,"DIV",{class:!0});var y3=s(_t);T(Vy.$$.fragment,y3),FUo=i(y3),vpe=n(y3,"P",{});var xmt=s(vpe);TUo=r(xmt,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),xmt.forEach(t),MUo=i(y3),hd=n(y3,"P",{});var kK=s(hd);EUo=r(kK,`Note:
Loading a model from its configuration file does `),Fpe=n(kK,"STRONG",{});var $mt=s(Fpe);CUo=r($mt,"not"),$mt.forEach(t),wUo=r(kK,` load the model weights. It only affects the
model\u2019s configuration. Use `),ZV=n(kK,"A",{href:!0});var kmt=s(ZV);AUo=r(kmt,"from_pretrained()"),kmt.forEach(t),yUo=r(kK," to load the model weights."),kK.forEach(t),LUo=i(y3),T(b0.$$.fragment,y3),y3.forEach(t),xUo=i(ol),co=n(ol,"DIV",{class:!0});var ha=s(co);T(Xy.$$.fragment,ha),$Uo=i(ha),Tpe=n(ha,"P",{});var Smt=s(Tpe);kUo=r(Smt,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),Smt.forEach(t),SUo=i(ha),Oa=n(ha,"P",{});var L3=s(Oa);RUo=r(L3,"The model class to instantiate is selected based on the "),Mpe=n(L3,"CODE",{});var Rmt=s(Mpe);BUo=r(Rmt,"model_type"),Rmt.forEach(t),PUo=r(L3,` property of the config object (either
passed as an argument or loaded from `),Epe=n(L3,"CODE",{});var Bmt=s(Epe);IUo=r(Bmt,"pretrained_model_name_or_path"),Bmt.forEach(t),qUo=r(L3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cpe=n(L3,"CODE",{});var Pmt=s(Cpe);NUo=r(Pmt,"pretrained_model_name_or_path"),Pmt.forEach(t),jUo=r(L3,":"),L3.forEach(t),DUo=i(ha),je=n(ha,"UL",{});var vo=s(je);v0=n(vo,"LI",{});var g9e=s(v0);wpe=n(g9e,"STRONG",{});var Imt=s(wpe);GUo=r(Imt,"data2vec-audio"),Imt.forEach(t),OUo=r(g9e," \u2014 "),eX=n(g9e,"A",{href:!0});var qmt=s(eX);VUo=r(qmt,"Data2VecAudioForCTC"),qmt.forEach(t),XUo=r(g9e," (Data2VecAudio model)"),g9e.forEach(t),zUo=i(vo),F0=n(vo,"LI",{});var h9e=s(F0);Ape=n(h9e,"STRONG",{});var Nmt=s(Ape);QUo=r(Nmt,"hubert"),Nmt.forEach(t),WUo=r(h9e," \u2014 "),oX=n(h9e,"A",{href:!0});var jmt=s(oX);HUo=r(jmt,"HubertForCTC"),jmt.forEach(t),UUo=r(h9e," (Hubert model)"),h9e.forEach(t),JUo=i(vo),T0=n(vo,"LI",{});var p9e=s(T0);ype=n(p9e,"STRONG",{});var Dmt=s(ype);YUo=r(Dmt,"sew"),Dmt.forEach(t),KUo=r(p9e," \u2014 "),rX=n(p9e,"A",{href:!0});var Gmt=s(rX);ZUo=r(Gmt,"SEWForCTC"),Gmt.forEach(t),eJo=r(p9e," (SEW model)"),p9e.forEach(t),oJo=i(vo),M0=n(vo,"LI",{});var u9e=s(M0);Lpe=n(u9e,"STRONG",{});var Omt=s(Lpe);rJo=r(Omt,"sew-d"),Omt.forEach(t),tJo=r(u9e," \u2014 "),tX=n(u9e,"A",{href:!0});var Vmt=s(tX);aJo=r(Vmt,"SEWDForCTC"),Vmt.forEach(t),nJo=r(u9e," (SEW-D model)"),u9e.forEach(t),sJo=i(vo),E0=n(vo,"LI",{});var _9e=s(E0);xpe=n(_9e,"STRONG",{});var Xmt=s(xpe);lJo=r(Xmt,"unispeech"),Xmt.forEach(t),iJo=r(_9e," \u2014 "),aX=n(_9e,"A",{href:!0});var zmt=s(aX);dJo=r(zmt,"UniSpeechForCTC"),zmt.forEach(t),cJo=r(_9e," (UniSpeech model)"),_9e.forEach(t),fJo=i(vo),C0=n(vo,"LI",{});var b9e=s(C0);$pe=n(b9e,"STRONG",{});var Qmt=s($pe);mJo=r(Qmt,"unispeech-sat"),Qmt.forEach(t),gJo=r(b9e," \u2014 "),nX=n(b9e,"A",{href:!0});var Wmt=s(nX);hJo=r(Wmt,"UniSpeechSatForCTC"),Wmt.forEach(t),pJo=r(b9e," (UniSpeechSat model)"),b9e.forEach(t),uJo=i(vo),w0=n(vo,"LI",{});var v9e=s(w0);kpe=n(v9e,"STRONG",{});var Hmt=s(kpe);_Jo=r(Hmt,"wav2vec2"),Hmt.forEach(t),bJo=r(v9e," \u2014 "),sX=n(v9e,"A",{href:!0});var Umt=s(sX);vJo=r(Umt,"Wav2Vec2ForCTC"),Umt.forEach(t),FJo=r(v9e," (Wav2Vec2 model)"),v9e.forEach(t),TJo=i(vo),A0=n(vo,"LI",{});var F9e=s(A0);Spe=n(F9e,"STRONG",{});var Jmt=s(Spe);MJo=r(Jmt,"wavlm"),Jmt.forEach(t),EJo=r(F9e," \u2014 "),lX=n(F9e,"A",{href:!0});var Ymt=s(lX);CJo=r(Ymt,"WavLMForCTC"),Ymt.forEach(t),wJo=r(F9e," (WavLM model)"),F9e.forEach(t),vo.forEach(t),AJo=i(ha),y0=n(ha,"P",{});var T9e=s(y0);yJo=r(T9e,"The model is set in evaluation mode by default using "),Rpe=n(T9e,"CODE",{});var Kmt=s(Rpe);LJo=r(Kmt,"model.eval()"),Kmt.forEach(t),xJo=r(T9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Bpe=n(T9e,"CODE",{});var Zmt=s(Bpe);$Jo=r(Zmt,"model.train()"),Zmt.forEach(t),T9e.forEach(t),kJo=i(ha),T(L0.$$.fragment,ha),ha.forEach(t),ol.forEach(t),bIe=i(f),pd=n(f,"H2",{class:!0});var MNe=s(pd);x0=n(MNe,"A",{id:!0,class:!0,href:!0});var egt=s(x0);Ppe=n(egt,"SPAN",{});var ogt=s(Ppe);T(zy.$$.fragment,ogt),ogt.forEach(t),egt.forEach(t),SJo=i(MNe),Ipe=n(MNe,"SPAN",{});var rgt=s(Ipe);RJo=r(rgt,"AutoModelForSpeechSeq2Seq"),rgt.forEach(t),MNe.forEach(t),vIe=i(f),Xo=n(f,"DIV",{class:!0});var rl=s(Xo);T(Qy.$$.fragment,rl),BJo=i(rl),ud=n(rl,"P",{});var SK=s(ud);PJo=r(SK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),iX=n(SK,"A",{href:!0});var tgt=s(iX);IJo=r(tgt,"from_pretrained()"),tgt.forEach(t),qJo=r(SK," class method or the "),dX=n(SK,"A",{href:!0});var agt=s(dX);NJo=r(agt,"from_config()"),agt.forEach(t),jJo=r(SK,` class
method.`),SK.forEach(t),DJo=i(rl),Wy=n(rl,"P",{});var ENe=s(Wy);GJo=r(ENe,"This class cannot be instantiated directly using "),qpe=n(ENe,"CODE",{});var ngt=s(qpe);OJo=r(ngt,"__init__()"),ngt.forEach(t),VJo=r(ENe," (throws an error)."),ENe.forEach(t),XJo=i(rl),bt=n(rl,"DIV",{class:!0});var x3=s(bt);T(Hy.$$.fragment,x3),zJo=i(x3),Npe=n(x3,"P",{});var sgt=s(Npe);QJo=r(sgt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),sgt.forEach(t),WJo=i(x3),_d=n(x3,"P",{});var RK=s(_d);HJo=r(RK,`Note:
Loading a model from its configuration file does `),jpe=n(RK,"STRONG",{});var lgt=s(jpe);UJo=r(lgt,"not"),lgt.forEach(t),JJo=r(RK,` load the model weights. It only affects the
model\u2019s configuration. Use `),cX=n(RK,"A",{href:!0});var igt=s(cX);YJo=r(igt,"from_pretrained()"),igt.forEach(t),KJo=r(RK," to load the model weights."),RK.forEach(t),ZJo=i(x3),T($0.$$.fragment,x3),x3.forEach(t),eYo=i(rl),fo=n(rl,"DIV",{class:!0});var pa=s(fo);T(Uy.$$.fragment,pa),oYo=i(pa),Dpe=n(pa,"P",{});var dgt=s(Dpe);rYo=r(dgt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),dgt.forEach(t),tYo=i(pa),Va=n(pa,"P",{});var $3=s(Va);aYo=r($3,"The model class to instantiate is selected based on the "),Gpe=n($3,"CODE",{});var cgt=s(Gpe);nYo=r(cgt,"model_type"),cgt.forEach(t),sYo=r($3,` property of the config object (either
passed as an argument or loaded from `),Ope=n($3,"CODE",{});var fgt=s(Ope);lYo=r(fgt,"pretrained_model_name_or_path"),fgt.forEach(t),iYo=r($3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vpe=n($3,"CODE",{});var mgt=s(Vpe);dYo=r(mgt,"pretrained_model_name_or_path"),mgt.forEach(t),cYo=r($3,":"),$3.forEach(t),fYo=i(pa),Jy=n(pa,"UL",{});var CNe=s(Jy);k0=n(CNe,"LI",{});var M9e=s(k0);Xpe=n(M9e,"STRONG",{});var ggt=s(Xpe);mYo=r(ggt,"speech-encoder-decoder"),ggt.forEach(t),gYo=r(M9e," \u2014 "),fX=n(M9e,"A",{href:!0});var hgt=s(fX);hYo=r(hgt,"SpeechEncoderDecoderModel"),hgt.forEach(t),pYo=r(M9e," (Speech Encoder decoder model)"),M9e.forEach(t),uYo=i(CNe),S0=n(CNe,"LI",{});var E9e=s(S0);zpe=n(E9e,"STRONG",{});var pgt=s(zpe);_Yo=r(pgt,"speech_to_text"),pgt.forEach(t),bYo=r(E9e," \u2014 "),mX=n(E9e,"A",{href:!0});var ugt=s(mX);vYo=r(ugt,"Speech2TextForConditionalGeneration"),ugt.forEach(t),FYo=r(E9e," (Speech2Text model)"),E9e.forEach(t),CNe.forEach(t),TYo=i(pa),R0=n(pa,"P",{});var C9e=s(R0);MYo=r(C9e,"The model is set in evaluation mode by default using "),Qpe=n(C9e,"CODE",{});var _gt=s(Qpe);EYo=r(_gt,"model.eval()"),_gt.forEach(t),CYo=r(C9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Wpe=n(C9e,"CODE",{});var bgt=s(Wpe);wYo=r(bgt,"model.train()"),bgt.forEach(t),C9e.forEach(t),AYo=i(pa),T(B0.$$.fragment,pa),pa.forEach(t),rl.forEach(t),FIe=i(f),bd=n(f,"H2",{class:!0});var wNe=s(bd);P0=n(wNe,"A",{id:!0,class:!0,href:!0});var vgt=s(P0);Hpe=n(vgt,"SPAN",{});var Fgt=s(Hpe);T(Yy.$$.fragment,Fgt),Fgt.forEach(t),vgt.forEach(t),yYo=i(wNe),Upe=n(wNe,"SPAN",{});var Tgt=s(Upe);LYo=r(Tgt,"AutoModelForAudioXVector"),Tgt.forEach(t),wNe.forEach(t),TIe=i(f),zo=n(f,"DIV",{class:!0});var tl=s(zo);T(Ky.$$.fragment,tl),xYo=i(tl),vd=n(tl,"P",{});var BK=s(vd);$Yo=r(BK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),gX=n(BK,"A",{href:!0});var Mgt=s(gX);kYo=r(Mgt,"from_pretrained()"),Mgt.forEach(t),SYo=r(BK," class method or the "),hX=n(BK,"A",{href:!0});var Egt=s(hX);RYo=r(Egt,"from_config()"),Egt.forEach(t),BYo=r(BK,` class
method.`),BK.forEach(t),PYo=i(tl),Zy=n(tl,"P",{});var ANe=s(Zy);IYo=r(ANe,"This class cannot be instantiated directly using "),Jpe=n(ANe,"CODE",{});var Cgt=s(Jpe);qYo=r(Cgt,"__init__()"),Cgt.forEach(t),NYo=r(ANe," (throws an error)."),ANe.forEach(t),jYo=i(tl),vt=n(tl,"DIV",{class:!0});var k3=s(vt);T(eL.$$.fragment,k3),DYo=i(k3),Ype=n(k3,"P",{});var wgt=s(Ype);GYo=r(wgt,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),wgt.forEach(t),OYo=i(k3),Fd=n(k3,"P",{});var PK=s(Fd);VYo=r(PK,`Note:
Loading a model from its configuration file does `),Kpe=n(PK,"STRONG",{});var Agt=s(Kpe);XYo=r(Agt,"not"),Agt.forEach(t),zYo=r(PK,` load the model weights. It only affects the
model\u2019s configuration. Use `),pX=n(PK,"A",{href:!0});var ygt=s(pX);QYo=r(ygt,"from_pretrained()"),ygt.forEach(t),WYo=r(PK," to load the model weights."),PK.forEach(t),HYo=i(k3),T(I0.$$.fragment,k3),k3.forEach(t),UYo=i(tl),mo=n(tl,"DIV",{class:!0});var ua=s(mo);T(oL.$$.fragment,ua),JYo=i(ua),Zpe=n(ua,"P",{});var Lgt=s(Zpe);YYo=r(Lgt,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),Lgt.forEach(t),KYo=i(ua),Xa=n(ua,"P",{});var S3=s(Xa);ZYo=r(S3,"The model class to instantiate is selected based on the "),eue=n(S3,"CODE",{});var xgt=s(eue);eKo=r(xgt,"model_type"),xgt.forEach(t),oKo=r(S3,` property of the config object (either
passed as an argument or loaded from `),oue=n(S3,"CODE",{});var $gt=s(oue);rKo=r($gt,"pretrained_model_name_or_path"),$gt.forEach(t),tKo=r(S3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rue=n(S3,"CODE",{});var kgt=s(rue);aKo=r(kgt,"pretrained_model_name_or_path"),kgt.forEach(t),nKo=r(S3,":"),S3.forEach(t),sKo=i(ua),za=n(ua,"UL",{});var R3=s(za);q0=n(R3,"LI",{});var w9e=s(q0);tue=n(w9e,"STRONG",{});var Sgt=s(tue);lKo=r(Sgt,"data2vec-audio"),Sgt.forEach(t),iKo=r(w9e," \u2014 "),uX=n(w9e,"A",{href:!0});var Rgt=s(uX);dKo=r(Rgt,"Data2VecAudioForXVector"),Rgt.forEach(t),cKo=r(w9e," (Data2VecAudio model)"),w9e.forEach(t),fKo=i(R3),N0=n(R3,"LI",{});var A9e=s(N0);aue=n(A9e,"STRONG",{});var Bgt=s(aue);mKo=r(Bgt,"unispeech-sat"),Bgt.forEach(t),gKo=r(A9e," \u2014 "),_X=n(A9e,"A",{href:!0});var Pgt=s(_X);hKo=r(Pgt,"UniSpeechSatForXVector"),Pgt.forEach(t),pKo=r(A9e," (UniSpeechSat model)"),A9e.forEach(t),uKo=i(R3),j0=n(R3,"LI",{});var y9e=s(j0);nue=n(y9e,"STRONG",{});var Igt=s(nue);_Ko=r(Igt,"wav2vec2"),Igt.forEach(t),bKo=r(y9e," \u2014 "),bX=n(y9e,"A",{href:!0});var qgt=s(bX);vKo=r(qgt,"Wav2Vec2ForXVector"),qgt.forEach(t),FKo=r(y9e," (Wav2Vec2 model)"),y9e.forEach(t),TKo=i(R3),D0=n(R3,"LI",{});var L9e=s(D0);sue=n(L9e,"STRONG",{});var Ngt=s(sue);MKo=r(Ngt,"wavlm"),Ngt.forEach(t),EKo=r(L9e," \u2014 "),vX=n(L9e,"A",{href:!0});var jgt=s(vX);CKo=r(jgt,"WavLMForXVector"),jgt.forEach(t),wKo=r(L9e," (WavLM model)"),L9e.forEach(t),R3.forEach(t),AKo=i(ua),G0=n(ua,"P",{});var x9e=s(G0);yKo=r(x9e,"The model is set in evaluation mode by default using "),lue=n(x9e,"CODE",{});var Dgt=s(lue);LKo=r(Dgt,"model.eval()"),Dgt.forEach(t),xKo=r(x9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),iue=n(x9e,"CODE",{});var Ggt=s(iue);$Ko=r(Ggt,"model.train()"),Ggt.forEach(t),x9e.forEach(t),kKo=i(ua),T(O0.$$.fragment,ua),ua.forEach(t),tl.forEach(t),MIe=i(f),Td=n(f,"H2",{class:!0});var yNe=s(Td);V0=n(yNe,"A",{id:!0,class:!0,href:!0});var Ogt=s(V0);due=n(Ogt,"SPAN",{});var Vgt=s(due);T(rL.$$.fragment,Vgt),Vgt.forEach(t),Ogt.forEach(t),SKo=i(yNe),cue=n(yNe,"SPAN",{});var Xgt=s(cue);RKo=r(Xgt,"AutoModelForMaskedImageModeling"),Xgt.forEach(t),yNe.forEach(t),EIe=i(f),Qo=n(f,"DIV",{class:!0});var al=s(Qo);T(tL.$$.fragment,al),BKo=i(al),Md=n(al,"P",{});var IK=s(Md);PKo=r(IK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),FX=n(IK,"A",{href:!0});var zgt=s(FX);IKo=r(zgt,"from_pretrained()"),zgt.forEach(t),qKo=r(IK," class method or the "),TX=n(IK,"A",{href:!0});var Qgt=s(TX);NKo=r(Qgt,"from_config()"),Qgt.forEach(t),jKo=r(IK,` class
method.`),IK.forEach(t),DKo=i(al),aL=n(al,"P",{});var LNe=s(aL);GKo=r(LNe,"This class cannot be instantiated directly using "),fue=n(LNe,"CODE",{});var Wgt=s(fue);OKo=r(Wgt,"__init__()"),Wgt.forEach(t),VKo=r(LNe," (throws an error)."),LNe.forEach(t),XKo=i(al),Ft=n(al,"DIV",{class:!0});var B3=s(Ft);T(nL.$$.fragment,B3),zKo=i(B3),mue=n(B3,"P",{});var Hgt=s(mue);QKo=r(Hgt,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),Hgt.forEach(t),WKo=i(B3),Ed=n(B3,"P",{});var qK=s(Ed);HKo=r(qK,`Note:
Loading a model from its configuration file does `),gue=n(qK,"STRONG",{});var Ugt=s(gue);UKo=r(Ugt,"not"),Ugt.forEach(t),JKo=r(qK,` load the model weights. It only affects the
model\u2019s configuration. Use `),MX=n(qK,"A",{href:!0});var Jgt=s(MX);YKo=r(Jgt,"from_pretrained()"),Jgt.forEach(t),KKo=r(qK," to load the model weights."),qK.forEach(t),ZKo=i(B3),T(X0.$$.fragment,B3),B3.forEach(t),eZo=i(al),go=n(al,"DIV",{class:!0});var _a=s(go);T(sL.$$.fragment,_a),oZo=i(_a),hue=n(_a,"P",{});var Ygt=s(hue);rZo=r(Ygt,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),Ygt.forEach(t),tZo=i(_a),Qa=n(_a,"P",{});var P3=s(Qa);aZo=r(P3,"The model class to instantiate is selected based on the "),pue=n(P3,"CODE",{});var Kgt=s(pue);nZo=r(Kgt,"model_type"),Kgt.forEach(t),sZo=r(P3,` property of the config object (either
passed as an argument or loaded from `),uue=n(P3,"CODE",{});var Zgt=s(uue);lZo=r(Zgt,"pretrained_model_name_or_path"),Zgt.forEach(t),iZo=r(P3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_ue=n(P3,"CODE",{});var eht=s(_ue);dZo=r(eht,"pretrained_model_name_or_path"),eht.forEach(t),cZo=r(P3,":"),P3.forEach(t),fZo=i(_a),Cd=n(_a,"UL",{});var NK=s(Cd);z0=n(NK,"LI",{});var $9e=s(z0);bue=n($9e,"STRONG",{});var oht=s(bue);mZo=r(oht,"deit"),oht.forEach(t),gZo=r($9e," \u2014 "),EX=n($9e,"A",{href:!0});var rht=s(EX);hZo=r(rht,"DeiTForMaskedImageModeling"),rht.forEach(t),pZo=r($9e," (DeiT model)"),$9e.forEach(t),uZo=i(NK),Q0=n(NK,"LI",{});var k9e=s(Q0);vue=n(k9e,"STRONG",{});var tht=s(vue);_Zo=r(tht,"swin"),tht.forEach(t),bZo=r(k9e," \u2014 "),CX=n(k9e,"A",{href:!0});var aht=s(CX);vZo=r(aht,"SwinForMaskedImageModeling"),aht.forEach(t),FZo=r(k9e," (Swin model)"),k9e.forEach(t),TZo=i(NK),W0=n(NK,"LI",{});var S9e=s(W0);Fue=n(S9e,"STRONG",{});var nht=s(Fue);MZo=r(nht,"vit"),nht.forEach(t),EZo=r(S9e," \u2014 "),wX=n(S9e,"A",{href:!0});var sht=s(wX);CZo=r(sht,"ViTForMaskedImageModeling"),sht.forEach(t),wZo=r(S9e," (ViT model)"),S9e.forEach(t),NK.forEach(t),AZo=i(_a),H0=n(_a,"P",{});var R9e=s(H0);yZo=r(R9e,"The model is set in evaluation mode by default using "),Tue=n(R9e,"CODE",{});var lht=s(Tue);LZo=r(lht,"model.eval()"),lht.forEach(t),xZo=r(R9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Mue=n(R9e,"CODE",{});var iht=s(Mue);$Zo=r(iht,"model.train()"),iht.forEach(t),R9e.forEach(t),kZo=i(_a),T(U0.$$.fragment,_a),_a.forEach(t),al.forEach(t),CIe=i(f),wd=n(f,"H2",{class:!0});var xNe=s(wd);J0=n(xNe,"A",{id:!0,class:!0,href:!0});var dht=s(J0);Eue=n(dht,"SPAN",{});var cht=s(Eue);T(lL.$$.fragment,cht),cht.forEach(t),dht.forEach(t),SZo=i(xNe),Cue=n(xNe,"SPAN",{});var fht=s(Cue);RZo=r(fht,"AutoModelForObjectDetection"),fht.forEach(t),xNe.forEach(t),wIe=i(f),Wo=n(f,"DIV",{class:!0});var nl=s(Wo);T(iL.$$.fragment,nl),BZo=i(nl),Ad=n(nl,"P",{});var jK=s(Ad);PZo=r(jK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),AX=n(jK,"A",{href:!0});var mht=s(AX);IZo=r(mht,"from_pretrained()"),mht.forEach(t),qZo=r(jK," class method or the "),yX=n(jK,"A",{href:!0});var ght=s(yX);NZo=r(ght,"from_config()"),ght.forEach(t),jZo=r(jK,` class
method.`),jK.forEach(t),DZo=i(nl),dL=n(nl,"P",{});var $Ne=s(dL);GZo=r($Ne,"This class cannot be instantiated directly using "),wue=n($Ne,"CODE",{});var hht=s(wue);OZo=r(hht,"__init__()"),hht.forEach(t),VZo=r($Ne," (throws an error)."),$Ne.forEach(t),XZo=i(nl),Tt=n(nl,"DIV",{class:!0});var I3=s(Tt);T(cL.$$.fragment,I3),zZo=i(I3),Aue=n(I3,"P",{});var pht=s(Aue);QZo=r(pht,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),pht.forEach(t),WZo=i(I3),yd=n(I3,"P",{});var DK=s(yd);HZo=r(DK,`Note:
Loading a model from its configuration file does `),yue=n(DK,"STRONG",{});var uht=s(yue);UZo=r(uht,"not"),uht.forEach(t),JZo=r(DK,` load the model weights. It only affects the
model\u2019s configuration. Use `),LX=n(DK,"A",{href:!0});var _ht=s(LX);YZo=r(_ht,"from_pretrained()"),_ht.forEach(t),KZo=r(DK," to load the model weights."),DK.forEach(t),ZZo=i(I3),T(Y0.$$.fragment,I3),I3.forEach(t),eer=i(nl),ho=n(nl,"DIV",{class:!0});var ba=s(ho);T(fL.$$.fragment,ba),oer=i(ba),Lue=n(ba,"P",{});var bht=s(Lue);rer=r(bht,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),bht.forEach(t),ter=i(ba),Wa=n(ba,"P",{});var q3=s(Wa);aer=r(q3,"The model class to instantiate is selected based on the "),xue=n(q3,"CODE",{});var vht=s(xue);ner=r(vht,"model_type"),vht.forEach(t),ser=r(q3,` property of the config object (either
passed as an argument or loaded from `),$ue=n(q3,"CODE",{});var Fht=s($ue);ler=r(Fht,"pretrained_model_name_or_path"),Fht.forEach(t),ier=r(q3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kue=n(q3,"CODE",{});var Tht=s(kue);der=r(Tht,"pretrained_model_name_or_path"),Tht.forEach(t),cer=r(q3,":"),q3.forEach(t),fer=i(ba),mL=n(ba,"UL",{});var kNe=s(mL);K0=n(kNe,"LI",{});var B9e=s(K0);Sue=n(B9e,"STRONG",{});var Mht=s(Sue);mer=r(Mht,"detr"),Mht.forEach(t),ger=r(B9e," \u2014 "),xX=n(B9e,"A",{href:!0});var Eht=s(xX);her=r(Eht,"DetrForObjectDetection"),Eht.forEach(t),per=r(B9e," (DETR model)"),B9e.forEach(t),uer=i(kNe),Z0=n(kNe,"LI",{});var P9e=s(Z0);Rue=n(P9e,"STRONG",{});var Cht=s(Rue);_er=r(Cht,"yolos"),Cht.forEach(t),ber=r(P9e," \u2014 "),$X=n(P9e,"A",{href:!0});var wht=s($X);ver=r(wht,"YolosForObjectDetection"),wht.forEach(t),Fer=r(P9e," (YOLOS model)"),P9e.forEach(t),kNe.forEach(t),Ter=i(ba),e6=n(ba,"P",{});var I9e=s(e6);Mer=r(I9e,"The model is set in evaluation mode by default using "),Bue=n(I9e,"CODE",{});var Aht=s(Bue);Eer=r(Aht,"model.eval()"),Aht.forEach(t),Cer=r(I9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Pue=n(I9e,"CODE",{});var yht=s(Pue);wer=r(yht,"model.train()"),yht.forEach(t),I9e.forEach(t),Aer=i(ba),T(o6.$$.fragment,ba),ba.forEach(t),nl.forEach(t),AIe=i(f),Ld=n(f,"H2",{class:!0});var SNe=s(Ld);r6=n(SNe,"A",{id:!0,class:!0,href:!0});var Lht=s(r6);Iue=n(Lht,"SPAN",{});var xht=s(Iue);T(gL.$$.fragment,xht),xht.forEach(t),Lht.forEach(t),yer=i(SNe),que=n(SNe,"SPAN",{});var $ht=s(que);Ler=r($ht,"AutoModelForImageSegmentation"),$ht.forEach(t),SNe.forEach(t),yIe=i(f),Ho=n(f,"DIV",{class:!0});var sl=s(Ho);T(hL.$$.fragment,sl),xer=i(sl),xd=n(sl,"P",{});var GK=s(xd);$er=r(GK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),kX=n(GK,"A",{href:!0});var kht=s(kX);ker=r(kht,"from_pretrained()"),kht.forEach(t),Ser=r(GK," class method or the "),SX=n(GK,"A",{href:!0});var Sht=s(SX);Rer=r(Sht,"from_config()"),Sht.forEach(t),Ber=r(GK,` class
method.`),GK.forEach(t),Per=i(sl),pL=n(sl,"P",{});var RNe=s(pL);Ier=r(RNe,"This class cannot be instantiated directly using "),Nue=n(RNe,"CODE",{});var Rht=s(Nue);qer=r(Rht,"__init__()"),Rht.forEach(t),Ner=r(RNe," (throws an error)."),RNe.forEach(t),jer=i(sl),Mt=n(sl,"DIV",{class:!0});var N3=s(Mt);T(uL.$$.fragment,N3),Der=i(N3),jue=n(N3,"P",{});var Bht=s(jue);Ger=r(Bht,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),Bht.forEach(t),Oer=i(N3),$d=n(N3,"P",{});var OK=s($d);Ver=r(OK,`Note:
Loading a model from its configuration file does `),Due=n(OK,"STRONG",{});var Pht=s(Due);Xer=r(Pht,"not"),Pht.forEach(t),zer=r(OK,` load the model weights. It only affects the
model\u2019s configuration. Use `),RX=n(OK,"A",{href:!0});var Iht=s(RX);Qer=r(Iht,"from_pretrained()"),Iht.forEach(t),Wer=r(OK," to load the model weights."),OK.forEach(t),Her=i(N3),T(t6.$$.fragment,N3),N3.forEach(t),Uer=i(sl),po=n(sl,"DIV",{class:!0});var va=s(po);T(_L.$$.fragment,va),Jer=i(va),Gue=n(va,"P",{});var qht=s(Gue);Yer=r(qht,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),qht.forEach(t),Ker=i(va),Ha=n(va,"P",{});var j3=s(Ha);Zer=r(j3,"The model class to instantiate is selected based on the "),Oue=n(j3,"CODE",{});var Nht=s(Oue);eor=r(Nht,"model_type"),Nht.forEach(t),oor=r(j3,` property of the config object (either
passed as an argument or loaded from `),Vue=n(j3,"CODE",{});var jht=s(Vue);ror=r(jht,"pretrained_model_name_or_path"),jht.forEach(t),tor=r(j3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xue=n(j3,"CODE",{});var Dht=s(Xue);aor=r(Dht,"pretrained_model_name_or_path"),Dht.forEach(t),nor=r(j3,":"),j3.forEach(t),sor=i(va),zue=n(va,"UL",{});var Ght=s(zue);a6=n(Ght,"LI",{});var q9e=s(a6);Que=n(q9e,"STRONG",{});var Oht=s(Que);lor=r(Oht,"detr"),Oht.forEach(t),ior=r(q9e," \u2014 "),BX=n(q9e,"A",{href:!0});var Vht=s(BX);dor=r(Vht,"DetrForSegmentation"),Vht.forEach(t),cor=r(q9e," (DETR model)"),q9e.forEach(t),Ght.forEach(t),mor=i(va),n6=n(va,"P",{});var N9e=s(n6);gor=r(N9e,"The model is set in evaluation mode by default using "),Wue=n(N9e,"CODE",{});var Xht=s(Wue);hor=r(Xht,"model.eval()"),Xht.forEach(t),por=r(N9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Hue=n(N9e,"CODE",{});var zht=s(Hue);uor=r(zht,"model.train()"),zht.forEach(t),N9e.forEach(t),_or=i(va),T(s6.$$.fragment,va),va.forEach(t),sl.forEach(t),LIe=i(f),kd=n(f,"H2",{class:!0});var BNe=s(kd);l6=n(BNe,"A",{id:!0,class:!0,href:!0});var Qht=s(l6);Uue=n(Qht,"SPAN",{});var Wht=s(Uue);T(bL.$$.fragment,Wht),Wht.forEach(t),Qht.forEach(t),bor=i(BNe),Jue=n(BNe,"SPAN",{});var Hht=s(Jue);vor=r(Hht,"AutoModelForSemanticSegmentation"),Hht.forEach(t),BNe.forEach(t),xIe=i(f),Uo=n(f,"DIV",{class:!0});var ll=s(Uo);T(vL.$$.fragment,ll),For=i(ll),Sd=n(ll,"P",{});var VK=s(Sd);Tor=r(VK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),PX=n(VK,"A",{href:!0});var Uht=s(PX);Mor=r(Uht,"from_pretrained()"),Uht.forEach(t),Eor=r(VK," class method or the "),IX=n(VK,"A",{href:!0});var Jht=s(IX);Cor=r(Jht,"from_config()"),Jht.forEach(t),wor=r(VK,` class
method.`),VK.forEach(t),Aor=i(ll),FL=n(ll,"P",{});var PNe=s(FL);yor=r(PNe,"This class cannot be instantiated directly using "),Yue=n(PNe,"CODE",{});var Yht=s(Yue);Lor=r(Yht,"__init__()"),Yht.forEach(t),xor=r(PNe," (throws an error)."),PNe.forEach(t),$or=i(ll),Et=n(ll,"DIV",{class:!0});var D3=s(Et);T(TL.$$.fragment,D3),kor=i(D3),Kue=n(D3,"P",{});var Kht=s(Kue);Sor=r(Kht,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),Kht.forEach(t),Ror=i(D3),Rd=n(D3,"P",{});var XK=s(Rd);Bor=r(XK,`Note:
Loading a model from its configuration file does `),Zue=n(XK,"STRONG",{});var Zht=s(Zue);Por=r(Zht,"not"),Zht.forEach(t),Ior=r(XK,` load the model weights. It only affects the
model\u2019s configuration. Use `),qX=n(XK,"A",{href:!0});var ept=s(qX);qor=r(ept,"from_pretrained()"),ept.forEach(t),Nor=r(XK," to load the model weights."),XK.forEach(t),jor=i(D3),T(i6.$$.fragment,D3),D3.forEach(t),Dor=i(ll),uo=n(ll,"DIV",{class:!0});var Fa=s(uo);T(ML.$$.fragment,Fa),Gor=i(Fa),e_e=n(Fa,"P",{});var opt=s(e_e);Oor=r(opt,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),opt.forEach(t),Vor=i(Fa),Ua=n(Fa,"P",{});var G3=s(Ua);Xor=r(G3,"The model class to instantiate is selected based on the "),o_e=n(G3,"CODE",{});var rpt=s(o_e);zor=r(rpt,"model_type"),rpt.forEach(t),Qor=r(G3,` property of the config object (either
passed as an argument or loaded from `),r_e=n(G3,"CODE",{});var tpt=s(r_e);Wor=r(tpt,"pretrained_model_name_or_path"),tpt.forEach(t),Hor=r(G3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),t_e=n(G3,"CODE",{});var apt=s(t_e);Uor=r(apt,"pretrained_model_name_or_path"),apt.forEach(t),Jor=r(G3,":"),G3.forEach(t),Yor=i(Fa),Ja=n(Fa,"UL",{});var O3=s(Ja);d6=n(O3,"LI",{});var j9e=s(d6);a_e=n(j9e,"STRONG",{});var npt=s(a_e);Kor=r(npt,"beit"),npt.forEach(t),Zor=r(j9e," \u2014 "),NX=n(j9e,"A",{href:!0});var spt=s(NX);err=r(spt,"BeitForSemanticSegmentation"),spt.forEach(t),orr=r(j9e," (BEiT model)"),j9e.forEach(t),rrr=i(O3),c6=n(O3,"LI",{});var D9e=s(c6);n_e=n(D9e,"STRONG",{});var lpt=s(n_e);trr=r(lpt,"data2vec-vision"),lpt.forEach(t),arr=r(D9e," \u2014 "),jX=n(D9e,"A",{href:!0});var ipt=s(jX);nrr=r(ipt,"Data2VecVisionForSemanticSegmentation"),ipt.forEach(t),srr=r(D9e," (Data2VecVision model)"),D9e.forEach(t),lrr=i(O3),f6=n(O3,"LI",{});var G9e=s(f6);s_e=n(G9e,"STRONG",{});var dpt=s(s_e);irr=r(dpt,"dpt"),dpt.forEach(t),drr=r(G9e," \u2014 "),DX=n(G9e,"A",{href:!0});var cpt=s(DX);crr=r(cpt,"DPTForSemanticSegmentation"),cpt.forEach(t),frr=r(G9e," (DPT model)"),G9e.forEach(t),mrr=i(O3),m6=n(O3,"LI",{});var O9e=s(m6);l_e=n(O9e,"STRONG",{});var fpt=s(l_e);grr=r(fpt,"segformer"),fpt.forEach(t),hrr=r(O9e," \u2014 "),GX=n(O9e,"A",{href:!0});var mpt=s(GX);prr=r(mpt,"SegformerForSemanticSegmentation"),mpt.forEach(t),urr=r(O9e," (SegFormer model)"),O9e.forEach(t),O3.forEach(t),_rr=i(Fa),g6=n(Fa,"P",{});var V9e=s(g6);brr=r(V9e,"The model is set in evaluation mode by default using "),i_e=n(V9e,"CODE",{});var gpt=s(i_e);vrr=r(gpt,"model.eval()"),gpt.forEach(t),Frr=r(V9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),d_e=n(V9e,"CODE",{});var hpt=s(d_e);Trr=r(hpt,"model.train()"),hpt.forEach(t),V9e.forEach(t),Mrr=i(Fa),T(h6.$$.fragment,Fa),Fa.forEach(t),ll.forEach(t),$Ie=i(f),Bd=n(f,"H2",{class:!0});var INe=s(Bd);p6=n(INe,"A",{id:!0,class:!0,href:!0});var ppt=s(p6);c_e=n(ppt,"SPAN",{});var upt=s(c_e);T(EL.$$.fragment,upt),upt.forEach(t),ppt.forEach(t),Err=i(INe),f_e=n(INe,"SPAN",{});var _pt=s(f_e);Crr=r(_pt,"AutoModelForInstanceSegmentation"),_pt.forEach(t),INe.forEach(t),kIe=i(f),Jo=n(f,"DIV",{class:!0});var il=s(Jo);T(CL.$$.fragment,il),wrr=i(il),Pd=n(il,"P",{});var zK=s(Pd);Arr=r(zK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),OX=n(zK,"A",{href:!0});var bpt=s(OX);yrr=r(bpt,"from_pretrained()"),bpt.forEach(t),Lrr=r(zK," class method or the "),VX=n(zK,"A",{href:!0});var vpt=s(VX);xrr=r(vpt,"from_config()"),vpt.forEach(t),$rr=r(zK,` class
method.`),zK.forEach(t),krr=i(il),wL=n(il,"P",{});var qNe=s(wL);Srr=r(qNe,"This class cannot be instantiated directly using "),m_e=n(qNe,"CODE",{});var Fpt=s(m_e);Rrr=r(Fpt,"__init__()"),Fpt.forEach(t),Brr=r(qNe," (throws an error)."),qNe.forEach(t),Prr=i(il),Ct=n(il,"DIV",{class:!0});var V3=s(Ct);T(AL.$$.fragment,V3),Irr=i(V3),g_e=n(V3,"P",{});var Tpt=s(g_e);qrr=r(Tpt,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),Tpt.forEach(t),Nrr=i(V3),Id=n(V3,"P",{});var QK=s(Id);jrr=r(QK,`Note:
Loading a model from its configuration file does `),h_e=n(QK,"STRONG",{});var Mpt=s(h_e);Drr=r(Mpt,"not"),Mpt.forEach(t),Grr=r(QK,` load the model weights. It only affects the
model\u2019s configuration. Use `),XX=n(QK,"A",{href:!0});var Ept=s(XX);Orr=r(Ept,"from_pretrained()"),Ept.forEach(t),Vrr=r(QK," to load the model weights."),QK.forEach(t),Xrr=i(V3),T(u6.$$.fragment,V3),V3.forEach(t),zrr=i(il),_o=n(il,"DIV",{class:!0});var Ta=s(_o);T(yL.$$.fragment,Ta),Qrr=i(Ta),p_e=n(Ta,"P",{});var Cpt=s(p_e);Wrr=r(Cpt,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),Cpt.forEach(t),Hrr=i(Ta),Ya=n(Ta,"P",{});var X3=s(Ya);Urr=r(X3,"The model class to instantiate is selected based on the "),u_e=n(X3,"CODE",{});var wpt=s(u_e);Jrr=r(wpt,"model_type"),wpt.forEach(t),Yrr=r(X3,` property of the config object (either
passed as an argument or loaded from `),__e=n(X3,"CODE",{});var Apt=s(__e);Krr=r(Apt,"pretrained_model_name_or_path"),Apt.forEach(t),Zrr=r(X3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),b_e=n(X3,"CODE",{});var ypt=s(b_e);etr=r(ypt,"pretrained_model_name_or_path"),ypt.forEach(t),otr=r(X3,":"),X3.forEach(t),rtr=i(Ta),v_e=n(Ta,"UL",{});var Lpt=s(v_e);_6=n(Lpt,"LI",{});var X9e=s(_6);F_e=n(X9e,"STRONG",{});var xpt=s(F_e);ttr=r(xpt,"maskformer"),xpt.forEach(t),atr=r(X9e," \u2014 "),zX=n(X9e,"A",{href:!0});var $pt=s(zX);ntr=r($pt,"MaskFormerForInstanceSegmentation"),$pt.forEach(t),str=r(X9e," (MaskFormer model)"),X9e.forEach(t),Lpt.forEach(t),ltr=i(Ta),b6=n(Ta,"P",{});var z9e=s(b6);itr=r(z9e,"The model is set in evaluation mode by default using "),T_e=n(z9e,"CODE",{});var kpt=s(T_e);dtr=r(kpt,"model.eval()"),kpt.forEach(t),ctr=r(z9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),M_e=n(z9e,"CODE",{});var Spt=s(M_e);ftr=r(Spt,"model.train()"),Spt.forEach(t),z9e.forEach(t),mtr=i(Ta),T(v6.$$.fragment,Ta),Ta.forEach(t),il.forEach(t),SIe=i(f),qd=n(f,"H2",{class:!0});var NNe=s(qd);F6=n(NNe,"A",{id:!0,class:!0,href:!0});var Rpt=s(F6);E_e=n(Rpt,"SPAN",{});var Bpt=s(E_e);T(LL.$$.fragment,Bpt),Bpt.forEach(t),Rpt.forEach(t),gtr=i(NNe),C_e=n(NNe,"SPAN",{});var Ppt=s(C_e);htr=r(Ppt,"TFAutoModel"),Ppt.forEach(t),NNe.forEach(t),RIe=i(f),Yo=n(f,"DIV",{class:!0});var dl=s(Yo);T(xL.$$.fragment,dl),ptr=i(dl),Nd=n(dl,"P",{});var WK=s(Nd);utr=r(WK,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),QX=n(WK,"A",{href:!0});var Ipt=s(QX);_tr=r(Ipt,"from_pretrained()"),Ipt.forEach(t),btr=r(WK," class method or the "),WX=n(WK,"A",{href:!0});var qpt=s(WX);vtr=r(qpt,"from_config()"),qpt.forEach(t),Ftr=r(WK,` class
method.`),WK.forEach(t),Ttr=i(dl),$L=n(dl,"P",{});var jNe=s($L);Mtr=r(jNe,"This class cannot be instantiated directly using "),w_e=n(jNe,"CODE",{});var Npt=s(w_e);Etr=r(Npt,"__init__()"),Npt.forEach(t),Ctr=r(jNe," (throws an error)."),jNe.forEach(t),wtr=i(dl),wt=n(dl,"DIV",{class:!0});var z3=s(wt);T(kL.$$.fragment,z3),Atr=i(z3),A_e=n(z3,"P",{});var jpt=s(A_e);ytr=r(jpt,"Instantiates one of the base model classes of the library from a configuration."),jpt.forEach(t),Ltr=i(z3),jd=n(z3,"P",{});var HK=s(jd);xtr=r(HK,`Note:
Loading a model from its configuration file does `),y_e=n(HK,"STRONG",{});var Dpt=s(y_e);$tr=r(Dpt,"not"),Dpt.forEach(t),ktr=r(HK,` load the model weights. It only affects the
model\u2019s configuration. Use `),HX=n(HK,"A",{href:!0});var Gpt=s(HX);Str=r(Gpt,"from_pretrained()"),Gpt.forEach(t),Rtr=r(HK," to load the model weights."),HK.forEach(t),Btr=i(z3),T(T6.$$.fragment,z3),z3.forEach(t),Ptr=i(dl),wr=n(dl,"DIV",{class:!0});var cl=s(wr);T(SL.$$.fragment,cl),Itr=i(cl),L_e=n(cl,"P",{});var Opt=s(L_e);qtr=r(Opt,"Instantiate one of the base model classes of the library from a pretrained model."),Opt.forEach(t),Ntr=i(cl),Ka=n(cl,"P",{});var Q3=s(Ka);jtr=r(Q3,"The model class to instantiate is selected based on the "),x_e=n(Q3,"CODE",{});var Vpt=s(x_e);Dtr=r(Vpt,"model_type"),Vpt.forEach(t),Gtr=r(Q3,` property of the config object (either
passed as an argument or loaded from `),$_e=n(Q3,"CODE",{});var Xpt=s($_e);Otr=r(Xpt,"pretrained_model_name_or_path"),Xpt.forEach(t),Vtr=r(Q3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),k_e=n(Q3,"CODE",{});var zpt=s(k_e);Xtr=r(zpt,"pretrained_model_name_or_path"),zpt.forEach(t),ztr=r(Q3,":"),Q3.forEach(t),Qtr=i(cl),j=n(cl,"UL",{});var D=s(j);M6=n(D,"LI",{});var Q9e=s(M6);S_e=n(Q9e,"STRONG",{});var Qpt=s(S_e);Wtr=r(Qpt,"albert"),Qpt.forEach(t),Htr=r(Q9e," \u2014 "),UX=n(Q9e,"A",{href:!0});var Wpt=s(UX);Utr=r(Wpt,"TFAlbertModel"),Wpt.forEach(t),Jtr=r(Q9e," (ALBERT model)"),Q9e.forEach(t),Ytr=i(D),E6=n(D,"LI",{});var W9e=s(E6);R_e=n(W9e,"STRONG",{});var Hpt=s(R_e);Ktr=r(Hpt,"bart"),Hpt.forEach(t),Ztr=r(W9e," \u2014 "),JX=n(W9e,"A",{href:!0});var Upt=s(JX);ear=r(Upt,"TFBartModel"),Upt.forEach(t),oar=r(W9e," (BART model)"),W9e.forEach(t),rar=i(D),C6=n(D,"LI",{});var H9e=s(C6);B_e=n(H9e,"STRONG",{});var Jpt=s(B_e);tar=r(Jpt,"bert"),Jpt.forEach(t),aar=r(H9e," \u2014 "),YX=n(H9e,"A",{href:!0});var Ypt=s(YX);nar=r(Ypt,"TFBertModel"),Ypt.forEach(t),sar=r(H9e," (BERT model)"),H9e.forEach(t),lar=i(D),w6=n(D,"LI",{});var U9e=s(w6);P_e=n(U9e,"STRONG",{});var Kpt=s(P_e);iar=r(Kpt,"blenderbot"),Kpt.forEach(t),dar=r(U9e," \u2014 "),KX=n(U9e,"A",{href:!0});var Zpt=s(KX);car=r(Zpt,"TFBlenderbotModel"),Zpt.forEach(t),far=r(U9e," (Blenderbot model)"),U9e.forEach(t),mar=i(D),A6=n(D,"LI",{});var J9e=s(A6);I_e=n(J9e,"STRONG",{});var eut=s(I_e);gar=r(eut,"blenderbot-small"),eut.forEach(t),har=r(J9e," \u2014 "),ZX=n(J9e,"A",{href:!0});var out=s(ZX);par=r(out,"TFBlenderbotSmallModel"),out.forEach(t),uar=r(J9e," (BlenderbotSmall model)"),J9e.forEach(t),_ar=i(D),y6=n(D,"LI",{});var Y9e=s(y6);q_e=n(Y9e,"STRONG",{});var rut=s(q_e);bar=r(rut,"camembert"),rut.forEach(t),Far=r(Y9e," \u2014 "),ez=n(Y9e,"A",{href:!0});var tut=s(ez);Tar=r(tut,"TFCamembertModel"),tut.forEach(t),Mar=r(Y9e," (CamemBERT model)"),Y9e.forEach(t),Ear=i(D),L6=n(D,"LI",{});var K9e=s(L6);N_e=n(K9e,"STRONG",{});var aut=s(N_e);Car=r(aut,"clip"),aut.forEach(t),war=r(K9e," \u2014 "),oz=n(K9e,"A",{href:!0});var nut=s(oz);Aar=r(nut,"TFCLIPModel"),nut.forEach(t),yar=r(K9e," (CLIP model)"),K9e.forEach(t),Lar=i(D),x6=n(D,"LI",{});var Z9e=s(x6);j_e=n(Z9e,"STRONG",{});var sut=s(j_e);xar=r(sut,"convbert"),sut.forEach(t),$ar=r(Z9e," \u2014 "),rz=n(Z9e,"A",{href:!0});var lut=s(rz);kar=r(lut,"TFConvBertModel"),lut.forEach(t),Sar=r(Z9e," (ConvBERT model)"),Z9e.forEach(t),Rar=i(D),$6=n(D,"LI",{});var e$e=s($6);D_e=n(e$e,"STRONG",{});var iut=s(D_e);Bar=r(iut,"convnext"),iut.forEach(t),Par=r(e$e," \u2014 "),tz=n(e$e,"A",{href:!0});var dut=s(tz);Iar=r(dut,"TFConvNextModel"),dut.forEach(t),qar=r(e$e," (ConvNext model)"),e$e.forEach(t),Nar=i(D),k6=n(D,"LI",{});var o$e=s(k6);G_e=n(o$e,"STRONG",{});var cut=s(G_e);jar=r(cut,"ctrl"),cut.forEach(t),Dar=r(o$e," \u2014 "),az=n(o$e,"A",{href:!0});var fut=s(az);Gar=r(fut,"TFCTRLModel"),fut.forEach(t),Oar=r(o$e," (CTRL model)"),o$e.forEach(t),Var=i(D),S6=n(D,"LI",{});var r$e=s(S6);O_e=n(r$e,"STRONG",{});var mut=s(O_e);Xar=r(mut,"data2vec-vision"),mut.forEach(t),zar=r(r$e," \u2014 "),nz=n(r$e,"A",{href:!0});var gut=s(nz);Qar=r(gut,"TFData2VecVisionModel"),gut.forEach(t),War=r(r$e," (Data2VecVision model)"),r$e.forEach(t),Har=i(D),R6=n(D,"LI",{});var t$e=s(R6);V_e=n(t$e,"STRONG",{});var hut=s(V_e);Uar=r(hut,"deberta"),hut.forEach(t),Jar=r(t$e," \u2014 "),sz=n(t$e,"A",{href:!0});var put=s(sz);Yar=r(put,"TFDebertaModel"),put.forEach(t),Kar=r(t$e," (DeBERTa model)"),t$e.forEach(t),Zar=i(D),B6=n(D,"LI",{});var a$e=s(B6);X_e=n(a$e,"STRONG",{});var uut=s(X_e);enr=r(uut,"deberta-v2"),uut.forEach(t),onr=r(a$e," \u2014 "),lz=n(a$e,"A",{href:!0});var _ut=s(lz);rnr=r(_ut,"TFDebertaV2Model"),_ut.forEach(t),tnr=r(a$e," (DeBERTa-v2 model)"),a$e.forEach(t),anr=i(D),P6=n(D,"LI",{});var n$e=s(P6);z_e=n(n$e,"STRONG",{});var but=s(z_e);nnr=r(but,"distilbert"),but.forEach(t),snr=r(n$e," \u2014 "),iz=n(n$e,"A",{href:!0});var vut=s(iz);lnr=r(vut,"TFDistilBertModel"),vut.forEach(t),inr=r(n$e," (DistilBERT model)"),n$e.forEach(t),dnr=i(D),I6=n(D,"LI",{});var s$e=s(I6);Q_e=n(s$e,"STRONG",{});var Fut=s(Q_e);cnr=r(Fut,"dpr"),Fut.forEach(t),fnr=r(s$e," \u2014 "),dz=n(s$e,"A",{href:!0});var Tut=s(dz);mnr=r(Tut,"TFDPRQuestionEncoder"),Tut.forEach(t),gnr=r(s$e," (DPR model)"),s$e.forEach(t),hnr=i(D),q6=n(D,"LI",{});var l$e=s(q6);W_e=n(l$e,"STRONG",{});var Mut=s(W_e);pnr=r(Mut,"electra"),Mut.forEach(t),unr=r(l$e," \u2014 "),cz=n(l$e,"A",{href:!0});var Eut=s(cz);_nr=r(Eut,"TFElectraModel"),Eut.forEach(t),bnr=r(l$e," (ELECTRA model)"),l$e.forEach(t),vnr=i(D),N6=n(D,"LI",{});var i$e=s(N6);H_e=n(i$e,"STRONG",{});var Cut=s(H_e);Fnr=r(Cut,"flaubert"),Cut.forEach(t),Tnr=r(i$e," \u2014 "),fz=n(i$e,"A",{href:!0});var wut=s(fz);Mnr=r(wut,"TFFlaubertModel"),wut.forEach(t),Enr=r(i$e," (FlauBERT model)"),i$e.forEach(t),Cnr=i(D),Bs=n(D,"LI",{});var d$=s(Bs);U_e=n(d$,"STRONG",{});var Aut=s(U_e);wnr=r(Aut,"funnel"),Aut.forEach(t),Anr=r(d$," \u2014 "),mz=n(d$,"A",{href:!0});var yut=s(mz);ynr=r(yut,"TFFunnelModel"),yut.forEach(t),Lnr=r(d$," or "),gz=n(d$,"A",{href:!0});var Lut=s(gz);xnr=r(Lut,"TFFunnelBaseModel"),Lut.forEach(t),$nr=r(d$," (Funnel Transformer model)"),d$.forEach(t),knr=i(D),j6=n(D,"LI",{});var d$e=s(j6);J_e=n(d$e,"STRONG",{});var xut=s(J_e);Snr=r(xut,"gpt2"),xut.forEach(t),Rnr=r(d$e," \u2014 "),hz=n(d$e,"A",{href:!0});var $ut=s(hz);Bnr=r($ut,"TFGPT2Model"),$ut.forEach(t),Pnr=r(d$e," (OpenAI GPT-2 model)"),d$e.forEach(t),Inr=i(D),D6=n(D,"LI",{});var c$e=s(D6);Y_e=n(c$e,"STRONG",{});var kut=s(Y_e);qnr=r(kut,"gptj"),kut.forEach(t),Nnr=r(c$e," \u2014 "),pz=n(c$e,"A",{href:!0});var Sut=s(pz);jnr=r(Sut,"TFGPTJModel"),Sut.forEach(t),Dnr=r(c$e," (GPT-J model)"),c$e.forEach(t),Gnr=i(D),G6=n(D,"LI",{});var f$e=s(G6);K_e=n(f$e,"STRONG",{});var Rut=s(K_e);Onr=r(Rut,"hubert"),Rut.forEach(t),Vnr=r(f$e," \u2014 "),uz=n(f$e,"A",{href:!0});var But=s(uz);Xnr=r(But,"TFHubertModel"),But.forEach(t),znr=r(f$e," (Hubert model)"),f$e.forEach(t),Qnr=i(D),O6=n(D,"LI",{});var m$e=s(O6);Z_e=n(m$e,"STRONG",{});var Put=s(Z_e);Wnr=r(Put,"layoutlm"),Put.forEach(t),Hnr=r(m$e," \u2014 "),_z=n(m$e,"A",{href:!0});var Iut=s(_z);Unr=r(Iut,"TFLayoutLMModel"),Iut.forEach(t),Jnr=r(m$e," (LayoutLM model)"),m$e.forEach(t),Ynr=i(D),V6=n(D,"LI",{});var g$e=s(V6);e2e=n(g$e,"STRONG",{});var qut=s(e2e);Knr=r(qut,"led"),qut.forEach(t),Znr=r(g$e," \u2014 "),bz=n(g$e,"A",{href:!0});var Nut=s(bz);esr=r(Nut,"TFLEDModel"),Nut.forEach(t),osr=r(g$e," (LED model)"),g$e.forEach(t),rsr=i(D),X6=n(D,"LI",{});var h$e=s(X6);o2e=n(h$e,"STRONG",{});var jut=s(o2e);tsr=r(jut,"longformer"),jut.forEach(t),asr=r(h$e," \u2014 "),vz=n(h$e,"A",{href:!0});var Dut=s(vz);nsr=r(Dut,"TFLongformerModel"),Dut.forEach(t),ssr=r(h$e," (Longformer model)"),h$e.forEach(t),lsr=i(D),z6=n(D,"LI",{});var p$e=s(z6);r2e=n(p$e,"STRONG",{});var Gut=s(r2e);isr=r(Gut,"lxmert"),Gut.forEach(t),dsr=r(p$e," \u2014 "),Fz=n(p$e,"A",{href:!0});var Out=s(Fz);csr=r(Out,"TFLxmertModel"),Out.forEach(t),fsr=r(p$e," (LXMERT model)"),p$e.forEach(t),msr=i(D),Q6=n(D,"LI",{});var u$e=s(Q6);t2e=n(u$e,"STRONG",{});var Vut=s(t2e);gsr=r(Vut,"marian"),Vut.forEach(t),hsr=r(u$e," \u2014 "),Tz=n(u$e,"A",{href:!0});var Xut=s(Tz);psr=r(Xut,"TFMarianModel"),Xut.forEach(t),usr=r(u$e," (Marian model)"),u$e.forEach(t),_sr=i(D),W6=n(D,"LI",{});var _$e=s(W6);a2e=n(_$e,"STRONG",{});var zut=s(a2e);bsr=r(zut,"mbart"),zut.forEach(t),vsr=r(_$e," \u2014 "),Mz=n(_$e,"A",{href:!0});var Qut=s(Mz);Fsr=r(Qut,"TFMBartModel"),Qut.forEach(t),Tsr=r(_$e," (mBART model)"),_$e.forEach(t),Msr=i(D),H6=n(D,"LI",{});var b$e=s(H6);n2e=n(b$e,"STRONG",{});var Wut=s(n2e);Esr=r(Wut,"mobilebert"),Wut.forEach(t),Csr=r(b$e," \u2014 "),Ez=n(b$e,"A",{href:!0});var Hut=s(Ez);wsr=r(Hut,"TFMobileBertModel"),Hut.forEach(t),Asr=r(b$e," (MobileBERT model)"),b$e.forEach(t),ysr=i(D),U6=n(D,"LI",{});var v$e=s(U6);s2e=n(v$e,"STRONG",{});var Uut=s(s2e);Lsr=r(Uut,"mpnet"),Uut.forEach(t),xsr=r(v$e," \u2014 "),Cz=n(v$e,"A",{href:!0});var Jut=s(Cz);$sr=r(Jut,"TFMPNetModel"),Jut.forEach(t),ksr=r(v$e," (MPNet model)"),v$e.forEach(t),Ssr=i(D),J6=n(D,"LI",{});var F$e=s(J6);l2e=n(F$e,"STRONG",{});var Yut=s(l2e);Rsr=r(Yut,"mt5"),Yut.forEach(t),Bsr=r(F$e," \u2014 "),wz=n(F$e,"A",{href:!0});var Kut=s(wz);Psr=r(Kut,"TFMT5Model"),Kut.forEach(t),Isr=r(F$e," (mT5 model)"),F$e.forEach(t),qsr=i(D),Y6=n(D,"LI",{});var T$e=s(Y6);i2e=n(T$e,"STRONG",{});var Zut=s(i2e);Nsr=r(Zut,"openai-gpt"),Zut.forEach(t),jsr=r(T$e," \u2014 "),Az=n(T$e,"A",{href:!0});var e_t=s(Az);Dsr=r(e_t,"TFOpenAIGPTModel"),e_t.forEach(t),Gsr=r(T$e," (OpenAI GPT model)"),T$e.forEach(t),Osr=i(D),K6=n(D,"LI",{});var M$e=s(K6);d2e=n(M$e,"STRONG",{});var o_t=s(d2e);Vsr=r(o_t,"pegasus"),o_t.forEach(t),Xsr=r(M$e," \u2014 "),yz=n(M$e,"A",{href:!0});var r_t=s(yz);zsr=r(r_t,"TFPegasusModel"),r_t.forEach(t),Qsr=r(M$e," (Pegasus model)"),M$e.forEach(t),Wsr=i(D),Z6=n(D,"LI",{});var E$e=s(Z6);c2e=n(E$e,"STRONG",{});var t_t=s(c2e);Hsr=r(t_t,"rembert"),t_t.forEach(t),Usr=r(E$e," \u2014 "),Lz=n(E$e,"A",{href:!0});var a_t=s(Lz);Jsr=r(a_t,"TFRemBertModel"),a_t.forEach(t),Ysr=r(E$e," (RemBERT model)"),E$e.forEach(t),Ksr=i(D),eT=n(D,"LI",{});var C$e=s(eT);f2e=n(C$e,"STRONG",{});var n_t=s(f2e);Zsr=r(n_t,"roberta"),n_t.forEach(t),elr=r(C$e," \u2014 "),xz=n(C$e,"A",{href:!0});var s_t=s(xz);olr=r(s_t,"TFRobertaModel"),s_t.forEach(t),rlr=r(C$e," (RoBERTa model)"),C$e.forEach(t),tlr=i(D),oT=n(D,"LI",{});var w$e=s(oT);m2e=n(w$e,"STRONG",{});var l_t=s(m2e);alr=r(l_t,"roformer"),l_t.forEach(t),nlr=r(w$e," \u2014 "),$z=n(w$e,"A",{href:!0});var i_t=s($z);slr=r(i_t,"TFRoFormerModel"),i_t.forEach(t),llr=r(w$e," (RoFormer model)"),w$e.forEach(t),ilr=i(D),rT=n(D,"LI",{});var A$e=s(rT);g2e=n(A$e,"STRONG",{});var d_t=s(g2e);dlr=r(d_t,"speech_to_text"),d_t.forEach(t),clr=r(A$e," \u2014 "),kz=n(A$e,"A",{href:!0});var c_t=s(kz);flr=r(c_t,"TFSpeech2TextModel"),c_t.forEach(t),mlr=r(A$e," (Speech2Text model)"),A$e.forEach(t),glr=i(D),tT=n(D,"LI",{});var y$e=s(tT);h2e=n(y$e,"STRONG",{});var f_t=s(h2e);hlr=r(f_t,"t5"),f_t.forEach(t),plr=r(y$e," \u2014 "),Sz=n(y$e,"A",{href:!0});var m_t=s(Sz);ulr=r(m_t,"TFT5Model"),m_t.forEach(t),_lr=r(y$e," (T5 model)"),y$e.forEach(t),blr=i(D),aT=n(D,"LI",{});var L$e=s(aT);p2e=n(L$e,"STRONG",{});var g_t=s(p2e);vlr=r(g_t,"tapas"),g_t.forEach(t),Flr=r(L$e," \u2014 "),Rz=n(L$e,"A",{href:!0});var h_t=s(Rz);Tlr=r(h_t,"TFTapasModel"),h_t.forEach(t),Mlr=r(L$e," (TAPAS model)"),L$e.forEach(t),Elr=i(D),nT=n(D,"LI",{});var x$e=s(nT);u2e=n(x$e,"STRONG",{});var p_t=s(u2e);Clr=r(p_t,"transfo-xl"),p_t.forEach(t),wlr=r(x$e," \u2014 "),Bz=n(x$e,"A",{href:!0});var u_t=s(Bz);Alr=r(u_t,"TFTransfoXLModel"),u_t.forEach(t),ylr=r(x$e," (Transformer-XL model)"),x$e.forEach(t),Llr=i(D),sT=n(D,"LI",{});var $$e=s(sT);_2e=n($$e,"STRONG",{});var __t=s(_2e);xlr=r(__t,"vit"),__t.forEach(t),$lr=r($$e," \u2014 "),Pz=n($$e,"A",{href:!0});var b_t=s(Pz);klr=r(b_t,"TFViTModel"),b_t.forEach(t),Slr=r($$e," (ViT model)"),$$e.forEach(t),Rlr=i(D),lT=n(D,"LI",{});var k$e=s(lT);b2e=n(k$e,"STRONG",{});var v_t=s(b2e);Blr=r(v_t,"vit_mae"),v_t.forEach(t),Plr=r(k$e," \u2014 "),Iz=n(k$e,"A",{href:!0});var F_t=s(Iz);Ilr=r(F_t,"TFViTMAEModel"),F_t.forEach(t),qlr=r(k$e," (ViTMAE model)"),k$e.forEach(t),Nlr=i(D),iT=n(D,"LI",{});var S$e=s(iT);v2e=n(S$e,"STRONG",{});var T_t=s(v2e);jlr=r(T_t,"wav2vec2"),T_t.forEach(t),Dlr=r(S$e," \u2014 "),qz=n(S$e,"A",{href:!0});var M_t=s(qz);Glr=r(M_t,"TFWav2Vec2Model"),M_t.forEach(t),Olr=r(S$e," (Wav2Vec2 model)"),S$e.forEach(t),Vlr=i(D),dT=n(D,"LI",{});var R$e=s(dT);F2e=n(R$e,"STRONG",{});var E_t=s(F2e);Xlr=r(E_t,"xlm"),E_t.forEach(t),zlr=r(R$e," \u2014 "),Nz=n(R$e,"A",{href:!0});var C_t=s(Nz);Qlr=r(C_t,"TFXLMModel"),C_t.forEach(t),Wlr=r(R$e," (XLM model)"),R$e.forEach(t),Hlr=i(D),cT=n(D,"LI",{});var B$e=s(cT);T2e=n(B$e,"STRONG",{});var w_t=s(T2e);Ulr=r(w_t,"xlm-roberta"),w_t.forEach(t),Jlr=r(B$e," \u2014 "),jz=n(B$e,"A",{href:!0});var A_t=s(jz);Ylr=r(A_t,"TFXLMRobertaModel"),A_t.forEach(t),Klr=r(B$e," (XLM-RoBERTa model)"),B$e.forEach(t),Zlr=i(D),fT=n(D,"LI",{});var P$e=s(fT);M2e=n(P$e,"STRONG",{});var y_t=s(M2e);eir=r(y_t,"xlnet"),y_t.forEach(t),oir=r(P$e," \u2014 "),Dz=n(P$e,"A",{href:!0});var L_t=s(Dz);rir=r(L_t,"TFXLNetModel"),L_t.forEach(t),tir=r(P$e," (XLNet model)"),P$e.forEach(t),D.forEach(t),air=i(cl),T(mT.$$.fragment,cl),cl.forEach(t),dl.forEach(t),BIe=i(f),Dd=n(f,"H2",{class:!0});var DNe=s(Dd);gT=n(DNe,"A",{id:!0,class:!0,href:!0});var x_t=s(gT);E2e=n(x_t,"SPAN",{});var $_t=s(E2e);T(RL.$$.fragment,$_t),$_t.forEach(t),x_t.forEach(t),nir=i(DNe),C2e=n(DNe,"SPAN",{});var k_t=s(C2e);sir=r(k_t,"TFAutoModelForPreTraining"),k_t.forEach(t),DNe.forEach(t),PIe=i(f),Ko=n(f,"DIV",{class:!0});var fl=s(Ko);T(BL.$$.fragment,fl),lir=i(fl),Gd=n(fl,"P",{});var UK=s(Gd);iir=r(UK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Gz=n(UK,"A",{href:!0});var S_t=s(Gz);dir=r(S_t,"from_pretrained()"),S_t.forEach(t),cir=r(UK," class method or the "),Oz=n(UK,"A",{href:!0});var R_t=s(Oz);fir=r(R_t,"from_config()"),R_t.forEach(t),mir=r(UK,` class
method.`),UK.forEach(t),gir=i(fl),PL=n(fl,"P",{});var GNe=s(PL);hir=r(GNe,"This class cannot be instantiated directly using "),w2e=n(GNe,"CODE",{});var B_t=s(w2e);pir=r(B_t,"__init__()"),B_t.forEach(t),uir=r(GNe," (throws an error)."),GNe.forEach(t),_ir=i(fl),At=n(fl,"DIV",{class:!0});var W3=s(At);T(IL.$$.fragment,W3),bir=i(W3),A2e=n(W3,"P",{});var P_t=s(A2e);vir=r(P_t,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),P_t.forEach(t),Fir=i(W3),Od=n(W3,"P",{});var JK=s(Od);Tir=r(JK,`Note:
Loading a model from its configuration file does `),y2e=n(JK,"STRONG",{});var I_t=s(y2e);Mir=r(I_t,"not"),I_t.forEach(t),Eir=r(JK,` load the model weights. It only affects the
model\u2019s configuration. Use `),Vz=n(JK,"A",{href:!0});var q_t=s(Vz);Cir=r(q_t,"from_pretrained()"),q_t.forEach(t),wir=r(JK," to load the model weights."),JK.forEach(t),Air=i(W3),T(hT.$$.fragment,W3),W3.forEach(t),yir=i(fl),Ar=n(fl,"DIV",{class:!0});var ml=s(Ar);T(qL.$$.fragment,ml),Lir=i(ml),L2e=n(ml,"P",{});var N_t=s(L2e);xir=r(N_t,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),N_t.forEach(t),$ir=i(ml),Za=n(ml,"P",{});var H3=s(Za);kir=r(H3,"The model class to instantiate is selected based on the "),x2e=n(H3,"CODE",{});var j_t=s(x2e);Sir=r(j_t,"model_type"),j_t.forEach(t),Rir=r(H3,` property of the config object (either
passed as an argument or loaded from `),$2e=n(H3,"CODE",{});var D_t=s($2e);Bir=r(D_t,"pretrained_model_name_or_path"),D_t.forEach(t),Pir=r(H3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),k2e=n(H3,"CODE",{});var G_t=s(k2e);Iir=r(G_t,"pretrained_model_name_or_path"),G_t.forEach(t),qir=r(H3,":"),H3.forEach(t),Nir=i(ml),se=n(ml,"UL",{});var le=s(se);pT=n(le,"LI",{});var I$e=s(pT);S2e=n(I$e,"STRONG",{});var O_t=s(S2e);jir=r(O_t,"albert"),O_t.forEach(t),Dir=r(I$e," \u2014 "),Xz=n(I$e,"A",{href:!0});var V_t=s(Xz);Gir=r(V_t,"TFAlbertForPreTraining"),V_t.forEach(t),Oir=r(I$e," (ALBERT model)"),I$e.forEach(t),Vir=i(le),uT=n(le,"LI",{});var q$e=s(uT);R2e=n(q$e,"STRONG",{});var X_t=s(R2e);Xir=r(X_t,"bart"),X_t.forEach(t),zir=r(q$e," \u2014 "),zz=n(q$e,"A",{href:!0});var z_t=s(zz);Qir=r(z_t,"TFBartForConditionalGeneration"),z_t.forEach(t),Wir=r(q$e," (BART model)"),q$e.forEach(t),Hir=i(le),_T=n(le,"LI",{});var N$e=s(_T);B2e=n(N$e,"STRONG",{});var Q_t=s(B2e);Uir=r(Q_t,"bert"),Q_t.forEach(t),Jir=r(N$e," \u2014 "),Qz=n(N$e,"A",{href:!0});var W_t=s(Qz);Yir=r(W_t,"TFBertForPreTraining"),W_t.forEach(t),Kir=r(N$e," (BERT model)"),N$e.forEach(t),Zir=i(le),bT=n(le,"LI",{});var j$e=s(bT);P2e=n(j$e,"STRONG",{});var H_t=s(P2e);edr=r(H_t,"camembert"),H_t.forEach(t),odr=r(j$e," \u2014 "),Wz=n(j$e,"A",{href:!0});var U_t=s(Wz);rdr=r(U_t,"TFCamembertForMaskedLM"),U_t.forEach(t),tdr=r(j$e," (CamemBERT model)"),j$e.forEach(t),adr=i(le),vT=n(le,"LI",{});var D$e=s(vT);I2e=n(D$e,"STRONG",{});var J_t=s(I2e);ndr=r(J_t,"ctrl"),J_t.forEach(t),sdr=r(D$e," \u2014 "),Hz=n(D$e,"A",{href:!0});var Y_t=s(Hz);ldr=r(Y_t,"TFCTRLLMHeadModel"),Y_t.forEach(t),idr=r(D$e," (CTRL model)"),D$e.forEach(t),ddr=i(le),FT=n(le,"LI",{});var G$e=s(FT);q2e=n(G$e,"STRONG",{});var K_t=s(q2e);cdr=r(K_t,"distilbert"),K_t.forEach(t),fdr=r(G$e," \u2014 "),Uz=n(G$e,"A",{href:!0});var Z_t=s(Uz);mdr=r(Z_t,"TFDistilBertForMaskedLM"),Z_t.forEach(t),gdr=r(G$e," (DistilBERT model)"),G$e.forEach(t),hdr=i(le),TT=n(le,"LI",{});var O$e=s(TT);N2e=n(O$e,"STRONG",{});var e2t=s(N2e);pdr=r(e2t,"electra"),e2t.forEach(t),udr=r(O$e," \u2014 "),Jz=n(O$e,"A",{href:!0});var o2t=s(Jz);_dr=r(o2t,"TFElectraForPreTraining"),o2t.forEach(t),bdr=r(O$e," (ELECTRA model)"),O$e.forEach(t),vdr=i(le),MT=n(le,"LI",{});var V$e=s(MT);j2e=n(V$e,"STRONG",{});var r2t=s(j2e);Fdr=r(r2t,"flaubert"),r2t.forEach(t),Tdr=r(V$e," \u2014 "),Yz=n(V$e,"A",{href:!0});var t2t=s(Yz);Mdr=r(t2t,"TFFlaubertWithLMHeadModel"),t2t.forEach(t),Edr=r(V$e," (FlauBERT model)"),V$e.forEach(t),Cdr=i(le),ET=n(le,"LI",{});var X$e=s(ET);D2e=n(X$e,"STRONG",{});var a2t=s(D2e);wdr=r(a2t,"funnel"),a2t.forEach(t),Adr=r(X$e," \u2014 "),Kz=n(X$e,"A",{href:!0});var n2t=s(Kz);ydr=r(n2t,"TFFunnelForPreTraining"),n2t.forEach(t),Ldr=r(X$e," (Funnel Transformer model)"),X$e.forEach(t),xdr=i(le),CT=n(le,"LI",{});var z$e=s(CT);G2e=n(z$e,"STRONG",{});var s2t=s(G2e);$dr=r(s2t,"gpt2"),s2t.forEach(t),kdr=r(z$e," \u2014 "),Zz=n(z$e,"A",{href:!0});var l2t=s(Zz);Sdr=r(l2t,"TFGPT2LMHeadModel"),l2t.forEach(t),Rdr=r(z$e," (OpenAI GPT-2 model)"),z$e.forEach(t),Bdr=i(le),wT=n(le,"LI",{});var Q$e=s(wT);O2e=n(Q$e,"STRONG",{});var i2t=s(O2e);Pdr=r(i2t,"layoutlm"),i2t.forEach(t),Idr=r(Q$e," \u2014 "),eQ=n(Q$e,"A",{href:!0});var d2t=s(eQ);qdr=r(d2t,"TFLayoutLMForMaskedLM"),d2t.forEach(t),Ndr=r(Q$e," (LayoutLM model)"),Q$e.forEach(t),jdr=i(le),AT=n(le,"LI",{});var W$e=s(AT);V2e=n(W$e,"STRONG",{});var c2t=s(V2e);Ddr=r(c2t,"lxmert"),c2t.forEach(t),Gdr=r(W$e," \u2014 "),oQ=n(W$e,"A",{href:!0});var f2t=s(oQ);Odr=r(f2t,"TFLxmertForPreTraining"),f2t.forEach(t),Vdr=r(W$e," (LXMERT model)"),W$e.forEach(t),Xdr=i(le),yT=n(le,"LI",{});var H$e=s(yT);X2e=n(H$e,"STRONG",{});var m2t=s(X2e);zdr=r(m2t,"mobilebert"),m2t.forEach(t),Qdr=r(H$e," \u2014 "),rQ=n(H$e,"A",{href:!0});var g2t=s(rQ);Wdr=r(g2t,"TFMobileBertForPreTraining"),g2t.forEach(t),Hdr=r(H$e," (MobileBERT model)"),H$e.forEach(t),Udr=i(le),LT=n(le,"LI",{});var U$e=s(LT);z2e=n(U$e,"STRONG",{});var h2t=s(z2e);Jdr=r(h2t,"mpnet"),h2t.forEach(t),Ydr=r(U$e," \u2014 "),tQ=n(U$e,"A",{href:!0});var p2t=s(tQ);Kdr=r(p2t,"TFMPNetForMaskedLM"),p2t.forEach(t),Zdr=r(U$e," (MPNet model)"),U$e.forEach(t),ecr=i(le),xT=n(le,"LI",{});var J$e=s(xT);Q2e=n(J$e,"STRONG",{});var u2t=s(Q2e);ocr=r(u2t,"openai-gpt"),u2t.forEach(t),rcr=r(J$e," \u2014 "),aQ=n(J$e,"A",{href:!0});var _2t=s(aQ);tcr=r(_2t,"TFOpenAIGPTLMHeadModel"),_2t.forEach(t),acr=r(J$e," (OpenAI GPT model)"),J$e.forEach(t),ncr=i(le),$T=n(le,"LI",{});var Y$e=s($T);W2e=n(Y$e,"STRONG",{});var b2t=s(W2e);scr=r(b2t,"roberta"),b2t.forEach(t),lcr=r(Y$e," \u2014 "),nQ=n(Y$e,"A",{href:!0});var v2t=s(nQ);icr=r(v2t,"TFRobertaForMaskedLM"),v2t.forEach(t),dcr=r(Y$e," (RoBERTa model)"),Y$e.forEach(t),ccr=i(le),kT=n(le,"LI",{});var K$e=s(kT);H2e=n(K$e,"STRONG",{});var F2t=s(H2e);fcr=r(F2t,"t5"),F2t.forEach(t),mcr=r(K$e," \u2014 "),sQ=n(K$e,"A",{href:!0});var T2t=s(sQ);gcr=r(T2t,"TFT5ForConditionalGeneration"),T2t.forEach(t),hcr=r(K$e," (T5 model)"),K$e.forEach(t),pcr=i(le),ST=n(le,"LI",{});var Z$e=s(ST);U2e=n(Z$e,"STRONG",{});var M2t=s(U2e);ucr=r(M2t,"tapas"),M2t.forEach(t),_cr=r(Z$e," \u2014 "),lQ=n(Z$e,"A",{href:!0});var E2t=s(lQ);bcr=r(E2t,"TFTapasForMaskedLM"),E2t.forEach(t),vcr=r(Z$e," (TAPAS model)"),Z$e.forEach(t),Fcr=i(le),RT=n(le,"LI",{});var eke=s(RT);J2e=n(eke,"STRONG",{});var C2t=s(J2e);Tcr=r(C2t,"transfo-xl"),C2t.forEach(t),Mcr=r(eke," \u2014 "),iQ=n(eke,"A",{href:!0});var w2t=s(iQ);Ecr=r(w2t,"TFTransfoXLLMHeadModel"),w2t.forEach(t),Ccr=r(eke," (Transformer-XL model)"),eke.forEach(t),wcr=i(le),BT=n(le,"LI",{});var oke=s(BT);Y2e=n(oke,"STRONG",{});var A2t=s(Y2e);Acr=r(A2t,"vit_mae"),A2t.forEach(t),ycr=r(oke," \u2014 "),dQ=n(oke,"A",{href:!0});var y2t=s(dQ);Lcr=r(y2t,"TFViTMAEForPreTraining"),y2t.forEach(t),xcr=r(oke," (ViTMAE model)"),oke.forEach(t),$cr=i(le),PT=n(le,"LI",{});var rke=s(PT);K2e=n(rke,"STRONG",{});var L2t=s(K2e);kcr=r(L2t,"xlm"),L2t.forEach(t),Scr=r(rke," \u2014 "),cQ=n(rke,"A",{href:!0});var x2t=s(cQ);Rcr=r(x2t,"TFXLMWithLMHeadModel"),x2t.forEach(t),Bcr=r(rke," (XLM model)"),rke.forEach(t),Pcr=i(le),IT=n(le,"LI",{});var tke=s(IT);Z2e=n(tke,"STRONG",{});var $2t=s(Z2e);Icr=r($2t,"xlm-roberta"),$2t.forEach(t),qcr=r(tke," \u2014 "),fQ=n(tke,"A",{href:!0});var k2t=s(fQ);Ncr=r(k2t,"TFXLMRobertaForMaskedLM"),k2t.forEach(t),jcr=r(tke," (XLM-RoBERTa model)"),tke.forEach(t),Dcr=i(le),qT=n(le,"LI",{});var ake=s(qT);e1e=n(ake,"STRONG",{});var S2t=s(e1e);Gcr=r(S2t,"xlnet"),S2t.forEach(t),Ocr=r(ake," \u2014 "),mQ=n(ake,"A",{href:!0});var R2t=s(mQ);Vcr=r(R2t,"TFXLNetLMHeadModel"),R2t.forEach(t),Xcr=r(ake," (XLNet model)"),ake.forEach(t),le.forEach(t),zcr=i(ml),T(NT.$$.fragment,ml),ml.forEach(t),fl.forEach(t),IIe=i(f),Vd=n(f,"H2",{class:!0});var ONe=s(Vd);jT=n(ONe,"A",{id:!0,class:!0,href:!0});var B2t=s(jT);o1e=n(B2t,"SPAN",{});var P2t=s(o1e);T(NL.$$.fragment,P2t),P2t.forEach(t),B2t.forEach(t),Qcr=i(ONe),r1e=n(ONe,"SPAN",{});var I2t=s(r1e);Wcr=r(I2t,"TFAutoModelForCausalLM"),I2t.forEach(t),ONe.forEach(t),qIe=i(f),Zo=n(f,"DIV",{class:!0});var gl=s(Zo);T(jL.$$.fragment,gl),Hcr=i(gl),Xd=n(gl,"P",{});var YK=s(Xd);Ucr=r(YK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),gQ=n(YK,"A",{href:!0});var q2t=s(gQ);Jcr=r(q2t,"from_pretrained()"),q2t.forEach(t),Ycr=r(YK," class method or the "),hQ=n(YK,"A",{href:!0});var N2t=s(hQ);Kcr=r(N2t,"from_config()"),N2t.forEach(t),Zcr=r(YK,` class
method.`),YK.forEach(t),efr=i(gl),DL=n(gl,"P",{});var VNe=s(DL);ofr=r(VNe,"This class cannot be instantiated directly using "),t1e=n(VNe,"CODE",{});var j2t=s(t1e);rfr=r(j2t,"__init__()"),j2t.forEach(t),tfr=r(VNe," (throws an error)."),VNe.forEach(t),afr=i(gl),yt=n(gl,"DIV",{class:!0});var U3=s(yt);T(GL.$$.fragment,U3),nfr=i(U3),a1e=n(U3,"P",{});var D2t=s(a1e);sfr=r(D2t,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),D2t.forEach(t),lfr=i(U3),zd=n(U3,"P",{});var KK=s(zd);ifr=r(KK,`Note:
Loading a model from its configuration file does `),n1e=n(KK,"STRONG",{});var G2t=s(n1e);dfr=r(G2t,"not"),G2t.forEach(t),cfr=r(KK,` load the model weights. It only affects the
model\u2019s configuration. Use `),pQ=n(KK,"A",{href:!0});var O2t=s(pQ);ffr=r(O2t,"from_pretrained()"),O2t.forEach(t),mfr=r(KK," to load the model weights."),KK.forEach(t),gfr=i(U3),T(DT.$$.fragment,U3),U3.forEach(t),hfr=i(gl),yr=n(gl,"DIV",{class:!0});var hl=s(yr);T(OL.$$.fragment,hl),pfr=i(hl),s1e=n(hl,"P",{});var V2t=s(s1e);ufr=r(V2t,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),V2t.forEach(t),_fr=i(hl),en=n(hl,"P",{});var J3=s(en);bfr=r(J3,"The model class to instantiate is selected based on the "),l1e=n(J3,"CODE",{});var X2t=s(l1e);vfr=r(X2t,"model_type"),X2t.forEach(t),Ffr=r(J3,` property of the config object (either
passed as an argument or loaded from `),i1e=n(J3,"CODE",{});var z2t=s(i1e);Tfr=r(z2t,"pretrained_model_name_or_path"),z2t.forEach(t),Mfr=r(J3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),d1e=n(J3,"CODE",{});var Q2t=s(d1e);Efr=r(Q2t,"pretrained_model_name_or_path"),Q2t.forEach(t),Cfr=r(J3,":"),J3.forEach(t),wfr=i(hl),Te=n(hl,"UL",{});var Ce=s(Te);GT=n(Ce,"LI",{});var nke=s(GT);c1e=n(nke,"STRONG",{});var W2t=s(c1e);Afr=r(W2t,"bert"),W2t.forEach(t),yfr=r(nke," \u2014 "),uQ=n(nke,"A",{href:!0});var H2t=s(uQ);Lfr=r(H2t,"TFBertLMHeadModel"),H2t.forEach(t),xfr=r(nke," (BERT model)"),nke.forEach(t),$fr=i(Ce),OT=n(Ce,"LI",{});var ske=s(OT);f1e=n(ske,"STRONG",{});var U2t=s(f1e);kfr=r(U2t,"camembert"),U2t.forEach(t),Sfr=r(ske," \u2014 "),_Q=n(ske,"A",{href:!0});var J2t=s(_Q);Rfr=r(J2t,"TFCamembertForCausalLM"),J2t.forEach(t),Bfr=r(ske," (CamemBERT model)"),ske.forEach(t),Pfr=i(Ce),VT=n(Ce,"LI",{});var lke=s(VT);m1e=n(lke,"STRONG",{});var Y2t=s(m1e);Ifr=r(Y2t,"ctrl"),Y2t.forEach(t),qfr=r(lke," \u2014 "),bQ=n(lke,"A",{href:!0});var K2t=s(bQ);Nfr=r(K2t,"TFCTRLLMHeadModel"),K2t.forEach(t),jfr=r(lke," (CTRL model)"),lke.forEach(t),Dfr=i(Ce),XT=n(Ce,"LI",{});var ike=s(XT);g1e=n(ike,"STRONG",{});var Z2t=s(g1e);Gfr=r(Z2t,"gpt2"),Z2t.forEach(t),Ofr=r(ike," \u2014 "),vQ=n(ike,"A",{href:!0});var e1t=s(vQ);Vfr=r(e1t,"TFGPT2LMHeadModel"),e1t.forEach(t),Xfr=r(ike," (OpenAI GPT-2 model)"),ike.forEach(t),zfr=i(Ce),zT=n(Ce,"LI",{});var dke=s(zT);h1e=n(dke,"STRONG",{});var o1t=s(h1e);Qfr=r(o1t,"gptj"),o1t.forEach(t),Wfr=r(dke," \u2014 "),FQ=n(dke,"A",{href:!0});var r1t=s(FQ);Hfr=r(r1t,"TFGPTJForCausalLM"),r1t.forEach(t),Ufr=r(dke," (GPT-J model)"),dke.forEach(t),Jfr=i(Ce),QT=n(Ce,"LI",{});var cke=s(QT);p1e=n(cke,"STRONG",{});var t1t=s(p1e);Yfr=r(t1t,"openai-gpt"),t1t.forEach(t),Kfr=r(cke," \u2014 "),TQ=n(cke,"A",{href:!0});var a1t=s(TQ);Zfr=r(a1t,"TFOpenAIGPTLMHeadModel"),a1t.forEach(t),emr=r(cke," (OpenAI GPT model)"),cke.forEach(t),omr=i(Ce),WT=n(Ce,"LI",{});var fke=s(WT);u1e=n(fke,"STRONG",{});var n1t=s(u1e);rmr=r(n1t,"rembert"),n1t.forEach(t),tmr=r(fke," \u2014 "),MQ=n(fke,"A",{href:!0});var s1t=s(MQ);amr=r(s1t,"TFRemBertForCausalLM"),s1t.forEach(t),nmr=r(fke," (RemBERT model)"),fke.forEach(t),smr=i(Ce),HT=n(Ce,"LI",{});var mke=s(HT);_1e=n(mke,"STRONG",{});var l1t=s(_1e);lmr=r(l1t,"roberta"),l1t.forEach(t),imr=r(mke," \u2014 "),EQ=n(mke,"A",{href:!0});var i1t=s(EQ);dmr=r(i1t,"TFRobertaForCausalLM"),i1t.forEach(t),cmr=r(mke," (RoBERTa model)"),mke.forEach(t),fmr=i(Ce),UT=n(Ce,"LI",{});var gke=s(UT);b1e=n(gke,"STRONG",{});var d1t=s(b1e);mmr=r(d1t,"roformer"),d1t.forEach(t),gmr=r(gke," \u2014 "),CQ=n(gke,"A",{href:!0});var c1t=s(CQ);hmr=r(c1t,"TFRoFormerForCausalLM"),c1t.forEach(t),pmr=r(gke," (RoFormer model)"),gke.forEach(t),umr=i(Ce),JT=n(Ce,"LI",{});var hke=s(JT);v1e=n(hke,"STRONG",{});var f1t=s(v1e);_mr=r(f1t,"transfo-xl"),f1t.forEach(t),bmr=r(hke," \u2014 "),wQ=n(hke,"A",{href:!0});var m1t=s(wQ);vmr=r(m1t,"TFTransfoXLLMHeadModel"),m1t.forEach(t),Fmr=r(hke," (Transformer-XL model)"),hke.forEach(t),Tmr=i(Ce),YT=n(Ce,"LI",{});var pke=s(YT);F1e=n(pke,"STRONG",{});var g1t=s(F1e);Mmr=r(g1t,"xlm"),g1t.forEach(t),Emr=r(pke," \u2014 "),AQ=n(pke,"A",{href:!0});var h1t=s(AQ);Cmr=r(h1t,"TFXLMWithLMHeadModel"),h1t.forEach(t),wmr=r(pke," (XLM model)"),pke.forEach(t),Amr=i(Ce),KT=n(Ce,"LI",{});var uke=s(KT);T1e=n(uke,"STRONG",{});var p1t=s(T1e);ymr=r(p1t,"xlnet"),p1t.forEach(t),Lmr=r(uke," \u2014 "),yQ=n(uke,"A",{href:!0});var u1t=s(yQ);xmr=r(u1t,"TFXLNetLMHeadModel"),u1t.forEach(t),$mr=r(uke," (XLNet model)"),uke.forEach(t),Ce.forEach(t),kmr=i(hl),T(ZT.$$.fragment,hl),hl.forEach(t),gl.forEach(t),NIe=i(f),Qd=n(f,"H2",{class:!0});var XNe=s(Qd);e7=n(XNe,"A",{id:!0,class:!0,href:!0});var _1t=s(e7);M1e=n(_1t,"SPAN",{});var b1t=s(M1e);T(VL.$$.fragment,b1t),b1t.forEach(t),_1t.forEach(t),Smr=i(XNe),E1e=n(XNe,"SPAN",{});var v1t=s(E1e);Rmr=r(v1t,"TFAutoModelForImageClassification"),v1t.forEach(t),XNe.forEach(t),jIe=i(f),er=n(f,"DIV",{class:!0});var pl=s(er);T(XL.$$.fragment,pl),Bmr=i(pl),Wd=n(pl,"P",{});var ZK=s(Wd);Pmr=r(ZK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),LQ=n(ZK,"A",{href:!0});var F1t=s(LQ);Imr=r(F1t,"from_pretrained()"),F1t.forEach(t),qmr=r(ZK," class method or the "),xQ=n(ZK,"A",{href:!0});var T1t=s(xQ);Nmr=r(T1t,"from_config()"),T1t.forEach(t),jmr=r(ZK,` class
method.`),ZK.forEach(t),Dmr=i(pl),zL=n(pl,"P",{});var zNe=s(zL);Gmr=r(zNe,"This class cannot be instantiated directly using "),C1e=n(zNe,"CODE",{});var M1t=s(C1e);Omr=r(M1t,"__init__()"),M1t.forEach(t),Vmr=r(zNe," (throws an error)."),zNe.forEach(t),Xmr=i(pl),Lt=n(pl,"DIV",{class:!0});var Y3=s(Lt);T(QL.$$.fragment,Y3),zmr=i(Y3),w1e=n(Y3,"P",{});var E1t=s(w1e);Qmr=r(E1t,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),E1t.forEach(t),Wmr=i(Y3),Hd=n(Y3,"P",{});var eZ=s(Hd);Hmr=r(eZ,`Note:
Loading a model from its configuration file does `),A1e=n(eZ,"STRONG",{});var C1t=s(A1e);Umr=r(C1t,"not"),C1t.forEach(t),Jmr=r(eZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),$Q=n(eZ,"A",{href:!0});var w1t=s($Q);Ymr=r(w1t,"from_pretrained()"),w1t.forEach(t),Kmr=r(eZ," to load the model weights."),eZ.forEach(t),Zmr=i(Y3),T(o7.$$.fragment,Y3),Y3.forEach(t),egr=i(pl),Lr=n(pl,"DIV",{class:!0});var ul=s(Lr);T(WL.$$.fragment,ul),ogr=i(ul),y1e=n(ul,"P",{});var A1t=s(y1e);rgr=r(A1t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),A1t.forEach(t),tgr=i(ul),on=n(ul,"P",{});var K3=s(on);agr=r(K3,"The model class to instantiate is selected based on the "),L1e=n(K3,"CODE",{});var y1t=s(L1e);ngr=r(y1t,"model_type"),y1t.forEach(t),sgr=r(K3,` property of the config object (either
passed as an argument or loaded from `),x1e=n(K3,"CODE",{});var L1t=s(x1e);lgr=r(L1t,"pretrained_model_name_or_path"),L1t.forEach(t),igr=r(K3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$1e=n(K3,"CODE",{});var x1t=s($1e);dgr=r(x1t,"pretrained_model_name_or_path"),x1t.forEach(t),cgr=r(K3,":"),K3.forEach(t),fgr=i(ul),Ud=n(ul,"UL",{});var oZ=s(Ud);r7=n(oZ,"LI",{});var _ke=s(r7);k1e=n(_ke,"STRONG",{});var $1t=s(k1e);mgr=r($1t,"convnext"),$1t.forEach(t),ggr=r(_ke," \u2014 "),kQ=n(_ke,"A",{href:!0});var k1t=s(kQ);hgr=r(k1t,"TFConvNextForImageClassification"),k1t.forEach(t),pgr=r(_ke," (ConvNext model)"),_ke.forEach(t),ugr=i(oZ),t7=n(oZ,"LI",{});var bke=s(t7);S1e=n(bke,"STRONG",{});var S1t=s(S1e);_gr=r(S1t,"data2vec-vision"),S1t.forEach(t),bgr=r(bke," \u2014 "),SQ=n(bke,"A",{href:!0});var R1t=s(SQ);vgr=r(R1t,"TFData2VecVisionForImageClassification"),R1t.forEach(t),Fgr=r(bke," (Data2VecVision model)"),bke.forEach(t),Tgr=i(oZ),a7=n(oZ,"LI",{});var vke=s(a7);R1e=n(vke,"STRONG",{});var B1t=s(R1e);Mgr=r(B1t,"vit"),B1t.forEach(t),Egr=r(vke," \u2014 "),RQ=n(vke,"A",{href:!0});var P1t=s(RQ);Cgr=r(P1t,"TFViTForImageClassification"),P1t.forEach(t),wgr=r(vke," (ViT model)"),vke.forEach(t),oZ.forEach(t),Agr=i(ul),T(n7.$$.fragment,ul),ul.forEach(t),pl.forEach(t),DIe=i(f),Jd=n(f,"H2",{class:!0});var QNe=s(Jd);s7=n(QNe,"A",{id:!0,class:!0,href:!0});var I1t=s(s7);B1e=n(I1t,"SPAN",{});var q1t=s(B1e);T(HL.$$.fragment,q1t),q1t.forEach(t),I1t.forEach(t),ygr=i(QNe),P1e=n(QNe,"SPAN",{});var N1t=s(P1e);Lgr=r(N1t,"TFAutoModelForMaskedLM"),N1t.forEach(t),QNe.forEach(t),GIe=i(f),or=n(f,"DIV",{class:!0});var _l=s(or);T(UL.$$.fragment,_l),xgr=i(_l),Yd=n(_l,"P",{});var rZ=s(Yd);$gr=r(rZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),BQ=n(rZ,"A",{href:!0});var j1t=s(BQ);kgr=r(j1t,"from_pretrained()"),j1t.forEach(t),Sgr=r(rZ," class method or the "),PQ=n(rZ,"A",{href:!0});var D1t=s(PQ);Rgr=r(D1t,"from_config()"),D1t.forEach(t),Bgr=r(rZ,` class
method.`),rZ.forEach(t),Pgr=i(_l),JL=n(_l,"P",{});var WNe=s(JL);Igr=r(WNe,"This class cannot be instantiated directly using "),I1e=n(WNe,"CODE",{});var G1t=s(I1e);qgr=r(G1t,"__init__()"),G1t.forEach(t),Ngr=r(WNe," (throws an error)."),WNe.forEach(t),jgr=i(_l),xt=n(_l,"DIV",{class:!0});var Z3=s(xt);T(YL.$$.fragment,Z3),Dgr=i(Z3),q1e=n(Z3,"P",{});var O1t=s(q1e);Ggr=r(O1t,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),O1t.forEach(t),Ogr=i(Z3),Kd=n(Z3,"P",{});var tZ=s(Kd);Vgr=r(tZ,`Note:
Loading a model from its configuration file does `),N1e=n(tZ,"STRONG",{});var V1t=s(N1e);Xgr=r(V1t,"not"),V1t.forEach(t),zgr=r(tZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),IQ=n(tZ,"A",{href:!0});var X1t=s(IQ);Qgr=r(X1t,"from_pretrained()"),X1t.forEach(t),Wgr=r(tZ," to load the model weights."),tZ.forEach(t),Hgr=i(Z3),T(l7.$$.fragment,Z3),Z3.forEach(t),Ugr=i(_l),xr=n(_l,"DIV",{class:!0});var bl=s(xr);T(KL.$$.fragment,bl),Jgr=i(bl),j1e=n(bl,"P",{});var z1t=s(j1e);Ygr=r(z1t,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),z1t.forEach(t),Kgr=i(bl),rn=n(bl,"P",{});var ew=s(rn);Zgr=r(ew,"The model class to instantiate is selected based on the "),D1e=n(ew,"CODE",{});var Q1t=s(D1e);ehr=r(Q1t,"model_type"),Q1t.forEach(t),ohr=r(ew,` property of the config object (either
passed as an argument or loaded from `),G1e=n(ew,"CODE",{});var W1t=s(G1e);rhr=r(W1t,"pretrained_model_name_or_path"),W1t.forEach(t),thr=r(ew,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),O1e=n(ew,"CODE",{});var H1t=s(O1e);ahr=r(H1t,"pretrained_model_name_or_path"),H1t.forEach(t),nhr=r(ew,":"),ew.forEach(t),shr=i(bl),ie=n(bl,"UL",{});var fe=s(ie);i7=n(fe,"LI",{});var Fke=s(i7);V1e=n(Fke,"STRONG",{});var U1t=s(V1e);lhr=r(U1t,"albert"),U1t.forEach(t),ihr=r(Fke," \u2014 "),qQ=n(Fke,"A",{href:!0});var J1t=s(qQ);dhr=r(J1t,"TFAlbertForMaskedLM"),J1t.forEach(t),chr=r(Fke," (ALBERT model)"),Fke.forEach(t),fhr=i(fe),d7=n(fe,"LI",{});var Tke=s(d7);X1e=n(Tke,"STRONG",{});var Y1t=s(X1e);mhr=r(Y1t,"bert"),Y1t.forEach(t),ghr=r(Tke," \u2014 "),NQ=n(Tke,"A",{href:!0});var K1t=s(NQ);hhr=r(K1t,"TFBertForMaskedLM"),K1t.forEach(t),phr=r(Tke," (BERT model)"),Tke.forEach(t),uhr=i(fe),c7=n(fe,"LI",{});var Mke=s(c7);z1e=n(Mke,"STRONG",{});var Z1t=s(z1e);_hr=r(Z1t,"camembert"),Z1t.forEach(t),bhr=r(Mke," \u2014 "),jQ=n(Mke,"A",{href:!0});var ebt=s(jQ);vhr=r(ebt,"TFCamembertForMaskedLM"),ebt.forEach(t),Fhr=r(Mke," (CamemBERT model)"),Mke.forEach(t),Thr=i(fe),f7=n(fe,"LI",{});var Eke=s(f7);Q1e=n(Eke,"STRONG",{});var obt=s(Q1e);Mhr=r(obt,"convbert"),obt.forEach(t),Ehr=r(Eke," \u2014 "),DQ=n(Eke,"A",{href:!0});var rbt=s(DQ);Chr=r(rbt,"TFConvBertForMaskedLM"),rbt.forEach(t),whr=r(Eke," (ConvBERT model)"),Eke.forEach(t),Ahr=i(fe),m7=n(fe,"LI",{});var Cke=s(m7);W1e=n(Cke,"STRONG",{});var tbt=s(W1e);yhr=r(tbt,"deberta"),tbt.forEach(t),Lhr=r(Cke," \u2014 "),GQ=n(Cke,"A",{href:!0});var abt=s(GQ);xhr=r(abt,"TFDebertaForMaskedLM"),abt.forEach(t),$hr=r(Cke," (DeBERTa model)"),Cke.forEach(t),khr=i(fe),g7=n(fe,"LI",{});var wke=s(g7);H1e=n(wke,"STRONG",{});var nbt=s(H1e);Shr=r(nbt,"deberta-v2"),nbt.forEach(t),Rhr=r(wke," \u2014 "),OQ=n(wke,"A",{href:!0});var sbt=s(OQ);Bhr=r(sbt,"TFDebertaV2ForMaskedLM"),sbt.forEach(t),Phr=r(wke," (DeBERTa-v2 model)"),wke.forEach(t),Ihr=i(fe),h7=n(fe,"LI",{});var Ake=s(h7);U1e=n(Ake,"STRONG",{});var lbt=s(U1e);qhr=r(lbt,"distilbert"),lbt.forEach(t),Nhr=r(Ake," \u2014 "),VQ=n(Ake,"A",{href:!0});var ibt=s(VQ);jhr=r(ibt,"TFDistilBertForMaskedLM"),ibt.forEach(t),Dhr=r(Ake," (DistilBERT model)"),Ake.forEach(t),Ghr=i(fe),p7=n(fe,"LI",{});var yke=s(p7);J1e=n(yke,"STRONG",{});var dbt=s(J1e);Ohr=r(dbt,"electra"),dbt.forEach(t),Vhr=r(yke," \u2014 "),XQ=n(yke,"A",{href:!0});var cbt=s(XQ);Xhr=r(cbt,"TFElectraForMaskedLM"),cbt.forEach(t),zhr=r(yke," (ELECTRA model)"),yke.forEach(t),Qhr=i(fe),u7=n(fe,"LI",{});var Lke=s(u7);Y1e=n(Lke,"STRONG",{});var fbt=s(Y1e);Whr=r(fbt,"flaubert"),fbt.forEach(t),Hhr=r(Lke," \u2014 "),zQ=n(Lke,"A",{href:!0});var mbt=s(zQ);Uhr=r(mbt,"TFFlaubertWithLMHeadModel"),mbt.forEach(t),Jhr=r(Lke," (FlauBERT model)"),Lke.forEach(t),Yhr=i(fe),_7=n(fe,"LI",{});var xke=s(_7);K1e=n(xke,"STRONG",{});var gbt=s(K1e);Khr=r(gbt,"funnel"),gbt.forEach(t),Zhr=r(xke," \u2014 "),QQ=n(xke,"A",{href:!0});var hbt=s(QQ);epr=r(hbt,"TFFunnelForMaskedLM"),hbt.forEach(t),opr=r(xke," (Funnel Transformer model)"),xke.forEach(t),rpr=i(fe),b7=n(fe,"LI",{});var $ke=s(b7);Z1e=n($ke,"STRONG",{});var pbt=s(Z1e);tpr=r(pbt,"layoutlm"),pbt.forEach(t),apr=r($ke," \u2014 "),WQ=n($ke,"A",{href:!0});var ubt=s(WQ);npr=r(ubt,"TFLayoutLMForMaskedLM"),ubt.forEach(t),spr=r($ke," (LayoutLM model)"),$ke.forEach(t),lpr=i(fe),v7=n(fe,"LI",{});var kke=s(v7);ebe=n(kke,"STRONG",{});var _bt=s(ebe);ipr=r(_bt,"longformer"),_bt.forEach(t),dpr=r(kke," \u2014 "),HQ=n(kke,"A",{href:!0});var bbt=s(HQ);cpr=r(bbt,"TFLongformerForMaskedLM"),bbt.forEach(t),fpr=r(kke," (Longformer model)"),kke.forEach(t),mpr=i(fe),F7=n(fe,"LI",{});var Ske=s(F7);obe=n(Ske,"STRONG",{});var vbt=s(obe);gpr=r(vbt,"mobilebert"),vbt.forEach(t),hpr=r(Ske," \u2014 "),UQ=n(Ske,"A",{href:!0});var Fbt=s(UQ);ppr=r(Fbt,"TFMobileBertForMaskedLM"),Fbt.forEach(t),upr=r(Ske," (MobileBERT model)"),Ske.forEach(t),_pr=i(fe),T7=n(fe,"LI",{});var Rke=s(T7);rbe=n(Rke,"STRONG",{});var Tbt=s(rbe);bpr=r(Tbt,"mpnet"),Tbt.forEach(t),vpr=r(Rke," \u2014 "),JQ=n(Rke,"A",{href:!0});var Mbt=s(JQ);Fpr=r(Mbt,"TFMPNetForMaskedLM"),Mbt.forEach(t),Tpr=r(Rke," (MPNet model)"),Rke.forEach(t),Mpr=i(fe),M7=n(fe,"LI",{});var Bke=s(M7);tbe=n(Bke,"STRONG",{});var Ebt=s(tbe);Epr=r(Ebt,"rembert"),Ebt.forEach(t),Cpr=r(Bke," \u2014 "),YQ=n(Bke,"A",{href:!0});var Cbt=s(YQ);wpr=r(Cbt,"TFRemBertForMaskedLM"),Cbt.forEach(t),Apr=r(Bke," (RemBERT model)"),Bke.forEach(t),ypr=i(fe),E7=n(fe,"LI",{});var Pke=s(E7);abe=n(Pke,"STRONG",{});var wbt=s(abe);Lpr=r(wbt,"roberta"),wbt.forEach(t),xpr=r(Pke," \u2014 "),KQ=n(Pke,"A",{href:!0});var Abt=s(KQ);$pr=r(Abt,"TFRobertaForMaskedLM"),Abt.forEach(t),kpr=r(Pke," (RoBERTa model)"),Pke.forEach(t),Spr=i(fe),C7=n(fe,"LI",{});var Ike=s(C7);nbe=n(Ike,"STRONG",{});var ybt=s(nbe);Rpr=r(ybt,"roformer"),ybt.forEach(t),Bpr=r(Ike," \u2014 "),ZQ=n(Ike,"A",{href:!0});var Lbt=s(ZQ);Ppr=r(Lbt,"TFRoFormerForMaskedLM"),Lbt.forEach(t),Ipr=r(Ike," (RoFormer model)"),Ike.forEach(t),qpr=i(fe),w7=n(fe,"LI",{});var qke=s(w7);sbe=n(qke,"STRONG",{});var xbt=s(sbe);Npr=r(xbt,"tapas"),xbt.forEach(t),jpr=r(qke," \u2014 "),eW=n(qke,"A",{href:!0});var $bt=s(eW);Dpr=r($bt,"TFTapasForMaskedLM"),$bt.forEach(t),Gpr=r(qke," (TAPAS model)"),qke.forEach(t),Opr=i(fe),A7=n(fe,"LI",{});var Nke=s(A7);lbe=n(Nke,"STRONG",{});var kbt=s(lbe);Vpr=r(kbt,"xlm"),kbt.forEach(t),Xpr=r(Nke," \u2014 "),oW=n(Nke,"A",{href:!0});var Sbt=s(oW);zpr=r(Sbt,"TFXLMWithLMHeadModel"),Sbt.forEach(t),Qpr=r(Nke," (XLM model)"),Nke.forEach(t),Wpr=i(fe),y7=n(fe,"LI",{});var jke=s(y7);ibe=n(jke,"STRONG",{});var Rbt=s(ibe);Hpr=r(Rbt,"xlm-roberta"),Rbt.forEach(t),Upr=r(jke," \u2014 "),rW=n(jke,"A",{href:!0});var Bbt=s(rW);Jpr=r(Bbt,"TFXLMRobertaForMaskedLM"),Bbt.forEach(t),Ypr=r(jke," (XLM-RoBERTa model)"),jke.forEach(t),fe.forEach(t),Kpr=i(bl),T(L7.$$.fragment,bl),bl.forEach(t),_l.forEach(t),OIe=i(f),Zd=n(f,"H2",{class:!0});var HNe=s(Zd);x7=n(HNe,"A",{id:!0,class:!0,href:!0});var Pbt=s(x7);dbe=n(Pbt,"SPAN",{});var Ibt=s(dbe);T(ZL.$$.fragment,Ibt),Ibt.forEach(t),Pbt.forEach(t),Zpr=i(HNe),cbe=n(HNe,"SPAN",{});var qbt=s(cbe);eur=r(qbt,"TFAutoModelForSeq2SeqLM"),qbt.forEach(t),HNe.forEach(t),VIe=i(f),rr=n(f,"DIV",{class:!0});var vl=s(rr);T(e8.$$.fragment,vl),our=i(vl),ec=n(vl,"P",{});var aZ=s(ec);rur=r(aZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),tW=n(aZ,"A",{href:!0});var Nbt=s(tW);tur=r(Nbt,"from_pretrained()"),Nbt.forEach(t),aur=r(aZ," class method or the "),aW=n(aZ,"A",{href:!0});var jbt=s(aW);nur=r(jbt,"from_config()"),jbt.forEach(t),sur=r(aZ,` class
method.`),aZ.forEach(t),lur=i(vl),o8=n(vl,"P",{});var UNe=s(o8);iur=r(UNe,"This class cannot be instantiated directly using "),fbe=n(UNe,"CODE",{});var Dbt=s(fbe);dur=r(Dbt,"__init__()"),Dbt.forEach(t),cur=r(UNe," (throws an error)."),UNe.forEach(t),fur=i(vl),$t=n(vl,"DIV",{class:!0});var ow=s($t);T(r8.$$.fragment,ow),mur=i(ow),mbe=n(ow,"P",{});var Gbt=s(mbe);gur=r(Gbt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Gbt.forEach(t),hur=i(ow),oc=n(ow,"P",{});var nZ=s(oc);pur=r(nZ,`Note:
Loading a model from its configuration file does `),gbe=n(nZ,"STRONG",{});var Obt=s(gbe);uur=r(Obt,"not"),Obt.forEach(t),_ur=r(nZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),nW=n(nZ,"A",{href:!0});var Vbt=s(nW);bur=r(Vbt,"from_pretrained()"),Vbt.forEach(t),vur=r(nZ," to load the model weights."),nZ.forEach(t),Fur=i(ow),T($7.$$.fragment,ow),ow.forEach(t),Tur=i(vl),$r=n(vl,"DIV",{class:!0});var Fl=s($r);T(t8.$$.fragment,Fl),Mur=i(Fl),hbe=n(Fl,"P",{});var Xbt=s(hbe);Eur=r(Xbt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Xbt.forEach(t),Cur=i(Fl),tn=n(Fl,"P",{});var rw=s(tn);wur=r(rw,"The model class to instantiate is selected based on the "),pbe=n(rw,"CODE",{});var zbt=s(pbe);Aur=r(zbt,"model_type"),zbt.forEach(t),yur=r(rw,` property of the config object (either
passed as an argument or loaded from `),ube=n(rw,"CODE",{});var Qbt=s(ube);Lur=r(Qbt,"pretrained_model_name_or_path"),Qbt.forEach(t),xur=r(rw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_be=n(rw,"CODE",{});var Wbt=s(_be);$ur=r(Wbt,"pretrained_model_name_or_path"),Wbt.forEach(t),kur=r(rw,":"),rw.forEach(t),Sur=i(Fl),ye=n(Fl,"UL",{});var Re=s(ye);k7=n(Re,"LI",{});var Dke=s(k7);bbe=n(Dke,"STRONG",{});var Hbt=s(bbe);Rur=r(Hbt,"bart"),Hbt.forEach(t),Bur=r(Dke," \u2014 "),sW=n(Dke,"A",{href:!0});var Ubt=s(sW);Pur=r(Ubt,"TFBartForConditionalGeneration"),Ubt.forEach(t),Iur=r(Dke," (BART model)"),Dke.forEach(t),qur=i(Re),S7=n(Re,"LI",{});var Gke=s(S7);vbe=n(Gke,"STRONG",{});var Jbt=s(vbe);Nur=r(Jbt,"blenderbot"),Jbt.forEach(t),jur=r(Gke," \u2014 "),lW=n(Gke,"A",{href:!0});var Ybt=s(lW);Dur=r(Ybt,"TFBlenderbotForConditionalGeneration"),Ybt.forEach(t),Gur=r(Gke," (Blenderbot model)"),Gke.forEach(t),Our=i(Re),R7=n(Re,"LI",{});var Oke=s(R7);Fbe=n(Oke,"STRONG",{});var Kbt=s(Fbe);Vur=r(Kbt,"blenderbot-small"),Kbt.forEach(t),Xur=r(Oke," \u2014 "),iW=n(Oke,"A",{href:!0});var Zbt=s(iW);zur=r(Zbt,"TFBlenderbotSmallForConditionalGeneration"),Zbt.forEach(t),Qur=r(Oke," (BlenderbotSmall model)"),Oke.forEach(t),Wur=i(Re),B7=n(Re,"LI",{});var Vke=s(B7);Tbe=n(Vke,"STRONG",{});var evt=s(Tbe);Hur=r(evt,"encoder-decoder"),evt.forEach(t),Uur=r(Vke," \u2014 "),dW=n(Vke,"A",{href:!0});var ovt=s(dW);Jur=r(ovt,"TFEncoderDecoderModel"),ovt.forEach(t),Yur=r(Vke," (Encoder decoder model)"),Vke.forEach(t),Kur=i(Re),P7=n(Re,"LI",{});var Xke=s(P7);Mbe=n(Xke,"STRONG",{});var rvt=s(Mbe);Zur=r(rvt,"led"),rvt.forEach(t),e_r=r(Xke," \u2014 "),cW=n(Xke,"A",{href:!0});var tvt=s(cW);o_r=r(tvt,"TFLEDForConditionalGeneration"),tvt.forEach(t),r_r=r(Xke," (LED model)"),Xke.forEach(t),t_r=i(Re),I7=n(Re,"LI",{});var zke=s(I7);Ebe=n(zke,"STRONG",{});var avt=s(Ebe);a_r=r(avt,"marian"),avt.forEach(t),n_r=r(zke," \u2014 "),fW=n(zke,"A",{href:!0});var nvt=s(fW);s_r=r(nvt,"TFMarianMTModel"),nvt.forEach(t),l_r=r(zke," (Marian model)"),zke.forEach(t),i_r=i(Re),q7=n(Re,"LI",{});var Qke=s(q7);Cbe=n(Qke,"STRONG",{});var svt=s(Cbe);d_r=r(svt,"mbart"),svt.forEach(t),c_r=r(Qke," \u2014 "),mW=n(Qke,"A",{href:!0});var lvt=s(mW);f_r=r(lvt,"TFMBartForConditionalGeneration"),lvt.forEach(t),m_r=r(Qke," (mBART model)"),Qke.forEach(t),g_r=i(Re),N7=n(Re,"LI",{});var Wke=s(N7);wbe=n(Wke,"STRONG",{});var ivt=s(wbe);h_r=r(ivt,"mt5"),ivt.forEach(t),p_r=r(Wke," \u2014 "),gW=n(Wke,"A",{href:!0});var dvt=s(gW);u_r=r(dvt,"TFMT5ForConditionalGeneration"),dvt.forEach(t),__r=r(Wke," (mT5 model)"),Wke.forEach(t),b_r=i(Re),j7=n(Re,"LI",{});var Hke=s(j7);Abe=n(Hke,"STRONG",{});var cvt=s(Abe);v_r=r(cvt,"pegasus"),cvt.forEach(t),F_r=r(Hke," \u2014 "),hW=n(Hke,"A",{href:!0});var fvt=s(hW);T_r=r(fvt,"TFPegasusForConditionalGeneration"),fvt.forEach(t),M_r=r(Hke," (Pegasus model)"),Hke.forEach(t),E_r=i(Re),D7=n(Re,"LI",{});var Uke=s(D7);ybe=n(Uke,"STRONG",{});var mvt=s(ybe);C_r=r(mvt,"t5"),mvt.forEach(t),w_r=r(Uke," \u2014 "),pW=n(Uke,"A",{href:!0});var gvt=s(pW);A_r=r(gvt,"TFT5ForConditionalGeneration"),gvt.forEach(t),y_r=r(Uke," (T5 model)"),Uke.forEach(t),Re.forEach(t),L_r=i(Fl),T(G7.$$.fragment,Fl),Fl.forEach(t),vl.forEach(t),XIe=i(f),rc=n(f,"H2",{class:!0});var JNe=s(rc);O7=n(JNe,"A",{id:!0,class:!0,href:!0});var hvt=s(O7);Lbe=n(hvt,"SPAN",{});var pvt=s(Lbe);T(a8.$$.fragment,pvt),pvt.forEach(t),hvt.forEach(t),x_r=i(JNe),xbe=n(JNe,"SPAN",{});var uvt=s(xbe);$_r=r(uvt,"TFAutoModelForSequenceClassification"),uvt.forEach(t),JNe.forEach(t),zIe=i(f),tr=n(f,"DIV",{class:!0});var Tl=s(tr);T(n8.$$.fragment,Tl),k_r=i(Tl),tc=n(Tl,"P",{});var sZ=s(tc);S_r=r(sZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),uW=n(sZ,"A",{href:!0});var _vt=s(uW);R_r=r(_vt,"from_pretrained()"),_vt.forEach(t),B_r=r(sZ," class method or the "),_W=n(sZ,"A",{href:!0});var bvt=s(_W);P_r=r(bvt,"from_config()"),bvt.forEach(t),I_r=r(sZ,` class
method.`),sZ.forEach(t),q_r=i(Tl),s8=n(Tl,"P",{});var YNe=s(s8);N_r=r(YNe,"This class cannot be instantiated directly using "),$be=n(YNe,"CODE",{});var vvt=s($be);j_r=r(vvt,"__init__()"),vvt.forEach(t),D_r=r(YNe," (throws an error)."),YNe.forEach(t),G_r=i(Tl),kt=n(Tl,"DIV",{class:!0});var tw=s(kt);T(l8.$$.fragment,tw),O_r=i(tw),kbe=n(tw,"P",{});var Fvt=s(kbe);V_r=r(Fvt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Fvt.forEach(t),X_r=i(tw),ac=n(tw,"P",{});var lZ=s(ac);z_r=r(lZ,`Note:
Loading a model from its configuration file does `),Sbe=n(lZ,"STRONG",{});var Tvt=s(Sbe);Q_r=r(Tvt,"not"),Tvt.forEach(t),W_r=r(lZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),bW=n(lZ,"A",{href:!0});var Mvt=s(bW);H_r=r(Mvt,"from_pretrained()"),Mvt.forEach(t),U_r=r(lZ," to load the model weights."),lZ.forEach(t),J_r=i(tw),T(V7.$$.fragment,tw),tw.forEach(t),Y_r=i(Tl),kr=n(Tl,"DIV",{class:!0});var Ml=s(kr);T(i8.$$.fragment,Ml),K_r=i(Ml),Rbe=n(Ml,"P",{});var Evt=s(Rbe);Z_r=r(Evt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Evt.forEach(t),e2r=i(Ml),an=n(Ml,"P",{});var aw=s(an);o2r=r(aw,"The model class to instantiate is selected based on the "),Bbe=n(aw,"CODE",{});var Cvt=s(Bbe);r2r=r(Cvt,"model_type"),Cvt.forEach(t),t2r=r(aw,` property of the config object (either
passed as an argument or loaded from `),Pbe=n(aw,"CODE",{});var wvt=s(Pbe);a2r=r(wvt,"pretrained_model_name_or_path"),wvt.forEach(t),n2r=r(aw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ibe=n(aw,"CODE",{});var Avt=s(Ibe);s2r=r(Avt,"pretrained_model_name_or_path"),Avt.forEach(t),l2r=r(aw,":"),aw.forEach(t),i2r=i(Ml),Z=n(Ml,"UL",{});var te=s(Z);X7=n(te,"LI",{});var Jke=s(X7);qbe=n(Jke,"STRONG",{});var yvt=s(qbe);d2r=r(yvt,"albert"),yvt.forEach(t),c2r=r(Jke," \u2014 "),vW=n(Jke,"A",{href:!0});var Lvt=s(vW);f2r=r(Lvt,"TFAlbertForSequenceClassification"),Lvt.forEach(t),m2r=r(Jke," (ALBERT model)"),Jke.forEach(t),g2r=i(te),z7=n(te,"LI",{});var Yke=s(z7);Nbe=n(Yke,"STRONG",{});var xvt=s(Nbe);h2r=r(xvt,"bert"),xvt.forEach(t),p2r=r(Yke," \u2014 "),FW=n(Yke,"A",{href:!0});var $vt=s(FW);u2r=r($vt,"TFBertForSequenceClassification"),$vt.forEach(t),_2r=r(Yke," (BERT model)"),Yke.forEach(t),b2r=i(te),Q7=n(te,"LI",{});var Kke=s(Q7);jbe=n(Kke,"STRONG",{});var kvt=s(jbe);v2r=r(kvt,"camembert"),kvt.forEach(t),F2r=r(Kke," \u2014 "),TW=n(Kke,"A",{href:!0});var Svt=s(TW);T2r=r(Svt,"TFCamembertForSequenceClassification"),Svt.forEach(t),M2r=r(Kke," (CamemBERT model)"),Kke.forEach(t),E2r=i(te),W7=n(te,"LI",{});var Zke=s(W7);Dbe=n(Zke,"STRONG",{});var Rvt=s(Dbe);C2r=r(Rvt,"convbert"),Rvt.forEach(t),w2r=r(Zke," \u2014 "),MW=n(Zke,"A",{href:!0});var Bvt=s(MW);A2r=r(Bvt,"TFConvBertForSequenceClassification"),Bvt.forEach(t),y2r=r(Zke," (ConvBERT model)"),Zke.forEach(t),L2r=i(te),H7=n(te,"LI",{});var eSe=s(H7);Gbe=n(eSe,"STRONG",{});var Pvt=s(Gbe);x2r=r(Pvt,"ctrl"),Pvt.forEach(t),$2r=r(eSe," \u2014 "),EW=n(eSe,"A",{href:!0});var Ivt=s(EW);k2r=r(Ivt,"TFCTRLForSequenceClassification"),Ivt.forEach(t),S2r=r(eSe," (CTRL model)"),eSe.forEach(t),R2r=i(te),U7=n(te,"LI",{});var oSe=s(U7);Obe=n(oSe,"STRONG",{});var qvt=s(Obe);B2r=r(qvt,"deberta"),qvt.forEach(t),P2r=r(oSe," \u2014 "),CW=n(oSe,"A",{href:!0});var Nvt=s(CW);I2r=r(Nvt,"TFDebertaForSequenceClassification"),Nvt.forEach(t),q2r=r(oSe," (DeBERTa model)"),oSe.forEach(t),N2r=i(te),J7=n(te,"LI",{});var rSe=s(J7);Vbe=n(rSe,"STRONG",{});var jvt=s(Vbe);j2r=r(jvt,"deberta-v2"),jvt.forEach(t),D2r=r(rSe," \u2014 "),wW=n(rSe,"A",{href:!0});var Dvt=s(wW);G2r=r(Dvt,"TFDebertaV2ForSequenceClassification"),Dvt.forEach(t),O2r=r(rSe," (DeBERTa-v2 model)"),rSe.forEach(t),V2r=i(te),Y7=n(te,"LI",{});var tSe=s(Y7);Xbe=n(tSe,"STRONG",{});var Gvt=s(Xbe);X2r=r(Gvt,"distilbert"),Gvt.forEach(t),z2r=r(tSe," \u2014 "),AW=n(tSe,"A",{href:!0});var Ovt=s(AW);Q2r=r(Ovt,"TFDistilBertForSequenceClassification"),Ovt.forEach(t),W2r=r(tSe," (DistilBERT model)"),tSe.forEach(t),H2r=i(te),K7=n(te,"LI",{});var aSe=s(K7);zbe=n(aSe,"STRONG",{});var Vvt=s(zbe);U2r=r(Vvt,"electra"),Vvt.forEach(t),J2r=r(aSe," \u2014 "),yW=n(aSe,"A",{href:!0});var Xvt=s(yW);Y2r=r(Xvt,"TFElectraForSequenceClassification"),Xvt.forEach(t),K2r=r(aSe," (ELECTRA model)"),aSe.forEach(t),Z2r=i(te),Z7=n(te,"LI",{});var nSe=s(Z7);Qbe=n(nSe,"STRONG",{});var zvt=s(Qbe);e1r=r(zvt,"flaubert"),zvt.forEach(t),o1r=r(nSe," \u2014 "),LW=n(nSe,"A",{href:!0});var Qvt=s(LW);r1r=r(Qvt,"TFFlaubertForSequenceClassification"),Qvt.forEach(t),t1r=r(nSe," (FlauBERT model)"),nSe.forEach(t),a1r=i(te),eM=n(te,"LI",{});var sSe=s(eM);Wbe=n(sSe,"STRONG",{});var Wvt=s(Wbe);n1r=r(Wvt,"funnel"),Wvt.forEach(t),s1r=r(sSe," \u2014 "),xW=n(sSe,"A",{href:!0});var Hvt=s(xW);l1r=r(Hvt,"TFFunnelForSequenceClassification"),Hvt.forEach(t),i1r=r(sSe," (Funnel Transformer model)"),sSe.forEach(t),d1r=i(te),oM=n(te,"LI",{});var lSe=s(oM);Hbe=n(lSe,"STRONG",{});var Uvt=s(Hbe);c1r=r(Uvt,"gpt2"),Uvt.forEach(t),f1r=r(lSe," \u2014 "),$W=n(lSe,"A",{href:!0});var Jvt=s($W);m1r=r(Jvt,"TFGPT2ForSequenceClassification"),Jvt.forEach(t),g1r=r(lSe," (OpenAI GPT-2 model)"),lSe.forEach(t),h1r=i(te),rM=n(te,"LI",{});var iSe=s(rM);Ube=n(iSe,"STRONG",{});var Yvt=s(Ube);p1r=r(Yvt,"gptj"),Yvt.forEach(t),u1r=r(iSe," \u2014 "),kW=n(iSe,"A",{href:!0});var Kvt=s(kW);_1r=r(Kvt,"TFGPTJForSequenceClassification"),Kvt.forEach(t),b1r=r(iSe," (GPT-J model)"),iSe.forEach(t),v1r=i(te),tM=n(te,"LI",{});var dSe=s(tM);Jbe=n(dSe,"STRONG",{});var Zvt=s(Jbe);F1r=r(Zvt,"layoutlm"),Zvt.forEach(t),T1r=r(dSe," \u2014 "),SW=n(dSe,"A",{href:!0});var eFt=s(SW);M1r=r(eFt,"TFLayoutLMForSequenceClassification"),eFt.forEach(t),E1r=r(dSe," (LayoutLM model)"),dSe.forEach(t),C1r=i(te),aM=n(te,"LI",{});var cSe=s(aM);Ybe=n(cSe,"STRONG",{});var oFt=s(Ybe);w1r=r(oFt,"longformer"),oFt.forEach(t),A1r=r(cSe," \u2014 "),RW=n(cSe,"A",{href:!0});var rFt=s(RW);y1r=r(rFt,"TFLongformerForSequenceClassification"),rFt.forEach(t),L1r=r(cSe," (Longformer model)"),cSe.forEach(t),x1r=i(te),nM=n(te,"LI",{});var fSe=s(nM);Kbe=n(fSe,"STRONG",{});var tFt=s(Kbe);$1r=r(tFt,"mobilebert"),tFt.forEach(t),k1r=r(fSe," \u2014 "),BW=n(fSe,"A",{href:!0});var aFt=s(BW);S1r=r(aFt,"TFMobileBertForSequenceClassification"),aFt.forEach(t),R1r=r(fSe," (MobileBERT model)"),fSe.forEach(t),B1r=i(te),sM=n(te,"LI",{});var mSe=s(sM);Zbe=n(mSe,"STRONG",{});var nFt=s(Zbe);P1r=r(nFt,"mpnet"),nFt.forEach(t),I1r=r(mSe," \u2014 "),PW=n(mSe,"A",{href:!0});var sFt=s(PW);q1r=r(sFt,"TFMPNetForSequenceClassification"),sFt.forEach(t),N1r=r(mSe," (MPNet model)"),mSe.forEach(t),j1r=i(te),lM=n(te,"LI",{});var gSe=s(lM);eve=n(gSe,"STRONG",{});var lFt=s(eve);D1r=r(lFt,"openai-gpt"),lFt.forEach(t),G1r=r(gSe," \u2014 "),IW=n(gSe,"A",{href:!0});var iFt=s(IW);O1r=r(iFt,"TFOpenAIGPTForSequenceClassification"),iFt.forEach(t),V1r=r(gSe," (OpenAI GPT model)"),gSe.forEach(t),X1r=i(te),iM=n(te,"LI",{});var hSe=s(iM);ove=n(hSe,"STRONG",{});var dFt=s(ove);z1r=r(dFt,"rembert"),dFt.forEach(t),Q1r=r(hSe," \u2014 "),qW=n(hSe,"A",{href:!0});var cFt=s(qW);W1r=r(cFt,"TFRemBertForSequenceClassification"),cFt.forEach(t),H1r=r(hSe," (RemBERT model)"),hSe.forEach(t),U1r=i(te),dM=n(te,"LI",{});var pSe=s(dM);rve=n(pSe,"STRONG",{});var fFt=s(rve);J1r=r(fFt,"roberta"),fFt.forEach(t),Y1r=r(pSe," \u2014 "),NW=n(pSe,"A",{href:!0});var mFt=s(NW);K1r=r(mFt,"TFRobertaForSequenceClassification"),mFt.forEach(t),Z1r=r(pSe," (RoBERTa model)"),pSe.forEach(t),ebr=i(te),cM=n(te,"LI",{});var uSe=s(cM);tve=n(uSe,"STRONG",{});var gFt=s(tve);obr=r(gFt,"roformer"),gFt.forEach(t),rbr=r(uSe," \u2014 "),jW=n(uSe,"A",{href:!0});var hFt=s(jW);tbr=r(hFt,"TFRoFormerForSequenceClassification"),hFt.forEach(t),abr=r(uSe," (RoFormer model)"),uSe.forEach(t),nbr=i(te),fM=n(te,"LI",{});var _Se=s(fM);ave=n(_Se,"STRONG",{});var pFt=s(ave);sbr=r(pFt,"tapas"),pFt.forEach(t),lbr=r(_Se," \u2014 "),DW=n(_Se,"A",{href:!0});var uFt=s(DW);ibr=r(uFt,"TFTapasForSequenceClassification"),uFt.forEach(t),dbr=r(_Se," (TAPAS model)"),_Se.forEach(t),cbr=i(te),mM=n(te,"LI",{});var bSe=s(mM);nve=n(bSe,"STRONG",{});var _Ft=s(nve);fbr=r(_Ft,"transfo-xl"),_Ft.forEach(t),mbr=r(bSe," \u2014 "),GW=n(bSe,"A",{href:!0});var bFt=s(GW);gbr=r(bFt,"TFTransfoXLForSequenceClassification"),bFt.forEach(t),hbr=r(bSe," (Transformer-XL model)"),bSe.forEach(t),pbr=i(te),gM=n(te,"LI",{});var vSe=s(gM);sve=n(vSe,"STRONG",{});var vFt=s(sve);ubr=r(vFt,"xlm"),vFt.forEach(t),_br=r(vSe," \u2014 "),OW=n(vSe,"A",{href:!0});var FFt=s(OW);bbr=r(FFt,"TFXLMForSequenceClassification"),FFt.forEach(t),vbr=r(vSe," (XLM model)"),vSe.forEach(t),Fbr=i(te),hM=n(te,"LI",{});var FSe=s(hM);lve=n(FSe,"STRONG",{});var TFt=s(lve);Tbr=r(TFt,"xlm-roberta"),TFt.forEach(t),Mbr=r(FSe," \u2014 "),VW=n(FSe,"A",{href:!0});var MFt=s(VW);Ebr=r(MFt,"TFXLMRobertaForSequenceClassification"),MFt.forEach(t),Cbr=r(FSe," (XLM-RoBERTa model)"),FSe.forEach(t),wbr=i(te),pM=n(te,"LI",{});var TSe=s(pM);ive=n(TSe,"STRONG",{});var EFt=s(ive);Abr=r(EFt,"xlnet"),EFt.forEach(t),ybr=r(TSe," \u2014 "),XW=n(TSe,"A",{href:!0});var CFt=s(XW);Lbr=r(CFt,"TFXLNetForSequenceClassification"),CFt.forEach(t),xbr=r(TSe," (XLNet model)"),TSe.forEach(t),te.forEach(t),$br=i(Ml),T(uM.$$.fragment,Ml),Ml.forEach(t),Tl.forEach(t),QIe=i(f),nc=n(f,"H2",{class:!0});var KNe=s(nc);_M=n(KNe,"A",{id:!0,class:!0,href:!0});var wFt=s(_M);dve=n(wFt,"SPAN",{});var AFt=s(dve);T(d8.$$.fragment,AFt),AFt.forEach(t),wFt.forEach(t),kbr=i(KNe),cve=n(KNe,"SPAN",{});var yFt=s(cve);Sbr=r(yFt,"TFAutoModelForMultipleChoice"),yFt.forEach(t),KNe.forEach(t),WIe=i(f),ar=n(f,"DIV",{class:!0});var El=s(ar);T(c8.$$.fragment,El),Rbr=i(El),sc=n(El,"P",{});var iZ=s(sc);Bbr=r(iZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),zW=n(iZ,"A",{href:!0});var LFt=s(zW);Pbr=r(LFt,"from_pretrained()"),LFt.forEach(t),Ibr=r(iZ," class method or the "),QW=n(iZ,"A",{href:!0});var xFt=s(QW);qbr=r(xFt,"from_config()"),xFt.forEach(t),Nbr=r(iZ,` class
method.`),iZ.forEach(t),jbr=i(El),f8=n(El,"P",{});var ZNe=s(f8);Dbr=r(ZNe,"This class cannot be instantiated directly using "),fve=n(ZNe,"CODE",{});var $Ft=s(fve);Gbr=r($Ft,"__init__()"),$Ft.forEach(t),Obr=r(ZNe," (throws an error)."),ZNe.forEach(t),Vbr=i(El),St=n(El,"DIV",{class:!0});var nw=s(St);T(m8.$$.fragment,nw),Xbr=i(nw),mve=n(nw,"P",{});var kFt=s(mve);zbr=r(kFt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),kFt.forEach(t),Qbr=i(nw),lc=n(nw,"P",{});var dZ=s(lc);Wbr=r(dZ,`Note:
Loading a model from its configuration file does `),gve=n(dZ,"STRONG",{});var SFt=s(gve);Hbr=r(SFt,"not"),SFt.forEach(t),Ubr=r(dZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),WW=n(dZ,"A",{href:!0});var RFt=s(WW);Jbr=r(RFt,"from_pretrained()"),RFt.forEach(t),Ybr=r(dZ," to load the model weights."),dZ.forEach(t),Kbr=i(nw),T(bM.$$.fragment,nw),nw.forEach(t),Zbr=i(El),Sr=n(El,"DIV",{class:!0});var Cl=s(Sr);T(g8.$$.fragment,Cl),evr=i(Cl),hve=n(Cl,"P",{});var BFt=s(hve);ovr=r(BFt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),BFt.forEach(t),rvr=i(Cl),nn=n(Cl,"P",{});var sw=s(nn);tvr=r(sw,"The model class to instantiate is selected based on the "),pve=n(sw,"CODE",{});var PFt=s(pve);avr=r(PFt,"model_type"),PFt.forEach(t),nvr=r(sw,` property of the config object (either
passed as an argument or loaded from `),uve=n(sw,"CODE",{});var IFt=s(uve);svr=r(IFt,"pretrained_model_name_or_path"),IFt.forEach(t),lvr=r(sw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_ve=n(sw,"CODE",{});var qFt=s(_ve);ivr=r(qFt,"pretrained_model_name_or_path"),qFt.forEach(t),dvr=r(sw,":"),sw.forEach(t),cvr=i(Cl),pe=n(Cl,"UL",{});var _e=s(pe);vM=n(_e,"LI",{});var MSe=s(vM);bve=n(MSe,"STRONG",{});var NFt=s(bve);fvr=r(NFt,"albert"),NFt.forEach(t),mvr=r(MSe," \u2014 "),HW=n(MSe,"A",{href:!0});var jFt=s(HW);gvr=r(jFt,"TFAlbertForMultipleChoice"),jFt.forEach(t),hvr=r(MSe," (ALBERT model)"),MSe.forEach(t),pvr=i(_e),FM=n(_e,"LI",{});var ESe=s(FM);vve=n(ESe,"STRONG",{});var DFt=s(vve);uvr=r(DFt,"bert"),DFt.forEach(t),_vr=r(ESe," \u2014 "),UW=n(ESe,"A",{href:!0});var GFt=s(UW);bvr=r(GFt,"TFBertForMultipleChoice"),GFt.forEach(t),vvr=r(ESe," (BERT model)"),ESe.forEach(t),Fvr=i(_e),TM=n(_e,"LI",{});var CSe=s(TM);Fve=n(CSe,"STRONG",{});var OFt=s(Fve);Tvr=r(OFt,"camembert"),OFt.forEach(t),Mvr=r(CSe," \u2014 "),JW=n(CSe,"A",{href:!0});var VFt=s(JW);Evr=r(VFt,"TFCamembertForMultipleChoice"),VFt.forEach(t),Cvr=r(CSe," (CamemBERT model)"),CSe.forEach(t),wvr=i(_e),MM=n(_e,"LI",{});var wSe=s(MM);Tve=n(wSe,"STRONG",{});var XFt=s(Tve);Avr=r(XFt,"convbert"),XFt.forEach(t),yvr=r(wSe," \u2014 "),YW=n(wSe,"A",{href:!0});var zFt=s(YW);Lvr=r(zFt,"TFConvBertForMultipleChoice"),zFt.forEach(t),xvr=r(wSe," (ConvBERT model)"),wSe.forEach(t),$vr=i(_e),EM=n(_e,"LI",{});var ASe=s(EM);Mve=n(ASe,"STRONG",{});var QFt=s(Mve);kvr=r(QFt,"distilbert"),QFt.forEach(t),Svr=r(ASe," \u2014 "),KW=n(ASe,"A",{href:!0});var WFt=s(KW);Rvr=r(WFt,"TFDistilBertForMultipleChoice"),WFt.forEach(t),Bvr=r(ASe," (DistilBERT model)"),ASe.forEach(t),Pvr=i(_e),CM=n(_e,"LI",{});var ySe=s(CM);Eve=n(ySe,"STRONG",{});var HFt=s(Eve);Ivr=r(HFt,"electra"),HFt.forEach(t),qvr=r(ySe," \u2014 "),ZW=n(ySe,"A",{href:!0});var UFt=s(ZW);Nvr=r(UFt,"TFElectraForMultipleChoice"),UFt.forEach(t),jvr=r(ySe," (ELECTRA model)"),ySe.forEach(t),Dvr=i(_e),wM=n(_e,"LI",{});var LSe=s(wM);Cve=n(LSe,"STRONG",{});var JFt=s(Cve);Gvr=r(JFt,"flaubert"),JFt.forEach(t),Ovr=r(LSe," \u2014 "),eH=n(LSe,"A",{href:!0});var YFt=s(eH);Vvr=r(YFt,"TFFlaubertForMultipleChoice"),YFt.forEach(t),Xvr=r(LSe," (FlauBERT model)"),LSe.forEach(t),zvr=i(_e),AM=n(_e,"LI",{});var xSe=s(AM);wve=n(xSe,"STRONG",{});var KFt=s(wve);Qvr=r(KFt,"funnel"),KFt.forEach(t),Wvr=r(xSe," \u2014 "),oH=n(xSe,"A",{href:!0});var ZFt=s(oH);Hvr=r(ZFt,"TFFunnelForMultipleChoice"),ZFt.forEach(t),Uvr=r(xSe," (Funnel Transformer model)"),xSe.forEach(t),Jvr=i(_e),yM=n(_e,"LI",{});var $Se=s(yM);Ave=n($Se,"STRONG",{});var e0t=s(Ave);Yvr=r(e0t,"longformer"),e0t.forEach(t),Kvr=r($Se," \u2014 "),rH=n($Se,"A",{href:!0});var o0t=s(rH);Zvr=r(o0t,"TFLongformerForMultipleChoice"),o0t.forEach(t),eFr=r($Se," (Longformer model)"),$Se.forEach(t),oFr=i(_e),LM=n(_e,"LI",{});var kSe=s(LM);yve=n(kSe,"STRONG",{});var r0t=s(yve);rFr=r(r0t,"mobilebert"),r0t.forEach(t),tFr=r(kSe," \u2014 "),tH=n(kSe,"A",{href:!0});var t0t=s(tH);aFr=r(t0t,"TFMobileBertForMultipleChoice"),t0t.forEach(t),nFr=r(kSe," (MobileBERT model)"),kSe.forEach(t),sFr=i(_e),xM=n(_e,"LI",{});var SSe=s(xM);Lve=n(SSe,"STRONG",{});var a0t=s(Lve);lFr=r(a0t,"mpnet"),a0t.forEach(t),iFr=r(SSe," \u2014 "),aH=n(SSe,"A",{href:!0});var n0t=s(aH);dFr=r(n0t,"TFMPNetForMultipleChoice"),n0t.forEach(t),cFr=r(SSe," (MPNet model)"),SSe.forEach(t),fFr=i(_e),$M=n(_e,"LI",{});var RSe=s($M);xve=n(RSe,"STRONG",{});var s0t=s(xve);mFr=r(s0t,"rembert"),s0t.forEach(t),gFr=r(RSe," \u2014 "),nH=n(RSe,"A",{href:!0});var l0t=s(nH);hFr=r(l0t,"TFRemBertForMultipleChoice"),l0t.forEach(t),pFr=r(RSe," (RemBERT model)"),RSe.forEach(t),uFr=i(_e),kM=n(_e,"LI",{});var BSe=s(kM);$ve=n(BSe,"STRONG",{});var i0t=s($ve);_Fr=r(i0t,"roberta"),i0t.forEach(t),bFr=r(BSe," \u2014 "),sH=n(BSe,"A",{href:!0});var d0t=s(sH);vFr=r(d0t,"TFRobertaForMultipleChoice"),d0t.forEach(t),FFr=r(BSe," (RoBERTa model)"),BSe.forEach(t),TFr=i(_e),SM=n(_e,"LI",{});var PSe=s(SM);kve=n(PSe,"STRONG",{});var c0t=s(kve);MFr=r(c0t,"roformer"),c0t.forEach(t),EFr=r(PSe," \u2014 "),lH=n(PSe,"A",{href:!0});var f0t=s(lH);CFr=r(f0t,"TFRoFormerForMultipleChoice"),f0t.forEach(t),wFr=r(PSe," (RoFormer model)"),PSe.forEach(t),AFr=i(_e),RM=n(_e,"LI",{});var ISe=s(RM);Sve=n(ISe,"STRONG",{});var m0t=s(Sve);yFr=r(m0t,"xlm"),m0t.forEach(t),LFr=r(ISe," \u2014 "),iH=n(ISe,"A",{href:!0});var g0t=s(iH);xFr=r(g0t,"TFXLMForMultipleChoice"),g0t.forEach(t),$Fr=r(ISe," (XLM model)"),ISe.forEach(t),kFr=i(_e),BM=n(_e,"LI",{});var qSe=s(BM);Rve=n(qSe,"STRONG",{});var h0t=s(Rve);SFr=r(h0t,"xlm-roberta"),h0t.forEach(t),RFr=r(qSe," \u2014 "),dH=n(qSe,"A",{href:!0});var p0t=s(dH);BFr=r(p0t,"TFXLMRobertaForMultipleChoice"),p0t.forEach(t),PFr=r(qSe," (XLM-RoBERTa model)"),qSe.forEach(t),IFr=i(_e),PM=n(_e,"LI",{});var NSe=s(PM);Bve=n(NSe,"STRONG",{});var u0t=s(Bve);qFr=r(u0t,"xlnet"),u0t.forEach(t),NFr=r(NSe," \u2014 "),cH=n(NSe,"A",{href:!0});var _0t=s(cH);jFr=r(_0t,"TFXLNetForMultipleChoice"),_0t.forEach(t),DFr=r(NSe," (XLNet model)"),NSe.forEach(t),_e.forEach(t),GFr=i(Cl),T(IM.$$.fragment,Cl),Cl.forEach(t),El.forEach(t),HIe=i(f),ic=n(f,"H2",{class:!0});var eje=s(ic);qM=n(eje,"A",{id:!0,class:!0,href:!0});var b0t=s(qM);Pve=n(b0t,"SPAN",{});var v0t=s(Pve);T(h8.$$.fragment,v0t),v0t.forEach(t),b0t.forEach(t),OFr=i(eje),Ive=n(eje,"SPAN",{});var F0t=s(Ive);VFr=r(F0t,"TFAutoModelForNextSentencePrediction"),F0t.forEach(t),eje.forEach(t),UIe=i(f),nr=n(f,"DIV",{class:!0});var wl=s(nr);T(p8.$$.fragment,wl),XFr=i(wl),dc=n(wl,"P",{});var cZ=s(dc);zFr=r(cZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),fH=n(cZ,"A",{href:!0});var T0t=s(fH);QFr=r(T0t,"from_pretrained()"),T0t.forEach(t),WFr=r(cZ," class method or the "),mH=n(cZ,"A",{href:!0});var M0t=s(mH);HFr=r(M0t,"from_config()"),M0t.forEach(t),UFr=r(cZ,` class
method.`),cZ.forEach(t),JFr=i(wl),u8=n(wl,"P",{});var oje=s(u8);YFr=r(oje,"This class cannot be instantiated directly using "),qve=n(oje,"CODE",{});var E0t=s(qve);KFr=r(E0t,"__init__()"),E0t.forEach(t),ZFr=r(oje," (throws an error)."),oje.forEach(t),e0r=i(wl),Rt=n(wl,"DIV",{class:!0});var lw=s(Rt);T(_8.$$.fragment,lw),o0r=i(lw),Nve=n(lw,"P",{});var C0t=s(Nve);r0r=r(C0t,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),C0t.forEach(t),t0r=i(lw),cc=n(lw,"P",{});var fZ=s(cc);a0r=r(fZ,`Note:
Loading a model from its configuration file does `),jve=n(fZ,"STRONG",{});var w0t=s(jve);n0r=r(w0t,"not"),w0t.forEach(t),s0r=r(fZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),gH=n(fZ,"A",{href:!0});var A0t=s(gH);l0r=r(A0t,"from_pretrained()"),A0t.forEach(t),i0r=r(fZ," to load the model weights."),fZ.forEach(t),d0r=i(lw),T(NM.$$.fragment,lw),lw.forEach(t),c0r=i(wl),Rr=n(wl,"DIV",{class:!0});var Al=s(Rr);T(b8.$$.fragment,Al),f0r=i(Al),Dve=n(Al,"P",{});var y0t=s(Dve);m0r=r(y0t,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),y0t.forEach(t),g0r=i(Al),sn=n(Al,"P",{});var iw=s(sn);h0r=r(iw,"The model class to instantiate is selected based on the "),Gve=n(iw,"CODE",{});var L0t=s(Gve);p0r=r(L0t,"model_type"),L0t.forEach(t),u0r=r(iw,` property of the config object (either
passed as an argument or loaded from `),Ove=n(iw,"CODE",{});var x0t=s(Ove);_0r=r(x0t,"pretrained_model_name_or_path"),x0t.forEach(t),b0r=r(iw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vve=n(iw,"CODE",{});var $0t=s(Vve);v0r=r($0t,"pretrained_model_name_or_path"),$0t.forEach(t),F0r=r(iw,":"),iw.forEach(t),T0r=i(Al),v8=n(Al,"UL",{});var rje=s(v8);jM=n(rje,"LI",{});var jSe=s(jM);Xve=n(jSe,"STRONG",{});var k0t=s(Xve);M0r=r(k0t,"bert"),k0t.forEach(t),E0r=r(jSe," \u2014 "),hH=n(jSe,"A",{href:!0});var S0t=s(hH);C0r=r(S0t,"TFBertForNextSentencePrediction"),S0t.forEach(t),w0r=r(jSe," (BERT model)"),jSe.forEach(t),A0r=i(rje),DM=n(rje,"LI",{});var DSe=s(DM);zve=n(DSe,"STRONG",{});var R0t=s(zve);y0r=r(R0t,"mobilebert"),R0t.forEach(t),L0r=r(DSe," \u2014 "),pH=n(DSe,"A",{href:!0});var B0t=s(pH);x0r=r(B0t,"TFMobileBertForNextSentencePrediction"),B0t.forEach(t),$0r=r(DSe," (MobileBERT model)"),DSe.forEach(t),rje.forEach(t),k0r=i(Al),T(GM.$$.fragment,Al),Al.forEach(t),wl.forEach(t),JIe=i(f),fc=n(f,"H2",{class:!0});var tje=s(fc);OM=n(tje,"A",{id:!0,class:!0,href:!0});var P0t=s(OM);Qve=n(P0t,"SPAN",{});var I0t=s(Qve);T(F8.$$.fragment,I0t),I0t.forEach(t),P0t.forEach(t),S0r=i(tje),Wve=n(tje,"SPAN",{});var q0t=s(Wve);R0r=r(q0t,"TFAutoModelForTableQuestionAnswering"),q0t.forEach(t),tje.forEach(t),YIe=i(f),sr=n(f,"DIV",{class:!0});var yl=s(sr);T(T8.$$.fragment,yl),B0r=i(yl),mc=n(yl,"P",{});var mZ=s(mc);P0r=r(mZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),uH=n(mZ,"A",{href:!0});var N0t=s(uH);I0r=r(N0t,"from_pretrained()"),N0t.forEach(t),q0r=r(mZ," class method or the "),_H=n(mZ,"A",{href:!0});var j0t=s(_H);N0r=r(j0t,"from_config()"),j0t.forEach(t),j0r=r(mZ,` class
method.`),mZ.forEach(t),D0r=i(yl),M8=n(yl,"P",{});var aje=s(M8);G0r=r(aje,"This class cannot be instantiated directly using "),Hve=n(aje,"CODE",{});var D0t=s(Hve);O0r=r(D0t,"__init__()"),D0t.forEach(t),V0r=r(aje," (throws an error)."),aje.forEach(t),X0r=i(yl),Bt=n(yl,"DIV",{class:!0});var dw=s(Bt);T(E8.$$.fragment,dw),z0r=i(dw),Uve=n(dw,"P",{});var G0t=s(Uve);Q0r=r(G0t,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),G0t.forEach(t),W0r=i(dw),gc=n(dw,"P",{});var gZ=s(gc);H0r=r(gZ,`Note:
Loading a model from its configuration file does `),Jve=n(gZ,"STRONG",{});var O0t=s(Jve);U0r=r(O0t,"not"),O0t.forEach(t),J0r=r(gZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),bH=n(gZ,"A",{href:!0});var V0t=s(bH);Y0r=r(V0t,"from_pretrained()"),V0t.forEach(t),K0r=r(gZ," to load the model weights."),gZ.forEach(t),Z0r=i(dw),T(VM.$$.fragment,dw),dw.forEach(t),e6r=i(yl),Br=n(yl,"DIV",{class:!0});var Ll=s(Br);T(C8.$$.fragment,Ll),o6r=i(Ll),Yve=n(Ll,"P",{});var X0t=s(Yve);r6r=r(X0t,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),X0t.forEach(t),t6r=i(Ll),ln=n(Ll,"P",{});var cw=s(ln);a6r=r(cw,"The model class to instantiate is selected based on the "),Kve=n(cw,"CODE",{});var z0t=s(Kve);n6r=r(z0t,"model_type"),z0t.forEach(t),s6r=r(cw,` property of the config object (either
passed as an argument or loaded from `),Zve=n(cw,"CODE",{});var Q0t=s(Zve);l6r=r(Q0t,"pretrained_model_name_or_path"),Q0t.forEach(t),i6r=r(cw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),eFe=n(cw,"CODE",{});var W0t=s(eFe);d6r=r(W0t,"pretrained_model_name_or_path"),W0t.forEach(t),c6r=r(cw,":"),cw.forEach(t),f6r=i(Ll),oFe=n(Ll,"UL",{});var H0t=s(oFe);XM=n(H0t,"LI",{});var GSe=s(XM);rFe=n(GSe,"STRONG",{});var U0t=s(rFe);m6r=r(U0t,"tapas"),U0t.forEach(t),g6r=r(GSe," \u2014 "),vH=n(GSe,"A",{href:!0});var J0t=s(vH);h6r=r(J0t,"TFTapasForQuestionAnswering"),J0t.forEach(t),p6r=r(GSe," (TAPAS model)"),GSe.forEach(t),H0t.forEach(t),u6r=i(Ll),T(zM.$$.fragment,Ll),Ll.forEach(t),yl.forEach(t),KIe=i(f),hc=n(f,"H2",{class:!0});var nje=s(hc);QM=n(nje,"A",{id:!0,class:!0,href:!0});var Y0t=s(QM);tFe=n(Y0t,"SPAN",{});var K0t=s(tFe);T(w8.$$.fragment,K0t),K0t.forEach(t),Y0t.forEach(t),_6r=i(nje),aFe=n(nje,"SPAN",{});var Z0t=s(aFe);b6r=r(Z0t,"TFAutoModelForTokenClassification"),Z0t.forEach(t),nje.forEach(t),ZIe=i(f),lr=n(f,"DIV",{class:!0});var xl=s(lr);T(A8.$$.fragment,xl),v6r=i(xl),pc=n(xl,"P",{});var hZ=s(pc);F6r=r(hZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),FH=n(hZ,"A",{href:!0});var e6t=s(FH);T6r=r(e6t,"from_pretrained()"),e6t.forEach(t),M6r=r(hZ," class method or the "),TH=n(hZ,"A",{href:!0});var o6t=s(TH);E6r=r(o6t,"from_config()"),o6t.forEach(t),C6r=r(hZ,` class
method.`),hZ.forEach(t),w6r=i(xl),y8=n(xl,"P",{});var sje=s(y8);A6r=r(sje,"This class cannot be instantiated directly using "),nFe=n(sje,"CODE",{});var r6t=s(nFe);y6r=r(r6t,"__init__()"),r6t.forEach(t),L6r=r(sje," (throws an error)."),sje.forEach(t),x6r=i(xl),Pt=n(xl,"DIV",{class:!0});var fw=s(Pt);T(L8.$$.fragment,fw),$6r=i(fw),sFe=n(fw,"P",{});var t6t=s(sFe);k6r=r(t6t,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),t6t.forEach(t),S6r=i(fw),uc=n(fw,"P",{});var pZ=s(uc);R6r=r(pZ,`Note:
Loading a model from its configuration file does `),lFe=n(pZ,"STRONG",{});var a6t=s(lFe);B6r=r(a6t,"not"),a6t.forEach(t),P6r=r(pZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),MH=n(pZ,"A",{href:!0});var n6t=s(MH);I6r=r(n6t,"from_pretrained()"),n6t.forEach(t),q6r=r(pZ," to load the model weights."),pZ.forEach(t),N6r=i(fw),T(WM.$$.fragment,fw),fw.forEach(t),j6r=i(xl),Pr=n(xl,"DIV",{class:!0});var $l=s(Pr);T(x8.$$.fragment,$l),D6r=i($l),iFe=n($l,"P",{});var s6t=s(iFe);G6r=r(s6t,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),s6t.forEach(t),O6r=i($l),dn=n($l,"P",{});var mw=s(dn);V6r=r(mw,"The model class to instantiate is selected based on the "),dFe=n(mw,"CODE",{});var l6t=s(dFe);X6r=r(l6t,"model_type"),l6t.forEach(t),z6r=r(mw,` property of the config object (either
passed as an argument or loaded from `),cFe=n(mw,"CODE",{});var i6t=s(cFe);Q6r=r(i6t,"pretrained_model_name_or_path"),i6t.forEach(t),W6r=r(mw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fFe=n(mw,"CODE",{});var d6t=s(fFe);H6r=r(d6t,"pretrained_model_name_or_path"),d6t.forEach(t),U6r=r(mw,":"),mw.forEach(t),J6r=i($l),de=n($l,"UL",{});var me=s(de);HM=n(me,"LI",{});var OSe=s(HM);mFe=n(OSe,"STRONG",{});var c6t=s(mFe);Y6r=r(c6t,"albert"),c6t.forEach(t),K6r=r(OSe," \u2014 "),EH=n(OSe,"A",{href:!0});var f6t=s(EH);Z6r=r(f6t,"TFAlbertForTokenClassification"),f6t.forEach(t),eTr=r(OSe," (ALBERT model)"),OSe.forEach(t),oTr=i(me),UM=n(me,"LI",{});var VSe=s(UM);gFe=n(VSe,"STRONG",{});var m6t=s(gFe);rTr=r(m6t,"bert"),m6t.forEach(t),tTr=r(VSe," \u2014 "),CH=n(VSe,"A",{href:!0});var g6t=s(CH);aTr=r(g6t,"TFBertForTokenClassification"),g6t.forEach(t),nTr=r(VSe," (BERT model)"),VSe.forEach(t),sTr=i(me),JM=n(me,"LI",{});var XSe=s(JM);hFe=n(XSe,"STRONG",{});var h6t=s(hFe);lTr=r(h6t,"camembert"),h6t.forEach(t),iTr=r(XSe," \u2014 "),wH=n(XSe,"A",{href:!0});var p6t=s(wH);dTr=r(p6t,"TFCamembertForTokenClassification"),p6t.forEach(t),cTr=r(XSe," (CamemBERT model)"),XSe.forEach(t),fTr=i(me),YM=n(me,"LI",{});var zSe=s(YM);pFe=n(zSe,"STRONG",{});var u6t=s(pFe);mTr=r(u6t,"convbert"),u6t.forEach(t),gTr=r(zSe," \u2014 "),AH=n(zSe,"A",{href:!0});var _6t=s(AH);hTr=r(_6t,"TFConvBertForTokenClassification"),_6t.forEach(t),pTr=r(zSe," (ConvBERT model)"),zSe.forEach(t),uTr=i(me),KM=n(me,"LI",{});var QSe=s(KM);uFe=n(QSe,"STRONG",{});var b6t=s(uFe);_Tr=r(b6t,"deberta"),b6t.forEach(t),bTr=r(QSe," \u2014 "),yH=n(QSe,"A",{href:!0});var v6t=s(yH);vTr=r(v6t,"TFDebertaForTokenClassification"),v6t.forEach(t),FTr=r(QSe," (DeBERTa model)"),QSe.forEach(t),TTr=i(me),ZM=n(me,"LI",{});var WSe=s(ZM);_Fe=n(WSe,"STRONG",{});var F6t=s(_Fe);MTr=r(F6t,"deberta-v2"),F6t.forEach(t),ETr=r(WSe," \u2014 "),LH=n(WSe,"A",{href:!0});var T6t=s(LH);CTr=r(T6t,"TFDebertaV2ForTokenClassification"),T6t.forEach(t),wTr=r(WSe," (DeBERTa-v2 model)"),WSe.forEach(t),ATr=i(me),e4=n(me,"LI",{});var HSe=s(e4);bFe=n(HSe,"STRONG",{});var M6t=s(bFe);yTr=r(M6t,"distilbert"),M6t.forEach(t),LTr=r(HSe," \u2014 "),xH=n(HSe,"A",{href:!0});var E6t=s(xH);xTr=r(E6t,"TFDistilBertForTokenClassification"),E6t.forEach(t),$Tr=r(HSe," (DistilBERT model)"),HSe.forEach(t),kTr=i(me),o4=n(me,"LI",{});var USe=s(o4);vFe=n(USe,"STRONG",{});var C6t=s(vFe);STr=r(C6t,"electra"),C6t.forEach(t),RTr=r(USe," \u2014 "),$H=n(USe,"A",{href:!0});var w6t=s($H);BTr=r(w6t,"TFElectraForTokenClassification"),w6t.forEach(t),PTr=r(USe," (ELECTRA model)"),USe.forEach(t),ITr=i(me),r4=n(me,"LI",{});var JSe=s(r4);FFe=n(JSe,"STRONG",{});var A6t=s(FFe);qTr=r(A6t,"flaubert"),A6t.forEach(t),NTr=r(JSe," \u2014 "),kH=n(JSe,"A",{href:!0});var y6t=s(kH);jTr=r(y6t,"TFFlaubertForTokenClassification"),y6t.forEach(t),DTr=r(JSe," (FlauBERT model)"),JSe.forEach(t),GTr=i(me),t4=n(me,"LI",{});var YSe=s(t4);TFe=n(YSe,"STRONG",{});var L6t=s(TFe);OTr=r(L6t,"funnel"),L6t.forEach(t),VTr=r(YSe," \u2014 "),SH=n(YSe,"A",{href:!0});var x6t=s(SH);XTr=r(x6t,"TFFunnelForTokenClassification"),x6t.forEach(t),zTr=r(YSe," (Funnel Transformer model)"),YSe.forEach(t),QTr=i(me),a4=n(me,"LI",{});var KSe=s(a4);MFe=n(KSe,"STRONG",{});var $6t=s(MFe);WTr=r($6t,"layoutlm"),$6t.forEach(t),HTr=r(KSe," \u2014 "),RH=n(KSe,"A",{href:!0});var k6t=s(RH);UTr=r(k6t,"TFLayoutLMForTokenClassification"),k6t.forEach(t),JTr=r(KSe," (LayoutLM model)"),KSe.forEach(t),YTr=i(me),n4=n(me,"LI",{});var ZSe=s(n4);EFe=n(ZSe,"STRONG",{});var S6t=s(EFe);KTr=r(S6t,"longformer"),S6t.forEach(t),ZTr=r(ZSe," \u2014 "),BH=n(ZSe,"A",{href:!0});var R6t=s(BH);e7r=r(R6t,"TFLongformerForTokenClassification"),R6t.forEach(t),o7r=r(ZSe," (Longformer model)"),ZSe.forEach(t),r7r=i(me),s4=n(me,"LI",{});var eRe=s(s4);CFe=n(eRe,"STRONG",{});var B6t=s(CFe);t7r=r(B6t,"mobilebert"),B6t.forEach(t),a7r=r(eRe," \u2014 "),PH=n(eRe,"A",{href:!0});var P6t=s(PH);n7r=r(P6t,"TFMobileBertForTokenClassification"),P6t.forEach(t),s7r=r(eRe," (MobileBERT model)"),eRe.forEach(t),l7r=i(me),l4=n(me,"LI",{});var oRe=s(l4);wFe=n(oRe,"STRONG",{});var I6t=s(wFe);i7r=r(I6t,"mpnet"),I6t.forEach(t),d7r=r(oRe," \u2014 "),IH=n(oRe,"A",{href:!0});var q6t=s(IH);c7r=r(q6t,"TFMPNetForTokenClassification"),q6t.forEach(t),f7r=r(oRe," (MPNet model)"),oRe.forEach(t),m7r=i(me),i4=n(me,"LI",{});var rRe=s(i4);AFe=n(rRe,"STRONG",{});var N6t=s(AFe);g7r=r(N6t,"rembert"),N6t.forEach(t),h7r=r(rRe," \u2014 "),qH=n(rRe,"A",{href:!0});var j6t=s(qH);p7r=r(j6t,"TFRemBertForTokenClassification"),j6t.forEach(t),u7r=r(rRe," (RemBERT model)"),rRe.forEach(t),_7r=i(me),d4=n(me,"LI",{});var tRe=s(d4);yFe=n(tRe,"STRONG",{});var D6t=s(yFe);b7r=r(D6t,"roberta"),D6t.forEach(t),v7r=r(tRe," \u2014 "),NH=n(tRe,"A",{href:!0});var G6t=s(NH);F7r=r(G6t,"TFRobertaForTokenClassification"),G6t.forEach(t),T7r=r(tRe," (RoBERTa model)"),tRe.forEach(t),M7r=i(me),c4=n(me,"LI",{});var aRe=s(c4);LFe=n(aRe,"STRONG",{});var O6t=s(LFe);E7r=r(O6t,"roformer"),O6t.forEach(t),C7r=r(aRe," \u2014 "),jH=n(aRe,"A",{href:!0});var V6t=s(jH);w7r=r(V6t,"TFRoFormerForTokenClassification"),V6t.forEach(t),A7r=r(aRe," (RoFormer model)"),aRe.forEach(t),y7r=i(me),f4=n(me,"LI",{});var nRe=s(f4);xFe=n(nRe,"STRONG",{});var X6t=s(xFe);L7r=r(X6t,"xlm"),X6t.forEach(t),x7r=r(nRe," \u2014 "),DH=n(nRe,"A",{href:!0});var z6t=s(DH);$7r=r(z6t,"TFXLMForTokenClassification"),z6t.forEach(t),k7r=r(nRe," (XLM model)"),nRe.forEach(t),S7r=i(me),m4=n(me,"LI",{});var sRe=s(m4);$Fe=n(sRe,"STRONG",{});var Q6t=s($Fe);R7r=r(Q6t,"xlm-roberta"),Q6t.forEach(t),B7r=r(sRe," \u2014 "),GH=n(sRe,"A",{href:!0});var W6t=s(GH);P7r=r(W6t,"TFXLMRobertaForTokenClassification"),W6t.forEach(t),I7r=r(sRe," (XLM-RoBERTa model)"),sRe.forEach(t),q7r=i(me),g4=n(me,"LI",{});var lRe=s(g4);kFe=n(lRe,"STRONG",{});var H6t=s(kFe);N7r=r(H6t,"xlnet"),H6t.forEach(t),j7r=r(lRe," \u2014 "),OH=n(lRe,"A",{href:!0});var U6t=s(OH);D7r=r(U6t,"TFXLNetForTokenClassification"),U6t.forEach(t),G7r=r(lRe," (XLNet model)"),lRe.forEach(t),me.forEach(t),O7r=i($l),T(h4.$$.fragment,$l),$l.forEach(t),xl.forEach(t),eqe=i(f),_c=n(f,"H2",{class:!0});var lje=s(_c);p4=n(lje,"A",{id:!0,class:!0,href:!0});var J6t=s(p4);SFe=n(J6t,"SPAN",{});var Y6t=s(SFe);T($8.$$.fragment,Y6t),Y6t.forEach(t),J6t.forEach(t),V7r=i(lje),RFe=n(lje,"SPAN",{});var K6t=s(RFe);X7r=r(K6t,"TFAutoModelForQuestionAnswering"),K6t.forEach(t),lje.forEach(t),oqe=i(f),ir=n(f,"DIV",{class:!0});var kl=s(ir);T(k8.$$.fragment,kl),z7r=i(kl),bc=n(kl,"P",{});var uZ=s(bc);Q7r=r(uZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),VH=n(uZ,"A",{href:!0});var Z6t=s(VH);W7r=r(Z6t,"from_pretrained()"),Z6t.forEach(t),H7r=r(uZ," class method or the "),XH=n(uZ,"A",{href:!0});var eTt=s(XH);U7r=r(eTt,"from_config()"),eTt.forEach(t),J7r=r(uZ,` class
method.`),uZ.forEach(t),Y7r=i(kl),S8=n(kl,"P",{});var ije=s(S8);K7r=r(ije,"This class cannot be instantiated directly using "),BFe=n(ije,"CODE",{});var oTt=s(BFe);Z7r=r(oTt,"__init__()"),oTt.forEach(t),eMr=r(ije," (throws an error)."),ije.forEach(t),oMr=i(kl),It=n(kl,"DIV",{class:!0});var gw=s(It);T(R8.$$.fragment,gw),rMr=i(gw),PFe=n(gw,"P",{});var rTt=s(PFe);tMr=r(rTt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),rTt.forEach(t),aMr=i(gw),vc=n(gw,"P",{});var _Z=s(vc);nMr=r(_Z,`Note:
Loading a model from its configuration file does `),IFe=n(_Z,"STRONG",{});var tTt=s(IFe);sMr=r(tTt,"not"),tTt.forEach(t),lMr=r(_Z,` load the model weights. It only affects the
model\u2019s configuration. Use `),zH=n(_Z,"A",{href:!0});var aTt=s(zH);iMr=r(aTt,"from_pretrained()"),aTt.forEach(t),dMr=r(_Z," to load the model weights."),_Z.forEach(t),cMr=i(gw),T(u4.$$.fragment,gw),gw.forEach(t),fMr=i(kl),Ir=n(kl,"DIV",{class:!0});var Sl=s(Ir);T(B8.$$.fragment,Sl),mMr=i(Sl),qFe=n(Sl,"P",{});var nTt=s(qFe);gMr=r(nTt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),nTt.forEach(t),hMr=i(Sl),cn=n(Sl,"P",{});var hw=s(cn);pMr=r(hw,"The model class to instantiate is selected based on the "),NFe=n(hw,"CODE",{});var sTt=s(NFe);uMr=r(sTt,"model_type"),sTt.forEach(t),_Mr=r(hw,` property of the config object (either
passed as an argument or loaded from `),jFe=n(hw,"CODE",{});var lTt=s(jFe);bMr=r(lTt,"pretrained_model_name_or_path"),lTt.forEach(t),vMr=r(hw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),DFe=n(hw,"CODE",{});var iTt=s(DFe);FMr=r(iTt,"pretrained_model_name_or_path"),iTt.forEach(t),TMr=r(hw,":"),hw.forEach(t),MMr=i(Sl),ce=n(Sl,"UL",{});var ge=s(ce);_4=n(ge,"LI",{});var iRe=s(_4);GFe=n(iRe,"STRONG",{});var dTt=s(GFe);EMr=r(dTt,"albert"),dTt.forEach(t),CMr=r(iRe," \u2014 "),QH=n(iRe,"A",{href:!0});var cTt=s(QH);wMr=r(cTt,"TFAlbertForQuestionAnswering"),cTt.forEach(t),AMr=r(iRe," (ALBERT model)"),iRe.forEach(t),yMr=i(ge),b4=n(ge,"LI",{});var dRe=s(b4);OFe=n(dRe,"STRONG",{});var fTt=s(OFe);LMr=r(fTt,"bert"),fTt.forEach(t),xMr=r(dRe," \u2014 "),WH=n(dRe,"A",{href:!0});var mTt=s(WH);$Mr=r(mTt,"TFBertForQuestionAnswering"),mTt.forEach(t),kMr=r(dRe," (BERT model)"),dRe.forEach(t),SMr=i(ge),v4=n(ge,"LI",{});var cRe=s(v4);VFe=n(cRe,"STRONG",{});var gTt=s(VFe);RMr=r(gTt,"camembert"),gTt.forEach(t),BMr=r(cRe," \u2014 "),HH=n(cRe,"A",{href:!0});var hTt=s(HH);PMr=r(hTt,"TFCamembertForQuestionAnswering"),hTt.forEach(t),IMr=r(cRe," (CamemBERT model)"),cRe.forEach(t),qMr=i(ge),F4=n(ge,"LI",{});var fRe=s(F4);XFe=n(fRe,"STRONG",{});var pTt=s(XFe);NMr=r(pTt,"convbert"),pTt.forEach(t),jMr=r(fRe," \u2014 "),UH=n(fRe,"A",{href:!0});var uTt=s(UH);DMr=r(uTt,"TFConvBertForQuestionAnswering"),uTt.forEach(t),GMr=r(fRe," (ConvBERT model)"),fRe.forEach(t),OMr=i(ge),T4=n(ge,"LI",{});var mRe=s(T4);zFe=n(mRe,"STRONG",{});var _Tt=s(zFe);VMr=r(_Tt,"deberta"),_Tt.forEach(t),XMr=r(mRe," \u2014 "),JH=n(mRe,"A",{href:!0});var bTt=s(JH);zMr=r(bTt,"TFDebertaForQuestionAnswering"),bTt.forEach(t),QMr=r(mRe," (DeBERTa model)"),mRe.forEach(t),WMr=i(ge),M4=n(ge,"LI",{});var gRe=s(M4);QFe=n(gRe,"STRONG",{});var vTt=s(QFe);HMr=r(vTt,"deberta-v2"),vTt.forEach(t),UMr=r(gRe," \u2014 "),YH=n(gRe,"A",{href:!0});var FTt=s(YH);JMr=r(FTt,"TFDebertaV2ForQuestionAnswering"),FTt.forEach(t),YMr=r(gRe," (DeBERTa-v2 model)"),gRe.forEach(t),KMr=i(ge),E4=n(ge,"LI",{});var hRe=s(E4);WFe=n(hRe,"STRONG",{});var TTt=s(WFe);ZMr=r(TTt,"distilbert"),TTt.forEach(t),e4r=r(hRe," \u2014 "),KH=n(hRe,"A",{href:!0});var MTt=s(KH);o4r=r(MTt,"TFDistilBertForQuestionAnswering"),MTt.forEach(t),r4r=r(hRe," (DistilBERT model)"),hRe.forEach(t),t4r=i(ge),C4=n(ge,"LI",{});var pRe=s(C4);HFe=n(pRe,"STRONG",{});var ETt=s(HFe);a4r=r(ETt,"electra"),ETt.forEach(t),n4r=r(pRe," \u2014 "),ZH=n(pRe,"A",{href:!0});var CTt=s(ZH);s4r=r(CTt,"TFElectraForQuestionAnswering"),CTt.forEach(t),l4r=r(pRe," (ELECTRA model)"),pRe.forEach(t),i4r=i(ge),w4=n(ge,"LI",{});var uRe=s(w4);UFe=n(uRe,"STRONG",{});var wTt=s(UFe);d4r=r(wTt,"flaubert"),wTt.forEach(t),c4r=r(uRe," \u2014 "),eU=n(uRe,"A",{href:!0});var ATt=s(eU);f4r=r(ATt,"TFFlaubertForQuestionAnsweringSimple"),ATt.forEach(t),m4r=r(uRe," (FlauBERT model)"),uRe.forEach(t),g4r=i(ge),A4=n(ge,"LI",{});var _Re=s(A4);JFe=n(_Re,"STRONG",{});var yTt=s(JFe);h4r=r(yTt,"funnel"),yTt.forEach(t),p4r=r(_Re," \u2014 "),oU=n(_Re,"A",{href:!0});var LTt=s(oU);u4r=r(LTt,"TFFunnelForQuestionAnswering"),LTt.forEach(t),_4r=r(_Re," (Funnel Transformer model)"),_Re.forEach(t),b4r=i(ge),y4=n(ge,"LI",{});var bRe=s(y4);YFe=n(bRe,"STRONG",{});var xTt=s(YFe);v4r=r(xTt,"gptj"),xTt.forEach(t),F4r=r(bRe," \u2014 "),rU=n(bRe,"A",{href:!0});var $Tt=s(rU);T4r=r($Tt,"TFGPTJForQuestionAnswering"),$Tt.forEach(t),M4r=r(bRe," (GPT-J model)"),bRe.forEach(t),E4r=i(ge),L4=n(ge,"LI",{});var vRe=s(L4);KFe=n(vRe,"STRONG",{});var kTt=s(KFe);C4r=r(kTt,"longformer"),kTt.forEach(t),w4r=r(vRe," \u2014 "),tU=n(vRe,"A",{href:!0});var STt=s(tU);A4r=r(STt,"TFLongformerForQuestionAnswering"),STt.forEach(t),y4r=r(vRe," (Longformer model)"),vRe.forEach(t),L4r=i(ge),x4=n(ge,"LI",{});var FRe=s(x4);ZFe=n(FRe,"STRONG",{});var RTt=s(ZFe);x4r=r(RTt,"mobilebert"),RTt.forEach(t),$4r=r(FRe," \u2014 "),aU=n(FRe,"A",{href:!0});var BTt=s(aU);k4r=r(BTt,"TFMobileBertForQuestionAnswering"),BTt.forEach(t),S4r=r(FRe," (MobileBERT model)"),FRe.forEach(t),R4r=i(ge),$4=n(ge,"LI",{});var TRe=s($4);e0e=n(TRe,"STRONG",{});var PTt=s(e0e);B4r=r(PTt,"mpnet"),PTt.forEach(t),P4r=r(TRe," \u2014 "),nU=n(TRe,"A",{href:!0});var ITt=s(nU);I4r=r(ITt,"TFMPNetForQuestionAnswering"),ITt.forEach(t),q4r=r(TRe," (MPNet model)"),TRe.forEach(t),N4r=i(ge),k4=n(ge,"LI",{});var MRe=s(k4);o0e=n(MRe,"STRONG",{});var qTt=s(o0e);j4r=r(qTt,"rembert"),qTt.forEach(t),D4r=r(MRe," \u2014 "),sU=n(MRe,"A",{href:!0});var NTt=s(sU);G4r=r(NTt,"TFRemBertForQuestionAnswering"),NTt.forEach(t),O4r=r(MRe," (RemBERT model)"),MRe.forEach(t),V4r=i(ge),S4=n(ge,"LI",{});var ERe=s(S4);r0e=n(ERe,"STRONG",{});var jTt=s(r0e);X4r=r(jTt,"roberta"),jTt.forEach(t),z4r=r(ERe," \u2014 "),lU=n(ERe,"A",{href:!0});var DTt=s(lU);Q4r=r(DTt,"TFRobertaForQuestionAnswering"),DTt.forEach(t),W4r=r(ERe," (RoBERTa model)"),ERe.forEach(t),H4r=i(ge),R4=n(ge,"LI",{});var CRe=s(R4);t0e=n(CRe,"STRONG",{});var GTt=s(t0e);U4r=r(GTt,"roformer"),GTt.forEach(t),J4r=r(CRe," \u2014 "),iU=n(CRe,"A",{href:!0});var OTt=s(iU);Y4r=r(OTt,"TFRoFormerForQuestionAnswering"),OTt.forEach(t),K4r=r(CRe," (RoFormer model)"),CRe.forEach(t),Z4r=i(ge),B4=n(ge,"LI",{});var wRe=s(B4);a0e=n(wRe,"STRONG",{});var VTt=s(a0e);eEr=r(VTt,"xlm"),VTt.forEach(t),oEr=r(wRe," \u2014 "),dU=n(wRe,"A",{href:!0});var XTt=s(dU);rEr=r(XTt,"TFXLMForQuestionAnsweringSimple"),XTt.forEach(t),tEr=r(wRe," (XLM model)"),wRe.forEach(t),aEr=i(ge),P4=n(ge,"LI",{});var ARe=s(P4);n0e=n(ARe,"STRONG",{});var zTt=s(n0e);nEr=r(zTt,"xlm-roberta"),zTt.forEach(t),sEr=r(ARe," \u2014 "),cU=n(ARe,"A",{href:!0});var QTt=s(cU);lEr=r(QTt,"TFXLMRobertaForQuestionAnswering"),QTt.forEach(t),iEr=r(ARe," (XLM-RoBERTa model)"),ARe.forEach(t),dEr=i(ge),I4=n(ge,"LI",{});var yRe=s(I4);s0e=n(yRe,"STRONG",{});var WTt=s(s0e);cEr=r(WTt,"xlnet"),WTt.forEach(t),fEr=r(yRe," \u2014 "),fU=n(yRe,"A",{href:!0});var HTt=s(fU);mEr=r(HTt,"TFXLNetForQuestionAnsweringSimple"),HTt.forEach(t),gEr=r(yRe," (XLNet model)"),yRe.forEach(t),ge.forEach(t),hEr=i(Sl),T(q4.$$.fragment,Sl),Sl.forEach(t),kl.forEach(t),rqe=i(f),Fc=n(f,"H2",{class:!0});var dje=s(Fc);N4=n(dje,"A",{id:!0,class:!0,href:!0});var UTt=s(N4);l0e=n(UTt,"SPAN",{});var JTt=s(l0e);T(P8.$$.fragment,JTt),JTt.forEach(t),UTt.forEach(t),pEr=i(dje),i0e=n(dje,"SPAN",{});var YTt=s(i0e);uEr=r(YTt,"TFAutoModelForVision2Seq"),YTt.forEach(t),dje.forEach(t),tqe=i(f),dr=n(f,"DIV",{class:!0});var Rl=s(dr);T(I8.$$.fragment,Rl),_Er=i(Rl),Tc=n(Rl,"P",{});var bZ=s(Tc);bEr=r(bZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),mU=n(bZ,"A",{href:!0});var KTt=s(mU);vEr=r(KTt,"from_pretrained()"),KTt.forEach(t),FEr=r(bZ," class method or the "),gU=n(bZ,"A",{href:!0});var ZTt=s(gU);TEr=r(ZTt,"from_config()"),ZTt.forEach(t),MEr=r(bZ,` class
method.`),bZ.forEach(t),EEr=i(Rl),q8=n(Rl,"P",{});var cje=s(q8);CEr=r(cje,"This class cannot be instantiated directly using "),d0e=n(cje,"CODE",{});var e7t=s(d0e);wEr=r(e7t,"__init__()"),e7t.forEach(t),AEr=r(cje," (throws an error)."),cje.forEach(t),yEr=i(Rl),qt=n(Rl,"DIV",{class:!0});var pw=s(qt);T(N8.$$.fragment,pw),LEr=i(pw),c0e=n(pw,"P",{});var o7t=s(c0e);xEr=r(o7t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),o7t.forEach(t),$Er=i(pw),Mc=n(pw,"P",{});var vZ=s(Mc);kEr=r(vZ,`Note:
Loading a model from its configuration file does `),f0e=n(vZ,"STRONG",{});var r7t=s(f0e);SEr=r(r7t,"not"),r7t.forEach(t),REr=r(vZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),hU=n(vZ,"A",{href:!0});var t7t=s(hU);BEr=r(t7t,"from_pretrained()"),t7t.forEach(t),PEr=r(vZ," to load the model weights."),vZ.forEach(t),IEr=i(pw),T(j4.$$.fragment,pw),pw.forEach(t),qEr=i(Rl),qr=n(Rl,"DIV",{class:!0});var Bl=s(qr);T(j8.$$.fragment,Bl),NEr=i(Bl),m0e=n(Bl,"P",{});var a7t=s(m0e);jEr=r(a7t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),a7t.forEach(t),DEr=i(Bl),fn=n(Bl,"P",{});var uw=s(fn);GEr=r(uw,"The model class to instantiate is selected based on the "),g0e=n(uw,"CODE",{});var n7t=s(g0e);OEr=r(n7t,"model_type"),n7t.forEach(t),VEr=r(uw,` property of the config object (either
passed as an argument or loaded from `),h0e=n(uw,"CODE",{});var s7t=s(h0e);XEr=r(s7t,"pretrained_model_name_or_path"),s7t.forEach(t),zEr=r(uw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),p0e=n(uw,"CODE",{});var l7t=s(p0e);QEr=r(l7t,"pretrained_model_name_or_path"),l7t.forEach(t),WEr=r(uw,":"),uw.forEach(t),HEr=i(Bl),u0e=n(Bl,"UL",{});var i7t=s(u0e);D4=n(i7t,"LI",{});var LRe=s(D4);_0e=n(LRe,"STRONG",{});var d7t=s(_0e);UEr=r(d7t,"vision-encoder-decoder"),d7t.forEach(t),JEr=r(LRe," \u2014 "),pU=n(LRe,"A",{href:!0});var c7t=s(pU);YEr=r(c7t,"TFVisionEncoderDecoderModel"),c7t.forEach(t),KEr=r(LRe," (Vision Encoder decoder model)"),LRe.forEach(t),i7t.forEach(t),ZEr=i(Bl),T(G4.$$.fragment,Bl),Bl.forEach(t),Rl.forEach(t),aqe=i(f),Ec=n(f,"H2",{class:!0});var fje=s(Ec);O4=n(fje,"A",{id:!0,class:!0,href:!0});var f7t=s(O4);b0e=n(f7t,"SPAN",{});var m7t=s(b0e);T(D8.$$.fragment,m7t),m7t.forEach(t),f7t.forEach(t),e5r=i(fje),v0e=n(fje,"SPAN",{});var g7t=s(v0e);o5r=r(g7t,"TFAutoModelForSpeechSeq2Seq"),g7t.forEach(t),fje.forEach(t),nqe=i(f),cr=n(f,"DIV",{class:!0});var Pl=s(cr);T(G8.$$.fragment,Pl),r5r=i(Pl),Cc=n(Pl,"P",{});var FZ=s(Cc);t5r=r(FZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),uU=n(FZ,"A",{href:!0});var h7t=s(uU);a5r=r(h7t,"from_pretrained()"),h7t.forEach(t),n5r=r(FZ," class method or the "),_U=n(FZ,"A",{href:!0});var p7t=s(_U);s5r=r(p7t,"from_config()"),p7t.forEach(t),l5r=r(FZ,` class
method.`),FZ.forEach(t),i5r=i(Pl),O8=n(Pl,"P",{});var mje=s(O8);d5r=r(mje,"This class cannot be instantiated directly using "),F0e=n(mje,"CODE",{});var u7t=s(F0e);c5r=r(u7t,"__init__()"),u7t.forEach(t),f5r=r(mje," (throws an error)."),mje.forEach(t),m5r=i(Pl),Nt=n(Pl,"DIV",{class:!0});var _w=s(Nt);T(V8.$$.fragment,_w),g5r=i(_w),T0e=n(_w,"P",{});var _7t=s(T0e);h5r=r(_7t,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),_7t.forEach(t),p5r=i(_w),wc=n(_w,"P",{});var TZ=s(wc);u5r=r(TZ,`Note:
Loading a model from its configuration file does `),M0e=n(TZ,"STRONG",{});var b7t=s(M0e);_5r=r(b7t,"not"),b7t.forEach(t),b5r=r(TZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),bU=n(TZ,"A",{href:!0});var v7t=s(bU);v5r=r(v7t,"from_pretrained()"),v7t.forEach(t),F5r=r(TZ," to load the model weights."),TZ.forEach(t),T5r=i(_w),T(V4.$$.fragment,_w),_w.forEach(t),M5r=i(Pl),Nr=n(Pl,"DIV",{class:!0});var Il=s(Nr);T(X8.$$.fragment,Il),E5r=i(Il),E0e=n(Il,"P",{});var F7t=s(E0e);C5r=r(F7t,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),F7t.forEach(t),w5r=i(Il),mn=n(Il,"P",{});var bw=s(mn);A5r=r(bw,"The model class to instantiate is selected based on the "),C0e=n(bw,"CODE",{});var T7t=s(C0e);y5r=r(T7t,"model_type"),T7t.forEach(t),L5r=r(bw,` property of the config object (either
passed as an argument or loaded from `),w0e=n(bw,"CODE",{});var M7t=s(w0e);x5r=r(M7t,"pretrained_model_name_or_path"),M7t.forEach(t),$5r=r(bw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),A0e=n(bw,"CODE",{});var E7t=s(A0e);k5r=r(E7t,"pretrained_model_name_or_path"),E7t.forEach(t),S5r=r(bw,":"),bw.forEach(t),R5r=i(Il),y0e=n(Il,"UL",{});var C7t=s(y0e);X4=n(C7t,"LI",{});var xRe=s(X4);L0e=n(xRe,"STRONG",{});var w7t=s(L0e);B5r=r(w7t,"speech_to_text"),w7t.forEach(t),P5r=r(xRe," \u2014 "),vU=n(xRe,"A",{href:!0});var A7t=s(vU);I5r=r(A7t,"TFSpeech2TextForConditionalGeneration"),A7t.forEach(t),q5r=r(xRe," (Speech2Text model)"),xRe.forEach(t),C7t.forEach(t),N5r=i(Il),T(z4.$$.fragment,Il),Il.forEach(t),Pl.forEach(t),sqe=i(f),Ac=n(f,"H2",{class:!0});var gje=s(Ac);Q4=n(gje,"A",{id:!0,class:!0,href:!0});var y7t=s(Q4);x0e=n(y7t,"SPAN",{});var L7t=s(x0e);T(z8.$$.fragment,L7t),L7t.forEach(t),y7t.forEach(t),j5r=i(gje),$0e=n(gje,"SPAN",{});var x7t=s($0e);D5r=r(x7t,"FlaxAutoModel"),x7t.forEach(t),gje.forEach(t),lqe=i(f),fr=n(f,"DIV",{class:!0});var ql=s(fr);T(Q8.$$.fragment,ql),G5r=i(ql),yc=n(ql,"P",{});var MZ=s(yc);O5r=r(MZ,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),FU=n(MZ,"A",{href:!0});var $7t=s(FU);V5r=r($7t,"from_pretrained()"),$7t.forEach(t),X5r=r(MZ," class method or the "),TU=n(MZ,"A",{href:!0});var k7t=s(TU);z5r=r(k7t,"from_config()"),k7t.forEach(t),Q5r=r(MZ,` class
method.`),MZ.forEach(t),W5r=i(ql),W8=n(ql,"P",{});var hje=s(W8);H5r=r(hje,"This class cannot be instantiated directly using "),k0e=n(hje,"CODE",{});var S7t=s(k0e);U5r=r(S7t,"__init__()"),S7t.forEach(t),J5r=r(hje," (throws an error)."),hje.forEach(t),Y5r=i(ql),jt=n(ql,"DIV",{class:!0});var vw=s(jt);T(H8.$$.fragment,vw),K5r=i(vw),S0e=n(vw,"P",{});var R7t=s(S0e);Z5r=r(R7t,"Instantiates one of the base model classes of the library from a configuration."),R7t.forEach(t),eCr=i(vw),Lc=n(vw,"P",{});var EZ=s(Lc);oCr=r(EZ,`Note:
Loading a model from its configuration file does `),R0e=n(EZ,"STRONG",{});var B7t=s(R0e);rCr=r(B7t,"not"),B7t.forEach(t),tCr=r(EZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),MU=n(EZ,"A",{href:!0});var P7t=s(MU);aCr=r(P7t,"from_pretrained()"),P7t.forEach(t),nCr=r(EZ," to load the model weights."),EZ.forEach(t),sCr=i(vw),T(W4.$$.fragment,vw),vw.forEach(t),lCr=i(ql),jr=n(ql,"DIV",{class:!0});var Nl=s(jr);T(U8.$$.fragment,Nl),iCr=i(Nl),B0e=n(Nl,"P",{});var I7t=s(B0e);dCr=r(I7t,"Instantiate one of the base model classes of the library from a pretrained model."),I7t.forEach(t),cCr=i(Nl),gn=n(Nl,"P",{});var Fw=s(gn);fCr=r(Fw,"The model class to instantiate is selected based on the "),P0e=n(Fw,"CODE",{});var q7t=s(P0e);mCr=r(q7t,"model_type"),q7t.forEach(t),gCr=r(Fw,` property of the config object (either
passed as an argument or loaded from `),I0e=n(Fw,"CODE",{});var N7t=s(I0e);hCr=r(N7t,"pretrained_model_name_or_path"),N7t.forEach(t),pCr=r(Fw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),q0e=n(Fw,"CODE",{});var j7t=s(q0e);uCr=r(j7t,"pretrained_model_name_or_path"),j7t.forEach(t),_Cr=r(Fw,":"),Fw.forEach(t),bCr=i(Nl),re=n(Nl,"UL",{});var ne=s(re);H4=n(ne,"LI",{});var $Re=s(H4);N0e=n($Re,"STRONG",{});var D7t=s(N0e);vCr=r(D7t,"albert"),D7t.forEach(t),FCr=r($Re," \u2014 "),EU=n($Re,"A",{href:!0});var G7t=s(EU);TCr=r(G7t,"FlaxAlbertModel"),G7t.forEach(t),MCr=r($Re," (ALBERT model)"),$Re.forEach(t),ECr=i(ne),U4=n(ne,"LI",{});var kRe=s(U4);j0e=n(kRe,"STRONG",{});var O7t=s(j0e);CCr=r(O7t,"bart"),O7t.forEach(t),wCr=r(kRe," \u2014 "),CU=n(kRe,"A",{href:!0});var V7t=s(CU);ACr=r(V7t,"FlaxBartModel"),V7t.forEach(t),yCr=r(kRe," (BART model)"),kRe.forEach(t),LCr=i(ne),J4=n(ne,"LI",{});var SRe=s(J4);D0e=n(SRe,"STRONG",{});var X7t=s(D0e);xCr=r(X7t,"beit"),X7t.forEach(t),$Cr=r(SRe," \u2014 "),wU=n(SRe,"A",{href:!0});var z7t=s(wU);kCr=r(z7t,"FlaxBeitModel"),z7t.forEach(t),SCr=r(SRe," (BEiT model)"),SRe.forEach(t),RCr=i(ne),Y4=n(ne,"LI",{});var RRe=s(Y4);G0e=n(RRe,"STRONG",{});var Q7t=s(G0e);BCr=r(Q7t,"bert"),Q7t.forEach(t),PCr=r(RRe," \u2014 "),AU=n(RRe,"A",{href:!0});var W7t=s(AU);ICr=r(W7t,"FlaxBertModel"),W7t.forEach(t),qCr=r(RRe," (BERT model)"),RRe.forEach(t),NCr=i(ne),K4=n(ne,"LI",{});var BRe=s(K4);O0e=n(BRe,"STRONG",{});var H7t=s(O0e);jCr=r(H7t,"big_bird"),H7t.forEach(t),DCr=r(BRe," \u2014 "),yU=n(BRe,"A",{href:!0});var U7t=s(yU);GCr=r(U7t,"FlaxBigBirdModel"),U7t.forEach(t),OCr=r(BRe," (BigBird model)"),BRe.forEach(t),VCr=i(ne),Z4=n(ne,"LI",{});var PRe=s(Z4);V0e=n(PRe,"STRONG",{});var J7t=s(V0e);XCr=r(J7t,"blenderbot"),J7t.forEach(t),zCr=r(PRe," \u2014 "),LU=n(PRe,"A",{href:!0});var Y7t=s(LU);QCr=r(Y7t,"FlaxBlenderbotModel"),Y7t.forEach(t),WCr=r(PRe," (Blenderbot model)"),PRe.forEach(t),HCr=i(ne),eE=n(ne,"LI",{});var IRe=s(eE);X0e=n(IRe,"STRONG",{});var K7t=s(X0e);UCr=r(K7t,"blenderbot-small"),K7t.forEach(t),JCr=r(IRe," \u2014 "),xU=n(IRe,"A",{href:!0});var Z7t=s(xU);YCr=r(Z7t,"FlaxBlenderbotSmallModel"),Z7t.forEach(t),KCr=r(IRe," (BlenderbotSmall model)"),IRe.forEach(t),ZCr=i(ne),oE=n(ne,"LI",{});var qRe=s(oE);z0e=n(qRe,"STRONG",{});var eMt=s(z0e);e3r=r(eMt,"clip"),eMt.forEach(t),o3r=r(qRe," \u2014 "),$U=n(qRe,"A",{href:!0});var oMt=s($U);r3r=r(oMt,"FlaxCLIPModel"),oMt.forEach(t),t3r=r(qRe," (CLIP model)"),qRe.forEach(t),a3r=i(ne),rE=n(ne,"LI",{});var NRe=s(rE);Q0e=n(NRe,"STRONG",{});var rMt=s(Q0e);n3r=r(rMt,"distilbert"),rMt.forEach(t),s3r=r(NRe," \u2014 "),kU=n(NRe,"A",{href:!0});var tMt=s(kU);l3r=r(tMt,"FlaxDistilBertModel"),tMt.forEach(t),i3r=r(NRe," (DistilBERT model)"),NRe.forEach(t),d3r=i(ne),tE=n(ne,"LI",{});var jRe=s(tE);W0e=n(jRe,"STRONG",{});var aMt=s(W0e);c3r=r(aMt,"electra"),aMt.forEach(t),f3r=r(jRe," \u2014 "),SU=n(jRe,"A",{href:!0});var nMt=s(SU);m3r=r(nMt,"FlaxElectraModel"),nMt.forEach(t),g3r=r(jRe," (ELECTRA model)"),jRe.forEach(t),h3r=i(ne),aE=n(ne,"LI",{});var DRe=s(aE);H0e=n(DRe,"STRONG",{});var sMt=s(H0e);p3r=r(sMt,"gpt2"),sMt.forEach(t),u3r=r(DRe," \u2014 "),RU=n(DRe,"A",{href:!0});var lMt=s(RU);_3r=r(lMt,"FlaxGPT2Model"),lMt.forEach(t),b3r=r(DRe," (OpenAI GPT-2 model)"),DRe.forEach(t),v3r=i(ne),nE=n(ne,"LI",{});var GRe=s(nE);U0e=n(GRe,"STRONG",{});var iMt=s(U0e);F3r=r(iMt,"gpt_neo"),iMt.forEach(t),T3r=r(GRe," \u2014 "),BU=n(GRe,"A",{href:!0});var dMt=s(BU);M3r=r(dMt,"FlaxGPTNeoModel"),dMt.forEach(t),E3r=r(GRe," (GPT Neo model)"),GRe.forEach(t),C3r=i(ne),sE=n(ne,"LI",{});var ORe=s(sE);J0e=n(ORe,"STRONG",{});var cMt=s(J0e);w3r=r(cMt,"gptj"),cMt.forEach(t),A3r=r(ORe," \u2014 "),PU=n(ORe,"A",{href:!0});var fMt=s(PU);y3r=r(fMt,"FlaxGPTJModel"),fMt.forEach(t),L3r=r(ORe," (GPT-J model)"),ORe.forEach(t),x3r=i(ne),lE=n(ne,"LI",{});var VRe=s(lE);Y0e=n(VRe,"STRONG",{});var mMt=s(Y0e);$3r=r(mMt,"marian"),mMt.forEach(t),k3r=r(VRe," \u2014 "),IU=n(VRe,"A",{href:!0});var gMt=s(IU);S3r=r(gMt,"FlaxMarianModel"),gMt.forEach(t),R3r=r(VRe," (Marian model)"),VRe.forEach(t),B3r=i(ne),iE=n(ne,"LI",{});var XRe=s(iE);K0e=n(XRe,"STRONG",{});var hMt=s(K0e);P3r=r(hMt,"mbart"),hMt.forEach(t),I3r=r(XRe," \u2014 "),qU=n(XRe,"A",{href:!0});var pMt=s(qU);q3r=r(pMt,"FlaxMBartModel"),pMt.forEach(t),N3r=r(XRe," (mBART model)"),XRe.forEach(t),j3r=i(ne),dE=n(ne,"LI",{});var zRe=s(dE);Z0e=n(zRe,"STRONG",{});var uMt=s(Z0e);D3r=r(uMt,"mt5"),uMt.forEach(t),G3r=r(zRe," \u2014 "),NU=n(zRe,"A",{href:!0});var _Mt=s(NU);O3r=r(_Mt,"FlaxMT5Model"),_Mt.forEach(t),V3r=r(zRe," (mT5 model)"),zRe.forEach(t),X3r=i(ne),cE=n(ne,"LI",{});var QRe=s(cE);e6e=n(QRe,"STRONG",{});var bMt=s(e6e);z3r=r(bMt,"pegasus"),bMt.forEach(t),Q3r=r(QRe," \u2014 "),jU=n(QRe,"A",{href:!0});var vMt=s(jU);W3r=r(vMt,"FlaxPegasusModel"),vMt.forEach(t),H3r=r(QRe," (Pegasus model)"),QRe.forEach(t),U3r=i(ne),fE=n(ne,"LI",{});var WRe=s(fE);o6e=n(WRe,"STRONG",{});var FMt=s(o6e);J3r=r(FMt,"roberta"),FMt.forEach(t),Y3r=r(WRe," \u2014 "),DU=n(WRe,"A",{href:!0});var TMt=s(DU);K3r=r(TMt,"FlaxRobertaModel"),TMt.forEach(t),Z3r=r(WRe," (RoBERTa model)"),WRe.forEach(t),ewr=i(ne),mE=n(ne,"LI",{});var HRe=s(mE);r6e=n(HRe,"STRONG",{});var MMt=s(r6e);owr=r(MMt,"roformer"),MMt.forEach(t),rwr=r(HRe," \u2014 "),GU=n(HRe,"A",{href:!0});var EMt=s(GU);twr=r(EMt,"FlaxRoFormerModel"),EMt.forEach(t),awr=r(HRe," (RoFormer model)"),HRe.forEach(t),nwr=i(ne),gE=n(ne,"LI",{});var URe=s(gE);t6e=n(URe,"STRONG",{});var CMt=s(t6e);swr=r(CMt,"t5"),CMt.forEach(t),lwr=r(URe," \u2014 "),OU=n(URe,"A",{href:!0});var wMt=s(OU);iwr=r(wMt,"FlaxT5Model"),wMt.forEach(t),dwr=r(URe," (T5 model)"),URe.forEach(t),cwr=i(ne),hE=n(ne,"LI",{});var JRe=s(hE);a6e=n(JRe,"STRONG",{});var AMt=s(a6e);fwr=r(AMt,"vision-text-dual-encoder"),AMt.forEach(t),mwr=r(JRe," \u2014 "),VU=n(JRe,"A",{href:!0});var yMt=s(VU);gwr=r(yMt,"FlaxVisionTextDualEncoderModel"),yMt.forEach(t),hwr=r(JRe," (VisionTextDualEncoder model)"),JRe.forEach(t),pwr=i(ne),pE=n(ne,"LI",{});var YRe=s(pE);n6e=n(YRe,"STRONG",{});var LMt=s(n6e);uwr=r(LMt,"vit"),LMt.forEach(t),_wr=r(YRe," \u2014 "),XU=n(YRe,"A",{href:!0});var xMt=s(XU);bwr=r(xMt,"FlaxViTModel"),xMt.forEach(t),vwr=r(YRe," (ViT model)"),YRe.forEach(t),Fwr=i(ne),uE=n(ne,"LI",{});var KRe=s(uE);s6e=n(KRe,"STRONG",{});var $Mt=s(s6e);Twr=r($Mt,"wav2vec2"),$Mt.forEach(t),Mwr=r(KRe," \u2014 "),zU=n(KRe,"A",{href:!0});var kMt=s(zU);Ewr=r(kMt,"FlaxWav2Vec2Model"),kMt.forEach(t),Cwr=r(KRe," (Wav2Vec2 model)"),KRe.forEach(t),wwr=i(ne),_E=n(ne,"LI",{});var ZRe=s(_E);l6e=n(ZRe,"STRONG",{});var SMt=s(l6e);Awr=r(SMt,"xglm"),SMt.forEach(t),ywr=r(ZRe," \u2014 "),QU=n(ZRe,"A",{href:!0});var RMt=s(QU);Lwr=r(RMt,"FlaxXGLMModel"),RMt.forEach(t),xwr=r(ZRe," (XGLM model)"),ZRe.forEach(t),$wr=i(ne),bE=n(ne,"LI",{});var eBe=s(bE);i6e=n(eBe,"STRONG",{});var BMt=s(i6e);kwr=r(BMt,"xlm-roberta"),BMt.forEach(t),Swr=r(eBe," \u2014 "),WU=n(eBe,"A",{href:!0});var PMt=s(WU);Rwr=r(PMt,"FlaxXLMRobertaModel"),PMt.forEach(t),Bwr=r(eBe," (XLM-RoBERTa model)"),eBe.forEach(t),ne.forEach(t),Pwr=i(Nl),T(vE.$$.fragment,Nl),Nl.forEach(t),ql.forEach(t),iqe=i(f),xc=n(f,"H2",{class:!0});var pje=s(xc);FE=n(pje,"A",{id:!0,class:!0,href:!0});var IMt=s(FE);d6e=n(IMt,"SPAN",{});var qMt=s(d6e);T(J8.$$.fragment,qMt),qMt.forEach(t),IMt.forEach(t),Iwr=i(pje),c6e=n(pje,"SPAN",{});var NMt=s(c6e);qwr=r(NMt,"FlaxAutoModelForCausalLM"),NMt.forEach(t),pje.forEach(t),dqe=i(f),mr=n(f,"DIV",{class:!0});var jl=s(mr);T(Y8.$$.fragment,jl),Nwr=i(jl),$c=n(jl,"P",{});var CZ=s($c);jwr=r(CZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),HU=n(CZ,"A",{href:!0});var jMt=s(HU);Dwr=r(jMt,"from_pretrained()"),jMt.forEach(t),Gwr=r(CZ," class method or the "),UU=n(CZ,"A",{href:!0});var DMt=s(UU);Owr=r(DMt,"from_config()"),DMt.forEach(t),Vwr=r(CZ,` class
method.`),CZ.forEach(t),Xwr=i(jl),K8=n(jl,"P",{});var uje=s(K8);zwr=r(uje,"This class cannot be instantiated directly using "),f6e=n(uje,"CODE",{});var GMt=s(f6e);Qwr=r(GMt,"__init__()"),GMt.forEach(t),Wwr=r(uje," (throws an error)."),uje.forEach(t),Hwr=i(jl),Dt=n(jl,"DIV",{class:!0});var Tw=s(Dt);T(Z8.$$.fragment,Tw),Uwr=i(Tw),m6e=n(Tw,"P",{});var OMt=s(m6e);Jwr=r(OMt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),OMt.forEach(t),Ywr=i(Tw),kc=n(Tw,"P",{});var wZ=s(kc);Kwr=r(wZ,`Note:
Loading a model from its configuration file does `),g6e=n(wZ,"STRONG",{});var VMt=s(g6e);Zwr=r(VMt,"not"),VMt.forEach(t),eAr=r(wZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),JU=n(wZ,"A",{href:!0});var XMt=s(JU);oAr=r(XMt,"from_pretrained()"),XMt.forEach(t),rAr=r(wZ," to load the model weights."),wZ.forEach(t),tAr=i(Tw),T(TE.$$.fragment,Tw),Tw.forEach(t),aAr=i(jl),Dr=n(jl,"DIV",{class:!0});var Dl=s(Dr);T(ex.$$.fragment,Dl),nAr=i(Dl),h6e=n(Dl,"P",{});var zMt=s(h6e);sAr=r(zMt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),zMt.forEach(t),lAr=i(Dl),hn=n(Dl,"P",{});var Mw=s(hn);iAr=r(Mw,"The model class to instantiate is selected based on the "),p6e=n(Mw,"CODE",{});var QMt=s(p6e);dAr=r(QMt,"model_type"),QMt.forEach(t),cAr=r(Mw,` property of the config object (either
passed as an argument or loaded from `),u6e=n(Mw,"CODE",{});var WMt=s(u6e);fAr=r(WMt,"pretrained_model_name_or_path"),WMt.forEach(t),mAr=r(Mw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_6e=n(Mw,"CODE",{});var HMt=s(_6e);gAr=r(HMt,"pretrained_model_name_or_path"),HMt.forEach(t),hAr=r(Mw,":"),Mw.forEach(t),pAr=i(Dl),ke=n(Dl,"UL",{});var Oe=s(ke);ME=n(Oe,"LI",{});var oBe=s(ME);b6e=n(oBe,"STRONG",{});var UMt=s(b6e);uAr=r(UMt,"bart"),UMt.forEach(t),_Ar=r(oBe," \u2014 "),YU=n(oBe,"A",{href:!0});var JMt=s(YU);bAr=r(JMt,"FlaxBartForCausalLM"),JMt.forEach(t),vAr=r(oBe," (BART model)"),oBe.forEach(t),FAr=i(Oe),EE=n(Oe,"LI",{});var rBe=s(EE);v6e=n(rBe,"STRONG",{});var YMt=s(v6e);TAr=r(YMt,"bert"),YMt.forEach(t),MAr=r(rBe," \u2014 "),KU=n(rBe,"A",{href:!0});var KMt=s(KU);EAr=r(KMt,"FlaxBertForCausalLM"),KMt.forEach(t),CAr=r(rBe," (BERT model)"),rBe.forEach(t),wAr=i(Oe),CE=n(Oe,"LI",{});var tBe=s(CE);F6e=n(tBe,"STRONG",{});var ZMt=s(F6e);AAr=r(ZMt,"big_bird"),ZMt.forEach(t),yAr=r(tBe," \u2014 "),ZU=n(tBe,"A",{href:!0});var e4t=s(ZU);LAr=r(e4t,"FlaxBigBirdForCausalLM"),e4t.forEach(t),xAr=r(tBe," (BigBird model)"),tBe.forEach(t),$Ar=i(Oe),wE=n(Oe,"LI",{});var aBe=s(wE);T6e=n(aBe,"STRONG",{});var o4t=s(T6e);kAr=r(o4t,"electra"),o4t.forEach(t),SAr=r(aBe," \u2014 "),eJ=n(aBe,"A",{href:!0});var r4t=s(eJ);RAr=r(r4t,"FlaxElectraForCausalLM"),r4t.forEach(t),BAr=r(aBe," (ELECTRA model)"),aBe.forEach(t),PAr=i(Oe),AE=n(Oe,"LI",{});var nBe=s(AE);M6e=n(nBe,"STRONG",{});var t4t=s(M6e);IAr=r(t4t,"gpt2"),t4t.forEach(t),qAr=r(nBe," \u2014 "),oJ=n(nBe,"A",{href:!0});var a4t=s(oJ);NAr=r(a4t,"FlaxGPT2LMHeadModel"),a4t.forEach(t),jAr=r(nBe," (OpenAI GPT-2 model)"),nBe.forEach(t),DAr=i(Oe),yE=n(Oe,"LI",{});var sBe=s(yE);E6e=n(sBe,"STRONG",{});var n4t=s(E6e);GAr=r(n4t,"gpt_neo"),n4t.forEach(t),OAr=r(sBe," \u2014 "),rJ=n(sBe,"A",{href:!0});var s4t=s(rJ);VAr=r(s4t,"FlaxGPTNeoForCausalLM"),s4t.forEach(t),XAr=r(sBe," (GPT Neo model)"),sBe.forEach(t),zAr=i(Oe),LE=n(Oe,"LI",{});var lBe=s(LE);C6e=n(lBe,"STRONG",{});var l4t=s(C6e);QAr=r(l4t,"gptj"),l4t.forEach(t),WAr=r(lBe," \u2014 "),tJ=n(lBe,"A",{href:!0});var i4t=s(tJ);HAr=r(i4t,"FlaxGPTJForCausalLM"),i4t.forEach(t),UAr=r(lBe," (GPT-J model)"),lBe.forEach(t),JAr=i(Oe),xE=n(Oe,"LI",{});var iBe=s(xE);w6e=n(iBe,"STRONG",{});var d4t=s(w6e);YAr=r(d4t,"roberta"),d4t.forEach(t),KAr=r(iBe," \u2014 "),aJ=n(iBe,"A",{href:!0});var c4t=s(aJ);ZAr=r(c4t,"FlaxRobertaForCausalLM"),c4t.forEach(t),eyr=r(iBe," (RoBERTa model)"),iBe.forEach(t),oyr=i(Oe),$E=n(Oe,"LI",{});var dBe=s($E);A6e=n(dBe,"STRONG",{});var f4t=s(A6e);ryr=r(f4t,"xglm"),f4t.forEach(t),tyr=r(dBe," \u2014 "),nJ=n(dBe,"A",{href:!0});var m4t=s(nJ);ayr=r(m4t,"FlaxXGLMForCausalLM"),m4t.forEach(t),nyr=r(dBe," (XGLM model)"),dBe.forEach(t),Oe.forEach(t),syr=i(Dl),T(kE.$$.fragment,Dl),Dl.forEach(t),jl.forEach(t),cqe=i(f),Sc=n(f,"H2",{class:!0});var _je=s(Sc);SE=n(_je,"A",{id:!0,class:!0,href:!0});var g4t=s(SE);y6e=n(g4t,"SPAN",{});var h4t=s(y6e);T(ox.$$.fragment,h4t),h4t.forEach(t),g4t.forEach(t),lyr=i(_je),L6e=n(_je,"SPAN",{});var p4t=s(L6e);iyr=r(p4t,"FlaxAutoModelForPreTraining"),p4t.forEach(t),_je.forEach(t),fqe=i(f),gr=n(f,"DIV",{class:!0});var Gl=s(gr);T(rx.$$.fragment,Gl),dyr=i(Gl),Rc=n(Gl,"P",{});var AZ=s(Rc);cyr=r(AZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),sJ=n(AZ,"A",{href:!0});var u4t=s(sJ);fyr=r(u4t,"from_pretrained()"),u4t.forEach(t),myr=r(AZ," class method or the "),lJ=n(AZ,"A",{href:!0});var _4t=s(lJ);gyr=r(_4t,"from_config()"),_4t.forEach(t),hyr=r(AZ,` class
method.`),AZ.forEach(t),pyr=i(Gl),tx=n(Gl,"P",{});var bje=s(tx);uyr=r(bje,"This class cannot be instantiated directly using "),x6e=n(bje,"CODE",{});var b4t=s(x6e);_yr=r(b4t,"__init__()"),b4t.forEach(t),byr=r(bje," (throws an error)."),bje.forEach(t),vyr=i(Gl),Gt=n(Gl,"DIV",{class:!0});var Ew=s(Gt);T(ax.$$.fragment,Ew),Fyr=i(Ew),$6e=n(Ew,"P",{});var v4t=s($6e);Tyr=r(v4t,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),v4t.forEach(t),Myr=i(Ew),Bc=n(Ew,"P",{});var yZ=s(Bc);Eyr=r(yZ,`Note:
Loading a model from its configuration file does `),k6e=n(yZ,"STRONG",{});var F4t=s(k6e);Cyr=r(F4t,"not"),F4t.forEach(t),wyr=r(yZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),iJ=n(yZ,"A",{href:!0});var T4t=s(iJ);Ayr=r(T4t,"from_pretrained()"),T4t.forEach(t),yyr=r(yZ," to load the model weights."),yZ.forEach(t),Lyr=i(Ew),T(RE.$$.fragment,Ew),Ew.forEach(t),xyr=i(Gl),Gr=n(Gl,"DIV",{class:!0});var Ol=s(Gr);T(nx.$$.fragment,Ol),$yr=i(Ol),S6e=n(Ol,"P",{});var M4t=s(S6e);kyr=r(M4t,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),M4t.forEach(t),Syr=i(Ol),pn=n(Ol,"P",{});var Cw=s(pn);Ryr=r(Cw,"The model class to instantiate is selected based on the "),R6e=n(Cw,"CODE",{});var E4t=s(R6e);Byr=r(E4t,"model_type"),E4t.forEach(t),Pyr=r(Cw,` property of the config object (either
passed as an argument or loaded from `),B6e=n(Cw,"CODE",{});var C4t=s(B6e);Iyr=r(C4t,"pretrained_model_name_or_path"),C4t.forEach(t),qyr=r(Cw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),P6e=n(Cw,"CODE",{});var w4t=s(P6e);Nyr=r(w4t,"pretrained_model_name_or_path"),w4t.forEach(t),jyr=r(Cw,":"),Cw.forEach(t),Dyr=i(Ol),Me=n(Ol,"UL",{});var we=s(Me);BE=n(we,"LI",{});var cBe=s(BE);I6e=n(cBe,"STRONG",{});var A4t=s(I6e);Gyr=r(A4t,"albert"),A4t.forEach(t),Oyr=r(cBe," \u2014 "),dJ=n(cBe,"A",{href:!0});var y4t=s(dJ);Vyr=r(y4t,"FlaxAlbertForPreTraining"),y4t.forEach(t),Xyr=r(cBe," (ALBERT model)"),cBe.forEach(t),zyr=i(we),PE=n(we,"LI",{});var fBe=s(PE);q6e=n(fBe,"STRONG",{});var L4t=s(q6e);Qyr=r(L4t,"bart"),L4t.forEach(t),Wyr=r(fBe," \u2014 "),cJ=n(fBe,"A",{href:!0});var x4t=s(cJ);Hyr=r(x4t,"FlaxBartForConditionalGeneration"),x4t.forEach(t),Uyr=r(fBe," (BART model)"),fBe.forEach(t),Jyr=i(we),IE=n(we,"LI",{});var mBe=s(IE);N6e=n(mBe,"STRONG",{});var $4t=s(N6e);Yyr=r($4t,"bert"),$4t.forEach(t),Kyr=r(mBe," \u2014 "),fJ=n(mBe,"A",{href:!0});var k4t=s(fJ);Zyr=r(k4t,"FlaxBertForPreTraining"),k4t.forEach(t),eLr=r(mBe," (BERT model)"),mBe.forEach(t),oLr=i(we),qE=n(we,"LI",{});var gBe=s(qE);j6e=n(gBe,"STRONG",{});var S4t=s(j6e);rLr=r(S4t,"big_bird"),S4t.forEach(t),tLr=r(gBe," \u2014 "),mJ=n(gBe,"A",{href:!0});var R4t=s(mJ);aLr=r(R4t,"FlaxBigBirdForPreTraining"),R4t.forEach(t),nLr=r(gBe," (BigBird model)"),gBe.forEach(t),sLr=i(we),NE=n(we,"LI",{});var hBe=s(NE);D6e=n(hBe,"STRONG",{});var B4t=s(D6e);lLr=r(B4t,"electra"),B4t.forEach(t),iLr=r(hBe," \u2014 "),gJ=n(hBe,"A",{href:!0});var P4t=s(gJ);dLr=r(P4t,"FlaxElectraForPreTraining"),P4t.forEach(t),cLr=r(hBe," (ELECTRA model)"),hBe.forEach(t),fLr=i(we),jE=n(we,"LI",{});var pBe=s(jE);G6e=n(pBe,"STRONG",{});var I4t=s(G6e);mLr=r(I4t,"mbart"),I4t.forEach(t),gLr=r(pBe," \u2014 "),hJ=n(pBe,"A",{href:!0});var q4t=s(hJ);hLr=r(q4t,"FlaxMBartForConditionalGeneration"),q4t.forEach(t),pLr=r(pBe," (mBART model)"),pBe.forEach(t),uLr=i(we),DE=n(we,"LI",{});var uBe=s(DE);O6e=n(uBe,"STRONG",{});var N4t=s(O6e);_Lr=r(N4t,"mt5"),N4t.forEach(t),bLr=r(uBe," \u2014 "),pJ=n(uBe,"A",{href:!0});var j4t=s(pJ);vLr=r(j4t,"FlaxMT5ForConditionalGeneration"),j4t.forEach(t),FLr=r(uBe," (mT5 model)"),uBe.forEach(t),TLr=i(we),GE=n(we,"LI",{});var _Be=s(GE);V6e=n(_Be,"STRONG",{});var D4t=s(V6e);MLr=r(D4t,"roberta"),D4t.forEach(t),ELr=r(_Be," \u2014 "),uJ=n(_Be,"A",{href:!0});var G4t=s(uJ);CLr=r(G4t,"FlaxRobertaForMaskedLM"),G4t.forEach(t),wLr=r(_Be," (RoBERTa model)"),_Be.forEach(t),ALr=i(we),OE=n(we,"LI",{});var bBe=s(OE);X6e=n(bBe,"STRONG",{});var O4t=s(X6e);yLr=r(O4t,"roformer"),O4t.forEach(t),LLr=r(bBe," \u2014 "),_J=n(bBe,"A",{href:!0});var V4t=s(_J);xLr=r(V4t,"FlaxRoFormerForMaskedLM"),V4t.forEach(t),$Lr=r(bBe," (RoFormer model)"),bBe.forEach(t),kLr=i(we),VE=n(we,"LI",{});var vBe=s(VE);z6e=n(vBe,"STRONG",{});var X4t=s(z6e);SLr=r(X4t,"t5"),X4t.forEach(t),RLr=r(vBe," \u2014 "),bJ=n(vBe,"A",{href:!0});var z4t=s(bJ);BLr=r(z4t,"FlaxT5ForConditionalGeneration"),z4t.forEach(t),PLr=r(vBe," (T5 model)"),vBe.forEach(t),ILr=i(we),XE=n(we,"LI",{});var FBe=s(XE);Q6e=n(FBe,"STRONG",{});var Q4t=s(Q6e);qLr=r(Q4t,"wav2vec2"),Q4t.forEach(t),NLr=r(FBe," \u2014 "),vJ=n(FBe,"A",{href:!0});var W4t=s(vJ);jLr=r(W4t,"FlaxWav2Vec2ForPreTraining"),W4t.forEach(t),DLr=r(FBe," (Wav2Vec2 model)"),FBe.forEach(t),GLr=i(we),zE=n(we,"LI",{});var TBe=s(zE);W6e=n(TBe,"STRONG",{});var H4t=s(W6e);OLr=r(H4t,"xlm-roberta"),H4t.forEach(t),VLr=r(TBe," \u2014 "),FJ=n(TBe,"A",{href:!0});var U4t=s(FJ);XLr=r(U4t,"FlaxXLMRobertaForMaskedLM"),U4t.forEach(t),zLr=r(TBe," (XLM-RoBERTa model)"),TBe.forEach(t),we.forEach(t),QLr=i(Ol),T(QE.$$.fragment,Ol),Ol.forEach(t),Gl.forEach(t),mqe=i(f),Pc=n(f,"H2",{class:!0});var vje=s(Pc);WE=n(vje,"A",{id:!0,class:!0,href:!0});var J4t=s(WE);H6e=n(J4t,"SPAN",{});var Y4t=s(H6e);T(sx.$$.fragment,Y4t),Y4t.forEach(t),J4t.forEach(t),WLr=i(vje),U6e=n(vje,"SPAN",{});var K4t=s(U6e);HLr=r(K4t,"FlaxAutoModelForMaskedLM"),K4t.forEach(t),vje.forEach(t),gqe=i(f),hr=n(f,"DIV",{class:!0});var Vl=s(hr);T(lx.$$.fragment,Vl),ULr=i(Vl),Ic=n(Vl,"P",{});var LZ=s(Ic);JLr=r(LZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),TJ=n(LZ,"A",{href:!0});var Z4t=s(TJ);YLr=r(Z4t,"from_pretrained()"),Z4t.forEach(t),KLr=r(LZ," class method or the "),MJ=n(LZ,"A",{href:!0});var eEt=s(MJ);ZLr=r(eEt,"from_config()"),eEt.forEach(t),e8r=r(LZ,` class
method.`),LZ.forEach(t),o8r=i(Vl),ix=n(Vl,"P",{});var Fje=s(ix);r8r=r(Fje,"This class cannot be instantiated directly using "),J6e=n(Fje,"CODE",{});var oEt=s(J6e);t8r=r(oEt,"__init__()"),oEt.forEach(t),a8r=r(Fje," (throws an error)."),Fje.forEach(t),n8r=i(Vl),Ot=n(Vl,"DIV",{class:!0});var ww=s(Ot);T(dx.$$.fragment,ww),s8r=i(ww),Y6e=n(ww,"P",{});var rEt=s(Y6e);l8r=r(rEt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),rEt.forEach(t),i8r=i(ww),qc=n(ww,"P",{});var xZ=s(qc);d8r=r(xZ,`Note:
Loading a model from its configuration file does `),K6e=n(xZ,"STRONG",{});var tEt=s(K6e);c8r=r(tEt,"not"),tEt.forEach(t),f8r=r(xZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),EJ=n(xZ,"A",{href:!0});var aEt=s(EJ);m8r=r(aEt,"from_pretrained()"),aEt.forEach(t),g8r=r(xZ," to load the model weights."),xZ.forEach(t),h8r=i(ww),T(HE.$$.fragment,ww),ww.forEach(t),p8r=i(Vl),Or=n(Vl,"DIV",{class:!0});var Xl=s(Or);T(cx.$$.fragment,Xl),u8r=i(Xl),Z6e=n(Xl,"P",{});var nEt=s(Z6e);_8r=r(nEt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),nEt.forEach(t),b8r=i(Xl),un=n(Xl,"P",{});var Aw=s(un);v8r=r(Aw,"The model class to instantiate is selected based on the "),eTe=n(Aw,"CODE",{});var sEt=s(eTe);F8r=r(sEt,"model_type"),sEt.forEach(t),T8r=r(Aw,` property of the config object (either
passed as an argument or loaded from `),oTe=n(Aw,"CODE",{});var lEt=s(oTe);M8r=r(lEt,"pretrained_model_name_or_path"),lEt.forEach(t),E8r=r(Aw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rTe=n(Aw,"CODE",{});var iEt=s(rTe);C8r=r(iEt,"pretrained_model_name_or_path"),iEt.forEach(t),w8r=r(Aw,":"),Aw.forEach(t),A8r=i(Xl),Le=n(Xl,"UL",{});var Be=s(Le);UE=n(Be,"LI",{});var MBe=s(UE);tTe=n(MBe,"STRONG",{});var dEt=s(tTe);y8r=r(dEt,"albert"),dEt.forEach(t),L8r=r(MBe," \u2014 "),CJ=n(MBe,"A",{href:!0});var cEt=s(CJ);x8r=r(cEt,"FlaxAlbertForMaskedLM"),cEt.forEach(t),$8r=r(MBe," (ALBERT model)"),MBe.forEach(t),k8r=i(Be),JE=n(Be,"LI",{});var EBe=s(JE);aTe=n(EBe,"STRONG",{});var fEt=s(aTe);S8r=r(fEt,"bart"),fEt.forEach(t),R8r=r(EBe," \u2014 "),wJ=n(EBe,"A",{href:!0});var mEt=s(wJ);B8r=r(mEt,"FlaxBartForConditionalGeneration"),mEt.forEach(t),P8r=r(EBe," (BART model)"),EBe.forEach(t),I8r=i(Be),YE=n(Be,"LI",{});var CBe=s(YE);nTe=n(CBe,"STRONG",{});var gEt=s(nTe);q8r=r(gEt,"bert"),gEt.forEach(t),N8r=r(CBe," \u2014 "),AJ=n(CBe,"A",{href:!0});var hEt=s(AJ);j8r=r(hEt,"FlaxBertForMaskedLM"),hEt.forEach(t),D8r=r(CBe," (BERT model)"),CBe.forEach(t),G8r=i(Be),KE=n(Be,"LI",{});var wBe=s(KE);sTe=n(wBe,"STRONG",{});var pEt=s(sTe);O8r=r(pEt,"big_bird"),pEt.forEach(t),V8r=r(wBe," \u2014 "),yJ=n(wBe,"A",{href:!0});var uEt=s(yJ);X8r=r(uEt,"FlaxBigBirdForMaskedLM"),uEt.forEach(t),z8r=r(wBe," (BigBird model)"),wBe.forEach(t),Q8r=i(Be),ZE=n(Be,"LI",{});var ABe=s(ZE);lTe=n(ABe,"STRONG",{});var _Et=s(lTe);W8r=r(_Et,"distilbert"),_Et.forEach(t),H8r=r(ABe," \u2014 "),LJ=n(ABe,"A",{href:!0});var bEt=s(LJ);U8r=r(bEt,"FlaxDistilBertForMaskedLM"),bEt.forEach(t),J8r=r(ABe," (DistilBERT model)"),ABe.forEach(t),Y8r=i(Be),e5=n(Be,"LI",{});var yBe=s(e5);iTe=n(yBe,"STRONG",{});var vEt=s(iTe);K8r=r(vEt,"electra"),vEt.forEach(t),Z8r=r(yBe," \u2014 "),xJ=n(yBe,"A",{href:!0});var FEt=s(xJ);exr=r(FEt,"FlaxElectraForMaskedLM"),FEt.forEach(t),oxr=r(yBe," (ELECTRA model)"),yBe.forEach(t),rxr=i(Be),o5=n(Be,"LI",{});var LBe=s(o5);dTe=n(LBe,"STRONG",{});var TEt=s(dTe);txr=r(TEt,"mbart"),TEt.forEach(t),axr=r(LBe," \u2014 "),$J=n(LBe,"A",{href:!0});var MEt=s($J);nxr=r(MEt,"FlaxMBartForConditionalGeneration"),MEt.forEach(t),sxr=r(LBe," (mBART model)"),LBe.forEach(t),lxr=i(Be),r5=n(Be,"LI",{});var xBe=s(r5);cTe=n(xBe,"STRONG",{});var EEt=s(cTe);ixr=r(EEt,"roberta"),EEt.forEach(t),dxr=r(xBe," \u2014 "),kJ=n(xBe,"A",{href:!0});var CEt=s(kJ);cxr=r(CEt,"FlaxRobertaForMaskedLM"),CEt.forEach(t),fxr=r(xBe," (RoBERTa model)"),xBe.forEach(t),mxr=i(Be),t5=n(Be,"LI",{});var $Be=s(t5);fTe=n($Be,"STRONG",{});var wEt=s(fTe);gxr=r(wEt,"roformer"),wEt.forEach(t),hxr=r($Be," \u2014 "),SJ=n($Be,"A",{href:!0});var AEt=s(SJ);pxr=r(AEt,"FlaxRoFormerForMaskedLM"),AEt.forEach(t),uxr=r($Be," (RoFormer model)"),$Be.forEach(t),_xr=i(Be),a5=n(Be,"LI",{});var kBe=s(a5);mTe=n(kBe,"STRONG",{});var yEt=s(mTe);bxr=r(yEt,"xlm-roberta"),yEt.forEach(t),vxr=r(kBe," \u2014 "),RJ=n(kBe,"A",{href:!0});var LEt=s(RJ);Fxr=r(LEt,"FlaxXLMRobertaForMaskedLM"),LEt.forEach(t),Txr=r(kBe," (XLM-RoBERTa model)"),kBe.forEach(t),Be.forEach(t),Mxr=i(Xl),T(n5.$$.fragment,Xl),Xl.forEach(t),Vl.forEach(t),hqe=i(f),Nc=n(f,"H2",{class:!0});var Tje=s(Nc);s5=n(Tje,"A",{id:!0,class:!0,href:!0});var xEt=s(s5);gTe=n(xEt,"SPAN",{});var $Et=s(gTe);T(fx.$$.fragment,$Et),$Et.forEach(t),xEt.forEach(t),Exr=i(Tje),hTe=n(Tje,"SPAN",{});var kEt=s(hTe);Cxr=r(kEt,"FlaxAutoModelForSeq2SeqLM"),kEt.forEach(t),Tje.forEach(t),pqe=i(f),pr=n(f,"DIV",{class:!0});var zl=s(pr);T(mx.$$.fragment,zl),wxr=i(zl),jc=n(zl,"P",{});var $Z=s(jc);Axr=r($Z,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),BJ=n($Z,"A",{href:!0});var SEt=s(BJ);yxr=r(SEt,"from_pretrained()"),SEt.forEach(t),Lxr=r($Z," class method or the "),PJ=n($Z,"A",{href:!0});var REt=s(PJ);xxr=r(REt,"from_config()"),REt.forEach(t),$xr=r($Z,` class
method.`),$Z.forEach(t),kxr=i(zl),gx=n(zl,"P",{});var Mje=s(gx);Sxr=r(Mje,"This class cannot be instantiated directly using "),pTe=n(Mje,"CODE",{});var BEt=s(pTe);Rxr=r(BEt,"__init__()"),BEt.forEach(t),Bxr=r(Mje," (throws an error)."),Mje.forEach(t),Pxr=i(zl),Vt=n(zl,"DIV",{class:!0});var yw=s(Vt);T(hx.$$.fragment,yw),Ixr=i(yw),uTe=n(yw,"P",{});var PEt=s(uTe);qxr=r(PEt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),PEt.forEach(t),Nxr=i(yw),Dc=n(yw,"P",{});var kZ=s(Dc);jxr=r(kZ,`Note:
Loading a model from its configuration file does `),_Te=n(kZ,"STRONG",{});var IEt=s(_Te);Dxr=r(IEt,"not"),IEt.forEach(t),Gxr=r(kZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),IJ=n(kZ,"A",{href:!0});var qEt=s(IJ);Oxr=r(qEt,"from_pretrained()"),qEt.forEach(t),Vxr=r(kZ," to load the model weights."),kZ.forEach(t),Xxr=i(yw),T(l5.$$.fragment,yw),yw.forEach(t),zxr=i(zl),Vr=n(zl,"DIV",{class:!0});var Ql=s(Vr);T(px.$$.fragment,Ql),Qxr=i(Ql),bTe=n(Ql,"P",{});var NEt=s(bTe);Wxr=r(NEt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),NEt.forEach(t),Hxr=i(Ql),_n=n(Ql,"P",{});var Lw=s(_n);Uxr=r(Lw,"The model class to instantiate is selected based on the "),vTe=n(Lw,"CODE",{});var jEt=s(vTe);Jxr=r(jEt,"model_type"),jEt.forEach(t),Yxr=r(Lw,` property of the config object (either
passed as an argument or loaded from `),FTe=n(Lw,"CODE",{});var DEt=s(FTe);Kxr=r(DEt,"pretrained_model_name_or_path"),DEt.forEach(t),Zxr=r(Lw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),TTe=n(Lw,"CODE",{});var GEt=s(TTe);e9r=r(GEt,"pretrained_model_name_or_path"),GEt.forEach(t),o9r=r(Lw,":"),Lw.forEach(t),r9r=i(Ql),Se=n(Ql,"UL",{});var Ve=s(Se);i5=n(Ve,"LI",{});var SBe=s(i5);MTe=n(SBe,"STRONG",{});var OEt=s(MTe);t9r=r(OEt,"bart"),OEt.forEach(t),a9r=r(SBe," \u2014 "),qJ=n(SBe,"A",{href:!0});var VEt=s(qJ);n9r=r(VEt,"FlaxBartForConditionalGeneration"),VEt.forEach(t),s9r=r(SBe," (BART model)"),SBe.forEach(t),l9r=i(Ve),d5=n(Ve,"LI",{});var RBe=s(d5);ETe=n(RBe,"STRONG",{});var XEt=s(ETe);i9r=r(XEt,"blenderbot"),XEt.forEach(t),d9r=r(RBe," \u2014 "),NJ=n(RBe,"A",{href:!0});var zEt=s(NJ);c9r=r(zEt,"FlaxBlenderbotForConditionalGeneration"),zEt.forEach(t),f9r=r(RBe," (Blenderbot model)"),RBe.forEach(t),m9r=i(Ve),c5=n(Ve,"LI",{});var BBe=s(c5);CTe=n(BBe,"STRONG",{});var QEt=s(CTe);g9r=r(QEt,"blenderbot-small"),QEt.forEach(t),h9r=r(BBe," \u2014 "),jJ=n(BBe,"A",{href:!0});var WEt=s(jJ);p9r=r(WEt,"FlaxBlenderbotSmallForConditionalGeneration"),WEt.forEach(t),u9r=r(BBe," (BlenderbotSmall model)"),BBe.forEach(t),_9r=i(Ve),f5=n(Ve,"LI",{});var PBe=s(f5);wTe=n(PBe,"STRONG",{});var HEt=s(wTe);b9r=r(HEt,"encoder-decoder"),HEt.forEach(t),v9r=r(PBe," \u2014 "),DJ=n(PBe,"A",{href:!0});var UEt=s(DJ);F9r=r(UEt,"FlaxEncoderDecoderModel"),UEt.forEach(t),T9r=r(PBe," (Encoder decoder model)"),PBe.forEach(t),M9r=i(Ve),m5=n(Ve,"LI",{});var IBe=s(m5);ATe=n(IBe,"STRONG",{});var JEt=s(ATe);E9r=r(JEt,"marian"),JEt.forEach(t),C9r=r(IBe," \u2014 "),GJ=n(IBe,"A",{href:!0});var YEt=s(GJ);w9r=r(YEt,"FlaxMarianMTModel"),YEt.forEach(t),A9r=r(IBe," (Marian model)"),IBe.forEach(t),y9r=i(Ve),g5=n(Ve,"LI",{});var qBe=s(g5);yTe=n(qBe,"STRONG",{});var KEt=s(yTe);L9r=r(KEt,"mbart"),KEt.forEach(t),x9r=r(qBe," \u2014 "),OJ=n(qBe,"A",{href:!0});var ZEt=s(OJ);$9r=r(ZEt,"FlaxMBartForConditionalGeneration"),ZEt.forEach(t),k9r=r(qBe," (mBART model)"),qBe.forEach(t),S9r=i(Ve),h5=n(Ve,"LI",{});var NBe=s(h5);LTe=n(NBe,"STRONG",{});var e5t=s(LTe);R9r=r(e5t,"mt5"),e5t.forEach(t),B9r=r(NBe," \u2014 "),VJ=n(NBe,"A",{href:!0});var o5t=s(VJ);P9r=r(o5t,"FlaxMT5ForConditionalGeneration"),o5t.forEach(t),I9r=r(NBe," (mT5 model)"),NBe.forEach(t),q9r=i(Ve),p5=n(Ve,"LI",{});var jBe=s(p5);xTe=n(jBe,"STRONG",{});var r5t=s(xTe);N9r=r(r5t,"pegasus"),r5t.forEach(t),j9r=r(jBe," \u2014 "),XJ=n(jBe,"A",{href:!0});var t5t=s(XJ);D9r=r(t5t,"FlaxPegasusForConditionalGeneration"),t5t.forEach(t),G9r=r(jBe," (Pegasus model)"),jBe.forEach(t),O9r=i(Ve),u5=n(Ve,"LI",{});var DBe=s(u5);$Te=n(DBe,"STRONG",{});var a5t=s($Te);V9r=r(a5t,"t5"),a5t.forEach(t),X9r=r(DBe," \u2014 "),zJ=n(DBe,"A",{href:!0});var n5t=s(zJ);z9r=r(n5t,"FlaxT5ForConditionalGeneration"),n5t.forEach(t),Q9r=r(DBe," (T5 model)"),DBe.forEach(t),Ve.forEach(t),W9r=i(Ql),T(_5.$$.fragment,Ql),Ql.forEach(t),zl.forEach(t),uqe=i(f),Gc=n(f,"H2",{class:!0});var Eje=s(Gc);b5=n(Eje,"A",{id:!0,class:!0,href:!0});var s5t=s(b5);kTe=n(s5t,"SPAN",{});var l5t=s(kTe);T(ux.$$.fragment,l5t),l5t.forEach(t),s5t.forEach(t),H9r=i(Eje),STe=n(Eje,"SPAN",{});var i5t=s(STe);U9r=r(i5t,"FlaxAutoModelForSequenceClassification"),i5t.forEach(t),Eje.forEach(t),_qe=i(f),ur=n(f,"DIV",{class:!0});var Wl=s(ur);T(_x.$$.fragment,Wl),J9r=i(Wl),Oc=n(Wl,"P",{});var SZ=s(Oc);Y9r=r(SZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),QJ=n(SZ,"A",{href:!0});var d5t=s(QJ);K9r=r(d5t,"from_pretrained()"),d5t.forEach(t),Z9r=r(SZ," class method or the "),WJ=n(SZ,"A",{href:!0});var c5t=s(WJ);e$r=r(c5t,"from_config()"),c5t.forEach(t),o$r=r(SZ,` class
method.`),SZ.forEach(t),r$r=i(Wl),bx=n(Wl,"P",{});var Cje=s(bx);t$r=r(Cje,"This class cannot be instantiated directly using "),RTe=n(Cje,"CODE",{});var f5t=s(RTe);a$r=r(f5t,"__init__()"),f5t.forEach(t),n$r=r(Cje," (throws an error)."),Cje.forEach(t),s$r=i(Wl),Xt=n(Wl,"DIV",{class:!0});var xw=s(Xt);T(vx.$$.fragment,xw),l$r=i(xw),BTe=n(xw,"P",{});var m5t=s(BTe);i$r=r(m5t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),m5t.forEach(t),d$r=i(xw),Vc=n(xw,"P",{});var RZ=s(Vc);c$r=r(RZ,`Note:
Loading a model from its configuration file does `),PTe=n(RZ,"STRONG",{});var g5t=s(PTe);f$r=r(g5t,"not"),g5t.forEach(t),m$r=r(RZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),HJ=n(RZ,"A",{href:!0});var h5t=s(HJ);g$r=r(h5t,"from_pretrained()"),h5t.forEach(t),h$r=r(RZ," to load the model weights."),RZ.forEach(t),p$r=i(xw),T(v5.$$.fragment,xw),xw.forEach(t),u$r=i(Wl),Xr=n(Wl,"DIV",{class:!0});var Hl=s(Xr);T(Fx.$$.fragment,Hl),_$r=i(Hl),ITe=n(Hl,"P",{});var p5t=s(ITe);b$r=r(p5t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),p5t.forEach(t),v$r=i(Hl),bn=n(Hl,"P",{});var $w=s(bn);F$r=r($w,"The model class to instantiate is selected based on the "),qTe=n($w,"CODE",{});var u5t=s(qTe);T$r=r(u5t,"model_type"),u5t.forEach(t),M$r=r($w,` property of the config object (either
passed as an argument or loaded from `),NTe=n($w,"CODE",{});var _5t=s(NTe);E$r=r(_5t,"pretrained_model_name_or_path"),_5t.forEach(t),C$r=r($w,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jTe=n($w,"CODE",{});var b5t=s(jTe);w$r=r(b5t,"pretrained_model_name_or_path"),b5t.forEach(t),A$r=r($w,":"),$w.forEach(t),y$r=i(Hl),xe=n(Hl,"UL",{});var Pe=s(xe);F5=n(Pe,"LI",{});var GBe=s(F5);DTe=n(GBe,"STRONG",{});var v5t=s(DTe);L$r=r(v5t,"albert"),v5t.forEach(t),x$r=r(GBe," \u2014 "),UJ=n(GBe,"A",{href:!0});var F5t=s(UJ);$$r=r(F5t,"FlaxAlbertForSequenceClassification"),F5t.forEach(t),k$r=r(GBe," (ALBERT model)"),GBe.forEach(t),S$r=i(Pe),T5=n(Pe,"LI",{});var OBe=s(T5);GTe=n(OBe,"STRONG",{});var T5t=s(GTe);R$r=r(T5t,"bart"),T5t.forEach(t),B$r=r(OBe," \u2014 "),JJ=n(OBe,"A",{href:!0});var M5t=s(JJ);P$r=r(M5t,"FlaxBartForSequenceClassification"),M5t.forEach(t),I$r=r(OBe," (BART model)"),OBe.forEach(t),q$r=i(Pe),M5=n(Pe,"LI",{});var VBe=s(M5);OTe=n(VBe,"STRONG",{});var E5t=s(OTe);N$r=r(E5t,"bert"),E5t.forEach(t),j$r=r(VBe," \u2014 "),YJ=n(VBe,"A",{href:!0});var C5t=s(YJ);D$r=r(C5t,"FlaxBertForSequenceClassification"),C5t.forEach(t),G$r=r(VBe," (BERT model)"),VBe.forEach(t),O$r=i(Pe),E5=n(Pe,"LI",{});var XBe=s(E5);VTe=n(XBe,"STRONG",{});var w5t=s(VTe);V$r=r(w5t,"big_bird"),w5t.forEach(t),X$r=r(XBe," \u2014 "),KJ=n(XBe,"A",{href:!0});var A5t=s(KJ);z$r=r(A5t,"FlaxBigBirdForSequenceClassification"),A5t.forEach(t),Q$r=r(XBe," (BigBird model)"),XBe.forEach(t),W$r=i(Pe),C5=n(Pe,"LI",{});var zBe=s(C5);XTe=n(zBe,"STRONG",{});var y5t=s(XTe);H$r=r(y5t,"distilbert"),y5t.forEach(t),U$r=r(zBe," \u2014 "),ZJ=n(zBe,"A",{href:!0});var L5t=s(ZJ);J$r=r(L5t,"FlaxDistilBertForSequenceClassification"),L5t.forEach(t),Y$r=r(zBe," (DistilBERT model)"),zBe.forEach(t),K$r=i(Pe),w5=n(Pe,"LI",{});var QBe=s(w5);zTe=n(QBe,"STRONG",{});var x5t=s(zTe);Z$r=r(x5t,"electra"),x5t.forEach(t),ekr=r(QBe," \u2014 "),eY=n(QBe,"A",{href:!0});var $5t=s(eY);okr=r($5t,"FlaxElectraForSequenceClassification"),$5t.forEach(t),rkr=r(QBe," (ELECTRA model)"),QBe.forEach(t),tkr=i(Pe),A5=n(Pe,"LI",{});var WBe=s(A5);QTe=n(WBe,"STRONG",{});var k5t=s(QTe);akr=r(k5t,"mbart"),k5t.forEach(t),nkr=r(WBe," \u2014 "),oY=n(WBe,"A",{href:!0});var S5t=s(oY);skr=r(S5t,"FlaxMBartForSequenceClassification"),S5t.forEach(t),lkr=r(WBe," (mBART model)"),WBe.forEach(t),ikr=i(Pe),y5=n(Pe,"LI",{});var HBe=s(y5);WTe=n(HBe,"STRONG",{});var R5t=s(WTe);dkr=r(R5t,"roberta"),R5t.forEach(t),ckr=r(HBe," \u2014 "),rY=n(HBe,"A",{href:!0});var B5t=s(rY);fkr=r(B5t,"FlaxRobertaForSequenceClassification"),B5t.forEach(t),mkr=r(HBe," (RoBERTa model)"),HBe.forEach(t),gkr=i(Pe),L5=n(Pe,"LI",{});var UBe=s(L5);HTe=n(UBe,"STRONG",{});var P5t=s(HTe);hkr=r(P5t,"roformer"),P5t.forEach(t),pkr=r(UBe," \u2014 "),tY=n(UBe,"A",{href:!0});var I5t=s(tY);ukr=r(I5t,"FlaxRoFormerForSequenceClassification"),I5t.forEach(t),_kr=r(UBe," (RoFormer model)"),UBe.forEach(t),bkr=i(Pe),x5=n(Pe,"LI",{});var JBe=s(x5);UTe=n(JBe,"STRONG",{});var q5t=s(UTe);vkr=r(q5t,"xlm-roberta"),q5t.forEach(t),Fkr=r(JBe," \u2014 "),aY=n(JBe,"A",{href:!0});var N5t=s(aY);Tkr=r(N5t,"FlaxXLMRobertaForSequenceClassification"),N5t.forEach(t),Mkr=r(JBe," (XLM-RoBERTa model)"),JBe.forEach(t),Pe.forEach(t),Ekr=i(Hl),T($5.$$.fragment,Hl),Hl.forEach(t),Wl.forEach(t),bqe=i(f),Xc=n(f,"H2",{class:!0});var wje=s(Xc);k5=n(wje,"A",{id:!0,class:!0,href:!0});var j5t=s(k5);JTe=n(j5t,"SPAN",{});var D5t=s(JTe);T(Tx.$$.fragment,D5t),D5t.forEach(t),j5t.forEach(t),Ckr=i(wje),YTe=n(wje,"SPAN",{});var G5t=s(YTe);wkr=r(G5t,"FlaxAutoModelForQuestionAnswering"),G5t.forEach(t),wje.forEach(t),vqe=i(f),_r=n(f,"DIV",{class:!0});var Ul=s(_r);T(Mx.$$.fragment,Ul),Akr=i(Ul),zc=n(Ul,"P",{});var BZ=s(zc);ykr=r(BZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),nY=n(BZ,"A",{href:!0});var O5t=s(nY);Lkr=r(O5t,"from_pretrained()"),O5t.forEach(t),xkr=r(BZ," class method or the "),sY=n(BZ,"A",{href:!0});var V5t=s(sY);$kr=r(V5t,"from_config()"),V5t.forEach(t),kkr=r(BZ,` class
method.`),BZ.forEach(t),Skr=i(Ul),Ex=n(Ul,"P",{});var Aje=s(Ex);Rkr=r(Aje,"This class cannot be instantiated directly using "),KTe=n(Aje,"CODE",{});var X5t=s(KTe);Bkr=r(X5t,"__init__()"),X5t.forEach(t),Pkr=r(Aje," (throws an error)."),Aje.forEach(t),Ikr=i(Ul),zt=n(Ul,"DIV",{class:!0});var kw=s(zt);T(Cx.$$.fragment,kw),qkr=i(kw),ZTe=n(kw,"P",{});var z5t=s(ZTe);Nkr=r(z5t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),z5t.forEach(t),jkr=i(kw),Qc=n(kw,"P",{});var PZ=s(Qc);Dkr=r(PZ,`Note:
Loading a model from its configuration file does `),e7e=n(PZ,"STRONG",{});var Q5t=s(e7e);Gkr=r(Q5t,"not"),Q5t.forEach(t),Okr=r(PZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),lY=n(PZ,"A",{href:!0});var W5t=s(lY);Vkr=r(W5t,"from_pretrained()"),W5t.forEach(t),Xkr=r(PZ," to load the model weights."),PZ.forEach(t),zkr=i(kw),T(S5.$$.fragment,kw),kw.forEach(t),Qkr=i(Ul),zr=n(Ul,"DIV",{class:!0});var Jl=s(zr);T(wx.$$.fragment,Jl),Wkr=i(Jl),o7e=n(Jl,"P",{});var H5t=s(o7e);Hkr=r(H5t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),H5t.forEach(t),Ukr=i(Jl),vn=n(Jl,"P",{});var Sw=s(vn);Jkr=r(Sw,"The model class to instantiate is selected based on the "),r7e=n(Sw,"CODE",{});var U5t=s(r7e);Ykr=r(U5t,"model_type"),U5t.forEach(t),Kkr=r(Sw,` property of the config object (either
passed as an argument or loaded from `),t7e=n(Sw,"CODE",{});var J5t=s(t7e);Zkr=r(J5t,"pretrained_model_name_or_path"),J5t.forEach(t),eSr=r(Sw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),a7e=n(Sw,"CODE",{});var Y5t=s(a7e);oSr=r(Y5t,"pretrained_model_name_or_path"),Y5t.forEach(t),rSr=r(Sw,":"),Sw.forEach(t),tSr=i(Jl),$e=n(Jl,"UL",{});var Ie=s($e);R5=n(Ie,"LI",{});var YBe=s(R5);n7e=n(YBe,"STRONG",{});var K5t=s(n7e);aSr=r(K5t,"albert"),K5t.forEach(t),nSr=r(YBe," \u2014 "),iY=n(YBe,"A",{href:!0});var Z5t=s(iY);sSr=r(Z5t,"FlaxAlbertForQuestionAnswering"),Z5t.forEach(t),lSr=r(YBe," (ALBERT model)"),YBe.forEach(t),iSr=i(Ie),B5=n(Ie,"LI",{});var KBe=s(B5);s7e=n(KBe,"STRONG",{});var eCt=s(s7e);dSr=r(eCt,"bart"),eCt.forEach(t),cSr=r(KBe," \u2014 "),dY=n(KBe,"A",{href:!0});var oCt=s(dY);fSr=r(oCt,"FlaxBartForQuestionAnswering"),oCt.forEach(t),mSr=r(KBe," (BART model)"),KBe.forEach(t),gSr=i(Ie),P5=n(Ie,"LI",{});var ZBe=s(P5);l7e=n(ZBe,"STRONG",{});var rCt=s(l7e);hSr=r(rCt,"bert"),rCt.forEach(t),pSr=r(ZBe," \u2014 "),cY=n(ZBe,"A",{href:!0});var tCt=s(cY);uSr=r(tCt,"FlaxBertForQuestionAnswering"),tCt.forEach(t),_Sr=r(ZBe," (BERT model)"),ZBe.forEach(t),bSr=i(Ie),I5=n(Ie,"LI",{});var ePe=s(I5);i7e=n(ePe,"STRONG",{});var aCt=s(i7e);vSr=r(aCt,"big_bird"),aCt.forEach(t),FSr=r(ePe," \u2014 "),fY=n(ePe,"A",{href:!0});var nCt=s(fY);TSr=r(nCt,"FlaxBigBirdForQuestionAnswering"),nCt.forEach(t),MSr=r(ePe," (BigBird model)"),ePe.forEach(t),ESr=i(Ie),q5=n(Ie,"LI",{});var oPe=s(q5);d7e=n(oPe,"STRONG",{});var sCt=s(d7e);CSr=r(sCt,"distilbert"),sCt.forEach(t),wSr=r(oPe," \u2014 "),mY=n(oPe,"A",{href:!0});var lCt=s(mY);ASr=r(lCt,"FlaxDistilBertForQuestionAnswering"),lCt.forEach(t),ySr=r(oPe," (DistilBERT model)"),oPe.forEach(t),LSr=i(Ie),N5=n(Ie,"LI",{});var rPe=s(N5);c7e=n(rPe,"STRONG",{});var iCt=s(c7e);xSr=r(iCt,"electra"),iCt.forEach(t),$Sr=r(rPe," \u2014 "),gY=n(rPe,"A",{href:!0});var dCt=s(gY);kSr=r(dCt,"FlaxElectraForQuestionAnswering"),dCt.forEach(t),SSr=r(rPe," (ELECTRA model)"),rPe.forEach(t),RSr=i(Ie),j5=n(Ie,"LI",{});var tPe=s(j5);f7e=n(tPe,"STRONG",{});var cCt=s(f7e);BSr=r(cCt,"mbart"),cCt.forEach(t),PSr=r(tPe," \u2014 "),hY=n(tPe,"A",{href:!0});var fCt=s(hY);ISr=r(fCt,"FlaxMBartForQuestionAnswering"),fCt.forEach(t),qSr=r(tPe," (mBART model)"),tPe.forEach(t),NSr=i(Ie),D5=n(Ie,"LI",{});var aPe=s(D5);m7e=n(aPe,"STRONG",{});var mCt=s(m7e);jSr=r(mCt,"roberta"),mCt.forEach(t),DSr=r(aPe," \u2014 "),pY=n(aPe,"A",{href:!0});var gCt=s(pY);GSr=r(gCt,"FlaxRobertaForQuestionAnswering"),gCt.forEach(t),OSr=r(aPe," (RoBERTa model)"),aPe.forEach(t),VSr=i(Ie),G5=n(Ie,"LI",{});var nPe=s(G5);g7e=n(nPe,"STRONG",{});var hCt=s(g7e);XSr=r(hCt,"roformer"),hCt.forEach(t),zSr=r(nPe," \u2014 "),uY=n(nPe,"A",{href:!0});var pCt=s(uY);QSr=r(pCt,"FlaxRoFormerForQuestionAnswering"),pCt.forEach(t),WSr=r(nPe," (RoFormer model)"),nPe.forEach(t),HSr=i(Ie),O5=n(Ie,"LI",{});var sPe=s(O5);h7e=n(sPe,"STRONG",{});var uCt=s(h7e);USr=r(uCt,"xlm-roberta"),uCt.forEach(t),JSr=r(sPe," \u2014 "),_Y=n(sPe,"A",{href:!0});var _Ct=s(_Y);YSr=r(_Ct,"FlaxXLMRobertaForQuestionAnswering"),_Ct.forEach(t),KSr=r(sPe," (XLM-RoBERTa model)"),sPe.forEach(t),Ie.forEach(t),ZSr=i(Jl),T(V5.$$.fragment,Jl),Jl.forEach(t),Ul.forEach(t),Fqe=i(f),Wc=n(f,"H2",{class:!0});var yje=s(Wc);X5=n(yje,"A",{id:!0,class:!0,href:!0});var bCt=s(X5);p7e=n(bCt,"SPAN",{});var vCt=s(p7e);T(Ax.$$.fragment,vCt),vCt.forEach(t),bCt.forEach(t),eRr=i(yje),u7e=n(yje,"SPAN",{});var FCt=s(u7e);oRr=r(FCt,"FlaxAutoModelForTokenClassification"),FCt.forEach(t),yje.forEach(t),Tqe=i(f),br=n(f,"DIV",{class:!0});var Yl=s(br);T(yx.$$.fragment,Yl),rRr=i(Yl),Hc=n(Yl,"P",{});var IZ=s(Hc);tRr=r(IZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),bY=n(IZ,"A",{href:!0});var TCt=s(bY);aRr=r(TCt,"from_pretrained()"),TCt.forEach(t),nRr=r(IZ," class method or the "),vY=n(IZ,"A",{href:!0});var MCt=s(vY);sRr=r(MCt,"from_config()"),MCt.forEach(t),lRr=r(IZ,` class
method.`),IZ.forEach(t),iRr=i(Yl),Lx=n(Yl,"P",{});var Lje=s(Lx);dRr=r(Lje,"This class cannot be instantiated directly using "),_7e=n(Lje,"CODE",{});var ECt=s(_7e);cRr=r(ECt,"__init__()"),ECt.forEach(t),fRr=r(Lje," (throws an error)."),Lje.forEach(t),mRr=i(Yl),Qt=n(Yl,"DIV",{class:!0});var Rw=s(Qt);T(xx.$$.fragment,Rw),gRr=i(Rw),b7e=n(Rw,"P",{});var CCt=s(b7e);hRr=r(CCt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),CCt.forEach(t),pRr=i(Rw),Uc=n(Rw,"P",{});var qZ=s(Uc);uRr=r(qZ,`Note:
Loading a model from its configuration file does `),v7e=n(qZ,"STRONG",{});var wCt=s(v7e);_Rr=r(wCt,"not"),wCt.forEach(t),bRr=r(qZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),FY=n(qZ,"A",{href:!0});var ACt=s(FY);vRr=r(ACt,"from_pretrained()"),ACt.forEach(t),FRr=r(qZ," to load the model weights."),qZ.forEach(t),TRr=i(Rw),T(z5.$$.fragment,Rw),Rw.forEach(t),MRr=i(Yl),Qr=n(Yl,"DIV",{class:!0});var Kl=s(Qr);T($x.$$.fragment,Kl),ERr=i(Kl),F7e=n(Kl,"P",{});var yCt=s(F7e);CRr=r(yCt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),yCt.forEach(t),wRr=i(Kl),Fn=n(Kl,"P",{});var Bw=s(Fn);ARr=r(Bw,"The model class to instantiate is selected based on the "),T7e=n(Bw,"CODE",{});var LCt=s(T7e);yRr=r(LCt,"model_type"),LCt.forEach(t),LRr=r(Bw,` property of the config object (either
passed as an argument or loaded from `),M7e=n(Bw,"CODE",{});var xCt=s(M7e);xRr=r(xCt,"pretrained_model_name_or_path"),xCt.forEach(t),$Rr=r(Bw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),E7e=n(Bw,"CODE",{});var $Ct=s(E7e);kRr=r($Ct,"pretrained_model_name_or_path"),$Ct.forEach(t),SRr=r(Bw,":"),Bw.forEach(t),RRr=i(Kl),De=n(Kl,"UL",{});var Fo=s(De);Q5=n(Fo,"LI",{});var lPe=s(Q5);C7e=n(lPe,"STRONG",{});var kCt=s(C7e);BRr=r(kCt,"albert"),kCt.forEach(t),PRr=r(lPe," \u2014 "),TY=n(lPe,"A",{href:!0});var SCt=s(TY);IRr=r(SCt,"FlaxAlbertForTokenClassification"),SCt.forEach(t),qRr=r(lPe," (ALBERT model)"),lPe.forEach(t),NRr=i(Fo),W5=n(Fo,"LI",{});var iPe=s(W5);w7e=n(iPe,"STRONG",{});var RCt=s(w7e);jRr=r(RCt,"bert"),RCt.forEach(t),DRr=r(iPe," \u2014 "),MY=n(iPe,"A",{href:!0});var BCt=s(MY);GRr=r(BCt,"FlaxBertForTokenClassification"),BCt.forEach(t),ORr=r(iPe," (BERT model)"),iPe.forEach(t),VRr=i(Fo),H5=n(Fo,"LI",{});var dPe=s(H5);A7e=n(dPe,"STRONG",{});var PCt=s(A7e);XRr=r(PCt,"big_bird"),PCt.forEach(t),zRr=r(dPe," \u2014 "),EY=n(dPe,"A",{href:!0});var ICt=s(EY);QRr=r(ICt,"FlaxBigBirdForTokenClassification"),ICt.forEach(t),WRr=r(dPe," (BigBird model)"),dPe.forEach(t),HRr=i(Fo),U5=n(Fo,"LI",{});var cPe=s(U5);y7e=n(cPe,"STRONG",{});var qCt=s(y7e);URr=r(qCt,"distilbert"),qCt.forEach(t),JRr=r(cPe," \u2014 "),CY=n(cPe,"A",{href:!0});var NCt=s(CY);YRr=r(NCt,"FlaxDistilBertForTokenClassification"),NCt.forEach(t),KRr=r(cPe," (DistilBERT model)"),cPe.forEach(t),ZRr=i(Fo),J5=n(Fo,"LI",{});var fPe=s(J5);L7e=n(fPe,"STRONG",{});var jCt=s(L7e);eBr=r(jCt,"electra"),jCt.forEach(t),oBr=r(fPe," \u2014 "),wY=n(fPe,"A",{href:!0});var DCt=s(wY);rBr=r(DCt,"FlaxElectraForTokenClassification"),DCt.forEach(t),tBr=r(fPe," (ELECTRA model)"),fPe.forEach(t),aBr=i(Fo),Y5=n(Fo,"LI",{});var mPe=s(Y5);x7e=n(mPe,"STRONG",{});var GCt=s(x7e);nBr=r(GCt,"roberta"),GCt.forEach(t),sBr=r(mPe," \u2014 "),AY=n(mPe,"A",{href:!0});var OCt=s(AY);lBr=r(OCt,"FlaxRobertaForTokenClassification"),OCt.forEach(t),iBr=r(mPe," (RoBERTa model)"),mPe.forEach(t),dBr=i(Fo),K5=n(Fo,"LI",{});var gPe=s(K5);$7e=n(gPe,"STRONG",{});var VCt=s($7e);cBr=r(VCt,"roformer"),VCt.forEach(t),fBr=r(gPe," \u2014 "),yY=n(gPe,"A",{href:!0});var XCt=s(yY);mBr=r(XCt,"FlaxRoFormerForTokenClassification"),XCt.forEach(t),gBr=r(gPe," (RoFormer model)"),gPe.forEach(t),hBr=i(Fo),Z5=n(Fo,"LI",{});var hPe=s(Z5);k7e=n(hPe,"STRONG",{});var zCt=s(k7e);pBr=r(zCt,"xlm-roberta"),zCt.forEach(t),uBr=r(hPe," \u2014 "),LY=n(hPe,"A",{href:!0});var QCt=s(LY);_Br=r(QCt,"FlaxXLMRobertaForTokenClassification"),QCt.forEach(t),bBr=r(hPe," (XLM-RoBERTa model)"),hPe.forEach(t),Fo.forEach(t),vBr=i(Kl),T(eC.$$.fragment,Kl),Kl.forEach(t),Yl.forEach(t),Mqe=i(f),Jc=n(f,"H2",{class:!0});var xje=s(Jc);oC=n(xje,"A",{id:!0,class:!0,href:!0});var WCt=s(oC);S7e=n(WCt,"SPAN",{});var HCt=s(S7e);T(kx.$$.fragment,HCt),HCt.forEach(t),WCt.forEach(t),FBr=i(xje),R7e=n(xje,"SPAN",{});var UCt=s(R7e);TBr=r(UCt,"FlaxAutoModelForMultipleChoice"),UCt.forEach(t),xje.forEach(t),Eqe=i(f),vr=n(f,"DIV",{class:!0});var Zl=s(vr);T(Sx.$$.fragment,Zl),MBr=i(Zl),Yc=n(Zl,"P",{});var NZ=s(Yc);EBr=r(NZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),xY=n(NZ,"A",{href:!0});var JCt=s(xY);CBr=r(JCt,"from_pretrained()"),JCt.forEach(t),wBr=r(NZ," class method or the "),$Y=n(NZ,"A",{href:!0});var YCt=s($Y);ABr=r(YCt,"from_config()"),YCt.forEach(t),yBr=r(NZ,` class
method.`),NZ.forEach(t),LBr=i(Zl),Rx=n(Zl,"P",{});var $je=s(Rx);xBr=r($je,"This class cannot be instantiated directly using "),B7e=n($je,"CODE",{});var KCt=s(B7e);$Br=r(KCt,"__init__()"),KCt.forEach(t),kBr=r($je," (throws an error)."),$je.forEach(t),SBr=i(Zl),Wt=n(Zl,"DIV",{class:!0});var Pw=s(Wt);T(Bx.$$.fragment,Pw),RBr=i(Pw),P7e=n(Pw,"P",{});var ZCt=s(P7e);BBr=r(ZCt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),ZCt.forEach(t),PBr=i(Pw),Kc=n(Pw,"P",{});var jZ=s(Kc);IBr=r(jZ,`Note:
Loading a model from its configuration file does `),I7e=n(jZ,"STRONG",{});var e3t=s(I7e);qBr=r(e3t,"not"),e3t.forEach(t),NBr=r(jZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),kY=n(jZ,"A",{href:!0});var o3t=s(kY);jBr=r(o3t,"from_pretrained()"),o3t.forEach(t),DBr=r(jZ," to load the model weights."),jZ.forEach(t),GBr=i(Pw),T(rC.$$.fragment,Pw),Pw.forEach(t),OBr=i(Zl),Wr=n(Zl,"DIV",{class:!0});var ei=s(Wr);T(Px.$$.fragment,ei),VBr=i(ei),q7e=n(ei,"P",{});var r3t=s(q7e);XBr=r(r3t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),r3t.forEach(t),zBr=i(ei),Tn=n(ei,"P",{});var Iw=s(Tn);QBr=r(Iw,"The model class to instantiate is selected based on the "),N7e=n(Iw,"CODE",{});var t3t=s(N7e);WBr=r(t3t,"model_type"),t3t.forEach(t),HBr=r(Iw,` property of the config object (either
passed as an argument or loaded from `),j7e=n(Iw,"CODE",{});var a3t=s(j7e);UBr=r(a3t,"pretrained_model_name_or_path"),a3t.forEach(t),JBr=r(Iw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),D7e=n(Iw,"CODE",{});var n3t=s(D7e);YBr=r(n3t,"pretrained_model_name_or_path"),n3t.forEach(t),KBr=r(Iw,":"),Iw.forEach(t),ZBr=i(ei),Ge=n(ei,"UL",{});var To=s(Ge);tC=n(To,"LI",{});var pPe=s(tC);G7e=n(pPe,"STRONG",{});var s3t=s(G7e);ePr=r(s3t,"albert"),s3t.forEach(t),oPr=r(pPe," \u2014 "),SY=n(pPe,"A",{href:!0});var l3t=s(SY);rPr=r(l3t,"FlaxAlbertForMultipleChoice"),l3t.forEach(t),tPr=r(pPe," (ALBERT model)"),pPe.forEach(t),aPr=i(To),aC=n(To,"LI",{});var uPe=s(aC);O7e=n(uPe,"STRONG",{});var i3t=s(O7e);nPr=r(i3t,"bert"),i3t.forEach(t),sPr=r(uPe," \u2014 "),RY=n(uPe,"A",{href:!0});var d3t=s(RY);lPr=r(d3t,"FlaxBertForMultipleChoice"),d3t.forEach(t),iPr=r(uPe," (BERT model)"),uPe.forEach(t),dPr=i(To),nC=n(To,"LI",{});var _Pe=s(nC);V7e=n(_Pe,"STRONG",{});var c3t=s(V7e);cPr=r(c3t,"big_bird"),c3t.forEach(t),fPr=r(_Pe," \u2014 "),BY=n(_Pe,"A",{href:!0});var f3t=s(BY);mPr=r(f3t,"FlaxBigBirdForMultipleChoice"),f3t.forEach(t),gPr=r(_Pe," (BigBird model)"),_Pe.forEach(t),hPr=i(To),sC=n(To,"LI",{});var bPe=s(sC);X7e=n(bPe,"STRONG",{});var m3t=s(X7e);pPr=r(m3t,"distilbert"),m3t.forEach(t),uPr=r(bPe," \u2014 "),PY=n(bPe,"A",{href:!0});var g3t=s(PY);_Pr=r(g3t,"FlaxDistilBertForMultipleChoice"),g3t.forEach(t),bPr=r(bPe," (DistilBERT model)"),bPe.forEach(t),vPr=i(To),lC=n(To,"LI",{});var vPe=s(lC);z7e=n(vPe,"STRONG",{});var h3t=s(z7e);FPr=r(h3t,"electra"),h3t.forEach(t),TPr=r(vPe," \u2014 "),IY=n(vPe,"A",{href:!0});var p3t=s(IY);MPr=r(p3t,"FlaxElectraForMultipleChoice"),p3t.forEach(t),EPr=r(vPe," (ELECTRA model)"),vPe.forEach(t),CPr=i(To),iC=n(To,"LI",{});var FPe=s(iC);Q7e=n(FPe,"STRONG",{});var u3t=s(Q7e);wPr=r(u3t,"roberta"),u3t.forEach(t),APr=r(FPe," \u2014 "),qY=n(FPe,"A",{href:!0});var _3t=s(qY);yPr=r(_3t,"FlaxRobertaForMultipleChoice"),_3t.forEach(t),LPr=r(FPe," (RoBERTa model)"),FPe.forEach(t),xPr=i(To),dC=n(To,"LI",{});var TPe=s(dC);W7e=n(TPe,"STRONG",{});var b3t=s(W7e);$Pr=r(b3t,"roformer"),b3t.forEach(t),kPr=r(TPe," \u2014 "),NY=n(TPe,"A",{href:!0});var v3t=s(NY);SPr=r(v3t,"FlaxRoFormerForMultipleChoice"),v3t.forEach(t),RPr=r(TPe," (RoFormer model)"),TPe.forEach(t),BPr=i(To),cC=n(To,"LI",{});var MPe=s(cC);H7e=n(MPe,"STRONG",{});var F3t=s(H7e);PPr=r(F3t,"xlm-roberta"),F3t.forEach(t),IPr=r(MPe," \u2014 "),jY=n(MPe,"A",{href:!0});var T3t=s(jY);qPr=r(T3t,"FlaxXLMRobertaForMultipleChoice"),T3t.forEach(t),NPr=r(MPe," (XLM-RoBERTa model)"),MPe.forEach(t),To.forEach(t),jPr=i(ei),T(fC.$$.fragment,ei),ei.forEach(t),Zl.forEach(t),Cqe=i(f),Zc=n(f,"H2",{class:!0});var kje=s(Zc);mC=n(kje,"A",{id:!0,class:!0,href:!0});var M3t=s(mC);U7e=n(M3t,"SPAN",{});var E3t=s(U7e);T(Ix.$$.fragment,E3t),E3t.forEach(t),M3t.forEach(t),DPr=i(kje),J7e=n(kje,"SPAN",{});var C3t=s(J7e);GPr=r(C3t,"FlaxAutoModelForNextSentencePrediction"),C3t.forEach(t),kje.forEach(t),wqe=i(f),Fr=n(f,"DIV",{class:!0});var oi=s(Fr);T(qx.$$.fragment,oi),OPr=i(oi),ef=n(oi,"P",{});var DZ=s(ef);VPr=r(DZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),DY=n(DZ,"A",{href:!0});var w3t=s(DY);XPr=r(w3t,"from_pretrained()"),w3t.forEach(t),zPr=r(DZ," class method or the "),GY=n(DZ,"A",{href:!0});var A3t=s(GY);QPr=r(A3t,"from_config()"),A3t.forEach(t),WPr=r(DZ,` class
method.`),DZ.forEach(t),HPr=i(oi),Nx=n(oi,"P",{});var Sje=s(Nx);UPr=r(Sje,"This class cannot be instantiated directly using "),Y7e=n(Sje,"CODE",{});var y3t=s(Y7e);JPr=r(y3t,"__init__()"),y3t.forEach(t),YPr=r(Sje," (throws an error)."),Sje.forEach(t),KPr=i(oi),Ht=n(oi,"DIV",{class:!0});var qw=s(Ht);T(jx.$$.fragment,qw),ZPr=i(qw),K7e=n(qw,"P",{});var L3t=s(K7e);eIr=r(L3t,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),L3t.forEach(t),oIr=i(qw),of=n(qw,"P",{});var GZ=s(of);rIr=r(GZ,`Note:
Loading a model from its configuration file does `),Z7e=n(GZ,"STRONG",{});var x3t=s(Z7e);tIr=r(x3t,"not"),x3t.forEach(t),aIr=r(GZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),OY=n(GZ,"A",{href:!0});var $3t=s(OY);nIr=r($3t,"from_pretrained()"),$3t.forEach(t),sIr=r(GZ," to load the model weights."),GZ.forEach(t),lIr=i(qw),T(gC.$$.fragment,qw),qw.forEach(t),iIr=i(oi),Hr=n(oi,"DIV",{class:!0});var ri=s(Hr);T(Dx.$$.fragment,ri),dIr=i(ri),eMe=n(ri,"P",{});var k3t=s(eMe);cIr=r(k3t,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),k3t.forEach(t),fIr=i(ri),Mn=n(ri,"P",{});var Nw=s(Mn);mIr=r(Nw,"The model class to instantiate is selected based on the "),oMe=n(Nw,"CODE",{});var S3t=s(oMe);gIr=r(S3t,"model_type"),S3t.forEach(t),hIr=r(Nw,` property of the config object (either
passed as an argument or loaded from `),rMe=n(Nw,"CODE",{});var R3t=s(rMe);pIr=r(R3t,"pretrained_model_name_or_path"),R3t.forEach(t),uIr=r(Nw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tMe=n(Nw,"CODE",{});var B3t=s(tMe);_Ir=r(B3t,"pretrained_model_name_or_path"),B3t.forEach(t),bIr=r(Nw,":"),Nw.forEach(t),vIr=i(ri),aMe=n(ri,"UL",{});var P3t=s(aMe);hC=n(P3t,"LI",{});var EPe=s(hC);nMe=n(EPe,"STRONG",{});var I3t=s(nMe);FIr=r(I3t,"bert"),I3t.forEach(t),TIr=r(EPe," \u2014 "),VY=n(EPe,"A",{href:!0});var q3t=s(VY);MIr=r(q3t,"FlaxBertForNextSentencePrediction"),q3t.forEach(t),EIr=r(EPe," (BERT model)"),EPe.forEach(t),P3t.forEach(t),CIr=i(ri),T(pC.$$.fragment,ri),ri.forEach(t),oi.forEach(t),Aqe=i(f),rf=n(f,"H2",{class:!0});var Rje=s(rf);uC=n(Rje,"A",{id:!0,class:!0,href:!0});var N3t=s(uC);sMe=n(N3t,"SPAN",{});var j3t=s(sMe);T(Gx.$$.fragment,j3t),j3t.forEach(t),N3t.forEach(t),wIr=i(Rje),lMe=n(Rje,"SPAN",{});var D3t=s(lMe);AIr=r(D3t,"FlaxAutoModelForImageClassification"),D3t.forEach(t),Rje.forEach(t),yqe=i(f),Tr=n(f,"DIV",{class:!0});var ti=s(Tr);T(Ox.$$.fragment,ti),yIr=i(ti),tf=n(ti,"P",{});var OZ=s(tf);LIr=r(OZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),XY=n(OZ,"A",{href:!0});var G3t=s(XY);xIr=r(G3t,"from_pretrained()"),G3t.forEach(t),$Ir=r(OZ," class method or the "),zY=n(OZ,"A",{href:!0});var O3t=s(zY);kIr=r(O3t,"from_config()"),O3t.forEach(t),SIr=r(OZ,` class
method.`),OZ.forEach(t),RIr=i(ti),Vx=n(ti,"P",{});var Bje=s(Vx);BIr=r(Bje,"This class cannot be instantiated directly using "),iMe=n(Bje,"CODE",{});var V3t=s(iMe);PIr=r(V3t,"__init__()"),V3t.forEach(t),IIr=r(Bje," (throws an error)."),Bje.forEach(t),qIr=i(ti),Ut=n(ti,"DIV",{class:!0});var jw=s(Ut);T(Xx.$$.fragment,jw),NIr=i(jw),dMe=n(jw,"P",{});var X3t=s(dMe);jIr=r(X3t,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),X3t.forEach(t),DIr=i(jw),af=n(jw,"P",{});var VZ=s(af);GIr=r(VZ,`Note:
Loading a model from its configuration file does `),cMe=n(VZ,"STRONG",{});var z3t=s(cMe);OIr=r(z3t,"not"),z3t.forEach(t),VIr=r(VZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),QY=n(VZ,"A",{href:!0});var Q3t=s(QY);XIr=r(Q3t,"from_pretrained()"),Q3t.forEach(t),zIr=r(VZ," to load the model weights."),VZ.forEach(t),QIr=i(jw),T(_C.$$.fragment,jw),jw.forEach(t),WIr=i(ti),Ur=n(ti,"DIV",{class:!0});var ai=s(Ur);T(zx.$$.fragment,ai),HIr=i(ai),fMe=n(ai,"P",{});var W3t=s(fMe);UIr=r(W3t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),W3t.forEach(t),JIr=i(ai),En=n(ai,"P",{});var Dw=s(En);YIr=r(Dw,"The model class to instantiate is selected based on the "),mMe=n(Dw,"CODE",{});var H3t=s(mMe);KIr=r(H3t,"model_type"),H3t.forEach(t),ZIr=r(Dw,` property of the config object (either
passed as an argument or loaded from `),gMe=n(Dw,"CODE",{});var U3t=s(gMe);eqr=r(U3t,"pretrained_model_name_or_path"),U3t.forEach(t),oqr=r(Dw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hMe=n(Dw,"CODE",{});var J3t=s(hMe);rqr=r(J3t,"pretrained_model_name_or_path"),J3t.forEach(t),tqr=r(Dw,":"),Dw.forEach(t),aqr=i(ai),Qx=n(ai,"UL",{});var Pje=s(Qx);bC=n(Pje,"LI",{});var CPe=s(bC);pMe=n(CPe,"STRONG",{});var Y3t=s(pMe);nqr=r(Y3t,"beit"),Y3t.forEach(t),sqr=r(CPe," \u2014 "),WY=n(CPe,"A",{href:!0});var K3t=s(WY);lqr=r(K3t,"FlaxBeitForImageClassification"),K3t.forEach(t),iqr=r(CPe," (BEiT model)"),CPe.forEach(t),dqr=i(Pje),vC=n(Pje,"LI",{});var wPe=s(vC);uMe=n(wPe,"STRONG",{});var Z3t=s(uMe);cqr=r(Z3t,"vit"),Z3t.forEach(t),fqr=r(wPe," \u2014 "),HY=n(wPe,"A",{href:!0});var ewt=s(HY);mqr=r(ewt,"FlaxViTForImageClassification"),ewt.forEach(t),gqr=r(wPe," (ViT model)"),wPe.forEach(t),Pje.forEach(t),hqr=i(ai),T(FC.$$.fragment,ai),ai.forEach(t),ti.forEach(t),Lqe=i(f),nf=n(f,"H2",{class:!0});var Ije=s(nf);TC=n(Ije,"A",{id:!0,class:!0,href:!0});var owt=s(TC);_Me=n(owt,"SPAN",{});var rwt=s(_Me);T(Wx.$$.fragment,rwt),rwt.forEach(t),owt.forEach(t),pqr=i(Ije),bMe=n(Ije,"SPAN",{});var twt=s(bMe);uqr=r(twt,"FlaxAutoModelForVision2Seq"),twt.forEach(t),Ije.forEach(t),xqe=i(f),Mr=n(f,"DIV",{class:!0});var ni=s(Mr);T(Hx.$$.fragment,ni),_qr=i(ni),sf=n(ni,"P",{});var XZ=s(sf);bqr=r(XZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),UY=n(XZ,"A",{href:!0});var awt=s(UY);vqr=r(awt,"from_pretrained()"),awt.forEach(t),Fqr=r(XZ," class method or the "),JY=n(XZ,"A",{href:!0});var nwt=s(JY);Tqr=r(nwt,"from_config()"),nwt.forEach(t),Mqr=r(XZ,` class
method.`),XZ.forEach(t),Eqr=i(ni),Ux=n(ni,"P",{});var qje=s(Ux);Cqr=r(qje,"This class cannot be instantiated directly using "),vMe=n(qje,"CODE",{});var swt=s(vMe);wqr=r(swt,"__init__()"),swt.forEach(t),Aqr=r(qje," (throws an error)."),qje.forEach(t),yqr=i(ni),Jt=n(ni,"DIV",{class:!0});var Gw=s(Jt);T(Jx.$$.fragment,Gw),Lqr=i(Gw),FMe=n(Gw,"P",{});var lwt=s(FMe);xqr=r(lwt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),lwt.forEach(t),$qr=i(Gw),lf=n(Gw,"P",{});var zZ=s(lf);kqr=r(zZ,`Note:
Loading a model from its configuration file does `),TMe=n(zZ,"STRONG",{});var iwt=s(TMe);Sqr=r(iwt,"not"),iwt.forEach(t),Rqr=r(zZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),YY=n(zZ,"A",{href:!0});var dwt=s(YY);Bqr=r(dwt,"from_pretrained()"),dwt.forEach(t),Pqr=r(zZ," to load the model weights."),zZ.forEach(t),Iqr=i(Gw),T(MC.$$.fragment,Gw),Gw.forEach(t),qqr=i(ni),Jr=n(ni,"DIV",{class:!0});var si=s(Jr);T(Yx.$$.fragment,si),Nqr=i(si),MMe=n(si,"P",{});var cwt=s(MMe);jqr=r(cwt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),cwt.forEach(t),Dqr=i(si),Cn=n(si,"P",{});var Ow=s(Cn);Gqr=r(Ow,"The model class to instantiate is selected based on the "),EMe=n(Ow,"CODE",{});var fwt=s(EMe);Oqr=r(fwt,"model_type"),fwt.forEach(t),Vqr=r(Ow,` property of the config object (either
passed as an argument or loaded from `),CMe=n(Ow,"CODE",{});var mwt=s(CMe);Xqr=r(mwt,"pretrained_model_name_or_path"),mwt.forEach(t),zqr=r(Ow,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wMe=n(Ow,"CODE",{});var gwt=s(wMe);Qqr=r(gwt,"pretrained_model_name_or_path"),gwt.forEach(t),Wqr=r(Ow,":"),Ow.forEach(t),Hqr=i(si),AMe=n(si,"UL",{});var hwt=s(AMe);EC=n(hwt,"LI",{});var APe=s(EC);yMe=n(APe,"STRONG",{});var pwt=s(yMe);Uqr=r(pwt,"vision-encoder-decoder"),pwt.forEach(t),Jqr=r(APe," \u2014 "),KY=n(APe,"A",{href:!0});var uwt=s(KY);Yqr=r(uwt,"FlaxVisionEncoderDecoderModel"),uwt.forEach(t),Kqr=r(APe," (Vision Encoder decoder model)"),APe.forEach(t),hwt.forEach(t),Zqr=i(si),T(CC.$$.fragment,si),si.forEach(t),ni.forEach(t),this.h()},h(){c(g,"name","hf:doc:metadata"),c(g,"content",JSON.stringify(Fyt)),c(m,"id","auto-classes"),c(m,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m,"href","#auto-classes"),c(p,"class","relative group"),c(An,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.AutoConfig"),c(Ln,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.AutoModel"),c(xn,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.AutoTokenizer"),c(gi,"href","/docs/transformers/pr_17206/en/model_doc/bert#transformers.BertModel"),c(uf,"id","extending-the-auto-classes"),c(uf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(uf,"href","#extending-the-auto-classes"),c(hi,"class","relative group"),c(bf,"id","transformers.AutoConfig"),c(bf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(bf,"href","#transformers.AutoConfig"),c(pi,"class","relative group"),c(u$,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(_$,"href","/docs/transformers/pr_17206/en/model_doc/albert#transformers.AlbertConfig"),c(b$,"href","/docs/transformers/pr_17206/en/model_doc/bart#transformers.BartConfig"),c(v$,"href","/docs/transformers/pr_17206/en/model_doc/beit#transformers.BeitConfig"),c(F$,"href","/docs/transformers/pr_17206/en/model_doc/bert#transformers.BertConfig"),c(T$,"href","/docs/transformers/pr_17206/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(M$,"href","/docs/transformers/pr_17206/en/model_doc/big_bird#transformers.BigBirdConfig"),c(E$,"href","/docs/transformers/pr_17206/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(C$,"href","/docs/transformers/pr_17206/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(w$,"href","/docs/transformers/pr_17206/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(A$,"href","/docs/transformers/pr_17206/en/model_doc/camembert#transformers.CamembertConfig"),c(y$,"href","/docs/transformers/pr_17206/en/model_doc/canine#transformers.CanineConfig"),c(L$,"href","/docs/transformers/pr_17206/en/model_doc/clip#transformers.CLIPConfig"),c(x$,"href","/docs/transformers/pr_17206/en/model_doc/convbert#transformers.ConvBertConfig"),c($$,"href","/docs/transformers/pr_17206/en/model_doc/convnext#transformers.ConvNextConfig"),c(k$,"href","/docs/transformers/pr_17206/en/model_doc/ctrl#transformers.CTRLConfig"),c(S$,"href","/docs/transformers/pr_17206/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(R$,"href","/docs/transformers/pr_17206/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(B$,"href","/docs/transformers/pr_17206/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),c(P$,"href","/docs/transformers/pr_17206/en/model_doc/deberta#transformers.DebertaConfig"),c(I$,"href","/docs/transformers/pr_17206/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(q$,"href","/docs/transformers/pr_17206/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),c(N$,"href","/docs/transformers/pr_17206/en/model_doc/deit#transformers.DeiTConfig"),c(j$,"href","/docs/transformers/pr_17206/en/model_doc/detr#transformers.DetrConfig"),c(D$,"href","/docs/transformers/pr_17206/en/model_doc/distilbert#transformers.DistilBertConfig"),c(G$,"href","/docs/transformers/pr_17206/en/model_doc/dpr#transformers.DPRConfig"),c(O$,"href","/docs/transformers/pr_17206/en/model_doc/dpt#transformers.DPTConfig"),c(V$,"href","/docs/transformers/pr_17206/en/model_doc/electra#transformers.ElectraConfig"),c(X$,"href","/docs/transformers/pr_17206/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(z$,"href","/docs/transformers/pr_17206/en/model_doc/flaubert#transformers.FlaubertConfig"),c(Q$,"href","/docs/transformers/pr_17206/en/model_doc/flava#transformers.FlavaConfig"),c(W$,"href","/docs/transformers/pr_17206/en/model_doc/fnet#transformers.FNetConfig"),c(H$,"href","/docs/transformers/pr_17206/en/model_doc/fsmt#transformers.FSMTConfig"),c(U$,"href","/docs/transformers/pr_17206/en/model_doc/funnel#transformers.FunnelConfig"),c(J$,"href","/docs/transformers/pr_17206/en/model_doc/glpn#transformers.GLPNConfig"),c(Y$,"href","/docs/transformers/pr_17206/en/model_doc/gpt2#transformers.GPT2Config"),c(K$,"href","/docs/transformers/pr_17206/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(Z$,"href","/docs/transformers/pr_17206/en/model_doc/gptj#transformers.GPTJConfig"),c(ek,"href","/docs/transformers/pr_17206/en/model_doc/hubert#transformers.HubertConfig"),c(ok,"href","/docs/transformers/pr_17206/en/model_doc/ibert#transformers.IBertConfig"),c(rk,"href","/docs/transformers/pr_17206/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(tk,"href","/docs/transformers/pr_17206/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(ak,"href","/docs/transformers/pr_17206/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(nk,"href","/docs/transformers/pr_17206/en/model_doc/led#transformers.LEDConfig"),c(sk,"href","/docs/transformers/pr_17206/en/model_doc/longformer#transformers.LongformerConfig"),c(lk,"href","/docs/transformers/pr_17206/en/model_doc/luke#transformers.LukeConfig"),c(ik,"href","/docs/transformers/pr_17206/en/model_doc/lxmert#transformers.LxmertConfig"),c(dk,"href","/docs/transformers/pr_17206/en/model_doc/m2m_100#transformers.M2M100Config"),c(ck,"href","/docs/transformers/pr_17206/en/model_doc/marian#transformers.MarianConfig"),c(fk,"href","/docs/transformers/pr_17206/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(mk,"href","/docs/transformers/pr_17206/en/model_doc/mbart#transformers.MBartConfig"),c(gk,"href","/docs/transformers/pr_17206/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(hk,"href","/docs/transformers/pr_17206/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(pk,"href","/docs/transformers/pr_17206/en/model_doc/mpnet#transformers.MPNetConfig"),c(uk,"href","/docs/transformers/pr_17206/en/model_doc/mt5#transformers.MT5Config"),c(_k,"href","/docs/transformers/pr_17206/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(bk,"href","/docs/transformers/pr_17206/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(vk,"href","/docs/transformers/pr_17206/en/model_doc/pegasus#transformers.PegasusConfig"),c(Fk,"href","/docs/transformers/pr_17206/en/model_doc/perceiver#transformers.PerceiverConfig"),c(Tk,"href","/docs/transformers/pr_17206/en/model_doc/plbart#transformers.PLBartConfig"),c(Mk,"href","/docs/transformers/pr_17206/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(Ek,"href","/docs/transformers/pr_17206/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(Ck,"href","/docs/transformers/pr_17206/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(wk,"href","/docs/transformers/pr_17206/en/model_doc/rag#transformers.RagConfig"),c(Ak,"href","/docs/transformers/pr_17206/en/model_doc/realm#transformers.RealmConfig"),c(yk,"href","/docs/transformers/pr_17206/en/model_doc/reformer#transformers.ReformerConfig"),c(Lk,"href","/docs/transformers/pr_17206/en/model_doc/regnet#transformers.RegNetConfig"),c(xk,"href","/docs/transformers/pr_17206/en/model_doc/rembert#transformers.RemBertConfig"),c($k,"href","/docs/transformers/pr_17206/en/model_doc/resnet#transformers.ResNetConfig"),c(kk,"href","/docs/transformers/pr_17206/en/model_doc/retribert#transformers.RetriBertConfig"),c(Sk,"href","/docs/transformers/pr_17206/en/model_doc/roberta#transformers.RobertaConfig"),c(Rk,"href","/docs/transformers/pr_17206/en/model_doc/roformer#transformers.RoFormerConfig"),c(Bk,"href","/docs/transformers/pr_17206/en/model_doc/segformer#transformers.SegformerConfig"),c(Pk,"href","/docs/transformers/pr_17206/en/model_doc/sew#transformers.SEWConfig"),c(Ik,"href","/docs/transformers/pr_17206/en/model_doc/sew-d#transformers.SEWDConfig"),c(qk,"href","/docs/transformers/pr_17206/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(Nk,"href","/docs/transformers/pr_17206/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(jk,"href","/docs/transformers/pr_17206/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(Dk,"href","/docs/transformers/pr_17206/en/model_doc/splinter#transformers.SplinterConfig"),c(Gk,"href","/docs/transformers/pr_17206/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(Ok,"href","/docs/transformers/pr_17206/en/model_doc/swin#transformers.SwinConfig"),c(Vk,"href","/docs/transformers/pr_17206/en/model_doc/t5#transformers.T5Config"),c(Xk,"href","/docs/transformers/pr_17206/en/model_doc/tapas#transformers.TapasConfig"),c(zk,"href","/docs/transformers/pr_17206/en/model_doc/bart#transformers.BartConfig"),c(Qk,"href","/docs/transformers/pr_17206/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(Wk,"href","/docs/transformers/pr_17206/en/model_doc/trocr#transformers.TrOCRConfig"),c(Hk,"href","/docs/transformers/pr_17206/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(Uk,"href","/docs/transformers/pr_17206/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(Jk,"href","/docs/transformers/pr_17206/en/model_doc/van#transformers.VanConfig"),c(Yk,"href","/docs/transformers/pr_17206/en/model_doc/vilt#transformers.ViltConfig"),c(Kk,"href","/docs/transformers/pr_17206/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(Zk,"href","/docs/transformers/pr_17206/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(eS,"href","/docs/transformers/pr_17206/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(oS,"href","/docs/transformers/pr_17206/en/model_doc/vit#transformers.ViTConfig"),c(rS,"href","/docs/transformers/pr_17206/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(tS,"href","/docs/transformers/pr_17206/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(aS,"href","/docs/transformers/pr_17206/en/model_doc/wavlm#transformers.WavLMConfig"),c(nS,"href","/docs/transformers/pr_17206/en/model_doc/xglm#transformers.XGLMConfig"),c(sS,"href","/docs/transformers/pr_17206/en/model_doc/xlm#transformers.XLMConfig"),c(lS,"href","/docs/transformers/pr_17206/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(iS,"href","/docs/transformers/pr_17206/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(dS,"href","/docs/transformers/pr_17206/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(cS,"href","/docs/transformers/pr_17206/en/model_doc/xlnet#transformers.XLNetConfig"),c(fS,"href","/docs/transformers/pr_17206/en/model_doc/yolos#transformers.YolosConfig"),c(mS,"href","/docs/transformers/pr_17206/en/model_doc/yoso#transformers.YosoConfig"),c(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ug,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_g,"id","transformers.AutoTokenizer"),c(_g,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_g,"href","#transformers.AutoTokenizer"),c(_i,"class","relative group"),c(gS,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(hS,"href","/docs/transformers/pr_17206/en/model_doc/albert#transformers.AlbertTokenizer"),c(pS,"href","/docs/transformers/pr_17206/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(uS,"href","/docs/transformers/pr_17206/en/model_doc/bart#transformers.BartTokenizer"),c(_S,"href","/docs/transformers/pr_17206/en/model_doc/bart#transformers.BartTokenizerFast"),c(bS,"href","/docs/transformers/pr_17206/en/model_doc/barthez#transformers.BarthezTokenizer"),c(vS,"href","/docs/transformers/pr_17206/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(FS,"href","/docs/transformers/pr_17206/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(TS,"href","/docs/transformers/pr_17206/en/model_doc/bert#transformers.BertTokenizer"),c(MS,"href","/docs/transformers/pr_17206/en/model_doc/bert#transformers.BertTokenizerFast"),c(ES,"href","/docs/transformers/pr_17206/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(CS,"href","/docs/transformers/pr_17206/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(wS,"href","/docs/transformers/pr_17206/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(AS,"href","/docs/transformers/pr_17206/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(yS,"href","/docs/transformers/pr_17206/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(LS,"href","/docs/transformers/pr_17206/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(xS,"href","/docs/transformers/pr_17206/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c($S,"href","/docs/transformers/pr_17206/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(kS,"href","/docs/transformers/pr_17206/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(SS,"href","/docs/transformers/pr_17206/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(RS,"href","/docs/transformers/pr_17206/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(BS,"href","/docs/transformers/pr_17206/en/model_doc/camembert#transformers.CamembertTokenizer"),c(PS,"href","/docs/transformers/pr_17206/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(IS,"href","/docs/transformers/pr_17206/en/model_doc/canine#transformers.CanineTokenizer"),c(qS,"href","/docs/transformers/pr_17206/en/model_doc/clip#transformers.CLIPTokenizer"),c(NS,"href","/docs/transformers/pr_17206/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(jS,"href","/docs/transformers/pr_17206/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(DS,"href","/docs/transformers/pr_17206/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(GS,"href","/docs/transformers/pr_17206/en/model_doc/cpm#transformers.CpmTokenizer"),c(OS,"href","/docs/transformers/pr_17206/en/model_doc/cpm#transformers.CpmTokenizerFast"),c(VS,"href","/docs/transformers/pr_17206/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(XS,"href","/docs/transformers/pr_17206/en/model_doc/roberta#transformers.RobertaTokenizer"),c(zS,"href","/docs/transformers/pr_17206/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(QS,"href","/docs/transformers/pr_17206/en/model_doc/deberta#transformers.DebertaTokenizer"),c(WS,"href","/docs/transformers/pr_17206/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(HS,"href","/docs/transformers/pr_17206/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(US,"href","/docs/transformers/pr_17206/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),c(JS,"href","/docs/transformers/pr_17206/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(YS,"href","/docs/transformers/pr_17206/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(KS,"href","/docs/transformers/pr_17206/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(ZS,"href","/docs/transformers/pr_17206/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(eR,"href","/docs/transformers/pr_17206/en/model_doc/electra#transformers.ElectraTokenizer"),c(oR,"href","/docs/transformers/pr_17206/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(rR,"href","/docs/transformers/pr_17206/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(tR,"href","/docs/transformers/pr_17206/en/model_doc/fnet#transformers.FNetTokenizer"),c(aR,"href","/docs/transformers/pr_17206/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(nR,"href","/docs/transformers/pr_17206/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(sR,"href","/docs/transformers/pr_17206/en/model_doc/funnel#transformers.FunnelTokenizer"),c(lR,"href","/docs/transformers/pr_17206/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(iR,"href","/docs/transformers/pr_17206/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(dR,"href","/docs/transformers/pr_17206/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(cR,"href","/docs/transformers/pr_17206/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(fR,"href","/docs/transformers/pr_17206/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(mR,"href","/docs/transformers/pr_17206/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(gR,"href","/docs/transformers/pr_17206/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(hR,"href","/docs/transformers/pr_17206/en/model_doc/herbert#transformers.HerbertTokenizer"),c(pR,"href","/docs/transformers/pr_17206/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(uR,"href","/docs/transformers/pr_17206/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(_R,"href","/docs/transformers/pr_17206/en/model_doc/roberta#transformers.RobertaTokenizer"),c(bR,"href","/docs/transformers/pr_17206/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(vR,"href","/docs/transformers/pr_17206/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(FR,"href","/docs/transformers/pr_17206/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(TR,"href","/docs/transformers/pr_17206/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(MR,"href","/docs/transformers/pr_17206/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(ER,"href","/docs/transformers/pr_17206/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(CR,"href","/docs/transformers/pr_17206/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(wR,"href","/docs/transformers/pr_17206/en/model_doc/led#transformers.LEDTokenizer"),c(AR,"href","/docs/transformers/pr_17206/en/model_doc/led#transformers.LEDTokenizerFast"),c(yR,"href","/docs/transformers/pr_17206/en/model_doc/longformer#transformers.LongformerTokenizer"),c(LR,"href","/docs/transformers/pr_17206/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(xR,"href","/docs/transformers/pr_17206/en/model_doc/luke#transformers.LukeTokenizer"),c($R,"href","/docs/transformers/pr_17206/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(kR,"href","/docs/transformers/pr_17206/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(SR,"href","/docs/transformers/pr_17206/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(RR,"href","/docs/transformers/pr_17206/en/model_doc/marian#transformers.MarianTokenizer"),c(BR,"href","/docs/transformers/pr_17206/en/model_doc/mbart#transformers.MBartTokenizer"),c(PR,"href","/docs/transformers/pr_17206/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(IR,"href","/docs/transformers/pr_17206/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(qR,"href","/docs/transformers/pr_17206/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(NR,"href","/docs/transformers/pr_17206/en/model_doc/bert#transformers.BertTokenizer"),c(jR,"href","/docs/transformers/pr_17206/en/model_doc/bert#transformers.BertTokenizerFast"),c(DR,"href","/docs/transformers/pr_17206/en/model_doc/mluke#transformers.MLukeTokenizer"),c(GR,"href","/docs/transformers/pr_17206/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(OR,"href","/docs/transformers/pr_17206/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(VR,"href","/docs/transformers/pr_17206/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(XR,"href","/docs/transformers/pr_17206/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(zR,"href","/docs/transformers/pr_17206/en/model_doc/mt5#transformers.T5Tokenizer"),c(QR,"href","/docs/transformers/pr_17206/en/model_doc/mt5#transformers.T5TokenizerFast"),c(WR,"href","/docs/transformers/pr_17206/en/model_doc/albert#transformers.AlbertTokenizer"),c(HR,"href","/docs/transformers/pr_17206/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(UR,"href","/docs/transformers/pr_17206/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(JR,"href","/docs/transformers/pr_17206/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(YR,"href","/docs/transformers/pr_17206/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(KR,"href","/docs/transformers/pr_17206/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(ZR,"href","/docs/transformers/pr_17206/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(eB,"href","/docs/transformers/pr_17206/en/model_doc/phobert#transformers.PhobertTokenizer"),c(oB,"href","/docs/transformers/pr_17206/en/model_doc/plbart#transformers.PLBartTokenizer"),c(rB,"href","/docs/transformers/pr_17206/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(tB,"href","/docs/transformers/pr_17206/en/model_doc/bert#transformers.BertTokenizer"),c(aB,"href","/docs/transformers/pr_17206/en/model_doc/bert#transformers.BertTokenizerFast"),c(nB,"href","/docs/transformers/pr_17206/en/model_doc/rag#transformers.RagTokenizer"),c(sB,"href","/docs/transformers/pr_17206/en/model_doc/realm#transformers.RealmTokenizer"),c(lB,"href","/docs/transformers/pr_17206/en/model_doc/realm#transformers.RealmTokenizerFast"),c(iB,"href","/docs/transformers/pr_17206/en/model_doc/reformer#transformers.ReformerTokenizer"),c(dB,"href","/docs/transformers/pr_17206/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(cB,"href","/docs/transformers/pr_17206/en/model_doc/rembert#transformers.RemBertTokenizer"),c(fB,"href","/docs/transformers/pr_17206/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(mB,"href","/docs/transformers/pr_17206/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(gB,"href","/docs/transformers/pr_17206/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(hB,"href","/docs/transformers/pr_17206/en/model_doc/roberta#transformers.RobertaTokenizer"),c(pB,"href","/docs/transformers/pr_17206/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(uB,"href","/docs/transformers/pr_17206/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(_B,"href","/docs/transformers/pr_17206/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(bB,"href","/docs/transformers/pr_17206/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(vB,"href","/docs/transformers/pr_17206/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(FB,"href","/docs/transformers/pr_17206/en/model_doc/splinter#transformers.SplinterTokenizer"),c(TB,"href","/docs/transformers/pr_17206/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(MB,"href","/docs/transformers/pr_17206/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(EB,"href","/docs/transformers/pr_17206/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(CB,"href","/docs/transformers/pr_17206/en/model_doc/mt5#transformers.T5Tokenizer"),c(wB,"href","/docs/transformers/pr_17206/en/model_doc/mt5#transformers.T5TokenizerFast"),c(AB,"href","/docs/transformers/pr_17206/en/model_doc/tapas#transformers.TapasTokenizer"),c(yB,"href","/docs/transformers/pr_17206/en/model_doc/tapex#transformers.TapexTokenizer"),c(LB,"href","/docs/transformers/pr_17206/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(xB,"href","/docs/transformers/pr_17206/en/model_doc/bert#transformers.BertTokenizer"),c($B,"href","/docs/transformers/pr_17206/en/model_doc/bert#transformers.BertTokenizerFast"),c(kB,"href","/docs/transformers/pr_17206/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(SB,"href","/docs/transformers/pr_17206/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(RB,"href","/docs/transformers/pr_17206/en/model_doc/xglm#transformers.XGLMTokenizer"),c(BB,"href","/docs/transformers/pr_17206/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(PB,"href","/docs/transformers/pr_17206/en/model_doc/xlm#transformers.XLMTokenizer"),c(IB,"href","/docs/transformers/pr_17206/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(qB,"href","/docs/transformers/pr_17206/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(NB,"href","/docs/transformers/pr_17206/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(jB,"href","/docs/transformers/pr_17206/en/model_doc/roberta#transformers.RobertaTokenizer"),c(DB,"href","/docs/transformers/pr_17206/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(GB,"href","/docs/transformers/pr_17206/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(OB,"href","/docs/transformers/pr_17206/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(VB,"href","/docs/transformers/pr_17206/en/model_doc/albert#transformers.AlbertTokenizer"),c(XB,"href","/docs/transformers/pr_17206/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Hg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ug,"id","transformers.AutoFeatureExtractor"),c(Ug,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ug,"href","#transformers.AutoFeatureExtractor"),c(bi,"class","relative group"),c(zB,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(QB,"href","/docs/transformers/pr_17206/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(WB,"href","/docs/transformers/pr_17206/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(HB,"href","/docs/transformers/pr_17206/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(UB,"href","/docs/transformers/pr_17206/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(JB,"href","/docs/transformers/pr_17206/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(YB,"href","/docs/transformers/pr_17206/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(KB,"href","/docs/transformers/pr_17206/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(ZB,"href","/docs/transformers/pr_17206/en/model_doc/dpt#transformers.DPTFeatureExtractor"),c(eP,"href","/docs/transformers/pr_17206/en/model_doc/flava#transformers.FlavaFeatureExtractor"),c(oP,"href","/docs/transformers/pr_17206/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),c(rP,"href","/docs/transformers/pr_17206/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(tP,"href","/docs/transformers/pr_17206/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(aP,"href","/docs/transformers/pr_17206/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(nP,"href","/docs/transformers/pr_17206/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(sP,"href","/docs/transformers/pr_17206/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(lP,"href","/docs/transformers/pr_17206/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(iP,"href","/docs/transformers/pr_17206/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(dP,"href","/docs/transformers/pr_17206/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(cP,"href","/docs/transformers/pr_17206/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(fP,"href","/docs/transformers/pr_17206/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(mP,"href","/docs/transformers/pr_17206/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(gP,"href","/docs/transformers/pr_17206/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(hP,"href","/docs/transformers/pr_17206/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(pP,"href","/docs/transformers/pr_17206/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(uP,"href","/docs/transformers/pr_17206/en/model_doc/yolos#transformers.YolosFeatureExtractor"),c(Qe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Eh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ch,"id","transformers.AutoProcessor"),c(Ch,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ch,"href","#transformers.AutoProcessor"),c(vi,"class","relative group"),c(_P,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(bP,"href","/docs/transformers/pr_17206/en/model_doc/clip#transformers.CLIPProcessor"),c(vP,"href","/docs/transformers/pr_17206/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(FP,"href","/docs/transformers/pr_17206/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(TP,"href","/docs/transformers/pr_17206/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(MP,"href","/docs/transformers/pr_17206/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(EP,"href","/docs/transformers/pr_17206/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(CP,"href","/docs/transformers/pr_17206/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(wP,"href","/docs/transformers/pr_17206/en/model_doc/trocr#transformers.TrOCRProcessor"),c(AP,"href","/docs/transformers/pr_17206/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(yP,"href","/docs/transformers/pr_17206/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(LP,"href","/docs/transformers/pr_17206/en/model_doc/vilt#transformers.ViltProcessor"),c(xP,"href","/docs/transformers/pr_17206/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c($P,"href","/docs/transformers/pr_17206/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(kP,"href","/docs/transformers/pr_17206/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(We,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vh,"id","transformers.AutoModel"),c(Vh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Vh,"href","#transformers.AutoModel"),c(Ti,"class","relative group"),c(SP,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(RP,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(BP,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PP,"href","/docs/transformers/pr_17206/en/model_doc/albert#transformers.AlbertModel"),c(IP,"href","/docs/transformers/pr_17206/en/model_doc/bart#transformers.BartModel"),c(qP,"href","/docs/transformers/pr_17206/en/model_doc/beit#transformers.BeitModel"),c(NP,"href","/docs/transformers/pr_17206/en/model_doc/bert#transformers.BertModel"),c(jP,"href","/docs/transformers/pr_17206/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(DP,"href","/docs/transformers/pr_17206/en/model_doc/big_bird#transformers.BigBirdModel"),c(GP,"href","/docs/transformers/pr_17206/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(OP,"href","/docs/transformers/pr_17206/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(VP,"href","/docs/transformers/pr_17206/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(XP,"href","/docs/transformers/pr_17206/en/model_doc/camembert#transformers.CamembertModel"),c(zP,"href","/docs/transformers/pr_17206/en/model_doc/canine#transformers.CanineModel"),c(QP,"href","/docs/transformers/pr_17206/en/model_doc/clip#transformers.CLIPModel"),c(WP,"href","/docs/transformers/pr_17206/en/model_doc/convbert#transformers.ConvBertModel"),c(HP,"href","/docs/transformers/pr_17206/en/model_doc/convnext#transformers.ConvNextModel"),c(UP,"href","/docs/transformers/pr_17206/en/model_doc/ctrl#transformers.CTRLModel"),c(JP,"href","/docs/transformers/pr_17206/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(YP,"href","/docs/transformers/pr_17206/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(KP,"href","/docs/transformers/pr_17206/en/model_doc/data2vec#transformers.Data2VecVisionModel"),c(ZP,"href","/docs/transformers/pr_17206/en/model_doc/deberta#transformers.DebertaModel"),c(eI,"href","/docs/transformers/pr_17206/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(oI,"href","/docs/transformers/pr_17206/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),c(rI,"href","/docs/transformers/pr_17206/en/model_doc/deit#transformers.DeiTModel"),c(tI,"href","/docs/transformers/pr_17206/en/model_doc/detr#transformers.DetrModel"),c(aI,"href","/docs/transformers/pr_17206/en/model_doc/distilbert#transformers.DistilBertModel"),c(nI,"href","/docs/transformers/pr_17206/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(sI,"href","/docs/transformers/pr_17206/en/model_doc/dpt#transformers.DPTModel"),c(lI,"href","/docs/transformers/pr_17206/en/model_doc/electra#transformers.ElectraModel"),c(iI,"href","/docs/transformers/pr_17206/en/model_doc/flaubert#transformers.FlaubertModel"),c(dI,"href","/docs/transformers/pr_17206/en/model_doc/flava#transformers.FlavaModel"),c(cI,"href","/docs/transformers/pr_17206/en/model_doc/fnet#transformers.FNetModel"),c(fI,"href","/docs/transformers/pr_17206/en/model_doc/fsmt#transformers.FSMTModel"),c(mI,"href","/docs/transformers/pr_17206/en/model_doc/funnel#transformers.FunnelModel"),c(gI,"href","/docs/transformers/pr_17206/en/model_doc/funnel#transformers.FunnelBaseModel"),c(hI,"href","/docs/transformers/pr_17206/en/model_doc/glpn#transformers.GLPNModel"),c(pI,"href","/docs/transformers/pr_17206/en/model_doc/gpt2#transformers.GPT2Model"),c(uI,"href","/docs/transformers/pr_17206/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(_I,"href","/docs/transformers/pr_17206/en/model_doc/gptj#transformers.GPTJModel"),c(bI,"href","/docs/transformers/pr_17206/en/model_doc/hubert#transformers.HubertModel"),c(vI,"href","/docs/transformers/pr_17206/en/model_doc/ibert#transformers.IBertModel"),c(FI,"href","/docs/transformers/pr_17206/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(TI,"href","/docs/transformers/pr_17206/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(MI,"href","/docs/transformers/pr_17206/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(EI,"href","/docs/transformers/pr_17206/en/model_doc/led#transformers.LEDModel"),c(CI,"href","/docs/transformers/pr_17206/en/model_doc/longformer#transformers.LongformerModel"),c(wI,"href","/docs/transformers/pr_17206/en/model_doc/luke#transformers.LukeModel"),c(AI,"href","/docs/transformers/pr_17206/en/model_doc/lxmert#transformers.LxmertModel"),c(yI,"href","/docs/transformers/pr_17206/en/model_doc/m2m_100#transformers.M2M100Model"),c(LI,"href","/docs/transformers/pr_17206/en/model_doc/marian#transformers.MarianModel"),c(xI,"href","/docs/transformers/pr_17206/en/model_doc/maskformer#transformers.MaskFormerModel"),c($I,"href","/docs/transformers/pr_17206/en/model_doc/mbart#transformers.MBartModel"),c(kI,"href","/docs/transformers/pr_17206/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(SI,"href","/docs/transformers/pr_17206/en/model_doc/mobilebert#transformers.MobileBertModel"),c(RI,"href","/docs/transformers/pr_17206/en/model_doc/mpnet#transformers.MPNetModel"),c(BI,"href","/docs/transformers/pr_17206/en/model_doc/mt5#transformers.MT5Model"),c(PI,"href","/docs/transformers/pr_17206/en/model_doc/nystromformer#transformers.NystromformerModel"),c(II,"href","/docs/transformers/pr_17206/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(qI,"href","/docs/transformers/pr_17206/en/model_doc/pegasus#transformers.PegasusModel"),c(NI,"href","/docs/transformers/pr_17206/en/model_doc/perceiver#transformers.PerceiverModel"),c(jI,"href","/docs/transformers/pr_17206/en/model_doc/plbart#transformers.PLBartModel"),c(DI,"href","/docs/transformers/pr_17206/en/model_doc/poolformer#transformers.PoolFormerModel"),c(GI,"href","/docs/transformers/pr_17206/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(OI,"href","/docs/transformers/pr_17206/en/model_doc/qdqbert#transformers.QDQBertModel"),c(VI,"href","/docs/transformers/pr_17206/en/model_doc/reformer#transformers.ReformerModel"),c(XI,"href","/docs/transformers/pr_17206/en/model_doc/regnet#transformers.RegNetModel"),c(zI,"href","/docs/transformers/pr_17206/en/model_doc/rembert#transformers.RemBertModel"),c(QI,"href","/docs/transformers/pr_17206/en/model_doc/resnet#transformers.ResNetModel"),c(WI,"href","/docs/transformers/pr_17206/en/model_doc/retribert#transformers.RetriBertModel"),c(HI,"href","/docs/transformers/pr_17206/en/model_doc/roberta#transformers.RobertaModel"),c(UI,"href","/docs/transformers/pr_17206/en/model_doc/roformer#transformers.RoFormerModel"),c(JI,"href","/docs/transformers/pr_17206/en/model_doc/segformer#transformers.SegformerModel"),c(YI,"href","/docs/transformers/pr_17206/en/model_doc/sew#transformers.SEWModel"),c(KI,"href","/docs/transformers/pr_17206/en/model_doc/sew-d#transformers.SEWDModel"),c(ZI,"href","/docs/transformers/pr_17206/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(eq,"href","/docs/transformers/pr_17206/en/model_doc/splinter#transformers.SplinterModel"),c(oq,"href","/docs/transformers/pr_17206/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(rq,"href","/docs/transformers/pr_17206/en/model_doc/swin#transformers.SwinModel"),c(tq,"href","/docs/transformers/pr_17206/en/model_doc/t5#transformers.T5Model"),c(aq,"href","/docs/transformers/pr_17206/en/model_doc/tapas#transformers.TapasModel"),c(nq,"href","/docs/transformers/pr_17206/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(sq,"href","/docs/transformers/pr_17206/en/model_doc/unispeech#transformers.UniSpeechModel"),c(lq,"href","/docs/transformers/pr_17206/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(iq,"href","/docs/transformers/pr_17206/en/model_doc/van#transformers.VanModel"),c(dq,"href","/docs/transformers/pr_17206/en/model_doc/vilt#transformers.ViltModel"),c(cq,"href","/docs/transformers/pr_17206/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(fq,"href","/docs/transformers/pr_17206/en/model_doc/visual_bert#transformers.VisualBertModel"),c(mq,"href","/docs/transformers/pr_17206/en/model_doc/vit#transformers.ViTModel"),c(gq,"href","/docs/transformers/pr_17206/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(hq,"href","/docs/transformers/pr_17206/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(pq,"href","/docs/transformers/pr_17206/en/model_doc/wavlm#transformers.WavLMModel"),c(uq,"href","/docs/transformers/pr_17206/en/model_doc/xglm#transformers.XGLMModel"),c(_q,"href","/docs/transformers/pr_17206/en/model_doc/xlm#transformers.XLMModel"),c(bq,"href","/docs/transformers/pr_17206/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(vq,"href","/docs/transformers/pr_17206/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(Fq,"href","/docs/transformers/pr_17206/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(Tq,"href","/docs/transformers/pr_17206/en/model_doc/xlnet#transformers.XLNetModel"),c(Mq,"href","/docs/transformers/pr_17206/en/model_doc/yolos#transformers.YolosModel"),c(Eq,"href","/docs/transformers/pr_17206/en/model_doc/yoso#transformers.YosoModel"),c(He,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bu,"id","transformers.AutoModelForPreTraining"),c(Bu,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Bu,"href","#transformers.AutoModelForPreTraining"),c(Ci,"class","relative group"),c(Cq,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wq,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Aq,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yq,"href","/docs/transformers/pr_17206/en/model_doc/albert#transformers.AlbertForPreTraining"),c(Lq,"href","/docs/transformers/pr_17206/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(xq,"href","/docs/transformers/pr_17206/en/model_doc/bert#transformers.BertForPreTraining"),c($q,"href","/docs/transformers/pr_17206/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(kq,"href","/docs/transformers/pr_17206/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(Sq,"href","/docs/transformers/pr_17206/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(Rq,"href","/docs/transformers/pr_17206/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(Bq,"href","/docs/transformers/pr_17206/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(Pq,"href","/docs/transformers/pr_17206/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(Iq,"href","/docs/transformers/pr_17206/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(qq,"href","/docs/transformers/pr_17206/en/model_doc/electra#transformers.ElectraForPreTraining"),c(Nq,"href","/docs/transformers/pr_17206/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(jq,"href","/docs/transformers/pr_17206/en/model_doc/flava#transformers.FlavaForPreTraining"),c(Dq,"href","/docs/transformers/pr_17206/en/model_doc/fnet#transformers.FNetForPreTraining"),c(Gq,"href","/docs/transformers/pr_17206/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(Oq,"href","/docs/transformers/pr_17206/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(Vq,"href","/docs/transformers/pr_17206/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(Xq,"href","/docs/transformers/pr_17206/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(zq,"href","/docs/transformers/pr_17206/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(Qq,"href","/docs/transformers/pr_17206/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(Wq,"href","/docs/transformers/pr_17206/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(Hq,"href","/docs/transformers/pr_17206/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(Uq,"href","/docs/transformers/pr_17206/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(Jq,"href","/docs/transformers/pr_17206/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(Yq,"href","/docs/transformers/pr_17206/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(Kq,"href","/docs/transformers/pr_17206/en/model_doc/retribert#transformers.RetriBertModel"),c(Zq,"href","/docs/transformers/pr_17206/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(eN,"href","/docs/transformers/pr_17206/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(oN,"href","/docs/transformers/pr_17206/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(rN,"href","/docs/transformers/pr_17206/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(tN,"href","/docs/transformers/pr_17206/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(aN,"href","/docs/transformers/pr_17206/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(nN,"href","/docs/transformers/pr_17206/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(sN,"href","/docs/transformers/pr_17206/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(lN,"href","/docs/transformers/pr_17206/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(iN,"href","/docs/transformers/pr_17206/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(dN,"href","/docs/transformers/pr_17206/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(cN,"href","/docs/transformers/pr_17206/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(fN,"href","/docs/transformers/pr_17206/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(mN,"href","/docs/transformers/pr_17206/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(C_,"id","transformers.AutoModelForCausalLM"),c(C_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(C_,"href","#transformers.AutoModelForCausalLM"),c(yi,"class","relative group"),c(gN,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(hN,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(pN,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uN,"href","/docs/transformers/pr_17206/en/model_doc/bart#transformers.BartForCausalLM"),c(_N,"href","/docs/transformers/pr_17206/en/model_doc/bert#transformers.BertLMHeadModel"),c(bN,"href","/docs/transformers/pr_17206/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(vN,"href","/docs/transformers/pr_17206/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(FN,"href","/docs/transformers/pr_17206/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(TN,"href","/docs/transformers/pr_17206/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(MN,"href","/docs/transformers/pr_17206/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(EN,"href","/docs/transformers/pr_17206/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(CN,"href","/docs/transformers/pr_17206/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(wN,"href","/docs/transformers/pr_17206/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(AN,"href","/docs/transformers/pr_17206/en/model_doc/electra#transformers.ElectraForCausalLM"),c(yN,"href","/docs/transformers/pr_17206/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(LN,"href","/docs/transformers/pr_17206/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(xN,"href","/docs/transformers/pr_17206/en/model_doc/gptj#transformers.GPTJForCausalLM"),c($N,"href","/docs/transformers/pr_17206/en/model_doc/marian#transformers.MarianForCausalLM"),c(kN,"href","/docs/transformers/pr_17206/en/model_doc/mbart#transformers.MBartForCausalLM"),c(SN,"href","/docs/transformers/pr_17206/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(RN,"href","/docs/transformers/pr_17206/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(BN,"href","/docs/transformers/pr_17206/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(PN,"href","/docs/transformers/pr_17206/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(IN,"href","/docs/transformers/pr_17206/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(qN,"href","/docs/transformers/pr_17206/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(NN,"href","/docs/transformers/pr_17206/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(jN,"href","/docs/transformers/pr_17206/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(DN,"href","/docs/transformers/pr_17206/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(GN,"href","/docs/transformers/pr_17206/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(ON,"href","/docs/transformers/pr_17206/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(VN,"href","/docs/transformers/pr_17206/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(XN,"href","/docs/transformers/pr_17206/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(zN,"href","/docs/transformers/pr_17206/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(QN,"href","/docs/transformers/pr_17206/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(WN,"href","/docs/transformers/pr_17206/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(HN,"href","/docs/transformers/pr_17206/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(UN,"href","/docs/transformers/pr_17206/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(JN,"href","/docs/transformers/pr_17206/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(d2,"id","transformers.AutoModelForMaskedLM"),c(d2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(d2,"href","#transformers.AutoModelForMaskedLM"),c($i,"class","relative group"),c(YN,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(KN,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ZN,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(at,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ej,"href","/docs/transformers/pr_17206/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(oj,"href","/docs/transformers/pr_17206/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(rj,"href","/docs/transformers/pr_17206/en/model_doc/bert#transformers.BertForMaskedLM"),c(tj,"href","/docs/transformers/pr_17206/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(aj,"href","/docs/transformers/pr_17206/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(nj,"href","/docs/transformers/pr_17206/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(sj,"href","/docs/transformers/pr_17206/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(lj,"href","/docs/transformers/pr_17206/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(ij,"href","/docs/transformers/pr_17206/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(dj,"href","/docs/transformers/pr_17206/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(cj,"href","/docs/transformers/pr_17206/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(fj,"href","/docs/transformers/pr_17206/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(mj,"href","/docs/transformers/pr_17206/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(gj,"href","/docs/transformers/pr_17206/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(hj,"href","/docs/transformers/pr_17206/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(pj,"href","/docs/transformers/pr_17206/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(uj,"href","/docs/transformers/pr_17206/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(_j,"href","/docs/transformers/pr_17206/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(bj,"href","/docs/transformers/pr_17206/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(vj,"href","/docs/transformers/pr_17206/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(Fj,"href","/docs/transformers/pr_17206/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(Tj,"href","/docs/transformers/pr_17206/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(Mj,"href","/docs/transformers/pr_17206/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(Ej,"href","/docs/transformers/pr_17206/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(Cj,"href","/docs/transformers/pr_17206/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(wj,"href","/docs/transformers/pr_17206/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(Aj,"href","/docs/transformers/pr_17206/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(yj,"href","/docs/transformers/pr_17206/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(Lj,"href","/docs/transformers/pr_17206/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(xj,"href","/docs/transformers/pr_17206/en/model_doc/tapas#transformers.TapasForMaskedLM"),c($j,"href","/docs/transformers/pr_17206/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(kj,"href","/docs/transformers/pr_17206/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(Sj,"href","/docs/transformers/pr_17206/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(Rj,"href","/docs/transformers/pr_17206/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(H2,"id","transformers.AutoModelForSeq2SeqLM"),c(H2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(H2,"href","#transformers.AutoModelForSeq2SeqLM"),c(Ri,"class","relative group"),c(Bj,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pj,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Ij,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qj,"href","/docs/transformers/pr_17206/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(Nj,"href","/docs/transformers/pr_17206/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(jj,"href","/docs/transformers/pr_17206/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(Dj,"href","/docs/transformers/pr_17206/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(Gj,"href","/docs/transformers/pr_17206/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(Oj,"href","/docs/transformers/pr_17206/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(Vj,"href","/docs/transformers/pr_17206/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(Xj,"href","/docs/transformers/pr_17206/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(zj,"href","/docs/transformers/pr_17206/en/model_doc/marian#transformers.MarianMTModel"),c(Qj,"href","/docs/transformers/pr_17206/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(Wj,"href","/docs/transformers/pr_17206/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(Hj,"href","/docs/transformers/pr_17206/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(Uj,"href","/docs/transformers/pr_17206/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(Jj,"href","/docs/transformers/pr_17206/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(Yj,"href","/docs/transformers/pr_17206/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(Kj,"href","/docs/transformers/pr_17206/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(Zj,"href","/docs/transformers/pr_17206/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(p1,"id","transformers.AutoModelForSequenceClassification"),c(p1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(p1,"href","#transformers.AutoModelForSequenceClassification"),c(Ii,"class","relative group"),c(eD,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oD,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(rD,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(st,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tD,"href","/docs/transformers/pr_17206/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(aD,"href","/docs/transformers/pr_17206/en/model_doc/bart#transformers.BartForSequenceClassification"),c(nD,"href","/docs/transformers/pr_17206/en/model_doc/bert#transformers.BertForSequenceClassification"),c(sD,"href","/docs/transformers/pr_17206/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(lD,"href","/docs/transformers/pr_17206/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(iD,"href","/docs/transformers/pr_17206/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(dD,"href","/docs/transformers/pr_17206/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(cD,"href","/docs/transformers/pr_17206/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(fD,"href","/docs/transformers/pr_17206/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(mD,"href","/docs/transformers/pr_17206/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(gD,"href","/docs/transformers/pr_17206/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(hD,"href","/docs/transformers/pr_17206/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(pD,"href","/docs/transformers/pr_17206/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(uD,"href","/docs/transformers/pr_17206/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(_D,"href","/docs/transformers/pr_17206/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(bD,"href","/docs/transformers/pr_17206/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(vD,"href","/docs/transformers/pr_17206/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(FD,"href","/docs/transformers/pr_17206/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(TD,"href","/docs/transformers/pr_17206/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(MD,"href","/docs/transformers/pr_17206/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(ED,"href","/docs/transformers/pr_17206/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(CD,"href","/docs/transformers/pr_17206/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(wD,"href","/docs/transformers/pr_17206/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(AD,"href","/docs/transformers/pr_17206/en/model_doc/led#transformers.LEDForSequenceClassification"),c(yD,"href","/docs/transformers/pr_17206/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(LD,"href","/docs/transformers/pr_17206/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(xD,"href","/docs/transformers/pr_17206/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c($D,"href","/docs/transformers/pr_17206/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(kD,"href","/docs/transformers/pr_17206/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(SD,"href","/docs/transformers/pr_17206/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(RD,"href","/docs/transformers/pr_17206/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(BD,"href","/docs/transformers/pr_17206/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(PD,"href","/docs/transformers/pr_17206/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(ID,"href","/docs/transformers/pr_17206/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(qD,"href","/docs/transformers/pr_17206/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(ND,"href","/docs/transformers/pr_17206/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(jD,"href","/docs/transformers/pr_17206/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(DD,"href","/docs/transformers/pr_17206/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(GD,"href","/docs/transformers/pr_17206/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(OD,"href","/docs/transformers/pr_17206/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(VD,"href","/docs/transformers/pr_17206/en/model_doc/bart#transformers.BartForSequenceClassification"),c(XD,"href","/docs/transformers/pr_17206/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(zD,"href","/docs/transformers/pr_17206/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(QD,"href","/docs/transformers/pr_17206/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(WD,"href","/docs/transformers/pr_17206/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(HD,"href","/docs/transformers/pr_17206/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(UD,"href","/docs/transformers/pr_17206/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mb,"id","transformers.AutoModelForMultipleChoice"),c(mb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(mb,"href","#transformers.AutoModelForMultipleChoice"),c(ji,"class","relative group"),c(JD,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(YD,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(KD,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZD,"href","/docs/transformers/pr_17206/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(eG,"href","/docs/transformers/pr_17206/en/model_doc/bert#transformers.BertForMultipleChoice"),c(oG,"href","/docs/transformers/pr_17206/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(rG,"href","/docs/transformers/pr_17206/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(tG,"href","/docs/transformers/pr_17206/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(aG,"href","/docs/transformers/pr_17206/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(nG,"href","/docs/transformers/pr_17206/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(sG,"href","/docs/transformers/pr_17206/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice"),c(lG,"href","/docs/transformers/pr_17206/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(iG,"href","/docs/transformers/pr_17206/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(dG,"href","/docs/transformers/pr_17206/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(cG,"href","/docs/transformers/pr_17206/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(fG,"href","/docs/transformers/pr_17206/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(mG,"href","/docs/transformers/pr_17206/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(gG,"href","/docs/transformers/pr_17206/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(hG,"href","/docs/transformers/pr_17206/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(pG,"href","/docs/transformers/pr_17206/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(uG,"href","/docs/transformers/pr_17206/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(_G,"href","/docs/transformers/pr_17206/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(bG,"href","/docs/transformers/pr_17206/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(vG,"href","/docs/transformers/pr_17206/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(FG,"href","/docs/transformers/pr_17206/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(TG,"href","/docs/transformers/pr_17206/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(MG,"href","/docs/transformers/pr_17206/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(EG,"href","/docs/transformers/pr_17206/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(CG,"href","/docs/transformers/pr_17206/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(wG,"href","/docs/transformers/pr_17206/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(AG,"href","/docs/transformers/pr_17206/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(yG,"href","/docs/transformers/pr_17206/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zb,"id","transformers.AutoModelForNextSentencePrediction"),c(zb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(zb,"href","#transformers.AutoModelForNextSentencePrediction"),c(Oi,"class","relative group"),c(LG,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xG,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c($G,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kG,"href","/docs/transformers/pr_17206/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(SG,"href","/docs/transformers/pr_17206/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(RG,"href","/docs/transformers/pr_17206/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(BG,"href","/docs/transformers/pr_17206/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(PG,"href","/docs/transformers/pr_17206/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ev,"id","transformers.AutoModelForTokenClassification"),c(ev,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ev,"href","#transformers.AutoModelForTokenClassification"),c(zi,"class","relative group"),c(IG,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qG,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(NG,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jG,"href","/docs/transformers/pr_17206/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(DG,"href","/docs/transformers/pr_17206/en/model_doc/bert#transformers.BertForTokenClassification"),c(GG,"href","/docs/transformers/pr_17206/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(OG,"href","/docs/transformers/pr_17206/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(VG,"href","/docs/transformers/pr_17206/en/model_doc/canine#transformers.CanineForTokenClassification"),c(XG,"href","/docs/transformers/pr_17206/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(zG,"href","/docs/transformers/pr_17206/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(QG,"href","/docs/transformers/pr_17206/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(WG,"href","/docs/transformers/pr_17206/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(HG,"href","/docs/transformers/pr_17206/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(UG,"href","/docs/transformers/pr_17206/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(JG,"href","/docs/transformers/pr_17206/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(YG,"href","/docs/transformers/pr_17206/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(KG,"href","/docs/transformers/pr_17206/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(ZG,"href","/docs/transformers/pr_17206/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(eO,"href","/docs/transformers/pr_17206/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(oO,"href","/docs/transformers/pr_17206/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(rO,"href","/docs/transformers/pr_17206/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(tO,"href","/docs/transformers/pr_17206/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(aO,"href","/docs/transformers/pr_17206/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(nO,"href","/docs/transformers/pr_17206/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(sO,"href","/docs/transformers/pr_17206/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(lO,"href","/docs/transformers/pr_17206/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(iO,"href","/docs/transformers/pr_17206/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(dO,"href","/docs/transformers/pr_17206/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(cO,"href","/docs/transformers/pr_17206/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(fO,"href","/docs/transformers/pr_17206/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(mO,"href","/docs/transformers/pr_17206/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(gO,"href","/docs/transformers/pr_17206/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(hO,"href","/docs/transformers/pr_17206/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(pO,"href","/docs/transformers/pr_17206/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(uO,"href","/docs/transformers/pr_17206/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(_O,"href","/docs/transformers/pr_17206/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qv,"id","transformers.AutoModelForQuestionAnswering"),c(qv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(qv,"href","#transformers.AutoModelForQuestionAnswering"),c(Hi,"class","relative group"),c(bO,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vO,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(FO,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TO,"href","/docs/transformers/pr_17206/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(MO,"href","/docs/transformers/pr_17206/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(EO,"href","/docs/transformers/pr_17206/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(CO,"href","/docs/transformers/pr_17206/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(wO,"href","/docs/transformers/pr_17206/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(AO,"href","/docs/transformers/pr_17206/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(yO,"href","/docs/transformers/pr_17206/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(LO,"href","/docs/transformers/pr_17206/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(xO,"href","/docs/transformers/pr_17206/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c($O,"href","/docs/transformers/pr_17206/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(kO,"href","/docs/transformers/pr_17206/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(SO,"href","/docs/transformers/pr_17206/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(RO,"href","/docs/transformers/pr_17206/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(BO,"href","/docs/transformers/pr_17206/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(PO,"href","/docs/transformers/pr_17206/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(IO,"href","/docs/transformers/pr_17206/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(qO,"href","/docs/transformers/pr_17206/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(NO,"href","/docs/transformers/pr_17206/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(jO,"href","/docs/transformers/pr_17206/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(DO,"href","/docs/transformers/pr_17206/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(GO,"href","/docs/transformers/pr_17206/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(OO,"href","/docs/transformers/pr_17206/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(VO,"href","/docs/transformers/pr_17206/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(XO,"href","/docs/transformers/pr_17206/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(zO,"href","/docs/transformers/pr_17206/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(QO,"href","/docs/transformers/pr_17206/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(WO,"href","/docs/transformers/pr_17206/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(HO,"href","/docs/transformers/pr_17206/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(UO,"href","/docs/transformers/pr_17206/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(JO,"href","/docs/transformers/pr_17206/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(YO,"href","/docs/transformers/pr_17206/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(KO,"href","/docs/transformers/pr_17206/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(ZO,"href","/docs/transformers/pr_17206/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(eV,"href","/docs/transformers/pr_17206/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(oV,"href","/docs/transformers/pr_17206/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(rV,"href","/docs/transformers/pr_17206/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(tV,"href","/docs/transformers/pr_17206/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(aV,"href","/docs/transformers/pr_17206/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(nV,"href","/docs/transformers/pr_17206/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(AF,"id","transformers.AutoModelForTableQuestionAnswering"),c(AF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(AF,"href","#transformers.AutoModelForTableQuestionAnswering"),c(Yi,"class","relative group"),c(sV,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lV,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(iV,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dV,"href","/docs/transformers/pr_17206/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kF,"id","transformers.AutoModelForImageClassification"),c(kF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(kF,"href","#transformers.AutoModelForImageClassification"),c(ed,"class","relative group"),c(cV,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(fV,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(mV,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gV,"href","/docs/transformers/pr_17206/en/model_doc/beit#transformers.BeitForImageClassification"),c(hV,"href","/docs/transformers/pr_17206/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(pV,"href","/docs/transformers/pr_17206/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),c(uV,"href","/docs/transformers/pr_17206/en/model_doc/deit#transformers.DeiTForImageClassification"),c(_V,"href","/docs/transformers/pr_17206/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(bV,"href","/docs/transformers/pr_17206/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(vV,"href","/docs/transformers/pr_17206/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(FV,"href","/docs/transformers/pr_17206/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(TV,"href","/docs/transformers/pr_17206/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(MV,"href","/docs/transformers/pr_17206/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(EV,"href","/docs/transformers/pr_17206/en/model_doc/regnet#transformers.RegNetForImageClassification"),c(CV,"href","/docs/transformers/pr_17206/en/model_doc/resnet#transformers.ResNetForImageClassification"),c(wV,"href","/docs/transformers/pr_17206/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(AV,"href","/docs/transformers/pr_17206/en/model_doc/swin#transformers.SwinForImageClassification"),c(yV,"href","/docs/transformers/pr_17206/en/model_doc/van#transformers.VanForImageClassification"),c(LV,"href","/docs/transformers/pr_17206/en/model_doc/vit#transformers.ViTForImageClassification"),c(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QF,"id","transformers.AutoModelForVision2Seq"),c(QF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(QF,"href","#transformers.AutoModelForVision2Seq"),c(td,"class","relative group"),c(xV,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($V,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(kV,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(SV,"href","/docs/transformers/pr_17206/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Do,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YF,"id","transformers.AutoModelForAudioClassification"),c(YF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(YF,"href","#transformers.AutoModelForAudioClassification"),c(sd,"class","relative group"),c(RV,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(BV,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(PV,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(IV,"href","/docs/transformers/pr_17206/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(qV,"href","/docs/transformers/pr_17206/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(NV,"href","/docs/transformers/pr_17206/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(jV,"href","/docs/transformers/pr_17206/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(DV,"href","/docs/transformers/pr_17206/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(GV,"href","/docs/transformers/pr_17206/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(OV,"href","/docs/transformers/pr_17206/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(VV,"href","/docs/transformers/pr_17206/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(d0,"id","transformers.AutoModelForAudioFrameClassification"),c(d0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(d0,"href","#transformers.AutoModelForAudioFrameClassification"),c(dd,"class","relative group"),c(XV,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zV,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(QV,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WV,"href","/docs/transformers/pr_17206/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(HV,"href","/docs/transformers/pr_17206/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(UV,"href","/docs/transformers/pr_17206/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(JV,"href","/docs/transformers/pr_17206/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_0,"id","transformers.AutoModelForCTC"),c(_0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_0,"href","#transformers.AutoModelForCTC"),c(md,"class","relative group"),c(YV,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(KV,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ZV,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eX,"href","/docs/transformers/pr_17206/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(oX,"href","/docs/transformers/pr_17206/en/model_doc/hubert#transformers.HubertForCTC"),c(rX,"href","/docs/transformers/pr_17206/en/model_doc/sew#transformers.SEWForCTC"),c(tX,"href","/docs/transformers/pr_17206/en/model_doc/sew-d#transformers.SEWDForCTC"),c(aX,"href","/docs/transformers/pr_17206/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(nX,"href","/docs/transformers/pr_17206/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(sX,"href","/docs/transformers/pr_17206/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(lX,"href","/docs/transformers/pr_17206/en/model_doc/wavlm#transformers.WavLMForCTC"),c(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(x0,"id","transformers.AutoModelForSpeechSeq2Seq"),c(x0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(x0,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(pd,"class","relative group"),c(iX,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dX,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(cX,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fX,"href","/docs/transformers/pr_17206/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(mX,"href","/docs/transformers/pr_17206/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(P0,"id","transformers.AutoModelForAudioXVector"),c(P0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(P0,"href","#transformers.AutoModelForAudioXVector"),c(bd,"class","relative group"),c(gX,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(hX,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(pX,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uX,"href","/docs/transformers/pr_17206/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(_X,"href","/docs/transformers/pr_17206/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(bX,"href","/docs/transformers/pr_17206/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(vX,"href","/docs/transformers/pr_17206/en/model_doc/wavlm#transformers.WavLMForXVector"),c(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(V0,"id","transformers.AutoModelForMaskedImageModeling"),c(V0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(V0,"href","#transformers.AutoModelForMaskedImageModeling"),c(Td,"class","relative group"),c(FX,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(TX,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(MX,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EX,"href","/docs/transformers/pr_17206/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(CX,"href","/docs/transformers/pr_17206/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(wX,"href","/docs/transformers/pr_17206/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(J0,"id","transformers.AutoModelForObjectDetection"),c(J0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(J0,"href","#transformers.AutoModelForObjectDetection"),c(wd,"class","relative group"),c(AX,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yX,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(LX,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xX,"href","/docs/transformers/pr_17206/en/model_doc/detr#transformers.DetrForObjectDetection"),c($X,"href","/docs/transformers/pr_17206/en/model_doc/yolos#transformers.YolosForObjectDetection"),c(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(r6,"id","transformers.AutoModelForImageSegmentation"),c(r6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(r6,"href","#transformers.AutoModelForImageSegmentation"),c(Ld,"class","relative group"),c(kX,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(SX,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(RX,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BX,"href","/docs/transformers/pr_17206/en/model_doc/detr#transformers.DetrForSegmentation"),c(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(l6,"id","transformers.AutoModelForSemanticSegmentation"),c(l6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(l6,"href","#transformers.AutoModelForSemanticSegmentation"),c(kd,"class","relative group"),c(PX,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(IX,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qX,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(NX,"href","/docs/transformers/pr_17206/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(jX,"href","/docs/transformers/pr_17206/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),c(DX,"href","/docs/transformers/pr_17206/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),c(GX,"href","/docs/transformers/pr_17206/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(p6,"id","transformers.AutoModelForInstanceSegmentation"),c(p6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(p6,"href","#transformers.AutoModelForInstanceSegmentation"),c(Bd,"class","relative group"),c(OX,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(VX,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(XX,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zX,"href","/docs/transformers/pr_17206/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(F6,"id","transformers.TFAutoModel"),c(F6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(F6,"href","#transformers.TFAutoModel"),c(qd,"class","relative group"),c(QX,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(WX,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(HX,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UX,"href","/docs/transformers/pr_17206/en/model_doc/albert#transformers.TFAlbertModel"),c(JX,"href","/docs/transformers/pr_17206/en/model_doc/bart#transformers.TFBartModel"),c(YX,"href","/docs/transformers/pr_17206/en/model_doc/bert#transformers.TFBertModel"),c(KX,"href","/docs/transformers/pr_17206/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(ZX,"href","/docs/transformers/pr_17206/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(ez,"href","/docs/transformers/pr_17206/en/model_doc/camembert#transformers.TFCamembertModel"),c(oz,"href","/docs/transformers/pr_17206/en/model_doc/clip#transformers.TFCLIPModel"),c(rz,"href","/docs/transformers/pr_17206/en/model_doc/convbert#transformers.TFConvBertModel"),c(tz,"href","/docs/transformers/pr_17206/en/model_doc/convnext#transformers.TFConvNextModel"),c(az,"href","/docs/transformers/pr_17206/en/model_doc/ctrl#transformers.TFCTRLModel"),c(nz,"href","/docs/transformers/pr_17206/en/model_doc/data2vec#transformers.TFData2VecVisionModel"),c(sz,"href","/docs/transformers/pr_17206/en/model_doc/deberta#transformers.TFDebertaModel"),c(lz,"href","/docs/transformers/pr_17206/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(iz,"href","/docs/transformers/pr_17206/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(dz,"href","/docs/transformers/pr_17206/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(cz,"href","/docs/transformers/pr_17206/en/model_doc/electra#transformers.TFElectraModel"),c(fz,"href","/docs/transformers/pr_17206/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(mz,"href","/docs/transformers/pr_17206/en/model_doc/funnel#transformers.TFFunnelModel"),c(gz,"href","/docs/transformers/pr_17206/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(hz,"href","/docs/transformers/pr_17206/en/model_doc/gpt2#transformers.TFGPT2Model"),c(pz,"href","/docs/transformers/pr_17206/en/model_doc/gptj#transformers.TFGPTJModel"),c(uz,"href","/docs/transformers/pr_17206/en/model_doc/hubert#transformers.TFHubertModel"),c(_z,"href","/docs/transformers/pr_17206/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(bz,"href","/docs/transformers/pr_17206/en/model_doc/led#transformers.TFLEDModel"),c(vz,"href","/docs/transformers/pr_17206/en/model_doc/longformer#transformers.TFLongformerModel"),c(Fz,"href","/docs/transformers/pr_17206/en/model_doc/lxmert#transformers.TFLxmertModel"),c(Tz,"href","/docs/transformers/pr_17206/en/model_doc/marian#transformers.TFMarianModel"),c(Mz,"href","/docs/transformers/pr_17206/en/model_doc/mbart#transformers.TFMBartModel"),c(Ez,"href","/docs/transformers/pr_17206/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(Cz,"href","/docs/transformers/pr_17206/en/model_doc/mpnet#transformers.TFMPNetModel"),c(wz,"href","/docs/transformers/pr_17206/en/model_doc/mt5#transformers.TFMT5Model"),c(Az,"href","/docs/transformers/pr_17206/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(yz,"href","/docs/transformers/pr_17206/en/model_doc/pegasus#transformers.TFPegasusModel"),c(Lz,"href","/docs/transformers/pr_17206/en/model_doc/rembert#transformers.TFRemBertModel"),c(xz,"href","/docs/transformers/pr_17206/en/model_doc/roberta#transformers.TFRobertaModel"),c($z,"href","/docs/transformers/pr_17206/en/model_doc/roformer#transformers.TFRoFormerModel"),c(kz,"href","/docs/transformers/pr_17206/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(Sz,"href","/docs/transformers/pr_17206/en/model_doc/t5#transformers.TFT5Model"),c(Rz,"href","/docs/transformers/pr_17206/en/model_doc/tapas#transformers.TFTapasModel"),c(Bz,"href","/docs/transformers/pr_17206/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(Pz,"href","/docs/transformers/pr_17206/en/model_doc/vit#transformers.TFViTModel"),c(Iz,"href","/docs/transformers/pr_17206/en/model_doc/vit_mae#transformers.TFViTMAEModel"),c(qz,"href","/docs/transformers/pr_17206/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(Nz,"href","/docs/transformers/pr_17206/en/model_doc/xlm#transformers.TFXLMModel"),c(jz,"href","/docs/transformers/pr_17206/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(Dz,"href","/docs/transformers/pr_17206/en/model_doc/xlnet#transformers.TFXLNetModel"),c(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gT,"id","transformers.TFAutoModelForPreTraining"),c(gT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(gT,"href","#transformers.TFAutoModelForPreTraining"),c(Dd,"class","relative group"),c(Gz,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Oz,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Vz,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xz,"href","/docs/transformers/pr_17206/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(zz,"href","/docs/transformers/pr_17206/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(Qz,"href","/docs/transformers/pr_17206/en/model_doc/bert#transformers.TFBertForPreTraining"),c(Wz,"href","/docs/transformers/pr_17206/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(Hz,"href","/docs/transformers/pr_17206/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(Uz,"href","/docs/transformers/pr_17206/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(Jz,"href","/docs/transformers/pr_17206/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(Yz,"href","/docs/transformers/pr_17206/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(Kz,"href","/docs/transformers/pr_17206/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(Zz,"href","/docs/transformers/pr_17206/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(eQ,"href","/docs/transformers/pr_17206/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(oQ,"href","/docs/transformers/pr_17206/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(rQ,"href","/docs/transformers/pr_17206/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(tQ,"href","/docs/transformers/pr_17206/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(aQ,"href","/docs/transformers/pr_17206/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(nQ,"href","/docs/transformers/pr_17206/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(sQ,"href","/docs/transformers/pr_17206/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(lQ,"href","/docs/transformers/pr_17206/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(iQ,"href","/docs/transformers/pr_17206/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(dQ,"href","/docs/transformers/pr_17206/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),c(cQ,"href","/docs/transformers/pr_17206/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(fQ,"href","/docs/transformers/pr_17206/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(mQ,"href","/docs/transformers/pr_17206/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jT,"id","transformers.TFAutoModelForCausalLM"),c(jT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(jT,"href","#transformers.TFAutoModelForCausalLM"),c(Vd,"class","relative group"),c(gQ,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(hQ,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(pQ,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uQ,"href","/docs/transformers/pr_17206/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(_Q,"href","/docs/transformers/pr_17206/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c(bQ,"href","/docs/transformers/pr_17206/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(vQ,"href","/docs/transformers/pr_17206/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(FQ,"href","/docs/transformers/pr_17206/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),c(TQ,"href","/docs/transformers/pr_17206/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(MQ,"href","/docs/transformers/pr_17206/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(EQ,"href","/docs/transformers/pr_17206/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(CQ,"href","/docs/transformers/pr_17206/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(wQ,"href","/docs/transformers/pr_17206/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(AQ,"href","/docs/transformers/pr_17206/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(yQ,"href","/docs/transformers/pr_17206/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(e7,"id","transformers.TFAutoModelForImageClassification"),c(e7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(e7,"href","#transformers.TFAutoModelForImageClassification"),c(Qd,"class","relative group"),c(LQ,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xQ,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c($Q,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kQ,"href","/docs/transformers/pr_17206/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(SQ,"href","/docs/transformers/pr_17206/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification"),c(RQ,"href","/docs/transformers/pr_17206/en/model_doc/vit#transformers.TFViTForImageClassification"),c(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(s7,"id","transformers.TFAutoModelForMaskedLM"),c(s7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(s7,"href","#transformers.TFAutoModelForMaskedLM"),c(Jd,"class","relative group"),c(BQ,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(PQ,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(IQ,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qQ,"href","/docs/transformers/pr_17206/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(NQ,"href","/docs/transformers/pr_17206/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(jQ,"href","/docs/transformers/pr_17206/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(DQ,"href","/docs/transformers/pr_17206/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(GQ,"href","/docs/transformers/pr_17206/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(OQ,"href","/docs/transformers/pr_17206/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(VQ,"href","/docs/transformers/pr_17206/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(XQ,"href","/docs/transformers/pr_17206/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(zQ,"href","/docs/transformers/pr_17206/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(QQ,"href","/docs/transformers/pr_17206/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(WQ,"href","/docs/transformers/pr_17206/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(HQ,"href","/docs/transformers/pr_17206/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(UQ,"href","/docs/transformers/pr_17206/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(JQ,"href","/docs/transformers/pr_17206/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(YQ,"href","/docs/transformers/pr_17206/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(KQ,"href","/docs/transformers/pr_17206/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(ZQ,"href","/docs/transformers/pr_17206/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(eW,"href","/docs/transformers/pr_17206/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(oW,"href","/docs/transformers/pr_17206/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(rW,"href","/docs/transformers/pr_17206/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(x7,"id","transformers.TFAutoModelForSeq2SeqLM"),c(x7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(x7,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(Zd,"class","relative group"),c(tW,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(aW,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(nW,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sW,"href","/docs/transformers/pr_17206/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(lW,"href","/docs/transformers/pr_17206/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(iW,"href","/docs/transformers/pr_17206/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(dW,"href","/docs/transformers/pr_17206/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(cW,"href","/docs/transformers/pr_17206/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(fW,"href","/docs/transformers/pr_17206/en/model_doc/marian#transformers.TFMarianMTModel"),c(mW,"href","/docs/transformers/pr_17206/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(gW,"href","/docs/transformers/pr_17206/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(hW,"href","/docs/transformers/pr_17206/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(pW,"href","/docs/transformers/pr_17206/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(O7,"id","transformers.TFAutoModelForSequenceClassification"),c(O7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(O7,"href","#transformers.TFAutoModelForSequenceClassification"),c(rc,"class","relative group"),c(uW,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_W,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(bW,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vW,"href","/docs/transformers/pr_17206/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(FW,"href","/docs/transformers/pr_17206/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(TW,"href","/docs/transformers/pr_17206/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(MW,"href","/docs/transformers/pr_17206/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(EW,"href","/docs/transformers/pr_17206/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(CW,"href","/docs/transformers/pr_17206/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(wW,"href","/docs/transformers/pr_17206/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(AW,"href","/docs/transformers/pr_17206/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(yW,"href","/docs/transformers/pr_17206/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(LW,"href","/docs/transformers/pr_17206/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(xW,"href","/docs/transformers/pr_17206/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c($W,"href","/docs/transformers/pr_17206/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(kW,"href","/docs/transformers/pr_17206/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),c(SW,"href","/docs/transformers/pr_17206/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(RW,"href","/docs/transformers/pr_17206/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(BW,"href","/docs/transformers/pr_17206/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(PW,"href","/docs/transformers/pr_17206/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(IW,"href","/docs/transformers/pr_17206/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(qW,"href","/docs/transformers/pr_17206/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(NW,"href","/docs/transformers/pr_17206/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(jW,"href","/docs/transformers/pr_17206/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(DW,"href","/docs/transformers/pr_17206/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(GW,"href","/docs/transformers/pr_17206/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(OW,"href","/docs/transformers/pr_17206/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(VW,"href","/docs/transformers/pr_17206/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(XW,"href","/docs/transformers/pr_17206/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_M,"id","transformers.TFAutoModelForMultipleChoice"),c(_M,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_M,"href","#transformers.TFAutoModelForMultipleChoice"),c(nc,"class","relative group"),c(zW,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(QW,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(WW,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HW,"href","/docs/transformers/pr_17206/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(UW,"href","/docs/transformers/pr_17206/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(JW,"href","/docs/transformers/pr_17206/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(YW,"href","/docs/transformers/pr_17206/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(KW,"href","/docs/transformers/pr_17206/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(ZW,"href","/docs/transformers/pr_17206/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(eH,"href","/docs/transformers/pr_17206/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(oH,"href","/docs/transformers/pr_17206/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(rH,"href","/docs/transformers/pr_17206/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(tH,"href","/docs/transformers/pr_17206/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(aH,"href","/docs/transformers/pr_17206/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(nH,"href","/docs/transformers/pr_17206/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(sH,"href","/docs/transformers/pr_17206/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(lH,"href","/docs/transformers/pr_17206/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(iH,"href","/docs/transformers/pr_17206/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(dH,"href","/docs/transformers/pr_17206/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(cH,"href","/docs/transformers/pr_17206/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qM,"id","transformers.TFAutoModelForNextSentencePrediction"),c(qM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(qM,"href","#transformers.TFAutoModelForNextSentencePrediction"),c(ic,"class","relative group"),c(fH,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mH,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(gH,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hH,"href","/docs/transformers/pr_17206/en/model_doc/bert#transformers.TFBertForNextSentencePrediction"),c(pH,"href","/docs/transformers/pr_17206/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction"),c(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OM,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(OM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(OM,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(fc,"class","relative group"),c(uH,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_H,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(bH,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vH,"href","/docs/transformers/pr_17206/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QM,"id","transformers.TFAutoModelForTokenClassification"),c(QM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(QM,"href","#transformers.TFAutoModelForTokenClassification"),c(hc,"class","relative group"),c(FH,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(TH,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(MH,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EH,"href","/docs/transformers/pr_17206/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(CH,"href","/docs/transformers/pr_17206/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(wH,"href","/docs/transformers/pr_17206/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(AH,"href","/docs/transformers/pr_17206/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(yH,"href","/docs/transformers/pr_17206/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(LH,"href","/docs/transformers/pr_17206/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(xH,"href","/docs/transformers/pr_17206/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c($H,"href","/docs/transformers/pr_17206/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(kH,"href","/docs/transformers/pr_17206/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(SH,"href","/docs/transformers/pr_17206/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(RH,"href","/docs/transformers/pr_17206/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(BH,"href","/docs/transformers/pr_17206/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(PH,"href","/docs/transformers/pr_17206/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(IH,"href","/docs/transformers/pr_17206/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(qH,"href","/docs/transformers/pr_17206/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(NH,"href","/docs/transformers/pr_17206/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(jH,"href","/docs/transformers/pr_17206/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(DH,"href","/docs/transformers/pr_17206/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(GH,"href","/docs/transformers/pr_17206/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(OH,"href","/docs/transformers/pr_17206/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(p4,"id","transformers.TFAutoModelForQuestionAnswering"),c(p4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(p4,"href","#transformers.TFAutoModelForQuestionAnswering"),c(_c,"class","relative group"),c(VH,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(XH,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(zH,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QH,"href","/docs/transformers/pr_17206/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(WH,"href","/docs/transformers/pr_17206/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(HH,"href","/docs/transformers/pr_17206/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(UH,"href","/docs/transformers/pr_17206/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(JH,"href","/docs/transformers/pr_17206/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(YH,"href","/docs/transformers/pr_17206/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(KH,"href","/docs/transformers/pr_17206/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(ZH,"href","/docs/transformers/pr_17206/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(eU,"href","/docs/transformers/pr_17206/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(oU,"href","/docs/transformers/pr_17206/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(rU,"href","/docs/transformers/pr_17206/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),c(tU,"href","/docs/transformers/pr_17206/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(aU,"href","/docs/transformers/pr_17206/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(nU,"href","/docs/transformers/pr_17206/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(sU,"href","/docs/transformers/pr_17206/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(lU,"href","/docs/transformers/pr_17206/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(iU,"href","/docs/transformers/pr_17206/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(dU,"href","/docs/transformers/pr_17206/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(cU,"href","/docs/transformers/pr_17206/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(fU,"href","/docs/transformers/pr_17206/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(N4,"id","transformers.TFAutoModelForVision2Seq"),c(N4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(N4,"href","#transformers.TFAutoModelForVision2Seq"),c(Fc,"class","relative group"),c(mU,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gU,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(hU,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pU,"href","/docs/transformers/pr_17206/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(O4,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(O4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(O4,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(Ec,"class","relative group"),c(uU,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_U,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(bU,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vU,"href","/docs/transformers/pr_17206/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Q4,"id","transformers.FlaxAutoModel"),c(Q4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Q4,"href","#transformers.FlaxAutoModel"),c(Ac,"class","relative group"),c(FU,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(TU,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(MU,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EU,"href","/docs/transformers/pr_17206/en/model_doc/albert#transformers.FlaxAlbertModel"),c(CU,"href","/docs/transformers/pr_17206/en/model_doc/bart#transformers.FlaxBartModel"),c(wU,"href","/docs/transformers/pr_17206/en/model_doc/beit#transformers.FlaxBeitModel"),c(AU,"href","/docs/transformers/pr_17206/en/model_doc/bert#transformers.FlaxBertModel"),c(yU,"href","/docs/transformers/pr_17206/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(LU,"href","/docs/transformers/pr_17206/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(xU,"href","/docs/transformers/pr_17206/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c($U,"href","/docs/transformers/pr_17206/en/model_doc/clip#transformers.FlaxCLIPModel"),c(kU,"href","/docs/transformers/pr_17206/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(SU,"href","/docs/transformers/pr_17206/en/model_doc/electra#transformers.FlaxElectraModel"),c(RU,"href","/docs/transformers/pr_17206/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(BU,"href","/docs/transformers/pr_17206/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(PU,"href","/docs/transformers/pr_17206/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(IU,"href","/docs/transformers/pr_17206/en/model_doc/marian#transformers.FlaxMarianModel"),c(qU,"href","/docs/transformers/pr_17206/en/model_doc/mbart#transformers.FlaxMBartModel"),c(NU,"href","/docs/transformers/pr_17206/en/model_doc/mt5#transformers.FlaxMT5Model"),c(jU,"href","/docs/transformers/pr_17206/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(DU,"href","/docs/transformers/pr_17206/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(GU,"href","/docs/transformers/pr_17206/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(OU,"href","/docs/transformers/pr_17206/en/model_doc/t5#transformers.FlaxT5Model"),c(VU,"href","/docs/transformers/pr_17206/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(XU,"href","/docs/transformers/pr_17206/en/model_doc/vit#transformers.FlaxViTModel"),c(zU,"href","/docs/transformers/pr_17206/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(QU,"href","/docs/transformers/pr_17206/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(WU,"href","/docs/transformers/pr_17206/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FE,"id","transformers.FlaxAutoModelForCausalLM"),c(FE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(FE,"href","#transformers.FlaxAutoModelForCausalLM"),c(xc,"class","relative group"),c(HU,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(UU,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(JU,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YU,"href","/docs/transformers/pr_17206/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c(KU,"href","/docs/transformers/pr_17206/en/model_doc/bert#transformers.FlaxBertForCausalLM"),c(ZU,"href","/docs/transformers/pr_17206/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM"),c(eJ,"href","/docs/transformers/pr_17206/en/model_doc/electra#transformers.FlaxElectraForCausalLM"),c(oJ,"href","/docs/transformers/pr_17206/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(rJ,"href","/docs/transformers/pr_17206/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(tJ,"href","/docs/transformers/pr_17206/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(aJ,"href","/docs/transformers/pr_17206/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM"),c(nJ,"href","/docs/transformers/pr_17206/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(SE,"id","transformers.FlaxAutoModelForPreTraining"),c(SE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(SE,"href","#transformers.FlaxAutoModelForPreTraining"),c(Sc,"class","relative group"),c(sJ,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lJ,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(iJ,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dJ,"href","/docs/transformers/pr_17206/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(cJ,"href","/docs/transformers/pr_17206/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(fJ,"href","/docs/transformers/pr_17206/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(mJ,"href","/docs/transformers/pr_17206/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(gJ,"href","/docs/transformers/pr_17206/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(hJ,"href","/docs/transformers/pr_17206/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(pJ,"href","/docs/transformers/pr_17206/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(uJ,"href","/docs/transformers/pr_17206/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(_J,"href","/docs/transformers/pr_17206/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(bJ,"href","/docs/transformers/pr_17206/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(vJ,"href","/docs/transformers/pr_17206/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(FJ,"href","/docs/transformers/pr_17206/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WE,"id","transformers.FlaxAutoModelForMaskedLM"),c(WE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(WE,"href","#transformers.FlaxAutoModelForMaskedLM"),c(Pc,"class","relative group"),c(TJ,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(MJ,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(EJ,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CJ,"href","/docs/transformers/pr_17206/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(wJ,"href","/docs/transformers/pr_17206/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(AJ,"href","/docs/transformers/pr_17206/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(yJ,"href","/docs/transformers/pr_17206/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(LJ,"href","/docs/transformers/pr_17206/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(xJ,"href","/docs/transformers/pr_17206/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c($J,"href","/docs/transformers/pr_17206/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(kJ,"href","/docs/transformers/pr_17206/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(SJ,"href","/docs/transformers/pr_17206/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(RJ,"href","/docs/transformers/pr_17206/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(s5,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(s5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(s5,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(Nc,"class","relative group"),c(BJ,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(PJ,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(IJ,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qJ,"href","/docs/transformers/pr_17206/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(NJ,"href","/docs/transformers/pr_17206/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(jJ,"href","/docs/transformers/pr_17206/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(DJ,"href","/docs/transformers/pr_17206/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(GJ,"href","/docs/transformers/pr_17206/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(OJ,"href","/docs/transformers/pr_17206/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(VJ,"href","/docs/transformers/pr_17206/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(XJ,"href","/docs/transformers/pr_17206/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(zJ,"href","/docs/transformers/pr_17206/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(b5,"id","transformers.FlaxAutoModelForSequenceClassification"),c(b5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(b5,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(Gc,"class","relative group"),c(QJ,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(WJ,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(HJ,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UJ,"href","/docs/transformers/pr_17206/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(JJ,"href","/docs/transformers/pr_17206/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(YJ,"href","/docs/transformers/pr_17206/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(KJ,"href","/docs/transformers/pr_17206/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(ZJ,"href","/docs/transformers/pr_17206/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(eY,"href","/docs/transformers/pr_17206/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(oY,"href","/docs/transformers/pr_17206/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(rY,"href","/docs/transformers/pr_17206/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(tY,"href","/docs/transformers/pr_17206/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(aY,"href","/docs/transformers/pr_17206/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(k5,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(k5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(k5,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(Xc,"class","relative group"),c(nY,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(sY,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(lY,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iY,"href","/docs/transformers/pr_17206/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(dY,"href","/docs/transformers/pr_17206/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(cY,"href","/docs/transformers/pr_17206/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(fY,"href","/docs/transformers/pr_17206/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(mY,"href","/docs/transformers/pr_17206/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(gY,"href","/docs/transformers/pr_17206/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(hY,"href","/docs/transformers/pr_17206/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(pY,"href","/docs/transformers/pr_17206/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(uY,"href","/docs/transformers/pr_17206/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(_Y,"href","/docs/transformers/pr_17206/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(X5,"id","transformers.FlaxAutoModelForTokenClassification"),c(X5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(X5,"href","#transformers.FlaxAutoModelForTokenClassification"),c(Wc,"class","relative group"),c(bY,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vY,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(FY,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TY,"href","/docs/transformers/pr_17206/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(MY,"href","/docs/transformers/pr_17206/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(EY,"href","/docs/transformers/pr_17206/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(CY,"href","/docs/transformers/pr_17206/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(wY,"href","/docs/transformers/pr_17206/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(AY,"href","/docs/transformers/pr_17206/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(yY,"href","/docs/transformers/pr_17206/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(LY,"href","/docs/transformers/pr_17206/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oC,"id","transformers.FlaxAutoModelForMultipleChoice"),c(oC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(oC,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(Jc,"class","relative group"),c(xY,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($Y,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(kY,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(SY,"href","/docs/transformers/pr_17206/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(RY,"href","/docs/transformers/pr_17206/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(BY,"href","/docs/transformers/pr_17206/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(PY,"href","/docs/transformers/pr_17206/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(IY,"href","/docs/transformers/pr_17206/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(qY,"href","/docs/transformers/pr_17206/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(NY,"href","/docs/transformers/pr_17206/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(jY,"href","/docs/transformers/pr_17206/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mC,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(mC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(mC,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(Zc,"class","relative group"),c(DY,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(GY,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(OY,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VY,"href","/docs/transformers/pr_17206/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uC,"id","transformers.FlaxAutoModelForImageClassification"),c(uC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(uC,"href","#transformers.FlaxAutoModelForImageClassification"),c(rf,"class","relative group"),c(XY,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zY,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(QY,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WY,"href","/docs/transformers/pr_17206/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(HY,"href","/docs/transformers/pr_17206/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TC,"id","transformers.FlaxAutoModelForVision2Seq"),c(TC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(TC,"href","#transformers.FlaxAutoModelForVision2Seq"),c(nf,"class","relative group"),c(UY,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(JY,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(YY,"href","/docs/transformers/pr_17206/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KY,"href","/docs/transformers/pr_17206/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(f,_){e(document.head,g),b(f,v,_),b(f,p,_),e(p,m),e(m,u),M(d,u,null),e(p,h),e(p,Mo),e(Mo,li),b(f,mf,_),b(f,et,_),e(et,ii),e(et,di),e(di,Vw),e(et,gf),b(f,qe,_),b(f,Xe,_),e(Xe,ci),e(Xe,An),e(An,Xw),e(Xe,yn),e(Xe,Ln),e(Ln,zw),e(Xe,fi),e(Xe,xn),e(xn,Qw),e(Xe,mi),b(f,hf,_),M(Ma,f,_),b(f,ze,_),b(f,Ae,_),e(Ae,c$),e(Ae,gi),e(gi,f$),e(Ae,m$),b(f,Eo,_),b(f,Ea,_),e(Ea,g$),e(Ea,pf),e(pf,h$),e(Ea,Nje),b(f,yPe,_),b(f,hi,_),e(hi,uf),e(uf,QZ),M(Ww,QZ,null),e(hi,jje),e(hi,WZ),e(WZ,Dje),b(f,LPe,_),b(f,$n,_),e($n,Gje),e($n,HZ),e(HZ,Oje),e($n,Vje),e($n,UZ),e(UZ,Xje),e($n,zje),b(f,xPe,_),M(Hw,f,_),b(f,$Pe,_),b(f,p$,_),e(p$,Qje),b(f,kPe,_),M(_f,f,_),b(f,SPe,_),b(f,pi,_),e(pi,bf),e(bf,JZ),M(Uw,JZ,null),e(pi,Wje),e(pi,YZ),e(YZ,Hje),b(f,RPe,_),b(f,Co,_),M(Jw,Co,null),e(Co,Uje),e(Co,Yw),e(Yw,Jje),e(Yw,u$),e(u$,Yje),e(Yw,Kje),e(Co,Zje),e(Co,Kw),e(Kw,eDe),e(Kw,KZ),e(KZ,oDe),e(Kw,rDe),e(Co,tDe),e(Co,Er),M(Zw,Er,null),e(Er,aDe),e(Er,ZZ),e(ZZ,nDe),e(Er,sDe),e(Er,ui),e(ui,lDe),e(ui,eee),e(eee,iDe),e(ui,dDe),e(ui,oee),e(oee,cDe),e(ui,fDe),e(Er,mDe),e(Er,y),e(y,vf),e(vf,ree),e(ree,gDe),e(vf,hDe),e(vf,_$),e(_$,pDe),e(vf,uDe),e(y,_De),e(y,Ff),e(Ff,tee),e(tee,bDe),e(Ff,vDe),e(Ff,b$),e(b$,FDe),e(Ff,TDe),e(y,MDe),e(y,Tf),e(Tf,aee),e(aee,EDe),e(Tf,CDe),e(Tf,v$),e(v$,wDe),e(Tf,ADe),e(y,yDe),e(y,Mf),e(Mf,nee),e(nee,LDe),e(Mf,xDe),e(Mf,F$),e(F$,$De),e(Mf,kDe),e(y,SDe),e(y,Ef),e(Ef,see),e(see,RDe),e(Ef,BDe),e(Ef,T$),e(T$,PDe),e(Ef,IDe),e(y,qDe),e(y,Cf),e(Cf,lee),e(lee,NDe),e(Cf,jDe),e(Cf,M$),e(M$,DDe),e(Cf,GDe),e(y,ODe),e(y,wf),e(wf,iee),e(iee,VDe),e(wf,XDe),e(wf,E$),e(E$,zDe),e(wf,QDe),e(y,WDe),e(y,Af),e(Af,dee),e(dee,HDe),e(Af,UDe),e(Af,C$),e(C$,JDe),e(Af,YDe),e(y,KDe),e(y,yf),e(yf,cee),e(cee,ZDe),e(yf,eGe),e(yf,w$),e(w$,oGe),e(yf,rGe),e(y,tGe),e(y,Lf),e(Lf,fee),e(fee,aGe),e(Lf,nGe),e(Lf,A$),e(A$,sGe),e(Lf,lGe),e(y,iGe),e(y,xf),e(xf,mee),e(mee,dGe),e(xf,cGe),e(xf,y$),e(y$,fGe),e(xf,mGe),e(y,gGe),e(y,$f),e($f,gee),e(gee,hGe),e($f,pGe),e($f,L$),e(L$,uGe),e($f,_Ge),e(y,bGe),e(y,kf),e(kf,hee),e(hee,vGe),e(kf,FGe),e(kf,x$),e(x$,TGe),e(kf,MGe),e(y,EGe),e(y,Sf),e(Sf,pee),e(pee,CGe),e(Sf,wGe),e(Sf,$$),e($$,AGe),e(Sf,yGe),e(y,LGe),e(y,Rf),e(Rf,uee),e(uee,xGe),e(Rf,$Ge),e(Rf,k$),e(k$,kGe),e(Rf,SGe),e(y,RGe),e(y,Bf),e(Bf,_ee),e(_ee,BGe),e(Bf,PGe),e(Bf,S$),e(S$,IGe),e(Bf,qGe),e(y,NGe),e(y,Pf),e(Pf,bee),e(bee,jGe),e(Pf,DGe),e(Pf,R$),e(R$,GGe),e(Pf,OGe),e(y,VGe),e(y,If),e(If,vee),e(vee,XGe),e(If,zGe),e(If,B$),e(B$,QGe),e(If,WGe),e(y,HGe),e(y,qf),e(qf,Fee),e(Fee,UGe),e(qf,JGe),e(qf,P$),e(P$,YGe),e(qf,KGe),e(y,ZGe),e(y,Nf),e(Nf,Tee),e(Tee,eOe),e(Nf,oOe),e(Nf,I$),e(I$,rOe),e(Nf,tOe),e(y,aOe),e(y,jf),e(jf,Mee),e(Mee,nOe),e(jf,sOe),e(jf,q$),e(q$,lOe),e(jf,iOe),e(y,dOe),e(y,Df),e(Df,Eee),e(Eee,cOe),e(Df,fOe),e(Df,N$),e(N$,mOe),e(Df,gOe),e(y,hOe),e(y,Gf),e(Gf,Cee),e(Cee,pOe),e(Gf,uOe),e(Gf,j$),e(j$,_Oe),e(Gf,bOe),e(y,vOe),e(y,Of),e(Of,wee),e(wee,FOe),e(Of,TOe),e(Of,D$),e(D$,MOe),e(Of,EOe),e(y,COe),e(y,Vf),e(Vf,Aee),e(Aee,wOe),e(Vf,AOe),e(Vf,G$),e(G$,yOe),e(Vf,LOe),e(y,xOe),e(y,Xf),e(Xf,yee),e(yee,$Oe),e(Xf,kOe),e(Xf,O$),e(O$,SOe),e(Xf,ROe),e(y,BOe),e(y,zf),e(zf,Lee),e(Lee,POe),e(zf,IOe),e(zf,V$),e(V$,qOe),e(zf,NOe),e(y,jOe),e(y,Qf),e(Qf,xee),e(xee,DOe),e(Qf,GOe),e(Qf,X$),e(X$,OOe),e(Qf,VOe),e(y,XOe),e(y,Wf),e(Wf,$ee),e($ee,zOe),e(Wf,QOe),e(Wf,z$),e(z$,WOe),e(Wf,HOe),e(y,UOe),e(y,Hf),e(Hf,kee),e(kee,JOe),e(Hf,YOe),e(Hf,Q$),e(Q$,KOe),e(Hf,ZOe),e(y,eVe),e(y,Uf),e(Uf,See),e(See,oVe),e(Uf,rVe),e(Uf,W$),e(W$,tVe),e(Uf,aVe),e(y,nVe),e(y,Jf),e(Jf,Ree),e(Ree,sVe),e(Jf,lVe),e(Jf,H$),e(H$,iVe),e(Jf,dVe),e(y,cVe),e(y,Yf),e(Yf,Bee),e(Bee,fVe),e(Yf,mVe),e(Yf,U$),e(U$,gVe),e(Yf,hVe),e(y,pVe),e(y,Kf),e(Kf,Pee),e(Pee,uVe),e(Kf,_Ve),e(Kf,J$),e(J$,bVe),e(Kf,vVe),e(y,FVe),e(y,Zf),e(Zf,Iee),e(Iee,TVe),e(Zf,MVe),e(Zf,Y$),e(Y$,EVe),e(Zf,CVe),e(y,wVe),e(y,em),e(em,qee),e(qee,AVe),e(em,yVe),e(em,K$),e(K$,LVe),e(em,xVe),e(y,$Ve),e(y,om),e(om,Nee),e(Nee,kVe),e(om,SVe),e(om,Z$),e(Z$,RVe),e(om,BVe),e(y,PVe),e(y,rm),e(rm,jee),e(jee,IVe),e(rm,qVe),e(rm,ek),e(ek,NVe),e(rm,jVe),e(y,DVe),e(y,tm),e(tm,Dee),e(Dee,GVe),e(tm,OVe),e(tm,ok),e(ok,VVe),e(tm,XVe),e(y,zVe),e(y,am),e(am,Gee),e(Gee,QVe),e(am,WVe),e(am,rk),e(rk,HVe),e(am,UVe),e(y,JVe),e(y,nm),e(nm,Oee),e(Oee,YVe),e(nm,KVe),e(nm,tk),e(tk,ZVe),e(nm,eXe),e(y,oXe),e(y,sm),e(sm,Vee),e(Vee,rXe),e(sm,tXe),e(sm,ak),e(ak,aXe),e(sm,nXe),e(y,sXe),e(y,lm),e(lm,Xee),e(Xee,lXe),e(lm,iXe),e(lm,nk),e(nk,dXe),e(lm,cXe),e(y,fXe),e(y,im),e(im,zee),e(zee,mXe),e(im,gXe),e(im,sk),e(sk,hXe),e(im,pXe),e(y,uXe),e(y,dm),e(dm,Qee),e(Qee,_Xe),e(dm,bXe),e(dm,lk),e(lk,vXe),e(dm,FXe),e(y,TXe),e(y,cm),e(cm,Wee),e(Wee,MXe),e(cm,EXe),e(cm,ik),e(ik,CXe),e(cm,wXe),e(y,AXe),e(y,fm),e(fm,Hee),e(Hee,yXe),e(fm,LXe),e(fm,dk),e(dk,xXe),e(fm,$Xe),e(y,kXe),e(y,mm),e(mm,Uee),e(Uee,SXe),e(mm,RXe),e(mm,ck),e(ck,BXe),e(mm,PXe),e(y,IXe),e(y,gm),e(gm,Jee),e(Jee,qXe),e(gm,NXe),e(gm,fk),e(fk,jXe),e(gm,DXe),e(y,GXe),e(y,hm),e(hm,Yee),e(Yee,OXe),e(hm,VXe),e(hm,mk),e(mk,XXe),e(hm,zXe),e(y,QXe),e(y,pm),e(pm,Kee),e(Kee,WXe),e(pm,HXe),e(pm,gk),e(gk,UXe),e(pm,JXe),e(y,YXe),e(y,um),e(um,Zee),e(Zee,KXe),e(um,ZXe),e(um,hk),e(hk,eze),e(um,oze),e(y,rze),e(y,_m),e(_m,eoe),e(eoe,tze),e(_m,aze),e(_m,pk),e(pk,nze),e(_m,sze),e(y,lze),e(y,bm),e(bm,ooe),e(ooe,ize),e(bm,dze),e(bm,uk),e(uk,cze),e(bm,fze),e(y,mze),e(y,vm),e(vm,roe),e(roe,gze),e(vm,hze),e(vm,_k),e(_k,pze),e(vm,uze),e(y,_ze),e(y,Fm),e(Fm,toe),e(toe,bze),e(Fm,vze),e(Fm,bk),e(bk,Fze),e(Fm,Tze),e(y,Mze),e(y,Tm),e(Tm,aoe),e(aoe,Eze),e(Tm,Cze),e(Tm,vk),e(vk,wze),e(Tm,Aze),e(y,yze),e(y,Mm),e(Mm,noe),e(noe,Lze),e(Mm,xze),e(Mm,Fk),e(Fk,$ze),e(Mm,kze),e(y,Sze),e(y,Em),e(Em,soe),e(soe,Rze),e(Em,Bze),e(Em,Tk),e(Tk,Pze),e(Em,Ize),e(y,qze),e(y,Cm),e(Cm,loe),e(loe,Nze),e(Cm,jze),e(Cm,Mk),e(Mk,Dze),e(Cm,Gze),e(y,Oze),e(y,wm),e(wm,ioe),e(ioe,Vze),e(wm,Xze),e(wm,Ek),e(Ek,zze),e(wm,Qze),e(y,Wze),e(y,Am),e(Am,doe),e(doe,Hze),e(Am,Uze),e(Am,Ck),e(Ck,Jze),e(Am,Yze),e(y,Kze),e(y,ym),e(ym,coe),e(coe,Zze),e(ym,eQe),e(ym,wk),e(wk,oQe),e(ym,rQe),e(y,tQe),e(y,Lm),e(Lm,foe),e(foe,aQe),e(Lm,nQe),e(Lm,Ak),e(Ak,sQe),e(Lm,lQe),e(y,iQe),e(y,xm),e(xm,moe),e(moe,dQe),e(xm,cQe),e(xm,yk),e(yk,fQe),e(xm,mQe),e(y,gQe),e(y,$m),e($m,goe),e(goe,hQe),e($m,pQe),e($m,Lk),e(Lk,uQe),e($m,_Qe),e(y,bQe),e(y,km),e(km,hoe),e(hoe,vQe),e(km,FQe),e(km,xk),e(xk,TQe),e(km,MQe),e(y,EQe),e(y,Sm),e(Sm,poe),e(poe,CQe),e(Sm,wQe),e(Sm,$k),e($k,AQe),e(Sm,yQe),e(y,LQe),e(y,Rm),e(Rm,uoe),e(uoe,xQe),e(Rm,$Qe),e(Rm,kk),e(kk,kQe),e(Rm,SQe),e(y,RQe),e(y,Bm),e(Bm,_oe),e(_oe,BQe),e(Bm,PQe),e(Bm,Sk),e(Sk,IQe),e(Bm,qQe),e(y,NQe),e(y,Pm),e(Pm,boe),e(boe,jQe),e(Pm,DQe),e(Pm,Rk),e(Rk,GQe),e(Pm,OQe),e(y,VQe),e(y,Im),e(Im,voe),e(voe,XQe),e(Im,zQe),e(Im,Bk),e(Bk,QQe),e(Im,WQe),e(y,HQe),e(y,qm),e(qm,Foe),e(Foe,UQe),e(qm,JQe),e(qm,Pk),e(Pk,YQe),e(qm,KQe),e(y,ZQe),e(y,Nm),e(Nm,Toe),e(Toe,eWe),e(Nm,oWe),e(Nm,Ik),e(Ik,rWe),e(Nm,tWe),e(y,aWe),e(y,jm),e(jm,Moe),e(Moe,nWe),e(jm,sWe),e(jm,qk),e(qk,lWe),e(jm,iWe),e(y,dWe),e(y,Dm),e(Dm,Eoe),e(Eoe,cWe),e(Dm,fWe),e(Dm,Nk),e(Nk,mWe),e(Dm,gWe),e(y,hWe),e(y,Gm),e(Gm,Coe),e(Coe,pWe),e(Gm,uWe),e(Gm,jk),e(jk,_We),e(Gm,bWe),e(y,vWe),e(y,Om),e(Om,woe),e(woe,FWe),e(Om,TWe),e(Om,Dk),e(Dk,MWe),e(Om,EWe),e(y,CWe),e(y,Vm),e(Vm,Aoe),e(Aoe,wWe),e(Vm,AWe),e(Vm,Gk),e(Gk,yWe),e(Vm,LWe),e(y,xWe),e(y,Xm),e(Xm,yoe),e(yoe,$We),e(Xm,kWe),e(Xm,Ok),e(Ok,SWe),e(Xm,RWe),e(y,BWe),e(y,zm),e(zm,Loe),e(Loe,PWe),e(zm,IWe),e(zm,Vk),e(Vk,qWe),e(zm,NWe),e(y,jWe),e(y,Qm),e(Qm,xoe),e(xoe,DWe),e(Qm,GWe),e(Qm,Xk),e(Xk,OWe),e(Qm,VWe),e(y,XWe),e(y,Wm),e(Wm,$oe),e($oe,zWe),e(Wm,QWe),e(Wm,zk),e(zk,WWe),e(Wm,HWe),e(y,UWe),e(y,Hm),e(Hm,koe),e(koe,JWe),e(Hm,YWe),e(Hm,Qk),e(Qk,KWe),e(Hm,ZWe),e(y,eHe),e(y,Um),e(Um,Soe),e(Soe,oHe),e(Um,rHe),e(Um,Wk),e(Wk,tHe),e(Um,aHe),e(y,nHe),e(y,Jm),e(Jm,Roe),e(Roe,sHe),e(Jm,lHe),e(Jm,Hk),e(Hk,iHe),e(Jm,dHe),e(y,cHe),e(y,Ym),e(Ym,Boe),e(Boe,fHe),e(Ym,mHe),e(Ym,Uk),e(Uk,gHe),e(Ym,hHe),e(y,pHe),e(y,Km),e(Km,Poe),e(Poe,uHe),e(Km,_He),e(Km,Jk),e(Jk,bHe),e(Km,vHe),e(y,FHe),e(y,Zm),e(Zm,Ioe),e(Ioe,THe),e(Zm,MHe),e(Zm,Yk),e(Yk,EHe),e(Zm,CHe),e(y,wHe),e(y,eg),e(eg,qoe),e(qoe,AHe),e(eg,yHe),e(eg,Kk),e(Kk,LHe),e(eg,xHe),e(y,$He),e(y,og),e(og,Noe),e(Noe,kHe),e(og,SHe),e(og,Zk),e(Zk,RHe),e(og,BHe),e(y,PHe),e(y,rg),e(rg,joe),e(joe,IHe),e(rg,qHe),e(rg,eS),e(eS,NHe),e(rg,jHe),e(y,DHe),e(y,tg),e(tg,Doe),e(Doe,GHe),e(tg,OHe),e(tg,oS),e(oS,VHe),e(tg,XHe),e(y,zHe),e(y,ag),e(ag,Goe),e(Goe,QHe),e(ag,WHe),e(ag,rS),e(rS,HHe),e(ag,UHe),e(y,JHe),e(y,ng),e(ng,Ooe),e(Ooe,YHe),e(ng,KHe),e(ng,tS),e(tS,ZHe),e(ng,eUe),e(y,oUe),e(y,sg),e(sg,Voe),e(Voe,rUe),e(sg,tUe),e(sg,aS),e(aS,aUe),e(sg,nUe),e(y,sUe),e(y,lg),e(lg,Xoe),e(Xoe,lUe),e(lg,iUe),e(lg,nS),e(nS,dUe),e(lg,cUe),e(y,fUe),e(y,ig),e(ig,zoe),e(zoe,mUe),e(ig,gUe),e(ig,sS),e(sS,hUe),e(ig,pUe),e(y,uUe),e(y,dg),e(dg,Qoe),e(Qoe,_Ue),e(dg,bUe),e(dg,lS),e(lS,vUe),e(dg,FUe),e(y,TUe),e(y,cg),e(cg,Woe),e(Woe,MUe),e(cg,EUe),e(cg,iS),e(iS,CUe),e(cg,wUe),e(y,AUe),e(y,fg),e(fg,Hoe),e(Hoe,yUe),e(fg,LUe),e(fg,dS),e(dS,xUe),e(fg,$Ue),e(y,kUe),e(y,mg),e(mg,Uoe),e(Uoe,SUe),e(mg,RUe),e(mg,cS),e(cS,BUe),e(mg,PUe),e(y,IUe),e(y,gg),e(gg,Joe),e(Joe,qUe),e(gg,NUe),e(gg,fS),e(fS,jUe),e(gg,DUe),e(y,GUe),e(y,hg),e(hg,Yoe),e(Yoe,OUe),e(hg,VUe),e(hg,mS),e(mS,XUe),e(hg,zUe),e(Er,QUe),M(pg,Er,null),e(Co,WUe),e(Co,ug),M(eA,ug,null),e(ug,HUe),e(ug,Koe),e(Koe,UUe),b(f,BPe,_),b(f,_i,_),e(_i,_g),e(_g,Zoe),M(oA,Zoe,null),e(_i,JUe),e(_i,ere),e(ere,YUe),b(f,PPe,_),b(f,wo,_),M(rA,wo,null),e(wo,KUe),e(wo,tA),e(tA,ZUe),e(tA,gS),e(gS,eJe),e(tA,oJe),e(wo,rJe),e(wo,aA),e(aA,tJe),e(aA,ore),e(ore,aJe),e(aA,nJe),e(wo,sJe),e(wo,Cr),M(nA,Cr,null),e(Cr,lJe),e(Cr,rre),e(rre,iJe),e(Cr,dJe),e(Cr,Ca),e(Ca,cJe),e(Ca,tre),e(tre,fJe),e(Ca,mJe),e(Ca,are),e(are,gJe),e(Ca,hJe),e(Ca,nre),e(nre,pJe),e(Ca,uJe),e(Cr,_Je),e(Cr,k),e(k,kn),e(kn,sre),e(sre,bJe),e(kn,vJe),e(kn,hS),e(hS,FJe),e(kn,TJe),e(kn,pS),e(pS,MJe),e(kn,EJe),e(k,CJe),e(k,Sn),e(Sn,lre),e(lre,wJe),e(Sn,AJe),e(Sn,uS),e(uS,yJe),e(Sn,LJe),e(Sn,_S),e(_S,xJe),e(Sn,$Je),e(k,kJe),e(k,Rn),e(Rn,ire),e(ire,SJe),e(Rn,RJe),e(Rn,bS),e(bS,BJe),e(Rn,PJe),e(Rn,vS),e(vS,IJe),e(Rn,qJe),e(k,NJe),e(k,bg),e(bg,dre),e(dre,jJe),e(bg,DJe),e(bg,FS),e(FS,GJe),e(bg,OJe),e(k,VJe),e(k,Bn),e(Bn,cre),e(cre,XJe),e(Bn,zJe),e(Bn,TS),e(TS,QJe),e(Bn,WJe),e(Bn,MS),e(MS,HJe),e(Bn,UJe),e(k,JJe),e(k,vg),e(vg,fre),e(fre,YJe),e(vg,KJe),e(vg,ES),e(ES,ZJe),e(vg,eYe),e(k,oYe),e(k,Fg),e(Fg,mre),e(mre,rYe),e(Fg,tYe),e(Fg,CS),e(CS,aYe),e(Fg,nYe),e(k,sYe),e(k,Tg),e(Tg,gre),e(gre,lYe),e(Tg,iYe),e(Tg,wS),e(wS,dYe),e(Tg,cYe),e(k,fYe),e(k,Pn),e(Pn,hre),e(hre,mYe),e(Pn,gYe),e(Pn,AS),e(AS,hYe),e(Pn,pYe),e(Pn,yS),e(yS,uYe),e(Pn,_Ye),e(k,bYe),e(k,In),e(In,pre),e(pre,vYe),e(In,FYe),e(In,LS),e(LS,TYe),e(In,MYe),e(In,xS),e(xS,EYe),e(In,CYe),e(k,wYe),e(k,qn),e(qn,ure),e(ure,AYe),e(qn,yYe),e(qn,$S),e($S,LYe),e(qn,xYe),e(qn,kS),e(kS,$Ye),e(qn,kYe),e(k,SYe),e(k,Mg),e(Mg,_re),e(_re,RYe),e(Mg,BYe),e(Mg,SS),e(SS,PYe),e(Mg,IYe),e(k,qYe),e(k,Eg),e(Eg,bre),e(bre,NYe),e(Eg,jYe),e(Eg,RS),e(RS,DYe),e(Eg,GYe),e(k,OYe),e(k,Nn),e(Nn,vre),e(vre,VYe),e(Nn,XYe),e(Nn,BS),e(BS,zYe),e(Nn,QYe),e(Nn,PS),e(PS,WYe),e(Nn,HYe),e(k,UYe),e(k,Cg),e(Cg,Fre),e(Fre,JYe),e(Cg,YYe),e(Cg,IS),e(IS,KYe),e(Cg,ZYe),e(k,eKe),e(k,jn),e(jn,Tre),e(Tre,oKe),e(jn,rKe),e(jn,qS),e(qS,tKe),e(jn,aKe),e(jn,NS),e(NS,nKe),e(jn,sKe),e(k,lKe),e(k,Dn),e(Dn,Mre),e(Mre,iKe),e(Dn,dKe),e(Dn,jS),e(jS,cKe),e(Dn,fKe),e(Dn,DS),e(DS,mKe),e(Dn,gKe),e(k,hKe),e(k,Gn),e(Gn,Ere),e(Ere,pKe),e(Gn,uKe),e(Gn,GS),e(GS,_Ke),e(Gn,bKe),e(Gn,OS),e(OS,vKe),e(Gn,FKe),e(k,TKe),e(k,wg),e(wg,Cre),e(Cre,MKe),e(wg,EKe),e(wg,VS),e(VS,CKe),e(wg,wKe),e(k,AKe),e(k,On),e(On,wre),e(wre,yKe),e(On,LKe),e(On,XS),e(XS,xKe),e(On,$Ke),e(On,zS),e(zS,kKe),e(On,SKe),e(k,RKe),e(k,Vn),e(Vn,Are),e(Are,BKe),e(Vn,PKe),e(Vn,QS),e(QS,IKe),e(Vn,qKe),e(Vn,WS),e(WS,NKe),e(Vn,jKe),e(k,DKe),e(k,Xn),e(Xn,yre),e(yre,GKe),e(Xn,OKe),e(Xn,HS),e(HS,VKe),e(Xn,XKe),e(Xn,US),e(US,zKe),e(Xn,QKe),e(k,WKe),e(k,zn),e(zn,Lre),e(Lre,HKe),e(zn,UKe),e(zn,JS),e(JS,JKe),e(zn,YKe),e(zn,YS),e(YS,KKe),e(zn,ZKe),e(k,eZe),e(k,Qn),e(Qn,xre),e(xre,oZe),e(Qn,rZe),e(Qn,KS),e(KS,tZe),e(Qn,aZe),e(Qn,ZS),e(ZS,nZe),e(Qn,sZe),e(k,lZe),e(k,Wn),e(Wn,$re),e($re,iZe),e(Wn,dZe),e(Wn,eR),e(eR,cZe),e(Wn,fZe),e(Wn,oR),e(oR,mZe),e(Wn,gZe),e(k,hZe),e(k,Ag),e(Ag,kre),e(kre,pZe),e(Ag,uZe),e(Ag,rR),e(rR,_Ze),e(Ag,bZe),e(k,vZe),e(k,Hn),e(Hn,Sre),e(Sre,FZe),e(Hn,TZe),e(Hn,tR),e(tR,MZe),e(Hn,EZe),e(Hn,aR),e(aR,CZe),e(Hn,wZe),e(k,AZe),e(k,yg),e(yg,Rre),e(Rre,yZe),e(yg,LZe),e(yg,nR),e(nR,xZe),e(yg,$Ze),e(k,kZe),e(k,Un),e(Un,Bre),e(Bre,SZe),e(Un,RZe),e(Un,sR),e(sR,BZe),e(Un,PZe),e(Un,lR),e(lR,IZe),e(Un,qZe),e(k,NZe),e(k,Jn),e(Jn,Pre),e(Pre,jZe),e(Jn,DZe),e(Jn,iR),e(iR,GZe),e(Jn,OZe),e(Jn,dR),e(dR,VZe),e(Jn,XZe),e(k,zZe),e(k,Yn),e(Yn,Ire),e(Ire,QZe),e(Yn,WZe),e(Yn,cR),e(cR,HZe),e(Yn,UZe),e(Yn,fR),e(fR,JZe),e(Yn,YZe),e(k,KZe),e(k,Kn),e(Kn,qre),e(qre,ZZe),e(Kn,eeo),e(Kn,mR),e(mR,oeo),e(Kn,reo),e(Kn,gR),e(gR,teo),e(Kn,aeo),e(k,neo),e(k,Zn),e(Zn,Nre),e(Nre,seo),e(Zn,leo),e(Zn,hR),e(hR,ieo),e(Zn,deo),e(Zn,pR),e(pR,ceo),e(Zn,feo),e(k,meo),e(k,Lg),e(Lg,jre),e(jre,geo),e(Lg,heo),e(Lg,uR),e(uR,peo),e(Lg,ueo),e(k,_eo),e(k,es),e(es,Dre),e(Dre,beo),e(es,veo),e(es,_R),e(_R,Feo),e(es,Teo),e(es,bR),e(bR,Meo),e(es,Eeo),e(k,Ceo),e(k,os),e(os,Gre),e(Gre,weo),e(os,Aeo),e(os,vR),e(vR,yeo),e(os,Leo),e(os,FR),e(FR,xeo),e(os,$eo),e(k,keo),e(k,rs),e(rs,Ore),e(Ore,Seo),e(rs,Reo),e(rs,TR),e(TR,Beo),e(rs,Peo),e(rs,MR),e(MR,Ieo),e(rs,qeo),e(k,Neo),e(k,ts),e(ts,Vre),e(Vre,jeo),e(ts,Deo),e(ts,ER),e(ER,Geo),e(ts,Oeo),e(ts,CR),e(CR,Veo),e(ts,Xeo),e(k,zeo),e(k,as),e(as,Xre),e(Xre,Qeo),e(as,Weo),e(as,wR),e(wR,Heo),e(as,Ueo),e(as,AR),e(AR,Jeo),e(as,Yeo),e(k,Keo),e(k,ns),e(ns,zre),e(zre,Zeo),e(ns,eoo),e(ns,yR),e(yR,ooo),e(ns,roo),e(ns,LR),e(LR,too),e(ns,aoo),e(k,noo),e(k,xg),e(xg,Qre),e(Qre,soo),e(xg,loo),e(xg,xR),e(xR,ioo),e(xg,doo),e(k,coo),e(k,ss),e(ss,Wre),e(Wre,foo),e(ss,moo),e(ss,$R),e($R,goo),e(ss,hoo),e(ss,kR),e(kR,poo),e(ss,uoo),e(k,_oo),e(k,$g),e($g,Hre),e(Hre,boo),e($g,voo),e($g,SR),e(SR,Foo),e($g,Too),e(k,Moo),e(k,kg),e(kg,Ure),e(Ure,Eoo),e(kg,Coo),e(kg,RR),e(RR,woo),e(kg,Aoo),e(k,yoo),e(k,ls),e(ls,Jre),e(Jre,Loo),e(ls,xoo),e(ls,BR),e(BR,$oo),e(ls,koo),e(ls,PR),e(PR,Soo),e(ls,Roo),e(k,Boo),e(k,is),e(is,Yre),e(Yre,Poo),e(is,Ioo),e(is,IR),e(IR,qoo),e(is,Noo),e(is,qR),e(qR,joo),e(is,Doo),e(k,Goo),e(k,ds),e(ds,Kre),e(Kre,Ooo),e(ds,Voo),e(ds,NR),e(NR,Xoo),e(ds,zoo),e(ds,jR),e(jR,Qoo),e(ds,Woo),e(k,Hoo),e(k,Sg),e(Sg,Zre),e(Zre,Uoo),e(Sg,Joo),e(Sg,DR),e(DR,Yoo),e(Sg,Koo),e(k,Zoo),e(k,cs),e(cs,ete),e(ete,ero),e(cs,oro),e(cs,GR),e(GR,rro),e(cs,tro),e(cs,OR),e(OR,aro),e(cs,nro),e(k,sro),e(k,fs),e(fs,ote),e(ote,lro),e(fs,iro),e(fs,VR),e(VR,dro),e(fs,cro),e(fs,XR),e(XR,fro),e(fs,mro),e(k,gro),e(k,ms),e(ms,rte),e(rte,hro),e(ms,pro),e(ms,zR),e(zR,uro),e(ms,_ro),e(ms,QR),e(QR,bro),e(ms,vro),e(k,Fro),e(k,gs),e(gs,tte),e(tte,Tro),e(gs,Mro),e(gs,WR),e(WR,Ero),e(gs,Cro),e(gs,HR),e(HR,wro),e(gs,Aro),e(k,yro),e(k,hs),e(hs,ate),e(ate,Lro),e(hs,xro),e(hs,UR),e(UR,$ro),e(hs,kro),e(hs,JR),e(JR,Sro),e(hs,Rro),e(k,Bro),e(k,ps),e(ps,nte),e(nte,Pro),e(ps,Iro),e(ps,YR),e(YR,qro),e(ps,Nro),e(ps,KR),e(KR,jro),e(ps,Dro),e(k,Gro),e(k,Rg),e(Rg,ste),e(ste,Oro),e(Rg,Vro),e(Rg,ZR),e(ZR,Xro),e(Rg,zro),e(k,Qro),e(k,Bg),e(Bg,lte),e(lte,Wro),e(Bg,Hro),e(Bg,eB),e(eB,Uro),e(Bg,Jro),e(k,Yro),e(k,Pg),e(Pg,ite),e(ite,Kro),e(Pg,Zro),e(Pg,oB),e(oB,eto),e(Pg,oto),e(k,rto),e(k,Ig),e(Ig,dte),e(dte,tto),e(Ig,ato),e(Ig,rB),e(rB,nto),e(Ig,sto),e(k,lto),e(k,us),e(us,cte),e(cte,ito),e(us,dto),e(us,tB),e(tB,cto),e(us,fto),e(us,aB),e(aB,mto),e(us,gto),e(k,hto),e(k,qg),e(qg,fte),e(fte,pto),e(qg,uto),e(qg,nB),e(nB,_to),e(qg,bto),e(k,vto),e(k,_s),e(_s,mte),e(mte,Fto),e(_s,Tto),e(_s,sB),e(sB,Mto),e(_s,Eto),e(_s,lB),e(lB,Cto),e(_s,wto),e(k,Ato),e(k,bs),e(bs,gte),e(gte,yto),e(bs,Lto),e(bs,iB),e(iB,xto),e(bs,$to),e(bs,dB),e(dB,kto),e(bs,Sto),e(k,Rto),e(k,vs),e(vs,hte),e(hte,Bto),e(vs,Pto),e(vs,cB),e(cB,Ito),e(vs,qto),e(vs,fB),e(fB,Nto),e(vs,jto),e(k,Dto),e(k,Fs),e(Fs,pte),e(pte,Gto),e(Fs,Oto),e(Fs,mB),e(mB,Vto),e(Fs,Xto),e(Fs,gB),e(gB,zto),e(Fs,Qto),e(k,Wto),e(k,Ts),e(Ts,ute),e(ute,Hto),e(Ts,Uto),e(Ts,hB),e(hB,Jto),e(Ts,Yto),e(Ts,pB),e(pB,Kto),e(Ts,Zto),e(k,eao),e(k,Ms),e(Ms,_te),e(_te,oao),e(Ms,rao),e(Ms,uB),e(uB,tao),e(Ms,aao),e(Ms,_B),e(_B,nao),e(Ms,sao),e(k,lao),e(k,Ng),e(Ng,bte),e(bte,iao),e(Ng,dao),e(Ng,bB),e(bB,cao),e(Ng,fao),e(k,mao),e(k,jg),e(jg,vte),e(vte,gao),e(jg,hao),e(jg,vB),e(vB,pao),e(jg,uao),e(k,_ao),e(k,Es),e(Es,Fte),e(Fte,bao),e(Es,vao),e(Es,FB),e(FB,Fao),e(Es,Tao),e(Es,TB),e(TB,Mao),e(Es,Eao),e(k,Cao),e(k,Cs),e(Cs,Tte),e(Tte,wao),e(Cs,Aao),e(Cs,MB),e(MB,yao),e(Cs,Lao),e(Cs,EB),e(EB,xao),e(Cs,$ao),e(k,kao),e(k,ws),e(ws,Mte),e(Mte,Sao),e(ws,Rao),e(ws,CB),e(CB,Bao),e(ws,Pao),e(ws,wB),e(wB,Iao),e(ws,qao),e(k,Nao),e(k,Dg),e(Dg,Ete),e(Ete,jao),e(Dg,Dao),e(Dg,AB),e(AB,Gao),e(Dg,Oao),e(k,Vao),e(k,Gg),e(Gg,Cte),e(Cte,Xao),e(Gg,zao),e(Gg,yB),e(yB,Qao),e(Gg,Wao),e(k,Hao),e(k,Og),e(Og,wte),e(wte,Uao),e(Og,Jao),e(Og,LB),e(LB,Yao),e(Og,Kao),e(k,Zao),e(k,As),e(As,Ate),e(Ate,eno),e(As,ono),e(As,xB),e(xB,rno),e(As,tno),e(As,$B),e($B,ano),e(As,nno),e(k,sno),e(k,Vg),e(Vg,yte),e(yte,lno),e(Vg,ino),e(Vg,kB),e(kB,dno),e(Vg,cno),e(k,fno),e(k,Xg),e(Xg,Lte),e(Lte,mno),e(Xg,gno),e(Xg,SB),e(SB,hno),e(Xg,pno),e(k,uno),e(k,ys),e(ys,xte),e(xte,_no),e(ys,bno),e(ys,RB),e(RB,vno),e(ys,Fno),e(ys,BB),e(BB,Tno),e(ys,Mno),e(k,Eno),e(k,zg),e(zg,$te),e($te,Cno),e(zg,wno),e(zg,PB),e(PB,Ano),e(zg,yno),e(k,Lno),e(k,Qg),e(Qg,kte),e(kte,xno),e(Qg,$no),e(Qg,IB),e(IB,kno),e(Qg,Sno),e(k,Rno),e(k,Ls),e(Ls,Ste),e(Ste,Bno),e(Ls,Pno),e(Ls,qB),e(qB,Ino),e(Ls,qno),e(Ls,NB),e(NB,Nno),e(Ls,jno),e(k,Dno),e(k,xs),e(xs,Rte),e(Rte,Gno),e(xs,Ono),e(xs,jB),e(jB,Vno),e(xs,Xno),e(xs,DB),e(DB,zno),e(xs,Qno),e(k,Wno),e(k,$s),e($s,Bte),e(Bte,Hno),e($s,Uno),e($s,GB),e(GB,Jno),e($s,Yno),e($s,OB),e(OB,Kno),e($s,Zno),e(k,eso),e(k,ks),e(ks,Pte),e(Pte,oso),e(ks,rso),e(ks,VB),e(VB,tso),e(ks,aso),e(ks,XB),e(XB,nso),e(ks,sso),e(Cr,lso),M(Wg,Cr,null),e(wo,iso),e(wo,Hg),M(sA,Hg,null),e(Hg,dso),e(Hg,Ite),e(Ite,cso),b(f,IPe,_),b(f,bi,_),e(bi,Ug),e(Ug,qte),M(lA,qte,null),e(bi,fso),e(bi,Nte),e(Nte,mso),b(f,qPe,_),b(f,Ao,_),M(iA,Ao,null),e(Ao,gso),e(Ao,dA),e(dA,hso),e(dA,zB),e(zB,pso),e(dA,uso),e(Ao,_so),e(Ao,cA),e(cA,bso),e(cA,jte),e(jte,vso),e(cA,Fso),e(Ao,Tso),e(Ao,Qe),M(fA,Qe,null),e(Qe,Mso),e(Qe,Dte),e(Dte,Eso),e(Qe,Cso),e(Qe,wa),e(wa,wso),e(wa,Gte),e(Gte,Aso),e(wa,yso),e(wa,Ote),e(Ote,Lso),e(wa,xso),e(wa,Vte),e(Vte,$so),e(wa,kso),e(Qe,Sso),e(Qe,oe),e(oe,Jg),e(Jg,Xte),e(Xte,Rso),e(Jg,Bso),e(Jg,QB),e(QB,Pso),e(Jg,Iso),e(oe,qso),e(oe,Yg),e(Yg,zte),e(zte,Nso),e(Yg,jso),e(Yg,WB),e(WB,Dso),e(Yg,Gso),e(oe,Oso),e(oe,Kg),e(Kg,Qte),e(Qte,Vso),e(Kg,Xso),e(Kg,HB),e(HB,zso),e(Kg,Qso),e(oe,Wso),e(oe,Zg),e(Zg,Wte),e(Wte,Hso),e(Zg,Uso),e(Zg,UB),e(UB,Jso),e(Zg,Yso),e(oe,Kso),e(oe,eh),e(eh,Hte),e(Hte,Zso),e(eh,elo),e(eh,JB),e(JB,olo),e(eh,rlo),e(oe,tlo),e(oe,oh),e(oh,Ute),e(Ute,alo),e(oh,nlo),e(oh,YB),e(YB,slo),e(oh,llo),e(oe,ilo),e(oe,rh),e(rh,Jte),e(Jte,dlo),e(rh,clo),e(rh,KB),e(KB,flo),e(rh,mlo),e(oe,glo),e(oe,th),e(th,Yte),e(Yte,hlo),e(th,plo),e(th,ZB),e(ZB,ulo),e(th,_lo),e(oe,blo),e(oe,ah),e(ah,Kte),e(Kte,vlo),e(ah,Flo),e(ah,eP),e(eP,Tlo),e(ah,Mlo),e(oe,Elo),e(oe,nh),e(nh,Zte),e(Zte,Clo),e(nh,wlo),e(nh,oP),e(oP,Alo),e(nh,ylo),e(oe,Llo),e(oe,sh),e(sh,eae),e(eae,xlo),e(sh,$lo),e(sh,rP),e(rP,klo),e(sh,Slo),e(oe,Rlo),e(oe,lh),e(lh,oae),e(oae,Blo),e(lh,Plo),e(lh,tP),e(tP,Ilo),e(lh,qlo),e(oe,Nlo),e(oe,ih),e(ih,rae),e(rae,jlo),e(ih,Dlo),e(ih,aP),e(aP,Glo),e(ih,Olo),e(oe,Vlo),e(oe,dh),e(dh,tae),e(tae,Xlo),e(dh,zlo),e(dh,nP),e(nP,Qlo),e(dh,Wlo),e(oe,Hlo),e(oe,ch),e(ch,aae),e(aae,Ulo),e(ch,Jlo),e(ch,sP),e(sP,Ylo),e(ch,Klo),e(oe,Zlo),e(oe,fh),e(fh,nae),e(nae,eio),e(fh,oio),e(fh,lP),e(lP,rio),e(fh,tio),e(oe,aio),e(oe,mh),e(mh,sae),e(sae,nio),e(mh,sio),e(mh,iP),e(iP,lio),e(mh,iio),e(oe,dio),e(oe,gh),e(gh,lae),e(lae,cio),e(gh,fio),e(gh,dP),e(dP,mio),e(gh,gio),e(oe,hio),e(oe,hh),e(hh,iae),e(iae,pio),e(hh,uio),e(hh,cP),e(cP,_io),e(hh,bio),e(oe,vio),e(oe,ph),e(ph,dae),e(dae,Fio),e(ph,Tio),e(ph,fP),e(fP,Mio),e(ph,Eio),e(oe,Cio),e(oe,uh),e(uh,cae),e(cae,wio),e(uh,Aio),e(uh,mP),e(mP,yio),e(uh,Lio),e(oe,xio),e(oe,_h),e(_h,fae),e(fae,$io),e(_h,kio),e(_h,gP),e(gP,Sio),e(_h,Rio),e(oe,Bio),e(oe,bh),e(bh,mae),e(mae,Pio),e(bh,Iio),e(bh,hP),e(hP,qio),e(bh,Nio),e(oe,jio),e(oe,vh),e(vh,gae),e(gae,Dio),e(vh,Gio),e(vh,pP),e(pP,Oio),e(vh,Vio),e(oe,Xio),e(oe,Fh),e(Fh,hae),e(hae,zio),e(Fh,Qio),e(Fh,uP),e(uP,Wio),e(Fh,Hio),e(Qe,Uio),M(Th,Qe,null),e(Qe,Jio),M(Mh,Qe,null),e(Ao,Yio),e(Ao,Eh),M(mA,Eh,null),e(Eh,Kio),e(Eh,pae),e(pae,Zio),b(f,NPe,_),b(f,vi,_),e(vi,Ch),e(Ch,uae),M(gA,uae,null),e(vi,edo),e(vi,_ae),e(_ae,odo),b(f,jPe,_),b(f,yo,_),M(hA,yo,null),e(yo,rdo),e(yo,pA),e(pA,tdo),e(pA,_P),e(_P,ado),e(pA,ndo),e(yo,sdo),e(yo,uA),e(uA,ldo),e(uA,bae),e(bae,ido),e(uA,ddo),e(yo,cdo),e(yo,We),M(_A,We,null),e(We,fdo),e(We,vae),e(vae,mdo),e(We,gdo),e(We,Fi),e(Fi,hdo),e(Fi,Fae),e(Fae,pdo),e(Fi,udo),e(Fi,Tae),e(Tae,_do),e(Fi,bdo),e(We,vdo),e(We,be),e(be,wh),e(wh,Mae),e(Mae,Fdo),e(wh,Tdo),e(wh,bP),e(bP,Mdo),e(wh,Edo),e(be,Cdo),e(be,Ah),e(Ah,Eae),e(Eae,wdo),e(Ah,Ado),e(Ah,Cae),e(Cae,ydo),e(Ah,Ldo),e(be,xdo),e(be,yh),e(yh,wae),e(wae,$do),e(yh,kdo),e(yh,vP),e(vP,Sdo),e(yh,Rdo),e(be,Bdo),e(be,Lh),e(Lh,Aae),e(Aae,Pdo),e(Lh,Ido),e(Lh,FP),e(FP,qdo),e(Lh,Ndo),e(be,jdo),e(be,xh),e(xh,yae),e(yae,Ddo),e(xh,Gdo),e(xh,TP),e(TP,Odo),e(xh,Vdo),e(be,Xdo),e(be,$h),e($h,Lae),e(Lae,zdo),e($h,Qdo),e($h,MP),e(MP,Wdo),e($h,Hdo),e(be,Udo),e(be,kh),e(kh,xae),e(xae,Jdo),e(kh,Ydo),e(kh,EP),e(EP,Kdo),e(kh,Zdo),e(be,eco),e(be,Sh),e(Sh,$ae),e($ae,oco),e(Sh,rco),e(Sh,CP),e(CP,tco),e(Sh,aco),e(be,nco),e(be,Rh),e(Rh,kae),e(kae,sco),e(Rh,lco),e(Rh,wP),e(wP,ico),e(Rh,dco),e(be,cco),e(be,Bh),e(Bh,Sae),e(Sae,fco),e(Bh,mco),e(Bh,AP),e(AP,gco),e(Bh,hco),e(be,pco),e(be,Ph),e(Ph,Rae),e(Rae,uco),e(Ph,_co),e(Ph,yP),e(yP,bco),e(Ph,vco),e(be,Fco),e(be,Ih),e(Ih,Bae),e(Bae,Tco),e(Ih,Mco),e(Ih,LP),e(LP,Eco),e(Ih,Cco),e(be,wco),e(be,qh),e(qh,Pae),e(Pae,Aco),e(qh,yco),e(qh,xP),e(xP,Lco),e(qh,xco),e(be,$co),e(be,Nh),e(Nh,Iae),e(Iae,kco),e(Nh,Sco),e(Nh,$P),e($P,Rco),e(Nh,Bco),e(be,Pco),e(be,jh),e(jh,qae),e(qae,Ico),e(jh,qco),e(jh,kP),e(kP,Nco),e(jh,jco),e(We,Dco),M(Dh,We,null),e(We,Gco),M(Gh,We,null),e(yo,Oco),e(yo,Oh),M(bA,Oh,null),e(Oh,Vco),e(Oh,Nae),e(Nae,Xco),b(f,DPe,_),b(f,Ti,_),e(Ti,Vh),e(Vh,jae),M(vA,jae,null),e(Ti,zco),e(Ti,Dae),e(Dae,Qco),b(f,GPe,_),b(f,Lo,_),M(FA,Lo,null),e(Lo,Wco),e(Lo,Mi),e(Mi,Hco),e(Mi,SP),e(SP,Uco),e(Mi,Jco),e(Mi,RP),e(RP,Yco),e(Mi,Kco),e(Lo,Zco),e(Lo,TA),e(TA,efo),e(TA,Gae),e(Gae,ofo),e(TA,rfo),e(Lo,tfo),e(Lo,ot),M(MA,ot,null),e(ot,afo),e(ot,Oae),e(Oae,nfo),e(ot,sfo),e(ot,Ei),e(Ei,lfo),e(Ei,Vae),e(Vae,ifo),e(Ei,dfo),e(Ei,BP),e(BP,cfo),e(Ei,ffo),e(ot,mfo),M(Xh,ot,null),e(Lo,gfo),e(Lo,He),M(EA,He,null),e(He,hfo),e(He,Xae),e(Xae,pfo),e(He,ufo),e(He,Aa),e(Aa,_fo),e(Aa,zae),e(zae,bfo),e(Aa,vfo),e(Aa,Qae),e(Qae,Ffo),e(Aa,Tfo),e(Aa,Wae),e(Wae,Mfo),e(Aa,Efo),e(He,Cfo),e(He,x),e(x,zh),e(zh,Hae),e(Hae,wfo),e(zh,Afo),e(zh,PP),e(PP,yfo),e(zh,Lfo),e(x,xfo),e(x,Qh),e(Qh,Uae),e(Uae,$fo),e(Qh,kfo),e(Qh,IP),e(IP,Sfo),e(Qh,Rfo),e(x,Bfo),e(x,Wh),e(Wh,Jae),e(Jae,Pfo),e(Wh,Ifo),e(Wh,qP),e(qP,qfo),e(Wh,Nfo),e(x,jfo),e(x,Hh),e(Hh,Yae),e(Yae,Dfo),e(Hh,Gfo),e(Hh,NP),e(NP,Ofo),e(Hh,Vfo),e(x,Xfo),e(x,Uh),e(Uh,Kae),e(Kae,zfo),e(Uh,Qfo),e(Uh,jP),e(jP,Wfo),e(Uh,Hfo),e(x,Ufo),e(x,Jh),e(Jh,Zae),e(Zae,Jfo),e(Jh,Yfo),e(Jh,DP),e(DP,Kfo),e(Jh,Zfo),e(x,emo),e(x,Yh),e(Yh,ene),e(ene,omo),e(Yh,rmo),e(Yh,GP),e(GP,tmo),e(Yh,amo),e(x,nmo),e(x,Kh),e(Kh,one),e(one,smo),e(Kh,lmo),e(Kh,OP),e(OP,imo),e(Kh,dmo),e(x,cmo),e(x,Zh),e(Zh,rne),e(rne,fmo),e(Zh,mmo),e(Zh,VP),e(VP,gmo),e(Zh,hmo),e(x,pmo),e(x,ep),e(ep,tne),e(tne,umo),e(ep,_mo),e(ep,XP),e(XP,bmo),e(ep,vmo),e(x,Fmo),e(x,op),e(op,ane),e(ane,Tmo),e(op,Mmo),e(op,zP),e(zP,Emo),e(op,Cmo),e(x,wmo),e(x,rp),e(rp,nne),e(nne,Amo),e(rp,ymo),e(rp,QP),e(QP,Lmo),e(rp,xmo),e(x,$mo),e(x,tp),e(tp,sne),e(sne,kmo),e(tp,Smo),e(tp,WP),e(WP,Rmo),e(tp,Bmo),e(x,Pmo),e(x,ap),e(ap,lne),e(lne,Imo),e(ap,qmo),e(ap,HP),e(HP,Nmo),e(ap,jmo),e(x,Dmo),e(x,np),e(np,ine),e(ine,Gmo),e(np,Omo),e(np,UP),e(UP,Vmo),e(np,Xmo),e(x,zmo),e(x,sp),e(sp,dne),e(dne,Qmo),e(sp,Wmo),e(sp,JP),e(JP,Hmo),e(sp,Umo),e(x,Jmo),e(x,lp),e(lp,cne),e(cne,Ymo),e(lp,Kmo),e(lp,YP),e(YP,Zmo),e(lp,ego),e(x,ogo),e(x,ip),e(ip,fne),e(fne,rgo),e(ip,tgo),e(ip,KP),e(KP,ago),e(ip,ngo),e(x,sgo),e(x,dp),e(dp,mne),e(mne,lgo),e(dp,igo),e(dp,ZP),e(ZP,dgo),e(dp,cgo),e(x,fgo),e(x,cp),e(cp,gne),e(gne,mgo),e(cp,ggo),e(cp,eI),e(eI,hgo),e(cp,pgo),e(x,ugo),e(x,fp),e(fp,hne),e(hne,_go),e(fp,bgo),e(fp,oI),e(oI,vgo),e(fp,Fgo),e(x,Tgo),e(x,mp),e(mp,pne),e(pne,Mgo),e(mp,Ego),e(mp,rI),e(rI,Cgo),e(mp,wgo),e(x,Ago),e(x,gp),e(gp,une),e(une,ygo),e(gp,Lgo),e(gp,tI),e(tI,xgo),e(gp,$go),e(x,kgo),e(x,hp),e(hp,_ne),e(_ne,Sgo),e(hp,Rgo),e(hp,aI),e(aI,Bgo),e(hp,Pgo),e(x,Igo),e(x,pp),e(pp,bne),e(bne,qgo),e(pp,Ngo),e(pp,nI),e(nI,jgo),e(pp,Dgo),e(x,Ggo),e(x,up),e(up,vne),e(vne,Ogo),e(up,Vgo),e(up,sI),e(sI,Xgo),e(up,zgo),e(x,Qgo),e(x,_p),e(_p,Fne),e(Fne,Wgo),e(_p,Hgo),e(_p,lI),e(lI,Ugo),e(_p,Jgo),e(x,Ygo),e(x,bp),e(bp,Tne),e(Tne,Kgo),e(bp,Zgo),e(bp,iI),e(iI,eho),e(bp,oho),e(x,rho),e(x,vp),e(vp,Mne),e(Mne,tho),e(vp,aho),e(vp,dI),e(dI,nho),e(vp,sho),e(x,lho),e(x,Fp),e(Fp,Ene),e(Ene,iho),e(Fp,dho),e(Fp,cI),e(cI,cho),e(Fp,fho),e(x,mho),e(x,Tp),e(Tp,Cne),e(Cne,gho),e(Tp,hho),e(Tp,fI),e(fI,pho),e(Tp,uho),e(x,_ho),e(x,Ss),e(Ss,wne),e(wne,bho),e(Ss,vho),e(Ss,mI),e(mI,Fho),e(Ss,Tho),e(Ss,gI),e(gI,Mho),e(Ss,Eho),e(x,Cho),e(x,Mp),e(Mp,Ane),e(Ane,who),e(Mp,Aho),e(Mp,hI),e(hI,yho),e(Mp,Lho),e(x,xho),e(x,Ep),e(Ep,yne),e(yne,$ho),e(Ep,kho),e(Ep,pI),e(pI,Sho),e(Ep,Rho),e(x,Bho),e(x,Cp),e(Cp,Lne),e(Lne,Pho),e(Cp,Iho),e(Cp,uI),e(uI,qho),e(Cp,Nho),e(x,jho),e(x,wp),e(wp,xne),e(xne,Dho),e(wp,Gho),e(wp,_I),e(_I,Oho),e(wp,Vho),e(x,Xho),e(x,Ap),e(Ap,$ne),e($ne,zho),e(Ap,Qho),e(Ap,bI),e(bI,Who),e(Ap,Hho),e(x,Uho),e(x,yp),e(yp,kne),e(kne,Jho),e(yp,Yho),e(yp,vI),e(vI,Kho),e(yp,Zho),e(x,epo),e(x,Lp),e(Lp,Sne),e(Sne,opo),e(Lp,rpo),e(Lp,FI),e(FI,tpo),e(Lp,apo),e(x,npo),e(x,xp),e(xp,Rne),e(Rne,spo),e(xp,lpo),e(xp,TI),e(TI,ipo),e(xp,dpo),e(x,cpo),e(x,$p),e($p,Bne),e(Bne,fpo),e($p,mpo),e($p,MI),e(MI,gpo),e($p,hpo),e(x,ppo),e(x,kp),e(kp,Pne),e(Pne,upo),e(kp,_po),e(kp,EI),e(EI,bpo),e(kp,vpo),e(x,Fpo),e(x,Sp),e(Sp,Ine),e(Ine,Tpo),e(Sp,Mpo),e(Sp,CI),e(CI,Epo),e(Sp,Cpo),e(x,wpo),e(x,Rp),e(Rp,qne),e(qne,Apo),e(Rp,ypo),e(Rp,wI),e(wI,Lpo),e(Rp,xpo),e(x,$po),e(x,Bp),e(Bp,Nne),e(Nne,kpo),e(Bp,Spo),e(Bp,AI),e(AI,Rpo),e(Bp,Bpo),e(x,Ppo),e(x,Pp),e(Pp,jne),e(jne,Ipo),e(Pp,qpo),e(Pp,yI),e(yI,Npo),e(Pp,jpo),e(x,Dpo),e(x,Ip),e(Ip,Dne),e(Dne,Gpo),e(Ip,Opo),e(Ip,LI),e(LI,Vpo),e(Ip,Xpo),e(x,zpo),e(x,qp),e(qp,Gne),e(Gne,Qpo),e(qp,Wpo),e(qp,xI),e(xI,Hpo),e(qp,Upo),e(x,Jpo),e(x,Np),e(Np,One),e(One,Ypo),e(Np,Kpo),e(Np,$I),e($I,Zpo),e(Np,euo),e(x,ouo),e(x,jp),e(jp,Vne),e(Vne,ruo),e(jp,tuo),e(jp,kI),e(kI,auo),e(jp,nuo),e(x,suo),e(x,Dp),e(Dp,Xne),e(Xne,luo),e(Dp,iuo),e(Dp,SI),e(SI,duo),e(Dp,cuo),e(x,fuo),e(x,Gp),e(Gp,zne),e(zne,muo),e(Gp,guo),e(Gp,RI),e(RI,huo),e(Gp,puo),e(x,uuo),e(x,Op),e(Op,Qne),e(Qne,_uo),e(Op,buo),e(Op,BI),e(BI,vuo),e(Op,Fuo),e(x,Tuo),e(x,Vp),e(Vp,Wne),e(Wne,Muo),e(Vp,Euo),e(Vp,PI),e(PI,Cuo),e(Vp,wuo),e(x,Auo),e(x,Xp),e(Xp,Hne),e(Hne,yuo),e(Xp,Luo),e(Xp,II),e(II,xuo),e(Xp,$uo),e(x,kuo),e(x,zp),e(zp,Une),e(Une,Suo),e(zp,Ruo),e(zp,qI),e(qI,Buo),e(zp,Puo),e(x,Iuo),e(x,Qp),e(Qp,Jne),e(Jne,quo),e(Qp,Nuo),e(Qp,NI),e(NI,juo),e(Qp,Duo),e(x,Guo),e(x,Wp),e(Wp,Yne),e(Yne,Ouo),e(Wp,Vuo),e(Wp,jI),e(jI,Xuo),e(Wp,zuo),e(x,Quo),e(x,Hp),e(Hp,Kne),e(Kne,Wuo),e(Hp,Huo),e(Hp,DI),e(DI,Uuo),e(Hp,Juo),e(x,Yuo),e(x,Up),e(Up,Zne),e(Zne,Kuo),e(Up,Zuo),e(Up,GI),e(GI,e_o),e(Up,o_o),e(x,r_o),e(x,Jp),e(Jp,ese),e(ese,t_o),e(Jp,a_o),e(Jp,OI),e(OI,n_o),e(Jp,s_o),e(x,l_o),e(x,Yp),e(Yp,ose),e(ose,i_o),e(Yp,d_o),e(Yp,VI),e(VI,c_o),e(Yp,f_o),e(x,m_o),e(x,Kp),e(Kp,rse),e(rse,g_o),e(Kp,h_o),e(Kp,XI),e(XI,p_o),e(Kp,u_o),e(x,__o),e(x,Zp),e(Zp,tse),e(tse,b_o),e(Zp,v_o),e(Zp,zI),e(zI,F_o),e(Zp,T_o),e(x,M_o),e(x,eu),e(eu,ase),e(ase,E_o),e(eu,C_o),e(eu,QI),e(QI,w_o),e(eu,A_o),e(x,y_o),e(x,ou),e(ou,nse),e(nse,L_o),e(ou,x_o),e(ou,WI),e(WI,$_o),e(ou,k_o),e(x,S_o),e(x,ru),e(ru,sse),e(sse,R_o),e(ru,B_o),e(ru,HI),e(HI,P_o),e(ru,I_o),e(x,q_o),e(x,tu),e(tu,lse),e(lse,N_o),e(tu,j_o),e(tu,UI),e(UI,D_o),e(tu,G_o),e(x,O_o),e(x,au),e(au,ise),e(ise,V_o),e(au,X_o),e(au,JI),e(JI,z_o),e(au,Q_o),e(x,W_o),e(x,nu),e(nu,dse),e(dse,H_o),e(nu,U_o),e(nu,YI),e(YI,J_o),e(nu,Y_o),e(x,K_o),e(x,su),e(su,cse),e(cse,Z_o),e(su,e2o),e(su,KI),e(KI,o2o),e(su,r2o),e(x,t2o),e(x,lu),e(lu,fse),e(fse,a2o),e(lu,n2o),e(lu,ZI),e(ZI,s2o),e(lu,l2o),e(x,i2o),e(x,iu),e(iu,mse),e(mse,d2o),e(iu,c2o),e(iu,eq),e(eq,f2o),e(iu,m2o),e(x,g2o),e(x,du),e(du,gse),e(gse,h2o),e(du,p2o),e(du,oq),e(oq,u2o),e(du,_2o),e(x,b2o),e(x,cu),e(cu,hse),e(hse,v2o),e(cu,F2o),e(cu,rq),e(rq,T2o),e(cu,M2o),e(x,E2o),e(x,fu),e(fu,pse),e(pse,C2o),e(fu,w2o),e(fu,tq),e(tq,A2o),e(fu,y2o),e(x,L2o),e(x,mu),e(mu,use),e(use,x2o),e(mu,$2o),e(mu,aq),e(aq,k2o),e(mu,S2o),e(x,R2o),e(x,gu),e(gu,_se),e(_se,B2o),e(gu,P2o),e(gu,nq),e(nq,I2o),e(gu,q2o),e(x,N2o),e(x,hu),e(hu,bse),e(bse,j2o),e(hu,D2o),e(hu,sq),e(sq,G2o),e(hu,O2o),e(x,V2o),e(x,pu),e(pu,vse),e(vse,X2o),e(pu,z2o),e(pu,lq),e(lq,Q2o),e(pu,W2o),e(x,H2o),e(x,uu),e(uu,Fse),e(Fse,U2o),e(uu,J2o),e(uu,iq),e(iq,Y2o),e(uu,K2o),e(x,Z2o),e(x,_u),e(_u,Tse),e(Tse,e1o),e(_u,o1o),e(_u,dq),e(dq,r1o),e(_u,t1o),e(x,a1o),e(x,bu),e(bu,Mse),e(Mse,n1o),e(bu,s1o),e(bu,cq),e(cq,l1o),e(bu,i1o),e(x,d1o),e(x,vu),e(vu,Ese),e(Ese,c1o),e(vu,f1o),e(vu,fq),e(fq,m1o),e(vu,g1o),e(x,h1o),e(x,Fu),e(Fu,Cse),e(Cse,p1o),e(Fu,u1o),e(Fu,mq),e(mq,_1o),e(Fu,b1o),e(x,v1o),e(x,Tu),e(Tu,wse),e(wse,F1o),e(Tu,T1o),e(Tu,gq),e(gq,M1o),e(Tu,E1o),e(x,C1o),e(x,Mu),e(Mu,Ase),e(Ase,w1o),e(Mu,A1o),e(Mu,hq),e(hq,y1o),e(Mu,L1o),e(x,x1o),e(x,Eu),e(Eu,yse),e(yse,$1o),e(Eu,k1o),e(Eu,pq),e(pq,S1o),e(Eu,R1o),e(x,B1o),e(x,Cu),e(Cu,Lse),e(Lse,P1o),e(Cu,I1o),e(Cu,uq),e(uq,q1o),e(Cu,N1o),e(x,j1o),e(x,wu),e(wu,xse),e(xse,D1o),e(wu,G1o),e(wu,_q),e(_q,O1o),e(wu,V1o),e(x,X1o),e(x,Au),e(Au,$se),e($se,z1o),e(Au,Q1o),e(Au,bq),e(bq,W1o),e(Au,H1o),e(x,U1o),e(x,yu),e(yu,kse),e(kse,J1o),e(yu,Y1o),e(yu,vq),e(vq,K1o),e(yu,Z1o),e(x,ebo),e(x,Lu),e(Lu,Sse),e(Sse,obo),e(Lu,rbo),e(Lu,Fq),e(Fq,tbo),e(Lu,abo),e(x,nbo),e(x,xu),e(xu,Rse),e(Rse,sbo),e(xu,lbo),e(xu,Tq),e(Tq,ibo),e(xu,dbo),e(x,cbo),e(x,$u),e($u,Bse),e(Bse,fbo),e($u,mbo),e($u,Mq),e(Mq,gbo),e($u,hbo),e(x,pbo),e(x,ku),e(ku,Pse),e(Pse,ubo),e(ku,_bo),e(ku,Eq),e(Eq,bbo),e(ku,vbo),e(He,Fbo),e(He,Su),e(Su,Tbo),e(Su,Ise),e(Ise,Mbo),e(Su,Ebo),e(Su,qse),e(qse,Cbo),e(He,wbo),M(Ru,He,null),b(f,OPe,_),b(f,Ci,_),e(Ci,Bu),e(Bu,Nse),M(CA,Nse,null),e(Ci,Abo),e(Ci,jse),e(jse,ybo),b(f,VPe,_),b(f,xo,_),M(wA,xo,null),e(xo,Lbo),e(xo,wi),e(wi,xbo),e(wi,Cq),e(Cq,$bo),e(wi,kbo),e(wi,wq),e(wq,Sbo),e(wi,Rbo),e(xo,Bbo),e(xo,AA),e(AA,Pbo),e(AA,Dse),e(Dse,Ibo),e(AA,qbo),e(xo,Nbo),e(xo,rt),M(yA,rt,null),e(rt,jbo),e(rt,Gse),e(Gse,Dbo),e(rt,Gbo),e(rt,Ai),e(Ai,Obo),e(Ai,Ose),e(Ose,Vbo),e(Ai,Xbo),e(Ai,Aq),e(Aq,zbo),e(Ai,Qbo),e(rt,Wbo),M(Pu,rt,null),e(xo,Hbo),e(xo,Ue),M(LA,Ue,null),e(Ue,Ubo),e(Ue,Vse),e(Vse,Jbo),e(Ue,Ybo),e(Ue,ya),e(ya,Kbo),e(ya,Xse),e(Xse,Zbo),e(ya,evo),e(ya,zse),e(zse,ovo),e(ya,rvo),e(ya,Qse),e(Qse,tvo),e(ya,avo),e(Ue,nvo),e(Ue,G),e(G,Iu),e(Iu,Wse),e(Wse,svo),e(Iu,lvo),e(Iu,yq),e(yq,ivo),e(Iu,dvo),e(G,cvo),e(G,qu),e(qu,Hse),e(Hse,fvo),e(qu,mvo),e(qu,Lq),e(Lq,gvo),e(qu,hvo),e(G,pvo),e(G,Nu),e(Nu,Use),e(Use,uvo),e(Nu,_vo),e(Nu,xq),e(xq,bvo),e(Nu,vvo),e(G,Fvo),e(G,ju),e(ju,Jse),e(Jse,Tvo),e(ju,Mvo),e(ju,$q),e($q,Evo),e(ju,Cvo),e(G,wvo),e(G,Du),e(Du,Yse),e(Yse,Avo),e(Du,yvo),e(Du,kq),e(kq,Lvo),e(Du,xvo),e(G,$vo),e(G,Gu),e(Gu,Kse),e(Kse,kvo),e(Gu,Svo),e(Gu,Sq),e(Sq,Rvo),e(Gu,Bvo),e(G,Pvo),e(G,Ou),e(Ou,Zse),e(Zse,Ivo),e(Ou,qvo),e(Ou,Rq),e(Rq,Nvo),e(Ou,jvo),e(G,Dvo),e(G,Vu),e(Vu,ele),e(ele,Gvo),e(Vu,Ovo),e(Vu,Bq),e(Bq,Vvo),e(Vu,Xvo),e(G,zvo),e(G,Xu),e(Xu,ole),e(ole,Qvo),e(Xu,Wvo),e(Xu,Pq),e(Pq,Hvo),e(Xu,Uvo),e(G,Jvo),e(G,zu),e(zu,rle),e(rle,Yvo),e(zu,Kvo),e(zu,Iq),e(Iq,Zvo),e(zu,eFo),e(G,oFo),e(G,Qu),e(Qu,tle),e(tle,rFo),e(Qu,tFo),e(Qu,qq),e(qq,aFo),e(Qu,nFo),e(G,sFo),e(G,Wu),e(Wu,ale),e(ale,lFo),e(Wu,iFo),e(Wu,Nq),e(Nq,dFo),e(Wu,cFo),e(G,fFo),e(G,Hu),e(Hu,nle),e(nle,mFo),e(Hu,gFo),e(Hu,jq),e(jq,hFo),e(Hu,pFo),e(G,uFo),e(G,Uu),e(Uu,sle),e(sle,_Fo),e(Uu,bFo),e(Uu,Dq),e(Dq,vFo),e(Uu,FFo),e(G,TFo),e(G,Ju),e(Ju,lle),e(lle,MFo),e(Ju,EFo),e(Ju,Gq),e(Gq,CFo),e(Ju,wFo),e(G,AFo),e(G,Yu),e(Yu,ile),e(ile,yFo),e(Yu,LFo),e(Yu,Oq),e(Oq,xFo),e(Yu,$Fo),e(G,kFo),e(G,Ku),e(Ku,dle),e(dle,SFo),e(Ku,RFo),e(Ku,Vq),e(Vq,BFo),e(Ku,PFo),e(G,IFo),e(G,Zu),e(Zu,cle),e(cle,qFo),e(Zu,NFo),e(Zu,Xq),e(Xq,jFo),e(Zu,DFo),e(G,GFo),e(G,e_),e(e_,fle),e(fle,OFo),e(e_,VFo),e(e_,zq),e(zq,XFo),e(e_,zFo),e(G,QFo),e(G,o_),e(o_,mle),e(mle,WFo),e(o_,HFo),e(o_,Qq),e(Qq,UFo),e(o_,JFo),e(G,YFo),e(G,r_),e(r_,gle),e(gle,KFo),e(r_,ZFo),e(r_,Wq),e(Wq,e0o),e(r_,o0o),e(G,r0o),e(G,t_),e(t_,hle),e(hle,t0o),e(t_,a0o),e(t_,Hq),e(Hq,n0o),e(t_,s0o),e(G,l0o),e(G,a_),e(a_,ple),e(ple,i0o),e(a_,d0o),e(a_,Uq),e(Uq,c0o),e(a_,f0o),e(G,m0o),e(G,n_),e(n_,ule),e(ule,g0o),e(n_,h0o),e(n_,Jq),e(Jq,p0o),e(n_,u0o),e(G,_0o),e(G,s_),e(s_,_le),e(_le,b0o),e(s_,v0o),e(s_,Yq),e(Yq,F0o),e(s_,T0o),e(G,M0o),e(G,l_),e(l_,ble),e(ble,E0o),e(l_,C0o),e(l_,Kq),e(Kq,w0o),e(l_,A0o),e(G,y0o),e(G,i_),e(i_,vle),e(vle,L0o),e(i_,x0o),e(i_,Zq),e(Zq,$0o),e(i_,k0o),e(G,S0o),e(G,d_),e(d_,Fle),e(Fle,R0o),e(d_,B0o),e(d_,eN),e(eN,P0o),e(d_,I0o),e(G,q0o),e(G,c_),e(c_,Tle),e(Tle,N0o),e(c_,j0o),e(c_,oN),e(oN,D0o),e(c_,G0o),e(G,O0o),e(G,f_),e(f_,Mle),e(Mle,V0o),e(f_,X0o),e(f_,rN),e(rN,z0o),e(f_,Q0o),e(G,W0o),e(G,m_),e(m_,Ele),e(Ele,H0o),e(m_,U0o),e(m_,tN),e(tN,J0o),e(m_,Y0o),e(G,K0o),e(G,g_),e(g_,Cle),e(Cle,Z0o),e(g_,e6o),e(g_,aN),e(aN,o6o),e(g_,r6o),e(G,t6o),e(G,h_),e(h_,wle),e(wle,a6o),e(h_,n6o),e(h_,nN),e(nN,s6o),e(h_,l6o),e(G,i6o),e(G,p_),e(p_,Ale),e(Ale,d6o),e(p_,c6o),e(p_,sN),e(sN,f6o),e(p_,m6o),e(G,g6o),e(G,u_),e(u_,yle),e(yle,h6o),e(u_,p6o),e(u_,lN),e(lN,u6o),e(u_,_6o),e(G,b6o),e(G,__),e(__,Lle),e(Lle,v6o),e(__,F6o),e(__,iN),e(iN,T6o),e(__,M6o),e(G,E6o),e(G,b_),e(b_,xle),e(xle,C6o),e(b_,w6o),e(b_,dN),e(dN,A6o),e(b_,y6o),e(G,L6o),e(G,v_),e(v_,$le),e($le,x6o),e(v_,$6o),e(v_,cN),e(cN,k6o),e(v_,S6o),e(G,R6o),e(G,F_),e(F_,kle),e(kle,B6o),e(F_,P6o),e(F_,fN),e(fN,I6o),e(F_,q6o),e(G,N6o),e(G,T_),e(T_,Sle),e(Sle,j6o),e(T_,D6o),e(T_,mN),e(mN,G6o),e(T_,O6o),e(Ue,V6o),e(Ue,M_),e(M_,X6o),e(M_,Rle),e(Rle,z6o),e(M_,Q6o),e(M_,Ble),e(Ble,W6o),e(Ue,H6o),M(E_,Ue,null),b(f,XPe,_),b(f,yi,_),e(yi,C_),e(C_,Ple),M(xA,Ple,null),e(yi,U6o),e(yi,Ile),e(Ile,J6o),b(f,zPe,_),b(f,$o,_),M($A,$o,null),e($o,Y6o),e($o,Li),e(Li,K6o),e(Li,gN),e(gN,Z6o),e(Li,eTo),e(Li,hN),e(hN,oTo),e(Li,rTo),e($o,tTo),e($o,kA),e(kA,aTo),e(kA,qle),e(qle,nTo),e(kA,sTo),e($o,lTo),e($o,tt),M(SA,tt,null),e(tt,iTo),e(tt,Nle),e(Nle,dTo),e(tt,cTo),e(tt,xi),e(xi,fTo),e(xi,jle),e(jle,mTo),e(xi,gTo),e(xi,pN),e(pN,hTo),e(xi,pTo),e(tt,uTo),M(w_,tt,null),e($o,_To),e($o,Je),M(RA,Je,null),e(Je,bTo),e(Je,Dle),e(Dle,vTo),e(Je,FTo),e(Je,La),e(La,TTo),e(La,Gle),e(Gle,MTo),e(La,ETo),e(La,Ole),e(Ole,CTo),e(La,wTo),e(La,Vle),e(Vle,ATo),e(La,yTo),e(Je,LTo),e(Je,z),e(z,A_),e(A_,Xle),e(Xle,xTo),e(A_,$To),e(A_,uN),e(uN,kTo),e(A_,STo),e(z,RTo),e(z,y_),e(y_,zle),e(zle,BTo),e(y_,PTo),e(y_,_N),e(_N,ITo),e(y_,qTo),e(z,NTo),e(z,L_),e(L_,Qle),e(Qle,jTo),e(L_,DTo),e(L_,bN),e(bN,GTo),e(L_,OTo),e(z,VTo),e(z,x_),e(x_,Wle),e(Wle,XTo),e(x_,zTo),e(x_,vN),e(vN,QTo),e(x_,WTo),e(z,HTo),e(z,$_),e($_,Hle),e(Hle,UTo),e($_,JTo),e($_,FN),e(FN,YTo),e($_,KTo),e(z,ZTo),e(z,k_),e(k_,Ule),e(Ule,e7o),e(k_,o7o),e(k_,TN),e(TN,r7o),e(k_,t7o),e(z,a7o),e(z,S_),e(S_,Jle),e(Jle,n7o),e(S_,s7o),e(S_,MN),e(MN,l7o),e(S_,i7o),e(z,d7o),e(z,R_),e(R_,Yle),e(Yle,c7o),e(R_,f7o),e(R_,EN),e(EN,m7o),e(R_,g7o),e(z,h7o),e(z,B_),e(B_,Kle),e(Kle,p7o),e(B_,u7o),e(B_,CN),e(CN,_7o),e(B_,b7o),e(z,v7o),e(z,P_),e(P_,Zle),e(Zle,F7o),e(P_,T7o),e(P_,wN),e(wN,M7o),e(P_,E7o),e(z,C7o),e(z,I_),e(I_,eie),e(eie,w7o),e(I_,A7o),e(I_,AN),e(AN,y7o),e(I_,L7o),e(z,x7o),e(z,q_),e(q_,oie),e(oie,$7o),e(q_,k7o),e(q_,yN),e(yN,S7o),e(q_,R7o),e(z,B7o),e(z,N_),e(N_,rie),e(rie,P7o),e(N_,I7o),e(N_,LN),e(LN,q7o),e(N_,N7o),e(z,j7o),e(z,j_),e(j_,tie),e(tie,D7o),e(j_,G7o),e(j_,xN),e(xN,O7o),e(j_,V7o),e(z,X7o),e(z,D_),e(D_,aie),e(aie,z7o),e(D_,Q7o),e(D_,$N),e($N,W7o),e(D_,H7o),e(z,U7o),e(z,G_),e(G_,nie),e(nie,J7o),e(G_,Y7o),e(G_,kN),e(kN,K7o),e(G_,Z7o),e(z,eMo),e(z,O_),e(O_,sie),e(sie,oMo),e(O_,rMo),e(O_,SN),e(SN,tMo),e(O_,aMo),e(z,nMo),e(z,V_),e(V_,lie),e(lie,sMo),e(V_,lMo),e(V_,RN),e(RN,iMo),e(V_,dMo),e(z,cMo),e(z,X_),e(X_,iie),e(iie,fMo),e(X_,mMo),e(X_,BN),e(BN,gMo),e(X_,hMo),e(z,pMo),e(z,z_),e(z_,die),e(die,uMo),e(z_,_Mo),e(z_,PN),e(PN,bMo),e(z_,vMo),e(z,FMo),e(z,Q_),e(Q_,cie),e(cie,TMo),e(Q_,MMo),e(Q_,IN),e(IN,EMo),e(Q_,CMo),e(z,wMo),e(z,W_),e(W_,fie),e(fie,AMo),e(W_,yMo),e(W_,qN),e(qN,LMo),e(W_,xMo),e(z,$Mo),e(z,H_),e(H_,mie),e(mie,kMo),e(H_,SMo),e(H_,NN),e(NN,RMo),e(H_,BMo),e(z,PMo),e(z,U_),e(U_,gie),e(gie,IMo),e(U_,qMo),e(U_,jN),e(jN,NMo),e(U_,jMo),e(z,DMo),e(z,J_),e(J_,hie),e(hie,GMo),e(J_,OMo),e(J_,DN),e(DN,VMo),e(J_,XMo),e(z,zMo),e(z,Y_),e(Y_,pie),e(pie,QMo),e(Y_,WMo),e(Y_,GN),e(GN,HMo),e(Y_,UMo),e(z,JMo),e(z,K_),e(K_,uie),e(uie,YMo),e(K_,KMo),e(K_,ON),e(ON,ZMo),e(K_,e4o),e(z,o4o),e(z,Z_),e(Z_,_ie),e(_ie,r4o),e(Z_,t4o),e(Z_,VN),e(VN,a4o),e(Z_,n4o),e(z,s4o),e(z,e2),e(e2,bie),e(bie,l4o),e(e2,i4o),e(e2,XN),e(XN,d4o),e(e2,c4o),e(z,f4o),e(z,o2),e(o2,vie),e(vie,m4o),e(o2,g4o),e(o2,zN),e(zN,h4o),e(o2,p4o),e(z,u4o),e(z,r2),e(r2,Fie),e(Fie,_4o),e(r2,b4o),e(r2,QN),e(QN,v4o),e(r2,F4o),e(z,T4o),e(z,t2),e(t2,Tie),e(Tie,M4o),e(t2,E4o),e(t2,WN),e(WN,C4o),e(t2,w4o),e(z,A4o),e(z,a2),e(a2,Mie),e(Mie,y4o),e(a2,L4o),e(a2,HN),e(HN,x4o),e(a2,$4o),e(z,k4o),e(z,n2),e(n2,Eie),e(Eie,S4o),e(n2,R4o),e(n2,UN),e(UN,B4o),e(n2,P4o),e(z,I4o),e(z,s2),e(s2,Cie),e(Cie,q4o),e(s2,N4o),e(s2,JN),e(JN,j4o),e(s2,D4o),e(Je,G4o),e(Je,l2),e(l2,O4o),e(l2,wie),e(wie,V4o),e(l2,X4o),e(l2,Aie),e(Aie,z4o),e(Je,Q4o),M(i2,Je,null),b(f,QPe,_),b(f,$i,_),e($i,d2),e(d2,yie),M(BA,yie,null),e($i,W4o),e($i,Lie),e(Lie,H4o),b(f,WPe,_),b(f,ko,_),M(PA,ko,null),e(ko,U4o),e(ko,ki),e(ki,J4o),e(ki,YN),e(YN,Y4o),e(ki,K4o),e(ki,KN),e(KN,Z4o),e(ki,eEo),e(ko,oEo),e(ko,IA),e(IA,rEo),e(IA,xie),e(xie,tEo),e(IA,aEo),e(ko,nEo),e(ko,at),M(qA,at,null),e(at,sEo),e(at,$ie),e($ie,lEo),e(at,iEo),e(at,Si),e(Si,dEo),e(Si,kie),e(kie,cEo),e(Si,fEo),e(Si,ZN),e(ZN,mEo),e(Si,gEo),e(at,hEo),M(c2,at,null),e(ko,pEo),e(ko,Ye),M(NA,Ye,null),e(Ye,uEo),e(Ye,Sie),e(Sie,_Eo),e(Ye,bEo),e(Ye,xa),e(xa,vEo),e(xa,Rie),e(Rie,FEo),e(xa,TEo),e(xa,Bie),e(Bie,MEo),e(xa,EEo),e(xa,Pie),e(Pie,CEo),e(xa,wEo),e(Ye,AEo),e(Ye,Q),e(Q,f2),e(f2,Iie),e(Iie,yEo),e(f2,LEo),e(f2,ej),e(ej,xEo),e(f2,$Eo),e(Q,kEo),e(Q,m2),e(m2,qie),e(qie,SEo),e(m2,REo),e(m2,oj),e(oj,BEo),e(m2,PEo),e(Q,IEo),e(Q,g2),e(g2,Nie),e(Nie,qEo),e(g2,NEo),e(g2,rj),e(rj,jEo),e(g2,DEo),e(Q,GEo),e(Q,h2),e(h2,jie),e(jie,OEo),e(h2,VEo),e(h2,tj),e(tj,XEo),e(h2,zEo),e(Q,QEo),e(Q,p2),e(p2,Die),e(Die,WEo),e(p2,HEo),e(p2,aj),e(aj,UEo),e(p2,JEo),e(Q,YEo),e(Q,u2),e(u2,Gie),e(Gie,KEo),e(u2,ZEo),e(u2,nj),e(nj,e5o),e(u2,o5o),e(Q,r5o),e(Q,_2),e(_2,Oie),e(Oie,t5o),e(_2,a5o),e(_2,sj),e(sj,n5o),e(_2,s5o),e(Q,l5o),e(Q,b2),e(b2,Vie),e(Vie,i5o),e(b2,d5o),e(b2,lj),e(lj,c5o),e(b2,f5o),e(Q,m5o),e(Q,v2),e(v2,Xie),e(Xie,g5o),e(v2,h5o),e(v2,ij),e(ij,p5o),e(v2,u5o),e(Q,_5o),e(Q,F2),e(F2,zie),e(zie,b5o),e(F2,v5o),e(F2,dj),e(dj,F5o),e(F2,T5o),e(Q,M5o),e(Q,T2),e(T2,Qie),e(Qie,E5o),e(T2,C5o),e(T2,cj),e(cj,w5o),e(T2,A5o),e(Q,y5o),e(Q,M2),e(M2,Wie),e(Wie,L5o),e(M2,x5o),e(M2,fj),e(fj,$5o),e(M2,k5o),e(Q,S5o),e(Q,E2),e(E2,Hie),e(Hie,R5o),e(E2,B5o),e(E2,mj),e(mj,P5o),e(E2,I5o),e(Q,q5o),e(Q,C2),e(C2,Uie),e(Uie,N5o),e(C2,j5o),e(C2,gj),e(gj,D5o),e(C2,G5o),e(Q,O5o),e(Q,w2),e(w2,Jie),e(Jie,V5o),e(w2,X5o),e(w2,hj),e(hj,z5o),e(w2,Q5o),e(Q,W5o),e(Q,A2),e(A2,Yie),e(Yie,H5o),e(A2,U5o),e(A2,pj),e(pj,J5o),e(A2,Y5o),e(Q,K5o),e(Q,y2),e(y2,Kie),e(Kie,Z5o),e(y2,eCo),e(y2,uj),e(uj,oCo),e(y2,rCo),e(Q,tCo),e(Q,L2),e(L2,Zie),e(Zie,aCo),e(L2,nCo),e(L2,_j),e(_j,sCo),e(L2,lCo),e(Q,iCo),e(Q,x2),e(x2,ede),e(ede,dCo),e(x2,cCo),e(x2,bj),e(bj,fCo),e(x2,mCo),e(Q,gCo),e(Q,$2),e($2,ode),e(ode,hCo),e($2,pCo),e($2,vj),e(vj,uCo),e($2,_Co),e(Q,bCo),e(Q,k2),e(k2,rde),e(rde,vCo),e(k2,FCo),e(k2,Fj),e(Fj,TCo),e(k2,MCo),e(Q,ECo),e(Q,S2),e(S2,tde),e(tde,CCo),e(S2,wCo),e(S2,Tj),e(Tj,ACo),e(S2,yCo),e(Q,LCo),e(Q,R2),e(R2,ade),e(ade,xCo),e(R2,$Co),e(R2,Mj),e(Mj,kCo),e(R2,SCo),e(Q,RCo),e(Q,B2),e(B2,nde),e(nde,BCo),e(B2,PCo),e(B2,Ej),e(Ej,ICo),e(B2,qCo),e(Q,NCo),e(Q,P2),e(P2,sde),e(sde,jCo),e(P2,DCo),e(P2,Cj),e(Cj,GCo),e(P2,OCo),e(Q,VCo),e(Q,I2),e(I2,lde),e(lde,XCo),e(I2,zCo),e(I2,wj),e(wj,QCo),e(I2,WCo),e(Q,HCo),e(Q,q2),e(q2,ide),e(ide,UCo),e(q2,JCo),e(q2,Aj),e(Aj,YCo),e(q2,KCo),e(Q,ZCo),e(Q,N2),e(N2,dde),e(dde,e3o),e(N2,o3o),e(N2,yj),e(yj,r3o),e(N2,t3o),e(Q,a3o),e(Q,j2),e(j2,cde),e(cde,n3o),e(j2,s3o),e(j2,Lj),e(Lj,l3o),e(j2,i3o),e(Q,d3o),e(Q,D2),e(D2,fde),e(fde,c3o),e(D2,f3o),e(D2,xj),e(xj,m3o),e(D2,g3o),e(Q,h3o),e(Q,G2),e(G2,mde),e(mde,p3o),e(G2,u3o),e(G2,gde),e(gde,_3o),e(G2,b3o),e(Q,v3o),e(Q,O2),e(O2,hde),e(hde,F3o),e(O2,T3o),e(O2,$j),e($j,M3o),e(O2,E3o),e(Q,C3o),e(Q,V2),e(V2,pde),e(pde,w3o),e(V2,A3o),e(V2,kj),e(kj,y3o),e(V2,L3o),e(Q,x3o),e(Q,X2),e(X2,ude),e(ude,$3o),e(X2,k3o),e(X2,Sj),e(Sj,S3o),e(X2,R3o),e(Q,B3o),e(Q,z2),e(z2,_de),e(_de,P3o),e(z2,I3o),e(z2,Rj),e(Rj,q3o),e(z2,N3o),e(Ye,j3o),e(Ye,Q2),e(Q2,D3o),e(Q2,bde),e(bde,G3o),e(Q2,O3o),e(Q2,vde),e(vde,V3o),e(Ye,X3o),M(W2,Ye,null),b(f,HPe,_),b(f,Ri,_),e(Ri,H2),e(H2,Fde),M(jA,Fde,null),e(Ri,z3o),e(Ri,Tde),e(Tde,Q3o),b(f,UPe,_),b(f,So,_),M(DA,So,null),e(So,W3o),e(So,Bi),e(Bi,H3o),e(Bi,Bj),e(Bj,U3o),e(Bi,J3o),e(Bi,Pj),e(Pj,Y3o),e(Bi,K3o),e(So,Z3o),e(So,GA),e(GA,ewo),e(GA,Mde),e(Mde,owo),e(GA,rwo),e(So,two),e(So,nt),M(OA,nt,null),e(nt,awo),e(nt,Ede),e(Ede,nwo),e(nt,swo),e(nt,Pi),e(Pi,lwo),e(Pi,Cde),e(Cde,iwo),e(Pi,dwo),e(Pi,Ij),e(Ij,cwo),e(Pi,fwo),e(nt,mwo),M(U2,nt,null),e(So,gwo),e(So,Ke),M(VA,Ke,null),e(Ke,hwo),e(Ke,wde),e(wde,pwo),e(Ke,uwo),e(Ke,$a),e($a,_wo),e($a,Ade),e(Ade,bwo),e($a,vwo),e($a,yde),e(yde,Fwo),e($a,Two),e($a,Lde),e(Lde,Mwo),e($a,Ewo),e(Ke,Cwo),e(Ke,he),e(he,J2),e(J2,xde),e(xde,wwo),e(J2,Awo),e(J2,qj),e(qj,ywo),e(J2,Lwo),e(he,xwo),e(he,Y2),e(Y2,$de),e($de,$wo),e(Y2,kwo),e(Y2,Nj),e(Nj,Swo),e(Y2,Rwo),e(he,Bwo),e(he,K2),e(K2,kde),e(kde,Pwo),e(K2,Iwo),e(K2,jj),e(jj,qwo),e(K2,Nwo),e(he,jwo),e(he,Z2),e(Z2,Sde),e(Sde,Dwo),e(Z2,Gwo),e(Z2,Dj),e(Dj,Owo),e(Z2,Vwo),e(he,Xwo),e(he,e1),e(e1,Rde),e(Rde,zwo),e(e1,Qwo),e(e1,Gj),e(Gj,Wwo),e(e1,Hwo),e(he,Uwo),e(he,o1),e(o1,Bde),e(Bde,Jwo),e(o1,Ywo),e(o1,Oj),e(Oj,Kwo),e(o1,Zwo),e(he,eAo),e(he,r1),e(r1,Pde),e(Pde,oAo),e(r1,rAo),e(r1,Vj),e(Vj,tAo),e(r1,aAo),e(he,nAo),e(he,t1),e(t1,Ide),e(Ide,sAo),e(t1,lAo),e(t1,Xj),e(Xj,iAo),e(t1,dAo),e(he,cAo),e(he,a1),e(a1,qde),e(qde,fAo),e(a1,mAo),e(a1,zj),e(zj,gAo),e(a1,hAo),e(he,pAo),e(he,n1),e(n1,Nde),e(Nde,uAo),e(n1,_Ao),e(n1,Qj),e(Qj,bAo),e(n1,vAo),e(he,FAo),e(he,s1),e(s1,jde),e(jde,TAo),e(s1,MAo),e(s1,Wj),e(Wj,EAo),e(s1,CAo),e(he,wAo),e(he,l1),e(l1,Dde),e(Dde,AAo),e(l1,yAo),e(l1,Hj),e(Hj,LAo),e(l1,xAo),e(he,$Ao),e(he,i1),e(i1,Gde),e(Gde,kAo),e(i1,SAo),e(i1,Uj),e(Uj,RAo),e(i1,BAo),e(he,PAo),e(he,d1),e(d1,Ode),e(Ode,IAo),e(d1,qAo),e(d1,Jj),e(Jj,NAo),e(d1,jAo),e(he,DAo),e(he,c1),e(c1,Vde),e(Vde,GAo),e(c1,OAo),e(c1,Yj),e(Yj,VAo),e(c1,XAo),e(he,zAo),e(he,f1),e(f1,Xde),e(Xde,QAo),e(f1,WAo),e(f1,Kj),e(Kj,HAo),e(f1,UAo),e(he,JAo),e(he,m1),e(m1,zde),e(zde,YAo),e(m1,KAo),e(m1,Zj),e(Zj,ZAo),e(m1,eyo),e(Ke,oyo),e(Ke,g1),e(g1,ryo),e(g1,Qde),e(Qde,tyo),e(g1,ayo),e(g1,Wde),e(Wde,nyo),e(Ke,syo),M(h1,Ke,null),b(f,JPe,_),b(f,Ii,_),e(Ii,p1),e(p1,Hde),M(XA,Hde,null),e(Ii,lyo),e(Ii,Ude),e(Ude,iyo),b(f,YPe,_),b(f,Ro,_),M(zA,Ro,null),e(Ro,dyo),e(Ro,qi),e(qi,cyo),e(qi,eD),e(eD,fyo),e(qi,myo),e(qi,oD),e(oD,gyo),e(qi,hyo),e(Ro,pyo),e(Ro,QA),e(QA,uyo),e(QA,Jde),e(Jde,_yo),e(QA,byo),e(Ro,vyo),e(Ro,st),M(WA,st,null),e(st,Fyo),e(st,Yde),e(Yde,Tyo),e(st,Myo),e(st,Ni),e(Ni,Eyo),e(Ni,Kde),e(Kde,Cyo),e(Ni,wyo),e(Ni,rD),e(rD,Ayo),e(Ni,yyo),e(st,Lyo),M(u1,st,null),e(Ro,xyo),e(Ro,Ze),M(HA,Ze,null),e(Ze,$yo),e(Ze,Zde),e(Zde,kyo),e(Ze,Syo),e(Ze,ka),e(ka,Ryo),e(ka,ece),e(ece,Byo),e(ka,Pyo),e(ka,oce),e(oce,Iyo),e(ka,qyo),e(ka,rce),e(rce,Nyo),e(ka,jyo),e(Ze,Dyo),e(Ze,q),e(q,_1),e(_1,tce),e(tce,Gyo),e(_1,Oyo),e(_1,tD),e(tD,Vyo),e(_1,Xyo),e(q,zyo),e(q,b1),e(b1,ace),e(ace,Qyo),e(b1,Wyo),e(b1,aD),e(aD,Hyo),e(b1,Uyo),e(q,Jyo),e(q,v1),e(v1,nce),e(nce,Yyo),e(v1,Kyo),e(v1,nD),e(nD,Zyo),e(v1,eLo),e(q,oLo),e(q,F1),e(F1,sce),e(sce,rLo),e(F1,tLo),e(F1,sD),e(sD,aLo),e(F1,nLo),e(q,sLo),e(q,T1),e(T1,lce),e(lce,lLo),e(T1,iLo),e(T1,lD),e(lD,dLo),e(T1,cLo),e(q,fLo),e(q,M1),e(M1,ice),e(ice,mLo),e(M1,gLo),e(M1,iD),e(iD,hLo),e(M1,pLo),e(q,uLo),e(q,E1),e(E1,dce),e(dce,_Lo),e(E1,bLo),e(E1,dD),e(dD,vLo),e(E1,FLo),e(q,TLo),e(q,C1),e(C1,cce),e(cce,MLo),e(C1,ELo),e(C1,cD),e(cD,CLo),e(C1,wLo),e(q,ALo),e(q,w1),e(w1,fce),e(fce,yLo),e(w1,LLo),e(w1,fD),e(fD,xLo),e(w1,$Lo),e(q,kLo),e(q,A1),e(A1,mce),e(mce,SLo),e(A1,RLo),e(A1,mD),e(mD,BLo),e(A1,PLo),e(q,ILo),e(q,y1),e(y1,gce),e(gce,qLo),e(y1,NLo),e(y1,gD),e(gD,jLo),e(y1,DLo),e(q,GLo),e(q,L1),e(L1,hce),e(hce,OLo),e(L1,VLo),e(L1,hD),e(hD,XLo),e(L1,zLo),e(q,QLo),e(q,x1),e(x1,pce),e(pce,WLo),e(x1,HLo),e(x1,pD),e(pD,ULo),e(x1,JLo),e(q,YLo),e(q,$1),e($1,uce),e(uce,KLo),e($1,ZLo),e($1,uD),e(uD,e8o),e($1,o8o),e(q,r8o),e(q,k1),e(k1,_ce),e(_ce,t8o),e(k1,a8o),e(k1,_D),e(_D,n8o),e(k1,s8o),e(q,l8o),e(q,S1),e(S1,bce),e(bce,i8o),e(S1,d8o),e(S1,bD),e(bD,c8o),e(S1,f8o),e(q,m8o),e(q,R1),e(R1,vce),e(vce,g8o),e(R1,h8o),e(R1,vD),e(vD,p8o),e(R1,u8o),e(q,_8o),e(q,B1),e(B1,Fce),e(Fce,b8o),e(B1,v8o),e(B1,FD),e(FD,F8o),e(B1,T8o),e(q,M8o),e(q,P1),e(P1,Tce),e(Tce,E8o),e(P1,C8o),e(P1,TD),e(TD,w8o),e(P1,A8o),e(q,y8o),e(q,I1),e(I1,Mce),e(Mce,L8o),e(I1,x8o),e(I1,MD),e(MD,$8o),e(I1,k8o),e(q,S8o),e(q,q1),e(q1,Ece),e(Ece,R8o),e(q1,B8o),e(q1,ED),e(ED,P8o),e(q1,I8o),e(q,q8o),e(q,N1),e(N1,Cce),e(Cce,N8o),e(N1,j8o),e(N1,CD),e(CD,D8o),e(N1,G8o),e(q,O8o),e(q,j1),e(j1,wce),e(wce,V8o),e(j1,X8o),e(j1,wD),e(wD,z8o),e(j1,Q8o),e(q,W8o),e(q,D1),e(D1,Ace),e(Ace,H8o),e(D1,U8o),e(D1,AD),e(AD,J8o),e(D1,Y8o),e(q,K8o),e(q,G1),e(G1,yce),e(yce,Z8o),e(G1,exo),e(G1,yD),e(yD,oxo),e(G1,rxo),e(q,txo),e(q,O1),e(O1,Lce),e(Lce,axo),e(O1,nxo),e(O1,LD),e(LD,sxo),e(O1,lxo),e(q,ixo),e(q,V1),e(V1,xce),e(xce,dxo),e(V1,cxo),e(V1,xD),e(xD,fxo),e(V1,mxo),e(q,gxo),e(q,X1),e(X1,$ce),e($ce,hxo),e(X1,pxo),e(X1,$D),e($D,uxo),e(X1,_xo),e(q,bxo),e(q,z1),e(z1,kce),e(kce,vxo),e(z1,Fxo),e(z1,kD),e(kD,Txo),e(z1,Mxo),e(q,Exo),e(q,Q1),e(Q1,Sce),e(Sce,Cxo),e(Q1,wxo),e(Q1,SD),e(SD,Axo),e(Q1,yxo),e(q,Lxo),e(q,W1),e(W1,Rce),e(Rce,xxo),e(W1,$xo),e(W1,RD),e(RD,kxo),e(W1,Sxo),e(q,Rxo),e(q,H1),e(H1,Bce),e(Bce,Bxo),e(H1,Pxo),e(H1,BD),e(BD,Ixo),e(H1,qxo),e(q,Nxo),e(q,U1),e(U1,Pce),e(Pce,jxo),e(U1,Dxo),e(U1,PD),e(PD,Gxo),e(U1,Oxo),e(q,Vxo),e(q,J1),e(J1,Ice),e(Ice,Xxo),e(J1,zxo),e(J1,ID),e(ID,Qxo),e(J1,Wxo),e(q,Hxo),e(q,Y1),e(Y1,qce),e(qce,Uxo),e(Y1,Jxo),e(Y1,qD),e(qD,Yxo),e(Y1,Kxo),e(q,Zxo),e(q,K1),e(K1,Nce),e(Nce,e9o),e(K1,o9o),e(K1,ND),e(ND,r9o),e(K1,t9o),e(q,a9o),e(q,Z1),e(Z1,jce),e(jce,n9o),e(Z1,s9o),e(Z1,jD),e(jD,l9o),e(Z1,i9o),e(q,d9o),e(q,eb),e(eb,Dce),e(Dce,c9o),e(eb,f9o),e(eb,DD),e(DD,m9o),e(eb,g9o),e(q,h9o),e(q,ob),e(ob,Gce),e(Gce,p9o),e(ob,u9o),e(ob,GD),e(GD,_9o),e(ob,b9o),e(q,v9o),e(q,rb),e(rb,Oce),e(Oce,F9o),e(rb,T9o),e(rb,OD),e(OD,M9o),e(rb,E9o),e(q,C9o),e(q,tb),e(tb,Vce),e(Vce,w9o),e(tb,A9o),e(tb,VD),e(VD,y9o),e(tb,L9o),e(q,x9o),e(q,ab),e(ab,Xce),e(Xce,$9o),e(ab,k9o),e(ab,XD),e(XD,S9o),e(ab,R9o),e(q,B9o),e(q,nb),e(nb,zce),e(zce,P9o),e(nb,I9o),e(nb,zD),e(zD,q9o),e(nb,N9o),e(q,j9o),e(q,sb),e(sb,Qce),e(Qce,D9o),e(sb,G9o),e(sb,QD),e(QD,O9o),e(sb,V9o),e(q,X9o),e(q,lb),e(lb,Wce),e(Wce,z9o),e(lb,Q9o),e(lb,WD),e(WD,W9o),e(lb,H9o),e(q,U9o),e(q,ib),e(ib,Hce),e(Hce,J9o),e(ib,Y9o),e(ib,HD),e(HD,K9o),e(ib,Z9o),e(q,e$o),e(q,db),e(db,Uce),e(Uce,o$o),e(db,r$o),e(db,UD),e(UD,t$o),e(db,a$o),e(Ze,n$o),e(Ze,cb),e(cb,s$o),e(cb,Jce),e(Jce,l$o),e(cb,i$o),e(cb,Yce),e(Yce,d$o),e(Ze,c$o),M(fb,Ze,null),b(f,KPe,_),b(f,ji,_),e(ji,mb),e(mb,Kce),M(UA,Kce,null),e(ji,f$o),e(ji,Zce),e(Zce,m$o),b(f,ZPe,_),b(f,Bo,_),M(JA,Bo,null),e(Bo,g$o),e(Bo,Di),e(Di,h$o),e(Di,JD),e(JD,p$o),e(Di,u$o),e(Di,YD),e(YD,_$o),e(Di,b$o),e(Bo,v$o),e(Bo,YA),e(YA,F$o),e(YA,efe),e(efe,T$o),e(YA,M$o),e(Bo,E$o),e(Bo,lt),M(KA,lt,null),e(lt,C$o),e(lt,ofe),e(ofe,w$o),e(lt,A$o),e(lt,Gi),e(Gi,y$o),e(Gi,rfe),e(rfe,L$o),e(Gi,x$o),e(Gi,KD),e(KD,$$o),e(Gi,k$o),e(lt,S$o),M(gb,lt,null),e(Bo,R$o),e(Bo,eo),M(ZA,eo,null),e(eo,B$o),e(eo,tfe),e(tfe,P$o),e(eo,I$o),e(eo,Sa),e(Sa,q$o),e(Sa,afe),e(afe,N$o),e(Sa,j$o),e(Sa,nfe),e(nfe,D$o),e(Sa,G$o),e(Sa,sfe),e(sfe,O$o),e(Sa,V$o),e(eo,X$o),e(eo,Y),e(Y,hb),e(hb,lfe),e(lfe,z$o),e(hb,Q$o),e(hb,ZD),e(ZD,W$o),e(hb,H$o),e(Y,U$o),e(Y,pb),e(pb,ife),e(ife,J$o),e(pb,Y$o),e(pb,eG),e(eG,K$o),e(pb,Z$o),e(Y,eko),e(Y,ub),e(ub,dfe),e(dfe,oko),e(ub,rko),e(ub,oG),e(oG,tko),e(ub,ako),e(Y,nko),e(Y,_b),e(_b,cfe),e(cfe,sko),e(_b,lko),e(_b,rG),e(rG,iko),e(_b,dko),e(Y,cko),e(Y,bb),e(bb,ffe),e(ffe,fko),e(bb,mko),e(bb,tG),e(tG,gko),e(bb,hko),e(Y,pko),e(Y,vb),e(vb,mfe),e(mfe,uko),e(vb,_ko),e(vb,aG),e(aG,bko),e(vb,vko),e(Y,Fko),e(Y,Fb),e(Fb,gfe),e(gfe,Tko),e(Fb,Mko),e(Fb,nG),e(nG,Eko),e(Fb,Cko),e(Y,wko),e(Y,Tb),e(Tb,hfe),e(hfe,Ako),e(Tb,yko),e(Tb,sG),e(sG,Lko),e(Tb,xko),e(Y,$ko),e(Y,Mb),e(Mb,pfe),e(pfe,kko),e(Mb,Sko),e(Mb,lG),e(lG,Rko),e(Mb,Bko),e(Y,Pko),e(Y,Eb),e(Eb,ufe),e(ufe,Iko),e(Eb,qko),e(Eb,iG),e(iG,Nko),e(Eb,jko),e(Y,Dko),e(Y,Cb),e(Cb,_fe),e(_fe,Gko),e(Cb,Oko),e(Cb,dG),e(dG,Vko),e(Cb,Xko),e(Y,zko),e(Y,wb),e(wb,bfe),e(bfe,Qko),e(wb,Wko),e(wb,cG),e(cG,Hko),e(wb,Uko),e(Y,Jko),e(Y,Ab),e(Ab,vfe),e(vfe,Yko),e(Ab,Kko),e(Ab,fG),e(fG,Zko),e(Ab,eSo),e(Y,oSo),e(Y,yb),e(yb,Ffe),e(Ffe,rSo),e(yb,tSo),e(yb,mG),e(mG,aSo),e(yb,nSo),e(Y,sSo),e(Y,Lb),e(Lb,Tfe),e(Tfe,lSo),e(Lb,iSo),e(Lb,gG),e(gG,dSo),e(Lb,cSo),e(Y,fSo),e(Y,xb),e(xb,Mfe),e(Mfe,mSo),e(xb,gSo),e(xb,hG),e(hG,hSo),e(xb,pSo),e(Y,uSo),e(Y,$b),e($b,Efe),e(Efe,_So),e($b,bSo),e($b,pG),e(pG,vSo),e($b,FSo),e(Y,TSo),e(Y,kb),e(kb,Cfe),e(Cfe,MSo),e(kb,ESo),e(kb,uG),e(uG,CSo),e(kb,wSo),e(Y,ASo),e(Y,Sb),e(Sb,wfe),e(wfe,ySo),e(Sb,LSo),e(Sb,_G),e(_G,xSo),e(Sb,$So),e(Y,kSo),e(Y,Rb),e(Rb,Afe),e(Afe,SSo),e(Rb,RSo),e(Rb,bG),e(bG,BSo),e(Rb,PSo),e(Y,ISo),e(Y,Bb),e(Bb,yfe),e(yfe,qSo),e(Bb,NSo),e(Bb,vG),e(vG,jSo),e(Bb,DSo),e(Y,GSo),e(Y,Pb),e(Pb,Lfe),e(Lfe,OSo),e(Pb,VSo),e(Pb,FG),e(FG,XSo),e(Pb,zSo),e(Y,QSo),e(Y,Ib),e(Ib,xfe),e(xfe,WSo),e(Ib,HSo),e(Ib,TG),e(TG,USo),e(Ib,JSo),e(Y,YSo),e(Y,qb),e(qb,$fe),e($fe,KSo),e(qb,ZSo),e(qb,MG),e(MG,eRo),e(qb,oRo),e(Y,rRo),e(Y,Nb),e(Nb,kfe),e(kfe,tRo),e(Nb,aRo),e(Nb,EG),e(EG,nRo),e(Nb,sRo),e(Y,lRo),e(Y,jb),e(jb,Sfe),e(Sfe,iRo),e(jb,dRo),e(jb,CG),e(CG,cRo),e(jb,fRo),e(Y,mRo),e(Y,Db),e(Db,Rfe),e(Rfe,gRo),e(Db,hRo),e(Db,wG),e(wG,pRo),e(Db,uRo),e(Y,_Ro),e(Y,Gb),e(Gb,Bfe),e(Bfe,bRo),e(Gb,vRo),e(Gb,AG),e(AG,FRo),e(Gb,TRo),e(Y,MRo),e(Y,Ob),e(Ob,Pfe),e(Pfe,ERo),e(Ob,CRo),e(Ob,yG),e(yG,wRo),e(Ob,ARo),e(eo,yRo),e(eo,Vb),e(Vb,LRo),e(Vb,Ife),e(Ife,xRo),e(Vb,$Ro),e(Vb,qfe),e(qfe,kRo),e(eo,SRo),M(Xb,eo,null),b(f,eIe,_),b(f,Oi,_),e(Oi,zb),e(zb,Nfe),M(ey,Nfe,null),e(Oi,RRo),e(Oi,jfe),e(jfe,BRo),b(f,oIe,_),b(f,Po,_),M(oy,Po,null),e(Po,PRo),e(Po,Vi),e(Vi,IRo),e(Vi,LG),e(LG,qRo),e(Vi,NRo),e(Vi,xG),e(xG,jRo),e(Vi,DRo),e(Po,GRo),e(Po,ry),e(ry,ORo),e(ry,Dfe),e(Dfe,VRo),e(ry,XRo),e(Po,zRo),e(Po,it),M(ty,it,null),e(it,QRo),e(it,Gfe),e(Gfe,WRo),e(it,HRo),e(it,Xi),e(Xi,URo),e(Xi,Ofe),e(Ofe,JRo),e(Xi,YRo),e(Xi,$G),e($G,KRo),e(Xi,ZRo),e(it,eBo),M(Qb,it,null),e(Po,oBo),e(Po,oo),M(ay,oo,null),e(oo,rBo),e(oo,Vfe),e(Vfe,tBo),e(oo,aBo),e(oo,Ra),e(Ra,nBo),e(Ra,Xfe),e(Xfe,sBo),e(Ra,lBo),e(Ra,zfe),e(zfe,iBo),e(Ra,dBo),e(Ra,Qfe),e(Qfe,cBo),e(Ra,fBo),e(oo,mBo),e(oo,Yr),e(Yr,Wb),e(Wb,Wfe),e(Wfe,gBo),e(Wb,hBo),e(Wb,kG),e(kG,pBo),e(Wb,uBo),e(Yr,_Bo),e(Yr,Hb),e(Hb,Hfe),e(Hfe,bBo),e(Hb,vBo),e(Hb,SG),e(SG,FBo),e(Hb,TBo),e(Yr,MBo),e(Yr,Ub),e(Ub,Ufe),e(Ufe,EBo),e(Ub,CBo),e(Ub,RG),e(RG,wBo),e(Ub,ABo),e(Yr,yBo),e(Yr,Jb),e(Jb,Jfe),e(Jfe,LBo),e(Jb,xBo),e(Jb,BG),e(BG,$Bo),e(Jb,kBo),e(Yr,SBo),e(Yr,Yb),e(Yb,Yfe),e(Yfe,RBo),e(Yb,BBo),e(Yb,PG),e(PG,PBo),e(Yb,IBo),e(oo,qBo),e(oo,Kb),e(Kb,NBo),e(Kb,Kfe),e(Kfe,jBo),e(Kb,DBo),e(Kb,Zfe),e(Zfe,GBo),e(oo,OBo),M(Zb,oo,null),b(f,rIe,_),b(f,zi,_),e(zi,ev),e(ev,eme),M(ny,eme,null),e(zi,VBo),e(zi,ome),e(ome,XBo),b(f,tIe,_),b(f,Io,_),M(sy,Io,null),e(Io,zBo),e(Io,Qi),e(Qi,QBo),e(Qi,IG),e(IG,WBo),e(Qi,HBo),e(Qi,qG),e(qG,UBo),e(Qi,JBo),e(Io,YBo),e(Io,ly),e(ly,KBo),e(ly,rme),e(rme,ZBo),e(ly,ePo),e(Io,oPo),e(Io,dt),M(iy,dt,null),e(dt,rPo),e(dt,tme),e(tme,tPo),e(dt,aPo),e(dt,Wi),e(Wi,nPo),e(Wi,ame),e(ame,sPo),e(Wi,lPo),e(Wi,NG),e(NG,iPo),e(Wi,dPo),e(dt,cPo),M(ov,dt,null),e(Io,fPo),e(Io,ro),M(dy,ro,null),e(ro,mPo),e(ro,nme),e(nme,gPo),e(ro,hPo),e(ro,Ba),e(Ba,pPo),e(Ba,sme),e(sme,uPo),e(Ba,_Po),e(Ba,lme),e(lme,bPo),e(Ba,vPo),e(Ba,ime),e(ime,FPo),e(Ba,TPo),e(ro,MPo),e(ro,U),e(U,rv),e(rv,dme),e(dme,EPo),e(rv,CPo),e(rv,jG),e(jG,wPo),e(rv,APo),e(U,yPo),e(U,tv),e(tv,cme),e(cme,LPo),e(tv,xPo),e(tv,DG),e(DG,$Po),e(tv,kPo),e(U,SPo),e(U,av),e(av,fme),e(fme,RPo),e(av,BPo),e(av,GG),e(GG,PPo),e(av,IPo),e(U,qPo),e(U,nv),e(nv,mme),e(mme,NPo),e(nv,jPo),e(nv,OG),e(OG,DPo),e(nv,GPo),e(U,OPo),e(U,sv),e(sv,gme),e(gme,VPo),e(sv,XPo),e(sv,VG),e(VG,zPo),e(sv,QPo),e(U,WPo),e(U,lv),e(lv,hme),e(hme,HPo),e(lv,UPo),e(lv,XG),e(XG,JPo),e(lv,YPo),e(U,KPo),e(U,iv),e(iv,pme),e(pme,ZPo),e(iv,eIo),e(iv,zG),e(zG,oIo),e(iv,rIo),e(U,tIo),e(U,dv),e(dv,ume),e(ume,aIo),e(dv,nIo),e(dv,QG),e(QG,sIo),e(dv,lIo),e(U,iIo),e(U,cv),e(cv,_me),e(_me,dIo),e(cv,cIo),e(cv,WG),e(WG,fIo),e(cv,mIo),e(U,gIo),e(U,fv),e(fv,bme),e(bme,hIo),e(fv,pIo),e(fv,HG),e(HG,uIo),e(fv,_Io),e(U,bIo),e(U,mv),e(mv,vme),e(vme,vIo),e(mv,FIo),e(mv,UG),e(UG,TIo),e(mv,MIo),e(U,EIo),e(U,gv),e(gv,Fme),e(Fme,CIo),e(gv,wIo),e(gv,JG),e(JG,AIo),e(gv,yIo),e(U,LIo),e(U,hv),e(hv,Tme),e(Tme,xIo),e(hv,$Io),e(hv,YG),e(YG,kIo),e(hv,SIo),e(U,RIo),e(U,pv),e(pv,Mme),e(Mme,BIo),e(pv,PIo),e(pv,KG),e(KG,IIo),e(pv,qIo),e(U,NIo),e(U,uv),e(uv,Eme),e(Eme,jIo),e(uv,DIo),e(uv,ZG),e(ZG,GIo),e(uv,OIo),e(U,VIo),e(U,_v),e(_v,Cme),e(Cme,XIo),e(_v,zIo),e(_v,eO),e(eO,QIo),e(_v,WIo),e(U,HIo),e(U,bv),e(bv,wme),e(wme,UIo),e(bv,JIo),e(bv,oO),e(oO,YIo),e(bv,KIo),e(U,ZIo),e(U,vv),e(vv,Ame),e(Ame,eqo),e(vv,oqo),e(vv,rO),e(rO,rqo),e(vv,tqo),e(U,aqo),e(U,Fv),e(Fv,yme),e(yme,nqo),e(Fv,sqo),e(Fv,tO),e(tO,lqo),e(Fv,iqo),e(U,dqo),e(U,Tv),e(Tv,Lme),e(Lme,cqo),e(Tv,fqo),e(Tv,aO),e(aO,mqo),e(Tv,gqo),e(U,hqo),e(U,Mv),e(Mv,xme),e(xme,pqo),e(Mv,uqo),e(Mv,nO),e(nO,_qo),e(Mv,bqo),e(U,vqo),e(U,Ev),e(Ev,$me),e($me,Fqo),e(Ev,Tqo),e(Ev,sO),e(sO,Mqo),e(Ev,Eqo),e(U,Cqo),e(U,Cv),e(Cv,kme),e(kme,wqo),e(Cv,Aqo),e(Cv,lO),e(lO,yqo),e(Cv,Lqo),e(U,xqo),e(U,wv),e(wv,Sme),e(Sme,$qo),e(wv,kqo),e(wv,iO),e(iO,Sqo),e(wv,Rqo),e(U,Bqo),e(U,Av),e(Av,Rme),e(Rme,Pqo),e(Av,Iqo),e(Av,dO),e(dO,qqo),e(Av,Nqo),e(U,jqo),e(U,yv),e(yv,Bme),e(Bme,Dqo),e(yv,Gqo),e(yv,cO),e(cO,Oqo),e(yv,Vqo),e(U,Xqo),e(U,Lv),e(Lv,Pme),e(Pme,zqo),e(Lv,Qqo),e(Lv,fO),e(fO,Wqo),e(Lv,Hqo),e(U,Uqo),e(U,xv),e(xv,Ime),e(Ime,Jqo),e(xv,Yqo),e(xv,mO),e(mO,Kqo),e(xv,Zqo),e(U,eNo),e(U,$v),e($v,qme),e(qme,oNo),e($v,rNo),e($v,gO),e(gO,tNo),e($v,aNo),e(U,nNo),e(U,kv),e(kv,Nme),e(Nme,sNo),e(kv,lNo),e(kv,hO),e(hO,iNo),e(kv,dNo),e(U,cNo),e(U,Sv),e(Sv,jme),e(jme,fNo),e(Sv,mNo),e(Sv,pO),e(pO,gNo),e(Sv,hNo),e(U,pNo),e(U,Rv),e(Rv,Dme),e(Dme,uNo),e(Rv,_No),e(Rv,uO),e(uO,bNo),e(Rv,vNo),e(U,FNo),e(U,Bv),e(Bv,Gme),e(Gme,TNo),e(Bv,MNo),e(Bv,_O),e(_O,ENo),e(Bv,CNo),e(ro,wNo),e(ro,Pv),e(Pv,ANo),e(Pv,Ome),e(Ome,yNo),e(Pv,LNo),e(Pv,Vme),e(Vme,xNo),e(ro,$No),M(Iv,ro,null),b(f,aIe,_),b(f,Hi,_),e(Hi,qv),e(qv,Xme),M(cy,Xme,null),e(Hi,kNo),e(Hi,zme),e(zme,SNo),b(f,nIe,_),b(f,qo,_),M(fy,qo,null),e(qo,RNo),e(qo,Ui),e(Ui,BNo),e(Ui,bO),e(bO,PNo),e(Ui,INo),e(Ui,vO),e(vO,qNo),e(Ui,NNo),e(qo,jNo),e(qo,my),e(my,DNo),e(my,Qme),e(Qme,GNo),e(my,ONo),e(qo,VNo),e(qo,ct),M(gy,ct,null),e(ct,XNo),e(ct,Wme),e(Wme,zNo),e(ct,QNo),e(ct,Ji),e(Ji,WNo),e(Ji,Hme),e(Hme,HNo),e(Ji,UNo),e(Ji,FO),e(FO,JNo),e(Ji,YNo),e(ct,KNo),M(Nv,ct,null),e(qo,ZNo),e(qo,to),M(hy,to,null),e(to,ejo),e(to,Ume),e(Ume,ojo),e(to,rjo),e(to,Pa),e(Pa,tjo),e(Pa,Jme),e(Jme,ajo),e(Pa,njo),e(Pa,Yme),e(Yme,sjo),e(Pa,ljo),e(Pa,Kme),e(Kme,ijo),e(Pa,djo),e(to,cjo),e(to,O),e(O,jv),e(jv,Zme),e(Zme,fjo),e(jv,mjo),e(jv,TO),e(TO,gjo),e(jv,hjo),e(O,pjo),e(O,Dv),e(Dv,ege),e(ege,ujo),e(Dv,_jo),e(Dv,MO),e(MO,bjo),e(Dv,vjo),e(O,Fjo),e(O,Gv),e(Gv,oge),e(oge,Tjo),e(Gv,Mjo),e(Gv,EO),e(EO,Ejo),e(Gv,Cjo),e(O,wjo),e(O,Ov),e(Ov,rge),e(rge,Ajo),e(Ov,yjo),e(Ov,CO),e(CO,Ljo),e(Ov,xjo),e(O,$jo),e(O,Vv),e(Vv,tge),e(tge,kjo),e(Vv,Sjo),e(Vv,wO),e(wO,Rjo),e(Vv,Bjo),e(O,Pjo),e(O,Xv),e(Xv,age),e(age,Ijo),e(Xv,qjo),e(Xv,AO),e(AO,Njo),e(Xv,jjo),e(O,Djo),e(O,zv),e(zv,nge),e(nge,Gjo),e(zv,Ojo),e(zv,yO),e(yO,Vjo),e(zv,Xjo),e(O,zjo),e(O,Qv),e(Qv,sge),e(sge,Qjo),e(Qv,Wjo),e(Qv,LO),e(LO,Hjo),e(Qv,Ujo),e(O,Jjo),e(O,Wv),e(Wv,lge),e(lge,Yjo),e(Wv,Kjo),e(Wv,xO),e(xO,Zjo),e(Wv,eDo),e(O,oDo),e(O,Hv),e(Hv,ige),e(ige,rDo),e(Hv,tDo),e(Hv,$O),e($O,aDo),e(Hv,nDo),e(O,sDo),e(O,Uv),e(Uv,dge),e(dge,lDo),e(Uv,iDo),e(Uv,kO),e(kO,dDo),e(Uv,cDo),e(O,fDo),e(O,Jv),e(Jv,cge),e(cge,mDo),e(Jv,gDo),e(Jv,SO),e(SO,hDo),e(Jv,pDo),e(O,uDo),e(O,Yv),e(Yv,fge),e(fge,_Do),e(Yv,bDo),e(Yv,RO),e(RO,vDo),e(Yv,FDo),e(O,TDo),e(O,Kv),e(Kv,mge),e(mge,MDo),e(Kv,EDo),e(Kv,BO),e(BO,CDo),e(Kv,wDo),e(O,ADo),e(O,Zv),e(Zv,gge),e(gge,yDo),e(Zv,LDo),e(Zv,PO),e(PO,xDo),e(Zv,$Do),e(O,kDo),e(O,eF),e(eF,hge),e(hge,SDo),e(eF,RDo),e(eF,IO),e(IO,BDo),e(eF,PDo),e(O,IDo),e(O,oF),e(oF,pge),e(pge,qDo),e(oF,NDo),e(oF,qO),e(qO,jDo),e(oF,DDo),e(O,GDo),e(O,rF),e(rF,uge),e(uge,ODo),e(rF,VDo),e(rF,NO),e(NO,XDo),e(rF,zDo),e(O,QDo),e(O,tF),e(tF,_ge),e(_ge,WDo),e(tF,HDo),e(tF,jO),e(jO,UDo),e(tF,JDo),e(O,YDo),e(O,aF),e(aF,bge),e(bge,KDo),e(aF,ZDo),e(aF,DO),e(DO,eGo),e(aF,oGo),e(O,rGo),e(O,nF),e(nF,vge),e(vge,tGo),e(nF,aGo),e(nF,GO),e(GO,nGo),e(nF,sGo),e(O,lGo),e(O,sF),e(sF,Fge),e(Fge,iGo),e(sF,dGo),e(sF,OO),e(OO,cGo),e(sF,fGo),e(O,mGo),e(O,lF),e(lF,Tge),e(Tge,gGo),e(lF,hGo),e(lF,VO),e(VO,pGo),e(lF,uGo),e(O,_Go),e(O,iF),e(iF,Mge),e(Mge,bGo),e(iF,vGo),e(iF,XO),e(XO,FGo),e(iF,TGo),e(O,MGo),e(O,dF),e(dF,Ege),e(Ege,EGo),e(dF,CGo),e(dF,zO),e(zO,wGo),e(dF,AGo),e(O,yGo),e(O,cF),e(cF,Cge),e(Cge,LGo),e(cF,xGo),e(cF,QO),e(QO,$Go),e(cF,kGo),e(O,SGo),e(O,fF),e(fF,wge),e(wge,RGo),e(fF,BGo),e(fF,WO),e(WO,PGo),e(fF,IGo),e(O,qGo),e(O,mF),e(mF,Age),e(Age,NGo),e(mF,jGo),e(mF,HO),e(HO,DGo),e(mF,GGo),e(O,OGo),e(O,gF),e(gF,yge),e(yge,VGo),e(gF,XGo),e(gF,UO),e(UO,zGo),e(gF,QGo),e(O,WGo),e(O,hF),e(hF,Lge),e(Lge,HGo),e(hF,UGo),e(hF,JO),e(JO,JGo),e(hF,YGo),e(O,KGo),e(O,pF),e(pF,xge),e(xge,ZGo),e(pF,eOo),e(pF,YO),e(YO,oOo),e(pF,rOo),e(O,tOo),e(O,uF),e(uF,$ge),e($ge,aOo),e(uF,nOo),e(uF,KO),e(KO,sOo),e(uF,lOo),e(O,iOo),e(O,_F),e(_F,kge),e(kge,dOo),e(_F,cOo),e(_F,ZO),e(ZO,fOo),e(_F,mOo),e(O,gOo),e(O,bF),e(bF,Sge),e(Sge,hOo),e(bF,pOo),e(bF,eV),e(eV,uOo),e(bF,_Oo),e(O,bOo),e(O,vF),e(vF,Rge),e(Rge,vOo),e(vF,FOo),e(vF,oV),e(oV,TOo),e(vF,MOo),e(O,EOo),e(O,FF),e(FF,Bge),e(Bge,COo),e(FF,wOo),e(FF,rV),e(rV,AOo),e(FF,yOo),e(O,LOo),e(O,TF),e(TF,Pge),e(Pge,xOo),e(TF,$Oo),e(TF,tV),e(tV,kOo),e(TF,SOo),e(O,ROo),e(O,MF),e(MF,Ige),e(Ige,BOo),e(MF,POo),e(MF,aV),e(aV,IOo),e(MF,qOo),e(O,NOo),e(O,EF),e(EF,qge),e(qge,jOo),e(EF,DOo),e(EF,nV),e(nV,GOo),e(EF,OOo),e(to,VOo),e(to,CF),e(CF,XOo),e(CF,Nge),e(Nge,zOo),e(CF,QOo),e(CF,jge),e(jge,WOo),e(to,HOo),M(wF,to,null),b(f,sIe,_),b(f,Yi,_),e(Yi,AF),e(AF,Dge),M(py,Dge,null),e(Yi,UOo),e(Yi,Gge),e(Gge,JOo),b(f,lIe,_),b(f,No,_),M(uy,No,null),e(No,YOo),e(No,Ki),e(Ki,KOo),e(Ki,sV),e(sV,ZOo),e(Ki,eVo),e(Ki,lV),e(lV,oVo),e(Ki,rVo),e(No,tVo),e(No,_y),e(_y,aVo),e(_y,Oge),e(Oge,nVo),e(_y,sVo),e(No,lVo),e(No,ft),M(by,ft,null),e(ft,iVo),e(ft,Vge),e(Vge,dVo),e(ft,cVo),e(ft,Zi),e(Zi,fVo),e(Zi,Xge),e(Xge,mVo),e(Zi,gVo),e(Zi,iV),e(iV,hVo),e(Zi,pVo),e(ft,uVo),M(yF,ft,null),e(No,_Vo),e(No,ao),M(vy,ao,null),e(ao,bVo),e(ao,zge),e(zge,vVo),e(ao,FVo),e(ao,Ia),e(Ia,TVo),e(Ia,Qge),e(Qge,MVo),e(Ia,EVo),e(Ia,Wge),e(Wge,CVo),e(Ia,wVo),e(Ia,Hge),e(Hge,AVo),e(Ia,yVo),e(ao,LVo),e(ao,Uge),e(Uge,LF),e(LF,Jge),e(Jge,xVo),e(LF,$Vo),e(LF,dV),e(dV,kVo),e(LF,SVo),e(ao,RVo),e(ao,xF),e(xF,BVo),e(xF,Yge),e(Yge,PVo),e(xF,IVo),e(xF,Kge),e(Kge,qVo),e(ao,NVo),M($F,ao,null),b(f,iIe,_),b(f,ed,_),e(ed,kF),e(kF,Zge),M(Fy,Zge,null),e(ed,jVo),e(ed,ehe),e(ehe,DVo),b(f,dIe,_),b(f,jo,_),M(Ty,jo,null),e(jo,GVo),e(jo,od),e(od,OVo),e(od,cV),e(cV,VVo),e(od,XVo),e(od,fV),e(fV,zVo),e(od,QVo),e(jo,WVo),e(jo,My),e(My,HVo),e(My,ohe),e(ohe,UVo),e(My,JVo),e(jo,YVo),e(jo,mt),M(Ey,mt,null),e(mt,KVo),e(mt,rhe),e(rhe,ZVo),e(mt,eXo),e(mt,rd),e(rd,oXo),e(rd,the),e(the,rXo),e(rd,tXo),e(rd,mV),e(mV,aXo),e(rd,nXo),e(mt,sXo),M(SF,mt,null),e(jo,lXo),e(jo,no),M(Cy,no,null),e(no,iXo),e(no,ahe),e(ahe,dXo),e(no,cXo),e(no,qa),e(qa,fXo),e(qa,nhe),e(nhe,mXo),e(qa,gXo),e(qa,she),e(she,hXo),e(qa,pXo),e(qa,lhe),e(lhe,uXo),e(qa,_Xo),e(no,bXo),e(no,Fe),e(Fe,RF),e(RF,ihe),e(ihe,vXo),e(RF,FXo),e(RF,gV),e(gV,TXo),e(RF,MXo),e(Fe,EXo),e(Fe,BF),e(BF,dhe),e(dhe,CXo),e(BF,wXo),e(BF,hV),e(hV,AXo),e(BF,yXo),e(Fe,LXo),e(Fe,PF),e(PF,che),e(che,xXo),e(PF,$Xo),e(PF,pV),e(pV,kXo),e(PF,SXo),e(Fe,RXo),e(Fe,Rs),e(Rs,fhe),e(fhe,BXo),e(Rs,PXo),e(Rs,uV),e(uV,IXo),e(Rs,qXo),e(Rs,_V),e(_V,NXo),e(Rs,jXo),e(Fe,DXo),e(Fe,IF),e(IF,mhe),e(mhe,GXo),e(IF,OXo),e(IF,bV),e(bV,VXo),e(IF,XXo),e(Fe,zXo),e(Fe,gt),e(gt,ghe),e(ghe,QXo),e(gt,WXo),e(gt,vV),e(vV,HXo),e(gt,UXo),e(gt,FV),e(FV,JXo),e(gt,YXo),e(gt,TV),e(TV,KXo),e(gt,ZXo),e(Fe,ezo),e(Fe,qF),e(qF,hhe),e(hhe,ozo),e(qF,rzo),e(qF,MV),e(MV,tzo),e(qF,azo),e(Fe,nzo),e(Fe,NF),e(NF,phe),e(phe,szo),e(NF,lzo),e(NF,EV),e(EV,izo),e(NF,dzo),e(Fe,czo),e(Fe,jF),e(jF,uhe),e(uhe,fzo),e(jF,mzo),e(jF,CV),e(CV,gzo),e(jF,hzo),e(Fe,pzo),e(Fe,DF),e(DF,_he),e(_he,uzo),e(DF,_zo),e(DF,wV),e(wV,bzo),e(DF,vzo),e(Fe,Fzo),e(Fe,GF),e(GF,bhe),e(bhe,Tzo),e(GF,Mzo),e(GF,AV),e(AV,Ezo),e(GF,Czo),e(Fe,wzo),e(Fe,OF),e(OF,vhe),e(vhe,Azo),e(OF,yzo),e(OF,yV),e(yV,Lzo),e(OF,xzo),e(Fe,$zo),e(Fe,VF),e(VF,Fhe),e(Fhe,kzo),e(VF,Szo),e(VF,LV),e(LV,Rzo),e(VF,Bzo),e(no,Pzo),e(no,XF),e(XF,Izo),e(XF,The),e(The,qzo),e(XF,Nzo),e(XF,Mhe),e(Mhe,jzo),e(no,Dzo),M(zF,no,null),b(f,cIe,_),b(f,td,_),e(td,QF),e(QF,Ehe),M(wy,Ehe,null),e(td,Gzo),e(td,Che),e(Che,Ozo),b(f,fIe,_),b(f,Do,_),M(Ay,Do,null),e(Do,Vzo),e(Do,ad),e(ad,Xzo),e(ad,xV),e(xV,zzo),e(ad,Qzo),e(ad,$V),e($V,Wzo),e(ad,Hzo),e(Do,Uzo),e(Do,yy),e(yy,Jzo),e(yy,whe),e(whe,Yzo),e(yy,Kzo),e(Do,Zzo),e(Do,ht),M(Ly,ht,null),e(ht,eQo),e(ht,Ahe),e(Ahe,oQo),e(ht,rQo),e(ht,nd),e(nd,tQo),e(nd,yhe),e(yhe,aQo),e(nd,nQo),e(nd,kV),e(kV,sQo),e(nd,lQo),e(ht,iQo),M(WF,ht,null),e(Do,dQo),e(Do,so),M(xy,so,null),e(so,cQo),e(so,Lhe),e(Lhe,fQo),e(so,mQo),e(so,Na),e(Na,gQo),e(Na,xhe),e(xhe,hQo),e(Na,pQo),e(Na,$he),e($he,uQo),e(Na,_Qo),e(Na,khe),e(khe,bQo),e(Na,vQo),e(so,FQo),e(so,She),e(She,HF),e(HF,Rhe),e(Rhe,TQo),e(HF,MQo),e(HF,SV),e(SV,EQo),e(HF,CQo),e(so,wQo),e(so,UF),e(UF,AQo),e(UF,Bhe),e(Bhe,yQo),e(UF,LQo),e(UF,Phe),e(Phe,xQo),e(so,$Qo),M(JF,so,null),b(f,mIe,_),b(f,sd,_),e(sd,YF),e(YF,Ihe),M($y,Ihe,null),e(sd,kQo),e(sd,qhe),e(qhe,SQo),b(f,gIe,_),b(f,Go,_),M(ky,Go,null),e(Go,RQo),e(Go,ld),e(ld,BQo),e(ld,RV),e(RV,PQo),e(ld,IQo),e(ld,BV),e(BV,qQo),e(ld,NQo),e(Go,jQo),e(Go,Sy),e(Sy,DQo),e(Sy,Nhe),e(Nhe,GQo),e(Sy,OQo),e(Go,VQo),e(Go,pt),M(Ry,pt,null),e(pt,XQo),e(pt,jhe),e(jhe,zQo),e(pt,QQo),e(pt,id),e(id,WQo),e(id,Dhe),e(Dhe,HQo),e(id,UQo),e(id,PV),e(PV,JQo),e(id,YQo),e(pt,KQo),M(KF,pt,null),e(Go,ZQo),e(Go,lo),M(By,lo,null),e(lo,eWo),e(lo,Ghe),e(Ghe,oWo),e(lo,rWo),e(lo,ja),e(ja,tWo),e(ja,Ohe),e(Ohe,aWo),e(ja,nWo),e(ja,Vhe),e(Vhe,sWo),e(ja,lWo),e(ja,Xhe),e(Xhe,iWo),e(ja,dWo),e(lo,cWo),e(lo,Ne),e(Ne,ZF),e(ZF,zhe),e(zhe,fWo),e(ZF,mWo),e(ZF,IV),e(IV,gWo),e(ZF,hWo),e(Ne,pWo),e(Ne,e0),e(e0,Qhe),e(Qhe,uWo),e(e0,_Wo),e(e0,qV),e(qV,bWo),e(e0,vWo),e(Ne,FWo),e(Ne,o0),e(o0,Whe),e(Whe,TWo),e(o0,MWo),e(o0,NV),e(NV,EWo),e(o0,CWo),e(Ne,wWo),e(Ne,r0),e(r0,Hhe),e(Hhe,AWo),e(r0,yWo),e(r0,jV),e(jV,LWo),e(r0,xWo),e(Ne,$Wo),e(Ne,t0),e(t0,Uhe),e(Uhe,kWo),e(t0,SWo),e(t0,DV),e(DV,RWo),e(t0,BWo),e(Ne,PWo),e(Ne,a0),e(a0,Jhe),e(Jhe,IWo),e(a0,qWo),e(a0,GV),e(GV,NWo),e(a0,jWo),e(Ne,DWo),e(Ne,n0),e(n0,Yhe),e(Yhe,GWo),e(n0,OWo),e(n0,OV),e(OV,VWo),e(n0,XWo),e(Ne,zWo),e(Ne,s0),e(s0,Khe),e(Khe,QWo),e(s0,WWo),e(s0,VV),e(VV,HWo),e(s0,UWo),e(lo,JWo),e(lo,l0),e(l0,YWo),e(l0,Zhe),e(Zhe,KWo),e(l0,ZWo),e(l0,epe),e(epe,eHo),e(lo,oHo),M(i0,lo,null),b(f,hIe,_),b(f,dd,_),e(dd,d0),e(d0,ope),M(Py,ope,null),e(dd,rHo),e(dd,rpe),e(rpe,tHo),b(f,pIe,_),b(f,Oo,_),M(Iy,Oo,null),e(Oo,aHo),e(Oo,cd),e(cd,nHo),e(cd,XV),e(XV,sHo),e(cd,lHo),e(cd,zV),e(zV,iHo),e(cd,dHo),e(Oo,cHo),e(Oo,qy),e(qy,fHo),e(qy,tpe),e(tpe,mHo),e(qy,gHo),e(Oo,hHo),e(Oo,ut),M(Ny,ut,null),e(ut,pHo),e(ut,ape),e(ape,uHo),e(ut,_Ho),e(ut,fd),e(fd,bHo),e(fd,npe),e(npe,vHo),e(fd,FHo),e(fd,QV),e(QV,THo),e(fd,MHo),e(ut,EHo),M(c0,ut,null),e(Oo,CHo),e(Oo,io),M(jy,io,null),e(io,wHo),e(io,spe),e(spe,AHo),e(io,yHo),e(io,Da),e(Da,LHo),e(Da,lpe),e(lpe,xHo),e(Da,$Ho),e(Da,ipe),e(ipe,kHo),e(Da,SHo),e(Da,dpe),e(dpe,RHo),e(Da,BHo),e(io,PHo),e(io,Ga),e(Ga,f0),e(f0,cpe),e(cpe,IHo),e(f0,qHo),e(f0,WV),e(WV,NHo),e(f0,jHo),e(Ga,DHo),e(Ga,m0),e(m0,fpe),e(fpe,GHo),e(m0,OHo),e(m0,HV),e(HV,VHo),e(m0,XHo),e(Ga,zHo),e(Ga,g0),e(g0,mpe),e(mpe,QHo),e(g0,WHo),e(g0,UV),e(UV,HHo),e(g0,UHo),e(Ga,JHo),e(Ga,h0),e(h0,gpe),e(gpe,YHo),e(h0,KHo),e(h0,JV),e(JV,ZHo),e(h0,eUo),e(io,oUo),e(io,p0),e(p0,rUo),e(p0,hpe),e(hpe,tUo),e(p0,aUo),e(p0,ppe),e(ppe,nUo),e(io,sUo),M(u0,io,null),b(f,uIe,_),b(f,md,_),e(md,_0),e(_0,upe),M(Dy,upe,null),e(md,lUo),e(md,_pe),e(_pe,iUo),b(f,_Ie,_),b(f,Vo,_),M(Gy,Vo,null),e(Vo,dUo),e(Vo,gd),e(gd,cUo),e(gd,YV),e(YV,fUo),e(gd,mUo),e(gd,KV),e(KV,gUo),e(gd,hUo),e(Vo,pUo),e(Vo,Oy),e(Oy,uUo),e(Oy,bpe),e(bpe,_Uo),e(Oy,bUo),e(Vo,vUo),e(Vo,_t),M(Vy,_t,null),e(_t,FUo),e(_t,vpe),e(vpe,TUo),e(_t,MUo),e(_t,hd),e(hd,EUo),e(hd,Fpe),e(Fpe,CUo),e(hd,wUo),e(hd,ZV),e(ZV,AUo),e(hd,yUo),e(_t,LUo),M(b0,_t,null),e(Vo,xUo),e(Vo,co),M(Xy,co,null),e(co,$Uo),e(co,Tpe),e(Tpe,kUo),e(co,SUo),e(co,Oa),e(Oa,RUo),e(Oa,Mpe),e(Mpe,BUo),e(Oa,PUo),e(Oa,Epe),e(Epe,IUo),e(Oa,qUo),e(Oa,Cpe),e(Cpe,NUo),e(Oa,jUo),e(co,DUo),e(co,je),e(je,v0),e(v0,wpe),e(wpe,GUo),e(v0,OUo),e(v0,eX),e(eX,VUo),e(v0,XUo),e(je,zUo),e(je,F0),e(F0,Ape),e(Ape,QUo),e(F0,WUo),e(F0,oX),e(oX,HUo),e(F0,UUo),e(je,JUo),e(je,T0),e(T0,ype),e(ype,YUo),e(T0,KUo),e(T0,rX),e(rX,ZUo),e(T0,eJo),e(je,oJo),e(je,M0),e(M0,Lpe),e(Lpe,rJo),e(M0,tJo),e(M0,tX),e(tX,aJo),e(M0,nJo),e(je,sJo),e(je,E0),e(E0,xpe),e(xpe,lJo),e(E0,iJo),e(E0,aX),e(aX,dJo),e(E0,cJo),e(je,fJo),e(je,C0),e(C0,$pe),e($pe,mJo),e(C0,gJo),e(C0,nX),e(nX,hJo),e(C0,pJo),e(je,uJo),e(je,w0),e(w0,kpe),e(kpe,_Jo),e(w0,bJo),e(w0,sX),e(sX,vJo),e(w0,FJo),e(je,TJo),e(je,A0),e(A0,Spe),e(Spe,MJo),e(A0,EJo),e(A0,lX),e(lX,CJo),e(A0,wJo),e(co,AJo),e(co,y0),e(y0,yJo),e(y0,Rpe),e(Rpe,LJo),e(y0,xJo),e(y0,Bpe),e(Bpe,$Jo),e(co,kJo),M(L0,co,null),b(f,bIe,_),b(f,pd,_),e(pd,x0),e(x0,Ppe),M(zy,Ppe,null),e(pd,SJo),e(pd,Ipe),e(Ipe,RJo),b(f,vIe,_),b(f,Xo,_),M(Qy,Xo,null),e(Xo,BJo),e(Xo,ud),e(ud,PJo),e(ud,iX),e(iX,IJo),e(ud,qJo),e(ud,dX),e(dX,NJo),e(ud,jJo),e(Xo,DJo),e(Xo,Wy),e(Wy,GJo),e(Wy,qpe),e(qpe,OJo),e(Wy,VJo),e(Xo,XJo),e(Xo,bt),M(Hy,bt,null),e(bt,zJo),e(bt,Npe),e(Npe,QJo),e(bt,WJo),e(bt,_d),e(_d,HJo),e(_d,jpe),e(jpe,UJo),e(_d,JJo),e(_d,cX),e(cX,YJo),e(_d,KJo),e(bt,ZJo),M($0,bt,null),e(Xo,eYo),e(Xo,fo),M(Uy,fo,null),e(fo,oYo),e(fo,Dpe),e(Dpe,rYo),e(fo,tYo),e(fo,Va),e(Va,aYo),e(Va,Gpe),e(Gpe,nYo),e(Va,sYo),e(Va,Ope),e(Ope,lYo),e(Va,iYo),e(Va,Vpe),e(Vpe,dYo),e(Va,cYo),e(fo,fYo),e(fo,Jy),e(Jy,k0),e(k0,Xpe),e(Xpe,mYo),e(k0,gYo),e(k0,fX),e(fX,hYo),e(k0,pYo),e(Jy,uYo),e(Jy,S0),e(S0,zpe),e(zpe,_Yo),e(S0,bYo),e(S0,mX),e(mX,vYo),e(S0,FYo),e(fo,TYo),e(fo,R0),e(R0,MYo),e(R0,Qpe),e(Qpe,EYo),e(R0,CYo),e(R0,Wpe),e(Wpe,wYo),e(fo,AYo),M(B0,fo,null),b(f,FIe,_),b(f,bd,_),e(bd,P0),e(P0,Hpe),M(Yy,Hpe,null),e(bd,yYo),e(bd,Upe),e(Upe,LYo),b(f,TIe,_),b(f,zo,_),M(Ky,zo,null),e(zo,xYo),e(zo,vd),e(vd,$Yo),e(vd,gX),e(gX,kYo),e(vd,SYo),e(vd,hX),e(hX,RYo),e(vd,BYo),e(zo,PYo),e(zo,Zy),e(Zy,IYo),e(Zy,Jpe),e(Jpe,qYo),e(Zy,NYo),e(zo,jYo),e(zo,vt),M(eL,vt,null),e(vt,DYo),e(vt,Ype),e(Ype,GYo),e(vt,OYo),e(vt,Fd),e(Fd,VYo),e(Fd,Kpe),e(Kpe,XYo),e(Fd,zYo),e(Fd,pX),e(pX,QYo),e(Fd,WYo),e(vt,HYo),M(I0,vt,null),e(zo,UYo),e(zo,mo),M(oL,mo,null),e(mo,JYo),e(mo,Zpe),e(Zpe,YYo),e(mo,KYo),e(mo,Xa),e(Xa,ZYo),e(Xa,eue),e(eue,eKo),e(Xa,oKo),e(Xa,oue),e(oue,rKo),e(Xa,tKo),e(Xa,rue),e(rue,aKo),e(Xa,nKo),e(mo,sKo),e(mo,za),e(za,q0),e(q0,tue),e(tue,lKo),e(q0,iKo),e(q0,uX),e(uX,dKo),e(q0,cKo),e(za,fKo),e(za,N0),e(N0,aue),e(aue,mKo),e(N0,gKo),e(N0,_X),e(_X,hKo),e(N0,pKo),e(za,uKo),e(za,j0),e(j0,nue),e(nue,_Ko),e(j0,bKo),e(j0,bX),e(bX,vKo),e(j0,FKo),e(za,TKo),e(za,D0),e(D0,sue),e(sue,MKo),e(D0,EKo),e(D0,vX),e(vX,CKo),e(D0,wKo),e(mo,AKo),e(mo,G0),e(G0,yKo),e(G0,lue),e(lue,LKo),e(G0,xKo),e(G0,iue),e(iue,$Ko),e(mo,kKo),M(O0,mo,null),b(f,MIe,_),b(f,Td,_),e(Td,V0),e(V0,due),M(rL,due,null),e(Td,SKo),e(Td,cue),e(cue,RKo),b(f,EIe,_),b(f,Qo,_),M(tL,Qo,null),e(Qo,BKo),e(Qo,Md),e(Md,PKo),e(Md,FX),e(FX,IKo),e(Md,qKo),e(Md,TX),e(TX,NKo),e(Md,jKo),e(Qo,DKo),e(Qo,aL),e(aL,GKo),e(aL,fue),e(fue,OKo),e(aL,VKo),e(Qo,XKo),e(Qo,Ft),M(nL,Ft,null),e(Ft,zKo),e(Ft,mue),e(mue,QKo),e(Ft,WKo),e(Ft,Ed),e(Ed,HKo),e(Ed,gue),e(gue,UKo),e(Ed,JKo),e(Ed,MX),e(MX,YKo),e(Ed,KKo),e(Ft,ZKo),M(X0,Ft,null),e(Qo,eZo),e(Qo,go),M(sL,go,null),e(go,oZo),e(go,hue),e(hue,rZo),e(go,tZo),e(go,Qa),e(Qa,aZo),e(Qa,pue),e(pue,nZo),e(Qa,sZo),e(Qa,uue),e(uue,lZo),e(Qa,iZo),e(Qa,_ue),e(_ue,dZo),e(Qa,cZo),e(go,fZo),e(go,Cd),e(Cd,z0),e(z0,bue),e(bue,mZo),e(z0,gZo),e(z0,EX),e(EX,hZo),e(z0,pZo),e(Cd,uZo),e(Cd,Q0),e(Q0,vue),e(vue,_Zo),e(Q0,bZo),e(Q0,CX),e(CX,vZo),e(Q0,FZo),e(Cd,TZo),e(Cd,W0),e(W0,Fue),e(Fue,MZo),e(W0,EZo),e(W0,wX),e(wX,CZo),e(W0,wZo),e(go,AZo),e(go,H0),e(H0,yZo),e(H0,Tue),e(Tue,LZo),e(H0,xZo),e(H0,Mue),e(Mue,$Zo),e(go,kZo),M(U0,go,null),b(f,CIe,_),b(f,wd,_),e(wd,J0),e(J0,Eue),M(lL,Eue,null),e(wd,SZo),e(wd,Cue),e(Cue,RZo),b(f,wIe,_),b(f,Wo,_),M(iL,Wo,null),e(Wo,BZo),e(Wo,Ad),e(Ad,PZo),e(Ad,AX),e(AX,IZo),e(Ad,qZo),e(Ad,yX),e(yX,NZo),e(Ad,jZo),e(Wo,DZo),e(Wo,dL),e(dL,GZo),e(dL,wue),e(wue,OZo),e(dL,VZo),e(Wo,XZo),e(Wo,Tt),M(cL,Tt,null),e(Tt,zZo),e(Tt,Aue),e(Aue,QZo),e(Tt,WZo),e(Tt,yd),e(yd,HZo),e(yd,yue),e(yue,UZo),e(yd,JZo),e(yd,LX),e(LX,YZo),e(yd,KZo),e(Tt,ZZo),M(Y0,Tt,null),e(Wo,eer),e(Wo,ho),M(fL,ho,null),e(ho,oer),e(ho,Lue),e(Lue,rer),e(ho,ter),e(ho,Wa),e(Wa,aer),e(Wa,xue),e(xue,ner),e(Wa,ser),e(Wa,$ue),e($ue,ler),e(Wa,ier),e(Wa,kue),e(kue,der),e(Wa,cer),e(ho,fer),e(ho,mL),e(mL,K0),e(K0,Sue),e(Sue,mer),e(K0,ger),e(K0,xX),e(xX,her),e(K0,per),e(mL,uer),e(mL,Z0),e(Z0,Rue),e(Rue,_er),e(Z0,ber),e(Z0,$X),e($X,ver),e(Z0,Fer),e(ho,Ter),e(ho,e6),e(e6,Mer),e(e6,Bue),e(Bue,Eer),e(e6,Cer),e(e6,Pue),e(Pue,wer),e(ho,Aer),M(o6,ho,null),b(f,AIe,_),b(f,Ld,_),e(Ld,r6),e(r6,Iue),M(gL,Iue,null),e(Ld,yer),e(Ld,que),e(que,Ler),b(f,yIe,_),b(f,Ho,_),M(hL,Ho,null),e(Ho,xer),e(Ho,xd),e(xd,$er),e(xd,kX),e(kX,ker),e(xd,Ser),e(xd,SX),e(SX,Rer),e(xd,Ber),e(Ho,Per),e(Ho,pL),e(pL,Ier),e(pL,Nue),e(Nue,qer),e(pL,Ner),e(Ho,jer),e(Ho,Mt),M(uL,Mt,null),e(Mt,Der),e(Mt,jue),e(jue,Ger),e(Mt,Oer),e(Mt,$d),e($d,Ver),e($d,Due),e(Due,Xer),e($d,zer),e($d,RX),e(RX,Qer),e($d,Wer),e(Mt,Her),M(t6,Mt,null),e(Ho,Uer),e(Ho,po),M(_L,po,null),e(po,Jer),e(po,Gue),e(Gue,Yer),e(po,Ker),e(po,Ha),e(Ha,Zer),e(Ha,Oue),e(Oue,eor),e(Ha,oor),e(Ha,Vue),e(Vue,ror),e(Ha,tor),e(Ha,Xue),e(Xue,aor),e(Ha,nor),e(po,sor),e(po,zue),e(zue,a6),e(a6,Que),e(Que,lor),e(a6,ior),e(a6,BX),e(BX,dor),e(a6,cor),e(po,mor),e(po,n6),e(n6,gor),e(n6,Wue),e(Wue,hor),e(n6,por),e(n6,Hue),e(Hue,uor),e(po,_or),M(s6,po,null),b(f,LIe,_),b(f,kd,_),e(kd,l6),e(l6,Uue),M(bL,Uue,null),e(kd,bor),e(kd,Jue),e(Jue,vor),b(f,xIe,_),b(f,Uo,_),M(vL,Uo,null),e(Uo,For),e(Uo,Sd),e(Sd,Tor),e(Sd,PX),e(PX,Mor),e(Sd,Eor),e(Sd,IX),e(IX,Cor),e(Sd,wor),e(Uo,Aor),e(Uo,FL),e(FL,yor),e(FL,Yue),e(Yue,Lor),e(FL,xor),e(Uo,$or),e(Uo,Et),M(TL,Et,null),e(Et,kor),e(Et,Kue),e(Kue,Sor),e(Et,Ror),e(Et,Rd),e(Rd,Bor),e(Rd,Zue),e(Zue,Por),e(Rd,Ior),e(Rd,qX),e(qX,qor),e(Rd,Nor),e(Et,jor),M(i6,Et,null),e(Uo,Dor),e(Uo,uo),M(ML,uo,null),e(uo,Gor),e(uo,e_e),e(e_e,Oor),e(uo,Vor),e(uo,Ua),e(Ua,Xor),e(Ua,o_e),e(o_e,zor),e(Ua,Qor),e(Ua,r_e),e(r_e,Wor),e(Ua,Hor),e(Ua,t_e),e(t_e,Uor),e(Ua,Jor),e(uo,Yor),e(uo,Ja),e(Ja,d6),e(d6,a_e),e(a_e,Kor),e(d6,Zor),e(d6,NX),e(NX,err),e(d6,orr),e(Ja,rrr),e(Ja,c6),e(c6,n_e),e(n_e,trr),e(c6,arr),e(c6,jX),e(jX,nrr),e(c6,srr),e(Ja,lrr),e(Ja,f6),e(f6,s_e),e(s_e,irr),e(f6,drr),e(f6,DX),e(DX,crr),e(f6,frr),e(Ja,mrr),e(Ja,m6),e(m6,l_e),e(l_e,grr),e(m6,hrr),e(m6,GX),e(GX,prr),e(m6,urr),e(uo,_rr),e(uo,g6),e(g6,brr),e(g6,i_e),e(i_e,vrr),e(g6,Frr),e(g6,d_e),e(d_e,Trr),e(uo,Mrr),M(h6,uo,null),b(f,$Ie,_),b(f,Bd,_),e(Bd,p6),e(p6,c_e),M(EL,c_e,null),e(Bd,Err),e(Bd,f_e),e(f_e,Crr),b(f,kIe,_),b(f,Jo,_),M(CL,Jo,null),e(Jo,wrr),e(Jo,Pd),e(Pd,Arr),e(Pd,OX),e(OX,yrr),e(Pd,Lrr),e(Pd,VX),e(VX,xrr),e(Pd,$rr),e(Jo,krr),e(Jo,wL),e(wL,Srr),e(wL,m_e),e(m_e,Rrr),e(wL,Brr),e(Jo,Prr),e(Jo,Ct),M(AL,Ct,null),e(Ct,Irr),e(Ct,g_e),e(g_e,qrr),e(Ct,Nrr),e(Ct,Id),e(Id,jrr),e(Id,h_e),e(h_e,Drr),e(Id,Grr),e(Id,XX),e(XX,Orr),e(Id,Vrr),e(Ct,Xrr),M(u6,Ct,null),e(Jo,zrr),e(Jo,_o),M(yL,_o,null),e(_o,Qrr),e(_o,p_e),e(p_e,Wrr),e(_o,Hrr),e(_o,Ya),e(Ya,Urr),e(Ya,u_e),e(u_e,Jrr),e(Ya,Yrr),e(Ya,__e),e(__e,Krr),e(Ya,Zrr),e(Ya,b_e),e(b_e,etr),e(Ya,otr),e(_o,rtr),e(_o,v_e),e(v_e,_6),e(_6,F_e),e(F_e,ttr),e(_6,atr),e(_6,zX),e(zX,ntr),e(_6,str),e(_o,ltr),e(_o,b6),e(b6,itr),e(b6,T_e),e(T_e,dtr),e(b6,ctr),e(b6,M_e),e(M_e,ftr),e(_o,mtr),M(v6,_o,null),b(f,SIe,_),b(f,qd,_),e(qd,F6),e(F6,E_e),M(LL,E_e,null),e(qd,gtr),e(qd,C_e),e(C_e,htr),b(f,RIe,_),b(f,Yo,_),M(xL,Yo,null),e(Yo,ptr),e(Yo,Nd),e(Nd,utr),e(Nd,QX),e(QX,_tr),e(Nd,btr),e(Nd,WX),e(WX,vtr),e(Nd,Ftr),e(Yo,Ttr),e(Yo,$L),e($L,Mtr),e($L,w_e),e(w_e,Etr),e($L,Ctr),e(Yo,wtr),e(Yo,wt),M(kL,wt,null),e(wt,Atr),e(wt,A_e),e(A_e,ytr),e(wt,Ltr),e(wt,jd),e(jd,xtr),e(jd,y_e),e(y_e,$tr),e(jd,ktr),e(jd,HX),e(HX,Str),e(jd,Rtr),e(wt,Btr),M(T6,wt,null),e(Yo,Ptr),e(Yo,wr),M(SL,wr,null),e(wr,Itr),e(wr,L_e),e(L_e,qtr),e(wr,Ntr),e(wr,Ka),e(Ka,jtr),e(Ka,x_e),e(x_e,Dtr),e(Ka,Gtr),e(Ka,$_e),e($_e,Otr),e(Ka,Vtr),e(Ka,k_e),e(k_e,Xtr),e(Ka,ztr),e(wr,Qtr),e(wr,j),e(j,M6),e(M6,S_e),e(S_e,Wtr),e(M6,Htr),e(M6,UX),e(UX,Utr),e(M6,Jtr),e(j,Ytr),e(j,E6),e(E6,R_e),e(R_e,Ktr),e(E6,Ztr),e(E6,JX),e(JX,ear),e(E6,oar),e(j,rar),e(j,C6),e(C6,B_e),e(B_e,tar),e(C6,aar),e(C6,YX),e(YX,nar),e(C6,sar),e(j,lar),e(j,w6),e(w6,P_e),e(P_e,iar),e(w6,dar),e(w6,KX),e(KX,car),e(w6,far),e(j,mar),e(j,A6),e(A6,I_e),e(I_e,gar),e(A6,har),e(A6,ZX),e(ZX,par),e(A6,uar),e(j,_ar),e(j,y6),e(y6,q_e),e(q_e,bar),e(y6,Far),e(y6,ez),e(ez,Tar),e(y6,Mar),e(j,Ear),e(j,L6),e(L6,N_e),e(N_e,Car),e(L6,war),e(L6,oz),e(oz,Aar),e(L6,yar),e(j,Lar),e(j,x6),e(x6,j_e),e(j_e,xar),e(x6,$ar),e(x6,rz),e(rz,kar),e(x6,Sar),e(j,Rar),e(j,$6),e($6,D_e),e(D_e,Bar),e($6,Par),e($6,tz),e(tz,Iar),e($6,qar),e(j,Nar),e(j,k6),e(k6,G_e),e(G_e,jar),e(k6,Dar),e(k6,az),e(az,Gar),e(k6,Oar),e(j,Var),e(j,S6),e(S6,O_e),e(O_e,Xar),e(S6,zar),e(S6,nz),e(nz,Qar),e(S6,War),e(j,Har),e(j,R6),e(R6,V_e),e(V_e,Uar),e(R6,Jar),e(R6,sz),e(sz,Yar),e(R6,Kar),e(j,Zar),e(j,B6),e(B6,X_e),e(X_e,enr),e(B6,onr),e(B6,lz),e(lz,rnr),e(B6,tnr),e(j,anr),e(j,P6),e(P6,z_e),e(z_e,nnr),e(P6,snr),e(P6,iz),e(iz,lnr),e(P6,inr),e(j,dnr),e(j,I6),e(I6,Q_e),e(Q_e,cnr),e(I6,fnr),e(I6,dz),e(dz,mnr),e(I6,gnr),e(j,hnr),e(j,q6),e(q6,W_e),e(W_e,pnr),e(q6,unr),e(q6,cz),e(cz,_nr),e(q6,bnr),e(j,vnr),e(j,N6),e(N6,H_e),e(H_e,Fnr),e(N6,Tnr),e(N6,fz),e(fz,Mnr),e(N6,Enr),e(j,Cnr),e(j,Bs),e(Bs,U_e),e(U_e,wnr),e(Bs,Anr),e(Bs,mz),e(mz,ynr),e(Bs,Lnr),e(Bs,gz),e(gz,xnr),e(Bs,$nr),e(j,knr),e(j,j6),e(j6,J_e),e(J_e,Snr),e(j6,Rnr),e(j6,hz),e(hz,Bnr),e(j6,Pnr),e(j,Inr),e(j,D6),e(D6,Y_e),e(Y_e,qnr),e(D6,Nnr),e(D6,pz),e(pz,jnr),e(D6,Dnr),e(j,Gnr),e(j,G6),e(G6,K_e),e(K_e,Onr),e(G6,Vnr),e(G6,uz),e(uz,Xnr),e(G6,znr),e(j,Qnr),e(j,O6),e(O6,Z_e),e(Z_e,Wnr),e(O6,Hnr),e(O6,_z),e(_z,Unr),e(O6,Jnr),e(j,Ynr),e(j,V6),e(V6,e2e),e(e2e,Knr),e(V6,Znr),e(V6,bz),e(bz,esr),e(V6,osr),e(j,rsr),e(j,X6),e(X6,o2e),e(o2e,tsr),e(X6,asr),e(X6,vz),e(vz,nsr),e(X6,ssr),e(j,lsr),e(j,z6),e(z6,r2e),e(r2e,isr),e(z6,dsr),e(z6,Fz),e(Fz,csr),e(z6,fsr),e(j,msr),e(j,Q6),e(Q6,t2e),e(t2e,gsr),e(Q6,hsr),e(Q6,Tz),e(Tz,psr),e(Q6,usr),e(j,_sr),e(j,W6),e(W6,a2e),e(a2e,bsr),e(W6,vsr),e(W6,Mz),e(Mz,Fsr),e(W6,Tsr),e(j,Msr),e(j,H6),e(H6,n2e),e(n2e,Esr),e(H6,Csr),e(H6,Ez),e(Ez,wsr),e(H6,Asr),e(j,ysr),e(j,U6),e(U6,s2e),e(s2e,Lsr),e(U6,xsr),e(U6,Cz),e(Cz,$sr),e(U6,ksr),e(j,Ssr),e(j,J6),e(J6,l2e),e(l2e,Rsr),e(J6,Bsr),e(J6,wz),e(wz,Psr),e(J6,Isr),e(j,qsr),e(j,Y6),e(Y6,i2e),e(i2e,Nsr),e(Y6,jsr),e(Y6,Az),e(Az,Dsr),e(Y6,Gsr),e(j,Osr),e(j,K6),e(K6,d2e),e(d2e,Vsr),e(K6,Xsr),e(K6,yz),e(yz,zsr),e(K6,Qsr),e(j,Wsr),e(j,Z6),e(Z6,c2e),e(c2e,Hsr),e(Z6,Usr),e(Z6,Lz),e(Lz,Jsr),e(Z6,Ysr),e(j,Ksr),e(j,eT),e(eT,f2e),e(f2e,Zsr),e(eT,elr),e(eT,xz),e(xz,olr),e(eT,rlr),e(j,tlr),e(j,oT),e(oT,m2e),e(m2e,alr),e(oT,nlr),e(oT,$z),e($z,slr),e(oT,llr),e(j,ilr),e(j,rT),e(rT,g2e),e(g2e,dlr),e(rT,clr),e(rT,kz),e(kz,flr),e(rT,mlr),e(j,glr),e(j,tT),e(tT,h2e),e(h2e,hlr),e(tT,plr),e(tT,Sz),e(Sz,ulr),e(tT,_lr),e(j,blr),e(j,aT),e(aT,p2e),e(p2e,vlr),e(aT,Flr),e(aT,Rz),e(Rz,Tlr),e(aT,Mlr),e(j,Elr),e(j,nT),e(nT,u2e),e(u2e,Clr),e(nT,wlr),e(nT,Bz),e(Bz,Alr),e(nT,ylr),e(j,Llr),e(j,sT),e(sT,_2e),e(_2e,xlr),e(sT,$lr),e(sT,Pz),e(Pz,klr),e(sT,Slr),e(j,Rlr),e(j,lT),e(lT,b2e),e(b2e,Blr),e(lT,Plr),e(lT,Iz),e(Iz,Ilr),e(lT,qlr),e(j,Nlr),e(j,iT),e(iT,v2e),e(v2e,jlr),e(iT,Dlr),e(iT,qz),e(qz,Glr),e(iT,Olr),e(j,Vlr),e(j,dT),e(dT,F2e),e(F2e,Xlr),e(dT,zlr),e(dT,Nz),e(Nz,Qlr),e(dT,Wlr),e(j,Hlr),e(j,cT),e(cT,T2e),e(T2e,Ulr),e(cT,Jlr),e(cT,jz),e(jz,Ylr),e(cT,Klr),e(j,Zlr),e(j,fT),e(fT,M2e),e(M2e,eir),e(fT,oir),e(fT,Dz),e(Dz,rir),e(fT,tir),e(wr,air),M(mT,wr,null),b(f,BIe,_),b(f,Dd,_),e(Dd,gT),e(gT,E2e),M(RL,E2e,null),e(Dd,nir),e(Dd,C2e),e(C2e,sir),b(f,PIe,_),b(f,Ko,_),M(BL,Ko,null),e(Ko,lir),e(Ko,Gd),e(Gd,iir),e(Gd,Gz),e(Gz,dir),e(Gd,cir),e(Gd,Oz),e(Oz,fir),e(Gd,mir),e(Ko,gir),e(Ko,PL),e(PL,hir),e(PL,w2e),e(w2e,pir),e(PL,uir),e(Ko,_ir),e(Ko,At),M(IL,At,null),e(At,bir),e(At,A2e),e(A2e,vir),e(At,Fir),e(At,Od),e(Od,Tir),e(Od,y2e),e(y2e,Mir),e(Od,Eir),e(Od,Vz),e(Vz,Cir),e(Od,wir),e(At,Air),M(hT,At,null),e(Ko,yir),e(Ko,Ar),M(qL,Ar,null),e(Ar,Lir),e(Ar,L2e),e(L2e,xir),e(Ar,$ir),e(Ar,Za),e(Za,kir),e(Za,x2e),e(x2e,Sir),e(Za,Rir),e(Za,$2e),e($2e,Bir),e(Za,Pir),e(Za,k2e),e(k2e,Iir),e(Za,qir),e(Ar,Nir),e(Ar,se),e(se,pT),e(pT,S2e),e(S2e,jir),e(pT,Dir),e(pT,Xz),e(Xz,Gir),e(pT,Oir),e(se,Vir),e(se,uT),e(uT,R2e),e(R2e,Xir),e(uT,zir),e(uT,zz),e(zz,Qir),e(uT,Wir),e(se,Hir),e(se,_T),e(_T,B2e),e(B2e,Uir),e(_T,Jir),e(_T,Qz),e(Qz,Yir),e(_T,Kir),e(se,Zir),e(se,bT),e(bT,P2e),e(P2e,edr),e(bT,odr),e(bT,Wz),e(Wz,rdr),e(bT,tdr),e(se,adr),e(se,vT),e(vT,I2e),e(I2e,ndr),e(vT,sdr),e(vT,Hz),e(Hz,ldr),e(vT,idr),e(se,ddr),e(se,FT),e(FT,q2e),e(q2e,cdr),e(FT,fdr),e(FT,Uz),e(Uz,mdr),e(FT,gdr),e(se,hdr),e(se,TT),e(TT,N2e),e(N2e,pdr),e(TT,udr),e(TT,Jz),e(Jz,_dr),e(TT,bdr),e(se,vdr),e(se,MT),e(MT,j2e),e(j2e,Fdr),e(MT,Tdr),e(MT,Yz),e(Yz,Mdr),e(MT,Edr),e(se,Cdr),e(se,ET),e(ET,D2e),e(D2e,wdr),e(ET,Adr),e(ET,Kz),e(Kz,ydr),e(ET,Ldr),e(se,xdr),e(se,CT),e(CT,G2e),e(G2e,$dr),e(CT,kdr),e(CT,Zz),e(Zz,Sdr),e(CT,Rdr),e(se,Bdr),e(se,wT),e(wT,O2e),e(O2e,Pdr),e(wT,Idr),e(wT,eQ),e(eQ,qdr),e(wT,Ndr),e(se,jdr),e(se,AT),e(AT,V2e),e(V2e,Ddr),e(AT,Gdr),e(AT,oQ),e(oQ,Odr),e(AT,Vdr),e(se,Xdr),e(se,yT),e(yT,X2e),e(X2e,zdr),e(yT,Qdr),e(yT,rQ),e(rQ,Wdr),e(yT,Hdr),e(se,Udr),e(se,LT),e(LT,z2e),e(z2e,Jdr),e(LT,Ydr),e(LT,tQ),e(tQ,Kdr),e(LT,Zdr),e(se,ecr),e(se,xT),e(xT,Q2e),e(Q2e,ocr),e(xT,rcr),e(xT,aQ),e(aQ,tcr),e(xT,acr),e(se,ncr),e(se,$T),e($T,W2e),e(W2e,scr),e($T,lcr),e($T,nQ),e(nQ,icr),e($T,dcr),e(se,ccr),e(se,kT),e(kT,H2e),e(H2e,fcr),e(kT,mcr),e(kT,sQ),e(sQ,gcr),e(kT,hcr),e(se,pcr),e(se,ST),e(ST,U2e),e(U2e,ucr),e(ST,_cr),e(ST,lQ),e(lQ,bcr),e(ST,vcr),e(se,Fcr),e(se,RT),e(RT,J2e),e(J2e,Tcr),e(RT,Mcr),e(RT,iQ),e(iQ,Ecr),e(RT,Ccr),e(se,wcr),e(se,BT),e(BT,Y2e),e(Y2e,Acr),e(BT,ycr),e(BT,dQ),e(dQ,Lcr),e(BT,xcr),e(se,$cr),e(se,PT),e(PT,K2e),e(K2e,kcr),e(PT,Scr),e(PT,cQ),e(cQ,Rcr),e(PT,Bcr),e(se,Pcr),e(se,IT),e(IT,Z2e),e(Z2e,Icr),e(IT,qcr),e(IT,fQ),e(fQ,Ncr),e(IT,jcr),e(se,Dcr),e(se,qT),e(qT,e1e),e(e1e,Gcr),e(qT,Ocr),e(qT,mQ),e(mQ,Vcr),e(qT,Xcr),e(Ar,zcr),M(NT,Ar,null),b(f,IIe,_),b(f,Vd,_),e(Vd,jT),e(jT,o1e),M(NL,o1e,null),e(Vd,Qcr),e(Vd,r1e),e(r1e,Wcr),b(f,qIe,_),b(f,Zo,_),M(jL,Zo,null),e(Zo,Hcr),e(Zo,Xd),e(Xd,Ucr),e(Xd,gQ),e(gQ,Jcr),e(Xd,Ycr),e(Xd,hQ),e(hQ,Kcr),e(Xd,Zcr),e(Zo,efr),e(Zo,DL),e(DL,ofr),e(DL,t1e),e(t1e,rfr),e(DL,tfr),e(Zo,afr),e(Zo,yt),M(GL,yt,null),e(yt,nfr),e(yt,a1e),e(a1e,sfr),e(yt,lfr),e(yt,zd),e(zd,ifr),e(zd,n1e),e(n1e,dfr),e(zd,cfr),e(zd,pQ),e(pQ,ffr),e(zd,mfr),e(yt,gfr),M(DT,yt,null),e(Zo,hfr),e(Zo,yr),M(OL,yr,null),e(yr,pfr),e(yr,s1e),e(s1e,ufr),e(yr,_fr),e(yr,en),e(en,bfr),e(en,l1e),e(l1e,vfr),e(en,Ffr),e(en,i1e),e(i1e,Tfr),e(en,Mfr),e(en,d1e),e(d1e,Efr),e(en,Cfr),e(yr,wfr),e(yr,Te),e(Te,GT),e(GT,c1e),e(c1e,Afr),e(GT,yfr),e(GT,uQ),e(uQ,Lfr),e(GT,xfr),e(Te,$fr),e(Te,OT),e(OT,f1e),e(f1e,kfr),e(OT,Sfr),e(OT,_Q),e(_Q,Rfr),e(OT,Bfr),e(Te,Pfr),e(Te,VT),e(VT,m1e),e(m1e,Ifr),e(VT,qfr),e(VT,bQ),e(bQ,Nfr),e(VT,jfr),e(Te,Dfr),e(Te,XT),e(XT,g1e),e(g1e,Gfr),e(XT,Ofr),e(XT,vQ),e(vQ,Vfr),e(XT,Xfr),e(Te,zfr),e(Te,zT),e(zT,h1e),e(h1e,Qfr),e(zT,Wfr),e(zT,FQ),e(FQ,Hfr),e(zT,Ufr),e(Te,Jfr),e(Te,QT),e(QT,p1e),e(p1e,Yfr),e(QT,Kfr),e(QT,TQ),e(TQ,Zfr),e(QT,emr),e(Te,omr),e(Te,WT),e(WT,u1e),e(u1e,rmr),e(WT,tmr),e(WT,MQ),e(MQ,amr),e(WT,nmr),e(Te,smr),e(Te,HT),e(HT,_1e),e(_1e,lmr),e(HT,imr),e(HT,EQ),e(EQ,dmr),e(HT,cmr),e(Te,fmr),e(Te,UT),e(UT,b1e),e(b1e,mmr),e(UT,gmr),e(UT,CQ),e(CQ,hmr),e(UT,pmr),e(Te,umr),e(Te,JT),e(JT,v1e),e(v1e,_mr),e(JT,bmr),e(JT,wQ),e(wQ,vmr),e(JT,Fmr),e(Te,Tmr),e(Te,YT),e(YT,F1e),e(F1e,Mmr),e(YT,Emr),e(YT,AQ),e(AQ,Cmr),e(YT,wmr),e(Te,Amr),e(Te,KT),e(KT,T1e),e(T1e,ymr),e(KT,Lmr),e(KT,yQ),e(yQ,xmr),e(KT,$mr),e(yr,kmr),M(ZT,yr,null),b(f,NIe,_),b(f,Qd,_),e(Qd,e7),e(e7,M1e),M(VL,M1e,null),e(Qd,Smr),e(Qd,E1e),e(E1e,Rmr),b(f,jIe,_),b(f,er,_),M(XL,er,null),e(er,Bmr),e(er,Wd),e(Wd,Pmr),e(Wd,LQ),e(LQ,Imr),e(Wd,qmr),e(Wd,xQ),e(xQ,Nmr),e(Wd,jmr),e(er,Dmr),e(er,zL),e(zL,Gmr),e(zL,C1e),e(C1e,Omr),e(zL,Vmr),e(er,Xmr),e(er,Lt),M(QL,Lt,null),e(Lt,zmr),e(Lt,w1e),e(w1e,Qmr),e(Lt,Wmr),e(Lt,Hd),e(Hd,Hmr),e(Hd,A1e),e(A1e,Umr),e(Hd,Jmr),e(Hd,$Q),e($Q,Ymr),e(Hd,Kmr),e(Lt,Zmr),M(o7,Lt,null),e(er,egr),e(er,Lr),M(WL,Lr,null),e(Lr,ogr),e(Lr,y1e),e(y1e,rgr),e(Lr,tgr),e(Lr,on),e(on,agr),e(on,L1e),e(L1e,ngr),e(on,sgr),e(on,x1e),e(x1e,lgr),e(on,igr),e(on,$1e),e($1e,dgr),e(on,cgr),e(Lr,fgr),e(Lr,Ud),e(Ud,r7),e(r7,k1e),e(k1e,mgr),e(r7,ggr),e(r7,kQ),e(kQ,hgr),e(r7,pgr),e(Ud,ugr),e(Ud,t7),e(t7,S1e),e(S1e,_gr),e(t7,bgr),e(t7,SQ),e(SQ,vgr),e(t7,Fgr),e(Ud,Tgr),e(Ud,a7),e(a7,R1e),e(R1e,Mgr),e(a7,Egr),e(a7,RQ),e(RQ,Cgr),e(a7,wgr),e(Lr,Agr),M(n7,Lr,null),b(f,DIe,_),b(f,Jd,_),e(Jd,s7),e(s7,B1e),M(HL,B1e,null),e(Jd,ygr),e(Jd,P1e),e(P1e,Lgr),b(f,GIe,_),b(f,or,_),M(UL,or,null),e(or,xgr),e(or,Yd),e(Yd,$gr),e(Yd,BQ),e(BQ,kgr),e(Yd,Sgr),e(Yd,PQ),e(PQ,Rgr),e(Yd,Bgr),e(or,Pgr),e(or,JL),e(JL,Igr),e(JL,I1e),e(I1e,qgr),e(JL,Ngr),e(or,jgr),e(or,xt),M(YL,xt,null),e(xt,Dgr),e(xt,q1e),e(q1e,Ggr),e(xt,Ogr),e(xt,Kd),e(Kd,Vgr),e(Kd,N1e),e(N1e,Xgr),e(Kd,zgr),e(Kd,IQ),e(IQ,Qgr),e(Kd,Wgr),e(xt,Hgr),M(l7,xt,null),e(or,Ugr),e(or,xr),M(KL,xr,null),e(xr,Jgr),e(xr,j1e),e(j1e,Ygr),e(xr,Kgr),e(xr,rn),e(rn,Zgr),e(rn,D1e),e(D1e,ehr),e(rn,ohr),e(rn,G1e),e(G1e,rhr),e(rn,thr),e(rn,O1e),e(O1e,ahr),e(rn,nhr),e(xr,shr),e(xr,ie),e(ie,i7),e(i7,V1e),e(V1e,lhr),e(i7,ihr),e(i7,qQ),e(qQ,dhr),e(i7,chr),e(ie,fhr),e(ie,d7),e(d7,X1e),e(X1e,mhr),e(d7,ghr),e(d7,NQ),e(NQ,hhr),e(d7,phr),e(ie,uhr),e(ie,c7),e(c7,z1e),e(z1e,_hr),e(c7,bhr),e(c7,jQ),e(jQ,vhr),e(c7,Fhr),e(ie,Thr),e(ie,f7),e(f7,Q1e),e(Q1e,Mhr),e(f7,Ehr),e(f7,DQ),e(DQ,Chr),e(f7,whr),e(ie,Ahr),e(ie,m7),e(m7,W1e),e(W1e,yhr),e(m7,Lhr),e(m7,GQ),e(GQ,xhr),e(m7,$hr),e(ie,khr),e(ie,g7),e(g7,H1e),e(H1e,Shr),e(g7,Rhr),e(g7,OQ),e(OQ,Bhr),e(g7,Phr),e(ie,Ihr),e(ie,h7),e(h7,U1e),e(U1e,qhr),e(h7,Nhr),e(h7,VQ),e(VQ,jhr),e(h7,Dhr),e(ie,Ghr),e(ie,p7),e(p7,J1e),e(J1e,Ohr),e(p7,Vhr),e(p7,XQ),e(XQ,Xhr),e(p7,zhr),e(ie,Qhr),e(ie,u7),e(u7,Y1e),e(Y1e,Whr),e(u7,Hhr),e(u7,zQ),e(zQ,Uhr),e(u7,Jhr),e(ie,Yhr),e(ie,_7),e(_7,K1e),e(K1e,Khr),e(_7,Zhr),e(_7,QQ),e(QQ,epr),e(_7,opr),e(ie,rpr),e(ie,b7),e(b7,Z1e),e(Z1e,tpr),e(b7,apr),e(b7,WQ),e(WQ,npr),e(b7,spr),e(ie,lpr),e(ie,v7),e(v7,ebe),e(ebe,ipr),e(v7,dpr),e(v7,HQ),e(HQ,cpr),e(v7,fpr),e(ie,mpr),e(ie,F7),e(F7,obe),e(obe,gpr),e(F7,hpr),e(F7,UQ),e(UQ,ppr),e(F7,upr),e(ie,_pr),e(ie,T7),e(T7,rbe),e(rbe,bpr),e(T7,vpr),e(T7,JQ),e(JQ,Fpr),e(T7,Tpr),e(ie,Mpr),e(ie,M7),e(M7,tbe),e(tbe,Epr),e(M7,Cpr),e(M7,YQ),e(YQ,wpr),e(M7,Apr),e(ie,ypr),e(ie,E7),e(E7,abe),e(abe,Lpr),e(E7,xpr),e(E7,KQ),e(KQ,$pr),e(E7,kpr),e(ie,Spr),e(ie,C7),e(C7,nbe),e(nbe,Rpr),e(C7,Bpr),e(C7,ZQ),e(ZQ,Ppr),e(C7,Ipr),e(ie,qpr),e(ie,w7),e(w7,sbe),e(sbe,Npr),e(w7,jpr),e(w7,eW),e(eW,Dpr),e(w7,Gpr),e(ie,Opr),e(ie,A7),e(A7,lbe),e(lbe,Vpr),e(A7,Xpr),e(A7,oW),e(oW,zpr),e(A7,Qpr),e(ie,Wpr),e(ie,y7),e(y7,ibe),e(ibe,Hpr),e(y7,Upr),e(y7,rW),e(rW,Jpr),e(y7,Ypr),e(xr,Kpr),M(L7,xr,null),b(f,OIe,_),b(f,Zd,_),e(Zd,x7),e(x7,dbe),M(ZL,dbe,null),e(Zd,Zpr),e(Zd,cbe),e(cbe,eur),b(f,VIe,_),b(f,rr,_),M(e8,rr,null),e(rr,our),e(rr,ec),e(ec,rur),e(ec,tW),e(tW,tur),e(ec,aur),e(ec,aW),e(aW,nur),e(ec,sur),e(rr,lur),e(rr,o8),e(o8,iur),e(o8,fbe),e(fbe,dur),e(o8,cur),e(rr,fur),e(rr,$t),M(r8,$t,null),e($t,mur),e($t,mbe),e(mbe,gur),e($t,hur),e($t,oc),e(oc,pur),e(oc,gbe),e(gbe,uur),e(oc,_ur),e(oc,nW),e(nW,bur),e(oc,vur),e($t,Fur),M($7,$t,null),e(rr,Tur),e(rr,$r),M(t8,$r,null),e($r,Mur),e($r,hbe),e(hbe,Eur),e($r,Cur),e($r,tn),e(tn,wur),e(tn,pbe),e(pbe,Aur),e(tn,yur),e(tn,ube),e(ube,Lur),e(tn,xur),e(tn,_be),e(_be,$ur),e(tn,kur),e($r,Sur),e($r,ye),e(ye,k7),e(k7,bbe),e(bbe,Rur),e(k7,Bur),e(k7,sW),e(sW,Pur),e(k7,Iur),e(ye,qur),e(ye,S7),e(S7,vbe),e(vbe,Nur),e(S7,jur),e(S7,lW),e(lW,Dur),e(S7,Gur),e(ye,Our),e(ye,R7),e(R7,Fbe),e(Fbe,Vur),e(R7,Xur),e(R7,iW),e(iW,zur),e(R7,Qur),e(ye,Wur),e(ye,B7),e(B7,Tbe),e(Tbe,Hur),e(B7,Uur),e(B7,dW),e(dW,Jur),e(B7,Yur),e(ye,Kur),e(ye,P7),e(P7,Mbe),e(Mbe,Zur),e(P7,e_r),e(P7,cW),e(cW,o_r),e(P7,r_r),e(ye,t_r),e(ye,I7),e(I7,Ebe),e(Ebe,a_r),e(I7,n_r),e(I7,fW),e(fW,s_r),e(I7,l_r),e(ye,i_r),e(ye,q7),e(q7,Cbe),e(Cbe,d_r),e(q7,c_r),e(q7,mW),e(mW,f_r),e(q7,m_r),e(ye,g_r),e(ye,N7),e(N7,wbe),e(wbe,h_r),e(N7,p_r),e(N7,gW),e(gW,u_r),e(N7,__r),e(ye,b_r),e(ye,j7),e(j7,Abe),e(Abe,v_r),e(j7,F_r),e(j7,hW),e(hW,T_r),e(j7,M_r),e(ye,E_r),e(ye,D7),e(D7,ybe),e(ybe,C_r),e(D7,w_r),e(D7,pW),e(pW,A_r),e(D7,y_r),e($r,L_r),M(G7,$r,null),b(f,XIe,_),b(f,rc,_),e(rc,O7),e(O7,Lbe),M(a8,Lbe,null),e(rc,x_r),e(rc,xbe),e(xbe,$_r),b(f,zIe,_),b(f,tr,_),M(n8,tr,null),e(tr,k_r),e(tr,tc),e(tc,S_r),e(tc,uW),e(uW,R_r),e(tc,B_r),e(tc,_W),e(_W,P_r),e(tc,I_r),e(tr,q_r),e(tr,s8),e(s8,N_r),e(s8,$be),e($be,j_r),e(s8,D_r),e(tr,G_r),e(tr,kt),M(l8,kt,null),e(kt,O_r),e(kt,kbe),e(kbe,V_r),e(kt,X_r),e(kt,ac),e(ac,z_r),e(ac,Sbe),e(Sbe,Q_r),e(ac,W_r),e(ac,bW),e(bW,H_r),e(ac,U_r),e(kt,J_r),M(V7,kt,null),e(tr,Y_r),e(tr,kr),M(i8,kr,null),e(kr,K_r),e(kr,Rbe),e(Rbe,Z_r),e(kr,e2r),e(kr,an),e(an,o2r),e(an,Bbe),e(Bbe,r2r),e(an,t2r),e(an,Pbe),e(Pbe,a2r),e(an,n2r),e(an,Ibe),e(Ibe,s2r),e(an,l2r),e(kr,i2r),e(kr,Z),e(Z,X7),e(X7,qbe),e(qbe,d2r),e(X7,c2r),e(X7,vW),e(vW,f2r),e(X7,m2r),e(Z,g2r),e(Z,z7),e(z7,Nbe),e(Nbe,h2r),e(z7,p2r),e(z7,FW),e(FW,u2r),e(z7,_2r),e(Z,b2r),e(Z,Q7),e(Q7,jbe),e(jbe,v2r),e(Q7,F2r),e(Q7,TW),e(TW,T2r),e(Q7,M2r),e(Z,E2r),e(Z,W7),e(W7,Dbe),e(Dbe,C2r),e(W7,w2r),e(W7,MW),e(MW,A2r),e(W7,y2r),e(Z,L2r),e(Z,H7),e(H7,Gbe),e(Gbe,x2r),e(H7,$2r),e(H7,EW),e(EW,k2r),e(H7,S2r),e(Z,R2r),e(Z,U7),e(U7,Obe),e(Obe,B2r),e(U7,P2r),e(U7,CW),e(CW,I2r),e(U7,q2r),e(Z,N2r),e(Z,J7),e(J7,Vbe),e(Vbe,j2r),e(J7,D2r),e(J7,wW),e(wW,G2r),e(J7,O2r),e(Z,V2r),e(Z,Y7),e(Y7,Xbe),e(Xbe,X2r),e(Y7,z2r),e(Y7,AW),e(AW,Q2r),e(Y7,W2r),e(Z,H2r),e(Z,K7),e(K7,zbe),e(zbe,U2r),e(K7,J2r),e(K7,yW),e(yW,Y2r),e(K7,K2r),e(Z,Z2r),e(Z,Z7),e(Z7,Qbe),e(Qbe,e1r),e(Z7,o1r),e(Z7,LW),e(LW,r1r),e(Z7,t1r),e(Z,a1r),e(Z,eM),e(eM,Wbe),e(Wbe,n1r),e(eM,s1r),e(eM,xW),e(xW,l1r),e(eM,i1r),e(Z,d1r),e(Z,oM),e(oM,Hbe),e(Hbe,c1r),e(oM,f1r),e(oM,$W),e($W,m1r),e(oM,g1r),e(Z,h1r),e(Z,rM),e(rM,Ube),e(Ube,p1r),e(rM,u1r),e(rM,kW),e(kW,_1r),e(rM,b1r),e(Z,v1r),e(Z,tM),e(tM,Jbe),e(Jbe,F1r),e(tM,T1r),e(tM,SW),e(SW,M1r),e(tM,E1r),e(Z,C1r),e(Z,aM),e(aM,Ybe),e(Ybe,w1r),e(aM,A1r),e(aM,RW),e(RW,y1r),e(aM,L1r),e(Z,x1r),e(Z,nM),e(nM,Kbe),e(Kbe,$1r),e(nM,k1r),e(nM,BW),e(BW,S1r),e(nM,R1r),e(Z,B1r),e(Z,sM),e(sM,Zbe),e(Zbe,P1r),e(sM,I1r),e(sM,PW),e(PW,q1r),e(sM,N1r),e(Z,j1r),e(Z,lM),e(lM,eve),e(eve,D1r),e(lM,G1r),e(lM,IW),e(IW,O1r),e(lM,V1r),e(Z,X1r),e(Z,iM),e(iM,ove),e(ove,z1r),e(iM,Q1r),e(iM,qW),e(qW,W1r),e(iM,H1r),e(Z,U1r),e(Z,dM),e(dM,rve),e(rve,J1r),e(dM,Y1r),e(dM,NW),e(NW,K1r),e(dM,Z1r),e(Z,ebr),e(Z,cM),e(cM,tve),e(tve,obr),e(cM,rbr),e(cM,jW),e(jW,tbr),e(cM,abr),e(Z,nbr),e(Z,fM),e(fM,ave),e(ave,sbr),e(fM,lbr),e(fM,DW),e(DW,ibr),e(fM,dbr),e(Z,cbr),e(Z,mM),e(mM,nve),e(nve,fbr),e(mM,mbr),e(mM,GW),e(GW,gbr),e(mM,hbr),e(Z,pbr),e(Z,gM),e(gM,sve),e(sve,ubr),e(gM,_br),e(gM,OW),e(OW,bbr),e(gM,vbr),e(Z,Fbr),e(Z,hM),e(hM,lve),e(lve,Tbr),e(hM,Mbr),e(hM,VW),e(VW,Ebr),e(hM,Cbr),e(Z,wbr),e(Z,pM),e(pM,ive),e(ive,Abr),e(pM,ybr),e(pM,XW),e(XW,Lbr),e(pM,xbr),e(kr,$br),M(uM,kr,null),b(f,QIe,_),b(f,nc,_),e(nc,_M),e(_M,dve),M(d8,dve,null),e(nc,kbr),e(nc,cve),e(cve,Sbr),b(f,WIe,_),b(f,ar,_),M(c8,ar,null),e(ar,Rbr),e(ar,sc),e(sc,Bbr),e(sc,zW),e(zW,Pbr),e(sc,Ibr),e(sc,QW),e(QW,qbr),e(sc,Nbr),e(ar,jbr),e(ar,f8),e(f8,Dbr),e(f8,fve),e(fve,Gbr),e(f8,Obr),e(ar,Vbr),e(ar,St),M(m8,St,null),e(St,Xbr),e(St,mve),e(mve,zbr),e(St,Qbr),e(St,lc),e(lc,Wbr),e(lc,gve),e(gve,Hbr),e(lc,Ubr),e(lc,WW),e(WW,Jbr),e(lc,Ybr),e(St,Kbr),M(bM,St,null),e(ar,Zbr),e(ar,Sr),M(g8,Sr,null),e(Sr,evr),e(Sr,hve),e(hve,ovr),e(Sr,rvr),e(Sr,nn),e(nn,tvr),e(nn,pve),e(pve,avr),e(nn,nvr),e(nn,uve),e(uve,svr),e(nn,lvr),e(nn,_ve),e(_ve,ivr),e(nn,dvr),e(Sr,cvr),e(Sr,pe),e(pe,vM),e(vM,bve),e(bve,fvr),e(vM,mvr),e(vM,HW),e(HW,gvr),e(vM,hvr),e(pe,pvr),e(pe,FM),e(FM,vve),e(vve,uvr),e(FM,_vr),e(FM,UW),e(UW,bvr),e(FM,vvr),e(pe,Fvr),e(pe,TM),e(TM,Fve),e(Fve,Tvr),e(TM,Mvr),e(TM,JW),e(JW,Evr),e(TM,Cvr),e(pe,wvr),e(pe,MM),e(MM,Tve),e(Tve,Avr),e(MM,yvr),e(MM,YW),e(YW,Lvr),e(MM,xvr),e(pe,$vr),e(pe,EM),e(EM,Mve),e(Mve,kvr),e(EM,Svr),e(EM,KW),e(KW,Rvr),e(EM,Bvr),e(pe,Pvr),e(pe,CM),e(CM,Eve),e(Eve,Ivr),e(CM,qvr),e(CM,ZW),e(ZW,Nvr),e(CM,jvr),e(pe,Dvr),e(pe,wM),e(wM,Cve),e(Cve,Gvr),e(wM,Ovr),e(wM,eH),e(eH,Vvr),e(wM,Xvr),e(pe,zvr),e(pe,AM),e(AM,wve),e(wve,Qvr),e(AM,Wvr),e(AM,oH),e(oH,Hvr),e(AM,Uvr),e(pe,Jvr),e(pe,yM),e(yM,Ave),e(Ave,Yvr),e(yM,Kvr),e(yM,rH),e(rH,Zvr),e(yM,eFr),e(pe,oFr),e(pe,LM),e(LM,yve),e(yve,rFr),e(LM,tFr),e(LM,tH),e(tH,aFr),e(LM,nFr),e(pe,sFr),e(pe,xM),e(xM,Lve),e(Lve,lFr),e(xM,iFr),e(xM,aH),e(aH,dFr),e(xM,cFr),e(pe,fFr),e(pe,$M),e($M,xve),e(xve,mFr),e($M,gFr),e($M,nH),e(nH,hFr),e($M,pFr),e(pe,uFr),e(pe,kM),e(kM,$ve),e($ve,_Fr),e(kM,bFr),e(kM,sH),e(sH,vFr),e(kM,FFr),e(pe,TFr),e(pe,SM),e(SM,kve),e(kve,MFr),e(SM,EFr),e(SM,lH),e(lH,CFr),e(SM,wFr),e(pe,AFr),e(pe,RM),e(RM,Sve),e(Sve,yFr),e(RM,LFr),e(RM,iH),e(iH,xFr),e(RM,$Fr),e(pe,kFr),e(pe,BM),e(BM,Rve),e(Rve,SFr),e(BM,RFr),e(BM,dH),e(dH,BFr),e(BM,PFr),e(pe,IFr),e(pe,PM),e(PM,Bve),e(Bve,qFr),e(PM,NFr),e(PM,cH),e(cH,jFr),e(PM,DFr),e(Sr,GFr),M(IM,Sr,null),b(f,HIe,_),b(f,ic,_),e(ic,qM),e(qM,Pve),M(h8,Pve,null),e(ic,OFr),e(ic,Ive),e(Ive,VFr),b(f,UIe,_),b(f,nr,_),M(p8,nr,null),e(nr,XFr),e(nr,dc),e(dc,zFr),e(dc,fH),e(fH,QFr),e(dc,WFr),e(dc,mH),e(mH,HFr),e(dc,UFr),e(nr,JFr),e(nr,u8),e(u8,YFr),e(u8,qve),e(qve,KFr),e(u8,ZFr),e(nr,e0r),e(nr,Rt),M(_8,Rt,null),e(Rt,o0r),e(Rt,Nve),e(Nve,r0r),e(Rt,t0r),e(Rt,cc),e(cc,a0r),e(cc,jve),e(jve,n0r),e(cc,s0r),e(cc,gH),e(gH,l0r),e(cc,i0r),e(Rt,d0r),M(NM,Rt,null),e(nr,c0r),e(nr,Rr),M(b8,Rr,null),e(Rr,f0r),e(Rr,Dve),e(Dve,m0r),e(Rr,g0r),e(Rr,sn),e(sn,h0r),e(sn,Gve),e(Gve,p0r),e(sn,u0r),e(sn,Ove),e(Ove,_0r),e(sn,b0r),e(sn,Vve),e(Vve,v0r),e(sn,F0r),e(Rr,T0r),e(Rr,v8),e(v8,jM),e(jM,Xve),e(Xve,M0r),e(jM,E0r),e(jM,hH),e(hH,C0r),e(jM,w0r),e(v8,A0r),e(v8,DM),e(DM,zve),e(zve,y0r),e(DM,L0r),e(DM,pH),e(pH,x0r),e(DM,$0r),e(Rr,k0r),M(GM,Rr,null),b(f,JIe,_),b(f,fc,_),e(fc,OM),e(OM,Qve),M(F8,Qve,null),e(fc,S0r),e(fc,Wve),e(Wve,R0r),b(f,YIe,_),b(f,sr,_),M(T8,sr,null),e(sr,B0r),e(sr,mc),e(mc,P0r),e(mc,uH),e(uH,I0r),e(mc,q0r),e(mc,_H),e(_H,N0r),e(mc,j0r),e(sr,D0r),e(sr,M8),e(M8,G0r),e(M8,Hve),e(Hve,O0r),e(M8,V0r),e(sr,X0r),e(sr,Bt),M(E8,Bt,null),e(Bt,z0r),e(Bt,Uve),e(Uve,Q0r),e(Bt,W0r),e(Bt,gc),e(gc,H0r),e(gc,Jve),e(Jve,U0r),e(gc,J0r),e(gc,bH),e(bH,Y0r),e(gc,K0r),e(Bt,Z0r),M(VM,Bt,null),e(sr,e6r),e(sr,Br),M(C8,Br,null),e(Br,o6r),e(Br,Yve),e(Yve,r6r),e(Br,t6r),e(Br,ln),e(ln,a6r),e(ln,Kve),e(Kve,n6r),e(ln,s6r),e(ln,Zve),e(Zve,l6r),e(ln,i6r),e(ln,eFe),e(eFe,d6r),e(ln,c6r),e(Br,f6r),e(Br,oFe),e(oFe,XM),e(XM,rFe),e(rFe,m6r),e(XM,g6r),e(XM,vH),e(vH,h6r),e(XM,p6r),e(Br,u6r),M(zM,Br,null),b(f,KIe,_),b(f,hc,_),e(hc,QM),e(QM,tFe),M(w8,tFe,null),e(hc,_6r),e(hc,aFe),e(aFe,b6r),b(f,ZIe,_),b(f,lr,_),M(A8,lr,null),e(lr,v6r),e(lr,pc),e(pc,F6r),e(pc,FH),e(FH,T6r),e(pc,M6r),e(pc,TH),e(TH,E6r),e(pc,C6r),e(lr,w6r),e(lr,y8),e(y8,A6r),e(y8,nFe),e(nFe,y6r),e(y8,L6r),e(lr,x6r),e(lr,Pt),M(L8,Pt,null),e(Pt,$6r),e(Pt,sFe),e(sFe,k6r),e(Pt,S6r),e(Pt,uc),e(uc,R6r),e(uc,lFe),e(lFe,B6r),e(uc,P6r),e(uc,MH),e(MH,I6r),e(uc,q6r),e(Pt,N6r),M(WM,Pt,null),e(lr,j6r),e(lr,Pr),M(x8,Pr,null),e(Pr,D6r),e(Pr,iFe),e(iFe,G6r),e(Pr,O6r),e(Pr,dn),e(dn,V6r),e(dn,dFe),e(dFe,X6r),e(dn,z6r),e(dn,cFe),e(cFe,Q6r),e(dn,W6r),e(dn,fFe),e(fFe,H6r),e(dn,U6r),e(Pr,J6r),e(Pr,de),e(de,HM),e(HM,mFe),e(mFe,Y6r),e(HM,K6r),e(HM,EH),e(EH,Z6r),e(HM,eTr),e(de,oTr),e(de,UM),e(UM,gFe),e(gFe,rTr),e(UM,tTr),e(UM,CH),e(CH,aTr),e(UM,nTr),e(de,sTr),e(de,JM),e(JM,hFe),e(hFe,lTr),e(JM,iTr),e(JM,wH),e(wH,dTr),e(JM,cTr),e(de,fTr),e(de,YM),e(YM,pFe),e(pFe,mTr),e(YM,gTr),e(YM,AH),e(AH,hTr),e(YM,pTr),e(de,uTr),e(de,KM),e(KM,uFe),e(uFe,_Tr),e(KM,bTr),e(KM,yH),e(yH,vTr),e(KM,FTr),e(de,TTr),e(de,ZM),e(ZM,_Fe),e(_Fe,MTr),e(ZM,ETr),e(ZM,LH),e(LH,CTr),e(ZM,wTr),e(de,ATr),e(de,e4),e(e4,bFe),e(bFe,yTr),e(e4,LTr),e(e4,xH),e(xH,xTr),e(e4,$Tr),e(de,kTr),e(de,o4),e(o4,vFe),e(vFe,STr),e(o4,RTr),e(o4,$H),e($H,BTr),e(o4,PTr),e(de,ITr),e(de,r4),e(r4,FFe),e(FFe,qTr),e(r4,NTr),e(r4,kH),e(kH,jTr),e(r4,DTr),e(de,GTr),e(de,t4),e(t4,TFe),e(TFe,OTr),e(t4,VTr),e(t4,SH),e(SH,XTr),e(t4,zTr),e(de,QTr),e(de,a4),e(a4,MFe),e(MFe,WTr),e(a4,HTr),e(a4,RH),e(RH,UTr),e(a4,JTr),e(de,YTr),e(de,n4),e(n4,EFe),e(EFe,KTr),e(n4,ZTr),e(n4,BH),e(BH,e7r),e(n4,o7r),e(de,r7r),e(de,s4),e(s4,CFe),e(CFe,t7r),e(s4,a7r),e(s4,PH),e(PH,n7r),e(s4,s7r),e(de,l7r),e(de,l4),e(l4,wFe),e(wFe,i7r),e(l4,d7r),e(l4,IH),e(IH,c7r),e(l4,f7r),e(de,m7r),e(de,i4),e(i4,AFe),e(AFe,g7r),e(i4,h7r),e(i4,qH),e(qH,p7r),e(i4,u7r),e(de,_7r),e(de,d4),e(d4,yFe),e(yFe,b7r),e(d4,v7r),e(d4,NH),e(NH,F7r),e(d4,T7r),e(de,M7r),e(de,c4),e(c4,LFe),e(LFe,E7r),e(c4,C7r),e(c4,jH),e(jH,w7r),e(c4,A7r),e(de,y7r),e(de,f4),e(f4,xFe),e(xFe,L7r),e(f4,x7r),e(f4,DH),e(DH,$7r),e(f4,k7r),e(de,S7r),e(de,m4),e(m4,$Fe),e($Fe,R7r),e(m4,B7r),e(m4,GH),e(GH,P7r),e(m4,I7r),e(de,q7r),e(de,g4),e(g4,kFe),e(kFe,N7r),e(g4,j7r),e(g4,OH),e(OH,D7r),e(g4,G7r),e(Pr,O7r),M(h4,Pr,null),b(f,eqe,_),b(f,_c,_),e(_c,p4),e(p4,SFe),M($8,SFe,null),e(_c,V7r),e(_c,RFe),e(RFe,X7r),b(f,oqe,_),b(f,ir,_),M(k8,ir,null),e(ir,z7r),e(ir,bc),e(bc,Q7r),e(bc,VH),e(VH,W7r),e(bc,H7r),e(bc,XH),e(XH,U7r),e(bc,J7r),e(ir,Y7r),e(ir,S8),e(S8,K7r),e(S8,BFe),e(BFe,Z7r),e(S8,eMr),e(ir,oMr),e(ir,It),M(R8,It,null),e(It,rMr),e(It,PFe),e(PFe,tMr),e(It,aMr),e(It,vc),e(vc,nMr),e(vc,IFe),e(IFe,sMr),e(vc,lMr),e(vc,zH),e(zH,iMr),e(vc,dMr),e(It,cMr),M(u4,It,null),e(ir,fMr),e(ir,Ir),M(B8,Ir,null),e(Ir,mMr),e(Ir,qFe),e(qFe,gMr),e(Ir,hMr),e(Ir,cn),e(cn,pMr),e(cn,NFe),e(NFe,uMr),e(cn,_Mr),e(cn,jFe),e(jFe,bMr),e(cn,vMr),e(cn,DFe),e(DFe,FMr),e(cn,TMr),e(Ir,MMr),e(Ir,ce),e(ce,_4),e(_4,GFe),e(GFe,EMr),e(_4,CMr),e(_4,QH),e(QH,wMr),e(_4,AMr),e(ce,yMr),e(ce,b4),e(b4,OFe),e(OFe,LMr),e(b4,xMr),e(b4,WH),e(WH,$Mr),e(b4,kMr),e(ce,SMr),e(ce,v4),e(v4,VFe),e(VFe,RMr),e(v4,BMr),e(v4,HH),e(HH,PMr),e(v4,IMr),e(ce,qMr),e(ce,F4),e(F4,XFe),e(XFe,NMr),e(F4,jMr),e(F4,UH),e(UH,DMr),e(F4,GMr),e(ce,OMr),e(ce,T4),e(T4,zFe),e(zFe,VMr),e(T4,XMr),e(T4,JH),e(JH,zMr),e(T4,QMr),e(ce,WMr),e(ce,M4),e(M4,QFe),e(QFe,HMr),e(M4,UMr),e(M4,YH),e(YH,JMr),e(M4,YMr),e(ce,KMr),e(ce,E4),e(E4,WFe),e(WFe,ZMr),e(E4,e4r),e(E4,KH),e(KH,o4r),e(E4,r4r),e(ce,t4r),e(ce,C4),e(C4,HFe),e(HFe,a4r),e(C4,n4r),e(C4,ZH),e(ZH,s4r),e(C4,l4r),e(ce,i4r),e(ce,w4),e(w4,UFe),e(UFe,d4r),e(w4,c4r),e(w4,eU),e(eU,f4r),e(w4,m4r),e(ce,g4r),e(ce,A4),e(A4,JFe),e(JFe,h4r),e(A4,p4r),e(A4,oU),e(oU,u4r),e(A4,_4r),e(ce,b4r),e(ce,y4),e(y4,YFe),e(YFe,v4r),e(y4,F4r),e(y4,rU),e(rU,T4r),e(y4,M4r),e(ce,E4r),e(ce,L4),e(L4,KFe),e(KFe,C4r),e(L4,w4r),e(L4,tU),e(tU,A4r),e(L4,y4r),e(ce,L4r),e(ce,x4),e(x4,ZFe),e(ZFe,x4r),e(x4,$4r),e(x4,aU),e(aU,k4r),e(x4,S4r),e(ce,R4r),e(ce,$4),e($4,e0e),e(e0e,B4r),e($4,P4r),e($4,nU),e(nU,I4r),e($4,q4r),e(ce,N4r),e(ce,k4),e(k4,o0e),e(o0e,j4r),e(k4,D4r),e(k4,sU),e(sU,G4r),e(k4,O4r),e(ce,V4r),e(ce,S4),e(S4,r0e),e(r0e,X4r),e(S4,z4r),e(S4,lU),e(lU,Q4r),e(S4,W4r),e(ce,H4r),e(ce,R4),e(R4,t0e),e(t0e,U4r),e(R4,J4r),e(R4,iU),e(iU,Y4r),e(R4,K4r),e(ce,Z4r),e(ce,B4),e(B4,a0e),e(a0e,eEr),e(B4,oEr),e(B4,dU),e(dU,rEr),e(B4,tEr),e(ce,aEr),e(ce,P4),e(P4,n0e),e(n0e,nEr),e(P4,sEr),e(P4,cU),e(cU,lEr),e(P4,iEr),e(ce,dEr),e(ce,I4),e(I4,s0e),e(s0e,cEr),e(I4,fEr),e(I4,fU),e(fU,mEr),e(I4,gEr),e(Ir,hEr),M(q4,Ir,null),b(f,rqe,_),b(f,Fc,_),e(Fc,N4),e(N4,l0e),M(P8,l0e,null),e(Fc,pEr),e(Fc,i0e),e(i0e,uEr),b(f,tqe,_),b(f,dr,_),M(I8,dr,null),e(dr,_Er),e(dr,Tc),e(Tc,bEr),e(Tc,mU),e(mU,vEr),e(Tc,FEr),e(Tc,gU),e(gU,TEr),e(Tc,MEr),e(dr,EEr),e(dr,q8),e(q8,CEr),e(q8,d0e),e(d0e,wEr),e(q8,AEr),e(dr,yEr),e(dr,qt),M(N8,qt,null),e(qt,LEr),e(qt,c0e),e(c0e,xEr),e(qt,$Er),e(qt,Mc),e(Mc,kEr),e(Mc,f0e),e(f0e,SEr),e(Mc,REr),e(Mc,hU),e(hU,BEr),e(Mc,PEr),e(qt,IEr),M(j4,qt,null),e(dr,qEr),e(dr,qr),M(j8,qr,null),e(qr,NEr),e(qr,m0e),e(m0e,jEr),e(qr,DEr),e(qr,fn),e(fn,GEr),e(fn,g0e),e(g0e,OEr),e(fn,VEr),e(fn,h0e),e(h0e,XEr),e(fn,zEr),e(fn,p0e),e(p0e,QEr),e(fn,WEr),e(qr,HEr),e(qr,u0e),e(u0e,D4),e(D4,_0e),e(_0e,UEr),e(D4,JEr),e(D4,pU),e(pU,YEr),e(D4,KEr),e(qr,ZEr),M(G4,qr,null),b(f,aqe,_),b(f,Ec,_),e(Ec,O4),e(O4,b0e),M(D8,b0e,null),e(Ec,e5r),e(Ec,v0e),e(v0e,o5r),b(f,nqe,_),b(f,cr,_),M(G8,cr,null),e(cr,r5r),e(cr,Cc),e(Cc,t5r),e(Cc,uU),e(uU,a5r),e(Cc,n5r),e(Cc,_U),e(_U,s5r),e(Cc,l5r),e(cr,i5r),e(cr,O8),e(O8,d5r),e(O8,F0e),e(F0e,c5r),e(O8,f5r),e(cr,m5r),e(cr,Nt),M(V8,Nt,null),e(Nt,g5r),e(Nt,T0e),e(T0e,h5r),e(Nt,p5r),e(Nt,wc),e(wc,u5r),e(wc,M0e),e(M0e,_5r),e(wc,b5r),e(wc,bU),e(bU,v5r),e(wc,F5r),e(Nt,T5r),M(V4,Nt,null),e(cr,M5r),e(cr,Nr),M(X8,Nr,null),e(Nr,E5r),e(Nr,E0e),e(E0e,C5r),e(Nr,w5r),e(Nr,mn),e(mn,A5r),e(mn,C0e),e(C0e,y5r),e(mn,L5r),e(mn,w0e),e(w0e,x5r),e(mn,$5r),e(mn,A0e),e(A0e,k5r),e(mn,S5r),e(Nr,R5r),e(Nr,y0e),e(y0e,X4),e(X4,L0e),e(L0e,B5r),e(X4,P5r),e(X4,vU),e(vU,I5r),e(X4,q5r),e(Nr,N5r),M(z4,Nr,null),b(f,sqe,_),b(f,Ac,_),e(Ac,Q4),e(Q4,x0e),M(z8,x0e,null),e(Ac,j5r),e(Ac,$0e),e($0e,D5r),b(f,lqe,_),b(f,fr,_),M(Q8,fr,null),e(fr,G5r),e(fr,yc),e(yc,O5r),e(yc,FU),e(FU,V5r),e(yc,X5r),e(yc,TU),e(TU,z5r),e(yc,Q5r),e(fr,W5r),e(fr,W8),e(W8,H5r),e(W8,k0e),e(k0e,U5r),e(W8,J5r),e(fr,Y5r),e(fr,jt),M(H8,jt,null),e(jt,K5r),e(jt,S0e),e(S0e,Z5r),e(jt,eCr),e(jt,Lc),e(Lc,oCr),e(Lc,R0e),e(R0e,rCr),e(Lc,tCr),e(Lc,MU),e(MU,aCr),e(Lc,nCr),e(jt,sCr),M(W4,jt,null),e(fr,lCr),e(fr,jr),M(U8,jr,null),e(jr,iCr),e(jr,B0e),e(B0e,dCr),e(jr,cCr),e(jr,gn),e(gn,fCr),e(gn,P0e),e(P0e,mCr),e(gn,gCr),e(gn,I0e),e(I0e,hCr),e(gn,pCr),e(gn,q0e),e(q0e,uCr),e(gn,_Cr),e(jr,bCr),e(jr,re),e(re,H4),e(H4,N0e),e(N0e,vCr),e(H4,FCr),e(H4,EU),e(EU,TCr),e(H4,MCr),e(re,ECr),e(re,U4),e(U4,j0e),e(j0e,CCr),e(U4,wCr),e(U4,CU),e(CU,ACr),e(U4,yCr),e(re,LCr),e(re,J4),e(J4,D0e),e(D0e,xCr),e(J4,$Cr),e(J4,wU),e(wU,kCr),e(J4,SCr),e(re,RCr),e(re,Y4),e(Y4,G0e),e(G0e,BCr),e(Y4,PCr),e(Y4,AU),e(AU,ICr),e(Y4,qCr),e(re,NCr),e(re,K4),e(K4,O0e),e(O0e,jCr),e(K4,DCr),e(K4,yU),e(yU,GCr),e(K4,OCr),e(re,VCr),e(re,Z4),e(Z4,V0e),e(V0e,XCr),e(Z4,zCr),e(Z4,LU),e(LU,QCr),e(Z4,WCr),e(re,HCr),e(re,eE),e(eE,X0e),e(X0e,UCr),e(eE,JCr),e(eE,xU),e(xU,YCr),e(eE,KCr),e(re,ZCr),e(re,oE),e(oE,z0e),e(z0e,e3r),e(oE,o3r),e(oE,$U),e($U,r3r),e(oE,t3r),e(re,a3r),e(re,rE),e(rE,Q0e),e(Q0e,n3r),e(rE,s3r),e(rE,kU),e(kU,l3r),e(rE,i3r),e(re,d3r),e(re,tE),e(tE,W0e),e(W0e,c3r),e(tE,f3r),e(tE,SU),e(SU,m3r),e(tE,g3r),e(re,h3r),e(re,aE),e(aE,H0e),e(H0e,p3r),e(aE,u3r),e(aE,RU),e(RU,_3r),e(aE,b3r),e(re,v3r),e(re,nE),e(nE,U0e),e(U0e,F3r),e(nE,T3r),e(nE,BU),e(BU,M3r),e(nE,E3r),e(re,C3r),e(re,sE),e(sE,J0e),e(J0e,w3r),e(sE,A3r),e(sE,PU),e(PU,y3r),e(sE,L3r),e(re,x3r),e(re,lE),e(lE,Y0e),e(Y0e,$3r),e(lE,k3r),e(lE,IU),e(IU,S3r),e(lE,R3r),e(re,B3r),e(re,iE),e(iE,K0e),e(K0e,P3r),e(iE,I3r),e(iE,qU),e(qU,q3r),e(iE,N3r),e(re,j3r),e(re,dE),e(dE,Z0e),e(Z0e,D3r),e(dE,G3r),e(dE,NU),e(NU,O3r),e(dE,V3r),e(re,X3r),e(re,cE),e(cE,e6e),e(e6e,z3r),e(cE,Q3r),e(cE,jU),e(jU,W3r),e(cE,H3r),e(re,U3r),e(re,fE),e(fE,o6e),e(o6e,J3r),e(fE,Y3r),e(fE,DU),e(DU,K3r),e(fE,Z3r),e(re,ewr),e(re,mE),e(mE,r6e),e(r6e,owr),e(mE,rwr),e(mE,GU),e(GU,twr),e(mE,awr),e(re,nwr),e(re,gE),e(gE,t6e),e(t6e,swr),e(gE,lwr),e(gE,OU),e(OU,iwr),e(gE,dwr),e(re,cwr),e(re,hE),e(hE,a6e),e(a6e,fwr),e(hE,mwr),e(hE,VU),e(VU,gwr),e(hE,hwr),e(re,pwr),e(re,pE),e(pE,n6e),e(n6e,uwr),e(pE,_wr),e(pE,XU),e(XU,bwr),e(pE,vwr),e(re,Fwr),e(re,uE),e(uE,s6e),e(s6e,Twr),e(uE,Mwr),e(uE,zU),e(zU,Ewr),e(uE,Cwr),e(re,wwr),e(re,_E),e(_E,l6e),e(l6e,Awr),e(_E,ywr),e(_E,QU),e(QU,Lwr),e(_E,xwr),e(re,$wr),e(re,bE),e(bE,i6e),e(i6e,kwr),e(bE,Swr),e(bE,WU),e(WU,Rwr),e(bE,Bwr),e(jr,Pwr),M(vE,jr,null),b(f,iqe,_),b(f,xc,_),e(xc,FE),e(FE,d6e),M(J8,d6e,null),e(xc,Iwr),e(xc,c6e),e(c6e,qwr),b(f,dqe,_),b(f,mr,_),M(Y8,mr,null),e(mr,Nwr),e(mr,$c),e($c,jwr),e($c,HU),e(HU,Dwr),e($c,Gwr),e($c,UU),e(UU,Owr),e($c,Vwr),e(mr,Xwr),e(mr,K8),e(K8,zwr),e(K8,f6e),e(f6e,Qwr),e(K8,Wwr),e(mr,Hwr),e(mr,Dt),M(Z8,Dt,null),e(Dt,Uwr),e(Dt,m6e),e(m6e,Jwr),e(Dt,Ywr),e(Dt,kc),e(kc,Kwr),e(kc,g6e),e(g6e,Zwr),e(kc,eAr),e(kc,JU),e(JU,oAr),e(kc,rAr),e(Dt,tAr),M(TE,Dt,null),e(mr,aAr),e(mr,Dr),M(ex,Dr,null),e(Dr,nAr),e(Dr,h6e),e(h6e,sAr),e(Dr,lAr),e(Dr,hn),e(hn,iAr),e(hn,p6e),e(p6e,dAr),e(hn,cAr),e(hn,u6e),e(u6e,fAr),e(hn,mAr),e(hn,_6e),e(_6e,gAr),e(hn,hAr),e(Dr,pAr),e(Dr,ke),e(ke,ME),e(ME,b6e),e(b6e,uAr),e(ME,_Ar),e(ME,YU),e(YU,bAr),e(ME,vAr),e(ke,FAr),e(ke,EE),e(EE,v6e),e(v6e,TAr),e(EE,MAr),e(EE,KU),e(KU,EAr),e(EE,CAr),e(ke,wAr),e(ke,CE),e(CE,F6e),e(F6e,AAr),e(CE,yAr),e(CE,ZU),e(ZU,LAr),e(CE,xAr),e(ke,$Ar),e(ke,wE),e(wE,T6e),e(T6e,kAr),e(wE,SAr),e(wE,eJ),e(eJ,RAr),e(wE,BAr),e(ke,PAr),e(ke,AE),e(AE,M6e),e(M6e,IAr),e(AE,qAr),e(AE,oJ),e(oJ,NAr),e(AE,jAr),e(ke,DAr),e(ke,yE),e(yE,E6e),e(E6e,GAr),e(yE,OAr),e(yE,rJ),e(rJ,VAr),e(yE,XAr),e(ke,zAr),e(ke,LE),e(LE,C6e),e(C6e,QAr),e(LE,WAr),e(LE,tJ),e(tJ,HAr),e(LE,UAr),e(ke,JAr),e(ke,xE),e(xE,w6e),e(w6e,YAr),e(xE,KAr),e(xE,aJ),e(aJ,ZAr),e(xE,eyr),e(ke,oyr),e(ke,$E),e($E,A6e),e(A6e,ryr),e($E,tyr),e($E,nJ),e(nJ,ayr),e($E,nyr),e(Dr,syr),M(kE,Dr,null),b(f,cqe,_),b(f,Sc,_),e(Sc,SE),e(SE,y6e),M(ox,y6e,null),e(Sc,lyr),e(Sc,L6e),e(L6e,iyr),b(f,fqe,_),b(f,gr,_),M(rx,gr,null),e(gr,dyr),e(gr,Rc),e(Rc,cyr),e(Rc,sJ),e(sJ,fyr),e(Rc,myr),e(Rc,lJ),e(lJ,gyr),e(Rc,hyr),e(gr,pyr),e(gr,tx),e(tx,uyr),e(tx,x6e),e(x6e,_yr),e(tx,byr),e(gr,vyr),e(gr,Gt),M(ax,Gt,null),e(Gt,Fyr),e(Gt,$6e),e($6e,Tyr),e(Gt,Myr),e(Gt,Bc),e(Bc,Eyr),e(Bc,k6e),e(k6e,Cyr),e(Bc,wyr),e(Bc,iJ),e(iJ,Ayr),e(Bc,yyr),e(Gt,Lyr),M(RE,Gt,null),e(gr,xyr),e(gr,Gr),M(nx,Gr,null),e(Gr,$yr),e(Gr,S6e),e(S6e,kyr),e(Gr,Syr),e(Gr,pn),e(pn,Ryr),e(pn,R6e),e(R6e,Byr),e(pn,Pyr),e(pn,B6e),e(B6e,Iyr),e(pn,qyr),e(pn,P6e),e(P6e,Nyr),e(pn,jyr),e(Gr,Dyr),e(Gr,Me),e(Me,BE),e(BE,I6e),e(I6e,Gyr),e(BE,Oyr),e(BE,dJ),e(dJ,Vyr),e(BE,Xyr),e(Me,zyr),e(Me,PE),e(PE,q6e),e(q6e,Qyr),e(PE,Wyr),e(PE,cJ),e(cJ,Hyr),e(PE,Uyr),e(Me,Jyr),e(Me,IE),e(IE,N6e),e(N6e,Yyr),e(IE,Kyr),e(IE,fJ),e(fJ,Zyr),e(IE,eLr),e(Me,oLr),e(Me,qE),e(qE,j6e),e(j6e,rLr),e(qE,tLr),e(qE,mJ),e(mJ,aLr),e(qE,nLr),e(Me,sLr),e(Me,NE),e(NE,D6e),e(D6e,lLr),e(NE,iLr),e(NE,gJ),e(gJ,dLr),e(NE,cLr),e(Me,fLr),e(Me,jE),e(jE,G6e),e(G6e,mLr),e(jE,gLr),e(jE,hJ),e(hJ,hLr),e(jE,pLr),e(Me,uLr),e(Me,DE),e(DE,O6e),e(O6e,_Lr),e(DE,bLr),e(DE,pJ),e(pJ,vLr),e(DE,FLr),e(Me,TLr),e(Me,GE),e(GE,V6e),e(V6e,MLr),e(GE,ELr),e(GE,uJ),e(uJ,CLr),e(GE,wLr),e(Me,ALr),e(Me,OE),e(OE,X6e),e(X6e,yLr),e(OE,LLr),e(OE,_J),e(_J,xLr),e(OE,$Lr),e(Me,kLr),e(Me,VE),e(VE,z6e),e(z6e,SLr),e(VE,RLr),e(VE,bJ),e(bJ,BLr),e(VE,PLr),e(Me,ILr),e(Me,XE),e(XE,Q6e),e(Q6e,qLr),e(XE,NLr),e(XE,vJ),e(vJ,jLr),e(XE,DLr),e(Me,GLr),e(Me,zE),e(zE,W6e),e(W6e,OLr),e(zE,VLr),e(zE,FJ),e(FJ,XLr),e(zE,zLr),e(Gr,QLr),M(QE,Gr,null),b(f,mqe,_),b(f,Pc,_),e(Pc,WE),e(WE,H6e),M(sx,H6e,null),e(Pc,WLr),e(Pc,U6e),e(U6e,HLr),b(f,gqe,_),b(f,hr,_),M(lx,hr,null),e(hr,ULr),e(hr,Ic),e(Ic,JLr),e(Ic,TJ),e(TJ,YLr),e(Ic,KLr),e(Ic,MJ),e(MJ,ZLr),e(Ic,e8r),e(hr,o8r),e(hr,ix),e(ix,r8r),e(ix,J6e),e(J6e,t8r),e(ix,a8r),e(hr,n8r),e(hr,Ot),M(dx,Ot,null),e(Ot,s8r),e(Ot,Y6e),e(Y6e,l8r),e(Ot,i8r),e(Ot,qc),e(qc,d8r),e(qc,K6e),e(K6e,c8r),e(qc,f8r),e(qc,EJ),e(EJ,m8r),e(qc,g8r),e(Ot,h8r),M(HE,Ot,null),e(hr,p8r),e(hr,Or),M(cx,Or,null),e(Or,u8r),e(Or,Z6e),e(Z6e,_8r),e(Or,b8r),e(Or,un),e(un,v8r),e(un,eTe),e(eTe,F8r),e(un,T8r),e(un,oTe),e(oTe,M8r),e(un,E8r),e(un,rTe),e(rTe,C8r),e(un,w8r),e(Or,A8r),e(Or,Le),e(Le,UE),e(UE,tTe),e(tTe,y8r),e(UE,L8r),e(UE,CJ),e(CJ,x8r),e(UE,$8r),e(Le,k8r),e(Le,JE),e(JE,aTe),e(aTe,S8r),e(JE,R8r),e(JE,wJ),e(wJ,B8r),e(JE,P8r),e(Le,I8r),e(Le,YE),e(YE,nTe),e(nTe,q8r),e(YE,N8r),e(YE,AJ),e(AJ,j8r),e(YE,D8r),e(Le,G8r),e(Le,KE),e(KE,sTe),e(sTe,O8r),e(KE,V8r),e(KE,yJ),e(yJ,X8r),e(KE,z8r),e(Le,Q8r),e(Le,ZE),e(ZE,lTe),e(lTe,W8r),e(ZE,H8r),e(ZE,LJ),e(LJ,U8r),e(ZE,J8r),e(Le,Y8r),e(Le,e5),e(e5,iTe),e(iTe,K8r),e(e5,Z8r),e(e5,xJ),e(xJ,exr),e(e5,oxr),e(Le,rxr),e(Le,o5),e(o5,dTe),e(dTe,txr),e(o5,axr),e(o5,$J),e($J,nxr),e(o5,sxr),e(Le,lxr),e(Le,r5),e(r5,cTe),e(cTe,ixr),e(r5,dxr),e(r5,kJ),e(kJ,cxr),e(r5,fxr),e(Le,mxr),e(Le,t5),e(t5,fTe),e(fTe,gxr),e(t5,hxr),e(t5,SJ),e(SJ,pxr),e(t5,uxr),e(Le,_xr),e(Le,a5),e(a5,mTe),e(mTe,bxr),e(a5,vxr),e(a5,RJ),e(RJ,Fxr),e(a5,Txr),e(Or,Mxr),M(n5,Or,null),b(f,hqe,_),b(f,Nc,_),e(Nc,s5),e(s5,gTe),M(fx,gTe,null),e(Nc,Exr),e(Nc,hTe),e(hTe,Cxr),b(f,pqe,_),b(f,pr,_),M(mx,pr,null),e(pr,wxr),e(pr,jc),e(jc,Axr),e(jc,BJ),e(BJ,yxr),e(jc,Lxr),e(jc,PJ),e(PJ,xxr),e(jc,$xr),e(pr,kxr),e(pr,gx),e(gx,Sxr),e(gx,pTe),e(pTe,Rxr),e(gx,Bxr),e(pr,Pxr),e(pr,Vt),M(hx,Vt,null),e(Vt,Ixr),e(Vt,uTe),e(uTe,qxr),e(Vt,Nxr),e(Vt,Dc),e(Dc,jxr),e(Dc,_Te),e(_Te,Dxr),e(Dc,Gxr),e(Dc,IJ),e(IJ,Oxr),e(Dc,Vxr),e(Vt,Xxr),M(l5,Vt,null),e(pr,zxr),e(pr,Vr),M(px,Vr,null),e(Vr,Qxr),e(Vr,bTe),e(bTe,Wxr),e(Vr,Hxr),e(Vr,_n),e(_n,Uxr),e(_n,vTe),e(vTe,Jxr),e(_n,Yxr),e(_n,FTe),e(FTe,Kxr),e(_n,Zxr),e(_n,TTe),e(TTe,e9r),e(_n,o9r),e(Vr,r9r),e(Vr,Se),e(Se,i5),e(i5,MTe),e(MTe,t9r),e(i5,a9r),e(i5,qJ),e(qJ,n9r),e(i5,s9r),e(Se,l9r),e(Se,d5),e(d5,ETe),e(ETe,i9r),e(d5,d9r),e(d5,NJ),e(NJ,c9r),e(d5,f9r),e(Se,m9r),e(Se,c5),e(c5,CTe),e(CTe,g9r),e(c5,h9r),e(c5,jJ),e(jJ,p9r),e(c5,u9r),e(Se,_9r),e(Se,f5),e(f5,wTe),e(wTe,b9r),e(f5,v9r),e(f5,DJ),e(DJ,F9r),e(f5,T9r),e(Se,M9r),e(Se,m5),e(m5,ATe),e(ATe,E9r),e(m5,C9r),e(m5,GJ),e(GJ,w9r),e(m5,A9r),e(Se,y9r),e(Se,g5),e(g5,yTe),e(yTe,L9r),e(g5,x9r),e(g5,OJ),e(OJ,$9r),e(g5,k9r),e(Se,S9r),e(Se,h5),e(h5,LTe),e(LTe,R9r),e(h5,B9r),e(h5,VJ),e(VJ,P9r),e(h5,I9r),e(Se,q9r),e(Se,p5),e(p5,xTe),e(xTe,N9r),e(p5,j9r),e(p5,XJ),e(XJ,D9r),e(p5,G9r),e(Se,O9r),e(Se,u5),e(u5,$Te),e($Te,V9r),e(u5,X9r),e(u5,zJ),e(zJ,z9r),e(u5,Q9r),e(Vr,W9r),M(_5,Vr,null),b(f,uqe,_),b(f,Gc,_),e(Gc,b5),e(b5,kTe),M(ux,kTe,null),e(Gc,H9r),e(Gc,STe),e(STe,U9r),b(f,_qe,_),b(f,ur,_),M(_x,ur,null),e(ur,J9r),e(ur,Oc),e(Oc,Y9r),e(Oc,QJ),e(QJ,K9r),e(Oc,Z9r),e(Oc,WJ),e(WJ,e$r),e(Oc,o$r),e(ur,r$r),e(ur,bx),e(bx,t$r),e(bx,RTe),e(RTe,a$r),e(bx,n$r),e(ur,s$r),e(ur,Xt),M(vx,Xt,null),e(Xt,l$r),e(Xt,BTe),e(BTe,i$r),e(Xt,d$r),e(Xt,Vc),e(Vc,c$r),e(Vc,PTe),e(PTe,f$r),e(Vc,m$r),e(Vc,HJ),e(HJ,g$r),e(Vc,h$r),e(Xt,p$r),M(v5,Xt,null),e(ur,u$r),e(ur,Xr),M(Fx,Xr,null),e(Xr,_$r),e(Xr,ITe),e(ITe,b$r),e(Xr,v$r),e(Xr,bn),e(bn,F$r),e(bn,qTe),e(qTe,T$r),e(bn,M$r),e(bn,NTe),e(NTe,E$r),e(bn,C$r),e(bn,jTe),e(jTe,w$r),e(bn,A$r),e(Xr,y$r),e(Xr,xe),e(xe,F5),e(F5,DTe),e(DTe,L$r),e(F5,x$r),e(F5,UJ),e(UJ,$$r),e(F5,k$r),e(xe,S$r),e(xe,T5),e(T5,GTe),e(GTe,R$r),e(T5,B$r),e(T5,JJ),e(JJ,P$r),e(T5,I$r),e(xe,q$r),e(xe,M5),e(M5,OTe),e(OTe,N$r),e(M5,j$r),e(M5,YJ),e(YJ,D$r),e(M5,G$r),e(xe,O$r),e(xe,E5),e(E5,VTe),e(VTe,V$r),e(E5,X$r),e(E5,KJ),e(KJ,z$r),e(E5,Q$r),e(xe,W$r),e(xe,C5),e(C5,XTe),e(XTe,H$r),e(C5,U$r),e(C5,ZJ),e(ZJ,J$r),e(C5,Y$r),e(xe,K$r),e(xe,w5),e(w5,zTe),e(zTe,Z$r),e(w5,ekr),e(w5,eY),e(eY,okr),e(w5,rkr),e(xe,tkr),e(xe,A5),e(A5,QTe),e(QTe,akr),e(A5,nkr),e(A5,oY),e(oY,skr),e(A5,lkr),e(xe,ikr),e(xe,y5),e(y5,WTe),e(WTe,dkr),e(y5,ckr),e(y5,rY),e(rY,fkr),e(y5,mkr),e(xe,gkr),e(xe,L5),e(L5,HTe),e(HTe,hkr),e(L5,pkr),e(L5,tY),e(tY,ukr),e(L5,_kr),e(xe,bkr),e(xe,x5),e(x5,UTe),e(UTe,vkr),e(x5,Fkr),e(x5,aY),e(aY,Tkr),e(x5,Mkr),e(Xr,Ekr),M($5,Xr,null),b(f,bqe,_),b(f,Xc,_),e(Xc,k5),e(k5,JTe),M(Tx,JTe,null),e(Xc,Ckr),e(Xc,YTe),e(YTe,wkr),b(f,vqe,_),b(f,_r,_),M(Mx,_r,null),e(_r,Akr),e(_r,zc),e(zc,ykr),e(zc,nY),e(nY,Lkr),e(zc,xkr),e(zc,sY),e(sY,$kr),e(zc,kkr),e(_r,Skr),e(_r,Ex),e(Ex,Rkr),e(Ex,KTe),e(KTe,Bkr),e(Ex,Pkr),e(_r,Ikr),e(_r,zt),M(Cx,zt,null),e(zt,qkr),e(zt,ZTe),e(ZTe,Nkr),e(zt,jkr),e(zt,Qc),e(Qc,Dkr),e(Qc,e7e),e(e7e,Gkr),e(Qc,Okr),e(Qc,lY),e(lY,Vkr),e(Qc,Xkr),e(zt,zkr),M(S5,zt,null),e(_r,Qkr),e(_r,zr),M(wx,zr,null),e(zr,Wkr),e(zr,o7e),e(o7e,Hkr),e(zr,Ukr),e(zr,vn),e(vn,Jkr),e(vn,r7e),e(r7e,Ykr),e(vn,Kkr),e(vn,t7e),e(t7e,Zkr),e(vn,eSr),e(vn,a7e),e(a7e,oSr),e(vn,rSr),e(zr,tSr),e(zr,$e),e($e,R5),e(R5,n7e),e(n7e,aSr),e(R5,nSr),e(R5,iY),e(iY,sSr),e(R5,lSr),e($e,iSr),e($e,B5),e(B5,s7e),e(s7e,dSr),e(B5,cSr),e(B5,dY),e(dY,fSr),e(B5,mSr),e($e,gSr),e($e,P5),e(P5,l7e),e(l7e,hSr),e(P5,pSr),e(P5,cY),e(cY,uSr),e(P5,_Sr),e($e,bSr),e($e,I5),e(I5,i7e),e(i7e,vSr),e(I5,FSr),e(I5,fY),e(fY,TSr),e(I5,MSr),e($e,ESr),e($e,q5),e(q5,d7e),e(d7e,CSr),e(q5,wSr),e(q5,mY),e(mY,ASr),e(q5,ySr),e($e,LSr),e($e,N5),e(N5,c7e),e(c7e,xSr),e(N5,$Sr),e(N5,gY),e(gY,kSr),e(N5,SSr),e($e,RSr),e($e,j5),e(j5,f7e),e(f7e,BSr),e(j5,PSr),e(j5,hY),e(hY,ISr),e(j5,qSr),e($e,NSr),e($e,D5),e(D5,m7e),e(m7e,jSr),e(D5,DSr),e(D5,pY),e(pY,GSr),e(D5,OSr),e($e,VSr),e($e,G5),e(G5,g7e),e(g7e,XSr),e(G5,zSr),e(G5,uY),e(uY,QSr),e(G5,WSr),e($e,HSr),e($e,O5),e(O5,h7e),e(h7e,USr),e(O5,JSr),e(O5,_Y),e(_Y,YSr),e(O5,KSr),e(zr,ZSr),M(V5,zr,null),b(f,Fqe,_),b(f,Wc,_),e(Wc,X5),e(X5,p7e),M(Ax,p7e,null),e(Wc,eRr),e(Wc,u7e),e(u7e,oRr),b(f,Tqe,_),b(f,br,_),M(yx,br,null),e(br,rRr),e(br,Hc),e(Hc,tRr),e(Hc,bY),e(bY,aRr),e(Hc,nRr),e(Hc,vY),e(vY,sRr),e(Hc,lRr),e(br,iRr),e(br,Lx),e(Lx,dRr),e(Lx,_7e),e(_7e,cRr),e(Lx,fRr),e(br,mRr),e(br,Qt),M(xx,Qt,null),e(Qt,gRr),e(Qt,b7e),e(b7e,hRr),e(Qt,pRr),e(Qt,Uc),e(Uc,uRr),e(Uc,v7e),e(v7e,_Rr),e(Uc,bRr),e(Uc,FY),e(FY,vRr),e(Uc,FRr),e(Qt,TRr),M(z5,Qt,null),e(br,MRr),e(br,Qr),M($x,Qr,null),e(Qr,ERr),e(Qr,F7e),e(F7e,CRr),e(Qr,wRr),e(Qr,Fn),e(Fn,ARr),e(Fn,T7e),e(T7e,yRr),e(Fn,LRr),e(Fn,M7e),e(M7e,xRr),e(Fn,$Rr),e(Fn,E7e),e(E7e,kRr),e(Fn,SRr),e(Qr,RRr),e(Qr,De),e(De,Q5),e(Q5,C7e),e(C7e,BRr),e(Q5,PRr),e(Q5,TY),e(TY,IRr),e(Q5,qRr),e(De,NRr),e(De,W5),e(W5,w7e),e(w7e,jRr),e(W5,DRr),e(W5,MY),e(MY,GRr),e(W5,ORr),e(De,VRr),e(De,H5),e(H5,A7e),e(A7e,XRr),e(H5,zRr),e(H5,EY),e(EY,QRr),e(H5,WRr),e(De,HRr),e(De,U5),e(U5,y7e),e(y7e,URr),e(U5,JRr),e(U5,CY),e(CY,YRr),e(U5,KRr),e(De,ZRr),e(De,J5),e(J5,L7e),e(L7e,eBr),e(J5,oBr),e(J5,wY),e(wY,rBr),e(J5,tBr),e(De,aBr),e(De,Y5),e(Y5,x7e),e(x7e,nBr),e(Y5,sBr),e(Y5,AY),e(AY,lBr),e(Y5,iBr),e(De,dBr),e(De,K5),e(K5,$7e),e($7e,cBr),e(K5,fBr),e(K5,yY),e(yY,mBr),e(K5,gBr),e(De,hBr),e(De,Z5),e(Z5,k7e),e(k7e,pBr),e(Z5,uBr),e(Z5,LY),e(LY,_Br),e(Z5,bBr),e(Qr,vBr),M(eC,Qr,null),b(f,Mqe,_),b(f,Jc,_),e(Jc,oC),e(oC,S7e),M(kx,S7e,null),e(Jc,FBr),e(Jc,R7e),e(R7e,TBr),b(f,Eqe,_),b(f,vr,_),M(Sx,vr,null),e(vr,MBr),e(vr,Yc),e(Yc,EBr),e(Yc,xY),e(xY,CBr),e(Yc,wBr),e(Yc,$Y),e($Y,ABr),e(Yc,yBr),e(vr,LBr),e(vr,Rx),e(Rx,xBr),e(Rx,B7e),e(B7e,$Br),e(Rx,kBr),e(vr,SBr),e(vr,Wt),M(Bx,Wt,null),e(Wt,RBr),e(Wt,P7e),e(P7e,BBr),e(Wt,PBr),e(Wt,Kc),e(Kc,IBr),e(Kc,I7e),e(I7e,qBr),e(Kc,NBr),e(Kc,kY),e(kY,jBr),e(Kc,DBr),e(Wt,GBr),M(rC,Wt,null),e(vr,OBr),e(vr,Wr),M(Px,Wr,null),e(Wr,VBr),e(Wr,q7e),e(q7e,XBr),e(Wr,zBr),e(Wr,Tn),e(Tn,QBr),e(Tn,N7e),e(N7e,WBr),e(Tn,HBr),e(Tn,j7e),e(j7e,UBr),e(Tn,JBr),e(Tn,D7e),e(D7e,YBr),e(Tn,KBr),e(Wr,ZBr),e(Wr,Ge),e(Ge,tC),e(tC,G7e),e(G7e,ePr),e(tC,oPr),e(tC,SY),e(SY,rPr),e(tC,tPr),e(Ge,aPr),e(Ge,aC),e(aC,O7e),e(O7e,nPr),e(aC,sPr),e(aC,RY),e(RY,lPr),e(aC,iPr),e(Ge,dPr),e(Ge,nC),e(nC,V7e),e(V7e,cPr),e(nC,fPr),e(nC,BY),e(BY,mPr),e(nC,gPr),e(Ge,hPr),e(Ge,sC),e(sC,X7e),e(X7e,pPr),e(sC,uPr),e(sC,PY),e(PY,_Pr),e(sC,bPr),e(Ge,vPr),e(Ge,lC),e(lC,z7e),e(z7e,FPr),e(lC,TPr),e(lC,IY),e(IY,MPr),e(lC,EPr),e(Ge,CPr),e(Ge,iC),e(iC,Q7e),e(Q7e,wPr),e(iC,APr),e(iC,qY),e(qY,yPr),e(iC,LPr),e(Ge,xPr),e(Ge,dC),e(dC,W7e),e(W7e,$Pr),e(dC,kPr),e(dC,NY),e(NY,SPr),e(dC,RPr),e(Ge,BPr),e(Ge,cC),e(cC,H7e),e(H7e,PPr),e(cC,IPr),e(cC,jY),e(jY,qPr),e(cC,NPr),e(Wr,jPr),M(fC,Wr,null),b(f,Cqe,_),b(f,Zc,_),e(Zc,mC),e(mC,U7e),M(Ix,U7e,null),e(Zc,DPr),e(Zc,J7e),e(J7e,GPr),b(f,wqe,_),b(f,Fr,_),M(qx,Fr,null),e(Fr,OPr),e(Fr,ef),e(ef,VPr),e(ef,DY),e(DY,XPr),e(ef,zPr),e(ef,GY),e(GY,QPr),e(ef,WPr),e(Fr,HPr),e(Fr,Nx),e(Nx,UPr),e(Nx,Y7e),e(Y7e,JPr),e(Nx,YPr),e(Fr,KPr),e(Fr,Ht),M(jx,Ht,null),e(Ht,ZPr),e(Ht,K7e),e(K7e,eIr),e(Ht,oIr),e(Ht,of),e(of,rIr),e(of,Z7e),e(Z7e,tIr),e(of,aIr),e(of,OY),e(OY,nIr),e(of,sIr),e(Ht,lIr),M(gC,Ht,null),e(Fr,iIr),e(Fr,Hr),M(Dx,Hr,null),e(Hr,dIr),e(Hr,eMe),e(eMe,cIr),e(Hr,fIr),e(Hr,Mn),e(Mn,mIr),e(Mn,oMe),e(oMe,gIr),e(Mn,hIr),e(Mn,rMe),e(rMe,pIr),e(Mn,uIr),e(Mn,tMe),e(tMe,_Ir),e(Mn,bIr),e(Hr,vIr),e(Hr,aMe),e(aMe,hC),e(hC,nMe),e(nMe,FIr),e(hC,TIr),e(hC,VY),e(VY,MIr),e(hC,EIr),e(Hr,CIr),M(pC,Hr,null),b(f,Aqe,_),b(f,rf,_),e(rf,uC),e(uC,sMe),M(Gx,sMe,null),e(rf,wIr),e(rf,lMe),e(lMe,AIr),b(f,yqe,_),b(f,Tr,_),M(Ox,Tr,null),e(Tr,yIr),e(Tr,tf),e(tf,LIr),e(tf,XY),e(XY,xIr),e(tf,$Ir),e(tf,zY),e(zY,kIr),e(tf,SIr),e(Tr,RIr),e(Tr,Vx),e(Vx,BIr),e(Vx,iMe),e(iMe,PIr),e(Vx,IIr),e(Tr,qIr),e(Tr,Ut),M(Xx,Ut,null),e(Ut,NIr),e(Ut,dMe),e(dMe,jIr),e(Ut,DIr),e(Ut,af),e(af,GIr),e(af,cMe),e(cMe,OIr),e(af,VIr),e(af,QY),e(QY,XIr),e(af,zIr),e(Ut,QIr),M(_C,Ut,null),e(Tr,WIr),e(Tr,Ur),M(zx,Ur,null),e(Ur,HIr),e(Ur,fMe),e(fMe,UIr),e(Ur,JIr),e(Ur,En),e(En,YIr),e(En,mMe),e(mMe,KIr),e(En,ZIr),e(En,gMe),e(gMe,eqr),e(En,oqr),e(En,hMe),e(hMe,rqr),e(En,tqr),e(Ur,aqr),e(Ur,Qx),e(Qx,bC),e(bC,pMe),e(pMe,nqr),e(bC,sqr),e(bC,WY),e(WY,lqr),e(bC,iqr),e(Qx,dqr),e(Qx,vC),e(vC,uMe),e(uMe,cqr),e(vC,fqr),e(vC,HY),e(HY,mqr),e(vC,gqr),e(Ur,hqr),M(FC,Ur,null),b(f,Lqe,_),b(f,nf,_),e(nf,TC),e(TC,_Me),M(Wx,_Me,null),e(nf,pqr),e(nf,bMe),e(bMe,uqr),b(f,xqe,_),b(f,Mr,_),M(Hx,Mr,null),e(Mr,_qr),e(Mr,sf),e(sf,bqr),e(sf,UY),e(UY,vqr),e(sf,Fqr),e(sf,JY),e(JY,Tqr),e(sf,Mqr),e(Mr,Eqr),e(Mr,Ux),e(Ux,Cqr),e(Ux,vMe),e(vMe,wqr),e(Ux,Aqr),e(Mr,yqr),e(Mr,Jt),M(Jx,Jt,null),e(Jt,Lqr),e(Jt,FMe),e(FMe,xqr),e(Jt,$qr),e(Jt,lf),e(lf,kqr),e(lf,TMe),e(TMe,Sqr),e(lf,Rqr),e(lf,YY),e(YY,Bqr),e(lf,Pqr),e(Jt,Iqr),M(MC,Jt,null),e(Mr,qqr),e(Mr,Jr),M(Yx,Jr,null),e(Jr,Nqr),e(Jr,MMe),e(MMe,jqr),e(Jr,Dqr),e(Jr,Cn),e(Cn,Gqr),e(Cn,EMe),e(EMe,Oqr),e(Cn,Vqr),e(Cn,CMe),e(CMe,Xqr),e(Cn,zqr),e(Cn,wMe),e(wMe,Qqr),e(Cn,Wqr),e(Jr,Hqr),e(Jr,AMe),e(AMe,EC),e(EC,yMe),e(yMe,Uqr),e(EC,Jqr),e(EC,KY),e(KY,Yqr),e(EC,Kqr),e(Jr,Zqr),M(CC,Jr,null),$qe=!0},p(f,[_]){const Kx={};_&2&&(Kx.$$scope={dirty:_,ctx:f}),_f.$set(Kx);const LMe={};_&2&&(LMe.$$scope={dirty:_,ctx:f}),pg.$set(LMe);const xMe={};_&2&&(xMe.$$scope={dirty:_,ctx:f}),Wg.$set(xMe);const $Me={};_&2&&($Me.$$scope={dirty:_,ctx:f}),Th.$set($Me);const Zx={};_&2&&(Zx.$$scope={dirty:_,ctx:f}),Mh.$set(Zx);const kMe={};_&2&&(kMe.$$scope={dirty:_,ctx:f}),Dh.$set(kMe);const wn={};_&2&&(wn.$$scope={dirty:_,ctx:f}),Gh.$set(wn);const SMe={};_&2&&(SMe.$$scope={dirty:_,ctx:f}),Xh.$set(SMe);const RMe={};_&2&&(RMe.$$scope={dirty:_,ctx:f}),Ru.$set(RMe);const BMe={};_&2&&(BMe.$$scope={dirty:_,ctx:f}),Pu.$set(BMe);const e9={};_&2&&(e9.$$scope={dirty:_,ctx:f}),E_.$set(e9);const PMe={};_&2&&(PMe.$$scope={dirty:_,ctx:f}),w_.$set(PMe);const o9={};_&2&&(o9.$$scope={dirty:_,ctx:f}),i2.$set(o9);const IMe={};_&2&&(IMe.$$scope={dirty:_,ctx:f}),c2.$set(IMe);const r9={};_&2&&(r9.$$scope={dirty:_,ctx:f}),W2.$set(r9);const qMe={};_&2&&(qMe.$$scope={dirty:_,ctx:f}),U2.$set(qMe);const NMe={};_&2&&(NMe.$$scope={dirty:_,ctx:f}),h1.$set(NMe);const jMe={};_&2&&(jMe.$$scope={dirty:_,ctx:f}),u1.$set(jMe);const df={};_&2&&(df.$$scope={dirty:_,ctx:f}),fb.$set(df);const DMe={};_&2&&(DMe.$$scope={dirty:_,ctx:f}),gb.$set(DMe);const GMe={};_&2&&(GMe.$$scope={dirty:_,ctx:f}),Xb.$set(GMe);const OMe={};_&2&&(OMe.$$scope={dirty:_,ctx:f}),Qb.$set(OMe);const t9={};_&2&&(t9.$$scope={dirty:_,ctx:f}),Zb.$set(t9);const VMe={};_&2&&(VMe.$$scope={dirty:_,ctx:f}),ov.$set(VMe);const XMe={};_&2&&(XMe.$$scope={dirty:_,ctx:f}),Iv.$set(XMe);const zMe={};_&2&&(zMe.$$scope={dirty:_,ctx:f}),Nv.$set(zMe);const Kr={};_&2&&(Kr.$$scope={dirty:_,ctx:f}),wF.$set(Kr);const a9={};_&2&&(a9.$$scope={dirty:_,ctx:f}),yF.$set(a9);const QMe={};_&2&&(QMe.$$scope={dirty:_,ctx:f}),$F.$set(QMe);const n9={};_&2&&(n9.$$scope={dirty:_,ctx:f}),SF.$set(n9);const WMe={};_&2&&(WMe.$$scope={dirty:_,ctx:f}),zF.$set(WMe);const Zr={};_&2&&(Zr.$$scope={dirty:_,ctx:f}),WF.$set(Zr);const HMe={};_&2&&(HMe.$$scope={dirty:_,ctx:f}),JF.$set(HMe);const cf={};_&2&&(cf.$$scope={dirty:_,ctx:f}),KF.$set(cf);const UMe={};_&2&&(UMe.$$scope={dirty:_,ctx:f}),i0.$set(UMe);const JMe={};_&2&&(JMe.$$scope={dirty:_,ctx:f}),c0.$set(JMe);const L={};_&2&&(L.$$scope={dirty:_,ctx:f}),u0.$set(L);const wC={};_&2&&(wC.$$scope={dirty:_,ctx:f}),b0.$set(wC);const YMe={};_&2&&(YMe.$$scope={dirty:_,ctx:f}),L0.$set(YMe);const KMe={};_&2&&(KMe.$$scope={dirty:_,ctx:f}),$0.$set(KMe);const AC={};_&2&&(AC.$$scope={dirty:_,ctx:f}),B0.$set(AC);const ZMe={};_&2&&(ZMe.$$scope={dirty:_,ctx:f}),I0.$set(ZMe);const e4e={};_&2&&(e4e.$$scope={dirty:_,ctx:f}),O0.$set(e4e);const yC={};_&2&&(yC.$$scope={dirty:_,ctx:f}),X0.$set(yC);const o4e={};_&2&&(o4e.$$scope={dirty:_,ctx:f}),U0.$set(o4e);const r4e={};_&2&&(r4e.$$scope={dirty:_,ctx:f}),Y0.$set(r4e);const LC={};_&2&&(LC.$$scope={dirty:_,ctx:f}),o6.$set(LC);const t4e={};_&2&&(t4e.$$scope={dirty:_,ctx:f}),t6.$set(t4e);const a4e={};_&2&&(a4e.$$scope={dirty:_,ctx:f}),s6.$set(a4e);const xC={};_&2&&(xC.$$scope={dirty:_,ctx:f}),i6.$set(xC);const n4e={};_&2&&(n4e.$$scope={dirty:_,ctx:f}),h6.$set(n4e);const s4e={};_&2&&(s4e.$$scope={dirty:_,ctx:f}),u6.$set(s4e);const $C={};_&2&&($C.$$scope={dirty:_,ctx:f}),v6.$set($C);const l4e={};_&2&&(l4e.$$scope={dirty:_,ctx:f}),T6.$set(l4e);const i4e={};_&2&&(i4e.$$scope={dirty:_,ctx:f}),mT.$set(i4e);const kC={};_&2&&(kC.$$scope={dirty:_,ctx:f}),hT.$set(kC);const d4e={};_&2&&(d4e.$$scope={dirty:_,ctx:f}),NT.$set(d4e);const c4e={};_&2&&(c4e.$$scope={dirty:_,ctx:f}),DT.$set(c4e);const SC={};_&2&&(SC.$$scope={dirty:_,ctx:f}),ZT.$set(SC);const f4e={};_&2&&(f4e.$$scope={dirty:_,ctx:f}),o7.$set(f4e);const m4e={};_&2&&(m4e.$$scope={dirty:_,ctx:f}),n7.$set(m4e);const RC={};_&2&&(RC.$$scope={dirty:_,ctx:f}),l7.$set(RC);const g4e={};_&2&&(g4e.$$scope={dirty:_,ctx:f}),L7.$set(g4e);const h4e={};_&2&&(h4e.$$scope={dirty:_,ctx:f}),$7.$set(h4e);const BC={};_&2&&(BC.$$scope={dirty:_,ctx:f}),G7.$set(BC);const p4e={};_&2&&(p4e.$$scope={dirty:_,ctx:f}),V7.$set(p4e);const u4e={};_&2&&(u4e.$$scope={dirty:_,ctx:f}),uM.$set(u4e);const PC={};_&2&&(PC.$$scope={dirty:_,ctx:f}),bM.$set(PC);const _4e={};_&2&&(_4e.$$scope={dirty:_,ctx:f}),IM.$set(_4e);const b4e={};_&2&&(b4e.$$scope={dirty:_,ctx:f}),NM.$set(b4e);const IC={};_&2&&(IC.$$scope={dirty:_,ctx:f}),GM.$set(IC);const v4e={};_&2&&(v4e.$$scope={dirty:_,ctx:f}),VM.$set(v4e);const F4e={};_&2&&(F4e.$$scope={dirty:_,ctx:f}),zM.$set(F4e);const qC={};_&2&&(qC.$$scope={dirty:_,ctx:f}),WM.$set(qC);const T4e={};_&2&&(T4e.$$scope={dirty:_,ctx:f}),h4.$set(T4e);const M4e={};_&2&&(M4e.$$scope={dirty:_,ctx:f}),u4.$set(M4e);const NC={};_&2&&(NC.$$scope={dirty:_,ctx:f}),q4.$set(NC);const E4e={};_&2&&(E4e.$$scope={dirty:_,ctx:f}),j4.$set(E4e);const C4e={};_&2&&(C4e.$$scope={dirty:_,ctx:f}),G4.$set(C4e);const jC={};_&2&&(jC.$$scope={dirty:_,ctx:f}),V4.$set(jC);const w4e={};_&2&&(w4e.$$scope={dirty:_,ctx:f}),z4.$set(w4e);const A4e={};_&2&&(A4e.$$scope={dirty:_,ctx:f}),W4.$set(A4e);const DC={};_&2&&(DC.$$scope={dirty:_,ctx:f}),vE.$set(DC);const y4e={};_&2&&(y4e.$$scope={dirty:_,ctx:f}),TE.$set(y4e);const L4e={};_&2&&(L4e.$$scope={dirty:_,ctx:f}),kE.$set(L4e);const GC={};_&2&&(GC.$$scope={dirty:_,ctx:f}),RE.$set(GC);const x4e={};_&2&&(x4e.$$scope={dirty:_,ctx:f}),QE.$set(x4e);const $4e={};_&2&&($4e.$$scope={dirty:_,ctx:f}),HE.$set($4e);const OC={};_&2&&(OC.$$scope={dirty:_,ctx:f}),n5.$set(OC);const k4e={};_&2&&(k4e.$$scope={dirty:_,ctx:f}),l5.$set(k4e);const S4e={};_&2&&(S4e.$$scope={dirty:_,ctx:f}),_5.$set(S4e);const VC={};_&2&&(VC.$$scope={dirty:_,ctx:f}),v5.$set(VC);const R4e={};_&2&&(R4e.$$scope={dirty:_,ctx:f}),$5.$set(R4e);const B4e={};_&2&&(B4e.$$scope={dirty:_,ctx:f}),S5.$set(B4e);const XC={};_&2&&(XC.$$scope={dirty:_,ctx:f}),V5.$set(XC);const P4e={};_&2&&(P4e.$$scope={dirty:_,ctx:f}),z5.$set(P4e);const I4e={};_&2&&(I4e.$$scope={dirty:_,ctx:f}),eC.$set(I4e);const zC={};_&2&&(zC.$$scope={dirty:_,ctx:f}),rC.$set(zC);const q4e={};_&2&&(q4e.$$scope={dirty:_,ctx:f}),fC.$set(q4e);const N4e={};_&2&&(N4e.$$scope={dirty:_,ctx:f}),gC.$set(N4e);const QC={};_&2&&(QC.$$scope={dirty:_,ctx:f}),pC.$set(QC);const j4e={};_&2&&(j4e.$$scope={dirty:_,ctx:f}),_C.$set(j4e);const D4e={};_&2&&(D4e.$$scope={dirty:_,ctx:f}),FC.$set(D4e);const WC={};_&2&&(WC.$$scope={dirty:_,ctx:f}),MC.$set(WC);const G4e={};_&2&&(G4e.$$scope={dirty:_,ctx:f}),CC.$set(G4e)},i(f){$qe||(E(d.$$.fragment,f),E(Ma.$$.fragment,f),E(Ww.$$.fragment,f),E(Hw.$$.fragment,f),E(_f.$$.fragment,f),E(Uw.$$.fragment,f),E(Jw.$$.fragment,f),E(Zw.$$.fragment,f),E(pg.$$.fragment,f),E(eA.$$.fragment,f),E(oA.$$.fragment,f),E(rA.$$.fragment,f),E(nA.$$.fragment,f),E(Wg.$$.fragment,f),E(sA.$$.fragment,f),E(lA.$$.fragment,f),E(iA.$$.fragment,f),E(fA.$$.fragment,f),E(Th.$$.fragment,f),E(Mh.$$.fragment,f),E(mA.$$.fragment,f),E(gA.$$.fragment,f),E(hA.$$.fragment,f),E(_A.$$.fragment,f),E(Dh.$$.fragment,f),E(Gh.$$.fragment,f),E(bA.$$.fragment,f),E(vA.$$.fragment,f),E(FA.$$.fragment,f),E(MA.$$.fragment,f),E(Xh.$$.fragment,f),E(EA.$$.fragment,f),E(Ru.$$.fragment,f),E(CA.$$.fragment,f),E(wA.$$.fragment,f),E(yA.$$.fragment,f),E(Pu.$$.fragment,f),E(LA.$$.fragment,f),E(E_.$$.fragment,f),E(xA.$$.fragment,f),E($A.$$.fragment,f),E(SA.$$.fragment,f),E(w_.$$.fragment,f),E(RA.$$.fragment,f),E(i2.$$.fragment,f),E(BA.$$.fragment,f),E(PA.$$.fragment,f),E(qA.$$.fragment,f),E(c2.$$.fragment,f),E(NA.$$.fragment,f),E(W2.$$.fragment,f),E(jA.$$.fragment,f),E(DA.$$.fragment,f),E(OA.$$.fragment,f),E(U2.$$.fragment,f),E(VA.$$.fragment,f),E(h1.$$.fragment,f),E(XA.$$.fragment,f),E(zA.$$.fragment,f),E(WA.$$.fragment,f),E(u1.$$.fragment,f),E(HA.$$.fragment,f),E(fb.$$.fragment,f),E(UA.$$.fragment,f),E(JA.$$.fragment,f),E(KA.$$.fragment,f),E(gb.$$.fragment,f),E(ZA.$$.fragment,f),E(Xb.$$.fragment,f),E(ey.$$.fragment,f),E(oy.$$.fragment,f),E(ty.$$.fragment,f),E(Qb.$$.fragment,f),E(ay.$$.fragment,f),E(Zb.$$.fragment,f),E(ny.$$.fragment,f),E(sy.$$.fragment,f),E(iy.$$.fragment,f),E(ov.$$.fragment,f),E(dy.$$.fragment,f),E(Iv.$$.fragment,f),E(cy.$$.fragment,f),E(fy.$$.fragment,f),E(gy.$$.fragment,f),E(Nv.$$.fragment,f),E(hy.$$.fragment,f),E(wF.$$.fragment,f),E(py.$$.fragment,f),E(uy.$$.fragment,f),E(by.$$.fragment,f),E(yF.$$.fragment,f),E(vy.$$.fragment,f),E($F.$$.fragment,f),E(Fy.$$.fragment,f),E(Ty.$$.fragment,f),E(Ey.$$.fragment,f),E(SF.$$.fragment,f),E(Cy.$$.fragment,f),E(zF.$$.fragment,f),E(wy.$$.fragment,f),E(Ay.$$.fragment,f),E(Ly.$$.fragment,f),E(WF.$$.fragment,f),E(xy.$$.fragment,f),E(JF.$$.fragment,f),E($y.$$.fragment,f),E(ky.$$.fragment,f),E(Ry.$$.fragment,f),E(KF.$$.fragment,f),E(By.$$.fragment,f),E(i0.$$.fragment,f),E(Py.$$.fragment,f),E(Iy.$$.fragment,f),E(Ny.$$.fragment,f),E(c0.$$.fragment,f),E(jy.$$.fragment,f),E(u0.$$.fragment,f),E(Dy.$$.fragment,f),E(Gy.$$.fragment,f),E(Vy.$$.fragment,f),E(b0.$$.fragment,f),E(Xy.$$.fragment,f),E(L0.$$.fragment,f),E(zy.$$.fragment,f),E(Qy.$$.fragment,f),E(Hy.$$.fragment,f),E($0.$$.fragment,f),E(Uy.$$.fragment,f),E(B0.$$.fragment,f),E(Yy.$$.fragment,f),E(Ky.$$.fragment,f),E(eL.$$.fragment,f),E(I0.$$.fragment,f),E(oL.$$.fragment,f),E(O0.$$.fragment,f),E(rL.$$.fragment,f),E(tL.$$.fragment,f),E(nL.$$.fragment,f),E(X0.$$.fragment,f),E(sL.$$.fragment,f),E(U0.$$.fragment,f),E(lL.$$.fragment,f),E(iL.$$.fragment,f),E(cL.$$.fragment,f),E(Y0.$$.fragment,f),E(fL.$$.fragment,f),E(o6.$$.fragment,f),E(gL.$$.fragment,f),E(hL.$$.fragment,f),E(uL.$$.fragment,f),E(t6.$$.fragment,f),E(_L.$$.fragment,f),E(s6.$$.fragment,f),E(bL.$$.fragment,f),E(vL.$$.fragment,f),E(TL.$$.fragment,f),E(i6.$$.fragment,f),E(ML.$$.fragment,f),E(h6.$$.fragment,f),E(EL.$$.fragment,f),E(CL.$$.fragment,f),E(AL.$$.fragment,f),E(u6.$$.fragment,f),E(yL.$$.fragment,f),E(v6.$$.fragment,f),E(LL.$$.fragment,f),E(xL.$$.fragment,f),E(kL.$$.fragment,f),E(T6.$$.fragment,f),E(SL.$$.fragment,f),E(mT.$$.fragment,f),E(RL.$$.fragment,f),E(BL.$$.fragment,f),E(IL.$$.fragment,f),E(hT.$$.fragment,f),E(qL.$$.fragment,f),E(NT.$$.fragment,f),E(NL.$$.fragment,f),E(jL.$$.fragment,f),E(GL.$$.fragment,f),E(DT.$$.fragment,f),E(OL.$$.fragment,f),E(ZT.$$.fragment,f),E(VL.$$.fragment,f),E(XL.$$.fragment,f),E(QL.$$.fragment,f),E(o7.$$.fragment,f),E(WL.$$.fragment,f),E(n7.$$.fragment,f),E(HL.$$.fragment,f),E(UL.$$.fragment,f),E(YL.$$.fragment,f),E(l7.$$.fragment,f),E(KL.$$.fragment,f),E(L7.$$.fragment,f),E(ZL.$$.fragment,f),E(e8.$$.fragment,f),E(r8.$$.fragment,f),E($7.$$.fragment,f),E(t8.$$.fragment,f),E(G7.$$.fragment,f),E(a8.$$.fragment,f),E(n8.$$.fragment,f),E(l8.$$.fragment,f),E(V7.$$.fragment,f),E(i8.$$.fragment,f),E(uM.$$.fragment,f),E(d8.$$.fragment,f),E(c8.$$.fragment,f),E(m8.$$.fragment,f),E(bM.$$.fragment,f),E(g8.$$.fragment,f),E(IM.$$.fragment,f),E(h8.$$.fragment,f),E(p8.$$.fragment,f),E(_8.$$.fragment,f),E(NM.$$.fragment,f),E(b8.$$.fragment,f),E(GM.$$.fragment,f),E(F8.$$.fragment,f),E(T8.$$.fragment,f),E(E8.$$.fragment,f),E(VM.$$.fragment,f),E(C8.$$.fragment,f),E(zM.$$.fragment,f),E(w8.$$.fragment,f),E(A8.$$.fragment,f),E(L8.$$.fragment,f),E(WM.$$.fragment,f),E(x8.$$.fragment,f),E(h4.$$.fragment,f),E($8.$$.fragment,f),E(k8.$$.fragment,f),E(R8.$$.fragment,f),E(u4.$$.fragment,f),E(B8.$$.fragment,f),E(q4.$$.fragment,f),E(P8.$$.fragment,f),E(I8.$$.fragment,f),E(N8.$$.fragment,f),E(j4.$$.fragment,f),E(j8.$$.fragment,f),E(G4.$$.fragment,f),E(D8.$$.fragment,f),E(G8.$$.fragment,f),E(V8.$$.fragment,f),E(V4.$$.fragment,f),E(X8.$$.fragment,f),E(z4.$$.fragment,f),E(z8.$$.fragment,f),E(Q8.$$.fragment,f),E(H8.$$.fragment,f),E(W4.$$.fragment,f),E(U8.$$.fragment,f),E(vE.$$.fragment,f),E(J8.$$.fragment,f),E(Y8.$$.fragment,f),E(Z8.$$.fragment,f),E(TE.$$.fragment,f),E(ex.$$.fragment,f),E(kE.$$.fragment,f),E(ox.$$.fragment,f),E(rx.$$.fragment,f),E(ax.$$.fragment,f),E(RE.$$.fragment,f),E(nx.$$.fragment,f),E(QE.$$.fragment,f),E(sx.$$.fragment,f),E(lx.$$.fragment,f),E(dx.$$.fragment,f),E(HE.$$.fragment,f),E(cx.$$.fragment,f),E(n5.$$.fragment,f),E(fx.$$.fragment,f),E(mx.$$.fragment,f),E(hx.$$.fragment,f),E(l5.$$.fragment,f),E(px.$$.fragment,f),E(_5.$$.fragment,f),E(ux.$$.fragment,f),E(_x.$$.fragment,f),E(vx.$$.fragment,f),E(v5.$$.fragment,f),E(Fx.$$.fragment,f),E($5.$$.fragment,f),E(Tx.$$.fragment,f),E(Mx.$$.fragment,f),E(Cx.$$.fragment,f),E(S5.$$.fragment,f),E(wx.$$.fragment,f),E(V5.$$.fragment,f),E(Ax.$$.fragment,f),E(yx.$$.fragment,f),E(xx.$$.fragment,f),E(z5.$$.fragment,f),E($x.$$.fragment,f),E(eC.$$.fragment,f),E(kx.$$.fragment,f),E(Sx.$$.fragment,f),E(Bx.$$.fragment,f),E(rC.$$.fragment,f),E(Px.$$.fragment,f),E(fC.$$.fragment,f),E(Ix.$$.fragment,f),E(qx.$$.fragment,f),E(jx.$$.fragment,f),E(gC.$$.fragment,f),E(Dx.$$.fragment,f),E(pC.$$.fragment,f),E(Gx.$$.fragment,f),E(Ox.$$.fragment,f),E(Xx.$$.fragment,f),E(_C.$$.fragment,f),E(zx.$$.fragment,f),E(FC.$$.fragment,f),E(Wx.$$.fragment,f),E(Hx.$$.fragment,f),E(Jx.$$.fragment,f),E(MC.$$.fragment,f),E(Yx.$$.fragment,f),E(CC.$$.fragment,f),$qe=!0)},o(f){C(d.$$.fragment,f),C(Ma.$$.fragment,f),C(Ww.$$.fragment,f),C(Hw.$$.fragment,f),C(_f.$$.fragment,f),C(Uw.$$.fragment,f),C(Jw.$$.fragment,f),C(Zw.$$.fragment,f),C(pg.$$.fragment,f),C(eA.$$.fragment,f),C(oA.$$.fragment,f),C(rA.$$.fragment,f),C(nA.$$.fragment,f),C(Wg.$$.fragment,f),C(sA.$$.fragment,f),C(lA.$$.fragment,f),C(iA.$$.fragment,f),C(fA.$$.fragment,f),C(Th.$$.fragment,f),C(Mh.$$.fragment,f),C(mA.$$.fragment,f),C(gA.$$.fragment,f),C(hA.$$.fragment,f),C(_A.$$.fragment,f),C(Dh.$$.fragment,f),C(Gh.$$.fragment,f),C(bA.$$.fragment,f),C(vA.$$.fragment,f),C(FA.$$.fragment,f),C(MA.$$.fragment,f),C(Xh.$$.fragment,f),C(EA.$$.fragment,f),C(Ru.$$.fragment,f),C(CA.$$.fragment,f),C(wA.$$.fragment,f),C(yA.$$.fragment,f),C(Pu.$$.fragment,f),C(LA.$$.fragment,f),C(E_.$$.fragment,f),C(xA.$$.fragment,f),C($A.$$.fragment,f),C(SA.$$.fragment,f),C(w_.$$.fragment,f),C(RA.$$.fragment,f),C(i2.$$.fragment,f),C(BA.$$.fragment,f),C(PA.$$.fragment,f),C(qA.$$.fragment,f),C(c2.$$.fragment,f),C(NA.$$.fragment,f),C(W2.$$.fragment,f),C(jA.$$.fragment,f),C(DA.$$.fragment,f),C(OA.$$.fragment,f),C(U2.$$.fragment,f),C(VA.$$.fragment,f),C(h1.$$.fragment,f),C(XA.$$.fragment,f),C(zA.$$.fragment,f),C(WA.$$.fragment,f),C(u1.$$.fragment,f),C(HA.$$.fragment,f),C(fb.$$.fragment,f),C(UA.$$.fragment,f),C(JA.$$.fragment,f),C(KA.$$.fragment,f),C(gb.$$.fragment,f),C(ZA.$$.fragment,f),C(Xb.$$.fragment,f),C(ey.$$.fragment,f),C(oy.$$.fragment,f),C(ty.$$.fragment,f),C(Qb.$$.fragment,f),C(ay.$$.fragment,f),C(Zb.$$.fragment,f),C(ny.$$.fragment,f),C(sy.$$.fragment,f),C(iy.$$.fragment,f),C(ov.$$.fragment,f),C(dy.$$.fragment,f),C(Iv.$$.fragment,f),C(cy.$$.fragment,f),C(fy.$$.fragment,f),C(gy.$$.fragment,f),C(Nv.$$.fragment,f),C(hy.$$.fragment,f),C(wF.$$.fragment,f),C(py.$$.fragment,f),C(uy.$$.fragment,f),C(by.$$.fragment,f),C(yF.$$.fragment,f),C(vy.$$.fragment,f),C($F.$$.fragment,f),C(Fy.$$.fragment,f),C(Ty.$$.fragment,f),C(Ey.$$.fragment,f),C(SF.$$.fragment,f),C(Cy.$$.fragment,f),C(zF.$$.fragment,f),C(wy.$$.fragment,f),C(Ay.$$.fragment,f),C(Ly.$$.fragment,f),C(WF.$$.fragment,f),C(xy.$$.fragment,f),C(JF.$$.fragment,f),C($y.$$.fragment,f),C(ky.$$.fragment,f),C(Ry.$$.fragment,f),C(KF.$$.fragment,f),C(By.$$.fragment,f),C(i0.$$.fragment,f),C(Py.$$.fragment,f),C(Iy.$$.fragment,f),C(Ny.$$.fragment,f),C(c0.$$.fragment,f),C(jy.$$.fragment,f),C(u0.$$.fragment,f),C(Dy.$$.fragment,f),C(Gy.$$.fragment,f),C(Vy.$$.fragment,f),C(b0.$$.fragment,f),C(Xy.$$.fragment,f),C(L0.$$.fragment,f),C(zy.$$.fragment,f),C(Qy.$$.fragment,f),C(Hy.$$.fragment,f),C($0.$$.fragment,f),C(Uy.$$.fragment,f),C(B0.$$.fragment,f),C(Yy.$$.fragment,f),C(Ky.$$.fragment,f),C(eL.$$.fragment,f),C(I0.$$.fragment,f),C(oL.$$.fragment,f),C(O0.$$.fragment,f),C(rL.$$.fragment,f),C(tL.$$.fragment,f),C(nL.$$.fragment,f),C(X0.$$.fragment,f),C(sL.$$.fragment,f),C(U0.$$.fragment,f),C(lL.$$.fragment,f),C(iL.$$.fragment,f),C(cL.$$.fragment,f),C(Y0.$$.fragment,f),C(fL.$$.fragment,f),C(o6.$$.fragment,f),C(gL.$$.fragment,f),C(hL.$$.fragment,f),C(uL.$$.fragment,f),C(t6.$$.fragment,f),C(_L.$$.fragment,f),C(s6.$$.fragment,f),C(bL.$$.fragment,f),C(vL.$$.fragment,f),C(TL.$$.fragment,f),C(i6.$$.fragment,f),C(ML.$$.fragment,f),C(h6.$$.fragment,f),C(EL.$$.fragment,f),C(CL.$$.fragment,f),C(AL.$$.fragment,f),C(u6.$$.fragment,f),C(yL.$$.fragment,f),C(v6.$$.fragment,f),C(LL.$$.fragment,f),C(xL.$$.fragment,f),C(kL.$$.fragment,f),C(T6.$$.fragment,f),C(SL.$$.fragment,f),C(mT.$$.fragment,f),C(RL.$$.fragment,f),C(BL.$$.fragment,f),C(IL.$$.fragment,f),C(hT.$$.fragment,f),C(qL.$$.fragment,f),C(NT.$$.fragment,f),C(NL.$$.fragment,f),C(jL.$$.fragment,f),C(GL.$$.fragment,f),C(DT.$$.fragment,f),C(OL.$$.fragment,f),C(ZT.$$.fragment,f),C(VL.$$.fragment,f),C(XL.$$.fragment,f),C(QL.$$.fragment,f),C(o7.$$.fragment,f),C(WL.$$.fragment,f),C(n7.$$.fragment,f),C(HL.$$.fragment,f),C(UL.$$.fragment,f),C(YL.$$.fragment,f),C(l7.$$.fragment,f),C(KL.$$.fragment,f),C(L7.$$.fragment,f),C(ZL.$$.fragment,f),C(e8.$$.fragment,f),C(r8.$$.fragment,f),C($7.$$.fragment,f),C(t8.$$.fragment,f),C(G7.$$.fragment,f),C(a8.$$.fragment,f),C(n8.$$.fragment,f),C(l8.$$.fragment,f),C(V7.$$.fragment,f),C(i8.$$.fragment,f),C(uM.$$.fragment,f),C(d8.$$.fragment,f),C(c8.$$.fragment,f),C(m8.$$.fragment,f),C(bM.$$.fragment,f),C(g8.$$.fragment,f),C(IM.$$.fragment,f),C(h8.$$.fragment,f),C(p8.$$.fragment,f),C(_8.$$.fragment,f),C(NM.$$.fragment,f),C(b8.$$.fragment,f),C(GM.$$.fragment,f),C(F8.$$.fragment,f),C(T8.$$.fragment,f),C(E8.$$.fragment,f),C(VM.$$.fragment,f),C(C8.$$.fragment,f),C(zM.$$.fragment,f),C(w8.$$.fragment,f),C(A8.$$.fragment,f),C(L8.$$.fragment,f),C(WM.$$.fragment,f),C(x8.$$.fragment,f),C(h4.$$.fragment,f),C($8.$$.fragment,f),C(k8.$$.fragment,f),C(R8.$$.fragment,f),C(u4.$$.fragment,f),C(B8.$$.fragment,f),C(q4.$$.fragment,f),C(P8.$$.fragment,f),C(I8.$$.fragment,f),C(N8.$$.fragment,f),C(j4.$$.fragment,f),C(j8.$$.fragment,f),C(G4.$$.fragment,f),C(D8.$$.fragment,f),C(G8.$$.fragment,f),C(V8.$$.fragment,f),C(V4.$$.fragment,f),C(X8.$$.fragment,f),C(z4.$$.fragment,f),C(z8.$$.fragment,f),C(Q8.$$.fragment,f),C(H8.$$.fragment,f),C(W4.$$.fragment,f),C(U8.$$.fragment,f),C(vE.$$.fragment,f),C(J8.$$.fragment,f),C(Y8.$$.fragment,f),C(Z8.$$.fragment,f),C(TE.$$.fragment,f),C(ex.$$.fragment,f),C(kE.$$.fragment,f),C(ox.$$.fragment,f),C(rx.$$.fragment,f),C(ax.$$.fragment,f),C(RE.$$.fragment,f),C(nx.$$.fragment,f),C(QE.$$.fragment,f),C(sx.$$.fragment,f),C(lx.$$.fragment,f),C(dx.$$.fragment,f),C(HE.$$.fragment,f),C(cx.$$.fragment,f),C(n5.$$.fragment,f),C(fx.$$.fragment,f),C(mx.$$.fragment,f),C(hx.$$.fragment,f),C(l5.$$.fragment,f),C(px.$$.fragment,f),C(_5.$$.fragment,f),C(ux.$$.fragment,f),C(_x.$$.fragment,f),C(vx.$$.fragment,f),C(v5.$$.fragment,f),C(Fx.$$.fragment,f),C($5.$$.fragment,f),C(Tx.$$.fragment,f),C(Mx.$$.fragment,f),C(Cx.$$.fragment,f),C(S5.$$.fragment,f),C(wx.$$.fragment,f),C(V5.$$.fragment,f),C(Ax.$$.fragment,f),C(yx.$$.fragment,f),C(xx.$$.fragment,f),C(z5.$$.fragment,f),C($x.$$.fragment,f),C(eC.$$.fragment,f),C(kx.$$.fragment,f),C(Sx.$$.fragment,f),C(Bx.$$.fragment,f),C(rC.$$.fragment,f),C(Px.$$.fragment,f),C(fC.$$.fragment,f),C(Ix.$$.fragment,f),C(qx.$$.fragment,f),C(jx.$$.fragment,f),C(gC.$$.fragment,f),C(Dx.$$.fragment,f),C(pC.$$.fragment,f),C(Gx.$$.fragment,f),C(Ox.$$.fragment,f),C(Xx.$$.fragment,f),C(_C.$$.fragment,f),C(zx.$$.fragment,f),C(FC.$$.fragment,f),C(Wx.$$.fragment,f),C(Hx.$$.fragment,f),C(Jx.$$.fragment,f),C(MC.$$.fragment,f),C(Yx.$$.fragment,f),C(CC.$$.fragment,f),$qe=!1},d(f){t(g),f&&t(v),f&&t(p),w(d),f&&t(mf),f&&t(et),f&&t(qe),f&&t(Xe),f&&t(hf),w(Ma,f),f&&t(ze),f&&t(Ae),f&&t(Eo),f&&t(Ea),f&&t(yPe),f&&t(hi),w(Ww),f&&t(LPe),f&&t($n),f&&t(xPe),w(Hw,f),f&&t($Pe),f&&t(p$),f&&t(kPe),w(_f,f),f&&t(SPe),f&&t(pi),w(Uw),f&&t(RPe),f&&t(Co),w(Jw),w(Zw),w(pg),w(eA),f&&t(BPe),f&&t(_i),w(oA),f&&t(PPe),f&&t(wo),w(rA),w(nA),w(Wg),w(sA),f&&t(IPe),f&&t(bi),w(lA),f&&t(qPe),f&&t(Ao),w(iA),w(fA),w(Th),w(Mh),w(mA),f&&t(NPe),f&&t(vi),w(gA),f&&t(jPe),f&&t(yo),w(hA),w(_A),w(Dh),w(Gh),w(bA),f&&t(DPe),f&&t(Ti),w(vA),f&&t(GPe),f&&t(Lo),w(FA),w(MA),w(Xh),w(EA),w(Ru),f&&t(OPe),f&&t(Ci),w(CA),f&&t(VPe),f&&t(xo),w(wA),w(yA),w(Pu),w(LA),w(E_),f&&t(XPe),f&&t(yi),w(xA),f&&t(zPe),f&&t($o),w($A),w(SA),w(w_),w(RA),w(i2),f&&t(QPe),f&&t($i),w(BA),f&&t(WPe),f&&t(ko),w(PA),w(qA),w(c2),w(NA),w(W2),f&&t(HPe),f&&t(Ri),w(jA),f&&t(UPe),f&&t(So),w(DA),w(OA),w(U2),w(VA),w(h1),f&&t(JPe),f&&t(Ii),w(XA),f&&t(YPe),f&&t(Ro),w(zA),w(WA),w(u1),w(HA),w(fb),f&&t(KPe),f&&t(ji),w(UA),f&&t(ZPe),f&&t(Bo),w(JA),w(KA),w(gb),w(ZA),w(Xb),f&&t(eIe),f&&t(Oi),w(ey),f&&t(oIe),f&&t(Po),w(oy),w(ty),w(Qb),w(ay),w(Zb),f&&t(rIe),f&&t(zi),w(ny),f&&t(tIe),f&&t(Io),w(sy),w(iy),w(ov),w(dy),w(Iv),f&&t(aIe),f&&t(Hi),w(cy),f&&t(nIe),f&&t(qo),w(fy),w(gy),w(Nv),w(hy),w(wF),f&&t(sIe),f&&t(Yi),w(py),f&&t(lIe),f&&t(No),w(uy),w(by),w(yF),w(vy),w($F),f&&t(iIe),f&&t(ed),w(Fy),f&&t(dIe),f&&t(jo),w(Ty),w(Ey),w(SF),w(Cy),w(zF),f&&t(cIe),f&&t(td),w(wy),f&&t(fIe),f&&t(Do),w(Ay),w(Ly),w(WF),w(xy),w(JF),f&&t(mIe),f&&t(sd),w($y),f&&t(gIe),f&&t(Go),w(ky),w(Ry),w(KF),w(By),w(i0),f&&t(hIe),f&&t(dd),w(Py),f&&t(pIe),f&&t(Oo),w(Iy),w(Ny),w(c0),w(jy),w(u0),f&&t(uIe),f&&t(md),w(Dy),f&&t(_Ie),f&&t(Vo),w(Gy),w(Vy),w(b0),w(Xy),w(L0),f&&t(bIe),f&&t(pd),w(zy),f&&t(vIe),f&&t(Xo),w(Qy),w(Hy),w($0),w(Uy),w(B0),f&&t(FIe),f&&t(bd),w(Yy),f&&t(TIe),f&&t(zo),w(Ky),w(eL),w(I0),w(oL),w(O0),f&&t(MIe),f&&t(Td),w(rL),f&&t(EIe),f&&t(Qo),w(tL),w(nL),w(X0),w(sL),w(U0),f&&t(CIe),f&&t(wd),w(lL),f&&t(wIe),f&&t(Wo),w(iL),w(cL),w(Y0),w(fL),w(o6),f&&t(AIe),f&&t(Ld),w(gL),f&&t(yIe),f&&t(Ho),w(hL),w(uL),w(t6),w(_L),w(s6),f&&t(LIe),f&&t(kd),w(bL),f&&t(xIe),f&&t(Uo),w(vL),w(TL),w(i6),w(ML),w(h6),f&&t($Ie),f&&t(Bd),w(EL),f&&t(kIe),f&&t(Jo),w(CL),w(AL),w(u6),w(yL),w(v6),f&&t(SIe),f&&t(qd),w(LL),f&&t(RIe),f&&t(Yo),w(xL),w(kL),w(T6),w(SL),w(mT),f&&t(BIe),f&&t(Dd),w(RL),f&&t(PIe),f&&t(Ko),w(BL),w(IL),w(hT),w(qL),w(NT),f&&t(IIe),f&&t(Vd),w(NL),f&&t(qIe),f&&t(Zo),w(jL),w(GL),w(DT),w(OL),w(ZT),f&&t(NIe),f&&t(Qd),w(VL),f&&t(jIe),f&&t(er),w(XL),w(QL),w(o7),w(WL),w(n7),f&&t(DIe),f&&t(Jd),w(HL),f&&t(GIe),f&&t(or),w(UL),w(YL),w(l7),w(KL),w(L7),f&&t(OIe),f&&t(Zd),w(ZL),f&&t(VIe),f&&t(rr),w(e8),w(r8),w($7),w(t8),w(G7),f&&t(XIe),f&&t(rc),w(a8),f&&t(zIe),f&&t(tr),w(n8),w(l8),w(V7),w(i8),w(uM),f&&t(QIe),f&&t(nc),w(d8),f&&t(WIe),f&&t(ar),w(c8),w(m8),w(bM),w(g8),w(IM),f&&t(HIe),f&&t(ic),w(h8),f&&t(UIe),f&&t(nr),w(p8),w(_8),w(NM),w(b8),w(GM),f&&t(JIe),f&&t(fc),w(F8),f&&t(YIe),f&&t(sr),w(T8),w(E8),w(VM),w(C8),w(zM),f&&t(KIe),f&&t(hc),w(w8),f&&t(ZIe),f&&t(lr),w(A8),w(L8),w(WM),w(x8),w(h4),f&&t(eqe),f&&t(_c),w($8),f&&t(oqe),f&&t(ir),w(k8),w(R8),w(u4),w(B8),w(q4),f&&t(rqe),f&&t(Fc),w(P8),f&&t(tqe),f&&t(dr),w(I8),w(N8),w(j4),w(j8),w(G4),f&&t(aqe),f&&t(Ec),w(D8),f&&t(nqe),f&&t(cr),w(G8),w(V8),w(V4),w(X8),w(z4),f&&t(sqe),f&&t(Ac),w(z8),f&&t(lqe),f&&t(fr),w(Q8),w(H8),w(W4),w(U8),w(vE),f&&t(iqe),f&&t(xc),w(J8),f&&t(dqe),f&&t(mr),w(Y8),w(Z8),w(TE),w(ex),w(kE),f&&t(cqe),f&&t(Sc),w(ox),f&&t(fqe),f&&t(gr),w(rx),w(ax),w(RE),w(nx),w(QE),f&&t(mqe),f&&t(Pc),w(sx),f&&t(gqe),f&&t(hr),w(lx),w(dx),w(HE),w(cx),w(n5),f&&t(hqe),f&&t(Nc),w(fx),f&&t(pqe),f&&t(pr),w(mx),w(hx),w(l5),w(px),w(_5),f&&t(uqe),f&&t(Gc),w(ux),f&&t(_qe),f&&t(ur),w(_x),w(vx),w(v5),w(Fx),w($5),f&&t(bqe),f&&t(Xc),w(Tx),f&&t(vqe),f&&t(_r),w(Mx),w(Cx),w(S5),w(wx),w(V5),f&&t(Fqe),f&&t(Wc),w(Ax),f&&t(Tqe),f&&t(br),w(yx),w(xx),w(z5),w($x),w(eC),f&&t(Mqe),f&&t(Jc),w(kx),f&&t(Eqe),f&&t(vr),w(Sx),w(Bx),w(rC),w(Px),w(fC),f&&t(Cqe),f&&t(Zc),w(Ix),f&&t(wqe),f&&t(Fr),w(qx),w(jx),w(gC),w(Dx),w(pC),f&&t(Aqe),f&&t(rf),w(Gx),f&&t(yqe),f&&t(Tr),w(Ox),w(Xx),w(_C),w(zx),w(FC),f&&t(Lqe),f&&t(nf),w(Wx),f&&t(xqe),f&&t(Mr),w(Hx),w(Jx),w(MC),w(Yx),w(CC)}}}const Fyt={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForNextSentencePrediction",title:"TFAutoModelForNextSentencePrediction"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function Tyt(A){return Twt(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class Lyt extends _wt{constructor(g){super();bwt(this,g,Tyt,vyt,vwt,{})}}export{Lyt as default,Fyt as metadata};
