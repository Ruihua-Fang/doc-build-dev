import{S as h4t,i as p4t,s as u4t,e as a,k as l,w as F,t as o,M as _4t,c as n,d as t,m as i,a as s,x as T,h as r,b as c,F as e,g as b,y as M,q as E,o as C,B as w,v as b4t,L as I}from"../../chunks/vendor-6b77c823.js";import{T as ORr}from"../../chunks/Tip-39098574.js";import{D as R}from"../../chunks/Docstring-1088f2fb.js";import{C as B}from"../../chunks/CodeBlock-3a8b25a8.js";import{I as ee}from"../../chunks/IconCopyLink-7a11ce68.js";import{E as P}from"../../chunks/ExampleCodeBlock-5212b321.js";function v4t(A){let g,v,p,m,u,d,h,Fo,oi,of,Yr,ri,ti,cA,rf,Ie,Oe,ai,Mn,fA,En,Cn,mA,ni,wn,gA,si,tf,va;return{c(){g=a("p"),v=o("If your "),p=a("code"),m=o("NewModelConfig"),u=o(" is a subclass of "),d=a("code"),h=o("PretrainedConfig"),Fo=o(`, make sure its
`),oi=a("code"),of=o("model_type"),Yr=o(" attribute is set to the same key you use when registering the config (here "),ri=a("code"),ti=o('"new-model"'),cA=o(")."),rf=l(),Ie=a("p"),Oe=o("Likewise, if your "),ai=a("code"),Mn=o("NewModel"),fA=o(" is a subclass of "),En=a("a"),Cn=o("PreTrainedModel"),mA=o(`, make sure its
`),ni=a("code"),wn=o("config_class"),gA=o(` attribute is set to the same class you use when registering the model (here
`),si=a("code"),tf=o("NewModelConfig"),va=o(")."),this.h()},l(Ve){g=n(Ve,"P",{});var Ae=s(g);v=r(Ae,"If your "),p=n(Ae,"CODE",{});var wx=s(p);m=r(wx,"NewModelConfig"),wx.forEach(t),u=r(Ae," is a subclass of "),d=n(Ae,"CODE",{});var li=s(d);h=r(li,"PretrainedConfig"),li.forEach(t),Fo=r(Ae,`, make sure its
`),oi=n(Ae,"CODE",{});var Ax=s(oi);of=r(Ax,"model_type"),Ax.forEach(t),Yr=r(Ae," attribute is set to the same key you use when registering the config (here "),ri=n(Ae,"CODE",{});var yx=s(ri);ti=r(yx,'"new-model"'),yx.forEach(t),cA=r(Ae,")."),Ae.forEach(t),rf=i(Ve),Ie=n(Ve,"P",{});var To=s(Ie);Oe=r(To,"Likewise, if your "),ai=n(To,"CODE",{});var Fa=s(ai);Mn=r(Fa,"NewModel"),Fa.forEach(t),fA=r(To," is a subclass of "),En=n(To,"A",{href:!0});var Lx=s(En);Cn=r(Lx,"PreTrainedModel"),Lx.forEach(t),mA=r(To,`, make sure its
`),ni=n(To,"CODE",{});var af=s(ni);wn=r(af,"config_class"),af.forEach(t),gA=r(To,` attribute is set to the same class you use when registering the model (here
`),si=n(To,"CODE",{});var xx=s(si);tf=r(xx,"NewModelConfig"),xx.forEach(t),va=r(To,")."),To.forEach(t),this.h()},h(){c(En,"href","/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel")},m(Ve,Ae){b(Ve,g,Ae),e(g,v),e(g,p),e(p,m),e(g,u),e(g,d),e(d,h),e(g,Fo),e(g,oi),e(oi,of),e(g,Yr),e(g,ri),e(ri,ti),e(g,cA),b(Ve,rf,Ae),b(Ve,Ie,Ae),e(Ie,Oe),e(Ie,ai),e(ai,Mn),e(Ie,fA),e(Ie,En),e(En,Cn),e(Ie,mA),e(Ie,ni),e(ni,wn),e(Ie,gA),e(Ie,si),e(si,tf),e(Ie,va)},d(Ve){Ve&&t(g),Ve&&t(rf),Ve&&t(Ie)}}}function F4t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

config.unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config.unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function T4t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function M4t(A){let g,v,p,m,u;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),u=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Fo=s(p);m=r(Fo,"use_auth_token=True"),Fo.forEach(t),u=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,u)},d(d){d&&t(g)}}}function E4t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function C4t(A){let g,v,p,m,u;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),u=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Fo=s(p);m=r(Fo,"use_auth_token=True"),Fo.forEach(t),u=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,u)},d(d){d&&t(g)}}}function w4t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function A4t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function y4t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function L4t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function x4t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $4t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function k4t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function S4t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function R4t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function B4t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function P4t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function I4t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function q4t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function N4t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function j4t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function D4t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function G4t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function O4t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function V4t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function X4t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function z4t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Q4t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function W4t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function H4t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function U4t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function J4t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Y4t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function K4t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Z4t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function eEt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oEt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rEt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tEt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function aEt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nEt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sEt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lEt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iEt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dEt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cEt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fEt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mEt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gEt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hEt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pEt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uEt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _Et(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bEt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vEt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function FEt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function TEt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function MEt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function EEt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function CEt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wEt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function AEt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yEt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function LEt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xEt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $Et(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kEt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function SEt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function REt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function BEt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function PEt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function IEt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qEt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function NEt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jEt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function DEt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function GEt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function OEt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function VEt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function XEt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zEt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function QEt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function WEt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function HEt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function UEt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function JEt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function YEt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function KEt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ZEt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function eCt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oCt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rCt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tCt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function aCt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nCt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sCt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lCt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iCt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dCt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cCt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fCt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mCt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gCt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hCt(A){let g,v,p,m,u,d,h,Fo,oi,of,Yr,ri,ti,cA,rf,Ie,Oe,ai,Mn,fA,En,Cn,mA,ni,wn,gA,si,tf,va,Ve,Ae,wx,li,Ax,yx,To,Fa,Lx,af,xx,qqe,kRe,ii,nf,qK,hA,Nqe,NK,jqe,SRe,An,Dqe,jK,Gqe,Oqe,DK,Vqe,Xqe,RRe,pA,BRe,$x,zqe,PRe,sf,IRe,di,lf,GK,uA,Qqe,OK,Wqe,qRe,Mo,_A,Hqe,bA,Uqe,kx,Jqe,Yqe,Kqe,vA,Zqe,VK,eNe,oNe,rNe,Tr,FA,tNe,XK,aNe,nNe,ci,sNe,zK,lNe,iNe,QK,dNe,cNe,fNe,y,df,WK,mNe,gNe,Sx,hNe,pNe,uNe,cf,HK,_Ne,bNe,Rx,vNe,FNe,TNe,ff,UK,MNe,ENe,Bx,CNe,wNe,ANe,mf,JK,yNe,LNe,Px,xNe,$Ne,kNe,gf,YK,SNe,RNe,Ix,BNe,PNe,INe,hf,KK,qNe,NNe,qx,jNe,DNe,GNe,pf,ZK,ONe,VNe,Nx,XNe,zNe,QNe,uf,eZ,WNe,HNe,jx,UNe,JNe,YNe,_f,oZ,KNe,ZNe,Dx,eje,oje,rje,bf,rZ,tje,aje,Gx,nje,sje,lje,vf,tZ,ije,dje,Ox,cje,fje,mje,Ff,aZ,gje,hje,Vx,pje,uje,_je,Tf,nZ,bje,vje,Xx,Fje,Tje,Mje,Mf,sZ,Eje,Cje,zx,wje,Aje,yje,Ef,lZ,Lje,xje,Qx,$je,kje,Sje,Cf,iZ,Rje,Bje,Wx,Pje,Ije,qje,wf,dZ,Nje,jje,Hx,Dje,Gje,Oje,Af,cZ,Vje,Xje,Ux,zje,Qje,Wje,yf,fZ,Hje,Uje,Jx,Jje,Yje,Kje,Lf,mZ,Zje,eDe,Yx,oDe,rDe,tDe,xf,gZ,aDe,nDe,Kx,sDe,lDe,iDe,$f,hZ,dDe,cDe,Zx,fDe,mDe,gDe,kf,pZ,hDe,pDe,e$,uDe,_De,bDe,Sf,uZ,vDe,FDe,o$,TDe,MDe,EDe,Rf,_Z,CDe,wDe,r$,ADe,yDe,LDe,Bf,bZ,xDe,$De,t$,kDe,SDe,RDe,Pf,vZ,BDe,PDe,a$,IDe,qDe,NDe,If,FZ,jDe,DDe,n$,GDe,ODe,VDe,qf,TZ,XDe,zDe,s$,QDe,WDe,HDe,Nf,MZ,UDe,JDe,l$,YDe,KDe,ZDe,jf,EZ,eGe,oGe,i$,rGe,tGe,aGe,Df,CZ,nGe,sGe,d$,lGe,iGe,dGe,Gf,wZ,cGe,fGe,c$,mGe,gGe,hGe,Of,AZ,pGe,uGe,f$,_Ge,bGe,vGe,Vf,yZ,FGe,TGe,m$,MGe,EGe,CGe,Xf,LZ,wGe,AGe,g$,yGe,LGe,xGe,zf,xZ,$Ge,kGe,h$,SGe,RGe,BGe,Qf,$Z,PGe,IGe,p$,qGe,NGe,jGe,Wf,kZ,DGe,GGe,u$,OGe,VGe,XGe,Hf,SZ,zGe,QGe,_$,WGe,HGe,UGe,Uf,RZ,JGe,YGe,b$,KGe,ZGe,eOe,Jf,BZ,oOe,rOe,v$,tOe,aOe,nOe,Yf,PZ,sOe,lOe,F$,iOe,dOe,cOe,Kf,IZ,fOe,mOe,T$,gOe,hOe,pOe,Zf,qZ,uOe,_Oe,M$,bOe,vOe,FOe,em,NZ,TOe,MOe,E$,EOe,COe,wOe,om,jZ,AOe,yOe,C$,LOe,xOe,$Oe,rm,DZ,kOe,SOe,w$,ROe,BOe,POe,tm,GZ,IOe,qOe,A$,NOe,jOe,DOe,am,OZ,GOe,OOe,y$,VOe,XOe,zOe,nm,VZ,QOe,WOe,L$,HOe,UOe,JOe,sm,XZ,YOe,KOe,x$,ZOe,eVe,oVe,lm,zZ,rVe,tVe,$$,aVe,nVe,sVe,im,QZ,lVe,iVe,k$,dVe,cVe,fVe,dm,WZ,mVe,gVe,S$,hVe,pVe,uVe,cm,HZ,_Ve,bVe,R$,vVe,FVe,TVe,fm,UZ,MVe,EVe,B$,CVe,wVe,AVe,mm,JZ,yVe,LVe,P$,xVe,$Ve,kVe,gm,YZ,SVe,RVe,I$,BVe,PVe,IVe,hm,KZ,qVe,NVe,q$,jVe,DVe,GVe,pm,ZZ,OVe,VVe,N$,XVe,zVe,QVe,um,eee,WVe,HVe,j$,UVe,JVe,YVe,_m,oee,KVe,ZVe,D$,eXe,oXe,rXe,bm,ree,tXe,aXe,G$,nXe,sXe,lXe,vm,tee,iXe,dXe,O$,cXe,fXe,mXe,Fm,aee,gXe,hXe,V$,pXe,uXe,_Xe,Tm,nee,bXe,vXe,X$,FXe,TXe,MXe,Mm,see,EXe,CXe,z$,wXe,AXe,yXe,Em,lee,LXe,xXe,Q$,$Xe,kXe,SXe,Cm,iee,RXe,BXe,W$,PXe,IXe,qXe,wm,dee,NXe,jXe,H$,DXe,GXe,OXe,Am,cee,VXe,XXe,U$,zXe,QXe,WXe,ym,fee,HXe,UXe,J$,JXe,YXe,KXe,Lm,mee,ZXe,eze,Y$,oze,rze,tze,xm,gee,aze,nze,K$,sze,lze,ize,$m,hee,dze,cze,Z$,fze,mze,gze,km,pee,hze,pze,ek,uze,_ze,bze,Sm,uee,vze,Fze,ok,Tze,Mze,Eze,Rm,_ee,Cze,wze,rk,Aze,yze,Lze,Bm,bee,xze,$ze,tk,kze,Sze,Rze,Pm,vee,Bze,Pze,ak,Ize,qze,Nze,Im,Fee,jze,Dze,nk,Gze,Oze,Vze,qm,Tee,Xze,zze,sk,Qze,Wze,Hze,Nm,Mee,Uze,Jze,lk,Yze,Kze,Zze,jm,Eee,eQe,oQe,ik,rQe,tQe,aQe,Dm,Cee,nQe,sQe,dk,lQe,iQe,dQe,Gm,wee,cQe,fQe,ck,mQe,gQe,hQe,Om,Aee,pQe,uQe,fk,_Qe,bQe,vQe,Vm,yee,FQe,TQe,mk,MQe,EQe,CQe,Xm,Lee,wQe,AQe,gk,yQe,LQe,xQe,zm,xee,$Qe,kQe,hk,SQe,RQe,BQe,Qm,$ee,PQe,IQe,pk,qQe,NQe,jQe,Wm,kee,DQe,GQe,uk,OQe,VQe,XQe,Hm,See,zQe,QQe,_k,WQe,HQe,UQe,Um,Ree,JQe,YQe,bk,KQe,ZQe,eWe,Jm,Bee,oWe,rWe,vk,tWe,aWe,nWe,Ym,Pee,sWe,lWe,Fk,iWe,dWe,cWe,Km,Iee,fWe,mWe,Tk,gWe,hWe,pWe,Zm,qee,uWe,_We,Mk,bWe,vWe,FWe,eg,Nee,TWe,MWe,Ek,EWe,CWe,wWe,og,jee,AWe,yWe,Ck,LWe,xWe,$We,rg,Dee,kWe,SWe,wk,RWe,BWe,PWe,tg,IWe,ag,TA,qWe,Gee,NWe,NRe,fi,ng,Oee,MA,jWe,Vee,DWe,jRe,Eo,EA,GWe,CA,OWe,Ak,VWe,XWe,zWe,wA,QWe,Xee,WWe,HWe,UWe,Mr,AA,JWe,zee,YWe,KWe,Ta,ZWe,Qee,eHe,oHe,Wee,rHe,tHe,Hee,aHe,nHe,sHe,k,yn,Uee,lHe,iHe,yk,dHe,cHe,Lk,fHe,mHe,gHe,Ln,Jee,hHe,pHe,xk,uHe,_He,$k,bHe,vHe,FHe,xn,Yee,THe,MHe,kk,EHe,CHe,Sk,wHe,AHe,yHe,sg,Kee,LHe,xHe,Rk,$He,kHe,SHe,$n,Zee,RHe,BHe,Bk,PHe,IHe,Pk,qHe,NHe,jHe,lg,eoe,DHe,GHe,Ik,OHe,VHe,XHe,ig,ooe,zHe,QHe,qk,WHe,HHe,UHe,dg,roe,JHe,YHe,Nk,KHe,ZHe,eUe,kn,toe,oUe,rUe,jk,tUe,aUe,Dk,nUe,sUe,lUe,Sn,aoe,iUe,dUe,Gk,cUe,fUe,Ok,mUe,gUe,hUe,Rn,noe,pUe,uUe,Vk,_Ue,bUe,Xk,vUe,FUe,TUe,cg,soe,MUe,EUe,zk,CUe,wUe,AUe,fg,loe,yUe,LUe,Qk,xUe,$Ue,kUe,Bn,ioe,SUe,RUe,Wk,BUe,PUe,Hk,IUe,qUe,NUe,mg,doe,jUe,DUe,Uk,GUe,OUe,VUe,Pn,coe,XUe,zUe,Jk,QUe,WUe,Yk,HUe,UUe,JUe,In,foe,YUe,KUe,Kk,ZUe,eJe,Zk,oJe,rJe,tJe,qn,moe,aJe,nJe,eS,sJe,lJe,goe,iJe,dJe,cJe,gg,hoe,fJe,mJe,oS,gJe,hJe,pJe,Nn,poe,uJe,_Je,rS,bJe,vJe,tS,FJe,TJe,MJe,jn,uoe,EJe,CJe,aS,wJe,AJe,nS,yJe,LJe,xJe,Dn,_oe,$Je,kJe,sS,SJe,RJe,lS,BJe,PJe,IJe,Gn,boe,qJe,NJe,iS,jJe,DJe,dS,GJe,OJe,VJe,On,voe,XJe,zJe,cS,QJe,WJe,fS,HJe,UJe,JJe,Vn,Foe,YJe,KJe,mS,ZJe,eYe,gS,oYe,rYe,tYe,hg,Toe,aYe,nYe,hS,sYe,lYe,iYe,Xn,Moe,dYe,cYe,pS,fYe,mYe,uS,gYe,hYe,pYe,pg,Eoe,uYe,_Ye,_S,bYe,vYe,FYe,zn,Coe,TYe,MYe,bS,EYe,CYe,vS,wYe,AYe,yYe,Qn,woe,LYe,xYe,FS,$Ye,kYe,TS,SYe,RYe,BYe,Wn,Aoe,PYe,IYe,MS,qYe,NYe,ES,jYe,DYe,GYe,Hn,yoe,OYe,VYe,CS,XYe,zYe,wS,QYe,WYe,HYe,Un,Loe,UYe,JYe,AS,YYe,KYe,yS,ZYe,eKe,oKe,ug,xoe,rKe,tKe,LS,aKe,nKe,sKe,Jn,$oe,lKe,iKe,xS,dKe,cKe,$S,fKe,mKe,gKe,Yn,koe,hKe,pKe,kS,uKe,_Ke,SS,bKe,vKe,FKe,Kn,Soe,TKe,MKe,RS,EKe,CKe,BS,wKe,AKe,yKe,Zn,Roe,LKe,xKe,PS,$Ke,kKe,IS,SKe,RKe,BKe,es,Boe,PKe,IKe,qS,qKe,NKe,NS,jKe,DKe,GKe,os,Poe,OKe,VKe,jS,XKe,zKe,DS,QKe,WKe,HKe,_g,Ioe,UKe,JKe,GS,YKe,KKe,ZKe,rs,qoe,eZe,oZe,OS,rZe,tZe,VS,aZe,nZe,sZe,bg,Noe,lZe,iZe,XS,dZe,cZe,fZe,vg,joe,mZe,gZe,zS,hZe,pZe,uZe,ts,Doe,_Ze,bZe,QS,vZe,FZe,WS,TZe,MZe,EZe,as,Goe,CZe,wZe,HS,AZe,yZe,US,LZe,xZe,$Ze,ns,Ooe,kZe,SZe,JS,RZe,BZe,YS,PZe,IZe,qZe,Fg,Voe,NZe,jZe,KS,DZe,GZe,OZe,ss,Xoe,VZe,XZe,ZS,zZe,QZe,eR,WZe,HZe,UZe,ls,zoe,JZe,YZe,oR,KZe,ZZe,rR,eeo,oeo,reo,is,Qoe,teo,aeo,tR,neo,seo,aR,leo,ieo,deo,ds,Woe,ceo,feo,nR,meo,geo,sR,heo,peo,ueo,cs,Hoe,_eo,beo,lR,veo,Feo,iR,Teo,Meo,Eeo,fs,Uoe,Ceo,weo,dR,Aeo,yeo,cR,Leo,xeo,$eo,Tg,Joe,keo,Seo,fR,Reo,Beo,Peo,Mg,Yoe,Ieo,qeo,mR,Neo,jeo,Deo,Eg,Koe,Geo,Oeo,gR,Veo,Xeo,zeo,Cg,Zoe,Qeo,Weo,hR,Heo,Ueo,Jeo,ms,ere,Yeo,Keo,pR,Zeo,eoo,uR,ooo,roo,too,wg,ore,aoo,noo,_R,soo,loo,ioo,gs,rre,doo,coo,bR,foo,moo,vR,goo,hoo,poo,hs,tre,uoo,_oo,FR,boo,voo,TR,Foo,Too,Moo,ps,are,Eoo,Coo,MR,woo,Aoo,ER,yoo,Loo,xoo,us,nre,$oo,koo,CR,Soo,Roo,wR,Boo,Poo,Ioo,_s,sre,qoo,Noo,AR,joo,Doo,yR,Goo,Ooo,Voo,bs,lre,Xoo,zoo,LR,Qoo,Woo,xR,Hoo,Uoo,Joo,Ag,ire,Yoo,Koo,$R,Zoo,ero,oro,yg,dre,rro,tro,kR,aro,nro,sro,vs,cre,lro,iro,SR,dro,cro,RR,fro,mro,gro,Fs,fre,hro,pro,BR,uro,_ro,PR,bro,vro,Fro,Ts,mre,Tro,Mro,IR,Ero,Cro,qR,wro,Aro,yro,Lg,gre,Lro,xro,NR,$ro,kro,Sro,xg,hre,Rro,Bro,jR,Pro,Iro,qro,$g,pre,Nro,jro,DR,Dro,Gro,Oro,Ms,ure,Vro,Xro,GR,zro,Qro,OR,Wro,Hro,Uro,kg,_re,Jro,Yro,VR,Kro,Zro,eto,Sg,bre,oto,rto,XR,tto,ato,nto,Es,vre,sto,lto,zR,ito,dto,QR,cto,fto,mto,Rg,Fre,gto,hto,WR,pto,uto,_to,Bg,Tre,bto,vto,HR,Fto,Tto,Mto,Cs,Mre,Eto,Cto,UR,wto,Ato,JR,yto,Lto,xto,ws,Ere,$to,kto,YR,Sto,Rto,KR,Bto,Pto,Ito,As,Cre,qto,Nto,ZR,jto,Dto,eB,Gto,Oto,Vto,ys,wre,Xto,zto,oB,Qto,Wto,rB,Hto,Uto,Jto,Pg,Yto,Ig,yA,Kto,Are,Zto,DRe,mi,qg,yre,LA,eao,Lre,oao,GRe,Co,xA,rao,$A,tao,tB,aao,nao,sao,kA,lao,xre,iao,dao,cao,Xe,SA,fao,$re,mao,gao,Ma,hao,kre,pao,uao,Sre,_ao,bao,Rre,vao,Fao,Tao,ae,Ng,Bre,Mao,Eao,aB,Cao,wao,Aao,jg,Pre,yao,Lao,nB,xao,$ao,kao,Dg,Ire,Sao,Rao,sB,Bao,Pao,Iao,Gg,qre,qao,Nao,lB,jao,Dao,Gao,Og,Nre,Oao,Vao,iB,Xao,zao,Qao,Vg,jre,Wao,Hao,dB,Uao,Jao,Yao,Xg,Dre,Kao,Zao,cB,eno,ono,rno,zg,Gre,tno,ano,fB,nno,sno,lno,Qg,Ore,ino,dno,mB,cno,fno,mno,Wg,Vre,gno,hno,gB,pno,uno,_no,Hg,Xre,bno,vno,hB,Fno,Tno,Mno,Ug,zre,Eno,Cno,pB,wno,Ano,yno,Jg,Qre,Lno,xno,uB,$no,kno,Sno,Yg,Wre,Rno,Bno,_B,Pno,Ino,qno,Kg,Hre,Nno,jno,bB,Dno,Gno,Ono,Zg,Ure,Vno,Xno,vB,zno,Qno,Wno,eh,Jre,Hno,Uno,FB,Jno,Yno,Kno,oh,Yre,Zno,eso,TB,oso,rso,tso,rh,Kre,aso,nso,MB,sso,lso,iso,th,Zre,dso,cso,EB,fso,mso,gso,ah,ete,hso,pso,CB,uso,_so,bso,nh,ote,vso,Fso,wB,Tso,Mso,Eso,sh,rte,Cso,wso,AB,Aso,yso,Lso,lh,xso,ih,$so,dh,RA,kso,tte,Sso,ORe,gi,ch,ate,BA,Rso,nte,Bso,VRe,wo,PA,Pso,IA,Iso,yB,qso,Nso,jso,qA,Dso,ste,Gso,Oso,Vso,ze,NA,Xso,lte,zso,Qso,hi,Wso,ite,Hso,Uso,dte,Jso,Yso,Kso,be,fh,cte,Zso,elo,LB,olo,rlo,tlo,mh,fte,alo,nlo,xB,slo,llo,ilo,gh,mte,dlo,clo,$B,flo,mlo,glo,hh,gte,hlo,plo,kB,ulo,_lo,blo,ph,hte,vlo,Flo,SB,Tlo,Mlo,Elo,uh,pte,Clo,wlo,RB,Alo,ylo,Llo,_h,ute,xlo,$lo,BB,klo,Slo,Rlo,bh,_te,Blo,Plo,PB,Ilo,qlo,Nlo,vh,bte,jlo,Dlo,IB,Glo,Olo,Vlo,Fh,vte,Xlo,zlo,qB,Qlo,Wlo,Hlo,Th,Fte,Ulo,Jlo,NB,Ylo,Klo,Zlo,Mh,Tte,eio,oio,jB,rio,tio,aio,Eh,Mte,nio,sio,DB,lio,iio,dio,Ch,Ete,cio,fio,GB,mio,gio,hio,wh,pio,Ah,uio,yh,jA,_io,Cte,bio,XRe,pi,Lh,wte,DA,vio,Ate,Fio,zRe,Ao,GA,Tio,ui,Mio,OB,Eio,Cio,VB,wio,Aio,yio,OA,Lio,yte,xio,$io,kio,Kr,VA,Sio,Lte,Rio,Bio,_i,Pio,xte,Iio,qio,XB,Nio,jio,Dio,xh,Gio,Qe,XA,Oio,$te,Vio,Xio,Ea,zio,kte,Qio,Wio,Ste,Hio,Uio,Rte,Jio,Yio,Kio,x,$h,Bte,Zio,edo,zB,odo,rdo,tdo,kh,Pte,ado,ndo,QB,sdo,ldo,ido,Sh,Ite,ddo,cdo,WB,fdo,mdo,gdo,Rh,qte,hdo,pdo,HB,udo,_do,bdo,Bh,Nte,vdo,Fdo,UB,Tdo,Mdo,Edo,Ph,jte,Cdo,wdo,JB,Ado,ydo,Ldo,Ih,Dte,xdo,$do,YB,kdo,Sdo,Rdo,qh,Gte,Bdo,Pdo,KB,Ido,qdo,Ndo,Nh,Ote,jdo,Ddo,ZB,Gdo,Odo,Vdo,jh,Vte,Xdo,zdo,eP,Qdo,Wdo,Hdo,Dh,Xte,Udo,Jdo,oP,Ydo,Kdo,Zdo,Gh,zte,eco,oco,rP,rco,tco,aco,Oh,Qte,nco,sco,tP,lco,ico,dco,Vh,Wte,cco,fco,aP,mco,gco,hco,Xh,Hte,pco,uco,nP,_co,bco,vco,zh,Ute,Fco,Tco,sP,Mco,Eco,Cco,Qh,Jte,wco,Aco,lP,yco,Lco,xco,Wh,Yte,$co,kco,iP,Sco,Rco,Bco,Hh,Kte,Pco,Ico,dP,qco,Nco,jco,Uh,Zte,Dco,Gco,cP,Oco,Vco,Xco,Jh,eae,zco,Qco,fP,Wco,Hco,Uco,Yh,oae,Jco,Yco,mP,Kco,Zco,efo,Kh,rae,ofo,rfo,gP,tfo,afo,nfo,Zh,tae,sfo,lfo,hP,ifo,dfo,cfo,ep,aae,ffo,mfo,pP,gfo,hfo,pfo,op,nae,ufo,_fo,uP,bfo,vfo,Ffo,rp,sae,Tfo,Mfo,_P,Efo,Cfo,wfo,tp,lae,Afo,yfo,bP,Lfo,xfo,$fo,ap,iae,kfo,Sfo,vP,Rfo,Bfo,Pfo,np,dae,Ifo,qfo,FP,Nfo,jfo,Dfo,Ls,cae,Gfo,Ofo,TP,Vfo,Xfo,MP,zfo,Qfo,Wfo,sp,fae,Hfo,Ufo,EP,Jfo,Yfo,Kfo,lp,mae,Zfo,emo,CP,omo,rmo,tmo,ip,gae,amo,nmo,wP,smo,lmo,imo,dp,hae,dmo,cmo,AP,fmo,mmo,gmo,cp,pae,hmo,pmo,yP,umo,_mo,bmo,fp,uae,vmo,Fmo,LP,Tmo,Mmo,Emo,mp,_ae,Cmo,wmo,xP,Amo,ymo,Lmo,gp,bae,xmo,$mo,$P,kmo,Smo,Rmo,hp,vae,Bmo,Pmo,kP,Imo,qmo,Nmo,pp,Fae,jmo,Dmo,SP,Gmo,Omo,Vmo,up,Tae,Xmo,zmo,RP,Qmo,Wmo,Hmo,_p,Mae,Umo,Jmo,BP,Ymo,Kmo,Zmo,bp,Eae,ego,ogo,PP,rgo,tgo,ago,vp,Cae,ngo,sgo,IP,lgo,igo,dgo,Fp,wae,cgo,fgo,qP,mgo,ggo,hgo,Tp,Aae,pgo,ugo,NP,_go,bgo,vgo,Mp,yae,Fgo,Tgo,jP,Mgo,Ego,Cgo,Ep,Lae,wgo,Ago,DP,ygo,Lgo,xgo,Cp,xae,$go,kgo,GP,Sgo,Rgo,Bgo,wp,$ae,Pgo,Igo,OP,qgo,Ngo,jgo,Ap,kae,Dgo,Ggo,VP,Ogo,Vgo,Xgo,yp,Sae,zgo,Qgo,XP,Wgo,Hgo,Ugo,Lp,Rae,Jgo,Ygo,zP,Kgo,Zgo,eho,xp,Bae,oho,rho,QP,tho,aho,nho,$p,Pae,sho,lho,WP,iho,dho,cho,kp,Iae,fho,mho,HP,gho,hho,pho,Sp,qae,uho,_ho,UP,bho,vho,Fho,Rp,Nae,Tho,Mho,JP,Eho,Cho,who,Bp,jae,Aho,yho,YP,Lho,xho,$ho,Pp,Dae,kho,Sho,KP,Rho,Bho,Pho,Ip,Gae,Iho,qho,ZP,Nho,jho,Dho,qp,Oae,Gho,Oho,eI,Vho,Xho,zho,Np,Vae,Qho,Who,oI,Hho,Uho,Jho,jp,Xae,Yho,Kho,rI,Zho,epo,opo,Dp,zae,rpo,tpo,tI,apo,npo,spo,Gp,Qae,lpo,ipo,aI,dpo,cpo,fpo,Op,Wae,mpo,gpo,nI,hpo,ppo,upo,Vp,Hae,_po,bpo,sI,vpo,Fpo,Tpo,Xp,Uae,Mpo,Epo,lI,Cpo,wpo,Apo,zp,Jae,ypo,Lpo,iI,xpo,$po,kpo,Qp,Yae,Spo,Rpo,dI,Bpo,Ppo,Ipo,Wp,Kae,qpo,Npo,cI,jpo,Dpo,Gpo,Hp,Zae,Opo,Vpo,fI,Xpo,zpo,Qpo,Up,ene,Wpo,Hpo,mI,Upo,Jpo,Ypo,Jp,one,Kpo,Zpo,gI,euo,ouo,ruo,Yp,rne,tuo,auo,hI,nuo,suo,luo,Kp,tne,iuo,duo,pI,cuo,fuo,muo,Zp,ane,guo,huo,uI,puo,uuo,_uo,eu,nne,buo,vuo,_I,Fuo,Tuo,Muo,ou,sne,Euo,Cuo,bI,wuo,Auo,yuo,ru,lne,Luo,xuo,vI,$uo,kuo,Suo,tu,ine,Ruo,Buo,FI,Puo,Iuo,quo,au,dne,Nuo,juo,TI,Duo,Guo,Ouo,nu,cne,Vuo,Xuo,MI,zuo,Quo,Wuo,su,fne,Huo,Uuo,EI,Juo,Yuo,Kuo,lu,mne,Zuo,e_o,CI,o_o,r_o,t_o,iu,gne,a_o,n_o,wI,s_o,l_o,i_o,du,hne,d_o,c_o,AI,f_o,m_o,g_o,cu,pne,h_o,p_o,yI,u_o,__o,b_o,fu,une,v_o,F_o,LI,T_o,M_o,E_o,mu,_ne,C_o,w_o,xI,A_o,y_o,L_o,gu,bne,x_o,$_o,$I,k_o,S_o,R_o,hu,vne,B_o,P_o,kI,I_o,q_o,N_o,pu,j_o,Fne,D_o,G_o,Tne,O_o,V_o,uu,QRe,bi,_u,Mne,zA,X_o,Ene,z_o,WRe,yo,QA,Q_o,vi,W_o,SI,H_o,U_o,RI,J_o,Y_o,K_o,WA,Z_o,Cne,e1o,o1o,r1o,Zr,HA,t1o,wne,a1o,n1o,Fi,s1o,Ane,l1o,i1o,BI,d1o,c1o,f1o,bu,m1o,We,UA,g1o,yne,h1o,p1o,Ca,u1o,Lne,_1o,b1o,xne,v1o,F1o,$ne,T1o,M1o,E1o,G,vu,kne,C1o,w1o,PI,A1o,y1o,L1o,Fu,Sne,x1o,$1o,II,k1o,S1o,R1o,Tu,Rne,B1o,P1o,qI,I1o,q1o,N1o,Mu,Bne,j1o,D1o,NI,G1o,O1o,V1o,Eu,Pne,X1o,z1o,jI,Q1o,W1o,H1o,Cu,Ine,U1o,J1o,DI,Y1o,K1o,Z1o,wu,qne,e9o,o9o,GI,r9o,t9o,a9o,Au,Nne,n9o,s9o,OI,l9o,i9o,d9o,yu,jne,c9o,f9o,VI,m9o,g9o,h9o,Lu,Dne,p9o,u9o,XI,_9o,b9o,v9o,xu,Gne,F9o,T9o,zI,M9o,E9o,C9o,$u,One,w9o,A9o,QI,y9o,L9o,x9o,ku,Vne,$9o,k9o,WI,S9o,R9o,B9o,Su,Xne,P9o,I9o,HI,q9o,N9o,j9o,Ru,zne,D9o,G9o,UI,O9o,V9o,X9o,Bu,Qne,z9o,Q9o,JI,W9o,H9o,U9o,Pu,Wne,J9o,Y9o,YI,K9o,Z9o,ebo,Iu,Hne,obo,rbo,KI,tbo,abo,nbo,qu,Une,sbo,lbo,ZI,ibo,dbo,cbo,Nu,Jne,fbo,mbo,eq,gbo,hbo,pbo,ju,Yne,ubo,_bo,oq,bbo,vbo,Fbo,Du,Kne,Tbo,Mbo,rq,Ebo,Cbo,wbo,Gu,Zne,Abo,ybo,tq,Lbo,xbo,$bo,Ou,ese,kbo,Sbo,aq,Rbo,Bbo,Pbo,Vu,ose,Ibo,qbo,nq,Nbo,jbo,Dbo,Xu,rse,Gbo,Obo,sq,Vbo,Xbo,zbo,zu,tse,Qbo,Wbo,lq,Hbo,Ubo,Jbo,Qu,ase,Ybo,Kbo,iq,Zbo,e2o,o2o,Wu,nse,r2o,t2o,dq,a2o,n2o,s2o,Hu,sse,l2o,i2o,cq,d2o,c2o,f2o,Uu,lse,m2o,g2o,fq,h2o,p2o,u2o,Ju,ise,_2o,b2o,mq,v2o,F2o,T2o,Yu,dse,M2o,E2o,gq,C2o,w2o,A2o,Ku,cse,y2o,L2o,hq,x2o,$2o,k2o,Zu,fse,S2o,R2o,pq,B2o,P2o,I2o,e_,mse,q2o,N2o,uq,j2o,D2o,G2o,o_,gse,O2o,V2o,_q,X2o,z2o,Q2o,r_,hse,W2o,H2o,bq,U2o,J2o,Y2o,t_,pse,K2o,Z2o,vq,e5o,o5o,r5o,a_,t5o,use,a5o,n5o,_se,s5o,l5o,n_,HRe,Ti,s_,bse,JA,i5o,vse,d5o,URe,Lo,YA,c5o,Mi,f5o,Fq,m5o,g5o,Tq,h5o,p5o,u5o,KA,_5o,Fse,b5o,v5o,F5o,et,ZA,T5o,Tse,M5o,E5o,Ei,C5o,Mse,w5o,A5o,Mq,y5o,L5o,x5o,l_,$5o,He,e0,k5o,Ese,S5o,R5o,wa,B5o,Cse,P5o,I5o,wse,q5o,N5o,Ase,j5o,D5o,G5o,z,i_,yse,O5o,V5o,Eq,X5o,z5o,Q5o,d_,Lse,W5o,H5o,Cq,U5o,J5o,Y5o,c_,xse,K5o,Z5o,wq,evo,ovo,rvo,f_,$se,tvo,avo,Aq,nvo,svo,lvo,m_,kse,ivo,dvo,yq,cvo,fvo,mvo,g_,Sse,gvo,hvo,Lq,pvo,uvo,_vo,h_,Rse,bvo,vvo,xq,Fvo,Tvo,Mvo,p_,Bse,Evo,Cvo,$q,wvo,Avo,yvo,u_,Pse,Lvo,xvo,kq,$vo,kvo,Svo,__,Ise,Rvo,Bvo,Sq,Pvo,Ivo,qvo,b_,qse,Nvo,jvo,Rq,Dvo,Gvo,Ovo,v_,Nse,Vvo,Xvo,Bq,zvo,Qvo,Wvo,F_,jse,Hvo,Uvo,Pq,Jvo,Yvo,Kvo,T_,Dse,Zvo,eFo,Iq,oFo,rFo,tFo,M_,Gse,aFo,nFo,qq,sFo,lFo,iFo,E_,Ose,dFo,cFo,Nq,fFo,mFo,gFo,C_,Vse,hFo,pFo,jq,uFo,_Fo,bFo,w_,Xse,vFo,FFo,Dq,TFo,MFo,EFo,A_,zse,CFo,wFo,Gq,AFo,yFo,LFo,y_,Qse,xFo,$Fo,Oq,kFo,SFo,RFo,L_,Wse,BFo,PFo,Vq,IFo,qFo,NFo,x_,Hse,jFo,DFo,Xq,GFo,OFo,VFo,$_,Use,XFo,zFo,zq,QFo,WFo,HFo,k_,Jse,UFo,JFo,Qq,YFo,KFo,ZFo,S_,Yse,e6o,o6o,Wq,r6o,t6o,a6o,R_,Kse,n6o,s6o,Hq,l6o,i6o,d6o,B_,Zse,c6o,f6o,Uq,m6o,g6o,h6o,P_,ele,p6o,u6o,Jq,_6o,b6o,v6o,I_,ole,F6o,T6o,Yq,M6o,E6o,C6o,q_,rle,w6o,A6o,Kq,y6o,L6o,x6o,N_,tle,$6o,k6o,Zq,S6o,R6o,B6o,j_,ale,P6o,I6o,eN,q6o,N6o,j6o,D_,nle,D6o,G6o,oN,O6o,V6o,X6o,G_,sle,z6o,Q6o,rN,W6o,H6o,U6o,O_,lle,J6o,Y6o,tN,K6o,Z6o,eTo,V_,oTo,ile,rTo,tTo,dle,aTo,nTo,X_,JRe,Ci,z_,cle,o0,sTo,fle,lTo,YRe,xo,r0,iTo,wi,dTo,aN,cTo,fTo,nN,mTo,gTo,hTo,t0,pTo,mle,uTo,_To,bTo,ot,a0,vTo,gle,FTo,TTo,Ai,MTo,hle,ETo,CTo,sN,wTo,ATo,yTo,Q_,LTo,Ue,n0,xTo,ple,$To,kTo,Aa,STo,ule,RTo,BTo,_le,PTo,ITo,ble,qTo,NTo,jTo,Q,W_,vle,DTo,GTo,lN,OTo,VTo,XTo,H_,Fle,zTo,QTo,iN,WTo,HTo,UTo,U_,Tle,JTo,YTo,dN,KTo,ZTo,eMo,J_,Mle,oMo,rMo,cN,tMo,aMo,nMo,Y_,Ele,sMo,lMo,fN,iMo,dMo,cMo,K_,Cle,fMo,mMo,mN,gMo,hMo,pMo,Z_,wle,uMo,_Mo,gN,bMo,vMo,FMo,e1,Ale,TMo,MMo,hN,EMo,CMo,wMo,o1,yle,AMo,yMo,pN,LMo,xMo,$Mo,r1,Lle,kMo,SMo,uN,RMo,BMo,PMo,t1,xle,IMo,qMo,_N,NMo,jMo,DMo,a1,$le,GMo,OMo,bN,VMo,XMo,zMo,n1,kle,QMo,WMo,vN,HMo,UMo,JMo,s1,Sle,YMo,KMo,FN,ZMo,e4o,o4o,l1,Rle,r4o,t4o,TN,a4o,n4o,s4o,i1,Ble,l4o,i4o,MN,d4o,c4o,f4o,d1,Ple,m4o,g4o,EN,h4o,p4o,u4o,c1,Ile,_4o,b4o,CN,v4o,F4o,T4o,f1,qle,M4o,E4o,wN,C4o,w4o,A4o,m1,Nle,y4o,L4o,AN,x4o,$4o,k4o,g1,jle,S4o,R4o,yN,B4o,P4o,I4o,h1,Dle,q4o,N4o,LN,j4o,D4o,G4o,p1,Gle,O4o,V4o,xN,X4o,z4o,Q4o,u1,Ole,W4o,H4o,$N,U4o,J4o,Y4o,_1,Vle,K4o,Z4o,kN,eEo,oEo,rEo,b1,Xle,tEo,aEo,SN,nEo,sEo,lEo,v1,zle,iEo,dEo,RN,cEo,fEo,mEo,F1,Qle,gEo,hEo,BN,pEo,uEo,_Eo,T1,Wle,bEo,vEo,PN,FEo,TEo,MEo,M1,Hle,EEo,CEo,IN,wEo,AEo,yEo,E1,Ule,LEo,xEo,Jle,$Eo,kEo,SEo,C1,Yle,REo,BEo,qN,PEo,IEo,qEo,w1,Kle,NEo,jEo,NN,DEo,GEo,OEo,A1,Zle,VEo,XEo,jN,zEo,QEo,WEo,y1,eie,HEo,UEo,DN,JEo,YEo,KEo,L1,ZEo,oie,eCo,oCo,rie,rCo,tCo,x1,KRe,yi,$1,tie,s0,aCo,aie,nCo,ZRe,$o,l0,sCo,Li,lCo,GN,iCo,dCo,ON,cCo,fCo,mCo,i0,gCo,nie,hCo,pCo,uCo,rt,d0,_Co,sie,bCo,vCo,xi,FCo,lie,TCo,MCo,VN,ECo,CCo,wCo,k1,ACo,Je,c0,yCo,iie,LCo,xCo,ya,$Co,die,kCo,SCo,cie,RCo,BCo,fie,PCo,ICo,qCo,he,S1,mie,NCo,jCo,XN,DCo,GCo,OCo,R1,gie,VCo,XCo,zN,zCo,QCo,WCo,B1,hie,HCo,UCo,QN,JCo,YCo,KCo,P1,pie,ZCo,e3o,WN,o3o,r3o,t3o,I1,uie,a3o,n3o,HN,s3o,l3o,i3o,q1,_ie,d3o,c3o,UN,f3o,m3o,g3o,N1,bie,h3o,p3o,JN,u3o,_3o,b3o,j1,vie,v3o,F3o,YN,T3o,M3o,E3o,D1,Fie,C3o,w3o,KN,A3o,y3o,L3o,G1,Tie,x3o,$3o,ZN,k3o,S3o,R3o,O1,Mie,B3o,P3o,ej,I3o,q3o,N3o,V1,Eie,j3o,D3o,oj,G3o,O3o,V3o,X1,Cie,X3o,z3o,rj,Q3o,W3o,H3o,z1,wie,U3o,J3o,tj,Y3o,K3o,Z3o,Q1,Aie,ewo,owo,aj,rwo,two,awo,W1,yie,nwo,swo,nj,lwo,iwo,dwo,H1,Lie,cwo,fwo,sj,mwo,gwo,hwo,U1,pwo,xie,uwo,_wo,$ie,bwo,vwo,J1,eBe,$i,Y1,kie,f0,Fwo,Sie,Two,oBe,ko,m0,Mwo,ki,Ewo,lj,Cwo,wwo,ij,Awo,ywo,Lwo,g0,xwo,Rie,$wo,kwo,Swo,tt,h0,Rwo,Bie,Bwo,Pwo,Si,Iwo,Pie,qwo,Nwo,dj,jwo,Dwo,Gwo,K1,Owo,Ye,p0,Vwo,Iie,Xwo,zwo,La,Qwo,qie,Wwo,Hwo,Nie,Uwo,Jwo,jie,Ywo,Kwo,Zwo,q,Z1,Die,eAo,oAo,cj,rAo,tAo,aAo,e9,Gie,nAo,sAo,fj,lAo,iAo,dAo,o9,Oie,cAo,fAo,mj,mAo,gAo,hAo,r9,Vie,pAo,uAo,gj,_Ao,bAo,vAo,t9,Xie,FAo,TAo,hj,MAo,EAo,CAo,a9,zie,wAo,AAo,pj,yAo,LAo,xAo,n9,Qie,$Ao,kAo,uj,SAo,RAo,BAo,s9,Wie,PAo,IAo,_j,qAo,NAo,jAo,l9,Hie,DAo,GAo,bj,OAo,VAo,XAo,i9,Uie,zAo,QAo,vj,WAo,HAo,UAo,d9,Jie,JAo,YAo,Fj,KAo,ZAo,e0o,c9,Yie,o0o,r0o,Tj,t0o,a0o,n0o,f9,Kie,s0o,l0o,Mj,i0o,d0o,c0o,m9,Zie,f0o,m0o,Ej,g0o,h0o,p0o,g9,ede,u0o,_0o,Cj,b0o,v0o,F0o,h9,ode,T0o,M0o,wj,E0o,C0o,w0o,p9,rde,A0o,y0o,Aj,L0o,x0o,$0o,u9,tde,k0o,S0o,yj,R0o,B0o,P0o,_9,ade,I0o,q0o,Lj,N0o,j0o,D0o,b9,nde,G0o,O0o,xj,V0o,X0o,z0o,v9,sde,Q0o,W0o,$j,H0o,U0o,J0o,F9,lde,Y0o,K0o,kj,Z0o,eyo,oyo,T9,ide,ryo,tyo,Sj,ayo,nyo,syo,M9,dde,lyo,iyo,Rj,dyo,cyo,fyo,E9,cde,myo,gyo,Bj,hyo,pyo,uyo,C9,fde,_yo,byo,Pj,vyo,Fyo,Tyo,w9,mde,Myo,Eyo,Ij,Cyo,wyo,Ayo,A9,gde,yyo,Lyo,qj,xyo,$yo,kyo,y9,hde,Syo,Ryo,Nj,Byo,Pyo,Iyo,L9,pde,qyo,Nyo,jj,jyo,Dyo,Gyo,x9,ude,Oyo,Vyo,Dj,Xyo,zyo,Qyo,$9,_de,Wyo,Hyo,Gj,Uyo,Jyo,Yyo,k9,bde,Kyo,Zyo,Oj,eLo,oLo,rLo,S9,vde,tLo,aLo,Vj,nLo,sLo,lLo,R9,Fde,iLo,dLo,Xj,cLo,fLo,mLo,B9,Tde,gLo,hLo,zj,pLo,uLo,_Lo,P9,Mde,bLo,vLo,Qj,FLo,TLo,MLo,I9,Ede,ELo,CLo,Wj,wLo,ALo,yLo,q9,Cde,LLo,xLo,Hj,$Lo,kLo,SLo,N9,wde,RLo,BLo,Uj,PLo,ILo,qLo,j9,Ade,NLo,jLo,Jj,DLo,GLo,OLo,D9,yde,VLo,XLo,Yj,zLo,QLo,WLo,G9,Lde,HLo,ULo,Kj,JLo,YLo,KLo,O9,xde,ZLo,e8o,Zj,o8o,r8o,t8o,V9,$de,a8o,n8o,eD,s8o,l8o,i8o,X9,kde,d8o,c8o,oD,f8o,m8o,g8o,z9,Sde,h8o,p8o,rD,u8o,_8o,b8o,Q9,v8o,Rde,F8o,T8o,Bde,M8o,E8o,W9,rBe,Ri,H9,Pde,u0,C8o,Ide,w8o,tBe,So,_0,A8o,Bi,y8o,tD,L8o,x8o,aD,$8o,k8o,S8o,b0,R8o,qde,B8o,P8o,I8o,at,v0,q8o,Nde,N8o,j8o,Pi,D8o,jde,G8o,O8o,nD,V8o,X8o,z8o,U9,Q8o,Ke,F0,W8o,Dde,H8o,U8o,xa,J8o,Gde,Y8o,K8o,Ode,Z8o,e7o,Vde,o7o,r7o,t7o,Y,J9,Xde,a7o,n7o,sD,s7o,l7o,i7o,Y9,zde,d7o,c7o,lD,f7o,m7o,g7o,K9,Qde,h7o,p7o,iD,u7o,_7o,b7o,Z9,Wde,v7o,F7o,dD,T7o,M7o,E7o,eb,Hde,C7o,w7o,cD,A7o,y7o,L7o,ob,Ude,x7o,$7o,fD,k7o,S7o,R7o,rb,Jde,B7o,P7o,mD,I7o,q7o,N7o,tb,Yde,j7o,D7o,gD,G7o,O7o,V7o,ab,Kde,X7o,z7o,hD,Q7o,W7o,H7o,nb,Zde,U7o,J7o,pD,Y7o,K7o,Z7o,sb,ece,exo,oxo,uD,rxo,txo,axo,lb,oce,nxo,sxo,_D,lxo,ixo,dxo,ib,rce,cxo,fxo,bD,mxo,gxo,hxo,db,tce,pxo,uxo,vD,_xo,bxo,vxo,cb,ace,Fxo,Txo,FD,Mxo,Exo,Cxo,fb,nce,wxo,Axo,TD,yxo,Lxo,xxo,mb,sce,$xo,kxo,MD,Sxo,Rxo,Bxo,gb,lce,Pxo,Ixo,ED,qxo,Nxo,jxo,hb,ice,Dxo,Gxo,CD,Oxo,Vxo,Xxo,pb,dce,zxo,Qxo,wD,Wxo,Hxo,Uxo,ub,cce,Jxo,Yxo,AD,Kxo,Zxo,e$o,_b,fce,o$o,r$o,yD,t$o,a$o,n$o,bb,mce,s$o,l$o,LD,i$o,d$o,c$o,vb,gce,f$o,m$o,xD,g$o,h$o,p$o,Fb,hce,u$o,_$o,$D,b$o,v$o,F$o,Tb,pce,T$o,M$o,kD,E$o,C$o,w$o,Mb,uce,A$o,y$o,SD,L$o,x$o,$$o,Eb,_ce,k$o,S$o,RD,R$o,B$o,P$o,Cb,I$o,bce,q$o,N$o,vce,j$o,D$o,wb,aBe,Ii,Ab,Fce,T0,G$o,Tce,O$o,nBe,Ro,M0,V$o,qi,X$o,BD,z$o,Q$o,PD,W$o,H$o,U$o,E0,J$o,Mce,Y$o,K$o,Z$o,nt,C0,eko,Ece,oko,rko,Ni,tko,Cce,ako,nko,ID,sko,lko,iko,yb,dko,Ze,w0,cko,wce,fko,mko,$a,gko,Ace,hko,pko,yce,uko,_ko,Lce,bko,vko,Fko,Hr,Lb,xce,Tko,Mko,qD,Eko,Cko,wko,xb,$ce,Ako,yko,ND,Lko,xko,$ko,$b,kce,kko,Sko,jD,Rko,Bko,Pko,kb,Sce,Iko,qko,DD,Nko,jko,Dko,Sb,Rce,Gko,Oko,GD,Vko,Xko,zko,Rb,Qko,Bce,Wko,Hko,Pce,Uko,Jko,Bb,sBe,ji,Pb,Ice,A0,Yko,qce,Kko,lBe,Bo,y0,Zko,Di,eSo,OD,oSo,rSo,VD,tSo,aSo,nSo,L0,sSo,Nce,lSo,iSo,dSo,st,x0,cSo,jce,fSo,mSo,Gi,gSo,Dce,hSo,pSo,XD,uSo,_So,bSo,Ib,vSo,eo,$0,FSo,Gce,TSo,MSo,ka,ESo,Oce,CSo,wSo,Vce,ASo,ySo,Xce,LSo,xSo,$So,U,qb,zce,kSo,SSo,zD,RSo,BSo,PSo,Nb,Qce,ISo,qSo,QD,NSo,jSo,DSo,jb,Wce,GSo,OSo,WD,VSo,XSo,zSo,Db,Hce,QSo,WSo,HD,HSo,USo,JSo,Gb,Uce,YSo,KSo,UD,ZSo,eRo,oRo,Ob,Jce,rRo,tRo,JD,aRo,nRo,sRo,Vb,Yce,lRo,iRo,YD,dRo,cRo,fRo,Xb,Kce,mRo,gRo,KD,hRo,pRo,uRo,zb,Zce,_Ro,bRo,ZD,vRo,FRo,TRo,Qb,efe,MRo,ERo,eG,CRo,wRo,ARo,Wb,ofe,yRo,LRo,oG,xRo,$Ro,kRo,Hb,rfe,SRo,RRo,rG,BRo,PRo,IRo,Ub,tfe,qRo,NRo,tG,jRo,DRo,GRo,Jb,afe,ORo,VRo,aG,XRo,zRo,QRo,Yb,nfe,WRo,HRo,nG,URo,JRo,YRo,Kb,sfe,KRo,ZRo,sG,eBo,oBo,rBo,Zb,lfe,tBo,aBo,lG,nBo,sBo,lBo,e2,ife,iBo,dBo,iG,cBo,fBo,mBo,o2,dfe,gBo,hBo,dG,pBo,uBo,_Bo,r2,cfe,bBo,vBo,cG,FBo,TBo,MBo,t2,ffe,EBo,CBo,fG,wBo,ABo,yBo,a2,mfe,LBo,xBo,mG,$Bo,kBo,SBo,n2,gfe,RBo,BBo,gG,PBo,IBo,qBo,s2,hfe,NBo,jBo,hG,DBo,GBo,OBo,l2,pfe,VBo,XBo,pG,zBo,QBo,WBo,i2,ufe,HBo,UBo,uG,JBo,YBo,KBo,d2,_fe,ZBo,ePo,_G,oPo,rPo,tPo,c2,bfe,aPo,nPo,bG,sPo,lPo,iPo,f2,vfe,dPo,cPo,vG,fPo,mPo,gPo,m2,Ffe,hPo,pPo,FG,uPo,_Po,bPo,g2,Tfe,vPo,FPo,TG,TPo,MPo,EPo,h2,Mfe,CPo,wPo,MG,APo,yPo,LPo,p2,Efe,xPo,$Po,EG,kPo,SPo,RPo,u2,BPo,Cfe,PPo,IPo,wfe,qPo,NPo,_2,iBe,Oi,b2,Afe,k0,jPo,yfe,DPo,dBe,Po,S0,GPo,Vi,OPo,CG,VPo,XPo,wG,zPo,QPo,WPo,R0,HPo,Lfe,UPo,JPo,YPo,lt,B0,KPo,xfe,ZPo,eIo,Xi,oIo,$fe,rIo,tIo,AG,aIo,nIo,sIo,v2,lIo,oo,P0,iIo,kfe,dIo,cIo,Sa,fIo,Sfe,mIo,gIo,Rfe,hIo,pIo,Bfe,uIo,_Io,bIo,O,F2,Pfe,vIo,FIo,yG,TIo,MIo,EIo,T2,Ife,CIo,wIo,LG,AIo,yIo,LIo,M2,qfe,xIo,$Io,xG,kIo,SIo,RIo,E2,Nfe,BIo,PIo,$G,IIo,qIo,NIo,C2,jfe,jIo,DIo,kG,GIo,OIo,VIo,w2,Dfe,XIo,zIo,SG,QIo,WIo,HIo,A2,Gfe,UIo,JIo,RG,YIo,KIo,ZIo,y2,Ofe,eqo,oqo,BG,rqo,tqo,aqo,L2,Vfe,nqo,sqo,PG,lqo,iqo,dqo,x2,Xfe,cqo,fqo,IG,mqo,gqo,hqo,$2,zfe,pqo,uqo,qG,_qo,bqo,vqo,k2,Qfe,Fqo,Tqo,NG,Mqo,Eqo,Cqo,S2,Wfe,wqo,Aqo,jG,yqo,Lqo,xqo,R2,Hfe,$qo,kqo,DG,Sqo,Rqo,Bqo,B2,Ufe,Pqo,Iqo,GG,qqo,Nqo,jqo,P2,Jfe,Dqo,Gqo,OG,Oqo,Vqo,Xqo,I2,Yfe,zqo,Qqo,VG,Wqo,Hqo,Uqo,q2,Kfe,Jqo,Yqo,XG,Kqo,Zqo,eNo,N2,Zfe,oNo,rNo,zG,tNo,aNo,nNo,j2,eme,sNo,lNo,QG,iNo,dNo,cNo,D2,ome,fNo,mNo,WG,gNo,hNo,pNo,G2,rme,uNo,_No,HG,bNo,vNo,FNo,O2,tme,TNo,MNo,UG,ENo,CNo,wNo,V2,ame,ANo,yNo,JG,LNo,xNo,$No,X2,nme,kNo,SNo,YG,RNo,BNo,PNo,z2,sme,INo,qNo,KG,NNo,jNo,DNo,Q2,lme,GNo,ONo,ZG,VNo,XNo,zNo,W2,ime,QNo,WNo,eO,HNo,UNo,JNo,H2,dme,YNo,KNo,oO,ZNo,ejo,ojo,U2,cme,rjo,tjo,rO,ajo,njo,sjo,J2,fme,ljo,ijo,tO,djo,cjo,fjo,Y2,mme,mjo,gjo,aO,hjo,pjo,ujo,K2,gme,_jo,bjo,nO,vjo,Fjo,Tjo,Z2,hme,Mjo,Ejo,sO,Cjo,wjo,Ajo,e5,pme,yjo,Ljo,lO,xjo,$jo,kjo,o5,ume,Sjo,Rjo,iO,Bjo,Pjo,Ijo,r5,_me,qjo,Njo,dO,jjo,Djo,Gjo,t5,bme,Ojo,Vjo,cO,Xjo,zjo,Qjo,a5,vme,Wjo,Hjo,fO,Ujo,Jjo,Yjo,n5,Kjo,Fme,Zjo,eDo,Tme,oDo,rDo,s5,cBe,zi,l5,Mme,I0,tDo,Eme,aDo,fBe,Io,q0,nDo,Qi,sDo,mO,lDo,iDo,gO,dDo,cDo,fDo,N0,mDo,Cme,gDo,hDo,pDo,it,j0,uDo,wme,_Do,bDo,Wi,vDo,Ame,FDo,TDo,hO,MDo,EDo,CDo,i5,wDo,ro,D0,ADo,yme,yDo,LDo,Ra,xDo,Lme,$Do,kDo,xme,SDo,RDo,$me,BDo,PDo,IDo,kme,d5,Sme,qDo,NDo,pO,jDo,DDo,GDo,c5,ODo,Rme,VDo,XDo,Bme,zDo,QDo,f5,mBe,Hi,m5,Pme,G0,WDo,Ime,HDo,gBe,qo,O0,UDo,Ui,JDo,uO,YDo,KDo,_O,ZDo,eGo,oGo,V0,rGo,qme,tGo,aGo,nGo,dt,X0,sGo,Nme,lGo,iGo,Ji,dGo,jme,cGo,fGo,bO,mGo,gGo,hGo,g5,pGo,to,z0,uGo,Dme,_Go,bGo,Ba,vGo,Gme,FGo,TGo,Ome,MGo,EGo,Vme,CGo,wGo,AGo,ve,h5,Xme,yGo,LGo,vO,xGo,$Go,kGo,p5,zme,SGo,RGo,FO,BGo,PGo,IGo,u5,Qme,qGo,NGo,TO,jGo,DGo,GGo,xs,Wme,OGo,VGo,MO,XGo,zGo,EO,QGo,WGo,HGo,_5,Hme,UGo,JGo,CO,YGo,KGo,ZGo,ct,Ume,eOo,oOo,wO,rOo,tOo,AO,aOo,nOo,yO,sOo,lOo,iOo,b5,Jme,dOo,cOo,LO,fOo,mOo,gOo,v5,Yme,hOo,pOo,xO,uOo,_Oo,bOo,F5,Kme,vOo,FOo,$O,TOo,MOo,EOo,T5,Zme,COo,wOo,kO,AOo,yOo,LOo,M5,ege,xOo,$Oo,SO,kOo,SOo,ROo,E5,oge,BOo,POo,RO,IOo,qOo,NOo,C5,rge,jOo,DOo,BO,GOo,OOo,VOo,w5,XOo,tge,zOo,QOo,age,WOo,HOo,A5,hBe,Yi,y5,nge,Q0,UOo,sge,JOo,pBe,No,W0,YOo,Ki,KOo,PO,ZOo,eVo,IO,oVo,rVo,tVo,H0,aVo,lge,nVo,sVo,lVo,ft,U0,iVo,ige,dVo,cVo,Zi,fVo,dge,mVo,gVo,qO,hVo,pVo,uVo,L5,_Vo,ao,J0,bVo,cge,vVo,FVo,Pa,TVo,fge,MVo,EVo,mge,CVo,wVo,gge,AVo,yVo,LVo,hge,x5,pge,xVo,$Vo,NO,kVo,SVo,RVo,$5,BVo,uge,PVo,IVo,_ge,qVo,NVo,k5,uBe,ed,S5,bge,Y0,jVo,vge,DVo,_Be,jo,K0,GVo,od,OVo,jO,VVo,XVo,DO,zVo,QVo,WVo,Z0,HVo,Fge,UVo,JVo,YVo,mt,ey,KVo,Tge,ZVo,eXo,rd,oXo,Mge,rXo,tXo,GO,aXo,nXo,sXo,R5,lXo,no,oy,iXo,Ege,dXo,cXo,Ia,fXo,Cge,mXo,gXo,wge,hXo,pXo,Age,uXo,_Xo,bXo,qe,B5,yge,vXo,FXo,OO,TXo,MXo,EXo,P5,Lge,CXo,wXo,VO,AXo,yXo,LXo,I5,xge,xXo,$Xo,XO,kXo,SXo,RXo,q5,$ge,BXo,PXo,zO,IXo,qXo,NXo,N5,kge,jXo,DXo,QO,GXo,OXo,VXo,j5,Sge,XXo,zXo,WO,QXo,WXo,HXo,D5,Rge,UXo,JXo,HO,YXo,KXo,ZXo,G5,Bge,ezo,ozo,UO,rzo,tzo,azo,O5,nzo,Pge,szo,lzo,Ige,izo,dzo,V5,bBe,td,X5,qge,ry,czo,Nge,fzo,vBe,Do,ty,mzo,ad,gzo,JO,hzo,pzo,YO,uzo,_zo,bzo,ay,vzo,jge,Fzo,Tzo,Mzo,gt,ny,Ezo,Dge,Czo,wzo,nd,Azo,Gge,yzo,Lzo,KO,xzo,$zo,kzo,z5,Szo,so,sy,Rzo,Oge,Bzo,Pzo,qa,Izo,Vge,qzo,Nzo,Xge,jzo,Dzo,zge,Gzo,Ozo,Vzo,Na,Q5,Qge,Xzo,zzo,ZO,Qzo,Wzo,Hzo,W5,Wge,Uzo,Jzo,eV,Yzo,Kzo,Zzo,H5,Hge,eQo,oQo,oV,rQo,tQo,aQo,U5,Uge,nQo,sQo,rV,lQo,iQo,dQo,J5,cQo,Jge,fQo,mQo,Yge,gQo,hQo,Y5,FBe,sd,K5,Kge,ly,pQo,Zge,uQo,TBe,Go,iy,_Qo,ld,bQo,tV,vQo,FQo,aV,TQo,MQo,EQo,dy,CQo,ehe,wQo,AQo,yQo,ht,cy,LQo,ohe,xQo,$Qo,id,kQo,rhe,SQo,RQo,nV,BQo,PQo,IQo,Z5,qQo,lo,fy,NQo,the,jQo,DQo,ja,GQo,ahe,OQo,VQo,nhe,XQo,zQo,she,QQo,WQo,HQo,Ne,ev,lhe,UQo,JQo,sV,YQo,KQo,ZQo,ov,ihe,eWo,oWo,lV,rWo,tWo,aWo,rv,dhe,nWo,sWo,iV,lWo,iWo,dWo,tv,che,cWo,fWo,dV,mWo,gWo,hWo,av,fhe,pWo,uWo,cV,_Wo,bWo,vWo,nv,mhe,FWo,TWo,fV,MWo,EWo,CWo,sv,ghe,wWo,AWo,mV,yWo,LWo,xWo,lv,hhe,$Wo,kWo,gV,SWo,RWo,BWo,iv,PWo,phe,IWo,qWo,uhe,NWo,jWo,dv,MBe,dd,cv,_he,my,DWo,bhe,GWo,EBe,Oo,gy,OWo,cd,VWo,hV,XWo,zWo,pV,QWo,WWo,HWo,hy,UWo,vhe,JWo,YWo,KWo,pt,py,ZWo,Fhe,eHo,oHo,fd,rHo,The,tHo,aHo,uV,nHo,sHo,lHo,fv,iHo,io,uy,dHo,Mhe,cHo,fHo,Da,mHo,Ehe,gHo,hHo,Che,pHo,uHo,whe,_Ho,bHo,vHo,_y,mv,Ahe,FHo,THo,_V,MHo,EHo,CHo,gv,yhe,wHo,AHo,bV,yHo,LHo,xHo,hv,$Ho,Lhe,kHo,SHo,xhe,RHo,BHo,pv,CBe,md,uv,$he,by,PHo,khe,IHo,wBe,Vo,vy,qHo,gd,NHo,vV,jHo,DHo,FV,GHo,OHo,VHo,Fy,XHo,She,zHo,QHo,WHo,ut,Ty,HHo,Rhe,UHo,JHo,hd,YHo,Bhe,KHo,ZHo,TV,eUo,oUo,rUo,_v,tUo,co,My,aUo,Phe,nUo,sUo,Ga,lUo,Ihe,iUo,dUo,qhe,cUo,fUo,Nhe,mUo,gUo,hUo,Oa,bv,jhe,pUo,uUo,MV,_Uo,bUo,vUo,vv,Dhe,FUo,TUo,EV,MUo,EUo,CUo,Fv,Ghe,wUo,AUo,CV,yUo,LUo,xUo,Tv,Ohe,$Uo,kUo,wV,SUo,RUo,BUo,Mv,PUo,Vhe,IUo,qUo,Xhe,NUo,jUo,Ev,ABe,pd,Cv,zhe,Ey,DUo,Qhe,GUo,yBe,Xo,Cy,OUo,ud,VUo,AV,XUo,zUo,yV,QUo,WUo,HUo,wy,UUo,Whe,JUo,YUo,KUo,_t,Ay,ZUo,Hhe,eJo,oJo,_d,rJo,Uhe,tJo,aJo,LV,nJo,sJo,lJo,wv,iJo,fo,yy,dJo,Jhe,cJo,fJo,Va,mJo,Yhe,gJo,hJo,Khe,pJo,uJo,Zhe,_Jo,bJo,vJo,bd,Av,epe,FJo,TJo,xV,MJo,EJo,CJo,yv,ope,wJo,AJo,$V,yJo,LJo,xJo,Lv,rpe,$Jo,kJo,kV,SJo,RJo,BJo,xv,PJo,tpe,IJo,qJo,ape,NJo,jJo,$v,LBe,vd,kv,npe,Ly,DJo,spe,GJo,xBe,zo,xy,OJo,Fd,VJo,SV,XJo,zJo,RV,QJo,WJo,HJo,$y,UJo,lpe,JJo,YJo,KJo,bt,ky,ZJo,ipe,eYo,oYo,Td,rYo,dpe,tYo,aYo,BV,nYo,sYo,lYo,Sv,iYo,mo,Sy,dYo,cpe,cYo,fYo,Xa,mYo,fpe,gYo,hYo,mpe,pYo,uYo,gpe,_Yo,bYo,vYo,hpe,Rv,ppe,FYo,TYo,PV,MYo,EYo,CYo,Bv,wYo,upe,AYo,yYo,_pe,LYo,xYo,Pv,$Be,Md,Iv,bpe,Ry,$Yo,vpe,kYo,kBe,Qo,By,SYo,Ed,RYo,IV,BYo,PYo,qV,IYo,qYo,NYo,Py,jYo,Fpe,DYo,GYo,OYo,vt,Iy,VYo,Tpe,XYo,zYo,Cd,QYo,Mpe,WYo,HYo,NV,UYo,JYo,YYo,qv,KYo,go,qy,ZYo,Epe,eKo,oKo,za,rKo,Cpe,tKo,aKo,wpe,nKo,sKo,Ape,lKo,iKo,dKo,ype,Nv,Lpe,cKo,fKo,jV,mKo,gKo,hKo,jv,pKo,xpe,uKo,_Ko,$pe,bKo,vKo,Dv,SBe,wd,Gv,kpe,Ny,FKo,Spe,TKo,RBe,Wo,jy,MKo,Ad,EKo,DV,CKo,wKo,GV,AKo,yKo,LKo,Dy,xKo,Rpe,$Ko,kKo,SKo,Ft,Gy,RKo,Bpe,BKo,PKo,yd,IKo,Ppe,qKo,NKo,OV,jKo,DKo,GKo,Ov,OKo,ho,Oy,VKo,Ipe,XKo,zKo,Qa,QKo,qpe,WKo,HKo,Npe,UKo,JKo,jpe,YKo,KKo,ZKo,Wa,Vv,Dpe,eZo,oZo,VV,rZo,tZo,aZo,Xv,Gpe,nZo,sZo,XV,lZo,iZo,dZo,zv,Ope,cZo,fZo,zV,mZo,gZo,hZo,Qv,Vpe,pZo,uZo,QV,_Zo,bZo,vZo,Wv,FZo,Xpe,TZo,MZo,zpe,EZo,CZo,Hv,BBe,Ld,Uv,Qpe,Vy,wZo,Wpe,AZo,PBe,Ho,Xy,yZo,xd,LZo,WV,xZo,$Zo,HV,kZo,SZo,RZo,zy,BZo,Hpe,PZo,IZo,qZo,Tt,Qy,NZo,Upe,jZo,DZo,$d,GZo,Jpe,OZo,VZo,UV,XZo,zZo,QZo,Jv,WZo,po,Wy,HZo,Ype,UZo,JZo,Ha,YZo,Kpe,KZo,ZZo,Zpe,eer,oer,eue,rer,ter,aer,oue,Yv,rue,ner,ser,JV,ler,ier,der,Kv,cer,tue,fer,mer,aue,ger,her,Zv,IBe,kd,eF,nue,Hy,per,sue,uer,qBe,Uo,Uy,_er,Sd,ber,YV,ver,Fer,KV,Ter,Mer,Eer,Jy,Cer,lue,wer,Aer,yer,Mt,Yy,Ler,iue,xer,$er,Rd,ker,due,Ser,Rer,ZV,Ber,Per,Ier,oF,qer,Er,Ky,Ner,cue,jer,Der,Ua,Ger,fue,Oer,Ver,mue,Xer,zer,gue,Qer,Wer,Her,j,rF,hue,Uer,Jer,eX,Yer,Ker,Zer,tF,pue,eor,oor,oX,ror,tor,aor,aF,uue,nor,sor,rX,lor,ior,dor,nF,_ue,cor,mor,tX,gor,hor,por,sF,bue,uor,_or,aX,bor,vor,For,lF,vue,Tor,Mor,nX,Eor,Cor,wor,iF,Fue,Aor,yor,sX,Lor,xor,$or,dF,Tue,kor,Sor,lX,Ror,Bor,Por,cF,Mue,Ior,qor,iX,Nor,jor,Dor,fF,Eue,Gor,Oor,dX,Vor,Xor,zor,mF,Cue,Qor,Wor,cX,Hor,Uor,Jor,gF,wue,Yor,Kor,fX,Zor,err,orr,hF,Aue,rrr,trr,mX,arr,nrr,srr,pF,yue,lrr,irr,gX,drr,crr,frr,uF,Lue,mrr,grr,hX,hrr,prr,urr,_F,xue,_rr,brr,pX,vrr,Frr,Trr,$s,$ue,Mrr,Err,uX,Crr,wrr,_X,Arr,yrr,Lrr,bF,kue,xrr,$rr,bX,krr,Srr,Rrr,vF,Sue,Brr,Prr,vX,Irr,qrr,Nrr,FF,Rue,jrr,Drr,FX,Grr,Orr,Vrr,TF,Bue,Xrr,zrr,TX,Qrr,Wrr,Hrr,MF,Pue,Urr,Jrr,MX,Yrr,Krr,Zrr,EF,Iue,etr,otr,EX,rtr,ttr,atr,CF,que,ntr,str,CX,ltr,itr,dtr,wF,Nue,ctr,ftr,wX,mtr,gtr,htr,AF,jue,ptr,utr,AX,_tr,btr,vtr,yF,Due,Ftr,Ttr,yX,Mtr,Etr,Ctr,LF,Gue,wtr,Atr,LX,ytr,Ltr,xtr,xF,Oue,$tr,ktr,xX,Str,Rtr,Btr,$F,Vue,Ptr,Itr,$X,qtr,Ntr,jtr,kF,Xue,Dtr,Gtr,kX,Otr,Vtr,Xtr,SF,zue,ztr,Qtr,SX,Wtr,Htr,Utr,RF,Que,Jtr,Ytr,RX,Ktr,Ztr,ear,BF,Wue,oar,rar,BX,tar,aar,nar,PF,Hue,sar,lar,PX,iar,dar,car,IF,Uue,far,mar,IX,gar,har,par,qF,Jue,uar,_ar,qX,bar,Far,Tar,NF,Yue,Mar,Ear,NX,Car,war,Aar,jF,Kue,yar,Lar,jX,xar,$ar,kar,DF,Zue,Sar,Rar,DX,Bar,Par,Iar,GF,e_e,qar,Nar,GX,jar,Dar,Gar,OF,o_e,Oar,Var,OX,Xar,zar,Qar,VF,r_e,War,Har,VX,Uar,Jar,Yar,XF,t_e,Kar,Zar,XX,enr,onr,rnr,zF,NBe,Bd,QF,a_e,Zy,tnr,n_e,anr,jBe,Jo,eL,nnr,Pd,snr,zX,lnr,inr,QX,dnr,cnr,fnr,oL,mnr,s_e,gnr,hnr,pnr,Et,rL,unr,l_e,_nr,bnr,Id,vnr,i_e,Fnr,Tnr,WX,Mnr,Enr,Cnr,WF,wnr,Cr,tL,Anr,d_e,ynr,Lnr,Ja,xnr,c_e,$nr,knr,f_e,Snr,Rnr,m_e,Bnr,Pnr,Inr,ne,HF,g_e,qnr,Nnr,HX,jnr,Dnr,Gnr,UF,h_e,Onr,Vnr,UX,Xnr,znr,Qnr,JF,p_e,Wnr,Hnr,JX,Unr,Jnr,Ynr,YF,u_e,Knr,Znr,YX,esr,osr,rsr,KF,__e,tsr,asr,KX,nsr,ssr,lsr,ZF,b_e,isr,dsr,ZX,csr,fsr,msr,e6,v_e,gsr,hsr,ez,psr,usr,_sr,o6,F_e,bsr,vsr,oz,Fsr,Tsr,Msr,r6,T_e,Esr,Csr,rz,wsr,Asr,ysr,t6,M_e,Lsr,xsr,tz,$sr,ksr,Ssr,a6,E_e,Rsr,Bsr,az,Psr,Isr,qsr,n6,C_e,Nsr,jsr,nz,Dsr,Gsr,Osr,s6,w_e,Vsr,Xsr,sz,zsr,Qsr,Wsr,l6,A_e,Hsr,Usr,lz,Jsr,Ysr,Ksr,i6,y_e,Zsr,elr,iz,olr,rlr,tlr,d6,L_e,alr,nlr,dz,slr,llr,ilr,c6,x_e,dlr,clr,cz,flr,mlr,glr,f6,$_e,hlr,plr,fz,ulr,_lr,blr,m6,k_e,vlr,Flr,mz,Tlr,Mlr,Elr,g6,S_e,Clr,wlr,gz,Alr,ylr,Llr,h6,R_e,xlr,$lr,hz,klr,Slr,Rlr,p6,B_e,Blr,Plr,pz,Ilr,qlr,Nlr,u6,P_e,jlr,Dlr,uz,Glr,Olr,Vlr,_6,DBe,qd,b6,I_e,aL,Xlr,q_e,zlr,GBe,Yo,nL,Qlr,Nd,Wlr,_z,Hlr,Ulr,bz,Jlr,Ylr,Klr,sL,Zlr,N_e,eir,oir,rir,Ct,lL,tir,j_e,air,nir,jd,sir,D_e,lir,iir,vz,dir,cir,fir,v6,mir,wr,iL,gir,G_e,hir,pir,Ya,uir,O_e,_ir,bir,V_e,vir,Fir,X_e,Tir,Mir,Eir,Te,F6,z_e,Cir,wir,Fz,Air,yir,Lir,T6,Q_e,xir,$ir,Tz,kir,Sir,Rir,M6,W_e,Bir,Pir,Mz,Iir,qir,Nir,E6,H_e,jir,Dir,Ez,Gir,Oir,Vir,C6,U_e,Xir,zir,Cz,Qir,Wir,Hir,w6,J_e,Uir,Jir,wz,Yir,Kir,Zir,A6,Y_e,edr,odr,Az,rdr,tdr,adr,y6,K_e,ndr,sdr,yz,ldr,idr,ddr,L6,Z_e,cdr,fdr,Lz,mdr,gdr,hdr,x6,e1e,pdr,udr,xz,_dr,bdr,vdr,$6,o1e,Fdr,Tdr,$z,Mdr,Edr,Cdr,k6,r1e,wdr,Adr,kz,ydr,Ldr,xdr,S6,OBe,Dd,R6,t1e,dL,$dr,a1e,kdr,VBe,Ko,cL,Sdr,Gd,Rdr,Sz,Bdr,Pdr,Rz,Idr,qdr,Ndr,fL,jdr,n1e,Ddr,Gdr,Odr,wt,mL,Vdr,s1e,Xdr,zdr,Od,Qdr,l1e,Wdr,Hdr,Bz,Udr,Jdr,Ydr,B6,Kdr,Ar,gL,Zdr,i1e,ecr,ocr,Ka,rcr,d1e,tcr,acr,c1e,ncr,scr,f1e,lcr,icr,dcr,hL,P6,m1e,ccr,fcr,Pz,mcr,gcr,hcr,I6,g1e,pcr,ucr,Iz,_cr,bcr,vcr,q6,XBe,Vd,N6,h1e,pL,Fcr,p1e,Tcr,zBe,Zo,uL,Mcr,Xd,Ecr,qz,Ccr,wcr,Nz,Acr,ycr,Lcr,_L,xcr,u1e,$cr,kcr,Scr,At,bL,Rcr,_1e,Bcr,Pcr,zd,Icr,b1e,qcr,Ncr,jz,jcr,Dcr,Gcr,j6,Ocr,yr,vL,Vcr,v1e,Xcr,zcr,Za,Qcr,F1e,Wcr,Hcr,T1e,Ucr,Jcr,M1e,Ycr,Kcr,Zcr,ie,D6,E1e,efr,ofr,Dz,rfr,tfr,afr,G6,C1e,nfr,sfr,Gz,lfr,ifr,dfr,O6,w1e,cfr,ffr,Oz,mfr,gfr,hfr,V6,A1e,pfr,ufr,Vz,_fr,bfr,vfr,X6,y1e,Ffr,Tfr,Xz,Mfr,Efr,Cfr,z6,L1e,wfr,Afr,zz,yfr,Lfr,xfr,Q6,x1e,$fr,kfr,Qz,Sfr,Rfr,Bfr,W6,$1e,Pfr,Ifr,Wz,qfr,Nfr,jfr,H6,k1e,Dfr,Gfr,Hz,Ofr,Vfr,Xfr,U6,S1e,zfr,Qfr,Uz,Wfr,Hfr,Ufr,J6,R1e,Jfr,Yfr,Jz,Kfr,Zfr,emr,Y6,B1e,omr,rmr,Yz,tmr,amr,nmr,K6,P1e,smr,lmr,Kz,imr,dmr,cmr,Z6,I1e,fmr,mmr,Zz,gmr,hmr,pmr,eT,q1e,umr,_mr,eQ,bmr,vmr,Fmr,oT,N1e,Tmr,Mmr,oQ,Emr,Cmr,wmr,rT,j1e,Amr,ymr,rQ,Lmr,xmr,$mr,tT,D1e,kmr,Smr,tQ,Rmr,Bmr,Pmr,aT,G1e,Imr,qmr,aQ,Nmr,jmr,Dmr,nT,O1e,Gmr,Omr,nQ,Vmr,Xmr,zmr,sT,QBe,Qd,lT,V1e,FL,Qmr,X1e,Wmr,WBe,er,TL,Hmr,Wd,Umr,sQ,Jmr,Ymr,lQ,Kmr,Zmr,egr,ML,ogr,z1e,rgr,tgr,agr,yt,EL,ngr,Q1e,sgr,lgr,Hd,igr,W1e,dgr,cgr,iQ,fgr,mgr,ggr,iT,hgr,Lr,CL,pgr,H1e,ugr,_gr,en,bgr,U1e,vgr,Fgr,J1e,Tgr,Mgr,Y1e,Egr,Cgr,wgr,ye,dT,K1e,Agr,ygr,dQ,Lgr,xgr,$gr,cT,Z1e,kgr,Sgr,cQ,Rgr,Bgr,Pgr,fT,e9e,Igr,qgr,fQ,Ngr,jgr,Dgr,mT,o9e,Ggr,Ogr,mQ,Vgr,Xgr,zgr,gT,r9e,Qgr,Wgr,gQ,Hgr,Ugr,Jgr,hT,t9e,Ygr,Kgr,hQ,Zgr,ehr,ohr,pT,a9e,rhr,thr,pQ,ahr,nhr,shr,uT,n9e,lhr,ihr,uQ,dhr,chr,fhr,_T,s9e,mhr,ghr,_Q,hhr,phr,uhr,bT,l9e,_hr,bhr,bQ,vhr,Fhr,Thr,vT,HBe,Ud,FT,i9e,wL,Mhr,d9e,Ehr,UBe,or,AL,Chr,Jd,whr,vQ,Ahr,yhr,FQ,Lhr,xhr,$hr,yL,khr,c9e,Shr,Rhr,Bhr,Lt,LL,Phr,f9e,Ihr,qhr,Yd,Nhr,m9e,jhr,Dhr,TQ,Ghr,Ohr,Vhr,TT,Xhr,xr,xL,zhr,g9e,Qhr,Whr,on,Hhr,h9e,Uhr,Jhr,p9e,Yhr,Khr,u9e,Zhr,epr,opr,Z,MT,_9e,rpr,tpr,MQ,apr,npr,spr,ET,b9e,lpr,ipr,EQ,dpr,cpr,fpr,CT,v9e,mpr,gpr,CQ,hpr,ppr,upr,wT,F9e,_pr,bpr,wQ,vpr,Fpr,Tpr,AT,T9e,Mpr,Epr,AQ,Cpr,wpr,Apr,yT,M9e,ypr,Lpr,yQ,xpr,$pr,kpr,LT,E9e,Spr,Rpr,LQ,Bpr,Ppr,Ipr,xT,C9e,qpr,Npr,xQ,jpr,Dpr,Gpr,$T,w9e,Opr,Vpr,$Q,Xpr,zpr,Qpr,kT,A9e,Wpr,Hpr,kQ,Upr,Jpr,Ypr,ST,y9e,Kpr,Zpr,SQ,eur,our,rur,RT,L9e,tur,aur,RQ,nur,sur,lur,BT,x9e,iur,dur,BQ,cur,fur,mur,PT,$9e,gur,hur,PQ,pur,uur,_ur,IT,k9e,bur,vur,IQ,Fur,Tur,Mur,qT,S9e,Eur,Cur,qQ,wur,Aur,yur,NT,R9e,Lur,xur,NQ,$ur,kur,Sur,jT,B9e,Rur,Bur,jQ,Pur,Iur,qur,DT,P9e,Nur,jur,DQ,Dur,Gur,Our,GT,I9e,Vur,Xur,GQ,zur,Qur,Wur,OT,q9e,Hur,Uur,OQ,Jur,Yur,Kur,VT,N9e,Zur,e_r,VQ,o_r,r_r,t_r,XT,j9e,a_r,n_r,XQ,s_r,l_r,i_r,zT,D9e,d_r,c_r,zQ,f_r,m_r,g_r,QT,G9e,h_r,p_r,QQ,u_r,__r,b_r,WT,O9e,v_r,F_r,WQ,T_r,M_r,E_r,HT,JBe,Kd,UT,V9e,$L,C_r,X9e,w_r,YBe,rr,kL,A_r,Zd,y_r,HQ,L_r,x_r,UQ,$_r,k_r,S_r,SL,R_r,z9e,B_r,P_r,I_r,xt,RL,q_r,Q9e,N_r,j_r,ec,D_r,W9e,G_r,O_r,JQ,V_r,X_r,z_r,JT,Q_r,$r,BL,W_r,H9e,H_r,U_r,rn,J_r,U9e,Y_r,K_r,J9e,Z_r,e1r,Y9e,o1r,r1r,t1r,pe,YT,K9e,a1r,n1r,YQ,s1r,l1r,i1r,KT,Z9e,d1r,c1r,KQ,f1r,m1r,g1r,ZT,ebe,h1r,p1r,ZQ,u1r,_1r,b1r,eM,obe,v1r,F1r,eW,T1r,M1r,E1r,oM,rbe,C1r,w1r,oW,A1r,y1r,L1r,rM,tbe,x1r,$1r,rW,k1r,S1r,R1r,tM,abe,B1r,P1r,tW,I1r,q1r,N1r,aM,nbe,j1r,D1r,aW,G1r,O1r,V1r,nM,sbe,X1r,z1r,nW,Q1r,W1r,H1r,sM,lbe,U1r,J1r,sW,Y1r,K1r,Z1r,lM,ibe,e9r,o9r,lW,r9r,t9r,a9r,iM,dbe,n9r,s9r,iW,l9r,i9r,d9r,dM,cbe,c9r,f9r,dW,m9r,g9r,h9r,cM,fbe,p9r,u9r,cW,_9r,b9r,v9r,fM,mbe,F9r,T9r,fW,M9r,E9r,C9r,mM,gbe,w9r,A9r,mW,y9r,L9r,x9r,gM,hbe,$9r,k9r,gW,S9r,R9r,B9r,hM,KBe,oc,pM,pbe,PL,P9r,ube,I9r,ZBe,tr,IL,q9r,rc,N9r,hW,j9r,D9r,pW,G9r,O9r,V9r,qL,X9r,_be,z9r,Q9r,W9r,$t,NL,H9r,bbe,U9r,J9r,tc,Y9r,vbe,K9r,Z9r,uW,ebr,obr,rbr,uM,tbr,kr,jL,abr,Fbe,nbr,sbr,tn,lbr,Tbe,ibr,dbr,Mbe,cbr,fbr,Ebe,mbr,gbr,hbr,Cbe,_M,wbe,pbr,ubr,_W,_br,bbr,vbr,bM,ePe,ac,vM,Abe,DL,Fbr,ybe,Tbr,oPe,ar,GL,Mbr,nc,Ebr,bW,Cbr,wbr,vW,Abr,ybr,Lbr,OL,xbr,Lbe,$br,kbr,Sbr,kt,VL,Rbr,xbe,Bbr,Pbr,sc,Ibr,$be,qbr,Nbr,FW,jbr,Dbr,Gbr,FM,Obr,Sr,XL,Vbr,kbe,Xbr,zbr,an,Qbr,Sbe,Wbr,Hbr,Rbe,Ubr,Jbr,Bbe,Ybr,Kbr,Zbr,de,TM,Pbe,e2r,o2r,TW,r2r,t2r,a2r,MM,Ibe,n2r,s2r,MW,l2r,i2r,d2r,EM,qbe,c2r,f2r,EW,m2r,g2r,h2r,CM,Nbe,p2r,u2r,CW,_2r,b2r,v2r,wM,jbe,F2r,T2r,wW,M2r,E2r,C2r,AM,Dbe,w2r,A2r,AW,y2r,L2r,x2r,yM,Gbe,$2r,k2r,yW,S2r,R2r,B2r,LM,Obe,P2r,I2r,LW,q2r,N2r,j2r,xM,Vbe,D2r,G2r,xW,O2r,V2r,X2r,$M,Xbe,z2r,Q2r,$W,W2r,H2r,U2r,kM,zbe,J2r,Y2r,kW,K2r,Z2r,e5r,SM,Qbe,o5r,r5r,SW,t5r,a5r,n5r,RM,Wbe,s5r,l5r,RW,i5r,d5r,c5r,BM,Hbe,f5r,m5r,BW,g5r,h5r,p5r,PM,Ube,u5r,_5r,PW,b5r,v5r,F5r,IM,Jbe,T5r,M5r,IW,E5r,C5r,w5r,qM,Ybe,A5r,y5r,qW,L5r,x5r,$5r,NM,Kbe,k5r,S5r,NW,R5r,B5r,P5r,jM,Zbe,I5r,q5r,jW,N5r,j5r,D5r,DM,e2e,G5r,O5r,DW,V5r,X5r,z5r,GM,rPe,lc,OM,o2e,zL,Q5r,r2e,W5r,tPe,nr,QL,H5r,ic,U5r,GW,J5r,Y5r,OW,K5r,Z5r,evr,WL,ovr,t2e,rvr,tvr,avr,St,HL,nvr,a2e,svr,lvr,dc,ivr,n2e,dvr,cvr,VW,fvr,mvr,gvr,VM,hvr,Rr,UL,pvr,s2e,uvr,_vr,nn,bvr,l2e,vvr,Fvr,i2e,Tvr,Mvr,d2e,Evr,Cvr,wvr,ce,XM,c2e,Avr,yvr,XW,Lvr,xvr,$vr,zM,f2e,kvr,Svr,zW,Rvr,Bvr,Pvr,QM,m2e,Ivr,qvr,QW,Nvr,jvr,Dvr,WM,g2e,Gvr,Ovr,WW,Vvr,Xvr,zvr,HM,h2e,Qvr,Wvr,HW,Hvr,Uvr,Jvr,UM,p2e,Yvr,Kvr,UW,Zvr,eFr,oFr,JM,u2e,rFr,tFr,JW,aFr,nFr,sFr,YM,_2e,lFr,iFr,YW,dFr,cFr,fFr,KM,b2e,mFr,gFr,KW,hFr,pFr,uFr,ZM,v2e,_Fr,bFr,ZW,vFr,FFr,TFr,e4,F2e,MFr,EFr,eH,CFr,wFr,AFr,o4,T2e,yFr,LFr,oH,xFr,$Fr,kFr,r4,M2e,SFr,RFr,rH,BFr,PFr,IFr,t4,E2e,qFr,NFr,tH,jFr,DFr,GFr,a4,C2e,OFr,VFr,aH,XFr,zFr,QFr,n4,w2e,WFr,HFr,nH,UFr,JFr,YFr,s4,A2e,KFr,ZFr,sH,e6r,o6r,r6r,l4,y2e,t6r,a6r,lH,n6r,s6r,l6r,i4,L2e,i6r,d6r,iH,c6r,f6r,m6r,d4,x2e,g6r,h6r,dH,p6r,u6r,_6r,c4,aPe,cc,f4,$2e,JL,b6r,k2e,v6r,nPe,sr,YL,F6r,fc,T6r,cH,M6r,E6r,fH,C6r,w6r,A6r,KL,y6r,S2e,L6r,x6r,$6r,Rt,ZL,k6r,R2e,S6r,R6r,mc,B6r,B2e,P6r,I6r,mH,q6r,N6r,j6r,m4,D6r,Br,e8,G6r,P2e,O6r,V6r,sn,X6r,I2e,z6r,Q6r,q2e,W6r,H6r,N2e,U6r,J6r,Y6r,j2e,g4,D2e,K6r,Z6r,gH,eTr,oTr,rTr,h4,sPe,gc,p4,G2e,o8,tTr,O2e,aTr,lPe,lr,r8,nTr,hc,sTr,hH,lTr,iTr,pH,dTr,cTr,fTr,t8,mTr,V2e,gTr,hTr,pTr,Bt,a8,uTr,X2e,_Tr,bTr,pc,vTr,z2e,FTr,TTr,uH,MTr,ETr,CTr,u4,wTr,Pr,n8,ATr,Q2e,yTr,LTr,ln,xTr,W2e,$Tr,kTr,H2e,STr,RTr,U2e,BTr,PTr,ITr,J2e,_4,Y2e,qTr,NTr,_H,jTr,DTr,GTr,b4,iPe,uc,v4,K2e,s8,OTr,Z2e,VTr,dPe,ir,l8,XTr,_c,zTr,bH,QTr,WTr,vH,HTr,UTr,JTr,i8,YTr,e5e,KTr,ZTr,eMr,Pt,d8,oMr,o5e,rMr,tMr,bc,aMr,r5e,nMr,sMr,FH,lMr,iMr,dMr,F4,cMr,Ir,c8,fMr,t5e,mMr,gMr,dn,hMr,a5e,pMr,uMr,n5e,_Mr,bMr,s5e,vMr,FMr,TMr,oe,T4,l5e,MMr,EMr,TH,CMr,wMr,AMr,M4,i5e,yMr,LMr,MH,xMr,$Mr,kMr,E4,d5e,SMr,RMr,EH,BMr,PMr,IMr,C4,c5e,qMr,NMr,CH,jMr,DMr,GMr,w4,f5e,OMr,VMr,wH,XMr,zMr,QMr,A4,m5e,WMr,HMr,AH,UMr,JMr,YMr,y4,g5e,KMr,ZMr,yH,e4r,o4r,r4r,L4,h5e,t4r,a4r,LH,n4r,s4r,l4r,x4,p5e,i4r,d4r,xH,c4r,f4r,m4r,$4,u5e,g4r,h4r,$H,p4r,u4r,_4r,k4,_5e,b4r,v4r,kH,F4r,T4r,M4r,S4,b5e,E4r,C4r,SH,w4r,A4r,y4r,R4,v5e,L4r,x4r,RH,$4r,k4r,S4r,B4,F5e,R4r,B4r,BH,P4r,I4r,q4r,P4,T5e,N4r,j4r,PH,D4r,G4r,O4r,I4,M5e,V4r,X4r,IH,z4r,Q4r,W4r,q4,E5e,H4r,U4r,qH,J4r,Y4r,K4r,N4,C5e,Z4r,eEr,NH,oEr,rEr,tEr,j4,w5e,aEr,nEr,jH,sEr,lEr,iEr,D4,A5e,dEr,cEr,DH,fEr,mEr,gEr,G4,y5e,hEr,pEr,GH,uEr,_Er,bEr,O4,L5e,vEr,FEr,OH,TEr,MEr,EEr,V4,x5e,CEr,wEr,VH,AEr,yEr,LEr,X4,$5e,xEr,$Er,XH,kEr,SEr,REr,z4,k5e,BEr,PEr,zH,IEr,qEr,NEr,Q4,cPe,vc,W4,S5e,f8,jEr,R5e,DEr,fPe,dr,m8,GEr,Fc,OEr,QH,VEr,XEr,WH,zEr,QEr,WEr,g8,HEr,B5e,UEr,JEr,YEr,It,h8,KEr,P5e,ZEr,eCr,Tc,oCr,I5e,rCr,tCr,HH,aCr,nCr,sCr,H4,lCr,qr,p8,iCr,q5e,dCr,cCr,cn,fCr,N5e,mCr,gCr,j5e,hCr,pCr,D5e,uCr,_Cr,bCr,cr,U4,G5e,vCr,FCr,UH,TCr,MCr,ECr,J4,O5e,CCr,wCr,V5e,ACr,yCr,LCr,Y4,X5e,xCr,$Cr,JH,kCr,SCr,RCr,K4,z5e,BCr,PCr,YH,ICr,qCr,NCr,Z4,Q5e,jCr,DCr,KH,GCr,OCr,VCr,eE,W5e,XCr,zCr,ZH,QCr,WCr,HCr,oE,mPe,Mc,rE,H5e,u8,UCr,U5e,JCr,gPe,fr,_8,YCr,Ec,KCr,eU,ZCr,e3r,oU,o3r,r3r,t3r,b8,a3r,J5e,n3r,s3r,l3r,qt,v8,i3r,Y5e,d3r,c3r,Cc,f3r,K5e,m3r,g3r,rU,h3r,p3r,u3r,tE,_3r,Nr,F8,b3r,Z5e,v3r,F3r,fn,T3r,eve,M3r,E3r,ove,C3r,w3r,rve,A3r,y3r,L3r,Me,aE,tve,x3r,$3r,tU,k3r,S3r,R3r,nE,ave,B3r,P3r,aU,I3r,q3r,N3r,sE,nve,j3r,D3r,nU,G3r,O3r,V3r,lE,sve,X3r,z3r,sU,Q3r,W3r,H3r,iE,lve,U3r,J3r,lU,Y3r,K3r,Z3r,dE,ive,ewr,owr,iU,rwr,twr,awr,cE,dve,nwr,swr,dU,lwr,iwr,dwr,fE,cve,cwr,fwr,cU,mwr,gwr,hwr,mE,fve,pwr,uwr,fU,_wr,bwr,vwr,gE,mve,Fwr,Twr,mU,Mwr,Ewr,Cwr,hE,gve,wwr,Awr,gU,ywr,Lwr,xwr,pE,hve,$wr,kwr,hU,Swr,Rwr,Bwr,uE,hPe,wc,_E,pve,T8,Pwr,uve,Iwr,pPe,mr,M8,qwr,Ac,Nwr,pU,jwr,Dwr,uU,Gwr,Owr,Vwr,E8,Xwr,_ve,zwr,Qwr,Wwr,Nt,C8,Hwr,bve,Uwr,Jwr,yc,Ywr,vve,Kwr,Zwr,_U,eAr,oAr,rAr,bE,tAr,jr,w8,aAr,Fve,nAr,sAr,mn,lAr,Tve,iAr,dAr,Mve,cAr,fAr,Eve,mAr,gAr,hAr,Le,vE,Cve,pAr,uAr,bU,_Ar,bAr,vAr,FE,wve,FAr,TAr,vU,MAr,EAr,CAr,TE,Ave,wAr,AAr,FU,yAr,LAr,xAr,ME,yve,$Ar,kAr,TU,SAr,RAr,BAr,EE,Lve,PAr,IAr,MU,qAr,NAr,jAr,CE,xve,DAr,GAr,EU,OAr,VAr,XAr,wE,$ve,zAr,QAr,CU,WAr,HAr,UAr,AE,kve,JAr,YAr,wU,KAr,ZAr,e0r,yE,Sve,o0r,r0r,AU,t0r,a0r,n0r,LE,Rve,s0r,l0r,yU,i0r,d0r,c0r,xE,uPe,Lc,$E,Bve,A8,f0r,Pve,m0r,_Pe,gr,y8,g0r,xc,h0r,LU,p0r,u0r,xU,_0r,b0r,v0r,L8,F0r,Ive,T0r,M0r,E0r,jt,x8,C0r,qve,w0r,A0r,$c,y0r,Nve,L0r,x0r,$U,$0r,k0r,S0r,kE,R0r,Dr,$8,B0r,jve,P0r,I0r,gn,q0r,Dve,N0r,j0r,Gve,D0r,G0r,Ove,O0r,V0r,X0r,ke,SE,Vve,z0r,Q0r,kU,W0r,H0r,U0r,RE,Xve,J0r,Y0r,SU,K0r,Z0r,eyr,BE,zve,oyr,ryr,RU,tyr,ayr,nyr,PE,Qve,syr,lyr,BU,iyr,dyr,cyr,IE,Wve,fyr,myr,PU,gyr,hyr,pyr,qE,Hve,uyr,_yr,IU,byr,vyr,Fyr,NE,Uve,Tyr,Myr,qU,Eyr,Cyr,wyr,jE,Jve,Ayr,yyr,NU,Lyr,xyr,$yr,DE,Yve,kyr,Syr,jU,Ryr,Byr,Pyr,GE,bPe,kc,OE,Kve,k8,Iyr,Zve,qyr,vPe,hr,S8,Nyr,Sc,jyr,DU,Dyr,Gyr,GU,Oyr,Vyr,Xyr,R8,zyr,eFe,Qyr,Wyr,Hyr,Dt,B8,Uyr,oFe,Jyr,Yyr,Rc,Kyr,rFe,Zyr,eLr,OU,oLr,rLr,tLr,VE,aLr,Gr,P8,nLr,tFe,sLr,lLr,hn,iLr,aFe,dLr,cLr,nFe,fLr,mLr,sFe,gLr,hLr,pLr,xe,XE,lFe,uLr,_Lr,VU,bLr,vLr,FLr,zE,iFe,TLr,MLr,XU,ELr,CLr,wLr,QE,dFe,ALr,yLr,zU,LLr,xLr,$Lr,WE,cFe,kLr,SLr,QU,RLr,BLr,PLr,HE,fFe,ILr,qLr,WU,NLr,jLr,DLr,UE,mFe,GLr,OLr,HU,VLr,XLr,zLr,JE,gFe,QLr,WLr,UU,HLr,ULr,JLr,YE,hFe,YLr,KLr,JU,ZLr,e8r,o8r,KE,pFe,r8r,t8r,YU,a8r,n8r,s8r,ZE,uFe,l8r,i8r,KU,d8r,c8r,f8r,eC,FPe,Bc,oC,_Fe,I8,m8r,bFe,g8r,TPe,pr,q8,h8r,Pc,p8r,ZU,u8r,_8r,eJ,b8r,v8r,F8r,N8,T8r,vFe,M8r,E8r,C8r,Gt,j8,w8r,FFe,A8r,y8r,Ic,L8r,TFe,x8r,$8r,oJ,k8r,S8r,R8r,rC,B8r,Or,D8,P8r,MFe,I8r,q8r,pn,N8r,EFe,j8r,D8r,CFe,G8r,O8r,wFe,V8r,X8r,z8r,$e,tC,AFe,Q8r,W8r,rJ,H8r,U8r,J8r,aC,yFe,Y8r,K8r,tJ,Z8r,e7r,o7r,nC,LFe,r7r,t7r,aJ,a7r,n7r,s7r,sC,xFe,l7r,i7r,nJ,d7r,c7r,f7r,lC,$Fe,m7r,g7r,sJ,h7r,p7r,u7r,iC,kFe,_7r,b7r,lJ,v7r,F7r,T7r,dC,SFe,M7r,E7r,iJ,C7r,w7r,A7r,cC,RFe,y7r,L7r,dJ,x7r,$7r,k7r,fC,BFe,S7r,R7r,cJ,B7r,P7r,I7r,mC,PFe,q7r,N7r,fJ,j7r,D7r,G7r,gC,MPe,qc,hC,IFe,G8,O7r,qFe,V7r,EPe,ur,O8,X7r,Nc,z7r,mJ,Q7r,W7r,gJ,H7r,U7r,J7r,V8,Y7r,NFe,K7r,Z7r,exr,Ot,X8,oxr,jFe,rxr,txr,jc,axr,DFe,nxr,sxr,hJ,lxr,ixr,dxr,pC,cxr,Vr,z8,fxr,GFe,mxr,gxr,un,hxr,OFe,pxr,uxr,VFe,_xr,bxr,XFe,vxr,Fxr,Txr,je,uC,zFe,Mxr,Exr,pJ,Cxr,wxr,Axr,_C,QFe,yxr,Lxr,uJ,xxr,$xr,kxr,bC,WFe,Sxr,Rxr,_J,Bxr,Pxr,Ixr,vC,HFe,qxr,Nxr,bJ,jxr,Dxr,Gxr,FC,UFe,Oxr,Vxr,vJ,Xxr,zxr,Qxr,TC,JFe,Wxr,Hxr,FJ,Uxr,Jxr,Yxr,MC,YFe,Kxr,Zxr,TJ,e$r,o$r,r$r,EC,KFe,t$r,a$r,MJ,n$r,s$r,l$r,CC,CPe,Dc,wC,ZFe,Q8,i$r,e6e,d$r,wPe,_r,W8,c$r,Gc,f$r,EJ,m$r,g$r,CJ,h$r,p$r,u$r,H8,_$r,o6e,b$r,v$r,F$r,Vt,U8,T$r,r6e,M$r,E$r,Oc,C$r,t6e,w$r,A$r,wJ,y$r,L$r,x$r,AC,$$r,Xr,J8,k$r,a6e,S$r,R$r,_n,B$r,n6e,P$r,I$r,s6e,q$r,N$r,l6e,j$r,D$r,G$r,De,yC,i6e,O$r,V$r,AJ,X$r,z$r,Q$r,LC,d6e,W$r,H$r,yJ,U$r,J$r,Y$r,xC,c6e,K$r,Z$r,LJ,ekr,okr,rkr,$C,f6e,tkr,akr,xJ,nkr,skr,lkr,kC,m6e,ikr,dkr,$J,ckr,fkr,mkr,SC,g6e,gkr,hkr,kJ,pkr,ukr,_kr,RC,h6e,bkr,vkr,SJ,Fkr,Tkr,Mkr,BC,p6e,Ekr,Ckr,RJ,wkr,Akr,ykr,PC,APe,Vc,IC,u6e,Y8,Lkr,_6e,xkr,yPe,br,K8,$kr,Xc,kkr,BJ,Skr,Rkr,PJ,Bkr,Pkr,Ikr,Z8,qkr,b6e,Nkr,jkr,Dkr,Xt,e7,Gkr,v6e,Okr,Vkr,zc,Xkr,F6e,zkr,Qkr,IJ,Wkr,Hkr,Ukr,qC,Jkr,zr,o7,Ykr,T6e,Kkr,Zkr,bn,eSr,M6e,oSr,rSr,E6e,tSr,aSr,C6e,nSr,sSr,lSr,w6e,NC,A6e,iSr,dSr,qJ,cSr,fSr,mSr,jC,LPe,Qc,DC,y6e,r7,gSr,L6e,hSr,xPe,vr,t7,pSr,Wc,uSr,NJ,_Sr,bSr,jJ,vSr,FSr,TSr,a7,MSr,x6e,ESr,CSr,wSr,zt,n7,ASr,$6e,ySr,LSr,Hc,xSr,k6e,$Sr,kSr,DJ,SSr,RSr,BSr,GC,PSr,Qr,s7,ISr,S6e,qSr,NSr,vn,jSr,R6e,DSr,GSr,B6e,OSr,VSr,P6e,XSr,zSr,QSr,l7,OC,I6e,WSr,HSr,GJ,USr,JSr,YSr,VC,q6e,KSr,ZSr,OJ,eRr,oRr,rRr,XC,$Pe,Uc,zC,N6e,i7,tRr,j6e,aRr,kPe,Fr,d7,nRr,Jc,sRr,VJ,lRr,iRr,XJ,dRr,cRr,fRr,c7,mRr,D6e,gRr,hRr,pRr,Qt,f7,uRr,G6e,_Rr,bRr,Yc,vRr,O6e,FRr,TRr,zJ,MRr,ERr,CRr,QC,wRr,Wr,m7,ARr,V6e,yRr,LRr,Fn,xRr,X6e,$Rr,kRr,z6e,SRr,RRr,Q6e,BRr,PRr,IRr,W6e,WC,H6e,qRr,NRr,QJ,jRr,DRr,GRr,HC,SPe;return d=new ee({}),va=new B({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),hA=new ee({}),pA=new B({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),sf=new ORr({props:{warning:!0,$$slots:{default:[v4t]},$$scope:{ctx:A}}}),uA=new ee({}),_A=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/configuration_auto.py#L560"}}),FA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/configuration_auto.py#L583"}}),tg=new P({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[F4t]},$$scope:{ctx:A}}}),TA=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/configuration_auto.py#L705"}}),MA=new ee({}),EA=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/tokenization_auto.py#L377"}}),AA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_16995/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/tokenization_auto.py#L391"}}),Pg=new P({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[T4t]},$$scope:{ctx:A}}}),yA=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/tokenization_auto.py#L587"}}),LA=new ee({}),xA=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/feature_extraction_auto.py#L176"}}),SA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_16995/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/feature_extraction_auto.py#L190"}}),lh=new ORr({props:{$$slots:{default:[M4t]},$$scope:{ctx:A}}}),ih=new P({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[E4t]},$$scope:{ctx:A}}}),RA=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/feature_extraction_auto.py#L317"}}),BA=new ee({}),PA=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/processing_auto.py#L76"}}),NA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/processing_auto.py#L90"}}),wh=new ORr({props:{$$slots:{default:[C4t]},$$scope:{ctx:A}}}),Ah=new P({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[w4t]},$$scope:{ctx:A}}}),jA=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/processing_auto.py#L243"}}),DA=new ee({}),GA=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/modeling_auto.py#L714"}}),VA=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16995/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_16995/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L389"}}),xh=new P({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[A4t]},$$scope:{ctx:A}}}),XA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L417"}}),uu=new P({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[y4t]},$$scope:{ctx:A}}}),zA=new ee({}),QA=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/modeling_auto.py#L721"}}),HA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16995/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L389"}}),bu=new P({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[L4t]},$$scope:{ctx:A}}}),UA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L417"}}),n_=new P({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[x4t]},$$scope:{ctx:A}}}),JA=new ee({}),YA=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/modeling_auto.py#L736"}}),ZA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16995/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L389"}}),l_=new P({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[$4t]},$$scope:{ctx:A}}}),e0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L417"}}),X_=new P({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[k4t]},$$scope:{ctx:A}}}),o0=new ee({}),r0=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/modeling_auto.py#L743"}}),a0=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16995/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L389"}}),Q_=new P({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[S4t]},$$scope:{ctx:A}}}),n0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L417"}}),x1=new P({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[R4t]},$$scope:{ctx:A}}}),s0=new ee({}),l0=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/modeling_auto.py#L750"}}),d0=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16995/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLMProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L389"}}),k1=new P({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[B4t]},$$scope:{ctx:A}}}),c0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L417"}}),J1=new P({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[P4t]},$$scope:{ctx:A}}}),f0=new ee({}),m0=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/modeling_auto.py#L759"}}),h0=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16995/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L389"}}),K1=new P({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[I4t]},$$scope:{ctx:A}}}),p0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L417"}}),W9=new P({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[q4t]},$$scope:{ctx:A}}}),u0=new ee({}),_0=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/modeling_auto.py#L793"}}),v0=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16995/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L389"}}),U9=new P({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[N4t]},$$scope:{ctx:A}}}),F0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L417"}}),wb=new P({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[j4t]},$$scope:{ctx:A}}}),T0=new ee({}),M0=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/modeling_auto.py#L800"}}),C0=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16995/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L389"}}),yb=new P({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[D4t]},$$scope:{ctx:A}}}),w0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L417"}}),Bb=new P({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[G4t]},$$scope:{ctx:A}}}),A0=new ee({}),y0=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/modeling_auto.py#L786"}}),x0=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16995/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L389"}}),Ib=new P({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[O4t]},$$scope:{ctx:A}}}),$0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L417"}}),_2=new P({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[V4t]},$$scope:{ctx:A}}}),k0=new ee({}),S0=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/modeling_auto.py#L768"}}),B0=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16995/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L389"}}),v2=new P({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[X4t]},$$scope:{ctx:A}}}),P0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L417"}}),s5=new P({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[z4t]},$$scope:{ctx:A}}}),I0=new ee({}),q0=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/modeling_auto.py#L775"}}),j0=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16995/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L389"}}),i5=new P({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[Q4t]},$$scope:{ctx:A}}}),D0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L417"}}),f5=new P({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[W4t]},$$scope:{ctx:A}}}),G0=new ee({}),O0=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/modeling_auto.py#L809"}}),X0=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16995/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_16995/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_16995/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_16995/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L389"}}),g5=new P({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[H4t]},$$scope:{ctx:A}}}),z0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L417"}}),A5=new P({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[U4t]},$$scope:{ctx:A}}}),Q0=new ee({}),W0=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/modeling_auto.py#L848"}}),U0=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16995/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L389"}}),L5=new P({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[J4t]},$$scope:{ctx:A}}}),J0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L417"}}),k5=new P({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[Y4t]},$$scope:{ctx:A}}}),Y0=new ee({}),K0=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/modeling_auto.py#L855"}}),ey=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16995/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L389"}}),R5=new P({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[K4t]},$$scope:{ctx:A}}}),oy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L417"}}),V5=new P({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[Z4t]},$$scope:{ctx:A}}}),ry=new ee({}),ty=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/modeling_auto.py#L878"}}),ny=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16995/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L389"}}),z5=new P({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[eEt]},$$scope:{ctx:A}}}),sy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L417"}}),Y5=new P({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[oEt]},$$scope:{ctx:A}}}),ly=new ee({}),iy=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/modeling_auto.py#L862"}}),cy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16995/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L389"}}),Z5=new P({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[rEt]},$$scope:{ctx:A}}}),fy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L417"}}),dv=new P({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[tEt]},$$scope:{ctx:A}}}),my=new ee({}),gy=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/modeling_auto.py#L869"}}),py=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16995/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L389"}}),fv=new P({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[aEt]},$$scope:{ctx:A}}}),uy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L417"}}),pv=new P({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[nEt]},$$scope:{ctx:A}}}),by=new ee({}),vy=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/modeling_auto.py#L887"}}),Ty=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16995/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L389"}}),_v=new P({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[sEt]},$$scope:{ctx:A}}}),My=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L417"}}),Ev=new P({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[lEt]},$$scope:{ctx:A}}}),Ey=new ee({}),Cy=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/modeling_auto.py#L894"}}),Ay=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16995/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L389"}}),wv=new P({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[iEt]},$$scope:{ctx:A}}}),yy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L417"}}),$v=new P({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[dEt]},$$scope:{ctx:A}}}),Ly=new ee({}),xy=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/modeling_auto.py#L841"}}),ky=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16995/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L389"}}),Sv=new P({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[cEt]},$$scope:{ctx:A}}}),Sy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L417"}}),Pv=new P({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[fEt]},$$scope:{ctx:A}}}),Ry=new ee({}),By=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/modeling_auto.py#L816"}}),Iy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16995/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L389"}}),qv=new P({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[mEt]},$$scope:{ctx:A}}}),qy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L417"}}),Dv=new P({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[gEt]},$$scope:{ctx:A}}}),Ny=new ee({}),jy=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/modeling_auto.py#L823"}}),Gy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16995/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L389"}}),Ov=new P({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[hEt]},$$scope:{ctx:A}}}),Oy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L417"}}),Hv=new P({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[pEt]},$$scope:{ctx:A}}}),Vy=new ee({}),Xy=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/modeling_auto.py#L832"}}),Qy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16995/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L389"}}),Jv=new P({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[uEt]},$$scope:{ctx:A}}}),Wy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L417"}}),Zv=new P({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[_Et]},$$scope:{ctx:A}}}),Hy=new ee({}),Uy=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/modeling_tf_auto.py#L381"}}),Yy=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16995/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_16995/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L389"}}),oF=new P({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[bEt]},$$scope:{ctx:A}}}),Ky=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L417"}}),zF=new P({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[vEt]},$$scope:{ctx:A}}}),Zy=new ee({}),eL=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/modeling_tf_auto.py#L388"}}),rL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16995/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L389"}}),WF=new P({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[FEt]},$$scope:{ctx:A}}}),tL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L417"}}),_6=new P({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[TEt]},$$scope:{ctx:A}}}),aL=new ee({}),nL=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/modeling_tf_auto.py#L403"}}),lL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16995/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L389"}}),v6=new P({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[MEt]},$$scope:{ctx:A}}}),iL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L417"}}),S6=new P({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[EEt]},$$scope:{ctx:A}}}),dL=new ee({}),cL=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/modeling_tf_auto.py#L410"}}),mL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16995/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L389"}}),B6=new P({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[CEt]},$$scope:{ctx:A}}}),gL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L417"}}),q6=new P({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[wEt]},$$scope:{ctx:A}}}),pL=new ee({}),uL=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/modeling_tf_auto.py#L424"}}),bL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16995/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L389"}}),j6=new P({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[AEt]},$$scope:{ctx:A}}}),vL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L417"}}),sT=new P({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[yEt]},$$scope:{ctx:A}}}),FL=new ee({}),TL=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/modeling_tf_auto.py#L431"}}),EL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16995/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L389"}}),iT=new P({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[LEt]},$$scope:{ctx:A}}}),CL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L417"}}),vT=new P({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[xEt]},$$scope:{ctx:A}}}),wL=new ee({}),AL=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/modeling_tf_auto.py#L440"}}),LL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16995/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L389"}}),TT=new P({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[$Et]},$$scope:{ctx:A}}}),xL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L417"}}),HT=new P({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[kEt]},$$scope:{ctx:A}}}),$L=new ee({}),kL=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/modeling_tf_auto.py#L476"}}),RL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16995/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L389"}}),JT=new P({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[SEt]},$$scope:{ctx:A}}}),BL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L417"}}),hM=new P({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[REt]},$$scope:{ctx:A}}}),PL=new ee({}),IL=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/modeling_tf_auto.py#L456"}}),NL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16995/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L389"}}),uM=new P({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[BEt]},$$scope:{ctx:A}}}),jL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L417"}}),bM=new P({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[PEt]},$$scope:{ctx:A}}}),DL=new ee({}),GL=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/modeling_tf_auto.py#L467"}}),VL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16995/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L389"}}),FM=new P({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[IEt]},$$scope:{ctx:A}}}),XL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L417"}}),GM=new P({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[qEt]},$$scope:{ctx:A}}}),zL=new ee({}),QL=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/modeling_tf_auto.py#L449"}}),HL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16995/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L389"}}),VM=new P({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[NEt]},$$scope:{ctx:A}}}),UL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L417"}}),c4=new P({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[jEt]},$$scope:{ctx:A}}}),JL=new ee({}),YL=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/modeling_tf_auto.py#L417"}}),ZL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16995/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L389"}}),m4=new P({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[DEt]},$$scope:{ctx:A}}}),e8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L417"}}),h4=new P({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[GEt]},$$scope:{ctx:A}}}),o8=new ee({}),r8=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/modeling_tf_auto.py#L492"}}),a8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16995/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L389"}}),u4=new P({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[OEt]},$$scope:{ctx:A}}}),n8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L417"}}),b4=new P({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[VEt]},$$scope:{ctx:A}}}),s8=new ee({}),l8=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/modeling_flax_auto.py#L238"}}),d8=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16995/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L389"}}),F4=new P({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[XEt]},$$scope:{ctx:A}}}),c8=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L417"}}),Q4=new P({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[zEt]},$$scope:{ctx:A}}}),f8=new ee({}),m8=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/modeling_flax_auto.py#L252"}}),h8=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16995/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <code>FlaxBertForCausalLM</code> (BERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L389"}}),H4=new P({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[QEt]},$$scope:{ctx:A}}}),p8=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L417"}}),oE=new P({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[WEt]},$$scope:{ctx:A}}}),u8=new ee({}),_8=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/modeling_flax_auto.py#L245"}}),v8=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16995/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L389"}}),tE=new P({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[HEt]},$$scope:{ctx:A}}}),F8=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L417"}}),uE=new P({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[UEt]},$$scope:{ctx:A}}}),T8=new ee({}),M8=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/modeling_flax_auto.py#L259"}}),C8=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16995/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L389"}}),bE=new P({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[JEt]},$$scope:{ctx:A}}}),w8=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L417"}}),xE=new P({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[YEt]},$$scope:{ctx:A}}}),A8=new ee({}),y8=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/modeling_flax_auto.py#L266"}}),x8=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16995/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L389"}}),kE=new P({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[KEt]},$$scope:{ctx:A}}}),$8=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L417"}}),GE=new P({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[ZEt]},$$scope:{ctx:A}}}),k8=new ee({}),S8=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/modeling_flax_auto.py#L275"}}),B8=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16995/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L389"}}),VE=new P({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[eCt]},$$scope:{ctx:A}}}),P8=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L417"}}),eC=new P({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[oCt]},$$scope:{ctx:A}}}),I8=new ee({}),q8=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/modeling_flax_auto.py#L284"}}),j8=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16995/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L389"}}),rC=new P({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[rCt]},$$scope:{ctx:A}}}),D8=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L417"}}),gC=new P({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[tCt]},$$scope:{ctx:A}}}),G8=new ee({}),O8=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/modeling_flax_auto.py#L291"}}),X8=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16995/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L389"}}),pC=new P({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[aCt]},$$scope:{ctx:A}}}),z8=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L417"}}),CC=new P({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[nCt]},$$scope:{ctx:A}}}),Q8=new ee({}),W8=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/modeling_flax_auto.py#L300"}}),U8=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16995/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L389"}}),AC=new P({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[sCt]},$$scope:{ctx:A}}}),J8=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L417"}}),PC=new P({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[lCt]},$$scope:{ctx:A}}}),Y8=new ee({}),K8=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/modeling_flax_auto.py#L307"}}),e7=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16995/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L389"}}),qC=new P({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[iCt]},$$scope:{ctx:A}}}),o7=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L417"}}),jC=new P({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[dCt]},$$scope:{ctx:A}}}),r7=new ee({}),t7=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/modeling_flax_auto.py#L316"}}),n7=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16995/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L389"}}),GC=new P({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[cCt]},$$scope:{ctx:A}}}),s7=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L417"}}),XC=new P({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[fCt]},$$scope:{ctx:A}}}),i7=new ee({}),d7=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/modeling_flax_auto.py#L325"}}),f7=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16995/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L389"}}),QC=new P({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[mCt]},$$scope:{ctx:A}}}),m7=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L417"}}),HC=new P({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[gCt]},$$scope:{ctx:A}}}),{c(){g=a("meta"),v=l(),p=a("h1"),m=a("a"),u=a("span"),F(d.$$.fragment),h=l(),Fo=a("span"),oi=o("Auto Classes"),of=l(),Yr=a("p"),ri=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),ti=a("code"),cA=o("from_pretrained()"),rf=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Ie=l(),Oe=a("p"),ai=o("Instantiating one of "),Mn=a("a"),fA=o("AutoConfig"),En=o(", "),Cn=a("a"),mA=o("AutoModel"),ni=o(`, and
`),wn=a("a"),gA=o("AutoTokenizer"),si=o(" will directly create a class of the relevant architecture. For instance"),tf=l(),F(va.$$.fragment),Ve=l(),Ae=a("p"),wx=o("will create a model that is an instance of "),li=a("a"),Ax=o("BertModel"),yx=o("."),To=l(),Fa=a("p"),Lx=o("There is one class of "),af=a("code"),xx=o("AutoModel"),qqe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),kRe=l(),ii=a("h2"),nf=a("a"),qK=a("span"),F(hA.$$.fragment),Nqe=l(),NK=a("span"),jqe=o("Extending the Auto Classes"),SRe=l(),An=a("p"),Dqe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),jK=a("code"),Gqe=o("NewModel"),Oqe=o(", make sure you have a "),DK=a("code"),Vqe=o("NewModelConfig"),Xqe=o(` then you can add those to the auto
classes like this:`),RRe=l(),F(pA.$$.fragment),BRe=l(),$x=a("p"),zqe=o("You will then be able to use the auto classes like you would usually do!"),PRe=l(),F(sf.$$.fragment),IRe=l(),di=a("h2"),lf=a("a"),GK=a("span"),F(uA.$$.fragment),Qqe=l(),OK=a("span"),Wqe=o("AutoConfig"),qRe=l(),Mo=a("div"),F(_A.$$.fragment),Hqe=l(),bA=a("p"),Uqe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),kx=a("a"),Jqe=o("from_pretrained()"),Yqe=o(" class method."),Kqe=l(),vA=a("p"),Zqe=o("This class cannot be instantiated directly using "),VK=a("code"),eNe=o("__init__()"),oNe=o(" (throws an error)."),rNe=l(),Tr=a("div"),F(FA.$$.fragment),tNe=l(),XK=a("p"),aNe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),nNe=l(),ci=a("p"),sNe=o("The configuration class to instantiate is selected based on the "),zK=a("code"),lNe=o("model_type"),iNe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),QK=a("code"),dNe=o("pretrained_model_name_or_path"),cNe=o(":"),fNe=l(),y=a("ul"),df=a("li"),WK=a("strong"),mNe=o("albert"),gNe=o(" \u2014 "),Sx=a("a"),hNe=o("AlbertConfig"),pNe=o(" (ALBERT model)"),uNe=l(),cf=a("li"),HK=a("strong"),_Ne=o("bart"),bNe=o(" \u2014 "),Rx=a("a"),vNe=o("BartConfig"),FNe=o(" (BART model)"),TNe=l(),ff=a("li"),UK=a("strong"),MNe=o("beit"),ENe=o(" \u2014 "),Bx=a("a"),CNe=o("BeitConfig"),wNe=o(" (BEiT model)"),ANe=l(),mf=a("li"),JK=a("strong"),yNe=o("bert"),LNe=o(" \u2014 "),Px=a("a"),xNe=o("BertConfig"),$Ne=o(" (BERT model)"),kNe=l(),gf=a("li"),YK=a("strong"),SNe=o("bert-generation"),RNe=o(" \u2014 "),Ix=a("a"),BNe=o("BertGenerationConfig"),PNe=o(" (Bert Generation model)"),INe=l(),hf=a("li"),KK=a("strong"),qNe=o("big_bird"),NNe=o(" \u2014 "),qx=a("a"),jNe=o("BigBirdConfig"),DNe=o(" (BigBird model)"),GNe=l(),pf=a("li"),ZK=a("strong"),ONe=o("bigbird_pegasus"),VNe=o(" \u2014 "),Nx=a("a"),XNe=o("BigBirdPegasusConfig"),zNe=o(" (BigBirdPegasus model)"),QNe=l(),uf=a("li"),eZ=a("strong"),WNe=o("blenderbot"),HNe=o(" \u2014 "),jx=a("a"),UNe=o("BlenderbotConfig"),JNe=o(" (Blenderbot model)"),YNe=l(),_f=a("li"),oZ=a("strong"),KNe=o("blenderbot-small"),ZNe=o(" \u2014 "),Dx=a("a"),eje=o("BlenderbotSmallConfig"),oje=o(" (BlenderbotSmall model)"),rje=l(),bf=a("li"),rZ=a("strong"),tje=o("camembert"),aje=o(" \u2014 "),Gx=a("a"),nje=o("CamembertConfig"),sje=o(" (CamemBERT model)"),lje=l(),vf=a("li"),tZ=a("strong"),ije=o("canine"),dje=o(" \u2014 "),Ox=a("a"),cje=o("CanineConfig"),fje=o(" (Canine model)"),mje=l(),Ff=a("li"),aZ=a("strong"),gje=o("clip"),hje=o(" \u2014 "),Vx=a("a"),pje=o("CLIPConfig"),uje=o(" (CLIP model)"),_je=l(),Tf=a("li"),nZ=a("strong"),bje=o("convbert"),vje=o(" \u2014 "),Xx=a("a"),Fje=o("ConvBertConfig"),Tje=o(" (ConvBERT model)"),Mje=l(),Mf=a("li"),sZ=a("strong"),Eje=o("convnext"),Cje=o(" \u2014 "),zx=a("a"),wje=o("ConvNextConfig"),Aje=o(" (ConvNext model)"),yje=l(),Ef=a("li"),lZ=a("strong"),Lje=o("ctrl"),xje=o(" \u2014 "),Qx=a("a"),$je=o("CTRLConfig"),kje=o(" (CTRL model)"),Sje=l(),Cf=a("li"),iZ=a("strong"),Rje=o("data2vec-audio"),Bje=o(" \u2014 "),Wx=a("a"),Pje=o("Data2VecAudioConfig"),Ije=o(" (Data2VecAudio model)"),qje=l(),wf=a("li"),dZ=a("strong"),Nje=o("data2vec-text"),jje=o(" \u2014 "),Hx=a("a"),Dje=o("Data2VecTextConfig"),Gje=o(" (Data2VecText model)"),Oje=l(),Af=a("li"),cZ=a("strong"),Vje=o("data2vec-vision"),Xje=o(" \u2014 "),Ux=a("a"),zje=o("Data2VecVisionConfig"),Qje=o(" (Data2VecVision model)"),Wje=l(),yf=a("li"),fZ=a("strong"),Hje=o("deberta"),Uje=o(" \u2014 "),Jx=a("a"),Jje=o("DebertaConfig"),Yje=o(" (DeBERTa model)"),Kje=l(),Lf=a("li"),mZ=a("strong"),Zje=o("deberta-v2"),eDe=o(" \u2014 "),Yx=a("a"),oDe=o("DebertaV2Config"),rDe=o(" (DeBERTa-v2 model)"),tDe=l(),xf=a("li"),gZ=a("strong"),aDe=o("decision_transformer"),nDe=o(" \u2014 "),Kx=a("a"),sDe=o("DecisionTransformerConfig"),lDe=o(" (Decision Transformer model)"),iDe=l(),$f=a("li"),hZ=a("strong"),dDe=o("deit"),cDe=o(" \u2014 "),Zx=a("a"),fDe=o("DeiTConfig"),mDe=o(" (DeiT model)"),gDe=l(),kf=a("li"),pZ=a("strong"),hDe=o("detr"),pDe=o(" \u2014 "),e$=a("a"),uDe=o("DetrConfig"),_De=o(" (DETR model)"),bDe=l(),Sf=a("li"),uZ=a("strong"),vDe=o("distilbert"),FDe=o(" \u2014 "),o$=a("a"),TDe=o("DistilBertConfig"),MDe=o(" (DistilBERT model)"),EDe=l(),Rf=a("li"),_Z=a("strong"),CDe=o("dpr"),wDe=o(" \u2014 "),r$=a("a"),ADe=o("DPRConfig"),yDe=o(" (DPR model)"),LDe=l(),Bf=a("li"),bZ=a("strong"),xDe=o("dpt"),$De=o(" \u2014 "),t$=a("a"),kDe=o("DPTConfig"),SDe=o(" (DPT model)"),RDe=l(),Pf=a("li"),vZ=a("strong"),BDe=o("electra"),PDe=o(" \u2014 "),a$=a("a"),IDe=o("ElectraConfig"),qDe=o(" (ELECTRA model)"),NDe=l(),If=a("li"),FZ=a("strong"),jDe=o("encoder-decoder"),DDe=o(" \u2014 "),n$=a("a"),GDe=o("EncoderDecoderConfig"),ODe=o(" (Encoder decoder model)"),VDe=l(),qf=a("li"),TZ=a("strong"),XDe=o("flaubert"),zDe=o(" \u2014 "),s$=a("a"),QDe=o("FlaubertConfig"),WDe=o(" (FlauBERT model)"),HDe=l(),Nf=a("li"),MZ=a("strong"),UDe=o("fnet"),JDe=o(" \u2014 "),l$=a("a"),YDe=o("FNetConfig"),KDe=o(" (FNet model)"),ZDe=l(),jf=a("li"),EZ=a("strong"),eGe=o("fsmt"),oGe=o(" \u2014 "),i$=a("a"),rGe=o("FSMTConfig"),tGe=o(" (FairSeq Machine-Translation model)"),aGe=l(),Df=a("li"),CZ=a("strong"),nGe=o("funnel"),sGe=o(" \u2014 "),d$=a("a"),lGe=o("FunnelConfig"),iGe=o(" (Funnel Transformer model)"),dGe=l(),Gf=a("li"),wZ=a("strong"),cGe=o("glpn"),fGe=o(" \u2014 "),c$=a("a"),mGe=o("GLPNConfig"),gGe=o(" (GLPN model)"),hGe=l(),Of=a("li"),AZ=a("strong"),pGe=o("gpt2"),uGe=o(" \u2014 "),f$=a("a"),_Ge=o("GPT2Config"),bGe=o(" (OpenAI GPT-2 model)"),vGe=l(),Vf=a("li"),yZ=a("strong"),FGe=o("gpt_neo"),TGe=o(" \u2014 "),m$=a("a"),MGe=o("GPTNeoConfig"),EGe=o(" (GPT Neo model)"),CGe=l(),Xf=a("li"),LZ=a("strong"),wGe=o("gptj"),AGe=o(" \u2014 "),g$=a("a"),yGe=o("GPTJConfig"),LGe=o(" (GPT-J model)"),xGe=l(),zf=a("li"),xZ=a("strong"),$Ge=o("hubert"),kGe=o(" \u2014 "),h$=a("a"),SGe=o("HubertConfig"),RGe=o(" (Hubert model)"),BGe=l(),Qf=a("li"),$Z=a("strong"),PGe=o("ibert"),IGe=o(" \u2014 "),p$=a("a"),qGe=o("IBertConfig"),NGe=o(" (I-BERT model)"),jGe=l(),Wf=a("li"),kZ=a("strong"),DGe=o("imagegpt"),GGe=o(" \u2014 "),u$=a("a"),OGe=o("ImageGPTConfig"),VGe=o(" (ImageGPT model)"),XGe=l(),Hf=a("li"),SZ=a("strong"),zGe=o("layoutlm"),QGe=o(" \u2014 "),_$=a("a"),WGe=o("LayoutLMConfig"),HGe=o(" (LayoutLM model)"),UGe=l(),Uf=a("li"),RZ=a("strong"),JGe=o("layoutlmv2"),YGe=o(" \u2014 "),b$=a("a"),KGe=o("LayoutLMv2Config"),ZGe=o(" (LayoutLMv2 model)"),eOe=l(),Jf=a("li"),BZ=a("strong"),oOe=o("led"),rOe=o(" \u2014 "),v$=a("a"),tOe=o("LEDConfig"),aOe=o(" (LED model)"),nOe=l(),Yf=a("li"),PZ=a("strong"),sOe=o("longformer"),lOe=o(" \u2014 "),F$=a("a"),iOe=o("LongformerConfig"),dOe=o(" (Longformer model)"),cOe=l(),Kf=a("li"),IZ=a("strong"),fOe=o("luke"),mOe=o(" \u2014 "),T$=a("a"),gOe=o("LukeConfig"),hOe=o(" (LUKE model)"),pOe=l(),Zf=a("li"),qZ=a("strong"),uOe=o("lxmert"),_Oe=o(" \u2014 "),M$=a("a"),bOe=o("LxmertConfig"),vOe=o(" (LXMERT model)"),FOe=l(),em=a("li"),NZ=a("strong"),TOe=o("m2m_100"),MOe=o(" \u2014 "),E$=a("a"),EOe=o("M2M100Config"),COe=o(" (M2M100 model)"),wOe=l(),om=a("li"),jZ=a("strong"),AOe=o("marian"),yOe=o(" \u2014 "),C$=a("a"),LOe=o("MarianConfig"),xOe=o(" (Marian model)"),$Oe=l(),rm=a("li"),DZ=a("strong"),kOe=o("maskformer"),SOe=o(" \u2014 "),w$=a("a"),ROe=o("MaskFormerConfig"),BOe=o(" (MaskFormer model)"),POe=l(),tm=a("li"),GZ=a("strong"),IOe=o("mbart"),qOe=o(" \u2014 "),A$=a("a"),NOe=o("MBartConfig"),jOe=o(" (mBART model)"),DOe=l(),am=a("li"),OZ=a("strong"),GOe=o("megatron-bert"),OOe=o(" \u2014 "),y$=a("a"),VOe=o("MegatronBertConfig"),XOe=o(" (MegatronBert model)"),zOe=l(),nm=a("li"),VZ=a("strong"),QOe=o("mobilebert"),WOe=o(" \u2014 "),L$=a("a"),HOe=o("MobileBertConfig"),UOe=o(" (MobileBERT model)"),JOe=l(),sm=a("li"),XZ=a("strong"),YOe=o("mpnet"),KOe=o(" \u2014 "),x$=a("a"),ZOe=o("MPNetConfig"),eVe=o(" (MPNet model)"),oVe=l(),lm=a("li"),zZ=a("strong"),rVe=o("mt5"),tVe=o(" \u2014 "),$$=a("a"),aVe=o("MT5Config"),nVe=o(" (mT5 model)"),sVe=l(),im=a("li"),QZ=a("strong"),lVe=o("nystromformer"),iVe=o(" \u2014 "),k$=a("a"),dVe=o("NystromformerConfig"),cVe=o(" (Nystromformer model)"),fVe=l(),dm=a("li"),WZ=a("strong"),mVe=o("openai-gpt"),gVe=o(" \u2014 "),S$=a("a"),hVe=o("OpenAIGPTConfig"),pVe=o(" (OpenAI GPT model)"),uVe=l(),cm=a("li"),HZ=a("strong"),_Ve=o("pegasus"),bVe=o(" \u2014 "),R$=a("a"),vVe=o("PegasusConfig"),FVe=o(" (Pegasus model)"),TVe=l(),fm=a("li"),UZ=a("strong"),MVe=o("perceiver"),EVe=o(" \u2014 "),B$=a("a"),CVe=o("PerceiverConfig"),wVe=o(" (Perceiver model)"),AVe=l(),mm=a("li"),JZ=a("strong"),yVe=o("plbart"),LVe=o(" \u2014 "),P$=a("a"),xVe=o("PLBartConfig"),$Ve=o(" (PLBart model)"),kVe=l(),gm=a("li"),YZ=a("strong"),SVe=o("poolformer"),RVe=o(" \u2014 "),I$=a("a"),BVe=o("PoolFormerConfig"),PVe=o(" (PoolFormer model)"),IVe=l(),hm=a("li"),KZ=a("strong"),qVe=o("prophetnet"),NVe=o(" \u2014 "),q$=a("a"),jVe=o("ProphetNetConfig"),DVe=o(" (ProphetNet model)"),GVe=l(),pm=a("li"),ZZ=a("strong"),OVe=o("qdqbert"),VVe=o(" \u2014 "),N$=a("a"),XVe=o("QDQBertConfig"),zVe=o(" (QDQBert model)"),QVe=l(),um=a("li"),eee=a("strong"),WVe=o("rag"),HVe=o(" \u2014 "),j$=a("a"),UVe=o("RagConfig"),JVe=o(" (RAG model)"),YVe=l(),_m=a("li"),oee=a("strong"),KVe=o("realm"),ZVe=o(" \u2014 "),D$=a("a"),eXe=o("RealmConfig"),oXe=o(" (Realm model)"),rXe=l(),bm=a("li"),ree=a("strong"),tXe=o("reformer"),aXe=o(" \u2014 "),G$=a("a"),nXe=o("ReformerConfig"),sXe=o(" (Reformer model)"),lXe=l(),vm=a("li"),tee=a("strong"),iXe=o("regnet"),dXe=o(" \u2014 "),O$=a("a"),cXe=o("RegNetConfig"),fXe=o(" (RegNet model)"),mXe=l(),Fm=a("li"),aee=a("strong"),gXe=o("rembert"),hXe=o(" \u2014 "),V$=a("a"),pXe=o("RemBertConfig"),uXe=o(" (RemBERT model)"),_Xe=l(),Tm=a("li"),nee=a("strong"),bXe=o("resnet"),vXe=o(" \u2014 "),X$=a("a"),FXe=o("ResNetConfig"),TXe=o(" (ResNet model)"),MXe=l(),Mm=a("li"),see=a("strong"),EXe=o("retribert"),CXe=o(" \u2014 "),z$=a("a"),wXe=o("RetriBertConfig"),AXe=o(" (RetriBERT model)"),yXe=l(),Em=a("li"),lee=a("strong"),LXe=o("roberta"),xXe=o(" \u2014 "),Q$=a("a"),$Xe=o("RobertaConfig"),kXe=o(" (RoBERTa model)"),SXe=l(),Cm=a("li"),iee=a("strong"),RXe=o("roformer"),BXe=o(" \u2014 "),W$=a("a"),PXe=o("RoFormerConfig"),IXe=o(" (RoFormer model)"),qXe=l(),wm=a("li"),dee=a("strong"),NXe=o("segformer"),jXe=o(" \u2014 "),H$=a("a"),DXe=o("SegformerConfig"),GXe=o(" (SegFormer model)"),OXe=l(),Am=a("li"),cee=a("strong"),VXe=o("sew"),XXe=o(" \u2014 "),U$=a("a"),zXe=o("SEWConfig"),QXe=o(" (SEW model)"),WXe=l(),ym=a("li"),fee=a("strong"),HXe=o("sew-d"),UXe=o(" \u2014 "),J$=a("a"),JXe=o("SEWDConfig"),YXe=o(" (SEW-D model)"),KXe=l(),Lm=a("li"),mee=a("strong"),ZXe=o("speech-encoder-decoder"),eze=o(" \u2014 "),Y$=a("a"),oze=o("SpeechEncoderDecoderConfig"),rze=o(" (Speech Encoder decoder model)"),tze=l(),xm=a("li"),gee=a("strong"),aze=o("speech_to_text"),nze=o(" \u2014 "),K$=a("a"),sze=o("Speech2TextConfig"),lze=o(" (Speech2Text model)"),ize=l(),$m=a("li"),hee=a("strong"),dze=o("speech_to_text_2"),cze=o(" \u2014 "),Z$=a("a"),fze=o("Speech2Text2Config"),mze=o(" (Speech2Text2 model)"),gze=l(),km=a("li"),pee=a("strong"),hze=o("splinter"),pze=o(" \u2014 "),ek=a("a"),uze=o("SplinterConfig"),_ze=o(" (Splinter model)"),bze=l(),Sm=a("li"),uee=a("strong"),vze=o("squeezebert"),Fze=o(" \u2014 "),ok=a("a"),Tze=o("SqueezeBertConfig"),Mze=o(" (SqueezeBERT model)"),Eze=l(),Rm=a("li"),_ee=a("strong"),Cze=o("swin"),wze=o(" \u2014 "),rk=a("a"),Aze=o("SwinConfig"),yze=o(" (Swin model)"),Lze=l(),Bm=a("li"),bee=a("strong"),xze=o("t5"),$ze=o(" \u2014 "),tk=a("a"),kze=o("T5Config"),Sze=o(" (T5 model)"),Rze=l(),Pm=a("li"),vee=a("strong"),Bze=o("tapas"),Pze=o(" \u2014 "),ak=a("a"),Ize=o("TapasConfig"),qze=o(" (TAPAS model)"),Nze=l(),Im=a("li"),Fee=a("strong"),jze=o("tapex"),Dze=o(" \u2014 "),nk=a("a"),Gze=o("BartConfig"),Oze=o(" (TAPEX model)"),Vze=l(),qm=a("li"),Tee=a("strong"),Xze=o("transfo-xl"),zze=o(" \u2014 "),sk=a("a"),Qze=o("TransfoXLConfig"),Wze=o(" (Transformer-XL model)"),Hze=l(),Nm=a("li"),Mee=a("strong"),Uze=o("trocr"),Jze=o(" \u2014 "),lk=a("a"),Yze=o("TrOCRConfig"),Kze=o(" (TrOCR model)"),Zze=l(),jm=a("li"),Eee=a("strong"),eQe=o("unispeech"),oQe=o(" \u2014 "),ik=a("a"),rQe=o("UniSpeechConfig"),tQe=o(" (UniSpeech model)"),aQe=l(),Dm=a("li"),Cee=a("strong"),nQe=o("unispeech-sat"),sQe=o(" \u2014 "),dk=a("a"),lQe=o("UniSpeechSatConfig"),iQe=o(" (UniSpeechSat model)"),dQe=l(),Gm=a("li"),wee=a("strong"),cQe=o("van"),fQe=o(" \u2014 "),ck=a("a"),mQe=o("VanConfig"),gQe=o(" (VAN model)"),hQe=l(),Om=a("li"),Aee=a("strong"),pQe=o("vilt"),uQe=o(" \u2014 "),fk=a("a"),_Qe=o("ViltConfig"),bQe=o(" (ViLT model)"),vQe=l(),Vm=a("li"),yee=a("strong"),FQe=o("vision-encoder-decoder"),TQe=o(" \u2014 "),mk=a("a"),MQe=o("VisionEncoderDecoderConfig"),EQe=o(" (Vision Encoder decoder model)"),CQe=l(),Xm=a("li"),Lee=a("strong"),wQe=o("vision-text-dual-encoder"),AQe=o(" \u2014 "),gk=a("a"),yQe=o("VisionTextDualEncoderConfig"),LQe=o(" (VisionTextDualEncoder model)"),xQe=l(),zm=a("li"),xee=a("strong"),$Qe=o("visual_bert"),kQe=o(" \u2014 "),hk=a("a"),SQe=o("VisualBertConfig"),RQe=o(" (VisualBert model)"),BQe=l(),Qm=a("li"),$ee=a("strong"),PQe=o("vit"),IQe=o(" \u2014 "),pk=a("a"),qQe=o("ViTConfig"),NQe=o(" (ViT model)"),jQe=l(),Wm=a("li"),kee=a("strong"),DQe=o("vit_mae"),GQe=o(" \u2014 "),uk=a("a"),OQe=o("ViTMAEConfig"),VQe=o(" (ViTMAE model)"),XQe=l(),Hm=a("li"),See=a("strong"),zQe=o("wav2vec2"),QQe=o(" \u2014 "),_k=a("a"),WQe=o("Wav2Vec2Config"),HQe=o(" (Wav2Vec2 model)"),UQe=l(),Um=a("li"),Ree=a("strong"),JQe=o("wavlm"),YQe=o(" \u2014 "),bk=a("a"),KQe=o("WavLMConfig"),ZQe=o(" (WavLM model)"),eWe=l(),Jm=a("li"),Bee=a("strong"),oWe=o("xglm"),rWe=o(" \u2014 "),vk=a("a"),tWe=o("XGLMConfig"),aWe=o(" (XGLM model)"),nWe=l(),Ym=a("li"),Pee=a("strong"),sWe=o("xlm"),lWe=o(" \u2014 "),Fk=a("a"),iWe=o("XLMConfig"),dWe=o(" (XLM model)"),cWe=l(),Km=a("li"),Iee=a("strong"),fWe=o("xlm-prophetnet"),mWe=o(" \u2014 "),Tk=a("a"),gWe=o("XLMProphetNetConfig"),hWe=o(" (XLMProphetNet model)"),pWe=l(),Zm=a("li"),qee=a("strong"),uWe=o("xlm-roberta"),_We=o(" \u2014 "),Mk=a("a"),bWe=o("XLMRobertaConfig"),vWe=o(" (XLM-RoBERTa model)"),FWe=l(),eg=a("li"),Nee=a("strong"),TWe=o("xlm-roberta-xl"),MWe=o(" \u2014 "),Ek=a("a"),EWe=o("XLMRobertaXLConfig"),CWe=o(" (XLM-RoBERTa-XL model)"),wWe=l(),og=a("li"),jee=a("strong"),AWe=o("xlnet"),yWe=o(" \u2014 "),Ck=a("a"),LWe=o("XLNetConfig"),xWe=o(" (XLNet model)"),$We=l(),rg=a("li"),Dee=a("strong"),kWe=o("yoso"),SWe=o(" \u2014 "),wk=a("a"),RWe=o("YosoConfig"),BWe=o(" (YOSO model)"),PWe=l(),F(tg.$$.fragment),IWe=l(),ag=a("div"),F(TA.$$.fragment),qWe=l(),Gee=a("p"),NWe=o("Register a new configuration for this class."),NRe=l(),fi=a("h2"),ng=a("a"),Oee=a("span"),F(MA.$$.fragment),jWe=l(),Vee=a("span"),DWe=o("AutoTokenizer"),jRe=l(),Eo=a("div"),F(EA.$$.fragment),GWe=l(),CA=a("p"),OWe=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),Ak=a("a"),VWe=o("AutoTokenizer.from_pretrained()"),XWe=o(" class method."),zWe=l(),wA=a("p"),QWe=o("This class cannot be instantiated directly using "),Xee=a("code"),WWe=o("__init__()"),HWe=o(" (throws an error)."),UWe=l(),Mr=a("div"),F(AA.$$.fragment),JWe=l(),zee=a("p"),YWe=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),KWe=l(),Ta=a("p"),ZWe=o("The tokenizer class to instantiate is selected based on the "),Qee=a("code"),eHe=o("model_type"),oHe=o(` property of the config object (either
passed as an argument or loaded from `),Wee=a("code"),rHe=o("pretrained_model_name_or_path"),tHe=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hee=a("code"),aHe=o("pretrained_model_name_or_path"),nHe=o(":"),sHe=l(),k=a("ul"),yn=a("li"),Uee=a("strong"),lHe=o("albert"),iHe=o(" \u2014 "),yk=a("a"),dHe=o("AlbertTokenizer"),cHe=o(" or "),Lk=a("a"),fHe=o("AlbertTokenizerFast"),mHe=o(" (ALBERT model)"),gHe=l(),Ln=a("li"),Jee=a("strong"),hHe=o("bart"),pHe=o(" \u2014 "),xk=a("a"),uHe=o("BartTokenizer"),_He=o(" or "),$k=a("a"),bHe=o("BartTokenizerFast"),vHe=o(" (BART model)"),FHe=l(),xn=a("li"),Yee=a("strong"),THe=o("barthez"),MHe=o(" \u2014 "),kk=a("a"),EHe=o("BarthezTokenizer"),CHe=o(" or "),Sk=a("a"),wHe=o("BarthezTokenizerFast"),AHe=o(" (BARThez model)"),yHe=l(),sg=a("li"),Kee=a("strong"),LHe=o("bartpho"),xHe=o(" \u2014 "),Rk=a("a"),$He=o("BartphoTokenizer"),kHe=o(" (BARTpho model)"),SHe=l(),$n=a("li"),Zee=a("strong"),RHe=o("bert"),BHe=o(" \u2014 "),Bk=a("a"),PHe=o("BertTokenizer"),IHe=o(" or "),Pk=a("a"),qHe=o("BertTokenizerFast"),NHe=o(" (BERT model)"),jHe=l(),lg=a("li"),eoe=a("strong"),DHe=o("bert-generation"),GHe=o(" \u2014 "),Ik=a("a"),OHe=o("BertGenerationTokenizer"),VHe=o(" (Bert Generation model)"),XHe=l(),ig=a("li"),ooe=a("strong"),zHe=o("bert-japanese"),QHe=o(" \u2014 "),qk=a("a"),WHe=o("BertJapaneseTokenizer"),HHe=o(" (BertJapanese model)"),UHe=l(),dg=a("li"),roe=a("strong"),JHe=o("bertweet"),YHe=o(" \u2014 "),Nk=a("a"),KHe=o("BertweetTokenizer"),ZHe=o(" (Bertweet model)"),eUe=l(),kn=a("li"),toe=a("strong"),oUe=o("big_bird"),rUe=o(" \u2014 "),jk=a("a"),tUe=o("BigBirdTokenizer"),aUe=o(" or "),Dk=a("a"),nUe=o("BigBirdTokenizerFast"),sUe=o(" (BigBird model)"),lUe=l(),Sn=a("li"),aoe=a("strong"),iUe=o("bigbird_pegasus"),dUe=o(" \u2014 "),Gk=a("a"),cUe=o("PegasusTokenizer"),fUe=o(" or "),Ok=a("a"),mUe=o("PegasusTokenizerFast"),gUe=o(" (BigBirdPegasus model)"),hUe=l(),Rn=a("li"),noe=a("strong"),pUe=o("blenderbot"),uUe=o(" \u2014 "),Vk=a("a"),_Ue=o("BlenderbotTokenizer"),bUe=o(" or "),Xk=a("a"),vUe=o("BlenderbotTokenizerFast"),FUe=o(" (Blenderbot model)"),TUe=l(),cg=a("li"),soe=a("strong"),MUe=o("blenderbot-small"),EUe=o(" \u2014 "),zk=a("a"),CUe=o("BlenderbotSmallTokenizer"),wUe=o(" (BlenderbotSmall model)"),AUe=l(),fg=a("li"),loe=a("strong"),yUe=o("byt5"),LUe=o(" \u2014 "),Qk=a("a"),xUe=o("ByT5Tokenizer"),$Ue=o(" (ByT5 model)"),kUe=l(),Bn=a("li"),ioe=a("strong"),SUe=o("camembert"),RUe=o(" \u2014 "),Wk=a("a"),BUe=o("CamembertTokenizer"),PUe=o(" or "),Hk=a("a"),IUe=o("CamembertTokenizerFast"),qUe=o(" (CamemBERT model)"),NUe=l(),mg=a("li"),doe=a("strong"),jUe=o("canine"),DUe=o(" \u2014 "),Uk=a("a"),GUe=o("CanineTokenizer"),OUe=o(" (Canine model)"),VUe=l(),Pn=a("li"),coe=a("strong"),XUe=o("clip"),zUe=o(" \u2014 "),Jk=a("a"),QUe=o("CLIPTokenizer"),WUe=o(" or "),Yk=a("a"),HUe=o("CLIPTokenizerFast"),UUe=o(" (CLIP model)"),JUe=l(),In=a("li"),foe=a("strong"),YUe=o("convbert"),KUe=o(" \u2014 "),Kk=a("a"),ZUe=o("ConvBertTokenizer"),eJe=o(" or "),Zk=a("a"),oJe=o("ConvBertTokenizerFast"),rJe=o(" (ConvBERT model)"),tJe=l(),qn=a("li"),moe=a("strong"),aJe=o("cpm"),nJe=o(" \u2014 "),eS=a("a"),sJe=o("CpmTokenizer"),lJe=o(" or "),goe=a("code"),iJe=o("CpmTokenizerFast"),dJe=o(" (CPM model)"),cJe=l(),gg=a("li"),hoe=a("strong"),fJe=o("ctrl"),mJe=o(" \u2014 "),oS=a("a"),gJe=o("CTRLTokenizer"),hJe=o(" (CTRL model)"),pJe=l(),Nn=a("li"),poe=a("strong"),uJe=o("data2vec-text"),_Je=o(" \u2014 "),rS=a("a"),bJe=o("RobertaTokenizer"),vJe=o(" or "),tS=a("a"),FJe=o("RobertaTokenizerFast"),TJe=o(" (Data2VecText model)"),MJe=l(),jn=a("li"),uoe=a("strong"),EJe=o("deberta"),CJe=o(" \u2014 "),aS=a("a"),wJe=o("DebertaTokenizer"),AJe=o(" or "),nS=a("a"),yJe=o("DebertaTokenizerFast"),LJe=o(" (DeBERTa model)"),xJe=l(),Dn=a("li"),_oe=a("strong"),$Je=o("deberta-v2"),kJe=o(" \u2014 "),sS=a("a"),SJe=o("DebertaV2Tokenizer"),RJe=o(" or "),lS=a("a"),BJe=o("DebertaV2TokenizerFast"),PJe=o(" (DeBERTa-v2 model)"),IJe=l(),Gn=a("li"),boe=a("strong"),qJe=o("distilbert"),NJe=o(" \u2014 "),iS=a("a"),jJe=o("DistilBertTokenizer"),DJe=o(" or "),dS=a("a"),GJe=o("DistilBertTokenizerFast"),OJe=o(" (DistilBERT model)"),VJe=l(),On=a("li"),voe=a("strong"),XJe=o("dpr"),zJe=o(" \u2014 "),cS=a("a"),QJe=o("DPRQuestionEncoderTokenizer"),WJe=o(" or "),fS=a("a"),HJe=o("DPRQuestionEncoderTokenizerFast"),UJe=o(" (DPR model)"),JJe=l(),Vn=a("li"),Foe=a("strong"),YJe=o("electra"),KJe=o(" \u2014 "),mS=a("a"),ZJe=o("ElectraTokenizer"),eYe=o(" or "),gS=a("a"),oYe=o("ElectraTokenizerFast"),rYe=o(" (ELECTRA model)"),tYe=l(),hg=a("li"),Toe=a("strong"),aYe=o("flaubert"),nYe=o(" \u2014 "),hS=a("a"),sYe=o("FlaubertTokenizer"),lYe=o(" (FlauBERT model)"),iYe=l(),Xn=a("li"),Moe=a("strong"),dYe=o("fnet"),cYe=o(" \u2014 "),pS=a("a"),fYe=o("FNetTokenizer"),mYe=o(" or "),uS=a("a"),gYe=o("FNetTokenizerFast"),hYe=o(" (FNet model)"),pYe=l(),pg=a("li"),Eoe=a("strong"),uYe=o("fsmt"),_Ye=o(" \u2014 "),_S=a("a"),bYe=o("FSMTTokenizer"),vYe=o(" (FairSeq Machine-Translation model)"),FYe=l(),zn=a("li"),Coe=a("strong"),TYe=o("funnel"),MYe=o(" \u2014 "),bS=a("a"),EYe=o("FunnelTokenizer"),CYe=o(" or "),vS=a("a"),wYe=o("FunnelTokenizerFast"),AYe=o(" (Funnel Transformer model)"),yYe=l(),Qn=a("li"),woe=a("strong"),LYe=o("gpt2"),xYe=o(" \u2014 "),FS=a("a"),$Ye=o("GPT2Tokenizer"),kYe=o(" or "),TS=a("a"),SYe=o("GPT2TokenizerFast"),RYe=o(" (OpenAI GPT-2 model)"),BYe=l(),Wn=a("li"),Aoe=a("strong"),PYe=o("gpt_neo"),IYe=o(" \u2014 "),MS=a("a"),qYe=o("GPT2Tokenizer"),NYe=o(" or "),ES=a("a"),jYe=o("GPT2TokenizerFast"),DYe=o(" (GPT Neo model)"),GYe=l(),Hn=a("li"),yoe=a("strong"),OYe=o("gptj"),VYe=o(" \u2014 "),CS=a("a"),XYe=o("GPT2Tokenizer"),zYe=o(" or "),wS=a("a"),QYe=o("GPT2TokenizerFast"),WYe=o(" (GPT-J model)"),HYe=l(),Un=a("li"),Loe=a("strong"),UYe=o("herbert"),JYe=o(" \u2014 "),AS=a("a"),YYe=o("HerbertTokenizer"),KYe=o(" or "),yS=a("a"),ZYe=o("HerbertTokenizerFast"),eKe=o(" (HerBERT model)"),oKe=l(),ug=a("li"),xoe=a("strong"),rKe=o("hubert"),tKe=o(" \u2014 "),LS=a("a"),aKe=o("Wav2Vec2CTCTokenizer"),nKe=o(" (Hubert model)"),sKe=l(),Jn=a("li"),$oe=a("strong"),lKe=o("ibert"),iKe=o(" \u2014 "),xS=a("a"),dKe=o("RobertaTokenizer"),cKe=o(" or "),$S=a("a"),fKe=o("RobertaTokenizerFast"),mKe=o(" (I-BERT model)"),gKe=l(),Yn=a("li"),koe=a("strong"),hKe=o("layoutlm"),pKe=o(" \u2014 "),kS=a("a"),uKe=o("LayoutLMTokenizer"),_Ke=o(" or "),SS=a("a"),bKe=o("LayoutLMTokenizerFast"),vKe=o(" (LayoutLM model)"),FKe=l(),Kn=a("li"),Soe=a("strong"),TKe=o("layoutlmv2"),MKe=o(" \u2014 "),RS=a("a"),EKe=o("LayoutLMv2Tokenizer"),CKe=o(" or "),BS=a("a"),wKe=o("LayoutLMv2TokenizerFast"),AKe=o(" (LayoutLMv2 model)"),yKe=l(),Zn=a("li"),Roe=a("strong"),LKe=o("layoutxlm"),xKe=o(" \u2014 "),PS=a("a"),$Ke=o("LayoutXLMTokenizer"),kKe=o(" or "),IS=a("a"),SKe=o("LayoutXLMTokenizerFast"),RKe=o(" (LayoutXLM model)"),BKe=l(),es=a("li"),Boe=a("strong"),PKe=o("led"),IKe=o(" \u2014 "),qS=a("a"),qKe=o("LEDTokenizer"),NKe=o(" or "),NS=a("a"),jKe=o("LEDTokenizerFast"),DKe=o(" (LED model)"),GKe=l(),os=a("li"),Poe=a("strong"),OKe=o("longformer"),VKe=o(" \u2014 "),jS=a("a"),XKe=o("LongformerTokenizer"),zKe=o(" or "),DS=a("a"),QKe=o("LongformerTokenizerFast"),WKe=o(" (Longformer model)"),HKe=l(),_g=a("li"),Ioe=a("strong"),UKe=o("luke"),JKe=o(" \u2014 "),GS=a("a"),YKe=o("LukeTokenizer"),KKe=o(" (LUKE model)"),ZKe=l(),rs=a("li"),qoe=a("strong"),eZe=o("lxmert"),oZe=o(" \u2014 "),OS=a("a"),rZe=o("LxmertTokenizer"),tZe=o(" or "),VS=a("a"),aZe=o("LxmertTokenizerFast"),nZe=o(" (LXMERT model)"),sZe=l(),bg=a("li"),Noe=a("strong"),lZe=o("m2m_100"),iZe=o(" \u2014 "),XS=a("a"),dZe=o("M2M100Tokenizer"),cZe=o(" (M2M100 model)"),fZe=l(),vg=a("li"),joe=a("strong"),mZe=o("marian"),gZe=o(" \u2014 "),zS=a("a"),hZe=o("MarianTokenizer"),pZe=o(" (Marian model)"),uZe=l(),ts=a("li"),Doe=a("strong"),_Ze=o("mbart"),bZe=o(" \u2014 "),QS=a("a"),vZe=o("MBartTokenizer"),FZe=o(" or "),WS=a("a"),TZe=o("MBartTokenizerFast"),MZe=o(" (mBART model)"),EZe=l(),as=a("li"),Goe=a("strong"),CZe=o("mbart50"),wZe=o(" \u2014 "),HS=a("a"),AZe=o("MBart50Tokenizer"),yZe=o(" or "),US=a("a"),LZe=o("MBart50TokenizerFast"),xZe=o(" (mBART-50 model)"),$Ze=l(),ns=a("li"),Ooe=a("strong"),kZe=o("megatron-bert"),SZe=o(" \u2014 "),JS=a("a"),RZe=o("BertTokenizer"),BZe=o(" or "),YS=a("a"),PZe=o("BertTokenizerFast"),IZe=o(" (MegatronBert model)"),qZe=l(),Fg=a("li"),Voe=a("strong"),NZe=o("mluke"),jZe=o(" \u2014 "),KS=a("a"),DZe=o("MLukeTokenizer"),GZe=o(" (mLUKE model)"),OZe=l(),ss=a("li"),Xoe=a("strong"),VZe=o("mobilebert"),XZe=o(" \u2014 "),ZS=a("a"),zZe=o("MobileBertTokenizer"),QZe=o(" or "),eR=a("a"),WZe=o("MobileBertTokenizerFast"),HZe=o(" (MobileBERT model)"),UZe=l(),ls=a("li"),zoe=a("strong"),JZe=o("mpnet"),YZe=o(" \u2014 "),oR=a("a"),KZe=o("MPNetTokenizer"),ZZe=o(" or "),rR=a("a"),eeo=o("MPNetTokenizerFast"),oeo=o(" (MPNet model)"),reo=l(),is=a("li"),Qoe=a("strong"),teo=o("mt5"),aeo=o(" \u2014 "),tR=a("a"),neo=o("MT5Tokenizer"),seo=o(" or "),aR=a("a"),leo=o("MT5TokenizerFast"),ieo=o(" (mT5 model)"),deo=l(),ds=a("li"),Woe=a("strong"),ceo=o("nystromformer"),feo=o(" \u2014 "),nR=a("a"),meo=o("AlbertTokenizer"),geo=o(" or "),sR=a("a"),heo=o("AlbertTokenizerFast"),peo=o(" (Nystromformer model)"),ueo=l(),cs=a("li"),Hoe=a("strong"),_eo=o("openai-gpt"),beo=o(" \u2014 "),lR=a("a"),veo=o("OpenAIGPTTokenizer"),Feo=o(" or "),iR=a("a"),Teo=o("OpenAIGPTTokenizerFast"),Meo=o(" (OpenAI GPT model)"),Eeo=l(),fs=a("li"),Uoe=a("strong"),Ceo=o("pegasus"),weo=o(" \u2014 "),dR=a("a"),Aeo=o("PegasusTokenizer"),yeo=o(" or "),cR=a("a"),Leo=o("PegasusTokenizerFast"),xeo=o(" (Pegasus model)"),$eo=l(),Tg=a("li"),Joe=a("strong"),keo=o("perceiver"),Seo=o(" \u2014 "),fR=a("a"),Reo=o("PerceiverTokenizer"),Beo=o(" (Perceiver model)"),Peo=l(),Mg=a("li"),Yoe=a("strong"),Ieo=o("phobert"),qeo=o(" \u2014 "),mR=a("a"),Neo=o("PhobertTokenizer"),jeo=o(" (PhoBERT model)"),Deo=l(),Eg=a("li"),Koe=a("strong"),Geo=o("plbart"),Oeo=o(" \u2014 "),gR=a("a"),Veo=o("PLBartTokenizer"),Xeo=o(" (PLBart model)"),zeo=l(),Cg=a("li"),Zoe=a("strong"),Qeo=o("prophetnet"),Weo=o(" \u2014 "),hR=a("a"),Heo=o("ProphetNetTokenizer"),Ueo=o(" (ProphetNet model)"),Jeo=l(),ms=a("li"),ere=a("strong"),Yeo=o("qdqbert"),Keo=o(" \u2014 "),pR=a("a"),Zeo=o("BertTokenizer"),eoo=o(" or "),uR=a("a"),ooo=o("BertTokenizerFast"),roo=o(" (QDQBert model)"),too=l(),wg=a("li"),ore=a("strong"),aoo=o("rag"),noo=o(" \u2014 "),_R=a("a"),soo=o("RagTokenizer"),loo=o(" (RAG model)"),ioo=l(),gs=a("li"),rre=a("strong"),doo=o("realm"),coo=o(" \u2014 "),bR=a("a"),foo=o("RealmTokenizer"),moo=o(" or "),vR=a("a"),goo=o("RealmTokenizerFast"),hoo=o(" (Realm model)"),poo=l(),hs=a("li"),tre=a("strong"),uoo=o("reformer"),_oo=o(" \u2014 "),FR=a("a"),boo=o("ReformerTokenizer"),voo=o(" or "),TR=a("a"),Foo=o("ReformerTokenizerFast"),Too=o(" (Reformer model)"),Moo=l(),ps=a("li"),are=a("strong"),Eoo=o("rembert"),Coo=o(" \u2014 "),MR=a("a"),woo=o("RemBertTokenizer"),Aoo=o(" or "),ER=a("a"),yoo=o("RemBertTokenizerFast"),Loo=o(" (RemBERT model)"),xoo=l(),us=a("li"),nre=a("strong"),$oo=o("retribert"),koo=o(" \u2014 "),CR=a("a"),Soo=o("RetriBertTokenizer"),Roo=o(" or "),wR=a("a"),Boo=o("RetriBertTokenizerFast"),Poo=o(" (RetriBERT model)"),Ioo=l(),_s=a("li"),sre=a("strong"),qoo=o("roberta"),Noo=o(" \u2014 "),AR=a("a"),joo=o("RobertaTokenizer"),Doo=o(" or "),yR=a("a"),Goo=o("RobertaTokenizerFast"),Ooo=o(" (RoBERTa model)"),Voo=l(),bs=a("li"),lre=a("strong"),Xoo=o("roformer"),zoo=o(" \u2014 "),LR=a("a"),Qoo=o("RoFormerTokenizer"),Woo=o(" or "),xR=a("a"),Hoo=o("RoFormerTokenizerFast"),Uoo=o(" (RoFormer model)"),Joo=l(),Ag=a("li"),ire=a("strong"),Yoo=o("speech_to_text"),Koo=o(" \u2014 "),$R=a("a"),Zoo=o("Speech2TextTokenizer"),ero=o(" (Speech2Text model)"),oro=l(),yg=a("li"),dre=a("strong"),rro=o("speech_to_text_2"),tro=o(" \u2014 "),kR=a("a"),aro=o("Speech2Text2Tokenizer"),nro=o(" (Speech2Text2 model)"),sro=l(),vs=a("li"),cre=a("strong"),lro=o("splinter"),iro=o(" \u2014 "),SR=a("a"),dro=o("SplinterTokenizer"),cro=o(" or "),RR=a("a"),fro=o("SplinterTokenizerFast"),mro=o(" (Splinter model)"),gro=l(),Fs=a("li"),fre=a("strong"),hro=o("squeezebert"),pro=o(" \u2014 "),BR=a("a"),uro=o("SqueezeBertTokenizer"),_ro=o(" or "),PR=a("a"),bro=o("SqueezeBertTokenizerFast"),vro=o(" (SqueezeBERT model)"),Fro=l(),Ts=a("li"),mre=a("strong"),Tro=o("t5"),Mro=o(" \u2014 "),IR=a("a"),Ero=o("T5Tokenizer"),Cro=o(" or "),qR=a("a"),wro=o("T5TokenizerFast"),Aro=o(" (T5 model)"),yro=l(),Lg=a("li"),gre=a("strong"),Lro=o("tapas"),xro=o(" \u2014 "),NR=a("a"),$ro=o("TapasTokenizer"),kro=o(" (TAPAS model)"),Sro=l(),xg=a("li"),hre=a("strong"),Rro=o("tapex"),Bro=o(" \u2014 "),jR=a("a"),Pro=o("TapexTokenizer"),Iro=o(" (TAPEX model)"),qro=l(),$g=a("li"),pre=a("strong"),Nro=o("transfo-xl"),jro=o(" \u2014 "),DR=a("a"),Dro=o("TransfoXLTokenizer"),Gro=o(" (Transformer-XL model)"),Oro=l(),Ms=a("li"),ure=a("strong"),Vro=o("visual_bert"),Xro=o(" \u2014 "),GR=a("a"),zro=o("BertTokenizer"),Qro=o(" or "),OR=a("a"),Wro=o("BertTokenizerFast"),Hro=o(" (VisualBert model)"),Uro=l(),kg=a("li"),_re=a("strong"),Jro=o("wav2vec2"),Yro=o(" \u2014 "),VR=a("a"),Kro=o("Wav2Vec2CTCTokenizer"),Zro=o(" (Wav2Vec2 model)"),eto=l(),Sg=a("li"),bre=a("strong"),oto=o("wav2vec2_phoneme"),rto=o(" \u2014 "),XR=a("a"),tto=o("Wav2Vec2PhonemeCTCTokenizer"),ato=o(" (Wav2Vec2Phoneme model)"),nto=l(),Es=a("li"),vre=a("strong"),sto=o("xglm"),lto=o(" \u2014 "),zR=a("a"),ito=o("XGLMTokenizer"),dto=o(" or "),QR=a("a"),cto=o("XGLMTokenizerFast"),fto=o(" (XGLM model)"),mto=l(),Rg=a("li"),Fre=a("strong"),gto=o("xlm"),hto=o(" \u2014 "),WR=a("a"),pto=o("XLMTokenizer"),uto=o(" (XLM model)"),_to=l(),Bg=a("li"),Tre=a("strong"),bto=o("xlm-prophetnet"),vto=o(" \u2014 "),HR=a("a"),Fto=o("XLMProphetNetTokenizer"),Tto=o(" (XLMProphetNet model)"),Mto=l(),Cs=a("li"),Mre=a("strong"),Eto=o("xlm-roberta"),Cto=o(" \u2014 "),UR=a("a"),wto=o("XLMRobertaTokenizer"),Ato=o(" or "),JR=a("a"),yto=o("XLMRobertaTokenizerFast"),Lto=o(" (XLM-RoBERTa model)"),xto=l(),ws=a("li"),Ere=a("strong"),$to=o("xlm-roberta-xl"),kto=o(" \u2014 "),YR=a("a"),Sto=o("RobertaTokenizer"),Rto=o(" or "),KR=a("a"),Bto=o("RobertaTokenizerFast"),Pto=o(" (XLM-RoBERTa-XL model)"),Ito=l(),As=a("li"),Cre=a("strong"),qto=o("xlnet"),Nto=o(" \u2014 "),ZR=a("a"),jto=o("XLNetTokenizer"),Dto=o(" or "),eB=a("a"),Gto=o("XLNetTokenizerFast"),Oto=o(" (XLNet model)"),Vto=l(),ys=a("li"),wre=a("strong"),Xto=o("yoso"),zto=o(" \u2014 "),oB=a("a"),Qto=o("AlbertTokenizer"),Wto=o(" or "),rB=a("a"),Hto=o("AlbertTokenizerFast"),Uto=o(" (YOSO model)"),Jto=l(),F(Pg.$$.fragment),Yto=l(),Ig=a("div"),F(yA.$$.fragment),Kto=l(),Are=a("p"),Zto=o("Register a new tokenizer in this mapping."),DRe=l(),mi=a("h2"),qg=a("a"),yre=a("span"),F(LA.$$.fragment),eao=l(),Lre=a("span"),oao=o("AutoFeatureExtractor"),GRe=l(),Co=a("div"),F(xA.$$.fragment),rao=l(),$A=a("p"),tao=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),tB=a("a"),aao=o("AutoFeatureExtractor.from_pretrained()"),nao=o(" class method."),sao=l(),kA=a("p"),lao=o("This class cannot be instantiated directly using "),xre=a("code"),iao=o("__init__()"),dao=o(" (throws an error)."),cao=l(),Xe=a("div"),F(SA.$$.fragment),fao=l(),$re=a("p"),mao=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),gao=l(),Ma=a("p"),hao=o("The feature extractor class to instantiate is selected based on the "),kre=a("code"),pao=o("model_type"),uao=o(` property of the config object
(either passed as an argument or loaded from `),Sre=a("code"),_ao=o("pretrained_model_name_or_path"),bao=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Rre=a("code"),vao=o("pretrained_model_name_or_path"),Fao=o(":"),Tao=l(),ae=a("ul"),Ng=a("li"),Bre=a("strong"),Mao=o("beit"),Eao=o(" \u2014 "),aB=a("a"),Cao=o("BeitFeatureExtractor"),wao=o(" (BEiT model)"),Aao=l(),jg=a("li"),Pre=a("strong"),yao=o("clip"),Lao=o(" \u2014 "),nB=a("a"),xao=o("CLIPFeatureExtractor"),$ao=o(" (CLIP model)"),kao=l(),Dg=a("li"),Ire=a("strong"),Sao=o("convnext"),Rao=o(" \u2014 "),sB=a("a"),Bao=o("ConvNextFeatureExtractor"),Pao=o(" (ConvNext model)"),Iao=l(),Gg=a("li"),qre=a("strong"),qao=o("data2vec-audio"),Nao=o(" \u2014 "),lB=a("a"),jao=o("Wav2Vec2FeatureExtractor"),Dao=o(" (Data2VecAudio model)"),Gao=l(),Og=a("li"),Nre=a("strong"),Oao=o("data2vec-vision"),Vao=o(" \u2014 "),iB=a("a"),Xao=o("BeitFeatureExtractor"),zao=o(" (Data2VecVision model)"),Qao=l(),Vg=a("li"),jre=a("strong"),Wao=o("deit"),Hao=o(" \u2014 "),dB=a("a"),Uao=o("DeiTFeatureExtractor"),Jao=o(" (DeiT model)"),Yao=l(),Xg=a("li"),Dre=a("strong"),Kao=o("detr"),Zao=o(" \u2014 "),cB=a("a"),eno=o("DetrFeatureExtractor"),ono=o(" (DETR model)"),rno=l(),zg=a("li"),Gre=a("strong"),tno=o("dpt"),ano=o(" \u2014 "),fB=a("a"),nno=o("DPTFeatureExtractor"),sno=o(" (DPT model)"),lno=l(),Qg=a("li"),Ore=a("strong"),ino=o("glpn"),dno=o(" \u2014 "),mB=a("a"),cno=o("GLPNFeatureExtractor"),fno=o(" (GLPN model)"),mno=l(),Wg=a("li"),Vre=a("strong"),gno=o("hubert"),hno=o(" \u2014 "),gB=a("a"),pno=o("Wav2Vec2FeatureExtractor"),uno=o(" (Hubert model)"),_no=l(),Hg=a("li"),Xre=a("strong"),bno=o("layoutlmv2"),vno=o(" \u2014 "),hB=a("a"),Fno=o("LayoutLMv2FeatureExtractor"),Tno=o(" (LayoutLMv2 model)"),Mno=l(),Ug=a("li"),zre=a("strong"),Eno=o("maskformer"),Cno=o(" \u2014 "),pB=a("a"),wno=o("MaskFormerFeatureExtractor"),Ano=o(" (MaskFormer model)"),yno=l(),Jg=a("li"),Qre=a("strong"),Lno=o("perceiver"),xno=o(" \u2014 "),uB=a("a"),$no=o("PerceiverFeatureExtractor"),kno=o(" (Perceiver model)"),Sno=l(),Yg=a("li"),Wre=a("strong"),Rno=o("poolformer"),Bno=o(" \u2014 "),_B=a("a"),Pno=o("PoolFormerFeatureExtractor"),Ino=o(" (PoolFormer model)"),qno=l(),Kg=a("li"),Hre=a("strong"),Nno=o("regnet"),jno=o(" \u2014 "),bB=a("a"),Dno=o("ConvNextFeatureExtractor"),Gno=o(" (RegNet model)"),Ono=l(),Zg=a("li"),Ure=a("strong"),Vno=o("resnet"),Xno=o(" \u2014 "),vB=a("a"),zno=o("ConvNextFeatureExtractor"),Qno=o(" (ResNet model)"),Wno=l(),eh=a("li"),Jre=a("strong"),Hno=o("segformer"),Uno=o(" \u2014 "),FB=a("a"),Jno=o("SegformerFeatureExtractor"),Yno=o(" (SegFormer model)"),Kno=l(),oh=a("li"),Yre=a("strong"),Zno=o("speech_to_text"),eso=o(" \u2014 "),TB=a("a"),oso=o("Speech2TextFeatureExtractor"),rso=o(" (Speech2Text model)"),tso=l(),rh=a("li"),Kre=a("strong"),aso=o("swin"),nso=o(" \u2014 "),MB=a("a"),sso=o("ViTFeatureExtractor"),lso=o(" (Swin model)"),iso=l(),th=a("li"),Zre=a("strong"),dso=o("van"),cso=o(" \u2014 "),EB=a("a"),fso=o("ConvNextFeatureExtractor"),mso=o(" (VAN model)"),gso=l(),ah=a("li"),ete=a("strong"),hso=o("vit"),pso=o(" \u2014 "),CB=a("a"),uso=o("ViTFeatureExtractor"),_so=o(" (ViT model)"),bso=l(),nh=a("li"),ote=a("strong"),vso=o("vit_mae"),Fso=o(" \u2014 "),wB=a("a"),Tso=o("ViTFeatureExtractor"),Mso=o(" (ViTMAE model)"),Eso=l(),sh=a("li"),rte=a("strong"),Cso=o("wav2vec2"),wso=o(" \u2014 "),AB=a("a"),Aso=o("Wav2Vec2FeatureExtractor"),yso=o(" (Wav2Vec2 model)"),Lso=l(),F(lh.$$.fragment),xso=l(),F(ih.$$.fragment),$so=l(),dh=a("div"),F(RA.$$.fragment),kso=l(),tte=a("p"),Sso=o("Register a new feature extractor for this class."),ORe=l(),gi=a("h2"),ch=a("a"),ate=a("span"),F(BA.$$.fragment),Rso=l(),nte=a("span"),Bso=o("AutoProcessor"),VRe=l(),wo=a("div"),F(PA.$$.fragment),Pso=l(),IA=a("p"),Iso=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),yB=a("a"),qso=o("AutoProcessor.from_pretrained()"),Nso=o(" class method."),jso=l(),qA=a("p"),Dso=o("This class cannot be instantiated directly using "),ste=a("code"),Gso=o("__init__()"),Oso=o(" (throws an error)."),Vso=l(),ze=a("div"),F(NA.$$.fragment),Xso=l(),lte=a("p"),zso=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),Qso=l(),hi=a("p"),Wso=o("The processor class to instantiate is selected based on the "),ite=a("code"),Hso=o("model_type"),Uso=o(` property of the config object (either
passed as an argument or loaded from `),dte=a("code"),Jso=o("pretrained_model_name_or_path"),Yso=o(" if possible):"),Kso=l(),be=a("ul"),fh=a("li"),cte=a("strong"),Zso=o("clip"),elo=o(" \u2014 "),LB=a("a"),olo=o("CLIPProcessor"),rlo=o(" (CLIP model)"),tlo=l(),mh=a("li"),fte=a("strong"),alo=o("layoutlmv2"),nlo=o(" \u2014 "),xB=a("a"),slo=o("LayoutLMv2Processor"),llo=o(" (LayoutLMv2 model)"),ilo=l(),gh=a("li"),mte=a("strong"),dlo=o("layoutxlm"),clo=o(" \u2014 "),$B=a("a"),flo=o("LayoutXLMProcessor"),mlo=o(" (LayoutXLM model)"),glo=l(),hh=a("li"),gte=a("strong"),hlo=o("sew"),plo=o(" \u2014 "),kB=a("a"),ulo=o("Wav2Vec2Processor"),_lo=o(" (SEW model)"),blo=l(),ph=a("li"),hte=a("strong"),vlo=o("sew-d"),Flo=o(" \u2014 "),SB=a("a"),Tlo=o("Wav2Vec2Processor"),Mlo=o(" (SEW-D model)"),Elo=l(),uh=a("li"),pte=a("strong"),Clo=o("speech_to_text"),wlo=o(" \u2014 "),RB=a("a"),Alo=o("Speech2TextProcessor"),ylo=o(" (Speech2Text model)"),Llo=l(),_h=a("li"),ute=a("strong"),xlo=o("speech_to_text_2"),$lo=o(" \u2014 "),BB=a("a"),klo=o("Speech2Text2Processor"),Slo=o(" (Speech2Text2 model)"),Rlo=l(),bh=a("li"),_te=a("strong"),Blo=o("trocr"),Plo=o(" \u2014 "),PB=a("a"),Ilo=o("TrOCRProcessor"),qlo=o(" (TrOCR model)"),Nlo=l(),vh=a("li"),bte=a("strong"),jlo=o("unispeech"),Dlo=o(" \u2014 "),IB=a("a"),Glo=o("Wav2Vec2Processor"),Olo=o(" (UniSpeech model)"),Vlo=l(),Fh=a("li"),vte=a("strong"),Xlo=o("unispeech-sat"),zlo=o(" \u2014 "),qB=a("a"),Qlo=o("Wav2Vec2Processor"),Wlo=o(" (UniSpeechSat model)"),Hlo=l(),Th=a("li"),Fte=a("strong"),Ulo=o("vilt"),Jlo=o(" \u2014 "),NB=a("a"),Ylo=o("ViltProcessor"),Klo=o(" (ViLT model)"),Zlo=l(),Mh=a("li"),Tte=a("strong"),eio=o("vision-text-dual-encoder"),oio=o(" \u2014 "),jB=a("a"),rio=o("VisionTextDualEncoderProcessor"),tio=o(" (VisionTextDualEncoder model)"),aio=l(),Eh=a("li"),Mte=a("strong"),nio=o("wav2vec2"),sio=o(" \u2014 "),DB=a("a"),lio=o("Wav2Vec2Processor"),iio=o(" (Wav2Vec2 model)"),dio=l(),Ch=a("li"),Ete=a("strong"),cio=o("wavlm"),fio=o(" \u2014 "),GB=a("a"),mio=o("Wav2Vec2Processor"),gio=o(" (WavLM model)"),hio=l(),F(wh.$$.fragment),pio=l(),F(Ah.$$.fragment),uio=l(),yh=a("div"),F(jA.$$.fragment),_io=l(),Cte=a("p"),bio=o("Register a new processor for this class."),XRe=l(),pi=a("h2"),Lh=a("a"),wte=a("span"),F(DA.$$.fragment),vio=l(),Ate=a("span"),Fio=o("AutoModel"),zRe=l(),Ao=a("div"),F(GA.$$.fragment),Tio=l(),ui=a("p"),Mio=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),OB=a("a"),Eio=o("from_pretrained()"),Cio=o(" class method or the "),VB=a("a"),wio=o("from_config()"),Aio=o(` class
method.`),yio=l(),OA=a("p"),Lio=o("This class cannot be instantiated directly using "),yte=a("code"),xio=o("__init__()"),$io=o(" (throws an error)."),kio=l(),Kr=a("div"),F(VA.$$.fragment),Sio=l(),Lte=a("p"),Rio=o("Instantiates one of the base model classes of the library from a configuration."),Bio=l(),_i=a("p"),Pio=o(`Note:
Loading a model from its configuration file does `),xte=a("strong"),Iio=o("not"),qio=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),XB=a("a"),Nio=o("from_pretrained()"),jio=o(" to load the model weights."),Dio=l(),F(xh.$$.fragment),Gio=l(),Qe=a("div"),F(XA.$$.fragment),Oio=l(),$te=a("p"),Vio=o("Instantiate one of the base model classes of the library from a pretrained model."),Xio=l(),Ea=a("p"),zio=o("The model class to instantiate is selected based on the "),kte=a("code"),Qio=o("model_type"),Wio=o(` property of the config object (either
passed as an argument or loaded from `),Ste=a("code"),Hio=o("pretrained_model_name_or_path"),Uio=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rte=a("code"),Jio=o("pretrained_model_name_or_path"),Yio=o(":"),Kio=l(),x=a("ul"),$h=a("li"),Bte=a("strong"),Zio=o("albert"),edo=o(" \u2014 "),zB=a("a"),odo=o("AlbertModel"),rdo=o(" (ALBERT model)"),tdo=l(),kh=a("li"),Pte=a("strong"),ado=o("bart"),ndo=o(" \u2014 "),QB=a("a"),sdo=o("BartModel"),ldo=o(" (BART model)"),ido=l(),Sh=a("li"),Ite=a("strong"),ddo=o("beit"),cdo=o(" \u2014 "),WB=a("a"),fdo=o("BeitModel"),mdo=o(" (BEiT model)"),gdo=l(),Rh=a("li"),qte=a("strong"),hdo=o("bert"),pdo=o(" \u2014 "),HB=a("a"),udo=o("BertModel"),_do=o(" (BERT model)"),bdo=l(),Bh=a("li"),Nte=a("strong"),vdo=o("bert-generation"),Fdo=o(" \u2014 "),UB=a("a"),Tdo=o("BertGenerationEncoder"),Mdo=o(" (Bert Generation model)"),Edo=l(),Ph=a("li"),jte=a("strong"),Cdo=o("big_bird"),wdo=o(" \u2014 "),JB=a("a"),Ado=o("BigBirdModel"),ydo=o(" (BigBird model)"),Ldo=l(),Ih=a("li"),Dte=a("strong"),xdo=o("bigbird_pegasus"),$do=o(" \u2014 "),YB=a("a"),kdo=o("BigBirdPegasusModel"),Sdo=o(" (BigBirdPegasus model)"),Rdo=l(),qh=a("li"),Gte=a("strong"),Bdo=o("blenderbot"),Pdo=o(" \u2014 "),KB=a("a"),Ido=o("BlenderbotModel"),qdo=o(" (Blenderbot model)"),Ndo=l(),Nh=a("li"),Ote=a("strong"),jdo=o("blenderbot-small"),Ddo=o(" \u2014 "),ZB=a("a"),Gdo=o("BlenderbotSmallModel"),Odo=o(" (BlenderbotSmall model)"),Vdo=l(),jh=a("li"),Vte=a("strong"),Xdo=o("camembert"),zdo=o(" \u2014 "),eP=a("a"),Qdo=o("CamembertModel"),Wdo=o(" (CamemBERT model)"),Hdo=l(),Dh=a("li"),Xte=a("strong"),Udo=o("canine"),Jdo=o(" \u2014 "),oP=a("a"),Ydo=o("CanineModel"),Kdo=o(" (Canine model)"),Zdo=l(),Gh=a("li"),zte=a("strong"),eco=o("clip"),oco=o(" \u2014 "),rP=a("a"),rco=o("CLIPModel"),tco=o(" (CLIP model)"),aco=l(),Oh=a("li"),Qte=a("strong"),nco=o("convbert"),sco=o(" \u2014 "),tP=a("a"),lco=o("ConvBertModel"),ico=o(" (ConvBERT model)"),dco=l(),Vh=a("li"),Wte=a("strong"),cco=o("convnext"),fco=o(" \u2014 "),aP=a("a"),mco=o("ConvNextModel"),gco=o(" (ConvNext model)"),hco=l(),Xh=a("li"),Hte=a("strong"),pco=o("ctrl"),uco=o(" \u2014 "),nP=a("a"),_co=o("CTRLModel"),bco=o(" (CTRL model)"),vco=l(),zh=a("li"),Ute=a("strong"),Fco=o("data2vec-audio"),Tco=o(" \u2014 "),sP=a("a"),Mco=o("Data2VecAudioModel"),Eco=o(" (Data2VecAudio model)"),Cco=l(),Qh=a("li"),Jte=a("strong"),wco=o("data2vec-text"),Aco=o(" \u2014 "),lP=a("a"),yco=o("Data2VecTextModel"),Lco=o(" (Data2VecText model)"),xco=l(),Wh=a("li"),Yte=a("strong"),$co=o("data2vec-vision"),kco=o(" \u2014 "),iP=a("a"),Sco=o("Data2VecVisionModel"),Rco=o(" (Data2VecVision model)"),Bco=l(),Hh=a("li"),Kte=a("strong"),Pco=o("deberta"),Ico=o(" \u2014 "),dP=a("a"),qco=o("DebertaModel"),Nco=o(" (DeBERTa model)"),jco=l(),Uh=a("li"),Zte=a("strong"),Dco=o("deberta-v2"),Gco=o(" \u2014 "),cP=a("a"),Oco=o("DebertaV2Model"),Vco=o(" (DeBERTa-v2 model)"),Xco=l(),Jh=a("li"),eae=a("strong"),zco=o("decision_transformer"),Qco=o(" \u2014 "),fP=a("a"),Wco=o("DecisionTransformerModel"),Hco=o(" (Decision Transformer model)"),Uco=l(),Yh=a("li"),oae=a("strong"),Jco=o("deit"),Yco=o(" \u2014 "),mP=a("a"),Kco=o("DeiTModel"),Zco=o(" (DeiT model)"),efo=l(),Kh=a("li"),rae=a("strong"),ofo=o("detr"),rfo=o(" \u2014 "),gP=a("a"),tfo=o("DetrModel"),afo=o(" (DETR model)"),nfo=l(),Zh=a("li"),tae=a("strong"),sfo=o("distilbert"),lfo=o(" \u2014 "),hP=a("a"),ifo=o("DistilBertModel"),dfo=o(" (DistilBERT model)"),cfo=l(),ep=a("li"),aae=a("strong"),ffo=o("dpr"),mfo=o(" \u2014 "),pP=a("a"),gfo=o("DPRQuestionEncoder"),hfo=o(" (DPR model)"),pfo=l(),op=a("li"),nae=a("strong"),ufo=o("dpt"),_fo=o(" \u2014 "),uP=a("a"),bfo=o("DPTModel"),vfo=o(" (DPT model)"),Ffo=l(),rp=a("li"),sae=a("strong"),Tfo=o("electra"),Mfo=o(" \u2014 "),_P=a("a"),Efo=o("ElectraModel"),Cfo=o(" (ELECTRA model)"),wfo=l(),tp=a("li"),lae=a("strong"),Afo=o("flaubert"),yfo=o(" \u2014 "),bP=a("a"),Lfo=o("FlaubertModel"),xfo=o(" (FlauBERT model)"),$fo=l(),ap=a("li"),iae=a("strong"),kfo=o("fnet"),Sfo=o(" \u2014 "),vP=a("a"),Rfo=o("FNetModel"),Bfo=o(" (FNet model)"),Pfo=l(),np=a("li"),dae=a("strong"),Ifo=o("fsmt"),qfo=o(" \u2014 "),FP=a("a"),Nfo=o("FSMTModel"),jfo=o(" (FairSeq Machine-Translation model)"),Dfo=l(),Ls=a("li"),cae=a("strong"),Gfo=o("funnel"),Ofo=o(" \u2014 "),TP=a("a"),Vfo=o("FunnelModel"),Xfo=o(" or "),MP=a("a"),zfo=o("FunnelBaseModel"),Qfo=o(" (Funnel Transformer model)"),Wfo=l(),sp=a("li"),fae=a("strong"),Hfo=o("glpn"),Ufo=o(" \u2014 "),EP=a("a"),Jfo=o("GLPNModel"),Yfo=o(" (GLPN model)"),Kfo=l(),lp=a("li"),mae=a("strong"),Zfo=o("gpt2"),emo=o(" \u2014 "),CP=a("a"),omo=o("GPT2Model"),rmo=o(" (OpenAI GPT-2 model)"),tmo=l(),ip=a("li"),gae=a("strong"),amo=o("gpt_neo"),nmo=o(" \u2014 "),wP=a("a"),smo=o("GPTNeoModel"),lmo=o(" (GPT Neo model)"),imo=l(),dp=a("li"),hae=a("strong"),dmo=o("gptj"),cmo=o(" \u2014 "),AP=a("a"),fmo=o("GPTJModel"),mmo=o(" (GPT-J model)"),gmo=l(),cp=a("li"),pae=a("strong"),hmo=o("hubert"),pmo=o(" \u2014 "),yP=a("a"),umo=o("HubertModel"),_mo=o(" (Hubert model)"),bmo=l(),fp=a("li"),uae=a("strong"),vmo=o("ibert"),Fmo=o(" \u2014 "),LP=a("a"),Tmo=o("IBertModel"),Mmo=o(" (I-BERT model)"),Emo=l(),mp=a("li"),_ae=a("strong"),Cmo=o("imagegpt"),wmo=o(" \u2014 "),xP=a("a"),Amo=o("ImageGPTModel"),ymo=o(" (ImageGPT model)"),Lmo=l(),gp=a("li"),bae=a("strong"),xmo=o("layoutlm"),$mo=o(" \u2014 "),$P=a("a"),kmo=o("LayoutLMModel"),Smo=o(" (LayoutLM model)"),Rmo=l(),hp=a("li"),vae=a("strong"),Bmo=o("layoutlmv2"),Pmo=o(" \u2014 "),kP=a("a"),Imo=o("LayoutLMv2Model"),qmo=o(" (LayoutLMv2 model)"),Nmo=l(),pp=a("li"),Fae=a("strong"),jmo=o("led"),Dmo=o(" \u2014 "),SP=a("a"),Gmo=o("LEDModel"),Omo=o(" (LED model)"),Vmo=l(),up=a("li"),Tae=a("strong"),Xmo=o("longformer"),zmo=o(" \u2014 "),RP=a("a"),Qmo=o("LongformerModel"),Wmo=o(" (Longformer model)"),Hmo=l(),_p=a("li"),Mae=a("strong"),Umo=o("luke"),Jmo=o(" \u2014 "),BP=a("a"),Ymo=o("LukeModel"),Kmo=o(" (LUKE model)"),Zmo=l(),bp=a("li"),Eae=a("strong"),ego=o("lxmert"),ogo=o(" \u2014 "),PP=a("a"),rgo=o("LxmertModel"),tgo=o(" (LXMERT model)"),ago=l(),vp=a("li"),Cae=a("strong"),ngo=o("m2m_100"),sgo=o(" \u2014 "),IP=a("a"),lgo=o("M2M100Model"),igo=o(" (M2M100 model)"),dgo=l(),Fp=a("li"),wae=a("strong"),cgo=o("marian"),fgo=o(" \u2014 "),qP=a("a"),mgo=o("MarianModel"),ggo=o(" (Marian model)"),hgo=l(),Tp=a("li"),Aae=a("strong"),pgo=o("maskformer"),ugo=o(" \u2014 "),NP=a("a"),_go=o("MaskFormerModel"),bgo=o(" (MaskFormer model)"),vgo=l(),Mp=a("li"),yae=a("strong"),Fgo=o("mbart"),Tgo=o(" \u2014 "),jP=a("a"),Mgo=o("MBartModel"),Ego=o(" (mBART model)"),Cgo=l(),Ep=a("li"),Lae=a("strong"),wgo=o("megatron-bert"),Ago=o(" \u2014 "),DP=a("a"),ygo=o("MegatronBertModel"),Lgo=o(" (MegatronBert model)"),xgo=l(),Cp=a("li"),xae=a("strong"),$go=o("mobilebert"),kgo=o(" \u2014 "),GP=a("a"),Sgo=o("MobileBertModel"),Rgo=o(" (MobileBERT model)"),Bgo=l(),wp=a("li"),$ae=a("strong"),Pgo=o("mpnet"),Igo=o(" \u2014 "),OP=a("a"),qgo=o("MPNetModel"),Ngo=o(" (MPNet model)"),jgo=l(),Ap=a("li"),kae=a("strong"),Dgo=o("mt5"),Ggo=o(" \u2014 "),VP=a("a"),Ogo=o("MT5Model"),Vgo=o(" (mT5 model)"),Xgo=l(),yp=a("li"),Sae=a("strong"),zgo=o("nystromformer"),Qgo=o(" \u2014 "),XP=a("a"),Wgo=o("NystromformerModel"),Hgo=o(" (Nystromformer model)"),Ugo=l(),Lp=a("li"),Rae=a("strong"),Jgo=o("openai-gpt"),Ygo=o(" \u2014 "),zP=a("a"),Kgo=o("OpenAIGPTModel"),Zgo=o(" (OpenAI GPT model)"),eho=l(),xp=a("li"),Bae=a("strong"),oho=o("pegasus"),rho=o(" \u2014 "),QP=a("a"),tho=o("PegasusModel"),aho=o(" (Pegasus model)"),nho=l(),$p=a("li"),Pae=a("strong"),sho=o("perceiver"),lho=o(" \u2014 "),WP=a("a"),iho=o("PerceiverModel"),dho=o(" (Perceiver model)"),cho=l(),kp=a("li"),Iae=a("strong"),fho=o("plbart"),mho=o(" \u2014 "),HP=a("a"),gho=o("PLBartModel"),hho=o(" (PLBart model)"),pho=l(),Sp=a("li"),qae=a("strong"),uho=o("poolformer"),_ho=o(" \u2014 "),UP=a("a"),bho=o("PoolFormerModel"),vho=o(" (PoolFormer model)"),Fho=l(),Rp=a("li"),Nae=a("strong"),Tho=o("prophetnet"),Mho=o(" \u2014 "),JP=a("a"),Eho=o("ProphetNetModel"),Cho=o(" (ProphetNet model)"),who=l(),Bp=a("li"),jae=a("strong"),Aho=o("qdqbert"),yho=o(" \u2014 "),YP=a("a"),Lho=o("QDQBertModel"),xho=o(" (QDQBert model)"),$ho=l(),Pp=a("li"),Dae=a("strong"),kho=o("reformer"),Sho=o(" \u2014 "),KP=a("a"),Rho=o("ReformerModel"),Bho=o(" (Reformer model)"),Pho=l(),Ip=a("li"),Gae=a("strong"),Iho=o("regnet"),qho=o(" \u2014 "),ZP=a("a"),Nho=o("RegNetModel"),jho=o(" (RegNet model)"),Dho=l(),qp=a("li"),Oae=a("strong"),Gho=o("rembert"),Oho=o(" \u2014 "),eI=a("a"),Vho=o("RemBertModel"),Xho=o(" (RemBERT model)"),zho=l(),Np=a("li"),Vae=a("strong"),Qho=o("resnet"),Who=o(" \u2014 "),oI=a("a"),Hho=o("ResNetModel"),Uho=o(" (ResNet model)"),Jho=l(),jp=a("li"),Xae=a("strong"),Yho=o("retribert"),Kho=o(" \u2014 "),rI=a("a"),Zho=o("RetriBertModel"),epo=o(" (RetriBERT model)"),opo=l(),Dp=a("li"),zae=a("strong"),rpo=o("roberta"),tpo=o(" \u2014 "),tI=a("a"),apo=o("RobertaModel"),npo=o(" (RoBERTa model)"),spo=l(),Gp=a("li"),Qae=a("strong"),lpo=o("roformer"),ipo=o(" \u2014 "),aI=a("a"),dpo=o("RoFormerModel"),cpo=o(" (RoFormer model)"),fpo=l(),Op=a("li"),Wae=a("strong"),mpo=o("segformer"),gpo=o(" \u2014 "),nI=a("a"),hpo=o("SegformerModel"),ppo=o(" (SegFormer model)"),upo=l(),Vp=a("li"),Hae=a("strong"),_po=o("sew"),bpo=o(" \u2014 "),sI=a("a"),vpo=o("SEWModel"),Fpo=o(" (SEW model)"),Tpo=l(),Xp=a("li"),Uae=a("strong"),Mpo=o("sew-d"),Epo=o(" \u2014 "),lI=a("a"),Cpo=o("SEWDModel"),wpo=o(" (SEW-D model)"),Apo=l(),zp=a("li"),Jae=a("strong"),ypo=o("speech_to_text"),Lpo=o(" \u2014 "),iI=a("a"),xpo=o("Speech2TextModel"),$po=o(" (Speech2Text model)"),kpo=l(),Qp=a("li"),Yae=a("strong"),Spo=o("splinter"),Rpo=o(" \u2014 "),dI=a("a"),Bpo=o("SplinterModel"),Ppo=o(" (Splinter model)"),Ipo=l(),Wp=a("li"),Kae=a("strong"),qpo=o("squeezebert"),Npo=o(" \u2014 "),cI=a("a"),jpo=o("SqueezeBertModel"),Dpo=o(" (SqueezeBERT model)"),Gpo=l(),Hp=a("li"),Zae=a("strong"),Opo=o("swin"),Vpo=o(" \u2014 "),fI=a("a"),Xpo=o("SwinModel"),zpo=o(" (Swin model)"),Qpo=l(),Up=a("li"),ene=a("strong"),Wpo=o("t5"),Hpo=o(" \u2014 "),mI=a("a"),Upo=o("T5Model"),Jpo=o(" (T5 model)"),Ypo=l(),Jp=a("li"),one=a("strong"),Kpo=o("tapas"),Zpo=o(" \u2014 "),gI=a("a"),euo=o("TapasModel"),ouo=o(" (TAPAS model)"),ruo=l(),Yp=a("li"),rne=a("strong"),tuo=o("transfo-xl"),auo=o(" \u2014 "),hI=a("a"),nuo=o("TransfoXLModel"),suo=o(" (Transformer-XL model)"),luo=l(),Kp=a("li"),tne=a("strong"),iuo=o("unispeech"),duo=o(" \u2014 "),pI=a("a"),cuo=o("UniSpeechModel"),fuo=o(" (UniSpeech model)"),muo=l(),Zp=a("li"),ane=a("strong"),guo=o("unispeech-sat"),huo=o(" \u2014 "),uI=a("a"),puo=o("UniSpeechSatModel"),uuo=o(" (UniSpeechSat model)"),_uo=l(),eu=a("li"),nne=a("strong"),buo=o("van"),vuo=o(" \u2014 "),_I=a("a"),Fuo=o("VanModel"),Tuo=o(" (VAN model)"),Muo=l(),ou=a("li"),sne=a("strong"),Euo=o("vilt"),Cuo=o(" \u2014 "),bI=a("a"),wuo=o("ViltModel"),Auo=o(" (ViLT model)"),yuo=l(),ru=a("li"),lne=a("strong"),Luo=o("vision-text-dual-encoder"),xuo=o(" \u2014 "),vI=a("a"),$uo=o("VisionTextDualEncoderModel"),kuo=o(" (VisionTextDualEncoder model)"),Suo=l(),tu=a("li"),ine=a("strong"),Ruo=o("visual_bert"),Buo=o(" \u2014 "),FI=a("a"),Puo=o("VisualBertModel"),Iuo=o(" (VisualBert model)"),quo=l(),au=a("li"),dne=a("strong"),Nuo=o("vit"),juo=o(" \u2014 "),TI=a("a"),Duo=o("ViTModel"),Guo=o(" (ViT model)"),Ouo=l(),nu=a("li"),cne=a("strong"),Vuo=o("vit_mae"),Xuo=o(" \u2014 "),MI=a("a"),zuo=o("ViTMAEModel"),Quo=o(" (ViTMAE model)"),Wuo=l(),su=a("li"),fne=a("strong"),Huo=o("wav2vec2"),Uuo=o(" \u2014 "),EI=a("a"),Juo=o("Wav2Vec2Model"),Yuo=o(" (Wav2Vec2 model)"),Kuo=l(),lu=a("li"),mne=a("strong"),Zuo=o("wavlm"),e_o=o(" \u2014 "),CI=a("a"),o_o=o("WavLMModel"),r_o=o(" (WavLM model)"),t_o=l(),iu=a("li"),gne=a("strong"),a_o=o("xglm"),n_o=o(" \u2014 "),wI=a("a"),s_o=o("XGLMModel"),l_o=o(" (XGLM model)"),i_o=l(),du=a("li"),hne=a("strong"),d_o=o("xlm"),c_o=o(" \u2014 "),AI=a("a"),f_o=o("XLMModel"),m_o=o(" (XLM model)"),g_o=l(),cu=a("li"),pne=a("strong"),h_o=o("xlm-prophetnet"),p_o=o(" \u2014 "),yI=a("a"),u_o=o("XLMProphetNetModel"),__o=o(" (XLMProphetNet model)"),b_o=l(),fu=a("li"),une=a("strong"),v_o=o("xlm-roberta"),F_o=o(" \u2014 "),LI=a("a"),T_o=o("XLMRobertaModel"),M_o=o(" (XLM-RoBERTa model)"),E_o=l(),mu=a("li"),_ne=a("strong"),C_o=o("xlm-roberta-xl"),w_o=o(" \u2014 "),xI=a("a"),A_o=o("XLMRobertaXLModel"),y_o=o(" (XLM-RoBERTa-XL model)"),L_o=l(),gu=a("li"),bne=a("strong"),x_o=o("xlnet"),$_o=o(" \u2014 "),$I=a("a"),k_o=o("XLNetModel"),S_o=o(" (XLNet model)"),R_o=l(),hu=a("li"),vne=a("strong"),B_o=o("yoso"),P_o=o(" \u2014 "),kI=a("a"),I_o=o("YosoModel"),q_o=o(" (YOSO model)"),N_o=l(),pu=a("p"),j_o=o("The model is set in evaluation mode by default using "),Fne=a("code"),D_o=o("model.eval()"),G_o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Tne=a("code"),O_o=o("model.train()"),V_o=l(),F(uu.$$.fragment),QRe=l(),bi=a("h2"),_u=a("a"),Mne=a("span"),F(zA.$$.fragment),X_o=l(),Ene=a("span"),z_o=o("AutoModelForPreTraining"),WRe=l(),yo=a("div"),F(QA.$$.fragment),Q_o=l(),vi=a("p"),W_o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),SI=a("a"),H_o=o("from_pretrained()"),U_o=o(" class method or the "),RI=a("a"),J_o=o("from_config()"),Y_o=o(` class
method.`),K_o=l(),WA=a("p"),Z_o=o("This class cannot be instantiated directly using "),Cne=a("code"),e1o=o("__init__()"),o1o=o(" (throws an error)."),r1o=l(),Zr=a("div"),F(HA.$$.fragment),t1o=l(),wne=a("p"),a1o=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),n1o=l(),Fi=a("p"),s1o=o(`Note:
Loading a model from its configuration file does `),Ane=a("strong"),l1o=o("not"),i1o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),BI=a("a"),d1o=o("from_pretrained()"),c1o=o(" to load the model weights."),f1o=l(),F(bu.$$.fragment),m1o=l(),We=a("div"),F(UA.$$.fragment),g1o=l(),yne=a("p"),h1o=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),p1o=l(),Ca=a("p"),u1o=o("The model class to instantiate is selected based on the "),Lne=a("code"),_1o=o("model_type"),b1o=o(` property of the config object (either
passed as an argument or loaded from `),xne=a("code"),v1o=o("pretrained_model_name_or_path"),F1o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$ne=a("code"),T1o=o("pretrained_model_name_or_path"),M1o=o(":"),E1o=l(),G=a("ul"),vu=a("li"),kne=a("strong"),C1o=o("albert"),w1o=o(" \u2014 "),PI=a("a"),A1o=o("AlbertForPreTraining"),y1o=o(" (ALBERT model)"),L1o=l(),Fu=a("li"),Sne=a("strong"),x1o=o("bart"),$1o=o(" \u2014 "),II=a("a"),k1o=o("BartForConditionalGeneration"),S1o=o(" (BART model)"),R1o=l(),Tu=a("li"),Rne=a("strong"),B1o=o("bert"),P1o=o(" \u2014 "),qI=a("a"),I1o=o("BertForPreTraining"),q1o=o(" (BERT model)"),N1o=l(),Mu=a("li"),Bne=a("strong"),j1o=o("big_bird"),D1o=o(" \u2014 "),NI=a("a"),G1o=o("BigBirdForPreTraining"),O1o=o(" (BigBird model)"),V1o=l(),Eu=a("li"),Pne=a("strong"),X1o=o("camembert"),z1o=o(" \u2014 "),jI=a("a"),Q1o=o("CamembertForMaskedLM"),W1o=o(" (CamemBERT model)"),H1o=l(),Cu=a("li"),Ine=a("strong"),U1o=o("ctrl"),J1o=o(" \u2014 "),DI=a("a"),Y1o=o("CTRLLMHeadModel"),K1o=o(" (CTRL model)"),Z1o=l(),wu=a("li"),qne=a("strong"),e9o=o("data2vec-text"),o9o=o(" \u2014 "),GI=a("a"),r9o=o("Data2VecTextForMaskedLM"),t9o=o(" (Data2VecText model)"),a9o=l(),Au=a("li"),Nne=a("strong"),n9o=o("deberta"),s9o=o(" \u2014 "),OI=a("a"),l9o=o("DebertaForMaskedLM"),i9o=o(" (DeBERTa model)"),d9o=l(),yu=a("li"),jne=a("strong"),c9o=o("deberta-v2"),f9o=o(" \u2014 "),VI=a("a"),m9o=o("DebertaV2ForMaskedLM"),g9o=o(" (DeBERTa-v2 model)"),h9o=l(),Lu=a("li"),Dne=a("strong"),p9o=o("distilbert"),u9o=o(" \u2014 "),XI=a("a"),_9o=o("DistilBertForMaskedLM"),b9o=o(" (DistilBERT model)"),v9o=l(),xu=a("li"),Gne=a("strong"),F9o=o("electra"),T9o=o(" \u2014 "),zI=a("a"),M9o=o("ElectraForPreTraining"),E9o=o(" (ELECTRA model)"),C9o=l(),$u=a("li"),One=a("strong"),w9o=o("flaubert"),A9o=o(" \u2014 "),QI=a("a"),y9o=o("FlaubertWithLMHeadModel"),L9o=o(" (FlauBERT model)"),x9o=l(),ku=a("li"),Vne=a("strong"),$9o=o("fnet"),k9o=o(" \u2014 "),WI=a("a"),S9o=o("FNetForPreTraining"),R9o=o(" (FNet model)"),B9o=l(),Su=a("li"),Xne=a("strong"),P9o=o("fsmt"),I9o=o(" \u2014 "),HI=a("a"),q9o=o("FSMTForConditionalGeneration"),N9o=o(" (FairSeq Machine-Translation model)"),j9o=l(),Ru=a("li"),zne=a("strong"),D9o=o("funnel"),G9o=o(" \u2014 "),UI=a("a"),O9o=o("FunnelForPreTraining"),V9o=o(" (Funnel Transformer model)"),X9o=l(),Bu=a("li"),Qne=a("strong"),z9o=o("gpt2"),Q9o=o(" \u2014 "),JI=a("a"),W9o=o("GPT2LMHeadModel"),H9o=o(" (OpenAI GPT-2 model)"),U9o=l(),Pu=a("li"),Wne=a("strong"),J9o=o("ibert"),Y9o=o(" \u2014 "),YI=a("a"),K9o=o("IBertForMaskedLM"),Z9o=o(" (I-BERT model)"),ebo=l(),Iu=a("li"),Hne=a("strong"),obo=o("layoutlm"),rbo=o(" \u2014 "),KI=a("a"),tbo=o("LayoutLMForMaskedLM"),abo=o(" (LayoutLM model)"),nbo=l(),qu=a("li"),Une=a("strong"),sbo=o("longformer"),lbo=o(" \u2014 "),ZI=a("a"),ibo=o("LongformerForMaskedLM"),dbo=o(" (Longformer model)"),cbo=l(),Nu=a("li"),Jne=a("strong"),fbo=o("lxmert"),mbo=o(" \u2014 "),eq=a("a"),gbo=o("LxmertForPreTraining"),hbo=o(" (LXMERT model)"),pbo=l(),ju=a("li"),Yne=a("strong"),ubo=o("megatron-bert"),_bo=o(" \u2014 "),oq=a("a"),bbo=o("MegatronBertForPreTraining"),vbo=o(" (MegatronBert model)"),Fbo=l(),Du=a("li"),Kne=a("strong"),Tbo=o("mobilebert"),Mbo=o(" \u2014 "),rq=a("a"),Ebo=o("MobileBertForPreTraining"),Cbo=o(" (MobileBERT model)"),wbo=l(),Gu=a("li"),Zne=a("strong"),Abo=o("mpnet"),ybo=o(" \u2014 "),tq=a("a"),Lbo=o("MPNetForMaskedLM"),xbo=o(" (MPNet model)"),$bo=l(),Ou=a("li"),ese=a("strong"),kbo=o("openai-gpt"),Sbo=o(" \u2014 "),aq=a("a"),Rbo=o("OpenAIGPTLMHeadModel"),Bbo=o(" (OpenAI GPT model)"),Pbo=l(),Vu=a("li"),ose=a("strong"),Ibo=o("retribert"),qbo=o(" \u2014 "),nq=a("a"),Nbo=o("RetriBertModel"),jbo=o(" (RetriBERT model)"),Dbo=l(),Xu=a("li"),rse=a("strong"),Gbo=o("roberta"),Obo=o(" \u2014 "),sq=a("a"),Vbo=o("RobertaForMaskedLM"),Xbo=o(" (RoBERTa model)"),zbo=l(),zu=a("li"),tse=a("strong"),Qbo=o("squeezebert"),Wbo=o(" \u2014 "),lq=a("a"),Hbo=o("SqueezeBertForMaskedLM"),Ubo=o(" (SqueezeBERT model)"),Jbo=l(),Qu=a("li"),ase=a("strong"),Ybo=o("t5"),Kbo=o(" \u2014 "),iq=a("a"),Zbo=o("T5ForConditionalGeneration"),e2o=o(" (T5 model)"),o2o=l(),Wu=a("li"),nse=a("strong"),r2o=o("tapas"),t2o=o(" \u2014 "),dq=a("a"),a2o=o("TapasForMaskedLM"),n2o=o(" (TAPAS model)"),s2o=l(),Hu=a("li"),sse=a("strong"),l2o=o("transfo-xl"),i2o=o(" \u2014 "),cq=a("a"),d2o=o("TransfoXLLMHeadModel"),c2o=o(" (Transformer-XL model)"),f2o=l(),Uu=a("li"),lse=a("strong"),m2o=o("unispeech"),g2o=o(" \u2014 "),fq=a("a"),h2o=o("UniSpeechForPreTraining"),p2o=o(" (UniSpeech model)"),u2o=l(),Ju=a("li"),ise=a("strong"),_2o=o("unispeech-sat"),b2o=o(" \u2014 "),mq=a("a"),v2o=o("UniSpeechSatForPreTraining"),F2o=o(" (UniSpeechSat model)"),T2o=l(),Yu=a("li"),dse=a("strong"),M2o=o("visual_bert"),E2o=o(" \u2014 "),gq=a("a"),C2o=o("VisualBertForPreTraining"),w2o=o(" (VisualBert model)"),A2o=l(),Ku=a("li"),cse=a("strong"),y2o=o("vit_mae"),L2o=o(" \u2014 "),hq=a("a"),x2o=o("ViTMAEForPreTraining"),$2o=o(" (ViTMAE model)"),k2o=l(),Zu=a("li"),fse=a("strong"),S2o=o("wav2vec2"),R2o=o(" \u2014 "),pq=a("a"),B2o=o("Wav2Vec2ForPreTraining"),P2o=o(" (Wav2Vec2 model)"),I2o=l(),e_=a("li"),mse=a("strong"),q2o=o("xlm"),N2o=o(" \u2014 "),uq=a("a"),j2o=o("XLMWithLMHeadModel"),D2o=o(" (XLM model)"),G2o=l(),o_=a("li"),gse=a("strong"),O2o=o("xlm-roberta"),V2o=o(" \u2014 "),_q=a("a"),X2o=o("XLMRobertaForMaskedLM"),z2o=o(" (XLM-RoBERTa model)"),Q2o=l(),r_=a("li"),hse=a("strong"),W2o=o("xlm-roberta-xl"),H2o=o(" \u2014 "),bq=a("a"),U2o=o("XLMRobertaXLForMaskedLM"),J2o=o(" (XLM-RoBERTa-XL model)"),Y2o=l(),t_=a("li"),pse=a("strong"),K2o=o("xlnet"),Z2o=o(" \u2014 "),vq=a("a"),e5o=o("XLNetLMHeadModel"),o5o=o(" (XLNet model)"),r5o=l(),a_=a("p"),t5o=o("The model is set in evaluation mode by default using "),use=a("code"),a5o=o("model.eval()"),n5o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_se=a("code"),s5o=o("model.train()"),l5o=l(),F(n_.$$.fragment),HRe=l(),Ti=a("h2"),s_=a("a"),bse=a("span"),F(JA.$$.fragment),i5o=l(),vse=a("span"),d5o=o("AutoModelForCausalLM"),URe=l(),Lo=a("div"),F(YA.$$.fragment),c5o=l(),Mi=a("p"),f5o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Fq=a("a"),m5o=o("from_pretrained()"),g5o=o(" class method or the "),Tq=a("a"),h5o=o("from_config()"),p5o=o(` class
method.`),u5o=l(),KA=a("p"),_5o=o("This class cannot be instantiated directly using "),Fse=a("code"),b5o=o("__init__()"),v5o=o(" (throws an error)."),F5o=l(),et=a("div"),F(ZA.$$.fragment),T5o=l(),Tse=a("p"),M5o=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),E5o=l(),Ei=a("p"),C5o=o(`Note:
Loading a model from its configuration file does `),Mse=a("strong"),w5o=o("not"),A5o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Mq=a("a"),y5o=o("from_pretrained()"),L5o=o(" to load the model weights."),x5o=l(),F(l_.$$.fragment),$5o=l(),He=a("div"),F(e0.$$.fragment),k5o=l(),Ese=a("p"),S5o=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),R5o=l(),wa=a("p"),B5o=o("The model class to instantiate is selected based on the "),Cse=a("code"),P5o=o("model_type"),I5o=o(` property of the config object (either
passed as an argument or loaded from `),wse=a("code"),q5o=o("pretrained_model_name_or_path"),N5o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ase=a("code"),j5o=o("pretrained_model_name_or_path"),D5o=o(":"),G5o=l(),z=a("ul"),i_=a("li"),yse=a("strong"),O5o=o("bart"),V5o=o(" \u2014 "),Eq=a("a"),X5o=o("BartForCausalLM"),z5o=o(" (BART model)"),Q5o=l(),d_=a("li"),Lse=a("strong"),W5o=o("bert"),H5o=o(" \u2014 "),Cq=a("a"),U5o=o("BertLMHeadModel"),J5o=o(" (BERT model)"),Y5o=l(),c_=a("li"),xse=a("strong"),K5o=o("bert-generation"),Z5o=o(" \u2014 "),wq=a("a"),evo=o("BertGenerationDecoder"),ovo=o(" (Bert Generation model)"),rvo=l(),f_=a("li"),$se=a("strong"),tvo=o("big_bird"),avo=o(" \u2014 "),Aq=a("a"),nvo=o("BigBirdForCausalLM"),svo=o(" (BigBird model)"),lvo=l(),m_=a("li"),kse=a("strong"),ivo=o("bigbird_pegasus"),dvo=o(" \u2014 "),yq=a("a"),cvo=o("BigBirdPegasusForCausalLM"),fvo=o(" (BigBirdPegasus model)"),mvo=l(),g_=a("li"),Sse=a("strong"),gvo=o("blenderbot"),hvo=o(" \u2014 "),Lq=a("a"),pvo=o("BlenderbotForCausalLM"),uvo=o(" (Blenderbot model)"),_vo=l(),h_=a("li"),Rse=a("strong"),bvo=o("blenderbot-small"),vvo=o(" \u2014 "),xq=a("a"),Fvo=o("BlenderbotSmallForCausalLM"),Tvo=o(" (BlenderbotSmall model)"),Mvo=l(),p_=a("li"),Bse=a("strong"),Evo=o("camembert"),Cvo=o(" \u2014 "),$q=a("a"),wvo=o("CamembertForCausalLM"),Avo=o(" (CamemBERT model)"),yvo=l(),u_=a("li"),Pse=a("strong"),Lvo=o("ctrl"),xvo=o(" \u2014 "),kq=a("a"),$vo=o("CTRLLMHeadModel"),kvo=o(" (CTRL model)"),Svo=l(),__=a("li"),Ise=a("strong"),Rvo=o("data2vec-text"),Bvo=o(" \u2014 "),Sq=a("a"),Pvo=o("Data2VecTextForCausalLM"),Ivo=o(" (Data2VecText model)"),qvo=l(),b_=a("li"),qse=a("strong"),Nvo=o("electra"),jvo=o(" \u2014 "),Rq=a("a"),Dvo=o("ElectraForCausalLM"),Gvo=o(" (ELECTRA model)"),Ovo=l(),v_=a("li"),Nse=a("strong"),Vvo=o("gpt2"),Xvo=o(" \u2014 "),Bq=a("a"),zvo=o("GPT2LMHeadModel"),Qvo=o(" (OpenAI GPT-2 model)"),Wvo=l(),F_=a("li"),jse=a("strong"),Hvo=o("gpt_neo"),Uvo=o(" \u2014 "),Pq=a("a"),Jvo=o("GPTNeoForCausalLM"),Yvo=o(" (GPT Neo model)"),Kvo=l(),T_=a("li"),Dse=a("strong"),Zvo=o("gptj"),eFo=o(" \u2014 "),Iq=a("a"),oFo=o("GPTJForCausalLM"),rFo=o(" (GPT-J model)"),tFo=l(),M_=a("li"),Gse=a("strong"),aFo=o("marian"),nFo=o(" \u2014 "),qq=a("a"),sFo=o("MarianForCausalLM"),lFo=o(" (Marian model)"),iFo=l(),E_=a("li"),Ose=a("strong"),dFo=o("mbart"),cFo=o(" \u2014 "),Nq=a("a"),fFo=o("MBartForCausalLM"),mFo=o(" (mBART model)"),gFo=l(),C_=a("li"),Vse=a("strong"),hFo=o("megatron-bert"),pFo=o(" \u2014 "),jq=a("a"),uFo=o("MegatronBertForCausalLM"),_Fo=o(" (MegatronBert model)"),bFo=l(),w_=a("li"),Xse=a("strong"),vFo=o("openai-gpt"),FFo=o(" \u2014 "),Dq=a("a"),TFo=o("OpenAIGPTLMHeadModel"),MFo=o(" (OpenAI GPT model)"),EFo=l(),A_=a("li"),zse=a("strong"),CFo=o("pegasus"),wFo=o(" \u2014 "),Gq=a("a"),AFo=o("PegasusForCausalLM"),yFo=o(" (Pegasus model)"),LFo=l(),y_=a("li"),Qse=a("strong"),xFo=o("plbart"),$Fo=o(" \u2014 "),Oq=a("a"),kFo=o("PLBartForCausalLM"),SFo=o(" (PLBart model)"),RFo=l(),L_=a("li"),Wse=a("strong"),BFo=o("prophetnet"),PFo=o(" \u2014 "),Vq=a("a"),IFo=o("ProphetNetForCausalLM"),qFo=o(" (ProphetNet model)"),NFo=l(),x_=a("li"),Hse=a("strong"),jFo=o("qdqbert"),DFo=o(" \u2014 "),Xq=a("a"),GFo=o("QDQBertLMHeadModel"),OFo=o(" (QDQBert model)"),VFo=l(),$_=a("li"),Use=a("strong"),XFo=o("reformer"),zFo=o(" \u2014 "),zq=a("a"),QFo=o("ReformerModelWithLMHead"),WFo=o(" (Reformer model)"),HFo=l(),k_=a("li"),Jse=a("strong"),UFo=o("rembert"),JFo=o(" \u2014 "),Qq=a("a"),YFo=o("RemBertForCausalLM"),KFo=o(" (RemBERT model)"),ZFo=l(),S_=a("li"),Yse=a("strong"),e6o=o("roberta"),o6o=o(" \u2014 "),Wq=a("a"),r6o=o("RobertaForCausalLM"),t6o=o(" (RoBERTa model)"),a6o=l(),R_=a("li"),Kse=a("strong"),n6o=o("roformer"),s6o=o(" \u2014 "),Hq=a("a"),l6o=o("RoFormerForCausalLM"),i6o=o(" (RoFormer model)"),d6o=l(),B_=a("li"),Zse=a("strong"),c6o=o("speech_to_text_2"),f6o=o(" \u2014 "),Uq=a("a"),m6o=o("Speech2Text2ForCausalLM"),g6o=o(" (Speech2Text2 model)"),h6o=l(),P_=a("li"),ele=a("strong"),p6o=o("transfo-xl"),u6o=o(" \u2014 "),Jq=a("a"),_6o=o("TransfoXLLMHeadModel"),b6o=o(" (Transformer-XL model)"),v6o=l(),I_=a("li"),ole=a("strong"),F6o=o("trocr"),T6o=o(" \u2014 "),Yq=a("a"),M6o=o("TrOCRForCausalLM"),E6o=o(" (TrOCR model)"),C6o=l(),q_=a("li"),rle=a("strong"),w6o=o("xglm"),A6o=o(" \u2014 "),Kq=a("a"),y6o=o("XGLMForCausalLM"),L6o=o(" (XGLM model)"),x6o=l(),N_=a("li"),tle=a("strong"),$6o=o("xlm"),k6o=o(" \u2014 "),Zq=a("a"),S6o=o("XLMWithLMHeadModel"),R6o=o(" (XLM model)"),B6o=l(),j_=a("li"),ale=a("strong"),P6o=o("xlm-prophetnet"),I6o=o(" \u2014 "),eN=a("a"),q6o=o("XLMProphetNetForCausalLM"),N6o=o(" (XLMProphetNet model)"),j6o=l(),D_=a("li"),nle=a("strong"),D6o=o("xlm-roberta"),G6o=o(" \u2014 "),oN=a("a"),O6o=o("XLMRobertaForCausalLM"),V6o=o(" (XLM-RoBERTa model)"),X6o=l(),G_=a("li"),sle=a("strong"),z6o=o("xlm-roberta-xl"),Q6o=o(" \u2014 "),rN=a("a"),W6o=o("XLMRobertaXLForCausalLM"),H6o=o(" (XLM-RoBERTa-XL model)"),U6o=l(),O_=a("li"),lle=a("strong"),J6o=o("xlnet"),Y6o=o(" \u2014 "),tN=a("a"),K6o=o("XLNetLMHeadModel"),Z6o=o(" (XLNet model)"),eTo=l(),V_=a("p"),oTo=o("The model is set in evaluation mode by default using "),ile=a("code"),rTo=o("model.eval()"),tTo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),dle=a("code"),aTo=o("model.train()"),nTo=l(),F(X_.$$.fragment),JRe=l(),Ci=a("h2"),z_=a("a"),cle=a("span"),F(o0.$$.fragment),sTo=l(),fle=a("span"),lTo=o("AutoModelForMaskedLM"),YRe=l(),xo=a("div"),F(r0.$$.fragment),iTo=l(),wi=a("p"),dTo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),aN=a("a"),cTo=o("from_pretrained()"),fTo=o(" class method or the "),nN=a("a"),mTo=o("from_config()"),gTo=o(` class
method.`),hTo=l(),t0=a("p"),pTo=o("This class cannot be instantiated directly using "),mle=a("code"),uTo=o("__init__()"),_To=o(" (throws an error)."),bTo=l(),ot=a("div"),F(a0.$$.fragment),vTo=l(),gle=a("p"),FTo=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),TTo=l(),Ai=a("p"),MTo=o(`Note:
Loading a model from its configuration file does `),hle=a("strong"),ETo=o("not"),CTo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sN=a("a"),wTo=o("from_pretrained()"),ATo=o(" to load the model weights."),yTo=l(),F(Q_.$$.fragment),LTo=l(),Ue=a("div"),F(n0.$$.fragment),xTo=l(),ple=a("p"),$To=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),kTo=l(),Aa=a("p"),STo=o("The model class to instantiate is selected based on the "),ule=a("code"),RTo=o("model_type"),BTo=o(` property of the config object (either
passed as an argument or loaded from `),_le=a("code"),PTo=o("pretrained_model_name_or_path"),ITo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ble=a("code"),qTo=o("pretrained_model_name_or_path"),NTo=o(":"),jTo=l(),Q=a("ul"),W_=a("li"),vle=a("strong"),DTo=o("albert"),GTo=o(" \u2014 "),lN=a("a"),OTo=o("AlbertForMaskedLM"),VTo=o(" (ALBERT model)"),XTo=l(),H_=a("li"),Fle=a("strong"),zTo=o("bart"),QTo=o(" \u2014 "),iN=a("a"),WTo=o("BartForConditionalGeneration"),HTo=o(" (BART model)"),UTo=l(),U_=a("li"),Tle=a("strong"),JTo=o("bert"),YTo=o(" \u2014 "),dN=a("a"),KTo=o("BertForMaskedLM"),ZTo=o(" (BERT model)"),eMo=l(),J_=a("li"),Mle=a("strong"),oMo=o("big_bird"),rMo=o(" \u2014 "),cN=a("a"),tMo=o("BigBirdForMaskedLM"),aMo=o(" (BigBird model)"),nMo=l(),Y_=a("li"),Ele=a("strong"),sMo=o("camembert"),lMo=o(" \u2014 "),fN=a("a"),iMo=o("CamembertForMaskedLM"),dMo=o(" (CamemBERT model)"),cMo=l(),K_=a("li"),Cle=a("strong"),fMo=o("convbert"),mMo=o(" \u2014 "),mN=a("a"),gMo=o("ConvBertForMaskedLM"),hMo=o(" (ConvBERT model)"),pMo=l(),Z_=a("li"),wle=a("strong"),uMo=o("data2vec-text"),_Mo=o(" \u2014 "),gN=a("a"),bMo=o("Data2VecTextForMaskedLM"),vMo=o(" (Data2VecText model)"),FMo=l(),e1=a("li"),Ale=a("strong"),TMo=o("deberta"),MMo=o(" \u2014 "),hN=a("a"),EMo=o("DebertaForMaskedLM"),CMo=o(" (DeBERTa model)"),wMo=l(),o1=a("li"),yle=a("strong"),AMo=o("deberta-v2"),yMo=o(" \u2014 "),pN=a("a"),LMo=o("DebertaV2ForMaskedLM"),xMo=o(" (DeBERTa-v2 model)"),$Mo=l(),r1=a("li"),Lle=a("strong"),kMo=o("distilbert"),SMo=o(" \u2014 "),uN=a("a"),RMo=o("DistilBertForMaskedLM"),BMo=o(" (DistilBERT model)"),PMo=l(),t1=a("li"),xle=a("strong"),IMo=o("electra"),qMo=o(" \u2014 "),_N=a("a"),NMo=o("ElectraForMaskedLM"),jMo=o(" (ELECTRA model)"),DMo=l(),a1=a("li"),$le=a("strong"),GMo=o("flaubert"),OMo=o(" \u2014 "),bN=a("a"),VMo=o("FlaubertWithLMHeadModel"),XMo=o(" (FlauBERT model)"),zMo=l(),n1=a("li"),kle=a("strong"),QMo=o("fnet"),WMo=o(" \u2014 "),vN=a("a"),HMo=o("FNetForMaskedLM"),UMo=o(" (FNet model)"),JMo=l(),s1=a("li"),Sle=a("strong"),YMo=o("funnel"),KMo=o(" \u2014 "),FN=a("a"),ZMo=o("FunnelForMaskedLM"),e4o=o(" (Funnel Transformer model)"),o4o=l(),l1=a("li"),Rle=a("strong"),r4o=o("ibert"),t4o=o(" \u2014 "),TN=a("a"),a4o=o("IBertForMaskedLM"),n4o=o(" (I-BERT model)"),s4o=l(),i1=a("li"),Ble=a("strong"),l4o=o("layoutlm"),i4o=o(" \u2014 "),MN=a("a"),d4o=o("LayoutLMForMaskedLM"),c4o=o(" (LayoutLM model)"),f4o=l(),d1=a("li"),Ple=a("strong"),m4o=o("longformer"),g4o=o(" \u2014 "),EN=a("a"),h4o=o("LongformerForMaskedLM"),p4o=o(" (Longformer model)"),u4o=l(),c1=a("li"),Ile=a("strong"),_4o=o("mbart"),b4o=o(" \u2014 "),CN=a("a"),v4o=o("MBartForConditionalGeneration"),F4o=o(" (mBART model)"),T4o=l(),f1=a("li"),qle=a("strong"),M4o=o("megatron-bert"),E4o=o(" \u2014 "),wN=a("a"),C4o=o("MegatronBertForMaskedLM"),w4o=o(" (MegatronBert model)"),A4o=l(),m1=a("li"),Nle=a("strong"),y4o=o("mobilebert"),L4o=o(" \u2014 "),AN=a("a"),x4o=o("MobileBertForMaskedLM"),$4o=o(" (MobileBERT model)"),k4o=l(),g1=a("li"),jle=a("strong"),S4o=o("mpnet"),R4o=o(" \u2014 "),yN=a("a"),B4o=o("MPNetForMaskedLM"),P4o=o(" (MPNet model)"),I4o=l(),h1=a("li"),Dle=a("strong"),q4o=o("nystromformer"),N4o=o(" \u2014 "),LN=a("a"),j4o=o("NystromformerForMaskedLM"),D4o=o(" (Nystromformer model)"),G4o=l(),p1=a("li"),Gle=a("strong"),O4o=o("perceiver"),V4o=o(" \u2014 "),xN=a("a"),X4o=o("PerceiverForMaskedLM"),z4o=o(" (Perceiver model)"),Q4o=l(),u1=a("li"),Ole=a("strong"),W4o=o("qdqbert"),H4o=o(" \u2014 "),$N=a("a"),U4o=o("QDQBertForMaskedLM"),J4o=o(" (QDQBert model)"),Y4o=l(),_1=a("li"),Vle=a("strong"),K4o=o("reformer"),Z4o=o(" \u2014 "),kN=a("a"),eEo=o("ReformerForMaskedLM"),oEo=o(" (Reformer model)"),rEo=l(),b1=a("li"),Xle=a("strong"),tEo=o("rembert"),aEo=o(" \u2014 "),SN=a("a"),nEo=o("RemBertForMaskedLM"),sEo=o(" (RemBERT model)"),lEo=l(),v1=a("li"),zle=a("strong"),iEo=o("roberta"),dEo=o(" \u2014 "),RN=a("a"),cEo=o("RobertaForMaskedLM"),fEo=o(" (RoBERTa model)"),mEo=l(),F1=a("li"),Qle=a("strong"),gEo=o("roformer"),hEo=o(" \u2014 "),BN=a("a"),pEo=o("RoFormerForMaskedLM"),uEo=o(" (RoFormer model)"),_Eo=l(),T1=a("li"),Wle=a("strong"),bEo=o("squeezebert"),vEo=o(" \u2014 "),PN=a("a"),FEo=o("SqueezeBertForMaskedLM"),TEo=o(" (SqueezeBERT model)"),MEo=l(),M1=a("li"),Hle=a("strong"),EEo=o("tapas"),CEo=o(" \u2014 "),IN=a("a"),wEo=o("TapasForMaskedLM"),AEo=o(" (TAPAS model)"),yEo=l(),E1=a("li"),Ule=a("strong"),LEo=o("wav2vec2"),xEo=o(" \u2014 "),Jle=a("code"),$Eo=o("Wav2Vec2ForMaskedLM"),kEo=o(" (Wav2Vec2 model)"),SEo=l(),C1=a("li"),Yle=a("strong"),REo=o("xlm"),BEo=o(" \u2014 "),qN=a("a"),PEo=o("XLMWithLMHeadModel"),IEo=o(" (XLM model)"),qEo=l(),w1=a("li"),Kle=a("strong"),NEo=o("xlm-roberta"),jEo=o(" \u2014 "),NN=a("a"),DEo=o("XLMRobertaForMaskedLM"),GEo=o(" (XLM-RoBERTa model)"),OEo=l(),A1=a("li"),Zle=a("strong"),VEo=o("xlm-roberta-xl"),XEo=o(" \u2014 "),jN=a("a"),zEo=o("XLMRobertaXLForMaskedLM"),QEo=o(" (XLM-RoBERTa-XL model)"),WEo=l(),y1=a("li"),eie=a("strong"),HEo=o("yoso"),UEo=o(" \u2014 "),DN=a("a"),JEo=o("YosoForMaskedLM"),YEo=o(" (YOSO model)"),KEo=l(),L1=a("p"),ZEo=o("The model is set in evaluation mode by default using "),oie=a("code"),eCo=o("model.eval()"),oCo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),rie=a("code"),rCo=o("model.train()"),tCo=l(),F(x1.$$.fragment),KRe=l(),yi=a("h2"),$1=a("a"),tie=a("span"),F(s0.$$.fragment),aCo=l(),aie=a("span"),nCo=o("AutoModelForSeq2SeqLM"),ZRe=l(),$o=a("div"),F(l0.$$.fragment),sCo=l(),Li=a("p"),lCo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),GN=a("a"),iCo=o("from_pretrained()"),dCo=o(" class method or the "),ON=a("a"),cCo=o("from_config()"),fCo=o(` class
method.`),mCo=l(),i0=a("p"),gCo=o("This class cannot be instantiated directly using "),nie=a("code"),hCo=o("__init__()"),pCo=o(" (throws an error)."),uCo=l(),rt=a("div"),F(d0.$$.fragment),_Co=l(),sie=a("p"),bCo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),vCo=l(),xi=a("p"),FCo=o(`Note:
Loading a model from its configuration file does `),lie=a("strong"),TCo=o("not"),MCo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),VN=a("a"),ECo=o("from_pretrained()"),CCo=o(" to load the model weights."),wCo=l(),F(k1.$$.fragment),ACo=l(),Je=a("div"),F(c0.$$.fragment),yCo=l(),iie=a("p"),LCo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),xCo=l(),ya=a("p"),$Co=o("The model class to instantiate is selected based on the "),die=a("code"),kCo=o("model_type"),SCo=o(` property of the config object (either
passed as an argument or loaded from `),cie=a("code"),RCo=o("pretrained_model_name_or_path"),BCo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fie=a("code"),PCo=o("pretrained_model_name_or_path"),ICo=o(":"),qCo=l(),he=a("ul"),S1=a("li"),mie=a("strong"),NCo=o("bart"),jCo=o(" \u2014 "),XN=a("a"),DCo=o("BartForConditionalGeneration"),GCo=o(" (BART model)"),OCo=l(),R1=a("li"),gie=a("strong"),VCo=o("bigbird_pegasus"),XCo=o(" \u2014 "),zN=a("a"),zCo=o("BigBirdPegasusForConditionalGeneration"),QCo=o(" (BigBirdPegasus model)"),WCo=l(),B1=a("li"),hie=a("strong"),HCo=o("blenderbot"),UCo=o(" \u2014 "),QN=a("a"),JCo=o("BlenderbotForConditionalGeneration"),YCo=o(" (Blenderbot model)"),KCo=l(),P1=a("li"),pie=a("strong"),ZCo=o("blenderbot-small"),e3o=o(" \u2014 "),WN=a("a"),o3o=o("BlenderbotSmallForConditionalGeneration"),r3o=o(" (BlenderbotSmall model)"),t3o=l(),I1=a("li"),uie=a("strong"),a3o=o("encoder-decoder"),n3o=o(" \u2014 "),HN=a("a"),s3o=o("EncoderDecoderModel"),l3o=o(" (Encoder decoder model)"),i3o=l(),q1=a("li"),_ie=a("strong"),d3o=o("fsmt"),c3o=o(" \u2014 "),UN=a("a"),f3o=o("FSMTForConditionalGeneration"),m3o=o(" (FairSeq Machine-Translation model)"),g3o=l(),N1=a("li"),bie=a("strong"),h3o=o("led"),p3o=o(" \u2014 "),JN=a("a"),u3o=o("LEDForConditionalGeneration"),_3o=o(" (LED model)"),b3o=l(),j1=a("li"),vie=a("strong"),v3o=o("m2m_100"),F3o=o(" \u2014 "),YN=a("a"),T3o=o("M2M100ForConditionalGeneration"),M3o=o(" (M2M100 model)"),E3o=l(),D1=a("li"),Fie=a("strong"),C3o=o("marian"),w3o=o(" \u2014 "),KN=a("a"),A3o=o("MarianMTModel"),y3o=o(" (Marian model)"),L3o=l(),G1=a("li"),Tie=a("strong"),x3o=o("mbart"),$3o=o(" \u2014 "),ZN=a("a"),k3o=o("MBartForConditionalGeneration"),S3o=o(" (mBART model)"),R3o=l(),O1=a("li"),Mie=a("strong"),B3o=o("mt5"),P3o=o(" \u2014 "),ej=a("a"),I3o=o("MT5ForConditionalGeneration"),q3o=o(" (mT5 model)"),N3o=l(),V1=a("li"),Eie=a("strong"),j3o=o("pegasus"),D3o=o(" \u2014 "),oj=a("a"),G3o=o("PegasusForConditionalGeneration"),O3o=o(" (Pegasus model)"),V3o=l(),X1=a("li"),Cie=a("strong"),X3o=o("plbart"),z3o=o(" \u2014 "),rj=a("a"),Q3o=o("PLBartForConditionalGeneration"),W3o=o(" (PLBart model)"),H3o=l(),z1=a("li"),wie=a("strong"),U3o=o("prophetnet"),J3o=o(" \u2014 "),tj=a("a"),Y3o=o("ProphetNetForConditionalGeneration"),K3o=o(" (ProphetNet model)"),Z3o=l(),Q1=a("li"),Aie=a("strong"),ewo=o("t5"),owo=o(" \u2014 "),aj=a("a"),rwo=o("T5ForConditionalGeneration"),two=o(" (T5 model)"),awo=l(),W1=a("li"),yie=a("strong"),nwo=o("tapex"),swo=o(" \u2014 "),nj=a("a"),lwo=o("BartForConditionalGeneration"),iwo=o(" (TAPEX model)"),dwo=l(),H1=a("li"),Lie=a("strong"),cwo=o("xlm-prophetnet"),fwo=o(" \u2014 "),sj=a("a"),mwo=o("XLMProphetNetForConditionalGeneration"),gwo=o(" (XLMProphetNet model)"),hwo=l(),U1=a("p"),pwo=o("The model is set in evaluation mode by default using "),xie=a("code"),uwo=o("model.eval()"),_wo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$ie=a("code"),bwo=o("model.train()"),vwo=l(),F(J1.$$.fragment),eBe=l(),$i=a("h2"),Y1=a("a"),kie=a("span"),F(f0.$$.fragment),Fwo=l(),Sie=a("span"),Two=o("AutoModelForSequenceClassification"),oBe=l(),ko=a("div"),F(m0.$$.fragment),Mwo=l(),ki=a("p"),Ewo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),lj=a("a"),Cwo=o("from_pretrained()"),wwo=o(" class method or the "),ij=a("a"),Awo=o("from_config()"),ywo=o(` class
method.`),Lwo=l(),g0=a("p"),xwo=o("This class cannot be instantiated directly using "),Rie=a("code"),$wo=o("__init__()"),kwo=o(" (throws an error)."),Swo=l(),tt=a("div"),F(h0.$$.fragment),Rwo=l(),Bie=a("p"),Bwo=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Pwo=l(),Si=a("p"),Iwo=o(`Note:
Loading a model from its configuration file does `),Pie=a("strong"),qwo=o("not"),Nwo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dj=a("a"),jwo=o("from_pretrained()"),Dwo=o(" to load the model weights."),Gwo=l(),F(K1.$$.fragment),Owo=l(),Ye=a("div"),F(p0.$$.fragment),Vwo=l(),Iie=a("p"),Xwo=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),zwo=l(),La=a("p"),Qwo=o("The model class to instantiate is selected based on the "),qie=a("code"),Wwo=o("model_type"),Hwo=o(` property of the config object (either
passed as an argument or loaded from `),Nie=a("code"),Uwo=o("pretrained_model_name_or_path"),Jwo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jie=a("code"),Ywo=o("pretrained_model_name_or_path"),Kwo=o(":"),Zwo=l(),q=a("ul"),Z1=a("li"),Die=a("strong"),eAo=o("albert"),oAo=o(" \u2014 "),cj=a("a"),rAo=o("AlbertForSequenceClassification"),tAo=o(" (ALBERT model)"),aAo=l(),e9=a("li"),Gie=a("strong"),nAo=o("bart"),sAo=o(" \u2014 "),fj=a("a"),lAo=o("BartForSequenceClassification"),iAo=o(" (BART model)"),dAo=l(),o9=a("li"),Oie=a("strong"),cAo=o("bert"),fAo=o(" \u2014 "),mj=a("a"),mAo=o("BertForSequenceClassification"),gAo=o(" (BERT model)"),hAo=l(),r9=a("li"),Vie=a("strong"),pAo=o("big_bird"),uAo=o(" \u2014 "),gj=a("a"),_Ao=o("BigBirdForSequenceClassification"),bAo=o(" (BigBird model)"),vAo=l(),t9=a("li"),Xie=a("strong"),FAo=o("bigbird_pegasus"),TAo=o(" \u2014 "),hj=a("a"),MAo=o("BigBirdPegasusForSequenceClassification"),EAo=o(" (BigBirdPegasus model)"),CAo=l(),a9=a("li"),zie=a("strong"),wAo=o("camembert"),AAo=o(" \u2014 "),pj=a("a"),yAo=o("CamembertForSequenceClassification"),LAo=o(" (CamemBERT model)"),xAo=l(),n9=a("li"),Qie=a("strong"),$Ao=o("canine"),kAo=o(" \u2014 "),uj=a("a"),SAo=o("CanineForSequenceClassification"),RAo=o(" (Canine model)"),BAo=l(),s9=a("li"),Wie=a("strong"),PAo=o("convbert"),IAo=o(" \u2014 "),_j=a("a"),qAo=o("ConvBertForSequenceClassification"),NAo=o(" (ConvBERT model)"),jAo=l(),l9=a("li"),Hie=a("strong"),DAo=o("ctrl"),GAo=o(" \u2014 "),bj=a("a"),OAo=o("CTRLForSequenceClassification"),VAo=o(" (CTRL model)"),XAo=l(),i9=a("li"),Uie=a("strong"),zAo=o("data2vec-text"),QAo=o(" \u2014 "),vj=a("a"),WAo=o("Data2VecTextForSequenceClassification"),HAo=o(" (Data2VecText model)"),UAo=l(),d9=a("li"),Jie=a("strong"),JAo=o("deberta"),YAo=o(" \u2014 "),Fj=a("a"),KAo=o("DebertaForSequenceClassification"),ZAo=o(" (DeBERTa model)"),e0o=l(),c9=a("li"),Yie=a("strong"),o0o=o("deberta-v2"),r0o=o(" \u2014 "),Tj=a("a"),t0o=o("DebertaV2ForSequenceClassification"),a0o=o(" (DeBERTa-v2 model)"),n0o=l(),f9=a("li"),Kie=a("strong"),s0o=o("distilbert"),l0o=o(" \u2014 "),Mj=a("a"),i0o=o("DistilBertForSequenceClassification"),d0o=o(" (DistilBERT model)"),c0o=l(),m9=a("li"),Zie=a("strong"),f0o=o("electra"),m0o=o(" \u2014 "),Ej=a("a"),g0o=o("ElectraForSequenceClassification"),h0o=o(" (ELECTRA model)"),p0o=l(),g9=a("li"),ede=a("strong"),u0o=o("flaubert"),_0o=o(" \u2014 "),Cj=a("a"),b0o=o("FlaubertForSequenceClassification"),v0o=o(" (FlauBERT model)"),F0o=l(),h9=a("li"),ode=a("strong"),T0o=o("fnet"),M0o=o(" \u2014 "),wj=a("a"),E0o=o("FNetForSequenceClassification"),C0o=o(" (FNet model)"),w0o=l(),p9=a("li"),rde=a("strong"),A0o=o("funnel"),y0o=o(" \u2014 "),Aj=a("a"),L0o=o("FunnelForSequenceClassification"),x0o=o(" (Funnel Transformer model)"),$0o=l(),u9=a("li"),tde=a("strong"),k0o=o("gpt2"),S0o=o(" \u2014 "),yj=a("a"),R0o=o("GPT2ForSequenceClassification"),B0o=o(" (OpenAI GPT-2 model)"),P0o=l(),_9=a("li"),ade=a("strong"),I0o=o("gpt_neo"),q0o=o(" \u2014 "),Lj=a("a"),N0o=o("GPTNeoForSequenceClassification"),j0o=o(" (GPT Neo model)"),D0o=l(),b9=a("li"),nde=a("strong"),G0o=o("gptj"),O0o=o(" \u2014 "),xj=a("a"),V0o=o("GPTJForSequenceClassification"),X0o=o(" (GPT-J model)"),z0o=l(),v9=a("li"),sde=a("strong"),Q0o=o("ibert"),W0o=o(" \u2014 "),$j=a("a"),H0o=o("IBertForSequenceClassification"),U0o=o(" (I-BERT model)"),J0o=l(),F9=a("li"),lde=a("strong"),Y0o=o("layoutlm"),K0o=o(" \u2014 "),kj=a("a"),Z0o=o("LayoutLMForSequenceClassification"),eyo=o(" (LayoutLM model)"),oyo=l(),T9=a("li"),ide=a("strong"),ryo=o("layoutlmv2"),tyo=o(" \u2014 "),Sj=a("a"),ayo=o("LayoutLMv2ForSequenceClassification"),nyo=o(" (LayoutLMv2 model)"),syo=l(),M9=a("li"),dde=a("strong"),lyo=o("led"),iyo=o(" \u2014 "),Rj=a("a"),dyo=o("LEDForSequenceClassification"),cyo=o(" (LED model)"),fyo=l(),E9=a("li"),cde=a("strong"),myo=o("longformer"),gyo=o(" \u2014 "),Bj=a("a"),hyo=o("LongformerForSequenceClassification"),pyo=o(" (Longformer model)"),uyo=l(),C9=a("li"),fde=a("strong"),_yo=o("mbart"),byo=o(" \u2014 "),Pj=a("a"),vyo=o("MBartForSequenceClassification"),Fyo=o(" (mBART model)"),Tyo=l(),w9=a("li"),mde=a("strong"),Myo=o("megatron-bert"),Eyo=o(" \u2014 "),Ij=a("a"),Cyo=o("MegatronBertForSequenceClassification"),wyo=o(" (MegatronBert model)"),Ayo=l(),A9=a("li"),gde=a("strong"),yyo=o("mobilebert"),Lyo=o(" \u2014 "),qj=a("a"),xyo=o("MobileBertForSequenceClassification"),$yo=o(" (MobileBERT model)"),kyo=l(),y9=a("li"),hde=a("strong"),Syo=o("mpnet"),Ryo=o(" \u2014 "),Nj=a("a"),Byo=o("MPNetForSequenceClassification"),Pyo=o(" (MPNet model)"),Iyo=l(),L9=a("li"),pde=a("strong"),qyo=o("nystromformer"),Nyo=o(" \u2014 "),jj=a("a"),jyo=o("NystromformerForSequenceClassification"),Dyo=o(" (Nystromformer model)"),Gyo=l(),x9=a("li"),ude=a("strong"),Oyo=o("openai-gpt"),Vyo=o(" \u2014 "),Dj=a("a"),Xyo=o("OpenAIGPTForSequenceClassification"),zyo=o(" (OpenAI GPT model)"),Qyo=l(),$9=a("li"),_de=a("strong"),Wyo=o("perceiver"),Hyo=o(" \u2014 "),Gj=a("a"),Uyo=o("PerceiverForSequenceClassification"),Jyo=o(" (Perceiver model)"),Yyo=l(),k9=a("li"),bde=a("strong"),Kyo=o("plbart"),Zyo=o(" \u2014 "),Oj=a("a"),eLo=o("PLBartForSequenceClassification"),oLo=o(" (PLBart model)"),rLo=l(),S9=a("li"),vde=a("strong"),tLo=o("qdqbert"),aLo=o(" \u2014 "),Vj=a("a"),nLo=o("QDQBertForSequenceClassification"),sLo=o(" (QDQBert model)"),lLo=l(),R9=a("li"),Fde=a("strong"),iLo=o("reformer"),dLo=o(" \u2014 "),Xj=a("a"),cLo=o("ReformerForSequenceClassification"),fLo=o(" (Reformer model)"),mLo=l(),B9=a("li"),Tde=a("strong"),gLo=o("rembert"),hLo=o(" \u2014 "),zj=a("a"),pLo=o("RemBertForSequenceClassification"),uLo=o(" (RemBERT model)"),_Lo=l(),P9=a("li"),Mde=a("strong"),bLo=o("roberta"),vLo=o(" \u2014 "),Qj=a("a"),FLo=o("RobertaForSequenceClassification"),TLo=o(" (RoBERTa model)"),MLo=l(),I9=a("li"),Ede=a("strong"),ELo=o("roformer"),CLo=o(" \u2014 "),Wj=a("a"),wLo=o("RoFormerForSequenceClassification"),ALo=o(" (RoFormer model)"),yLo=l(),q9=a("li"),Cde=a("strong"),LLo=o("squeezebert"),xLo=o(" \u2014 "),Hj=a("a"),$Lo=o("SqueezeBertForSequenceClassification"),kLo=o(" (SqueezeBERT model)"),SLo=l(),N9=a("li"),wde=a("strong"),RLo=o("tapas"),BLo=o(" \u2014 "),Uj=a("a"),PLo=o("TapasForSequenceClassification"),ILo=o(" (TAPAS model)"),qLo=l(),j9=a("li"),Ade=a("strong"),NLo=o("tapex"),jLo=o(" \u2014 "),Jj=a("a"),DLo=o("BartForSequenceClassification"),GLo=o(" (TAPEX model)"),OLo=l(),D9=a("li"),yde=a("strong"),VLo=o("transfo-xl"),XLo=o(" \u2014 "),Yj=a("a"),zLo=o("TransfoXLForSequenceClassification"),QLo=o(" (Transformer-XL model)"),WLo=l(),G9=a("li"),Lde=a("strong"),HLo=o("xlm"),ULo=o(" \u2014 "),Kj=a("a"),JLo=o("XLMForSequenceClassification"),YLo=o(" (XLM model)"),KLo=l(),O9=a("li"),xde=a("strong"),ZLo=o("xlm-roberta"),e8o=o(" \u2014 "),Zj=a("a"),o8o=o("XLMRobertaForSequenceClassification"),r8o=o(" (XLM-RoBERTa model)"),t8o=l(),V9=a("li"),$de=a("strong"),a8o=o("xlm-roberta-xl"),n8o=o(" \u2014 "),eD=a("a"),s8o=o("XLMRobertaXLForSequenceClassification"),l8o=o(" (XLM-RoBERTa-XL model)"),i8o=l(),X9=a("li"),kde=a("strong"),d8o=o("xlnet"),c8o=o(" \u2014 "),oD=a("a"),f8o=o("XLNetForSequenceClassification"),m8o=o(" (XLNet model)"),g8o=l(),z9=a("li"),Sde=a("strong"),h8o=o("yoso"),p8o=o(" \u2014 "),rD=a("a"),u8o=o("YosoForSequenceClassification"),_8o=o(" (YOSO model)"),b8o=l(),Q9=a("p"),v8o=o("The model is set in evaluation mode by default using "),Rde=a("code"),F8o=o("model.eval()"),T8o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Bde=a("code"),M8o=o("model.train()"),E8o=l(),F(W9.$$.fragment),rBe=l(),Ri=a("h2"),H9=a("a"),Pde=a("span"),F(u0.$$.fragment),C8o=l(),Ide=a("span"),w8o=o("AutoModelForMultipleChoice"),tBe=l(),So=a("div"),F(_0.$$.fragment),A8o=l(),Bi=a("p"),y8o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),tD=a("a"),L8o=o("from_pretrained()"),x8o=o(" class method or the "),aD=a("a"),$8o=o("from_config()"),k8o=o(` class
method.`),S8o=l(),b0=a("p"),R8o=o("This class cannot be instantiated directly using "),qde=a("code"),B8o=o("__init__()"),P8o=o(" (throws an error)."),I8o=l(),at=a("div"),F(v0.$$.fragment),q8o=l(),Nde=a("p"),N8o=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),j8o=l(),Pi=a("p"),D8o=o(`Note:
Loading a model from its configuration file does `),jde=a("strong"),G8o=o("not"),O8o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nD=a("a"),V8o=o("from_pretrained()"),X8o=o(" to load the model weights."),z8o=l(),F(U9.$$.fragment),Q8o=l(),Ke=a("div"),F(F0.$$.fragment),W8o=l(),Dde=a("p"),H8o=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),U8o=l(),xa=a("p"),J8o=o("The model class to instantiate is selected based on the "),Gde=a("code"),Y8o=o("model_type"),K8o=o(` property of the config object (either
passed as an argument or loaded from `),Ode=a("code"),Z8o=o("pretrained_model_name_or_path"),e7o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vde=a("code"),o7o=o("pretrained_model_name_or_path"),r7o=o(":"),t7o=l(),Y=a("ul"),J9=a("li"),Xde=a("strong"),a7o=o("albert"),n7o=o(" \u2014 "),sD=a("a"),s7o=o("AlbertForMultipleChoice"),l7o=o(" (ALBERT model)"),i7o=l(),Y9=a("li"),zde=a("strong"),d7o=o("bert"),c7o=o(" \u2014 "),lD=a("a"),f7o=o("BertForMultipleChoice"),m7o=o(" (BERT model)"),g7o=l(),K9=a("li"),Qde=a("strong"),h7o=o("big_bird"),p7o=o(" \u2014 "),iD=a("a"),u7o=o("BigBirdForMultipleChoice"),_7o=o(" (BigBird model)"),b7o=l(),Z9=a("li"),Wde=a("strong"),v7o=o("camembert"),F7o=o(" \u2014 "),dD=a("a"),T7o=o("CamembertForMultipleChoice"),M7o=o(" (CamemBERT model)"),E7o=l(),eb=a("li"),Hde=a("strong"),C7o=o("canine"),w7o=o(" \u2014 "),cD=a("a"),A7o=o("CanineForMultipleChoice"),y7o=o(" (Canine model)"),L7o=l(),ob=a("li"),Ude=a("strong"),x7o=o("convbert"),$7o=o(" \u2014 "),fD=a("a"),k7o=o("ConvBertForMultipleChoice"),S7o=o(" (ConvBERT model)"),R7o=l(),rb=a("li"),Jde=a("strong"),B7o=o("data2vec-text"),P7o=o(" \u2014 "),mD=a("a"),I7o=o("Data2VecTextForMultipleChoice"),q7o=o(" (Data2VecText model)"),N7o=l(),tb=a("li"),Yde=a("strong"),j7o=o("distilbert"),D7o=o(" \u2014 "),gD=a("a"),G7o=o("DistilBertForMultipleChoice"),O7o=o(" (DistilBERT model)"),V7o=l(),ab=a("li"),Kde=a("strong"),X7o=o("electra"),z7o=o(" \u2014 "),hD=a("a"),Q7o=o("ElectraForMultipleChoice"),W7o=o(" (ELECTRA model)"),H7o=l(),nb=a("li"),Zde=a("strong"),U7o=o("flaubert"),J7o=o(" \u2014 "),pD=a("a"),Y7o=o("FlaubertForMultipleChoice"),K7o=o(" (FlauBERT model)"),Z7o=l(),sb=a("li"),ece=a("strong"),exo=o("fnet"),oxo=o(" \u2014 "),uD=a("a"),rxo=o("FNetForMultipleChoice"),txo=o(" (FNet model)"),axo=l(),lb=a("li"),oce=a("strong"),nxo=o("funnel"),sxo=o(" \u2014 "),_D=a("a"),lxo=o("FunnelForMultipleChoice"),ixo=o(" (Funnel Transformer model)"),dxo=l(),ib=a("li"),rce=a("strong"),cxo=o("ibert"),fxo=o(" \u2014 "),bD=a("a"),mxo=o("IBertForMultipleChoice"),gxo=o(" (I-BERT model)"),hxo=l(),db=a("li"),tce=a("strong"),pxo=o("longformer"),uxo=o(" \u2014 "),vD=a("a"),_xo=o("LongformerForMultipleChoice"),bxo=o(" (Longformer model)"),vxo=l(),cb=a("li"),ace=a("strong"),Fxo=o("megatron-bert"),Txo=o(" \u2014 "),FD=a("a"),Mxo=o("MegatronBertForMultipleChoice"),Exo=o(" (MegatronBert model)"),Cxo=l(),fb=a("li"),nce=a("strong"),wxo=o("mobilebert"),Axo=o(" \u2014 "),TD=a("a"),yxo=o("MobileBertForMultipleChoice"),Lxo=o(" (MobileBERT model)"),xxo=l(),mb=a("li"),sce=a("strong"),$xo=o("mpnet"),kxo=o(" \u2014 "),MD=a("a"),Sxo=o("MPNetForMultipleChoice"),Rxo=o(" (MPNet model)"),Bxo=l(),gb=a("li"),lce=a("strong"),Pxo=o("nystromformer"),Ixo=o(" \u2014 "),ED=a("a"),qxo=o("NystromformerForMultipleChoice"),Nxo=o(" (Nystromformer model)"),jxo=l(),hb=a("li"),ice=a("strong"),Dxo=o("qdqbert"),Gxo=o(" \u2014 "),CD=a("a"),Oxo=o("QDQBertForMultipleChoice"),Vxo=o(" (QDQBert model)"),Xxo=l(),pb=a("li"),dce=a("strong"),zxo=o("rembert"),Qxo=o(" \u2014 "),wD=a("a"),Wxo=o("RemBertForMultipleChoice"),Hxo=o(" (RemBERT model)"),Uxo=l(),ub=a("li"),cce=a("strong"),Jxo=o("roberta"),Yxo=o(" \u2014 "),AD=a("a"),Kxo=o("RobertaForMultipleChoice"),Zxo=o(" (RoBERTa model)"),e$o=l(),_b=a("li"),fce=a("strong"),o$o=o("roformer"),r$o=o(" \u2014 "),yD=a("a"),t$o=o("RoFormerForMultipleChoice"),a$o=o(" (RoFormer model)"),n$o=l(),bb=a("li"),mce=a("strong"),s$o=o("squeezebert"),l$o=o(" \u2014 "),LD=a("a"),i$o=o("SqueezeBertForMultipleChoice"),d$o=o(" (SqueezeBERT model)"),c$o=l(),vb=a("li"),gce=a("strong"),f$o=o("xlm"),m$o=o(" \u2014 "),xD=a("a"),g$o=o("XLMForMultipleChoice"),h$o=o(" (XLM model)"),p$o=l(),Fb=a("li"),hce=a("strong"),u$o=o("xlm-roberta"),_$o=o(" \u2014 "),$D=a("a"),b$o=o("XLMRobertaForMultipleChoice"),v$o=o(" (XLM-RoBERTa model)"),F$o=l(),Tb=a("li"),pce=a("strong"),T$o=o("xlm-roberta-xl"),M$o=o(" \u2014 "),kD=a("a"),E$o=o("XLMRobertaXLForMultipleChoice"),C$o=o(" (XLM-RoBERTa-XL model)"),w$o=l(),Mb=a("li"),uce=a("strong"),A$o=o("xlnet"),y$o=o(" \u2014 "),SD=a("a"),L$o=o("XLNetForMultipleChoice"),x$o=o(" (XLNet model)"),$$o=l(),Eb=a("li"),_ce=a("strong"),k$o=o("yoso"),S$o=o(" \u2014 "),RD=a("a"),R$o=o("YosoForMultipleChoice"),B$o=o(" (YOSO model)"),P$o=l(),Cb=a("p"),I$o=o("The model is set in evaluation mode by default using "),bce=a("code"),q$o=o("model.eval()"),N$o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vce=a("code"),j$o=o("model.train()"),D$o=l(),F(wb.$$.fragment),aBe=l(),Ii=a("h2"),Ab=a("a"),Fce=a("span"),F(T0.$$.fragment),G$o=l(),Tce=a("span"),O$o=o("AutoModelForNextSentencePrediction"),nBe=l(),Ro=a("div"),F(M0.$$.fragment),V$o=l(),qi=a("p"),X$o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),BD=a("a"),z$o=o("from_pretrained()"),Q$o=o(" class method or the "),PD=a("a"),W$o=o("from_config()"),H$o=o(` class
method.`),U$o=l(),E0=a("p"),J$o=o("This class cannot be instantiated directly using "),Mce=a("code"),Y$o=o("__init__()"),K$o=o(" (throws an error)."),Z$o=l(),nt=a("div"),F(C0.$$.fragment),eko=l(),Ece=a("p"),oko=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),rko=l(),Ni=a("p"),tko=o(`Note:
Loading a model from its configuration file does `),Cce=a("strong"),ako=o("not"),nko=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ID=a("a"),sko=o("from_pretrained()"),lko=o(" to load the model weights."),iko=l(),F(yb.$$.fragment),dko=l(),Ze=a("div"),F(w0.$$.fragment),cko=l(),wce=a("p"),fko=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),mko=l(),$a=a("p"),gko=o("The model class to instantiate is selected based on the "),Ace=a("code"),hko=o("model_type"),pko=o(` property of the config object (either
passed as an argument or loaded from `),yce=a("code"),uko=o("pretrained_model_name_or_path"),_ko=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lce=a("code"),bko=o("pretrained_model_name_or_path"),vko=o(":"),Fko=l(),Hr=a("ul"),Lb=a("li"),xce=a("strong"),Tko=o("bert"),Mko=o(" \u2014 "),qD=a("a"),Eko=o("BertForNextSentencePrediction"),Cko=o(" (BERT model)"),wko=l(),xb=a("li"),$ce=a("strong"),Ako=o("fnet"),yko=o(" \u2014 "),ND=a("a"),Lko=o("FNetForNextSentencePrediction"),xko=o(" (FNet model)"),$ko=l(),$b=a("li"),kce=a("strong"),kko=o("megatron-bert"),Sko=o(" \u2014 "),jD=a("a"),Rko=o("MegatronBertForNextSentencePrediction"),Bko=o(" (MegatronBert model)"),Pko=l(),kb=a("li"),Sce=a("strong"),Iko=o("mobilebert"),qko=o(" \u2014 "),DD=a("a"),Nko=o("MobileBertForNextSentencePrediction"),jko=o(" (MobileBERT model)"),Dko=l(),Sb=a("li"),Rce=a("strong"),Gko=o("qdqbert"),Oko=o(" \u2014 "),GD=a("a"),Vko=o("QDQBertForNextSentencePrediction"),Xko=o(" (QDQBert model)"),zko=l(),Rb=a("p"),Qko=o("The model is set in evaluation mode by default using "),Bce=a("code"),Wko=o("model.eval()"),Hko=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Pce=a("code"),Uko=o("model.train()"),Jko=l(),F(Bb.$$.fragment),sBe=l(),ji=a("h2"),Pb=a("a"),Ice=a("span"),F(A0.$$.fragment),Yko=l(),qce=a("span"),Kko=o("AutoModelForTokenClassification"),lBe=l(),Bo=a("div"),F(y0.$$.fragment),Zko=l(),Di=a("p"),eSo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),OD=a("a"),oSo=o("from_pretrained()"),rSo=o(" class method or the "),VD=a("a"),tSo=o("from_config()"),aSo=o(` class
method.`),nSo=l(),L0=a("p"),sSo=o("This class cannot be instantiated directly using "),Nce=a("code"),lSo=o("__init__()"),iSo=o(" (throws an error)."),dSo=l(),st=a("div"),F(x0.$$.fragment),cSo=l(),jce=a("p"),fSo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),mSo=l(),Gi=a("p"),gSo=o(`Note:
Loading a model from its configuration file does `),Dce=a("strong"),hSo=o("not"),pSo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),XD=a("a"),uSo=o("from_pretrained()"),_So=o(" to load the model weights."),bSo=l(),F(Ib.$$.fragment),vSo=l(),eo=a("div"),F($0.$$.fragment),FSo=l(),Gce=a("p"),TSo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),MSo=l(),ka=a("p"),ESo=o("The model class to instantiate is selected based on the "),Oce=a("code"),CSo=o("model_type"),wSo=o(` property of the config object (either
passed as an argument or loaded from `),Vce=a("code"),ASo=o("pretrained_model_name_or_path"),ySo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xce=a("code"),LSo=o("pretrained_model_name_or_path"),xSo=o(":"),$So=l(),U=a("ul"),qb=a("li"),zce=a("strong"),kSo=o("albert"),SSo=o(" \u2014 "),zD=a("a"),RSo=o("AlbertForTokenClassification"),BSo=o(" (ALBERT model)"),PSo=l(),Nb=a("li"),Qce=a("strong"),ISo=o("bert"),qSo=o(" \u2014 "),QD=a("a"),NSo=o("BertForTokenClassification"),jSo=o(" (BERT model)"),DSo=l(),jb=a("li"),Wce=a("strong"),GSo=o("big_bird"),OSo=o(" \u2014 "),WD=a("a"),VSo=o("BigBirdForTokenClassification"),XSo=o(" (BigBird model)"),zSo=l(),Db=a("li"),Hce=a("strong"),QSo=o("camembert"),WSo=o(" \u2014 "),HD=a("a"),HSo=o("CamembertForTokenClassification"),USo=o(" (CamemBERT model)"),JSo=l(),Gb=a("li"),Uce=a("strong"),YSo=o("canine"),KSo=o(" \u2014 "),UD=a("a"),ZSo=o("CanineForTokenClassification"),eRo=o(" (Canine model)"),oRo=l(),Ob=a("li"),Jce=a("strong"),rRo=o("convbert"),tRo=o(" \u2014 "),JD=a("a"),aRo=o("ConvBertForTokenClassification"),nRo=o(" (ConvBERT model)"),sRo=l(),Vb=a("li"),Yce=a("strong"),lRo=o("data2vec-text"),iRo=o(" \u2014 "),YD=a("a"),dRo=o("Data2VecTextForTokenClassification"),cRo=o(" (Data2VecText model)"),fRo=l(),Xb=a("li"),Kce=a("strong"),mRo=o("deberta"),gRo=o(" \u2014 "),KD=a("a"),hRo=o("DebertaForTokenClassification"),pRo=o(" (DeBERTa model)"),uRo=l(),zb=a("li"),Zce=a("strong"),_Ro=o("deberta-v2"),bRo=o(" \u2014 "),ZD=a("a"),vRo=o("DebertaV2ForTokenClassification"),FRo=o(" (DeBERTa-v2 model)"),TRo=l(),Qb=a("li"),efe=a("strong"),MRo=o("distilbert"),ERo=o(" \u2014 "),eG=a("a"),CRo=o("DistilBertForTokenClassification"),wRo=o(" (DistilBERT model)"),ARo=l(),Wb=a("li"),ofe=a("strong"),yRo=o("electra"),LRo=o(" \u2014 "),oG=a("a"),xRo=o("ElectraForTokenClassification"),$Ro=o(" (ELECTRA model)"),kRo=l(),Hb=a("li"),rfe=a("strong"),SRo=o("flaubert"),RRo=o(" \u2014 "),rG=a("a"),BRo=o("FlaubertForTokenClassification"),PRo=o(" (FlauBERT model)"),IRo=l(),Ub=a("li"),tfe=a("strong"),qRo=o("fnet"),NRo=o(" \u2014 "),tG=a("a"),jRo=o("FNetForTokenClassification"),DRo=o(" (FNet model)"),GRo=l(),Jb=a("li"),afe=a("strong"),ORo=o("funnel"),VRo=o(" \u2014 "),aG=a("a"),XRo=o("FunnelForTokenClassification"),zRo=o(" (Funnel Transformer model)"),QRo=l(),Yb=a("li"),nfe=a("strong"),WRo=o("gpt2"),HRo=o(" \u2014 "),nG=a("a"),URo=o("GPT2ForTokenClassification"),JRo=o(" (OpenAI GPT-2 model)"),YRo=l(),Kb=a("li"),sfe=a("strong"),KRo=o("ibert"),ZRo=o(" \u2014 "),sG=a("a"),eBo=o("IBertForTokenClassification"),oBo=o(" (I-BERT model)"),rBo=l(),Zb=a("li"),lfe=a("strong"),tBo=o("layoutlm"),aBo=o(" \u2014 "),lG=a("a"),nBo=o("LayoutLMForTokenClassification"),sBo=o(" (LayoutLM model)"),lBo=l(),e2=a("li"),ife=a("strong"),iBo=o("layoutlmv2"),dBo=o(" \u2014 "),iG=a("a"),cBo=o("LayoutLMv2ForTokenClassification"),fBo=o(" (LayoutLMv2 model)"),mBo=l(),o2=a("li"),dfe=a("strong"),gBo=o("longformer"),hBo=o(" \u2014 "),dG=a("a"),pBo=o("LongformerForTokenClassification"),uBo=o(" (Longformer model)"),_Bo=l(),r2=a("li"),cfe=a("strong"),bBo=o("megatron-bert"),vBo=o(" \u2014 "),cG=a("a"),FBo=o("MegatronBertForTokenClassification"),TBo=o(" (MegatronBert model)"),MBo=l(),t2=a("li"),ffe=a("strong"),EBo=o("mobilebert"),CBo=o(" \u2014 "),fG=a("a"),wBo=o("MobileBertForTokenClassification"),ABo=o(" (MobileBERT model)"),yBo=l(),a2=a("li"),mfe=a("strong"),LBo=o("mpnet"),xBo=o(" \u2014 "),mG=a("a"),$Bo=o("MPNetForTokenClassification"),kBo=o(" (MPNet model)"),SBo=l(),n2=a("li"),gfe=a("strong"),RBo=o("nystromformer"),BBo=o(" \u2014 "),gG=a("a"),PBo=o("NystromformerForTokenClassification"),IBo=o(" (Nystromformer model)"),qBo=l(),s2=a("li"),hfe=a("strong"),NBo=o("qdqbert"),jBo=o(" \u2014 "),hG=a("a"),DBo=o("QDQBertForTokenClassification"),GBo=o(" (QDQBert model)"),OBo=l(),l2=a("li"),pfe=a("strong"),VBo=o("rembert"),XBo=o(" \u2014 "),pG=a("a"),zBo=o("RemBertForTokenClassification"),QBo=o(" (RemBERT model)"),WBo=l(),i2=a("li"),ufe=a("strong"),HBo=o("roberta"),UBo=o(" \u2014 "),uG=a("a"),JBo=o("RobertaForTokenClassification"),YBo=o(" (RoBERTa model)"),KBo=l(),d2=a("li"),_fe=a("strong"),ZBo=o("roformer"),ePo=o(" \u2014 "),_G=a("a"),oPo=o("RoFormerForTokenClassification"),rPo=o(" (RoFormer model)"),tPo=l(),c2=a("li"),bfe=a("strong"),aPo=o("squeezebert"),nPo=o(" \u2014 "),bG=a("a"),sPo=o("SqueezeBertForTokenClassification"),lPo=o(" (SqueezeBERT model)"),iPo=l(),f2=a("li"),vfe=a("strong"),dPo=o("xlm"),cPo=o(" \u2014 "),vG=a("a"),fPo=o("XLMForTokenClassification"),mPo=o(" (XLM model)"),gPo=l(),m2=a("li"),Ffe=a("strong"),hPo=o("xlm-roberta"),pPo=o(" \u2014 "),FG=a("a"),uPo=o("XLMRobertaForTokenClassification"),_Po=o(" (XLM-RoBERTa model)"),bPo=l(),g2=a("li"),Tfe=a("strong"),vPo=o("xlm-roberta-xl"),FPo=o(" \u2014 "),TG=a("a"),TPo=o("XLMRobertaXLForTokenClassification"),MPo=o(" (XLM-RoBERTa-XL model)"),EPo=l(),h2=a("li"),Mfe=a("strong"),CPo=o("xlnet"),wPo=o(" \u2014 "),MG=a("a"),APo=o("XLNetForTokenClassification"),yPo=o(" (XLNet model)"),LPo=l(),p2=a("li"),Efe=a("strong"),xPo=o("yoso"),$Po=o(" \u2014 "),EG=a("a"),kPo=o("YosoForTokenClassification"),SPo=o(" (YOSO model)"),RPo=l(),u2=a("p"),BPo=o("The model is set in evaluation mode by default using "),Cfe=a("code"),PPo=o("model.eval()"),IPo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),wfe=a("code"),qPo=o("model.train()"),NPo=l(),F(_2.$$.fragment),iBe=l(),Oi=a("h2"),b2=a("a"),Afe=a("span"),F(k0.$$.fragment),jPo=l(),yfe=a("span"),DPo=o("AutoModelForQuestionAnswering"),dBe=l(),Po=a("div"),F(S0.$$.fragment),GPo=l(),Vi=a("p"),OPo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),CG=a("a"),VPo=o("from_pretrained()"),XPo=o(" class method or the "),wG=a("a"),zPo=o("from_config()"),QPo=o(` class
method.`),WPo=l(),R0=a("p"),HPo=o("This class cannot be instantiated directly using "),Lfe=a("code"),UPo=o("__init__()"),JPo=o(" (throws an error)."),YPo=l(),lt=a("div"),F(B0.$$.fragment),KPo=l(),xfe=a("p"),ZPo=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),eIo=l(),Xi=a("p"),oIo=o(`Note:
Loading a model from its configuration file does `),$fe=a("strong"),rIo=o("not"),tIo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),AG=a("a"),aIo=o("from_pretrained()"),nIo=o(" to load the model weights."),sIo=l(),F(v2.$$.fragment),lIo=l(),oo=a("div"),F(P0.$$.fragment),iIo=l(),kfe=a("p"),dIo=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),cIo=l(),Sa=a("p"),fIo=o("The model class to instantiate is selected based on the "),Sfe=a("code"),mIo=o("model_type"),gIo=o(` property of the config object (either
passed as an argument or loaded from `),Rfe=a("code"),hIo=o("pretrained_model_name_or_path"),pIo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bfe=a("code"),uIo=o("pretrained_model_name_or_path"),_Io=o(":"),bIo=l(),O=a("ul"),F2=a("li"),Pfe=a("strong"),vIo=o("albert"),FIo=o(" \u2014 "),yG=a("a"),TIo=o("AlbertForQuestionAnswering"),MIo=o(" (ALBERT model)"),EIo=l(),T2=a("li"),Ife=a("strong"),CIo=o("bart"),wIo=o(" \u2014 "),LG=a("a"),AIo=o("BartForQuestionAnswering"),yIo=o(" (BART model)"),LIo=l(),M2=a("li"),qfe=a("strong"),xIo=o("bert"),$Io=o(" \u2014 "),xG=a("a"),kIo=o("BertForQuestionAnswering"),SIo=o(" (BERT model)"),RIo=l(),E2=a("li"),Nfe=a("strong"),BIo=o("big_bird"),PIo=o(" \u2014 "),$G=a("a"),IIo=o("BigBirdForQuestionAnswering"),qIo=o(" (BigBird model)"),NIo=l(),C2=a("li"),jfe=a("strong"),jIo=o("bigbird_pegasus"),DIo=o(" \u2014 "),kG=a("a"),GIo=o("BigBirdPegasusForQuestionAnswering"),OIo=o(" (BigBirdPegasus model)"),VIo=l(),w2=a("li"),Dfe=a("strong"),XIo=o("camembert"),zIo=o(" \u2014 "),SG=a("a"),QIo=o("CamembertForQuestionAnswering"),WIo=o(" (CamemBERT model)"),HIo=l(),A2=a("li"),Gfe=a("strong"),UIo=o("canine"),JIo=o(" \u2014 "),RG=a("a"),YIo=o("CanineForQuestionAnswering"),KIo=o(" (Canine model)"),ZIo=l(),y2=a("li"),Ofe=a("strong"),eqo=o("convbert"),oqo=o(" \u2014 "),BG=a("a"),rqo=o("ConvBertForQuestionAnswering"),tqo=o(" (ConvBERT model)"),aqo=l(),L2=a("li"),Vfe=a("strong"),nqo=o("data2vec-text"),sqo=o(" \u2014 "),PG=a("a"),lqo=o("Data2VecTextForQuestionAnswering"),iqo=o(" (Data2VecText model)"),dqo=l(),x2=a("li"),Xfe=a("strong"),cqo=o("deberta"),fqo=o(" \u2014 "),IG=a("a"),mqo=o("DebertaForQuestionAnswering"),gqo=o(" (DeBERTa model)"),hqo=l(),$2=a("li"),zfe=a("strong"),pqo=o("deberta-v2"),uqo=o(" \u2014 "),qG=a("a"),_qo=o("DebertaV2ForQuestionAnswering"),bqo=o(" (DeBERTa-v2 model)"),vqo=l(),k2=a("li"),Qfe=a("strong"),Fqo=o("distilbert"),Tqo=o(" \u2014 "),NG=a("a"),Mqo=o("DistilBertForQuestionAnswering"),Eqo=o(" (DistilBERT model)"),Cqo=l(),S2=a("li"),Wfe=a("strong"),wqo=o("electra"),Aqo=o(" \u2014 "),jG=a("a"),yqo=o("ElectraForQuestionAnswering"),Lqo=o(" (ELECTRA model)"),xqo=l(),R2=a("li"),Hfe=a("strong"),$qo=o("flaubert"),kqo=o(" \u2014 "),DG=a("a"),Sqo=o("FlaubertForQuestionAnsweringSimple"),Rqo=o(" (FlauBERT model)"),Bqo=l(),B2=a("li"),Ufe=a("strong"),Pqo=o("fnet"),Iqo=o(" \u2014 "),GG=a("a"),qqo=o("FNetForQuestionAnswering"),Nqo=o(" (FNet model)"),jqo=l(),P2=a("li"),Jfe=a("strong"),Dqo=o("funnel"),Gqo=o(" \u2014 "),OG=a("a"),Oqo=o("FunnelForQuestionAnswering"),Vqo=o(" (Funnel Transformer model)"),Xqo=l(),I2=a("li"),Yfe=a("strong"),zqo=o("gptj"),Qqo=o(" \u2014 "),VG=a("a"),Wqo=o("GPTJForQuestionAnswering"),Hqo=o(" (GPT-J model)"),Uqo=l(),q2=a("li"),Kfe=a("strong"),Jqo=o("ibert"),Yqo=o(" \u2014 "),XG=a("a"),Kqo=o("IBertForQuestionAnswering"),Zqo=o(" (I-BERT model)"),eNo=l(),N2=a("li"),Zfe=a("strong"),oNo=o("layoutlmv2"),rNo=o(" \u2014 "),zG=a("a"),tNo=o("LayoutLMv2ForQuestionAnswering"),aNo=o(" (LayoutLMv2 model)"),nNo=l(),j2=a("li"),eme=a("strong"),sNo=o("led"),lNo=o(" \u2014 "),QG=a("a"),iNo=o("LEDForQuestionAnswering"),dNo=o(" (LED model)"),cNo=l(),D2=a("li"),ome=a("strong"),fNo=o("longformer"),mNo=o(" \u2014 "),WG=a("a"),gNo=o("LongformerForQuestionAnswering"),hNo=o(" (Longformer model)"),pNo=l(),G2=a("li"),rme=a("strong"),uNo=o("lxmert"),_No=o(" \u2014 "),HG=a("a"),bNo=o("LxmertForQuestionAnswering"),vNo=o(" (LXMERT model)"),FNo=l(),O2=a("li"),tme=a("strong"),TNo=o("mbart"),MNo=o(" \u2014 "),UG=a("a"),ENo=o("MBartForQuestionAnswering"),CNo=o(" (mBART model)"),wNo=l(),V2=a("li"),ame=a("strong"),ANo=o("megatron-bert"),yNo=o(" \u2014 "),JG=a("a"),LNo=o("MegatronBertForQuestionAnswering"),xNo=o(" (MegatronBert model)"),$No=l(),X2=a("li"),nme=a("strong"),kNo=o("mobilebert"),SNo=o(" \u2014 "),YG=a("a"),RNo=o("MobileBertForQuestionAnswering"),BNo=o(" (MobileBERT model)"),PNo=l(),z2=a("li"),sme=a("strong"),INo=o("mpnet"),qNo=o(" \u2014 "),KG=a("a"),NNo=o("MPNetForQuestionAnswering"),jNo=o(" (MPNet model)"),DNo=l(),Q2=a("li"),lme=a("strong"),GNo=o("nystromformer"),ONo=o(" \u2014 "),ZG=a("a"),VNo=o("NystromformerForQuestionAnswering"),XNo=o(" (Nystromformer model)"),zNo=l(),W2=a("li"),ime=a("strong"),QNo=o("qdqbert"),WNo=o(" \u2014 "),eO=a("a"),HNo=o("QDQBertForQuestionAnswering"),UNo=o(" (QDQBert model)"),JNo=l(),H2=a("li"),dme=a("strong"),YNo=o("reformer"),KNo=o(" \u2014 "),oO=a("a"),ZNo=o("ReformerForQuestionAnswering"),ejo=o(" (Reformer model)"),ojo=l(),U2=a("li"),cme=a("strong"),rjo=o("rembert"),tjo=o(" \u2014 "),rO=a("a"),ajo=o("RemBertForQuestionAnswering"),njo=o(" (RemBERT model)"),sjo=l(),J2=a("li"),fme=a("strong"),ljo=o("roberta"),ijo=o(" \u2014 "),tO=a("a"),djo=o("RobertaForQuestionAnswering"),cjo=o(" (RoBERTa model)"),fjo=l(),Y2=a("li"),mme=a("strong"),mjo=o("roformer"),gjo=o(" \u2014 "),aO=a("a"),hjo=o("RoFormerForQuestionAnswering"),pjo=o(" (RoFormer model)"),ujo=l(),K2=a("li"),gme=a("strong"),_jo=o("splinter"),bjo=o(" \u2014 "),nO=a("a"),vjo=o("SplinterForQuestionAnswering"),Fjo=o(" (Splinter model)"),Tjo=l(),Z2=a("li"),hme=a("strong"),Mjo=o("squeezebert"),Ejo=o(" \u2014 "),sO=a("a"),Cjo=o("SqueezeBertForQuestionAnswering"),wjo=o(" (SqueezeBERT model)"),Ajo=l(),e5=a("li"),pme=a("strong"),yjo=o("xlm"),Ljo=o(" \u2014 "),lO=a("a"),xjo=o("XLMForQuestionAnsweringSimple"),$jo=o(" (XLM model)"),kjo=l(),o5=a("li"),ume=a("strong"),Sjo=o("xlm-roberta"),Rjo=o(" \u2014 "),iO=a("a"),Bjo=o("XLMRobertaForQuestionAnswering"),Pjo=o(" (XLM-RoBERTa model)"),Ijo=l(),r5=a("li"),_me=a("strong"),qjo=o("xlm-roberta-xl"),Njo=o(" \u2014 "),dO=a("a"),jjo=o("XLMRobertaXLForQuestionAnswering"),Djo=o(" (XLM-RoBERTa-XL model)"),Gjo=l(),t5=a("li"),bme=a("strong"),Ojo=o("xlnet"),Vjo=o(" \u2014 "),cO=a("a"),Xjo=o("XLNetForQuestionAnsweringSimple"),zjo=o(" (XLNet model)"),Qjo=l(),a5=a("li"),vme=a("strong"),Wjo=o("yoso"),Hjo=o(" \u2014 "),fO=a("a"),Ujo=o("YosoForQuestionAnswering"),Jjo=o(" (YOSO model)"),Yjo=l(),n5=a("p"),Kjo=o("The model is set in evaluation mode by default using "),Fme=a("code"),Zjo=o("model.eval()"),eDo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Tme=a("code"),oDo=o("model.train()"),rDo=l(),F(s5.$$.fragment),cBe=l(),zi=a("h2"),l5=a("a"),Mme=a("span"),F(I0.$$.fragment),tDo=l(),Eme=a("span"),aDo=o("AutoModelForTableQuestionAnswering"),fBe=l(),Io=a("div"),F(q0.$$.fragment),nDo=l(),Qi=a("p"),sDo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),mO=a("a"),lDo=o("from_pretrained()"),iDo=o(" class method or the "),gO=a("a"),dDo=o("from_config()"),cDo=o(` class
method.`),fDo=l(),N0=a("p"),mDo=o("This class cannot be instantiated directly using "),Cme=a("code"),gDo=o("__init__()"),hDo=o(" (throws an error)."),pDo=l(),it=a("div"),F(j0.$$.fragment),uDo=l(),wme=a("p"),_Do=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),bDo=l(),Wi=a("p"),vDo=o(`Note:
Loading a model from its configuration file does `),Ame=a("strong"),FDo=o("not"),TDo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hO=a("a"),MDo=o("from_pretrained()"),EDo=o(" to load the model weights."),CDo=l(),F(i5.$$.fragment),wDo=l(),ro=a("div"),F(D0.$$.fragment),ADo=l(),yme=a("p"),yDo=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),LDo=l(),Ra=a("p"),xDo=o("The model class to instantiate is selected based on the "),Lme=a("code"),$Do=o("model_type"),kDo=o(` property of the config object (either
passed as an argument or loaded from `),xme=a("code"),SDo=o("pretrained_model_name_or_path"),RDo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$me=a("code"),BDo=o("pretrained_model_name_or_path"),PDo=o(":"),IDo=l(),kme=a("ul"),d5=a("li"),Sme=a("strong"),qDo=o("tapas"),NDo=o(" \u2014 "),pO=a("a"),jDo=o("TapasForQuestionAnswering"),DDo=o(" (TAPAS model)"),GDo=l(),c5=a("p"),ODo=o("The model is set in evaluation mode by default using "),Rme=a("code"),VDo=o("model.eval()"),XDo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Bme=a("code"),zDo=o("model.train()"),QDo=l(),F(f5.$$.fragment),mBe=l(),Hi=a("h2"),m5=a("a"),Pme=a("span"),F(G0.$$.fragment),WDo=l(),Ime=a("span"),HDo=o("AutoModelForImageClassification"),gBe=l(),qo=a("div"),F(O0.$$.fragment),UDo=l(),Ui=a("p"),JDo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),uO=a("a"),YDo=o("from_pretrained()"),KDo=o(" class method or the "),_O=a("a"),ZDo=o("from_config()"),eGo=o(` class
method.`),oGo=l(),V0=a("p"),rGo=o("This class cannot be instantiated directly using "),qme=a("code"),tGo=o("__init__()"),aGo=o(" (throws an error)."),nGo=l(),dt=a("div"),F(X0.$$.fragment),sGo=l(),Nme=a("p"),lGo=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),iGo=l(),Ji=a("p"),dGo=o(`Note:
Loading a model from its configuration file does `),jme=a("strong"),cGo=o("not"),fGo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bO=a("a"),mGo=o("from_pretrained()"),gGo=o(" to load the model weights."),hGo=l(),F(g5.$$.fragment),pGo=l(),to=a("div"),F(z0.$$.fragment),uGo=l(),Dme=a("p"),_Go=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),bGo=l(),Ba=a("p"),vGo=o("The model class to instantiate is selected based on the "),Gme=a("code"),FGo=o("model_type"),TGo=o(` property of the config object (either
passed as an argument or loaded from `),Ome=a("code"),MGo=o("pretrained_model_name_or_path"),EGo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vme=a("code"),CGo=o("pretrained_model_name_or_path"),wGo=o(":"),AGo=l(),ve=a("ul"),h5=a("li"),Xme=a("strong"),yGo=o("beit"),LGo=o(" \u2014 "),vO=a("a"),xGo=o("BeitForImageClassification"),$Go=o(" (BEiT model)"),kGo=l(),p5=a("li"),zme=a("strong"),SGo=o("convnext"),RGo=o(" \u2014 "),FO=a("a"),BGo=o("ConvNextForImageClassification"),PGo=o(" (ConvNext model)"),IGo=l(),u5=a("li"),Qme=a("strong"),qGo=o("data2vec-vision"),NGo=o(" \u2014 "),TO=a("a"),jGo=o("Data2VecVisionForImageClassification"),DGo=o(" (Data2VecVision model)"),GGo=l(),xs=a("li"),Wme=a("strong"),OGo=o("deit"),VGo=o(" \u2014 "),MO=a("a"),XGo=o("DeiTForImageClassification"),zGo=o(" or "),EO=a("a"),QGo=o("DeiTForImageClassificationWithTeacher"),WGo=o(" (DeiT model)"),HGo=l(),_5=a("li"),Hme=a("strong"),UGo=o("imagegpt"),JGo=o(" \u2014 "),CO=a("a"),YGo=o("ImageGPTForImageClassification"),KGo=o(" (ImageGPT model)"),ZGo=l(),ct=a("li"),Ume=a("strong"),eOo=o("perceiver"),oOo=o(" \u2014 "),wO=a("a"),rOo=o("PerceiverForImageClassificationLearned"),tOo=o(" or "),AO=a("a"),aOo=o("PerceiverForImageClassificationFourier"),nOo=o(" or "),yO=a("a"),sOo=o("PerceiverForImageClassificationConvProcessing"),lOo=o(" (Perceiver model)"),iOo=l(),b5=a("li"),Jme=a("strong"),dOo=o("poolformer"),cOo=o(" \u2014 "),LO=a("a"),fOo=o("PoolFormerForImageClassification"),mOo=o(" (PoolFormer model)"),gOo=l(),v5=a("li"),Yme=a("strong"),hOo=o("regnet"),pOo=o(" \u2014 "),xO=a("a"),uOo=o("RegNetForImageClassification"),_Oo=o(" (RegNet model)"),bOo=l(),F5=a("li"),Kme=a("strong"),vOo=o("resnet"),FOo=o(" \u2014 "),$O=a("a"),TOo=o("ResNetForImageClassification"),MOo=o(" (ResNet model)"),EOo=l(),T5=a("li"),Zme=a("strong"),COo=o("segformer"),wOo=o(" \u2014 "),kO=a("a"),AOo=o("SegformerForImageClassification"),yOo=o(" (SegFormer model)"),LOo=l(),M5=a("li"),ege=a("strong"),xOo=o("swin"),$Oo=o(" \u2014 "),SO=a("a"),kOo=o("SwinForImageClassification"),SOo=o(" (Swin model)"),ROo=l(),E5=a("li"),oge=a("strong"),BOo=o("van"),POo=o(" \u2014 "),RO=a("a"),IOo=o("VanForImageClassification"),qOo=o(" (VAN model)"),NOo=l(),C5=a("li"),rge=a("strong"),jOo=o("vit"),DOo=o(" \u2014 "),BO=a("a"),GOo=o("ViTForImageClassification"),OOo=o(" (ViT model)"),VOo=l(),w5=a("p"),XOo=o("The model is set in evaluation mode by default using "),tge=a("code"),zOo=o("model.eval()"),QOo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),age=a("code"),WOo=o("model.train()"),HOo=l(),F(A5.$$.fragment),hBe=l(),Yi=a("h2"),y5=a("a"),nge=a("span"),F(Q0.$$.fragment),UOo=l(),sge=a("span"),JOo=o("AutoModelForVision2Seq"),pBe=l(),No=a("div"),F(W0.$$.fragment),YOo=l(),Ki=a("p"),KOo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),PO=a("a"),ZOo=o("from_pretrained()"),eVo=o(" class method or the "),IO=a("a"),oVo=o("from_config()"),rVo=o(` class
method.`),tVo=l(),H0=a("p"),aVo=o("This class cannot be instantiated directly using "),lge=a("code"),nVo=o("__init__()"),sVo=o(" (throws an error)."),lVo=l(),ft=a("div"),F(U0.$$.fragment),iVo=l(),ige=a("p"),dVo=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),cVo=l(),Zi=a("p"),fVo=o(`Note:
Loading a model from its configuration file does `),dge=a("strong"),mVo=o("not"),gVo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qO=a("a"),hVo=o("from_pretrained()"),pVo=o(" to load the model weights."),uVo=l(),F(L5.$$.fragment),_Vo=l(),ao=a("div"),F(J0.$$.fragment),bVo=l(),cge=a("p"),vVo=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),FVo=l(),Pa=a("p"),TVo=o("The model class to instantiate is selected based on the "),fge=a("code"),MVo=o("model_type"),EVo=o(` property of the config object (either
passed as an argument or loaded from `),mge=a("code"),CVo=o("pretrained_model_name_or_path"),wVo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gge=a("code"),AVo=o("pretrained_model_name_or_path"),yVo=o(":"),LVo=l(),hge=a("ul"),x5=a("li"),pge=a("strong"),xVo=o("vision-encoder-decoder"),$Vo=o(" \u2014 "),NO=a("a"),kVo=o("VisionEncoderDecoderModel"),SVo=o(" (Vision Encoder decoder model)"),RVo=l(),$5=a("p"),BVo=o("The model is set in evaluation mode by default using "),uge=a("code"),PVo=o("model.eval()"),IVo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_ge=a("code"),qVo=o("model.train()"),NVo=l(),F(k5.$$.fragment),uBe=l(),ed=a("h2"),S5=a("a"),bge=a("span"),F(Y0.$$.fragment),jVo=l(),vge=a("span"),DVo=o("AutoModelForAudioClassification"),_Be=l(),jo=a("div"),F(K0.$$.fragment),GVo=l(),od=a("p"),OVo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),jO=a("a"),VVo=o("from_pretrained()"),XVo=o(" class method or the "),DO=a("a"),zVo=o("from_config()"),QVo=o(` class
method.`),WVo=l(),Z0=a("p"),HVo=o("This class cannot be instantiated directly using "),Fge=a("code"),UVo=o("__init__()"),JVo=o(" (throws an error)."),YVo=l(),mt=a("div"),F(ey.$$.fragment),KVo=l(),Tge=a("p"),ZVo=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),eXo=l(),rd=a("p"),oXo=o(`Note:
Loading a model from its configuration file does `),Mge=a("strong"),rXo=o("not"),tXo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),GO=a("a"),aXo=o("from_pretrained()"),nXo=o(" to load the model weights."),sXo=l(),F(R5.$$.fragment),lXo=l(),no=a("div"),F(oy.$$.fragment),iXo=l(),Ege=a("p"),dXo=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),cXo=l(),Ia=a("p"),fXo=o("The model class to instantiate is selected based on the "),Cge=a("code"),mXo=o("model_type"),gXo=o(` property of the config object (either
passed as an argument or loaded from `),wge=a("code"),hXo=o("pretrained_model_name_or_path"),pXo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Age=a("code"),uXo=o("pretrained_model_name_or_path"),_Xo=o(":"),bXo=l(),qe=a("ul"),B5=a("li"),yge=a("strong"),vXo=o("data2vec-audio"),FXo=o(" \u2014 "),OO=a("a"),TXo=o("Data2VecAudioForSequenceClassification"),MXo=o(" (Data2VecAudio model)"),EXo=l(),P5=a("li"),Lge=a("strong"),CXo=o("hubert"),wXo=o(" \u2014 "),VO=a("a"),AXo=o("HubertForSequenceClassification"),yXo=o(" (Hubert model)"),LXo=l(),I5=a("li"),xge=a("strong"),xXo=o("sew"),$Xo=o(" \u2014 "),XO=a("a"),kXo=o("SEWForSequenceClassification"),SXo=o(" (SEW model)"),RXo=l(),q5=a("li"),$ge=a("strong"),BXo=o("sew-d"),PXo=o(" \u2014 "),zO=a("a"),IXo=o("SEWDForSequenceClassification"),qXo=o(" (SEW-D model)"),NXo=l(),N5=a("li"),kge=a("strong"),jXo=o("unispeech"),DXo=o(" \u2014 "),QO=a("a"),GXo=o("UniSpeechForSequenceClassification"),OXo=o(" (UniSpeech model)"),VXo=l(),j5=a("li"),Sge=a("strong"),XXo=o("unispeech-sat"),zXo=o(" \u2014 "),WO=a("a"),QXo=o("UniSpeechSatForSequenceClassification"),WXo=o(" (UniSpeechSat model)"),HXo=l(),D5=a("li"),Rge=a("strong"),UXo=o("wav2vec2"),JXo=o(" \u2014 "),HO=a("a"),YXo=o("Wav2Vec2ForSequenceClassification"),KXo=o(" (Wav2Vec2 model)"),ZXo=l(),G5=a("li"),Bge=a("strong"),ezo=o("wavlm"),ozo=o(" \u2014 "),UO=a("a"),rzo=o("WavLMForSequenceClassification"),tzo=o(" (WavLM model)"),azo=l(),O5=a("p"),nzo=o("The model is set in evaluation mode by default using "),Pge=a("code"),szo=o("model.eval()"),lzo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ige=a("code"),izo=o("model.train()"),dzo=l(),F(V5.$$.fragment),bBe=l(),td=a("h2"),X5=a("a"),qge=a("span"),F(ry.$$.fragment),czo=l(),Nge=a("span"),fzo=o("AutoModelForAudioFrameClassification"),vBe=l(),Do=a("div"),F(ty.$$.fragment),mzo=l(),ad=a("p"),gzo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),JO=a("a"),hzo=o("from_pretrained()"),pzo=o(" class method or the "),YO=a("a"),uzo=o("from_config()"),_zo=o(` class
method.`),bzo=l(),ay=a("p"),vzo=o("This class cannot be instantiated directly using "),jge=a("code"),Fzo=o("__init__()"),Tzo=o(" (throws an error)."),Mzo=l(),gt=a("div"),F(ny.$$.fragment),Ezo=l(),Dge=a("p"),Czo=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),wzo=l(),nd=a("p"),Azo=o(`Note:
Loading a model from its configuration file does `),Gge=a("strong"),yzo=o("not"),Lzo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),KO=a("a"),xzo=o("from_pretrained()"),$zo=o(" to load the model weights."),kzo=l(),F(z5.$$.fragment),Szo=l(),so=a("div"),F(sy.$$.fragment),Rzo=l(),Oge=a("p"),Bzo=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),Pzo=l(),qa=a("p"),Izo=o("The model class to instantiate is selected based on the "),Vge=a("code"),qzo=o("model_type"),Nzo=o(` property of the config object (either
passed as an argument or loaded from `),Xge=a("code"),jzo=o("pretrained_model_name_or_path"),Dzo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zge=a("code"),Gzo=o("pretrained_model_name_or_path"),Ozo=o(":"),Vzo=l(),Na=a("ul"),Q5=a("li"),Qge=a("strong"),Xzo=o("data2vec-audio"),zzo=o(" \u2014 "),ZO=a("a"),Qzo=o("Data2VecAudioForAudioFrameClassification"),Wzo=o(" (Data2VecAudio model)"),Hzo=l(),W5=a("li"),Wge=a("strong"),Uzo=o("unispeech-sat"),Jzo=o(" \u2014 "),eV=a("a"),Yzo=o("UniSpeechSatForAudioFrameClassification"),Kzo=o(" (UniSpeechSat model)"),Zzo=l(),H5=a("li"),Hge=a("strong"),eQo=o("wav2vec2"),oQo=o(" \u2014 "),oV=a("a"),rQo=o("Wav2Vec2ForAudioFrameClassification"),tQo=o(" (Wav2Vec2 model)"),aQo=l(),U5=a("li"),Uge=a("strong"),nQo=o("wavlm"),sQo=o(" \u2014 "),rV=a("a"),lQo=o("WavLMForAudioFrameClassification"),iQo=o(" (WavLM model)"),dQo=l(),J5=a("p"),cQo=o("The model is set in evaluation mode by default using "),Jge=a("code"),fQo=o("model.eval()"),mQo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Yge=a("code"),gQo=o("model.train()"),hQo=l(),F(Y5.$$.fragment),FBe=l(),sd=a("h2"),K5=a("a"),Kge=a("span"),F(ly.$$.fragment),pQo=l(),Zge=a("span"),uQo=o("AutoModelForCTC"),TBe=l(),Go=a("div"),F(iy.$$.fragment),_Qo=l(),ld=a("p"),bQo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),tV=a("a"),vQo=o("from_pretrained()"),FQo=o(" class method or the "),aV=a("a"),TQo=o("from_config()"),MQo=o(` class
method.`),EQo=l(),dy=a("p"),CQo=o("This class cannot be instantiated directly using "),ehe=a("code"),wQo=o("__init__()"),AQo=o(" (throws an error)."),yQo=l(),ht=a("div"),F(cy.$$.fragment),LQo=l(),ohe=a("p"),xQo=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),$Qo=l(),id=a("p"),kQo=o(`Note:
Loading a model from its configuration file does `),rhe=a("strong"),SQo=o("not"),RQo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nV=a("a"),BQo=o("from_pretrained()"),PQo=o(" to load the model weights."),IQo=l(),F(Z5.$$.fragment),qQo=l(),lo=a("div"),F(fy.$$.fragment),NQo=l(),the=a("p"),jQo=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),DQo=l(),ja=a("p"),GQo=o("The model class to instantiate is selected based on the "),ahe=a("code"),OQo=o("model_type"),VQo=o(` property of the config object (either
passed as an argument or loaded from `),nhe=a("code"),XQo=o("pretrained_model_name_or_path"),zQo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),she=a("code"),QQo=o("pretrained_model_name_or_path"),WQo=o(":"),HQo=l(),Ne=a("ul"),ev=a("li"),lhe=a("strong"),UQo=o("data2vec-audio"),JQo=o(" \u2014 "),sV=a("a"),YQo=o("Data2VecAudioForCTC"),KQo=o(" (Data2VecAudio model)"),ZQo=l(),ov=a("li"),ihe=a("strong"),eWo=o("hubert"),oWo=o(" \u2014 "),lV=a("a"),rWo=o("HubertForCTC"),tWo=o(" (Hubert model)"),aWo=l(),rv=a("li"),dhe=a("strong"),nWo=o("sew"),sWo=o(" \u2014 "),iV=a("a"),lWo=o("SEWForCTC"),iWo=o(" (SEW model)"),dWo=l(),tv=a("li"),che=a("strong"),cWo=o("sew-d"),fWo=o(" \u2014 "),dV=a("a"),mWo=o("SEWDForCTC"),gWo=o(" (SEW-D model)"),hWo=l(),av=a("li"),fhe=a("strong"),pWo=o("unispeech"),uWo=o(" \u2014 "),cV=a("a"),_Wo=o("UniSpeechForCTC"),bWo=o(" (UniSpeech model)"),vWo=l(),nv=a("li"),mhe=a("strong"),FWo=o("unispeech-sat"),TWo=o(" \u2014 "),fV=a("a"),MWo=o("UniSpeechSatForCTC"),EWo=o(" (UniSpeechSat model)"),CWo=l(),sv=a("li"),ghe=a("strong"),wWo=o("wav2vec2"),AWo=o(" \u2014 "),mV=a("a"),yWo=o("Wav2Vec2ForCTC"),LWo=o(" (Wav2Vec2 model)"),xWo=l(),lv=a("li"),hhe=a("strong"),$Wo=o("wavlm"),kWo=o(" \u2014 "),gV=a("a"),SWo=o("WavLMForCTC"),RWo=o(" (WavLM model)"),BWo=l(),iv=a("p"),PWo=o("The model is set in evaluation mode by default using "),phe=a("code"),IWo=o("model.eval()"),qWo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),uhe=a("code"),NWo=o("model.train()"),jWo=l(),F(dv.$$.fragment),MBe=l(),dd=a("h2"),cv=a("a"),_he=a("span"),F(my.$$.fragment),DWo=l(),bhe=a("span"),GWo=o("AutoModelForSpeechSeq2Seq"),EBe=l(),Oo=a("div"),F(gy.$$.fragment),OWo=l(),cd=a("p"),VWo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),hV=a("a"),XWo=o("from_pretrained()"),zWo=o(" class method or the "),pV=a("a"),QWo=o("from_config()"),WWo=o(` class
method.`),HWo=l(),hy=a("p"),UWo=o("This class cannot be instantiated directly using "),vhe=a("code"),JWo=o("__init__()"),YWo=o(" (throws an error)."),KWo=l(),pt=a("div"),F(py.$$.fragment),ZWo=l(),Fhe=a("p"),eHo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),oHo=l(),fd=a("p"),rHo=o(`Note:
Loading a model from its configuration file does `),The=a("strong"),tHo=o("not"),aHo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uV=a("a"),nHo=o("from_pretrained()"),sHo=o(" to load the model weights."),lHo=l(),F(fv.$$.fragment),iHo=l(),io=a("div"),F(uy.$$.fragment),dHo=l(),Mhe=a("p"),cHo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),fHo=l(),Da=a("p"),mHo=o("The model class to instantiate is selected based on the "),Ehe=a("code"),gHo=o("model_type"),hHo=o(` property of the config object (either
passed as an argument or loaded from `),Che=a("code"),pHo=o("pretrained_model_name_or_path"),uHo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),whe=a("code"),_Ho=o("pretrained_model_name_or_path"),bHo=o(":"),vHo=l(),_y=a("ul"),mv=a("li"),Ahe=a("strong"),FHo=o("speech-encoder-decoder"),THo=o(" \u2014 "),_V=a("a"),MHo=o("SpeechEncoderDecoderModel"),EHo=o(" (Speech Encoder decoder model)"),CHo=l(),gv=a("li"),yhe=a("strong"),wHo=o("speech_to_text"),AHo=o(" \u2014 "),bV=a("a"),yHo=o("Speech2TextForConditionalGeneration"),LHo=o(" (Speech2Text model)"),xHo=l(),hv=a("p"),$Ho=o("The model is set in evaluation mode by default using "),Lhe=a("code"),kHo=o("model.eval()"),SHo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xhe=a("code"),RHo=o("model.train()"),BHo=l(),F(pv.$$.fragment),CBe=l(),md=a("h2"),uv=a("a"),$he=a("span"),F(by.$$.fragment),PHo=l(),khe=a("span"),IHo=o("AutoModelForAudioXVector"),wBe=l(),Vo=a("div"),F(vy.$$.fragment),qHo=l(),gd=a("p"),NHo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),vV=a("a"),jHo=o("from_pretrained()"),DHo=o(" class method or the "),FV=a("a"),GHo=o("from_config()"),OHo=o(` class
method.`),VHo=l(),Fy=a("p"),XHo=o("This class cannot be instantiated directly using "),She=a("code"),zHo=o("__init__()"),QHo=o(" (throws an error)."),WHo=l(),ut=a("div"),F(Ty.$$.fragment),HHo=l(),Rhe=a("p"),UHo=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),JHo=l(),hd=a("p"),YHo=o(`Note:
Loading a model from its configuration file does `),Bhe=a("strong"),KHo=o("not"),ZHo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),TV=a("a"),eUo=o("from_pretrained()"),oUo=o(" to load the model weights."),rUo=l(),F(_v.$$.fragment),tUo=l(),co=a("div"),F(My.$$.fragment),aUo=l(),Phe=a("p"),nUo=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),sUo=l(),Ga=a("p"),lUo=o("The model class to instantiate is selected based on the "),Ihe=a("code"),iUo=o("model_type"),dUo=o(` property of the config object (either
passed as an argument or loaded from `),qhe=a("code"),cUo=o("pretrained_model_name_or_path"),fUo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nhe=a("code"),mUo=o("pretrained_model_name_or_path"),gUo=o(":"),hUo=l(),Oa=a("ul"),bv=a("li"),jhe=a("strong"),pUo=o("data2vec-audio"),uUo=o(" \u2014 "),MV=a("a"),_Uo=o("Data2VecAudioForXVector"),bUo=o(" (Data2VecAudio model)"),vUo=l(),vv=a("li"),Dhe=a("strong"),FUo=o("unispeech-sat"),TUo=o(" \u2014 "),EV=a("a"),MUo=o("UniSpeechSatForXVector"),EUo=o(" (UniSpeechSat model)"),CUo=l(),Fv=a("li"),Ghe=a("strong"),wUo=o("wav2vec2"),AUo=o(" \u2014 "),CV=a("a"),yUo=o("Wav2Vec2ForXVector"),LUo=o(" (Wav2Vec2 model)"),xUo=l(),Tv=a("li"),Ohe=a("strong"),$Uo=o("wavlm"),kUo=o(" \u2014 "),wV=a("a"),SUo=o("WavLMForXVector"),RUo=o(" (WavLM model)"),BUo=l(),Mv=a("p"),PUo=o("The model is set in evaluation mode by default using "),Vhe=a("code"),IUo=o("model.eval()"),qUo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Xhe=a("code"),NUo=o("model.train()"),jUo=l(),F(Ev.$$.fragment),ABe=l(),pd=a("h2"),Cv=a("a"),zhe=a("span"),F(Ey.$$.fragment),DUo=l(),Qhe=a("span"),GUo=o("AutoModelForMaskedImageModeling"),yBe=l(),Xo=a("div"),F(Cy.$$.fragment),OUo=l(),ud=a("p"),VUo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),AV=a("a"),XUo=o("from_pretrained()"),zUo=o(" class method or the "),yV=a("a"),QUo=o("from_config()"),WUo=o(` class
method.`),HUo=l(),wy=a("p"),UUo=o("This class cannot be instantiated directly using "),Whe=a("code"),JUo=o("__init__()"),YUo=o(" (throws an error)."),KUo=l(),_t=a("div"),F(Ay.$$.fragment),ZUo=l(),Hhe=a("p"),eJo=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),oJo=l(),_d=a("p"),rJo=o(`Note:
Loading a model from its configuration file does `),Uhe=a("strong"),tJo=o("not"),aJo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),LV=a("a"),nJo=o("from_pretrained()"),sJo=o(" to load the model weights."),lJo=l(),F(wv.$$.fragment),iJo=l(),fo=a("div"),F(yy.$$.fragment),dJo=l(),Jhe=a("p"),cJo=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),fJo=l(),Va=a("p"),mJo=o("The model class to instantiate is selected based on the "),Yhe=a("code"),gJo=o("model_type"),hJo=o(` property of the config object (either
passed as an argument or loaded from `),Khe=a("code"),pJo=o("pretrained_model_name_or_path"),uJo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zhe=a("code"),_Jo=o("pretrained_model_name_or_path"),bJo=o(":"),vJo=l(),bd=a("ul"),Av=a("li"),epe=a("strong"),FJo=o("deit"),TJo=o(" \u2014 "),xV=a("a"),MJo=o("DeiTForMaskedImageModeling"),EJo=o(" (DeiT model)"),CJo=l(),yv=a("li"),ope=a("strong"),wJo=o("swin"),AJo=o(" \u2014 "),$V=a("a"),yJo=o("SwinForMaskedImageModeling"),LJo=o(" (Swin model)"),xJo=l(),Lv=a("li"),rpe=a("strong"),$Jo=o("vit"),kJo=o(" \u2014 "),kV=a("a"),SJo=o("ViTForMaskedImageModeling"),RJo=o(" (ViT model)"),BJo=l(),xv=a("p"),PJo=o("The model is set in evaluation mode by default using "),tpe=a("code"),IJo=o("model.eval()"),qJo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ape=a("code"),NJo=o("model.train()"),jJo=l(),F($v.$$.fragment),LBe=l(),vd=a("h2"),kv=a("a"),npe=a("span"),F(Ly.$$.fragment),DJo=l(),spe=a("span"),GJo=o("AutoModelForObjectDetection"),xBe=l(),zo=a("div"),F(xy.$$.fragment),OJo=l(),Fd=a("p"),VJo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),SV=a("a"),XJo=o("from_pretrained()"),zJo=o(" class method or the "),RV=a("a"),QJo=o("from_config()"),WJo=o(` class
method.`),HJo=l(),$y=a("p"),UJo=o("This class cannot be instantiated directly using "),lpe=a("code"),JJo=o("__init__()"),YJo=o(" (throws an error)."),KJo=l(),bt=a("div"),F(ky.$$.fragment),ZJo=l(),ipe=a("p"),eYo=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),oYo=l(),Td=a("p"),rYo=o(`Note:
Loading a model from its configuration file does `),dpe=a("strong"),tYo=o("not"),aYo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),BV=a("a"),nYo=o("from_pretrained()"),sYo=o(" to load the model weights."),lYo=l(),F(Sv.$$.fragment),iYo=l(),mo=a("div"),F(Sy.$$.fragment),dYo=l(),cpe=a("p"),cYo=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),fYo=l(),Xa=a("p"),mYo=o("The model class to instantiate is selected based on the "),fpe=a("code"),gYo=o("model_type"),hYo=o(` property of the config object (either
passed as an argument or loaded from `),mpe=a("code"),pYo=o("pretrained_model_name_or_path"),uYo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gpe=a("code"),_Yo=o("pretrained_model_name_or_path"),bYo=o(":"),vYo=l(),hpe=a("ul"),Rv=a("li"),ppe=a("strong"),FYo=o("detr"),TYo=o(" \u2014 "),PV=a("a"),MYo=o("DetrForObjectDetection"),EYo=o(" (DETR model)"),CYo=l(),Bv=a("p"),wYo=o("The model is set in evaluation mode by default using "),upe=a("code"),AYo=o("model.eval()"),yYo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_pe=a("code"),LYo=o("model.train()"),xYo=l(),F(Pv.$$.fragment),$Be=l(),Md=a("h2"),Iv=a("a"),bpe=a("span"),F(Ry.$$.fragment),$Yo=l(),vpe=a("span"),kYo=o("AutoModelForImageSegmentation"),kBe=l(),Qo=a("div"),F(By.$$.fragment),SYo=l(),Ed=a("p"),RYo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),IV=a("a"),BYo=o("from_pretrained()"),PYo=o(" class method or the "),qV=a("a"),IYo=o("from_config()"),qYo=o(` class
method.`),NYo=l(),Py=a("p"),jYo=o("This class cannot be instantiated directly using "),Fpe=a("code"),DYo=o("__init__()"),GYo=o(" (throws an error)."),OYo=l(),vt=a("div"),F(Iy.$$.fragment),VYo=l(),Tpe=a("p"),XYo=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),zYo=l(),Cd=a("p"),QYo=o(`Note:
Loading a model from its configuration file does `),Mpe=a("strong"),WYo=o("not"),HYo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),NV=a("a"),UYo=o("from_pretrained()"),JYo=o(" to load the model weights."),YYo=l(),F(qv.$$.fragment),KYo=l(),go=a("div"),F(qy.$$.fragment),ZYo=l(),Epe=a("p"),eKo=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),oKo=l(),za=a("p"),rKo=o("The model class to instantiate is selected based on the "),Cpe=a("code"),tKo=o("model_type"),aKo=o(` property of the config object (either
passed as an argument or loaded from `),wpe=a("code"),nKo=o("pretrained_model_name_or_path"),sKo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ape=a("code"),lKo=o("pretrained_model_name_or_path"),iKo=o(":"),dKo=l(),ype=a("ul"),Nv=a("li"),Lpe=a("strong"),cKo=o("detr"),fKo=o(" \u2014 "),jV=a("a"),mKo=o("DetrForSegmentation"),gKo=o(" (DETR model)"),hKo=l(),jv=a("p"),pKo=o("The model is set in evaluation mode by default using "),xpe=a("code"),uKo=o("model.eval()"),_Ko=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$pe=a("code"),bKo=o("model.train()"),vKo=l(),F(Dv.$$.fragment),SBe=l(),wd=a("h2"),Gv=a("a"),kpe=a("span"),F(Ny.$$.fragment),FKo=l(),Spe=a("span"),TKo=o("AutoModelForSemanticSegmentation"),RBe=l(),Wo=a("div"),F(jy.$$.fragment),MKo=l(),Ad=a("p"),EKo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),DV=a("a"),CKo=o("from_pretrained()"),wKo=o(" class method or the "),GV=a("a"),AKo=o("from_config()"),yKo=o(` class
method.`),LKo=l(),Dy=a("p"),xKo=o("This class cannot be instantiated directly using "),Rpe=a("code"),$Ko=o("__init__()"),kKo=o(" (throws an error)."),SKo=l(),Ft=a("div"),F(Gy.$$.fragment),RKo=l(),Bpe=a("p"),BKo=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),PKo=l(),yd=a("p"),IKo=o(`Note:
Loading a model from its configuration file does `),Ppe=a("strong"),qKo=o("not"),NKo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),OV=a("a"),jKo=o("from_pretrained()"),DKo=o(" to load the model weights."),GKo=l(),F(Ov.$$.fragment),OKo=l(),ho=a("div"),F(Oy.$$.fragment),VKo=l(),Ipe=a("p"),XKo=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),zKo=l(),Qa=a("p"),QKo=o("The model class to instantiate is selected based on the "),qpe=a("code"),WKo=o("model_type"),HKo=o(` property of the config object (either
passed as an argument or loaded from `),Npe=a("code"),UKo=o("pretrained_model_name_or_path"),JKo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jpe=a("code"),YKo=o("pretrained_model_name_or_path"),KKo=o(":"),ZKo=l(),Wa=a("ul"),Vv=a("li"),Dpe=a("strong"),eZo=o("beit"),oZo=o(" \u2014 "),VV=a("a"),rZo=o("BeitForSemanticSegmentation"),tZo=o(" (BEiT model)"),aZo=l(),Xv=a("li"),Gpe=a("strong"),nZo=o("data2vec-vision"),sZo=o(" \u2014 "),XV=a("a"),lZo=o("Data2VecVisionForSemanticSegmentation"),iZo=o(" (Data2VecVision model)"),dZo=l(),zv=a("li"),Ope=a("strong"),cZo=o("dpt"),fZo=o(" \u2014 "),zV=a("a"),mZo=o("DPTForSemanticSegmentation"),gZo=o(" (DPT model)"),hZo=l(),Qv=a("li"),Vpe=a("strong"),pZo=o("segformer"),uZo=o(" \u2014 "),QV=a("a"),_Zo=o("SegformerForSemanticSegmentation"),bZo=o(" (SegFormer model)"),vZo=l(),Wv=a("p"),FZo=o("The model is set in evaluation mode by default using "),Xpe=a("code"),TZo=o("model.eval()"),MZo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zpe=a("code"),EZo=o("model.train()"),CZo=l(),F(Hv.$$.fragment),BBe=l(),Ld=a("h2"),Uv=a("a"),Qpe=a("span"),F(Vy.$$.fragment),wZo=l(),Wpe=a("span"),AZo=o("AutoModelForInstanceSegmentation"),PBe=l(),Ho=a("div"),F(Xy.$$.fragment),yZo=l(),xd=a("p"),LZo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),WV=a("a"),xZo=o("from_pretrained()"),$Zo=o(" class method or the "),HV=a("a"),kZo=o("from_config()"),SZo=o(` class
method.`),RZo=l(),zy=a("p"),BZo=o("This class cannot be instantiated directly using "),Hpe=a("code"),PZo=o("__init__()"),IZo=o(" (throws an error)."),qZo=l(),Tt=a("div"),F(Qy.$$.fragment),NZo=l(),Upe=a("p"),jZo=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),DZo=l(),$d=a("p"),GZo=o(`Note:
Loading a model from its configuration file does `),Jpe=a("strong"),OZo=o("not"),VZo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),UV=a("a"),XZo=o("from_pretrained()"),zZo=o(" to load the model weights."),QZo=l(),F(Jv.$$.fragment),WZo=l(),po=a("div"),F(Wy.$$.fragment),HZo=l(),Ype=a("p"),UZo=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),JZo=l(),Ha=a("p"),YZo=o("The model class to instantiate is selected based on the "),Kpe=a("code"),KZo=o("model_type"),ZZo=o(` property of the config object (either
passed as an argument or loaded from `),Zpe=a("code"),eer=o("pretrained_model_name_or_path"),oer=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),eue=a("code"),rer=o("pretrained_model_name_or_path"),ter=o(":"),aer=l(),oue=a("ul"),Yv=a("li"),rue=a("strong"),ner=o("maskformer"),ser=o(" \u2014 "),JV=a("a"),ler=o("MaskFormerForInstanceSegmentation"),ier=o(" (MaskFormer model)"),der=l(),Kv=a("p"),cer=o("The model is set in evaluation mode by default using "),tue=a("code"),fer=o("model.eval()"),mer=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),aue=a("code"),ger=o("model.train()"),her=l(),F(Zv.$$.fragment),IBe=l(),kd=a("h2"),eF=a("a"),nue=a("span"),F(Hy.$$.fragment),per=l(),sue=a("span"),uer=o("TFAutoModel"),qBe=l(),Uo=a("div"),F(Uy.$$.fragment),_er=l(),Sd=a("p"),ber=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),YV=a("a"),ver=o("from_pretrained()"),Fer=o(" class method or the "),KV=a("a"),Ter=o("from_config()"),Mer=o(` class
method.`),Eer=l(),Jy=a("p"),Cer=o("This class cannot be instantiated directly using "),lue=a("code"),wer=o("__init__()"),Aer=o(" (throws an error)."),yer=l(),Mt=a("div"),F(Yy.$$.fragment),Ler=l(),iue=a("p"),xer=o("Instantiates one of the base model classes of the library from a configuration."),$er=l(),Rd=a("p"),ker=o(`Note:
Loading a model from its configuration file does `),due=a("strong"),Ser=o("not"),Rer=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ZV=a("a"),Ber=o("from_pretrained()"),Per=o(" to load the model weights."),Ier=l(),F(oF.$$.fragment),qer=l(),Er=a("div"),F(Ky.$$.fragment),Ner=l(),cue=a("p"),jer=o("Instantiate one of the base model classes of the library from a pretrained model."),Der=l(),Ua=a("p"),Ger=o("The model class to instantiate is selected based on the "),fue=a("code"),Oer=o("model_type"),Ver=o(` property of the config object (either
passed as an argument or loaded from `),mue=a("code"),Xer=o("pretrained_model_name_or_path"),zer=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gue=a("code"),Qer=o("pretrained_model_name_or_path"),Wer=o(":"),Her=l(),j=a("ul"),rF=a("li"),hue=a("strong"),Uer=o("albert"),Jer=o(" \u2014 "),eX=a("a"),Yer=o("TFAlbertModel"),Ker=o(" (ALBERT model)"),Zer=l(),tF=a("li"),pue=a("strong"),eor=o("bart"),oor=o(" \u2014 "),oX=a("a"),ror=o("TFBartModel"),tor=o(" (BART model)"),aor=l(),aF=a("li"),uue=a("strong"),nor=o("bert"),sor=o(" \u2014 "),rX=a("a"),lor=o("TFBertModel"),ior=o(" (BERT model)"),dor=l(),nF=a("li"),_ue=a("strong"),cor=o("blenderbot"),mor=o(" \u2014 "),tX=a("a"),gor=o("TFBlenderbotModel"),hor=o(" (Blenderbot model)"),por=l(),sF=a("li"),bue=a("strong"),uor=o("blenderbot-small"),_or=o(" \u2014 "),aX=a("a"),bor=o("TFBlenderbotSmallModel"),vor=o(" (BlenderbotSmall model)"),For=l(),lF=a("li"),vue=a("strong"),Tor=o("camembert"),Mor=o(" \u2014 "),nX=a("a"),Eor=o("TFCamembertModel"),Cor=o(" (CamemBERT model)"),wor=l(),iF=a("li"),Fue=a("strong"),Aor=o("clip"),yor=o(" \u2014 "),sX=a("a"),Lor=o("TFCLIPModel"),xor=o(" (CLIP model)"),$or=l(),dF=a("li"),Tue=a("strong"),kor=o("convbert"),Sor=o(" \u2014 "),lX=a("a"),Ror=o("TFConvBertModel"),Bor=o(" (ConvBERT model)"),Por=l(),cF=a("li"),Mue=a("strong"),Ior=o("convnext"),qor=o(" \u2014 "),iX=a("a"),Nor=o("TFConvNextModel"),jor=o(" (ConvNext model)"),Dor=l(),fF=a("li"),Eue=a("strong"),Gor=o("ctrl"),Oor=o(" \u2014 "),dX=a("a"),Vor=o("TFCTRLModel"),Xor=o(" (CTRL model)"),zor=l(),mF=a("li"),Cue=a("strong"),Qor=o("deberta"),Wor=o(" \u2014 "),cX=a("a"),Hor=o("TFDebertaModel"),Uor=o(" (DeBERTa model)"),Jor=l(),gF=a("li"),wue=a("strong"),Yor=o("deberta-v2"),Kor=o(" \u2014 "),fX=a("a"),Zor=o("TFDebertaV2Model"),err=o(" (DeBERTa-v2 model)"),orr=l(),hF=a("li"),Aue=a("strong"),rrr=o("distilbert"),trr=o(" \u2014 "),mX=a("a"),arr=o("TFDistilBertModel"),nrr=o(" (DistilBERT model)"),srr=l(),pF=a("li"),yue=a("strong"),lrr=o("dpr"),irr=o(" \u2014 "),gX=a("a"),drr=o("TFDPRQuestionEncoder"),crr=o(" (DPR model)"),frr=l(),uF=a("li"),Lue=a("strong"),mrr=o("electra"),grr=o(" \u2014 "),hX=a("a"),hrr=o("TFElectraModel"),prr=o(" (ELECTRA model)"),urr=l(),_F=a("li"),xue=a("strong"),_rr=o("flaubert"),brr=o(" \u2014 "),pX=a("a"),vrr=o("TFFlaubertModel"),Frr=o(" (FlauBERT model)"),Trr=l(),$s=a("li"),$ue=a("strong"),Mrr=o("funnel"),Err=o(" \u2014 "),uX=a("a"),Crr=o("TFFunnelModel"),wrr=o(" or "),_X=a("a"),Arr=o("TFFunnelBaseModel"),yrr=o(" (Funnel Transformer model)"),Lrr=l(),bF=a("li"),kue=a("strong"),xrr=o("gpt2"),$rr=o(" \u2014 "),bX=a("a"),krr=o("TFGPT2Model"),Srr=o(" (OpenAI GPT-2 model)"),Rrr=l(),vF=a("li"),Sue=a("strong"),Brr=o("gptj"),Prr=o(" \u2014 "),vX=a("a"),Irr=o("TFGPTJModel"),qrr=o(" (GPT-J model)"),Nrr=l(),FF=a("li"),Rue=a("strong"),jrr=o("hubert"),Drr=o(" \u2014 "),FX=a("a"),Grr=o("TFHubertModel"),Orr=o(" (Hubert model)"),Vrr=l(),TF=a("li"),Bue=a("strong"),Xrr=o("layoutlm"),zrr=o(" \u2014 "),TX=a("a"),Qrr=o("TFLayoutLMModel"),Wrr=o(" (LayoutLM model)"),Hrr=l(),MF=a("li"),Pue=a("strong"),Urr=o("led"),Jrr=o(" \u2014 "),MX=a("a"),Yrr=o("TFLEDModel"),Krr=o(" (LED model)"),Zrr=l(),EF=a("li"),Iue=a("strong"),etr=o("longformer"),otr=o(" \u2014 "),EX=a("a"),rtr=o("TFLongformerModel"),ttr=o(" (Longformer model)"),atr=l(),CF=a("li"),que=a("strong"),ntr=o("lxmert"),str=o(" \u2014 "),CX=a("a"),ltr=o("TFLxmertModel"),itr=o(" (LXMERT model)"),dtr=l(),wF=a("li"),Nue=a("strong"),ctr=o("marian"),ftr=o(" \u2014 "),wX=a("a"),mtr=o("TFMarianModel"),gtr=o(" (Marian model)"),htr=l(),AF=a("li"),jue=a("strong"),ptr=o("mbart"),utr=o(" \u2014 "),AX=a("a"),_tr=o("TFMBartModel"),btr=o(" (mBART model)"),vtr=l(),yF=a("li"),Due=a("strong"),Ftr=o("mobilebert"),Ttr=o(" \u2014 "),yX=a("a"),Mtr=o("TFMobileBertModel"),Etr=o(" (MobileBERT model)"),Ctr=l(),LF=a("li"),Gue=a("strong"),wtr=o("mpnet"),Atr=o(" \u2014 "),LX=a("a"),ytr=o("TFMPNetModel"),Ltr=o(" (MPNet model)"),xtr=l(),xF=a("li"),Oue=a("strong"),$tr=o("mt5"),ktr=o(" \u2014 "),xX=a("a"),Str=o("TFMT5Model"),Rtr=o(" (mT5 model)"),Btr=l(),$F=a("li"),Vue=a("strong"),Ptr=o("openai-gpt"),Itr=o(" \u2014 "),$X=a("a"),qtr=o("TFOpenAIGPTModel"),Ntr=o(" (OpenAI GPT model)"),jtr=l(),kF=a("li"),Xue=a("strong"),Dtr=o("pegasus"),Gtr=o(" \u2014 "),kX=a("a"),Otr=o("TFPegasusModel"),Vtr=o(" (Pegasus model)"),Xtr=l(),SF=a("li"),zue=a("strong"),ztr=o("rembert"),Qtr=o(" \u2014 "),SX=a("a"),Wtr=o("TFRemBertModel"),Htr=o(" (RemBERT model)"),Utr=l(),RF=a("li"),Que=a("strong"),Jtr=o("roberta"),Ytr=o(" \u2014 "),RX=a("a"),Ktr=o("TFRobertaModel"),Ztr=o(" (RoBERTa model)"),ear=l(),BF=a("li"),Wue=a("strong"),oar=o("roformer"),rar=o(" \u2014 "),BX=a("a"),tar=o("TFRoFormerModel"),aar=o(" (RoFormer model)"),nar=l(),PF=a("li"),Hue=a("strong"),sar=o("speech_to_text"),lar=o(" \u2014 "),PX=a("a"),iar=o("TFSpeech2TextModel"),dar=o(" (Speech2Text model)"),car=l(),IF=a("li"),Uue=a("strong"),far=o("t5"),mar=o(" \u2014 "),IX=a("a"),gar=o("TFT5Model"),har=o(" (T5 model)"),par=l(),qF=a("li"),Jue=a("strong"),uar=o("tapas"),_ar=o(" \u2014 "),qX=a("a"),bar=o("TFTapasModel"),Far=o(" (TAPAS model)"),Tar=l(),NF=a("li"),Yue=a("strong"),Mar=o("transfo-xl"),Ear=o(" \u2014 "),NX=a("a"),Car=o("TFTransfoXLModel"),war=o(" (Transformer-XL model)"),Aar=l(),jF=a("li"),Kue=a("strong"),yar=o("vit"),Lar=o(" \u2014 "),jX=a("a"),xar=o("TFViTModel"),$ar=o(" (ViT model)"),kar=l(),DF=a("li"),Zue=a("strong"),Sar=o("vit_mae"),Rar=o(" \u2014 "),DX=a("a"),Bar=o("TFViTMAEModel"),Par=o(" (ViTMAE model)"),Iar=l(),GF=a("li"),e_e=a("strong"),qar=o("wav2vec2"),Nar=o(" \u2014 "),GX=a("a"),jar=o("TFWav2Vec2Model"),Dar=o(" (Wav2Vec2 model)"),Gar=l(),OF=a("li"),o_e=a("strong"),Oar=o("xlm"),Var=o(" \u2014 "),OX=a("a"),Xar=o("TFXLMModel"),zar=o(" (XLM model)"),Qar=l(),VF=a("li"),r_e=a("strong"),War=o("xlm-roberta"),Har=o(" \u2014 "),VX=a("a"),Uar=o("TFXLMRobertaModel"),Jar=o(" (XLM-RoBERTa model)"),Yar=l(),XF=a("li"),t_e=a("strong"),Kar=o("xlnet"),Zar=o(" \u2014 "),XX=a("a"),enr=o("TFXLNetModel"),onr=o(" (XLNet model)"),rnr=l(),F(zF.$$.fragment),NBe=l(),Bd=a("h2"),QF=a("a"),a_e=a("span"),F(Zy.$$.fragment),tnr=l(),n_e=a("span"),anr=o("TFAutoModelForPreTraining"),jBe=l(),Jo=a("div"),F(eL.$$.fragment),nnr=l(),Pd=a("p"),snr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),zX=a("a"),lnr=o("from_pretrained()"),inr=o(" class method or the "),QX=a("a"),dnr=o("from_config()"),cnr=o(` class
method.`),fnr=l(),oL=a("p"),mnr=o("This class cannot be instantiated directly using "),s_e=a("code"),gnr=o("__init__()"),hnr=o(" (throws an error)."),pnr=l(),Et=a("div"),F(rL.$$.fragment),unr=l(),l_e=a("p"),_nr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),bnr=l(),Id=a("p"),vnr=o(`Note:
Loading a model from its configuration file does `),i_e=a("strong"),Fnr=o("not"),Tnr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),WX=a("a"),Mnr=o("from_pretrained()"),Enr=o(" to load the model weights."),Cnr=l(),F(WF.$$.fragment),wnr=l(),Cr=a("div"),F(tL.$$.fragment),Anr=l(),d_e=a("p"),ynr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Lnr=l(),Ja=a("p"),xnr=o("The model class to instantiate is selected based on the "),c_e=a("code"),$nr=o("model_type"),knr=o(` property of the config object (either
passed as an argument or loaded from `),f_e=a("code"),Snr=o("pretrained_model_name_or_path"),Rnr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),m_e=a("code"),Bnr=o("pretrained_model_name_or_path"),Pnr=o(":"),Inr=l(),ne=a("ul"),HF=a("li"),g_e=a("strong"),qnr=o("albert"),Nnr=o(" \u2014 "),HX=a("a"),jnr=o("TFAlbertForPreTraining"),Dnr=o(" (ALBERT model)"),Gnr=l(),UF=a("li"),h_e=a("strong"),Onr=o("bart"),Vnr=o(" \u2014 "),UX=a("a"),Xnr=o("TFBartForConditionalGeneration"),znr=o(" (BART model)"),Qnr=l(),JF=a("li"),p_e=a("strong"),Wnr=o("bert"),Hnr=o(" \u2014 "),JX=a("a"),Unr=o("TFBertForPreTraining"),Jnr=o(" (BERT model)"),Ynr=l(),YF=a("li"),u_e=a("strong"),Knr=o("camembert"),Znr=o(" \u2014 "),YX=a("a"),esr=o("TFCamembertForMaskedLM"),osr=o(" (CamemBERT model)"),rsr=l(),KF=a("li"),__e=a("strong"),tsr=o("ctrl"),asr=o(" \u2014 "),KX=a("a"),nsr=o("TFCTRLLMHeadModel"),ssr=o(" (CTRL model)"),lsr=l(),ZF=a("li"),b_e=a("strong"),isr=o("distilbert"),dsr=o(" \u2014 "),ZX=a("a"),csr=o("TFDistilBertForMaskedLM"),fsr=o(" (DistilBERT model)"),msr=l(),e6=a("li"),v_e=a("strong"),gsr=o("electra"),hsr=o(" \u2014 "),ez=a("a"),psr=o("TFElectraForPreTraining"),usr=o(" (ELECTRA model)"),_sr=l(),o6=a("li"),F_e=a("strong"),bsr=o("flaubert"),vsr=o(" \u2014 "),oz=a("a"),Fsr=o("TFFlaubertWithLMHeadModel"),Tsr=o(" (FlauBERT model)"),Msr=l(),r6=a("li"),T_e=a("strong"),Esr=o("funnel"),Csr=o(" \u2014 "),rz=a("a"),wsr=o("TFFunnelForPreTraining"),Asr=o(" (Funnel Transformer model)"),ysr=l(),t6=a("li"),M_e=a("strong"),Lsr=o("gpt2"),xsr=o(" \u2014 "),tz=a("a"),$sr=o("TFGPT2LMHeadModel"),ksr=o(" (OpenAI GPT-2 model)"),Ssr=l(),a6=a("li"),E_e=a("strong"),Rsr=o("layoutlm"),Bsr=o(" \u2014 "),az=a("a"),Psr=o("TFLayoutLMForMaskedLM"),Isr=o(" (LayoutLM model)"),qsr=l(),n6=a("li"),C_e=a("strong"),Nsr=o("lxmert"),jsr=o(" \u2014 "),nz=a("a"),Dsr=o("TFLxmertForPreTraining"),Gsr=o(" (LXMERT model)"),Osr=l(),s6=a("li"),w_e=a("strong"),Vsr=o("mobilebert"),Xsr=o(" \u2014 "),sz=a("a"),zsr=o("TFMobileBertForPreTraining"),Qsr=o(" (MobileBERT model)"),Wsr=l(),l6=a("li"),A_e=a("strong"),Hsr=o("mpnet"),Usr=o(" \u2014 "),lz=a("a"),Jsr=o("TFMPNetForMaskedLM"),Ysr=o(" (MPNet model)"),Ksr=l(),i6=a("li"),y_e=a("strong"),Zsr=o("openai-gpt"),elr=o(" \u2014 "),iz=a("a"),olr=o("TFOpenAIGPTLMHeadModel"),rlr=o(" (OpenAI GPT model)"),tlr=l(),d6=a("li"),L_e=a("strong"),alr=o("roberta"),nlr=o(" \u2014 "),dz=a("a"),slr=o("TFRobertaForMaskedLM"),llr=o(" (RoBERTa model)"),ilr=l(),c6=a("li"),x_e=a("strong"),dlr=o("t5"),clr=o(" \u2014 "),cz=a("a"),flr=o("TFT5ForConditionalGeneration"),mlr=o(" (T5 model)"),glr=l(),f6=a("li"),$_e=a("strong"),hlr=o("tapas"),plr=o(" \u2014 "),fz=a("a"),ulr=o("TFTapasForMaskedLM"),_lr=o(" (TAPAS model)"),blr=l(),m6=a("li"),k_e=a("strong"),vlr=o("transfo-xl"),Flr=o(" \u2014 "),mz=a("a"),Tlr=o("TFTransfoXLLMHeadModel"),Mlr=o(" (Transformer-XL model)"),Elr=l(),g6=a("li"),S_e=a("strong"),Clr=o("vit_mae"),wlr=o(" \u2014 "),gz=a("a"),Alr=o("TFViTMAEForPreTraining"),ylr=o(" (ViTMAE model)"),Llr=l(),h6=a("li"),R_e=a("strong"),xlr=o("xlm"),$lr=o(" \u2014 "),hz=a("a"),klr=o("TFXLMWithLMHeadModel"),Slr=o(" (XLM model)"),Rlr=l(),p6=a("li"),B_e=a("strong"),Blr=o("xlm-roberta"),Plr=o(" \u2014 "),pz=a("a"),Ilr=o("TFXLMRobertaForMaskedLM"),qlr=o(" (XLM-RoBERTa model)"),Nlr=l(),u6=a("li"),P_e=a("strong"),jlr=o("xlnet"),Dlr=o(" \u2014 "),uz=a("a"),Glr=o("TFXLNetLMHeadModel"),Olr=o(" (XLNet model)"),Vlr=l(),F(_6.$$.fragment),DBe=l(),qd=a("h2"),b6=a("a"),I_e=a("span"),F(aL.$$.fragment),Xlr=l(),q_e=a("span"),zlr=o("TFAutoModelForCausalLM"),GBe=l(),Yo=a("div"),F(nL.$$.fragment),Qlr=l(),Nd=a("p"),Wlr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),_z=a("a"),Hlr=o("from_pretrained()"),Ulr=o(" class method or the "),bz=a("a"),Jlr=o("from_config()"),Ylr=o(` class
method.`),Klr=l(),sL=a("p"),Zlr=o("This class cannot be instantiated directly using "),N_e=a("code"),eir=o("__init__()"),oir=o(" (throws an error)."),rir=l(),Ct=a("div"),F(lL.$$.fragment),tir=l(),j_e=a("p"),air=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),nir=l(),jd=a("p"),sir=o(`Note:
Loading a model from its configuration file does `),D_e=a("strong"),lir=o("not"),iir=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vz=a("a"),dir=o("from_pretrained()"),cir=o(" to load the model weights."),fir=l(),F(v6.$$.fragment),mir=l(),wr=a("div"),F(iL.$$.fragment),gir=l(),G_e=a("p"),hir=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),pir=l(),Ya=a("p"),uir=o("The model class to instantiate is selected based on the "),O_e=a("code"),_ir=o("model_type"),bir=o(` property of the config object (either
passed as an argument or loaded from `),V_e=a("code"),vir=o("pretrained_model_name_or_path"),Fir=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),X_e=a("code"),Tir=o("pretrained_model_name_or_path"),Mir=o(":"),Eir=l(),Te=a("ul"),F6=a("li"),z_e=a("strong"),Cir=o("bert"),wir=o(" \u2014 "),Fz=a("a"),Air=o("TFBertLMHeadModel"),yir=o(" (BERT model)"),Lir=l(),T6=a("li"),Q_e=a("strong"),xir=o("camembert"),$ir=o(" \u2014 "),Tz=a("a"),kir=o("TFCamembertForCausalLM"),Sir=o(" (CamemBERT model)"),Rir=l(),M6=a("li"),W_e=a("strong"),Bir=o("ctrl"),Pir=o(" \u2014 "),Mz=a("a"),Iir=o("TFCTRLLMHeadModel"),qir=o(" (CTRL model)"),Nir=l(),E6=a("li"),H_e=a("strong"),jir=o("gpt2"),Dir=o(" \u2014 "),Ez=a("a"),Gir=o("TFGPT2LMHeadModel"),Oir=o(" (OpenAI GPT-2 model)"),Vir=l(),C6=a("li"),U_e=a("strong"),Xir=o("gptj"),zir=o(" \u2014 "),Cz=a("a"),Qir=o("TFGPTJForCausalLM"),Wir=o(" (GPT-J model)"),Hir=l(),w6=a("li"),J_e=a("strong"),Uir=o("openai-gpt"),Jir=o(" \u2014 "),wz=a("a"),Yir=o("TFOpenAIGPTLMHeadModel"),Kir=o(" (OpenAI GPT model)"),Zir=l(),A6=a("li"),Y_e=a("strong"),edr=o("rembert"),odr=o(" \u2014 "),Az=a("a"),rdr=o("TFRemBertForCausalLM"),tdr=o(" (RemBERT model)"),adr=l(),y6=a("li"),K_e=a("strong"),ndr=o("roberta"),sdr=o(" \u2014 "),yz=a("a"),ldr=o("TFRobertaForCausalLM"),idr=o(" (RoBERTa model)"),ddr=l(),L6=a("li"),Z_e=a("strong"),cdr=o("roformer"),fdr=o(" \u2014 "),Lz=a("a"),mdr=o("TFRoFormerForCausalLM"),gdr=o(" (RoFormer model)"),hdr=l(),x6=a("li"),e1e=a("strong"),pdr=o("transfo-xl"),udr=o(" \u2014 "),xz=a("a"),_dr=o("TFTransfoXLLMHeadModel"),bdr=o(" (Transformer-XL model)"),vdr=l(),$6=a("li"),o1e=a("strong"),Fdr=o("xlm"),Tdr=o(" \u2014 "),$z=a("a"),Mdr=o("TFXLMWithLMHeadModel"),Edr=o(" (XLM model)"),Cdr=l(),k6=a("li"),r1e=a("strong"),wdr=o("xlnet"),Adr=o(" \u2014 "),kz=a("a"),ydr=o("TFXLNetLMHeadModel"),Ldr=o(" (XLNet model)"),xdr=l(),F(S6.$$.fragment),OBe=l(),Dd=a("h2"),R6=a("a"),t1e=a("span"),F(dL.$$.fragment),$dr=l(),a1e=a("span"),kdr=o("TFAutoModelForImageClassification"),VBe=l(),Ko=a("div"),F(cL.$$.fragment),Sdr=l(),Gd=a("p"),Rdr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Sz=a("a"),Bdr=o("from_pretrained()"),Pdr=o(" class method or the "),Rz=a("a"),Idr=o("from_config()"),qdr=o(` class
method.`),Ndr=l(),fL=a("p"),jdr=o("This class cannot be instantiated directly using "),n1e=a("code"),Ddr=o("__init__()"),Gdr=o(" (throws an error)."),Odr=l(),wt=a("div"),F(mL.$$.fragment),Vdr=l(),s1e=a("p"),Xdr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),zdr=l(),Od=a("p"),Qdr=o(`Note:
Loading a model from its configuration file does `),l1e=a("strong"),Wdr=o("not"),Hdr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Bz=a("a"),Udr=o("from_pretrained()"),Jdr=o(" to load the model weights."),Ydr=l(),F(B6.$$.fragment),Kdr=l(),Ar=a("div"),F(gL.$$.fragment),Zdr=l(),i1e=a("p"),ecr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),ocr=l(),Ka=a("p"),rcr=o("The model class to instantiate is selected based on the "),d1e=a("code"),tcr=o("model_type"),acr=o(` property of the config object (either
passed as an argument or loaded from `),c1e=a("code"),ncr=o("pretrained_model_name_or_path"),scr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),f1e=a("code"),lcr=o("pretrained_model_name_or_path"),icr=o(":"),dcr=l(),hL=a("ul"),P6=a("li"),m1e=a("strong"),ccr=o("convnext"),fcr=o(" \u2014 "),Pz=a("a"),mcr=o("TFConvNextForImageClassification"),gcr=o(" (ConvNext model)"),hcr=l(),I6=a("li"),g1e=a("strong"),pcr=o("vit"),ucr=o(" \u2014 "),Iz=a("a"),_cr=o("TFViTForImageClassification"),bcr=o(" (ViT model)"),vcr=l(),F(q6.$$.fragment),XBe=l(),Vd=a("h2"),N6=a("a"),h1e=a("span"),F(pL.$$.fragment),Fcr=l(),p1e=a("span"),Tcr=o("TFAutoModelForMaskedLM"),zBe=l(),Zo=a("div"),F(uL.$$.fragment),Mcr=l(),Xd=a("p"),Ecr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),qz=a("a"),Ccr=o("from_pretrained()"),wcr=o(" class method or the "),Nz=a("a"),Acr=o("from_config()"),ycr=o(` class
method.`),Lcr=l(),_L=a("p"),xcr=o("This class cannot be instantiated directly using "),u1e=a("code"),$cr=o("__init__()"),kcr=o(" (throws an error)."),Scr=l(),At=a("div"),F(bL.$$.fragment),Rcr=l(),_1e=a("p"),Bcr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Pcr=l(),zd=a("p"),Icr=o(`Note:
Loading a model from its configuration file does `),b1e=a("strong"),qcr=o("not"),Ncr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jz=a("a"),jcr=o("from_pretrained()"),Dcr=o(" to load the model weights."),Gcr=l(),F(j6.$$.fragment),Ocr=l(),yr=a("div"),F(vL.$$.fragment),Vcr=l(),v1e=a("p"),Xcr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),zcr=l(),Za=a("p"),Qcr=o("The model class to instantiate is selected based on the "),F1e=a("code"),Wcr=o("model_type"),Hcr=o(` property of the config object (either
passed as an argument or loaded from `),T1e=a("code"),Ucr=o("pretrained_model_name_or_path"),Jcr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),M1e=a("code"),Ycr=o("pretrained_model_name_or_path"),Kcr=o(":"),Zcr=l(),ie=a("ul"),D6=a("li"),E1e=a("strong"),efr=o("albert"),ofr=o(" \u2014 "),Dz=a("a"),rfr=o("TFAlbertForMaskedLM"),tfr=o(" (ALBERT model)"),afr=l(),G6=a("li"),C1e=a("strong"),nfr=o("bert"),sfr=o(" \u2014 "),Gz=a("a"),lfr=o("TFBertForMaskedLM"),ifr=o(" (BERT model)"),dfr=l(),O6=a("li"),w1e=a("strong"),cfr=o("camembert"),ffr=o(" \u2014 "),Oz=a("a"),mfr=o("TFCamembertForMaskedLM"),gfr=o(" (CamemBERT model)"),hfr=l(),V6=a("li"),A1e=a("strong"),pfr=o("convbert"),ufr=o(" \u2014 "),Vz=a("a"),_fr=o("TFConvBertForMaskedLM"),bfr=o(" (ConvBERT model)"),vfr=l(),X6=a("li"),y1e=a("strong"),Ffr=o("deberta"),Tfr=o(" \u2014 "),Xz=a("a"),Mfr=o("TFDebertaForMaskedLM"),Efr=o(" (DeBERTa model)"),Cfr=l(),z6=a("li"),L1e=a("strong"),wfr=o("deberta-v2"),Afr=o(" \u2014 "),zz=a("a"),yfr=o("TFDebertaV2ForMaskedLM"),Lfr=o(" (DeBERTa-v2 model)"),xfr=l(),Q6=a("li"),x1e=a("strong"),$fr=o("distilbert"),kfr=o(" \u2014 "),Qz=a("a"),Sfr=o("TFDistilBertForMaskedLM"),Rfr=o(" (DistilBERT model)"),Bfr=l(),W6=a("li"),$1e=a("strong"),Pfr=o("electra"),Ifr=o(" \u2014 "),Wz=a("a"),qfr=o("TFElectraForMaskedLM"),Nfr=o(" (ELECTRA model)"),jfr=l(),H6=a("li"),k1e=a("strong"),Dfr=o("flaubert"),Gfr=o(" \u2014 "),Hz=a("a"),Ofr=o("TFFlaubertWithLMHeadModel"),Vfr=o(" (FlauBERT model)"),Xfr=l(),U6=a("li"),S1e=a("strong"),zfr=o("funnel"),Qfr=o(" \u2014 "),Uz=a("a"),Wfr=o("TFFunnelForMaskedLM"),Hfr=o(" (Funnel Transformer model)"),Ufr=l(),J6=a("li"),R1e=a("strong"),Jfr=o("layoutlm"),Yfr=o(" \u2014 "),Jz=a("a"),Kfr=o("TFLayoutLMForMaskedLM"),Zfr=o(" (LayoutLM model)"),emr=l(),Y6=a("li"),B1e=a("strong"),omr=o("longformer"),rmr=o(" \u2014 "),Yz=a("a"),tmr=o("TFLongformerForMaskedLM"),amr=o(" (Longformer model)"),nmr=l(),K6=a("li"),P1e=a("strong"),smr=o("mobilebert"),lmr=o(" \u2014 "),Kz=a("a"),imr=o("TFMobileBertForMaskedLM"),dmr=o(" (MobileBERT model)"),cmr=l(),Z6=a("li"),I1e=a("strong"),fmr=o("mpnet"),mmr=o(" \u2014 "),Zz=a("a"),gmr=o("TFMPNetForMaskedLM"),hmr=o(" (MPNet model)"),pmr=l(),eT=a("li"),q1e=a("strong"),umr=o("rembert"),_mr=o(" \u2014 "),eQ=a("a"),bmr=o("TFRemBertForMaskedLM"),vmr=o(" (RemBERT model)"),Fmr=l(),oT=a("li"),N1e=a("strong"),Tmr=o("roberta"),Mmr=o(" \u2014 "),oQ=a("a"),Emr=o("TFRobertaForMaskedLM"),Cmr=o(" (RoBERTa model)"),wmr=l(),rT=a("li"),j1e=a("strong"),Amr=o("roformer"),ymr=o(" \u2014 "),rQ=a("a"),Lmr=o("TFRoFormerForMaskedLM"),xmr=o(" (RoFormer model)"),$mr=l(),tT=a("li"),D1e=a("strong"),kmr=o("tapas"),Smr=o(" \u2014 "),tQ=a("a"),Rmr=o("TFTapasForMaskedLM"),Bmr=o(" (TAPAS model)"),Pmr=l(),aT=a("li"),G1e=a("strong"),Imr=o("xlm"),qmr=o(" \u2014 "),aQ=a("a"),Nmr=o("TFXLMWithLMHeadModel"),jmr=o(" (XLM model)"),Dmr=l(),nT=a("li"),O1e=a("strong"),Gmr=o("xlm-roberta"),Omr=o(" \u2014 "),nQ=a("a"),Vmr=o("TFXLMRobertaForMaskedLM"),Xmr=o(" (XLM-RoBERTa model)"),zmr=l(),F(sT.$$.fragment),QBe=l(),Qd=a("h2"),lT=a("a"),V1e=a("span"),F(FL.$$.fragment),Qmr=l(),X1e=a("span"),Wmr=o("TFAutoModelForSeq2SeqLM"),WBe=l(),er=a("div"),F(TL.$$.fragment),Hmr=l(),Wd=a("p"),Umr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),sQ=a("a"),Jmr=o("from_pretrained()"),Ymr=o(" class method or the "),lQ=a("a"),Kmr=o("from_config()"),Zmr=o(` class
method.`),egr=l(),ML=a("p"),ogr=o("This class cannot be instantiated directly using "),z1e=a("code"),rgr=o("__init__()"),tgr=o(" (throws an error)."),agr=l(),yt=a("div"),F(EL.$$.fragment),ngr=l(),Q1e=a("p"),sgr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),lgr=l(),Hd=a("p"),igr=o(`Note:
Loading a model from its configuration file does `),W1e=a("strong"),dgr=o("not"),cgr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),iQ=a("a"),fgr=o("from_pretrained()"),mgr=o(" to load the model weights."),ggr=l(),F(iT.$$.fragment),hgr=l(),Lr=a("div"),F(CL.$$.fragment),pgr=l(),H1e=a("p"),ugr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),_gr=l(),en=a("p"),bgr=o("The model class to instantiate is selected based on the "),U1e=a("code"),vgr=o("model_type"),Fgr=o(` property of the config object (either
passed as an argument or loaded from `),J1e=a("code"),Tgr=o("pretrained_model_name_or_path"),Mgr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Y1e=a("code"),Egr=o("pretrained_model_name_or_path"),Cgr=o(":"),wgr=l(),ye=a("ul"),dT=a("li"),K1e=a("strong"),Agr=o("bart"),ygr=o(" \u2014 "),dQ=a("a"),Lgr=o("TFBartForConditionalGeneration"),xgr=o(" (BART model)"),$gr=l(),cT=a("li"),Z1e=a("strong"),kgr=o("blenderbot"),Sgr=o(" \u2014 "),cQ=a("a"),Rgr=o("TFBlenderbotForConditionalGeneration"),Bgr=o(" (Blenderbot model)"),Pgr=l(),fT=a("li"),e9e=a("strong"),Igr=o("blenderbot-small"),qgr=o(" \u2014 "),fQ=a("a"),Ngr=o("TFBlenderbotSmallForConditionalGeneration"),jgr=o(" (BlenderbotSmall model)"),Dgr=l(),mT=a("li"),o9e=a("strong"),Ggr=o("encoder-decoder"),Ogr=o(" \u2014 "),mQ=a("a"),Vgr=o("TFEncoderDecoderModel"),Xgr=o(" (Encoder decoder model)"),zgr=l(),gT=a("li"),r9e=a("strong"),Qgr=o("led"),Wgr=o(" \u2014 "),gQ=a("a"),Hgr=o("TFLEDForConditionalGeneration"),Ugr=o(" (LED model)"),Jgr=l(),hT=a("li"),t9e=a("strong"),Ygr=o("marian"),Kgr=o(" \u2014 "),hQ=a("a"),Zgr=o("TFMarianMTModel"),ehr=o(" (Marian model)"),ohr=l(),pT=a("li"),a9e=a("strong"),rhr=o("mbart"),thr=o(" \u2014 "),pQ=a("a"),ahr=o("TFMBartForConditionalGeneration"),nhr=o(" (mBART model)"),shr=l(),uT=a("li"),n9e=a("strong"),lhr=o("mt5"),ihr=o(" \u2014 "),uQ=a("a"),dhr=o("TFMT5ForConditionalGeneration"),chr=o(" (mT5 model)"),fhr=l(),_T=a("li"),s9e=a("strong"),mhr=o("pegasus"),ghr=o(" \u2014 "),_Q=a("a"),hhr=o("TFPegasusForConditionalGeneration"),phr=o(" (Pegasus model)"),uhr=l(),bT=a("li"),l9e=a("strong"),_hr=o("t5"),bhr=o(" \u2014 "),bQ=a("a"),vhr=o("TFT5ForConditionalGeneration"),Fhr=o(" (T5 model)"),Thr=l(),F(vT.$$.fragment),HBe=l(),Ud=a("h2"),FT=a("a"),i9e=a("span"),F(wL.$$.fragment),Mhr=l(),d9e=a("span"),Ehr=o("TFAutoModelForSequenceClassification"),UBe=l(),or=a("div"),F(AL.$$.fragment),Chr=l(),Jd=a("p"),whr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),vQ=a("a"),Ahr=o("from_pretrained()"),yhr=o(" class method or the "),FQ=a("a"),Lhr=o("from_config()"),xhr=o(` class
method.`),$hr=l(),yL=a("p"),khr=o("This class cannot be instantiated directly using "),c9e=a("code"),Shr=o("__init__()"),Rhr=o(" (throws an error)."),Bhr=l(),Lt=a("div"),F(LL.$$.fragment),Phr=l(),f9e=a("p"),Ihr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),qhr=l(),Yd=a("p"),Nhr=o(`Note:
Loading a model from its configuration file does `),m9e=a("strong"),jhr=o("not"),Dhr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),TQ=a("a"),Ghr=o("from_pretrained()"),Ohr=o(" to load the model weights."),Vhr=l(),F(TT.$$.fragment),Xhr=l(),xr=a("div"),F(xL.$$.fragment),zhr=l(),g9e=a("p"),Qhr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Whr=l(),on=a("p"),Hhr=o("The model class to instantiate is selected based on the "),h9e=a("code"),Uhr=o("model_type"),Jhr=o(` property of the config object (either
passed as an argument or loaded from `),p9e=a("code"),Yhr=o("pretrained_model_name_or_path"),Khr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),u9e=a("code"),Zhr=o("pretrained_model_name_or_path"),epr=o(":"),opr=l(),Z=a("ul"),MT=a("li"),_9e=a("strong"),rpr=o("albert"),tpr=o(" \u2014 "),MQ=a("a"),apr=o("TFAlbertForSequenceClassification"),npr=o(" (ALBERT model)"),spr=l(),ET=a("li"),b9e=a("strong"),lpr=o("bert"),ipr=o(" \u2014 "),EQ=a("a"),dpr=o("TFBertForSequenceClassification"),cpr=o(" (BERT model)"),fpr=l(),CT=a("li"),v9e=a("strong"),mpr=o("camembert"),gpr=o(" \u2014 "),CQ=a("a"),hpr=o("TFCamembertForSequenceClassification"),ppr=o(" (CamemBERT model)"),upr=l(),wT=a("li"),F9e=a("strong"),_pr=o("convbert"),bpr=o(" \u2014 "),wQ=a("a"),vpr=o("TFConvBertForSequenceClassification"),Fpr=o(" (ConvBERT model)"),Tpr=l(),AT=a("li"),T9e=a("strong"),Mpr=o("ctrl"),Epr=o(" \u2014 "),AQ=a("a"),Cpr=o("TFCTRLForSequenceClassification"),wpr=o(" (CTRL model)"),Apr=l(),yT=a("li"),M9e=a("strong"),ypr=o("deberta"),Lpr=o(" \u2014 "),yQ=a("a"),xpr=o("TFDebertaForSequenceClassification"),$pr=o(" (DeBERTa model)"),kpr=l(),LT=a("li"),E9e=a("strong"),Spr=o("deberta-v2"),Rpr=o(" \u2014 "),LQ=a("a"),Bpr=o("TFDebertaV2ForSequenceClassification"),Ppr=o(" (DeBERTa-v2 model)"),Ipr=l(),xT=a("li"),C9e=a("strong"),qpr=o("distilbert"),Npr=o(" \u2014 "),xQ=a("a"),jpr=o("TFDistilBertForSequenceClassification"),Dpr=o(" (DistilBERT model)"),Gpr=l(),$T=a("li"),w9e=a("strong"),Opr=o("electra"),Vpr=o(" \u2014 "),$Q=a("a"),Xpr=o("TFElectraForSequenceClassification"),zpr=o(" (ELECTRA model)"),Qpr=l(),kT=a("li"),A9e=a("strong"),Wpr=o("flaubert"),Hpr=o(" \u2014 "),kQ=a("a"),Upr=o("TFFlaubertForSequenceClassification"),Jpr=o(" (FlauBERT model)"),Ypr=l(),ST=a("li"),y9e=a("strong"),Kpr=o("funnel"),Zpr=o(" \u2014 "),SQ=a("a"),eur=o("TFFunnelForSequenceClassification"),our=o(" (Funnel Transformer model)"),rur=l(),RT=a("li"),L9e=a("strong"),tur=o("gpt2"),aur=o(" \u2014 "),RQ=a("a"),nur=o("TFGPT2ForSequenceClassification"),sur=o(" (OpenAI GPT-2 model)"),lur=l(),BT=a("li"),x9e=a("strong"),iur=o("gptj"),dur=o(" \u2014 "),BQ=a("a"),cur=o("TFGPTJForSequenceClassification"),fur=o(" (GPT-J model)"),mur=l(),PT=a("li"),$9e=a("strong"),gur=o("layoutlm"),hur=o(" \u2014 "),PQ=a("a"),pur=o("TFLayoutLMForSequenceClassification"),uur=o(" (LayoutLM model)"),_ur=l(),IT=a("li"),k9e=a("strong"),bur=o("longformer"),vur=o(" \u2014 "),IQ=a("a"),Fur=o("TFLongformerForSequenceClassification"),Tur=o(" (Longformer model)"),Mur=l(),qT=a("li"),S9e=a("strong"),Eur=o("mobilebert"),Cur=o(" \u2014 "),qQ=a("a"),wur=o("TFMobileBertForSequenceClassification"),Aur=o(" (MobileBERT model)"),yur=l(),NT=a("li"),R9e=a("strong"),Lur=o("mpnet"),xur=o(" \u2014 "),NQ=a("a"),$ur=o("TFMPNetForSequenceClassification"),kur=o(" (MPNet model)"),Sur=l(),jT=a("li"),B9e=a("strong"),Rur=o("openai-gpt"),Bur=o(" \u2014 "),jQ=a("a"),Pur=o("TFOpenAIGPTForSequenceClassification"),Iur=o(" (OpenAI GPT model)"),qur=l(),DT=a("li"),P9e=a("strong"),Nur=o("rembert"),jur=o(" \u2014 "),DQ=a("a"),Dur=o("TFRemBertForSequenceClassification"),Gur=o(" (RemBERT model)"),Our=l(),GT=a("li"),I9e=a("strong"),Vur=o("roberta"),Xur=o(" \u2014 "),GQ=a("a"),zur=o("TFRobertaForSequenceClassification"),Qur=o(" (RoBERTa model)"),Wur=l(),OT=a("li"),q9e=a("strong"),Hur=o("roformer"),Uur=o(" \u2014 "),OQ=a("a"),Jur=o("TFRoFormerForSequenceClassification"),Yur=o(" (RoFormer model)"),Kur=l(),VT=a("li"),N9e=a("strong"),Zur=o("tapas"),e_r=o(" \u2014 "),VQ=a("a"),o_r=o("TFTapasForSequenceClassification"),r_r=o(" (TAPAS model)"),t_r=l(),XT=a("li"),j9e=a("strong"),a_r=o("transfo-xl"),n_r=o(" \u2014 "),XQ=a("a"),s_r=o("TFTransfoXLForSequenceClassification"),l_r=o(" (Transformer-XL model)"),i_r=l(),zT=a("li"),D9e=a("strong"),d_r=o("xlm"),c_r=o(" \u2014 "),zQ=a("a"),f_r=o("TFXLMForSequenceClassification"),m_r=o(" (XLM model)"),g_r=l(),QT=a("li"),G9e=a("strong"),h_r=o("xlm-roberta"),p_r=o(" \u2014 "),QQ=a("a"),u_r=o("TFXLMRobertaForSequenceClassification"),__r=o(" (XLM-RoBERTa model)"),b_r=l(),WT=a("li"),O9e=a("strong"),v_r=o("xlnet"),F_r=o(" \u2014 "),WQ=a("a"),T_r=o("TFXLNetForSequenceClassification"),M_r=o(" (XLNet model)"),E_r=l(),F(HT.$$.fragment),JBe=l(),Kd=a("h2"),UT=a("a"),V9e=a("span"),F($L.$$.fragment),C_r=l(),X9e=a("span"),w_r=o("TFAutoModelForMultipleChoice"),YBe=l(),rr=a("div"),F(kL.$$.fragment),A_r=l(),Zd=a("p"),y_r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),HQ=a("a"),L_r=o("from_pretrained()"),x_r=o(" class method or the "),UQ=a("a"),$_r=o("from_config()"),k_r=o(` class
method.`),S_r=l(),SL=a("p"),R_r=o("This class cannot be instantiated directly using "),z9e=a("code"),B_r=o("__init__()"),P_r=o(" (throws an error)."),I_r=l(),xt=a("div"),F(RL.$$.fragment),q_r=l(),Q9e=a("p"),N_r=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),j_r=l(),ec=a("p"),D_r=o(`Note:
Loading a model from its configuration file does `),W9e=a("strong"),G_r=o("not"),O_r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),JQ=a("a"),V_r=o("from_pretrained()"),X_r=o(" to load the model weights."),z_r=l(),F(JT.$$.fragment),Q_r=l(),$r=a("div"),F(BL.$$.fragment),W_r=l(),H9e=a("p"),H_r=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),U_r=l(),rn=a("p"),J_r=o("The model class to instantiate is selected based on the "),U9e=a("code"),Y_r=o("model_type"),K_r=o(` property of the config object (either
passed as an argument or loaded from `),J9e=a("code"),Z_r=o("pretrained_model_name_or_path"),e1r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Y9e=a("code"),o1r=o("pretrained_model_name_or_path"),r1r=o(":"),t1r=l(),pe=a("ul"),YT=a("li"),K9e=a("strong"),a1r=o("albert"),n1r=o(" \u2014 "),YQ=a("a"),s1r=o("TFAlbertForMultipleChoice"),l1r=o(" (ALBERT model)"),i1r=l(),KT=a("li"),Z9e=a("strong"),d1r=o("bert"),c1r=o(" \u2014 "),KQ=a("a"),f1r=o("TFBertForMultipleChoice"),m1r=o(" (BERT model)"),g1r=l(),ZT=a("li"),ebe=a("strong"),h1r=o("camembert"),p1r=o(" \u2014 "),ZQ=a("a"),u1r=o("TFCamembertForMultipleChoice"),_1r=o(" (CamemBERT model)"),b1r=l(),eM=a("li"),obe=a("strong"),v1r=o("convbert"),F1r=o(" \u2014 "),eW=a("a"),T1r=o("TFConvBertForMultipleChoice"),M1r=o(" (ConvBERT model)"),E1r=l(),oM=a("li"),rbe=a("strong"),C1r=o("distilbert"),w1r=o(" \u2014 "),oW=a("a"),A1r=o("TFDistilBertForMultipleChoice"),y1r=o(" (DistilBERT model)"),L1r=l(),rM=a("li"),tbe=a("strong"),x1r=o("electra"),$1r=o(" \u2014 "),rW=a("a"),k1r=o("TFElectraForMultipleChoice"),S1r=o(" (ELECTRA model)"),R1r=l(),tM=a("li"),abe=a("strong"),B1r=o("flaubert"),P1r=o(" \u2014 "),tW=a("a"),I1r=o("TFFlaubertForMultipleChoice"),q1r=o(" (FlauBERT model)"),N1r=l(),aM=a("li"),nbe=a("strong"),j1r=o("funnel"),D1r=o(" \u2014 "),aW=a("a"),G1r=o("TFFunnelForMultipleChoice"),O1r=o(" (Funnel Transformer model)"),V1r=l(),nM=a("li"),sbe=a("strong"),X1r=o("longformer"),z1r=o(" \u2014 "),nW=a("a"),Q1r=o("TFLongformerForMultipleChoice"),W1r=o(" (Longformer model)"),H1r=l(),sM=a("li"),lbe=a("strong"),U1r=o("mobilebert"),J1r=o(" \u2014 "),sW=a("a"),Y1r=o("TFMobileBertForMultipleChoice"),K1r=o(" (MobileBERT model)"),Z1r=l(),lM=a("li"),ibe=a("strong"),e9r=o("mpnet"),o9r=o(" \u2014 "),lW=a("a"),r9r=o("TFMPNetForMultipleChoice"),t9r=o(" (MPNet model)"),a9r=l(),iM=a("li"),dbe=a("strong"),n9r=o("rembert"),s9r=o(" \u2014 "),iW=a("a"),l9r=o("TFRemBertForMultipleChoice"),i9r=o(" (RemBERT model)"),d9r=l(),dM=a("li"),cbe=a("strong"),c9r=o("roberta"),f9r=o(" \u2014 "),dW=a("a"),m9r=o("TFRobertaForMultipleChoice"),g9r=o(" (RoBERTa model)"),h9r=l(),cM=a("li"),fbe=a("strong"),p9r=o("roformer"),u9r=o(" \u2014 "),cW=a("a"),_9r=o("TFRoFormerForMultipleChoice"),b9r=o(" (RoFormer model)"),v9r=l(),fM=a("li"),mbe=a("strong"),F9r=o("xlm"),T9r=o(" \u2014 "),fW=a("a"),M9r=o("TFXLMForMultipleChoice"),E9r=o(" (XLM model)"),C9r=l(),mM=a("li"),gbe=a("strong"),w9r=o("xlm-roberta"),A9r=o(" \u2014 "),mW=a("a"),y9r=o("TFXLMRobertaForMultipleChoice"),L9r=o(" (XLM-RoBERTa model)"),x9r=l(),gM=a("li"),hbe=a("strong"),$9r=o("xlnet"),k9r=o(" \u2014 "),gW=a("a"),S9r=o("TFXLNetForMultipleChoice"),R9r=o(" (XLNet model)"),B9r=l(),F(hM.$$.fragment),KBe=l(),oc=a("h2"),pM=a("a"),pbe=a("span"),F(PL.$$.fragment),P9r=l(),ube=a("span"),I9r=o("TFAutoModelForTableQuestionAnswering"),ZBe=l(),tr=a("div"),F(IL.$$.fragment),q9r=l(),rc=a("p"),N9r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),hW=a("a"),j9r=o("from_pretrained()"),D9r=o(" class method or the "),pW=a("a"),G9r=o("from_config()"),O9r=o(` class
method.`),V9r=l(),qL=a("p"),X9r=o("This class cannot be instantiated directly using "),_be=a("code"),z9r=o("__init__()"),Q9r=o(" (throws an error)."),W9r=l(),$t=a("div"),F(NL.$$.fragment),H9r=l(),bbe=a("p"),U9r=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),J9r=l(),tc=a("p"),Y9r=o(`Note:
Loading a model from its configuration file does `),vbe=a("strong"),K9r=o("not"),Z9r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uW=a("a"),ebr=o("from_pretrained()"),obr=o(" to load the model weights."),rbr=l(),F(uM.$$.fragment),tbr=l(),kr=a("div"),F(jL.$$.fragment),abr=l(),Fbe=a("p"),nbr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),sbr=l(),tn=a("p"),lbr=o("The model class to instantiate is selected based on the "),Tbe=a("code"),ibr=o("model_type"),dbr=o(` property of the config object (either
passed as an argument or loaded from `),Mbe=a("code"),cbr=o("pretrained_model_name_or_path"),fbr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ebe=a("code"),mbr=o("pretrained_model_name_or_path"),gbr=o(":"),hbr=l(),Cbe=a("ul"),_M=a("li"),wbe=a("strong"),pbr=o("tapas"),ubr=o(" \u2014 "),_W=a("a"),_br=o("TFTapasForQuestionAnswering"),bbr=o(" (TAPAS model)"),vbr=l(),F(bM.$$.fragment),ePe=l(),ac=a("h2"),vM=a("a"),Abe=a("span"),F(DL.$$.fragment),Fbr=l(),ybe=a("span"),Tbr=o("TFAutoModelForTokenClassification"),oPe=l(),ar=a("div"),F(GL.$$.fragment),Mbr=l(),nc=a("p"),Ebr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),bW=a("a"),Cbr=o("from_pretrained()"),wbr=o(" class method or the "),vW=a("a"),Abr=o("from_config()"),ybr=o(` class
method.`),Lbr=l(),OL=a("p"),xbr=o("This class cannot be instantiated directly using "),Lbe=a("code"),$br=o("__init__()"),kbr=o(" (throws an error)."),Sbr=l(),kt=a("div"),F(VL.$$.fragment),Rbr=l(),xbe=a("p"),Bbr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Pbr=l(),sc=a("p"),Ibr=o(`Note:
Loading a model from its configuration file does `),$be=a("strong"),qbr=o("not"),Nbr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),FW=a("a"),jbr=o("from_pretrained()"),Dbr=o(" to load the model weights."),Gbr=l(),F(FM.$$.fragment),Obr=l(),Sr=a("div"),F(XL.$$.fragment),Vbr=l(),kbe=a("p"),Xbr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),zbr=l(),an=a("p"),Qbr=o("The model class to instantiate is selected based on the "),Sbe=a("code"),Wbr=o("model_type"),Hbr=o(` property of the config object (either
passed as an argument or loaded from `),Rbe=a("code"),Ubr=o("pretrained_model_name_or_path"),Jbr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bbe=a("code"),Ybr=o("pretrained_model_name_or_path"),Kbr=o(":"),Zbr=l(),de=a("ul"),TM=a("li"),Pbe=a("strong"),e2r=o("albert"),o2r=o(" \u2014 "),TW=a("a"),r2r=o("TFAlbertForTokenClassification"),t2r=o(" (ALBERT model)"),a2r=l(),MM=a("li"),Ibe=a("strong"),n2r=o("bert"),s2r=o(" \u2014 "),MW=a("a"),l2r=o("TFBertForTokenClassification"),i2r=o(" (BERT model)"),d2r=l(),EM=a("li"),qbe=a("strong"),c2r=o("camembert"),f2r=o(" \u2014 "),EW=a("a"),m2r=o("TFCamembertForTokenClassification"),g2r=o(" (CamemBERT model)"),h2r=l(),CM=a("li"),Nbe=a("strong"),p2r=o("convbert"),u2r=o(" \u2014 "),CW=a("a"),_2r=o("TFConvBertForTokenClassification"),b2r=o(" (ConvBERT model)"),v2r=l(),wM=a("li"),jbe=a("strong"),F2r=o("deberta"),T2r=o(" \u2014 "),wW=a("a"),M2r=o("TFDebertaForTokenClassification"),E2r=o(" (DeBERTa model)"),C2r=l(),AM=a("li"),Dbe=a("strong"),w2r=o("deberta-v2"),A2r=o(" \u2014 "),AW=a("a"),y2r=o("TFDebertaV2ForTokenClassification"),L2r=o(" (DeBERTa-v2 model)"),x2r=l(),yM=a("li"),Gbe=a("strong"),$2r=o("distilbert"),k2r=o(" \u2014 "),yW=a("a"),S2r=o("TFDistilBertForTokenClassification"),R2r=o(" (DistilBERT model)"),B2r=l(),LM=a("li"),Obe=a("strong"),P2r=o("electra"),I2r=o(" \u2014 "),LW=a("a"),q2r=o("TFElectraForTokenClassification"),N2r=o(" (ELECTRA model)"),j2r=l(),xM=a("li"),Vbe=a("strong"),D2r=o("flaubert"),G2r=o(" \u2014 "),xW=a("a"),O2r=o("TFFlaubertForTokenClassification"),V2r=o(" (FlauBERT model)"),X2r=l(),$M=a("li"),Xbe=a("strong"),z2r=o("funnel"),Q2r=o(" \u2014 "),$W=a("a"),W2r=o("TFFunnelForTokenClassification"),H2r=o(" (Funnel Transformer model)"),U2r=l(),kM=a("li"),zbe=a("strong"),J2r=o("layoutlm"),Y2r=o(" \u2014 "),kW=a("a"),K2r=o("TFLayoutLMForTokenClassification"),Z2r=o(" (LayoutLM model)"),e5r=l(),SM=a("li"),Qbe=a("strong"),o5r=o("longformer"),r5r=o(" \u2014 "),SW=a("a"),t5r=o("TFLongformerForTokenClassification"),a5r=o(" (Longformer model)"),n5r=l(),RM=a("li"),Wbe=a("strong"),s5r=o("mobilebert"),l5r=o(" \u2014 "),RW=a("a"),i5r=o("TFMobileBertForTokenClassification"),d5r=o(" (MobileBERT model)"),c5r=l(),BM=a("li"),Hbe=a("strong"),f5r=o("mpnet"),m5r=o(" \u2014 "),BW=a("a"),g5r=o("TFMPNetForTokenClassification"),h5r=o(" (MPNet model)"),p5r=l(),PM=a("li"),Ube=a("strong"),u5r=o("rembert"),_5r=o(" \u2014 "),PW=a("a"),b5r=o("TFRemBertForTokenClassification"),v5r=o(" (RemBERT model)"),F5r=l(),IM=a("li"),Jbe=a("strong"),T5r=o("roberta"),M5r=o(" \u2014 "),IW=a("a"),E5r=o("TFRobertaForTokenClassification"),C5r=o(" (RoBERTa model)"),w5r=l(),qM=a("li"),Ybe=a("strong"),A5r=o("roformer"),y5r=o(" \u2014 "),qW=a("a"),L5r=o("TFRoFormerForTokenClassification"),x5r=o(" (RoFormer model)"),$5r=l(),NM=a("li"),Kbe=a("strong"),k5r=o("xlm"),S5r=o(" \u2014 "),NW=a("a"),R5r=o("TFXLMForTokenClassification"),B5r=o(" (XLM model)"),P5r=l(),jM=a("li"),Zbe=a("strong"),I5r=o("xlm-roberta"),q5r=o(" \u2014 "),jW=a("a"),N5r=o("TFXLMRobertaForTokenClassification"),j5r=o(" (XLM-RoBERTa model)"),D5r=l(),DM=a("li"),e2e=a("strong"),G5r=o("xlnet"),O5r=o(" \u2014 "),DW=a("a"),V5r=o("TFXLNetForTokenClassification"),X5r=o(" (XLNet model)"),z5r=l(),F(GM.$$.fragment),rPe=l(),lc=a("h2"),OM=a("a"),o2e=a("span"),F(zL.$$.fragment),Q5r=l(),r2e=a("span"),W5r=o("TFAutoModelForQuestionAnswering"),tPe=l(),nr=a("div"),F(QL.$$.fragment),H5r=l(),ic=a("p"),U5r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),GW=a("a"),J5r=o("from_pretrained()"),Y5r=o(" class method or the "),OW=a("a"),K5r=o("from_config()"),Z5r=o(` class
method.`),evr=l(),WL=a("p"),ovr=o("This class cannot be instantiated directly using "),t2e=a("code"),rvr=o("__init__()"),tvr=o(" (throws an error)."),avr=l(),St=a("div"),F(HL.$$.fragment),nvr=l(),a2e=a("p"),svr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),lvr=l(),dc=a("p"),ivr=o(`Note:
Loading a model from its configuration file does `),n2e=a("strong"),dvr=o("not"),cvr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),VW=a("a"),fvr=o("from_pretrained()"),mvr=o(" to load the model weights."),gvr=l(),F(VM.$$.fragment),hvr=l(),Rr=a("div"),F(UL.$$.fragment),pvr=l(),s2e=a("p"),uvr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),_vr=l(),nn=a("p"),bvr=o("The model class to instantiate is selected based on the "),l2e=a("code"),vvr=o("model_type"),Fvr=o(` property of the config object (either
passed as an argument or loaded from `),i2e=a("code"),Tvr=o("pretrained_model_name_or_path"),Mvr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),d2e=a("code"),Evr=o("pretrained_model_name_or_path"),Cvr=o(":"),wvr=l(),ce=a("ul"),XM=a("li"),c2e=a("strong"),Avr=o("albert"),yvr=o(" \u2014 "),XW=a("a"),Lvr=o("TFAlbertForQuestionAnswering"),xvr=o(" (ALBERT model)"),$vr=l(),zM=a("li"),f2e=a("strong"),kvr=o("bert"),Svr=o(" \u2014 "),zW=a("a"),Rvr=o("TFBertForQuestionAnswering"),Bvr=o(" (BERT model)"),Pvr=l(),QM=a("li"),m2e=a("strong"),Ivr=o("camembert"),qvr=o(" \u2014 "),QW=a("a"),Nvr=o("TFCamembertForQuestionAnswering"),jvr=o(" (CamemBERT model)"),Dvr=l(),WM=a("li"),g2e=a("strong"),Gvr=o("convbert"),Ovr=o(" \u2014 "),WW=a("a"),Vvr=o("TFConvBertForQuestionAnswering"),Xvr=o(" (ConvBERT model)"),zvr=l(),HM=a("li"),h2e=a("strong"),Qvr=o("deberta"),Wvr=o(" \u2014 "),HW=a("a"),Hvr=o("TFDebertaForQuestionAnswering"),Uvr=o(" (DeBERTa model)"),Jvr=l(),UM=a("li"),p2e=a("strong"),Yvr=o("deberta-v2"),Kvr=o(" \u2014 "),UW=a("a"),Zvr=o("TFDebertaV2ForQuestionAnswering"),eFr=o(" (DeBERTa-v2 model)"),oFr=l(),JM=a("li"),u2e=a("strong"),rFr=o("distilbert"),tFr=o(" \u2014 "),JW=a("a"),aFr=o("TFDistilBertForQuestionAnswering"),nFr=o(" (DistilBERT model)"),sFr=l(),YM=a("li"),_2e=a("strong"),lFr=o("electra"),iFr=o(" \u2014 "),YW=a("a"),dFr=o("TFElectraForQuestionAnswering"),cFr=o(" (ELECTRA model)"),fFr=l(),KM=a("li"),b2e=a("strong"),mFr=o("flaubert"),gFr=o(" \u2014 "),KW=a("a"),hFr=o("TFFlaubertForQuestionAnsweringSimple"),pFr=o(" (FlauBERT model)"),uFr=l(),ZM=a("li"),v2e=a("strong"),_Fr=o("funnel"),bFr=o(" \u2014 "),ZW=a("a"),vFr=o("TFFunnelForQuestionAnswering"),FFr=o(" (Funnel Transformer model)"),TFr=l(),e4=a("li"),F2e=a("strong"),MFr=o("gptj"),EFr=o(" \u2014 "),eH=a("a"),CFr=o("TFGPTJForQuestionAnswering"),wFr=o(" (GPT-J model)"),AFr=l(),o4=a("li"),T2e=a("strong"),yFr=o("longformer"),LFr=o(" \u2014 "),oH=a("a"),xFr=o("TFLongformerForQuestionAnswering"),$Fr=o(" (Longformer model)"),kFr=l(),r4=a("li"),M2e=a("strong"),SFr=o("mobilebert"),RFr=o(" \u2014 "),rH=a("a"),BFr=o("TFMobileBertForQuestionAnswering"),PFr=o(" (MobileBERT model)"),IFr=l(),t4=a("li"),E2e=a("strong"),qFr=o("mpnet"),NFr=o(" \u2014 "),tH=a("a"),jFr=o("TFMPNetForQuestionAnswering"),DFr=o(" (MPNet model)"),GFr=l(),a4=a("li"),C2e=a("strong"),OFr=o("rembert"),VFr=o(" \u2014 "),aH=a("a"),XFr=o("TFRemBertForQuestionAnswering"),zFr=o(" (RemBERT model)"),QFr=l(),n4=a("li"),w2e=a("strong"),WFr=o("roberta"),HFr=o(" \u2014 "),nH=a("a"),UFr=o("TFRobertaForQuestionAnswering"),JFr=o(" (RoBERTa model)"),YFr=l(),s4=a("li"),A2e=a("strong"),KFr=o("roformer"),ZFr=o(" \u2014 "),sH=a("a"),e6r=o("TFRoFormerForQuestionAnswering"),o6r=o(" (RoFormer model)"),r6r=l(),l4=a("li"),y2e=a("strong"),t6r=o("xlm"),a6r=o(" \u2014 "),lH=a("a"),n6r=o("TFXLMForQuestionAnsweringSimple"),s6r=o(" (XLM model)"),l6r=l(),i4=a("li"),L2e=a("strong"),i6r=o("xlm-roberta"),d6r=o(" \u2014 "),iH=a("a"),c6r=o("TFXLMRobertaForQuestionAnswering"),f6r=o(" (XLM-RoBERTa model)"),m6r=l(),d4=a("li"),x2e=a("strong"),g6r=o("xlnet"),h6r=o(" \u2014 "),dH=a("a"),p6r=o("TFXLNetForQuestionAnsweringSimple"),u6r=o(" (XLNet model)"),_6r=l(),F(c4.$$.fragment),aPe=l(),cc=a("h2"),f4=a("a"),$2e=a("span"),F(JL.$$.fragment),b6r=l(),k2e=a("span"),v6r=o("TFAutoModelForVision2Seq"),nPe=l(),sr=a("div"),F(YL.$$.fragment),F6r=l(),fc=a("p"),T6r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),cH=a("a"),M6r=o("from_pretrained()"),E6r=o(" class method or the "),fH=a("a"),C6r=o("from_config()"),w6r=o(` class
method.`),A6r=l(),KL=a("p"),y6r=o("This class cannot be instantiated directly using "),S2e=a("code"),L6r=o("__init__()"),x6r=o(" (throws an error)."),$6r=l(),Rt=a("div"),F(ZL.$$.fragment),k6r=l(),R2e=a("p"),S6r=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),R6r=l(),mc=a("p"),B6r=o(`Note:
Loading a model from its configuration file does `),B2e=a("strong"),P6r=o("not"),I6r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mH=a("a"),q6r=o("from_pretrained()"),N6r=o(" to load the model weights."),j6r=l(),F(m4.$$.fragment),D6r=l(),Br=a("div"),F(e8.$$.fragment),G6r=l(),P2e=a("p"),O6r=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),V6r=l(),sn=a("p"),X6r=o("The model class to instantiate is selected based on the "),I2e=a("code"),z6r=o("model_type"),Q6r=o(` property of the config object (either
passed as an argument or loaded from `),q2e=a("code"),W6r=o("pretrained_model_name_or_path"),H6r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),N2e=a("code"),U6r=o("pretrained_model_name_or_path"),J6r=o(":"),Y6r=l(),j2e=a("ul"),g4=a("li"),D2e=a("strong"),K6r=o("vision-encoder-decoder"),Z6r=o(" \u2014 "),gH=a("a"),eTr=o("TFVisionEncoderDecoderModel"),oTr=o(" (Vision Encoder decoder model)"),rTr=l(),F(h4.$$.fragment),sPe=l(),gc=a("h2"),p4=a("a"),G2e=a("span"),F(o8.$$.fragment),tTr=l(),O2e=a("span"),aTr=o("TFAutoModelForSpeechSeq2Seq"),lPe=l(),lr=a("div"),F(r8.$$.fragment),nTr=l(),hc=a("p"),sTr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),hH=a("a"),lTr=o("from_pretrained()"),iTr=o(" class method or the "),pH=a("a"),dTr=o("from_config()"),cTr=o(` class
method.`),fTr=l(),t8=a("p"),mTr=o("This class cannot be instantiated directly using "),V2e=a("code"),gTr=o("__init__()"),hTr=o(" (throws an error)."),pTr=l(),Bt=a("div"),F(a8.$$.fragment),uTr=l(),X2e=a("p"),_Tr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),bTr=l(),pc=a("p"),vTr=o(`Note:
Loading a model from its configuration file does `),z2e=a("strong"),FTr=o("not"),TTr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uH=a("a"),MTr=o("from_pretrained()"),ETr=o(" to load the model weights."),CTr=l(),F(u4.$$.fragment),wTr=l(),Pr=a("div"),F(n8.$$.fragment),ATr=l(),Q2e=a("p"),yTr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),LTr=l(),ln=a("p"),xTr=o("The model class to instantiate is selected based on the "),W2e=a("code"),$Tr=o("model_type"),kTr=o(` property of the config object (either
passed as an argument or loaded from `),H2e=a("code"),STr=o("pretrained_model_name_or_path"),RTr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),U2e=a("code"),BTr=o("pretrained_model_name_or_path"),PTr=o(":"),ITr=l(),J2e=a("ul"),_4=a("li"),Y2e=a("strong"),qTr=o("speech_to_text"),NTr=o(" \u2014 "),_H=a("a"),jTr=o("TFSpeech2TextForConditionalGeneration"),DTr=o(" (Speech2Text model)"),GTr=l(),F(b4.$$.fragment),iPe=l(),uc=a("h2"),v4=a("a"),K2e=a("span"),F(s8.$$.fragment),OTr=l(),Z2e=a("span"),VTr=o("FlaxAutoModel"),dPe=l(),ir=a("div"),F(l8.$$.fragment),XTr=l(),_c=a("p"),zTr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),bH=a("a"),QTr=o("from_pretrained()"),WTr=o(" class method or the "),vH=a("a"),HTr=o("from_config()"),UTr=o(` class
method.`),JTr=l(),i8=a("p"),YTr=o("This class cannot be instantiated directly using "),e5e=a("code"),KTr=o("__init__()"),ZTr=o(" (throws an error)."),eMr=l(),Pt=a("div"),F(d8.$$.fragment),oMr=l(),o5e=a("p"),rMr=o("Instantiates one of the base model classes of the library from a configuration."),tMr=l(),bc=a("p"),aMr=o(`Note:
Loading a model from its configuration file does `),r5e=a("strong"),nMr=o("not"),sMr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),FH=a("a"),lMr=o("from_pretrained()"),iMr=o(" to load the model weights."),dMr=l(),F(F4.$$.fragment),cMr=l(),Ir=a("div"),F(c8.$$.fragment),fMr=l(),t5e=a("p"),mMr=o("Instantiate one of the base model classes of the library from a pretrained model."),gMr=l(),dn=a("p"),hMr=o("The model class to instantiate is selected based on the "),a5e=a("code"),pMr=o("model_type"),uMr=o(` property of the config object (either
passed as an argument or loaded from `),n5e=a("code"),_Mr=o("pretrained_model_name_or_path"),bMr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),s5e=a("code"),vMr=o("pretrained_model_name_or_path"),FMr=o(":"),TMr=l(),oe=a("ul"),T4=a("li"),l5e=a("strong"),MMr=o("albert"),EMr=o(" \u2014 "),TH=a("a"),CMr=o("FlaxAlbertModel"),wMr=o(" (ALBERT model)"),AMr=l(),M4=a("li"),i5e=a("strong"),yMr=o("bart"),LMr=o(" \u2014 "),MH=a("a"),xMr=o("FlaxBartModel"),$Mr=o(" (BART model)"),kMr=l(),E4=a("li"),d5e=a("strong"),SMr=o("beit"),RMr=o(" \u2014 "),EH=a("a"),BMr=o("FlaxBeitModel"),PMr=o(" (BEiT model)"),IMr=l(),C4=a("li"),c5e=a("strong"),qMr=o("bert"),NMr=o(" \u2014 "),CH=a("a"),jMr=o("FlaxBertModel"),DMr=o(" (BERT model)"),GMr=l(),w4=a("li"),f5e=a("strong"),OMr=o("big_bird"),VMr=o(" \u2014 "),wH=a("a"),XMr=o("FlaxBigBirdModel"),zMr=o(" (BigBird model)"),QMr=l(),A4=a("li"),m5e=a("strong"),WMr=o("blenderbot"),HMr=o(" \u2014 "),AH=a("a"),UMr=o("FlaxBlenderbotModel"),JMr=o(" (Blenderbot model)"),YMr=l(),y4=a("li"),g5e=a("strong"),KMr=o("blenderbot-small"),ZMr=o(" \u2014 "),yH=a("a"),e4r=o("FlaxBlenderbotSmallModel"),o4r=o(" (BlenderbotSmall model)"),r4r=l(),L4=a("li"),h5e=a("strong"),t4r=o("clip"),a4r=o(" \u2014 "),LH=a("a"),n4r=o("FlaxCLIPModel"),s4r=o(" (CLIP model)"),l4r=l(),x4=a("li"),p5e=a("strong"),i4r=o("distilbert"),d4r=o(" \u2014 "),xH=a("a"),c4r=o("FlaxDistilBertModel"),f4r=o(" (DistilBERT model)"),m4r=l(),$4=a("li"),u5e=a("strong"),g4r=o("electra"),h4r=o(" \u2014 "),$H=a("a"),p4r=o("FlaxElectraModel"),u4r=o(" (ELECTRA model)"),_4r=l(),k4=a("li"),_5e=a("strong"),b4r=o("gpt2"),v4r=o(" \u2014 "),kH=a("a"),F4r=o("FlaxGPT2Model"),T4r=o(" (OpenAI GPT-2 model)"),M4r=l(),S4=a("li"),b5e=a("strong"),E4r=o("gpt_neo"),C4r=o(" \u2014 "),SH=a("a"),w4r=o("FlaxGPTNeoModel"),A4r=o(" (GPT Neo model)"),y4r=l(),R4=a("li"),v5e=a("strong"),L4r=o("gptj"),x4r=o(" \u2014 "),RH=a("a"),$4r=o("FlaxGPTJModel"),k4r=o(" (GPT-J model)"),S4r=l(),B4=a("li"),F5e=a("strong"),R4r=o("marian"),B4r=o(" \u2014 "),BH=a("a"),P4r=o("FlaxMarianModel"),I4r=o(" (Marian model)"),q4r=l(),P4=a("li"),T5e=a("strong"),N4r=o("mbart"),j4r=o(" \u2014 "),PH=a("a"),D4r=o("FlaxMBartModel"),G4r=o(" (mBART model)"),O4r=l(),I4=a("li"),M5e=a("strong"),V4r=o("mt5"),X4r=o(" \u2014 "),IH=a("a"),z4r=o("FlaxMT5Model"),Q4r=o(" (mT5 model)"),W4r=l(),q4=a("li"),E5e=a("strong"),H4r=o("pegasus"),U4r=o(" \u2014 "),qH=a("a"),J4r=o("FlaxPegasusModel"),Y4r=o(" (Pegasus model)"),K4r=l(),N4=a("li"),C5e=a("strong"),Z4r=o("roberta"),eEr=o(" \u2014 "),NH=a("a"),oEr=o("FlaxRobertaModel"),rEr=o(" (RoBERTa model)"),tEr=l(),j4=a("li"),w5e=a("strong"),aEr=o("roformer"),nEr=o(" \u2014 "),jH=a("a"),sEr=o("FlaxRoFormerModel"),lEr=o(" (RoFormer model)"),iEr=l(),D4=a("li"),A5e=a("strong"),dEr=o("t5"),cEr=o(" \u2014 "),DH=a("a"),fEr=o("FlaxT5Model"),mEr=o(" (T5 model)"),gEr=l(),G4=a("li"),y5e=a("strong"),hEr=o("vision-text-dual-encoder"),pEr=o(" \u2014 "),GH=a("a"),uEr=o("FlaxVisionTextDualEncoderModel"),_Er=o(" (VisionTextDualEncoder model)"),bEr=l(),O4=a("li"),L5e=a("strong"),vEr=o("vit"),FEr=o(" \u2014 "),OH=a("a"),TEr=o("FlaxViTModel"),MEr=o(" (ViT model)"),EEr=l(),V4=a("li"),x5e=a("strong"),CEr=o("wav2vec2"),wEr=o(" \u2014 "),VH=a("a"),AEr=o("FlaxWav2Vec2Model"),yEr=o(" (Wav2Vec2 model)"),LEr=l(),X4=a("li"),$5e=a("strong"),xEr=o("xglm"),$Er=o(" \u2014 "),XH=a("a"),kEr=o("FlaxXGLMModel"),SEr=o(" (XGLM model)"),REr=l(),z4=a("li"),k5e=a("strong"),BEr=o("xlm-roberta"),PEr=o(" \u2014 "),zH=a("a"),IEr=o("FlaxXLMRobertaModel"),qEr=o(" (XLM-RoBERTa model)"),NEr=l(),F(Q4.$$.fragment),cPe=l(),vc=a("h2"),W4=a("a"),S5e=a("span"),F(f8.$$.fragment),jEr=l(),R5e=a("span"),DEr=o("FlaxAutoModelForCausalLM"),fPe=l(),dr=a("div"),F(m8.$$.fragment),GEr=l(),Fc=a("p"),OEr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),QH=a("a"),VEr=o("from_pretrained()"),XEr=o(" class method or the "),WH=a("a"),zEr=o("from_config()"),QEr=o(` class
method.`),WEr=l(),g8=a("p"),HEr=o("This class cannot be instantiated directly using "),B5e=a("code"),UEr=o("__init__()"),JEr=o(" (throws an error)."),YEr=l(),It=a("div"),F(h8.$$.fragment),KEr=l(),P5e=a("p"),ZEr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),eCr=l(),Tc=a("p"),oCr=o(`Note:
Loading a model from its configuration file does `),I5e=a("strong"),rCr=o("not"),tCr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),HH=a("a"),aCr=o("from_pretrained()"),nCr=o(" to load the model weights."),sCr=l(),F(H4.$$.fragment),lCr=l(),qr=a("div"),F(p8.$$.fragment),iCr=l(),q5e=a("p"),dCr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),cCr=l(),cn=a("p"),fCr=o("The model class to instantiate is selected based on the "),N5e=a("code"),mCr=o("model_type"),gCr=o(` property of the config object (either
passed as an argument or loaded from `),j5e=a("code"),hCr=o("pretrained_model_name_or_path"),pCr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),D5e=a("code"),uCr=o("pretrained_model_name_or_path"),_Cr=o(":"),bCr=l(),cr=a("ul"),U4=a("li"),G5e=a("strong"),vCr=o("bart"),FCr=o(" \u2014 "),UH=a("a"),TCr=o("FlaxBartForCausalLM"),MCr=o(" (BART model)"),ECr=l(),J4=a("li"),O5e=a("strong"),CCr=o("bert"),wCr=o(" \u2014 "),V5e=a("code"),ACr=o("FlaxBertForCausalLM"),yCr=o(" (BERT model)"),LCr=l(),Y4=a("li"),X5e=a("strong"),xCr=o("gpt2"),$Cr=o(" \u2014 "),JH=a("a"),kCr=o("FlaxGPT2LMHeadModel"),SCr=o(" (OpenAI GPT-2 model)"),RCr=l(),K4=a("li"),z5e=a("strong"),BCr=o("gpt_neo"),PCr=o(" \u2014 "),YH=a("a"),ICr=o("FlaxGPTNeoForCausalLM"),qCr=o(" (GPT Neo model)"),NCr=l(),Z4=a("li"),Q5e=a("strong"),jCr=o("gptj"),DCr=o(" \u2014 "),KH=a("a"),GCr=o("FlaxGPTJForCausalLM"),OCr=o(" (GPT-J model)"),VCr=l(),eE=a("li"),W5e=a("strong"),XCr=o("xglm"),zCr=o(" \u2014 "),ZH=a("a"),QCr=o("FlaxXGLMForCausalLM"),WCr=o(" (XGLM model)"),HCr=l(),F(oE.$$.fragment),mPe=l(),Mc=a("h2"),rE=a("a"),H5e=a("span"),F(u8.$$.fragment),UCr=l(),U5e=a("span"),JCr=o("FlaxAutoModelForPreTraining"),gPe=l(),fr=a("div"),F(_8.$$.fragment),YCr=l(),Ec=a("p"),KCr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),eU=a("a"),ZCr=o("from_pretrained()"),e3r=o(" class method or the "),oU=a("a"),o3r=o("from_config()"),r3r=o(` class
method.`),t3r=l(),b8=a("p"),a3r=o("This class cannot be instantiated directly using "),J5e=a("code"),n3r=o("__init__()"),s3r=o(" (throws an error)."),l3r=l(),qt=a("div"),F(v8.$$.fragment),i3r=l(),Y5e=a("p"),d3r=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),c3r=l(),Cc=a("p"),f3r=o(`Note:
Loading a model from its configuration file does `),K5e=a("strong"),m3r=o("not"),g3r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rU=a("a"),h3r=o("from_pretrained()"),p3r=o(" to load the model weights."),u3r=l(),F(tE.$$.fragment),_3r=l(),Nr=a("div"),F(F8.$$.fragment),b3r=l(),Z5e=a("p"),v3r=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),F3r=l(),fn=a("p"),T3r=o("The model class to instantiate is selected based on the "),eve=a("code"),M3r=o("model_type"),E3r=o(` property of the config object (either
passed as an argument or loaded from `),ove=a("code"),C3r=o("pretrained_model_name_or_path"),w3r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rve=a("code"),A3r=o("pretrained_model_name_or_path"),y3r=o(":"),L3r=l(),Me=a("ul"),aE=a("li"),tve=a("strong"),x3r=o("albert"),$3r=o(" \u2014 "),tU=a("a"),k3r=o("FlaxAlbertForPreTraining"),S3r=o(" (ALBERT model)"),R3r=l(),nE=a("li"),ave=a("strong"),B3r=o("bart"),P3r=o(" \u2014 "),aU=a("a"),I3r=o("FlaxBartForConditionalGeneration"),q3r=o(" (BART model)"),N3r=l(),sE=a("li"),nve=a("strong"),j3r=o("bert"),D3r=o(" \u2014 "),nU=a("a"),G3r=o("FlaxBertForPreTraining"),O3r=o(" (BERT model)"),V3r=l(),lE=a("li"),sve=a("strong"),X3r=o("big_bird"),z3r=o(" \u2014 "),sU=a("a"),Q3r=o("FlaxBigBirdForPreTraining"),W3r=o(" (BigBird model)"),H3r=l(),iE=a("li"),lve=a("strong"),U3r=o("electra"),J3r=o(" \u2014 "),lU=a("a"),Y3r=o("FlaxElectraForPreTraining"),K3r=o(" (ELECTRA model)"),Z3r=l(),dE=a("li"),ive=a("strong"),ewr=o("mbart"),owr=o(" \u2014 "),iU=a("a"),rwr=o("FlaxMBartForConditionalGeneration"),twr=o(" (mBART model)"),awr=l(),cE=a("li"),dve=a("strong"),nwr=o("mt5"),swr=o(" \u2014 "),dU=a("a"),lwr=o("FlaxMT5ForConditionalGeneration"),iwr=o(" (mT5 model)"),dwr=l(),fE=a("li"),cve=a("strong"),cwr=o("roberta"),fwr=o(" \u2014 "),cU=a("a"),mwr=o("FlaxRobertaForMaskedLM"),gwr=o(" (RoBERTa model)"),hwr=l(),mE=a("li"),fve=a("strong"),pwr=o("roformer"),uwr=o(" \u2014 "),fU=a("a"),_wr=o("FlaxRoFormerForMaskedLM"),bwr=o(" (RoFormer model)"),vwr=l(),gE=a("li"),mve=a("strong"),Fwr=o("t5"),Twr=o(" \u2014 "),mU=a("a"),Mwr=o("FlaxT5ForConditionalGeneration"),Ewr=o(" (T5 model)"),Cwr=l(),hE=a("li"),gve=a("strong"),wwr=o("wav2vec2"),Awr=o(" \u2014 "),gU=a("a"),ywr=o("FlaxWav2Vec2ForPreTraining"),Lwr=o(" (Wav2Vec2 model)"),xwr=l(),pE=a("li"),hve=a("strong"),$wr=o("xlm-roberta"),kwr=o(" \u2014 "),hU=a("a"),Swr=o("FlaxXLMRobertaForMaskedLM"),Rwr=o(" (XLM-RoBERTa model)"),Bwr=l(),F(uE.$$.fragment),hPe=l(),wc=a("h2"),_E=a("a"),pve=a("span"),F(T8.$$.fragment),Pwr=l(),uve=a("span"),Iwr=o("FlaxAutoModelForMaskedLM"),pPe=l(),mr=a("div"),F(M8.$$.fragment),qwr=l(),Ac=a("p"),Nwr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),pU=a("a"),jwr=o("from_pretrained()"),Dwr=o(" class method or the "),uU=a("a"),Gwr=o("from_config()"),Owr=o(` class
method.`),Vwr=l(),E8=a("p"),Xwr=o("This class cannot be instantiated directly using "),_ve=a("code"),zwr=o("__init__()"),Qwr=o(" (throws an error)."),Wwr=l(),Nt=a("div"),F(C8.$$.fragment),Hwr=l(),bve=a("p"),Uwr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Jwr=l(),yc=a("p"),Ywr=o(`Note:
Loading a model from its configuration file does `),vve=a("strong"),Kwr=o("not"),Zwr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_U=a("a"),eAr=o("from_pretrained()"),oAr=o(" to load the model weights."),rAr=l(),F(bE.$$.fragment),tAr=l(),jr=a("div"),F(w8.$$.fragment),aAr=l(),Fve=a("p"),nAr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),sAr=l(),mn=a("p"),lAr=o("The model class to instantiate is selected based on the "),Tve=a("code"),iAr=o("model_type"),dAr=o(` property of the config object (either
passed as an argument or loaded from `),Mve=a("code"),cAr=o("pretrained_model_name_or_path"),fAr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Eve=a("code"),mAr=o("pretrained_model_name_or_path"),gAr=o(":"),hAr=l(),Le=a("ul"),vE=a("li"),Cve=a("strong"),pAr=o("albert"),uAr=o(" \u2014 "),bU=a("a"),_Ar=o("FlaxAlbertForMaskedLM"),bAr=o(" (ALBERT model)"),vAr=l(),FE=a("li"),wve=a("strong"),FAr=o("bart"),TAr=o(" \u2014 "),vU=a("a"),MAr=o("FlaxBartForConditionalGeneration"),EAr=o(" (BART model)"),CAr=l(),TE=a("li"),Ave=a("strong"),wAr=o("bert"),AAr=o(" \u2014 "),FU=a("a"),yAr=o("FlaxBertForMaskedLM"),LAr=o(" (BERT model)"),xAr=l(),ME=a("li"),yve=a("strong"),$Ar=o("big_bird"),kAr=o(" \u2014 "),TU=a("a"),SAr=o("FlaxBigBirdForMaskedLM"),RAr=o(" (BigBird model)"),BAr=l(),EE=a("li"),Lve=a("strong"),PAr=o("distilbert"),IAr=o(" \u2014 "),MU=a("a"),qAr=o("FlaxDistilBertForMaskedLM"),NAr=o(" (DistilBERT model)"),jAr=l(),CE=a("li"),xve=a("strong"),DAr=o("electra"),GAr=o(" \u2014 "),EU=a("a"),OAr=o("FlaxElectraForMaskedLM"),VAr=o(" (ELECTRA model)"),XAr=l(),wE=a("li"),$ve=a("strong"),zAr=o("mbart"),QAr=o(" \u2014 "),CU=a("a"),WAr=o("FlaxMBartForConditionalGeneration"),HAr=o(" (mBART model)"),UAr=l(),AE=a("li"),kve=a("strong"),JAr=o("roberta"),YAr=o(" \u2014 "),wU=a("a"),KAr=o("FlaxRobertaForMaskedLM"),ZAr=o(" (RoBERTa model)"),e0r=l(),yE=a("li"),Sve=a("strong"),o0r=o("roformer"),r0r=o(" \u2014 "),AU=a("a"),t0r=o("FlaxRoFormerForMaskedLM"),a0r=o(" (RoFormer model)"),n0r=l(),LE=a("li"),Rve=a("strong"),s0r=o("xlm-roberta"),l0r=o(" \u2014 "),yU=a("a"),i0r=o("FlaxXLMRobertaForMaskedLM"),d0r=o(" (XLM-RoBERTa model)"),c0r=l(),F(xE.$$.fragment),uPe=l(),Lc=a("h2"),$E=a("a"),Bve=a("span"),F(A8.$$.fragment),f0r=l(),Pve=a("span"),m0r=o("FlaxAutoModelForSeq2SeqLM"),_Pe=l(),gr=a("div"),F(y8.$$.fragment),g0r=l(),xc=a("p"),h0r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),LU=a("a"),p0r=o("from_pretrained()"),u0r=o(" class method or the "),xU=a("a"),_0r=o("from_config()"),b0r=o(` class
method.`),v0r=l(),L8=a("p"),F0r=o("This class cannot be instantiated directly using "),Ive=a("code"),T0r=o("__init__()"),M0r=o(" (throws an error)."),E0r=l(),jt=a("div"),F(x8.$$.fragment),C0r=l(),qve=a("p"),w0r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),A0r=l(),$c=a("p"),y0r=o(`Note:
Loading a model from its configuration file does `),Nve=a("strong"),L0r=o("not"),x0r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$U=a("a"),$0r=o("from_pretrained()"),k0r=o(" to load the model weights."),S0r=l(),F(kE.$$.fragment),R0r=l(),Dr=a("div"),F($8.$$.fragment),B0r=l(),jve=a("p"),P0r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),I0r=l(),gn=a("p"),q0r=o("The model class to instantiate is selected based on the "),Dve=a("code"),N0r=o("model_type"),j0r=o(` property of the config object (either
passed as an argument or loaded from `),Gve=a("code"),D0r=o("pretrained_model_name_or_path"),G0r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ove=a("code"),O0r=o("pretrained_model_name_or_path"),V0r=o(":"),X0r=l(),ke=a("ul"),SE=a("li"),Vve=a("strong"),z0r=o("bart"),Q0r=o(" \u2014 "),kU=a("a"),W0r=o("FlaxBartForConditionalGeneration"),H0r=o(" (BART model)"),U0r=l(),RE=a("li"),Xve=a("strong"),J0r=o("blenderbot"),Y0r=o(" \u2014 "),SU=a("a"),K0r=o("FlaxBlenderbotForConditionalGeneration"),Z0r=o(" (Blenderbot model)"),eyr=l(),BE=a("li"),zve=a("strong"),oyr=o("blenderbot-small"),ryr=o(" \u2014 "),RU=a("a"),tyr=o("FlaxBlenderbotSmallForConditionalGeneration"),ayr=o(" (BlenderbotSmall model)"),nyr=l(),PE=a("li"),Qve=a("strong"),syr=o("encoder-decoder"),lyr=o(" \u2014 "),BU=a("a"),iyr=o("FlaxEncoderDecoderModel"),dyr=o(" (Encoder decoder model)"),cyr=l(),IE=a("li"),Wve=a("strong"),fyr=o("marian"),myr=o(" \u2014 "),PU=a("a"),gyr=o("FlaxMarianMTModel"),hyr=o(" (Marian model)"),pyr=l(),qE=a("li"),Hve=a("strong"),uyr=o("mbart"),_yr=o(" \u2014 "),IU=a("a"),byr=o("FlaxMBartForConditionalGeneration"),vyr=o(" (mBART model)"),Fyr=l(),NE=a("li"),Uve=a("strong"),Tyr=o("mt5"),Myr=o(" \u2014 "),qU=a("a"),Eyr=o("FlaxMT5ForConditionalGeneration"),Cyr=o(" (mT5 model)"),wyr=l(),jE=a("li"),Jve=a("strong"),Ayr=o("pegasus"),yyr=o(" \u2014 "),NU=a("a"),Lyr=o("FlaxPegasusForConditionalGeneration"),xyr=o(" (Pegasus model)"),$yr=l(),DE=a("li"),Yve=a("strong"),kyr=o("t5"),Syr=o(" \u2014 "),jU=a("a"),Ryr=o("FlaxT5ForConditionalGeneration"),Byr=o(" (T5 model)"),Pyr=l(),F(GE.$$.fragment),bPe=l(),kc=a("h2"),OE=a("a"),Kve=a("span"),F(k8.$$.fragment),Iyr=l(),Zve=a("span"),qyr=o("FlaxAutoModelForSequenceClassification"),vPe=l(),hr=a("div"),F(S8.$$.fragment),Nyr=l(),Sc=a("p"),jyr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),DU=a("a"),Dyr=o("from_pretrained()"),Gyr=o(" class method or the "),GU=a("a"),Oyr=o("from_config()"),Vyr=o(` class
method.`),Xyr=l(),R8=a("p"),zyr=o("This class cannot be instantiated directly using "),eFe=a("code"),Qyr=o("__init__()"),Wyr=o(" (throws an error)."),Hyr=l(),Dt=a("div"),F(B8.$$.fragment),Uyr=l(),oFe=a("p"),Jyr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Yyr=l(),Rc=a("p"),Kyr=o(`Note:
Loading a model from its configuration file does `),rFe=a("strong"),Zyr=o("not"),eLr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),OU=a("a"),oLr=o("from_pretrained()"),rLr=o(" to load the model weights."),tLr=l(),F(VE.$$.fragment),aLr=l(),Gr=a("div"),F(P8.$$.fragment),nLr=l(),tFe=a("p"),sLr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),lLr=l(),hn=a("p"),iLr=o("The model class to instantiate is selected based on the "),aFe=a("code"),dLr=o("model_type"),cLr=o(` property of the config object (either
passed as an argument or loaded from `),nFe=a("code"),fLr=o("pretrained_model_name_or_path"),mLr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sFe=a("code"),gLr=o("pretrained_model_name_or_path"),hLr=o(":"),pLr=l(),xe=a("ul"),XE=a("li"),lFe=a("strong"),uLr=o("albert"),_Lr=o(" \u2014 "),VU=a("a"),bLr=o("FlaxAlbertForSequenceClassification"),vLr=o(" (ALBERT model)"),FLr=l(),zE=a("li"),iFe=a("strong"),TLr=o("bart"),MLr=o(" \u2014 "),XU=a("a"),ELr=o("FlaxBartForSequenceClassification"),CLr=o(" (BART model)"),wLr=l(),QE=a("li"),dFe=a("strong"),ALr=o("bert"),yLr=o(" \u2014 "),zU=a("a"),LLr=o("FlaxBertForSequenceClassification"),xLr=o(" (BERT model)"),$Lr=l(),WE=a("li"),cFe=a("strong"),kLr=o("big_bird"),SLr=o(" \u2014 "),QU=a("a"),RLr=o("FlaxBigBirdForSequenceClassification"),BLr=o(" (BigBird model)"),PLr=l(),HE=a("li"),fFe=a("strong"),ILr=o("distilbert"),qLr=o(" \u2014 "),WU=a("a"),NLr=o("FlaxDistilBertForSequenceClassification"),jLr=o(" (DistilBERT model)"),DLr=l(),UE=a("li"),mFe=a("strong"),GLr=o("electra"),OLr=o(" \u2014 "),HU=a("a"),VLr=o("FlaxElectraForSequenceClassification"),XLr=o(" (ELECTRA model)"),zLr=l(),JE=a("li"),gFe=a("strong"),QLr=o("mbart"),WLr=o(" \u2014 "),UU=a("a"),HLr=o("FlaxMBartForSequenceClassification"),ULr=o(" (mBART model)"),JLr=l(),YE=a("li"),hFe=a("strong"),YLr=o("roberta"),KLr=o(" \u2014 "),JU=a("a"),ZLr=o("FlaxRobertaForSequenceClassification"),e8r=o(" (RoBERTa model)"),o8r=l(),KE=a("li"),pFe=a("strong"),r8r=o("roformer"),t8r=o(" \u2014 "),YU=a("a"),a8r=o("FlaxRoFormerForSequenceClassification"),n8r=o(" (RoFormer model)"),s8r=l(),ZE=a("li"),uFe=a("strong"),l8r=o("xlm-roberta"),i8r=o(" \u2014 "),KU=a("a"),d8r=o("FlaxXLMRobertaForSequenceClassification"),c8r=o(" (XLM-RoBERTa model)"),f8r=l(),F(eC.$$.fragment),FPe=l(),Bc=a("h2"),oC=a("a"),_Fe=a("span"),F(I8.$$.fragment),m8r=l(),bFe=a("span"),g8r=o("FlaxAutoModelForQuestionAnswering"),TPe=l(),pr=a("div"),F(q8.$$.fragment),h8r=l(),Pc=a("p"),p8r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),ZU=a("a"),u8r=o("from_pretrained()"),_8r=o(" class method or the "),eJ=a("a"),b8r=o("from_config()"),v8r=o(` class
method.`),F8r=l(),N8=a("p"),T8r=o("This class cannot be instantiated directly using "),vFe=a("code"),M8r=o("__init__()"),E8r=o(" (throws an error)."),C8r=l(),Gt=a("div"),F(j8.$$.fragment),w8r=l(),FFe=a("p"),A8r=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),y8r=l(),Ic=a("p"),L8r=o(`Note:
Loading a model from its configuration file does `),TFe=a("strong"),x8r=o("not"),$8r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oJ=a("a"),k8r=o("from_pretrained()"),S8r=o(" to load the model weights."),R8r=l(),F(rC.$$.fragment),B8r=l(),Or=a("div"),F(D8.$$.fragment),P8r=l(),MFe=a("p"),I8r=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),q8r=l(),pn=a("p"),N8r=o("The model class to instantiate is selected based on the "),EFe=a("code"),j8r=o("model_type"),D8r=o(` property of the config object (either
passed as an argument or loaded from `),CFe=a("code"),G8r=o("pretrained_model_name_or_path"),O8r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wFe=a("code"),V8r=o("pretrained_model_name_or_path"),X8r=o(":"),z8r=l(),$e=a("ul"),tC=a("li"),AFe=a("strong"),Q8r=o("albert"),W8r=o(" \u2014 "),rJ=a("a"),H8r=o("FlaxAlbertForQuestionAnswering"),U8r=o(" (ALBERT model)"),J8r=l(),aC=a("li"),yFe=a("strong"),Y8r=o("bart"),K8r=o(" \u2014 "),tJ=a("a"),Z8r=o("FlaxBartForQuestionAnswering"),e7r=o(" (BART model)"),o7r=l(),nC=a("li"),LFe=a("strong"),r7r=o("bert"),t7r=o(" \u2014 "),aJ=a("a"),a7r=o("FlaxBertForQuestionAnswering"),n7r=o(" (BERT model)"),s7r=l(),sC=a("li"),xFe=a("strong"),l7r=o("big_bird"),i7r=o(" \u2014 "),nJ=a("a"),d7r=o("FlaxBigBirdForQuestionAnswering"),c7r=o(" (BigBird model)"),f7r=l(),lC=a("li"),$Fe=a("strong"),m7r=o("distilbert"),g7r=o(" \u2014 "),sJ=a("a"),h7r=o("FlaxDistilBertForQuestionAnswering"),p7r=o(" (DistilBERT model)"),u7r=l(),iC=a("li"),kFe=a("strong"),_7r=o("electra"),b7r=o(" \u2014 "),lJ=a("a"),v7r=o("FlaxElectraForQuestionAnswering"),F7r=o(" (ELECTRA model)"),T7r=l(),dC=a("li"),SFe=a("strong"),M7r=o("mbart"),E7r=o(" \u2014 "),iJ=a("a"),C7r=o("FlaxMBartForQuestionAnswering"),w7r=o(" (mBART model)"),A7r=l(),cC=a("li"),RFe=a("strong"),y7r=o("roberta"),L7r=o(" \u2014 "),dJ=a("a"),x7r=o("FlaxRobertaForQuestionAnswering"),$7r=o(" (RoBERTa model)"),k7r=l(),fC=a("li"),BFe=a("strong"),S7r=o("roformer"),R7r=o(" \u2014 "),cJ=a("a"),B7r=o("FlaxRoFormerForQuestionAnswering"),P7r=o(" (RoFormer model)"),I7r=l(),mC=a("li"),PFe=a("strong"),q7r=o("xlm-roberta"),N7r=o(" \u2014 "),fJ=a("a"),j7r=o("FlaxXLMRobertaForQuestionAnswering"),D7r=o(" (XLM-RoBERTa model)"),G7r=l(),F(gC.$$.fragment),MPe=l(),qc=a("h2"),hC=a("a"),IFe=a("span"),F(G8.$$.fragment),O7r=l(),qFe=a("span"),V7r=o("FlaxAutoModelForTokenClassification"),EPe=l(),ur=a("div"),F(O8.$$.fragment),X7r=l(),Nc=a("p"),z7r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),mJ=a("a"),Q7r=o("from_pretrained()"),W7r=o(" class method or the "),gJ=a("a"),H7r=o("from_config()"),U7r=o(` class
method.`),J7r=l(),V8=a("p"),Y7r=o("This class cannot be instantiated directly using "),NFe=a("code"),K7r=o("__init__()"),Z7r=o(" (throws an error)."),exr=l(),Ot=a("div"),F(X8.$$.fragment),oxr=l(),jFe=a("p"),rxr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),txr=l(),jc=a("p"),axr=o(`Note:
Loading a model from its configuration file does `),DFe=a("strong"),nxr=o("not"),sxr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hJ=a("a"),lxr=o("from_pretrained()"),ixr=o(" to load the model weights."),dxr=l(),F(pC.$$.fragment),cxr=l(),Vr=a("div"),F(z8.$$.fragment),fxr=l(),GFe=a("p"),mxr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),gxr=l(),un=a("p"),hxr=o("The model class to instantiate is selected based on the "),OFe=a("code"),pxr=o("model_type"),uxr=o(` property of the config object (either
passed as an argument or loaded from `),VFe=a("code"),_xr=o("pretrained_model_name_or_path"),bxr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),XFe=a("code"),vxr=o("pretrained_model_name_or_path"),Fxr=o(":"),Txr=l(),je=a("ul"),uC=a("li"),zFe=a("strong"),Mxr=o("albert"),Exr=o(" \u2014 "),pJ=a("a"),Cxr=o("FlaxAlbertForTokenClassification"),wxr=o(" (ALBERT model)"),Axr=l(),_C=a("li"),QFe=a("strong"),yxr=o("bert"),Lxr=o(" \u2014 "),uJ=a("a"),xxr=o("FlaxBertForTokenClassification"),$xr=o(" (BERT model)"),kxr=l(),bC=a("li"),WFe=a("strong"),Sxr=o("big_bird"),Rxr=o(" \u2014 "),_J=a("a"),Bxr=o("FlaxBigBirdForTokenClassification"),Pxr=o(" (BigBird model)"),Ixr=l(),vC=a("li"),HFe=a("strong"),qxr=o("distilbert"),Nxr=o(" \u2014 "),bJ=a("a"),jxr=o("FlaxDistilBertForTokenClassification"),Dxr=o(" (DistilBERT model)"),Gxr=l(),FC=a("li"),UFe=a("strong"),Oxr=o("electra"),Vxr=o(" \u2014 "),vJ=a("a"),Xxr=o("FlaxElectraForTokenClassification"),zxr=o(" (ELECTRA model)"),Qxr=l(),TC=a("li"),JFe=a("strong"),Wxr=o("roberta"),Hxr=o(" \u2014 "),FJ=a("a"),Uxr=o("FlaxRobertaForTokenClassification"),Jxr=o(" (RoBERTa model)"),Yxr=l(),MC=a("li"),YFe=a("strong"),Kxr=o("roformer"),Zxr=o(" \u2014 "),TJ=a("a"),e$r=o("FlaxRoFormerForTokenClassification"),o$r=o(" (RoFormer model)"),r$r=l(),EC=a("li"),KFe=a("strong"),t$r=o("xlm-roberta"),a$r=o(" \u2014 "),MJ=a("a"),n$r=o("FlaxXLMRobertaForTokenClassification"),s$r=o(" (XLM-RoBERTa model)"),l$r=l(),F(CC.$$.fragment),CPe=l(),Dc=a("h2"),wC=a("a"),ZFe=a("span"),F(Q8.$$.fragment),i$r=l(),e6e=a("span"),d$r=o("FlaxAutoModelForMultipleChoice"),wPe=l(),_r=a("div"),F(W8.$$.fragment),c$r=l(),Gc=a("p"),f$r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),EJ=a("a"),m$r=o("from_pretrained()"),g$r=o(" class method or the "),CJ=a("a"),h$r=o("from_config()"),p$r=o(` class
method.`),u$r=l(),H8=a("p"),_$r=o("This class cannot be instantiated directly using "),o6e=a("code"),b$r=o("__init__()"),v$r=o(" (throws an error)."),F$r=l(),Vt=a("div"),F(U8.$$.fragment),T$r=l(),r6e=a("p"),M$r=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),E$r=l(),Oc=a("p"),C$r=o(`Note:
Loading a model from its configuration file does `),t6e=a("strong"),w$r=o("not"),A$r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wJ=a("a"),y$r=o("from_pretrained()"),L$r=o(" to load the model weights."),x$r=l(),F(AC.$$.fragment),$$r=l(),Xr=a("div"),F(J8.$$.fragment),k$r=l(),a6e=a("p"),S$r=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),R$r=l(),_n=a("p"),B$r=o("The model class to instantiate is selected based on the "),n6e=a("code"),P$r=o("model_type"),I$r=o(` property of the config object (either
passed as an argument or loaded from `),s6e=a("code"),q$r=o("pretrained_model_name_or_path"),N$r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),l6e=a("code"),j$r=o("pretrained_model_name_or_path"),D$r=o(":"),G$r=l(),De=a("ul"),yC=a("li"),i6e=a("strong"),O$r=o("albert"),V$r=o(" \u2014 "),AJ=a("a"),X$r=o("FlaxAlbertForMultipleChoice"),z$r=o(" (ALBERT model)"),Q$r=l(),LC=a("li"),d6e=a("strong"),W$r=o("bert"),H$r=o(" \u2014 "),yJ=a("a"),U$r=o("FlaxBertForMultipleChoice"),J$r=o(" (BERT model)"),Y$r=l(),xC=a("li"),c6e=a("strong"),K$r=o("big_bird"),Z$r=o(" \u2014 "),LJ=a("a"),ekr=o("FlaxBigBirdForMultipleChoice"),okr=o(" (BigBird model)"),rkr=l(),$C=a("li"),f6e=a("strong"),tkr=o("distilbert"),akr=o(" \u2014 "),xJ=a("a"),nkr=o("FlaxDistilBertForMultipleChoice"),skr=o(" (DistilBERT model)"),lkr=l(),kC=a("li"),m6e=a("strong"),ikr=o("electra"),dkr=o(" \u2014 "),$J=a("a"),ckr=o("FlaxElectraForMultipleChoice"),fkr=o(" (ELECTRA model)"),mkr=l(),SC=a("li"),g6e=a("strong"),gkr=o("roberta"),hkr=o(" \u2014 "),kJ=a("a"),pkr=o("FlaxRobertaForMultipleChoice"),ukr=o(" (RoBERTa model)"),_kr=l(),RC=a("li"),h6e=a("strong"),bkr=o("roformer"),vkr=o(" \u2014 "),SJ=a("a"),Fkr=o("FlaxRoFormerForMultipleChoice"),Tkr=o(" (RoFormer model)"),Mkr=l(),BC=a("li"),p6e=a("strong"),Ekr=o("xlm-roberta"),Ckr=o(" \u2014 "),RJ=a("a"),wkr=o("FlaxXLMRobertaForMultipleChoice"),Akr=o(" (XLM-RoBERTa model)"),ykr=l(),F(PC.$$.fragment),APe=l(),Vc=a("h2"),IC=a("a"),u6e=a("span"),F(Y8.$$.fragment),Lkr=l(),_6e=a("span"),xkr=o("FlaxAutoModelForNextSentencePrediction"),yPe=l(),br=a("div"),F(K8.$$.fragment),$kr=l(),Xc=a("p"),kkr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),BJ=a("a"),Skr=o("from_pretrained()"),Rkr=o(" class method or the "),PJ=a("a"),Bkr=o("from_config()"),Pkr=o(` class
method.`),Ikr=l(),Z8=a("p"),qkr=o("This class cannot be instantiated directly using "),b6e=a("code"),Nkr=o("__init__()"),jkr=o(" (throws an error)."),Dkr=l(),Xt=a("div"),F(e7.$$.fragment),Gkr=l(),v6e=a("p"),Okr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Vkr=l(),zc=a("p"),Xkr=o(`Note:
Loading a model from its configuration file does `),F6e=a("strong"),zkr=o("not"),Qkr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),IJ=a("a"),Wkr=o("from_pretrained()"),Hkr=o(" to load the model weights."),Ukr=l(),F(qC.$$.fragment),Jkr=l(),zr=a("div"),F(o7.$$.fragment),Ykr=l(),T6e=a("p"),Kkr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Zkr=l(),bn=a("p"),eSr=o("The model class to instantiate is selected based on the "),M6e=a("code"),oSr=o("model_type"),rSr=o(` property of the config object (either
passed as an argument or loaded from `),E6e=a("code"),tSr=o("pretrained_model_name_or_path"),aSr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),C6e=a("code"),nSr=o("pretrained_model_name_or_path"),sSr=o(":"),lSr=l(),w6e=a("ul"),NC=a("li"),A6e=a("strong"),iSr=o("bert"),dSr=o(" \u2014 "),qJ=a("a"),cSr=o("FlaxBertForNextSentencePrediction"),fSr=o(" (BERT model)"),mSr=l(),F(jC.$$.fragment),LPe=l(),Qc=a("h2"),DC=a("a"),y6e=a("span"),F(r7.$$.fragment),gSr=l(),L6e=a("span"),hSr=o("FlaxAutoModelForImageClassification"),xPe=l(),vr=a("div"),F(t7.$$.fragment),pSr=l(),Wc=a("p"),uSr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),NJ=a("a"),_Sr=o("from_pretrained()"),bSr=o(" class method or the "),jJ=a("a"),vSr=o("from_config()"),FSr=o(` class
method.`),TSr=l(),a7=a("p"),MSr=o("This class cannot be instantiated directly using "),x6e=a("code"),ESr=o("__init__()"),CSr=o(" (throws an error)."),wSr=l(),zt=a("div"),F(n7.$$.fragment),ASr=l(),$6e=a("p"),ySr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),LSr=l(),Hc=a("p"),xSr=o(`Note:
Loading a model from its configuration file does `),k6e=a("strong"),$Sr=o("not"),kSr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),DJ=a("a"),SSr=o("from_pretrained()"),RSr=o(" to load the model weights."),BSr=l(),F(GC.$$.fragment),PSr=l(),Qr=a("div"),F(s7.$$.fragment),ISr=l(),S6e=a("p"),qSr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),NSr=l(),vn=a("p"),jSr=o("The model class to instantiate is selected based on the "),R6e=a("code"),DSr=o("model_type"),GSr=o(` property of the config object (either
passed as an argument or loaded from `),B6e=a("code"),OSr=o("pretrained_model_name_or_path"),VSr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),P6e=a("code"),XSr=o("pretrained_model_name_or_path"),zSr=o(":"),QSr=l(),l7=a("ul"),OC=a("li"),I6e=a("strong"),WSr=o("beit"),HSr=o(" \u2014 "),GJ=a("a"),USr=o("FlaxBeitForImageClassification"),JSr=o(" (BEiT model)"),YSr=l(),VC=a("li"),q6e=a("strong"),KSr=o("vit"),ZSr=o(" \u2014 "),OJ=a("a"),eRr=o("FlaxViTForImageClassification"),oRr=o(" (ViT model)"),rRr=l(),F(XC.$$.fragment),$Pe=l(),Uc=a("h2"),zC=a("a"),N6e=a("span"),F(i7.$$.fragment),tRr=l(),j6e=a("span"),aRr=o("FlaxAutoModelForVision2Seq"),kPe=l(),Fr=a("div"),F(d7.$$.fragment),nRr=l(),Jc=a("p"),sRr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),VJ=a("a"),lRr=o("from_pretrained()"),iRr=o(" class method or the "),XJ=a("a"),dRr=o("from_config()"),cRr=o(` class
method.`),fRr=l(),c7=a("p"),mRr=o("This class cannot be instantiated directly using "),D6e=a("code"),gRr=o("__init__()"),hRr=o(" (throws an error)."),pRr=l(),Qt=a("div"),F(f7.$$.fragment),uRr=l(),G6e=a("p"),_Rr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),bRr=l(),Yc=a("p"),vRr=o(`Note:
Loading a model from its configuration file does `),O6e=a("strong"),FRr=o("not"),TRr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zJ=a("a"),MRr=o("from_pretrained()"),ERr=o(" to load the model weights."),CRr=l(),F(QC.$$.fragment),wRr=l(),Wr=a("div"),F(m7.$$.fragment),ARr=l(),V6e=a("p"),yRr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),LRr=l(),Fn=a("p"),xRr=o("The model class to instantiate is selected based on the "),X6e=a("code"),$Rr=o("model_type"),kRr=o(` property of the config object (either
passed as an argument or loaded from `),z6e=a("code"),SRr=o("pretrained_model_name_or_path"),RRr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Q6e=a("code"),BRr=o("pretrained_model_name_or_path"),PRr=o(":"),IRr=l(),W6e=a("ul"),WC=a("li"),H6e=a("strong"),qRr=o("vision-encoder-decoder"),NRr=o(" \u2014 "),QJ=a("a"),jRr=o("FlaxVisionEncoderDecoderModel"),DRr=o(" (Vision Encoder decoder model)"),GRr=l(),F(HC.$$.fragment),this.h()},l(f){const _=_4t('[data-svelte="svelte-1phssyn"]',document.head);g=n(_,"META",{name:!0,content:!0}),_.forEach(t),v=i(f),p=n(f,"H1",{class:!0});var g7=s(p);m=n(g7,"A",{id:!0,class:!0,href:!0});var U6e=s(m);u=n(U6e,"SPAN",{});var J6e=s(u);T(d.$$.fragment,J6e),J6e.forEach(t),U6e.forEach(t),h=i(g7),Fo=n(g7,"SPAN",{});var Y6e=s(Fo);oi=r(Y6e,"Auto Classes"),Y6e.forEach(t),g7.forEach(t),of=i(f),Yr=n(f,"P",{});var h7=s(Yr);ri=r(h7,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),ti=n(h7,"CODE",{});var K6e=s(ti);cA=r(K6e,"from_pretrained()"),K6e.forEach(t),rf=r(h7,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),h7.forEach(t),Ie=i(f),Oe=n(f,"P",{});var Tn=s(Oe);ai=r(Tn,"Instantiating one of "),Mn=n(Tn,"A",{href:!0});var Z6e=s(Mn);fA=r(Z6e,"AutoConfig"),Z6e.forEach(t),En=r(Tn,", "),Cn=n(Tn,"A",{href:!0});var eTe=s(Cn);mA=r(eTe,"AutoModel"),eTe.forEach(t),ni=r(Tn,`, and
`),wn=n(Tn,"A",{href:!0});var oTe=s(wn);gA=r(oTe,"AutoTokenizer"),oTe.forEach(t),si=r(Tn," will directly create a class of the relevant architecture. For instance"),Tn.forEach(t),tf=i(f),T(va.$$.fragment,f),Ve=i(f),Ae=n(f,"P",{});var p7=s(Ae);wx=r(p7,"will create a model that is an instance of "),li=n(p7,"A",{href:!0});var rTe=s(li);Ax=r(rTe,"BertModel"),rTe.forEach(t),yx=r(p7,"."),p7.forEach(t),To=i(f),Fa=n(f,"P",{});var u7=s(Fa);Lx=r(u7,"There is one class of "),af=n(u7,"CODE",{});var tTe=s(af);xx=r(tTe,"AutoModel"),tTe.forEach(t),qqe=r(u7," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),u7.forEach(t),kRe=i(f),ii=n(f,"H2",{class:!0});var _7=s(ii);nf=n(_7,"A",{id:!0,class:!0,href:!0});var aTe=s(nf);qK=n(aTe,"SPAN",{});var nTe=s(qK);T(hA.$$.fragment,nTe),nTe.forEach(t),aTe.forEach(t),Nqe=i(_7),NK=n(_7,"SPAN",{});var sTe=s(NK);jqe=r(sTe,"Extending the Auto Classes"),sTe.forEach(t),_7.forEach(t),SRe=i(f),An=n(f,"P",{});var Kc=s(An);Dqe=r(Kc,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),jK=n(Kc,"CODE",{});var lTe=s(jK);Gqe=r(lTe,"NewModel"),lTe.forEach(t),Oqe=r(Kc,", make sure you have a "),DK=n(Kc,"CODE",{});var iTe=s(DK);Vqe=r(iTe,"NewModelConfig"),iTe.forEach(t),Xqe=r(Kc,` then you can add those to the auto
classes like this:`),Kc.forEach(t),RRe=i(f),T(pA.$$.fragment,f),BRe=i(f),$x=n(f,"P",{});var dTe=s($x);zqe=r(dTe,"You will then be able to use the auto classes like you would usually do!"),dTe.forEach(t),PRe=i(f),T(sf.$$.fragment,f),IRe=i(f),di=n(f,"H2",{class:!0});var b7=s(di);lf=n(b7,"A",{id:!0,class:!0,href:!0});var cTe=s(lf);GK=n(cTe,"SPAN",{});var fTe=s(GK);T(uA.$$.fragment,fTe),fTe.forEach(t),cTe.forEach(t),Qqe=i(b7),OK=n(b7,"SPAN",{});var mTe=s(OK);Wqe=r(mTe,"AutoConfig"),mTe.forEach(t),b7.forEach(t),qRe=i(f),Mo=n(f,"DIV",{class:!0});var Ur=s(Mo);T(_A.$$.fragment,Ur),Hqe=i(Ur),bA=n(Ur,"P",{});var v7=s(bA);Uqe=r(v7,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),kx=n(v7,"A",{href:!0});var gTe=s(kx);Jqe=r(gTe,"from_pretrained()"),gTe.forEach(t),Yqe=r(v7," class method."),v7.forEach(t),Kqe=i(Ur),vA=n(Ur,"P",{});var F7=s(vA);Zqe=r(F7,"This class cannot be instantiated directly using "),VK=n(F7,"CODE",{});var hTe=s(VK);eNe=r(hTe,"__init__()"),hTe.forEach(t),oNe=r(F7," (throws an error)."),F7.forEach(t),rNe=i(Ur),Tr=n(Ur,"DIV",{class:!0});var Jr=s(Tr);T(FA.$$.fragment,Jr),tNe=i(Jr),XK=n(Jr,"P",{});var pTe=s(XK);aNe=r(pTe,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),pTe.forEach(t),nNe=i(Jr),ci=n(Jr,"P",{});var Zc=s(ci);sNe=r(Zc,"The configuration class to instantiate is selected based on the "),zK=n(Zc,"CODE",{});var uTe=s(zK);lNe=r(uTe,"model_type"),uTe.forEach(t),iNe=r(Zc,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),QK=n(Zc,"CODE",{});var _Te=s(QK);dNe=r(_Te,"pretrained_model_name_or_path"),_Te.forEach(t),cNe=r(Zc,":"),Zc.forEach(t),fNe=i(Jr),y=n(Jr,"UL",{});var L=s(y);df=n(L,"LI",{});var UC=s(df);WK=n(UC,"STRONG",{});var bTe=s(WK);mNe=r(bTe,"albert"),bTe.forEach(t),gNe=r(UC," \u2014 "),Sx=n(UC,"A",{href:!0});var vTe=s(Sx);hNe=r(vTe,"AlbertConfig"),vTe.forEach(t),pNe=r(UC," (ALBERT model)"),UC.forEach(t),uNe=i(L),cf=n(L,"LI",{});var JC=s(cf);HK=n(JC,"STRONG",{});var FTe=s(HK);_Ne=r(FTe,"bart"),FTe.forEach(t),bNe=r(JC," \u2014 "),Rx=n(JC,"A",{href:!0});var TTe=s(Rx);vNe=r(TTe,"BartConfig"),TTe.forEach(t),FNe=r(JC," (BART model)"),JC.forEach(t),TNe=i(L),ff=n(L,"LI",{});var YC=s(ff);UK=n(YC,"STRONG",{});var MTe=s(UK);MNe=r(MTe,"beit"),MTe.forEach(t),ENe=r(YC," \u2014 "),Bx=n(YC,"A",{href:!0});var ETe=s(Bx);CNe=r(ETe,"BeitConfig"),ETe.forEach(t),wNe=r(YC," (BEiT model)"),YC.forEach(t),ANe=i(L),mf=n(L,"LI",{});var KC=s(mf);JK=n(KC,"STRONG",{});var CTe=s(JK);yNe=r(CTe,"bert"),CTe.forEach(t),LNe=r(KC," \u2014 "),Px=n(KC,"A",{href:!0});var wTe=s(Px);xNe=r(wTe,"BertConfig"),wTe.forEach(t),$Ne=r(KC," (BERT model)"),KC.forEach(t),kNe=i(L),gf=n(L,"LI",{});var ZC=s(gf);YK=n(ZC,"STRONG",{});var ATe=s(YK);SNe=r(ATe,"bert-generation"),ATe.forEach(t),RNe=r(ZC," \u2014 "),Ix=n(ZC,"A",{href:!0});var yTe=s(Ix);BNe=r(yTe,"BertGenerationConfig"),yTe.forEach(t),PNe=r(ZC," (Bert Generation model)"),ZC.forEach(t),INe=i(L),hf=n(L,"LI",{});var e3=s(hf);KK=n(e3,"STRONG",{});var LTe=s(KK);qNe=r(LTe,"big_bird"),LTe.forEach(t),NNe=r(e3," \u2014 "),qx=n(e3,"A",{href:!0});var xTe=s(qx);jNe=r(xTe,"BigBirdConfig"),xTe.forEach(t),DNe=r(e3," (BigBird model)"),e3.forEach(t),GNe=i(L),pf=n(L,"LI",{});var o3=s(pf);ZK=n(o3,"STRONG",{});var $Te=s(ZK);ONe=r($Te,"bigbird_pegasus"),$Te.forEach(t),VNe=r(o3," \u2014 "),Nx=n(o3,"A",{href:!0});var kTe=s(Nx);XNe=r(kTe,"BigBirdPegasusConfig"),kTe.forEach(t),zNe=r(o3," (BigBirdPegasus model)"),o3.forEach(t),QNe=i(L),uf=n(L,"LI",{});var r3=s(uf);eZ=n(r3,"STRONG",{});var STe=s(eZ);WNe=r(STe,"blenderbot"),STe.forEach(t),HNe=r(r3," \u2014 "),jx=n(r3,"A",{href:!0});var RTe=s(jx);UNe=r(RTe,"BlenderbotConfig"),RTe.forEach(t),JNe=r(r3," (Blenderbot model)"),r3.forEach(t),YNe=i(L),_f=n(L,"LI",{});var t3=s(_f);oZ=n(t3,"STRONG",{});var BTe=s(oZ);KNe=r(BTe,"blenderbot-small"),BTe.forEach(t),ZNe=r(t3," \u2014 "),Dx=n(t3,"A",{href:!0});var PTe=s(Dx);eje=r(PTe,"BlenderbotSmallConfig"),PTe.forEach(t),oje=r(t3," (BlenderbotSmall model)"),t3.forEach(t),rje=i(L),bf=n(L,"LI",{});var a3=s(bf);rZ=n(a3,"STRONG",{});var ITe=s(rZ);tje=r(ITe,"camembert"),ITe.forEach(t),aje=r(a3," \u2014 "),Gx=n(a3,"A",{href:!0});var qTe=s(Gx);nje=r(qTe,"CamembertConfig"),qTe.forEach(t),sje=r(a3," (CamemBERT model)"),a3.forEach(t),lje=i(L),vf=n(L,"LI",{});var n3=s(vf);tZ=n(n3,"STRONG",{});var NTe=s(tZ);ije=r(NTe,"canine"),NTe.forEach(t),dje=r(n3," \u2014 "),Ox=n(n3,"A",{href:!0});var jTe=s(Ox);cje=r(jTe,"CanineConfig"),jTe.forEach(t),fje=r(n3," (Canine model)"),n3.forEach(t),mje=i(L),Ff=n(L,"LI",{});var s3=s(Ff);aZ=n(s3,"STRONG",{});var DTe=s(aZ);gje=r(DTe,"clip"),DTe.forEach(t),hje=r(s3," \u2014 "),Vx=n(s3,"A",{href:!0});var GTe=s(Vx);pje=r(GTe,"CLIPConfig"),GTe.forEach(t),uje=r(s3," (CLIP model)"),s3.forEach(t),_je=i(L),Tf=n(L,"LI",{});var l3=s(Tf);nZ=n(l3,"STRONG",{});var OTe=s(nZ);bje=r(OTe,"convbert"),OTe.forEach(t),vje=r(l3," \u2014 "),Xx=n(l3,"A",{href:!0});var VTe=s(Xx);Fje=r(VTe,"ConvBertConfig"),VTe.forEach(t),Tje=r(l3," (ConvBERT model)"),l3.forEach(t),Mje=i(L),Mf=n(L,"LI",{});var i3=s(Mf);sZ=n(i3,"STRONG",{});var XTe=s(sZ);Eje=r(XTe,"convnext"),XTe.forEach(t),Cje=r(i3," \u2014 "),zx=n(i3,"A",{href:!0});var zTe=s(zx);wje=r(zTe,"ConvNextConfig"),zTe.forEach(t),Aje=r(i3," (ConvNext model)"),i3.forEach(t),yje=i(L),Ef=n(L,"LI",{});var d3=s(Ef);lZ=n(d3,"STRONG",{});var QTe=s(lZ);Lje=r(QTe,"ctrl"),QTe.forEach(t),xje=r(d3," \u2014 "),Qx=n(d3,"A",{href:!0});var WTe=s(Qx);$je=r(WTe,"CTRLConfig"),WTe.forEach(t),kje=r(d3," (CTRL model)"),d3.forEach(t),Sje=i(L),Cf=n(L,"LI",{});var c3=s(Cf);iZ=n(c3,"STRONG",{});var HTe=s(iZ);Rje=r(HTe,"data2vec-audio"),HTe.forEach(t),Bje=r(c3," \u2014 "),Wx=n(c3,"A",{href:!0});var UTe=s(Wx);Pje=r(UTe,"Data2VecAudioConfig"),UTe.forEach(t),Ije=r(c3," (Data2VecAudio model)"),c3.forEach(t),qje=i(L),wf=n(L,"LI",{});var f3=s(wf);dZ=n(f3,"STRONG",{});var JTe=s(dZ);Nje=r(JTe,"data2vec-text"),JTe.forEach(t),jje=r(f3," \u2014 "),Hx=n(f3,"A",{href:!0});var YTe=s(Hx);Dje=r(YTe,"Data2VecTextConfig"),YTe.forEach(t),Gje=r(f3," (Data2VecText model)"),f3.forEach(t),Oje=i(L),Af=n(L,"LI",{});var m3=s(Af);cZ=n(m3,"STRONG",{});var KTe=s(cZ);Vje=r(KTe,"data2vec-vision"),KTe.forEach(t),Xje=r(m3," \u2014 "),Ux=n(m3,"A",{href:!0});var ZTe=s(Ux);zje=r(ZTe,"Data2VecVisionConfig"),ZTe.forEach(t),Qje=r(m3," (Data2VecVision model)"),m3.forEach(t),Wje=i(L),yf=n(L,"LI",{});var g3=s(yf);fZ=n(g3,"STRONG",{});var eMe=s(fZ);Hje=r(eMe,"deberta"),eMe.forEach(t),Uje=r(g3," \u2014 "),Jx=n(g3,"A",{href:!0});var oMe=s(Jx);Jje=r(oMe,"DebertaConfig"),oMe.forEach(t),Yje=r(g3," (DeBERTa model)"),g3.forEach(t),Kje=i(L),Lf=n(L,"LI",{});var h3=s(Lf);mZ=n(h3,"STRONG",{});var rMe=s(mZ);Zje=r(rMe,"deberta-v2"),rMe.forEach(t),eDe=r(h3," \u2014 "),Yx=n(h3,"A",{href:!0});var tMe=s(Yx);oDe=r(tMe,"DebertaV2Config"),tMe.forEach(t),rDe=r(h3," (DeBERTa-v2 model)"),h3.forEach(t),tDe=i(L),xf=n(L,"LI",{});var p3=s(xf);gZ=n(p3,"STRONG",{});var aMe=s(gZ);aDe=r(aMe,"decision_transformer"),aMe.forEach(t),nDe=r(p3," \u2014 "),Kx=n(p3,"A",{href:!0});var nMe=s(Kx);sDe=r(nMe,"DecisionTransformerConfig"),nMe.forEach(t),lDe=r(p3," (Decision Transformer model)"),p3.forEach(t),iDe=i(L),$f=n(L,"LI",{});var u3=s($f);hZ=n(u3,"STRONG",{});var sMe=s(hZ);dDe=r(sMe,"deit"),sMe.forEach(t),cDe=r(u3," \u2014 "),Zx=n(u3,"A",{href:!0});var lMe=s(Zx);fDe=r(lMe,"DeiTConfig"),lMe.forEach(t),mDe=r(u3," (DeiT model)"),u3.forEach(t),gDe=i(L),kf=n(L,"LI",{});var iMe=s(kf);pZ=n(iMe,"STRONG",{});var VRr=s(pZ);hDe=r(VRr,"detr"),VRr.forEach(t),pDe=r(iMe," \u2014 "),e$=n(iMe,"A",{href:!0});var XRr=s(e$);uDe=r(XRr,"DetrConfig"),XRr.forEach(t),_De=r(iMe," (DETR model)"),iMe.forEach(t),bDe=i(L),Sf=n(L,"LI",{});var dMe=s(Sf);uZ=n(dMe,"STRONG",{});var zRr=s(uZ);vDe=r(zRr,"distilbert"),zRr.forEach(t),FDe=r(dMe," \u2014 "),o$=n(dMe,"A",{href:!0});var QRr=s(o$);TDe=r(QRr,"DistilBertConfig"),QRr.forEach(t),MDe=r(dMe," (DistilBERT model)"),dMe.forEach(t),EDe=i(L),Rf=n(L,"LI",{});var cMe=s(Rf);_Z=n(cMe,"STRONG",{});var WRr=s(_Z);CDe=r(WRr,"dpr"),WRr.forEach(t),wDe=r(cMe," \u2014 "),r$=n(cMe,"A",{href:!0});var HRr=s(r$);ADe=r(HRr,"DPRConfig"),HRr.forEach(t),yDe=r(cMe," (DPR model)"),cMe.forEach(t),LDe=i(L),Bf=n(L,"LI",{});var fMe=s(Bf);bZ=n(fMe,"STRONG",{});var URr=s(bZ);xDe=r(URr,"dpt"),URr.forEach(t),$De=r(fMe," \u2014 "),t$=n(fMe,"A",{href:!0});var JRr=s(t$);kDe=r(JRr,"DPTConfig"),JRr.forEach(t),SDe=r(fMe," (DPT model)"),fMe.forEach(t),RDe=i(L),Pf=n(L,"LI",{});var mMe=s(Pf);vZ=n(mMe,"STRONG",{});var YRr=s(vZ);BDe=r(YRr,"electra"),YRr.forEach(t),PDe=r(mMe," \u2014 "),a$=n(mMe,"A",{href:!0});var KRr=s(a$);IDe=r(KRr,"ElectraConfig"),KRr.forEach(t),qDe=r(mMe," (ELECTRA model)"),mMe.forEach(t),NDe=i(L),If=n(L,"LI",{});var gMe=s(If);FZ=n(gMe,"STRONG",{});var ZRr=s(FZ);jDe=r(ZRr,"encoder-decoder"),ZRr.forEach(t),DDe=r(gMe," \u2014 "),n$=n(gMe,"A",{href:!0});var eBr=s(n$);GDe=r(eBr,"EncoderDecoderConfig"),eBr.forEach(t),ODe=r(gMe," (Encoder decoder model)"),gMe.forEach(t),VDe=i(L),qf=n(L,"LI",{});var hMe=s(qf);TZ=n(hMe,"STRONG",{});var oBr=s(TZ);XDe=r(oBr,"flaubert"),oBr.forEach(t),zDe=r(hMe," \u2014 "),s$=n(hMe,"A",{href:!0});var rBr=s(s$);QDe=r(rBr,"FlaubertConfig"),rBr.forEach(t),WDe=r(hMe," (FlauBERT model)"),hMe.forEach(t),HDe=i(L),Nf=n(L,"LI",{});var pMe=s(Nf);MZ=n(pMe,"STRONG",{});var tBr=s(MZ);UDe=r(tBr,"fnet"),tBr.forEach(t),JDe=r(pMe," \u2014 "),l$=n(pMe,"A",{href:!0});var aBr=s(l$);YDe=r(aBr,"FNetConfig"),aBr.forEach(t),KDe=r(pMe," (FNet model)"),pMe.forEach(t),ZDe=i(L),jf=n(L,"LI",{});var uMe=s(jf);EZ=n(uMe,"STRONG",{});var nBr=s(EZ);eGe=r(nBr,"fsmt"),nBr.forEach(t),oGe=r(uMe," \u2014 "),i$=n(uMe,"A",{href:!0});var sBr=s(i$);rGe=r(sBr,"FSMTConfig"),sBr.forEach(t),tGe=r(uMe," (FairSeq Machine-Translation model)"),uMe.forEach(t),aGe=i(L),Df=n(L,"LI",{});var _Me=s(Df);CZ=n(_Me,"STRONG",{});var lBr=s(CZ);nGe=r(lBr,"funnel"),lBr.forEach(t),sGe=r(_Me," \u2014 "),d$=n(_Me,"A",{href:!0});var iBr=s(d$);lGe=r(iBr,"FunnelConfig"),iBr.forEach(t),iGe=r(_Me," (Funnel Transformer model)"),_Me.forEach(t),dGe=i(L),Gf=n(L,"LI",{});var bMe=s(Gf);wZ=n(bMe,"STRONG",{});var dBr=s(wZ);cGe=r(dBr,"glpn"),dBr.forEach(t),fGe=r(bMe," \u2014 "),c$=n(bMe,"A",{href:!0});var cBr=s(c$);mGe=r(cBr,"GLPNConfig"),cBr.forEach(t),gGe=r(bMe," (GLPN model)"),bMe.forEach(t),hGe=i(L),Of=n(L,"LI",{});var vMe=s(Of);AZ=n(vMe,"STRONG",{});var fBr=s(AZ);pGe=r(fBr,"gpt2"),fBr.forEach(t),uGe=r(vMe," \u2014 "),f$=n(vMe,"A",{href:!0});var mBr=s(f$);_Ge=r(mBr,"GPT2Config"),mBr.forEach(t),bGe=r(vMe," (OpenAI GPT-2 model)"),vMe.forEach(t),vGe=i(L),Vf=n(L,"LI",{});var FMe=s(Vf);yZ=n(FMe,"STRONG",{});var gBr=s(yZ);FGe=r(gBr,"gpt_neo"),gBr.forEach(t),TGe=r(FMe," \u2014 "),m$=n(FMe,"A",{href:!0});var hBr=s(m$);MGe=r(hBr,"GPTNeoConfig"),hBr.forEach(t),EGe=r(FMe," (GPT Neo model)"),FMe.forEach(t),CGe=i(L),Xf=n(L,"LI",{});var TMe=s(Xf);LZ=n(TMe,"STRONG",{});var pBr=s(LZ);wGe=r(pBr,"gptj"),pBr.forEach(t),AGe=r(TMe," \u2014 "),g$=n(TMe,"A",{href:!0});var uBr=s(g$);yGe=r(uBr,"GPTJConfig"),uBr.forEach(t),LGe=r(TMe," (GPT-J model)"),TMe.forEach(t),xGe=i(L),zf=n(L,"LI",{});var MMe=s(zf);xZ=n(MMe,"STRONG",{});var _Br=s(xZ);$Ge=r(_Br,"hubert"),_Br.forEach(t),kGe=r(MMe," \u2014 "),h$=n(MMe,"A",{href:!0});var bBr=s(h$);SGe=r(bBr,"HubertConfig"),bBr.forEach(t),RGe=r(MMe," (Hubert model)"),MMe.forEach(t),BGe=i(L),Qf=n(L,"LI",{});var EMe=s(Qf);$Z=n(EMe,"STRONG",{});var vBr=s($Z);PGe=r(vBr,"ibert"),vBr.forEach(t),IGe=r(EMe," \u2014 "),p$=n(EMe,"A",{href:!0});var FBr=s(p$);qGe=r(FBr,"IBertConfig"),FBr.forEach(t),NGe=r(EMe," (I-BERT model)"),EMe.forEach(t),jGe=i(L),Wf=n(L,"LI",{});var CMe=s(Wf);kZ=n(CMe,"STRONG",{});var TBr=s(kZ);DGe=r(TBr,"imagegpt"),TBr.forEach(t),GGe=r(CMe," \u2014 "),u$=n(CMe,"A",{href:!0});var MBr=s(u$);OGe=r(MBr,"ImageGPTConfig"),MBr.forEach(t),VGe=r(CMe," (ImageGPT model)"),CMe.forEach(t),XGe=i(L),Hf=n(L,"LI",{});var wMe=s(Hf);SZ=n(wMe,"STRONG",{});var EBr=s(SZ);zGe=r(EBr,"layoutlm"),EBr.forEach(t),QGe=r(wMe," \u2014 "),_$=n(wMe,"A",{href:!0});var CBr=s(_$);WGe=r(CBr,"LayoutLMConfig"),CBr.forEach(t),HGe=r(wMe," (LayoutLM model)"),wMe.forEach(t),UGe=i(L),Uf=n(L,"LI",{});var AMe=s(Uf);RZ=n(AMe,"STRONG",{});var wBr=s(RZ);JGe=r(wBr,"layoutlmv2"),wBr.forEach(t),YGe=r(AMe," \u2014 "),b$=n(AMe,"A",{href:!0});var ABr=s(b$);KGe=r(ABr,"LayoutLMv2Config"),ABr.forEach(t),ZGe=r(AMe," (LayoutLMv2 model)"),AMe.forEach(t),eOe=i(L),Jf=n(L,"LI",{});var yMe=s(Jf);BZ=n(yMe,"STRONG",{});var yBr=s(BZ);oOe=r(yBr,"led"),yBr.forEach(t),rOe=r(yMe," \u2014 "),v$=n(yMe,"A",{href:!0});var LBr=s(v$);tOe=r(LBr,"LEDConfig"),LBr.forEach(t),aOe=r(yMe," (LED model)"),yMe.forEach(t),nOe=i(L),Yf=n(L,"LI",{});var LMe=s(Yf);PZ=n(LMe,"STRONG",{});var xBr=s(PZ);sOe=r(xBr,"longformer"),xBr.forEach(t),lOe=r(LMe," \u2014 "),F$=n(LMe,"A",{href:!0});var $Br=s(F$);iOe=r($Br,"LongformerConfig"),$Br.forEach(t),dOe=r(LMe," (Longformer model)"),LMe.forEach(t),cOe=i(L),Kf=n(L,"LI",{});var xMe=s(Kf);IZ=n(xMe,"STRONG",{});var kBr=s(IZ);fOe=r(kBr,"luke"),kBr.forEach(t),mOe=r(xMe," \u2014 "),T$=n(xMe,"A",{href:!0});var SBr=s(T$);gOe=r(SBr,"LukeConfig"),SBr.forEach(t),hOe=r(xMe," (LUKE model)"),xMe.forEach(t),pOe=i(L),Zf=n(L,"LI",{});var $Me=s(Zf);qZ=n($Me,"STRONG",{});var RBr=s(qZ);uOe=r(RBr,"lxmert"),RBr.forEach(t),_Oe=r($Me," \u2014 "),M$=n($Me,"A",{href:!0});var BBr=s(M$);bOe=r(BBr,"LxmertConfig"),BBr.forEach(t),vOe=r($Me," (LXMERT model)"),$Me.forEach(t),FOe=i(L),em=n(L,"LI",{});var kMe=s(em);NZ=n(kMe,"STRONG",{});var PBr=s(NZ);TOe=r(PBr,"m2m_100"),PBr.forEach(t),MOe=r(kMe," \u2014 "),E$=n(kMe,"A",{href:!0});var IBr=s(E$);EOe=r(IBr,"M2M100Config"),IBr.forEach(t),COe=r(kMe," (M2M100 model)"),kMe.forEach(t),wOe=i(L),om=n(L,"LI",{});var SMe=s(om);jZ=n(SMe,"STRONG",{});var qBr=s(jZ);AOe=r(qBr,"marian"),qBr.forEach(t),yOe=r(SMe," \u2014 "),C$=n(SMe,"A",{href:!0});var NBr=s(C$);LOe=r(NBr,"MarianConfig"),NBr.forEach(t),xOe=r(SMe," (Marian model)"),SMe.forEach(t),$Oe=i(L),rm=n(L,"LI",{});var RMe=s(rm);DZ=n(RMe,"STRONG",{});var jBr=s(DZ);kOe=r(jBr,"maskformer"),jBr.forEach(t),SOe=r(RMe," \u2014 "),w$=n(RMe,"A",{href:!0});var DBr=s(w$);ROe=r(DBr,"MaskFormerConfig"),DBr.forEach(t),BOe=r(RMe," (MaskFormer model)"),RMe.forEach(t),POe=i(L),tm=n(L,"LI",{});var BMe=s(tm);GZ=n(BMe,"STRONG",{});var GBr=s(GZ);IOe=r(GBr,"mbart"),GBr.forEach(t),qOe=r(BMe," \u2014 "),A$=n(BMe,"A",{href:!0});var OBr=s(A$);NOe=r(OBr,"MBartConfig"),OBr.forEach(t),jOe=r(BMe," (mBART model)"),BMe.forEach(t),DOe=i(L),am=n(L,"LI",{});var PMe=s(am);OZ=n(PMe,"STRONG",{});var VBr=s(OZ);GOe=r(VBr,"megatron-bert"),VBr.forEach(t),OOe=r(PMe," \u2014 "),y$=n(PMe,"A",{href:!0});var XBr=s(y$);VOe=r(XBr,"MegatronBertConfig"),XBr.forEach(t),XOe=r(PMe," (MegatronBert model)"),PMe.forEach(t),zOe=i(L),nm=n(L,"LI",{});var IMe=s(nm);VZ=n(IMe,"STRONG",{});var zBr=s(VZ);QOe=r(zBr,"mobilebert"),zBr.forEach(t),WOe=r(IMe," \u2014 "),L$=n(IMe,"A",{href:!0});var QBr=s(L$);HOe=r(QBr,"MobileBertConfig"),QBr.forEach(t),UOe=r(IMe," (MobileBERT model)"),IMe.forEach(t),JOe=i(L),sm=n(L,"LI",{});var qMe=s(sm);XZ=n(qMe,"STRONG",{});var WBr=s(XZ);YOe=r(WBr,"mpnet"),WBr.forEach(t),KOe=r(qMe," \u2014 "),x$=n(qMe,"A",{href:!0});var HBr=s(x$);ZOe=r(HBr,"MPNetConfig"),HBr.forEach(t),eVe=r(qMe," (MPNet model)"),qMe.forEach(t),oVe=i(L),lm=n(L,"LI",{});var NMe=s(lm);zZ=n(NMe,"STRONG",{});var UBr=s(zZ);rVe=r(UBr,"mt5"),UBr.forEach(t),tVe=r(NMe," \u2014 "),$$=n(NMe,"A",{href:!0});var JBr=s($$);aVe=r(JBr,"MT5Config"),JBr.forEach(t),nVe=r(NMe," (mT5 model)"),NMe.forEach(t),sVe=i(L),im=n(L,"LI",{});var jMe=s(im);QZ=n(jMe,"STRONG",{});var YBr=s(QZ);lVe=r(YBr,"nystromformer"),YBr.forEach(t),iVe=r(jMe," \u2014 "),k$=n(jMe,"A",{href:!0});var KBr=s(k$);dVe=r(KBr,"NystromformerConfig"),KBr.forEach(t),cVe=r(jMe," (Nystromformer model)"),jMe.forEach(t),fVe=i(L),dm=n(L,"LI",{});var DMe=s(dm);WZ=n(DMe,"STRONG",{});var ZBr=s(WZ);mVe=r(ZBr,"openai-gpt"),ZBr.forEach(t),gVe=r(DMe," \u2014 "),S$=n(DMe,"A",{href:!0});var ePr=s(S$);hVe=r(ePr,"OpenAIGPTConfig"),ePr.forEach(t),pVe=r(DMe," (OpenAI GPT model)"),DMe.forEach(t),uVe=i(L),cm=n(L,"LI",{});var GMe=s(cm);HZ=n(GMe,"STRONG",{});var oPr=s(HZ);_Ve=r(oPr,"pegasus"),oPr.forEach(t),bVe=r(GMe," \u2014 "),R$=n(GMe,"A",{href:!0});var rPr=s(R$);vVe=r(rPr,"PegasusConfig"),rPr.forEach(t),FVe=r(GMe," (Pegasus model)"),GMe.forEach(t),TVe=i(L),fm=n(L,"LI",{});var OMe=s(fm);UZ=n(OMe,"STRONG",{});var tPr=s(UZ);MVe=r(tPr,"perceiver"),tPr.forEach(t),EVe=r(OMe," \u2014 "),B$=n(OMe,"A",{href:!0});var aPr=s(B$);CVe=r(aPr,"PerceiverConfig"),aPr.forEach(t),wVe=r(OMe," (Perceiver model)"),OMe.forEach(t),AVe=i(L),mm=n(L,"LI",{});var VMe=s(mm);JZ=n(VMe,"STRONG",{});var nPr=s(JZ);yVe=r(nPr,"plbart"),nPr.forEach(t),LVe=r(VMe," \u2014 "),P$=n(VMe,"A",{href:!0});var sPr=s(P$);xVe=r(sPr,"PLBartConfig"),sPr.forEach(t),$Ve=r(VMe," (PLBart model)"),VMe.forEach(t),kVe=i(L),gm=n(L,"LI",{});var XMe=s(gm);YZ=n(XMe,"STRONG",{});var lPr=s(YZ);SVe=r(lPr,"poolformer"),lPr.forEach(t),RVe=r(XMe," \u2014 "),I$=n(XMe,"A",{href:!0});var iPr=s(I$);BVe=r(iPr,"PoolFormerConfig"),iPr.forEach(t),PVe=r(XMe," (PoolFormer model)"),XMe.forEach(t),IVe=i(L),hm=n(L,"LI",{});var zMe=s(hm);KZ=n(zMe,"STRONG",{});var dPr=s(KZ);qVe=r(dPr,"prophetnet"),dPr.forEach(t),NVe=r(zMe," \u2014 "),q$=n(zMe,"A",{href:!0});var cPr=s(q$);jVe=r(cPr,"ProphetNetConfig"),cPr.forEach(t),DVe=r(zMe," (ProphetNet model)"),zMe.forEach(t),GVe=i(L),pm=n(L,"LI",{});var QMe=s(pm);ZZ=n(QMe,"STRONG",{});var fPr=s(ZZ);OVe=r(fPr,"qdqbert"),fPr.forEach(t),VVe=r(QMe," \u2014 "),N$=n(QMe,"A",{href:!0});var mPr=s(N$);XVe=r(mPr,"QDQBertConfig"),mPr.forEach(t),zVe=r(QMe," (QDQBert model)"),QMe.forEach(t),QVe=i(L),um=n(L,"LI",{});var WMe=s(um);eee=n(WMe,"STRONG",{});var gPr=s(eee);WVe=r(gPr,"rag"),gPr.forEach(t),HVe=r(WMe," \u2014 "),j$=n(WMe,"A",{href:!0});var hPr=s(j$);UVe=r(hPr,"RagConfig"),hPr.forEach(t),JVe=r(WMe," (RAG model)"),WMe.forEach(t),YVe=i(L),_m=n(L,"LI",{});var HMe=s(_m);oee=n(HMe,"STRONG",{});var pPr=s(oee);KVe=r(pPr,"realm"),pPr.forEach(t),ZVe=r(HMe," \u2014 "),D$=n(HMe,"A",{href:!0});var uPr=s(D$);eXe=r(uPr,"RealmConfig"),uPr.forEach(t),oXe=r(HMe," (Realm model)"),HMe.forEach(t),rXe=i(L),bm=n(L,"LI",{});var UMe=s(bm);ree=n(UMe,"STRONG",{});var _Pr=s(ree);tXe=r(_Pr,"reformer"),_Pr.forEach(t),aXe=r(UMe," \u2014 "),G$=n(UMe,"A",{href:!0});var bPr=s(G$);nXe=r(bPr,"ReformerConfig"),bPr.forEach(t),sXe=r(UMe," (Reformer model)"),UMe.forEach(t),lXe=i(L),vm=n(L,"LI",{});var JMe=s(vm);tee=n(JMe,"STRONG",{});var vPr=s(tee);iXe=r(vPr,"regnet"),vPr.forEach(t),dXe=r(JMe," \u2014 "),O$=n(JMe,"A",{href:!0});var FPr=s(O$);cXe=r(FPr,"RegNetConfig"),FPr.forEach(t),fXe=r(JMe," (RegNet model)"),JMe.forEach(t),mXe=i(L),Fm=n(L,"LI",{});var YMe=s(Fm);aee=n(YMe,"STRONG",{});var TPr=s(aee);gXe=r(TPr,"rembert"),TPr.forEach(t),hXe=r(YMe," \u2014 "),V$=n(YMe,"A",{href:!0});var MPr=s(V$);pXe=r(MPr,"RemBertConfig"),MPr.forEach(t),uXe=r(YMe," (RemBERT model)"),YMe.forEach(t),_Xe=i(L),Tm=n(L,"LI",{});var KMe=s(Tm);nee=n(KMe,"STRONG",{});var EPr=s(nee);bXe=r(EPr,"resnet"),EPr.forEach(t),vXe=r(KMe," \u2014 "),X$=n(KMe,"A",{href:!0});var CPr=s(X$);FXe=r(CPr,"ResNetConfig"),CPr.forEach(t),TXe=r(KMe," (ResNet model)"),KMe.forEach(t),MXe=i(L),Mm=n(L,"LI",{});var ZMe=s(Mm);see=n(ZMe,"STRONG",{});var wPr=s(see);EXe=r(wPr,"retribert"),wPr.forEach(t),CXe=r(ZMe," \u2014 "),z$=n(ZMe,"A",{href:!0});var APr=s(z$);wXe=r(APr,"RetriBertConfig"),APr.forEach(t),AXe=r(ZMe," (RetriBERT model)"),ZMe.forEach(t),yXe=i(L),Em=n(L,"LI",{});var e4e=s(Em);lee=n(e4e,"STRONG",{});var yPr=s(lee);LXe=r(yPr,"roberta"),yPr.forEach(t),xXe=r(e4e," \u2014 "),Q$=n(e4e,"A",{href:!0});var LPr=s(Q$);$Xe=r(LPr,"RobertaConfig"),LPr.forEach(t),kXe=r(e4e," (RoBERTa model)"),e4e.forEach(t),SXe=i(L),Cm=n(L,"LI",{});var o4e=s(Cm);iee=n(o4e,"STRONG",{});var xPr=s(iee);RXe=r(xPr,"roformer"),xPr.forEach(t),BXe=r(o4e," \u2014 "),W$=n(o4e,"A",{href:!0});var $Pr=s(W$);PXe=r($Pr,"RoFormerConfig"),$Pr.forEach(t),IXe=r(o4e," (RoFormer model)"),o4e.forEach(t),qXe=i(L),wm=n(L,"LI",{});var r4e=s(wm);dee=n(r4e,"STRONG",{});var kPr=s(dee);NXe=r(kPr,"segformer"),kPr.forEach(t),jXe=r(r4e," \u2014 "),H$=n(r4e,"A",{href:!0});var SPr=s(H$);DXe=r(SPr,"SegformerConfig"),SPr.forEach(t),GXe=r(r4e," (SegFormer model)"),r4e.forEach(t),OXe=i(L),Am=n(L,"LI",{});var t4e=s(Am);cee=n(t4e,"STRONG",{});var RPr=s(cee);VXe=r(RPr,"sew"),RPr.forEach(t),XXe=r(t4e," \u2014 "),U$=n(t4e,"A",{href:!0});var BPr=s(U$);zXe=r(BPr,"SEWConfig"),BPr.forEach(t),QXe=r(t4e," (SEW model)"),t4e.forEach(t),WXe=i(L),ym=n(L,"LI",{});var a4e=s(ym);fee=n(a4e,"STRONG",{});var PPr=s(fee);HXe=r(PPr,"sew-d"),PPr.forEach(t),UXe=r(a4e," \u2014 "),J$=n(a4e,"A",{href:!0});var IPr=s(J$);JXe=r(IPr,"SEWDConfig"),IPr.forEach(t),YXe=r(a4e," (SEW-D model)"),a4e.forEach(t),KXe=i(L),Lm=n(L,"LI",{});var n4e=s(Lm);mee=n(n4e,"STRONG",{});var qPr=s(mee);ZXe=r(qPr,"speech-encoder-decoder"),qPr.forEach(t),eze=r(n4e," \u2014 "),Y$=n(n4e,"A",{href:!0});var NPr=s(Y$);oze=r(NPr,"SpeechEncoderDecoderConfig"),NPr.forEach(t),rze=r(n4e," (Speech Encoder decoder model)"),n4e.forEach(t),tze=i(L),xm=n(L,"LI",{});var s4e=s(xm);gee=n(s4e,"STRONG",{});var jPr=s(gee);aze=r(jPr,"speech_to_text"),jPr.forEach(t),nze=r(s4e," \u2014 "),K$=n(s4e,"A",{href:!0});var DPr=s(K$);sze=r(DPr,"Speech2TextConfig"),DPr.forEach(t),lze=r(s4e," (Speech2Text model)"),s4e.forEach(t),ize=i(L),$m=n(L,"LI",{});var l4e=s($m);hee=n(l4e,"STRONG",{});var GPr=s(hee);dze=r(GPr,"speech_to_text_2"),GPr.forEach(t),cze=r(l4e," \u2014 "),Z$=n(l4e,"A",{href:!0});var OPr=s(Z$);fze=r(OPr,"Speech2Text2Config"),OPr.forEach(t),mze=r(l4e," (Speech2Text2 model)"),l4e.forEach(t),gze=i(L),km=n(L,"LI",{});var i4e=s(km);pee=n(i4e,"STRONG",{});var VPr=s(pee);hze=r(VPr,"splinter"),VPr.forEach(t),pze=r(i4e," \u2014 "),ek=n(i4e,"A",{href:!0});var XPr=s(ek);uze=r(XPr,"SplinterConfig"),XPr.forEach(t),_ze=r(i4e," (Splinter model)"),i4e.forEach(t),bze=i(L),Sm=n(L,"LI",{});var d4e=s(Sm);uee=n(d4e,"STRONG",{});var zPr=s(uee);vze=r(zPr,"squeezebert"),zPr.forEach(t),Fze=r(d4e," \u2014 "),ok=n(d4e,"A",{href:!0});var QPr=s(ok);Tze=r(QPr,"SqueezeBertConfig"),QPr.forEach(t),Mze=r(d4e," (SqueezeBERT model)"),d4e.forEach(t),Eze=i(L),Rm=n(L,"LI",{});var c4e=s(Rm);_ee=n(c4e,"STRONG",{});var WPr=s(_ee);Cze=r(WPr,"swin"),WPr.forEach(t),wze=r(c4e," \u2014 "),rk=n(c4e,"A",{href:!0});var HPr=s(rk);Aze=r(HPr,"SwinConfig"),HPr.forEach(t),yze=r(c4e," (Swin model)"),c4e.forEach(t),Lze=i(L),Bm=n(L,"LI",{});var f4e=s(Bm);bee=n(f4e,"STRONG",{});var UPr=s(bee);xze=r(UPr,"t5"),UPr.forEach(t),$ze=r(f4e," \u2014 "),tk=n(f4e,"A",{href:!0});var JPr=s(tk);kze=r(JPr,"T5Config"),JPr.forEach(t),Sze=r(f4e," (T5 model)"),f4e.forEach(t),Rze=i(L),Pm=n(L,"LI",{});var m4e=s(Pm);vee=n(m4e,"STRONG",{});var YPr=s(vee);Bze=r(YPr,"tapas"),YPr.forEach(t),Pze=r(m4e," \u2014 "),ak=n(m4e,"A",{href:!0});var KPr=s(ak);Ize=r(KPr,"TapasConfig"),KPr.forEach(t),qze=r(m4e," (TAPAS model)"),m4e.forEach(t),Nze=i(L),Im=n(L,"LI",{});var g4e=s(Im);Fee=n(g4e,"STRONG",{});var ZPr=s(Fee);jze=r(ZPr,"tapex"),ZPr.forEach(t),Dze=r(g4e," \u2014 "),nk=n(g4e,"A",{href:!0});var eIr=s(nk);Gze=r(eIr,"BartConfig"),eIr.forEach(t),Oze=r(g4e," (TAPEX model)"),g4e.forEach(t),Vze=i(L),qm=n(L,"LI",{});var h4e=s(qm);Tee=n(h4e,"STRONG",{});var oIr=s(Tee);Xze=r(oIr,"transfo-xl"),oIr.forEach(t),zze=r(h4e," \u2014 "),sk=n(h4e,"A",{href:!0});var rIr=s(sk);Qze=r(rIr,"TransfoXLConfig"),rIr.forEach(t),Wze=r(h4e," (Transformer-XL model)"),h4e.forEach(t),Hze=i(L),Nm=n(L,"LI",{});var p4e=s(Nm);Mee=n(p4e,"STRONG",{});var tIr=s(Mee);Uze=r(tIr,"trocr"),tIr.forEach(t),Jze=r(p4e," \u2014 "),lk=n(p4e,"A",{href:!0});var aIr=s(lk);Yze=r(aIr,"TrOCRConfig"),aIr.forEach(t),Kze=r(p4e," (TrOCR model)"),p4e.forEach(t),Zze=i(L),jm=n(L,"LI",{});var u4e=s(jm);Eee=n(u4e,"STRONG",{});var nIr=s(Eee);eQe=r(nIr,"unispeech"),nIr.forEach(t),oQe=r(u4e," \u2014 "),ik=n(u4e,"A",{href:!0});var sIr=s(ik);rQe=r(sIr,"UniSpeechConfig"),sIr.forEach(t),tQe=r(u4e," (UniSpeech model)"),u4e.forEach(t),aQe=i(L),Dm=n(L,"LI",{});var _4e=s(Dm);Cee=n(_4e,"STRONG",{});var lIr=s(Cee);nQe=r(lIr,"unispeech-sat"),lIr.forEach(t),sQe=r(_4e," \u2014 "),dk=n(_4e,"A",{href:!0});var iIr=s(dk);lQe=r(iIr,"UniSpeechSatConfig"),iIr.forEach(t),iQe=r(_4e," (UniSpeechSat model)"),_4e.forEach(t),dQe=i(L),Gm=n(L,"LI",{});var b4e=s(Gm);wee=n(b4e,"STRONG",{});var dIr=s(wee);cQe=r(dIr,"van"),dIr.forEach(t),fQe=r(b4e," \u2014 "),ck=n(b4e,"A",{href:!0});var cIr=s(ck);mQe=r(cIr,"VanConfig"),cIr.forEach(t),gQe=r(b4e," (VAN model)"),b4e.forEach(t),hQe=i(L),Om=n(L,"LI",{});var v4e=s(Om);Aee=n(v4e,"STRONG",{});var fIr=s(Aee);pQe=r(fIr,"vilt"),fIr.forEach(t),uQe=r(v4e," \u2014 "),fk=n(v4e,"A",{href:!0});var mIr=s(fk);_Qe=r(mIr,"ViltConfig"),mIr.forEach(t),bQe=r(v4e," (ViLT model)"),v4e.forEach(t),vQe=i(L),Vm=n(L,"LI",{});var F4e=s(Vm);yee=n(F4e,"STRONG",{});var gIr=s(yee);FQe=r(gIr,"vision-encoder-decoder"),gIr.forEach(t),TQe=r(F4e," \u2014 "),mk=n(F4e,"A",{href:!0});var hIr=s(mk);MQe=r(hIr,"VisionEncoderDecoderConfig"),hIr.forEach(t),EQe=r(F4e," (Vision Encoder decoder model)"),F4e.forEach(t),CQe=i(L),Xm=n(L,"LI",{});var T4e=s(Xm);Lee=n(T4e,"STRONG",{});var pIr=s(Lee);wQe=r(pIr,"vision-text-dual-encoder"),pIr.forEach(t),AQe=r(T4e," \u2014 "),gk=n(T4e,"A",{href:!0});var uIr=s(gk);yQe=r(uIr,"VisionTextDualEncoderConfig"),uIr.forEach(t),LQe=r(T4e," (VisionTextDualEncoder model)"),T4e.forEach(t),xQe=i(L),zm=n(L,"LI",{});var M4e=s(zm);xee=n(M4e,"STRONG",{});var _Ir=s(xee);$Qe=r(_Ir,"visual_bert"),_Ir.forEach(t),kQe=r(M4e," \u2014 "),hk=n(M4e,"A",{href:!0});var bIr=s(hk);SQe=r(bIr,"VisualBertConfig"),bIr.forEach(t),RQe=r(M4e," (VisualBert model)"),M4e.forEach(t),BQe=i(L),Qm=n(L,"LI",{});var E4e=s(Qm);$ee=n(E4e,"STRONG",{});var vIr=s($ee);PQe=r(vIr,"vit"),vIr.forEach(t),IQe=r(E4e," \u2014 "),pk=n(E4e,"A",{href:!0});var FIr=s(pk);qQe=r(FIr,"ViTConfig"),FIr.forEach(t),NQe=r(E4e," (ViT model)"),E4e.forEach(t),jQe=i(L),Wm=n(L,"LI",{});var C4e=s(Wm);kee=n(C4e,"STRONG",{});var TIr=s(kee);DQe=r(TIr,"vit_mae"),TIr.forEach(t),GQe=r(C4e," \u2014 "),uk=n(C4e,"A",{href:!0});var MIr=s(uk);OQe=r(MIr,"ViTMAEConfig"),MIr.forEach(t),VQe=r(C4e," (ViTMAE model)"),C4e.forEach(t),XQe=i(L),Hm=n(L,"LI",{});var w4e=s(Hm);See=n(w4e,"STRONG",{});var EIr=s(See);zQe=r(EIr,"wav2vec2"),EIr.forEach(t),QQe=r(w4e," \u2014 "),_k=n(w4e,"A",{href:!0});var CIr=s(_k);WQe=r(CIr,"Wav2Vec2Config"),CIr.forEach(t),HQe=r(w4e," (Wav2Vec2 model)"),w4e.forEach(t),UQe=i(L),Um=n(L,"LI",{});var A4e=s(Um);Ree=n(A4e,"STRONG",{});var wIr=s(Ree);JQe=r(wIr,"wavlm"),wIr.forEach(t),YQe=r(A4e," \u2014 "),bk=n(A4e,"A",{href:!0});var AIr=s(bk);KQe=r(AIr,"WavLMConfig"),AIr.forEach(t),ZQe=r(A4e," (WavLM model)"),A4e.forEach(t),eWe=i(L),Jm=n(L,"LI",{});var y4e=s(Jm);Bee=n(y4e,"STRONG",{});var yIr=s(Bee);oWe=r(yIr,"xglm"),yIr.forEach(t),rWe=r(y4e," \u2014 "),vk=n(y4e,"A",{href:!0});var LIr=s(vk);tWe=r(LIr,"XGLMConfig"),LIr.forEach(t),aWe=r(y4e," (XGLM model)"),y4e.forEach(t),nWe=i(L),Ym=n(L,"LI",{});var L4e=s(Ym);Pee=n(L4e,"STRONG",{});var xIr=s(Pee);sWe=r(xIr,"xlm"),xIr.forEach(t),lWe=r(L4e," \u2014 "),Fk=n(L4e,"A",{href:!0});var $Ir=s(Fk);iWe=r($Ir,"XLMConfig"),$Ir.forEach(t),dWe=r(L4e," (XLM model)"),L4e.forEach(t),cWe=i(L),Km=n(L,"LI",{});var x4e=s(Km);Iee=n(x4e,"STRONG",{});var kIr=s(Iee);fWe=r(kIr,"xlm-prophetnet"),kIr.forEach(t),mWe=r(x4e," \u2014 "),Tk=n(x4e,"A",{href:!0});var SIr=s(Tk);gWe=r(SIr,"XLMProphetNetConfig"),SIr.forEach(t),hWe=r(x4e," (XLMProphetNet model)"),x4e.forEach(t),pWe=i(L),Zm=n(L,"LI",{});var $4e=s(Zm);qee=n($4e,"STRONG",{});var RIr=s(qee);uWe=r(RIr,"xlm-roberta"),RIr.forEach(t),_We=r($4e," \u2014 "),Mk=n($4e,"A",{href:!0});var BIr=s(Mk);bWe=r(BIr,"XLMRobertaConfig"),BIr.forEach(t),vWe=r($4e," (XLM-RoBERTa model)"),$4e.forEach(t),FWe=i(L),eg=n(L,"LI",{});var k4e=s(eg);Nee=n(k4e,"STRONG",{});var PIr=s(Nee);TWe=r(PIr,"xlm-roberta-xl"),PIr.forEach(t),MWe=r(k4e," \u2014 "),Ek=n(k4e,"A",{href:!0});var IIr=s(Ek);EWe=r(IIr,"XLMRobertaXLConfig"),IIr.forEach(t),CWe=r(k4e," (XLM-RoBERTa-XL model)"),k4e.forEach(t),wWe=i(L),og=n(L,"LI",{});var S4e=s(og);jee=n(S4e,"STRONG",{});var qIr=s(jee);AWe=r(qIr,"xlnet"),qIr.forEach(t),yWe=r(S4e," \u2014 "),Ck=n(S4e,"A",{href:!0});var NIr=s(Ck);LWe=r(NIr,"XLNetConfig"),NIr.forEach(t),xWe=r(S4e," (XLNet model)"),S4e.forEach(t),$We=i(L),rg=n(L,"LI",{});var R4e=s(rg);Dee=n(R4e,"STRONG",{});var jIr=s(Dee);kWe=r(jIr,"yoso"),jIr.forEach(t),SWe=r(R4e," \u2014 "),wk=n(R4e,"A",{href:!0});var DIr=s(wk);RWe=r(DIr,"YosoConfig"),DIr.forEach(t),BWe=r(R4e," (YOSO model)"),R4e.forEach(t),L.forEach(t),PWe=i(Jr),T(tg.$$.fragment,Jr),Jr.forEach(t),IWe=i(Ur),ag=n(Ur,"DIV",{class:!0});var RPe=s(ag);T(TA.$$.fragment,RPe),qWe=i(RPe),Gee=n(RPe,"P",{});var GIr=s(Gee);NWe=r(GIr,"Register a new configuration for this class."),GIr.forEach(t),RPe.forEach(t),Ur.forEach(t),NRe=i(f),fi=n(f,"H2",{class:!0});var BPe=s(fi);ng=n(BPe,"A",{id:!0,class:!0,href:!0});var OIr=s(ng);Oee=n(OIr,"SPAN",{});var VIr=s(Oee);T(MA.$$.fragment,VIr),VIr.forEach(t),OIr.forEach(t),jWe=i(BPe),Vee=n(BPe,"SPAN",{});var XIr=s(Vee);DWe=r(XIr,"AutoTokenizer"),XIr.forEach(t),BPe.forEach(t),jRe=i(f),Eo=n(f,"DIV",{class:!0});var ks=s(Eo);T(EA.$$.fragment,ks),GWe=i(ks),CA=n(ks,"P",{});var PPe=s(CA);OWe=r(PPe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),Ak=n(PPe,"A",{href:!0});var zIr=s(Ak);VWe=r(zIr,"AutoTokenizer.from_pretrained()"),zIr.forEach(t),XWe=r(PPe," class method."),PPe.forEach(t),zWe=i(ks),wA=n(ks,"P",{});var IPe=s(wA);QWe=r(IPe,"This class cannot be instantiated directly using "),Xee=n(IPe,"CODE",{});var QIr=s(Xee);WWe=r(QIr,"__init__()"),QIr.forEach(t),HWe=r(IPe," (throws an error)."),IPe.forEach(t),UWe=i(ks),Mr=n(ks,"DIV",{class:!0});var Ss=s(Mr);T(AA.$$.fragment,Ss),JWe=i(Ss),zee=n(Ss,"P",{});var WIr=s(zee);YWe=r(WIr,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),WIr.forEach(t),KWe=i(Ss),Ta=n(Ss,"P",{});var _3=s(Ta);ZWe=r(_3,"The tokenizer class to instantiate is selected based on the "),Qee=n(_3,"CODE",{});var HIr=s(Qee);eHe=r(HIr,"model_type"),HIr.forEach(t),oHe=r(_3,` property of the config object (either
passed as an argument or loaded from `),Wee=n(_3,"CODE",{});var UIr=s(Wee);rHe=r(UIr,"pretrained_model_name_or_path"),UIr.forEach(t),tHe=r(_3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hee=n(_3,"CODE",{});var JIr=s(Hee);aHe=r(JIr,"pretrained_model_name_or_path"),JIr.forEach(t),nHe=r(_3,":"),_3.forEach(t),sHe=i(Ss),k=n(Ss,"UL",{});var S=s(k);yn=n(S,"LI",{});var T7=s(yn);Uee=n(T7,"STRONG",{});var YIr=s(Uee);lHe=r(YIr,"albert"),YIr.forEach(t),iHe=r(T7," \u2014 "),yk=n(T7,"A",{href:!0});var KIr=s(yk);dHe=r(KIr,"AlbertTokenizer"),KIr.forEach(t),cHe=r(T7," or "),Lk=n(T7,"A",{href:!0});var ZIr=s(Lk);fHe=r(ZIr,"AlbertTokenizerFast"),ZIr.forEach(t),mHe=r(T7," (ALBERT model)"),T7.forEach(t),gHe=i(S),Ln=n(S,"LI",{});var M7=s(Ln);Jee=n(M7,"STRONG",{});var eqr=s(Jee);hHe=r(eqr,"bart"),eqr.forEach(t),pHe=r(M7," \u2014 "),xk=n(M7,"A",{href:!0});var oqr=s(xk);uHe=r(oqr,"BartTokenizer"),oqr.forEach(t),_He=r(M7," or "),$k=n(M7,"A",{href:!0});var rqr=s($k);bHe=r(rqr,"BartTokenizerFast"),rqr.forEach(t),vHe=r(M7," (BART model)"),M7.forEach(t),FHe=i(S),xn=n(S,"LI",{});var E7=s(xn);Yee=n(E7,"STRONG",{});var tqr=s(Yee);THe=r(tqr,"barthez"),tqr.forEach(t),MHe=r(E7," \u2014 "),kk=n(E7,"A",{href:!0});var aqr=s(kk);EHe=r(aqr,"BarthezTokenizer"),aqr.forEach(t),CHe=r(E7," or "),Sk=n(E7,"A",{href:!0});var nqr=s(Sk);wHe=r(nqr,"BarthezTokenizerFast"),nqr.forEach(t),AHe=r(E7," (BARThez model)"),E7.forEach(t),yHe=i(S),sg=n(S,"LI",{});var B4e=s(sg);Kee=n(B4e,"STRONG",{});var sqr=s(Kee);LHe=r(sqr,"bartpho"),sqr.forEach(t),xHe=r(B4e," \u2014 "),Rk=n(B4e,"A",{href:!0});var lqr=s(Rk);$He=r(lqr,"BartphoTokenizer"),lqr.forEach(t),kHe=r(B4e," (BARTpho model)"),B4e.forEach(t),SHe=i(S),$n=n(S,"LI",{});var C7=s($n);Zee=n(C7,"STRONG",{});var iqr=s(Zee);RHe=r(iqr,"bert"),iqr.forEach(t),BHe=r(C7," \u2014 "),Bk=n(C7,"A",{href:!0});var dqr=s(Bk);PHe=r(dqr,"BertTokenizer"),dqr.forEach(t),IHe=r(C7," or "),Pk=n(C7,"A",{href:!0});var cqr=s(Pk);qHe=r(cqr,"BertTokenizerFast"),cqr.forEach(t),NHe=r(C7," (BERT model)"),C7.forEach(t),jHe=i(S),lg=n(S,"LI",{});var P4e=s(lg);eoe=n(P4e,"STRONG",{});var fqr=s(eoe);DHe=r(fqr,"bert-generation"),fqr.forEach(t),GHe=r(P4e," \u2014 "),Ik=n(P4e,"A",{href:!0});var mqr=s(Ik);OHe=r(mqr,"BertGenerationTokenizer"),mqr.forEach(t),VHe=r(P4e," (Bert Generation model)"),P4e.forEach(t),XHe=i(S),ig=n(S,"LI",{});var I4e=s(ig);ooe=n(I4e,"STRONG",{});var gqr=s(ooe);zHe=r(gqr,"bert-japanese"),gqr.forEach(t),QHe=r(I4e," \u2014 "),qk=n(I4e,"A",{href:!0});var hqr=s(qk);WHe=r(hqr,"BertJapaneseTokenizer"),hqr.forEach(t),HHe=r(I4e," (BertJapanese model)"),I4e.forEach(t),UHe=i(S),dg=n(S,"LI",{});var q4e=s(dg);roe=n(q4e,"STRONG",{});var pqr=s(roe);JHe=r(pqr,"bertweet"),pqr.forEach(t),YHe=r(q4e," \u2014 "),Nk=n(q4e,"A",{href:!0});var uqr=s(Nk);KHe=r(uqr,"BertweetTokenizer"),uqr.forEach(t),ZHe=r(q4e," (Bertweet model)"),q4e.forEach(t),eUe=i(S),kn=n(S,"LI",{});var w7=s(kn);toe=n(w7,"STRONG",{});var _qr=s(toe);oUe=r(_qr,"big_bird"),_qr.forEach(t),rUe=r(w7," \u2014 "),jk=n(w7,"A",{href:!0});var bqr=s(jk);tUe=r(bqr,"BigBirdTokenizer"),bqr.forEach(t),aUe=r(w7," or "),Dk=n(w7,"A",{href:!0});var vqr=s(Dk);nUe=r(vqr,"BigBirdTokenizerFast"),vqr.forEach(t),sUe=r(w7," (BigBird model)"),w7.forEach(t),lUe=i(S),Sn=n(S,"LI",{});var A7=s(Sn);aoe=n(A7,"STRONG",{});var Fqr=s(aoe);iUe=r(Fqr,"bigbird_pegasus"),Fqr.forEach(t),dUe=r(A7," \u2014 "),Gk=n(A7,"A",{href:!0});var Tqr=s(Gk);cUe=r(Tqr,"PegasusTokenizer"),Tqr.forEach(t),fUe=r(A7," or "),Ok=n(A7,"A",{href:!0});var Mqr=s(Ok);mUe=r(Mqr,"PegasusTokenizerFast"),Mqr.forEach(t),gUe=r(A7," (BigBirdPegasus model)"),A7.forEach(t),hUe=i(S),Rn=n(S,"LI",{});var y7=s(Rn);noe=n(y7,"STRONG",{});var Eqr=s(noe);pUe=r(Eqr,"blenderbot"),Eqr.forEach(t),uUe=r(y7," \u2014 "),Vk=n(y7,"A",{href:!0});var Cqr=s(Vk);_Ue=r(Cqr,"BlenderbotTokenizer"),Cqr.forEach(t),bUe=r(y7," or "),Xk=n(y7,"A",{href:!0});var wqr=s(Xk);vUe=r(wqr,"BlenderbotTokenizerFast"),wqr.forEach(t),FUe=r(y7," (Blenderbot model)"),y7.forEach(t),TUe=i(S),cg=n(S,"LI",{});var N4e=s(cg);soe=n(N4e,"STRONG",{});var Aqr=s(soe);MUe=r(Aqr,"blenderbot-small"),Aqr.forEach(t),EUe=r(N4e," \u2014 "),zk=n(N4e,"A",{href:!0});var yqr=s(zk);CUe=r(yqr,"BlenderbotSmallTokenizer"),yqr.forEach(t),wUe=r(N4e," (BlenderbotSmall model)"),N4e.forEach(t),AUe=i(S),fg=n(S,"LI",{});var j4e=s(fg);loe=n(j4e,"STRONG",{});var Lqr=s(loe);yUe=r(Lqr,"byt5"),Lqr.forEach(t),LUe=r(j4e," \u2014 "),Qk=n(j4e,"A",{href:!0});var xqr=s(Qk);xUe=r(xqr,"ByT5Tokenizer"),xqr.forEach(t),$Ue=r(j4e," (ByT5 model)"),j4e.forEach(t),kUe=i(S),Bn=n(S,"LI",{});var L7=s(Bn);ioe=n(L7,"STRONG",{});var $qr=s(ioe);SUe=r($qr,"camembert"),$qr.forEach(t),RUe=r(L7," \u2014 "),Wk=n(L7,"A",{href:!0});var kqr=s(Wk);BUe=r(kqr,"CamembertTokenizer"),kqr.forEach(t),PUe=r(L7," or "),Hk=n(L7,"A",{href:!0});var Sqr=s(Hk);IUe=r(Sqr,"CamembertTokenizerFast"),Sqr.forEach(t),qUe=r(L7," (CamemBERT model)"),L7.forEach(t),NUe=i(S),mg=n(S,"LI",{});var D4e=s(mg);doe=n(D4e,"STRONG",{});var Rqr=s(doe);jUe=r(Rqr,"canine"),Rqr.forEach(t),DUe=r(D4e," \u2014 "),Uk=n(D4e,"A",{href:!0});var Bqr=s(Uk);GUe=r(Bqr,"CanineTokenizer"),Bqr.forEach(t),OUe=r(D4e," (Canine model)"),D4e.forEach(t),VUe=i(S),Pn=n(S,"LI",{});var x7=s(Pn);coe=n(x7,"STRONG",{});var Pqr=s(coe);XUe=r(Pqr,"clip"),Pqr.forEach(t),zUe=r(x7," \u2014 "),Jk=n(x7,"A",{href:!0});var Iqr=s(Jk);QUe=r(Iqr,"CLIPTokenizer"),Iqr.forEach(t),WUe=r(x7," or "),Yk=n(x7,"A",{href:!0});var qqr=s(Yk);HUe=r(qqr,"CLIPTokenizerFast"),qqr.forEach(t),UUe=r(x7," (CLIP model)"),x7.forEach(t),JUe=i(S),In=n(S,"LI",{});var $7=s(In);foe=n($7,"STRONG",{});var Nqr=s(foe);YUe=r(Nqr,"convbert"),Nqr.forEach(t),KUe=r($7," \u2014 "),Kk=n($7,"A",{href:!0});var jqr=s(Kk);ZUe=r(jqr,"ConvBertTokenizer"),jqr.forEach(t),eJe=r($7," or "),Zk=n($7,"A",{href:!0});var Dqr=s(Zk);oJe=r(Dqr,"ConvBertTokenizerFast"),Dqr.forEach(t),rJe=r($7," (ConvBERT model)"),$7.forEach(t),tJe=i(S),qn=n(S,"LI",{});var k7=s(qn);moe=n(k7,"STRONG",{});var Gqr=s(moe);aJe=r(Gqr,"cpm"),Gqr.forEach(t),nJe=r(k7," \u2014 "),eS=n(k7,"A",{href:!0});var Oqr=s(eS);sJe=r(Oqr,"CpmTokenizer"),Oqr.forEach(t),lJe=r(k7," or "),goe=n(k7,"CODE",{});var Vqr=s(goe);iJe=r(Vqr,"CpmTokenizerFast"),Vqr.forEach(t),dJe=r(k7," (CPM model)"),k7.forEach(t),cJe=i(S),gg=n(S,"LI",{});var G4e=s(gg);hoe=n(G4e,"STRONG",{});var Xqr=s(hoe);fJe=r(Xqr,"ctrl"),Xqr.forEach(t),mJe=r(G4e," \u2014 "),oS=n(G4e,"A",{href:!0});var zqr=s(oS);gJe=r(zqr,"CTRLTokenizer"),zqr.forEach(t),hJe=r(G4e," (CTRL model)"),G4e.forEach(t),pJe=i(S),Nn=n(S,"LI",{});var S7=s(Nn);poe=n(S7,"STRONG",{});var Qqr=s(poe);uJe=r(Qqr,"data2vec-text"),Qqr.forEach(t),_Je=r(S7," \u2014 "),rS=n(S7,"A",{href:!0});var Wqr=s(rS);bJe=r(Wqr,"RobertaTokenizer"),Wqr.forEach(t),vJe=r(S7," or "),tS=n(S7,"A",{href:!0});var Hqr=s(tS);FJe=r(Hqr,"RobertaTokenizerFast"),Hqr.forEach(t),TJe=r(S7," (Data2VecText model)"),S7.forEach(t),MJe=i(S),jn=n(S,"LI",{});var R7=s(jn);uoe=n(R7,"STRONG",{});var Uqr=s(uoe);EJe=r(Uqr,"deberta"),Uqr.forEach(t),CJe=r(R7," \u2014 "),aS=n(R7,"A",{href:!0});var Jqr=s(aS);wJe=r(Jqr,"DebertaTokenizer"),Jqr.forEach(t),AJe=r(R7," or "),nS=n(R7,"A",{href:!0});var Yqr=s(nS);yJe=r(Yqr,"DebertaTokenizerFast"),Yqr.forEach(t),LJe=r(R7," (DeBERTa model)"),R7.forEach(t),xJe=i(S),Dn=n(S,"LI",{});var B7=s(Dn);_oe=n(B7,"STRONG",{});var Kqr=s(_oe);$Je=r(Kqr,"deberta-v2"),Kqr.forEach(t),kJe=r(B7," \u2014 "),sS=n(B7,"A",{href:!0});var Zqr=s(sS);SJe=r(Zqr,"DebertaV2Tokenizer"),Zqr.forEach(t),RJe=r(B7," or "),lS=n(B7,"A",{href:!0});var eNr=s(lS);BJe=r(eNr,"DebertaV2TokenizerFast"),eNr.forEach(t),PJe=r(B7," (DeBERTa-v2 model)"),B7.forEach(t),IJe=i(S),Gn=n(S,"LI",{});var P7=s(Gn);boe=n(P7,"STRONG",{});var oNr=s(boe);qJe=r(oNr,"distilbert"),oNr.forEach(t),NJe=r(P7," \u2014 "),iS=n(P7,"A",{href:!0});var rNr=s(iS);jJe=r(rNr,"DistilBertTokenizer"),rNr.forEach(t),DJe=r(P7," or "),dS=n(P7,"A",{href:!0});var tNr=s(dS);GJe=r(tNr,"DistilBertTokenizerFast"),tNr.forEach(t),OJe=r(P7," (DistilBERT model)"),P7.forEach(t),VJe=i(S),On=n(S,"LI",{});var I7=s(On);voe=n(I7,"STRONG",{});var aNr=s(voe);XJe=r(aNr,"dpr"),aNr.forEach(t),zJe=r(I7," \u2014 "),cS=n(I7,"A",{href:!0});var nNr=s(cS);QJe=r(nNr,"DPRQuestionEncoderTokenizer"),nNr.forEach(t),WJe=r(I7," or "),fS=n(I7,"A",{href:!0});var sNr=s(fS);HJe=r(sNr,"DPRQuestionEncoderTokenizerFast"),sNr.forEach(t),UJe=r(I7," (DPR model)"),I7.forEach(t),JJe=i(S),Vn=n(S,"LI",{});var q7=s(Vn);Foe=n(q7,"STRONG",{});var lNr=s(Foe);YJe=r(lNr,"electra"),lNr.forEach(t),KJe=r(q7," \u2014 "),mS=n(q7,"A",{href:!0});var iNr=s(mS);ZJe=r(iNr,"ElectraTokenizer"),iNr.forEach(t),eYe=r(q7," or "),gS=n(q7,"A",{href:!0});var dNr=s(gS);oYe=r(dNr,"ElectraTokenizerFast"),dNr.forEach(t),rYe=r(q7," (ELECTRA model)"),q7.forEach(t),tYe=i(S),hg=n(S,"LI",{});var O4e=s(hg);Toe=n(O4e,"STRONG",{});var cNr=s(Toe);aYe=r(cNr,"flaubert"),cNr.forEach(t),nYe=r(O4e," \u2014 "),hS=n(O4e,"A",{href:!0});var fNr=s(hS);sYe=r(fNr,"FlaubertTokenizer"),fNr.forEach(t),lYe=r(O4e," (FlauBERT model)"),O4e.forEach(t),iYe=i(S),Xn=n(S,"LI",{});var N7=s(Xn);Moe=n(N7,"STRONG",{});var mNr=s(Moe);dYe=r(mNr,"fnet"),mNr.forEach(t),cYe=r(N7," \u2014 "),pS=n(N7,"A",{href:!0});var gNr=s(pS);fYe=r(gNr,"FNetTokenizer"),gNr.forEach(t),mYe=r(N7," or "),uS=n(N7,"A",{href:!0});var hNr=s(uS);gYe=r(hNr,"FNetTokenizerFast"),hNr.forEach(t),hYe=r(N7," (FNet model)"),N7.forEach(t),pYe=i(S),pg=n(S,"LI",{});var V4e=s(pg);Eoe=n(V4e,"STRONG",{});var pNr=s(Eoe);uYe=r(pNr,"fsmt"),pNr.forEach(t),_Ye=r(V4e," \u2014 "),_S=n(V4e,"A",{href:!0});var uNr=s(_S);bYe=r(uNr,"FSMTTokenizer"),uNr.forEach(t),vYe=r(V4e," (FairSeq Machine-Translation model)"),V4e.forEach(t),FYe=i(S),zn=n(S,"LI",{});var j7=s(zn);Coe=n(j7,"STRONG",{});var _Nr=s(Coe);TYe=r(_Nr,"funnel"),_Nr.forEach(t),MYe=r(j7," \u2014 "),bS=n(j7,"A",{href:!0});var bNr=s(bS);EYe=r(bNr,"FunnelTokenizer"),bNr.forEach(t),CYe=r(j7," or "),vS=n(j7,"A",{href:!0});var vNr=s(vS);wYe=r(vNr,"FunnelTokenizerFast"),vNr.forEach(t),AYe=r(j7," (Funnel Transformer model)"),j7.forEach(t),yYe=i(S),Qn=n(S,"LI",{});var D7=s(Qn);woe=n(D7,"STRONG",{});var FNr=s(woe);LYe=r(FNr,"gpt2"),FNr.forEach(t),xYe=r(D7," \u2014 "),FS=n(D7,"A",{href:!0});var TNr=s(FS);$Ye=r(TNr,"GPT2Tokenizer"),TNr.forEach(t),kYe=r(D7," or "),TS=n(D7,"A",{href:!0});var MNr=s(TS);SYe=r(MNr,"GPT2TokenizerFast"),MNr.forEach(t),RYe=r(D7," (OpenAI GPT-2 model)"),D7.forEach(t),BYe=i(S),Wn=n(S,"LI",{});var G7=s(Wn);Aoe=n(G7,"STRONG",{});var ENr=s(Aoe);PYe=r(ENr,"gpt_neo"),ENr.forEach(t),IYe=r(G7," \u2014 "),MS=n(G7,"A",{href:!0});var CNr=s(MS);qYe=r(CNr,"GPT2Tokenizer"),CNr.forEach(t),NYe=r(G7," or "),ES=n(G7,"A",{href:!0});var wNr=s(ES);jYe=r(wNr,"GPT2TokenizerFast"),wNr.forEach(t),DYe=r(G7," (GPT Neo model)"),G7.forEach(t),GYe=i(S),Hn=n(S,"LI",{});var O7=s(Hn);yoe=n(O7,"STRONG",{});var ANr=s(yoe);OYe=r(ANr,"gptj"),ANr.forEach(t),VYe=r(O7," \u2014 "),CS=n(O7,"A",{href:!0});var yNr=s(CS);XYe=r(yNr,"GPT2Tokenizer"),yNr.forEach(t),zYe=r(O7," or "),wS=n(O7,"A",{href:!0});var LNr=s(wS);QYe=r(LNr,"GPT2TokenizerFast"),LNr.forEach(t),WYe=r(O7," (GPT-J model)"),O7.forEach(t),HYe=i(S),Un=n(S,"LI",{});var V7=s(Un);Loe=n(V7,"STRONG",{});var xNr=s(Loe);UYe=r(xNr,"herbert"),xNr.forEach(t),JYe=r(V7," \u2014 "),AS=n(V7,"A",{href:!0});var $Nr=s(AS);YYe=r($Nr,"HerbertTokenizer"),$Nr.forEach(t),KYe=r(V7," or "),yS=n(V7,"A",{href:!0});var kNr=s(yS);ZYe=r(kNr,"HerbertTokenizerFast"),kNr.forEach(t),eKe=r(V7," (HerBERT model)"),V7.forEach(t),oKe=i(S),ug=n(S,"LI",{});var X4e=s(ug);xoe=n(X4e,"STRONG",{});var SNr=s(xoe);rKe=r(SNr,"hubert"),SNr.forEach(t),tKe=r(X4e," \u2014 "),LS=n(X4e,"A",{href:!0});var RNr=s(LS);aKe=r(RNr,"Wav2Vec2CTCTokenizer"),RNr.forEach(t),nKe=r(X4e," (Hubert model)"),X4e.forEach(t),sKe=i(S),Jn=n(S,"LI",{});var X7=s(Jn);$oe=n(X7,"STRONG",{});var BNr=s($oe);lKe=r(BNr,"ibert"),BNr.forEach(t),iKe=r(X7," \u2014 "),xS=n(X7,"A",{href:!0});var PNr=s(xS);dKe=r(PNr,"RobertaTokenizer"),PNr.forEach(t),cKe=r(X7," or "),$S=n(X7,"A",{href:!0});var INr=s($S);fKe=r(INr,"RobertaTokenizerFast"),INr.forEach(t),mKe=r(X7," (I-BERT model)"),X7.forEach(t),gKe=i(S),Yn=n(S,"LI",{});var z7=s(Yn);koe=n(z7,"STRONG",{});var qNr=s(koe);hKe=r(qNr,"layoutlm"),qNr.forEach(t),pKe=r(z7," \u2014 "),kS=n(z7,"A",{href:!0});var NNr=s(kS);uKe=r(NNr,"LayoutLMTokenizer"),NNr.forEach(t),_Ke=r(z7," or "),SS=n(z7,"A",{href:!0});var jNr=s(SS);bKe=r(jNr,"LayoutLMTokenizerFast"),jNr.forEach(t),vKe=r(z7," (LayoutLM model)"),z7.forEach(t),FKe=i(S),Kn=n(S,"LI",{});var Q7=s(Kn);Soe=n(Q7,"STRONG",{});var DNr=s(Soe);TKe=r(DNr,"layoutlmv2"),DNr.forEach(t),MKe=r(Q7," \u2014 "),RS=n(Q7,"A",{href:!0});var GNr=s(RS);EKe=r(GNr,"LayoutLMv2Tokenizer"),GNr.forEach(t),CKe=r(Q7," or "),BS=n(Q7,"A",{href:!0});var ONr=s(BS);wKe=r(ONr,"LayoutLMv2TokenizerFast"),ONr.forEach(t),AKe=r(Q7," (LayoutLMv2 model)"),Q7.forEach(t),yKe=i(S),Zn=n(S,"LI",{});var W7=s(Zn);Roe=n(W7,"STRONG",{});var VNr=s(Roe);LKe=r(VNr,"layoutxlm"),VNr.forEach(t),xKe=r(W7," \u2014 "),PS=n(W7,"A",{href:!0});var XNr=s(PS);$Ke=r(XNr,"LayoutXLMTokenizer"),XNr.forEach(t),kKe=r(W7," or "),IS=n(W7,"A",{href:!0});var zNr=s(IS);SKe=r(zNr,"LayoutXLMTokenizerFast"),zNr.forEach(t),RKe=r(W7," (LayoutXLM model)"),W7.forEach(t),BKe=i(S),es=n(S,"LI",{});var H7=s(es);Boe=n(H7,"STRONG",{});var QNr=s(Boe);PKe=r(QNr,"led"),QNr.forEach(t),IKe=r(H7," \u2014 "),qS=n(H7,"A",{href:!0});var WNr=s(qS);qKe=r(WNr,"LEDTokenizer"),WNr.forEach(t),NKe=r(H7," or "),NS=n(H7,"A",{href:!0});var HNr=s(NS);jKe=r(HNr,"LEDTokenizerFast"),HNr.forEach(t),DKe=r(H7," (LED model)"),H7.forEach(t),GKe=i(S),os=n(S,"LI",{});var U7=s(os);Poe=n(U7,"STRONG",{});var UNr=s(Poe);OKe=r(UNr,"longformer"),UNr.forEach(t),VKe=r(U7," \u2014 "),jS=n(U7,"A",{href:!0});var JNr=s(jS);XKe=r(JNr,"LongformerTokenizer"),JNr.forEach(t),zKe=r(U7," or "),DS=n(U7,"A",{href:!0});var YNr=s(DS);QKe=r(YNr,"LongformerTokenizerFast"),YNr.forEach(t),WKe=r(U7," (Longformer model)"),U7.forEach(t),HKe=i(S),_g=n(S,"LI",{});var z4e=s(_g);Ioe=n(z4e,"STRONG",{});var KNr=s(Ioe);UKe=r(KNr,"luke"),KNr.forEach(t),JKe=r(z4e," \u2014 "),GS=n(z4e,"A",{href:!0});var ZNr=s(GS);YKe=r(ZNr,"LukeTokenizer"),ZNr.forEach(t),KKe=r(z4e," (LUKE model)"),z4e.forEach(t),ZKe=i(S),rs=n(S,"LI",{});var J7=s(rs);qoe=n(J7,"STRONG",{});var ejr=s(qoe);eZe=r(ejr,"lxmert"),ejr.forEach(t),oZe=r(J7," \u2014 "),OS=n(J7,"A",{href:!0});var ojr=s(OS);rZe=r(ojr,"LxmertTokenizer"),ojr.forEach(t),tZe=r(J7," or "),VS=n(J7,"A",{href:!0});var rjr=s(VS);aZe=r(rjr,"LxmertTokenizerFast"),rjr.forEach(t),nZe=r(J7," (LXMERT model)"),J7.forEach(t),sZe=i(S),bg=n(S,"LI",{});var Q4e=s(bg);Noe=n(Q4e,"STRONG",{});var tjr=s(Noe);lZe=r(tjr,"m2m_100"),tjr.forEach(t),iZe=r(Q4e," \u2014 "),XS=n(Q4e,"A",{href:!0});var ajr=s(XS);dZe=r(ajr,"M2M100Tokenizer"),ajr.forEach(t),cZe=r(Q4e," (M2M100 model)"),Q4e.forEach(t),fZe=i(S),vg=n(S,"LI",{});var W4e=s(vg);joe=n(W4e,"STRONG",{});var njr=s(joe);mZe=r(njr,"marian"),njr.forEach(t),gZe=r(W4e," \u2014 "),zS=n(W4e,"A",{href:!0});var sjr=s(zS);hZe=r(sjr,"MarianTokenizer"),sjr.forEach(t),pZe=r(W4e," (Marian model)"),W4e.forEach(t),uZe=i(S),ts=n(S,"LI",{});var Y7=s(ts);Doe=n(Y7,"STRONG",{});var ljr=s(Doe);_Ze=r(ljr,"mbart"),ljr.forEach(t),bZe=r(Y7," \u2014 "),QS=n(Y7,"A",{href:!0});var ijr=s(QS);vZe=r(ijr,"MBartTokenizer"),ijr.forEach(t),FZe=r(Y7," or "),WS=n(Y7,"A",{href:!0});var djr=s(WS);TZe=r(djr,"MBartTokenizerFast"),djr.forEach(t),MZe=r(Y7," (mBART model)"),Y7.forEach(t),EZe=i(S),as=n(S,"LI",{});var K7=s(as);Goe=n(K7,"STRONG",{});var cjr=s(Goe);CZe=r(cjr,"mbart50"),cjr.forEach(t),wZe=r(K7," \u2014 "),HS=n(K7,"A",{href:!0});var fjr=s(HS);AZe=r(fjr,"MBart50Tokenizer"),fjr.forEach(t),yZe=r(K7," or "),US=n(K7,"A",{href:!0});var mjr=s(US);LZe=r(mjr,"MBart50TokenizerFast"),mjr.forEach(t),xZe=r(K7," (mBART-50 model)"),K7.forEach(t),$Ze=i(S),ns=n(S,"LI",{});var Z7=s(ns);Ooe=n(Z7,"STRONG",{});var gjr=s(Ooe);kZe=r(gjr,"megatron-bert"),gjr.forEach(t),SZe=r(Z7," \u2014 "),JS=n(Z7,"A",{href:!0});var hjr=s(JS);RZe=r(hjr,"BertTokenizer"),hjr.forEach(t),BZe=r(Z7," or "),YS=n(Z7,"A",{href:!0});var pjr=s(YS);PZe=r(pjr,"BertTokenizerFast"),pjr.forEach(t),IZe=r(Z7," (MegatronBert model)"),Z7.forEach(t),qZe=i(S),Fg=n(S,"LI",{});var H4e=s(Fg);Voe=n(H4e,"STRONG",{});var ujr=s(Voe);NZe=r(ujr,"mluke"),ujr.forEach(t),jZe=r(H4e," \u2014 "),KS=n(H4e,"A",{href:!0});var _jr=s(KS);DZe=r(_jr,"MLukeTokenizer"),_jr.forEach(t),GZe=r(H4e," (mLUKE model)"),H4e.forEach(t),OZe=i(S),ss=n(S,"LI",{});var ex=s(ss);Xoe=n(ex,"STRONG",{});var bjr=s(Xoe);VZe=r(bjr,"mobilebert"),bjr.forEach(t),XZe=r(ex," \u2014 "),ZS=n(ex,"A",{href:!0});var vjr=s(ZS);zZe=r(vjr,"MobileBertTokenizer"),vjr.forEach(t),QZe=r(ex," or "),eR=n(ex,"A",{href:!0});var Fjr=s(eR);WZe=r(Fjr,"MobileBertTokenizerFast"),Fjr.forEach(t),HZe=r(ex," (MobileBERT model)"),ex.forEach(t),UZe=i(S),ls=n(S,"LI",{});var ox=s(ls);zoe=n(ox,"STRONG",{});var Tjr=s(zoe);JZe=r(Tjr,"mpnet"),Tjr.forEach(t),YZe=r(ox," \u2014 "),oR=n(ox,"A",{href:!0});var Mjr=s(oR);KZe=r(Mjr,"MPNetTokenizer"),Mjr.forEach(t),ZZe=r(ox," or "),rR=n(ox,"A",{href:!0});var Ejr=s(rR);eeo=r(Ejr,"MPNetTokenizerFast"),Ejr.forEach(t),oeo=r(ox," (MPNet model)"),ox.forEach(t),reo=i(S),is=n(S,"LI",{});var rx=s(is);Qoe=n(rx,"STRONG",{});var Cjr=s(Qoe);teo=r(Cjr,"mt5"),Cjr.forEach(t),aeo=r(rx," \u2014 "),tR=n(rx,"A",{href:!0});var wjr=s(tR);neo=r(wjr,"MT5Tokenizer"),wjr.forEach(t),seo=r(rx," or "),aR=n(rx,"A",{href:!0});var Ajr=s(aR);leo=r(Ajr,"MT5TokenizerFast"),Ajr.forEach(t),ieo=r(rx," (mT5 model)"),rx.forEach(t),deo=i(S),ds=n(S,"LI",{});var tx=s(ds);Woe=n(tx,"STRONG",{});var yjr=s(Woe);ceo=r(yjr,"nystromformer"),yjr.forEach(t),feo=r(tx," \u2014 "),nR=n(tx,"A",{href:!0});var Ljr=s(nR);meo=r(Ljr,"AlbertTokenizer"),Ljr.forEach(t),geo=r(tx," or "),sR=n(tx,"A",{href:!0});var xjr=s(sR);heo=r(xjr,"AlbertTokenizerFast"),xjr.forEach(t),peo=r(tx," (Nystromformer model)"),tx.forEach(t),ueo=i(S),cs=n(S,"LI",{});var ax=s(cs);Hoe=n(ax,"STRONG",{});var $jr=s(Hoe);_eo=r($jr,"openai-gpt"),$jr.forEach(t),beo=r(ax," \u2014 "),lR=n(ax,"A",{href:!0});var kjr=s(lR);veo=r(kjr,"OpenAIGPTTokenizer"),kjr.forEach(t),Feo=r(ax," or "),iR=n(ax,"A",{href:!0});var Sjr=s(iR);Teo=r(Sjr,"OpenAIGPTTokenizerFast"),Sjr.forEach(t),Meo=r(ax," (OpenAI GPT model)"),ax.forEach(t),Eeo=i(S),fs=n(S,"LI",{});var nx=s(fs);Uoe=n(nx,"STRONG",{});var Rjr=s(Uoe);Ceo=r(Rjr,"pegasus"),Rjr.forEach(t),weo=r(nx," \u2014 "),dR=n(nx,"A",{href:!0});var Bjr=s(dR);Aeo=r(Bjr,"PegasusTokenizer"),Bjr.forEach(t),yeo=r(nx," or "),cR=n(nx,"A",{href:!0});var Pjr=s(cR);Leo=r(Pjr,"PegasusTokenizerFast"),Pjr.forEach(t),xeo=r(nx," (Pegasus model)"),nx.forEach(t),$eo=i(S),Tg=n(S,"LI",{});var U4e=s(Tg);Joe=n(U4e,"STRONG",{});var Ijr=s(Joe);keo=r(Ijr,"perceiver"),Ijr.forEach(t),Seo=r(U4e," \u2014 "),fR=n(U4e,"A",{href:!0});var qjr=s(fR);Reo=r(qjr,"PerceiverTokenizer"),qjr.forEach(t),Beo=r(U4e," (Perceiver model)"),U4e.forEach(t),Peo=i(S),Mg=n(S,"LI",{});var J4e=s(Mg);Yoe=n(J4e,"STRONG",{});var Njr=s(Yoe);Ieo=r(Njr,"phobert"),Njr.forEach(t),qeo=r(J4e," \u2014 "),mR=n(J4e,"A",{href:!0});var jjr=s(mR);Neo=r(jjr,"PhobertTokenizer"),jjr.forEach(t),jeo=r(J4e," (PhoBERT model)"),J4e.forEach(t),Deo=i(S),Eg=n(S,"LI",{});var Y4e=s(Eg);Koe=n(Y4e,"STRONG",{});var Djr=s(Koe);Geo=r(Djr,"plbart"),Djr.forEach(t),Oeo=r(Y4e," \u2014 "),gR=n(Y4e,"A",{href:!0});var Gjr=s(gR);Veo=r(Gjr,"PLBartTokenizer"),Gjr.forEach(t),Xeo=r(Y4e," (PLBart model)"),Y4e.forEach(t),zeo=i(S),Cg=n(S,"LI",{});var K4e=s(Cg);Zoe=n(K4e,"STRONG",{});var Ojr=s(Zoe);Qeo=r(Ojr,"prophetnet"),Ojr.forEach(t),Weo=r(K4e," \u2014 "),hR=n(K4e,"A",{href:!0});var Vjr=s(hR);Heo=r(Vjr,"ProphetNetTokenizer"),Vjr.forEach(t),Ueo=r(K4e," (ProphetNet model)"),K4e.forEach(t),Jeo=i(S),ms=n(S,"LI",{});var sx=s(ms);ere=n(sx,"STRONG",{});var Xjr=s(ere);Yeo=r(Xjr,"qdqbert"),Xjr.forEach(t),Keo=r(sx," \u2014 "),pR=n(sx,"A",{href:!0});var zjr=s(pR);Zeo=r(zjr,"BertTokenizer"),zjr.forEach(t),eoo=r(sx," or "),uR=n(sx,"A",{href:!0});var Qjr=s(uR);ooo=r(Qjr,"BertTokenizerFast"),Qjr.forEach(t),roo=r(sx," (QDQBert model)"),sx.forEach(t),too=i(S),wg=n(S,"LI",{});var Z4e=s(wg);ore=n(Z4e,"STRONG",{});var Wjr=s(ore);aoo=r(Wjr,"rag"),Wjr.forEach(t),noo=r(Z4e," \u2014 "),_R=n(Z4e,"A",{href:!0});var Hjr=s(_R);soo=r(Hjr,"RagTokenizer"),Hjr.forEach(t),loo=r(Z4e," (RAG model)"),Z4e.forEach(t),ioo=i(S),gs=n(S,"LI",{});var lx=s(gs);rre=n(lx,"STRONG",{});var Ujr=s(rre);doo=r(Ujr,"realm"),Ujr.forEach(t),coo=r(lx," \u2014 "),bR=n(lx,"A",{href:!0});var Jjr=s(bR);foo=r(Jjr,"RealmTokenizer"),Jjr.forEach(t),moo=r(lx," or "),vR=n(lx,"A",{href:!0});var Yjr=s(vR);goo=r(Yjr,"RealmTokenizerFast"),Yjr.forEach(t),hoo=r(lx," (Realm model)"),lx.forEach(t),poo=i(S),hs=n(S,"LI",{});var ix=s(hs);tre=n(ix,"STRONG",{});var Kjr=s(tre);uoo=r(Kjr,"reformer"),Kjr.forEach(t),_oo=r(ix," \u2014 "),FR=n(ix,"A",{href:!0});var Zjr=s(FR);boo=r(Zjr,"ReformerTokenizer"),Zjr.forEach(t),voo=r(ix," or "),TR=n(ix,"A",{href:!0});var eDr=s(TR);Foo=r(eDr,"ReformerTokenizerFast"),eDr.forEach(t),Too=r(ix," (Reformer model)"),ix.forEach(t),Moo=i(S),ps=n(S,"LI",{});var dx=s(ps);are=n(dx,"STRONG",{});var oDr=s(are);Eoo=r(oDr,"rembert"),oDr.forEach(t),Coo=r(dx," \u2014 "),MR=n(dx,"A",{href:!0});var rDr=s(MR);woo=r(rDr,"RemBertTokenizer"),rDr.forEach(t),Aoo=r(dx," or "),ER=n(dx,"A",{href:!0});var tDr=s(ER);yoo=r(tDr,"RemBertTokenizerFast"),tDr.forEach(t),Loo=r(dx," (RemBERT model)"),dx.forEach(t),xoo=i(S),us=n(S,"LI",{});var cx=s(us);nre=n(cx,"STRONG",{});var aDr=s(nre);$oo=r(aDr,"retribert"),aDr.forEach(t),koo=r(cx," \u2014 "),CR=n(cx,"A",{href:!0});var nDr=s(CR);Soo=r(nDr,"RetriBertTokenizer"),nDr.forEach(t),Roo=r(cx," or "),wR=n(cx,"A",{href:!0});var sDr=s(wR);Boo=r(sDr,"RetriBertTokenizerFast"),sDr.forEach(t),Poo=r(cx," (RetriBERT model)"),cx.forEach(t),Ioo=i(S),_s=n(S,"LI",{});var fx=s(_s);sre=n(fx,"STRONG",{});var lDr=s(sre);qoo=r(lDr,"roberta"),lDr.forEach(t),Noo=r(fx," \u2014 "),AR=n(fx,"A",{href:!0});var iDr=s(AR);joo=r(iDr,"RobertaTokenizer"),iDr.forEach(t),Doo=r(fx," or "),yR=n(fx,"A",{href:!0});var dDr=s(yR);Goo=r(dDr,"RobertaTokenizerFast"),dDr.forEach(t),Ooo=r(fx," (RoBERTa model)"),fx.forEach(t),Voo=i(S),bs=n(S,"LI",{});var mx=s(bs);lre=n(mx,"STRONG",{});var cDr=s(lre);Xoo=r(cDr,"roformer"),cDr.forEach(t),zoo=r(mx," \u2014 "),LR=n(mx,"A",{href:!0});var fDr=s(LR);Qoo=r(fDr,"RoFormerTokenizer"),fDr.forEach(t),Woo=r(mx," or "),xR=n(mx,"A",{href:!0});var mDr=s(xR);Hoo=r(mDr,"RoFormerTokenizerFast"),mDr.forEach(t),Uoo=r(mx," (RoFormer model)"),mx.forEach(t),Joo=i(S),Ag=n(S,"LI",{});var eEe=s(Ag);ire=n(eEe,"STRONG",{});var gDr=s(ire);Yoo=r(gDr,"speech_to_text"),gDr.forEach(t),Koo=r(eEe," \u2014 "),$R=n(eEe,"A",{href:!0});var hDr=s($R);Zoo=r(hDr,"Speech2TextTokenizer"),hDr.forEach(t),ero=r(eEe," (Speech2Text model)"),eEe.forEach(t),oro=i(S),yg=n(S,"LI",{});var oEe=s(yg);dre=n(oEe,"STRONG",{});var pDr=s(dre);rro=r(pDr,"speech_to_text_2"),pDr.forEach(t),tro=r(oEe," \u2014 "),kR=n(oEe,"A",{href:!0});var uDr=s(kR);aro=r(uDr,"Speech2Text2Tokenizer"),uDr.forEach(t),nro=r(oEe," (Speech2Text2 model)"),oEe.forEach(t),sro=i(S),vs=n(S,"LI",{});var gx=s(vs);cre=n(gx,"STRONG",{});var _Dr=s(cre);lro=r(_Dr,"splinter"),_Dr.forEach(t),iro=r(gx," \u2014 "),SR=n(gx,"A",{href:!0});var bDr=s(SR);dro=r(bDr,"SplinterTokenizer"),bDr.forEach(t),cro=r(gx," or "),RR=n(gx,"A",{href:!0});var vDr=s(RR);fro=r(vDr,"SplinterTokenizerFast"),vDr.forEach(t),mro=r(gx," (Splinter model)"),gx.forEach(t),gro=i(S),Fs=n(S,"LI",{});var hx=s(Fs);fre=n(hx,"STRONG",{});var FDr=s(fre);hro=r(FDr,"squeezebert"),FDr.forEach(t),pro=r(hx," \u2014 "),BR=n(hx,"A",{href:!0});var TDr=s(BR);uro=r(TDr,"SqueezeBertTokenizer"),TDr.forEach(t),_ro=r(hx," or "),PR=n(hx,"A",{href:!0});var MDr=s(PR);bro=r(MDr,"SqueezeBertTokenizerFast"),MDr.forEach(t),vro=r(hx," (SqueezeBERT model)"),hx.forEach(t),Fro=i(S),Ts=n(S,"LI",{});var px=s(Ts);mre=n(px,"STRONG",{});var EDr=s(mre);Tro=r(EDr,"t5"),EDr.forEach(t),Mro=r(px," \u2014 "),IR=n(px,"A",{href:!0});var CDr=s(IR);Ero=r(CDr,"T5Tokenizer"),CDr.forEach(t),Cro=r(px," or "),qR=n(px,"A",{href:!0});var wDr=s(qR);wro=r(wDr,"T5TokenizerFast"),wDr.forEach(t),Aro=r(px," (T5 model)"),px.forEach(t),yro=i(S),Lg=n(S,"LI",{});var rEe=s(Lg);gre=n(rEe,"STRONG",{});var ADr=s(gre);Lro=r(ADr,"tapas"),ADr.forEach(t),xro=r(rEe," \u2014 "),NR=n(rEe,"A",{href:!0});var yDr=s(NR);$ro=r(yDr,"TapasTokenizer"),yDr.forEach(t),kro=r(rEe," (TAPAS model)"),rEe.forEach(t),Sro=i(S),xg=n(S,"LI",{});var tEe=s(xg);hre=n(tEe,"STRONG",{});var LDr=s(hre);Rro=r(LDr,"tapex"),LDr.forEach(t),Bro=r(tEe," \u2014 "),jR=n(tEe,"A",{href:!0});var xDr=s(jR);Pro=r(xDr,"TapexTokenizer"),xDr.forEach(t),Iro=r(tEe," (TAPEX model)"),tEe.forEach(t),qro=i(S),$g=n(S,"LI",{});var aEe=s($g);pre=n(aEe,"STRONG",{});var $Dr=s(pre);Nro=r($Dr,"transfo-xl"),$Dr.forEach(t),jro=r(aEe," \u2014 "),DR=n(aEe,"A",{href:!0});var kDr=s(DR);Dro=r(kDr,"TransfoXLTokenizer"),kDr.forEach(t),Gro=r(aEe," (Transformer-XL model)"),aEe.forEach(t),Oro=i(S),Ms=n(S,"LI",{});var ux=s(Ms);ure=n(ux,"STRONG",{});var SDr=s(ure);Vro=r(SDr,"visual_bert"),SDr.forEach(t),Xro=r(ux," \u2014 "),GR=n(ux,"A",{href:!0});var RDr=s(GR);zro=r(RDr,"BertTokenizer"),RDr.forEach(t),Qro=r(ux," or "),OR=n(ux,"A",{href:!0});var BDr=s(OR);Wro=r(BDr,"BertTokenizerFast"),BDr.forEach(t),Hro=r(ux," (VisualBert model)"),ux.forEach(t),Uro=i(S),kg=n(S,"LI",{});var nEe=s(kg);_re=n(nEe,"STRONG",{});var PDr=s(_re);Jro=r(PDr,"wav2vec2"),PDr.forEach(t),Yro=r(nEe," \u2014 "),VR=n(nEe,"A",{href:!0});var IDr=s(VR);Kro=r(IDr,"Wav2Vec2CTCTokenizer"),IDr.forEach(t),Zro=r(nEe," (Wav2Vec2 model)"),nEe.forEach(t),eto=i(S),Sg=n(S,"LI",{});var sEe=s(Sg);bre=n(sEe,"STRONG",{});var qDr=s(bre);oto=r(qDr,"wav2vec2_phoneme"),qDr.forEach(t),rto=r(sEe," \u2014 "),XR=n(sEe,"A",{href:!0});var NDr=s(XR);tto=r(NDr,"Wav2Vec2PhonemeCTCTokenizer"),NDr.forEach(t),ato=r(sEe," (Wav2Vec2Phoneme model)"),sEe.forEach(t),nto=i(S),Es=n(S,"LI",{});var _x=s(Es);vre=n(_x,"STRONG",{});var jDr=s(vre);sto=r(jDr,"xglm"),jDr.forEach(t),lto=r(_x," \u2014 "),zR=n(_x,"A",{href:!0});var DDr=s(zR);ito=r(DDr,"XGLMTokenizer"),DDr.forEach(t),dto=r(_x," or "),QR=n(_x,"A",{href:!0});var GDr=s(QR);cto=r(GDr,"XGLMTokenizerFast"),GDr.forEach(t),fto=r(_x," (XGLM model)"),_x.forEach(t),mto=i(S),Rg=n(S,"LI",{});var lEe=s(Rg);Fre=n(lEe,"STRONG",{});var ODr=s(Fre);gto=r(ODr,"xlm"),ODr.forEach(t),hto=r(lEe," \u2014 "),WR=n(lEe,"A",{href:!0});var VDr=s(WR);pto=r(VDr,"XLMTokenizer"),VDr.forEach(t),uto=r(lEe," (XLM model)"),lEe.forEach(t),_to=i(S),Bg=n(S,"LI",{});var iEe=s(Bg);Tre=n(iEe,"STRONG",{});var XDr=s(Tre);bto=r(XDr,"xlm-prophetnet"),XDr.forEach(t),vto=r(iEe," \u2014 "),HR=n(iEe,"A",{href:!0});var zDr=s(HR);Fto=r(zDr,"XLMProphetNetTokenizer"),zDr.forEach(t),Tto=r(iEe," (XLMProphetNet model)"),iEe.forEach(t),Mto=i(S),Cs=n(S,"LI",{});var bx=s(Cs);Mre=n(bx,"STRONG",{});var QDr=s(Mre);Eto=r(QDr,"xlm-roberta"),QDr.forEach(t),Cto=r(bx," \u2014 "),UR=n(bx,"A",{href:!0});var WDr=s(UR);wto=r(WDr,"XLMRobertaTokenizer"),WDr.forEach(t),Ato=r(bx," or "),JR=n(bx,"A",{href:!0});var HDr=s(JR);yto=r(HDr,"XLMRobertaTokenizerFast"),HDr.forEach(t),Lto=r(bx," (XLM-RoBERTa model)"),bx.forEach(t),xto=i(S),ws=n(S,"LI",{});var vx=s(ws);Ere=n(vx,"STRONG",{});var UDr=s(Ere);$to=r(UDr,"xlm-roberta-xl"),UDr.forEach(t),kto=r(vx," \u2014 "),YR=n(vx,"A",{href:!0});var JDr=s(YR);Sto=r(JDr,"RobertaTokenizer"),JDr.forEach(t),Rto=r(vx," or "),KR=n(vx,"A",{href:!0});var YDr=s(KR);Bto=r(YDr,"RobertaTokenizerFast"),YDr.forEach(t),Pto=r(vx," (XLM-RoBERTa-XL model)"),vx.forEach(t),Ito=i(S),As=n(S,"LI",{});var Fx=s(As);Cre=n(Fx,"STRONG",{});var KDr=s(Cre);qto=r(KDr,"xlnet"),KDr.forEach(t),Nto=r(Fx," \u2014 "),ZR=n(Fx,"A",{href:!0});var ZDr=s(ZR);jto=r(ZDr,"XLNetTokenizer"),ZDr.forEach(t),Dto=r(Fx," or "),eB=n(Fx,"A",{href:!0});var eGr=s(eB);Gto=r(eGr,"XLNetTokenizerFast"),eGr.forEach(t),Oto=r(Fx," (XLNet model)"),Fx.forEach(t),Vto=i(S),ys=n(S,"LI",{});var Tx=s(ys);wre=n(Tx,"STRONG",{});var oGr=s(wre);Xto=r(oGr,"yoso"),oGr.forEach(t),zto=r(Tx," \u2014 "),oB=n(Tx,"A",{href:!0});var rGr=s(oB);Qto=r(rGr,"AlbertTokenizer"),rGr.forEach(t),Wto=r(Tx," or "),rB=n(Tx,"A",{href:!0});var tGr=s(rB);Hto=r(tGr,"AlbertTokenizerFast"),tGr.forEach(t),Uto=r(Tx," (YOSO model)"),Tx.forEach(t),S.forEach(t),Jto=i(Ss),T(Pg.$$.fragment,Ss),Ss.forEach(t),Yto=i(ks),Ig=n(ks,"DIV",{class:!0});var qPe=s(Ig);T(yA.$$.fragment,qPe),Kto=i(qPe),Are=n(qPe,"P",{});var aGr=s(Are);Zto=r(aGr,"Register a new tokenizer in this mapping."),aGr.forEach(t),qPe.forEach(t),ks.forEach(t),DRe=i(f),mi=n(f,"H2",{class:!0});var NPe=s(mi);qg=n(NPe,"A",{id:!0,class:!0,href:!0});var nGr=s(qg);yre=n(nGr,"SPAN",{});var sGr=s(yre);T(LA.$$.fragment,sGr),sGr.forEach(t),nGr.forEach(t),eao=i(NPe),Lre=n(NPe,"SPAN",{});var lGr=s(Lre);oao=r(lGr,"AutoFeatureExtractor"),lGr.forEach(t),NPe.forEach(t),GRe=i(f),Co=n(f,"DIV",{class:!0});var Rs=s(Co);T(xA.$$.fragment,Rs),rao=i(Rs),$A=n(Rs,"P",{});var jPe=s($A);tao=r(jPe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),tB=n(jPe,"A",{href:!0});var iGr=s(tB);aao=r(iGr,"AutoFeatureExtractor.from_pretrained()"),iGr.forEach(t),nao=r(jPe," class method."),jPe.forEach(t),sao=i(Rs),kA=n(Rs,"P",{});var DPe=s(kA);lao=r(DPe,"This class cannot be instantiated directly using "),xre=n(DPe,"CODE",{});var dGr=s(xre);iao=r(dGr,"__init__()"),dGr.forEach(t),dao=r(DPe," (throws an error)."),DPe.forEach(t),cao=i(Rs),Xe=n(Rs,"DIV",{class:!0});var Wt=s(Xe);T(SA.$$.fragment,Wt),fao=i(Wt),$re=n(Wt,"P",{});var cGr=s($re);mao=r(cGr,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),cGr.forEach(t),gao=i(Wt),Ma=n(Wt,"P",{});var b3=s(Ma);hao=r(b3,"The feature extractor class to instantiate is selected based on the "),kre=n(b3,"CODE",{});var fGr=s(kre);pao=r(fGr,"model_type"),fGr.forEach(t),uao=r(b3,` property of the config object
(either passed as an argument or loaded from `),Sre=n(b3,"CODE",{});var mGr=s(Sre);_ao=r(mGr,"pretrained_model_name_or_path"),mGr.forEach(t),bao=r(b3,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Rre=n(b3,"CODE",{});var gGr=s(Rre);vao=r(gGr,"pretrained_model_name_or_path"),gGr.forEach(t),Fao=r(b3,":"),b3.forEach(t),Tao=i(Wt),ae=n(Wt,"UL",{});var se=s(ae);Ng=n(se,"LI",{});var dEe=s(Ng);Bre=n(dEe,"STRONG",{});var hGr=s(Bre);Mao=r(hGr,"beit"),hGr.forEach(t),Eao=r(dEe," \u2014 "),aB=n(dEe,"A",{href:!0});var pGr=s(aB);Cao=r(pGr,"BeitFeatureExtractor"),pGr.forEach(t),wao=r(dEe," (BEiT model)"),dEe.forEach(t),Aao=i(se),jg=n(se,"LI",{});var cEe=s(jg);Pre=n(cEe,"STRONG",{});var uGr=s(Pre);yao=r(uGr,"clip"),uGr.forEach(t),Lao=r(cEe," \u2014 "),nB=n(cEe,"A",{href:!0});var _Gr=s(nB);xao=r(_Gr,"CLIPFeatureExtractor"),_Gr.forEach(t),$ao=r(cEe," (CLIP model)"),cEe.forEach(t),kao=i(se),Dg=n(se,"LI",{});var fEe=s(Dg);Ire=n(fEe,"STRONG",{});var bGr=s(Ire);Sao=r(bGr,"convnext"),bGr.forEach(t),Rao=r(fEe," \u2014 "),sB=n(fEe,"A",{href:!0});var vGr=s(sB);Bao=r(vGr,"ConvNextFeatureExtractor"),vGr.forEach(t),Pao=r(fEe," (ConvNext model)"),fEe.forEach(t),Iao=i(se),Gg=n(se,"LI",{});var mEe=s(Gg);qre=n(mEe,"STRONG",{});var FGr=s(qre);qao=r(FGr,"data2vec-audio"),FGr.forEach(t),Nao=r(mEe," \u2014 "),lB=n(mEe,"A",{href:!0});var TGr=s(lB);jao=r(TGr,"Wav2Vec2FeatureExtractor"),TGr.forEach(t),Dao=r(mEe," (Data2VecAudio model)"),mEe.forEach(t),Gao=i(se),Og=n(se,"LI",{});var gEe=s(Og);Nre=n(gEe,"STRONG",{});var MGr=s(Nre);Oao=r(MGr,"data2vec-vision"),MGr.forEach(t),Vao=r(gEe," \u2014 "),iB=n(gEe,"A",{href:!0});var EGr=s(iB);Xao=r(EGr,"BeitFeatureExtractor"),EGr.forEach(t),zao=r(gEe," (Data2VecVision model)"),gEe.forEach(t),Qao=i(se),Vg=n(se,"LI",{});var hEe=s(Vg);jre=n(hEe,"STRONG",{});var CGr=s(jre);Wao=r(CGr,"deit"),CGr.forEach(t),Hao=r(hEe," \u2014 "),dB=n(hEe,"A",{href:!0});var wGr=s(dB);Uao=r(wGr,"DeiTFeatureExtractor"),wGr.forEach(t),Jao=r(hEe," (DeiT model)"),hEe.forEach(t),Yao=i(se),Xg=n(se,"LI",{});var pEe=s(Xg);Dre=n(pEe,"STRONG",{});var AGr=s(Dre);Kao=r(AGr,"detr"),AGr.forEach(t),Zao=r(pEe," \u2014 "),cB=n(pEe,"A",{href:!0});var yGr=s(cB);eno=r(yGr,"DetrFeatureExtractor"),yGr.forEach(t),ono=r(pEe," (DETR model)"),pEe.forEach(t),rno=i(se),zg=n(se,"LI",{});var uEe=s(zg);Gre=n(uEe,"STRONG",{});var LGr=s(Gre);tno=r(LGr,"dpt"),LGr.forEach(t),ano=r(uEe," \u2014 "),fB=n(uEe,"A",{href:!0});var xGr=s(fB);nno=r(xGr,"DPTFeatureExtractor"),xGr.forEach(t),sno=r(uEe," (DPT model)"),uEe.forEach(t),lno=i(se),Qg=n(se,"LI",{});var _Ee=s(Qg);Ore=n(_Ee,"STRONG",{});var $Gr=s(Ore);ino=r($Gr,"glpn"),$Gr.forEach(t),dno=r(_Ee," \u2014 "),mB=n(_Ee,"A",{href:!0});var kGr=s(mB);cno=r(kGr,"GLPNFeatureExtractor"),kGr.forEach(t),fno=r(_Ee," (GLPN model)"),_Ee.forEach(t),mno=i(se),Wg=n(se,"LI",{});var bEe=s(Wg);Vre=n(bEe,"STRONG",{});var SGr=s(Vre);gno=r(SGr,"hubert"),SGr.forEach(t),hno=r(bEe," \u2014 "),gB=n(bEe,"A",{href:!0});var RGr=s(gB);pno=r(RGr,"Wav2Vec2FeatureExtractor"),RGr.forEach(t),uno=r(bEe," (Hubert model)"),bEe.forEach(t),_no=i(se),Hg=n(se,"LI",{});var vEe=s(Hg);Xre=n(vEe,"STRONG",{});var BGr=s(Xre);bno=r(BGr,"layoutlmv2"),BGr.forEach(t),vno=r(vEe," \u2014 "),hB=n(vEe,"A",{href:!0});var PGr=s(hB);Fno=r(PGr,"LayoutLMv2FeatureExtractor"),PGr.forEach(t),Tno=r(vEe," (LayoutLMv2 model)"),vEe.forEach(t),Mno=i(se),Ug=n(se,"LI",{});var FEe=s(Ug);zre=n(FEe,"STRONG",{});var IGr=s(zre);Eno=r(IGr,"maskformer"),IGr.forEach(t),Cno=r(FEe," \u2014 "),pB=n(FEe,"A",{href:!0});var qGr=s(pB);wno=r(qGr,"MaskFormerFeatureExtractor"),qGr.forEach(t),Ano=r(FEe," (MaskFormer model)"),FEe.forEach(t),yno=i(se),Jg=n(se,"LI",{});var TEe=s(Jg);Qre=n(TEe,"STRONG",{});var NGr=s(Qre);Lno=r(NGr,"perceiver"),NGr.forEach(t),xno=r(TEe," \u2014 "),uB=n(TEe,"A",{href:!0});var jGr=s(uB);$no=r(jGr,"PerceiverFeatureExtractor"),jGr.forEach(t),kno=r(TEe," (Perceiver model)"),TEe.forEach(t),Sno=i(se),Yg=n(se,"LI",{});var MEe=s(Yg);Wre=n(MEe,"STRONG",{});var DGr=s(Wre);Rno=r(DGr,"poolformer"),DGr.forEach(t),Bno=r(MEe," \u2014 "),_B=n(MEe,"A",{href:!0});var GGr=s(_B);Pno=r(GGr,"PoolFormerFeatureExtractor"),GGr.forEach(t),Ino=r(MEe," (PoolFormer model)"),MEe.forEach(t),qno=i(se),Kg=n(se,"LI",{});var EEe=s(Kg);Hre=n(EEe,"STRONG",{});var OGr=s(Hre);Nno=r(OGr,"regnet"),OGr.forEach(t),jno=r(EEe," \u2014 "),bB=n(EEe,"A",{href:!0});var VGr=s(bB);Dno=r(VGr,"ConvNextFeatureExtractor"),VGr.forEach(t),Gno=r(EEe," (RegNet model)"),EEe.forEach(t),Ono=i(se),Zg=n(se,"LI",{});var CEe=s(Zg);Ure=n(CEe,"STRONG",{});var XGr=s(Ure);Vno=r(XGr,"resnet"),XGr.forEach(t),Xno=r(CEe," \u2014 "),vB=n(CEe,"A",{href:!0});var zGr=s(vB);zno=r(zGr,"ConvNextFeatureExtractor"),zGr.forEach(t),Qno=r(CEe," (ResNet model)"),CEe.forEach(t),Wno=i(se),eh=n(se,"LI",{});var wEe=s(eh);Jre=n(wEe,"STRONG",{});var QGr=s(Jre);Hno=r(QGr,"segformer"),QGr.forEach(t),Uno=r(wEe," \u2014 "),FB=n(wEe,"A",{href:!0});var WGr=s(FB);Jno=r(WGr,"SegformerFeatureExtractor"),WGr.forEach(t),Yno=r(wEe," (SegFormer model)"),wEe.forEach(t),Kno=i(se),oh=n(se,"LI",{});var AEe=s(oh);Yre=n(AEe,"STRONG",{});var HGr=s(Yre);Zno=r(HGr,"speech_to_text"),HGr.forEach(t),eso=r(AEe," \u2014 "),TB=n(AEe,"A",{href:!0});var UGr=s(TB);oso=r(UGr,"Speech2TextFeatureExtractor"),UGr.forEach(t),rso=r(AEe," (Speech2Text model)"),AEe.forEach(t),tso=i(se),rh=n(se,"LI",{});var yEe=s(rh);Kre=n(yEe,"STRONG",{});var JGr=s(Kre);aso=r(JGr,"swin"),JGr.forEach(t),nso=r(yEe," \u2014 "),MB=n(yEe,"A",{href:!0});var YGr=s(MB);sso=r(YGr,"ViTFeatureExtractor"),YGr.forEach(t),lso=r(yEe," (Swin model)"),yEe.forEach(t),iso=i(se),th=n(se,"LI",{});var LEe=s(th);Zre=n(LEe,"STRONG",{});var KGr=s(Zre);dso=r(KGr,"van"),KGr.forEach(t),cso=r(LEe," \u2014 "),EB=n(LEe,"A",{href:!0});var ZGr=s(EB);fso=r(ZGr,"ConvNextFeatureExtractor"),ZGr.forEach(t),mso=r(LEe," (VAN model)"),LEe.forEach(t),gso=i(se),ah=n(se,"LI",{});var xEe=s(ah);ete=n(xEe,"STRONG",{});var eOr=s(ete);hso=r(eOr,"vit"),eOr.forEach(t),pso=r(xEe," \u2014 "),CB=n(xEe,"A",{href:!0});var oOr=s(CB);uso=r(oOr,"ViTFeatureExtractor"),oOr.forEach(t),_so=r(xEe," (ViT model)"),xEe.forEach(t),bso=i(se),nh=n(se,"LI",{});var $Ee=s(nh);ote=n($Ee,"STRONG",{});var rOr=s(ote);vso=r(rOr,"vit_mae"),rOr.forEach(t),Fso=r($Ee," \u2014 "),wB=n($Ee,"A",{href:!0});var tOr=s(wB);Tso=r(tOr,"ViTFeatureExtractor"),tOr.forEach(t),Mso=r($Ee," (ViTMAE model)"),$Ee.forEach(t),Eso=i(se),sh=n(se,"LI",{});var kEe=s(sh);rte=n(kEe,"STRONG",{});var aOr=s(rte);Cso=r(aOr,"wav2vec2"),aOr.forEach(t),wso=r(kEe," \u2014 "),AB=n(kEe,"A",{href:!0});var nOr=s(AB);Aso=r(nOr,"Wav2Vec2FeatureExtractor"),nOr.forEach(t),yso=r(kEe," (Wav2Vec2 model)"),kEe.forEach(t),se.forEach(t),Lso=i(Wt),T(lh.$$.fragment,Wt),xso=i(Wt),T(ih.$$.fragment,Wt),Wt.forEach(t),$so=i(Rs),dh=n(Rs,"DIV",{class:!0});var GPe=s(dh);T(RA.$$.fragment,GPe),kso=i(GPe),tte=n(GPe,"P",{});var sOr=s(tte);Sso=r(sOr,"Register a new feature extractor for this class."),sOr.forEach(t),GPe.forEach(t),Rs.forEach(t),ORe=i(f),gi=n(f,"H2",{class:!0});var OPe=s(gi);ch=n(OPe,"A",{id:!0,class:!0,href:!0});var lOr=s(ch);ate=n(lOr,"SPAN",{});var iOr=s(ate);T(BA.$$.fragment,iOr),iOr.forEach(t),lOr.forEach(t),Rso=i(OPe),nte=n(OPe,"SPAN",{});var dOr=s(nte);Bso=r(dOr,"AutoProcessor"),dOr.forEach(t),OPe.forEach(t),VRe=i(f),wo=n(f,"DIV",{class:!0});var Bs=s(wo);T(PA.$$.fragment,Bs),Pso=i(Bs),IA=n(Bs,"P",{});var VPe=s(IA);Iso=r(VPe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),yB=n(VPe,"A",{href:!0});var cOr=s(yB);qso=r(cOr,"AutoProcessor.from_pretrained()"),cOr.forEach(t),Nso=r(VPe," class method."),VPe.forEach(t),jso=i(Bs),qA=n(Bs,"P",{});var XPe=s(qA);Dso=r(XPe,"This class cannot be instantiated directly using "),ste=n(XPe,"CODE",{});var fOr=s(ste);Gso=r(fOr,"__init__()"),fOr.forEach(t),Oso=r(XPe," (throws an error)."),XPe.forEach(t),Vso=i(Bs),ze=n(Bs,"DIV",{class:!0});var Ht=s(ze);T(NA.$$.fragment,Ht),Xso=i(Ht),lte=n(Ht,"P",{});var mOr=s(lte);zso=r(mOr,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),mOr.forEach(t),Qso=i(Ht),hi=n(Ht,"P",{});var WJ=s(hi);Wso=r(WJ,"The processor class to instantiate is selected based on the "),ite=n(WJ,"CODE",{});var gOr=s(ite);Hso=r(gOr,"model_type"),gOr.forEach(t),Uso=r(WJ,` property of the config object (either
passed as an argument or loaded from `),dte=n(WJ,"CODE",{});var hOr=s(dte);Jso=r(hOr,"pretrained_model_name_or_path"),hOr.forEach(t),Yso=r(WJ," if possible):"),WJ.forEach(t),Kso=i(Ht),be=n(Ht,"UL",{});var Fe=s(be);fh=n(Fe,"LI",{});var SEe=s(fh);cte=n(SEe,"STRONG",{});var pOr=s(cte);Zso=r(pOr,"clip"),pOr.forEach(t),elo=r(SEe," \u2014 "),LB=n(SEe,"A",{href:!0});var uOr=s(LB);olo=r(uOr,"CLIPProcessor"),uOr.forEach(t),rlo=r(SEe," (CLIP model)"),SEe.forEach(t),tlo=i(Fe),mh=n(Fe,"LI",{});var REe=s(mh);fte=n(REe,"STRONG",{});var _Or=s(fte);alo=r(_Or,"layoutlmv2"),_Or.forEach(t),nlo=r(REe," \u2014 "),xB=n(REe,"A",{href:!0});var bOr=s(xB);slo=r(bOr,"LayoutLMv2Processor"),bOr.forEach(t),llo=r(REe," (LayoutLMv2 model)"),REe.forEach(t),ilo=i(Fe),gh=n(Fe,"LI",{});var BEe=s(gh);mte=n(BEe,"STRONG",{});var vOr=s(mte);dlo=r(vOr,"layoutxlm"),vOr.forEach(t),clo=r(BEe," \u2014 "),$B=n(BEe,"A",{href:!0});var FOr=s($B);flo=r(FOr,"LayoutXLMProcessor"),FOr.forEach(t),mlo=r(BEe," (LayoutXLM model)"),BEe.forEach(t),glo=i(Fe),hh=n(Fe,"LI",{});var PEe=s(hh);gte=n(PEe,"STRONG",{});var TOr=s(gte);hlo=r(TOr,"sew"),TOr.forEach(t),plo=r(PEe," \u2014 "),kB=n(PEe,"A",{href:!0});var MOr=s(kB);ulo=r(MOr,"Wav2Vec2Processor"),MOr.forEach(t),_lo=r(PEe," (SEW model)"),PEe.forEach(t),blo=i(Fe),ph=n(Fe,"LI",{});var IEe=s(ph);hte=n(IEe,"STRONG",{});var EOr=s(hte);vlo=r(EOr,"sew-d"),EOr.forEach(t),Flo=r(IEe," \u2014 "),SB=n(IEe,"A",{href:!0});var COr=s(SB);Tlo=r(COr,"Wav2Vec2Processor"),COr.forEach(t),Mlo=r(IEe," (SEW-D model)"),IEe.forEach(t),Elo=i(Fe),uh=n(Fe,"LI",{});var qEe=s(uh);pte=n(qEe,"STRONG",{});var wOr=s(pte);Clo=r(wOr,"speech_to_text"),wOr.forEach(t),wlo=r(qEe," \u2014 "),RB=n(qEe,"A",{href:!0});var AOr=s(RB);Alo=r(AOr,"Speech2TextProcessor"),AOr.forEach(t),ylo=r(qEe," (Speech2Text model)"),qEe.forEach(t),Llo=i(Fe),_h=n(Fe,"LI",{});var NEe=s(_h);ute=n(NEe,"STRONG",{});var yOr=s(ute);xlo=r(yOr,"speech_to_text_2"),yOr.forEach(t),$lo=r(NEe," \u2014 "),BB=n(NEe,"A",{href:!0});var LOr=s(BB);klo=r(LOr,"Speech2Text2Processor"),LOr.forEach(t),Slo=r(NEe," (Speech2Text2 model)"),NEe.forEach(t),Rlo=i(Fe),bh=n(Fe,"LI",{});var jEe=s(bh);_te=n(jEe,"STRONG",{});var xOr=s(_te);Blo=r(xOr,"trocr"),xOr.forEach(t),Plo=r(jEe," \u2014 "),PB=n(jEe,"A",{href:!0});var $Or=s(PB);Ilo=r($Or,"TrOCRProcessor"),$Or.forEach(t),qlo=r(jEe," (TrOCR model)"),jEe.forEach(t),Nlo=i(Fe),vh=n(Fe,"LI",{});var DEe=s(vh);bte=n(DEe,"STRONG",{});var kOr=s(bte);jlo=r(kOr,"unispeech"),kOr.forEach(t),Dlo=r(DEe," \u2014 "),IB=n(DEe,"A",{href:!0});var SOr=s(IB);Glo=r(SOr,"Wav2Vec2Processor"),SOr.forEach(t),Olo=r(DEe," (UniSpeech model)"),DEe.forEach(t),Vlo=i(Fe),Fh=n(Fe,"LI",{});var GEe=s(Fh);vte=n(GEe,"STRONG",{});var ROr=s(vte);Xlo=r(ROr,"unispeech-sat"),ROr.forEach(t),zlo=r(GEe," \u2014 "),qB=n(GEe,"A",{href:!0});var BOr=s(qB);Qlo=r(BOr,"Wav2Vec2Processor"),BOr.forEach(t),Wlo=r(GEe," (UniSpeechSat model)"),GEe.forEach(t),Hlo=i(Fe),Th=n(Fe,"LI",{});var OEe=s(Th);Fte=n(OEe,"STRONG",{});var POr=s(Fte);Ulo=r(POr,"vilt"),POr.forEach(t),Jlo=r(OEe," \u2014 "),NB=n(OEe,"A",{href:!0});var IOr=s(NB);Ylo=r(IOr,"ViltProcessor"),IOr.forEach(t),Klo=r(OEe," (ViLT model)"),OEe.forEach(t),Zlo=i(Fe),Mh=n(Fe,"LI",{});var VEe=s(Mh);Tte=n(VEe,"STRONG",{});var qOr=s(Tte);eio=r(qOr,"vision-text-dual-encoder"),qOr.forEach(t),oio=r(VEe," \u2014 "),jB=n(VEe,"A",{href:!0});var NOr=s(jB);rio=r(NOr,"VisionTextDualEncoderProcessor"),NOr.forEach(t),tio=r(VEe," (VisionTextDualEncoder model)"),VEe.forEach(t),aio=i(Fe),Eh=n(Fe,"LI",{});var XEe=s(Eh);Mte=n(XEe,"STRONG",{});var jOr=s(Mte);nio=r(jOr,"wav2vec2"),jOr.forEach(t),sio=r(XEe," \u2014 "),DB=n(XEe,"A",{href:!0});var DOr=s(DB);lio=r(DOr,"Wav2Vec2Processor"),DOr.forEach(t),iio=r(XEe," (Wav2Vec2 model)"),XEe.forEach(t),dio=i(Fe),Ch=n(Fe,"LI",{});var zEe=s(Ch);Ete=n(zEe,"STRONG",{});var GOr=s(Ete);cio=r(GOr,"wavlm"),GOr.forEach(t),fio=r(zEe," \u2014 "),GB=n(zEe,"A",{href:!0});var OOr=s(GB);mio=r(OOr,"Wav2Vec2Processor"),OOr.forEach(t),gio=r(zEe," (WavLM model)"),zEe.forEach(t),Fe.forEach(t),hio=i(Ht),T(wh.$$.fragment,Ht),pio=i(Ht),T(Ah.$$.fragment,Ht),Ht.forEach(t),uio=i(Bs),yh=n(Bs,"DIV",{class:!0});var zPe=s(yh);T(jA.$$.fragment,zPe),_io=i(zPe),Cte=n(zPe,"P",{});var VOr=s(Cte);bio=r(VOr,"Register a new processor for this class."),VOr.forEach(t),zPe.forEach(t),Bs.forEach(t),XRe=i(f),pi=n(f,"H2",{class:!0});var QPe=s(pi);Lh=n(QPe,"A",{id:!0,class:!0,href:!0});var XOr=s(Lh);wte=n(XOr,"SPAN",{});var zOr=s(wte);T(DA.$$.fragment,zOr),zOr.forEach(t),XOr.forEach(t),vio=i(QPe),Ate=n(QPe,"SPAN",{});var QOr=s(Ate);Fio=r(QOr,"AutoModel"),QOr.forEach(t),QPe.forEach(t),zRe=i(f),Ao=n(f,"DIV",{class:!0});var Ps=s(Ao);T(GA.$$.fragment,Ps),Tio=i(Ps),ui=n(Ps,"P",{});var HJ=s(ui);Mio=r(HJ,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),OB=n(HJ,"A",{href:!0});var WOr=s(OB);Eio=r(WOr,"from_pretrained()"),WOr.forEach(t),Cio=r(HJ," class method or the "),VB=n(HJ,"A",{href:!0});var HOr=s(VB);wio=r(HOr,"from_config()"),HOr.forEach(t),Aio=r(HJ,` class
method.`),HJ.forEach(t),yio=i(Ps),OA=n(Ps,"P",{});var WPe=s(OA);Lio=r(WPe,"This class cannot be instantiated directly using "),yte=n(WPe,"CODE",{});var UOr=s(yte);xio=r(UOr,"__init__()"),UOr.forEach(t),$io=r(WPe," (throws an error)."),WPe.forEach(t),kio=i(Ps),Kr=n(Ps,"DIV",{class:!0});var v3=s(Kr);T(VA.$$.fragment,v3),Sio=i(v3),Lte=n(v3,"P",{});var JOr=s(Lte);Rio=r(JOr,"Instantiates one of the base model classes of the library from a configuration."),JOr.forEach(t),Bio=i(v3),_i=n(v3,"P",{});var UJ=s(_i);Pio=r(UJ,`Note:
Loading a model from its configuration file does `),xte=n(UJ,"STRONG",{});var YOr=s(xte);Iio=r(YOr,"not"),YOr.forEach(t),qio=r(UJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),XB=n(UJ,"A",{href:!0});var KOr=s(XB);Nio=r(KOr,"from_pretrained()"),KOr.forEach(t),jio=r(UJ," to load the model weights."),UJ.forEach(t),Dio=i(v3),T(xh.$$.fragment,v3),v3.forEach(t),Gio=i(Ps),Qe=n(Ps,"DIV",{class:!0});var Ut=s(Qe);T(XA.$$.fragment,Ut),Oio=i(Ut),$te=n(Ut,"P",{});var ZOr=s($te);Vio=r(ZOr,"Instantiate one of the base model classes of the library from a pretrained model."),ZOr.forEach(t),Xio=i(Ut),Ea=n(Ut,"P",{});var F3=s(Ea);zio=r(F3,"The model class to instantiate is selected based on the "),kte=n(F3,"CODE",{});var eVr=s(kte);Qio=r(eVr,"model_type"),eVr.forEach(t),Wio=r(F3,` property of the config object (either
passed as an argument or loaded from `),Ste=n(F3,"CODE",{});var oVr=s(Ste);Hio=r(oVr,"pretrained_model_name_or_path"),oVr.forEach(t),Uio=r(F3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rte=n(F3,"CODE",{});var rVr=s(Rte);Jio=r(rVr,"pretrained_model_name_or_path"),rVr.forEach(t),Yio=r(F3,":"),F3.forEach(t),Kio=i(Ut),x=n(Ut,"UL",{});var $=s(x);$h=n($,"LI",{});var QEe=s($h);Bte=n(QEe,"STRONG",{});var tVr=s(Bte);Zio=r(tVr,"albert"),tVr.forEach(t),edo=r(QEe," \u2014 "),zB=n(QEe,"A",{href:!0});var aVr=s(zB);odo=r(aVr,"AlbertModel"),aVr.forEach(t),rdo=r(QEe," (ALBERT model)"),QEe.forEach(t),tdo=i($),kh=n($,"LI",{});var WEe=s(kh);Pte=n(WEe,"STRONG",{});var nVr=s(Pte);ado=r(nVr,"bart"),nVr.forEach(t),ndo=r(WEe," \u2014 "),QB=n(WEe,"A",{href:!0});var sVr=s(QB);sdo=r(sVr,"BartModel"),sVr.forEach(t),ldo=r(WEe," (BART model)"),WEe.forEach(t),ido=i($),Sh=n($,"LI",{});var HEe=s(Sh);Ite=n(HEe,"STRONG",{});var lVr=s(Ite);ddo=r(lVr,"beit"),lVr.forEach(t),cdo=r(HEe," \u2014 "),WB=n(HEe,"A",{href:!0});var iVr=s(WB);fdo=r(iVr,"BeitModel"),iVr.forEach(t),mdo=r(HEe," (BEiT model)"),HEe.forEach(t),gdo=i($),Rh=n($,"LI",{});var UEe=s(Rh);qte=n(UEe,"STRONG",{});var dVr=s(qte);hdo=r(dVr,"bert"),dVr.forEach(t),pdo=r(UEe," \u2014 "),HB=n(UEe,"A",{href:!0});var cVr=s(HB);udo=r(cVr,"BertModel"),cVr.forEach(t),_do=r(UEe," (BERT model)"),UEe.forEach(t),bdo=i($),Bh=n($,"LI",{});var JEe=s(Bh);Nte=n(JEe,"STRONG",{});var fVr=s(Nte);vdo=r(fVr,"bert-generation"),fVr.forEach(t),Fdo=r(JEe," \u2014 "),UB=n(JEe,"A",{href:!0});var mVr=s(UB);Tdo=r(mVr,"BertGenerationEncoder"),mVr.forEach(t),Mdo=r(JEe," (Bert Generation model)"),JEe.forEach(t),Edo=i($),Ph=n($,"LI",{});var YEe=s(Ph);jte=n(YEe,"STRONG",{});var gVr=s(jte);Cdo=r(gVr,"big_bird"),gVr.forEach(t),wdo=r(YEe," \u2014 "),JB=n(YEe,"A",{href:!0});var hVr=s(JB);Ado=r(hVr,"BigBirdModel"),hVr.forEach(t),ydo=r(YEe," (BigBird model)"),YEe.forEach(t),Ldo=i($),Ih=n($,"LI",{});var KEe=s(Ih);Dte=n(KEe,"STRONG",{});var pVr=s(Dte);xdo=r(pVr,"bigbird_pegasus"),pVr.forEach(t),$do=r(KEe," \u2014 "),YB=n(KEe,"A",{href:!0});var uVr=s(YB);kdo=r(uVr,"BigBirdPegasusModel"),uVr.forEach(t),Sdo=r(KEe," (BigBirdPegasus model)"),KEe.forEach(t),Rdo=i($),qh=n($,"LI",{});var ZEe=s(qh);Gte=n(ZEe,"STRONG",{});var _Vr=s(Gte);Bdo=r(_Vr,"blenderbot"),_Vr.forEach(t),Pdo=r(ZEe," \u2014 "),KB=n(ZEe,"A",{href:!0});var bVr=s(KB);Ido=r(bVr,"BlenderbotModel"),bVr.forEach(t),qdo=r(ZEe," (Blenderbot model)"),ZEe.forEach(t),Ndo=i($),Nh=n($,"LI",{});var eCe=s(Nh);Ote=n(eCe,"STRONG",{});var vVr=s(Ote);jdo=r(vVr,"blenderbot-small"),vVr.forEach(t),Ddo=r(eCe," \u2014 "),ZB=n(eCe,"A",{href:!0});var FVr=s(ZB);Gdo=r(FVr,"BlenderbotSmallModel"),FVr.forEach(t),Odo=r(eCe," (BlenderbotSmall model)"),eCe.forEach(t),Vdo=i($),jh=n($,"LI",{});var oCe=s(jh);Vte=n(oCe,"STRONG",{});var TVr=s(Vte);Xdo=r(TVr,"camembert"),TVr.forEach(t),zdo=r(oCe," \u2014 "),eP=n(oCe,"A",{href:!0});var MVr=s(eP);Qdo=r(MVr,"CamembertModel"),MVr.forEach(t),Wdo=r(oCe," (CamemBERT model)"),oCe.forEach(t),Hdo=i($),Dh=n($,"LI",{});var rCe=s(Dh);Xte=n(rCe,"STRONG",{});var EVr=s(Xte);Udo=r(EVr,"canine"),EVr.forEach(t),Jdo=r(rCe," \u2014 "),oP=n(rCe,"A",{href:!0});var CVr=s(oP);Ydo=r(CVr,"CanineModel"),CVr.forEach(t),Kdo=r(rCe," (Canine model)"),rCe.forEach(t),Zdo=i($),Gh=n($,"LI",{});var tCe=s(Gh);zte=n(tCe,"STRONG",{});var wVr=s(zte);eco=r(wVr,"clip"),wVr.forEach(t),oco=r(tCe," \u2014 "),rP=n(tCe,"A",{href:!0});var AVr=s(rP);rco=r(AVr,"CLIPModel"),AVr.forEach(t),tco=r(tCe," (CLIP model)"),tCe.forEach(t),aco=i($),Oh=n($,"LI",{});var aCe=s(Oh);Qte=n(aCe,"STRONG",{});var yVr=s(Qte);nco=r(yVr,"convbert"),yVr.forEach(t),sco=r(aCe," \u2014 "),tP=n(aCe,"A",{href:!0});var LVr=s(tP);lco=r(LVr,"ConvBertModel"),LVr.forEach(t),ico=r(aCe," (ConvBERT model)"),aCe.forEach(t),dco=i($),Vh=n($,"LI",{});var nCe=s(Vh);Wte=n(nCe,"STRONG",{});var xVr=s(Wte);cco=r(xVr,"convnext"),xVr.forEach(t),fco=r(nCe," \u2014 "),aP=n(nCe,"A",{href:!0});var $Vr=s(aP);mco=r($Vr,"ConvNextModel"),$Vr.forEach(t),gco=r(nCe," (ConvNext model)"),nCe.forEach(t),hco=i($),Xh=n($,"LI",{});var sCe=s(Xh);Hte=n(sCe,"STRONG",{});var kVr=s(Hte);pco=r(kVr,"ctrl"),kVr.forEach(t),uco=r(sCe," \u2014 "),nP=n(sCe,"A",{href:!0});var SVr=s(nP);_co=r(SVr,"CTRLModel"),SVr.forEach(t),bco=r(sCe," (CTRL model)"),sCe.forEach(t),vco=i($),zh=n($,"LI",{});var lCe=s(zh);Ute=n(lCe,"STRONG",{});var RVr=s(Ute);Fco=r(RVr,"data2vec-audio"),RVr.forEach(t),Tco=r(lCe," \u2014 "),sP=n(lCe,"A",{href:!0});var BVr=s(sP);Mco=r(BVr,"Data2VecAudioModel"),BVr.forEach(t),Eco=r(lCe," (Data2VecAudio model)"),lCe.forEach(t),Cco=i($),Qh=n($,"LI",{});var iCe=s(Qh);Jte=n(iCe,"STRONG",{});var PVr=s(Jte);wco=r(PVr,"data2vec-text"),PVr.forEach(t),Aco=r(iCe," \u2014 "),lP=n(iCe,"A",{href:!0});var IVr=s(lP);yco=r(IVr,"Data2VecTextModel"),IVr.forEach(t),Lco=r(iCe," (Data2VecText model)"),iCe.forEach(t),xco=i($),Wh=n($,"LI",{});var dCe=s(Wh);Yte=n(dCe,"STRONG",{});var qVr=s(Yte);$co=r(qVr,"data2vec-vision"),qVr.forEach(t),kco=r(dCe," \u2014 "),iP=n(dCe,"A",{href:!0});var NVr=s(iP);Sco=r(NVr,"Data2VecVisionModel"),NVr.forEach(t),Rco=r(dCe," (Data2VecVision model)"),dCe.forEach(t),Bco=i($),Hh=n($,"LI",{});var cCe=s(Hh);Kte=n(cCe,"STRONG",{});var jVr=s(Kte);Pco=r(jVr,"deberta"),jVr.forEach(t),Ico=r(cCe," \u2014 "),dP=n(cCe,"A",{href:!0});var DVr=s(dP);qco=r(DVr,"DebertaModel"),DVr.forEach(t),Nco=r(cCe," (DeBERTa model)"),cCe.forEach(t),jco=i($),Uh=n($,"LI",{});var fCe=s(Uh);Zte=n(fCe,"STRONG",{});var GVr=s(Zte);Dco=r(GVr,"deberta-v2"),GVr.forEach(t),Gco=r(fCe," \u2014 "),cP=n(fCe,"A",{href:!0});var OVr=s(cP);Oco=r(OVr,"DebertaV2Model"),OVr.forEach(t),Vco=r(fCe," (DeBERTa-v2 model)"),fCe.forEach(t),Xco=i($),Jh=n($,"LI",{});var mCe=s(Jh);eae=n(mCe,"STRONG",{});var VVr=s(eae);zco=r(VVr,"decision_transformer"),VVr.forEach(t),Qco=r(mCe," \u2014 "),fP=n(mCe,"A",{href:!0});var XVr=s(fP);Wco=r(XVr,"DecisionTransformerModel"),XVr.forEach(t),Hco=r(mCe," (Decision Transformer model)"),mCe.forEach(t),Uco=i($),Yh=n($,"LI",{});var gCe=s(Yh);oae=n(gCe,"STRONG",{});var zVr=s(oae);Jco=r(zVr,"deit"),zVr.forEach(t),Yco=r(gCe," \u2014 "),mP=n(gCe,"A",{href:!0});var QVr=s(mP);Kco=r(QVr,"DeiTModel"),QVr.forEach(t),Zco=r(gCe," (DeiT model)"),gCe.forEach(t),efo=i($),Kh=n($,"LI",{});var hCe=s(Kh);rae=n(hCe,"STRONG",{});var WVr=s(rae);ofo=r(WVr,"detr"),WVr.forEach(t),rfo=r(hCe," \u2014 "),gP=n(hCe,"A",{href:!0});var HVr=s(gP);tfo=r(HVr,"DetrModel"),HVr.forEach(t),afo=r(hCe," (DETR model)"),hCe.forEach(t),nfo=i($),Zh=n($,"LI",{});var pCe=s(Zh);tae=n(pCe,"STRONG",{});var UVr=s(tae);sfo=r(UVr,"distilbert"),UVr.forEach(t),lfo=r(pCe," \u2014 "),hP=n(pCe,"A",{href:!0});var JVr=s(hP);ifo=r(JVr,"DistilBertModel"),JVr.forEach(t),dfo=r(pCe," (DistilBERT model)"),pCe.forEach(t),cfo=i($),ep=n($,"LI",{});var uCe=s(ep);aae=n(uCe,"STRONG",{});var YVr=s(aae);ffo=r(YVr,"dpr"),YVr.forEach(t),mfo=r(uCe," \u2014 "),pP=n(uCe,"A",{href:!0});var KVr=s(pP);gfo=r(KVr,"DPRQuestionEncoder"),KVr.forEach(t),hfo=r(uCe," (DPR model)"),uCe.forEach(t),pfo=i($),op=n($,"LI",{});var _Ce=s(op);nae=n(_Ce,"STRONG",{});var ZVr=s(nae);ufo=r(ZVr,"dpt"),ZVr.forEach(t),_fo=r(_Ce," \u2014 "),uP=n(_Ce,"A",{href:!0});var eXr=s(uP);bfo=r(eXr,"DPTModel"),eXr.forEach(t),vfo=r(_Ce," (DPT model)"),_Ce.forEach(t),Ffo=i($),rp=n($,"LI",{});var bCe=s(rp);sae=n(bCe,"STRONG",{});var oXr=s(sae);Tfo=r(oXr,"electra"),oXr.forEach(t),Mfo=r(bCe," \u2014 "),_P=n(bCe,"A",{href:!0});var rXr=s(_P);Efo=r(rXr,"ElectraModel"),rXr.forEach(t),Cfo=r(bCe," (ELECTRA model)"),bCe.forEach(t),wfo=i($),tp=n($,"LI",{});var vCe=s(tp);lae=n(vCe,"STRONG",{});var tXr=s(lae);Afo=r(tXr,"flaubert"),tXr.forEach(t),yfo=r(vCe," \u2014 "),bP=n(vCe,"A",{href:!0});var aXr=s(bP);Lfo=r(aXr,"FlaubertModel"),aXr.forEach(t),xfo=r(vCe," (FlauBERT model)"),vCe.forEach(t),$fo=i($),ap=n($,"LI",{});var FCe=s(ap);iae=n(FCe,"STRONG",{});var nXr=s(iae);kfo=r(nXr,"fnet"),nXr.forEach(t),Sfo=r(FCe," \u2014 "),vP=n(FCe,"A",{href:!0});var sXr=s(vP);Rfo=r(sXr,"FNetModel"),sXr.forEach(t),Bfo=r(FCe," (FNet model)"),FCe.forEach(t),Pfo=i($),np=n($,"LI",{});var TCe=s(np);dae=n(TCe,"STRONG",{});var lXr=s(dae);Ifo=r(lXr,"fsmt"),lXr.forEach(t),qfo=r(TCe," \u2014 "),FP=n(TCe,"A",{href:!0});var iXr=s(FP);Nfo=r(iXr,"FSMTModel"),iXr.forEach(t),jfo=r(TCe," (FairSeq Machine-Translation model)"),TCe.forEach(t),Dfo=i($),Ls=n($,"LI",{});var Mx=s(Ls);cae=n(Mx,"STRONG",{});var dXr=s(cae);Gfo=r(dXr,"funnel"),dXr.forEach(t),Ofo=r(Mx," \u2014 "),TP=n(Mx,"A",{href:!0});var cXr=s(TP);Vfo=r(cXr,"FunnelModel"),cXr.forEach(t),Xfo=r(Mx," or "),MP=n(Mx,"A",{href:!0});var fXr=s(MP);zfo=r(fXr,"FunnelBaseModel"),fXr.forEach(t),Qfo=r(Mx," (Funnel Transformer model)"),Mx.forEach(t),Wfo=i($),sp=n($,"LI",{});var MCe=s(sp);fae=n(MCe,"STRONG",{});var mXr=s(fae);Hfo=r(mXr,"glpn"),mXr.forEach(t),Ufo=r(MCe," \u2014 "),EP=n(MCe,"A",{href:!0});var gXr=s(EP);Jfo=r(gXr,"GLPNModel"),gXr.forEach(t),Yfo=r(MCe," (GLPN model)"),MCe.forEach(t),Kfo=i($),lp=n($,"LI",{});var ECe=s(lp);mae=n(ECe,"STRONG",{});var hXr=s(mae);Zfo=r(hXr,"gpt2"),hXr.forEach(t),emo=r(ECe," \u2014 "),CP=n(ECe,"A",{href:!0});var pXr=s(CP);omo=r(pXr,"GPT2Model"),pXr.forEach(t),rmo=r(ECe," (OpenAI GPT-2 model)"),ECe.forEach(t),tmo=i($),ip=n($,"LI",{});var CCe=s(ip);gae=n(CCe,"STRONG",{});var uXr=s(gae);amo=r(uXr,"gpt_neo"),uXr.forEach(t),nmo=r(CCe," \u2014 "),wP=n(CCe,"A",{href:!0});var _Xr=s(wP);smo=r(_Xr,"GPTNeoModel"),_Xr.forEach(t),lmo=r(CCe," (GPT Neo model)"),CCe.forEach(t),imo=i($),dp=n($,"LI",{});var wCe=s(dp);hae=n(wCe,"STRONG",{});var bXr=s(hae);dmo=r(bXr,"gptj"),bXr.forEach(t),cmo=r(wCe," \u2014 "),AP=n(wCe,"A",{href:!0});var vXr=s(AP);fmo=r(vXr,"GPTJModel"),vXr.forEach(t),mmo=r(wCe," (GPT-J model)"),wCe.forEach(t),gmo=i($),cp=n($,"LI",{});var ACe=s(cp);pae=n(ACe,"STRONG",{});var FXr=s(pae);hmo=r(FXr,"hubert"),FXr.forEach(t),pmo=r(ACe," \u2014 "),yP=n(ACe,"A",{href:!0});var TXr=s(yP);umo=r(TXr,"HubertModel"),TXr.forEach(t),_mo=r(ACe," (Hubert model)"),ACe.forEach(t),bmo=i($),fp=n($,"LI",{});var yCe=s(fp);uae=n(yCe,"STRONG",{});var MXr=s(uae);vmo=r(MXr,"ibert"),MXr.forEach(t),Fmo=r(yCe," \u2014 "),LP=n(yCe,"A",{href:!0});var EXr=s(LP);Tmo=r(EXr,"IBertModel"),EXr.forEach(t),Mmo=r(yCe," (I-BERT model)"),yCe.forEach(t),Emo=i($),mp=n($,"LI",{});var LCe=s(mp);_ae=n(LCe,"STRONG",{});var CXr=s(_ae);Cmo=r(CXr,"imagegpt"),CXr.forEach(t),wmo=r(LCe," \u2014 "),xP=n(LCe,"A",{href:!0});var wXr=s(xP);Amo=r(wXr,"ImageGPTModel"),wXr.forEach(t),ymo=r(LCe," (ImageGPT model)"),LCe.forEach(t),Lmo=i($),gp=n($,"LI",{});var xCe=s(gp);bae=n(xCe,"STRONG",{});var AXr=s(bae);xmo=r(AXr,"layoutlm"),AXr.forEach(t),$mo=r(xCe," \u2014 "),$P=n(xCe,"A",{href:!0});var yXr=s($P);kmo=r(yXr,"LayoutLMModel"),yXr.forEach(t),Smo=r(xCe," (LayoutLM model)"),xCe.forEach(t),Rmo=i($),hp=n($,"LI",{});var $Ce=s(hp);vae=n($Ce,"STRONG",{});var LXr=s(vae);Bmo=r(LXr,"layoutlmv2"),LXr.forEach(t),Pmo=r($Ce," \u2014 "),kP=n($Ce,"A",{href:!0});var xXr=s(kP);Imo=r(xXr,"LayoutLMv2Model"),xXr.forEach(t),qmo=r($Ce," (LayoutLMv2 model)"),$Ce.forEach(t),Nmo=i($),pp=n($,"LI",{});var kCe=s(pp);Fae=n(kCe,"STRONG",{});var $Xr=s(Fae);jmo=r($Xr,"led"),$Xr.forEach(t),Dmo=r(kCe," \u2014 "),SP=n(kCe,"A",{href:!0});var kXr=s(SP);Gmo=r(kXr,"LEDModel"),kXr.forEach(t),Omo=r(kCe," (LED model)"),kCe.forEach(t),Vmo=i($),up=n($,"LI",{});var SCe=s(up);Tae=n(SCe,"STRONG",{});var SXr=s(Tae);Xmo=r(SXr,"longformer"),SXr.forEach(t),zmo=r(SCe," \u2014 "),RP=n(SCe,"A",{href:!0});var RXr=s(RP);Qmo=r(RXr,"LongformerModel"),RXr.forEach(t),Wmo=r(SCe," (Longformer model)"),SCe.forEach(t),Hmo=i($),_p=n($,"LI",{});var RCe=s(_p);Mae=n(RCe,"STRONG",{});var BXr=s(Mae);Umo=r(BXr,"luke"),BXr.forEach(t),Jmo=r(RCe," \u2014 "),BP=n(RCe,"A",{href:!0});var PXr=s(BP);Ymo=r(PXr,"LukeModel"),PXr.forEach(t),Kmo=r(RCe," (LUKE model)"),RCe.forEach(t),Zmo=i($),bp=n($,"LI",{});var BCe=s(bp);Eae=n(BCe,"STRONG",{});var IXr=s(Eae);ego=r(IXr,"lxmert"),IXr.forEach(t),ogo=r(BCe," \u2014 "),PP=n(BCe,"A",{href:!0});var qXr=s(PP);rgo=r(qXr,"LxmertModel"),qXr.forEach(t),tgo=r(BCe," (LXMERT model)"),BCe.forEach(t),ago=i($),vp=n($,"LI",{});var PCe=s(vp);Cae=n(PCe,"STRONG",{});var NXr=s(Cae);ngo=r(NXr,"m2m_100"),NXr.forEach(t),sgo=r(PCe," \u2014 "),IP=n(PCe,"A",{href:!0});var jXr=s(IP);lgo=r(jXr,"M2M100Model"),jXr.forEach(t),igo=r(PCe," (M2M100 model)"),PCe.forEach(t),dgo=i($),Fp=n($,"LI",{});var ICe=s(Fp);wae=n(ICe,"STRONG",{});var DXr=s(wae);cgo=r(DXr,"marian"),DXr.forEach(t),fgo=r(ICe," \u2014 "),qP=n(ICe,"A",{href:!0});var GXr=s(qP);mgo=r(GXr,"MarianModel"),GXr.forEach(t),ggo=r(ICe," (Marian model)"),ICe.forEach(t),hgo=i($),Tp=n($,"LI",{});var qCe=s(Tp);Aae=n(qCe,"STRONG",{});var OXr=s(Aae);pgo=r(OXr,"maskformer"),OXr.forEach(t),ugo=r(qCe," \u2014 "),NP=n(qCe,"A",{href:!0});var VXr=s(NP);_go=r(VXr,"MaskFormerModel"),VXr.forEach(t),bgo=r(qCe," (MaskFormer model)"),qCe.forEach(t),vgo=i($),Mp=n($,"LI",{});var NCe=s(Mp);yae=n(NCe,"STRONG",{});var XXr=s(yae);Fgo=r(XXr,"mbart"),XXr.forEach(t),Tgo=r(NCe," \u2014 "),jP=n(NCe,"A",{href:!0});var zXr=s(jP);Mgo=r(zXr,"MBartModel"),zXr.forEach(t),Ego=r(NCe," (mBART model)"),NCe.forEach(t),Cgo=i($),Ep=n($,"LI",{});var jCe=s(Ep);Lae=n(jCe,"STRONG",{});var QXr=s(Lae);wgo=r(QXr,"megatron-bert"),QXr.forEach(t),Ago=r(jCe," \u2014 "),DP=n(jCe,"A",{href:!0});var WXr=s(DP);ygo=r(WXr,"MegatronBertModel"),WXr.forEach(t),Lgo=r(jCe," (MegatronBert model)"),jCe.forEach(t),xgo=i($),Cp=n($,"LI",{});var DCe=s(Cp);xae=n(DCe,"STRONG",{});var HXr=s(xae);$go=r(HXr,"mobilebert"),HXr.forEach(t),kgo=r(DCe," \u2014 "),GP=n(DCe,"A",{href:!0});var UXr=s(GP);Sgo=r(UXr,"MobileBertModel"),UXr.forEach(t),Rgo=r(DCe," (MobileBERT model)"),DCe.forEach(t),Bgo=i($),wp=n($,"LI",{});var GCe=s(wp);$ae=n(GCe,"STRONG",{});var JXr=s($ae);Pgo=r(JXr,"mpnet"),JXr.forEach(t),Igo=r(GCe," \u2014 "),OP=n(GCe,"A",{href:!0});var YXr=s(OP);qgo=r(YXr,"MPNetModel"),YXr.forEach(t),Ngo=r(GCe," (MPNet model)"),GCe.forEach(t),jgo=i($),Ap=n($,"LI",{});var OCe=s(Ap);kae=n(OCe,"STRONG",{});var KXr=s(kae);Dgo=r(KXr,"mt5"),KXr.forEach(t),Ggo=r(OCe," \u2014 "),VP=n(OCe,"A",{href:!0});var ZXr=s(VP);Ogo=r(ZXr,"MT5Model"),ZXr.forEach(t),Vgo=r(OCe," (mT5 model)"),OCe.forEach(t),Xgo=i($),yp=n($,"LI",{});var VCe=s(yp);Sae=n(VCe,"STRONG",{});var ezr=s(Sae);zgo=r(ezr,"nystromformer"),ezr.forEach(t),Qgo=r(VCe," \u2014 "),XP=n(VCe,"A",{href:!0});var ozr=s(XP);Wgo=r(ozr,"NystromformerModel"),ozr.forEach(t),Hgo=r(VCe," (Nystromformer model)"),VCe.forEach(t),Ugo=i($),Lp=n($,"LI",{});var XCe=s(Lp);Rae=n(XCe,"STRONG",{});var rzr=s(Rae);Jgo=r(rzr,"openai-gpt"),rzr.forEach(t),Ygo=r(XCe," \u2014 "),zP=n(XCe,"A",{href:!0});var tzr=s(zP);Kgo=r(tzr,"OpenAIGPTModel"),tzr.forEach(t),Zgo=r(XCe," (OpenAI GPT model)"),XCe.forEach(t),eho=i($),xp=n($,"LI",{});var zCe=s(xp);Bae=n(zCe,"STRONG",{});var azr=s(Bae);oho=r(azr,"pegasus"),azr.forEach(t),rho=r(zCe," \u2014 "),QP=n(zCe,"A",{href:!0});var nzr=s(QP);tho=r(nzr,"PegasusModel"),nzr.forEach(t),aho=r(zCe," (Pegasus model)"),zCe.forEach(t),nho=i($),$p=n($,"LI",{});var QCe=s($p);Pae=n(QCe,"STRONG",{});var szr=s(Pae);sho=r(szr,"perceiver"),szr.forEach(t),lho=r(QCe," \u2014 "),WP=n(QCe,"A",{href:!0});var lzr=s(WP);iho=r(lzr,"PerceiverModel"),lzr.forEach(t),dho=r(QCe," (Perceiver model)"),QCe.forEach(t),cho=i($),kp=n($,"LI",{});var WCe=s(kp);Iae=n(WCe,"STRONG",{});var izr=s(Iae);fho=r(izr,"plbart"),izr.forEach(t),mho=r(WCe," \u2014 "),HP=n(WCe,"A",{href:!0});var dzr=s(HP);gho=r(dzr,"PLBartModel"),dzr.forEach(t),hho=r(WCe," (PLBart model)"),WCe.forEach(t),pho=i($),Sp=n($,"LI",{});var HCe=s(Sp);qae=n(HCe,"STRONG",{});var czr=s(qae);uho=r(czr,"poolformer"),czr.forEach(t),_ho=r(HCe," \u2014 "),UP=n(HCe,"A",{href:!0});var fzr=s(UP);bho=r(fzr,"PoolFormerModel"),fzr.forEach(t),vho=r(HCe," (PoolFormer model)"),HCe.forEach(t),Fho=i($),Rp=n($,"LI",{});var UCe=s(Rp);Nae=n(UCe,"STRONG",{});var mzr=s(Nae);Tho=r(mzr,"prophetnet"),mzr.forEach(t),Mho=r(UCe," \u2014 "),JP=n(UCe,"A",{href:!0});var gzr=s(JP);Eho=r(gzr,"ProphetNetModel"),gzr.forEach(t),Cho=r(UCe," (ProphetNet model)"),UCe.forEach(t),who=i($),Bp=n($,"LI",{});var JCe=s(Bp);jae=n(JCe,"STRONG",{});var hzr=s(jae);Aho=r(hzr,"qdqbert"),hzr.forEach(t),yho=r(JCe," \u2014 "),YP=n(JCe,"A",{href:!0});var pzr=s(YP);Lho=r(pzr,"QDQBertModel"),pzr.forEach(t),xho=r(JCe," (QDQBert model)"),JCe.forEach(t),$ho=i($),Pp=n($,"LI",{});var YCe=s(Pp);Dae=n(YCe,"STRONG",{});var uzr=s(Dae);kho=r(uzr,"reformer"),uzr.forEach(t),Sho=r(YCe," \u2014 "),KP=n(YCe,"A",{href:!0});var _zr=s(KP);Rho=r(_zr,"ReformerModel"),_zr.forEach(t),Bho=r(YCe," (Reformer model)"),YCe.forEach(t),Pho=i($),Ip=n($,"LI",{});var KCe=s(Ip);Gae=n(KCe,"STRONG",{});var bzr=s(Gae);Iho=r(bzr,"regnet"),bzr.forEach(t),qho=r(KCe," \u2014 "),ZP=n(KCe,"A",{href:!0});var vzr=s(ZP);Nho=r(vzr,"RegNetModel"),vzr.forEach(t),jho=r(KCe," (RegNet model)"),KCe.forEach(t),Dho=i($),qp=n($,"LI",{});var ZCe=s(qp);Oae=n(ZCe,"STRONG",{});var Fzr=s(Oae);Gho=r(Fzr,"rembert"),Fzr.forEach(t),Oho=r(ZCe," \u2014 "),eI=n(ZCe,"A",{href:!0});var Tzr=s(eI);Vho=r(Tzr,"RemBertModel"),Tzr.forEach(t),Xho=r(ZCe," (RemBERT model)"),ZCe.forEach(t),zho=i($),Np=n($,"LI",{});var e3e=s(Np);Vae=n(e3e,"STRONG",{});var Mzr=s(Vae);Qho=r(Mzr,"resnet"),Mzr.forEach(t),Who=r(e3e," \u2014 "),oI=n(e3e,"A",{href:!0});var Ezr=s(oI);Hho=r(Ezr,"ResNetModel"),Ezr.forEach(t),Uho=r(e3e," (ResNet model)"),e3e.forEach(t),Jho=i($),jp=n($,"LI",{});var o3e=s(jp);Xae=n(o3e,"STRONG",{});var Czr=s(Xae);Yho=r(Czr,"retribert"),Czr.forEach(t),Kho=r(o3e," \u2014 "),rI=n(o3e,"A",{href:!0});var wzr=s(rI);Zho=r(wzr,"RetriBertModel"),wzr.forEach(t),epo=r(o3e," (RetriBERT model)"),o3e.forEach(t),opo=i($),Dp=n($,"LI",{});var r3e=s(Dp);zae=n(r3e,"STRONG",{});var Azr=s(zae);rpo=r(Azr,"roberta"),Azr.forEach(t),tpo=r(r3e," \u2014 "),tI=n(r3e,"A",{href:!0});var yzr=s(tI);apo=r(yzr,"RobertaModel"),yzr.forEach(t),npo=r(r3e," (RoBERTa model)"),r3e.forEach(t),spo=i($),Gp=n($,"LI",{});var t3e=s(Gp);Qae=n(t3e,"STRONG",{});var Lzr=s(Qae);lpo=r(Lzr,"roformer"),Lzr.forEach(t),ipo=r(t3e," \u2014 "),aI=n(t3e,"A",{href:!0});var xzr=s(aI);dpo=r(xzr,"RoFormerModel"),xzr.forEach(t),cpo=r(t3e," (RoFormer model)"),t3e.forEach(t),fpo=i($),Op=n($,"LI",{});var a3e=s(Op);Wae=n(a3e,"STRONG",{});var $zr=s(Wae);mpo=r($zr,"segformer"),$zr.forEach(t),gpo=r(a3e," \u2014 "),nI=n(a3e,"A",{href:!0});var kzr=s(nI);hpo=r(kzr,"SegformerModel"),kzr.forEach(t),ppo=r(a3e," (SegFormer model)"),a3e.forEach(t),upo=i($),Vp=n($,"LI",{});var n3e=s(Vp);Hae=n(n3e,"STRONG",{});var Szr=s(Hae);_po=r(Szr,"sew"),Szr.forEach(t),bpo=r(n3e," \u2014 "),sI=n(n3e,"A",{href:!0});var Rzr=s(sI);vpo=r(Rzr,"SEWModel"),Rzr.forEach(t),Fpo=r(n3e," (SEW model)"),n3e.forEach(t),Tpo=i($),Xp=n($,"LI",{});var s3e=s(Xp);Uae=n(s3e,"STRONG",{});var Bzr=s(Uae);Mpo=r(Bzr,"sew-d"),Bzr.forEach(t),Epo=r(s3e," \u2014 "),lI=n(s3e,"A",{href:!0});var Pzr=s(lI);Cpo=r(Pzr,"SEWDModel"),Pzr.forEach(t),wpo=r(s3e," (SEW-D model)"),s3e.forEach(t),Apo=i($),zp=n($,"LI",{});var l3e=s(zp);Jae=n(l3e,"STRONG",{});var Izr=s(Jae);ypo=r(Izr,"speech_to_text"),Izr.forEach(t),Lpo=r(l3e," \u2014 "),iI=n(l3e,"A",{href:!0});var qzr=s(iI);xpo=r(qzr,"Speech2TextModel"),qzr.forEach(t),$po=r(l3e," (Speech2Text model)"),l3e.forEach(t),kpo=i($),Qp=n($,"LI",{});var i3e=s(Qp);Yae=n(i3e,"STRONG",{});var Nzr=s(Yae);Spo=r(Nzr,"splinter"),Nzr.forEach(t),Rpo=r(i3e," \u2014 "),dI=n(i3e,"A",{href:!0});var jzr=s(dI);Bpo=r(jzr,"SplinterModel"),jzr.forEach(t),Ppo=r(i3e," (Splinter model)"),i3e.forEach(t),Ipo=i($),Wp=n($,"LI",{});var d3e=s(Wp);Kae=n(d3e,"STRONG",{});var Dzr=s(Kae);qpo=r(Dzr,"squeezebert"),Dzr.forEach(t),Npo=r(d3e," \u2014 "),cI=n(d3e,"A",{href:!0});var Gzr=s(cI);jpo=r(Gzr,"SqueezeBertModel"),Gzr.forEach(t),Dpo=r(d3e," (SqueezeBERT model)"),d3e.forEach(t),Gpo=i($),Hp=n($,"LI",{});var c3e=s(Hp);Zae=n(c3e,"STRONG",{});var Ozr=s(Zae);Opo=r(Ozr,"swin"),Ozr.forEach(t),Vpo=r(c3e," \u2014 "),fI=n(c3e,"A",{href:!0});var Vzr=s(fI);Xpo=r(Vzr,"SwinModel"),Vzr.forEach(t),zpo=r(c3e," (Swin model)"),c3e.forEach(t),Qpo=i($),Up=n($,"LI",{});var f3e=s(Up);ene=n(f3e,"STRONG",{});var Xzr=s(ene);Wpo=r(Xzr,"t5"),Xzr.forEach(t),Hpo=r(f3e," \u2014 "),mI=n(f3e,"A",{href:!0});var zzr=s(mI);Upo=r(zzr,"T5Model"),zzr.forEach(t),Jpo=r(f3e," (T5 model)"),f3e.forEach(t),Ypo=i($),Jp=n($,"LI",{});var m3e=s(Jp);one=n(m3e,"STRONG",{});var Qzr=s(one);Kpo=r(Qzr,"tapas"),Qzr.forEach(t),Zpo=r(m3e," \u2014 "),gI=n(m3e,"A",{href:!0});var Wzr=s(gI);euo=r(Wzr,"TapasModel"),Wzr.forEach(t),ouo=r(m3e," (TAPAS model)"),m3e.forEach(t),ruo=i($),Yp=n($,"LI",{});var g3e=s(Yp);rne=n(g3e,"STRONG",{});var Hzr=s(rne);tuo=r(Hzr,"transfo-xl"),Hzr.forEach(t),auo=r(g3e," \u2014 "),hI=n(g3e,"A",{href:!0});var Uzr=s(hI);nuo=r(Uzr,"TransfoXLModel"),Uzr.forEach(t),suo=r(g3e," (Transformer-XL model)"),g3e.forEach(t),luo=i($),Kp=n($,"LI",{});var h3e=s(Kp);tne=n(h3e,"STRONG",{});var Jzr=s(tne);iuo=r(Jzr,"unispeech"),Jzr.forEach(t),duo=r(h3e," \u2014 "),pI=n(h3e,"A",{href:!0});var Yzr=s(pI);cuo=r(Yzr,"UniSpeechModel"),Yzr.forEach(t),fuo=r(h3e," (UniSpeech model)"),h3e.forEach(t),muo=i($),Zp=n($,"LI",{});var p3e=s(Zp);ane=n(p3e,"STRONG",{});var Kzr=s(ane);guo=r(Kzr,"unispeech-sat"),Kzr.forEach(t),huo=r(p3e," \u2014 "),uI=n(p3e,"A",{href:!0});var Zzr=s(uI);puo=r(Zzr,"UniSpeechSatModel"),Zzr.forEach(t),uuo=r(p3e," (UniSpeechSat model)"),p3e.forEach(t),_uo=i($),eu=n($,"LI",{});var u3e=s(eu);nne=n(u3e,"STRONG",{});var eQr=s(nne);buo=r(eQr,"van"),eQr.forEach(t),vuo=r(u3e," \u2014 "),_I=n(u3e,"A",{href:!0});var oQr=s(_I);Fuo=r(oQr,"VanModel"),oQr.forEach(t),Tuo=r(u3e," (VAN model)"),u3e.forEach(t),Muo=i($),ou=n($,"LI",{});var _3e=s(ou);sne=n(_3e,"STRONG",{});var rQr=s(sne);Euo=r(rQr,"vilt"),rQr.forEach(t),Cuo=r(_3e," \u2014 "),bI=n(_3e,"A",{href:!0});var tQr=s(bI);wuo=r(tQr,"ViltModel"),tQr.forEach(t),Auo=r(_3e," (ViLT model)"),_3e.forEach(t),yuo=i($),ru=n($,"LI",{});var b3e=s(ru);lne=n(b3e,"STRONG",{});var aQr=s(lne);Luo=r(aQr,"vision-text-dual-encoder"),aQr.forEach(t),xuo=r(b3e," \u2014 "),vI=n(b3e,"A",{href:!0});var nQr=s(vI);$uo=r(nQr,"VisionTextDualEncoderModel"),nQr.forEach(t),kuo=r(b3e," (VisionTextDualEncoder model)"),b3e.forEach(t),Suo=i($),tu=n($,"LI",{});var v3e=s(tu);ine=n(v3e,"STRONG",{});var sQr=s(ine);Ruo=r(sQr,"visual_bert"),sQr.forEach(t),Buo=r(v3e," \u2014 "),FI=n(v3e,"A",{href:!0});var lQr=s(FI);Puo=r(lQr,"VisualBertModel"),lQr.forEach(t),Iuo=r(v3e," (VisualBert model)"),v3e.forEach(t),quo=i($),au=n($,"LI",{});var F3e=s(au);dne=n(F3e,"STRONG",{});var iQr=s(dne);Nuo=r(iQr,"vit"),iQr.forEach(t),juo=r(F3e," \u2014 "),TI=n(F3e,"A",{href:!0});var dQr=s(TI);Duo=r(dQr,"ViTModel"),dQr.forEach(t),Guo=r(F3e," (ViT model)"),F3e.forEach(t),Ouo=i($),nu=n($,"LI",{});var T3e=s(nu);cne=n(T3e,"STRONG",{});var cQr=s(cne);Vuo=r(cQr,"vit_mae"),cQr.forEach(t),Xuo=r(T3e," \u2014 "),MI=n(T3e,"A",{href:!0});var fQr=s(MI);zuo=r(fQr,"ViTMAEModel"),fQr.forEach(t),Quo=r(T3e," (ViTMAE model)"),T3e.forEach(t),Wuo=i($),su=n($,"LI",{});var M3e=s(su);fne=n(M3e,"STRONG",{});var mQr=s(fne);Huo=r(mQr,"wav2vec2"),mQr.forEach(t),Uuo=r(M3e," \u2014 "),EI=n(M3e,"A",{href:!0});var gQr=s(EI);Juo=r(gQr,"Wav2Vec2Model"),gQr.forEach(t),Yuo=r(M3e," (Wav2Vec2 model)"),M3e.forEach(t),Kuo=i($),lu=n($,"LI",{});var E3e=s(lu);mne=n(E3e,"STRONG",{});var hQr=s(mne);Zuo=r(hQr,"wavlm"),hQr.forEach(t),e_o=r(E3e," \u2014 "),CI=n(E3e,"A",{href:!0});var pQr=s(CI);o_o=r(pQr,"WavLMModel"),pQr.forEach(t),r_o=r(E3e," (WavLM model)"),E3e.forEach(t),t_o=i($),iu=n($,"LI",{});var C3e=s(iu);gne=n(C3e,"STRONG",{});var uQr=s(gne);a_o=r(uQr,"xglm"),uQr.forEach(t),n_o=r(C3e," \u2014 "),wI=n(C3e,"A",{href:!0});var _Qr=s(wI);s_o=r(_Qr,"XGLMModel"),_Qr.forEach(t),l_o=r(C3e," (XGLM model)"),C3e.forEach(t),i_o=i($),du=n($,"LI",{});var w3e=s(du);hne=n(w3e,"STRONG",{});var bQr=s(hne);d_o=r(bQr,"xlm"),bQr.forEach(t),c_o=r(w3e," \u2014 "),AI=n(w3e,"A",{href:!0});var vQr=s(AI);f_o=r(vQr,"XLMModel"),vQr.forEach(t),m_o=r(w3e," (XLM model)"),w3e.forEach(t),g_o=i($),cu=n($,"LI",{});var A3e=s(cu);pne=n(A3e,"STRONG",{});var FQr=s(pne);h_o=r(FQr,"xlm-prophetnet"),FQr.forEach(t),p_o=r(A3e," \u2014 "),yI=n(A3e,"A",{href:!0});var TQr=s(yI);u_o=r(TQr,"XLMProphetNetModel"),TQr.forEach(t),__o=r(A3e," (XLMProphetNet model)"),A3e.forEach(t),b_o=i($),fu=n($,"LI",{});var y3e=s(fu);une=n(y3e,"STRONG",{});var MQr=s(une);v_o=r(MQr,"xlm-roberta"),MQr.forEach(t),F_o=r(y3e," \u2014 "),LI=n(y3e,"A",{href:!0});var EQr=s(LI);T_o=r(EQr,"XLMRobertaModel"),EQr.forEach(t),M_o=r(y3e," (XLM-RoBERTa model)"),y3e.forEach(t),E_o=i($),mu=n($,"LI",{});var L3e=s(mu);_ne=n(L3e,"STRONG",{});var CQr=s(_ne);C_o=r(CQr,"xlm-roberta-xl"),CQr.forEach(t),w_o=r(L3e," \u2014 "),xI=n(L3e,"A",{href:!0});var wQr=s(xI);A_o=r(wQr,"XLMRobertaXLModel"),wQr.forEach(t),y_o=r(L3e," (XLM-RoBERTa-XL model)"),L3e.forEach(t),L_o=i($),gu=n($,"LI",{});var x3e=s(gu);bne=n(x3e,"STRONG",{});var AQr=s(bne);x_o=r(AQr,"xlnet"),AQr.forEach(t),$_o=r(x3e," \u2014 "),$I=n(x3e,"A",{href:!0});var yQr=s($I);k_o=r(yQr,"XLNetModel"),yQr.forEach(t),S_o=r(x3e," (XLNet model)"),x3e.forEach(t),R_o=i($),hu=n($,"LI",{});var $3e=s(hu);vne=n($3e,"STRONG",{});var LQr=s(vne);B_o=r(LQr,"yoso"),LQr.forEach(t),P_o=r($3e," \u2014 "),kI=n($3e,"A",{href:!0});var xQr=s(kI);I_o=r(xQr,"YosoModel"),xQr.forEach(t),q_o=r($3e," (YOSO model)"),$3e.forEach(t),$.forEach(t),N_o=i(Ut),pu=n(Ut,"P",{});var k3e=s(pu);j_o=r(k3e,"The model is set in evaluation mode by default using "),Fne=n(k3e,"CODE",{});var $Qr=s(Fne);D_o=r($Qr,"model.eval()"),$Qr.forEach(t),G_o=r(k3e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Tne=n(k3e,"CODE",{});var kQr=s(Tne);O_o=r(kQr,"model.train()"),kQr.forEach(t),k3e.forEach(t),V_o=i(Ut),T(uu.$$.fragment,Ut),Ut.forEach(t),Ps.forEach(t),QRe=i(f),bi=n(f,"H2",{class:!0});var HPe=s(bi);_u=n(HPe,"A",{id:!0,class:!0,href:!0});var SQr=s(_u);Mne=n(SQr,"SPAN",{});var RQr=s(Mne);T(zA.$$.fragment,RQr),RQr.forEach(t),SQr.forEach(t),X_o=i(HPe),Ene=n(HPe,"SPAN",{});var BQr=s(Ene);z_o=r(BQr,"AutoModelForPreTraining"),BQr.forEach(t),HPe.forEach(t),WRe=i(f),yo=n(f,"DIV",{class:!0});var Is=s(yo);T(QA.$$.fragment,Is),Q_o=i(Is),vi=n(Is,"P",{});var JJ=s(vi);W_o=r(JJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),SI=n(JJ,"A",{href:!0});var PQr=s(SI);H_o=r(PQr,"from_pretrained()"),PQr.forEach(t),U_o=r(JJ," class method or the "),RI=n(JJ,"A",{href:!0});var IQr=s(RI);J_o=r(IQr,"from_config()"),IQr.forEach(t),Y_o=r(JJ,` class
method.`),JJ.forEach(t),K_o=i(Is),WA=n(Is,"P",{});var UPe=s(WA);Z_o=r(UPe,"This class cannot be instantiated directly using "),Cne=n(UPe,"CODE",{});var qQr=s(Cne);e1o=r(qQr,"__init__()"),qQr.forEach(t),o1o=r(UPe," (throws an error)."),UPe.forEach(t),r1o=i(Is),Zr=n(Is,"DIV",{class:!0});var T3=s(Zr);T(HA.$$.fragment,T3),t1o=i(T3),wne=n(T3,"P",{});var NQr=s(wne);a1o=r(NQr,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),NQr.forEach(t),n1o=i(T3),Fi=n(T3,"P",{});var YJ=s(Fi);s1o=r(YJ,`Note:
Loading a model from its configuration file does `),Ane=n(YJ,"STRONG",{});var jQr=s(Ane);l1o=r(jQr,"not"),jQr.forEach(t),i1o=r(YJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),BI=n(YJ,"A",{href:!0});var DQr=s(BI);d1o=r(DQr,"from_pretrained()"),DQr.forEach(t),c1o=r(YJ," to load the model weights."),YJ.forEach(t),f1o=i(T3),T(bu.$$.fragment,T3),T3.forEach(t),m1o=i(Is),We=n(Is,"DIV",{class:!0});var Jt=s(We);T(UA.$$.fragment,Jt),g1o=i(Jt),yne=n(Jt,"P",{});var GQr=s(yne);h1o=r(GQr,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),GQr.forEach(t),p1o=i(Jt),Ca=n(Jt,"P",{});var M3=s(Ca);u1o=r(M3,"The model class to instantiate is selected based on the "),Lne=n(M3,"CODE",{});var OQr=s(Lne);_1o=r(OQr,"model_type"),OQr.forEach(t),b1o=r(M3,` property of the config object (either
passed as an argument or loaded from `),xne=n(M3,"CODE",{});var VQr=s(xne);v1o=r(VQr,"pretrained_model_name_or_path"),VQr.forEach(t),F1o=r(M3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$ne=n(M3,"CODE",{});var XQr=s($ne);T1o=r(XQr,"pretrained_model_name_or_path"),XQr.forEach(t),M1o=r(M3,":"),M3.forEach(t),E1o=i(Jt),G=n(Jt,"UL",{});var V=s(G);vu=n(V,"LI",{});var S3e=s(vu);kne=n(S3e,"STRONG",{});var zQr=s(kne);C1o=r(zQr,"albert"),zQr.forEach(t),w1o=r(S3e," \u2014 "),PI=n(S3e,"A",{href:!0});var QQr=s(PI);A1o=r(QQr,"AlbertForPreTraining"),QQr.forEach(t),y1o=r(S3e," (ALBERT model)"),S3e.forEach(t),L1o=i(V),Fu=n(V,"LI",{});var R3e=s(Fu);Sne=n(R3e,"STRONG",{});var WQr=s(Sne);x1o=r(WQr,"bart"),WQr.forEach(t),$1o=r(R3e," \u2014 "),II=n(R3e,"A",{href:!0});var HQr=s(II);k1o=r(HQr,"BartForConditionalGeneration"),HQr.forEach(t),S1o=r(R3e," (BART model)"),R3e.forEach(t),R1o=i(V),Tu=n(V,"LI",{});var B3e=s(Tu);Rne=n(B3e,"STRONG",{});var UQr=s(Rne);B1o=r(UQr,"bert"),UQr.forEach(t),P1o=r(B3e," \u2014 "),qI=n(B3e,"A",{href:!0});var JQr=s(qI);I1o=r(JQr,"BertForPreTraining"),JQr.forEach(t),q1o=r(B3e," (BERT model)"),B3e.forEach(t),N1o=i(V),Mu=n(V,"LI",{});var P3e=s(Mu);Bne=n(P3e,"STRONG",{});var YQr=s(Bne);j1o=r(YQr,"big_bird"),YQr.forEach(t),D1o=r(P3e," \u2014 "),NI=n(P3e,"A",{href:!0});var KQr=s(NI);G1o=r(KQr,"BigBirdForPreTraining"),KQr.forEach(t),O1o=r(P3e," (BigBird model)"),P3e.forEach(t),V1o=i(V),Eu=n(V,"LI",{});var I3e=s(Eu);Pne=n(I3e,"STRONG",{});var ZQr=s(Pne);X1o=r(ZQr,"camembert"),ZQr.forEach(t),z1o=r(I3e," \u2014 "),jI=n(I3e,"A",{href:!0});var eWr=s(jI);Q1o=r(eWr,"CamembertForMaskedLM"),eWr.forEach(t),W1o=r(I3e," (CamemBERT model)"),I3e.forEach(t),H1o=i(V),Cu=n(V,"LI",{});var q3e=s(Cu);Ine=n(q3e,"STRONG",{});var oWr=s(Ine);U1o=r(oWr,"ctrl"),oWr.forEach(t),J1o=r(q3e," \u2014 "),DI=n(q3e,"A",{href:!0});var rWr=s(DI);Y1o=r(rWr,"CTRLLMHeadModel"),rWr.forEach(t),K1o=r(q3e," (CTRL model)"),q3e.forEach(t),Z1o=i(V),wu=n(V,"LI",{});var N3e=s(wu);qne=n(N3e,"STRONG",{});var tWr=s(qne);e9o=r(tWr,"data2vec-text"),tWr.forEach(t),o9o=r(N3e," \u2014 "),GI=n(N3e,"A",{href:!0});var aWr=s(GI);r9o=r(aWr,"Data2VecTextForMaskedLM"),aWr.forEach(t),t9o=r(N3e," (Data2VecText model)"),N3e.forEach(t),a9o=i(V),Au=n(V,"LI",{});var j3e=s(Au);Nne=n(j3e,"STRONG",{});var nWr=s(Nne);n9o=r(nWr,"deberta"),nWr.forEach(t),s9o=r(j3e," \u2014 "),OI=n(j3e,"A",{href:!0});var sWr=s(OI);l9o=r(sWr,"DebertaForMaskedLM"),sWr.forEach(t),i9o=r(j3e," (DeBERTa model)"),j3e.forEach(t),d9o=i(V),yu=n(V,"LI",{});var D3e=s(yu);jne=n(D3e,"STRONG",{});var lWr=s(jne);c9o=r(lWr,"deberta-v2"),lWr.forEach(t),f9o=r(D3e," \u2014 "),VI=n(D3e,"A",{href:!0});var iWr=s(VI);m9o=r(iWr,"DebertaV2ForMaskedLM"),iWr.forEach(t),g9o=r(D3e," (DeBERTa-v2 model)"),D3e.forEach(t),h9o=i(V),Lu=n(V,"LI",{});var G3e=s(Lu);Dne=n(G3e,"STRONG",{});var dWr=s(Dne);p9o=r(dWr,"distilbert"),dWr.forEach(t),u9o=r(G3e," \u2014 "),XI=n(G3e,"A",{href:!0});var cWr=s(XI);_9o=r(cWr,"DistilBertForMaskedLM"),cWr.forEach(t),b9o=r(G3e," (DistilBERT model)"),G3e.forEach(t),v9o=i(V),xu=n(V,"LI",{});var O3e=s(xu);Gne=n(O3e,"STRONG",{});var fWr=s(Gne);F9o=r(fWr,"electra"),fWr.forEach(t),T9o=r(O3e," \u2014 "),zI=n(O3e,"A",{href:!0});var mWr=s(zI);M9o=r(mWr,"ElectraForPreTraining"),mWr.forEach(t),E9o=r(O3e," (ELECTRA model)"),O3e.forEach(t),C9o=i(V),$u=n(V,"LI",{});var V3e=s($u);One=n(V3e,"STRONG",{});var gWr=s(One);w9o=r(gWr,"flaubert"),gWr.forEach(t),A9o=r(V3e," \u2014 "),QI=n(V3e,"A",{href:!0});var hWr=s(QI);y9o=r(hWr,"FlaubertWithLMHeadModel"),hWr.forEach(t),L9o=r(V3e," (FlauBERT model)"),V3e.forEach(t),x9o=i(V),ku=n(V,"LI",{});var X3e=s(ku);Vne=n(X3e,"STRONG",{});var pWr=s(Vne);$9o=r(pWr,"fnet"),pWr.forEach(t),k9o=r(X3e," \u2014 "),WI=n(X3e,"A",{href:!0});var uWr=s(WI);S9o=r(uWr,"FNetForPreTraining"),uWr.forEach(t),R9o=r(X3e," (FNet model)"),X3e.forEach(t),B9o=i(V),Su=n(V,"LI",{});var z3e=s(Su);Xne=n(z3e,"STRONG",{});var _Wr=s(Xne);P9o=r(_Wr,"fsmt"),_Wr.forEach(t),I9o=r(z3e," \u2014 "),HI=n(z3e,"A",{href:!0});var bWr=s(HI);q9o=r(bWr,"FSMTForConditionalGeneration"),bWr.forEach(t),N9o=r(z3e," (FairSeq Machine-Translation model)"),z3e.forEach(t),j9o=i(V),Ru=n(V,"LI",{});var Q3e=s(Ru);zne=n(Q3e,"STRONG",{});var vWr=s(zne);D9o=r(vWr,"funnel"),vWr.forEach(t),G9o=r(Q3e," \u2014 "),UI=n(Q3e,"A",{href:!0});var FWr=s(UI);O9o=r(FWr,"FunnelForPreTraining"),FWr.forEach(t),V9o=r(Q3e," (Funnel Transformer model)"),Q3e.forEach(t),X9o=i(V),Bu=n(V,"LI",{});var W3e=s(Bu);Qne=n(W3e,"STRONG",{});var TWr=s(Qne);z9o=r(TWr,"gpt2"),TWr.forEach(t),Q9o=r(W3e," \u2014 "),JI=n(W3e,"A",{href:!0});var MWr=s(JI);W9o=r(MWr,"GPT2LMHeadModel"),MWr.forEach(t),H9o=r(W3e," (OpenAI GPT-2 model)"),W3e.forEach(t),U9o=i(V),Pu=n(V,"LI",{});var H3e=s(Pu);Wne=n(H3e,"STRONG",{});var EWr=s(Wne);J9o=r(EWr,"ibert"),EWr.forEach(t),Y9o=r(H3e," \u2014 "),YI=n(H3e,"A",{href:!0});var CWr=s(YI);K9o=r(CWr,"IBertForMaskedLM"),CWr.forEach(t),Z9o=r(H3e," (I-BERT model)"),H3e.forEach(t),ebo=i(V),Iu=n(V,"LI",{});var U3e=s(Iu);Hne=n(U3e,"STRONG",{});var wWr=s(Hne);obo=r(wWr,"layoutlm"),wWr.forEach(t),rbo=r(U3e," \u2014 "),KI=n(U3e,"A",{href:!0});var AWr=s(KI);tbo=r(AWr,"LayoutLMForMaskedLM"),AWr.forEach(t),abo=r(U3e," (LayoutLM model)"),U3e.forEach(t),nbo=i(V),qu=n(V,"LI",{});var J3e=s(qu);Une=n(J3e,"STRONG",{});var yWr=s(Une);sbo=r(yWr,"longformer"),yWr.forEach(t),lbo=r(J3e," \u2014 "),ZI=n(J3e,"A",{href:!0});var LWr=s(ZI);ibo=r(LWr,"LongformerForMaskedLM"),LWr.forEach(t),dbo=r(J3e," (Longformer model)"),J3e.forEach(t),cbo=i(V),Nu=n(V,"LI",{});var Y3e=s(Nu);Jne=n(Y3e,"STRONG",{});var xWr=s(Jne);fbo=r(xWr,"lxmert"),xWr.forEach(t),mbo=r(Y3e," \u2014 "),eq=n(Y3e,"A",{href:!0});var $Wr=s(eq);gbo=r($Wr,"LxmertForPreTraining"),$Wr.forEach(t),hbo=r(Y3e," (LXMERT model)"),Y3e.forEach(t),pbo=i(V),ju=n(V,"LI",{});var K3e=s(ju);Yne=n(K3e,"STRONG",{});var kWr=s(Yne);ubo=r(kWr,"megatron-bert"),kWr.forEach(t),_bo=r(K3e," \u2014 "),oq=n(K3e,"A",{href:!0});var SWr=s(oq);bbo=r(SWr,"MegatronBertForPreTraining"),SWr.forEach(t),vbo=r(K3e," (MegatronBert model)"),K3e.forEach(t),Fbo=i(V),Du=n(V,"LI",{});var Z3e=s(Du);Kne=n(Z3e,"STRONG",{});var RWr=s(Kne);Tbo=r(RWr,"mobilebert"),RWr.forEach(t),Mbo=r(Z3e," \u2014 "),rq=n(Z3e,"A",{href:!0});var BWr=s(rq);Ebo=r(BWr,"MobileBertForPreTraining"),BWr.forEach(t),Cbo=r(Z3e," (MobileBERT model)"),Z3e.forEach(t),wbo=i(V),Gu=n(V,"LI",{});var ewe=s(Gu);Zne=n(ewe,"STRONG",{});var PWr=s(Zne);Abo=r(PWr,"mpnet"),PWr.forEach(t),ybo=r(ewe," \u2014 "),tq=n(ewe,"A",{href:!0});var IWr=s(tq);Lbo=r(IWr,"MPNetForMaskedLM"),IWr.forEach(t),xbo=r(ewe," (MPNet model)"),ewe.forEach(t),$bo=i(V),Ou=n(V,"LI",{});var owe=s(Ou);ese=n(owe,"STRONG",{});var qWr=s(ese);kbo=r(qWr,"openai-gpt"),qWr.forEach(t),Sbo=r(owe," \u2014 "),aq=n(owe,"A",{href:!0});var NWr=s(aq);Rbo=r(NWr,"OpenAIGPTLMHeadModel"),NWr.forEach(t),Bbo=r(owe," (OpenAI GPT model)"),owe.forEach(t),Pbo=i(V),Vu=n(V,"LI",{});var rwe=s(Vu);ose=n(rwe,"STRONG",{});var jWr=s(ose);Ibo=r(jWr,"retribert"),jWr.forEach(t),qbo=r(rwe," \u2014 "),nq=n(rwe,"A",{href:!0});var DWr=s(nq);Nbo=r(DWr,"RetriBertModel"),DWr.forEach(t),jbo=r(rwe," (RetriBERT model)"),rwe.forEach(t),Dbo=i(V),Xu=n(V,"LI",{});var twe=s(Xu);rse=n(twe,"STRONG",{});var GWr=s(rse);Gbo=r(GWr,"roberta"),GWr.forEach(t),Obo=r(twe," \u2014 "),sq=n(twe,"A",{href:!0});var OWr=s(sq);Vbo=r(OWr,"RobertaForMaskedLM"),OWr.forEach(t),Xbo=r(twe," (RoBERTa model)"),twe.forEach(t),zbo=i(V),zu=n(V,"LI",{});var awe=s(zu);tse=n(awe,"STRONG",{});var VWr=s(tse);Qbo=r(VWr,"squeezebert"),VWr.forEach(t),Wbo=r(awe," \u2014 "),lq=n(awe,"A",{href:!0});var XWr=s(lq);Hbo=r(XWr,"SqueezeBertForMaskedLM"),XWr.forEach(t),Ubo=r(awe," (SqueezeBERT model)"),awe.forEach(t),Jbo=i(V),Qu=n(V,"LI",{});var nwe=s(Qu);ase=n(nwe,"STRONG",{});var zWr=s(ase);Ybo=r(zWr,"t5"),zWr.forEach(t),Kbo=r(nwe," \u2014 "),iq=n(nwe,"A",{href:!0});var QWr=s(iq);Zbo=r(QWr,"T5ForConditionalGeneration"),QWr.forEach(t),e2o=r(nwe," (T5 model)"),nwe.forEach(t),o2o=i(V),Wu=n(V,"LI",{});var swe=s(Wu);nse=n(swe,"STRONG",{});var WWr=s(nse);r2o=r(WWr,"tapas"),WWr.forEach(t),t2o=r(swe," \u2014 "),dq=n(swe,"A",{href:!0});var HWr=s(dq);a2o=r(HWr,"TapasForMaskedLM"),HWr.forEach(t),n2o=r(swe," (TAPAS model)"),swe.forEach(t),s2o=i(V),Hu=n(V,"LI",{});var lwe=s(Hu);sse=n(lwe,"STRONG",{});var UWr=s(sse);l2o=r(UWr,"transfo-xl"),UWr.forEach(t),i2o=r(lwe," \u2014 "),cq=n(lwe,"A",{href:!0});var JWr=s(cq);d2o=r(JWr,"TransfoXLLMHeadModel"),JWr.forEach(t),c2o=r(lwe," (Transformer-XL model)"),lwe.forEach(t),f2o=i(V),Uu=n(V,"LI",{});var iwe=s(Uu);lse=n(iwe,"STRONG",{});var YWr=s(lse);m2o=r(YWr,"unispeech"),YWr.forEach(t),g2o=r(iwe," \u2014 "),fq=n(iwe,"A",{href:!0});var KWr=s(fq);h2o=r(KWr,"UniSpeechForPreTraining"),KWr.forEach(t),p2o=r(iwe," (UniSpeech model)"),iwe.forEach(t),u2o=i(V),Ju=n(V,"LI",{});var dwe=s(Ju);ise=n(dwe,"STRONG",{});var ZWr=s(ise);_2o=r(ZWr,"unispeech-sat"),ZWr.forEach(t),b2o=r(dwe," \u2014 "),mq=n(dwe,"A",{href:!0});var eHr=s(mq);v2o=r(eHr,"UniSpeechSatForPreTraining"),eHr.forEach(t),F2o=r(dwe," (UniSpeechSat model)"),dwe.forEach(t),T2o=i(V),Yu=n(V,"LI",{});var cwe=s(Yu);dse=n(cwe,"STRONG",{});var oHr=s(dse);M2o=r(oHr,"visual_bert"),oHr.forEach(t),E2o=r(cwe," \u2014 "),gq=n(cwe,"A",{href:!0});var rHr=s(gq);C2o=r(rHr,"VisualBertForPreTraining"),rHr.forEach(t),w2o=r(cwe," (VisualBert model)"),cwe.forEach(t),A2o=i(V),Ku=n(V,"LI",{});var fwe=s(Ku);cse=n(fwe,"STRONG",{});var tHr=s(cse);y2o=r(tHr,"vit_mae"),tHr.forEach(t),L2o=r(fwe," \u2014 "),hq=n(fwe,"A",{href:!0});var aHr=s(hq);x2o=r(aHr,"ViTMAEForPreTraining"),aHr.forEach(t),$2o=r(fwe," (ViTMAE model)"),fwe.forEach(t),k2o=i(V),Zu=n(V,"LI",{});var mwe=s(Zu);fse=n(mwe,"STRONG",{});var nHr=s(fse);S2o=r(nHr,"wav2vec2"),nHr.forEach(t),R2o=r(mwe," \u2014 "),pq=n(mwe,"A",{href:!0});var sHr=s(pq);B2o=r(sHr,"Wav2Vec2ForPreTraining"),sHr.forEach(t),P2o=r(mwe," (Wav2Vec2 model)"),mwe.forEach(t),I2o=i(V),e_=n(V,"LI",{});var gwe=s(e_);mse=n(gwe,"STRONG",{});var lHr=s(mse);q2o=r(lHr,"xlm"),lHr.forEach(t),N2o=r(gwe," \u2014 "),uq=n(gwe,"A",{href:!0});var iHr=s(uq);j2o=r(iHr,"XLMWithLMHeadModel"),iHr.forEach(t),D2o=r(gwe," (XLM model)"),gwe.forEach(t),G2o=i(V),o_=n(V,"LI",{});var hwe=s(o_);gse=n(hwe,"STRONG",{});var dHr=s(gse);O2o=r(dHr,"xlm-roberta"),dHr.forEach(t),V2o=r(hwe," \u2014 "),_q=n(hwe,"A",{href:!0});var cHr=s(_q);X2o=r(cHr,"XLMRobertaForMaskedLM"),cHr.forEach(t),z2o=r(hwe," (XLM-RoBERTa model)"),hwe.forEach(t),Q2o=i(V),r_=n(V,"LI",{});var pwe=s(r_);hse=n(pwe,"STRONG",{});var fHr=s(hse);W2o=r(fHr,"xlm-roberta-xl"),fHr.forEach(t),H2o=r(pwe," \u2014 "),bq=n(pwe,"A",{href:!0});var mHr=s(bq);U2o=r(mHr,"XLMRobertaXLForMaskedLM"),mHr.forEach(t),J2o=r(pwe," (XLM-RoBERTa-XL model)"),pwe.forEach(t),Y2o=i(V),t_=n(V,"LI",{});var uwe=s(t_);pse=n(uwe,"STRONG",{});var gHr=s(pse);K2o=r(gHr,"xlnet"),gHr.forEach(t),Z2o=r(uwe," \u2014 "),vq=n(uwe,"A",{href:!0});var hHr=s(vq);e5o=r(hHr,"XLNetLMHeadModel"),hHr.forEach(t),o5o=r(uwe," (XLNet model)"),uwe.forEach(t),V.forEach(t),r5o=i(Jt),a_=n(Jt,"P",{});var _we=s(a_);t5o=r(_we,"The model is set in evaluation mode by default using "),use=n(_we,"CODE",{});var pHr=s(use);a5o=r(pHr,"model.eval()"),pHr.forEach(t),n5o=r(_we,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_se=n(_we,"CODE",{});var uHr=s(_se);s5o=r(uHr,"model.train()"),uHr.forEach(t),_we.forEach(t),l5o=i(Jt),T(n_.$$.fragment,Jt),Jt.forEach(t),Is.forEach(t),HRe=i(f),Ti=n(f,"H2",{class:!0});var JPe=s(Ti);s_=n(JPe,"A",{id:!0,class:!0,href:!0});var _Hr=s(s_);bse=n(_Hr,"SPAN",{});var bHr=s(bse);T(JA.$$.fragment,bHr),bHr.forEach(t),_Hr.forEach(t),i5o=i(JPe),vse=n(JPe,"SPAN",{});var vHr=s(vse);d5o=r(vHr,"AutoModelForCausalLM"),vHr.forEach(t),JPe.forEach(t),URe=i(f),Lo=n(f,"DIV",{class:!0});var qs=s(Lo);T(YA.$$.fragment,qs),c5o=i(qs),Mi=n(qs,"P",{});var KJ=s(Mi);f5o=r(KJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Fq=n(KJ,"A",{href:!0});var FHr=s(Fq);m5o=r(FHr,"from_pretrained()"),FHr.forEach(t),g5o=r(KJ," class method or the "),Tq=n(KJ,"A",{href:!0});var THr=s(Tq);h5o=r(THr,"from_config()"),THr.forEach(t),p5o=r(KJ,` class
method.`),KJ.forEach(t),u5o=i(qs),KA=n(qs,"P",{});var YPe=s(KA);_5o=r(YPe,"This class cannot be instantiated directly using "),Fse=n(YPe,"CODE",{});var MHr=s(Fse);b5o=r(MHr,"__init__()"),MHr.forEach(t),v5o=r(YPe," (throws an error)."),YPe.forEach(t),F5o=i(qs),et=n(qs,"DIV",{class:!0});var E3=s(et);T(ZA.$$.fragment,E3),T5o=i(E3),Tse=n(E3,"P",{});var EHr=s(Tse);M5o=r(EHr,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),EHr.forEach(t),E5o=i(E3),Ei=n(E3,"P",{});var ZJ=s(Ei);C5o=r(ZJ,`Note:
Loading a model from its configuration file does `),Mse=n(ZJ,"STRONG",{});var CHr=s(Mse);w5o=r(CHr,"not"),CHr.forEach(t),A5o=r(ZJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Mq=n(ZJ,"A",{href:!0});var wHr=s(Mq);y5o=r(wHr,"from_pretrained()"),wHr.forEach(t),L5o=r(ZJ," to load the model weights."),ZJ.forEach(t),x5o=i(E3),T(l_.$$.fragment,E3),E3.forEach(t),$5o=i(qs),He=n(qs,"DIV",{class:!0});var Yt=s(He);T(e0.$$.fragment,Yt),k5o=i(Yt),Ese=n(Yt,"P",{});var AHr=s(Ese);S5o=r(AHr,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),AHr.forEach(t),R5o=i(Yt),wa=n(Yt,"P",{});var C3=s(wa);B5o=r(C3,"The model class to instantiate is selected based on the "),Cse=n(C3,"CODE",{});var yHr=s(Cse);P5o=r(yHr,"model_type"),yHr.forEach(t),I5o=r(C3,` property of the config object (either
passed as an argument or loaded from `),wse=n(C3,"CODE",{});var LHr=s(wse);q5o=r(LHr,"pretrained_model_name_or_path"),LHr.forEach(t),N5o=r(C3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ase=n(C3,"CODE",{});var xHr=s(Ase);j5o=r(xHr,"pretrained_model_name_or_path"),xHr.forEach(t),D5o=r(C3,":"),C3.forEach(t),G5o=i(Yt),z=n(Yt,"UL",{});var W=s(z);i_=n(W,"LI",{});var bwe=s(i_);yse=n(bwe,"STRONG",{});var $Hr=s(yse);O5o=r($Hr,"bart"),$Hr.forEach(t),V5o=r(bwe," \u2014 "),Eq=n(bwe,"A",{href:!0});var kHr=s(Eq);X5o=r(kHr,"BartForCausalLM"),kHr.forEach(t),z5o=r(bwe," (BART model)"),bwe.forEach(t),Q5o=i(W),d_=n(W,"LI",{});var vwe=s(d_);Lse=n(vwe,"STRONG",{});var SHr=s(Lse);W5o=r(SHr,"bert"),SHr.forEach(t),H5o=r(vwe," \u2014 "),Cq=n(vwe,"A",{href:!0});var RHr=s(Cq);U5o=r(RHr,"BertLMHeadModel"),RHr.forEach(t),J5o=r(vwe," (BERT model)"),vwe.forEach(t),Y5o=i(W),c_=n(W,"LI",{});var Fwe=s(c_);xse=n(Fwe,"STRONG",{});var BHr=s(xse);K5o=r(BHr,"bert-generation"),BHr.forEach(t),Z5o=r(Fwe," \u2014 "),wq=n(Fwe,"A",{href:!0});var PHr=s(wq);evo=r(PHr,"BertGenerationDecoder"),PHr.forEach(t),ovo=r(Fwe," (Bert Generation model)"),Fwe.forEach(t),rvo=i(W),f_=n(W,"LI",{});var Twe=s(f_);$se=n(Twe,"STRONG",{});var IHr=s($se);tvo=r(IHr,"big_bird"),IHr.forEach(t),avo=r(Twe," \u2014 "),Aq=n(Twe,"A",{href:!0});var qHr=s(Aq);nvo=r(qHr,"BigBirdForCausalLM"),qHr.forEach(t),svo=r(Twe," (BigBird model)"),Twe.forEach(t),lvo=i(W),m_=n(W,"LI",{});var Mwe=s(m_);kse=n(Mwe,"STRONG",{});var NHr=s(kse);ivo=r(NHr,"bigbird_pegasus"),NHr.forEach(t),dvo=r(Mwe," \u2014 "),yq=n(Mwe,"A",{href:!0});var jHr=s(yq);cvo=r(jHr,"BigBirdPegasusForCausalLM"),jHr.forEach(t),fvo=r(Mwe," (BigBirdPegasus model)"),Mwe.forEach(t),mvo=i(W),g_=n(W,"LI",{});var Ewe=s(g_);Sse=n(Ewe,"STRONG",{});var DHr=s(Sse);gvo=r(DHr,"blenderbot"),DHr.forEach(t),hvo=r(Ewe," \u2014 "),Lq=n(Ewe,"A",{href:!0});var GHr=s(Lq);pvo=r(GHr,"BlenderbotForCausalLM"),GHr.forEach(t),uvo=r(Ewe," (Blenderbot model)"),Ewe.forEach(t),_vo=i(W),h_=n(W,"LI",{});var Cwe=s(h_);Rse=n(Cwe,"STRONG",{});var OHr=s(Rse);bvo=r(OHr,"blenderbot-small"),OHr.forEach(t),vvo=r(Cwe," \u2014 "),xq=n(Cwe,"A",{href:!0});var VHr=s(xq);Fvo=r(VHr,"BlenderbotSmallForCausalLM"),VHr.forEach(t),Tvo=r(Cwe," (BlenderbotSmall model)"),Cwe.forEach(t),Mvo=i(W),p_=n(W,"LI",{});var wwe=s(p_);Bse=n(wwe,"STRONG",{});var XHr=s(Bse);Evo=r(XHr,"camembert"),XHr.forEach(t),Cvo=r(wwe," \u2014 "),$q=n(wwe,"A",{href:!0});var zHr=s($q);wvo=r(zHr,"CamembertForCausalLM"),zHr.forEach(t),Avo=r(wwe," (CamemBERT model)"),wwe.forEach(t),yvo=i(W),u_=n(W,"LI",{});var Awe=s(u_);Pse=n(Awe,"STRONG",{});var QHr=s(Pse);Lvo=r(QHr,"ctrl"),QHr.forEach(t),xvo=r(Awe," \u2014 "),kq=n(Awe,"A",{href:!0});var WHr=s(kq);$vo=r(WHr,"CTRLLMHeadModel"),WHr.forEach(t),kvo=r(Awe," (CTRL model)"),Awe.forEach(t),Svo=i(W),__=n(W,"LI",{});var ywe=s(__);Ise=n(ywe,"STRONG",{});var HHr=s(Ise);Rvo=r(HHr,"data2vec-text"),HHr.forEach(t),Bvo=r(ywe," \u2014 "),Sq=n(ywe,"A",{href:!0});var UHr=s(Sq);Pvo=r(UHr,"Data2VecTextForCausalLM"),UHr.forEach(t),Ivo=r(ywe," (Data2VecText model)"),ywe.forEach(t),qvo=i(W),b_=n(W,"LI",{});var Lwe=s(b_);qse=n(Lwe,"STRONG",{});var JHr=s(qse);Nvo=r(JHr,"electra"),JHr.forEach(t),jvo=r(Lwe," \u2014 "),Rq=n(Lwe,"A",{href:!0});var YHr=s(Rq);Dvo=r(YHr,"ElectraForCausalLM"),YHr.forEach(t),Gvo=r(Lwe," (ELECTRA model)"),Lwe.forEach(t),Ovo=i(W),v_=n(W,"LI",{});var xwe=s(v_);Nse=n(xwe,"STRONG",{});var KHr=s(Nse);Vvo=r(KHr,"gpt2"),KHr.forEach(t),Xvo=r(xwe," \u2014 "),Bq=n(xwe,"A",{href:!0});var ZHr=s(Bq);zvo=r(ZHr,"GPT2LMHeadModel"),ZHr.forEach(t),Qvo=r(xwe," (OpenAI GPT-2 model)"),xwe.forEach(t),Wvo=i(W),F_=n(W,"LI",{});var $we=s(F_);jse=n($we,"STRONG",{});var eUr=s(jse);Hvo=r(eUr,"gpt_neo"),eUr.forEach(t),Uvo=r($we," \u2014 "),Pq=n($we,"A",{href:!0});var oUr=s(Pq);Jvo=r(oUr,"GPTNeoForCausalLM"),oUr.forEach(t),Yvo=r($we," (GPT Neo model)"),$we.forEach(t),Kvo=i(W),T_=n(W,"LI",{});var kwe=s(T_);Dse=n(kwe,"STRONG",{});var rUr=s(Dse);Zvo=r(rUr,"gptj"),rUr.forEach(t),eFo=r(kwe," \u2014 "),Iq=n(kwe,"A",{href:!0});var tUr=s(Iq);oFo=r(tUr,"GPTJForCausalLM"),tUr.forEach(t),rFo=r(kwe," (GPT-J model)"),kwe.forEach(t),tFo=i(W),M_=n(W,"LI",{});var Swe=s(M_);Gse=n(Swe,"STRONG",{});var aUr=s(Gse);aFo=r(aUr,"marian"),aUr.forEach(t),nFo=r(Swe," \u2014 "),qq=n(Swe,"A",{href:!0});var nUr=s(qq);sFo=r(nUr,"MarianForCausalLM"),nUr.forEach(t),lFo=r(Swe," (Marian model)"),Swe.forEach(t),iFo=i(W),E_=n(W,"LI",{});var Rwe=s(E_);Ose=n(Rwe,"STRONG",{});var sUr=s(Ose);dFo=r(sUr,"mbart"),sUr.forEach(t),cFo=r(Rwe," \u2014 "),Nq=n(Rwe,"A",{href:!0});var lUr=s(Nq);fFo=r(lUr,"MBartForCausalLM"),lUr.forEach(t),mFo=r(Rwe," (mBART model)"),Rwe.forEach(t),gFo=i(W),C_=n(W,"LI",{});var Bwe=s(C_);Vse=n(Bwe,"STRONG",{});var iUr=s(Vse);hFo=r(iUr,"megatron-bert"),iUr.forEach(t),pFo=r(Bwe," \u2014 "),jq=n(Bwe,"A",{href:!0});var dUr=s(jq);uFo=r(dUr,"MegatronBertForCausalLM"),dUr.forEach(t),_Fo=r(Bwe," (MegatronBert model)"),Bwe.forEach(t),bFo=i(W),w_=n(W,"LI",{});var Pwe=s(w_);Xse=n(Pwe,"STRONG",{});var cUr=s(Xse);vFo=r(cUr,"openai-gpt"),cUr.forEach(t),FFo=r(Pwe," \u2014 "),Dq=n(Pwe,"A",{href:!0});var fUr=s(Dq);TFo=r(fUr,"OpenAIGPTLMHeadModel"),fUr.forEach(t),MFo=r(Pwe," (OpenAI GPT model)"),Pwe.forEach(t),EFo=i(W),A_=n(W,"LI",{});var Iwe=s(A_);zse=n(Iwe,"STRONG",{});var mUr=s(zse);CFo=r(mUr,"pegasus"),mUr.forEach(t),wFo=r(Iwe," \u2014 "),Gq=n(Iwe,"A",{href:!0});var gUr=s(Gq);AFo=r(gUr,"PegasusForCausalLM"),gUr.forEach(t),yFo=r(Iwe," (Pegasus model)"),Iwe.forEach(t),LFo=i(W),y_=n(W,"LI",{});var qwe=s(y_);Qse=n(qwe,"STRONG",{});var hUr=s(Qse);xFo=r(hUr,"plbart"),hUr.forEach(t),$Fo=r(qwe," \u2014 "),Oq=n(qwe,"A",{href:!0});var pUr=s(Oq);kFo=r(pUr,"PLBartForCausalLM"),pUr.forEach(t),SFo=r(qwe," (PLBart model)"),qwe.forEach(t),RFo=i(W),L_=n(W,"LI",{});var Nwe=s(L_);Wse=n(Nwe,"STRONG",{});var uUr=s(Wse);BFo=r(uUr,"prophetnet"),uUr.forEach(t),PFo=r(Nwe," \u2014 "),Vq=n(Nwe,"A",{href:!0});var _Ur=s(Vq);IFo=r(_Ur,"ProphetNetForCausalLM"),_Ur.forEach(t),qFo=r(Nwe," (ProphetNet model)"),Nwe.forEach(t),NFo=i(W),x_=n(W,"LI",{});var jwe=s(x_);Hse=n(jwe,"STRONG",{});var bUr=s(Hse);jFo=r(bUr,"qdqbert"),bUr.forEach(t),DFo=r(jwe," \u2014 "),Xq=n(jwe,"A",{href:!0});var vUr=s(Xq);GFo=r(vUr,"QDQBertLMHeadModel"),vUr.forEach(t),OFo=r(jwe," (QDQBert model)"),jwe.forEach(t),VFo=i(W),$_=n(W,"LI",{});var Dwe=s($_);Use=n(Dwe,"STRONG",{});var FUr=s(Use);XFo=r(FUr,"reformer"),FUr.forEach(t),zFo=r(Dwe," \u2014 "),zq=n(Dwe,"A",{href:!0});var TUr=s(zq);QFo=r(TUr,"ReformerModelWithLMHead"),TUr.forEach(t),WFo=r(Dwe," (Reformer model)"),Dwe.forEach(t),HFo=i(W),k_=n(W,"LI",{});var Gwe=s(k_);Jse=n(Gwe,"STRONG",{});var MUr=s(Jse);UFo=r(MUr,"rembert"),MUr.forEach(t),JFo=r(Gwe," \u2014 "),Qq=n(Gwe,"A",{href:!0});var EUr=s(Qq);YFo=r(EUr,"RemBertForCausalLM"),EUr.forEach(t),KFo=r(Gwe," (RemBERT model)"),Gwe.forEach(t),ZFo=i(W),S_=n(W,"LI",{});var Owe=s(S_);Yse=n(Owe,"STRONG",{});var CUr=s(Yse);e6o=r(CUr,"roberta"),CUr.forEach(t),o6o=r(Owe," \u2014 "),Wq=n(Owe,"A",{href:!0});var wUr=s(Wq);r6o=r(wUr,"RobertaForCausalLM"),wUr.forEach(t),t6o=r(Owe," (RoBERTa model)"),Owe.forEach(t),a6o=i(W),R_=n(W,"LI",{});var Vwe=s(R_);Kse=n(Vwe,"STRONG",{});var AUr=s(Kse);n6o=r(AUr,"roformer"),AUr.forEach(t),s6o=r(Vwe," \u2014 "),Hq=n(Vwe,"A",{href:!0});var yUr=s(Hq);l6o=r(yUr,"RoFormerForCausalLM"),yUr.forEach(t),i6o=r(Vwe," (RoFormer model)"),Vwe.forEach(t),d6o=i(W),B_=n(W,"LI",{});var Xwe=s(B_);Zse=n(Xwe,"STRONG",{});var LUr=s(Zse);c6o=r(LUr,"speech_to_text_2"),LUr.forEach(t),f6o=r(Xwe," \u2014 "),Uq=n(Xwe,"A",{href:!0});var xUr=s(Uq);m6o=r(xUr,"Speech2Text2ForCausalLM"),xUr.forEach(t),g6o=r(Xwe," (Speech2Text2 model)"),Xwe.forEach(t),h6o=i(W),P_=n(W,"LI",{});var zwe=s(P_);ele=n(zwe,"STRONG",{});var $Ur=s(ele);p6o=r($Ur,"transfo-xl"),$Ur.forEach(t),u6o=r(zwe," \u2014 "),Jq=n(zwe,"A",{href:!0});var kUr=s(Jq);_6o=r(kUr,"TransfoXLLMHeadModel"),kUr.forEach(t),b6o=r(zwe," (Transformer-XL model)"),zwe.forEach(t),v6o=i(W),I_=n(W,"LI",{});var Qwe=s(I_);ole=n(Qwe,"STRONG",{});var SUr=s(ole);F6o=r(SUr,"trocr"),SUr.forEach(t),T6o=r(Qwe," \u2014 "),Yq=n(Qwe,"A",{href:!0});var RUr=s(Yq);M6o=r(RUr,"TrOCRForCausalLM"),RUr.forEach(t),E6o=r(Qwe," (TrOCR model)"),Qwe.forEach(t),C6o=i(W),q_=n(W,"LI",{});var Wwe=s(q_);rle=n(Wwe,"STRONG",{});var BUr=s(rle);w6o=r(BUr,"xglm"),BUr.forEach(t),A6o=r(Wwe," \u2014 "),Kq=n(Wwe,"A",{href:!0});var PUr=s(Kq);y6o=r(PUr,"XGLMForCausalLM"),PUr.forEach(t),L6o=r(Wwe," (XGLM model)"),Wwe.forEach(t),x6o=i(W),N_=n(W,"LI",{});var Hwe=s(N_);tle=n(Hwe,"STRONG",{});var IUr=s(tle);$6o=r(IUr,"xlm"),IUr.forEach(t),k6o=r(Hwe," \u2014 "),Zq=n(Hwe,"A",{href:!0});var qUr=s(Zq);S6o=r(qUr,"XLMWithLMHeadModel"),qUr.forEach(t),R6o=r(Hwe," (XLM model)"),Hwe.forEach(t),B6o=i(W),j_=n(W,"LI",{});var Uwe=s(j_);ale=n(Uwe,"STRONG",{});var NUr=s(ale);P6o=r(NUr,"xlm-prophetnet"),NUr.forEach(t),I6o=r(Uwe," \u2014 "),eN=n(Uwe,"A",{href:!0});var jUr=s(eN);q6o=r(jUr,"XLMProphetNetForCausalLM"),jUr.forEach(t),N6o=r(Uwe," (XLMProphetNet model)"),Uwe.forEach(t),j6o=i(W),D_=n(W,"LI",{});var Jwe=s(D_);nle=n(Jwe,"STRONG",{});var DUr=s(nle);D6o=r(DUr,"xlm-roberta"),DUr.forEach(t),G6o=r(Jwe," \u2014 "),oN=n(Jwe,"A",{href:!0});var GUr=s(oN);O6o=r(GUr,"XLMRobertaForCausalLM"),GUr.forEach(t),V6o=r(Jwe," (XLM-RoBERTa model)"),Jwe.forEach(t),X6o=i(W),G_=n(W,"LI",{});var Ywe=s(G_);sle=n(Ywe,"STRONG",{});var OUr=s(sle);z6o=r(OUr,"xlm-roberta-xl"),OUr.forEach(t),Q6o=r(Ywe," \u2014 "),rN=n(Ywe,"A",{href:!0});var VUr=s(rN);W6o=r(VUr,"XLMRobertaXLForCausalLM"),VUr.forEach(t),H6o=r(Ywe," (XLM-RoBERTa-XL model)"),Ywe.forEach(t),U6o=i(W),O_=n(W,"LI",{});var Kwe=s(O_);lle=n(Kwe,"STRONG",{});var XUr=s(lle);J6o=r(XUr,"xlnet"),XUr.forEach(t),Y6o=r(Kwe," \u2014 "),tN=n(Kwe,"A",{href:!0});var zUr=s(tN);K6o=r(zUr,"XLNetLMHeadModel"),zUr.forEach(t),Z6o=r(Kwe," (XLNet model)"),Kwe.forEach(t),W.forEach(t),eTo=i(Yt),V_=n(Yt,"P",{});var Zwe=s(V_);oTo=r(Zwe,"The model is set in evaluation mode by default using "),ile=n(Zwe,"CODE",{});var QUr=s(ile);rTo=r(QUr,"model.eval()"),QUr.forEach(t),tTo=r(Zwe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),dle=n(Zwe,"CODE",{});var WUr=s(dle);aTo=r(WUr,"model.train()"),WUr.forEach(t),Zwe.forEach(t),nTo=i(Yt),T(X_.$$.fragment,Yt),Yt.forEach(t),qs.forEach(t),JRe=i(f),Ci=n(f,"H2",{class:!0});var KPe=s(Ci);z_=n(KPe,"A",{id:!0,class:!0,href:!0});var HUr=s(z_);cle=n(HUr,"SPAN",{});var UUr=s(cle);T(o0.$$.fragment,UUr),UUr.forEach(t),HUr.forEach(t),sTo=i(KPe),fle=n(KPe,"SPAN",{});var JUr=s(fle);lTo=r(JUr,"AutoModelForMaskedLM"),JUr.forEach(t),KPe.forEach(t),YRe=i(f),xo=n(f,"DIV",{class:!0});var Ns=s(xo);T(r0.$$.fragment,Ns),iTo=i(Ns),wi=n(Ns,"P",{});var eY=s(wi);dTo=r(eY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),aN=n(eY,"A",{href:!0});var YUr=s(aN);cTo=r(YUr,"from_pretrained()"),YUr.forEach(t),fTo=r(eY," class method or the "),nN=n(eY,"A",{href:!0});var KUr=s(nN);mTo=r(KUr,"from_config()"),KUr.forEach(t),gTo=r(eY,` class
method.`),eY.forEach(t),hTo=i(Ns),t0=n(Ns,"P",{});var ZPe=s(t0);pTo=r(ZPe,"This class cannot be instantiated directly using "),mle=n(ZPe,"CODE",{});var ZUr=s(mle);uTo=r(ZUr,"__init__()"),ZUr.forEach(t),_To=r(ZPe," (throws an error)."),ZPe.forEach(t),bTo=i(Ns),ot=n(Ns,"DIV",{class:!0});var w3=s(ot);T(a0.$$.fragment,w3),vTo=i(w3),gle=n(w3,"P",{});var eJr=s(gle);FTo=r(eJr,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),eJr.forEach(t),TTo=i(w3),Ai=n(w3,"P",{});var oY=s(Ai);MTo=r(oY,`Note:
Loading a model from its configuration file does `),hle=n(oY,"STRONG",{});var oJr=s(hle);ETo=r(oJr,"not"),oJr.forEach(t),CTo=r(oY,` load the model weights. It only affects the
model\u2019s configuration. Use `),sN=n(oY,"A",{href:!0});var rJr=s(sN);wTo=r(rJr,"from_pretrained()"),rJr.forEach(t),ATo=r(oY," to load the model weights."),oY.forEach(t),yTo=i(w3),T(Q_.$$.fragment,w3),w3.forEach(t),LTo=i(Ns),Ue=n(Ns,"DIV",{class:!0});var Kt=s(Ue);T(n0.$$.fragment,Kt),xTo=i(Kt),ple=n(Kt,"P",{});var tJr=s(ple);$To=r(tJr,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),tJr.forEach(t),kTo=i(Kt),Aa=n(Kt,"P",{});var A3=s(Aa);STo=r(A3,"The model class to instantiate is selected based on the "),ule=n(A3,"CODE",{});var aJr=s(ule);RTo=r(aJr,"model_type"),aJr.forEach(t),BTo=r(A3,` property of the config object (either
passed as an argument or loaded from `),_le=n(A3,"CODE",{});var nJr=s(_le);PTo=r(nJr,"pretrained_model_name_or_path"),nJr.forEach(t),ITo=r(A3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ble=n(A3,"CODE",{});var sJr=s(ble);qTo=r(sJr,"pretrained_model_name_or_path"),sJr.forEach(t),NTo=r(A3,":"),A3.forEach(t),jTo=i(Kt),Q=n(Kt,"UL",{});var H=s(Q);W_=n(H,"LI",{});var eAe=s(W_);vle=n(eAe,"STRONG",{});var lJr=s(vle);DTo=r(lJr,"albert"),lJr.forEach(t),GTo=r(eAe," \u2014 "),lN=n(eAe,"A",{href:!0});var iJr=s(lN);OTo=r(iJr,"AlbertForMaskedLM"),iJr.forEach(t),VTo=r(eAe," (ALBERT model)"),eAe.forEach(t),XTo=i(H),H_=n(H,"LI",{});var oAe=s(H_);Fle=n(oAe,"STRONG",{});var dJr=s(Fle);zTo=r(dJr,"bart"),dJr.forEach(t),QTo=r(oAe," \u2014 "),iN=n(oAe,"A",{href:!0});var cJr=s(iN);WTo=r(cJr,"BartForConditionalGeneration"),cJr.forEach(t),HTo=r(oAe," (BART model)"),oAe.forEach(t),UTo=i(H),U_=n(H,"LI",{});var rAe=s(U_);Tle=n(rAe,"STRONG",{});var fJr=s(Tle);JTo=r(fJr,"bert"),fJr.forEach(t),YTo=r(rAe," \u2014 "),dN=n(rAe,"A",{href:!0});var mJr=s(dN);KTo=r(mJr,"BertForMaskedLM"),mJr.forEach(t),ZTo=r(rAe," (BERT model)"),rAe.forEach(t),eMo=i(H),J_=n(H,"LI",{});var tAe=s(J_);Mle=n(tAe,"STRONG",{});var gJr=s(Mle);oMo=r(gJr,"big_bird"),gJr.forEach(t),rMo=r(tAe," \u2014 "),cN=n(tAe,"A",{href:!0});var hJr=s(cN);tMo=r(hJr,"BigBirdForMaskedLM"),hJr.forEach(t),aMo=r(tAe," (BigBird model)"),tAe.forEach(t),nMo=i(H),Y_=n(H,"LI",{});var aAe=s(Y_);Ele=n(aAe,"STRONG",{});var pJr=s(Ele);sMo=r(pJr,"camembert"),pJr.forEach(t),lMo=r(aAe," \u2014 "),fN=n(aAe,"A",{href:!0});var uJr=s(fN);iMo=r(uJr,"CamembertForMaskedLM"),uJr.forEach(t),dMo=r(aAe," (CamemBERT model)"),aAe.forEach(t),cMo=i(H),K_=n(H,"LI",{});var nAe=s(K_);Cle=n(nAe,"STRONG",{});var _Jr=s(Cle);fMo=r(_Jr,"convbert"),_Jr.forEach(t),mMo=r(nAe," \u2014 "),mN=n(nAe,"A",{href:!0});var bJr=s(mN);gMo=r(bJr,"ConvBertForMaskedLM"),bJr.forEach(t),hMo=r(nAe," (ConvBERT model)"),nAe.forEach(t),pMo=i(H),Z_=n(H,"LI",{});var sAe=s(Z_);wle=n(sAe,"STRONG",{});var vJr=s(wle);uMo=r(vJr,"data2vec-text"),vJr.forEach(t),_Mo=r(sAe," \u2014 "),gN=n(sAe,"A",{href:!0});var FJr=s(gN);bMo=r(FJr,"Data2VecTextForMaskedLM"),FJr.forEach(t),vMo=r(sAe," (Data2VecText model)"),sAe.forEach(t),FMo=i(H),e1=n(H,"LI",{});var lAe=s(e1);Ale=n(lAe,"STRONG",{});var TJr=s(Ale);TMo=r(TJr,"deberta"),TJr.forEach(t),MMo=r(lAe," \u2014 "),hN=n(lAe,"A",{href:!0});var MJr=s(hN);EMo=r(MJr,"DebertaForMaskedLM"),MJr.forEach(t),CMo=r(lAe," (DeBERTa model)"),lAe.forEach(t),wMo=i(H),o1=n(H,"LI",{});var iAe=s(o1);yle=n(iAe,"STRONG",{});var EJr=s(yle);AMo=r(EJr,"deberta-v2"),EJr.forEach(t),yMo=r(iAe," \u2014 "),pN=n(iAe,"A",{href:!0});var CJr=s(pN);LMo=r(CJr,"DebertaV2ForMaskedLM"),CJr.forEach(t),xMo=r(iAe," (DeBERTa-v2 model)"),iAe.forEach(t),$Mo=i(H),r1=n(H,"LI",{});var dAe=s(r1);Lle=n(dAe,"STRONG",{});var wJr=s(Lle);kMo=r(wJr,"distilbert"),wJr.forEach(t),SMo=r(dAe," \u2014 "),uN=n(dAe,"A",{href:!0});var AJr=s(uN);RMo=r(AJr,"DistilBertForMaskedLM"),AJr.forEach(t),BMo=r(dAe," (DistilBERT model)"),dAe.forEach(t),PMo=i(H),t1=n(H,"LI",{});var cAe=s(t1);xle=n(cAe,"STRONG",{});var yJr=s(xle);IMo=r(yJr,"electra"),yJr.forEach(t),qMo=r(cAe," \u2014 "),_N=n(cAe,"A",{href:!0});var LJr=s(_N);NMo=r(LJr,"ElectraForMaskedLM"),LJr.forEach(t),jMo=r(cAe," (ELECTRA model)"),cAe.forEach(t),DMo=i(H),a1=n(H,"LI",{});var fAe=s(a1);$le=n(fAe,"STRONG",{});var xJr=s($le);GMo=r(xJr,"flaubert"),xJr.forEach(t),OMo=r(fAe," \u2014 "),bN=n(fAe,"A",{href:!0});var $Jr=s(bN);VMo=r($Jr,"FlaubertWithLMHeadModel"),$Jr.forEach(t),XMo=r(fAe," (FlauBERT model)"),fAe.forEach(t),zMo=i(H),n1=n(H,"LI",{});var mAe=s(n1);kle=n(mAe,"STRONG",{});var kJr=s(kle);QMo=r(kJr,"fnet"),kJr.forEach(t),WMo=r(mAe," \u2014 "),vN=n(mAe,"A",{href:!0});var SJr=s(vN);HMo=r(SJr,"FNetForMaskedLM"),SJr.forEach(t),UMo=r(mAe," (FNet model)"),mAe.forEach(t),JMo=i(H),s1=n(H,"LI",{});var gAe=s(s1);Sle=n(gAe,"STRONG",{});var RJr=s(Sle);YMo=r(RJr,"funnel"),RJr.forEach(t),KMo=r(gAe," \u2014 "),FN=n(gAe,"A",{href:!0});var BJr=s(FN);ZMo=r(BJr,"FunnelForMaskedLM"),BJr.forEach(t),e4o=r(gAe," (Funnel Transformer model)"),gAe.forEach(t),o4o=i(H),l1=n(H,"LI",{});var hAe=s(l1);Rle=n(hAe,"STRONG",{});var PJr=s(Rle);r4o=r(PJr,"ibert"),PJr.forEach(t),t4o=r(hAe," \u2014 "),TN=n(hAe,"A",{href:!0});var IJr=s(TN);a4o=r(IJr,"IBertForMaskedLM"),IJr.forEach(t),n4o=r(hAe," (I-BERT model)"),hAe.forEach(t),s4o=i(H),i1=n(H,"LI",{});var pAe=s(i1);Ble=n(pAe,"STRONG",{});var qJr=s(Ble);l4o=r(qJr,"layoutlm"),qJr.forEach(t),i4o=r(pAe," \u2014 "),MN=n(pAe,"A",{href:!0});var NJr=s(MN);d4o=r(NJr,"LayoutLMForMaskedLM"),NJr.forEach(t),c4o=r(pAe," (LayoutLM model)"),pAe.forEach(t),f4o=i(H),d1=n(H,"LI",{});var uAe=s(d1);Ple=n(uAe,"STRONG",{});var jJr=s(Ple);m4o=r(jJr,"longformer"),jJr.forEach(t),g4o=r(uAe," \u2014 "),EN=n(uAe,"A",{href:!0});var DJr=s(EN);h4o=r(DJr,"LongformerForMaskedLM"),DJr.forEach(t),p4o=r(uAe," (Longformer model)"),uAe.forEach(t),u4o=i(H),c1=n(H,"LI",{});var _Ae=s(c1);Ile=n(_Ae,"STRONG",{});var GJr=s(Ile);_4o=r(GJr,"mbart"),GJr.forEach(t),b4o=r(_Ae," \u2014 "),CN=n(_Ae,"A",{href:!0});var OJr=s(CN);v4o=r(OJr,"MBartForConditionalGeneration"),OJr.forEach(t),F4o=r(_Ae," (mBART model)"),_Ae.forEach(t),T4o=i(H),f1=n(H,"LI",{});var bAe=s(f1);qle=n(bAe,"STRONG",{});var VJr=s(qle);M4o=r(VJr,"megatron-bert"),VJr.forEach(t),E4o=r(bAe," \u2014 "),wN=n(bAe,"A",{href:!0});var XJr=s(wN);C4o=r(XJr,"MegatronBertForMaskedLM"),XJr.forEach(t),w4o=r(bAe," (MegatronBert model)"),bAe.forEach(t),A4o=i(H),m1=n(H,"LI",{});var vAe=s(m1);Nle=n(vAe,"STRONG",{});var zJr=s(Nle);y4o=r(zJr,"mobilebert"),zJr.forEach(t),L4o=r(vAe," \u2014 "),AN=n(vAe,"A",{href:!0});var QJr=s(AN);x4o=r(QJr,"MobileBertForMaskedLM"),QJr.forEach(t),$4o=r(vAe," (MobileBERT model)"),vAe.forEach(t),k4o=i(H),g1=n(H,"LI",{});var FAe=s(g1);jle=n(FAe,"STRONG",{});var WJr=s(jle);S4o=r(WJr,"mpnet"),WJr.forEach(t),R4o=r(FAe," \u2014 "),yN=n(FAe,"A",{href:!0});var HJr=s(yN);B4o=r(HJr,"MPNetForMaskedLM"),HJr.forEach(t),P4o=r(FAe," (MPNet model)"),FAe.forEach(t),I4o=i(H),h1=n(H,"LI",{});var TAe=s(h1);Dle=n(TAe,"STRONG",{});var UJr=s(Dle);q4o=r(UJr,"nystromformer"),UJr.forEach(t),N4o=r(TAe," \u2014 "),LN=n(TAe,"A",{href:!0});var JJr=s(LN);j4o=r(JJr,"NystromformerForMaskedLM"),JJr.forEach(t),D4o=r(TAe," (Nystromformer model)"),TAe.forEach(t),G4o=i(H),p1=n(H,"LI",{});var MAe=s(p1);Gle=n(MAe,"STRONG",{});var YJr=s(Gle);O4o=r(YJr,"perceiver"),YJr.forEach(t),V4o=r(MAe," \u2014 "),xN=n(MAe,"A",{href:!0});var KJr=s(xN);X4o=r(KJr,"PerceiverForMaskedLM"),KJr.forEach(t),z4o=r(MAe," (Perceiver model)"),MAe.forEach(t),Q4o=i(H),u1=n(H,"LI",{});var EAe=s(u1);Ole=n(EAe,"STRONG",{});var ZJr=s(Ole);W4o=r(ZJr,"qdqbert"),ZJr.forEach(t),H4o=r(EAe," \u2014 "),$N=n(EAe,"A",{href:!0});var eYr=s($N);U4o=r(eYr,"QDQBertForMaskedLM"),eYr.forEach(t),J4o=r(EAe," (QDQBert model)"),EAe.forEach(t),Y4o=i(H),_1=n(H,"LI",{});var CAe=s(_1);Vle=n(CAe,"STRONG",{});var oYr=s(Vle);K4o=r(oYr,"reformer"),oYr.forEach(t),Z4o=r(CAe," \u2014 "),kN=n(CAe,"A",{href:!0});var rYr=s(kN);eEo=r(rYr,"ReformerForMaskedLM"),rYr.forEach(t),oEo=r(CAe," (Reformer model)"),CAe.forEach(t),rEo=i(H),b1=n(H,"LI",{});var wAe=s(b1);Xle=n(wAe,"STRONG",{});var tYr=s(Xle);tEo=r(tYr,"rembert"),tYr.forEach(t),aEo=r(wAe," \u2014 "),SN=n(wAe,"A",{href:!0});var aYr=s(SN);nEo=r(aYr,"RemBertForMaskedLM"),aYr.forEach(t),sEo=r(wAe," (RemBERT model)"),wAe.forEach(t),lEo=i(H),v1=n(H,"LI",{});var AAe=s(v1);zle=n(AAe,"STRONG",{});var nYr=s(zle);iEo=r(nYr,"roberta"),nYr.forEach(t),dEo=r(AAe," \u2014 "),RN=n(AAe,"A",{href:!0});var sYr=s(RN);cEo=r(sYr,"RobertaForMaskedLM"),sYr.forEach(t),fEo=r(AAe," (RoBERTa model)"),AAe.forEach(t),mEo=i(H),F1=n(H,"LI",{});var yAe=s(F1);Qle=n(yAe,"STRONG",{});var lYr=s(Qle);gEo=r(lYr,"roformer"),lYr.forEach(t),hEo=r(yAe," \u2014 "),BN=n(yAe,"A",{href:!0});var iYr=s(BN);pEo=r(iYr,"RoFormerForMaskedLM"),iYr.forEach(t),uEo=r(yAe," (RoFormer model)"),yAe.forEach(t),_Eo=i(H),T1=n(H,"LI",{});var LAe=s(T1);Wle=n(LAe,"STRONG",{});var dYr=s(Wle);bEo=r(dYr,"squeezebert"),dYr.forEach(t),vEo=r(LAe," \u2014 "),PN=n(LAe,"A",{href:!0});var cYr=s(PN);FEo=r(cYr,"SqueezeBertForMaskedLM"),cYr.forEach(t),TEo=r(LAe," (SqueezeBERT model)"),LAe.forEach(t),MEo=i(H),M1=n(H,"LI",{});var xAe=s(M1);Hle=n(xAe,"STRONG",{});var fYr=s(Hle);EEo=r(fYr,"tapas"),fYr.forEach(t),CEo=r(xAe," \u2014 "),IN=n(xAe,"A",{href:!0});var mYr=s(IN);wEo=r(mYr,"TapasForMaskedLM"),mYr.forEach(t),AEo=r(xAe," (TAPAS model)"),xAe.forEach(t),yEo=i(H),E1=n(H,"LI",{});var $Ae=s(E1);Ule=n($Ae,"STRONG",{});var gYr=s(Ule);LEo=r(gYr,"wav2vec2"),gYr.forEach(t),xEo=r($Ae," \u2014 "),Jle=n($Ae,"CODE",{});var hYr=s(Jle);$Eo=r(hYr,"Wav2Vec2ForMaskedLM"),hYr.forEach(t),kEo=r($Ae," (Wav2Vec2 model)"),$Ae.forEach(t),SEo=i(H),C1=n(H,"LI",{});var kAe=s(C1);Yle=n(kAe,"STRONG",{});var pYr=s(Yle);REo=r(pYr,"xlm"),pYr.forEach(t),BEo=r(kAe," \u2014 "),qN=n(kAe,"A",{href:!0});var uYr=s(qN);PEo=r(uYr,"XLMWithLMHeadModel"),uYr.forEach(t),IEo=r(kAe," (XLM model)"),kAe.forEach(t),qEo=i(H),w1=n(H,"LI",{});var SAe=s(w1);Kle=n(SAe,"STRONG",{});var _Yr=s(Kle);NEo=r(_Yr,"xlm-roberta"),_Yr.forEach(t),jEo=r(SAe," \u2014 "),NN=n(SAe,"A",{href:!0});var bYr=s(NN);DEo=r(bYr,"XLMRobertaForMaskedLM"),bYr.forEach(t),GEo=r(SAe," (XLM-RoBERTa model)"),SAe.forEach(t),OEo=i(H),A1=n(H,"LI",{});var RAe=s(A1);Zle=n(RAe,"STRONG",{});var vYr=s(Zle);VEo=r(vYr,"xlm-roberta-xl"),vYr.forEach(t),XEo=r(RAe," \u2014 "),jN=n(RAe,"A",{href:!0});var FYr=s(jN);zEo=r(FYr,"XLMRobertaXLForMaskedLM"),FYr.forEach(t),QEo=r(RAe," (XLM-RoBERTa-XL model)"),RAe.forEach(t),WEo=i(H),y1=n(H,"LI",{});var BAe=s(y1);eie=n(BAe,"STRONG",{});var TYr=s(eie);HEo=r(TYr,"yoso"),TYr.forEach(t),UEo=r(BAe," \u2014 "),DN=n(BAe,"A",{href:!0});var MYr=s(DN);JEo=r(MYr,"YosoForMaskedLM"),MYr.forEach(t),YEo=r(BAe," (YOSO model)"),BAe.forEach(t),H.forEach(t),KEo=i(Kt),L1=n(Kt,"P",{});var PAe=s(L1);ZEo=r(PAe,"The model is set in evaluation mode by default using "),oie=n(PAe,"CODE",{});var EYr=s(oie);eCo=r(EYr,"model.eval()"),EYr.forEach(t),oCo=r(PAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),rie=n(PAe,"CODE",{});var CYr=s(rie);rCo=r(CYr,"model.train()"),CYr.forEach(t),PAe.forEach(t),tCo=i(Kt),T(x1.$$.fragment,Kt),Kt.forEach(t),Ns.forEach(t),KRe=i(f),yi=n(f,"H2",{class:!0});var eIe=s(yi);$1=n(eIe,"A",{id:!0,class:!0,href:!0});var wYr=s($1);tie=n(wYr,"SPAN",{});var AYr=s(tie);T(s0.$$.fragment,AYr),AYr.forEach(t),wYr.forEach(t),aCo=i(eIe),aie=n(eIe,"SPAN",{});var yYr=s(aie);nCo=r(yYr,"AutoModelForSeq2SeqLM"),yYr.forEach(t),eIe.forEach(t),ZRe=i(f),$o=n(f,"DIV",{class:!0});var js=s($o);T(l0.$$.fragment,js),sCo=i(js),Li=n(js,"P",{});var rY=s(Li);lCo=r(rY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),GN=n(rY,"A",{href:!0});var LYr=s(GN);iCo=r(LYr,"from_pretrained()"),LYr.forEach(t),dCo=r(rY," class method or the "),ON=n(rY,"A",{href:!0});var xYr=s(ON);cCo=r(xYr,"from_config()"),xYr.forEach(t),fCo=r(rY,` class
method.`),rY.forEach(t),mCo=i(js),i0=n(js,"P",{});var oIe=s(i0);gCo=r(oIe,"This class cannot be instantiated directly using "),nie=n(oIe,"CODE",{});var $Yr=s(nie);hCo=r($Yr,"__init__()"),$Yr.forEach(t),pCo=r(oIe," (throws an error)."),oIe.forEach(t),uCo=i(js),rt=n(js,"DIV",{class:!0});var y3=s(rt);T(d0.$$.fragment,y3),_Co=i(y3),sie=n(y3,"P",{});var kYr=s(sie);bCo=r(kYr,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),kYr.forEach(t),vCo=i(y3),xi=n(y3,"P",{});var tY=s(xi);FCo=r(tY,`Note:
Loading a model from its configuration file does `),lie=n(tY,"STRONG",{});var SYr=s(lie);TCo=r(SYr,"not"),SYr.forEach(t),MCo=r(tY,` load the model weights. It only affects the
model\u2019s configuration. Use `),VN=n(tY,"A",{href:!0});var RYr=s(VN);ECo=r(RYr,"from_pretrained()"),RYr.forEach(t),CCo=r(tY," to load the model weights."),tY.forEach(t),wCo=i(y3),T(k1.$$.fragment,y3),y3.forEach(t),ACo=i(js),Je=n(js,"DIV",{class:!0});var Zt=s(Je);T(c0.$$.fragment,Zt),yCo=i(Zt),iie=n(Zt,"P",{});var BYr=s(iie);LCo=r(BYr,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),BYr.forEach(t),xCo=i(Zt),ya=n(Zt,"P",{});var L3=s(ya);$Co=r(L3,"The model class to instantiate is selected based on the "),die=n(L3,"CODE",{});var PYr=s(die);kCo=r(PYr,"model_type"),PYr.forEach(t),SCo=r(L3,` property of the config object (either
passed as an argument or loaded from `),cie=n(L3,"CODE",{});var IYr=s(cie);RCo=r(IYr,"pretrained_model_name_or_path"),IYr.forEach(t),BCo=r(L3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fie=n(L3,"CODE",{});var qYr=s(fie);PCo=r(qYr,"pretrained_model_name_or_path"),qYr.forEach(t),ICo=r(L3,":"),L3.forEach(t),qCo=i(Zt),he=n(Zt,"UL",{});var ue=s(he);S1=n(ue,"LI",{});var IAe=s(S1);mie=n(IAe,"STRONG",{});var NYr=s(mie);NCo=r(NYr,"bart"),NYr.forEach(t),jCo=r(IAe," \u2014 "),XN=n(IAe,"A",{href:!0});var jYr=s(XN);DCo=r(jYr,"BartForConditionalGeneration"),jYr.forEach(t),GCo=r(IAe," (BART model)"),IAe.forEach(t),OCo=i(ue),R1=n(ue,"LI",{});var qAe=s(R1);gie=n(qAe,"STRONG",{});var DYr=s(gie);VCo=r(DYr,"bigbird_pegasus"),DYr.forEach(t),XCo=r(qAe," \u2014 "),zN=n(qAe,"A",{href:!0});var GYr=s(zN);zCo=r(GYr,"BigBirdPegasusForConditionalGeneration"),GYr.forEach(t),QCo=r(qAe," (BigBirdPegasus model)"),qAe.forEach(t),WCo=i(ue),B1=n(ue,"LI",{});var NAe=s(B1);hie=n(NAe,"STRONG",{});var OYr=s(hie);HCo=r(OYr,"blenderbot"),OYr.forEach(t),UCo=r(NAe," \u2014 "),QN=n(NAe,"A",{href:!0});var VYr=s(QN);JCo=r(VYr,"BlenderbotForConditionalGeneration"),VYr.forEach(t),YCo=r(NAe," (Blenderbot model)"),NAe.forEach(t),KCo=i(ue),P1=n(ue,"LI",{});var jAe=s(P1);pie=n(jAe,"STRONG",{});var XYr=s(pie);ZCo=r(XYr,"blenderbot-small"),XYr.forEach(t),e3o=r(jAe," \u2014 "),WN=n(jAe,"A",{href:!0});var zYr=s(WN);o3o=r(zYr,"BlenderbotSmallForConditionalGeneration"),zYr.forEach(t),r3o=r(jAe," (BlenderbotSmall model)"),jAe.forEach(t),t3o=i(ue),I1=n(ue,"LI",{});var DAe=s(I1);uie=n(DAe,"STRONG",{});var QYr=s(uie);a3o=r(QYr,"encoder-decoder"),QYr.forEach(t),n3o=r(DAe," \u2014 "),HN=n(DAe,"A",{href:!0});var WYr=s(HN);s3o=r(WYr,"EncoderDecoderModel"),WYr.forEach(t),l3o=r(DAe," (Encoder decoder model)"),DAe.forEach(t),i3o=i(ue),q1=n(ue,"LI",{});var GAe=s(q1);_ie=n(GAe,"STRONG",{});var HYr=s(_ie);d3o=r(HYr,"fsmt"),HYr.forEach(t),c3o=r(GAe," \u2014 "),UN=n(GAe,"A",{href:!0});var UYr=s(UN);f3o=r(UYr,"FSMTForConditionalGeneration"),UYr.forEach(t),m3o=r(GAe," (FairSeq Machine-Translation model)"),GAe.forEach(t),g3o=i(ue),N1=n(ue,"LI",{});var OAe=s(N1);bie=n(OAe,"STRONG",{});var JYr=s(bie);h3o=r(JYr,"led"),JYr.forEach(t),p3o=r(OAe," \u2014 "),JN=n(OAe,"A",{href:!0});var YYr=s(JN);u3o=r(YYr,"LEDForConditionalGeneration"),YYr.forEach(t),_3o=r(OAe," (LED model)"),OAe.forEach(t),b3o=i(ue),j1=n(ue,"LI",{});var VAe=s(j1);vie=n(VAe,"STRONG",{});var KYr=s(vie);v3o=r(KYr,"m2m_100"),KYr.forEach(t),F3o=r(VAe," \u2014 "),YN=n(VAe,"A",{href:!0});var ZYr=s(YN);T3o=r(ZYr,"M2M100ForConditionalGeneration"),ZYr.forEach(t),M3o=r(VAe," (M2M100 model)"),VAe.forEach(t),E3o=i(ue),D1=n(ue,"LI",{});var XAe=s(D1);Fie=n(XAe,"STRONG",{});var eKr=s(Fie);C3o=r(eKr,"marian"),eKr.forEach(t),w3o=r(XAe," \u2014 "),KN=n(XAe,"A",{href:!0});var oKr=s(KN);A3o=r(oKr,"MarianMTModel"),oKr.forEach(t),y3o=r(XAe," (Marian model)"),XAe.forEach(t),L3o=i(ue),G1=n(ue,"LI",{});var zAe=s(G1);Tie=n(zAe,"STRONG",{});var rKr=s(Tie);x3o=r(rKr,"mbart"),rKr.forEach(t),$3o=r(zAe," \u2014 "),ZN=n(zAe,"A",{href:!0});var tKr=s(ZN);k3o=r(tKr,"MBartForConditionalGeneration"),tKr.forEach(t),S3o=r(zAe," (mBART model)"),zAe.forEach(t),R3o=i(ue),O1=n(ue,"LI",{});var QAe=s(O1);Mie=n(QAe,"STRONG",{});var aKr=s(Mie);B3o=r(aKr,"mt5"),aKr.forEach(t),P3o=r(QAe," \u2014 "),ej=n(QAe,"A",{href:!0});var nKr=s(ej);I3o=r(nKr,"MT5ForConditionalGeneration"),nKr.forEach(t),q3o=r(QAe," (mT5 model)"),QAe.forEach(t),N3o=i(ue),V1=n(ue,"LI",{});var WAe=s(V1);Eie=n(WAe,"STRONG",{});var sKr=s(Eie);j3o=r(sKr,"pegasus"),sKr.forEach(t),D3o=r(WAe," \u2014 "),oj=n(WAe,"A",{href:!0});var lKr=s(oj);G3o=r(lKr,"PegasusForConditionalGeneration"),lKr.forEach(t),O3o=r(WAe," (Pegasus model)"),WAe.forEach(t),V3o=i(ue),X1=n(ue,"LI",{});var HAe=s(X1);Cie=n(HAe,"STRONG",{});var iKr=s(Cie);X3o=r(iKr,"plbart"),iKr.forEach(t),z3o=r(HAe," \u2014 "),rj=n(HAe,"A",{href:!0});var dKr=s(rj);Q3o=r(dKr,"PLBartForConditionalGeneration"),dKr.forEach(t),W3o=r(HAe," (PLBart model)"),HAe.forEach(t),H3o=i(ue),z1=n(ue,"LI",{});var UAe=s(z1);wie=n(UAe,"STRONG",{});var cKr=s(wie);U3o=r(cKr,"prophetnet"),cKr.forEach(t),J3o=r(UAe," \u2014 "),tj=n(UAe,"A",{href:!0});var fKr=s(tj);Y3o=r(fKr,"ProphetNetForConditionalGeneration"),fKr.forEach(t),K3o=r(UAe," (ProphetNet model)"),UAe.forEach(t),Z3o=i(ue),Q1=n(ue,"LI",{});var JAe=s(Q1);Aie=n(JAe,"STRONG",{});var mKr=s(Aie);ewo=r(mKr,"t5"),mKr.forEach(t),owo=r(JAe," \u2014 "),aj=n(JAe,"A",{href:!0});var gKr=s(aj);rwo=r(gKr,"T5ForConditionalGeneration"),gKr.forEach(t),two=r(JAe," (T5 model)"),JAe.forEach(t),awo=i(ue),W1=n(ue,"LI",{});var YAe=s(W1);yie=n(YAe,"STRONG",{});var hKr=s(yie);nwo=r(hKr,"tapex"),hKr.forEach(t),swo=r(YAe," \u2014 "),nj=n(YAe,"A",{href:!0});var pKr=s(nj);lwo=r(pKr,"BartForConditionalGeneration"),pKr.forEach(t),iwo=r(YAe," (TAPEX model)"),YAe.forEach(t),dwo=i(ue),H1=n(ue,"LI",{});var KAe=s(H1);Lie=n(KAe,"STRONG",{});var uKr=s(Lie);cwo=r(uKr,"xlm-prophetnet"),uKr.forEach(t),fwo=r(KAe," \u2014 "),sj=n(KAe,"A",{href:!0});var _Kr=s(sj);mwo=r(_Kr,"XLMProphetNetForConditionalGeneration"),_Kr.forEach(t),gwo=r(KAe," (XLMProphetNet model)"),KAe.forEach(t),ue.forEach(t),hwo=i(Zt),U1=n(Zt,"P",{});var ZAe=s(U1);pwo=r(ZAe,"The model is set in evaluation mode by default using "),xie=n(ZAe,"CODE",{});var bKr=s(xie);uwo=r(bKr,"model.eval()"),bKr.forEach(t),_wo=r(ZAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$ie=n(ZAe,"CODE",{});var vKr=s($ie);bwo=r(vKr,"model.train()"),vKr.forEach(t),ZAe.forEach(t),vwo=i(Zt),T(J1.$$.fragment,Zt),Zt.forEach(t),js.forEach(t),eBe=i(f),$i=n(f,"H2",{class:!0});var rIe=s($i);Y1=n(rIe,"A",{id:!0,class:!0,href:!0});var FKr=s(Y1);kie=n(FKr,"SPAN",{});var TKr=s(kie);T(f0.$$.fragment,TKr),TKr.forEach(t),FKr.forEach(t),Fwo=i(rIe),Sie=n(rIe,"SPAN",{});var MKr=s(Sie);Two=r(MKr,"AutoModelForSequenceClassification"),MKr.forEach(t),rIe.forEach(t),oBe=i(f),ko=n(f,"DIV",{class:!0});var Ds=s(ko);T(m0.$$.fragment,Ds),Mwo=i(Ds),ki=n(Ds,"P",{});var aY=s(ki);Ewo=r(aY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),lj=n(aY,"A",{href:!0});var EKr=s(lj);Cwo=r(EKr,"from_pretrained()"),EKr.forEach(t),wwo=r(aY," class method or the "),ij=n(aY,"A",{href:!0});var CKr=s(ij);Awo=r(CKr,"from_config()"),CKr.forEach(t),ywo=r(aY,` class
method.`),aY.forEach(t),Lwo=i(Ds),g0=n(Ds,"P",{});var tIe=s(g0);xwo=r(tIe,"This class cannot be instantiated directly using "),Rie=n(tIe,"CODE",{});var wKr=s(Rie);$wo=r(wKr,"__init__()"),wKr.forEach(t),kwo=r(tIe," (throws an error)."),tIe.forEach(t),Swo=i(Ds),tt=n(Ds,"DIV",{class:!0});var x3=s(tt);T(h0.$$.fragment,x3),Rwo=i(x3),Bie=n(x3,"P",{});var AKr=s(Bie);Bwo=r(AKr,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),AKr.forEach(t),Pwo=i(x3),Si=n(x3,"P",{});var nY=s(Si);Iwo=r(nY,`Note:
Loading a model from its configuration file does `),Pie=n(nY,"STRONG",{});var yKr=s(Pie);qwo=r(yKr,"not"),yKr.forEach(t),Nwo=r(nY,` load the model weights. It only affects the
model\u2019s configuration. Use `),dj=n(nY,"A",{href:!0});var LKr=s(dj);jwo=r(LKr,"from_pretrained()"),LKr.forEach(t),Dwo=r(nY," to load the model weights."),nY.forEach(t),Gwo=i(x3),T(K1.$$.fragment,x3),x3.forEach(t),Owo=i(Ds),Ye=n(Ds,"DIV",{class:!0});var ea=s(Ye);T(p0.$$.fragment,ea),Vwo=i(ea),Iie=n(ea,"P",{});var xKr=s(Iie);Xwo=r(xKr,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),xKr.forEach(t),zwo=i(ea),La=n(ea,"P",{});var $3=s(La);Qwo=r($3,"The model class to instantiate is selected based on the "),qie=n($3,"CODE",{});var $Kr=s(qie);Wwo=r($Kr,"model_type"),$Kr.forEach(t),Hwo=r($3,` property of the config object (either
passed as an argument or loaded from `),Nie=n($3,"CODE",{});var kKr=s(Nie);Uwo=r(kKr,"pretrained_model_name_or_path"),kKr.forEach(t),Jwo=r($3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jie=n($3,"CODE",{});var SKr=s(jie);Ywo=r(SKr,"pretrained_model_name_or_path"),SKr.forEach(t),Kwo=r($3,":"),$3.forEach(t),Zwo=i(ea),q=n(ea,"UL",{});var N=s(q);Z1=n(N,"LI",{});var e0e=s(Z1);Die=n(e0e,"STRONG",{});var RKr=s(Die);eAo=r(RKr,"albert"),RKr.forEach(t),oAo=r(e0e," \u2014 "),cj=n(e0e,"A",{href:!0});var BKr=s(cj);rAo=r(BKr,"AlbertForSequenceClassification"),BKr.forEach(t),tAo=r(e0e," (ALBERT model)"),e0e.forEach(t),aAo=i(N),e9=n(N,"LI",{});var o0e=s(e9);Gie=n(o0e,"STRONG",{});var PKr=s(Gie);nAo=r(PKr,"bart"),PKr.forEach(t),sAo=r(o0e," \u2014 "),fj=n(o0e,"A",{href:!0});var IKr=s(fj);lAo=r(IKr,"BartForSequenceClassification"),IKr.forEach(t),iAo=r(o0e," (BART model)"),o0e.forEach(t),dAo=i(N),o9=n(N,"LI",{});var r0e=s(o9);Oie=n(r0e,"STRONG",{});var qKr=s(Oie);cAo=r(qKr,"bert"),qKr.forEach(t),fAo=r(r0e," \u2014 "),mj=n(r0e,"A",{href:!0});var NKr=s(mj);mAo=r(NKr,"BertForSequenceClassification"),NKr.forEach(t),gAo=r(r0e," (BERT model)"),r0e.forEach(t),hAo=i(N),r9=n(N,"LI",{});var t0e=s(r9);Vie=n(t0e,"STRONG",{});var jKr=s(Vie);pAo=r(jKr,"big_bird"),jKr.forEach(t),uAo=r(t0e," \u2014 "),gj=n(t0e,"A",{href:!0});var DKr=s(gj);_Ao=r(DKr,"BigBirdForSequenceClassification"),DKr.forEach(t),bAo=r(t0e," (BigBird model)"),t0e.forEach(t),vAo=i(N),t9=n(N,"LI",{});var a0e=s(t9);Xie=n(a0e,"STRONG",{});var GKr=s(Xie);FAo=r(GKr,"bigbird_pegasus"),GKr.forEach(t),TAo=r(a0e," \u2014 "),hj=n(a0e,"A",{href:!0});var OKr=s(hj);MAo=r(OKr,"BigBirdPegasusForSequenceClassification"),OKr.forEach(t),EAo=r(a0e," (BigBirdPegasus model)"),a0e.forEach(t),CAo=i(N),a9=n(N,"LI",{});var n0e=s(a9);zie=n(n0e,"STRONG",{});var VKr=s(zie);wAo=r(VKr,"camembert"),VKr.forEach(t),AAo=r(n0e," \u2014 "),pj=n(n0e,"A",{href:!0});var XKr=s(pj);yAo=r(XKr,"CamembertForSequenceClassification"),XKr.forEach(t),LAo=r(n0e," (CamemBERT model)"),n0e.forEach(t),xAo=i(N),n9=n(N,"LI",{});var s0e=s(n9);Qie=n(s0e,"STRONG",{});var zKr=s(Qie);$Ao=r(zKr,"canine"),zKr.forEach(t),kAo=r(s0e," \u2014 "),uj=n(s0e,"A",{href:!0});var QKr=s(uj);SAo=r(QKr,"CanineForSequenceClassification"),QKr.forEach(t),RAo=r(s0e," (Canine model)"),s0e.forEach(t),BAo=i(N),s9=n(N,"LI",{});var l0e=s(s9);Wie=n(l0e,"STRONG",{});var WKr=s(Wie);PAo=r(WKr,"convbert"),WKr.forEach(t),IAo=r(l0e," \u2014 "),_j=n(l0e,"A",{href:!0});var HKr=s(_j);qAo=r(HKr,"ConvBertForSequenceClassification"),HKr.forEach(t),NAo=r(l0e," (ConvBERT model)"),l0e.forEach(t),jAo=i(N),l9=n(N,"LI",{});var i0e=s(l9);Hie=n(i0e,"STRONG",{});var UKr=s(Hie);DAo=r(UKr,"ctrl"),UKr.forEach(t),GAo=r(i0e," \u2014 "),bj=n(i0e,"A",{href:!0});var JKr=s(bj);OAo=r(JKr,"CTRLForSequenceClassification"),JKr.forEach(t),VAo=r(i0e," (CTRL model)"),i0e.forEach(t),XAo=i(N),i9=n(N,"LI",{});var d0e=s(i9);Uie=n(d0e,"STRONG",{});var YKr=s(Uie);zAo=r(YKr,"data2vec-text"),YKr.forEach(t),QAo=r(d0e," \u2014 "),vj=n(d0e,"A",{href:!0});var KKr=s(vj);WAo=r(KKr,"Data2VecTextForSequenceClassification"),KKr.forEach(t),HAo=r(d0e," (Data2VecText model)"),d0e.forEach(t),UAo=i(N),d9=n(N,"LI",{});var c0e=s(d9);Jie=n(c0e,"STRONG",{});var ZKr=s(Jie);JAo=r(ZKr,"deberta"),ZKr.forEach(t),YAo=r(c0e," \u2014 "),Fj=n(c0e,"A",{href:!0});var eZr=s(Fj);KAo=r(eZr,"DebertaForSequenceClassification"),eZr.forEach(t),ZAo=r(c0e," (DeBERTa model)"),c0e.forEach(t),e0o=i(N),c9=n(N,"LI",{});var f0e=s(c9);Yie=n(f0e,"STRONG",{});var oZr=s(Yie);o0o=r(oZr,"deberta-v2"),oZr.forEach(t),r0o=r(f0e," \u2014 "),Tj=n(f0e,"A",{href:!0});var rZr=s(Tj);t0o=r(rZr,"DebertaV2ForSequenceClassification"),rZr.forEach(t),a0o=r(f0e," (DeBERTa-v2 model)"),f0e.forEach(t),n0o=i(N),f9=n(N,"LI",{});var m0e=s(f9);Kie=n(m0e,"STRONG",{});var tZr=s(Kie);s0o=r(tZr,"distilbert"),tZr.forEach(t),l0o=r(m0e," \u2014 "),Mj=n(m0e,"A",{href:!0});var aZr=s(Mj);i0o=r(aZr,"DistilBertForSequenceClassification"),aZr.forEach(t),d0o=r(m0e," (DistilBERT model)"),m0e.forEach(t),c0o=i(N),m9=n(N,"LI",{});var g0e=s(m9);Zie=n(g0e,"STRONG",{});var nZr=s(Zie);f0o=r(nZr,"electra"),nZr.forEach(t),m0o=r(g0e," \u2014 "),Ej=n(g0e,"A",{href:!0});var sZr=s(Ej);g0o=r(sZr,"ElectraForSequenceClassification"),sZr.forEach(t),h0o=r(g0e," (ELECTRA model)"),g0e.forEach(t),p0o=i(N),g9=n(N,"LI",{});var h0e=s(g9);ede=n(h0e,"STRONG",{});var lZr=s(ede);u0o=r(lZr,"flaubert"),lZr.forEach(t),_0o=r(h0e," \u2014 "),Cj=n(h0e,"A",{href:!0});var iZr=s(Cj);b0o=r(iZr,"FlaubertForSequenceClassification"),iZr.forEach(t),v0o=r(h0e," (FlauBERT model)"),h0e.forEach(t),F0o=i(N),h9=n(N,"LI",{});var p0e=s(h9);ode=n(p0e,"STRONG",{});var dZr=s(ode);T0o=r(dZr,"fnet"),dZr.forEach(t),M0o=r(p0e," \u2014 "),wj=n(p0e,"A",{href:!0});var cZr=s(wj);E0o=r(cZr,"FNetForSequenceClassification"),cZr.forEach(t),C0o=r(p0e," (FNet model)"),p0e.forEach(t),w0o=i(N),p9=n(N,"LI",{});var u0e=s(p9);rde=n(u0e,"STRONG",{});var fZr=s(rde);A0o=r(fZr,"funnel"),fZr.forEach(t),y0o=r(u0e," \u2014 "),Aj=n(u0e,"A",{href:!0});var mZr=s(Aj);L0o=r(mZr,"FunnelForSequenceClassification"),mZr.forEach(t),x0o=r(u0e," (Funnel Transformer model)"),u0e.forEach(t),$0o=i(N),u9=n(N,"LI",{});var _0e=s(u9);tde=n(_0e,"STRONG",{});var gZr=s(tde);k0o=r(gZr,"gpt2"),gZr.forEach(t),S0o=r(_0e," \u2014 "),yj=n(_0e,"A",{href:!0});var hZr=s(yj);R0o=r(hZr,"GPT2ForSequenceClassification"),hZr.forEach(t),B0o=r(_0e," (OpenAI GPT-2 model)"),_0e.forEach(t),P0o=i(N),_9=n(N,"LI",{});var b0e=s(_9);ade=n(b0e,"STRONG",{});var pZr=s(ade);I0o=r(pZr,"gpt_neo"),pZr.forEach(t),q0o=r(b0e," \u2014 "),Lj=n(b0e,"A",{href:!0});var uZr=s(Lj);N0o=r(uZr,"GPTNeoForSequenceClassification"),uZr.forEach(t),j0o=r(b0e," (GPT Neo model)"),b0e.forEach(t),D0o=i(N),b9=n(N,"LI",{});var v0e=s(b9);nde=n(v0e,"STRONG",{});var _Zr=s(nde);G0o=r(_Zr,"gptj"),_Zr.forEach(t),O0o=r(v0e," \u2014 "),xj=n(v0e,"A",{href:!0});var bZr=s(xj);V0o=r(bZr,"GPTJForSequenceClassification"),bZr.forEach(t),X0o=r(v0e," (GPT-J model)"),v0e.forEach(t),z0o=i(N),v9=n(N,"LI",{});var F0e=s(v9);sde=n(F0e,"STRONG",{});var vZr=s(sde);Q0o=r(vZr,"ibert"),vZr.forEach(t),W0o=r(F0e," \u2014 "),$j=n(F0e,"A",{href:!0});var FZr=s($j);H0o=r(FZr,"IBertForSequenceClassification"),FZr.forEach(t),U0o=r(F0e," (I-BERT model)"),F0e.forEach(t),J0o=i(N),F9=n(N,"LI",{});var T0e=s(F9);lde=n(T0e,"STRONG",{});var TZr=s(lde);Y0o=r(TZr,"layoutlm"),TZr.forEach(t),K0o=r(T0e," \u2014 "),kj=n(T0e,"A",{href:!0});var MZr=s(kj);Z0o=r(MZr,"LayoutLMForSequenceClassification"),MZr.forEach(t),eyo=r(T0e," (LayoutLM model)"),T0e.forEach(t),oyo=i(N),T9=n(N,"LI",{});var M0e=s(T9);ide=n(M0e,"STRONG",{});var EZr=s(ide);ryo=r(EZr,"layoutlmv2"),EZr.forEach(t),tyo=r(M0e," \u2014 "),Sj=n(M0e,"A",{href:!0});var CZr=s(Sj);ayo=r(CZr,"LayoutLMv2ForSequenceClassification"),CZr.forEach(t),nyo=r(M0e," (LayoutLMv2 model)"),M0e.forEach(t),syo=i(N),M9=n(N,"LI",{});var E0e=s(M9);dde=n(E0e,"STRONG",{});var wZr=s(dde);lyo=r(wZr,"led"),wZr.forEach(t),iyo=r(E0e," \u2014 "),Rj=n(E0e,"A",{href:!0});var AZr=s(Rj);dyo=r(AZr,"LEDForSequenceClassification"),AZr.forEach(t),cyo=r(E0e," (LED model)"),E0e.forEach(t),fyo=i(N),E9=n(N,"LI",{});var C0e=s(E9);cde=n(C0e,"STRONG",{});var yZr=s(cde);myo=r(yZr,"longformer"),yZr.forEach(t),gyo=r(C0e," \u2014 "),Bj=n(C0e,"A",{href:!0});var LZr=s(Bj);hyo=r(LZr,"LongformerForSequenceClassification"),LZr.forEach(t),pyo=r(C0e," (Longformer model)"),C0e.forEach(t),uyo=i(N),C9=n(N,"LI",{});var w0e=s(C9);fde=n(w0e,"STRONG",{});var xZr=s(fde);_yo=r(xZr,"mbart"),xZr.forEach(t),byo=r(w0e," \u2014 "),Pj=n(w0e,"A",{href:!0});var $Zr=s(Pj);vyo=r($Zr,"MBartForSequenceClassification"),$Zr.forEach(t),Fyo=r(w0e," (mBART model)"),w0e.forEach(t),Tyo=i(N),w9=n(N,"LI",{});var A0e=s(w9);mde=n(A0e,"STRONG",{});var kZr=s(mde);Myo=r(kZr,"megatron-bert"),kZr.forEach(t),Eyo=r(A0e," \u2014 "),Ij=n(A0e,"A",{href:!0});var SZr=s(Ij);Cyo=r(SZr,"MegatronBertForSequenceClassification"),SZr.forEach(t),wyo=r(A0e," (MegatronBert model)"),A0e.forEach(t),Ayo=i(N),A9=n(N,"LI",{});var y0e=s(A9);gde=n(y0e,"STRONG",{});var RZr=s(gde);yyo=r(RZr,"mobilebert"),RZr.forEach(t),Lyo=r(y0e," \u2014 "),qj=n(y0e,"A",{href:!0});var BZr=s(qj);xyo=r(BZr,"MobileBertForSequenceClassification"),BZr.forEach(t),$yo=r(y0e," (MobileBERT model)"),y0e.forEach(t),kyo=i(N),y9=n(N,"LI",{});var L0e=s(y9);hde=n(L0e,"STRONG",{});var PZr=s(hde);Syo=r(PZr,"mpnet"),PZr.forEach(t),Ryo=r(L0e," \u2014 "),Nj=n(L0e,"A",{href:!0});var IZr=s(Nj);Byo=r(IZr,"MPNetForSequenceClassification"),IZr.forEach(t),Pyo=r(L0e," (MPNet model)"),L0e.forEach(t),Iyo=i(N),L9=n(N,"LI",{});var x0e=s(L9);pde=n(x0e,"STRONG",{});var qZr=s(pde);qyo=r(qZr,"nystromformer"),qZr.forEach(t),Nyo=r(x0e," \u2014 "),jj=n(x0e,"A",{href:!0});var NZr=s(jj);jyo=r(NZr,"NystromformerForSequenceClassification"),NZr.forEach(t),Dyo=r(x0e," (Nystromformer model)"),x0e.forEach(t),Gyo=i(N),x9=n(N,"LI",{});var $0e=s(x9);ude=n($0e,"STRONG",{});var jZr=s(ude);Oyo=r(jZr,"openai-gpt"),jZr.forEach(t),Vyo=r($0e," \u2014 "),Dj=n($0e,"A",{href:!0});var DZr=s(Dj);Xyo=r(DZr,"OpenAIGPTForSequenceClassification"),DZr.forEach(t),zyo=r($0e," (OpenAI GPT model)"),$0e.forEach(t),Qyo=i(N),$9=n(N,"LI",{});var k0e=s($9);_de=n(k0e,"STRONG",{});var GZr=s(_de);Wyo=r(GZr,"perceiver"),GZr.forEach(t),Hyo=r(k0e," \u2014 "),Gj=n(k0e,"A",{href:!0});var OZr=s(Gj);Uyo=r(OZr,"PerceiverForSequenceClassification"),OZr.forEach(t),Jyo=r(k0e," (Perceiver model)"),k0e.forEach(t),Yyo=i(N),k9=n(N,"LI",{});var S0e=s(k9);bde=n(S0e,"STRONG",{});var VZr=s(bde);Kyo=r(VZr,"plbart"),VZr.forEach(t),Zyo=r(S0e," \u2014 "),Oj=n(S0e,"A",{href:!0});var XZr=s(Oj);eLo=r(XZr,"PLBartForSequenceClassification"),XZr.forEach(t),oLo=r(S0e," (PLBart model)"),S0e.forEach(t),rLo=i(N),S9=n(N,"LI",{});var R0e=s(S9);vde=n(R0e,"STRONG",{});var zZr=s(vde);tLo=r(zZr,"qdqbert"),zZr.forEach(t),aLo=r(R0e," \u2014 "),Vj=n(R0e,"A",{href:!0});var QZr=s(Vj);nLo=r(QZr,"QDQBertForSequenceClassification"),QZr.forEach(t),sLo=r(R0e," (QDQBert model)"),R0e.forEach(t),lLo=i(N),R9=n(N,"LI",{});var B0e=s(R9);Fde=n(B0e,"STRONG",{});var WZr=s(Fde);iLo=r(WZr,"reformer"),WZr.forEach(t),dLo=r(B0e," \u2014 "),Xj=n(B0e,"A",{href:!0});var HZr=s(Xj);cLo=r(HZr,"ReformerForSequenceClassification"),HZr.forEach(t),fLo=r(B0e," (Reformer model)"),B0e.forEach(t),mLo=i(N),B9=n(N,"LI",{});var P0e=s(B9);Tde=n(P0e,"STRONG",{});var UZr=s(Tde);gLo=r(UZr,"rembert"),UZr.forEach(t),hLo=r(P0e," \u2014 "),zj=n(P0e,"A",{href:!0});var JZr=s(zj);pLo=r(JZr,"RemBertForSequenceClassification"),JZr.forEach(t),uLo=r(P0e," (RemBERT model)"),P0e.forEach(t),_Lo=i(N),P9=n(N,"LI",{});var I0e=s(P9);Mde=n(I0e,"STRONG",{});var YZr=s(Mde);bLo=r(YZr,"roberta"),YZr.forEach(t),vLo=r(I0e," \u2014 "),Qj=n(I0e,"A",{href:!0});var KZr=s(Qj);FLo=r(KZr,"RobertaForSequenceClassification"),KZr.forEach(t),TLo=r(I0e," (RoBERTa model)"),I0e.forEach(t),MLo=i(N),I9=n(N,"LI",{});var q0e=s(I9);Ede=n(q0e,"STRONG",{});var ZZr=s(Ede);ELo=r(ZZr,"roformer"),ZZr.forEach(t),CLo=r(q0e," \u2014 "),Wj=n(q0e,"A",{href:!0});var eet=s(Wj);wLo=r(eet,"RoFormerForSequenceClassification"),eet.forEach(t),ALo=r(q0e," (RoFormer model)"),q0e.forEach(t),yLo=i(N),q9=n(N,"LI",{});var N0e=s(q9);Cde=n(N0e,"STRONG",{});var oet=s(Cde);LLo=r(oet,"squeezebert"),oet.forEach(t),xLo=r(N0e," \u2014 "),Hj=n(N0e,"A",{href:!0});var ret=s(Hj);$Lo=r(ret,"SqueezeBertForSequenceClassification"),ret.forEach(t),kLo=r(N0e," (SqueezeBERT model)"),N0e.forEach(t),SLo=i(N),N9=n(N,"LI",{});var j0e=s(N9);wde=n(j0e,"STRONG",{});var tet=s(wde);RLo=r(tet,"tapas"),tet.forEach(t),BLo=r(j0e," \u2014 "),Uj=n(j0e,"A",{href:!0});var aet=s(Uj);PLo=r(aet,"TapasForSequenceClassification"),aet.forEach(t),ILo=r(j0e," (TAPAS model)"),j0e.forEach(t),qLo=i(N),j9=n(N,"LI",{});var D0e=s(j9);Ade=n(D0e,"STRONG",{});var net=s(Ade);NLo=r(net,"tapex"),net.forEach(t),jLo=r(D0e," \u2014 "),Jj=n(D0e,"A",{href:!0});var set=s(Jj);DLo=r(set,"BartForSequenceClassification"),set.forEach(t),GLo=r(D0e," (TAPEX model)"),D0e.forEach(t),OLo=i(N),D9=n(N,"LI",{});var G0e=s(D9);yde=n(G0e,"STRONG",{});var iet=s(yde);VLo=r(iet,"transfo-xl"),iet.forEach(t),XLo=r(G0e," \u2014 "),Yj=n(G0e,"A",{href:!0});var det=s(Yj);zLo=r(det,"TransfoXLForSequenceClassification"),det.forEach(t),QLo=r(G0e," (Transformer-XL model)"),G0e.forEach(t),WLo=i(N),G9=n(N,"LI",{});var O0e=s(G9);Lde=n(O0e,"STRONG",{});var cet=s(Lde);HLo=r(cet,"xlm"),cet.forEach(t),ULo=r(O0e," \u2014 "),Kj=n(O0e,"A",{href:!0});var fet=s(Kj);JLo=r(fet,"XLMForSequenceClassification"),fet.forEach(t),YLo=r(O0e," (XLM model)"),O0e.forEach(t),KLo=i(N),O9=n(N,"LI",{});var V0e=s(O9);xde=n(V0e,"STRONG",{});var met=s(xde);ZLo=r(met,"xlm-roberta"),met.forEach(t),e8o=r(V0e," \u2014 "),Zj=n(V0e,"A",{href:!0});var get=s(Zj);o8o=r(get,"XLMRobertaForSequenceClassification"),get.forEach(t),r8o=r(V0e," (XLM-RoBERTa model)"),V0e.forEach(t),t8o=i(N),V9=n(N,"LI",{});var X0e=s(V9);$de=n(X0e,"STRONG",{});var het=s($de);a8o=r(het,"xlm-roberta-xl"),het.forEach(t),n8o=r(X0e," \u2014 "),eD=n(X0e,"A",{href:!0});var pet=s(eD);s8o=r(pet,"XLMRobertaXLForSequenceClassification"),pet.forEach(t),l8o=r(X0e," (XLM-RoBERTa-XL model)"),X0e.forEach(t),i8o=i(N),X9=n(N,"LI",{});var z0e=s(X9);kde=n(z0e,"STRONG",{});var uet=s(kde);d8o=r(uet,"xlnet"),uet.forEach(t),c8o=r(z0e," \u2014 "),oD=n(z0e,"A",{href:!0});var _et=s(oD);f8o=r(_et,"XLNetForSequenceClassification"),_et.forEach(t),m8o=r(z0e," (XLNet model)"),z0e.forEach(t),g8o=i(N),z9=n(N,"LI",{});var Q0e=s(z9);Sde=n(Q0e,"STRONG",{});var bet=s(Sde);h8o=r(bet,"yoso"),bet.forEach(t),p8o=r(Q0e," \u2014 "),rD=n(Q0e,"A",{href:!0});var vet=s(rD);u8o=r(vet,"YosoForSequenceClassification"),vet.forEach(t),_8o=r(Q0e," (YOSO model)"),Q0e.forEach(t),N.forEach(t),b8o=i(ea),Q9=n(ea,"P",{});var W0e=s(Q9);v8o=r(W0e,"The model is set in evaluation mode by default using "),Rde=n(W0e,"CODE",{});var Fet=s(Rde);F8o=r(Fet,"model.eval()"),Fet.forEach(t),T8o=r(W0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Bde=n(W0e,"CODE",{});var Tet=s(Bde);M8o=r(Tet,"model.train()"),Tet.forEach(t),W0e.forEach(t),E8o=i(ea),T(W9.$$.fragment,ea),ea.forEach(t),Ds.forEach(t),rBe=i(f),Ri=n(f,"H2",{class:!0});var aIe=s(Ri);H9=n(aIe,"A",{id:!0,class:!0,href:!0});var Met=s(H9);Pde=n(Met,"SPAN",{});var Eet=s(Pde);T(u0.$$.fragment,Eet),Eet.forEach(t),Met.forEach(t),C8o=i(aIe),Ide=n(aIe,"SPAN",{});var Cet=s(Ide);w8o=r(Cet,"AutoModelForMultipleChoice"),Cet.forEach(t),aIe.forEach(t),tBe=i(f),So=n(f,"DIV",{class:!0});var Gs=s(So);T(_0.$$.fragment,Gs),A8o=i(Gs),Bi=n(Gs,"P",{});var sY=s(Bi);y8o=r(sY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),tD=n(sY,"A",{href:!0});var wet=s(tD);L8o=r(wet,"from_pretrained()"),wet.forEach(t),x8o=r(sY," class method or the "),aD=n(sY,"A",{href:!0});var Aet=s(aD);$8o=r(Aet,"from_config()"),Aet.forEach(t),k8o=r(sY,` class
method.`),sY.forEach(t),S8o=i(Gs),b0=n(Gs,"P",{});var nIe=s(b0);R8o=r(nIe,"This class cannot be instantiated directly using "),qde=n(nIe,"CODE",{});var yet=s(qde);B8o=r(yet,"__init__()"),yet.forEach(t),P8o=r(nIe," (throws an error)."),nIe.forEach(t),I8o=i(Gs),at=n(Gs,"DIV",{class:!0});var k3=s(at);T(v0.$$.fragment,k3),q8o=i(k3),Nde=n(k3,"P",{});var Let=s(Nde);N8o=r(Let,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Let.forEach(t),j8o=i(k3),Pi=n(k3,"P",{});var lY=s(Pi);D8o=r(lY,`Note:
Loading a model from its configuration file does `),jde=n(lY,"STRONG",{});var xet=s(jde);G8o=r(xet,"not"),xet.forEach(t),O8o=r(lY,` load the model weights. It only affects the
model\u2019s configuration. Use `),nD=n(lY,"A",{href:!0});var $et=s(nD);V8o=r($et,"from_pretrained()"),$et.forEach(t),X8o=r(lY," to load the model weights."),lY.forEach(t),z8o=i(k3),T(U9.$$.fragment,k3),k3.forEach(t),Q8o=i(Gs),Ke=n(Gs,"DIV",{class:!0});var oa=s(Ke);T(F0.$$.fragment,oa),W8o=i(oa),Dde=n(oa,"P",{});var ket=s(Dde);H8o=r(ket,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),ket.forEach(t),U8o=i(oa),xa=n(oa,"P",{});var S3=s(xa);J8o=r(S3,"The model class to instantiate is selected based on the "),Gde=n(S3,"CODE",{});var Set=s(Gde);Y8o=r(Set,"model_type"),Set.forEach(t),K8o=r(S3,` property of the config object (either
passed as an argument or loaded from `),Ode=n(S3,"CODE",{});var Ret=s(Ode);Z8o=r(Ret,"pretrained_model_name_or_path"),Ret.forEach(t),e7o=r(S3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vde=n(S3,"CODE",{});var Bet=s(Vde);o7o=r(Bet,"pretrained_model_name_or_path"),Bet.forEach(t),r7o=r(S3,":"),S3.forEach(t),t7o=i(oa),Y=n(oa,"UL",{});var K=s(Y);J9=n(K,"LI",{});var H0e=s(J9);Xde=n(H0e,"STRONG",{});var Pet=s(Xde);a7o=r(Pet,"albert"),Pet.forEach(t),n7o=r(H0e," \u2014 "),sD=n(H0e,"A",{href:!0});var Iet=s(sD);s7o=r(Iet,"AlbertForMultipleChoice"),Iet.forEach(t),l7o=r(H0e," (ALBERT model)"),H0e.forEach(t),i7o=i(K),Y9=n(K,"LI",{});var U0e=s(Y9);zde=n(U0e,"STRONG",{});var qet=s(zde);d7o=r(qet,"bert"),qet.forEach(t),c7o=r(U0e," \u2014 "),lD=n(U0e,"A",{href:!0});var Net=s(lD);f7o=r(Net,"BertForMultipleChoice"),Net.forEach(t),m7o=r(U0e," (BERT model)"),U0e.forEach(t),g7o=i(K),K9=n(K,"LI",{});var J0e=s(K9);Qde=n(J0e,"STRONG",{});var jet=s(Qde);h7o=r(jet,"big_bird"),jet.forEach(t),p7o=r(J0e," \u2014 "),iD=n(J0e,"A",{href:!0});var Det=s(iD);u7o=r(Det,"BigBirdForMultipleChoice"),Det.forEach(t),_7o=r(J0e," (BigBird model)"),J0e.forEach(t),b7o=i(K),Z9=n(K,"LI",{});var Y0e=s(Z9);Wde=n(Y0e,"STRONG",{});var Get=s(Wde);v7o=r(Get,"camembert"),Get.forEach(t),F7o=r(Y0e," \u2014 "),dD=n(Y0e,"A",{href:!0});var Oet=s(dD);T7o=r(Oet,"CamembertForMultipleChoice"),Oet.forEach(t),M7o=r(Y0e," (CamemBERT model)"),Y0e.forEach(t),E7o=i(K),eb=n(K,"LI",{});var K0e=s(eb);Hde=n(K0e,"STRONG",{});var Vet=s(Hde);C7o=r(Vet,"canine"),Vet.forEach(t),w7o=r(K0e," \u2014 "),cD=n(K0e,"A",{href:!0});var Xet=s(cD);A7o=r(Xet,"CanineForMultipleChoice"),Xet.forEach(t),y7o=r(K0e," (Canine model)"),K0e.forEach(t),L7o=i(K),ob=n(K,"LI",{});var Z0e=s(ob);Ude=n(Z0e,"STRONG",{});var zet=s(Ude);x7o=r(zet,"convbert"),zet.forEach(t),$7o=r(Z0e," \u2014 "),fD=n(Z0e,"A",{href:!0});var Qet=s(fD);k7o=r(Qet,"ConvBertForMultipleChoice"),Qet.forEach(t),S7o=r(Z0e," (ConvBERT model)"),Z0e.forEach(t),R7o=i(K),rb=n(K,"LI",{});var eye=s(rb);Jde=n(eye,"STRONG",{});var Wet=s(Jde);B7o=r(Wet,"data2vec-text"),Wet.forEach(t),P7o=r(eye," \u2014 "),mD=n(eye,"A",{href:!0});var Het=s(mD);I7o=r(Het,"Data2VecTextForMultipleChoice"),Het.forEach(t),q7o=r(eye," (Data2VecText model)"),eye.forEach(t),N7o=i(K),tb=n(K,"LI",{});var oye=s(tb);Yde=n(oye,"STRONG",{});var Uet=s(Yde);j7o=r(Uet,"distilbert"),Uet.forEach(t),D7o=r(oye," \u2014 "),gD=n(oye,"A",{href:!0});var Jet=s(gD);G7o=r(Jet,"DistilBertForMultipleChoice"),Jet.forEach(t),O7o=r(oye," (DistilBERT model)"),oye.forEach(t),V7o=i(K),ab=n(K,"LI",{});var rye=s(ab);Kde=n(rye,"STRONG",{});var Yet=s(Kde);X7o=r(Yet,"electra"),Yet.forEach(t),z7o=r(rye," \u2014 "),hD=n(rye,"A",{href:!0});var Ket=s(hD);Q7o=r(Ket,"ElectraForMultipleChoice"),Ket.forEach(t),W7o=r(rye," (ELECTRA model)"),rye.forEach(t),H7o=i(K),nb=n(K,"LI",{});var tye=s(nb);Zde=n(tye,"STRONG",{});var Zet=s(Zde);U7o=r(Zet,"flaubert"),Zet.forEach(t),J7o=r(tye," \u2014 "),pD=n(tye,"A",{href:!0});var eot=s(pD);Y7o=r(eot,"FlaubertForMultipleChoice"),eot.forEach(t),K7o=r(tye," (FlauBERT model)"),tye.forEach(t),Z7o=i(K),sb=n(K,"LI",{});var aye=s(sb);ece=n(aye,"STRONG",{});var oot=s(ece);exo=r(oot,"fnet"),oot.forEach(t),oxo=r(aye," \u2014 "),uD=n(aye,"A",{href:!0});var rot=s(uD);rxo=r(rot,"FNetForMultipleChoice"),rot.forEach(t),txo=r(aye," (FNet model)"),aye.forEach(t),axo=i(K),lb=n(K,"LI",{});var nye=s(lb);oce=n(nye,"STRONG",{});var tot=s(oce);nxo=r(tot,"funnel"),tot.forEach(t),sxo=r(nye," \u2014 "),_D=n(nye,"A",{href:!0});var aot=s(_D);lxo=r(aot,"FunnelForMultipleChoice"),aot.forEach(t),ixo=r(nye," (Funnel Transformer model)"),nye.forEach(t),dxo=i(K),ib=n(K,"LI",{});var sye=s(ib);rce=n(sye,"STRONG",{});var not=s(rce);cxo=r(not,"ibert"),not.forEach(t),fxo=r(sye," \u2014 "),bD=n(sye,"A",{href:!0});var sot=s(bD);mxo=r(sot,"IBertForMultipleChoice"),sot.forEach(t),gxo=r(sye," (I-BERT model)"),sye.forEach(t),hxo=i(K),db=n(K,"LI",{});var lye=s(db);tce=n(lye,"STRONG",{});var lot=s(tce);pxo=r(lot,"longformer"),lot.forEach(t),uxo=r(lye," \u2014 "),vD=n(lye,"A",{href:!0});var iot=s(vD);_xo=r(iot,"LongformerForMultipleChoice"),iot.forEach(t),bxo=r(lye," (Longformer model)"),lye.forEach(t),vxo=i(K),cb=n(K,"LI",{});var iye=s(cb);ace=n(iye,"STRONG",{});var dot=s(ace);Fxo=r(dot,"megatron-bert"),dot.forEach(t),Txo=r(iye," \u2014 "),FD=n(iye,"A",{href:!0});var cot=s(FD);Mxo=r(cot,"MegatronBertForMultipleChoice"),cot.forEach(t),Exo=r(iye," (MegatronBert model)"),iye.forEach(t),Cxo=i(K),fb=n(K,"LI",{});var dye=s(fb);nce=n(dye,"STRONG",{});var fot=s(nce);wxo=r(fot,"mobilebert"),fot.forEach(t),Axo=r(dye," \u2014 "),TD=n(dye,"A",{href:!0});var mot=s(TD);yxo=r(mot,"MobileBertForMultipleChoice"),mot.forEach(t),Lxo=r(dye," (MobileBERT model)"),dye.forEach(t),xxo=i(K),mb=n(K,"LI",{});var cye=s(mb);sce=n(cye,"STRONG",{});var got=s(sce);$xo=r(got,"mpnet"),got.forEach(t),kxo=r(cye," \u2014 "),MD=n(cye,"A",{href:!0});var hot=s(MD);Sxo=r(hot,"MPNetForMultipleChoice"),hot.forEach(t),Rxo=r(cye," (MPNet model)"),cye.forEach(t),Bxo=i(K),gb=n(K,"LI",{});var fye=s(gb);lce=n(fye,"STRONG",{});var pot=s(lce);Pxo=r(pot,"nystromformer"),pot.forEach(t),Ixo=r(fye," \u2014 "),ED=n(fye,"A",{href:!0});var uot=s(ED);qxo=r(uot,"NystromformerForMultipleChoice"),uot.forEach(t),Nxo=r(fye," (Nystromformer model)"),fye.forEach(t),jxo=i(K),hb=n(K,"LI",{});var mye=s(hb);ice=n(mye,"STRONG",{});var _ot=s(ice);Dxo=r(_ot,"qdqbert"),_ot.forEach(t),Gxo=r(mye," \u2014 "),CD=n(mye,"A",{href:!0});var bot=s(CD);Oxo=r(bot,"QDQBertForMultipleChoice"),bot.forEach(t),Vxo=r(mye," (QDQBert model)"),mye.forEach(t),Xxo=i(K),pb=n(K,"LI",{});var gye=s(pb);dce=n(gye,"STRONG",{});var vot=s(dce);zxo=r(vot,"rembert"),vot.forEach(t),Qxo=r(gye," \u2014 "),wD=n(gye,"A",{href:!0});var Fot=s(wD);Wxo=r(Fot,"RemBertForMultipleChoice"),Fot.forEach(t),Hxo=r(gye," (RemBERT model)"),gye.forEach(t),Uxo=i(K),ub=n(K,"LI",{});var hye=s(ub);cce=n(hye,"STRONG",{});var Tot=s(cce);Jxo=r(Tot,"roberta"),Tot.forEach(t),Yxo=r(hye," \u2014 "),AD=n(hye,"A",{href:!0});var Mot=s(AD);Kxo=r(Mot,"RobertaForMultipleChoice"),Mot.forEach(t),Zxo=r(hye," (RoBERTa model)"),hye.forEach(t),e$o=i(K),_b=n(K,"LI",{});var pye=s(_b);fce=n(pye,"STRONG",{});var Eot=s(fce);o$o=r(Eot,"roformer"),Eot.forEach(t),r$o=r(pye," \u2014 "),yD=n(pye,"A",{href:!0});var Cot=s(yD);t$o=r(Cot,"RoFormerForMultipleChoice"),Cot.forEach(t),a$o=r(pye," (RoFormer model)"),pye.forEach(t),n$o=i(K),bb=n(K,"LI",{});var uye=s(bb);mce=n(uye,"STRONG",{});var wot=s(mce);s$o=r(wot,"squeezebert"),wot.forEach(t),l$o=r(uye," \u2014 "),LD=n(uye,"A",{href:!0});var Aot=s(LD);i$o=r(Aot,"SqueezeBertForMultipleChoice"),Aot.forEach(t),d$o=r(uye," (SqueezeBERT model)"),uye.forEach(t),c$o=i(K),vb=n(K,"LI",{});var _ye=s(vb);gce=n(_ye,"STRONG",{});var yot=s(gce);f$o=r(yot,"xlm"),yot.forEach(t),m$o=r(_ye," \u2014 "),xD=n(_ye,"A",{href:!0});var Lot=s(xD);g$o=r(Lot,"XLMForMultipleChoice"),Lot.forEach(t),h$o=r(_ye," (XLM model)"),_ye.forEach(t),p$o=i(K),Fb=n(K,"LI",{});var bye=s(Fb);hce=n(bye,"STRONG",{});var xot=s(hce);u$o=r(xot,"xlm-roberta"),xot.forEach(t),_$o=r(bye," \u2014 "),$D=n(bye,"A",{href:!0});var $ot=s($D);b$o=r($ot,"XLMRobertaForMultipleChoice"),$ot.forEach(t),v$o=r(bye," (XLM-RoBERTa model)"),bye.forEach(t),F$o=i(K),Tb=n(K,"LI",{});var vye=s(Tb);pce=n(vye,"STRONG",{});var kot=s(pce);T$o=r(kot,"xlm-roberta-xl"),kot.forEach(t),M$o=r(vye," \u2014 "),kD=n(vye,"A",{href:!0});var Sot=s(kD);E$o=r(Sot,"XLMRobertaXLForMultipleChoice"),Sot.forEach(t),C$o=r(vye," (XLM-RoBERTa-XL model)"),vye.forEach(t),w$o=i(K),Mb=n(K,"LI",{});var Fye=s(Mb);uce=n(Fye,"STRONG",{});var Rot=s(uce);A$o=r(Rot,"xlnet"),Rot.forEach(t),y$o=r(Fye," \u2014 "),SD=n(Fye,"A",{href:!0});var Bot=s(SD);L$o=r(Bot,"XLNetForMultipleChoice"),Bot.forEach(t),x$o=r(Fye," (XLNet model)"),Fye.forEach(t),$$o=i(K),Eb=n(K,"LI",{});var Tye=s(Eb);_ce=n(Tye,"STRONG",{});var Pot=s(_ce);k$o=r(Pot,"yoso"),Pot.forEach(t),S$o=r(Tye," \u2014 "),RD=n(Tye,"A",{href:!0});var Iot=s(RD);R$o=r(Iot,"YosoForMultipleChoice"),Iot.forEach(t),B$o=r(Tye," (YOSO model)"),Tye.forEach(t),K.forEach(t),P$o=i(oa),Cb=n(oa,"P",{});var Mye=s(Cb);I$o=r(Mye,"The model is set in evaluation mode by default using "),bce=n(Mye,"CODE",{});var qot=s(bce);q$o=r(qot,"model.eval()"),qot.forEach(t),N$o=r(Mye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vce=n(Mye,"CODE",{});var Not=s(vce);j$o=r(Not,"model.train()"),Not.forEach(t),Mye.forEach(t),D$o=i(oa),T(wb.$$.fragment,oa),oa.forEach(t),Gs.forEach(t),aBe=i(f),Ii=n(f,"H2",{class:!0});var sIe=s(Ii);Ab=n(sIe,"A",{id:!0,class:!0,href:!0});var jot=s(Ab);Fce=n(jot,"SPAN",{});var Dot=s(Fce);T(T0.$$.fragment,Dot),Dot.forEach(t),jot.forEach(t),G$o=i(sIe),Tce=n(sIe,"SPAN",{});var Got=s(Tce);O$o=r(Got,"AutoModelForNextSentencePrediction"),Got.forEach(t),sIe.forEach(t),nBe=i(f),Ro=n(f,"DIV",{class:!0});var Os=s(Ro);T(M0.$$.fragment,Os),V$o=i(Os),qi=n(Os,"P",{});var iY=s(qi);X$o=r(iY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),BD=n(iY,"A",{href:!0});var Oot=s(BD);z$o=r(Oot,"from_pretrained()"),Oot.forEach(t),Q$o=r(iY," class method or the "),PD=n(iY,"A",{href:!0});var Vot=s(PD);W$o=r(Vot,"from_config()"),Vot.forEach(t),H$o=r(iY,` class
method.`),iY.forEach(t),U$o=i(Os),E0=n(Os,"P",{});var lIe=s(E0);J$o=r(lIe,"This class cannot be instantiated directly using "),Mce=n(lIe,"CODE",{});var Xot=s(Mce);Y$o=r(Xot,"__init__()"),Xot.forEach(t),K$o=r(lIe," (throws an error)."),lIe.forEach(t),Z$o=i(Os),nt=n(Os,"DIV",{class:!0});var R3=s(nt);T(C0.$$.fragment,R3),eko=i(R3),Ece=n(R3,"P",{});var zot=s(Ece);oko=r(zot,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),zot.forEach(t),rko=i(R3),Ni=n(R3,"P",{});var dY=s(Ni);tko=r(dY,`Note:
Loading a model from its configuration file does `),Cce=n(dY,"STRONG",{});var Qot=s(Cce);ako=r(Qot,"not"),Qot.forEach(t),nko=r(dY,` load the model weights. It only affects the
model\u2019s configuration. Use `),ID=n(dY,"A",{href:!0});var Wot=s(ID);sko=r(Wot,"from_pretrained()"),Wot.forEach(t),lko=r(dY," to load the model weights."),dY.forEach(t),iko=i(R3),T(yb.$$.fragment,R3),R3.forEach(t),dko=i(Os),Ze=n(Os,"DIV",{class:!0});var ra=s(Ze);T(w0.$$.fragment,ra),cko=i(ra),wce=n(ra,"P",{});var Hot=s(wce);fko=r(Hot,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Hot.forEach(t),mko=i(ra),$a=n(ra,"P",{});var B3=s($a);gko=r(B3,"The model class to instantiate is selected based on the "),Ace=n(B3,"CODE",{});var Uot=s(Ace);hko=r(Uot,"model_type"),Uot.forEach(t),pko=r(B3,` property of the config object (either
passed as an argument or loaded from `),yce=n(B3,"CODE",{});var Jot=s(yce);uko=r(Jot,"pretrained_model_name_or_path"),Jot.forEach(t),_ko=r(B3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lce=n(B3,"CODE",{});var Yot=s(Lce);bko=r(Yot,"pretrained_model_name_or_path"),Yot.forEach(t),vko=r(B3,":"),B3.forEach(t),Fko=i(ra),Hr=n(ra,"UL",{});var Vs=s(Hr);Lb=n(Vs,"LI",{});var Eye=s(Lb);xce=n(Eye,"STRONG",{});var Kot=s(xce);Tko=r(Kot,"bert"),Kot.forEach(t),Mko=r(Eye," \u2014 "),qD=n(Eye,"A",{href:!0});var Zot=s(qD);Eko=r(Zot,"BertForNextSentencePrediction"),Zot.forEach(t),Cko=r(Eye," (BERT model)"),Eye.forEach(t),wko=i(Vs),xb=n(Vs,"LI",{});var Cye=s(xb);$ce=n(Cye,"STRONG",{});var ert=s($ce);Ako=r(ert,"fnet"),ert.forEach(t),yko=r(Cye," \u2014 "),ND=n(Cye,"A",{href:!0});var ort=s(ND);Lko=r(ort,"FNetForNextSentencePrediction"),ort.forEach(t),xko=r(Cye," (FNet model)"),Cye.forEach(t),$ko=i(Vs),$b=n(Vs,"LI",{});var wye=s($b);kce=n(wye,"STRONG",{});var rrt=s(kce);kko=r(rrt,"megatron-bert"),rrt.forEach(t),Sko=r(wye," \u2014 "),jD=n(wye,"A",{href:!0});var trt=s(jD);Rko=r(trt,"MegatronBertForNextSentencePrediction"),trt.forEach(t),Bko=r(wye," (MegatronBert model)"),wye.forEach(t),Pko=i(Vs),kb=n(Vs,"LI",{});var Aye=s(kb);Sce=n(Aye,"STRONG",{});var art=s(Sce);Iko=r(art,"mobilebert"),art.forEach(t),qko=r(Aye," \u2014 "),DD=n(Aye,"A",{href:!0});var nrt=s(DD);Nko=r(nrt,"MobileBertForNextSentencePrediction"),nrt.forEach(t),jko=r(Aye," (MobileBERT model)"),Aye.forEach(t),Dko=i(Vs),Sb=n(Vs,"LI",{});var yye=s(Sb);Rce=n(yye,"STRONG",{});var srt=s(Rce);Gko=r(srt,"qdqbert"),srt.forEach(t),Oko=r(yye," \u2014 "),GD=n(yye,"A",{href:!0});var lrt=s(GD);Vko=r(lrt,"QDQBertForNextSentencePrediction"),lrt.forEach(t),Xko=r(yye," (QDQBert model)"),yye.forEach(t),Vs.forEach(t),zko=i(ra),Rb=n(ra,"P",{});var Lye=s(Rb);Qko=r(Lye,"The model is set in evaluation mode by default using "),Bce=n(Lye,"CODE",{});var irt=s(Bce);Wko=r(irt,"model.eval()"),irt.forEach(t),Hko=r(Lye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Pce=n(Lye,"CODE",{});var drt=s(Pce);Uko=r(drt,"model.train()"),drt.forEach(t),Lye.forEach(t),Jko=i(ra),T(Bb.$$.fragment,ra),ra.forEach(t),Os.forEach(t),sBe=i(f),ji=n(f,"H2",{class:!0});var iIe=s(ji);Pb=n(iIe,"A",{id:!0,class:!0,href:!0});var crt=s(Pb);Ice=n(crt,"SPAN",{});var frt=s(Ice);T(A0.$$.fragment,frt),frt.forEach(t),crt.forEach(t),Yko=i(iIe),qce=n(iIe,"SPAN",{});var mrt=s(qce);Kko=r(mrt,"AutoModelForTokenClassification"),mrt.forEach(t),iIe.forEach(t),lBe=i(f),Bo=n(f,"DIV",{class:!0});var Xs=s(Bo);T(y0.$$.fragment,Xs),Zko=i(Xs),Di=n(Xs,"P",{});var cY=s(Di);eSo=r(cY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),OD=n(cY,"A",{href:!0});var grt=s(OD);oSo=r(grt,"from_pretrained()"),grt.forEach(t),rSo=r(cY," class method or the "),VD=n(cY,"A",{href:!0});var hrt=s(VD);tSo=r(hrt,"from_config()"),hrt.forEach(t),aSo=r(cY,` class
method.`),cY.forEach(t),nSo=i(Xs),L0=n(Xs,"P",{});var dIe=s(L0);sSo=r(dIe,"This class cannot be instantiated directly using "),Nce=n(dIe,"CODE",{});var prt=s(Nce);lSo=r(prt,"__init__()"),prt.forEach(t),iSo=r(dIe," (throws an error)."),dIe.forEach(t),dSo=i(Xs),st=n(Xs,"DIV",{class:!0});var P3=s(st);T(x0.$$.fragment,P3),cSo=i(P3),jce=n(P3,"P",{});var urt=s(jce);fSo=r(urt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),urt.forEach(t),mSo=i(P3),Gi=n(P3,"P",{});var fY=s(Gi);gSo=r(fY,`Note:
Loading a model from its configuration file does `),Dce=n(fY,"STRONG",{});var _rt=s(Dce);hSo=r(_rt,"not"),_rt.forEach(t),pSo=r(fY,` load the model weights. It only affects the
model\u2019s configuration. Use `),XD=n(fY,"A",{href:!0});var brt=s(XD);uSo=r(brt,"from_pretrained()"),brt.forEach(t),_So=r(fY," to load the model weights."),fY.forEach(t),bSo=i(P3),T(Ib.$$.fragment,P3),P3.forEach(t),vSo=i(Xs),eo=n(Xs,"DIV",{class:!0});var ta=s(eo);T($0.$$.fragment,ta),FSo=i(ta),Gce=n(ta,"P",{});var vrt=s(Gce);TSo=r(vrt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),vrt.forEach(t),MSo=i(ta),ka=n(ta,"P",{});var I3=s(ka);ESo=r(I3,"The model class to instantiate is selected based on the "),Oce=n(I3,"CODE",{});var Frt=s(Oce);CSo=r(Frt,"model_type"),Frt.forEach(t),wSo=r(I3,` property of the config object (either
passed as an argument or loaded from `),Vce=n(I3,"CODE",{});var Trt=s(Vce);ASo=r(Trt,"pretrained_model_name_or_path"),Trt.forEach(t),ySo=r(I3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xce=n(I3,"CODE",{});var Mrt=s(Xce);LSo=r(Mrt,"pretrained_model_name_or_path"),Mrt.forEach(t),xSo=r(I3,":"),I3.forEach(t),$So=i(ta),U=n(ta,"UL",{});var J=s(U);qb=n(J,"LI",{});var xye=s(qb);zce=n(xye,"STRONG",{});var Ert=s(zce);kSo=r(Ert,"albert"),Ert.forEach(t),SSo=r(xye," \u2014 "),zD=n(xye,"A",{href:!0});var Crt=s(zD);RSo=r(Crt,"AlbertForTokenClassification"),Crt.forEach(t),BSo=r(xye," (ALBERT model)"),xye.forEach(t),PSo=i(J),Nb=n(J,"LI",{});var $ye=s(Nb);Qce=n($ye,"STRONG",{});var wrt=s(Qce);ISo=r(wrt,"bert"),wrt.forEach(t),qSo=r($ye," \u2014 "),QD=n($ye,"A",{href:!0});var Art=s(QD);NSo=r(Art,"BertForTokenClassification"),Art.forEach(t),jSo=r($ye," (BERT model)"),$ye.forEach(t),DSo=i(J),jb=n(J,"LI",{});var kye=s(jb);Wce=n(kye,"STRONG",{});var yrt=s(Wce);GSo=r(yrt,"big_bird"),yrt.forEach(t),OSo=r(kye," \u2014 "),WD=n(kye,"A",{href:!0});var Lrt=s(WD);VSo=r(Lrt,"BigBirdForTokenClassification"),Lrt.forEach(t),XSo=r(kye," (BigBird model)"),kye.forEach(t),zSo=i(J),Db=n(J,"LI",{});var Sye=s(Db);Hce=n(Sye,"STRONG",{});var xrt=s(Hce);QSo=r(xrt,"camembert"),xrt.forEach(t),WSo=r(Sye," \u2014 "),HD=n(Sye,"A",{href:!0});var $rt=s(HD);HSo=r($rt,"CamembertForTokenClassification"),$rt.forEach(t),USo=r(Sye," (CamemBERT model)"),Sye.forEach(t),JSo=i(J),Gb=n(J,"LI",{});var Rye=s(Gb);Uce=n(Rye,"STRONG",{});var krt=s(Uce);YSo=r(krt,"canine"),krt.forEach(t),KSo=r(Rye," \u2014 "),UD=n(Rye,"A",{href:!0});var Srt=s(UD);ZSo=r(Srt,"CanineForTokenClassification"),Srt.forEach(t),eRo=r(Rye," (Canine model)"),Rye.forEach(t),oRo=i(J),Ob=n(J,"LI",{});var Bye=s(Ob);Jce=n(Bye,"STRONG",{});var Rrt=s(Jce);rRo=r(Rrt,"convbert"),Rrt.forEach(t),tRo=r(Bye," \u2014 "),JD=n(Bye,"A",{href:!0});var Brt=s(JD);aRo=r(Brt,"ConvBertForTokenClassification"),Brt.forEach(t),nRo=r(Bye," (ConvBERT model)"),Bye.forEach(t),sRo=i(J),Vb=n(J,"LI",{});var Pye=s(Vb);Yce=n(Pye,"STRONG",{});var Prt=s(Yce);lRo=r(Prt,"data2vec-text"),Prt.forEach(t),iRo=r(Pye," \u2014 "),YD=n(Pye,"A",{href:!0});var Irt=s(YD);dRo=r(Irt,"Data2VecTextForTokenClassification"),Irt.forEach(t),cRo=r(Pye," (Data2VecText model)"),Pye.forEach(t),fRo=i(J),Xb=n(J,"LI",{});var Iye=s(Xb);Kce=n(Iye,"STRONG",{});var qrt=s(Kce);mRo=r(qrt,"deberta"),qrt.forEach(t),gRo=r(Iye," \u2014 "),KD=n(Iye,"A",{href:!0});var Nrt=s(KD);hRo=r(Nrt,"DebertaForTokenClassification"),Nrt.forEach(t),pRo=r(Iye," (DeBERTa model)"),Iye.forEach(t),uRo=i(J),zb=n(J,"LI",{});var qye=s(zb);Zce=n(qye,"STRONG",{});var jrt=s(Zce);_Ro=r(jrt,"deberta-v2"),jrt.forEach(t),bRo=r(qye," \u2014 "),ZD=n(qye,"A",{href:!0});var Drt=s(ZD);vRo=r(Drt,"DebertaV2ForTokenClassification"),Drt.forEach(t),FRo=r(qye," (DeBERTa-v2 model)"),qye.forEach(t),TRo=i(J),Qb=n(J,"LI",{});var Nye=s(Qb);efe=n(Nye,"STRONG",{});var Grt=s(efe);MRo=r(Grt,"distilbert"),Grt.forEach(t),ERo=r(Nye," \u2014 "),eG=n(Nye,"A",{href:!0});var Ort=s(eG);CRo=r(Ort,"DistilBertForTokenClassification"),Ort.forEach(t),wRo=r(Nye," (DistilBERT model)"),Nye.forEach(t),ARo=i(J),Wb=n(J,"LI",{});var jye=s(Wb);ofe=n(jye,"STRONG",{});var Vrt=s(ofe);yRo=r(Vrt,"electra"),Vrt.forEach(t),LRo=r(jye," \u2014 "),oG=n(jye,"A",{href:!0});var Xrt=s(oG);xRo=r(Xrt,"ElectraForTokenClassification"),Xrt.forEach(t),$Ro=r(jye," (ELECTRA model)"),jye.forEach(t),kRo=i(J),Hb=n(J,"LI",{});var Dye=s(Hb);rfe=n(Dye,"STRONG",{});var zrt=s(rfe);SRo=r(zrt,"flaubert"),zrt.forEach(t),RRo=r(Dye," \u2014 "),rG=n(Dye,"A",{href:!0});var Qrt=s(rG);BRo=r(Qrt,"FlaubertForTokenClassification"),Qrt.forEach(t),PRo=r(Dye," (FlauBERT model)"),Dye.forEach(t),IRo=i(J),Ub=n(J,"LI",{});var Gye=s(Ub);tfe=n(Gye,"STRONG",{});var Wrt=s(tfe);qRo=r(Wrt,"fnet"),Wrt.forEach(t),NRo=r(Gye," \u2014 "),tG=n(Gye,"A",{href:!0});var Hrt=s(tG);jRo=r(Hrt,"FNetForTokenClassification"),Hrt.forEach(t),DRo=r(Gye," (FNet model)"),Gye.forEach(t),GRo=i(J),Jb=n(J,"LI",{});var Oye=s(Jb);afe=n(Oye,"STRONG",{});var Urt=s(afe);ORo=r(Urt,"funnel"),Urt.forEach(t),VRo=r(Oye," \u2014 "),aG=n(Oye,"A",{href:!0});var Jrt=s(aG);XRo=r(Jrt,"FunnelForTokenClassification"),Jrt.forEach(t),zRo=r(Oye," (Funnel Transformer model)"),Oye.forEach(t),QRo=i(J),Yb=n(J,"LI",{});var Vye=s(Yb);nfe=n(Vye,"STRONG",{});var Yrt=s(nfe);WRo=r(Yrt,"gpt2"),Yrt.forEach(t),HRo=r(Vye," \u2014 "),nG=n(Vye,"A",{href:!0});var Krt=s(nG);URo=r(Krt,"GPT2ForTokenClassification"),Krt.forEach(t),JRo=r(Vye," (OpenAI GPT-2 model)"),Vye.forEach(t),YRo=i(J),Kb=n(J,"LI",{});var Xye=s(Kb);sfe=n(Xye,"STRONG",{});var Zrt=s(sfe);KRo=r(Zrt,"ibert"),Zrt.forEach(t),ZRo=r(Xye," \u2014 "),sG=n(Xye,"A",{href:!0});var ett=s(sG);eBo=r(ett,"IBertForTokenClassification"),ett.forEach(t),oBo=r(Xye," (I-BERT model)"),Xye.forEach(t),rBo=i(J),Zb=n(J,"LI",{});var zye=s(Zb);lfe=n(zye,"STRONG",{});var ott=s(lfe);tBo=r(ott,"layoutlm"),ott.forEach(t),aBo=r(zye," \u2014 "),lG=n(zye,"A",{href:!0});var rtt=s(lG);nBo=r(rtt,"LayoutLMForTokenClassification"),rtt.forEach(t),sBo=r(zye," (LayoutLM model)"),zye.forEach(t),lBo=i(J),e2=n(J,"LI",{});var Qye=s(e2);ife=n(Qye,"STRONG",{});var ttt=s(ife);iBo=r(ttt,"layoutlmv2"),ttt.forEach(t),dBo=r(Qye," \u2014 "),iG=n(Qye,"A",{href:!0});var att=s(iG);cBo=r(att,"LayoutLMv2ForTokenClassification"),att.forEach(t),fBo=r(Qye," (LayoutLMv2 model)"),Qye.forEach(t),mBo=i(J),o2=n(J,"LI",{});var Wye=s(o2);dfe=n(Wye,"STRONG",{});var ntt=s(dfe);gBo=r(ntt,"longformer"),ntt.forEach(t),hBo=r(Wye," \u2014 "),dG=n(Wye,"A",{href:!0});var stt=s(dG);pBo=r(stt,"LongformerForTokenClassification"),stt.forEach(t),uBo=r(Wye," (Longformer model)"),Wye.forEach(t),_Bo=i(J),r2=n(J,"LI",{});var Hye=s(r2);cfe=n(Hye,"STRONG",{});var ltt=s(cfe);bBo=r(ltt,"megatron-bert"),ltt.forEach(t),vBo=r(Hye," \u2014 "),cG=n(Hye,"A",{href:!0});var itt=s(cG);FBo=r(itt,"MegatronBertForTokenClassification"),itt.forEach(t),TBo=r(Hye," (MegatronBert model)"),Hye.forEach(t),MBo=i(J),t2=n(J,"LI",{});var Uye=s(t2);ffe=n(Uye,"STRONG",{});var dtt=s(ffe);EBo=r(dtt,"mobilebert"),dtt.forEach(t),CBo=r(Uye," \u2014 "),fG=n(Uye,"A",{href:!0});var ctt=s(fG);wBo=r(ctt,"MobileBertForTokenClassification"),ctt.forEach(t),ABo=r(Uye," (MobileBERT model)"),Uye.forEach(t),yBo=i(J),a2=n(J,"LI",{});var Jye=s(a2);mfe=n(Jye,"STRONG",{});var ftt=s(mfe);LBo=r(ftt,"mpnet"),ftt.forEach(t),xBo=r(Jye," \u2014 "),mG=n(Jye,"A",{href:!0});var mtt=s(mG);$Bo=r(mtt,"MPNetForTokenClassification"),mtt.forEach(t),kBo=r(Jye," (MPNet model)"),Jye.forEach(t),SBo=i(J),n2=n(J,"LI",{});var Yye=s(n2);gfe=n(Yye,"STRONG",{});var gtt=s(gfe);RBo=r(gtt,"nystromformer"),gtt.forEach(t),BBo=r(Yye," \u2014 "),gG=n(Yye,"A",{href:!0});var htt=s(gG);PBo=r(htt,"NystromformerForTokenClassification"),htt.forEach(t),IBo=r(Yye," (Nystromformer model)"),Yye.forEach(t),qBo=i(J),s2=n(J,"LI",{});var Kye=s(s2);hfe=n(Kye,"STRONG",{});var ptt=s(hfe);NBo=r(ptt,"qdqbert"),ptt.forEach(t),jBo=r(Kye," \u2014 "),hG=n(Kye,"A",{href:!0});var utt=s(hG);DBo=r(utt,"QDQBertForTokenClassification"),utt.forEach(t),GBo=r(Kye," (QDQBert model)"),Kye.forEach(t),OBo=i(J),l2=n(J,"LI",{});var Zye=s(l2);pfe=n(Zye,"STRONG",{});var _tt=s(pfe);VBo=r(_tt,"rembert"),_tt.forEach(t),XBo=r(Zye," \u2014 "),pG=n(Zye,"A",{href:!0});var btt=s(pG);zBo=r(btt,"RemBertForTokenClassification"),btt.forEach(t),QBo=r(Zye," (RemBERT model)"),Zye.forEach(t),WBo=i(J),i2=n(J,"LI",{});var eLe=s(i2);ufe=n(eLe,"STRONG",{});var vtt=s(ufe);HBo=r(vtt,"roberta"),vtt.forEach(t),UBo=r(eLe," \u2014 "),uG=n(eLe,"A",{href:!0});var Ftt=s(uG);JBo=r(Ftt,"RobertaForTokenClassification"),Ftt.forEach(t),YBo=r(eLe," (RoBERTa model)"),eLe.forEach(t),KBo=i(J),d2=n(J,"LI",{});var oLe=s(d2);_fe=n(oLe,"STRONG",{});var Ttt=s(_fe);ZBo=r(Ttt,"roformer"),Ttt.forEach(t),ePo=r(oLe," \u2014 "),_G=n(oLe,"A",{href:!0});var Mtt=s(_G);oPo=r(Mtt,"RoFormerForTokenClassification"),Mtt.forEach(t),rPo=r(oLe," (RoFormer model)"),oLe.forEach(t),tPo=i(J),c2=n(J,"LI",{});var rLe=s(c2);bfe=n(rLe,"STRONG",{});var Ett=s(bfe);aPo=r(Ett,"squeezebert"),Ett.forEach(t),nPo=r(rLe," \u2014 "),bG=n(rLe,"A",{href:!0});var Ctt=s(bG);sPo=r(Ctt,"SqueezeBertForTokenClassification"),Ctt.forEach(t),lPo=r(rLe," (SqueezeBERT model)"),rLe.forEach(t),iPo=i(J),f2=n(J,"LI",{});var tLe=s(f2);vfe=n(tLe,"STRONG",{});var wtt=s(vfe);dPo=r(wtt,"xlm"),wtt.forEach(t),cPo=r(tLe," \u2014 "),vG=n(tLe,"A",{href:!0});var Att=s(vG);fPo=r(Att,"XLMForTokenClassification"),Att.forEach(t),mPo=r(tLe," (XLM model)"),tLe.forEach(t),gPo=i(J),m2=n(J,"LI",{});var aLe=s(m2);Ffe=n(aLe,"STRONG",{});var ytt=s(Ffe);hPo=r(ytt,"xlm-roberta"),ytt.forEach(t),pPo=r(aLe," \u2014 "),FG=n(aLe,"A",{href:!0});var Ltt=s(FG);uPo=r(Ltt,"XLMRobertaForTokenClassification"),Ltt.forEach(t),_Po=r(aLe," (XLM-RoBERTa model)"),aLe.forEach(t),bPo=i(J),g2=n(J,"LI",{});var nLe=s(g2);Tfe=n(nLe,"STRONG",{});var xtt=s(Tfe);vPo=r(xtt,"xlm-roberta-xl"),xtt.forEach(t),FPo=r(nLe," \u2014 "),TG=n(nLe,"A",{href:!0});var $tt=s(TG);TPo=r($tt,"XLMRobertaXLForTokenClassification"),$tt.forEach(t),MPo=r(nLe," (XLM-RoBERTa-XL model)"),nLe.forEach(t),EPo=i(J),h2=n(J,"LI",{});var sLe=s(h2);Mfe=n(sLe,"STRONG",{});var ktt=s(Mfe);CPo=r(ktt,"xlnet"),ktt.forEach(t),wPo=r(sLe," \u2014 "),MG=n(sLe,"A",{href:!0});var Stt=s(MG);APo=r(Stt,"XLNetForTokenClassification"),Stt.forEach(t),yPo=r(sLe," (XLNet model)"),sLe.forEach(t),LPo=i(J),p2=n(J,"LI",{});var lLe=s(p2);Efe=n(lLe,"STRONG",{});var Rtt=s(Efe);xPo=r(Rtt,"yoso"),Rtt.forEach(t),$Po=r(lLe," \u2014 "),EG=n(lLe,"A",{href:!0});var Btt=s(EG);kPo=r(Btt,"YosoForTokenClassification"),Btt.forEach(t),SPo=r(lLe," (YOSO model)"),lLe.forEach(t),J.forEach(t),RPo=i(ta),u2=n(ta,"P",{});var iLe=s(u2);BPo=r(iLe,"The model is set in evaluation mode by default using "),Cfe=n(iLe,"CODE",{});var Ptt=s(Cfe);PPo=r(Ptt,"model.eval()"),Ptt.forEach(t),IPo=r(iLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),wfe=n(iLe,"CODE",{});var Itt=s(wfe);qPo=r(Itt,"model.train()"),Itt.forEach(t),iLe.forEach(t),NPo=i(ta),T(_2.$$.fragment,ta),ta.forEach(t),Xs.forEach(t),iBe=i(f),Oi=n(f,"H2",{class:!0});var cIe=s(Oi);b2=n(cIe,"A",{id:!0,class:!0,href:!0});var qtt=s(b2);Afe=n(qtt,"SPAN",{});var Ntt=s(Afe);T(k0.$$.fragment,Ntt),Ntt.forEach(t),qtt.forEach(t),jPo=i(cIe),yfe=n(cIe,"SPAN",{});var jtt=s(yfe);DPo=r(jtt,"AutoModelForQuestionAnswering"),jtt.forEach(t),cIe.forEach(t),dBe=i(f),Po=n(f,"DIV",{class:!0});var zs=s(Po);T(S0.$$.fragment,zs),GPo=i(zs),Vi=n(zs,"P",{});var mY=s(Vi);OPo=r(mY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),CG=n(mY,"A",{href:!0});var Dtt=s(CG);VPo=r(Dtt,"from_pretrained()"),Dtt.forEach(t),XPo=r(mY," class method or the "),wG=n(mY,"A",{href:!0});var Gtt=s(wG);zPo=r(Gtt,"from_config()"),Gtt.forEach(t),QPo=r(mY,` class
method.`),mY.forEach(t),WPo=i(zs),R0=n(zs,"P",{});var fIe=s(R0);HPo=r(fIe,"This class cannot be instantiated directly using "),Lfe=n(fIe,"CODE",{});var Ott=s(Lfe);UPo=r(Ott,"__init__()"),Ott.forEach(t),JPo=r(fIe," (throws an error)."),fIe.forEach(t),YPo=i(zs),lt=n(zs,"DIV",{class:!0});var q3=s(lt);T(B0.$$.fragment,q3),KPo=i(q3),xfe=n(q3,"P",{});var Vtt=s(xfe);ZPo=r(Vtt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Vtt.forEach(t),eIo=i(q3),Xi=n(q3,"P",{});var gY=s(Xi);oIo=r(gY,`Note:
Loading a model from its configuration file does `),$fe=n(gY,"STRONG",{});var Xtt=s($fe);rIo=r(Xtt,"not"),Xtt.forEach(t),tIo=r(gY,` load the model weights. It only affects the
model\u2019s configuration. Use `),AG=n(gY,"A",{href:!0});var ztt=s(AG);aIo=r(ztt,"from_pretrained()"),ztt.forEach(t),nIo=r(gY," to load the model weights."),gY.forEach(t),sIo=i(q3),T(v2.$$.fragment,q3),q3.forEach(t),lIo=i(zs),oo=n(zs,"DIV",{class:!0});var aa=s(oo);T(P0.$$.fragment,aa),iIo=i(aa),kfe=n(aa,"P",{});var Qtt=s(kfe);dIo=r(Qtt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Qtt.forEach(t),cIo=i(aa),Sa=n(aa,"P",{});var N3=s(Sa);fIo=r(N3,"The model class to instantiate is selected based on the "),Sfe=n(N3,"CODE",{});var Wtt=s(Sfe);mIo=r(Wtt,"model_type"),Wtt.forEach(t),gIo=r(N3,` property of the config object (either
passed as an argument or loaded from `),Rfe=n(N3,"CODE",{});var Htt=s(Rfe);hIo=r(Htt,"pretrained_model_name_or_path"),Htt.forEach(t),pIo=r(N3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bfe=n(N3,"CODE",{});var Utt=s(Bfe);uIo=r(Utt,"pretrained_model_name_or_path"),Utt.forEach(t),_Io=r(N3,":"),N3.forEach(t),bIo=i(aa),O=n(aa,"UL",{});var X=s(O);F2=n(X,"LI",{});var dLe=s(F2);Pfe=n(dLe,"STRONG",{});var Jtt=s(Pfe);vIo=r(Jtt,"albert"),Jtt.forEach(t),FIo=r(dLe," \u2014 "),yG=n(dLe,"A",{href:!0});var Ytt=s(yG);TIo=r(Ytt,"AlbertForQuestionAnswering"),Ytt.forEach(t),MIo=r(dLe," (ALBERT model)"),dLe.forEach(t),EIo=i(X),T2=n(X,"LI",{});var cLe=s(T2);Ife=n(cLe,"STRONG",{});var Ktt=s(Ife);CIo=r(Ktt,"bart"),Ktt.forEach(t),wIo=r(cLe," \u2014 "),LG=n(cLe,"A",{href:!0});var Ztt=s(LG);AIo=r(Ztt,"BartForQuestionAnswering"),Ztt.forEach(t),yIo=r(cLe," (BART model)"),cLe.forEach(t),LIo=i(X),M2=n(X,"LI",{});var fLe=s(M2);qfe=n(fLe,"STRONG",{});var eat=s(qfe);xIo=r(eat,"bert"),eat.forEach(t),$Io=r(fLe," \u2014 "),xG=n(fLe,"A",{href:!0});var oat=s(xG);kIo=r(oat,"BertForQuestionAnswering"),oat.forEach(t),SIo=r(fLe," (BERT model)"),fLe.forEach(t),RIo=i(X),E2=n(X,"LI",{});var mLe=s(E2);Nfe=n(mLe,"STRONG",{});var rat=s(Nfe);BIo=r(rat,"big_bird"),rat.forEach(t),PIo=r(mLe," \u2014 "),$G=n(mLe,"A",{href:!0});var tat=s($G);IIo=r(tat,"BigBirdForQuestionAnswering"),tat.forEach(t),qIo=r(mLe," (BigBird model)"),mLe.forEach(t),NIo=i(X),C2=n(X,"LI",{});var gLe=s(C2);jfe=n(gLe,"STRONG",{});var aat=s(jfe);jIo=r(aat,"bigbird_pegasus"),aat.forEach(t),DIo=r(gLe," \u2014 "),kG=n(gLe,"A",{href:!0});var nat=s(kG);GIo=r(nat,"BigBirdPegasusForQuestionAnswering"),nat.forEach(t),OIo=r(gLe," (BigBirdPegasus model)"),gLe.forEach(t),VIo=i(X),w2=n(X,"LI",{});var hLe=s(w2);Dfe=n(hLe,"STRONG",{});var sat=s(Dfe);XIo=r(sat,"camembert"),sat.forEach(t),zIo=r(hLe," \u2014 "),SG=n(hLe,"A",{href:!0});var lat=s(SG);QIo=r(lat,"CamembertForQuestionAnswering"),lat.forEach(t),WIo=r(hLe," (CamemBERT model)"),hLe.forEach(t),HIo=i(X),A2=n(X,"LI",{});var pLe=s(A2);Gfe=n(pLe,"STRONG",{});var iat=s(Gfe);UIo=r(iat,"canine"),iat.forEach(t),JIo=r(pLe," \u2014 "),RG=n(pLe,"A",{href:!0});var dat=s(RG);YIo=r(dat,"CanineForQuestionAnswering"),dat.forEach(t),KIo=r(pLe," (Canine model)"),pLe.forEach(t),ZIo=i(X),y2=n(X,"LI",{});var uLe=s(y2);Ofe=n(uLe,"STRONG",{});var cat=s(Ofe);eqo=r(cat,"convbert"),cat.forEach(t),oqo=r(uLe," \u2014 "),BG=n(uLe,"A",{href:!0});var fat=s(BG);rqo=r(fat,"ConvBertForQuestionAnswering"),fat.forEach(t),tqo=r(uLe," (ConvBERT model)"),uLe.forEach(t),aqo=i(X),L2=n(X,"LI",{});var _Le=s(L2);Vfe=n(_Le,"STRONG",{});var mat=s(Vfe);nqo=r(mat,"data2vec-text"),mat.forEach(t),sqo=r(_Le," \u2014 "),PG=n(_Le,"A",{href:!0});var gat=s(PG);lqo=r(gat,"Data2VecTextForQuestionAnswering"),gat.forEach(t),iqo=r(_Le," (Data2VecText model)"),_Le.forEach(t),dqo=i(X),x2=n(X,"LI",{});var bLe=s(x2);Xfe=n(bLe,"STRONG",{});var hat=s(Xfe);cqo=r(hat,"deberta"),hat.forEach(t),fqo=r(bLe," \u2014 "),IG=n(bLe,"A",{href:!0});var pat=s(IG);mqo=r(pat,"DebertaForQuestionAnswering"),pat.forEach(t),gqo=r(bLe," (DeBERTa model)"),bLe.forEach(t),hqo=i(X),$2=n(X,"LI",{});var vLe=s($2);zfe=n(vLe,"STRONG",{});var uat=s(zfe);pqo=r(uat,"deberta-v2"),uat.forEach(t),uqo=r(vLe," \u2014 "),qG=n(vLe,"A",{href:!0});var _at=s(qG);_qo=r(_at,"DebertaV2ForQuestionAnswering"),_at.forEach(t),bqo=r(vLe," (DeBERTa-v2 model)"),vLe.forEach(t),vqo=i(X),k2=n(X,"LI",{});var FLe=s(k2);Qfe=n(FLe,"STRONG",{});var bat=s(Qfe);Fqo=r(bat,"distilbert"),bat.forEach(t),Tqo=r(FLe," \u2014 "),NG=n(FLe,"A",{href:!0});var vat=s(NG);Mqo=r(vat,"DistilBertForQuestionAnswering"),vat.forEach(t),Eqo=r(FLe," (DistilBERT model)"),FLe.forEach(t),Cqo=i(X),S2=n(X,"LI",{});var TLe=s(S2);Wfe=n(TLe,"STRONG",{});var Fat=s(Wfe);wqo=r(Fat,"electra"),Fat.forEach(t),Aqo=r(TLe," \u2014 "),jG=n(TLe,"A",{href:!0});var Tat=s(jG);yqo=r(Tat,"ElectraForQuestionAnswering"),Tat.forEach(t),Lqo=r(TLe," (ELECTRA model)"),TLe.forEach(t),xqo=i(X),R2=n(X,"LI",{});var MLe=s(R2);Hfe=n(MLe,"STRONG",{});var Mat=s(Hfe);$qo=r(Mat,"flaubert"),Mat.forEach(t),kqo=r(MLe," \u2014 "),DG=n(MLe,"A",{href:!0});var Eat=s(DG);Sqo=r(Eat,"FlaubertForQuestionAnsweringSimple"),Eat.forEach(t),Rqo=r(MLe," (FlauBERT model)"),MLe.forEach(t),Bqo=i(X),B2=n(X,"LI",{});var ELe=s(B2);Ufe=n(ELe,"STRONG",{});var Cat=s(Ufe);Pqo=r(Cat,"fnet"),Cat.forEach(t),Iqo=r(ELe," \u2014 "),GG=n(ELe,"A",{href:!0});var wat=s(GG);qqo=r(wat,"FNetForQuestionAnswering"),wat.forEach(t),Nqo=r(ELe," (FNet model)"),ELe.forEach(t),jqo=i(X),P2=n(X,"LI",{});var CLe=s(P2);Jfe=n(CLe,"STRONG",{});var Aat=s(Jfe);Dqo=r(Aat,"funnel"),Aat.forEach(t),Gqo=r(CLe," \u2014 "),OG=n(CLe,"A",{href:!0});var yat=s(OG);Oqo=r(yat,"FunnelForQuestionAnswering"),yat.forEach(t),Vqo=r(CLe," (Funnel Transformer model)"),CLe.forEach(t),Xqo=i(X),I2=n(X,"LI",{});var wLe=s(I2);Yfe=n(wLe,"STRONG",{});var Lat=s(Yfe);zqo=r(Lat,"gptj"),Lat.forEach(t),Qqo=r(wLe," \u2014 "),VG=n(wLe,"A",{href:!0});var xat=s(VG);Wqo=r(xat,"GPTJForQuestionAnswering"),xat.forEach(t),Hqo=r(wLe," (GPT-J model)"),wLe.forEach(t),Uqo=i(X),q2=n(X,"LI",{});var ALe=s(q2);Kfe=n(ALe,"STRONG",{});var $at=s(Kfe);Jqo=r($at,"ibert"),$at.forEach(t),Yqo=r(ALe," \u2014 "),XG=n(ALe,"A",{href:!0});var kat=s(XG);Kqo=r(kat,"IBertForQuestionAnswering"),kat.forEach(t),Zqo=r(ALe," (I-BERT model)"),ALe.forEach(t),eNo=i(X),N2=n(X,"LI",{});var yLe=s(N2);Zfe=n(yLe,"STRONG",{});var Sat=s(Zfe);oNo=r(Sat,"layoutlmv2"),Sat.forEach(t),rNo=r(yLe," \u2014 "),zG=n(yLe,"A",{href:!0});var Rat=s(zG);tNo=r(Rat,"LayoutLMv2ForQuestionAnswering"),Rat.forEach(t),aNo=r(yLe," (LayoutLMv2 model)"),yLe.forEach(t),nNo=i(X),j2=n(X,"LI",{});var LLe=s(j2);eme=n(LLe,"STRONG",{});var Bat=s(eme);sNo=r(Bat,"led"),Bat.forEach(t),lNo=r(LLe," \u2014 "),QG=n(LLe,"A",{href:!0});var Pat=s(QG);iNo=r(Pat,"LEDForQuestionAnswering"),Pat.forEach(t),dNo=r(LLe," (LED model)"),LLe.forEach(t),cNo=i(X),D2=n(X,"LI",{});var xLe=s(D2);ome=n(xLe,"STRONG",{});var Iat=s(ome);fNo=r(Iat,"longformer"),Iat.forEach(t),mNo=r(xLe," \u2014 "),WG=n(xLe,"A",{href:!0});var qat=s(WG);gNo=r(qat,"LongformerForQuestionAnswering"),qat.forEach(t),hNo=r(xLe," (Longformer model)"),xLe.forEach(t),pNo=i(X),G2=n(X,"LI",{});var $Le=s(G2);rme=n($Le,"STRONG",{});var Nat=s(rme);uNo=r(Nat,"lxmert"),Nat.forEach(t),_No=r($Le," \u2014 "),HG=n($Le,"A",{href:!0});var jat=s(HG);bNo=r(jat,"LxmertForQuestionAnswering"),jat.forEach(t),vNo=r($Le," (LXMERT model)"),$Le.forEach(t),FNo=i(X),O2=n(X,"LI",{});var kLe=s(O2);tme=n(kLe,"STRONG",{});var Dat=s(tme);TNo=r(Dat,"mbart"),Dat.forEach(t),MNo=r(kLe," \u2014 "),UG=n(kLe,"A",{href:!0});var Gat=s(UG);ENo=r(Gat,"MBartForQuestionAnswering"),Gat.forEach(t),CNo=r(kLe," (mBART model)"),kLe.forEach(t),wNo=i(X),V2=n(X,"LI",{});var SLe=s(V2);ame=n(SLe,"STRONG",{});var Oat=s(ame);ANo=r(Oat,"megatron-bert"),Oat.forEach(t),yNo=r(SLe," \u2014 "),JG=n(SLe,"A",{href:!0});var Vat=s(JG);LNo=r(Vat,"MegatronBertForQuestionAnswering"),Vat.forEach(t),xNo=r(SLe," (MegatronBert model)"),SLe.forEach(t),$No=i(X),X2=n(X,"LI",{});var RLe=s(X2);nme=n(RLe,"STRONG",{});var Xat=s(nme);kNo=r(Xat,"mobilebert"),Xat.forEach(t),SNo=r(RLe," \u2014 "),YG=n(RLe,"A",{href:!0});var zat=s(YG);RNo=r(zat,"MobileBertForQuestionAnswering"),zat.forEach(t),BNo=r(RLe," (MobileBERT model)"),RLe.forEach(t),PNo=i(X),z2=n(X,"LI",{});var BLe=s(z2);sme=n(BLe,"STRONG",{});var Qat=s(sme);INo=r(Qat,"mpnet"),Qat.forEach(t),qNo=r(BLe," \u2014 "),KG=n(BLe,"A",{href:!0});var Wat=s(KG);NNo=r(Wat,"MPNetForQuestionAnswering"),Wat.forEach(t),jNo=r(BLe," (MPNet model)"),BLe.forEach(t),DNo=i(X),Q2=n(X,"LI",{});var PLe=s(Q2);lme=n(PLe,"STRONG",{});var Hat=s(lme);GNo=r(Hat,"nystromformer"),Hat.forEach(t),ONo=r(PLe," \u2014 "),ZG=n(PLe,"A",{href:!0});var Uat=s(ZG);VNo=r(Uat,"NystromformerForQuestionAnswering"),Uat.forEach(t),XNo=r(PLe," (Nystromformer model)"),PLe.forEach(t),zNo=i(X),W2=n(X,"LI",{});var ILe=s(W2);ime=n(ILe,"STRONG",{});var Jat=s(ime);QNo=r(Jat,"qdqbert"),Jat.forEach(t),WNo=r(ILe," \u2014 "),eO=n(ILe,"A",{href:!0});var Yat=s(eO);HNo=r(Yat,"QDQBertForQuestionAnswering"),Yat.forEach(t),UNo=r(ILe," (QDQBert model)"),ILe.forEach(t),JNo=i(X),H2=n(X,"LI",{});var qLe=s(H2);dme=n(qLe,"STRONG",{});var Kat=s(dme);YNo=r(Kat,"reformer"),Kat.forEach(t),KNo=r(qLe," \u2014 "),oO=n(qLe,"A",{href:!0});var Zat=s(oO);ZNo=r(Zat,"ReformerForQuestionAnswering"),Zat.forEach(t),ejo=r(qLe," (Reformer model)"),qLe.forEach(t),ojo=i(X),U2=n(X,"LI",{});var NLe=s(U2);cme=n(NLe,"STRONG",{});var ent=s(cme);rjo=r(ent,"rembert"),ent.forEach(t),tjo=r(NLe," \u2014 "),rO=n(NLe,"A",{href:!0});var ont=s(rO);ajo=r(ont,"RemBertForQuestionAnswering"),ont.forEach(t),njo=r(NLe," (RemBERT model)"),NLe.forEach(t),sjo=i(X),J2=n(X,"LI",{});var jLe=s(J2);fme=n(jLe,"STRONG",{});var rnt=s(fme);ljo=r(rnt,"roberta"),rnt.forEach(t),ijo=r(jLe," \u2014 "),tO=n(jLe,"A",{href:!0});var tnt=s(tO);djo=r(tnt,"RobertaForQuestionAnswering"),tnt.forEach(t),cjo=r(jLe," (RoBERTa model)"),jLe.forEach(t),fjo=i(X),Y2=n(X,"LI",{});var DLe=s(Y2);mme=n(DLe,"STRONG",{});var ant=s(mme);mjo=r(ant,"roformer"),ant.forEach(t),gjo=r(DLe," \u2014 "),aO=n(DLe,"A",{href:!0});var nnt=s(aO);hjo=r(nnt,"RoFormerForQuestionAnswering"),nnt.forEach(t),pjo=r(DLe," (RoFormer model)"),DLe.forEach(t),ujo=i(X),K2=n(X,"LI",{});var GLe=s(K2);gme=n(GLe,"STRONG",{});var snt=s(gme);_jo=r(snt,"splinter"),snt.forEach(t),bjo=r(GLe," \u2014 "),nO=n(GLe,"A",{href:!0});var lnt=s(nO);vjo=r(lnt,"SplinterForQuestionAnswering"),lnt.forEach(t),Fjo=r(GLe," (Splinter model)"),GLe.forEach(t),Tjo=i(X),Z2=n(X,"LI",{});var OLe=s(Z2);hme=n(OLe,"STRONG",{});var int=s(hme);Mjo=r(int,"squeezebert"),int.forEach(t),Ejo=r(OLe," \u2014 "),sO=n(OLe,"A",{href:!0});var dnt=s(sO);Cjo=r(dnt,"SqueezeBertForQuestionAnswering"),dnt.forEach(t),wjo=r(OLe," (SqueezeBERT model)"),OLe.forEach(t),Ajo=i(X),e5=n(X,"LI",{});var VLe=s(e5);pme=n(VLe,"STRONG",{});var cnt=s(pme);yjo=r(cnt,"xlm"),cnt.forEach(t),Ljo=r(VLe," \u2014 "),lO=n(VLe,"A",{href:!0});var fnt=s(lO);xjo=r(fnt,"XLMForQuestionAnsweringSimple"),fnt.forEach(t),$jo=r(VLe," (XLM model)"),VLe.forEach(t),kjo=i(X),o5=n(X,"LI",{});var XLe=s(o5);ume=n(XLe,"STRONG",{});var mnt=s(ume);Sjo=r(mnt,"xlm-roberta"),mnt.forEach(t),Rjo=r(XLe," \u2014 "),iO=n(XLe,"A",{href:!0});var gnt=s(iO);Bjo=r(gnt,"XLMRobertaForQuestionAnswering"),gnt.forEach(t),Pjo=r(XLe," (XLM-RoBERTa model)"),XLe.forEach(t),Ijo=i(X),r5=n(X,"LI",{});var zLe=s(r5);_me=n(zLe,"STRONG",{});var hnt=s(_me);qjo=r(hnt,"xlm-roberta-xl"),hnt.forEach(t),Njo=r(zLe," \u2014 "),dO=n(zLe,"A",{href:!0});var pnt=s(dO);jjo=r(pnt,"XLMRobertaXLForQuestionAnswering"),pnt.forEach(t),Djo=r(zLe," (XLM-RoBERTa-XL model)"),zLe.forEach(t),Gjo=i(X),t5=n(X,"LI",{});var QLe=s(t5);bme=n(QLe,"STRONG",{});var unt=s(bme);Ojo=r(unt,"xlnet"),unt.forEach(t),Vjo=r(QLe," \u2014 "),cO=n(QLe,"A",{href:!0});var _nt=s(cO);Xjo=r(_nt,"XLNetForQuestionAnsweringSimple"),_nt.forEach(t),zjo=r(QLe," (XLNet model)"),QLe.forEach(t),Qjo=i(X),a5=n(X,"LI",{});var WLe=s(a5);vme=n(WLe,"STRONG",{});var bnt=s(vme);Wjo=r(bnt,"yoso"),bnt.forEach(t),Hjo=r(WLe," \u2014 "),fO=n(WLe,"A",{href:!0});var vnt=s(fO);Ujo=r(vnt,"YosoForQuestionAnswering"),vnt.forEach(t),Jjo=r(WLe," (YOSO model)"),WLe.forEach(t),X.forEach(t),Yjo=i(aa),n5=n(aa,"P",{});var HLe=s(n5);Kjo=r(HLe,"The model is set in evaluation mode by default using "),Fme=n(HLe,"CODE",{});var Fnt=s(Fme);Zjo=r(Fnt,"model.eval()"),Fnt.forEach(t),eDo=r(HLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Tme=n(HLe,"CODE",{});var Tnt=s(Tme);oDo=r(Tnt,"model.train()"),Tnt.forEach(t),HLe.forEach(t),rDo=i(aa),T(s5.$$.fragment,aa),aa.forEach(t),zs.forEach(t),cBe=i(f),zi=n(f,"H2",{class:!0});var mIe=s(zi);l5=n(mIe,"A",{id:!0,class:!0,href:!0});var Mnt=s(l5);Mme=n(Mnt,"SPAN",{});var Ent=s(Mme);T(I0.$$.fragment,Ent),Ent.forEach(t),Mnt.forEach(t),tDo=i(mIe),Eme=n(mIe,"SPAN",{});var Cnt=s(Eme);aDo=r(Cnt,"AutoModelForTableQuestionAnswering"),Cnt.forEach(t),mIe.forEach(t),fBe=i(f),Io=n(f,"DIV",{class:!0});var Qs=s(Io);T(q0.$$.fragment,Qs),nDo=i(Qs),Qi=n(Qs,"P",{});var hY=s(Qi);sDo=r(hY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),mO=n(hY,"A",{href:!0});var wnt=s(mO);lDo=r(wnt,"from_pretrained()"),wnt.forEach(t),iDo=r(hY," class method or the "),gO=n(hY,"A",{href:!0});var Ant=s(gO);dDo=r(Ant,"from_config()"),Ant.forEach(t),cDo=r(hY,` class
method.`),hY.forEach(t),fDo=i(Qs),N0=n(Qs,"P",{});var gIe=s(N0);mDo=r(gIe,"This class cannot be instantiated directly using "),Cme=n(gIe,"CODE",{});var ynt=s(Cme);gDo=r(ynt,"__init__()"),ynt.forEach(t),hDo=r(gIe," (throws an error)."),gIe.forEach(t),pDo=i(Qs),it=n(Qs,"DIV",{class:!0});var j3=s(it);T(j0.$$.fragment,j3),uDo=i(j3),wme=n(j3,"P",{});var Lnt=s(wme);_Do=r(Lnt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Lnt.forEach(t),bDo=i(j3),Wi=n(j3,"P",{});var pY=s(Wi);vDo=r(pY,`Note:
Loading a model from its configuration file does `),Ame=n(pY,"STRONG",{});var xnt=s(Ame);FDo=r(xnt,"not"),xnt.forEach(t),TDo=r(pY,` load the model weights. It only affects the
model\u2019s configuration. Use `),hO=n(pY,"A",{href:!0});var $nt=s(hO);MDo=r($nt,"from_pretrained()"),$nt.forEach(t),EDo=r(pY," to load the model weights."),pY.forEach(t),CDo=i(j3),T(i5.$$.fragment,j3),j3.forEach(t),wDo=i(Qs),ro=n(Qs,"DIV",{class:!0});var na=s(ro);T(D0.$$.fragment,na),ADo=i(na),yme=n(na,"P",{});var knt=s(yme);yDo=r(knt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),knt.forEach(t),LDo=i(na),Ra=n(na,"P",{});var D3=s(Ra);xDo=r(D3,"The model class to instantiate is selected based on the "),Lme=n(D3,"CODE",{});var Snt=s(Lme);$Do=r(Snt,"model_type"),Snt.forEach(t),kDo=r(D3,` property of the config object (either
passed as an argument or loaded from `),xme=n(D3,"CODE",{});var Rnt=s(xme);SDo=r(Rnt,"pretrained_model_name_or_path"),Rnt.forEach(t),RDo=r(D3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$me=n(D3,"CODE",{});var Bnt=s($me);BDo=r(Bnt,"pretrained_model_name_or_path"),Bnt.forEach(t),PDo=r(D3,":"),D3.forEach(t),IDo=i(na),kme=n(na,"UL",{});var Pnt=s(kme);d5=n(Pnt,"LI",{});var ULe=s(d5);Sme=n(ULe,"STRONG",{});var Int=s(Sme);qDo=r(Int,"tapas"),Int.forEach(t),NDo=r(ULe," \u2014 "),pO=n(ULe,"A",{href:!0});var qnt=s(pO);jDo=r(qnt,"TapasForQuestionAnswering"),qnt.forEach(t),DDo=r(ULe," (TAPAS model)"),ULe.forEach(t),Pnt.forEach(t),GDo=i(na),c5=n(na,"P",{});var JLe=s(c5);ODo=r(JLe,"The model is set in evaluation mode by default using "),Rme=n(JLe,"CODE",{});var Nnt=s(Rme);VDo=r(Nnt,"model.eval()"),Nnt.forEach(t),XDo=r(JLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Bme=n(JLe,"CODE",{});var jnt=s(Bme);zDo=r(jnt,"model.train()"),jnt.forEach(t),JLe.forEach(t),QDo=i(na),T(f5.$$.fragment,na),na.forEach(t),Qs.forEach(t),mBe=i(f),Hi=n(f,"H2",{class:!0});var hIe=s(Hi);m5=n(hIe,"A",{id:!0,class:!0,href:!0});var Dnt=s(m5);Pme=n(Dnt,"SPAN",{});var Gnt=s(Pme);T(G0.$$.fragment,Gnt),Gnt.forEach(t),Dnt.forEach(t),WDo=i(hIe),Ime=n(hIe,"SPAN",{});var Ont=s(Ime);HDo=r(Ont,"AutoModelForImageClassification"),Ont.forEach(t),hIe.forEach(t),gBe=i(f),qo=n(f,"DIV",{class:!0});var Ws=s(qo);T(O0.$$.fragment,Ws),UDo=i(Ws),Ui=n(Ws,"P",{});var uY=s(Ui);JDo=r(uY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),uO=n(uY,"A",{href:!0});var Vnt=s(uO);YDo=r(Vnt,"from_pretrained()"),Vnt.forEach(t),KDo=r(uY," class method or the "),_O=n(uY,"A",{href:!0});var Xnt=s(_O);ZDo=r(Xnt,"from_config()"),Xnt.forEach(t),eGo=r(uY,` class
method.`),uY.forEach(t),oGo=i(Ws),V0=n(Ws,"P",{});var pIe=s(V0);rGo=r(pIe,"This class cannot be instantiated directly using "),qme=n(pIe,"CODE",{});var znt=s(qme);tGo=r(znt,"__init__()"),znt.forEach(t),aGo=r(pIe," (throws an error)."),pIe.forEach(t),nGo=i(Ws),dt=n(Ws,"DIV",{class:!0});var G3=s(dt);T(X0.$$.fragment,G3),sGo=i(G3),Nme=n(G3,"P",{});var Qnt=s(Nme);lGo=r(Qnt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Qnt.forEach(t),iGo=i(G3),Ji=n(G3,"P",{});var _Y=s(Ji);dGo=r(_Y,`Note:
Loading a model from its configuration file does `),jme=n(_Y,"STRONG",{});var Wnt=s(jme);cGo=r(Wnt,"not"),Wnt.forEach(t),fGo=r(_Y,` load the model weights. It only affects the
model\u2019s configuration. Use `),bO=n(_Y,"A",{href:!0});var Hnt=s(bO);mGo=r(Hnt,"from_pretrained()"),Hnt.forEach(t),gGo=r(_Y," to load the model weights."),_Y.forEach(t),hGo=i(G3),T(g5.$$.fragment,G3),G3.forEach(t),pGo=i(Ws),to=n(Ws,"DIV",{class:!0});var sa=s(to);T(z0.$$.fragment,sa),uGo=i(sa),Dme=n(sa,"P",{});var Unt=s(Dme);_Go=r(Unt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Unt.forEach(t),bGo=i(sa),Ba=n(sa,"P",{});var O3=s(Ba);vGo=r(O3,"The model class to instantiate is selected based on the "),Gme=n(O3,"CODE",{});var Jnt=s(Gme);FGo=r(Jnt,"model_type"),Jnt.forEach(t),TGo=r(O3,` property of the config object (either
passed as an argument or loaded from `),Ome=n(O3,"CODE",{});var Ynt=s(Ome);MGo=r(Ynt,"pretrained_model_name_or_path"),Ynt.forEach(t),EGo=r(O3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vme=n(O3,"CODE",{});var Knt=s(Vme);CGo=r(Knt,"pretrained_model_name_or_path"),Knt.forEach(t),wGo=r(O3,":"),O3.forEach(t),AGo=i(sa),ve=n(sa,"UL",{});var Ee=s(ve);h5=n(Ee,"LI",{});var YLe=s(h5);Xme=n(YLe,"STRONG",{});var Znt=s(Xme);yGo=r(Znt,"beit"),Znt.forEach(t),LGo=r(YLe," \u2014 "),vO=n(YLe,"A",{href:!0});var est=s(vO);xGo=r(est,"BeitForImageClassification"),est.forEach(t),$Go=r(YLe," (BEiT model)"),YLe.forEach(t),kGo=i(Ee),p5=n(Ee,"LI",{});var KLe=s(p5);zme=n(KLe,"STRONG",{});var ost=s(zme);SGo=r(ost,"convnext"),ost.forEach(t),RGo=r(KLe," \u2014 "),FO=n(KLe,"A",{href:!0});var rst=s(FO);BGo=r(rst,"ConvNextForImageClassification"),rst.forEach(t),PGo=r(KLe," (ConvNext model)"),KLe.forEach(t),IGo=i(Ee),u5=n(Ee,"LI",{});var ZLe=s(u5);Qme=n(ZLe,"STRONG",{});var tst=s(Qme);qGo=r(tst,"data2vec-vision"),tst.forEach(t),NGo=r(ZLe," \u2014 "),TO=n(ZLe,"A",{href:!0});var ast=s(TO);jGo=r(ast,"Data2VecVisionForImageClassification"),ast.forEach(t),DGo=r(ZLe," (Data2VecVision model)"),ZLe.forEach(t),GGo=i(Ee),xs=n(Ee,"LI",{});var Ex=s(xs);Wme=n(Ex,"STRONG",{});var nst=s(Wme);OGo=r(nst,"deit"),nst.forEach(t),VGo=r(Ex," \u2014 "),MO=n(Ex,"A",{href:!0});var sst=s(MO);XGo=r(sst,"DeiTForImageClassification"),sst.forEach(t),zGo=r(Ex," or "),EO=n(Ex,"A",{href:!0});var lst=s(EO);QGo=r(lst,"DeiTForImageClassificationWithTeacher"),lst.forEach(t),WGo=r(Ex," (DeiT model)"),Ex.forEach(t),HGo=i(Ee),_5=n(Ee,"LI",{});var e8e=s(_5);Hme=n(e8e,"STRONG",{});var ist=s(Hme);UGo=r(ist,"imagegpt"),ist.forEach(t),JGo=r(e8e," \u2014 "),CO=n(e8e,"A",{href:!0});var dst=s(CO);YGo=r(dst,"ImageGPTForImageClassification"),dst.forEach(t),KGo=r(e8e," (ImageGPT model)"),e8e.forEach(t),ZGo=i(Ee),ct=n(Ee,"LI",{});var ef=s(ct);Ume=n(ef,"STRONG",{});var cst=s(Ume);eOo=r(cst,"perceiver"),cst.forEach(t),oOo=r(ef," \u2014 "),wO=n(ef,"A",{href:!0});var fst=s(wO);rOo=r(fst,"PerceiverForImageClassificationLearned"),fst.forEach(t),tOo=r(ef," or "),AO=n(ef,"A",{href:!0});var mst=s(AO);aOo=r(mst,"PerceiverForImageClassificationFourier"),mst.forEach(t),nOo=r(ef," or "),yO=n(ef,"A",{href:!0});var gst=s(yO);sOo=r(gst,"PerceiverForImageClassificationConvProcessing"),gst.forEach(t),lOo=r(ef," (Perceiver model)"),ef.forEach(t),iOo=i(Ee),b5=n(Ee,"LI",{});var o8e=s(b5);Jme=n(o8e,"STRONG",{});var hst=s(Jme);dOo=r(hst,"poolformer"),hst.forEach(t),cOo=r(o8e," \u2014 "),LO=n(o8e,"A",{href:!0});var pst=s(LO);fOo=r(pst,"PoolFormerForImageClassification"),pst.forEach(t),mOo=r(o8e," (PoolFormer model)"),o8e.forEach(t),gOo=i(Ee),v5=n(Ee,"LI",{});var r8e=s(v5);Yme=n(r8e,"STRONG",{});var ust=s(Yme);hOo=r(ust,"regnet"),ust.forEach(t),pOo=r(r8e," \u2014 "),xO=n(r8e,"A",{href:!0});var _st=s(xO);uOo=r(_st,"RegNetForImageClassification"),_st.forEach(t),_Oo=r(r8e," (RegNet model)"),r8e.forEach(t),bOo=i(Ee),F5=n(Ee,"LI",{});var t8e=s(F5);Kme=n(t8e,"STRONG",{});var bst=s(Kme);vOo=r(bst,"resnet"),bst.forEach(t),FOo=r(t8e," \u2014 "),$O=n(t8e,"A",{href:!0});var vst=s($O);TOo=r(vst,"ResNetForImageClassification"),vst.forEach(t),MOo=r(t8e," (ResNet model)"),t8e.forEach(t),EOo=i(Ee),T5=n(Ee,"LI",{});var a8e=s(T5);Zme=n(a8e,"STRONG",{});var Fst=s(Zme);COo=r(Fst,"segformer"),Fst.forEach(t),wOo=r(a8e," \u2014 "),kO=n(a8e,"A",{href:!0});var Tst=s(kO);AOo=r(Tst,"SegformerForImageClassification"),Tst.forEach(t),yOo=r(a8e," (SegFormer model)"),a8e.forEach(t),LOo=i(Ee),M5=n(Ee,"LI",{});var n8e=s(M5);ege=n(n8e,"STRONG",{});var Mst=s(ege);xOo=r(Mst,"swin"),Mst.forEach(t),$Oo=r(n8e," \u2014 "),SO=n(n8e,"A",{href:!0});var Est=s(SO);kOo=r(Est,"SwinForImageClassification"),Est.forEach(t),SOo=r(n8e," (Swin model)"),n8e.forEach(t),ROo=i(Ee),E5=n(Ee,"LI",{});var s8e=s(E5);oge=n(s8e,"STRONG",{});var Cst=s(oge);BOo=r(Cst,"van"),Cst.forEach(t),POo=r(s8e," \u2014 "),RO=n(s8e,"A",{href:!0});var wst=s(RO);IOo=r(wst,"VanForImageClassification"),wst.forEach(t),qOo=r(s8e," (VAN model)"),s8e.forEach(t),NOo=i(Ee),C5=n(Ee,"LI",{});var l8e=s(C5);rge=n(l8e,"STRONG",{});var Ast=s(rge);jOo=r(Ast,"vit"),Ast.forEach(t),DOo=r(l8e," \u2014 "),BO=n(l8e,"A",{href:!0});var yst=s(BO);GOo=r(yst,"ViTForImageClassification"),yst.forEach(t),OOo=r(l8e," (ViT model)"),l8e.forEach(t),Ee.forEach(t),VOo=i(sa),w5=n(sa,"P",{});var i8e=s(w5);XOo=r(i8e,"The model is set in evaluation mode by default using "),tge=n(i8e,"CODE",{});var Lst=s(tge);zOo=r(Lst,"model.eval()"),Lst.forEach(t),QOo=r(i8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),age=n(i8e,"CODE",{});var xst=s(age);WOo=r(xst,"model.train()"),xst.forEach(t),i8e.forEach(t),HOo=i(sa),T(A5.$$.fragment,sa),sa.forEach(t),Ws.forEach(t),hBe=i(f),Yi=n(f,"H2",{class:!0});var uIe=s(Yi);y5=n(uIe,"A",{id:!0,class:!0,href:!0});var $st=s(y5);nge=n($st,"SPAN",{});var kst=s(nge);T(Q0.$$.fragment,kst),kst.forEach(t),$st.forEach(t),UOo=i(uIe),sge=n(uIe,"SPAN",{});var Sst=s(sge);JOo=r(Sst,"AutoModelForVision2Seq"),Sst.forEach(t),uIe.forEach(t),pBe=i(f),No=n(f,"DIV",{class:!0});var Hs=s(No);T(W0.$$.fragment,Hs),YOo=i(Hs),Ki=n(Hs,"P",{});var bY=s(Ki);KOo=r(bY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),PO=n(bY,"A",{href:!0});var Rst=s(PO);ZOo=r(Rst,"from_pretrained()"),Rst.forEach(t),eVo=r(bY," class method or the "),IO=n(bY,"A",{href:!0});var Bst=s(IO);oVo=r(Bst,"from_config()"),Bst.forEach(t),rVo=r(bY,` class
method.`),bY.forEach(t),tVo=i(Hs),H0=n(Hs,"P",{});var _Ie=s(H0);aVo=r(_Ie,"This class cannot be instantiated directly using "),lge=n(_Ie,"CODE",{});var Pst=s(lge);nVo=r(Pst,"__init__()"),Pst.forEach(t),sVo=r(_Ie," (throws an error)."),_Ie.forEach(t),lVo=i(Hs),ft=n(Hs,"DIV",{class:!0});var V3=s(ft);T(U0.$$.fragment,V3),iVo=i(V3),ige=n(V3,"P",{});var Ist=s(ige);dVo=r(Ist,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Ist.forEach(t),cVo=i(V3),Zi=n(V3,"P",{});var vY=s(Zi);fVo=r(vY,`Note:
Loading a model from its configuration file does `),dge=n(vY,"STRONG",{});var qst=s(dge);mVo=r(qst,"not"),qst.forEach(t),gVo=r(vY,` load the model weights. It only affects the
model\u2019s configuration. Use `),qO=n(vY,"A",{href:!0});var Nst=s(qO);hVo=r(Nst,"from_pretrained()"),Nst.forEach(t),pVo=r(vY," to load the model weights."),vY.forEach(t),uVo=i(V3),T(L5.$$.fragment,V3),V3.forEach(t),_Vo=i(Hs),ao=n(Hs,"DIV",{class:!0});var la=s(ao);T(J0.$$.fragment,la),bVo=i(la),cge=n(la,"P",{});var jst=s(cge);vVo=r(jst,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),jst.forEach(t),FVo=i(la),Pa=n(la,"P",{});var X3=s(Pa);TVo=r(X3,"The model class to instantiate is selected based on the "),fge=n(X3,"CODE",{});var Dst=s(fge);MVo=r(Dst,"model_type"),Dst.forEach(t),EVo=r(X3,` property of the config object (either
passed as an argument or loaded from `),mge=n(X3,"CODE",{});var Gst=s(mge);CVo=r(Gst,"pretrained_model_name_or_path"),Gst.forEach(t),wVo=r(X3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gge=n(X3,"CODE",{});var Ost=s(gge);AVo=r(Ost,"pretrained_model_name_or_path"),Ost.forEach(t),yVo=r(X3,":"),X3.forEach(t),LVo=i(la),hge=n(la,"UL",{});var Vst=s(hge);x5=n(Vst,"LI",{});var d8e=s(x5);pge=n(d8e,"STRONG",{});var Xst=s(pge);xVo=r(Xst,"vision-encoder-decoder"),Xst.forEach(t),$Vo=r(d8e," \u2014 "),NO=n(d8e,"A",{href:!0});var zst=s(NO);kVo=r(zst,"VisionEncoderDecoderModel"),zst.forEach(t),SVo=r(d8e," (Vision Encoder decoder model)"),d8e.forEach(t),Vst.forEach(t),RVo=i(la),$5=n(la,"P",{});var c8e=s($5);BVo=r(c8e,"The model is set in evaluation mode by default using "),uge=n(c8e,"CODE",{});var Qst=s(uge);PVo=r(Qst,"model.eval()"),Qst.forEach(t),IVo=r(c8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_ge=n(c8e,"CODE",{});var Wst=s(_ge);qVo=r(Wst,"model.train()"),Wst.forEach(t),c8e.forEach(t),NVo=i(la),T(k5.$$.fragment,la),la.forEach(t),Hs.forEach(t),uBe=i(f),ed=n(f,"H2",{class:!0});var bIe=s(ed);S5=n(bIe,"A",{id:!0,class:!0,href:!0});var Hst=s(S5);bge=n(Hst,"SPAN",{});var Ust=s(bge);T(Y0.$$.fragment,Ust),Ust.forEach(t),Hst.forEach(t),jVo=i(bIe),vge=n(bIe,"SPAN",{});var Jst=s(vge);DVo=r(Jst,"AutoModelForAudioClassification"),Jst.forEach(t),bIe.forEach(t),_Be=i(f),jo=n(f,"DIV",{class:!0});var Us=s(jo);T(K0.$$.fragment,Us),GVo=i(Us),od=n(Us,"P",{});var FY=s(od);OVo=r(FY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),jO=n(FY,"A",{href:!0});var Yst=s(jO);VVo=r(Yst,"from_pretrained()"),Yst.forEach(t),XVo=r(FY," class method or the "),DO=n(FY,"A",{href:!0});var Kst=s(DO);zVo=r(Kst,"from_config()"),Kst.forEach(t),QVo=r(FY,` class
method.`),FY.forEach(t),WVo=i(Us),Z0=n(Us,"P",{});var vIe=s(Z0);HVo=r(vIe,"This class cannot be instantiated directly using "),Fge=n(vIe,"CODE",{});var Zst=s(Fge);UVo=r(Zst,"__init__()"),Zst.forEach(t),JVo=r(vIe," (throws an error)."),vIe.forEach(t),YVo=i(Us),mt=n(Us,"DIV",{class:!0});var z3=s(mt);T(ey.$$.fragment,z3),KVo=i(z3),Tge=n(z3,"P",{});var elt=s(Tge);ZVo=r(elt,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),elt.forEach(t),eXo=i(z3),rd=n(z3,"P",{});var TY=s(rd);oXo=r(TY,`Note:
Loading a model from its configuration file does `),Mge=n(TY,"STRONG",{});var olt=s(Mge);rXo=r(olt,"not"),olt.forEach(t),tXo=r(TY,` load the model weights. It only affects the
model\u2019s configuration. Use `),GO=n(TY,"A",{href:!0});var rlt=s(GO);aXo=r(rlt,"from_pretrained()"),rlt.forEach(t),nXo=r(TY," to load the model weights."),TY.forEach(t),sXo=i(z3),T(R5.$$.fragment,z3),z3.forEach(t),lXo=i(Us),no=n(Us,"DIV",{class:!0});var ia=s(no);T(oy.$$.fragment,ia),iXo=i(ia),Ege=n(ia,"P",{});var tlt=s(Ege);dXo=r(tlt,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),tlt.forEach(t),cXo=i(ia),Ia=n(ia,"P",{});var Q3=s(Ia);fXo=r(Q3,"The model class to instantiate is selected based on the "),Cge=n(Q3,"CODE",{});var alt=s(Cge);mXo=r(alt,"model_type"),alt.forEach(t),gXo=r(Q3,` property of the config object (either
passed as an argument or loaded from `),wge=n(Q3,"CODE",{});var nlt=s(wge);hXo=r(nlt,"pretrained_model_name_or_path"),nlt.forEach(t),pXo=r(Q3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Age=n(Q3,"CODE",{});var slt=s(Age);uXo=r(slt,"pretrained_model_name_or_path"),slt.forEach(t),_Xo=r(Q3,":"),Q3.forEach(t),bXo=i(ia),qe=n(ia,"UL",{});var uo=s(qe);B5=n(uo,"LI",{});var f8e=s(B5);yge=n(f8e,"STRONG",{});var llt=s(yge);vXo=r(llt,"data2vec-audio"),llt.forEach(t),FXo=r(f8e," \u2014 "),OO=n(f8e,"A",{href:!0});var ilt=s(OO);TXo=r(ilt,"Data2VecAudioForSequenceClassification"),ilt.forEach(t),MXo=r(f8e," (Data2VecAudio model)"),f8e.forEach(t),EXo=i(uo),P5=n(uo,"LI",{});var m8e=s(P5);Lge=n(m8e,"STRONG",{});var dlt=s(Lge);CXo=r(dlt,"hubert"),dlt.forEach(t),wXo=r(m8e," \u2014 "),VO=n(m8e,"A",{href:!0});var clt=s(VO);AXo=r(clt,"HubertForSequenceClassification"),clt.forEach(t),yXo=r(m8e," (Hubert model)"),m8e.forEach(t),LXo=i(uo),I5=n(uo,"LI",{});var g8e=s(I5);xge=n(g8e,"STRONG",{});var flt=s(xge);xXo=r(flt,"sew"),flt.forEach(t),$Xo=r(g8e," \u2014 "),XO=n(g8e,"A",{href:!0});var mlt=s(XO);kXo=r(mlt,"SEWForSequenceClassification"),mlt.forEach(t),SXo=r(g8e," (SEW model)"),g8e.forEach(t),RXo=i(uo),q5=n(uo,"LI",{});var h8e=s(q5);$ge=n(h8e,"STRONG",{});var glt=s($ge);BXo=r(glt,"sew-d"),glt.forEach(t),PXo=r(h8e," \u2014 "),zO=n(h8e,"A",{href:!0});var hlt=s(zO);IXo=r(hlt,"SEWDForSequenceClassification"),hlt.forEach(t),qXo=r(h8e," (SEW-D model)"),h8e.forEach(t),NXo=i(uo),N5=n(uo,"LI",{});var p8e=s(N5);kge=n(p8e,"STRONG",{});var plt=s(kge);jXo=r(plt,"unispeech"),plt.forEach(t),DXo=r(p8e," \u2014 "),QO=n(p8e,"A",{href:!0});var ult=s(QO);GXo=r(ult,"UniSpeechForSequenceClassification"),ult.forEach(t),OXo=r(p8e," (UniSpeech model)"),p8e.forEach(t),VXo=i(uo),j5=n(uo,"LI",{});var u8e=s(j5);Sge=n(u8e,"STRONG",{});var _lt=s(Sge);XXo=r(_lt,"unispeech-sat"),_lt.forEach(t),zXo=r(u8e," \u2014 "),WO=n(u8e,"A",{href:!0});var blt=s(WO);QXo=r(blt,"UniSpeechSatForSequenceClassification"),blt.forEach(t),WXo=r(u8e," (UniSpeechSat model)"),u8e.forEach(t),HXo=i(uo),D5=n(uo,"LI",{});var _8e=s(D5);Rge=n(_8e,"STRONG",{});var vlt=s(Rge);UXo=r(vlt,"wav2vec2"),vlt.forEach(t),JXo=r(_8e," \u2014 "),HO=n(_8e,"A",{href:!0});var Flt=s(HO);YXo=r(Flt,"Wav2Vec2ForSequenceClassification"),Flt.forEach(t),KXo=r(_8e," (Wav2Vec2 model)"),_8e.forEach(t),ZXo=i(uo),G5=n(uo,"LI",{});var b8e=s(G5);Bge=n(b8e,"STRONG",{});var Tlt=s(Bge);ezo=r(Tlt,"wavlm"),Tlt.forEach(t),ozo=r(b8e," \u2014 "),UO=n(b8e,"A",{href:!0});var Mlt=s(UO);rzo=r(Mlt,"WavLMForSequenceClassification"),Mlt.forEach(t),tzo=r(b8e," (WavLM model)"),b8e.forEach(t),uo.forEach(t),azo=i(ia),O5=n(ia,"P",{});var v8e=s(O5);nzo=r(v8e,"The model is set in evaluation mode by default using "),Pge=n(v8e,"CODE",{});var Elt=s(Pge);szo=r(Elt,"model.eval()"),Elt.forEach(t),lzo=r(v8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ige=n(v8e,"CODE",{});var Clt=s(Ige);izo=r(Clt,"model.train()"),Clt.forEach(t),v8e.forEach(t),dzo=i(ia),T(V5.$$.fragment,ia),ia.forEach(t),Us.forEach(t),bBe=i(f),td=n(f,"H2",{class:!0});var FIe=s(td);X5=n(FIe,"A",{id:!0,class:!0,href:!0});var wlt=s(X5);qge=n(wlt,"SPAN",{});var Alt=s(qge);T(ry.$$.fragment,Alt),Alt.forEach(t),wlt.forEach(t),czo=i(FIe),Nge=n(FIe,"SPAN",{});var ylt=s(Nge);fzo=r(ylt,"AutoModelForAudioFrameClassification"),ylt.forEach(t),FIe.forEach(t),vBe=i(f),Do=n(f,"DIV",{class:!0});var Js=s(Do);T(ty.$$.fragment,Js),mzo=i(Js),ad=n(Js,"P",{});var MY=s(ad);gzo=r(MY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),JO=n(MY,"A",{href:!0});var Llt=s(JO);hzo=r(Llt,"from_pretrained()"),Llt.forEach(t),pzo=r(MY," class method or the "),YO=n(MY,"A",{href:!0});var xlt=s(YO);uzo=r(xlt,"from_config()"),xlt.forEach(t),_zo=r(MY,` class
method.`),MY.forEach(t),bzo=i(Js),ay=n(Js,"P",{});var TIe=s(ay);vzo=r(TIe,"This class cannot be instantiated directly using "),jge=n(TIe,"CODE",{});var $lt=s(jge);Fzo=r($lt,"__init__()"),$lt.forEach(t),Tzo=r(TIe," (throws an error)."),TIe.forEach(t),Mzo=i(Js),gt=n(Js,"DIV",{class:!0});var W3=s(gt);T(ny.$$.fragment,W3),Ezo=i(W3),Dge=n(W3,"P",{});var klt=s(Dge);Czo=r(klt,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),klt.forEach(t),wzo=i(W3),nd=n(W3,"P",{});var EY=s(nd);Azo=r(EY,`Note:
Loading a model from its configuration file does `),Gge=n(EY,"STRONG",{});var Slt=s(Gge);yzo=r(Slt,"not"),Slt.forEach(t),Lzo=r(EY,` load the model weights. It only affects the
model\u2019s configuration. Use `),KO=n(EY,"A",{href:!0});var Rlt=s(KO);xzo=r(Rlt,"from_pretrained()"),Rlt.forEach(t),$zo=r(EY," to load the model weights."),EY.forEach(t),kzo=i(W3),T(z5.$$.fragment,W3),W3.forEach(t),Szo=i(Js),so=n(Js,"DIV",{class:!0});var da=s(so);T(sy.$$.fragment,da),Rzo=i(da),Oge=n(da,"P",{});var Blt=s(Oge);Bzo=r(Blt,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),Blt.forEach(t),Pzo=i(da),qa=n(da,"P",{});var H3=s(qa);Izo=r(H3,"The model class to instantiate is selected based on the "),Vge=n(H3,"CODE",{});var Plt=s(Vge);qzo=r(Plt,"model_type"),Plt.forEach(t),Nzo=r(H3,` property of the config object (either
passed as an argument or loaded from `),Xge=n(H3,"CODE",{});var Ilt=s(Xge);jzo=r(Ilt,"pretrained_model_name_or_path"),Ilt.forEach(t),Dzo=r(H3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zge=n(H3,"CODE",{});var qlt=s(zge);Gzo=r(qlt,"pretrained_model_name_or_path"),qlt.forEach(t),Ozo=r(H3,":"),H3.forEach(t),Vzo=i(da),Na=n(da,"UL",{});var U3=s(Na);Q5=n(U3,"LI",{});var F8e=s(Q5);Qge=n(F8e,"STRONG",{});var Nlt=s(Qge);Xzo=r(Nlt,"data2vec-audio"),Nlt.forEach(t),zzo=r(F8e," \u2014 "),ZO=n(F8e,"A",{href:!0});var jlt=s(ZO);Qzo=r(jlt,"Data2VecAudioForAudioFrameClassification"),jlt.forEach(t),Wzo=r(F8e," (Data2VecAudio model)"),F8e.forEach(t),Hzo=i(U3),W5=n(U3,"LI",{});var T8e=s(W5);Wge=n(T8e,"STRONG",{});var Dlt=s(Wge);Uzo=r(Dlt,"unispeech-sat"),Dlt.forEach(t),Jzo=r(T8e," \u2014 "),eV=n(T8e,"A",{href:!0});var Glt=s(eV);Yzo=r(Glt,"UniSpeechSatForAudioFrameClassification"),Glt.forEach(t),Kzo=r(T8e," (UniSpeechSat model)"),T8e.forEach(t),Zzo=i(U3),H5=n(U3,"LI",{});var M8e=s(H5);Hge=n(M8e,"STRONG",{});var Olt=s(Hge);eQo=r(Olt,"wav2vec2"),Olt.forEach(t),oQo=r(M8e," \u2014 "),oV=n(M8e,"A",{href:!0});var Vlt=s(oV);rQo=r(Vlt,"Wav2Vec2ForAudioFrameClassification"),Vlt.forEach(t),tQo=r(M8e," (Wav2Vec2 model)"),M8e.forEach(t),aQo=i(U3),U5=n(U3,"LI",{});var E8e=s(U5);Uge=n(E8e,"STRONG",{});var Xlt=s(Uge);nQo=r(Xlt,"wavlm"),Xlt.forEach(t),sQo=r(E8e," \u2014 "),rV=n(E8e,"A",{href:!0});var zlt=s(rV);lQo=r(zlt,"WavLMForAudioFrameClassification"),zlt.forEach(t),iQo=r(E8e," (WavLM model)"),E8e.forEach(t),U3.forEach(t),dQo=i(da),J5=n(da,"P",{});var C8e=s(J5);cQo=r(C8e,"The model is set in evaluation mode by default using "),Jge=n(C8e,"CODE",{});var Qlt=s(Jge);fQo=r(Qlt,"model.eval()"),Qlt.forEach(t),mQo=r(C8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Yge=n(C8e,"CODE",{});var Wlt=s(Yge);gQo=r(Wlt,"model.train()"),Wlt.forEach(t),C8e.forEach(t),hQo=i(da),T(Y5.$$.fragment,da),da.forEach(t),Js.forEach(t),FBe=i(f),sd=n(f,"H2",{class:!0});var MIe=s(sd);K5=n(MIe,"A",{id:!0,class:!0,href:!0});var Hlt=s(K5);Kge=n(Hlt,"SPAN",{});var Ult=s(Kge);T(ly.$$.fragment,Ult),Ult.forEach(t),Hlt.forEach(t),pQo=i(MIe),Zge=n(MIe,"SPAN",{});var Jlt=s(Zge);uQo=r(Jlt,"AutoModelForCTC"),Jlt.forEach(t),MIe.forEach(t),TBe=i(f),Go=n(f,"DIV",{class:!0});var Ys=s(Go);T(iy.$$.fragment,Ys),_Qo=i(Ys),ld=n(Ys,"P",{});var CY=s(ld);bQo=r(CY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),tV=n(CY,"A",{href:!0});var Ylt=s(tV);vQo=r(Ylt,"from_pretrained()"),Ylt.forEach(t),FQo=r(CY," class method or the "),aV=n(CY,"A",{href:!0});var Klt=s(aV);TQo=r(Klt,"from_config()"),Klt.forEach(t),MQo=r(CY,` class
method.`),CY.forEach(t),EQo=i(Ys),dy=n(Ys,"P",{});var EIe=s(dy);CQo=r(EIe,"This class cannot be instantiated directly using "),ehe=n(EIe,"CODE",{});var Zlt=s(ehe);wQo=r(Zlt,"__init__()"),Zlt.forEach(t),AQo=r(EIe," (throws an error)."),EIe.forEach(t),yQo=i(Ys),ht=n(Ys,"DIV",{class:!0});var J3=s(ht);T(cy.$$.fragment,J3),LQo=i(J3),ohe=n(J3,"P",{});var eit=s(ohe);xQo=r(eit,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),eit.forEach(t),$Qo=i(J3),id=n(J3,"P",{});var wY=s(id);kQo=r(wY,`Note:
Loading a model from its configuration file does `),rhe=n(wY,"STRONG",{});var oit=s(rhe);SQo=r(oit,"not"),oit.forEach(t),RQo=r(wY,` load the model weights. It only affects the
model\u2019s configuration. Use `),nV=n(wY,"A",{href:!0});var rit=s(nV);BQo=r(rit,"from_pretrained()"),rit.forEach(t),PQo=r(wY," to load the model weights."),wY.forEach(t),IQo=i(J3),T(Z5.$$.fragment,J3),J3.forEach(t),qQo=i(Ys),lo=n(Ys,"DIV",{class:!0});var ca=s(lo);T(fy.$$.fragment,ca),NQo=i(ca),the=n(ca,"P",{});var tit=s(the);jQo=r(tit,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),tit.forEach(t),DQo=i(ca),ja=n(ca,"P",{});var Y3=s(ja);GQo=r(Y3,"The model class to instantiate is selected based on the "),ahe=n(Y3,"CODE",{});var ait=s(ahe);OQo=r(ait,"model_type"),ait.forEach(t),VQo=r(Y3,` property of the config object (either
passed as an argument or loaded from `),nhe=n(Y3,"CODE",{});var nit=s(nhe);XQo=r(nit,"pretrained_model_name_or_path"),nit.forEach(t),zQo=r(Y3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),she=n(Y3,"CODE",{});var sit=s(she);QQo=r(sit,"pretrained_model_name_or_path"),sit.forEach(t),WQo=r(Y3,":"),Y3.forEach(t),HQo=i(ca),Ne=n(ca,"UL",{});var _o=s(Ne);ev=n(_o,"LI",{});var w8e=s(ev);lhe=n(w8e,"STRONG",{});var lit=s(lhe);UQo=r(lit,"data2vec-audio"),lit.forEach(t),JQo=r(w8e," \u2014 "),sV=n(w8e,"A",{href:!0});var iit=s(sV);YQo=r(iit,"Data2VecAudioForCTC"),iit.forEach(t),KQo=r(w8e," (Data2VecAudio model)"),w8e.forEach(t),ZQo=i(_o),ov=n(_o,"LI",{});var A8e=s(ov);ihe=n(A8e,"STRONG",{});var dit=s(ihe);eWo=r(dit,"hubert"),dit.forEach(t),oWo=r(A8e," \u2014 "),lV=n(A8e,"A",{href:!0});var cit=s(lV);rWo=r(cit,"HubertForCTC"),cit.forEach(t),tWo=r(A8e," (Hubert model)"),A8e.forEach(t),aWo=i(_o),rv=n(_o,"LI",{});var y8e=s(rv);dhe=n(y8e,"STRONG",{});var fit=s(dhe);nWo=r(fit,"sew"),fit.forEach(t),sWo=r(y8e," \u2014 "),iV=n(y8e,"A",{href:!0});var mit=s(iV);lWo=r(mit,"SEWForCTC"),mit.forEach(t),iWo=r(y8e," (SEW model)"),y8e.forEach(t),dWo=i(_o),tv=n(_o,"LI",{});var L8e=s(tv);che=n(L8e,"STRONG",{});var git=s(che);cWo=r(git,"sew-d"),git.forEach(t),fWo=r(L8e," \u2014 "),dV=n(L8e,"A",{href:!0});var hit=s(dV);mWo=r(hit,"SEWDForCTC"),hit.forEach(t),gWo=r(L8e," (SEW-D model)"),L8e.forEach(t),hWo=i(_o),av=n(_o,"LI",{});var x8e=s(av);fhe=n(x8e,"STRONG",{});var pit=s(fhe);pWo=r(pit,"unispeech"),pit.forEach(t),uWo=r(x8e," \u2014 "),cV=n(x8e,"A",{href:!0});var uit=s(cV);_Wo=r(uit,"UniSpeechForCTC"),uit.forEach(t),bWo=r(x8e," (UniSpeech model)"),x8e.forEach(t),vWo=i(_o),nv=n(_o,"LI",{});var $8e=s(nv);mhe=n($8e,"STRONG",{});var _it=s(mhe);FWo=r(_it,"unispeech-sat"),_it.forEach(t),TWo=r($8e," \u2014 "),fV=n($8e,"A",{href:!0});var bit=s(fV);MWo=r(bit,"UniSpeechSatForCTC"),bit.forEach(t),EWo=r($8e," (UniSpeechSat model)"),$8e.forEach(t),CWo=i(_o),sv=n(_o,"LI",{});var k8e=s(sv);ghe=n(k8e,"STRONG",{});var vit=s(ghe);wWo=r(vit,"wav2vec2"),vit.forEach(t),AWo=r(k8e," \u2014 "),mV=n(k8e,"A",{href:!0});var Fit=s(mV);yWo=r(Fit,"Wav2Vec2ForCTC"),Fit.forEach(t),LWo=r(k8e," (Wav2Vec2 model)"),k8e.forEach(t),xWo=i(_o),lv=n(_o,"LI",{});var S8e=s(lv);hhe=n(S8e,"STRONG",{});var Tit=s(hhe);$Wo=r(Tit,"wavlm"),Tit.forEach(t),kWo=r(S8e," \u2014 "),gV=n(S8e,"A",{href:!0});var Mit=s(gV);SWo=r(Mit,"WavLMForCTC"),Mit.forEach(t),RWo=r(S8e," (WavLM model)"),S8e.forEach(t),_o.forEach(t),BWo=i(ca),iv=n(ca,"P",{});var R8e=s(iv);PWo=r(R8e,"The model is set in evaluation mode by default using "),phe=n(R8e,"CODE",{});var Eit=s(phe);IWo=r(Eit,"model.eval()"),Eit.forEach(t),qWo=r(R8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),uhe=n(R8e,"CODE",{});var Cit=s(uhe);NWo=r(Cit,"model.train()"),Cit.forEach(t),R8e.forEach(t),jWo=i(ca),T(dv.$$.fragment,ca),ca.forEach(t),Ys.forEach(t),MBe=i(f),dd=n(f,"H2",{class:!0});var CIe=s(dd);cv=n(CIe,"A",{id:!0,class:!0,href:!0});var wit=s(cv);_he=n(wit,"SPAN",{});var Ait=s(_he);T(my.$$.fragment,Ait),Ait.forEach(t),wit.forEach(t),DWo=i(CIe),bhe=n(CIe,"SPAN",{});var yit=s(bhe);GWo=r(yit,"AutoModelForSpeechSeq2Seq"),yit.forEach(t),CIe.forEach(t),EBe=i(f),Oo=n(f,"DIV",{class:!0});var Ks=s(Oo);T(gy.$$.fragment,Ks),OWo=i(Ks),cd=n(Ks,"P",{});var AY=s(cd);VWo=r(AY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),hV=n(AY,"A",{href:!0});var Lit=s(hV);XWo=r(Lit,"from_pretrained()"),Lit.forEach(t),zWo=r(AY," class method or the "),pV=n(AY,"A",{href:!0});var xit=s(pV);QWo=r(xit,"from_config()"),xit.forEach(t),WWo=r(AY,` class
method.`),AY.forEach(t),HWo=i(Ks),hy=n(Ks,"P",{});var wIe=s(hy);UWo=r(wIe,"This class cannot be instantiated directly using "),vhe=n(wIe,"CODE",{});var $it=s(vhe);JWo=r($it,"__init__()"),$it.forEach(t),YWo=r(wIe," (throws an error)."),wIe.forEach(t),KWo=i(Ks),pt=n(Ks,"DIV",{class:!0});var K3=s(pt);T(py.$$.fragment,K3),ZWo=i(K3),Fhe=n(K3,"P",{});var kit=s(Fhe);eHo=r(kit,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),kit.forEach(t),oHo=i(K3),fd=n(K3,"P",{});var yY=s(fd);rHo=r(yY,`Note:
Loading a model from its configuration file does `),The=n(yY,"STRONG",{});var Sit=s(The);tHo=r(Sit,"not"),Sit.forEach(t),aHo=r(yY,` load the model weights. It only affects the
model\u2019s configuration. Use `),uV=n(yY,"A",{href:!0});var Rit=s(uV);nHo=r(Rit,"from_pretrained()"),Rit.forEach(t),sHo=r(yY," to load the model weights."),yY.forEach(t),lHo=i(K3),T(fv.$$.fragment,K3),K3.forEach(t),iHo=i(Ks),io=n(Ks,"DIV",{class:!0});var fa=s(io);T(uy.$$.fragment,fa),dHo=i(fa),Mhe=n(fa,"P",{});var Bit=s(Mhe);cHo=r(Bit,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Bit.forEach(t),fHo=i(fa),Da=n(fa,"P",{});var Z3=s(Da);mHo=r(Z3,"The model class to instantiate is selected based on the "),Ehe=n(Z3,"CODE",{});var Pit=s(Ehe);gHo=r(Pit,"model_type"),Pit.forEach(t),hHo=r(Z3,` property of the config object (either
passed as an argument or loaded from `),Che=n(Z3,"CODE",{});var Iit=s(Che);pHo=r(Iit,"pretrained_model_name_or_path"),Iit.forEach(t),uHo=r(Z3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),whe=n(Z3,"CODE",{});var qit=s(whe);_Ho=r(qit,"pretrained_model_name_or_path"),qit.forEach(t),bHo=r(Z3,":"),Z3.forEach(t),vHo=i(fa),_y=n(fa,"UL",{});var AIe=s(_y);mv=n(AIe,"LI",{});var B8e=s(mv);Ahe=n(B8e,"STRONG",{});var Nit=s(Ahe);FHo=r(Nit,"speech-encoder-decoder"),Nit.forEach(t),THo=r(B8e," \u2014 "),_V=n(B8e,"A",{href:!0});var jit=s(_V);MHo=r(jit,"SpeechEncoderDecoderModel"),jit.forEach(t),EHo=r(B8e," (Speech Encoder decoder model)"),B8e.forEach(t),CHo=i(AIe),gv=n(AIe,"LI",{});var P8e=s(gv);yhe=n(P8e,"STRONG",{});var Dit=s(yhe);wHo=r(Dit,"speech_to_text"),Dit.forEach(t),AHo=r(P8e," \u2014 "),bV=n(P8e,"A",{href:!0});var Git=s(bV);yHo=r(Git,"Speech2TextForConditionalGeneration"),Git.forEach(t),LHo=r(P8e," (Speech2Text model)"),P8e.forEach(t),AIe.forEach(t),xHo=i(fa),hv=n(fa,"P",{});var I8e=s(hv);$Ho=r(I8e,"The model is set in evaluation mode by default using "),Lhe=n(I8e,"CODE",{});var Oit=s(Lhe);kHo=r(Oit,"model.eval()"),Oit.forEach(t),SHo=r(I8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xhe=n(I8e,"CODE",{});var Vit=s(xhe);RHo=r(Vit,"model.train()"),Vit.forEach(t),I8e.forEach(t),BHo=i(fa),T(pv.$$.fragment,fa),fa.forEach(t),Ks.forEach(t),CBe=i(f),md=n(f,"H2",{class:!0});var yIe=s(md);uv=n(yIe,"A",{id:!0,class:!0,href:!0});var Xit=s(uv);$he=n(Xit,"SPAN",{});var zit=s($he);T(by.$$.fragment,zit),zit.forEach(t),Xit.forEach(t),PHo=i(yIe),khe=n(yIe,"SPAN",{});var Qit=s(khe);IHo=r(Qit,"AutoModelForAudioXVector"),Qit.forEach(t),yIe.forEach(t),wBe=i(f),Vo=n(f,"DIV",{class:!0});var Zs=s(Vo);T(vy.$$.fragment,Zs),qHo=i(Zs),gd=n(Zs,"P",{});var LY=s(gd);NHo=r(LY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),vV=n(LY,"A",{href:!0});var Wit=s(vV);jHo=r(Wit,"from_pretrained()"),Wit.forEach(t),DHo=r(LY," class method or the "),FV=n(LY,"A",{href:!0});var Hit=s(FV);GHo=r(Hit,"from_config()"),Hit.forEach(t),OHo=r(LY,` class
method.`),LY.forEach(t),VHo=i(Zs),Fy=n(Zs,"P",{});var LIe=s(Fy);XHo=r(LIe,"This class cannot be instantiated directly using "),She=n(LIe,"CODE",{});var Uit=s(She);zHo=r(Uit,"__init__()"),Uit.forEach(t),QHo=r(LIe," (throws an error)."),LIe.forEach(t),WHo=i(Zs),ut=n(Zs,"DIV",{class:!0});var ew=s(ut);T(Ty.$$.fragment,ew),HHo=i(ew),Rhe=n(ew,"P",{});var Jit=s(Rhe);UHo=r(Jit,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),Jit.forEach(t),JHo=i(ew),hd=n(ew,"P",{});var xY=s(hd);YHo=r(xY,`Note:
Loading a model from its configuration file does `),Bhe=n(xY,"STRONG",{});var Yit=s(Bhe);KHo=r(Yit,"not"),Yit.forEach(t),ZHo=r(xY,` load the model weights. It only affects the
model\u2019s configuration. Use `),TV=n(xY,"A",{href:!0});var Kit=s(TV);eUo=r(Kit,"from_pretrained()"),Kit.forEach(t),oUo=r(xY," to load the model weights."),xY.forEach(t),rUo=i(ew),T(_v.$$.fragment,ew),ew.forEach(t),tUo=i(Zs),co=n(Zs,"DIV",{class:!0});var ma=s(co);T(My.$$.fragment,ma),aUo=i(ma),Phe=n(ma,"P",{});var Zit=s(Phe);nUo=r(Zit,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),Zit.forEach(t),sUo=i(ma),Ga=n(ma,"P",{});var ow=s(Ga);lUo=r(ow,"The model class to instantiate is selected based on the "),Ihe=n(ow,"CODE",{});var edt=s(Ihe);iUo=r(edt,"model_type"),edt.forEach(t),dUo=r(ow,` property of the config object (either
passed as an argument or loaded from `),qhe=n(ow,"CODE",{});var odt=s(qhe);cUo=r(odt,"pretrained_model_name_or_path"),odt.forEach(t),fUo=r(ow,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nhe=n(ow,"CODE",{});var rdt=s(Nhe);mUo=r(rdt,"pretrained_model_name_or_path"),rdt.forEach(t),gUo=r(ow,":"),ow.forEach(t),hUo=i(ma),Oa=n(ma,"UL",{});var rw=s(Oa);bv=n(rw,"LI",{});var q8e=s(bv);jhe=n(q8e,"STRONG",{});var tdt=s(jhe);pUo=r(tdt,"data2vec-audio"),tdt.forEach(t),uUo=r(q8e," \u2014 "),MV=n(q8e,"A",{href:!0});var adt=s(MV);_Uo=r(adt,"Data2VecAudioForXVector"),adt.forEach(t),bUo=r(q8e," (Data2VecAudio model)"),q8e.forEach(t),vUo=i(rw),vv=n(rw,"LI",{});var N8e=s(vv);Dhe=n(N8e,"STRONG",{});var ndt=s(Dhe);FUo=r(ndt,"unispeech-sat"),ndt.forEach(t),TUo=r(N8e," \u2014 "),EV=n(N8e,"A",{href:!0});var sdt=s(EV);MUo=r(sdt,"UniSpeechSatForXVector"),sdt.forEach(t),EUo=r(N8e," (UniSpeechSat model)"),N8e.forEach(t),CUo=i(rw),Fv=n(rw,"LI",{});var j8e=s(Fv);Ghe=n(j8e,"STRONG",{});var ldt=s(Ghe);wUo=r(ldt,"wav2vec2"),ldt.forEach(t),AUo=r(j8e," \u2014 "),CV=n(j8e,"A",{href:!0});var idt=s(CV);yUo=r(idt,"Wav2Vec2ForXVector"),idt.forEach(t),LUo=r(j8e," (Wav2Vec2 model)"),j8e.forEach(t),xUo=i(rw),Tv=n(rw,"LI",{});var D8e=s(Tv);Ohe=n(D8e,"STRONG",{});var ddt=s(Ohe);$Uo=r(ddt,"wavlm"),ddt.forEach(t),kUo=r(D8e," \u2014 "),wV=n(D8e,"A",{href:!0});var cdt=s(wV);SUo=r(cdt,"WavLMForXVector"),cdt.forEach(t),RUo=r(D8e," (WavLM model)"),D8e.forEach(t),rw.forEach(t),BUo=i(ma),Mv=n(ma,"P",{});var G8e=s(Mv);PUo=r(G8e,"The model is set in evaluation mode by default using "),Vhe=n(G8e,"CODE",{});var fdt=s(Vhe);IUo=r(fdt,"model.eval()"),fdt.forEach(t),qUo=r(G8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Xhe=n(G8e,"CODE",{});var mdt=s(Xhe);NUo=r(mdt,"model.train()"),mdt.forEach(t),G8e.forEach(t),jUo=i(ma),T(Ev.$$.fragment,ma),ma.forEach(t),Zs.forEach(t),ABe=i(f),pd=n(f,"H2",{class:!0});var xIe=s(pd);Cv=n(xIe,"A",{id:!0,class:!0,href:!0});var gdt=s(Cv);zhe=n(gdt,"SPAN",{});var hdt=s(zhe);T(Ey.$$.fragment,hdt),hdt.forEach(t),gdt.forEach(t),DUo=i(xIe),Qhe=n(xIe,"SPAN",{});var pdt=s(Qhe);GUo=r(pdt,"AutoModelForMaskedImageModeling"),pdt.forEach(t),xIe.forEach(t),yBe=i(f),Xo=n(f,"DIV",{class:!0});var el=s(Xo);T(Cy.$$.fragment,el),OUo=i(el),ud=n(el,"P",{});var $Y=s(ud);VUo=r($Y,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),AV=n($Y,"A",{href:!0});var udt=s(AV);XUo=r(udt,"from_pretrained()"),udt.forEach(t),zUo=r($Y," class method or the "),yV=n($Y,"A",{href:!0});var _dt=s(yV);QUo=r(_dt,"from_config()"),_dt.forEach(t),WUo=r($Y,` class
method.`),$Y.forEach(t),HUo=i(el),wy=n(el,"P",{});var $Ie=s(wy);UUo=r($Ie,"This class cannot be instantiated directly using "),Whe=n($Ie,"CODE",{});var bdt=s(Whe);JUo=r(bdt,"__init__()"),bdt.forEach(t),YUo=r($Ie," (throws an error)."),$Ie.forEach(t),KUo=i(el),_t=n(el,"DIV",{class:!0});var tw=s(_t);T(Ay.$$.fragment,tw),ZUo=i(tw),Hhe=n(tw,"P",{});var vdt=s(Hhe);eJo=r(vdt,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),vdt.forEach(t),oJo=i(tw),_d=n(tw,"P",{});var kY=s(_d);rJo=r(kY,`Note:
Loading a model from its configuration file does `),Uhe=n(kY,"STRONG",{});var Fdt=s(Uhe);tJo=r(Fdt,"not"),Fdt.forEach(t),aJo=r(kY,` load the model weights. It only affects the
model\u2019s configuration. Use `),LV=n(kY,"A",{href:!0});var Tdt=s(LV);nJo=r(Tdt,"from_pretrained()"),Tdt.forEach(t),sJo=r(kY," to load the model weights."),kY.forEach(t),lJo=i(tw),T(wv.$$.fragment,tw),tw.forEach(t),iJo=i(el),fo=n(el,"DIV",{class:!0});var ga=s(fo);T(yy.$$.fragment,ga),dJo=i(ga),Jhe=n(ga,"P",{});var Mdt=s(Jhe);cJo=r(Mdt,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),Mdt.forEach(t),fJo=i(ga),Va=n(ga,"P",{});var aw=s(Va);mJo=r(aw,"The model class to instantiate is selected based on the "),Yhe=n(aw,"CODE",{});var Edt=s(Yhe);gJo=r(Edt,"model_type"),Edt.forEach(t),hJo=r(aw,` property of the config object (either
passed as an argument or loaded from `),Khe=n(aw,"CODE",{});var Cdt=s(Khe);pJo=r(Cdt,"pretrained_model_name_or_path"),Cdt.forEach(t),uJo=r(aw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zhe=n(aw,"CODE",{});var wdt=s(Zhe);_Jo=r(wdt,"pretrained_model_name_or_path"),wdt.forEach(t),bJo=r(aw,":"),aw.forEach(t),vJo=i(ga),bd=n(ga,"UL",{});var SY=s(bd);Av=n(SY,"LI",{});var O8e=s(Av);epe=n(O8e,"STRONG",{});var Adt=s(epe);FJo=r(Adt,"deit"),Adt.forEach(t),TJo=r(O8e," \u2014 "),xV=n(O8e,"A",{href:!0});var ydt=s(xV);MJo=r(ydt,"DeiTForMaskedImageModeling"),ydt.forEach(t),EJo=r(O8e," (DeiT model)"),O8e.forEach(t),CJo=i(SY),yv=n(SY,"LI",{});var V8e=s(yv);ope=n(V8e,"STRONG",{});var Ldt=s(ope);wJo=r(Ldt,"swin"),Ldt.forEach(t),AJo=r(V8e," \u2014 "),$V=n(V8e,"A",{href:!0});var xdt=s($V);yJo=r(xdt,"SwinForMaskedImageModeling"),xdt.forEach(t),LJo=r(V8e," (Swin model)"),V8e.forEach(t),xJo=i(SY),Lv=n(SY,"LI",{});var X8e=s(Lv);rpe=n(X8e,"STRONG",{});var $dt=s(rpe);$Jo=r($dt,"vit"),$dt.forEach(t),kJo=r(X8e," \u2014 "),kV=n(X8e,"A",{href:!0});var kdt=s(kV);SJo=r(kdt,"ViTForMaskedImageModeling"),kdt.forEach(t),RJo=r(X8e," (ViT model)"),X8e.forEach(t),SY.forEach(t),BJo=i(ga),xv=n(ga,"P",{});var z8e=s(xv);PJo=r(z8e,"The model is set in evaluation mode by default using "),tpe=n(z8e,"CODE",{});var Sdt=s(tpe);IJo=r(Sdt,"model.eval()"),Sdt.forEach(t),qJo=r(z8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ape=n(z8e,"CODE",{});var Rdt=s(ape);NJo=r(Rdt,"model.train()"),Rdt.forEach(t),z8e.forEach(t),jJo=i(ga),T($v.$$.fragment,ga),ga.forEach(t),el.forEach(t),LBe=i(f),vd=n(f,"H2",{class:!0});var kIe=s(vd);kv=n(kIe,"A",{id:!0,class:!0,href:!0});var Bdt=s(kv);npe=n(Bdt,"SPAN",{});var Pdt=s(npe);T(Ly.$$.fragment,Pdt),Pdt.forEach(t),Bdt.forEach(t),DJo=i(kIe),spe=n(kIe,"SPAN",{});var Idt=s(spe);GJo=r(Idt,"AutoModelForObjectDetection"),Idt.forEach(t),kIe.forEach(t),xBe=i(f),zo=n(f,"DIV",{class:!0});var ol=s(zo);T(xy.$$.fragment,ol),OJo=i(ol),Fd=n(ol,"P",{});var RY=s(Fd);VJo=r(RY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),SV=n(RY,"A",{href:!0});var qdt=s(SV);XJo=r(qdt,"from_pretrained()"),qdt.forEach(t),zJo=r(RY," class method or the "),RV=n(RY,"A",{href:!0});var Ndt=s(RV);QJo=r(Ndt,"from_config()"),Ndt.forEach(t),WJo=r(RY,` class
method.`),RY.forEach(t),HJo=i(ol),$y=n(ol,"P",{});var SIe=s($y);UJo=r(SIe,"This class cannot be instantiated directly using "),lpe=n(SIe,"CODE",{});var jdt=s(lpe);JJo=r(jdt,"__init__()"),jdt.forEach(t),YJo=r(SIe," (throws an error)."),SIe.forEach(t),KJo=i(ol),bt=n(ol,"DIV",{class:!0});var nw=s(bt);T(ky.$$.fragment,nw),ZJo=i(nw),ipe=n(nw,"P",{});var Ddt=s(ipe);eYo=r(Ddt,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),Ddt.forEach(t),oYo=i(nw),Td=n(nw,"P",{});var BY=s(Td);rYo=r(BY,`Note:
Loading a model from its configuration file does `),dpe=n(BY,"STRONG",{});var Gdt=s(dpe);tYo=r(Gdt,"not"),Gdt.forEach(t),aYo=r(BY,` load the model weights. It only affects the
model\u2019s configuration. Use `),BV=n(BY,"A",{href:!0});var Odt=s(BV);nYo=r(Odt,"from_pretrained()"),Odt.forEach(t),sYo=r(BY," to load the model weights."),BY.forEach(t),lYo=i(nw),T(Sv.$$.fragment,nw),nw.forEach(t),iYo=i(ol),mo=n(ol,"DIV",{class:!0});var ha=s(mo);T(Sy.$$.fragment,ha),dYo=i(ha),cpe=n(ha,"P",{});var Vdt=s(cpe);cYo=r(Vdt,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),Vdt.forEach(t),fYo=i(ha),Xa=n(ha,"P",{});var sw=s(Xa);mYo=r(sw,"The model class to instantiate is selected based on the "),fpe=n(sw,"CODE",{});var Xdt=s(fpe);gYo=r(Xdt,"model_type"),Xdt.forEach(t),hYo=r(sw,` property of the config object (either
passed as an argument or loaded from `),mpe=n(sw,"CODE",{});var zdt=s(mpe);pYo=r(zdt,"pretrained_model_name_or_path"),zdt.forEach(t),uYo=r(sw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gpe=n(sw,"CODE",{});var Qdt=s(gpe);_Yo=r(Qdt,"pretrained_model_name_or_path"),Qdt.forEach(t),bYo=r(sw,":"),sw.forEach(t),vYo=i(ha),hpe=n(ha,"UL",{});var Wdt=s(hpe);Rv=n(Wdt,"LI",{});var Q8e=s(Rv);ppe=n(Q8e,"STRONG",{});var Hdt=s(ppe);FYo=r(Hdt,"detr"),Hdt.forEach(t),TYo=r(Q8e," \u2014 "),PV=n(Q8e,"A",{href:!0});var Udt=s(PV);MYo=r(Udt,"DetrForObjectDetection"),Udt.forEach(t),EYo=r(Q8e," (DETR model)"),Q8e.forEach(t),Wdt.forEach(t),CYo=i(ha),Bv=n(ha,"P",{});var W8e=s(Bv);wYo=r(W8e,"The model is set in evaluation mode by default using "),upe=n(W8e,"CODE",{});var Jdt=s(upe);AYo=r(Jdt,"model.eval()"),Jdt.forEach(t),yYo=r(W8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_pe=n(W8e,"CODE",{});var Ydt=s(_pe);LYo=r(Ydt,"model.train()"),Ydt.forEach(t),W8e.forEach(t),xYo=i(ha),T(Pv.$$.fragment,ha),ha.forEach(t),ol.forEach(t),$Be=i(f),Md=n(f,"H2",{class:!0});var RIe=s(Md);Iv=n(RIe,"A",{id:!0,class:!0,href:!0});var Kdt=s(Iv);bpe=n(Kdt,"SPAN",{});var Zdt=s(bpe);T(Ry.$$.fragment,Zdt),Zdt.forEach(t),Kdt.forEach(t),$Yo=i(RIe),vpe=n(RIe,"SPAN",{});var ect=s(vpe);kYo=r(ect,"AutoModelForImageSegmentation"),ect.forEach(t),RIe.forEach(t),kBe=i(f),Qo=n(f,"DIV",{class:!0});var rl=s(Qo);T(By.$$.fragment,rl),SYo=i(rl),Ed=n(rl,"P",{});var PY=s(Ed);RYo=r(PY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),IV=n(PY,"A",{href:!0});var oct=s(IV);BYo=r(oct,"from_pretrained()"),oct.forEach(t),PYo=r(PY," class method or the "),qV=n(PY,"A",{href:!0});var rct=s(qV);IYo=r(rct,"from_config()"),rct.forEach(t),qYo=r(PY,` class
method.`),PY.forEach(t),NYo=i(rl),Py=n(rl,"P",{});var BIe=s(Py);jYo=r(BIe,"This class cannot be instantiated directly using "),Fpe=n(BIe,"CODE",{});var tct=s(Fpe);DYo=r(tct,"__init__()"),tct.forEach(t),GYo=r(BIe," (throws an error)."),BIe.forEach(t),OYo=i(rl),vt=n(rl,"DIV",{class:!0});var lw=s(vt);T(Iy.$$.fragment,lw),VYo=i(lw),Tpe=n(lw,"P",{});var act=s(Tpe);XYo=r(act,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),act.forEach(t),zYo=i(lw),Cd=n(lw,"P",{});var IY=s(Cd);QYo=r(IY,`Note:
Loading a model from its configuration file does `),Mpe=n(IY,"STRONG",{});var nct=s(Mpe);WYo=r(nct,"not"),nct.forEach(t),HYo=r(IY,` load the model weights. It only affects the
model\u2019s configuration. Use `),NV=n(IY,"A",{href:!0});var sct=s(NV);UYo=r(sct,"from_pretrained()"),sct.forEach(t),JYo=r(IY," to load the model weights."),IY.forEach(t),YYo=i(lw),T(qv.$$.fragment,lw),lw.forEach(t),KYo=i(rl),go=n(rl,"DIV",{class:!0});var pa=s(go);T(qy.$$.fragment,pa),ZYo=i(pa),Epe=n(pa,"P",{});var lct=s(Epe);eKo=r(lct,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),lct.forEach(t),oKo=i(pa),za=n(pa,"P",{});var iw=s(za);rKo=r(iw,"The model class to instantiate is selected based on the "),Cpe=n(iw,"CODE",{});var ict=s(Cpe);tKo=r(ict,"model_type"),ict.forEach(t),aKo=r(iw,` property of the config object (either
passed as an argument or loaded from `),wpe=n(iw,"CODE",{});var dct=s(wpe);nKo=r(dct,"pretrained_model_name_or_path"),dct.forEach(t),sKo=r(iw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ape=n(iw,"CODE",{});var cct=s(Ape);lKo=r(cct,"pretrained_model_name_or_path"),cct.forEach(t),iKo=r(iw,":"),iw.forEach(t),dKo=i(pa),ype=n(pa,"UL",{});var fct=s(ype);Nv=n(fct,"LI",{});var H8e=s(Nv);Lpe=n(H8e,"STRONG",{});var mct=s(Lpe);cKo=r(mct,"detr"),mct.forEach(t),fKo=r(H8e," \u2014 "),jV=n(H8e,"A",{href:!0});var gct=s(jV);mKo=r(gct,"DetrForSegmentation"),gct.forEach(t),gKo=r(H8e," (DETR model)"),H8e.forEach(t),fct.forEach(t),hKo=i(pa),jv=n(pa,"P",{});var U8e=s(jv);pKo=r(U8e,"The model is set in evaluation mode by default using "),xpe=n(U8e,"CODE",{});var hct=s(xpe);uKo=r(hct,"model.eval()"),hct.forEach(t),_Ko=r(U8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$pe=n(U8e,"CODE",{});var pct=s($pe);bKo=r(pct,"model.train()"),pct.forEach(t),U8e.forEach(t),vKo=i(pa),T(Dv.$$.fragment,pa),pa.forEach(t),rl.forEach(t),SBe=i(f),wd=n(f,"H2",{class:!0});var PIe=s(wd);Gv=n(PIe,"A",{id:!0,class:!0,href:!0});var uct=s(Gv);kpe=n(uct,"SPAN",{});var _ct=s(kpe);T(Ny.$$.fragment,_ct),_ct.forEach(t),uct.forEach(t),FKo=i(PIe),Spe=n(PIe,"SPAN",{});var bct=s(Spe);TKo=r(bct,"AutoModelForSemanticSegmentation"),bct.forEach(t),PIe.forEach(t),RBe=i(f),Wo=n(f,"DIV",{class:!0});var tl=s(Wo);T(jy.$$.fragment,tl),MKo=i(tl),Ad=n(tl,"P",{});var qY=s(Ad);EKo=r(qY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),DV=n(qY,"A",{href:!0});var vct=s(DV);CKo=r(vct,"from_pretrained()"),vct.forEach(t),wKo=r(qY," class method or the "),GV=n(qY,"A",{href:!0});var Fct=s(GV);AKo=r(Fct,"from_config()"),Fct.forEach(t),yKo=r(qY,` class
method.`),qY.forEach(t),LKo=i(tl),Dy=n(tl,"P",{});var IIe=s(Dy);xKo=r(IIe,"This class cannot be instantiated directly using "),Rpe=n(IIe,"CODE",{});var Tct=s(Rpe);$Ko=r(Tct,"__init__()"),Tct.forEach(t),kKo=r(IIe," (throws an error)."),IIe.forEach(t),SKo=i(tl),Ft=n(tl,"DIV",{class:!0});var dw=s(Ft);T(Gy.$$.fragment,dw),RKo=i(dw),Bpe=n(dw,"P",{});var Mct=s(Bpe);BKo=r(Mct,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),Mct.forEach(t),PKo=i(dw),yd=n(dw,"P",{});var NY=s(yd);IKo=r(NY,`Note:
Loading a model from its configuration file does `),Ppe=n(NY,"STRONG",{});var Ect=s(Ppe);qKo=r(Ect,"not"),Ect.forEach(t),NKo=r(NY,` load the model weights. It only affects the
model\u2019s configuration. Use `),OV=n(NY,"A",{href:!0});var Cct=s(OV);jKo=r(Cct,"from_pretrained()"),Cct.forEach(t),DKo=r(NY," to load the model weights."),NY.forEach(t),GKo=i(dw),T(Ov.$$.fragment,dw),dw.forEach(t),OKo=i(tl),ho=n(tl,"DIV",{class:!0});var ua=s(ho);T(Oy.$$.fragment,ua),VKo=i(ua),Ipe=n(ua,"P",{});var wct=s(Ipe);XKo=r(wct,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),wct.forEach(t),zKo=i(ua),Qa=n(ua,"P",{});var cw=s(Qa);QKo=r(cw,"The model class to instantiate is selected based on the "),qpe=n(cw,"CODE",{});var Act=s(qpe);WKo=r(Act,"model_type"),Act.forEach(t),HKo=r(cw,` property of the config object (either
passed as an argument or loaded from `),Npe=n(cw,"CODE",{});var yct=s(Npe);UKo=r(yct,"pretrained_model_name_or_path"),yct.forEach(t),JKo=r(cw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jpe=n(cw,"CODE",{});var Lct=s(jpe);YKo=r(Lct,"pretrained_model_name_or_path"),Lct.forEach(t),KKo=r(cw,":"),cw.forEach(t),ZKo=i(ua),Wa=n(ua,"UL",{});var fw=s(Wa);Vv=n(fw,"LI",{});var J8e=s(Vv);Dpe=n(J8e,"STRONG",{});var xct=s(Dpe);eZo=r(xct,"beit"),xct.forEach(t),oZo=r(J8e," \u2014 "),VV=n(J8e,"A",{href:!0});var $ct=s(VV);rZo=r($ct,"BeitForSemanticSegmentation"),$ct.forEach(t),tZo=r(J8e," (BEiT model)"),J8e.forEach(t),aZo=i(fw),Xv=n(fw,"LI",{});var Y8e=s(Xv);Gpe=n(Y8e,"STRONG",{});var kct=s(Gpe);nZo=r(kct,"data2vec-vision"),kct.forEach(t),sZo=r(Y8e," \u2014 "),XV=n(Y8e,"A",{href:!0});var Sct=s(XV);lZo=r(Sct,"Data2VecVisionForSemanticSegmentation"),Sct.forEach(t),iZo=r(Y8e," (Data2VecVision model)"),Y8e.forEach(t),dZo=i(fw),zv=n(fw,"LI",{});var K8e=s(zv);Ope=n(K8e,"STRONG",{});var Rct=s(Ope);cZo=r(Rct,"dpt"),Rct.forEach(t),fZo=r(K8e," \u2014 "),zV=n(K8e,"A",{href:!0});var Bct=s(zV);mZo=r(Bct,"DPTForSemanticSegmentation"),Bct.forEach(t),gZo=r(K8e," (DPT model)"),K8e.forEach(t),hZo=i(fw),Qv=n(fw,"LI",{});var Z8e=s(Qv);Vpe=n(Z8e,"STRONG",{});var Pct=s(Vpe);pZo=r(Pct,"segformer"),Pct.forEach(t),uZo=r(Z8e," \u2014 "),QV=n(Z8e,"A",{href:!0});var Ict=s(QV);_Zo=r(Ict,"SegformerForSemanticSegmentation"),Ict.forEach(t),bZo=r(Z8e," (SegFormer model)"),Z8e.forEach(t),fw.forEach(t),vZo=i(ua),Wv=n(ua,"P",{});var e7e=s(Wv);FZo=r(e7e,"The model is set in evaluation mode by default using "),Xpe=n(e7e,"CODE",{});var qct=s(Xpe);TZo=r(qct,"model.eval()"),qct.forEach(t),MZo=r(e7e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zpe=n(e7e,"CODE",{});var Nct=s(zpe);EZo=r(Nct,"model.train()"),Nct.forEach(t),e7e.forEach(t),CZo=i(ua),T(Hv.$$.fragment,ua),ua.forEach(t),tl.forEach(t),BBe=i(f),Ld=n(f,"H2",{class:!0});var qIe=s(Ld);Uv=n(qIe,"A",{id:!0,class:!0,href:!0});var jct=s(Uv);Qpe=n(jct,"SPAN",{});var Dct=s(Qpe);T(Vy.$$.fragment,Dct),Dct.forEach(t),jct.forEach(t),wZo=i(qIe),Wpe=n(qIe,"SPAN",{});var Gct=s(Wpe);AZo=r(Gct,"AutoModelForInstanceSegmentation"),Gct.forEach(t),qIe.forEach(t),PBe=i(f),Ho=n(f,"DIV",{class:!0});var al=s(Ho);T(Xy.$$.fragment,al),yZo=i(al),xd=n(al,"P",{});var jY=s(xd);LZo=r(jY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),WV=n(jY,"A",{href:!0});var Oct=s(WV);xZo=r(Oct,"from_pretrained()"),Oct.forEach(t),$Zo=r(jY," class method or the "),HV=n(jY,"A",{href:!0});var Vct=s(HV);kZo=r(Vct,"from_config()"),Vct.forEach(t),SZo=r(jY,` class
method.`),jY.forEach(t),RZo=i(al),zy=n(al,"P",{});var NIe=s(zy);BZo=r(NIe,"This class cannot be instantiated directly using "),Hpe=n(NIe,"CODE",{});var Xct=s(Hpe);PZo=r(Xct,"__init__()"),Xct.forEach(t),IZo=r(NIe," (throws an error)."),NIe.forEach(t),qZo=i(al),Tt=n(al,"DIV",{class:!0});var mw=s(Tt);T(Qy.$$.fragment,mw),NZo=i(mw),Upe=n(mw,"P",{});var zct=s(Upe);jZo=r(zct,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),zct.forEach(t),DZo=i(mw),$d=n(mw,"P",{});var DY=s($d);GZo=r(DY,`Note:
Loading a model from its configuration file does `),Jpe=n(DY,"STRONG",{});var Qct=s(Jpe);OZo=r(Qct,"not"),Qct.forEach(t),VZo=r(DY,` load the model weights. It only affects the
model\u2019s configuration. Use `),UV=n(DY,"A",{href:!0});var Wct=s(UV);XZo=r(Wct,"from_pretrained()"),Wct.forEach(t),zZo=r(DY," to load the model weights."),DY.forEach(t),QZo=i(mw),T(Jv.$$.fragment,mw),mw.forEach(t),WZo=i(al),po=n(al,"DIV",{class:!0});var _a=s(po);T(Wy.$$.fragment,_a),HZo=i(_a),Ype=n(_a,"P",{});var Hct=s(Ype);UZo=r(Hct,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),Hct.forEach(t),JZo=i(_a),Ha=n(_a,"P",{});var gw=s(Ha);YZo=r(gw,"The model class to instantiate is selected based on the "),Kpe=n(gw,"CODE",{});var Uct=s(Kpe);KZo=r(Uct,"model_type"),Uct.forEach(t),ZZo=r(gw,` property of the config object (either
passed as an argument or loaded from `),Zpe=n(gw,"CODE",{});var Jct=s(Zpe);eer=r(Jct,"pretrained_model_name_or_path"),Jct.forEach(t),oer=r(gw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),eue=n(gw,"CODE",{});var Yct=s(eue);rer=r(Yct,"pretrained_model_name_or_path"),Yct.forEach(t),ter=r(gw,":"),gw.forEach(t),aer=i(_a),oue=n(_a,"UL",{});var Kct=s(oue);Yv=n(Kct,"LI",{});var o7e=s(Yv);rue=n(o7e,"STRONG",{});var Zct=s(rue);ner=r(Zct,"maskformer"),Zct.forEach(t),ser=r(o7e," \u2014 "),JV=n(o7e,"A",{href:!0});var eft=s(JV);ler=r(eft,"MaskFormerForInstanceSegmentation"),eft.forEach(t),ier=r(o7e," (MaskFormer model)"),o7e.forEach(t),Kct.forEach(t),der=i(_a),Kv=n(_a,"P",{});var r7e=s(Kv);cer=r(r7e,"The model is set in evaluation mode by default using "),tue=n(r7e,"CODE",{});var oft=s(tue);fer=r(oft,"model.eval()"),oft.forEach(t),mer=r(r7e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),aue=n(r7e,"CODE",{});var rft=s(aue);ger=r(rft,"model.train()"),rft.forEach(t),r7e.forEach(t),her=i(_a),T(Zv.$$.fragment,_a),_a.forEach(t),al.forEach(t),IBe=i(f),kd=n(f,"H2",{class:!0});var jIe=s(kd);eF=n(jIe,"A",{id:!0,class:!0,href:!0});var tft=s(eF);nue=n(tft,"SPAN",{});var aft=s(nue);T(Hy.$$.fragment,aft),aft.forEach(t),tft.forEach(t),per=i(jIe),sue=n(jIe,"SPAN",{});var nft=s(sue);uer=r(nft,"TFAutoModel"),nft.forEach(t),jIe.forEach(t),qBe=i(f),Uo=n(f,"DIV",{class:!0});var nl=s(Uo);T(Uy.$$.fragment,nl),_er=i(nl),Sd=n(nl,"P",{});var GY=s(Sd);ber=r(GY,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),YV=n(GY,"A",{href:!0});var sft=s(YV);ver=r(sft,"from_pretrained()"),sft.forEach(t),Fer=r(GY," class method or the "),KV=n(GY,"A",{href:!0});var lft=s(KV);Ter=r(lft,"from_config()"),lft.forEach(t),Mer=r(GY,` class
method.`),GY.forEach(t),Eer=i(nl),Jy=n(nl,"P",{});var DIe=s(Jy);Cer=r(DIe,"This class cannot be instantiated directly using "),lue=n(DIe,"CODE",{});var ift=s(lue);wer=r(ift,"__init__()"),ift.forEach(t),Aer=r(DIe," (throws an error)."),DIe.forEach(t),yer=i(nl),Mt=n(nl,"DIV",{class:!0});var hw=s(Mt);T(Yy.$$.fragment,hw),Ler=i(hw),iue=n(hw,"P",{});var dft=s(iue);xer=r(dft,"Instantiates one of the base model classes of the library from a configuration."),dft.forEach(t),$er=i(hw),Rd=n(hw,"P",{});var OY=s(Rd);ker=r(OY,`Note:
Loading a model from its configuration file does `),due=n(OY,"STRONG",{});var cft=s(due);Ser=r(cft,"not"),cft.forEach(t),Rer=r(OY,` load the model weights. It only affects the
model\u2019s configuration. Use `),ZV=n(OY,"A",{href:!0});var fft=s(ZV);Ber=r(fft,"from_pretrained()"),fft.forEach(t),Per=r(OY," to load the model weights."),OY.forEach(t),Ier=i(hw),T(oF.$$.fragment,hw),hw.forEach(t),qer=i(nl),Er=n(nl,"DIV",{class:!0});var sl=s(Er);T(Ky.$$.fragment,sl),Ner=i(sl),cue=n(sl,"P",{});var mft=s(cue);jer=r(mft,"Instantiate one of the base model classes of the library from a pretrained model."),mft.forEach(t),Der=i(sl),Ua=n(sl,"P",{});var pw=s(Ua);Ger=r(pw,"The model class to instantiate is selected based on the "),fue=n(pw,"CODE",{});var gft=s(fue);Oer=r(gft,"model_type"),gft.forEach(t),Ver=r(pw,` property of the config object (either
passed as an argument or loaded from `),mue=n(pw,"CODE",{});var hft=s(mue);Xer=r(hft,"pretrained_model_name_or_path"),hft.forEach(t),zer=r(pw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gue=n(pw,"CODE",{});var pft=s(gue);Qer=r(pft,"pretrained_model_name_or_path"),pft.forEach(t),Wer=r(pw,":"),pw.forEach(t),Her=i(sl),j=n(sl,"UL",{});var D=s(j);rF=n(D,"LI",{});var t7e=s(rF);hue=n(t7e,"STRONG",{});var uft=s(hue);Uer=r(uft,"albert"),uft.forEach(t),Jer=r(t7e," \u2014 "),eX=n(t7e,"A",{href:!0});var _ft=s(eX);Yer=r(_ft,"TFAlbertModel"),_ft.forEach(t),Ker=r(t7e," (ALBERT model)"),t7e.forEach(t),Zer=i(D),tF=n(D,"LI",{});var a7e=s(tF);pue=n(a7e,"STRONG",{});var bft=s(pue);eor=r(bft,"bart"),bft.forEach(t),oor=r(a7e," \u2014 "),oX=n(a7e,"A",{href:!0});var vft=s(oX);ror=r(vft,"TFBartModel"),vft.forEach(t),tor=r(a7e," (BART model)"),a7e.forEach(t),aor=i(D),aF=n(D,"LI",{});var n7e=s(aF);uue=n(n7e,"STRONG",{});var Fft=s(uue);nor=r(Fft,"bert"),Fft.forEach(t),sor=r(n7e," \u2014 "),rX=n(n7e,"A",{href:!0});var Tft=s(rX);lor=r(Tft,"TFBertModel"),Tft.forEach(t),ior=r(n7e," (BERT model)"),n7e.forEach(t),dor=i(D),nF=n(D,"LI",{});var s7e=s(nF);_ue=n(s7e,"STRONG",{});var Mft=s(_ue);cor=r(Mft,"blenderbot"),Mft.forEach(t),mor=r(s7e," \u2014 "),tX=n(s7e,"A",{href:!0});var Eft=s(tX);gor=r(Eft,"TFBlenderbotModel"),Eft.forEach(t),hor=r(s7e," (Blenderbot model)"),s7e.forEach(t),por=i(D),sF=n(D,"LI",{});var l7e=s(sF);bue=n(l7e,"STRONG",{});var Cft=s(bue);uor=r(Cft,"blenderbot-small"),Cft.forEach(t),_or=r(l7e," \u2014 "),aX=n(l7e,"A",{href:!0});var wft=s(aX);bor=r(wft,"TFBlenderbotSmallModel"),wft.forEach(t),vor=r(l7e," (BlenderbotSmall model)"),l7e.forEach(t),For=i(D),lF=n(D,"LI",{});var i7e=s(lF);vue=n(i7e,"STRONG",{});var Aft=s(vue);Tor=r(Aft,"camembert"),Aft.forEach(t),Mor=r(i7e," \u2014 "),nX=n(i7e,"A",{href:!0});var yft=s(nX);Eor=r(yft,"TFCamembertModel"),yft.forEach(t),Cor=r(i7e," (CamemBERT model)"),i7e.forEach(t),wor=i(D),iF=n(D,"LI",{});var d7e=s(iF);Fue=n(d7e,"STRONG",{});var Lft=s(Fue);Aor=r(Lft,"clip"),Lft.forEach(t),yor=r(d7e," \u2014 "),sX=n(d7e,"A",{href:!0});var xft=s(sX);Lor=r(xft,"TFCLIPModel"),xft.forEach(t),xor=r(d7e," (CLIP model)"),d7e.forEach(t),$or=i(D),dF=n(D,"LI",{});var c7e=s(dF);Tue=n(c7e,"STRONG",{});var $ft=s(Tue);kor=r($ft,"convbert"),$ft.forEach(t),Sor=r(c7e," \u2014 "),lX=n(c7e,"A",{href:!0});var kft=s(lX);Ror=r(kft,"TFConvBertModel"),kft.forEach(t),Bor=r(c7e," (ConvBERT model)"),c7e.forEach(t),Por=i(D),cF=n(D,"LI",{});var f7e=s(cF);Mue=n(f7e,"STRONG",{});var Sft=s(Mue);Ior=r(Sft,"convnext"),Sft.forEach(t),qor=r(f7e," \u2014 "),iX=n(f7e,"A",{href:!0});var Rft=s(iX);Nor=r(Rft,"TFConvNextModel"),Rft.forEach(t),jor=r(f7e," (ConvNext model)"),f7e.forEach(t),Dor=i(D),fF=n(D,"LI",{});var m7e=s(fF);Eue=n(m7e,"STRONG",{});var Bft=s(Eue);Gor=r(Bft,"ctrl"),Bft.forEach(t),Oor=r(m7e," \u2014 "),dX=n(m7e,"A",{href:!0});var Pft=s(dX);Vor=r(Pft,"TFCTRLModel"),Pft.forEach(t),Xor=r(m7e," (CTRL model)"),m7e.forEach(t),zor=i(D),mF=n(D,"LI",{});var g7e=s(mF);Cue=n(g7e,"STRONG",{});var Ift=s(Cue);Qor=r(Ift,"deberta"),Ift.forEach(t),Wor=r(g7e," \u2014 "),cX=n(g7e,"A",{href:!0});var qft=s(cX);Hor=r(qft,"TFDebertaModel"),qft.forEach(t),Uor=r(g7e," (DeBERTa model)"),g7e.forEach(t),Jor=i(D),gF=n(D,"LI",{});var h7e=s(gF);wue=n(h7e,"STRONG",{});var Nft=s(wue);Yor=r(Nft,"deberta-v2"),Nft.forEach(t),Kor=r(h7e," \u2014 "),fX=n(h7e,"A",{href:!0});var jft=s(fX);Zor=r(jft,"TFDebertaV2Model"),jft.forEach(t),err=r(h7e," (DeBERTa-v2 model)"),h7e.forEach(t),orr=i(D),hF=n(D,"LI",{});var p7e=s(hF);Aue=n(p7e,"STRONG",{});var Dft=s(Aue);rrr=r(Dft,"distilbert"),Dft.forEach(t),trr=r(p7e," \u2014 "),mX=n(p7e,"A",{href:!0});var Gft=s(mX);arr=r(Gft,"TFDistilBertModel"),Gft.forEach(t),nrr=r(p7e," (DistilBERT model)"),p7e.forEach(t),srr=i(D),pF=n(D,"LI",{});var u7e=s(pF);yue=n(u7e,"STRONG",{});var Oft=s(yue);lrr=r(Oft,"dpr"),Oft.forEach(t),irr=r(u7e," \u2014 "),gX=n(u7e,"A",{href:!0});var Vft=s(gX);drr=r(Vft,"TFDPRQuestionEncoder"),Vft.forEach(t),crr=r(u7e," (DPR model)"),u7e.forEach(t),frr=i(D),uF=n(D,"LI",{});var _7e=s(uF);Lue=n(_7e,"STRONG",{});var Xft=s(Lue);mrr=r(Xft,"electra"),Xft.forEach(t),grr=r(_7e," \u2014 "),hX=n(_7e,"A",{href:!0});var zft=s(hX);hrr=r(zft,"TFElectraModel"),zft.forEach(t),prr=r(_7e," (ELECTRA model)"),_7e.forEach(t),urr=i(D),_F=n(D,"LI",{});var b7e=s(_F);xue=n(b7e,"STRONG",{});var Qft=s(xue);_rr=r(Qft,"flaubert"),Qft.forEach(t),brr=r(b7e," \u2014 "),pX=n(b7e,"A",{href:!0});var Wft=s(pX);vrr=r(Wft,"TFFlaubertModel"),Wft.forEach(t),Frr=r(b7e," (FlauBERT model)"),b7e.forEach(t),Trr=i(D),$s=n(D,"LI",{});var Cx=s($s);$ue=n(Cx,"STRONG",{});var Hft=s($ue);Mrr=r(Hft,"funnel"),Hft.forEach(t),Err=r(Cx," \u2014 "),uX=n(Cx,"A",{href:!0});var Uft=s(uX);Crr=r(Uft,"TFFunnelModel"),Uft.forEach(t),wrr=r(Cx," or "),_X=n(Cx,"A",{href:!0});var Jft=s(_X);Arr=r(Jft,"TFFunnelBaseModel"),Jft.forEach(t),yrr=r(Cx," (Funnel Transformer model)"),Cx.forEach(t),Lrr=i(D),bF=n(D,"LI",{});var v7e=s(bF);kue=n(v7e,"STRONG",{});var Yft=s(kue);xrr=r(Yft,"gpt2"),Yft.forEach(t),$rr=r(v7e," \u2014 "),bX=n(v7e,"A",{href:!0});var Kft=s(bX);krr=r(Kft,"TFGPT2Model"),Kft.forEach(t),Srr=r(v7e," (OpenAI GPT-2 model)"),v7e.forEach(t),Rrr=i(D),vF=n(D,"LI",{});var F7e=s(vF);Sue=n(F7e,"STRONG",{});var Zft=s(Sue);Brr=r(Zft,"gptj"),Zft.forEach(t),Prr=r(F7e," \u2014 "),vX=n(F7e,"A",{href:!0});var emt=s(vX);Irr=r(emt,"TFGPTJModel"),emt.forEach(t),qrr=r(F7e," (GPT-J model)"),F7e.forEach(t),Nrr=i(D),FF=n(D,"LI",{});var T7e=s(FF);Rue=n(T7e,"STRONG",{});var omt=s(Rue);jrr=r(omt,"hubert"),omt.forEach(t),Drr=r(T7e," \u2014 "),FX=n(T7e,"A",{href:!0});var rmt=s(FX);Grr=r(rmt,"TFHubertModel"),rmt.forEach(t),Orr=r(T7e," (Hubert model)"),T7e.forEach(t),Vrr=i(D),TF=n(D,"LI",{});var M7e=s(TF);Bue=n(M7e,"STRONG",{});var tmt=s(Bue);Xrr=r(tmt,"layoutlm"),tmt.forEach(t),zrr=r(M7e," \u2014 "),TX=n(M7e,"A",{href:!0});var amt=s(TX);Qrr=r(amt,"TFLayoutLMModel"),amt.forEach(t),Wrr=r(M7e," (LayoutLM model)"),M7e.forEach(t),Hrr=i(D),MF=n(D,"LI",{});var E7e=s(MF);Pue=n(E7e,"STRONG",{});var nmt=s(Pue);Urr=r(nmt,"led"),nmt.forEach(t),Jrr=r(E7e," \u2014 "),MX=n(E7e,"A",{href:!0});var smt=s(MX);Yrr=r(smt,"TFLEDModel"),smt.forEach(t),Krr=r(E7e," (LED model)"),E7e.forEach(t),Zrr=i(D),EF=n(D,"LI",{});var C7e=s(EF);Iue=n(C7e,"STRONG",{});var lmt=s(Iue);etr=r(lmt,"longformer"),lmt.forEach(t),otr=r(C7e," \u2014 "),EX=n(C7e,"A",{href:!0});var imt=s(EX);rtr=r(imt,"TFLongformerModel"),imt.forEach(t),ttr=r(C7e," (Longformer model)"),C7e.forEach(t),atr=i(D),CF=n(D,"LI",{});var w7e=s(CF);que=n(w7e,"STRONG",{});var dmt=s(que);ntr=r(dmt,"lxmert"),dmt.forEach(t),str=r(w7e," \u2014 "),CX=n(w7e,"A",{href:!0});var cmt=s(CX);ltr=r(cmt,"TFLxmertModel"),cmt.forEach(t),itr=r(w7e," (LXMERT model)"),w7e.forEach(t),dtr=i(D),wF=n(D,"LI",{});var A7e=s(wF);Nue=n(A7e,"STRONG",{});var fmt=s(Nue);ctr=r(fmt,"marian"),fmt.forEach(t),ftr=r(A7e," \u2014 "),wX=n(A7e,"A",{href:!0});var mmt=s(wX);mtr=r(mmt,"TFMarianModel"),mmt.forEach(t),gtr=r(A7e," (Marian model)"),A7e.forEach(t),htr=i(D),AF=n(D,"LI",{});var y7e=s(AF);jue=n(y7e,"STRONG",{});var gmt=s(jue);ptr=r(gmt,"mbart"),gmt.forEach(t),utr=r(y7e," \u2014 "),AX=n(y7e,"A",{href:!0});var hmt=s(AX);_tr=r(hmt,"TFMBartModel"),hmt.forEach(t),btr=r(y7e," (mBART model)"),y7e.forEach(t),vtr=i(D),yF=n(D,"LI",{});var L7e=s(yF);Due=n(L7e,"STRONG",{});var pmt=s(Due);Ftr=r(pmt,"mobilebert"),pmt.forEach(t),Ttr=r(L7e," \u2014 "),yX=n(L7e,"A",{href:!0});var umt=s(yX);Mtr=r(umt,"TFMobileBertModel"),umt.forEach(t),Etr=r(L7e," (MobileBERT model)"),L7e.forEach(t),Ctr=i(D),LF=n(D,"LI",{});var x7e=s(LF);Gue=n(x7e,"STRONG",{});var _mt=s(Gue);wtr=r(_mt,"mpnet"),_mt.forEach(t),Atr=r(x7e," \u2014 "),LX=n(x7e,"A",{href:!0});var bmt=s(LX);ytr=r(bmt,"TFMPNetModel"),bmt.forEach(t),Ltr=r(x7e," (MPNet model)"),x7e.forEach(t),xtr=i(D),xF=n(D,"LI",{});var $7e=s(xF);Oue=n($7e,"STRONG",{});var vmt=s(Oue);$tr=r(vmt,"mt5"),vmt.forEach(t),ktr=r($7e," \u2014 "),xX=n($7e,"A",{href:!0});var Fmt=s(xX);Str=r(Fmt,"TFMT5Model"),Fmt.forEach(t),Rtr=r($7e," (mT5 model)"),$7e.forEach(t),Btr=i(D),$F=n(D,"LI",{});var k7e=s($F);Vue=n(k7e,"STRONG",{});var Tmt=s(Vue);Ptr=r(Tmt,"openai-gpt"),Tmt.forEach(t),Itr=r(k7e," \u2014 "),$X=n(k7e,"A",{href:!0});var Mmt=s($X);qtr=r(Mmt,"TFOpenAIGPTModel"),Mmt.forEach(t),Ntr=r(k7e," (OpenAI GPT model)"),k7e.forEach(t),jtr=i(D),kF=n(D,"LI",{});var S7e=s(kF);Xue=n(S7e,"STRONG",{});var Emt=s(Xue);Dtr=r(Emt,"pegasus"),Emt.forEach(t),Gtr=r(S7e," \u2014 "),kX=n(S7e,"A",{href:!0});var Cmt=s(kX);Otr=r(Cmt,"TFPegasusModel"),Cmt.forEach(t),Vtr=r(S7e," (Pegasus model)"),S7e.forEach(t),Xtr=i(D),SF=n(D,"LI",{});var R7e=s(SF);zue=n(R7e,"STRONG",{});var wmt=s(zue);ztr=r(wmt,"rembert"),wmt.forEach(t),Qtr=r(R7e," \u2014 "),SX=n(R7e,"A",{href:!0});var Amt=s(SX);Wtr=r(Amt,"TFRemBertModel"),Amt.forEach(t),Htr=r(R7e," (RemBERT model)"),R7e.forEach(t),Utr=i(D),RF=n(D,"LI",{});var B7e=s(RF);Que=n(B7e,"STRONG",{});var ymt=s(Que);Jtr=r(ymt,"roberta"),ymt.forEach(t),Ytr=r(B7e," \u2014 "),RX=n(B7e,"A",{href:!0});var Lmt=s(RX);Ktr=r(Lmt,"TFRobertaModel"),Lmt.forEach(t),Ztr=r(B7e," (RoBERTa model)"),B7e.forEach(t),ear=i(D),BF=n(D,"LI",{});var P7e=s(BF);Wue=n(P7e,"STRONG",{});var xmt=s(Wue);oar=r(xmt,"roformer"),xmt.forEach(t),rar=r(P7e," \u2014 "),BX=n(P7e,"A",{href:!0});var $mt=s(BX);tar=r($mt,"TFRoFormerModel"),$mt.forEach(t),aar=r(P7e," (RoFormer model)"),P7e.forEach(t),nar=i(D),PF=n(D,"LI",{});var I7e=s(PF);Hue=n(I7e,"STRONG",{});var kmt=s(Hue);sar=r(kmt,"speech_to_text"),kmt.forEach(t),lar=r(I7e," \u2014 "),PX=n(I7e,"A",{href:!0});var Smt=s(PX);iar=r(Smt,"TFSpeech2TextModel"),Smt.forEach(t),dar=r(I7e," (Speech2Text model)"),I7e.forEach(t),car=i(D),IF=n(D,"LI",{});var q7e=s(IF);Uue=n(q7e,"STRONG",{});var Rmt=s(Uue);far=r(Rmt,"t5"),Rmt.forEach(t),mar=r(q7e," \u2014 "),IX=n(q7e,"A",{href:!0});var Bmt=s(IX);gar=r(Bmt,"TFT5Model"),Bmt.forEach(t),har=r(q7e," (T5 model)"),q7e.forEach(t),par=i(D),qF=n(D,"LI",{});var N7e=s(qF);Jue=n(N7e,"STRONG",{});var Pmt=s(Jue);uar=r(Pmt,"tapas"),Pmt.forEach(t),_ar=r(N7e," \u2014 "),qX=n(N7e,"A",{href:!0});var Imt=s(qX);bar=r(Imt,"TFTapasModel"),Imt.forEach(t),Far=r(N7e," (TAPAS model)"),N7e.forEach(t),Tar=i(D),NF=n(D,"LI",{});var j7e=s(NF);Yue=n(j7e,"STRONG",{});var qmt=s(Yue);Mar=r(qmt,"transfo-xl"),qmt.forEach(t),Ear=r(j7e," \u2014 "),NX=n(j7e,"A",{href:!0});var Nmt=s(NX);Car=r(Nmt,"TFTransfoXLModel"),Nmt.forEach(t),war=r(j7e," (Transformer-XL model)"),j7e.forEach(t),Aar=i(D),jF=n(D,"LI",{});var D7e=s(jF);Kue=n(D7e,"STRONG",{});var jmt=s(Kue);yar=r(jmt,"vit"),jmt.forEach(t),Lar=r(D7e," \u2014 "),jX=n(D7e,"A",{href:!0});var Dmt=s(jX);xar=r(Dmt,"TFViTModel"),Dmt.forEach(t),$ar=r(D7e," (ViT model)"),D7e.forEach(t),kar=i(D),DF=n(D,"LI",{});var G7e=s(DF);Zue=n(G7e,"STRONG",{});var Gmt=s(Zue);Sar=r(Gmt,"vit_mae"),Gmt.forEach(t),Rar=r(G7e," \u2014 "),DX=n(G7e,"A",{href:!0});var Omt=s(DX);Bar=r(Omt,"TFViTMAEModel"),Omt.forEach(t),Par=r(G7e," (ViTMAE model)"),G7e.forEach(t),Iar=i(D),GF=n(D,"LI",{});var O7e=s(GF);e_e=n(O7e,"STRONG",{});var Vmt=s(e_e);qar=r(Vmt,"wav2vec2"),Vmt.forEach(t),Nar=r(O7e," \u2014 "),GX=n(O7e,"A",{href:!0});var Xmt=s(GX);jar=r(Xmt,"TFWav2Vec2Model"),Xmt.forEach(t),Dar=r(O7e," (Wav2Vec2 model)"),O7e.forEach(t),Gar=i(D),OF=n(D,"LI",{});var V7e=s(OF);o_e=n(V7e,"STRONG",{});var zmt=s(o_e);Oar=r(zmt,"xlm"),zmt.forEach(t),Var=r(V7e," \u2014 "),OX=n(V7e,"A",{href:!0});var Qmt=s(OX);Xar=r(Qmt,"TFXLMModel"),Qmt.forEach(t),zar=r(V7e," (XLM model)"),V7e.forEach(t),Qar=i(D),VF=n(D,"LI",{});var X7e=s(VF);r_e=n(X7e,"STRONG",{});var Wmt=s(r_e);War=r(Wmt,"xlm-roberta"),Wmt.forEach(t),Har=r(X7e," \u2014 "),VX=n(X7e,"A",{href:!0});var Hmt=s(VX);Uar=r(Hmt,"TFXLMRobertaModel"),Hmt.forEach(t),Jar=r(X7e," (XLM-RoBERTa model)"),X7e.forEach(t),Yar=i(D),XF=n(D,"LI",{});var z7e=s(XF);t_e=n(z7e,"STRONG",{});var Umt=s(t_e);Kar=r(Umt,"xlnet"),Umt.forEach(t),Zar=r(z7e," \u2014 "),XX=n(z7e,"A",{href:!0});var Jmt=s(XX);enr=r(Jmt,"TFXLNetModel"),Jmt.forEach(t),onr=r(z7e," (XLNet model)"),z7e.forEach(t),D.forEach(t),rnr=i(sl),T(zF.$$.fragment,sl),sl.forEach(t),nl.forEach(t),NBe=i(f),Bd=n(f,"H2",{class:!0});var GIe=s(Bd);QF=n(GIe,"A",{id:!0,class:!0,href:!0});var Ymt=s(QF);a_e=n(Ymt,"SPAN",{});var Kmt=s(a_e);T(Zy.$$.fragment,Kmt),Kmt.forEach(t),Ymt.forEach(t),tnr=i(GIe),n_e=n(GIe,"SPAN",{});var Zmt=s(n_e);anr=r(Zmt,"TFAutoModelForPreTraining"),Zmt.forEach(t),GIe.forEach(t),jBe=i(f),Jo=n(f,"DIV",{class:!0});var ll=s(Jo);T(eL.$$.fragment,ll),nnr=i(ll),Pd=n(ll,"P",{});var VY=s(Pd);snr=r(VY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),zX=n(VY,"A",{href:!0});var egt=s(zX);lnr=r(egt,"from_pretrained()"),egt.forEach(t),inr=r(VY," class method or the "),QX=n(VY,"A",{href:!0});var ogt=s(QX);dnr=r(ogt,"from_config()"),ogt.forEach(t),cnr=r(VY,` class
method.`),VY.forEach(t),fnr=i(ll),oL=n(ll,"P",{});var OIe=s(oL);mnr=r(OIe,"This class cannot be instantiated directly using "),s_e=n(OIe,"CODE",{});var rgt=s(s_e);gnr=r(rgt,"__init__()"),rgt.forEach(t),hnr=r(OIe," (throws an error)."),OIe.forEach(t),pnr=i(ll),Et=n(ll,"DIV",{class:!0});var uw=s(Et);T(rL.$$.fragment,uw),unr=i(uw),l_e=n(uw,"P",{});var tgt=s(l_e);_nr=r(tgt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),tgt.forEach(t),bnr=i(uw),Id=n(uw,"P",{});var XY=s(Id);vnr=r(XY,`Note:
Loading a model from its configuration file does `),i_e=n(XY,"STRONG",{});var agt=s(i_e);Fnr=r(agt,"not"),agt.forEach(t),Tnr=r(XY,` load the model weights. It only affects the
model\u2019s configuration. Use `),WX=n(XY,"A",{href:!0});var ngt=s(WX);Mnr=r(ngt,"from_pretrained()"),ngt.forEach(t),Enr=r(XY," to load the model weights."),XY.forEach(t),Cnr=i(uw),T(WF.$$.fragment,uw),uw.forEach(t),wnr=i(ll),Cr=n(ll,"DIV",{class:!0});var il=s(Cr);T(tL.$$.fragment,il),Anr=i(il),d_e=n(il,"P",{});var sgt=s(d_e);ynr=r(sgt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),sgt.forEach(t),Lnr=i(il),Ja=n(il,"P",{});var _w=s(Ja);xnr=r(_w,"The model class to instantiate is selected based on the "),c_e=n(_w,"CODE",{});var lgt=s(c_e);$nr=r(lgt,"model_type"),lgt.forEach(t),knr=r(_w,` property of the config object (either
passed as an argument or loaded from `),f_e=n(_w,"CODE",{});var igt=s(f_e);Snr=r(igt,"pretrained_model_name_or_path"),igt.forEach(t),Rnr=r(_w,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),m_e=n(_w,"CODE",{});var dgt=s(m_e);Bnr=r(dgt,"pretrained_model_name_or_path"),dgt.forEach(t),Pnr=r(_w,":"),_w.forEach(t),Inr=i(il),ne=n(il,"UL",{});var le=s(ne);HF=n(le,"LI",{});var Q7e=s(HF);g_e=n(Q7e,"STRONG",{});var cgt=s(g_e);qnr=r(cgt,"albert"),cgt.forEach(t),Nnr=r(Q7e," \u2014 "),HX=n(Q7e,"A",{href:!0});var fgt=s(HX);jnr=r(fgt,"TFAlbertForPreTraining"),fgt.forEach(t),Dnr=r(Q7e," (ALBERT model)"),Q7e.forEach(t),Gnr=i(le),UF=n(le,"LI",{});var W7e=s(UF);h_e=n(W7e,"STRONG",{});var mgt=s(h_e);Onr=r(mgt,"bart"),mgt.forEach(t),Vnr=r(W7e," \u2014 "),UX=n(W7e,"A",{href:!0});var ggt=s(UX);Xnr=r(ggt,"TFBartForConditionalGeneration"),ggt.forEach(t),znr=r(W7e," (BART model)"),W7e.forEach(t),Qnr=i(le),JF=n(le,"LI",{});var H7e=s(JF);p_e=n(H7e,"STRONG",{});var hgt=s(p_e);Wnr=r(hgt,"bert"),hgt.forEach(t),Hnr=r(H7e," \u2014 "),JX=n(H7e,"A",{href:!0});var pgt=s(JX);Unr=r(pgt,"TFBertForPreTraining"),pgt.forEach(t),Jnr=r(H7e," (BERT model)"),H7e.forEach(t),Ynr=i(le),YF=n(le,"LI",{});var U7e=s(YF);u_e=n(U7e,"STRONG",{});var ugt=s(u_e);Knr=r(ugt,"camembert"),ugt.forEach(t),Znr=r(U7e," \u2014 "),YX=n(U7e,"A",{href:!0});var _gt=s(YX);esr=r(_gt,"TFCamembertForMaskedLM"),_gt.forEach(t),osr=r(U7e," (CamemBERT model)"),U7e.forEach(t),rsr=i(le),KF=n(le,"LI",{});var J7e=s(KF);__e=n(J7e,"STRONG",{});var bgt=s(__e);tsr=r(bgt,"ctrl"),bgt.forEach(t),asr=r(J7e," \u2014 "),KX=n(J7e,"A",{href:!0});var vgt=s(KX);nsr=r(vgt,"TFCTRLLMHeadModel"),vgt.forEach(t),ssr=r(J7e," (CTRL model)"),J7e.forEach(t),lsr=i(le),ZF=n(le,"LI",{});var Y7e=s(ZF);b_e=n(Y7e,"STRONG",{});var Fgt=s(b_e);isr=r(Fgt,"distilbert"),Fgt.forEach(t),dsr=r(Y7e," \u2014 "),ZX=n(Y7e,"A",{href:!0});var Tgt=s(ZX);csr=r(Tgt,"TFDistilBertForMaskedLM"),Tgt.forEach(t),fsr=r(Y7e," (DistilBERT model)"),Y7e.forEach(t),msr=i(le),e6=n(le,"LI",{});var K7e=s(e6);v_e=n(K7e,"STRONG",{});var Mgt=s(v_e);gsr=r(Mgt,"electra"),Mgt.forEach(t),hsr=r(K7e," \u2014 "),ez=n(K7e,"A",{href:!0});var Egt=s(ez);psr=r(Egt,"TFElectraForPreTraining"),Egt.forEach(t),usr=r(K7e," (ELECTRA model)"),K7e.forEach(t),_sr=i(le),o6=n(le,"LI",{});var Z7e=s(o6);F_e=n(Z7e,"STRONG",{});var Cgt=s(F_e);bsr=r(Cgt,"flaubert"),Cgt.forEach(t),vsr=r(Z7e," \u2014 "),oz=n(Z7e,"A",{href:!0});var wgt=s(oz);Fsr=r(wgt,"TFFlaubertWithLMHeadModel"),wgt.forEach(t),Tsr=r(Z7e," (FlauBERT model)"),Z7e.forEach(t),Msr=i(le),r6=n(le,"LI",{});var exe=s(r6);T_e=n(exe,"STRONG",{});var Agt=s(T_e);Esr=r(Agt,"funnel"),Agt.forEach(t),Csr=r(exe," \u2014 "),rz=n(exe,"A",{href:!0});var ygt=s(rz);wsr=r(ygt,"TFFunnelForPreTraining"),ygt.forEach(t),Asr=r(exe," (Funnel Transformer model)"),exe.forEach(t),ysr=i(le),t6=n(le,"LI",{});var oxe=s(t6);M_e=n(oxe,"STRONG",{});var Lgt=s(M_e);Lsr=r(Lgt,"gpt2"),Lgt.forEach(t),xsr=r(oxe," \u2014 "),tz=n(oxe,"A",{href:!0});var xgt=s(tz);$sr=r(xgt,"TFGPT2LMHeadModel"),xgt.forEach(t),ksr=r(oxe," (OpenAI GPT-2 model)"),oxe.forEach(t),Ssr=i(le),a6=n(le,"LI",{});var rxe=s(a6);E_e=n(rxe,"STRONG",{});var $gt=s(E_e);Rsr=r($gt,"layoutlm"),$gt.forEach(t),Bsr=r(rxe," \u2014 "),az=n(rxe,"A",{href:!0});var kgt=s(az);Psr=r(kgt,"TFLayoutLMForMaskedLM"),kgt.forEach(t),Isr=r(rxe," (LayoutLM model)"),rxe.forEach(t),qsr=i(le),n6=n(le,"LI",{});var txe=s(n6);C_e=n(txe,"STRONG",{});var Sgt=s(C_e);Nsr=r(Sgt,"lxmert"),Sgt.forEach(t),jsr=r(txe," \u2014 "),nz=n(txe,"A",{href:!0});var Rgt=s(nz);Dsr=r(Rgt,"TFLxmertForPreTraining"),Rgt.forEach(t),Gsr=r(txe," (LXMERT model)"),txe.forEach(t),Osr=i(le),s6=n(le,"LI",{});var axe=s(s6);w_e=n(axe,"STRONG",{});var Bgt=s(w_e);Vsr=r(Bgt,"mobilebert"),Bgt.forEach(t),Xsr=r(axe," \u2014 "),sz=n(axe,"A",{href:!0});var Pgt=s(sz);zsr=r(Pgt,"TFMobileBertForPreTraining"),Pgt.forEach(t),Qsr=r(axe," (MobileBERT model)"),axe.forEach(t),Wsr=i(le),l6=n(le,"LI",{});var nxe=s(l6);A_e=n(nxe,"STRONG",{});var Igt=s(A_e);Hsr=r(Igt,"mpnet"),Igt.forEach(t),Usr=r(nxe," \u2014 "),lz=n(nxe,"A",{href:!0});var qgt=s(lz);Jsr=r(qgt,"TFMPNetForMaskedLM"),qgt.forEach(t),Ysr=r(nxe," (MPNet model)"),nxe.forEach(t),Ksr=i(le),i6=n(le,"LI",{});var sxe=s(i6);y_e=n(sxe,"STRONG",{});var Ngt=s(y_e);Zsr=r(Ngt,"openai-gpt"),Ngt.forEach(t),elr=r(sxe," \u2014 "),iz=n(sxe,"A",{href:!0});var jgt=s(iz);olr=r(jgt,"TFOpenAIGPTLMHeadModel"),jgt.forEach(t),rlr=r(sxe," (OpenAI GPT model)"),sxe.forEach(t),tlr=i(le),d6=n(le,"LI",{});var lxe=s(d6);L_e=n(lxe,"STRONG",{});var Dgt=s(L_e);alr=r(Dgt,"roberta"),Dgt.forEach(t),nlr=r(lxe," \u2014 "),dz=n(lxe,"A",{href:!0});var Ggt=s(dz);slr=r(Ggt,"TFRobertaForMaskedLM"),Ggt.forEach(t),llr=r(lxe," (RoBERTa model)"),lxe.forEach(t),ilr=i(le),c6=n(le,"LI",{});var ixe=s(c6);x_e=n(ixe,"STRONG",{});var Ogt=s(x_e);dlr=r(Ogt,"t5"),Ogt.forEach(t),clr=r(ixe," \u2014 "),cz=n(ixe,"A",{href:!0});var Vgt=s(cz);flr=r(Vgt,"TFT5ForConditionalGeneration"),Vgt.forEach(t),mlr=r(ixe," (T5 model)"),ixe.forEach(t),glr=i(le),f6=n(le,"LI",{});var dxe=s(f6);$_e=n(dxe,"STRONG",{});var Xgt=s($_e);hlr=r(Xgt,"tapas"),Xgt.forEach(t),plr=r(dxe," \u2014 "),fz=n(dxe,"A",{href:!0});var zgt=s(fz);ulr=r(zgt,"TFTapasForMaskedLM"),zgt.forEach(t),_lr=r(dxe," (TAPAS model)"),dxe.forEach(t),blr=i(le),m6=n(le,"LI",{});var cxe=s(m6);k_e=n(cxe,"STRONG",{});var Qgt=s(k_e);vlr=r(Qgt,"transfo-xl"),Qgt.forEach(t),Flr=r(cxe," \u2014 "),mz=n(cxe,"A",{href:!0});var Wgt=s(mz);Tlr=r(Wgt,"TFTransfoXLLMHeadModel"),Wgt.forEach(t),Mlr=r(cxe," (Transformer-XL model)"),cxe.forEach(t),Elr=i(le),g6=n(le,"LI",{});var fxe=s(g6);S_e=n(fxe,"STRONG",{});var Hgt=s(S_e);Clr=r(Hgt,"vit_mae"),Hgt.forEach(t),wlr=r(fxe," \u2014 "),gz=n(fxe,"A",{href:!0});var Ugt=s(gz);Alr=r(Ugt,"TFViTMAEForPreTraining"),Ugt.forEach(t),ylr=r(fxe," (ViTMAE model)"),fxe.forEach(t),Llr=i(le),h6=n(le,"LI",{});var mxe=s(h6);R_e=n(mxe,"STRONG",{});var Jgt=s(R_e);xlr=r(Jgt,"xlm"),Jgt.forEach(t),$lr=r(mxe," \u2014 "),hz=n(mxe,"A",{href:!0});var Ygt=s(hz);klr=r(Ygt,"TFXLMWithLMHeadModel"),Ygt.forEach(t),Slr=r(mxe," (XLM model)"),mxe.forEach(t),Rlr=i(le),p6=n(le,"LI",{});var gxe=s(p6);B_e=n(gxe,"STRONG",{});var Kgt=s(B_e);Blr=r(Kgt,"xlm-roberta"),Kgt.forEach(t),Plr=r(gxe," \u2014 "),pz=n(gxe,"A",{href:!0});var Zgt=s(pz);Ilr=r(Zgt,"TFXLMRobertaForMaskedLM"),Zgt.forEach(t),qlr=r(gxe," (XLM-RoBERTa model)"),gxe.forEach(t),Nlr=i(le),u6=n(le,"LI",{});var hxe=s(u6);P_e=n(hxe,"STRONG",{});var eht=s(P_e);jlr=r(eht,"xlnet"),eht.forEach(t),Dlr=r(hxe," \u2014 "),uz=n(hxe,"A",{href:!0});var oht=s(uz);Glr=r(oht,"TFXLNetLMHeadModel"),oht.forEach(t),Olr=r(hxe," (XLNet model)"),hxe.forEach(t),le.forEach(t),Vlr=i(il),T(_6.$$.fragment,il),il.forEach(t),ll.forEach(t),DBe=i(f),qd=n(f,"H2",{class:!0});var VIe=s(qd);b6=n(VIe,"A",{id:!0,class:!0,href:!0});var rht=s(b6);I_e=n(rht,"SPAN",{});var tht=s(I_e);T(aL.$$.fragment,tht),tht.forEach(t),rht.forEach(t),Xlr=i(VIe),q_e=n(VIe,"SPAN",{});var aht=s(q_e);zlr=r(aht,"TFAutoModelForCausalLM"),aht.forEach(t),VIe.forEach(t),GBe=i(f),Yo=n(f,"DIV",{class:!0});var dl=s(Yo);T(nL.$$.fragment,dl),Qlr=i(dl),Nd=n(dl,"P",{});var zY=s(Nd);Wlr=r(zY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),_z=n(zY,"A",{href:!0});var nht=s(_z);Hlr=r(nht,"from_pretrained()"),nht.forEach(t),Ulr=r(zY," class method or the "),bz=n(zY,"A",{href:!0});var sht=s(bz);Jlr=r(sht,"from_config()"),sht.forEach(t),Ylr=r(zY,` class
method.`),zY.forEach(t),Klr=i(dl),sL=n(dl,"P",{});var XIe=s(sL);Zlr=r(XIe,"This class cannot be instantiated directly using "),N_e=n(XIe,"CODE",{});var lht=s(N_e);eir=r(lht,"__init__()"),lht.forEach(t),oir=r(XIe," (throws an error)."),XIe.forEach(t),rir=i(dl),Ct=n(dl,"DIV",{class:!0});var bw=s(Ct);T(lL.$$.fragment,bw),tir=i(bw),j_e=n(bw,"P",{});var iht=s(j_e);air=r(iht,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),iht.forEach(t),nir=i(bw),jd=n(bw,"P",{});var QY=s(jd);sir=r(QY,`Note:
Loading a model from its configuration file does `),D_e=n(QY,"STRONG",{});var dht=s(D_e);lir=r(dht,"not"),dht.forEach(t),iir=r(QY,` load the model weights. It only affects the
model\u2019s configuration. Use `),vz=n(QY,"A",{href:!0});var cht=s(vz);dir=r(cht,"from_pretrained()"),cht.forEach(t),cir=r(QY," to load the model weights."),QY.forEach(t),fir=i(bw),T(v6.$$.fragment,bw),bw.forEach(t),mir=i(dl),wr=n(dl,"DIV",{class:!0});var cl=s(wr);T(iL.$$.fragment,cl),gir=i(cl),G_e=n(cl,"P",{});var fht=s(G_e);hir=r(fht,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),fht.forEach(t),pir=i(cl),Ya=n(cl,"P",{});var vw=s(Ya);uir=r(vw,"The model class to instantiate is selected based on the "),O_e=n(vw,"CODE",{});var mht=s(O_e);_ir=r(mht,"model_type"),mht.forEach(t),bir=r(vw,` property of the config object (either
passed as an argument or loaded from `),V_e=n(vw,"CODE",{});var ght=s(V_e);vir=r(ght,"pretrained_model_name_or_path"),ght.forEach(t),Fir=r(vw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),X_e=n(vw,"CODE",{});var hht=s(X_e);Tir=r(hht,"pretrained_model_name_or_path"),hht.forEach(t),Mir=r(vw,":"),vw.forEach(t),Eir=i(cl),Te=n(cl,"UL",{});var Ce=s(Te);F6=n(Ce,"LI",{});var pxe=s(F6);z_e=n(pxe,"STRONG",{});var pht=s(z_e);Cir=r(pht,"bert"),pht.forEach(t),wir=r(pxe," \u2014 "),Fz=n(pxe,"A",{href:!0});var uht=s(Fz);Air=r(uht,"TFBertLMHeadModel"),uht.forEach(t),yir=r(pxe," (BERT model)"),pxe.forEach(t),Lir=i(Ce),T6=n(Ce,"LI",{});var uxe=s(T6);Q_e=n(uxe,"STRONG",{});var _ht=s(Q_e);xir=r(_ht,"camembert"),_ht.forEach(t),$ir=r(uxe," \u2014 "),Tz=n(uxe,"A",{href:!0});var bht=s(Tz);kir=r(bht,"TFCamembertForCausalLM"),bht.forEach(t),Sir=r(uxe," (CamemBERT model)"),uxe.forEach(t),Rir=i(Ce),M6=n(Ce,"LI",{});var _xe=s(M6);W_e=n(_xe,"STRONG",{});var vht=s(W_e);Bir=r(vht,"ctrl"),vht.forEach(t),Pir=r(_xe," \u2014 "),Mz=n(_xe,"A",{href:!0});var Fht=s(Mz);Iir=r(Fht,"TFCTRLLMHeadModel"),Fht.forEach(t),qir=r(_xe," (CTRL model)"),_xe.forEach(t),Nir=i(Ce),E6=n(Ce,"LI",{});var bxe=s(E6);H_e=n(bxe,"STRONG",{});var Tht=s(H_e);jir=r(Tht,"gpt2"),Tht.forEach(t),Dir=r(bxe," \u2014 "),Ez=n(bxe,"A",{href:!0});var Mht=s(Ez);Gir=r(Mht,"TFGPT2LMHeadModel"),Mht.forEach(t),Oir=r(bxe," (OpenAI GPT-2 model)"),bxe.forEach(t),Vir=i(Ce),C6=n(Ce,"LI",{});var vxe=s(C6);U_e=n(vxe,"STRONG",{});var Eht=s(U_e);Xir=r(Eht,"gptj"),Eht.forEach(t),zir=r(vxe," \u2014 "),Cz=n(vxe,"A",{href:!0});var Cht=s(Cz);Qir=r(Cht,"TFGPTJForCausalLM"),Cht.forEach(t),Wir=r(vxe," (GPT-J model)"),vxe.forEach(t),Hir=i(Ce),w6=n(Ce,"LI",{});var Fxe=s(w6);J_e=n(Fxe,"STRONG",{});var wht=s(J_e);Uir=r(wht,"openai-gpt"),wht.forEach(t),Jir=r(Fxe," \u2014 "),wz=n(Fxe,"A",{href:!0});var Aht=s(wz);Yir=r(Aht,"TFOpenAIGPTLMHeadModel"),Aht.forEach(t),Kir=r(Fxe," (OpenAI GPT model)"),Fxe.forEach(t),Zir=i(Ce),A6=n(Ce,"LI",{});var Txe=s(A6);Y_e=n(Txe,"STRONG",{});var yht=s(Y_e);edr=r(yht,"rembert"),yht.forEach(t),odr=r(Txe," \u2014 "),Az=n(Txe,"A",{href:!0});var Lht=s(Az);rdr=r(Lht,"TFRemBertForCausalLM"),Lht.forEach(t),tdr=r(Txe," (RemBERT model)"),Txe.forEach(t),adr=i(Ce),y6=n(Ce,"LI",{});var Mxe=s(y6);K_e=n(Mxe,"STRONG",{});var xht=s(K_e);ndr=r(xht,"roberta"),xht.forEach(t),sdr=r(Mxe," \u2014 "),yz=n(Mxe,"A",{href:!0});var $ht=s(yz);ldr=r($ht,"TFRobertaForCausalLM"),$ht.forEach(t),idr=r(Mxe," (RoBERTa model)"),Mxe.forEach(t),ddr=i(Ce),L6=n(Ce,"LI",{});var Exe=s(L6);Z_e=n(Exe,"STRONG",{});var kht=s(Z_e);cdr=r(kht,"roformer"),kht.forEach(t),fdr=r(Exe," \u2014 "),Lz=n(Exe,"A",{href:!0});var Sht=s(Lz);mdr=r(Sht,"TFRoFormerForCausalLM"),Sht.forEach(t),gdr=r(Exe," (RoFormer model)"),Exe.forEach(t),hdr=i(Ce),x6=n(Ce,"LI",{});var Cxe=s(x6);e1e=n(Cxe,"STRONG",{});var Rht=s(e1e);pdr=r(Rht,"transfo-xl"),Rht.forEach(t),udr=r(Cxe," \u2014 "),xz=n(Cxe,"A",{href:!0});var Bht=s(xz);_dr=r(Bht,"TFTransfoXLLMHeadModel"),Bht.forEach(t),bdr=r(Cxe," (Transformer-XL model)"),Cxe.forEach(t),vdr=i(Ce),$6=n(Ce,"LI",{});var wxe=s($6);o1e=n(wxe,"STRONG",{});var Pht=s(o1e);Fdr=r(Pht,"xlm"),Pht.forEach(t),Tdr=r(wxe," \u2014 "),$z=n(wxe,"A",{href:!0});var Iht=s($z);Mdr=r(Iht,"TFXLMWithLMHeadModel"),Iht.forEach(t),Edr=r(wxe," (XLM model)"),wxe.forEach(t),Cdr=i(Ce),k6=n(Ce,"LI",{});var Axe=s(k6);r1e=n(Axe,"STRONG",{});var qht=s(r1e);wdr=r(qht,"xlnet"),qht.forEach(t),Adr=r(Axe," \u2014 "),kz=n(Axe,"A",{href:!0});var Nht=s(kz);ydr=r(Nht,"TFXLNetLMHeadModel"),Nht.forEach(t),Ldr=r(Axe," (XLNet model)"),Axe.forEach(t),Ce.forEach(t),xdr=i(cl),T(S6.$$.fragment,cl),cl.forEach(t),dl.forEach(t),OBe=i(f),Dd=n(f,"H2",{class:!0});var zIe=s(Dd);R6=n(zIe,"A",{id:!0,class:!0,href:!0});var jht=s(R6);t1e=n(jht,"SPAN",{});var Dht=s(t1e);T(dL.$$.fragment,Dht),Dht.forEach(t),jht.forEach(t),$dr=i(zIe),a1e=n(zIe,"SPAN",{});var Ght=s(a1e);kdr=r(Ght,"TFAutoModelForImageClassification"),Ght.forEach(t),zIe.forEach(t),VBe=i(f),Ko=n(f,"DIV",{class:!0});var fl=s(Ko);T(cL.$$.fragment,fl),Sdr=i(fl),Gd=n(fl,"P",{});var WY=s(Gd);Rdr=r(WY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Sz=n(WY,"A",{href:!0});var Oht=s(Sz);Bdr=r(Oht,"from_pretrained()"),Oht.forEach(t),Pdr=r(WY," class method or the "),Rz=n(WY,"A",{href:!0});var Vht=s(Rz);Idr=r(Vht,"from_config()"),Vht.forEach(t),qdr=r(WY,` class
method.`),WY.forEach(t),Ndr=i(fl),fL=n(fl,"P",{});var QIe=s(fL);jdr=r(QIe,"This class cannot be instantiated directly using "),n1e=n(QIe,"CODE",{});var Xht=s(n1e);Ddr=r(Xht,"__init__()"),Xht.forEach(t),Gdr=r(QIe," (throws an error)."),QIe.forEach(t),Odr=i(fl),wt=n(fl,"DIV",{class:!0});var Fw=s(wt);T(mL.$$.fragment,Fw),Vdr=i(Fw),s1e=n(Fw,"P",{});var zht=s(s1e);Xdr=r(zht,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),zht.forEach(t),zdr=i(Fw),Od=n(Fw,"P",{});var HY=s(Od);Qdr=r(HY,`Note:
Loading a model from its configuration file does `),l1e=n(HY,"STRONG",{});var Qht=s(l1e);Wdr=r(Qht,"not"),Qht.forEach(t),Hdr=r(HY,` load the model weights. It only affects the
model\u2019s configuration. Use `),Bz=n(HY,"A",{href:!0});var Wht=s(Bz);Udr=r(Wht,"from_pretrained()"),Wht.forEach(t),Jdr=r(HY," to load the model weights."),HY.forEach(t),Ydr=i(Fw),T(B6.$$.fragment,Fw),Fw.forEach(t),Kdr=i(fl),Ar=n(fl,"DIV",{class:!0});var ml=s(Ar);T(gL.$$.fragment,ml),Zdr=i(ml),i1e=n(ml,"P",{});var Hht=s(i1e);ecr=r(Hht,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Hht.forEach(t),ocr=i(ml),Ka=n(ml,"P",{});var Tw=s(Ka);rcr=r(Tw,"The model class to instantiate is selected based on the "),d1e=n(Tw,"CODE",{});var Uht=s(d1e);tcr=r(Uht,"model_type"),Uht.forEach(t),acr=r(Tw,` property of the config object (either
passed as an argument or loaded from `),c1e=n(Tw,"CODE",{});var Jht=s(c1e);ncr=r(Jht,"pretrained_model_name_or_path"),Jht.forEach(t),scr=r(Tw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),f1e=n(Tw,"CODE",{});var Yht=s(f1e);lcr=r(Yht,"pretrained_model_name_or_path"),Yht.forEach(t),icr=r(Tw,":"),Tw.forEach(t),dcr=i(ml),hL=n(ml,"UL",{});var WIe=s(hL);P6=n(WIe,"LI",{});var yxe=s(P6);m1e=n(yxe,"STRONG",{});var Kht=s(m1e);ccr=r(Kht,"convnext"),Kht.forEach(t),fcr=r(yxe," \u2014 "),Pz=n(yxe,"A",{href:!0});var Zht=s(Pz);mcr=r(Zht,"TFConvNextForImageClassification"),Zht.forEach(t),gcr=r(yxe," (ConvNext model)"),yxe.forEach(t),hcr=i(WIe),I6=n(WIe,"LI",{});var Lxe=s(I6);g1e=n(Lxe,"STRONG",{});var ept=s(g1e);pcr=r(ept,"vit"),ept.forEach(t),ucr=r(Lxe," \u2014 "),Iz=n(Lxe,"A",{href:!0});var opt=s(Iz);_cr=r(opt,"TFViTForImageClassification"),opt.forEach(t),bcr=r(Lxe," (ViT model)"),Lxe.forEach(t),WIe.forEach(t),vcr=i(ml),T(q6.$$.fragment,ml),ml.forEach(t),fl.forEach(t),XBe=i(f),Vd=n(f,"H2",{class:!0});var HIe=s(Vd);N6=n(HIe,"A",{id:!0,class:!0,href:!0});var rpt=s(N6);h1e=n(rpt,"SPAN",{});var tpt=s(h1e);T(pL.$$.fragment,tpt),tpt.forEach(t),rpt.forEach(t),Fcr=i(HIe),p1e=n(HIe,"SPAN",{});var apt=s(p1e);Tcr=r(apt,"TFAutoModelForMaskedLM"),apt.forEach(t),HIe.forEach(t),zBe=i(f),Zo=n(f,"DIV",{class:!0});var gl=s(Zo);T(uL.$$.fragment,gl),Mcr=i(gl),Xd=n(gl,"P",{});var UY=s(Xd);Ecr=r(UY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),qz=n(UY,"A",{href:!0});var npt=s(qz);Ccr=r(npt,"from_pretrained()"),npt.forEach(t),wcr=r(UY," class method or the "),Nz=n(UY,"A",{href:!0});var spt=s(Nz);Acr=r(spt,"from_config()"),spt.forEach(t),ycr=r(UY,` class
method.`),UY.forEach(t),Lcr=i(gl),_L=n(gl,"P",{});var UIe=s(_L);xcr=r(UIe,"This class cannot be instantiated directly using "),u1e=n(UIe,"CODE",{});var lpt=s(u1e);$cr=r(lpt,"__init__()"),lpt.forEach(t),kcr=r(UIe," (throws an error)."),UIe.forEach(t),Scr=i(gl),At=n(gl,"DIV",{class:!0});var Mw=s(At);T(bL.$$.fragment,Mw),Rcr=i(Mw),_1e=n(Mw,"P",{});var ipt=s(_1e);Bcr=r(ipt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),ipt.forEach(t),Pcr=i(Mw),zd=n(Mw,"P",{});var JY=s(zd);Icr=r(JY,`Note:
Loading a model from its configuration file does `),b1e=n(JY,"STRONG",{});var dpt=s(b1e);qcr=r(dpt,"not"),dpt.forEach(t),Ncr=r(JY,` load the model weights. It only affects the
model\u2019s configuration. Use `),jz=n(JY,"A",{href:!0});var cpt=s(jz);jcr=r(cpt,"from_pretrained()"),cpt.forEach(t),Dcr=r(JY," to load the model weights."),JY.forEach(t),Gcr=i(Mw),T(j6.$$.fragment,Mw),Mw.forEach(t),Ocr=i(gl),yr=n(gl,"DIV",{class:!0});var hl=s(yr);T(vL.$$.fragment,hl),Vcr=i(hl),v1e=n(hl,"P",{});var fpt=s(v1e);Xcr=r(fpt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),fpt.forEach(t),zcr=i(hl),Za=n(hl,"P",{});var Ew=s(Za);Qcr=r(Ew,"The model class to instantiate is selected based on the "),F1e=n(Ew,"CODE",{});var mpt=s(F1e);Wcr=r(mpt,"model_type"),mpt.forEach(t),Hcr=r(Ew,` property of the config object (either
passed as an argument or loaded from `),T1e=n(Ew,"CODE",{});var gpt=s(T1e);Ucr=r(gpt,"pretrained_model_name_or_path"),gpt.forEach(t),Jcr=r(Ew,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),M1e=n(Ew,"CODE",{});var hpt=s(M1e);Ycr=r(hpt,"pretrained_model_name_or_path"),hpt.forEach(t),Kcr=r(Ew,":"),Ew.forEach(t),Zcr=i(hl),ie=n(hl,"UL",{});var fe=s(ie);D6=n(fe,"LI",{});var xxe=s(D6);E1e=n(xxe,"STRONG",{});var ppt=s(E1e);efr=r(ppt,"albert"),ppt.forEach(t),ofr=r(xxe," \u2014 "),Dz=n(xxe,"A",{href:!0});var upt=s(Dz);rfr=r(upt,"TFAlbertForMaskedLM"),upt.forEach(t),tfr=r(xxe," (ALBERT model)"),xxe.forEach(t),afr=i(fe),G6=n(fe,"LI",{});var $xe=s(G6);C1e=n($xe,"STRONG",{});var _pt=s(C1e);nfr=r(_pt,"bert"),_pt.forEach(t),sfr=r($xe," \u2014 "),Gz=n($xe,"A",{href:!0});var bpt=s(Gz);lfr=r(bpt,"TFBertForMaskedLM"),bpt.forEach(t),ifr=r($xe," (BERT model)"),$xe.forEach(t),dfr=i(fe),O6=n(fe,"LI",{});var kxe=s(O6);w1e=n(kxe,"STRONG",{});var vpt=s(w1e);cfr=r(vpt,"camembert"),vpt.forEach(t),ffr=r(kxe," \u2014 "),Oz=n(kxe,"A",{href:!0});var Fpt=s(Oz);mfr=r(Fpt,"TFCamembertForMaskedLM"),Fpt.forEach(t),gfr=r(kxe," (CamemBERT model)"),kxe.forEach(t),hfr=i(fe),V6=n(fe,"LI",{});var Sxe=s(V6);A1e=n(Sxe,"STRONG",{});var Tpt=s(A1e);pfr=r(Tpt,"convbert"),Tpt.forEach(t),ufr=r(Sxe," \u2014 "),Vz=n(Sxe,"A",{href:!0});var Mpt=s(Vz);_fr=r(Mpt,"TFConvBertForMaskedLM"),Mpt.forEach(t),bfr=r(Sxe," (ConvBERT model)"),Sxe.forEach(t),vfr=i(fe),X6=n(fe,"LI",{});var Rxe=s(X6);y1e=n(Rxe,"STRONG",{});var Ept=s(y1e);Ffr=r(Ept,"deberta"),Ept.forEach(t),Tfr=r(Rxe," \u2014 "),Xz=n(Rxe,"A",{href:!0});var Cpt=s(Xz);Mfr=r(Cpt,"TFDebertaForMaskedLM"),Cpt.forEach(t),Efr=r(Rxe," (DeBERTa model)"),Rxe.forEach(t),Cfr=i(fe),z6=n(fe,"LI",{});var Bxe=s(z6);L1e=n(Bxe,"STRONG",{});var wpt=s(L1e);wfr=r(wpt,"deberta-v2"),wpt.forEach(t),Afr=r(Bxe," \u2014 "),zz=n(Bxe,"A",{href:!0});var Apt=s(zz);yfr=r(Apt,"TFDebertaV2ForMaskedLM"),Apt.forEach(t),Lfr=r(Bxe," (DeBERTa-v2 model)"),Bxe.forEach(t),xfr=i(fe),Q6=n(fe,"LI",{});var Pxe=s(Q6);x1e=n(Pxe,"STRONG",{});var ypt=s(x1e);$fr=r(ypt,"distilbert"),ypt.forEach(t),kfr=r(Pxe," \u2014 "),Qz=n(Pxe,"A",{href:!0});var Lpt=s(Qz);Sfr=r(Lpt,"TFDistilBertForMaskedLM"),Lpt.forEach(t),Rfr=r(Pxe," (DistilBERT model)"),Pxe.forEach(t),Bfr=i(fe),W6=n(fe,"LI",{});var Ixe=s(W6);$1e=n(Ixe,"STRONG",{});var xpt=s($1e);Pfr=r(xpt,"electra"),xpt.forEach(t),Ifr=r(Ixe," \u2014 "),Wz=n(Ixe,"A",{href:!0});var $pt=s(Wz);qfr=r($pt,"TFElectraForMaskedLM"),$pt.forEach(t),Nfr=r(Ixe," (ELECTRA model)"),Ixe.forEach(t),jfr=i(fe),H6=n(fe,"LI",{});var qxe=s(H6);k1e=n(qxe,"STRONG",{});var kpt=s(k1e);Dfr=r(kpt,"flaubert"),kpt.forEach(t),Gfr=r(qxe," \u2014 "),Hz=n(qxe,"A",{href:!0});var Spt=s(Hz);Ofr=r(Spt,"TFFlaubertWithLMHeadModel"),Spt.forEach(t),Vfr=r(qxe," (FlauBERT model)"),qxe.forEach(t),Xfr=i(fe),U6=n(fe,"LI",{});var Nxe=s(U6);S1e=n(Nxe,"STRONG",{});var Rpt=s(S1e);zfr=r(Rpt,"funnel"),Rpt.forEach(t),Qfr=r(Nxe," \u2014 "),Uz=n(Nxe,"A",{href:!0});var Bpt=s(Uz);Wfr=r(Bpt,"TFFunnelForMaskedLM"),Bpt.forEach(t),Hfr=r(Nxe," (Funnel Transformer model)"),Nxe.forEach(t),Ufr=i(fe),J6=n(fe,"LI",{});var jxe=s(J6);R1e=n(jxe,"STRONG",{});var Ppt=s(R1e);Jfr=r(Ppt,"layoutlm"),Ppt.forEach(t),Yfr=r(jxe," \u2014 "),Jz=n(jxe,"A",{href:!0});var Ipt=s(Jz);Kfr=r(Ipt,"TFLayoutLMForMaskedLM"),Ipt.forEach(t),Zfr=r(jxe," (LayoutLM model)"),jxe.forEach(t),emr=i(fe),Y6=n(fe,"LI",{});var Dxe=s(Y6);B1e=n(Dxe,"STRONG",{});var qpt=s(B1e);omr=r(qpt,"longformer"),qpt.forEach(t),rmr=r(Dxe," \u2014 "),Yz=n(Dxe,"A",{href:!0});var Npt=s(Yz);tmr=r(Npt,"TFLongformerForMaskedLM"),Npt.forEach(t),amr=r(Dxe," (Longformer model)"),Dxe.forEach(t),nmr=i(fe),K6=n(fe,"LI",{});var Gxe=s(K6);P1e=n(Gxe,"STRONG",{});var jpt=s(P1e);smr=r(jpt,"mobilebert"),jpt.forEach(t),lmr=r(Gxe," \u2014 "),Kz=n(Gxe,"A",{href:!0});var Dpt=s(Kz);imr=r(Dpt,"TFMobileBertForMaskedLM"),Dpt.forEach(t),dmr=r(Gxe," (MobileBERT model)"),Gxe.forEach(t),cmr=i(fe),Z6=n(fe,"LI",{});var Oxe=s(Z6);I1e=n(Oxe,"STRONG",{});var Gpt=s(I1e);fmr=r(Gpt,"mpnet"),Gpt.forEach(t),mmr=r(Oxe," \u2014 "),Zz=n(Oxe,"A",{href:!0});var Opt=s(Zz);gmr=r(Opt,"TFMPNetForMaskedLM"),Opt.forEach(t),hmr=r(Oxe," (MPNet model)"),Oxe.forEach(t),pmr=i(fe),eT=n(fe,"LI",{});var Vxe=s(eT);q1e=n(Vxe,"STRONG",{});var Vpt=s(q1e);umr=r(Vpt,"rembert"),Vpt.forEach(t),_mr=r(Vxe," \u2014 "),eQ=n(Vxe,"A",{href:!0});var Xpt=s(eQ);bmr=r(Xpt,"TFRemBertForMaskedLM"),Xpt.forEach(t),vmr=r(Vxe," (RemBERT model)"),Vxe.forEach(t),Fmr=i(fe),oT=n(fe,"LI",{});var Xxe=s(oT);N1e=n(Xxe,"STRONG",{});var zpt=s(N1e);Tmr=r(zpt,"roberta"),zpt.forEach(t),Mmr=r(Xxe," \u2014 "),oQ=n(Xxe,"A",{href:!0});var Qpt=s(oQ);Emr=r(Qpt,"TFRobertaForMaskedLM"),Qpt.forEach(t),Cmr=r(Xxe," (RoBERTa model)"),Xxe.forEach(t),wmr=i(fe),rT=n(fe,"LI",{});var zxe=s(rT);j1e=n(zxe,"STRONG",{});var Wpt=s(j1e);Amr=r(Wpt,"roformer"),Wpt.forEach(t),ymr=r(zxe," \u2014 "),rQ=n(zxe,"A",{href:!0});var Hpt=s(rQ);Lmr=r(Hpt,"TFRoFormerForMaskedLM"),Hpt.forEach(t),xmr=r(zxe," (RoFormer model)"),zxe.forEach(t),$mr=i(fe),tT=n(fe,"LI",{});var Qxe=s(tT);D1e=n(Qxe,"STRONG",{});var Upt=s(D1e);kmr=r(Upt,"tapas"),Upt.forEach(t),Smr=r(Qxe," \u2014 "),tQ=n(Qxe,"A",{href:!0});var Jpt=s(tQ);Rmr=r(Jpt,"TFTapasForMaskedLM"),Jpt.forEach(t),Bmr=r(Qxe," (TAPAS model)"),Qxe.forEach(t),Pmr=i(fe),aT=n(fe,"LI",{});var Wxe=s(aT);G1e=n(Wxe,"STRONG",{});var Ypt=s(G1e);Imr=r(Ypt,"xlm"),Ypt.forEach(t),qmr=r(Wxe," \u2014 "),aQ=n(Wxe,"A",{href:!0});var Kpt=s(aQ);Nmr=r(Kpt,"TFXLMWithLMHeadModel"),Kpt.forEach(t),jmr=r(Wxe," (XLM model)"),Wxe.forEach(t),Dmr=i(fe),nT=n(fe,"LI",{});var Hxe=s(nT);O1e=n(Hxe,"STRONG",{});var Zpt=s(O1e);Gmr=r(Zpt,"xlm-roberta"),Zpt.forEach(t),Omr=r(Hxe," \u2014 "),nQ=n(Hxe,"A",{href:!0});var eut=s(nQ);Vmr=r(eut,"TFXLMRobertaForMaskedLM"),eut.forEach(t),Xmr=r(Hxe," (XLM-RoBERTa model)"),Hxe.forEach(t),fe.forEach(t),zmr=i(hl),T(sT.$$.fragment,hl),hl.forEach(t),gl.forEach(t),QBe=i(f),Qd=n(f,"H2",{class:!0});var JIe=s(Qd);lT=n(JIe,"A",{id:!0,class:!0,href:!0});var out=s(lT);V1e=n(out,"SPAN",{});var rut=s(V1e);T(FL.$$.fragment,rut),rut.forEach(t),out.forEach(t),Qmr=i(JIe),X1e=n(JIe,"SPAN",{});var tut=s(X1e);Wmr=r(tut,"TFAutoModelForSeq2SeqLM"),tut.forEach(t),JIe.forEach(t),WBe=i(f),er=n(f,"DIV",{class:!0});var pl=s(er);T(TL.$$.fragment,pl),Hmr=i(pl),Wd=n(pl,"P",{});var YY=s(Wd);Umr=r(YY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),sQ=n(YY,"A",{href:!0});var aut=s(sQ);Jmr=r(aut,"from_pretrained()"),aut.forEach(t),Ymr=r(YY," class method or the "),lQ=n(YY,"A",{href:!0});var nut=s(lQ);Kmr=r(nut,"from_config()"),nut.forEach(t),Zmr=r(YY,` class
method.`),YY.forEach(t),egr=i(pl),ML=n(pl,"P",{});var YIe=s(ML);ogr=r(YIe,"This class cannot be instantiated directly using "),z1e=n(YIe,"CODE",{});var sut=s(z1e);rgr=r(sut,"__init__()"),sut.forEach(t),tgr=r(YIe," (throws an error)."),YIe.forEach(t),agr=i(pl),yt=n(pl,"DIV",{class:!0});var Cw=s(yt);T(EL.$$.fragment,Cw),ngr=i(Cw),Q1e=n(Cw,"P",{});var lut=s(Q1e);sgr=r(lut,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),lut.forEach(t),lgr=i(Cw),Hd=n(Cw,"P",{});var KY=s(Hd);igr=r(KY,`Note:
Loading a model from its configuration file does `),W1e=n(KY,"STRONG",{});var iut=s(W1e);dgr=r(iut,"not"),iut.forEach(t),cgr=r(KY,` load the model weights. It only affects the
model\u2019s configuration. Use `),iQ=n(KY,"A",{href:!0});var dut=s(iQ);fgr=r(dut,"from_pretrained()"),dut.forEach(t),mgr=r(KY," to load the model weights."),KY.forEach(t),ggr=i(Cw),T(iT.$$.fragment,Cw),Cw.forEach(t),hgr=i(pl),Lr=n(pl,"DIV",{class:!0});var ul=s(Lr);T(CL.$$.fragment,ul),pgr=i(ul),H1e=n(ul,"P",{});var cut=s(H1e);ugr=r(cut,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),cut.forEach(t),_gr=i(ul),en=n(ul,"P",{});var ww=s(en);bgr=r(ww,"The model class to instantiate is selected based on the "),U1e=n(ww,"CODE",{});var fut=s(U1e);vgr=r(fut,"model_type"),fut.forEach(t),Fgr=r(ww,` property of the config object (either
passed as an argument or loaded from `),J1e=n(ww,"CODE",{});var mut=s(J1e);Tgr=r(mut,"pretrained_model_name_or_path"),mut.forEach(t),Mgr=r(ww,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Y1e=n(ww,"CODE",{});var gut=s(Y1e);Egr=r(gut,"pretrained_model_name_or_path"),gut.forEach(t),Cgr=r(ww,":"),ww.forEach(t),wgr=i(ul),ye=n(ul,"UL",{});var Se=s(ye);dT=n(Se,"LI",{});var Uxe=s(dT);K1e=n(Uxe,"STRONG",{});var hut=s(K1e);Agr=r(hut,"bart"),hut.forEach(t),ygr=r(Uxe," \u2014 "),dQ=n(Uxe,"A",{href:!0});var put=s(dQ);Lgr=r(put,"TFBartForConditionalGeneration"),put.forEach(t),xgr=r(Uxe," (BART model)"),Uxe.forEach(t),$gr=i(Se),cT=n(Se,"LI",{});var Jxe=s(cT);Z1e=n(Jxe,"STRONG",{});var uut=s(Z1e);kgr=r(uut,"blenderbot"),uut.forEach(t),Sgr=r(Jxe," \u2014 "),cQ=n(Jxe,"A",{href:!0});var _ut=s(cQ);Rgr=r(_ut,"TFBlenderbotForConditionalGeneration"),_ut.forEach(t),Bgr=r(Jxe," (Blenderbot model)"),Jxe.forEach(t),Pgr=i(Se),fT=n(Se,"LI",{});var Yxe=s(fT);e9e=n(Yxe,"STRONG",{});var but=s(e9e);Igr=r(but,"blenderbot-small"),but.forEach(t),qgr=r(Yxe," \u2014 "),fQ=n(Yxe,"A",{href:!0});var vut=s(fQ);Ngr=r(vut,"TFBlenderbotSmallForConditionalGeneration"),vut.forEach(t),jgr=r(Yxe," (BlenderbotSmall model)"),Yxe.forEach(t),Dgr=i(Se),mT=n(Se,"LI",{});var Kxe=s(mT);o9e=n(Kxe,"STRONG",{});var Fut=s(o9e);Ggr=r(Fut,"encoder-decoder"),Fut.forEach(t),Ogr=r(Kxe," \u2014 "),mQ=n(Kxe,"A",{href:!0});var Tut=s(mQ);Vgr=r(Tut,"TFEncoderDecoderModel"),Tut.forEach(t),Xgr=r(Kxe," (Encoder decoder model)"),Kxe.forEach(t),zgr=i(Se),gT=n(Se,"LI",{});var Zxe=s(gT);r9e=n(Zxe,"STRONG",{});var Mut=s(r9e);Qgr=r(Mut,"led"),Mut.forEach(t),Wgr=r(Zxe," \u2014 "),gQ=n(Zxe,"A",{href:!0});var Eut=s(gQ);Hgr=r(Eut,"TFLEDForConditionalGeneration"),Eut.forEach(t),Ugr=r(Zxe," (LED model)"),Zxe.forEach(t),Jgr=i(Se),hT=n(Se,"LI",{});var e$e=s(hT);t9e=n(e$e,"STRONG",{});var Cut=s(t9e);Ygr=r(Cut,"marian"),Cut.forEach(t),Kgr=r(e$e," \u2014 "),hQ=n(e$e,"A",{href:!0});var wut=s(hQ);Zgr=r(wut,"TFMarianMTModel"),wut.forEach(t),ehr=r(e$e," (Marian model)"),e$e.forEach(t),ohr=i(Se),pT=n(Se,"LI",{});var o$e=s(pT);a9e=n(o$e,"STRONG",{});var Aut=s(a9e);rhr=r(Aut,"mbart"),Aut.forEach(t),thr=r(o$e," \u2014 "),pQ=n(o$e,"A",{href:!0});var yut=s(pQ);ahr=r(yut,"TFMBartForConditionalGeneration"),yut.forEach(t),nhr=r(o$e," (mBART model)"),o$e.forEach(t),shr=i(Se),uT=n(Se,"LI",{});var r$e=s(uT);n9e=n(r$e,"STRONG",{});var Lut=s(n9e);lhr=r(Lut,"mt5"),Lut.forEach(t),ihr=r(r$e," \u2014 "),uQ=n(r$e,"A",{href:!0});var xut=s(uQ);dhr=r(xut,"TFMT5ForConditionalGeneration"),xut.forEach(t),chr=r(r$e," (mT5 model)"),r$e.forEach(t),fhr=i(Se),_T=n(Se,"LI",{});var t$e=s(_T);s9e=n(t$e,"STRONG",{});var $ut=s(s9e);mhr=r($ut,"pegasus"),$ut.forEach(t),ghr=r(t$e," \u2014 "),_Q=n(t$e,"A",{href:!0});var kut=s(_Q);hhr=r(kut,"TFPegasusForConditionalGeneration"),kut.forEach(t),phr=r(t$e," (Pegasus model)"),t$e.forEach(t),uhr=i(Se),bT=n(Se,"LI",{});var a$e=s(bT);l9e=n(a$e,"STRONG",{});var Sut=s(l9e);_hr=r(Sut,"t5"),Sut.forEach(t),bhr=r(a$e," \u2014 "),bQ=n(a$e,"A",{href:!0});var Rut=s(bQ);vhr=r(Rut,"TFT5ForConditionalGeneration"),Rut.forEach(t),Fhr=r(a$e," (T5 model)"),a$e.forEach(t),Se.forEach(t),Thr=i(ul),T(vT.$$.fragment,ul),ul.forEach(t),pl.forEach(t),HBe=i(f),Ud=n(f,"H2",{class:!0});var KIe=s(Ud);FT=n(KIe,"A",{id:!0,class:!0,href:!0});var But=s(FT);i9e=n(But,"SPAN",{});var Put=s(i9e);T(wL.$$.fragment,Put),Put.forEach(t),But.forEach(t),Mhr=i(KIe),d9e=n(KIe,"SPAN",{});var Iut=s(d9e);Ehr=r(Iut,"TFAutoModelForSequenceClassification"),Iut.forEach(t),KIe.forEach(t),UBe=i(f),or=n(f,"DIV",{class:!0});var _l=s(or);T(AL.$$.fragment,_l),Chr=i(_l),Jd=n(_l,"P",{});var ZY=s(Jd);whr=r(ZY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),vQ=n(ZY,"A",{href:!0});var qut=s(vQ);Ahr=r(qut,"from_pretrained()"),qut.forEach(t),yhr=r(ZY," class method or the "),FQ=n(ZY,"A",{href:!0});var Nut=s(FQ);Lhr=r(Nut,"from_config()"),Nut.forEach(t),xhr=r(ZY,` class
method.`),ZY.forEach(t),$hr=i(_l),yL=n(_l,"P",{});var ZIe=s(yL);khr=r(ZIe,"This class cannot be instantiated directly using "),c9e=n(ZIe,"CODE",{});var jut=s(c9e);Shr=r(jut,"__init__()"),jut.forEach(t),Rhr=r(ZIe," (throws an error)."),ZIe.forEach(t),Bhr=i(_l),Lt=n(_l,"DIV",{class:!0});var Aw=s(Lt);T(LL.$$.fragment,Aw),Phr=i(Aw),f9e=n(Aw,"P",{});var Dut=s(f9e);Ihr=r(Dut,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Dut.forEach(t),qhr=i(Aw),Yd=n(Aw,"P",{});var eK=s(Yd);Nhr=r(eK,`Note:
Loading a model from its configuration file does `),m9e=n(eK,"STRONG",{});var Gut=s(m9e);jhr=r(Gut,"not"),Gut.forEach(t),Dhr=r(eK,` load the model weights. It only affects the
model\u2019s configuration. Use `),TQ=n(eK,"A",{href:!0});var Out=s(TQ);Ghr=r(Out,"from_pretrained()"),Out.forEach(t),Ohr=r(eK," to load the model weights."),eK.forEach(t),Vhr=i(Aw),T(TT.$$.fragment,Aw),Aw.forEach(t),Xhr=i(_l),xr=n(_l,"DIV",{class:!0});var bl=s(xr);T(xL.$$.fragment,bl),zhr=i(bl),g9e=n(bl,"P",{});var Vut=s(g9e);Qhr=r(Vut,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Vut.forEach(t),Whr=i(bl),on=n(bl,"P",{});var yw=s(on);Hhr=r(yw,"The model class to instantiate is selected based on the "),h9e=n(yw,"CODE",{});var Xut=s(h9e);Uhr=r(Xut,"model_type"),Xut.forEach(t),Jhr=r(yw,` property of the config object (either
passed as an argument or loaded from `),p9e=n(yw,"CODE",{});var zut=s(p9e);Yhr=r(zut,"pretrained_model_name_or_path"),zut.forEach(t),Khr=r(yw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),u9e=n(yw,"CODE",{});var Qut=s(u9e);Zhr=r(Qut,"pretrained_model_name_or_path"),Qut.forEach(t),epr=r(yw,":"),yw.forEach(t),opr=i(bl),Z=n(bl,"UL",{});var re=s(Z);MT=n(re,"LI",{});var n$e=s(MT);_9e=n(n$e,"STRONG",{});var Wut=s(_9e);rpr=r(Wut,"albert"),Wut.forEach(t),tpr=r(n$e," \u2014 "),MQ=n(n$e,"A",{href:!0});var Hut=s(MQ);apr=r(Hut,"TFAlbertForSequenceClassification"),Hut.forEach(t),npr=r(n$e," (ALBERT model)"),n$e.forEach(t),spr=i(re),ET=n(re,"LI",{});var s$e=s(ET);b9e=n(s$e,"STRONG",{});var Uut=s(b9e);lpr=r(Uut,"bert"),Uut.forEach(t),ipr=r(s$e," \u2014 "),EQ=n(s$e,"A",{href:!0});var Jut=s(EQ);dpr=r(Jut,"TFBertForSequenceClassification"),Jut.forEach(t),cpr=r(s$e," (BERT model)"),s$e.forEach(t),fpr=i(re),CT=n(re,"LI",{});var l$e=s(CT);v9e=n(l$e,"STRONG",{});var Yut=s(v9e);mpr=r(Yut,"camembert"),Yut.forEach(t),gpr=r(l$e," \u2014 "),CQ=n(l$e,"A",{href:!0});var Kut=s(CQ);hpr=r(Kut,"TFCamembertForSequenceClassification"),Kut.forEach(t),ppr=r(l$e," (CamemBERT model)"),l$e.forEach(t),upr=i(re),wT=n(re,"LI",{});var i$e=s(wT);F9e=n(i$e,"STRONG",{});var Zut=s(F9e);_pr=r(Zut,"convbert"),Zut.forEach(t),bpr=r(i$e," \u2014 "),wQ=n(i$e,"A",{href:!0});var e_t=s(wQ);vpr=r(e_t,"TFConvBertForSequenceClassification"),e_t.forEach(t),Fpr=r(i$e," (ConvBERT model)"),i$e.forEach(t),Tpr=i(re),AT=n(re,"LI",{});var d$e=s(AT);T9e=n(d$e,"STRONG",{});var o_t=s(T9e);Mpr=r(o_t,"ctrl"),o_t.forEach(t),Epr=r(d$e," \u2014 "),AQ=n(d$e,"A",{href:!0});var r_t=s(AQ);Cpr=r(r_t,"TFCTRLForSequenceClassification"),r_t.forEach(t),wpr=r(d$e," (CTRL model)"),d$e.forEach(t),Apr=i(re),yT=n(re,"LI",{});var c$e=s(yT);M9e=n(c$e,"STRONG",{});var t_t=s(M9e);ypr=r(t_t,"deberta"),t_t.forEach(t),Lpr=r(c$e," \u2014 "),yQ=n(c$e,"A",{href:!0});var a_t=s(yQ);xpr=r(a_t,"TFDebertaForSequenceClassification"),a_t.forEach(t),$pr=r(c$e," (DeBERTa model)"),c$e.forEach(t),kpr=i(re),LT=n(re,"LI",{});var f$e=s(LT);E9e=n(f$e,"STRONG",{});var n_t=s(E9e);Spr=r(n_t,"deberta-v2"),n_t.forEach(t),Rpr=r(f$e," \u2014 "),LQ=n(f$e,"A",{href:!0});var s_t=s(LQ);Bpr=r(s_t,"TFDebertaV2ForSequenceClassification"),s_t.forEach(t),Ppr=r(f$e," (DeBERTa-v2 model)"),f$e.forEach(t),Ipr=i(re),xT=n(re,"LI",{});var m$e=s(xT);C9e=n(m$e,"STRONG",{});var l_t=s(C9e);qpr=r(l_t,"distilbert"),l_t.forEach(t),Npr=r(m$e," \u2014 "),xQ=n(m$e,"A",{href:!0});var i_t=s(xQ);jpr=r(i_t,"TFDistilBertForSequenceClassification"),i_t.forEach(t),Dpr=r(m$e," (DistilBERT model)"),m$e.forEach(t),Gpr=i(re),$T=n(re,"LI",{});var g$e=s($T);w9e=n(g$e,"STRONG",{});var d_t=s(w9e);Opr=r(d_t,"electra"),d_t.forEach(t),Vpr=r(g$e," \u2014 "),$Q=n(g$e,"A",{href:!0});var c_t=s($Q);Xpr=r(c_t,"TFElectraForSequenceClassification"),c_t.forEach(t),zpr=r(g$e," (ELECTRA model)"),g$e.forEach(t),Qpr=i(re),kT=n(re,"LI",{});var h$e=s(kT);A9e=n(h$e,"STRONG",{});var f_t=s(A9e);Wpr=r(f_t,"flaubert"),f_t.forEach(t),Hpr=r(h$e," \u2014 "),kQ=n(h$e,"A",{href:!0});var m_t=s(kQ);Upr=r(m_t,"TFFlaubertForSequenceClassification"),m_t.forEach(t),Jpr=r(h$e," (FlauBERT model)"),h$e.forEach(t),Ypr=i(re),ST=n(re,"LI",{});var p$e=s(ST);y9e=n(p$e,"STRONG",{});var g_t=s(y9e);Kpr=r(g_t,"funnel"),g_t.forEach(t),Zpr=r(p$e," \u2014 "),SQ=n(p$e,"A",{href:!0});var h_t=s(SQ);eur=r(h_t,"TFFunnelForSequenceClassification"),h_t.forEach(t),our=r(p$e," (Funnel Transformer model)"),p$e.forEach(t),rur=i(re),RT=n(re,"LI",{});var u$e=s(RT);L9e=n(u$e,"STRONG",{});var p_t=s(L9e);tur=r(p_t,"gpt2"),p_t.forEach(t),aur=r(u$e," \u2014 "),RQ=n(u$e,"A",{href:!0});var u_t=s(RQ);nur=r(u_t,"TFGPT2ForSequenceClassification"),u_t.forEach(t),sur=r(u$e," (OpenAI GPT-2 model)"),u$e.forEach(t),lur=i(re),BT=n(re,"LI",{});var _$e=s(BT);x9e=n(_$e,"STRONG",{});var __t=s(x9e);iur=r(__t,"gptj"),__t.forEach(t),dur=r(_$e," \u2014 "),BQ=n(_$e,"A",{href:!0});var b_t=s(BQ);cur=r(b_t,"TFGPTJForSequenceClassification"),b_t.forEach(t),fur=r(_$e," (GPT-J model)"),_$e.forEach(t),mur=i(re),PT=n(re,"LI",{});var b$e=s(PT);$9e=n(b$e,"STRONG",{});var v_t=s($9e);gur=r(v_t,"layoutlm"),v_t.forEach(t),hur=r(b$e," \u2014 "),PQ=n(b$e,"A",{href:!0});var F_t=s(PQ);pur=r(F_t,"TFLayoutLMForSequenceClassification"),F_t.forEach(t),uur=r(b$e," (LayoutLM model)"),b$e.forEach(t),_ur=i(re),IT=n(re,"LI",{});var v$e=s(IT);k9e=n(v$e,"STRONG",{});var T_t=s(k9e);bur=r(T_t,"longformer"),T_t.forEach(t),vur=r(v$e," \u2014 "),IQ=n(v$e,"A",{href:!0});var M_t=s(IQ);Fur=r(M_t,"TFLongformerForSequenceClassification"),M_t.forEach(t),Tur=r(v$e," (Longformer model)"),v$e.forEach(t),Mur=i(re),qT=n(re,"LI",{});var F$e=s(qT);S9e=n(F$e,"STRONG",{});var E_t=s(S9e);Eur=r(E_t,"mobilebert"),E_t.forEach(t),Cur=r(F$e," \u2014 "),qQ=n(F$e,"A",{href:!0});var C_t=s(qQ);wur=r(C_t,"TFMobileBertForSequenceClassification"),C_t.forEach(t),Aur=r(F$e," (MobileBERT model)"),F$e.forEach(t),yur=i(re),NT=n(re,"LI",{});var T$e=s(NT);R9e=n(T$e,"STRONG",{});var w_t=s(R9e);Lur=r(w_t,"mpnet"),w_t.forEach(t),xur=r(T$e," \u2014 "),NQ=n(T$e,"A",{href:!0});var A_t=s(NQ);$ur=r(A_t,"TFMPNetForSequenceClassification"),A_t.forEach(t),kur=r(T$e," (MPNet model)"),T$e.forEach(t),Sur=i(re),jT=n(re,"LI",{});var M$e=s(jT);B9e=n(M$e,"STRONG",{});var y_t=s(B9e);Rur=r(y_t,"openai-gpt"),y_t.forEach(t),Bur=r(M$e," \u2014 "),jQ=n(M$e,"A",{href:!0});var L_t=s(jQ);Pur=r(L_t,"TFOpenAIGPTForSequenceClassification"),L_t.forEach(t),Iur=r(M$e," (OpenAI GPT model)"),M$e.forEach(t),qur=i(re),DT=n(re,"LI",{});var E$e=s(DT);P9e=n(E$e,"STRONG",{});var x_t=s(P9e);Nur=r(x_t,"rembert"),x_t.forEach(t),jur=r(E$e," \u2014 "),DQ=n(E$e,"A",{href:!0});var $_t=s(DQ);Dur=r($_t,"TFRemBertForSequenceClassification"),$_t.forEach(t),Gur=r(E$e," (RemBERT model)"),E$e.forEach(t),Our=i(re),GT=n(re,"LI",{});var C$e=s(GT);I9e=n(C$e,"STRONG",{});var k_t=s(I9e);Vur=r(k_t,"roberta"),k_t.forEach(t),Xur=r(C$e," \u2014 "),GQ=n(C$e,"A",{href:!0});var S_t=s(GQ);zur=r(S_t,"TFRobertaForSequenceClassification"),S_t.forEach(t),Qur=r(C$e," (RoBERTa model)"),C$e.forEach(t),Wur=i(re),OT=n(re,"LI",{});var w$e=s(OT);q9e=n(w$e,"STRONG",{});var R_t=s(q9e);Hur=r(R_t,"roformer"),R_t.forEach(t),Uur=r(w$e," \u2014 "),OQ=n(w$e,"A",{href:!0});var B_t=s(OQ);Jur=r(B_t,"TFRoFormerForSequenceClassification"),B_t.forEach(t),Yur=r(w$e," (RoFormer model)"),w$e.forEach(t),Kur=i(re),VT=n(re,"LI",{});var A$e=s(VT);N9e=n(A$e,"STRONG",{});var P_t=s(N9e);Zur=r(P_t,"tapas"),P_t.forEach(t),e_r=r(A$e," \u2014 "),VQ=n(A$e,"A",{href:!0});var I_t=s(VQ);o_r=r(I_t,"TFTapasForSequenceClassification"),I_t.forEach(t),r_r=r(A$e," (TAPAS model)"),A$e.forEach(t),t_r=i(re),XT=n(re,"LI",{});var y$e=s(XT);j9e=n(y$e,"STRONG",{});var q_t=s(j9e);a_r=r(q_t,"transfo-xl"),q_t.forEach(t),n_r=r(y$e," \u2014 "),XQ=n(y$e,"A",{href:!0});var N_t=s(XQ);s_r=r(N_t,"TFTransfoXLForSequenceClassification"),N_t.forEach(t),l_r=r(y$e," (Transformer-XL model)"),y$e.forEach(t),i_r=i(re),zT=n(re,"LI",{});var L$e=s(zT);D9e=n(L$e,"STRONG",{});var j_t=s(D9e);d_r=r(j_t,"xlm"),j_t.forEach(t),c_r=r(L$e," \u2014 "),zQ=n(L$e,"A",{href:!0});var D_t=s(zQ);f_r=r(D_t,"TFXLMForSequenceClassification"),D_t.forEach(t),m_r=r(L$e," (XLM model)"),L$e.forEach(t),g_r=i(re),QT=n(re,"LI",{});var x$e=s(QT);G9e=n(x$e,"STRONG",{});var G_t=s(G9e);h_r=r(G_t,"xlm-roberta"),G_t.forEach(t),p_r=r(x$e," \u2014 "),QQ=n(x$e,"A",{href:!0});var O_t=s(QQ);u_r=r(O_t,"TFXLMRobertaForSequenceClassification"),O_t.forEach(t),__r=r(x$e," (XLM-RoBERTa model)"),x$e.forEach(t),b_r=i(re),WT=n(re,"LI",{});var $$e=s(WT);O9e=n($$e,"STRONG",{});var V_t=s(O9e);v_r=r(V_t,"xlnet"),V_t.forEach(t),F_r=r($$e," \u2014 "),WQ=n($$e,"A",{href:!0});var X_t=s(WQ);T_r=r(X_t,"TFXLNetForSequenceClassification"),X_t.forEach(t),M_r=r($$e," (XLNet model)"),$$e.forEach(t),re.forEach(t),E_r=i(bl),T(HT.$$.fragment,bl),bl.forEach(t),_l.forEach(t),JBe=i(f),Kd=n(f,"H2",{class:!0});var eqe=s(Kd);UT=n(eqe,"A",{id:!0,class:!0,href:!0});var z_t=s(UT);V9e=n(z_t,"SPAN",{});var Q_t=s(V9e);T($L.$$.fragment,Q_t),Q_t.forEach(t),z_t.forEach(t),C_r=i(eqe),X9e=n(eqe,"SPAN",{});var W_t=s(X9e);w_r=r(W_t,"TFAutoModelForMultipleChoice"),W_t.forEach(t),eqe.forEach(t),YBe=i(f),rr=n(f,"DIV",{class:!0});var vl=s(rr);T(kL.$$.fragment,vl),A_r=i(vl),Zd=n(vl,"P",{});var oK=s(Zd);y_r=r(oK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),HQ=n(oK,"A",{href:!0});var H_t=s(HQ);L_r=r(H_t,"from_pretrained()"),H_t.forEach(t),x_r=r(oK," class method or the "),UQ=n(oK,"A",{href:!0});var U_t=s(UQ);$_r=r(U_t,"from_config()"),U_t.forEach(t),k_r=r(oK,` class
method.`),oK.forEach(t),S_r=i(vl),SL=n(vl,"P",{});var oqe=s(SL);R_r=r(oqe,"This class cannot be instantiated directly using "),z9e=n(oqe,"CODE",{});var J_t=s(z9e);B_r=r(J_t,"__init__()"),J_t.forEach(t),P_r=r(oqe," (throws an error)."),oqe.forEach(t),I_r=i(vl),xt=n(vl,"DIV",{class:!0});var Lw=s(xt);T(RL.$$.fragment,Lw),q_r=i(Lw),Q9e=n(Lw,"P",{});var Y_t=s(Q9e);N_r=r(Y_t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Y_t.forEach(t),j_r=i(Lw),ec=n(Lw,"P",{});var rK=s(ec);D_r=r(rK,`Note:
Loading a model from its configuration file does `),W9e=n(rK,"STRONG",{});var K_t=s(W9e);G_r=r(K_t,"not"),K_t.forEach(t),O_r=r(rK,` load the model weights. It only affects the
model\u2019s configuration. Use `),JQ=n(rK,"A",{href:!0});var Z_t=s(JQ);V_r=r(Z_t,"from_pretrained()"),Z_t.forEach(t),X_r=r(rK," to load the model weights."),rK.forEach(t),z_r=i(Lw),T(JT.$$.fragment,Lw),Lw.forEach(t),Q_r=i(vl),$r=n(vl,"DIV",{class:!0});var Fl=s($r);T(BL.$$.fragment,Fl),W_r=i(Fl),H9e=n(Fl,"P",{});var e1t=s(H9e);H_r=r(e1t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),e1t.forEach(t),U_r=i(Fl),rn=n(Fl,"P",{});var xw=s(rn);J_r=r(xw,"The model class to instantiate is selected based on the "),U9e=n(xw,"CODE",{});var o1t=s(U9e);Y_r=r(o1t,"model_type"),o1t.forEach(t),K_r=r(xw,` property of the config object (either
passed as an argument or loaded from `),J9e=n(xw,"CODE",{});var r1t=s(J9e);Z_r=r(r1t,"pretrained_model_name_or_path"),r1t.forEach(t),e1r=r(xw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Y9e=n(xw,"CODE",{});var t1t=s(Y9e);o1r=r(t1t,"pretrained_model_name_or_path"),t1t.forEach(t),r1r=r(xw,":"),xw.forEach(t),t1r=i(Fl),pe=n(Fl,"UL",{});var _e=s(pe);YT=n(_e,"LI",{});var k$e=s(YT);K9e=n(k$e,"STRONG",{});var a1t=s(K9e);a1r=r(a1t,"albert"),a1t.forEach(t),n1r=r(k$e," \u2014 "),YQ=n(k$e,"A",{href:!0});var n1t=s(YQ);s1r=r(n1t,"TFAlbertForMultipleChoice"),n1t.forEach(t),l1r=r(k$e," (ALBERT model)"),k$e.forEach(t),i1r=i(_e),KT=n(_e,"LI",{});var S$e=s(KT);Z9e=n(S$e,"STRONG",{});var s1t=s(Z9e);d1r=r(s1t,"bert"),s1t.forEach(t),c1r=r(S$e," \u2014 "),KQ=n(S$e,"A",{href:!0});var l1t=s(KQ);f1r=r(l1t,"TFBertForMultipleChoice"),l1t.forEach(t),m1r=r(S$e," (BERT model)"),S$e.forEach(t),g1r=i(_e),ZT=n(_e,"LI",{});var R$e=s(ZT);ebe=n(R$e,"STRONG",{});var i1t=s(ebe);h1r=r(i1t,"camembert"),i1t.forEach(t),p1r=r(R$e," \u2014 "),ZQ=n(R$e,"A",{href:!0});var d1t=s(ZQ);u1r=r(d1t,"TFCamembertForMultipleChoice"),d1t.forEach(t),_1r=r(R$e," (CamemBERT model)"),R$e.forEach(t),b1r=i(_e),eM=n(_e,"LI",{});var B$e=s(eM);obe=n(B$e,"STRONG",{});var c1t=s(obe);v1r=r(c1t,"convbert"),c1t.forEach(t),F1r=r(B$e," \u2014 "),eW=n(B$e,"A",{href:!0});var f1t=s(eW);T1r=r(f1t,"TFConvBertForMultipleChoice"),f1t.forEach(t),M1r=r(B$e," (ConvBERT model)"),B$e.forEach(t),E1r=i(_e),oM=n(_e,"LI",{});var P$e=s(oM);rbe=n(P$e,"STRONG",{});var m1t=s(rbe);C1r=r(m1t,"distilbert"),m1t.forEach(t),w1r=r(P$e," \u2014 "),oW=n(P$e,"A",{href:!0});var g1t=s(oW);A1r=r(g1t,"TFDistilBertForMultipleChoice"),g1t.forEach(t),y1r=r(P$e," (DistilBERT model)"),P$e.forEach(t),L1r=i(_e),rM=n(_e,"LI",{});var I$e=s(rM);tbe=n(I$e,"STRONG",{});var h1t=s(tbe);x1r=r(h1t,"electra"),h1t.forEach(t),$1r=r(I$e," \u2014 "),rW=n(I$e,"A",{href:!0});var p1t=s(rW);k1r=r(p1t,"TFElectraForMultipleChoice"),p1t.forEach(t),S1r=r(I$e," (ELECTRA model)"),I$e.forEach(t),R1r=i(_e),tM=n(_e,"LI",{});var q$e=s(tM);abe=n(q$e,"STRONG",{});var u1t=s(abe);B1r=r(u1t,"flaubert"),u1t.forEach(t),P1r=r(q$e," \u2014 "),tW=n(q$e,"A",{href:!0});var _1t=s(tW);I1r=r(_1t,"TFFlaubertForMultipleChoice"),_1t.forEach(t),q1r=r(q$e," (FlauBERT model)"),q$e.forEach(t),N1r=i(_e),aM=n(_e,"LI",{});var N$e=s(aM);nbe=n(N$e,"STRONG",{});var b1t=s(nbe);j1r=r(b1t,"funnel"),b1t.forEach(t),D1r=r(N$e," \u2014 "),aW=n(N$e,"A",{href:!0});var v1t=s(aW);G1r=r(v1t,"TFFunnelForMultipleChoice"),v1t.forEach(t),O1r=r(N$e," (Funnel Transformer model)"),N$e.forEach(t),V1r=i(_e),nM=n(_e,"LI",{});var j$e=s(nM);sbe=n(j$e,"STRONG",{});var F1t=s(sbe);X1r=r(F1t,"longformer"),F1t.forEach(t),z1r=r(j$e," \u2014 "),nW=n(j$e,"A",{href:!0});var T1t=s(nW);Q1r=r(T1t,"TFLongformerForMultipleChoice"),T1t.forEach(t),W1r=r(j$e," (Longformer model)"),j$e.forEach(t),H1r=i(_e),sM=n(_e,"LI",{});var D$e=s(sM);lbe=n(D$e,"STRONG",{});var M1t=s(lbe);U1r=r(M1t,"mobilebert"),M1t.forEach(t),J1r=r(D$e," \u2014 "),sW=n(D$e,"A",{href:!0});var E1t=s(sW);Y1r=r(E1t,"TFMobileBertForMultipleChoice"),E1t.forEach(t),K1r=r(D$e," (MobileBERT model)"),D$e.forEach(t),Z1r=i(_e),lM=n(_e,"LI",{});var G$e=s(lM);ibe=n(G$e,"STRONG",{});var C1t=s(ibe);e9r=r(C1t,"mpnet"),C1t.forEach(t),o9r=r(G$e," \u2014 "),lW=n(G$e,"A",{href:!0});var w1t=s(lW);r9r=r(w1t,"TFMPNetForMultipleChoice"),w1t.forEach(t),t9r=r(G$e," (MPNet model)"),G$e.forEach(t),a9r=i(_e),iM=n(_e,"LI",{});var O$e=s(iM);dbe=n(O$e,"STRONG",{});var A1t=s(dbe);n9r=r(A1t,"rembert"),A1t.forEach(t),s9r=r(O$e," \u2014 "),iW=n(O$e,"A",{href:!0});var y1t=s(iW);l9r=r(y1t,"TFRemBertForMultipleChoice"),y1t.forEach(t),i9r=r(O$e," (RemBERT model)"),O$e.forEach(t),d9r=i(_e),dM=n(_e,"LI",{});var V$e=s(dM);cbe=n(V$e,"STRONG",{});var L1t=s(cbe);c9r=r(L1t,"roberta"),L1t.forEach(t),f9r=r(V$e," \u2014 "),dW=n(V$e,"A",{href:!0});var x1t=s(dW);m9r=r(x1t,"TFRobertaForMultipleChoice"),x1t.forEach(t),g9r=r(V$e," (RoBERTa model)"),V$e.forEach(t),h9r=i(_e),cM=n(_e,"LI",{});var X$e=s(cM);fbe=n(X$e,"STRONG",{});var $1t=s(fbe);p9r=r($1t,"roformer"),$1t.forEach(t),u9r=r(X$e," \u2014 "),cW=n(X$e,"A",{href:!0});var k1t=s(cW);_9r=r(k1t,"TFRoFormerForMultipleChoice"),k1t.forEach(t),b9r=r(X$e," (RoFormer model)"),X$e.forEach(t),v9r=i(_e),fM=n(_e,"LI",{});var z$e=s(fM);mbe=n(z$e,"STRONG",{});var S1t=s(mbe);F9r=r(S1t,"xlm"),S1t.forEach(t),T9r=r(z$e," \u2014 "),fW=n(z$e,"A",{href:!0});var R1t=s(fW);M9r=r(R1t,"TFXLMForMultipleChoice"),R1t.forEach(t),E9r=r(z$e," (XLM model)"),z$e.forEach(t),C9r=i(_e),mM=n(_e,"LI",{});var Q$e=s(mM);gbe=n(Q$e,"STRONG",{});var B1t=s(gbe);w9r=r(B1t,"xlm-roberta"),B1t.forEach(t),A9r=r(Q$e," \u2014 "),mW=n(Q$e,"A",{href:!0});var P1t=s(mW);y9r=r(P1t,"TFXLMRobertaForMultipleChoice"),P1t.forEach(t),L9r=r(Q$e," (XLM-RoBERTa model)"),Q$e.forEach(t),x9r=i(_e),gM=n(_e,"LI",{});var W$e=s(gM);hbe=n(W$e,"STRONG",{});var I1t=s(hbe);$9r=r(I1t,"xlnet"),I1t.forEach(t),k9r=r(W$e," \u2014 "),gW=n(W$e,"A",{href:!0});var q1t=s(gW);S9r=r(q1t,"TFXLNetForMultipleChoice"),q1t.forEach(t),R9r=r(W$e," (XLNet model)"),W$e.forEach(t),_e.forEach(t),B9r=i(Fl),T(hM.$$.fragment,Fl),Fl.forEach(t),vl.forEach(t),KBe=i(f),oc=n(f,"H2",{class:!0});var rqe=s(oc);pM=n(rqe,"A",{id:!0,class:!0,href:!0});var N1t=s(pM);pbe=n(N1t,"SPAN",{});var j1t=s(pbe);T(PL.$$.fragment,j1t),j1t.forEach(t),N1t.forEach(t),P9r=i(rqe),ube=n(rqe,"SPAN",{});var D1t=s(ube);I9r=r(D1t,"TFAutoModelForTableQuestionAnswering"),D1t.forEach(t),rqe.forEach(t),ZBe=i(f),tr=n(f,"DIV",{class:!0});var Tl=s(tr);T(IL.$$.fragment,Tl),q9r=i(Tl),rc=n(Tl,"P",{});var tK=s(rc);N9r=r(tK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),hW=n(tK,"A",{href:!0});var G1t=s(hW);j9r=r(G1t,"from_pretrained()"),G1t.forEach(t),D9r=r(tK," class method or the "),pW=n(tK,"A",{href:!0});var O1t=s(pW);G9r=r(O1t,"from_config()"),O1t.forEach(t),O9r=r(tK,` class
method.`),tK.forEach(t),V9r=i(Tl),qL=n(Tl,"P",{});var tqe=s(qL);X9r=r(tqe,"This class cannot be instantiated directly using "),_be=n(tqe,"CODE",{});var V1t=s(_be);z9r=r(V1t,"__init__()"),V1t.forEach(t),Q9r=r(tqe," (throws an error)."),tqe.forEach(t),W9r=i(Tl),$t=n(Tl,"DIV",{class:!0});var $w=s($t);T(NL.$$.fragment,$w),H9r=i($w),bbe=n($w,"P",{});var X1t=s(bbe);U9r=r(X1t,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),X1t.forEach(t),J9r=i($w),tc=n($w,"P",{});var aK=s(tc);Y9r=r(aK,`Note:
Loading a model from its configuration file does `),vbe=n(aK,"STRONG",{});var z1t=s(vbe);K9r=r(z1t,"not"),z1t.forEach(t),Z9r=r(aK,` load the model weights. It only affects the
model\u2019s configuration. Use `),uW=n(aK,"A",{href:!0});var Q1t=s(uW);ebr=r(Q1t,"from_pretrained()"),Q1t.forEach(t),obr=r(aK," to load the model weights."),aK.forEach(t),rbr=i($w),T(uM.$$.fragment,$w),$w.forEach(t),tbr=i(Tl),kr=n(Tl,"DIV",{class:!0});var Ml=s(kr);T(jL.$$.fragment,Ml),abr=i(Ml),Fbe=n(Ml,"P",{});var W1t=s(Fbe);nbr=r(W1t,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),W1t.forEach(t),sbr=i(Ml),tn=n(Ml,"P",{});var kw=s(tn);lbr=r(kw,"The model class to instantiate is selected based on the "),Tbe=n(kw,"CODE",{});var H1t=s(Tbe);ibr=r(H1t,"model_type"),H1t.forEach(t),dbr=r(kw,` property of the config object (either
passed as an argument or loaded from `),Mbe=n(kw,"CODE",{});var U1t=s(Mbe);cbr=r(U1t,"pretrained_model_name_or_path"),U1t.forEach(t),fbr=r(kw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ebe=n(kw,"CODE",{});var J1t=s(Ebe);mbr=r(J1t,"pretrained_model_name_or_path"),J1t.forEach(t),gbr=r(kw,":"),kw.forEach(t),hbr=i(Ml),Cbe=n(Ml,"UL",{});var Y1t=s(Cbe);_M=n(Y1t,"LI",{});var H$e=s(_M);wbe=n(H$e,"STRONG",{});var K1t=s(wbe);pbr=r(K1t,"tapas"),K1t.forEach(t),ubr=r(H$e," \u2014 "),_W=n(H$e,"A",{href:!0});var Z1t=s(_W);_br=r(Z1t,"TFTapasForQuestionAnswering"),Z1t.forEach(t),bbr=r(H$e," (TAPAS model)"),H$e.forEach(t),Y1t.forEach(t),vbr=i(Ml),T(bM.$$.fragment,Ml),Ml.forEach(t),Tl.forEach(t),ePe=i(f),ac=n(f,"H2",{class:!0});var aqe=s(ac);vM=n(aqe,"A",{id:!0,class:!0,href:!0});var e9t=s(vM);Abe=n(e9t,"SPAN",{});var o9t=s(Abe);T(DL.$$.fragment,o9t),o9t.forEach(t),e9t.forEach(t),Fbr=i(aqe),ybe=n(aqe,"SPAN",{});var r9t=s(ybe);Tbr=r(r9t,"TFAutoModelForTokenClassification"),r9t.forEach(t),aqe.forEach(t),oPe=i(f),ar=n(f,"DIV",{class:!0});var El=s(ar);T(GL.$$.fragment,El),Mbr=i(El),nc=n(El,"P",{});var nK=s(nc);Ebr=r(nK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),bW=n(nK,"A",{href:!0});var t9t=s(bW);Cbr=r(t9t,"from_pretrained()"),t9t.forEach(t),wbr=r(nK," class method or the "),vW=n(nK,"A",{href:!0});var a9t=s(vW);Abr=r(a9t,"from_config()"),a9t.forEach(t),ybr=r(nK,` class
method.`),nK.forEach(t),Lbr=i(El),OL=n(El,"P",{});var nqe=s(OL);xbr=r(nqe,"This class cannot be instantiated directly using "),Lbe=n(nqe,"CODE",{});var n9t=s(Lbe);$br=r(n9t,"__init__()"),n9t.forEach(t),kbr=r(nqe," (throws an error)."),nqe.forEach(t),Sbr=i(El),kt=n(El,"DIV",{class:!0});var Sw=s(kt);T(VL.$$.fragment,Sw),Rbr=i(Sw),xbe=n(Sw,"P",{});var s9t=s(xbe);Bbr=r(s9t,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),s9t.forEach(t),Pbr=i(Sw),sc=n(Sw,"P",{});var sK=s(sc);Ibr=r(sK,`Note:
Loading a model from its configuration file does `),$be=n(sK,"STRONG",{});var l9t=s($be);qbr=r(l9t,"not"),l9t.forEach(t),Nbr=r(sK,` load the model weights. It only affects the
model\u2019s configuration. Use `),FW=n(sK,"A",{href:!0});var i9t=s(FW);jbr=r(i9t,"from_pretrained()"),i9t.forEach(t),Dbr=r(sK," to load the model weights."),sK.forEach(t),Gbr=i(Sw),T(FM.$$.fragment,Sw),Sw.forEach(t),Obr=i(El),Sr=n(El,"DIV",{class:!0});var Cl=s(Sr);T(XL.$$.fragment,Cl),Vbr=i(Cl),kbe=n(Cl,"P",{});var d9t=s(kbe);Xbr=r(d9t,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),d9t.forEach(t),zbr=i(Cl),an=n(Cl,"P",{});var Rw=s(an);Qbr=r(Rw,"The model class to instantiate is selected based on the "),Sbe=n(Rw,"CODE",{});var c9t=s(Sbe);Wbr=r(c9t,"model_type"),c9t.forEach(t),Hbr=r(Rw,` property of the config object (either
passed as an argument or loaded from `),Rbe=n(Rw,"CODE",{});var f9t=s(Rbe);Ubr=r(f9t,"pretrained_model_name_or_path"),f9t.forEach(t),Jbr=r(Rw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bbe=n(Rw,"CODE",{});var m9t=s(Bbe);Ybr=r(m9t,"pretrained_model_name_or_path"),m9t.forEach(t),Kbr=r(Rw,":"),Rw.forEach(t),Zbr=i(Cl),de=n(Cl,"UL",{});var me=s(de);TM=n(me,"LI",{});var U$e=s(TM);Pbe=n(U$e,"STRONG",{});var g9t=s(Pbe);e2r=r(g9t,"albert"),g9t.forEach(t),o2r=r(U$e," \u2014 "),TW=n(U$e,"A",{href:!0});var h9t=s(TW);r2r=r(h9t,"TFAlbertForTokenClassification"),h9t.forEach(t),t2r=r(U$e," (ALBERT model)"),U$e.forEach(t),a2r=i(me),MM=n(me,"LI",{});var J$e=s(MM);Ibe=n(J$e,"STRONG",{});var p9t=s(Ibe);n2r=r(p9t,"bert"),p9t.forEach(t),s2r=r(J$e," \u2014 "),MW=n(J$e,"A",{href:!0});var u9t=s(MW);l2r=r(u9t,"TFBertForTokenClassification"),u9t.forEach(t),i2r=r(J$e," (BERT model)"),J$e.forEach(t),d2r=i(me),EM=n(me,"LI",{});var Y$e=s(EM);qbe=n(Y$e,"STRONG",{});var _9t=s(qbe);c2r=r(_9t,"camembert"),_9t.forEach(t),f2r=r(Y$e," \u2014 "),EW=n(Y$e,"A",{href:!0});var b9t=s(EW);m2r=r(b9t,"TFCamembertForTokenClassification"),b9t.forEach(t),g2r=r(Y$e," (CamemBERT model)"),Y$e.forEach(t),h2r=i(me),CM=n(me,"LI",{});var K$e=s(CM);Nbe=n(K$e,"STRONG",{});var v9t=s(Nbe);p2r=r(v9t,"convbert"),v9t.forEach(t),u2r=r(K$e," \u2014 "),CW=n(K$e,"A",{href:!0});var F9t=s(CW);_2r=r(F9t,"TFConvBertForTokenClassification"),F9t.forEach(t),b2r=r(K$e," (ConvBERT model)"),K$e.forEach(t),v2r=i(me),wM=n(me,"LI",{});var Z$e=s(wM);jbe=n(Z$e,"STRONG",{});var T9t=s(jbe);F2r=r(T9t,"deberta"),T9t.forEach(t),T2r=r(Z$e," \u2014 "),wW=n(Z$e,"A",{href:!0});var M9t=s(wW);M2r=r(M9t,"TFDebertaForTokenClassification"),M9t.forEach(t),E2r=r(Z$e," (DeBERTa model)"),Z$e.forEach(t),C2r=i(me),AM=n(me,"LI",{});var eke=s(AM);Dbe=n(eke,"STRONG",{});var E9t=s(Dbe);w2r=r(E9t,"deberta-v2"),E9t.forEach(t),A2r=r(eke," \u2014 "),AW=n(eke,"A",{href:!0});var C9t=s(AW);y2r=r(C9t,"TFDebertaV2ForTokenClassification"),C9t.forEach(t),L2r=r(eke," (DeBERTa-v2 model)"),eke.forEach(t),x2r=i(me),yM=n(me,"LI",{});var oke=s(yM);Gbe=n(oke,"STRONG",{});var w9t=s(Gbe);$2r=r(w9t,"distilbert"),w9t.forEach(t),k2r=r(oke," \u2014 "),yW=n(oke,"A",{href:!0});var A9t=s(yW);S2r=r(A9t,"TFDistilBertForTokenClassification"),A9t.forEach(t),R2r=r(oke," (DistilBERT model)"),oke.forEach(t),B2r=i(me),LM=n(me,"LI",{});var rke=s(LM);Obe=n(rke,"STRONG",{});var y9t=s(Obe);P2r=r(y9t,"electra"),y9t.forEach(t),I2r=r(rke," \u2014 "),LW=n(rke,"A",{href:!0});var L9t=s(LW);q2r=r(L9t,"TFElectraForTokenClassification"),L9t.forEach(t),N2r=r(rke," (ELECTRA model)"),rke.forEach(t),j2r=i(me),xM=n(me,"LI",{});var tke=s(xM);Vbe=n(tke,"STRONG",{});var x9t=s(Vbe);D2r=r(x9t,"flaubert"),x9t.forEach(t),G2r=r(tke," \u2014 "),xW=n(tke,"A",{href:!0});var $9t=s(xW);O2r=r($9t,"TFFlaubertForTokenClassification"),$9t.forEach(t),V2r=r(tke," (FlauBERT model)"),tke.forEach(t),X2r=i(me),$M=n(me,"LI",{});var ake=s($M);Xbe=n(ake,"STRONG",{});var k9t=s(Xbe);z2r=r(k9t,"funnel"),k9t.forEach(t),Q2r=r(ake," \u2014 "),$W=n(ake,"A",{href:!0});var S9t=s($W);W2r=r(S9t,"TFFunnelForTokenClassification"),S9t.forEach(t),H2r=r(ake," (Funnel Transformer model)"),ake.forEach(t),U2r=i(me),kM=n(me,"LI",{});var nke=s(kM);zbe=n(nke,"STRONG",{});var R9t=s(zbe);J2r=r(R9t,"layoutlm"),R9t.forEach(t),Y2r=r(nke," \u2014 "),kW=n(nke,"A",{href:!0});var B9t=s(kW);K2r=r(B9t,"TFLayoutLMForTokenClassification"),B9t.forEach(t),Z2r=r(nke," (LayoutLM model)"),nke.forEach(t),e5r=i(me),SM=n(me,"LI",{});var ske=s(SM);Qbe=n(ske,"STRONG",{});var P9t=s(Qbe);o5r=r(P9t,"longformer"),P9t.forEach(t),r5r=r(ske," \u2014 "),SW=n(ske,"A",{href:!0});var I9t=s(SW);t5r=r(I9t,"TFLongformerForTokenClassification"),I9t.forEach(t),a5r=r(ske," (Longformer model)"),ske.forEach(t),n5r=i(me),RM=n(me,"LI",{});var lke=s(RM);Wbe=n(lke,"STRONG",{});var q9t=s(Wbe);s5r=r(q9t,"mobilebert"),q9t.forEach(t),l5r=r(lke," \u2014 "),RW=n(lke,"A",{href:!0});var N9t=s(RW);i5r=r(N9t,"TFMobileBertForTokenClassification"),N9t.forEach(t),d5r=r(lke," (MobileBERT model)"),lke.forEach(t),c5r=i(me),BM=n(me,"LI",{});var ike=s(BM);Hbe=n(ike,"STRONG",{});var j9t=s(Hbe);f5r=r(j9t,"mpnet"),j9t.forEach(t),m5r=r(ike," \u2014 "),BW=n(ike,"A",{href:!0});var D9t=s(BW);g5r=r(D9t,"TFMPNetForTokenClassification"),D9t.forEach(t),h5r=r(ike," (MPNet model)"),ike.forEach(t),p5r=i(me),PM=n(me,"LI",{});var dke=s(PM);Ube=n(dke,"STRONG",{});var G9t=s(Ube);u5r=r(G9t,"rembert"),G9t.forEach(t),_5r=r(dke," \u2014 "),PW=n(dke,"A",{href:!0});var O9t=s(PW);b5r=r(O9t,"TFRemBertForTokenClassification"),O9t.forEach(t),v5r=r(dke," (RemBERT model)"),dke.forEach(t),F5r=i(me),IM=n(me,"LI",{});var cke=s(IM);Jbe=n(cke,"STRONG",{});var V9t=s(Jbe);T5r=r(V9t,"roberta"),V9t.forEach(t),M5r=r(cke," \u2014 "),IW=n(cke,"A",{href:!0});var X9t=s(IW);E5r=r(X9t,"TFRobertaForTokenClassification"),X9t.forEach(t),C5r=r(cke," (RoBERTa model)"),cke.forEach(t),w5r=i(me),qM=n(me,"LI",{});var fke=s(qM);Ybe=n(fke,"STRONG",{});var z9t=s(Ybe);A5r=r(z9t,"roformer"),z9t.forEach(t),y5r=r(fke," \u2014 "),qW=n(fke,"A",{href:!0});var Q9t=s(qW);L5r=r(Q9t,"TFRoFormerForTokenClassification"),Q9t.forEach(t),x5r=r(fke," (RoFormer model)"),fke.forEach(t),$5r=i(me),NM=n(me,"LI",{});var mke=s(NM);Kbe=n(mke,"STRONG",{});var W9t=s(Kbe);k5r=r(W9t,"xlm"),W9t.forEach(t),S5r=r(mke," \u2014 "),NW=n(mke,"A",{href:!0});var H9t=s(NW);R5r=r(H9t,"TFXLMForTokenClassification"),H9t.forEach(t),B5r=r(mke," (XLM model)"),mke.forEach(t),P5r=i(me),jM=n(me,"LI",{});var gke=s(jM);Zbe=n(gke,"STRONG",{});var U9t=s(Zbe);I5r=r(U9t,"xlm-roberta"),U9t.forEach(t),q5r=r(gke," \u2014 "),jW=n(gke,"A",{href:!0});var J9t=s(jW);N5r=r(J9t,"TFXLMRobertaForTokenClassification"),J9t.forEach(t),j5r=r(gke," (XLM-RoBERTa model)"),gke.forEach(t),D5r=i(me),DM=n(me,"LI",{});var hke=s(DM);e2e=n(hke,"STRONG",{});var Y9t=s(e2e);G5r=r(Y9t,"xlnet"),Y9t.forEach(t),O5r=r(hke," \u2014 "),DW=n(hke,"A",{href:!0});var K9t=s(DW);V5r=r(K9t,"TFXLNetForTokenClassification"),K9t.forEach(t),X5r=r(hke," (XLNet model)"),hke.forEach(t),me.forEach(t),z5r=i(Cl),T(GM.$$.fragment,Cl),Cl.forEach(t),El.forEach(t),rPe=i(f),lc=n(f,"H2",{class:!0});var sqe=s(lc);OM=n(sqe,"A",{id:!0,class:!0,href:!0});var Z9t=s(OM);o2e=n(Z9t,"SPAN",{});var ebt=s(o2e);T(zL.$$.fragment,ebt),ebt.forEach(t),Z9t.forEach(t),Q5r=i(sqe),r2e=n(sqe,"SPAN",{});var obt=s(r2e);W5r=r(obt,"TFAutoModelForQuestionAnswering"),obt.forEach(t),sqe.forEach(t),tPe=i(f),nr=n(f,"DIV",{class:!0});var wl=s(nr);T(QL.$$.fragment,wl),H5r=i(wl),ic=n(wl,"P",{});var lK=s(ic);U5r=r(lK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),GW=n(lK,"A",{href:!0});var rbt=s(GW);J5r=r(rbt,"from_pretrained()"),rbt.forEach(t),Y5r=r(lK," class method or the "),OW=n(lK,"A",{href:!0});var tbt=s(OW);K5r=r(tbt,"from_config()"),tbt.forEach(t),Z5r=r(lK,` class
method.`),lK.forEach(t),evr=i(wl),WL=n(wl,"P",{});var lqe=s(WL);ovr=r(lqe,"This class cannot be instantiated directly using "),t2e=n(lqe,"CODE",{});var abt=s(t2e);rvr=r(abt,"__init__()"),abt.forEach(t),tvr=r(lqe," (throws an error)."),lqe.forEach(t),avr=i(wl),St=n(wl,"DIV",{class:!0});var Bw=s(St);T(HL.$$.fragment,Bw),nvr=i(Bw),a2e=n(Bw,"P",{});var nbt=s(a2e);svr=r(nbt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),nbt.forEach(t),lvr=i(Bw),dc=n(Bw,"P",{});var iK=s(dc);ivr=r(iK,`Note:
Loading a model from its configuration file does `),n2e=n(iK,"STRONG",{});var sbt=s(n2e);dvr=r(sbt,"not"),sbt.forEach(t),cvr=r(iK,` load the model weights. It only affects the
model\u2019s configuration. Use `),VW=n(iK,"A",{href:!0});var lbt=s(VW);fvr=r(lbt,"from_pretrained()"),lbt.forEach(t),mvr=r(iK," to load the model weights."),iK.forEach(t),gvr=i(Bw),T(VM.$$.fragment,Bw),Bw.forEach(t),hvr=i(wl),Rr=n(wl,"DIV",{class:!0});var Al=s(Rr);T(UL.$$.fragment,Al),pvr=i(Al),s2e=n(Al,"P",{});var ibt=s(s2e);uvr=r(ibt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),ibt.forEach(t),_vr=i(Al),nn=n(Al,"P",{});var Pw=s(nn);bvr=r(Pw,"The model class to instantiate is selected based on the "),l2e=n(Pw,"CODE",{});var dbt=s(l2e);vvr=r(dbt,"model_type"),dbt.forEach(t),Fvr=r(Pw,` property of the config object (either
passed as an argument or loaded from `),i2e=n(Pw,"CODE",{});var cbt=s(i2e);Tvr=r(cbt,"pretrained_model_name_or_path"),cbt.forEach(t),Mvr=r(Pw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),d2e=n(Pw,"CODE",{});var fbt=s(d2e);Evr=r(fbt,"pretrained_model_name_or_path"),fbt.forEach(t),Cvr=r(Pw,":"),Pw.forEach(t),wvr=i(Al),ce=n(Al,"UL",{});var ge=s(ce);XM=n(ge,"LI",{});var pke=s(XM);c2e=n(pke,"STRONG",{});var mbt=s(c2e);Avr=r(mbt,"albert"),mbt.forEach(t),yvr=r(pke," \u2014 "),XW=n(pke,"A",{href:!0});var gbt=s(XW);Lvr=r(gbt,"TFAlbertForQuestionAnswering"),gbt.forEach(t),xvr=r(pke," (ALBERT model)"),pke.forEach(t),$vr=i(ge),zM=n(ge,"LI",{});var uke=s(zM);f2e=n(uke,"STRONG",{});var hbt=s(f2e);kvr=r(hbt,"bert"),hbt.forEach(t),Svr=r(uke," \u2014 "),zW=n(uke,"A",{href:!0});var pbt=s(zW);Rvr=r(pbt,"TFBertForQuestionAnswering"),pbt.forEach(t),Bvr=r(uke," (BERT model)"),uke.forEach(t),Pvr=i(ge),QM=n(ge,"LI",{});var _ke=s(QM);m2e=n(_ke,"STRONG",{});var ubt=s(m2e);Ivr=r(ubt,"camembert"),ubt.forEach(t),qvr=r(_ke," \u2014 "),QW=n(_ke,"A",{href:!0});var _bt=s(QW);Nvr=r(_bt,"TFCamembertForQuestionAnswering"),_bt.forEach(t),jvr=r(_ke," (CamemBERT model)"),_ke.forEach(t),Dvr=i(ge),WM=n(ge,"LI",{});var bke=s(WM);g2e=n(bke,"STRONG",{});var bbt=s(g2e);Gvr=r(bbt,"convbert"),bbt.forEach(t),Ovr=r(bke," \u2014 "),WW=n(bke,"A",{href:!0});var vbt=s(WW);Vvr=r(vbt,"TFConvBertForQuestionAnswering"),vbt.forEach(t),Xvr=r(bke," (ConvBERT model)"),bke.forEach(t),zvr=i(ge),HM=n(ge,"LI",{});var vke=s(HM);h2e=n(vke,"STRONG",{});var Fbt=s(h2e);Qvr=r(Fbt,"deberta"),Fbt.forEach(t),Wvr=r(vke," \u2014 "),HW=n(vke,"A",{href:!0});var Tbt=s(HW);Hvr=r(Tbt,"TFDebertaForQuestionAnswering"),Tbt.forEach(t),Uvr=r(vke," (DeBERTa model)"),vke.forEach(t),Jvr=i(ge),UM=n(ge,"LI",{});var Fke=s(UM);p2e=n(Fke,"STRONG",{});var Mbt=s(p2e);Yvr=r(Mbt,"deberta-v2"),Mbt.forEach(t),Kvr=r(Fke," \u2014 "),UW=n(Fke,"A",{href:!0});var Ebt=s(UW);Zvr=r(Ebt,"TFDebertaV2ForQuestionAnswering"),Ebt.forEach(t),eFr=r(Fke," (DeBERTa-v2 model)"),Fke.forEach(t),oFr=i(ge),JM=n(ge,"LI",{});var Tke=s(JM);u2e=n(Tke,"STRONG",{});var Cbt=s(u2e);rFr=r(Cbt,"distilbert"),Cbt.forEach(t),tFr=r(Tke," \u2014 "),JW=n(Tke,"A",{href:!0});var wbt=s(JW);aFr=r(wbt,"TFDistilBertForQuestionAnswering"),wbt.forEach(t),nFr=r(Tke," (DistilBERT model)"),Tke.forEach(t),sFr=i(ge),YM=n(ge,"LI",{});var Mke=s(YM);_2e=n(Mke,"STRONG",{});var Abt=s(_2e);lFr=r(Abt,"electra"),Abt.forEach(t),iFr=r(Mke," \u2014 "),YW=n(Mke,"A",{href:!0});var ybt=s(YW);dFr=r(ybt,"TFElectraForQuestionAnswering"),ybt.forEach(t),cFr=r(Mke," (ELECTRA model)"),Mke.forEach(t),fFr=i(ge),KM=n(ge,"LI",{});var Eke=s(KM);b2e=n(Eke,"STRONG",{});var Lbt=s(b2e);mFr=r(Lbt,"flaubert"),Lbt.forEach(t),gFr=r(Eke," \u2014 "),KW=n(Eke,"A",{href:!0});var xbt=s(KW);hFr=r(xbt,"TFFlaubertForQuestionAnsweringSimple"),xbt.forEach(t),pFr=r(Eke," (FlauBERT model)"),Eke.forEach(t),uFr=i(ge),ZM=n(ge,"LI",{});var Cke=s(ZM);v2e=n(Cke,"STRONG",{});var $bt=s(v2e);_Fr=r($bt,"funnel"),$bt.forEach(t),bFr=r(Cke," \u2014 "),ZW=n(Cke,"A",{href:!0});var kbt=s(ZW);vFr=r(kbt,"TFFunnelForQuestionAnswering"),kbt.forEach(t),FFr=r(Cke," (Funnel Transformer model)"),Cke.forEach(t),TFr=i(ge),e4=n(ge,"LI",{});var wke=s(e4);F2e=n(wke,"STRONG",{});var Sbt=s(F2e);MFr=r(Sbt,"gptj"),Sbt.forEach(t),EFr=r(wke," \u2014 "),eH=n(wke,"A",{href:!0});var Rbt=s(eH);CFr=r(Rbt,"TFGPTJForQuestionAnswering"),Rbt.forEach(t),wFr=r(wke," (GPT-J model)"),wke.forEach(t),AFr=i(ge),o4=n(ge,"LI",{});var Ake=s(o4);T2e=n(Ake,"STRONG",{});var Bbt=s(T2e);yFr=r(Bbt,"longformer"),Bbt.forEach(t),LFr=r(Ake," \u2014 "),oH=n(Ake,"A",{href:!0});var Pbt=s(oH);xFr=r(Pbt,"TFLongformerForQuestionAnswering"),Pbt.forEach(t),$Fr=r(Ake," (Longformer model)"),Ake.forEach(t),kFr=i(ge),r4=n(ge,"LI",{});var yke=s(r4);M2e=n(yke,"STRONG",{});var Ibt=s(M2e);SFr=r(Ibt,"mobilebert"),Ibt.forEach(t),RFr=r(yke," \u2014 "),rH=n(yke,"A",{href:!0});var qbt=s(rH);BFr=r(qbt,"TFMobileBertForQuestionAnswering"),qbt.forEach(t),PFr=r(yke," (MobileBERT model)"),yke.forEach(t),IFr=i(ge),t4=n(ge,"LI",{});var Lke=s(t4);E2e=n(Lke,"STRONG",{});var Nbt=s(E2e);qFr=r(Nbt,"mpnet"),Nbt.forEach(t),NFr=r(Lke," \u2014 "),tH=n(Lke,"A",{href:!0});var jbt=s(tH);jFr=r(jbt,"TFMPNetForQuestionAnswering"),jbt.forEach(t),DFr=r(Lke," (MPNet model)"),Lke.forEach(t),GFr=i(ge),a4=n(ge,"LI",{});var xke=s(a4);C2e=n(xke,"STRONG",{});var Dbt=s(C2e);OFr=r(Dbt,"rembert"),Dbt.forEach(t),VFr=r(xke," \u2014 "),aH=n(xke,"A",{href:!0});var Gbt=s(aH);XFr=r(Gbt,"TFRemBertForQuestionAnswering"),Gbt.forEach(t),zFr=r(xke," (RemBERT model)"),xke.forEach(t),QFr=i(ge),n4=n(ge,"LI",{});var $ke=s(n4);w2e=n($ke,"STRONG",{});var Obt=s(w2e);WFr=r(Obt,"roberta"),Obt.forEach(t),HFr=r($ke," \u2014 "),nH=n($ke,"A",{href:!0});var Vbt=s(nH);UFr=r(Vbt,"TFRobertaForQuestionAnswering"),Vbt.forEach(t),JFr=r($ke," (RoBERTa model)"),$ke.forEach(t),YFr=i(ge),s4=n(ge,"LI",{});var kke=s(s4);A2e=n(kke,"STRONG",{});var Xbt=s(A2e);KFr=r(Xbt,"roformer"),Xbt.forEach(t),ZFr=r(kke," \u2014 "),sH=n(kke,"A",{href:!0});var zbt=s(sH);e6r=r(zbt,"TFRoFormerForQuestionAnswering"),zbt.forEach(t),o6r=r(kke," (RoFormer model)"),kke.forEach(t),r6r=i(ge),l4=n(ge,"LI",{});var Ske=s(l4);y2e=n(Ske,"STRONG",{});var Qbt=s(y2e);t6r=r(Qbt,"xlm"),Qbt.forEach(t),a6r=r(Ske," \u2014 "),lH=n(Ske,"A",{href:!0});var Wbt=s(lH);n6r=r(Wbt,"TFXLMForQuestionAnsweringSimple"),Wbt.forEach(t),s6r=r(Ske," (XLM model)"),Ske.forEach(t),l6r=i(ge),i4=n(ge,"LI",{});var Rke=s(i4);L2e=n(Rke,"STRONG",{});var Hbt=s(L2e);i6r=r(Hbt,"xlm-roberta"),Hbt.forEach(t),d6r=r(Rke," \u2014 "),iH=n(Rke,"A",{href:!0});var Ubt=s(iH);c6r=r(Ubt,"TFXLMRobertaForQuestionAnswering"),Ubt.forEach(t),f6r=r(Rke," (XLM-RoBERTa model)"),Rke.forEach(t),m6r=i(ge),d4=n(ge,"LI",{});var Bke=s(d4);x2e=n(Bke,"STRONG",{});var Jbt=s(x2e);g6r=r(Jbt,"xlnet"),Jbt.forEach(t),h6r=r(Bke," \u2014 "),dH=n(Bke,"A",{href:!0});var Ybt=s(dH);p6r=r(Ybt,"TFXLNetForQuestionAnsweringSimple"),Ybt.forEach(t),u6r=r(Bke," (XLNet model)"),Bke.forEach(t),ge.forEach(t),_6r=i(Al),T(c4.$$.fragment,Al),Al.forEach(t),wl.forEach(t),aPe=i(f),cc=n(f,"H2",{class:!0});var iqe=s(cc);f4=n(iqe,"A",{id:!0,class:!0,href:!0});var Kbt=s(f4);$2e=n(Kbt,"SPAN",{});var Zbt=s($2e);T(JL.$$.fragment,Zbt),Zbt.forEach(t),Kbt.forEach(t),b6r=i(iqe),k2e=n(iqe,"SPAN",{});var e2t=s(k2e);v6r=r(e2t,"TFAutoModelForVision2Seq"),e2t.forEach(t),iqe.forEach(t),nPe=i(f),sr=n(f,"DIV",{class:!0});var yl=s(sr);T(YL.$$.fragment,yl),F6r=i(yl),fc=n(yl,"P",{});var dK=s(fc);T6r=r(dK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),cH=n(dK,"A",{href:!0});var o2t=s(cH);M6r=r(o2t,"from_pretrained()"),o2t.forEach(t),E6r=r(dK," class method or the "),fH=n(dK,"A",{href:!0});var r2t=s(fH);C6r=r(r2t,"from_config()"),r2t.forEach(t),w6r=r(dK,` class
method.`),dK.forEach(t),A6r=i(yl),KL=n(yl,"P",{});var dqe=s(KL);y6r=r(dqe,"This class cannot be instantiated directly using "),S2e=n(dqe,"CODE",{});var t2t=s(S2e);L6r=r(t2t,"__init__()"),t2t.forEach(t),x6r=r(dqe," (throws an error)."),dqe.forEach(t),$6r=i(yl),Rt=n(yl,"DIV",{class:!0});var Iw=s(Rt);T(ZL.$$.fragment,Iw),k6r=i(Iw),R2e=n(Iw,"P",{});var a2t=s(R2e);S6r=r(a2t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),a2t.forEach(t),R6r=i(Iw),mc=n(Iw,"P",{});var cK=s(mc);B6r=r(cK,`Note:
Loading a model from its configuration file does `),B2e=n(cK,"STRONG",{});var n2t=s(B2e);P6r=r(n2t,"not"),n2t.forEach(t),I6r=r(cK,` load the model weights. It only affects the
model\u2019s configuration. Use `),mH=n(cK,"A",{href:!0});var s2t=s(mH);q6r=r(s2t,"from_pretrained()"),s2t.forEach(t),N6r=r(cK," to load the model weights."),cK.forEach(t),j6r=i(Iw),T(m4.$$.fragment,Iw),Iw.forEach(t),D6r=i(yl),Br=n(yl,"DIV",{class:!0});var Ll=s(Br);T(e8.$$.fragment,Ll),G6r=i(Ll),P2e=n(Ll,"P",{});var l2t=s(P2e);O6r=r(l2t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),l2t.forEach(t),V6r=i(Ll),sn=n(Ll,"P",{});var qw=s(sn);X6r=r(qw,"The model class to instantiate is selected based on the "),I2e=n(qw,"CODE",{});var i2t=s(I2e);z6r=r(i2t,"model_type"),i2t.forEach(t),Q6r=r(qw,` property of the config object (either
passed as an argument or loaded from `),q2e=n(qw,"CODE",{});var d2t=s(q2e);W6r=r(d2t,"pretrained_model_name_or_path"),d2t.forEach(t),H6r=r(qw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),N2e=n(qw,"CODE",{});var c2t=s(N2e);U6r=r(c2t,"pretrained_model_name_or_path"),c2t.forEach(t),J6r=r(qw,":"),qw.forEach(t),Y6r=i(Ll),j2e=n(Ll,"UL",{});var f2t=s(j2e);g4=n(f2t,"LI",{});var Pke=s(g4);D2e=n(Pke,"STRONG",{});var m2t=s(D2e);K6r=r(m2t,"vision-encoder-decoder"),m2t.forEach(t),Z6r=r(Pke," \u2014 "),gH=n(Pke,"A",{href:!0});var g2t=s(gH);eTr=r(g2t,"TFVisionEncoderDecoderModel"),g2t.forEach(t),oTr=r(Pke," (Vision Encoder decoder model)"),Pke.forEach(t),f2t.forEach(t),rTr=i(Ll),T(h4.$$.fragment,Ll),Ll.forEach(t),yl.forEach(t),sPe=i(f),gc=n(f,"H2",{class:!0});var cqe=s(gc);p4=n(cqe,"A",{id:!0,class:!0,href:!0});var h2t=s(p4);G2e=n(h2t,"SPAN",{});var p2t=s(G2e);T(o8.$$.fragment,p2t),p2t.forEach(t),h2t.forEach(t),tTr=i(cqe),O2e=n(cqe,"SPAN",{});var u2t=s(O2e);aTr=r(u2t,"TFAutoModelForSpeechSeq2Seq"),u2t.forEach(t),cqe.forEach(t),lPe=i(f),lr=n(f,"DIV",{class:!0});var xl=s(lr);T(r8.$$.fragment,xl),nTr=i(xl),hc=n(xl,"P",{});var fK=s(hc);sTr=r(fK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),hH=n(fK,"A",{href:!0});var _2t=s(hH);lTr=r(_2t,"from_pretrained()"),_2t.forEach(t),iTr=r(fK," class method or the "),pH=n(fK,"A",{href:!0});var b2t=s(pH);dTr=r(b2t,"from_config()"),b2t.forEach(t),cTr=r(fK,` class
method.`),fK.forEach(t),fTr=i(xl),t8=n(xl,"P",{});var fqe=s(t8);mTr=r(fqe,"This class cannot be instantiated directly using "),V2e=n(fqe,"CODE",{});var v2t=s(V2e);gTr=r(v2t,"__init__()"),v2t.forEach(t),hTr=r(fqe," (throws an error)."),fqe.forEach(t),pTr=i(xl),Bt=n(xl,"DIV",{class:!0});var Nw=s(Bt);T(a8.$$.fragment,Nw),uTr=i(Nw),X2e=n(Nw,"P",{});var F2t=s(X2e);_Tr=r(F2t,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),F2t.forEach(t),bTr=i(Nw),pc=n(Nw,"P",{});var mK=s(pc);vTr=r(mK,`Note:
Loading a model from its configuration file does `),z2e=n(mK,"STRONG",{});var T2t=s(z2e);FTr=r(T2t,"not"),T2t.forEach(t),TTr=r(mK,` load the model weights. It only affects the
model\u2019s configuration. Use `),uH=n(mK,"A",{href:!0});var M2t=s(uH);MTr=r(M2t,"from_pretrained()"),M2t.forEach(t),ETr=r(mK," to load the model weights."),mK.forEach(t),CTr=i(Nw),T(u4.$$.fragment,Nw),Nw.forEach(t),wTr=i(xl),Pr=n(xl,"DIV",{class:!0});var $l=s(Pr);T(n8.$$.fragment,$l),ATr=i($l),Q2e=n($l,"P",{});var E2t=s(Q2e);yTr=r(E2t,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),E2t.forEach(t),LTr=i($l),ln=n($l,"P",{});var jw=s(ln);xTr=r(jw,"The model class to instantiate is selected based on the "),W2e=n(jw,"CODE",{});var C2t=s(W2e);$Tr=r(C2t,"model_type"),C2t.forEach(t),kTr=r(jw,` property of the config object (either
passed as an argument or loaded from `),H2e=n(jw,"CODE",{});var w2t=s(H2e);STr=r(w2t,"pretrained_model_name_or_path"),w2t.forEach(t),RTr=r(jw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),U2e=n(jw,"CODE",{});var A2t=s(U2e);BTr=r(A2t,"pretrained_model_name_or_path"),A2t.forEach(t),PTr=r(jw,":"),jw.forEach(t),ITr=i($l),J2e=n($l,"UL",{});var y2t=s(J2e);_4=n(y2t,"LI",{});var Ike=s(_4);Y2e=n(Ike,"STRONG",{});var L2t=s(Y2e);qTr=r(L2t,"speech_to_text"),L2t.forEach(t),NTr=r(Ike," \u2014 "),_H=n(Ike,"A",{href:!0});var x2t=s(_H);jTr=r(x2t,"TFSpeech2TextForConditionalGeneration"),x2t.forEach(t),DTr=r(Ike," (Speech2Text model)"),Ike.forEach(t),y2t.forEach(t),GTr=i($l),T(b4.$$.fragment,$l),$l.forEach(t),xl.forEach(t),iPe=i(f),uc=n(f,"H2",{class:!0});var mqe=s(uc);v4=n(mqe,"A",{id:!0,class:!0,href:!0});var $2t=s(v4);K2e=n($2t,"SPAN",{});var k2t=s(K2e);T(s8.$$.fragment,k2t),k2t.forEach(t),$2t.forEach(t),OTr=i(mqe),Z2e=n(mqe,"SPAN",{});var S2t=s(Z2e);VTr=r(S2t,"FlaxAutoModel"),S2t.forEach(t),mqe.forEach(t),dPe=i(f),ir=n(f,"DIV",{class:!0});var kl=s(ir);T(l8.$$.fragment,kl),XTr=i(kl),_c=n(kl,"P",{});var gK=s(_c);zTr=r(gK,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),bH=n(gK,"A",{href:!0});var R2t=s(bH);QTr=r(R2t,"from_pretrained()"),R2t.forEach(t),WTr=r(gK," class method or the "),vH=n(gK,"A",{href:!0});var B2t=s(vH);HTr=r(B2t,"from_config()"),B2t.forEach(t),UTr=r(gK,` class
method.`),gK.forEach(t),JTr=i(kl),i8=n(kl,"P",{});var gqe=s(i8);YTr=r(gqe,"This class cannot be instantiated directly using "),e5e=n(gqe,"CODE",{});var P2t=s(e5e);KTr=r(P2t,"__init__()"),P2t.forEach(t),ZTr=r(gqe," (throws an error)."),gqe.forEach(t),eMr=i(kl),Pt=n(kl,"DIV",{class:!0});var Dw=s(Pt);T(d8.$$.fragment,Dw),oMr=i(Dw),o5e=n(Dw,"P",{});var I2t=s(o5e);rMr=r(I2t,"Instantiates one of the base model classes of the library from a configuration."),I2t.forEach(t),tMr=i(Dw),bc=n(Dw,"P",{});var hK=s(bc);aMr=r(hK,`Note:
Loading a model from its configuration file does `),r5e=n(hK,"STRONG",{});var q2t=s(r5e);nMr=r(q2t,"not"),q2t.forEach(t),sMr=r(hK,` load the model weights. It only affects the
model\u2019s configuration. Use `),FH=n(hK,"A",{href:!0});var N2t=s(FH);lMr=r(N2t,"from_pretrained()"),N2t.forEach(t),iMr=r(hK," to load the model weights."),hK.forEach(t),dMr=i(Dw),T(F4.$$.fragment,Dw),Dw.forEach(t),cMr=i(kl),Ir=n(kl,"DIV",{class:!0});var Sl=s(Ir);T(c8.$$.fragment,Sl),fMr=i(Sl),t5e=n(Sl,"P",{});var j2t=s(t5e);mMr=r(j2t,"Instantiate one of the base model classes of the library from a pretrained model."),j2t.forEach(t),gMr=i(Sl),dn=n(Sl,"P",{});var Gw=s(dn);hMr=r(Gw,"The model class to instantiate is selected based on the "),a5e=n(Gw,"CODE",{});var D2t=s(a5e);pMr=r(D2t,"model_type"),D2t.forEach(t),uMr=r(Gw,` property of the config object (either
passed as an argument or loaded from `),n5e=n(Gw,"CODE",{});var G2t=s(n5e);_Mr=r(G2t,"pretrained_model_name_or_path"),G2t.forEach(t),bMr=r(Gw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),s5e=n(Gw,"CODE",{});var O2t=s(s5e);vMr=r(O2t,"pretrained_model_name_or_path"),O2t.forEach(t),FMr=r(Gw,":"),Gw.forEach(t),TMr=i(Sl),oe=n(Sl,"UL",{});var te=s(oe);T4=n(te,"LI",{});var qke=s(T4);l5e=n(qke,"STRONG",{});var V2t=s(l5e);MMr=r(V2t,"albert"),V2t.forEach(t),EMr=r(qke," \u2014 "),TH=n(qke,"A",{href:!0});var X2t=s(TH);CMr=r(X2t,"FlaxAlbertModel"),X2t.forEach(t),wMr=r(qke," (ALBERT model)"),qke.forEach(t),AMr=i(te),M4=n(te,"LI",{});var Nke=s(M4);i5e=n(Nke,"STRONG",{});var z2t=s(i5e);yMr=r(z2t,"bart"),z2t.forEach(t),LMr=r(Nke," \u2014 "),MH=n(Nke,"A",{href:!0});var Q2t=s(MH);xMr=r(Q2t,"FlaxBartModel"),Q2t.forEach(t),$Mr=r(Nke," (BART model)"),Nke.forEach(t),kMr=i(te),E4=n(te,"LI",{});var jke=s(E4);d5e=n(jke,"STRONG",{});var W2t=s(d5e);SMr=r(W2t,"beit"),W2t.forEach(t),RMr=r(jke," \u2014 "),EH=n(jke,"A",{href:!0});var H2t=s(EH);BMr=r(H2t,"FlaxBeitModel"),H2t.forEach(t),PMr=r(jke," (BEiT model)"),jke.forEach(t),IMr=i(te),C4=n(te,"LI",{});var Dke=s(C4);c5e=n(Dke,"STRONG",{});var U2t=s(c5e);qMr=r(U2t,"bert"),U2t.forEach(t),NMr=r(Dke," \u2014 "),CH=n(Dke,"A",{href:!0});var J2t=s(CH);jMr=r(J2t,"FlaxBertModel"),J2t.forEach(t),DMr=r(Dke," (BERT model)"),Dke.forEach(t),GMr=i(te),w4=n(te,"LI",{});var Gke=s(w4);f5e=n(Gke,"STRONG",{});var Y2t=s(f5e);OMr=r(Y2t,"big_bird"),Y2t.forEach(t),VMr=r(Gke," \u2014 "),wH=n(Gke,"A",{href:!0});var K2t=s(wH);XMr=r(K2t,"FlaxBigBirdModel"),K2t.forEach(t),zMr=r(Gke," (BigBird model)"),Gke.forEach(t),QMr=i(te),A4=n(te,"LI",{});var Oke=s(A4);m5e=n(Oke,"STRONG",{});var Z2t=s(m5e);WMr=r(Z2t,"blenderbot"),Z2t.forEach(t),HMr=r(Oke," \u2014 "),AH=n(Oke,"A",{href:!0});var e5t=s(AH);UMr=r(e5t,"FlaxBlenderbotModel"),e5t.forEach(t),JMr=r(Oke," (Blenderbot model)"),Oke.forEach(t),YMr=i(te),y4=n(te,"LI",{});var Vke=s(y4);g5e=n(Vke,"STRONG",{});var o5t=s(g5e);KMr=r(o5t,"blenderbot-small"),o5t.forEach(t),ZMr=r(Vke," \u2014 "),yH=n(Vke,"A",{href:!0});var r5t=s(yH);e4r=r(r5t,"FlaxBlenderbotSmallModel"),r5t.forEach(t),o4r=r(Vke," (BlenderbotSmall model)"),Vke.forEach(t),r4r=i(te),L4=n(te,"LI",{});var Xke=s(L4);h5e=n(Xke,"STRONG",{});var t5t=s(h5e);t4r=r(t5t,"clip"),t5t.forEach(t),a4r=r(Xke," \u2014 "),LH=n(Xke,"A",{href:!0});var a5t=s(LH);n4r=r(a5t,"FlaxCLIPModel"),a5t.forEach(t),s4r=r(Xke," (CLIP model)"),Xke.forEach(t),l4r=i(te),x4=n(te,"LI",{});var zke=s(x4);p5e=n(zke,"STRONG",{});var n5t=s(p5e);i4r=r(n5t,"distilbert"),n5t.forEach(t),d4r=r(zke," \u2014 "),xH=n(zke,"A",{href:!0});var s5t=s(xH);c4r=r(s5t,"FlaxDistilBertModel"),s5t.forEach(t),f4r=r(zke," (DistilBERT model)"),zke.forEach(t),m4r=i(te),$4=n(te,"LI",{});var Qke=s($4);u5e=n(Qke,"STRONG",{});var l5t=s(u5e);g4r=r(l5t,"electra"),l5t.forEach(t),h4r=r(Qke," \u2014 "),$H=n(Qke,"A",{href:!0});var i5t=s($H);p4r=r(i5t,"FlaxElectraModel"),i5t.forEach(t),u4r=r(Qke," (ELECTRA model)"),Qke.forEach(t),_4r=i(te),k4=n(te,"LI",{});var Wke=s(k4);_5e=n(Wke,"STRONG",{});var d5t=s(_5e);b4r=r(d5t,"gpt2"),d5t.forEach(t),v4r=r(Wke," \u2014 "),kH=n(Wke,"A",{href:!0});var c5t=s(kH);F4r=r(c5t,"FlaxGPT2Model"),c5t.forEach(t),T4r=r(Wke," (OpenAI GPT-2 model)"),Wke.forEach(t),M4r=i(te),S4=n(te,"LI",{});var Hke=s(S4);b5e=n(Hke,"STRONG",{});var f5t=s(b5e);E4r=r(f5t,"gpt_neo"),f5t.forEach(t),C4r=r(Hke," \u2014 "),SH=n(Hke,"A",{href:!0});var m5t=s(SH);w4r=r(m5t,"FlaxGPTNeoModel"),m5t.forEach(t),A4r=r(Hke," (GPT Neo model)"),Hke.forEach(t),y4r=i(te),R4=n(te,"LI",{});var Uke=s(R4);v5e=n(Uke,"STRONG",{});var g5t=s(v5e);L4r=r(g5t,"gptj"),g5t.forEach(t),x4r=r(Uke," \u2014 "),RH=n(Uke,"A",{href:!0});var h5t=s(RH);$4r=r(h5t,"FlaxGPTJModel"),h5t.forEach(t),k4r=r(Uke," (GPT-J model)"),Uke.forEach(t),S4r=i(te),B4=n(te,"LI",{});var Jke=s(B4);F5e=n(Jke,"STRONG",{});var p5t=s(F5e);R4r=r(p5t,"marian"),p5t.forEach(t),B4r=r(Jke," \u2014 "),BH=n(Jke,"A",{href:!0});var u5t=s(BH);P4r=r(u5t,"FlaxMarianModel"),u5t.forEach(t),I4r=r(Jke," (Marian model)"),Jke.forEach(t),q4r=i(te),P4=n(te,"LI",{});var Yke=s(P4);T5e=n(Yke,"STRONG",{});var _5t=s(T5e);N4r=r(_5t,"mbart"),_5t.forEach(t),j4r=r(Yke," \u2014 "),PH=n(Yke,"A",{href:!0});var b5t=s(PH);D4r=r(b5t,"FlaxMBartModel"),b5t.forEach(t),G4r=r(Yke," (mBART model)"),Yke.forEach(t),O4r=i(te),I4=n(te,"LI",{});var Kke=s(I4);M5e=n(Kke,"STRONG",{});var v5t=s(M5e);V4r=r(v5t,"mt5"),v5t.forEach(t),X4r=r(Kke," \u2014 "),IH=n(Kke,"A",{href:!0});var F5t=s(IH);z4r=r(F5t,"FlaxMT5Model"),F5t.forEach(t),Q4r=r(Kke," (mT5 model)"),Kke.forEach(t),W4r=i(te),q4=n(te,"LI",{});var Zke=s(q4);E5e=n(Zke,"STRONG",{});var T5t=s(E5e);H4r=r(T5t,"pegasus"),T5t.forEach(t),U4r=r(Zke," \u2014 "),qH=n(Zke,"A",{href:!0});var M5t=s(qH);J4r=r(M5t,"FlaxPegasusModel"),M5t.forEach(t),Y4r=r(Zke," (Pegasus model)"),Zke.forEach(t),K4r=i(te),N4=n(te,"LI",{});var eSe=s(N4);C5e=n(eSe,"STRONG",{});var E5t=s(C5e);Z4r=r(E5t,"roberta"),E5t.forEach(t),eEr=r(eSe," \u2014 "),NH=n(eSe,"A",{href:!0});var C5t=s(NH);oEr=r(C5t,"FlaxRobertaModel"),C5t.forEach(t),rEr=r(eSe," (RoBERTa model)"),eSe.forEach(t),tEr=i(te),j4=n(te,"LI",{});var oSe=s(j4);w5e=n(oSe,"STRONG",{});var w5t=s(w5e);aEr=r(w5t,"roformer"),w5t.forEach(t),nEr=r(oSe," \u2014 "),jH=n(oSe,"A",{href:!0});var A5t=s(jH);sEr=r(A5t,"FlaxRoFormerModel"),A5t.forEach(t),lEr=r(oSe," (RoFormer model)"),oSe.forEach(t),iEr=i(te),D4=n(te,"LI",{});var rSe=s(D4);A5e=n(rSe,"STRONG",{});var y5t=s(A5e);dEr=r(y5t,"t5"),y5t.forEach(t),cEr=r(rSe," \u2014 "),DH=n(rSe,"A",{href:!0});var L5t=s(DH);fEr=r(L5t,"FlaxT5Model"),L5t.forEach(t),mEr=r(rSe," (T5 model)"),rSe.forEach(t),gEr=i(te),G4=n(te,"LI",{});var tSe=s(G4);y5e=n(tSe,"STRONG",{});var x5t=s(y5e);hEr=r(x5t,"vision-text-dual-encoder"),x5t.forEach(t),pEr=r(tSe," \u2014 "),GH=n(tSe,"A",{href:!0});var $5t=s(GH);uEr=r($5t,"FlaxVisionTextDualEncoderModel"),$5t.forEach(t),_Er=r(tSe," (VisionTextDualEncoder model)"),tSe.forEach(t),bEr=i(te),O4=n(te,"LI",{});var aSe=s(O4);L5e=n(aSe,"STRONG",{});var k5t=s(L5e);vEr=r(k5t,"vit"),k5t.forEach(t),FEr=r(aSe," \u2014 "),OH=n(aSe,"A",{href:!0});var S5t=s(OH);TEr=r(S5t,"FlaxViTModel"),S5t.forEach(t),MEr=r(aSe," (ViT model)"),aSe.forEach(t),EEr=i(te),V4=n(te,"LI",{});var nSe=s(V4);x5e=n(nSe,"STRONG",{});var R5t=s(x5e);CEr=r(R5t,"wav2vec2"),R5t.forEach(t),wEr=r(nSe," \u2014 "),VH=n(nSe,"A",{href:!0});var B5t=s(VH);AEr=r(B5t,"FlaxWav2Vec2Model"),B5t.forEach(t),yEr=r(nSe," (Wav2Vec2 model)"),nSe.forEach(t),LEr=i(te),X4=n(te,"LI",{});var sSe=s(X4);$5e=n(sSe,"STRONG",{});var P5t=s($5e);xEr=r(P5t,"xglm"),P5t.forEach(t),$Er=r(sSe," \u2014 "),XH=n(sSe,"A",{href:!0});var I5t=s(XH);kEr=r(I5t,"FlaxXGLMModel"),I5t.forEach(t),SEr=r(sSe," (XGLM model)"),sSe.forEach(t),REr=i(te),z4=n(te,"LI",{});var lSe=s(z4);k5e=n(lSe,"STRONG",{});var q5t=s(k5e);BEr=r(q5t,"xlm-roberta"),q5t.forEach(t),PEr=r(lSe," \u2014 "),zH=n(lSe,"A",{href:!0});var N5t=s(zH);IEr=r(N5t,"FlaxXLMRobertaModel"),N5t.forEach(t),qEr=r(lSe," (XLM-RoBERTa model)"),lSe.forEach(t),te.forEach(t),NEr=i(Sl),T(Q4.$$.fragment,Sl),Sl.forEach(t),kl.forEach(t),cPe=i(f),vc=n(f,"H2",{class:!0});var hqe=s(vc);W4=n(hqe,"A",{id:!0,class:!0,href:!0});var j5t=s(W4);S5e=n(j5t,"SPAN",{});var D5t=s(S5e);T(f8.$$.fragment,D5t),D5t.forEach(t),j5t.forEach(t),jEr=i(hqe),R5e=n(hqe,"SPAN",{});var G5t=s(R5e);DEr=r(G5t,"FlaxAutoModelForCausalLM"),G5t.forEach(t),hqe.forEach(t),fPe=i(f),dr=n(f,"DIV",{class:!0});var Rl=s(dr);T(m8.$$.fragment,Rl),GEr=i(Rl),Fc=n(Rl,"P",{});var pK=s(Fc);OEr=r(pK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),QH=n(pK,"A",{href:!0});var O5t=s(QH);VEr=r(O5t,"from_pretrained()"),O5t.forEach(t),XEr=r(pK," class method or the "),WH=n(pK,"A",{href:!0});var V5t=s(WH);zEr=r(V5t,"from_config()"),V5t.forEach(t),QEr=r(pK,` class
method.`),pK.forEach(t),WEr=i(Rl),g8=n(Rl,"P",{});var pqe=s(g8);HEr=r(pqe,"This class cannot be instantiated directly using "),B5e=n(pqe,"CODE",{});var X5t=s(B5e);UEr=r(X5t,"__init__()"),X5t.forEach(t),JEr=r(pqe," (throws an error)."),pqe.forEach(t),YEr=i(Rl),It=n(Rl,"DIV",{class:!0});var Ow=s(It);T(h8.$$.fragment,Ow),KEr=i(Ow),P5e=n(Ow,"P",{});var z5t=s(P5e);ZEr=r(z5t,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),z5t.forEach(t),eCr=i(Ow),Tc=n(Ow,"P",{});var uK=s(Tc);oCr=r(uK,`Note:
Loading a model from its configuration file does `),I5e=n(uK,"STRONG",{});var Q5t=s(I5e);rCr=r(Q5t,"not"),Q5t.forEach(t),tCr=r(uK,` load the model weights. It only affects the
model\u2019s configuration. Use `),HH=n(uK,"A",{href:!0});var W5t=s(HH);aCr=r(W5t,"from_pretrained()"),W5t.forEach(t),nCr=r(uK," to load the model weights."),uK.forEach(t),sCr=i(Ow),T(H4.$$.fragment,Ow),Ow.forEach(t),lCr=i(Rl),qr=n(Rl,"DIV",{class:!0});var Bl=s(qr);T(p8.$$.fragment,Bl),iCr=i(Bl),q5e=n(Bl,"P",{});var H5t=s(q5e);dCr=r(H5t,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),H5t.forEach(t),cCr=i(Bl),cn=n(Bl,"P",{});var Vw=s(cn);fCr=r(Vw,"The model class to instantiate is selected based on the "),N5e=n(Vw,"CODE",{});var U5t=s(N5e);mCr=r(U5t,"model_type"),U5t.forEach(t),gCr=r(Vw,` property of the config object (either
passed as an argument or loaded from `),j5e=n(Vw,"CODE",{});var J5t=s(j5e);hCr=r(J5t,"pretrained_model_name_or_path"),J5t.forEach(t),pCr=r(Vw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),D5e=n(Vw,"CODE",{});var Y5t=s(D5e);uCr=r(Y5t,"pretrained_model_name_or_path"),Y5t.forEach(t),_Cr=r(Vw,":"),Vw.forEach(t),bCr=i(Bl),cr=n(Bl,"UL",{});var ba=s(cr);U4=n(ba,"LI",{});var iSe=s(U4);G5e=n(iSe,"STRONG",{});var K5t=s(G5e);vCr=r(K5t,"bart"),K5t.forEach(t),FCr=r(iSe," \u2014 "),UH=n(iSe,"A",{href:!0});var Z5t=s(UH);TCr=r(Z5t,"FlaxBartForCausalLM"),Z5t.forEach(t),MCr=r(iSe," (BART model)"),iSe.forEach(t),ECr=i(ba),J4=n(ba,"LI",{});var dSe=s(J4);O5e=n(dSe,"STRONG",{});var evt=s(O5e);CCr=r(evt,"bert"),evt.forEach(t),wCr=r(dSe," \u2014 "),V5e=n(dSe,"CODE",{});var ovt=s(V5e);ACr=r(ovt,"FlaxBertForCausalLM"),ovt.forEach(t),yCr=r(dSe," (BERT model)"),dSe.forEach(t),LCr=i(ba),Y4=n(ba,"LI",{});var cSe=s(Y4);X5e=n(cSe,"STRONG",{});var rvt=s(X5e);xCr=r(rvt,"gpt2"),rvt.forEach(t),$Cr=r(cSe," \u2014 "),JH=n(cSe,"A",{href:!0});var tvt=s(JH);kCr=r(tvt,"FlaxGPT2LMHeadModel"),tvt.forEach(t),SCr=r(cSe," (OpenAI GPT-2 model)"),cSe.forEach(t),RCr=i(ba),K4=n(ba,"LI",{});var fSe=s(K4);z5e=n(fSe,"STRONG",{});var avt=s(z5e);BCr=r(avt,"gpt_neo"),avt.forEach(t),PCr=r(fSe," \u2014 "),YH=n(fSe,"A",{href:!0});var nvt=s(YH);ICr=r(nvt,"FlaxGPTNeoForCausalLM"),nvt.forEach(t),qCr=r(fSe," (GPT Neo model)"),fSe.forEach(t),NCr=i(ba),Z4=n(ba,"LI",{});var mSe=s(Z4);Q5e=n(mSe,"STRONG",{});var svt=s(Q5e);jCr=r(svt,"gptj"),svt.forEach(t),DCr=r(mSe," \u2014 "),KH=n(mSe,"A",{href:!0});var lvt=s(KH);GCr=r(lvt,"FlaxGPTJForCausalLM"),lvt.forEach(t),OCr=r(mSe," (GPT-J model)"),mSe.forEach(t),VCr=i(ba),eE=n(ba,"LI",{});var gSe=s(eE);W5e=n(gSe,"STRONG",{});var ivt=s(W5e);XCr=r(ivt,"xglm"),ivt.forEach(t),zCr=r(gSe," \u2014 "),ZH=n(gSe,"A",{href:!0});var dvt=s(ZH);QCr=r(dvt,"FlaxXGLMForCausalLM"),dvt.forEach(t),WCr=r(gSe," (XGLM model)"),gSe.forEach(t),ba.forEach(t),HCr=i(Bl),T(oE.$$.fragment,Bl),Bl.forEach(t),Rl.forEach(t),mPe=i(f),Mc=n(f,"H2",{class:!0});var uqe=s(Mc);rE=n(uqe,"A",{id:!0,class:!0,href:!0});var cvt=s(rE);H5e=n(cvt,"SPAN",{});var fvt=s(H5e);T(u8.$$.fragment,fvt),fvt.forEach(t),cvt.forEach(t),UCr=i(uqe),U5e=n(uqe,"SPAN",{});var mvt=s(U5e);JCr=r(mvt,"FlaxAutoModelForPreTraining"),mvt.forEach(t),uqe.forEach(t),gPe=i(f),fr=n(f,"DIV",{class:!0});var Pl=s(fr);T(_8.$$.fragment,Pl),YCr=i(Pl),Ec=n(Pl,"P",{});var _K=s(Ec);KCr=r(_K,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),eU=n(_K,"A",{href:!0});var gvt=s(eU);ZCr=r(gvt,"from_pretrained()"),gvt.forEach(t),e3r=r(_K," class method or the "),oU=n(_K,"A",{href:!0});var hvt=s(oU);o3r=r(hvt,"from_config()"),hvt.forEach(t),r3r=r(_K,` class
method.`),_K.forEach(t),t3r=i(Pl),b8=n(Pl,"P",{});var _qe=s(b8);a3r=r(_qe,"This class cannot be instantiated directly using "),J5e=n(_qe,"CODE",{});var pvt=s(J5e);n3r=r(pvt,"__init__()"),pvt.forEach(t),s3r=r(_qe," (throws an error)."),_qe.forEach(t),l3r=i(Pl),qt=n(Pl,"DIV",{class:!0});var Xw=s(qt);T(v8.$$.fragment,Xw),i3r=i(Xw),Y5e=n(Xw,"P",{});var uvt=s(Y5e);d3r=r(uvt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),uvt.forEach(t),c3r=i(Xw),Cc=n(Xw,"P",{});var bK=s(Cc);f3r=r(bK,`Note:
Loading a model from its configuration file does `),K5e=n(bK,"STRONG",{});var _vt=s(K5e);m3r=r(_vt,"not"),_vt.forEach(t),g3r=r(bK,` load the model weights. It only affects the
model\u2019s configuration. Use `),rU=n(bK,"A",{href:!0});var bvt=s(rU);h3r=r(bvt,"from_pretrained()"),bvt.forEach(t),p3r=r(bK," to load the model weights."),bK.forEach(t),u3r=i(Xw),T(tE.$$.fragment,Xw),Xw.forEach(t),_3r=i(Pl),Nr=n(Pl,"DIV",{class:!0});var Il=s(Nr);T(F8.$$.fragment,Il),b3r=i(Il),Z5e=n(Il,"P",{});var vvt=s(Z5e);v3r=r(vvt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),vvt.forEach(t),F3r=i(Il),fn=n(Il,"P",{});var zw=s(fn);T3r=r(zw,"The model class to instantiate is selected based on the "),eve=n(zw,"CODE",{});var Fvt=s(eve);M3r=r(Fvt,"model_type"),Fvt.forEach(t),E3r=r(zw,` property of the config object (either
passed as an argument or loaded from `),ove=n(zw,"CODE",{});var Tvt=s(ove);C3r=r(Tvt,"pretrained_model_name_or_path"),Tvt.forEach(t),w3r=r(zw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rve=n(zw,"CODE",{});var Mvt=s(rve);A3r=r(Mvt,"pretrained_model_name_or_path"),Mvt.forEach(t),y3r=r(zw,":"),zw.forEach(t),L3r=i(Il),Me=n(Il,"UL",{});var we=s(Me);aE=n(we,"LI",{});var hSe=s(aE);tve=n(hSe,"STRONG",{});var Evt=s(tve);x3r=r(Evt,"albert"),Evt.forEach(t),$3r=r(hSe," \u2014 "),tU=n(hSe,"A",{href:!0});var Cvt=s(tU);k3r=r(Cvt,"FlaxAlbertForPreTraining"),Cvt.forEach(t),S3r=r(hSe," (ALBERT model)"),hSe.forEach(t),R3r=i(we),nE=n(we,"LI",{});var pSe=s(nE);ave=n(pSe,"STRONG",{});var wvt=s(ave);B3r=r(wvt,"bart"),wvt.forEach(t),P3r=r(pSe," \u2014 "),aU=n(pSe,"A",{href:!0});var Avt=s(aU);I3r=r(Avt,"FlaxBartForConditionalGeneration"),Avt.forEach(t),q3r=r(pSe," (BART model)"),pSe.forEach(t),N3r=i(we),sE=n(we,"LI",{});var uSe=s(sE);nve=n(uSe,"STRONG",{});var yvt=s(nve);j3r=r(yvt,"bert"),yvt.forEach(t),D3r=r(uSe," \u2014 "),nU=n(uSe,"A",{href:!0});var Lvt=s(nU);G3r=r(Lvt,"FlaxBertForPreTraining"),Lvt.forEach(t),O3r=r(uSe," (BERT model)"),uSe.forEach(t),V3r=i(we),lE=n(we,"LI",{});var _Se=s(lE);sve=n(_Se,"STRONG",{});var xvt=s(sve);X3r=r(xvt,"big_bird"),xvt.forEach(t),z3r=r(_Se," \u2014 "),sU=n(_Se,"A",{href:!0});var $vt=s(sU);Q3r=r($vt,"FlaxBigBirdForPreTraining"),$vt.forEach(t),W3r=r(_Se," (BigBird model)"),_Se.forEach(t),H3r=i(we),iE=n(we,"LI",{});var bSe=s(iE);lve=n(bSe,"STRONG",{});var kvt=s(lve);U3r=r(kvt,"electra"),kvt.forEach(t),J3r=r(bSe," \u2014 "),lU=n(bSe,"A",{href:!0});var Svt=s(lU);Y3r=r(Svt,"FlaxElectraForPreTraining"),Svt.forEach(t),K3r=r(bSe," (ELECTRA model)"),bSe.forEach(t),Z3r=i(we),dE=n(we,"LI",{});var vSe=s(dE);ive=n(vSe,"STRONG",{});var Rvt=s(ive);ewr=r(Rvt,"mbart"),Rvt.forEach(t),owr=r(vSe," \u2014 "),iU=n(vSe,"A",{href:!0});var Bvt=s(iU);rwr=r(Bvt,"FlaxMBartForConditionalGeneration"),Bvt.forEach(t),twr=r(vSe," (mBART model)"),vSe.forEach(t),awr=i(we),cE=n(we,"LI",{});var FSe=s(cE);dve=n(FSe,"STRONG",{});var Pvt=s(dve);nwr=r(Pvt,"mt5"),Pvt.forEach(t),swr=r(FSe," \u2014 "),dU=n(FSe,"A",{href:!0});var Ivt=s(dU);lwr=r(Ivt,"FlaxMT5ForConditionalGeneration"),Ivt.forEach(t),iwr=r(FSe," (mT5 model)"),FSe.forEach(t),dwr=i(we),fE=n(we,"LI",{});var TSe=s(fE);cve=n(TSe,"STRONG",{});var qvt=s(cve);cwr=r(qvt,"roberta"),qvt.forEach(t),fwr=r(TSe," \u2014 "),cU=n(TSe,"A",{href:!0});var Nvt=s(cU);mwr=r(Nvt,"FlaxRobertaForMaskedLM"),Nvt.forEach(t),gwr=r(TSe," (RoBERTa model)"),TSe.forEach(t),hwr=i(we),mE=n(we,"LI",{});var MSe=s(mE);fve=n(MSe,"STRONG",{});var jvt=s(fve);pwr=r(jvt,"roformer"),jvt.forEach(t),uwr=r(MSe," \u2014 "),fU=n(MSe,"A",{href:!0});var Dvt=s(fU);_wr=r(Dvt,"FlaxRoFormerForMaskedLM"),Dvt.forEach(t),bwr=r(MSe," (RoFormer model)"),MSe.forEach(t),vwr=i(we),gE=n(we,"LI",{});var ESe=s(gE);mve=n(ESe,"STRONG",{});var Gvt=s(mve);Fwr=r(Gvt,"t5"),Gvt.forEach(t),Twr=r(ESe," \u2014 "),mU=n(ESe,"A",{href:!0});var Ovt=s(mU);Mwr=r(Ovt,"FlaxT5ForConditionalGeneration"),Ovt.forEach(t),Ewr=r(ESe," (T5 model)"),ESe.forEach(t),Cwr=i(we),hE=n(we,"LI",{});var CSe=s(hE);gve=n(CSe,"STRONG",{});var Vvt=s(gve);wwr=r(Vvt,"wav2vec2"),Vvt.forEach(t),Awr=r(CSe," \u2014 "),gU=n(CSe,"A",{href:!0});var Xvt=s(gU);ywr=r(Xvt,"FlaxWav2Vec2ForPreTraining"),Xvt.forEach(t),Lwr=r(CSe," (Wav2Vec2 model)"),CSe.forEach(t),xwr=i(we),pE=n(we,"LI",{});var wSe=s(pE);hve=n(wSe,"STRONG",{});var zvt=s(hve);$wr=r(zvt,"xlm-roberta"),zvt.forEach(t),kwr=r(wSe," \u2014 "),hU=n(wSe,"A",{href:!0});var Qvt=s(hU);Swr=r(Qvt,"FlaxXLMRobertaForMaskedLM"),Qvt.forEach(t),Rwr=r(wSe," (XLM-RoBERTa model)"),wSe.forEach(t),we.forEach(t),Bwr=i(Il),T(uE.$$.fragment,Il),Il.forEach(t),Pl.forEach(t),hPe=i(f),wc=n(f,"H2",{class:!0});var bqe=s(wc);_E=n(bqe,"A",{id:!0,class:!0,href:!0});var Wvt=s(_E);pve=n(Wvt,"SPAN",{});var Hvt=s(pve);T(T8.$$.fragment,Hvt),Hvt.forEach(t),Wvt.forEach(t),Pwr=i(bqe),uve=n(bqe,"SPAN",{});var Uvt=s(uve);Iwr=r(Uvt,"FlaxAutoModelForMaskedLM"),Uvt.forEach(t),bqe.forEach(t),pPe=i(f),mr=n(f,"DIV",{class:!0});var ql=s(mr);T(M8.$$.fragment,ql),qwr=i(ql),Ac=n(ql,"P",{});var vK=s(Ac);Nwr=r(vK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),pU=n(vK,"A",{href:!0});var Jvt=s(pU);jwr=r(Jvt,"from_pretrained()"),Jvt.forEach(t),Dwr=r(vK," class method or the "),uU=n(vK,"A",{href:!0});var Yvt=s(uU);Gwr=r(Yvt,"from_config()"),Yvt.forEach(t),Owr=r(vK,` class
method.`),vK.forEach(t),Vwr=i(ql),E8=n(ql,"P",{});var vqe=s(E8);Xwr=r(vqe,"This class cannot be instantiated directly using "),_ve=n(vqe,"CODE",{});var Kvt=s(_ve);zwr=r(Kvt,"__init__()"),Kvt.forEach(t),Qwr=r(vqe," (throws an error)."),vqe.forEach(t),Wwr=i(ql),Nt=n(ql,"DIV",{class:!0});var Qw=s(Nt);T(C8.$$.fragment,Qw),Hwr=i(Qw),bve=n(Qw,"P",{});var Zvt=s(bve);Uwr=r(Zvt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Zvt.forEach(t),Jwr=i(Qw),yc=n(Qw,"P",{});var FK=s(yc);Ywr=r(FK,`Note:
Loading a model from its configuration file does `),vve=n(FK,"STRONG",{});var eFt=s(vve);Kwr=r(eFt,"not"),eFt.forEach(t),Zwr=r(FK,` load the model weights. It only affects the
model\u2019s configuration. Use `),_U=n(FK,"A",{href:!0});var oFt=s(_U);eAr=r(oFt,"from_pretrained()"),oFt.forEach(t),oAr=r(FK," to load the model weights."),FK.forEach(t),rAr=i(Qw),T(bE.$$.fragment,Qw),Qw.forEach(t),tAr=i(ql),jr=n(ql,"DIV",{class:!0});var Nl=s(jr);T(w8.$$.fragment,Nl),aAr=i(Nl),Fve=n(Nl,"P",{});var rFt=s(Fve);nAr=r(rFt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),rFt.forEach(t),sAr=i(Nl),mn=n(Nl,"P",{});var Ww=s(mn);lAr=r(Ww,"The model class to instantiate is selected based on the "),Tve=n(Ww,"CODE",{});var tFt=s(Tve);iAr=r(tFt,"model_type"),tFt.forEach(t),dAr=r(Ww,` property of the config object (either
passed as an argument or loaded from `),Mve=n(Ww,"CODE",{});var aFt=s(Mve);cAr=r(aFt,"pretrained_model_name_or_path"),aFt.forEach(t),fAr=r(Ww,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Eve=n(Ww,"CODE",{});var nFt=s(Eve);mAr=r(nFt,"pretrained_model_name_or_path"),nFt.forEach(t),gAr=r(Ww,":"),Ww.forEach(t),hAr=i(Nl),Le=n(Nl,"UL",{});var Re=s(Le);vE=n(Re,"LI",{});var ASe=s(vE);Cve=n(ASe,"STRONG",{});var sFt=s(Cve);pAr=r(sFt,"albert"),sFt.forEach(t),uAr=r(ASe," \u2014 "),bU=n(ASe,"A",{href:!0});var lFt=s(bU);_Ar=r(lFt,"FlaxAlbertForMaskedLM"),lFt.forEach(t),bAr=r(ASe," (ALBERT model)"),ASe.forEach(t),vAr=i(Re),FE=n(Re,"LI",{});var ySe=s(FE);wve=n(ySe,"STRONG",{});var iFt=s(wve);FAr=r(iFt,"bart"),iFt.forEach(t),TAr=r(ySe," \u2014 "),vU=n(ySe,"A",{href:!0});var dFt=s(vU);MAr=r(dFt,"FlaxBartForConditionalGeneration"),dFt.forEach(t),EAr=r(ySe," (BART model)"),ySe.forEach(t),CAr=i(Re),TE=n(Re,"LI",{});var LSe=s(TE);Ave=n(LSe,"STRONG",{});var cFt=s(Ave);wAr=r(cFt,"bert"),cFt.forEach(t),AAr=r(LSe," \u2014 "),FU=n(LSe,"A",{href:!0});var fFt=s(FU);yAr=r(fFt,"FlaxBertForMaskedLM"),fFt.forEach(t),LAr=r(LSe," (BERT model)"),LSe.forEach(t),xAr=i(Re),ME=n(Re,"LI",{});var xSe=s(ME);yve=n(xSe,"STRONG",{});var mFt=s(yve);$Ar=r(mFt,"big_bird"),mFt.forEach(t),kAr=r(xSe," \u2014 "),TU=n(xSe,"A",{href:!0});var gFt=s(TU);SAr=r(gFt,"FlaxBigBirdForMaskedLM"),gFt.forEach(t),RAr=r(xSe," (BigBird model)"),xSe.forEach(t),BAr=i(Re),EE=n(Re,"LI",{});var $Se=s(EE);Lve=n($Se,"STRONG",{});var hFt=s(Lve);PAr=r(hFt,"distilbert"),hFt.forEach(t),IAr=r($Se," \u2014 "),MU=n($Se,"A",{href:!0});var pFt=s(MU);qAr=r(pFt,"FlaxDistilBertForMaskedLM"),pFt.forEach(t),NAr=r($Se," (DistilBERT model)"),$Se.forEach(t),jAr=i(Re),CE=n(Re,"LI",{});var kSe=s(CE);xve=n(kSe,"STRONG",{});var uFt=s(xve);DAr=r(uFt,"electra"),uFt.forEach(t),GAr=r(kSe," \u2014 "),EU=n(kSe,"A",{href:!0});var _Ft=s(EU);OAr=r(_Ft,"FlaxElectraForMaskedLM"),_Ft.forEach(t),VAr=r(kSe," (ELECTRA model)"),kSe.forEach(t),XAr=i(Re),wE=n(Re,"LI",{});var SSe=s(wE);$ve=n(SSe,"STRONG",{});var bFt=s($ve);zAr=r(bFt,"mbart"),bFt.forEach(t),QAr=r(SSe," \u2014 "),CU=n(SSe,"A",{href:!0});var vFt=s(CU);WAr=r(vFt,"FlaxMBartForConditionalGeneration"),vFt.forEach(t),HAr=r(SSe," (mBART model)"),SSe.forEach(t),UAr=i(Re),AE=n(Re,"LI",{});var RSe=s(AE);kve=n(RSe,"STRONG",{});var FFt=s(kve);JAr=r(FFt,"roberta"),FFt.forEach(t),YAr=r(RSe," \u2014 "),wU=n(RSe,"A",{href:!0});var TFt=s(wU);KAr=r(TFt,"FlaxRobertaForMaskedLM"),TFt.forEach(t),ZAr=r(RSe," (RoBERTa model)"),RSe.forEach(t),e0r=i(Re),yE=n(Re,"LI",{});var BSe=s(yE);Sve=n(BSe,"STRONG",{});var MFt=s(Sve);o0r=r(MFt,"roformer"),MFt.forEach(t),r0r=r(BSe," \u2014 "),AU=n(BSe,"A",{href:!0});var EFt=s(AU);t0r=r(EFt,"FlaxRoFormerForMaskedLM"),EFt.forEach(t),a0r=r(BSe," (RoFormer model)"),BSe.forEach(t),n0r=i(Re),LE=n(Re,"LI",{});var PSe=s(LE);Rve=n(PSe,"STRONG",{});var CFt=s(Rve);s0r=r(CFt,"xlm-roberta"),CFt.forEach(t),l0r=r(PSe," \u2014 "),yU=n(PSe,"A",{href:!0});var wFt=s(yU);i0r=r(wFt,"FlaxXLMRobertaForMaskedLM"),wFt.forEach(t),d0r=r(PSe," (XLM-RoBERTa model)"),PSe.forEach(t),Re.forEach(t),c0r=i(Nl),T(xE.$$.fragment,Nl),Nl.forEach(t),ql.forEach(t),uPe=i(f),Lc=n(f,"H2",{class:!0});var Fqe=s(Lc);$E=n(Fqe,"A",{id:!0,class:!0,href:!0});var AFt=s($E);Bve=n(AFt,"SPAN",{});var yFt=s(Bve);T(A8.$$.fragment,yFt),yFt.forEach(t),AFt.forEach(t),f0r=i(Fqe),Pve=n(Fqe,"SPAN",{});var LFt=s(Pve);m0r=r(LFt,"FlaxAutoModelForSeq2SeqLM"),LFt.forEach(t),Fqe.forEach(t),_Pe=i(f),gr=n(f,"DIV",{class:!0});var jl=s(gr);T(y8.$$.fragment,jl),g0r=i(jl),xc=n(jl,"P",{});var TK=s(xc);h0r=r(TK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),LU=n(TK,"A",{href:!0});var xFt=s(LU);p0r=r(xFt,"from_pretrained()"),xFt.forEach(t),u0r=r(TK," class method or the "),xU=n(TK,"A",{href:!0});var $Ft=s(xU);_0r=r($Ft,"from_config()"),$Ft.forEach(t),b0r=r(TK,` class
method.`),TK.forEach(t),v0r=i(jl),L8=n(jl,"P",{});var Tqe=s(L8);F0r=r(Tqe,"This class cannot be instantiated directly using "),Ive=n(Tqe,"CODE",{});var kFt=s(Ive);T0r=r(kFt,"__init__()"),kFt.forEach(t),M0r=r(Tqe," (throws an error)."),Tqe.forEach(t),E0r=i(jl),jt=n(jl,"DIV",{class:!0});var Hw=s(jt);T(x8.$$.fragment,Hw),C0r=i(Hw),qve=n(Hw,"P",{});var SFt=s(qve);w0r=r(SFt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),SFt.forEach(t),A0r=i(Hw),$c=n(Hw,"P",{});var MK=s($c);y0r=r(MK,`Note:
Loading a model from its configuration file does `),Nve=n(MK,"STRONG",{});var RFt=s(Nve);L0r=r(RFt,"not"),RFt.forEach(t),x0r=r(MK,` load the model weights. It only affects the
model\u2019s configuration. Use `),$U=n(MK,"A",{href:!0});var BFt=s($U);$0r=r(BFt,"from_pretrained()"),BFt.forEach(t),k0r=r(MK," to load the model weights."),MK.forEach(t),S0r=i(Hw),T(kE.$$.fragment,Hw),Hw.forEach(t),R0r=i(jl),Dr=n(jl,"DIV",{class:!0});var Dl=s(Dr);T($8.$$.fragment,Dl),B0r=i(Dl),jve=n(Dl,"P",{});var PFt=s(jve);P0r=r(PFt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),PFt.forEach(t),I0r=i(Dl),gn=n(Dl,"P",{});var Uw=s(gn);q0r=r(Uw,"The model class to instantiate is selected based on the "),Dve=n(Uw,"CODE",{});var IFt=s(Dve);N0r=r(IFt,"model_type"),IFt.forEach(t),j0r=r(Uw,` property of the config object (either
passed as an argument or loaded from `),Gve=n(Uw,"CODE",{});var qFt=s(Gve);D0r=r(qFt,"pretrained_model_name_or_path"),qFt.forEach(t),G0r=r(Uw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ove=n(Uw,"CODE",{});var NFt=s(Ove);O0r=r(NFt,"pretrained_model_name_or_path"),NFt.forEach(t),V0r=r(Uw,":"),Uw.forEach(t),X0r=i(Dl),ke=n(Dl,"UL",{});var Ge=s(ke);SE=n(Ge,"LI",{});var ISe=s(SE);Vve=n(ISe,"STRONG",{});var jFt=s(Vve);z0r=r(jFt,"bart"),jFt.forEach(t),Q0r=r(ISe," \u2014 "),kU=n(ISe,"A",{href:!0});var DFt=s(kU);W0r=r(DFt,"FlaxBartForConditionalGeneration"),DFt.forEach(t),H0r=r(ISe," (BART model)"),ISe.forEach(t),U0r=i(Ge),RE=n(Ge,"LI",{});var qSe=s(RE);Xve=n(qSe,"STRONG",{});var GFt=s(Xve);J0r=r(GFt,"blenderbot"),GFt.forEach(t),Y0r=r(qSe," \u2014 "),SU=n(qSe,"A",{href:!0});var OFt=s(SU);K0r=r(OFt,"FlaxBlenderbotForConditionalGeneration"),OFt.forEach(t),Z0r=r(qSe," (Blenderbot model)"),qSe.forEach(t),eyr=i(Ge),BE=n(Ge,"LI",{});var NSe=s(BE);zve=n(NSe,"STRONG",{});var VFt=s(zve);oyr=r(VFt,"blenderbot-small"),VFt.forEach(t),ryr=r(NSe," \u2014 "),RU=n(NSe,"A",{href:!0});var XFt=s(RU);tyr=r(XFt,"FlaxBlenderbotSmallForConditionalGeneration"),XFt.forEach(t),ayr=r(NSe," (BlenderbotSmall model)"),NSe.forEach(t),nyr=i(Ge),PE=n(Ge,"LI",{});var jSe=s(PE);Qve=n(jSe,"STRONG",{});var zFt=s(Qve);syr=r(zFt,"encoder-decoder"),zFt.forEach(t),lyr=r(jSe," \u2014 "),BU=n(jSe,"A",{href:!0});var QFt=s(BU);iyr=r(QFt,"FlaxEncoderDecoderModel"),QFt.forEach(t),dyr=r(jSe," (Encoder decoder model)"),jSe.forEach(t),cyr=i(Ge),IE=n(Ge,"LI",{});var DSe=s(IE);Wve=n(DSe,"STRONG",{});var WFt=s(Wve);fyr=r(WFt,"marian"),WFt.forEach(t),myr=r(DSe," \u2014 "),PU=n(DSe,"A",{href:!0});var HFt=s(PU);gyr=r(HFt,"FlaxMarianMTModel"),HFt.forEach(t),hyr=r(DSe," (Marian model)"),DSe.forEach(t),pyr=i(Ge),qE=n(Ge,"LI",{});var GSe=s(qE);Hve=n(GSe,"STRONG",{});var UFt=s(Hve);uyr=r(UFt,"mbart"),UFt.forEach(t),_yr=r(GSe," \u2014 "),IU=n(GSe,"A",{href:!0});var JFt=s(IU);byr=r(JFt,"FlaxMBartForConditionalGeneration"),JFt.forEach(t),vyr=r(GSe," (mBART model)"),GSe.forEach(t),Fyr=i(Ge),NE=n(Ge,"LI",{});var OSe=s(NE);Uve=n(OSe,"STRONG",{});var YFt=s(Uve);Tyr=r(YFt,"mt5"),YFt.forEach(t),Myr=r(OSe," \u2014 "),qU=n(OSe,"A",{href:!0});var KFt=s(qU);Eyr=r(KFt,"FlaxMT5ForConditionalGeneration"),KFt.forEach(t),Cyr=r(OSe," (mT5 model)"),OSe.forEach(t),wyr=i(Ge),jE=n(Ge,"LI",{});var VSe=s(jE);Jve=n(VSe,"STRONG",{});var ZFt=s(Jve);Ayr=r(ZFt,"pegasus"),ZFt.forEach(t),yyr=r(VSe," \u2014 "),NU=n(VSe,"A",{href:!0});var e6t=s(NU);Lyr=r(e6t,"FlaxPegasusForConditionalGeneration"),e6t.forEach(t),xyr=r(VSe," (Pegasus model)"),VSe.forEach(t),$yr=i(Ge),DE=n(Ge,"LI",{});var XSe=s(DE);Yve=n(XSe,"STRONG",{});var o6t=s(Yve);kyr=r(o6t,"t5"),o6t.forEach(t),Syr=r(XSe," \u2014 "),jU=n(XSe,"A",{href:!0});var r6t=s(jU);Ryr=r(r6t,"FlaxT5ForConditionalGeneration"),r6t.forEach(t),Byr=r(XSe," (T5 model)"),XSe.forEach(t),Ge.forEach(t),Pyr=i(Dl),T(GE.$$.fragment,Dl),Dl.forEach(t),jl.forEach(t),bPe=i(f),kc=n(f,"H2",{class:!0});var Mqe=s(kc);OE=n(Mqe,"A",{id:!0,class:!0,href:!0});var t6t=s(OE);Kve=n(t6t,"SPAN",{});var a6t=s(Kve);T(k8.$$.fragment,a6t),a6t.forEach(t),t6t.forEach(t),Iyr=i(Mqe),Zve=n(Mqe,"SPAN",{});var n6t=s(Zve);qyr=r(n6t,"FlaxAutoModelForSequenceClassification"),n6t.forEach(t),Mqe.forEach(t),vPe=i(f),hr=n(f,"DIV",{class:!0});var Gl=s(hr);T(S8.$$.fragment,Gl),Nyr=i(Gl),Sc=n(Gl,"P",{});var EK=s(Sc);jyr=r(EK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),DU=n(EK,"A",{href:!0});var s6t=s(DU);Dyr=r(s6t,"from_pretrained()"),s6t.forEach(t),Gyr=r(EK," class method or the "),GU=n(EK,"A",{href:!0});var l6t=s(GU);Oyr=r(l6t,"from_config()"),l6t.forEach(t),Vyr=r(EK,` class
method.`),EK.forEach(t),Xyr=i(Gl),R8=n(Gl,"P",{});var Eqe=s(R8);zyr=r(Eqe,"This class cannot be instantiated directly using "),eFe=n(Eqe,"CODE",{});var i6t=s(eFe);Qyr=r(i6t,"__init__()"),i6t.forEach(t),Wyr=r(Eqe," (throws an error)."),Eqe.forEach(t),Hyr=i(Gl),Dt=n(Gl,"DIV",{class:!0});var Jw=s(Dt);T(B8.$$.fragment,Jw),Uyr=i(Jw),oFe=n(Jw,"P",{});var d6t=s(oFe);Jyr=r(d6t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),d6t.forEach(t),Yyr=i(Jw),Rc=n(Jw,"P",{});var CK=s(Rc);Kyr=r(CK,`Note:
Loading a model from its configuration file does `),rFe=n(CK,"STRONG",{});var c6t=s(rFe);Zyr=r(c6t,"not"),c6t.forEach(t),eLr=r(CK,` load the model weights. It only affects the
model\u2019s configuration. Use `),OU=n(CK,"A",{href:!0});var f6t=s(OU);oLr=r(f6t,"from_pretrained()"),f6t.forEach(t),rLr=r(CK," to load the model weights."),CK.forEach(t),tLr=i(Jw),T(VE.$$.fragment,Jw),Jw.forEach(t),aLr=i(Gl),Gr=n(Gl,"DIV",{class:!0});var Ol=s(Gr);T(P8.$$.fragment,Ol),nLr=i(Ol),tFe=n(Ol,"P",{});var m6t=s(tFe);sLr=r(m6t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),m6t.forEach(t),lLr=i(Ol),hn=n(Ol,"P",{});var Yw=s(hn);iLr=r(Yw,"The model class to instantiate is selected based on the "),aFe=n(Yw,"CODE",{});var g6t=s(aFe);dLr=r(g6t,"model_type"),g6t.forEach(t),cLr=r(Yw,` property of the config object (either
passed as an argument or loaded from `),nFe=n(Yw,"CODE",{});var h6t=s(nFe);fLr=r(h6t,"pretrained_model_name_or_path"),h6t.forEach(t),mLr=r(Yw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sFe=n(Yw,"CODE",{});var p6t=s(sFe);gLr=r(p6t,"pretrained_model_name_or_path"),p6t.forEach(t),hLr=r(Yw,":"),Yw.forEach(t),pLr=i(Ol),xe=n(Ol,"UL",{});var Be=s(xe);XE=n(Be,"LI",{});var zSe=s(XE);lFe=n(zSe,"STRONG",{});var u6t=s(lFe);uLr=r(u6t,"albert"),u6t.forEach(t),_Lr=r(zSe," \u2014 "),VU=n(zSe,"A",{href:!0});var _6t=s(VU);bLr=r(_6t,"FlaxAlbertForSequenceClassification"),_6t.forEach(t),vLr=r(zSe," (ALBERT model)"),zSe.forEach(t),FLr=i(Be),zE=n(Be,"LI",{});var QSe=s(zE);iFe=n(QSe,"STRONG",{});var b6t=s(iFe);TLr=r(b6t,"bart"),b6t.forEach(t),MLr=r(QSe," \u2014 "),XU=n(QSe,"A",{href:!0});var v6t=s(XU);ELr=r(v6t,"FlaxBartForSequenceClassification"),v6t.forEach(t),CLr=r(QSe," (BART model)"),QSe.forEach(t),wLr=i(Be),QE=n(Be,"LI",{});var WSe=s(QE);dFe=n(WSe,"STRONG",{});var F6t=s(dFe);ALr=r(F6t,"bert"),F6t.forEach(t),yLr=r(WSe," \u2014 "),zU=n(WSe,"A",{href:!0});var T6t=s(zU);LLr=r(T6t,"FlaxBertForSequenceClassification"),T6t.forEach(t),xLr=r(WSe," (BERT model)"),WSe.forEach(t),$Lr=i(Be),WE=n(Be,"LI",{});var HSe=s(WE);cFe=n(HSe,"STRONG",{});var M6t=s(cFe);kLr=r(M6t,"big_bird"),M6t.forEach(t),SLr=r(HSe," \u2014 "),QU=n(HSe,"A",{href:!0});var E6t=s(QU);RLr=r(E6t,"FlaxBigBirdForSequenceClassification"),E6t.forEach(t),BLr=r(HSe," (BigBird model)"),HSe.forEach(t),PLr=i(Be),HE=n(Be,"LI",{});var USe=s(HE);fFe=n(USe,"STRONG",{});var C6t=s(fFe);ILr=r(C6t,"distilbert"),C6t.forEach(t),qLr=r(USe," \u2014 "),WU=n(USe,"A",{href:!0});var w6t=s(WU);NLr=r(w6t,"FlaxDistilBertForSequenceClassification"),w6t.forEach(t),jLr=r(USe," (DistilBERT model)"),USe.forEach(t),DLr=i(Be),UE=n(Be,"LI",{});var JSe=s(UE);mFe=n(JSe,"STRONG",{});var A6t=s(mFe);GLr=r(A6t,"electra"),A6t.forEach(t),OLr=r(JSe," \u2014 "),HU=n(JSe,"A",{href:!0});var y6t=s(HU);VLr=r(y6t,"FlaxElectraForSequenceClassification"),y6t.forEach(t),XLr=r(JSe," (ELECTRA model)"),JSe.forEach(t),zLr=i(Be),JE=n(Be,"LI",{});var YSe=s(JE);gFe=n(YSe,"STRONG",{});var L6t=s(gFe);QLr=r(L6t,"mbart"),L6t.forEach(t),WLr=r(YSe," \u2014 "),UU=n(YSe,"A",{href:!0});var x6t=s(UU);HLr=r(x6t,"FlaxMBartForSequenceClassification"),x6t.forEach(t),ULr=r(YSe," (mBART model)"),YSe.forEach(t),JLr=i(Be),YE=n(Be,"LI",{});var KSe=s(YE);hFe=n(KSe,"STRONG",{});var $6t=s(hFe);YLr=r($6t,"roberta"),$6t.forEach(t),KLr=r(KSe," \u2014 "),JU=n(KSe,"A",{href:!0});var k6t=s(JU);ZLr=r(k6t,"FlaxRobertaForSequenceClassification"),k6t.forEach(t),e8r=r(KSe," (RoBERTa model)"),KSe.forEach(t),o8r=i(Be),KE=n(Be,"LI",{});var ZSe=s(KE);pFe=n(ZSe,"STRONG",{});var S6t=s(pFe);r8r=r(S6t,"roformer"),S6t.forEach(t),t8r=r(ZSe," \u2014 "),YU=n(ZSe,"A",{href:!0});var R6t=s(YU);a8r=r(R6t,"FlaxRoFormerForSequenceClassification"),R6t.forEach(t),n8r=r(ZSe," (RoFormer model)"),ZSe.forEach(t),s8r=i(Be),ZE=n(Be,"LI",{});var eRe=s(ZE);uFe=n(eRe,"STRONG",{});var B6t=s(uFe);l8r=r(B6t,"xlm-roberta"),B6t.forEach(t),i8r=r(eRe," \u2014 "),KU=n(eRe,"A",{href:!0});var P6t=s(KU);d8r=r(P6t,"FlaxXLMRobertaForSequenceClassification"),P6t.forEach(t),c8r=r(eRe," (XLM-RoBERTa model)"),eRe.forEach(t),Be.forEach(t),f8r=i(Ol),T(eC.$$.fragment,Ol),Ol.forEach(t),Gl.forEach(t),FPe=i(f),Bc=n(f,"H2",{class:!0});var Cqe=s(Bc);oC=n(Cqe,"A",{id:!0,class:!0,href:!0});var I6t=s(oC);_Fe=n(I6t,"SPAN",{});var q6t=s(_Fe);T(I8.$$.fragment,q6t),q6t.forEach(t),I6t.forEach(t),m8r=i(Cqe),bFe=n(Cqe,"SPAN",{});var N6t=s(bFe);g8r=r(N6t,"FlaxAutoModelForQuestionAnswering"),N6t.forEach(t),Cqe.forEach(t),TPe=i(f),pr=n(f,"DIV",{class:!0});var Vl=s(pr);T(q8.$$.fragment,Vl),h8r=i(Vl),Pc=n(Vl,"P",{});var wK=s(Pc);p8r=r(wK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),ZU=n(wK,"A",{href:!0});var j6t=s(ZU);u8r=r(j6t,"from_pretrained()"),j6t.forEach(t),_8r=r(wK," class method or the "),eJ=n(wK,"A",{href:!0});var D6t=s(eJ);b8r=r(D6t,"from_config()"),D6t.forEach(t),v8r=r(wK,` class
method.`),wK.forEach(t),F8r=i(Vl),N8=n(Vl,"P",{});var wqe=s(N8);T8r=r(wqe,"This class cannot be instantiated directly using "),vFe=n(wqe,"CODE",{});var G6t=s(vFe);M8r=r(G6t,"__init__()"),G6t.forEach(t),E8r=r(wqe," (throws an error)."),wqe.forEach(t),C8r=i(Vl),Gt=n(Vl,"DIV",{class:!0});var Kw=s(Gt);T(j8.$$.fragment,Kw),w8r=i(Kw),FFe=n(Kw,"P",{});var O6t=s(FFe);A8r=r(O6t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),O6t.forEach(t),y8r=i(Kw),Ic=n(Kw,"P",{});var AK=s(Ic);L8r=r(AK,`Note:
Loading a model from its configuration file does `),TFe=n(AK,"STRONG",{});var V6t=s(TFe);x8r=r(V6t,"not"),V6t.forEach(t),$8r=r(AK,` load the model weights. It only affects the
model\u2019s configuration. Use `),oJ=n(AK,"A",{href:!0});var X6t=s(oJ);k8r=r(X6t,"from_pretrained()"),X6t.forEach(t),S8r=r(AK," to load the model weights."),AK.forEach(t),R8r=i(Kw),T(rC.$$.fragment,Kw),Kw.forEach(t),B8r=i(Vl),Or=n(Vl,"DIV",{class:!0});var Xl=s(Or);T(D8.$$.fragment,Xl),P8r=i(Xl),MFe=n(Xl,"P",{});var z6t=s(MFe);I8r=r(z6t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),z6t.forEach(t),q8r=i(Xl),pn=n(Xl,"P",{});var Zw=s(pn);N8r=r(Zw,"The model class to instantiate is selected based on the "),EFe=n(Zw,"CODE",{});var Q6t=s(EFe);j8r=r(Q6t,"model_type"),Q6t.forEach(t),D8r=r(Zw,` property of the config object (either
passed as an argument or loaded from `),CFe=n(Zw,"CODE",{});var W6t=s(CFe);G8r=r(W6t,"pretrained_model_name_or_path"),W6t.forEach(t),O8r=r(Zw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wFe=n(Zw,"CODE",{});var H6t=s(wFe);V8r=r(H6t,"pretrained_model_name_or_path"),H6t.forEach(t),X8r=r(Zw,":"),Zw.forEach(t),z8r=i(Xl),$e=n(Xl,"UL",{});var Pe=s($e);tC=n(Pe,"LI",{});var oRe=s(tC);AFe=n(oRe,"STRONG",{});var U6t=s(AFe);Q8r=r(U6t,"albert"),U6t.forEach(t),W8r=r(oRe," \u2014 "),rJ=n(oRe,"A",{href:!0});var J6t=s(rJ);H8r=r(J6t,"FlaxAlbertForQuestionAnswering"),J6t.forEach(t),U8r=r(oRe," (ALBERT model)"),oRe.forEach(t),J8r=i(Pe),aC=n(Pe,"LI",{});var rRe=s(aC);yFe=n(rRe,"STRONG",{});var Y6t=s(yFe);Y8r=r(Y6t,"bart"),Y6t.forEach(t),K8r=r(rRe," \u2014 "),tJ=n(rRe,"A",{href:!0});var K6t=s(tJ);Z8r=r(K6t,"FlaxBartForQuestionAnswering"),K6t.forEach(t),e7r=r(rRe," (BART model)"),rRe.forEach(t),o7r=i(Pe),nC=n(Pe,"LI",{});var tRe=s(nC);LFe=n(tRe,"STRONG",{});var Z6t=s(LFe);r7r=r(Z6t,"bert"),Z6t.forEach(t),t7r=r(tRe," \u2014 "),aJ=n(tRe,"A",{href:!0});var eTt=s(aJ);a7r=r(eTt,"FlaxBertForQuestionAnswering"),eTt.forEach(t),n7r=r(tRe," (BERT model)"),tRe.forEach(t),s7r=i(Pe),sC=n(Pe,"LI",{});var aRe=s(sC);xFe=n(aRe,"STRONG",{});var oTt=s(xFe);l7r=r(oTt,"big_bird"),oTt.forEach(t),i7r=r(aRe," \u2014 "),nJ=n(aRe,"A",{href:!0});var rTt=s(nJ);d7r=r(rTt,"FlaxBigBirdForQuestionAnswering"),rTt.forEach(t),c7r=r(aRe," (BigBird model)"),aRe.forEach(t),f7r=i(Pe),lC=n(Pe,"LI",{});var nRe=s(lC);$Fe=n(nRe,"STRONG",{});var tTt=s($Fe);m7r=r(tTt,"distilbert"),tTt.forEach(t),g7r=r(nRe," \u2014 "),sJ=n(nRe,"A",{href:!0});var aTt=s(sJ);h7r=r(aTt,"FlaxDistilBertForQuestionAnswering"),aTt.forEach(t),p7r=r(nRe," (DistilBERT model)"),nRe.forEach(t),u7r=i(Pe),iC=n(Pe,"LI",{});var sRe=s(iC);kFe=n(sRe,"STRONG",{});var nTt=s(kFe);_7r=r(nTt,"electra"),nTt.forEach(t),b7r=r(sRe," \u2014 "),lJ=n(sRe,"A",{href:!0});var sTt=s(lJ);v7r=r(sTt,"FlaxElectraForQuestionAnswering"),sTt.forEach(t),F7r=r(sRe," (ELECTRA model)"),sRe.forEach(t),T7r=i(Pe),dC=n(Pe,"LI",{});var lRe=s(dC);SFe=n(lRe,"STRONG",{});var lTt=s(SFe);M7r=r(lTt,"mbart"),lTt.forEach(t),E7r=r(lRe," \u2014 "),iJ=n(lRe,"A",{href:!0});var iTt=s(iJ);C7r=r(iTt,"FlaxMBartForQuestionAnswering"),iTt.forEach(t),w7r=r(lRe," (mBART model)"),lRe.forEach(t),A7r=i(Pe),cC=n(Pe,"LI",{});var iRe=s(cC);RFe=n(iRe,"STRONG",{});var dTt=s(RFe);y7r=r(dTt,"roberta"),dTt.forEach(t),L7r=r(iRe," \u2014 "),dJ=n(iRe,"A",{href:!0});var cTt=s(dJ);x7r=r(cTt,"FlaxRobertaForQuestionAnswering"),cTt.forEach(t),$7r=r(iRe," (RoBERTa model)"),iRe.forEach(t),k7r=i(Pe),fC=n(Pe,"LI",{});var dRe=s(fC);BFe=n(dRe,"STRONG",{});var fTt=s(BFe);S7r=r(fTt,"roformer"),fTt.forEach(t),R7r=r(dRe," \u2014 "),cJ=n(dRe,"A",{href:!0});var mTt=s(cJ);B7r=r(mTt,"FlaxRoFormerForQuestionAnswering"),mTt.forEach(t),P7r=r(dRe," (RoFormer model)"),dRe.forEach(t),I7r=i(Pe),mC=n(Pe,"LI",{});var cRe=s(mC);PFe=n(cRe,"STRONG",{});var gTt=s(PFe);q7r=r(gTt,"xlm-roberta"),gTt.forEach(t),N7r=r(cRe," \u2014 "),fJ=n(cRe,"A",{href:!0});var hTt=s(fJ);j7r=r(hTt,"FlaxXLMRobertaForQuestionAnswering"),hTt.forEach(t),D7r=r(cRe," (XLM-RoBERTa model)"),cRe.forEach(t),Pe.forEach(t),G7r=i(Xl),T(gC.$$.fragment,Xl),Xl.forEach(t),Vl.forEach(t),MPe=i(f),qc=n(f,"H2",{class:!0});var Aqe=s(qc);hC=n(Aqe,"A",{id:!0,class:!0,href:!0});var pTt=s(hC);IFe=n(pTt,"SPAN",{});var uTt=s(IFe);T(G8.$$.fragment,uTt),uTt.forEach(t),pTt.forEach(t),O7r=i(Aqe),qFe=n(Aqe,"SPAN",{});var _Tt=s(qFe);V7r=r(_Tt,"FlaxAutoModelForTokenClassification"),_Tt.forEach(t),Aqe.forEach(t),EPe=i(f),ur=n(f,"DIV",{class:!0});var zl=s(ur);T(O8.$$.fragment,zl),X7r=i(zl),Nc=n(zl,"P",{});var yK=s(Nc);z7r=r(yK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),mJ=n(yK,"A",{href:!0});var bTt=s(mJ);Q7r=r(bTt,"from_pretrained()"),bTt.forEach(t),W7r=r(yK," class method or the "),gJ=n(yK,"A",{href:!0});var vTt=s(gJ);H7r=r(vTt,"from_config()"),vTt.forEach(t),U7r=r(yK,` class
method.`),yK.forEach(t),J7r=i(zl),V8=n(zl,"P",{});var yqe=s(V8);Y7r=r(yqe,"This class cannot be instantiated directly using "),NFe=n(yqe,"CODE",{});var FTt=s(NFe);K7r=r(FTt,"__init__()"),FTt.forEach(t),Z7r=r(yqe," (throws an error)."),yqe.forEach(t),exr=i(zl),Ot=n(zl,"DIV",{class:!0});var eA=s(Ot);T(X8.$$.fragment,eA),oxr=i(eA),jFe=n(eA,"P",{});var TTt=s(jFe);rxr=r(TTt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),TTt.forEach(t),txr=i(eA),jc=n(eA,"P",{});var LK=s(jc);axr=r(LK,`Note:
Loading a model from its configuration file does `),DFe=n(LK,"STRONG",{});var MTt=s(DFe);nxr=r(MTt,"not"),MTt.forEach(t),sxr=r(LK,` load the model weights. It only affects the
model\u2019s configuration. Use `),hJ=n(LK,"A",{href:!0});var ETt=s(hJ);lxr=r(ETt,"from_pretrained()"),ETt.forEach(t),ixr=r(LK," to load the model weights."),LK.forEach(t),dxr=i(eA),T(pC.$$.fragment,eA),eA.forEach(t),cxr=i(zl),Vr=n(zl,"DIV",{class:!0});var Ql=s(Vr);T(z8.$$.fragment,Ql),fxr=i(Ql),GFe=n(Ql,"P",{});var CTt=s(GFe);mxr=r(CTt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),CTt.forEach(t),gxr=i(Ql),un=n(Ql,"P",{});var oA=s(un);hxr=r(oA,"The model class to instantiate is selected based on the "),OFe=n(oA,"CODE",{});var wTt=s(OFe);pxr=r(wTt,"model_type"),wTt.forEach(t),uxr=r(oA,` property of the config object (either
passed as an argument or loaded from `),VFe=n(oA,"CODE",{});var ATt=s(VFe);_xr=r(ATt,"pretrained_model_name_or_path"),ATt.forEach(t),bxr=r(oA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),XFe=n(oA,"CODE",{});var yTt=s(XFe);vxr=r(yTt,"pretrained_model_name_or_path"),yTt.forEach(t),Fxr=r(oA,":"),oA.forEach(t),Txr=i(Ql),je=n(Ql,"UL",{});var bo=s(je);uC=n(bo,"LI",{});var fRe=s(uC);zFe=n(fRe,"STRONG",{});var LTt=s(zFe);Mxr=r(LTt,"albert"),LTt.forEach(t),Exr=r(fRe," \u2014 "),pJ=n(fRe,"A",{href:!0});var xTt=s(pJ);Cxr=r(xTt,"FlaxAlbertForTokenClassification"),xTt.forEach(t),wxr=r(fRe," (ALBERT model)"),fRe.forEach(t),Axr=i(bo),_C=n(bo,"LI",{});var mRe=s(_C);QFe=n(mRe,"STRONG",{});var $Tt=s(QFe);yxr=r($Tt,"bert"),$Tt.forEach(t),Lxr=r(mRe," \u2014 "),uJ=n(mRe,"A",{href:!0});var kTt=s(uJ);xxr=r(kTt,"FlaxBertForTokenClassification"),kTt.forEach(t),$xr=r(mRe," (BERT model)"),mRe.forEach(t),kxr=i(bo),bC=n(bo,"LI",{});var gRe=s(bC);WFe=n(gRe,"STRONG",{});var STt=s(WFe);Sxr=r(STt,"big_bird"),STt.forEach(t),Rxr=r(gRe," \u2014 "),_J=n(gRe,"A",{href:!0});var RTt=s(_J);Bxr=r(RTt,"FlaxBigBirdForTokenClassification"),RTt.forEach(t),Pxr=r(gRe," (BigBird model)"),gRe.forEach(t),Ixr=i(bo),vC=n(bo,"LI",{});var hRe=s(vC);HFe=n(hRe,"STRONG",{});var BTt=s(HFe);qxr=r(BTt,"distilbert"),BTt.forEach(t),Nxr=r(hRe," \u2014 "),bJ=n(hRe,"A",{href:!0});var PTt=s(bJ);jxr=r(PTt,"FlaxDistilBertForTokenClassification"),PTt.forEach(t),Dxr=r(hRe," (DistilBERT model)"),hRe.forEach(t),Gxr=i(bo),FC=n(bo,"LI",{});var pRe=s(FC);UFe=n(pRe,"STRONG",{});var ITt=s(UFe);Oxr=r(ITt,"electra"),ITt.forEach(t),Vxr=r(pRe," \u2014 "),vJ=n(pRe,"A",{href:!0});var qTt=s(vJ);Xxr=r(qTt,"FlaxElectraForTokenClassification"),qTt.forEach(t),zxr=r(pRe," (ELECTRA model)"),pRe.forEach(t),Qxr=i(bo),TC=n(bo,"LI",{});var uRe=s(TC);JFe=n(uRe,"STRONG",{});var NTt=s(JFe);Wxr=r(NTt,"roberta"),NTt.forEach(t),Hxr=r(uRe," \u2014 "),FJ=n(uRe,"A",{href:!0});var jTt=s(FJ);Uxr=r(jTt,"FlaxRobertaForTokenClassification"),jTt.forEach(t),Jxr=r(uRe," (RoBERTa model)"),uRe.forEach(t),Yxr=i(bo),MC=n(bo,"LI",{});var _Re=s(MC);YFe=n(_Re,"STRONG",{});var DTt=s(YFe);Kxr=r(DTt,"roformer"),DTt.forEach(t),Zxr=r(_Re," \u2014 "),TJ=n(_Re,"A",{href:!0});var GTt=s(TJ);e$r=r(GTt,"FlaxRoFormerForTokenClassification"),GTt.forEach(t),o$r=r(_Re," (RoFormer model)"),_Re.forEach(t),r$r=i(bo),EC=n(bo,"LI",{});var bRe=s(EC);KFe=n(bRe,"STRONG",{});var OTt=s(KFe);t$r=r(OTt,"xlm-roberta"),OTt.forEach(t),a$r=r(bRe," \u2014 "),MJ=n(bRe,"A",{href:!0});var VTt=s(MJ);n$r=r(VTt,"FlaxXLMRobertaForTokenClassification"),VTt.forEach(t),s$r=r(bRe," (XLM-RoBERTa model)"),bRe.forEach(t),bo.forEach(t),l$r=i(Ql),T(CC.$$.fragment,Ql),Ql.forEach(t),zl.forEach(t),CPe=i(f),Dc=n(f,"H2",{class:!0});var Lqe=s(Dc);wC=n(Lqe,"A",{id:!0,class:!0,href:!0});var XTt=s(wC);ZFe=n(XTt,"SPAN",{});var zTt=s(ZFe);T(Q8.$$.fragment,zTt),zTt.forEach(t),XTt.forEach(t),i$r=i(Lqe),e6e=n(Lqe,"SPAN",{});var QTt=s(e6e);d$r=r(QTt,"FlaxAutoModelForMultipleChoice"),QTt.forEach(t),Lqe.forEach(t),wPe=i(f),_r=n(f,"DIV",{class:!0});var Wl=s(_r);T(W8.$$.fragment,Wl),c$r=i(Wl),Gc=n(Wl,"P",{});var xK=s(Gc);f$r=r(xK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),EJ=n(xK,"A",{href:!0});var WTt=s(EJ);m$r=r(WTt,"from_pretrained()"),WTt.forEach(t),g$r=r(xK," class method or the "),CJ=n(xK,"A",{href:!0});var HTt=s(CJ);h$r=r(HTt,"from_config()"),HTt.forEach(t),p$r=r(xK,` class
method.`),xK.forEach(t),u$r=i(Wl),H8=n(Wl,"P",{});var xqe=s(H8);_$r=r(xqe,"This class cannot be instantiated directly using "),o6e=n(xqe,"CODE",{});var UTt=s(o6e);b$r=r(UTt,"__init__()"),UTt.forEach(t),v$r=r(xqe," (throws an error)."),xqe.forEach(t),F$r=i(Wl),Vt=n(Wl,"DIV",{class:!0});var rA=s(Vt);T(U8.$$.fragment,rA),T$r=i(rA),r6e=n(rA,"P",{});var JTt=s(r6e);M$r=r(JTt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),JTt.forEach(t),E$r=i(rA),Oc=n(rA,"P",{});var $K=s(Oc);C$r=r($K,`Note:
Loading a model from its configuration file does `),t6e=n($K,"STRONG",{});var YTt=s(t6e);w$r=r(YTt,"not"),YTt.forEach(t),A$r=r($K,` load the model weights. It only affects the
model\u2019s configuration. Use `),wJ=n($K,"A",{href:!0});var KTt=s(wJ);y$r=r(KTt,"from_pretrained()"),KTt.forEach(t),L$r=r($K," to load the model weights."),$K.forEach(t),x$r=i(rA),T(AC.$$.fragment,rA),rA.forEach(t),$$r=i(Wl),Xr=n(Wl,"DIV",{class:!0});var Hl=s(Xr);T(J8.$$.fragment,Hl),k$r=i(Hl),a6e=n(Hl,"P",{});var ZTt=s(a6e);S$r=r(ZTt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),ZTt.forEach(t),R$r=i(Hl),_n=n(Hl,"P",{});var tA=s(_n);B$r=r(tA,"The model class to instantiate is selected based on the "),n6e=n(tA,"CODE",{});var eMt=s(n6e);P$r=r(eMt,"model_type"),eMt.forEach(t),I$r=r(tA,` property of the config object (either
passed as an argument or loaded from `),s6e=n(tA,"CODE",{});var oMt=s(s6e);q$r=r(oMt,"pretrained_model_name_or_path"),oMt.forEach(t),N$r=r(tA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),l6e=n(tA,"CODE",{});var rMt=s(l6e);j$r=r(rMt,"pretrained_model_name_or_path"),rMt.forEach(t),D$r=r(tA,":"),tA.forEach(t),G$r=i(Hl),De=n(Hl,"UL",{});var vo=s(De);yC=n(vo,"LI",{});var vRe=s(yC);i6e=n(vRe,"STRONG",{});var tMt=s(i6e);O$r=r(tMt,"albert"),tMt.forEach(t),V$r=r(vRe," \u2014 "),AJ=n(vRe,"A",{href:!0});var aMt=s(AJ);X$r=r(aMt,"FlaxAlbertForMultipleChoice"),aMt.forEach(t),z$r=r(vRe," (ALBERT model)"),vRe.forEach(t),Q$r=i(vo),LC=n(vo,"LI",{});var FRe=s(LC);d6e=n(FRe,"STRONG",{});var nMt=s(d6e);W$r=r(nMt,"bert"),nMt.forEach(t),H$r=r(FRe," \u2014 "),yJ=n(FRe,"A",{href:!0});var sMt=s(yJ);U$r=r(sMt,"FlaxBertForMultipleChoice"),sMt.forEach(t),J$r=r(FRe," (BERT model)"),FRe.forEach(t),Y$r=i(vo),xC=n(vo,"LI",{});var TRe=s(xC);c6e=n(TRe,"STRONG",{});var lMt=s(c6e);K$r=r(lMt,"big_bird"),lMt.forEach(t),Z$r=r(TRe," \u2014 "),LJ=n(TRe,"A",{href:!0});var iMt=s(LJ);ekr=r(iMt,"FlaxBigBirdForMultipleChoice"),iMt.forEach(t),okr=r(TRe," (BigBird model)"),TRe.forEach(t),rkr=i(vo),$C=n(vo,"LI",{});var MRe=s($C);f6e=n(MRe,"STRONG",{});var dMt=s(f6e);tkr=r(dMt,"distilbert"),dMt.forEach(t),akr=r(MRe," \u2014 "),xJ=n(MRe,"A",{href:!0});var cMt=s(xJ);nkr=r(cMt,"FlaxDistilBertForMultipleChoice"),cMt.forEach(t),skr=r(MRe," (DistilBERT model)"),MRe.forEach(t),lkr=i(vo),kC=n(vo,"LI",{});var ERe=s(kC);m6e=n(ERe,"STRONG",{});var fMt=s(m6e);ikr=r(fMt,"electra"),fMt.forEach(t),dkr=r(ERe," \u2014 "),$J=n(ERe,"A",{href:!0});var mMt=s($J);ckr=r(mMt,"FlaxElectraForMultipleChoice"),mMt.forEach(t),fkr=r(ERe," (ELECTRA model)"),ERe.forEach(t),mkr=i(vo),SC=n(vo,"LI",{});var CRe=s(SC);g6e=n(CRe,"STRONG",{});var gMt=s(g6e);gkr=r(gMt,"roberta"),gMt.forEach(t),hkr=r(CRe," \u2014 "),kJ=n(CRe,"A",{href:!0});var hMt=s(kJ);pkr=r(hMt,"FlaxRobertaForMultipleChoice"),hMt.forEach(t),ukr=r(CRe," (RoBERTa model)"),CRe.forEach(t),_kr=i(vo),RC=n(vo,"LI",{});var wRe=s(RC);h6e=n(wRe,"STRONG",{});var pMt=s(h6e);bkr=r(pMt,"roformer"),pMt.forEach(t),vkr=r(wRe," \u2014 "),SJ=n(wRe,"A",{href:!0});var uMt=s(SJ);Fkr=r(uMt,"FlaxRoFormerForMultipleChoice"),uMt.forEach(t),Tkr=r(wRe," (RoFormer model)"),wRe.forEach(t),Mkr=i(vo),BC=n(vo,"LI",{});var ARe=s(BC);p6e=n(ARe,"STRONG",{});var _Mt=s(p6e);Ekr=r(_Mt,"xlm-roberta"),_Mt.forEach(t),Ckr=r(ARe," \u2014 "),RJ=n(ARe,"A",{href:!0});var bMt=s(RJ);wkr=r(bMt,"FlaxXLMRobertaForMultipleChoice"),bMt.forEach(t),Akr=r(ARe," (XLM-RoBERTa model)"),ARe.forEach(t),vo.forEach(t),ykr=i(Hl),T(PC.$$.fragment,Hl),Hl.forEach(t),Wl.forEach(t),APe=i(f),Vc=n(f,"H2",{class:!0});var $qe=s(Vc);IC=n($qe,"A",{id:!0,class:!0,href:!0});var vMt=s(IC);u6e=n(vMt,"SPAN",{});var FMt=s(u6e);T(Y8.$$.fragment,FMt),FMt.forEach(t),vMt.forEach(t),Lkr=i($qe),_6e=n($qe,"SPAN",{});var TMt=s(_6e);xkr=r(TMt,"FlaxAutoModelForNextSentencePrediction"),TMt.forEach(t),$qe.forEach(t),yPe=i(f),br=n(f,"DIV",{class:!0});var Ul=s(br);T(K8.$$.fragment,Ul),$kr=i(Ul),Xc=n(Ul,"P",{});var kK=s(Xc);kkr=r(kK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),BJ=n(kK,"A",{href:!0});var MMt=s(BJ);Skr=r(MMt,"from_pretrained()"),MMt.forEach(t),Rkr=r(kK," class method or the "),PJ=n(kK,"A",{href:!0});var EMt=s(PJ);Bkr=r(EMt,"from_config()"),EMt.forEach(t),Pkr=r(kK,` class
method.`),kK.forEach(t),Ikr=i(Ul),Z8=n(Ul,"P",{});var kqe=s(Z8);qkr=r(kqe,"This class cannot be instantiated directly using "),b6e=n(kqe,"CODE",{});var CMt=s(b6e);Nkr=r(CMt,"__init__()"),CMt.forEach(t),jkr=r(kqe," (throws an error)."),kqe.forEach(t),Dkr=i(Ul),Xt=n(Ul,"DIV",{class:!0});var aA=s(Xt);T(e7.$$.fragment,aA),Gkr=i(aA),v6e=n(aA,"P",{});var wMt=s(v6e);Okr=r(wMt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),wMt.forEach(t),Vkr=i(aA),zc=n(aA,"P",{});var SK=s(zc);Xkr=r(SK,`Note:
Loading a model from its configuration file does `),F6e=n(SK,"STRONG",{});var AMt=s(F6e);zkr=r(AMt,"not"),AMt.forEach(t),Qkr=r(SK,` load the model weights. It only affects the
model\u2019s configuration. Use `),IJ=n(SK,"A",{href:!0});var yMt=s(IJ);Wkr=r(yMt,"from_pretrained()"),yMt.forEach(t),Hkr=r(SK," to load the model weights."),SK.forEach(t),Ukr=i(aA),T(qC.$$.fragment,aA),aA.forEach(t),Jkr=i(Ul),zr=n(Ul,"DIV",{class:!0});var Jl=s(zr);T(o7.$$.fragment,Jl),Ykr=i(Jl),T6e=n(Jl,"P",{});var LMt=s(T6e);Kkr=r(LMt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),LMt.forEach(t),Zkr=i(Jl),bn=n(Jl,"P",{});var nA=s(bn);eSr=r(nA,"The model class to instantiate is selected based on the "),M6e=n(nA,"CODE",{});var xMt=s(M6e);oSr=r(xMt,"model_type"),xMt.forEach(t),rSr=r(nA,` property of the config object (either
passed as an argument or loaded from `),E6e=n(nA,"CODE",{});var $Mt=s(E6e);tSr=r($Mt,"pretrained_model_name_or_path"),$Mt.forEach(t),aSr=r(nA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),C6e=n(nA,"CODE",{});var kMt=s(C6e);nSr=r(kMt,"pretrained_model_name_or_path"),kMt.forEach(t),sSr=r(nA,":"),nA.forEach(t),lSr=i(Jl),w6e=n(Jl,"UL",{});var SMt=s(w6e);NC=n(SMt,"LI",{});var yRe=s(NC);A6e=n(yRe,"STRONG",{});var RMt=s(A6e);iSr=r(RMt,"bert"),RMt.forEach(t),dSr=r(yRe," \u2014 "),qJ=n(yRe,"A",{href:!0});var BMt=s(qJ);cSr=r(BMt,"FlaxBertForNextSentencePrediction"),BMt.forEach(t),fSr=r(yRe," (BERT model)"),yRe.forEach(t),SMt.forEach(t),mSr=i(Jl),T(jC.$$.fragment,Jl),Jl.forEach(t),Ul.forEach(t),LPe=i(f),Qc=n(f,"H2",{class:!0});var Sqe=s(Qc);DC=n(Sqe,"A",{id:!0,class:!0,href:!0});var PMt=s(DC);y6e=n(PMt,"SPAN",{});var IMt=s(y6e);T(r7.$$.fragment,IMt),IMt.forEach(t),PMt.forEach(t),gSr=i(Sqe),L6e=n(Sqe,"SPAN",{});var qMt=s(L6e);hSr=r(qMt,"FlaxAutoModelForImageClassification"),qMt.forEach(t),Sqe.forEach(t),xPe=i(f),vr=n(f,"DIV",{class:!0});var Yl=s(vr);T(t7.$$.fragment,Yl),pSr=i(Yl),Wc=n(Yl,"P",{});var RK=s(Wc);uSr=r(RK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),NJ=n(RK,"A",{href:!0});var NMt=s(NJ);_Sr=r(NMt,"from_pretrained()"),NMt.forEach(t),bSr=r(RK," class method or the "),jJ=n(RK,"A",{href:!0});var jMt=s(jJ);vSr=r(jMt,"from_config()"),jMt.forEach(t),FSr=r(RK,` class
method.`),RK.forEach(t),TSr=i(Yl),a7=n(Yl,"P",{});var Rqe=s(a7);MSr=r(Rqe,"This class cannot be instantiated directly using "),x6e=n(Rqe,"CODE",{});var DMt=s(x6e);ESr=r(DMt,"__init__()"),DMt.forEach(t),CSr=r(Rqe," (throws an error)."),Rqe.forEach(t),wSr=i(Yl),zt=n(Yl,"DIV",{class:!0});var sA=s(zt);T(n7.$$.fragment,sA),ASr=i(sA),$6e=n(sA,"P",{});var GMt=s($6e);ySr=r(GMt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),GMt.forEach(t),LSr=i(sA),Hc=n(sA,"P",{});var BK=s(Hc);xSr=r(BK,`Note:
Loading a model from its configuration file does `),k6e=n(BK,"STRONG",{});var OMt=s(k6e);$Sr=r(OMt,"not"),OMt.forEach(t),kSr=r(BK,` load the model weights. It only affects the
model\u2019s configuration. Use `),DJ=n(BK,"A",{href:!0});var VMt=s(DJ);SSr=r(VMt,"from_pretrained()"),VMt.forEach(t),RSr=r(BK," to load the model weights."),BK.forEach(t),BSr=i(sA),T(GC.$$.fragment,sA),sA.forEach(t),PSr=i(Yl),Qr=n(Yl,"DIV",{class:!0});var Kl=s(Qr);T(s7.$$.fragment,Kl),ISr=i(Kl),S6e=n(Kl,"P",{});var XMt=s(S6e);qSr=r(XMt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),XMt.forEach(t),NSr=i(Kl),vn=n(Kl,"P",{});var lA=s(vn);jSr=r(lA,"The model class to instantiate is selected based on the "),R6e=n(lA,"CODE",{});var zMt=s(R6e);DSr=r(zMt,"model_type"),zMt.forEach(t),GSr=r(lA,` property of the config object (either
passed as an argument or loaded from `),B6e=n(lA,"CODE",{});var QMt=s(B6e);OSr=r(QMt,"pretrained_model_name_or_path"),QMt.forEach(t),VSr=r(lA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),P6e=n(lA,"CODE",{});var WMt=s(P6e);XSr=r(WMt,"pretrained_model_name_or_path"),WMt.forEach(t),zSr=r(lA,":"),lA.forEach(t),QSr=i(Kl),l7=n(Kl,"UL",{});var Bqe=s(l7);OC=n(Bqe,"LI",{});var LRe=s(OC);I6e=n(LRe,"STRONG",{});var HMt=s(I6e);WSr=r(HMt,"beit"),HMt.forEach(t),HSr=r(LRe," \u2014 "),GJ=n(LRe,"A",{href:!0});var UMt=s(GJ);USr=r(UMt,"FlaxBeitForImageClassification"),UMt.forEach(t),JSr=r(LRe," (BEiT model)"),LRe.forEach(t),YSr=i(Bqe),VC=n(Bqe,"LI",{});var xRe=s(VC);q6e=n(xRe,"STRONG",{});var JMt=s(q6e);KSr=r(JMt,"vit"),JMt.forEach(t),ZSr=r(xRe," \u2014 "),OJ=n(xRe,"A",{href:!0});var YMt=s(OJ);eRr=r(YMt,"FlaxViTForImageClassification"),YMt.forEach(t),oRr=r(xRe," (ViT model)"),xRe.forEach(t),Bqe.forEach(t),rRr=i(Kl),T(XC.$$.fragment,Kl),Kl.forEach(t),Yl.forEach(t),$Pe=i(f),Uc=n(f,"H2",{class:!0});var Pqe=s(Uc);zC=n(Pqe,"A",{id:!0,class:!0,href:!0});var KMt=s(zC);N6e=n(KMt,"SPAN",{});var ZMt=s(N6e);T(i7.$$.fragment,ZMt),ZMt.forEach(t),KMt.forEach(t),tRr=i(Pqe),j6e=n(Pqe,"SPAN",{});var e4t=s(j6e);aRr=r(e4t,"FlaxAutoModelForVision2Seq"),e4t.forEach(t),Pqe.forEach(t),kPe=i(f),Fr=n(f,"DIV",{class:!0});var Zl=s(Fr);T(d7.$$.fragment,Zl),nRr=i(Zl),Jc=n(Zl,"P",{});var PK=s(Jc);sRr=r(PK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),VJ=n(PK,"A",{href:!0});var o4t=s(VJ);lRr=r(o4t,"from_pretrained()"),o4t.forEach(t),iRr=r(PK," class method or the "),XJ=n(PK,"A",{href:!0});var r4t=s(XJ);dRr=r(r4t,"from_config()"),r4t.forEach(t),cRr=r(PK,` class
method.`),PK.forEach(t),fRr=i(Zl),c7=n(Zl,"P",{});var Iqe=s(c7);mRr=r(Iqe,"This class cannot be instantiated directly using "),D6e=n(Iqe,"CODE",{});var t4t=s(D6e);gRr=r(t4t,"__init__()"),t4t.forEach(t),hRr=r(Iqe," (throws an error)."),Iqe.forEach(t),pRr=i(Zl),Qt=n(Zl,"DIV",{class:!0});var iA=s(Qt);T(f7.$$.fragment,iA),uRr=i(iA),G6e=n(iA,"P",{});var a4t=s(G6e);_Rr=r(a4t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),a4t.forEach(t),bRr=i(iA),Yc=n(iA,"P",{});var IK=s(Yc);vRr=r(IK,`Note:
Loading a model from its configuration file does `),O6e=n(IK,"STRONG",{});var n4t=s(O6e);FRr=r(n4t,"not"),n4t.forEach(t),TRr=r(IK,` load the model weights. It only affects the
model\u2019s configuration. Use `),zJ=n(IK,"A",{href:!0});var s4t=s(zJ);MRr=r(s4t,"from_pretrained()"),s4t.forEach(t),ERr=r(IK," to load the model weights."),IK.forEach(t),CRr=i(iA),T(QC.$$.fragment,iA),iA.forEach(t),wRr=i(Zl),Wr=n(Zl,"DIV",{class:!0});var ei=s(Wr);T(m7.$$.fragment,ei),ARr=i(ei),V6e=n(ei,"P",{});var l4t=s(V6e);yRr=r(l4t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),l4t.forEach(t),LRr=i(ei),Fn=n(ei,"P",{});var dA=s(Fn);xRr=r(dA,"The model class to instantiate is selected based on the "),X6e=n(dA,"CODE",{});var i4t=s(X6e);$Rr=r(i4t,"model_type"),i4t.forEach(t),kRr=r(dA,` property of the config object (either
passed as an argument or loaded from `),z6e=n(dA,"CODE",{});var d4t=s(z6e);SRr=r(d4t,"pretrained_model_name_or_path"),d4t.forEach(t),RRr=r(dA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Q6e=n(dA,"CODE",{});var c4t=s(Q6e);BRr=r(c4t,"pretrained_model_name_or_path"),c4t.forEach(t),PRr=r(dA,":"),dA.forEach(t),IRr=i(ei),W6e=n(ei,"UL",{});var f4t=s(W6e);WC=n(f4t,"LI",{});var $Re=s(WC);H6e=n($Re,"STRONG",{});var m4t=s(H6e);qRr=r(m4t,"vision-encoder-decoder"),m4t.forEach(t),NRr=r($Re," \u2014 "),QJ=n($Re,"A",{href:!0});var g4t=s(QJ);jRr=r(g4t,"FlaxVisionEncoderDecoderModel"),g4t.forEach(t),DRr=r($Re," (Vision Encoder decoder model)"),$Re.forEach(t),f4t.forEach(t),GRr=i(ei),T(HC.$$.fragment,ei),ei.forEach(t),Zl.forEach(t),this.h()},h(){c(g,"name","hf:doc:metadata"),c(g,"content",JSON.stringify(pCt)),c(m,"id","auto-classes"),c(m,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m,"href","#auto-classes"),c(p,"class","relative group"),c(Mn,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.AutoConfig"),c(Cn,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.AutoModel"),c(wn,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.AutoTokenizer"),c(li,"href","/docs/transformers/pr_16995/en/model_doc/bert#transformers.BertModel"),c(nf,"id","extending-the-auto-classes"),c(nf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(nf,"href","#extending-the-auto-classes"),c(ii,"class","relative group"),c(lf,"id","transformers.AutoConfig"),c(lf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(lf,"href","#transformers.AutoConfig"),c(di,"class","relative group"),c(kx,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(Sx,"href","/docs/transformers/pr_16995/en/model_doc/albert#transformers.AlbertConfig"),c(Rx,"href","/docs/transformers/pr_16995/en/model_doc/bart#transformers.BartConfig"),c(Bx,"href","/docs/transformers/pr_16995/en/model_doc/beit#transformers.BeitConfig"),c(Px,"href","/docs/transformers/pr_16995/en/model_doc/bert#transformers.BertConfig"),c(Ix,"href","/docs/transformers/pr_16995/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(qx,"href","/docs/transformers/pr_16995/en/model_doc/big_bird#transformers.BigBirdConfig"),c(Nx,"href","/docs/transformers/pr_16995/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(jx,"href","/docs/transformers/pr_16995/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(Dx,"href","/docs/transformers/pr_16995/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(Gx,"href","/docs/transformers/pr_16995/en/model_doc/camembert#transformers.CamembertConfig"),c(Ox,"href","/docs/transformers/pr_16995/en/model_doc/canine#transformers.CanineConfig"),c(Vx,"href","/docs/transformers/pr_16995/en/model_doc/clip#transformers.CLIPConfig"),c(Xx,"href","/docs/transformers/pr_16995/en/model_doc/convbert#transformers.ConvBertConfig"),c(zx,"href","/docs/transformers/pr_16995/en/model_doc/convnext#transformers.ConvNextConfig"),c(Qx,"href","/docs/transformers/pr_16995/en/model_doc/ctrl#transformers.CTRLConfig"),c(Wx,"href","/docs/transformers/pr_16995/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(Hx,"href","/docs/transformers/pr_16995/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(Ux,"href","/docs/transformers/pr_16995/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),c(Jx,"href","/docs/transformers/pr_16995/en/model_doc/deberta#transformers.DebertaConfig"),c(Yx,"href","/docs/transformers/pr_16995/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(Kx,"href","/docs/transformers/pr_16995/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),c(Zx,"href","/docs/transformers/pr_16995/en/model_doc/deit#transformers.DeiTConfig"),c(e$,"href","/docs/transformers/pr_16995/en/model_doc/detr#transformers.DetrConfig"),c(o$,"href","/docs/transformers/pr_16995/en/model_doc/distilbert#transformers.DistilBertConfig"),c(r$,"href","/docs/transformers/pr_16995/en/model_doc/dpr#transformers.DPRConfig"),c(t$,"href","/docs/transformers/pr_16995/en/model_doc/dpt#transformers.DPTConfig"),c(a$,"href","/docs/transformers/pr_16995/en/model_doc/electra#transformers.ElectraConfig"),c(n$,"href","/docs/transformers/pr_16995/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(s$,"href","/docs/transformers/pr_16995/en/model_doc/flaubert#transformers.FlaubertConfig"),c(l$,"href","/docs/transformers/pr_16995/en/model_doc/fnet#transformers.FNetConfig"),c(i$,"href","/docs/transformers/pr_16995/en/model_doc/fsmt#transformers.FSMTConfig"),c(d$,"href","/docs/transformers/pr_16995/en/model_doc/funnel#transformers.FunnelConfig"),c(c$,"href","/docs/transformers/pr_16995/en/model_doc/glpn#transformers.GLPNConfig"),c(f$,"href","/docs/transformers/pr_16995/en/model_doc/gpt2#transformers.GPT2Config"),c(m$,"href","/docs/transformers/pr_16995/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(g$,"href","/docs/transformers/pr_16995/en/model_doc/gptj#transformers.GPTJConfig"),c(h$,"href","/docs/transformers/pr_16995/en/model_doc/hubert#transformers.HubertConfig"),c(p$,"href","/docs/transformers/pr_16995/en/model_doc/ibert#transformers.IBertConfig"),c(u$,"href","/docs/transformers/pr_16995/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(_$,"href","/docs/transformers/pr_16995/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(b$,"href","/docs/transformers/pr_16995/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(v$,"href","/docs/transformers/pr_16995/en/model_doc/led#transformers.LEDConfig"),c(F$,"href","/docs/transformers/pr_16995/en/model_doc/longformer#transformers.LongformerConfig"),c(T$,"href","/docs/transformers/pr_16995/en/model_doc/luke#transformers.LukeConfig"),c(M$,"href","/docs/transformers/pr_16995/en/model_doc/lxmert#transformers.LxmertConfig"),c(E$,"href","/docs/transformers/pr_16995/en/model_doc/m2m_100#transformers.M2M100Config"),c(C$,"href","/docs/transformers/pr_16995/en/model_doc/marian#transformers.MarianConfig"),c(w$,"href","/docs/transformers/pr_16995/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(A$,"href","/docs/transformers/pr_16995/en/model_doc/mbart#transformers.MBartConfig"),c(y$,"href","/docs/transformers/pr_16995/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(L$,"href","/docs/transformers/pr_16995/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(x$,"href","/docs/transformers/pr_16995/en/model_doc/mpnet#transformers.MPNetConfig"),c($$,"href","/docs/transformers/pr_16995/en/model_doc/mt5#transformers.MT5Config"),c(k$,"href","/docs/transformers/pr_16995/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(S$,"href","/docs/transformers/pr_16995/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(R$,"href","/docs/transformers/pr_16995/en/model_doc/pegasus#transformers.PegasusConfig"),c(B$,"href","/docs/transformers/pr_16995/en/model_doc/perceiver#transformers.PerceiverConfig"),c(P$,"href","/docs/transformers/pr_16995/en/model_doc/plbart#transformers.PLBartConfig"),c(I$,"href","/docs/transformers/pr_16995/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(q$,"href","/docs/transformers/pr_16995/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(N$,"href","/docs/transformers/pr_16995/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(j$,"href","/docs/transformers/pr_16995/en/model_doc/rag#transformers.RagConfig"),c(D$,"href","/docs/transformers/pr_16995/en/model_doc/realm#transformers.RealmConfig"),c(G$,"href","/docs/transformers/pr_16995/en/model_doc/reformer#transformers.ReformerConfig"),c(O$,"href","/docs/transformers/pr_16995/en/model_doc/regnet#transformers.RegNetConfig"),c(V$,"href","/docs/transformers/pr_16995/en/model_doc/rembert#transformers.RemBertConfig"),c(X$,"href","/docs/transformers/pr_16995/en/model_doc/resnet#transformers.ResNetConfig"),c(z$,"href","/docs/transformers/pr_16995/en/model_doc/retribert#transformers.RetriBertConfig"),c(Q$,"href","/docs/transformers/pr_16995/en/model_doc/roberta#transformers.RobertaConfig"),c(W$,"href","/docs/transformers/pr_16995/en/model_doc/roformer#transformers.RoFormerConfig"),c(H$,"href","/docs/transformers/pr_16995/en/model_doc/segformer#transformers.SegformerConfig"),c(U$,"href","/docs/transformers/pr_16995/en/model_doc/sew#transformers.SEWConfig"),c(J$,"href","/docs/transformers/pr_16995/en/model_doc/sew-d#transformers.SEWDConfig"),c(Y$,"href","/docs/transformers/pr_16995/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(K$,"href","/docs/transformers/pr_16995/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(Z$,"href","/docs/transformers/pr_16995/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(ek,"href","/docs/transformers/pr_16995/en/model_doc/splinter#transformers.SplinterConfig"),c(ok,"href","/docs/transformers/pr_16995/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(rk,"href","/docs/transformers/pr_16995/en/model_doc/swin#transformers.SwinConfig"),c(tk,"href","/docs/transformers/pr_16995/en/model_doc/t5#transformers.T5Config"),c(ak,"href","/docs/transformers/pr_16995/en/model_doc/tapas#transformers.TapasConfig"),c(nk,"href","/docs/transformers/pr_16995/en/model_doc/bart#transformers.BartConfig"),c(sk,"href","/docs/transformers/pr_16995/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(lk,"href","/docs/transformers/pr_16995/en/model_doc/trocr#transformers.TrOCRConfig"),c(ik,"href","/docs/transformers/pr_16995/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(dk,"href","/docs/transformers/pr_16995/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(ck,"href","/docs/transformers/pr_16995/en/model_doc/van#transformers.VanConfig"),c(fk,"href","/docs/transformers/pr_16995/en/model_doc/vilt#transformers.ViltConfig"),c(mk,"href","/docs/transformers/pr_16995/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(gk,"href","/docs/transformers/pr_16995/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(hk,"href","/docs/transformers/pr_16995/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(pk,"href","/docs/transformers/pr_16995/en/model_doc/vit#transformers.ViTConfig"),c(uk,"href","/docs/transformers/pr_16995/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(_k,"href","/docs/transformers/pr_16995/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(bk,"href","/docs/transformers/pr_16995/en/model_doc/wavlm#transformers.WavLMConfig"),c(vk,"href","/docs/transformers/pr_16995/en/model_doc/xglm#transformers.XGLMConfig"),c(Fk,"href","/docs/transformers/pr_16995/en/model_doc/xlm#transformers.XLMConfig"),c(Tk,"href","/docs/transformers/pr_16995/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(Mk,"href","/docs/transformers/pr_16995/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(Ek,"href","/docs/transformers/pr_16995/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(Ck,"href","/docs/transformers/pr_16995/en/model_doc/xlnet#transformers.XLNetConfig"),c(wk,"href","/docs/transformers/pr_16995/en/model_doc/yoso#transformers.YosoConfig"),c(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ag,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ng,"id","transformers.AutoTokenizer"),c(ng,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ng,"href","#transformers.AutoTokenizer"),c(fi,"class","relative group"),c(Ak,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(yk,"href","/docs/transformers/pr_16995/en/model_doc/albert#transformers.AlbertTokenizer"),c(Lk,"href","/docs/transformers/pr_16995/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(xk,"href","/docs/transformers/pr_16995/en/model_doc/bart#transformers.BartTokenizer"),c($k,"href","/docs/transformers/pr_16995/en/model_doc/bart#transformers.BartTokenizerFast"),c(kk,"href","/docs/transformers/pr_16995/en/model_doc/barthez#transformers.BarthezTokenizer"),c(Sk,"href","/docs/transformers/pr_16995/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(Rk,"href","/docs/transformers/pr_16995/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(Bk,"href","/docs/transformers/pr_16995/en/model_doc/bert#transformers.BertTokenizer"),c(Pk,"href","/docs/transformers/pr_16995/en/model_doc/bert#transformers.BertTokenizerFast"),c(Ik,"href","/docs/transformers/pr_16995/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(qk,"href","/docs/transformers/pr_16995/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(Nk,"href","/docs/transformers/pr_16995/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(jk,"href","/docs/transformers/pr_16995/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(Dk,"href","/docs/transformers/pr_16995/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(Gk,"href","/docs/transformers/pr_16995/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(Ok,"href","/docs/transformers/pr_16995/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(Vk,"href","/docs/transformers/pr_16995/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(Xk,"href","/docs/transformers/pr_16995/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(zk,"href","/docs/transformers/pr_16995/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(Qk,"href","/docs/transformers/pr_16995/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(Wk,"href","/docs/transformers/pr_16995/en/model_doc/camembert#transformers.CamembertTokenizer"),c(Hk,"href","/docs/transformers/pr_16995/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(Uk,"href","/docs/transformers/pr_16995/en/model_doc/canine#transformers.CanineTokenizer"),c(Jk,"href","/docs/transformers/pr_16995/en/model_doc/clip#transformers.CLIPTokenizer"),c(Yk,"href","/docs/transformers/pr_16995/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(Kk,"href","/docs/transformers/pr_16995/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(Zk,"href","/docs/transformers/pr_16995/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(eS,"href","/docs/transformers/pr_16995/en/model_doc/cpm#transformers.CpmTokenizer"),c(oS,"href","/docs/transformers/pr_16995/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(rS,"href","/docs/transformers/pr_16995/en/model_doc/roberta#transformers.RobertaTokenizer"),c(tS,"href","/docs/transformers/pr_16995/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(aS,"href","/docs/transformers/pr_16995/en/model_doc/deberta#transformers.DebertaTokenizer"),c(nS,"href","/docs/transformers/pr_16995/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(sS,"href","/docs/transformers/pr_16995/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(lS,"href","/docs/transformers/pr_16995/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),c(iS,"href","/docs/transformers/pr_16995/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(dS,"href","/docs/transformers/pr_16995/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(cS,"href","/docs/transformers/pr_16995/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(fS,"href","/docs/transformers/pr_16995/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(mS,"href","/docs/transformers/pr_16995/en/model_doc/electra#transformers.ElectraTokenizer"),c(gS,"href","/docs/transformers/pr_16995/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(hS,"href","/docs/transformers/pr_16995/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(pS,"href","/docs/transformers/pr_16995/en/model_doc/fnet#transformers.FNetTokenizer"),c(uS,"href","/docs/transformers/pr_16995/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(_S,"href","/docs/transformers/pr_16995/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(bS,"href","/docs/transformers/pr_16995/en/model_doc/funnel#transformers.FunnelTokenizer"),c(vS,"href","/docs/transformers/pr_16995/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(FS,"href","/docs/transformers/pr_16995/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(TS,"href","/docs/transformers/pr_16995/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(MS,"href","/docs/transformers/pr_16995/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(ES,"href","/docs/transformers/pr_16995/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(CS,"href","/docs/transformers/pr_16995/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(wS,"href","/docs/transformers/pr_16995/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(AS,"href","/docs/transformers/pr_16995/en/model_doc/herbert#transformers.HerbertTokenizer"),c(yS,"href","/docs/transformers/pr_16995/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(LS,"href","/docs/transformers/pr_16995/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(xS,"href","/docs/transformers/pr_16995/en/model_doc/roberta#transformers.RobertaTokenizer"),c($S,"href","/docs/transformers/pr_16995/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(kS,"href","/docs/transformers/pr_16995/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(SS,"href","/docs/transformers/pr_16995/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(RS,"href","/docs/transformers/pr_16995/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(BS,"href","/docs/transformers/pr_16995/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(PS,"href","/docs/transformers/pr_16995/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(IS,"href","/docs/transformers/pr_16995/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(qS,"href","/docs/transformers/pr_16995/en/model_doc/led#transformers.LEDTokenizer"),c(NS,"href","/docs/transformers/pr_16995/en/model_doc/led#transformers.LEDTokenizerFast"),c(jS,"href","/docs/transformers/pr_16995/en/model_doc/longformer#transformers.LongformerTokenizer"),c(DS,"href","/docs/transformers/pr_16995/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(GS,"href","/docs/transformers/pr_16995/en/model_doc/luke#transformers.LukeTokenizer"),c(OS,"href","/docs/transformers/pr_16995/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(VS,"href","/docs/transformers/pr_16995/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(XS,"href","/docs/transformers/pr_16995/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(zS,"href","/docs/transformers/pr_16995/en/model_doc/marian#transformers.MarianTokenizer"),c(QS,"href","/docs/transformers/pr_16995/en/model_doc/mbart#transformers.MBartTokenizer"),c(WS,"href","/docs/transformers/pr_16995/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(HS,"href","/docs/transformers/pr_16995/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(US,"href","/docs/transformers/pr_16995/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(JS,"href","/docs/transformers/pr_16995/en/model_doc/bert#transformers.BertTokenizer"),c(YS,"href","/docs/transformers/pr_16995/en/model_doc/bert#transformers.BertTokenizerFast"),c(KS,"href","/docs/transformers/pr_16995/en/model_doc/mluke#transformers.MLukeTokenizer"),c(ZS,"href","/docs/transformers/pr_16995/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(eR,"href","/docs/transformers/pr_16995/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(oR,"href","/docs/transformers/pr_16995/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(rR,"href","/docs/transformers/pr_16995/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(tR,"href","/docs/transformers/pr_16995/en/model_doc/mt5#transformers.T5Tokenizer"),c(aR,"href","/docs/transformers/pr_16995/en/model_doc/mt5#transformers.T5TokenizerFast"),c(nR,"href","/docs/transformers/pr_16995/en/model_doc/albert#transformers.AlbertTokenizer"),c(sR,"href","/docs/transformers/pr_16995/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(lR,"href","/docs/transformers/pr_16995/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(iR,"href","/docs/transformers/pr_16995/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(dR,"href","/docs/transformers/pr_16995/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(cR,"href","/docs/transformers/pr_16995/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(fR,"href","/docs/transformers/pr_16995/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(mR,"href","/docs/transformers/pr_16995/en/model_doc/phobert#transformers.PhobertTokenizer"),c(gR,"href","/docs/transformers/pr_16995/en/model_doc/plbart#transformers.PLBartTokenizer"),c(hR,"href","/docs/transformers/pr_16995/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(pR,"href","/docs/transformers/pr_16995/en/model_doc/bert#transformers.BertTokenizer"),c(uR,"href","/docs/transformers/pr_16995/en/model_doc/bert#transformers.BertTokenizerFast"),c(_R,"href","/docs/transformers/pr_16995/en/model_doc/rag#transformers.RagTokenizer"),c(bR,"href","/docs/transformers/pr_16995/en/model_doc/realm#transformers.RealmTokenizer"),c(vR,"href","/docs/transformers/pr_16995/en/model_doc/realm#transformers.RealmTokenizerFast"),c(FR,"href","/docs/transformers/pr_16995/en/model_doc/reformer#transformers.ReformerTokenizer"),c(TR,"href","/docs/transformers/pr_16995/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(MR,"href","/docs/transformers/pr_16995/en/model_doc/rembert#transformers.RemBertTokenizer"),c(ER,"href","/docs/transformers/pr_16995/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(CR,"href","/docs/transformers/pr_16995/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(wR,"href","/docs/transformers/pr_16995/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(AR,"href","/docs/transformers/pr_16995/en/model_doc/roberta#transformers.RobertaTokenizer"),c(yR,"href","/docs/transformers/pr_16995/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(LR,"href","/docs/transformers/pr_16995/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(xR,"href","/docs/transformers/pr_16995/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c($R,"href","/docs/transformers/pr_16995/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(kR,"href","/docs/transformers/pr_16995/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(SR,"href","/docs/transformers/pr_16995/en/model_doc/splinter#transformers.SplinterTokenizer"),c(RR,"href","/docs/transformers/pr_16995/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(BR,"href","/docs/transformers/pr_16995/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(PR,"href","/docs/transformers/pr_16995/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(IR,"href","/docs/transformers/pr_16995/en/model_doc/mt5#transformers.T5Tokenizer"),c(qR,"href","/docs/transformers/pr_16995/en/model_doc/mt5#transformers.T5TokenizerFast"),c(NR,"href","/docs/transformers/pr_16995/en/model_doc/tapas#transformers.TapasTokenizer"),c(jR,"href","/docs/transformers/pr_16995/en/model_doc/tapex#transformers.TapexTokenizer"),c(DR,"href","/docs/transformers/pr_16995/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(GR,"href","/docs/transformers/pr_16995/en/model_doc/bert#transformers.BertTokenizer"),c(OR,"href","/docs/transformers/pr_16995/en/model_doc/bert#transformers.BertTokenizerFast"),c(VR,"href","/docs/transformers/pr_16995/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(XR,"href","/docs/transformers/pr_16995/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(zR,"href","/docs/transformers/pr_16995/en/model_doc/xglm#transformers.XGLMTokenizer"),c(QR,"href","/docs/transformers/pr_16995/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(WR,"href","/docs/transformers/pr_16995/en/model_doc/xlm#transformers.XLMTokenizer"),c(HR,"href","/docs/transformers/pr_16995/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(UR,"href","/docs/transformers/pr_16995/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(JR,"href","/docs/transformers/pr_16995/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(YR,"href","/docs/transformers/pr_16995/en/model_doc/roberta#transformers.RobertaTokenizer"),c(KR,"href","/docs/transformers/pr_16995/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(ZR,"href","/docs/transformers/pr_16995/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(eB,"href","/docs/transformers/pr_16995/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(oB,"href","/docs/transformers/pr_16995/en/model_doc/albert#transformers.AlbertTokenizer"),c(rB,"href","/docs/transformers/pr_16995/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ig,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qg,"id","transformers.AutoFeatureExtractor"),c(qg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(qg,"href","#transformers.AutoFeatureExtractor"),c(mi,"class","relative group"),c(tB,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(aB,"href","/docs/transformers/pr_16995/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(nB,"href","/docs/transformers/pr_16995/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(sB,"href","/docs/transformers/pr_16995/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(lB,"href","/docs/transformers/pr_16995/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(iB,"href","/docs/transformers/pr_16995/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(dB,"href","/docs/transformers/pr_16995/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(cB,"href","/docs/transformers/pr_16995/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(fB,"href","/docs/transformers/pr_16995/en/model_doc/dpt#transformers.DPTFeatureExtractor"),c(mB,"href","/docs/transformers/pr_16995/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),c(gB,"href","/docs/transformers/pr_16995/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(hB,"href","/docs/transformers/pr_16995/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(pB,"href","/docs/transformers/pr_16995/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(uB,"href","/docs/transformers/pr_16995/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(_B,"href","/docs/transformers/pr_16995/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(bB,"href","/docs/transformers/pr_16995/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(vB,"href","/docs/transformers/pr_16995/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(FB,"href","/docs/transformers/pr_16995/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(TB,"href","/docs/transformers/pr_16995/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(MB,"href","/docs/transformers/pr_16995/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(EB,"href","/docs/transformers/pr_16995/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(CB,"href","/docs/transformers/pr_16995/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(wB,"href","/docs/transformers/pr_16995/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(AB,"href","/docs/transformers/pr_16995/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(Xe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ch,"id","transformers.AutoProcessor"),c(ch,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ch,"href","#transformers.AutoProcessor"),c(gi,"class","relative group"),c(yB,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(LB,"href","/docs/transformers/pr_16995/en/model_doc/clip#transformers.CLIPProcessor"),c(xB,"href","/docs/transformers/pr_16995/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c($B,"href","/docs/transformers/pr_16995/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(kB,"href","/docs/transformers/pr_16995/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(SB,"href","/docs/transformers/pr_16995/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(RB,"href","/docs/transformers/pr_16995/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(BB,"href","/docs/transformers/pr_16995/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(PB,"href","/docs/transformers/pr_16995/en/model_doc/trocr#transformers.TrOCRProcessor"),c(IB,"href","/docs/transformers/pr_16995/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(qB,"href","/docs/transformers/pr_16995/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(NB,"href","/docs/transformers/pr_16995/en/model_doc/vilt#transformers.ViltProcessor"),c(jB,"href","/docs/transformers/pr_16995/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(DB,"href","/docs/transformers/pr_16995/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(GB,"href","/docs/transformers/pr_16995/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lh,"id","transformers.AutoModel"),c(Lh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Lh,"href","#transformers.AutoModel"),c(pi,"class","relative group"),c(OB,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(VB,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(XB,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zB,"href","/docs/transformers/pr_16995/en/model_doc/albert#transformers.AlbertModel"),c(QB,"href","/docs/transformers/pr_16995/en/model_doc/bart#transformers.BartModel"),c(WB,"href","/docs/transformers/pr_16995/en/model_doc/beit#transformers.BeitModel"),c(HB,"href","/docs/transformers/pr_16995/en/model_doc/bert#transformers.BertModel"),c(UB,"href","/docs/transformers/pr_16995/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(JB,"href","/docs/transformers/pr_16995/en/model_doc/big_bird#transformers.BigBirdModel"),c(YB,"href","/docs/transformers/pr_16995/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(KB,"href","/docs/transformers/pr_16995/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(ZB,"href","/docs/transformers/pr_16995/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(eP,"href","/docs/transformers/pr_16995/en/model_doc/camembert#transformers.CamembertModel"),c(oP,"href","/docs/transformers/pr_16995/en/model_doc/canine#transformers.CanineModel"),c(rP,"href","/docs/transformers/pr_16995/en/model_doc/clip#transformers.CLIPModel"),c(tP,"href","/docs/transformers/pr_16995/en/model_doc/convbert#transformers.ConvBertModel"),c(aP,"href","/docs/transformers/pr_16995/en/model_doc/convnext#transformers.ConvNextModel"),c(nP,"href","/docs/transformers/pr_16995/en/model_doc/ctrl#transformers.CTRLModel"),c(sP,"href","/docs/transformers/pr_16995/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(lP,"href","/docs/transformers/pr_16995/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(iP,"href","/docs/transformers/pr_16995/en/model_doc/data2vec#transformers.Data2VecVisionModel"),c(dP,"href","/docs/transformers/pr_16995/en/model_doc/deberta#transformers.DebertaModel"),c(cP,"href","/docs/transformers/pr_16995/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(fP,"href","/docs/transformers/pr_16995/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),c(mP,"href","/docs/transformers/pr_16995/en/model_doc/deit#transformers.DeiTModel"),c(gP,"href","/docs/transformers/pr_16995/en/model_doc/detr#transformers.DetrModel"),c(hP,"href","/docs/transformers/pr_16995/en/model_doc/distilbert#transformers.DistilBertModel"),c(pP,"href","/docs/transformers/pr_16995/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(uP,"href","/docs/transformers/pr_16995/en/model_doc/dpt#transformers.DPTModel"),c(_P,"href","/docs/transformers/pr_16995/en/model_doc/electra#transformers.ElectraModel"),c(bP,"href","/docs/transformers/pr_16995/en/model_doc/flaubert#transformers.FlaubertModel"),c(vP,"href","/docs/transformers/pr_16995/en/model_doc/fnet#transformers.FNetModel"),c(FP,"href","/docs/transformers/pr_16995/en/model_doc/fsmt#transformers.FSMTModel"),c(TP,"href","/docs/transformers/pr_16995/en/model_doc/funnel#transformers.FunnelModel"),c(MP,"href","/docs/transformers/pr_16995/en/model_doc/funnel#transformers.FunnelBaseModel"),c(EP,"href","/docs/transformers/pr_16995/en/model_doc/glpn#transformers.GLPNModel"),c(CP,"href","/docs/transformers/pr_16995/en/model_doc/gpt2#transformers.GPT2Model"),c(wP,"href","/docs/transformers/pr_16995/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(AP,"href","/docs/transformers/pr_16995/en/model_doc/gptj#transformers.GPTJModel"),c(yP,"href","/docs/transformers/pr_16995/en/model_doc/hubert#transformers.HubertModel"),c(LP,"href","/docs/transformers/pr_16995/en/model_doc/ibert#transformers.IBertModel"),c(xP,"href","/docs/transformers/pr_16995/en/model_doc/imagegpt#transformers.ImageGPTModel"),c($P,"href","/docs/transformers/pr_16995/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(kP,"href","/docs/transformers/pr_16995/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(SP,"href","/docs/transformers/pr_16995/en/model_doc/led#transformers.LEDModel"),c(RP,"href","/docs/transformers/pr_16995/en/model_doc/longformer#transformers.LongformerModel"),c(BP,"href","/docs/transformers/pr_16995/en/model_doc/luke#transformers.LukeModel"),c(PP,"href","/docs/transformers/pr_16995/en/model_doc/lxmert#transformers.LxmertModel"),c(IP,"href","/docs/transformers/pr_16995/en/model_doc/m2m_100#transformers.M2M100Model"),c(qP,"href","/docs/transformers/pr_16995/en/model_doc/marian#transformers.MarianModel"),c(NP,"href","/docs/transformers/pr_16995/en/model_doc/maskformer#transformers.MaskFormerModel"),c(jP,"href","/docs/transformers/pr_16995/en/model_doc/mbart#transformers.MBartModel"),c(DP,"href","/docs/transformers/pr_16995/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(GP,"href","/docs/transformers/pr_16995/en/model_doc/mobilebert#transformers.MobileBertModel"),c(OP,"href","/docs/transformers/pr_16995/en/model_doc/mpnet#transformers.MPNetModel"),c(VP,"href","/docs/transformers/pr_16995/en/model_doc/mt5#transformers.MT5Model"),c(XP,"href","/docs/transformers/pr_16995/en/model_doc/nystromformer#transformers.NystromformerModel"),c(zP,"href","/docs/transformers/pr_16995/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(QP,"href","/docs/transformers/pr_16995/en/model_doc/pegasus#transformers.PegasusModel"),c(WP,"href","/docs/transformers/pr_16995/en/model_doc/perceiver#transformers.PerceiverModel"),c(HP,"href","/docs/transformers/pr_16995/en/model_doc/plbart#transformers.PLBartModel"),c(UP,"href","/docs/transformers/pr_16995/en/model_doc/poolformer#transformers.PoolFormerModel"),c(JP,"href","/docs/transformers/pr_16995/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(YP,"href","/docs/transformers/pr_16995/en/model_doc/qdqbert#transformers.QDQBertModel"),c(KP,"href","/docs/transformers/pr_16995/en/model_doc/reformer#transformers.ReformerModel"),c(ZP,"href","/docs/transformers/pr_16995/en/model_doc/regnet#transformers.RegNetModel"),c(eI,"href","/docs/transformers/pr_16995/en/model_doc/rembert#transformers.RemBertModel"),c(oI,"href","/docs/transformers/pr_16995/en/model_doc/resnet#transformers.ResNetModel"),c(rI,"href","/docs/transformers/pr_16995/en/model_doc/retribert#transformers.RetriBertModel"),c(tI,"href","/docs/transformers/pr_16995/en/model_doc/roberta#transformers.RobertaModel"),c(aI,"href","/docs/transformers/pr_16995/en/model_doc/roformer#transformers.RoFormerModel"),c(nI,"href","/docs/transformers/pr_16995/en/model_doc/segformer#transformers.SegformerModel"),c(sI,"href","/docs/transformers/pr_16995/en/model_doc/sew#transformers.SEWModel"),c(lI,"href","/docs/transformers/pr_16995/en/model_doc/sew-d#transformers.SEWDModel"),c(iI,"href","/docs/transformers/pr_16995/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(dI,"href","/docs/transformers/pr_16995/en/model_doc/splinter#transformers.SplinterModel"),c(cI,"href","/docs/transformers/pr_16995/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(fI,"href","/docs/transformers/pr_16995/en/model_doc/swin#transformers.SwinModel"),c(mI,"href","/docs/transformers/pr_16995/en/model_doc/t5#transformers.T5Model"),c(gI,"href","/docs/transformers/pr_16995/en/model_doc/tapas#transformers.TapasModel"),c(hI,"href","/docs/transformers/pr_16995/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(pI,"href","/docs/transformers/pr_16995/en/model_doc/unispeech#transformers.UniSpeechModel"),c(uI,"href","/docs/transformers/pr_16995/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(_I,"href","/docs/transformers/pr_16995/en/model_doc/van#transformers.VanModel"),c(bI,"href","/docs/transformers/pr_16995/en/model_doc/vilt#transformers.ViltModel"),c(vI,"href","/docs/transformers/pr_16995/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(FI,"href","/docs/transformers/pr_16995/en/model_doc/visual_bert#transformers.VisualBertModel"),c(TI,"href","/docs/transformers/pr_16995/en/model_doc/vit#transformers.ViTModel"),c(MI,"href","/docs/transformers/pr_16995/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(EI,"href","/docs/transformers/pr_16995/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(CI,"href","/docs/transformers/pr_16995/en/model_doc/wavlm#transformers.WavLMModel"),c(wI,"href","/docs/transformers/pr_16995/en/model_doc/xglm#transformers.XGLMModel"),c(AI,"href","/docs/transformers/pr_16995/en/model_doc/xlm#transformers.XLMModel"),c(yI,"href","/docs/transformers/pr_16995/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(LI,"href","/docs/transformers/pr_16995/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(xI,"href","/docs/transformers/pr_16995/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c($I,"href","/docs/transformers/pr_16995/en/model_doc/xlnet#transformers.XLNetModel"),c(kI,"href","/docs/transformers/pr_16995/en/model_doc/yoso#transformers.YosoModel"),c(Qe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_u,"id","transformers.AutoModelForPreTraining"),c(_u,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_u,"href","#transformers.AutoModelForPreTraining"),c(bi,"class","relative group"),c(SI,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(RI,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(BI,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PI,"href","/docs/transformers/pr_16995/en/model_doc/albert#transformers.AlbertForPreTraining"),c(II,"href","/docs/transformers/pr_16995/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(qI,"href","/docs/transformers/pr_16995/en/model_doc/bert#transformers.BertForPreTraining"),c(NI,"href","/docs/transformers/pr_16995/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(jI,"href","/docs/transformers/pr_16995/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(DI,"href","/docs/transformers/pr_16995/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(GI,"href","/docs/transformers/pr_16995/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(OI,"href","/docs/transformers/pr_16995/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(VI,"href","/docs/transformers/pr_16995/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(XI,"href","/docs/transformers/pr_16995/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(zI,"href","/docs/transformers/pr_16995/en/model_doc/electra#transformers.ElectraForPreTraining"),c(QI,"href","/docs/transformers/pr_16995/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(WI,"href","/docs/transformers/pr_16995/en/model_doc/fnet#transformers.FNetForPreTraining"),c(HI,"href","/docs/transformers/pr_16995/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(UI,"href","/docs/transformers/pr_16995/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(JI,"href","/docs/transformers/pr_16995/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(YI,"href","/docs/transformers/pr_16995/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(KI,"href","/docs/transformers/pr_16995/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(ZI,"href","/docs/transformers/pr_16995/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(eq,"href","/docs/transformers/pr_16995/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(oq,"href","/docs/transformers/pr_16995/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(rq,"href","/docs/transformers/pr_16995/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(tq,"href","/docs/transformers/pr_16995/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(aq,"href","/docs/transformers/pr_16995/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(nq,"href","/docs/transformers/pr_16995/en/model_doc/retribert#transformers.RetriBertModel"),c(sq,"href","/docs/transformers/pr_16995/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(lq,"href","/docs/transformers/pr_16995/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(iq,"href","/docs/transformers/pr_16995/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(dq,"href","/docs/transformers/pr_16995/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(cq,"href","/docs/transformers/pr_16995/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(fq,"href","/docs/transformers/pr_16995/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(mq,"href","/docs/transformers/pr_16995/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(gq,"href","/docs/transformers/pr_16995/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(hq,"href","/docs/transformers/pr_16995/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(pq,"href","/docs/transformers/pr_16995/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(uq,"href","/docs/transformers/pr_16995/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(_q,"href","/docs/transformers/pr_16995/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(bq,"href","/docs/transformers/pr_16995/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(vq,"href","/docs/transformers/pr_16995/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(We,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(s_,"id","transformers.AutoModelForCausalLM"),c(s_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(s_,"href","#transformers.AutoModelForCausalLM"),c(Ti,"class","relative group"),c(Fq,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tq,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Mq,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Eq,"href","/docs/transformers/pr_16995/en/model_doc/bart#transformers.BartForCausalLM"),c(Cq,"href","/docs/transformers/pr_16995/en/model_doc/bert#transformers.BertLMHeadModel"),c(wq,"href","/docs/transformers/pr_16995/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(Aq,"href","/docs/transformers/pr_16995/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(yq,"href","/docs/transformers/pr_16995/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(Lq,"href","/docs/transformers/pr_16995/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(xq,"href","/docs/transformers/pr_16995/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c($q,"href","/docs/transformers/pr_16995/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(kq,"href","/docs/transformers/pr_16995/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(Sq,"href","/docs/transformers/pr_16995/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(Rq,"href","/docs/transformers/pr_16995/en/model_doc/electra#transformers.ElectraForCausalLM"),c(Bq,"href","/docs/transformers/pr_16995/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(Pq,"href","/docs/transformers/pr_16995/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(Iq,"href","/docs/transformers/pr_16995/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(qq,"href","/docs/transformers/pr_16995/en/model_doc/marian#transformers.MarianForCausalLM"),c(Nq,"href","/docs/transformers/pr_16995/en/model_doc/mbart#transformers.MBartForCausalLM"),c(jq,"href","/docs/transformers/pr_16995/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(Dq,"href","/docs/transformers/pr_16995/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(Gq,"href","/docs/transformers/pr_16995/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(Oq,"href","/docs/transformers/pr_16995/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(Vq,"href","/docs/transformers/pr_16995/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(Xq,"href","/docs/transformers/pr_16995/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(zq,"href","/docs/transformers/pr_16995/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(Qq,"href","/docs/transformers/pr_16995/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(Wq,"href","/docs/transformers/pr_16995/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(Hq,"href","/docs/transformers/pr_16995/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(Uq,"href","/docs/transformers/pr_16995/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(Jq,"href","/docs/transformers/pr_16995/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(Yq,"href","/docs/transformers/pr_16995/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(Kq,"href","/docs/transformers/pr_16995/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(Zq,"href","/docs/transformers/pr_16995/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(eN,"href","/docs/transformers/pr_16995/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(oN,"href","/docs/transformers/pr_16995/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(rN,"href","/docs/transformers/pr_16995/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(tN,"href","/docs/transformers/pr_16995/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(He,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(z_,"id","transformers.AutoModelForMaskedLM"),c(z_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(z_,"href","#transformers.AutoModelForMaskedLM"),c(Ci,"class","relative group"),c(aN,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nN,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(sN,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lN,"href","/docs/transformers/pr_16995/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(iN,"href","/docs/transformers/pr_16995/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(dN,"href","/docs/transformers/pr_16995/en/model_doc/bert#transformers.BertForMaskedLM"),c(cN,"href","/docs/transformers/pr_16995/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(fN,"href","/docs/transformers/pr_16995/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(mN,"href","/docs/transformers/pr_16995/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(gN,"href","/docs/transformers/pr_16995/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(hN,"href","/docs/transformers/pr_16995/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(pN,"href","/docs/transformers/pr_16995/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(uN,"href","/docs/transformers/pr_16995/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(_N,"href","/docs/transformers/pr_16995/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(bN,"href","/docs/transformers/pr_16995/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(vN,"href","/docs/transformers/pr_16995/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(FN,"href","/docs/transformers/pr_16995/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(TN,"href","/docs/transformers/pr_16995/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(MN,"href","/docs/transformers/pr_16995/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(EN,"href","/docs/transformers/pr_16995/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(CN,"href","/docs/transformers/pr_16995/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(wN,"href","/docs/transformers/pr_16995/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(AN,"href","/docs/transformers/pr_16995/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(yN,"href","/docs/transformers/pr_16995/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(LN,"href","/docs/transformers/pr_16995/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(xN,"href","/docs/transformers/pr_16995/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c($N,"href","/docs/transformers/pr_16995/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(kN,"href","/docs/transformers/pr_16995/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(SN,"href","/docs/transformers/pr_16995/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(RN,"href","/docs/transformers/pr_16995/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(BN,"href","/docs/transformers/pr_16995/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(PN,"href","/docs/transformers/pr_16995/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(IN,"href","/docs/transformers/pr_16995/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(qN,"href","/docs/transformers/pr_16995/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(NN,"href","/docs/transformers/pr_16995/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(jN,"href","/docs/transformers/pr_16995/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(DN,"href","/docs/transformers/pr_16995/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($1,"id","transformers.AutoModelForSeq2SeqLM"),c($1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($1,"href","#transformers.AutoModelForSeq2SeqLM"),c(yi,"class","relative group"),c(GN,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ON,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(VN,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XN,"href","/docs/transformers/pr_16995/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(zN,"href","/docs/transformers/pr_16995/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(QN,"href","/docs/transformers/pr_16995/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(WN,"href","/docs/transformers/pr_16995/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(HN,"href","/docs/transformers/pr_16995/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(UN,"href","/docs/transformers/pr_16995/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(JN,"href","/docs/transformers/pr_16995/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(YN,"href","/docs/transformers/pr_16995/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(KN,"href","/docs/transformers/pr_16995/en/model_doc/marian#transformers.MarianMTModel"),c(ZN,"href","/docs/transformers/pr_16995/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(ej,"href","/docs/transformers/pr_16995/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(oj,"href","/docs/transformers/pr_16995/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(rj,"href","/docs/transformers/pr_16995/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(tj,"href","/docs/transformers/pr_16995/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(aj,"href","/docs/transformers/pr_16995/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(nj,"href","/docs/transformers/pr_16995/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(sj,"href","/docs/transformers/pr_16995/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Y1,"id","transformers.AutoModelForSequenceClassification"),c(Y1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Y1,"href","#transformers.AutoModelForSequenceClassification"),c($i,"class","relative group"),c(lj,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ij,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(dj,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cj,"href","/docs/transformers/pr_16995/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(fj,"href","/docs/transformers/pr_16995/en/model_doc/bart#transformers.BartForSequenceClassification"),c(mj,"href","/docs/transformers/pr_16995/en/model_doc/bert#transformers.BertForSequenceClassification"),c(gj,"href","/docs/transformers/pr_16995/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(hj,"href","/docs/transformers/pr_16995/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(pj,"href","/docs/transformers/pr_16995/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(uj,"href","/docs/transformers/pr_16995/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(_j,"href","/docs/transformers/pr_16995/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(bj,"href","/docs/transformers/pr_16995/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(vj,"href","/docs/transformers/pr_16995/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(Fj,"href","/docs/transformers/pr_16995/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(Tj,"href","/docs/transformers/pr_16995/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(Mj,"href","/docs/transformers/pr_16995/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(Ej,"href","/docs/transformers/pr_16995/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(Cj,"href","/docs/transformers/pr_16995/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(wj,"href","/docs/transformers/pr_16995/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(Aj,"href","/docs/transformers/pr_16995/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(yj,"href","/docs/transformers/pr_16995/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(Lj,"href","/docs/transformers/pr_16995/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(xj,"href","/docs/transformers/pr_16995/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c($j,"href","/docs/transformers/pr_16995/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(kj,"href","/docs/transformers/pr_16995/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(Sj,"href","/docs/transformers/pr_16995/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(Rj,"href","/docs/transformers/pr_16995/en/model_doc/led#transformers.LEDForSequenceClassification"),c(Bj,"href","/docs/transformers/pr_16995/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(Pj,"href","/docs/transformers/pr_16995/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(Ij,"href","/docs/transformers/pr_16995/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(qj,"href","/docs/transformers/pr_16995/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(Nj,"href","/docs/transformers/pr_16995/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(jj,"href","/docs/transformers/pr_16995/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(Dj,"href","/docs/transformers/pr_16995/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(Gj,"href","/docs/transformers/pr_16995/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(Oj,"href","/docs/transformers/pr_16995/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(Vj,"href","/docs/transformers/pr_16995/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(Xj,"href","/docs/transformers/pr_16995/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(zj,"href","/docs/transformers/pr_16995/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(Qj,"href","/docs/transformers/pr_16995/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(Wj,"href","/docs/transformers/pr_16995/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(Hj,"href","/docs/transformers/pr_16995/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(Uj,"href","/docs/transformers/pr_16995/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(Jj,"href","/docs/transformers/pr_16995/en/model_doc/bart#transformers.BartForSequenceClassification"),c(Yj,"href","/docs/transformers/pr_16995/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(Kj,"href","/docs/transformers/pr_16995/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(Zj,"href","/docs/transformers/pr_16995/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(eD,"href","/docs/transformers/pr_16995/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(oD,"href","/docs/transformers/pr_16995/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(rD,"href","/docs/transformers/pr_16995/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(H9,"id","transformers.AutoModelForMultipleChoice"),c(H9,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(H9,"href","#transformers.AutoModelForMultipleChoice"),c(Ri,"class","relative group"),c(tD,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(aD,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(nD,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(at,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sD,"href","/docs/transformers/pr_16995/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(lD,"href","/docs/transformers/pr_16995/en/model_doc/bert#transformers.BertForMultipleChoice"),c(iD,"href","/docs/transformers/pr_16995/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(dD,"href","/docs/transformers/pr_16995/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(cD,"href","/docs/transformers/pr_16995/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(fD,"href","/docs/transformers/pr_16995/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(mD,"href","/docs/transformers/pr_16995/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(gD,"href","/docs/transformers/pr_16995/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(hD,"href","/docs/transformers/pr_16995/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(pD,"href","/docs/transformers/pr_16995/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(uD,"href","/docs/transformers/pr_16995/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(_D,"href","/docs/transformers/pr_16995/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(bD,"href","/docs/transformers/pr_16995/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(vD,"href","/docs/transformers/pr_16995/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(FD,"href","/docs/transformers/pr_16995/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(TD,"href","/docs/transformers/pr_16995/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(MD,"href","/docs/transformers/pr_16995/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(ED,"href","/docs/transformers/pr_16995/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(CD,"href","/docs/transformers/pr_16995/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(wD,"href","/docs/transformers/pr_16995/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(AD,"href","/docs/transformers/pr_16995/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(yD,"href","/docs/transformers/pr_16995/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(LD,"href","/docs/transformers/pr_16995/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(xD,"href","/docs/transformers/pr_16995/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c($D,"href","/docs/transformers/pr_16995/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(kD,"href","/docs/transformers/pr_16995/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(SD,"href","/docs/transformers/pr_16995/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(RD,"href","/docs/transformers/pr_16995/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ab,"id","transformers.AutoModelForNextSentencePrediction"),c(Ab,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ab,"href","#transformers.AutoModelForNextSentencePrediction"),c(Ii,"class","relative group"),c(BD,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(PD,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ID,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qD,"href","/docs/transformers/pr_16995/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(ND,"href","/docs/transformers/pr_16995/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(jD,"href","/docs/transformers/pr_16995/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(DD,"href","/docs/transformers/pr_16995/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(GD,"href","/docs/transformers/pr_16995/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Pb,"id","transformers.AutoModelForTokenClassification"),c(Pb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Pb,"href","#transformers.AutoModelForTokenClassification"),c(ji,"class","relative group"),c(OD,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(VD,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(XD,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(st,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zD,"href","/docs/transformers/pr_16995/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(QD,"href","/docs/transformers/pr_16995/en/model_doc/bert#transformers.BertForTokenClassification"),c(WD,"href","/docs/transformers/pr_16995/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(HD,"href","/docs/transformers/pr_16995/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(UD,"href","/docs/transformers/pr_16995/en/model_doc/canine#transformers.CanineForTokenClassification"),c(JD,"href","/docs/transformers/pr_16995/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(YD,"href","/docs/transformers/pr_16995/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(KD,"href","/docs/transformers/pr_16995/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(ZD,"href","/docs/transformers/pr_16995/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(eG,"href","/docs/transformers/pr_16995/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(oG,"href","/docs/transformers/pr_16995/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(rG,"href","/docs/transformers/pr_16995/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(tG,"href","/docs/transformers/pr_16995/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(aG,"href","/docs/transformers/pr_16995/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(nG,"href","/docs/transformers/pr_16995/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(sG,"href","/docs/transformers/pr_16995/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(lG,"href","/docs/transformers/pr_16995/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(iG,"href","/docs/transformers/pr_16995/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(dG,"href","/docs/transformers/pr_16995/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(cG,"href","/docs/transformers/pr_16995/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(fG,"href","/docs/transformers/pr_16995/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(mG,"href","/docs/transformers/pr_16995/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(gG,"href","/docs/transformers/pr_16995/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(hG,"href","/docs/transformers/pr_16995/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(pG,"href","/docs/transformers/pr_16995/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(uG,"href","/docs/transformers/pr_16995/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(_G,"href","/docs/transformers/pr_16995/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(bG,"href","/docs/transformers/pr_16995/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(vG,"href","/docs/transformers/pr_16995/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(FG,"href","/docs/transformers/pr_16995/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(TG,"href","/docs/transformers/pr_16995/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(MG,"href","/docs/transformers/pr_16995/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(EG,"href","/docs/transformers/pr_16995/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(b2,"id","transformers.AutoModelForQuestionAnswering"),c(b2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(b2,"href","#transformers.AutoModelForQuestionAnswering"),c(Oi,"class","relative group"),c(CG,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wG,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(AG,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yG,"href","/docs/transformers/pr_16995/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(LG,"href","/docs/transformers/pr_16995/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(xG,"href","/docs/transformers/pr_16995/en/model_doc/bert#transformers.BertForQuestionAnswering"),c($G,"href","/docs/transformers/pr_16995/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(kG,"href","/docs/transformers/pr_16995/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(SG,"href","/docs/transformers/pr_16995/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(RG,"href","/docs/transformers/pr_16995/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(BG,"href","/docs/transformers/pr_16995/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(PG,"href","/docs/transformers/pr_16995/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(IG,"href","/docs/transformers/pr_16995/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(qG,"href","/docs/transformers/pr_16995/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(NG,"href","/docs/transformers/pr_16995/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(jG,"href","/docs/transformers/pr_16995/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(DG,"href","/docs/transformers/pr_16995/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(GG,"href","/docs/transformers/pr_16995/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(OG,"href","/docs/transformers/pr_16995/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(VG,"href","/docs/transformers/pr_16995/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(XG,"href","/docs/transformers/pr_16995/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(zG,"href","/docs/transformers/pr_16995/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(QG,"href","/docs/transformers/pr_16995/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(WG,"href","/docs/transformers/pr_16995/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(HG,"href","/docs/transformers/pr_16995/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(UG,"href","/docs/transformers/pr_16995/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(JG,"href","/docs/transformers/pr_16995/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(YG,"href","/docs/transformers/pr_16995/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(KG,"href","/docs/transformers/pr_16995/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(ZG,"href","/docs/transformers/pr_16995/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(eO,"href","/docs/transformers/pr_16995/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(oO,"href","/docs/transformers/pr_16995/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(rO,"href","/docs/transformers/pr_16995/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(tO,"href","/docs/transformers/pr_16995/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(aO,"href","/docs/transformers/pr_16995/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(nO,"href","/docs/transformers/pr_16995/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(sO,"href","/docs/transformers/pr_16995/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(lO,"href","/docs/transformers/pr_16995/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(iO,"href","/docs/transformers/pr_16995/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(dO,"href","/docs/transformers/pr_16995/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(cO,"href","/docs/transformers/pr_16995/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(fO,"href","/docs/transformers/pr_16995/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(l5,"id","transformers.AutoModelForTableQuestionAnswering"),c(l5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(l5,"href","#transformers.AutoModelForTableQuestionAnswering"),c(zi,"class","relative group"),c(mO,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gO,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(hO,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pO,"href","/docs/transformers/pr_16995/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(m5,"id","transformers.AutoModelForImageClassification"),c(m5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m5,"href","#transformers.AutoModelForImageClassification"),c(Hi,"class","relative group"),c(uO,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_O,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(bO,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vO,"href","/docs/transformers/pr_16995/en/model_doc/beit#transformers.BeitForImageClassification"),c(FO,"href","/docs/transformers/pr_16995/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(TO,"href","/docs/transformers/pr_16995/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),c(MO,"href","/docs/transformers/pr_16995/en/model_doc/deit#transformers.DeiTForImageClassification"),c(EO,"href","/docs/transformers/pr_16995/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(CO,"href","/docs/transformers/pr_16995/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(wO,"href","/docs/transformers/pr_16995/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(AO,"href","/docs/transformers/pr_16995/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(yO,"href","/docs/transformers/pr_16995/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(LO,"href","/docs/transformers/pr_16995/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(xO,"href","/docs/transformers/pr_16995/en/model_doc/regnet#transformers.RegNetForImageClassification"),c($O,"href","/docs/transformers/pr_16995/en/model_doc/resnet#transformers.ResNetForImageClassification"),c(kO,"href","/docs/transformers/pr_16995/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(SO,"href","/docs/transformers/pr_16995/en/model_doc/swin#transformers.SwinForImageClassification"),c(RO,"href","/docs/transformers/pr_16995/en/model_doc/van#transformers.VanForImageClassification"),c(BO,"href","/docs/transformers/pr_16995/en/model_doc/vit#transformers.ViTForImageClassification"),c(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(y5,"id","transformers.AutoModelForVision2Seq"),c(y5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(y5,"href","#transformers.AutoModelForVision2Seq"),c(Yi,"class","relative group"),c(PO,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(IO,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qO,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(NO,"href","/docs/transformers/pr_16995/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(S5,"id","transformers.AutoModelForAudioClassification"),c(S5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(S5,"href","#transformers.AutoModelForAudioClassification"),c(ed,"class","relative group"),c(jO,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(DO,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(GO,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OO,"href","/docs/transformers/pr_16995/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(VO,"href","/docs/transformers/pr_16995/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(XO,"href","/docs/transformers/pr_16995/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(zO,"href","/docs/transformers/pr_16995/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(QO,"href","/docs/transformers/pr_16995/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(WO,"href","/docs/transformers/pr_16995/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(HO,"href","/docs/transformers/pr_16995/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(UO,"href","/docs/transformers/pr_16995/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(X5,"id","transformers.AutoModelForAudioFrameClassification"),c(X5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(X5,"href","#transformers.AutoModelForAudioFrameClassification"),c(td,"class","relative group"),c(JO,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(YO,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(KO,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZO,"href","/docs/transformers/pr_16995/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(eV,"href","/docs/transformers/pr_16995/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(oV,"href","/docs/transformers/pr_16995/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(rV,"href","/docs/transformers/pr_16995/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Do,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(K5,"id","transformers.AutoModelForCTC"),c(K5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(K5,"href","#transformers.AutoModelForCTC"),c(sd,"class","relative group"),c(tV,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(aV,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(nV,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sV,"href","/docs/transformers/pr_16995/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(lV,"href","/docs/transformers/pr_16995/en/model_doc/hubert#transformers.HubertForCTC"),c(iV,"href","/docs/transformers/pr_16995/en/model_doc/sew#transformers.SEWForCTC"),c(dV,"href","/docs/transformers/pr_16995/en/model_doc/sew-d#transformers.SEWDForCTC"),c(cV,"href","/docs/transformers/pr_16995/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(fV,"href","/docs/transformers/pr_16995/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(mV,"href","/docs/transformers/pr_16995/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(gV,"href","/docs/transformers/pr_16995/en/model_doc/wavlm#transformers.WavLMForCTC"),c(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cv,"id","transformers.AutoModelForSpeechSeq2Seq"),c(cv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(cv,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(dd,"class","relative group"),c(hV,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pV,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(uV,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_V,"href","/docs/transformers/pr_16995/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(bV,"href","/docs/transformers/pr_16995/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uv,"id","transformers.AutoModelForAudioXVector"),c(uv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(uv,"href","#transformers.AutoModelForAudioXVector"),c(md,"class","relative group"),c(vV,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(FV,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(TV,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MV,"href","/docs/transformers/pr_16995/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(EV,"href","/docs/transformers/pr_16995/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(CV,"href","/docs/transformers/pr_16995/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(wV,"href","/docs/transformers/pr_16995/en/model_doc/wavlm#transformers.WavLMForXVector"),c(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Cv,"id","transformers.AutoModelForMaskedImageModeling"),c(Cv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Cv,"href","#transformers.AutoModelForMaskedImageModeling"),c(pd,"class","relative group"),c(AV,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yV,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(LV,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xV,"href","/docs/transformers/pr_16995/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c($V,"href","/docs/transformers/pr_16995/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(kV,"href","/docs/transformers/pr_16995/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kv,"id","transformers.AutoModelForObjectDetection"),c(kv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(kv,"href","#transformers.AutoModelForObjectDetection"),c(vd,"class","relative group"),c(SV,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(RV,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(BV,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PV,"href","/docs/transformers/pr_16995/en/model_doc/detr#transformers.DetrForObjectDetection"),c(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Iv,"id","transformers.AutoModelForImageSegmentation"),c(Iv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Iv,"href","#transformers.AutoModelForImageSegmentation"),c(Md,"class","relative group"),c(IV,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qV,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(NV,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jV,"href","/docs/transformers/pr_16995/en/model_doc/detr#transformers.DetrForSegmentation"),c(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Gv,"id","transformers.AutoModelForSemanticSegmentation"),c(Gv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Gv,"href","#transformers.AutoModelForSemanticSegmentation"),c(wd,"class","relative group"),c(DV,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(GV,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(OV,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VV,"href","/docs/transformers/pr_16995/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(XV,"href","/docs/transformers/pr_16995/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),c(zV,"href","/docs/transformers/pr_16995/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),c(QV,"href","/docs/transformers/pr_16995/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uv,"id","transformers.AutoModelForInstanceSegmentation"),c(Uv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Uv,"href","#transformers.AutoModelForInstanceSegmentation"),c(Ld,"class","relative group"),c(WV,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(HV,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(UV,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JV,"href","/docs/transformers/pr_16995/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eF,"id","transformers.TFAutoModel"),c(eF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(eF,"href","#transformers.TFAutoModel"),c(kd,"class","relative group"),c(YV,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(KV,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ZV,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eX,"href","/docs/transformers/pr_16995/en/model_doc/albert#transformers.TFAlbertModel"),c(oX,"href","/docs/transformers/pr_16995/en/model_doc/bart#transformers.TFBartModel"),c(rX,"href","/docs/transformers/pr_16995/en/model_doc/bert#transformers.TFBertModel"),c(tX,"href","/docs/transformers/pr_16995/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(aX,"href","/docs/transformers/pr_16995/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(nX,"href","/docs/transformers/pr_16995/en/model_doc/camembert#transformers.TFCamembertModel"),c(sX,"href","/docs/transformers/pr_16995/en/model_doc/clip#transformers.TFCLIPModel"),c(lX,"href","/docs/transformers/pr_16995/en/model_doc/convbert#transformers.TFConvBertModel"),c(iX,"href","/docs/transformers/pr_16995/en/model_doc/convnext#transformers.TFConvNextModel"),c(dX,"href","/docs/transformers/pr_16995/en/model_doc/ctrl#transformers.TFCTRLModel"),c(cX,"href","/docs/transformers/pr_16995/en/model_doc/deberta#transformers.TFDebertaModel"),c(fX,"href","/docs/transformers/pr_16995/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(mX,"href","/docs/transformers/pr_16995/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(gX,"href","/docs/transformers/pr_16995/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(hX,"href","/docs/transformers/pr_16995/en/model_doc/electra#transformers.TFElectraModel"),c(pX,"href","/docs/transformers/pr_16995/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(uX,"href","/docs/transformers/pr_16995/en/model_doc/funnel#transformers.TFFunnelModel"),c(_X,"href","/docs/transformers/pr_16995/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(bX,"href","/docs/transformers/pr_16995/en/model_doc/gpt2#transformers.TFGPT2Model"),c(vX,"href","/docs/transformers/pr_16995/en/model_doc/gptj#transformers.TFGPTJModel"),c(FX,"href","/docs/transformers/pr_16995/en/model_doc/hubert#transformers.TFHubertModel"),c(TX,"href","/docs/transformers/pr_16995/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(MX,"href","/docs/transformers/pr_16995/en/model_doc/led#transformers.TFLEDModel"),c(EX,"href","/docs/transformers/pr_16995/en/model_doc/longformer#transformers.TFLongformerModel"),c(CX,"href","/docs/transformers/pr_16995/en/model_doc/lxmert#transformers.TFLxmertModel"),c(wX,"href","/docs/transformers/pr_16995/en/model_doc/marian#transformers.TFMarianModel"),c(AX,"href","/docs/transformers/pr_16995/en/model_doc/mbart#transformers.TFMBartModel"),c(yX,"href","/docs/transformers/pr_16995/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(LX,"href","/docs/transformers/pr_16995/en/model_doc/mpnet#transformers.TFMPNetModel"),c(xX,"href","/docs/transformers/pr_16995/en/model_doc/mt5#transformers.TFMT5Model"),c($X,"href","/docs/transformers/pr_16995/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(kX,"href","/docs/transformers/pr_16995/en/model_doc/pegasus#transformers.TFPegasusModel"),c(SX,"href","/docs/transformers/pr_16995/en/model_doc/rembert#transformers.TFRemBertModel"),c(RX,"href","/docs/transformers/pr_16995/en/model_doc/roberta#transformers.TFRobertaModel"),c(BX,"href","/docs/transformers/pr_16995/en/model_doc/roformer#transformers.TFRoFormerModel"),c(PX,"href","/docs/transformers/pr_16995/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(IX,"href","/docs/transformers/pr_16995/en/model_doc/t5#transformers.TFT5Model"),c(qX,"href","/docs/transformers/pr_16995/en/model_doc/tapas#transformers.TFTapasModel"),c(NX,"href","/docs/transformers/pr_16995/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(jX,"href","/docs/transformers/pr_16995/en/model_doc/vit#transformers.TFViTModel"),c(DX,"href","/docs/transformers/pr_16995/en/model_doc/vit_mae#transformers.TFViTMAEModel"),c(GX,"href","/docs/transformers/pr_16995/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(OX,"href","/docs/transformers/pr_16995/en/model_doc/xlm#transformers.TFXLMModel"),c(VX,"href","/docs/transformers/pr_16995/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(XX,"href","/docs/transformers/pr_16995/en/model_doc/xlnet#transformers.TFXLNetModel"),c(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QF,"id","transformers.TFAutoModelForPreTraining"),c(QF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(QF,"href","#transformers.TFAutoModelForPreTraining"),c(Bd,"class","relative group"),c(zX,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(QX,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(WX,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HX,"href","/docs/transformers/pr_16995/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(UX,"href","/docs/transformers/pr_16995/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(JX,"href","/docs/transformers/pr_16995/en/model_doc/bert#transformers.TFBertForPreTraining"),c(YX,"href","/docs/transformers/pr_16995/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(KX,"href","/docs/transformers/pr_16995/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(ZX,"href","/docs/transformers/pr_16995/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(ez,"href","/docs/transformers/pr_16995/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(oz,"href","/docs/transformers/pr_16995/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(rz,"href","/docs/transformers/pr_16995/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(tz,"href","/docs/transformers/pr_16995/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(az,"href","/docs/transformers/pr_16995/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(nz,"href","/docs/transformers/pr_16995/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(sz,"href","/docs/transformers/pr_16995/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(lz,"href","/docs/transformers/pr_16995/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(iz,"href","/docs/transformers/pr_16995/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(dz,"href","/docs/transformers/pr_16995/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(cz,"href","/docs/transformers/pr_16995/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(fz,"href","/docs/transformers/pr_16995/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(mz,"href","/docs/transformers/pr_16995/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(gz,"href","/docs/transformers/pr_16995/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),c(hz,"href","/docs/transformers/pr_16995/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(pz,"href","/docs/transformers/pr_16995/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(uz,"href","/docs/transformers/pr_16995/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(b6,"id","transformers.TFAutoModelForCausalLM"),c(b6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(b6,"href","#transformers.TFAutoModelForCausalLM"),c(qd,"class","relative group"),c(_z,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bz,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(vz,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fz,"href","/docs/transformers/pr_16995/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(Tz,"href","/docs/transformers/pr_16995/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c(Mz,"href","/docs/transformers/pr_16995/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(Ez,"href","/docs/transformers/pr_16995/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(Cz,"href","/docs/transformers/pr_16995/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),c(wz,"href","/docs/transformers/pr_16995/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(Az,"href","/docs/transformers/pr_16995/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(yz,"href","/docs/transformers/pr_16995/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(Lz,"href","/docs/transformers/pr_16995/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(xz,"href","/docs/transformers/pr_16995/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c($z,"href","/docs/transformers/pr_16995/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(kz,"href","/docs/transformers/pr_16995/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(R6,"id","transformers.TFAutoModelForImageClassification"),c(R6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(R6,"href","#transformers.TFAutoModelForImageClassification"),c(Dd,"class","relative group"),c(Sz,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rz,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Bz,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Pz,"href","/docs/transformers/pr_16995/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(Iz,"href","/docs/transformers/pr_16995/en/model_doc/vit#transformers.TFViTForImageClassification"),c(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(N6,"id","transformers.TFAutoModelForMaskedLM"),c(N6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(N6,"href","#transformers.TFAutoModelForMaskedLM"),c(Vd,"class","relative group"),c(qz,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nz,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(jz,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Dz,"href","/docs/transformers/pr_16995/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(Gz,"href","/docs/transformers/pr_16995/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(Oz,"href","/docs/transformers/pr_16995/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(Vz,"href","/docs/transformers/pr_16995/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(Xz,"href","/docs/transformers/pr_16995/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(zz,"href","/docs/transformers/pr_16995/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(Qz,"href","/docs/transformers/pr_16995/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(Wz,"href","/docs/transformers/pr_16995/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(Hz,"href","/docs/transformers/pr_16995/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(Uz,"href","/docs/transformers/pr_16995/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(Jz,"href","/docs/transformers/pr_16995/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(Yz,"href","/docs/transformers/pr_16995/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(Kz,"href","/docs/transformers/pr_16995/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(Zz,"href","/docs/transformers/pr_16995/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(eQ,"href","/docs/transformers/pr_16995/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(oQ,"href","/docs/transformers/pr_16995/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(rQ,"href","/docs/transformers/pr_16995/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(tQ,"href","/docs/transformers/pr_16995/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(aQ,"href","/docs/transformers/pr_16995/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(nQ,"href","/docs/transformers/pr_16995/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lT,"id","transformers.TFAutoModelForSeq2SeqLM"),c(lT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(lT,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(Qd,"class","relative group"),c(sQ,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lQ,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(iQ,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dQ,"href","/docs/transformers/pr_16995/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(cQ,"href","/docs/transformers/pr_16995/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(fQ,"href","/docs/transformers/pr_16995/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(mQ,"href","/docs/transformers/pr_16995/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(gQ,"href","/docs/transformers/pr_16995/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(hQ,"href","/docs/transformers/pr_16995/en/model_doc/marian#transformers.TFMarianMTModel"),c(pQ,"href","/docs/transformers/pr_16995/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(uQ,"href","/docs/transformers/pr_16995/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(_Q,"href","/docs/transformers/pr_16995/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(bQ,"href","/docs/transformers/pr_16995/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FT,"id","transformers.TFAutoModelForSequenceClassification"),c(FT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(FT,"href","#transformers.TFAutoModelForSequenceClassification"),c(Ud,"class","relative group"),c(vQ,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(FQ,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(TQ,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MQ,"href","/docs/transformers/pr_16995/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(EQ,"href","/docs/transformers/pr_16995/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(CQ,"href","/docs/transformers/pr_16995/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(wQ,"href","/docs/transformers/pr_16995/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(AQ,"href","/docs/transformers/pr_16995/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(yQ,"href","/docs/transformers/pr_16995/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(LQ,"href","/docs/transformers/pr_16995/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(xQ,"href","/docs/transformers/pr_16995/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c($Q,"href","/docs/transformers/pr_16995/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(kQ,"href","/docs/transformers/pr_16995/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(SQ,"href","/docs/transformers/pr_16995/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(RQ,"href","/docs/transformers/pr_16995/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(BQ,"href","/docs/transformers/pr_16995/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),c(PQ,"href","/docs/transformers/pr_16995/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(IQ,"href","/docs/transformers/pr_16995/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(qQ,"href","/docs/transformers/pr_16995/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(NQ,"href","/docs/transformers/pr_16995/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(jQ,"href","/docs/transformers/pr_16995/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(DQ,"href","/docs/transformers/pr_16995/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(GQ,"href","/docs/transformers/pr_16995/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(OQ,"href","/docs/transformers/pr_16995/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(VQ,"href","/docs/transformers/pr_16995/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(XQ,"href","/docs/transformers/pr_16995/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(zQ,"href","/docs/transformers/pr_16995/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(QQ,"href","/docs/transformers/pr_16995/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(WQ,"href","/docs/transformers/pr_16995/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UT,"id","transformers.TFAutoModelForMultipleChoice"),c(UT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(UT,"href","#transformers.TFAutoModelForMultipleChoice"),c(Kd,"class","relative group"),c(HQ,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(UQ,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(JQ,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YQ,"href","/docs/transformers/pr_16995/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(KQ,"href","/docs/transformers/pr_16995/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(ZQ,"href","/docs/transformers/pr_16995/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(eW,"href","/docs/transformers/pr_16995/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(oW,"href","/docs/transformers/pr_16995/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(rW,"href","/docs/transformers/pr_16995/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(tW,"href","/docs/transformers/pr_16995/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(aW,"href","/docs/transformers/pr_16995/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(nW,"href","/docs/transformers/pr_16995/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(sW,"href","/docs/transformers/pr_16995/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(lW,"href","/docs/transformers/pr_16995/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(iW,"href","/docs/transformers/pr_16995/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(dW,"href","/docs/transformers/pr_16995/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(cW,"href","/docs/transformers/pr_16995/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(fW,"href","/docs/transformers/pr_16995/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(mW,"href","/docs/transformers/pr_16995/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(gW,"href","/docs/transformers/pr_16995/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pM,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(pM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(pM,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(oc,"class","relative group"),c(hW,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pW,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(uW,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_W,"href","/docs/transformers/pr_16995/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vM,"id","transformers.TFAutoModelForTokenClassification"),c(vM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(vM,"href","#transformers.TFAutoModelForTokenClassification"),c(ac,"class","relative group"),c(bW,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vW,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(FW,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TW,"href","/docs/transformers/pr_16995/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(MW,"href","/docs/transformers/pr_16995/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(EW,"href","/docs/transformers/pr_16995/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(CW,"href","/docs/transformers/pr_16995/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(wW,"href","/docs/transformers/pr_16995/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(AW,"href","/docs/transformers/pr_16995/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(yW,"href","/docs/transformers/pr_16995/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(LW,"href","/docs/transformers/pr_16995/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(xW,"href","/docs/transformers/pr_16995/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c($W,"href","/docs/transformers/pr_16995/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(kW,"href","/docs/transformers/pr_16995/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(SW,"href","/docs/transformers/pr_16995/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(RW,"href","/docs/transformers/pr_16995/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(BW,"href","/docs/transformers/pr_16995/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(PW,"href","/docs/transformers/pr_16995/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(IW,"href","/docs/transformers/pr_16995/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(qW,"href","/docs/transformers/pr_16995/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(NW,"href","/docs/transformers/pr_16995/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(jW,"href","/docs/transformers/pr_16995/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(DW,"href","/docs/transformers/pr_16995/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OM,"id","transformers.TFAutoModelForQuestionAnswering"),c(OM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(OM,"href","#transformers.TFAutoModelForQuestionAnswering"),c(lc,"class","relative group"),c(GW,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(OW,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(VW,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XW,"href","/docs/transformers/pr_16995/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(zW,"href","/docs/transformers/pr_16995/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(QW,"href","/docs/transformers/pr_16995/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(WW,"href","/docs/transformers/pr_16995/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(HW,"href","/docs/transformers/pr_16995/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(UW,"href","/docs/transformers/pr_16995/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(JW,"href","/docs/transformers/pr_16995/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(YW,"href","/docs/transformers/pr_16995/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(KW,"href","/docs/transformers/pr_16995/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(ZW,"href","/docs/transformers/pr_16995/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(eH,"href","/docs/transformers/pr_16995/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),c(oH,"href","/docs/transformers/pr_16995/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(rH,"href","/docs/transformers/pr_16995/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(tH,"href","/docs/transformers/pr_16995/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(aH,"href","/docs/transformers/pr_16995/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(nH,"href","/docs/transformers/pr_16995/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(sH,"href","/docs/transformers/pr_16995/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(lH,"href","/docs/transformers/pr_16995/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(iH,"href","/docs/transformers/pr_16995/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(dH,"href","/docs/transformers/pr_16995/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(f4,"id","transformers.TFAutoModelForVision2Seq"),c(f4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(f4,"href","#transformers.TFAutoModelForVision2Seq"),c(cc,"class","relative group"),c(cH,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(fH,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(mH,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gH,"href","/docs/transformers/pr_16995/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(p4,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(p4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(p4,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(gc,"class","relative group"),c(hH,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pH,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(uH,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_H,"href","/docs/transformers/pr_16995/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(v4,"id","transformers.FlaxAutoModel"),c(v4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(v4,"href","#transformers.FlaxAutoModel"),c(uc,"class","relative group"),c(bH,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vH,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(FH,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TH,"href","/docs/transformers/pr_16995/en/model_doc/albert#transformers.FlaxAlbertModel"),c(MH,"href","/docs/transformers/pr_16995/en/model_doc/bart#transformers.FlaxBartModel"),c(EH,"href","/docs/transformers/pr_16995/en/model_doc/beit#transformers.FlaxBeitModel"),c(CH,"href","/docs/transformers/pr_16995/en/model_doc/bert#transformers.FlaxBertModel"),c(wH,"href","/docs/transformers/pr_16995/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(AH,"href","/docs/transformers/pr_16995/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(yH,"href","/docs/transformers/pr_16995/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(LH,"href","/docs/transformers/pr_16995/en/model_doc/clip#transformers.FlaxCLIPModel"),c(xH,"href","/docs/transformers/pr_16995/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c($H,"href","/docs/transformers/pr_16995/en/model_doc/electra#transformers.FlaxElectraModel"),c(kH,"href","/docs/transformers/pr_16995/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(SH,"href","/docs/transformers/pr_16995/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(RH,"href","/docs/transformers/pr_16995/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(BH,"href","/docs/transformers/pr_16995/en/model_doc/marian#transformers.FlaxMarianModel"),c(PH,"href","/docs/transformers/pr_16995/en/model_doc/mbart#transformers.FlaxMBartModel"),c(IH,"href","/docs/transformers/pr_16995/en/model_doc/mt5#transformers.FlaxMT5Model"),c(qH,"href","/docs/transformers/pr_16995/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(NH,"href","/docs/transformers/pr_16995/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(jH,"href","/docs/transformers/pr_16995/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(DH,"href","/docs/transformers/pr_16995/en/model_doc/t5#transformers.FlaxT5Model"),c(GH,"href","/docs/transformers/pr_16995/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(OH,"href","/docs/transformers/pr_16995/en/model_doc/vit#transformers.FlaxViTModel"),c(VH,"href","/docs/transformers/pr_16995/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(XH,"href","/docs/transformers/pr_16995/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(zH,"href","/docs/transformers/pr_16995/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(W4,"id","transformers.FlaxAutoModelForCausalLM"),c(W4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(W4,"href","#transformers.FlaxAutoModelForCausalLM"),c(vc,"class","relative group"),c(QH,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(WH,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(HH,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UH,"href","/docs/transformers/pr_16995/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c(JH,"href","/docs/transformers/pr_16995/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(YH,"href","/docs/transformers/pr_16995/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(KH,"href","/docs/transformers/pr_16995/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(ZH,"href","/docs/transformers/pr_16995/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rE,"id","transformers.FlaxAutoModelForPreTraining"),c(rE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(rE,"href","#transformers.FlaxAutoModelForPreTraining"),c(Mc,"class","relative group"),c(eU,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oU,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(rU,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tU,"href","/docs/transformers/pr_16995/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(aU,"href","/docs/transformers/pr_16995/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(nU,"href","/docs/transformers/pr_16995/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(sU,"href","/docs/transformers/pr_16995/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(lU,"href","/docs/transformers/pr_16995/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(iU,"href","/docs/transformers/pr_16995/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(dU,"href","/docs/transformers/pr_16995/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(cU,"href","/docs/transformers/pr_16995/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(fU,"href","/docs/transformers/pr_16995/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(mU,"href","/docs/transformers/pr_16995/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(gU,"href","/docs/transformers/pr_16995/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(hU,"href","/docs/transformers/pr_16995/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_E,"id","transformers.FlaxAutoModelForMaskedLM"),c(_E,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_E,"href","#transformers.FlaxAutoModelForMaskedLM"),c(wc,"class","relative group"),c(pU,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(uU,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(_U,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bU,"href","/docs/transformers/pr_16995/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(vU,"href","/docs/transformers/pr_16995/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(FU,"href","/docs/transformers/pr_16995/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(TU,"href","/docs/transformers/pr_16995/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(MU,"href","/docs/transformers/pr_16995/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(EU,"href","/docs/transformers/pr_16995/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(CU,"href","/docs/transformers/pr_16995/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(wU,"href","/docs/transformers/pr_16995/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(AU,"href","/docs/transformers/pr_16995/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(yU,"href","/docs/transformers/pr_16995/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($E,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c($E,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($E,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(Lc,"class","relative group"),c(LU,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xU,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c($U,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kU,"href","/docs/transformers/pr_16995/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(SU,"href","/docs/transformers/pr_16995/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(RU,"href","/docs/transformers/pr_16995/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(BU,"href","/docs/transformers/pr_16995/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(PU,"href","/docs/transformers/pr_16995/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(IU,"href","/docs/transformers/pr_16995/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(qU,"href","/docs/transformers/pr_16995/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(NU,"href","/docs/transformers/pr_16995/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(jU,"href","/docs/transformers/pr_16995/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OE,"id","transformers.FlaxAutoModelForSequenceClassification"),c(OE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(OE,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(kc,"class","relative group"),c(DU,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(GU,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(OU,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VU,"href","/docs/transformers/pr_16995/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(XU,"href","/docs/transformers/pr_16995/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(zU,"href","/docs/transformers/pr_16995/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(QU,"href","/docs/transformers/pr_16995/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(WU,"href","/docs/transformers/pr_16995/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(HU,"href","/docs/transformers/pr_16995/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(UU,"href","/docs/transformers/pr_16995/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(JU,"href","/docs/transformers/pr_16995/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(YU,"href","/docs/transformers/pr_16995/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(KU,"href","/docs/transformers/pr_16995/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oC,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(oC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(oC,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(Bc,"class","relative group"),c(ZU,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(eJ,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(oJ,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rJ,"href","/docs/transformers/pr_16995/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(tJ,"href","/docs/transformers/pr_16995/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(aJ,"href","/docs/transformers/pr_16995/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(nJ,"href","/docs/transformers/pr_16995/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(sJ,"href","/docs/transformers/pr_16995/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(lJ,"href","/docs/transformers/pr_16995/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(iJ,"href","/docs/transformers/pr_16995/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(dJ,"href","/docs/transformers/pr_16995/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(cJ,"href","/docs/transformers/pr_16995/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(fJ,"href","/docs/transformers/pr_16995/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hC,"id","transformers.FlaxAutoModelForTokenClassification"),c(hC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(hC,"href","#transformers.FlaxAutoModelForTokenClassification"),c(qc,"class","relative group"),c(mJ,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gJ,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(hJ,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pJ,"href","/docs/transformers/pr_16995/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(uJ,"href","/docs/transformers/pr_16995/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(_J,"href","/docs/transformers/pr_16995/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(bJ,"href","/docs/transformers/pr_16995/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(vJ,"href","/docs/transformers/pr_16995/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(FJ,"href","/docs/transformers/pr_16995/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(TJ,"href","/docs/transformers/pr_16995/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(MJ,"href","/docs/transformers/pr_16995/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wC,"id","transformers.FlaxAutoModelForMultipleChoice"),c(wC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(wC,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(Dc,"class","relative group"),c(EJ,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(CJ,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(wJ,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(AJ,"href","/docs/transformers/pr_16995/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(yJ,"href","/docs/transformers/pr_16995/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(LJ,"href","/docs/transformers/pr_16995/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(xJ,"href","/docs/transformers/pr_16995/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c($J,"href","/docs/transformers/pr_16995/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(kJ,"href","/docs/transformers/pr_16995/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(SJ,"href","/docs/transformers/pr_16995/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(RJ,"href","/docs/transformers/pr_16995/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(IC,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(IC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(IC,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(Vc,"class","relative group"),c(BJ,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(PJ,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(IJ,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qJ,"href","/docs/transformers/pr_16995/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DC,"id","transformers.FlaxAutoModelForImageClassification"),c(DC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(DC,"href","#transformers.FlaxAutoModelForImageClassification"),c(Qc,"class","relative group"),c(NJ,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jJ,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(DJ,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GJ,"href","/docs/transformers/pr_16995/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(OJ,"href","/docs/transformers/pr_16995/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zC,"id","transformers.FlaxAutoModelForVision2Seq"),c(zC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(zC,"href","#transformers.FlaxAutoModelForVision2Seq"),c(Uc,"class","relative group"),c(VJ,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(XJ,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(zJ,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QJ,"href","/docs/transformers/pr_16995/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(f,_){e(document.head,g),b(f,v,_),b(f,p,_),e(p,m),e(m,u),M(d,u,null),e(p,h),e(p,Fo),e(Fo,oi),b(f,of,_),b(f,Yr,_),e(Yr,ri),e(Yr,ti),e(ti,cA),e(Yr,rf),b(f,Ie,_),b(f,Oe,_),e(Oe,ai),e(Oe,Mn),e(Mn,fA),e(Oe,En),e(Oe,Cn),e(Cn,mA),e(Oe,ni),e(Oe,wn),e(wn,gA),e(Oe,si),b(f,tf,_),M(va,f,_),b(f,Ve,_),b(f,Ae,_),e(Ae,wx),e(Ae,li),e(li,Ax),e(Ae,yx),b(f,To,_),b(f,Fa,_),e(Fa,Lx),e(Fa,af),e(af,xx),e(Fa,qqe),b(f,kRe,_),b(f,ii,_),e(ii,nf),e(nf,qK),M(hA,qK,null),e(ii,Nqe),e(ii,NK),e(NK,jqe),b(f,SRe,_),b(f,An,_),e(An,Dqe),e(An,jK),e(jK,Gqe),e(An,Oqe),e(An,DK),e(DK,Vqe),e(An,Xqe),b(f,RRe,_),M(pA,f,_),b(f,BRe,_),b(f,$x,_),e($x,zqe),b(f,PRe,_),M(sf,f,_),b(f,IRe,_),b(f,di,_),e(di,lf),e(lf,GK),M(uA,GK,null),e(di,Qqe),e(di,OK),e(OK,Wqe),b(f,qRe,_),b(f,Mo,_),M(_A,Mo,null),e(Mo,Hqe),e(Mo,bA),e(bA,Uqe),e(bA,kx),e(kx,Jqe),e(bA,Yqe),e(Mo,Kqe),e(Mo,vA),e(vA,Zqe),e(vA,VK),e(VK,eNe),e(vA,oNe),e(Mo,rNe),e(Mo,Tr),M(FA,Tr,null),e(Tr,tNe),e(Tr,XK),e(XK,aNe),e(Tr,nNe),e(Tr,ci),e(ci,sNe),e(ci,zK),e(zK,lNe),e(ci,iNe),e(ci,QK),e(QK,dNe),e(ci,cNe),e(Tr,fNe),e(Tr,y),e(y,df),e(df,WK),e(WK,mNe),e(df,gNe),e(df,Sx),e(Sx,hNe),e(df,pNe),e(y,uNe),e(y,cf),e(cf,HK),e(HK,_Ne),e(cf,bNe),e(cf,Rx),e(Rx,vNe),e(cf,FNe),e(y,TNe),e(y,ff),e(ff,UK),e(UK,MNe),e(ff,ENe),e(ff,Bx),e(Bx,CNe),e(ff,wNe),e(y,ANe),e(y,mf),e(mf,JK),e(JK,yNe),e(mf,LNe),e(mf,Px),e(Px,xNe),e(mf,$Ne),e(y,kNe),e(y,gf),e(gf,YK),e(YK,SNe),e(gf,RNe),e(gf,Ix),e(Ix,BNe),e(gf,PNe),e(y,INe),e(y,hf),e(hf,KK),e(KK,qNe),e(hf,NNe),e(hf,qx),e(qx,jNe),e(hf,DNe),e(y,GNe),e(y,pf),e(pf,ZK),e(ZK,ONe),e(pf,VNe),e(pf,Nx),e(Nx,XNe),e(pf,zNe),e(y,QNe),e(y,uf),e(uf,eZ),e(eZ,WNe),e(uf,HNe),e(uf,jx),e(jx,UNe),e(uf,JNe),e(y,YNe),e(y,_f),e(_f,oZ),e(oZ,KNe),e(_f,ZNe),e(_f,Dx),e(Dx,eje),e(_f,oje),e(y,rje),e(y,bf),e(bf,rZ),e(rZ,tje),e(bf,aje),e(bf,Gx),e(Gx,nje),e(bf,sje),e(y,lje),e(y,vf),e(vf,tZ),e(tZ,ije),e(vf,dje),e(vf,Ox),e(Ox,cje),e(vf,fje),e(y,mje),e(y,Ff),e(Ff,aZ),e(aZ,gje),e(Ff,hje),e(Ff,Vx),e(Vx,pje),e(Ff,uje),e(y,_je),e(y,Tf),e(Tf,nZ),e(nZ,bje),e(Tf,vje),e(Tf,Xx),e(Xx,Fje),e(Tf,Tje),e(y,Mje),e(y,Mf),e(Mf,sZ),e(sZ,Eje),e(Mf,Cje),e(Mf,zx),e(zx,wje),e(Mf,Aje),e(y,yje),e(y,Ef),e(Ef,lZ),e(lZ,Lje),e(Ef,xje),e(Ef,Qx),e(Qx,$je),e(Ef,kje),e(y,Sje),e(y,Cf),e(Cf,iZ),e(iZ,Rje),e(Cf,Bje),e(Cf,Wx),e(Wx,Pje),e(Cf,Ije),e(y,qje),e(y,wf),e(wf,dZ),e(dZ,Nje),e(wf,jje),e(wf,Hx),e(Hx,Dje),e(wf,Gje),e(y,Oje),e(y,Af),e(Af,cZ),e(cZ,Vje),e(Af,Xje),e(Af,Ux),e(Ux,zje),e(Af,Qje),e(y,Wje),e(y,yf),e(yf,fZ),e(fZ,Hje),e(yf,Uje),e(yf,Jx),e(Jx,Jje),e(yf,Yje),e(y,Kje),e(y,Lf),e(Lf,mZ),e(mZ,Zje),e(Lf,eDe),e(Lf,Yx),e(Yx,oDe),e(Lf,rDe),e(y,tDe),e(y,xf),e(xf,gZ),e(gZ,aDe),e(xf,nDe),e(xf,Kx),e(Kx,sDe),e(xf,lDe),e(y,iDe),e(y,$f),e($f,hZ),e(hZ,dDe),e($f,cDe),e($f,Zx),e(Zx,fDe),e($f,mDe),e(y,gDe),e(y,kf),e(kf,pZ),e(pZ,hDe),e(kf,pDe),e(kf,e$),e(e$,uDe),e(kf,_De),e(y,bDe),e(y,Sf),e(Sf,uZ),e(uZ,vDe),e(Sf,FDe),e(Sf,o$),e(o$,TDe),e(Sf,MDe),e(y,EDe),e(y,Rf),e(Rf,_Z),e(_Z,CDe),e(Rf,wDe),e(Rf,r$),e(r$,ADe),e(Rf,yDe),e(y,LDe),e(y,Bf),e(Bf,bZ),e(bZ,xDe),e(Bf,$De),e(Bf,t$),e(t$,kDe),e(Bf,SDe),e(y,RDe),e(y,Pf),e(Pf,vZ),e(vZ,BDe),e(Pf,PDe),e(Pf,a$),e(a$,IDe),e(Pf,qDe),e(y,NDe),e(y,If),e(If,FZ),e(FZ,jDe),e(If,DDe),e(If,n$),e(n$,GDe),e(If,ODe),e(y,VDe),e(y,qf),e(qf,TZ),e(TZ,XDe),e(qf,zDe),e(qf,s$),e(s$,QDe),e(qf,WDe),e(y,HDe),e(y,Nf),e(Nf,MZ),e(MZ,UDe),e(Nf,JDe),e(Nf,l$),e(l$,YDe),e(Nf,KDe),e(y,ZDe),e(y,jf),e(jf,EZ),e(EZ,eGe),e(jf,oGe),e(jf,i$),e(i$,rGe),e(jf,tGe),e(y,aGe),e(y,Df),e(Df,CZ),e(CZ,nGe),e(Df,sGe),e(Df,d$),e(d$,lGe),e(Df,iGe),e(y,dGe),e(y,Gf),e(Gf,wZ),e(wZ,cGe),e(Gf,fGe),e(Gf,c$),e(c$,mGe),e(Gf,gGe),e(y,hGe),e(y,Of),e(Of,AZ),e(AZ,pGe),e(Of,uGe),e(Of,f$),e(f$,_Ge),e(Of,bGe),e(y,vGe),e(y,Vf),e(Vf,yZ),e(yZ,FGe),e(Vf,TGe),e(Vf,m$),e(m$,MGe),e(Vf,EGe),e(y,CGe),e(y,Xf),e(Xf,LZ),e(LZ,wGe),e(Xf,AGe),e(Xf,g$),e(g$,yGe),e(Xf,LGe),e(y,xGe),e(y,zf),e(zf,xZ),e(xZ,$Ge),e(zf,kGe),e(zf,h$),e(h$,SGe),e(zf,RGe),e(y,BGe),e(y,Qf),e(Qf,$Z),e($Z,PGe),e(Qf,IGe),e(Qf,p$),e(p$,qGe),e(Qf,NGe),e(y,jGe),e(y,Wf),e(Wf,kZ),e(kZ,DGe),e(Wf,GGe),e(Wf,u$),e(u$,OGe),e(Wf,VGe),e(y,XGe),e(y,Hf),e(Hf,SZ),e(SZ,zGe),e(Hf,QGe),e(Hf,_$),e(_$,WGe),e(Hf,HGe),e(y,UGe),e(y,Uf),e(Uf,RZ),e(RZ,JGe),e(Uf,YGe),e(Uf,b$),e(b$,KGe),e(Uf,ZGe),e(y,eOe),e(y,Jf),e(Jf,BZ),e(BZ,oOe),e(Jf,rOe),e(Jf,v$),e(v$,tOe),e(Jf,aOe),e(y,nOe),e(y,Yf),e(Yf,PZ),e(PZ,sOe),e(Yf,lOe),e(Yf,F$),e(F$,iOe),e(Yf,dOe),e(y,cOe),e(y,Kf),e(Kf,IZ),e(IZ,fOe),e(Kf,mOe),e(Kf,T$),e(T$,gOe),e(Kf,hOe),e(y,pOe),e(y,Zf),e(Zf,qZ),e(qZ,uOe),e(Zf,_Oe),e(Zf,M$),e(M$,bOe),e(Zf,vOe),e(y,FOe),e(y,em),e(em,NZ),e(NZ,TOe),e(em,MOe),e(em,E$),e(E$,EOe),e(em,COe),e(y,wOe),e(y,om),e(om,jZ),e(jZ,AOe),e(om,yOe),e(om,C$),e(C$,LOe),e(om,xOe),e(y,$Oe),e(y,rm),e(rm,DZ),e(DZ,kOe),e(rm,SOe),e(rm,w$),e(w$,ROe),e(rm,BOe),e(y,POe),e(y,tm),e(tm,GZ),e(GZ,IOe),e(tm,qOe),e(tm,A$),e(A$,NOe),e(tm,jOe),e(y,DOe),e(y,am),e(am,OZ),e(OZ,GOe),e(am,OOe),e(am,y$),e(y$,VOe),e(am,XOe),e(y,zOe),e(y,nm),e(nm,VZ),e(VZ,QOe),e(nm,WOe),e(nm,L$),e(L$,HOe),e(nm,UOe),e(y,JOe),e(y,sm),e(sm,XZ),e(XZ,YOe),e(sm,KOe),e(sm,x$),e(x$,ZOe),e(sm,eVe),e(y,oVe),e(y,lm),e(lm,zZ),e(zZ,rVe),e(lm,tVe),e(lm,$$),e($$,aVe),e(lm,nVe),e(y,sVe),e(y,im),e(im,QZ),e(QZ,lVe),e(im,iVe),e(im,k$),e(k$,dVe),e(im,cVe),e(y,fVe),e(y,dm),e(dm,WZ),e(WZ,mVe),e(dm,gVe),e(dm,S$),e(S$,hVe),e(dm,pVe),e(y,uVe),e(y,cm),e(cm,HZ),e(HZ,_Ve),e(cm,bVe),e(cm,R$),e(R$,vVe),e(cm,FVe),e(y,TVe),e(y,fm),e(fm,UZ),e(UZ,MVe),e(fm,EVe),e(fm,B$),e(B$,CVe),e(fm,wVe),e(y,AVe),e(y,mm),e(mm,JZ),e(JZ,yVe),e(mm,LVe),e(mm,P$),e(P$,xVe),e(mm,$Ve),e(y,kVe),e(y,gm),e(gm,YZ),e(YZ,SVe),e(gm,RVe),e(gm,I$),e(I$,BVe),e(gm,PVe),e(y,IVe),e(y,hm),e(hm,KZ),e(KZ,qVe),e(hm,NVe),e(hm,q$),e(q$,jVe),e(hm,DVe),e(y,GVe),e(y,pm),e(pm,ZZ),e(ZZ,OVe),e(pm,VVe),e(pm,N$),e(N$,XVe),e(pm,zVe),e(y,QVe),e(y,um),e(um,eee),e(eee,WVe),e(um,HVe),e(um,j$),e(j$,UVe),e(um,JVe),e(y,YVe),e(y,_m),e(_m,oee),e(oee,KVe),e(_m,ZVe),e(_m,D$),e(D$,eXe),e(_m,oXe),e(y,rXe),e(y,bm),e(bm,ree),e(ree,tXe),e(bm,aXe),e(bm,G$),e(G$,nXe),e(bm,sXe),e(y,lXe),e(y,vm),e(vm,tee),e(tee,iXe),e(vm,dXe),e(vm,O$),e(O$,cXe),e(vm,fXe),e(y,mXe),e(y,Fm),e(Fm,aee),e(aee,gXe),e(Fm,hXe),e(Fm,V$),e(V$,pXe),e(Fm,uXe),e(y,_Xe),e(y,Tm),e(Tm,nee),e(nee,bXe),e(Tm,vXe),e(Tm,X$),e(X$,FXe),e(Tm,TXe),e(y,MXe),e(y,Mm),e(Mm,see),e(see,EXe),e(Mm,CXe),e(Mm,z$),e(z$,wXe),e(Mm,AXe),e(y,yXe),e(y,Em),e(Em,lee),e(lee,LXe),e(Em,xXe),e(Em,Q$),e(Q$,$Xe),e(Em,kXe),e(y,SXe),e(y,Cm),e(Cm,iee),e(iee,RXe),e(Cm,BXe),e(Cm,W$),e(W$,PXe),e(Cm,IXe),e(y,qXe),e(y,wm),e(wm,dee),e(dee,NXe),e(wm,jXe),e(wm,H$),e(H$,DXe),e(wm,GXe),e(y,OXe),e(y,Am),e(Am,cee),e(cee,VXe),e(Am,XXe),e(Am,U$),e(U$,zXe),e(Am,QXe),e(y,WXe),e(y,ym),e(ym,fee),e(fee,HXe),e(ym,UXe),e(ym,J$),e(J$,JXe),e(ym,YXe),e(y,KXe),e(y,Lm),e(Lm,mee),e(mee,ZXe),e(Lm,eze),e(Lm,Y$),e(Y$,oze),e(Lm,rze),e(y,tze),e(y,xm),e(xm,gee),e(gee,aze),e(xm,nze),e(xm,K$),e(K$,sze),e(xm,lze),e(y,ize),e(y,$m),e($m,hee),e(hee,dze),e($m,cze),e($m,Z$),e(Z$,fze),e($m,mze),e(y,gze),e(y,km),e(km,pee),e(pee,hze),e(km,pze),e(km,ek),e(ek,uze),e(km,_ze),e(y,bze),e(y,Sm),e(Sm,uee),e(uee,vze),e(Sm,Fze),e(Sm,ok),e(ok,Tze),e(Sm,Mze),e(y,Eze),e(y,Rm),e(Rm,_ee),e(_ee,Cze),e(Rm,wze),e(Rm,rk),e(rk,Aze),e(Rm,yze),e(y,Lze),e(y,Bm),e(Bm,bee),e(bee,xze),e(Bm,$ze),e(Bm,tk),e(tk,kze),e(Bm,Sze),e(y,Rze),e(y,Pm),e(Pm,vee),e(vee,Bze),e(Pm,Pze),e(Pm,ak),e(ak,Ize),e(Pm,qze),e(y,Nze),e(y,Im),e(Im,Fee),e(Fee,jze),e(Im,Dze),e(Im,nk),e(nk,Gze),e(Im,Oze),e(y,Vze),e(y,qm),e(qm,Tee),e(Tee,Xze),e(qm,zze),e(qm,sk),e(sk,Qze),e(qm,Wze),e(y,Hze),e(y,Nm),e(Nm,Mee),e(Mee,Uze),e(Nm,Jze),e(Nm,lk),e(lk,Yze),e(Nm,Kze),e(y,Zze),e(y,jm),e(jm,Eee),e(Eee,eQe),e(jm,oQe),e(jm,ik),e(ik,rQe),e(jm,tQe),e(y,aQe),e(y,Dm),e(Dm,Cee),e(Cee,nQe),e(Dm,sQe),e(Dm,dk),e(dk,lQe),e(Dm,iQe),e(y,dQe),e(y,Gm),e(Gm,wee),e(wee,cQe),e(Gm,fQe),e(Gm,ck),e(ck,mQe),e(Gm,gQe),e(y,hQe),e(y,Om),e(Om,Aee),e(Aee,pQe),e(Om,uQe),e(Om,fk),e(fk,_Qe),e(Om,bQe),e(y,vQe),e(y,Vm),e(Vm,yee),e(yee,FQe),e(Vm,TQe),e(Vm,mk),e(mk,MQe),e(Vm,EQe),e(y,CQe),e(y,Xm),e(Xm,Lee),e(Lee,wQe),e(Xm,AQe),e(Xm,gk),e(gk,yQe),e(Xm,LQe),e(y,xQe),e(y,zm),e(zm,xee),e(xee,$Qe),e(zm,kQe),e(zm,hk),e(hk,SQe),e(zm,RQe),e(y,BQe),e(y,Qm),e(Qm,$ee),e($ee,PQe),e(Qm,IQe),e(Qm,pk),e(pk,qQe),e(Qm,NQe),e(y,jQe),e(y,Wm),e(Wm,kee),e(kee,DQe),e(Wm,GQe),e(Wm,uk),e(uk,OQe),e(Wm,VQe),e(y,XQe),e(y,Hm),e(Hm,See),e(See,zQe),e(Hm,QQe),e(Hm,_k),e(_k,WQe),e(Hm,HQe),e(y,UQe),e(y,Um),e(Um,Ree),e(Ree,JQe),e(Um,YQe),e(Um,bk),e(bk,KQe),e(Um,ZQe),e(y,eWe),e(y,Jm),e(Jm,Bee),e(Bee,oWe),e(Jm,rWe),e(Jm,vk),e(vk,tWe),e(Jm,aWe),e(y,nWe),e(y,Ym),e(Ym,Pee),e(Pee,sWe),e(Ym,lWe),e(Ym,Fk),e(Fk,iWe),e(Ym,dWe),e(y,cWe),e(y,Km),e(Km,Iee),e(Iee,fWe),e(Km,mWe),e(Km,Tk),e(Tk,gWe),e(Km,hWe),e(y,pWe),e(y,Zm),e(Zm,qee),e(qee,uWe),e(Zm,_We),e(Zm,Mk),e(Mk,bWe),e(Zm,vWe),e(y,FWe),e(y,eg),e(eg,Nee),e(Nee,TWe),e(eg,MWe),e(eg,Ek),e(Ek,EWe),e(eg,CWe),e(y,wWe),e(y,og),e(og,jee),e(jee,AWe),e(og,yWe),e(og,Ck),e(Ck,LWe),e(og,xWe),e(y,$We),e(y,rg),e(rg,Dee),e(Dee,kWe),e(rg,SWe),e(rg,wk),e(wk,RWe),e(rg,BWe),e(Tr,PWe),M(tg,Tr,null),e(Mo,IWe),e(Mo,ag),M(TA,ag,null),e(ag,qWe),e(ag,Gee),e(Gee,NWe),b(f,NRe,_),b(f,fi,_),e(fi,ng),e(ng,Oee),M(MA,Oee,null),e(fi,jWe),e(fi,Vee),e(Vee,DWe),b(f,jRe,_),b(f,Eo,_),M(EA,Eo,null),e(Eo,GWe),e(Eo,CA),e(CA,OWe),e(CA,Ak),e(Ak,VWe),e(CA,XWe),e(Eo,zWe),e(Eo,wA),e(wA,QWe),e(wA,Xee),e(Xee,WWe),e(wA,HWe),e(Eo,UWe),e(Eo,Mr),M(AA,Mr,null),e(Mr,JWe),e(Mr,zee),e(zee,YWe),e(Mr,KWe),e(Mr,Ta),e(Ta,ZWe),e(Ta,Qee),e(Qee,eHe),e(Ta,oHe),e(Ta,Wee),e(Wee,rHe),e(Ta,tHe),e(Ta,Hee),e(Hee,aHe),e(Ta,nHe),e(Mr,sHe),e(Mr,k),e(k,yn),e(yn,Uee),e(Uee,lHe),e(yn,iHe),e(yn,yk),e(yk,dHe),e(yn,cHe),e(yn,Lk),e(Lk,fHe),e(yn,mHe),e(k,gHe),e(k,Ln),e(Ln,Jee),e(Jee,hHe),e(Ln,pHe),e(Ln,xk),e(xk,uHe),e(Ln,_He),e(Ln,$k),e($k,bHe),e(Ln,vHe),e(k,FHe),e(k,xn),e(xn,Yee),e(Yee,THe),e(xn,MHe),e(xn,kk),e(kk,EHe),e(xn,CHe),e(xn,Sk),e(Sk,wHe),e(xn,AHe),e(k,yHe),e(k,sg),e(sg,Kee),e(Kee,LHe),e(sg,xHe),e(sg,Rk),e(Rk,$He),e(sg,kHe),e(k,SHe),e(k,$n),e($n,Zee),e(Zee,RHe),e($n,BHe),e($n,Bk),e(Bk,PHe),e($n,IHe),e($n,Pk),e(Pk,qHe),e($n,NHe),e(k,jHe),e(k,lg),e(lg,eoe),e(eoe,DHe),e(lg,GHe),e(lg,Ik),e(Ik,OHe),e(lg,VHe),e(k,XHe),e(k,ig),e(ig,ooe),e(ooe,zHe),e(ig,QHe),e(ig,qk),e(qk,WHe),e(ig,HHe),e(k,UHe),e(k,dg),e(dg,roe),e(roe,JHe),e(dg,YHe),e(dg,Nk),e(Nk,KHe),e(dg,ZHe),e(k,eUe),e(k,kn),e(kn,toe),e(toe,oUe),e(kn,rUe),e(kn,jk),e(jk,tUe),e(kn,aUe),e(kn,Dk),e(Dk,nUe),e(kn,sUe),e(k,lUe),e(k,Sn),e(Sn,aoe),e(aoe,iUe),e(Sn,dUe),e(Sn,Gk),e(Gk,cUe),e(Sn,fUe),e(Sn,Ok),e(Ok,mUe),e(Sn,gUe),e(k,hUe),e(k,Rn),e(Rn,noe),e(noe,pUe),e(Rn,uUe),e(Rn,Vk),e(Vk,_Ue),e(Rn,bUe),e(Rn,Xk),e(Xk,vUe),e(Rn,FUe),e(k,TUe),e(k,cg),e(cg,soe),e(soe,MUe),e(cg,EUe),e(cg,zk),e(zk,CUe),e(cg,wUe),e(k,AUe),e(k,fg),e(fg,loe),e(loe,yUe),e(fg,LUe),e(fg,Qk),e(Qk,xUe),e(fg,$Ue),e(k,kUe),e(k,Bn),e(Bn,ioe),e(ioe,SUe),e(Bn,RUe),e(Bn,Wk),e(Wk,BUe),e(Bn,PUe),e(Bn,Hk),e(Hk,IUe),e(Bn,qUe),e(k,NUe),e(k,mg),e(mg,doe),e(doe,jUe),e(mg,DUe),e(mg,Uk),e(Uk,GUe),e(mg,OUe),e(k,VUe),e(k,Pn),e(Pn,coe),e(coe,XUe),e(Pn,zUe),e(Pn,Jk),e(Jk,QUe),e(Pn,WUe),e(Pn,Yk),e(Yk,HUe),e(Pn,UUe),e(k,JUe),e(k,In),e(In,foe),e(foe,YUe),e(In,KUe),e(In,Kk),e(Kk,ZUe),e(In,eJe),e(In,Zk),e(Zk,oJe),e(In,rJe),e(k,tJe),e(k,qn),e(qn,moe),e(moe,aJe),e(qn,nJe),e(qn,eS),e(eS,sJe),e(qn,lJe),e(qn,goe),e(goe,iJe),e(qn,dJe),e(k,cJe),e(k,gg),e(gg,hoe),e(hoe,fJe),e(gg,mJe),e(gg,oS),e(oS,gJe),e(gg,hJe),e(k,pJe),e(k,Nn),e(Nn,poe),e(poe,uJe),e(Nn,_Je),e(Nn,rS),e(rS,bJe),e(Nn,vJe),e(Nn,tS),e(tS,FJe),e(Nn,TJe),e(k,MJe),e(k,jn),e(jn,uoe),e(uoe,EJe),e(jn,CJe),e(jn,aS),e(aS,wJe),e(jn,AJe),e(jn,nS),e(nS,yJe),e(jn,LJe),e(k,xJe),e(k,Dn),e(Dn,_oe),e(_oe,$Je),e(Dn,kJe),e(Dn,sS),e(sS,SJe),e(Dn,RJe),e(Dn,lS),e(lS,BJe),e(Dn,PJe),e(k,IJe),e(k,Gn),e(Gn,boe),e(boe,qJe),e(Gn,NJe),e(Gn,iS),e(iS,jJe),e(Gn,DJe),e(Gn,dS),e(dS,GJe),e(Gn,OJe),e(k,VJe),e(k,On),e(On,voe),e(voe,XJe),e(On,zJe),e(On,cS),e(cS,QJe),e(On,WJe),e(On,fS),e(fS,HJe),e(On,UJe),e(k,JJe),e(k,Vn),e(Vn,Foe),e(Foe,YJe),e(Vn,KJe),e(Vn,mS),e(mS,ZJe),e(Vn,eYe),e(Vn,gS),e(gS,oYe),e(Vn,rYe),e(k,tYe),e(k,hg),e(hg,Toe),e(Toe,aYe),e(hg,nYe),e(hg,hS),e(hS,sYe),e(hg,lYe),e(k,iYe),e(k,Xn),e(Xn,Moe),e(Moe,dYe),e(Xn,cYe),e(Xn,pS),e(pS,fYe),e(Xn,mYe),e(Xn,uS),e(uS,gYe),e(Xn,hYe),e(k,pYe),e(k,pg),e(pg,Eoe),e(Eoe,uYe),e(pg,_Ye),e(pg,_S),e(_S,bYe),e(pg,vYe),e(k,FYe),e(k,zn),e(zn,Coe),e(Coe,TYe),e(zn,MYe),e(zn,bS),e(bS,EYe),e(zn,CYe),e(zn,vS),e(vS,wYe),e(zn,AYe),e(k,yYe),e(k,Qn),e(Qn,woe),e(woe,LYe),e(Qn,xYe),e(Qn,FS),e(FS,$Ye),e(Qn,kYe),e(Qn,TS),e(TS,SYe),e(Qn,RYe),e(k,BYe),e(k,Wn),e(Wn,Aoe),e(Aoe,PYe),e(Wn,IYe),e(Wn,MS),e(MS,qYe),e(Wn,NYe),e(Wn,ES),e(ES,jYe),e(Wn,DYe),e(k,GYe),e(k,Hn),e(Hn,yoe),e(yoe,OYe),e(Hn,VYe),e(Hn,CS),e(CS,XYe),e(Hn,zYe),e(Hn,wS),e(wS,QYe),e(Hn,WYe),e(k,HYe),e(k,Un),e(Un,Loe),e(Loe,UYe),e(Un,JYe),e(Un,AS),e(AS,YYe),e(Un,KYe),e(Un,yS),e(yS,ZYe),e(Un,eKe),e(k,oKe),e(k,ug),e(ug,xoe),e(xoe,rKe),e(ug,tKe),e(ug,LS),e(LS,aKe),e(ug,nKe),e(k,sKe),e(k,Jn),e(Jn,$oe),e($oe,lKe),e(Jn,iKe),e(Jn,xS),e(xS,dKe),e(Jn,cKe),e(Jn,$S),e($S,fKe),e(Jn,mKe),e(k,gKe),e(k,Yn),e(Yn,koe),e(koe,hKe),e(Yn,pKe),e(Yn,kS),e(kS,uKe),e(Yn,_Ke),e(Yn,SS),e(SS,bKe),e(Yn,vKe),e(k,FKe),e(k,Kn),e(Kn,Soe),e(Soe,TKe),e(Kn,MKe),e(Kn,RS),e(RS,EKe),e(Kn,CKe),e(Kn,BS),e(BS,wKe),e(Kn,AKe),e(k,yKe),e(k,Zn),e(Zn,Roe),e(Roe,LKe),e(Zn,xKe),e(Zn,PS),e(PS,$Ke),e(Zn,kKe),e(Zn,IS),e(IS,SKe),e(Zn,RKe),e(k,BKe),e(k,es),e(es,Boe),e(Boe,PKe),e(es,IKe),e(es,qS),e(qS,qKe),e(es,NKe),e(es,NS),e(NS,jKe),e(es,DKe),e(k,GKe),e(k,os),e(os,Poe),e(Poe,OKe),e(os,VKe),e(os,jS),e(jS,XKe),e(os,zKe),e(os,DS),e(DS,QKe),e(os,WKe),e(k,HKe),e(k,_g),e(_g,Ioe),e(Ioe,UKe),e(_g,JKe),e(_g,GS),e(GS,YKe),e(_g,KKe),e(k,ZKe),e(k,rs),e(rs,qoe),e(qoe,eZe),e(rs,oZe),e(rs,OS),e(OS,rZe),e(rs,tZe),e(rs,VS),e(VS,aZe),e(rs,nZe),e(k,sZe),e(k,bg),e(bg,Noe),e(Noe,lZe),e(bg,iZe),e(bg,XS),e(XS,dZe),e(bg,cZe),e(k,fZe),e(k,vg),e(vg,joe),e(joe,mZe),e(vg,gZe),e(vg,zS),e(zS,hZe),e(vg,pZe),e(k,uZe),e(k,ts),e(ts,Doe),e(Doe,_Ze),e(ts,bZe),e(ts,QS),e(QS,vZe),e(ts,FZe),e(ts,WS),e(WS,TZe),e(ts,MZe),e(k,EZe),e(k,as),e(as,Goe),e(Goe,CZe),e(as,wZe),e(as,HS),e(HS,AZe),e(as,yZe),e(as,US),e(US,LZe),e(as,xZe),e(k,$Ze),e(k,ns),e(ns,Ooe),e(Ooe,kZe),e(ns,SZe),e(ns,JS),e(JS,RZe),e(ns,BZe),e(ns,YS),e(YS,PZe),e(ns,IZe),e(k,qZe),e(k,Fg),e(Fg,Voe),e(Voe,NZe),e(Fg,jZe),e(Fg,KS),e(KS,DZe),e(Fg,GZe),e(k,OZe),e(k,ss),e(ss,Xoe),e(Xoe,VZe),e(ss,XZe),e(ss,ZS),e(ZS,zZe),e(ss,QZe),e(ss,eR),e(eR,WZe),e(ss,HZe),e(k,UZe),e(k,ls),e(ls,zoe),e(zoe,JZe),e(ls,YZe),e(ls,oR),e(oR,KZe),e(ls,ZZe),e(ls,rR),e(rR,eeo),e(ls,oeo),e(k,reo),e(k,is),e(is,Qoe),e(Qoe,teo),e(is,aeo),e(is,tR),e(tR,neo),e(is,seo),e(is,aR),e(aR,leo),e(is,ieo),e(k,deo),e(k,ds),e(ds,Woe),e(Woe,ceo),e(ds,feo),e(ds,nR),e(nR,meo),e(ds,geo),e(ds,sR),e(sR,heo),e(ds,peo),e(k,ueo),e(k,cs),e(cs,Hoe),e(Hoe,_eo),e(cs,beo),e(cs,lR),e(lR,veo),e(cs,Feo),e(cs,iR),e(iR,Teo),e(cs,Meo),e(k,Eeo),e(k,fs),e(fs,Uoe),e(Uoe,Ceo),e(fs,weo),e(fs,dR),e(dR,Aeo),e(fs,yeo),e(fs,cR),e(cR,Leo),e(fs,xeo),e(k,$eo),e(k,Tg),e(Tg,Joe),e(Joe,keo),e(Tg,Seo),e(Tg,fR),e(fR,Reo),e(Tg,Beo),e(k,Peo),e(k,Mg),e(Mg,Yoe),e(Yoe,Ieo),e(Mg,qeo),e(Mg,mR),e(mR,Neo),e(Mg,jeo),e(k,Deo),e(k,Eg),e(Eg,Koe),e(Koe,Geo),e(Eg,Oeo),e(Eg,gR),e(gR,Veo),e(Eg,Xeo),e(k,zeo),e(k,Cg),e(Cg,Zoe),e(Zoe,Qeo),e(Cg,Weo),e(Cg,hR),e(hR,Heo),e(Cg,Ueo),e(k,Jeo),e(k,ms),e(ms,ere),e(ere,Yeo),e(ms,Keo),e(ms,pR),e(pR,Zeo),e(ms,eoo),e(ms,uR),e(uR,ooo),e(ms,roo),e(k,too),e(k,wg),e(wg,ore),e(ore,aoo),e(wg,noo),e(wg,_R),e(_R,soo),e(wg,loo),e(k,ioo),e(k,gs),e(gs,rre),e(rre,doo),e(gs,coo),e(gs,bR),e(bR,foo),e(gs,moo),e(gs,vR),e(vR,goo),e(gs,hoo),e(k,poo),e(k,hs),e(hs,tre),e(tre,uoo),e(hs,_oo),e(hs,FR),e(FR,boo),e(hs,voo),e(hs,TR),e(TR,Foo),e(hs,Too),e(k,Moo),e(k,ps),e(ps,are),e(are,Eoo),e(ps,Coo),e(ps,MR),e(MR,woo),e(ps,Aoo),e(ps,ER),e(ER,yoo),e(ps,Loo),e(k,xoo),e(k,us),e(us,nre),e(nre,$oo),e(us,koo),e(us,CR),e(CR,Soo),e(us,Roo),e(us,wR),e(wR,Boo),e(us,Poo),e(k,Ioo),e(k,_s),e(_s,sre),e(sre,qoo),e(_s,Noo),e(_s,AR),e(AR,joo),e(_s,Doo),e(_s,yR),e(yR,Goo),e(_s,Ooo),e(k,Voo),e(k,bs),e(bs,lre),e(lre,Xoo),e(bs,zoo),e(bs,LR),e(LR,Qoo),e(bs,Woo),e(bs,xR),e(xR,Hoo),e(bs,Uoo),e(k,Joo),e(k,Ag),e(Ag,ire),e(ire,Yoo),e(Ag,Koo),e(Ag,$R),e($R,Zoo),e(Ag,ero),e(k,oro),e(k,yg),e(yg,dre),e(dre,rro),e(yg,tro),e(yg,kR),e(kR,aro),e(yg,nro),e(k,sro),e(k,vs),e(vs,cre),e(cre,lro),e(vs,iro),e(vs,SR),e(SR,dro),e(vs,cro),e(vs,RR),e(RR,fro),e(vs,mro),e(k,gro),e(k,Fs),e(Fs,fre),e(fre,hro),e(Fs,pro),e(Fs,BR),e(BR,uro),e(Fs,_ro),e(Fs,PR),e(PR,bro),e(Fs,vro),e(k,Fro),e(k,Ts),e(Ts,mre),e(mre,Tro),e(Ts,Mro),e(Ts,IR),e(IR,Ero),e(Ts,Cro),e(Ts,qR),e(qR,wro),e(Ts,Aro),e(k,yro),e(k,Lg),e(Lg,gre),e(gre,Lro),e(Lg,xro),e(Lg,NR),e(NR,$ro),e(Lg,kro),e(k,Sro),e(k,xg),e(xg,hre),e(hre,Rro),e(xg,Bro),e(xg,jR),e(jR,Pro),e(xg,Iro),e(k,qro),e(k,$g),e($g,pre),e(pre,Nro),e($g,jro),e($g,DR),e(DR,Dro),e($g,Gro),e(k,Oro),e(k,Ms),e(Ms,ure),e(ure,Vro),e(Ms,Xro),e(Ms,GR),e(GR,zro),e(Ms,Qro),e(Ms,OR),e(OR,Wro),e(Ms,Hro),e(k,Uro),e(k,kg),e(kg,_re),e(_re,Jro),e(kg,Yro),e(kg,VR),e(VR,Kro),e(kg,Zro),e(k,eto),e(k,Sg),e(Sg,bre),e(bre,oto),e(Sg,rto),e(Sg,XR),e(XR,tto),e(Sg,ato),e(k,nto),e(k,Es),e(Es,vre),e(vre,sto),e(Es,lto),e(Es,zR),e(zR,ito),e(Es,dto),e(Es,QR),e(QR,cto),e(Es,fto),e(k,mto),e(k,Rg),e(Rg,Fre),e(Fre,gto),e(Rg,hto),e(Rg,WR),e(WR,pto),e(Rg,uto),e(k,_to),e(k,Bg),e(Bg,Tre),e(Tre,bto),e(Bg,vto),e(Bg,HR),e(HR,Fto),e(Bg,Tto),e(k,Mto),e(k,Cs),e(Cs,Mre),e(Mre,Eto),e(Cs,Cto),e(Cs,UR),e(UR,wto),e(Cs,Ato),e(Cs,JR),e(JR,yto),e(Cs,Lto),e(k,xto),e(k,ws),e(ws,Ere),e(Ere,$to),e(ws,kto),e(ws,YR),e(YR,Sto),e(ws,Rto),e(ws,KR),e(KR,Bto),e(ws,Pto),e(k,Ito),e(k,As),e(As,Cre),e(Cre,qto),e(As,Nto),e(As,ZR),e(ZR,jto),e(As,Dto),e(As,eB),e(eB,Gto),e(As,Oto),e(k,Vto),e(k,ys),e(ys,wre),e(wre,Xto),e(ys,zto),e(ys,oB),e(oB,Qto),e(ys,Wto),e(ys,rB),e(rB,Hto),e(ys,Uto),e(Mr,Jto),M(Pg,Mr,null),e(Eo,Yto),e(Eo,Ig),M(yA,Ig,null),e(Ig,Kto),e(Ig,Are),e(Are,Zto),b(f,DRe,_),b(f,mi,_),e(mi,qg),e(qg,yre),M(LA,yre,null),e(mi,eao),e(mi,Lre),e(Lre,oao),b(f,GRe,_),b(f,Co,_),M(xA,Co,null),e(Co,rao),e(Co,$A),e($A,tao),e($A,tB),e(tB,aao),e($A,nao),e(Co,sao),e(Co,kA),e(kA,lao),e(kA,xre),e(xre,iao),e(kA,dao),e(Co,cao),e(Co,Xe),M(SA,Xe,null),e(Xe,fao),e(Xe,$re),e($re,mao),e(Xe,gao),e(Xe,Ma),e(Ma,hao),e(Ma,kre),e(kre,pao),e(Ma,uao),e(Ma,Sre),e(Sre,_ao),e(Ma,bao),e(Ma,Rre),e(Rre,vao),e(Ma,Fao),e(Xe,Tao),e(Xe,ae),e(ae,Ng),e(Ng,Bre),e(Bre,Mao),e(Ng,Eao),e(Ng,aB),e(aB,Cao),e(Ng,wao),e(ae,Aao),e(ae,jg),e(jg,Pre),e(Pre,yao),e(jg,Lao),e(jg,nB),e(nB,xao),e(jg,$ao),e(ae,kao),e(ae,Dg),e(Dg,Ire),e(Ire,Sao),e(Dg,Rao),e(Dg,sB),e(sB,Bao),e(Dg,Pao),e(ae,Iao),e(ae,Gg),e(Gg,qre),e(qre,qao),e(Gg,Nao),e(Gg,lB),e(lB,jao),e(Gg,Dao),e(ae,Gao),e(ae,Og),e(Og,Nre),e(Nre,Oao),e(Og,Vao),e(Og,iB),e(iB,Xao),e(Og,zao),e(ae,Qao),e(ae,Vg),e(Vg,jre),e(jre,Wao),e(Vg,Hao),e(Vg,dB),e(dB,Uao),e(Vg,Jao),e(ae,Yao),e(ae,Xg),e(Xg,Dre),e(Dre,Kao),e(Xg,Zao),e(Xg,cB),e(cB,eno),e(Xg,ono),e(ae,rno),e(ae,zg),e(zg,Gre),e(Gre,tno),e(zg,ano),e(zg,fB),e(fB,nno),e(zg,sno),e(ae,lno),e(ae,Qg),e(Qg,Ore),e(Ore,ino),e(Qg,dno),e(Qg,mB),e(mB,cno),e(Qg,fno),e(ae,mno),e(ae,Wg),e(Wg,Vre),e(Vre,gno),e(Wg,hno),e(Wg,gB),e(gB,pno),e(Wg,uno),e(ae,_no),e(ae,Hg),e(Hg,Xre),e(Xre,bno),e(Hg,vno),e(Hg,hB),e(hB,Fno),e(Hg,Tno),e(ae,Mno),e(ae,Ug),e(Ug,zre),e(zre,Eno),e(Ug,Cno),e(Ug,pB),e(pB,wno),e(Ug,Ano),e(ae,yno),e(ae,Jg),e(Jg,Qre),e(Qre,Lno),e(Jg,xno),e(Jg,uB),e(uB,$no),e(Jg,kno),e(ae,Sno),e(ae,Yg),e(Yg,Wre),e(Wre,Rno),e(Yg,Bno),e(Yg,_B),e(_B,Pno),e(Yg,Ino),e(ae,qno),e(ae,Kg),e(Kg,Hre),e(Hre,Nno),e(Kg,jno),e(Kg,bB),e(bB,Dno),e(Kg,Gno),e(ae,Ono),e(ae,Zg),e(Zg,Ure),e(Ure,Vno),e(Zg,Xno),e(Zg,vB),e(vB,zno),e(Zg,Qno),e(ae,Wno),e(ae,eh),e(eh,Jre),e(Jre,Hno),e(eh,Uno),e(eh,FB),e(FB,Jno),e(eh,Yno),e(ae,Kno),e(ae,oh),e(oh,Yre),e(Yre,Zno),e(oh,eso),e(oh,TB),e(TB,oso),e(oh,rso),e(ae,tso),e(ae,rh),e(rh,Kre),e(Kre,aso),e(rh,nso),e(rh,MB),e(MB,sso),e(rh,lso),e(ae,iso),e(ae,th),e(th,Zre),e(Zre,dso),e(th,cso),e(th,EB),e(EB,fso),e(th,mso),e(ae,gso),e(ae,ah),e(ah,ete),e(ete,hso),e(ah,pso),e(ah,CB),e(CB,uso),e(ah,_so),e(ae,bso),e(ae,nh),e(nh,ote),e(ote,vso),e(nh,Fso),e(nh,wB),e(wB,Tso),e(nh,Mso),e(ae,Eso),e(ae,sh),e(sh,rte),e(rte,Cso),e(sh,wso),e(sh,AB),e(AB,Aso),e(sh,yso),e(Xe,Lso),M(lh,Xe,null),e(Xe,xso),M(ih,Xe,null),e(Co,$so),e(Co,dh),M(RA,dh,null),e(dh,kso),e(dh,tte),e(tte,Sso),b(f,ORe,_),b(f,gi,_),e(gi,ch),e(ch,ate),M(BA,ate,null),e(gi,Rso),e(gi,nte),e(nte,Bso),b(f,VRe,_),b(f,wo,_),M(PA,wo,null),e(wo,Pso),e(wo,IA),e(IA,Iso),e(IA,yB),e(yB,qso),e(IA,Nso),e(wo,jso),e(wo,qA),e(qA,Dso),e(qA,ste),e(ste,Gso),e(qA,Oso),e(wo,Vso),e(wo,ze),M(NA,ze,null),e(ze,Xso),e(ze,lte),e(lte,zso),e(ze,Qso),e(ze,hi),e(hi,Wso),e(hi,ite),e(ite,Hso),e(hi,Uso),e(hi,dte),e(dte,Jso),e(hi,Yso),e(ze,Kso),e(ze,be),e(be,fh),e(fh,cte),e(cte,Zso),e(fh,elo),e(fh,LB),e(LB,olo),e(fh,rlo),e(be,tlo),e(be,mh),e(mh,fte),e(fte,alo),e(mh,nlo),e(mh,xB),e(xB,slo),e(mh,llo),e(be,ilo),e(be,gh),e(gh,mte),e(mte,dlo),e(gh,clo),e(gh,$B),e($B,flo),e(gh,mlo),e(be,glo),e(be,hh),e(hh,gte),e(gte,hlo),e(hh,plo),e(hh,kB),e(kB,ulo),e(hh,_lo),e(be,blo),e(be,ph),e(ph,hte),e(hte,vlo),e(ph,Flo),e(ph,SB),e(SB,Tlo),e(ph,Mlo),e(be,Elo),e(be,uh),e(uh,pte),e(pte,Clo),e(uh,wlo),e(uh,RB),e(RB,Alo),e(uh,ylo),e(be,Llo),e(be,_h),e(_h,ute),e(ute,xlo),e(_h,$lo),e(_h,BB),e(BB,klo),e(_h,Slo),e(be,Rlo),e(be,bh),e(bh,_te),e(_te,Blo),e(bh,Plo),e(bh,PB),e(PB,Ilo),e(bh,qlo),e(be,Nlo),e(be,vh),e(vh,bte),e(bte,jlo),e(vh,Dlo),e(vh,IB),e(IB,Glo),e(vh,Olo),e(be,Vlo),e(be,Fh),e(Fh,vte),e(vte,Xlo),e(Fh,zlo),e(Fh,qB),e(qB,Qlo),e(Fh,Wlo),e(be,Hlo),e(be,Th),e(Th,Fte),e(Fte,Ulo),e(Th,Jlo),e(Th,NB),e(NB,Ylo),e(Th,Klo),e(be,Zlo),e(be,Mh),e(Mh,Tte),e(Tte,eio),e(Mh,oio),e(Mh,jB),e(jB,rio),e(Mh,tio),e(be,aio),e(be,Eh),e(Eh,Mte),e(Mte,nio),e(Eh,sio),e(Eh,DB),e(DB,lio),e(Eh,iio),e(be,dio),e(be,Ch),e(Ch,Ete),e(Ete,cio),e(Ch,fio),e(Ch,GB),e(GB,mio),e(Ch,gio),e(ze,hio),M(wh,ze,null),e(ze,pio),M(Ah,ze,null),e(wo,uio),e(wo,yh),M(jA,yh,null),e(yh,_io),e(yh,Cte),e(Cte,bio),b(f,XRe,_),b(f,pi,_),e(pi,Lh),e(Lh,wte),M(DA,wte,null),e(pi,vio),e(pi,Ate),e(Ate,Fio),b(f,zRe,_),b(f,Ao,_),M(GA,Ao,null),e(Ao,Tio),e(Ao,ui),e(ui,Mio),e(ui,OB),e(OB,Eio),e(ui,Cio),e(ui,VB),e(VB,wio),e(ui,Aio),e(Ao,yio),e(Ao,OA),e(OA,Lio),e(OA,yte),e(yte,xio),e(OA,$io),e(Ao,kio),e(Ao,Kr),M(VA,Kr,null),e(Kr,Sio),e(Kr,Lte),e(Lte,Rio),e(Kr,Bio),e(Kr,_i),e(_i,Pio),e(_i,xte),e(xte,Iio),e(_i,qio),e(_i,XB),e(XB,Nio),e(_i,jio),e(Kr,Dio),M(xh,Kr,null),e(Ao,Gio),e(Ao,Qe),M(XA,Qe,null),e(Qe,Oio),e(Qe,$te),e($te,Vio),e(Qe,Xio),e(Qe,Ea),e(Ea,zio),e(Ea,kte),e(kte,Qio),e(Ea,Wio),e(Ea,Ste),e(Ste,Hio),e(Ea,Uio),e(Ea,Rte),e(Rte,Jio),e(Ea,Yio),e(Qe,Kio),e(Qe,x),e(x,$h),e($h,Bte),e(Bte,Zio),e($h,edo),e($h,zB),e(zB,odo),e($h,rdo),e(x,tdo),e(x,kh),e(kh,Pte),e(Pte,ado),e(kh,ndo),e(kh,QB),e(QB,sdo),e(kh,ldo),e(x,ido),e(x,Sh),e(Sh,Ite),e(Ite,ddo),e(Sh,cdo),e(Sh,WB),e(WB,fdo),e(Sh,mdo),e(x,gdo),e(x,Rh),e(Rh,qte),e(qte,hdo),e(Rh,pdo),e(Rh,HB),e(HB,udo),e(Rh,_do),e(x,bdo),e(x,Bh),e(Bh,Nte),e(Nte,vdo),e(Bh,Fdo),e(Bh,UB),e(UB,Tdo),e(Bh,Mdo),e(x,Edo),e(x,Ph),e(Ph,jte),e(jte,Cdo),e(Ph,wdo),e(Ph,JB),e(JB,Ado),e(Ph,ydo),e(x,Ldo),e(x,Ih),e(Ih,Dte),e(Dte,xdo),e(Ih,$do),e(Ih,YB),e(YB,kdo),e(Ih,Sdo),e(x,Rdo),e(x,qh),e(qh,Gte),e(Gte,Bdo),e(qh,Pdo),e(qh,KB),e(KB,Ido),e(qh,qdo),e(x,Ndo),e(x,Nh),e(Nh,Ote),e(Ote,jdo),e(Nh,Ddo),e(Nh,ZB),e(ZB,Gdo),e(Nh,Odo),e(x,Vdo),e(x,jh),e(jh,Vte),e(Vte,Xdo),e(jh,zdo),e(jh,eP),e(eP,Qdo),e(jh,Wdo),e(x,Hdo),e(x,Dh),e(Dh,Xte),e(Xte,Udo),e(Dh,Jdo),e(Dh,oP),e(oP,Ydo),e(Dh,Kdo),e(x,Zdo),e(x,Gh),e(Gh,zte),e(zte,eco),e(Gh,oco),e(Gh,rP),e(rP,rco),e(Gh,tco),e(x,aco),e(x,Oh),e(Oh,Qte),e(Qte,nco),e(Oh,sco),e(Oh,tP),e(tP,lco),e(Oh,ico),e(x,dco),e(x,Vh),e(Vh,Wte),e(Wte,cco),e(Vh,fco),e(Vh,aP),e(aP,mco),e(Vh,gco),e(x,hco),e(x,Xh),e(Xh,Hte),e(Hte,pco),e(Xh,uco),e(Xh,nP),e(nP,_co),e(Xh,bco),e(x,vco),e(x,zh),e(zh,Ute),e(Ute,Fco),e(zh,Tco),e(zh,sP),e(sP,Mco),e(zh,Eco),e(x,Cco),e(x,Qh),e(Qh,Jte),e(Jte,wco),e(Qh,Aco),e(Qh,lP),e(lP,yco),e(Qh,Lco),e(x,xco),e(x,Wh),e(Wh,Yte),e(Yte,$co),e(Wh,kco),e(Wh,iP),e(iP,Sco),e(Wh,Rco),e(x,Bco),e(x,Hh),e(Hh,Kte),e(Kte,Pco),e(Hh,Ico),e(Hh,dP),e(dP,qco),e(Hh,Nco),e(x,jco),e(x,Uh),e(Uh,Zte),e(Zte,Dco),e(Uh,Gco),e(Uh,cP),e(cP,Oco),e(Uh,Vco),e(x,Xco),e(x,Jh),e(Jh,eae),e(eae,zco),e(Jh,Qco),e(Jh,fP),e(fP,Wco),e(Jh,Hco),e(x,Uco),e(x,Yh),e(Yh,oae),e(oae,Jco),e(Yh,Yco),e(Yh,mP),e(mP,Kco),e(Yh,Zco),e(x,efo),e(x,Kh),e(Kh,rae),e(rae,ofo),e(Kh,rfo),e(Kh,gP),e(gP,tfo),e(Kh,afo),e(x,nfo),e(x,Zh),e(Zh,tae),e(tae,sfo),e(Zh,lfo),e(Zh,hP),e(hP,ifo),e(Zh,dfo),e(x,cfo),e(x,ep),e(ep,aae),e(aae,ffo),e(ep,mfo),e(ep,pP),e(pP,gfo),e(ep,hfo),e(x,pfo),e(x,op),e(op,nae),e(nae,ufo),e(op,_fo),e(op,uP),e(uP,bfo),e(op,vfo),e(x,Ffo),e(x,rp),e(rp,sae),e(sae,Tfo),e(rp,Mfo),e(rp,_P),e(_P,Efo),e(rp,Cfo),e(x,wfo),e(x,tp),e(tp,lae),e(lae,Afo),e(tp,yfo),e(tp,bP),e(bP,Lfo),e(tp,xfo),e(x,$fo),e(x,ap),e(ap,iae),e(iae,kfo),e(ap,Sfo),e(ap,vP),e(vP,Rfo),e(ap,Bfo),e(x,Pfo),e(x,np),e(np,dae),e(dae,Ifo),e(np,qfo),e(np,FP),e(FP,Nfo),e(np,jfo),e(x,Dfo),e(x,Ls),e(Ls,cae),e(cae,Gfo),e(Ls,Ofo),e(Ls,TP),e(TP,Vfo),e(Ls,Xfo),e(Ls,MP),e(MP,zfo),e(Ls,Qfo),e(x,Wfo),e(x,sp),e(sp,fae),e(fae,Hfo),e(sp,Ufo),e(sp,EP),e(EP,Jfo),e(sp,Yfo),e(x,Kfo),e(x,lp),e(lp,mae),e(mae,Zfo),e(lp,emo),e(lp,CP),e(CP,omo),e(lp,rmo),e(x,tmo),e(x,ip),e(ip,gae),e(gae,amo),e(ip,nmo),e(ip,wP),e(wP,smo),e(ip,lmo),e(x,imo),e(x,dp),e(dp,hae),e(hae,dmo),e(dp,cmo),e(dp,AP),e(AP,fmo),e(dp,mmo),e(x,gmo),e(x,cp),e(cp,pae),e(pae,hmo),e(cp,pmo),e(cp,yP),e(yP,umo),e(cp,_mo),e(x,bmo),e(x,fp),e(fp,uae),e(uae,vmo),e(fp,Fmo),e(fp,LP),e(LP,Tmo),e(fp,Mmo),e(x,Emo),e(x,mp),e(mp,_ae),e(_ae,Cmo),e(mp,wmo),e(mp,xP),e(xP,Amo),e(mp,ymo),e(x,Lmo),e(x,gp),e(gp,bae),e(bae,xmo),e(gp,$mo),e(gp,$P),e($P,kmo),e(gp,Smo),e(x,Rmo),e(x,hp),e(hp,vae),e(vae,Bmo),e(hp,Pmo),e(hp,kP),e(kP,Imo),e(hp,qmo),e(x,Nmo),e(x,pp),e(pp,Fae),e(Fae,jmo),e(pp,Dmo),e(pp,SP),e(SP,Gmo),e(pp,Omo),e(x,Vmo),e(x,up),e(up,Tae),e(Tae,Xmo),e(up,zmo),e(up,RP),e(RP,Qmo),e(up,Wmo),e(x,Hmo),e(x,_p),e(_p,Mae),e(Mae,Umo),e(_p,Jmo),e(_p,BP),e(BP,Ymo),e(_p,Kmo),e(x,Zmo),e(x,bp),e(bp,Eae),e(Eae,ego),e(bp,ogo),e(bp,PP),e(PP,rgo),e(bp,tgo),e(x,ago),e(x,vp),e(vp,Cae),e(Cae,ngo),e(vp,sgo),e(vp,IP),e(IP,lgo),e(vp,igo),e(x,dgo),e(x,Fp),e(Fp,wae),e(wae,cgo),e(Fp,fgo),e(Fp,qP),e(qP,mgo),e(Fp,ggo),e(x,hgo),e(x,Tp),e(Tp,Aae),e(Aae,pgo),e(Tp,ugo),e(Tp,NP),e(NP,_go),e(Tp,bgo),e(x,vgo),e(x,Mp),e(Mp,yae),e(yae,Fgo),e(Mp,Tgo),e(Mp,jP),e(jP,Mgo),e(Mp,Ego),e(x,Cgo),e(x,Ep),e(Ep,Lae),e(Lae,wgo),e(Ep,Ago),e(Ep,DP),e(DP,ygo),e(Ep,Lgo),e(x,xgo),e(x,Cp),e(Cp,xae),e(xae,$go),e(Cp,kgo),e(Cp,GP),e(GP,Sgo),e(Cp,Rgo),e(x,Bgo),e(x,wp),e(wp,$ae),e($ae,Pgo),e(wp,Igo),e(wp,OP),e(OP,qgo),e(wp,Ngo),e(x,jgo),e(x,Ap),e(Ap,kae),e(kae,Dgo),e(Ap,Ggo),e(Ap,VP),e(VP,Ogo),e(Ap,Vgo),e(x,Xgo),e(x,yp),e(yp,Sae),e(Sae,zgo),e(yp,Qgo),e(yp,XP),e(XP,Wgo),e(yp,Hgo),e(x,Ugo),e(x,Lp),e(Lp,Rae),e(Rae,Jgo),e(Lp,Ygo),e(Lp,zP),e(zP,Kgo),e(Lp,Zgo),e(x,eho),e(x,xp),e(xp,Bae),e(Bae,oho),e(xp,rho),e(xp,QP),e(QP,tho),e(xp,aho),e(x,nho),e(x,$p),e($p,Pae),e(Pae,sho),e($p,lho),e($p,WP),e(WP,iho),e($p,dho),e(x,cho),e(x,kp),e(kp,Iae),e(Iae,fho),e(kp,mho),e(kp,HP),e(HP,gho),e(kp,hho),e(x,pho),e(x,Sp),e(Sp,qae),e(qae,uho),e(Sp,_ho),e(Sp,UP),e(UP,bho),e(Sp,vho),e(x,Fho),e(x,Rp),e(Rp,Nae),e(Nae,Tho),e(Rp,Mho),e(Rp,JP),e(JP,Eho),e(Rp,Cho),e(x,who),e(x,Bp),e(Bp,jae),e(jae,Aho),e(Bp,yho),e(Bp,YP),e(YP,Lho),e(Bp,xho),e(x,$ho),e(x,Pp),e(Pp,Dae),e(Dae,kho),e(Pp,Sho),e(Pp,KP),e(KP,Rho),e(Pp,Bho),e(x,Pho),e(x,Ip),e(Ip,Gae),e(Gae,Iho),e(Ip,qho),e(Ip,ZP),e(ZP,Nho),e(Ip,jho),e(x,Dho),e(x,qp),e(qp,Oae),e(Oae,Gho),e(qp,Oho),e(qp,eI),e(eI,Vho),e(qp,Xho),e(x,zho),e(x,Np),e(Np,Vae),e(Vae,Qho),e(Np,Who),e(Np,oI),e(oI,Hho),e(Np,Uho),e(x,Jho),e(x,jp),e(jp,Xae),e(Xae,Yho),e(jp,Kho),e(jp,rI),e(rI,Zho),e(jp,epo),e(x,opo),e(x,Dp),e(Dp,zae),e(zae,rpo),e(Dp,tpo),e(Dp,tI),e(tI,apo),e(Dp,npo),e(x,spo),e(x,Gp),e(Gp,Qae),e(Qae,lpo),e(Gp,ipo),e(Gp,aI),e(aI,dpo),e(Gp,cpo),e(x,fpo),e(x,Op),e(Op,Wae),e(Wae,mpo),e(Op,gpo),e(Op,nI),e(nI,hpo),e(Op,ppo),e(x,upo),e(x,Vp),e(Vp,Hae),e(Hae,_po),e(Vp,bpo),e(Vp,sI),e(sI,vpo),e(Vp,Fpo),e(x,Tpo),e(x,Xp),e(Xp,Uae),e(Uae,Mpo),e(Xp,Epo),e(Xp,lI),e(lI,Cpo),e(Xp,wpo),e(x,Apo),e(x,zp),e(zp,Jae),e(Jae,ypo),e(zp,Lpo),e(zp,iI),e(iI,xpo),e(zp,$po),e(x,kpo),e(x,Qp),e(Qp,Yae),e(Yae,Spo),e(Qp,Rpo),e(Qp,dI),e(dI,Bpo),e(Qp,Ppo),e(x,Ipo),e(x,Wp),e(Wp,Kae),e(Kae,qpo),e(Wp,Npo),e(Wp,cI),e(cI,jpo),e(Wp,Dpo),e(x,Gpo),e(x,Hp),e(Hp,Zae),e(Zae,Opo),e(Hp,Vpo),e(Hp,fI),e(fI,Xpo),e(Hp,zpo),e(x,Qpo),e(x,Up),e(Up,ene),e(ene,Wpo),e(Up,Hpo),e(Up,mI),e(mI,Upo),e(Up,Jpo),e(x,Ypo),e(x,Jp),e(Jp,one),e(one,Kpo),e(Jp,Zpo),e(Jp,gI),e(gI,euo),e(Jp,ouo),e(x,ruo),e(x,Yp),e(Yp,rne),e(rne,tuo),e(Yp,auo),e(Yp,hI),e(hI,nuo),e(Yp,suo),e(x,luo),e(x,Kp),e(Kp,tne),e(tne,iuo),e(Kp,duo),e(Kp,pI),e(pI,cuo),e(Kp,fuo),e(x,muo),e(x,Zp),e(Zp,ane),e(ane,guo),e(Zp,huo),e(Zp,uI),e(uI,puo),e(Zp,uuo),e(x,_uo),e(x,eu),e(eu,nne),e(nne,buo),e(eu,vuo),e(eu,_I),e(_I,Fuo),e(eu,Tuo),e(x,Muo),e(x,ou),e(ou,sne),e(sne,Euo),e(ou,Cuo),e(ou,bI),e(bI,wuo),e(ou,Auo),e(x,yuo),e(x,ru),e(ru,lne),e(lne,Luo),e(ru,xuo),e(ru,vI),e(vI,$uo),e(ru,kuo),e(x,Suo),e(x,tu),e(tu,ine),e(ine,Ruo),e(tu,Buo),e(tu,FI),e(FI,Puo),e(tu,Iuo),e(x,quo),e(x,au),e(au,dne),e(dne,Nuo),e(au,juo),e(au,TI),e(TI,Duo),e(au,Guo),e(x,Ouo),e(x,nu),e(nu,cne),e(cne,Vuo),e(nu,Xuo),e(nu,MI),e(MI,zuo),e(nu,Quo),e(x,Wuo),e(x,su),e(su,fne),e(fne,Huo),e(su,Uuo),e(su,EI),e(EI,Juo),e(su,Yuo),e(x,Kuo),e(x,lu),e(lu,mne),e(mne,Zuo),e(lu,e_o),e(lu,CI),e(CI,o_o),e(lu,r_o),e(x,t_o),e(x,iu),e(iu,gne),e(gne,a_o),e(iu,n_o),e(iu,wI),e(wI,s_o),e(iu,l_o),e(x,i_o),e(x,du),e(du,hne),e(hne,d_o),e(du,c_o),e(du,AI),e(AI,f_o),e(du,m_o),e(x,g_o),e(x,cu),e(cu,pne),e(pne,h_o),e(cu,p_o),e(cu,yI),e(yI,u_o),e(cu,__o),e(x,b_o),e(x,fu),e(fu,une),e(une,v_o),e(fu,F_o),e(fu,LI),e(LI,T_o),e(fu,M_o),e(x,E_o),e(x,mu),e(mu,_ne),e(_ne,C_o),e(mu,w_o),e(mu,xI),e(xI,A_o),e(mu,y_o),e(x,L_o),e(x,gu),e(gu,bne),e(bne,x_o),e(gu,$_o),e(gu,$I),e($I,k_o),e(gu,S_o),e(x,R_o),e(x,hu),e(hu,vne),e(vne,B_o),e(hu,P_o),e(hu,kI),e(kI,I_o),e(hu,q_o),e(Qe,N_o),e(Qe,pu),e(pu,j_o),e(pu,Fne),e(Fne,D_o),e(pu,G_o),e(pu,Tne),e(Tne,O_o),e(Qe,V_o),M(uu,Qe,null),b(f,QRe,_),b(f,bi,_),e(bi,_u),e(_u,Mne),M(zA,Mne,null),e(bi,X_o),e(bi,Ene),e(Ene,z_o),b(f,WRe,_),b(f,yo,_),M(QA,yo,null),e(yo,Q_o),e(yo,vi),e(vi,W_o),e(vi,SI),e(SI,H_o),e(vi,U_o),e(vi,RI),e(RI,J_o),e(vi,Y_o),e(yo,K_o),e(yo,WA),e(WA,Z_o),e(WA,Cne),e(Cne,e1o),e(WA,o1o),e(yo,r1o),e(yo,Zr),M(HA,Zr,null),e(Zr,t1o),e(Zr,wne),e(wne,a1o),e(Zr,n1o),e(Zr,Fi),e(Fi,s1o),e(Fi,Ane),e(Ane,l1o),e(Fi,i1o),e(Fi,BI),e(BI,d1o),e(Fi,c1o),e(Zr,f1o),M(bu,Zr,null),e(yo,m1o),e(yo,We),M(UA,We,null),e(We,g1o),e(We,yne),e(yne,h1o),e(We,p1o),e(We,Ca),e(Ca,u1o),e(Ca,Lne),e(Lne,_1o),e(Ca,b1o),e(Ca,xne),e(xne,v1o),e(Ca,F1o),e(Ca,$ne),e($ne,T1o),e(Ca,M1o),e(We,E1o),e(We,G),e(G,vu),e(vu,kne),e(kne,C1o),e(vu,w1o),e(vu,PI),e(PI,A1o),e(vu,y1o),e(G,L1o),e(G,Fu),e(Fu,Sne),e(Sne,x1o),e(Fu,$1o),e(Fu,II),e(II,k1o),e(Fu,S1o),e(G,R1o),e(G,Tu),e(Tu,Rne),e(Rne,B1o),e(Tu,P1o),e(Tu,qI),e(qI,I1o),e(Tu,q1o),e(G,N1o),e(G,Mu),e(Mu,Bne),e(Bne,j1o),e(Mu,D1o),e(Mu,NI),e(NI,G1o),e(Mu,O1o),e(G,V1o),e(G,Eu),e(Eu,Pne),e(Pne,X1o),e(Eu,z1o),e(Eu,jI),e(jI,Q1o),e(Eu,W1o),e(G,H1o),e(G,Cu),e(Cu,Ine),e(Ine,U1o),e(Cu,J1o),e(Cu,DI),e(DI,Y1o),e(Cu,K1o),e(G,Z1o),e(G,wu),e(wu,qne),e(qne,e9o),e(wu,o9o),e(wu,GI),e(GI,r9o),e(wu,t9o),e(G,a9o),e(G,Au),e(Au,Nne),e(Nne,n9o),e(Au,s9o),e(Au,OI),e(OI,l9o),e(Au,i9o),e(G,d9o),e(G,yu),e(yu,jne),e(jne,c9o),e(yu,f9o),e(yu,VI),e(VI,m9o),e(yu,g9o),e(G,h9o),e(G,Lu),e(Lu,Dne),e(Dne,p9o),e(Lu,u9o),e(Lu,XI),e(XI,_9o),e(Lu,b9o),e(G,v9o),e(G,xu),e(xu,Gne),e(Gne,F9o),e(xu,T9o),e(xu,zI),e(zI,M9o),e(xu,E9o),e(G,C9o),e(G,$u),e($u,One),e(One,w9o),e($u,A9o),e($u,QI),e(QI,y9o),e($u,L9o),e(G,x9o),e(G,ku),e(ku,Vne),e(Vne,$9o),e(ku,k9o),e(ku,WI),e(WI,S9o),e(ku,R9o),e(G,B9o),e(G,Su),e(Su,Xne),e(Xne,P9o),e(Su,I9o),e(Su,HI),e(HI,q9o),e(Su,N9o),e(G,j9o),e(G,Ru),e(Ru,zne),e(zne,D9o),e(Ru,G9o),e(Ru,UI),e(UI,O9o),e(Ru,V9o),e(G,X9o),e(G,Bu),e(Bu,Qne),e(Qne,z9o),e(Bu,Q9o),e(Bu,JI),e(JI,W9o),e(Bu,H9o),e(G,U9o),e(G,Pu),e(Pu,Wne),e(Wne,J9o),e(Pu,Y9o),e(Pu,YI),e(YI,K9o),e(Pu,Z9o),e(G,ebo),e(G,Iu),e(Iu,Hne),e(Hne,obo),e(Iu,rbo),e(Iu,KI),e(KI,tbo),e(Iu,abo),e(G,nbo),e(G,qu),e(qu,Une),e(Une,sbo),e(qu,lbo),e(qu,ZI),e(ZI,ibo),e(qu,dbo),e(G,cbo),e(G,Nu),e(Nu,Jne),e(Jne,fbo),e(Nu,mbo),e(Nu,eq),e(eq,gbo),e(Nu,hbo),e(G,pbo),e(G,ju),e(ju,Yne),e(Yne,ubo),e(ju,_bo),e(ju,oq),e(oq,bbo),e(ju,vbo),e(G,Fbo),e(G,Du),e(Du,Kne),e(Kne,Tbo),e(Du,Mbo),e(Du,rq),e(rq,Ebo),e(Du,Cbo),e(G,wbo),e(G,Gu),e(Gu,Zne),e(Zne,Abo),e(Gu,ybo),e(Gu,tq),e(tq,Lbo),e(Gu,xbo),e(G,$bo),e(G,Ou),e(Ou,ese),e(ese,kbo),e(Ou,Sbo),e(Ou,aq),e(aq,Rbo),e(Ou,Bbo),e(G,Pbo),e(G,Vu),e(Vu,ose),e(ose,Ibo),e(Vu,qbo),e(Vu,nq),e(nq,Nbo),e(Vu,jbo),e(G,Dbo),e(G,Xu),e(Xu,rse),e(rse,Gbo),e(Xu,Obo),e(Xu,sq),e(sq,Vbo),e(Xu,Xbo),e(G,zbo),e(G,zu),e(zu,tse),e(tse,Qbo),e(zu,Wbo),e(zu,lq),e(lq,Hbo),e(zu,Ubo),e(G,Jbo),e(G,Qu),e(Qu,ase),e(ase,Ybo),e(Qu,Kbo),e(Qu,iq),e(iq,Zbo),e(Qu,e2o),e(G,o2o),e(G,Wu),e(Wu,nse),e(nse,r2o),e(Wu,t2o),e(Wu,dq),e(dq,a2o),e(Wu,n2o),e(G,s2o),e(G,Hu),e(Hu,sse),e(sse,l2o),e(Hu,i2o),e(Hu,cq),e(cq,d2o),e(Hu,c2o),e(G,f2o),e(G,Uu),e(Uu,lse),e(lse,m2o),e(Uu,g2o),e(Uu,fq),e(fq,h2o),e(Uu,p2o),e(G,u2o),e(G,Ju),e(Ju,ise),e(ise,_2o),e(Ju,b2o),e(Ju,mq),e(mq,v2o),e(Ju,F2o),e(G,T2o),e(G,Yu),e(Yu,dse),e(dse,M2o),e(Yu,E2o),e(Yu,gq),e(gq,C2o),e(Yu,w2o),e(G,A2o),e(G,Ku),e(Ku,cse),e(cse,y2o),e(Ku,L2o),e(Ku,hq),e(hq,x2o),e(Ku,$2o),e(G,k2o),e(G,Zu),e(Zu,fse),e(fse,S2o),e(Zu,R2o),e(Zu,pq),e(pq,B2o),e(Zu,P2o),e(G,I2o),e(G,e_),e(e_,mse),e(mse,q2o),e(e_,N2o),e(e_,uq),e(uq,j2o),e(e_,D2o),e(G,G2o),e(G,o_),e(o_,gse),e(gse,O2o),e(o_,V2o),e(o_,_q),e(_q,X2o),e(o_,z2o),e(G,Q2o),e(G,r_),e(r_,hse),e(hse,W2o),e(r_,H2o),e(r_,bq),e(bq,U2o),e(r_,J2o),e(G,Y2o),e(G,t_),e(t_,pse),e(pse,K2o),e(t_,Z2o),e(t_,vq),e(vq,e5o),e(t_,o5o),e(We,r5o),e(We,a_),e(a_,t5o),e(a_,use),e(use,a5o),e(a_,n5o),e(a_,_se),e(_se,s5o),e(We,l5o),M(n_,We,null),b(f,HRe,_),b(f,Ti,_),e(Ti,s_),e(s_,bse),M(JA,bse,null),e(Ti,i5o),e(Ti,vse),e(vse,d5o),b(f,URe,_),b(f,Lo,_),M(YA,Lo,null),e(Lo,c5o),e(Lo,Mi),e(Mi,f5o),e(Mi,Fq),e(Fq,m5o),e(Mi,g5o),e(Mi,Tq),e(Tq,h5o),e(Mi,p5o),e(Lo,u5o),e(Lo,KA),e(KA,_5o),e(KA,Fse),e(Fse,b5o),e(KA,v5o),e(Lo,F5o),e(Lo,et),M(ZA,et,null),e(et,T5o),e(et,Tse),e(Tse,M5o),e(et,E5o),e(et,Ei),e(Ei,C5o),e(Ei,Mse),e(Mse,w5o),e(Ei,A5o),e(Ei,Mq),e(Mq,y5o),e(Ei,L5o),e(et,x5o),M(l_,et,null),e(Lo,$5o),e(Lo,He),M(e0,He,null),e(He,k5o),e(He,Ese),e(Ese,S5o),e(He,R5o),e(He,wa),e(wa,B5o),e(wa,Cse),e(Cse,P5o),e(wa,I5o),e(wa,wse),e(wse,q5o),e(wa,N5o),e(wa,Ase),e(Ase,j5o),e(wa,D5o),e(He,G5o),e(He,z),e(z,i_),e(i_,yse),e(yse,O5o),e(i_,V5o),e(i_,Eq),e(Eq,X5o),e(i_,z5o),e(z,Q5o),e(z,d_),e(d_,Lse),e(Lse,W5o),e(d_,H5o),e(d_,Cq),e(Cq,U5o),e(d_,J5o),e(z,Y5o),e(z,c_),e(c_,xse),e(xse,K5o),e(c_,Z5o),e(c_,wq),e(wq,evo),e(c_,ovo),e(z,rvo),e(z,f_),e(f_,$se),e($se,tvo),e(f_,avo),e(f_,Aq),e(Aq,nvo),e(f_,svo),e(z,lvo),e(z,m_),e(m_,kse),e(kse,ivo),e(m_,dvo),e(m_,yq),e(yq,cvo),e(m_,fvo),e(z,mvo),e(z,g_),e(g_,Sse),e(Sse,gvo),e(g_,hvo),e(g_,Lq),e(Lq,pvo),e(g_,uvo),e(z,_vo),e(z,h_),e(h_,Rse),e(Rse,bvo),e(h_,vvo),e(h_,xq),e(xq,Fvo),e(h_,Tvo),e(z,Mvo),e(z,p_),e(p_,Bse),e(Bse,Evo),e(p_,Cvo),e(p_,$q),e($q,wvo),e(p_,Avo),e(z,yvo),e(z,u_),e(u_,Pse),e(Pse,Lvo),e(u_,xvo),e(u_,kq),e(kq,$vo),e(u_,kvo),e(z,Svo),e(z,__),e(__,Ise),e(Ise,Rvo),e(__,Bvo),e(__,Sq),e(Sq,Pvo),e(__,Ivo),e(z,qvo),e(z,b_),e(b_,qse),e(qse,Nvo),e(b_,jvo),e(b_,Rq),e(Rq,Dvo),e(b_,Gvo),e(z,Ovo),e(z,v_),e(v_,Nse),e(Nse,Vvo),e(v_,Xvo),e(v_,Bq),e(Bq,zvo),e(v_,Qvo),e(z,Wvo),e(z,F_),e(F_,jse),e(jse,Hvo),e(F_,Uvo),e(F_,Pq),e(Pq,Jvo),e(F_,Yvo),e(z,Kvo),e(z,T_),e(T_,Dse),e(Dse,Zvo),e(T_,eFo),e(T_,Iq),e(Iq,oFo),e(T_,rFo),e(z,tFo),e(z,M_),e(M_,Gse),e(Gse,aFo),e(M_,nFo),e(M_,qq),e(qq,sFo),e(M_,lFo),e(z,iFo),e(z,E_),e(E_,Ose),e(Ose,dFo),e(E_,cFo),e(E_,Nq),e(Nq,fFo),e(E_,mFo),e(z,gFo),e(z,C_),e(C_,Vse),e(Vse,hFo),e(C_,pFo),e(C_,jq),e(jq,uFo),e(C_,_Fo),e(z,bFo),e(z,w_),e(w_,Xse),e(Xse,vFo),e(w_,FFo),e(w_,Dq),e(Dq,TFo),e(w_,MFo),e(z,EFo),e(z,A_),e(A_,zse),e(zse,CFo),e(A_,wFo),e(A_,Gq),e(Gq,AFo),e(A_,yFo),e(z,LFo),e(z,y_),e(y_,Qse),e(Qse,xFo),e(y_,$Fo),e(y_,Oq),e(Oq,kFo),e(y_,SFo),e(z,RFo),e(z,L_),e(L_,Wse),e(Wse,BFo),e(L_,PFo),e(L_,Vq),e(Vq,IFo),e(L_,qFo),e(z,NFo),e(z,x_),e(x_,Hse),e(Hse,jFo),e(x_,DFo),e(x_,Xq),e(Xq,GFo),e(x_,OFo),e(z,VFo),e(z,$_),e($_,Use),e(Use,XFo),e($_,zFo),e($_,zq),e(zq,QFo),e($_,WFo),e(z,HFo),e(z,k_),e(k_,Jse),e(Jse,UFo),e(k_,JFo),e(k_,Qq),e(Qq,YFo),e(k_,KFo),e(z,ZFo),e(z,S_),e(S_,Yse),e(Yse,e6o),e(S_,o6o),e(S_,Wq),e(Wq,r6o),e(S_,t6o),e(z,a6o),e(z,R_),e(R_,Kse),e(Kse,n6o),e(R_,s6o),e(R_,Hq),e(Hq,l6o),e(R_,i6o),e(z,d6o),e(z,B_),e(B_,Zse),e(Zse,c6o),e(B_,f6o),e(B_,Uq),e(Uq,m6o),e(B_,g6o),e(z,h6o),e(z,P_),e(P_,ele),e(ele,p6o),e(P_,u6o),e(P_,Jq),e(Jq,_6o),e(P_,b6o),e(z,v6o),e(z,I_),e(I_,ole),e(ole,F6o),e(I_,T6o),e(I_,Yq),e(Yq,M6o),e(I_,E6o),e(z,C6o),e(z,q_),e(q_,rle),e(rle,w6o),e(q_,A6o),e(q_,Kq),e(Kq,y6o),e(q_,L6o),e(z,x6o),e(z,N_),e(N_,tle),e(tle,$6o),e(N_,k6o),e(N_,Zq),e(Zq,S6o),e(N_,R6o),e(z,B6o),e(z,j_),e(j_,ale),e(ale,P6o),e(j_,I6o),e(j_,eN),e(eN,q6o),e(j_,N6o),e(z,j6o),e(z,D_),e(D_,nle),e(nle,D6o),e(D_,G6o),e(D_,oN),e(oN,O6o),e(D_,V6o),e(z,X6o),e(z,G_),e(G_,sle),e(sle,z6o),e(G_,Q6o),e(G_,rN),e(rN,W6o),e(G_,H6o),e(z,U6o),e(z,O_),e(O_,lle),e(lle,J6o),e(O_,Y6o),e(O_,tN),e(tN,K6o),e(O_,Z6o),e(He,eTo),e(He,V_),e(V_,oTo),e(V_,ile),e(ile,rTo),e(V_,tTo),e(V_,dle),e(dle,aTo),e(He,nTo),M(X_,He,null),b(f,JRe,_),b(f,Ci,_),e(Ci,z_),e(z_,cle),M(o0,cle,null),e(Ci,sTo),e(Ci,fle),e(fle,lTo),b(f,YRe,_),b(f,xo,_),M(r0,xo,null),e(xo,iTo),e(xo,wi),e(wi,dTo),e(wi,aN),e(aN,cTo),e(wi,fTo),e(wi,nN),e(nN,mTo),e(wi,gTo),e(xo,hTo),e(xo,t0),e(t0,pTo),e(t0,mle),e(mle,uTo),e(t0,_To),e(xo,bTo),e(xo,ot),M(a0,ot,null),e(ot,vTo),e(ot,gle),e(gle,FTo),e(ot,TTo),e(ot,Ai),e(Ai,MTo),e(Ai,hle),e(hle,ETo),e(Ai,CTo),e(Ai,sN),e(sN,wTo),e(Ai,ATo),e(ot,yTo),M(Q_,ot,null),e(xo,LTo),e(xo,Ue),M(n0,Ue,null),e(Ue,xTo),e(Ue,ple),e(ple,$To),e(Ue,kTo),e(Ue,Aa),e(Aa,STo),e(Aa,ule),e(ule,RTo),e(Aa,BTo),e(Aa,_le),e(_le,PTo),e(Aa,ITo),e(Aa,ble),e(ble,qTo),e(Aa,NTo),e(Ue,jTo),e(Ue,Q),e(Q,W_),e(W_,vle),e(vle,DTo),e(W_,GTo),e(W_,lN),e(lN,OTo),e(W_,VTo),e(Q,XTo),e(Q,H_),e(H_,Fle),e(Fle,zTo),e(H_,QTo),e(H_,iN),e(iN,WTo),e(H_,HTo),e(Q,UTo),e(Q,U_),e(U_,Tle),e(Tle,JTo),e(U_,YTo),e(U_,dN),e(dN,KTo),e(U_,ZTo),e(Q,eMo),e(Q,J_),e(J_,Mle),e(Mle,oMo),e(J_,rMo),e(J_,cN),e(cN,tMo),e(J_,aMo),e(Q,nMo),e(Q,Y_),e(Y_,Ele),e(Ele,sMo),e(Y_,lMo),e(Y_,fN),e(fN,iMo),e(Y_,dMo),e(Q,cMo),e(Q,K_),e(K_,Cle),e(Cle,fMo),e(K_,mMo),e(K_,mN),e(mN,gMo),e(K_,hMo),e(Q,pMo),e(Q,Z_),e(Z_,wle),e(wle,uMo),e(Z_,_Mo),e(Z_,gN),e(gN,bMo),e(Z_,vMo),e(Q,FMo),e(Q,e1),e(e1,Ale),e(Ale,TMo),e(e1,MMo),e(e1,hN),e(hN,EMo),e(e1,CMo),e(Q,wMo),e(Q,o1),e(o1,yle),e(yle,AMo),e(o1,yMo),e(o1,pN),e(pN,LMo),e(o1,xMo),e(Q,$Mo),e(Q,r1),e(r1,Lle),e(Lle,kMo),e(r1,SMo),e(r1,uN),e(uN,RMo),e(r1,BMo),e(Q,PMo),e(Q,t1),e(t1,xle),e(xle,IMo),e(t1,qMo),e(t1,_N),e(_N,NMo),e(t1,jMo),e(Q,DMo),e(Q,a1),e(a1,$le),e($le,GMo),e(a1,OMo),e(a1,bN),e(bN,VMo),e(a1,XMo),e(Q,zMo),e(Q,n1),e(n1,kle),e(kle,QMo),e(n1,WMo),e(n1,vN),e(vN,HMo),e(n1,UMo),e(Q,JMo),e(Q,s1),e(s1,Sle),e(Sle,YMo),e(s1,KMo),e(s1,FN),e(FN,ZMo),e(s1,e4o),e(Q,o4o),e(Q,l1),e(l1,Rle),e(Rle,r4o),e(l1,t4o),e(l1,TN),e(TN,a4o),e(l1,n4o),e(Q,s4o),e(Q,i1),e(i1,Ble),e(Ble,l4o),e(i1,i4o),e(i1,MN),e(MN,d4o),e(i1,c4o),e(Q,f4o),e(Q,d1),e(d1,Ple),e(Ple,m4o),e(d1,g4o),e(d1,EN),e(EN,h4o),e(d1,p4o),e(Q,u4o),e(Q,c1),e(c1,Ile),e(Ile,_4o),e(c1,b4o),e(c1,CN),e(CN,v4o),e(c1,F4o),e(Q,T4o),e(Q,f1),e(f1,qle),e(qle,M4o),e(f1,E4o),e(f1,wN),e(wN,C4o),e(f1,w4o),e(Q,A4o),e(Q,m1),e(m1,Nle),e(Nle,y4o),e(m1,L4o),e(m1,AN),e(AN,x4o),e(m1,$4o),e(Q,k4o),e(Q,g1),e(g1,jle),e(jle,S4o),e(g1,R4o),e(g1,yN),e(yN,B4o),e(g1,P4o),e(Q,I4o),e(Q,h1),e(h1,Dle),e(Dle,q4o),e(h1,N4o),e(h1,LN),e(LN,j4o),e(h1,D4o),e(Q,G4o),e(Q,p1),e(p1,Gle),e(Gle,O4o),e(p1,V4o),e(p1,xN),e(xN,X4o),e(p1,z4o),e(Q,Q4o),e(Q,u1),e(u1,Ole),e(Ole,W4o),e(u1,H4o),e(u1,$N),e($N,U4o),e(u1,J4o),e(Q,Y4o),e(Q,_1),e(_1,Vle),e(Vle,K4o),e(_1,Z4o),e(_1,kN),e(kN,eEo),e(_1,oEo),e(Q,rEo),e(Q,b1),e(b1,Xle),e(Xle,tEo),e(b1,aEo),e(b1,SN),e(SN,nEo),e(b1,sEo),e(Q,lEo),e(Q,v1),e(v1,zle),e(zle,iEo),e(v1,dEo),e(v1,RN),e(RN,cEo),e(v1,fEo),e(Q,mEo),e(Q,F1),e(F1,Qle),e(Qle,gEo),e(F1,hEo),e(F1,BN),e(BN,pEo),e(F1,uEo),e(Q,_Eo),e(Q,T1),e(T1,Wle),e(Wle,bEo),e(T1,vEo),e(T1,PN),e(PN,FEo),e(T1,TEo),e(Q,MEo),e(Q,M1),e(M1,Hle),e(Hle,EEo),e(M1,CEo),e(M1,IN),e(IN,wEo),e(M1,AEo),e(Q,yEo),e(Q,E1),e(E1,Ule),e(Ule,LEo),e(E1,xEo),e(E1,Jle),e(Jle,$Eo),e(E1,kEo),e(Q,SEo),e(Q,C1),e(C1,Yle),e(Yle,REo),e(C1,BEo),e(C1,qN),e(qN,PEo),e(C1,IEo),e(Q,qEo),e(Q,w1),e(w1,Kle),e(Kle,NEo),e(w1,jEo),e(w1,NN),e(NN,DEo),e(w1,GEo),e(Q,OEo),e(Q,A1),e(A1,Zle),e(Zle,VEo),e(A1,XEo),e(A1,jN),e(jN,zEo),e(A1,QEo),e(Q,WEo),e(Q,y1),e(y1,eie),e(eie,HEo),e(y1,UEo),e(y1,DN),e(DN,JEo),e(y1,YEo),e(Ue,KEo),e(Ue,L1),e(L1,ZEo),e(L1,oie),e(oie,eCo),e(L1,oCo),e(L1,rie),e(rie,rCo),e(Ue,tCo),M(x1,Ue,null),b(f,KRe,_),b(f,yi,_),e(yi,$1),e($1,tie),M(s0,tie,null),e(yi,aCo),e(yi,aie),e(aie,nCo),b(f,ZRe,_),b(f,$o,_),M(l0,$o,null),e($o,sCo),e($o,Li),e(Li,lCo),e(Li,GN),e(GN,iCo),e(Li,dCo),e(Li,ON),e(ON,cCo),e(Li,fCo),e($o,mCo),e($o,i0),e(i0,gCo),e(i0,nie),e(nie,hCo),e(i0,pCo),e($o,uCo),e($o,rt),M(d0,rt,null),e(rt,_Co),e(rt,sie),e(sie,bCo),e(rt,vCo),e(rt,xi),e(xi,FCo),e(xi,lie),e(lie,TCo),e(xi,MCo),e(xi,VN),e(VN,ECo),e(xi,CCo),e(rt,wCo),M(k1,rt,null),e($o,ACo),e($o,Je),M(c0,Je,null),e(Je,yCo),e(Je,iie),e(iie,LCo),e(Je,xCo),e(Je,ya),e(ya,$Co),e(ya,die),e(die,kCo),e(ya,SCo),e(ya,cie),e(cie,RCo),e(ya,BCo),e(ya,fie),e(fie,PCo),e(ya,ICo),e(Je,qCo),e(Je,he),e(he,S1),e(S1,mie),e(mie,NCo),e(S1,jCo),e(S1,XN),e(XN,DCo),e(S1,GCo),e(he,OCo),e(he,R1),e(R1,gie),e(gie,VCo),e(R1,XCo),e(R1,zN),e(zN,zCo),e(R1,QCo),e(he,WCo),e(he,B1),e(B1,hie),e(hie,HCo),e(B1,UCo),e(B1,QN),e(QN,JCo),e(B1,YCo),e(he,KCo),e(he,P1),e(P1,pie),e(pie,ZCo),e(P1,e3o),e(P1,WN),e(WN,o3o),e(P1,r3o),e(he,t3o),e(he,I1),e(I1,uie),e(uie,a3o),e(I1,n3o),e(I1,HN),e(HN,s3o),e(I1,l3o),e(he,i3o),e(he,q1),e(q1,_ie),e(_ie,d3o),e(q1,c3o),e(q1,UN),e(UN,f3o),e(q1,m3o),e(he,g3o),e(he,N1),e(N1,bie),e(bie,h3o),e(N1,p3o),e(N1,JN),e(JN,u3o),e(N1,_3o),e(he,b3o),e(he,j1),e(j1,vie),e(vie,v3o),e(j1,F3o),e(j1,YN),e(YN,T3o),e(j1,M3o),e(he,E3o),e(he,D1),e(D1,Fie),e(Fie,C3o),e(D1,w3o),e(D1,KN),e(KN,A3o),e(D1,y3o),e(he,L3o),e(he,G1),e(G1,Tie),e(Tie,x3o),e(G1,$3o),e(G1,ZN),e(ZN,k3o),e(G1,S3o),e(he,R3o),e(he,O1),e(O1,Mie),e(Mie,B3o),e(O1,P3o),e(O1,ej),e(ej,I3o),e(O1,q3o),e(he,N3o),e(he,V1),e(V1,Eie),e(Eie,j3o),e(V1,D3o),e(V1,oj),e(oj,G3o),e(V1,O3o),e(he,V3o),e(he,X1),e(X1,Cie),e(Cie,X3o),e(X1,z3o),e(X1,rj),e(rj,Q3o),e(X1,W3o),e(he,H3o),e(he,z1),e(z1,wie),e(wie,U3o),e(z1,J3o),e(z1,tj),e(tj,Y3o),e(z1,K3o),e(he,Z3o),e(he,Q1),e(Q1,Aie),e(Aie,ewo),e(Q1,owo),e(Q1,aj),e(aj,rwo),e(Q1,two),e(he,awo),e(he,W1),e(W1,yie),e(yie,nwo),e(W1,swo),e(W1,nj),e(nj,lwo),e(W1,iwo),e(he,dwo),e(he,H1),e(H1,Lie),e(Lie,cwo),e(H1,fwo),e(H1,sj),e(sj,mwo),e(H1,gwo),e(Je,hwo),e(Je,U1),e(U1,pwo),e(U1,xie),e(xie,uwo),e(U1,_wo),e(U1,$ie),e($ie,bwo),e(Je,vwo),M(J1,Je,null),b(f,eBe,_),b(f,$i,_),e($i,Y1),e(Y1,kie),M(f0,kie,null),e($i,Fwo),e($i,Sie),e(Sie,Two),b(f,oBe,_),b(f,ko,_),M(m0,ko,null),e(ko,Mwo),e(ko,ki),e(ki,Ewo),e(ki,lj),e(lj,Cwo),e(ki,wwo),e(ki,ij),e(ij,Awo),e(ki,ywo),e(ko,Lwo),e(ko,g0),e(g0,xwo),e(g0,Rie),e(Rie,$wo),e(g0,kwo),e(ko,Swo),e(ko,tt),M(h0,tt,null),e(tt,Rwo),e(tt,Bie),e(Bie,Bwo),e(tt,Pwo),e(tt,Si),e(Si,Iwo),e(Si,Pie),e(Pie,qwo),e(Si,Nwo),e(Si,dj),e(dj,jwo),e(Si,Dwo),e(tt,Gwo),M(K1,tt,null),e(ko,Owo),e(ko,Ye),M(p0,Ye,null),e(Ye,Vwo),e(Ye,Iie),e(Iie,Xwo),e(Ye,zwo),e(Ye,La),e(La,Qwo),e(La,qie),e(qie,Wwo),e(La,Hwo),e(La,Nie),e(Nie,Uwo),e(La,Jwo),e(La,jie),e(jie,Ywo),e(La,Kwo),e(Ye,Zwo),e(Ye,q),e(q,Z1),e(Z1,Die),e(Die,eAo),e(Z1,oAo),e(Z1,cj),e(cj,rAo),e(Z1,tAo),e(q,aAo),e(q,e9),e(e9,Gie),e(Gie,nAo),e(e9,sAo),e(e9,fj),e(fj,lAo),e(e9,iAo),e(q,dAo),e(q,o9),e(o9,Oie),e(Oie,cAo),e(o9,fAo),e(o9,mj),e(mj,mAo),e(o9,gAo),e(q,hAo),e(q,r9),e(r9,Vie),e(Vie,pAo),e(r9,uAo),e(r9,gj),e(gj,_Ao),e(r9,bAo),e(q,vAo),e(q,t9),e(t9,Xie),e(Xie,FAo),e(t9,TAo),e(t9,hj),e(hj,MAo),e(t9,EAo),e(q,CAo),e(q,a9),e(a9,zie),e(zie,wAo),e(a9,AAo),e(a9,pj),e(pj,yAo),e(a9,LAo),e(q,xAo),e(q,n9),e(n9,Qie),e(Qie,$Ao),e(n9,kAo),e(n9,uj),e(uj,SAo),e(n9,RAo),e(q,BAo),e(q,s9),e(s9,Wie),e(Wie,PAo),e(s9,IAo),e(s9,_j),e(_j,qAo),e(s9,NAo),e(q,jAo),e(q,l9),e(l9,Hie),e(Hie,DAo),e(l9,GAo),e(l9,bj),e(bj,OAo),e(l9,VAo),e(q,XAo),e(q,i9),e(i9,Uie),e(Uie,zAo),e(i9,QAo),e(i9,vj),e(vj,WAo),e(i9,HAo),e(q,UAo),e(q,d9),e(d9,Jie),e(Jie,JAo),e(d9,YAo),e(d9,Fj),e(Fj,KAo),e(d9,ZAo),e(q,e0o),e(q,c9),e(c9,Yie),e(Yie,o0o),e(c9,r0o),e(c9,Tj),e(Tj,t0o),e(c9,a0o),e(q,n0o),e(q,f9),e(f9,Kie),e(Kie,s0o),e(f9,l0o),e(f9,Mj),e(Mj,i0o),e(f9,d0o),e(q,c0o),e(q,m9),e(m9,Zie),e(Zie,f0o),e(m9,m0o),e(m9,Ej),e(Ej,g0o),e(m9,h0o),e(q,p0o),e(q,g9),e(g9,ede),e(ede,u0o),e(g9,_0o),e(g9,Cj),e(Cj,b0o),e(g9,v0o),e(q,F0o),e(q,h9),e(h9,ode),e(ode,T0o),e(h9,M0o),e(h9,wj),e(wj,E0o),e(h9,C0o),e(q,w0o),e(q,p9),e(p9,rde),e(rde,A0o),e(p9,y0o),e(p9,Aj),e(Aj,L0o),e(p9,x0o),e(q,$0o),e(q,u9),e(u9,tde),e(tde,k0o),e(u9,S0o),e(u9,yj),e(yj,R0o),e(u9,B0o),e(q,P0o),e(q,_9),e(_9,ade),e(ade,I0o),e(_9,q0o),e(_9,Lj),e(Lj,N0o),e(_9,j0o),e(q,D0o),e(q,b9),e(b9,nde),e(nde,G0o),e(b9,O0o),e(b9,xj),e(xj,V0o),e(b9,X0o),e(q,z0o),e(q,v9),e(v9,sde),e(sde,Q0o),e(v9,W0o),e(v9,$j),e($j,H0o),e(v9,U0o),e(q,J0o),e(q,F9),e(F9,lde),e(lde,Y0o),e(F9,K0o),e(F9,kj),e(kj,Z0o),e(F9,eyo),e(q,oyo),e(q,T9),e(T9,ide),e(ide,ryo),e(T9,tyo),e(T9,Sj),e(Sj,ayo),e(T9,nyo),e(q,syo),e(q,M9),e(M9,dde),e(dde,lyo),e(M9,iyo),e(M9,Rj),e(Rj,dyo),e(M9,cyo),e(q,fyo),e(q,E9),e(E9,cde),e(cde,myo),e(E9,gyo),e(E9,Bj),e(Bj,hyo),e(E9,pyo),e(q,uyo),e(q,C9),e(C9,fde),e(fde,_yo),e(C9,byo),e(C9,Pj),e(Pj,vyo),e(C9,Fyo),e(q,Tyo),e(q,w9),e(w9,mde),e(mde,Myo),e(w9,Eyo),e(w9,Ij),e(Ij,Cyo),e(w9,wyo),e(q,Ayo),e(q,A9),e(A9,gde),e(gde,yyo),e(A9,Lyo),e(A9,qj),e(qj,xyo),e(A9,$yo),e(q,kyo),e(q,y9),e(y9,hde),e(hde,Syo),e(y9,Ryo),e(y9,Nj),e(Nj,Byo),e(y9,Pyo),e(q,Iyo),e(q,L9),e(L9,pde),e(pde,qyo),e(L9,Nyo),e(L9,jj),e(jj,jyo),e(L9,Dyo),e(q,Gyo),e(q,x9),e(x9,ude),e(ude,Oyo),e(x9,Vyo),e(x9,Dj),e(Dj,Xyo),e(x9,zyo),e(q,Qyo),e(q,$9),e($9,_de),e(_de,Wyo),e($9,Hyo),e($9,Gj),e(Gj,Uyo),e($9,Jyo),e(q,Yyo),e(q,k9),e(k9,bde),e(bde,Kyo),e(k9,Zyo),e(k9,Oj),e(Oj,eLo),e(k9,oLo),e(q,rLo),e(q,S9),e(S9,vde),e(vde,tLo),e(S9,aLo),e(S9,Vj),e(Vj,nLo),e(S9,sLo),e(q,lLo),e(q,R9),e(R9,Fde),e(Fde,iLo),e(R9,dLo),e(R9,Xj),e(Xj,cLo),e(R9,fLo),e(q,mLo),e(q,B9),e(B9,Tde),e(Tde,gLo),e(B9,hLo),e(B9,zj),e(zj,pLo),e(B9,uLo),e(q,_Lo),e(q,P9),e(P9,Mde),e(Mde,bLo),e(P9,vLo),e(P9,Qj),e(Qj,FLo),e(P9,TLo),e(q,MLo),e(q,I9),e(I9,Ede),e(Ede,ELo),e(I9,CLo),e(I9,Wj),e(Wj,wLo),e(I9,ALo),e(q,yLo),e(q,q9),e(q9,Cde),e(Cde,LLo),e(q9,xLo),e(q9,Hj),e(Hj,$Lo),e(q9,kLo),e(q,SLo),e(q,N9),e(N9,wde),e(wde,RLo),e(N9,BLo),e(N9,Uj),e(Uj,PLo),e(N9,ILo),e(q,qLo),e(q,j9),e(j9,Ade),e(Ade,NLo),e(j9,jLo),e(j9,Jj),e(Jj,DLo),e(j9,GLo),e(q,OLo),e(q,D9),e(D9,yde),e(yde,VLo),e(D9,XLo),e(D9,Yj),e(Yj,zLo),e(D9,QLo),e(q,WLo),e(q,G9),e(G9,Lde),e(Lde,HLo),e(G9,ULo),e(G9,Kj),e(Kj,JLo),e(G9,YLo),e(q,KLo),e(q,O9),e(O9,xde),e(xde,ZLo),e(O9,e8o),e(O9,Zj),e(Zj,o8o),e(O9,r8o),e(q,t8o),e(q,V9),e(V9,$de),e($de,a8o),e(V9,n8o),e(V9,eD),e(eD,s8o),e(V9,l8o),e(q,i8o),e(q,X9),e(X9,kde),e(kde,d8o),e(X9,c8o),e(X9,oD),e(oD,f8o),e(X9,m8o),e(q,g8o),e(q,z9),e(z9,Sde),e(Sde,h8o),e(z9,p8o),e(z9,rD),e(rD,u8o),e(z9,_8o),e(Ye,b8o),e(Ye,Q9),e(Q9,v8o),e(Q9,Rde),e(Rde,F8o),e(Q9,T8o),e(Q9,Bde),e(Bde,M8o),e(Ye,E8o),M(W9,Ye,null),b(f,rBe,_),b(f,Ri,_),e(Ri,H9),e(H9,Pde),M(u0,Pde,null),e(Ri,C8o),e(Ri,Ide),e(Ide,w8o),b(f,tBe,_),b(f,So,_),M(_0,So,null),e(So,A8o),e(So,Bi),e(Bi,y8o),e(Bi,tD),e(tD,L8o),e(Bi,x8o),e(Bi,aD),e(aD,$8o),e(Bi,k8o),e(So,S8o),e(So,b0),e(b0,R8o),e(b0,qde),e(qde,B8o),e(b0,P8o),e(So,I8o),e(So,at),M(v0,at,null),e(at,q8o),e(at,Nde),e(Nde,N8o),e(at,j8o),e(at,Pi),e(Pi,D8o),e(Pi,jde),e(jde,G8o),e(Pi,O8o),e(Pi,nD),e(nD,V8o),e(Pi,X8o),e(at,z8o),M(U9,at,null),e(So,Q8o),e(So,Ke),M(F0,Ke,null),e(Ke,W8o),e(Ke,Dde),e(Dde,H8o),e(Ke,U8o),e(Ke,xa),e(xa,J8o),e(xa,Gde),e(Gde,Y8o),e(xa,K8o),e(xa,Ode),e(Ode,Z8o),e(xa,e7o),e(xa,Vde),e(Vde,o7o),e(xa,r7o),e(Ke,t7o),e(Ke,Y),e(Y,J9),e(J9,Xde),e(Xde,a7o),e(J9,n7o),e(J9,sD),e(sD,s7o),e(J9,l7o),e(Y,i7o),e(Y,Y9),e(Y9,zde),e(zde,d7o),e(Y9,c7o),e(Y9,lD),e(lD,f7o),e(Y9,m7o),e(Y,g7o),e(Y,K9),e(K9,Qde),e(Qde,h7o),e(K9,p7o),e(K9,iD),e(iD,u7o),e(K9,_7o),e(Y,b7o),e(Y,Z9),e(Z9,Wde),e(Wde,v7o),e(Z9,F7o),e(Z9,dD),e(dD,T7o),e(Z9,M7o),e(Y,E7o),e(Y,eb),e(eb,Hde),e(Hde,C7o),e(eb,w7o),e(eb,cD),e(cD,A7o),e(eb,y7o),e(Y,L7o),e(Y,ob),e(ob,Ude),e(Ude,x7o),e(ob,$7o),e(ob,fD),e(fD,k7o),e(ob,S7o),e(Y,R7o),e(Y,rb),e(rb,Jde),e(Jde,B7o),e(rb,P7o),e(rb,mD),e(mD,I7o),e(rb,q7o),e(Y,N7o),e(Y,tb),e(tb,Yde),e(Yde,j7o),e(tb,D7o),e(tb,gD),e(gD,G7o),e(tb,O7o),e(Y,V7o),e(Y,ab),e(ab,Kde),e(Kde,X7o),e(ab,z7o),e(ab,hD),e(hD,Q7o),e(ab,W7o),e(Y,H7o),e(Y,nb),e(nb,Zde),e(Zde,U7o),e(nb,J7o),e(nb,pD),e(pD,Y7o),e(nb,K7o),e(Y,Z7o),e(Y,sb),e(sb,ece),e(ece,exo),e(sb,oxo),e(sb,uD),e(uD,rxo),e(sb,txo),e(Y,axo),e(Y,lb),e(lb,oce),e(oce,nxo),e(lb,sxo),e(lb,_D),e(_D,lxo),e(lb,ixo),e(Y,dxo),e(Y,ib),e(ib,rce),e(rce,cxo),e(ib,fxo),e(ib,bD),e(bD,mxo),e(ib,gxo),e(Y,hxo),e(Y,db),e(db,tce),e(tce,pxo),e(db,uxo),e(db,vD),e(vD,_xo),e(db,bxo),e(Y,vxo),e(Y,cb),e(cb,ace),e(ace,Fxo),e(cb,Txo),e(cb,FD),e(FD,Mxo),e(cb,Exo),e(Y,Cxo),e(Y,fb),e(fb,nce),e(nce,wxo),e(fb,Axo),e(fb,TD),e(TD,yxo),e(fb,Lxo),e(Y,xxo),e(Y,mb),e(mb,sce),e(sce,$xo),e(mb,kxo),e(mb,MD),e(MD,Sxo),e(mb,Rxo),e(Y,Bxo),e(Y,gb),e(gb,lce),e(lce,Pxo),e(gb,Ixo),e(gb,ED),e(ED,qxo),e(gb,Nxo),e(Y,jxo),e(Y,hb),e(hb,ice),e(ice,Dxo),e(hb,Gxo),e(hb,CD),e(CD,Oxo),e(hb,Vxo),e(Y,Xxo),e(Y,pb),e(pb,dce),e(dce,zxo),e(pb,Qxo),e(pb,wD),e(wD,Wxo),e(pb,Hxo),e(Y,Uxo),e(Y,ub),e(ub,cce),e(cce,Jxo),e(ub,Yxo),e(ub,AD),e(AD,Kxo),e(ub,Zxo),e(Y,e$o),e(Y,_b),e(_b,fce),e(fce,o$o),e(_b,r$o),e(_b,yD),e(yD,t$o),e(_b,a$o),e(Y,n$o),e(Y,bb),e(bb,mce),e(mce,s$o),e(bb,l$o),e(bb,LD),e(LD,i$o),e(bb,d$o),e(Y,c$o),e(Y,vb),e(vb,gce),e(gce,f$o),e(vb,m$o),e(vb,xD),e(xD,g$o),e(vb,h$o),e(Y,p$o),e(Y,Fb),e(Fb,hce),e(hce,u$o),e(Fb,_$o),e(Fb,$D),e($D,b$o),e(Fb,v$o),e(Y,F$o),e(Y,Tb),e(Tb,pce),e(pce,T$o),e(Tb,M$o),e(Tb,kD),e(kD,E$o),e(Tb,C$o),e(Y,w$o),e(Y,Mb),e(Mb,uce),e(uce,A$o),e(Mb,y$o),e(Mb,SD),e(SD,L$o),e(Mb,x$o),e(Y,$$o),e(Y,Eb),e(Eb,_ce),e(_ce,k$o),e(Eb,S$o),e(Eb,RD),e(RD,R$o),e(Eb,B$o),e(Ke,P$o),e(Ke,Cb),e(Cb,I$o),e(Cb,bce),e(bce,q$o),e(Cb,N$o),e(Cb,vce),e(vce,j$o),e(Ke,D$o),M(wb,Ke,null),b(f,aBe,_),b(f,Ii,_),e(Ii,Ab),e(Ab,Fce),M(T0,Fce,null),e(Ii,G$o),e(Ii,Tce),e(Tce,O$o),b(f,nBe,_),b(f,Ro,_),M(M0,Ro,null),e(Ro,V$o),e(Ro,qi),e(qi,X$o),e(qi,BD),e(BD,z$o),e(qi,Q$o),e(qi,PD),e(PD,W$o),e(qi,H$o),e(Ro,U$o),e(Ro,E0),e(E0,J$o),e(E0,Mce),e(Mce,Y$o),e(E0,K$o),e(Ro,Z$o),e(Ro,nt),M(C0,nt,null),e(nt,eko),e(nt,Ece),e(Ece,oko),e(nt,rko),e(nt,Ni),e(Ni,tko),e(Ni,Cce),e(Cce,ako),e(Ni,nko),e(Ni,ID),e(ID,sko),e(Ni,lko),e(nt,iko),M(yb,nt,null),e(Ro,dko),e(Ro,Ze),M(w0,Ze,null),e(Ze,cko),e(Ze,wce),e(wce,fko),e(Ze,mko),e(Ze,$a),e($a,gko),e($a,Ace),e(Ace,hko),e($a,pko),e($a,yce),e(yce,uko),e($a,_ko),e($a,Lce),e(Lce,bko),e($a,vko),e(Ze,Fko),e(Ze,Hr),e(Hr,Lb),e(Lb,xce),e(xce,Tko),e(Lb,Mko),e(Lb,qD),e(qD,Eko),e(Lb,Cko),e(Hr,wko),e(Hr,xb),e(xb,$ce),e($ce,Ako),e(xb,yko),e(xb,ND),e(ND,Lko),e(xb,xko),e(Hr,$ko),e(Hr,$b),e($b,kce),e(kce,kko),e($b,Sko),e($b,jD),e(jD,Rko),e($b,Bko),e(Hr,Pko),e(Hr,kb),e(kb,Sce),e(Sce,Iko),e(kb,qko),e(kb,DD),e(DD,Nko),e(kb,jko),e(Hr,Dko),e(Hr,Sb),e(Sb,Rce),e(Rce,Gko),e(Sb,Oko),e(Sb,GD),e(GD,Vko),e(Sb,Xko),e(Ze,zko),e(Ze,Rb),e(Rb,Qko),e(Rb,Bce),e(Bce,Wko),e(Rb,Hko),e(Rb,Pce),e(Pce,Uko),e(Ze,Jko),M(Bb,Ze,null),b(f,sBe,_),b(f,ji,_),e(ji,Pb),e(Pb,Ice),M(A0,Ice,null),e(ji,Yko),e(ji,qce),e(qce,Kko),b(f,lBe,_),b(f,Bo,_),M(y0,Bo,null),e(Bo,Zko),e(Bo,Di),e(Di,eSo),e(Di,OD),e(OD,oSo),e(Di,rSo),e(Di,VD),e(VD,tSo),e(Di,aSo),e(Bo,nSo),e(Bo,L0),e(L0,sSo),e(L0,Nce),e(Nce,lSo),e(L0,iSo),e(Bo,dSo),e(Bo,st),M(x0,st,null),e(st,cSo),e(st,jce),e(jce,fSo),e(st,mSo),e(st,Gi),e(Gi,gSo),e(Gi,Dce),e(Dce,hSo),e(Gi,pSo),e(Gi,XD),e(XD,uSo),e(Gi,_So),e(st,bSo),M(Ib,st,null),e(Bo,vSo),e(Bo,eo),M($0,eo,null),e(eo,FSo),e(eo,Gce),e(Gce,TSo),e(eo,MSo),e(eo,ka),e(ka,ESo),e(ka,Oce),e(Oce,CSo),e(ka,wSo),e(ka,Vce),e(Vce,ASo),e(ka,ySo),e(ka,Xce),e(Xce,LSo),e(ka,xSo),e(eo,$So),e(eo,U),e(U,qb),e(qb,zce),e(zce,kSo),e(qb,SSo),e(qb,zD),e(zD,RSo),e(qb,BSo),e(U,PSo),e(U,Nb),e(Nb,Qce),e(Qce,ISo),e(Nb,qSo),e(Nb,QD),e(QD,NSo),e(Nb,jSo),e(U,DSo),e(U,jb),e(jb,Wce),e(Wce,GSo),e(jb,OSo),e(jb,WD),e(WD,VSo),e(jb,XSo),e(U,zSo),e(U,Db),e(Db,Hce),e(Hce,QSo),e(Db,WSo),e(Db,HD),e(HD,HSo),e(Db,USo),e(U,JSo),e(U,Gb),e(Gb,Uce),e(Uce,YSo),e(Gb,KSo),e(Gb,UD),e(UD,ZSo),e(Gb,eRo),e(U,oRo),e(U,Ob),e(Ob,Jce),e(Jce,rRo),e(Ob,tRo),e(Ob,JD),e(JD,aRo),e(Ob,nRo),e(U,sRo),e(U,Vb),e(Vb,Yce),e(Yce,lRo),e(Vb,iRo),e(Vb,YD),e(YD,dRo),e(Vb,cRo),e(U,fRo),e(U,Xb),e(Xb,Kce),e(Kce,mRo),e(Xb,gRo),e(Xb,KD),e(KD,hRo),e(Xb,pRo),e(U,uRo),e(U,zb),e(zb,Zce),e(Zce,_Ro),e(zb,bRo),e(zb,ZD),e(ZD,vRo),e(zb,FRo),e(U,TRo),e(U,Qb),e(Qb,efe),e(efe,MRo),e(Qb,ERo),e(Qb,eG),e(eG,CRo),e(Qb,wRo),e(U,ARo),e(U,Wb),e(Wb,ofe),e(ofe,yRo),e(Wb,LRo),e(Wb,oG),e(oG,xRo),e(Wb,$Ro),e(U,kRo),e(U,Hb),e(Hb,rfe),e(rfe,SRo),e(Hb,RRo),e(Hb,rG),e(rG,BRo),e(Hb,PRo),e(U,IRo),e(U,Ub),e(Ub,tfe),e(tfe,qRo),e(Ub,NRo),e(Ub,tG),e(tG,jRo),e(Ub,DRo),e(U,GRo),e(U,Jb),e(Jb,afe),e(afe,ORo),e(Jb,VRo),e(Jb,aG),e(aG,XRo),e(Jb,zRo),e(U,QRo),e(U,Yb),e(Yb,nfe),e(nfe,WRo),e(Yb,HRo),e(Yb,nG),e(nG,URo),e(Yb,JRo),e(U,YRo),e(U,Kb),e(Kb,sfe),e(sfe,KRo),e(Kb,ZRo),e(Kb,sG),e(sG,eBo),e(Kb,oBo),e(U,rBo),e(U,Zb),e(Zb,lfe),e(lfe,tBo),e(Zb,aBo),e(Zb,lG),e(lG,nBo),e(Zb,sBo),e(U,lBo),e(U,e2),e(e2,ife),e(ife,iBo),e(e2,dBo),e(e2,iG),e(iG,cBo),e(e2,fBo),e(U,mBo),e(U,o2),e(o2,dfe),e(dfe,gBo),e(o2,hBo),e(o2,dG),e(dG,pBo),e(o2,uBo),e(U,_Bo),e(U,r2),e(r2,cfe),e(cfe,bBo),e(r2,vBo),e(r2,cG),e(cG,FBo),e(r2,TBo),e(U,MBo),e(U,t2),e(t2,ffe),e(ffe,EBo),e(t2,CBo),e(t2,fG),e(fG,wBo),e(t2,ABo),e(U,yBo),e(U,a2),e(a2,mfe),e(mfe,LBo),e(a2,xBo),e(a2,mG),e(mG,$Bo),e(a2,kBo),e(U,SBo),e(U,n2),e(n2,gfe),e(gfe,RBo),e(n2,BBo),e(n2,gG),e(gG,PBo),e(n2,IBo),e(U,qBo),e(U,s2),e(s2,hfe),e(hfe,NBo),e(s2,jBo),e(s2,hG),e(hG,DBo),e(s2,GBo),e(U,OBo),e(U,l2),e(l2,pfe),e(pfe,VBo),e(l2,XBo),e(l2,pG),e(pG,zBo),e(l2,QBo),e(U,WBo),e(U,i2),e(i2,ufe),e(ufe,HBo),e(i2,UBo),e(i2,uG),e(uG,JBo),e(i2,YBo),e(U,KBo),e(U,d2),e(d2,_fe),e(_fe,ZBo),e(d2,ePo),e(d2,_G),e(_G,oPo),e(d2,rPo),e(U,tPo),e(U,c2),e(c2,bfe),e(bfe,aPo),e(c2,nPo),e(c2,bG),e(bG,sPo),e(c2,lPo),e(U,iPo),e(U,f2),e(f2,vfe),e(vfe,dPo),e(f2,cPo),e(f2,vG),e(vG,fPo),e(f2,mPo),e(U,gPo),e(U,m2),e(m2,Ffe),e(Ffe,hPo),e(m2,pPo),e(m2,FG),e(FG,uPo),e(m2,_Po),e(U,bPo),e(U,g2),e(g2,Tfe),e(Tfe,vPo),e(g2,FPo),e(g2,TG),e(TG,TPo),e(g2,MPo),e(U,EPo),e(U,h2),e(h2,Mfe),e(Mfe,CPo),e(h2,wPo),e(h2,MG),e(MG,APo),e(h2,yPo),e(U,LPo),e(U,p2),e(p2,Efe),e(Efe,xPo),e(p2,$Po),e(p2,EG),e(EG,kPo),e(p2,SPo),e(eo,RPo),e(eo,u2),e(u2,BPo),e(u2,Cfe),e(Cfe,PPo),e(u2,IPo),e(u2,wfe),e(wfe,qPo),e(eo,NPo),M(_2,eo,null),b(f,iBe,_),b(f,Oi,_),e(Oi,b2),e(b2,Afe),M(k0,Afe,null),e(Oi,jPo),e(Oi,yfe),e(yfe,DPo),b(f,dBe,_),b(f,Po,_),M(S0,Po,null),e(Po,GPo),e(Po,Vi),e(Vi,OPo),e(Vi,CG),e(CG,VPo),e(Vi,XPo),e(Vi,wG),e(wG,zPo),e(Vi,QPo),e(Po,WPo),e(Po,R0),e(R0,HPo),e(R0,Lfe),e(Lfe,UPo),e(R0,JPo),e(Po,YPo),e(Po,lt),M(B0,lt,null),e(lt,KPo),e(lt,xfe),e(xfe,ZPo),e(lt,eIo),e(lt,Xi),e(Xi,oIo),e(Xi,$fe),e($fe,rIo),e(Xi,tIo),e(Xi,AG),e(AG,aIo),e(Xi,nIo),e(lt,sIo),M(v2,lt,null),e(Po,lIo),e(Po,oo),M(P0,oo,null),e(oo,iIo),e(oo,kfe),e(kfe,dIo),e(oo,cIo),e(oo,Sa),e(Sa,fIo),e(Sa,Sfe),e(Sfe,mIo),e(Sa,gIo),e(Sa,Rfe),e(Rfe,hIo),e(Sa,pIo),e(Sa,Bfe),e(Bfe,uIo),e(Sa,_Io),e(oo,bIo),e(oo,O),e(O,F2),e(F2,Pfe),e(Pfe,vIo),e(F2,FIo),e(F2,yG),e(yG,TIo),e(F2,MIo),e(O,EIo),e(O,T2),e(T2,Ife),e(Ife,CIo),e(T2,wIo),e(T2,LG),e(LG,AIo),e(T2,yIo),e(O,LIo),e(O,M2),e(M2,qfe),e(qfe,xIo),e(M2,$Io),e(M2,xG),e(xG,kIo),e(M2,SIo),e(O,RIo),e(O,E2),e(E2,Nfe),e(Nfe,BIo),e(E2,PIo),e(E2,$G),e($G,IIo),e(E2,qIo),e(O,NIo),e(O,C2),e(C2,jfe),e(jfe,jIo),e(C2,DIo),e(C2,kG),e(kG,GIo),e(C2,OIo),e(O,VIo),e(O,w2),e(w2,Dfe),e(Dfe,XIo),e(w2,zIo),e(w2,SG),e(SG,QIo),e(w2,WIo),e(O,HIo),e(O,A2),e(A2,Gfe),e(Gfe,UIo),e(A2,JIo),e(A2,RG),e(RG,YIo),e(A2,KIo),e(O,ZIo),e(O,y2),e(y2,Ofe),e(Ofe,eqo),e(y2,oqo),e(y2,BG),e(BG,rqo),e(y2,tqo),e(O,aqo),e(O,L2),e(L2,Vfe),e(Vfe,nqo),e(L2,sqo),e(L2,PG),e(PG,lqo),e(L2,iqo),e(O,dqo),e(O,x2),e(x2,Xfe),e(Xfe,cqo),e(x2,fqo),e(x2,IG),e(IG,mqo),e(x2,gqo),e(O,hqo),e(O,$2),e($2,zfe),e(zfe,pqo),e($2,uqo),e($2,qG),e(qG,_qo),e($2,bqo),e(O,vqo),e(O,k2),e(k2,Qfe),e(Qfe,Fqo),e(k2,Tqo),e(k2,NG),e(NG,Mqo),e(k2,Eqo),e(O,Cqo),e(O,S2),e(S2,Wfe),e(Wfe,wqo),e(S2,Aqo),e(S2,jG),e(jG,yqo),e(S2,Lqo),e(O,xqo),e(O,R2),e(R2,Hfe),e(Hfe,$qo),e(R2,kqo),e(R2,DG),e(DG,Sqo),e(R2,Rqo),e(O,Bqo),e(O,B2),e(B2,Ufe),e(Ufe,Pqo),e(B2,Iqo),e(B2,GG),e(GG,qqo),e(B2,Nqo),e(O,jqo),e(O,P2),e(P2,Jfe),e(Jfe,Dqo),e(P2,Gqo),e(P2,OG),e(OG,Oqo),e(P2,Vqo),e(O,Xqo),e(O,I2),e(I2,Yfe),e(Yfe,zqo),e(I2,Qqo),e(I2,VG),e(VG,Wqo),e(I2,Hqo),e(O,Uqo),e(O,q2),e(q2,Kfe),e(Kfe,Jqo),e(q2,Yqo),e(q2,XG),e(XG,Kqo),e(q2,Zqo),e(O,eNo),e(O,N2),e(N2,Zfe),e(Zfe,oNo),e(N2,rNo),e(N2,zG),e(zG,tNo),e(N2,aNo),e(O,nNo),e(O,j2),e(j2,eme),e(eme,sNo),e(j2,lNo),e(j2,QG),e(QG,iNo),e(j2,dNo),e(O,cNo),e(O,D2),e(D2,ome),e(ome,fNo),e(D2,mNo),e(D2,WG),e(WG,gNo),e(D2,hNo),e(O,pNo),e(O,G2),e(G2,rme),e(rme,uNo),e(G2,_No),e(G2,HG),e(HG,bNo),e(G2,vNo),e(O,FNo),e(O,O2),e(O2,tme),e(tme,TNo),e(O2,MNo),e(O2,UG),e(UG,ENo),e(O2,CNo),e(O,wNo),e(O,V2),e(V2,ame),e(ame,ANo),e(V2,yNo),e(V2,JG),e(JG,LNo),e(V2,xNo),e(O,$No),e(O,X2),e(X2,nme),e(nme,kNo),e(X2,SNo),e(X2,YG),e(YG,RNo),e(X2,BNo),e(O,PNo),e(O,z2),e(z2,sme),e(sme,INo),e(z2,qNo),e(z2,KG),e(KG,NNo),e(z2,jNo),e(O,DNo),e(O,Q2),e(Q2,lme),e(lme,GNo),e(Q2,ONo),e(Q2,ZG),e(ZG,VNo),e(Q2,XNo),e(O,zNo),e(O,W2),e(W2,ime),e(ime,QNo),e(W2,WNo),e(W2,eO),e(eO,HNo),e(W2,UNo),e(O,JNo),e(O,H2),e(H2,dme),e(dme,YNo),e(H2,KNo),e(H2,oO),e(oO,ZNo),e(H2,ejo),e(O,ojo),e(O,U2),e(U2,cme),e(cme,rjo),e(U2,tjo),e(U2,rO),e(rO,ajo),e(U2,njo),e(O,sjo),e(O,J2),e(J2,fme),e(fme,ljo),e(J2,ijo),e(J2,tO),e(tO,djo),e(J2,cjo),e(O,fjo),e(O,Y2),e(Y2,mme),e(mme,mjo),e(Y2,gjo),e(Y2,aO),e(aO,hjo),e(Y2,pjo),e(O,ujo),e(O,K2),e(K2,gme),e(gme,_jo),e(K2,bjo),e(K2,nO),e(nO,vjo),e(K2,Fjo),e(O,Tjo),e(O,Z2),e(Z2,hme),e(hme,Mjo),e(Z2,Ejo),e(Z2,sO),e(sO,Cjo),e(Z2,wjo),e(O,Ajo),e(O,e5),e(e5,pme),e(pme,yjo),e(e5,Ljo),e(e5,lO),e(lO,xjo),e(e5,$jo),e(O,kjo),e(O,o5),e(o5,ume),e(ume,Sjo),e(o5,Rjo),e(o5,iO),e(iO,Bjo),e(o5,Pjo),e(O,Ijo),e(O,r5),e(r5,_me),e(_me,qjo),e(r5,Njo),e(r5,dO),e(dO,jjo),e(r5,Djo),e(O,Gjo),e(O,t5),e(t5,bme),e(bme,Ojo),e(t5,Vjo),e(t5,cO),e(cO,Xjo),e(t5,zjo),e(O,Qjo),e(O,a5),e(a5,vme),e(vme,Wjo),e(a5,Hjo),e(a5,fO),e(fO,Ujo),e(a5,Jjo),e(oo,Yjo),e(oo,n5),e(n5,Kjo),e(n5,Fme),e(Fme,Zjo),e(n5,eDo),e(n5,Tme),e(Tme,oDo),e(oo,rDo),M(s5,oo,null),b(f,cBe,_),b(f,zi,_),e(zi,l5),e(l5,Mme),M(I0,Mme,null),e(zi,tDo),e(zi,Eme),e(Eme,aDo),b(f,fBe,_),b(f,Io,_),M(q0,Io,null),e(Io,nDo),e(Io,Qi),e(Qi,sDo),e(Qi,mO),e(mO,lDo),e(Qi,iDo),e(Qi,gO),e(gO,dDo),e(Qi,cDo),e(Io,fDo),e(Io,N0),e(N0,mDo),e(N0,Cme),e(Cme,gDo),e(N0,hDo),e(Io,pDo),e(Io,it),M(j0,it,null),e(it,uDo),e(it,wme),e(wme,_Do),e(it,bDo),e(it,Wi),e(Wi,vDo),e(Wi,Ame),e(Ame,FDo),e(Wi,TDo),e(Wi,hO),e(hO,MDo),e(Wi,EDo),e(it,CDo),M(i5,it,null),e(Io,wDo),e(Io,ro),M(D0,ro,null),e(ro,ADo),e(ro,yme),e(yme,yDo),e(ro,LDo),e(ro,Ra),e(Ra,xDo),e(Ra,Lme),e(Lme,$Do),e(Ra,kDo),e(Ra,xme),e(xme,SDo),e(Ra,RDo),e(Ra,$me),e($me,BDo),e(Ra,PDo),e(ro,IDo),e(ro,kme),e(kme,d5),e(d5,Sme),e(Sme,qDo),e(d5,NDo),e(d5,pO),e(pO,jDo),e(d5,DDo),e(ro,GDo),e(ro,c5),e(c5,ODo),e(c5,Rme),e(Rme,VDo),e(c5,XDo),e(c5,Bme),e(Bme,zDo),e(ro,QDo),M(f5,ro,null),b(f,mBe,_),b(f,Hi,_),e(Hi,m5),e(m5,Pme),M(G0,Pme,null),e(Hi,WDo),e(Hi,Ime),e(Ime,HDo),b(f,gBe,_),b(f,qo,_),M(O0,qo,null),e(qo,UDo),e(qo,Ui),e(Ui,JDo),e(Ui,uO),e(uO,YDo),e(Ui,KDo),e(Ui,_O),e(_O,ZDo),e(Ui,eGo),e(qo,oGo),e(qo,V0),e(V0,rGo),e(V0,qme),e(qme,tGo),e(V0,aGo),e(qo,nGo),e(qo,dt),M(X0,dt,null),e(dt,sGo),e(dt,Nme),e(Nme,lGo),e(dt,iGo),e(dt,Ji),e(Ji,dGo),e(Ji,jme),e(jme,cGo),e(Ji,fGo),e(Ji,bO),e(bO,mGo),e(Ji,gGo),e(dt,hGo),M(g5,dt,null),e(qo,pGo),e(qo,to),M(z0,to,null),e(to,uGo),e(to,Dme),e(Dme,_Go),e(to,bGo),e(to,Ba),e(Ba,vGo),e(Ba,Gme),e(Gme,FGo),e(Ba,TGo),e(Ba,Ome),e(Ome,MGo),e(Ba,EGo),e(Ba,Vme),e(Vme,CGo),e(Ba,wGo),e(to,AGo),e(to,ve),e(ve,h5),e(h5,Xme),e(Xme,yGo),e(h5,LGo),e(h5,vO),e(vO,xGo),e(h5,$Go),e(ve,kGo),e(ve,p5),e(p5,zme),e(zme,SGo),e(p5,RGo),e(p5,FO),e(FO,BGo),e(p5,PGo),e(ve,IGo),e(ve,u5),e(u5,Qme),e(Qme,qGo),e(u5,NGo),e(u5,TO),e(TO,jGo),e(u5,DGo),e(ve,GGo),e(ve,xs),e(xs,Wme),e(Wme,OGo),e(xs,VGo),e(xs,MO),e(MO,XGo),e(xs,zGo),e(xs,EO),e(EO,QGo),e(xs,WGo),e(ve,HGo),e(ve,_5),e(_5,Hme),e(Hme,UGo),e(_5,JGo),e(_5,CO),e(CO,YGo),e(_5,KGo),e(ve,ZGo),e(ve,ct),e(ct,Ume),e(Ume,eOo),e(ct,oOo),e(ct,wO),e(wO,rOo),e(ct,tOo),e(ct,AO),e(AO,aOo),e(ct,nOo),e(ct,yO),e(yO,sOo),e(ct,lOo),e(ve,iOo),e(ve,b5),e(b5,Jme),e(Jme,dOo),e(b5,cOo),e(b5,LO),e(LO,fOo),e(b5,mOo),e(ve,gOo),e(ve,v5),e(v5,Yme),e(Yme,hOo),e(v5,pOo),e(v5,xO),e(xO,uOo),e(v5,_Oo),e(ve,bOo),e(ve,F5),e(F5,Kme),e(Kme,vOo),e(F5,FOo),e(F5,$O),e($O,TOo),e(F5,MOo),e(ve,EOo),e(ve,T5),e(T5,Zme),e(Zme,COo),e(T5,wOo),e(T5,kO),e(kO,AOo),e(T5,yOo),e(ve,LOo),e(ve,M5),e(M5,ege),e(ege,xOo),e(M5,$Oo),e(M5,SO),e(SO,kOo),e(M5,SOo),e(ve,ROo),e(ve,E5),e(E5,oge),e(oge,BOo),e(E5,POo),e(E5,RO),e(RO,IOo),e(E5,qOo),e(ve,NOo),e(ve,C5),e(C5,rge),e(rge,jOo),e(C5,DOo),e(C5,BO),e(BO,GOo),e(C5,OOo),e(to,VOo),e(to,w5),e(w5,XOo),e(w5,tge),e(tge,zOo),e(w5,QOo),e(w5,age),e(age,WOo),e(to,HOo),M(A5,to,null),b(f,hBe,_),b(f,Yi,_),e(Yi,y5),e(y5,nge),M(Q0,nge,null),e(Yi,UOo),e(Yi,sge),e(sge,JOo),b(f,pBe,_),b(f,No,_),M(W0,No,null),e(No,YOo),e(No,Ki),e(Ki,KOo),e(Ki,PO),e(PO,ZOo),e(Ki,eVo),e(Ki,IO),e(IO,oVo),e(Ki,rVo),e(No,tVo),e(No,H0),e(H0,aVo),e(H0,lge),e(lge,nVo),e(H0,sVo),e(No,lVo),e(No,ft),M(U0,ft,null),e(ft,iVo),e(ft,ige),e(ige,dVo),e(ft,cVo),e(ft,Zi),e(Zi,fVo),e(Zi,dge),e(dge,mVo),e(Zi,gVo),e(Zi,qO),e(qO,hVo),e(Zi,pVo),e(ft,uVo),M(L5,ft,null),e(No,_Vo),e(No,ao),M(J0,ao,null),e(ao,bVo),e(ao,cge),e(cge,vVo),e(ao,FVo),e(ao,Pa),e(Pa,TVo),e(Pa,fge),e(fge,MVo),e(Pa,EVo),e(Pa,mge),e(mge,CVo),e(Pa,wVo),e(Pa,gge),e(gge,AVo),e(Pa,yVo),e(ao,LVo),e(ao,hge),e(hge,x5),e(x5,pge),e(pge,xVo),e(x5,$Vo),e(x5,NO),e(NO,kVo),e(x5,SVo),e(ao,RVo),e(ao,$5),e($5,BVo),e($5,uge),e(uge,PVo),e($5,IVo),e($5,_ge),e(_ge,qVo),e(ao,NVo),M(k5,ao,null),b(f,uBe,_),b(f,ed,_),e(ed,S5),e(S5,bge),M(Y0,bge,null),e(ed,jVo),e(ed,vge),e(vge,DVo),b(f,_Be,_),b(f,jo,_),M(K0,jo,null),e(jo,GVo),e(jo,od),e(od,OVo),e(od,jO),e(jO,VVo),e(od,XVo),e(od,DO),e(DO,zVo),e(od,QVo),e(jo,WVo),e(jo,Z0),e(Z0,HVo),e(Z0,Fge),e(Fge,UVo),e(Z0,JVo),e(jo,YVo),e(jo,mt),M(ey,mt,null),e(mt,KVo),e(mt,Tge),e(Tge,ZVo),e(mt,eXo),e(mt,rd),e(rd,oXo),e(rd,Mge),e(Mge,rXo),e(rd,tXo),e(rd,GO),e(GO,aXo),e(rd,nXo),e(mt,sXo),M(R5,mt,null),e(jo,lXo),e(jo,no),M(oy,no,null),e(no,iXo),e(no,Ege),e(Ege,dXo),e(no,cXo),e(no,Ia),e(Ia,fXo),e(Ia,Cge),e(Cge,mXo),e(Ia,gXo),e(Ia,wge),e(wge,hXo),e(Ia,pXo),e(Ia,Age),e(Age,uXo),e(Ia,_Xo),e(no,bXo),e(no,qe),e(qe,B5),e(B5,yge),e(yge,vXo),e(B5,FXo),e(B5,OO),e(OO,TXo),e(B5,MXo),e(qe,EXo),e(qe,P5),e(P5,Lge),e(Lge,CXo),e(P5,wXo),e(P5,VO),e(VO,AXo),e(P5,yXo),e(qe,LXo),e(qe,I5),e(I5,xge),e(xge,xXo),e(I5,$Xo),e(I5,XO),e(XO,kXo),e(I5,SXo),e(qe,RXo),e(qe,q5),e(q5,$ge),e($ge,BXo),e(q5,PXo),e(q5,zO),e(zO,IXo),e(q5,qXo),e(qe,NXo),e(qe,N5),e(N5,kge),e(kge,jXo),e(N5,DXo),e(N5,QO),e(QO,GXo),e(N5,OXo),e(qe,VXo),e(qe,j5),e(j5,Sge),e(Sge,XXo),e(j5,zXo),e(j5,WO),e(WO,QXo),e(j5,WXo),e(qe,HXo),e(qe,D5),e(D5,Rge),e(Rge,UXo),e(D5,JXo),e(D5,HO),e(HO,YXo),e(D5,KXo),e(qe,ZXo),e(qe,G5),e(G5,Bge),e(Bge,ezo),e(G5,ozo),e(G5,UO),e(UO,rzo),e(G5,tzo),e(no,azo),e(no,O5),e(O5,nzo),e(O5,Pge),e(Pge,szo),e(O5,lzo),e(O5,Ige),e(Ige,izo),e(no,dzo),M(V5,no,null),b(f,bBe,_),b(f,td,_),e(td,X5),e(X5,qge),M(ry,qge,null),e(td,czo),e(td,Nge),e(Nge,fzo),b(f,vBe,_),b(f,Do,_),M(ty,Do,null),e(Do,mzo),e(Do,ad),e(ad,gzo),e(ad,JO),e(JO,hzo),e(ad,pzo),e(ad,YO),e(YO,uzo),e(ad,_zo),e(Do,bzo),e(Do,ay),e(ay,vzo),e(ay,jge),e(jge,Fzo),e(ay,Tzo),e(Do,Mzo),e(Do,gt),M(ny,gt,null),e(gt,Ezo),e(gt,Dge),e(Dge,Czo),e(gt,wzo),e(gt,nd),e(nd,Azo),e(nd,Gge),e(Gge,yzo),e(nd,Lzo),e(nd,KO),e(KO,xzo),e(nd,$zo),e(gt,kzo),M(z5,gt,null),e(Do,Szo),e(Do,so),M(sy,so,null),e(so,Rzo),e(so,Oge),e(Oge,Bzo),e(so,Pzo),e(so,qa),e(qa,Izo),e(qa,Vge),e(Vge,qzo),e(qa,Nzo),e(qa,Xge),e(Xge,jzo),e(qa,Dzo),e(qa,zge),e(zge,Gzo),e(qa,Ozo),e(so,Vzo),e(so,Na),e(Na,Q5),e(Q5,Qge),e(Qge,Xzo),e(Q5,zzo),e(Q5,ZO),e(ZO,Qzo),e(Q5,Wzo),e(Na,Hzo),e(Na,W5),e(W5,Wge),e(Wge,Uzo),e(W5,Jzo),e(W5,eV),e(eV,Yzo),e(W5,Kzo),e(Na,Zzo),e(Na,H5),e(H5,Hge),e(Hge,eQo),e(H5,oQo),e(H5,oV),e(oV,rQo),e(H5,tQo),e(Na,aQo),e(Na,U5),e(U5,Uge),e(Uge,nQo),e(U5,sQo),e(U5,rV),e(rV,lQo),e(U5,iQo),e(so,dQo),e(so,J5),e(J5,cQo),e(J5,Jge),e(Jge,fQo),e(J5,mQo),e(J5,Yge),e(Yge,gQo),e(so,hQo),M(Y5,so,null),b(f,FBe,_),b(f,sd,_),e(sd,K5),e(K5,Kge),M(ly,Kge,null),e(sd,pQo),e(sd,Zge),e(Zge,uQo),b(f,TBe,_),b(f,Go,_),M(iy,Go,null),e(Go,_Qo),e(Go,ld),e(ld,bQo),e(ld,tV),e(tV,vQo),e(ld,FQo),e(ld,aV),e(aV,TQo),e(ld,MQo),e(Go,EQo),e(Go,dy),e(dy,CQo),e(dy,ehe),e(ehe,wQo),e(dy,AQo),e(Go,yQo),e(Go,ht),M(cy,ht,null),e(ht,LQo),e(ht,ohe),e(ohe,xQo),e(ht,$Qo),e(ht,id),e(id,kQo),e(id,rhe),e(rhe,SQo),e(id,RQo),e(id,nV),e(nV,BQo),e(id,PQo),e(ht,IQo),M(Z5,ht,null),e(Go,qQo),e(Go,lo),M(fy,lo,null),e(lo,NQo),e(lo,the),e(the,jQo),e(lo,DQo),e(lo,ja),e(ja,GQo),e(ja,ahe),e(ahe,OQo),e(ja,VQo),e(ja,nhe),e(nhe,XQo),e(ja,zQo),e(ja,she),e(she,QQo),e(ja,WQo),e(lo,HQo),e(lo,Ne),e(Ne,ev),e(ev,lhe),e(lhe,UQo),e(ev,JQo),e(ev,sV),e(sV,YQo),e(ev,KQo),e(Ne,ZQo),e(Ne,ov),e(ov,ihe),e(ihe,eWo),e(ov,oWo),e(ov,lV),e(lV,rWo),e(ov,tWo),e(Ne,aWo),e(Ne,rv),e(rv,dhe),e(dhe,nWo),e(rv,sWo),e(rv,iV),e(iV,lWo),e(rv,iWo),e(Ne,dWo),e(Ne,tv),e(tv,che),e(che,cWo),e(tv,fWo),e(tv,dV),e(dV,mWo),e(tv,gWo),e(Ne,hWo),e(Ne,av),e(av,fhe),e(fhe,pWo),e(av,uWo),e(av,cV),e(cV,_Wo),e(av,bWo),e(Ne,vWo),e(Ne,nv),e(nv,mhe),e(mhe,FWo),e(nv,TWo),e(nv,fV),e(fV,MWo),e(nv,EWo),e(Ne,CWo),e(Ne,sv),e(sv,ghe),e(ghe,wWo),e(sv,AWo),e(sv,mV),e(mV,yWo),e(sv,LWo),e(Ne,xWo),e(Ne,lv),e(lv,hhe),e(hhe,$Wo),e(lv,kWo),e(lv,gV),e(gV,SWo),e(lv,RWo),e(lo,BWo),e(lo,iv),e(iv,PWo),e(iv,phe),e(phe,IWo),e(iv,qWo),e(iv,uhe),e(uhe,NWo),e(lo,jWo),M(dv,lo,null),b(f,MBe,_),b(f,dd,_),e(dd,cv),e(cv,_he),M(my,_he,null),e(dd,DWo),e(dd,bhe),e(bhe,GWo),b(f,EBe,_),b(f,Oo,_),M(gy,Oo,null),e(Oo,OWo),e(Oo,cd),e(cd,VWo),e(cd,hV),e(hV,XWo),e(cd,zWo),e(cd,pV),e(pV,QWo),e(cd,WWo),e(Oo,HWo),e(Oo,hy),e(hy,UWo),e(hy,vhe),e(vhe,JWo),e(hy,YWo),e(Oo,KWo),e(Oo,pt),M(py,pt,null),e(pt,ZWo),e(pt,Fhe),e(Fhe,eHo),e(pt,oHo),e(pt,fd),e(fd,rHo),e(fd,The),e(The,tHo),e(fd,aHo),e(fd,uV),e(uV,nHo),e(fd,sHo),e(pt,lHo),M(fv,pt,null),e(Oo,iHo),e(Oo,io),M(uy,io,null),e(io,dHo),e(io,Mhe),e(Mhe,cHo),e(io,fHo),e(io,Da),e(Da,mHo),e(Da,Ehe),e(Ehe,gHo),e(Da,hHo),e(Da,Che),e(Che,pHo),e(Da,uHo),e(Da,whe),e(whe,_Ho),e(Da,bHo),e(io,vHo),e(io,_y),e(_y,mv),e(mv,Ahe),e(Ahe,FHo),e(mv,THo),e(mv,_V),e(_V,MHo),e(mv,EHo),e(_y,CHo),e(_y,gv),e(gv,yhe),e(yhe,wHo),e(gv,AHo),e(gv,bV),e(bV,yHo),e(gv,LHo),e(io,xHo),e(io,hv),e(hv,$Ho),e(hv,Lhe),e(Lhe,kHo),e(hv,SHo),e(hv,xhe),e(xhe,RHo),e(io,BHo),M(pv,io,null),b(f,CBe,_),b(f,md,_),e(md,uv),e(uv,$he),M(by,$he,null),e(md,PHo),e(md,khe),e(khe,IHo),b(f,wBe,_),b(f,Vo,_),M(vy,Vo,null),e(Vo,qHo),e(Vo,gd),e(gd,NHo),e(gd,vV),e(vV,jHo),e(gd,DHo),e(gd,FV),e(FV,GHo),e(gd,OHo),e(Vo,VHo),e(Vo,Fy),e(Fy,XHo),e(Fy,She),e(She,zHo),e(Fy,QHo),e(Vo,WHo),e(Vo,ut),M(Ty,ut,null),e(ut,HHo),e(ut,Rhe),e(Rhe,UHo),e(ut,JHo),e(ut,hd),e(hd,YHo),e(hd,Bhe),e(Bhe,KHo),e(hd,ZHo),e(hd,TV),e(TV,eUo),e(hd,oUo),e(ut,rUo),M(_v,ut,null),e(Vo,tUo),e(Vo,co),M(My,co,null),e(co,aUo),e(co,Phe),e(Phe,nUo),e(co,sUo),e(co,Ga),e(Ga,lUo),e(Ga,Ihe),e(Ihe,iUo),e(Ga,dUo),e(Ga,qhe),e(qhe,cUo),e(Ga,fUo),e(Ga,Nhe),e(Nhe,mUo),e(Ga,gUo),e(co,hUo),e(co,Oa),e(Oa,bv),e(bv,jhe),e(jhe,pUo),e(bv,uUo),e(bv,MV),e(MV,_Uo),e(bv,bUo),e(Oa,vUo),e(Oa,vv),e(vv,Dhe),e(Dhe,FUo),e(vv,TUo),e(vv,EV),e(EV,MUo),e(vv,EUo),e(Oa,CUo),e(Oa,Fv),e(Fv,Ghe),e(Ghe,wUo),e(Fv,AUo),e(Fv,CV),e(CV,yUo),e(Fv,LUo),e(Oa,xUo),e(Oa,Tv),e(Tv,Ohe),e(Ohe,$Uo),e(Tv,kUo),e(Tv,wV),e(wV,SUo),e(Tv,RUo),e(co,BUo),e(co,Mv),e(Mv,PUo),e(Mv,Vhe),e(Vhe,IUo),e(Mv,qUo),e(Mv,Xhe),e(Xhe,NUo),e(co,jUo),M(Ev,co,null),b(f,ABe,_),b(f,pd,_),e(pd,Cv),e(Cv,zhe),M(Ey,zhe,null),e(pd,DUo),e(pd,Qhe),e(Qhe,GUo),b(f,yBe,_),b(f,Xo,_),M(Cy,Xo,null),e(Xo,OUo),e(Xo,ud),e(ud,VUo),e(ud,AV),e(AV,XUo),e(ud,zUo),e(ud,yV),e(yV,QUo),e(ud,WUo),e(Xo,HUo),e(Xo,wy),e(wy,UUo),e(wy,Whe),e(Whe,JUo),e(wy,YUo),e(Xo,KUo),e(Xo,_t),M(Ay,_t,null),e(_t,ZUo),e(_t,Hhe),e(Hhe,eJo),e(_t,oJo),e(_t,_d),e(_d,rJo),e(_d,Uhe),e(Uhe,tJo),e(_d,aJo),e(_d,LV),e(LV,nJo),e(_d,sJo),e(_t,lJo),M(wv,_t,null),e(Xo,iJo),e(Xo,fo),M(yy,fo,null),e(fo,dJo),e(fo,Jhe),e(Jhe,cJo),e(fo,fJo),e(fo,Va),e(Va,mJo),e(Va,Yhe),e(Yhe,gJo),e(Va,hJo),e(Va,Khe),e(Khe,pJo),e(Va,uJo),e(Va,Zhe),e(Zhe,_Jo),e(Va,bJo),e(fo,vJo),e(fo,bd),e(bd,Av),e(Av,epe),e(epe,FJo),e(Av,TJo),e(Av,xV),e(xV,MJo),e(Av,EJo),e(bd,CJo),e(bd,yv),e(yv,ope),e(ope,wJo),e(yv,AJo),e(yv,$V),e($V,yJo),e(yv,LJo),e(bd,xJo),e(bd,Lv),e(Lv,rpe),e(rpe,$Jo),e(Lv,kJo),e(Lv,kV),e(kV,SJo),e(Lv,RJo),e(fo,BJo),e(fo,xv),e(xv,PJo),e(xv,tpe),e(tpe,IJo),e(xv,qJo),e(xv,ape),e(ape,NJo),e(fo,jJo),M($v,fo,null),b(f,LBe,_),b(f,vd,_),e(vd,kv),e(kv,npe),M(Ly,npe,null),e(vd,DJo),e(vd,spe),e(spe,GJo),b(f,xBe,_),b(f,zo,_),M(xy,zo,null),e(zo,OJo),e(zo,Fd),e(Fd,VJo),e(Fd,SV),e(SV,XJo),e(Fd,zJo),e(Fd,RV),e(RV,QJo),e(Fd,WJo),e(zo,HJo),e(zo,$y),e($y,UJo),e($y,lpe),e(lpe,JJo),e($y,YJo),e(zo,KJo),e(zo,bt),M(ky,bt,null),e(bt,ZJo),e(bt,ipe),e(ipe,eYo),e(bt,oYo),e(bt,Td),e(Td,rYo),e(Td,dpe),e(dpe,tYo),e(Td,aYo),e(Td,BV),e(BV,nYo),e(Td,sYo),e(bt,lYo),M(Sv,bt,null),e(zo,iYo),e(zo,mo),M(Sy,mo,null),e(mo,dYo),e(mo,cpe),e(cpe,cYo),e(mo,fYo),e(mo,Xa),e(Xa,mYo),e(Xa,fpe),e(fpe,gYo),e(Xa,hYo),e(Xa,mpe),e(mpe,pYo),e(Xa,uYo),e(Xa,gpe),e(gpe,_Yo),e(Xa,bYo),e(mo,vYo),e(mo,hpe),e(hpe,Rv),e(Rv,ppe),e(ppe,FYo),e(Rv,TYo),e(Rv,PV),e(PV,MYo),e(Rv,EYo),e(mo,CYo),e(mo,Bv),e(Bv,wYo),e(Bv,upe),e(upe,AYo),e(Bv,yYo),e(Bv,_pe),e(_pe,LYo),e(mo,xYo),M(Pv,mo,null),b(f,$Be,_),b(f,Md,_),e(Md,Iv),e(Iv,bpe),M(Ry,bpe,null),e(Md,$Yo),e(Md,vpe),e(vpe,kYo),b(f,kBe,_),b(f,Qo,_),M(By,Qo,null),e(Qo,SYo),e(Qo,Ed),e(Ed,RYo),e(Ed,IV),e(IV,BYo),e(Ed,PYo),e(Ed,qV),e(qV,IYo),e(Ed,qYo),e(Qo,NYo),e(Qo,Py),e(Py,jYo),e(Py,Fpe),e(Fpe,DYo),e(Py,GYo),e(Qo,OYo),e(Qo,vt),M(Iy,vt,null),e(vt,VYo),e(vt,Tpe),e(Tpe,XYo),e(vt,zYo),e(vt,Cd),e(Cd,QYo),e(Cd,Mpe),e(Mpe,WYo),e(Cd,HYo),e(Cd,NV),e(NV,UYo),e(Cd,JYo),e(vt,YYo),M(qv,vt,null),e(Qo,KYo),e(Qo,go),M(qy,go,null),e(go,ZYo),e(go,Epe),e(Epe,eKo),e(go,oKo),e(go,za),e(za,rKo),e(za,Cpe),e(Cpe,tKo),e(za,aKo),e(za,wpe),e(wpe,nKo),e(za,sKo),e(za,Ape),e(Ape,lKo),e(za,iKo),e(go,dKo),e(go,ype),e(ype,Nv),e(Nv,Lpe),e(Lpe,cKo),e(Nv,fKo),e(Nv,jV),e(jV,mKo),e(Nv,gKo),e(go,hKo),e(go,jv),e(jv,pKo),e(jv,xpe),e(xpe,uKo),e(jv,_Ko),e(jv,$pe),e($pe,bKo),e(go,vKo),M(Dv,go,null),b(f,SBe,_),b(f,wd,_),e(wd,Gv),e(Gv,kpe),M(Ny,kpe,null),e(wd,FKo),e(wd,Spe),e(Spe,TKo),b(f,RBe,_),b(f,Wo,_),M(jy,Wo,null),e(Wo,MKo),e(Wo,Ad),e(Ad,EKo),e(Ad,DV),e(DV,CKo),e(Ad,wKo),e(Ad,GV),e(GV,AKo),e(Ad,yKo),e(Wo,LKo),e(Wo,Dy),e(Dy,xKo),e(Dy,Rpe),e(Rpe,$Ko),e(Dy,kKo),e(Wo,SKo),e(Wo,Ft),M(Gy,Ft,null),e(Ft,RKo),e(Ft,Bpe),e(Bpe,BKo),e(Ft,PKo),e(Ft,yd),e(yd,IKo),e(yd,Ppe),e(Ppe,qKo),e(yd,NKo),e(yd,OV),e(OV,jKo),e(yd,DKo),e(Ft,GKo),M(Ov,Ft,null),e(Wo,OKo),e(Wo,ho),M(Oy,ho,null),e(ho,VKo),e(ho,Ipe),e(Ipe,XKo),e(ho,zKo),e(ho,Qa),e(Qa,QKo),e(Qa,qpe),e(qpe,WKo),e(Qa,HKo),e(Qa,Npe),e(Npe,UKo),e(Qa,JKo),e(Qa,jpe),e(jpe,YKo),e(Qa,KKo),e(ho,ZKo),e(ho,Wa),e(Wa,Vv),e(Vv,Dpe),e(Dpe,eZo),e(Vv,oZo),e(Vv,VV),e(VV,rZo),e(Vv,tZo),e(Wa,aZo),e(Wa,Xv),e(Xv,Gpe),e(Gpe,nZo),e(Xv,sZo),e(Xv,XV),e(XV,lZo),e(Xv,iZo),e(Wa,dZo),e(Wa,zv),e(zv,Ope),e(Ope,cZo),e(zv,fZo),e(zv,zV),e(zV,mZo),e(zv,gZo),e(Wa,hZo),e(Wa,Qv),e(Qv,Vpe),e(Vpe,pZo),e(Qv,uZo),e(Qv,QV),e(QV,_Zo),e(Qv,bZo),e(ho,vZo),e(ho,Wv),e(Wv,FZo),e(Wv,Xpe),e(Xpe,TZo),e(Wv,MZo),e(Wv,zpe),e(zpe,EZo),e(ho,CZo),M(Hv,ho,null),b(f,BBe,_),b(f,Ld,_),e(Ld,Uv),e(Uv,Qpe),M(Vy,Qpe,null),e(Ld,wZo),e(Ld,Wpe),e(Wpe,AZo),b(f,PBe,_),b(f,Ho,_),M(Xy,Ho,null),e(Ho,yZo),e(Ho,xd),e(xd,LZo),e(xd,WV),e(WV,xZo),e(xd,$Zo),e(xd,HV),e(HV,kZo),e(xd,SZo),e(Ho,RZo),e(Ho,zy),e(zy,BZo),e(zy,Hpe),e(Hpe,PZo),e(zy,IZo),e(Ho,qZo),e(Ho,Tt),M(Qy,Tt,null),e(Tt,NZo),e(Tt,Upe),e(Upe,jZo),e(Tt,DZo),e(Tt,$d),e($d,GZo),e($d,Jpe),e(Jpe,OZo),e($d,VZo),e($d,UV),e(UV,XZo),e($d,zZo),e(Tt,QZo),M(Jv,Tt,null),e(Ho,WZo),e(Ho,po),M(Wy,po,null),e(po,HZo),e(po,Ype),e(Ype,UZo),e(po,JZo),e(po,Ha),e(Ha,YZo),e(Ha,Kpe),e(Kpe,KZo),e(Ha,ZZo),e(Ha,Zpe),e(Zpe,eer),e(Ha,oer),e(Ha,eue),e(eue,rer),e(Ha,ter),e(po,aer),e(po,oue),e(oue,Yv),e(Yv,rue),e(rue,ner),e(Yv,ser),e(Yv,JV),e(JV,ler),e(Yv,ier),e(po,der),e(po,Kv),e(Kv,cer),e(Kv,tue),e(tue,fer),e(Kv,mer),e(Kv,aue),e(aue,ger),e(po,her),M(Zv,po,null),b(f,IBe,_),b(f,kd,_),e(kd,eF),e(eF,nue),M(Hy,nue,null),e(kd,per),e(kd,sue),e(sue,uer),b(f,qBe,_),b(f,Uo,_),M(Uy,Uo,null),e(Uo,_er),e(Uo,Sd),e(Sd,ber),e(Sd,YV),e(YV,ver),e(Sd,Fer),e(Sd,KV),e(KV,Ter),e(Sd,Mer),e(Uo,Eer),e(Uo,Jy),e(Jy,Cer),e(Jy,lue),e(lue,wer),e(Jy,Aer),e(Uo,yer),e(Uo,Mt),M(Yy,Mt,null),e(Mt,Ler),e(Mt,iue),e(iue,xer),e(Mt,$er),e(Mt,Rd),e(Rd,ker),e(Rd,due),e(due,Ser),e(Rd,Rer),e(Rd,ZV),e(ZV,Ber),e(Rd,Per),e(Mt,Ier),M(oF,Mt,null),e(Uo,qer),e(Uo,Er),M(Ky,Er,null),e(Er,Ner),e(Er,cue),e(cue,jer),e(Er,Der),e(Er,Ua),e(Ua,Ger),e(Ua,fue),e(fue,Oer),e(Ua,Ver),e(Ua,mue),e(mue,Xer),e(Ua,zer),e(Ua,gue),e(gue,Qer),e(Ua,Wer),e(Er,Her),e(Er,j),e(j,rF),e(rF,hue),e(hue,Uer),e(rF,Jer),e(rF,eX),e(eX,Yer),e(rF,Ker),e(j,Zer),e(j,tF),e(tF,pue),e(pue,eor),e(tF,oor),e(tF,oX),e(oX,ror),e(tF,tor),e(j,aor),e(j,aF),e(aF,uue),e(uue,nor),e(aF,sor),e(aF,rX),e(rX,lor),e(aF,ior),e(j,dor),e(j,nF),e(nF,_ue),e(_ue,cor),e(nF,mor),e(nF,tX),e(tX,gor),e(nF,hor),e(j,por),e(j,sF),e(sF,bue),e(bue,uor),e(sF,_or),e(sF,aX),e(aX,bor),e(sF,vor),e(j,For),e(j,lF),e(lF,vue),e(vue,Tor),e(lF,Mor),e(lF,nX),e(nX,Eor),e(lF,Cor),e(j,wor),e(j,iF),e(iF,Fue),e(Fue,Aor),e(iF,yor),e(iF,sX),e(sX,Lor),e(iF,xor),e(j,$or),e(j,dF),e(dF,Tue),e(Tue,kor),e(dF,Sor),e(dF,lX),e(lX,Ror),e(dF,Bor),e(j,Por),e(j,cF),e(cF,Mue),e(Mue,Ior),e(cF,qor),e(cF,iX),e(iX,Nor),e(cF,jor),e(j,Dor),e(j,fF),e(fF,Eue),e(Eue,Gor),e(fF,Oor),e(fF,dX),e(dX,Vor),e(fF,Xor),e(j,zor),e(j,mF),e(mF,Cue),e(Cue,Qor),e(mF,Wor),e(mF,cX),e(cX,Hor),e(mF,Uor),e(j,Jor),e(j,gF),e(gF,wue),e(wue,Yor),e(gF,Kor),e(gF,fX),e(fX,Zor),e(gF,err),e(j,orr),e(j,hF),e(hF,Aue),e(Aue,rrr),e(hF,trr),e(hF,mX),e(mX,arr),e(hF,nrr),e(j,srr),e(j,pF),e(pF,yue),e(yue,lrr),e(pF,irr),e(pF,gX),e(gX,drr),e(pF,crr),e(j,frr),e(j,uF),e(uF,Lue),e(Lue,mrr),e(uF,grr),e(uF,hX),e(hX,hrr),e(uF,prr),e(j,urr),e(j,_F),e(_F,xue),e(xue,_rr),e(_F,brr),e(_F,pX),e(pX,vrr),e(_F,Frr),e(j,Trr),e(j,$s),e($s,$ue),e($ue,Mrr),e($s,Err),e($s,uX),e(uX,Crr),e($s,wrr),e($s,_X),e(_X,Arr),e($s,yrr),e(j,Lrr),e(j,bF),e(bF,kue),e(kue,xrr),e(bF,$rr),e(bF,bX),e(bX,krr),e(bF,Srr),e(j,Rrr),e(j,vF),e(vF,Sue),e(Sue,Brr),e(vF,Prr),e(vF,vX),e(vX,Irr),e(vF,qrr),e(j,Nrr),e(j,FF),e(FF,Rue),e(Rue,jrr),e(FF,Drr),e(FF,FX),e(FX,Grr),e(FF,Orr),e(j,Vrr),e(j,TF),e(TF,Bue),e(Bue,Xrr),e(TF,zrr),e(TF,TX),e(TX,Qrr),e(TF,Wrr),e(j,Hrr),e(j,MF),e(MF,Pue),e(Pue,Urr),e(MF,Jrr),e(MF,MX),e(MX,Yrr),e(MF,Krr),e(j,Zrr),e(j,EF),e(EF,Iue),e(Iue,etr),e(EF,otr),e(EF,EX),e(EX,rtr),e(EF,ttr),e(j,atr),e(j,CF),e(CF,que),e(que,ntr),e(CF,str),e(CF,CX),e(CX,ltr),e(CF,itr),e(j,dtr),e(j,wF),e(wF,Nue),e(Nue,ctr),e(wF,ftr),e(wF,wX),e(wX,mtr),e(wF,gtr),e(j,htr),e(j,AF),e(AF,jue),e(jue,ptr),e(AF,utr),e(AF,AX),e(AX,_tr),e(AF,btr),e(j,vtr),e(j,yF),e(yF,Due),e(Due,Ftr),e(yF,Ttr),e(yF,yX),e(yX,Mtr),e(yF,Etr),e(j,Ctr),e(j,LF),e(LF,Gue),e(Gue,wtr),e(LF,Atr),e(LF,LX),e(LX,ytr),e(LF,Ltr),e(j,xtr),e(j,xF),e(xF,Oue),e(Oue,$tr),e(xF,ktr),e(xF,xX),e(xX,Str),e(xF,Rtr),e(j,Btr),e(j,$F),e($F,Vue),e(Vue,Ptr),e($F,Itr),e($F,$X),e($X,qtr),e($F,Ntr),e(j,jtr),e(j,kF),e(kF,Xue),e(Xue,Dtr),e(kF,Gtr),e(kF,kX),e(kX,Otr),e(kF,Vtr),e(j,Xtr),e(j,SF),e(SF,zue),e(zue,ztr),e(SF,Qtr),e(SF,SX),e(SX,Wtr),e(SF,Htr),e(j,Utr),e(j,RF),e(RF,Que),e(Que,Jtr),e(RF,Ytr),e(RF,RX),e(RX,Ktr),e(RF,Ztr),e(j,ear),e(j,BF),e(BF,Wue),e(Wue,oar),e(BF,rar),e(BF,BX),e(BX,tar),e(BF,aar),e(j,nar),e(j,PF),e(PF,Hue),e(Hue,sar),e(PF,lar),e(PF,PX),e(PX,iar),e(PF,dar),e(j,car),e(j,IF),e(IF,Uue),e(Uue,far),e(IF,mar),e(IF,IX),e(IX,gar),e(IF,har),e(j,par),e(j,qF),e(qF,Jue),e(Jue,uar),e(qF,_ar),e(qF,qX),e(qX,bar),e(qF,Far),e(j,Tar),e(j,NF),e(NF,Yue),e(Yue,Mar),e(NF,Ear),e(NF,NX),e(NX,Car),e(NF,war),e(j,Aar),e(j,jF),e(jF,Kue),e(Kue,yar),e(jF,Lar),e(jF,jX),e(jX,xar),e(jF,$ar),e(j,kar),e(j,DF),e(DF,Zue),e(Zue,Sar),e(DF,Rar),e(DF,DX),e(DX,Bar),e(DF,Par),e(j,Iar),e(j,GF),e(GF,e_e),e(e_e,qar),e(GF,Nar),e(GF,GX),e(GX,jar),e(GF,Dar),e(j,Gar),e(j,OF),e(OF,o_e),e(o_e,Oar),e(OF,Var),e(OF,OX),e(OX,Xar),e(OF,zar),e(j,Qar),e(j,VF),e(VF,r_e),e(r_e,War),e(VF,Har),e(VF,VX),e(VX,Uar),e(VF,Jar),e(j,Yar),e(j,XF),e(XF,t_e),e(t_e,Kar),e(XF,Zar),e(XF,XX),e(XX,enr),e(XF,onr),e(Er,rnr),M(zF,Er,null),b(f,NBe,_),b(f,Bd,_),e(Bd,QF),e(QF,a_e),M(Zy,a_e,null),e(Bd,tnr),e(Bd,n_e),e(n_e,anr),b(f,jBe,_),b(f,Jo,_),M(eL,Jo,null),e(Jo,nnr),e(Jo,Pd),e(Pd,snr),e(Pd,zX),e(zX,lnr),e(Pd,inr),e(Pd,QX),e(QX,dnr),e(Pd,cnr),e(Jo,fnr),e(Jo,oL),e(oL,mnr),e(oL,s_e),e(s_e,gnr),e(oL,hnr),e(Jo,pnr),e(Jo,Et),M(rL,Et,null),e(Et,unr),e(Et,l_e),e(l_e,_nr),e(Et,bnr),e(Et,Id),e(Id,vnr),e(Id,i_e),e(i_e,Fnr),e(Id,Tnr),e(Id,WX),e(WX,Mnr),e(Id,Enr),e(Et,Cnr),M(WF,Et,null),e(Jo,wnr),e(Jo,Cr),M(tL,Cr,null),e(Cr,Anr),e(Cr,d_e),e(d_e,ynr),e(Cr,Lnr),e(Cr,Ja),e(Ja,xnr),e(Ja,c_e),e(c_e,$nr),e(Ja,knr),e(Ja,f_e),e(f_e,Snr),e(Ja,Rnr),e(Ja,m_e),e(m_e,Bnr),e(Ja,Pnr),e(Cr,Inr),e(Cr,ne),e(ne,HF),e(HF,g_e),e(g_e,qnr),e(HF,Nnr),e(HF,HX),e(HX,jnr),e(HF,Dnr),e(ne,Gnr),e(ne,UF),e(UF,h_e),e(h_e,Onr),e(UF,Vnr),e(UF,UX),e(UX,Xnr),e(UF,znr),e(ne,Qnr),e(ne,JF),e(JF,p_e),e(p_e,Wnr),e(JF,Hnr),e(JF,JX),e(JX,Unr),e(JF,Jnr),e(ne,Ynr),e(ne,YF),e(YF,u_e),e(u_e,Knr),e(YF,Znr),e(YF,YX),e(YX,esr),e(YF,osr),e(ne,rsr),e(ne,KF),e(KF,__e),e(__e,tsr),e(KF,asr),e(KF,KX),e(KX,nsr),e(KF,ssr),e(ne,lsr),e(ne,ZF),e(ZF,b_e),e(b_e,isr),e(ZF,dsr),e(ZF,ZX),e(ZX,csr),e(ZF,fsr),e(ne,msr),e(ne,e6),e(e6,v_e),e(v_e,gsr),e(e6,hsr),e(e6,ez),e(ez,psr),e(e6,usr),e(ne,_sr),e(ne,o6),e(o6,F_e),e(F_e,bsr),e(o6,vsr),e(o6,oz),e(oz,Fsr),e(o6,Tsr),e(ne,Msr),e(ne,r6),e(r6,T_e),e(T_e,Esr),e(r6,Csr),e(r6,rz),e(rz,wsr),e(r6,Asr),e(ne,ysr),e(ne,t6),e(t6,M_e),e(M_e,Lsr),e(t6,xsr),e(t6,tz),e(tz,$sr),e(t6,ksr),e(ne,Ssr),e(ne,a6),e(a6,E_e),e(E_e,Rsr),e(a6,Bsr),e(a6,az),e(az,Psr),e(a6,Isr),e(ne,qsr),e(ne,n6),e(n6,C_e),e(C_e,Nsr),e(n6,jsr),e(n6,nz),e(nz,Dsr),e(n6,Gsr),e(ne,Osr),e(ne,s6),e(s6,w_e),e(w_e,Vsr),e(s6,Xsr),e(s6,sz),e(sz,zsr),e(s6,Qsr),e(ne,Wsr),e(ne,l6),e(l6,A_e),e(A_e,Hsr),e(l6,Usr),e(l6,lz),e(lz,Jsr),e(l6,Ysr),e(ne,Ksr),e(ne,i6),e(i6,y_e),e(y_e,Zsr),e(i6,elr),e(i6,iz),e(iz,olr),e(i6,rlr),e(ne,tlr),e(ne,d6),e(d6,L_e),e(L_e,alr),e(d6,nlr),e(d6,dz),e(dz,slr),e(d6,llr),e(ne,ilr),e(ne,c6),e(c6,x_e),e(x_e,dlr),e(c6,clr),e(c6,cz),e(cz,flr),e(c6,mlr),e(ne,glr),e(ne,f6),e(f6,$_e),e($_e,hlr),e(f6,plr),e(f6,fz),e(fz,ulr),e(f6,_lr),e(ne,blr),e(ne,m6),e(m6,k_e),e(k_e,vlr),e(m6,Flr),e(m6,mz),e(mz,Tlr),e(m6,Mlr),e(ne,Elr),e(ne,g6),e(g6,S_e),e(S_e,Clr),e(g6,wlr),e(g6,gz),e(gz,Alr),e(g6,ylr),e(ne,Llr),e(ne,h6),e(h6,R_e),e(R_e,xlr),e(h6,$lr),e(h6,hz),e(hz,klr),e(h6,Slr),e(ne,Rlr),e(ne,p6),e(p6,B_e),e(B_e,Blr),e(p6,Plr),e(p6,pz),e(pz,Ilr),e(p6,qlr),e(ne,Nlr),e(ne,u6),e(u6,P_e),e(P_e,jlr),e(u6,Dlr),e(u6,uz),e(uz,Glr),e(u6,Olr),e(Cr,Vlr),M(_6,Cr,null),b(f,DBe,_),b(f,qd,_),e(qd,b6),e(b6,I_e),M(aL,I_e,null),e(qd,Xlr),e(qd,q_e),e(q_e,zlr),b(f,GBe,_),b(f,Yo,_),M(nL,Yo,null),e(Yo,Qlr),e(Yo,Nd),e(Nd,Wlr),e(Nd,_z),e(_z,Hlr),e(Nd,Ulr),e(Nd,bz),e(bz,Jlr),e(Nd,Ylr),e(Yo,Klr),e(Yo,sL),e(sL,Zlr),e(sL,N_e),e(N_e,eir),e(sL,oir),e(Yo,rir),e(Yo,Ct),M(lL,Ct,null),e(Ct,tir),e(Ct,j_e),e(j_e,air),e(Ct,nir),e(Ct,jd),e(jd,sir),e(jd,D_e),e(D_e,lir),e(jd,iir),e(jd,vz),e(vz,dir),e(jd,cir),e(Ct,fir),M(v6,Ct,null),e(Yo,mir),e(Yo,wr),M(iL,wr,null),e(wr,gir),e(wr,G_e),e(G_e,hir),e(wr,pir),e(wr,Ya),e(Ya,uir),e(Ya,O_e),e(O_e,_ir),e(Ya,bir),e(Ya,V_e),e(V_e,vir),e(Ya,Fir),e(Ya,X_e),e(X_e,Tir),e(Ya,Mir),e(wr,Eir),e(wr,Te),e(Te,F6),e(F6,z_e),e(z_e,Cir),e(F6,wir),e(F6,Fz),e(Fz,Air),e(F6,yir),e(Te,Lir),e(Te,T6),e(T6,Q_e),e(Q_e,xir),e(T6,$ir),e(T6,Tz),e(Tz,kir),e(T6,Sir),e(Te,Rir),e(Te,M6),e(M6,W_e),e(W_e,Bir),e(M6,Pir),e(M6,Mz),e(Mz,Iir),e(M6,qir),e(Te,Nir),e(Te,E6),e(E6,H_e),e(H_e,jir),e(E6,Dir),e(E6,Ez),e(Ez,Gir),e(E6,Oir),e(Te,Vir),e(Te,C6),e(C6,U_e),e(U_e,Xir),e(C6,zir),e(C6,Cz),e(Cz,Qir),e(C6,Wir),e(Te,Hir),e(Te,w6),e(w6,J_e),e(J_e,Uir),e(w6,Jir),e(w6,wz),e(wz,Yir),e(w6,Kir),e(Te,Zir),e(Te,A6),e(A6,Y_e),e(Y_e,edr),e(A6,odr),e(A6,Az),e(Az,rdr),e(A6,tdr),e(Te,adr),e(Te,y6),e(y6,K_e),e(K_e,ndr),e(y6,sdr),e(y6,yz),e(yz,ldr),e(y6,idr),e(Te,ddr),e(Te,L6),e(L6,Z_e),e(Z_e,cdr),e(L6,fdr),e(L6,Lz),e(Lz,mdr),e(L6,gdr),e(Te,hdr),e(Te,x6),e(x6,e1e),e(e1e,pdr),e(x6,udr),e(x6,xz),e(xz,_dr),e(x6,bdr),e(Te,vdr),e(Te,$6),e($6,o1e),e(o1e,Fdr),e($6,Tdr),e($6,$z),e($z,Mdr),e($6,Edr),e(Te,Cdr),e(Te,k6),e(k6,r1e),e(r1e,wdr),e(k6,Adr),e(k6,kz),e(kz,ydr),e(k6,Ldr),e(wr,xdr),M(S6,wr,null),b(f,OBe,_),b(f,Dd,_),e(Dd,R6),e(R6,t1e),M(dL,t1e,null),e(Dd,$dr),e(Dd,a1e),e(a1e,kdr),b(f,VBe,_),b(f,Ko,_),M(cL,Ko,null),e(Ko,Sdr),e(Ko,Gd),e(Gd,Rdr),e(Gd,Sz),e(Sz,Bdr),e(Gd,Pdr),e(Gd,Rz),e(Rz,Idr),e(Gd,qdr),e(Ko,Ndr),e(Ko,fL),e(fL,jdr),e(fL,n1e),e(n1e,Ddr),e(fL,Gdr),e(Ko,Odr),e(Ko,wt),M(mL,wt,null),e(wt,Vdr),e(wt,s1e),e(s1e,Xdr),e(wt,zdr),e(wt,Od),e(Od,Qdr),e(Od,l1e),e(l1e,Wdr),e(Od,Hdr),e(Od,Bz),e(Bz,Udr),e(Od,Jdr),e(wt,Ydr),M(B6,wt,null),e(Ko,Kdr),e(Ko,Ar),M(gL,Ar,null),e(Ar,Zdr),e(Ar,i1e),e(i1e,ecr),e(Ar,ocr),e(Ar,Ka),e(Ka,rcr),e(Ka,d1e),e(d1e,tcr),e(Ka,acr),e(Ka,c1e),e(c1e,ncr),e(Ka,scr),e(Ka,f1e),e(f1e,lcr),e(Ka,icr),e(Ar,dcr),e(Ar,hL),e(hL,P6),e(P6,m1e),e(m1e,ccr),e(P6,fcr),e(P6,Pz),e(Pz,mcr),e(P6,gcr),e(hL,hcr),e(hL,I6),e(I6,g1e),e(g1e,pcr),e(I6,ucr),e(I6,Iz),e(Iz,_cr),e(I6,bcr),e(Ar,vcr),M(q6,Ar,null),b(f,XBe,_),b(f,Vd,_),e(Vd,N6),e(N6,h1e),M(pL,h1e,null),e(Vd,Fcr),e(Vd,p1e),e(p1e,Tcr),b(f,zBe,_),b(f,Zo,_),M(uL,Zo,null),e(Zo,Mcr),e(Zo,Xd),e(Xd,Ecr),e(Xd,qz),e(qz,Ccr),e(Xd,wcr),e(Xd,Nz),e(Nz,Acr),e(Xd,ycr),e(Zo,Lcr),e(Zo,_L),e(_L,xcr),e(_L,u1e),e(u1e,$cr),e(_L,kcr),e(Zo,Scr),e(Zo,At),M(bL,At,null),e(At,Rcr),e(At,_1e),e(_1e,Bcr),e(At,Pcr),e(At,zd),e(zd,Icr),e(zd,b1e),e(b1e,qcr),e(zd,Ncr),e(zd,jz),e(jz,jcr),e(zd,Dcr),e(At,Gcr),M(j6,At,null),e(Zo,Ocr),e(Zo,yr),M(vL,yr,null),e(yr,Vcr),e(yr,v1e),e(v1e,Xcr),e(yr,zcr),e(yr,Za),e(Za,Qcr),e(Za,F1e),e(F1e,Wcr),e(Za,Hcr),e(Za,T1e),e(T1e,Ucr),e(Za,Jcr),e(Za,M1e),e(M1e,Ycr),e(Za,Kcr),e(yr,Zcr),e(yr,ie),e(ie,D6),e(D6,E1e),e(E1e,efr),e(D6,ofr),e(D6,Dz),e(Dz,rfr),e(D6,tfr),e(ie,afr),e(ie,G6),e(G6,C1e),e(C1e,nfr),e(G6,sfr),e(G6,Gz),e(Gz,lfr),e(G6,ifr),e(ie,dfr),e(ie,O6),e(O6,w1e),e(w1e,cfr),e(O6,ffr),e(O6,Oz),e(Oz,mfr),e(O6,gfr),e(ie,hfr),e(ie,V6),e(V6,A1e),e(A1e,pfr),e(V6,ufr),e(V6,Vz),e(Vz,_fr),e(V6,bfr),e(ie,vfr),e(ie,X6),e(X6,y1e),e(y1e,Ffr),e(X6,Tfr),e(X6,Xz),e(Xz,Mfr),e(X6,Efr),e(ie,Cfr),e(ie,z6),e(z6,L1e),e(L1e,wfr),e(z6,Afr),e(z6,zz),e(zz,yfr),e(z6,Lfr),e(ie,xfr),e(ie,Q6),e(Q6,x1e),e(x1e,$fr),e(Q6,kfr),e(Q6,Qz),e(Qz,Sfr),e(Q6,Rfr),e(ie,Bfr),e(ie,W6),e(W6,$1e),e($1e,Pfr),e(W6,Ifr),e(W6,Wz),e(Wz,qfr),e(W6,Nfr),e(ie,jfr),e(ie,H6),e(H6,k1e),e(k1e,Dfr),e(H6,Gfr),e(H6,Hz),e(Hz,Ofr),e(H6,Vfr),e(ie,Xfr),e(ie,U6),e(U6,S1e),e(S1e,zfr),e(U6,Qfr),e(U6,Uz),e(Uz,Wfr),e(U6,Hfr),e(ie,Ufr),e(ie,J6),e(J6,R1e),e(R1e,Jfr),e(J6,Yfr),e(J6,Jz),e(Jz,Kfr),e(J6,Zfr),e(ie,emr),e(ie,Y6),e(Y6,B1e),e(B1e,omr),e(Y6,rmr),e(Y6,Yz),e(Yz,tmr),e(Y6,amr),e(ie,nmr),e(ie,K6),e(K6,P1e),e(P1e,smr),e(K6,lmr),e(K6,Kz),e(Kz,imr),e(K6,dmr),e(ie,cmr),e(ie,Z6),e(Z6,I1e),e(I1e,fmr),e(Z6,mmr),e(Z6,Zz),e(Zz,gmr),e(Z6,hmr),e(ie,pmr),e(ie,eT),e(eT,q1e),e(q1e,umr),e(eT,_mr),e(eT,eQ),e(eQ,bmr),e(eT,vmr),e(ie,Fmr),e(ie,oT),e(oT,N1e),e(N1e,Tmr),e(oT,Mmr),e(oT,oQ),e(oQ,Emr),e(oT,Cmr),e(ie,wmr),e(ie,rT),e(rT,j1e),e(j1e,Amr),e(rT,ymr),e(rT,rQ),e(rQ,Lmr),e(rT,xmr),e(ie,$mr),e(ie,tT),e(tT,D1e),e(D1e,kmr),e(tT,Smr),e(tT,tQ),e(tQ,Rmr),e(tT,Bmr),e(ie,Pmr),e(ie,aT),e(aT,G1e),e(G1e,Imr),e(aT,qmr),e(aT,aQ),e(aQ,Nmr),e(aT,jmr),e(ie,Dmr),e(ie,nT),e(nT,O1e),e(O1e,Gmr),e(nT,Omr),e(nT,nQ),e(nQ,Vmr),e(nT,Xmr),e(yr,zmr),M(sT,yr,null),b(f,QBe,_),b(f,Qd,_),e(Qd,lT),e(lT,V1e),M(FL,V1e,null),e(Qd,Qmr),e(Qd,X1e),e(X1e,Wmr),b(f,WBe,_),b(f,er,_),M(TL,er,null),e(er,Hmr),e(er,Wd),e(Wd,Umr),e(Wd,sQ),e(sQ,Jmr),e(Wd,Ymr),e(Wd,lQ),e(lQ,Kmr),e(Wd,Zmr),e(er,egr),e(er,ML),e(ML,ogr),e(ML,z1e),e(z1e,rgr),e(ML,tgr),e(er,agr),e(er,yt),M(EL,yt,null),e(yt,ngr),e(yt,Q1e),e(Q1e,sgr),e(yt,lgr),e(yt,Hd),e(Hd,igr),e(Hd,W1e),e(W1e,dgr),e(Hd,cgr),e(Hd,iQ),e(iQ,fgr),e(Hd,mgr),e(yt,ggr),M(iT,yt,null),e(er,hgr),e(er,Lr),M(CL,Lr,null),e(Lr,pgr),e(Lr,H1e),e(H1e,ugr),e(Lr,_gr),e(Lr,en),e(en,bgr),e(en,U1e),e(U1e,vgr),e(en,Fgr),e(en,J1e),e(J1e,Tgr),e(en,Mgr),e(en,Y1e),e(Y1e,Egr),e(en,Cgr),e(Lr,wgr),e(Lr,ye),e(ye,dT),e(dT,K1e),e(K1e,Agr),e(dT,ygr),e(dT,dQ),e(dQ,Lgr),e(dT,xgr),e(ye,$gr),e(ye,cT),e(cT,Z1e),e(Z1e,kgr),e(cT,Sgr),e(cT,cQ),e(cQ,Rgr),e(cT,Bgr),e(ye,Pgr),e(ye,fT),e(fT,e9e),e(e9e,Igr),e(fT,qgr),e(fT,fQ),e(fQ,Ngr),e(fT,jgr),e(ye,Dgr),e(ye,mT),e(mT,o9e),e(o9e,Ggr),e(mT,Ogr),e(mT,mQ),e(mQ,Vgr),e(mT,Xgr),e(ye,zgr),e(ye,gT),e(gT,r9e),e(r9e,Qgr),e(gT,Wgr),e(gT,gQ),e(gQ,Hgr),e(gT,Ugr),e(ye,Jgr),e(ye,hT),e(hT,t9e),e(t9e,Ygr),e(hT,Kgr),e(hT,hQ),e(hQ,Zgr),e(hT,ehr),e(ye,ohr),e(ye,pT),e(pT,a9e),e(a9e,rhr),e(pT,thr),e(pT,pQ),e(pQ,ahr),e(pT,nhr),e(ye,shr),e(ye,uT),e(uT,n9e),e(n9e,lhr),e(uT,ihr),e(uT,uQ),e(uQ,dhr),e(uT,chr),e(ye,fhr),e(ye,_T),e(_T,s9e),e(s9e,mhr),e(_T,ghr),e(_T,_Q),e(_Q,hhr),e(_T,phr),e(ye,uhr),e(ye,bT),e(bT,l9e),e(l9e,_hr),e(bT,bhr),e(bT,bQ),e(bQ,vhr),e(bT,Fhr),e(Lr,Thr),M(vT,Lr,null),b(f,HBe,_),b(f,Ud,_),e(Ud,FT),e(FT,i9e),M(wL,i9e,null),e(Ud,Mhr),e(Ud,d9e),e(d9e,Ehr),b(f,UBe,_),b(f,or,_),M(AL,or,null),e(or,Chr),e(or,Jd),e(Jd,whr),e(Jd,vQ),e(vQ,Ahr),e(Jd,yhr),e(Jd,FQ),e(FQ,Lhr),e(Jd,xhr),e(or,$hr),e(or,yL),e(yL,khr),e(yL,c9e),e(c9e,Shr),e(yL,Rhr),e(or,Bhr),e(or,Lt),M(LL,Lt,null),e(Lt,Phr),e(Lt,f9e),e(f9e,Ihr),e(Lt,qhr),e(Lt,Yd),e(Yd,Nhr),e(Yd,m9e),e(m9e,jhr),e(Yd,Dhr),e(Yd,TQ),e(TQ,Ghr),e(Yd,Ohr),e(Lt,Vhr),M(TT,Lt,null),e(or,Xhr),e(or,xr),M(xL,xr,null),e(xr,zhr),e(xr,g9e),e(g9e,Qhr),e(xr,Whr),e(xr,on),e(on,Hhr),e(on,h9e),e(h9e,Uhr),e(on,Jhr),e(on,p9e),e(p9e,Yhr),e(on,Khr),e(on,u9e),e(u9e,Zhr),e(on,epr),e(xr,opr),e(xr,Z),e(Z,MT),e(MT,_9e),e(_9e,rpr),e(MT,tpr),e(MT,MQ),e(MQ,apr),e(MT,npr),e(Z,spr),e(Z,ET),e(ET,b9e),e(b9e,lpr),e(ET,ipr),e(ET,EQ),e(EQ,dpr),e(ET,cpr),e(Z,fpr),e(Z,CT),e(CT,v9e),e(v9e,mpr),e(CT,gpr),e(CT,CQ),e(CQ,hpr),e(CT,ppr),e(Z,upr),e(Z,wT),e(wT,F9e),e(F9e,_pr),e(wT,bpr),e(wT,wQ),e(wQ,vpr),e(wT,Fpr),e(Z,Tpr),e(Z,AT),e(AT,T9e),e(T9e,Mpr),e(AT,Epr),e(AT,AQ),e(AQ,Cpr),e(AT,wpr),e(Z,Apr),e(Z,yT),e(yT,M9e),e(M9e,ypr),e(yT,Lpr),e(yT,yQ),e(yQ,xpr),e(yT,$pr),e(Z,kpr),e(Z,LT),e(LT,E9e),e(E9e,Spr),e(LT,Rpr),e(LT,LQ),e(LQ,Bpr),e(LT,Ppr),e(Z,Ipr),e(Z,xT),e(xT,C9e),e(C9e,qpr),e(xT,Npr),e(xT,xQ),e(xQ,jpr),e(xT,Dpr),e(Z,Gpr),e(Z,$T),e($T,w9e),e(w9e,Opr),e($T,Vpr),e($T,$Q),e($Q,Xpr),e($T,zpr),e(Z,Qpr),e(Z,kT),e(kT,A9e),e(A9e,Wpr),e(kT,Hpr),e(kT,kQ),e(kQ,Upr),e(kT,Jpr),e(Z,Ypr),e(Z,ST),e(ST,y9e),e(y9e,Kpr),e(ST,Zpr),e(ST,SQ),e(SQ,eur),e(ST,our),e(Z,rur),e(Z,RT),e(RT,L9e),e(L9e,tur),e(RT,aur),e(RT,RQ),e(RQ,nur),e(RT,sur),e(Z,lur),e(Z,BT),e(BT,x9e),e(x9e,iur),e(BT,dur),e(BT,BQ),e(BQ,cur),e(BT,fur),e(Z,mur),e(Z,PT),e(PT,$9e),e($9e,gur),e(PT,hur),e(PT,PQ),e(PQ,pur),e(PT,uur),e(Z,_ur),e(Z,IT),e(IT,k9e),e(k9e,bur),e(IT,vur),e(IT,IQ),e(IQ,Fur),e(IT,Tur),e(Z,Mur),e(Z,qT),e(qT,S9e),e(S9e,Eur),e(qT,Cur),e(qT,qQ),e(qQ,wur),e(qT,Aur),e(Z,yur),e(Z,NT),e(NT,R9e),e(R9e,Lur),e(NT,xur),e(NT,NQ),e(NQ,$ur),e(NT,kur),e(Z,Sur),e(Z,jT),e(jT,B9e),e(B9e,Rur),e(jT,Bur),e(jT,jQ),e(jQ,Pur),e(jT,Iur),e(Z,qur),e(Z,DT),e(DT,P9e),e(P9e,Nur),e(DT,jur),e(DT,DQ),e(DQ,Dur),e(DT,Gur),e(Z,Our),e(Z,GT),e(GT,I9e),e(I9e,Vur),e(GT,Xur),e(GT,GQ),e(GQ,zur),e(GT,Qur),e(Z,Wur),e(Z,OT),e(OT,q9e),e(q9e,Hur),e(OT,Uur),e(OT,OQ),e(OQ,Jur),e(OT,Yur),e(Z,Kur),e(Z,VT),e(VT,N9e),e(N9e,Zur),e(VT,e_r),e(VT,VQ),e(VQ,o_r),e(VT,r_r),e(Z,t_r),e(Z,XT),e(XT,j9e),e(j9e,a_r),e(XT,n_r),e(XT,XQ),e(XQ,s_r),e(XT,l_r),e(Z,i_r),e(Z,zT),e(zT,D9e),e(D9e,d_r),e(zT,c_r),e(zT,zQ),e(zQ,f_r),e(zT,m_r),e(Z,g_r),e(Z,QT),e(QT,G9e),e(G9e,h_r),e(QT,p_r),e(QT,QQ),e(QQ,u_r),e(QT,__r),e(Z,b_r),e(Z,WT),e(WT,O9e),e(O9e,v_r),e(WT,F_r),e(WT,WQ),e(WQ,T_r),e(WT,M_r),e(xr,E_r),M(HT,xr,null),b(f,JBe,_),b(f,Kd,_),e(Kd,UT),e(UT,V9e),M($L,V9e,null),e(Kd,C_r),e(Kd,X9e),e(X9e,w_r),b(f,YBe,_),b(f,rr,_),M(kL,rr,null),e(rr,A_r),e(rr,Zd),e(Zd,y_r),e(Zd,HQ),e(HQ,L_r),e(Zd,x_r),e(Zd,UQ),e(UQ,$_r),e(Zd,k_r),e(rr,S_r),e(rr,SL),e(SL,R_r),e(SL,z9e),e(z9e,B_r),e(SL,P_r),e(rr,I_r),e(rr,xt),M(RL,xt,null),e(xt,q_r),e(xt,Q9e),e(Q9e,N_r),e(xt,j_r),e(xt,ec),e(ec,D_r),e(ec,W9e),e(W9e,G_r),e(ec,O_r),e(ec,JQ),e(JQ,V_r),e(ec,X_r),e(xt,z_r),M(JT,xt,null),e(rr,Q_r),e(rr,$r),M(BL,$r,null),e($r,W_r),e($r,H9e),e(H9e,H_r),e($r,U_r),e($r,rn),e(rn,J_r),e(rn,U9e),e(U9e,Y_r),e(rn,K_r),e(rn,J9e),e(J9e,Z_r),e(rn,e1r),e(rn,Y9e),e(Y9e,o1r),e(rn,r1r),e($r,t1r),e($r,pe),e(pe,YT),e(YT,K9e),e(K9e,a1r),e(YT,n1r),e(YT,YQ),e(YQ,s1r),e(YT,l1r),e(pe,i1r),e(pe,KT),e(KT,Z9e),e(Z9e,d1r),e(KT,c1r),e(KT,KQ),e(KQ,f1r),e(KT,m1r),e(pe,g1r),e(pe,ZT),e(ZT,ebe),e(ebe,h1r),e(ZT,p1r),e(ZT,ZQ),e(ZQ,u1r),e(ZT,_1r),e(pe,b1r),e(pe,eM),e(eM,obe),e(obe,v1r),e(eM,F1r),e(eM,eW),e(eW,T1r),e(eM,M1r),e(pe,E1r),e(pe,oM),e(oM,rbe),e(rbe,C1r),e(oM,w1r),e(oM,oW),e(oW,A1r),e(oM,y1r),e(pe,L1r),e(pe,rM),e(rM,tbe),e(tbe,x1r),e(rM,$1r),e(rM,rW),e(rW,k1r),e(rM,S1r),e(pe,R1r),e(pe,tM),e(tM,abe),e(abe,B1r),e(tM,P1r),e(tM,tW),e(tW,I1r),e(tM,q1r),e(pe,N1r),e(pe,aM),e(aM,nbe),e(nbe,j1r),e(aM,D1r),e(aM,aW),e(aW,G1r),e(aM,O1r),e(pe,V1r),e(pe,nM),e(nM,sbe),e(sbe,X1r),e(nM,z1r),e(nM,nW),e(nW,Q1r),e(nM,W1r),e(pe,H1r),e(pe,sM),e(sM,lbe),e(lbe,U1r),e(sM,J1r),e(sM,sW),e(sW,Y1r),e(sM,K1r),e(pe,Z1r),e(pe,lM),e(lM,ibe),e(ibe,e9r),e(lM,o9r),e(lM,lW),e(lW,r9r),e(lM,t9r),e(pe,a9r),e(pe,iM),e(iM,dbe),e(dbe,n9r),e(iM,s9r),e(iM,iW),e(iW,l9r),e(iM,i9r),e(pe,d9r),e(pe,dM),e(dM,cbe),e(cbe,c9r),e(dM,f9r),e(dM,dW),e(dW,m9r),e(dM,g9r),e(pe,h9r),e(pe,cM),e(cM,fbe),e(fbe,p9r),e(cM,u9r),e(cM,cW),e(cW,_9r),e(cM,b9r),e(pe,v9r),e(pe,fM),e(fM,mbe),e(mbe,F9r),e(fM,T9r),e(fM,fW),e(fW,M9r),e(fM,E9r),e(pe,C9r),e(pe,mM),e(mM,gbe),e(gbe,w9r),e(mM,A9r),e(mM,mW),e(mW,y9r),e(mM,L9r),e(pe,x9r),e(pe,gM),e(gM,hbe),e(hbe,$9r),e(gM,k9r),e(gM,gW),e(gW,S9r),e(gM,R9r),e($r,B9r),M(hM,$r,null),b(f,KBe,_),b(f,oc,_),e(oc,pM),e(pM,pbe),M(PL,pbe,null),e(oc,P9r),e(oc,ube),e(ube,I9r),b(f,ZBe,_),b(f,tr,_),M(IL,tr,null),e(tr,q9r),e(tr,rc),e(rc,N9r),e(rc,hW),e(hW,j9r),e(rc,D9r),e(rc,pW),e(pW,G9r),e(rc,O9r),e(tr,V9r),e(tr,qL),e(qL,X9r),e(qL,_be),e(_be,z9r),e(qL,Q9r),e(tr,W9r),e(tr,$t),M(NL,$t,null),e($t,H9r),e($t,bbe),e(bbe,U9r),e($t,J9r),e($t,tc),e(tc,Y9r),e(tc,vbe),e(vbe,K9r),e(tc,Z9r),e(tc,uW),e(uW,ebr),e(tc,obr),e($t,rbr),M(uM,$t,null),e(tr,tbr),e(tr,kr),M(jL,kr,null),e(kr,abr),e(kr,Fbe),e(Fbe,nbr),e(kr,sbr),e(kr,tn),e(tn,lbr),e(tn,Tbe),e(Tbe,ibr),e(tn,dbr),e(tn,Mbe),e(Mbe,cbr),e(tn,fbr),e(tn,Ebe),e(Ebe,mbr),e(tn,gbr),e(kr,hbr),e(kr,Cbe),e(Cbe,_M),e(_M,wbe),e(wbe,pbr),e(_M,ubr),e(_M,_W),e(_W,_br),e(_M,bbr),e(kr,vbr),M(bM,kr,null),b(f,ePe,_),b(f,ac,_),e(ac,vM),e(vM,Abe),M(DL,Abe,null),e(ac,Fbr),e(ac,ybe),e(ybe,Tbr),b(f,oPe,_),b(f,ar,_),M(GL,ar,null),e(ar,Mbr),e(ar,nc),e(nc,Ebr),e(nc,bW),e(bW,Cbr),e(nc,wbr),e(nc,vW),e(vW,Abr),e(nc,ybr),e(ar,Lbr),e(ar,OL),e(OL,xbr),e(OL,Lbe),e(Lbe,$br),e(OL,kbr),e(ar,Sbr),e(ar,kt),M(VL,kt,null),e(kt,Rbr),e(kt,xbe),e(xbe,Bbr),e(kt,Pbr),e(kt,sc),e(sc,Ibr),e(sc,$be),e($be,qbr),e(sc,Nbr),e(sc,FW),e(FW,jbr),e(sc,Dbr),e(kt,Gbr),M(FM,kt,null),e(ar,Obr),e(ar,Sr),M(XL,Sr,null),e(Sr,Vbr),e(Sr,kbe),e(kbe,Xbr),e(Sr,zbr),e(Sr,an),e(an,Qbr),e(an,Sbe),e(Sbe,Wbr),e(an,Hbr),e(an,Rbe),e(Rbe,Ubr),e(an,Jbr),e(an,Bbe),e(Bbe,Ybr),e(an,Kbr),e(Sr,Zbr),e(Sr,de),e(de,TM),e(TM,Pbe),e(Pbe,e2r),e(TM,o2r),e(TM,TW),e(TW,r2r),e(TM,t2r),e(de,a2r),e(de,MM),e(MM,Ibe),e(Ibe,n2r),e(MM,s2r),e(MM,MW),e(MW,l2r),e(MM,i2r),e(de,d2r),e(de,EM),e(EM,qbe),e(qbe,c2r),e(EM,f2r),e(EM,EW),e(EW,m2r),e(EM,g2r),e(de,h2r),e(de,CM),e(CM,Nbe),e(Nbe,p2r),e(CM,u2r),e(CM,CW),e(CW,_2r),e(CM,b2r),e(de,v2r),e(de,wM),e(wM,jbe),e(jbe,F2r),e(wM,T2r),e(wM,wW),e(wW,M2r),e(wM,E2r),e(de,C2r),e(de,AM),e(AM,Dbe),e(Dbe,w2r),e(AM,A2r),e(AM,AW),e(AW,y2r),e(AM,L2r),e(de,x2r),e(de,yM),e(yM,Gbe),e(Gbe,$2r),e(yM,k2r),e(yM,yW),e(yW,S2r),e(yM,R2r),e(de,B2r),e(de,LM),e(LM,Obe),e(Obe,P2r),e(LM,I2r),e(LM,LW),e(LW,q2r),e(LM,N2r),e(de,j2r),e(de,xM),e(xM,Vbe),e(Vbe,D2r),e(xM,G2r),e(xM,xW),e(xW,O2r),e(xM,V2r),e(de,X2r),e(de,$M),e($M,Xbe),e(Xbe,z2r),e($M,Q2r),e($M,$W),e($W,W2r),e($M,H2r),e(de,U2r),e(de,kM),e(kM,zbe),e(zbe,J2r),e(kM,Y2r),e(kM,kW),e(kW,K2r),e(kM,Z2r),e(de,e5r),e(de,SM),e(SM,Qbe),e(Qbe,o5r),e(SM,r5r),e(SM,SW),e(SW,t5r),e(SM,a5r),e(de,n5r),e(de,RM),e(RM,Wbe),e(Wbe,s5r),e(RM,l5r),e(RM,RW),e(RW,i5r),e(RM,d5r),e(de,c5r),e(de,BM),e(BM,Hbe),e(Hbe,f5r),e(BM,m5r),e(BM,BW),e(BW,g5r),e(BM,h5r),e(de,p5r),e(de,PM),e(PM,Ube),e(Ube,u5r),e(PM,_5r),e(PM,PW),e(PW,b5r),e(PM,v5r),e(de,F5r),e(de,IM),e(IM,Jbe),e(Jbe,T5r),e(IM,M5r),e(IM,IW),e(IW,E5r),e(IM,C5r),e(de,w5r),e(de,qM),e(qM,Ybe),e(Ybe,A5r),e(qM,y5r),e(qM,qW),e(qW,L5r),e(qM,x5r),e(de,$5r),e(de,NM),e(NM,Kbe),e(Kbe,k5r),e(NM,S5r),e(NM,NW),e(NW,R5r),e(NM,B5r),e(de,P5r),e(de,jM),e(jM,Zbe),e(Zbe,I5r),e(jM,q5r),e(jM,jW),e(jW,N5r),e(jM,j5r),e(de,D5r),e(de,DM),e(DM,e2e),e(e2e,G5r),e(DM,O5r),e(DM,DW),e(DW,V5r),e(DM,X5r),e(Sr,z5r),M(GM,Sr,null),b(f,rPe,_),b(f,lc,_),e(lc,OM),e(OM,o2e),M(zL,o2e,null),e(lc,Q5r),e(lc,r2e),e(r2e,W5r),b(f,tPe,_),b(f,nr,_),M(QL,nr,null),e(nr,H5r),e(nr,ic),e(ic,U5r),e(ic,GW),e(GW,J5r),e(ic,Y5r),e(ic,OW),e(OW,K5r),e(ic,Z5r),e(nr,evr),e(nr,WL),e(WL,ovr),e(WL,t2e),e(t2e,rvr),e(WL,tvr),e(nr,avr),e(nr,St),M(HL,St,null),e(St,nvr),e(St,a2e),e(a2e,svr),e(St,lvr),e(St,dc),e(dc,ivr),e(dc,n2e),e(n2e,dvr),e(dc,cvr),e(dc,VW),e(VW,fvr),e(dc,mvr),e(St,gvr),M(VM,St,null),e(nr,hvr),e(nr,Rr),M(UL,Rr,null),e(Rr,pvr),e(Rr,s2e),e(s2e,uvr),e(Rr,_vr),e(Rr,nn),e(nn,bvr),e(nn,l2e),e(l2e,vvr),e(nn,Fvr),e(nn,i2e),e(i2e,Tvr),e(nn,Mvr),e(nn,d2e),e(d2e,Evr),e(nn,Cvr),e(Rr,wvr),e(Rr,ce),e(ce,XM),e(XM,c2e),e(c2e,Avr),e(XM,yvr),e(XM,XW),e(XW,Lvr),e(XM,xvr),e(ce,$vr),e(ce,zM),e(zM,f2e),e(f2e,kvr),e(zM,Svr),e(zM,zW),e(zW,Rvr),e(zM,Bvr),e(ce,Pvr),e(ce,QM),e(QM,m2e),e(m2e,Ivr),e(QM,qvr),e(QM,QW),e(QW,Nvr),e(QM,jvr),e(ce,Dvr),e(ce,WM),e(WM,g2e),e(g2e,Gvr),e(WM,Ovr),e(WM,WW),e(WW,Vvr),e(WM,Xvr),e(ce,zvr),e(ce,HM),e(HM,h2e),e(h2e,Qvr),e(HM,Wvr),e(HM,HW),e(HW,Hvr),e(HM,Uvr),e(ce,Jvr),e(ce,UM),e(UM,p2e),e(p2e,Yvr),e(UM,Kvr),e(UM,UW),e(UW,Zvr),e(UM,eFr),e(ce,oFr),e(ce,JM),e(JM,u2e),e(u2e,rFr),e(JM,tFr),e(JM,JW),e(JW,aFr),e(JM,nFr),e(ce,sFr),e(ce,YM),e(YM,_2e),e(_2e,lFr),e(YM,iFr),e(YM,YW),e(YW,dFr),e(YM,cFr),e(ce,fFr),e(ce,KM),e(KM,b2e),e(b2e,mFr),e(KM,gFr),e(KM,KW),e(KW,hFr),e(KM,pFr),e(ce,uFr),e(ce,ZM),e(ZM,v2e),e(v2e,_Fr),e(ZM,bFr),e(ZM,ZW),e(ZW,vFr),e(ZM,FFr),e(ce,TFr),e(ce,e4),e(e4,F2e),e(F2e,MFr),e(e4,EFr),e(e4,eH),e(eH,CFr),e(e4,wFr),e(ce,AFr),e(ce,o4),e(o4,T2e),e(T2e,yFr),e(o4,LFr),e(o4,oH),e(oH,xFr),e(o4,$Fr),e(ce,kFr),e(ce,r4),e(r4,M2e),e(M2e,SFr),e(r4,RFr),e(r4,rH),e(rH,BFr),e(r4,PFr),e(ce,IFr),e(ce,t4),e(t4,E2e),e(E2e,qFr),e(t4,NFr),e(t4,tH),e(tH,jFr),e(t4,DFr),e(ce,GFr),e(ce,a4),e(a4,C2e),e(C2e,OFr),e(a4,VFr),e(a4,aH),e(aH,XFr),e(a4,zFr),e(ce,QFr),e(ce,n4),e(n4,w2e),e(w2e,WFr),e(n4,HFr),e(n4,nH),e(nH,UFr),e(n4,JFr),e(ce,YFr),e(ce,s4),e(s4,A2e),e(A2e,KFr),e(s4,ZFr),e(s4,sH),e(sH,e6r),e(s4,o6r),e(ce,r6r),e(ce,l4),e(l4,y2e),e(y2e,t6r),e(l4,a6r),e(l4,lH),e(lH,n6r),e(l4,s6r),e(ce,l6r),e(ce,i4),e(i4,L2e),e(L2e,i6r),e(i4,d6r),e(i4,iH),e(iH,c6r),e(i4,f6r),e(ce,m6r),e(ce,d4),e(d4,x2e),e(x2e,g6r),e(d4,h6r),e(d4,dH),e(dH,p6r),e(d4,u6r),e(Rr,_6r),M(c4,Rr,null),b(f,aPe,_),b(f,cc,_),e(cc,f4),e(f4,$2e),M(JL,$2e,null),e(cc,b6r),e(cc,k2e),e(k2e,v6r),b(f,nPe,_),b(f,sr,_),M(YL,sr,null),e(sr,F6r),e(sr,fc),e(fc,T6r),e(fc,cH),e(cH,M6r),e(fc,E6r),e(fc,fH),e(fH,C6r),e(fc,w6r),e(sr,A6r),e(sr,KL),e(KL,y6r),e(KL,S2e),e(S2e,L6r),e(KL,x6r),e(sr,$6r),e(sr,Rt),M(ZL,Rt,null),e(Rt,k6r),e(Rt,R2e),e(R2e,S6r),e(Rt,R6r),e(Rt,mc),e(mc,B6r),e(mc,B2e),e(B2e,P6r),e(mc,I6r),e(mc,mH),e(mH,q6r),e(mc,N6r),e(Rt,j6r),M(m4,Rt,null),e(sr,D6r),e(sr,Br),M(e8,Br,null),e(Br,G6r),e(Br,P2e),e(P2e,O6r),e(Br,V6r),e(Br,sn),e(sn,X6r),e(sn,I2e),e(I2e,z6r),e(sn,Q6r),e(sn,q2e),e(q2e,W6r),e(sn,H6r),e(sn,N2e),e(N2e,U6r),e(sn,J6r),e(Br,Y6r),e(Br,j2e),e(j2e,g4),e(g4,D2e),e(D2e,K6r),e(g4,Z6r),e(g4,gH),e(gH,eTr),e(g4,oTr),e(Br,rTr),M(h4,Br,null),b(f,sPe,_),b(f,gc,_),e(gc,p4),e(p4,G2e),M(o8,G2e,null),e(gc,tTr),e(gc,O2e),e(O2e,aTr),b(f,lPe,_),b(f,lr,_),M(r8,lr,null),e(lr,nTr),e(lr,hc),e(hc,sTr),e(hc,hH),e(hH,lTr),e(hc,iTr),e(hc,pH),e(pH,dTr),e(hc,cTr),e(lr,fTr),e(lr,t8),e(t8,mTr),e(t8,V2e),e(V2e,gTr),e(t8,hTr),e(lr,pTr),e(lr,Bt),M(a8,Bt,null),e(Bt,uTr),e(Bt,X2e),e(X2e,_Tr),e(Bt,bTr),e(Bt,pc),e(pc,vTr),e(pc,z2e),e(z2e,FTr),e(pc,TTr),e(pc,uH),e(uH,MTr),e(pc,ETr),e(Bt,CTr),M(u4,Bt,null),e(lr,wTr),e(lr,Pr),M(n8,Pr,null),e(Pr,ATr),e(Pr,Q2e),e(Q2e,yTr),e(Pr,LTr),e(Pr,ln),e(ln,xTr),e(ln,W2e),e(W2e,$Tr),e(ln,kTr),e(ln,H2e),e(H2e,STr),e(ln,RTr),e(ln,U2e),e(U2e,BTr),e(ln,PTr),e(Pr,ITr),e(Pr,J2e),e(J2e,_4),e(_4,Y2e),e(Y2e,qTr),e(_4,NTr),e(_4,_H),e(_H,jTr),e(_4,DTr),e(Pr,GTr),M(b4,Pr,null),b(f,iPe,_),b(f,uc,_),e(uc,v4),e(v4,K2e),M(s8,K2e,null),e(uc,OTr),e(uc,Z2e),e(Z2e,VTr),b(f,dPe,_),b(f,ir,_),M(l8,ir,null),e(ir,XTr),e(ir,_c),e(_c,zTr),e(_c,bH),e(bH,QTr),e(_c,WTr),e(_c,vH),e(vH,HTr),e(_c,UTr),e(ir,JTr),e(ir,i8),e(i8,YTr),e(i8,e5e),e(e5e,KTr),e(i8,ZTr),e(ir,eMr),e(ir,Pt),M(d8,Pt,null),e(Pt,oMr),e(Pt,o5e),e(o5e,rMr),e(Pt,tMr),e(Pt,bc),e(bc,aMr),e(bc,r5e),e(r5e,nMr),e(bc,sMr),e(bc,FH),e(FH,lMr),e(bc,iMr),e(Pt,dMr),M(F4,Pt,null),e(ir,cMr),e(ir,Ir),M(c8,Ir,null),e(Ir,fMr),e(Ir,t5e),e(t5e,mMr),e(Ir,gMr),e(Ir,dn),e(dn,hMr),e(dn,a5e),e(a5e,pMr),e(dn,uMr),e(dn,n5e),e(n5e,_Mr),e(dn,bMr),e(dn,s5e),e(s5e,vMr),e(dn,FMr),e(Ir,TMr),e(Ir,oe),e(oe,T4),e(T4,l5e),e(l5e,MMr),e(T4,EMr),e(T4,TH),e(TH,CMr),e(T4,wMr),e(oe,AMr),e(oe,M4),e(M4,i5e),e(i5e,yMr),e(M4,LMr),e(M4,MH),e(MH,xMr),e(M4,$Mr),e(oe,kMr),e(oe,E4),e(E4,d5e),e(d5e,SMr),e(E4,RMr),e(E4,EH),e(EH,BMr),e(E4,PMr),e(oe,IMr),e(oe,C4),e(C4,c5e),e(c5e,qMr),e(C4,NMr),e(C4,CH),e(CH,jMr),e(C4,DMr),e(oe,GMr),e(oe,w4),e(w4,f5e),e(f5e,OMr),e(w4,VMr),e(w4,wH),e(wH,XMr),e(w4,zMr),e(oe,QMr),e(oe,A4),e(A4,m5e),e(m5e,WMr),e(A4,HMr),e(A4,AH),e(AH,UMr),e(A4,JMr),e(oe,YMr),e(oe,y4),e(y4,g5e),e(g5e,KMr),e(y4,ZMr),e(y4,yH),e(yH,e4r),e(y4,o4r),e(oe,r4r),e(oe,L4),e(L4,h5e),e(h5e,t4r),e(L4,a4r),e(L4,LH),e(LH,n4r),e(L4,s4r),e(oe,l4r),e(oe,x4),e(x4,p5e),e(p5e,i4r),e(x4,d4r),e(x4,xH),e(xH,c4r),e(x4,f4r),e(oe,m4r),e(oe,$4),e($4,u5e),e(u5e,g4r),e($4,h4r),e($4,$H),e($H,p4r),e($4,u4r),e(oe,_4r),e(oe,k4),e(k4,_5e),e(_5e,b4r),e(k4,v4r),e(k4,kH),e(kH,F4r),e(k4,T4r),e(oe,M4r),e(oe,S4),e(S4,b5e),e(b5e,E4r),e(S4,C4r),e(S4,SH),e(SH,w4r),e(S4,A4r),e(oe,y4r),e(oe,R4),e(R4,v5e),e(v5e,L4r),e(R4,x4r),e(R4,RH),e(RH,$4r),e(R4,k4r),e(oe,S4r),e(oe,B4),e(B4,F5e),e(F5e,R4r),e(B4,B4r),e(B4,BH),e(BH,P4r),e(B4,I4r),e(oe,q4r),e(oe,P4),e(P4,T5e),e(T5e,N4r),e(P4,j4r),e(P4,PH),e(PH,D4r),e(P4,G4r),e(oe,O4r),e(oe,I4),e(I4,M5e),e(M5e,V4r),e(I4,X4r),e(I4,IH),e(IH,z4r),e(I4,Q4r),e(oe,W4r),e(oe,q4),e(q4,E5e),e(E5e,H4r),e(q4,U4r),e(q4,qH),e(qH,J4r),e(q4,Y4r),e(oe,K4r),e(oe,N4),e(N4,C5e),e(C5e,Z4r),e(N4,eEr),e(N4,NH),e(NH,oEr),e(N4,rEr),e(oe,tEr),e(oe,j4),e(j4,w5e),e(w5e,aEr),e(j4,nEr),e(j4,jH),e(jH,sEr),e(j4,lEr),e(oe,iEr),e(oe,D4),e(D4,A5e),e(A5e,dEr),e(D4,cEr),e(D4,DH),e(DH,fEr),e(D4,mEr),e(oe,gEr),e(oe,G4),e(G4,y5e),e(y5e,hEr),e(G4,pEr),e(G4,GH),e(GH,uEr),e(G4,_Er),e(oe,bEr),e(oe,O4),e(O4,L5e),e(L5e,vEr),e(O4,FEr),e(O4,OH),e(OH,TEr),e(O4,MEr),e(oe,EEr),e(oe,V4),e(V4,x5e),e(x5e,CEr),e(V4,wEr),e(V4,VH),e(VH,AEr),e(V4,yEr),e(oe,LEr),e(oe,X4),e(X4,$5e),e($5e,xEr),e(X4,$Er),e(X4,XH),e(XH,kEr),e(X4,SEr),e(oe,REr),e(oe,z4),e(z4,k5e),e(k5e,BEr),e(z4,PEr),e(z4,zH),e(zH,IEr),e(z4,qEr),e(Ir,NEr),M(Q4,Ir,null),b(f,cPe,_),b(f,vc,_),e(vc,W4),e(W4,S5e),M(f8,S5e,null),e(vc,jEr),e(vc,R5e),e(R5e,DEr),b(f,fPe,_),b(f,dr,_),M(m8,dr,null),e(dr,GEr),e(dr,Fc),e(Fc,OEr),e(Fc,QH),e(QH,VEr),e(Fc,XEr),e(Fc,WH),e(WH,zEr),e(Fc,QEr),e(dr,WEr),e(dr,g8),e(g8,HEr),e(g8,B5e),e(B5e,UEr),e(g8,JEr),e(dr,YEr),e(dr,It),M(h8,It,null),e(It,KEr),e(It,P5e),e(P5e,ZEr),e(It,eCr),e(It,Tc),e(Tc,oCr),e(Tc,I5e),e(I5e,rCr),e(Tc,tCr),e(Tc,HH),e(HH,aCr),e(Tc,nCr),e(It,sCr),M(H4,It,null),e(dr,lCr),e(dr,qr),M(p8,qr,null),e(qr,iCr),e(qr,q5e),e(q5e,dCr),e(qr,cCr),e(qr,cn),e(cn,fCr),e(cn,N5e),e(N5e,mCr),e(cn,gCr),e(cn,j5e),e(j5e,hCr),e(cn,pCr),e(cn,D5e),e(D5e,uCr),e(cn,_Cr),e(qr,bCr),e(qr,cr),e(cr,U4),e(U4,G5e),e(G5e,vCr),e(U4,FCr),e(U4,UH),e(UH,TCr),e(U4,MCr),e(cr,ECr),e(cr,J4),e(J4,O5e),e(O5e,CCr),e(J4,wCr),e(J4,V5e),e(V5e,ACr),e(J4,yCr),e(cr,LCr),e(cr,Y4),e(Y4,X5e),e(X5e,xCr),e(Y4,$Cr),e(Y4,JH),e(JH,kCr),e(Y4,SCr),e(cr,RCr),e(cr,K4),e(K4,z5e),e(z5e,BCr),e(K4,PCr),e(K4,YH),e(YH,ICr),e(K4,qCr),e(cr,NCr),e(cr,Z4),e(Z4,Q5e),e(Q5e,jCr),e(Z4,DCr),e(Z4,KH),e(KH,GCr),e(Z4,OCr),e(cr,VCr),e(cr,eE),e(eE,W5e),e(W5e,XCr),e(eE,zCr),e(eE,ZH),e(ZH,QCr),e(eE,WCr),e(qr,HCr),M(oE,qr,null),b(f,mPe,_),b(f,Mc,_),e(Mc,rE),e(rE,H5e),M(u8,H5e,null),e(Mc,UCr),e(Mc,U5e),e(U5e,JCr),b(f,gPe,_),b(f,fr,_),M(_8,fr,null),e(fr,YCr),e(fr,Ec),e(Ec,KCr),e(Ec,eU),e(eU,ZCr),e(Ec,e3r),e(Ec,oU),e(oU,o3r),e(Ec,r3r),e(fr,t3r),e(fr,b8),e(b8,a3r),e(b8,J5e),e(J5e,n3r),e(b8,s3r),e(fr,l3r),e(fr,qt),M(v8,qt,null),e(qt,i3r),e(qt,Y5e),e(Y5e,d3r),e(qt,c3r),e(qt,Cc),e(Cc,f3r),e(Cc,K5e),e(K5e,m3r),e(Cc,g3r),e(Cc,rU),e(rU,h3r),e(Cc,p3r),e(qt,u3r),M(tE,qt,null),e(fr,_3r),e(fr,Nr),M(F8,Nr,null),e(Nr,b3r),e(Nr,Z5e),e(Z5e,v3r),e(Nr,F3r),e(Nr,fn),e(fn,T3r),e(fn,eve),e(eve,M3r),e(fn,E3r),e(fn,ove),e(ove,C3r),e(fn,w3r),e(fn,rve),e(rve,A3r),e(fn,y3r),e(Nr,L3r),e(Nr,Me),e(Me,aE),e(aE,tve),e(tve,x3r),e(aE,$3r),e(aE,tU),e(tU,k3r),e(aE,S3r),e(Me,R3r),e(Me,nE),e(nE,ave),e(ave,B3r),e(nE,P3r),e(nE,aU),e(aU,I3r),e(nE,q3r),e(Me,N3r),e(Me,sE),e(sE,nve),e(nve,j3r),e(sE,D3r),e(sE,nU),e(nU,G3r),e(sE,O3r),e(Me,V3r),e(Me,lE),e(lE,sve),e(sve,X3r),e(lE,z3r),e(lE,sU),e(sU,Q3r),e(lE,W3r),e(Me,H3r),e(Me,iE),e(iE,lve),e(lve,U3r),e(iE,J3r),e(iE,lU),e(lU,Y3r),e(iE,K3r),e(Me,Z3r),e(Me,dE),e(dE,ive),e(ive,ewr),e(dE,owr),e(dE,iU),e(iU,rwr),e(dE,twr),e(Me,awr),e(Me,cE),e(cE,dve),e(dve,nwr),e(cE,swr),e(cE,dU),e(dU,lwr),e(cE,iwr),e(Me,dwr),e(Me,fE),e(fE,cve),e(cve,cwr),e(fE,fwr),e(fE,cU),e(cU,mwr),e(fE,gwr),e(Me,hwr),e(Me,mE),e(mE,fve),e(fve,pwr),e(mE,uwr),e(mE,fU),e(fU,_wr),e(mE,bwr),e(Me,vwr),e(Me,gE),e(gE,mve),e(mve,Fwr),e(gE,Twr),e(gE,mU),e(mU,Mwr),e(gE,Ewr),e(Me,Cwr),e(Me,hE),e(hE,gve),e(gve,wwr),e(hE,Awr),e(hE,gU),e(gU,ywr),e(hE,Lwr),e(Me,xwr),e(Me,pE),e(pE,hve),e(hve,$wr),e(pE,kwr),e(pE,hU),e(hU,Swr),e(pE,Rwr),e(Nr,Bwr),M(uE,Nr,null),b(f,hPe,_),b(f,wc,_),e(wc,_E),e(_E,pve),M(T8,pve,null),e(wc,Pwr),e(wc,uve),e(uve,Iwr),b(f,pPe,_),b(f,mr,_),M(M8,mr,null),e(mr,qwr),e(mr,Ac),e(Ac,Nwr),e(Ac,pU),e(pU,jwr),e(Ac,Dwr),e(Ac,uU),e(uU,Gwr),e(Ac,Owr),e(mr,Vwr),e(mr,E8),e(E8,Xwr),e(E8,_ve),e(_ve,zwr),e(E8,Qwr),e(mr,Wwr),e(mr,Nt),M(C8,Nt,null),e(Nt,Hwr),e(Nt,bve),e(bve,Uwr),e(Nt,Jwr),e(Nt,yc),e(yc,Ywr),e(yc,vve),e(vve,Kwr),e(yc,Zwr),e(yc,_U),e(_U,eAr),e(yc,oAr),e(Nt,rAr),M(bE,Nt,null),e(mr,tAr),e(mr,jr),M(w8,jr,null),e(jr,aAr),e(jr,Fve),e(Fve,nAr),e(jr,sAr),e(jr,mn),e(mn,lAr),e(mn,Tve),e(Tve,iAr),e(mn,dAr),e(mn,Mve),e(Mve,cAr),e(mn,fAr),e(mn,Eve),e(Eve,mAr),e(mn,gAr),e(jr,hAr),e(jr,Le),e(Le,vE),e(vE,Cve),e(Cve,pAr),e(vE,uAr),e(vE,bU),e(bU,_Ar),e(vE,bAr),e(Le,vAr),e(Le,FE),e(FE,wve),e(wve,FAr),e(FE,TAr),e(FE,vU),e(vU,MAr),e(FE,EAr),e(Le,CAr),e(Le,TE),e(TE,Ave),e(Ave,wAr),e(TE,AAr),e(TE,FU),e(FU,yAr),e(TE,LAr),e(Le,xAr),e(Le,ME),e(ME,yve),e(yve,$Ar),e(ME,kAr),e(ME,TU),e(TU,SAr),e(ME,RAr),e(Le,BAr),e(Le,EE),e(EE,Lve),e(Lve,PAr),e(EE,IAr),e(EE,MU),e(MU,qAr),e(EE,NAr),e(Le,jAr),e(Le,CE),e(CE,xve),e(xve,DAr),e(CE,GAr),e(CE,EU),e(EU,OAr),e(CE,VAr),e(Le,XAr),e(Le,wE),e(wE,$ve),e($ve,zAr),e(wE,QAr),e(wE,CU),e(CU,WAr),e(wE,HAr),e(Le,UAr),e(Le,AE),e(AE,kve),e(kve,JAr),e(AE,YAr),e(AE,wU),e(wU,KAr),e(AE,ZAr),e(Le,e0r),e(Le,yE),e(yE,Sve),e(Sve,o0r),e(yE,r0r),e(yE,AU),e(AU,t0r),e(yE,a0r),e(Le,n0r),e(Le,LE),e(LE,Rve),e(Rve,s0r),e(LE,l0r),e(LE,yU),e(yU,i0r),e(LE,d0r),e(jr,c0r),M(xE,jr,null),b(f,uPe,_),b(f,Lc,_),e(Lc,$E),e($E,Bve),M(A8,Bve,null),e(Lc,f0r),e(Lc,Pve),e(Pve,m0r),b(f,_Pe,_),b(f,gr,_),M(y8,gr,null),e(gr,g0r),e(gr,xc),e(xc,h0r),e(xc,LU),e(LU,p0r),e(xc,u0r),e(xc,xU),e(xU,_0r),e(xc,b0r),e(gr,v0r),e(gr,L8),e(L8,F0r),e(L8,Ive),e(Ive,T0r),e(L8,M0r),e(gr,E0r),e(gr,jt),M(x8,jt,null),e(jt,C0r),e(jt,qve),e(qve,w0r),e(jt,A0r),e(jt,$c),e($c,y0r),e($c,Nve),e(Nve,L0r),e($c,x0r),e($c,$U),e($U,$0r),e($c,k0r),e(jt,S0r),M(kE,jt,null),e(gr,R0r),e(gr,Dr),M($8,Dr,null),e(Dr,B0r),e(Dr,jve),e(jve,P0r),e(Dr,I0r),e(Dr,gn),e(gn,q0r),e(gn,Dve),e(Dve,N0r),e(gn,j0r),e(gn,Gve),e(Gve,D0r),e(gn,G0r),e(gn,Ove),e(Ove,O0r),e(gn,V0r),e(Dr,X0r),e(Dr,ke),e(ke,SE),e(SE,Vve),e(Vve,z0r),e(SE,Q0r),e(SE,kU),e(kU,W0r),e(SE,H0r),e(ke,U0r),e(ke,RE),e(RE,Xve),e(Xve,J0r),e(RE,Y0r),e(RE,SU),e(SU,K0r),e(RE,Z0r),e(ke,eyr),e(ke,BE),e(BE,zve),e(zve,oyr),e(BE,ryr),e(BE,RU),e(RU,tyr),e(BE,ayr),e(ke,nyr),e(ke,PE),e(PE,Qve),e(Qve,syr),e(PE,lyr),e(PE,BU),e(BU,iyr),e(PE,dyr),e(ke,cyr),e(ke,IE),e(IE,Wve),e(Wve,fyr),e(IE,myr),e(IE,PU),e(PU,gyr),e(IE,hyr),e(ke,pyr),e(ke,qE),e(qE,Hve),e(Hve,uyr),e(qE,_yr),e(qE,IU),e(IU,byr),e(qE,vyr),e(ke,Fyr),e(ke,NE),e(NE,Uve),e(Uve,Tyr),e(NE,Myr),e(NE,qU),e(qU,Eyr),e(NE,Cyr),e(ke,wyr),e(ke,jE),e(jE,Jve),e(Jve,Ayr),e(jE,yyr),e(jE,NU),e(NU,Lyr),e(jE,xyr),e(ke,$yr),e(ke,DE),e(DE,Yve),e(Yve,kyr),e(DE,Syr),e(DE,jU),e(jU,Ryr),e(DE,Byr),e(Dr,Pyr),M(GE,Dr,null),b(f,bPe,_),b(f,kc,_),e(kc,OE),e(OE,Kve),M(k8,Kve,null),e(kc,Iyr),e(kc,Zve),e(Zve,qyr),b(f,vPe,_),b(f,hr,_),M(S8,hr,null),e(hr,Nyr),e(hr,Sc),e(Sc,jyr),e(Sc,DU),e(DU,Dyr),e(Sc,Gyr),e(Sc,GU),e(GU,Oyr),e(Sc,Vyr),e(hr,Xyr),e(hr,R8),e(R8,zyr),e(R8,eFe),e(eFe,Qyr),e(R8,Wyr),e(hr,Hyr),e(hr,Dt),M(B8,Dt,null),e(Dt,Uyr),e(Dt,oFe),e(oFe,Jyr),e(Dt,Yyr),e(Dt,Rc),e(Rc,Kyr),e(Rc,rFe),e(rFe,Zyr),e(Rc,eLr),e(Rc,OU),e(OU,oLr),e(Rc,rLr),e(Dt,tLr),M(VE,Dt,null),e(hr,aLr),e(hr,Gr),M(P8,Gr,null),e(Gr,nLr),e(Gr,tFe),e(tFe,sLr),e(Gr,lLr),e(Gr,hn),e(hn,iLr),e(hn,aFe),e(aFe,dLr),e(hn,cLr),e(hn,nFe),e(nFe,fLr),e(hn,mLr),e(hn,sFe),e(sFe,gLr),e(hn,hLr),e(Gr,pLr),e(Gr,xe),e(xe,XE),e(XE,lFe),e(lFe,uLr),e(XE,_Lr),e(XE,VU),e(VU,bLr),e(XE,vLr),e(xe,FLr),e(xe,zE),e(zE,iFe),e(iFe,TLr),e(zE,MLr),e(zE,XU),e(XU,ELr),e(zE,CLr),e(xe,wLr),e(xe,QE),e(QE,dFe),e(dFe,ALr),e(QE,yLr),e(QE,zU),e(zU,LLr),e(QE,xLr),e(xe,$Lr),e(xe,WE),e(WE,cFe),e(cFe,kLr),e(WE,SLr),e(WE,QU),e(QU,RLr),e(WE,BLr),e(xe,PLr),e(xe,HE),e(HE,fFe),e(fFe,ILr),e(HE,qLr),e(HE,WU),e(WU,NLr),e(HE,jLr),e(xe,DLr),e(xe,UE),e(UE,mFe),e(mFe,GLr),e(UE,OLr),e(UE,HU),e(HU,VLr),e(UE,XLr),e(xe,zLr),e(xe,JE),e(JE,gFe),e(gFe,QLr),e(JE,WLr),e(JE,UU),e(UU,HLr),e(JE,ULr),e(xe,JLr),e(xe,YE),e(YE,hFe),e(hFe,YLr),e(YE,KLr),e(YE,JU),e(JU,ZLr),e(YE,e8r),e(xe,o8r),e(xe,KE),e(KE,pFe),e(pFe,r8r),e(KE,t8r),e(KE,YU),e(YU,a8r),e(KE,n8r),e(xe,s8r),e(xe,ZE),e(ZE,uFe),e(uFe,l8r),e(ZE,i8r),e(ZE,KU),e(KU,d8r),e(ZE,c8r),e(Gr,f8r),M(eC,Gr,null),b(f,FPe,_),b(f,Bc,_),e(Bc,oC),e(oC,_Fe),M(I8,_Fe,null),e(Bc,m8r),e(Bc,bFe),e(bFe,g8r),b(f,TPe,_),b(f,pr,_),M(q8,pr,null),e(pr,h8r),e(pr,Pc),e(Pc,p8r),e(Pc,ZU),e(ZU,u8r),e(Pc,_8r),e(Pc,eJ),e(eJ,b8r),e(Pc,v8r),e(pr,F8r),e(pr,N8),e(N8,T8r),e(N8,vFe),e(vFe,M8r),e(N8,E8r),e(pr,C8r),e(pr,Gt),M(j8,Gt,null),e(Gt,w8r),e(Gt,FFe),e(FFe,A8r),e(Gt,y8r),e(Gt,Ic),e(Ic,L8r),e(Ic,TFe),e(TFe,x8r),e(Ic,$8r),e(Ic,oJ),e(oJ,k8r),e(Ic,S8r),e(Gt,R8r),M(rC,Gt,null),e(pr,B8r),e(pr,Or),M(D8,Or,null),e(Or,P8r),e(Or,MFe),e(MFe,I8r),e(Or,q8r),e(Or,pn),e(pn,N8r),e(pn,EFe),e(EFe,j8r),e(pn,D8r),e(pn,CFe),e(CFe,G8r),e(pn,O8r),e(pn,wFe),e(wFe,V8r),e(pn,X8r),e(Or,z8r),e(Or,$e),e($e,tC),e(tC,AFe),e(AFe,Q8r),e(tC,W8r),e(tC,rJ),e(rJ,H8r),e(tC,U8r),e($e,J8r),e($e,aC),e(aC,yFe),e(yFe,Y8r),e(aC,K8r),e(aC,tJ),e(tJ,Z8r),e(aC,e7r),e($e,o7r),e($e,nC),e(nC,LFe),e(LFe,r7r),e(nC,t7r),e(nC,aJ),e(aJ,a7r),e(nC,n7r),e($e,s7r),e($e,sC),e(sC,xFe),e(xFe,l7r),e(sC,i7r),e(sC,nJ),e(nJ,d7r),e(sC,c7r),e($e,f7r),e($e,lC),e(lC,$Fe),e($Fe,m7r),e(lC,g7r),e(lC,sJ),e(sJ,h7r),e(lC,p7r),e($e,u7r),e($e,iC),e(iC,kFe),e(kFe,_7r),e(iC,b7r),e(iC,lJ),e(lJ,v7r),e(iC,F7r),e($e,T7r),e($e,dC),e(dC,SFe),e(SFe,M7r),e(dC,E7r),e(dC,iJ),e(iJ,C7r),e(dC,w7r),e($e,A7r),e($e,cC),e(cC,RFe),e(RFe,y7r),e(cC,L7r),e(cC,dJ),e(dJ,x7r),e(cC,$7r),e($e,k7r),e($e,fC),e(fC,BFe),e(BFe,S7r),e(fC,R7r),e(fC,cJ),e(cJ,B7r),e(fC,P7r),e($e,I7r),e($e,mC),e(mC,PFe),e(PFe,q7r),e(mC,N7r),e(mC,fJ),e(fJ,j7r),e(mC,D7r),e(Or,G7r),M(gC,Or,null),b(f,MPe,_),b(f,qc,_),e(qc,hC),e(hC,IFe),M(G8,IFe,null),e(qc,O7r),e(qc,qFe),e(qFe,V7r),b(f,EPe,_),b(f,ur,_),M(O8,ur,null),e(ur,X7r),e(ur,Nc),e(Nc,z7r),e(Nc,mJ),e(mJ,Q7r),e(Nc,W7r),e(Nc,gJ),e(gJ,H7r),e(Nc,U7r),e(ur,J7r),e(ur,V8),e(V8,Y7r),e(V8,NFe),e(NFe,K7r),e(V8,Z7r),e(ur,exr),e(ur,Ot),M(X8,Ot,null),e(Ot,oxr),e(Ot,jFe),e(jFe,rxr),e(Ot,txr),e(Ot,jc),e(jc,axr),e(jc,DFe),e(DFe,nxr),e(jc,sxr),e(jc,hJ),e(hJ,lxr),e(jc,ixr),e(Ot,dxr),M(pC,Ot,null),e(ur,cxr),e(ur,Vr),M(z8,Vr,null),e(Vr,fxr),e(Vr,GFe),e(GFe,mxr),e(Vr,gxr),e(Vr,un),e(un,hxr),e(un,OFe),e(OFe,pxr),e(un,uxr),e(un,VFe),e(VFe,_xr),e(un,bxr),e(un,XFe),e(XFe,vxr),e(un,Fxr),e(Vr,Txr),e(Vr,je),e(je,uC),e(uC,zFe),e(zFe,Mxr),e(uC,Exr),e(uC,pJ),e(pJ,Cxr),e(uC,wxr),e(je,Axr),e(je,_C),e(_C,QFe),e(QFe,yxr),e(_C,Lxr),e(_C,uJ),e(uJ,xxr),e(_C,$xr),e(je,kxr),e(je,bC),e(bC,WFe),e(WFe,Sxr),e(bC,Rxr),e(bC,_J),e(_J,Bxr),e(bC,Pxr),e(je,Ixr),e(je,vC),e(vC,HFe),e(HFe,qxr),e(vC,Nxr),e(vC,bJ),e(bJ,jxr),e(vC,Dxr),e(je,Gxr),e(je,FC),e(FC,UFe),e(UFe,Oxr),e(FC,Vxr),e(FC,vJ),e(vJ,Xxr),e(FC,zxr),e(je,Qxr),e(je,TC),e(TC,JFe),e(JFe,Wxr),e(TC,Hxr),e(TC,FJ),e(FJ,Uxr),e(TC,Jxr),e(je,Yxr),e(je,MC),e(MC,YFe),e(YFe,Kxr),e(MC,Zxr),e(MC,TJ),e(TJ,e$r),e(MC,o$r),e(je,r$r),e(je,EC),e(EC,KFe),e(KFe,t$r),e(EC,a$r),e(EC,MJ),e(MJ,n$r),e(EC,s$r),e(Vr,l$r),M(CC,Vr,null),b(f,CPe,_),b(f,Dc,_),e(Dc,wC),e(wC,ZFe),M(Q8,ZFe,null),e(Dc,i$r),e(Dc,e6e),e(e6e,d$r),b(f,wPe,_),b(f,_r,_),M(W8,_r,null),e(_r,c$r),e(_r,Gc),e(Gc,f$r),e(Gc,EJ),e(EJ,m$r),e(Gc,g$r),e(Gc,CJ),e(CJ,h$r),e(Gc,p$r),e(_r,u$r),e(_r,H8),e(H8,_$r),e(H8,o6e),e(o6e,b$r),e(H8,v$r),e(_r,F$r),e(_r,Vt),M(U8,Vt,null),e(Vt,T$r),e(Vt,r6e),e(r6e,M$r),e(Vt,E$r),e(Vt,Oc),e(Oc,C$r),e(Oc,t6e),e(t6e,w$r),e(Oc,A$r),e(Oc,wJ),e(wJ,y$r),e(Oc,L$r),e(Vt,x$r),M(AC,Vt,null),e(_r,$$r),e(_r,Xr),M(J8,Xr,null),e(Xr,k$r),e(Xr,a6e),e(a6e,S$r),e(Xr,R$r),e(Xr,_n),e(_n,B$r),e(_n,n6e),e(n6e,P$r),e(_n,I$r),e(_n,s6e),e(s6e,q$r),e(_n,N$r),e(_n,l6e),e(l6e,j$r),e(_n,D$r),e(Xr,G$r),e(Xr,De),e(De,yC),e(yC,i6e),e(i6e,O$r),e(yC,V$r),e(yC,AJ),e(AJ,X$r),e(yC,z$r),e(De,Q$r),e(De,LC),e(LC,d6e),e(d6e,W$r),e(LC,H$r),e(LC,yJ),e(yJ,U$r),e(LC,J$r),e(De,Y$r),e(De,xC),e(xC,c6e),e(c6e,K$r),e(xC,Z$r),e(xC,LJ),e(LJ,ekr),e(xC,okr),e(De,rkr),e(De,$C),e($C,f6e),e(f6e,tkr),e($C,akr),e($C,xJ),e(xJ,nkr),e($C,skr),e(De,lkr),e(De,kC),e(kC,m6e),e(m6e,ikr),e(kC,dkr),e(kC,$J),e($J,ckr),e(kC,fkr),e(De,mkr),e(De,SC),e(SC,g6e),e(g6e,gkr),e(SC,hkr),e(SC,kJ),e(kJ,pkr),e(SC,ukr),e(De,_kr),e(De,RC),e(RC,h6e),e(h6e,bkr),e(RC,vkr),e(RC,SJ),e(SJ,Fkr),e(RC,Tkr),e(De,Mkr),e(De,BC),e(BC,p6e),e(p6e,Ekr),e(BC,Ckr),e(BC,RJ),e(RJ,wkr),e(BC,Akr),e(Xr,ykr),M(PC,Xr,null),b(f,APe,_),b(f,Vc,_),e(Vc,IC),e(IC,u6e),M(Y8,u6e,null),e(Vc,Lkr),e(Vc,_6e),e(_6e,xkr),b(f,yPe,_),b(f,br,_),M(K8,br,null),e(br,$kr),e(br,Xc),e(Xc,kkr),e(Xc,BJ),e(BJ,Skr),e(Xc,Rkr),e(Xc,PJ),e(PJ,Bkr),e(Xc,Pkr),e(br,Ikr),e(br,Z8),e(Z8,qkr),e(Z8,b6e),e(b6e,Nkr),e(Z8,jkr),e(br,Dkr),e(br,Xt),M(e7,Xt,null),e(Xt,Gkr),e(Xt,v6e),e(v6e,Okr),e(Xt,Vkr),e(Xt,zc),e(zc,Xkr),e(zc,F6e),e(F6e,zkr),e(zc,Qkr),e(zc,IJ),e(IJ,Wkr),e(zc,Hkr),e(Xt,Ukr),M(qC,Xt,null),e(br,Jkr),e(br,zr),M(o7,zr,null),e(zr,Ykr),e(zr,T6e),e(T6e,Kkr),e(zr,Zkr),e(zr,bn),e(bn,eSr),e(bn,M6e),e(M6e,oSr),e(bn,rSr),e(bn,E6e),e(E6e,tSr),e(bn,aSr),e(bn,C6e),e(C6e,nSr),e(bn,sSr),e(zr,lSr),e(zr,w6e),e(w6e,NC),e(NC,A6e),e(A6e,iSr),e(NC,dSr),e(NC,qJ),e(qJ,cSr),e(NC,fSr),e(zr,mSr),M(jC,zr,null),b(f,LPe,_),b(f,Qc,_),e(Qc,DC),e(DC,y6e),M(r7,y6e,null),e(Qc,gSr),e(Qc,L6e),e(L6e,hSr),b(f,xPe,_),b(f,vr,_),M(t7,vr,null),e(vr,pSr),e(vr,Wc),e(Wc,uSr),e(Wc,NJ),e(NJ,_Sr),e(Wc,bSr),e(Wc,jJ),e(jJ,vSr),e(Wc,FSr),e(vr,TSr),e(vr,a7),e(a7,MSr),e(a7,x6e),e(x6e,ESr),e(a7,CSr),e(vr,wSr),e(vr,zt),M(n7,zt,null),e(zt,ASr),e(zt,$6e),e($6e,ySr),e(zt,LSr),e(zt,Hc),e(Hc,xSr),e(Hc,k6e),e(k6e,$Sr),e(Hc,kSr),e(Hc,DJ),e(DJ,SSr),e(Hc,RSr),e(zt,BSr),M(GC,zt,null),e(vr,PSr),e(vr,Qr),M(s7,Qr,null),e(Qr,ISr),e(Qr,S6e),e(S6e,qSr),e(Qr,NSr),e(Qr,vn),e(vn,jSr),e(vn,R6e),e(R6e,DSr),e(vn,GSr),e(vn,B6e),e(B6e,OSr),e(vn,VSr),e(vn,P6e),e(P6e,XSr),e(vn,zSr),e(Qr,QSr),e(Qr,l7),e(l7,OC),e(OC,I6e),e(I6e,WSr),e(OC,HSr),e(OC,GJ),e(GJ,USr),e(OC,JSr),e(l7,YSr),e(l7,VC),e(VC,q6e),e(q6e,KSr),e(VC,ZSr),e(VC,OJ),e(OJ,eRr),e(VC,oRr),e(Qr,rRr),M(XC,Qr,null),b(f,$Pe,_),b(f,Uc,_),e(Uc,zC),e(zC,N6e),M(i7,N6e,null),e(Uc,tRr),e(Uc,j6e),e(j6e,aRr),b(f,kPe,_),b(f,Fr,_),M(d7,Fr,null),e(Fr,nRr),e(Fr,Jc),e(Jc,sRr),e(Jc,VJ),e(VJ,lRr),e(Jc,iRr),e(Jc,XJ),e(XJ,dRr),e(Jc,cRr),e(Fr,fRr),e(Fr,c7),e(c7,mRr),e(c7,D6e),e(D6e,gRr),e(c7,hRr),e(Fr,pRr),e(Fr,Qt),M(f7,Qt,null),e(Qt,uRr),e(Qt,G6e),e(G6e,_Rr),e(Qt,bRr),e(Qt,Yc),e(Yc,vRr),e(Yc,O6e),e(O6e,FRr),e(Yc,TRr),e(Yc,zJ),e(zJ,MRr),e(Yc,ERr),e(Qt,CRr),M(QC,Qt,null),e(Fr,wRr),e(Fr,Wr),M(m7,Wr,null),e(Wr,ARr),e(Wr,V6e),e(V6e,yRr),e(Wr,LRr),e(Wr,Fn),e(Fn,xRr),e(Fn,X6e),e(X6e,$Rr),e(Fn,kRr),e(Fn,z6e),e(z6e,SRr),e(Fn,RRr),e(Fn,Q6e),e(Q6e,BRr),e(Fn,PRr),e(Wr,IRr),e(Wr,W6e),e(W6e,WC),e(WC,H6e),e(H6e,qRr),e(WC,NRr),e(WC,QJ),e(QJ,jRr),e(WC,DRr),e(Wr,GRr),M(HC,Wr,null),SPe=!0},p(f,[_]){const g7={};_&2&&(g7.$$scope={dirty:_,ctx:f}),sf.$set(g7);const U6e={};_&2&&(U6e.$$scope={dirty:_,ctx:f}),tg.$set(U6e);const J6e={};_&2&&(J6e.$$scope={dirty:_,ctx:f}),Pg.$set(J6e);const Y6e={};_&2&&(Y6e.$$scope={dirty:_,ctx:f}),lh.$set(Y6e);const h7={};_&2&&(h7.$$scope={dirty:_,ctx:f}),ih.$set(h7);const K6e={};_&2&&(K6e.$$scope={dirty:_,ctx:f}),wh.$set(K6e);const Tn={};_&2&&(Tn.$$scope={dirty:_,ctx:f}),Ah.$set(Tn);const Z6e={};_&2&&(Z6e.$$scope={dirty:_,ctx:f}),xh.$set(Z6e);const eTe={};_&2&&(eTe.$$scope={dirty:_,ctx:f}),uu.$set(eTe);const oTe={};_&2&&(oTe.$$scope={dirty:_,ctx:f}),bu.$set(oTe);const p7={};_&2&&(p7.$$scope={dirty:_,ctx:f}),n_.$set(p7);const rTe={};_&2&&(rTe.$$scope={dirty:_,ctx:f}),l_.$set(rTe);const u7={};_&2&&(u7.$$scope={dirty:_,ctx:f}),X_.$set(u7);const tTe={};_&2&&(tTe.$$scope={dirty:_,ctx:f}),Q_.$set(tTe);const _7={};_&2&&(_7.$$scope={dirty:_,ctx:f}),x1.$set(_7);const aTe={};_&2&&(aTe.$$scope={dirty:_,ctx:f}),k1.$set(aTe);const nTe={};_&2&&(nTe.$$scope={dirty:_,ctx:f}),J1.$set(nTe);const sTe={};_&2&&(sTe.$$scope={dirty:_,ctx:f}),K1.$set(sTe);const Kc={};_&2&&(Kc.$$scope={dirty:_,ctx:f}),W9.$set(Kc);const lTe={};_&2&&(lTe.$$scope={dirty:_,ctx:f}),U9.$set(lTe);const iTe={};_&2&&(iTe.$$scope={dirty:_,ctx:f}),wb.$set(iTe);const dTe={};_&2&&(dTe.$$scope={dirty:_,ctx:f}),yb.$set(dTe);const b7={};_&2&&(b7.$$scope={dirty:_,ctx:f}),Bb.$set(b7);const cTe={};_&2&&(cTe.$$scope={dirty:_,ctx:f}),Ib.$set(cTe);const fTe={};_&2&&(fTe.$$scope={dirty:_,ctx:f}),_2.$set(fTe);const mTe={};_&2&&(mTe.$$scope={dirty:_,ctx:f}),v2.$set(mTe);const Ur={};_&2&&(Ur.$$scope={dirty:_,ctx:f}),s5.$set(Ur);const v7={};_&2&&(v7.$$scope={dirty:_,ctx:f}),i5.$set(v7);const gTe={};_&2&&(gTe.$$scope={dirty:_,ctx:f}),f5.$set(gTe);const F7={};_&2&&(F7.$$scope={dirty:_,ctx:f}),g5.$set(F7);const hTe={};_&2&&(hTe.$$scope={dirty:_,ctx:f}),A5.$set(hTe);const Jr={};_&2&&(Jr.$$scope={dirty:_,ctx:f}),L5.$set(Jr);const pTe={};_&2&&(pTe.$$scope={dirty:_,ctx:f}),k5.$set(pTe);const Zc={};_&2&&(Zc.$$scope={dirty:_,ctx:f}),R5.$set(Zc);const uTe={};_&2&&(uTe.$$scope={dirty:_,ctx:f}),V5.$set(uTe);const _Te={};_&2&&(_Te.$$scope={dirty:_,ctx:f}),z5.$set(_Te);const L={};_&2&&(L.$$scope={dirty:_,ctx:f}),Y5.$set(L);const UC={};_&2&&(UC.$$scope={dirty:_,ctx:f}),Z5.$set(UC);const bTe={};_&2&&(bTe.$$scope={dirty:_,ctx:f}),dv.$set(bTe);const vTe={};_&2&&(vTe.$$scope={dirty:_,ctx:f}),fv.$set(vTe);const JC={};_&2&&(JC.$$scope={dirty:_,ctx:f}),pv.$set(JC);const FTe={};_&2&&(FTe.$$scope={dirty:_,ctx:f}),_v.$set(FTe);const TTe={};_&2&&(TTe.$$scope={dirty:_,ctx:f}),Ev.$set(TTe);const YC={};_&2&&(YC.$$scope={dirty:_,ctx:f}),wv.$set(YC);const MTe={};_&2&&(MTe.$$scope={dirty:_,ctx:f}),$v.$set(MTe);const ETe={};_&2&&(ETe.$$scope={dirty:_,ctx:f}),Sv.$set(ETe);const KC={};_&2&&(KC.$$scope={dirty:_,ctx:f}),Pv.$set(KC);const CTe={};_&2&&(CTe.$$scope={dirty:_,ctx:f}),qv.$set(CTe);const wTe={};_&2&&(wTe.$$scope={dirty:_,ctx:f}),Dv.$set(wTe);const ZC={};_&2&&(ZC.$$scope={dirty:_,ctx:f}),Ov.$set(ZC);const ATe={};_&2&&(ATe.$$scope={dirty:_,ctx:f}),Hv.$set(ATe);const yTe={};_&2&&(yTe.$$scope={dirty:_,ctx:f}),Jv.$set(yTe);const e3={};_&2&&(e3.$$scope={dirty:_,ctx:f}),Zv.$set(e3);const LTe={};_&2&&(LTe.$$scope={dirty:_,ctx:f}),oF.$set(LTe);const xTe={};_&2&&(xTe.$$scope={dirty:_,ctx:f}),zF.$set(xTe);const o3={};_&2&&(o3.$$scope={dirty:_,ctx:f}),WF.$set(o3);const $Te={};_&2&&($Te.$$scope={dirty:_,ctx:f}),_6.$set($Te);const kTe={};_&2&&(kTe.$$scope={dirty:_,ctx:f}),v6.$set(kTe);const r3={};_&2&&(r3.$$scope={dirty:_,ctx:f}),S6.$set(r3);const STe={};_&2&&(STe.$$scope={dirty:_,ctx:f}),B6.$set(STe);const RTe={};_&2&&(RTe.$$scope={dirty:_,ctx:f}),q6.$set(RTe);const t3={};_&2&&(t3.$$scope={dirty:_,ctx:f}),j6.$set(t3);const BTe={};_&2&&(BTe.$$scope={dirty:_,ctx:f}),sT.$set(BTe);const PTe={};_&2&&(PTe.$$scope={dirty:_,ctx:f}),iT.$set(PTe);const a3={};_&2&&(a3.$$scope={dirty:_,ctx:f}),vT.$set(a3);const ITe={};_&2&&(ITe.$$scope={dirty:_,ctx:f}),TT.$set(ITe);const qTe={};_&2&&(qTe.$$scope={dirty:_,ctx:f}),HT.$set(qTe);const n3={};_&2&&(n3.$$scope={dirty:_,ctx:f}),JT.$set(n3);const NTe={};_&2&&(NTe.$$scope={dirty:_,ctx:f}),hM.$set(NTe);const jTe={};_&2&&(jTe.$$scope={dirty:_,ctx:f}),uM.$set(jTe);const s3={};_&2&&(s3.$$scope={dirty:_,ctx:f}),bM.$set(s3);const DTe={};_&2&&(DTe.$$scope={dirty:_,ctx:f}),FM.$set(DTe);const GTe={};_&2&&(GTe.$$scope={dirty:_,ctx:f}),GM.$set(GTe);const l3={};_&2&&(l3.$$scope={dirty:_,ctx:f}),VM.$set(l3);const OTe={};_&2&&(OTe.$$scope={dirty:_,ctx:f}),c4.$set(OTe);const VTe={};_&2&&(VTe.$$scope={dirty:_,ctx:f}),m4.$set(VTe);const i3={};_&2&&(i3.$$scope={dirty:_,ctx:f}),h4.$set(i3);const XTe={};_&2&&(XTe.$$scope={dirty:_,ctx:f}),u4.$set(XTe);const zTe={};_&2&&(zTe.$$scope={dirty:_,ctx:f}),b4.$set(zTe);const d3={};_&2&&(d3.$$scope={dirty:_,ctx:f}),F4.$set(d3);const QTe={};_&2&&(QTe.$$scope={dirty:_,ctx:f}),Q4.$set(QTe);const WTe={};_&2&&(WTe.$$scope={dirty:_,ctx:f}),H4.$set(WTe);const c3={};_&2&&(c3.$$scope={dirty:_,ctx:f}),oE.$set(c3);const HTe={};_&2&&(HTe.$$scope={dirty:_,ctx:f}),tE.$set(HTe);const UTe={};_&2&&(UTe.$$scope={dirty:_,ctx:f}),uE.$set(UTe);const f3={};_&2&&(f3.$$scope={dirty:_,ctx:f}),bE.$set(f3);const JTe={};_&2&&(JTe.$$scope={dirty:_,ctx:f}),xE.$set(JTe);const YTe={};_&2&&(YTe.$$scope={dirty:_,ctx:f}),kE.$set(YTe);const m3={};_&2&&(m3.$$scope={dirty:_,ctx:f}),GE.$set(m3);const KTe={};_&2&&(KTe.$$scope={dirty:_,ctx:f}),VE.$set(KTe);const ZTe={};_&2&&(ZTe.$$scope={dirty:_,ctx:f}),eC.$set(ZTe);const g3={};_&2&&(g3.$$scope={dirty:_,ctx:f}),rC.$set(g3);const eMe={};_&2&&(eMe.$$scope={dirty:_,ctx:f}),gC.$set(eMe);const oMe={};_&2&&(oMe.$$scope={dirty:_,ctx:f}),pC.$set(oMe);const h3={};_&2&&(h3.$$scope={dirty:_,ctx:f}),CC.$set(h3);const rMe={};_&2&&(rMe.$$scope={dirty:_,ctx:f}),AC.$set(rMe);const tMe={};_&2&&(tMe.$$scope={dirty:_,ctx:f}),PC.$set(tMe);const p3={};_&2&&(p3.$$scope={dirty:_,ctx:f}),qC.$set(p3);const aMe={};_&2&&(aMe.$$scope={dirty:_,ctx:f}),jC.$set(aMe);const nMe={};_&2&&(nMe.$$scope={dirty:_,ctx:f}),GC.$set(nMe);const u3={};_&2&&(u3.$$scope={dirty:_,ctx:f}),XC.$set(u3);const sMe={};_&2&&(sMe.$$scope={dirty:_,ctx:f}),QC.$set(sMe);const lMe={};_&2&&(lMe.$$scope={dirty:_,ctx:f}),HC.$set(lMe)},i(f){SPe||(E(d.$$.fragment,f),E(va.$$.fragment,f),E(hA.$$.fragment,f),E(pA.$$.fragment,f),E(sf.$$.fragment,f),E(uA.$$.fragment,f),E(_A.$$.fragment,f),E(FA.$$.fragment,f),E(tg.$$.fragment,f),E(TA.$$.fragment,f),E(MA.$$.fragment,f),E(EA.$$.fragment,f),E(AA.$$.fragment,f),E(Pg.$$.fragment,f),E(yA.$$.fragment,f),E(LA.$$.fragment,f),E(xA.$$.fragment,f),E(SA.$$.fragment,f),E(lh.$$.fragment,f),E(ih.$$.fragment,f),E(RA.$$.fragment,f),E(BA.$$.fragment,f),E(PA.$$.fragment,f),E(NA.$$.fragment,f),E(wh.$$.fragment,f),E(Ah.$$.fragment,f),E(jA.$$.fragment,f),E(DA.$$.fragment,f),E(GA.$$.fragment,f),E(VA.$$.fragment,f),E(xh.$$.fragment,f),E(XA.$$.fragment,f),E(uu.$$.fragment,f),E(zA.$$.fragment,f),E(QA.$$.fragment,f),E(HA.$$.fragment,f),E(bu.$$.fragment,f),E(UA.$$.fragment,f),E(n_.$$.fragment,f),E(JA.$$.fragment,f),E(YA.$$.fragment,f),E(ZA.$$.fragment,f),E(l_.$$.fragment,f),E(e0.$$.fragment,f),E(X_.$$.fragment,f),E(o0.$$.fragment,f),E(r0.$$.fragment,f),E(a0.$$.fragment,f),E(Q_.$$.fragment,f),E(n0.$$.fragment,f),E(x1.$$.fragment,f),E(s0.$$.fragment,f),E(l0.$$.fragment,f),E(d0.$$.fragment,f),E(k1.$$.fragment,f),E(c0.$$.fragment,f),E(J1.$$.fragment,f),E(f0.$$.fragment,f),E(m0.$$.fragment,f),E(h0.$$.fragment,f),E(K1.$$.fragment,f),E(p0.$$.fragment,f),E(W9.$$.fragment,f),E(u0.$$.fragment,f),E(_0.$$.fragment,f),E(v0.$$.fragment,f),E(U9.$$.fragment,f),E(F0.$$.fragment,f),E(wb.$$.fragment,f),E(T0.$$.fragment,f),E(M0.$$.fragment,f),E(C0.$$.fragment,f),E(yb.$$.fragment,f),E(w0.$$.fragment,f),E(Bb.$$.fragment,f),E(A0.$$.fragment,f),E(y0.$$.fragment,f),E(x0.$$.fragment,f),E(Ib.$$.fragment,f),E($0.$$.fragment,f),E(_2.$$.fragment,f),E(k0.$$.fragment,f),E(S0.$$.fragment,f),E(B0.$$.fragment,f),E(v2.$$.fragment,f),E(P0.$$.fragment,f),E(s5.$$.fragment,f),E(I0.$$.fragment,f),E(q0.$$.fragment,f),E(j0.$$.fragment,f),E(i5.$$.fragment,f),E(D0.$$.fragment,f),E(f5.$$.fragment,f),E(G0.$$.fragment,f),E(O0.$$.fragment,f),E(X0.$$.fragment,f),E(g5.$$.fragment,f),E(z0.$$.fragment,f),E(A5.$$.fragment,f),E(Q0.$$.fragment,f),E(W0.$$.fragment,f),E(U0.$$.fragment,f),E(L5.$$.fragment,f),E(J0.$$.fragment,f),E(k5.$$.fragment,f),E(Y0.$$.fragment,f),E(K0.$$.fragment,f),E(ey.$$.fragment,f),E(R5.$$.fragment,f),E(oy.$$.fragment,f),E(V5.$$.fragment,f),E(ry.$$.fragment,f),E(ty.$$.fragment,f),E(ny.$$.fragment,f),E(z5.$$.fragment,f),E(sy.$$.fragment,f),E(Y5.$$.fragment,f),E(ly.$$.fragment,f),E(iy.$$.fragment,f),E(cy.$$.fragment,f),E(Z5.$$.fragment,f),E(fy.$$.fragment,f),E(dv.$$.fragment,f),E(my.$$.fragment,f),E(gy.$$.fragment,f),E(py.$$.fragment,f),E(fv.$$.fragment,f),E(uy.$$.fragment,f),E(pv.$$.fragment,f),E(by.$$.fragment,f),E(vy.$$.fragment,f),E(Ty.$$.fragment,f),E(_v.$$.fragment,f),E(My.$$.fragment,f),E(Ev.$$.fragment,f),E(Ey.$$.fragment,f),E(Cy.$$.fragment,f),E(Ay.$$.fragment,f),E(wv.$$.fragment,f),E(yy.$$.fragment,f),E($v.$$.fragment,f),E(Ly.$$.fragment,f),E(xy.$$.fragment,f),E(ky.$$.fragment,f),E(Sv.$$.fragment,f),E(Sy.$$.fragment,f),E(Pv.$$.fragment,f),E(Ry.$$.fragment,f),E(By.$$.fragment,f),E(Iy.$$.fragment,f),E(qv.$$.fragment,f),E(qy.$$.fragment,f),E(Dv.$$.fragment,f),E(Ny.$$.fragment,f),E(jy.$$.fragment,f),E(Gy.$$.fragment,f),E(Ov.$$.fragment,f),E(Oy.$$.fragment,f),E(Hv.$$.fragment,f),E(Vy.$$.fragment,f),E(Xy.$$.fragment,f),E(Qy.$$.fragment,f),E(Jv.$$.fragment,f),E(Wy.$$.fragment,f),E(Zv.$$.fragment,f),E(Hy.$$.fragment,f),E(Uy.$$.fragment,f),E(Yy.$$.fragment,f),E(oF.$$.fragment,f),E(Ky.$$.fragment,f),E(zF.$$.fragment,f),E(Zy.$$.fragment,f),E(eL.$$.fragment,f),E(rL.$$.fragment,f),E(WF.$$.fragment,f),E(tL.$$.fragment,f),E(_6.$$.fragment,f),E(aL.$$.fragment,f),E(nL.$$.fragment,f),E(lL.$$.fragment,f),E(v6.$$.fragment,f),E(iL.$$.fragment,f),E(S6.$$.fragment,f),E(dL.$$.fragment,f),E(cL.$$.fragment,f),E(mL.$$.fragment,f),E(B6.$$.fragment,f),E(gL.$$.fragment,f),E(q6.$$.fragment,f),E(pL.$$.fragment,f),E(uL.$$.fragment,f),E(bL.$$.fragment,f),E(j6.$$.fragment,f),E(vL.$$.fragment,f),E(sT.$$.fragment,f),E(FL.$$.fragment,f),E(TL.$$.fragment,f),E(EL.$$.fragment,f),E(iT.$$.fragment,f),E(CL.$$.fragment,f),E(vT.$$.fragment,f),E(wL.$$.fragment,f),E(AL.$$.fragment,f),E(LL.$$.fragment,f),E(TT.$$.fragment,f),E(xL.$$.fragment,f),E(HT.$$.fragment,f),E($L.$$.fragment,f),E(kL.$$.fragment,f),E(RL.$$.fragment,f),E(JT.$$.fragment,f),E(BL.$$.fragment,f),E(hM.$$.fragment,f),E(PL.$$.fragment,f),E(IL.$$.fragment,f),E(NL.$$.fragment,f),E(uM.$$.fragment,f),E(jL.$$.fragment,f),E(bM.$$.fragment,f),E(DL.$$.fragment,f),E(GL.$$.fragment,f),E(VL.$$.fragment,f),E(FM.$$.fragment,f),E(XL.$$.fragment,f),E(GM.$$.fragment,f),E(zL.$$.fragment,f),E(QL.$$.fragment,f),E(HL.$$.fragment,f),E(VM.$$.fragment,f),E(UL.$$.fragment,f),E(c4.$$.fragment,f),E(JL.$$.fragment,f),E(YL.$$.fragment,f),E(ZL.$$.fragment,f),E(m4.$$.fragment,f),E(e8.$$.fragment,f),E(h4.$$.fragment,f),E(o8.$$.fragment,f),E(r8.$$.fragment,f),E(a8.$$.fragment,f),E(u4.$$.fragment,f),E(n8.$$.fragment,f),E(b4.$$.fragment,f),E(s8.$$.fragment,f),E(l8.$$.fragment,f),E(d8.$$.fragment,f),E(F4.$$.fragment,f),E(c8.$$.fragment,f),E(Q4.$$.fragment,f),E(f8.$$.fragment,f),E(m8.$$.fragment,f),E(h8.$$.fragment,f),E(H4.$$.fragment,f),E(p8.$$.fragment,f),E(oE.$$.fragment,f),E(u8.$$.fragment,f),E(_8.$$.fragment,f),E(v8.$$.fragment,f),E(tE.$$.fragment,f),E(F8.$$.fragment,f),E(uE.$$.fragment,f),E(T8.$$.fragment,f),E(M8.$$.fragment,f),E(C8.$$.fragment,f),E(bE.$$.fragment,f),E(w8.$$.fragment,f),E(xE.$$.fragment,f),E(A8.$$.fragment,f),E(y8.$$.fragment,f),E(x8.$$.fragment,f),E(kE.$$.fragment,f),E($8.$$.fragment,f),E(GE.$$.fragment,f),E(k8.$$.fragment,f),E(S8.$$.fragment,f),E(B8.$$.fragment,f),E(VE.$$.fragment,f),E(P8.$$.fragment,f),E(eC.$$.fragment,f),E(I8.$$.fragment,f),E(q8.$$.fragment,f),E(j8.$$.fragment,f),E(rC.$$.fragment,f),E(D8.$$.fragment,f),E(gC.$$.fragment,f),E(G8.$$.fragment,f),E(O8.$$.fragment,f),E(X8.$$.fragment,f),E(pC.$$.fragment,f),E(z8.$$.fragment,f),E(CC.$$.fragment,f),E(Q8.$$.fragment,f),E(W8.$$.fragment,f),E(U8.$$.fragment,f),E(AC.$$.fragment,f),E(J8.$$.fragment,f),E(PC.$$.fragment,f),E(Y8.$$.fragment,f),E(K8.$$.fragment,f),E(e7.$$.fragment,f),E(qC.$$.fragment,f),E(o7.$$.fragment,f),E(jC.$$.fragment,f),E(r7.$$.fragment,f),E(t7.$$.fragment,f),E(n7.$$.fragment,f),E(GC.$$.fragment,f),E(s7.$$.fragment,f),E(XC.$$.fragment,f),E(i7.$$.fragment,f),E(d7.$$.fragment,f),E(f7.$$.fragment,f),E(QC.$$.fragment,f),E(m7.$$.fragment,f),E(HC.$$.fragment,f),SPe=!0)},o(f){C(d.$$.fragment,f),C(va.$$.fragment,f),C(hA.$$.fragment,f),C(pA.$$.fragment,f),C(sf.$$.fragment,f),C(uA.$$.fragment,f),C(_A.$$.fragment,f),C(FA.$$.fragment,f),C(tg.$$.fragment,f),C(TA.$$.fragment,f),C(MA.$$.fragment,f),C(EA.$$.fragment,f),C(AA.$$.fragment,f),C(Pg.$$.fragment,f),C(yA.$$.fragment,f),C(LA.$$.fragment,f),C(xA.$$.fragment,f),C(SA.$$.fragment,f),C(lh.$$.fragment,f),C(ih.$$.fragment,f),C(RA.$$.fragment,f),C(BA.$$.fragment,f),C(PA.$$.fragment,f),C(NA.$$.fragment,f),C(wh.$$.fragment,f),C(Ah.$$.fragment,f),C(jA.$$.fragment,f),C(DA.$$.fragment,f),C(GA.$$.fragment,f),C(VA.$$.fragment,f),C(xh.$$.fragment,f),C(XA.$$.fragment,f),C(uu.$$.fragment,f),C(zA.$$.fragment,f),C(QA.$$.fragment,f),C(HA.$$.fragment,f),C(bu.$$.fragment,f),C(UA.$$.fragment,f),C(n_.$$.fragment,f),C(JA.$$.fragment,f),C(YA.$$.fragment,f),C(ZA.$$.fragment,f),C(l_.$$.fragment,f),C(e0.$$.fragment,f),C(X_.$$.fragment,f),C(o0.$$.fragment,f),C(r0.$$.fragment,f),C(a0.$$.fragment,f),C(Q_.$$.fragment,f),C(n0.$$.fragment,f),C(x1.$$.fragment,f),C(s0.$$.fragment,f),C(l0.$$.fragment,f),C(d0.$$.fragment,f),C(k1.$$.fragment,f),C(c0.$$.fragment,f),C(J1.$$.fragment,f),C(f0.$$.fragment,f),C(m0.$$.fragment,f),C(h0.$$.fragment,f),C(K1.$$.fragment,f),C(p0.$$.fragment,f),C(W9.$$.fragment,f),C(u0.$$.fragment,f),C(_0.$$.fragment,f),C(v0.$$.fragment,f),C(U9.$$.fragment,f),C(F0.$$.fragment,f),C(wb.$$.fragment,f),C(T0.$$.fragment,f),C(M0.$$.fragment,f),C(C0.$$.fragment,f),C(yb.$$.fragment,f),C(w0.$$.fragment,f),C(Bb.$$.fragment,f),C(A0.$$.fragment,f),C(y0.$$.fragment,f),C(x0.$$.fragment,f),C(Ib.$$.fragment,f),C($0.$$.fragment,f),C(_2.$$.fragment,f),C(k0.$$.fragment,f),C(S0.$$.fragment,f),C(B0.$$.fragment,f),C(v2.$$.fragment,f),C(P0.$$.fragment,f),C(s5.$$.fragment,f),C(I0.$$.fragment,f),C(q0.$$.fragment,f),C(j0.$$.fragment,f),C(i5.$$.fragment,f),C(D0.$$.fragment,f),C(f5.$$.fragment,f),C(G0.$$.fragment,f),C(O0.$$.fragment,f),C(X0.$$.fragment,f),C(g5.$$.fragment,f),C(z0.$$.fragment,f),C(A5.$$.fragment,f),C(Q0.$$.fragment,f),C(W0.$$.fragment,f),C(U0.$$.fragment,f),C(L5.$$.fragment,f),C(J0.$$.fragment,f),C(k5.$$.fragment,f),C(Y0.$$.fragment,f),C(K0.$$.fragment,f),C(ey.$$.fragment,f),C(R5.$$.fragment,f),C(oy.$$.fragment,f),C(V5.$$.fragment,f),C(ry.$$.fragment,f),C(ty.$$.fragment,f),C(ny.$$.fragment,f),C(z5.$$.fragment,f),C(sy.$$.fragment,f),C(Y5.$$.fragment,f),C(ly.$$.fragment,f),C(iy.$$.fragment,f),C(cy.$$.fragment,f),C(Z5.$$.fragment,f),C(fy.$$.fragment,f),C(dv.$$.fragment,f),C(my.$$.fragment,f),C(gy.$$.fragment,f),C(py.$$.fragment,f),C(fv.$$.fragment,f),C(uy.$$.fragment,f),C(pv.$$.fragment,f),C(by.$$.fragment,f),C(vy.$$.fragment,f),C(Ty.$$.fragment,f),C(_v.$$.fragment,f),C(My.$$.fragment,f),C(Ev.$$.fragment,f),C(Ey.$$.fragment,f),C(Cy.$$.fragment,f),C(Ay.$$.fragment,f),C(wv.$$.fragment,f),C(yy.$$.fragment,f),C($v.$$.fragment,f),C(Ly.$$.fragment,f),C(xy.$$.fragment,f),C(ky.$$.fragment,f),C(Sv.$$.fragment,f),C(Sy.$$.fragment,f),C(Pv.$$.fragment,f),C(Ry.$$.fragment,f),C(By.$$.fragment,f),C(Iy.$$.fragment,f),C(qv.$$.fragment,f),C(qy.$$.fragment,f),C(Dv.$$.fragment,f),C(Ny.$$.fragment,f),C(jy.$$.fragment,f),C(Gy.$$.fragment,f),C(Ov.$$.fragment,f),C(Oy.$$.fragment,f),C(Hv.$$.fragment,f),C(Vy.$$.fragment,f),C(Xy.$$.fragment,f),C(Qy.$$.fragment,f),C(Jv.$$.fragment,f),C(Wy.$$.fragment,f),C(Zv.$$.fragment,f),C(Hy.$$.fragment,f),C(Uy.$$.fragment,f),C(Yy.$$.fragment,f),C(oF.$$.fragment,f),C(Ky.$$.fragment,f),C(zF.$$.fragment,f),C(Zy.$$.fragment,f),C(eL.$$.fragment,f),C(rL.$$.fragment,f),C(WF.$$.fragment,f),C(tL.$$.fragment,f),C(_6.$$.fragment,f),C(aL.$$.fragment,f),C(nL.$$.fragment,f),C(lL.$$.fragment,f),C(v6.$$.fragment,f),C(iL.$$.fragment,f),C(S6.$$.fragment,f),C(dL.$$.fragment,f),C(cL.$$.fragment,f),C(mL.$$.fragment,f),C(B6.$$.fragment,f),C(gL.$$.fragment,f),C(q6.$$.fragment,f),C(pL.$$.fragment,f),C(uL.$$.fragment,f),C(bL.$$.fragment,f),C(j6.$$.fragment,f),C(vL.$$.fragment,f),C(sT.$$.fragment,f),C(FL.$$.fragment,f),C(TL.$$.fragment,f),C(EL.$$.fragment,f),C(iT.$$.fragment,f),C(CL.$$.fragment,f),C(vT.$$.fragment,f),C(wL.$$.fragment,f),C(AL.$$.fragment,f),C(LL.$$.fragment,f),C(TT.$$.fragment,f),C(xL.$$.fragment,f),C(HT.$$.fragment,f),C($L.$$.fragment,f),C(kL.$$.fragment,f),C(RL.$$.fragment,f),C(JT.$$.fragment,f),C(BL.$$.fragment,f),C(hM.$$.fragment,f),C(PL.$$.fragment,f),C(IL.$$.fragment,f),C(NL.$$.fragment,f),C(uM.$$.fragment,f),C(jL.$$.fragment,f),C(bM.$$.fragment,f),C(DL.$$.fragment,f),C(GL.$$.fragment,f),C(VL.$$.fragment,f),C(FM.$$.fragment,f),C(XL.$$.fragment,f),C(GM.$$.fragment,f),C(zL.$$.fragment,f),C(QL.$$.fragment,f),C(HL.$$.fragment,f),C(VM.$$.fragment,f),C(UL.$$.fragment,f),C(c4.$$.fragment,f),C(JL.$$.fragment,f),C(YL.$$.fragment,f),C(ZL.$$.fragment,f),C(m4.$$.fragment,f),C(e8.$$.fragment,f),C(h4.$$.fragment,f),C(o8.$$.fragment,f),C(r8.$$.fragment,f),C(a8.$$.fragment,f),C(u4.$$.fragment,f),C(n8.$$.fragment,f),C(b4.$$.fragment,f),C(s8.$$.fragment,f),C(l8.$$.fragment,f),C(d8.$$.fragment,f),C(F4.$$.fragment,f),C(c8.$$.fragment,f),C(Q4.$$.fragment,f),C(f8.$$.fragment,f),C(m8.$$.fragment,f),C(h8.$$.fragment,f),C(H4.$$.fragment,f),C(p8.$$.fragment,f),C(oE.$$.fragment,f),C(u8.$$.fragment,f),C(_8.$$.fragment,f),C(v8.$$.fragment,f),C(tE.$$.fragment,f),C(F8.$$.fragment,f),C(uE.$$.fragment,f),C(T8.$$.fragment,f),C(M8.$$.fragment,f),C(C8.$$.fragment,f),C(bE.$$.fragment,f),C(w8.$$.fragment,f),C(xE.$$.fragment,f),C(A8.$$.fragment,f),C(y8.$$.fragment,f),C(x8.$$.fragment,f),C(kE.$$.fragment,f),C($8.$$.fragment,f),C(GE.$$.fragment,f),C(k8.$$.fragment,f),C(S8.$$.fragment,f),C(B8.$$.fragment,f),C(VE.$$.fragment,f),C(P8.$$.fragment,f),C(eC.$$.fragment,f),C(I8.$$.fragment,f),C(q8.$$.fragment,f),C(j8.$$.fragment,f),C(rC.$$.fragment,f),C(D8.$$.fragment,f),C(gC.$$.fragment,f),C(G8.$$.fragment,f),C(O8.$$.fragment,f),C(X8.$$.fragment,f),C(pC.$$.fragment,f),C(z8.$$.fragment,f),C(CC.$$.fragment,f),C(Q8.$$.fragment,f),C(W8.$$.fragment,f),C(U8.$$.fragment,f),C(AC.$$.fragment,f),C(J8.$$.fragment,f),C(PC.$$.fragment,f),C(Y8.$$.fragment,f),C(K8.$$.fragment,f),C(e7.$$.fragment,f),C(qC.$$.fragment,f),C(o7.$$.fragment,f),C(jC.$$.fragment,f),C(r7.$$.fragment,f),C(t7.$$.fragment,f),C(n7.$$.fragment,f),C(GC.$$.fragment,f),C(s7.$$.fragment,f),C(XC.$$.fragment,f),C(i7.$$.fragment,f),C(d7.$$.fragment,f),C(f7.$$.fragment,f),C(QC.$$.fragment,f),C(m7.$$.fragment,f),C(HC.$$.fragment,f),SPe=!1},d(f){t(g),f&&t(v),f&&t(p),w(d),f&&t(of),f&&t(Yr),f&&t(Ie),f&&t(Oe),f&&t(tf),w(va,f),f&&t(Ve),f&&t(Ae),f&&t(To),f&&t(Fa),f&&t(kRe),f&&t(ii),w(hA),f&&t(SRe),f&&t(An),f&&t(RRe),w(pA,f),f&&t(BRe),f&&t($x),f&&t(PRe),w(sf,f),f&&t(IRe),f&&t(di),w(uA),f&&t(qRe),f&&t(Mo),w(_A),w(FA),w(tg),w(TA),f&&t(NRe),f&&t(fi),w(MA),f&&t(jRe),f&&t(Eo),w(EA),w(AA),w(Pg),w(yA),f&&t(DRe),f&&t(mi),w(LA),f&&t(GRe),f&&t(Co),w(xA),w(SA),w(lh),w(ih),w(RA),f&&t(ORe),f&&t(gi),w(BA),f&&t(VRe),f&&t(wo),w(PA),w(NA),w(wh),w(Ah),w(jA),f&&t(XRe),f&&t(pi),w(DA),f&&t(zRe),f&&t(Ao),w(GA),w(VA),w(xh),w(XA),w(uu),f&&t(QRe),f&&t(bi),w(zA),f&&t(WRe),f&&t(yo),w(QA),w(HA),w(bu),w(UA),w(n_),f&&t(HRe),f&&t(Ti),w(JA),f&&t(URe),f&&t(Lo),w(YA),w(ZA),w(l_),w(e0),w(X_),f&&t(JRe),f&&t(Ci),w(o0),f&&t(YRe),f&&t(xo),w(r0),w(a0),w(Q_),w(n0),w(x1),f&&t(KRe),f&&t(yi),w(s0),f&&t(ZRe),f&&t($o),w(l0),w(d0),w(k1),w(c0),w(J1),f&&t(eBe),f&&t($i),w(f0),f&&t(oBe),f&&t(ko),w(m0),w(h0),w(K1),w(p0),w(W9),f&&t(rBe),f&&t(Ri),w(u0),f&&t(tBe),f&&t(So),w(_0),w(v0),w(U9),w(F0),w(wb),f&&t(aBe),f&&t(Ii),w(T0),f&&t(nBe),f&&t(Ro),w(M0),w(C0),w(yb),w(w0),w(Bb),f&&t(sBe),f&&t(ji),w(A0),f&&t(lBe),f&&t(Bo),w(y0),w(x0),w(Ib),w($0),w(_2),f&&t(iBe),f&&t(Oi),w(k0),f&&t(dBe),f&&t(Po),w(S0),w(B0),w(v2),w(P0),w(s5),f&&t(cBe),f&&t(zi),w(I0),f&&t(fBe),f&&t(Io),w(q0),w(j0),w(i5),w(D0),w(f5),f&&t(mBe),f&&t(Hi),w(G0),f&&t(gBe),f&&t(qo),w(O0),w(X0),w(g5),w(z0),w(A5),f&&t(hBe),f&&t(Yi),w(Q0),f&&t(pBe),f&&t(No),w(W0),w(U0),w(L5),w(J0),w(k5),f&&t(uBe),f&&t(ed),w(Y0),f&&t(_Be),f&&t(jo),w(K0),w(ey),w(R5),w(oy),w(V5),f&&t(bBe),f&&t(td),w(ry),f&&t(vBe),f&&t(Do),w(ty),w(ny),w(z5),w(sy),w(Y5),f&&t(FBe),f&&t(sd),w(ly),f&&t(TBe),f&&t(Go),w(iy),w(cy),w(Z5),w(fy),w(dv),f&&t(MBe),f&&t(dd),w(my),f&&t(EBe),f&&t(Oo),w(gy),w(py),w(fv),w(uy),w(pv),f&&t(CBe),f&&t(md),w(by),f&&t(wBe),f&&t(Vo),w(vy),w(Ty),w(_v),w(My),w(Ev),f&&t(ABe),f&&t(pd),w(Ey),f&&t(yBe),f&&t(Xo),w(Cy),w(Ay),w(wv),w(yy),w($v),f&&t(LBe),f&&t(vd),w(Ly),f&&t(xBe),f&&t(zo),w(xy),w(ky),w(Sv),w(Sy),w(Pv),f&&t($Be),f&&t(Md),w(Ry),f&&t(kBe),f&&t(Qo),w(By),w(Iy),w(qv),w(qy),w(Dv),f&&t(SBe),f&&t(wd),w(Ny),f&&t(RBe),f&&t(Wo),w(jy),w(Gy),w(Ov),w(Oy),w(Hv),f&&t(BBe),f&&t(Ld),w(Vy),f&&t(PBe),f&&t(Ho),w(Xy),w(Qy),w(Jv),w(Wy),w(Zv),f&&t(IBe),f&&t(kd),w(Hy),f&&t(qBe),f&&t(Uo),w(Uy),w(Yy),w(oF),w(Ky),w(zF),f&&t(NBe),f&&t(Bd),w(Zy),f&&t(jBe),f&&t(Jo),w(eL),w(rL),w(WF),w(tL),w(_6),f&&t(DBe),f&&t(qd),w(aL),f&&t(GBe),f&&t(Yo),w(nL),w(lL),w(v6),w(iL),w(S6),f&&t(OBe),f&&t(Dd),w(dL),f&&t(VBe),f&&t(Ko),w(cL),w(mL),w(B6),w(gL),w(q6),f&&t(XBe),f&&t(Vd),w(pL),f&&t(zBe),f&&t(Zo),w(uL),w(bL),w(j6),w(vL),w(sT),f&&t(QBe),f&&t(Qd),w(FL),f&&t(WBe),f&&t(er),w(TL),w(EL),w(iT),w(CL),w(vT),f&&t(HBe),f&&t(Ud),w(wL),f&&t(UBe),f&&t(or),w(AL),w(LL),w(TT),w(xL),w(HT),f&&t(JBe),f&&t(Kd),w($L),f&&t(YBe),f&&t(rr),w(kL),w(RL),w(JT),w(BL),w(hM),f&&t(KBe),f&&t(oc),w(PL),f&&t(ZBe),f&&t(tr),w(IL),w(NL),w(uM),w(jL),w(bM),f&&t(ePe),f&&t(ac),w(DL),f&&t(oPe),f&&t(ar),w(GL),w(VL),w(FM),w(XL),w(GM),f&&t(rPe),f&&t(lc),w(zL),f&&t(tPe),f&&t(nr),w(QL),w(HL),w(VM),w(UL),w(c4),f&&t(aPe),f&&t(cc),w(JL),f&&t(nPe),f&&t(sr),w(YL),w(ZL),w(m4),w(e8),w(h4),f&&t(sPe),f&&t(gc),w(o8),f&&t(lPe),f&&t(lr),w(r8),w(a8),w(u4),w(n8),w(b4),f&&t(iPe),f&&t(uc),w(s8),f&&t(dPe),f&&t(ir),w(l8),w(d8),w(F4),w(c8),w(Q4),f&&t(cPe),f&&t(vc),w(f8),f&&t(fPe),f&&t(dr),w(m8),w(h8),w(H4),w(p8),w(oE),f&&t(mPe),f&&t(Mc),w(u8),f&&t(gPe),f&&t(fr),w(_8),w(v8),w(tE),w(F8),w(uE),f&&t(hPe),f&&t(wc),w(T8),f&&t(pPe),f&&t(mr),w(M8),w(C8),w(bE),w(w8),w(xE),f&&t(uPe),f&&t(Lc),w(A8),f&&t(_Pe),f&&t(gr),w(y8),w(x8),w(kE),w($8),w(GE),f&&t(bPe),f&&t(kc),w(k8),f&&t(vPe),f&&t(hr),w(S8),w(B8),w(VE),w(P8),w(eC),f&&t(FPe),f&&t(Bc),w(I8),f&&t(TPe),f&&t(pr),w(q8),w(j8),w(rC),w(D8),w(gC),f&&t(MPe),f&&t(qc),w(G8),f&&t(EPe),f&&t(ur),w(O8),w(X8),w(pC),w(z8),w(CC),f&&t(CPe),f&&t(Dc),w(Q8),f&&t(wPe),f&&t(_r),w(W8),w(U8),w(AC),w(J8),w(PC),f&&t(APe),f&&t(Vc),w(Y8),f&&t(yPe),f&&t(br),w(K8),w(e7),w(qC),w(o7),w(jC),f&&t(LPe),f&&t(Qc),w(r7),f&&t(xPe),f&&t(vr),w(t7),w(n7),w(GC),w(s7),w(XC),f&&t($Pe),f&&t(Uc),w(i7),f&&t(kPe),f&&t(Fr),w(d7),w(f7),w(QC),w(m7),w(HC)}}}const pCt={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function uCt(A){return b4t(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class ECt extends h4t{constructor(g){super();p4t(this,g,uCt,hCt,u4t,{})}}export{ECt as default,pCt as metadata};
