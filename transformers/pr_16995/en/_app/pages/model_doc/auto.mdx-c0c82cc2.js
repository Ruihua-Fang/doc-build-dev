import{S as W4t,i as H4t,s as U4t,e as a,k as l,w as F,t as o,M as J4t,c as n,d as t,m as i,a as s,x as T,h as r,b as c,F as e,g as b,y as M,q as E,o as C,B as w,v as Y4t,L as I}from"../../chunks/vendor-6b77c823.js";import{T as pBr}from"../../chunks/Tip-39098574.js";import{D as R}from"../../chunks/Docstring-1088f2fb.js";import{C as B}from"../../chunks/CodeBlock-3a8b25a8.js";import{I as ee}from"../../chunks/IconCopyLink-7a11ce68.js";import{E as P}from"../../chunks/ExampleCodeBlock-5212b321.js";function K4t(A){let g,v,p,m,u,d,h,Mo,oi,of,Kr,ri,ti,gA,rf,qe,Xe,ai,Mn,hA,En,Cn,pA,ni,wn,uA,si,tf,va;return{c(){g=a("p"),v=o("If your "),p=a("code"),m=o("NewModelConfig"),u=o(" is a subclass of "),d=a("code"),h=o("PretrainedConfig"),Mo=o(`, make sure its
`),oi=a("code"),of=o("model_type"),Kr=o(" attribute is set to the same key you use when registering the config (here "),ri=a("code"),ti=o('"new-model"'),gA=o(")."),rf=l(),qe=a("p"),Xe=o("Likewise, if your "),ai=a("code"),Mn=o("NewModel"),hA=o(" is a subclass of "),En=a("a"),Cn=o("PreTrainedModel"),pA=o(`, make sure its
`),ni=a("code"),wn=o("config_class"),uA=o(` attribute is set to the same class you use when registering the model (here
`),si=a("code"),tf=o("NewModelConfig"),va=o(")."),this.h()},l(ze){g=n(ze,"P",{});var Ae=s(g);v=r(Ae,"If your "),p=n(Ae,"CODE",{});var L7=s(p);m=r(L7,"NewModelConfig"),L7.forEach(t),u=r(Ae," is a subclass of "),d=n(Ae,"CODE",{});var li=s(d);h=r(li,"PretrainedConfig"),li.forEach(t),Mo=r(Ae,`, make sure its
`),oi=n(Ae,"CODE",{});var x7=s(oi);of=r(x7,"model_type"),x7.forEach(t),Kr=r(Ae," attribute is set to the same key you use when registering the config (here "),ri=n(Ae,"CODE",{});var $7=s(ri);ti=r($7,'"new-model"'),$7.forEach(t),gA=r(Ae,")."),Ae.forEach(t),rf=i(ze),qe=n(ze,"P",{});var Eo=s(qe);Xe=r(Eo,"Likewise, if your "),ai=n(Eo,"CODE",{});var Fa=s(ai);Mn=r(Fa,"NewModel"),Fa.forEach(t),hA=r(Eo," is a subclass of "),En=n(Eo,"A",{href:!0});var k7=s(En);Cn=r(k7,"PreTrainedModel"),k7.forEach(t),pA=r(Eo,`, make sure its
`),ni=n(Eo,"CODE",{});var af=s(ni);wn=r(af,"config_class"),af.forEach(t),uA=r(Eo,` attribute is set to the same class you use when registering the model (here
`),si=n(Eo,"CODE",{});var S7=s(si);tf=r(S7,"NewModelConfig"),S7.forEach(t),va=r(Eo,")."),Eo.forEach(t),this.h()},h(){c(En,"href","/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel")},m(ze,Ae){b(ze,g,Ae),e(g,v),e(g,p),e(p,m),e(g,u),e(g,d),e(d,h),e(g,Mo),e(g,oi),e(oi,of),e(g,Kr),e(g,ri),e(ri,ti),e(g,gA),b(ze,rf,Ae),b(ze,qe,Ae),e(qe,Xe),e(qe,ai),e(ai,Mn),e(qe,hA),e(qe,En),e(En,Cn),e(qe,pA),e(qe,ni),e(ni,wn),e(qe,uA),e(qe,si),e(si,tf),e(qe,va)},d(ze){ze&&t(g),ze&&t(rf),ze&&t(qe)}}}function Z4t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

config.unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config.unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function eEt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oEt(A){let g,v,p,m,u;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),u=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Mo=s(p);m=r(Mo,"use_auth_token=True"),Mo.forEach(t),u=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,u)},d(d){d&&t(g)}}}function rEt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tEt(A){let g,v,p,m,u;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),u=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Mo=s(p);m=r(Mo,"use_auth_token=True"),Mo.forEach(t),u=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,u)},d(d){d&&t(g)}}}function aEt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nEt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sEt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lEt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iEt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dEt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cEt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fEt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mEt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gEt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hEt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pEt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uEt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _Et(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bEt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vEt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function FEt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function TEt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function MEt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function EEt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function CEt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wEt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function AEt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yEt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function LEt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xEt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $Et(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kEt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function SEt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function REt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function BEt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function PEt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function IEt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qEt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function NEt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jEt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function DEt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function GEt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function OEt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function VEt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function XEt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zEt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function QEt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function WEt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function HEt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function UEt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function JEt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function YEt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function KEt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ZEt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function eCt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oCt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rCt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tCt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function aCt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nCt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sCt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lCt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iCt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dCt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cCt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fCt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mCt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gCt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hCt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pCt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uCt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _Ct(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bCt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vCt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function FCt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function TCt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function MCt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ECt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function CCt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wCt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ACt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yCt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function LCt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xCt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $Ct(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kCt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function SCt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function RCt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function BCt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function PCt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ICt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qCt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function NCt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jCt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function DCt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function GCt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function OCt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function VCt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function XCt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zCt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function QCt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function WCt(A){let g,v,p,m,u,d,h,Mo,oi,of,Kr,ri,ti,gA,rf,qe,Xe,ai,Mn,hA,En,Cn,pA,ni,wn,uA,si,tf,va,ze,Ae,L7,li,x7,$7,Eo,Fa,k7,af,S7,Uqe,VRe,ii,nf,XK,_A,Jqe,zK,Yqe,XRe,An,Kqe,QK,Zqe,eNe,WK,oNe,rNe,zRe,bA,QRe,R7,tNe,WRe,sf,HRe,di,lf,HK,vA,aNe,UK,nNe,URe,Co,FA,sNe,TA,lNe,B7,iNe,dNe,cNe,MA,fNe,JK,mNe,gNe,hNe,Mr,EA,pNe,YK,uNe,_Ne,ci,bNe,KK,vNe,FNe,ZK,TNe,MNe,ENe,y,df,eZ,CNe,wNe,P7,ANe,yNe,LNe,cf,oZ,xNe,$Ne,I7,kNe,SNe,RNe,ff,rZ,BNe,PNe,q7,INe,qNe,NNe,mf,tZ,jNe,DNe,N7,GNe,ONe,VNe,gf,aZ,XNe,zNe,j7,QNe,WNe,HNe,hf,nZ,UNe,JNe,D7,YNe,KNe,ZNe,pf,sZ,eje,oje,G7,rje,tje,aje,uf,lZ,nje,sje,O7,lje,ije,dje,_f,iZ,cje,fje,V7,mje,gje,hje,bf,dZ,pje,uje,X7,_je,bje,vje,vf,cZ,Fje,Tje,z7,Mje,Eje,Cje,Ff,fZ,wje,Aje,Q7,yje,Lje,xje,Tf,mZ,$je,kje,W7,Sje,Rje,Bje,Mf,gZ,Pje,Ije,H7,qje,Nje,jje,Ef,hZ,Dje,Gje,U7,Oje,Vje,Xje,Cf,pZ,zje,Qje,J7,Wje,Hje,Uje,wf,uZ,Jje,Yje,Y7,Kje,Zje,eDe,Af,_Z,oDe,rDe,K7,tDe,aDe,nDe,yf,bZ,sDe,lDe,Z7,iDe,dDe,cDe,Lf,vZ,fDe,mDe,e$,gDe,hDe,pDe,xf,FZ,uDe,_De,o$,bDe,vDe,FDe,$f,TZ,TDe,MDe,r$,EDe,CDe,wDe,kf,MZ,ADe,yDe,t$,LDe,xDe,$De,Sf,EZ,kDe,SDe,a$,RDe,BDe,PDe,Rf,CZ,IDe,qDe,n$,NDe,jDe,DDe,Bf,wZ,GDe,ODe,s$,VDe,XDe,zDe,Pf,AZ,QDe,WDe,l$,HDe,UDe,JDe,If,yZ,YDe,KDe,i$,ZDe,eGe,oGe,qf,LZ,rGe,tGe,d$,aGe,nGe,sGe,Nf,xZ,lGe,iGe,c$,dGe,cGe,fGe,jf,$Z,mGe,gGe,f$,hGe,pGe,uGe,Df,kZ,_Ge,bGe,m$,vGe,FGe,TGe,Gf,SZ,MGe,EGe,g$,CGe,wGe,AGe,Of,RZ,yGe,LGe,h$,xGe,$Ge,kGe,Vf,BZ,SGe,RGe,p$,BGe,PGe,IGe,Xf,PZ,qGe,NGe,u$,jGe,DGe,GGe,zf,IZ,OGe,VGe,_$,XGe,zGe,QGe,Qf,qZ,WGe,HGe,b$,UGe,JGe,YGe,Wf,NZ,KGe,ZGe,v$,eOe,oOe,rOe,Hf,jZ,tOe,aOe,F$,nOe,sOe,lOe,Uf,DZ,iOe,dOe,T$,cOe,fOe,mOe,Jf,GZ,gOe,hOe,M$,pOe,uOe,_Oe,Yf,OZ,bOe,vOe,E$,FOe,TOe,MOe,Kf,VZ,EOe,COe,C$,wOe,AOe,yOe,Zf,XZ,LOe,xOe,w$,$Oe,kOe,SOe,em,zZ,ROe,BOe,A$,POe,IOe,qOe,om,QZ,NOe,jOe,y$,DOe,GOe,OOe,rm,WZ,VOe,XOe,L$,zOe,QOe,WOe,tm,HZ,HOe,UOe,x$,JOe,YOe,KOe,am,UZ,ZOe,eVe,$$,oVe,rVe,tVe,nm,JZ,aVe,nVe,k$,sVe,lVe,iVe,sm,YZ,dVe,cVe,S$,fVe,mVe,gVe,lm,KZ,hVe,pVe,R$,uVe,_Ve,bVe,im,ZZ,vVe,FVe,B$,TVe,MVe,EVe,dm,eee,CVe,wVe,P$,AVe,yVe,LVe,cm,oee,xVe,$Ve,I$,kVe,SVe,RVe,fm,ree,BVe,PVe,q$,IVe,qVe,NVe,mm,tee,jVe,DVe,N$,GVe,OVe,VVe,gm,aee,XVe,zVe,j$,QVe,WVe,HVe,hm,nee,UVe,JVe,D$,YVe,KVe,ZVe,pm,see,eXe,oXe,G$,rXe,tXe,aXe,um,lee,nXe,sXe,O$,lXe,iXe,dXe,_m,iee,cXe,fXe,V$,mXe,gXe,hXe,bm,dee,pXe,uXe,X$,_Xe,bXe,vXe,vm,cee,FXe,TXe,z$,MXe,EXe,CXe,Fm,fee,wXe,AXe,Q$,yXe,LXe,xXe,Tm,mee,$Xe,kXe,W$,SXe,RXe,BXe,Mm,gee,PXe,IXe,H$,qXe,NXe,jXe,Em,hee,DXe,GXe,U$,OXe,VXe,XXe,Cm,pee,zXe,QXe,J$,WXe,HXe,UXe,wm,uee,JXe,YXe,Y$,KXe,ZXe,eze,Am,_ee,oze,rze,K$,tze,aze,nze,ym,bee,sze,lze,Z$,ize,dze,cze,Lm,vee,fze,mze,ek,gze,hze,pze,xm,Fee,uze,_ze,ok,bze,vze,Fze,$m,Tee,Tze,Mze,rk,Eze,Cze,wze,km,Mee,Aze,yze,tk,Lze,xze,$ze,Sm,Eee,kze,Sze,ak,Rze,Bze,Pze,Rm,Cee,Ize,qze,nk,Nze,jze,Dze,Bm,wee,Gze,Oze,sk,Vze,Xze,zze,Pm,Aee,Qze,Wze,lk,Hze,Uze,Jze,Im,yee,Yze,Kze,ik,Zze,eQe,oQe,qm,Lee,rQe,tQe,dk,aQe,nQe,sQe,Nm,xee,lQe,iQe,ck,dQe,cQe,fQe,jm,$ee,mQe,gQe,fk,hQe,pQe,uQe,Dm,kee,_Qe,bQe,mk,vQe,FQe,TQe,Gm,See,MQe,EQe,gk,CQe,wQe,AQe,Om,Ree,yQe,LQe,hk,xQe,$Qe,kQe,Vm,Bee,SQe,RQe,pk,BQe,PQe,IQe,Xm,Pee,qQe,NQe,uk,jQe,DQe,GQe,zm,Iee,OQe,VQe,_k,XQe,zQe,QQe,Qm,qee,WQe,HQe,bk,UQe,JQe,YQe,Wm,Nee,KQe,ZQe,vk,eWe,oWe,rWe,Hm,jee,tWe,aWe,Fk,nWe,sWe,lWe,Um,Dee,iWe,dWe,Tk,cWe,fWe,mWe,Jm,Gee,gWe,hWe,Mk,pWe,uWe,_We,Ym,Oee,bWe,vWe,Ek,FWe,TWe,MWe,Km,Vee,EWe,CWe,Ck,wWe,AWe,yWe,Zm,Xee,LWe,xWe,wk,$We,kWe,SWe,eg,zee,RWe,BWe,Ak,PWe,IWe,qWe,og,Qee,NWe,jWe,yk,DWe,GWe,OWe,rg,Wee,VWe,XWe,Lk,zWe,QWe,WWe,tg,HWe,ag,CA,UWe,Hee,JWe,JRe,fi,ng,Uee,wA,YWe,Jee,KWe,YRe,wo,AA,ZWe,yA,eHe,xk,oHe,rHe,tHe,LA,aHe,Yee,nHe,sHe,lHe,Er,xA,iHe,Kee,dHe,cHe,Ta,fHe,Zee,mHe,gHe,eoe,hHe,pHe,ooe,uHe,_He,bHe,k,yn,roe,vHe,FHe,$k,THe,MHe,kk,EHe,CHe,wHe,Ln,toe,AHe,yHe,Sk,LHe,xHe,Rk,$He,kHe,SHe,xn,aoe,RHe,BHe,Bk,PHe,IHe,Pk,qHe,NHe,jHe,sg,noe,DHe,GHe,Ik,OHe,VHe,XHe,$n,soe,zHe,QHe,qk,WHe,HHe,Nk,UHe,JHe,YHe,lg,loe,KHe,ZHe,jk,eUe,oUe,rUe,ig,ioe,tUe,aUe,Dk,nUe,sUe,lUe,dg,doe,iUe,dUe,Gk,cUe,fUe,mUe,kn,coe,gUe,hUe,Ok,pUe,uUe,Vk,_Ue,bUe,vUe,Sn,foe,FUe,TUe,Xk,MUe,EUe,zk,CUe,wUe,AUe,Rn,moe,yUe,LUe,Qk,xUe,$Ue,Wk,kUe,SUe,RUe,cg,goe,BUe,PUe,Hk,IUe,qUe,NUe,fg,hoe,jUe,DUe,Uk,GUe,OUe,VUe,Bn,poe,XUe,zUe,Jk,QUe,WUe,Yk,HUe,UUe,JUe,mg,uoe,YUe,KUe,Kk,ZUe,eJe,oJe,Pn,_oe,rJe,tJe,Zk,aJe,nJe,eS,sJe,lJe,iJe,In,boe,dJe,cJe,oS,fJe,mJe,rS,gJe,hJe,pJe,qn,voe,uJe,_Je,tS,bJe,vJe,Foe,FJe,TJe,MJe,gg,Toe,EJe,CJe,aS,wJe,AJe,yJe,Nn,Moe,LJe,xJe,nS,$Je,kJe,sS,SJe,RJe,BJe,jn,Eoe,PJe,IJe,lS,qJe,NJe,iS,jJe,DJe,GJe,Dn,Coe,OJe,VJe,dS,XJe,zJe,cS,QJe,WJe,HJe,Gn,woe,UJe,JJe,fS,YJe,KJe,mS,ZJe,eYe,oYe,On,Aoe,rYe,tYe,gS,aYe,nYe,hS,sYe,lYe,iYe,Vn,yoe,dYe,cYe,pS,fYe,mYe,uS,gYe,hYe,pYe,hg,Loe,uYe,_Ye,_S,bYe,vYe,FYe,Xn,xoe,TYe,MYe,bS,EYe,CYe,vS,wYe,AYe,yYe,pg,$oe,LYe,xYe,FS,$Ye,kYe,SYe,zn,koe,RYe,BYe,TS,PYe,IYe,MS,qYe,NYe,jYe,Qn,Soe,DYe,GYe,ES,OYe,VYe,CS,XYe,zYe,QYe,Wn,Roe,WYe,HYe,wS,UYe,JYe,AS,YYe,KYe,ZYe,Hn,Boe,eKe,oKe,yS,rKe,tKe,LS,aKe,nKe,sKe,Un,Poe,lKe,iKe,xS,dKe,cKe,$S,fKe,mKe,gKe,ug,Ioe,hKe,pKe,kS,uKe,_Ke,bKe,Jn,qoe,vKe,FKe,SS,TKe,MKe,RS,EKe,CKe,wKe,Yn,Noe,AKe,yKe,BS,LKe,xKe,PS,$Ke,kKe,SKe,Kn,joe,RKe,BKe,IS,PKe,IKe,qS,qKe,NKe,jKe,Zn,Doe,DKe,GKe,NS,OKe,VKe,jS,XKe,zKe,QKe,es,Goe,WKe,HKe,DS,UKe,JKe,GS,YKe,KKe,ZKe,os,Ooe,eZe,oZe,OS,rZe,tZe,VS,aZe,nZe,sZe,_g,Voe,lZe,iZe,XS,dZe,cZe,fZe,rs,Xoe,mZe,gZe,zS,hZe,pZe,QS,uZe,_Ze,bZe,bg,zoe,vZe,FZe,WS,TZe,MZe,EZe,vg,Qoe,CZe,wZe,HS,AZe,yZe,LZe,ts,Woe,xZe,$Ze,US,kZe,SZe,JS,RZe,BZe,PZe,as,Hoe,IZe,qZe,YS,NZe,jZe,KS,DZe,GZe,OZe,ns,Uoe,VZe,XZe,ZS,zZe,QZe,eR,WZe,HZe,UZe,Fg,Joe,JZe,YZe,oR,KZe,ZZe,eeo,ss,Yoe,oeo,reo,rR,teo,aeo,tR,neo,seo,leo,ls,Koe,ieo,deo,aR,ceo,feo,nR,meo,geo,heo,is,Zoe,peo,ueo,sR,_eo,beo,lR,veo,Feo,Teo,ds,ere,Meo,Eeo,iR,Ceo,weo,dR,Aeo,yeo,Leo,cs,ore,xeo,$eo,cR,keo,Seo,fR,Reo,Beo,Peo,fs,rre,Ieo,qeo,mR,Neo,jeo,gR,Deo,Geo,Oeo,Tg,tre,Veo,Xeo,hR,zeo,Qeo,Weo,Mg,are,Heo,Ueo,pR,Jeo,Yeo,Keo,Eg,nre,Zeo,eoo,uR,ooo,roo,too,Cg,sre,aoo,noo,_R,soo,loo,ioo,ms,lre,doo,coo,bR,foo,moo,vR,goo,hoo,poo,wg,ire,uoo,_oo,FR,boo,voo,Foo,gs,dre,Too,Moo,TR,Eoo,Coo,MR,woo,Aoo,yoo,hs,cre,Loo,xoo,ER,$oo,koo,CR,Soo,Roo,Boo,ps,fre,Poo,Ioo,wR,qoo,Noo,AR,joo,Doo,Goo,us,mre,Ooo,Voo,yR,Xoo,zoo,LR,Qoo,Woo,Hoo,_s,gre,Uoo,Joo,xR,Yoo,Koo,$R,Zoo,ero,oro,bs,hre,rro,tro,kR,aro,nro,SR,sro,lro,iro,Ag,pre,dro,cro,RR,fro,mro,gro,yg,ure,hro,pro,BR,uro,_ro,bro,vs,_re,vro,Fro,PR,Tro,Mro,IR,Ero,Cro,wro,Fs,bre,Aro,yro,qR,Lro,xro,NR,$ro,kro,Sro,Ts,vre,Rro,Bro,jR,Pro,Iro,DR,qro,Nro,jro,Lg,Fre,Dro,Gro,GR,Oro,Vro,Xro,xg,Tre,zro,Qro,OR,Wro,Hro,Uro,$g,Mre,Jro,Yro,VR,Kro,Zro,eto,Ms,Ere,oto,rto,XR,tto,ato,zR,nto,sto,lto,kg,Cre,ito,dto,QR,cto,fto,mto,Sg,wre,gto,hto,WR,pto,uto,_to,Es,Are,bto,vto,HR,Fto,Tto,UR,Mto,Eto,Cto,Rg,yre,wto,Ato,JR,yto,Lto,xto,Bg,Lre,$to,kto,YR,Sto,Rto,Bto,Cs,xre,Pto,Ito,KR,qto,Nto,ZR,jto,Dto,Gto,ws,$re,Oto,Vto,eB,Xto,zto,oB,Qto,Wto,Hto,As,kre,Uto,Jto,rB,Yto,Kto,tB,Zto,eao,oao,ys,Sre,rao,tao,aB,aao,nao,nB,sao,lao,iao,Pg,dao,Ig,$A,cao,Rre,fao,KRe,mi,qg,Bre,kA,mao,Pre,gao,ZRe,Ao,SA,hao,RA,pao,sB,uao,_ao,bao,BA,vao,Ire,Fao,Tao,Mao,Qe,PA,Eao,qre,Cao,wao,Ma,Aao,Nre,yao,Lao,jre,xao,$ao,Dre,kao,Sao,Rao,ae,Ng,Gre,Bao,Pao,lB,Iao,qao,Nao,jg,Ore,jao,Dao,iB,Gao,Oao,Vao,Dg,Vre,Xao,zao,dB,Qao,Wao,Hao,Gg,Xre,Uao,Jao,cB,Yao,Kao,Zao,Og,zre,eno,ono,fB,rno,tno,ano,Vg,Qre,nno,sno,mB,lno,ino,dno,Xg,Wre,cno,fno,gB,mno,gno,hno,zg,Hre,pno,uno,hB,_no,bno,vno,Qg,Ure,Fno,Tno,pB,Mno,Eno,Cno,Wg,Jre,wno,Ano,uB,yno,Lno,xno,Hg,Yre,$no,kno,_B,Sno,Rno,Bno,Ug,Kre,Pno,Ino,bB,qno,Nno,jno,Jg,Zre,Dno,Gno,vB,Ono,Vno,Xno,Yg,ete,zno,Qno,FB,Wno,Hno,Uno,Kg,ote,Jno,Yno,TB,Kno,Zno,eso,Zg,rte,oso,rso,MB,tso,aso,nso,eh,tte,sso,lso,EB,iso,dso,cso,oh,ate,fso,mso,CB,gso,hso,pso,rh,nte,uso,_so,wB,bso,vso,Fso,th,ste,Tso,Mso,AB,Eso,Cso,wso,ah,lte,Aso,yso,yB,Lso,xso,$so,nh,ite,kso,Sso,LB,Rso,Bso,Pso,sh,dte,Iso,qso,xB,Nso,jso,Dso,lh,Gso,ih,Oso,dh,IA,Vso,cte,Xso,eBe,gi,ch,fte,qA,zso,mte,Qso,oBe,yo,NA,Wso,jA,Hso,$B,Uso,Jso,Yso,DA,Kso,gte,Zso,elo,olo,We,GA,rlo,hte,tlo,alo,hi,nlo,pte,slo,llo,ute,ilo,dlo,clo,be,fh,_te,flo,mlo,kB,glo,hlo,plo,mh,bte,ulo,_lo,SB,blo,vlo,Flo,gh,vte,Tlo,Mlo,RB,Elo,Clo,wlo,hh,Fte,Alo,ylo,BB,Llo,xlo,$lo,ph,Tte,klo,Slo,PB,Rlo,Blo,Plo,uh,Mte,Ilo,qlo,IB,Nlo,jlo,Dlo,_h,Ete,Glo,Olo,qB,Vlo,Xlo,zlo,bh,Cte,Qlo,Wlo,NB,Hlo,Ulo,Jlo,vh,wte,Ylo,Klo,jB,Zlo,eio,oio,Fh,Ate,rio,tio,DB,aio,nio,sio,Th,yte,lio,iio,GB,dio,cio,fio,Mh,Lte,mio,gio,OB,hio,pio,uio,Eh,xte,_io,bio,VB,vio,Fio,Tio,Ch,$te,Mio,Eio,XB,Cio,wio,Aio,wh,yio,Ah,Lio,yh,OA,xio,kte,$io,rBe,pi,Lh,Ste,VA,kio,Rte,Sio,tBe,Lo,XA,Rio,ui,Bio,zB,Pio,Iio,QB,qio,Nio,jio,zA,Dio,Bte,Gio,Oio,Vio,Zr,QA,Xio,Pte,zio,Qio,_i,Wio,Ite,Hio,Uio,WB,Jio,Yio,Kio,xh,Zio,He,WA,edo,qte,odo,rdo,Ea,tdo,Nte,ado,ndo,jte,sdo,ldo,Dte,ido,ddo,cdo,x,$h,Gte,fdo,mdo,HB,gdo,hdo,pdo,kh,Ote,udo,_do,UB,bdo,vdo,Fdo,Sh,Vte,Tdo,Mdo,JB,Edo,Cdo,wdo,Rh,Xte,Ado,ydo,YB,Ldo,xdo,$do,Bh,zte,kdo,Sdo,KB,Rdo,Bdo,Pdo,Ph,Qte,Ido,qdo,ZB,Ndo,jdo,Ddo,Ih,Wte,Gdo,Odo,eP,Vdo,Xdo,zdo,qh,Hte,Qdo,Wdo,oP,Hdo,Udo,Jdo,Nh,Ute,Ydo,Kdo,rP,Zdo,eco,oco,jh,Jte,rco,tco,tP,aco,nco,sco,Dh,Yte,lco,ico,aP,dco,cco,fco,Gh,Kte,mco,gco,nP,hco,pco,uco,Oh,Zte,_co,bco,sP,vco,Fco,Tco,Vh,eae,Mco,Eco,lP,Cco,wco,Aco,Xh,oae,yco,Lco,iP,xco,$co,kco,zh,rae,Sco,Rco,dP,Bco,Pco,Ico,Qh,tae,qco,Nco,cP,jco,Dco,Gco,Wh,aae,Oco,Vco,fP,Xco,zco,Qco,Hh,nae,Wco,Hco,mP,Uco,Jco,Yco,Uh,sae,Kco,Zco,gP,efo,ofo,rfo,Jh,lae,tfo,afo,hP,nfo,sfo,lfo,Yh,iae,ifo,dfo,pP,cfo,ffo,mfo,Kh,dae,gfo,hfo,uP,pfo,ufo,_fo,Zh,cae,bfo,vfo,_P,Ffo,Tfo,Mfo,ep,fae,Efo,Cfo,bP,wfo,Afo,yfo,op,mae,Lfo,xfo,vP,$fo,kfo,Sfo,rp,gae,Rfo,Bfo,FP,Pfo,Ifo,qfo,tp,hae,Nfo,jfo,TP,Dfo,Gfo,Ofo,ap,pae,Vfo,Xfo,MP,zfo,Qfo,Wfo,np,uae,Hfo,Ufo,EP,Jfo,Yfo,Kfo,Ls,_ae,Zfo,emo,CP,omo,rmo,wP,tmo,amo,nmo,sp,bae,smo,lmo,AP,imo,dmo,cmo,lp,vae,fmo,mmo,yP,gmo,hmo,pmo,ip,Fae,umo,_mo,LP,bmo,vmo,Fmo,dp,Tae,Tmo,Mmo,xP,Emo,Cmo,wmo,cp,Mae,Amo,ymo,$P,Lmo,xmo,$mo,fp,Eae,kmo,Smo,kP,Rmo,Bmo,Pmo,mp,Cae,Imo,qmo,SP,Nmo,jmo,Dmo,gp,wae,Gmo,Omo,RP,Vmo,Xmo,zmo,hp,Aae,Qmo,Wmo,BP,Hmo,Umo,Jmo,pp,yae,Ymo,Kmo,PP,Zmo,ego,ogo,up,Lae,rgo,tgo,IP,ago,ngo,sgo,_p,xae,lgo,igo,qP,dgo,cgo,fgo,bp,$ae,mgo,ggo,NP,hgo,pgo,ugo,vp,kae,_go,bgo,jP,vgo,Fgo,Tgo,Fp,Sae,Mgo,Ego,DP,Cgo,wgo,Ago,Tp,Rae,ygo,Lgo,GP,xgo,$go,kgo,Mp,Bae,Sgo,Rgo,OP,Bgo,Pgo,Igo,Ep,Pae,qgo,Ngo,VP,jgo,Dgo,Ggo,Cp,Iae,Ogo,Vgo,XP,Xgo,zgo,Qgo,wp,qae,Wgo,Hgo,zP,Ugo,Jgo,Ygo,Ap,Nae,Kgo,Zgo,QP,eho,oho,rho,yp,jae,tho,aho,WP,nho,sho,lho,Lp,Dae,iho,dho,HP,cho,fho,mho,xp,Gae,gho,hho,UP,pho,uho,_ho,$p,Oae,bho,vho,JP,Fho,Tho,Mho,kp,Vae,Eho,Cho,YP,who,Aho,yho,Sp,Xae,Lho,xho,KP,$ho,kho,Sho,Rp,zae,Rho,Bho,ZP,Pho,Iho,qho,Bp,Qae,Nho,jho,eI,Dho,Gho,Oho,Pp,Wae,Vho,Xho,oI,zho,Qho,Who,Ip,Hae,Hho,Uho,rI,Jho,Yho,Kho,qp,Uae,Zho,epo,tI,opo,rpo,tpo,Np,Jae,apo,npo,aI,spo,lpo,ipo,jp,Yae,dpo,cpo,nI,fpo,mpo,gpo,Dp,Kae,hpo,ppo,sI,upo,_po,bpo,Gp,Zae,vpo,Fpo,lI,Tpo,Mpo,Epo,Op,ene,Cpo,wpo,iI,Apo,ypo,Lpo,Vp,one,xpo,$po,dI,kpo,Spo,Rpo,Xp,rne,Bpo,Ppo,cI,Ipo,qpo,Npo,zp,tne,jpo,Dpo,fI,Gpo,Opo,Vpo,Qp,ane,Xpo,zpo,mI,Qpo,Wpo,Hpo,Wp,nne,Upo,Jpo,gI,Ypo,Kpo,Zpo,Hp,sne,euo,ouo,hI,ruo,tuo,auo,Up,lne,nuo,suo,pI,luo,iuo,duo,Jp,ine,cuo,fuo,uI,muo,guo,huo,Yp,dne,puo,uuo,_I,_uo,buo,vuo,Kp,cne,Fuo,Tuo,bI,Muo,Euo,Cuo,Zp,fne,wuo,Auo,vI,yuo,Luo,xuo,eu,mne,$uo,kuo,FI,Suo,Ruo,Buo,ou,gne,Puo,Iuo,TI,quo,Nuo,juo,ru,hne,Duo,Guo,MI,Ouo,Vuo,Xuo,tu,pne,zuo,Quo,EI,Wuo,Huo,Uuo,au,une,Juo,Yuo,CI,Kuo,Zuo,e_o,nu,_ne,o_o,r_o,wI,t_o,a_o,n_o,su,bne,s_o,l_o,AI,i_o,d_o,c_o,lu,vne,f_o,m_o,yI,g_o,h_o,p_o,iu,Fne,u_o,__o,LI,b_o,v_o,F_o,du,Tne,T_o,M_o,xI,E_o,C_o,w_o,cu,Mne,A_o,y_o,$I,L_o,x_o,$_o,fu,Ene,k_o,S_o,kI,R_o,B_o,P_o,mu,Cne,I_o,q_o,SI,N_o,j_o,D_o,gu,wne,G_o,O_o,RI,V_o,X_o,z_o,hu,Ane,Q_o,W_o,BI,H_o,U_o,J_o,pu,Y_o,yne,K_o,Z_o,Lne,e1o,o1o,uu,aBe,bi,_u,xne,HA,r1o,$ne,t1o,nBe,xo,UA,a1o,vi,n1o,PI,s1o,l1o,II,i1o,d1o,c1o,JA,f1o,kne,m1o,g1o,h1o,et,YA,p1o,Sne,u1o,_1o,Fi,b1o,Rne,v1o,F1o,qI,T1o,M1o,E1o,bu,C1o,Ue,KA,w1o,Bne,A1o,y1o,Ca,L1o,Pne,x1o,$1o,Ine,k1o,S1o,qne,R1o,B1o,P1o,G,vu,Nne,I1o,q1o,NI,N1o,j1o,D1o,Fu,jne,G1o,O1o,jI,V1o,X1o,z1o,Tu,Dne,Q1o,W1o,DI,H1o,U1o,J1o,Mu,Gne,Y1o,K1o,GI,Z1o,e9o,o9o,Eu,One,r9o,t9o,OI,a9o,n9o,s9o,Cu,Vne,l9o,i9o,VI,d9o,c9o,f9o,wu,Xne,m9o,g9o,XI,h9o,p9o,u9o,Au,zne,_9o,b9o,zI,v9o,F9o,T9o,yu,Qne,M9o,E9o,QI,C9o,w9o,A9o,Lu,Wne,y9o,L9o,WI,x9o,$9o,k9o,xu,Hne,S9o,R9o,HI,B9o,P9o,I9o,$u,Une,q9o,N9o,UI,j9o,D9o,G9o,ku,Jne,O9o,V9o,JI,X9o,z9o,Q9o,Su,Yne,W9o,H9o,YI,U9o,J9o,Y9o,Ru,Kne,K9o,Z9o,KI,ebo,obo,rbo,Bu,Zne,tbo,abo,ZI,nbo,sbo,lbo,Pu,ese,ibo,dbo,eq,cbo,fbo,mbo,Iu,ose,gbo,hbo,oq,pbo,ubo,_bo,qu,rse,bbo,vbo,rq,Fbo,Tbo,Mbo,Nu,tse,Ebo,Cbo,tq,wbo,Abo,ybo,ju,ase,Lbo,xbo,aq,$bo,kbo,Sbo,Du,nse,Rbo,Bbo,nq,Pbo,Ibo,qbo,Gu,sse,Nbo,jbo,sq,Dbo,Gbo,Obo,Ou,lse,Vbo,Xbo,lq,zbo,Qbo,Wbo,Vu,ise,Hbo,Ubo,iq,Jbo,Ybo,Kbo,Xu,dse,Zbo,e2o,dq,o2o,r2o,t2o,zu,cse,a2o,n2o,cq,s2o,l2o,i2o,Qu,fse,d2o,c2o,fq,f2o,m2o,g2o,Wu,mse,h2o,p2o,mq,u2o,_2o,b2o,Hu,gse,v2o,F2o,gq,T2o,M2o,E2o,Uu,hse,C2o,w2o,hq,A2o,y2o,L2o,Ju,pse,x2o,$2o,pq,k2o,S2o,R2o,Yu,use,B2o,P2o,uq,I2o,q2o,N2o,Ku,_se,j2o,D2o,_q,G2o,O2o,V2o,Zu,bse,X2o,z2o,bq,Q2o,W2o,H2o,e_,vse,U2o,J2o,vq,Y2o,K2o,Z2o,o_,Fse,e5o,o5o,Fq,r5o,t5o,a5o,r_,Tse,n5o,s5o,Tq,l5o,i5o,d5o,t_,Mse,c5o,f5o,Mq,m5o,g5o,h5o,a_,p5o,Ese,u5o,_5o,Cse,b5o,v5o,n_,sBe,Ti,s_,wse,ZA,F5o,Ase,T5o,lBe,$o,e0,M5o,Mi,E5o,Eq,C5o,w5o,Cq,A5o,y5o,L5o,o0,x5o,yse,$5o,k5o,S5o,ot,r0,R5o,Lse,B5o,P5o,Ei,I5o,xse,q5o,N5o,wq,j5o,D5o,G5o,l_,O5o,Je,t0,V5o,$se,X5o,z5o,wa,Q5o,kse,W5o,H5o,Sse,U5o,J5o,Rse,Y5o,K5o,Z5o,z,i_,Bse,evo,ovo,Aq,rvo,tvo,avo,d_,Pse,nvo,svo,yq,lvo,ivo,dvo,c_,Ise,cvo,fvo,Lq,mvo,gvo,hvo,f_,qse,pvo,uvo,xq,_vo,bvo,vvo,m_,Nse,Fvo,Tvo,$q,Mvo,Evo,Cvo,g_,jse,wvo,Avo,kq,yvo,Lvo,xvo,h_,Dse,$vo,kvo,Sq,Svo,Rvo,Bvo,p_,Gse,Pvo,Ivo,Rq,qvo,Nvo,jvo,u_,Ose,Dvo,Gvo,Bq,Ovo,Vvo,Xvo,__,Vse,zvo,Qvo,Pq,Wvo,Hvo,Uvo,b_,Xse,Jvo,Yvo,Iq,Kvo,Zvo,eFo,v_,zse,oFo,rFo,qq,tFo,aFo,nFo,F_,Qse,sFo,lFo,Nq,iFo,dFo,cFo,T_,Wse,fFo,mFo,jq,gFo,hFo,pFo,M_,Hse,uFo,_Fo,Dq,bFo,vFo,FFo,E_,Use,TFo,MFo,Gq,EFo,CFo,wFo,C_,Jse,AFo,yFo,Oq,LFo,xFo,$Fo,w_,Yse,kFo,SFo,Vq,RFo,BFo,PFo,A_,Kse,IFo,qFo,Xq,NFo,jFo,DFo,y_,Zse,GFo,OFo,zq,VFo,XFo,zFo,L_,ele,QFo,WFo,Qq,HFo,UFo,JFo,x_,ole,YFo,KFo,Wq,ZFo,e6o,o6o,$_,rle,r6o,t6o,Hq,a6o,n6o,s6o,k_,tle,l6o,i6o,Uq,d6o,c6o,f6o,S_,ale,m6o,g6o,Jq,h6o,p6o,u6o,R_,nle,_6o,b6o,Yq,v6o,F6o,T6o,B_,sle,M6o,E6o,Kq,C6o,w6o,A6o,P_,lle,y6o,L6o,Zq,x6o,$6o,k6o,I_,ile,S6o,R6o,eN,B6o,P6o,I6o,q_,dle,q6o,N6o,oN,j6o,D6o,G6o,N_,cle,O6o,V6o,rN,X6o,z6o,Q6o,j_,fle,W6o,H6o,tN,U6o,J6o,Y6o,D_,mle,K6o,Z6o,aN,eTo,oTo,rTo,G_,gle,tTo,aTo,nN,nTo,sTo,lTo,O_,hle,iTo,dTo,sN,cTo,fTo,mTo,V_,gTo,ple,hTo,pTo,ule,uTo,_To,X_,iBe,Ci,z_,_le,a0,bTo,ble,vTo,dBe,ko,n0,FTo,wi,TTo,lN,MTo,ETo,iN,CTo,wTo,ATo,s0,yTo,vle,LTo,xTo,$To,rt,l0,kTo,Fle,STo,RTo,Ai,BTo,Tle,PTo,ITo,dN,qTo,NTo,jTo,Q_,DTo,Ye,i0,GTo,Mle,OTo,VTo,Aa,XTo,Ele,zTo,QTo,Cle,WTo,HTo,wle,UTo,JTo,YTo,Q,W_,Ale,KTo,ZTo,cN,eMo,oMo,rMo,H_,yle,tMo,aMo,fN,nMo,sMo,lMo,U_,Lle,iMo,dMo,mN,cMo,fMo,mMo,J_,xle,gMo,hMo,gN,pMo,uMo,_Mo,Y_,$le,bMo,vMo,hN,FMo,TMo,MMo,K_,kle,EMo,CMo,pN,wMo,AMo,yMo,Z_,Sle,LMo,xMo,uN,$Mo,kMo,SMo,e1,Rle,RMo,BMo,_N,PMo,IMo,qMo,o1,Ble,NMo,jMo,bN,DMo,GMo,OMo,r1,Ple,VMo,XMo,vN,zMo,QMo,WMo,t1,Ile,HMo,UMo,FN,JMo,YMo,KMo,a1,qle,ZMo,e4o,TN,o4o,r4o,t4o,n1,Nle,a4o,n4o,MN,s4o,l4o,i4o,s1,jle,d4o,c4o,EN,f4o,m4o,g4o,l1,Dle,h4o,p4o,CN,u4o,_4o,b4o,i1,Gle,v4o,F4o,wN,T4o,M4o,E4o,d1,Ole,C4o,w4o,AN,A4o,y4o,L4o,c1,Vle,x4o,$4o,yN,k4o,S4o,R4o,f1,Xle,B4o,P4o,LN,I4o,q4o,N4o,m1,zle,j4o,D4o,xN,G4o,O4o,V4o,g1,Qle,X4o,z4o,$N,Q4o,W4o,H4o,h1,Wle,U4o,J4o,kN,Y4o,K4o,Z4o,p1,Hle,eEo,oEo,SN,rEo,tEo,aEo,u1,Ule,nEo,sEo,RN,lEo,iEo,dEo,_1,Jle,cEo,fEo,BN,mEo,gEo,hEo,b1,Yle,pEo,uEo,PN,_Eo,bEo,vEo,v1,Kle,FEo,TEo,IN,MEo,EEo,CEo,F1,Zle,wEo,AEo,qN,yEo,LEo,xEo,T1,eie,$Eo,kEo,NN,SEo,REo,BEo,M1,oie,PEo,IEo,jN,qEo,NEo,jEo,E1,rie,DEo,GEo,tie,OEo,VEo,XEo,C1,aie,zEo,QEo,DN,WEo,HEo,UEo,w1,nie,JEo,YEo,GN,KEo,ZEo,eCo,A1,sie,oCo,rCo,ON,tCo,aCo,nCo,y1,lie,sCo,lCo,VN,iCo,dCo,cCo,L1,fCo,iie,mCo,gCo,die,hCo,pCo,x1,cBe,yi,$1,cie,d0,uCo,fie,_Co,fBe,So,c0,bCo,Li,vCo,XN,FCo,TCo,zN,MCo,ECo,CCo,f0,wCo,mie,ACo,yCo,LCo,tt,m0,xCo,gie,$Co,kCo,xi,SCo,hie,RCo,BCo,QN,PCo,ICo,qCo,k1,NCo,Ke,g0,jCo,pie,DCo,GCo,ya,OCo,uie,VCo,XCo,_ie,zCo,QCo,bie,WCo,HCo,UCo,he,S1,vie,JCo,YCo,WN,KCo,ZCo,e3o,R1,Fie,o3o,r3o,HN,t3o,a3o,n3o,B1,Tie,s3o,l3o,UN,i3o,d3o,c3o,P1,Mie,f3o,m3o,JN,g3o,h3o,p3o,I1,Eie,u3o,_3o,YN,b3o,v3o,F3o,q1,Cie,T3o,M3o,KN,E3o,C3o,w3o,N1,wie,A3o,y3o,ZN,L3o,x3o,$3o,j1,Aie,k3o,S3o,ej,R3o,B3o,P3o,D1,yie,I3o,q3o,oj,N3o,j3o,D3o,G1,Lie,G3o,O3o,rj,V3o,X3o,z3o,O1,xie,Q3o,W3o,tj,H3o,U3o,J3o,V1,$ie,Y3o,K3o,aj,Z3o,ewo,owo,X1,kie,rwo,two,nj,awo,nwo,swo,z1,Sie,lwo,iwo,sj,dwo,cwo,fwo,Q1,Rie,mwo,gwo,lj,hwo,pwo,uwo,W1,Bie,_wo,bwo,ij,vwo,Fwo,Two,H1,Pie,Mwo,Ewo,dj,Cwo,wwo,Awo,U1,ywo,Iie,Lwo,xwo,qie,$wo,kwo,J1,mBe,$i,Y1,Nie,h0,Swo,jie,Rwo,gBe,Ro,p0,Bwo,ki,Pwo,cj,Iwo,qwo,fj,Nwo,jwo,Dwo,u0,Gwo,Die,Owo,Vwo,Xwo,at,_0,zwo,Gie,Qwo,Wwo,Si,Hwo,Oie,Uwo,Jwo,mj,Ywo,Kwo,Zwo,K1,eAo,Ze,b0,oAo,Vie,rAo,tAo,La,aAo,Xie,nAo,sAo,zie,lAo,iAo,Qie,dAo,cAo,fAo,q,Z1,Wie,mAo,gAo,gj,hAo,pAo,uAo,e9,Hie,_Ao,bAo,hj,vAo,FAo,TAo,o9,Uie,MAo,EAo,pj,CAo,wAo,AAo,r9,Jie,yAo,LAo,uj,xAo,$Ao,kAo,t9,Yie,SAo,RAo,_j,BAo,PAo,IAo,a9,Kie,qAo,NAo,bj,jAo,DAo,GAo,n9,Zie,OAo,VAo,vj,XAo,zAo,QAo,s9,ede,WAo,HAo,Fj,UAo,JAo,YAo,l9,ode,KAo,ZAo,Tj,e0o,o0o,r0o,i9,rde,t0o,a0o,Mj,n0o,s0o,l0o,d9,tde,i0o,d0o,Ej,c0o,f0o,m0o,c9,ade,g0o,h0o,Cj,p0o,u0o,_0o,f9,nde,b0o,v0o,wj,F0o,T0o,M0o,m9,sde,E0o,C0o,Aj,w0o,A0o,y0o,g9,lde,L0o,x0o,yj,$0o,k0o,S0o,h9,ide,R0o,B0o,Lj,P0o,I0o,q0o,p9,dde,N0o,j0o,xj,D0o,G0o,O0o,u9,cde,V0o,X0o,$j,z0o,Q0o,W0o,_9,fde,H0o,U0o,kj,J0o,Y0o,K0o,b9,mde,Z0o,eyo,Sj,oyo,ryo,tyo,v9,gde,ayo,nyo,Rj,syo,lyo,iyo,F9,hde,dyo,cyo,Bj,fyo,myo,gyo,T9,pde,hyo,pyo,Pj,uyo,_yo,byo,M9,ude,vyo,Fyo,Ij,Tyo,Myo,Eyo,E9,_de,Cyo,wyo,qj,Ayo,yyo,Lyo,C9,bde,xyo,$yo,Nj,kyo,Syo,Ryo,w9,vde,Byo,Pyo,jj,Iyo,qyo,Nyo,A9,Fde,jyo,Dyo,Dj,Gyo,Oyo,Vyo,y9,Tde,Xyo,zyo,Gj,Qyo,Wyo,Hyo,L9,Mde,Uyo,Jyo,Oj,Yyo,Kyo,Zyo,x9,Ede,eLo,oLo,Vj,rLo,tLo,aLo,$9,Cde,nLo,sLo,Xj,lLo,iLo,dLo,k9,wde,cLo,fLo,zj,mLo,gLo,hLo,S9,Ade,pLo,uLo,Qj,_Lo,bLo,vLo,R9,yde,FLo,TLo,Wj,MLo,ELo,CLo,B9,Lde,wLo,ALo,Hj,yLo,LLo,xLo,P9,xde,$Lo,kLo,Uj,SLo,RLo,BLo,I9,$de,PLo,ILo,Jj,qLo,NLo,jLo,q9,kde,DLo,GLo,Yj,OLo,VLo,XLo,N9,Sde,zLo,QLo,Kj,WLo,HLo,ULo,j9,Rde,JLo,YLo,Zj,KLo,ZLo,e8o,D9,Bde,o8o,r8o,eD,t8o,a8o,n8o,G9,Pde,s8o,l8o,oD,i8o,d8o,c8o,O9,Ide,f8o,m8o,rD,g8o,h8o,p8o,V9,qde,u8o,_8o,tD,b8o,v8o,F8o,X9,Nde,T8o,M8o,aD,E8o,C8o,w8o,z9,jde,A8o,y8o,nD,L8o,x8o,$8o,Q9,k8o,Dde,S8o,R8o,Gde,B8o,P8o,W9,hBe,Ri,H9,Ode,v0,I8o,Vde,q8o,pBe,Bo,F0,N8o,Bi,j8o,sD,D8o,G8o,lD,O8o,V8o,X8o,T0,z8o,Xde,Q8o,W8o,H8o,nt,M0,U8o,zde,J8o,Y8o,Pi,K8o,Qde,Z8o,exo,iD,oxo,rxo,txo,U9,axo,eo,E0,nxo,Wde,sxo,lxo,xa,ixo,Hde,dxo,cxo,Ude,fxo,mxo,Jde,gxo,hxo,pxo,Y,J9,Yde,uxo,_xo,dD,bxo,vxo,Fxo,Y9,Kde,Txo,Mxo,cD,Exo,Cxo,wxo,K9,Zde,Axo,yxo,fD,Lxo,xxo,$xo,Z9,ece,kxo,Sxo,mD,Rxo,Bxo,Pxo,eb,oce,Ixo,qxo,gD,Nxo,jxo,Dxo,ob,rce,Gxo,Oxo,hD,Vxo,Xxo,zxo,rb,tce,Qxo,Wxo,pD,Hxo,Uxo,Jxo,tb,ace,Yxo,Kxo,uD,Zxo,e7o,o7o,ab,nce,r7o,t7o,_D,a7o,n7o,s7o,nb,sce,l7o,i7o,bD,d7o,c7o,f7o,sb,lce,m7o,g7o,vD,h7o,p7o,u7o,lb,ice,_7o,b7o,FD,v7o,F7o,T7o,ib,dce,M7o,E7o,TD,C7o,w7o,A7o,db,cce,y7o,L7o,MD,x7o,$7o,k7o,cb,fce,S7o,R7o,ED,B7o,P7o,I7o,fb,mce,q7o,N7o,CD,j7o,D7o,G7o,mb,gce,O7o,V7o,wD,X7o,z7o,Q7o,gb,hce,W7o,H7o,AD,U7o,J7o,Y7o,hb,pce,K7o,Z7o,yD,e$o,o$o,r$o,pb,uce,t$o,a$o,LD,n$o,s$o,l$o,ub,_ce,i$o,d$o,xD,c$o,f$o,m$o,_b,bce,g$o,h$o,$D,p$o,u$o,_$o,bb,vce,b$o,v$o,kD,F$o,T$o,M$o,vb,Fce,E$o,C$o,SD,w$o,A$o,y$o,Fb,Tce,L$o,x$o,RD,$$o,k$o,S$o,Tb,Mce,R$o,B$o,BD,P$o,I$o,q$o,Mb,Ece,N$o,j$o,PD,D$o,G$o,O$o,Eb,Cce,V$o,X$o,ID,z$o,Q$o,W$o,Cb,H$o,wce,U$o,J$o,Ace,Y$o,K$o,wb,uBe,Ii,Ab,yce,C0,Z$o,Lce,eko,_Be,Po,w0,oko,qi,rko,qD,tko,ako,ND,nko,sko,lko,A0,iko,xce,dko,cko,fko,st,y0,mko,$ce,gko,hko,Ni,pko,kce,uko,_ko,jD,bko,vko,Fko,yb,Tko,oo,L0,Mko,Sce,Eko,Cko,$a,wko,Rce,Ako,yko,Bce,Lko,xko,Pce,$ko,kko,Sko,Ur,Lb,Ice,Rko,Bko,DD,Pko,Iko,qko,xb,qce,Nko,jko,GD,Dko,Gko,Oko,$b,Nce,Vko,Xko,OD,zko,Qko,Wko,kb,jce,Hko,Uko,VD,Jko,Yko,Kko,Sb,Dce,Zko,eSo,XD,oSo,rSo,tSo,Rb,aSo,Gce,nSo,sSo,Oce,lSo,iSo,Bb,bBe,ji,Pb,Vce,x0,dSo,Xce,cSo,vBe,Io,$0,fSo,Di,mSo,zD,gSo,hSo,QD,pSo,uSo,_So,k0,bSo,zce,vSo,FSo,TSo,lt,S0,MSo,Qce,ESo,CSo,Gi,wSo,Wce,ASo,ySo,WD,LSo,xSo,$So,Ib,kSo,ro,R0,SSo,Hce,RSo,BSo,ka,PSo,Uce,ISo,qSo,Jce,NSo,jSo,Yce,DSo,GSo,OSo,U,qb,Kce,VSo,XSo,HD,zSo,QSo,WSo,Nb,Zce,HSo,USo,UD,JSo,YSo,KSo,jb,efe,ZSo,eRo,JD,oRo,rRo,tRo,Db,ofe,aRo,nRo,YD,sRo,lRo,iRo,Gb,rfe,dRo,cRo,KD,fRo,mRo,gRo,Ob,tfe,hRo,pRo,ZD,uRo,_Ro,bRo,Vb,afe,vRo,FRo,eG,TRo,MRo,ERo,Xb,nfe,CRo,wRo,oG,ARo,yRo,LRo,zb,sfe,xRo,$Ro,rG,kRo,SRo,RRo,Qb,lfe,BRo,PRo,tG,IRo,qRo,NRo,Wb,ife,jRo,DRo,aG,GRo,ORo,VRo,Hb,dfe,XRo,zRo,nG,QRo,WRo,HRo,Ub,cfe,URo,JRo,sG,YRo,KRo,ZRo,Jb,ffe,eBo,oBo,lG,rBo,tBo,aBo,Yb,mfe,nBo,sBo,iG,lBo,iBo,dBo,Kb,gfe,cBo,fBo,dG,mBo,gBo,hBo,Zb,hfe,pBo,uBo,cG,_Bo,bBo,vBo,e2,pfe,FBo,TBo,fG,MBo,EBo,CBo,o2,ufe,wBo,ABo,mG,yBo,LBo,xBo,r2,_fe,$Bo,kBo,gG,SBo,RBo,BBo,t2,bfe,PBo,IBo,hG,qBo,NBo,jBo,a2,vfe,DBo,GBo,pG,OBo,VBo,XBo,n2,Ffe,zBo,QBo,uG,WBo,HBo,UBo,s2,Tfe,JBo,YBo,_G,KBo,ZBo,ePo,l2,Mfe,oPo,rPo,bG,tPo,aPo,nPo,i2,Efe,sPo,lPo,vG,iPo,dPo,cPo,d2,Cfe,fPo,mPo,FG,gPo,hPo,pPo,c2,wfe,uPo,_Po,TG,bPo,vPo,FPo,f2,Afe,TPo,MPo,MG,EPo,CPo,wPo,m2,yfe,APo,yPo,EG,LPo,xPo,$Po,g2,Lfe,kPo,SPo,CG,RPo,BPo,PPo,h2,xfe,IPo,qPo,wG,NPo,jPo,DPo,p2,$fe,GPo,OPo,AG,VPo,XPo,zPo,u2,QPo,kfe,WPo,HPo,Sfe,UPo,JPo,_2,FBe,Oi,b2,Rfe,B0,YPo,Bfe,KPo,TBe,qo,P0,ZPo,Vi,eIo,yG,oIo,rIo,LG,tIo,aIo,nIo,I0,sIo,Pfe,lIo,iIo,dIo,it,q0,cIo,Ife,fIo,mIo,Xi,gIo,qfe,hIo,pIo,xG,uIo,_Io,bIo,v2,vIo,to,N0,FIo,Nfe,TIo,MIo,Sa,EIo,jfe,CIo,wIo,Dfe,AIo,yIo,Gfe,LIo,xIo,$Io,O,F2,Ofe,kIo,SIo,$G,RIo,BIo,PIo,T2,Vfe,IIo,qIo,kG,NIo,jIo,DIo,M2,Xfe,GIo,OIo,SG,VIo,XIo,zIo,E2,zfe,QIo,WIo,RG,HIo,UIo,JIo,C2,Qfe,YIo,KIo,BG,ZIo,eqo,oqo,w2,Wfe,rqo,tqo,PG,aqo,nqo,sqo,A2,Hfe,lqo,iqo,IG,dqo,cqo,fqo,y2,Ufe,mqo,gqo,qG,hqo,pqo,uqo,L2,Jfe,_qo,bqo,NG,vqo,Fqo,Tqo,x2,Yfe,Mqo,Eqo,jG,Cqo,wqo,Aqo,$2,Kfe,yqo,Lqo,DG,xqo,$qo,kqo,k2,Zfe,Sqo,Rqo,GG,Bqo,Pqo,Iqo,S2,eme,qqo,Nqo,OG,jqo,Dqo,Gqo,R2,ome,Oqo,Vqo,VG,Xqo,zqo,Qqo,B2,rme,Wqo,Hqo,XG,Uqo,Jqo,Yqo,P2,tme,Kqo,Zqo,zG,eNo,oNo,rNo,I2,ame,tNo,aNo,QG,nNo,sNo,lNo,q2,nme,iNo,dNo,WG,cNo,fNo,mNo,N2,sme,gNo,hNo,HG,pNo,uNo,_No,j2,lme,bNo,vNo,UG,FNo,TNo,MNo,D2,ime,ENo,CNo,JG,wNo,ANo,yNo,G2,dme,LNo,xNo,YG,$No,kNo,SNo,O2,cme,RNo,BNo,KG,PNo,INo,qNo,V2,fme,NNo,jNo,ZG,DNo,GNo,ONo,X2,mme,VNo,XNo,eO,zNo,QNo,WNo,z2,gme,HNo,UNo,oO,JNo,YNo,KNo,Q2,hme,ZNo,ejo,rO,ojo,rjo,tjo,W2,pme,ajo,njo,tO,sjo,ljo,ijo,H2,ume,djo,cjo,aO,fjo,mjo,gjo,U2,_me,hjo,pjo,nO,ujo,_jo,bjo,J2,bme,vjo,Fjo,sO,Tjo,Mjo,Ejo,Y2,vme,Cjo,wjo,lO,Ajo,yjo,Ljo,K2,Fme,xjo,$jo,iO,kjo,Sjo,Rjo,Z2,Tme,Bjo,Pjo,dO,Ijo,qjo,Njo,e5,Mme,jjo,Djo,cO,Gjo,Ojo,Vjo,o5,Eme,Xjo,zjo,fO,Qjo,Wjo,Hjo,r5,Cme,Ujo,Jjo,mO,Yjo,Kjo,Zjo,t5,wme,eDo,oDo,gO,rDo,tDo,aDo,a5,Ame,nDo,sDo,hO,lDo,iDo,dDo,n5,cDo,yme,fDo,mDo,Lme,gDo,hDo,s5,MBe,zi,l5,xme,j0,pDo,$me,uDo,EBe,No,D0,_Do,Qi,bDo,pO,vDo,FDo,uO,TDo,MDo,EDo,G0,CDo,kme,wDo,ADo,yDo,dt,O0,LDo,Sme,xDo,$Do,Wi,kDo,Rme,SDo,RDo,_O,BDo,PDo,IDo,i5,qDo,ao,V0,NDo,Bme,jDo,DDo,Ra,GDo,Pme,ODo,VDo,Ime,XDo,zDo,qme,QDo,WDo,HDo,Nme,d5,jme,UDo,JDo,bO,YDo,KDo,ZDo,c5,eGo,Dme,oGo,rGo,Gme,tGo,aGo,f5,CBe,Hi,m5,Ome,X0,nGo,Vme,sGo,wBe,jo,z0,lGo,Ui,iGo,vO,dGo,cGo,FO,fGo,mGo,gGo,Q0,hGo,Xme,pGo,uGo,_Go,ct,W0,bGo,zme,vGo,FGo,Ji,TGo,Qme,MGo,EGo,TO,CGo,wGo,AGo,g5,yGo,no,H0,LGo,Wme,xGo,$Go,Ba,kGo,Hme,SGo,RGo,Ume,BGo,PGo,Jme,IGo,qGo,NGo,ve,h5,Yme,jGo,DGo,MO,GGo,OGo,VGo,p5,Kme,XGo,zGo,EO,QGo,WGo,HGo,u5,Zme,UGo,JGo,CO,YGo,KGo,ZGo,xs,ege,eOo,oOo,wO,rOo,tOo,AO,aOo,nOo,sOo,_5,oge,lOo,iOo,yO,dOo,cOo,fOo,ft,rge,mOo,gOo,LO,hOo,pOo,xO,uOo,_Oo,$O,bOo,vOo,FOo,b5,tge,TOo,MOo,kO,EOo,COo,wOo,v5,age,AOo,yOo,SO,LOo,xOo,$Oo,F5,nge,kOo,SOo,RO,ROo,BOo,POo,T5,sge,IOo,qOo,BO,NOo,jOo,DOo,M5,lge,GOo,OOo,PO,VOo,XOo,zOo,E5,ige,QOo,WOo,IO,HOo,UOo,JOo,C5,dge,YOo,KOo,qO,ZOo,eVo,oVo,w5,rVo,cge,tVo,aVo,fge,nVo,sVo,A5,ABe,Yi,y5,mge,U0,lVo,gge,iVo,yBe,Do,J0,dVo,Ki,cVo,NO,fVo,mVo,jO,gVo,hVo,pVo,Y0,uVo,hge,_Vo,bVo,vVo,mt,K0,FVo,pge,TVo,MVo,Zi,EVo,uge,CVo,wVo,DO,AVo,yVo,LVo,L5,xVo,so,Z0,$Vo,_ge,kVo,SVo,Pa,RVo,bge,BVo,PVo,vge,IVo,qVo,Fge,NVo,jVo,DVo,Tge,x5,Mge,GVo,OVo,GO,VVo,XVo,zVo,$5,QVo,Ege,WVo,HVo,Cge,UVo,JVo,k5,LBe,ed,S5,wge,ey,YVo,Age,KVo,xBe,Go,oy,ZVo,od,eXo,OO,oXo,rXo,VO,tXo,aXo,nXo,ry,sXo,yge,lXo,iXo,dXo,gt,ty,cXo,Lge,fXo,mXo,rd,gXo,xge,hXo,pXo,XO,uXo,_Xo,bXo,R5,vXo,lo,ay,FXo,$ge,TXo,MXo,Ia,EXo,kge,CXo,wXo,Sge,AXo,yXo,Rge,LXo,xXo,$Xo,Ne,B5,Bge,kXo,SXo,zO,RXo,BXo,PXo,P5,Pge,IXo,qXo,QO,NXo,jXo,DXo,I5,Ige,GXo,OXo,WO,VXo,XXo,zXo,q5,qge,QXo,WXo,HO,HXo,UXo,JXo,N5,Nge,YXo,KXo,UO,ZXo,ezo,ozo,j5,jge,rzo,tzo,JO,azo,nzo,szo,D5,Dge,lzo,izo,YO,dzo,czo,fzo,G5,Gge,mzo,gzo,KO,hzo,pzo,uzo,O5,_zo,Oge,bzo,vzo,Vge,Fzo,Tzo,V5,$Be,td,X5,Xge,ny,Mzo,zge,Ezo,kBe,Oo,sy,Czo,ad,wzo,ZO,Azo,yzo,eV,Lzo,xzo,$zo,ly,kzo,Qge,Szo,Rzo,Bzo,ht,iy,Pzo,Wge,Izo,qzo,nd,Nzo,Hge,jzo,Dzo,oV,Gzo,Ozo,Vzo,z5,Xzo,io,dy,zzo,Uge,Qzo,Wzo,qa,Hzo,Jge,Uzo,Jzo,Yge,Yzo,Kzo,Kge,Zzo,eQo,oQo,Na,Q5,Zge,rQo,tQo,rV,aQo,nQo,sQo,W5,ehe,lQo,iQo,tV,dQo,cQo,fQo,H5,ohe,mQo,gQo,aV,hQo,pQo,uQo,U5,rhe,_Qo,bQo,nV,vQo,FQo,TQo,J5,MQo,the,EQo,CQo,ahe,wQo,AQo,Y5,SBe,sd,K5,nhe,cy,yQo,she,LQo,RBe,Vo,fy,xQo,ld,$Qo,sV,kQo,SQo,lV,RQo,BQo,PQo,my,IQo,lhe,qQo,NQo,jQo,pt,gy,DQo,ihe,GQo,OQo,id,VQo,dhe,XQo,zQo,iV,QQo,WQo,HQo,Z5,UQo,co,hy,JQo,che,YQo,KQo,ja,ZQo,fhe,eWo,oWo,mhe,rWo,tWo,ghe,aWo,nWo,sWo,je,ev,hhe,lWo,iWo,dV,dWo,cWo,fWo,ov,phe,mWo,gWo,cV,hWo,pWo,uWo,rv,uhe,_Wo,bWo,fV,vWo,FWo,TWo,tv,_he,MWo,EWo,mV,CWo,wWo,AWo,av,bhe,yWo,LWo,gV,xWo,$Wo,kWo,nv,vhe,SWo,RWo,hV,BWo,PWo,IWo,sv,Fhe,qWo,NWo,pV,jWo,DWo,GWo,lv,The,OWo,VWo,uV,XWo,zWo,QWo,iv,WWo,Mhe,HWo,UWo,Ehe,JWo,YWo,dv,BBe,dd,cv,Che,py,KWo,whe,ZWo,PBe,Xo,uy,eHo,cd,oHo,_V,rHo,tHo,bV,aHo,nHo,sHo,_y,lHo,Ahe,iHo,dHo,cHo,ut,by,fHo,yhe,mHo,gHo,fd,hHo,Lhe,pHo,uHo,vV,_Ho,bHo,vHo,fv,FHo,fo,vy,THo,xhe,MHo,EHo,Da,CHo,$he,wHo,AHo,khe,yHo,LHo,She,xHo,$Ho,kHo,Fy,mv,Rhe,SHo,RHo,FV,BHo,PHo,IHo,gv,Bhe,qHo,NHo,TV,jHo,DHo,GHo,hv,OHo,Phe,VHo,XHo,Ihe,zHo,QHo,pv,IBe,md,uv,qhe,Ty,WHo,Nhe,HHo,qBe,zo,My,UHo,gd,JHo,MV,YHo,KHo,EV,ZHo,eUo,oUo,Ey,rUo,jhe,tUo,aUo,nUo,_t,Cy,sUo,Dhe,lUo,iUo,hd,dUo,Ghe,cUo,fUo,CV,mUo,gUo,hUo,_v,pUo,mo,wy,uUo,Ohe,_Uo,bUo,Ga,vUo,Vhe,FUo,TUo,Xhe,MUo,EUo,zhe,CUo,wUo,AUo,Oa,bv,Qhe,yUo,LUo,wV,xUo,$Uo,kUo,vv,Whe,SUo,RUo,AV,BUo,PUo,IUo,Fv,Hhe,qUo,NUo,yV,jUo,DUo,GUo,Tv,Uhe,OUo,VUo,LV,XUo,zUo,QUo,Mv,WUo,Jhe,HUo,UUo,Yhe,JUo,YUo,Ev,NBe,pd,Cv,Khe,Ay,KUo,Zhe,ZUo,jBe,Qo,yy,eJo,ud,oJo,xV,rJo,tJo,$V,aJo,nJo,sJo,Ly,lJo,epe,iJo,dJo,cJo,bt,xy,fJo,ope,mJo,gJo,_d,hJo,rpe,pJo,uJo,kV,_Jo,bJo,vJo,wv,FJo,go,$y,TJo,tpe,MJo,EJo,Va,CJo,ape,wJo,AJo,npe,yJo,LJo,spe,xJo,$Jo,kJo,bd,Av,lpe,SJo,RJo,SV,BJo,PJo,IJo,yv,ipe,qJo,NJo,RV,jJo,DJo,GJo,Lv,dpe,OJo,VJo,BV,XJo,zJo,QJo,xv,WJo,cpe,HJo,UJo,fpe,JJo,YJo,$v,DBe,vd,kv,mpe,ky,KJo,gpe,ZJo,GBe,Wo,Sy,eYo,Fd,oYo,PV,rYo,tYo,IV,aYo,nYo,sYo,Ry,lYo,hpe,iYo,dYo,cYo,vt,By,fYo,ppe,mYo,gYo,Td,hYo,upe,pYo,uYo,qV,_Yo,bYo,vYo,Sv,FYo,ho,Py,TYo,_pe,MYo,EYo,Xa,CYo,bpe,wYo,AYo,vpe,yYo,LYo,Fpe,xYo,$Yo,kYo,Tpe,Rv,Mpe,SYo,RYo,NV,BYo,PYo,IYo,Bv,qYo,Epe,NYo,jYo,Cpe,DYo,GYo,Pv,OBe,Md,Iv,wpe,Iy,OYo,Ape,VYo,VBe,Ho,qy,XYo,Ed,zYo,jV,QYo,WYo,DV,HYo,UYo,JYo,Ny,YYo,ype,KYo,ZYo,eKo,Ft,jy,oKo,Lpe,rKo,tKo,Cd,aKo,xpe,nKo,sKo,GV,lKo,iKo,dKo,qv,cKo,po,Dy,fKo,$pe,mKo,gKo,za,hKo,kpe,pKo,uKo,Spe,_Ko,bKo,Rpe,vKo,FKo,TKo,Bpe,Nv,Ppe,MKo,EKo,OV,CKo,wKo,AKo,jv,yKo,Ipe,LKo,xKo,qpe,$Ko,kKo,Dv,XBe,wd,Gv,Npe,Gy,SKo,jpe,RKo,zBe,Uo,Oy,BKo,Ad,PKo,VV,IKo,qKo,XV,NKo,jKo,DKo,Vy,GKo,Dpe,OKo,VKo,XKo,Tt,Xy,zKo,Gpe,QKo,WKo,yd,HKo,Ope,UKo,JKo,zV,YKo,KKo,ZKo,Ov,eZo,uo,zy,oZo,Vpe,rZo,tZo,Qa,aZo,Xpe,nZo,sZo,zpe,lZo,iZo,Qpe,dZo,cZo,fZo,Wa,Vv,Wpe,mZo,gZo,QV,hZo,pZo,uZo,Xv,Hpe,_Zo,bZo,WV,vZo,FZo,TZo,zv,Upe,MZo,EZo,HV,CZo,wZo,AZo,Qv,Jpe,yZo,LZo,UV,xZo,$Zo,kZo,Wv,SZo,Ype,RZo,BZo,Kpe,PZo,IZo,Hv,QBe,Ld,Uv,Zpe,Qy,qZo,eue,NZo,WBe,Jo,Wy,jZo,xd,DZo,JV,GZo,OZo,YV,VZo,XZo,zZo,Hy,QZo,oue,WZo,HZo,UZo,Mt,Uy,JZo,rue,YZo,KZo,$d,ZZo,tue,eer,oer,KV,rer,ter,aer,Jv,ner,_o,Jy,ser,aue,ler,ier,Ha,der,nue,cer,fer,sue,mer,ger,lue,her,per,uer,iue,Yv,due,_er,ber,ZV,ver,Fer,Ter,Kv,Mer,cue,Eer,Cer,fue,wer,Aer,Zv,HBe,kd,eF,mue,Yy,yer,gue,Ler,UBe,Yo,Ky,xer,Sd,$er,eX,ker,Ser,oX,Rer,Ber,Per,Zy,Ier,hue,qer,Ner,jer,Et,eL,Der,pue,Ger,Oer,Rd,Ver,uue,Xer,zer,rX,Qer,Wer,Her,oF,Uer,Cr,oL,Jer,_ue,Yer,Ker,Ua,Zer,bue,eor,oor,vue,ror,tor,Fue,aor,nor,sor,j,rF,Tue,lor,ior,tX,dor,cor,mor,tF,Mue,gor,hor,aX,por,uor,_or,aF,Eue,bor,vor,nX,For,Tor,Mor,nF,Cue,Eor,Cor,sX,wor,Aor,yor,sF,wue,Lor,xor,lX,$or,kor,Sor,lF,Aue,Ror,Bor,iX,Por,Ior,qor,iF,yue,Nor,jor,dX,Dor,Gor,Oor,dF,Lue,Vor,Xor,cX,zor,Qor,Wor,cF,xue,Hor,Uor,fX,Jor,Yor,Kor,fF,$ue,Zor,err,mX,orr,rrr,trr,mF,kue,arr,nrr,gX,srr,lrr,irr,gF,Sue,drr,crr,hX,frr,mrr,grr,hF,Rue,hrr,prr,pX,urr,_rr,brr,pF,Bue,vrr,Frr,uX,Trr,Mrr,Err,uF,Pue,Crr,wrr,_X,Arr,yrr,Lrr,_F,Iue,xrr,$rr,bX,krr,Srr,Rrr,$s,que,Brr,Prr,vX,Irr,qrr,FX,Nrr,jrr,Drr,bF,Nue,Grr,Orr,TX,Vrr,Xrr,zrr,vF,jue,Qrr,Wrr,MX,Hrr,Urr,Jrr,FF,Due,Yrr,Krr,EX,Zrr,etr,otr,TF,Gue,rtr,ttr,CX,atr,ntr,str,MF,Oue,ltr,itr,wX,dtr,ctr,ftr,EF,Vue,mtr,gtr,AX,htr,ptr,utr,CF,Xue,_tr,btr,yX,vtr,Ftr,Ttr,wF,zue,Mtr,Etr,LX,Ctr,wtr,Atr,AF,Que,ytr,Ltr,xX,xtr,$tr,ktr,yF,Wue,Str,Rtr,$X,Btr,Ptr,Itr,LF,Hue,qtr,Ntr,kX,jtr,Dtr,Gtr,xF,Uue,Otr,Vtr,SX,Xtr,ztr,Qtr,$F,Jue,Wtr,Htr,RX,Utr,Jtr,Ytr,kF,Yue,Ktr,Ztr,BX,ear,oar,rar,SF,Kue,tar,aar,PX,nar,sar,lar,RF,Zue,iar,dar,IX,car,far,mar,BF,e_e,gar,har,qX,par,uar,_ar,PF,o_e,bar,Far,NX,Tar,Mar,Ear,IF,r_e,Car,war,jX,Aar,yar,Lar,qF,t_e,xar,$ar,DX,kar,Sar,Rar,NF,a_e,Bar,Par,GX,Iar,qar,Nar,jF,n_e,jar,Dar,OX,Gar,Oar,Var,DF,s_e,Xar,zar,VX,Qar,War,Har,GF,l_e,Uar,Jar,XX,Yar,Kar,Zar,OF,i_e,enr,onr,zX,rnr,tnr,anr,VF,d_e,nnr,snr,QX,lnr,inr,dnr,XF,c_e,cnr,fnr,WX,mnr,gnr,hnr,zF,JBe,Bd,QF,f_e,rL,pnr,m_e,unr,YBe,Ko,tL,_nr,Pd,bnr,HX,vnr,Fnr,UX,Tnr,Mnr,Enr,aL,Cnr,g_e,wnr,Anr,ynr,Ct,nL,Lnr,h_e,xnr,$nr,Id,knr,p_e,Snr,Rnr,JX,Bnr,Pnr,Inr,WF,qnr,wr,sL,Nnr,u_e,jnr,Dnr,Ja,Gnr,__e,Onr,Vnr,b_e,Xnr,znr,v_e,Qnr,Wnr,Hnr,ne,HF,F_e,Unr,Jnr,YX,Ynr,Knr,Znr,UF,T_e,esr,osr,KX,rsr,tsr,asr,JF,M_e,nsr,ssr,ZX,lsr,isr,dsr,YF,E_e,csr,fsr,ez,msr,gsr,hsr,KF,C_e,psr,usr,oz,_sr,bsr,vsr,ZF,w_e,Fsr,Tsr,rz,Msr,Esr,Csr,e6,A_e,wsr,Asr,tz,ysr,Lsr,xsr,o6,y_e,$sr,ksr,az,Ssr,Rsr,Bsr,r6,L_e,Psr,Isr,nz,qsr,Nsr,jsr,t6,x_e,Dsr,Gsr,sz,Osr,Vsr,Xsr,a6,$_e,zsr,Qsr,lz,Wsr,Hsr,Usr,n6,k_e,Jsr,Ysr,iz,Ksr,Zsr,elr,s6,S_e,olr,rlr,dz,tlr,alr,nlr,l6,R_e,slr,llr,cz,ilr,dlr,clr,i6,B_e,flr,mlr,fz,glr,hlr,plr,d6,P_e,ulr,_lr,mz,blr,vlr,Flr,c6,I_e,Tlr,Mlr,gz,Elr,Clr,wlr,f6,q_e,Alr,ylr,hz,Llr,xlr,$lr,m6,N_e,klr,Slr,pz,Rlr,Blr,Plr,g6,j_e,Ilr,qlr,uz,Nlr,jlr,Dlr,h6,D_e,Glr,Olr,_z,Vlr,Xlr,zlr,p6,G_e,Qlr,Wlr,bz,Hlr,Ulr,Jlr,u6,O_e,Ylr,Klr,vz,Zlr,eir,oir,_6,KBe,qd,b6,V_e,lL,rir,X_e,tir,ZBe,Zo,iL,air,Nd,nir,Fz,sir,lir,Tz,iir,dir,cir,dL,fir,z_e,mir,gir,hir,wt,cL,pir,Q_e,uir,_ir,jd,bir,W_e,vir,Fir,Mz,Tir,Mir,Eir,v6,Cir,Ar,fL,wir,H_e,Air,yir,Ya,Lir,U_e,xir,$ir,J_e,kir,Sir,Y_e,Rir,Bir,Pir,Te,F6,K_e,Iir,qir,Ez,Nir,jir,Dir,T6,Z_e,Gir,Oir,Cz,Vir,Xir,zir,M6,e1e,Qir,Wir,wz,Hir,Uir,Jir,E6,o1e,Yir,Kir,Az,Zir,edr,odr,C6,r1e,rdr,tdr,yz,adr,ndr,sdr,w6,t1e,ldr,idr,Lz,ddr,cdr,fdr,A6,a1e,mdr,gdr,xz,hdr,pdr,udr,y6,n1e,_dr,bdr,$z,vdr,Fdr,Tdr,L6,s1e,Mdr,Edr,kz,Cdr,wdr,Adr,x6,l1e,ydr,Ldr,Sz,xdr,$dr,kdr,$6,i1e,Sdr,Rdr,Rz,Bdr,Pdr,Idr,k6,d1e,qdr,Ndr,Bz,jdr,Ddr,Gdr,S6,ePe,Dd,R6,c1e,mL,Odr,f1e,Vdr,oPe,er,gL,Xdr,Gd,zdr,Pz,Qdr,Wdr,Iz,Hdr,Udr,Jdr,hL,Ydr,m1e,Kdr,Zdr,ecr,At,pL,ocr,g1e,rcr,tcr,Od,acr,h1e,ncr,scr,qz,lcr,icr,dcr,B6,ccr,yr,uL,fcr,p1e,mcr,gcr,Ka,hcr,u1e,pcr,ucr,_1e,_cr,bcr,b1e,vcr,Fcr,Tcr,_L,P6,v1e,Mcr,Ecr,Nz,Ccr,wcr,Acr,I6,F1e,ycr,Lcr,jz,xcr,$cr,kcr,q6,rPe,Vd,N6,T1e,bL,Scr,M1e,Rcr,tPe,or,vL,Bcr,Xd,Pcr,Dz,Icr,qcr,Gz,Ncr,jcr,Dcr,FL,Gcr,E1e,Ocr,Vcr,Xcr,yt,TL,zcr,C1e,Qcr,Wcr,zd,Hcr,w1e,Ucr,Jcr,Oz,Ycr,Kcr,Zcr,j6,efr,Lr,ML,ofr,A1e,rfr,tfr,Za,afr,y1e,nfr,sfr,L1e,lfr,ifr,x1e,dfr,cfr,ffr,ie,D6,$1e,mfr,gfr,Vz,hfr,pfr,ufr,G6,k1e,_fr,bfr,Xz,vfr,Ffr,Tfr,O6,S1e,Mfr,Efr,zz,Cfr,wfr,Afr,V6,R1e,yfr,Lfr,Qz,xfr,$fr,kfr,X6,B1e,Sfr,Rfr,Wz,Bfr,Pfr,Ifr,z6,P1e,qfr,Nfr,Hz,jfr,Dfr,Gfr,Q6,I1e,Ofr,Vfr,Uz,Xfr,zfr,Qfr,W6,q1e,Wfr,Hfr,Jz,Ufr,Jfr,Yfr,H6,N1e,Kfr,Zfr,Yz,emr,omr,rmr,U6,j1e,tmr,amr,Kz,nmr,smr,lmr,J6,D1e,imr,dmr,Zz,cmr,fmr,mmr,Y6,G1e,gmr,hmr,eQ,pmr,umr,_mr,K6,O1e,bmr,vmr,oQ,Fmr,Tmr,Mmr,Z6,V1e,Emr,Cmr,rQ,wmr,Amr,ymr,eT,X1e,Lmr,xmr,tQ,$mr,kmr,Smr,oT,z1e,Rmr,Bmr,aQ,Pmr,Imr,qmr,rT,Q1e,Nmr,jmr,nQ,Dmr,Gmr,Omr,tT,W1e,Vmr,Xmr,sQ,zmr,Qmr,Wmr,aT,H1e,Hmr,Umr,lQ,Jmr,Ymr,Kmr,nT,U1e,Zmr,egr,iQ,ogr,rgr,tgr,sT,aPe,Qd,lT,J1e,EL,agr,Y1e,ngr,nPe,rr,CL,sgr,Wd,lgr,dQ,igr,dgr,cQ,cgr,fgr,mgr,wL,ggr,K1e,hgr,pgr,ugr,Lt,AL,_gr,Z1e,bgr,vgr,Hd,Fgr,e9e,Tgr,Mgr,fQ,Egr,Cgr,wgr,iT,Agr,xr,yL,ygr,o9e,Lgr,xgr,en,$gr,r9e,kgr,Sgr,t9e,Rgr,Bgr,a9e,Pgr,Igr,qgr,ye,dT,n9e,Ngr,jgr,mQ,Dgr,Ggr,Ogr,cT,s9e,Vgr,Xgr,gQ,zgr,Qgr,Wgr,fT,l9e,Hgr,Ugr,hQ,Jgr,Ygr,Kgr,mT,i9e,Zgr,ehr,pQ,ohr,rhr,thr,gT,d9e,ahr,nhr,uQ,shr,lhr,ihr,hT,c9e,dhr,chr,_Q,fhr,mhr,ghr,pT,f9e,hhr,phr,bQ,uhr,_hr,bhr,uT,m9e,vhr,Fhr,vQ,Thr,Mhr,Ehr,_T,g9e,Chr,whr,FQ,Ahr,yhr,Lhr,bT,h9e,xhr,$hr,TQ,khr,Shr,Rhr,vT,sPe,Ud,FT,p9e,LL,Bhr,u9e,Phr,lPe,tr,xL,Ihr,Jd,qhr,MQ,Nhr,jhr,EQ,Dhr,Ghr,Ohr,$L,Vhr,_9e,Xhr,zhr,Qhr,xt,kL,Whr,b9e,Hhr,Uhr,Yd,Jhr,v9e,Yhr,Khr,CQ,Zhr,epr,opr,TT,rpr,$r,SL,tpr,F9e,apr,npr,on,spr,T9e,lpr,ipr,M9e,dpr,cpr,E9e,fpr,mpr,gpr,Z,MT,C9e,hpr,ppr,wQ,upr,_pr,bpr,ET,w9e,vpr,Fpr,AQ,Tpr,Mpr,Epr,CT,A9e,Cpr,wpr,yQ,Apr,ypr,Lpr,wT,y9e,xpr,$pr,LQ,kpr,Spr,Rpr,AT,L9e,Bpr,Ppr,xQ,Ipr,qpr,Npr,yT,x9e,jpr,Dpr,$Q,Gpr,Opr,Vpr,LT,$9e,Xpr,zpr,kQ,Qpr,Wpr,Hpr,xT,k9e,Upr,Jpr,SQ,Ypr,Kpr,Zpr,$T,S9e,eur,our,RQ,rur,tur,aur,kT,R9e,nur,sur,BQ,lur,iur,dur,ST,B9e,cur,fur,PQ,mur,gur,hur,RT,P9e,pur,uur,IQ,_ur,bur,vur,BT,I9e,Fur,Tur,qQ,Mur,Eur,Cur,PT,q9e,wur,Aur,NQ,yur,Lur,xur,IT,N9e,$ur,kur,jQ,Sur,Rur,Bur,qT,j9e,Pur,Iur,DQ,qur,Nur,jur,NT,D9e,Dur,Gur,GQ,Our,Vur,Xur,jT,G9e,zur,Qur,OQ,Wur,Hur,Uur,DT,O9e,Jur,Yur,VQ,Kur,Zur,e_r,GT,V9e,o_r,r_r,XQ,t_r,a_r,n_r,OT,X9e,s_r,l_r,zQ,i_r,d_r,c_r,VT,z9e,f_r,m_r,QQ,g_r,h_r,p_r,XT,Q9e,u_r,__r,WQ,b_r,v_r,F_r,zT,W9e,T_r,M_r,HQ,E_r,C_r,w_r,QT,H9e,A_r,y_r,UQ,L_r,x_r,$_r,WT,U9e,k_r,S_r,JQ,R_r,B_r,P_r,HT,iPe,Kd,UT,J9e,RL,I_r,Y9e,q_r,dPe,ar,BL,N_r,Zd,j_r,YQ,D_r,G_r,KQ,O_r,V_r,X_r,PL,z_r,K9e,Q_r,W_r,H_r,$t,IL,U_r,Z9e,J_r,Y_r,ec,K_r,ebe,Z_r,e1r,ZQ,o1r,r1r,t1r,JT,a1r,kr,qL,n1r,obe,s1r,l1r,rn,i1r,rbe,d1r,c1r,tbe,f1r,m1r,abe,g1r,h1r,p1r,pe,YT,nbe,u1r,_1r,eW,b1r,v1r,F1r,KT,sbe,T1r,M1r,oW,E1r,C1r,w1r,ZT,lbe,A1r,y1r,rW,L1r,x1r,$1r,eM,ibe,k1r,S1r,tW,R1r,B1r,P1r,oM,dbe,I1r,q1r,aW,N1r,j1r,D1r,rM,cbe,G1r,O1r,nW,V1r,X1r,z1r,tM,fbe,Q1r,W1r,sW,H1r,U1r,J1r,aM,mbe,Y1r,K1r,lW,Z1r,e9r,o9r,nM,gbe,r9r,t9r,iW,a9r,n9r,s9r,sM,hbe,l9r,i9r,dW,d9r,c9r,f9r,lM,pbe,m9r,g9r,cW,h9r,p9r,u9r,iM,ube,_9r,b9r,fW,v9r,F9r,T9r,dM,_be,M9r,E9r,mW,C9r,w9r,A9r,cM,bbe,y9r,L9r,gW,x9r,$9r,k9r,fM,vbe,S9r,R9r,hW,B9r,P9r,I9r,mM,Fbe,q9r,N9r,pW,j9r,D9r,G9r,gM,Tbe,O9r,V9r,uW,X9r,z9r,Q9r,hM,cPe,oc,pM,Mbe,NL,W9r,Ebe,H9r,fPe,nr,jL,U9r,rc,J9r,_W,Y9r,K9r,bW,Z9r,ebr,obr,DL,rbr,Cbe,tbr,abr,nbr,kt,GL,sbr,wbe,lbr,ibr,tc,dbr,Abe,cbr,fbr,vW,mbr,gbr,hbr,uM,pbr,Sr,OL,ubr,ybe,_br,bbr,tn,vbr,Lbe,Fbr,Tbr,xbe,Mbr,Ebr,$be,Cbr,wbr,Abr,kbe,_M,Sbe,ybr,Lbr,FW,xbr,$br,kbr,bM,mPe,ac,vM,Rbe,VL,Sbr,Bbe,Rbr,gPe,sr,XL,Bbr,nc,Pbr,TW,Ibr,qbr,MW,Nbr,jbr,Dbr,zL,Gbr,Pbe,Obr,Vbr,Xbr,St,QL,zbr,Ibe,Qbr,Wbr,sc,Hbr,qbe,Ubr,Jbr,EW,Ybr,Kbr,Zbr,FM,e2r,Rr,WL,o2r,Nbe,r2r,t2r,an,a2r,jbe,n2r,s2r,Dbe,l2r,i2r,Gbe,d2r,c2r,f2r,de,TM,Obe,m2r,g2r,CW,h2r,p2r,u2r,MM,Vbe,_2r,b2r,wW,v2r,F2r,T2r,EM,Xbe,M2r,E2r,AW,C2r,w2r,A2r,CM,zbe,y2r,L2r,yW,x2r,$2r,k2r,wM,Qbe,S2r,R2r,LW,B2r,P2r,I2r,AM,Wbe,q2r,N2r,xW,j2r,D2r,G2r,yM,Hbe,O2r,V2r,$W,X2r,z2r,Q2r,LM,Ube,W2r,H2r,kW,U2r,J2r,Y2r,xM,Jbe,K2r,Z2r,SW,e5r,o5r,r5r,$M,Ybe,t5r,a5r,RW,n5r,s5r,l5r,kM,Kbe,i5r,d5r,BW,c5r,f5r,m5r,SM,Zbe,g5r,h5r,PW,p5r,u5r,_5r,RM,e2e,b5r,v5r,IW,F5r,T5r,M5r,BM,o2e,E5r,C5r,qW,w5r,A5r,y5r,PM,r2e,L5r,x5r,NW,$5r,k5r,S5r,IM,t2e,R5r,B5r,jW,P5r,I5r,q5r,qM,a2e,N5r,j5r,DW,D5r,G5r,O5r,NM,n2e,V5r,X5r,GW,z5r,Q5r,W5r,jM,s2e,H5r,U5r,OW,J5r,Y5r,K5r,DM,l2e,Z5r,evr,VW,ovr,rvr,tvr,GM,hPe,lc,OM,i2e,HL,avr,d2e,nvr,pPe,lr,UL,svr,ic,lvr,XW,ivr,dvr,zW,cvr,fvr,mvr,JL,gvr,c2e,hvr,pvr,uvr,Rt,YL,_vr,f2e,bvr,vvr,dc,Fvr,m2e,Tvr,Mvr,QW,Evr,Cvr,wvr,VM,Avr,Br,KL,yvr,g2e,Lvr,xvr,nn,$vr,h2e,kvr,Svr,p2e,Rvr,Bvr,u2e,Pvr,Ivr,qvr,ce,XM,_2e,Nvr,jvr,WW,Dvr,Gvr,Ovr,zM,b2e,Vvr,Xvr,HW,zvr,Qvr,Wvr,QM,v2e,Hvr,Uvr,UW,Jvr,Yvr,Kvr,WM,F2e,Zvr,eFr,JW,oFr,rFr,tFr,HM,T2e,aFr,nFr,YW,sFr,lFr,iFr,UM,M2e,dFr,cFr,KW,fFr,mFr,gFr,JM,E2e,hFr,pFr,ZW,uFr,_Fr,bFr,YM,C2e,vFr,FFr,eH,TFr,MFr,EFr,KM,w2e,CFr,wFr,oH,AFr,yFr,LFr,ZM,A2e,xFr,$Fr,rH,kFr,SFr,RFr,e4,y2e,BFr,PFr,tH,IFr,qFr,NFr,o4,L2e,jFr,DFr,aH,GFr,OFr,VFr,r4,x2e,XFr,zFr,nH,QFr,WFr,HFr,t4,$2e,UFr,JFr,sH,YFr,KFr,ZFr,a4,k2e,e6r,o6r,lH,r6r,t6r,a6r,n4,S2e,n6r,s6r,iH,l6r,i6r,d6r,s4,R2e,c6r,f6r,dH,m6r,g6r,h6r,l4,B2e,p6r,u6r,cH,_6r,b6r,v6r,i4,P2e,F6r,T6r,fH,M6r,E6r,C6r,d4,I2e,w6r,A6r,mH,y6r,L6r,x6r,c4,uPe,cc,f4,q2e,ZL,$6r,N2e,k6r,_Pe,ir,e8,S6r,fc,R6r,gH,B6r,P6r,hH,I6r,q6r,N6r,o8,j6r,j2e,D6r,G6r,O6r,Bt,r8,V6r,D2e,X6r,z6r,mc,Q6r,G2e,W6r,H6r,pH,U6r,J6r,Y6r,m4,K6r,Pr,t8,Z6r,O2e,eTr,oTr,sn,rTr,V2e,tTr,aTr,X2e,nTr,sTr,z2e,lTr,iTr,dTr,Q2e,g4,W2e,cTr,fTr,uH,mTr,gTr,hTr,h4,bPe,gc,p4,H2e,a8,pTr,U2e,uTr,vPe,dr,n8,_Tr,hc,bTr,_H,vTr,FTr,bH,TTr,MTr,ETr,s8,CTr,J2e,wTr,ATr,yTr,Pt,l8,LTr,Y2e,xTr,$Tr,pc,kTr,K2e,STr,RTr,vH,BTr,PTr,ITr,u4,qTr,Ir,i8,NTr,Z2e,jTr,DTr,ln,GTr,e5e,OTr,VTr,o5e,XTr,zTr,r5e,QTr,WTr,HTr,t5e,_4,a5e,UTr,JTr,FH,YTr,KTr,ZTr,b4,FPe,uc,v4,n5e,d8,eMr,s5e,oMr,TPe,cr,c8,rMr,_c,tMr,TH,aMr,nMr,MH,sMr,lMr,iMr,f8,dMr,l5e,cMr,fMr,mMr,It,m8,gMr,i5e,hMr,pMr,bc,uMr,d5e,_Mr,bMr,EH,vMr,FMr,TMr,F4,MMr,qr,g8,EMr,c5e,CMr,wMr,dn,AMr,f5e,yMr,LMr,m5e,xMr,$Mr,g5e,kMr,SMr,RMr,oe,T4,h5e,BMr,PMr,CH,IMr,qMr,NMr,M4,p5e,jMr,DMr,wH,GMr,OMr,VMr,E4,u5e,XMr,zMr,AH,QMr,WMr,HMr,C4,_5e,UMr,JMr,yH,YMr,KMr,ZMr,w4,b5e,e4r,o4r,LH,r4r,t4r,a4r,A4,v5e,n4r,s4r,xH,l4r,i4r,d4r,y4,F5e,c4r,f4r,$H,m4r,g4r,h4r,L4,T5e,p4r,u4r,kH,_4r,b4r,v4r,x4,M5e,F4r,T4r,SH,M4r,E4r,C4r,$4,E5e,w4r,A4r,RH,y4r,L4r,x4r,k4,C5e,$4r,k4r,BH,S4r,R4r,B4r,S4,w5e,P4r,I4r,PH,q4r,N4r,j4r,R4,A5e,D4r,G4r,IH,O4r,V4r,X4r,B4,y5e,z4r,Q4r,qH,W4r,H4r,U4r,P4,L5e,J4r,Y4r,NH,K4r,Z4r,eEr,I4,x5e,oEr,rEr,jH,tEr,aEr,nEr,q4,$5e,sEr,lEr,DH,iEr,dEr,cEr,N4,k5e,fEr,mEr,GH,gEr,hEr,pEr,j4,S5e,uEr,_Er,OH,bEr,vEr,FEr,D4,R5e,TEr,MEr,VH,EEr,CEr,wEr,G4,B5e,AEr,yEr,XH,LEr,xEr,$Er,O4,P5e,kEr,SEr,zH,REr,BEr,PEr,V4,I5e,IEr,qEr,QH,NEr,jEr,DEr,X4,q5e,GEr,OEr,WH,VEr,XEr,zEr,z4,N5e,QEr,WEr,HH,HEr,UEr,JEr,Q4,MPe,vc,W4,j5e,h8,YEr,D5e,KEr,EPe,fr,p8,ZEr,Fc,eCr,UH,oCr,rCr,JH,tCr,aCr,nCr,u8,sCr,G5e,lCr,iCr,dCr,qt,_8,cCr,O5e,fCr,mCr,Tc,gCr,V5e,hCr,pCr,YH,uCr,_Cr,bCr,H4,vCr,Nr,b8,FCr,X5e,TCr,MCr,cn,ECr,z5e,CCr,wCr,Q5e,ACr,yCr,W5e,LCr,xCr,$Cr,ke,U4,H5e,kCr,SCr,KH,RCr,BCr,PCr,J4,U5e,ICr,qCr,ZH,NCr,jCr,DCr,Y4,J5e,GCr,OCr,eU,VCr,XCr,zCr,K4,Y5e,QCr,WCr,oU,HCr,UCr,JCr,Z4,K5e,YCr,KCr,rU,ZCr,e3r,o3r,eE,Z5e,r3r,t3r,tU,a3r,n3r,s3r,oE,eve,l3r,i3r,aU,d3r,c3r,f3r,rE,ove,m3r,g3r,nU,h3r,p3r,u3r,tE,rve,_3r,b3r,sU,v3r,F3r,T3r,aE,CPe,Mc,nE,tve,v8,M3r,ave,E3r,wPe,mr,F8,C3r,Ec,w3r,lU,A3r,y3r,iU,L3r,x3r,$3r,T8,k3r,nve,S3r,R3r,B3r,Nt,M8,P3r,sve,I3r,q3r,Cc,N3r,lve,j3r,D3r,dU,G3r,O3r,V3r,sE,X3r,jr,E8,z3r,ive,Q3r,W3r,fn,H3r,dve,U3r,J3r,cve,Y3r,K3r,fve,Z3r,ewr,owr,Me,lE,mve,rwr,twr,cU,awr,nwr,swr,iE,gve,lwr,iwr,fU,dwr,cwr,fwr,dE,hve,mwr,gwr,mU,hwr,pwr,uwr,cE,pve,_wr,bwr,gU,vwr,Fwr,Twr,fE,uve,Mwr,Ewr,hU,Cwr,wwr,Awr,mE,_ve,ywr,Lwr,pU,xwr,$wr,kwr,gE,bve,Swr,Rwr,uU,Bwr,Pwr,Iwr,hE,vve,qwr,Nwr,_U,jwr,Dwr,Gwr,pE,Fve,Owr,Vwr,bU,Xwr,zwr,Qwr,uE,Tve,Wwr,Hwr,vU,Uwr,Jwr,Ywr,_E,Mve,Kwr,Zwr,FU,eAr,oAr,rAr,bE,Eve,tAr,aAr,TU,nAr,sAr,lAr,vE,APe,wc,FE,Cve,C8,iAr,wve,dAr,yPe,gr,w8,cAr,Ac,fAr,MU,mAr,gAr,EU,hAr,pAr,uAr,A8,_Ar,Ave,bAr,vAr,FAr,jt,y8,TAr,yve,MAr,EAr,yc,CAr,Lve,wAr,AAr,CU,yAr,LAr,xAr,TE,$Ar,Dr,L8,kAr,xve,SAr,RAr,mn,BAr,$ve,PAr,IAr,kve,qAr,NAr,Sve,jAr,DAr,GAr,Le,ME,Rve,OAr,VAr,wU,XAr,zAr,QAr,EE,Bve,WAr,HAr,AU,UAr,JAr,YAr,CE,Pve,KAr,ZAr,yU,e0r,o0r,r0r,wE,Ive,t0r,a0r,LU,n0r,s0r,l0r,AE,qve,i0r,d0r,xU,c0r,f0r,m0r,yE,Nve,g0r,h0r,$U,p0r,u0r,_0r,LE,jve,b0r,v0r,kU,F0r,T0r,M0r,xE,Dve,E0r,C0r,SU,w0r,A0r,y0r,$E,Gve,L0r,x0r,RU,$0r,k0r,S0r,kE,Ove,R0r,B0r,BU,P0r,I0r,q0r,SE,LPe,Lc,RE,Vve,x8,N0r,Xve,j0r,xPe,hr,$8,D0r,xc,G0r,PU,O0r,V0r,IU,X0r,z0r,Q0r,k8,W0r,zve,H0r,U0r,J0r,Dt,S8,Y0r,Qve,K0r,Z0r,$c,eyr,Wve,oyr,ryr,qU,tyr,ayr,nyr,BE,syr,Gr,R8,lyr,Hve,iyr,dyr,gn,cyr,Uve,fyr,myr,Jve,gyr,hyr,Yve,pyr,uyr,_yr,Se,PE,Kve,byr,vyr,NU,Fyr,Tyr,Myr,IE,Zve,Eyr,Cyr,jU,wyr,Ayr,yyr,qE,eFe,Lyr,xyr,DU,$yr,kyr,Syr,NE,oFe,Ryr,Byr,GU,Pyr,Iyr,qyr,jE,rFe,Nyr,jyr,OU,Dyr,Gyr,Oyr,DE,tFe,Vyr,Xyr,VU,zyr,Qyr,Wyr,GE,aFe,Hyr,Uyr,XU,Jyr,Yyr,Kyr,OE,nFe,Zyr,eLr,zU,oLr,rLr,tLr,VE,sFe,aLr,nLr,QU,sLr,lLr,iLr,XE,$Pe,kc,zE,lFe,B8,dLr,iFe,cLr,kPe,pr,P8,fLr,Sc,mLr,WU,gLr,hLr,HU,pLr,uLr,_Lr,I8,bLr,dFe,vLr,FLr,TLr,Gt,q8,MLr,cFe,ELr,CLr,Rc,wLr,fFe,ALr,yLr,UU,LLr,xLr,$Lr,QE,kLr,Or,N8,SLr,mFe,RLr,BLr,hn,PLr,gFe,ILr,qLr,hFe,NLr,jLr,pFe,DLr,GLr,OLr,xe,WE,uFe,VLr,XLr,JU,zLr,QLr,WLr,HE,_Fe,HLr,ULr,YU,JLr,YLr,KLr,UE,bFe,ZLr,e8r,KU,o8r,r8r,t8r,JE,vFe,a8r,n8r,ZU,s8r,l8r,i8r,YE,FFe,d8r,c8r,eJ,f8r,m8r,g8r,KE,TFe,h8r,p8r,oJ,u8r,_8r,b8r,ZE,MFe,v8r,F8r,rJ,T8r,M8r,E8r,eC,EFe,C8r,w8r,tJ,A8r,y8r,L8r,oC,CFe,x8r,$8r,aJ,k8r,S8r,R8r,rC,wFe,B8r,P8r,nJ,I8r,q8r,N8r,tC,SPe,Bc,aC,AFe,j8,j8r,yFe,D8r,RPe,ur,D8,G8r,Pc,O8r,sJ,V8r,X8r,lJ,z8r,Q8r,W8r,G8,H8r,LFe,U8r,J8r,Y8r,Ot,O8,K8r,xFe,Z8r,exr,Ic,oxr,$Fe,rxr,txr,iJ,axr,nxr,sxr,nC,lxr,Vr,V8,ixr,kFe,dxr,cxr,pn,fxr,SFe,mxr,gxr,RFe,hxr,pxr,BFe,uxr,_xr,bxr,$e,sC,PFe,vxr,Fxr,dJ,Txr,Mxr,Exr,lC,IFe,Cxr,wxr,cJ,Axr,yxr,Lxr,iC,qFe,xxr,$xr,fJ,kxr,Sxr,Rxr,dC,NFe,Bxr,Pxr,mJ,Ixr,qxr,Nxr,cC,jFe,jxr,Dxr,gJ,Gxr,Oxr,Vxr,fC,DFe,Xxr,zxr,hJ,Qxr,Wxr,Hxr,mC,GFe,Uxr,Jxr,pJ,Yxr,Kxr,Zxr,gC,OFe,e7r,o7r,uJ,r7r,t7r,a7r,hC,VFe,n7r,s7r,_J,l7r,i7r,d7r,pC,XFe,c7r,f7r,bJ,m7r,g7r,h7r,uC,BPe,qc,_C,zFe,X8,p7r,QFe,u7r,PPe,_r,z8,_7r,Nc,b7r,vJ,v7r,F7r,FJ,T7r,M7r,E7r,Q8,C7r,WFe,w7r,A7r,y7r,Vt,W8,L7r,HFe,x7r,$7r,jc,k7r,UFe,S7r,R7r,TJ,B7r,P7r,I7r,bC,q7r,Xr,H8,N7r,JFe,j7r,D7r,un,G7r,YFe,O7r,V7r,KFe,X7r,z7r,ZFe,Q7r,W7r,H7r,De,vC,e6e,U7r,J7r,MJ,Y7r,K7r,Z7r,FC,o6e,e$r,o$r,EJ,r$r,t$r,a$r,TC,r6e,n$r,s$r,CJ,l$r,i$r,d$r,MC,t6e,c$r,f$r,wJ,m$r,g$r,h$r,EC,a6e,p$r,u$r,AJ,_$r,b$r,v$r,CC,n6e,F$r,T$r,yJ,M$r,E$r,C$r,wC,s6e,w$r,A$r,LJ,y$r,L$r,x$r,AC,l6e,$$r,k$r,xJ,S$r,R$r,B$r,yC,IPe,Dc,LC,i6e,U8,P$r,d6e,I$r,qPe,br,J8,q$r,Gc,N$r,$J,j$r,D$r,kJ,G$r,O$r,V$r,Y8,X$r,c6e,z$r,Q$r,W$r,Xt,K8,H$r,f6e,U$r,J$r,Oc,Y$r,m6e,K$r,Z$r,SJ,ekr,okr,rkr,xC,tkr,zr,Z8,akr,g6e,nkr,skr,_n,lkr,h6e,ikr,dkr,p6e,ckr,fkr,u6e,mkr,gkr,hkr,Ge,$C,_6e,pkr,ukr,RJ,_kr,bkr,vkr,kC,b6e,Fkr,Tkr,BJ,Mkr,Ekr,Ckr,SC,v6e,wkr,Akr,PJ,ykr,Lkr,xkr,RC,F6e,$kr,kkr,IJ,Skr,Rkr,Bkr,BC,T6e,Pkr,Ikr,qJ,qkr,Nkr,jkr,PC,M6e,Dkr,Gkr,NJ,Okr,Vkr,Xkr,IC,E6e,zkr,Qkr,jJ,Wkr,Hkr,Ukr,qC,C6e,Jkr,Ykr,DJ,Kkr,Zkr,eSr,NC,NPe,Vc,jC,w6e,ex,oSr,A6e,rSr,jPe,vr,ox,tSr,Xc,aSr,GJ,nSr,sSr,OJ,lSr,iSr,dSr,rx,cSr,y6e,fSr,mSr,gSr,zt,tx,hSr,L6e,pSr,uSr,zc,_Sr,x6e,bSr,vSr,VJ,FSr,TSr,MSr,DC,ESr,Qr,ax,CSr,$6e,wSr,ASr,bn,ySr,k6e,LSr,xSr,S6e,$Sr,kSr,R6e,SSr,RSr,BSr,B6e,GC,P6e,PSr,ISr,XJ,qSr,NSr,jSr,OC,DPe,Qc,VC,I6e,nx,DSr,q6e,GSr,GPe,Fr,sx,OSr,Wc,VSr,zJ,XSr,zSr,QJ,QSr,WSr,HSr,lx,USr,N6e,JSr,YSr,KSr,Qt,ix,ZSr,j6e,eRr,oRr,Hc,rRr,D6e,tRr,aRr,WJ,nRr,sRr,lRr,XC,iRr,Wr,dx,dRr,G6e,cRr,fRr,vn,mRr,O6e,gRr,hRr,V6e,pRr,uRr,X6e,_Rr,bRr,vRr,cx,zC,z6e,FRr,TRr,HJ,MRr,ERr,CRr,QC,Q6e,wRr,ARr,UJ,yRr,LRr,xRr,WC,OPe,Uc,HC,W6e,fx,$Rr,H6e,kRr,VPe,Tr,mx,SRr,Jc,RRr,JJ,BRr,PRr,YJ,IRr,qRr,NRr,gx,jRr,U6e,DRr,GRr,ORr,Wt,hx,VRr,J6e,XRr,zRr,Yc,QRr,Y6e,WRr,HRr,KJ,URr,JRr,YRr,UC,KRr,Hr,px,ZRr,K6e,eBr,oBr,Fn,rBr,Z6e,tBr,aBr,eTe,nBr,sBr,oTe,lBr,iBr,dBr,rTe,JC,tTe,cBr,fBr,ZJ,mBr,gBr,hBr,YC,XPe;return d=new ee({}),va=new B({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),_A=new ee({}),bA=new B({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),sf=new pBr({props:{warning:!0,$$slots:{default:[K4t]},$$scope:{ctx:A}}}),vA=new ee({}),FA=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/configuration_auto.py#L560"}}),EA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/configuration_auto.py#L583"}}),tg=new P({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[Z4t]},$$scope:{ctx:A}}}),CA=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/configuration_auto.py#L705"}}),wA=new ee({}),AA=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/tokenization_auto.py#L377"}}),xA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_16995/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/tokenization_auto.py#L391"}}),Pg=new P({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[eEt]},$$scope:{ctx:A}}}),$A=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/tokenization_auto.py#L587"}}),kA=new ee({}),SA=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/feature_extraction_auto.py#L176"}}),PA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_16995/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/feature_extraction_auto.py#L190"}}),lh=new pBr({props:{$$slots:{default:[oEt]},$$scope:{ctx:A}}}),ih=new P({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[rEt]},$$scope:{ctx:A}}}),IA=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/feature_extraction_auto.py#L317"}}),qA=new ee({}),NA=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/processing_auto.py#L76"}}),GA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/processing_auto.py#L90"}}),wh=new pBr({props:{$$slots:{default:[tEt]},$$scope:{ctx:A}}}),Ah=new P({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[aEt]},$$scope:{ctx:A}}}),OA=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/processing_auto.py#L243"}}),VA=new ee({}),XA=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/modeling_auto.py#L714"}}),QA=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16995/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_16995/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L389"}}),xh=new P({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[nEt]},$$scope:{ctx:A}}}),WA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L417"}}),uu=new P({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[sEt]},$$scope:{ctx:A}}}),HA=new ee({}),UA=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/modeling_auto.py#L721"}}),YA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16995/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L389"}}),bu=new P({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[lEt]},$$scope:{ctx:A}}}),KA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L417"}}),n_=new P({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[iEt]},$$scope:{ctx:A}}}),ZA=new ee({}),e0=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/modeling_auto.py#L736"}}),r0=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16995/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L389"}}),l_=new P({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[dEt]},$$scope:{ctx:A}}}),t0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L417"}}),X_=new P({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[cEt]},$$scope:{ctx:A}}}),a0=new ee({}),n0=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/modeling_auto.py#L743"}}),l0=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16995/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L389"}}),Q_=new P({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[fEt]},$$scope:{ctx:A}}}),i0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L417"}}),x1=new P({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[mEt]},$$scope:{ctx:A}}}),d0=new ee({}),c0=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/modeling_auto.py#L750"}}),m0=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16995/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLMProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L389"}}),k1=new P({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[gEt]},$$scope:{ctx:A}}}),g0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L417"}}),J1=new P({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[hEt]},$$scope:{ctx:A}}}),h0=new ee({}),p0=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/modeling_auto.py#L759"}}),_0=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16995/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L389"}}),K1=new P({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[pEt]},$$scope:{ctx:A}}}),b0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L417"}}),W9=new P({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[uEt]},$$scope:{ctx:A}}}),v0=new ee({}),F0=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/modeling_auto.py#L793"}}),M0=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16995/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L389"}}),U9=new P({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[_Et]},$$scope:{ctx:A}}}),E0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L417"}}),wb=new P({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[bEt]},$$scope:{ctx:A}}}),C0=new ee({}),w0=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/modeling_auto.py#L800"}}),y0=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16995/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L389"}}),yb=new P({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[vEt]},$$scope:{ctx:A}}}),L0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L417"}}),Bb=new P({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[FEt]},$$scope:{ctx:A}}}),x0=new ee({}),$0=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/modeling_auto.py#L786"}}),S0=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16995/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L389"}}),Ib=new P({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[TEt]},$$scope:{ctx:A}}}),R0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L417"}}),_2=new P({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[MEt]},$$scope:{ctx:A}}}),B0=new ee({}),P0=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/modeling_auto.py#L768"}}),q0=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16995/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L389"}}),v2=new P({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[EEt]},$$scope:{ctx:A}}}),N0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L417"}}),s5=new P({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[CEt]},$$scope:{ctx:A}}}),j0=new ee({}),D0=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/modeling_auto.py#L775"}}),O0=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16995/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L389"}}),i5=new P({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[wEt]},$$scope:{ctx:A}}}),V0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L417"}}),f5=new P({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[AEt]},$$scope:{ctx:A}}}),X0=new ee({}),z0=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/modeling_auto.py#L809"}}),W0=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16995/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_16995/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_16995/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_16995/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L389"}}),g5=new P({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[yEt]},$$scope:{ctx:A}}}),H0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L417"}}),A5=new P({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[LEt]},$$scope:{ctx:A}}}),U0=new ee({}),J0=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/modeling_auto.py#L848"}}),K0=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16995/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L389"}}),L5=new P({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[xEt]},$$scope:{ctx:A}}}),Z0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L417"}}),k5=new P({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[$Et]},$$scope:{ctx:A}}}),ey=new ee({}),oy=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/modeling_auto.py#L855"}}),ty=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16995/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L389"}}),R5=new P({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[kEt]},$$scope:{ctx:A}}}),ay=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L417"}}),V5=new P({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[SEt]},$$scope:{ctx:A}}}),ny=new ee({}),sy=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/modeling_auto.py#L878"}}),iy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16995/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L389"}}),z5=new P({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[REt]},$$scope:{ctx:A}}}),dy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L417"}}),Y5=new P({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[BEt]},$$scope:{ctx:A}}}),cy=new ee({}),fy=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/modeling_auto.py#L862"}}),gy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16995/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L389"}}),Z5=new P({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[PEt]},$$scope:{ctx:A}}}),hy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L417"}}),dv=new P({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[IEt]},$$scope:{ctx:A}}}),py=new ee({}),uy=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/modeling_auto.py#L869"}}),by=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16995/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L389"}}),fv=new P({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[qEt]},$$scope:{ctx:A}}}),vy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L417"}}),pv=new P({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[NEt]},$$scope:{ctx:A}}}),Ty=new ee({}),My=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/modeling_auto.py#L887"}}),Cy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16995/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L389"}}),_v=new P({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[jEt]},$$scope:{ctx:A}}}),wy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L417"}}),Ev=new P({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[DEt]},$$scope:{ctx:A}}}),Ay=new ee({}),yy=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/modeling_auto.py#L894"}}),xy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16995/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L389"}}),wv=new P({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[GEt]},$$scope:{ctx:A}}}),$y=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L417"}}),$v=new P({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[OEt]},$$scope:{ctx:A}}}),ky=new ee({}),Sy=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/modeling_auto.py#L841"}}),By=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16995/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L389"}}),Sv=new P({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[VEt]},$$scope:{ctx:A}}}),Py=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L417"}}),Pv=new P({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[XEt]},$$scope:{ctx:A}}}),Iy=new ee({}),qy=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/modeling_auto.py#L816"}}),jy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16995/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L389"}}),qv=new P({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[zEt]},$$scope:{ctx:A}}}),Dy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L417"}}),Dv=new P({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[QEt]},$$scope:{ctx:A}}}),Gy=new ee({}),Oy=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/modeling_auto.py#L823"}}),Xy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16995/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L389"}}),Ov=new P({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[WEt]},$$scope:{ctx:A}}}),zy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L417"}}),Hv=new P({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[HEt]},$$scope:{ctx:A}}}),Qy=new ee({}),Wy=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/modeling_auto.py#L832"}}),Uy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16995/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L389"}}),Jv=new P({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[UEt]},$$scope:{ctx:A}}}),Jy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L417"}}),Zv=new P({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[JEt]},$$scope:{ctx:A}}}),Yy=new ee({}),Ky=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/modeling_tf_auto.py#L381"}}),eL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16995/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_16995/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L389"}}),oF=new P({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[YEt]},$$scope:{ctx:A}}}),oL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L417"}}),zF=new P({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[KEt]},$$scope:{ctx:A}}}),rL=new ee({}),tL=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/modeling_tf_auto.py#L388"}}),nL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16995/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L389"}}),WF=new P({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[ZEt]},$$scope:{ctx:A}}}),sL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L417"}}),_6=new P({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[eCt]},$$scope:{ctx:A}}}),lL=new ee({}),iL=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/modeling_tf_auto.py#L403"}}),cL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16995/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L389"}}),v6=new P({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[oCt]},$$scope:{ctx:A}}}),fL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L417"}}),S6=new P({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[rCt]},$$scope:{ctx:A}}}),mL=new ee({}),gL=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/modeling_tf_auto.py#L410"}}),pL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16995/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L389"}}),B6=new P({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[tCt]},$$scope:{ctx:A}}}),uL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L417"}}),q6=new P({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[aCt]},$$scope:{ctx:A}}}),bL=new ee({}),vL=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/modeling_tf_auto.py#L426"}}),TL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16995/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L389"}}),j6=new P({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[nCt]},$$scope:{ctx:A}}}),ML=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L417"}}),sT=new P({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[sCt]},$$scope:{ctx:A}}}),EL=new ee({}),CL=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/modeling_tf_auto.py#L433"}}),AL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16995/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L389"}}),iT=new P({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[lCt]},$$scope:{ctx:A}}}),yL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L417"}}),vT=new P({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[iCt]},$$scope:{ctx:A}}}),LL=new ee({}),xL=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/modeling_tf_auto.py#L442"}}),kL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16995/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L389"}}),TT=new P({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[dCt]},$$scope:{ctx:A}}}),SL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L417"}}),HT=new P({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[cCt]},$$scope:{ctx:A}}}),RL=new ee({}),BL=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/modeling_tf_auto.py#L478"}}),IL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16995/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L389"}}),JT=new P({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[fCt]},$$scope:{ctx:A}}}),qL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L417"}}),hM=new P({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[mCt]},$$scope:{ctx:A}}}),NL=new ee({}),jL=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/modeling_tf_auto.py#L458"}}),GL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16995/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L389"}}),uM=new P({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[gCt]},$$scope:{ctx:A}}}),OL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L417"}}),bM=new P({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[hCt]},$$scope:{ctx:A}}}),VL=new ee({}),XL=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/modeling_tf_auto.py#L469"}}),QL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16995/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L389"}}),FM=new P({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[pCt]},$$scope:{ctx:A}}}),WL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L417"}}),GM=new P({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[uCt]},$$scope:{ctx:A}}}),HL=new ee({}),UL=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/modeling_tf_auto.py#L451"}}),YL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16995/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L389"}}),VM=new P({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[_Ct]},$$scope:{ctx:A}}}),KL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L417"}}),c4=new P({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[bCt]},$$scope:{ctx:A}}}),ZL=new ee({}),e8=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/modeling_tf_auto.py#L419"}}),r8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16995/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L389"}}),m4=new P({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[vCt]},$$scope:{ctx:A}}}),t8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L417"}}),h4=new P({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[FCt]},$$scope:{ctx:A}}}),a8=new ee({}),n8=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/modeling_tf_auto.py#L494"}}),l8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16995/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L389"}}),u4=new P({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[TCt]},$$scope:{ctx:A}}}),i8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L417"}}),b4=new P({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[MCt]},$$scope:{ctx:A}}}),d8=new ee({}),c8=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/modeling_flax_auto.py#L241"}}),m8=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16995/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L389"}}),F4=new P({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[ECt]},$$scope:{ctx:A}}}),g8=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L417"}}),Q4=new P({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[CCt]},$$scope:{ctx:A}}}),h8=new ee({}),p8=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/modeling_flax_auto.py#L255"}}),_8=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16995/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/bert#transformers.FlaxBertForCausalLM">FlaxBertForCausalLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM">FlaxBigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/electra#transformers.FlaxElectraForCausalLM">FlaxElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM">FlaxRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L389"}}),H4=new P({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[wCt]},$$scope:{ctx:A}}}),b8=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L417"}}),aE=new P({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[ACt]},$$scope:{ctx:A}}}),v8=new ee({}),F8=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/modeling_flax_auto.py#L248"}}),M8=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16995/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L389"}}),sE=new P({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[yCt]},$$scope:{ctx:A}}}),E8=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L417"}}),vE=new P({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[LCt]},$$scope:{ctx:A}}}),C8=new ee({}),w8=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/modeling_flax_auto.py#L262"}}),y8=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16995/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L389"}}),TE=new P({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[xCt]},$$scope:{ctx:A}}}),L8=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L417"}}),SE=new P({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[$Ct]},$$scope:{ctx:A}}}),x8=new ee({}),$8=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/modeling_flax_auto.py#L269"}}),S8=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16995/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L389"}}),BE=new P({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[kCt]},$$scope:{ctx:A}}}),R8=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L417"}}),XE=new P({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[SCt]},$$scope:{ctx:A}}}),B8=new ee({}),P8=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/modeling_flax_auto.py#L278"}}),q8=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16995/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L389"}}),QE=new P({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[RCt]},$$scope:{ctx:A}}}),N8=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L417"}}),tC=new P({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[BCt]},$$scope:{ctx:A}}}),j8=new ee({}),D8=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/modeling_flax_auto.py#L287"}}),O8=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16995/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L389"}}),nC=new P({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[PCt]},$$scope:{ctx:A}}}),V8=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L417"}}),uC=new P({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[ICt]},$$scope:{ctx:A}}}),X8=new ee({}),z8=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/modeling_flax_auto.py#L294"}}),W8=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16995/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L389"}}),bC=new P({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[qCt]},$$scope:{ctx:A}}}),H8=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L417"}}),yC=new P({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[NCt]},$$scope:{ctx:A}}}),U8=new ee({}),J8=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/modeling_flax_auto.py#L303"}}),K8=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16995/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L389"}}),xC=new P({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[jCt]},$$scope:{ctx:A}}}),Z8=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L417"}}),NC=new P({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[DCt]},$$scope:{ctx:A}}}),ex=new ee({}),ox=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/modeling_flax_auto.py#L310"}}),tx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16995/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L389"}}),DC=new P({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[GCt]},$$scope:{ctx:A}}}),ax=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L417"}}),OC=new P({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[OCt]},$$scope:{ctx:A}}}),nx=new ee({}),sx=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/modeling_flax_auto.py#L319"}}),ix=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16995/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L389"}}),XC=new P({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[VCt]},$$scope:{ctx:A}}}),dx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L417"}}),WC=new P({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[XCt]},$$scope:{ctx:A}}}),fx=new ee({}),mx=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/modeling_flax_auto.py#L328"}}),hx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16995/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L389"}}),UC=new P({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[zCt]},$$scope:{ctx:A}}}),px=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L417"}}),YC=new P({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[QCt]},$$scope:{ctx:A}}}),{c(){g=a("meta"),v=l(),p=a("h1"),m=a("a"),u=a("span"),F(d.$$.fragment),h=l(),Mo=a("span"),oi=o("Auto Classes"),of=l(),Kr=a("p"),ri=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),ti=a("code"),gA=o("from_pretrained()"),rf=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),qe=l(),Xe=a("p"),ai=o("Instantiating one of "),Mn=a("a"),hA=o("AutoConfig"),En=o(", "),Cn=a("a"),pA=o("AutoModel"),ni=o(`, and
`),wn=a("a"),uA=o("AutoTokenizer"),si=o(" will directly create a class of the relevant architecture. For instance"),tf=l(),F(va.$$.fragment),ze=l(),Ae=a("p"),L7=o("will create a model that is an instance of "),li=a("a"),x7=o("BertModel"),$7=o("."),Eo=l(),Fa=a("p"),k7=o("There is one class of "),af=a("code"),S7=o("AutoModel"),Uqe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),VRe=l(),ii=a("h2"),nf=a("a"),XK=a("span"),F(_A.$$.fragment),Jqe=l(),zK=a("span"),Yqe=o("Extending the Auto Classes"),XRe=l(),An=a("p"),Kqe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),QK=a("code"),Zqe=o("NewModel"),eNe=o(", make sure you have a "),WK=a("code"),oNe=o("NewModelConfig"),rNe=o(` then you can add those to the auto
classes like this:`),zRe=l(),F(bA.$$.fragment),QRe=l(),R7=a("p"),tNe=o("You will then be able to use the auto classes like you would usually do!"),WRe=l(),F(sf.$$.fragment),HRe=l(),di=a("h2"),lf=a("a"),HK=a("span"),F(vA.$$.fragment),aNe=l(),UK=a("span"),nNe=o("AutoConfig"),URe=l(),Co=a("div"),F(FA.$$.fragment),sNe=l(),TA=a("p"),lNe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),B7=a("a"),iNe=o("from_pretrained()"),dNe=o(" class method."),cNe=l(),MA=a("p"),fNe=o("This class cannot be instantiated directly using "),JK=a("code"),mNe=o("__init__()"),gNe=o(" (throws an error)."),hNe=l(),Mr=a("div"),F(EA.$$.fragment),pNe=l(),YK=a("p"),uNe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),_Ne=l(),ci=a("p"),bNe=o("The configuration class to instantiate is selected based on the "),KK=a("code"),vNe=o("model_type"),FNe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),ZK=a("code"),TNe=o("pretrained_model_name_or_path"),MNe=o(":"),ENe=l(),y=a("ul"),df=a("li"),eZ=a("strong"),CNe=o("albert"),wNe=o(" \u2014 "),P7=a("a"),ANe=o("AlbertConfig"),yNe=o(" (ALBERT model)"),LNe=l(),cf=a("li"),oZ=a("strong"),xNe=o("bart"),$Ne=o(" \u2014 "),I7=a("a"),kNe=o("BartConfig"),SNe=o(" (BART model)"),RNe=l(),ff=a("li"),rZ=a("strong"),BNe=o("beit"),PNe=o(" \u2014 "),q7=a("a"),INe=o("BeitConfig"),qNe=o(" (BEiT model)"),NNe=l(),mf=a("li"),tZ=a("strong"),jNe=o("bert"),DNe=o(" \u2014 "),N7=a("a"),GNe=o("BertConfig"),ONe=o(" (BERT model)"),VNe=l(),gf=a("li"),aZ=a("strong"),XNe=o("bert-generation"),zNe=o(" \u2014 "),j7=a("a"),QNe=o("BertGenerationConfig"),WNe=o(" (Bert Generation model)"),HNe=l(),hf=a("li"),nZ=a("strong"),UNe=o("big_bird"),JNe=o(" \u2014 "),D7=a("a"),YNe=o("BigBirdConfig"),KNe=o(" (BigBird model)"),ZNe=l(),pf=a("li"),sZ=a("strong"),eje=o("bigbird_pegasus"),oje=o(" \u2014 "),G7=a("a"),rje=o("BigBirdPegasusConfig"),tje=o(" (BigBirdPegasus model)"),aje=l(),uf=a("li"),lZ=a("strong"),nje=o("blenderbot"),sje=o(" \u2014 "),O7=a("a"),lje=o("BlenderbotConfig"),ije=o(" (Blenderbot model)"),dje=l(),_f=a("li"),iZ=a("strong"),cje=o("blenderbot-small"),fje=o(" \u2014 "),V7=a("a"),mje=o("BlenderbotSmallConfig"),gje=o(" (BlenderbotSmall model)"),hje=l(),bf=a("li"),dZ=a("strong"),pje=o("camembert"),uje=o(" \u2014 "),X7=a("a"),_je=o("CamembertConfig"),bje=o(" (CamemBERT model)"),vje=l(),vf=a("li"),cZ=a("strong"),Fje=o("canine"),Tje=o(" \u2014 "),z7=a("a"),Mje=o("CanineConfig"),Eje=o(" (Canine model)"),Cje=l(),Ff=a("li"),fZ=a("strong"),wje=o("clip"),Aje=o(" \u2014 "),Q7=a("a"),yje=o("CLIPConfig"),Lje=o(" (CLIP model)"),xje=l(),Tf=a("li"),mZ=a("strong"),$je=o("convbert"),kje=o(" \u2014 "),W7=a("a"),Sje=o("ConvBertConfig"),Rje=o(" (ConvBERT model)"),Bje=l(),Mf=a("li"),gZ=a("strong"),Pje=o("convnext"),Ije=o(" \u2014 "),H7=a("a"),qje=o("ConvNextConfig"),Nje=o(" (ConvNext model)"),jje=l(),Ef=a("li"),hZ=a("strong"),Dje=o("ctrl"),Gje=o(" \u2014 "),U7=a("a"),Oje=o("CTRLConfig"),Vje=o(" (CTRL model)"),Xje=l(),Cf=a("li"),pZ=a("strong"),zje=o("data2vec-audio"),Qje=o(" \u2014 "),J7=a("a"),Wje=o("Data2VecAudioConfig"),Hje=o(" (Data2VecAudio model)"),Uje=l(),wf=a("li"),uZ=a("strong"),Jje=o("data2vec-text"),Yje=o(" \u2014 "),Y7=a("a"),Kje=o("Data2VecTextConfig"),Zje=o(" (Data2VecText model)"),eDe=l(),Af=a("li"),_Z=a("strong"),oDe=o("data2vec-vision"),rDe=o(" \u2014 "),K7=a("a"),tDe=o("Data2VecVisionConfig"),aDe=o(" (Data2VecVision model)"),nDe=l(),yf=a("li"),bZ=a("strong"),sDe=o("deberta"),lDe=o(" \u2014 "),Z7=a("a"),iDe=o("DebertaConfig"),dDe=o(" (DeBERTa model)"),cDe=l(),Lf=a("li"),vZ=a("strong"),fDe=o("deberta-v2"),mDe=o(" \u2014 "),e$=a("a"),gDe=o("DebertaV2Config"),hDe=o(" (DeBERTa-v2 model)"),pDe=l(),xf=a("li"),FZ=a("strong"),uDe=o("decision_transformer"),_De=o(" \u2014 "),o$=a("a"),bDe=o("DecisionTransformerConfig"),vDe=o(" (Decision Transformer model)"),FDe=l(),$f=a("li"),TZ=a("strong"),TDe=o("deit"),MDe=o(" \u2014 "),r$=a("a"),EDe=o("DeiTConfig"),CDe=o(" (DeiT model)"),wDe=l(),kf=a("li"),MZ=a("strong"),ADe=o("detr"),yDe=o(" \u2014 "),t$=a("a"),LDe=o("DetrConfig"),xDe=o(" (DETR model)"),$De=l(),Sf=a("li"),EZ=a("strong"),kDe=o("distilbert"),SDe=o(" \u2014 "),a$=a("a"),RDe=o("DistilBertConfig"),BDe=o(" (DistilBERT model)"),PDe=l(),Rf=a("li"),CZ=a("strong"),IDe=o("dpr"),qDe=o(" \u2014 "),n$=a("a"),NDe=o("DPRConfig"),jDe=o(" (DPR model)"),DDe=l(),Bf=a("li"),wZ=a("strong"),GDe=o("dpt"),ODe=o(" \u2014 "),s$=a("a"),VDe=o("DPTConfig"),XDe=o(" (DPT model)"),zDe=l(),Pf=a("li"),AZ=a("strong"),QDe=o("electra"),WDe=o(" \u2014 "),l$=a("a"),HDe=o("ElectraConfig"),UDe=o(" (ELECTRA model)"),JDe=l(),If=a("li"),yZ=a("strong"),YDe=o("encoder-decoder"),KDe=o(" \u2014 "),i$=a("a"),ZDe=o("EncoderDecoderConfig"),eGe=o(" (Encoder decoder model)"),oGe=l(),qf=a("li"),LZ=a("strong"),rGe=o("flaubert"),tGe=o(" \u2014 "),d$=a("a"),aGe=o("FlaubertConfig"),nGe=o(" (FlauBERT model)"),sGe=l(),Nf=a("li"),xZ=a("strong"),lGe=o("fnet"),iGe=o(" \u2014 "),c$=a("a"),dGe=o("FNetConfig"),cGe=o(" (FNet model)"),fGe=l(),jf=a("li"),$Z=a("strong"),mGe=o("fsmt"),gGe=o(" \u2014 "),f$=a("a"),hGe=o("FSMTConfig"),pGe=o(" (FairSeq Machine-Translation model)"),uGe=l(),Df=a("li"),kZ=a("strong"),_Ge=o("funnel"),bGe=o(" \u2014 "),m$=a("a"),vGe=o("FunnelConfig"),FGe=o(" (Funnel Transformer model)"),TGe=l(),Gf=a("li"),SZ=a("strong"),MGe=o("glpn"),EGe=o(" \u2014 "),g$=a("a"),CGe=o("GLPNConfig"),wGe=o(" (GLPN model)"),AGe=l(),Of=a("li"),RZ=a("strong"),yGe=o("gpt2"),LGe=o(" \u2014 "),h$=a("a"),xGe=o("GPT2Config"),$Ge=o(" (OpenAI GPT-2 model)"),kGe=l(),Vf=a("li"),BZ=a("strong"),SGe=o("gpt_neo"),RGe=o(" \u2014 "),p$=a("a"),BGe=o("GPTNeoConfig"),PGe=o(" (GPT Neo model)"),IGe=l(),Xf=a("li"),PZ=a("strong"),qGe=o("gptj"),NGe=o(" \u2014 "),u$=a("a"),jGe=o("GPTJConfig"),DGe=o(" (GPT-J model)"),GGe=l(),zf=a("li"),IZ=a("strong"),OGe=o("hubert"),VGe=o(" \u2014 "),_$=a("a"),XGe=o("HubertConfig"),zGe=o(" (Hubert model)"),QGe=l(),Qf=a("li"),qZ=a("strong"),WGe=o("ibert"),HGe=o(" \u2014 "),b$=a("a"),UGe=o("IBertConfig"),JGe=o(" (I-BERT model)"),YGe=l(),Wf=a("li"),NZ=a("strong"),KGe=o("imagegpt"),ZGe=o(" \u2014 "),v$=a("a"),eOe=o("ImageGPTConfig"),oOe=o(" (ImageGPT model)"),rOe=l(),Hf=a("li"),jZ=a("strong"),tOe=o("layoutlm"),aOe=o(" \u2014 "),F$=a("a"),nOe=o("LayoutLMConfig"),sOe=o(" (LayoutLM model)"),lOe=l(),Uf=a("li"),DZ=a("strong"),iOe=o("layoutlmv2"),dOe=o(" \u2014 "),T$=a("a"),cOe=o("LayoutLMv2Config"),fOe=o(" (LayoutLMv2 model)"),mOe=l(),Jf=a("li"),GZ=a("strong"),gOe=o("led"),hOe=o(" \u2014 "),M$=a("a"),pOe=o("LEDConfig"),uOe=o(" (LED model)"),_Oe=l(),Yf=a("li"),OZ=a("strong"),bOe=o("longformer"),vOe=o(" \u2014 "),E$=a("a"),FOe=o("LongformerConfig"),TOe=o(" (Longformer model)"),MOe=l(),Kf=a("li"),VZ=a("strong"),EOe=o("luke"),COe=o(" \u2014 "),C$=a("a"),wOe=o("LukeConfig"),AOe=o(" (LUKE model)"),yOe=l(),Zf=a("li"),XZ=a("strong"),LOe=o("lxmert"),xOe=o(" \u2014 "),w$=a("a"),$Oe=o("LxmertConfig"),kOe=o(" (LXMERT model)"),SOe=l(),em=a("li"),zZ=a("strong"),ROe=o("m2m_100"),BOe=o(" \u2014 "),A$=a("a"),POe=o("M2M100Config"),IOe=o(" (M2M100 model)"),qOe=l(),om=a("li"),QZ=a("strong"),NOe=o("marian"),jOe=o(" \u2014 "),y$=a("a"),DOe=o("MarianConfig"),GOe=o(" (Marian model)"),OOe=l(),rm=a("li"),WZ=a("strong"),VOe=o("maskformer"),XOe=o(" \u2014 "),L$=a("a"),zOe=o("MaskFormerConfig"),QOe=o(" (MaskFormer model)"),WOe=l(),tm=a("li"),HZ=a("strong"),HOe=o("mbart"),UOe=o(" \u2014 "),x$=a("a"),JOe=o("MBartConfig"),YOe=o(" (mBART model)"),KOe=l(),am=a("li"),UZ=a("strong"),ZOe=o("megatron-bert"),eVe=o(" \u2014 "),$$=a("a"),oVe=o("MegatronBertConfig"),rVe=o(" (MegatronBert model)"),tVe=l(),nm=a("li"),JZ=a("strong"),aVe=o("mobilebert"),nVe=o(" \u2014 "),k$=a("a"),sVe=o("MobileBertConfig"),lVe=o(" (MobileBERT model)"),iVe=l(),sm=a("li"),YZ=a("strong"),dVe=o("mpnet"),cVe=o(" \u2014 "),S$=a("a"),fVe=o("MPNetConfig"),mVe=o(" (MPNet model)"),gVe=l(),lm=a("li"),KZ=a("strong"),hVe=o("mt5"),pVe=o(" \u2014 "),R$=a("a"),uVe=o("MT5Config"),_Ve=o(" (mT5 model)"),bVe=l(),im=a("li"),ZZ=a("strong"),vVe=o("nystromformer"),FVe=o(" \u2014 "),B$=a("a"),TVe=o("NystromformerConfig"),MVe=o(" (Nystromformer model)"),EVe=l(),dm=a("li"),eee=a("strong"),CVe=o("openai-gpt"),wVe=o(" \u2014 "),P$=a("a"),AVe=o("OpenAIGPTConfig"),yVe=o(" (OpenAI GPT model)"),LVe=l(),cm=a("li"),oee=a("strong"),xVe=o("pegasus"),$Ve=o(" \u2014 "),I$=a("a"),kVe=o("PegasusConfig"),SVe=o(" (Pegasus model)"),RVe=l(),fm=a("li"),ree=a("strong"),BVe=o("perceiver"),PVe=o(" \u2014 "),q$=a("a"),IVe=o("PerceiverConfig"),qVe=o(" (Perceiver model)"),NVe=l(),mm=a("li"),tee=a("strong"),jVe=o("plbart"),DVe=o(" \u2014 "),N$=a("a"),GVe=o("PLBartConfig"),OVe=o(" (PLBart model)"),VVe=l(),gm=a("li"),aee=a("strong"),XVe=o("poolformer"),zVe=o(" \u2014 "),j$=a("a"),QVe=o("PoolFormerConfig"),WVe=o(" (PoolFormer model)"),HVe=l(),hm=a("li"),nee=a("strong"),UVe=o("prophetnet"),JVe=o(" \u2014 "),D$=a("a"),YVe=o("ProphetNetConfig"),KVe=o(" (ProphetNet model)"),ZVe=l(),pm=a("li"),see=a("strong"),eXe=o("qdqbert"),oXe=o(" \u2014 "),G$=a("a"),rXe=o("QDQBertConfig"),tXe=o(" (QDQBert model)"),aXe=l(),um=a("li"),lee=a("strong"),nXe=o("rag"),sXe=o(" \u2014 "),O$=a("a"),lXe=o("RagConfig"),iXe=o(" (RAG model)"),dXe=l(),_m=a("li"),iee=a("strong"),cXe=o("realm"),fXe=o(" \u2014 "),V$=a("a"),mXe=o("RealmConfig"),gXe=o(" (Realm model)"),hXe=l(),bm=a("li"),dee=a("strong"),pXe=o("reformer"),uXe=o(" \u2014 "),X$=a("a"),_Xe=o("ReformerConfig"),bXe=o(" (Reformer model)"),vXe=l(),vm=a("li"),cee=a("strong"),FXe=o("regnet"),TXe=o(" \u2014 "),z$=a("a"),MXe=o("RegNetConfig"),EXe=o(" (RegNet model)"),CXe=l(),Fm=a("li"),fee=a("strong"),wXe=o("rembert"),AXe=o(" \u2014 "),Q$=a("a"),yXe=o("RemBertConfig"),LXe=o(" (RemBERT model)"),xXe=l(),Tm=a("li"),mee=a("strong"),$Xe=o("resnet"),kXe=o(" \u2014 "),W$=a("a"),SXe=o("ResNetConfig"),RXe=o(" (ResNet model)"),BXe=l(),Mm=a("li"),gee=a("strong"),PXe=o("retribert"),IXe=o(" \u2014 "),H$=a("a"),qXe=o("RetriBertConfig"),NXe=o(" (RetriBERT model)"),jXe=l(),Em=a("li"),hee=a("strong"),DXe=o("roberta"),GXe=o(" \u2014 "),U$=a("a"),OXe=o("RobertaConfig"),VXe=o(" (RoBERTa model)"),XXe=l(),Cm=a("li"),pee=a("strong"),zXe=o("roformer"),QXe=o(" \u2014 "),J$=a("a"),WXe=o("RoFormerConfig"),HXe=o(" (RoFormer model)"),UXe=l(),wm=a("li"),uee=a("strong"),JXe=o("segformer"),YXe=o(" \u2014 "),Y$=a("a"),KXe=o("SegformerConfig"),ZXe=o(" (SegFormer model)"),eze=l(),Am=a("li"),_ee=a("strong"),oze=o("sew"),rze=o(" \u2014 "),K$=a("a"),tze=o("SEWConfig"),aze=o(" (SEW model)"),nze=l(),ym=a("li"),bee=a("strong"),sze=o("sew-d"),lze=o(" \u2014 "),Z$=a("a"),ize=o("SEWDConfig"),dze=o(" (SEW-D model)"),cze=l(),Lm=a("li"),vee=a("strong"),fze=o("speech-encoder-decoder"),mze=o(" \u2014 "),ek=a("a"),gze=o("SpeechEncoderDecoderConfig"),hze=o(" (Speech Encoder decoder model)"),pze=l(),xm=a("li"),Fee=a("strong"),uze=o("speech_to_text"),_ze=o(" \u2014 "),ok=a("a"),bze=o("Speech2TextConfig"),vze=o(" (Speech2Text model)"),Fze=l(),$m=a("li"),Tee=a("strong"),Tze=o("speech_to_text_2"),Mze=o(" \u2014 "),rk=a("a"),Eze=o("Speech2Text2Config"),Cze=o(" (Speech2Text2 model)"),wze=l(),km=a("li"),Mee=a("strong"),Aze=o("splinter"),yze=o(" \u2014 "),tk=a("a"),Lze=o("SplinterConfig"),xze=o(" (Splinter model)"),$ze=l(),Sm=a("li"),Eee=a("strong"),kze=o("squeezebert"),Sze=o(" \u2014 "),ak=a("a"),Rze=o("SqueezeBertConfig"),Bze=o(" (SqueezeBERT model)"),Pze=l(),Rm=a("li"),Cee=a("strong"),Ize=o("swin"),qze=o(" \u2014 "),nk=a("a"),Nze=o("SwinConfig"),jze=o(" (Swin model)"),Dze=l(),Bm=a("li"),wee=a("strong"),Gze=o("t5"),Oze=o(" \u2014 "),sk=a("a"),Vze=o("T5Config"),Xze=o(" (T5 model)"),zze=l(),Pm=a("li"),Aee=a("strong"),Qze=o("tapas"),Wze=o(" \u2014 "),lk=a("a"),Hze=o("TapasConfig"),Uze=o(" (TAPAS model)"),Jze=l(),Im=a("li"),yee=a("strong"),Yze=o("tapex"),Kze=o(" \u2014 "),ik=a("a"),Zze=o("BartConfig"),eQe=o(" (TAPEX model)"),oQe=l(),qm=a("li"),Lee=a("strong"),rQe=o("transfo-xl"),tQe=o(" \u2014 "),dk=a("a"),aQe=o("TransfoXLConfig"),nQe=o(" (Transformer-XL model)"),sQe=l(),Nm=a("li"),xee=a("strong"),lQe=o("trocr"),iQe=o(" \u2014 "),ck=a("a"),dQe=o("TrOCRConfig"),cQe=o(" (TrOCR model)"),fQe=l(),jm=a("li"),$ee=a("strong"),mQe=o("unispeech"),gQe=o(" \u2014 "),fk=a("a"),hQe=o("UniSpeechConfig"),pQe=o(" (UniSpeech model)"),uQe=l(),Dm=a("li"),kee=a("strong"),_Qe=o("unispeech-sat"),bQe=o(" \u2014 "),mk=a("a"),vQe=o("UniSpeechSatConfig"),FQe=o(" (UniSpeechSat model)"),TQe=l(),Gm=a("li"),See=a("strong"),MQe=o("van"),EQe=o(" \u2014 "),gk=a("a"),CQe=o("VanConfig"),wQe=o(" (VAN model)"),AQe=l(),Om=a("li"),Ree=a("strong"),yQe=o("vilt"),LQe=o(" \u2014 "),hk=a("a"),xQe=o("ViltConfig"),$Qe=o(" (ViLT model)"),kQe=l(),Vm=a("li"),Bee=a("strong"),SQe=o("vision-encoder-decoder"),RQe=o(" \u2014 "),pk=a("a"),BQe=o("VisionEncoderDecoderConfig"),PQe=o(" (Vision Encoder decoder model)"),IQe=l(),Xm=a("li"),Pee=a("strong"),qQe=o("vision-text-dual-encoder"),NQe=o(" \u2014 "),uk=a("a"),jQe=o("VisionTextDualEncoderConfig"),DQe=o(" (VisionTextDualEncoder model)"),GQe=l(),zm=a("li"),Iee=a("strong"),OQe=o("visual_bert"),VQe=o(" \u2014 "),_k=a("a"),XQe=o("VisualBertConfig"),zQe=o(" (VisualBert model)"),QQe=l(),Qm=a("li"),qee=a("strong"),WQe=o("vit"),HQe=o(" \u2014 "),bk=a("a"),UQe=o("ViTConfig"),JQe=o(" (ViT model)"),YQe=l(),Wm=a("li"),Nee=a("strong"),KQe=o("vit_mae"),ZQe=o(" \u2014 "),vk=a("a"),eWe=o("ViTMAEConfig"),oWe=o(" (ViTMAE model)"),rWe=l(),Hm=a("li"),jee=a("strong"),tWe=o("wav2vec2"),aWe=o(" \u2014 "),Fk=a("a"),nWe=o("Wav2Vec2Config"),sWe=o(" (Wav2Vec2 model)"),lWe=l(),Um=a("li"),Dee=a("strong"),iWe=o("wavlm"),dWe=o(" \u2014 "),Tk=a("a"),cWe=o("WavLMConfig"),fWe=o(" (WavLM model)"),mWe=l(),Jm=a("li"),Gee=a("strong"),gWe=o("xglm"),hWe=o(" \u2014 "),Mk=a("a"),pWe=o("XGLMConfig"),uWe=o(" (XGLM model)"),_We=l(),Ym=a("li"),Oee=a("strong"),bWe=o("xlm"),vWe=o(" \u2014 "),Ek=a("a"),FWe=o("XLMConfig"),TWe=o(" (XLM model)"),MWe=l(),Km=a("li"),Vee=a("strong"),EWe=o("xlm-prophetnet"),CWe=o(" \u2014 "),Ck=a("a"),wWe=o("XLMProphetNetConfig"),AWe=o(" (XLMProphetNet model)"),yWe=l(),Zm=a("li"),Xee=a("strong"),LWe=o("xlm-roberta"),xWe=o(" \u2014 "),wk=a("a"),$We=o("XLMRobertaConfig"),kWe=o(" (XLM-RoBERTa model)"),SWe=l(),eg=a("li"),zee=a("strong"),RWe=o("xlm-roberta-xl"),BWe=o(" \u2014 "),Ak=a("a"),PWe=o("XLMRobertaXLConfig"),IWe=o(" (XLM-RoBERTa-XL model)"),qWe=l(),og=a("li"),Qee=a("strong"),NWe=o("xlnet"),jWe=o(" \u2014 "),yk=a("a"),DWe=o("XLNetConfig"),GWe=o(" (XLNet model)"),OWe=l(),rg=a("li"),Wee=a("strong"),VWe=o("yoso"),XWe=o(" \u2014 "),Lk=a("a"),zWe=o("YosoConfig"),QWe=o(" (YOSO model)"),WWe=l(),F(tg.$$.fragment),HWe=l(),ag=a("div"),F(CA.$$.fragment),UWe=l(),Hee=a("p"),JWe=o("Register a new configuration for this class."),JRe=l(),fi=a("h2"),ng=a("a"),Uee=a("span"),F(wA.$$.fragment),YWe=l(),Jee=a("span"),KWe=o("AutoTokenizer"),YRe=l(),wo=a("div"),F(AA.$$.fragment),ZWe=l(),yA=a("p"),eHe=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),xk=a("a"),oHe=o("AutoTokenizer.from_pretrained()"),rHe=o(" class method."),tHe=l(),LA=a("p"),aHe=o("This class cannot be instantiated directly using "),Yee=a("code"),nHe=o("__init__()"),sHe=o(" (throws an error)."),lHe=l(),Er=a("div"),F(xA.$$.fragment),iHe=l(),Kee=a("p"),dHe=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),cHe=l(),Ta=a("p"),fHe=o("The tokenizer class to instantiate is selected based on the "),Zee=a("code"),mHe=o("model_type"),gHe=o(` property of the config object (either
passed as an argument or loaded from `),eoe=a("code"),hHe=o("pretrained_model_name_or_path"),pHe=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ooe=a("code"),uHe=o("pretrained_model_name_or_path"),_He=o(":"),bHe=l(),k=a("ul"),yn=a("li"),roe=a("strong"),vHe=o("albert"),FHe=o(" \u2014 "),$k=a("a"),THe=o("AlbertTokenizer"),MHe=o(" or "),kk=a("a"),EHe=o("AlbertTokenizerFast"),CHe=o(" (ALBERT model)"),wHe=l(),Ln=a("li"),toe=a("strong"),AHe=o("bart"),yHe=o(" \u2014 "),Sk=a("a"),LHe=o("BartTokenizer"),xHe=o(" or "),Rk=a("a"),$He=o("BartTokenizerFast"),kHe=o(" (BART model)"),SHe=l(),xn=a("li"),aoe=a("strong"),RHe=o("barthez"),BHe=o(" \u2014 "),Bk=a("a"),PHe=o("BarthezTokenizer"),IHe=o(" or "),Pk=a("a"),qHe=o("BarthezTokenizerFast"),NHe=o(" (BARThez model)"),jHe=l(),sg=a("li"),noe=a("strong"),DHe=o("bartpho"),GHe=o(" \u2014 "),Ik=a("a"),OHe=o("BartphoTokenizer"),VHe=o(" (BARTpho model)"),XHe=l(),$n=a("li"),soe=a("strong"),zHe=o("bert"),QHe=o(" \u2014 "),qk=a("a"),WHe=o("BertTokenizer"),HHe=o(" or "),Nk=a("a"),UHe=o("BertTokenizerFast"),JHe=o(" (BERT model)"),YHe=l(),lg=a("li"),loe=a("strong"),KHe=o("bert-generation"),ZHe=o(" \u2014 "),jk=a("a"),eUe=o("BertGenerationTokenizer"),oUe=o(" (Bert Generation model)"),rUe=l(),ig=a("li"),ioe=a("strong"),tUe=o("bert-japanese"),aUe=o(" \u2014 "),Dk=a("a"),nUe=o("BertJapaneseTokenizer"),sUe=o(" (BertJapanese model)"),lUe=l(),dg=a("li"),doe=a("strong"),iUe=o("bertweet"),dUe=o(" \u2014 "),Gk=a("a"),cUe=o("BertweetTokenizer"),fUe=o(" (Bertweet model)"),mUe=l(),kn=a("li"),coe=a("strong"),gUe=o("big_bird"),hUe=o(" \u2014 "),Ok=a("a"),pUe=o("BigBirdTokenizer"),uUe=o(" or "),Vk=a("a"),_Ue=o("BigBirdTokenizerFast"),bUe=o(" (BigBird model)"),vUe=l(),Sn=a("li"),foe=a("strong"),FUe=o("bigbird_pegasus"),TUe=o(" \u2014 "),Xk=a("a"),MUe=o("PegasusTokenizer"),EUe=o(" or "),zk=a("a"),CUe=o("PegasusTokenizerFast"),wUe=o(" (BigBirdPegasus model)"),AUe=l(),Rn=a("li"),moe=a("strong"),yUe=o("blenderbot"),LUe=o(" \u2014 "),Qk=a("a"),xUe=o("BlenderbotTokenizer"),$Ue=o(" or "),Wk=a("a"),kUe=o("BlenderbotTokenizerFast"),SUe=o(" (Blenderbot model)"),RUe=l(),cg=a("li"),goe=a("strong"),BUe=o("blenderbot-small"),PUe=o(" \u2014 "),Hk=a("a"),IUe=o("BlenderbotSmallTokenizer"),qUe=o(" (BlenderbotSmall model)"),NUe=l(),fg=a("li"),hoe=a("strong"),jUe=o("byt5"),DUe=o(" \u2014 "),Uk=a("a"),GUe=o("ByT5Tokenizer"),OUe=o(" (ByT5 model)"),VUe=l(),Bn=a("li"),poe=a("strong"),XUe=o("camembert"),zUe=o(" \u2014 "),Jk=a("a"),QUe=o("CamembertTokenizer"),WUe=o(" or "),Yk=a("a"),HUe=o("CamembertTokenizerFast"),UUe=o(" (CamemBERT model)"),JUe=l(),mg=a("li"),uoe=a("strong"),YUe=o("canine"),KUe=o(" \u2014 "),Kk=a("a"),ZUe=o("CanineTokenizer"),eJe=o(" (Canine model)"),oJe=l(),Pn=a("li"),_oe=a("strong"),rJe=o("clip"),tJe=o(" \u2014 "),Zk=a("a"),aJe=o("CLIPTokenizer"),nJe=o(" or "),eS=a("a"),sJe=o("CLIPTokenizerFast"),lJe=o(" (CLIP model)"),iJe=l(),In=a("li"),boe=a("strong"),dJe=o("convbert"),cJe=o(" \u2014 "),oS=a("a"),fJe=o("ConvBertTokenizer"),mJe=o(" or "),rS=a("a"),gJe=o("ConvBertTokenizerFast"),hJe=o(" (ConvBERT model)"),pJe=l(),qn=a("li"),voe=a("strong"),uJe=o("cpm"),_Je=o(" \u2014 "),tS=a("a"),bJe=o("CpmTokenizer"),vJe=o(" or "),Foe=a("code"),FJe=o("CpmTokenizerFast"),TJe=o(" (CPM model)"),MJe=l(),gg=a("li"),Toe=a("strong"),EJe=o("ctrl"),CJe=o(" \u2014 "),aS=a("a"),wJe=o("CTRLTokenizer"),AJe=o(" (CTRL model)"),yJe=l(),Nn=a("li"),Moe=a("strong"),LJe=o("data2vec-text"),xJe=o(" \u2014 "),nS=a("a"),$Je=o("RobertaTokenizer"),kJe=o(" or "),sS=a("a"),SJe=o("RobertaTokenizerFast"),RJe=o(" (Data2VecText model)"),BJe=l(),jn=a("li"),Eoe=a("strong"),PJe=o("deberta"),IJe=o(" \u2014 "),lS=a("a"),qJe=o("DebertaTokenizer"),NJe=o(" or "),iS=a("a"),jJe=o("DebertaTokenizerFast"),DJe=o(" (DeBERTa model)"),GJe=l(),Dn=a("li"),Coe=a("strong"),OJe=o("deberta-v2"),VJe=o(" \u2014 "),dS=a("a"),XJe=o("DebertaV2Tokenizer"),zJe=o(" or "),cS=a("a"),QJe=o("DebertaV2TokenizerFast"),WJe=o(" (DeBERTa-v2 model)"),HJe=l(),Gn=a("li"),woe=a("strong"),UJe=o("distilbert"),JJe=o(" \u2014 "),fS=a("a"),YJe=o("DistilBertTokenizer"),KJe=o(" or "),mS=a("a"),ZJe=o("DistilBertTokenizerFast"),eYe=o(" (DistilBERT model)"),oYe=l(),On=a("li"),Aoe=a("strong"),rYe=o("dpr"),tYe=o(" \u2014 "),gS=a("a"),aYe=o("DPRQuestionEncoderTokenizer"),nYe=o(" or "),hS=a("a"),sYe=o("DPRQuestionEncoderTokenizerFast"),lYe=o(" (DPR model)"),iYe=l(),Vn=a("li"),yoe=a("strong"),dYe=o("electra"),cYe=o(" \u2014 "),pS=a("a"),fYe=o("ElectraTokenizer"),mYe=o(" or "),uS=a("a"),gYe=o("ElectraTokenizerFast"),hYe=o(" (ELECTRA model)"),pYe=l(),hg=a("li"),Loe=a("strong"),uYe=o("flaubert"),_Ye=o(" \u2014 "),_S=a("a"),bYe=o("FlaubertTokenizer"),vYe=o(" (FlauBERT model)"),FYe=l(),Xn=a("li"),xoe=a("strong"),TYe=o("fnet"),MYe=o(" \u2014 "),bS=a("a"),EYe=o("FNetTokenizer"),CYe=o(" or "),vS=a("a"),wYe=o("FNetTokenizerFast"),AYe=o(" (FNet model)"),yYe=l(),pg=a("li"),$oe=a("strong"),LYe=o("fsmt"),xYe=o(" \u2014 "),FS=a("a"),$Ye=o("FSMTTokenizer"),kYe=o(" (FairSeq Machine-Translation model)"),SYe=l(),zn=a("li"),koe=a("strong"),RYe=o("funnel"),BYe=o(" \u2014 "),TS=a("a"),PYe=o("FunnelTokenizer"),IYe=o(" or "),MS=a("a"),qYe=o("FunnelTokenizerFast"),NYe=o(" (Funnel Transformer model)"),jYe=l(),Qn=a("li"),Soe=a("strong"),DYe=o("gpt2"),GYe=o(" \u2014 "),ES=a("a"),OYe=o("GPT2Tokenizer"),VYe=o(" or "),CS=a("a"),XYe=o("GPT2TokenizerFast"),zYe=o(" (OpenAI GPT-2 model)"),QYe=l(),Wn=a("li"),Roe=a("strong"),WYe=o("gpt_neo"),HYe=o(" \u2014 "),wS=a("a"),UYe=o("GPT2Tokenizer"),JYe=o(" or "),AS=a("a"),YYe=o("GPT2TokenizerFast"),KYe=o(" (GPT Neo model)"),ZYe=l(),Hn=a("li"),Boe=a("strong"),eKe=o("gptj"),oKe=o(" \u2014 "),yS=a("a"),rKe=o("GPT2Tokenizer"),tKe=o(" or "),LS=a("a"),aKe=o("GPT2TokenizerFast"),nKe=o(" (GPT-J model)"),sKe=l(),Un=a("li"),Poe=a("strong"),lKe=o("herbert"),iKe=o(" \u2014 "),xS=a("a"),dKe=o("HerbertTokenizer"),cKe=o(" or "),$S=a("a"),fKe=o("HerbertTokenizerFast"),mKe=o(" (HerBERT model)"),gKe=l(),ug=a("li"),Ioe=a("strong"),hKe=o("hubert"),pKe=o(" \u2014 "),kS=a("a"),uKe=o("Wav2Vec2CTCTokenizer"),_Ke=o(" (Hubert model)"),bKe=l(),Jn=a("li"),qoe=a("strong"),vKe=o("ibert"),FKe=o(" \u2014 "),SS=a("a"),TKe=o("RobertaTokenizer"),MKe=o(" or "),RS=a("a"),EKe=o("RobertaTokenizerFast"),CKe=o(" (I-BERT model)"),wKe=l(),Yn=a("li"),Noe=a("strong"),AKe=o("layoutlm"),yKe=o(" \u2014 "),BS=a("a"),LKe=o("LayoutLMTokenizer"),xKe=o(" or "),PS=a("a"),$Ke=o("LayoutLMTokenizerFast"),kKe=o(" (LayoutLM model)"),SKe=l(),Kn=a("li"),joe=a("strong"),RKe=o("layoutlmv2"),BKe=o(" \u2014 "),IS=a("a"),PKe=o("LayoutLMv2Tokenizer"),IKe=o(" or "),qS=a("a"),qKe=o("LayoutLMv2TokenizerFast"),NKe=o(" (LayoutLMv2 model)"),jKe=l(),Zn=a("li"),Doe=a("strong"),DKe=o("layoutxlm"),GKe=o(" \u2014 "),NS=a("a"),OKe=o("LayoutXLMTokenizer"),VKe=o(" or "),jS=a("a"),XKe=o("LayoutXLMTokenizerFast"),zKe=o(" (LayoutXLM model)"),QKe=l(),es=a("li"),Goe=a("strong"),WKe=o("led"),HKe=o(" \u2014 "),DS=a("a"),UKe=o("LEDTokenizer"),JKe=o(" or "),GS=a("a"),YKe=o("LEDTokenizerFast"),KKe=o(" (LED model)"),ZKe=l(),os=a("li"),Ooe=a("strong"),eZe=o("longformer"),oZe=o(" \u2014 "),OS=a("a"),rZe=o("LongformerTokenizer"),tZe=o(" or "),VS=a("a"),aZe=o("LongformerTokenizerFast"),nZe=o(" (Longformer model)"),sZe=l(),_g=a("li"),Voe=a("strong"),lZe=o("luke"),iZe=o(" \u2014 "),XS=a("a"),dZe=o("LukeTokenizer"),cZe=o(" (LUKE model)"),fZe=l(),rs=a("li"),Xoe=a("strong"),mZe=o("lxmert"),gZe=o(" \u2014 "),zS=a("a"),hZe=o("LxmertTokenizer"),pZe=o(" or "),QS=a("a"),uZe=o("LxmertTokenizerFast"),_Ze=o(" (LXMERT model)"),bZe=l(),bg=a("li"),zoe=a("strong"),vZe=o("m2m_100"),FZe=o(" \u2014 "),WS=a("a"),TZe=o("M2M100Tokenizer"),MZe=o(" (M2M100 model)"),EZe=l(),vg=a("li"),Qoe=a("strong"),CZe=o("marian"),wZe=o(" \u2014 "),HS=a("a"),AZe=o("MarianTokenizer"),yZe=o(" (Marian model)"),LZe=l(),ts=a("li"),Woe=a("strong"),xZe=o("mbart"),$Ze=o(" \u2014 "),US=a("a"),kZe=o("MBartTokenizer"),SZe=o(" or "),JS=a("a"),RZe=o("MBartTokenizerFast"),BZe=o(" (mBART model)"),PZe=l(),as=a("li"),Hoe=a("strong"),IZe=o("mbart50"),qZe=o(" \u2014 "),YS=a("a"),NZe=o("MBart50Tokenizer"),jZe=o(" or "),KS=a("a"),DZe=o("MBart50TokenizerFast"),GZe=o(" (mBART-50 model)"),OZe=l(),ns=a("li"),Uoe=a("strong"),VZe=o("megatron-bert"),XZe=o(" \u2014 "),ZS=a("a"),zZe=o("BertTokenizer"),QZe=o(" or "),eR=a("a"),WZe=o("BertTokenizerFast"),HZe=o(" (MegatronBert model)"),UZe=l(),Fg=a("li"),Joe=a("strong"),JZe=o("mluke"),YZe=o(" \u2014 "),oR=a("a"),KZe=o("MLukeTokenizer"),ZZe=o(" (mLUKE model)"),eeo=l(),ss=a("li"),Yoe=a("strong"),oeo=o("mobilebert"),reo=o(" \u2014 "),rR=a("a"),teo=o("MobileBertTokenizer"),aeo=o(" or "),tR=a("a"),neo=o("MobileBertTokenizerFast"),seo=o(" (MobileBERT model)"),leo=l(),ls=a("li"),Koe=a("strong"),ieo=o("mpnet"),deo=o(" \u2014 "),aR=a("a"),ceo=o("MPNetTokenizer"),feo=o(" or "),nR=a("a"),meo=o("MPNetTokenizerFast"),geo=o(" (MPNet model)"),heo=l(),is=a("li"),Zoe=a("strong"),peo=o("mt5"),ueo=o(" \u2014 "),sR=a("a"),_eo=o("MT5Tokenizer"),beo=o(" or "),lR=a("a"),veo=o("MT5TokenizerFast"),Feo=o(" (mT5 model)"),Teo=l(),ds=a("li"),ere=a("strong"),Meo=o("nystromformer"),Eeo=o(" \u2014 "),iR=a("a"),Ceo=o("AlbertTokenizer"),weo=o(" or "),dR=a("a"),Aeo=o("AlbertTokenizerFast"),yeo=o(" (Nystromformer model)"),Leo=l(),cs=a("li"),ore=a("strong"),xeo=o("openai-gpt"),$eo=o(" \u2014 "),cR=a("a"),keo=o("OpenAIGPTTokenizer"),Seo=o(" or "),fR=a("a"),Reo=o("OpenAIGPTTokenizerFast"),Beo=o(" (OpenAI GPT model)"),Peo=l(),fs=a("li"),rre=a("strong"),Ieo=o("pegasus"),qeo=o(" \u2014 "),mR=a("a"),Neo=o("PegasusTokenizer"),jeo=o(" or "),gR=a("a"),Deo=o("PegasusTokenizerFast"),Geo=o(" (Pegasus model)"),Oeo=l(),Tg=a("li"),tre=a("strong"),Veo=o("perceiver"),Xeo=o(" \u2014 "),hR=a("a"),zeo=o("PerceiverTokenizer"),Qeo=o(" (Perceiver model)"),Weo=l(),Mg=a("li"),are=a("strong"),Heo=o("phobert"),Ueo=o(" \u2014 "),pR=a("a"),Jeo=o("PhobertTokenizer"),Yeo=o(" (PhoBERT model)"),Keo=l(),Eg=a("li"),nre=a("strong"),Zeo=o("plbart"),eoo=o(" \u2014 "),uR=a("a"),ooo=o("PLBartTokenizer"),roo=o(" (PLBart model)"),too=l(),Cg=a("li"),sre=a("strong"),aoo=o("prophetnet"),noo=o(" \u2014 "),_R=a("a"),soo=o("ProphetNetTokenizer"),loo=o(" (ProphetNet model)"),ioo=l(),ms=a("li"),lre=a("strong"),doo=o("qdqbert"),coo=o(" \u2014 "),bR=a("a"),foo=o("BertTokenizer"),moo=o(" or "),vR=a("a"),goo=o("BertTokenizerFast"),hoo=o(" (QDQBert model)"),poo=l(),wg=a("li"),ire=a("strong"),uoo=o("rag"),_oo=o(" \u2014 "),FR=a("a"),boo=o("RagTokenizer"),voo=o(" (RAG model)"),Foo=l(),gs=a("li"),dre=a("strong"),Too=o("realm"),Moo=o(" \u2014 "),TR=a("a"),Eoo=o("RealmTokenizer"),Coo=o(" or "),MR=a("a"),woo=o("RealmTokenizerFast"),Aoo=o(" (Realm model)"),yoo=l(),hs=a("li"),cre=a("strong"),Loo=o("reformer"),xoo=o(" \u2014 "),ER=a("a"),$oo=o("ReformerTokenizer"),koo=o(" or "),CR=a("a"),Soo=o("ReformerTokenizerFast"),Roo=o(" (Reformer model)"),Boo=l(),ps=a("li"),fre=a("strong"),Poo=o("rembert"),Ioo=o(" \u2014 "),wR=a("a"),qoo=o("RemBertTokenizer"),Noo=o(" or "),AR=a("a"),joo=o("RemBertTokenizerFast"),Doo=o(" (RemBERT model)"),Goo=l(),us=a("li"),mre=a("strong"),Ooo=o("retribert"),Voo=o(" \u2014 "),yR=a("a"),Xoo=o("RetriBertTokenizer"),zoo=o(" or "),LR=a("a"),Qoo=o("RetriBertTokenizerFast"),Woo=o(" (RetriBERT model)"),Hoo=l(),_s=a("li"),gre=a("strong"),Uoo=o("roberta"),Joo=o(" \u2014 "),xR=a("a"),Yoo=o("RobertaTokenizer"),Koo=o(" or "),$R=a("a"),Zoo=o("RobertaTokenizerFast"),ero=o(" (RoBERTa model)"),oro=l(),bs=a("li"),hre=a("strong"),rro=o("roformer"),tro=o(" \u2014 "),kR=a("a"),aro=o("RoFormerTokenizer"),nro=o(" or "),SR=a("a"),sro=o("RoFormerTokenizerFast"),lro=o(" (RoFormer model)"),iro=l(),Ag=a("li"),pre=a("strong"),dro=o("speech_to_text"),cro=o(" \u2014 "),RR=a("a"),fro=o("Speech2TextTokenizer"),mro=o(" (Speech2Text model)"),gro=l(),yg=a("li"),ure=a("strong"),hro=o("speech_to_text_2"),pro=o(" \u2014 "),BR=a("a"),uro=o("Speech2Text2Tokenizer"),_ro=o(" (Speech2Text2 model)"),bro=l(),vs=a("li"),_re=a("strong"),vro=o("splinter"),Fro=o(" \u2014 "),PR=a("a"),Tro=o("SplinterTokenizer"),Mro=o(" or "),IR=a("a"),Ero=o("SplinterTokenizerFast"),Cro=o(" (Splinter model)"),wro=l(),Fs=a("li"),bre=a("strong"),Aro=o("squeezebert"),yro=o(" \u2014 "),qR=a("a"),Lro=o("SqueezeBertTokenizer"),xro=o(" or "),NR=a("a"),$ro=o("SqueezeBertTokenizerFast"),kro=o(" (SqueezeBERT model)"),Sro=l(),Ts=a("li"),vre=a("strong"),Rro=o("t5"),Bro=o(" \u2014 "),jR=a("a"),Pro=o("T5Tokenizer"),Iro=o(" or "),DR=a("a"),qro=o("T5TokenizerFast"),Nro=o(" (T5 model)"),jro=l(),Lg=a("li"),Fre=a("strong"),Dro=o("tapas"),Gro=o(" \u2014 "),GR=a("a"),Oro=o("TapasTokenizer"),Vro=o(" (TAPAS model)"),Xro=l(),xg=a("li"),Tre=a("strong"),zro=o("tapex"),Qro=o(" \u2014 "),OR=a("a"),Wro=o("TapexTokenizer"),Hro=o(" (TAPEX model)"),Uro=l(),$g=a("li"),Mre=a("strong"),Jro=o("transfo-xl"),Yro=o(" \u2014 "),VR=a("a"),Kro=o("TransfoXLTokenizer"),Zro=o(" (Transformer-XL model)"),eto=l(),Ms=a("li"),Ere=a("strong"),oto=o("visual_bert"),rto=o(" \u2014 "),XR=a("a"),tto=o("BertTokenizer"),ato=o(" or "),zR=a("a"),nto=o("BertTokenizerFast"),sto=o(" (VisualBert model)"),lto=l(),kg=a("li"),Cre=a("strong"),ito=o("wav2vec2"),dto=o(" \u2014 "),QR=a("a"),cto=o("Wav2Vec2CTCTokenizer"),fto=o(" (Wav2Vec2 model)"),mto=l(),Sg=a("li"),wre=a("strong"),gto=o("wav2vec2_phoneme"),hto=o(" \u2014 "),WR=a("a"),pto=o("Wav2Vec2PhonemeCTCTokenizer"),uto=o(" (Wav2Vec2Phoneme model)"),_to=l(),Es=a("li"),Are=a("strong"),bto=o("xglm"),vto=o(" \u2014 "),HR=a("a"),Fto=o("XGLMTokenizer"),Tto=o(" or "),UR=a("a"),Mto=o("XGLMTokenizerFast"),Eto=o(" (XGLM model)"),Cto=l(),Rg=a("li"),yre=a("strong"),wto=o("xlm"),Ato=o(" \u2014 "),JR=a("a"),yto=o("XLMTokenizer"),Lto=o(" (XLM model)"),xto=l(),Bg=a("li"),Lre=a("strong"),$to=o("xlm-prophetnet"),kto=o(" \u2014 "),YR=a("a"),Sto=o("XLMProphetNetTokenizer"),Rto=o(" (XLMProphetNet model)"),Bto=l(),Cs=a("li"),xre=a("strong"),Pto=o("xlm-roberta"),Ito=o(" \u2014 "),KR=a("a"),qto=o("XLMRobertaTokenizer"),Nto=o(" or "),ZR=a("a"),jto=o("XLMRobertaTokenizerFast"),Dto=o(" (XLM-RoBERTa model)"),Gto=l(),ws=a("li"),$re=a("strong"),Oto=o("xlm-roberta-xl"),Vto=o(" \u2014 "),eB=a("a"),Xto=o("RobertaTokenizer"),zto=o(" or "),oB=a("a"),Qto=o("RobertaTokenizerFast"),Wto=o(" (XLM-RoBERTa-XL model)"),Hto=l(),As=a("li"),kre=a("strong"),Uto=o("xlnet"),Jto=o(" \u2014 "),rB=a("a"),Yto=o("XLNetTokenizer"),Kto=o(" or "),tB=a("a"),Zto=o("XLNetTokenizerFast"),eao=o(" (XLNet model)"),oao=l(),ys=a("li"),Sre=a("strong"),rao=o("yoso"),tao=o(" \u2014 "),aB=a("a"),aao=o("AlbertTokenizer"),nao=o(" or "),nB=a("a"),sao=o("AlbertTokenizerFast"),lao=o(" (YOSO model)"),iao=l(),F(Pg.$$.fragment),dao=l(),Ig=a("div"),F($A.$$.fragment),cao=l(),Rre=a("p"),fao=o("Register a new tokenizer in this mapping."),KRe=l(),mi=a("h2"),qg=a("a"),Bre=a("span"),F(kA.$$.fragment),mao=l(),Pre=a("span"),gao=o("AutoFeatureExtractor"),ZRe=l(),Ao=a("div"),F(SA.$$.fragment),hao=l(),RA=a("p"),pao=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),sB=a("a"),uao=o("AutoFeatureExtractor.from_pretrained()"),_ao=o(" class method."),bao=l(),BA=a("p"),vao=o("This class cannot be instantiated directly using "),Ire=a("code"),Fao=o("__init__()"),Tao=o(" (throws an error)."),Mao=l(),Qe=a("div"),F(PA.$$.fragment),Eao=l(),qre=a("p"),Cao=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),wao=l(),Ma=a("p"),Aao=o("The feature extractor class to instantiate is selected based on the "),Nre=a("code"),yao=o("model_type"),Lao=o(` property of the config object
(either passed as an argument or loaded from `),jre=a("code"),xao=o("pretrained_model_name_or_path"),$ao=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Dre=a("code"),kao=o("pretrained_model_name_or_path"),Sao=o(":"),Rao=l(),ae=a("ul"),Ng=a("li"),Gre=a("strong"),Bao=o("beit"),Pao=o(" \u2014 "),lB=a("a"),Iao=o("BeitFeatureExtractor"),qao=o(" (BEiT model)"),Nao=l(),jg=a("li"),Ore=a("strong"),jao=o("clip"),Dao=o(" \u2014 "),iB=a("a"),Gao=o("CLIPFeatureExtractor"),Oao=o(" (CLIP model)"),Vao=l(),Dg=a("li"),Vre=a("strong"),Xao=o("convnext"),zao=o(" \u2014 "),dB=a("a"),Qao=o("ConvNextFeatureExtractor"),Wao=o(" (ConvNext model)"),Hao=l(),Gg=a("li"),Xre=a("strong"),Uao=o("data2vec-audio"),Jao=o(" \u2014 "),cB=a("a"),Yao=o("Wav2Vec2FeatureExtractor"),Kao=o(" (Data2VecAudio model)"),Zao=l(),Og=a("li"),zre=a("strong"),eno=o("data2vec-vision"),ono=o(" \u2014 "),fB=a("a"),rno=o("BeitFeatureExtractor"),tno=o(" (Data2VecVision model)"),ano=l(),Vg=a("li"),Qre=a("strong"),nno=o("deit"),sno=o(" \u2014 "),mB=a("a"),lno=o("DeiTFeatureExtractor"),ino=o(" (DeiT model)"),dno=l(),Xg=a("li"),Wre=a("strong"),cno=o("detr"),fno=o(" \u2014 "),gB=a("a"),mno=o("DetrFeatureExtractor"),gno=o(" (DETR model)"),hno=l(),zg=a("li"),Hre=a("strong"),pno=o("dpt"),uno=o(" \u2014 "),hB=a("a"),_no=o("DPTFeatureExtractor"),bno=o(" (DPT model)"),vno=l(),Qg=a("li"),Ure=a("strong"),Fno=o("glpn"),Tno=o(" \u2014 "),pB=a("a"),Mno=o("GLPNFeatureExtractor"),Eno=o(" (GLPN model)"),Cno=l(),Wg=a("li"),Jre=a("strong"),wno=o("hubert"),Ano=o(" \u2014 "),uB=a("a"),yno=o("Wav2Vec2FeatureExtractor"),Lno=o(" (Hubert model)"),xno=l(),Hg=a("li"),Yre=a("strong"),$no=o("layoutlmv2"),kno=o(" \u2014 "),_B=a("a"),Sno=o("LayoutLMv2FeatureExtractor"),Rno=o(" (LayoutLMv2 model)"),Bno=l(),Ug=a("li"),Kre=a("strong"),Pno=o("maskformer"),Ino=o(" \u2014 "),bB=a("a"),qno=o("MaskFormerFeatureExtractor"),Nno=o(" (MaskFormer model)"),jno=l(),Jg=a("li"),Zre=a("strong"),Dno=o("perceiver"),Gno=o(" \u2014 "),vB=a("a"),Ono=o("PerceiverFeatureExtractor"),Vno=o(" (Perceiver model)"),Xno=l(),Yg=a("li"),ete=a("strong"),zno=o("poolformer"),Qno=o(" \u2014 "),FB=a("a"),Wno=o("PoolFormerFeatureExtractor"),Hno=o(" (PoolFormer model)"),Uno=l(),Kg=a("li"),ote=a("strong"),Jno=o("regnet"),Yno=o(" \u2014 "),TB=a("a"),Kno=o("ConvNextFeatureExtractor"),Zno=o(" (RegNet model)"),eso=l(),Zg=a("li"),rte=a("strong"),oso=o("resnet"),rso=o(" \u2014 "),MB=a("a"),tso=o("ConvNextFeatureExtractor"),aso=o(" (ResNet model)"),nso=l(),eh=a("li"),tte=a("strong"),sso=o("segformer"),lso=o(" \u2014 "),EB=a("a"),iso=o("SegformerFeatureExtractor"),dso=o(" (SegFormer model)"),cso=l(),oh=a("li"),ate=a("strong"),fso=o("speech_to_text"),mso=o(" \u2014 "),CB=a("a"),gso=o("Speech2TextFeatureExtractor"),hso=o(" (Speech2Text model)"),pso=l(),rh=a("li"),nte=a("strong"),uso=o("swin"),_so=o(" \u2014 "),wB=a("a"),bso=o("ViTFeatureExtractor"),vso=o(" (Swin model)"),Fso=l(),th=a("li"),ste=a("strong"),Tso=o("van"),Mso=o(" \u2014 "),AB=a("a"),Eso=o("ConvNextFeatureExtractor"),Cso=o(" (VAN model)"),wso=l(),ah=a("li"),lte=a("strong"),Aso=o("vit"),yso=o(" \u2014 "),yB=a("a"),Lso=o("ViTFeatureExtractor"),xso=o(" (ViT model)"),$so=l(),nh=a("li"),ite=a("strong"),kso=o("vit_mae"),Sso=o(" \u2014 "),LB=a("a"),Rso=o("ViTFeatureExtractor"),Bso=o(" (ViTMAE model)"),Pso=l(),sh=a("li"),dte=a("strong"),Iso=o("wav2vec2"),qso=o(" \u2014 "),xB=a("a"),Nso=o("Wav2Vec2FeatureExtractor"),jso=o(" (Wav2Vec2 model)"),Dso=l(),F(lh.$$.fragment),Gso=l(),F(ih.$$.fragment),Oso=l(),dh=a("div"),F(IA.$$.fragment),Vso=l(),cte=a("p"),Xso=o("Register a new feature extractor for this class."),eBe=l(),gi=a("h2"),ch=a("a"),fte=a("span"),F(qA.$$.fragment),zso=l(),mte=a("span"),Qso=o("AutoProcessor"),oBe=l(),yo=a("div"),F(NA.$$.fragment),Wso=l(),jA=a("p"),Hso=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),$B=a("a"),Uso=o("AutoProcessor.from_pretrained()"),Jso=o(" class method."),Yso=l(),DA=a("p"),Kso=o("This class cannot be instantiated directly using "),gte=a("code"),Zso=o("__init__()"),elo=o(" (throws an error)."),olo=l(),We=a("div"),F(GA.$$.fragment),rlo=l(),hte=a("p"),tlo=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),alo=l(),hi=a("p"),nlo=o("The processor class to instantiate is selected based on the "),pte=a("code"),slo=o("model_type"),llo=o(` property of the config object (either
passed as an argument or loaded from `),ute=a("code"),ilo=o("pretrained_model_name_or_path"),dlo=o(" if possible):"),clo=l(),be=a("ul"),fh=a("li"),_te=a("strong"),flo=o("clip"),mlo=o(" \u2014 "),kB=a("a"),glo=o("CLIPProcessor"),hlo=o(" (CLIP model)"),plo=l(),mh=a("li"),bte=a("strong"),ulo=o("layoutlmv2"),_lo=o(" \u2014 "),SB=a("a"),blo=o("LayoutLMv2Processor"),vlo=o(" (LayoutLMv2 model)"),Flo=l(),gh=a("li"),vte=a("strong"),Tlo=o("layoutxlm"),Mlo=o(" \u2014 "),RB=a("a"),Elo=o("LayoutXLMProcessor"),Clo=o(" (LayoutXLM model)"),wlo=l(),hh=a("li"),Fte=a("strong"),Alo=o("sew"),ylo=o(" \u2014 "),BB=a("a"),Llo=o("Wav2Vec2Processor"),xlo=o(" (SEW model)"),$lo=l(),ph=a("li"),Tte=a("strong"),klo=o("sew-d"),Slo=o(" \u2014 "),PB=a("a"),Rlo=o("Wav2Vec2Processor"),Blo=o(" (SEW-D model)"),Plo=l(),uh=a("li"),Mte=a("strong"),Ilo=o("speech_to_text"),qlo=o(" \u2014 "),IB=a("a"),Nlo=o("Speech2TextProcessor"),jlo=o(" (Speech2Text model)"),Dlo=l(),_h=a("li"),Ete=a("strong"),Glo=o("speech_to_text_2"),Olo=o(" \u2014 "),qB=a("a"),Vlo=o("Speech2Text2Processor"),Xlo=o(" (Speech2Text2 model)"),zlo=l(),bh=a("li"),Cte=a("strong"),Qlo=o("trocr"),Wlo=o(" \u2014 "),NB=a("a"),Hlo=o("TrOCRProcessor"),Ulo=o(" (TrOCR model)"),Jlo=l(),vh=a("li"),wte=a("strong"),Ylo=o("unispeech"),Klo=o(" \u2014 "),jB=a("a"),Zlo=o("Wav2Vec2Processor"),eio=o(" (UniSpeech model)"),oio=l(),Fh=a("li"),Ate=a("strong"),rio=o("unispeech-sat"),tio=o(" \u2014 "),DB=a("a"),aio=o("Wav2Vec2Processor"),nio=o(" (UniSpeechSat model)"),sio=l(),Th=a("li"),yte=a("strong"),lio=o("vilt"),iio=o(" \u2014 "),GB=a("a"),dio=o("ViltProcessor"),cio=o(" (ViLT model)"),fio=l(),Mh=a("li"),Lte=a("strong"),mio=o("vision-text-dual-encoder"),gio=o(" \u2014 "),OB=a("a"),hio=o("VisionTextDualEncoderProcessor"),pio=o(" (VisionTextDualEncoder model)"),uio=l(),Eh=a("li"),xte=a("strong"),_io=o("wav2vec2"),bio=o(" \u2014 "),VB=a("a"),vio=o("Wav2Vec2Processor"),Fio=o(" (Wav2Vec2 model)"),Tio=l(),Ch=a("li"),$te=a("strong"),Mio=o("wavlm"),Eio=o(" \u2014 "),XB=a("a"),Cio=o("Wav2Vec2Processor"),wio=o(" (WavLM model)"),Aio=l(),F(wh.$$.fragment),yio=l(),F(Ah.$$.fragment),Lio=l(),yh=a("div"),F(OA.$$.fragment),xio=l(),kte=a("p"),$io=o("Register a new processor for this class."),rBe=l(),pi=a("h2"),Lh=a("a"),Ste=a("span"),F(VA.$$.fragment),kio=l(),Rte=a("span"),Sio=o("AutoModel"),tBe=l(),Lo=a("div"),F(XA.$$.fragment),Rio=l(),ui=a("p"),Bio=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),zB=a("a"),Pio=o("from_pretrained()"),Iio=o(" class method or the "),QB=a("a"),qio=o("from_config()"),Nio=o(` class
method.`),jio=l(),zA=a("p"),Dio=o("This class cannot be instantiated directly using "),Bte=a("code"),Gio=o("__init__()"),Oio=o(" (throws an error)."),Vio=l(),Zr=a("div"),F(QA.$$.fragment),Xio=l(),Pte=a("p"),zio=o("Instantiates one of the base model classes of the library from a configuration."),Qio=l(),_i=a("p"),Wio=o(`Note:
Loading a model from its configuration file does `),Ite=a("strong"),Hio=o("not"),Uio=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),WB=a("a"),Jio=o("from_pretrained()"),Yio=o(" to load the model weights."),Kio=l(),F(xh.$$.fragment),Zio=l(),He=a("div"),F(WA.$$.fragment),edo=l(),qte=a("p"),odo=o("Instantiate one of the base model classes of the library from a pretrained model."),rdo=l(),Ea=a("p"),tdo=o("The model class to instantiate is selected based on the "),Nte=a("code"),ado=o("model_type"),ndo=o(` property of the config object (either
passed as an argument or loaded from `),jte=a("code"),sdo=o("pretrained_model_name_or_path"),ldo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dte=a("code"),ido=o("pretrained_model_name_or_path"),ddo=o(":"),cdo=l(),x=a("ul"),$h=a("li"),Gte=a("strong"),fdo=o("albert"),mdo=o(" \u2014 "),HB=a("a"),gdo=o("AlbertModel"),hdo=o(" (ALBERT model)"),pdo=l(),kh=a("li"),Ote=a("strong"),udo=o("bart"),_do=o(" \u2014 "),UB=a("a"),bdo=o("BartModel"),vdo=o(" (BART model)"),Fdo=l(),Sh=a("li"),Vte=a("strong"),Tdo=o("beit"),Mdo=o(" \u2014 "),JB=a("a"),Edo=o("BeitModel"),Cdo=o(" (BEiT model)"),wdo=l(),Rh=a("li"),Xte=a("strong"),Ado=o("bert"),ydo=o(" \u2014 "),YB=a("a"),Ldo=o("BertModel"),xdo=o(" (BERT model)"),$do=l(),Bh=a("li"),zte=a("strong"),kdo=o("bert-generation"),Sdo=o(" \u2014 "),KB=a("a"),Rdo=o("BertGenerationEncoder"),Bdo=o(" (Bert Generation model)"),Pdo=l(),Ph=a("li"),Qte=a("strong"),Ido=o("big_bird"),qdo=o(" \u2014 "),ZB=a("a"),Ndo=o("BigBirdModel"),jdo=o(" (BigBird model)"),Ddo=l(),Ih=a("li"),Wte=a("strong"),Gdo=o("bigbird_pegasus"),Odo=o(" \u2014 "),eP=a("a"),Vdo=o("BigBirdPegasusModel"),Xdo=o(" (BigBirdPegasus model)"),zdo=l(),qh=a("li"),Hte=a("strong"),Qdo=o("blenderbot"),Wdo=o(" \u2014 "),oP=a("a"),Hdo=o("BlenderbotModel"),Udo=o(" (Blenderbot model)"),Jdo=l(),Nh=a("li"),Ute=a("strong"),Ydo=o("blenderbot-small"),Kdo=o(" \u2014 "),rP=a("a"),Zdo=o("BlenderbotSmallModel"),eco=o(" (BlenderbotSmall model)"),oco=l(),jh=a("li"),Jte=a("strong"),rco=o("camembert"),tco=o(" \u2014 "),tP=a("a"),aco=o("CamembertModel"),nco=o(" (CamemBERT model)"),sco=l(),Dh=a("li"),Yte=a("strong"),lco=o("canine"),ico=o(" \u2014 "),aP=a("a"),dco=o("CanineModel"),cco=o(" (Canine model)"),fco=l(),Gh=a("li"),Kte=a("strong"),mco=o("clip"),gco=o(" \u2014 "),nP=a("a"),hco=o("CLIPModel"),pco=o(" (CLIP model)"),uco=l(),Oh=a("li"),Zte=a("strong"),_co=o("convbert"),bco=o(" \u2014 "),sP=a("a"),vco=o("ConvBertModel"),Fco=o(" (ConvBERT model)"),Tco=l(),Vh=a("li"),eae=a("strong"),Mco=o("convnext"),Eco=o(" \u2014 "),lP=a("a"),Cco=o("ConvNextModel"),wco=o(" (ConvNext model)"),Aco=l(),Xh=a("li"),oae=a("strong"),yco=o("ctrl"),Lco=o(" \u2014 "),iP=a("a"),xco=o("CTRLModel"),$co=o(" (CTRL model)"),kco=l(),zh=a("li"),rae=a("strong"),Sco=o("data2vec-audio"),Rco=o(" \u2014 "),dP=a("a"),Bco=o("Data2VecAudioModel"),Pco=o(" (Data2VecAudio model)"),Ico=l(),Qh=a("li"),tae=a("strong"),qco=o("data2vec-text"),Nco=o(" \u2014 "),cP=a("a"),jco=o("Data2VecTextModel"),Dco=o(" (Data2VecText model)"),Gco=l(),Wh=a("li"),aae=a("strong"),Oco=o("data2vec-vision"),Vco=o(" \u2014 "),fP=a("a"),Xco=o("Data2VecVisionModel"),zco=o(" (Data2VecVision model)"),Qco=l(),Hh=a("li"),nae=a("strong"),Wco=o("deberta"),Hco=o(" \u2014 "),mP=a("a"),Uco=o("DebertaModel"),Jco=o(" (DeBERTa model)"),Yco=l(),Uh=a("li"),sae=a("strong"),Kco=o("deberta-v2"),Zco=o(" \u2014 "),gP=a("a"),efo=o("DebertaV2Model"),ofo=o(" (DeBERTa-v2 model)"),rfo=l(),Jh=a("li"),lae=a("strong"),tfo=o("decision_transformer"),afo=o(" \u2014 "),hP=a("a"),nfo=o("DecisionTransformerModel"),sfo=o(" (Decision Transformer model)"),lfo=l(),Yh=a("li"),iae=a("strong"),ifo=o("deit"),dfo=o(" \u2014 "),pP=a("a"),cfo=o("DeiTModel"),ffo=o(" (DeiT model)"),mfo=l(),Kh=a("li"),dae=a("strong"),gfo=o("detr"),hfo=o(" \u2014 "),uP=a("a"),pfo=o("DetrModel"),ufo=o(" (DETR model)"),_fo=l(),Zh=a("li"),cae=a("strong"),bfo=o("distilbert"),vfo=o(" \u2014 "),_P=a("a"),Ffo=o("DistilBertModel"),Tfo=o(" (DistilBERT model)"),Mfo=l(),ep=a("li"),fae=a("strong"),Efo=o("dpr"),Cfo=o(" \u2014 "),bP=a("a"),wfo=o("DPRQuestionEncoder"),Afo=o(" (DPR model)"),yfo=l(),op=a("li"),mae=a("strong"),Lfo=o("dpt"),xfo=o(" \u2014 "),vP=a("a"),$fo=o("DPTModel"),kfo=o(" (DPT model)"),Sfo=l(),rp=a("li"),gae=a("strong"),Rfo=o("electra"),Bfo=o(" \u2014 "),FP=a("a"),Pfo=o("ElectraModel"),Ifo=o(" (ELECTRA model)"),qfo=l(),tp=a("li"),hae=a("strong"),Nfo=o("flaubert"),jfo=o(" \u2014 "),TP=a("a"),Dfo=o("FlaubertModel"),Gfo=o(" (FlauBERT model)"),Ofo=l(),ap=a("li"),pae=a("strong"),Vfo=o("fnet"),Xfo=o(" \u2014 "),MP=a("a"),zfo=o("FNetModel"),Qfo=o(" (FNet model)"),Wfo=l(),np=a("li"),uae=a("strong"),Hfo=o("fsmt"),Ufo=o(" \u2014 "),EP=a("a"),Jfo=o("FSMTModel"),Yfo=o(" (FairSeq Machine-Translation model)"),Kfo=l(),Ls=a("li"),_ae=a("strong"),Zfo=o("funnel"),emo=o(" \u2014 "),CP=a("a"),omo=o("FunnelModel"),rmo=o(" or "),wP=a("a"),tmo=o("FunnelBaseModel"),amo=o(" (Funnel Transformer model)"),nmo=l(),sp=a("li"),bae=a("strong"),smo=o("glpn"),lmo=o(" \u2014 "),AP=a("a"),imo=o("GLPNModel"),dmo=o(" (GLPN model)"),cmo=l(),lp=a("li"),vae=a("strong"),fmo=o("gpt2"),mmo=o(" \u2014 "),yP=a("a"),gmo=o("GPT2Model"),hmo=o(" (OpenAI GPT-2 model)"),pmo=l(),ip=a("li"),Fae=a("strong"),umo=o("gpt_neo"),_mo=o(" \u2014 "),LP=a("a"),bmo=o("GPTNeoModel"),vmo=o(" (GPT Neo model)"),Fmo=l(),dp=a("li"),Tae=a("strong"),Tmo=o("gptj"),Mmo=o(" \u2014 "),xP=a("a"),Emo=o("GPTJModel"),Cmo=o(" (GPT-J model)"),wmo=l(),cp=a("li"),Mae=a("strong"),Amo=o("hubert"),ymo=o(" \u2014 "),$P=a("a"),Lmo=o("HubertModel"),xmo=o(" (Hubert model)"),$mo=l(),fp=a("li"),Eae=a("strong"),kmo=o("ibert"),Smo=o(" \u2014 "),kP=a("a"),Rmo=o("IBertModel"),Bmo=o(" (I-BERT model)"),Pmo=l(),mp=a("li"),Cae=a("strong"),Imo=o("imagegpt"),qmo=o(" \u2014 "),SP=a("a"),Nmo=o("ImageGPTModel"),jmo=o(" (ImageGPT model)"),Dmo=l(),gp=a("li"),wae=a("strong"),Gmo=o("layoutlm"),Omo=o(" \u2014 "),RP=a("a"),Vmo=o("LayoutLMModel"),Xmo=o(" (LayoutLM model)"),zmo=l(),hp=a("li"),Aae=a("strong"),Qmo=o("layoutlmv2"),Wmo=o(" \u2014 "),BP=a("a"),Hmo=o("LayoutLMv2Model"),Umo=o(" (LayoutLMv2 model)"),Jmo=l(),pp=a("li"),yae=a("strong"),Ymo=o("led"),Kmo=o(" \u2014 "),PP=a("a"),Zmo=o("LEDModel"),ego=o(" (LED model)"),ogo=l(),up=a("li"),Lae=a("strong"),rgo=o("longformer"),tgo=o(" \u2014 "),IP=a("a"),ago=o("LongformerModel"),ngo=o(" (Longformer model)"),sgo=l(),_p=a("li"),xae=a("strong"),lgo=o("luke"),igo=o(" \u2014 "),qP=a("a"),dgo=o("LukeModel"),cgo=o(" (LUKE model)"),fgo=l(),bp=a("li"),$ae=a("strong"),mgo=o("lxmert"),ggo=o(" \u2014 "),NP=a("a"),hgo=o("LxmertModel"),pgo=o(" (LXMERT model)"),ugo=l(),vp=a("li"),kae=a("strong"),_go=o("m2m_100"),bgo=o(" \u2014 "),jP=a("a"),vgo=o("M2M100Model"),Fgo=o(" (M2M100 model)"),Tgo=l(),Fp=a("li"),Sae=a("strong"),Mgo=o("marian"),Ego=o(" \u2014 "),DP=a("a"),Cgo=o("MarianModel"),wgo=o(" (Marian model)"),Ago=l(),Tp=a("li"),Rae=a("strong"),ygo=o("maskformer"),Lgo=o(" \u2014 "),GP=a("a"),xgo=o("MaskFormerModel"),$go=o(" (MaskFormer model)"),kgo=l(),Mp=a("li"),Bae=a("strong"),Sgo=o("mbart"),Rgo=o(" \u2014 "),OP=a("a"),Bgo=o("MBartModel"),Pgo=o(" (mBART model)"),Igo=l(),Ep=a("li"),Pae=a("strong"),qgo=o("megatron-bert"),Ngo=o(" \u2014 "),VP=a("a"),jgo=o("MegatronBertModel"),Dgo=o(" (MegatronBert model)"),Ggo=l(),Cp=a("li"),Iae=a("strong"),Ogo=o("mobilebert"),Vgo=o(" \u2014 "),XP=a("a"),Xgo=o("MobileBertModel"),zgo=o(" (MobileBERT model)"),Qgo=l(),wp=a("li"),qae=a("strong"),Wgo=o("mpnet"),Hgo=o(" \u2014 "),zP=a("a"),Ugo=o("MPNetModel"),Jgo=o(" (MPNet model)"),Ygo=l(),Ap=a("li"),Nae=a("strong"),Kgo=o("mt5"),Zgo=o(" \u2014 "),QP=a("a"),eho=o("MT5Model"),oho=o(" (mT5 model)"),rho=l(),yp=a("li"),jae=a("strong"),tho=o("nystromformer"),aho=o(" \u2014 "),WP=a("a"),nho=o("NystromformerModel"),sho=o(" (Nystromformer model)"),lho=l(),Lp=a("li"),Dae=a("strong"),iho=o("openai-gpt"),dho=o(" \u2014 "),HP=a("a"),cho=o("OpenAIGPTModel"),fho=o(" (OpenAI GPT model)"),mho=l(),xp=a("li"),Gae=a("strong"),gho=o("pegasus"),hho=o(" \u2014 "),UP=a("a"),pho=o("PegasusModel"),uho=o(" (Pegasus model)"),_ho=l(),$p=a("li"),Oae=a("strong"),bho=o("perceiver"),vho=o(" \u2014 "),JP=a("a"),Fho=o("PerceiverModel"),Tho=o(" (Perceiver model)"),Mho=l(),kp=a("li"),Vae=a("strong"),Eho=o("plbart"),Cho=o(" \u2014 "),YP=a("a"),who=o("PLBartModel"),Aho=o(" (PLBart model)"),yho=l(),Sp=a("li"),Xae=a("strong"),Lho=o("poolformer"),xho=o(" \u2014 "),KP=a("a"),$ho=o("PoolFormerModel"),kho=o(" (PoolFormer model)"),Sho=l(),Rp=a("li"),zae=a("strong"),Rho=o("prophetnet"),Bho=o(" \u2014 "),ZP=a("a"),Pho=o("ProphetNetModel"),Iho=o(" (ProphetNet model)"),qho=l(),Bp=a("li"),Qae=a("strong"),Nho=o("qdqbert"),jho=o(" \u2014 "),eI=a("a"),Dho=o("QDQBertModel"),Gho=o(" (QDQBert model)"),Oho=l(),Pp=a("li"),Wae=a("strong"),Vho=o("reformer"),Xho=o(" \u2014 "),oI=a("a"),zho=o("ReformerModel"),Qho=o(" (Reformer model)"),Who=l(),Ip=a("li"),Hae=a("strong"),Hho=o("regnet"),Uho=o(" \u2014 "),rI=a("a"),Jho=o("RegNetModel"),Yho=o(" (RegNet model)"),Kho=l(),qp=a("li"),Uae=a("strong"),Zho=o("rembert"),epo=o(" \u2014 "),tI=a("a"),opo=o("RemBertModel"),rpo=o(" (RemBERT model)"),tpo=l(),Np=a("li"),Jae=a("strong"),apo=o("resnet"),npo=o(" \u2014 "),aI=a("a"),spo=o("ResNetModel"),lpo=o(" (ResNet model)"),ipo=l(),jp=a("li"),Yae=a("strong"),dpo=o("retribert"),cpo=o(" \u2014 "),nI=a("a"),fpo=o("RetriBertModel"),mpo=o(" (RetriBERT model)"),gpo=l(),Dp=a("li"),Kae=a("strong"),hpo=o("roberta"),ppo=o(" \u2014 "),sI=a("a"),upo=o("RobertaModel"),_po=o(" (RoBERTa model)"),bpo=l(),Gp=a("li"),Zae=a("strong"),vpo=o("roformer"),Fpo=o(" \u2014 "),lI=a("a"),Tpo=o("RoFormerModel"),Mpo=o(" (RoFormer model)"),Epo=l(),Op=a("li"),ene=a("strong"),Cpo=o("segformer"),wpo=o(" \u2014 "),iI=a("a"),Apo=o("SegformerModel"),ypo=o(" (SegFormer model)"),Lpo=l(),Vp=a("li"),one=a("strong"),xpo=o("sew"),$po=o(" \u2014 "),dI=a("a"),kpo=o("SEWModel"),Spo=o(" (SEW model)"),Rpo=l(),Xp=a("li"),rne=a("strong"),Bpo=o("sew-d"),Ppo=o(" \u2014 "),cI=a("a"),Ipo=o("SEWDModel"),qpo=o(" (SEW-D model)"),Npo=l(),zp=a("li"),tne=a("strong"),jpo=o("speech_to_text"),Dpo=o(" \u2014 "),fI=a("a"),Gpo=o("Speech2TextModel"),Opo=o(" (Speech2Text model)"),Vpo=l(),Qp=a("li"),ane=a("strong"),Xpo=o("splinter"),zpo=o(" \u2014 "),mI=a("a"),Qpo=o("SplinterModel"),Wpo=o(" (Splinter model)"),Hpo=l(),Wp=a("li"),nne=a("strong"),Upo=o("squeezebert"),Jpo=o(" \u2014 "),gI=a("a"),Ypo=o("SqueezeBertModel"),Kpo=o(" (SqueezeBERT model)"),Zpo=l(),Hp=a("li"),sne=a("strong"),euo=o("swin"),ouo=o(" \u2014 "),hI=a("a"),ruo=o("SwinModel"),tuo=o(" (Swin model)"),auo=l(),Up=a("li"),lne=a("strong"),nuo=o("t5"),suo=o(" \u2014 "),pI=a("a"),luo=o("T5Model"),iuo=o(" (T5 model)"),duo=l(),Jp=a("li"),ine=a("strong"),cuo=o("tapas"),fuo=o(" \u2014 "),uI=a("a"),muo=o("TapasModel"),guo=o(" (TAPAS model)"),huo=l(),Yp=a("li"),dne=a("strong"),puo=o("transfo-xl"),uuo=o(" \u2014 "),_I=a("a"),_uo=o("TransfoXLModel"),buo=o(" (Transformer-XL model)"),vuo=l(),Kp=a("li"),cne=a("strong"),Fuo=o("unispeech"),Tuo=o(" \u2014 "),bI=a("a"),Muo=o("UniSpeechModel"),Euo=o(" (UniSpeech model)"),Cuo=l(),Zp=a("li"),fne=a("strong"),wuo=o("unispeech-sat"),Auo=o(" \u2014 "),vI=a("a"),yuo=o("UniSpeechSatModel"),Luo=o(" (UniSpeechSat model)"),xuo=l(),eu=a("li"),mne=a("strong"),$uo=o("van"),kuo=o(" \u2014 "),FI=a("a"),Suo=o("VanModel"),Ruo=o(" (VAN model)"),Buo=l(),ou=a("li"),gne=a("strong"),Puo=o("vilt"),Iuo=o(" \u2014 "),TI=a("a"),quo=o("ViltModel"),Nuo=o(" (ViLT model)"),juo=l(),ru=a("li"),hne=a("strong"),Duo=o("vision-text-dual-encoder"),Guo=o(" \u2014 "),MI=a("a"),Ouo=o("VisionTextDualEncoderModel"),Vuo=o(" (VisionTextDualEncoder model)"),Xuo=l(),tu=a("li"),pne=a("strong"),zuo=o("visual_bert"),Quo=o(" \u2014 "),EI=a("a"),Wuo=o("VisualBertModel"),Huo=o(" (VisualBert model)"),Uuo=l(),au=a("li"),une=a("strong"),Juo=o("vit"),Yuo=o(" \u2014 "),CI=a("a"),Kuo=o("ViTModel"),Zuo=o(" (ViT model)"),e_o=l(),nu=a("li"),_ne=a("strong"),o_o=o("vit_mae"),r_o=o(" \u2014 "),wI=a("a"),t_o=o("ViTMAEModel"),a_o=o(" (ViTMAE model)"),n_o=l(),su=a("li"),bne=a("strong"),s_o=o("wav2vec2"),l_o=o(" \u2014 "),AI=a("a"),i_o=o("Wav2Vec2Model"),d_o=o(" (Wav2Vec2 model)"),c_o=l(),lu=a("li"),vne=a("strong"),f_o=o("wavlm"),m_o=o(" \u2014 "),yI=a("a"),g_o=o("WavLMModel"),h_o=o(" (WavLM model)"),p_o=l(),iu=a("li"),Fne=a("strong"),u_o=o("xglm"),__o=o(" \u2014 "),LI=a("a"),b_o=o("XGLMModel"),v_o=o(" (XGLM model)"),F_o=l(),du=a("li"),Tne=a("strong"),T_o=o("xlm"),M_o=o(" \u2014 "),xI=a("a"),E_o=o("XLMModel"),C_o=o(" (XLM model)"),w_o=l(),cu=a("li"),Mne=a("strong"),A_o=o("xlm-prophetnet"),y_o=o(" \u2014 "),$I=a("a"),L_o=o("XLMProphetNetModel"),x_o=o(" (XLMProphetNet model)"),$_o=l(),fu=a("li"),Ene=a("strong"),k_o=o("xlm-roberta"),S_o=o(" \u2014 "),kI=a("a"),R_o=o("XLMRobertaModel"),B_o=o(" (XLM-RoBERTa model)"),P_o=l(),mu=a("li"),Cne=a("strong"),I_o=o("xlm-roberta-xl"),q_o=o(" \u2014 "),SI=a("a"),N_o=o("XLMRobertaXLModel"),j_o=o(" (XLM-RoBERTa-XL model)"),D_o=l(),gu=a("li"),wne=a("strong"),G_o=o("xlnet"),O_o=o(" \u2014 "),RI=a("a"),V_o=o("XLNetModel"),X_o=o(" (XLNet model)"),z_o=l(),hu=a("li"),Ane=a("strong"),Q_o=o("yoso"),W_o=o(" \u2014 "),BI=a("a"),H_o=o("YosoModel"),U_o=o(" (YOSO model)"),J_o=l(),pu=a("p"),Y_o=o("The model is set in evaluation mode by default using "),yne=a("code"),K_o=o("model.eval()"),Z_o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Lne=a("code"),e1o=o("model.train()"),o1o=l(),F(uu.$$.fragment),aBe=l(),bi=a("h2"),_u=a("a"),xne=a("span"),F(HA.$$.fragment),r1o=l(),$ne=a("span"),t1o=o("AutoModelForPreTraining"),nBe=l(),xo=a("div"),F(UA.$$.fragment),a1o=l(),vi=a("p"),n1o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),PI=a("a"),s1o=o("from_pretrained()"),l1o=o(" class method or the "),II=a("a"),i1o=o("from_config()"),d1o=o(` class
method.`),c1o=l(),JA=a("p"),f1o=o("This class cannot be instantiated directly using "),kne=a("code"),m1o=o("__init__()"),g1o=o(" (throws an error)."),h1o=l(),et=a("div"),F(YA.$$.fragment),p1o=l(),Sne=a("p"),u1o=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),_1o=l(),Fi=a("p"),b1o=o(`Note:
Loading a model from its configuration file does `),Rne=a("strong"),v1o=o("not"),F1o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qI=a("a"),T1o=o("from_pretrained()"),M1o=o(" to load the model weights."),E1o=l(),F(bu.$$.fragment),C1o=l(),Ue=a("div"),F(KA.$$.fragment),w1o=l(),Bne=a("p"),A1o=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),y1o=l(),Ca=a("p"),L1o=o("The model class to instantiate is selected based on the "),Pne=a("code"),x1o=o("model_type"),$1o=o(` property of the config object (either
passed as an argument or loaded from `),Ine=a("code"),k1o=o("pretrained_model_name_or_path"),S1o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qne=a("code"),R1o=o("pretrained_model_name_or_path"),B1o=o(":"),P1o=l(),G=a("ul"),vu=a("li"),Nne=a("strong"),I1o=o("albert"),q1o=o(" \u2014 "),NI=a("a"),N1o=o("AlbertForPreTraining"),j1o=o(" (ALBERT model)"),D1o=l(),Fu=a("li"),jne=a("strong"),G1o=o("bart"),O1o=o(" \u2014 "),jI=a("a"),V1o=o("BartForConditionalGeneration"),X1o=o(" (BART model)"),z1o=l(),Tu=a("li"),Dne=a("strong"),Q1o=o("bert"),W1o=o(" \u2014 "),DI=a("a"),H1o=o("BertForPreTraining"),U1o=o(" (BERT model)"),J1o=l(),Mu=a("li"),Gne=a("strong"),Y1o=o("big_bird"),K1o=o(" \u2014 "),GI=a("a"),Z1o=o("BigBirdForPreTraining"),e9o=o(" (BigBird model)"),o9o=l(),Eu=a("li"),One=a("strong"),r9o=o("camembert"),t9o=o(" \u2014 "),OI=a("a"),a9o=o("CamembertForMaskedLM"),n9o=o(" (CamemBERT model)"),s9o=l(),Cu=a("li"),Vne=a("strong"),l9o=o("ctrl"),i9o=o(" \u2014 "),VI=a("a"),d9o=o("CTRLLMHeadModel"),c9o=o(" (CTRL model)"),f9o=l(),wu=a("li"),Xne=a("strong"),m9o=o("data2vec-text"),g9o=o(" \u2014 "),XI=a("a"),h9o=o("Data2VecTextForMaskedLM"),p9o=o(" (Data2VecText model)"),u9o=l(),Au=a("li"),zne=a("strong"),_9o=o("deberta"),b9o=o(" \u2014 "),zI=a("a"),v9o=o("DebertaForMaskedLM"),F9o=o(" (DeBERTa model)"),T9o=l(),yu=a("li"),Qne=a("strong"),M9o=o("deberta-v2"),E9o=o(" \u2014 "),QI=a("a"),C9o=o("DebertaV2ForMaskedLM"),w9o=o(" (DeBERTa-v2 model)"),A9o=l(),Lu=a("li"),Wne=a("strong"),y9o=o("distilbert"),L9o=o(" \u2014 "),WI=a("a"),x9o=o("DistilBertForMaskedLM"),$9o=o(" (DistilBERT model)"),k9o=l(),xu=a("li"),Hne=a("strong"),S9o=o("electra"),R9o=o(" \u2014 "),HI=a("a"),B9o=o("ElectraForPreTraining"),P9o=o(" (ELECTRA model)"),I9o=l(),$u=a("li"),Une=a("strong"),q9o=o("flaubert"),N9o=o(" \u2014 "),UI=a("a"),j9o=o("FlaubertWithLMHeadModel"),D9o=o(" (FlauBERT model)"),G9o=l(),ku=a("li"),Jne=a("strong"),O9o=o("fnet"),V9o=o(" \u2014 "),JI=a("a"),X9o=o("FNetForPreTraining"),z9o=o(" (FNet model)"),Q9o=l(),Su=a("li"),Yne=a("strong"),W9o=o("fsmt"),H9o=o(" \u2014 "),YI=a("a"),U9o=o("FSMTForConditionalGeneration"),J9o=o(" (FairSeq Machine-Translation model)"),Y9o=l(),Ru=a("li"),Kne=a("strong"),K9o=o("funnel"),Z9o=o(" \u2014 "),KI=a("a"),ebo=o("FunnelForPreTraining"),obo=o(" (Funnel Transformer model)"),rbo=l(),Bu=a("li"),Zne=a("strong"),tbo=o("gpt2"),abo=o(" \u2014 "),ZI=a("a"),nbo=o("GPT2LMHeadModel"),sbo=o(" (OpenAI GPT-2 model)"),lbo=l(),Pu=a("li"),ese=a("strong"),ibo=o("ibert"),dbo=o(" \u2014 "),eq=a("a"),cbo=o("IBertForMaskedLM"),fbo=o(" (I-BERT model)"),mbo=l(),Iu=a("li"),ose=a("strong"),gbo=o("layoutlm"),hbo=o(" \u2014 "),oq=a("a"),pbo=o("LayoutLMForMaskedLM"),ubo=o(" (LayoutLM model)"),_bo=l(),qu=a("li"),rse=a("strong"),bbo=o("longformer"),vbo=o(" \u2014 "),rq=a("a"),Fbo=o("LongformerForMaskedLM"),Tbo=o(" (Longformer model)"),Mbo=l(),Nu=a("li"),tse=a("strong"),Ebo=o("lxmert"),Cbo=o(" \u2014 "),tq=a("a"),wbo=o("LxmertForPreTraining"),Abo=o(" (LXMERT model)"),ybo=l(),ju=a("li"),ase=a("strong"),Lbo=o("megatron-bert"),xbo=o(" \u2014 "),aq=a("a"),$bo=o("MegatronBertForPreTraining"),kbo=o(" (MegatronBert model)"),Sbo=l(),Du=a("li"),nse=a("strong"),Rbo=o("mobilebert"),Bbo=o(" \u2014 "),nq=a("a"),Pbo=o("MobileBertForPreTraining"),Ibo=o(" (MobileBERT model)"),qbo=l(),Gu=a("li"),sse=a("strong"),Nbo=o("mpnet"),jbo=o(" \u2014 "),sq=a("a"),Dbo=o("MPNetForMaskedLM"),Gbo=o(" (MPNet model)"),Obo=l(),Ou=a("li"),lse=a("strong"),Vbo=o("openai-gpt"),Xbo=o(" \u2014 "),lq=a("a"),zbo=o("OpenAIGPTLMHeadModel"),Qbo=o(" (OpenAI GPT model)"),Wbo=l(),Vu=a("li"),ise=a("strong"),Hbo=o("retribert"),Ubo=o(" \u2014 "),iq=a("a"),Jbo=o("RetriBertModel"),Ybo=o(" (RetriBERT model)"),Kbo=l(),Xu=a("li"),dse=a("strong"),Zbo=o("roberta"),e2o=o(" \u2014 "),dq=a("a"),o2o=o("RobertaForMaskedLM"),r2o=o(" (RoBERTa model)"),t2o=l(),zu=a("li"),cse=a("strong"),a2o=o("squeezebert"),n2o=o(" \u2014 "),cq=a("a"),s2o=o("SqueezeBertForMaskedLM"),l2o=o(" (SqueezeBERT model)"),i2o=l(),Qu=a("li"),fse=a("strong"),d2o=o("t5"),c2o=o(" \u2014 "),fq=a("a"),f2o=o("T5ForConditionalGeneration"),m2o=o(" (T5 model)"),g2o=l(),Wu=a("li"),mse=a("strong"),h2o=o("tapas"),p2o=o(" \u2014 "),mq=a("a"),u2o=o("TapasForMaskedLM"),_2o=o(" (TAPAS model)"),b2o=l(),Hu=a("li"),gse=a("strong"),v2o=o("transfo-xl"),F2o=o(" \u2014 "),gq=a("a"),T2o=o("TransfoXLLMHeadModel"),M2o=o(" (Transformer-XL model)"),E2o=l(),Uu=a("li"),hse=a("strong"),C2o=o("unispeech"),w2o=o(" \u2014 "),hq=a("a"),A2o=o("UniSpeechForPreTraining"),y2o=o(" (UniSpeech model)"),L2o=l(),Ju=a("li"),pse=a("strong"),x2o=o("unispeech-sat"),$2o=o(" \u2014 "),pq=a("a"),k2o=o("UniSpeechSatForPreTraining"),S2o=o(" (UniSpeechSat model)"),R2o=l(),Yu=a("li"),use=a("strong"),B2o=o("visual_bert"),P2o=o(" \u2014 "),uq=a("a"),I2o=o("VisualBertForPreTraining"),q2o=o(" (VisualBert model)"),N2o=l(),Ku=a("li"),_se=a("strong"),j2o=o("vit_mae"),D2o=o(" \u2014 "),_q=a("a"),G2o=o("ViTMAEForPreTraining"),O2o=o(" (ViTMAE model)"),V2o=l(),Zu=a("li"),bse=a("strong"),X2o=o("wav2vec2"),z2o=o(" \u2014 "),bq=a("a"),Q2o=o("Wav2Vec2ForPreTraining"),W2o=o(" (Wav2Vec2 model)"),H2o=l(),e_=a("li"),vse=a("strong"),U2o=o("xlm"),J2o=o(" \u2014 "),vq=a("a"),Y2o=o("XLMWithLMHeadModel"),K2o=o(" (XLM model)"),Z2o=l(),o_=a("li"),Fse=a("strong"),e5o=o("xlm-roberta"),o5o=o(" \u2014 "),Fq=a("a"),r5o=o("XLMRobertaForMaskedLM"),t5o=o(" (XLM-RoBERTa model)"),a5o=l(),r_=a("li"),Tse=a("strong"),n5o=o("xlm-roberta-xl"),s5o=o(" \u2014 "),Tq=a("a"),l5o=o("XLMRobertaXLForMaskedLM"),i5o=o(" (XLM-RoBERTa-XL model)"),d5o=l(),t_=a("li"),Mse=a("strong"),c5o=o("xlnet"),f5o=o(" \u2014 "),Mq=a("a"),m5o=o("XLNetLMHeadModel"),g5o=o(" (XLNet model)"),h5o=l(),a_=a("p"),p5o=o("The model is set in evaluation mode by default using "),Ese=a("code"),u5o=o("model.eval()"),_5o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Cse=a("code"),b5o=o("model.train()"),v5o=l(),F(n_.$$.fragment),sBe=l(),Ti=a("h2"),s_=a("a"),wse=a("span"),F(ZA.$$.fragment),F5o=l(),Ase=a("span"),T5o=o("AutoModelForCausalLM"),lBe=l(),$o=a("div"),F(e0.$$.fragment),M5o=l(),Mi=a("p"),E5o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Eq=a("a"),C5o=o("from_pretrained()"),w5o=o(" class method or the "),Cq=a("a"),A5o=o("from_config()"),y5o=o(` class
method.`),L5o=l(),o0=a("p"),x5o=o("This class cannot be instantiated directly using "),yse=a("code"),$5o=o("__init__()"),k5o=o(" (throws an error)."),S5o=l(),ot=a("div"),F(r0.$$.fragment),R5o=l(),Lse=a("p"),B5o=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),P5o=l(),Ei=a("p"),I5o=o(`Note:
Loading a model from its configuration file does `),xse=a("strong"),q5o=o("not"),N5o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wq=a("a"),j5o=o("from_pretrained()"),D5o=o(" to load the model weights."),G5o=l(),F(l_.$$.fragment),O5o=l(),Je=a("div"),F(t0.$$.fragment),V5o=l(),$se=a("p"),X5o=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),z5o=l(),wa=a("p"),Q5o=o("The model class to instantiate is selected based on the "),kse=a("code"),W5o=o("model_type"),H5o=o(` property of the config object (either
passed as an argument or loaded from `),Sse=a("code"),U5o=o("pretrained_model_name_or_path"),J5o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rse=a("code"),Y5o=o("pretrained_model_name_or_path"),K5o=o(":"),Z5o=l(),z=a("ul"),i_=a("li"),Bse=a("strong"),evo=o("bart"),ovo=o(" \u2014 "),Aq=a("a"),rvo=o("BartForCausalLM"),tvo=o(" (BART model)"),avo=l(),d_=a("li"),Pse=a("strong"),nvo=o("bert"),svo=o(" \u2014 "),yq=a("a"),lvo=o("BertLMHeadModel"),ivo=o(" (BERT model)"),dvo=l(),c_=a("li"),Ise=a("strong"),cvo=o("bert-generation"),fvo=o(" \u2014 "),Lq=a("a"),mvo=o("BertGenerationDecoder"),gvo=o(" (Bert Generation model)"),hvo=l(),f_=a("li"),qse=a("strong"),pvo=o("big_bird"),uvo=o(" \u2014 "),xq=a("a"),_vo=o("BigBirdForCausalLM"),bvo=o(" (BigBird model)"),vvo=l(),m_=a("li"),Nse=a("strong"),Fvo=o("bigbird_pegasus"),Tvo=o(" \u2014 "),$q=a("a"),Mvo=o("BigBirdPegasusForCausalLM"),Evo=o(" (BigBirdPegasus model)"),Cvo=l(),g_=a("li"),jse=a("strong"),wvo=o("blenderbot"),Avo=o(" \u2014 "),kq=a("a"),yvo=o("BlenderbotForCausalLM"),Lvo=o(" (Blenderbot model)"),xvo=l(),h_=a("li"),Dse=a("strong"),$vo=o("blenderbot-small"),kvo=o(" \u2014 "),Sq=a("a"),Svo=o("BlenderbotSmallForCausalLM"),Rvo=o(" (BlenderbotSmall model)"),Bvo=l(),p_=a("li"),Gse=a("strong"),Pvo=o("camembert"),Ivo=o(" \u2014 "),Rq=a("a"),qvo=o("CamembertForCausalLM"),Nvo=o(" (CamemBERT model)"),jvo=l(),u_=a("li"),Ose=a("strong"),Dvo=o("ctrl"),Gvo=o(" \u2014 "),Bq=a("a"),Ovo=o("CTRLLMHeadModel"),Vvo=o(" (CTRL model)"),Xvo=l(),__=a("li"),Vse=a("strong"),zvo=o("data2vec-text"),Qvo=o(" \u2014 "),Pq=a("a"),Wvo=o("Data2VecTextForCausalLM"),Hvo=o(" (Data2VecText model)"),Uvo=l(),b_=a("li"),Xse=a("strong"),Jvo=o("electra"),Yvo=o(" \u2014 "),Iq=a("a"),Kvo=o("ElectraForCausalLM"),Zvo=o(" (ELECTRA model)"),eFo=l(),v_=a("li"),zse=a("strong"),oFo=o("gpt2"),rFo=o(" \u2014 "),qq=a("a"),tFo=o("GPT2LMHeadModel"),aFo=o(" (OpenAI GPT-2 model)"),nFo=l(),F_=a("li"),Qse=a("strong"),sFo=o("gpt_neo"),lFo=o(" \u2014 "),Nq=a("a"),iFo=o("GPTNeoForCausalLM"),dFo=o(" (GPT Neo model)"),cFo=l(),T_=a("li"),Wse=a("strong"),fFo=o("gptj"),mFo=o(" \u2014 "),jq=a("a"),gFo=o("GPTJForCausalLM"),hFo=o(" (GPT-J model)"),pFo=l(),M_=a("li"),Hse=a("strong"),uFo=o("marian"),_Fo=o(" \u2014 "),Dq=a("a"),bFo=o("MarianForCausalLM"),vFo=o(" (Marian model)"),FFo=l(),E_=a("li"),Use=a("strong"),TFo=o("mbart"),MFo=o(" \u2014 "),Gq=a("a"),EFo=o("MBartForCausalLM"),CFo=o(" (mBART model)"),wFo=l(),C_=a("li"),Jse=a("strong"),AFo=o("megatron-bert"),yFo=o(" \u2014 "),Oq=a("a"),LFo=o("MegatronBertForCausalLM"),xFo=o(" (MegatronBert model)"),$Fo=l(),w_=a("li"),Yse=a("strong"),kFo=o("openai-gpt"),SFo=o(" \u2014 "),Vq=a("a"),RFo=o("OpenAIGPTLMHeadModel"),BFo=o(" (OpenAI GPT model)"),PFo=l(),A_=a("li"),Kse=a("strong"),IFo=o("pegasus"),qFo=o(" \u2014 "),Xq=a("a"),NFo=o("PegasusForCausalLM"),jFo=o(" (Pegasus model)"),DFo=l(),y_=a("li"),Zse=a("strong"),GFo=o("plbart"),OFo=o(" \u2014 "),zq=a("a"),VFo=o("PLBartForCausalLM"),XFo=o(" (PLBart model)"),zFo=l(),L_=a("li"),ele=a("strong"),QFo=o("prophetnet"),WFo=o(" \u2014 "),Qq=a("a"),HFo=o("ProphetNetForCausalLM"),UFo=o(" (ProphetNet model)"),JFo=l(),x_=a("li"),ole=a("strong"),YFo=o("qdqbert"),KFo=o(" \u2014 "),Wq=a("a"),ZFo=o("QDQBertLMHeadModel"),e6o=o(" (QDQBert model)"),o6o=l(),$_=a("li"),rle=a("strong"),r6o=o("reformer"),t6o=o(" \u2014 "),Hq=a("a"),a6o=o("ReformerModelWithLMHead"),n6o=o(" (Reformer model)"),s6o=l(),k_=a("li"),tle=a("strong"),l6o=o("rembert"),i6o=o(" \u2014 "),Uq=a("a"),d6o=o("RemBertForCausalLM"),c6o=o(" (RemBERT model)"),f6o=l(),S_=a("li"),ale=a("strong"),m6o=o("roberta"),g6o=o(" \u2014 "),Jq=a("a"),h6o=o("RobertaForCausalLM"),p6o=o(" (RoBERTa model)"),u6o=l(),R_=a("li"),nle=a("strong"),_6o=o("roformer"),b6o=o(" \u2014 "),Yq=a("a"),v6o=o("RoFormerForCausalLM"),F6o=o(" (RoFormer model)"),T6o=l(),B_=a("li"),sle=a("strong"),M6o=o("speech_to_text_2"),E6o=o(" \u2014 "),Kq=a("a"),C6o=o("Speech2Text2ForCausalLM"),w6o=o(" (Speech2Text2 model)"),A6o=l(),P_=a("li"),lle=a("strong"),y6o=o("transfo-xl"),L6o=o(" \u2014 "),Zq=a("a"),x6o=o("TransfoXLLMHeadModel"),$6o=o(" (Transformer-XL model)"),k6o=l(),I_=a("li"),ile=a("strong"),S6o=o("trocr"),R6o=o(" \u2014 "),eN=a("a"),B6o=o("TrOCRForCausalLM"),P6o=o(" (TrOCR model)"),I6o=l(),q_=a("li"),dle=a("strong"),q6o=o("xglm"),N6o=o(" \u2014 "),oN=a("a"),j6o=o("XGLMForCausalLM"),D6o=o(" (XGLM model)"),G6o=l(),N_=a("li"),cle=a("strong"),O6o=o("xlm"),V6o=o(" \u2014 "),rN=a("a"),X6o=o("XLMWithLMHeadModel"),z6o=o(" (XLM model)"),Q6o=l(),j_=a("li"),fle=a("strong"),W6o=o("xlm-prophetnet"),H6o=o(" \u2014 "),tN=a("a"),U6o=o("XLMProphetNetForCausalLM"),J6o=o(" (XLMProphetNet model)"),Y6o=l(),D_=a("li"),mle=a("strong"),K6o=o("xlm-roberta"),Z6o=o(" \u2014 "),aN=a("a"),eTo=o("XLMRobertaForCausalLM"),oTo=o(" (XLM-RoBERTa model)"),rTo=l(),G_=a("li"),gle=a("strong"),tTo=o("xlm-roberta-xl"),aTo=o(" \u2014 "),nN=a("a"),nTo=o("XLMRobertaXLForCausalLM"),sTo=o(" (XLM-RoBERTa-XL model)"),lTo=l(),O_=a("li"),hle=a("strong"),iTo=o("xlnet"),dTo=o(" \u2014 "),sN=a("a"),cTo=o("XLNetLMHeadModel"),fTo=o(" (XLNet model)"),mTo=l(),V_=a("p"),gTo=o("The model is set in evaluation mode by default using "),ple=a("code"),hTo=o("model.eval()"),pTo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ule=a("code"),uTo=o("model.train()"),_To=l(),F(X_.$$.fragment),iBe=l(),Ci=a("h2"),z_=a("a"),_le=a("span"),F(a0.$$.fragment),bTo=l(),ble=a("span"),vTo=o("AutoModelForMaskedLM"),dBe=l(),ko=a("div"),F(n0.$$.fragment),FTo=l(),wi=a("p"),TTo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),lN=a("a"),MTo=o("from_pretrained()"),ETo=o(" class method or the "),iN=a("a"),CTo=o("from_config()"),wTo=o(` class
method.`),ATo=l(),s0=a("p"),yTo=o("This class cannot be instantiated directly using "),vle=a("code"),LTo=o("__init__()"),xTo=o(" (throws an error)."),$To=l(),rt=a("div"),F(l0.$$.fragment),kTo=l(),Fle=a("p"),STo=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),RTo=l(),Ai=a("p"),BTo=o(`Note:
Loading a model from its configuration file does `),Tle=a("strong"),PTo=o("not"),ITo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dN=a("a"),qTo=o("from_pretrained()"),NTo=o(" to load the model weights."),jTo=l(),F(Q_.$$.fragment),DTo=l(),Ye=a("div"),F(i0.$$.fragment),GTo=l(),Mle=a("p"),OTo=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),VTo=l(),Aa=a("p"),XTo=o("The model class to instantiate is selected based on the "),Ele=a("code"),zTo=o("model_type"),QTo=o(` property of the config object (either
passed as an argument or loaded from `),Cle=a("code"),WTo=o("pretrained_model_name_or_path"),HTo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wle=a("code"),UTo=o("pretrained_model_name_or_path"),JTo=o(":"),YTo=l(),Q=a("ul"),W_=a("li"),Ale=a("strong"),KTo=o("albert"),ZTo=o(" \u2014 "),cN=a("a"),eMo=o("AlbertForMaskedLM"),oMo=o(" (ALBERT model)"),rMo=l(),H_=a("li"),yle=a("strong"),tMo=o("bart"),aMo=o(" \u2014 "),fN=a("a"),nMo=o("BartForConditionalGeneration"),sMo=o(" (BART model)"),lMo=l(),U_=a("li"),Lle=a("strong"),iMo=o("bert"),dMo=o(" \u2014 "),mN=a("a"),cMo=o("BertForMaskedLM"),fMo=o(" (BERT model)"),mMo=l(),J_=a("li"),xle=a("strong"),gMo=o("big_bird"),hMo=o(" \u2014 "),gN=a("a"),pMo=o("BigBirdForMaskedLM"),uMo=o(" (BigBird model)"),_Mo=l(),Y_=a("li"),$le=a("strong"),bMo=o("camembert"),vMo=o(" \u2014 "),hN=a("a"),FMo=o("CamembertForMaskedLM"),TMo=o(" (CamemBERT model)"),MMo=l(),K_=a("li"),kle=a("strong"),EMo=o("convbert"),CMo=o(" \u2014 "),pN=a("a"),wMo=o("ConvBertForMaskedLM"),AMo=o(" (ConvBERT model)"),yMo=l(),Z_=a("li"),Sle=a("strong"),LMo=o("data2vec-text"),xMo=o(" \u2014 "),uN=a("a"),$Mo=o("Data2VecTextForMaskedLM"),kMo=o(" (Data2VecText model)"),SMo=l(),e1=a("li"),Rle=a("strong"),RMo=o("deberta"),BMo=o(" \u2014 "),_N=a("a"),PMo=o("DebertaForMaskedLM"),IMo=o(" (DeBERTa model)"),qMo=l(),o1=a("li"),Ble=a("strong"),NMo=o("deberta-v2"),jMo=o(" \u2014 "),bN=a("a"),DMo=o("DebertaV2ForMaskedLM"),GMo=o(" (DeBERTa-v2 model)"),OMo=l(),r1=a("li"),Ple=a("strong"),VMo=o("distilbert"),XMo=o(" \u2014 "),vN=a("a"),zMo=o("DistilBertForMaskedLM"),QMo=o(" (DistilBERT model)"),WMo=l(),t1=a("li"),Ile=a("strong"),HMo=o("electra"),UMo=o(" \u2014 "),FN=a("a"),JMo=o("ElectraForMaskedLM"),YMo=o(" (ELECTRA model)"),KMo=l(),a1=a("li"),qle=a("strong"),ZMo=o("flaubert"),e4o=o(" \u2014 "),TN=a("a"),o4o=o("FlaubertWithLMHeadModel"),r4o=o(" (FlauBERT model)"),t4o=l(),n1=a("li"),Nle=a("strong"),a4o=o("fnet"),n4o=o(" \u2014 "),MN=a("a"),s4o=o("FNetForMaskedLM"),l4o=o(" (FNet model)"),i4o=l(),s1=a("li"),jle=a("strong"),d4o=o("funnel"),c4o=o(" \u2014 "),EN=a("a"),f4o=o("FunnelForMaskedLM"),m4o=o(" (Funnel Transformer model)"),g4o=l(),l1=a("li"),Dle=a("strong"),h4o=o("ibert"),p4o=o(" \u2014 "),CN=a("a"),u4o=o("IBertForMaskedLM"),_4o=o(" (I-BERT model)"),b4o=l(),i1=a("li"),Gle=a("strong"),v4o=o("layoutlm"),F4o=o(" \u2014 "),wN=a("a"),T4o=o("LayoutLMForMaskedLM"),M4o=o(" (LayoutLM model)"),E4o=l(),d1=a("li"),Ole=a("strong"),C4o=o("longformer"),w4o=o(" \u2014 "),AN=a("a"),A4o=o("LongformerForMaskedLM"),y4o=o(" (Longformer model)"),L4o=l(),c1=a("li"),Vle=a("strong"),x4o=o("mbart"),$4o=o(" \u2014 "),yN=a("a"),k4o=o("MBartForConditionalGeneration"),S4o=o(" (mBART model)"),R4o=l(),f1=a("li"),Xle=a("strong"),B4o=o("megatron-bert"),P4o=o(" \u2014 "),LN=a("a"),I4o=o("MegatronBertForMaskedLM"),q4o=o(" (MegatronBert model)"),N4o=l(),m1=a("li"),zle=a("strong"),j4o=o("mobilebert"),D4o=o(" \u2014 "),xN=a("a"),G4o=o("MobileBertForMaskedLM"),O4o=o(" (MobileBERT model)"),V4o=l(),g1=a("li"),Qle=a("strong"),X4o=o("mpnet"),z4o=o(" \u2014 "),$N=a("a"),Q4o=o("MPNetForMaskedLM"),W4o=o(" (MPNet model)"),H4o=l(),h1=a("li"),Wle=a("strong"),U4o=o("nystromformer"),J4o=o(" \u2014 "),kN=a("a"),Y4o=o("NystromformerForMaskedLM"),K4o=o(" (Nystromformer model)"),Z4o=l(),p1=a("li"),Hle=a("strong"),eEo=o("perceiver"),oEo=o(" \u2014 "),SN=a("a"),rEo=o("PerceiverForMaskedLM"),tEo=o(" (Perceiver model)"),aEo=l(),u1=a("li"),Ule=a("strong"),nEo=o("qdqbert"),sEo=o(" \u2014 "),RN=a("a"),lEo=o("QDQBertForMaskedLM"),iEo=o(" (QDQBert model)"),dEo=l(),_1=a("li"),Jle=a("strong"),cEo=o("reformer"),fEo=o(" \u2014 "),BN=a("a"),mEo=o("ReformerForMaskedLM"),gEo=o(" (Reformer model)"),hEo=l(),b1=a("li"),Yle=a("strong"),pEo=o("rembert"),uEo=o(" \u2014 "),PN=a("a"),_Eo=o("RemBertForMaskedLM"),bEo=o(" (RemBERT model)"),vEo=l(),v1=a("li"),Kle=a("strong"),FEo=o("roberta"),TEo=o(" \u2014 "),IN=a("a"),MEo=o("RobertaForMaskedLM"),EEo=o(" (RoBERTa model)"),CEo=l(),F1=a("li"),Zle=a("strong"),wEo=o("roformer"),AEo=o(" \u2014 "),qN=a("a"),yEo=o("RoFormerForMaskedLM"),LEo=o(" (RoFormer model)"),xEo=l(),T1=a("li"),eie=a("strong"),$Eo=o("squeezebert"),kEo=o(" \u2014 "),NN=a("a"),SEo=o("SqueezeBertForMaskedLM"),REo=o(" (SqueezeBERT model)"),BEo=l(),M1=a("li"),oie=a("strong"),PEo=o("tapas"),IEo=o(" \u2014 "),jN=a("a"),qEo=o("TapasForMaskedLM"),NEo=o(" (TAPAS model)"),jEo=l(),E1=a("li"),rie=a("strong"),DEo=o("wav2vec2"),GEo=o(" \u2014 "),tie=a("code"),OEo=o("Wav2Vec2ForMaskedLM"),VEo=o(" (Wav2Vec2 model)"),XEo=l(),C1=a("li"),aie=a("strong"),zEo=o("xlm"),QEo=o(" \u2014 "),DN=a("a"),WEo=o("XLMWithLMHeadModel"),HEo=o(" (XLM model)"),UEo=l(),w1=a("li"),nie=a("strong"),JEo=o("xlm-roberta"),YEo=o(" \u2014 "),GN=a("a"),KEo=o("XLMRobertaForMaskedLM"),ZEo=o(" (XLM-RoBERTa model)"),eCo=l(),A1=a("li"),sie=a("strong"),oCo=o("xlm-roberta-xl"),rCo=o(" \u2014 "),ON=a("a"),tCo=o("XLMRobertaXLForMaskedLM"),aCo=o(" (XLM-RoBERTa-XL model)"),nCo=l(),y1=a("li"),lie=a("strong"),sCo=o("yoso"),lCo=o(" \u2014 "),VN=a("a"),iCo=o("YosoForMaskedLM"),dCo=o(" (YOSO model)"),cCo=l(),L1=a("p"),fCo=o("The model is set in evaluation mode by default using "),iie=a("code"),mCo=o("model.eval()"),gCo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),die=a("code"),hCo=o("model.train()"),pCo=l(),F(x1.$$.fragment),cBe=l(),yi=a("h2"),$1=a("a"),cie=a("span"),F(d0.$$.fragment),uCo=l(),fie=a("span"),_Co=o("AutoModelForSeq2SeqLM"),fBe=l(),So=a("div"),F(c0.$$.fragment),bCo=l(),Li=a("p"),vCo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),XN=a("a"),FCo=o("from_pretrained()"),TCo=o(" class method or the "),zN=a("a"),MCo=o("from_config()"),ECo=o(` class
method.`),CCo=l(),f0=a("p"),wCo=o("This class cannot be instantiated directly using "),mie=a("code"),ACo=o("__init__()"),yCo=o(" (throws an error)."),LCo=l(),tt=a("div"),F(m0.$$.fragment),xCo=l(),gie=a("p"),$Co=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),kCo=l(),xi=a("p"),SCo=o(`Note:
Loading a model from its configuration file does `),hie=a("strong"),RCo=o("not"),BCo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QN=a("a"),PCo=o("from_pretrained()"),ICo=o(" to load the model weights."),qCo=l(),F(k1.$$.fragment),NCo=l(),Ke=a("div"),F(g0.$$.fragment),jCo=l(),pie=a("p"),DCo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),GCo=l(),ya=a("p"),OCo=o("The model class to instantiate is selected based on the "),uie=a("code"),VCo=o("model_type"),XCo=o(` property of the config object (either
passed as an argument or loaded from `),_ie=a("code"),zCo=o("pretrained_model_name_or_path"),QCo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bie=a("code"),WCo=o("pretrained_model_name_or_path"),HCo=o(":"),UCo=l(),he=a("ul"),S1=a("li"),vie=a("strong"),JCo=o("bart"),YCo=o(" \u2014 "),WN=a("a"),KCo=o("BartForConditionalGeneration"),ZCo=o(" (BART model)"),e3o=l(),R1=a("li"),Fie=a("strong"),o3o=o("bigbird_pegasus"),r3o=o(" \u2014 "),HN=a("a"),t3o=o("BigBirdPegasusForConditionalGeneration"),a3o=o(" (BigBirdPegasus model)"),n3o=l(),B1=a("li"),Tie=a("strong"),s3o=o("blenderbot"),l3o=o(" \u2014 "),UN=a("a"),i3o=o("BlenderbotForConditionalGeneration"),d3o=o(" (Blenderbot model)"),c3o=l(),P1=a("li"),Mie=a("strong"),f3o=o("blenderbot-small"),m3o=o(" \u2014 "),JN=a("a"),g3o=o("BlenderbotSmallForConditionalGeneration"),h3o=o(" (BlenderbotSmall model)"),p3o=l(),I1=a("li"),Eie=a("strong"),u3o=o("encoder-decoder"),_3o=o(" \u2014 "),YN=a("a"),b3o=o("EncoderDecoderModel"),v3o=o(" (Encoder decoder model)"),F3o=l(),q1=a("li"),Cie=a("strong"),T3o=o("fsmt"),M3o=o(" \u2014 "),KN=a("a"),E3o=o("FSMTForConditionalGeneration"),C3o=o(" (FairSeq Machine-Translation model)"),w3o=l(),N1=a("li"),wie=a("strong"),A3o=o("led"),y3o=o(" \u2014 "),ZN=a("a"),L3o=o("LEDForConditionalGeneration"),x3o=o(" (LED model)"),$3o=l(),j1=a("li"),Aie=a("strong"),k3o=o("m2m_100"),S3o=o(" \u2014 "),ej=a("a"),R3o=o("M2M100ForConditionalGeneration"),B3o=o(" (M2M100 model)"),P3o=l(),D1=a("li"),yie=a("strong"),I3o=o("marian"),q3o=o(" \u2014 "),oj=a("a"),N3o=o("MarianMTModel"),j3o=o(" (Marian model)"),D3o=l(),G1=a("li"),Lie=a("strong"),G3o=o("mbart"),O3o=o(" \u2014 "),rj=a("a"),V3o=o("MBartForConditionalGeneration"),X3o=o(" (mBART model)"),z3o=l(),O1=a("li"),xie=a("strong"),Q3o=o("mt5"),W3o=o(" \u2014 "),tj=a("a"),H3o=o("MT5ForConditionalGeneration"),U3o=o(" (mT5 model)"),J3o=l(),V1=a("li"),$ie=a("strong"),Y3o=o("pegasus"),K3o=o(" \u2014 "),aj=a("a"),Z3o=o("PegasusForConditionalGeneration"),ewo=o(" (Pegasus model)"),owo=l(),X1=a("li"),kie=a("strong"),rwo=o("plbart"),two=o(" \u2014 "),nj=a("a"),awo=o("PLBartForConditionalGeneration"),nwo=o(" (PLBart model)"),swo=l(),z1=a("li"),Sie=a("strong"),lwo=o("prophetnet"),iwo=o(" \u2014 "),sj=a("a"),dwo=o("ProphetNetForConditionalGeneration"),cwo=o(" (ProphetNet model)"),fwo=l(),Q1=a("li"),Rie=a("strong"),mwo=o("t5"),gwo=o(" \u2014 "),lj=a("a"),hwo=o("T5ForConditionalGeneration"),pwo=o(" (T5 model)"),uwo=l(),W1=a("li"),Bie=a("strong"),_wo=o("tapex"),bwo=o(" \u2014 "),ij=a("a"),vwo=o("BartForConditionalGeneration"),Fwo=o(" (TAPEX model)"),Two=l(),H1=a("li"),Pie=a("strong"),Mwo=o("xlm-prophetnet"),Ewo=o(" \u2014 "),dj=a("a"),Cwo=o("XLMProphetNetForConditionalGeneration"),wwo=o(" (XLMProphetNet model)"),Awo=l(),U1=a("p"),ywo=o("The model is set in evaluation mode by default using "),Iie=a("code"),Lwo=o("model.eval()"),xwo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),qie=a("code"),$wo=o("model.train()"),kwo=l(),F(J1.$$.fragment),mBe=l(),$i=a("h2"),Y1=a("a"),Nie=a("span"),F(h0.$$.fragment),Swo=l(),jie=a("span"),Rwo=o("AutoModelForSequenceClassification"),gBe=l(),Ro=a("div"),F(p0.$$.fragment),Bwo=l(),ki=a("p"),Pwo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),cj=a("a"),Iwo=o("from_pretrained()"),qwo=o(" class method or the "),fj=a("a"),Nwo=o("from_config()"),jwo=o(` class
method.`),Dwo=l(),u0=a("p"),Gwo=o("This class cannot be instantiated directly using "),Die=a("code"),Owo=o("__init__()"),Vwo=o(" (throws an error)."),Xwo=l(),at=a("div"),F(_0.$$.fragment),zwo=l(),Gie=a("p"),Qwo=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Wwo=l(),Si=a("p"),Hwo=o(`Note:
Loading a model from its configuration file does `),Oie=a("strong"),Uwo=o("not"),Jwo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mj=a("a"),Ywo=o("from_pretrained()"),Kwo=o(" to load the model weights."),Zwo=l(),F(K1.$$.fragment),eAo=l(),Ze=a("div"),F(b0.$$.fragment),oAo=l(),Vie=a("p"),rAo=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),tAo=l(),La=a("p"),aAo=o("The model class to instantiate is selected based on the "),Xie=a("code"),nAo=o("model_type"),sAo=o(` property of the config object (either
passed as an argument or loaded from `),zie=a("code"),lAo=o("pretrained_model_name_or_path"),iAo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qie=a("code"),dAo=o("pretrained_model_name_or_path"),cAo=o(":"),fAo=l(),q=a("ul"),Z1=a("li"),Wie=a("strong"),mAo=o("albert"),gAo=o(" \u2014 "),gj=a("a"),hAo=o("AlbertForSequenceClassification"),pAo=o(" (ALBERT model)"),uAo=l(),e9=a("li"),Hie=a("strong"),_Ao=o("bart"),bAo=o(" \u2014 "),hj=a("a"),vAo=o("BartForSequenceClassification"),FAo=o(" (BART model)"),TAo=l(),o9=a("li"),Uie=a("strong"),MAo=o("bert"),EAo=o(" \u2014 "),pj=a("a"),CAo=o("BertForSequenceClassification"),wAo=o(" (BERT model)"),AAo=l(),r9=a("li"),Jie=a("strong"),yAo=o("big_bird"),LAo=o(" \u2014 "),uj=a("a"),xAo=o("BigBirdForSequenceClassification"),$Ao=o(" (BigBird model)"),kAo=l(),t9=a("li"),Yie=a("strong"),SAo=o("bigbird_pegasus"),RAo=o(" \u2014 "),_j=a("a"),BAo=o("BigBirdPegasusForSequenceClassification"),PAo=o(" (BigBirdPegasus model)"),IAo=l(),a9=a("li"),Kie=a("strong"),qAo=o("camembert"),NAo=o(" \u2014 "),bj=a("a"),jAo=o("CamembertForSequenceClassification"),DAo=o(" (CamemBERT model)"),GAo=l(),n9=a("li"),Zie=a("strong"),OAo=o("canine"),VAo=o(" \u2014 "),vj=a("a"),XAo=o("CanineForSequenceClassification"),zAo=o(" (Canine model)"),QAo=l(),s9=a("li"),ede=a("strong"),WAo=o("convbert"),HAo=o(" \u2014 "),Fj=a("a"),UAo=o("ConvBertForSequenceClassification"),JAo=o(" (ConvBERT model)"),YAo=l(),l9=a("li"),ode=a("strong"),KAo=o("ctrl"),ZAo=o(" \u2014 "),Tj=a("a"),e0o=o("CTRLForSequenceClassification"),o0o=o(" (CTRL model)"),r0o=l(),i9=a("li"),rde=a("strong"),t0o=o("data2vec-text"),a0o=o(" \u2014 "),Mj=a("a"),n0o=o("Data2VecTextForSequenceClassification"),s0o=o(" (Data2VecText model)"),l0o=l(),d9=a("li"),tde=a("strong"),i0o=o("deberta"),d0o=o(" \u2014 "),Ej=a("a"),c0o=o("DebertaForSequenceClassification"),f0o=o(" (DeBERTa model)"),m0o=l(),c9=a("li"),ade=a("strong"),g0o=o("deberta-v2"),h0o=o(" \u2014 "),Cj=a("a"),p0o=o("DebertaV2ForSequenceClassification"),u0o=o(" (DeBERTa-v2 model)"),_0o=l(),f9=a("li"),nde=a("strong"),b0o=o("distilbert"),v0o=o(" \u2014 "),wj=a("a"),F0o=o("DistilBertForSequenceClassification"),T0o=o(" (DistilBERT model)"),M0o=l(),m9=a("li"),sde=a("strong"),E0o=o("electra"),C0o=o(" \u2014 "),Aj=a("a"),w0o=o("ElectraForSequenceClassification"),A0o=o(" (ELECTRA model)"),y0o=l(),g9=a("li"),lde=a("strong"),L0o=o("flaubert"),x0o=o(" \u2014 "),yj=a("a"),$0o=o("FlaubertForSequenceClassification"),k0o=o(" (FlauBERT model)"),S0o=l(),h9=a("li"),ide=a("strong"),R0o=o("fnet"),B0o=o(" \u2014 "),Lj=a("a"),P0o=o("FNetForSequenceClassification"),I0o=o(" (FNet model)"),q0o=l(),p9=a("li"),dde=a("strong"),N0o=o("funnel"),j0o=o(" \u2014 "),xj=a("a"),D0o=o("FunnelForSequenceClassification"),G0o=o(" (Funnel Transformer model)"),O0o=l(),u9=a("li"),cde=a("strong"),V0o=o("gpt2"),X0o=o(" \u2014 "),$j=a("a"),z0o=o("GPT2ForSequenceClassification"),Q0o=o(" (OpenAI GPT-2 model)"),W0o=l(),_9=a("li"),fde=a("strong"),H0o=o("gpt_neo"),U0o=o(" \u2014 "),kj=a("a"),J0o=o("GPTNeoForSequenceClassification"),Y0o=o(" (GPT Neo model)"),K0o=l(),b9=a("li"),mde=a("strong"),Z0o=o("gptj"),eyo=o(" \u2014 "),Sj=a("a"),oyo=o("GPTJForSequenceClassification"),ryo=o(" (GPT-J model)"),tyo=l(),v9=a("li"),gde=a("strong"),ayo=o("ibert"),nyo=o(" \u2014 "),Rj=a("a"),syo=o("IBertForSequenceClassification"),lyo=o(" (I-BERT model)"),iyo=l(),F9=a("li"),hde=a("strong"),dyo=o("layoutlm"),cyo=o(" \u2014 "),Bj=a("a"),fyo=o("LayoutLMForSequenceClassification"),myo=o(" (LayoutLM model)"),gyo=l(),T9=a("li"),pde=a("strong"),hyo=o("layoutlmv2"),pyo=o(" \u2014 "),Pj=a("a"),uyo=o("LayoutLMv2ForSequenceClassification"),_yo=o(" (LayoutLMv2 model)"),byo=l(),M9=a("li"),ude=a("strong"),vyo=o("led"),Fyo=o(" \u2014 "),Ij=a("a"),Tyo=o("LEDForSequenceClassification"),Myo=o(" (LED model)"),Eyo=l(),E9=a("li"),_de=a("strong"),Cyo=o("longformer"),wyo=o(" \u2014 "),qj=a("a"),Ayo=o("LongformerForSequenceClassification"),yyo=o(" (Longformer model)"),Lyo=l(),C9=a("li"),bde=a("strong"),xyo=o("mbart"),$yo=o(" \u2014 "),Nj=a("a"),kyo=o("MBartForSequenceClassification"),Syo=o(" (mBART model)"),Ryo=l(),w9=a("li"),vde=a("strong"),Byo=o("megatron-bert"),Pyo=o(" \u2014 "),jj=a("a"),Iyo=o("MegatronBertForSequenceClassification"),qyo=o(" (MegatronBert model)"),Nyo=l(),A9=a("li"),Fde=a("strong"),jyo=o("mobilebert"),Dyo=o(" \u2014 "),Dj=a("a"),Gyo=o("MobileBertForSequenceClassification"),Oyo=o(" (MobileBERT model)"),Vyo=l(),y9=a("li"),Tde=a("strong"),Xyo=o("mpnet"),zyo=o(" \u2014 "),Gj=a("a"),Qyo=o("MPNetForSequenceClassification"),Wyo=o(" (MPNet model)"),Hyo=l(),L9=a("li"),Mde=a("strong"),Uyo=o("nystromformer"),Jyo=o(" \u2014 "),Oj=a("a"),Yyo=o("NystromformerForSequenceClassification"),Kyo=o(" (Nystromformer model)"),Zyo=l(),x9=a("li"),Ede=a("strong"),eLo=o("openai-gpt"),oLo=o(" \u2014 "),Vj=a("a"),rLo=o("OpenAIGPTForSequenceClassification"),tLo=o(" (OpenAI GPT model)"),aLo=l(),$9=a("li"),Cde=a("strong"),nLo=o("perceiver"),sLo=o(" \u2014 "),Xj=a("a"),lLo=o("PerceiverForSequenceClassification"),iLo=o(" (Perceiver model)"),dLo=l(),k9=a("li"),wde=a("strong"),cLo=o("plbart"),fLo=o(" \u2014 "),zj=a("a"),mLo=o("PLBartForSequenceClassification"),gLo=o(" (PLBart model)"),hLo=l(),S9=a("li"),Ade=a("strong"),pLo=o("qdqbert"),uLo=o(" \u2014 "),Qj=a("a"),_Lo=o("QDQBertForSequenceClassification"),bLo=o(" (QDQBert model)"),vLo=l(),R9=a("li"),yde=a("strong"),FLo=o("reformer"),TLo=o(" \u2014 "),Wj=a("a"),MLo=o("ReformerForSequenceClassification"),ELo=o(" (Reformer model)"),CLo=l(),B9=a("li"),Lde=a("strong"),wLo=o("rembert"),ALo=o(" \u2014 "),Hj=a("a"),yLo=o("RemBertForSequenceClassification"),LLo=o(" (RemBERT model)"),xLo=l(),P9=a("li"),xde=a("strong"),$Lo=o("roberta"),kLo=o(" \u2014 "),Uj=a("a"),SLo=o("RobertaForSequenceClassification"),RLo=o(" (RoBERTa model)"),BLo=l(),I9=a("li"),$de=a("strong"),PLo=o("roformer"),ILo=o(" \u2014 "),Jj=a("a"),qLo=o("RoFormerForSequenceClassification"),NLo=o(" (RoFormer model)"),jLo=l(),q9=a("li"),kde=a("strong"),DLo=o("squeezebert"),GLo=o(" \u2014 "),Yj=a("a"),OLo=o("SqueezeBertForSequenceClassification"),VLo=o(" (SqueezeBERT model)"),XLo=l(),N9=a("li"),Sde=a("strong"),zLo=o("tapas"),QLo=o(" \u2014 "),Kj=a("a"),WLo=o("TapasForSequenceClassification"),HLo=o(" (TAPAS model)"),ULo=l(),j9=a("li"),Rde=a("strong"),JLo=o("tapex"),YLo=o(" \u2014 "),Zj=a("a"),KLo=o("BartForSequenceClassification"),ZLo=o(" (TAPEX model)"),e8o=l(),D9=a("li"),Bde=a("strong"),o8o=o("transfo-xl"),r8o=o(" \u2014 "),eD=a("a"),t8o=o("TransfoXLForSequenceClassification"),a8o=o(" (Transformer-XL model)"),n8o=l(),G9=a("li"),Pde=a("strong"),s8o=o("xlm"),l8o=o(" \u2014 "),oD=a("a"),i8o=o("XLMForSequenceClassification"),d8o=o(" (XLM model)"),c8o=l(),O9=a("li"),Ide=a("strong"),f8o=o("xlm-roberta"),m8o=o(" \u2014 "),rD=a("a"),g8o=o("XLMRobertaForSequenceClassification"),h8o=o(" (XLM-RoBERTa model)"),p8o=l(),V9=a("li"),qde=a("strong"),u8o=o("xlm-roberta-xl"),_8o=o(" \u2014 "),tD=a("a"),b8o=o("XLMRobertaXLForSequenceClassification"),v8o=o(" (XLM-RoBERTa-XL model)"),F8o=l(),X9=a("li"),Nde=a("strong"),T8o=o("xlnet"),M8o=o(" \u2014 "),aD=a("a"),E8o=o("XLNetForSequenceClassification"),C8o=o(" (XLNet model)"),w8o=l(),z9=a("li"),jde=a("strong"),A8o=o("yoso"),y8o=o(" \u2014 "),nD=a("a"),L8o=o("YosoForSequenceClassification"),x8o=o(" (YOSO model)"),$8o=l(),Q9=a("p"),k8o=o("The model is set in evaluation mode by default using "),Dde=a("code"),S8o=o("model.eval()"),R8o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Gde=a("code"),B8o=o("model.train()"),P8o=l(),F(W9.$$.fragment),hBe=l(),Ri=a("h2"),H9=a("a"),Ode=a("span"),F(v0.$$.fragment),I8o=l(),Vde=a("span"),q8o=o("AutoModelForMultipleChoice"),pBe=l(),Bo=a("div"),F(F0.$$.fragment),N8o=l(),Bi=a("p"),j8o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),sD=a("a"),D8o=o("from_pretrained()"),G8o=o(" class method or the "),lD=a("a"),O8o=o("from_config()"),V8o=o(` class
method.`),X8o=l(),T0=a("p"),z8o=o("This class cannot be instantiated directly using "),Xde=a("code"),Q8o=o("__init__()"),W8o=o(" (throws an error)."),H8o=l(),nt=a("div"),F(M0.$$.fragment),U8o=l(),zde=a("p"),J8o=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Y8o=l(),Pi=a("p"),K8o=o(`Note:
Loading a model from its configuration file does `),Qde=a("strong"),Z8o=o("not"),exo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),iD=a("a"),oxo=o("from_pretrained()"),rxo=o(" to load the model weights."),txo=l(),F(U9.$$.fragment),axo=l(),eo=a("div"),F(E0.$$.fragment),nxo=l(),Wde=a("p"),sxo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),lxo=l(),xa=a("p"),ixo=o("The model class to instantiate is selected based on the "),Hde=a("code"),dxo=o("model_type"),cxo=o(` property of the config object (either
passed as an argument or loaded from `),Ude=a("code"),fxo=o("pretrained_model_name_or_path"),mxo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jde=a("code"),gxo=o("pretrained_model_name_or_path"),hxo=o(":"),pxo=l(),Y=a("ul"),J9=a("li"),Yde=a("strong"),uxo=o("albert"),_xo=o(" \u2014 "),dD=a("a"),bxo=o("AlbertForMultipleChoice"),vxo=o(" (ALBERT model)"),Fxo=l(),Y9=a("li"),Kde=a("strong"),Txo=o("bert"),Mxo=o(" \u2014 "),cD=a("a"),Exo=o("BertForMultipleChoice"),Cxo=o(" (BERT model)"),wxo=l(),K9=a("li"),Zde=a("strong"),Axo=o("big_bird"),yxo=o(" \u2014 "),fD=a("a"),Lxo=o("BigBirdForMultipleChoice"),xxo=o(" (BigBird model)"),$xo=l(),Z9=a("li"),ece=a("strong"),kxo=o("camembert"),Sxo=o(" \u2014 "),mD=a("a"),Rxo=o("CamembertForMultipleChoice"),Bxo=o(" (CamemBERT model)"),Pxo=l(),eb=a("li"),oce=a("strong"),Ixo=o("canine"),qxo=o(" \u2014 "),gD=a("a"),Nxo=o("CanineForMultipleChoice"),jxo=o(" (Canine model)"),Dxo=l(),ob=a("li"),rce=a("strong"),Gxo=o("convbert"),Oxo=o(" \u2014 "),hD=a("a"),Vxo=o("ConvBertForMultipleChoice"),Xxo=o(" (ConvBERT model)"),zxo=l(),rb=a("li"),tce=a("strong"),Qxo=o("data2vec-text"),Wxo=o(" \u2014 "),pD=a("a"),Hxo=o("Data2VecTextForMultipleChoice"),Uxo=o(" (Data2VecText model)"),Jxo=l(),tb=a("li"),ace=a("strong"),Yxo=o("distilbert"),Kxo=o(" \u2014 "),uD=a("a"),Zxo=o("DistilBertForMultipleChoice"),e7o=o(" (DistilBERT model)"),o7o=l(),ab=a("li"),nce=a("strong"),r7o=o("electra"),t7o=o(" \u2014 "),_D=a("a"),a7o=o("ElectraForMultipleChoice"),n7o=o(" (ELECTRA model)"),s7o=l(),nb=a("li"),sce=a("strong"),l7o=o("flaubert"),i7o=o(" \u2014 "),bD=a("a"),d7o=o("FlaubertForMultipleChoice"),c7o=o(" (FlauBERT model)"),f7o=l(),sb=a("li"),lce=a("strong"),m7o=o("fnet"),g7o=o(" \u2014 "),vD=a("a"),h7o=o("FNetForMultipleChoice"),p7o=o(" (FNet model)"),u7o=l(),lb=a("li"),ice=a("strong"),_7o=o("funnel"),b7o=o(" \u2014 "),FD=a("a"),v7o=o("FunnelForMultipleChoice"),F7o=o(" (Funnel Transformer model)"),T7o=l(),ib=a("li"),dce=a("strong"),M7o=o("ibert"),E7o=o(" \u2014 "),TD=a("a"),C7o=o("IBertForMultipleChoice"),w7o=o(" (I-BERT model)"),A7o=l(),db=a("li"),cce=a("strong"),y7o=o("longformer"),L7o=o(" \u2014 "),MD=a("a"),x7o=o("LongformerForMultipleChoice"),$7o=o(" (Longformer model)"),k7o=l(),cb=a("li"),fce=a("strong"),S7o=o("megatron-bert"),R7o=o(" \u2014 "),ED=a("a"),B7o=o("MegatronBertForMultipleChoice"),P7o=o(" (MegatronBert model)"),I7o=l(),fb=a("li"),mce=a("strong"),q7o=o("mobilebert"),N7o=o(" \u2014 "),CD=a("a"),j7o=o("MobileBertForMultipleChoice"),D7o=o(" (MobileBERT model)"),G7o=l(),mb=a("li"),gce=a("strong"),O7o=o("mpnet"),V7o=o(" \u2014 "),wD=a("a"),X7o=o("MPNetForMultipleChoice"),z7o=o(" (MPNet model)"),Q7o=l(),gb=a("li"),hce=a("strong"),W7o=o("nystromformer"),H7o=o(" \u2014 "),AD=a("a"),U7o=o("NystromformerForMultipleChoice"),J7o=o(" (Nystromformer model)"),Y7o=l(),hb=a("li"),pce=a("strong"),K7o=o("qdqbert"),Z7o=o(" \u2014 "),yD=a("a"),e$o=o("QDQBertForMultipleChoice"),o$o=o(" (QDQBert model)"),r$o=l(),pb=a("li"),uce=a("strong"),t$o=o("rembert"),a$o=o(" \u2014 "),LD=a("a"),n$o=o("RemBertForMultipleChoice"),s$o=o(" (RemBERT model)"),l$o=l(),ub=a("li"),_ce=a("strong"),i$o=o("roberta"),d$o=o(" \u2014 "),xD=a("a"),c$o=o("RobertaForMultipleChoice"),f$o=o(" (RoBERTa model)"),m$o=l(),_b=a("li"),bce=a("strong"),g$o=o("roformer"),h$o=o(" \u2014 "),$D=a("a"),p$o=o("RoFormerForMultipleChoice"),u$o=o(" (RoFormer model)"),_$o=l(),bb=a("li"),vce=a("strong"),b$o=o("squeezebert"),v$o=o(" \u2014 "),kD=a("a"),F$o=o("SqueezeBertForMultipleChoice"),T$o=o(" (SqueezeBERT model)"),M$o=l(),vb=a("li"),Fce=a("strong"),E$o=o("xlm"),C$o=o(" \u2014 "),SD=a("a"),w$o=o("XLMForMultipleChoice"),A$o=o(" (XLM model)"),y$o=l(),Fb=a("li"),Tce=a("strong"),L$o=o("xlm-roberta"),x$o=o(" \u2014 "),RD=a("a"),$$o=o("XLMRobertaForMultipleChoice"),k$o=o(" (XLM-RoBERTa model)"),S$o=l(),Tb=a("li"),Mce=a("strong"),R$o=o("xlm-roberta-xl"),B$o=o(" \u2014 "),BD=a("a"),P$o=o("XLMRobertaXLForMultipleChoice"),I$o=o(" (XLM-RoBERTa-XL model)"),q$o=l(),Mb=a("li"),Ece=a("strong"),N$o=o("xlnet"),j$o=o(" \u2014 "),PD=a("a"),D$o=o("XLNetForMultipleChoice"),G$o=o(" (XLNet model)"),O$o=l(),Eb=a("li"),Cce=a("strong"),V$o=o("yoso"),X$o=o(" \u2014 "),ID=a("a"),z$o=o("YosoForMultipleChoice"),Q$o=o(" (YOSO model)"),W$o=l(),Cb=a("p"),H$o=o("The model is set in evaluation mode by default using "),wce=a("code"),U$o=o("model.eval()"),J$o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ace=a("code"),Y$o=o("model.train()"),K$o=l(),F(wb.$$.fragment),uBe=l(),Ii=a("h2"),Ab=a("a"),yce=a("span"),F(C0.$$.fragment),Z$o=l(),Lce=a("span"),eko=o("AutoModelForNextSentencePrediction"),_Be=l(),Po=a("div"),F(w0.$$.fragment),oko=l(),qi=a("p"),rko=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),qD=a("a"),tko=o("from_pretrained()"),ako=o(" class method or the "),ND=a("a"),nko=o("from_config()"),sko=o(` class
method.`),lko=l(),A0=a("p"),iko=o("This class cannot be instantiated directly using "),xce=a("code"),dko=o("__init__()"),cko=o(" (throws an error)."),fko=l(),st=a("div"),F(y0.$$.fragment),mko=l(),$ce=a("p"),gko=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),hko=l(),Ni=a("p"),pko=o(`Note:
Loading a model from its configuration file does `),kce=a("strong"),uko=o("not"),_ko=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jD=a("a"),bko=o("from_pretrained()"),vko=o(" to load the model weights."),Fko=l(),F(yb.$$.fragment),Tko=l(),oo=a("div"),F(L0.$$.fragment),Mko=l(),Sce=a("p"),Eko=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Cko=l(),$a=a("p"),wko=o("The model class to instantiate is selected based on the "),Rce=a("code"),Ako=o("model_type"),yko=o(` property of the config object (either
passed as an argument or loaded from `),Bce=a("code"),Lko=o("pretrained_model_name_or_path"),xko=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Pce=a("code"),$ko=o("pretrained_model_name_or_path"),kko=o(":"),Sko=l(),Ur=a("ul"),Lb=a("li"),Ice=a("strong"),Rko=o("bert"),Bko=o(" \u2014 "),DD=a("a"),Pko=o("BertForNextSentencePrediction"),Iko=o(" (BERT model)"),qko=l(),xb=a("li"),qce=a("strong"),Nko=o("fnet"),jko=o(" \u2014 "),GD=a("a"),Dko=o("FNetForNextSentencePrediction"),Gko=o(" (FNet model)"),Oko=l(),$b=a("li"),Nce=a("strong"),Vko=o("megatron-bert"),Xko=o(" \u2014 "),OD=a("a"),zko=o("MegatronBertForNextSentencePrediction"),Qko=o(" (MegatronBert model)"),Wko=l(),kb=a("li"),jce=a("strong"),Hko=o("mobilebert"),Uko=o(" \u2014 "),VD=a("a"),Jko=o("MobileBertForNextSentencePrediction"),Yko=o(" (MobileBERT model)"),Kko=l(),Sb=a("li"),Dce=a("strong"),Zko=o("qdqbert"),eSo=o(" \u2014 "),XD=a("a"),oSo=o("QDQBertForNextSentencePrediction"),rSo=o(" (QDQBert model)"),tSo=l(),Rb=a("p"),aSo=o("The model is set in evaluation mode by default using "),Gce=a("code"),nSo=o("model.eval()"),sSo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Oce=a("code"),lSo=o("model.train()"),iSo=l(),F(Bb.$$.fragment),bBe=l(),ji=a("h2"),Pb=a("a"),Vce=a("span"),F(x0.$$.fragment),dSo=l(),Xce=a("span"),cSo=o("AutoModelForTokenClassification"),vBe=l(),Io=a("div"),F($0.$$.fragment),fSo=l(),Di=a("p"),mSo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),zD=a("a"),gSo=o("from_pretrained()"),hSo=o(" class method or the "),QD=a("a"),pSo=o("from_config()"),uSo=o(` class
method.`),_So=l(),k0=a("p"),bSo=o("This class cannot be instantiated directly using "),zce=a("code"),vSo=o("__init__()"),FSo=o(" (throws an error)."),TSo=l(),lt=a("div"),F(S0.$$.fragment),MSo=l(),Qce=a("p"),ESo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),CSo=l(),Gi=a("p"),wSo=o(`Note:
Loading a model from its configuration file does `),Wce=a("strong"),ASo=o("not"),ySo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),WD=a("a"),LSo=o("from_pretrained()"),xSo=o(" to load the model weights."),$So=l(),F(Ib.$$.fragment),kSo=l(),ro=a("div"),F(R0.$$.fragment),SSo=l(),Hce=a("p"),RSo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),BSo=l(),ka=a("p"),PSo=o("The model class to instantiate is selected based on the "),Uce=a("code"),ISo=o("model_type"),qSo=o(` property of the config object (either
passed as an argument or loaded from `),Jce=a("code"),NSo=o("pretrained_model_name_or_path"),jSo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yce=a("code"),DSo=o("pretrained_model_name_or_path"),GSo=o(":"),OSo=l(),U=a("ul"),qb=a("li"),Kce=a("strong"),VSo=o("albert"),XSo=o(" \u2014 "),HD=a("a"),zSo=o("AlbertForTokenClassification"),QSo=o(" (ALBERT model)"),WSo=l(),Nb=a("li"),Zce=a("strong"),HSo=o("bert"),USo=o(" \u2014 "),UD=a("a"),JSo=o("BertForTokenClassification"),YSo=o(" (BERT model)"),KSo=l(),jb=a("li"),efe=a("strong"),ZSo=o("big_bird"),eRo=o(" \u2014 "),JD=a("a"),oRo=o("BigBirdForTokenClassification"),rRo=o(" (BigBird model)"),tRo=l(),Db=a("li"),ofe=a("strong"),aRo=o("camembert"),nRo=o(" \u2014 "),YD=a("a"),sRo=o("CamembertForTokenClassification"),lRo=o(" (CamemBERT model)"),iRo=l(),Gb=a("li"),rfe=a("strong"),dRo=o("canine"),cRo=o(" \u2014 "),KD=a("a"),fRo=o("CanineForTokenClassification"),mRo=o(" (Canine model)"),gRo=l(),Ob=a("li"),tfe=a("strong"),hRo=o("convbert"),pRo=o(" \u2014 "),ZD=a("a"),uRo=o("ConvBertForTokenClassification"),_Ro=o(" (ConvBERT model)"),bRo=l(),Vb=a("li"),afe=a("strong"),vRo=o("data2vec-text"),FRo=o(" \u2014 "),eG=a("a"),TRo=o("Data2VecTextForTokenClassification"),MRo=o(" (Data2VecText model)"),ERo=l(),Xb=a("li"),nfe=a("strong"),CRo=o("deberta"),wRo=o(" \u2014 "),oG=a("a"),ARo=o("DebertaForTokenClassification"),yRo=o(" (DeBERTa model)"),LRo=l(),zb=a("li"),sfe=a("strong"),xRo=o("deberta-v2"),$Ro=o(" \u2014 "),rG=a("a"),kRo=o("DebertaV2ForTokenClassification"),SRo=o(" (DeBERTa-v2 model)"),RRo=l(),Qb=a("li"),lfe=a("strong"),BRo=o("distilbert"),PRo=o(" \u2014 "),tG=a("a"),IRo=o("DistilBertForTokenClassification"),qRo=o(" (DistilBERT model)"),NRo=l(),Wb=a("li"),ife=a("strong"),jRo=o("electra"),DRo=o(" \u2014 "),aG=a("a"),GRo=o("ElectraForTokenClassification"),ORo=o(" (ELECTRA model)"),VRo=l(),Hb=a("li"),dfe=a("strong"),XRo=o("flaubert"),zRo=o(" \u2014 "),nG=a("a"),QRo=o("FlaubertForTokenClassification"),WRo=o(" (FlauBERT model)"),HRo=l(),Ub=a("li"),cfe=a("strong"),URo=o("fnet"),JRo=o(" \u2014 "),sG=a("a"),YRo=o("FNetForTokenClassification"),KRo=o(" (FNet model)"),ZRo=l(),Jb=a("li"),ffe=a("strong"),eBo=o("funnel"),oBo=o(" \u2014 "),lG=a("a"),rBo=o("FunnelForTokenClassification"),tBo=o(" (Funnel Transformer model)"),aBo=l(),Yb=a("li"),mfe=a("strong"),nBo=o("gpt2"),sBo=o(" \u2014 "),iG=a("a"),lBo=o("GPT2ForTokenClassification"),iBo=o(" (OpenAI GPT-2 model)"),dBo=l(),Kb=a("li"),gfe=a("strong"),cBo=o("ibert"),fBo=o(" \u2014 "),dG=a("a"),mBo=o("IBertForTokenClassification"),gBo=o(" (I-BERT model)"),hBo=l(),Zb=a("li"),hfe=a("strong"),pBo=o("layoutlm"),uBo=o(" \u2014 "),cG=a("a"),_Bo=o("LayoutLMForTokenClassification"),bBo=o(" (LayoutLM model)"),vBo=l(),e2=a("li"),pfe=a("strong"),FBo=o("layoutlmv2"),TBo=o(" \u2014 "),fG=a("a"),MBo=o("LayoutLMv2ForTokenClassification"),EBo=o(" (LayoutLMv2 model)"),CBo=l(),o2=a("li"),ufe=a("strong"),wBo=o("longformer"),ABo=o(" \u2014 "),mG=a("a"),yBo=o("LongformerForTokenClassification"),LBo=o(" (Longformer model)"),xBo=l(),r2=a("li"),_fe=a("strong"),$Bo=o("megatron-bert"),kBo=o(" \u2014 "),gG=a("a"),SBo=o("MegatronBertForTokenClassification"),RBo=o(" (MegatronBert model)"),BBo=l(),t2=a("li"),bfe=a("strong"),PBo=o("mobilebert"),IBo=o(" \u2014 "),hG=a("a"),qBo=o("MobileBertForTokenClassification"),NBo=o(" (MobileBERT model)"),jBo=l(),a2=a("li"),vfe=a("strong"),DBo=o("mpnet"),GBo=o(" \u2014 "),pG=a("a"),OBo=o("MPNetForTokenClassification"),VBo=o(" (MPNet model)"),XBo=l(),n2=a("li"),Ffe=a("strong"),zBo=o("nystromformer"),QBo=o(" \u2014 "),uG=a("a"),WBo=o("NystromformerForTokenClassification"),HBo=o(" (Nystromformer model)"),UBo=l(),s2=a("li"),Tfe=a("strong"),JBo=o("qdqbert"),YBo=o(" \u2014 "),_G=a("a"),KBo=o("QDQBertForTokenClassification"),ZBo=o(" (QDQBert model)"),ePo=l(),l2=a("li"),Mfe=a("strong"),oPo=o("rembert"),rPo=o(" \u2014 "),bG=a("a"),tPo=o("RemBertForTokenClassification"),aPo=o(" (RemBERT model)"),nPo=l(),i2=a("li"),Efe=a("strong"),sPo=o("roberta"),lPo=o(" \u2014 "),vG=a("a"),iPo=o("RobertaForTokenClassification"),dPo=o(" (RoBERTa model)"),cPo=l(),d2=a("li"),Cfe=a("strong"),fPo=o("roformer"),mPo=o(" \u2014 "),FG=a("a"),gPo=o("RoFormerForTokenClassification"),hPo=o(" (RoFormer model)"),pPo=l(),c2=a("li"),wfe=a("strong"),uPo=o("squeezebert"),_Po=o(" \u2014 "),TG=a("a"),bPo=o("SqueezeBertForTokenClassification"),vPo=o(" (SqueezeBERT model)"),FPo=l(),f2=a("li"),Afe=a("strong"),TPo=o("xlm"),MPo=o(" \u2014 "),MG=a("a"),EPo=o("XLMForTokenClassification"),CPo=o(" (XLM model)"),wPo=l(),m2=a("li"),yfe=a("strong"),APo=o("xlm-roberta"),yPo=o(" \u2014 "),EG=a("a"),LPo=o("XLMRobertaForTokenClassification"),xPo=o(" (XLM-RoBERTa model)"),$Po=l(),g2=a("li"),Lfe=a("strong"),kPo=o("xlm-roberta-xl"),SPo=o(" \u2014 "),CG=a("a"),RPo=o("XLMRobertaXLForTokenClassification"),BPo=o(" (XLM-RoBERTa-XL model)"),PPo=l(),h2=a("li"),xfe=a("strong"),IPo=o("xlnet"),qPo=o(" \u2014 "),wG=a("a"),NPo=o("XLNetForTokenClassification"),jPo=o(" (XLNet model)"),DPo=l(),p2=a("li"),$fe=a("strong"),GPo=o("yoso"),OPo=o(" \u2014 "),AG=a("a"),VPo=o("YosoForTokenClassification"),XPo=o(" (YOSO model)"),zPo=l(),u2=a("p"),QPo=o("The model is set in evaluation mode by default using "),kfe=a("code"),WPo=o("model.eval()"),HPo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Sfe=a("code"),UPo=o("model.train()"),JPo=l(),F(_2.$$.fragment),FBe=l(),Oi=a("h2"),b2=a("a"),Rfe=a("span"),F(B0.$$.fragment),YPo=l(),Bfe=a("span"),KPo=o("AutoModelForQuestionAnswering"),TBe=l(),qo=a("div"),F(P0.$$.fragment),ZPo=l(),Vi=a("p"),eIo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),yG=a("a"),oIo=o("from_pretrained()"),rIo=o(" class method or the "),LG=a("a"),tIo=o("from_config()"),aIo=o(` class
method.`),nIo=l(),I0=a("p"),sIo=o("This class cannot be instantiated directly using "),Pfe=a("code"),lIo=o("__init__()"),iIo=o(" (throws an error)."),dIo=l(),it=a("div"),F(q0.$$.fragment),cIo=l(),Ife=a("p"),fIo=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),mIo=l(),Xi=a("p"),gIo=o(`Note:
Loading a model from its configuration file does `),qfe=a("strong"),hIo=o("not"),pIo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xG=a("a"),uIo=o("from_pretrained()"),_Io=o(" to load the model weights."),bIo=l(),F(v2.$$.fragment),vIo=l(),to=a("div"),F(N0.$$.fragment),FIo=l(),Nfe=a("p"),TIo=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),MIo=l(),Sa=a("p"),EIo=o("The model class to instantiate is selected based on the "),jfe=a("code"),CIo=o("model_type"),wIo=o(` property of the config object (either
passed as an argument or loaded from `),Dfe=a("code"),AIo=o("pretrained_model_name_or_path"),yIo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gfe=a("code"),LIo=o("pretrained_model_name_or_path"),xIo=o(":"),$Io=l(),O=a("ul"),F2=a("li"),Ofe=a("strong"),kIo=o("albert"),SIo=o(" \u2014 "),$G=a("a"),RIo=o("AlbertForQuestionAnswering"),BIo=o(" (ALBERT model)"),PIo=l(),T2=a("li"),Vfe=a("strong"),IIo=o("bart"),qIo=o(" \u2014 "),kG=a("a"),NIo=o("BartForQuestionAnswering"),jIo=o(" (BART model)"),DIo=l(),M2=a("li"),Xfe=a("strong"),GIo=o("bert"),OIo=o(" \u2014 "),SG=a("a"),VIo=o("BertForQuestionAnswering"),XIo=o(" (BERT model)"),zIo=l(),E2=a("li"),zfe=a("strong"),QIo=o("big_bird"),WIo=o(" \u2014 "),RG=a("a"),HIo=o("BigBirdForQuestionAnswering"),UIo=o(" (BigBird model)"),JIo=l(),C2=a("li"),Qfe=a("strong"),YIo=o("bigbird_pegasus"),KIo=o(" \u2014 "),BG=a("a"),ZIo=o("BigBirdPegasusForQuestionAnswering"),eqo=o(" (BigBirdPegasus model)"),oqo=l(),w2=a("li"),Wfe=a("strong"),rqo=o("camembert"),tqo=o(" \u2014 "),PG=a("a"),aqo=o("CamembertForQuestionAnswering"),nqo=o(" (CamemBERT model)"),sqo=l(),A2=a("li"),Hfe=a("strong"),lqo=o("canine"),iqo=o(" \u2014 "),IG=a("a"),dqo=o("CanineForQuestionAnswering"),cqo=o(" (Canine model)"),fqo=l(),y2=a("li"),Ufe=a("strong"),mqo=o("convbert"),gqo=o(" \u2014 "),qG=a("a"),hqo=o("ConvBertForQuestionAnswering"),pqo=o(" (ConvBERT model)"),uqo=l(),L2=a("li"),Jfe=a("strong"),_qo=o("data2vec-text"),bqo=o(" \u2014 "),NG=a("a"),vqo=o("Data2VecTextForQuestionAnswering"),Fqo=o(" (Data2VecText model)"),Tqo=l(),x2=a("li"),Yfe=a("strong"),Mqo=o("deberta"),Eqo=o(" \u2014 "),jG=a("a"),Cqo=o("DebertaForQuestionAnswering"),wqo=o(" (DeBERTa model)"),Aqo=l(),$2=a("li"),Kfe=a("strong"),yqo=o("deberta-v2"),Lqo=o(" \u2014 "),DG=a("a"),xqo=o("DebertaV2ForQuestionAnswering"),$qo=o(" (DeBERTa-v2 model)"),kqo=l(),k2=a("li"),Zfe=a("strong"),Sqo=o("distilbert"),Rqo=o(" \u2014 "),GG=a("a"),Bqo=o("DistilBertForQuestionAnswering"),Pqo=o(" (DistilBERT model)"),Iqo=l(),S2=a("li"),eme=a("strong"),qqo=o("electra"),Nqo=o(" \u2014 "),OG=a("a"),jqo=o("ElectraForQuestionAnswering"),Dqo=o(" (ELECTRA model)"),Gqo=l(),R2=a("li"),ome=a("strong"),Oqo=o("flaubert"),Vqo=o(" \u2014 "),VG=a("a"),Xqo=o("FlaubertForQuestionAnsweringSimple"),zqo=o(" (FlauBERT model)"),Qqo=l(),B2=a("li"),rme=a("strong"),Wqo=o("fnet"),Hqo=o(" \u2014 "),XG=a("a"),Uqo=o("FNetForQuestionAnswering"),Jqo=o(" (FNet model)"),Yqo=l(),P2=a("li"),tme=a("strong"),Kqo=o("funnel"),Zqo=o(" \u2014 "),zG=a("a"),eNo=o("FunnelForQuestionAnswering"),oNo=o(" (Funnel Transformer model)"),rNo=l(),I2=a("li"),ame=a("strong"),tNo=o("gptj"),aNo=o(" \u2014 "),QG=a("a"),nNo=o("GPTJForQuestionAnswering"),sNo=o(" (GPT-J model)"),lNo=l(),q2=a("li"),nme=a("strong"),iNo=o("ibert"),dNo=o(" \u2014 "),WG=a("a"),cNo=o("IBertForQuestionAnswering"),fNo=o(" (I-BERT model)"),mNo=l(),N2=a("li"),sme=a("strong"),gNo=o("layoutlmv2"),hNo=o(" \u2014 "),HG=a("a"),pNo=o("LayoutLMv2ForQuestionAnswering"),uNo=o(" (LayoutLMv2 model)"),_No=l(),j2=a("li"),lme=a("strong"),bNo=o("led"),vNo=o(" \u2014 "),UG=a("a"),FNo=o("LEDForQuestionAnswering"),TNo=o(" (LED model)"),MNo=l(),D2=a("li"),ime=a("strong"),ENo=o("longformer"),CNo=o(" \u2014 "),JG=a("a"),wNo=o("LongformerForQuestionAnswering"),ANo=o(" (Longformer model)"),yNo=l(),G2=a("li"),dme=a("strong"),LNo=o("lxmert"),xNo=o(" \u2014 "),YG=a("a"),$No=o("LxmertForQuestionAnswering"),kNo=o(" (LXMERT model)"),SNo=l(),O2=a("li"),cme=a("strong"),RNo=o("mbart"),BNo=o(" \u2014 "),KG=a("a"),PNo=o("MBartForQuestionAnswering"),INo=o(" (mBART model)"),qNo=l(),V2=a("li"),fme=a("strong"),NNo=o("megatron-bert"),jNo=o(" \u2014 "),ZG=a("a"),DNo=o("MegatronBertForQuestionAnswering"),GNo=o(" (MegatronBert model)"),ONo=l(),X2=a("li"),mme=a("strong"),VNo=o("mobilebert"),XNo=o(" \u2014 "),eO=a("a"),zNo=o("MobileBertForQuestionAnswering"),QNo=o(" (MobileBERT model)"),WNo=l(),z2=a("li"),gme=a("strong"),HNo=o("mpnet"),UNo=o(" \u2014 "),oO=a("a"),JNo=o("MPNetForQuestionAnswering"),YNo=o(" (MPNet model)"),KNo=l(),Q2=a("li"),hme=a("strong"),ZNo=o("nystromformer"),ejo=o(" \u2014 "),rO=a("a"),ojo=o("NystromformerForQuestionAnswering"),rjo=o(" (Nystromformer model)"),tjo=l(),W2=a("li"),pme=a("strong"),ajo=o("qdqbert"),njo=o(" \u2014 "),tO=a("a"),sjo=o("QDQBertForQuestionAnswering"),ljo=o(" (QDQBert model)"),ijo=l(),H2=a("li"),ume=a("strong"),djo=o("reformer"),cjo=o(" \u2014 "),aO=a("a"),fjo=o("ReformerForQuestionAnswering"),mjo=o(" (Reformer model)"),gjo=l(),U2=a("li"),_me=a("strong"),hjo=o("rembert"),pjo=o(" \u2014 "),nO=a("a"),ujo=o("RemBertForQuestionAnswering"),_jo=o(" (RemBERT model)"),bjo=l(),J2=a("li"),bme=a("strong"),vjo=o("roberta"),Fjo=o(" \u2014 "),sO=a("a"),Tjo=o("RobertaForQuestionAnswering"),Mjo=o(" (RoBERTa model)"),Ejo=l(),Y2=a("li"),vme=a("strong"),Cjo=o("roformer"),wjo=o(" \u2014 "),lO=a("a"),Ajo=o("RoFormerForQuestionAnswering"),yjo=o(" (RoFormer model)"),Ljo=l(),K2=a("li"),Fme=a("strong"),xjo=o("splinter"),$jo=o(" \u2014 "),iO=a("a"),kjo=o("SplinterForQuestionAnswering"),Sjo=o(" (Splinter model)"),Rjo=l(),Z2=a("li"),Tme=a("strong"),Bjo=o("squeezebert"),Pjo=o(" \u2014 "),dO=a("a"),Ijo=o("SqueezeBertForQuestionAnswering"),qjo=o(" (SqueezeBERT model)"),Njo=l(),e5=a("li"),Mme=a("strong"),jjo=o("xlm"),Djo=o(" \u2014 "),cO=a("a"),Gjo=o("XLMForQuestionAnsweringSimple"),Ojo=o(" (XLM model)"),Vjo=l(),o5=a("li"),Eme=a("strong"),Xjo=o("xlm-roberta"),zjo=o(" \u2014 "),fO=a("a"),Qjo=o("XLMRobertaForQuestionAnswering"),Wjo=o(" (XLM-RoBERTa model)"),Hjo=l(),r5=a("li"),Cme=a("strong"),Ujo=o("xlm-roberta-xl"),Jjo=o(" \u2014 "),mO=a("a"),Yjo=o("XLMRobertaXLForQuestionAnswering"),Kjo=o(" (XLM-RoBERTa-XL model)"),Zjo=l(),t5=a("li"),wme=a("strong"),eDo=o("xlnet"),oDo=o(" \u2014 "),gO=a("a"),rDo=o("XLNetForQuestionAnsweringSimple"),tDo=o(" (XLNet model)"),aDo=l(),a5=a("li"),Ame=a("strong"),nDo=o("yoso"),sDo=o(" \u2014 "),hO=a("a"),lDo=o("YosoForQuestionAnswering"),iDo=o(" (YOSO model)"),dDo=l(),n5=a("p"),cDo=o("The model is set in evaluation mode by default using "),yme=a("code"),fDo=o("model.eval()"),mDo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Lme=a("code"),gDo=o("model.train()"),hDo=l(),F(s5.$$.fragment),MBe=l(),zi=a("h2"),l5=a("a"),xme=a("span"),F(j0.$$.fragment),pDo=l(),$me=a("span"),uDo=o("AutoModelForTableQuestionAnswering"),EBe=l(),No=a("div"),F(D0.$$.fragment),_Do=l(),Qi=a("p"),bDo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),pO=a("a"),vDo=o("from_pretrained()"),FDo=o(" class method or the "),uO=a("a"),TDo=o("from_config()"),MDo=o(` class
method.`),EDo=l(),G0=a("p"),CDo=o("This class cannot be instantiated directly using "),kme=a("code"),wDo=o("__init__()"),ADo=o(" (throws an error)."),yDo=l(),dt=a("div"),F(O0.$$.fragment),LDo=l(),Sme=a("p"),xDo=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),$Do=l(),Wi=a("p"),kDo=o(`Note:
Loading a model from its configuration file does `),Rme=a("strong"),SDo=o("not"),RDo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_O=a("a"),BDo=o("from_pretrained()"),PDo=o(" to load the model weights."),IDo=l(),F(i5.$$.fragment),qDo=l(),ao=a("div"),F(V0.$$.fragment),NDo=l(),Bme=a("p"),jDo=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),DDo=l(),Ra=a("p"),GDo=o("The model class to instantiate is selected based on the "),Pme=a("code"),ODo=o("model_type"),VDo=o(` property of the config object (either
passed as an argument or loaded from `),Ime=a("code"),XDo=o("pretrained_model_name_or_path"),zDo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qme=a("code"),QDo=o("pretrained_model_name_or_path"),WDo=o(":"),HDo=l(),Nme=a("ul"),d5=a("li"),jme=a("strong"),UDo=o("tapas"),JDo=o(" \u2014 "),bO=a("a"),YDo=o("TapasForQuestionAnswering"),KDo=o(" (TAPAS model)"),ZDo=l(),c5=a("p"),eGo=o("The model is set in evaluation mode by default using "),Dme=a("code"),oGo=o("model.eval()"),rGo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Gme=a("code"),tGo=o("model.train()"),aGo=l(),F(f5.$$.fragment),CBe=l(),Hi=a("h2"),m5=a("a"),Ome=a("span"),F(X0.$$.fragment),nGo=l(),Vme=a("span"),sGo=o("AutoModelForImageClassification"),wBe=l(),jo=a("div"),F(z0.$$.fragment),lGo=l(),Ui=a("p"),iGo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),vO=a("a"),dGo=o("from_pretrained()"),cGo=o(" class method or the "),FO=a("a"),fGo=o("from_config()"),mGo=o(` class
method.`),gGo=l(),Q0=a("p"),hGo=o("This class cannot be instantiated directly using "),Xme=a("code"),pGo=o("__init__()"),uGo=o(" (throws an error)."),_Go=l(),ct=a("div"),F(W0.$$.fragment),bGo=l(),zme=a("p"),vGo=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),FGo=l(),Ji=a("p"),TGo=o(`Note:
Loading a model from its configuration file does `),Qme=a("strong"),MGo=o("not"),EGo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),TO=a("a"),CGo=o("from_pretrained()"),wGo=o(" to load the model weights."),AGo=l(),F(g5.$$.fragment),yGo=l(),no=a("div"),F(H0.$$.fragment),LGo=l(),Wme=a("p"),xGo=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),$Go=l(),Ba=a("p"),kGo=o("The model class to instantiate is selected based on the "),Hme=a("code"),SGo=o("model_type"),RGo=o(` property of the config object (either
passed as an argument or loaded from `),Ume=a("code"),BGo=o("pretrained_model_name_or_path"),PGo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jme=a("code"),IGo=o("pretrained_model_name_or_path"),qGo=o(":"),NGo=l(),ve=a("ul"),h5=a("li"),Yme=a("strong"),jGo=o("beit"),DGo=o(" \u2014 "),MO=a("a"),GGo=o("BeitForImageClassification"),OGo=o(" (BEiT model)"),VGo=l(),p5=a("li"),Kme=a("strong"),XGo=o("convnext"),zGo=o(" \u2014 "),EO=a("a"),QGo=o("ConvNextForImageClassification"),WGo=o(" (ConvNext model)"),HGo=l(),u5=a("li"),Zme=a("strong"),UGo=o("data2vec-vision"),JGo=o(" \u2014 "),CO=a("a"),YGo=o("Data2VecVisionForImageClassification"),KGo=o(" (Data2VecVision model)"),ZGo=l(),xs=a("li"),ege=a("strong"),eOo=o("deit"),oOo=o(" \u2014 "),wO=a("a"),rOo=o("DeiTForImageClassification"),tOo=o(" or "),AO=a("a"),aOo=o("DeiTForImageClassificationWithTeacher"),nOo=o(" (DeiT model)"),sOo=l(),_5=a("li"),oge=a("strong"),lOo=o("imagegpt"),iOo=o(" \u2014 "),yO=a("a"),dOo=o("ImageGPTForImageClassification"),cOo=o(" (ImageGPT model)"),fOo=l(),ft=a("li"),rge=a("strong"),mOo=o("perceiver"),gOo=o(" \u2014 "),LO=a("a"),hOo=o("PerceiverForImageClassificationLearned"),pOo=o(" or "),xO=a("a"),uOo=o("PerceiverForImageClassificationFourier"),_Oo=o(" or "),$O=a("a"),bOo=o("PerceiverForImageClassificationConvProcessing"),vOo=o(" (Perceiver model)"),FOo=l(),b5=a("li"),tge=a("strong"),TOo=o("poolformer"),MOo=o(" \u2014 "),kO=a("a"),EOo=o("PoolFormerForImageClassification"),COo=o(" (PoolFormer model)"),wOo=l(),v5=a("li"),age=a("strong"),AOo=o("regnet"),yOo=o(" \u2014 "),SO=a("a"),LOo=o("RegNetForImageClassification"),xOo=o(" (RegNet model)"),$Oo=l(),F5=a("li"),nge=a("strong"),kOo=o("resnet"),SOo=o(" \u2014 "),RO=a("a"),ROo=o("ResNetForImageClassification"),BOo=o(" (ResNet model)"),POo=l(),T5=a("li"),sge=a("strong"),IOo=o("segformer"),qOo=o(" \u2014 "),BO=a("a"),NOo=o("SegformerForImageClassification"),jOo=o(" (SegFormer model)"),DOo=l(),M5=a("li"),lge=a("strong"),GOo=o("swin"),OOo=o(" \u2014 "),PO=a("a"),VOo=o("SwinForImageClassification"),XOo=o(" (Swin model)"),zOo=l(),E5=a("li"),ige=a("strong"),QOo=o("van"),WOo=o(" \u2014 "),IO=a("a"),HOo=o("VanForImageClassification"),UOo=o(" (VAN model)"),JOo=l(),C5=a("li"),dge=a("strong"),YOo=o("vit"),KOo=o(" \u2014 "),qO=a("a"),ZOo=o("ViTForImageClassification"),eVo=o(" (ViT model)"),oVo=l(),w5=a("p"),rVo=o("The model is set in evaluation mode by default using "),cge=a("code"),tVo=o("model.eval()"),aVo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),fge=a("code"),nVo=o("model.train()"),sVo=l(),F(A5.$$.fragment),ABe=l(),Yi=a("h2"),y5=a("a"),mge=a("span"),F(U0.$$.fragment),lVo=l(),gge=a("span"),iVo=o("AutoModelForVision2Seq"),yBe=l(),Do=a("div"),F(J0.$$.fragment),dVo=l(),Ki=a("p"),cVo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),NO=a("a"),fVo=o("from_pretrained()"),mVo=o(" class method or the "),jO=a("a"),gVo=o("from_config()"),hVo=o(` class
method.`),pVo=l(),Y0=a("p"),uVo=o("This class cannot be instantiated directly using "),hge=a("code"),_Vo=o("__init__()"),bVo=o(" (throws an error)."),vVo=l(),mt=a("div"),F(K0.$$.fragment),FVo=l(),pge=a("p"),TVo=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),MVo=l(),Zi=a("p"),EVo=o(`Note:
Loading a model from its configuration file does `),uge=a("strong"),CVo=o("not"),wVo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),DO=a("a"),AVo=o("from_pretrained()"),yVo=o(" to load the model weights."),LVo=l(),F(L5.$$.fragment),xVo=l(),so=a("div"),F(Z0.$$.fragment),$Vo=l(),_ge=a("p"),kVo=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),SVo=l(),Pa=a("p"),RVo=o("The model class to instantiate is selected based on the "),bge=a("code"),BVo=o("model_type"),PVo=o(` property of the config object (either
passed as an argument or loaded from `),vge=a("code"),IVo=o("pretrained_model_name_or_path"),qVo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fge=a("code"),NVo=o("pretrained_model_name_or_path"),jVo=o(":"),DVo=l(),Tge=a("ul"),x5=a("li"),Mge=a("strong"),GVo=o("vision-encoder-decoder"),OVo=o(" \u2014 "),GO=a("a"),VVo=o("VisionEncoderDecoderModel"),XVo=o(" (Vision Encoder decoder model)"),zVo=l(),$5=a("p"),QVo=o("The model is set in evaluation mode by default using "),Ege=a("code"),WVo=o("model.eval()"),HVo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Cge=a("code"),UVo=o("model.train()"),JVo=l(),F(k5.$$.fragment),LBe=l(),ed=a("h2"),S5=a("a"),wge=a("span"),F(ey.$$.fragment),YVo=l(),Age=a("span"),KVo=o("AutoModelForAudioClassification"),xBe=l(),Go=a("div"),F(oy.$$.fragment),ZVo=l(),od=a("p"),eXo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),OO=a("a"),oXo=o("from_pretrained()"),rXo=o(" class method or the "),VO=a("a"),tXo=o("from_config()"),aXo=o(` class
method.`),nXo=l(),ry=a("p"),sXo=o("This class cannot be instantiated directly using "),yge=a("code"),lXo=o("__init__()"),iXo=o(" (throws an error)."),dXo=l(),gt=a("div"),F(ty.$$.fragment),cXo=l(),Lge=a("p"),fXo=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),mXo=l(),rd=a("p"),gXo=o(`Note:
Loading a model from its configuration file does `),xge=a("strong"),hXo=o("not"),pXo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),XO=a("a"),uXo=o("from_pretrained()"),_Xo=o(" to load the model weights."),bXo=l(),F(R5.$$.fragment),vXo=l(),lo=a("div"),F(ay.$$.fragment),FXo=l(),$ge=a("p"),TXo=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),MXo=l(),Ia=a("p"),EXo=o("The model class to instantiate is selected based on the "),kge=a("code"),CXo=o("model_type"),wXo=o(` property of the config object (either
passed as an argument or loaded from `),Sge=a("code"),AXo=o("pretrained_model_name_or_path"),yXo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rge=a("code"),LXo=o("pretrained_model_name_or_path"),xXo=o(":"),$Xo=l(),Ne=a("ul"),B5=a("li"),Bge=a("strong"),kXo=o("data2vec-audio"),SXo=o(" \u2014 "),zO=a("a"),RXo=o("Data2VecAudioForSequenceClassification"),BXo=o(" (Data2VecAudio model)"),PXo=l(),P5=a("li"),Pge=a("strong"),IXo=o("hubert"),qXo=o(" \u2014 "),QO=a("a"),NXo=o("HubertForSequenceClassification"),jXo=o(" (Hubert model)"),DXo=l(),I5=a("li"),Ige=a("strong"),GXo=o("sew"),OXo=o(" \u2014 "),WO=a("a"),VXo=o("SEWForSequenceClassification"),XXo=o(" (SEW model)"),zXo=l(),q5=a("li"),qge=a("strong"),QXo=o("sew-d"),WXo=o(" \u2014 "),HO=a("a"),HXo=o("SEWDForSequenceClassification"),UXo=o(" (SEW-D model)"),JXo=l(),N5=a("li"),Nge=a("strong"),YXo=o("unispeech"),KXo=o(" \u2014 "),UO=a("a"),ZXo=o("UniSpeechForSequenceClassification"),ezo=o(" (UniSpeech model)"),ozo=l(),j5=a("li"),jge=a("strong"),rzo=o("unispeech-sat"),tzo=o(" \u2014 "),JO=a("a"),azo=o("UniSpeechSatForSequenceClassification"),nzo=o(" (UniSpeechSat model)"),szo=l(),D5=a("li"),Dge=a("strong"),lzo=o("wav2vec2"),izo=o(" \u2014 "),YO=a("a"),dzo=o("Wav2Vec2ForSequenceClassification"),czo=o(" (Wav2Vec2 model)"),fzo=l(),G5=a("li"),Gge=a("strong"),mzo=o("wavlm"),gzo=o(" \u2014 "),KO=a("a"),hzo=o("WavLMForSequenceClassification"),pzo=o(" (WavLM model)"),uzo=l(),O5=a("p"),_zo=o("The model is set in evaluation mode by default using "),Oge=a("code"),bzo=o("model.eval()"),vzo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Vge=a("code"),Fzo=o("model.train()"),Tzo=l(),F(V5.$$.fragment),$Be=l(),td=a("h2"),X5=a("a"),Xge=a("span"),F(ny.$$.fragment),Mzo=l(),zge=a("span"),Ezo=o("AutoModelForAudioFrameClassification"),kBe=l(),Oo=a("div"),F(sy.$$.fragment),Czo=l(),ad=a("p"),wzo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),ZO=a("a"),Azo=o("from_pretrained()"),yzo=o(" class method or the "),eV=a("a"),Lzo=o("from_config()"),xzo=o(` class
method.`),$zo=l(),ly=a("p"),kzo=o("This class cannot be instantiated directly using "),Qge=a("code"),Szo=o("__init__()"),Rzo=o(" (throws an error)."),Bzo=l(),ht=a("div"),F(iy.$$.fragment),Pzo=l(),Wge=a("p"),Izo=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),qzo=l(),nd=a("p"),Nzo=o(`Note:
Loading a model from its configuration file does `),Hge=a("strong"),jzo=o("not"),Dzo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oV=a("a"),Gzo=o("from_pretrained()"),Ozo=o(" to load the model weights."),Vzo=l(),F(z5.$$.fragment),Xzo=l(),io=a("div"),F(dy.$$.fragment),zzo=l(),Uge=a("p"),Qzo=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),Wzo=l(),qa=a("p"),Hzo=o("The model class to instantiate is selected based on the "),Jge=a("code"),Uzo=o("model_type"),Jzo=o(` property of the config object (either
passed as an argument or loaded from `),Yge=a("code"),Yzo=o("pretrained_model_name_or_path"),Kzo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kge=a("code"),Zzo=o("pretrained_model_name_or_path"),eQo=o(":"),oQo=l(),Na=a("ul"),Q5=a("li"),Zge=a("strong"),rQo=o("data2vec-audio"),tQo=o(" \u2014 "),rV=a("a"),aQo=o("Data2VecAudioForAudioFrameClassification"),nQo=o(" (Data2VecAudio model)"),sQo=l(),W5=a("li"),ehe=a("strong"),lQo=o("unispeech-sat"),iQo=o(" \u2014 "),tV=a("a"),dQo=o("UniSpeechSatForAudioFrameClassification"),cQo=o(" (UniSpeechSat model)"),fQo=l(),H5=a("li"),ohe=a("strong"),mQo=o("wav2vec2"),gQo=o(" \u2014 "),aV=a("a"),hQo=o("Wav2Vec2ForAudioFrameClassification"),pQo=o(" (Wav2Vec2 model)"),uQo=l(),U5=a("li"),rhe=a("strong"),_Qo=o("wavlm"),bQo=o(" \u2014 "),nV=a("a"),vQo=o("WavLMForAudioFrameClassification"),FQo=o(" (WavLM model)"),TQo=l(),J5=a("p"),MQo=o("The model is set in evaluation mode by default using "),the=a("code"),EQo=o("model.eval()"),CQo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ahe=a("code"),wQo=o("model.train()"),AQo=l(),F(Y5.$$.fragment),SBe=l(),sd=a("h2"),K5=a("a"),nhe=a("span"),F(cy.$$.fragment),yQo=l(),she=a("span"),LQo=o("AutoModelForCTC"),RBe=l(),Vo=a("div"),F(fy.$$.fragment),xQo=l(),ld=a("p"),$Qo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),sV=a("a"),kQo=o("from_pretrained()"),SQo=o(" class method or the "),lV=a("a"),RQo=o("from_config()"),BQo=o(` class
method.`),PQo=l(),my=a("p"),IQo=o("This class cannot be instantiated directly using "),lhe=a("code"),qQo=o("__init__()"),NQo=o(" (throws an error)."),jQo=l(),pt=a("div"),F(gy.$$.fragment),DQo=l(),ihe=a("p"),GQo=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),OQo=l(),id=a("p"),VQo=o(`Note:
Loading a model from its configuration file does `),dhe=a("strong"),XQo=o("not"),zQo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),iV=a("a"),QQo=o("from_pretrained()"),WQo=o(" to load the model weights."),HQo=l(),F(Z5.$$.fragment),UQo=l(),co=a("div"),F(hy.$$.fragment),JQo=l(),che=a("p"),YQo=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),KQo=l(),ja=a("p"),ZQo=o("The model class to instantiate is selected based on the "),fhe=a("code"),eWo=o("model_type"),oWo=o(` property of the config object (either
passed as an argument or loaded from `),mhe=a("code"),rWo=o("pretrained_model_name_or_path"),tWo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ghe=a("code"),aWo=o("pretrained_model_name_or_path"),nWo=o(":"),sWo=l(),je=a("ul"),ev=a("li"),hhe=a("strong"),lWo=o("data2vec-audio"),iWo=o(" \u2014 "),dV=a("a"),dWo=o("Data2VecAudioForCTC"),cWo=o(" (Data2VecAudio model)"),fWo=l(),ov=a("li"),phe=a("strong"),mWo=o("hubert"),gWo=o(" \u2014 "),cV=a("a"),hWo=o("HubertForCTC"),pWo=o(" (Hubert model)"),uWo=l(),rv=a("li"),uhe=a("strong"),_Wo=o("sew"),bWo=o(" \u2014 "),fV=a("a"),vWo=o("SEWForCTC"),FWo=o(" (SEW model)"),TWo=l(),tv=a("li"),_he=a("strong"),MWo=o("sew-d"),EWo=o(" \u2014 "),mV=a("a"),CWo=o("SEWDForCTC"),wWo=o(" (SEW-D model)"),AWo=l(),av=a("li"),bhe=a("strong"),yWo=o("unispeech"),LWo=o(" \u2014 "),gV=a("a"),xWo=o("UniSpeechForCTC"),$Wo=o(" (UniSpeech model)"),kWo=l(),nv=a("li"),vhe=a("strong"),SWo=o("unispeech-sat"),RWo=o(" \u2014 "),hV=a("a"),BWo=o("UniSpeechSatForCTC"),PWo=o(" (UniSpeechSat model)"),IWo=l(),sv=a("li"),Fhe=a("strong"),qWo=o("wav2vec2"),NWo=o(" \u2014 "),pV=a("a"),jWo=o("Wav2Vec2ForCTC"),DWo=o(" (Wav2Vec2 model)"),GWo=l(),lv=a("li"),The=a("strong"),OWo=o("wavlm"),VWo=o(" \u2014 "),uV=a("a"),XWo=o("WavLMForCTC"),zWo=o(" (WavLM model)"),QWo=l(),iv=a("p"),WWo=o("The model is set in evaluation mode by default using "),Mhe=a("code"),HWo=o("model.eval()"),UWo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ehe=a("code"),JWo=o("model.train()"),YWo=l(),F(dv.$$.fragment),BBe=l(),dd=a("h2"),cv=a("a"),Che=a("span"),F(py.$$.fragment),KWo=l(),whe=a("span"),ZWo=o("AutoModelForSpeechSeq2Seq"),PBe=l(),Xo=a("div"),F(uy.$$.fragment),eHo=l(),cd=a("p"),oHo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),_V=a("a"),rHo=o("from_pretrained()"),tHo=o(" class method or the "),bV=a("a"),aHo=o("from_config()"),nHo=o(` class
method.`),sHo=l(),_y=a("p"),lHo=o("This class cannot be instantiated directly using "),Ahe=a("code"),iHo=o("__init__()"),dHo=o(" (throws an error)."),cHo=l(),ut=a("div"),F(by.$$.fragment),fHo=l(),yhe=a("p"),mHo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),gHo=l(),fd=a("p"),hHo=o(`Note:
Loading a model from its configuration file does `),Lhe=a("strong"),pHo=o("not"),uHo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vV=a("a"),_Ho=o("from_pretrained()"),bHo=o(" to load the model weights."),vHo=l(),F(fv.$$.fragment),FHo=l(),fo=a("div"),F(vy.$$.fragment),THo=l(),xhe=a("p"),MHo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),EHo=l(),Da=a("p"),CHo=o("The model class to instantiate is selected based on the "),$he=a("code"),wHo=o("model_type"),AHo=o(` property of the config object (either
passed as an argument or loaded from `),khe=a("code"),yHo=o("pretrained_model_name_or_path"),LHo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),She=a("code"),xHo=o("pretrained_model_name_or_path"),$Ho=o(":"),kHo=l(),Fy=a("ul"),mv=a("li"),Rhe=a("strong"),SHo=o("speech-encoder-decoder"),RHo=o(" \u2014 "),FV=a("a"),BHo=o("SpeechEncoderDecoderModel"),PHo=o(" (Speech Encoder decoder model)"),IHo=l(),gv=a("li"),Bhe=a("strong"),qHo=o("speech_to_text"),NHo=o(" \u2014 "),TV=a("a"),jHo=o("Speech2TextForConditionalGeneration"),DHo=o(" (Speech2Text model)"),GHo=l(),hv=a("p"),OHo=o("The model is set in evaluation mode by default using "),Phe=a("code"),VHo=o("model.eval()"),XHo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ihe=a("code"),zHo=o("model.train()"),QHo=l(),F(pv.$$.fragment),IBe=l(),md=a("h2"),uv=a("a"),qhe=a("span"),F(Ty.$$.fragment),WHo=l(),Nhe=a("span"),HHo=o("AutoModelForAudioXVector"),qBe=l(),zo=a("div"),F(My.$$.fragment),UHo=l(),gd=a("p"),JHo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),MV=a("a"),YHo=o("from_pretrained()"),KHo=o(" class method or the "),EV=a("a"),ZHo=o("from_config()"),eUo=o(` class
method.`),oUo=l(),Ey=a("p"),rUo=o("This class cannot be instantiated directly using "),jhe=a("code"),tUo=o("__init__()"),aUo=o(" (throws an error)."),nUo=l(),_t=a("div"),F(Cy.$$.fragment),sUo=l(),Dhe=a("p"),lUo=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),iUo=l(),hd=a("p"),dUo=o(`Note:
Loading a model from its configuration file does `),Ghe=a("strong"),cUo=o("not"),fUo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),CV=a("a"),mUo=o("from_pretrained()"),gUo=o(" to load the model weights."),hUo=l(),F(_v.$$.fragment),pUo=l(),mo=a("div"),F(wy.$$.fragment),uUo=l(),Ohe=a("p"),_Uo=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),bUo=l(),Ga=a("p"),vUo=o("The model class to instantiate is selected based on the "),Vhe=a("code"),FUo=o("model_type"),TUo=o(` property of the config object (either
passed as an argument or loaded from `),Xhe=a("code"),MUo=o("pretrained_model_name_or_path"),EUo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zhe=a("code"),CUo=o("pretrained_model_name_or_path"),wUo=o(":"),AUo=l(),Oa=a("ul"),bv=a("li"),Qhe=a("strong"),yUo=o("data2vec-audio"),LUo=o(" \u2014 "),wV=a("a"),xUo=o("Data2VecAudioForXVector"),$Uo=o(" (Data2VecAudio model)"),kUo=l(),vv=a("li"),Whe=a("strong"),SUo=o("unispeech-sat"),RUo=o(" \u2014 "),AV=a("a"),BUo=o("UniSpeechSatForXVector"),PUo=o(" (UniSpeechSat model)"),IUo=l(),Fv=a("li"),Hhe=a("strong"),qUo=o("wav2vec2"),NUo=o(" \u2014 "),yV=a("a"),jUo=o("Wav2Vec2ForXVector"),DUo=o(" (Wav2Vec2 model)"),GUo=l(),Tv=a("li"),Uhe=a("strong"),OUo=o("wavlm"),VUo=o(" \u2014 "),LV=a("a"),XUo=o("WavLMForXVector"),zUo=o(" (WavLM model)"),QUo=l(),Mv=a("p"),WUo=o("The model is set in evaluation mode by default using "),Jhe=a("code"),HUo=o("model.eval()"),UUo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Yhe=a("code"),JUo=o("model.train()"),YUo=l(),F(Ev.$$.fragment),NBe=l(),pd=a("h2"),Cv=a("a"),Khe=a("span"),F(Ay.$$.fragment),KUo=l(),Zhe=a("span"),ZUo=o("AutoModelForMaskedImageModeling"),jBe=l(),Qo=a("div"),F(yy.$$.fragment),eJo=l(),ud=a("p"),oJo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),xV=a("a"),rJo=o("from_pretrained()"),tJo=o(" class method or the "),$V=a("a"),aJo=o("from_config()"),nJo=o(` class
method.`),sJo=l(),Ly=a("p"),lJo=o("This class cannot be instantiated directly using "),epe=a("code"),iJo=o("__init__()"),dJo=o(" (throws an error)."),cJo=l(),bt=a("div"),F(xy.$$.fragment),fJo=l(),ope=a("p"),mJo=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),gJo=l(),_d=a("p"),hJo=o(`Note:
Loading a model from its configuration file does `),rpe=a("strong"),pJo=o("not"),uJo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),kV=a("a"),_Jo=o("from_pretrained()"),bJo=o(" to load the model weights."),vJo=l(),F(wv.$$.fragment),FJo=l(),go=a("div"),F($y.$$.fragment),TJo=l(),tpe=a("p"),MJo=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),EJo=l(),Va=a("p"),CJo=o("The model class to instantiate is selected based on the "),ape=a("code"),wJo=o("model_type"),AJo=o(` property of the config object (either
passed as an argument or loaded from `),npe=a("code"),yJo=o("pretrained_model_name_or_path"),LJo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),spe=a("code"),xJo=o("pretrained_model_name_or_path"),$Jo=o(":"),kJo=l(),bd=a("ul"),Av=a("li"),lpe=a("strong"),SJo=o("deit"),RJo=o(" \u2014 "),SV=a("a"),BJo=o("DeiTForMaskedImageModeling"),PJo=o(" (DeiT model)"),IJo=l(),yv=a("li"),ipe=a("strong"),qJo=o("swin"),NJo=o(" \u2014 "),RV=a("a"),jJo=o("SwinForMaskedImageModeling"),DJo=o(" (Swin model)"),GJo=l(),Lv=a("li"),dpe=a("strong"),OJo=o("vit"),VJo=o(" \u2014 "),BV=a("a"),XJo=o("ViTForMaskedImageModeling"),zJo=o(" (ViT model)"),QJo=l(),xv=a("p"),WJo=o("The model is set in evaluation mode by default using "),cpe=a("code"),HJo=o("model.eval()"),UJo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),fpe=a("code"),JJo=o("model.train()"),YJo=l(),F($v.$$.fragment),DBe=l(),vd=a("h2"),kv=a("a"),mpe=a("span"),F(ky.$$.fragment),KJo=l(),gpe=a("span"),ZJo=o("AutoModelForObjectDetection"),GBe=l(),Wo=a("div"),F(Sy.$$.fragment),eYo=l(),Fd=a("p"),oYo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),PV=a("a"),rYo=o("from_pretrained()"),tYo=o(" class method or the "),IV=a("a"),aYo=o("from_config()"),nYo=o(` class
method.`),sYo=l(),Ry=a("p"),lYo=o("This class cannot be instantiated directly using "),hpe=a("code"),iYo=o("__init__()"),dYo=o(" (throws an error)."),cYo=l(),vt=a("div"),F(By.$$.fragment),fYo=l(),ppe=a("p"),mYo=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),gYo=l(),Td=a("p"),hYo=o(`Note:
Loading a model from its configuration file does `),upe=a("strong"),pYo=o("not"),uYo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qV=a("a"),_Yo=o("from_pretrained()"),bYo=o(" to load the model weights."),vYo=l(),F(Sv.$$.fragment),FYo=l(),ho=a("div"),F(Py.$$.fragment),TYo=l(),_pe=a("p"),MYo=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),EYo=l(),Xa=a("p"),CYo=o("The model class to instantiate is selected based on the "),bpe=a("code"),wYo=o("model_type"),AYo=o(` property of the config object (either
passed as an argument or loaded from `),vpe=a("code"),yYo=o("pretrained_model_name_or_path"),LYo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fpe=a("code"),xYo=o("pretrained_model_name_or_path"),$Yo=o(":"),kYo=l(),Tpe=a("ul"),Rv=a("li"),Mpe=a("strong"),SYo=o("detr"),RYo=o(" \u2014 "),NV=a("a"),BYo=o("DetrForObjectDetection"),PYo=o(" (DETR model)"),IYo=l(),Bv=a("p"),qYo=o("The model is set in evaluation mode by default using "),Epe=a("code"),NYo=o("model.eval()"),jYo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Cpe=a("code"),DYo=o("model.train()"),GYo=l(),F(Pv.$$.fragment),OBe=l(),Md=a("h2"),Iv=a("a"),wpe=a("span"),F(Iy.$$.fragment),OYo=l(),Ape=a("span"),VYo=o("AutoModelForImageSegmentation"),VBe=l(),Ho=a("div"),F(qy.$$.fragment),XYo=l(),Ed=a("p"),zYo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),jV=a("a"),QYo=o("from_pretrained()"),WYo=o(" class method or the "),DV=a("a"),HYo=o("from_config()"),UYo=o(` class
method.`),JYo=l(),Ny=a("p"),YYo=o("This class cannot be instantiated directly using "),ype=a("code"),KYo=o("__init__()"),ZYo=o(" (throws an error)."),eKo=l(),Ft=a("div"),F(jy.$$.fragment),oKo=l(),Lpe=a("p"),rKo=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),tKo=l(),Cd=a("p"),aKo=o(`Note:
Loading a model from its configuration file does `),xpe=a("strong"),nKo=o("not"),sKo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),GV=a("a"),lKo=o("from_pretrained()"),iKo=o(" to load the model weights."),dKo=l(),F(qv.$$.fragment),cKo=l(),po=a("div"),F(Dy.$$.fragment),fKo=l(),$pe=a("p"),mKo=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),gKo=l(),za=a("p"),hKo=o("The model class to instantiate is selected based on the "),kpe=a("code"),pKo=o("model_type"),uKo=o(` property of the config object (either
passed as an argument or loaded from `),Spe=a("code"),_Ko=o("pretrained_model_name_or_path"),bKo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rpe=a("code"),vKo=o("pretrained_model_name_or_path"),FKo=o(":"),TKo=l(),Bpe=a("ul"),Nv=a("li"),Ppe=a("strong"),MKo=o("detr"),EKo=o(" \u2014 "),OV=a("a"),CKo=o("DetrForSegmentation"),wKo=o(" (DETR model)"),AKo=l(),jv=a("p"),yKo=o("The model is set in evaluation mode by default using "),Ipe=a("code"),LKo=o("model.eval()"),xKo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),qpe=a("code"),$Ko=o("model.train()"),kKo=l(),F(Dv.$$.fragment),XBe=l(),wd=a("h2"),Gv=a("a"),Npe=a("span"),F(Gy.$$.fragment),SKo=l(),jpe=a("span"),RKo=o("AutoModelForSemanticSegmentation"),zBe=l(),Uo=a("div"),F(Oy.$$.fragment),BKo=l(),Ad=a("p"),PKo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),VV=a("a"),IKo=o("from_pretrained()"),qKo=o(" class method or the "),XV=a("a"),NKo=o("from_config()"),jKo=o(` class
method.`),DKo=l(),Vy=a("p"),GKo=o("This class cannot be instantiated directly using "),Dpe=a("code"),OKo=o("__init__()"),VKo=o(" (throws an error)."),XKo=l(),Tt=a("div"),F(Xy.$$.fragment),zKo=l(),Gpe=a("p"),QKo=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),WKo=l(),yd=a("p"),HKo=o(`Note:
Loading a model from its configuration file does `),Ope=a("strong"),UKo=o("not"),JKo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zV=a("a"),YKo=o("from_pretrained()"),KKo=o(" to load the model weights."),ZKo=l(),F(Ov.$$.fragment),eZo=l(),uo=a("div"),F(zy.$$.fragment),oZo=l(),Vpe=a("p"),rZo=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),tZo=l(),Qa=a("p"),aZo=o("The model class to instantiate is selected based on the "),Xpe=a("code"),nZo=o("model_type"),sZo=o(` property of the config object (either
passed as an argument or loaded from `),zpe=a("code"),lZo=o("pretrained_model_name_or_path"),iZo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qpe=a("code"),dZo=o("pretrained_model_name_or_path"),cZo=o(":"),fZo=l(),Wa=a("ul"),Vv=a("li"),Wpe=a("strong"),mZo=o("beit"),gZo=o(" \u2014 "),QV=a("a"),hZo=o("BeitForSemanticSegmentation"),pZo=o(" (BEiT model)"),uZo=l(),Xv=a("li"),Hpe=a("strong"),_Zo=o("data2vec-vision"),bZo=o(" \u2014 "),WV=a("a"),vZo=o("Data2VecVisionForSemanticSegmentation"),FZo=o(" (Data2VecVision model)"),TZo=l(),zv=a("li"),Upe=a("strong"),MZo=o("dpt"),EZo=o(" \u2014 "),HV=a("a"),CZo=o("DPTForSemanticSegmentation"),wZo=o(" (DPT model)"),AZo=l(),Qv=a("li"),Jpe=a("strong"),yZo=o("segformer"),LZo=o(" \u2014 "),UV=a("a"),xZo=o("SegformerForSemanticSegmentation"),$Zo=o(" (SegFormer model)"),kZo=l(),Wv=a("p"),SZo=o("The model is set in evaluation mode by default using "),Ype=a("code"),RZo=o("model.eval()"),BZo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Kpe=a("code"),PZo=o("model.train()"),IZo=l(),F(Hv.$$.fragment),QBe=l(),Ld=a("h2"),Uv=a("a"),Zpe=a("span"),F(Qy.$$.fragment),qZo=l(),eue=a("span"),NZo=o("AutoModelForInstanceSegmentation"),WBe=l(),Jo=a("div"),F(Wy.$$.fragment),jZo=l(),xd=a("p"),DZo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),JV=a("a"),GZo=o("from_pretrained()"),OZo=o(" class method or the "),YV=a("a"),VZo=o("from_config()"),XZo=o(` class
method.`),zZo=l(),Hy=a("p"),QZo=o("This class cannot be instantiated directly using "),oue=a("code"),WZo=o("__init__()"),HZo=o(" (throws an error)."),UZo=l(),Mt=a("div"),F(Uy.$$.fragment),JZo=l(),rue=a("p"),YZo=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),KZo=l(),$d=a("p"),ZZo=o(`Note:
Loading a model from its configuration file does `),tue=a("strong"),eer=o("not"),oer=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),KV=a("a"),rer=o("from_pretrained()"),ter=o(" to load the model weights."),aer=l(),F(Jv.$$.fragment),ner=l(),_o=a("div"),F(Jy.$$.fragment),ser=l(),aue=a("p"),ler=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),ier=l(),Ha=a("p"),der=o("The model class to instantiate is selected based on the "),nue=a("code"),cer=o("model_type"),fer=o(` property of the config object (either
passed as an argument or loaded from `),sue=a("code"),mer=o("pretrained_model_name_or_path"),ger=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lue=a("code"),her=o("pretrained_model_name_or_path"),per=o(":"),uer=l(),iue=a("ul"),Yv=a("li"),due=a("strong"),_er=o("maskformer"),ber=o(" \u2014 "),ZV=a("a"),ver=o("MaskFormerForInstanceSegmentation"),Fer=o(" (MaskFormer model)"),Ter=l(),Kv=a("p"),Mer=o("The model is set in evaluation mode by default using "),cue=a("code"),Eer=o("model.eval()"),Cer=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),fue=a("code"),wer=o("model.train()"),Aer=l(),F(Zv.$$.fragment),HBe=l(),kd=a("h2"),eF=a("a"),mue=a("span"),F(Yy.$$.fragment),yer=l(),gue=a("span"),Ler=o("TFAutoModel"),UBe=l(),Yo=a("div"),F(Ky.$$.fragment),xer=l(),Sd=a("p"),$er=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),eX=a("a"),ker=o("from_pretrained()"),Ser=o(" class method or the "),oX=a("a"),Rer=o("from_config()"),Ber=o(` class
method.`),Per=l(),Zy=a("p"),Ier=o("This class cannot be instantiated directly using "),hue=a("code"),qer=o("__init__()"),Ner=o(" (throws an error)."),jer=l(),Et=a("div"),F(eL.$$.fragment),Der=l(),pue=a("p"),Ger=o("Instantiates one of the base model classes of the library from a configuration."),Oer=l(),Rd=a("p"),Ver=o(`Note:
Loading a model from its configuration file does `),uue=a("strong"),Xer=o("not"),zer=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rX=a("a"),Qer=o("from_pretrained()"),Wer=o(" to load the model weights."),Her=l(),F(oF.$$.fragment),Uer=l(),Cr=a("div"),F(oL.$$.fragment),Jer=l(),_ue=a("p"),Yer=o("Instantiate one of the base model classes of the library from a pretrained model."),Ker=l(),Ua=a("p"),Zer=o("The model class to instantiate is selected based on the "),bue=a("code"),eor=o("model_type"),oor=o(` property of the config object (either
passed as an argument or loaded from `),vue=a("code"),ror=o("pretrained_model_name_or_path"),tor=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fue=a("code"),aor=o("pretrained_model_name_or_path"),nor=o(":"),sor=l(),j=a("ul"),rF=a("li"),Tue=a("strong"),lor=o("albert"),ior=o(" \u2014 "),tX=a("a"),dor=o("TFAlbertModel"),cor=o(" (ALBERT model)"),mor=l(),tF=a("li"),Mue=a("strong"),gor=o("bart"),hor=o(" \u2014 "),aX=a("a"),por=o("TFBartModel"),uor=o(" (BART model)"),_or=l(),aF=a("li"),Eue=a("strong"),bor=o("bert"),vor=o(" \u2014 "),nX=a("a"),For=o("TFBertModel"),Tor=o(" (BERT model)"),Mor=l(),nF=a("li"),Cue=a("strong"),Eor=o("blenderbot"),Cor=o(" \u2014 "),sX=a("a"),wor=o("TFBlenderbotModel"),Aor=o(" (Blenderbot model)"),yor=l(),sF=a("li"),wue=a("strong"),Lor=o("blenderbot-small"),xor=o(" \u2014 "),lX=a("a"),$or=o("TFBlenderbotSmallModel"),kor=o(" (BlenderbotSmall model)"),Sor=l(),lF=a("li"),Aue=a("strong"),Ror=o("camembert"),Bor=o(" \u2014 "),iX=a("a"),Por=o("TFCamembertModel"),Ior=o(" (CamemBERT model)"),qor=l(),iF=a("li"),yue=a("strong"),Nor=o("clip"),jor=o(" \u2014 "),dX=a("a"),Dor=o("TFCLIPModel"),Gor=o(" (CLIP model)"),Oor=l(),dF=a("li"),Lue=a("strong"),Vor=o("convbert"),Xor=o(" \u2014 "),cX=a("a"),zor=o("TFConvBertModel"),Qor=o(" (ConvBERT model)"),Wor=l(),cF=a("li"),xue=a("strong"),Hor=o("convnext"),Uor=o(" \u2014 "),fX=a("a"),Jor=o("TFConvNextModel"),Yor=o(" (ConvNext model)"),Kor=l(),fF=a("li"),$ue=a("strong"),Zor=o("ctrl"),err=o(" \u2014 "),mX=a("a"),orr=o("TFCTRLModel"),rrr=o(" (CTRL model)"),trr=l(),mF=a("li"),kue=a("strong"),arr=o("deberta"),nrr=o(" \u2014 "),gX=a("a"),srr=o("TFDebertaModel"),lrr=o(" (DeBERTa model)"),irr=l(),gF=a("li"),Sue=a("strong"),drr=o("deberta-v2"),crr=o(" \u2014 "),hX=a("a"),frr=o("TFDebertaV2Model"),mrr=o(" (DeBERTa-v2 model)"),grr=l(),hF=a("li"),Rue=a("strong"),hrr=o("distilbert"),prr=o(" \u2014 "),pX=a("a"),urr=o("TFDistilBertModel"),_rr=o(" (DistilBERT model)"),brr=l(),pF=a("li"),Bue=a("strong"),vrr=o("dpr"),Frr=o(" \u2014 "),uX=a("a"),Trr=o("TFDPRQuestionEncoder"),Mrr=o(" (DPR model)"),Err=l(),uF=a("li"),Pue=a("strong"),Crr=o("electra"),wrr=o(" \u2014 "),_X=a("a"),Arr=o("TFElectraModel"),yrr=o(" (ELECTRA model)"),Lrr=l(),_F=a("li"),Iue=a("strong"),xrr=o("flaubert"),$rr=o(" \u2014 "),bX=a("a"),krr=o("TFFlaubertModel"),Srr=o(" (FlauBERT model)"),Rrr=l(),$s=a("li"),que=a("strong"),Brr=o("funnel"),Prr=o(" \u2014 "),vX=a("a"),Irr=o("TFFunnelModel"),qrr=o(" or "),FX=a("a"),Nrr=o("TFFunnelBaseModel"),jrr=o(" (Funnel Transformer model)"),Drr=l(),bF=a("li"),Nue=a("strong"),Grr=o("gpt2"),Orr=o(" \u2014 "),TX=a("a"),Vrr=o("TFGPT2Model"),Xrr=o(" (OpenAI GPT-2 model)"),zrr=l(),vF=a("li"),jue=a("strong"),Qrr=o("gptj"),Wrr=o(" \u2014 "),MX=a("a"),Hrr=o("TFGPTJModel"),Urr=o(" (GPT-J model)"),Jrr=l(),FF=a("li"),Due=a("strong"),Yrr=o("hubert"),Krr=o(" \u2014 "),EX=a("a"),Zrr=o("TFHubertModel"),etr=o(" (Hubert model)"),otr=l(),TF=a("li"),Gue=a("strong"),rtr=o("layoutlm"),ttr=o(" \u2014 "),CX=a("a"),atr=o("TFLayoutLMModel"),ntr=o(" (LayoutLM model)"),str=l(),MF=a("li"),Oue=a("strong"),ltr=o("led"),itr=o(" \u2014 "),wX=a("a"),dtr=o("TFLEDModel"),ctr=o(" (LED model)"),ftr=l(),EF=a("li"),Vue=a("strong"),mtr=o("longformer"),gtr=o(" \u2014 "),AX=a("a"),htr=o("TFLongformerModel"),ptr=o(" (Longformer model)"),utr=l(),CF=a("li"),Xue=a("strong"),_tr=o("lxmert"),btr=o(" \u2014 "),yX=a("a"),vtr=o("TFLxmertModel"),Ftr=o(" (LXMERT model)"),Ttr=l(),wF=a("li"),zue=a("strong"),Mtr=o("marian"),Etr=o(" \u2014 "),LX=a("a"),Ctr=o("TFMarianModel"),wtr=o(" (Marian model)"),Atr=l(),AF=a("li"),Que=a("strong"),ytr=o("mbart"),Ltr=o(" \u2014 "),xX=a("a"),xtr=o("TFMBartModel"),$tr=o(" (mBART model)"),ktr=l(),yF=a("li"),Wue=a("strong"),Str=o("mobilebert"),Rtr=o(" \u2014 "),$X=a("a"),Btr=o("TFMobileBertModel"),Ptr=o(" (MobileBERT model)"),Itr=l(),LF=a("li"),Hue=a("strong"),qtr=o("mpnet"),Ntr=o(" \u2014 "),kX=a("a"),jtr=o("TFMPNetModel"),Dtr=o(" (MPNet model)"),Gtr=l(),xF=a("li"),Uue=a("strong"),Otr=o("mt5"),Vtr=o(" \u2014 "),SX=a("a"),Xtr=o("TFMT5Model"),ztr=o(" (mT5 model)"),Qtr=l(),$F=a("li"),Jue=a("strong"),Wtr=o("openai-gpt"),Htr=o(" \u2014 "),RX=a("a"),Utr=o("TFOpenAIGPTModel"),Jtr=o(" (OpenAI GPT model)"),Ytr=l(),kF=a("li"),Yue=a("strong"),Ktr=o("pegasus"),Ztr=o(" \u2014 "),BX=a("a"),ear=o("TFPegasusModel"),oar=o(" (Pegasus model)"),rar=l(),SF=a("li"),Kue=a("strong"),tar=o("rembert"),aar=o(" \u2014 "),PX=a("a"),nar=o("TFRemBertModel"),sar=o(" (RemBERT model)"),lar=l(),RF=a("li"),Zue=a("strong"),iar=o("roberta"),dar=o(" \u2014 "),IX=a("a"),car=o("TFRobertaModel"),far=o(" (RoBERTa model)"),mar=l(),BF=a("li"),e_e=a("strong"),gar=o("roformer"),har=o(" \u2014 "),qX=a("a"),par=o("TFRoFormerModel"),uar=o(" (RoFormer model)"),_ar=l(),PF=a("li"),o_e=a("strong"),bar=o("speech_to_text"),Far=o(" \u2014 "),NX=a("a"),Tar=o("TFSpeech2TextModel"),Mar=o(" (Speech2Text model)"),Ear=l(),IF=a("li"),r_e=a("strong"),Car=o("t5"),war=o(" \u2014 "),jX=a("a"),Aar=o("TFT5Model"),yar=o(" (T5 model)"),Lar=l(),qF=a("li"),t_e=a("strong"),xar=o("tapas"),$ar=o(" \u2014 "),DX=a("a"),kar=o("TFTapasModel"),Sar=o(" (TAPAS model)"),Rar=l(),NF=a("li"),a_e=a("strong"),Bar=o("transfo-xl"),Par=o(" \u2014 "),GX=a("a"),Iar=o("TFTransfoXLModel"),qar=o(" (Transformer-XL model)"),Nar=l(),jF=a("li"),n_e=a("strong"),jar=o("vit"),Dar=o(" \u2014 "),OX=a("a"),Gar=o("TFViTModel"),Oar=o(" (ViT model)"),Var=l(),DF=a("li"),s_e=a("strong"),Xar=o("vit_mae"),zar=o(" \u2014 "),VX=a("a"),Qar=o("TFViTMAEModel"),War=o(" (ViTMAE model)"),Har=l(),GF=a("li"),l_e=a("strong"),Uar=o("wav2vec2"),Jar=o(" \u2014 "),XX=a("a"),Yar=o("TFWav2Vec2Model"),Kar=o(" (Wav2Vec2 model)"),Zar=l(),OF=a("li"),i_e=a("strong"),enr=o("xlm"),onr=o(" \u2014 "),zX=a("a"),rnr=o("TFXLMModel"),tnr=o(" (XLM model)"),anr=l(),VF=a("li"),d_e=a("strong"),nnr=o("xlm-roberta"),snr=o(" \u2014 "),QX=a("a"),lnr=o("TFXLMRobertaModel"),inr=o(" (XLM-RoBERTa model)"),dnr=l(),XF=a("li"),c_e=a("strong"),cnr=o("xlnet"),fnr=o(" \u2014 "),WX=a("a"),mnr=o("TFXLNetModel"),gnr=o(" (XLNet model)"),hnr=l(),F(zF.$$.fragment),JBe=l(),Bd=a("h2"),QF=a("a"),f_e=a("span"),F(rL.$$.fragment),pnr=l(),m_e=a("span"),unr=o("TFAutoModelForPreTraining"),YBe=l(),Ko=a("div"),F(tL.$$.fragment),_nr=l(),Pd=a("p"),bnr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),HX=a("a"),vnr=o("from_pretrained()"),Fnr=o(" class method or the "),UX=a("a"),Tnr=o("from_config()"),Mnr=o(` class
method.`),Enr=l(),aL=a("p"),Cnr=o("This class cannot be instantiated directly using "),g_e=a("code"),wnr=o("__init__()"),Anr=o(" (throws an error)."),ynr=l(),Ct=a("div"),F(nL.$$.fragment),Lnr=l(),h_e=a("p"),xnr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),$nr=l(),Id=a("p"),knr=o(`Note:
Loading a model from its configuration file does `),p_e=a("strong"),Snr=o("not"),Rnr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),JX=a("a"),Bnr=o("from_pretrained()"),Pnr=o(" to load the model weights."),Inr=l(),F(WF.$$.fragment),qnr=l(),wr=a("div"),F(sL.$$.fragment),Nnr=l(),u_e=a("p"),jnr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Dnr=l(),Ja=a("p"),Gnr=o("The model class to instantiate is selected based on the "),__e=a("code"),Onr=o("model_type"),Vnr=o(` property of the config object (either
passed as an argument or loaded from `),b_e=a("code"),Xnr=o("pretrained_model_name_or_path"),znr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),v_e=a("code"),Qnr=o("pretrained_model_name_or_path"),Wnr=o(":"),Hnr=l(),ne=a("ul"),HF=a("li"),F_e=a("strong"),Unr=o("albert"),Jnr=o(" \u2014 "),YX=a("a"),Ynr=o("TFAlbertForPreTraining"),Knr=o(" (ALBERT model)"),Znr=l(),UF=a("li"),T_e=a("strong"),esr=o("bart"),osr=o(" \u2014 "),KX=a("a"),rsr=o("TFBartForConditionalGeneration"),tsr=o(" (BART model)"),asr=l(),JF=a("li"),M_e=a("strong"),nsr=o("bert"),ssr=o(" \u2014 "),ZX=a("a"),lsr=o("TFBertForPreTraining"),isr=o(" (BERT model)"),dsr=l(),YF=a("li"),E_e=a("strong"),csr=o("camembert"),fsr=o(" \u2014 "),ez=a("a"),msr=o("TFCamembertForMaskedLM"),gsr=o(" (CamemBERT model)"),hsr=l(),KF=a("li"),C_e=a("strong"),psr=o("ctrl"),usr=o(" \u2014 "),oz=a("a"),_sr=o("TFCTRLLMHeadModel"),bsr=o(" (CTRL model)"),vsr=l(),ZF=a("li"),w_e=a("strong"),Fsr=o("distilbert"),Tsr=o(" \u2014 "),rz=a("a"),Msr=o("TFDistilBertForMaskedLM"),Esr=o(" (DistilBERT model)"),Csr=l(),e6=a("li"),A_e=a("strong"),wsr=o("electra"),Asr=o(" \u2014 "),tz=a("a"),ysr=o("TFElectraForPreTraining"),Lsr=o(" (ELECTRA model)"),xsr=l(),o6=a("li"),y_e=a("strong"),$sr=o("flaubert"),ksr=o(" \u2014 "),az=a("a"),Ssr=o("TFFlaubertWithLMHeadModel"),Rsr=o(" (FlauBERT model)"),Bsr=l(),r6=a("li"),L_e=a("strong"),Psr=o("funnel"),Isr=o(" \u2014 "),nz=a("a"),qsr=o("TFFunnelForPreTraining"),Nsr=o(" (Funnel Transformer model)"),jsr=l(),t6=a("li"),x_e=a("strong"),Dsr=o("gpt2"),Gsr=o(" \u2014 "),sz=a("a"),Osr=o("TFGPT2LMHeadModel"),Vsr=o(" (OpenAI GPT-2 model)"),Xsr=l(),a6=a("li"),$_e=a("strong"),zsr=o("layoutlm"),Qsr=o(" \u2014 "),lz=a("a"),Wsr=o("TFLayoutLMForMaskedLM"),Hsr=o(" (LayoutLM model)"),Usr=l(),n6=a("li"),k_e=a("strong"),Jsr=o("lxmert"),Ysr=o(" \u2014 "),iz=a("a"),Ksr=o("TFLxmertForPreTraining"),Zsr=o(" (LXMERT model)"),elr=l(),s6=a("li"),S_e=a("strong"),olr=o("mobilebert"),rlr=o(" \u2014 "),dz=a("a"),tlr=o("TFMobileBertForPreTraining"),alr=o(" (MobileBERT model)"),nlr=l(),l6=a("li"),R_e=a("strong"),slr=o("mpnet"),llr=o(" \u2014 "),cz=a("a"),ilr=o("TFMPNetForMaskedLM"),dlr=o(" (MPNet model)"),clr=l(),i6=a("li"),B_e=a("strong"),flr=o("openai-gpt"),mlr=o(" \u2014 "),fz=a("a"),glr=o("TFOpenAIGPTLMHeadModel"),hlr=o(" (OpenAI GPT model)"),plr=l(),d6=a("li"),P_e=a("strong"),ulr=o("roberta"),_lr=o(" \u2014 "),mz=a("a"),blr=o("TFRobertaForMaskedLM"),vlr=o(" (RoBERTa model)"),Flr=l(),c6=a("li"),I_e=a("strong"),Tlr=o("t5"),Mlr=o(" \u2014 "),gz=a("a"),Elr=o("TFT5ForConditionalGeneration"),Clr=o(" (T5 model)"),wlr=l(),f6=a("li"),q_e=a("strong"),Alr=o("tapas"),ylr=o(" \u2014 "),hz=a("a"),Llr=o("TFTapasForMaskedLM"),xlr=o(" (TAPAS model)"),$lr=l(),m6=a("li"),N_e=a("strong"),klr=o("transfo-xl"),Slr=o(" \u2014 "),pz=a("a"),Rlr=o("TFTransfoXLLMHeadModel"),Blr=o(" (Transformer-XL model)"),Plr=l(),g6=a("li"),j_e=a("strong"),Ilr=o("vit_mae"),qlr=o(" \u2014 "),uz=a("a"),Nlr=o("TFViTMAEForPreTraining"),jlr=o(" (ViTMAE model)"),Dlr=l(),h6=a("li"),D_e=a("strong"),Glr=o("xlm"),Olr=o(" \u2014 "),_z=a("a"),Vlr=o("TFXLMWithLMHeadModel"),Xlr=o(" (XLM model)"),zlr=l(),p6=a("li"),G_e=a("strong"),Qlr=o("xlm-roberta"),Wlr=o(" \u2014 "),bz=a("a"),Hlr=o("TFXLMRobertaForMaskedLM"),Ulr=o(" (XLM-RoBERTa model)"),Jlr=l(),u6=a("li"),O_e=a("strong"),Ylr=o("xlnet"),Klr=o(" \u2014 "),vz=a("a"),Zlr=o("TFXLNetLMHeadModel"),eir=o(" (XLNet model)"),oir=l(),F(_6.$$.fragment),KBe=l(),qd=a("h2"),b6=a("a"),V_e=a("span"),F(lL.$$.fragment),rir=l(),X_e=a("span"),tir=o("TFAutoModelForCausalLM"),ZBe=l(),Zo=a("div"),F(iL.$$.fragment),air=l(),Nd=a("p"),nir=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Fz=a("a"),sir=o("from_pretrained()"),lir=o(" class method or the "),Tz=a("a"),iir=o("from_config()"),dir=o(` class
method.`),cir=l(),dL=a("p"),fir=o("This class cannot be instantiated directly using "),z_e=a("code"),mir=o("__init__()"),gir=o(" (throws an error)."),hir=l(),wt=a("div"),F(cL.$$.fragment),pir=l(),Q_e=a("p"),uir=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),_ir=l(),jd=a("p"),bir=o(`Note:
Loading a model from its configuration file does `),W_e=a("strong"),vir=o("not"),Fir=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Mz=a("a"),Tir=o("from_pretrained()"),Mir=o(" to load the model weights."),Eir=l(),F(v6.$$.fragment),Cir=l(),Ar=a("div"),F(fL.$$.fragment),wir=l(),H_e=a("p"),Air=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),yir=l(),Ya=a("p"),Lir=o("The model class to instantiate is selected based on the "),U_e=a("code"),xir=o("model_type"),$ir=o(` property of the config object (either
passed as an argument or loaded from `),J_e=a("code"),kir=o("pretrained_model_name_or_path"),Sir=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Y_e=a("code"),Rir=o("pretrained_model_name_or_path"),Bir=o(":"),Pir=l(),Te=a("ul"),F6=a("li"),K_e=a("strong"),Iir=o("bert"),qir=o(" \u2014 "),Ez=a("a"),Nir=o("TFBertLMHeadModel"),jir=o(" (BERT model)"),Dir=l(),T6=a("li"),Z_e=a("strong"),Gir=o("camembert"),Oir=o(" \u2014 "),Cz=a("a"),Vir=o("TFCamembertForCausalLM"),Xir=o(" (CamemBERT model)"),zir=l(),M6=a("li"),e1e=a("strong"),Qir=o("ctrl"),Wir=o(" \u2014 "),wz=a("a"),Hir=o("TFCTRLLMHeadModel"),Uir=o(" (CTRL model)"),Jir=l(),E6=a("li"),o1e=a("strong"),Yir=o("gpt2"),Kir=o(" \u2014 "),Az=a("a"),Zir=o("TFGPT2LMHeadModel"),edr=o(" (OpenAI GPT-2 model)"),odr=l(),C6=a("li"),r1e=a("strong"),rdr=o("gptj"),tdr=o(" \u2014 "),yz=a("a"),adr=o("TFGPTJForCausalLM"),ndr=o(" (GPT-J model)"),sdr=l(),w6=a("li"),t1e=a("strong"),ldr=o("openai-gpt"),idr=o(" \u2014 "),Lz=a("a"),ddr=o("TFOpenAIGPTLMHeadModel"),cdr=o(" (OpenAI GPT model)"),fdr=l(),A6=a("li"),a1e=a("strong"),mdr=o("rembert"),gdr=o(" \u2014 "),xz=a("a"),hdr=o("TFRemBertForCausalLM"),pdr=o(" (RemBERT model)"),udr=l(),y6=a("li"),n1e=a("strong"),_dr=o("roberta"),bdr=o(" \u2014 "),$z=a("a"),vdr=o("TFRobertaForCausalLM"),Fdr=o(" (RoBERTa model)"),Tdr=l(),L6=a("li"),s1e=a("strong"),Mdr=o("roformer"),Edr=o(" \u2014 "),kz=a("a"),Cdr=o("TFRoFormerForCausalLM"),wdr=o(" (RoFormer model)"),Adr=l(),x6=a("li"),l1e=a("strong"),ydr=o("transfo-xl"),Ldr=o(" \u2014 "),Sz=a("a"),xdr=o("TFTransfoXLLMHeadModel"),$dr=o(" (Transformer-XL model)"),kdr=l(),$6=a("li"),i1e=a("strong"),Sdr=o("xlm"),Rdr=o(" \u2014 "),Rz=a("a"),Bdr=o("TFXLMWithLMHeadModel"),Pdr=o(" (XLM model)"),Idr=l(),k6=a("li"),d1e=a("strong"),qdr=o("xlnet"),Ndr=o(" \u2014 "),Bz=a("a"),jdr=o("TFXLNetLMHeadModel"),Ddr=o(" (XLNet model)"),Gdr=l(),F(S6.$$.fragment),ePe=l(),Dd=a("h2"),R6=a("a"),c1e=a("span"),F(mL.$$.fragment),Odr=l(),f1e=a("span"),Vdr=o("TFAutoModelForImageClassification"),oPe=l(),er=a("div"),F(gL.$$.fragment),Xdr=l(),Gd=a("p"),zdr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Pz=a("a"),Qdr=o("from_pretrained()"),Wdr=o(" class method or the "),Iz=a("a"),Hdr=o("from_config()"),Udr=o(` class
method.`),Jdr=l(),hL=a("p"),Ydr=o("This class cannot be instantiated directly using "),m1e=a("code"),Kdr=o("__init__()"),Zdr=o(" (throws an error)."),ecr=l(),At=a("div"),F(pL.$$.fragment),ocr=l(),g1e=a("p"),rcr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),tcr=l(),Od=a("p"),acr=o(`Note:
Loading a model from its configuration file does `),h1e=a("strong"),ncr=o("not"),scr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qz=a("a"),lcr=o("from_pretrained()"),icr=o(" to load the model weights."),dcr=l(),F(B6.$$.fragment),ccr=l(),yr=a("div"),F(uL.$$.fragment),fcr=l(),p1e=a("p"),mcr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),gcr=l(),Ka=a("p"),hcr=o("The model class to instantiate is selected based on the "),u1e=a("code"),pcr=o("model_type"),ucr=o(` property of the config object (either
passed as an argument or loaded from `),_1e=a("code"),_cr=o("pretrained_model_name_or_path"),bcr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),b1e=a("code"),vcr=o("pretrained_model_name_or_path"),Fcr=o(":"),Tcr=l(),_L=a("ul"),P6=a("li"),v1e=a("strong"),Mcr=o("convnext"),Ecr=o(" \u2014 "),Nz=a("a"),Ccr=o("TFConvNextForImageClassification"),wcr=o(" (ConvNext model)"),Acr=l(),I6=a("li"),F1e=a("strong"),ycr=o("vit"),Lcr=o(" \u2014 "),jz=a("a"),xcr=o("TFViTForImageClassification"),$cr=o(" (ViT model)"),kcr=l(),F(q6.$$.fragment),rPe=l(),Vd=a("h2"),N6=a("a"),T1e=a("span"),F(bL.$$.fragment),Scr=l(),M1e=a("span"),Rcr=o("TFAutoModelForMaskedLM"),tPe=l(),or=a("div"),F(vL.$$.fragment),Bcr=l(),Xd=a("p"),Pcr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Dz=a("a"),Icr=o("from_pretrained()"),qcr=o(" class method or the "),Gz=a("a"),Ncr=o("from_config()"),jcr=o(` class
method.`),Dcr=l(),FL=a("p"),Gcr=o("This class cannot be instantiated directly using "),E1e=a("code"),Ocr=o("__init__()"),Vcr=o(" (throws an error)."),Xcr=l(),yt=a("div"),F(TL.$$.fragment),zcr=l(),C1e=a("p"),Qcr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Wcr=l(),zd=a("p"),Hcr=o(`Note:
Loading a model from its configuration file does `),w1e=a("strong"),Ucr=o("not"),Jcr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Oz=a("a"),Ycr=o("from_pretrained()"),Kcr=o(" to load the model weights."),Zcr=l(),F(j6.$$.fragment),efr=l(),Lr=a("div"),F(ML.$$.fragment),ofr=l(),A1e=a("p"),rfr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),tfr=l(),Za=a("p"),afr=o("The model class to instantiate is selected based on the "),y1e=a("code"),nfr=o("model_type"),sfr=o(` property of the config object (either
passed as an argument or loaded from `),L1e=a("code"),lfr=o("pretrained_model_name_or_path"),ifr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),x1e=a("code"),dfr=o("pretrained_model_name_or_path"),cfr=o(":"),ffr=l(),ie=a("ul"),D6=a("li"),$1e=a("strong"),mfr=o("albert"),gfr=o(" \u2014 "),Vz=a("a"),hfr=o("TFAlbertForMaskedLM"),pfr=o(" (ALBERT model)"),ufr=l(),G6=a("li"),k1e=a("strong"),_fr=o("bert"),bfr=o(" \u2014 "),Xz=a("a"),vfr=o("TFBertForMaskedLM"),Ffr=o(" (BERT model)"),Tfr=l(),O6=a("li"),S1e=a("strong"),Mfr=o("camembert"),Efr=o(" \u2014 "),zz=a("a"),Cfr=o("TFCamembertForMaskedLM"),wfr=o(" (CamemBERT model)"),Afr=l(),V6=a("li"),R1e=a("strong"),yfr=o("convbert"),Lfr=o(" \u2014 "),Qz=a("a"),xfr=o("TFConvBertForMaskedLM"),$fr=o(" (ConvBERT model)"),kfr=l(),X6=a("li"),B1e=a("strong"),Sfr=o("deberta"),Rfr=o(" \u2014 "),Wz=a("a"),Bfr=o("TFDebertaForMaskedLM"),Pfr=o(" (DeBERTa model)"),Ifr=l(),z6=a("li"),P1e=a("strong"),qfr=o("deberta-v2"),Nfr=o(" \u2014 "),Hz=a("a"),jfr=o("TFDebertaV2ForMaskedLM"),Dfr=o(" (DeBERTa-v2 model)"),Gfr=l(),Q6=a("li"),I1e=a("strong"),Ofr=o("distilbert"),Vfr=o(" \u2014 "),Uz=a("a"),Xfr=o("TFDistilBertForMaskedLM"),zfr=o(" (DistilBERT model)"),Qfr=l(),W6=a("li"),q1e=a("strong"),Wfr=o("electra"),Hfr=o(" \u2014 "),Jz=a("a"),Ufr=o("TFElectraForMaskedLM"),Jfr=o(" (ELECTRA model)"),Yfr=l(),H6=a("li"),N1e=a("strong"),Kfr=o("flaubert"),Zfr=o(" \u2014 "),Yz=a("a"),emr=o("TFFlaubertWithLMHeadModel"),omr=o(" (FlauBERT model)"),rmr=l(),U6=a("li"),j1e=a("strong"),tmr=o("funnel"),amr=o(" \u2014 "),Kz=a("a"),nmr=o("TFFunnelForMaskedLM"),smr=o(" (Funnel Transformer model)"),lmr=l(),J6=a("li"),D1e=a("strong"),imr=o("layoutlm"),dmr=o(" \u2014 "),Zz=a("a"),cmr=o("TFLayoutLMForMaskedLM"),fmr=o(" (LayoutLM model)"),mmr=l(),Y6=a("li"),G1e=a("strong"),gmr=o("longformer"),hmr=o(" \u2014 "),eQ=a("a"),pmr=o("TFLongformerForMaskedLM"),umr=o(" (Longformer model)"),_mr=l(),K6=a("li"),O1e=a("strong"),bmr=o("mobilebert"),vmr=o(" \u2014 "),oQ=a("a"),Fmr=o("TFMobileBertForMaskedLM"),Tmr=o(" (MobileBERT model)"),Mmr=l(),Z6=a("li"),V1e=a("strong"),Emr=o("mpnet"),Cmr=o(" \u2014 "),rQ=a("a"),wmr=o("TFMPNetForMaskedLM"),Amr=o(" (MPNet model)"),ymr=l(),eT=a("li"),X1e=a("strong"),Lmr=o("rembert"),xmr=o(" \u2014 "),tQ=a("a"),$mr=o("TFRemBertForMaskedLM"),kmr=o(" (RemBERT model)"),Smr=l(),oT=a("li"),z1e=a("strong"),Rmr=o("roberta"),Bmr=o(" \u2014 "),aQ=a("a"),Pmr=o("TFRobertaForMaskedLM"),Imr=o(" (RoBERTa model)"),qmr=l(),rT=a("li"),Q1e=a("strong"),Nmr=o("roformer"),jmr=o(" \u2014 "),nQ=a("a"),Dmr=o("TFRoFormerForMaskedLM"),Gmr=o(" (RoFormer model)"),Omr=l(),tT=a("li"),W1e=a("strong"),Vmr=o("tapas"),Xmr=o(" \u2014 "),sQ=a("a"),zmr=o("TFTapasForMaskedLM"),Qmr=o(" (TAPAS model)"),Wmr=l(),aT=a("li"),H1e=a("strong"),Hmr=o("xlm"),Umr=o(" \u2014 "),lQ=a("a"),Jmr=o("TFXLMWithLMHeadModel"),Ymr=o(" (XLM model)"),Kmr=l(),nT=a("li"),U1e=a("strong"),Zmr=o("xlm-roberta"),egr=o(" \u2014 "),iQ=a("a"),ogr=o("TFXLMRobertaForMaskedLM"),rgr=o(" (XLM-RoBERTa model)"),tgr=l(),F(sT.$$.fragment),aPe=l(),Qd=a("h2"),lT=a("a"),J1e=a("span"),F(EL.$$.fragment),agr=l(),Y1e=a("span"),ngr=o("TFAutoModelForSeq2SeqLM"),nPe=l(),rr=a("div"),F(CL.$$.fragment),sgr=l(),Wd=a("p"),lgr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),dQ=a("a"),igr=o("from_pretrained()"),dgr=o(" class method or the "),cQ=a("a"),cgr=o("from_config()"),fgr=o(` class
method.`),mgr=l(),wL=a("p"),ggr=o("This class cannot be instantiated directly using "),K1e=a("code"),hgr=o("__init__()"),pgr=o(" (throws an error)."),ugr=l(),Lt=a("div"),F(AL.$$.fragment),_gr=l(),Z1e=a("p"),bgr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),vgr=l(),Hd=a("p"),Fgr=o(`Note:
Loading a model from its configuration file does `),e9e=a("strong"),Tgr=o("not"),Mgr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fQ=a("a"),Egr=o("from_pretrained()"),Cgr=o(" to load the model weights."),wgr=l(),F(iT.$$.fragment),Agr=l(),xr=a("div"),F(yL.$$.fragment),ygr=l(),o9e=a("p"),Lgr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),xgr=l(),en=a("p"),$gr=o("The model class to instantiate is selected based on the "),r9e=a("code"),kgr=o("model_type"),Sgr=o(` property of the config object (either
passed as an argument or loaded from `),t9e=a("code"),Rgr=o("pretrained_model_name_or_path"),Bgr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),a9e=a("code"),Pgr=o("pretrained_model_name_or_path"),Igr=o(":"),qgr=l(),ye=a("ul"),dT=a("li"),n9e=a("strong"),Ngr=o("bart"),jgr=o(" \u2014 "),mQ=a("a"),Dgr=o("TFBartForConditionalGeneration"),Ggr=o(" (BART model)"),Ogr=l(),cT=a("li"),s9e=a("strong"),Vgr=o("blenderbot"),Xgr=o(" \u2014 "),gQ=a("a"),zgr=o("TFBlenderbotForConditionalGeneration"),Qgr=o(" (Blenderbot model)"),Wgr=l(),fT=a("li"),l9e=a("strong"),Hgr=o("blenderbot-small"),Ugr=o(" \u2014 "),hQ=a("a"),Jgr=o("TFBlenderbotSmallForConditionalGeneration"),Ygr=o(" (BlenderbotSmall model)"),Kgr=l(),mT=a("li"),i9e=a("strong"),Zgr=o("encoder-decoder"),ehr=o(" \u2014 "),pQ=a("a"),ohr=o("TFEncoderDecoderModel"),rhr=o(" (Encoder decoder model)"),thr=l(),gT=a("li"),d9e=a("strong"),ahr=o("led"),nhr=o(" \u2014 "),uQ=a("a"),shr=o("TFLEDForConditionalGeneration"),lhr=o(" (LED model)"),ihr=l(),hT=a("li"),c9e=a("strong"),dhr=o("marian"),chr=o(" \u2014 "),_Q=a("a"),fhr=o("TFMarianMTModel"),mhr=o(" (Marian model)"),ghr=l(),pT=a("li"),f9e=a("strong"),hhr=o("mbart"),phr=o(" \u2014 "),bQ=a("a"),uhr=o("TFMBartForConditionalGeneration"),_hr=o(" (mBART model)"),bhr=l(),uT=a("li"),m9e=a("strong"),vhr=o("mt5"),Fhr=o(" \u2014 "),vQ=a("a"),Thr=o("TFMT5ForConditionalGeneration"),Mhr=o(" (mT5 model)"),Ehr=l(),_T=a("li"),g9e=a("strong"),Chr=o("pegasus"),whr=o(" \u2014 "),FQ=a("a"),Ahr=o("TFPegasusForConditionalGeneration"),yhr=o(" (Pegasus model)"),Lhr=l(),bT=a("li"),h9e=a("strong"),xhr=o("t5"),$hr=o(" \u2014 "),TQ=a("a"),khr=o("TFT5ForConditionalGeneration"),Shr=o(" (T5 model)"),Rhr=l(),F(vT.$$.fragment),sPe=l(),Ud=a("h2"),FT=a("a"),p9e=a("span"),F(LL.$$.fragment),Bhr=l(),u9e=a("span"),Phr=o("TFAutoModelForSequenceClassification"),lPe=l(),tr=a("div"),F(xL.$$.fragment),Ihr=l(),Jd=a("p"),qhr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),MQ=a("a"),Nhr=o("from_pretrained()"),jhr=o(" class method or the "),EQ=a("a"),Dhr=o("from_config()"),Ghr=o(` class
method.`),Ohr=l(),$L=a("p"),Vhr=o("This class cannot be instantiated directly using "),_9e=a("code"),Xhr=o("__init__()"),zhr=o(" (throws an error)."),Qhr=l(),xt=a("div"),F(kL.$$.fragment),Whr=l(),b9e=a("p"),Hhr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Uhr=l(),Yd=a("p"),Jhr=o(`Note:
Loading a model from its configuration file does `),v9e=a("strong"),Yhr=o("not"),Khr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),CQ=a("a"),Zhr=o("from_pretrained()"),epr=o(" to load the model weights."),opr=l(),F(TT.$$.fragment),rpr=l(),$r=a("div"),F(SL.$$.fragment),tpr=l(),F9e=a("p"),apr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),npr=l(),on=a("p"),spr=o("The model class to instantiate is selected based on the "),T9e=a("code"),lpr=o("model_type"),ipr=o(` property of the config object (either
passed as an argument or loaded from `),M9e=a("code"),dpr=o("pretrained_model_name_or_path"),cpr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),E9e=a("code"),fpr=o("pretrained_model_name_or_path"),mpr=o(":"),gpr=l(),Z=a("ul"),MT=a("li"),C9e=a("strong"),hpr=o("albert"),ppr=o(" \u2014 "),wQ=a("a"),upr=o("TFAlbertForSequenceClassification"),_pr=o(" (ALBERT model)"),bpr=l(),ET=a("li"),w9e=a("strong"),vpr=o("bert"),Fpr=o(" \u2014 "),AQ=a("a"),Tpr=o("TFBertForSequenceClassification"),Mpr=o(" (BERT model)"),Epr=l(),CT=a("li"),A9e=a("strong"),Cpr=o("camembert"),wpr=o(" \u2014 "),yQ=a("a"),Apr=o("TFCamembertForSequenceClassification"),ypr=o(" (CamemBERT model)"),Lpr=l(),wT=a("li"),y9e=a("strong"),xpr=o("convbert"),$pr=o(" \u2014 "),LQ=a("a"),kpr=o("TFConvBertForSequenceClassification"),Spr=o(" (ConvBERT model)"),Rpr=l(),AT=a("li"),L9e=a("strong"),Bpr=o("ctrl"),Ppr=o(" \u2014 "),xQ=a("a"),Ipr=o("TFCTRLForSequenceClassification"),qpr=o(" (CTRL model)"),Npr=l(),yT=a("li"),x9e=a("strong"),jpr=o("deberta"),Dpr=o(" \u2014 "),$Q=a("a"),Gpr=o("TFDebertaForSequenceClassification"),Opr=o(" (DeBERTa model)"),Vpr=l(),LT=a("li"),$9e=a("strong"),Xpr=o("deberta-v2"),zpr=o(" \u2014 "),kQ=a("a"),Qpr=o("TFDebertaV2ForSequenceClassification"),Wpr=o(" (DeBERTa-v2 model)"),Hpr=l(),xT=a("li"),k9e=a("strong"),Upr=o("distilbert"),Jpr=o(" \u2014 "),SQ=a("a"),Ypr=o("TFDistilBertForSequenceClassification"),Kpr=o(" (DistilBERT model)"),Zpr=l(),$T=a("li"),S9e=a("strong"),eur=o("electra"),our=o(" \u2014 "),RQ=a("a"),rur=o("TFElectraForSequenceClassification"),tur=o(" (ELECTRA model)"),aur=l(),kT=a("li"),R9e=a("strong"),nur=o("flaubert"),sur=o(" \u2014 "),BQ=a("a"),lur=o("TFFlaubertForSequenceClassification"),iur=o(" (FlauBERT model)"),dur=l(),ST=a("li"),B9e=a("strong"),cur=o("funnel"),fur=o(" \u2014 "),PQ=a("a"),mur=o("TFFunnelForSequenceClassification"),gur=o(" (Funnel Transformer model)"),hur=l(),RT=a("li"),P9e=a("strong"),pur=o("gpt2"),uur=o(" \u2014 "),IQ=a("a"),_ur=o("TFGPT2ForSequenceClassification"),bur=o(" (OpenAI GPT-2 model)"),vur=l(),BT=a("li"),I9e=a("strong"),Fur=o("gptj"),Tur=o(" \u2014 "),qQ=a("a"),Mur=o("TFGPTJForSequenceClassification"),Eur=o(" (GPT-J model)"),Cur=l(),PT=a("li"),q9e=a("strong"),wur=o("layoutlm"),Aur=o(" \u2014 "),NQ=a("a"),yur=o("TFLayoutLMForSequenceClassification"),Lur=o(" (LayoutLM model)"),xur=l(),IT=a("li"),N9e=a("strong"),$ur=o("longformer"),kur=o(" \u2014 "),jQ=a("a"),Sur=o("TFLongformerForSequenceClassification"),Rur=o(" (Longformer model)"),Bur=l(),qT=a("li"),j9e=a("strong"),Pur=o("mobilebert"),Iur=o(" \u2014 "),DQ=a("a"),qur=o("TFMobileBertForSequenceClassification"),Nur=o(" (MobileBERT model)"),jur=l(),NT=a("li"),D9e=a("strong"),Dur=o("mpnet"),Gur=o(" \u2014 "),GQ=a("a"),Our=o("TFMPNetForSequenceClassification"),Vur=o(" (MPNet model)"),Xur=l(),jT=a("li"),G9e=a("strong"),zur=o("openai-gpt"),Qur=o(" \u2014 "),OQ=a("a"),Wur=o("TFOpenAIGPTForSequenceClassification"),Hur=o(" (OpenAI GPT model)"),Uur=l(),DT=a("li"),O9e=a("strong"),Jur=o("rembert"),Yur=o(" \u2014 "),VQ=a("a"),Kur=o("TFRemBertForSequenceClassification"),Zur=o(" (RemBERT model)"),e_r=l(),GT=a("li"),V9e=a("strong"),o_r=o("roberta"),r_r=o(" \u2014 "),XQ=a("a"),t_r=o("TFRobertaForSequenceClassification"),a_r=o(" (RoBERTa model)"),n_r=l(),OT=a("li"),X9e=a("strong"),s_r=o("roformer"),l_r=o(" \u2014 "),zQ=a("a"),i_r=o("TFRoFormerForSequenceClassification"),d_r=o(" (RoFormer model)"),c_r=l(),VT=a("li"),z9e=a("strong"),f_r=o("tapas"),m_r=o(" \u2014 "),QQ=a("a"),g_r=o("TFTapasForSequenceClassification"),h_r=o(" (TAPAS model)"),p_r=l(),XT=a("li"),Q9e=a("strong"),u_r=o("transfo-xl"),__r=o(" \u2014 "),WQ=a("a"),b_r=o("TFTransfoXLForSequenceClassification"),v_r=o(" (Transformer-XL model)"),F_r=l(),zT=a("li"),W9e=a("strong"),T_r=o("xlm"),M_r=o(" \u2014 "),HQ=a("a"),E_r=o("TFXLMForSequenceClassification"),C_r=o(" (XLM model)"),w_r=l(),QT=a("li"),H9e=a("strong"),A_r=o("xlm-roberta"),y_r=o(" \u2014 "),UQ=a("a"),L_r=o("TFXLMRobertaForSequenceClassification"),x_r=o(" (XLM-RoBERTa model)"),$_r=l(),WT=a("li"),U9e=a("strong"),k_r=o("xlnet"),S_r=o(" \u2014 "),JQ=a("a"),R_r=o("TFXLNetForSequenceClassification"),B_r=o(" (XLNet model)"),P_r=l(),F(HT.$$.fragment),iPe=l(),Kd=a("h2"),UT=a("a"),J9e=a("span"),F(RL.$$.fragment),I_r=l(),Y9e=a("span"),q_r=o("TFAutoModelForMultipleChoice"),dPe=l(),ar=a("div"),F(BL.$$.fragment),N_r=l(),Zd=a("p"),j_r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),YQ=a("a"),D_r=o("from_pretrained()"),G_r=o(" class method or the "),KQ=a("a"),O_r=o("from_config()"),V_r=o(` class
method.`),X_r=l(),PL=a("p"),z_r=o("This class cannot be instantiated directly using "),K9e=a("code"),Q_r=o("__init__()"),W_r=o(" (throws an error)."),H_r=l(),$t=a("div"),F(IL.$$.fragment),U_r=l(),Z9e=a("p"),J_r=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Y_r=l(),ec=a("p"),K_r=o(`Note:
Loading a model from its configuration file does `),ebe=a("strong"),Z_r=o("not"),e1r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ZQ=a("a"),o1r=o("from_pretrained()"),r1r=o(" to load the model weights."),t1r=l(),F(JT.$$.fragment),a1r=l(),kr=a("div"),F(qL.$$.fragment),n1r=l(),obe=a("p"),s1r=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),l1r=l(),rn=a("p"),i1r=o("The model class to instantiate is selected based on the "),rbe=a("code"),d1r=o("model_type"),c1r=o(` property of the config object (either
passed as an argument or loaded from `),tbe=a("code"),f1r=o("pretrained_model_name_or_path"),m1r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),abe=a("code"),g1r=o("pretrained_model_name_or_path"),h1r=o(":"),p1r=l(),pe=a("ul"),YT=a("li"),nbe=a("strong"),u1r=o("albert"),_1r=o(" \u2014 "),eW=a("a"),b1r=o("TFAlbertForMultipleChoice"),v1r=o(" (ALBERT model)"),F1r=l(),KT=a("li"),sbe=a("strong"),T1r=o("bert"),M1r=o(" \u2014 "),oW=a("a"),E1r=o("TFBertForMultipleChoice"),C1r=o(" (BERT model)"),w1r=l(),ZT=a("li"),lbe=a("strong"),A1r=o("camembert"),y1r=o(" \u2014 "),rW=a("a"),L1r=o("TFCamembertForMultipleChoice"),x1r=o(" (CamemBERT model)"),$1r=l(),eM=a("li"),ibe=a("strong"),k1r=o("convbert"),S1r=o(" \u2014 "),tW=a("a"),R1r=o("TFConvBertForMultipleChoice"),B1r=o(" (ConvBERT model)"),P1r=l(),oM=a("li"),dbe=a("strong"),I1r=o("distilbert"),q1r=o(" \u2014 "),aW=a("a"),N1r=o("TFDistilBertForMultipleChoice"),j1r=o(" (DistilBERT model)"),D1r=l(),rM=a("li"),cbe=a("strong"),G1r=o("electra"),O1r=o(" \u2014 "),nW=a("a"),V1r=o("TFElectraForMultipleChoice"),X1r=o(" (ELECTRA model)"),z1r=l(),tM=a("li"),fbe=a("strong"),Q1r=o("flaubert"),W1r=o(" \u2014 "),sW=a("a"),H1r=o("TFFlaubertForMultipleChoice"),U1r=o(" (FlauBERT model)"),J1r=l(),aM=a("li"),mbe=a("strong"),Y1r=o("funnel"),K1r=o(" \u2014 "),lW=a("a"),Z1r=o("TFFunnelForMultipleChoice"),e9r=o(" (Funnel Transformer model)"),o9r=l(),nM=a("li"),gbe=a("strong"),r9r=o("longformer"),t9r=o(" \u2014 "),iW=a("a"),a9r=o("TFLongformerForMultipleChoice"),n9r=o(" (Longformer model)"),s9r=l(),sM=a("li"),hbe=a("strong"),l9r=o("mobilebert"),i9r=o(" \u2014 "),dW=a("a"),d9r=o("TFMobileBertForMultipleChoice"),c9r=o(" (MobileBERT model)"),f9r=l(),lM=a("li"),pbe=a("strong"),m9r=o("mpnet"),g9r=o(" \u2014 "),cW=a("a"),h9r=o("TFMPNetForMultipleChoice"),p9r=o(" (MPNet model)"),u9r=l(),iM=a("li"),ube=a("strong"),_9r=o("rembert"),b9r=o(" \u2014 "),fW=a("a"),v9r=o("TFRemBertForMultipleChoice"),F9r=o(" (RemBERT model)"),T9r=l(),dM=a("li"),_be=a("strong"),M9r=o("roberta"),E9r=o(" \u2014 "),mW=a("a"),C9r=o("TFRobertaForMultipleChoice"),w9r=o(" (RoBERTa model)"),A9r=l(),cM=a("li"),bbe=a("strong"),y9r=o("roformer"),L9r=o(" \u2014 "),gW=a("a"),x9r=o("TFRoFormerForMultipleChoice"),$9r=o(" (RoFormer model)"),k9r=l(),fM=a("li"),vbe=a("strong"),S9r=o("xlm"),R9r=o(" \u2014 "),hW=a("a"),B9r=o("TFXLMForMultipleChoice"),P9r=o(" (XLM model)"),I9r=l(),mM=a("li"),Fbe=a("strong"),q9r=o("xlm-roberta"),N9r=o(" \u2014 "),pW=a("a"),j9r=o("TFXLMRobertaForMultipleChoice"),D9r=o(" (XLM-RoBERTa model)"),G9r=l(),gM=a("li"),Tbe=a("strong"),O9r=o("xlnet"),V9r=o(" \u2014 "),uW=a("a"),X9r=o("TFXLNetForMultipleChoice"),z9r=o(" (XLNet model)"),Q9r=l(),F(hM.$$.fragment),cPe=l(),oc=a("h2"),pM=a("a"),Mbe=a("span"),F(NL.$$.fragment),W9r=l(),Ebe=a("span"),H9r=o("TFAutoModelForTableQuestionAnswering"),fPe=l(),nr=a("div"),F(jL.$$.fragment),U9r=l(),rc=a("p"),J9r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),_W=a("a"),Y9r=o("from_pretrained()"),K9r=o(" class method or the "),bW=a("a"),Z9r=o("from_config()"),ebr=o(` class
method.`),obr=l(),DL=a("p"),rbr=o("This class cannot be instantiated directly using "),Cbe=a("code"),tbr=o("__init__()"),abr=o(" (throws an error)."),nbr=l(),kt=a("div"),F(GL.$$.fragment),sbr=l(),wbe=a("p"),lbr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),ibr=l(),tc=a("p"),dbr=o(`Note:
Loading a model from its configuration file does `),Abe=a("strong"),cbr=o("not"),fbr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vW=a("a"),mbr=o("from_pretrained()"),gbr=o(" to load the model weights."),hbr=l(),F(uM.$$.fragment),pbr=l(),Sr=a("div"),F(OL.$$.fragment),ubr=l(),ybe=a("p"),_br=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),bbr=l(),tn=a("p"),vbr=o("The model class to instantiate is selected based on the "),Lbe=a("code"),Fbr=o("model_type"),Tbr=o(` property of the config object (either
passed as an argument or loaded from `),xbe=a("code"),Mbr=o("pretrained_model_name_or_path"),Ebr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$be=a("code"),Cbr=o("pretrained_model_name_or_path"),wbr=o(":"),Abr=l(),kbe=a("ul"),_M=a("li"),Sbe=a("strong"),ybr=o("tapas"),Lbr=o(" \u2014 "),FW=a("a"),xbr=o("TFTapasForQuestionAnswering"),$br=o(" (TAPAS model)"),kbr=l(),F(bM.$$.fragment),mPe=l(),ac=a("h2"),vM=a("a"),Rbe=a("span"),F(VL.$$.fragment),Sbr=l(),Bbe=a("span"),Rbr=o("TFAutoModelForTokenClassification"),gPe=l(),sr=a("div"),F(XL.$$.fragment),Bbr=l(),nc=a("p"),Pbr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),TW=a("a"),Ibr=o("from_pretrained()"),qbr=o(" class method or the "),MW=a("a"),Nbr=o("from_config()"),jbr=o(` class
method.`),Dbr=l(),zL=a("p"),Gbr=o("This class cannot be instantiated directly using "),Pbe=a("code"),Obr=o("__init__()"),Vbr=o(" (throws an error)."),Xbr=l(),St=a("div"),F(QL.$$.fragment),zbr=l(),Ibe=a("p"),Qbr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Wbr=l(),sc=a("p"),Hbr=o(`Note:
Loading a model from its configuration file does `),qbe=a("strong"),Ubr=o("not"),Jbr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),EW=a("a"),Ybr=o("from_pretrained()"),Kbr=o(" to load the model weights."),Zbr=l(),F(FM.$$.fragment),e2r=l(),Rr=a("div"),F(WL.$$.fragment),o2r=l(),Nbe=a("p"),r2r=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),t2r=l(),an=a("p"),a2r=o("The model class to instantiate is selected based on the "),jbe=a("code"),n2r=o("model_type"),s2r=o(` property of the config object (either
passed as an argument or loaded from `),Dbe=a("code"),l2r=o("pretrained_model_name_or_path"),i2r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gbe=a("code"),d2r=o("pretrained_model_name_or_path"),c2r=o(":"),f2r=l(),de=a("ul"),TM=a("li"),Obe=a("strong"),m2r=o("albert"),g2r=o(" \u2014 "),CW=a("a"),h2r=o("TFAlbertForTokenClassification"),p2r=o(" (ALBERT model)"),u2r=l(),MM=a("li"),Vbe=a("strong"),_2r=o("bert"),b2r=o(" \u2014 "),wW=a("a"),v2r=o("TFBertForTokenClassification"),F2r=o(" (BERT model)"),T2r=l(),EM=a("li"),Xbe=a("strong"),M2r=o("camembert"),E2r=o(" \u2014 "),AW=a("a"),C2r=o("TFCamembertForTokenClassification"),w2r=o(" (CamemBERT model)"),A2r=l(),CM=a("li"),zbe=a("strong"),y2r=o("convbert"),L2r=o(" \u2014 "),yW=a("a"),x2r=o("TFConvBertForTokenClassification"),$2r=o(" (ConvBERT model)"),k2r=l(),wM=a("li"),Qbe=a("strong"),S2r=o("deberta"),R2r=o(" \u2014 "),LW=a("a"),B2r=o("TFDebertaForTokenClassification"),P2r=o(" (DeBERTa model)"),I2r=l(),AM=a("li"),Wbe=a("strong"),q2r=o("deberta-v2"),N2r=o(" \u2014 "),xW=a("a"),j2r=o("TFDebertaV2ForTokenClassification"),D2r=o(" (DeBERTa-v2 model)"),G2r=l(),yM=a("li"),Hbe=a("strong"),O2r=o("distilbert"),V2r=o(" \u2014 "),$W=a("a"),X2r=o("TFDistilBertForTokenClassification"),z2r=o(" (DistilBERT model)"),Q2r=l(),LM=a("li"),Ube=a("strong"),W2r=o("electra"),H2r=o(" \u2014 "),kW=a("a"),U2r=o("TFElectraForTokenClassification"),J2r=o(" (ELECTRA model)"),Y2r=l(),xM=a("li"),Jbe=a("strong"),K2r=o("flaubert"),Z2r=o(" \u2014 "),SW=a("a"),e5r=o("TFFlaubertForTokenClassification"),o5r=o(" (FlauBERT model)"),r5r=l(),$M=a("li"),Ybe=a("strong"),t5r=o("funnel"),a5r=o(" \u2014 "),RW=a("a"),n5r=o("TFFunnelForTokenClassification"),s5r=o(" (Funnel Transformer model)"),l5r=l(),kM=a("li"),Kbe=a("strong"),i5r=o("layoutlm"),d5r=o(" \u2014 "),BW=a("a"),c5r=o("TFLayoutLMForTokenClassification"),f5r=o(" (LayoutLM model)"),m5r=l(),SM=a("li"),Zbe=a("strong"),g5r=o("longformer"),h5r=o(" \u2014 "),PW=a("a"),p5r=o("TFLongformerForTokenClassification"),u5r=o(" (Longformer model)"),_5r=l(),RM=a("li"),e2e=a("strong"),b5r=o("mobilebert"),v5r=o(" \u2014 "),IW=a("a"),F5r=o("TFMobileBertForTokenClassification"),T5r=o(" (MobileBERT model)"),M5r=l(),BM=a("li"),o2e=a("strong"),E5r=o("mpnet"),C5r=o(" \u2014 "),qW=a("a"),w5r=o("TFMPNetForTokenClassification"),A5r=o(" (MPNet model)"),y5r=l(),PM=a("li"),r2e=a("strong"),L5r=o("rembert"),x5r=o(" \u2014 "),NW=a("a"),$5r=o("TFRemBertForTokenClassification"),k5r=o(" (RemBERT model)"),S5r=l(),IM=a("li"),t2e=a("strong"),R5r=o("roberta"),B5r=o(" \u2014 "),jW=a("a"),P5r=o("TFRobertaForTokenClassification"),I5r=o(" (RoBERTa model)"),q5r=l(),qM=a("li"),a2e=a("strong"),N5r=o("roformer"),j5r=o(" \u2014 "),DW=a("a"),D5r=o("TFRoFormerForTokenClassification"),G5r=o(" (RoFormer model)"),O5r=l(),NM=a("li"),n2e=a("strong"),V5r=o("xlm"),X5r=o(" \u2014 "),GW=a("a"),z5r=o("TFXLMForTokenClassification"),Q5r=o(" (XLM model)"),W5r=l(),jM=a("li"),s2e=a("strong"),H5r=o("xlm-roberta"),U5r=o(" \u2014 "),OW=a("a"),J5r=o("TFXLMRobertaForTokenClassification"),Y5r=o(" (XLM-RoBERTa model)"),K5r=l(),DM=a("li"),l2e=a("strong"),Z5r=o("xlnet"),evr=o(" \u2014 "),VW=a("a"),ovr=o("TFXLNetForTokenClassification"),rvr=o(" (XLNet model)"),tvr=l(),F(GM.$$.fragment),hPe=l(),lc=a("h2"),OM=a("a"),i2e=a("span"),F(HL.$$.fragment),avr=l(),d2e=a("span"),nvr=o("TFAutoModelForQuestionAnswering"),pPe=l(),lr=a("div"),F(UL.$$.fragment),svr=l(),ic=a("p"),lvr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),XW=a("a"),ivr=o("from_pretrained()"),dvr=o(" class method or the "),zW=a("a"),cvr=o("from_config()"),fvr=o(` class
method.`),mvr=l(),JL=a("p"),gvr=o("This class cannot be instantiated directly using "),c2e=a("code"),hvr=o("__init__()"),pvr=o(" (throws an error)."),uvr=l(),Rt=a("div"),F(YL.$$.fragment),_vr=l(),f2e=a("p"),bvr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),vvr=l(),dc=a("p"),Fvr=o(`Note:
Loading a model from its configuration file does `),m2e=a("strong"),Tvr=o("not"),Mvr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QW=a("a"),Evr=o("from_pretrained()"),Cvr=o(" to load the model weights."),wvr=l(),F(VM.$$.fragment),Avr=l(),Br=a("div"),F(KL.$$.fragment),yvr=l(),g2e=a("p"),Lvr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),xvr=l(),nn=a("p"),$vr=o("The model class to instantiate is selected based on the "),h2e=a("code"),kvr=o("model_type"),Svr=o(` property of the config object (either
passed as an argument or loaded from `),p2e=a("code"),Rvr=o("pretrained_model_name_or_path"),Bvr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),u2e=a("code"),Pvr=o("pretrained_model_name_or_path"),Ivr=o(":"),qvr=l(),ce=a("ul"),XM=a("li"),_2e=a("strong"),Nvr=o("albert"),jvr=o(" \u2014 "),WW=a("a"),Dvr=o("TFAlbertForQuestionAnswering"),Gvr=o(" (ALBERT model)"),Ovr=l(),zM=a("li"),b2e=a("strong"),Vvr=o("bert"),Xvr=o(" \u2014 "),HW=a("a"),zvr=o("TFBertForQuestionAnswering"),Qvr=o(" (BERT model)"),Wvr=l(),QM=a("li"),v2e=a("strong"),Hvr=o("camembert"),Uvr=o(" \u2014 "),UW=a("a"),Jvr=o("TFCamembertForQuestionAnswering"),Yvr=o(" (CamemBERT model)"),Kvr=l(),WM=a("li"),F2e=a("strong"),Zvr=o("convbert"),eFr=o(" \u2014 "),JW=a("a"),oFr=o("TFConvBertForQuestionAnswering"),rFr=o(" (ConvBERT model)"),tFr=l(),HM=a("li"),T2e=a("strong"),aFr=o("deberta"),nFr=o(" \u2014 "),YW=a("a"),sFr=o("TFDebertaForQuestionAnswering"),lFr=o(" (DeBERTa model)"),iFr=l(),UM=a("li"),M2e=a("strong"),dFr=o("deberta-v2"),cFr=o(" \u2014 "),KW=a("a"),fFr=o("TFDebertaV2ForQuestionAnswering"),mFr=o(" (DeBERTa-v2 model)"),gFr=l(),JM=a("li"),E2e=a("strong"),hFr=o("distilbert"),pFr=o(" \u2014 "),ZW=a("a"),uFr=o("TFDistilBertForQuestionAnswering"),_Fr=o(" (DistilBERT model)"),bFr=l(),YM=a("li"),C2e=a("strong"),vFr=o("electra"),FFr=o(" \u2014 "),eH=a("a"),TFr=o("TFElectraForQuestionAnswering"),MFr=o(" (ELECTRA model)"),EFr=l(),KM=a("li"),w2e=a("strong"),CFr=o("flaubert"),wFr=o(" \u2014 "),oH=a("a"),AFr=o("TFFlaubertForQuestionAnsweringSimple"),yFr=o(" (FlauBERT model)"),LFr=l(),ZM=a("li"),A2e=a("strong"),xFr=o("funnel"),$Fr=o(" \u2014 "),rH=a("a"),kFr=o("TFFunnelForQuestionAnswering"),SFr=o(" (Funnel Transformer model)"),RFr=l(),e4=a("li"),y2e=a("strong"),BFr=o("gptj"),PFr=o(" \u2014 "),tH=a("a"),IFr=o("TFGPTJForQuestionAnswering"),qFr=o(" (GPT-J model)"),NFr=l(),o4=a("li"),L2e=a("strong"),jFr=o("longformer"),DFr=o(" \u2014 "),aH=a("a"),GFr=o("TFLongformerForQuestionAnswering"),OFr=o(" (Longformer model)"),VFr=l(),r4=a("li"),x2e=a("strong"),XFr=o("mobilebert"),zFr=o(" \u2014 "),nH=a("a"),QFr=o("TFMobileBertForQuestionAnswering"),WFr=o(" (MobileBERT model)"),HFr=l(),t4=a("li"),$2e=a("strong"),UFr=o("mpnet"),JFr=o(" \u2014 "),sH=a("a"),YFr=o("TFMPNetForQuestionAnswering"),KFr=o(" (MPNet model)"),ZFr=l(),a4=a("li"),k2e=a("strong"),e6r=o("rembert"),o6r=o(" \u2014 "),lH=a("a"),r6r=o("TFRemBertForQuestionAnswering"),t6r=o(" (RemBERT model)"),a6r=l(),n4=a("li"),S2e=a("strong"),n6r=o("roberta"),s6r=o(" \u2014 "),iH=a("a"),l6r=o("TFRobertaForQuestionAnswering"),i6r=o(" (RoBERTa model)"),d6r=l(),s4=a("li"),R2e=a("strong"),c6r=o("roformer"),f6r=o(" \u2014 "),dH=a("a"),m6r=o("TFRoFormerForQuestionAnswering"),g6r=o(" (RoFormer model)"),h6r=l(),l4=a("li"),B2e=a("strong"),p6r=o("xlm"),u6r=o(" \u2014 "),cH=a("a"),_6r=o("TFXLMForQuestionAnsweringSimple"),b6r=o(" (XLM model)"),v6r=l(),i4=a("li"),P2e=a("strong"),F6r=o("xlm-roberta"),T6r=o(" \u2014 "),fH=a("a"),M6r=o("TFXLMRobertaForQuestionAnswering"),E6r=o(" (XLM-RoBERTa model)"),C6r=l(),d4=a("li"),I2e=a("strong"),w6r=o("xlnet"),A6r=o(" \u2014 "),mH=a("a"),y6r=o("TFXLNetForQuestionAnsweringSimple"),L6r=o(" (XLNet model)"),x6r=l(),F(c4.$$.fragment),uPe=l(),cc=a("h2"),f4=a("a"),q2e=a("span"),F(ZL.$$.fragment),$6r=l(),N2e=a("span"),k6r=o("TFAutoModelForVision2Seq"),_Pe=l(),ir=a("div"),F(e8.$$.fragment),S6r=l(),fc=a("p"),R6r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),gH=a("a"),B6r=o("from_pretrained()"),P6r=o(" class method or the "),hH=a("a"),I6r=o("from_config()"),q6r=o(` class
method.`),N6r=l(),o8=a("p"),j6r=o("This class cannot be instantiated directly using "),j2e=a("code"),D6r=o("__init__()"),G6r=o(" (throws an error)."),O6r=l(),Bt=a("div"),F(r8.$$.fragment),V6r=l(),D2e=a("p"),X6r=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),z6r=l(),mc=a("p"),Q6r=o(`Note:
Loading a model from its configuration file does `),G2e=a("strong"),W6r=o("not"),H6r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pH=a("a"),U6r=o("from_pretrained()"),J6r=o(" to load the model weights."),Y6r=l(),F(m4.$$.fragment),K6r=l(),Pr=a("div"),F(t8.$$.fragment),Z6r=l(),O2e=a("p"),eTr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),oTr=l(),sn=a("p"),rTr=o("The model class to instantiate is selected based on the "),V2e=a("code"),tTr=o("model_type"),aTr=o(` property of the config object (either
passed as an argument or loaded from `),X2e=a("code"),nTr=o("pretrained_model_name_or_path"),sTr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),z2e=a("code"),lTr=o("pretrained_model_name_or_path"),iTr=o(":"),dTr=l(),Q2e=a("ul"),g4=a("li"),W2e=a("strong"),cTr=o("vision-encoder-decoder"),fTr=o(" \u2014 "),uH=a("a"),mTr=o("TFVisionEncoderDecoderModel"),gTr=o(" (Vision Encoder decoder model)"),hTr=l(),F(h4.$$.fragment),bPe=l(),gc=a("h2"),p4=a("a"),H2e=a("span"),F(a8.$$.fragment),pTr=l(),U2e=a("span"),uTr=o("TFAutoModelForSpeechSeq2Seq"),vPe=l(),dr=a("div"),F(n8.$$.fragment),_Tr=l(),hc=a("p"),bTr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),_H=a("a"),vTr=o("from_pretrained()"),FTr=o(" class method or the "),bH=a("a"),TTr=o("from_config()"),MTr=o(` class
method.`),ETr=l(),s8=a("p"),CTr=o("This class cannot be instantiated directly using "),J2e=a("code"),wTr=o("__init__()"),ATr=o(" (throws an error)."),yTr=l(),Pt=a("div"),F(l8.$$.fragment),LTr=l(),Y2e=a("p"),xTr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),$Tr=l(),pc=a("p"),kTr=o(`Note:
Loading a model from its configuration file does `),K2e=a("strong"),STr=o("not"),RTr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vH=a("a"),BTr=o("from_pretrained()"),PTr=o(" to load the model weights."),ITr=l(),F(u4.$$.fragment),qTr=l(),Ir=a("div"),F(i8.$$.fragment),NTr=l(),Z2e=a("p"),jTr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),DTr=l(),ln=a("p"),GTr=o("The model class to instantiate is selected based on the "),e5e=a("code"),OTr=o("model_type"),VTr=o(` property of the config object (either
passed as an argument or loaded from `),o5e=a("code"),XTr=o("pretrained_model_name_or_path"),zTr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),r5e=a("code"),QTr=o("pretrained_model_name_or_path"),WTr=o(":"),HTr=l(),t5e=a("ul"),_4=a("li"),a5e=a("strong"),UTr=o("speech_to_text"),JTr=o(" \u2014 "),FH=a("a"),YTr=o("TFSpeech2TextForConditionalGeneration"),KTr=o(" (Speech2Text model)"),ZTr=l(),F(b4.$$.fragment),FPe=l(),uc=a("h2"),v4=a("a"),n5e=a("span"),F(d8.$$.fragment),eMr=l(),s5e=a("span"),oMr=o("FlaxAutoModel"),TPe=l(),cr=a("div"),F(c8.$$.fragment),rMr=l(),_c=a("p"),tMr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),TH=a("a"),aMr=o("from_pretrained()"),nMr=o(" class method or the "),MH=a("a"),sMr=o("from_config()"),lMr=o(` class
method.`),iMr=l(),f8=a("p"),dMr=o("This class cannot be instantiated directly using "),l5e=a("code"),cMr=o("__init__()"),fMr=o(" (throws an error)."),mMr=l(),It=a("div"),F(m8.$$.fragment),gMr=l(),i5e=a("p"),hMr=o("Instantiates one of the base model classes of the library from a configuration."),pMr=l(),bc=a("p"),uMr=o(`Note:
Loading a model from its configuration file does `),d5e=a("strong"),_Mr=o("not"),bMr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),EH=a("a"),vMr=o("from_pretrained()"),FMr=o(" to load the model weights."),TMr=l(),F(F4.$$.fragment),MMr=l(),qr=a("div"),F(g8.$$.fragment),EMr=l(),c5e=a("p"),CMr=o("Instantiate one of the base model classes of the library from a pretrained model."),wMr=l(),dn=a("p"),AMr=o("The model class to instantiate is selected based on the "),f5e=a("code"),yMr=o("model_type"),LMr=o(` property of the config object (either
passed as an argument or loaded from `),m5e=a("code"),xMr=o("pretrained_model_name_or_path"),$Mr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),g5e=a("code"),kMr=o("pretrained_model_name_or_path"),SMr=o(":"),RMr=l(),oe=a("ul"),T4=a("li"),h5e=a("strong"),BMr=o("albert"),PMr=o(" \u2014 "),CH=a("a"),IMr=o("FlaxAlbertModel"),qMr=o(" (ALBERT model)"),NMr=l(),M4=a("li"),p5e=a("strong"),jMr=o("bart"),DMr=o(" \u2014 "),wH=a("a"),GMr=o("FlaxBartModel"),OMr=o(" (BART model)"),VMr=l(),E4=a("li"),u5e=a("strong"),XMr=o("beit"),zMr=o(" \u2014 "),AH=a("a"),QMr=o("FlaxBeitModel"),WMr=o(" (BEiT model)"),HMr=l(),C4=a("li"),_5e=a("strong"),UMr=o("bert"),JMr=o(" \u2014 "),yH=a("a"),YMr=o("FlaxBertModel"),KMr=o(" (BERT model)"),ZMr=l(),w4=a("li"),b5e=a("strong"),e4r=o("big_bird"),o4r=o(" \u2014 "),LH=a("a"),r4r=o("FlaxBigBirdModel"),t4r=o(" (BigBird model)"),a4r=l(),A4=a("li"),v5e=a("strong"),n4r=o("blenderbot"),s4r=o(" \u2014 "),xH=a("a"),l4r=o("FlaxBlenderbotModel"),i4r=o(" (Blenderbot model)"),d4r=l(),y4=a("li"),F5e=a("strong"),c4r=o("blenderbot-small"),f4r=o(" \u2014 "),$H=a("a"),m4r=o("FlaxBlenderbotSmallModel"),g4r=o(" (BlenderbotSmall model)"),h4r=l(),L4=a("li"),T5e=a("strong"),p4r=o("clip"),u4r=o(" \u2014 "),kH=a("a"),_4r=o("FlaxCLIPModel"),b4r=o(" (CLIP model)"),v4r=l(),x4=a("li"),M5e=a("strong"),F4r=o("distilbert"),T4r=o(" \u2014 "),SH=a("a"),M4r=o("FlaxDistilBertModel"),E4r=o(" (DistilBERT model)"),C4r=l(),$4=a("li"),E5e=a("strong"),w4r=o("electra"),A4r=o(" \u2014 "),RH=a("a"),y4r=o("FlaxElectraModel"),L4r=o(" (ELECTRA model)"),x4r=l(),k4=a("li"),C5e=a("strong"),$4r=o("gpt2"),k4r=o(" \u2014 "),BH=a("a"),S4r=o("FlaxGPT2Model"),R4r=o(" (OpenAI GPT-2 model)"),B4r=l(),S4=a("li"),w5e=a("strong"),P4r=o("gpt_neo"),I4r=o(" \u2014 "),PH=a("a"),q4r=o("FlaxGPTNeoModel"),N4r=o(" (GPT Neo model)"),j4r=l(),R4=a("li"),A5e=a("strong"),D4r=o("gptj"),G4r=o(" \u2014 "),IH=a("a"),O4r=o("FlaxGPTJModel"),V4r=o(" (GPT-J model)"),X4r=l(),B4=a("li"),y5e=a("strong"),z4r=o("marian"),Q4r=o(" \u2014 "),qH=a("a"),W4r=o("FlaxMarianModel"),H4r=o(" (Marian model)"),U4r=l(),P4=a("li"),L5e=a("strong"),J4r=o("mbart"),Y4r=o(" \u2014 "),NH=a("a"),K4r=o("FlaxMBartModel"),Z4r=o(" (mBART model)"),eEr=l(),I4=a("li"),x5e=a("strong"),oEr=o("mt5"),rEr=o(" \u2014 "),jH=a("a"),tEr=o("FlaxMT5Model"),aEr=o(" (mT5 model)"),nEr=l(),q4=a("li"),$5e=a("strong"),sEr=o("pegasus"),lEr=o(" \u2014 "),DH=a("a"),iEr=o("FlaxPegasusModel"),dEr=o(" (Pegasus model)"),cEr=l(),N4=a("li"),k5e=a("strong"),fEr=o("roberta"),mEr=o(" \u2014 "),GH=a("a"),gEr=o("FlaxRobertaModel"),hEr=o(" (RoBERTa model)"),pEr=l(),j4=a("li"),S5e=a("strong"),uEr=o("roformer"),_Er=o(" \u2014 "),OH=a("a"),bEr=o("FlaxRoFormerModel"),vEr=o(" (RoFormer model)"),FEr=l(),D4=a("li"),R5e=a("strong"),TEr=o("t5"),MEr=o(" \u2014 "),VH=a("a"),EEr=o("FlaxT5Model"),CEr=o(" (T5 model)"),wEr=l(),G4=a("li"),B5e=a("strong"),AEr=o("vision-text-dual-encoder"),yEr=o(" \u2014 "),XH=a("a"),LEr=o("FlaxVisionTextDualEncoderModel"),xEr=o(" (VisionTextDualEncoder model)"),$Er=l(),O4=a("li"),P5e=a("strong"),kEr=o("vit"),SEr=o(" \u2014 "),zH=a("a"),REr=o("FlaxViTModel"),BEr=o(" (ViT model)"),PEr=l(),V4=a("li"),I5e=a("strong"),IEr=o("wav2vec2"),qEr=o(" \u2014 "),QH=a("a"),NEr=o("FlaxWav2Vec2Model"),jEr=o(" (Wav2Vec2 model)"),DEr=l(),X4=a("li"),q5e=a("strong"),GEr=o("xglm"),OEr=o(" \u2014 "),WH=a("a"),VEr=o("FlaxXGLMModel"),XEr=o(" (XGLM model)"),zEr=l(),z4=a("li"),N5e=a("strong"),QEr=o("xlm-roberta"),WEr=o(" \u2014 "),HH=a("a"),HEr=o("FlaxXLMRobertaModel"),UEr=o(" (XLM-RoBERTa model)"),JEr=l(),F(Q4.$$.fragment),MPe=l(),vc=a("h2"),W4=a("a"),j5e=a("span"),F(h8.$$.fragment),YEr=l(),D5e=a("span"),KEr=o("FlaxAutoModelForCausalLM"),EPe=l(),fr=a("div"),F(p8.$$.fragment),ZEr=l(),Fc=a("p"),eCr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),UH=a("a"),oCr=o("from_pretrained()"),rCr=o(" class method or the "),JH=a("a"),tCr=o("from_config()"),aCr=o(` class
method.`),nCr=l(),u8=a("p"),sCr=o("This class cannot be instantiated directly using "),G5e=a("code"),lCr=o("__init__()"),iCr=o(" (throws an error)."),dCr=l(),qt=a("div"),F(_8.$$.fragment),cCr=l(),O5e=a("p"),fCr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),mCr=l(),Tc=a("p"),gCr=o(`Note:
Loading a model from its configuration file does `),V5e=a("strong"),hCr=o("not"),pCr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),YH=a("a"),uCr=o("from_pretrained()"),_Cr=o(" to load the model weights."),bCr=l(),F(H4.$$.fragment),vCr=l(),Nr=a("div"),F(b8.$$.fragment),FCr=l(),X5e=a("p"),TCr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),MCr=l(),cn=a("p"),ECr=o("The model class to instantiate is selected based on the "),z5e=a("code"),CCr=o("model_type"),wCr=o(` property of the config object (either
passed as an argument or loaded from `),Q5e=a("code"),ACr=o("pretrained_model_name_or_path"),yCr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),W5e=a("code"),LCr=o("pretrained_model_name_or_path"),xCr=o(":"),$Cr=l(),ke=a("ul"),U4=a("li"),H5e=a("strong"),kCr=o("bart"),SCr=o(" \u2014 "),KH=a("a"),RCr=o("FlaxBartForCausalLM"),BCr=o(" (BART model)"),PCr=l(),J4=a("li"),U5e=a("strong"),ICr=o("bert"),qCr=o(" \u2014 "),ZH=a("a"),NCr=o("FlaxBertForCausalLM"),jCr=o(" (BERT model)"),DCr=l(),Y4=a("li"),J5e=a("strong"),GCr=o("big_bird"),OCr=o(" \u2014 "),eU=a("a"),VCr=o("FlaxBigBirdForCausalLM"),XCr=o(" (BigBird model)"),zCr=l(),K4=a("li"),Y5e=a("strong"),QCr=o("electra"),WCr=o(" \u2014 "),oU=a("a"),HCr=o("FlaxElectraForCausalLM"),UCr=o(" (ELECTRA model)"),JCr=l(),Z4=a("li"),K5e=a("strong"),YCr=o("gpt2"),KCr=o(" \u2014 "),rU=a("a"),ZCr=o("FlaxGPT2LMHeadModel"),e3r=o(" (OpenAI GPT-2 model)"),o3r=l(),eE=a("li"),Z5e=a("strong"),r3r=o("gpt_neo"),t3r=o(" \u2014 "),tU=a("a"),a3r=o("FlaxGPTNeoForCausalLM"),n3r=o(" (GPT Neo model)"),s3r=l(),oE=a("li"),eve=a("strong"),l3r=o("gptj"),i3r=o(" \u2014 "),aU=a("a"),d3r=o("FlaxGPTJForCausalLM"),c3r=o(" (GPT-J model)"),f3r=l(),rE=a("li"),ove=a("strong"),m3r=o("roberta"),g3r=o(" \u2014 "),nU=a("a"),h3r=o("FlaxRobertaForCausalLM"),p3r=o(" (RoBERTa model)"),u3r=l(),tE=a("li"),rve=a("strong"),_3r=o("xglm"),b3r=o(" \u2014 "),sU=a("a"),v3r=o("FlaxXGLMForCausalLM"),F3r=o(" (XGLM model)"),T3r=l(),F(aE.$$.fragment),CPe=l(),Mc=a("h2"),nE=a("a"),tve=a("span"),F(v8.$$.fragment),M3r=l(),ave=a("span"),E3r=o("FlaxAutoModelForPreTraining"),wPe=l(),mr=a("div"),F(F8.$$.fragment),C3r=l(),Ec=a("p"),w3r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),lU=a("a"),A3r=o("from_pretrained()"),y3r=o(" class method or the "),iU=a("a"),L3r=o("from_config()"),x3r=o(` class
method.`),$3r=l(),T8=a("p"),k3r=o("This class cannot be instantiated directly using "),nve=a("code"),S3r=o("__init__()"),R3r=o(" (throws an error)."),B3r=l(),Nt=a("div"),F(M8.$$.fragment),P3r=l(),sve=a("p"),I3r=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),q3r=l(),Cc=a("p"),N3r=o(`Note:
Loading a model from its configuration file does `),lve=a("strong"),j3r=o("not"),D3r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dU=a("a"),G3r=o("from_pretrained()"),O3r=o(" to load the model weights."),V3r=l(),F(sE.$$.fragment),X3r=l(),jr=a("div"),F(E8.$$.fragment),z3r=l(),ive=a("p"),Q3r=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),W3r=l(),fn=a("p"),H3r=o("The model class to instantiate is selected based on the "),dve=a("code"),U3r=o("model_type"),J3r=o(` property of the config object (either
passed as an argument or loaded from `),cve=a("code"),Y3r=o("pretrained_model_name_or_path"),K3r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fve=a("code"),Z3r=o("pretrained_model_name_or_path"),ewr=o(":"),owr=l(),Me=a("ul"),lE=a("li"),mve=a("strong"),rwr=o("albert"),twr=o(" \u2014 "),cU=a("a"),awr=o("FlaxAlbertForPreTraining"),nwr=o(" (ALBERT model)"),swr=l(),iE=a("li"),gve=a("strong"),lwr=o("bart"),iwr=o(" \u2014 "),fU=a("a"),dwr=o("FlaxBartForConditionalGeneration"),cwr=o(" (BART model)"),fwr=l(),dE=a("li"),hve=a("strong"),mwr=o("bert"),gwr=o(" \u2014 "),mU=a("a"),hwr=o("FlaxBertForPreTraining"),pwr=o(" (BERT model)"),uwr=l(),cE=a("li"),pve=a("strong"),_wr=o("big_bird"),bwr=o(" \u2014 "),gU=a("a"),vwr=o("FlaxBigBirdForPreTraining"),Fwr=o(" (BigBird model)"),Twr=l(),fE=a("li"),uve=a("strong"),Mwr=o("electra"),Ewr=o(" \u2014 "),hU=a("a"),Cwr=o("FlaxElectraForPreTraining"),wwr=o(" (ELECTRA model)"),Awr=l(),mE=a("li"),_ve=a("strong"),ywr=o("mbart"),Lwr=o(" \u2014 "),pU=a("a"),xwr=o("FlaxMBartForConditionalGeneration"),$wr=o(" (mBART model)"),kwr=l(),gE=a("li"),bve=a("strong"),Swr=o("mt5"),Rwr=o(" \u2014 "),uU=a("a"),Bwr=o("FlaxMT5ForConditionalGeneration"),Pwr=o(" (mT5 model)"),Iwr=l(),hE=a("li"),vve=a("strong"),qwr=o("roberta"),Nwr=o(" \u2014 "),_U=a("a"),jwr=o("FlaxRobertaForMaskedLM"),Dwr=o(" (RoBERTa model)"),Gwr=l(),pE=a("li"),Fve=a("strong"),Owr=o("roformer"),Vwr=o(" \u2014 "),bU=a("a"),Xwr=o("FlaxRoFormerForMaskedLM"),zwr=o(" (RoFormer model)"),Qwr=l(),uE=a("li"),Tve=a("strong"),Wwr=o("t5"),Hwr=o(" \u2014 "),vU=a("a"),Uwr=o("FlaxT5ForConditionalGeneration"),Jwr=o(" (T5 model)"),Ywr=l(),_E=a("li"),Mve=a("strong"),Kwr=o("wav2vec2"),Zwr=o(" \u2014 "),FU=a("a"),eAr=o("FlaxWav2Vec2ForPreTraining"),oAr=o(" (Wav2Vec2 model)"),rAr=l(),bE=a("li"),Eve=a("strong"),tAr=o("xlm-roberta"),aAr=o(" \u2014 "),TU=a("a"),nAr=o("FlaxXLMRobertaForMaskedLM"),sAr=o(" (XLM-RoBERTa model)"),lAr=l(),F(vE.$$.fragment),APe=l(),wc=a("h2"),FE=a("a"),Cve=a("span"),F(C8.$$.fragment),iAr=l(),wve=a("span"),dAr=o("FlaxAutoModelForMaskedLM"),yPe=l(),gr=a("div"),F(w8.$$.fragment),cAr=l(),Ac=a("p"),fAr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),MU=a("a"),mAr=o("from_pretrained()"),gAr=o(" class method or the "),EU=a("a"),hAr=o("from_config()"),pAr=o(` class
method.`),uAr=l(),A8=a("p"),_Ar=o("This class cannot be instantiated directly using "),Ave=a("code"),bAr=o("__init__()"),vAr=o(" (throws an error)."),FAr=l(),jt=a("div"),F(y8.$$.fragment),TAr=l(),yve=a("p"),MAr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),EAr=l(),yc=a("p"),CAr=o(`Note:
Loading a model from its configuration file does `),Lve=a("strong"),wAr=o("not"),AAr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),CU=a("a"),yAr=o("from_pretrained()"),LAr=o(" to load the model weights."),xAr=l(),F(TE.$$.fragment),$Ar=l(),Dr=a("div"),F(L8.$$.fragment),kAr=l(),xve=a("p"),SAr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),RAr=l(),mn=a("p"),BAr=o("The model class to instantiate is selected based on the "),$ve=a("code"),PAr=o("model_type"),IAr=o(` property of the config object (either
passed as an argument or loaded from `),kve=a("code"),qAr=o("pretrained_model_name_or_path"),NAr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Sve=a("code"),jAr=o("pretrained_model_name_or_path"),DAr=o(":"),GAr=l(),Le=a("ul"),ME=a("li"),Rve=a("strong"),OAr=o("albert"),VAr=o(" \u2014 "),wU=a("a"),XAr=o("FlaxAlbertForMaskedLM"),zAr=o(" (ALBERT model)"),QAr=l(),EE=a("li"),Bve=a("strong"),WAr=o("bart"),HAr=o(" \u2014 "),AU=a("a"),UAr=o("FlaxBartForConditionalGeneration"),JAr=o(" (BART model)"),YAr=l(),CE=a("li"),Pve=a("strong"),KAr=o("bert"),ZAr=o(" \u2014 "),yU=a("a"),e0r=o("FlaxBertForMaskedLM"),o0r=o(" (BERT model)"),r0r=l(),wE=a("li"),Ive=a("strong"),t0r=o("big_bird"),a0r=o(" \u2014 "),LU=a("a"),n0r=o("FlaxBigBirdForMaskedLM"),s0r=o(" (BigBird model)"),l0r=l(),AE=a("li"),qve=a("strong"),i0r=o("distilbert"),d0r=o(" \u2014 "),xU=a("a"),c0r=o("FlaxDistilBertForMaskedLM"),f0r=o(" (DistilBERT model)"),m0r=l(),yE=a("li"),Nve=a("strong"),g0r=o("electra"),h0r=o(" \u2014 "),$U=a("a"),p0r=o("FlaxElectraForMaskedLM"),u0r=o(" (ELECTRA model)"),_0r=l(),LE=a("li"),jve=a("strong"),b0r=o("mbart"),v0r=o(" \u2014 "),kU=a("a"),F0r=o("FlaxMBartForConditionalGeneration"),T0r=o(" (mBART model)"),M0r=l(),xE=a("li"),Dve=a("strong"),E0r=o("roberta"),C0r=o(" \u2014 "),SU=a("a"),w0r=o("FlaxRobertaForMaskedLM"),A0r=o(" (RoBERTa model)"),y0r=l(),$E=a("li"),Gve=a("strong"),L0r=o("roformer"),x0r=o(" \u2014 "),RU=a("a"),$0r=o("FlaxRoFormerForMaskedLM"),k0r=o(" (RoFormer model)"),S0r=l(),kE=a("li"),Ove=a("strong"),R0r=o("xlm-roberta"),B0r=o(" \u2014 "),BU=a("a"),P0r=o("FlaxXLMRobertaForMaskedLM"),I0r=o(" (XLM-RoBERTa model)"),q0r=l(),F(SE.$$.fragment),LPe=l(),Lc=a("h2"),RE=a("a"),Vve=a("span"),F(x8.$$.fragment),N0r=l(),Xve=a("span"),j0r=o("FlaxAutoModelForSeq2SeqLM"),xPe=l(),hr=a("div"),F($8.$$.fragment),D0r=l(),xc=a("p"),G0r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),PU=a("a"),O0r=o("from_pretrained()"),V0r=o(" class method or the "),IU=a("a"),X0r=o("from_config()"),z0r=o(` class
method.`),Q0r=l(),k8=a("p"),W0r=o("This class cannot be instantiated directly using "),zve=a("code"),H0r=o("__init__()"),U0r=o(" (throws an error)."),J0r=l(),Dt=a("div"),F(S8.$$.fragment),Y0r=l(),Qve=a("p"),K0r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Z0r=l(),$c=a("p"),eyr=o(`Note:
Loading a model from its configuration file does `),Wve=a("strong"),oyr=o("not"),ryr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qU=a("a"),tyr=o("from_pretrained()"),ayr=o(" to load the model weights."),nyr=l(),F(BE.$$.fragment),syr=l(),Gr=a("div"),F(R8.$$.fragment),lyr=l(),Hve=a("p"),iyr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),dyr=l(),gn=a("p"),cyr=o("The model class to instantiate is selected based on the "),Uve=a("code"),fyr=o("model_type"),myr=o(` property of the config object (either
passed as an argument or loaded from `),Jve=a("code"),gyr=o("pretrained_model_name_or_path"),hyr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yve=a("code"),pyr=o("pretrained_model_name_or_path"),uyr=o(":"),_yr=l(),Se=a("ul"),PE=a("li"),Kve=a("strong"),byr=o("bart"),vyr=o(" \u2014 "),NU=a("a"),Fyr=o("FlaxBartForConditionalGeneration"),Tyr=o(" (BART model)"),Myr=l(),IE=a("li"),Zve=a("strong"),Eyr=o("blenderbot"),Cyr=o(" \u2014 "),jU=a("a"),wyr=o("FlaxBlenderbotForConditionalGeneration"),Ayr=o(" (Blenderbot model)"),yyr=l(),qE=a("li"),eFe=a("strong"),Lyr=o("blenderbot-small"),xyr=o(" \u2014 "),DU=a("a"),$yr=o("FlaxBlenderbotSmallForConditionalGeneration"),kyr=o(" (BlenderbotSmall model)"),Syr=l(),NE=a("li"),oFe=a("strong"),Ryr=o("encoder-decoder"),Byr=o(" \u2014 "),GU=a("a"),Pyr=o("FlaxEncoderDecoderModel"),Iyr=o(" (Encoder decoder model)"),qyr=l(),jE=a("li"),rFe=a("strong"),Nyr=o("marian"),jyr=o(" \u2014 "),OU=a("a"),Dyr=o("FlaxMarianMTModel"),Gyr=o(" (Marian model)"),Oyr=l(),DE=a("li"),tFe=a("strong"),Vyr=o("mbart"),Xyr=o(" \u2014 "),VU=a("a"),zyr=o("FlaxMBartForConditionalGeneration"),Qyr=o(" (mBART model)"),Wyr=l(),GE=a("li"),aFe=a("strong"),Hyr=o("mt5"),Uyr=o(" \u2014 "),XU=a("a"),Jyr=o("FlaxMT5ForConditionalGeneration"),Yyr=o(" (mT5 model)"),Kyr=l(),OE=a("li"),nFe=a("strong"),Zyr=o("pegasus"),eLr=o(" \u2014 "),zU=a("a"),oLr=o("FlaxPegasusForConditionalGeneration"),rLr=o(" (Pegasus model)"),tLr=l(),VE=a("li"),sFe=a("strong"),aLr=o("t5"),nLr=o(" \u2014 "),QU=a("a"),sLr=o("FlaxT5ForConditionalGeneration"),lLr=o(" (T5 model)"),iLr=l(),F(XE.$$.fragment),$Pe=l(),kc=a("h2"),zE=a("a"),lFe=a("span"),F(B8.$$.fragment),dLr=l(),iFe=a("span"),cLr=o("FlaxAutoModelForSequenceClassification"),kPe=l(),pr=a("div"),F(P8.$$.fragment),fLr=l(),Sc=a("p"),mLr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),WU=a("a"),gLr=o("from_pretrained()"),hLr=o(" class method or the "),HU=a("a"),pLr=o("from_config()"),uLr=o(` class
method.`),_Lr=l(),I8=a("p"),bLr=o("This class cannot be instantiated directly using "),dFe=a("code"),vLr=o("__init__()"),FLr=o(" (throws an error)."),TLr=l(),Gt=a("div"),F(q8.$$.fragment),MLr=l(),cFe=a("p"),ELr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),CLr=l(),Rc=a("p"),wLr=o(`Note:
Loading a model from its configuration file does `),fFe=a("strong"),ALr=o("not"),yLr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),UU=a("a"),LLr=o("from_pretrained()"),xLr=o(" to load the model weights."),$Lr=l(),F(QE.$$.fragment),kLr=l(),Or=a("div"),F(N8.$$.fragment),SLr=l(),mFe=a("p"),RLr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),BLr=l(),hn=a("p"),PLr=o("The model class to instantiate is selected based on the "),gFe=a("code"),ILr=o("model_type"),qLr=o(` property of the config object (either
passed as an argument or loaded from `),hFe=a("code"),NLr=o("pretrained_model_name_or_path"),jLr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pFe=a("code"),DLr=o("pretrained_model_name_or_path"),GLr=o(":"),OLr=l(),xe=a("ul"),WE=a("li"),uFe=a("strong"),VLr=o("albert"),XLr=o(" \u2014 "),JU=a("a"),zLr=o("FlaxAlbertForSequenceClassification"),QLr=o(" (ALBERT model)"),WLr=l(),HE=a("li"),_Fe=a("strong"),HLr=o("bart"),ULr=o(" \u2014 "),YU=a("a"),JLr=o("FlaxBartForSequenceClassification"),YLr=o(" (BART model)"),KLr=l(),UE=a("li"),bFe=a("strong"),ZLr=o("bert"),e8r=o(" \u2014 "),KU=a("a"),o8r=o("FlaxBertForSequenceClassification"),r8r=o(" (BERT model)"),t8r=l(),JE=a("li"),vFe=a("strong"),a8r=o("big_bird"),n8r=o(" \u2014 "),ZU=a("a"),s8r=o("FlaxBigBirdForSequenceClassification"),l8r=o(" (BigBird model)"),i8r=l(),YE=a("li"),FFe=a("strong"),d8r=o("distilbert"),c8r=o(" \u2014 "),eJ=a("a"),f8r=o("FlaxDistilBertForSequenceClassification"),m8r=o(" (DistilBERT model)"),g8r=l(),KE=a("li"),TFe=a("strong"),h8r=o("electra"),p8r=o(" \u2014 "),oJ=a("a"),u8r=o("FlaxElectraForSequenceClassification"),_8r=o(" (ELECTRA model)"),b8r=l(),ZE=a("li"),MFe=a("strong"),v8r=o("mbart"),F8r=o(" \u2014 "),rJ=a("a"),T8r=o("FlaxMBartForSequenceClassification"),M8r=o(" (mBART model)"),E8r=l(),eC=a("li"),EFe=a("strong"),C8r=o("roberta"),w8r=o(" \u2014 "),tJ=a("a"),A8r=o("FlaxRobertaForSequenceClassification"),y8r=o(" (RoBERTa model)"),L8r=l(),oC=a("li"),CFe=a("strong"),x8r=o("roformer"),$8r=o(" \u2014 "),aJ=a("a"),k8r=o("FlaxRoFormerForSequenceClassification"),S8r=o(" (RoFormer model)"),R8r=l(),rC=a("li"),wFe=a("strong"),B8r=o("xlm-roberta"),P8r=o(" \u2014 "),nJ=a("a"),I8r=o("FlaxXLMRobertaForSequenceClassification"),q8r=o(" (XLM-RoBERTa model)"),N8r=l(),F(tC.$$.fragment),SPe=l(),Bc=a("h2"),aC=a("a"),AFe=a("span"),F(j8.$$.fragment),j8r=l(),yFe=a("span"),D8r=o("FlaxAutoModelForQuestionAnswering"),RPe=l(),ur=a("div"),F(D8.$$.fragment),G8r=l(),Pc=a("p"),O8r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),sJ=a("a"),V8r=o("from_pretrained()"),X8r=o(" class method or the "),lJ=a("a"),z8r=o("from_config()"),Q8r=o(` class
method.`),W8r=l(),G8=a("p"),H8r=o("This class cannot be instantiated directly using "),LFe=a("code"),U8r=o("__init__()"),J8r=o(" (throws an error)."),Y8r=l(),Ot=a("div"),F(O8.$$.fragment),K8r=l(),xFe=a("p"),Z8r=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),exr=l(),Ic=a("p"),oxr=o(`Note:
Loading a model from its configuration file does `),$Fe=a("strong"),rxr=o("not"),txr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),iJ=a("a"),axr=o("from_pretrained()"),nxr=o(" to load the model weights."),sxr=l(),F(nC.$$.fragment),lxr=l(),Vr=a("div"),F(V8.$$.fragment),ixr=l(),kFe=a("p"),dxr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),cxr=l(),pn=a("p"),fxr=o("The model class to instantiate is selected based on the "),SFe=a("code"),mxr=o("model_type"),gxr=o(` property of the config object (either
passed as an argument or loaded from `),RFe=a("code"),hxr=o("pretrained_model_name_or_path"),pxr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),BFe=a("code"),uxr=o("pretrained_model_name_or_path"),_xr=o(":"),bxr=l(),$e=a("ul"),sC=a("li"),PFe=a("strong"),vxr=o("albert"),Fxr=o(" \u2014 "),dJ=a("a"),Txr=o("FlaxAlbertForQuestionAnswering"),Mxr=o(" (ALBERT model)"),Exr=l(),lC=a("li"),IFe=a("strong"),Cxr=o("bart"),wxr=o(" \u2014 "),cJ=a("a"),Axr=o("FlaxBartForQuestionAnswering"),yxr=o(" (BART model)"),Lxr=l(),iC=a("li"),qFe=a("strong"),xxr=o("bert"),$xr=o(" \u2014 "),fJ=a("a"),kxr=o("FlaxBertForQuestionAnswering"),Sxr=o(" (BERT model)"),Rxr=l(),dC=a("li"),NFe=a("strong"),Bxr=o("big_bird"),Pxr=o(" \u2014 "),mJ=a("a"),Ixr=o("FlaxBigBirdForQuestionAnswering"),qxr=o(" (BigBird model)"),Nxr=l(),cC=a("li"),jFe=a("strong"),jxr=o("distilbert"),Dxr=o(" \u2014 "),gJ=a("a"),Gxr=o("FlaxDistilBertForQuestionAnswering"),Oxr=o(" (DistilBERT model)"),Vxr=l(),fC=a("li"),DFe=a("strong"),Xxr=o("electra"),zxr=o(" \u2014 "),hJ=a("a"),Qxr=o("FlaxElectraForQuestionAnswering"),Wxr=o(" (ELECTRA model)"),Hxr=l(),mC=a("li"),GFe=a("strong"),Uxr=o("mbart"),Jxr=o(" \u2014 "),pJ=a("a"),Yxr=o("FlaxMBartForQuestionAnswering"),Kxr=o(" (mBART model)"),Zxr=l(),gC=a("li"),OFe=a("strong"),e7r=o("roberta"),o7r=o(" \u2014 "),uJ=a("a"),r7r=o("FlaxRobertaForQuestionAnswering"),t7r=o(" (RoBERTa model)"),a7r=l(),hC=a("li"),VFe=a("strong"),n7r=o("roformer"),s7r=o(" \u2014 "),_J=a("a"),l7r=o("FlaxRoFormerForQuestionAnswering"),i7r=o(" (RoFormer model)"),d7r=l(),pC=a("li"),XFe=a("strong"),c7r=o("xlm-roberta"),f7r=o(" \u2014 "),bJ=a("a"),m7r=o("FlaxXLMRobertaForQuestionAnswering"),g7r=o(" (XLM-RoBERTa model)"),h7r=l(),F(uC.$$.fragment),BPe=l(),qc=a("h2"),_C=a("a"),zFe=a("span"),F(X8.$$.fragment),p7r=l(),QFe=a("span"),u7r=o("FlaxAutoModelForTokenClassification"),PPe=l(),_r=a("div"),F(z8.$$.fragment),_7r=l(),Nc=a("p"),b7r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),vJ=a("a"),v7r=o("from_pretrained()"),F7r=o(" class method or the "),FJ=a("a"),T7r=o("from_config()"),M7r=o(` class
method.`),E7r=l(),Q8=a("p"),C7r=o("This class cannot be instantiated directly using "),WFe=a("code"),w7r=o("__init__()"),A7r=o(" (throws an error)."),y7r=l(),Vt=a("div"),F(W8.$$.fragment),L7r=l(),HFe=a("p"),x7r=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),$7r=l(),jc=a("p"),k7r=o(`Note:
Loading a model from its configuration file does `),UFe=a("strong"),S7r=o("not"),R7r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),TJ=a("a"),B7r=o("from_pretrained()"),P7r=o(" to load the model weights."),I7r=l(),F(bC.$$.fragment),q7r=l(),Xr=a("div"),F(H8.$$.fragment),N7r=l(),JFe=a("p"),j7r=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),D7r=l(),un=a("p"),G7r=o("The model class to instantiate is selected based on the "),YFe=a("code"),O7r=o("model_type"),V7r=o(` property of the config object (either
passed as an argument or loaded from `),KFe=a("code"),X7r=o("pretrained_model_name_or_path"),z7r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ZFe=a("code"),Q7r=o("pretrained_model_name_or_path"),W7r=o(":"),H7r=l(),De=a("ul"),vC=a("li"),e6e=a("strong"),U7r=o("albert"),J7r=o(" \u2014 "),MJ=a("a"),Y7r=o("FlaxAlbertForTokenClassification"),K7r=o(" (ALBERT model)"),Z7r=l(),FC=a("li"),o6e=a("strong"),e$r=o("bert"),o$r=o(" \u2014 "),EJ=a("a"),r$r=o("FlaxBertForTokenClassification"),t$r=o(" (BERT model)"),a$r=l(),TC=a("li"),r6e=a("strong"),n$r=o("big_bird"),s$r=o(" \u2014 "),CJ=a("a"),l$r=o("FlaxBigBirdForTokenClassification"),i$r=o(" (BigBird model)"),d$r=l(),MC=a("li"),t6e=a("strong"),c$r=o("distilbert"),f$r=o(" \u2014 "),wJ=a("a"),m$r=o("FlaxDistilBertForTokenClassification"),g$r=o(" (DistilBERT model)"),h$r=l(),EC=a("li"),a6e=a("strong"),p$r=o("electra"),u$r=o(" \u2014 "),AJ=a("a"),_$r=o("FlaxElectraForTokenClassification"),b$r=o(" (ELECTRA model)"),v$r=l(),CC=a("li"),n6e=a("strong"),F$r=o("roberta"),T$r=o(" \u2014 "),yJ=a("a"),M$r=o("FlaxRobertaForTokenClassification"),E$r=o(" (RoBERTa model)"),C$r=l(),wC=a("li"),s6e=a("strong"),w$r=o("roformer"),A$r=o(" \u2014 "),LJ=a("a"),y$r=o("FlaxRoFormerForTokenClassification"),L$r=o(" (RoFormer model)"),x$r=l(),AC=a("li"),l6e=a("strong"),$$r=o("xlm-roberta"),k$r=o(" \u2014 "),xJ=a("a"),S$r=o("FlaxXLMRobertaForTokenClassification"),R$r=o(" (XLM-RoBERTa model)"),B$r=l(),F(yC.$$.fragment),IPe=l(),Dc=a("h2"),LC=a("a"),i6e=a("span"),F(U8.$$.fragment),P$r=l(),d6e=a("span"),I$r=o("FlaxAutoModelForMultipleChoice"),qPe=l(),br=a("div"),F(J8.$$.fragment),q$r=l(),Gc=a("p"),N$r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),$J=a("a"),j$r=o("from_pretrained()"),D$r=o(" class method or the "),kJ=a("a"),G$r=o("from_config()"),O$r=o(` class
method.`),V$r=l(),Y8=a("p"),X$r=o("This class cannot be instantiated directly using "),c6e=a("code"),z$r=o("__init__()"),Q$r=o(" (throws an error)."),W$r=l(),Xt=a("div"),F(K8.$$.fragment),H$r=l(),f6e=a("p"),U$r=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),J$r=l(),Oc=a("p"),Y$r=o(`Note:
Loading a model from its configuration file does `),m6e=a("strong"),K$r=o("not"),Z$r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),SJ=a("a"),ekr=o("from_pretrained()"),okr=o(" to load the model weights."),rkr=l(),F(xC.$$.fragment),tkr=l(),zr=a("div"),F(Z8.$$.fragment),akr=l(),g6e=a("p"),nkr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),skr=l(),_n=a("p"),lkr=o("The model class to instantiate is selected based on the "),h6e=a("code"),ikr=o("model_type"),dkr=o(` property of the config object (either
passed as an argument or loaded from `),p6e=a("code"),ckr=o("pretrained_model_name_or_path"),fkr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),u6e=a("code"),mkr=o("pretrained_model_name_or_path"),gkr=o(":"),hkr=l(),Ge=a("ul"),$C=a("li"),_6e=a("strong"),pkr=o("albert"),ukr=o(" \u2014 "),RJ=a("a"),_kr=o("FlaxAlbertForMultipleChoice"),bkr=o(" (ALBERT model)"),vkr=l(),kC=a("li"),b6e=a("strong"),Fkr=o("bert"),Tkr=o(" \u2014 "),BJ=a("a"),Mkr=o("FlaxBertForMultipleChoice"),Ekr=o(" (BERT model)"),Ckr=l(),SC=a("li"),v6e=a("strong"),wkr=o("big_bird"),Akr=o(" \u2014 "),PJ=a("a"),ykr=o("FlaxBigBirdForMultipleChoice"),Lkr=o(" (BigBird model)"),xkr=l(),RC=a("li"),F6e=a("strong"),$kr=o("distilbert"),kkr=o(" \u2014 "),IJ=a("a"),Skr=o("FlaxDistilBertForMultipleChoice"),Rkr=o(" (DistilBERT model)"),Bkr=l(),BC=a("li"),T6e=a("strong"),Pkr=o("electra"),Ikr=o(" \u2014 "),qJ=a("a"),qkr=o("FlaxElectraForMultipleChoice"),Nkr=o(" (ELECTRA model)"),jkr=l(),PC=a("li"),M6e=a("strong"),Dkr=o("roberta"),Gkr=o(" \u2014 "),NJ=a("a"),Okr=o("FlaxRobertaForMultipleChoice"),Vkr=o(" (RoBERTa model)"),Xkr=l(),IC=a("li"),E6e=a("strong"),zkr=o("roformer"),Qkr=o(" \u2014 "),jJ=a("a"),Wkr=o("FlaxRoFormerForMultipleChoice"),Hkr=o(" (RoFormer model)"),Ukr=l(),qC=a("li"),C6e=a("strong"),Jkr=o("xlm-roberta"),Ykr=o(" \u2014 "),DJ=a("a"),Kkr=o("FlaxXLMRobertaForMultipleChoice"),Zkr=o(" (XLM-RoBERTa model)"),eSr=l(),F(NC.$$.fragment),NPe=l(),Vc=a("h2"),jC=a("a"),w6e=a("span"),F(ex.$$.fragment),oSr=l(),A6e=a("span"),rSr=o("FlaxAutoModelForNextSentencePrediction"),jPe=l(),vr=a("div"),F(ox.$$.fragment),tSr=l(),Xc=a("p"),aSr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),GJ=a("a"),nSr=o("from_pretrained()"),sSr=o(" class method or the "),OJ=a("a"),lSr=o("from_config()"),iSr=o(` class
method.`),dSr=l(),rx=a("p"),cSr=o("This class cannot be instantiated directly using "),y6e=a("code"),fSr=o("__init__()"),mSr=o(" (throws an error)."),gSr=l(),zt=a("div"),F(tx.$$.fragment),hSr=l(),L6e=a("p"),pSr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),uSr=l(),zc=a("p"),_Sr=o(`Note:
Loading a model from its configuration file does `),x6e=a("strong"),bSr=o("not"),vSr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),VJ=a("a"),FSr=o("from_pretrained()"),TSr=o(" to load the model weights."),MSr=l(),F(DC.$$.fragment),ESr=l(),Qr=a("div"),F(ax.$$.fragment),CSr=l(),$6e=a("p"),wSr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),ASr=l(),bn=a("p"),ySr=o("The model class to instantiate is selected based on the "),k6e=a("code"),LSr=o("model_type"),xSr=o(` property of the config object (either
passed as an argument or loaded from `),S6e=a("code"),$Sr=o("pretrained_model_name_or_path"),kSr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),R6e=a("code"),SSr=o("pretrained_model_name_or_path"),RSr=o(":"),BSr=l(),B6e=a("ul"),GC=a("li"),P6e=a("strong"),PSr=o("bert"),ISr=o(" \u2014 "),XJ=a("a"),qSr=o("FlaxBertForNextSentencePrediction"),NSr=o(" (BERT model)"),jSr=l(),F(OC.$$.fragment),DPe=l(),Qc=a("h2"),VC=a("a"),I6e=a("span"),F(nx.$$.fragment),DSr=l(),q6e=a("span"),GSr=o("FlaxAutoModelForImageClassification"),GPe=l(),Fr=a("div"),F(sx.$$.fragment),OSr=l(),Wc=a("p"),VSr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),zJ=a("a"),XSr=o("from_pretrained()"),zSr=o(" class method or the "),QJ=a("a"),QSr=o("from_config()"),WSr=o(` class
method.`),HSr=l(),lx=a("p"),USr=o("This class cannot be instantiated directly using "),N6e=a("code"),JSr=o("__init__()"),YSr=o(" (throws an error)."),KSr=l(),Qt=a("div"),F(ix.$$.fragment),ZSr=l(),j6e=a("p"),eRr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),oRr=l(),Hc=a("p"),rRr=o(`Note:
Loading a model from its configuration file does `),D6e=a("strong"),tRr=o("not"),aRr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),WJ=a("a"),nRr=o("from_pretrained()"),sRr=o(" to load the model weights."),lRr=l(),F(XC.$$.fragment),iRr=l(),Wr=a("div"),F(dx.$$.fragment),dRr=l(),G6e=a("p"),cRr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),fRr=l(),vn=a("p"),mRr=o("The model class to instantiate is selected based on the "),O6e=a("code"),gRr=o("model_type"),hRr=o(` property of the config object (either
passed as an argument or loaded from `),V6e=a("code"),pRr=o("pretrained_model_name_or_path"),uRr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),X6e=a("code"),_Rr=o("pretrained_model_name_or_path"),bRr=o(":"),vRr=l(),cx=a("ul"),zC=a("li"),z6e=a("strong"),FRr=o("beit"),TRr=o(" \u2014 "),HJ=a("a"),MRr=o("FlaxBeitForImageClassification"),ERr=o(" (BEiT model)"),CRr=l(),QC=a("li"),Q6e=a("strong"),wRr=o("vit"),ARr=o(" \u2014 "),UJ=a("a"),yRr=o("FlaxViTForImageClassification"),LRr=o(" (ViT model)"),xRr=l(),F(WC.$$.fragment),OPe=l(),Uc=a("h2"),HC=a("a"),W6e=a("span"),F(fx.$$.fragment),$Rr=l(),H6e=a("span"),kRr=o("FlaxAutoModelForVision2Seq"),VPe=l(),Tr=a("div"),F(mx.$$.fragment),SRr=l(),Jc=a("p"),RRr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),JJ=a("a"),BRr=o("from_pretrained()"),PRr=o(" class method or the "),YJ=a("a"),IRr=o("from_config()"),qRr=o(` class
method.`),NRr=l(),gx=a("p"),jRr=o("This class cannot be instantiated directly using "),U6e=a("code"),DRr=o("__init__()"),GRr=o(" (throws an error)."),ORr=l(),Wt=a("div"),F(hx.$$.fragment),VRr=l(),J6e=a("p"),XRr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),zRr=l(),Yc=a("p"),QRr=o(`Note:
Loading a model from its configuration file does `),Y6e=a("strong"),WRr=o("not"),HRr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),KJ=a("a"),URr=o("from_pretrained()"),JRr=o(" to load the model weights."),YRr=l(),F(UC.$$.fragment),KRr=l(),Hr=a("div"),F(px.$$.fragment),ZRr=l(),K6e=a("p"),eBr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),oBr=l(),Fn=a("p"),rBr=o("The model class to instantiate is selected based on the "),Z6e=a("code"),tBr=o("model_type"),aBr=o(` property of the config object (either
passed as an argument or loaded from `),eTe=a("code"),nBr=o("pretrained_model_name_or_path"),sBr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),oTe=a("code"),lBr=o("pretrained_model_name_or_path"),iBr=o(":"),dBr=l(),rTe=a("ul"),JC=a("li"),tTe=a("strong"),cBr=o("vision-encoder-decoder"),fBr=o(" \u2014 "),ZJ=a("a"),mBr=o("FlaxVisionEncoderDecoderModel"),gBr=o(" (Vision Encoder decoder model)"),hBr=l(),F(YC.$$.fragment),this.h()},l(f){const _=J4t('[data-svelte="svelte-1phssyn"]',document.head);g=n(_,"META",{name:!0,content:!0}),_.forEach(t),v=i(f),p=n(f,"H1",{class:!0});var ux=s(p);m=n(ux,"A",{id:!0,class:!0,href:!0});var aTe=s(m);u=n(aTe,"SPAN",{});var nTe=s(u);T(d.$$.fragment,nTe),nTe.forEach(t),aTe.forEach(t),h=i(ux),Mo=n(ux,"SPAN",{});var sTe=s(Mo);oi=r(sTe,"Auto Classes"),sTe.forEach(t),ux.forEach(t),of=i(f),Kr=n(f,"P",{});var _x=s(Kr);ri=r(_x,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),ti=n(_x,"CODE",{});var lTe=s(ti);gA=r(lTe,"from_pretrained()"),lTe.forEach(t),rf=r(_x,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),_x.forEach(t),qe=i(f),Xe=n(f,"P",{});var Tn=s(Xe);ai=r(Tn,"Instantiating one of "),Mn=n(Tn,"A",{href:!0});var iTe=s(Mn);hA=r(iTe,"AutoConfig"),iTe.forEach(t),En=r(Tn,", "),Cn=n(Tn,"A",{href:!0});var dTe=s(Cn);pA=r(dTe,"AutoModel"),dTe.forEach(t),ni=r(Tn,`, and
`),wn=n(Tn,"A",{href:!0});var cTe=s(wn);uA=r(cTe,"AutoTokenizer"),cTe.forEach(t),si=r(Tn," will directly create a class of the relevant architecture. For instance"),Tn.forEach(t),tf=i(f),T(va.$$.fragment,f),ze=i(f),Ae=n(f,"P",{});var bx=s(Ae);L7=r(bx,"will create a model that is an instance of "),li=n(bx,"A",{href:!0});var fTe=s(li);x7=r(fTe,"BertModel"),fTe.forEach(t),$7=r(bx,"."),bx.forEach(t),Eo=i(f),Fa=n(f,"P",{});var vx=s(Fa);k7=r(vx,"There is one class of "),af=n(vx,"CODE",{});var mTe=s(af);S7=r(mTe,"AutoModel"),mTe.forEach(t),Uqe=r(vx," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),vx.forEach(t),VRe=i(f),ii=n(f,"H2",{class:!0});var Fx=s(ii);nf=n(Fx,"A",{id:!0,class:!0,href:!0});var gTe=s(nf);XK=n(gTe,"SPAN",{});var hTe=s(XK);T(_A.$$.fragment,hTe),hTe.forEach(t),gTe.forEach(t),Jqe=i(Fx),zK=n(Fx,"SPAN",{});var pTe=s(zK);Yqe=r(pTe,"Extending the Auto Classes"),pTe.forEach(t),Fx.forEach(t),XRe=i(f),An=n(f,"P",{});var Kc=s(An);Kqe=r(Kc,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),QK=n(Kc,"CODE",{});var uTe=s(QK);Zqe=r(uTe,"NewModel"),uTe.forEach(t),eNe=r(Kc,", make sure you have a "),WK=n(Kc,"CODE",{});var _Te=s(WK);oNe=r(_Te,"NewModelConfig"),_Te.forEach(t),rNe=r(Kc,` then you can add those to the auto
classes like this:`),Kc.forEach(t),zRe=i(f),T(bA.$$.fragment,f),QRe=i(f),R7=n(f,"P",{});var bTe=s(R7);tNe=r(bTe,"You will then be able to use the auto classes like you would usually do!"),bTe.forEach(t),WRe=i(f),T(sf.$$.fragment,f),HRe=i(f),di=n(f,"H2",{class:!0});var Tx=s(di);lf=n(Tx,"A",{id:!0,class:!0,href:!0});var vTe=s(lf);HK=n(vTe,"SPAN",{});var FTe=s(HK);T(vA.$$.fragment,FTe),FTe.forEach(t),vTe.forEach(t),aNe=i(Tx),UK=n(Tx,"SPAN",{});var TTe=s(UK);nNe=r(TTe,"AutoConfig"),TTe.forEach(t),Tx.forEach(t),URe=i(f),Co=n(f,"DIV",{class:!0});var Jr=s(Co);T(FA.$$.fragment,Jr),sNe=i(Jr),TA=n(Jr,"P",{});var Mx=s(TA);lNe=r(Mx,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),B7=n(Mx,"A",{href:!0});var MTe=s(B7);iNe=r(MTe,"from_pretrained()"),MTe.forEach(t),dNe=r(Mx," class method."),Mx.forEach(t),cNe=i(Jr),MA=n(Jr,"P",{});var Ex=s(MA);fNe=r(Ex,"This class cannot be instantiated directly using "),JK=n(Ex,"CODE",{});var ETe=s(JK);mNe=r(ETe,"__init__()"),ETe.forEach(t),gNe=r(Ex," (throws an error)."),Ex.forEach(t),hNe=i(Jr),Mr=n(Jr,"DIV",{class:!0});var Yr=s(Mr);T(EA.$$.fragment,Yr),pNe=i(Yr),YK=n(Yr,"P",{});var CTe=s(YK);uNe=r(CTe,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),CTe.forEach(t),_Ne=i(Yr),ci=n(Yr,"P",{});var Zc=s(ci);bNe=r(Zc,"The configuration class to instantiate is selected based on the "),KK=n(Zc,"CODE",{});var wTe=s(KK);vNe=r(wTe,"model_type"),wTe.forEach(t),FNe=r(Zc,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),ZK=n(Zc,"CODE",{});var ATe=s(ZK);TNe=r(ATe,"pretrained_model_name_or_path"),ATe.forEach(t),MNe=r(Zc,":"),Zc.forEach(t),ENe=i(Yr),y=n(Yr,"UL",{});var L=s(y);df=n(L,"LI",{});var KC=s(df);eZ=n(KC,"STRONG",{});var yTe=s(eZ);CNe=r(yTe,"albert"),yTe.forEach(t),wNe=r(KC," \u2014 "),P7=n(KC,"A",{href:!0});var LTe=s(P7);ANe=r(LTe,"AlbertConfig"),LTe.forEach(t),yNe=r(KC," (ALBERT model)"),KC.forEach(t),LNe=i(L),cf=n(L,"LI",{});var ZC=s(cf);oZ=n(ZC,"STRONG",{});var xTe=s(oZ);xNe=r(xTe,"bart"),xTe.forEach(t),$Ne=r(ZC," \u2014 "),I7=n(ZC,"A",{href:!0});var $Te=s(I7);kNe=r($Te,"BartConfig"),$Te.forEach(t),SNe=r(ZC," (BART model)"),ZC.forEach(t),RNe=i(L),ff=n(L,"LI",{});var e3=s(ff);rZ=n(e3,"STRONG",{});var kTe=s(rZ);BNe=r(kTe,"beit"),kTe.forEach(t),PNe=r(e3," \u2014 "),q7=n(e3,"A",{href:!0});var STe=s(q7);INe=r(STe,"BeitConfig"),STe.forEach(t),qNe=r(e3," (BEiT model)"),e3.forEach(t),NNe=i(L),mf=n(L,"LI",{});var o3=s(mf);tZ=n(o3,"STRONG",{});var RTe=s(tZ);jNe=r(RTe,"bert"),RTe.forEach(t),DNe=r(o3," \u2014 "),N7=n(o3,"A",{href:!0});var BTe=s(N7);GNe=r(BTe,"BertConfig"),BTe.forEach(t),ONe=r(o3," (BERT model)"),o3.forEach(t),VNe=i(L),gf=n(L,"LI",{});var r3=s(gf);aZ=n(r3,"STRONG",{});var PTe=s(aZ);XNe=r(PTe,"bert-generation"),PTe.forEach(t),zNe=r(r3," \u2014 "),j7=n(r3,"A",{href:!0});var ITe=s(j7);QNe=r(ITe,"BertGenerationConfig"),ITe.forEach(t),WNe=r(r3," (Bert Generation model)"),r3.forEach(t),HNe=i(L),hf=n(L,"LI",{});var t3=s(hf);nZ=n(t3,"STRONG",{});var qTe=s(nZ);UNe=r(qTe,"big_bird"),qTe.forEach(t),JNe=r(t3," \u2014 "),D7=n(t3,"A",{href:!0});var NTe=s(D7);YNe=r(NTe,"BigBirdConfig"),NTe.forEach(t),KNe=r(t3," (BigBird model)"),t3.forEach(t),ZNe=i(L),pf=n(L,"LI",{});var a3=s(pf);sZ=n(a3,"STRONG",{});var jTe=s(sZ);eje=r(jTe,"bigbird_pegasus"),jTe.forEach(t),oje=r(a3," \u2014 "),G7=n(a3,"A",{href:!0});var DTe=s(G7);rje=r(DTe,"BigBirdPegasusConfig"),DTe.forEach(t),tje=r(a3," (BigBirdPegasus model)"),a3.forEach(t),aje=i(L),uf=n(L,"LI",{});var n3=s(uf);lZ=n(n3,"STRONG",{});var GTe=s(lZ);nje=r(GTe,"blenderbot"),GTe.forEach(t),sje=r(n3," \u2014 "),O7=n(n3,"A",{href:!0});var OTe=s(O7);lje=r(OTe,"BlenderbotConfig"),OTe.forEach(t),ije=r(n3," (Blenderbot model)"),n3.forEach(t),dje=i(L),_f=n(L,"LI",{});var s3=s(_f);iZ=n(s3,"STRONG",{});var VTe=s(iZ);cje=r(VTe,"blenderbot-small"),VTe.forEach(t),fje=r(s3," \u2014 "),V7=n(s3,"A",{href:!0});var XTe=s(V7);mje=r(XTe,"BlenderbotSmallConfig"),XTe.forEach(t),gje=r(s3," (BlenderbotSmall model)"),s3.forEach(t),hje=i(L),bf=n(L,"LI",{});var l3=s(bf);dZ=n(l3,"STRONG",{});var zTe=s(dZ);pje=r(zTe,"camembert"),zTe.forEach(t),uje=r(l3," \u2014 "),X7=n(l3,"A",{href:!0});var QTe=s(X7);_je=r(QTe,"CamembertConfig"),QTe.forEach(t),bje=r(l3," (CamemBERT model)"),l3.forEach(t),vje=i(L),vf=n(L,"LI",{});var i3=s(vf);cZ=n(i3,"STRONG",{});var WTe=s(cZ);Fje=r(WTe,"canine"),WTe.forEach(t),Tje=r(i3," \u2014 "),z7=n(i3,"A",{href:!0});var HTe=s(z7);Mje=r(HTe,"CanineConfig"),HTe.forEach(t),Eje=r(i3," (Canine model)"),i3.forEach(t),Cje=i(L),Ff=n(L,"LI",{});var d3=s(Ff);fZ=n(d3,"STRONG",{});var UTe=s(fZ);wje=r(UTe,"clip"),UTe.forEach(t),Aje=r(d3," \u2014 "),Q7=n(d3,"A",{href:!0});var JTe=s(Q7);yje=r(JTe,"CLIPConfig"),JTe.forEach(t),Lje=r(d3," (CLIP model)"),d3.forEach(t),xje=i(L),Tf=n(L,"LI",{});var c3=s(Tf);mZ=n(c3,"STRONG",{});var YTe=s(mZ);$je=r(YTe,"convbert"),YTe.forEach(t),kje=r(c3," \u2014 "),W7=n(c3,"A",{href:!0});var KTe=s(W7);Sje=r(KTe,"ConvBertConfig"),KTe.forEach(t),Rje=r(c3," (ConvBERT model)"),c3.forEach(t),Bje=i(L),Mf=n(L,"LI",{});var f3=s(Mf);gZ=n(f3,"STRONG",{});var ZTe=s(gZ);Pje=r(ZTe,"convnext"),ZTe.forEach(t),Ije=r(f3," \u2014 "),H7=n(f3,"A",{href:!0});var eMe=s(H7);qje=r(eMe,"ConvNextConfig"),eMe.forEach(t),Nje=r(f3," (ConvNext model)"),f3.forEach(t),jje=i(L),Ef=n(L,"LI",{});var m3=s(Ef);hZ=n(m3,"STRONG",{});var oMe=s(hZ);Dje=r(oMe,"ctrl"),oMe.forEach(t),Gje=r(m3," \u2014 "),U7=n(m3,"A",{href:!0});var rMe=s(U7);Oje=r(rMe,"CTRLConfig"),rMe.forEach(t),Vje=r(m3," (CTRL model)"),m3.forEach(t),Xje=i(L),Cf=n(L,"LI",{});var g3=s(Cf);pZ=n(g3,"STRONG",{});var tMe=s(pZ);zje=r(tMe,"data2vec-audio"),tMe.forEach(t),Qje=r(g3," \u2014 "),J7=n(g3,"A",{href:!0});var aMe=s(J7);Wje=r(aMe,"Data2VecAudioConfig"),aMe.forEach(t),Hje=r(g3," (Data2VecAudio model)"),g3.forEach(t),Uje=i(L),wf=n(L,"LI",{});var h3=s(wf);uZ=n(h3,"STRONG",{});var nMe=s(uZ);Jje=r(nMe,"data2vec-text"),nMe.forEach(t),Yje=r(h3," \u2014 "),Y7=n(h3,"A",{href:!0});var sMe=s(Y7);Kje=r(sMe,"Data2VecTextConfig"),sMe.forEach(t),Zje=r(h3," (Data2VecText model)"),h3.forEach(t),eDe=i(L),Af=n(L,"LI",{});var p3=s(Af);_Z=n(p3,"STRONG",{});var lMe=s(_Z);oDe=r(lMe,"data2vec-vision"),lMe.forEach(t),rDe=r(p3," \u2014 "),K7=n(p3,"A",{href:!0});var iMe=s(K7);tDe=r(iMe,"Data2VecVisionConfig"),iMe.forEach(t),aDe=r(p3," (Data2VecVision model)"),p3.forEach(t),nDe=i(L),yf=n(L,"LI",{});var u3=s(yf);bZ=n(u3,"STRONG",{});var dMe=s(bZ);sDe=r(dMe,"deberta"),dMe.forEach(t),lDe=r(u3," \u2014 "),Z7=n(u3,"A",{href:!0});var cMe=s(Z7);iDe=r(cMe,"DebertaConfig"),cMe.forEach(t),dDe=r(u3," (DeBERTa model)"),u3.forEach(t),cDe=i(L),Lf=n(L,"LI",{});var _3=s(Lf);vZ=n(_3,"STRONG",{});var fMe=s(vZ);fDe=r(fMe,"deberta-v2"),fMe.forEach(t),mDe=r(_3," \u2014 "),e$=n(_3,"A",{href:!0});var mMe=s(e$);gDe=r(mMe,"DebertaV2Config"),mMe.forEach(t),hDe=r(_3," (DeBERTa-v2 model)"),_3.forEach(t),pDe=i(L),xf=n(L,"LI",{});var b3=s(xf);FZ=n(b3,"STRONG",{});var gMe=s(FZ);uDe=r(gMe,"decision_transformer"),gMe.forEach(t),_De=r(b3," \u2014 "),o$=n(b3,"A",{href:!0});var hMe=s(o$);bDe=r(hMe,"DecisionTransformerConfig"),hMe.forEach(t),vDe=r(b3," (Decision Transformer model)"),b3.forEach(t),FDe=i(L),$f=n(L,"LI",{});var v3=s($f);TZ=n(v3,"STRONG",{});var pMe=s(TZ);TDe=r(pMe,"deit"),pMe.forEach(t),MDe=r(v3," \u2014 "),r$=n(v3,"A",{href:!0});var uMe=s(r$);EDe=r(uMe,"DeiTConfig"),uMe.forEach(t),CDe=r(v3," (DeiT model)"),v3.forEach(t),wDe=i(L),kf=n(L,"LI",{});var _Me=s(kf);MZ=n(_Me,"STRONG",{});var uBr=s(MZ);ADe=r(uBr,"detr"),uBr.forEach(t),yDe=r(_Me," \u2014 "),t$=n(_Me,"A",{href:!0});var _Br=s(t$);LDe=r(_Br,"DetrConfig"),_Br.forEach(t),xDe=r(_Me," (DETR model)"),_Me.forEach(t),$De=i(L),Sf=n(L,"LI",{});var bMe=s(Sf);EZ=n(bMe,"STRONG",{});var bBr=s(EZ);kDe=r(bBr,"distilbert"),bBr.forEach(t),SDe=r(bMe," \u2014 "),a$=n(bMe,"A",{href:!0});var vBr=s(a$);RDe=r(vBr,"DistilBertConfig"),vBr.forEach(t),BDe=r(bMe," (DistilBERT model)"),bMe.forEach(t),PDe=i(L),Rf=n(L,"LI",{});var vMe=s(Rf);CZ=n(vMe,"STRONG",{});var FBr=s(CZ);IDe=r(FBr,"dpr"),FBr.forEach(t),qDe=r(vMe," \u2014 "),n$=n(vMe,"A",{href:!0});var TBr=s(n$);NDe=r(TBr,"DPRConfig"),TBr.forEach(t),jDe=r(vMe," (DPR model)"),vMe.forEach(t),DDe=i(L),Bf=n(L,"LI",{});var FMe=s(Bf);wZ=n(FMe,"STRONG",{});var MBr=s(wZ);GDe=r(MBr,"dpt"),MBr.forEach(t),ODe=r(FMe," \u2014 "),s$=n(FMe,"A",{href:!0});var EBr=s(s$);VDe=r(EBr,"DPTConfig"),EBr.forEach(t),XDe=r(FMe," (DPT model)"),FMe.forEach(t),zDe=i(L),Pf=n(L,"LI",{});var TMe=s(Pf);AZ=n(TMe,"STRONG",{});var CBr=s(AZ);QDe=r(CBr,"electra"),CBr.forEach(t),WDe=r(TMe," \u2014 "),l$=n(TMe,"A",{href:!0});var wBr=s(l$);HDe=r(wBr,"ElectraConfig"),wBr.forEach(t),UDe=r(TMe," (ELECTRA model)"),TMe.forEach(t),JDe=i(L),If=n(L,"LI",{});var MMe=s(If);yZ=n(MMe,"STRONG",{});var ABr=s(yZ);YDe=r(ABr,"encoder-decoder"),ABr.forEach(t),KDe=r(MMe," \u2014 "),i$=n(MMe,"A",{href:!0});var yBr=s(i$);ZDe=r(yBr,"EncoderDecoderConfig"),yBr.forEach(t),eGe=r(MMe," (Encoder decoder model)"),MMe.forEach(t),oGe=i(L),qf=n(L,"LI",{});var EMe=s(qf);LZ=n(EMe,"STRONG",{});var LBr=s(LZ);rGe=r(LBr,"flaubert"),LBr.forEach(t),tGe=r(EMe," \u2014 "),d$=n(EMe,"A",{href:!0});var xBr=s(d$);aGe=r(xBr,"FlaubertConfig"),xBr.forEach(t),nGe=r(EMe," (FlauBERT model)"),EMe.forEach(t),sGe=i(L),Nf=n(L,"LI",{});var CMe=s(Nf);xZ=n(CMe,"STRONG",{});var $Br=s(xZ);lGe=r($Br,"fnet"),$Br.forEach(t),iGe=r(CMe," \u2014 "),c$=n(CMe,"A",{href:!0});var kBr=s(c$);dGe=r(kBr,"FNetConfig"),kBr.forEach(t),cGe=r(CMe," (FNet model)"),CMe.forEach(t),fGe=i(L),jf=n(L,"LI",{});var wMe=s(jf);$Z=n(wMe,"STRONG",{});var SBr=s($Z);mGe=r(SBr,"fsmt"),SBr.forEach(t),gGe=r(wMe," \u2014 "),f$=n(wMe,"A",{href:!0});var RBr=s(f$);hGe=r(RBr,"FSMTConfig"),RBr.forEach(t),pGe=r(wMe," (FairSeq Machine-Translation model)"),wMe.forEach(t),uGe=i(L),Df=n(L,"LI",{});var AMe=s(Df);kZ=n(AMe,"STRONG",{});var BBr=s(kZ);_Ge=r(BBr,"funnel"),BBr.forEach(t),bGe=r(AMe," \u2014 "),m$=n(AMe,"A",{href:!0});var PBr=s(m$);vGe=r(PBr,"FunnelConfig"),PBr.forEach(t),FGe=r(AMe," (Funnel Transformer model)"),AMe.forEach(t),TGe=i(L),Gf=n(L,"LI",{});var yMe=s(Gf);SZ=n(yMe,"STRONG",{});var IBr=s(SZ);MGe=r(IBr,"glpn"),IBr.forEach(t),EGe=r(yMe," \u2014 "),g$=n(yMe,"A",{href:!0});var qBr=s(g$);CGe=r(qBr,"GLPNConfig"),qBr.forEach(t),wGe=r(yMe," (GLPN model)"),yMe.forEach(t),AGe=i(L),Of=n(L,"LI",{});var LMe=s(Of);RZ=n(LMe,"STRONG",{});var NBr=s(RZ);yGe=r(NBr,"gpt2"),NBr.forEach(t),LGe=r(LMe," \u2014 "),h$=n(LMe,"A",{href:!0});var jBr=s(h$);xGe=r(jBr,"GPT2Config"),jBr.forEach(t),$Ge=r(LMe," (OpenAI GPT-2 model)"),LMe.forEach(t),kGe=i(L),Vf=n(L,"LI",{});var xMe=s(Vf);BZ=n(xMe,"STRONG",{});var DBr=s(BZ);SGe=r(DBr,"gpt_neo"),DBr.forEach(t),RGe=r(xMe," \u2014 "),p$=n(xMe,"A",{href:!0});var GBr=s(p$);BGe=r(GBr,"GPTNeoConfig"),GBr.forEach(t),PGe=r(xMe," (GPT Neo model)"),xMe.forEach(t),IGe=i(L),Xf=n(L,"LI",{});var $Me=s(Xf);PZ=n($Me,"STRONG",{});var OBr=s(PZ);qGe=r(OBr,"gptj"),OBr.forEach(t),NGe=r($Me," \u2014 "),u$=n($Me,"A",{href:!0});var VBr=s(u$);jGe=r(VBr,"GPTJConfig"),VBr.forEach(t),DGe=r($Me," (GPT-J model)"),$Me.forEach(t),GGe=i(L),zf=n(L,"LI",{});var kMe=s(zf);IZ=n(kMe,"STRONG",{});var XBr=s(IZ);OGe=r(XBr,"hubert"),XBr.forEach(t),VGe=r(kMe," \u2014 "),_$=n(kMe,"A",{href:!0});var zBr=s(_$);XGe=r(zBr,"HubertConfig"),zBr.forEach(t),zGe=r(kMe," (Hubert model)"),kMe.forEach(t),QGe=i(L),Qf=n(L,"LI",{});var SMe=s(Qf);qZ=n(SMe,"STRONG",{});var QBr=s(qZ);WGe=r(QBr,"ibert"),QBr.forEach(t),HGe=r(SMe," \u2014 "),b$=n(SMe,"A",{href:!0});var WBr=s(b$);UGe=r(WBr,"IBertConfig"),WBr.forEach(t),JGe=r(SMe," (I-BERT model)"),SMe.forEach(t),YGe=i(L),Wf=n(L,"LI",{});var RMe=s(Wf);NZ=n(RMe,"STRONG",{});var HBr=s(NZ);KGe=r(HBr,"imagegpt"),HBr.forEach(t),ZGe=r(RMe," \u2014 "),v$=n(RMe,"A",{href:!0});var UBr=s(v$);eOe=r(UBr,"ImageGPTConfig"),UBr.forEach(t),oOe=r(RMe," (ImageGPT model)"),RMe.forEach(t),rOe=i(L),Hf=n(L,"LI",{});var BMe=s(Hf);jZ=n(BMe,"STRONG",{});var JBr=s(jZ);tOe=r(JBr,"layoutlm"),JBr.forEach(t),aOe=r(BMe," \u2014 "),F$=n(BMe,"A",{href:!0});var YBr=s(F$);nOe=r(YBr,"LayoutLMConfig"),YBr.forEach(t),sOe=r(BMe," (LayoutLM model)"),BMe.forEach(t),lOe=i(L),Uf=n(L,"LI",{});var PMe=s(Uf);DZ=n(PMe,"STRONG",{});var KBr=s(DZ);iOe=r(KBr,"layoutlmv2"),KBr.forEach(t),dOe=r(PMe," \u2014 "),T$=n(PMe,"A",{href:!0});var ZBr=s(T$);cOe=r(ZBr,"LayoutLMv2Config"),ZBr.forEach(t),fOe=r(PMe," (LayoutLMv2 model)"),PMe.forEach(t),mOe=i(L),Jf=n(L,"LI",{});var IMe=s(Jf);GZ=n(IMe,"STRONG",{});var ePr=s(GZ);gOe=r(ePr,"led"),ePr.forEach(t),hOe=r(IMe," \u2014 "),M$=n(IMe,"A",{href:!0});var oPr=s(M$);pOe=r(oPr,"LEDConfig"),oPr.forEach(t),uOe=r(IMe," (LED model)"),IMe.forEach(t),_Oe=i(L),Yf=n(L,"LI",{});var qMe=s(Yf);OZ=n(qMe,"STRONG",{});var rPr=s(OZ);bOe=r(rPr,"longformer"),rPr.forEach(t),vOe=r(qMe," \u2014 "),E$=n(qMe,"A",{href:!0});var tPr=s(E$);FOe=r(tPr,"LongformerConfig"),tPr.forEach(t),TOe=r(qMe," (Longformer model)"),qMe.forEach(t),MOe=i(L),Kf=n(L,"LI",{});var NMe=s(Kf);VZ=n(NMe,"STRONG",{});var aPr=s(VZ);EOe=r(aPr,"luke"),aPr.forEach(t),COe=r(NMe," \u2014 "),C$=n(NMe,"A",{href:!0});var nPr=s(C$);wOe=r(nPr,"LukeConfig"),nPr.forEach(t),AOe=r(NMe," (LUKE model)"),NMe.forEach(t),yOe=i(L),Zf=n(L,"LI",{});var jMe=s(Zf);XZ=n(jMe,"STRONG",{});var sPr=s(XZ);LOe=r(sPr,"lxmert"),sPr.forEach(t),xOe=r(jMe," \u2014 "),w$=n(jMe,"A",{href:!0});var lPr=s(w$);$Oe=r(lPr,"LxmertConfig"),lPr.forEach(t),kOe=r(jMe," (LXMERT model)"),jMe.forEach(t),SOe=i(L),em=n(L,"LI",{});var DMe=s(em);zZ=n(DMe,"STRONG",{});var iPr=s(zZ);ROe=r(iPr,"m2m_100"),iPr.forEach(t),BOe=r(DMe," \u2014 "),A$=n(DMe,"A",{href:!0});var dPr=s(A$);POe=r(dPr,"M2M100Config"),dPr.forEach(t),IOe=r(DMe," (M2M100 model)"),DMe.forEach(t),qOe=i(L),om=n(L,"LI",{});var GMe=s(om);QZ=n(GMe,"STRONG",{});var cPr=s(QZ);NOe=r(cPr,"marian"),cPr.forEach(t),jOe=r(GMe," \u2014 "),y$=n(GMe,"A",{href:!0});var fPr=s(y$);DOe=r(fPr,"MarianConfig"),fPr.forEach(t),GOe=r(GMe," (Marian model)"),GMe.forEach(t),OOe=i(L),rm=n(L,"LI",{});var OMe=s(rm);WZ=n(OMe,"STRONG",{});var mPr=s(WZ);VOe=r(mPr,"maskformer"),mPr.forEach(t),XOe=r(OMe," \u2014 "),L$=n(OMe,"A",{href:!0});var gPr=s(L$);zOe=r(gPr,"MaskFormerConfig"),gPr.forEach(t),QOe=r(OMe," (MaskFormer model)"),OMe.forEach(t),WOe=i(L),tm=n(L,"LI",{});var VMe=s(tm);HZ=n(VMe,"STRONG",{});var hPr=s(HZ);HOe=r(hPr,"mbart"),hPr.forEach(t),UOe=r(VMe," \u2014 "),x$=n(VMe,"A",{href:!0});var pPr=s(x$);JOe=r(pPr,"MBartConfig"),pPr.forEach(t),YOe=r(VMe," (mBART model)"),VMe.forEach(t),KOe=i(L),am=n(L,"LI",{});var XMe=s(am);UZ=n(XMe,"STRONG",{});var uPr=s(UZ);ZOe=r(uPr,"megatron-bert"),uPr.forEach(t),eVe=r(XMe," \u2014 "),$$=n(XMe,"A",{href:!0});var _Pr=s($$);oVe=r(_Pr,"MegatronBertConfig"),_Pr.forEach(t),rVe=r(XMe," (MegatronBert model)"),XMe.forEach(t),tVe=i(L),nm=n(L,"LI",{});var zMe=s(nm);JZ=n(zMe,"STRONG",{});var bPr=s(JZ);aVe=r(bPr,"mobilebert"),bPr.forEach(t),nVe=r(zMe," \u2014 "),k$=n(zMe,"A",{href:!0});var vPr=s(k$);sVe=r(vPr,"MobileBertConfig"),vPr.forEach(t),lVe=r(zMe," (MobileBERT model)"),zMe.forEach(t),iVe=i(L),sm=n(L,"LI",{});var QMe=s(sm);YZ=n(QMe,"STRONG",{});var FPr=s(YZ);dVe=r(FPr,"mpnet"),FPr.forEach(t),cVe=r(QMe," \u2014 "),S$=n(QMe,"A",{href:!0});var TPr=s(S$);fVe=r(TPr,"MPNetConfig"),TPr.forEach(t),mVe=r(QMe," (MPNet model)"),QMe.forEach(t),gVe=i(L),lm=n(L,"LI",{});var WMe=s(lm);KZ=n(WMe,"STRONG",{});var MPr=s(KZ);hVe=r(MPr,"mt5"),MPr.forEach(t),pVe=r(WMe," \u2014 "),R$=n(WMe,"A",{href:!0});var EPr=s(R$);uVe=r(EPr,"MT5Config"),EPr.forEach(t),_Ve=r(WMe," (mT5 model)"),WMe.forEach(t),bVe=i(L),im=n(L,"LI",{});var HMe=s(im);ZZ=n(HMe,"STRONG",{});var CPr=s(ZZ);vVe=r(CPr,"nystromformer"),CPr.forEach(t),FVe=r(HMe," \u2014 "),B$=n(HMe,"A",{href:!0});var wPr=s(B$);TVe=r(wPr,"NystromformerConfig"),wPr.forEach(t),MVe=r(HMe," (Nystromformer model)"),HMe.forEach(t),EVe=i(L),dm=n(L,"LI",{});var UMe=s(dm);eee=n(UMe,"STRONG",{});var APr=s(eee);CVe=r(APr,"openai-gpt"),APr.forEach(t),wVe=r(UMe," \u2014 "),P$=n(UMe,"A",{href:!0});var yPr=s(P$);AVe=r(yPr,"OpenAIGPTConfig"),yPr.forEach(t),yVe=r(UMe," (OpenAI GPT model)"),UMe.forEach(t),LVe=i(L),cm=n(L,"LI",{});var JMe=s(cm);oee=n(JMe,"STRONG",{});var LPr=s(oee);xVe=r(LPr,"pegasus"),LPr.forEach(t),$Ve=r(JMe," \u2014 "),I$=n(JMe,"A",{href:!0});var xPr=s(I$);kVe=r(xPr,"PegasusConfig"),xPr.forEach(t),SVe=r(JMe," (Pegasus model)"),JMe.forEach(t),RVe=i(L),fm=n(L,"LI",{});var YMe=s(fm);ree=n(YMe,"STRONG",{});var $Pr=s(ree);BVe=r($Pr,"perceiver"),$Pr.forEach(t),PVe=r(YMe," \u2014 "),q$=n(YMe,"A",{href:!0});var kPr=s(q$);IVe=r(kPr,"PerceiverConfig"),kPr.forEach(t),qVe=r(YMe," (Perceiver model)"),YMe.forEach(t),NVe=i(L),mm=n(L,"LI",{});var KMe=s(mm);tee=n(KMe,"STRONG",{});var SPr=s(tee);jVe=r(SPr,"plbart"),SPr.forEach(t),DVe=r(KMe," \u2014 "),N$=n(KMe,"A",{href:!0});var RPr=s(N$);GVe=r(RPr,"PLBartConfig"),RPr.forEach(t),OVe=r(KMe," (PLBart model)"),KMe.forEach(t),VVe=i(L),gm=n(L,"LI",{});var ZMe=s(gm);aee=n(ZMe,"STRONG",{});var BPr=s(aee);XVe=r(BPr,"poolformer"),BPr.forEach(t),zVe=r(ZMe," \u2014 "),j$=n(ZMe,"A",{href:!0});var PPr=s(j$);QVe=r(PPr,"PoolFormerConfig"),PPr.forEach(t),WVe=r(ZMe," (PoolFormer model)"),ZMe.forEach(t),HVe=i(L),hm=n(L,"LI",{});var e4e=s(hm);nee=n(e4e,"STRONG",{});var IPr=s(nee);UVe=r(IPr,"prophetnet"),IPr.forEach(t),JVe=r(e4e," \u2014 "),D$=n(e4e,"A",{href:!0});var qPr=s(D$);YVe=r(qPr,"ProphetNetConfig"),qPr.forEach(t),KVe=r(e4e," (ProphetNet model)"),e4e.forEach(t),ZVe=i(L),pm=n(L,"LI",{});var o4e=s(pm);see=n(o4e,"STRONG",{});var NPr=s(see);eXe=r(NPr,"qdqbert"),NPr.forEach(t),oXe=r(o4e," \u2014 "),G$=n(o4e,"A",{href:!0});var jPr=s(G$);rXe=r(jPr,"QDQBertConfig"),jPr.forEach(t),tXe=r(o4e," (QDQBert model)"),o4e.forEach(t),aXe=i(L),um=n(L,"LI",{});var r4e=s(um);lee=n(r4e,"STRONG",{});var DPr=s(lee);nXe=r(DPr,"rag"),DPr.forEach(t),sXe=r(r4e," \u2014 "),O$=n(r4e,"A",{href:!0});var GPr=s(O$);lXe=r(GPr,"RagConfig"),GPr.forEach(t),iXe=r(r4e," (RAG model)"),r4e.forEach(t),dXe=i(L),_m=n(L,"LI",{});var t4e=s(_m);iee=n(t4e,"STRONG",{});var OPr=s(iee);cXe=r(OPr,"realm"),OPr.forEach(t),fXe=r(t4e," \u2014 "),V$=n(t4e,"A",{href:!0});var VPr=s(V$);mXe=r(VPr,"RealmConfig"),VPr.forEach(t),gXe=r(t4e," (Realm model)"),t4e.forEach(t),hXe=i(L),bm=n(L,"LI",{});var a4e=s(bm);dee=n(a4e,"STRONG",{});var XPr=s(dee);pXe=r(XPr,"reformer"),XPr.forEach(t),uXe=r(a4e," \u2014 "),X$=n(a4e,"A",{href:!0});var zPr=s(X$);_Xe=r(zPr,"ReformerConfig"),zPr.forEach(t),bXe=r(a4e," (Reformer model)"),a4e.forEach(t),vXe=i(L),vm=n(L,"LI",{});var n4e=s(vm);cee=n(n4e,"STRONG",{});var QPr=s(cee);FXe=r(QPr,"regnet"),QPr.forEach(t),TXe=r(n4e," \u2014 "),z$=n(n4e,"A",{href:!0});var WPr=s(z$);MXe=r(WPr,"RegNetConfig"),WPr.forEach(t),EXe=r(n4e," (RegNet model)"),n4e.forEach(t),CXe=i(L),Fm=n(L,"LI",{});var s4e=s(Fm);fee=n(s4e,"STRONG",{});var HPr=s(fee);wXe=r(HPr,"rembert"),HPr.forEach(t),AXe=r(s4e," \u2014 "),Q$=n(s4e,"A",{href:!0});var UPr=s(Q$);yXe=r(UPr,"RemBertConfig"),UPr.forEach(t),LXe=r(s4e," (RemBERT model)"),s4e.forEach(t),xXe=i(L),Tm=n(L,"LI",{});var l4e=s(Tm);mee=n(l4e,"STRONG",{});var JPr=s(mee);$Xe=r(JPr,"resnet"),JPr.forEach(t),kXe=r(l4e," \u2014 "),W$=n(l4e,"A",{href:!0});var YPr=s(W$);SXe=r(YPr,"ResNetConfig"),YPr.forEach(t),RXe=r(l4e," (ResNet model)"),l4e.forEach(t),BXe=i(L),Mm=n(L,"LI",{});var i4e=s(Mm);gee=n(i4e,"STRONG",{});var KPr=s(gee);PXe=r(KPr,"retribert"),KPr.forEach(t),IXe=r(i4e," \u2014 "),H$=n(i4e,"A",{href:!0});var ZPr=s(H$);qXe=r(ZPr,"RetriBertConfig"),ZPr.forEach(t),NXe=r(i4e," (RetriBERT model)"),i4e.forEach(t),jXe=i(L),Em=n(L,"LI",{});var d4e=s(Em);hee=n(d4e,"STRONG",{});var eIr=s(hee);DXe=r(eIr,"roberta"),eIr.forEach(t),GXe=r(d4e," \u2014 "),U$=n(d4e,"A",{href:!0});var oIr=s(U$);OXe=r(oIr,"RobertaConfig"),oIr.forEach(t),VXe=r(d4e," (RoBERTa model)"),d4e.forEach(t),XXe=i(L),Cm=n(L,"LI",{});var c4e=s(Cm);pee=n(c4e,"STRONG",{});var rIr=s(pee);zXe=r(rIr,"roformer"),rIr.forEach(t),QXe=r(c4e," \u2014 "),J$=n(c4e,"A",{href:!0});var tIr=s(J$);WXe=r(tIr,"RoFormerConfig"),tIr.forEach(t),HXe=r(c4e," (RoFormer model)"),c4e.forEach(t),UXe=i(L),wm=n(L,"LI",{});var f4e=s(wm);uee=n(f4e,"STRONG",{});var aIr=s(uee);JXe=r(aIr,"segformer"),aIr.forEach(t),YXe=r(f4e," \u2014 "),Y$=n(f4e,"A",{href:!0});var nIr=s(Y$);KXe=r(nIr,"SegformerConfig"),nIr.forEach(t),ZXe=r(f4e," (SegFormer model)"),f4e.forEach(t),eze=i(L),Am=n(L,"LI",{});var m4e=s(Am);_ee=n(m4e,"STRONG",{});var sIr=s(_ee);oze=r(sIr,"sew"),sIr.forEach(t),rze=r(m4e," \u2014 "),K$=n(m4e,"A",{href:!0});var lIr=s(K$);tze=r(lIr,"SEWConfig"),lIr.forEach(t),aze=r(m4e," (SEW model)"),m4e.forEach(t),nze=i(L),ym=n(L,"LI",{});var g4e=s(ym);bee=n(g4e,"STRONG",{});var iIr=s(bee);sze=r(iIr,"sew-d"),iIr.forEach(t),lze=r(g4e," \u2014 "),Z$=n(g4e,"A",{href:!0});var dIr=s(Z$);ize=r(dIr,"SEWDConfig"),dIr.forEach(t),dze=r(g4e," (SEW-D model)"),g4e.forEach(t),cze=i(L),Lm=n(L,"LI",{});var h4e=s(Lm);vee=n(h4e,"STRONG",{});var cIr=s(vee);fze=r(cIr,"speech-encoder-decoder"),cIr.forEach(t),mze=r(h4e," \u2014 "),ek=n(h4e,"A",{href:!0});var fIr=s(ek);gze=r(fIr,"SpeechEncoderDecoderConfig"),fIr.forEach(t),hze=r(h4e," (Speech Encoder decoder model)"),h4e.forEach(t),pze=i(L),xm=n(L,"LI",{});var p4e=s(xm);Fee=n(p4e,"STRONG",{});var mIr=s(Fee);uze=r(mIr,"speech_to_text"),mIr.forEach(t),_ze=r(p4e," \u2014 "),ok=n(p4e,"A",{href:!0});var gIr=s(ok);bze=r(gIr,"Speech2TextConfig"),gIr.forEach(t),vze=r(p4e," (Speech2Text model)"),p4e.forEach(t),Fze=i(L),$m=n(L,"LI",{});var u4e=s($m);Tee=n(u4e,"STRONG",{});var hIr=s(Tee);Tze=r(hIr,"speech_to_text_2"),hIr.forEach(t),Mze=r(u4e," \u2014 "),rk=n(u4e,"A",{href:!0});var pIr=s(rk);Eze=r(pIr,"Speech2Text2Config"),pIr.forEach(t),Cze=r(u4e," (Speech2Text2 model)"),u4e.forEach(t),wze=i(L),km=n(L,"LI",{});var _4e=s(km);Mee=n(_4e,"STRONG",{});var uIr=s(Mee);Aze=r(uIr,"splinter"),uIr.forEach(t),yze=r(_4e," \u2014 "),tk=n(_4e,"A",{href:!0});var _Ir=s(tk);Lze=r(_Ir,"SplinterConfig"),_Ir.forEach(t),xze=r(_4e," (Splinter model)"),_4e.forEach(t),$ze=i(L),Sm=n(L,"LI",{});var b4e=s(Sm);Eee=n(b4e,"STRONG",{});var bIr=s(Eee);kze=r(bIr,"squeezebert"),bIr.forEach(t),Sze=r(b4e," \u2014 "),ak=n(b4e,"A",{href:!0});var vIr=s(ak);Rze=r(vIr,"SqueezeBertConfig"),vIr.forEach(t),Bze=r(b4e," (SqueezeBERT model)"),b4e.forEach(t),Pze=i(L),Rm=n(L,"LI",{});var v4e=s(Rm);Cee=n(v4e,"STRONG",{});var FIr=s(Cee);Ize=r(FIr,"swin"),FIr.forEach(t),qze=r(v4e," \u2014 "),nk=n(v4e,"A",{href:!0});var TIr=s(nk);Nze=r(TIr,"SwinConfig"),TIr.forEach(t),jze=r(v4e," (Swin model)"),v4e.forEach(t),Dze=i(L),Bm=n(L,"LI",{});var F4e=s(Bm);wee=n(F4e,"STRONG",{});var MIr=s(wee);Gze=r(MIr,"t5"),MIr.forEach(t),Oze=r(F4e," \u2014 "),sk=n(F4e,"A",{href:!0});var EIr=s(sk);Vze=r(EIr,"T5Config"),EIr.forEach(t),Xze=r(F4e," (T5 model)"),F4e.forEach(t),zze=i(L),Pm=n(L,"LI",{});var T4e=s(Pm);Aee=n(T4e,"STRONG",{});var CIr=s(Aee);Qze=r(CIr,"tapas"),CIr.forEach(t),Wze=r(T4e," \u2014 "),lk=n(T4e,"A",{href:!0});var wIr=s(lk);Hze=r(wIr,"TapasConfig"),wIr.forEach(t),Uze=r(T4e," (TAPAS model)"),T4e.forEach(t),Jze=i(L),Im=n(L,"LI",{});var M4e=s(Im);yee=n(M4e,"STRONG",{});var AIr=s(yee);Yze=r(AIr,"tapex"),AIr.forEach(t),Kze=r(M4e," \u2014 "),ik=n(M4e,"A",{href:!0});var yIr=s(ik);Zze=r(yIr,"BartConfig"),yIr.forEach(t),eQe=r(M4e," (TAPEX model)"),M4e.forEach(t),oQe=i(L),qm=n(L,"LI",{});var E4e=s(qm);Lee=n(E4e,"STRONG",{});var LIr=s(Lee);rQe=r(LIr,"transfo-xl"),LIr.forEach(t),tQe=r(E4e," \u2014 "),dk=n(E4e,"A",{href:!0});var xIr=s(dk);aQe=r(xIr,"TransfoXLConfig"),xIr.forEach(t),nQe=r(E4e," (Transformer-XL model)"),E4e.forEach(t),sQe=i(L),Nm=n(L,"LI",{});var C4e=s(Nm);xee=n(C4e,"STRONG",{});var $Ir=s(xee);lQe=r($Ir,"trocr"),$Ir.forEach(t),iQe=r(C4e," \u2014 "),ck=n(C4e,"A",{href:!0});var kIr=s(ck);dQe=r(kIr,"TrOCRConfig"),kIr.forEach(t),cQe=r(C4e," (TrOCR model)"),C4e.forEach(t),fQe=i(L),jm=n(L,"LI",{});var w4e=s(jm);$ee=n(w4e,"STRONG",{});var SIr=s($ee);mQe=r(SIr,"unispeech"),SIr.forEach(t),gQe=r(w4e," \u2014 "),fk=n(w4e,"A",{href:!0});var RIr=s(fk);hQe=r(RIr,"UniSpeechConfig"),RIr.forEach(t),pQe=r(w4e," (UniSpeech model)"),w4e.forEach(t),uQe=i(L),Dm=n(L,"LI",{});var A4e=s(Dm);kee=n(A4e,"STRONG",{});var BIr=s(kee);_Qe=r(BIr,"unispeech-sat"),BIr.forEach(t),bQe=r(A4e," \u2014 "),mk=n(A4e,"A",{href:!0});var PIr=s(mk);vQe=r(PIr,"UniSpeechSatConfig"),PIr.forEach(t),FQe=r(A4e," (UniSpeechSat model)"),A4e.forEach(t),TQe=i(L),Gm=n(L,"LI",{});var y4e=s(Gm);See=n(y4e,"STRONG",{});var IIr=s(See);MQe=r(IIr,"van"),IIr.forEach(t),EQe=r(y4e," \u2014 "),gk=n(y4e,"A",{href:!0});var qIr=s(gk);CQe=r(qIr,"VanConfig"),qIr.forEach(t),wQe=r(y4e," (VAN model)"),y4e.forEach(t),AQe=i(L),Om=n(L,"LI",{});var L4e=s(Om);Ree=n(L4e,"STRONG",{});var NIr=s(Ree);yQe=r(NIr,"vilt"),NIr.forEach(t),LQe=r(L4e," \u2014 "),hk=n(L4e,"A",{href:!0});var jIr=s(hk);xQe=r(jIr,"ViltConfig"),jIr.forEach(t),$Qe=r(L4e," (ViLT model)"),L4e.forEach(t),kQe=i(L),Vm=n(L,"LI",{});var x4e=s(Vm);Bee=n(x4e,"STRONG",{});var DIr=s(Bee);SQe=r(DIr,"vision-encoder-decoder"),DIr.forEach(t),RQe=r(x4e," \u2014 "),pk=n(x4e,"A",{href:!0});var GIr=s(pk);BQe=r(GIr,"VisionEncoderDecoderConfig"),GIr.forEach(t),PQe=r(x4e," (Vision Encoder decoder model)"),x4e.forEach(t),IQe=i(L),Xm=n(L,"LI",{});var $4e=s(Xm);Pee=n($4e,"STRONG",{});var OIr=s(Pee);qQe=r(OIr,"vision-text-dual-encoder"),OIr.forEach(t),NQe=r($4e," \u2014 "),uk=n($4e,"A",{href:!0});var VIr=s(uk);jQe=r(VIr,"VisionTextDualEncoderConfig"),VIr.forEach(t),DQe=r($4e," (VisionTextDualEncoder model)"),$4e.forEach(t),GQe=i(L),zm=n(L,"LI",{});var k4e=s(zm);Iee=n(k4e,"STRONG",{});var XIr=s(Iee);OQe=r(XIr,"visual_bert"),XIr.forEach(t),VQe=r(k4e," \u2014 "),_k=n(k4e,"A",{href:!0});var zIr=s(_k);XQe=r(zIr,"VisualBertConfig"),zIr.forEach(t),zQe=r(k4e," (VisualBert model)"),k4e.forEach(t),QQe=i(L),Qm=n(L,"LI",{});var S4e=s(Qm);qee=n(S4e,"STRONG",{});var QIr=s(qee);WQe=r(QIr,"vit"),QIr.forEach(t),HQe=r(S4e," \u2014 "),bk=n(S4e,"A",{href:!0});var WIr=s(bk);UQe=r(WIr,"ViTConfig"),WIr.forEach(t),JQe=r(S4e," (ViT model)"),S4e.forEach(t),YQe=i(L),Wm=n(L,"LI",{});var R4e=s(Wm);Nee=n(R4e,"STRONG",{});var HIr=s(Nee);KQe=r(HIr,"vit_mae"),HIr.forEach(t),ZQe=r(R4e," \u2014 "),vk=n(R4e,"A",{href:!0});var UIr=s(vk);eWe=r(UIr,"ViTMAEConfig"),UIr.forEach(t),oWe=r(R4e," (ViTMAE model)"),R4e.forEach(t),rWe=i(L),Hm=n(L,"LI",{});var B4e=s(Hm);jee=n(B4e,"STRONG",{});var JIr=s(jee);tWe=r(JIr,"wav2vec2"),JIr.forEach(t),aWe=r(B4e," \u2014 "),Fk=n(B4e,"A",{href:!0});var YIr=s(Fk);nWe=r(YIr,"Wav2Vec2Config"),YIr.forEach(t),sWe=r(B4e," (Wav2Vec2 model)"),B4e.forEach(t),lWe=i(L),Um=n(L,"LI",{});var P4e=s(Um);Dee=n(P4e,"STRONG",{});var KIr=s(Dee);iWe=r(KIr,"wavlm"),KIr.forEach(t),dWe=r(P4e," \u2014 "),Tk=n(P4e,"A",{href:!0});var ZIr=s(Tk);cWe=r(ZIr,"WavLMConfig"),ZIr.forEach(t),fWe=r(P4e," (WavLM model)"),P4e.forEach(t),mWe=i(L),Jm=n(L,"LI",{});var I4e=s(Jm);Gee=n(I4e,"STRONG",{});var eqr=s(Gee);gWe=r(eqr,"xglm"),eqr.forEach(t),hWe=r(I4e," \u2014 "),Mk=n(I4e,"A",{href:!0});var oqr=s(Mk);pWe=r(oqr,"XGLMConfig"),oqr.forEach(t),uWe=r(I4e," (XGLM model)"),I4e.forEach(t),_We=i(L),Ym=n(L,"LI",{});var q4e=s(Ym);Oee=n(q4e,"STRONG",{});var rqr=s(Oee);bWe=r(rqr,"xlm"),rqr.forEach(t),vWe=r(q4e," \u2014 "),Ek=n(q4e,"A",{href:!0});var tqr=s(Ek);FWe=r(tqr,"XLMConfig"),tqr.forEach(t),TWe=r(q4e," (XLM model)"),q4e.forEach(t),MWe=i(L),Km=n(L,"LI",{});var N4e=s(Km);Vee=n(N4e,"STRONG",{});var aqr=s(Vee);EWe=r(aqr,"xlm-prophetnet"),aqr.forEach(t),CWe=r(N4e," \u2014 "),Ck=n(N4e,"A",{href:!0});var nqr=s(Ck);wWe=r(nqr,"XLMProphetNetConfig"),nqr.forEach(t),AWe=r(N4e," (XLMProphetNet model)"),N4e.forEach(t),yWe=i(L),Zm=n(L,"LI",{});var j4e=s(Zm);Xee=n(j4e,"STRONG",{});var sqr=s(Xee);LWe=r(sqr,"xlm-roberta"),sqr.forEach(t),xWe=r(j4e," \u2014 "),wk=n(j4e,"A",{href:!0});var lqr=s(wk);$We=r(lqr,"XLMRobertaConfig"),lqr.forEach(t),kWe=r(j4e," (XLM-RoBERTa model)"),j4e.forEach(t),SWe=i(L),eg=n(L,"LI",{});var D4e=s(eg);zee=n(D4e,"STRONG",{});var iqr=s(zee);RWe=r(iqr,"xlm-roberta-xl"),iqr.forEach(t),BWe=r(D4e," \u2014 "),Ak=n(D4e,"A",{href:!0});var dqr=s(Ak);PWe=r(dqr,"XLMRobertaXLConfig"),dqr.forEach(t),IWe=r(D4e," (XLM-RoBERTa-XL model)"),D4e.forEach(t),qWe=i(L),og=n(L,"LI",{});var G4e=s(og);Qee=n(G4e,"STRONG",{});var cqr=s(Qee);NWe=r(cqr,"xlnet"),cqr.forEach(t),jWe=r(G4e," \u2014 "),yk=n(G4e,"A",{href:!0});var fqr=s(yk);DWe=r(fqr,"XLNetConfig"),fqr.forEach(t),GWe=r(G4e," (XLNet model)"),G4e.forEach(t),OWe=i(L),rg=n(L,"LI",{});var O4e=s(rg);Wee=n(O4e,"STRONG",{});var mqr=s(Wee);VWe=r(mqr,"yoso"),mqr.forEach(t),XWe=r(O4e," \u2014 "),Lk=n(O4e,"A",{href:!0});var gqr=s(Lk);zWe=r(gqr,"YosoConfig"),gqr.forEach(t),QWe=r(O4e," (YOSO model)"),O4e.forEach(t),L.forEach(t),WWe=i(Yr),T(tg.$$.fragment,Yr),Yr.forEach(t),HWe=i(Jr),ag=n(Jr,"DIV",{class:!0});var zPe=s(ag);T(CA.$$.fragment,zPe),UWe=i(zPe),Hee=n(zPe,"P",{});var hqr=s(Hee);JWe=r(hqr,"Register a new configuration for this class."),hqr.forEach(t),zPe.forEach(t),Jr.forEach(t),JRe=i(f),fi=n(f,"H2",{class:!0});var QPe=s(fi);ng=n(QPe,"A",{id:!0,class:!0,href:!0});var pqr=s(ng);Uee=n(pqr,"SPAN",{});var uqr=s(Uee);T(wA.$$.fragment,uqr),uqr.forEach(t),pqr.forEach(t),YWe=i(QPe),Jee=n(QPe,"SPAN",{});var _qr=s(Jee);KWe=r(_qr,"AutoTokenizer"),_qr.forEach(t),QPe.forEach(t),YRe=i(f),wo=n(f,"DIV",{class:!0});var ks=s(wo);T(AA.$$.fragment,ks),ZWe=i(ks),yA=n(ks,"P",{});var WPe=s(yA);eHe=r(WPe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),xk=n(WPe,"A",{href:!0});var bqr=s(xk);oHe=r(bqr,"AutoTokenizer.from_pretrained()"),bqr.forEach(t),rHe=r(WPe," class method."),WPe.forEach(t),tHe=i(ks),LA=n(ks,"P",{});var HPe=s(LA);aHe=r(HPe,"This class cannot be instantiated directly using "),Yee=n(HPe,"CODE",{});var vqr=s(Yee);nHe=r(vqr,"__init__()"),vqr.forEach(t),sHe=r(HPe," (throws an error)."),HPe.forEach(t),lHe=i(ks),Er=n(ks,"DIV",{class:!0});var Ss=s(Er);T(xA.$$.fragment,Ss),iHe=i(Ss),Kee=n(Ss,"P",{});var Fqr=s(Kee);dHe=r(Fqr,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),Fqr.forEach(t),cHe=i(Ss),Ta=n(Ss,"P",{});var F3=s(Ta);fHe=r(F3,"The tokenizer class to instantiate is selected based on the "),Zee=n(F3,"CODE",{});var Tqr=s(Zee);mHe=r(Tqr,"model_type"),Tqr.forEach(t),gHe=r(F3,` property of the config object (either
passed as an argument or loaded from `),eoe=n(F3,"CODE",{});var Mqr=s(eoe);hHe=r(Mqr,"pretrained_model_name_or_path"),Mqr.forEach(t),pHe=r(F3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ooe=n(F3,"CODE",{});var Eqr=s(ooe);uHe=r(Eqr,"pretrained_model_name_or_path"),Eqr.forEach(t),_He=r(F3,":"),F3.forEach(t),bHe=i(Ss),k=n(Ss,"UL",{});var S=s(k);yn=n(S,"LI",{});var Cx=s(yn);roe=n(Cx,"STRONG",{});var Cqr=s(roe);vHe=r(Cqr,"albert"),Cqr.forEach(t),FHe=r(Cx," \u2014 "),$k=n(Cx,"A",{href:!0});var wqr=s($k);THe=r(wqr,"AlbertTokenizer"),wqr.forEach(t),MHe=r(Cx," or "),kk=n(Cx,"A",{href:!0});var Aqr=s(kk);EHe=r(Aqr,"AlbertTokenizerFast"),Aqr.forEach(t),CHe=r(Cx," (ALBERT model)"),Cx.forEach(t),wHe=i(S),Ln=n(S,"LI",{});var wx=s(Ln);toe=n(wx,"STRONG",{});var yqr=s(toe);AHe=r(yqr,"bart"),yqr.forEach(t),yHe=r(wx," \u2014 "),Sk=n(wx,"A",{href:!0});var Lqr=s(Sk);LHe=r(Lqr,"BartTokenizer"),Lqr.forEach(t),xHe=r(wx," or "),Rk=n(wx,"A",{href:!0});var xqr=s(Rk);$He=r(xqr,"BartTokenizerFast"),xqr.forEach(t),kHe=r(wx," (BART model)"),wx.forEach(t),SHe=i(S),xn=n(S,"LI",{});var Ax=s(xn);aoe=n(Ax,"STRONG",{});var $qr=s(aoe);RHe=r($qr,"barthez"),$qr.forEach(t),BHe=r(Ax," \u2014 "),Bk=n(Ax,"A",{href:!0});var kqr=s(Bk);PHe=r(kqr,"BarthezTokenizer"),kqr.forEach(t),IHe=r(Ax," or "),Pk=n(Ax,"A",{href:!0});var Sqr=s(Pk);qHe=r(Sqr,"BarthezTokenizerFast"),Sqr.forEach(t),NHe=r(Ax," (BARThez model)"),Ax.forEach(t),jHe=i(S),sg=n(S,"LI",{});var V4e=s(sg);noe=n(V4e,"STRONG",{});var Rqr=s(noe);DHe=r(Rqr,"bartpho"),Rqr.forEach(t),GHe=r(V4e," \u2014 "),Ik=n(V4e,"A",{href:!0});var Bqr=s(Ik);OHe=r(Bqr,"BartphoTokenizer"),Bqr.forEach(t),VHe=r(V4e," (BARTpho model)"),V4e.forEach(t),XHe=i(S),$n=n(S,"LI",{});var yx=s($n);soe=n(yx,"STRONG",{});var Pqr=s(soe);zHe=r(Pqr,"bert"),Pqr.forEach(t),QHe=r(yx," \u2014 "),qk=n(yx,"A",{href:!0});var Iqr=s(qk);WHe=r(Iqr,"BertTokenizer"),Iqr.forEach(t),HHe=r(yx," or "),Nk=n(yx,"A",{href:!0});var qqr=s(Nk);UHe=r(qqr,"BertTokenizerFast"),qqr.forEach(t),JHe=r(yx," (BERT model)"),yx.forEach(t),YHe=i(S),lg=n(S,"LI",{});var X4e=s(lg);loe=n(X4e,"STRONG",{});var Nqr=s(loe);KHe=r(Nqr,"bert-generation"),Nqr.forEach(t),ZHe=r(X4e," \u2014 "),jk=n(X4e,"A",{href:!0});var jqr=s(jk);eUe=r(jqr,"BertGenerationTokenizer"),jqr.forEach(t),oUe=r(X4e," (Bert Generation model)"),X4e.forEach(t),rUe=i(S),ig=n(S,"LI",{});var z4e=s(ig);ioe=n(z4e,"STRONG",{});var Dqr=s(ioe);tUe=r(Dqr,"bert-japanese"),Dqr.forEach(t),aUe=r(z4e," \u2014 "),Dk=n(z4e,"A",{href:!0});var Gqr=s(Dk);nUe=r(Gqr,"BertJapaneseTokenizer"),Gqr.forEach(t),sUe=r(z4e," (BertJapanese model)"),z4e.forEach(t),lUe=i(S),dg=n(S,"LI",{});var Q4e=s(dg);doe=n(Q4e,"STRONG",{});var Oqr=s(doe);iUe=r(Oqr,"bertweet"),Oqr.forEach(t),dUe=r(Q4e," \u2014 "),Gk=n(Q4e,"A",{href:!0});var Vqr=s(Gk);cUe=r(Vqr,"BertweetTokenizer"),Vqr.forEach(t),fUe=r(Q4e," (Bertweet model)"),Q4e.forEach(t),mUe=i(S),kn=n(S,"LI",{});var Lx=s(kn);coe=n(Lx,"STRONG",{});var Xqr=s(coe);gUe=r(Xqr,"big_bird"),Xqr.forEach(t),hUe=r(Lx," \u2014 "),Ok=n(Lx,"A",{href:!0});var zqr=s(Ok);pUe=r(zqr,"BigBirdTokenizer"),zqr.forEach(t),uUe=r(Lx," or "),Vk=n(Lx,"A",{href:!0});var Qqr=s(Vk);_Ue=r(Qqr,"BigBirdTokenizerFast"),Qqr.forEach(t),bUe=r(Lx," (BigBird model)"),Lx.forEach(t),vUe=i(S),Sn=n(S,"LI",{});var xx=s(Sn);foe=n(xx,"STRONG",{});var Wqr=s(foe);FUe=r(Wqr,"bigbird_pegasus"),Wqr.forEach(t),TUe=r(xx," \u2014 "),Xk=n(xx,"A",{href:!0});var Hqr=s(Xk);MUe=r(Hqr,"PegasusTokenizer"),Hqr.forEach(t),EUe=r(xx," or "),zk=n(xx,"A",{href:!0});var Uqr=s(zk);CUe=r(Uqr,"PegasusTokenizerFast"),Uqr.forEach(t),wUe=r(xx," (BigBirdPegasus model)"),xx.forEach(t),AUe=i(S),Rn=n(S,"LI",{});var $x=s(Rn);moe=n($x,"STRONG",{});var Jqr=s(moe);yUe=r(Jqr,"blenderbot"),Jqr.forEach(t),LUe=r($x," \u2014 "),Qk=n($x,"A",{href:!0});var Yqr=s(Qk);xUe=r(Yqr,"BlenderbotTokenizer"),Yqr.forEach(t),$Ue=r($x," or "),Wk=n($x,"A",{href:!0});var Kqr=s(Wk);kUe=r(Kqr,"BlenderbotTokenizerFast"),Kqr.forEach(t),SUe=r($x," (Blenderbot model)"),$x.forEach(t),RUe=i(S),cg=n(S,"LI",{});var W4e=s(cg);goe=n(W4e,"STRONG",{});var Zqr=s(goe);BUe=r(Zqr,"blenderbot-small"),Zqr.forEach(t),PUe=r(W4e," \u2014 "),Hk=n(W4e,"A",{href:!0});var eNr=s(Hk);IUe=r(eNr,"BlenderbotSmallTokenizer"),eNr.forEach(t),qUe=r(W4e," (BlenderbotSmall model)"),W4e.forEach(t),NUe=i(S),fg=n(S,"LI",{});var H4e=s(fg);hoe=n(H4e,"STRONG",{});var oNr=s(hoe);jUe=r(oNr,"byt5"),oNr.forEach(t),DUe=r(H4e," \u2014 "),Uk=n(H4e,"A",{href:!0});var rNr=s(Uk);GUe=r(rNr,"ByT5Tokenizer"),rNr.forEach(t),OUe=r(H4e," (ByT5 model)"),H4e.forEach(t),VUe=i(S),Bn=n(S,"LI",{});var kx=s(Bn);poe=n(kx,"STRONG",{});var tNr=s(poe);XUe=r(tNr,"camembert"),tNr.forEach(t),zUe=r(kx," \u2014 "),Jk=n(kx,"A",{href:!0});var aNr=s(Jk);QUe=r(aNr,"CamembertTokenizer"),aNr.forEach(t),WUe=r(kx," or "),Yk=n(kx,"A",{href:!0});var nNr=s(Yk);HUe=r(nNr,"CamembertTokenizerFast"),nNr.forEach(t),UUe=r(kx," (CamemBERT model)"),kx.forEach(t),JUe=i(S),mg=n(S,"LI",{});var U4e=s(mg);uoe=n(U4e,"STRONG",{});var sNr=s(uoe);YUe=r(sNr,"canine"),sNr.forEach(t),KUe=r(U4e," \u2014 "),Kk=n(U4e,"A",{href:!0});var lNr=s(Kk);ZUe=r(lNr,"CanineTokenizer"),lNr.forEach(t),eJe=r(U4e," (Canine model)"),U4e.forEach(t),oJe=i(S),Pn=n(S,"LI",{});var Sx=s(Pn);_oe=n(Sx,"STRONG",{});var iNr=s(_oe);rJe=r(iNr,"clip"),iNr.forEach(t),tJe=r(Sx," \u2014 "),Zk=n(Sx,"A",{href:!0});var dNr=s(Zk);aJe=r(dNr,"CLIPTokenizer"),dNr.forEach(t),nJe=r(Sx," or "),eS=n(Sx,"A",{href:!0});var cNr=s(eS);sJe=r(cNr,"CLIPTokenizerFast"),cNr.forEach(t),lJe=r(Sx," (CLIP model)"),Sx.forEach(t),iJe=i(S),In=n(S,"LI",{});var Rx=s(In);boe=n(Rx,"STRONG",{});var fNr=s(boe);dJe=r(fNr,"convbert"),fNr.forEach(t),cJe=r(Rx," \u2014 "),oS=n(Rx,"A",{href:!0});var mNr=s(oS);fJe=r(mNr,"ConvBertTokenizer"),mNr.forEach(t),mJe=r(Rx," or "),rS=n(Rx,"A",{href:!0});var gNr=s(rS);gJe=r(gNr,"ConvBertTokenizerFast"),gNr.forEach(t),hJe=r(Rx," (ConvBERT model)"),Rx.forEach(t),pJe=i(S),qn=n(S,"LI",{});var Bx=s(qn);voe=n(Bx,"STRONG",{});var hNr=s(voe);uJe=r(hNr,"cpm"),hNr.forEach(t),_Je=r(Bx," \u2014 "),tS=n(Bx,"A",{href:!0});var pNr=s(tS);bJe=r(pNr,"CpmTokenizer"),pNr.forEach(t),vJe=r(Bx," or "),Foe=n(Bx,"CODE",{});var uNr=s(Foe);FJe=r(uNr,"CpmTokenizerFast"),uNr.forEach(t),TJe=r(Bx," (CPM model)"),Bx.forEach(t),MJe=i(S),gg=n(S,"LI",{});var J4e=s(gg);Toe=n(J4e,"STRONG",{});var _Nr=s(Toe);EJe=r(_Nr,"ctrl"),_Nr.forEach(t),CJe=r(J4e," \u2014 "),aS=n(J4e,"A",{href:!0});var bNr=s(aS);wJe=r(bNr,"CTRLTokenizer"),bNr.forEach(t),AJe=r(J4e," (CTRL model)"),J4e.forEach(t),yJe=i(S),Nn=n(S,"LI",{});var Px=s(Nn);Moe=n(Px,"STRONG",{});var vNr=s(Moe);LJe=r(vNr,"data2vec-text"),vNr.forEach(t),xJe=r(Px," \u2014 "),nS=n(Px,"A",{href:!0});var FNr=s(nS);$Je=r(FNr,"RobertaTokenizer"),FNr.forEach(t),kJe=r(Px," or "),sS=n(Px,"A",{href:!0});var TNr=s(sS);SJe=r(TNr,"RobertaTokenizerFast"),TNr.forEach(t),RJe=r(Px," (Data2VecText model)"),Px.forEach(t),BJe=i(S),jn=n(S,"LI",{});var Ix=s(jn);Eoe=n(Ix,"STRONG",{});var MNr=s(Eoe);PJe=r(MNr,"deberta"),MNr.forEach(t),IJe=r(Ix," \u2014 "),lS=n(Ix,"A",{href:!0});var ENr=s(lS);qJe=r(ENr,"DebertaTokenizer"),ENr.forEach(t),NJe=r(Ix," or "),iS=n(Ix,"A",{href:!0});var CNr=s(iS);jJe=r(CNr,"DebertaTokenizerFast"),CNr.forEach(t),DJe=r(Ix," (DeBERTa model)"),Ix.forEach(t),GJe=i(S),Dn=n(S,"LI",{});var qx=s(Dn);Coe=n(qx,"STRONG",{});var wNr=s(Coe);OJe=r(wNr,"deberta-v2"),wNr.forEach(t),VJe=r(qx," \u2014 "),dS=n(qx,"A",{href:!0});var ANr=s(dS);XJe=r(ANr,"DebertaV2Tokenizer"),ANr.forEach(t),zJe=r(qx," or "),cS=n(qx,"A",{href:!0});var yNr=s(cS);QJe=r(yNr,"DebertaV2TokenizerFast"),yNr.forEach(t),WJe=r(qx," (DeBERTa-v2 model)"),qx.forEach(t),HJe=i(S),Gn=n(S,"LI",{});var Nx=s(Gn);woe=n(Nx,"STRONG",{});var LNr=s(woe);UJe=r(LNr,"distilbert"),LNr.forEach(t),JJe=r(Nx," \u2014 "),fS=n(Nx,"A",{href:!0});var xNr=s(fS);YJe=r(xNr,"DistilBertTokenizer"),xNr.forEach(t),KJe=r(Nx," or "),mS=n(Nx,"A",{href:!0});var $Nr=s(mS);ZJe=r($Nr,"DistilBertTokenizerFast"),$Nr.forEach(t),eYe=r(Nx," (DistilBERT model)"),Nx.forEach(t),oYe=i(S),On=n(S,"LI",{});var jx=s(On);Aoe=n(jx,"STRONG",{});var kNr=s(Aoe);rYe=r(kNr,"dpr"),kNr.forEach(t),tYe=r(jx," \u2014 "),gS=n(jx,"A",{href:!0});var SNr=s(gS);aYe=r(SNr,"DPRQuestionEncoderTokenizer"),SNr.forEach(t),nYe=r(jx," or "),hS=n(jx,"A",{href:!0});var RNr=s(hS);sYe=r(RNr,"DPRQuestionEncoderTokenizerFast"),RNr.forEach(t),lYe=r(jx," (DPR model)"),jx.forEach(t),iYe=i(S),Vn=n(S,"LI",{});var Dx=s(Vn);yoe=n(Dx,"STRONG",{});var BNr=s(yoe);dYe=r(BNr,"electra"),BNr.forEach(t),cYe=r(Dx," \u2014 "),pS=n(Dx,"A",{href:!0});var PNr=s(pS);fYe=r(PNr,"ElectraTokenizer"),PNr.forEach(t),mYe=r(Dx," or "),uS=n(Dx,"A",{href:!0});var INr=s(uS);gYe=r(INr,"ElectraTokenizerFast"),INr.forEach(t),hYe=r(Dx," (ELECTRA model)"),Dx.forEach(t),pYe=i(S),hg=n(S,"LI",{});var Y4e=s(hg);Loe=n(Y4e,"STRONG",{});var qNr=s(Loe);uYe=r(qNr,"flaubert"),qNr.forEach(t),_Ye=r(Y4e," \u2014 "),_S=n(Y4e,"A",{href:!0});var NNr=s(_S);bYe=r(NNr,"FlaubertTokenizer"),NNr.forEach(t),vYe=r(Y4e," (FlauBERT model)"),Y4e.forEach(t),FYe=i(S),Xn=n(S,"LI",{});var Gx=s(Xn);xoe=n(Gx,"STRONG",{});var jNr=s(xoe);TYe=r(jNr,"fnet"),jNr.forEach(t),MYe=r(Gx," \u2014 "),bS=n(Gx,"A",{href:!0});var DNr=s(bS);EYe=r(DNr,"FNetTokenizer"),DNr.forEach(t),CYe=r(Gx," or "),vS=n(Gx,"A",{href:!0});var GNr=s(vS);wYe=r(GNr,"FNetTokenizerFast"),GNr.forEach(t),AYe=r(Gx," (FNet model)"),Gx.forEach(t),yYe=i(S),pg=n(S,"LI",{});var K4e=s(pg);$oe=n(K4e,"STRONG",{});var ONr=s($oe);LYe=r(ONr,"fsmt"),ONr.forEach(t),xYe=r(K4e," \u2014 "),FS=n(K4e,"A",{href:!0});var VNr=s(FS);$Ye=r(VNr,"FSMTTokenizer"),VNr.forEach(t),kYe=r(K4e," (FairSeq Machine-Translation model)"),K4e.forEach(t),SYe=i(S),zn=n(S,"LI",{});var Ox=s(zn);koe=n(Ox,"STRONG",{});var XNr=s(koe);RYe=r(XNr,"funnel"),XNr.forEach(t),BYe=r(Ox," \u2014 "),TS=n(Ox,"A",{href:!0});var zNr=s(TS);PYe=r(zNr,"FunnelTokenizer"),zNr.forEach(t),IYe=r(Ox," or "),MS=n(Ox,"A",{href:!0});var QNr=s(MS);qYe=r(QNr,"FunnelTokenizerFast"),QNr.forEach(t),NYe=r(Ox," (Funnel Transformer model)"),Ox.forEach(t),jYe=i(S),Qn=n(S,"LI",{});var Vx=s(Qn);Soe=n(Vx,"STRONG",{});var WNr=s(Soe);DYe=r(WNr,"gpt2"),WNr.forEach(t),GYe=r(Vx," \u2014 "),ES=n(Vx,"A",{href:!0});var HNr=s(ES);OYe=r(HNr,"GPT2Tokenizer"),HNr.forEach(t),VYe=r(Vx," or "),CS=n(Vx,"A",{href:!0});var UNr=s(CS);XYe=r(UNr,"GPT2TokenizerFast"),UNr.forEach(t),zYe=r(Vx," (OpenAI GPT-2 model)"),Vx.forEach(t),QYe=i(S),Wn=n(S,"LI",{});var Xx=s(Wn);Roe=n(Xx,"STRONG",{});var JNr=s(Roe);WYe=r(JNr,"gpt_neo"),JNr.forEach(t),HYe=r(Xx," \u2014 "),wS=n(Xx,"A",{href:!0});var YNr=s(wS);UYe=r(YNr,"GPT2Tokenizer"),YNr.forEach(t),JYe=r(Xx," or "),AS=n(Xx,"A",{href:!0});var KNr=s(AS);YYe=r(KNr,"GPT2TokenizerFast"),KNr.forEach(t),KYe=r(Xx," (GPT Neo model)"),Xx.forEach(t),ZYe=i(S),Hn=n(S,"LI",{});var zx=s(Hn);Boe=n(zx,"STRONG",{});var ZNr=s(Boe);eKe=r(ZNr,"gptj"),ZNr.forEach(t),oKe=r(zx," \u2014 "),yS=n(zx,"A",{href:!0});var ejr=s(yS);rKe=r(ejr,"GPT2Tokenizer"),ejr.forEach(t),tKe=r(zx," or "),LS=n(zx,"A",{href:!0});var ojr=s(LS);aKe=r(ojr,"GPT2TokenizerFast"),ojr.forEach(t),nKe=r(zx," (GPT-J model)"),zx.forEach(t),sKe=i(S),Un=n(S,"LI",{});var Qx=s(Un);Poe=n(Qx,"STRONG",{});var rjr=s(Poe);lKe=r(rjr,"herbert"),rjr.forEach(t),iKe=r(Qx," \u2014 "),xS=n(Qx,"A",{href:!0});var tjr=s(xS);dKe=r(tjr,"HerbertTokenizer"),tjr.forEach(t),cKe=r(Qx," or "),$S=n(Qx,"A",{href:!0});var ajr=s($S);fKe=r(ajr,"HerbertTokenizerFast"),ajr.forEach(t),mKe=r(Qx," (HerBERT model)"),Qx.forEach(t),gKe=i(S),ug=n(S,"LI",{});var Z4e=s(ug);Ioe=n(Z4e,"STRONG",{});var njr=s(Ioe);hKe=r(njr,"hubert"),njr.forEach(t),pKe=r(Z4e," \u2014 "),kS=n(Z4e,"A",{href:!0});var sjr=s(kS);uKe=r(sjr,"Wav2Vec2CTCTokenizer"),sjr.forEach(t),_Ke=r(Z4e," (Hubert model)"),Z4e.forEach(t),bKe=i(S),Jn=n(S,"LI",{});var Wx=s(Jn);qoe=n(Wx,"STRONG",{});var ljr=s(qoe);vKe=r(ljr,"ibert"),ljr.forEach(t),FKe=r(Wx," \u2014 "),SS=n(Wx,"A",{href:!0});var ijr=s(SS);TKe=r(ijr,"RobertaTokenizer"),ijr.forEach(t),MKe=r(Wx," or "),RS=n(Wx,"A",{href:!0});var djr=s(RS);EKe=r(djr,"RobertaTokenizerFast"),djr.forEach(t),CKe=r(Wx," (I-BERT model)"),Wx.forEach(t),wKe=i(S),Yn=n(S,"LI",{});var Hx=s(Yn);Noe=n(Hx,"STRONG",{});var cjr=s(Noe);AKe=r(cjr,"layoutlm"),cjr.forEach(t),yKe=r(Hx," \u2014 "),BS=n(Hx,"A",{href:!0});var fjr=s(BS);LKe=r(fjr,"LayoutLMTokenizer"),fjr.forEach(t),xKe=r(Hx," or "),PS=n(Hx,"A",{href:!0});var mjr=s(PS);$Ke=r(mjr,"LayoutLMTokenizerFast"),mjr.forEach(t),kKe=r(Hx," (LayoutLM model)"),Hx.forEach(t),SKe=i(S),Kn=n(S,"LI",{});var Ux=s(Kn);joe=n(Ux,"STRONG",{});var gjr=s(joe);RKe=r(gjr,"layoutlmv2"),gjr.forEach(t),BKe=r(Ux," \u2014 "),IS=n(Ux,"A",{href:!0});var hjr=s(IS);PKe=r(hjr,"LayoutLMv2Tokenizer"),hjr.forEach(t),IKe=r(Ux," or "),qS=n(Ux,"A",{href:!0});var pjr=s(qS);qKe=r(pjr,"LayoutLMv2TokenizerFast"),pjr.forEach(t),NKe=r(Ux," (LayoutLMv2 model)"),Ux.forEach(t),jKe=i(S),Zn=n(S,"LI",{});var Jx=s(Zn);Doe=n(Jx,"STRONG",{});var ujr=s(Doe);DKe=r(ujr,"layoutxlm"),ujr.forEach(t),GKe=r(Jx," \u2014 "),NS=n(Jx,"A",{href:!0});var _jr=s(NS);OKe=r(_jr,"LayoutXLMTokenizer"),_jr.forEach(t),VKe=r(Jx," or "),jS=n(Jx,"A",{href:!0});var bjr=s(jS);XKe=r(bjr,"LayoutXLMTokenizerFast"),bjr.forEach(t),zKe=r(Jx," (LayoutXLM model)"),Jx.forEach(t),QKe=i(S),es=n(S,"LI",{});var Yx=s(es);Goe=n(Yx,"STRONG",{});var vjr=s(Goe);WKe=r(vjr,"led"),vjr.forEach(t),HKe=r(Yx," \u2014 "),DS=n(Yx,"A",{href:!0});var Fjr=s(DS);UKe=r(Fjr,"LEDTokenizer"),Fjr.forEach(t),JKe=r(Yx," or "),GS=n(Yx,"A",{href:!0});var Tjr=s(GS);YKe=r(Tjr,"LEDTokenizerFast"),Tjr.forEach(t),KKe=r(Yx," (LED model)"),Yx.forEach(t),ZKe=i(S),os=n(S,"LI",{});var Kx=s(os);Ooe=n(Kx,"STRONG",{});var Mjr=s(Ooe);eZe=r(Mjr,"longformer"),Mjr.forEach(t),oZe=r(Kx," \u2014 "),OS=n(Kx,"A",{href:!0});var Ejr=s(OS);rZe=r(Ejr,"LongformerTokenizer"),Ejr.forEach(t),tZe=r(Kx," or "),VS=n(Kx,"A",{href:!0});var Cjr=s(VS);aZe=r(Cjr,"LongformerTokenizerFast"),Cjr.forEach(t),nZe=r(Kx," (Longformer model)"),Kx.forEach(t),sZe=i(S),_g=n(S,"LI",{});var eEe=s(_g);Voe=n(eEe,"STRONG",{});var wjr=s(Voe);lZe=r(wjr,"luke"),wjr.forEach(t),iZe=r(eEe," \u2014 "),XS=n(eEe,"A",{href:!0});var Ajr=s(XS);dZe=r(Ajr,"LukeTokenizer"),Ajr.forEach(t),cZe=r(eEe," (LUKE model)"),eEe.forEach(t),fZe=i(S),rs=n(S,"LI",{});var Zx=s(rs);Xoe=n(Zx,"STRONG",{});var yjr=s(Xoe);mZe=r(yjr,"lxmert"),yjr.forEach(t),gZe=r(Zx," \u2014 "),zS=n(Zx,"A",{href:!0});var Ljr=s(zS);hZe=r(Ljr,"LxmertTokenizer"),Ljr.forEach(t),pZe=r(Zx," or "),QS=n(Zx,"A",{href:!0});var xjr=s(QS);uZe=r(xjr,"LxmertTokenizerFast"),xjr.forEach(t),_Ze=r(Zx," (LXMERT model)"),Zx.forEach(t),bZe=i(S),bg=n(S,"LI",{});var oEe=s(bg);zoe=n(oEe,"STRONG",{});var $jr=s(zoe);vZe=r($jr,"m2m_100"),$jr.forEach(t),FZe=r(oEe," \u2014 "),WS=n(oEe,"A",{href:!0});var kjr=s(WS);TZe=r(kjr,"M2M100Tokenizer"),kjr.forEach(t),MZe=r(oEe," (M2M100 model)"),oEe.forEach(t),EZe=i(S),vg=n(S,"LI",{});var rEe=s(vg);Qoe=n(rEe,"STRONG",{});var Sjr=s(Qoe);CZe=r(Sjr,"marian"),Sjr.forEach(t),wZe=r(rEe," \u2014 "),HS=n(rEe,"A",{href:!0});var Rjr=s(HS);AZe=r(Rjr,"MarianTokenizer"),Rjr.forEach(t),yZe=r(rEe," (Marian model)"),rEe.forEach(t),LZe=i(S),ts=n(S,"LI",{});var e7=s(ts);Woe=n(e7,"STRONG",{});var Bjr=s(Woe);xZe=r(Bjr,"mbart"),Bjr.forEach(t),$Ze=r(e7," \u2014 "),US=n(e7,"A",{href:!0});var Pjr=s(US);kZe=r(Pjr,"MBartTokenizer"),Pjr.forEach(t),SZe=r(e7," or "),JS=n(e7,"A",{href:!0});var Ijr=s(JS);RZe=r(Ijr,"MBartTokenizerFast"),Ijr.forEach(t),BZe=r(e7," (mBART model)"),e7.forEach(t),PZe=i(S),as=n(S,"LI",{});var o7=s(as);Hoe=n(o7,"STRONG",{});var qjr=s(Hoe);IZe=r(qjr,"mbart50"),qjr.forEach(t),qZe=r(o7," \u2014 "),YS=n(o7,"A",{href:!0});var Njr=s(YS);NZe=r(Njr,"MBart50Tokenizer"),Njr.forEach(t),jZe=r(o7," or "),KS=n(o7,"A",{href:!0});var jjr=s(KS);DZe=r(jjr,"MBart50TokenizerFast"),jjr.forEach(t),GZe=r(o7," (mBART-50 model)"),o7.forEach(t),OZe=i(S),ns=n(S,"LI",{});var r7=s(ns);Uoe=n(r7,"STRONG",{});var Djr=s(Uoe);VZe=r(Djr,"megatron-bert"),Djr.forEach(t),XZe=r(r7," \u2014 "),ZS=n(r7,"A",{href:!0});var Gjr=s(ZS);zZe=r(Gjr,"BertTokenizer"),Gjr.forEach(t),QZe=r(r7," or "),eR=n(r7,"A",{href:!0});var Ojr=s(eR);WZe=r(Ojr,"BertTokenizerFast"),Ojr.forEach(t),HZe=r(r7," (MegatronBert model)"),r7.forEach(t),UZe=i(S),Fg=n(S,"LI",{});var tEe=s(Fg);Joe=n(tEe,"STRONG",{});var Vjr=s(Joe);JZe=r(Vjr,"mluke"),Vjr.forEach(t),YZe=r(tEe," \u2014 "),oR=n(tEe,"A",{href:!0});var Xjr=s(oR);KZe=r(Xjr,"MLukeTokenizer"),Xjr.forEach(t),ZZe=r(tEe," (mLUKE model)"),tEe.forEach(t),eeo=i(S),ss=n(S,"LI",{});var t7=s(ss);Yoe=n(t7,"STRONG",{});var zjr=s(Yoe);oeo=r(zjr,"mobilebert"),zjr.forEach(t),reo=r(t7," \u2014 "),rR=n(t7,"A",{href:!0});var Qjr=s(rR);teo=r(Qjr,"MobileBertTokenizer"),Qjr.forEach(t),aeo=r(t7," or "),tR=n(t7,"A",{href:!0});var Wjr=s(tR);neo=r(Wjr,"MobileBertTokenizerFast"),Wjr.forEach(t),seo=r(t7," (MobileBERT model)"),t7.forEach(t),leo=i(S),ls=n(S,"LI",{});var a7=s(ls);Koe=n(a7,"STRONG",{});var Hjr=s(Koe);ieo=r(Hjr,"mpnet"),Hjr.forEach(t),deo=r(a7," \u2014 "),aR=n(a7,"A",{href:!0});var Ujr=s(aR);ceo=r(Ujr,"MPNetTokenizer"),Ujr.forEach(t),feo=r(a7," or "),nR=n(a7,"A",{href:!0});var Jjr=s(nR);meo=r(Jjr,"MPNetTokenizerFast"),Jjr.forEach(t),geo=r(a7," (MPNet model)"),a7.forEach(t),heo=i(S),is=n(S,"LI",{});var n7=s(is);Zoe=n(n7,"STRONG",{});var Yjr=s(Zoe);peo=r(Yjr,"mt5"),Yjr.forEach(t),ueo=r(n7," \u2014 "),sR=n(n7,"A",{href:!0});var Kjr=s(sR);_eo=r(Kjr,"MT5Tokenizer"),Kjr.forEach(t),beo=r(n7," or "),lR=n(n7,"A",{href:!0});var Zjr=s(lR);veo=r(Zjr,"MT5TokenizerFast"),Zjr.forEach(t),Feo=r(n7," (mT5 model)"),n7.forEach(t),Teo=i(S),ds=n(S,"LI",{});var s7=s(ds);ere=n(s7,"STRONG",{});var eDr=s(ere);Meo=r(eDr,"nystromformer"),eDr.forEach(t),Eeo=r(s7," \u2014 "),iR=n(s7,"A",{href:!0});var oDr=s(iR);Ceo=r(oDr,"AlbertTokenizer"),oDr.forEach(t),weo=r(s7," or "),dR=n(s7,"A",{href:!0});var rDr=s(dR);Aeo=r(rDr,"AlbertTokenizerFast"),rDr.forEach(t),yeo=r(s7," (Nystromformer model)"),s7.forEach(t),Leo=i(S),cs=n(S,"LI",{});var l7=s(cs);ore=n(l7,"STRONG",{});var tDr=s(ore);xeo=r(tDr,"openai-gpt"),tDr.forEach(t),$eo=r(l7," \u2014 "),cR=n(l7,"A",{href:!0});var aDr=s(cR);keo=r(aDr,"OpenAIGPTTokenizer"),aDr.forEach(t),Seo=r(l7," or "),fR=n(l7,"A",{href:!0});var nDr=s(fR);Reo=r(nDr,"OpenAIGPTTokenizerFast"),nDr.forEach(t),Beo=r(l7," (OpenAI GPT model)"),l7.forEach(t),Peo=i(S),fs=n(S,"LI",{});var i7=s(fs);rre=n(i7,"STRONG",{});var sDr=s(rre);Ieo=r(sDr,"pegasus"),sDr.forEach(t),qeo=r(i7," \u2014 "),mR=n(i7,"A",{href:!0});var lDr=s(mR);Neo=r(lDr,"PegasusTokenizer"),lDr.forEach(t),jeo=r(i7," or "),gR=n(i7,"A",{href:!0});var iDr=s(gR);Deo=r(iDr,"PegasusTokenizerFast"),iDr.forEach(t),Geo=r(i7," (Pegasus model)"),i7.forEach(t),Oeo=i(S),Tg=n(S,"LI",{});var aEe=s(Tg);tre=n(aEe,"STRONG",{});var dDr=s(tre);Veo=r(dDr,"perceiver"),dDr.forEach(t),Xeo=r(aEe," \u2014 "),hR=n(aEe,"A",{href:!0});var cDr=s(hR);zeo=r(cDr,"PerceiverTokenizer"),cDr.forEach(t),Qeo=r(aEe," (Perceiver model)"),aEe.forEach(t),Weo=i(S),Mg=n(S,"LI",{});var nEe=s(Mg);are=n(nEe,"STRONG",{});var fDr=s(are);Heo=r(fDr,"phobert"),fDr.forEach(t),Ueo=r(nEe," \u2014 "),pR=n(nEe,"A",{href:!0});var mDr=s(pR);Jeo=r(mDr,"PhobertTokenizer"),mDr.forEach(t),Yeo=r(nEe," (PhoBERT model)"),nEe.forEach(t),Keo=i(S),Eg=n(S,"LI",{});var sEe=s(Eg);nre=n(sEe,"STRONG",{});var gDr=s(nre);Zeo=r(gDr,"plbart"),gDr.forEach(t),eoo=r(sEe," \u2014 "),uR=n(sEe,"A",{href:!0});var hDr=s(uR);ooo=r(hDr,"PLBartTokenizer"),hDr.forEach(t),roo=r(sEe," (PLBart model)"),sEe.forEach(t),too=i(S),Cg=n(S,"LI",{});var lEe=s(Cg);sre=n(lEe,"STRONG",{});var pDr=s(sre);aoo=r(pDr,"prophetnet"),pDr.forEach(t),noo=r(lEe," \u2014 "),_R=n(lEe,"A",{href:!0});var uDr=s(_R);soo=r(uDr,"ProphetNetTokenizer"),uDr.forEach(t),loo=r(lEe," (ProphetNet model)"),lEe.forEach(t),ioo=i(S),ms=n(S,"LI",{});var d7=s(ms);lre=n(d7,"STRONG",{});var _Dr=s(lre);doo=r(_Dr,"qdqbert"),_Dr.forEach(t),coo=r(d7," \u2014 "),bR=n(d7,"A",{href:!0});var bDr=s(bR);foo=r(bDr,"BertTokenizer"),bDr.forEach(t),moo=r(d7," or "),vR=n(d7,"A",{href:!0});var vDr=s(vR);goo=r(vDr,"BertTokenizerFast"),vDr.forEach(t),hoo=r(d7," (QDQBert model)"),d7.forEach(t),poo=i(S),wg=n(S,"LI",{});var iEe=s(wg);ire=n(iEe,"STRONG",{});var FDr=s(ire);uoo=r(FDr,"rag"),FDr.forEach(t),_oo=r(iEe," \u2014 "),FR=n(iEe,"A",{href:!0});var TDr=s(FR);boo=r(TDr,"RagTokenizer"),TDr.forEach(t),voo=r(iEe," (RAG model)"),iEe.forEach(t),Foo=i(S),gs=n(S,"LI",{});var c7=s(gs);dre=n(c7,"STRONG",{});var MDr=s(dre);Too=r(MDr,"realm"),MDr.forEach(t),Moo=r(c7," \u2014 "),TR=n(c7,"A",{href:!0});var EDr=s(TR);Eoo=r(EDr,"RealmTokenizer"),EDr.forEach(t),Coo=r(c7," or "),MR=n(c7,"A",{href:!0});var CDr=s(MR);woo=r(CDr,"RealmTokenizerFast"),CDr.forEach(t),Aoo=r(c7," (Realm model)"),c7.forEach(t),yoo=i(S),hs=n(S,"LI",{});var f7=s(hs);cre=n(f7,"STRONG",{});var wDr=s(cre);Loo=r(wDr,"reformer"),wDr.forEach(t),xoo=r(f7," \u2014 "),ER=n(f7,"A",{href:!0});var ADr=s(ER);$oo=r(ADr,"ReformerTokenizer"),ADr.forEach(t),koo=r(f7," or "),CR=n(f7,"A",{href:!0});var yDr=s(CR);Soo=r(yDr,"ReformerTokenizerFast"),yDr.forEach(t),Roo=r(f7," (Reformer model)"),f7.forEach(t),Boo=i(S),ps=n(S,"LI",{});var m7=s(ps);fre=n(m7,"STRONG",{});var LDr=s(fre);Poo=r(LDr,"rembert"),LDr.forEach(t),Ioo=r(m7," \u2014 "),wR=n(m7,"A",{href:!0});var xDr=s(wR);qoo=r(xDr,"RemBertTokenizer"),xDr.forEach(t),Noo=r(m7," or "),AR=n(m7,"A",{href:!0});var $Dr=s(AR);joo=r($Dr,"RemBertTokenizerFast"),$Dr.forEach(t),Doo=r(m7," (RemBERT model)"),m7.forEach(t),Goo=i(S),us=n(S,"LI",{});var g7=s(us);mre=n(g7,"STRONG",{});var kDr=s(mre);Ooo=r(kDr,"retribert"),kDr.forEach(t),Voo=r(g7," \u2014 "),yR=n(g7,"A",{href:!0});var SDr=s(yR);Xoo=r(SDr,"RetriBertTokenizer"),SDr.forEach(t),zoo=r(g7," or "),LR=n(g7,"A",{href:!0});var RDr=s(LR);Qoo=r(RDr,"RetriBertTokenizerFast"),RDr.forEach(t),Woo=r(g7," (RetriBERT model)"),g7.forEach(t),Hoo=i(S),_s=n(S,"LI",{});var h7=s(_s);gre=n(h7,"STRONG",{});var BDr=s(gre);Uoo=r(BDr,"roberta"),BDr.forEach(t),Joo=r(h7," \u2014 "),xR=n(h7,"A",{href:!0});var PDr=s(xR);Yoo=r(PDr,"RobertaTokenizer"),PDr.forEach(t),Koo=r(h7," or "),$R=n(h7,"A",{href:!0});var IDr=s($R);Zoo=r(IDr,"RobertaTokenizerFast"),IDr.forEach(t),ero=r(h7," (RoBERTa model)"),h7.forEach(t),oro=i(S),bs=n(S,"LI",{});var p7=s(bs);hre=n(p7,"STRONG",{});var qDr=s(hre);rro=r(qDr,"roformer"),qDr.forEach(t),tro=r(p7," \u2014 "),kR=n(p7,"A",{href:!0});var NDr=s(kR);aro=r(NDr,"RoFormerTokenizer"),NDr.forEach(t),nro=r(p7," or "),SR=n(p7,"A",{href:!0});var jDr=s(SR);sro=r(jDr,"RoFormerTokenizerFast"),jDr.forEach(t),lro=r(p7," (RoFormer model)"),p7.forEach(t),iro=i(S),Ag=n(S,"LI",{});var dEe=s(Ag);pre=n(dEe,"STRONG",{});var DDr=s(pre);dro=r(DDr,"speech_to_text"),DDr.forEach(t),cro=r(dEe," \u2014 "),RR=n(dEe,"A",{href:!0});var GDr=s(RR);fro=r(GDr,"Speech2TextTokenizer"),GDr.forEach(t),mro=r(dEe," (Speech2Text model)"),dEe.forEach(t),gro=i(S),yg=n(S,"LI",{});var cEe=s(yg);ure=n(cEe,"STRONG",{});var ODr=s(ure);hro=r(ODr,"speech_to_text_2"),ODr.forEach(t),pro=r(cEe," \u2014 "),BR=n(cEe,"A",{href:!0});var VDr=s(BR);uro=r(VDr,"Speech2Text2Tokenizer"),VDr.forEach(t),_ro=r(cEe," (Speech2Text2 model)"),cEe.forEach(t),bro=i(S),vs=n(S,"LI",{});var u7=s(vs);_re=n(u7,"STRONG",{});var XDr=s(_re);vro=r(XDr,"splinter"),XDr.forEach(t),Fro=r(u7," \u2014 "),PR=n(u7,"A",{href:!0});var zDr=s(PR);Tro=r(zDr,"SplinterTokenizer"),zDr.forEach(t),Mro=r(u7," or "),IR=n(u7,"A",{href:!0});var QDr=s(IR);Ero=r(QDr,"SplinterTokenizerFast"),QDr.forEach(t),Cro=r(u7," (Splinter model)"),u7.forEach(t),wro=i(S),Fs=n(S,"LI",{});var _7=s(Fs);bre=n(_7,"STRONG",{});var WDr=s(bre);Aro=r(WDr,"squeezebert"),WDr.forEach(t),yro=r(_7," \u2014 "),qR=n(_7,"A",{href:!0});var HDr=s(qR);Lro=r(HDr,"SqueezeBertTokenizer"),HDr.forEach(t),xro=r(_7," or "),NR=n(_7,"A",{href:!0});var UDr=s(NR);$ro=r(UDr,"SqueezeBertTokenizerFast"),UDr.forEach(t),kro=r(_7," (SqueezeBERT model)"),_7.forEach(t),Sro=i(S),Ts=n(S,"LI",{});var b7=s(Ts);vre=n(b7,"STRONG",{});var JDr=s(vre);Rro=r(JDr,"t5"),JDr.forEach(t),Bro=r(b7," \u2014 "),jR=n(b7,"A",{href:!0});var YDr=s(jR);Pro=r(YDr,"T5Tokenizer"),YDr.forEach(t),Iro=r(b7," or "),DR=n(b7,"A",{href:!0});var KDr=s(DR);qro=r(KDr,"T5TokenizerFast"),KDr.forEach(t),Nro=r(b7," (T5 model)"),b7.forEach(t),jro=i(S),Lg=n(S,"LI",{});var fEe=s(Lg);Fre=n(fEe,"STRONG",{});var ZDr=s(Fre);Dro=r(ZDr,"tapas"),ZDr.forEach(t),Gro=r(fEe," \u2014 "),GR=n(fEe,"A",{href:!0});var eGr=s(GR);Oro=r(eGr,"TapasTokenizer"),eGr.forEach(t),Vro=r(fEe," (TAPAS model)"),fEe.forEach(t),Xro=i(S),xg=n(S,"LI",{});var mEe=s(xg);Tre=n(mEe,"STRONG",{});var oGr=s(Tre);zro=r(oGr,"tapex"),oGr.forEach(t),Qro=r(mEe," \u2014 "),OR=n(mEe,"A",{href:!0});var rGr=s(OR);Wro=r(rGr,"TapexTokenizer"),rGr.forEach(t),Hro=r(mEe," (TAPEX model)"),mEe.forEach(t),Uro=i(S),$g=n(S,"LI",{});var gEe=s($g);Mre=n(gEe,"STRONG",{});var tGr=s(Mre);Jro=r(tGr,"transfo-xl"),tGr.forEach(t),Yro=r(gEe," \u2014 "),VR=n(gEe,"A",{href:!0});var aGr=s(VR);Kro=r(aGr,"TransfoXLTokenizer"),aGr.forEach(t),Zro=r(gEe," (Transformer-XL model)"),gEe.forEach(t),eto=i(S),Ms=n(S,"LI",{});var v7=s(Ms);Ere=n(v7,"STRONG",{});var nGr=s(Ere);oto=r(nGr,"visual_bert"),nGr.forEach(t),rto=r(v7," \u2014 "),XR=n(v7,"A",{href:!0});var sGr=s(XR);tto=r(sGr,"BertTokenizer"),sGr.forEach(t),ato=r(v7," or "),zR=n(v7,"A",{href:!0});var lGr=s(zR);nto=r(lGr,"BertTokenizerFast"),lGr.forEach(t),sto=r(v7," (VisualBert model)"),v7.forEach(t),lto=i(S),kg=n(S,"LI",{});var hEe=s(kg);Cre=n(hEe,"STRONG",{});var iGr=s(Cre);ito=r(iGr,"wav2vec2"),iGr.forEach(t),dto=r(hEe," \u2014 "),QR=n(hEe,"A",{href:!0});var dGr=s(QR);cto=r(dGr,"Wav2Vec2CTCTokenizer"),dGr.forEach(t),fto=r(hEe," (Wav2Vec2 model)"),hEe.forEach(t),mto=i(S),Sg=n(S,"LI",{});var pEe=s(Sg);wre=n(pEe,"STRONG",{});var cGr=s(wre);gto=r(cGr,"wav2vec2_phoneme"),cGr.forEach(t),hto=r(pEe," \u2014 "),WR=n(pEe,"A",{href:!0});var fGr=s(WR);pto=r(fGr,"Wav2Vec2PhonemeCTCTokenizer"),fGr.forEach(t),uto=r(pEe," (Wav2Vec2Phoneme model)"),pEe.forEach(t),_to=i(S),Es=n(S,"LI",{});var F7=s(Es);Are=n(F7,"STRONG",{});var mGr=s(Are);bto=r(mGr,"xglm"),mGr.forEach(t),vto=r(F7," \u2014 "),HR=n(F7,"A",{href:!0});var gGr=s(HR);Fto=r(gGr,"XGLMTokenizer"),gGr.forEach(t),Tto=r(F7," or "),UR=n(F7,"A",{href:!0});var hGr=s(UR);Mto=r(hGr,"XGLMTokenizerFast"),hGr.forEach(t),Eto=r(F7," (XGLM model)"),F7.forEach(t),Cto=i(S),Rg=n(S,"LI",{});var uEe=s(Rg);yre=n(uEe,"STRONG",{});var pGr=s(yre);wto=r(pGr,"xlm"),pGr.forEach(t),Ato=r(uEe," \u2014 "),JR=n(uEe,"A",{href:!0});var uGr=s(JR);yto=r(uGr,"XLMTokenizer"),uGr.forEach(t),Lto=r(uEe," (XLM model)"),uEe.forEach(t),xto=i(S),Bg=n(S,"LI",{});var _Ee=s(Bg);Lre=n(_Ee,"STRONG",{});var _Gr=s(Lre);$to=r(_Gr,"xlm-prophetnet"),_Gr.forEach(t),kto=r(_Ee," \u2014 "),YR=n(_Ee,"A",{href:!0});var bGr=s(YR);Sto=r(bGr,"XLMProphetNetTokenizer"),bGr.forEach(t),Rto=r(_Ee," (XLMProphetNet model)"),_Ee.forEach(t),Bto=i(S),Cs=n(S,"LI",{});var T7=s(Cs);xre=n(T7,"STRONG",{});var vGr=s(xre);Pto=r(vGr,"xlm-roberta"),vGr.forEach(t),Ito=r(T7," \u2014 "),KR=n(T7,"A",{href:!0});var FGr=s(KR);qto=r(FGr,"XLMRobertaTokenizer"),FGr.forEach(t),Nto=r(T7," or "),ZR=n(T7,"A",{href:!0});var TGr=s(ZR);jto=r(TGr,"XLMRobertaTokenizerFast"),TGr.forEach(t),Dto=r(T7," (XLM-RoBERTa model)"),T7.forEach(t),Gto=i(S),ws=n(S,"LI",{});var M7=s(ws);$re=n(M7,"STRONG",{});var MGr=s($re);Oto=r(MGr,"xlm-roberta-xl"),MGr.forEach(t),Vto=r(M7," \u2014 "),eB=n(M7,"A",{href:!0});var EGr=s(eB);Xto=r(EGr,"RobertaTokenizer"),EGr.forEach(t),zto=r(M7," or "),oB=n(M7,"A",{href:!0});var CGr=s(oB);Qto=r(CGr,"RobertaTokenizerFast"),CGr.forEach(t),Wto=r(M7," (XLM-RoBERTa-XL model)"),M7.forEach(t),Hto=i(S),As=n(S,"LI",{});var E7=s(As);kre=n(E7,"STRONG",{});var wGr=s(kre);Uto=r(wGr,"xlnet"),wGr.forEach(t),Jto=r(E7," \u2014 "),rB=n(E7,"A",{href:!0});var AGr=s(rB);Yto=r(AGr,"XLNetTokenizer"),AGr.forEach(t),Kto=r(E7," or "),tB=n(E7,"A",{href:!0});var yGr=s(tB);Zto=r(yGr,"XLNetTokenizerFast"),yGr.forEach(t),eao=r(E7," (XLNet model)"),E7.forEach(t),oao=i(S),ys=n(S,"LI",{});var C7=s(ys);Sre=n(C7,"STRONG",{});var LGr=s(Sre);rao=r(LGr,"yoso"),LGr.forEach(t),tao=r(C7," \u2014 "),aB=n(C7,"A",{href:!0});var xGr=s(aB);aao=r(xGr,"AlbertTokenizer"),xGr.forEach(t),nao=r(C7," or "),nB=n(C7,"A",{href:!0});var $Gr=s(nB);sao=r($Gr,"AlbertTokenizerFast"),$Gr.forEach(t),lao=r(C7," (YOSO model)"),C7.forEach(t),S.forEach(t),iao=i(Ss),T(Pg.$$.fragment,Ss),Ss.forEach(t),dao=i(ks),Ig=n(ks,"DIV",{class:!0});var UPe=s(Ig);T($A.$$.fragment,UPe),cao=i(UPe),Rre=n(UPe,"P",{});var kGr=s(Rre);fao=r(kGr,"Register a new tokenizer in this mapping."),kGr.forEach(t),UPe.forEach(t),ks.forEach(t),KRe=i(f),mi=n(f,"H2",{class:!0});var JPe=s(mi);qg=n(JPe,"A",{id:!0,class:!0,href:!0});var SGr=s(qg);Bre=n(SGr,"SPAN",{});var RGr=s(Bre);T(kA.$$.fragment,RGr),RGr.forEach(t),SGr.forEach(t),mao=i(JPe),Pre=n(JPe,"SPAN",{});var BGr=s(Pre);gao=r(BGr,"AutoFeatureExtractor"),BGr.forEach(t),JPe.forEach(t),ZRe=i(f),Ao=n(f,"DIV",{class:!0});var Rs=s(Ao);T(SA.$$.fragment,Rs),hao=i(Rs),RA=n(Rs,"P",{});var YPe=s(RA);pao=r(YPe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),sB=n(YPe,"A",{href:!0});var PGr=s(sB);uao=r(PGr,"AutoFeatureExtractor.from_pretrained()"),PGr.forEach(t),_ao=r(YPe," class method."),YPe.forEach(t),bao=i(Rs),BA=n(Rs,"P",{});var KPe=s(BA);vao=r(KPe,"This class cannot be instantiated directly using "),Ire=n(KPe,"CODE",{});var IGr=s(Ire);Fao=r(IGr,"__init__()"),IGr.forEach(t),Tao=r(KPe," (throws an error)."),KPe.forEach(t),Mao=i(Rs),Qe=n(Rs,"DIV",{class:!0});var Ht=s(Qe);T(PA.$$.fragment,Ht),Eao=i(Ht),qre=n(Ht,"P",{});var qGr=s(qre);Cao=r(qGr,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),qGr.forEach(t),wao=i(Ht),Ma=n(Ht,"P",{});var T3=s(Ma);Aao=r(T3,"The feature extractor class to instantiate is selected based on the "),Nre=n(T3,"CODE",{});var NGr=s(Nre);yao=r(NGr,"model_type"),NGr.forEach(t),Lao=r(T3,` property of the config object
(either passed as an argument or loaded from `),jre=n(T3,"CODE",{});var jGr=s(jre);xao=r(jGr,"pretrained_model_name_or_path"),jGr.forEach(t),$ao=r(T3,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Dre=n(T3,"CODE",{});var DGr=s(Dre);kao=r(DGr,"pretrained_model_name_or_path"),DGr.forEach(t),Sao=r(T3,":"),T3.forEach(t),Rao=i(Ht),ae=n(Ht,"UL",{});var se=s(ae);Ng=n(se,"LI",{});var bEe=s(Ng);Gre=n(bEe,"STRONG",{});var GGr=s(Gre);Bao=r(GGr,"beit"),GGr.forEach(t),Pao=r(bEe," \u2014 "),lB=n(bEe,"A",{href:!0});var OGr=s(lB);Iao=r(OGr,"BeitFeatureExtractor"),OGr.forEach(t),qao=r(bEe," (BEiT model)"),bEe.forEach(t),Nao=i(se),jg=n(se,"LI",{});var vEe=s(jg);Ore=n(vEe,"STRONG",{});var VGr=s(Ore);jao=r(VGr,"clip"),VGr.forEach(t),Dao=r(vEe," \u2014 "),iB=n(vEe,"A",{href:!0});var XGr=s(iB);Gao=r(XGr,"CLIPFeatureExtractor"),XGr.forEach(t),Oao=r(vEe," (CLIP model)"),vEe.forEach(t),Vao=i(se),Dg=n(se,"LI",{});var FEe=s(Dg);Vre=n(FEe,"STRONG",{});var zGr=s(Vre);Xao=r(zGr,"convnext"),zGr.forEach(t),zao=r(FEe," \u2014 "),dB=n(FEe,"A",{href:!0});var QGr=s(dB);Qao=r(QGr,"ConvNextFeatureExtractor"),QGr.forEach(t),Wao=r(FEe," (ConvNext model)"),FEe.forEach(t),Hao=i(se),Gg=n(se,"LI",{});var TEe=s(Gg);Xre=n(TEe,"STRONG",{});var WGr=s(Xre);Uao=r(WGr,"data2vec-audio"),WGr.forEach(t),Jao=r(TEe," \u2014 "),cB=n(TEe,"A",{href:!0});var HGr=s(cB);Yao=r(HGr,"Wav2Vec2FeatureExtractor"),HGr.forEach(t),Kao=r(TEe," (Data2VecAudio model)"),TEe.forEach(t),Zao=i(se),Og=n(se,"LI",{});var MEe=s(Og);zre=n(MEe,"STRONG",{});var UGr=s(zre);eno=r(UGr,"data2vec-vision"),UGr.forEach(t),ono=r(MEe," \u2014 "),fB=n(MEe,"A",{href:!0});var JGr=s(fB);rno=r(JGr,"BeitFeatureExtractor"),JGr.forEach(t),tno=r(MEe," (Data2VecVision model)"),MEe.forEach(t),ano=i(se),Vg=n(se,"LI",{});var EEe=s(Vg);Qre=n(EEe,"STRONG",{});var YGr=s(Qre);nno=r(YGr,"deit"),YGr.forEach(t),sno=r(EEe," \u2014 "),mB=n(EEe,"A",{href:!0});var KGr=s(mB);lno=r(KGr,"DeiTFeatureExtractor"),KGr.forEach(t),ino=r(EEe," (DeiT model)"),EEe.forEach(t),dno=i(se),Xg=n(se,"LI",{});var CEe=s(Xg);Wre=n(CEe,"STRONG",{});var ZGr=s(Wre);cno=r(ZGr,"detr"),ZGr.forEach(t),fno=r(CEe," \u2014 "),gB=n(CEe,"A",{href:!0});var eOr=s(gB);mno=r(eOr,"DetrFeatureExtractor"),eOr.forEach(t),gno=r(CEe," (DETR model)"),CEe.forEach(t),hno=i(se),zg=n(se,"LI",{});var wEe=s(zg);Hre=n(wEe,"STRONG",{});var oOr=s(Hre);pno=r(oOr,"dpt"),oOr.forEach(t),uno=r(wEe," \u2014 "),hB=n(wEe,"A",{href:!0});var rOr=s(hB);_no=r(rOr,"DPTFeatureExtractor"),rOr.forEach(t),bno=r(wEe," (DPT model)"),wEe.forEach(t),vno=i(se),Qg=n(se,"LI",{});var AEe=s(Qg);Ure=n(AEe,"STRONG",{});var tOr=s(Ure);Fno=r(tOr,"glpn"),tOr.forEach(t),Tno=r(AEe," \u2014 "),pB=n(AEe,"A",{href:!0});var aOr=s(pB);Mno=r(aOr,"GLPNFeatureExtractor"),aOr.forEach(t),Eno=r(AEe," (GLPN model)"),AEe.forEach(t),Cno=i(se),Wg=n(se,"LI",{});var yEe=s(Wg);Jre=n(yEe,"STRONG",{});var nOr=s(Jre);wno=r(nOr,"hubert"),nOr.forEach(t),Ano=r(yEe," \u2014 "),uB=n(yEe,"A",{href:!0});var sOr=s(uB);yno=r(sOr,"Wav2Vec2FeatureExtractor"),sOr.forEach(t),Lno=r(yEe," (Hubert model)"),yEe.forEach(t),xno=i(se),Hg=n(se,"LI",{});var LEe=s(Hg);Yre=n(LEe,"STRONG",{});var lOr=s(Yre);$no=r(lOr,"layoutlmv2"),lOr.forEach(t),kno=r(LEe," \u2014 "),_B=n(LEe,"A",{href:!0});var iOr=s(_B);Sno=r(iOr,"LayoutLMv2FeatureExtractor"),iOr.forEach(t),Rno=r(LEe," (LayoutLMv2 model)"),LEe.forEach(t),Bno=i(se),Ug=n(se,"LI",{});var xEe=s(Ug);Kre=n(xEe,"STRONG",{});var dOr=s(Kre);Pno=r(dOr,"maskformer"),dOr.forEach(t),Ino=r(xEe," \u2014 "),bB=n(xEe,"A",{href:!0});var cOr=s(bB);qno=r(cOr,"MaskFormerFeatureExtractor"),cOr.forEach(t),Nno=r(xEe," (MaskFormer model)"),xEe.forEach(t),jno=i(se),Jg=n(se,"LI",{});var $Ee=s(Jg);Zre=n($Ee,"STRONG",{});var fOr=s(Zre);Dno=r(fOr,"perceiver"),fOr.forEach(t),Gno=r($Ee," \u2014 "),vB=n($Ee,"A",{href:!0});var mOr=s(vB);Ono=r(mOr,"PerceiverFeatureExtractor"),mOr.forEach(t),Vno=r($Ee," (Perceiver model)"),$Ee.forEach(t),Xno=i(se),Yg=n(se,"LI",{});var kEe=s(Yg);ete=n(kEe,"STRONG",{});var gOr=s(ete);zno=r(gOr,"poolformer"),gOr.forEach(t),Qno=r(kEe," \u2014 "),FB=n(kEe,"A",{href:!0});var hOr=s(FB);Wno=r(hOr,"PoolFormerFeatureExtractor"),hOr.forEach(t),Hno=r(kEe," (PoolFormer model)"),kEe.forEach(t),Uno=i(se),Kg=n(se,"LI",{});var SEe=s(Kg);ote=n(SEe,"STRONG",{});var pOr=s(ote);Jno=r(pOr,"regnet"),pOr.forEach(t),Yno=r(SEe," \u2014 "),TB=n(SEe,"A",{href:!0});var uOr=s(TB);Kno=r(uOr,"ConvNextFeatureExtractor"),uOr.forEach(t),Zno=r(SEe," (RegNet model)"),SEe.forEach(t),eso=i(se),Zg=n(se,"LI",{});var REe=s(Zg);rte=n(REe,"STRONG",{});var _Or=s(rte);oso=r(_Or,"resnet"),_Or.forEach(t),rso=r(REe," \u2014 "),MB=n(REe,"A",{href:!0});var bOr=s(MB);tso=r(bOr,"ConvNextFeatureExtractor"),bOr.forEach(t),aso=r(REe," (ResNet model)"),REe.forEach(t),nso=i(se),eh=n(se,"LI",{});var BEe=s(eh);tte=n(BEe,"STRONG",{});var vOr=s(tte);sso=r(vOr,"segformer"),vOr.forEach(t),lso=r(BEe," \u2014 "),EB=n(BEe,"A",{href:!0});var FOr=s(EB);iso=r(FOr,"SegformerFeatureExtractor"),FOr.forEach(t),dso=r(BEe," (SegFormer model)"),BEe.forEach(t),cso=i(se),oh=n(se,"LI",{});var PEe=s(oh);ate=n(PEe,"STRONG",{});var TOr=s(ate);fso=r(TOr,"speech_to_text"),TOr.forEach(t),mso=r(PEe," \u2014 "),CB=n(PEe,"A",{href:!0});var MOr=s(CB);gso=r(MOr,"Speech2TextFeatureExtractor"),MOr.forEach(t),hso=r(PEe," (Speech2Text model)"),PEe.forEach(t),pso=i(se),rh=n(se,"LI",{});var IEe=s(rh);nte=n(IEe,"STRONG",{});var EOr=s(nte);uso=r(EOr,"swin"),EOr.forEach(t),_so=r(IEe," \u2014 "),wB=n(IEe,"A",{href:!0});var COr=s(wB);bso=r(COr,"ViTFeatureExtractor"),COr.forEach(t),vso=r(IEe," (Swin model)"),IEe.forEach(t),Fso=i(se),th=n(se,"LI",{});var qEe=s(th);ste=n(qEe,"STRONG",{});var wOr=s(ste);Tso=r(wOr,"van"),wOr.forEach(t),Mso=r(qEe," \u2014 "),AB=n(qEe,"A",{href:!0});var AOr=s(AB);Eso=r(AOr,"ConvNextFeatureExtractor"),AOr.forEach(t),Cso=r(qEe," (VAN model)"),qEe.forEach(t),wso=i(se),ah=n(se,"LI",{});var NEe=s(ah);lte=n(NEe,"STRONG",{});var yOr=s(lte);Aso=r(yOr,"vit"),yOr.forEach(t),yso=r(NEe," \u2014 "),yB=n(NEe,"A",{href:!0});var LOr=s(yB);Lso=r(LOr,"ViTFeatureExtractor"),LOr.forEach(t),xso=r(NEe," (ViT model)"),NEe.forEach(t),$so=i(se),nh=n(se,"LI",{});var jEe=s(nh);ite=n(jEe,"STRONG",{});var xOr=s(ite);kso=r(xOr,"vit_mae"),xOr.forEach(t),Sso=r(jEe," \u2014 "),LB=n(jEe,"A",{href:!0});var $Or=s(LB);Rso=r($Or,"ViTFeatureExtractor"),$Or.forEach(t),Bso=r(jEe," (ViTMAE model)"),jEe.forEach(t),Pso=i(se),sh=n(se,"LI",{});var DEe=s(sh);dte=n(DEe,"STRONG",{});var kOr=s(dte);Iso=r(kOr,"wav2vec2"),kOr.forEach(t),qso=r(DEe," \u2014 "),xB=n(DEe,"A",{href:!0});var SOr=s(xB);Nso=r(SOr,"Wav2Vec2FeatureExtractor"),SOr.forEach(t),jso=r(DEe," (Wav2Vec2 model)"),DEe.forEach(t),se.forEach(t),Dso=i(Ht),T(lh.$$.fragment,Ht),Gso=i(Ht),T(ih.$$.fragment,Ht),Ht.forEach(t),Oso=i(Rs),dh=n(Rs,"DIV",{class:!0});var ZPe=s(dh);T(IA.$$.fragment,ZPe),Vso=i(ZPe),cte=n(ZPe,"P",{});var ROr=s(cte);Xso=r(ROr,"Register a new feature extractor for this class."),ROr.forEach(t),ZPe.forEach(t),Rs.forEach(t),eBe=i(f),gi=n(f,"H2",{class:!0});var eIe=s(gi);ch=n(eIe,"A",{id:!0,class:!0,href:!0});var BOr=s(ch);fte=n(BOr,"SPAN",{});var POr=s(fte);T(qA.$$.fragment,POr),POr.forEach(t),BOr.forEach(t),zso=i(eIe),mte=n(eIe,"SPAN",{});var IOr=s(mte);Qso=r(IOr,"AutoProcessor"),IOr.forEach(t),eIe.forEach(t),oBe=i(f),yo=n(f,"DIV",{class:!0});var Bs=s(yo);T(NA.$$.fragment,Bs),Wso=i(Bs),jA=n(Bs,"P",{});var oIe=s(jA);Hso=r(oIe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),$B=n(oIe,"A",{href:!0});var qOr=s($B);Uso=r(qOr,"AutoProcessor.from_pretrained()"),qOr.forEach(t),Jso=r(oIe," class method."),oIe.forEach(t),Yso=i(Bs),DA=n(Bs,"P",{});var rIe=s(DA);Kso=r(rIe,"This class cannot be instantiated directly using "),gte=n(rIe,"CODE",{});var NOr=s(gte);Zso=r(NOr,"__init__()"),NOr.forEach(t),elo=r(rIe," (throws an error)."),rIe.forEach(t),olo=i(Bs),We=n(Bs,"DIV",{class:!0});var Ut=s(We);T(GA.$$.fragment,Ut),rlo=i(Ut),hte=n(Ut,"P",{});var jOr=s(hte);tlo=r(jOr,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),jOr.forEach(t),alo=i(Ut),hi=n(Ut,"P",{});var eY=s(hi);nlo=r(eY,"The processor class to instantiate is selected based on the "),pte=n(eY,"CODE",{});var DOr=s(pte);slo=r(DOr,"model_type"),DOr.forEach(t),llo=r(eY,` property of the config object (either
passed as an argument or loaded from `),ute=n(eY,"CODE",{});var GOr=s(ute);ilo=r(GOr,"pretrained_model_name_or_path"),GOr.forEach(t),dlo=r(eY," if possible):"),eY.forEach(t),clo=i(Ut),be=n(Ut,"UL",{});var Fe=s(be);fh=n(Fe,"LI",{});var GEe=s(fh);_te=n(GEe,"STRONG",{});var OOr=s(_te);flo=r(OOr,"clip"),OOr.forEach(t),mlo=r(GEe," \u2014 "),kB=n(GEe,"A",{href:!0});var VOr=s(kB);glo=r(VOr,"CLIPProcessor"),VOr.forEach(t),hlo=r(GEe," (CLIP model)"),GEe.forEach(t),plo=i(Fe),mh=n(Fe,"LI",{});var OEe=s(mh);bte=n(OEe,"STRONG",{});var XOr=s(bte);ulo=r(XOr,"layoutlmv2"),XOr.forEach(t),_lo=r(OEe," \u2014 "),SB=n(OEe,"A",{href:!0});var zOr=s(SB);blo=r(zOr,"LayoutLMv2Processor"),zOr.forEach(t),vlo=r(OEe," (LayoutLMv2 model)"),OEe.forEach(t),Flo=i(Fe),gh=n(Fe,"LI",{});var VEe=s(gh);vte=n(VEe,"STRONG",{});var QOr=s(vte);Tlo=r(QOr,"layoutxlm"),QOr.forEach(t),Mlo=r(VEe," \u2014 "),RB=n(VEe,"A",{href:!0});var WOr=s(RB);Elo=r(WOr,"LayoutXLMProcessor"),WOr.forEach(t),Clo=r(VEe," (LayoutXLM model)"),VEe.forEach(t),wlo=i(Fe),hh=n(Fe,"LI",{});var XEe=s(hh);Fte=n(XEe,"STRONG",{});var HOr=s(Fte);Alo=r(HOr,"sew"),HOr.forEach(t),ylo=r(XEe," \u2014 "),BB=n(XEe,"A",{href:!0});var UOr=s(BB);Llo=r(UOr,"Wav2Vec2Processor"),UOr.forEach(t),xlo=r(XEe," (SEW model)"),XEe.forEach(t),$lo=i(Fe),ph=n(Fe,"LI",{});var zEe=s(ph);Tte=n(zEe,"STRONG",{});var JOr=s(Tte);klo=r(JOr,"sew-d"),JOr.forEach(t),Slo=r(zEe," \u2014 "),PB=n(zEe,"A",{href:!0});var YOr=s(PB);Rlo=r(YOr,"Wav2Vec2Processor"),YOr.forEach(t),Blo=r(zEe," (SEW-D model)"),zEe.forEach(t),Plo=i(Fe),uh=n(Fe,"LI",{});var QEe=s(uh);Mte=n(QEe,"STRONG",{});var KOr=s(Mte);Ilo=r(KOr,"speech_to_text"),KOr.forEach(t),qlo=r(QEe," \u2014 "),IB=n(QEe,"A",{href:!0});var ZOr=s(IB);Nlo=r(ZOr,"Speech2TextProcessor"),ZOr.forEach(t),jlo=r(QEe," (Speech2Text model)"),QEe.forEach(t),Dlo=i(Fe),_h=n(Fe,"LI",{});var WEe=s(_h);Ete=n(WEe,"STRONG",{});var eVr=s(Ete);Glo=r(eVr,"speech_to_text_2"),eVr.forEach(t),Olo=r(WEe," \u2014 "),qB=n(WEe,"A",{href:!0});var oVr=s(qB);Vlo=r(oVr,"Speech2Text2Processor"),oVr.forEach(t),Xlo=r(WEe," (Speech2Text2 model)"),WEe.forEach(t),zlo=i(Fe),bh=n(Fe,"LI",{});var HEe=s(bh);Cte=n(HEe,"STRONG",{});var rVr=s(Cte);Qlo=r(rVr,"trocr"),rVr.forEach(t),Wlo=r(HEe," \u2014 "),NB=n(HEe,"A",{href:!0});var tVr=s(NB);Hlo=r(tVr,"TrOCRProcessor"),tVr.forEach(t),Ulo=r(HEe," (TrOCR model)"),HEe.forEach(t),Jlo=i(Fe),vh=n(Fe,"LI",{});var UEe=s(vh);wte=n(UEe,"STRONG",{});var aVr=s(wte);Ylo=r(aVr,"unispeech"),aVr.forEach(t),Klo=r(UEe," \u2014 "),jB=n(UEe,"A",{href:!0});var nVr=s(jB);Zlo=r(nVr,"Wav2Vec2Processor"),nVr.forEach(t),eio=r(UEe," (UniSpeech model)"),UEe.forEach(t),oio=i(Fe),Fh=n(Fe,"LI",{});var JEe=s(Fh);Ate=n(JEe,"STRONG",{});var sVr=s(Ate);rio=r(sVr,"unispeech-sat"),sVr.forEach(t),tio=r(JEe," \u2014 "),DB=n(JEe,"A",{href:!0});var lVr=s(DB);aio=r(lVr,"Wav2Vec2Processor"),lVr.forEach(t),nio=r(JEe," (UniSpeechSat model)"),JEe.forEach(t),sio=i(Fe),Th=n(Fe,"LI",{});var YEe=s(Th);yte=n(YEe,"STRONG",{});var iVr=s(yte);lio=r(iVr,"vilt"),iVr.forEach(t),iio=r(YEe," \u2014 "),GB=n(YEe,"A",{href:!0});var dVr=s(GB);dio=r(dVr,"ViltProcessor"),dVr.forEach(t),cio=r(YEe," (ViLT model)"),YEe.forEach(t),fio=i(Fe),Mh=n(Fe,"LI",{});var KEe=s(Mh);Lte=n(KEe,"STRONG",{});var cVr=s(Lte);mio=r(cVr,"vision-text-dual-encoder"),cVr.forEach(t),gio=r(KEe," \u2014 "),OB=n(KEe,"A",{href:!0});var fVr=s(OB);hio=r(fVr,"VisionTextDualEncoderProcessor"),fVr.forEach(t),pio=r(KEe," (VisionTextDualEncoder model)"),KEe.forEach(t),uio=i(Fe),Eh=n(Fe,"LI",{});var ZEe=s(Eh);xte=n(ZEe,"STRONG",{});var mVr=s(xte);_io=r(mVr,"wav2vec2"),mVr.forEach(t),bio=r(ZEe," \u2014 "),VB=n(ZEe,"A",{href:!0});var gVr=s(VB);vio=r(gVr,"Wav2Vec2Processor"),gVr.forEach(t),Fio=r(ZEe," (Wav2Vec2 model)"),ZEe.forEach(t),Tio=i(Fe),Ch=n(Fe,"LI",{});var eCe=s(Ch);$te=n(eCe,"STRONG",{});var hVr=s($te);Mio=r(hVr,"wavlm"),hVr.forEach(t),Eio=r(eCe," \u2014 "),XB=n(eCe,"A",{href:!0});var pVr=s(XB);Cio=r(pVr,"Wav2Vec2Processor"),pVr.forEach(t),wio=r(eCe," (WavLM model)"),eCe.forEach(t),Fe.forEach(t),Aio=i(Ut),T(wh.$$.fragment,Ut),yio=i(Ut),T(Ah.$$.fragment,Ut),Ut.forEach(t),Lio=i(Bs),yh=n(Bs,"DIV",{class:!0});var tIe=s(yh);T(OA.$$.fragment,tIe),xio=i(tIe),kte=n(tIe,"P",{});var uVr=s(kte);$io=r(uVr,"Register a new processor for this class."),uVr.forEach(t),tIe.forEach(t),Bs.forEach(t),rBe=i(f),pi=n(f,"H2",{class:!0});var aIe=s(pi);Lh=n(aIe,"A",{id:!0,class:!0,href:!0});var _Vr=s(Lh);Ste=n(_Vr,"SPAN",{});var bVr=s(Ste);T(VA.$$.fragment,bVr),bVr.forEach(t),_Vr.forEach(t),kio=i(aIe),Rte=n(aIe,"SPAN",{});var vVr=s(Rte);Sio=r(vVr,"AutoModel"),vVr.forEach(t),aIe.forEach(t),tBe=i(f),Lo=n(f,"DIV",{class:!0});var Ps=s(Lo);T(XA.$$.fragment,Ps),Rio=i(Ps),ui=n(Ps,"P",{});var oY=s(ui);Bio=r(oY,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),zB=n(oY,"A",{href:!0});var FVr=s(zB);Pio=r(FVr,"from_pretrained()"),FVr.forEach(t),Iio=r(oY," class method or the "),QB=n(oY,"A",{href:!0});var TVr=s(QB);qio=r(TVr,"from_config()"),TVr.forEach(t),Nio=r(oY,` class
method.`),oY.forEach(t),jio=i(Ps),zA=n(Ps,"P",{});var nIe=s(zA);Dio=r(nIe,"This class cannot be instantiated directly using "),Bte=n(nIe,"CODE",{});var MVr=s(Bte);Gio=r(MVr,"__init__()"),MVr.forEach(t),Oio=r(nIe," (throws an error)."),nIe.forEach(t),Vio=i(Ps),Zr=n(Ps,"DIV",{class:!0});var M3=s(Zr);T(QA.$$.fragment,M3),Xio=i(M3),Pte=n(M3,"P",{});var EVr=s(Pte);zio=r(EVr,"Instantiates one of the base model classes of the library from a configuration."),EVr.forEach(t),Qio=i(M3),_i=n(M3,"P",{});var rY=s(_i);Wio=r(rY,`Note:
Loading a model from its configuration file does `),Ite=n(rY,"STRONG",{});var CVr=s(Ite);Hio=r(CVr,"not"),CVr.forEach(t),Uio=r(rY,` load the model weights. It only affects the
model\u2019s configuration. Use `),WB=n(rY,"A",{href:!0});var wVr=s(WB);Jio=r(wVr,"from_pretrained()"),wVr.forEach(t),Yio=r(rY," to load the model weights."),rY.forEach(t),Kio=i(M3),T(xh.$$.fragment,M3),M3.forEach(t),Zio=i(Ps),He=n(Ps,"DIV",{class:!0});var Jt=s(He);T(WA.$$.fragment,Jt),edo=i(Jt),qte=n(Jt,"P",{});var AVr=s(qte);odo=r(AVr,"Instantiate one of the base model classes of the library from a pretrained model."),AVr.forEach(t),rdo=i(Jt),Ea=n(Jt,"P",{});var E3=s(Ea);tdo=r(E3,"The model class to instantiate is selected based on the "),Nte=n(E3,"CODE",{});var yVr=s(Nte);ado=r(yVr,"model_type"),yVr.forEach(t),ndo=r(E3,` property of the config object (either
passed as an argument or loaded from `),jte=n(E3,"CODE",{});var LVr=s(jte);sdo=r(LVr,"pretrained_model_name_or_path"),LVr.forEach(t),ldo=r(E3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dte=n(E3,"CODE",{});var xVr=s(Dte);ido=r(xVr,"pretrained_model_name_or_path"),xVr.forEach(t),ddo=r(E3,":"),E3.forEach(t),cdo=i(Jt),x=n(Jt,"UL",{});var $=s(x);$h=n($,"LI",{});var oCe=s($h);Gte=n(oCe,"STRONG",{});var $Vr=s(Gte);fdo=r($Vr,"albert"),$Vr.forEach(t),mdo=r(oCe," \u2014 "),HB=n(oCe,"A",{href:!0});var kVr=s(HB);gdo=r(kVr,"AlbertModel"),kVr.forEach(t),hdo=r(oCe," (ALBERT model)"),oCe.forEach(t),pdo=i($),kh=n($,"LI",{});var rCe=s(kh);Ote=n(rCe,"STRONG",{});var SVr=s(Ote);udo=r(SVr,"bart"),SVr.forEach(t),_do=r(rCe," \u2014 "),UB=n(rCe,"A",{href:!0});var RVr=s(UB);bdo=r(RVr,"BartModel"),RVr.forEach(t),vdo=r(rCe," (BART model)"),rCe.forEach(t),Fdo=i($),Sh=n($,"LI",{});var tCe=s(Sh);Vte=n(tCe,"STRONG",{});var BVr=s(Vte);Tdo=r(BVr,"beit"),BVr.forEach(t),Mdo=r(tCe," \u2014 "),JB=n(tCe,"A",{href:!0});var PVr=s(JB);Edo=r(PVr,"BeitModel"),PVr.forEach(t),Cdo=r(tCe," (BEiT model)"),tCe.forEach(t),wdo=i($),Rh=n($,"LI",{});var aCe=s(Rh);Xte=n(aCe,"STRONG",{});var IVr=s(Xte);Ado=r(IVr,"bert"),IVr.forEach(t),ydo=r(aCe," \u2014 "),YB=n(aCe,"A",{href:!0});var qVr=s(YB);Ldo=r(qVr,"BertModel"),qVr.forEach(t),xdo=r(aCe," (BERT model)"),aCe.forEach(t),$do=i($),Bh=n($,"LI",{});var nCe=s(Bh);zte=n(nCe,"STRONG",{});var NVr=s(zte);kdo=r(NVr,"bert-generation"),NVr.forEach(t),Sdo=r(nCe," \u2014 "),KB=n(nCe,"A",{href:!0});var jVr=s(KB);Rdo=r(jVr,"BertGenerationEncoder"),jVr.forEach(t),Bdo=r(nCe," (Bert Generation model)"),nCe.forEach(t),Pdo=i($),Ph=n($,"LI",{});var sCe=s(Ph);Qte=n(sCe,"STRONG",{});var DVr=s(Qte);Ido=r(DVr,"big_bird"),DVr.forEach(t),qdo=r(sCe," \u2014 "),ZB=n(sCe,"A",{href:!0});var GVr=s(ZB);Ndo=r(GVr,"BigBirdModel"),GVr.forEach(t),jdo=r(sCe," (BigBird model)"),sCe.forEach(t),Ddo=i($),Ih=n($,"LI",{});var lCe=s(Ih);Wte=n(lCe,"STRONG",{});var OVr=s(Wte);Gdo=r(OVr,"bigbird_pegasus"),OVr.forEach(t),Odo=r(lCe," \u2014 "),eP=n(lCe,"A",{href:!0});var VVr=s(eP);Vdo=r(VVr,"BigBirdPegasusModel"),VVr.forEach(t),Xdo=r(lCe," (BigBirdPegasus model)"),lCe.forEach(t),zdo=i($),qh=n($,"LI",{});var iCe=s(qh);Hte=n(iCe,"STRONG",{});var XVr=s(Hte);Qdo=r(XVr,"blenderbot"),XVr.forEach(t),Wdo=r(iCe," \u2014 "),oP=n(iCe,"A",{href:!0});var zVr=s(oP);Hdo=r(zVr,"BlenderbotModel"),zVr.forEach(t),Udo=r(iCe," (Blenderbot model)"),iCe.forEach(t),Jdo=i($),Nh=n($,"LI",{});var dCe=s(Nh);Ute=n(dCe,"STRONG",{});var QVr=s(Ute);Ydo=r(QVr,"blenderbot-small"),QVr.forEach(t),Kdo=r(dCe," \u2014 "),rP=n(dCe,"A",{href:!0});var WVr=s(rP);Zdo=r(WVr,"BlenderbotSmallModel"),WVr.forEach(t),eco=r(dCe," (BlenderbotSmall model)"),dCe.forEach(t),oco=i($),jh=n($,"LI",{});var cCe=s(jh);Jte=n(cCe,"STRONG",{});var HVr=s(Jte);rco=r(HVr,"camembert"),HVr.forEach(t),tco=r(cCe," \u2014 "),tP=n(cCe,"A",{href:!0});var UVr=s(tP);aco=r(UVr,"CamembertModel"),UVr.forEach(t),nco=r(cCe," (CamemBERT model)"),cCe.forEach(t),sco=i($),Dh=n($,"LI",{});var fCe=s(Dh);Yte=n(fCe,"STRONG",{});var JVr=s(Yte);lco=r(JVr,"canine"),JVr.forEach(t),ico=r(fCe," \u2014 "),aP=n(fCe,"A",{href:!0});var YVr=s(aP);dco=r(YVr,"CanineModel"),YVr.forEach(t),cco=r(fCe," (Canine model)"),fCe.forEach(t),fco=i($),Gh=n($,"LI",{});var mCe=s(Gh);Kte=n(mCe,"STRONG",{});var KVr=s(Kte);mco=r(KVr,"clip"),KVr.forEach(t),gco=r(mCe," \u2014 "),nP=n(mCe,"A",{href:!0});var ZVr=s(nP);hco=r(ZVr,"CLIPModel"),ZVr.forEach(t),pco=r(mCe," (CLIP model)"),mCe.forEach(t),uco=i($),Oh=n($,"LI",{});var gCe=s(Oh);Zte=n(gCe,"STRONG",{});var eXr=s(Zte);_co=r(eXr,"convbert"),eXr.forEach(t),bco=r(gCe," \u2014 "),sP=n(gCe,"A",{href:!0});var oXr=s(sP);vco=r(oXr,"ConvBertModel"),oXr.forEach(t),Fco=r(gCe," (ConvBERT model)"),gCe.forEach(t),Tco=i($),Vh=n($,"LI",{});var hCe=s(Vh);eae=n(hCe,"STRONG",{});var rXr=s(eae);Mco=r(rXr,"convnext"),rXr.forEach(t),Eco=r(hCe," \u2014 "),lP=n(hCe,"A",{href:!0});var tXr=s(lP);Cco=r(tXr,"ConvNextModel"),tXr.forEach(t),wco=r(hCe," (ConvNext model)"),hCe.forEach(t),Aco=i($),Xh=n($,"LI",{});var pCe=s(Xh);oae=n(pCe,"STRONG",{});var aXr=s(oae);yco=r(aXr,"ctrl"),aXr.forEach(t),Lco=r(pCe," \u2014 "),iP=n(pCe,"A",{href:!0});var nXr=s(iP);xco=r(nXr,"CTRLModel"),nXr.forEach(t),$co=r(pCe," (CTRL model)"),pCe.forEach(t),kco=i($),zh=n($,"LI",{});var uCe=s(zh);rae=n(uCe,"STRONG",{});var sXr=s(rae);Sco=r(sXr,"data2vec-audio"),sXr.forEach(t),Rco=r(uCe," \u2014 "),dP=n(uCe,"A",{href:!0});var lXr=s(dP);Bco=r(lXr,"Data2VecAudioModel"),lXr.forEach(t),Pco=r(uCe," (Data2VecAudio model)"),uCe.forEach(t),Ico=i($),Qh=n($,"LI",{});var _Ce=s(Qh);tae=n(_Ce,"STRONG",{});var iXr=s(tae);qco=r(iXr,"data2vec-text"),iXr.forEach(t),Nco=r(_Ce," \u2014 "),cP=n(_Ce,"A",{href:!0});var dXr=s(cP);jco=r(dXr,"Data2VecTextModel"),dXr.forEach(t),Dco=r(_Ce," (Data2VecText model)"),_Ce.forEach(t),Gco=i($),Wh=n($,"LI",{});var bCe=s(Wh);aae=n(bCe,"STRONG",{});var cXr=s(aae);Oco=r(cXr,"data2vec-vision"),cXr.forEach(t),Vco=r(bCe," \u2014 "),fP=n(bCe,"A",{href:!0});var fXr=s(fP);Xco=r(fXr,"Data2VecVisionModel"),fXr.forEach(t),zco=r(bCe," (Data2VecVision model)"),bCe.forEach(t),Qco=i($),Hh=n($,"LI",{});var vCe=s(Hh);nae=n(vCe,"STRONG",{});var mXr=s(nae);Wco=r(mXr,"deberta"),mXr.forEach(t),Hco=r(vCe," \u2014 "),mP=n(vCe,"A",{href:!0});var gXr=s(mP);Uco=r(gXr,"DebertaModel"),gXr.forEach(t),Jco=r(vCe," (DeBERTa model)"),vCe.forEach(t),Yco=i($),Uh=n($,"LI",{});var FCe=s(Uh);sae=n(FCe,"STRONG",{});var hXr=s(sae);Kco=r(hXr,"deberta-v2"),hXr.forEach(t),Zco=r(FCe," \u2014 "),gP=n(FCe,"A",{href:!0});var pXr=s(gP);efo=r(pXr,"DebertaV2Model"),pXr.forEach(t),ofo=r(FCe," (DeBERTa-v2 model)"),FCe.forEach(t),rfo=i($),Jh=n($,"LI",{});var TCe=s(Jh);lae=n(TCe,"STRONG",{});var uXr=s(lae);tfo=r(uXr,"decision_transformer"),uXr.forEach(t),afo=r(TCe," \u2014 "),hP=n(TCe,"A",{href:!0});var _Xr=s(hP);nfo=r(_Xr,"DecisionTransformerModel"),_Xr.forEach(t),sfo=r(TCe," (Decision Transformer model)"),TCe.forEach(t),lfo=i($),Yh=n($,"LI",{});var MCe=s(Yh);iae=n(MCe,"STRONG",{});var bXr=s(iae);ifo=r(bXr,"deit"),bXr.forEach(t),dfo=r(MCe," \u2014 "),pP=n(MCe,"A",{href:!0});var vXr=s(pP);cfo=r(vXr,"DeiTModel"),vXr.forEach(t),ffo=r(MCe," (DeiT model)"),MCe.forEach(t),mfo=i($),Kh=n($,"LI",{});var ECe=s(Kh);dae=n(ECe,"STRONG",{});var FXr=s(dae);gfo=r(FXr,"detr"),FXr.forEach(t),hfo=r(ECe," \u2014 "),uP=n(ECe,"A",{href:!0});var TXr=s(uP);pfo=r(TXr,"DetrModel"),TXr.forEach(t),ufo=r(ECe," (DETR model)"),ECe.forEach(t),_fo=i($),Zh=n($,"LI",{});var CCe=s(Zh);cae=n(CCe,"STRONG",{});var MXr=s(cae);bfo=r(MXr,"distilbert"),MXr.forEach(t),vfo=r(CCe," \u2014 "),_P=n(CCe,"A",{href:!0});var EXr=s(_P);Ffo=r(EXr,"DistilBertModel"),EXr.forEach(t),Tfo=r(CCe," (DistilBERT model)"),CCe.forEach(t),Mfo=i($),ep=n($,"LI",{});var wCe=s(ep);fae=n(wCe,"STRONG",{});var CXr=s(fae);Efo=r(CXr,"dpr"),CXr.forEach(t),Cfo=r(wCe," \u2014 "),bP=n(wCe,"A",{href:!0});var wXr=s(bP);wfo=r(wXr,"DPRQuestionEncoder"),wXr.forEach(t),Afo=r(wCe," (DPR model)"),wCe.forEach(t),yfo=i($),op=n($,"LI",{});var ACe=s(op);mae=n(ACe,"STRONG",{});var AXr=s(mae);Lfo=r(AXr,"dpt"),AXr.forEach(t),xfo=r(ACe," \u2014 "),vP=n(ACe,"A",{href:!0});var yXr=s(vP);$fo=r(yXr,"DPTModel"),yXr.forEach(t),kfo=r(ACe," (DPT model)"),ACe.forEach(t),Sfo=i($),rp=n($,"LI",{});var yCe=s(rp);gae=n(yCe,"STRONG",{});var LXr=s(gae);Rfo=r(LXr,"electra"),LXr.forEach(t),Bfo=r(yCe," \u2014 "),FP=n(yCe,"A",{href:!0});var xXr=s(FP);Pfo=r(xXr,"ElectraModel"),xXr.forEach(t),Ifo=r(yCe," (ELECTRA model)"),yCe.forEach(t),qfo=i($),tp=n($,"LI",{});var LCe=s(tp);hae=n(LCe,"STRONG",{});var $Xr=s(hae);Nfo=r($Xr,"flaubert"),$Xr.forEach(t),jfo=r(LCe," \u2014 "),TP=n(LCe,"A",{href:!0});var kXr=s(TP);Dfo=r(kXr,"FlaubertModel"),kXr.forEach(t),Gfo=r(LCe," (FlauBERT model)"),LCe.forEach(t),Ofo=i($),ap=n($,"LI",{});var xCe=s(ap);pae=n(xCe,"STRONG",{});var SXr=s(pae);Vfo=r(SXr,"fnet"),SXr.forEach(t),Xfo=r(xCe," \u2014 "),MP=n(xCe,"A",{href:!0});var RXr=s(MP);zfo=r(RXr,"FNetModel"),RXr.forEach(t),Qfo=r(xCe," (FNet model)"),xCe.forEach(t),Wfo=i($),np=n($,"LI",{});var $Ce=s(np);uae=n($Ce,"STRONG",{});var BXr=s(uae);Hfo=r(BXr,"fsmt"),BXr.forEach(t),Ufo=r($Ce," \u2014 "),EP=n($Ce,"A",{href:!0});var PXr=s(EP);Jfo=r(PXr,"FSMTModel"),PXr.forEach(t),Yfo=r($Ce," (FairSeq Machine-Translation model)"),$Ce.forEach(t),Kfo=i($),Ls=n($,"LI",{});var w7=s(Ls);_ae=n(w7,"STRONG",{});var IXr=s(_ae);Zfo=r(IXr,"funnel"),IXr.forEach(t),emo=r(w7," \u2014 "),CP=n(w7,"A",{href:!0});var qXr=s(CP);omo=r(qXr,"FunnelModel"),qXr.forEach(t),rmo=r(w7," or "),wP=n(w7,"A",{href:!0});var NXr=s(wP);tmo=r(NXr,"FunnelBaseModel"),NXr.forEach(t),amo=r(w7," (Funnel Transformer model)"),w7.forEach(t),nmo=i($),sp=n($,"LI",{});var kCe=s(sp);bae=n(kCe,"STRONG",{});var jXr=s(bae);smo=r(jXr,"glpn"),jXr.forEach(t),lmo=r(kCe," \u2014 "),AP=n(kCe,"A",{href:!0});var DXr=s(AP);imo=r(DXr,"GLPNModel"),DXr.forEach(t),dmo=r(kCe," (GLPN model)"),kCe.forEach(t),cmo=i($),lp=n($,"LI",{});var SCe=s(lp);vae=n(SCe,"STRONG",{});var GXr=s(vae);fmo=r(GXr,"gpt2"),GXr.forEach(t),mmo=r(SCe," \u2014 "),yP=n(SCe,"A",{href:!0});var OXr=s(yP);gmo=r(OXr,"GPT2Model"),OXr.forEach(t),hmo=r(SCe," (OpenAI GPT-2 model)"),SCe.forEach(t),pmo=i($),ip=n($,"LI",{});var RCe=s(ip);Fae=n(RCe,"STRONG",{});var VXr=s(Fae);umo=r(VXr,"gpt_neo"),VXr.forEach(t),_mo=r(RCe," \u2014 "),LP=n(RCe,"A",{href:!0});var XXr=s(LP);bmo=r(XXr,"GPTNeoModel"),XXr.forEach(t),vmo=r(RCe," (GPT Neo model)"),RCe.forEach(t),Fmo=i($),dp=n($,"LI",{});var BCe=s(dp);Tae=n(BCe,"STRONG",{});var zXr=s(Tae);Tmo=r(zXr,"gptj"),zXr.forEach(t),Mmo=r(BCe," \u2014 "),xP=n(BCe,"A",{href:!0});var QXr=s(xP);Emo=r(QXr,"GPTJModel"),QXr.forEach(t),Cmo=r(BCe," (GPT-J model)"),BCe.forEach(t),wmo=i($),cp=n($,"LI",{});var PCe=s(cp);Mae=n(PCe,"STRONG",{});var WXr=s(Mae);Amo=r(WXr,"hubert"),WXr.forEach(t),ymo=r(PCe," \u2014 "),$P=n(PCe,"A",{href:!0});var HXr=s($P);Lmo=r(HXr,"HubertModel"),HXr.forEach(t),xmo=r(PCe," (Hubert model)"),PCe.forEach(t),$mo=i($),fp=n($,"LI",{});var ICe=s(fp);Eae=n(ICe,"STRONG",{});var UXr=s(Eae);kmo=r(UXr,"ibert"),UXr.forEach(t),Smo=r(ICe," \u2014 "),kP=n(ICe,"A",{href:!0});var JXr=s(kP);Rmo=r(JXr,"IBertModel"),JXr.forEach(t),Bmo=r(ICe," (I-BERT model)"),ICe.forEach(t),Pmo=i($),mp=n($,"LI",{});var qCe=s(mp);Cae=n(qCe,"STRONG",{});var YXr=s(Cae);Imo=r(YXr,"imagegpt"),YXr.forEach(t),qmo=r(qCe," \u2014 "),SP=n(qCe,"A",{href:!0});var KXr=s(SP);Nmo=r(KXr,"ImageGPTModel"),KXr.forEach(t),jmo=r(qCe," (ImageGPT model)"),qCe.forEach(t),Dmo=i($),gp=n($,"LI",{});var NCe=s(gp);wae=n(NCe,"STRONG",{});var ZXr=s(wae);Gmo=r(ZXr,"layoutlm"),ZXr.forEach(t),Omo=r(NCe," \u2014 "),RP=n(NCe,"A",{href:!0});var ezr=s(RP);Vmo=r(ezr,"LayoutLMModel"),ezr.forEach(t),Xmo=r(NCe," (LayoutLM model)"),NCe.forEach(t),zmo=i($),hp=n($,"LI",{});var jCe=s(hp);Aae=n(jCe,"STRONG",{});var ozr=s(Aae);Qmo=r(ozr,"layoutlmv2"),ozr.forEach(t),Wmo=r(jCe," \u2014 "),BP=n(jCe,"A",{href:!0});var rzr=s(BP);Hmo=r(rzr,"LayoutLMv2Model"),rzr.forEach(t),Umo=r(jCe," (LayoutLMv2 model)"),jCe.forEach(t),Jmo=i($),pp=n($,"LI",{});var DCe=s(pp);yae=n(DCe,"STRONG",{});var tzr=s(yae);Ymo=r(tzr,"led"),tzr.forEach(t),Kmo=r(DCe," \u2014 "),PP=n(DCe,"A",{href:!0});var azr=s(PP);Zmo=r(azr,"LEDModel"),azr.forEach(t),ego=r(DCe," (LED model)"),DCe.forEach(t),ogo=i($),up=n($,"LI",{});var GCe=s(up);Lae=n(GCe,"STRONG",{});var nzr=s(Lae);rgo=r(nzr,"longformer"),nzr.forEach(t),tgo=r(GCe," \u2014 "),IP=n(GCe,"A",{href:!0});var szr=s(IP);ago=r(szr,"LongformerModel"),szr.forEach(t),ngo=r(GCe," (Longformer model)"),GCe.forEach(t),sgo=i($),_p=n($,"LI",{});var OCe=s(_p);xae=n(OCe,"STRONG",{});var lzr=s(xae);lgo=r(lzr,"luke"),lzr.forEach(t),igo=r(OCe," \u2014 "),qP=n(OCe,"A",{href:!0});var izr=s(qP);dgo=r(izr,"LukeModel"),izr.forEach(t),cgo=r(OCe," (LUKE model)"),OCe.forEach(t),fgo=i($),bp=n($,"LI",{});var VCe=s(bp);$ae=n(VCe,"STRONG",{});var dzr=s($ae);mgo=r(dzr,"lxmert"),dzr.forEach(t),ggo=r(VCe," \u2014 "),NP=n(VCe,"A",{href:!0});var czr=s(NP);hgo=r(czr,"LxmertModel"),czr.forEach(t),pgo=r(VCe," (LXMERT model)"),VCe.forEach(t),ugo=i($),vp=n($,"LI",{});var XCe=s(vp);kae=n(XCe,"STRONG",{});var fzr=s(kae);_go=r(fzr,"m2m_100"),fzr.forEach(t),bgo=r(XCe," \u2014 "),jP=n(XCe,"A",{href:!0});var mzr=s(jP);vgo=r(mzr,"M2M100Model"),mzr.forEach(t),Fgo=r(XCe," (M2M100 model)"),XCe.forEach(t),Tgo=i($),Fp=n($,"LI",{});var zCe=s(Fp);Sae=n(zCe,"STRONG",{});var gzr=s(Sae);Mgo=r(gzr,"marian"),gzr.forEach(t),Ego=r(zCe," \u2014 "),DP=n(zCe,"A",{href:!0});var hzr=s(DP);Cgo=r(hzr,"MarianModel"),hzr.forEach(t),wgo=r(zCe," (Marian model)"),zCe.forEach(t),Ago=i($),Tp=n($,"LI",{});var QCe=s(Tp);Rae=n(QCe,"STRONG",{});var pzr=s(Rae);ygo=r(pzr,"maskformer"),pzr.forEach(t),Lgo=r(QCe," \u2014 "),GP=n(QCe,"A",{href:!0});var uzr=s(GP);xgo=r(uzr,"MaskFormerModel"),uzr.forEach(t),$go=r(QCe," (MaskFormer model)"),QCe.forEach(t),kgo=i($),Mp=n($,"LI",{});var WCe=s(Mp);Bae=n(WCe,"STRONG",{});var _zr=s(Bae);Sgo=r(_zr,"mbart"),_zr.forEach(t),Rgo=r(WCe," \u2014 "),OP=n(WCe,"A",{href:!0});var bzr=s(OP);Bgo=r(bzr,"MBartModel"),bzr.forEach(t),Pgo=r(WCe," (mBART model)"),WCe.forEach(t),Igo=i($),Ep=n($,"LI",{});var HCe=s(Ep);Pae=n(HCe,"STRONG",{});var vzr=s(Pae);qgo=r(vzr,"megatron-bert"),vzr.forEach(t),Ngo=r(HCe," \u2014 "),VP=n(HCe,"A",{href:!0});var Fzr=s(VP);jgo=r(Fzr,"MegatronBertModel"),Fzr.forEach(t),Dgo=r(HCe," (MegatronBert model)"),HCe.forEach(t),Ggo=i($),Cp=n($,"LI",{});var UCe=s(Cp);Iae=n(UCe,"STRONG",{});var Tzr=s(Iae);Ogo=r(Tzr,"mobilebert"),Tzr.forEach(t),Vgo=r(UCe," \u2014 "),XP=n(UCe,"A",{href:!0});var Mzr=s(XP);Xgo=r(Mzr,"MobileBertModel"),Mzr.forEach(t),zgo=r(UCe," (MobileBERT model)"),UCe.forEach(t),Qgo=i($),wp=n($,"LI",{});var JCe=s(wp);qae=n(JCe,"STRONG",{});var Ezr=s(qae);Wgo=r(Ezr,"mpnet"),Ezr.forEach(t),Hgo=r(JCe," \u2014 "),zP=n(JCe,"A",{href:!0});var Czr=s(zP);Ugo=r(Czr,"MPNetModel"),Czr.forEach(t),Jgo=r(JCe," (MPNet model)"),JCe.forEach(t),Ygo=i($),Ap=n($,"LI",{});var YCe=s(Ap);Nae=n(YCe,"STRONG",{});var wzr=s(Nae);Kgo=r(wzr,"mt5"),wzr.forEach(t),Zgo=r(YCe," \u2014 "),QP=n(YCe,"A",{href:!0});var Azr=s(QP);eho=r(Azr,"MT5Model"),Azr.forEach(t),oho=r(YCe," (mT5 model)"),YCe.forEach(t),rho=i($),yp=n($,"LI",{});var KCe=s(yp);jae=n(KCe,"STRONG",{});var yzr=s(jae);tho=r(yzr,"nystromformer"),yzr.forEach(t),aho=r(KCe," \u2014 "),WP=n(KCe,"A",{href:!0});var Lzr=s(WP);nho=r(Lzr,"NystromformerModel"),Lzr.forEach(t),sho=r(KCe," (Nystromformer model)"),KCe.forEach(t),lho=i($),Lp=n($,"LI",{});var ZCe=s(Lp);Dae=n(ZCe,"STRONG",{});var xzr=s(Dae);iho=r(xzr,"openai-gpt"),xzr.forEach(t),dho=r(ZCe," \u2014 "),HP=n(ZCe,"A",{href:!0});var $zr=s(HP);cho=r($zr,"OpenAIGPTModel"),$zr.forEach(t),fho=r(ZCe," (OpenAI GPT model)"),ZCe.forEach(t),mho=i($),xp=n($,"LI",{});var e3e=s(xp);Gae=n(e3e,"STRONG",{});var kzr=s(Gae);gho=r(kzr,"pegasus"),kzr.forEach(t),hho=r(e3e," \u2014 "),UP=n(e3e,"A",{href:!0});var Szr=s(UP);pho=r(Szr,"PegasusModel"),Szr.forEach(t),uho=r(e3e," (Pegasus model)"),e3e.forEach(t),_ho=i($),$p=n($,"LI",{});var o3e=s($p);Oae=n(o3e,"STRONG",{});var Rzr=s(Oae);bho=r(Rzr,"perceiver"),Rzr.forEach(t),vho=r(o3e," \u2014 "),JP=n(o3e,"A",{href:!0});var Bzr=s(JP);Fho=r(Bzr,"PerceiverModel"),Bzr.forEach(t),Tho=r(o3e," (Perceiver model)"),o3e.forEach(t),Mho=i($),kp=n($,"LI",{});var r3e=s(kp);Vae=n(r3e,"STRONG",{});var Pzr=s(Vae);Eho=r(Pzr,"plbart"),Pzr.forEach(t),Cho=r(r3e," \u2014 "),YP=n(r3e,"A",{href:!0});var Izr=s(YP);who=r(Izr,"PLBartModel"),Izr.forEach(t),Aho=r(r3e," (PLBart model)"),r3e.forEach(t),yho=i($),Sp=n($,"LI",{});var t3e=s(Sp);Xae=n(t3e,"STRONG",{});var qzr=s(Xae);Lho=r(qzr,"poolformer"),qzr.forEach(t),xho=r(t3e," \u2014 "),KP=n(t3e,"A",{href:!0});var Nzr=s(KP);$ho=r(Nzr,"PoolFormerModel"),Nzr.forEach(t),kho=r(t3e," (PoolFormer model)"),t3e.forEach(t),Sho=i($),Rp=n($,"LI",{});var a3e=s(Rp);zae=n(a3e,"STRONG",{});var jzr=s(zae);Rho=r(jzr,"prophetnet"),jzr.forEach(t),Bho=r(a3e," \u2014 "),ZP=n(a3e,"A",{href:!0});var Dzr=s(ZP);Pho=r(Dzr,"ProphetNetModel"),Dzr.forEach(t),Iho=r(a3e," (ProphetNet model)"),a3e.forEach(t),qho=i($),Bp=n($,"LI",{});var n3e=s(Bp);Qae=n(n3e,"STRONG",{});var Gzr=s(Qae);Nho=r(Gzr,"qdqbert"),Gzr.forEach(t),jho=r(n3e," \u2014 "),eI=n(n3e,"A",{href:!0});var Ozr=s(eI);Dho=r(Ozr,"QDQBertModel"),Ozr.forEach(t),Gho=r(n3e," (QDQBert model)"),n3e.forEach(t),Oho=i($),Pp=n($,"LI",{});var s3e=s(Pp);Wae=n(s3e,"STRONG",{});var Vzr=s(Wae);Vho=r(Vzr,"reformer"),Vzr.forEach(t),Xho=r(s3e," \u2014 "),oI=n(s3e,"A",{href:!0});var Xzr=s(oI);zho=r(Xzr,"ReformerModel"),Xzr.forEach(t),Qho=r(s3e," (Reformer model)"),s3e.forEach(t),Who=i($),Ip=n($,"LI",{});var l3e=s(Ip);Hae=n(l3e,"STRONG",{});var zzr=s(Hae);Hho=r(zzr,"regnet"),zzr.forEach(t),Uho=r(l3e," \u2014 "),rI=n(l3e,"A",{href:!0});var Qzr=s(rI);Jho=r(Qzr,"RegNetModel"),Qzr.forEach(t),Yho=r(l3e," (RegNet model)"),l3e.forEach(t),Kho=i($),qp=n($,"LI",{});var i3e=s(qp);Uae=n(i3e,"STRONG",{});var Wzr=s(Uae);Zho=r(Wzr,"rembert"),Wzr.forEach(t),epo=r(i3e," \u2014 "),tI=n(i3e,"A",{href:!0});var Hzr=s(tI);opo=r(Hzr,"RemBertModel"),Hzr.forEach(t),rpo=r(i3e," (RemBERT model)"),i3e.forEach(t),tpo=i($),Np=n($,"LI",{});var d3e=s(Np);Jae=n(d3e,"STRONG",{});var Uzr=s(Jae);apo=r(Uzr,"resnet"),Uzr.forEach(t),npo=r(d3e," \u2014 "),aI=n(d3e,"A",{href:!0});var Jzr=s(aI);spo=r(Jzr,"ResNetModel"),Jzr.forEach(t),lpo=r(d3e," (ResNet model)"),d3e.forEach(t),ipo=i($),jp=n($,"LI",{});var c3e=s(jp);Yae=n(c3e,"STRONG",{});var Yzr=s(Yae);dpo=r(Yzr,"retribert"),Yzr.forEach(t),cpo=r(c3e," \u2014 "),nI=n(c3e,"A",{href:!0});var Kzr=s(nI);fpo=r(Kzr,"RetriBertModel"),Kzr.forEach(t),mpo=r(c3e," (RetriBERT model)"),c3e.forEach(t),gpo=i($),Dp=n($,"LI",{});var f3e=s(Dp);Kae=n(f3e,"STRONG",{});var Zzr=s(Kae);hpo=r(Zzr,"roberta"),Zzr.forEach(t),ppo=r(f3e," \u2014 "),sI=n(f3e,"A",{href:!0});var eQr=s(sI);upo=r(eQr,"RobertaModel"),eQr.forEach(t),_po=r(f3e," (RoBERTa model)"),f3e.forEach(t),bpo=i($),Gp=n($,"LI",{});var m3e=s(Gp);Zae=n(m3e,"STRONG",{});var oQr=s(Zae);vpo=r(oQr,"roformer"),oQr.forEach(t),Fpo=r(m3e," \u2014 "),lI=n(m3e,"A",{href:!0});var rQr=s(lI);Tpo=r(rQr,"RoFormerModel"),rQr.forEach(t),Mpo=r(m3e," (RoFormer model)"),m3e.forEach(t),Epo=i($),Op=n($,"LI",{});var g3e=s(Op);ene=n(g3e,"STRONG",{});var tQr=s(ene);Cpo=r(tQr,"segformer"),tQr.forEach(t),wpo=r(g3e," \u2014 "),iI=n(g3e,"A",{href:!0});var aQr=s(iI);Apo=r(aQr,"SegformerModel"),aQr.forEach(t),ypo=r(g3e," (SegFormer model)"),g3e.forEach(t),Lpo=i($),Vp=n($,"LI",{});var h3e=s(Vp);one=n(h3e,"STRONG",{});var nQr=s(one);xpo=r(nQr,"sew"),nQr.forEach(t),$po=r(h3e," \u2014 "),dI=n(h3e,"A",{href:!0});var sQr=s(dI);kpo=r(sQr,"SEWModel"),sQr.forEach(t),Spo=r(h3e," (SEW model)"),h3e.forEach(t),Rpo=i($),Xp=n($,"LI",{});var p3e=s(Xp);rne=n(p3e,"STRONG",{});var lQr=s(rne);Bpo=r(lQr,"sew-d"),lQr.forEach(t),Ppo=r(p3e," \u2014 "),cI=n(p3e,"A",{href:!0});var iQr=s(cI);Ipo=r(iQr,"SEWDModel"),iQr.forEach(t),qpo=r(p3e," (SEW-D model)"),p3e.forEach(t),Npo=i($),zp=n($,"LI",{});var u3e=s(zp);tne=n(u3e,"STRONG",{});var dQr=s(tne);jpo=r(dQr,"speech_to_text"),dQr.forEach(t),Dpo=r(u3e," \u2014 "),fI=n(u3e,"A",{href:!0});var cQr=s(fI);Gpo=r(cQr,"Speech2TextModel"),cQr.forEach(t),Opo=r(u3e," (Speech2Text model)"),u3e.forEach(t),Vpo=i($),Qp=n($,"LI",{});var _3e=s(Qp);ane=n(_3e,"STRONG",{});var fQr=s(ane);Xpo=r(fQr,"splinter"),fQr.forEach(t),zpo=r(_3e," \u2014 "),mI=n(_3e,"A",{href:!0});var mQr=s(mI);Qpo=r(mQr,"SplinterModel"),mQr.forEach(t),Wpo=r(_3e," (Splinter model)"),_3e.forEach(t),Hpo=i($),Wp=n($,"LI",{});var b3e=s(Wp);nne=n(b3e,"STRONG",{});var gQr=s(nne);Upo=r(gQr,"squeezebert"),gQr.forEach(t),Jpo=r(b3e," \u2014 "),gI=n(b3e,"A",{href:!0});var hQr=s(gI);Ypo=r(hQr,"SqueezeBertModel"),hQr.forEach(t),Kpo=r(b3e," (SqueezeBERT model)"),b3e.forEach(t),Zpo=i($),Hp=n($,"LI",{});var v3e=s(Hp);sne=n(v3e,"STRONG",{});var pQr=s(sne);euo=r(pQr,"swin"),pQr.forEach(t),ouo=r(v3e," \u2014 "),hI=n(v3e,"A",{href:!0});var uQr=s(hI);ruo=r(uQr,"SwinModel"),uQr.forEach(t),tuo=r(v3e," (Swin model)"),v3e.forEach(t),auo=i($),Up=n($,"LI",{});var F3e=s(Up);lne=n(F3e,"STRONG",{});var _Qr=s(lne);nuo=r(_Qr,"t5"),_Qr.forEach(t),suo=r(F3e," \u2014 "),pI=n(F3e,"A",{href:!0});var bQr=s(pI);luo=r(bQr,"T5Model"),bQr.forEach(t),iuo=r(F3e," (T5 model)"),F3e.forEach(t),duo=i($),Jp=n($,"LI",{});var T3e=s(Jp);ine=n(T3e,"STRONG",{});var vQr=s(ine);cuo=r(vQr,"tapas"),vQr.forEach(t),fuo=r(T3e," \u2014 "),uI=n(T3e,"A",{href:!0});var FQr=s(uI);muo=r(FQr,"TapasModel"),FQr.forEach(t),guo=r(T3e," (TAPAS model)"),T3e.forEach(t),huo=i($),Yp=n($,"LI",{});var M3e=s(Yp);dne=n(M3e,"STRONG",{});var TQr=s(dne);puo=r(TQr,"transfo-xl"),TQr.forEach(t),uuo=r(M3e," \u2014 "),_I=n(M3e,"A",{href:!0});var MQr=s(_I);_uo=r(MQr,"TransfoXLModel"),MQr.forEach(t),buo=r(M3e," (Transformer-XL model)"),M3e.forEach(t),vuo=i($),Kp=n($,"LI",{});var E3e=s(Kp);cne=n(E3e,"STRONG",{});var EQr=s(cne);Fuo=r(EQr,"unispeech"),EQr.forEach(t),Tuo=r(E3e," \u2014 "),bI=n(E3e,"A",{href:!0});var CQr=s(bI);Muo=r(CQr,"UniSpeechModel"),CQr.forEach(t),Euo=r(E3e," (UniSpeech model)"),E3e.forEach(t),Cuo=i($),Zp=n($,"LI",{});var C3e=s(Zp);fne=n(C3e,"STRONG",{});var wQr=s(fne);wuo=r(wQr,"unispeech-sat"),wQr.forEach(t),Auo=r(C3e," \u2014 "),vI=n(C3e,"A",{href:!0});var AQr=s(vI);yuo=r(AQr,"UniSpeechSatModel"),AQr.forEach(t),Luo=r(C3e," (UniSpeechSat model)"),C3e.forEach(t),xuo=i($),eu=n($,"LI",{});var w3e=s(eu);mne=n(w3e,"STRONG",{});var yQr=s(mne);$uo=r(yQr,"van"),yQr.forEach(t),kuo=r(w3e," \u2014 "),FI=n(w3e,"A",{href:!0});var LQr=s(FI);Suo=r(LQr,"VanModel"),LQr.forEach(t),Ruo=r(w3e," (VAN model)"),w3e.forEach(t),Buo=i($),ou=n($,"LI",{});var A3e=s(ou);gne=n(A3e,"STRONG",{});var xQr=s(gne);Puo=r(xQr,"vilt"),xQr.forEach(t),Iuo=r(A3e," \u2014 "),TI=n(A3e,"A",{href:!0});var $Qr=s(TI);quo=r($Qr,"ViltModel"),$Qr.forEach(t),Nuo=r(A3e," (ViLT model)"),A3e.forEach(t),juo=i($),ru=n($,"LI",{});var y3e=s(ru);hne=n(y3e,"STRONG",{});var kQr=s(hne);Duo=r(kQr,"vision-text-dual-encoder"),kQr.forEach(t),Guo=r(y3e," \u2014 "),MI=n(y3e,"A",{href:!0});var SQr=s(MI);Ouo=r(SQr,"VisionTextDualEncoderModel"),SQr.forEach(t),Vuo=r(y3e," (VisionTextDualEncoder model)"),y3e.forEach(t),Xuo=i($),tu=n($,"LI",{});var L3e=s(tu);pne=n(L3e,"STRONG",{});var RQr=s(pne);zuo=r(RQr,"visual_bert"),RQr.forEach(t),Quo=r(L3e," \u2014 "),EI=n(L3e,"A",{href:!0});var BQr=s(EI);Wuo=r(BQr,"VisualBertModel"),BQr.forEach(t),Huo=r(L3e," (VisualBert model)"),L3e.forEach(t),Uuo=i($),au=n($,"LI",{});var x3e=s(au);une=n(x3e,"STRONG",{});var PQr=s(une);Juo=r(PQr,"vit"),PQr.forEach(t),Yuo=r(x3e," \u2014 "),CI=n(x3e,"A",{href:!0});var IQr=s(CI);Kuo=r(IQr,"ViTModel"),IQr.forEach(t),Zuo=r(x3e," (ViT model)"),x3e.forEach(t),e_o=i($),nu=n($,"LI",{});var $3e=s(nu);_ne=n($3e,"STRONG",{});var qQr=s(_ne);o_o=r(qQr,"vit_mae"),qQr.forEach(t),r_o=r($3e," \u2014 "),wI=n($3e,"A",{href:!0});var NQr=s(wI);t_o=r(NQr,"ViTMAEModel"),NQr.forEach(t),a_o=r($3e," (ViTMAE model)"),$3e.forEach(t),n_o=i($),su=n($,"LI",{});var k3e=s(su);bne=n(k3e,"STRONG",{});var jQr=s(bne);s_o=r(jQr,"wav2vec2"),jQr.forEach(t),l_o=r(k3e," \u2014 "),AI=n(k3e,"A",{href:!0});var DQr=s(AI);i_o=r(DQr,"Wav2Vec2Model"),DQr.forEach(t),d_o=r(k3e," (Wav2Vec2 model)"),k3e.forEach(t),c_o=i($),lu=n($,"LI",{});var S3e=s(lu);vne=n(S3e,"STRONG",{});var GQr=s(vne);f_o=r(GQr,"wavlm"),GQr.forEach(t),m_o=r(S3e," \u2014 "),yI=n(S3e,"A",{href:!0});var OQr=s(yI);g_o=r(OQr,"WavLMModel"),OQr.forEach(t),h_o=r(S3e," (WavLM model)"),S3e.forEach(t),p_o=i($),iu=n($,"LI",{});var R3e=s(iu);Fne=n(R3e,"STRONG",{});var VQr=s(Fne);u_o=r(VQr,"xglm"),VQr.forEach(t),__o=r(R3e," \u2014 "),LI=n(R3e,"A",{href:!0});var XQr=s(LI);b_o=r(XQr,"XGLMModel"),XQr.forEach(t),v_o=r(R3e," (XGLM model)"),R3e.forEach(t),F_o=i($),du=n($,"LI",{});var B3e=s(du);Tne=n(B3e,"STRONG",{});var zQr=s(Tne);T_o=r(zQr,"xlm"),zQr.forEach(t),M_o=r(B3e," \u2014 "),xI=n(B3e,"A",{href:!0});var QQr=s(xI);E_o=r(QQr,"XLMModel"),QQr.forEach(t),C_o=r(B3e," (XLM model)"),B3e.forEach(t),w_o=i($),cu=n($,"LI",{});var P3e=s(cu);Mne=n(P3e,"STRONG",{});var WQr=s(Mne);A_o=r(WQr,"xlm-prophetnet"),WQr.forEach(t),y_o=r(P3e," \u2014 "),$I=n(P3e,"A",{href:!0});var HQr=s($I);L_o=r(HQr,"XLMProphetNetModel"),HQr.forEach(t),x_o=r(P3e," (XLMProphetNet model)"),P3e.forEach(t),$_o=i($),fu=n($,"LI",{});var I3e=s(fu);Ene=n(I3e,"STRONG",{});var UQr=s(Ene);k_o=r(UQr,"xlm-roberta"),UQr.forEach(t),S_o=r(I3e," \u2014 "),kI=n(I3e,"A",{href:!0});var JQr=s(kI);R_o=r(JQr,"XLMRobertaModel"),JQr.forEach(t),B_o=r(I3e," (XLM-RoBERTa model)"),I3e.forEach(t),P_o=i($),mu=n($,"LI",{});var q3e=s(mu);Cne=n(q3e,"STRONG",{});var YQr=s(Cne);I_o=r(YQr,"xlm-roberta-xl"),YQr.forEach(t),q_o=r(q3e," \u2014 "),SI=n(q3e,"A",{href:!0});var KQr=s(SI);N_o=r(KQr,"XLMRobertaXLModel"),KQr.forEach(t),j_o=r(q3e," (XLM-RoBERTa-XL model)"),q3e.forEach(t),D_o=i($),gu=n($,"LI",{});var N3e=s(gu);wne=n(N3e,"STRONG",{});var ZQr=s(wne);G_o=r(ZQr,"xlnet"),ZQr.forEach(t),O_o=r(N3e," \u2014 "),RI=n(N3e,"A",{href:!0});var eWr=s(RI);V_o=r(eWr,"XLNetModel"),eWr.forEach(t),X_o=r(N3e," (XLNet model)"),N3e.forEach(t),z_o=i($),hu=n($,"LI",{});var j3e=s(hu);Ane=n(j3e,"STRONG",{});var oWr=s(Ane);Q_o=r(oWr,"yoso"),oWr.forEach(t),W_o=r(j3e," \u2014 "),BI=n(j3e,"A",{href:!0});var rWr=s(BI);H_o=r(rWr,"YosoModel"),rWr.forEach(t),U_o=r(j3e," (YOSO model)"),j3e.forEach(t),$.forEach(t),J_o=i(Jt),pu=n(Jt,"P",{});var D3e=s(pu);Y_o=r(D3e,"The model is set in evaluation mode by default using "),yne=n(D3e,"CODE",{});var tWr=s(yne);K_o=r(tWr,"model.eval()"),tWr.forEach(t),Z_o=r(D3e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Lne=n(D3e,"CODE",{});var aWr=s(Lne);e1o=r(aWr,"model.train()"),aWr.forEach(t),D3e.forEach(t),o1o=i(Jt),T(uu.$$.fragment,Jt),Jt.forEach(t),Ps.forEach(t),aBe=i(f),bi=n(f,"H2",{class:!0});var sIe=s(bi);_u=n(sIe,"A",{id:!0,class:!0,href:!0});var nWr=s(_u);xne=n(nWr,"SPAN",{});var sWr=s(xne);T(HA.$$.fragment,sWr),sWr.forEach(t),nWr.forEach(t),r1o=i(sIe),$ne=n(sIe,"SPAN",{});var lWr=s($ne);t1o=r(lWr,"AutoModelForPreTraining"),lWr.forEach(t),sIe.forEach(t),nBe=i(f),xo=n(f,"DIV",{class:!0});var Is=s(xo);T(UA.$$.fragment,Is),a1o=i(Is),vi=n(Is,"P",{});var tY=s(vi);n1o=r(tY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),PI=n(tY,"A",{href:!0});var iWr=s(PI);s1o=r(iWr,"from_pretrained()"),iWr.forEach(t),l1o=r(tY," class method or the "),II=n(tY,"A",{href:!0});var dWr=s(II);i1o=r(dWr,"from_config()"),dWr.forEach(t),d1o=r(tY,` class
method.`),tY.forEach(t),c1o=i(Is),JA=n(Is,"P",{});var lIe=s(JA);f1o=r(lIe,"This class cannot be instantiated directly using "),kne=n(lIe,"CODE",{});var cWr=s(kne);m1o=r(cWr,"__init__()"),cWr.forEach(t),g1o=r(lIe," (throws an error)."),lIe.forEach(t),h1o=i(Is),et=n(Is,"DIV",{class:!0});var C3=s(et);T(YA.$$.fragment,C3),p1o=i(C3),Sne=n(C3,"P",{});var fWr=s(Sne);u1o=r(fWr,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),fWr.forEach(t),_1o=i(C3),Fi=n(C3,"P",{});var aY=s(Fi);b1o=r(aY,`Note:
Loading a model from its configuration file does `),Rne=n(aY,"STRONG",{});var mWr=s(Rne);v1o=r(mWr,"not"),mWr.forEach(t),F1o=r(aY,` load the model weights. It only affects the
model\u2019s configuration. Use `),qI=n(aY,"A",{href:!0});var gWr=s(qI);T1o=r(gWr,"from_pretrained()"),gWr.forEach(t),M1o=r(aY," to load the model weights."),aY.forEach(t),E1o=i(C3),T(bu.$$.fragment,C3),C3.forEach(t),C1o=i(Is),Ue=n(Is,"DIV",{class:!0});var Yt=s(Ue);T(KA.$$.fragment,Yt),w1o=i(Yt),Bne=n(Yt,"P",{});var hWr=s(Bne);A1o=r(hWr,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),hWr.forEach(t),y1o=i(Yt),Ca=n(Yt,"P",{});var w3=s(Ca);L1o=r(w3,"The model class to instantiate is selected based on the "),Pne=n(w3,"CODE",{});var pWr=s(Pne);x1o=r(pWr,"model_type"),pWr.forEach(t),$1o=r(w3,` property of the config object (either
passed as an argument or loaded from `),Ine=n(w3,"CODE",{});var uWr=s(Ine);k1o=r(uWr,"pretrained_model_name_or_path"),uWr.forEach(t),S1o=r(w3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qne=n(w3,"CODE",{});var _Wr=s(qne);R1o=r(_Wr,"pretrained_model_name_or_path"),_Wr.forEach(t),B1o=r(w3,":"),w3.forEach(t),P1o=i(Yt),G=n(Yt,"UL",{});var V=s(G);vu=n(V,"LI",{});var G3e=s(vu);Nne=n(G3e,"STRONG",{});var bWr=s(Nne);I1o=r(bWr,"albert"),bWr.forEach(t),q1o=r(G3e," \u2014 "),NI=n(G3e,"A",{href:!0});var vWr=s(NI);N1o=r(vWr,"AlbertForPreTraining"),vWr.forEach(t),j1o=r(G3e," (ALBERT model)"),G3e.forEach(t),D1o=i(V),Fu=n(V,"LI",{});var O3e=s(Fu);jne=n(O3e,"STRONG",{});var FWr=s(jne);G1o=r(FWr,"bart"),FWr.forEach(t),O1o=r(O3e," \u2014 "),jI=n(O3e,"A",{href:!0});var TWr=s(jI);V1o=r(TWr,"BartForConditionalGeneration"),TWr.forEach(t),X1o=r(O3e," (BART model)"),O3e.forEach(t),z1o=i(V),Tu=n(V,"LI",{});var V3e=s(Tu);Dne=n(V3e,"STRONG",{});var MWr=s(Dne);Q1o=r(MWr,"bert"),MWr.forEach(t),W1o=r(V3e," \u2014 "),DI=n(V3e,"A",{href:!0});var EWr=s(DI);H1o=r(EWr,"BertForPreTraining"),EWr.forEach(t),U1o=r(V3e," (BERT model)"),V3e.forEach(t),J1o=i(V),Mu=n(V,"LI",{});var X3e=s(Mu);Gne=n(X3e,"STRONG",{});var CWr=s(Gne);Y1o=r(CWr,"big_bird"),CWr.forEach(t),K1o=r(X3e," \u2014 "),GI=n(X3e,"A",{href:!0});var wWr=s(GI);Z1o=r(wWr,"BigBirdForPreTraining"),wWr.forEach(t),e9o=r(X3e," (BigBird model)"),X3e.forEach(t),o9o=i(V),Eu=n(V,"LI",{});var z3e=s(Eu);One=n(z3e,"STRONG",{});var AWr=s(One);r9o=r(AWr,"camembert"),AWr.forEach(t),t9o=r(z3e," \u2014 "),OI=n(z3e,"A",{href:!0});var yWr=s(OI);a9o=r(yWr,"CamembertForMaskedLM"),yWr.forEach(t),n9o=r(z3e," (CamemBERT model)"),z3e.forEach(t),s9o=i(V),Cu=n(V,"LI",{});var Q3e=s(Cu);Vne=n(Q3e,"STRONG",{});var LWr=s(Vne);l9o=r(LWr,"ctrl"),LWr.forEach(t),i9o=r(Q3e," \u2014 "),VI=n(Q3e,"A",{href:!0});var xWr=s(VI);d9o=r(xWr,"CTRLLMHeadModel"),xWr.forEach(t),c9o=r(Q3e," (CTRL model)"),Q3e.forEach(t),f9o=i(V),wu=n(V,"LI",{});var W3e=s(wu);Xne=n(W3e,"STRONG",{});var $Wr=s(Xne);m9o=r($Wr,"data2vec-text"),$Wr.forEach(t),g9o=r(W3e," \u2014 "),XI=n(W3e,"A",{href:!0});var kWr=s(XI);h9o=r(kWr,"Data2VecTextForMaskedLM"),kWr.forEach(t),p9o=r(W3e," (Data2VecText model)"),W3e.forEach(t),u9o=i(V),Au=n(V,"LI",{});var H3e=s(Au);zne=n(H3e,"STRONG",{});var SWr=s(zne);_9o=r(SWr,"deberta"),SWr.forEach(t),b9o=r(H3e," \u2014 "),zI=n(H3e,"A",{href:!0});var RWr=s(zI);v9o=r(RWr,"DebertaForMaskedLM"),RWr.forEach(t),F9o=r(H3e," (DeBERTa model)"),H3e.forEach(t),T9o=i(V),yu=n(V,"LI",{});var U3e=s(yu);Qne=n(U3e,"STRONG",{});var BWr=s(Qne);M9o=r(BWr,"deberta-v2"),BWr.forEach(t),E9o=r(U3e," \u2014 "),QI=n(U3e,"A",{href:!0});var PWr=s(QI);C9o=r(PWr,"DebertaV2ForMaskedLM"),PWr.forEach(t),w9o=r(U3e," (DeBERTa-v2 model)"),U3e.forEach(t),A9o=i(V),Lu=n(V,"LI",{});var J3e=s(Lu);Wne=n(J3e,"STRONG",{});var IWr=s(Wne);y9o=r(IWr,"distilbert"),IWr.forEach(t),L9o=r(J3e," \u2014 "),WI=n(J3e,"A",{href:!0});var qWr=s(WI);x9o=r(qWr,"DistilBertForMaskedLM"),qWr.forEach(t),$9o=r(J3e," (DistilBERT model)"),J3e.forEach(t),k9o=i(V),xu=n(V,"LI",{});var Y3e=s(xu);Hne=n(Y3e,"STRONG",{});var NWr=s(Hne);S9o=r(NWr,"electra"),NWr.forEach(t),R9o=r(Y3e," \u2014 "),HI=n(Y3e,"A",{href:!0});var jWr=s(HI);B9o=r(jWr,"ElectraForPreTraining"),jWr.forEach(t),P9o=r(Y3e," (ELECTRA model)"),Y3e.forEach(t),I9o=i(V),$u=n(V,"LI",{});var K3e=s($u);Une=n(K3e,"STRONG",{});var DWr=s(Une);q9o=r(DWr,"flaubert"),DWr.forEach(t),N9o=r(K3e," \u2014 "),UI=n(K3e,"A",{href:!0});var GWr=s(UI);j9o=r(GWr,"FlaubertWithLMHeadModel"),GWr.forEach(t),D9o=r(K3e," (FlauBERT model)"),K3e.forEach(t),G9o=i(V),ku=n(V,"LI",{});var Z3e=s(ku);Jne=n(Z3e,"STRONG",{});var OWr=s(Jne);O9o=r(OWr,"fnet"),OWr.forEach(t),V9o=r(Z3e," \u2014 "),JI=n(Z3e,"A",{href:!0});var VWr=s(JI);X9o=r(VWr,"FNetForPreTraining"),VWr.forEach(t),z9o=r(Z3e," (FNet model)"),Z3e.forEach(t),Q9o=i(V),Su=n(V,"LI",{});var ewe=s(Su);Yne=n(ewe,"STRONG",{});var XWr=s(Yne);W9o=r(XWr,"fsmt"),XWr.forEach(t),H9o=r(ewe," \u2014 "),YI=n(ewe,"A",{href:!0});var zWr=s(YI);U9o=r(zWr,"FSMTForConditionalGeneration"),zWr.forEach(t),J9o=r(ewe," (FairSeq Machine-Translation model)"),ewe.forEach(t),Y9o=i(V),Ru=n(V,"LI",{});var owe=s(Ru);Kne=n(owe,"STRONG",{});var QWr=s(Kne);K9o=r(QWr,"funnel"),QWr.forEach(t),Z9o=r(owe," \u2014 "),KI=n(owe,"A",{href:!0});var WWr=s(KI);ebo=r(WWr,"FunnelForPreTraining"),WWr.forEach(t),obo=r(owe," (Funnel Transformer model)"),owe.forEach(t),rbo=i(V),Bu=n(V,"LI",{});var rwe=s(Bu);Zne=n(rwe,"STRONG",{});var HWr=s(Zne);tbo=r(HWr,"gpt2"),HWr.forEach(t),abo=r(rwe," \u2014 "),ZI=n(rwe,"A",{href:!0});var UWr=s(ZI);nbo=r(UWr,"GPT2LMHeadModel"),UWr.forEach(t),sbo=r(rwe," (OpenAI GPT-2 model)"),rwe.forEach(t),lbo=i(V),Pu=n(V,"LI",{});var twe=s(Pu);ese=n(twe,"STRONG",{});var JWr=s(ese);ibo=r(JWr,"ibert"),JWr.forEach(t),dbo=r(twe," \u2014 "),eq=n(twe,"A",{href:!0});var YWr=s(eq);cbo=r(YWr,"IBertForMaskedLM"),YWr.forEach(t),fbo=r(twe," (I-BERT model)"),twe.forEach(t),mbo=i(V),Iu=n(V,"LI",{});var awe=s(Iu);ose=n(awe,"STRONG",{});var KWr=s(ose);gbo=r(KWr,"layoutlm"),KWr.forEach(t),hbo=r(awe," \u2014 "),oq=n(awe,"A",{href:!0});var ZWr=s(oq);pbo=r(ZWr,"LayoutLMForMaskedLM"),ZWr.forEach(t),ubo=r(awe," (LayoutLM model)"),awe.forEach(t),_bo=i(V),qu=n(V,"LI",{});var nwe=s(qu);rse=n(nwe,"STRONG",{});var eHr=s(rse);bbo=r(eHr,"longformer"),eHr.forEach(t),vbo=r(nwe," \u2014 "),rq=n(nwe,"A",{href:!0});var oHr=s(rq);Fbo=r(oHr,"LongformerForMaskedLM"),oHr.forEach(t),Tbo=r(nwe," (Longformer model)"),nwe.forEach(t),Mbo=i(V),Nu=n(V,"LI",{});var swe=s(Nu);tse=n(swe,"STRONG",{});var rHr=s(tse);Ebo=r(rHr,"lxmert"),rHr.forEach(t),Cbo=r(swe," \u2014 "),tq=n(swe,"A",{href:!0});var tHr=s(tq);wbo=r(tHr,"LxmertForPreTraining"),tHr.forEach(t),Abo=r(swe," (LXMERT model)"),swe.forEach(t),ybo=i(V),ju=n(V,"LI",{});var lwe=s(ju);ase=n(lwe,"STRONG",{});var aHr=s(ase);Lbo=r(aHr,"megatron-bert"),aHr.forEach(t),xbo=r(lwe," \u2014 "),aq=n(lwe,"A",{href:!0});var nHr=s(aq);$bo=r(nHr,"MegatronBertForPreTraining"),nHr.forEach(t),kbo=r(lwe," (MegatronBert model)"),lwe.forEach(t),Sbo=i(V),Du=n(V,"LI",{});var iwe=s(Du);nse=n(iwe,"STRONG",{});var sHr=s(nse);Rbo=r(sHr,"mobilebert"),sHr.forEach(t),Bbo=r(iwe," \u2014 "),nq=n(iwe,"A",{href:!0});var lHr=s(nq);Pbo=r(lHr,"MobileBertForPreTraining"),lHr.forEach(t),Ibo=r(iwe," (MobileBERT model)"),iwe.forEach(t),qbo=i(V),Gu=n(V,"LI",{});var dwe=s(Gu);sse=n(dwe,"STRONG",{});var iHr=s(sse);Nbo=r(iHr,"mpnet"),iHr.forEach(t),jbo=r(dwe," \u2014 "),sq=n(dwe,"A",{href:!0});var dHr=s(sq);Dbo=r(dHr,"MPNetForMaskedLM"),dHr.forEach(t),Gbo=r(dwe," (MPNet model)"),dwe.forEach(t),Obo=i(V),Ou=n(V,"LI",{});var cwe=s(Ou);lse=n(cwe,"STRONG",{});var cHr=s(lse);Vbo=r(cHr,"openai-gpt"),cHr.forEach(t),Xbo=r(cwe," \u2014 "),lq=n(cwe,"A",{href:!0});var fHr=s(lq);zbo=r(fHr,"OpenAIGPTLMHeadModel"),fHr.forEach(t),Qbo=r(cwe," (OpenAI GPT model)"),cwe.forEach(t),Wbo=i(V),Vu=n(V,"LI",{});var fwe=s(Vu);ise=n(fwe,"STRONG",{});var mHr=s(ise);Hbo=r(mHr,"retribert"),mHr.forEach(t),Ubo=r(fwe," \u2014 "),iq=n(fwe,"A",{href:!0});var gHr=s(iq);Jbo=r(gHr,"RetriBertModel"),gHr.forEach(t),Ybo=r(fwe," (RetriBERT model)"),fwe.forEach(t),Kbo=i(V),Xu=n(V,"LI",{});var mwe=s(Xu);dse=n(mwe,"STRONG",{});var hHr=s(dse);Zbo=r(hHr,"roberta"),hHr.forEach(t),e2o=r(mwe," \u2014 "),dq=n(mwe,"A",{href:!0});var pHr=s(dq);o2o=r(pHr,"RobertaForMaskedLM"),pHr.forEach(t),r2o=r(mwe," (RoBERTa model)"),mwe.forEach(t),t2o=i(V),zu=n(V,"LI",{});var gwe=s(zu);cse=n(gwe,"STRONG",{});var uHr=s(cse);a2o=r(uHr,"squeezebert"),uHr.forEach(t),n2o=r(gwe," \u2014 "),cq=n(gwe,"A",{href:!0});var _Hr=s(cq);s2o=r(_Hr,"SqueezeBertForMaskedLM"),_Hr.forEach(t),l2o=r(gwe," (SqueezeBERT model)"),gwe.forEach(t),i2o=i(V),Qu=n(V,"LI",{});var hwe=s(Qu);fse=n(hwe,"STRONG",{});var bHr=s(fse);d2o=r(bHr,"t5"),bHr.forEach(t),c2o=r(hwe," \u2014 "),fq=n(hwe,"A",{href:!0});var vHr=s(fq);f2o=r(vHr,"T5ForConditionalGeneration"),vHr.forEach(t),m2o=r(hwe," (T5 model)"),hwe.forEach(t),g2o=i(V),Wu=n(V,"LI",{});var pwe=s(Wu);mse=n(pwe,"STRONG",{});var FHr=s(mse);h2o=r(FHr,"tapas"),FHr.forEach(t),p2o=r(pwe," \u2014 "),mq=n(pwe,"A",{href:!0});var THr=s(mq);u2o=r(THr,"TapasForMaskedLM"),THr.forEach(t),_2o=r(pwe," (TAPAS model)"),pwe.forEach(t),b2o=i(V),Hu=n(V,"LI",{});var uwe=s(Hu);gse=n(uwe,"STRONG",{});var MHr=s(gse);v2o=r(MHr,"transfo-xl"),MHr.forEach(t),F2o=r(uwe," \u2014 "),gq=n(uwe,"A",{href:!0});var EHr=s(gq);T2o=r(EHr,"TransfoXLLMHeadModel"),EHr.forEach(t),M2o=r(uwe," (Transformer-XL model)"),uwe.forEach(t),E2o=i(V),Uu=n(V,"LI",{});var _we=s(Uu);hse=n(_we,"STRONG",{});var CHr=s(hse);C2o=r(CHr,"unispeech"),CHr.forEach(t),w2o=r(_we," \u2014 "),hq=n(_we,"A",{href:!0});var wHr=s(hq);A2o=r(wHr,"UniSpeechForPreTraining"),wHr.forEach(t),y2o=r(_we," (UniSpeech model)"),_we.forEach(t),L2o=i(V),Ju=n(V,"LI",{});var bwe=s(Ju);pse=n(bwe,"STRONG",{});var AHr=s(pse);x2o=r(AHr,"unispeech-sat"),AHr.forEach(t),$2o=r(bwe," \u2014 "),pq=n(bwe,"A",{href:!0});var yHr=s(pq);k2o=r(yHr,"UniSpeechSatForPreTraining"),yHr.forEach(t),S2o=r(bwe," (UniSpeechSat model)"),bwe.forEach(t),R2o=i(V),Yu=n(V,"LI",{});var vwe=s(Yu);use=n(vwe,"STRONG",{});var LHr=s(use);B2o=r(LHr,"visual_bert"),LHr.forEach(t),P2o=r(vwe," \u2014 "),uq=n(vwe,"A",{href:!0});var xHr=s(uq);I2o=r(xHr,"VisualBertForPreTraining"),xHr.forEach(t),q2o=r(vwe," (VisualBert model)"),vwe.forEach(t),N2o=i(V),Ku=n(V,"LI",{});var Fwe=s(Ku);_se=n(Fwe,"STRONG",{});var $Hr=s(_se);j2o=r($Hr,"vit_mae"),$Hr.forEach(t),D2o=r(Fwe," \u2014 "),_q=n(Fwe,"A",{href:!0});var kHr=s(_q);G2o=r(kHr,"ViTMAEForPreTraining"),kHr.forEach(t),O2o=r(Fwe," (ViTMAE model)"),Fwe.forEach(t),V2o=i(V),Zu=n(V,"LI",{});var Twe=s(Zu);bse=n(Twe,"STRONG",{});var SHr=s(bse);X2o=r(SHr,"wav2vec2"),SHr.forEach(t),z2o=r(Twe," \u2014 "),bq=n(Twe,"A",{href:!0});var RHr=s(bq);Q2o=r(RHr,"Wav2Vec2ForPreTraining"),RHr.forEach(t),W2o=r(Twe," (Wav2Vec2 model)"),Twe.forEach(t),H2o=i(V),e_=n(V,"LI",{});var Mwe=s(e_);vse=n(Mwe,"STRONG",{});var BHr=s(vse);U2o=r(BHr,"xlm"),BHr.forEach(t),J2o=r(Mwe," \u2014 "),vq=n(Mwe,"A",{href:!0});var PHr=s(vq);Y2o=r(PHr,"XLMWithLMHeadModel"),PHr.forEach(t),K2o=r(Mwe," (XLM model)"),Mwe.forEach(t),Z2o=i(V),o_=n(V,"LI",{});var Ewe=s(o_);Fse=n(Ewe,"STRONG",{});var IHr=s(Fse);e5o=r(IHr,"xlm-roberta"),IHr.forEach(t),o5o=r(Ewe," \u2014 "),Fq=n(Ewe,"A",{href:!0});var qHr=s(Fq);r5o=r(qHr,"XLMRobertaForMaskedLM"),qHr.forEach(t),t5o=r(Ewe," (XLM-RoBERTa model)"),Ewe.forEach(t),a5o=i(V),r_=n(V,"LI",{});var Cwe=s(r_);Tse=n(Cwe,"STRONG",{});var NHr=s(Tse);n5o=r(NHr,"xlm-roberta-xl"),NHr.forEach(t),s5o=r(Cwe," \u2014 "),Tq=n(Cwe,"A",{href:!0});var jHr=s(Tq);l5o=r(jHr,"XLMRobertaXLForMaskedLM"),jHr.forEach(t),i5o=r(Cwe," (XLM-RoBERTa-XL model)"),Cwe.forEach(t),d5o=i(V),t_=n(V,"LI",{});var wwe=s(t_);Mse=n(wwe,"STRONG",{});var DHr=s(Mse);c5o=r(DHr,"xlnet"),DHr.forEach(t),f5o=r(wwe," \u2014 "),Mq=n(wwe,"A",{href:!0});var GHr=s(Mq);m5o=r(GHr,"XLNetLMHeadModel"),GHr.forEach(t),g5o=r(wwe," (XLNet model)"),wwe.forEach(t),V.forEach(t),h5o=i(Yt),a_=n(Yt,"P",{});var Awe=s(a_);p5o=r(Awe,"The model is set in evaluation mode by default using "),Ese=n(Awe,"CODE",{});var OHr=s(Ese);u5o=r(OHr,"model.eval()"),OHr.forEach(t),_5o=r(Awe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Cse=n(Awe,"CODE",{});var VHr=s(Cse);b5o=r(VHr,"model.train()"),VHr.forEach(t),Awe.forEach(t),v5o=i(Yt),T(n_.$$.fragment,Yt),Yt.forEach(t),Is.forEach(t),sBe=i(f),Ti=n(f,"H2",{class:!0});var iIe=s(Ti);s_=n(iIe,"A",{id:!0,class:!0,href:!0});var XHr=s(s_);wse=n(XHr,"SPAN",{});var zHr=s(wse);T(ZA.$$.fragment,zHr),zHr.forEach(t),XHr.forEach(t),F5o=i(iIe),Ase=n(iIe,"SPAN",{});var QHr=s(Ase);T5o=r(QHr,"AutoModelForCausalLM"),QHr.forEach(t),iIe.forEach(t),lBe=i(f),$o=n(f,"DIV",{class:!0});var qs=s($o);T(e0.$$.fragment,qs),M5o=i(qs),Mi=n(qs,"P",{});var nY=s(Mi);E5o=r(nY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Eq=n(nY,"A",{href:!0});var WHr=s(Eq);C5o=r(WHr,"from_pretrained()"),WHr.forEach(t),w5o=r(nY," class method or the "),Cq=n(nY,"A",{href:!0});var HHr=s(Cq);A5o=r(HHr,"from_config()"),HHr.forEach(t),y5o=r(nY,` class
method.`),nY.forEach(t),L5o=i(qs),o0=n(qs,"P",{});var dIe=s(o0);x5o=r(dIe,"This class cannot be instantiated directly using "),yse=n(dIe,"CODE",{});var UHr=s(yse);$5o=r(UHr,"__init__()"),UHr.forEach(t),k5o=r(dIe," (throws an error)."),dIe.forEach(t),S5o=i(qs),ot=n(qs,"DIV",{class:!0});var A3=s(ot);T(r0.$$.fragment,A3),R5o=i(A3),Lse=n(A3,"P",{});var JHr=s(Lse);B5o=r(JHr,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),JHr.forEach(t),P5o=i(A3),Ei=n(A3,"P",{});var sY=s(Ei);I5o=r(sY,`Note:
Loading a model from its configuration file does `),xse=n(sY,"STRONG",{});var YHr=s(xse);q5o=r(YHr,"not"),YHr.forEach(t),N5o=r(sY,` load the model weights. It only affects the
model\u2019s configuration. Use `),wq=n(sY,"A",{href:!0});var KHr=s(wq);j5o=r(KHr,"from_pretrained()"),KHr.forEach(t),D5o=r(sY," to load the model weights."),sY.forEach(t),G5o=i(A3),T(l_.$$.fragment,A3),A3.forEach(t),O5o=i(qs),Je=n(qs,"DIV",{class:!0});var Kt=s(Je);T(t0.$$.fragment,Kt),V5o=i(Kt),$se=n(Kt,"P",{});var ZHr=s($se);X5o=r(ZHr,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),ZHr.forEach(t),z5o=i(Kt),wa=n(Kt,"P",{});var y3=s(wa);Q5o=r(y3,"The model class to instantiate is selected based on the "),kse=n(y3,"CODE",{});var eUr=s(kse);W5o=r(eUr,"model_type"),eUr.forEach(t),H5o=r(y3,` property of the config object (either
passed as an argument or loaded from `),Sse=n(y3,"CODE",{});var oUr=s(Sse);U5o=r(oUr,"pretrained_model_name_or_path"),oUr.forEach(t),J5o=r(y3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rse=n(y3,"CODE",{});var rUr=s(Rse);Y5o=r(rUr,"pretrained_model_name_or_path"),rUr.forEach(t),K5o=r(y3,":"),y3.forEach(t),Z5o=i(Kt),z=n(Kt,"UL",{});var W=s(z);i_=n(W,"LI",{});var ywe=s(i_);Bse=n(ywe,"STRONG",{});var tUr=s(Bse);evo=r(tUr,"bart"),tUr.forEach(t),ovo=r(ywe," \u2014 "),Aq=n(ywe,"A",{href:!0});var aUr=s(Aq);rvo=r(aUr,"BartForCausalLM"),aUr.forEach(t),tvo=r(ywe," (BART model)"),ywe.forEach(t),avo=i(W),d_=n(W,"LI",{});var Lwe=s(d_);Pse=n(Lwe,"STRONG",{});var nUr=s(Pse);nvo=r(nUr,"bert"),nUr.forEach(t),svo=r(Lwe," \u2014 "),yq=n(Lwe,"A",{href:!0});var sUr=s(yq);lvo=r(sUr,"BertLMHeadModel"),sUr.forEach(t),ivo=r(Lwe," (BERT model)"),Lwe.forEach(t),dvo=i(W),c_=n(W,"LI",{});var xwe=s(c_);Ise=n(xwe,"STRONG",{});var lUr=s(Ise);cvo=r(lUr,"bert-generation"),lUr.forEach(t),fvo=r(xwe," \u2014 "),Lq=n(xwe,"A",{href:!0});var iUr=s(Lq);mvo=r(iUr,"BertGenerationDecoder"),iUr.forEach(t),gvo=r(xwe," (Bert Generation model)"),xwe.forEach(t),hvo=i(W),f_=n(W,"LI",{});var $we=s(f_);qse=n($we,"STRONG",{});var dUr=s(qse);pvo=r(dUr,"big_bird"),dUr.forEach(t),uvo=r($we," \u2014 "),xq=n($we,"A",{href:!0});var cUr=s(xq);_vo=r(cUr,"BigBirdForCausalLM"),cUr.forEach(t),bvo=r($we," (BigBird model)"),$we.forEach(t),vvo=i(W),m_=n(W,"LI",{});var kwe=s(m_);Nse=n(kwe,"STRONG",{});var fUr=s(Nse);Fvo=r(fUr,"bigbird_pegasus"),fUr.forEach(t),Tvo=r(kwe," \u2014 "),$q=n(kwe,"A",{href:!0});var mUr=s($q);Mvo=r(mUr,"BigBirdPegasusForCausalLM"),mUr.forEach(t),Evo=r(kwe," (BigBirdPegasus model)"),kwe.forEach(t),Cvo=i(W),g_=n(W,"LI",{});var Swe=s(g_);jse=n(Swe,"STRONG",{});var gUr=s(jse);wvo=r(gUr,"blenderbot"),gUr.forEach(t),Avo=r(Swe," \u2014 "),kq=n(Swe,"A",{href:!0});var hUr=s(kq);yvo=r(hUr,"BlenderbotForCausalLM"),hUr.forEach(t),Lvo=r(Swe," (Blenderbot model)"),Swe.forEach(t),xvo=i(W),h_=n(W,"LI",{});var Rwe=s(h_);Dse=n(Rwe,"STRONG",{});var pUr=s(Dse);$vo=r(pUr,"blenderbot-small"),pUr.forEach(t),kvo=r(Rwe," \u2014 "),Sq=n(Rwe,"A",{href:!0});var uUr=s(Sq);Svo=r(uUr,"BlenderbotSmallForCausalLM"),uUr.forEach(t),Rvo=r(Rwe," (BlenderbotSmall model)"),Rwe.forEach(t),Bvo=i(W),p_=n(W,"LI",{});var Bwe=s(p_);Gse=n(Bwe,"STRONG",{});var _Ur=s(Gse);Pvo=r(_Ur,"camembert"),_Ur.forEach(t),Ivo=r(Bwe," \u2014 "),Rq=n(Bwe,"A",{href:!0});var bUr=s(Rq);qvo=r(bUr,"CamembertForCausalLM"),bUr.forEach(t),Nvo=r(Bwe," (CamemBERT model)"),Bwe.forEach(t),jvo=i(W),u_=n(W,"LI",{});var Pwe=s(u_);Ose=n(Pwe,"STRONG",{});var vUr=s(Ose);Dvo=r(vUr,"ctrl"),vUr.forEach(t),Gvo=r(Pwe," \u2014 "),Bq=n(Pwe,"A",{href:!0});var FUr=s(Bq);Ovo=r(FUr,"CTRLLMHeadModel"),FUr.forEach(t),Vvo=r(Pwe," (CTRL model)"),Pwe.forEach(t),Xvo=i(W),__=n(W,"LI",{});var Iwe=s(__);Vse=n(Iwe,"STRONG",{});var TUr=s(Vse);zvo=r(TUr,"data2vec-text"),TUr.forEach(t),Qvo=r(Iwe," \u2014 "),Pq=n(Iwe,"A",{href:!0});var MUr=s(Pq);Wvo=r(MUr,"Data2VecTextForCausalLM"),MUr.forEach(t),Hvo=r(Iwe," (Data2VecText model)"),Iwe.forEach(t),Uvo=i(W),b_=n(W,"LI",{});var qwe=s(b_);Xse=n(qwe,"STRONG",{});var EUr=s(Xse);Jvo=r(EUr,"electra"),EUr.forEach(t),Yvo=r(qwe," \u2014 "),Iq=n(qwe,"A",{href:!0});var CUr=s(Iq);Kvo=r(CUr,"ElectraForCausalLM"),CUr.forEach(t),Zvo=r(qwe," (ELECTRA model)"),qwe.forEach(t),eFo=i(W),v_=n(W,"LI",{});var Nwe=s(v_);zse=n(Nwe,"STRONG",{});var wUr=s(zse);oFo=r(wUr,"gpt2"),wUr.forEach(t),rFo=r(Nwe," \u2014 "),qq=n(Nwe,"A",{href:!0});var AUr=s(qq);tFo=r(AUr,"GPT2LMHeadModel"),AUr.forEach(t),aFo=r(Nwe," (OpenAI GPT-2 model)"),Nwe.forEach(t),nFo=i(W),F_=n(W,"LI",{});var jwe=s(F_);Qse=n(jwe,"STRONG",{});var yUr=s(Qse);sFo=r(yUr,"gpt_neo"),yUr.forEach(t),lFo=r(jwe," \u2014 "),Nq=n(jwe,"A",{href:!0});var LUr=s(Nq);iFo=r(LUr,"GPTNeoForCausalLM"),LUr.forEach(t),dFo=r(jwe," (GPT Neo model)"),jwe.forEach(t),cFo=i(W),T_=n(W,"LI",{});var Dwe=s(T_);Wse=n(Dwe,"STRONG",{});var xUr=s(Wse);fFo=r(xUr,"gptj"),xUr.forEach(t),mFo=r(Dwe," \u2014 "),jq=n(Dwe,"A",{href:!0});var $Ur=s(jq);gFo=r($Ur,"GPTJForCausalLM"),$Ur.forEach(t),hFo=r(Dwe," (GPT-J model)"),Dwe.forEach(t),pFo=i(W),M_=n(W,"LI",{});var Gwe=s(M_);Hse=n(Gwe,"STRONG",{});var kUr=s(Hse);uFo=r(kUr,"marian"),kUr.forEach(t),_Fo=r(Gwe," \u2014 "),Dq=n(Gwe,"A",{href:!0});var SUr=s(Dq);bFo=r(SUr,"MarianForCausalLM"),SUr.forEach(t),vFo=r(Gwe," (Marian model)"),Gwe.forEach(t),FFo=i(W),E_=n(W,"LI",{});var Owe=s(E_);Use=n(Owe,"STRONG",{});var RUr=s(Use);TFo=r(RUr,"mbart"),RUr.forEach(t),MFo=r(Owe," \u2014 "),Gq=n(Owe,"A",{href:!0});var BUr=s(Gq);EFo=r(BUr,"MBartForCausalLM"),BUr.forEach(t),CFo=r(Owe," (mBART model)"),Owe.forEach(t),wFo=i(W),C_=n(W,"LI",{});var Vwe=s(C_);Jse=n(Vwe,"STRONG",{});var PUr=s(Jse);AFo=r(PUr,"megatron-bert"),PUr.forEach(t),yFo=r(Vwe," \u2014 "),Oq=n(Vwe,"A",{href:!0});var IUr=s(Oq);LFo=r(IUr,"MegatronBertForCausalLM"),IUr.forEach(t),xFo=r(Vwe," (MegatronBert model)"),Vwe.forEach(t),$Fo=i(W),w_=n(W,"LI",{});var Xwe=s(w_);Yse=n(Xwe,"STRONG",{});var qUr=s(Yse);kFo=r(qUr,"openai-gpt"),qUr.forEach(t),SFo=r(Xwe," \u2014 "),Vq=n(Xwe,"A",{href:!0});var NUr=s(Vq);RFo=r(NUr,"OpenAIGPTLMHeadModel"),NUr.forEach(t),BFo=r(Xwe," (OpenAI GPT model)"),Xwe.forEach(t),PFo=i(W),A_=n(W,"LI",{});var zwe=s(A_);Kse=n(zwe,"STRONG",{});var jUr=s(Kse);IFo=r(jUr,"pegasus"),jUr.forEach(t),qFo=r(zwe," \u2014 "),Xq=n(zwe,"A",{href:!0});var DUr=s(Xq);NFo=r(DUr,"PegasusForCausalLM"),DUr.forEach(t),jFo=r(zwe," (Pegasus model)"),zwe.forEach(t),DFo=i(W),y_=n(W,"LI",{});var Qwe=s(y_);Zse=n(Qwe,"STRONG",{});var GUr=s(Zse);GFo=r(GUr,"plbart"),GUr.forEach(t),OFo=r(Qwe," \u2014 "),zq=n(Qwe,"A",{href:!0});var OUr=s(zq);VFo=r(OUr,"PLBartForCausalLM"),OUr.forEach(t),XFo=r(Qwe," (PLBart model)"),Qwe.forEach(t),zFo=i(W),L_=n(W,"LI",{});var Wwe=s(L_);ele=n(Wwe,"STRONG",{});var VUr=s(ele);QFo=r(VUr,"prophetnet"),VUr.forEach(t),WFo=r(Wwe," \u2014 "),Qq=n(Wwe,"A",{href:!0});var XUr=s(Qq);HFo=r(XUr,"ProphetNetForCausalLM"),XUr.forEach(t),UFo=r(Wwe," (ProphetNet model)"),Wwe.forEach(t),JFo=i(W),x_=n(W,"LI",{});var Hwe=s(x_);ole=n(Hwe,"STRONG",{});var zUr=s(ole);YFo=r(zUr,"qdqbert"),zUr.forEach(t),KFo=r(Hwe," \u2014 "),Wq=n(Hwe,"A",{href:!0});var QUr=s(Wq);ZFo=r(QUr,"QDQBertLMHeadModel"),QUr.forEach(t),e6o=r(Hwe," (QDQBert model)"),Hwe.forEach(t),o6o=i(W),$_=n(W,"LI",{});var Uwe=s($_);rle=n(Uwe,"STRONG",{});var WUr=s(rle);r6o=r(WUr,"reformer"),WUr.forEach(t),t6o=r(Uwe," \u2014 "),Hq=n(Uwe,"A",{href:!0});var HUr=s(Hq);a6o=r(HUr,"ReformerModelWithLMHead"),HUr.forEach(t),n6o=r(Uwe," (Reformer model)"),Uwe.forEach(t),s6o=i(W),k_=n(W,"LI",{});var Jwe=s(k_);tle=n(Jwe,"STRONG",{});var UUr=s(tle);l6o=r(UUr,"rembert"),UUr.forEach(t),i6o=r(Jwe," \u2014 "),Uq=n(Jwe,"A",{href:!0});var JUr=s(Uq);d6o=r(JUr,"RemBertForCausalLM"),JUr.forEach(t),c6o=r(Jwe," (RemBERT model)"),Jwe.forEach(t),f6o=i(W),S_=n(W,"LI",{});var Ywe=s(S_);ale=n(Ywe,"STRONG",{});var YUr=s(ale);m6o=r(YUr,"roberta"),YUr.forEach(t),g6o=r(Ywe," \u2014 "),Jq=n(Ywe,"A",{href:!0});var KUr=s(Jq);h6o=r(KUr,"RobertaForCausalLM"),KUr.forEach(t),p6o=r(Ywe," (RoBERTa model)"),Ywe.forEach(t),u6o=i(W),R_=n(W,"LI",{});var Kwe=s(R_);nle=n(Kwe,"STRONG",{});var ZUr=s(nle);_6o=r(ZUr,"roformer"),ZUr.forEach(t),b6o=r(Kwe," \u2014 "),Yq=n(Kwe,"A",{href:!0});var eJr=s(Yq);v6o=r(eJr,"RoFormerForCausalLM"),eJr.forEach(t),F6o=r(Kwe," (RoFormer model)"),Kwe.forEach(t),T6o=i(W),B_=n(W,"LI",{});var Zwe=s(B_);sle=n(Zwe,"STRONG",{});var oJr=s(sle);M6o=r(oJr,"speech_to_text_2"),oJr.forEach(t),E6o=r(Zwe," \u2014 "),Kq=n(Zwe,"A",{href:!0});var rJr=s(Kq);C6o=r(rJr,"Speech2Text2ForCausalLM"),rJr.forEach(t),w6o=r(Zwe," (Speech2Text2 model)"),Zwe.forEach(t),A6o=i(W),P_=n(W,"LI",{});var eAe=s(P_);lle=n(eAe,"STRONG",{});var tJr=s(lle);y6o=r(tJr,"transfo-xl"),tJr.forEach(t),L6o=r(eAe," \u2014 "),Zq=n(eAe,"A",{href:!0});var aJr=s(Zq);x6o=r(aJr,"TransfoXLLMHeadModel"),aJr.forEach(t),$6o=r(eAe," (Transformer-XL model)"),eAe.forEach(t),k6o=i(W),I_=n(W,"LI",{});var oAe=s(I_);ile=n(oAe,"STRONG",{});var nJr=s(ile);S6o=r(nJr,"trocr"),nJr.forEach(t),R6o=r(oAe," \u2014 "),eN=n(oAe,"A",{href:!0});var sJr=s(eN);B6o=r(sJr,"TrOCRForCausalLM"),sJr.forEach(t),P6o=r(oAe," (TrOCR model)"),oAe.forEach(t),I6o=i(W),q_=n(W,"LI",{});var rAe=s(q_);dle=n(rAe,"STRONG",{});var lJr=s(dle);q6o=r(lJr,"xglm"),lJr.forEach(t),N6o=r(rAe," \u2014 "),oN=n(rAe,"A",{href:!0});var iJr=s(oN);j6o=r(iJr,"XGLMForCausalLM"),iJr.forEach(t),D6o=r(rAe," (XGLM model)"),rAe.forEach(t),G6o=i(W),N_=n(W,"LI",{});var tAe=s(N_);cle=n(tAe,"STRONG",{});var dJr=s(cle);O6o=r(dJr,"xlm"),dJr.forEach(t),V6o=r(tAe," \u2014 "),rN=n(tAe,"A",{href:!0});var cJr=s(rN);X6o=r(cJr,"XLMWithLMHeadModel"),cJr.forEach(t),z6o=r(tAe," (XLM model)"),tAe.forEach(t),Q6o=i(W),j_=n(W,"LI",{});var aAe=s(j_);fle=n(aAe,"STRONG",{});var fJr=s(fle);W6o=r(fJr,"xlm-prophetnet"),fJr.forEach(t),H6o=r(aAe," \u2014 "),tN=n(aAe,"A",{href:!0});var mJr=s(tN);U6o=r(mJr,"XLMProphetNetForCausalLM"),mJr.forEach(t),J6o=r(aAe," (XLMProphetNet model)"),aAe.forEach(t),Y6o=i(W),D_=n(W,"LI",{});var nAe=s(D_);mle=n(nAe,"STRONG",{});var gJr=s(mle);K6o=r(gJr,"xlm-roberta"),gJr.forEach(t),Z6o=r(nAe," \u2014 "),aN=n(nAe,"A",{href:!0});var hJr=s(aN);eTo=r(hJr,"XLMRobertaForCausalLM"),hJr.forEach(t),oTo=r(nAe," (XLM-RoBERTa model)"),nAe.forEach(t),rTo=i(W),G_=n(W,"LI",{});var sAe=s(G_);gle=n(sAe,"STRONG",{});var pJr=s(gle);tTo=r(pJr,"xlm-roberta-xl"),pJr.forEach(t),aTo=r(sAe," \u2014 "),nN=n(sAe,"A",{href:!0});var uJr=s(nN);nTo=r(uJr,"XLMRobertaXLForCausalLM"),uJr.forEach(t),sTo=r(sAe," (XLM-RoBERTa-XL model)"),sAe.forEach(t),lTo=i(W),O_=n(W,"LI",{});var lAe=s(O_);hle=n(lAe,"STRONG",{});var _Jr=s(hle);iTo=r(_Jr,"xlnet"),_Jr.forEach(t),dTo=r(lAe," \u2014 "),sN=n(lAe,"A",{href:!0});var bJr=s(sN);cTo=r(bJr,"XLNetLMHeadModel"),bJr.forEach(t),fTo=r(lAe," (XLNet model)"),lAe.forEach(t),W.forEach(t),mTo=i(Kt),V_=n(Kt,"P",{});var iAe=s(V_);gTo=r(iAe,"The model is set in evaluation mode by default using "),ple=n(iAe,"CODE",{});var vJr=s(ple);hTo=r(vJr,"model.eval()"),vJr.forEach(t),pTo=r(iAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ule=n(iAe,"CODE",{});var FJr=s(ule);uTo=r(FJr,"model.train()"),FJr.forEach(t),iAe.forEach(t),_To=i(Kt),T(X_.$$.fragment,Kt),Kt.forEach(t),qs.forEach(t),iBe=i(f),Ci=n(f,"H2",{class:!0});var cIe=s(Ci);z_=n(cIe,"A",{id:!0,class:!0,href:!0});var TJr=s(z_);_le=n(TJr,"SPAN",{});var MJr=s(_le);T(a0.$$.fragment,MJr),MJr.forEach(t),TJr.forEach(t),bTo=i(cIe),ble=n(cIe,"SPAN",{});var EJr=s(ble);vTo=r(EJr,"AutoModelForMaskedLM"),EJr.forEach(t),cIe.forEach(t),dBe=i(f),ko=n(f,"DIV",{class:!0});var Ns=s(ko);T(n0.$$.fragment,Ns),FTo=i(Ns),wi=n(Ns,"P",{});var lY=s(wi);TTo=r(lY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),lN=n(lY,"A",{href:!0});var CJr=s(lN);MTo=r(CJr,"from_pretrained()"),CJr.forEach(t),ETo=r(lY," class method or the "),iN=n(lY,"A",{href:!0});var wJr=s(iN);CTo=r(wJr,"from_config()"),wJr.forEach(t),wTo=r(lY,` class
method.`),lY.forEach(t),ATo=i(Ns),s0=n(Ns,"P",{});var fIe=s(s0);yTo=r(fIe,"This class cannot be instantiated directly using "),vle=n(fIe,"CODE",{});var AJr=s(vle);LTo=r(AJr,"__init__()"),AJr.forEach(t),xTo=r(fIe," (throws an error)."),fIe.forEach(t),$To=i(Ns),rt=n(Ns,"DIV",{class:!0});var L3=s(rt);T(l0.$$.fragment,L3),kTo=i(L3),Fle=n(L3,"P",{});var yJr=s(Fle);STo=r(yJr,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),yJr.forEach(t),RTo=i(L3),Ai=n(L3,"P",{});var iY=s(Ai);BTo=r(iY,`Note:
Loading a model from its configuration file does `),Tle=n(iY,"STRONG",{});var LJr=s(Tle);PTo=r(LJr,"not"),LJr.forEach(t),ITo=r(iY,` load the model weights. It only affects the
model\u2019s configuration. Use `),dN=n(iY,"A",{href:!0});var xJr=s(dN);qTo=r(xJr,"from_pretrained()"),xJr.forEach(t),NTo=r(iY," to load the model weights."),iY.forEach(t),jTo=i(L3),T(Q_.$$.fragment,L3),L3.forEach(t),DTo=i(Ns),Ye=n(Ns,"DIV",{class:!0});var Zt=s(Ye);T(i0.$$.fragment,Zt),GTo=i(Zt),Mle=n(Zt,"P",{});var $Jr=s(Mle);OTo=r($Jr,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),$Jr.forEach(t),VTo=i(Zt),Aa=n(Zt,"P",{});var x3=s(Aa);XTo=r(x3,"The model class to instantiate is selected based on the "),Ele=n(x3,"CODE",{});var kJr=s(Ele);zTo=r(kJr,"model_type"),kJr.forEach(t),QTo=r(x3,` property of the config object (either
passed as an argument or loaded from `),Cle=n(x3,"CODE",{});var SJr=s(Cle);WTo=r(SJr,"pretrained_model_name_or_path"),SJr.forEach(t),HTo=r(x3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wle=n(x3,"CODE",{});var RJr=s(wle);UTo=r(RJr,"pretrained_model_name_or_path"),RJr.forEach(t),JTo=r(x3,":"),x3.forEach(t),YTo=i(Zt),Q=n(Zt,"UL",{});var H=s(Q);W_=n(H,"LI",{});var dAe=s(W_);Ale=n(dAe,"STRONG",{});var BJr=s(Ale);KTo=r(BJr,"albert"),BJr.forEach(t),ZTo=r(dAe," \u2014 "),cN=n(dAe,"A",{href:!0});var PJr=s(cN);eMo=r(PJr,"AlbertForMaskedLM"),PJr.forEach(t),oMo=r(dAe," (ALBERT model)"),dAe.forEach(t),rMo=i(H),H_=n(H,"LI",{});var cAe=s(H_);yle=n(cAe,"STRONG",{});var IJr=s(yle);tMo=r(IJr,"bart"),IJr.forEach(t),aMo=r(cAe," \u2014 "),fN=n(cAe,"A",{href:!0});var qJr=s(fN);nMo=r(qJr,"BartForConditionalGeneration"),qJr.forEach(t),sMo=r(cAe," (BART model)"),cAe.forEach(t),lMo=i(H),U_=n(H,"LI",{});var fAe=s(U_);Lle=n(fAe,"STRONG",{});var NJr=s(Lle);iMo=r(NJr,"bert"),NJr.forEach(t),dMo=r(fAe," \u2014 "),mN=n(fAe,"A",{href:!0});var jJr=s(mN);cMo=r(jJr,"BertForMaskedLM"),jJr.forEach(t),fMo=r(fAe," (BERT model)"),fAe.forEach(t),mMo=i(H),J_=n(H,"LI",{});var mAe=s(J_);xle=n(mAe,"STRONG",{});var DJr=s(xle);gMo=r(DJr,"big_bird"),DJr.forEach(t),hMo=r(mAe," \u2014 "),gN=n(mAe,"A",{href:!0});var GJr=s(gN);pMo=r(GJr,"BigBirdForMaskedLM"),GJr.forEach(t),uMo=r(mAe," (BigBird model)"),mAe.forEach(t),_Mo=i(H),Y_=n(H,"LI",{});var gAe=s(Y_);$le=n(gAe,"STRONG",{});var OJr=s($le);bMo=r(OJr,"camembert"),OJr.forEach(t),vMo=r(gAe," \u2014 "),hN=n(gAe,"A",{href:!0});var VJr=s(hN);FMo=r(VJr,"CamembertForMaskedLM"),VJr.forEach(t),TMo=r(gAe," (CamemBERT model)"),gAe.forEach(t),MMo=i(H),K_=n(H,"LI",{});var hAe=s(K_);kle=n(hAe,"STRONG",{});var XJr=s(kle);EMo=r(XJr,"convbert"),XJr.forEach(t),CMo=r(hAe," \u2014 "),pN=n(hAe,"A",{href:!0});var zJr=s(pN);wMo=r(zJr,"ConvBertForMaskedLM"),zJr.forEach(t),AMo=r(hAe," (ConvBERT model)"),hAe.forEach(t),yMo=i(H),Z_=n(H,"LI",{});var pAe=s(Z_);Sle=n(pAe,"STRONG",{});var QJr=s(Sle);LMo=r(QJr,"data2vec-text"),QJr.forEach(t),xMo=r(pAe," \u2014 "),uN=n(pAe,"A",{href:!0});var WJr=s(uN);$Mo=r(WJr,"Data2VecTextForMaskedLM"),WJr.forEach(t),kMo=r(pAe," (Data2VecText model)"),pAe.forEach(t),SMo=i(H),e1=n(H,"LI",{});var uAe=s(e1);Rle=n(uAe,"STRONG",{});var HJr=s(Rle);RMo=r(HJr,"deberta"),HJr.forEach(t),BMo=r(uAe," \u2014 "),_N=n(uAe,"A",{href:!0});var UJr=s(_N);PMo=r(UJr,"DebertaForMaskedLM"),UJr.forEach(t),IMo=r(uAe," (DeBERTa model)"),uAe.forEach(t),qMo=i(H),o1=n(H,"LI",{});var _Ae=s(o1);Ble=n(_Ae,"STRONG",{});var JJr=s(Ble);NMo=r(JJr,"deberta-v2"),JJr.forEach(t),jMo=r(_Ae," \u2014 "),bN=n(_Ae,"A",{href:!0});var YJr=s(bN);DMo=r(YJr,"DebertaV2ForMaskedLM"),YJr.forEach(t),GMo=r(_Ae," (DeBERTa-v2 model)"),_Ae.forEach(t),OMo=i(H),r1=n(H,"LI",{});var bAe=s(r1);Ple=n(bAe,"STRONG",{});var KJr=s(Ple);VMo=r(KJr,"distilbert"),KJr.forEach(t),XMo=r(bAe," \u2014 "),vN=n(bAe,"A",{href:!0});var ZJr=s(vN);zMo=r(ZJr,"DistilBertForMaskedLM"),ZJr.forEach(t),QMo=r(bAe," (DistilBERT model)"),bAe.forEach(t),WMo=i(H),t1=n(H,"LI",{});var vAe=s(t1);Ile=n(vAe,"STRONG",{});var eYr=s(Ile);HMo=r(eYr,"electra"),eYr.forEach(t),UMo=r(vAe," \u2014 "),FN=n(vAe,"A",{href:!0});var oYr=s(FN);JMo=r(oYr,"ElectraForMaskedLM"),oYr.forEach(t),YMo=r(vAe," (ELECTRA model)"),vAe.forEach(t),KMo=i(H),a1=n(H,"LI",{});var FAe=s(a1);qle=n(FAe,"STRONG",{});var rYr=s(qle);ZMo=r(rYr,"flaubert"),rYr.forEach(t),e4o=r(FAe," \u2014 "),TN=n(FAe,"A",{href:!0});var tYr=s(TN);o4o=r(tYr,"FlaubertWithLMHeadModel"),tYr.forEach(t),r4o=r(FAe," (FlauBERT model)"),FAe.forEach(t),t4o=i(H),n1=n(H,"LI",{});var TAe=s(n1);Nle=n(TAe,"STRONG",{});var aYr=s(Nle);a4o=r(aYr,"fnet"),aYr.forEach(t),n4o=r(TAe," \u2014 "),MN=n(TAe,"A",{href:!0});var nYr=s(MN);s4o=r(nYr,"FNetForMaskedLM"),nYr.forEach(t),l4o=r(TAe," (FNet model)"),TAe.forEach(t),i4o=i(H),s1=n(H,"LI",{});var MAe=s(s1);jle=n(MAe,"STRONG",{});var sYr=s(jle);d4o=r(sYr,"funnel"),sYr.forEach(t),c4o=r(MAe," \u2014 "),EN=n(MAe,"A",{href:!0});var lYr=s(EN);f4o=r(lYr,"FunnelForMaskedLM"),lYr.forEach(t),m4o=r(MAe," (Funnel Transformer model)"),MAe.forEach(t),g4o=i(H),l1=n(H,"LI",{});var EAe=s(l1);Dle=n(EAe,"STRONG",{});var iYr=s(Dle);h4o=r(iYr,"ibert"),iYr.forEach(t),p4o=r(EAe," \u2014 "),CN=n(EAe,"A",{href:!0});var dYr=s(CN);u4o=r(dYr,"IBertForMaskedLM"),dYr.forEach(t),_4o=r(EAe," (I-BERT model)"),EAe.forEach(t),b4o=i(H),i1=n(H,"LI",{});var CAe=s(i1);Gle=n(CAe,"STRONG",{});var cYr=s(Gle);v4o=r(cYr,"layoutlm"),cYr.forEach(t),F4o=r(CAe," \u2014 "),wN=n(CAe,"A",{href:!0});var fYr=s(wN);T4o=r(fYr,"LayoutLMForMaskedLM"),fYr.forEach(t),M4o=r(CAe," (LayoutLM model)"),CAe.forEach(t),E4o=i(H),d1=n(H,"LI",{});var wAe=s(d1);Ole=n(wAe,"STRONG",{});var mYr=s(Ole);C4o=r(mYr,"longformer"),mYr.forEach(t),w4o=r(wAe," \u2014 "),AN=n(wAe,"A",{href:!0});var gYr=s(AN);A4o=r(gYr,"LongformerForMaskedLM"),gYr.forEach(t),y4o=r(wAe," (Longformer model)"),wAe.forEach(t),L4o=i(H),c1=n(H,"LI",{});var AAe=s(c1);Vle=n(AAe,"STRONG",{});var hYr=s(Vle);x4o=r(hYr,"mbart"),hYr.forEach(t),$4o=r(AAe," \u2014 "),yN=n(AAe,"A",{href:!0});var pYr=s(yN);k4o=r(pYr,"MBartForConditionalGeneration"),pYr.forEach(t),S4o=r(AAe," (mBART model)"),AAe.forEach(t),R4o=i(H),f1=n(H,"LI",{});var yAe=s(f1);Xle=n(yAe,"STRONG",{});var uYr=s(Xle);B4o=r(uYr,"megatron-bert"),uYr.forEach(t),P4o=r(yAe," \u2014 "),LN=n(yAe,"A",{href:!0});var _Yr=s(LN);I4o=r(_Yr,"MegatronBertForMaskedLM"),_Yr.forEach(t),q4o=r(yAe," (MegatronBert model)"),yAe.forEach(t),N4o=i(H),m1=n(H,"LI",{});var LAe=s(m1);zle=n(LAe,"STRONG",{});var bYr=s(zle);j4o=r(bYr,"mobilebert"),bYr.forEach(t),D4o=r(LAe," \u2014 "),xN=n(LAe,"A",{href:!0});var vYr=s(xN);G4o=r(vYr,"MobileBertForMaskedLM"),vYr.forEach(t),O4o=r(LAe," (MobileBERT model)"),LAe.forEach(t),V4o=i(H),g1=n(H,"LI",{});var xAe=s(g1);Qle=n(xAe,"STRONG",{});var FYr=s(Qle);X4o=r(FYr,"mpnet"),FYr.forEach(t),z4o=r(xAe," \u2014 "),$N=n(xAe,"A",{href:!0});var TYr=s($N);Q4o=r(TYr,"MPNetForMaskedLM"),TYr.forEach(t),W4o=r(xAe," (MPNet model)"),xAe.forEach(t),H4o=i(H),h1=n(H,"LI",{});var $Ae=s(h1);Wle=n($Ae,"STRONG",{});var MYr=s(Wle);U4o=r(MYr,"nystromformer"),MYr.forEach(t),J4o=r($Ae," \u2014 "),kN=n($Ae,"A",{href:!0});var EYr=s(kN);Y4o=r(EYr,"NystromformerForMaskedLM"),EYr.forEach(t),K4o=r($Ae," (Nystromformer model)"),$Ae.forEach(t),Z4o=i(H),p1=n(H,"LI",{});var kAe=s(p1);Hle=n(kAe,"STRONG",{});var CYr=s(Hle);eEo=r(CYr,"perceiver"),CYr.forEach(t),oEo=r(kAe," \u2014 "),SN=n(kAe,"A",{href:!0});var wYr=s(SN);rEo=r(wYr,"PerceiverForMaskedLM"),wYr.forEach(t),tEo=r(kAe," (Perceiver model)"),kAe.forEach(t),aEo=i(H),u1=n(H,"LI",{});var SAe=s(u1);Ule=n(SAe,"STRONG",{});var AYr=s(Ule);nEo=r(AYr,"qdqbert"),AYr.forEach(t),sEo=r(SAe," \u2014 "),RN=n(SAe,"A",{href:!0});var yYr=s(RN);lEo=r(yYr,"QDQBertForMaskedLM"),yYr.forEach(t),iEo=r(SAe," (QDQBert model)"),SAe.forEach(t),dEo=i(H),_1=n(H,"LI",{});var RAe=s(_1);Jle=n(RAe,"STRONG",{});var LYr=s(Jle);cEo=r(LYr,"reformer"),LYr.forEach(t),fEo=r(RAe," \u2014 "),BN=n(RAe,"A",{href:!0});var xYr=s(BN);mEo=r(xYr,"ReformerForMaskedLM"),xYr.forEach(t),gEo=r(RAe," (Reformer model)"),RAe.forEach(t),hEo=i(H),b1=n(H,"LI",{});var BAe=s(b1);Yle=n(BAe,"STRONG",{});var $Yr=s(Yle);pEo=r($Yr,"rembert"),$Yr.forEach(t),uEo=r(BAe," \u2014 "),PN=n(BAe,"A",{href:!0});var kYr=s(PN);_Eo=r(kYr,"RemBertForMaskedLM"),kYr.forEach(t),bEo=r(BAe," (RemBERT model)"),BAe.forEach(t),vEo=i(H),v1=n(H,"LI",{});var PAe=s(v1);Kle=n(PAe,"STRONG",{});var SYr=s(Kle);FEo=r(SYr,"roberta"),SYr.forEach(t),TEo=r(PAe," \u2014 "),IN=n(PAe,"A",{href:!0});var RYr=s(IN);MEo=r(RYr,"RobertaForMaskedLM"),RYr.forEach(t),EEo=r(PAe," (RoBERTa model)"),PAe.forEach(t),CEo=i(H),F1=n(H,"LI",{});var IAe=s(F1);Zle=n(IAe,"STRONG",{});var BYr=s(Zle);wEo=r(BYr,"roformer"),BYr.forEach(t),AEo=r(IAe," \u2014 "),qN=n(IAe,"A",{href:!0});var PYr=s(qN);yEo=r(PYr,"RoFormerForMaskedLM"),PYr.forEach(t),LEo=r(IAe," (RoFormer model)"),IAe.forEach(t),xEo=i(H),T1=n(H,"LI",{});var qAe=s(T1);eie=n(qAe,"STRONG",{});var IYr=s(eie);$Eo=r(IYr,"squeezebert"),IYr.forEach(t),kEo=r(qAe," \u2014 "),NN=n(qAe,"A",{href:!0});var qYr=s(NN);SEo=r(qYr,"SqueezeBertForMaskedLM"),qYr.forEach(t),REo=r(qAe," (SqueezeBERT model)"),qAe.forEach(t),BEo=i(H),M1=n(H,"LI",{});var NAe=s(M1);oie=n(NAe,"STRONG",{});var NYr=s(oie);PEo=r(NYr,"tapas"),NYr.forEach(t),IEo=r(NAe," \u2014 "),jN=n(NAe,"A",{href:!0});var jYr=s(jN);qEo=r(jYr,"TapasForMaskedLM"),jYr.forEach(t),NEo=r(NAe," (TAPAS model)"),NAe.forEach(t),jEo=i(H),E1=n(H,"LI",{});var jAe=s(E1);rie=n(jAe,"STRONG",{});var DYr=s(rie);DEo=r(DYr,"wav2vec2"),DYr.forEach(t),GEo=r(jAe," \u2014 "),tie=n(jAe,"CODE",{});var GYr=s(tie);OEo=r(GYr,"Wav2Vec2ForMaskedLM"),GYr.forEach(t),VEo=r(jAe," (Wav2Vec2 model)"),jAe.forEach(t),XEo=i(H),C1=n(H,"LI",{});var DAe=s(C1);aie=n(DAe,"STRONG",{});var OYr=s(aie);zEo=r(OYr,"xlm"),OYr.forEach(t),QEo=r(DAe," \u2014 "),DN=n(DAe,"A",{href:!0});var VYr=s(DN);WEo=r(VYr,"XLMWithLMHeadModel"),VYr.forEach(t),HEo=r(DAe," (XLM model)"),DAe.forEach(t),UEo=i(H),w1=n(H,"LI",{});var GAe=s(w1);nie=n(GAe,"STRONG",{});var XYr=s(nie);JEo=r(XYr,"xlm-roberta"),XYr.forEach(t),YEo=r(GAe," \u2014 "),GN=n(GAe,"A",{href:!0});var zYr=s(GN);KEo=r(zYr,"XLMRobertaForMaskedLM"),zYr.forEach(t),ZEo=r(GAe," (XLM-RoBERTa model)"),GAe.forEach(t),eCo=i(H),A1=n(H,"LI",{});var OAe=s(A1);sie=n(OAe,"STRONG",{});var QYr=s(sie);oCo=r(QYr,"xlm-roberta-xl"),QYr.forEach(t),rCo=r(OAe," \u2014 "),ON=n(OAe,"A",{href:!0});var WYr=s(ON);tCo=r(WYr,"XLMRobertaXLForMaskedLM"),WYr.forEach(t),aCo=r(OAe," (XLM-RoBERTa-XL model)"),OAe.forEach(t),nCo=i(H),y1=n(H,"LI",{});var VAe=s(y1);lie=n(VAe,"STRONG",{});var HYr=s(lie);sCo=r(HYr,"yoso"),HYr.forEach(t),lCo=r(VAe," \u2014 "),VN=n(VAe,"A",{href:!0});var UYr=s(VN);iCo=r(UYr,"YosoForMaskedLM"),UYr.forEach(t),dCo=r(VAe," (YOSO model)"),VAe.forEach(t),H.forEach(t),cCo=i(Zt),L1=n(Zt,"P",{});var XAe=s(L1);fCo=r(XAe,"The model is set in evaluation mode by default using "),iie=n(XAe,"CODE",{});var JYr=s(iie);mCo=r(JYr,"model.eval()"),JYr.forEach(t),gCo=r(XAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),die=n(XAe,"CODE",{});var YYr=s(die);hCo=r(YYr,"model.train()"),YYr.forEach(t),XAe.forEach(t),pCo=i(Zt),T(x1.$$.fragment,Zt),Zt.forEach(t),Ns.forEach(t),cBe=i(f),yi=n(f,"H2",{class:!0});var mIe=s(yi);$1=n(mIe,"A",{id:!0,class:!0,href:!0});var KYr=s($1);cie=n(KYr,"SPAN",{});var ZYr=s(cie);T(d0.$$.fragment,ZYr),ZYr.forEach(t),KYr.forEach(t),uCo=i(mIe),fie=n(mIe,"SPAN",{});var eKr=s(fie);_Co=r(eKr,"AutoModelForSeq2SeqLM"),eKr.forEach(t),mIe.forEach(t),fBe=i(f),So=n(f,"DIV",{class:!0});var js=s(So);T(c0.$$.fragment,js),bCo=i(js),Li=n(js,"P",{});var dY=s(Li);vCo=r(dY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),XN=n(dY,"A",{href:!0});var oKr=s(XN);FCo=r(oKr,"from_pretrained()"),oKr.forEach(t),TCo=r(dY," class method or the "),zN=n(dY,"A",{href:!0});var rKr=s(zN);MCo=r(rKr,"from_config()"),rKr.forEach(t),ECo=r(dY,` class
method.`),dY.forEach(t),CCo=i(js),f0=n(js,"P",{});var gIe=s(f0);wCo=r(gIe,"This class cannot be instantiated directly using "),mie=n(gIe,"CODE",{});var tKr=s(mie);ACo=r(tKr,"__init__()"),tKr.forEach(t),yCo=r(gIe," (throws an error)."),gIe.forEach(t),LCo=i(js),tt=n(js,"DIV",{class:!0});var $3=s(tt);T(m0.$$.fragment,$3),xCo=i($3),gie=n($3,"P",{});var aKr=s(gie);$Co=r(aKr,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),aKr.forEach(t),kCo=i($3),xi=n($3,"P",{});var cY=s(xi);SCo=r(cY,`Note:
Loading a model from its configuration file does `),hie=n(cY,"STRONG",{});var nKr=s(hie);RCo=r(nKr,"not"),nKr.forEach(t),BCo=r(cY,` load the model weights. It only affects the
model\u2019s configuration. Use `),QN=n(cY,"A",{href:!0});var sKr=s(QN);PCo=r(sKr,"from_pretrained()"),sKr.forEach(t),ICo=r(cY," to load the model weights."),cY.forEach(t),qCo=i($3),T(k1.$$.fragment,$3),$3.forEach(t),NCo=i(js),Ke=n(js,"DIV",{class:!0});var ea=s(Ke);T(g0.$$.fragment,ea),jCo=i(ea),pie=n(ea,"P",{});var lKr=s(pie);DCo=r(lKr,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),lKr.forEach(t),GCo=i(ea),ya=n(ea,"P",{});var k3=s(ya);OCo=r(k3,"The model class to instantiate is selected based on the "),uie=n(k3,"CODE",{});var iKr=s(uie);VCo=r(iKr,"model_type"),iKr.forEach(t),XCo=r(k3,` property of the config object (either
passed as an argument or loaded from `),_ie=n(k3,"CODE",{});var dKr=s(_ie);zCo=r(dKr,"pretrained_model_name_or_path"),dKr.forEach(t),QCo=r(k3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bie=n(k3,"CODE",{});var cKr=s(bie);WCo=r(cKr,"pretrained_model_name_or_path"),cKr.forEach(t),HCo=r(k3,":"),k3.forEach(t),UCo=i(ea),he=n(ea,"UL",{});var ue=s(he);S1=n(ue,"LI",{});var zAe=s(S1);vie=n(zAe,"STRONG",{});var fKr=s(vie);JCo=r(fKr,"bart"),fKr.forEach(t),YCo=r(zAe," \u2014 "),WN=n(zAe,"A",{href:!0});var mKr=s(WN);KCo=r(mKr,"BartForConditionalGeneration"),mKr.forEach(t),ZCo=r(zAe," (BART model)"),zAe.forEach(t),e3o=i(ue),R1=n(ue,"LI",{});var QAe=s(R1);Fie=n(QAe,"STRONG",{});var gKr=s(Fie);o3o=r(gKr,"bigbird_pegasus"),gKr.forEach(t),r3o=r(QAe," \u2014 "),HN=n(QAe,"A",{href:!0});var hKr=s(HN);t3o=r(hKr,"BigBirdPegasusForConditionalGeneration"),hKr.forEach(t),a3o=r(QAe," (BigBirdPegasus model)"),QAe.forEach(t),n3o=i(ue),B1=n(ue,"LI",{});var WAe=s(B1);Tie=n(WAe,"STRONG",{});var pKr=s(Tie);s3o=r(pKr,"blenderbot"),pKr.forEach(t),l3o=r(WAe," \u2014 "),UN=n(WAe,"A",{href:!0});var uKr=s(UN);i3o=r(uKr,"BlenderbotForConditionalGeneration"),uKr.forEach(t),d3o=r(WAe," (Blenderbot model)"),WAe.forEach(t),c3o=i(ue),P1=n(ue,"LI",{});var HAe=s(P1);Mie=n(HAe,"STRONG",{});var _Kr=s(Mie);f3o=r(_Kr,"blenderbot-small"),_Kr.forEach(t),m3o=r(HAe," \u2014 "),JN=n(HAe,"A",{href:!0});var bKr=s(JN);g3o=r(bKr,"BlenderbotSmallForConditionalGeneration"),bKr.forEach(t),h3o=r(HAe," (BlenderbotSmall model)"),HAe.forEach(t),p3o=i(ue),I1=n(ue,"LI",{});var UAe=s(I1);Eie=n(UAe,"STRONG",{});var vKr=s(Eie);u3o=r(vKr,"encoder-decoder"),vKr.forEach(t),_3o=r(UAe," \u2014 "),YN=n(UAe,"A",{href:!0});var FKr=s(YN);b3o=r(FKr,"EncoderDecoderModel"),FKr.forEach(t),v3o=r(UAe," (Encoder decoder model)"),UAe.forEach(t),F3o=i(ue),q1=n(ue,"LI",{});var JAe=s(q1);Cie=n(JAe,"STRONG",{});var TKr=s(Cie);T3o=r(TKr,"fsmt"),TKr.forEach(t),M3o=r(JAe," \u2014 "),KN=n(JAe,"A",{href:!0});var MKr=s(KN);E3o=r(MKr,"FSMTForConditionalGeneration"),MKr.forEach(t),C3o=r(JAe," (FairSeq Machine-Translation model)"),JAe.forEach(t),w3o=i(ue),N1=n(ue,"LI",{});var YAe=s(N1);wie=n(YAe,"STRONG",{});var EKr=s(wie);A3o=r(EKr,"led"),EKr.forEach(t),y3o=r(YAe," \u2014 "),ZN=n(YAe,"A",{href:!0});var CKr=s(ZN);L3o=r(CKr,"LEDForConditionalGeneration"),CKr.forEach(t),x3o=r(YAe," (LED model)"),YAe.forEach(t),$3o=i(ue),j1=n(ue,"LI",{});var KAe=s(j1);Aie=n(KAe,"STRONG",{});var wKr=s(Aie);k3o=r(wKr,"m2m_100"),wKr.forEach(t),S3o=r(KAe," \u2014 "),ej=n(KAe,"A",{href:!0});var AKr=s(ej);R3o=r(AKr,"M2M100ForConditionalGeneration"),AKr.forEach(t),B3o=r(KAe," (M2M100 model)"),KAe.forEach(t),P3o=i(ue),D1=n(ue,"LI",{});var ZAe=s(D1);yie=n(ZAe,"STRONG",{});var yKr=s(yie);I3o=r(yKr,"marian"),yKr.forEach(t),q3o=r(ZAe," \u2014 "),oj=n(ZAe,"A",{href:!0});var LKr=s(oj);N3o=r(LKr,"MarianMTModel"),LKr.forEach(t),j3o=r(ZAe," (Marian model)"),ZAe.forEach(t),D3o=i(ue),G1=n(ue,"LI",{});var e0e=s(G1);Lie=n(e0e,"STRONG",{});var xKr=s(Lie);G3o=r(xKr,"mbart"),xKr.forEach(t),O3o=r(e0e," \u2014 "),rj=n(e0e,"A",{href:!0});var $Kr=s(rj);V3o=r($Kr,"MBartForConditionalGeneration"),$Kr.forEach(t),X3o=r(e0e," (mBART model)"),e0e.forEach(t),z3o=i(ue),O1=n(ue,"LI",{});var o0e=s(O1);xie=n(o0e,"STRONG",{});var kKr=s(xie);Q3o=r(kKr,"mt5"),kKr.forEach(t),W3o=r(o0e," \u2014 "),tj=n(o0e,"A",{href:!0});var SKr=s(tj);H3o=r(SKr,"MT5ForConditionalGeneration"),SKr.forEach(t),U3o=r(o0e," (mT5 model)"),o0e.forEach(t),J3o=i(ue),V1=n(ue,"LI",{});var r0e=s(V1);$ie=n(r0e,"STRONG",{});var RKr=s($ie);Y3o=r(RKr,"pegasus"),RKr.forEach(t),K3o=r(r0e," \u2014 "),aj=n(r0e,"A",{href:!0});var BKr=s(aj);Z3o=r(BKr,"PegasusForConditionalGeneration"),BKr.forEach(t),ewo=r(r0e," (Pegasus model)"),r0e.forEach(t),owo=i(ue),X1=n(ue,"LI",{});var t0e=s(X1);kie=n(t0e,"STRONG",{});var PKr=s(kie);rwo=r(PKr,"plbart"),PKr.forEach(t),two=r(t0e," \u2014 "),nj=n(t0e,"A",{href:!0});var IKr=s(nj);awo=r(IKr,"PLBartForConditionalGeneration"),IKr.forEach(t),nwo=r(t0e," (PLBart model)"),t0e.forEach(t),swo=i(ue),z1=n(ue,"LI",{});var a0e=s(z1);Sie=n(a0e,"STRONG",{});var qKr=s(Sie);lwo=r(qKr,"prophetnet"),qKr.forEach(t),iwo=r(a0e," \u2014 "),sj=n(a0e,"A",{href:!0});var NKr=s(sj);dwo=r(NKr,"ProphetNetForConditionalGeneration"),NKr.forEach(t),cwo=r(a0e," (ProphetNet model)"),a0e.forEach(t),fwo=i(ue),Q1=n(ue,"LI",{});var n0e=s(Q1);Rie=n(n0e,"STRONG",{});var jKr=s(Rie);mwo=r(jKr,"t5"),jKr.forEach(t),gwo=r(n0e," \u2014 "),lj=n(n0e,"A",{href:!0});var DKr=s(lj);hwo=r(DKr,"T5ForConditionalGeneration"),DKr.forEach(t),pwo=r(n0e," (T5 model)"),n0e.forEach(t),uwo=i(ue),W1=n(ue,"LI",{});var s0e=s(W1);Bie=n(s0e,"STRONG",{});var GKr=s(Bie);_wo=r(GKr,"tapex"),GKr.forEach(t),bwo=r(s0e," \u2014 "),ij=n(s0e,"A",{href:!0});var OKr=s(ij);vwo=r(OKr,"BartForConditionalGeneration"),OKr.forEach(t),Fwo=r(s0e," (TAPEX model)"),s0e.forEach(t),Two=i(ue),H1=n(ue,"LI",{});var l0e=s(H1);Pie=n(l0e,"STRONG",{});var VKr=s(Pie);Mwo=r(VKr,"xlm-prophetnet"),VKr.forEach(t),Ewo=r(l0e," \u2014 "),dj=n(l0e,"A",{href:!0});var XKr=s(dj);Cwo=r(XKr,"XLMProphetNetForConditionalGeneration"),XKr.forEach(t),wwo=r(l0e," (XLMProphetNet model)"),l0e.forEach(t),ue.forEach(t),Awo=i(ea),U1=n(ea,"P",{});var i0e=s(U1);ywo=r(i0e,"The model is set in evaluation mode by default using "),Iie=n(i0e,"CODE",{});var zKr=s(Iie);Lwo=r(zKr,"model.eval()"),zKr.forEach(t),xwo=r(i0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),qie=n(i0e,"CODE",{});var QKr=s(qie);$wo=r(QKr,"model.train()"),QKr.forEach(t),i0e.forEach(t),kwo=i(ea),T(J1.$$.fragment,ea),ea.forEach(t),js.forEach(t),mBe=i(f),$i=n(f,"H2",{class:!0});var hIe=s($i);Y1=n(hIe,"A",{id:!0,class:!0,href:!0});var WKr=s(Y1);Nie=n(WKr,"SPAN",{});var HKr=s(Nie);T(h0.$$.fragment,HKr),HKr.forEach(t),WKr.forEach(t),Swo=i(hIe),jie=n(hIe,"SPAN",{});var UKr=s(jie);Rwo=r(UKr,"AutoModelForSequenceClassification"),UKr.forEach(t),hIe.forEach(t),gBe=i(f),Ro=n(f,"DIV",{class:!0});var Ds=s(Ro);T(p0.$$.fragment,Ds),Bwo=i(Ds),ki=n(Ds,"P",{});var fY=s(ki);Pwo=r(fY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),cj=n(fY,"A",{href:!0});var JKr=s(cj);Iwo=r(JKr,"from_pretrained()"),JKr.forEach(t),qwo=r(fY," class method or the "),fj=n(fY,"A",{href:!0});var YKr=s(fj);Nwo=r(YKr,"from_config()"),YKr.forEach(t),jwo=r(fY,` class
method.`),fY.forEach(t),Dwo=i(Ds),u0=n(Ds,"P",{});var pIe=s(u0);Gwo=r(pIe,"This class cannot be instantiated directly using "),Die=n(pIe,"CODE",{});var KKr=s(Die);Owo=r(KKr,"__init__()"),KKr.forEach(t),Vwo=r(pIe," (throws an error)."),pIe.forEach(t),Xwo=i(Ds),at=n(Ds,"DIV",{class:!0});var S3=s(at);T(_0.$$.fragment,S3),zwo=i(S3),Gie=n(S3,"P",{});var ZKr=s(Gie);Qwo=r(ZKr,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),ZKr.forEach(t),Wwo=i(S3),Si=n(S3,"P",{});var mY=s(Si);Hwo=r(mY,`Note:
Loading a model from its configuration file does `),Oie=n(mY,"STRONG",{});var eZr=s(Oie);Uwo=r(eZr,"not"),eZr.forEach(t),Jwo=r(mY,` load the model weights. It only affects the
model\u2019s configuration. Use `),mj=n(mY,"A",{href:!0});var oZr=s(mj);Ywo=r(oZr,"from_pretrained()"),oZr.forEach(t),Kwo=r(mY," to load the model weights."),mY.forEach(t),Zwo=i(S3),T(K1.$$.fragment,S3),S3.forEach(t),eAo=i(Ds),Ze=n(Ds,"DIV",{class:!0});var oa=s(Ze);T(b0.$$.fragment,oa),oAo=i(oa),Vie=n(oa,"P",{});var rZr=s(Vie);rAo=r(rZr,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),rZr.forEach(t),tAo=i(oa),La=n(oa,"P",{});var R3=s(La);aAo=r(R3,"The model class to instantiate is selected based on the "),Xie=n(R3,"CODE",{});var tZr=s(Xie);nAo=r(tZr,"model_type"),tZr.forEach(t),sAo=r(R3,` property of the config object (either
passed as an argument or loaded from `),zie=n(R3,"CODE",{});var aZr=s(zie);lAo=r(aZr,"pretrained_model_name_or_path"),aZr.forEach(t),iAo=r(R3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qie=n(R3,"CODE",{});var nZr=s(Qie);dAo=r(nZr,"pretrained_model_name_or_path"),nZr.forEach(t),cAo=r(R3,":"),R3.forEach(t),fAo=i(oa),q=n(oa,"UL",{});var N=s(q);Z1=n(N,"LI",{});var d0e=s(Z1);Wie=n(d0e,"STRONG",{});var sZr=s(Wie);mAo=r(sZr,"albert"),sZr.forEach(t),gAo=r(d0e," \u2014 "),gj=n(d0e,"A",{href:!0});var lZr=s(gj);hAo=r(lZr,"AlbertForSequenceClassification"),lZr.forEach(t),pAo=r(d0e," (ALBERT model)"),d0e.forEach(t),uAo=i(N),e9=n(N,"LI",{});var c0e=s(e9);Hie=n(c0e,"STRONG",{});var iZr=s(Hie);_Ao=r(iZr,"bart"),iZr.forEach(t),bAo=r(c0e," \u2014 "),hj=n(c0e,"A",{href:!0});var dZr=s(hj);vAo=r(dZr,"BartForSequenceClassification"),dZr.forEach(t),FAo=r(c0e," (BART model)"),c0e.forEach(t),TAo=i(N),o9=n(N,"LI",{});var f0e=s(o9);Uie=n(f0e,"STRONG",{});var cZr=s(Uie);MAo=r(cZr,"bert"),cZr.forEach(t),EAo=r(f0e," \u2014 "),pj=n(f0e,"A",{href:!0});var fZr=s(pj);CAo=r(fZr,"BertForSequenceClassification"),fZr.forEach(t),wAo=r(f0e," (BERT model)"),f0e.forEach(t),AAo=i(N),r9=n(N,"LI",{});var m0e=s(r9);Jie=n(m0e,"STRONG",{});var mZr=s(Jie);yAo=r(mZr,"big_bird"),mZr.forEach(t),LAo=r(m0e," \u2014 "),uj=n(m0e,"A",{href:!0});var gZr=s(uj);xAo=r(gZr,"BigBirdForSequenceClassification"),gZr.forEach(t),$Ao=r(m0e," (BigBird model)"),m0e.forEach(t),kAo=i(N),t9=n(N,"LI",{});var g0e=s(t9);Yie=n(g0e,"STRONG",{});var hZr=s(Yie);SAo=r(hZr,"bigbird_pegasus"),hZr.forEach(t),RAo=r(g0e," \u2014 "),_j=n(g0e,"A",{href:!0});var pZr=s(_j);BAo=r(pZr,"BigBirdPegasusForSequenceClassification"),pZr.forEach(t),PAo=r(g0e," (BigBirdPegasus model)"),g0e.forEach(t),IAo=i(N),a9=n(N,"LI",{});var h0e=s(a9);Kie=n(h0e,"STRONG",{});var uZr=s(Kie);qAo=r(uZr,"camembert"),uZr.forEach(t),NAo=r(h0e," \u2014 "),bj=n(h0e,"A",{href:!0});var _Zr=s(bj);jAo=r(_Zr,"CamembertForSequenceClassification"),_Zr.forEach(t),DAo=r(h0e," (CamemBERT model)"),h0e.forEach(t),GAo=i(N),n9=n(N,"LI",{});var p0e=s(n9);Zie=n(p0e,"STRONG",{});var bZr=s(Zie);OAo=r(bZr,"canine"),bZr.forEach(t),VAo=r(p0e," \u2014 "),vj=n(p0e,"A",{href:!0});var vZr=s(vj);XAo=r(vZr,"CanineForSequenceClassification"),vZr.forEach(t),zAo=r(p0e," (Canine model)"),p0e.forEach(t),QAo=i(N),s9=n(N,"LI",{});var u0e=s(s9);ede=n(u0e,"STRONG",{});var FZr=s(ede);WAo=r(FZr,"convbert"),FZr.forEach(t),HAo=r(u0e," \u2014 "),Fj=n(u0e,"A",{href:!0});var TZr=s(Fj);UAo=r(TZr,"ConvBertForSequenceClassification"),TZr.forEach(t),JAo=r(u0e," (ConvBERT model)"),u0e.forEach(t),YAo=i(N),l9=n(N,"LI",{});var _0e=s(l9);ode=n(_0e,"STRONG",{});var MZr=s(ode);KAo=r(MZr,"ctrl"),MZr.forEach(t),ZAo=r(_0e," \u2014 "),Tj=n(_0e,"A",{href:!0});var EZr=s(Tj);e0o=r(EZr,"CTRLForSequenceClassification"),EZr.forEach(t),o0o=r(_0e," (CTRL model)"),_0e.forEach(t),r0o=i(N),i9=n(N,"LI",{});var b0e=s(i9);rde=n(b0e,"STRONG",{});var CZr=s(rde);t0o=r(CZr,"data2vec-text"),CZr.forEach(t),a0o=r(b0e," \u2014 "),Mj=n(b0e,"A",{href:!0});var wZr=s(Mj);n0o=r(wZr,"Data2VecTextForSequenceClassification"),wZr.forEach(t),s0o=r(b0e," (Data2VecText model)"),b0e.forEach(t),l0o=i(N),d9=n(N,"LI",{});var v0e=s(d9);tde=n(v0e,"STRONG",{});var AZr=s(tde);i0o=r(AZr,"deberta"),AZr.forEach(t),d0o=r(v0e," \u2014 "),Ej=n(v0e,"A",{href:!0});var yZr=s(Ej);c0o=r(yZr,"DebertaForSequenceClassification"),yZr.forEach(t),f0o=r(v0e," (DeBERTa model)"),v0e.forEach(t),m0o=i(N),c9=n(N,"LI",{});var F0e=s(c9);ade=n(F0e,"STRONG",{});var LZr=s(ade);g0o=r(LZr,"deberta-v2"),LZr.forEach(t),h0o=r(F0e," \u2014 "),Cj=n(F0e,"A",{href:!0});var xZr=s(Cj);p0o=r(xZr,"DebertaV2ForSequenceClassification"),xZr.forEach(t),u0o=r(F0e," (DeBERTa-v2 model)"),F0e.forEach(t),_0o=i(N),f9=n(N,"LI",{});var T0e=s(f9);nde=n(T0e,"STRONG",{});var $Zr=s(nde);b0o=r($Zr,"distilbert"),$Zr.forEach(t),v0o=r(T0e," \u2014 "),wj=n(T0e,"A",{href:!0});var kZr=s(wj);F0o=r(kZr,"DistilBertForSequenceClassification"),kZr.forEach(t),T0o=r(T0e," (DistilBERT model)"),T0e.forEach(t),M0o=i(N),m9=n(N,"LI",{});var M0e=s(m9);sde=n(M0e,"STRONG",{});var SZr=s(sde);E0o=r(SZr,"electra"),SZr.forEach(t),C0o=r(M0e," \u2014 "),Aj=n(M0e,"A",{href:!0});var RZr=s(Aj);w0o=r(RZr,"ElectraForSequenceClassification"),RZr.forEach(t),A0o=r(M0e," (ELECTRA model)"),M0e.forEach(t),y0o=i(N),g9=n(N,"LI",{});var E0e=s(g9);lde=n(E0e,"STRONG",{});var BZr=s(lde);L0o=r(BZr,"flaubert"),BZr.forEach(t),x0o=r(E0e," \u2014 "),yj=n(E0e,"A",{href:!0});var PZr=s(yj);$0o=r(PZr,"FlaubertForSequenceClassification"),PZr.forEach(t),k0o=r(E0e," (FlauBERT model)"),E0e.forEach(t),S0o=i(N),h9=n(N,"LI",{});var C0e=s(h9);ide=n(C0e,"STRONG",{});var IZr=s(ide);R0o=r(IZr,"fnet"),IZr.forEach(t),B0o=r(C0e," \u2014 "),Lj=n(C0e,"A",{href:!0});var qZr=s(Lj);P0o=r(qZr,"FNetForSequenceClassification"),qZr.forEach(t),I0o=r(C0e," (FNet model)"),C0e.forEach(t),q0o=i(N),p9=n(N,"LI",{});var w0e=s(p9);dde=n(w0e,"STRONG",{});var NZr=s(dde);N0o=r(NZr,"funnel"),NZr.forEach(t),j0o=r(w0e," \u2014 "),xj=n(w0e,"A",{href:!0});var jZr=s(xj);D0o=r(jZr,"FunnelForSequenceClassification"),jZr.forEach(t),G0o=r(w0e," (Funnel Transformer model)"),w0e.forEach(t),O0o=i(N),u9=n(N,"LI",{});var A0e=s(u9);cde=n(A0e,"STRONG",{});var DZr=s(cde);V0o=r(DZr,"gpt2"),DZr.forEach(t),X0o=r(A0e," \u2014 "),$j=n(A0e,"A",{href:!0});var GZr=s($j);z0o=r(GZr,"GPT2ForSequenceClassification"),GZr.forEach(t),Q0o=r(A0e," (OpenAI GPT-2 model)"),A0e.forEach(t),W0o=i(N),_9=n(N,"LI",{});var y0e=s(_9);fde=n(y0e,"STRONG",{});var OZr=s(fde);H0o=r(OZr,"gpt_neo"),OZr.forEach(t),U0o=r(y0e," \u2014 "),kj=n(y0e,"A",{href:!0});var VZr=s(kj);J0o=r(VZr,"GPTNeoForSequenceClassification"),VZr.forEach(t),Y0o=r(y0e," (GPT Neo model)"),y0e.forEach(t),K0o=i(N),b9=n(N,"LI",{});var L0e=s(b9);mde=n(L0e,"STRONG",{});var XZr=s(mde);Z0o=r(XZr,"gptj"),XZr.forEach(t),eyo=r(L0e," \u2014 "),Sj=n(L0e,"A",{href:!0});var zZr=s(Sj);oyo=r(zZr,"GPTJForSequenceClassification"),zZr.forEach(t),ryo=r(L0e," (GPT-J model)"),L0e.forEach(t),tyo=i(N),v9=n(N,"LI",{});var x0e=s(v9);gde=n(x0e,"STRONG",{});var QZr=s(gde);ayo=r(QZr,"ibert"),QZr.forEach(t),nyo=r(x0e," \u2014 "),Rj=n(x0e,"A",{href:!0});var WZr=s(Rj);syo=r(WZr,"IBertForSequenceClassification"),WZr.forEach(t),lyo=r(x0e," (I-BERT model)"),x0e.forEach(t),iyo=i(N),F9=n(N,"LI",{});var $0e=s(F9);hde=n($0e,"STRONG",{});var HZr=s(hde);dyo=r(HZr,"layoutlm"),HZr.forEach(t),cyo=r($0e," \u2014 "),Bj=n($0e,"A",{href:!0});var UZr=s(Bj);fyo=r(UZr,"LayoutLMForSequenceClassification"),UZr.forEach(t),myo=r($0e," (LayoutLM model)"),$0e.forEach(t),gyo=i(N),T9=n(N,"LI",{});var k0e=s(T9);pde=n(k0e,"STRONG",{});var JZr=s(pde);hyo=r(JZr,"layoutlmv2"),JZr.forEach(t),pyo=r(k0e," \u2014 "),Pj=n(k0e,"A",{href:!0});var YZr=s(Pj);uyo=r(YZr,"LayoutLMv2ForSequenceClassification"),YZr.forEach(t),_yo=r(k0e," (LayoutLMv2 model)"),k0e.forEach(t),byo=i(N),M9=n(N,"LI",{});var S0e=s(M9);ude=n(S0e,"STRONG",{});var KZr=s(ude);vyo=r(KZr,"led"),KZr.forEach(t),Fyo=r(S0e," \u2014 "),Ij=n(S0e,"A",{href:!0});var ZZr=s(Ij);Tyo=r(ZZr,"LEDForSequenceClassification"),ZZr.forEach(t),Myo=r(S0e," (LED model)"),S0e.forEach(t),Eyo=i(N),E9=n(N,"LI",{});var R0e=s(E9);_de=n(R0e,"STRONG",{});var eet=s(_de);Cyo=r(eet,"longformer"),eet.forEach(t),wyo=r(R0e," \u2014 "),qj=n(R0e,"A",{href:!0});var oet=s(qj);Ayo=r(oet,"LongformerForSequenceClassification"),oet.forEach(t),yyo=r(R0e," (Longformer model)"),R0e.forEach(t),Lyo=i(N),C9=n(N,"LI",{});var B0e=s(C9);bde=n(B0e,"STRONG",{});var ret=s(bde);xyo=r(ret,"mbart"),ret.forEach(t),$yo=r(B0e," \u2014 "),Nj=n(B0e,"A",{href:!0});var tet=s(Nj);kyo=r(tet,"MBartForSequenceClassification"),tet.forEach(t),Syo=r(B0e," (mBART model)"),B0e.forEach(t),Ryo=i(N),w9=n(N,"LI",{});var P0e=s(w9);vde=n(P0e,"STRONG",{});var aet=s(vde);Byo=r(aet,"megatron-bert"),aet.forEach(t),Pyo=r(P0e," \u2014 "),jj=n(P0e,"A",{href:!0});var net=s(jj);Iyo=r(net,"MegatronBertForSequenceClassification"),net.forEach(t),qyo=r(P0e," (MegatronBert model)"),P0e.forEach(t),Nyo=i(N),A9=n(N,"LI",{});var I0e=s(A9);Fde=n(I0e,"STRONG",{});var set=s(Fde);jyo=r(set,"mobilebert"),set.forEach(t),Dyo=r(I0e," \u2014 "),Dj=n(I0e,"A",{href:!0});var iet=s(Dj);Gyo=r(iet,"MobileBertForSequenceClassification"),iet.forEach(t),Oyo=r(I0e," (MobileBERT model)"),I0e.forEach(t),Vyo=i(N),y9=n(N,"LI",{});var q0e=s(y9);Tde=n(q0e,"STRONG",{});var det=s(Tde);Xyo=r(det,"mpnet"),det.forEach(t),zyo=r(q0e," \u2014 "),Gj=n(q0e,"A",{href:!0});var cet=s(Gj);Qyo=r(cet,"MPNetForSequenceClassification"),cet.forEach(t),Wyo=r(q0e," (MPNet model)"),q0e.forEach(t),Hyo=i(N),L9=n(N,"LI",{});var N0e=s(L9);Mde=n(N0e,"STRONG",{});var fet=s(Mde);Uyo=r(fet,"nystromformer"),fet.forEach(t),Jyo=r(N0e," \u2014 "),Oj=n(N0e,"A",{href:!0});var met=s(Oj);Yyo=r(met,"NystromformerForSequenceClassification"),met.forEach(t),Kyo=r(N0e," (Nystromformer model)"),N0e.forEach(t),Zyo=i(N),x9=n(N,"LI",{});var j0e=s(x9);Ede=n(j0e,"STRONG",{});var get=s(Ede);eLo=r(get,"openai-gpt"),get.forEach(t),oLo=r(j0e," \u2014 "),Vj=n(j0e,"A",{href:!0});var het=s(Vj);rLo=r(het,"OpenAIGPTForSequenceClassification"),het.forEach(t),tLo=r(j0e," (OpenAI GPT model)"),j0e.forEach(t),aLo=i(N),$9=n(N,"LI",{});var D0e=s($9);Cde=n(D0e,"STRONG",{});var pet=s(Cde);nLo=r(pet,"perceiver"),pet.forEach(t),sLo=r(D0e," \u2014 "),Xj=n(D0e,"A",{href:!0});var uet=s(Xj);lLo=r(uet,"PerceiverForSequenceClassification"),uet.forEach(t),iLo=r(D0e," (Perceiver model)"),D0e.forEach(t),dLo=i(N),k9=n(N,"LI",{});var G0e=s(k9);wde=n(G0e,"STRONG",{});var _et=s(wde);cLo=r(_et,"plbart"),_et.forEach(t),fLo=r(G0e," \u2014 "),zj=n(G0e,"A",{href:!0});var bet=s(zj);mLo=r(bet,"PLBartForSequenceClassification"),bet.forEach(t),gLo=r(G0e," (PLBart model)"),G0e.forEach(t),hLo=i(N),S9=n(N,"LI",{});var O0e=s(S9);Ade=n(O0e,"STRONG",{});var vet=s(Ade);pLo=r(vet,"qdqbert"),vet.forEach(t),uLo=r(O0e," \u2014 "),Qj=n(O0e,"A",{href:!0});var Fet=s(Qj);_Lo=r(Fet,"QDQBertForSequenceClassification"),Fet.forEach(t),bLo=r(O0e," (QDQBert model)"),O0e.forEach(t),vLo=i(N),R9=n(N,"LI",{});var V0e=s(R9);yde=n(V0e,"STRONG",{});var Tet=s(yde);FLo=r(Tet,"reformer"),Tet.forEach(t),TLo=r(V0e," \u2014 "),Wj=n(V0e,"A",{href:!0});var Met=s(Wj);MLo=r(Met,"ReformerForSequenceClassification"),Met.forEach(t),ELo=r(V0e," (Reformer model)"),V0e.forEach(t),CLo=i(N),B9=n(N,"LI",{});var X0e=s(B9);Lde=n(X0e,"STRONG",{});var Eet=s(Lde);wLo=r(Eet,"rembert"),Eet.forEach(t),ALo=r(X0e," \u2014 "),Hj=n(X0e,"A",{href:!0});var Cet=s(Hj);yLo=r(Cet,"RemBertForSequenceClassification"),Cet.forEach(t),LLo=r(X0e," (RemBERT model)"),X0e.forEach(t),xLo=i(N),P9=n(N,"LI",{});var z0e=s(P9);xde=n(z0e,"STRONG",{});var wet=s(xde);$Lo=r(wet,"roberta"),wet.forEach(t),kLo=r(z0e," \u2014 "),Uj=n(z0e,"A",{href:!0});var Aet=s(Uj);SLo=r(Aet,"RobertaForSequenceClassification"),Aet.forEach(t),RLo=r(z0e," (RoBERTa model)"),z0e.forEach(t),BLo=i(N),I9=n(N,"LI",{});var Q0e=s(I9);$de=n(Q0e,"STRONG",{});var yet=s($de);PLo=r(yet,"roformer"),yet.forEach(t),ILo=r(Q0e," \u2014 "),Jj=n(Q0e,"A",{href:!0});var Let=s(Jj);qLo=r(Let,"RoFormerForSequenceClassification"),Let.forEach(t),NLo=r(Q0e," (RoFormer model)"),Q0e.forEach(t),jLo=i(N),q9=n(N,"LI",{});var W0e=s(q9);kde=n(W0e,"STRONG",{});var xet=s(kde);DLo=r(xet,"squeezebert"),xet.forEach(t),GLo=r(W0e," \u2014 "),Yj=n(W0e,"A",{href:!0});var $et=s(Yj);OLo=r($et,"SqueezeBertForSequenceClassification"),$et.forEach(t),VLo=r(W0e," (SqueezeBERT model)"),W0e.forEach(t),XLo=i(N),N9=n(N,"LI",{});var H0e=s(N9);Sde=n(H0e,"STRONG",{});var ket=s(Sde);zLo=r(ket,"tapas"),ket.forEach(t),QLo=r(H0e," \u2014 "),Kj=n(H0e,"A",{href:!0});var Set=s(Kj);WLo=r(Set,"TapasForSequenceClassification"),Set.forEach(t),HLo=r(H0e," (TAPAS model)"),H0e.forEach(t),ULo=i(N),j9=n(N,"LI",{});var U0e=s(j9);Rde=n(U0e,"STRONG",{});var Ret=s(Rde);JLo=r(Ret,"tapex"),Ret.forEach(t),YLo=r(U0e," \u2014 "),Zj=n(U0e,"A",{href:!0});var Bet=s(Zj);KLo=r(Bet,"BartForSequenceClassification"),Bet.forEach(t),ZLo=r(U0e," (TAPEX model)"),U0e.forEach(t),e8o=i(N),D9=n(N,"LI",{});var J0e=s(D9);Bde=n(J0e,"STRONG",{});var Pet=s(Bde);o8o=r(Pet,"transfo-xl"),Pet.forEach(t),r8o=r(J0e," \u2014 "),eD=n(J0e,"A",{href:!0});var Iet=s(eD);t8o=r(Iet,"TransfoXLForSequenceClassification"),Iet.forEach(t),a8o=r(J0e," (Transformer-XL model)"),J0e.forEach(t),n8o=i(N),G9=n(N,"LI",{});var Y0e=s(G9);Pde=n(Y0e,"STRONG",{});var qet=s(Pde);s8o=r(qet,"xlm"),qet.forEach(t),l8o=r(Y0e," \u2014 "),oD=n(Y0e,"A",{href:!0});var Net=s(oD);i8o=r(Net,"XLMForSequenceClassification"),Net.forEach(t),d8o=r(Y0e," (XLM model)"),Y0e.forEach(t),c8o=i(N),O9=n(N,"LI",{});var K0e=s(O9);Ide=n(K0e,"STRONG",{});var jet=s(Ide);f8o=r(jet,"xlm-roberta"),jet.forEach(t),m8o=r(K0e," \u2014 "),rD=n(K0e,"A",{href:!0});var Det=s(rD);g8o=r(Det,"XLMRobertaForSequenceClassification"),Det.forEach(t),h8o=r(K0e," (XLM-RoBERTa model)"),K0e.forEach(t),p8o=i(N),V9=n(N,"LI",{});var Z0e=s(V9);qde=n(Z0e,"STRONG",{});var Get=s(qde);u8o=r(Get,"xlm-roberta-xl"),Get.forEach(t),_8o=r(Z0e," \u2014 "),tD=n(Z0e,"A",{href:!0});var Oet=s(tD);b8o=r(Oet,"XLMRobertaXLForSequenceClassification"),Oet.forEach(t),v8o=r(Z0e," (XLM-RoBERTa-XL model)"),Z0e.forEach(t),F8o=i(N),X9=n(N,"LI",{});var eye=s(X9);Nde=n(eye,"STRONG",{});var Vet=s(Nde);T8o=r(Vet,"xlnet"),Vet.forEach(t),M8o=r(eye," \u2014 "),aD=n(eye,"A",{href:!0});var Xet=s(aD);E8o=r(Xet,"XLNetForSequenceClassification"),Xet.forEach(t),C8o=r(eye," (XLNet model)"),eye.forEach(t),w8o=i(N),z9=n(N,"LI",{});var oye=s(z9);jde=n(oye,"STRONG",{});var zet=s(jde);A8o=r(zet,"yoso"),zet.forEach(t),y8o=r(oye," \u2014 "),nD=n(oye,"A",{href:!0});var Qet=s(nD);L8o=r(Qet,"YosoForSequenceClassification"),Qet.forEach(t),x8o=r(oye," (YOSO model)"),oye.forEach(t),N.forEach(t),$8o=i(oa),Q9=n(oa,"P",{});var rye=s(Q9);k8o=r(rye,"The model is set in evaluation mode by default using "),Dde=n(rye,"CODE",{});var Wet=s(Dde);S8o=r(Wet,"model.eval()"),Wet.forEach(t),R8o=r(rye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Gde=n(rye,"CODE",{});var Het=s(Gde);B8o=r(Het,"model.train()"),Het.forEach(t),rye.forEach(t),P8o=i(oa),T(W9.$$.fragment,oa),oa.forEach(t),Ds.forEach(t),hBe=i(f),Ri=n(f,"H2",{class:!0});var uIe=s(Ri);H9=n(uIe,"A",{id:!0,class:!0,href:!0});var Uet=s(H9);Ode=n(Uet,"SPAN",{});var Jet=s(Ode);T(v0.$$.fragment,Jet),Jet.forEach(t),Uet.forEach(t),I8o=i(uIe),Vde=n(uIe,"SPAN",{});var Yet=s(Vde);q8o=r(Yet,"AutoModelForMultipleChoice"),Yet.forEach(t),uIe.forEach(t),pBe=i(f),Bo=n(f,"DIV",{class:!0});var Gs=s(Bo);T(F0.$$.fragment,Gs),N8o=i(Gs),Bi=n(Gs,"P",{});var gY=s(Bi);j8o=r(gY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),sD=n(gY,"A",{href:!0});var Ket=s(sD);D8o=r(Ket,"from_pretrained()"),Ket.forEach(t),G8o=r(gY," class method or the "),lD=n(gY,"A",{href:!0});var Zet=s(lD);O8o=r(Zet,"from_config()"),Zet.forEach(t),V8o=r(gY,` class
method.`),gY.forEach(t),X8o=i(Gs),T0=n(Gs,"P",{});var _Ie=s(T0);z8o=r(_Ie,"This class cannot be instantiated directly using "),Xde=n(_Ie,"CODE",{});var eot=s(Xde);Q8o=r(eot,"__init__()"),eot.forEach(t),W8o=r(_Ie," (throws an error)."),_Ie.forEach(t),H8o=i(Gs),nt=n(Gs,"DIV",{class:!0});var B3=s(nt);T(M0.$$.fragment,B3),U8o=i(B3),zde=n(B3,"P",{});var oot=s(zde);J8o=r(oot,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),oot.forEach(t),Y8o=i(B3),Pi=n(B3,"P",{});var hY=s(Pi);K8o=r(hY,`Note:
Loading a model from its configuration file does `),Qde=n(hY,"STRONG",{});var rot=s(Qde);Z8o=r(rot,"not"),rot.forEach(t),exo=r(hY,` load the model weights. It only affects the
model\u2019s configuration. Use `),iD=n(hY,"A",{href:!0});var tot=s(iD);oxo=r(tot,"from_pretrained()"),tot.forEach(t),rxo=r(hY," to load the model weights."),hY.forEach(t),txo=i(B3),T(U9.$$.fragment,B3),B3.forEach(t),axo=i(Gs),eo=n(Gs,"DIV",{class:!0});var ra=s(eo);T(E0.$$.fragment,ra),nxo=i(ra),Wde=n(ra,"P",{});var aot=s(Wde);sxo=r(aot,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),aot.forEach(t),lxo=i(ra),xa=n(ra,"P",{});var P3=s(xa);ixo=r(P3,"The model class to instantiate is selected based on the "),Hde=n(P3,"CODE",{});var not=s(Hde);dxo=r(not,"model_type"),not.forEach(t),cxo=r(P3,` property of the config object (either
passed as an argument or loaded from `),Ude=n(P3,"CODE",{});var sot=s(Ude);fxo=r(sot,"pretrained_model_name_or_path"),sot.forEach(t),mxo=r(P3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jde=n(P3,"CODE",{});var lot=s(Jde);gxo=r(lot,"pretrained_model_name_or_path"),lot.forEach(t),hxo=r(P3,":"),P3.forEach(t),pxo=i(ra),Y=n(ra,"UL",{});var K=s(Y);J9=n(K,"LI",{});var tye=s(J9);Yde=n(tye,"STRONG",{});var iot=s(Yde);uxo=r(iot,"albert"),iot.forEach(t),_xo=r(tye," \u2014 "),dD=n(tye,"A",{href:!0});var dot=s(dD);bxo=r(dot,"AlbertForMultipleChoice"),dot.forEach(t),vxo=r(tye," (ALBERT model)"),tye.forEach(t),Fxo=i(K),Y9=n(K,"LI",{});var aye=s(Y9);Kde=n(aye,"STRONG",{});var cot=s(Kde);Txo=r(cot,"bert"),cot.forEach(t),Mxo=r(aye," \u2014 "),cD=n(aye,"A",{href:!0});var fot=s(cD);Exo=r(fot,"BertForMultipleChoice"),fot.forEach(t),Cxo=r(aye," (BERT model)"),aye.forEach(t),wxo=i(K),K9=n(K,"LI",{});var nye=s(K9);Zde=n(nye,"STRONG",{});var mot=s(Zde);Axo=r(mot,"big_bird"),mot.forEach(t),yxo=r(nye," \u2014 "),fD=n(nye,"A",{href:!0});var got=s(fD);Lxo=r(got,"BigBirdForMultipleChoice"),got.forEach(t),xxo=r(nye," (BigBird model)"),nye.forEach(t),$xo=i(K),Z9=n(K,"LI",{});var sye=s(Z9);ece=n(sye,"STRONG",{});var hot=s(ece);kxo=r(hot,"camembert"),hot.forEach(t),Sxo=r(sye," \u2014 "),mD=n(sye,"A",{href:!0});var pot=s(mD);Rxo=r(pot,"CamembertForMultipleChoice"),pot.forEach(t),Bxo=r(sye," (CamemBERT model)"),sye.forEach(t),Pxo=i(K),eb=n(K,"LI",{});var lye=s(eb);oce=n(lye,"STRONG",{});var uot=s(oce);Ixo=r(uot,"canine"),uot.forEach(t),qxo=r(lye," \u2014 "),gD=n(lye,"A",{href:!0});var _ot=s(gD);Nxo=r(_ot,"CanineForMultipleChoice"),_ot.forEach(t),jxo=r(lye," (Canine model)"),lye.forEach(t),Dxo=i(K),ob=n(K,"LI",{});var iye=s(ob);rce=n(iye,"STRONG",{});var bot=s(rce);Gxo=r(bot,"convbert"),bot.forEach(t),Oxo=r(iye," \u2014 "),hD=n(iye,"A",{href:!0});var vot=s(hD);Vxo=r(vot,"ConvBertForMultipleChoice"),vot.forEach(t),Xxo=r(iye," (ConvBERT model)"),iye.forEach(t),zxo=i(K),rb=n(K,"LI",{});var dye=s(rb);tce=n(dye,"STRONG",{});var Fot=s(tce);Qxo=r(Fot,"data2vec-text"),Fot.forEach(t),Wxo=r(dye," \u2014 "),pD=n(dye,"A",{href:!0});var Tot=s(pD);Hxo=r(Tot,"Data2VecTextForMultipleChoice"),Tot.forEach(t),Uxo=r(dye," (Data2VecText model)"),dye.forEach(t),Jxo=i(K),tb=n(K,"LI",{});var cye=s(tb);ace=n(cye,"STRONG",{});var Mot=s(ace);Yxo=r(Mot,"distilbert"),Mot.forEach(t),Kxo=r(cye," \u2014 "),uD=n(cye,"A",{href:!0});var Eot=s(uD);Zxo=r(Eot,"DistilBertForMultipleChoice"),Eot.forEach(t),e7o=r(cye," (DistilBERT model)"),cye.forEach(t),o7o=i(K),ab=n(K,"LI",{});var fye=s(ab);nce=n(fye,"STRONG",{});var Cot=s(nce);r7o=r(Cot,"electra"),Cot.forEach(t),t7o=r(fye," \u2014 "),_D=n(fye,"A",{href:!0});var wot=s(_D);a7o=r(wot,"ElectraForMultipleChoice"),wot.forEach(t),n7o=r(fye," (ELECTRA model)"),fye.forEach(t),s7o=i(K),nb=n(K,"LI",{});var mye=s(nb);sce=n(mye,"STRONG",{});var Aot=s(sce);l7o=r(Aot,"flaubert"),Aot.forEach(t),i7o=r(mye," \u2014 "),bD=n(mye,"A",{href:!0});var yot=s(bD);d7o=r(yot,"FlaubertForMultipleChoice"),yot.forEach(t),c7o=r(mye," (FlauBERT model)"),mye.forEach(t),f7o=i(K),sb=n(K,"LI",{});var gye=s(sb);lce=n(gye,"STRONG",{});var Lot=s(lce);m7o=r(Lot,"fnet"),Lot.forEach(t),g7o=r(gye," \u2014 "),vD=n(gye,"A",{href:!0});var xot=s(vD);h7o=r(xot,"FNetForMultipleChoice"),xot.forEach(t),p7o=r(gye," (FNet model)"),gye.forEach(t),u7o=i(K),lb=n(K,"LI",{});var hye=s(lb);ice=n(hye,"STRONG",{});var $ot=s(ice);_7o=r($ot,"funnel"),$ot.forEach(t),b7o=r(hye," \u2014 "),FD=n(hye,"A",{href:!0});var kot=s(FD);v7o=r(kot,"FunnelForMultipleChoice"),kot.forEach(t),F7o=r(hye," (Funnel Transformer model)"),hye.forEach(t),T7o=i(K),ib=n(K,"LI",{});var pye=s(ib);dce=n(pye,"STRONG",{});var Sot=s(dce);M7o=r(Sot,"ibert"),Sot.forEach(t),E7o=r(pye," \u2014 "),TD=n(pye,"A",{href:!0});var Rot=s(TD);C7o=r(Rot,"IBertForMultipleChoice"),Rot.forEach(t),w7o=r(pye," (I-BERT model)"),pye.forEach(t),A7o=i(K),db=n(K,"LI",{});var uye=s(db);cce=n(uye,"STRONG",{});var Bot=s(cce);y7o=r(Bot,"longformer"),Bot.forEach(t),L7o=r(uye," \u2014 "),MD=n(uye,"A",{href:!0});var Pot=s(MD);x7o=r(Pot,"LongformerForMultipleChoice"),Pot.forEach(t),$7o=r(uye," (Longformer model)"),uye.forEach(t),k7o=i(K),cb=n(K,"LI",{});var _ye=s(cb);fce=n(_ye,"STRONG",{});var Iot=s(fce);S7o=r(Iot,"megatron-bert"),Iot.forEach(t),R7o=r(_ye," \u2014 "),ED=n(_ye,"A",{href:!0});var qot=s(ED);B7o=r(qot,"MegatronBertForMultipleChoice"),qot.forEach(t),P7o=r(_ye," (MegatronBert model)"),_ye.forEach(t),I7o=i(K),fb=n(K,"LI",{});var bye=s(fb);mce=n(bye,"STRONG",{});var Not=s(mce);q7o=r(Not,"mobilebert"),Not.forEach(t),N7o=r(bye," \u2014 "),CD=n(bye,"A",{href:!0});var jot=s(CD);j7o=r(jot,"MobileBertForMultipleChoice"),jot.forEach(t),D7o=r(bye," (MobileBERT model)"),bye.forEach(t),G7o=i(K),mb=n(K,"LI",{});var vye=s(mb);gce=n(vye,"STRONG",{});var Dot=s(gce);O7o=r(Dot,"mpnet"),Dot.forEach(t),V7o=r(vye," \u2014 "),wD=n(vye,"A",{href:!0});var Got=s(wD);X7o=r(Got,"MPNetForMultipleChoice"),Got.forEach(t),z7o=r(vye," (MPNet model)"),vye.forEach(t),Q7o=i(K),gb=n(K,"LI",{});var Fye=s(gb);hce=n(Fye,"STRONG",{});var Oot=s(hce);W7o=r(Oot,"nystromformer"),Oot.forEach(t),H7o=r(Fye," \u2014 "),AD=n(Fye,"A",{href:!0});var Vot=s(AD);U7o=r(Vot,"NystromformerForMultipleChoice"),Vot.forEach(t),J7o=r(Fye," (Nystromformer model)"),Fye.forEach(t),Y7o=i(K),hb=n(K,"LI",{});var Tye=s(hb);pce=n(Tye,"STRONG",{});var Xot=s(pce);K7o=r(Xot,"qdqbert"),Xot.forEach(t),Z7o=r(Tye," \u2014 "),yD=n(Tye,"A",{href:!0});var zot=s(yD);e$o=r(zot,"QDQBertForMultipleChoice"),zot.forEach(t),o$o=r(Tye," (QDQBert model)"),Tye.forEach(t),r$o=i(K),pb=n(K,"LI",{});var Mye=s(pb);uce=n(Mye,"STRONG",{});var Qot=s(uce);t$o=r(Qot,"rembert"),Qot.forEach(t),a$o=r(Mye," \u2014 "),LD=n(Mye,"A",{href:!0});var Wot=s(LD);n$o=r(Wot,"RemBertForMultipleChoice"),Wot.forEach(t),s$o=r(Mye," (RemBERT model)"),Mye.forEach(t),l$o=i(K),ub=n(K,"LI",{});var Eye=s(ub);_ce=n(Eye,"STRONG",{});var Hot=s(_ce);i$o=r(Hot,"roberta"),Hot.forEach(t),d$o=r(Eye," \u2014 "),xD=n(Eye,"A",{href:!0});var Uot=s(xD);c$o=r(Uot,"RobertaForMultipleChoice"),Uot.forEach(t),f$o=r(Eye," (RoBERTa model)"),Eye.forEach(t),m$o=i(K),_b=n(K,"LI",{});var Cye=s(_b);bce=n(Cye,"STRONG",{});var Jot=s(bce);g$o=r(Jot,"roformer"),Jot.forEach(t),h$o=r(Cye," \u2014 "),$D=n(Cye,"A",{href:!0});var Yot=s($D);p$o=r(Yot,"RoFormerForMultipleChoice"),Yot.forEach(t),u$o=r(Cye," (RoFormer model)"),Cye.forEach(t),_$o=i(K),bb=n(K,"LI",{});var wye=s(bb);vce=n(wye,"STRONG",{});var Kot=s(vce);b$o=r(Kot,"squeezebert"),Kot.forEach(t),v$o=r(wye," \u2014 "),kD=n(wye,"A",{href:!0});var Zot=s(kD);F$o=r(Zot,"SqueezeBertForMultipleChoice"),Zot.forEach(t),T$o=r(wye," (SqueezeBERT model)"),wye.forEach(t),M$o=i(K),vb=n(K,"LI",{});var Aye=s(vb);Fce=n(Aye,"STRONG",{});var ert=s(Fce);E$o=r(ert,"xlm"),ert.forEach(t),C$o=r(Aye," \u2014 "),SD=n(Aye,"A",{href:!0});var ort=s(SD);w$o=r(ort,"XLMForMultipleChoice"),ort.forEach(t),A$o=r(Aye," (XLM model)"),Aye.forEach(t),y$o=i(K),Fb=n(K,"LI",{});var yye=s(Fb);Tce=n(yye,"STRONG",{});var rrt=s(Tce);L$o=r(rrt,"xlm-roberta"),rrt.forEach(t),x$o=r(yye," \u2014 "),RD=n(yye,"A",{href:!0});var trt=s(RD);$$o=r(trt,"XLMRobertaForMultipleChoice"),trt.forEach(t),k$o=r(yye," (XLM-RoBERTa model)"),yye.forEach(t),S$o=i(K),Tb=n(K,"LI",{});var Lye=s(Tb);Mce=n(Lye,"STRONG",{});var art=s(Mce);R$o=r(art,"xlm-roberta-xl"),art.forEach(t),B$o=r(Lye," \u2014 "),BD=n(Lye,"A",{href:!0});var nrt=s(BD);P$o=r(nrt,"XLMRobertaXLForMultipleChoice"),nrt.forEach(t),I$o=r(Lye," (XLM-RoBERTa-XL model)"),Lye.forEach(t),q$o=i(K),Mb=n(K,"LI",{});var xye=s(Mb);Ece=n(xye,"STRONG",{});var srt=s(Ece);N$o=r(srt,"xlnet"),srt.forEach(t),j$o=r(xye," \u2014 "),PD=n(xye,"A",{href:!0});var lrt=s(PD);D$o=r(lrt,"XLNetForMultipleChoice"),lrt.forEach(t),G$o=r(xye," (XLNet model)"),xye.forEach(t),O$o=i(K),Eb=n(K,"LI",{});var $ye=s(Eb);Cce=n($ye,"STRONG",{});var irt=s(Cce);V$o=r(irt,"yoso"),irt.forEach(t),X$o=r($ye," \u2014 "),ID=n($ye,"A",{href:!0});var drt=s(ID);z$o=r(drt,"YosoForMultipleChoice"),drt.forEach(t),Q$o=r($ye," (YOSO model)"),$ye.forEach(t),K.forEach(t),W$o=i(ra),Cb=n(ra,"P",{});var kye=s(Cb);H$o=r(kye,"The model is set in evaluation mode by default using "),wce=n(kye,"CODE",{});var crt=s(wce);U$o=r(crt,"model.eval()"),crt.forEach(t),J$o=r(kye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ace=n(kye,"CODE",{});var frt=s(Ace);Y$o=r(frt,"model.train()"),frt.forEach(t),kye.forEach(t),K$o=i(ra),T(wb.$$.fragment,ra),ra.forEach(t),Gs.forEach(t),uBe=i(f),Ii=n(f,"H2",{class:!0});var bIe=s(Ii);Ab=n(bIe,"A",{id:!0,class:!0,href:!0});var mrt=s(Ab);yce=n(mrt,"SPAN",{});var grt=s(yce);T(C0.$$.fragment,grt),grt.forEach(t),mrt.forEach(t),Z$o=i(bIe),Lce=n(bIe,"SPAN",{});var hrt=s(Lce);eko=r(hrt,"AutoModelForNextSentencePrediction"),hrt.forEach(t),bIe.forEach(t),_Be=i(f),Po=n(f,"DIV",{class:!0});var Os=s(Po);T(w0.$$.fragment,Os),oko=i(Os),qi=n(Os,"P",{});var pY=s(qi);rko=r(pY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),qD=n(pY,"A",{href:!0});var prt=s(qD);tko=r(prt,"from_pretrained()"),prt.forEach(t),ako=r(pY," class method or the "),ND=n(pY,"A",{href:!0});var urt=s(ND);nko=r(urt,"from_config()"),urt.forEach(t),sko=r(pY,` class
method.`),pY.forEach(t),lko=i(Os),A0=n(Os,"P",{});var vIe=s(A0);iko=r(vIe,"This class cannot be instantiated directly using "),xce=n(vIe,"CODE",{});var _rt=s(xce);dko=r(_rt,"__init__()"),_rt.forEach(t),cko=r(vIe," (throws an error)."),vIe.forEach(t),fko=i(Os),st=n(Os,"DIV",{class:!0});var I3=s(st);T(y0.$$.fragment,I3),mko=i(I3),$ce=n(I3,"P",{});var brt=s($ce);gko=r(brt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),brt.forEach(t),hko=i(I3),Ni=n(I3,"P",{});var uY=s(Ni);pko=r(uY,`Note:
Loading a model from its configuration file does `),kce=n(uY,"STRONG",{});var vrt=s(kce);uko=r(vrt,"not"),vrt.forEach(t),_ko=r(uY,` load the model weights. It only affects the
model\u2019s configuration. Use `),jD=n(uY,"A",{href:!0});var Frt=s(jD);bko=r(Frt,"from_pretrained()"),Frt.forEach(t),vko=r(uY," to load the model weights."),uY.forEach(t),Fko=i(I3),T(yb.$$.fragment,I3),I3.forEach(t),Tko=i(Os),oo=n(Os,"DIV",{class:!0});var ta=s(oo);T(L0.$$.fragment,ta),Mko=i(ta),Sce=n(ta,"P",{});var Trt=s(Sce);Eko=r(Trt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Trt.forEach(t),Cko=i(ta),$a=n(ta,"P",{});var q3=s($a);wko=r(q3,"The model class to instantiate is selected based on the "),Rce=n(q3,"CODE",{});var Mrt=s(Rce);Ako=r(Mrt,"model_type"),Mrt.forEach(t),yko=r(q3,` property of the config object (either
passed as an argument or loaded from `),Bce=n(q3,"CODE",{});var Ert=s(Bce);Lko=r(Ert,"pretrained_model_name_or_path"),Ert.forEach(t),xko=r(q3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Pce=n(q3,"CODE",{});var Crt=s(Pce);$ko=r(Crt,"pretrained_model_name_or_path"),Crt.forEach(t),kko=r(q3,":"),q3.forEach(t),Sko=i(ta),Ur=n(ta,"UL",{});var Vs=s(Ur);Lb=n(Vs,"LI",{});var Sye=s(Lb);Ice=n(Sye,"STRONG",{});var wrt=s(Ice);Rko=r(wrt,"bert"),wrt.forEach(t),Bko=r(Sye," \u2014 "),DD=n(Sye,"A",{href:!0});var Art=s(DD);Pko=r(Art,"BertForNextSentencePrediction"),Art.forEach(t),Iko=r(Sye," (BERT model)"),Sye.forEach(t),qko=i(Vs),xb=n(Vs,"LI",{});var Rye=s(xb);qce=n(Rye,"STRONG",{});var yrt=s(qce);Nko=r(yrt,"fnet"),yrt.forEach(t),jko=r(Rye," \u2014 "),GD=n(Rye,"A",{href:!0});var Lrt=s(GD);Dko=r(Lrt,"FNetForNextSentencePrediction"),Lrt.forEach(t),Gko=r(Rye," (FNet model)"),Rye.forEach(t),Oko=i(Vs),$b=n(Vs,"LI",{});var Bye=s($b);Nce=n(Bye,"STRONG",{});var xrt=s(Nce);Vko=r(xrt,"megatron-bert"),xrt.forEach(t),Xko=r(Bye," \u2014 "),OD=n(Bye,"A",{href:!0});var $rt=s(OD);zko=r($rt,"MegatronBertForNextSentencePrediction"),$rt.forEach(t),Qko=r(Bye," (MegatronBert model)"),Bye.forEach(t),Wko=i(Vs),kb=n(Vs,"LI",{});var Pye=s(kb);jce=n(Pye,"STRONG",{});var krt=s(jce);Hko=r(krt,"mobilebert"),krt.forEach(t),Uko=r(Pye," \u2014 "),VD=n(Pye,"A",{href:!0});var Srt=s(VD);Jko=r(Srt,"MobileBertForNextSentencePrediction"),Srt.forEach(t),Yko=r(Pye," (MobileBERT model)"),Pye.forEach(t),Kko=i(Vs),Sb=n(Vs,"LI",{});var Iye=s(Sb);Dce=n(Iye,"STRONG",{});var Rrt=s(Dce);Zko=r(Rrt,"qdqbert"),Rrt.forEach(t),eSo=r(Iye," \u2014 "),XD=n(Iye,"A",{href:!0});var Brt=s(XD);oSo=r(Brt,"QDQBertForNextSentencePrediction"),Brt.forEach(t),rSo=r(Iye," (QDQBert model)"),Iye.forEach(t),Vs.forEach(t),tSo=i(ta),Rb=n(ta,"P",{});var qye=s(Rb);aSo=r(qye,"The model is set in evaluation mode by default using "),Gce=n(qye,"CODE",{});var Prt=s(Gce);nSo=r(Prt,"model.eval()"),Prt.forEach(t),sSo=r(qye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Oce=n(qye,"CODE",{});var Irt=s(Oce);lSo=r(Irt,"model.train()"),Irt.forEach(t),qye.forEach(t),iSo=i(ta),T(Bb.$$.fragment,ta),ta.forEach(t),Os.forEach(t),bBe=i(f),ji=n(f,"H2",{class:!0});var FIe=s(ji);Pb=n(FIe,"A",{id:!0,class:!0,href:!0});var qrt=s(Pb);Vce=n(qrt,"SPAN",{});var Nrt=s(Vce);T(x0.$$.fragment,Nrt),Nrt.forEach(t),qrt.forEach(t),dSo=i(FIe),Xce=n(FIe,"SPAN",{});var jrt=s(Xce);cSo=r(jrt,"AutoModelForTokenClassification"),jrt.forEach(t),FIe.forEach(t),vBe=i(f),Io=n(f,"DIV",{class:!0});var Xs=s(Io);T($0.$$.fragment,Xs),fSo=i(Xs),Di=n(Xs,"P",{});var _Y=s(Di);mSo=r(_Y,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),zD=n(_Y,"A",{href:!0});var Drt=s(zD);gSo=r(Drt,"from_pretrained()"),Drt.forEach(t),hSo=r(_Y," class method or the "),QD=n(_Y,"A",{href:!0});var Grt=s(QD);pSo=r(Grt,"from_config()"),Grt.forEach(t),uSo=r(_Y,` class
method.`),_Y.forEach(t),_So=i(Xs),k0=n(Xs,"P",{});var TIe=s(k0);bSo=r(TIe,"This class cannot be instantiated directly using "),zce=n(TIe,"CODE",{});var Ort=s(zce);vSo=r(Ort,"__init__()"),Ort.forEach(t),FSo=r(TIe," (throws an error)."),TIe.forEach(t),TSo=i(Xs),lt=n(Xs,"DIV",{class:!0});var N3=s(lt);T(S0.$$.fragment,N3),MSo=i(N3),Qce=n(N3,"P",{});var Vrt=s(Qce);ESo=r(Vrt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Vrt.forEach(t),CSo=i(N3),Gi=n(N3,"P",{});var bY=s(Gi);wSo=r(bY,`Note:
Loading a model from its configuration file does `),Wce=n(bY,"STRONG",{});var Xrt=s(Wce);ASo=r(Xrt,"not"),Xrt.forEach(t),ySo=r(bY,` load the model weights. It only affects the
model\u2019s configuration. Use `),WD=n(bY,"A",{href:!0});var zrt=s(WD);LSo=r(zrt,"from_pretrained()"),zrt.forEach(t),xSo=r(bY," to load the model weights."),bY.forEach(t),$So=i(N3),T(Ib.$$.fragment,N3),N3.forEach(t),kSo=i(Xs),ro=n(Xs,"DIV",{class:!0});var aa=s(ro);T(R0.$$.fragment,aa),SSo=i(aa),Hce=n(aa,"P",{});var Qrt=s(Hce);RSo=r(Qrt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Qrt.forEach(t),BSo=i(aa),ka=n(aa,"P",{});var j3=s(ka);PSo=r(j3,"The model class to instantiate is selected based on the "),Uce=n(j3,"CODE",{});var Wrt=s(Uce);ISo=r(Wrt,"model_type"),Wrt.forEach(t),qSo=r(j3,` property of the config object (either
passed as an argument or loaded from `),Jce=n(j3,"CODE",{});var Hrt=s(Jce);NSo=r(Hrt,"pretrained_model_name_or_path"),Hrt.forEach(t),jSo=r(j3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yce=n(j3,"CODE",{});var Urt=s(Yce);DSo=r(Urt,"pretrained_model_name_or_path"),Urt.forEach(t),GSo=r(j3,":"),j3.forEach(t),OSo=i(aa),U=n(aa,"UL",{});var J=s(U);qb=n(J,"LI",{});var Nye=s(qb);Kce=n(Nye,"STRONG",{});var Jrt=s(Kce);VSo=r(Jrt,"albert"),Jrt.forEach(t),XSo=r(Nye," \u2014 "),HD=n(Nye,"A",{href:!0});var Yrt=s(HD);zSo=r(Yrt,"AlbertForTokenClassification"),Yrt.forEach(t),QSo=r(Nye," (ALBERT model)"),Nye.forEach(t),WSo=i(J),Nb=n(J,"LI",{});var jye=s(Nb);Zce=n(jye,"STRONG",{});var Krt=s(Zce);HSo=r(Krt,"bert"),Krt.forEach(t),USo=r(jye," \u2014 "),UD=n(jye,"A",{href:!0});var Zrt=s(UD);JSo=r(Zrt,"BertForTokenClassification"),Zrt.forEach(t),YSo=r(jye," (BERT model)"),jye.forEach(t),KSo=i(J),jb=n(J,"LI",{});var Dye=s(jb);efe=n(Dye,"STRONG",{});var ett=s(efe);ZSo=r(ett,"big_bird"),ett.forEach(t),eRo=r(Dye," \u2014 "),JD=n(Dye,"A",{href:!0});var ott=s(JD);oRo=r(ott,"BigBirdForTokenClassification"),ott.forEach(t),rRo=r(Dye," (BigBird model)"),Dye.forEach(t),tRo=i(J),Db=n(J,"LI",{});var Gye=s(Db);ofe=n(Gye,"STRONG",{});var rtt=s(ofe);aRo=r(rtt,"camembert"),rtt.forEach(t),nRo=r(Gye," \u2014 "),YD=n(Gye,"A",{href:!0});var ttt=s(YD);sRo=r(ttt,"CamembertForTokenClassification"),ttt.forEach(t),lRo=r(Gye," (CamemBERT model)"),Gye.forEach(t),iRo=i(J),Gb=n(J,"LI",{});var Oye=s(Gb);rfe=n(Oye,"STRONG",{});var att=s(rfe);dRo=r(att,"canine"),att.forEach(t),cRo=r(Oye," \u2014 "),KD=n(Oye,"A",{href:!0});var ntt=s(KD);fRo=r(ntt,"CanineForTokenClassification"),ntt.forEach(t),mRo=r(Oye," (Canine model)"),Oye.forEach(t),gRo=i(J),Ob=n(J,"LI",{});var Vye=s(Ob);tfe=n(Vye,"STRONG",{});var stt=s(tfe);hRo=r(stt,"convbert"),stt.forEach(t),pRo=r(Vye," \u2014 "),ZD=n(Vye,"A",{href:!0});var ltt=s(ZD);uRo=r(ltt,"ConvBertForTokenClassification"),ltt.forEach(t),_Ro=r(Vye," (ConvBERT model)"),Vye.forEach(t),bRo=i(J),Vb=n(J,"LI",{});var Xye=s(Vb);afe=n(Xye,"STRONG",{});var itt=s(afe);vRo=r(itt,"data2vec-text"),itt.forEach(t),FRo=r(Xye," \u2014 "),eG=n(Xye,"A",{href:!0});var dtt=s(eG);TRo=r(dtt,"Data2VecTextForTokenClassification"),dtt.forEach(t),MRo=r(Xye," (Data2VecText model)"),Xye.forEach(t),ERo=i(J),Xb=n(J,"LI",{});var zye=s(Xb);nfe=n(zye,"STRONG",{});var ctt=s(nfe);CRo=r(ctt,"deberta"),ctt.forEach(t),wRo=r(zye," \u2014 "),oG=n(zye,"A",{href:!0});var ftt=s(oG);ARo=r(ftt,"DebertaForTokenClassification"),ftt.forEach(t),yRo=r(zye," (DeBERTa model)"),zye.forEach(t),LRo=i(J),zb=n(J,"LI",{});var Qye=s(zb);sfe=n(Qye,"STRONG",{});var mtt=s(sfe);xRo=r(mtt,"deberta-v2"),mtt.forEach(t),$Ro=r(Qye," \u2014 "),rG=n(Qye,"A",{href:!0});var gtt=s(rG);kRo=r(gtt,"DebertaV2ForTokenClassification"),gtt.forEach(t),SRo=r(Qye," (DeBERTa-v2 model)"),Qye.forEach(t),RRo=i(J),Qb=n(J,"LI",{});var Wye=s(Qb);lfe=n(Wye,"STRONG",{});var htt=s(lfe);BRo=r(htt,"distilbert"),htt.forEach(t),PRo=r(Wye," \u2014 "),tG=n(Wye,"A",{href:!0});var ptt=s(tG);IRo=r(ptt,"DistilBertForTokenClassification"),ptt.forEach(t),qRo=r(Wye," (DistilBERT model)"),Wye.forEach(t),NRo=i(J),Wb=n(J,"LI",{});var Hye=s(Wb);ife=n(Hye,"STRONG",{});var utt=s(ife);jRo=r(utt,"electra"),utt.forEach(t),DRo=r(Hye," \u2014 "),aG=n(Hye,"A",{href:!0});var _tt=s(aG);GRo=r(_tt,"ElectraForTokenClassification"),_tt.forEach(t),ORo=r(Hye," (ELECTRA model)"),Hye.forEach(t),VRo=i(J),Hb=n(J,"LI",{});var Uye=s(Hb);dfe=n(Uye,"STRONG",{});var btt=s(dfe);XRo=r(btt,"flaubert"),btt.forEach(t),zRo=r(Uye," \u2014 "),nG=n(Uye,"A",{href:!0});var vtt=s(nG);QRo=r(vtt,"FlaubertForTokenClassification"),vtt.forEach(t),WRo=r(Uye," (FlauBERT model)"),Uye.forEach(t),HRo=i(J),Ub=n(J,"LI",{});var Jye=s(Ub);cfe=n(Jye,"STRONG",{});var Ftt=s(cfe);URo=r(Ftt,"fnet"),Ftt.forEach(t),JRo=r(Jye," \u2014 "),sG=n(Jye,"A",{href:!0});var Ttt=s(sG);YRo=r(Ttt,"FNetForTokenClassification"),Ttt.forEach(t),KRo=r(Jye," (FNet model)"),Jye.forEach(t),ZRo=i(J),Jb=n(J,"LI",{});var Yye=s(Jb);ffe=n(Yye,"STRONG",{});var Mtt=s(ffe);eBo=r(Mtt,"funnel"),Mtt.forEach(t),oBo=r(Yye," \u2014 "),lG=n(Yye,"A",{href:!0});var Ett=s(lG);rBo=r(Ett,"FunnelForTokenClassification"),Ett.forEach(t),tBo=r(Yye," (Funnel Transformer model)"),Yye.forEach(t),aBo=i(J),Yb=n(J,"LI",{});var Kye=s(Yb);mfe=n(Kye,"STRONG",{});var Ctt=s(mfe);nBo=r(Ctt,"gpt2"),Ctt.forEach(t),sBo=r(Kye," \u2014 "),iG=n(Kye,"A",{href:!0});var wtt=s(iG);lBo=r(wtt,"GPT2ForTokenClassification"),wtt.forEach(t),iBo=r(Kye," (OpenAI GPT-2 model)"),Kye.forEach(t),dBo=i(J),Kb=n(J,"LI",{});var Zye=s(Kb);gfe=n(Zye,"STRONG",{});var Att=s(gfe);cBo=r(Att,"ibert"),Att.forEach(t),fBo=r(Zye," \u2014 "),dG=n(Zye,"A",{href:!0});var ytt=s(dG);mBo=r(ytt,"IBertForTokenClassification"),ytt.forEach(t),gBo=r(Zye," (I-BERT model)"),Zye.forEach(t),hBo=i(J),Zb=n(J,"LI",{});var eLe=s(Zb);hfe=n(eLe,"STRONG",{});var Ltt=s(hfe);pBo=r(Ltt,"layoutlm"),Ltt.forEach(t),uBo=r(eLe," \u2014 "),cG=n(eLe,"A",{href:!0});var xtt=s(cG);_Bo=r(xtt,"LayoutLMForTokenClassification"),xtt.forEach(t),bBo=r(eLe," (LayoutLM model)"),eLe.forEach(t),vBo=i(J),e2=n(J,"LI",{});var oLe=s(e2);pfe=n(oLe,"STRONG",{});var $tt=s(pfe);FBo=r($tt,"layoutlmv2"),$tt.forEach(t),TBo=r(oLe," \u2014 "),fG=n(oLe,"A",{href:!0});var ktt=s(fG);MBo=r(ktt,"LayoutLMv2ForTokenClassification"),ktt.forEach(t),EBo=r(oLe," (LayoutLMv2 model)"),oLe.forEach(t),CBo=i(J),o2=n(J,"LI",{});var rLe=s(o2);ufe=n(rLe,"STRONG",{});var Stt=s(ufe);wBo=r(Stt,"longformer"),Stt.forEach(t),ABo=r(rLe," \u2014 "),mG=n(rLe,"A",{href:!0});var Rtt=s(mG);yBo=r(Rtt,"LongformerForTokenClassification"),Rtt.forEach(t),LBo=r(rLe," (Longformer model)"),rLe.forEach(t),xBo=i(J),r2=n(J,"LI",{});var tLe=s(r2);_fe=n(tLe,"STRONG",{});var Btt=s(_fe);$Bo=r(Btt,"megatron-bert"),Btt.forEach(t),kBo=r(tLe," \u2014 "),gG=n(tLe,"A",{href:!0});var Ptt=s(gG);SBo=r(Ptt,"MegatronBertForTokenClassification"),Ptt.forEach(t),RBo=r(tLe," (MegatronBert model)"),tLe.forEach(t),BBo=i(J),t2=n(J,"LI",{});var aLe=s(t2);bfe=n(aLe,"STRONG",{});var Itt=s(bfe);PBo=r(Itt,"mobilebert"),Itt.forEach(t),IBo=r(aLe," \u2014 "),hG=n(aLe,"A",{href:!0});var qtt=s(hG);qBo=r(qtt,"MobileBertForTokenClassification"),qtt.forEach(t),NBo=r(aLe," (MobileBERT model)"),aLe.forEach(t),jBo=i(J),a2=n(J,"LI",{});var nLe=s(a2);vfe=n(nLe,"STRONG",{});var Ntt=s(vfe);DBo=r(Ntt,"mpnet"),Ntt.forEach(t),GBo=r(nLe," \u2014 "),pG=n(nLe,"A",{href:!0});var jtt=s(pG);OBo=r(jtt,"MPNetForTokenClassification"),jtt.forEach(t),VBo=r(nLe," (MPNet model)"),nLe.forEach(t),XBo=i(J),n2=n(J,"LI",{});var sLe=s(n2);Ffe=n(sLe,"STRONG",{});var Dtt=s(Ffe);zBo=r(Dtt,"nystromformer"),Dtt.forEach(t),QBo=r(sLe," \u2014 "),uG=n(sLe,"A",{href:!0});var Gtt=s(uG);WBo=r(Gtt,"NystromformerForTokenClassification"),Gtt.forEach(t),HBo=r(sLe," (Nystromformer model)"),sLe.forEach(t),UBo=i(J),s2=n(J,"LI",{});var lLe=s(s2);Tfe=n(lLe,"STRONG",{});var Ott=s(Tfe);JBo=r(Ott,"qdqbert"),Ott.forEach(t),YBo=r(lLe," \u2014 "),_G=n(lLe,"A",{href:!0});var Vtt=s(_G);KBo=r(Vtt,"QDQBertForTokenClassification"),Vtt.forEach(t),ZBo=r(lLe," (QDQBert model)"),lLe.forEach(t),ePo=i(J),l2=n(J,"LI",{});var iLe=s(l2);Mfe=n(iLe,"STRONG",{});var Xtt=s(Mfe);oPo=r(Xtt,"rembert"),Xtt.forEach(t),rPo=r(iLe," \u2014 "),bG=n(iLe,"A",{href:!0});var ztt=s(bG);tPo=r(ztt,"RemBertForTokenClassification"),ztt.forEach(t),aPo=r(iLe," (RemBERT model)"),iLe.forEach(t),nPo=i(J),i2=n(J,"LI",{});var dLe=s(i2);Efe=n(dLe,"STRONG",{});var Qtt=s(Efe);sPo=r(Qtt,"roberta"),Qtt.forEach(t),lPo=r(dLe," \u2014 "),vG=n(dLe,"A",{href:!0});var Wtt=s(vG);iPo=r(Wtt,"RobertaForTokenClassification"),Wtt.forEach(t),dPo=r(dLe," (RoBERTa model)"),dLe.forEach(t),cPo=i(J),d2=n(J,"LI",{});var cLe=s(d2);Cfe=n(cLe,"STRONG",{});var Htt=s(Cfe);fPo=r(Htt,"roformer"),Htt.forEach(t),mPo=r(cLe," \u2014 "),FG=n(cLe,"A",{href:!0});var Utt=s(FG);gPo=r(Utt,"RoFormerForTokenClassification"),Utt.forEach(t),hPo=r(cLe," (RoFormer model)"),cLe.forEach(t),pPo=i(J),c2=n(J,"LI",{});var fLe=s(c2);wfe=n(fLe,"STRONG",{});var Jtt=s(wfe);uPo=r(Jtt,"squeezebert"),Jtt.forEach(t),_Po=r(fLe," \u2014 "),TG=n(fLe,"A",{href:!0});var Ytt=s(TG);bPo=r(Ytt,"SqueezeBertForTokenClassification"),Ytt.forEach(t),vPo=r(fLe," (SqueezeBERT model)"),fLe.forEach(t),FPo=i(J),f2=n(J,"LI",{});var mLe=s(f2);Afe=n(mLe,"STRONG",{});var Ktt=s(Afe);TPo=r(Ktt,"xlm"),Ktt.forEach(t),MPo=r(mLe," \u2014 "),MG=n(mLe,"A",{href:!0});var Ztt=s(MG);EPo=r(Ztt,"XLMForTokenClassification"),Ztt.forEach(t),CPo=r(mLe," (XLM model)"),mLe.forEach(t),wPo=i(J),m2=n(J,"LI",{});var gLe=s(m2);yfe=n(gLe,"STRONG",{});var eat=s(yfe);APo=r(eat,"xlm-roberta"),eat.forEach(t),yPo=r(gLe," \u2014 "),EG=n(gLe,"A",{href:!0});var oat=s(EG);LPo=r(oat,"XLMRobertaForTokenClassification"),oat.forEach(t),xPo=r(gLe," (XLM-RoBERTa model)"),gLe.forEach(t),$Po=i(J),g2=n(J,"LI",{});var hLe=s(g2);Lfe=n(hLe,"STRONG",{});var rat=s(Lfe);kPo=r(rat,"xlm-roberta-xl"),rat.forEach(t),SPo=r(hLe," \u2014 "),CG=n(hLe,"A",{href:!0});var tat=s(CG);RPo=r(tat,"XLMRobertaXLForTokenClassification"),tat.forEach(t),BPo=r(hLe," (XLM-RoBERTa-XL model)"),hLe.forEach(t),PPo=i(J),h2=n(J,"LI",{});var pLe=s(h2);xfe=n(pLe,"STRONG",{});var aat=s(xfe);IPo=r(aat,"xlnet"),aat.forEach(t),qPo=r(pLe," \u2014 "),wG=n(pLe,"A",{href:!0});var nat=s(wG);NPo=r(nat,"XLNetForTokenClassification"),nat.forEach(t),jPo=r(pLe," (XLNet model)"),pLe.forEach(t),DPo=i(J),p2=n(J,"LI",{});var uLe=s(p2);$fe=n(uLe,"STRONG",{});var sat=s($fe);GPo=r(sat,"yoso"),sat.forEach(t),OPo=r(uLe," \u2014 "),AG=n(uLe,"A",{href:!0});var lat=s(AG);VPo=r(lat,"YosoForTokenClassification"),lat.forEach(t),XPo=r(uLe," (YOSO model)"),uLe.forEach(t),J.forEach(t),zPo=i(aa),u2=n(aa,"P",{});var _Le=s(u2);QPo=r(_Le,"The model is set in evaluation mode by default using "),kfe=n(_Le,"CODE",{});var iat=s(kfe);WPo=r(iat,"model.eval()"),iat.forEach(t),HPo=r(_Le,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Sfe=n(_Le,"CODE",{});var dat=s(Sfe);UPo=r(dat,"model.train()"),dat.forEach(t),_Le.forEach(t),JPo=i(aa),T(_2.$$.fragment,aa),aa.forEach(t),Xs.forEach(t),FBe=i(f),Oi=n(f,"H2",{class:!0});var MIe=s(Oi);b2=n(MIe,"A",{id:!0,class:!0,href:!0});var cat=s(b2);Rfe=n(cat,"SPAN",{});var fat=s(Rfe);T(B0.$$.fragment,fat),fat.forEach(t),cat.forEach(t),YPo=i(MIe),Bfe=n(MIe,"SPAN",{});var mat=s(Bfe);KPo=r(mat,"AutoModelForQuestionAnswering"),mat.forEach(t),MIe.forEach(t),TBe=i(f),qo=n(f,"DIV",{class:!0});var zs=s(qo);T(P0.$$.fragment,zs),ZPo=i(zs),Vi=n(zs,"P",{});var vY=s(Vi);eIo=r(vY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),yG=n(vY,"A",{href:!0});var gat=s(yG);oIo=r(gat,"from_pretrained()"),gat.forEach(t),rIo=r(vY," class method or the "),LG=n(vY,"A",{href:!0});var hat=s(LG);tIo=r(hat,"from_config()"),hat.forEach(t),aIo=r(vY,` class
method.`),vY.forEach(t),nIo=i(zs),I0=n(zs,"P",{});var EIe=s(I0);sIo=r(EIe,"This class cannot be instantiated directly using "),Pfe=n(EIe,"CODE",{});var pat=s(Pfe);lIo=r(pat,"__init__()"),pat.forEach(t),iIo=r(EIe," (throws an error)."),EIe.forEach(t),dIo=i(zs),it=n(zs,"DIV",{class:!0});var D3=s(it);T(q0.$$.fragment,D3),cIo=i(D3),Ife=n(D3,"P",{});var uat=s(Ife);fIo=r(uat,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),uat.forEach(t),mIo=i(D3),Xi=n(D3,"P",{});var FY=s(Xi);gIo=r(FY,`Note:
Loading a model from its configuration file does `),qfe=n(FY,"STRONG",{});var _at=s(qfe);hIo=r(_at,"not"),_at.forEach(t),pIo=r(FY,` load the model weights. It only affects the
model\u2019s configuration. Use `),xG=n(FY,"A",{href:!0});var bat=s(xG);uIo=r(bat,"from_pretrained()"),bat.forEach(t),_Io=r(FY," to load the model weights."),FY.forEach(t),bIo=i(D3),T(v2.$$.fragment,D3),D3.forEach(t),vIo=i(zs),to=n(zs,"DIV",{class:!0});var na=s(to);T(N0.$$.fragment,na),FIo=i(na),Nfe=n(na,"P",{});var vat=s(Nfe);TIo=r(vat,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),vat.forEach(t),MIo=i(na),Sa=n(na,"P",{});var G3=s(Sa);EIo=r(G3,"The model class to instantiate is selected based on the "),jfe=n(G3,"CODE",{});var Fat=s(jfe);CIo=r(Fat,"model_type"),Fat.forEach(t),wIo=r(G3,` property of the config object (either
passed as an argument or loaded from `),Dfe=n(G3,"CODE",{});var Tat=s(Dfe);AIo=r(Tat,"pretrained_model_name_or_path"),Tat.forEach(t),yIo=r(G3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gfe=n(G3,"CODE",{});var Mat=s(Gfe);LIo=r(Mat,"pretrained_model_name_or_path"),Mat.forEach(t),xIo=r(G3,":"),G3.forEach(t),$Io=i(na),O=n(na,"UL",{});var X=s(O);F2=n(X,"LI",{});var bLe=s(F2);Ofe=n(bLe,"STRONG",{});var Eat=s(Ofe);kIo=r(Eat,"albert"),Eat.forEach(t),SIo=r(bLe," \u2014 "),$G=n(bLe,"A",{href:!0});var Cat=s($G);RIo=r(Cat,"AlbertForQuestionAnswering"),Cat.forEach(t),BIo=r(bLe," (ALBERT model)"),bLe.forEach(t),PIo=i(X),T2=n(X,"LI",{});var vLe=s(T2);Vfe=n(vLe,"STRONG",{});var wat=s(Vfe);IIo=r(wat,"bart"),wat.forEach(t),qIo=r(vLe," \u2014 "),kG=n(vLe,"A",{href:!0});var Aat=s(kG);NIo=r(Aat,"BartForQuestionAnswering"),Aat.forEach(t),jIo=r(vLe," (BART model)"),vLe.forEach(t),DIo=i(X),M2=n(X,"LI",{});var FLe=s(M2);Xfe=n(FLe,"STRONG",{});var yat=s(Xfe);GIo=r(yat,"bert"),yat.forEach(t),OIo=r(FLe," \u2014 "),SG=n(FLe,"A",{href:!0});var Lat=s(SG);VIo=r(Lat,"BertForQuestionAnswering"),Lat.forEach(t),XIo=r(FLe," (BERT model)"),FLe.forEach(t),zIo=i(X),E2=n(X,"LI",{});var TLe=s(E2);zfe=n(TLe,"STRONG",{});var xat=s(zfe);QIo=r(xat,"big_bird"),xat.forEach(t),WIo=r(TLe," \u2014 "),RG=n(TLe,"A",{href:!0});var $at=s(RG);HIo=r($at,"BigBirdForQuestionAnswering"),$at.forEach(t),UIo=r(TLe," (BigBird model)"),TLe.forEach(t),JIo=i(X),C2=n(X,"LI",{});var MLe=s(C2);Qfe=n(MLe,"STRONG",{});var kat=s(Qfe);YIo=r(kat,"bigbird_pegasus"),kat.forEach(t),KIo=r(MLe," \u2014 "),BG=n(MLe,"A",{href:!0});var Sat=s(BG);ZIo=r(Sat,"BigBirdPegasusForQuestionAnswering"),Sat.forEach(t),eqo=r(MLe," (BigBirdPegasus model)"),MLe.forEach(t),oqo=i(X),w2=n(X,"LI",{});var ELe=s(w2);Wfe=n(ELe,"STRONG",{});var Rat=s(Wfe);rqo=r(Rat,"camembert"),Rat.forEach(t),tqo=r(ELe," \u2014 "),PG=n(ELe,"A",{href:!0});var Bat=s(PG);aqo=r(Bat,"CamembertForQuestionAnswering"),Bat.forEach(t),nqo=r(ELe," (CamemBERT model)"),ELe.forEach(t),sqo=i(X),A2=n(X,"LI",{});var CLe=s(A2);Hfe=n(CLe,"STRONG",{});var Pat=s(Hfe);lqo=r(Pat,"canine"),Pat.forEach(t),iqo=r(CLe," \u2014 "),IG=n(CLe,"A",{href:!0});var Iat=s(IG);dqo=r(Iat,"CanineForQuestionAnswering"),Iat.forEach(t),cqo=r(CLe," (Canine model)"),CLe.forEach(t),fqo=i(X),y2=n(X,"LI",{});var wLe=s(y2);Ufe=n(wLe,"STRONG",{});var qat=s(Ufe);mqo=r(qat,"convbert"),qat.forEach(t),gqo=r(wLe," \u2014 "),qG=n(wLe,"A",{href:!0});var Nat=s(qG);hqo=r(Nat,"ConvBertForQuestionAnswering"),Nat.forEach(t),pqo=r(wLe," (ConvBERT model)"),wLe.forEach(t),uqo=i(X),L2=n(X,"LI",{});var ALe=s(L2);Jfe=n(ALe,"STRONG",{});var jat=s(Jfe);_qo=r(jat,"data2vec-text"),jat.forEach(t),bqo=r(ALe," \u2014 "),NG=n(ALe,"A",{href:!0});var Dat=s(NG);vqo=r(Dat,"Data2VecTextForQuestionAnswering"),Dat.forEach(t),Fqo=r(ALe," (Data2VecText model)"),ALe.forEach(t),Tqo=i(X),x2=n(X,"LI",{});var yLe=s(x2);Yfe=n(yLe,"STRONG",{});var Gat=s(Yfe);Mqo=r(Gat,"deberta"),Gat.forEach(t),Eqo=r(yLe," \u2014 "),jG=n(yLe,"A",{href:!0});var Oat=s(jG);Cqo=r(Oat,"DebertaForQuestionAnswering"),Oat.forEach(t),wqo=r(yLe," (DeBERTa model)"),yLe.forEach(t),Aqo=i(X),$2=n(X,"LI",{});var LLe=s($2);Kfe=n(LLe,"STRONG",{});var Vat=s(Kfe);yqo=r(Vat,"deberta-v2"),Vat.forEach(t),Lqo=r(LLe," \u2014 "),DG=n(LLe,"A",{href:!0});var Xat=s(DG);xqo=r(Xat,"DebertaV2ForQuestionAnswering"),Xat.forEach(t),$qo=r(LLe," (DeBERTa-v2 model)"),LLe.forEach(t),kqo=i(X),k2=n(X,"LI",{});var xLe=s(k2);Zfe=n(xLe,"STRONG",{});var zat=s(Zfe);Sqo=r(zat,"distilbert"),zat.forEach(t),Rqo=r(xLe," \u2014 "),GG=n(xLe,"A",{href:!0});var Qat=s(GG);Bqo=r(Qat,"DistilBertForQuestionAnswering"),Qat.forEach(t),Pqo=r(xLe," (DistilBERT model)"),xLe.forEach(t),Iqo=i(X),S2=n(X,"LI",{});var $Le=s(S2);eme=n($Le,"STRONG",{});var Wat=s(eme);qqo=r(Wat,"electra"),Wat.forEach(t),Nqo=r($Le," \u2014 "),OG=n($Le,"A",{href:!0});var Hat=s(OG);jqo=r(Hat,"ElectraForQuestionAnswering"),Hat.forEach(t),Dqo=r($Le," (ELECTRA model)"),$Le.forEach(t),Gqo=i(X),R2=n(X,"LI",{});var kLe=s(R2);ome=n(kLe,"STRONG",{});var Uat=s(ome);Oqo=r(Uat,"flaubert"),Uat.forEach(t),Vqo=r(kLe," \u2014 "),VG=n(kLe,"A",{href:!0});var Jat=s(VG);Xqo=r(Jat,"FlaubertForQuestionAnsweringSimple"),Jat.forEach(t),zqo=r(kLe," (FlauBERT model)"),kLe.forEach(t),Qqo=i(X),B2=n(X,"LI",{});var SLe=s(B2);rme=n(SLe,"STRONG",{});var Yat=s(rme);Wqo=r(Yat,"fnet"),Yat.forEach(t),Hqo=r(SLe," \u2014 "),XG=n(SLe,"A",{href:!0});var Kat=s(XG);Uqo=r(Kat,"FNetForQuestionAnswering"),Kat.forEach(t),Jqo=r(SLe," (FNet model)"),SLe.forEach(t),Yqo=i(X),P2=n(X,"LI",{});var RLe=s(P2);tme=n(RLe,"STRONG",{});var Zat=s(tme);Kqo=r(Zat,"funnel"),Zat.forEach(t),Zqo=r(RLe," \u2014 "),zG=n(RLe,"A",{href:!0});var ent=s(zG);eNo=r(ent,"FunnelForQuestionAnswering"),ent.forEach(t),oNo=r(RLe," (Funnel Transformer model)"),RLe.forEach(t),rNo=i(X),I2=n(X,"LI",{});var BLe=s(I2);ame=n(BLe,"STRONG",{});var ont=s(ame);tNo=r(ont,"gptj"),ont.forEach(t),aNo=r(BLe," \u2014 "),QG=n(BLe,"A",{href:!0});var rnt=s(QG);nNo=r(rnt,"GPTJForQuestionAnswering"),rnt.forEach(t),sNo=r(BLe," (GPT-J model)"),BLe.forEach(t),lNo=i(X),q2=n(X,"LI",{});var PLe=s(q2);nme=n(PLe,"STRONG",{});var tnt=s(nme);iNo=r(tnt,"ibert"),tnt.forEach(t),dNo=r(PLe," \u2014 "),WG=n(PLe,"A",{href:!0});var ant=s(WG);cNo=r(ant,"IBertForQuestionAnswering"),ant.forEach(t),fNo=r(PLe," (I-BERT model)"),PLe.forEach(t),mNo=i(X),N2=n(X,"LI",{});var ILe=s(N2);sme=n(ILe,"STRONG",{});var nnt=s(sme);gNo=r(nnt,"layoutlmv2"),nnt.forEach(t),hNo=r(ILe," \u2014 "),HG=n(ILe,"A",{href:!0});var snt=s(HG);pNo=r(snt,"LayoutLMv2ForQuestionAnswering"),snt.forEach(t),uNo=r(ILe," (LayoutLMv2 model)"),ILe.forEach(t),_No=i(X),j2=n(X,"LI",{});var qLe=s(j2);lme=n(qLe,"STRONG",{});var lnt=s(lme);bNo=r(lnt,"led"),lnt.forEach(t),vNo=r(qLe," \u2014 "),UG=n(qLe,"A",{href:!0});var int=s(UG);FNo=r(int,"LEDForQuestionAnswering"),int.forEach(t),TNo=r(qLe," (LED model)"),qLe.forEach(t),MNo=i(X),D2=n(X,"LI",{});var NLe=s(D2);ime=n(NLe,"STRONG",{});var dnt=s(ime);ENo=r(dnt,"longformer"),dnt.forEach(t),CNo=r(NLe," \u2014 "),JG=n(NLe,"A",{href:!0});var cnt=s(JG);wNo=r(cnt,"LongformerForQuestionAnswering"),cnt.forEach(t),ANo=r(NLe," (Longformer model)"),NLe.forEach(t),yNo=i(X),G2=n(X,"LI",{});var jLe=s(G2);dme=n(jLe,"STRONG",{});var fnt=s(dme);LNo=r(fnt,"lxmert"),fnt.forEach(t),xNo=r(jLe," \u2014 "),YG=n(jLe,"A",{href:!0});var mnt=s(YG);$No=r(mnt,"LxmertForQuestionAnswering"),mnt.forEach(t),kNo=r(jLe," (LXMERT model)"),jLe.forEach(t),SNo=i(X),O2=n(X,"LI",{});var DLe=s(O2);cme=n(DLe,"STRONG",{});var gnt=s(cme);RNo=r(gnt,"mbart"),gnt.forEach(t),BNo=r(DLe," \u2014 "),KG=n(DLe,"A",{href:!0});var hnt=s(KG);PNo=r(hnt,"MBartForQuestionAnswering"),hnt.forEach(t),INo=r(DLe," (mBART model)"),DLe.forEach(t),qNo=i(X),V2=n(X,"LI",{});var GLe=s(V2);fme=n(GLe,"STRONG",{});var pnt=s(fme);NNo=r(pnt,"megatron-bert"),pnt.forEach(t),jNo=r(GLe," \u2014 "),ZG=n(GLe,"A",{href:!0});var unt=s(ZG);DNo=r(unt,"MegatronBertForQuestionAnswering"),unt.forEach(t),GNo=r(GLe," (MegatronBert model)"),GLe.forEach(t),ONo=i(X),X2=n(X,"LI",{});var OLe=s(X2);mme=n(OLe,"STRONG",{});var _nt=s(mme);VNo=r(_nt,"mobilebert"),_nt.forEach(t),XNo=r(OLe," \u2014 "),eO=n(OLe,"A",{href:!0});var bnt=s(eO);zNo=r(bnt,"MobileBertForQuestionAnswering"),bnt.forEach(t),QNo=r(OLe," (MobileBERT model)"),OLe.forEach(t),WNo=i(X),z2=n(X,"LI",{});var VLe=s(z2);gme=n(VLe,"STRONG",{});var vnt=s(gme);HNo=r(vnt,"mpnet"),vnt.forEach(t),UNo=r(VLe," \u2014 "),oO=n(VLe,"A",{href:!0});var Fnt=s(oO);JNo=r(Fnt,"MPNetForQuestionAnswering"),Fnt.forEach(t),YNo=r(VLe," (MPNet model)"),VLe.forEach(t),KNo=i(X),Q2=n(X,"LI",{});var XLe=s(Q2);hme=n(XLe,"STRONG",{});var Tnt=s(hme);ZNo=r(Tnt,"nystromformer"),Tnt.forEach(t),ejo=r(XLe," \u2014 "),rO=n(XLe,"A",{href:!0});var Mnt=s(rO);ojo=r(Mnt,"NystromformerForQuestionAnswering"),Mnt.forEach(t),rjo=r(XLe," (Nystromformer model)"),XLe.forEach(t),tjo=i(X),W2=n(X,"LI",{});var zLe=s(W2);pme=n(zLe,"STRONG",{});var Ent=s(pme);ajo=r(Ent,"qdqbert"),Ent.forEach(t),njo=r(zLe," \u2014 "),tO=n(zLe,"A",{href:!0});var Cnt=s(tO);sjo=r(Cnt,"QDQBertForQuestionAnswering"),Cnt.forEach(t),ljo=r(zLe," (QDQBert model)"),zLe.forEach(t),ijo=i(X),H2=n(X,"LI",{});var QLe=s(H2);ume=n(QLe,"STRONG",{});var wnt=s(ume);djo=r(wnt,"reformer"),wnt.forEach(t),cjo=r(QLe," \u2014 "),aO=n(QLe,"A",{href:!0});var Ant=s(aO);fjo=r(Ant,"ReformerForQuestionAnswering"),Ant.forEach(t),mjo=r(QLe," (Reformer model)"),QLe.forEach(t),gjo=i(X),U2=n(X,"LI",{});var WLe=s(U2);_me=n(WLe,"STRONG",{});var ynt=s(_me);hjo=r(ynt,"rembert"),ynt.forEach(t),pjo=r(WLe," \u2014 "),nO=n(WLe,"A",{href:!0});var Lnt=s(nO);ujo=r(Lnt,"RemBertForQuestionAnswering"),Lnt.forEach(t),_jo=r(WLe," (RemBERT model)"),WLe.forEach(t),bjo=i(X),J2=n(X,"LI",{});var HLe=s(J2);bme=n(HLe,"STRONG",{});var xnt=s(bme);vjo=r(xnt,"roberta"),xnt.forEach(t),Fjo=r(HLe," \u2014 "),sO=n(HLe,"A",{href:!0});var $nt=s(sO);Tjo=r($nt,"RobertaForQuestionAnswering"),$nt.forEach(t),Mjo=r(HLe," (RoBERTa model)"),HLe.forEach(t),Ejo=i(X),Y2=n(X,"LI",{});var ULe=s(Y2);vme=n(ULe,"STRONG",{});var knt=s(vme);Cjo=r(knt,"roformer"),knt.forEach(t),wjo=r(ULe," \u2014 "),lO=n(ULe,"A",{href:!0});var Snt=s(lO);Ajo=r(Snt,"RoFormerForQuestionAnswering"),Snt.forEach(t),yjo=r(ULe," (RoFormer model)"),ULe.forEach(t),Ljo=i(X),K2=n(X,"LI",{});var JLe=s(K2);Fme=n(JLe,"STRONG",{});var Rnt=s(Fme);xjo=r(Rnt,"splinter"),Rnt.forEach(t),$jo=r(JLe," \u2014 "),iO=n(JLe,"A",{href:!0});var Bnt=s(iO);kjo=r(Bnt,"SplinterForQuestionAnswering"),Bnt.forEach(t),Sjo=r(JLe," (Splinter model)"),JLe.forEach(t),Rjo=i(X),Z2=n(X,"LI",{});var YLe=s(Z2);Tme=n(YLe,"STRONG",{});var Pnt=s(Tme);Bjo=r(Pnt,"squeezebert"),Pnt.forEach(t),Pjo=r(YLe," \u2014 "),dO=n(YLe,"A",{href:!0});var Int=s(dO);Ijo=r(Int,"SqueezeBertForQuestionAnswering"),Int.forEach(t),qjo=r(YLe," (SqueezeBERT model)"),YLe.forEach(t),Njo=i(X),e5=n(X,"LI",{});var KLe=s(e5);Mme=n(KLe,"STRONG",{});var qnt=s(Mme);jjo=r(qnt,"xlm"),qnt.forEach(t),Djo=r(KLe," \u2014 "),cO=n(KLe,"A",{href:!0});var Nnt=s(cO);Gjo=r(Nnt,"XLMForQuestionAnsweringSimple"),Nnt.forEach(t),Ojo=r(KLe," (XLM model)"),KLe.forEach(t),Vjo=i(X),o5=n(X,"LI",{});var ZLe=s(o5);Eme=n(ZLe,"STRONG",{});var jnt=s(Eme);Xjo=r(jnt,"xlm-roberta"),jnt.forEach(t),zjo=r(ZLe," \u2014 "),fO=n(ZLe,"A",{href:!0});var Dnt=s(fO);Qjo=r(Dnt,"XLMRobertaForQuestionAnswering"),Dnt.forEach(t),Wjo=r(ZLe," (XLM-RoBERTa model)"),ZLe.forEach(t),Hjo=i(X),r5=n(X,"LI",{});var e8e=s(r5);Cme=n(e8e,"STRONG",{});var Gnt=s(Cme);Ujo=r(Gnt,"xlm-roberta-xl"),Gnt.forEach(t),Jjo=r(e8e," \u2014 "),mO=n(e8e,"A",{href:!0});var Ont=s(mO);Yjo=r(Ont,"XLMRobertaXLForQuestionAnswering"),Ont.forEach(t),Kjo=r(e8e," (XLM-RoBERTa-XL model)"),e8e.forEach(t),Zjo=i(X),t5=n(X,"LI",{});var o8e=s(t5);wme=n(o8e,"STRONG",{});var Vnt=s(wme);eDo=r(Vnt,"xlnet"),Vnt.forEach(t),oDo=r(o8e," \u2014 "),gO=n(o8e,"A",{href:!0});var Xnt=s(gO);rDo=r(Xnt,"XLNetForQuestionAnsweringSimple"),Xnt.forEach(t),tDo=r(o8e," (XLNet model)"),o8e.forEach(t),aDo=i(X),a5=n(X,"LI",{});var r8e=s(a5);Ame=n(r8e,"STRONG",{});var znt=s(Ame);nDo=r(znt,"yoso"),znt.forEach(t),sDo=r(r8e," \u2014 "),hO=n(r8e,"A",{href:!0});var Qnt=s(hO);lDo=r(Qnt,"YosoForQuestionAnswering"),Qnt.forEach(t),iDo=r(r8e," (YOSO model)"),r8e.forEach(t),X.forEach(t),dDo=i(na),n5=n(na,"P",{});var t8e=s(n5);cDo=r(t8e,"The model is set in evaluation mode by default using "),yme=n(t8e,"CODE",{});var Wnt=s(yme);fDo=r(Wnt,"model.eval()"),Wnt.forEach(t),mDo=r(t8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Lme=n(t8e,"CODE",{});var Hnt=s(Lme);gDo=r(Hnt,"model.train()"),Hnt.forEach(t),t8e.forEach(t),hDo=i(na),T(s5.$$.fragment,na),na.forEach(t),zs.forEach(t),MBe=i(f),zi=n(f,"H2",{class:!0});var CIe=s(zi);l5=n(CIe,"A",{id:!0,class:!0,href:!0});var Unt=s(l5);xme=n(Unt,"SPAN",{});var Jnt=s(xme);T(j0.$$.fragment,Jnt),Jnt.forEach(t),Unt.forEach(t),pDo=i(CIe),$me=n(CIe,"SPAN",{});var Ynt=s($me);uDo=r(Ynt,"AutoModelForTableQuestionAnswering"),Ynt.forEach(t),CIe.forEach(t),EBe=i(f),No=n(f,"DIV",{class:!0});var Qs=s(No);T(D0.$$.fragment,Qs),_Do=i(Qs),Qi=n(Qs,"P",{});var TY=s(Qi);bDo=r(TY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),pO=n(TY,"A",{href:!0});var Knt=s(pO);vDo=r(Knt,"from_pretrained()"),Knt.forEach(t),FDo=r(TY," class method or the "),uO=n(TY,"A",{href:!0});var Znt=s(uO);TDo=r(Znt,"from_config()"),Znt.forEach(t),MDo=r(TY,` class
method.`),TY.forEach(t),EDo=i(Qs),G0=n(Qs,"P",{});var wIe=s(G0);CDo=r(wIe,"This class cannot be instantiated directly using "),kme=n(wIe,"CODE",{});var est=s(kme);wDo=r(est,"__init__()"),est.forEach(t),ADo=r(wIe," (throws an error)."),wIe.forEach(t),yDo=i(Qs),dt=n(Qs,"DIV",{class:!0});var O3=s(dt);T(O0.$$.fragment,O3),LDo=i(O3),Sme=n(O3,"P",{});var ost=s(Sme);xDo=r(ost,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),ost.forEach(t),$Do=i(O3),Wi=n(O3,"P",{});var MY=s(Wi);kDo=r(MY,`Note:
Loading a model from its configuration file does `),Rme=n(MY,"STRONG",{});var rst=s(Rme);SDo=r(rst,"not"),rst.forEach(t),RDo=r(MY,` load the model weights. It only affects the
model\u2019s configuration. Use `),_O=n(MY,"A",{href:!0});var tst=s(_O);BDo=r(tst,"from_pretrained()"),tst.forEach(t),PDo=r(MY," to load the model weights."),MY.forEach(t),IDo=i(O3),T(i5.$$.fragment,O3),O3.forEach(t),qDo=i(Qs),ao=n(Qs,"DIV",{class:!0});var sa=s(ao);T(V0.$$.fragment,sa),NDo=i(sa),Bme=n(sa,"P",{});var ast=s(Bme);jDo=r(ast,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),ast.forEach(t),DDo=i(sa),Ra=n(sa,"P",{});var V3=s(Ra);GDo=r(V3,"The model class to instantiate is selected based on the "),Pme=n(V3,"CODE",{});var nst=s(Pme);ODo=r(nst,"model_type"),nst.forEach(t),VDo=r(V3,` property of the config object (either
passed as an argument or loaded from `),Ime=n(V3,"CODE",{});var sst=s(Ime);XDo=r(sst,"pretrained_model_name_or_path"),sst.forEach(t),zDo=r(V3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qme=n(V3,"CODE",{});var lst=s(qme);QDo=r(lst,"pretrained_model_name_or_path"),lst.forEach(t),WDo=r(V3,":"),V3.forEach(t),HDo=i(sa),Nme=n(sa,"UL",{});var ist=s(Nme);d5=n(ist,"LI",{});var a8e=s(d5);jme=n(a8e,"STRONG",{});var dst=s(jme);UDo=r(dst,"tapas"),dst.forEach(t),JDo=r(a8e," \u2014 "),bO=n(a8e,"A",{href:!0});var cst=s(bO);YDo=r(cst,"TapasForQuestionAnswering"),cst.forEach(t),KDo=r(a8e," (TAPAS model)"),a8e.forEach(t),ist.forEach(t),ZDo=i(sa),c5=n(sa,"P",{});var n8e=s(c5);eGo=r(n8e,"The model is set in evaluation mode by default using "),Dme=n(n8e,"CODE",{});var fst=s(Dme);oGo=r(fst,"model.eval()"),fst.forEach(t),rGo=r(n8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Gme=n(n8e,"CODE",{});var mst=s(Gme);tGo=r(mst,"model.train()"),mst.forEach(t),n8e.forEach(t),aGo=i(sa),T(f5.$$.fragment,sa),sa.forEach(t),Qs.forEach(t),CBe=i(f),Hi=n(f,"H2",{class:!0});var AIe=s(Hi);m5=n(AIe,"A",{id:!0,class:!0,href:!0});var gst=s(m5);Ome=n(gst,"SPAN",{});var hst=s(Ome);T(X0.$$.fragment,hst),hst.forEach(t),gst.forEach(t),nGo=i(AIe),Vme=n(AIe,"SPAN",{});var pst=s(Vme);sGo=r(pst,"AutoModelForImageClassification"),pst.forEach(t),AIe.forEach(t),wBe=i(f),jo=n(f,"DIV",{class:!0});var Ws=s(jo);T(z0.$$.fragment,Ws),lGo=i(Ws),Ui=n(Ws,"P",{});var EY=s(Ui);iGo=r(EY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),vO=n(EY,"A",{href:!0});var ust=s(vO);dGo=r(ust,"from_pretrained()"),ust.forEach(t),cGo=r(EY," class method or the "),FO=n(EY,"A",{href:!0});var _st=s(FO);fGo=r(_st,"from_config()"),_st.forEach(t),mGo=r(EY,` class
method.`),EY.forEach(t),gGo=i(Ws),Q0=n(Ws,"P",{});var yIe=s(Q0);hGo=r(yIe,"This class cannot be instantiated directly using "),Xme=n(yIe,"CODE",{});var bst=s(Xme);pGo=r(bst,"__init__()"),bst.forEach(t),uGo=r(yIe," (throws an error)."),yIe.forEach(t),_Go=i(Ws),ct=n(Ws,"DIV",{class:!0});var X3=s(ct);T(W0.$$.fragment,X3),bGo=i(X3),zme=n(X3,"P",{});var vst=s(zme);vGo=r(vst,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),vst.forEach(t),FGo=i(X3),Ji=n(X3,"P",{});var CY=s(Ji);TGo=r(CY,`Note:
Loading a model from its configuration file does `),Qme=n(CY,"STRONG",{});var Fst=s(Qme);MGo=r(Fst,"not"),Fst.forEach(t),EGo=r(CY,` load the model weights. It only affects the
model\u2019s configuration. Use `),TO=n(CY,"A",{href:!0});var Tst=s(TO);CGo=r(Tst,"from_pretrained()"),Tst.forEach(t),wGo=r(CY," to load the model weights."),CY.forEach(t),AGo=i(X3),T(g5.$$.fragment,X3),X3.forEach(t),yGo=i(Ws),no=n(Ws,"DIV",{class:!0});var la=s(no);T(H0.$$.fragment,la),LGo=i(la),Wme=n(la,"P",{});var Mst=s(Wme);xGo=r(Mst,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Mst.forEach(t),$Go=i(la),Ba=n(la,"P",{});var z3=s(Ba);kGo=r(z3,"The model class to instantiate is selected based on the "),Hme=n(z3,"CODE",{});var Est=s(Hme);SGo=r(Est,"model_type"),Est.forEach(t),RGo=r(z3,` property of the config object (either
passed as an argument or loaded from `),Ume=n(z3,"CODE",{});var Cst=s(Ume);BGo=r(Cst,"pretrained_model_name_or_path"),Cst.forEach(t),PGo=r(z3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jme=n(z3,"CODE",{});var wst=s(Jme);IGo=r(wst,"pretrained_model_name_or_path"),wst.forEach(t),qGo=r(z3,":"),z3.forEach(t),NGo=i(la),ve=n(la,"UL",{});var Ee=s(ve);h5=n(Ee,"LI",{});var s8e=s(h5);Yme=n(s8e,"STRONG",{});var Ast=s(Yme);jGo=r(Ast,"beit"),Ast.forEach(t),DGo=r(s8e," \u2014 "),MO=n(s8e,"A",{href:!0});var yst=s(MO);GGo=r(yst,"BeitForImageClassification"),yst.forEach(t),OGo=r(s8e," (BEiT model)"),s8e.forEach(t),VGo=i(Ee),p5=n(Ee,"LI",{});var l8e=s(p5);Kme=n(l8e,"STRONG",{});var Lst=s(Kme);XGo=r(Lst,"convnext"),Lst.forEach(t),zGo=r(l8e," \u2014 "),EO=n(l8e,"A",{href:!0});var xst=s(EO);QGo=r(xst,"ConvNextForImageClassification"),xst.forEach(t),WGo=r(l8e," (ConvNext model)"),l8e.forEach(t),HGo=i(Ee),u5=n(Ee,"LI",{});var i8e=s(u5);Zme=n(i8e,"STRONG",{});var $st=s(Zme);UGo=r($st,"data2vec-vision"),$st.forEach(t),JGo=r(i8e," \u2014 "),CO=n(i8e,"A",{href:!0});var kst=s(CO);YGo=r(kst,"Data2VecVisionForImageClassification"),kst.forEach(t),KGo=r(i8e," (Data2VecVision model)"),i8e.forEach(t),ZGo=i(Ee),xs=n(Ee,"LI",{});var A7=s(xs);ege=n(A7,"STRONG",{});var Sst=s(ege);eOo=r(Sst,"deit"),Sst.forEach(t),oOo=r(A7," \u2014 "),wO=n(A7,"A",{href:!0});var Rst=s(wO);rOo=r(Rst,"DeiTForImageClassification"),Rst.forEach(t),tOo=r(A7," or "),AO=n(A7,"A",{href:!0});var Bst=s(AO);aOo=r(Bst,"DeiTForImageClassificationWithTeacher"),Bst.forEach(t),nOo=r(A7," (DeiT model)"),A7.forEach(t),sOo=i(Ee),_5=n(Ee,"LI",{});var d8e=s(_5);oge=n(d8e,"STRONG",{});var Pst=s(oge);lOo=r(Pst,"imagegpt"),Pst.forEach(t),iOo=r(d8e," \u2014 "),yO=n(d8e,"A",{href:!0});var Ist=s(yO);dOo=r(Ist,"ImageGPTForImageClassification"),Ist.forEach(t),cOo=r(d8e," (ImageGPT model)"),d8e.forEach(t),fOo=i(Ee),ft=n(Ee,"LI",{});var ef=s(ft);rge=n(ef,"STRONG",{});var qst=s(rge);mOo=r(qst,"perceiver"),qst.forEach(t),gOo=r(ef," \u2014 "),LO=n(ef,"A",{href:!0});var Nst=s(LO);hOo=r(Nst,"PerceiverForImageClassificationLearned"),Nst.forEach(t),pOo=r(ef," or "),xO=n(ef,"A",{href:!0});var jst=s(xO);uOo=r(jst,"PerceiverForImageClassificationFourier"),jst.forEach(t),_Oo=r(ef," or "),$O=n(ef,"A",{href:!0});var Dst=s($O);bOo=r(Dst,"PerceiverForImageClassificationConvProcessing"),Dst.forEach(t),vOo=r(ef," (Perceiver model)"),ef.forEach(t),FOo=i(Ee),b5=n(Ee,"LI",{});var c8e=s(b5);tge=n(c8e,"STRONG",{});var Gst=s(tge);TOo=r(Gst,"poolformer"),Gst.forEach(t),MOo=r(c8e," \u2014 "),kO=n(c8e,"A",{href:!0});var Ost=s(kO);EOo=r(Ost,"PoolFormerForImageClassification"),Ost.forEach(t),COo=r(c8e," (PoolFormer model)"),c8e.forEach(t),wOo=i(Ee),v5=n(Ee,"LI",{});var f8e=s(v5);age=n(f8e,"STRONG",{});var Vst=s(age);AOo=r(Vst,"regnet"),Vst.forEach(t),yOo=r(f8e," \u2014 "),SO=n(f8e,"A",{href:!0});var Xst=s(SO);LOo=r(Xst,"RegNetForImageClassification"),Xst.forEach(t),xOo=r(f8e," (RegNet model)"),f8e.forEach(t),$Oo=i(Ee),F5=n(Ee,"LI",{});var m8e=s(F5);nge=n(m8e,"STRONG",{});var zst=s(nge);kOo=r(zst,"resnet"),zst.forEach(t),SOo=r(m8e," \u2014 "),RO=n(m8e,"A",{href:!0});var Qst=s(RO);ROo=r(Qst,"ResNetForImageClassification"),Qst.forEach(t),BOo=r(m8e," (ResNet model)"),m8e.forEach(t),POo=i(Ee),T5=n(Ee,"LI",{});var g8e=s(T5);sge=n(g8e,"STRONG",{});var Wst=s(sge);IOo=r(Wst,"segformer"),Wst.forEach(t),qOo=r(g8e," \u2014 "),BO=n(g8e,"A",{href:!0});var Hst=s(BO);NOo=r(Hst,"SegformerForImageClassification"),Hst.forEach(t),jOo=r(g8e," (SegFormer model)"),g8e.forEach(t),DOo=i(Ee),M5=n(Ee,"LI",{});var h8e=s(M5);lge=n(h8e,"STRONG",{});var Ust=s(lge);GOo=r(Ust,"swin"),Ust.forEach(t),OOo=r(h8e," \u2014 "),PO=n(h8e,"A",{href:!0});var Jst=s(PO);VOo=r(Jst,"SwinForImageClassification"),Jst.forEach(t),XOo=r(h8e," (Swin model)"),h8e.forEach(t),zOo=i(Ee),E5=n(Ee,"LI",{});var p8e=s(E5);ige=n(p8e,"STRONG",{});var Yst=s(ige);QOo=r(Yst,"van"),Yst.forEach(t),WOo=r(p8e," \u2014 "),IO=n(p8e,"A",{href:!0});var Kst=s(IO);HOo=r(Kst,"VanForImageClassification"),Kst.forEach(t),UOo=r(p8e," (VAN model)"),p8e.forEach(t),JOo=i(Ee),C5=n(Ee,"LI",{});var u8e=s(C5);dge=n(u8e,"STRONG",{});var Zst=s(dge);YOo=r(Zst,"vit"),Zst.forEach(t),KOo=r(u8e," \u2014 "),qO=n(u8e,"A",{href:!0});var elt=s(qO);ZOo=r(elt,"ViTForImageClassification"),elt.forEach(t),eVo=r(u8e," (ViT model)"),u8e.forEach(t),Ee.forEach(t),oVo=i(la),w5=n(la,"P",{});var _8e=s(w5);rVo=r(_8e,"The model is set in evaluation mode by default using "),cge=n(_8e,"CODE",{});var olt=s(cge);tVo=r(olt,"model.eval()"),olt.forEach(t),aVo=r(_8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),fge=n(_8e,"CODE",{});var rlt=s(fge);nVo=r(rlt,"model.train()"),rlt.forEach(t),_8e.forEach(t),sVo=i(la),T(A5.$$.fragment,la),la.forEach(t),Ws.forEach(t),ABe=i(f),Yi=n(f,"H2",{class:!0});var LIe=s(Yi);y5=n(LIe,"A",{id:!0,class:!0,href:!0});var tlt=s(y5);mge=n(tlt,"SPAN",{});var alt=s(mge);T(U0.$$.fragment,alt),alt.forEach(t),tlt.forEach(t),lVo=i(LIe),gge=n(LIe,"SPAN",{});var nlt=s(gge);iVo=r(nlt,"AutoModelForVision2Seq"),nlt.forEach(t),LIe.forEach(t),yBe=i(f),Do=n(f,"DIV",{class:!0});var Hs=s(Do);T(J0.$$.fragment,Hs),dVo=i(Hs),Ki=n(Hs,"P",{});var wY=s(Ki);cVo=r(wY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),NO=n(wY,"A",{href:!0});var slt=s(NO);fVo=r(slt,"from_pretrained()"),slt.forEach(t),mVo=r(wY," class method or the "),jO=n(wY,"A",{href:!0});var llt=s(jO);gVo=r(llt,"from_config()"),llt.forEach(t),hVo=r(wY,` class
method.`),wY.forEach(t),pVo=i(Hs),Y0=n(Hs,"P",{});var xIe=s(Y0);uVo=r(xIe,"This class cannot be instantiated directly using "),hge=n(xIe,"CODE",{});var ilt=s(hge);_Vo=r(ilt,"__init__()"),ilt.forEach(t),bVo=r(xIe," (throws an error)."),xIe.forEach(t),vVo=i(Hs),mt=n(Hs,"DIV",{class:!0});var Q3=s(mt);T(K0.$$.fragment,Q3),FVo=i(Q3),pge=n(Q3,"P",{});var dlt=s(pge);TVo=r(dlt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),dlt.forEach(t),MVo=i(Q3),Zi=n(Q3,"P",{});var AY=s(Zi);EVo=r(AY,`Note:
Loading a model from its configuration file does `),uge=n(AY,"STRONG",{});var clt=s(uge);CVo=r(clt,"not"),clt.forEach(t),wVo=r(AY,` load the model weights. It only affects the
model\u2019s configuration. Use `),DO=n(AY,"A",{href:!0});var flt=s(DO);AVo=r(flt,"from_pretrained()"),flt.forEach(t),yVo=r(AY," to load the model weights."),AY.forEach(t),LVo=i(Q3),T(L5.$$.fragment,Q3),Q3.forEach(t),xVo=i(Hs),so=n(Hs,"DIV",{class:!0});var ia=s(so);T(Z0.$$.fragment,ia),$Vo=i(ia),_ge=n(ia,"P",{});var mlt=s(_ge);kVo=r(mlt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),mlt.forEach(t),SVo=i(ia),Pa=n(ia,"P",{});var W3=s(Pa);RVo=r(W3,"The model class to instantiate is selected based on the "),bge=n(W3,"CODE",{});var glt=s(bge);BVo=r(glt,"model_type"),glt.forEach(t),PVo=r(W3,` property of the config object (either
passed as an argument or loaded from `),vge=n(W3,"CODE",{});var hlt=s(vge);IVo=r(hlt,"pretrained_model_name_or_path"),hlt.forEach(t),qVo=r(W3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fge=n(W3,"CODE",{});var plt=s(Fge);NVo=r(plt,"pretrained_model_name_or_path"),plt.forEach(t),jVo=r(W3,":"),W3.forEach(t),DVo=i(ia),Tge=n(ia,"UL",{});var ult=s(Tge);x5=n(ult,"LI",{});var b8e=s(x5);Mge=n(b8e,"STRONG",{});var _lt=s(Mge);GVo=r(_lt,"vision-encoder-decoder"),_lt.forEach(t),OVo=r(b8e," \u2014 "),GO=n(b8e,"A",{href:!0});var blt=s(GO);VVo=r(blt,"VisionEncoderDecoderModel"),blt.forEach(t),XVo=r(b8e," (Vision Encoder decoder model)"),b8e.forEach(t),ult.forEach(t),zVo=i(ia),$5=n(ia,"P",{});var v8e=s($5);QVo=r(v8e,"The model is set in evaluation mode by default using "),Ege=n(v8e,"CODE",{});var vlt=s(Ege);WVo=r(vlt,"model.eval()"),vlt.forEach(t),HVo=r(v8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Cge=n(v8e,"CODE",{});var Flt=s(Cge);UVo=r(Flt,"model.train()"),Flt.forEach(t),v8e.forEach(t),JVo=i(ia),T(k5.$$.fragment,ia),ia.forEach(t),Hs.forEach(t),LBe=i(f),ed=n(f,"H2",{class:!0});var $Ie=s(ed);S5=n($Ie,"A",{id:!0,class:!0,href:!0});var Tlt=s(S5);wge=n(Tlt,"SPAN",{});var Mlt=s(wge);T(ey.$$.fragment,Mlt),Mlt.forEach(t),Tlt.forEach(t),YVo=i($Ie),Age=n($Ie,"SPAN",{});var Elt=s(Age);KVo=r(Elt,"AutoModelForAudioClassification"),Elt.forEach(t),$Ie.forEach(t),xBe=i(f),Go=n(f,"DIV",{class:!0});var Us=s(Go);T(oy.$$.fragment,Us),ZVo=i(Us),od=n(Us,"P",{});var yY=s(od);eXo=r(yY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),OO=n(yY,"A",{href:!0});var Clt=s(OO);oXo=r(Clt,"from_pretrained()"),Clt.forEach(t),rXo=r(yY," class method or the "),VO=n(yY,"A",{href:!0});var wlt=s(VO);tXo=r(wlt,"from_config()"),wlt.forEach(t),aXo=r(yY,` class
method.`),yY.forEach(t),nXo=i(Us),ry=n(Us,"P",{});var kIe=s(ry);sXo=r(kIe,"This class cannot be instantiated directly using "),yge=n(kIe,"CODE",{});var Alt=s(yge);lXo=r(Alt,"__init__()"),Alt.forEach(t),iXo=r(kIe," (throws an error)."),kIe.forEach(t),dXo=i(Us),gt=n(Us,"DIV",{class:!0});var H3=s(gt);T(ty.$$.fragment,H3),cXo=i(H3),Lge=n(H3,"P",{});var ylt=s(Lge);fXo=r(ylt,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),ylt.forEach(t),mXo=i(H3),rd=n(H3,"P",{});var LY=s(rd);gXo=r(LY,`Note:
Loading a model from its configuration file does `),xge=n(LY,"STRONG",{});var Llt=s(xge);hXo=r(Llt,"not"),Llt.forEach(t),pXo=r(LY,` load the model weights. It only affects the
model\u2019s configuration. Use `),XO=n(LY,"A",{href:!0});var xlt=s(XO);uXo=r(xlt,"from_pretrained()"),xlt.forEach(t),_Xo=r(LY," to load the model weights."),LY.forEach(t),bXo=i(H3),T(R5.$$.fragment,H3),H3.forEach(t),vXo=i(Us),lo=n(Us,"DIV",{class:!0});var da=s(lo);T(ay.$$.fragment,da),FXo=i(da),$ge=n(da,"P",{});var $lt=s($ge);TXo=r($lt,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),$lt.forEach(t),MXo=i(da),Ia=n(da,"P",{});var U3=s(Ia);EXo=r(U3,"The model class to instantiate is selected based on the "),kge=n(U3,"CODE",{});var klt=s(kge);CXo=r(klt,"model_type"),klt.forEach(t),wXo=r(U3,` property of the config object (either
passed as an argument or loaded from `),Sge=n(U3,"CODE",{});var Slt=s(Sge);AXo=r(Slt,"pretrained_model_name_or_path"),Slt.forEach(t),yXo=r(U3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rge=n(U3,"CODE",{});var Rlt=s(Rge);LXo=r(Rlt,"pretrained_model_name_or_path"),Rlt.forEach(t),xXo=r(U3,":"),U3.forEach(t),$Xo=i(da),Ne=n(da,"UL",{});var bo=s(Ne);B5=n(bo,"LI",{});var F8e=s(B5);Bge=n(F8e,"STRONG",{});var Blt=s(Bge);kXo=r(Blt,"data2vec-audio"),Blt.forEach(t),SXo=r(F8e," \u2014 "),zO=n(F8e,"A",{href:!0});var Plt=s(zO);RXo=r(Plt,"Data2VecAudioForSequenceClassification"),Plt.forEach(t),BXo=r(F8e," (Data2VecAudio model)"),F8e.forEach(t),PXo=i(bo),P5=n(bo,"LI",{});var T8e=s(P5);Pge=n(T8e,"STRONG",{});var Ilt=s(Pge);IXo=r(Ilt,"hubert"),Ilt.forEach(t),qXo=r(T8e," \u2014 "),QO=n(T8e,"A",{href:!0});var qlt=s(QO);NXo=r(qlt,"HubertForSequenceClassification"),qlt.forEach(t),jXo=r(T8e," (Hubert model)"),T8e.forEach(t),DXo=i(bo),I5=n(bo,"LI",{});var M8e=s(I5);Ige=n(M8e,"STRONG",{});var Nlt=s(Ige);GXo=r(Nlt,"sew"),Nlt.forEach(t),OXo=r(M8e," \u2014 "),WO=n(M8e,"A",{href:!0});var jlt=s(WO);VXo=r(jlt,"SEWForSequenceClassification"),jlt.forEach(t),XXo=r(M8e," (SEW model)"),M8e.forEach(t),zXo=i(bo),q5=n(bo,"LI",{});var E8e=s(q5);qge=n(E8e,"STRONG",{});var Dlt=s(qge);QXo=r(Dlt,"sew-d"),Dlt.forEach(t),WXo=r(E8e," \u2014 "),HO=n(E8e,"A",{href:!0});var Glt=s(HO);HXo=r(Glt,"SEWDForSequenceClassification"),Glt.forEach(t),UXo=r(E8e," (SEW-D model)"),E8e.forEach(t),JXo=i(bo),N5=n(bo,"LI",{});var C8e=s(N5);Nge=n(C8e,"STRONG",{});var Olt=s(Nge);YXo=r(Olt,"unispeech"),Olt.forEach(t),KXo=r(C8e," \u2014 "),UO=n(C8e,"A",{href:!0});var Vlt=s(UO);ZXo=r(Vlt,"UniSpeechForSequenceClassification"),Vlt.forEach(t),ezo=r(C8e," (UniSpeech model)"),C8e.forEach(t),ozo=i(bo),j5=n(bo,"LI",{});var w8e=s(j5);jge=n(w8e,"STRONG",{});var Xlt=s(jge);rzo=r(Xlt,"unispeech-sat"),Xlt.forEach(t),tzo=r(w8e," \u2014 "),JO=n(w8e,"A",{href:!0});var zlt=s(JO);azo=r(zlt,"UniSpeechSatForSequenceClassification"),zlt.forEach(t),nzo=r(w8e," (UniSpeechSat model)"),w8e.forEach(t),szo=i(bo),D5=n(bo,"LI",{});var A8e=s(D5);Dge=n(A8e,"STRONG",{});var Qlt=s(Dge);lzo=r(Qlt,"wav2vec2"),Qlt.forEach(t),izo=r(A8e," \u2014 "),YO=n(A8e,"A",{href:!0});var Wlt=s(YO);dzo=r(Wlt,"Wav2Vec2ForSequenceClassification"),Wlt.forEach(t),czo=r(A8e," (Wav2Vec2 model)"),A8e.forEach(t),fzo=i(bo),G5=n(bo,"LI",{});var y8e=s(G5);Gge=n(y8e,"STRONG",{});var Hlt=s(Gge);mzo=r(Hlt,"wavlm"),Hlt.forEach(t),gzo=r(y8e," \u2014 "),KO=n(y8e,"A",{href:!0});var Ult=s(KO);hzo=r(Ult,"WavLMForSequenceClassification"),Ult.forEach(t),pzo=r(y8e," (WavLM model)"),y8e.forEach(t),bo.forEach(t),uzo=i(da),O5=n(da,"P",{});var L8e=s(O5);_zo=r(L8e,"The model is set in evaluation mode by default using "),Oge=n(L8e,"CODE",{});var Jlt=s(Oge);bzo=r(Jlt,"model.eval()"),Jlt.forEach(t),vzo=r(L8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Vge=n(L8e,"CODE",{});var Ylt=s(Vge);Fzo=r(Ylt,"model.train()"),Ylt.forEach(t),L8e.forEach(t),Tzo=i(da),T(V5.$$.fragment,da),da.forEach(t),Us.forEach(t),$Be=i(f),td=n(f,"H2",{class:!0});var SIe=s(td);X5=n(SIe,"A",{id:!0,class:!0,href:!0});var Klt=s(X5);Xge=n(Klt,"SPAN",{});var Zlt=s(Xge);T(ny.$$.fragment,Zlt),Zlt.forEach(t),Klt.forEach(t),Mzo=i(SIe),zge=n(SIe,"SPAN",{});var eit=s(zge);Ezo=r(eit,"AutoModelForAudioFrameClassification"),eit.forEach(t),SIe.forEach(t),kBe=i(f),Oo=n(f,"DIV",{class:!0});var Js=s(Oo);T(sy.$$.fragment,Js),Czo=i(Js),ad=n(Js,"P",{});var xY=s(ad);wzo=r(xY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),ZO=n(xY,"A",{href:!0});var oit=s(ZO);Azo=r(oit,"from_pretrained()"),oit.forEach(t),yzo=r(xY," class method or the "),eV=n(xY,"A",{href:!0});var rit=s(eV);Lzo=r(rit,"from_config()"),rit.forEach(t),xzo=r(xY,` class
method.`),xY.forEach(t),$zo=i(Js),ly=n(Js,"P",{});var RIe=s(ly);kzo=r(RIe,"This class cannot be instantiated directly using "),Qge=n(RIe,"CODE",{});var tit=s(Qge);Szo=r(tit,"__init__()"),tit.forEach(t),Rzo=r(RIe," (throws an error)."),RIe.forEach(t),Bzo=i(Js),ht=n(Js,"DIV",{class:!0});var J3=s(ht);T(iy.$$.fragment,J3),Pzo=i(J3),Wge=n(J3,"P",{});var ait=s(Wge);Izo=r(ait,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),ait.forEach(t),qzo=i(J3),nd=n(J3,"P",{});var $Y=s(nd);Nzo=r($Y,`Note:
Loading a model from its configuration file does `),Hge=n($Y,"STRONG",{});var nit=s(Hge);jzo=r(nit,"not"),nit.forEach(t),Dzo=r($Y,` load the model weights. It only affects the
model\u2019s configuration. Use `),oV=n($Y,"A",{href:!0});var sit=s(oV);Gzo=r(sit,"from_pretrained()"),sit.forEach(t),Ozo=r($Y," to load the model weights."),$Y.forEach(t),Vzo=i(J3),T(z5.$$.fragment,J3),J3.forEach(t),Xzo=i(Js),io=n(Js,"DIV",{class:!0});var ca=s(io);T(dy.$$.fragment,ca),zzo=i(ca),Uge=n(ca,"P",{});var lit=s(Uge);Qzo=r(lit,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),lit.forEach(t),Wzo=i(ca),qa=n(ca,"P",{});var Y3=s(qa);Hzo=r(Y3,"The model class to instantiate is selected based on the "),Jge=n(Y3,"CODE",{});var iit=s(Jge);Uzo=r(iit,"model_type"),iit.forEach(t),Jzo=r(Y3,` property of the config object (either
passed as an argument or loaded from `),Yge=n(Y3,"CODE",{});var dit=s(Yge);Yzo=r(dit,"pretrained_model_name_or_path"),dit.forEach(t),Kzo=r(Y3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kge=n(Y3,"CODE",{});var cit=s(Kge);Zzo=r(cit,"pretrained_model_name_or_path"),cit.forEach(t),eQo=r(Y3,":"),Y3.forEach(t),oQo=i(ca),Na=n(ca,"UL",{});var K3=s(Na);Q5=n(K3,"LI",{});var x8e=s(Q5);Zge=n(x8e,"STRONG",{});var fit=s(Zge);rQo=r(fit,"data2vec-audio"),fit.forEach(t),tQo=r(x8e," \u2014 "),rV=n(x8e,"A",{href:!0});var mit=s(rV);aQo=r(mit,"Data2VecAudioForAudioFrameClassification"),mit.forEach(t),nQo=r(x8e," (Data2VecAudio model)"),x8e.forEach(t),sQo=i(K3),W5=n(K3,"LI",{});var $8e=s(W5);ehe=n($8e,"STRONG",{});var git=s(ehe);lQo=r(git,"unispeech-sat"),git.forEach(t),iQo=r($8e," \u2014 "),tV=n($8e,"A",{href:!0});var hit=s(tV);dQo=r(hit,"UniSpeechSatForAudioFrameClassification"),hit.forEach(t),cQo=r($8e," (UniSpeechSat model)"),$8e.forEach(t),fQo=i(K3),H5=n(K3,"LI",{});var k8e=s(H5);ohe=n(k8e,"STRONG",{});var pit=s(ohe);mQo=r(pit,"wav2vec2"),pit.forEach(t),gQo=r(k8e," \u2014 "),aV=n(k8e,"A",{href:!0});var uit=s(aV);hQo=r(uit,"Wav2Vec2ForAudioFrameClassification"),uit.forEach(t),pQo=r(k8e," (Wav2Vec2 model)"),k8e.forEach(t),uQo=i(K3),U5=n(K3,"LI",{});var S8e=s(U5);rhe=n(S8e,"STRONG",{});var _it=s(rhe);_Qo=r(_it,"wavlm"),_it.forEach(t),bQo=r(S8e," \u2014 "),nV=n(S8e,"A",{href:!0});var bit=s(nV);vQo=r(bit,"WavLMForAudioFrameClassification"),bit.forEach(t),FQo=r(S8e," (WavLM model)"),S8e.forEach(t),K3.forEach(t),TQo=i(ca),J5=n(ca,"P",{});var R8e=s(J5);MQo=r(R8e,"The model is set in evaluation mode by default using "),the=n(R8e,"CODE",{});var vit=s(the);EQo=r(vit,"model.eval()"),vit.forEach(t),CQo=r(R8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ahe=n(R8e,"CODE",{});var Fit=s(ahe);wQo=r(Fit,"model.train()"),Fit.forEach(t),R8e.forEach(t),AQo=i(ca),T(Y5.$$.fragment,ca),ca.forEach(t),Js.forEach(t),SBe=i(f),sd=n(f,"H2",{class:!0});var BIe=s(sd);K5=n(BIe,"A",{id:!0,class:!0,href:!0});var Tit=s(K5);nhe=n(Tit,"SPAN",{});var Mit=s(nhe);T(cy.$$.fragment,Mit),Mit.forEach(t),Tit.forEach(t),yQo=i(BIe),she=n(BIe,"SPAN",{});var Eit=s(she);LQo=r(Eit,"AutoModelForCTC"),Eit.forEach(t),BIe.forEach(t),RBe=i(f),Vo=n(f,"DIV",{class:!0});var Ys=s(Vo);T(fy.$$.fragment,Ys),xQo=i(Ys),ld=n(Ys,"P",{});var kY=s(ld);$Qo=r(kY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),sV=n(kY,"A",{href:!0});var Cit=s(sV);kQo=r(Cit,"from_pretrained()"),Cit.forEach(t),SQo=r(kY," class method or the "),lV=n(kY,"A",{href:!0});var wit=s(lV);RQo=r(wit,"from_config()"),wit.forEach(t),BQo=r(kY,` class
method.`),kY.forEach(t),PQo=i(Ys),my=n(Ys,"P",{});var PIe=s(my);IQo=r(PIe,"This class cannot be instantiated directly using "),lhe=n(PIe,"CODE",{});var Ait=s(lhe);qQo=r(Ait,"__init__()"),Ait.forEach(t),NQo=r(PIe," (throws an error)."),PIe.forEach(t),jQo=i(Ys),pt=n(Ys,"DIV",{class:!0});var Z3=s(pt);T(gy.$$.fragment,Z3),DQo=i(Z3),ihe=n(Z3,"P",{});var yit=s(ihe);GQo=r(yit,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),yit.forEach(t),OQo=i(Z3),id=n(Z3,"P",{});var SY=s(id);VQo=r(SY,`Note:
Loading a model from its configuration file does `),dhe=n(SY,"STRONG",{});var Lit=s(dhe);XQo=r(Lit,"not"),Lit.forEach(t),zQo=r(SY,` load the model weights. It only affects the
model\u2019s configuration. Use `),iV=n(SY,"A",{href:!0});var xit=s(iV);QQo=r(xit,"from_pretrained()"),xit.forEach(t),WQo=r(SY," to load the model weights."),SY.forEach(t),HQo=i(Z3),T(Z5.$$.fragment,Z3),Z3.forEach(t),UQo=i(Ys),co=n(Ys,"DIV",{class:!0});var fa=s(co);T(hy.$$.fragment,fa),JQo=i(fa),che=n(fa,"P",{});var $it=s(che);YQo=r($it,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),$it.forEach(t),KQo=i(fa),ja=n(fa,"P",{});var ew=s(ja);ZQo=r(ew,"The model class to instantiate is selected based on the "),fhe=n(ew,"CODE",{});var kit=s(fhe);eWo=r(kit,"model_type"),kit.forEach(t),oWo=r(ew,` property of the config object (either
passed as an argument or loaded from `),mhe=n(ew,"CODE",{});var Sit=s(mhe);rWo=r(Sit,"pretrained_model_name_or_path"),Sit.forEach(t),tWo=r(ew,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ghe=n(ew,"CODE",{});var Rit=s(ghe);aWo=r(Rit,"pretrained_model_name_or_path"),Rit.forEach(t),nWo=r(ew,":"),ew.forEach(t),sWo=i(fa),je=n(fa,"UL",{});var vo=s(je);ev=n(vo,"LI",{});var B8e=s(ev);hhe=n(B8e,"STRONG",{});var Bit=s(hhe);lWo=r(Bit,"data2vec-audio"),Bit.forEach(t),iWo=r(B8e," \u2014 "),dV=n(B8e,"A",{href:!0});var Pit=s(dV);dWo=r(Pit,"Data2VecAudioForCTC"),Pit.forEach(t),cWo=r(B8e," (Data2VecAudio model)"),B8e.forEach(t),fWo=i(vo),ov=n(vo,"LI",{});var P8e=s(ov);phe=n(P8e,"STRONG",{});var Iit=s(phe);mWo=r(Iit,"hubert"),Iit.forEach(t),gWo=r(P8e," \u2014 "),cV=n(P8e,"A",{href:!0});var qit=s(cV);hWo=r(qit,"HubertForCTC"),qit.forEach(t),pWo=r(P8e," (Hubert model)"),P8e.forEach(t),uWo=i(vo),rv=n(vo,"LI",{});var I8e=s(rv);uhe=n(I8e,"STRONG",{});var Nit=s(uhe);_Wo=r(Nit,"sew"),Nit.forEach(t),bWo=r(I8e," \u2014 "),fV=n(I8e,"A",{href:!0});var jit=s(fV);vWo=r(jit,"SEWForCTC"),jit.forEach(t),FWo=r(I8e," (SEW model)"),I8e.forEach(t),TWo=i(vo),tv=n(vo,"LI",{});var q8e=s(tv);_he=n(q8e,"STRONG",{});var Dit=s(_he);MWo=r(Dit,"sew-d"),Dit.forEach(t),EWo=r(q8e," \u2014 "),mV=n(q8e,"A",{href:!0});var Git=s(mV);CWo=r(Git,"SEWDForCTC"),Git.forEach(t),wWo=r(q8e," (SEW-D model)"),q8e.forEach(t),AWo=i(vo),av=n(vo,"LI",{});var N8e=s(av);bhe=n(N8e,"STRONG",{});var Oit=s(bhe);yWo=r(Oit,"unispeech"),Oit.forEach(t),LWo=r(N8e," \u2014 "),gV=n(N8e,"A",{href:!0});var Vit=s(gV);xWo=r(Vit,"UniSpeechForCTC"),Vit.forEach(t),$Wo=r(N8e," (UniSpeech model)"),N8e.forEach(t),kWo=i(vo),nv=n(vo,"LI",{});var j8e=s(nv);vhe=n(j8e,"STRONG",{});var Xit=s(vhe);SWo=r(Xit,"unispeech-sat"),Xit.forEach(t),RWo=r(j8e," \u2014 "),hV=n(j8e,"A",{href:!0});var zit=s(hV);BWo=r(zit,"UniSpeechSatForCTC"),zit.forEach(t),PWo=r(j8e," (UniSpeechSat model)"),j8e.forEach(t),IWo=i(vo),sv=n(vo,"LI",{});var D8e=s(sv);Fhe=n(D8e,"STRONG",{});var Qit=s(Fhe);qWo=r(Qit,"wav2vec2"),Qit.forEach(t),NWo=r(D8e," \u2014 "),pV=n(D8e,"A",{href:!0});var Wit=s(pV);jWo=r(Wit,"Wav2Vec2ForCTC"),Wit.forEach(t),DWo=r(D8e," (Wav2Vec2 model)"),D8e.forEach(t),GWo=i(vo),lv=n(vo,"LI",{});var G8e=s(lv);The=n(G8e,"STRONG",{});var Hit=s(The);OWo=r(Hit,"wavlm"),Hit.forEach(t),VWo=r(G8e," \u2014 "),uV=n(G8e,"A",{href:!0});var Uit=s(uV);XWo=r(Uit,"WavLMForCTC"),Uit.forEach(t),zWo=r(G8e," (WavLM model)"),G8e.forEach(t),vo.forEach(t),QWo=i(fa),iv=n(fa,"P",{});var O8e=s(iv);WWo=r(O8e,"The model is set in evaluation mode by default using "),Mhe=n(O8e,"CODE",{});var Jit=s(Mhe);HWo=r(Jit,"model.eval()"),Jit.forEach(t),UWo=r(O8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ehe=n(O8e,"CODE",{});var Yit=s(Ehe);JWo=r(Yit,"model.train()"),Yit.forEach(t),O8e.forEach(t),YWo=i(fa),T(dv.$$.fragment,fa),fa.forEach(t),Ys.forEach(t),BBe=i(f),dd=n(f,"H2",{class:!0});var IIe=s(dd);cv=n(IIe,"A",{id:!0,class:!0,href:!0});var Kit=s(cv);Che=n(Kit,"SPAN",{});var Zit=s(Che);T(py.$$.fragment,Zit),Zit.forEach(t),Kit.forEach(t),KWo=i(IIe),whe=n(IIe,"SPAN",{});var edt=s(whe);ZWo=r(edt,"AutoModelForSpeechSeq2Seq"),edt.forEach(t),IIe.forEach(t),PBe=i(f),Xo=n(f,"DIV",{class:!0});var Ks=s(Xo);T(uy.$$.fragment,Ks),eHo=i(Ks),cd=n(Ks,"P",{});var RY=s(cd);oHo=r(RY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),_V=n(RY,"A",{href:!0});var odt=s(_V);rHo=r(odt,"from_pretrained()"),odt.forEach(t),tHo=r(RY," class method or the "),bV=n(RY,"A",{href:!0});var rdt=s(bV);aHo=r(rdt,"from_config()"),rdt.forEach(t),nHo=r(RY,` class
method.`),RY.forEach(t),sHo=i(Ks),_y=n(Ks,"P",{});var qIe=s(_y);lHo=r(qIe,"This class cannot be instantiated directly using "),Ahe=n(qIe,"CODE",{});var tdt=s(Ahe);iHo=r(tdt,"__init__()"),tdt.forEach(t),dHo=r(qIe," (throws an error)."),qIe.forEach(t),cHo=i(Ks),ut=n(Ks,"DIV",{class:!0});var ow=s(ut);T(by.$$.fragment,ow),fHo=i(ow),yhe=n(ow,"P",{});var adt=s(yhe);mHo=r(adt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),adt.forEach(t),gHo=i(ow),fd=n(ow,"P",{});var BY=s(fd);hHo=r(BY,`Note:
Loading a model from its configuration file does `),Lhe=n(BY,"STRONG",{});var ndt=s(Lhe);pHo=r(ndt,"not"),ndt.forEach(t),uHo=r(BY,` load the model weights. It only affects the
model\u2019s configuration. Use `),vV=n(BY,"A",{href:!0});var sdt=s(vV);_Ho=r(sdt,"from_pretrained()"),sdt.forEach(t),bHo=r(BY," to load the model weights."),BY.forEach(t),vHo=i(ow),T(fv.$$.fragment,ow),ow.forEach(t),FHo=i(Ks),fo=n(Ks,"DIV",{class:!0});var ma=s(fo);T(vy.$$.fragment,ma),THo=i(ma),xhe=n(ma,"P",{});var ldt=s(xhe);MHo=r(ldt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),ldt.forEach(t),EHo=i(ma),Da=n(ma,"P",{});var rw=s(Da);CHo=r(rw,"The model class to instantiate is selected based on the "),$he=n(rw,"CODE",{});var idt=s($he);wHo=r(idt,"model_type"),idt.forEach(t),AHo=r(rw,` property of the config object (either
passed as an argument or loaded from `),khe=n(rw,"CODE",{});var ddt=s(khe);yHo=r(ddt,"pretrained_model_name_or_path"),ddt.forEach(t),LHo=r(rw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),She=n(rw,"CODE",{});var cdt=s(She);xHo=r(cdt,"pretrained_model_name_or_path"),cdt.forEach(t),$Ho=r(rw,":"),rw.forEach(t),kHo=i(ma),Fy=n(ma,"UL",{});var NIe=s(Fy);mv=n(NIe,"LI",{});var V8e=s(mv);Rhe=n(V8e,"STRONG",{});var fdt=s(Rhe);SHo=r(fdt,"speech-encoder-decoder"),fdt.forEach(t),RHo=r(V8e," \u2014 "),FV=n(V8e,"A",{href:!0});var mdt=s(FV);BHo=r(mdt,"SpeechEncoderDecoderModel"),mdt.forEach(t),PHo=r(V8e," (Speech Encoder decoder model)"),V8e.forEach(t),IHo=i(NIe),gv=n(NIe,"LI",{});var X8e=s(gv);Bhe=n(X8e,"STRONG",{});var gdt=s(Bhe);qHo=r(gdt,"speech_to_text"),gdt.forEach(t),NHo=r(X8e," \u2014 "),TV=n(X8e,"A",{href:!0});var hdt=s(TV);jHo=r(hdt,"Speech2TextForConditionalGeneration"),hdt.forEach(t),DHo=r(X8e," (Speech2Text model)"),X8e.forEach(t),NIe.forEach(t),GHo=i(ma),hv=n(ma,"P",{});var z8e=s(hv);OHo=r(z8e,"The model is set in evaluation mode by default using "),Phe=n(z8e,"CODE",{});var pdt=s(Phe);VHo=r(pdt,"model.eval()"),pdt.forEach(t),XHo=r(z8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ihe=n(z8e,"CODE",{});var udt=s(Ihe);zHo=r(udt,"model.train()"),udt.forEach(t),z8e.forEach(t),QHo=i(ma),T(pv.$$.fragment,ma),ma.forEach(t),Ks.forEach(t),IBe=i(f),md=n(f,"H2",{class:!0});var jIe=s(md);uv=n(jIe,"A",{id:!0,class:!0,href:!0});var _dt=s(uv);qhe=n(_dt,"SPAN",{});var bdt=s(qhe);T(Ty.$$.fragment,bdt),bdt.forEach(t),_dt.forEach(t),WHo=i(jIe),Nhe=n(jIe,"SPAN",{});var vdt=s(Nhe);HHo=r(vdt,"AutoModelForAudioXVector"),vdt.forEach(t),jIe.forEach(t),qBe=i(f),zo=n(f,"DIV",{class:!0});var Zs=s(zo);T(My.$$.fragment,Zs),UHo=i(Zs),gd=n(Zs,"P",{});var PY=s(gd);JHo=r(PY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),MV=n(PY,"A",{href:!0});var Fdt=s(MV);YHo=r(Fdt,"from_pretrained()"),Fdt.forEach(t),KHo=r(PY," class method or the "),EV=n(PY,"A",{href:!0});var Tdt=s(EV);ZHo=r(Tdt,"from_config()"),Tdt.forEach(t),eUo=r(PY,` class
method.`),PY.forEach(t),oUo=i(Zs),Ey=n(Zs,"P",{});var DIe=s(Ey);rUo=r(DIe,"This class cannot be instantiated directly using "),jhe=n(DIe,"CODE",{});var Mdt=s(jhe);tUo=r(Mdt,"__init__()"),Mdt.forEach(t),aUo=r(DIe," (throws an error)."),DIe.forEach(t),nUo=i(Zs),_t=n(Zs,"DIV",{class:!0});var tw=s(_t);T(Cy.$$.fragment,tw),sUo=i(tw),Dhe=n(tw,"P",{});var Edt=s(Dhe);lUo=r(Edt,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),Edt.forEach(t),iUo=i(tw),hd=n(tw,"P",{});var IY=s(hd);dUo=r(IY,`Note:
Loading a model from its configuration file does `),Ghe=n(IY,"STRONG",{});var Cdt=s(Ghe);cUo=r(Cdt,"not"),Cdt.forEach(t),fUo=r(IY,` load the model weights. It only affects the
model\u2019s configuration. Use `),CV=n(IY,"A",{href:!0});var wdt=s(CV);mUo=r(wdt,"from_pretrained()"),wdt.forEach(t),gUo=r(IY," to load the model weights."),IY.forEach(t),hUo=i(tw),T(_v.$$.fragment,tw),tw.forEach(t),pUo=i(Zs),mo=n(Zs,"DIV",{class:!0});var ga=s(mo);T(wy.$$.fragment,ga),uUo=i(ga),Ohe=n(ga,"P",{});var Adt=s(Ohe);_Uo=r(Adt,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),Adt.forEach(t),bUo=i(ga),Ga=n(ga,"P",{});var aw=s(Ga);vUo=r(aw,"The model class to instantiate is selected based on the "),Vhe=n(aw,"CODE",{});var ydt=s(Vhe);FUo=r(ydt,"model_type"),ydt.forEach(t),TUo=r(aw,` property of the config object (either
passed as an argument or loaded from `),Xhe=n(aw,"CODE",{});var Ldt=s(Xhe);MUo=r(Ldt,"pretrained_model_name_or_path"),Ldt.forEach(t),EUo=r(aw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zhe=n(aw,"CODE",{});var xdt=s(zhe);CUo=r(xdt,"pretrained_model_name_or_path"),xdt.forEach(t),wUo=r(aw,":"),aw.forEach(t),AUo=i(ga),Oa=n(ga,"UL",{});var nw=s(Oa);bv=n(nw,"LI",{});var Q8e=s(bv);Qhe=n(Q8e,"STRONG",{});var $dt=s(Qhe);yUo=r($dt,"data2vec-audio"),$dt.forEach(t),LUo=r(Q8e," \u2014 "),wV=n(Q8e,"A",{href:!0});var kdt=s(wV);xUo=r(kdt,"Data2VecAudioForXVector"),kdt.forEach(t),$Uo=r(Q8e," (Data2VecAudio model)"),Q8e.forEach(t),kUo=i(nw),vv=n(nw,"LI",{});var W8e=s(vv);Whe=n(W8e,"STRONG",{});var Sdt=s(Whe);SUo=r(Sdt,"unispeech-sat"),Sdt.forEach(t),RUo=r(W8e," \u2014 "),AV=n(W8e,"A",{href:!0});var Rdt=s(AV);BUo=r(Rdt,"UniSpeechSatForXVector"),Rdt.forEach(t),PUo=r(W8e," (UniSpeechSat model)"),W8e.forEach(t),IUo=i(nw),Fv=n(nw,"LI",{});var H8e=s(Fv);Hhe=n(H8e,"STRONG",{});var Bdt=s(Hhe);qUo=r(Bdt,"wav2vec2"),Bdt.forEach(t),NUo=r(H8e," \u2014 "),yV=n(H8e,"A",{href:!0});var Pdt=s(yV);jUo=r(Pdt,"Wav2Vec2ForXVector"),Pdt.forEach(t),DUo=r(H8e," (Wav2Vec2 model)"),H8e.forEach(t),GUo=i(nw),Tv=n(nw,"LI",{});var U8e=s(Tv);Uhe=n(U8e,"STRONG",{});var Idt=s(Uhe);OUo=r(Idt,"wavlm"),Idt.forEach(t),VUo=r(U8e," \u2014 "),LV=n(U8e,"A",{href:!0});var qdt=s(LV);XUo=r(qdt,"WavLMForXVector"),qdt.forEach(t),zUo=r(U8e," (WavLM model)"),U8e.forEach(t),nw.forEach(t),QUo=i(ga),Mv=n(ga,"P",{});var J8e=s(Mv);WUo=r(J8e,"The model is set in evaluation mode by default using "),Jhe=n(J8e,"CODE",{});var Ndt=s(Jhe);HUo=r(Ndt,"model.eval()"),Ndt.forEach(t),UUo=r(J8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Yhe=n(J8e,"CODE",{});var jdt=s(Yhe);JUo=r(jdt,"model.train()"),jdt.forEach(t),J8e.forEach(t),YUo=i(ga),T(Ev.$$.fragment,ga),ga.forEach(t),Zs.forEach(t),NBe=i(f),pd=n(f,"H2",{class:!0});var GIe=s(pd);Cv=n(GIe,"A",{id:!0,class:!0,href:!0});var Ddt=s(Cv);Khe=n(Ddt,"SPAN",{});var Gdt=s(Khe);T(Ay.$$.fragment,Gdt),Gdt.forEach(t),Ddt.forEach(t),KUo=i(GIe),Zhe=n(GIe,"SPAN",{});var Odt=s(Zhe);ZUo=r(Odt,"AutoModelForMaskedImageModeling"),Odt.forEach(t),GIe.forEach(t),jBe=i(f),Qo=n(f,"DIV",{class:!0});var el=s(Qo);T(yy.$$.fragment,el),eJo=i(el),ud=n(el,"P",{});var qY=s(ud);oJo=r(qY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),xV=n(qY,"A",{href:!0});var Vdt=s(xV);rJo=r(Vdt,"from_pretrained()"),Vdt.forEach(t),tJo=r(qY," class method or the "),$V=n(qY,"A",{href:!0});var Xdt=s($V);aJo=r(Xdt,"from_config()"),Xdt.forEach(t),nJo=r(qY,` class
method.`),qY.forEach(t),sJo=i(el),Ly=n(el,"P",{});var OIe=s(Ly);lJo=r(OIe,"This class cannot be instantiated directly using "),epe=n(OIe,"CODE",{});var zdt=s(epe);iJo=r(zdt,"__init__()"),zdt.forEach(t),dJo=r(OIe," (throws an error)."),OIe.forEach(t),cJo=i(el),bt=n(el,"DIV",{class:!0});var sw=s(bt);T(xy.$$.fragment,sw),fJo=i(sw),ope=n(sw,"P",{});var Qdt=s(ope);mJo=r(Qdt,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),Qdt.forEach(t),gJo=i(sw),_d=n(sw,"P",{});var NY=s(_d);hJo=r(NY,`Note:
Loading a model from its configuration file does `),rpe=n(NY,"STRONG",{});var Wdt=s(rpe);pJo=r(Wdt,"not"),Wdt.forEach(t),uJo=r(NY,` load the model weights. It only affects the
model\u2019s configuration. Use `),kV=n(NY,"A",{href:!0});var Hdt=s(kV);_Jo=r(Hdt,"from_pretrained()"),Hdt.forEach(t),bJo=r(NY," to load the model weights."),NY.forEach(t),vJo=i(sw),T(wv.$$.fragment,sw),sw.forEach(t),FJo=i(el),go=n(el,"DIV",{class:!0});var ha=s(go);T($y.$$.fragment,ha),TJo=i(ha),tpe=n(ha,"P",{});var Udt=s(tpe);MJo=r(Udt,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),Udt.forEach(t),EJo=i(ha),Va=n(ha,"P",{});var lw=s(Va);CJo=r(lw,"The model class to instantiate is selected based on the "),ape=n(lw,"CODE",{});var Jdt=s(ape);wJo=r(Jdt,"model_type"),Jdt.forEach(t),AJo=r(lw,` property of the config object (either
passed as an argument or loaded from `),npe=n(lw,"CODE",{});var Ydt=s(npe);yJo=r(Ydt,"pretrained_model_name_or_path"),Ydt.forEach(t),LJo=r(lw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),spe=n(lw,"CODE",{});var Kdt=s(spe);xJo=r(Kdt,"pretrained_model_name_or_path"),Kdt.forEach(t),$Jo=r(lw,":"),lw.forEach(t),kJo=i(ha),bd=n(ha,"UL",{});var jY=s(bd);Av=n(jY,"LI",{});var Y8e=s(Av);lpe=n(Y8e,"STRONG",{});var Zdt=s(lpe);SJo=r(Zdt,"deit"),Zdt.forEach(t),RJo=r(Y8e," \u2014 "),SV=n(Y8e,"A",{href:!0});var ect=s(SV);BJo=r(ect,"DeiTForMaskedImageModeling"),ect.forEach(t),PJo=r(Y8e," (DeiT model)"),Y8e.forEach(t),IJo=i(jY),yv=n(jY,"LI",{});var K8e=s(yv);ipe=n(K8e,"STRONG",{});var oct=s(ipe);qJo=r(oct,"swin"),oct.forEach(t),NJo=r(K8e," \u2014 "),RV=n(K8e,"A",{href:!0});var rct=s(RV);jJo=r(rct,"SwinForMaskedImageModeling"),rct.forEach(t),DJo=r(K8e," (Swin model)"),K8e.forEach(t),GJo=i(jY),Lv=n(jY,"LI",{});var Z8e=s(Lv);dpe=n(Z8e,"STRONG",{});var tct=s(dpe);OJo=r(tct,"vit"),tct.forEach(t),VJo=r(Z8e," \u2014 "),BV=n(Z8e,"A",{href:!0});var act=s(BV);XJo=r(act,"ViTForMaskedImageModeling"),act.forEach(t),zJo=r(Z8e," (ViT model)"),Z8e.forEach(t),jY.forEach(t),QJo=i(ha),xv=n(ha,"P",{});var exe=s(xv);WJo=r(exe,"The model is set in evaluation mode by default using "),cpe=n(exe,"CODE",{});var nct=s(cpe);HJo=r(nct,"model.eval()"),nct.forEach(t),UJo=r(exe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),fpe=n(exe,"CODE",{});var sct=s(fpe);JJo=r(sct,"model.train()"),sct.forEach(t),exe.forEach(t),YJo=i(ha),T($v.$$.fragment,ha),ha.forEach(t),el.forEach(t),DBe=i(f),vd=n(f,"H2",{class:!0});var VIe=s(vd);kv=n(VIe,"A",{id:!0,class:!0,href:!0});var lct=s(kv);mpe=n(lct,"SPAN",{});var ict=s(mpe);T(ky.$$.fragment,ict),ict.forEach(t),lct.forEach(t),KJo=i(VIe),gpe=n(VIe,"SPAN",{});var dct=s(gpe);ZJo=r(dct,"AutoModelForObjectDetection"),dct.forEach(t),VIe.forEach(t),GBe=i(f),Wo=n(f,"DIV",{class:!0});var ol=s(Wo);T(Sy.$$.fragment,ol),eYo=i(ol),Fd=n(ol,"P",{});var DY=s(Fd);oYo=r(DY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),PV=n(DY,"A",{href:!0});var cct=s(PV);rYo=r(cct,"from_pretrained()"),cct.forEach(t),tYo=r(DY," class method or the "),IV=n(DY,"A",{href:!0});var fct=s(IV);aYo=r(fct,"from_config()"),fct.forEach(t),nYo=r(DY,` class
method.`),DY.forEach(t),sYo=i(ol),Ry=n(ol,"P",{});var XIe=s(Ry);lYo=r(XIe,"This class cannot be instantiated directly using "),hpe=n(XIe,"CODE",{});var mct=s(hpe);iYo=r(mct,"__init__()"),mct.forEach(t),dYo=r(XIe," (throws an error)."),XIe.forEach(t),cYo=i(ol),vt=n(ol,"DIV",{class:!0});var iw=s(vt);T(By.$$.fragment,iw),fYo=i(iw),ppe=n(iw,"P",{});var gct=s(ppe);mYo=r(gct,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),gct.forEach(t),gYo=i(iw),Td=n(iw,"P",{});var GY=s(Td);hYo=r(GY,`Note:
Loading a model from its configuration file does `),upe=n(GY,"STRONG",{});var hct=s(upe);pYo=r(hct,"not"),hct.forEach(t),uYo=r(GY,` load the model weights. It only affects the
model\u2019s configuration. Use `),qV=n(GY,"A",{href:!0});var pct=s(qV);_Yo=r(pct,"from_pretrained()"),pct.forEach(t),bYo=r(GY," to load the model weights."),GY.forEach(t),vYo=i(iw),T(Sv.$$.fragment,iw),iw.forEach(t),FYo=i(ol),ho=n(ol,"DIV",{class:!0});var pa=s(ho);T(Py.$$.fragment,pa),TYo=i(pa),_pe=n(pa,"P",{});var uct=s(_pe);MYo=r(uct,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),uct.forEach(t),EYo=i(pa),Xa=n(pa,"P",{});var dw=s(Xa);CYo=r(dw,"The model class to instantiate is selected based on the "),bpe=n(dw,"CODE",{});var _ct=s(bpe);wYo=r(_ct,"model_type"),_ct.forEach(t),AYo=r(dw,` property of the config object (either
passed as an argument or loaded from `),vpe=n(dw,"CODE",{});var bct=s(vpe);yYo=r(bct,"pretrained_model_name_or_path"),bct.forEach(t),LYo=r(dw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fpe=n(dw,"CODE",{});var vct=s(Fpe);xYo=r(vct,"pretrained_model_name_or_path"),vct.forEach(t),$Yo=r(dw,":"),dw.forEach(t),kYo=i(pa),Tpe=n(pa,"UL",{});var Fct=s(Tpe);Rv=n(Fct,"LI",{});var oxe=s(Rv);Mpe=n(oxe,"STRONG",{});var Tct=s(Mpe);SYo=r(Tct,"detr"),Tct.forEach(t),RYo=r(oxe," \u2014 "),NV=n(oxe,"A",{href:!0});var Mct=s(NV);BYo=r(Mct,"DetrForObjectDetection"),Mct.forEach(t),PYo=r(oxe," (DETR model)"),oxe.forEach(t),Fct.forEach(t),IYo=i(pa),Bv=n(pa,"P",{});var rxe=s(Bv);qYo=r(rxe,"The model is set in evaluation mode by default using "),Epe=n(rxe,"CODE",{});var Ect=s(Epe);NYo=r(Ect,"model.eval()"),Ect.forEach(t),jYo=r(rxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Cpe=n(rxe,"CODE",{});var Cct=s(Cpe);DYo=r(Cct,"model.train()"),Cct.forEach(t),rxe.forEach(t),GYo=i(pa),T(Pv.$$.fragment,pa),pa.forEach(t),ol.forEach(t),OBe=i(f),Md=n(f,"H2",{class:!0});var zIe=s(Md);Iv=n(zIe,"A",{id:!0,class:!0,href:!0});var wct=s(Iv);wpe=n(wct,"SPAN",{});var Act=s(wpe);T(Iy.$$.fragment,Act),Act.forEach(t),wct.forEach(t),OYo=i(zIe),Ape=n(zIe,"SPAN",{});var yct=s(Ape);VYo=r(yct,"AutoModelForImageSegmentation"),yct.forEach(t),zIe.forEach(t),VBe=i(f),Ho=n(f,"DIV",{class:!0});var rl=s(Ho);T(qy.$$.fragment,rl),XYo=i(rl),Ed=n(rl,"P",{});var OY=s(Ed);zYo=r(OY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),jV=n(OY,"A",{href:!0});var Lct=s(jV);QYo=r(Lct,"from_pretrained()"),Lct.forEach(t),WYo=r(OY," class method or the "),DV=n(OY,"A",{href:!0});var xct=s(DV);HYo=r(xct,"from_config()"),xct.forEach(t),UYo=r(OY,` class
method.`),OY.forEach(t),JYo=i(rl),Ny=n(rl,"P",{});var QIe=s(Ny);YYo=r(QIe,"This class cannot be instantiated directly using "),ype=n(QIe,"CODE",{});var $ct=s(ype);KYo=r($ct,"__init__()"),$ct.forEach(t),ZYo=r(QIe," (throws an error)."),QIe.forEach(t),eKo=i(rl),Ft=n(rl,"DIV",{class:!0});var cw=s(Ft);T(jy.$$.fragment,cw),oKo=i(cw),Lpe=n(cw,"P",{});var kct=s(Lpe);rKo=r(kct,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),kct.forEach(t),tKo=i(cw),Cd=n(cw,"P",{});var VY=s(Cd);aKo=r(VY,`Note:
Loading a model from its configuration file does `),xpe=n(VY,"STRONG",{});var Sct=s(xpe);nKo=r(Sct,"not"),Sct.forEach(t),sKo=r(VY,` load the model weights. It only affects the
model\u2019s configuration. Use `),GV=n(VY,"A",{href:!0});var Rct=s(GV);lKo=r(Rct,"from_pretrained()"),Rct.forEach(t),iKo=r(VY," to load the model weights."),VY.forEach(t),dKo=i(cw),T(qv.$$.fragment,cw),cw.forEach(t),cKo=i(rl),po=n(rl,"DIV",{class:!0});var ua=s(po);T(Dy.$$.fragment,ua),fKo=i(ua),$pe=n(ua,"P",{});var Bct=s($pe);mKo=r(Bct,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),Bct.forEach(t),gKo=i(ua),za=n(ua,"P",{});var fw=s(za);hKo=r(fw,"The model class to instantiate is selected based on the "),kpe=n(fw,"CODE",{});var Pct=s(kpe);pKo=r(Pct,"model_type"),Pct.forEach(t),uKo=r(fw,` property of the config object (either
passed as an argument or loaded from `),Spe=n(fw,"CODE",{});var Ict=s(Spe);_Ko=r(Ict,"pretrained_model_name_or_path"),Ict.forEach(t),bKo=r(fw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rpe=n(fw,"CODE",{});var qct=s(Rpe);vKo=r(qct,"pretrained_model_name_or_path"),qct.forEach(t),FKo=r(fw,":"),fw.forEach(t),TKo=i(ua),Bpe=n(ua,"UL",{});var Nct=s(Bpe);Nv=n(Nct,"LI",{});var txe=s(Nv);Ppe=n(txe,"STRONG",{});var jct=s(Ppe);MKo=r(jct,"detr"),jct.forEach(t),EKo=r(txe," \u2014 "),OV=n(txe,"A",{href:!0});var Dct=s(OV);CKo=r(Dct,"DetrForSegmentation"),Dct.forEach(t),wKo=r(txe," (DETR model)"),txe.forEach(t),Nct.forEach(t),AKo=i(ua),jv=n(ua,"P",{});var axe=s(jv);yKo=r(axe,"The model is set in evaluation mode by default using "),Ipe=n(axe,"CODE",{});var Gct=s(Ipe);LKo=r(Gct,"model.eval()"),Gct.forEach(t),xKo=r(axe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),qpe=n(axe,"CODE",{});var Oct=s(qpe);$Ko=r(Oct,"model.train()"),Oct.forEach(t),axe.forEach(t),kKo=i(ua),T(Dv.$$.fragment,ua),ua.forEach(t),rl.forEach(t),XBe=i(f),wd=n(f,"H2",{class:!0});var WIe=s(wd);Gv=n(WIe,"A",{id:!0,class:!0,href:!0});var Vct=s(Gv);Npe=n(Vct,"SPAN",{});var Xct=s(Npe);T(Gy.$$.fragment,Xct),Xct.forEach(t),Vct.forEach(t),SKo=i(WIe),jpe=n(WIe,"SPAN",{});var zct=s(jpe);RKo=r(zct,"AutoModelForSemanticSegmentation"),zct.forEach(t),WIe.forEach(t),zBe=i(f),Uo=n(f,"DIV",{class:!0});var tl=s(Uo);T(Oy.$$.fragment,tl),BKo=i(tl),Ad=n(tl,"P",{});var XY=s(Ad);PKo=r(XY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),VV=n(XY,"A",{href:!0});var Qct=s(VV);IKo=r(Qct,"from_pretrained()"),Qct.forEach(t),qKo=r(XY," class method or the "),XV=n(XY,"A",{href:!0});var Wct=s(XV);NKo=r(Wct,"from_config()"),Wct.forEach(t),jKo=r(XY,` class
method.`),XY.forEach(t),DKo=i(tl),Vy=n(tl,"P",{});var HIe=s(Vy);GKo=r(HIe,"This class cannot be instantiated directly using "),Dpe=n(HIe,"CODE",{});var Hct=s(Dpe);OKo=r(Hct,"__init__()"),Hct.forEach(t),VKo=r(HIe," (throws an error)."),HIe.forEach(t),XKo=i(tl),Tt=n(tl,"DIV",{class:!0});var mw=s(Tt);T(Xy.$$.fragment,mw),zKo=i(mw),Gpe=n(mw,"P",{});var Uct=s(Gpe);QKo=r(Uct,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),Uct.forEach(t),WKo=i(mw),yd=n(mw,"P",{});var zY=s(yd);HKo=r(zY,`Note:
Loading a model from its configuration file does `),Ope=n(zY,"STRONG",{});var Jct=s(Ope);UKo=r(Jct,"not"),Jct.forEach(t),JKo=r(zY,` load the model weights. It only affects the
model\u2019s configuration. Use `),zV=n(zY,"A",{href:!0});var Yct=s(zV);YKo=r(Yct,"from_pretrained()"),Yct.forEach(t),KKo=r(zY," to load the model weights."),zY.forEach(t),ZKo=i(mw),T(Ov.$$.fragment,mw),mw.forEach(t),eZo=i(tl),uo=n(tl,"DIV",{class:!0});var _a=s(uo);T(zy.$$.fragment,_a),oZo=i(_a),Vpe=n(_a,"P",{});var Kct=s(Vpe);rZo=r(Kct,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),Kct.forEach(t),tZo=i(_a),Qa=n(_a,"P",{});var gw=s(Qa);aZo=r(gw,"The model class to instantiate is selected based on the "),Xpe=n(gw,"CODE",{});var Zct=s(Xpe);nZo=r(Zct,"model_type"),Zct.forEach(t),sZo=r(gw,` property of the config object (either
passed as an argument or loaded from `),zpe=n(gw,"CODE",{});var eft=s(zpe);lZo=r(eft,"pretrained_model_name_or_path"),eft.forEach(t),iZo=r(gw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qpe=n(gw,"CODE",{});var oft=s(Qpe);dZo=r(oft,"pretrained_model_name_or_path"),oft.forEach(t),cZo=r(gw,":"),gw.forEach(t),fZo=i(_a),Wa=n(_a,"UL",{});var hw=s(Wa);Vv=n(hw,"LI",{});var nxe=s(Vv);Wpe=n(nxe,"STRONG",{});var rft=s(Wpe);mZo=r(rft,"beit"),rft.forEach(t),gZo=r(nxe," \u2014 "),QV=n(nxe,"A",{href:!0});var tft=s(QV);hZo=r(tft,"BeitForSemanticSegmentation"),tft.forEach(t),pZo=r(nxe," (BEiT model)"),nxe.forEach(t),uZo=i(hw),Xv=n(hw,"LI",{});var sxe=s(Xv);Hpe=n(sxe,"STRONG",{});var aft=s(Hpe);_Zo=r(aft,"data2vec-vision"),aft.forEach(t),bZo=r(sxe," \u2014 "),WV=n(sxe,"A",{href:!0});var nft=s(WV);vZo=r(nft,"Data2VecVisionForSemanticSegmentation"),nft.forEach(t),FZo=r(sxe," (Data2VecVision model)"),sxe.forEach(t),TZo=i(hw),zv=n(hw,"LI",{});var lxe=s(zv);Upe=n(lxe,"STRONG",{});var sft=s(Upe);MZo=r(sft,"dpt"),sft.forEach(t),EZo=r(lxe," \u2014 "),HV=n(lxe,"A",{href:!0});var lft=s(HV);CZo=r(lft,"DPTForSemanticSegmentation"),lft.forEach(t),wZo=r(lxe," (DPT model)"),lxe.forEach(t),AZo=i(hw),Qv=n(hw,"LI",{});var ixe=s(Qv);Jpe=n(ixe,"STRONG",{});var ift=s(Jpe);yZo=r(ift,"segformer"),ift.forEach(t),LZo=r(ixe," \u2014 "),UV=n(ixe,"A",{href:!0});var dft=s(UV);xZo=r(dft,"SegformerForSemanticSegmentation"),dft.forEach(t),$Zo=r(ixe," (SegFormer model)"),ixe.forEach(t),hw.forEach(t),kZo=i(_a),Wv=n(_a,"P",{});var dxe=s(Wv);SZo=r(dxe,"The model is set in evaluation mode by default using "),Ype=n(dxe,"CODE",{});var cft=s(Ype);RZo=r(cft,"model.eval()"),cft.forEach(t),BZo=r(dxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Kpe=n(dxe,"CODE",{});var fft=s(Kpe);PZo=r(fft,"model.train()"),fft.forEach(t),dxe.forEach(t),IZo=i(_a),T(Hv.$$.fragment,_a),_a.forEach(t),tl.forEach(t),QBe=i(f),Ld=n(f,"H2",{class:!0});var UIe=s(Ld);Uv=n(UIe,"A",{id:!0,class:!0,href:!0});var mft=s(Uv);Zpe=n(mft,"SPAN",{});var gft=s(Zpe);T(Qy.$$.fragment,gft),gft.forEach(t),mft.forEach(t),qZo=i(UIe),eue=n(UIe,"SPAN",{});var hft=s(eue);NZo=r(hft,"AutoModelForInstanceSegmentation"),hft.forEach(t),UIe.forEach(t),WBe=i(f),Jo=n(f,"DIV",{class:!0});var al=s(Jo);T(Wy.$$.fragment,al),jZo=i(al),xd=n(al,"P",{});var QY=s(xd);DZo=r(QY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),JV=n(QY,"A",{href:!0});var pft=s(JV);GZo=r(pft,"from_pretrained()"),pft.forEach(t),OZo=r(QY," class method or the "),YV=n(QY,"A",{href:!0});var uft=s(YV);VZo=r(uft,"from_config()"),uft.forEach(t),XZo=r(QY,` class
method.`),QY.forEach(t),zZo=i(al),Hy=n(al,"P",{});var JIe=s(Hy);QZo=r(JIe,"This class cannot be instantiated directly using "),oue=n(JIe,"CODE",{});var _ft=s(oue);WZo=r(_ft,"__init__()"),_ft.forEach(t),HZo=r(JIe," (throws an error)."),JIe.forEach(t),UZo=i(al),Mt=n(al,"DIV",{class:!0});var pw=s(Mt);T(Uy.$$.fragment,pw),JZo=i(pw),rue=n(pw,"P",{});var bft=s(rue);YZo=r(bft,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),bft.forEach(t),KZo=i(pw),$d=n(pw,"P",{});var WY=s($d);ZZo=r(WY,`Note:
Loading a model from its configuration file does `),tue=n(WY,"STRONG",{});var vft=s(tue);eer=r(vft,"not"),vft.forEach(t),oer=r(WY,` load the model weights. It only affects the
model\u2019s configuration. Use `),KV=n(WY,"A",{href:!0});var Fft=s(KV);rer=r(Fft,"from_pretrained()"),Fft.forEach(t),ter=r(WY," to load the model weights."),WY.forEach(t),aer=i(pw),T(Jv.$$.fragment,pw),pw.forEach(t),ner=i(al),_o=n(al,"DIV",{class:!0});var ba=s(_o);T(Jy.$$.fragment,ba),ser=i(ba),aue=n(ba,"P",{});var Tft=s(aue);ler=r(Tft,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),Tft.forEach(t),ier=i(ba),Ha=n(ba,"P",{});var uw=s(Ha);der=r(uw,"The model class to instantiate is selected based on the "),nue=n(uw,"CODE",{});var Mft=s(nue);cer=r(Mft,"model_type"),Mft.forEach(t),fer=r(uw,` property of the config object (either
passed as an argument or loaded from `),sue=n(uw,"CODE",{});var Eft=s(sue);mer=r(Eft,"pretrained_model_name_or_path"),Eft.forEach(t),ger=r(uw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lue=n(uw,"CODE",{});var Cft=s(lue);her=r(Cft,"pretrained_model_name_or_path"),Cft.forEach(t),per=r(uw,":"),uw.forEach(t),uer=i(ba),iue=n(ba,"UL",{});var wft=s(iue);Yv=n(wft,"LI",{});var cxe=s(Yv);due=n(cxe,"STRONG",{});var Aft=s(due);_er=r(Aft,"maskformer"),Aft.forEach(t),ber=r(cxe," \u2014 "),ZV=n(cxe,"A",{href:!0});var yft=s(ZV);ver=r(yft,"MaskFormerForInstanceSegmentation"),yft.forEach(t),Fer=r(cxe," (MaskFormer model)"),cxe.forEach(t),wft.forEach(t),Ter=i(ba),Kv=n(ba,"P",{});var fxe=s(Kv);Mer=r(fxe,"The model is set in evaluation mode by default using "),cue=n(fxe,"CODE",{});var Lft=s(cue);Eer=r(Lft,"model.eval()"),Lft.forEach(t),Cer=r(fxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),fue=n(fxe,"CODE",{});var xft=s(fue);wer=r(xft,"model.train()"),xft.forEach(t),fxe.forEach(t),Aer=i(ba),T(Zv.$$.fragment,ba),ba.forEach(t),al.forEach(t),HBe=i(f),kd=n(f,"H2",{class:!0});var YIe=s(kd);eF=n(YIe,"A",{id:!0,class:!0,href:!0});var $ft=s(eF);mue=n($ft,"SPAN",{});var kft=s(mue);T(Yy.$$.fragment,kft),kft.forEach(t),$ft.forEach(t),yer=i(YIe),gue=n(YIe,"SPAN",{});var Sft=s(gue);Ler=r(Sft,"TFAutoModel"),Sft.forEach(t),YIe.forEach(t),UBe=i(f),Yo=n(f,"DIV",{class:!0});var nl=s(Yo);T(Ky.$$.fragment,nl),xer=i(nl),Sd=n(nl,"P",{});var HY=s(Sd);$er=r(HY,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),eX=n(HY,"A",{href:!0});var Rft=s(eX);ker=r(Rft,"from_pretrained()"),Rft.forEach(t),Ser=r(HY," class method or the "),oX=n(HY,"A",{href:!0});var Bft=s(oX);Rer=r(Bft,"from_config()"),Bft.forEach(t),Ber=r(HY,` class
method.`),HY.forEach(t),Per=i(nl),Zy=n(nl,"P",{});var KIe=s(Zy);Ier=r(KIe,"This class cannot be instantiated directly using "),hue=n(KIe,"CODE",{});var Pft=s(hue);qer=r(Pft,"__init__()"),Pft.forEach(t),Ner=r(KIe," (throws an error)."),KIe.forEach(t),jer=i(nl),Et=n(nl,"DIV",{class:!0});var _w=s(Et);T(eL.$$.fragment,_w),Der=i(_w),pue=n(_w,"P",{});var Ift=s(pue);Ger=r(Ift,"Instantiates one of the base model classes of the library from a configuration."),Ift.forEach(t),Oer=i(_w),Rd=n(_w,"P",{});var UY=s(Rd);Ver=r(UY,`Note:
Loading a model from its configuration file does `),uue=n(UY,"STRONG",{});var qft=s(uue);Xer=r(qft,"not"),qft.forEach(t),zer=r(UY,` load the model weights. It only affects the
model\u2019s configuration. Use `),rX=n(UY,"A",{href:!0});var Nft=s(rX);Qer=r(Nft,"from_pretrained()"),Nft.forEach(t),Wer=r(UY," to load the model weights."),UY.forEach(t),Her=i(_w),T(oF.$$.fragment,_w),_w.forEach(t),Uer=i(nl),Cr=n(nl,"DIV",{class:!0});var sl=s(Cr);T(oL.$$.fragment,sl),Jer=i(sl),_ue=n(sl,"P",{});var jft=s(_ue);Yer=r(jft,"Instantiate one of the base model classes of the library from a pretrained model."),jft.forEach(t),Ker=i(sl),Ua=n(sl,"P",{});var bw=s(Ua);Zer=r(bw,"The model class to instantiate is selected based on the "),bue=n(bw,"CODE",{});var Dft=s(bue);eor=r(Dft,"model_type"),Dft.forEach(t),oor=r(bw,` property of the config object (either
passed as an argument or loaded from `),vue=n(bw,"CODE",{});var Gft=s(vue);ror=r(Gft,"pretrained_model_name_or_path"),Gft.forEach(t),tor=r(bw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fue=n(bw,"CODE",{});var Oft=s(Fue);aor=r(Oft,"pretrained_model_name_or_path"),Oft.forEach(t),nor=r(bw,":"),bw.forEach(t),sor=i(sl),j=n(sl,"UL",{});var D=s(j);rF=n(D,"LI",{});var mxe=s(rF);Tue=n(mxe,"STRONG",{});var Vft=s(Tue);lor=r(Vft,"albert"),Vft.forEach(t),ior=r(mxe," \u2014 "),tX=n(mxe,"A",{href:!0});var Xft=s(tX);dor=r(Xft,"TFAlbertModel"),Xft.forEach(t),cor=r(mxe," (ALBERT model)"),mxe.forEach(t),mor=i(D),tF=n(D,"LI",{});var gxe=s(tF);Mue=n(gxe,"STRONG",{});var zft=s(Mue);gor=r(zft,"bart"),zft.forEach(t),hor=r(gxe," \u2014 "),aX=n(gxe,"A",{href:!0});var Qft=s(aX);por=r(Qft,"TFBartModel"),Qft.forEach(t),uor=r(gxe," (BART model)"),gxe.forEach(t),_or=i(D),aF=n(D,"LI",{});var hxe=s(aF);Eue=n(hxe,"STRONG",{});var Wft=s(Eue);bor=r(Wft,"bert"),Wft.forEach(t),vor=r(hxe," \u2014 "),nX=n(hxe,"A",{href:!0});var Hft=s(nX);For=r(Hft,"TFBertModel"),Hft.forEach(t),Tor=r(hxe," (BERT model)"),hxe.forEach(t),Mor=i(D),nF=n(D,"LI",{});var pxe=s(nF);Cue=n(pxe,"STRONG",{});var Uft=s(Cue);Eor=r(Uft,"blenderbot"),Uft.forEach(t),Cor=r(pxe," \u2014 "),sX=n(pxe,"A",{href:!0});var Jft=s(sX);wor=r(Jft,"TFBlenderbotModel"),Jft.forEach(t),Aor=r(pxe," (Blenderbot model)"),pxe.forEach(t),yor=i(D),sF=n(D,"LI",{});var uxe=s(sF);wue=n(uxe,"STRONG",{});var Yft=s(wue);Lor=r(Yft,"blenderbot-small"),Yft.forEach(t),xor=r(uxe," \u2014 "),lX=n(uxe,"A",{href:!0});var Kft=s(lX);$or=r(Kft,"TFBlenderbotSmallModel"),Kft.forEach(t),kor=r(uxe," (BlenderbotSmall model)"),uxe.forEach(t),Sor=i(D),lF=n(D,"LI",{});var _xe=s(lF);Aue=n(_xe,"STRONG",{});var Zft=s(Aue);Ror=r(Zft,"camembert"),Zft.forEach(t),Bor=r(_xe," \u2014 "),iX=n(_xe,"A",{href:!0});var emt=s(iX);Por=r(emt,"TFCamembertModel"),emt.forEach(t),Ior=r(_xe," (CamemBERT model)"),_xe.forEach(t),qor=i(D),iF=n(D,"LI",{});var bxe=s(iF);yue=n(bxe,"STRONG",{});var omt=s(yue);Nor=r(omt,"clip"),omt.forEach(t),jor=r(bxe," \u2014 "),dX=n(bxe,"A",{href:!0});var rmt=s(dX);Dor=r(rmt,"TFCLIPModel"),rmt.forEach(t),Gor=r(bxe," (CLIP model)"),bxe.forEach(t),Oor=i(D),dF=n(D,"LI",{});var vxe=s(dF);Lue=n(vxe,"STRONG",{});var tmt=s(Lue);Vor=r(tmt,"convbert"),tmt.forEach(t),Xor=r(vxe," \u2014 "),cX=n(vxe,"A",{href:!0});var amt=s(cX);zor=r(amt,"TFConvBertModel"),amt.forEach(t),Qor=r(vxe," (ConvBERT model)"),vxe.forEach(t),Wor=i(D),cF=n(D,"LI",{});var Fxe=s(cF);xue=n(Fxe,"STRONG",{});var nmt=s(xue);Hor=r(nmt,"convnext"),nmt.forEach(t),Uor=r(Fxe," \u2014 "),fX=n(Fxe,"A",{href:!0});var smt=s(fX);Jor=r(smt,"TFConvNextModel"),smt.forEach(t),Yor=r(Fxe," (ConvNext model)"),Fxe.forEach(t),Kor=i(D),fF=n(D,"LI",{});var Txe=s(fF);$ue=n(Txe,"STRONG",{});var lmt=s($ue);Zor=r(lmt,"ctrl"),lmt.forEach(t),err=r(Txe," \u2014 "),mX=n(Txe,"A",{href:!0});var imt=s(mX);orr=r(imt,"TFCTRLModel"),imt.forEach(t),rrr=r(Txe," (CTRL model)"),Txe.forEach(t),trr=i(D),mF=n(D,"LI",{});var Mxe=s(mF);kue=n(Mxe,"STRONG",{});var dmt=s(kue);arr=r(dmt,"deberta"),dmt.forEach(t),nrr=r(Mxe," \u2014 "),gX=n(Mxe,"A",{href:!0});var cmt=s(gX);srr=r(cmt,"TFDebertaModel"),cmt.forEach(t),lrr=r(Mxe," (DeBERTa model)"),Mxe.forEach(t),irr=i(D),gF=n(D,"LI",{});var Exe=s(gF);Sue=n(Exe,"STRONG",{});var fmt=s(Sue);drr=r(fmt,"deberta-v2"),fmt.forEach(t),crr=r(Exe," \u2014 "),hX=n(Exe,"A",{href:!0});var mmt=s(hX);frr=r(mmt,"TFDebertaV2Model"),mmt.forEach(t),mrr=r(Exe," (DeBERTa-v2 model)"),Exe.forEach(t),grr=i(D),hF=n(D,"LI",{});var Cxe=s(hF);Rue=n(Cxe,"STRONG",{});var gmt=s(Rue);hrr=r(gmt,"distilbert"),gmt.forEach(t),prr=r(Cxe," \u2014 "),pX=n(Cxe,"A",{href:!0});var hmt=s(pX);urr=r(hmt,"TFDistilBertModel"),hmt.forEach(t),_rr=r(Cxe," (DistilBERT model)"),Cxe.forEach(t),brr=i(D),pF=n(D,"LI",{});var wxe=s(pF);Bue=n(wxe,"STRONG",{});var pmt=s(Bue);vrr=r(pmt,"dpr"),pmt.forEach(t),Frr=r(wxe," \u2014 "),uX=n(wxe,"A",{href:!0});var umt=s(uX);Trr=r(umt,"TFDPRQuestionEncoder"),umt.forEach(t),Mrr=r(wxe," (DPR model)"),wxe.forEach(t),Err=i(D),uF=n(D,"LI",{});var Axe=s(uF);Pue=n(Axe,"STRONG",{});var _mt=s(Pue);Crr=r(_mt,"electra"),_mt.forEach(t),wrr=r(Axe," \u2014 "),_X=n(Axe,"A",{href:!0});var bmt=s(_X);Arr=r(bmt,"TFElectraModel"),bmt.forEach(t),yrr=r(Axe," (ELECTRA model)"),Axe.forEach(t),Lrr=i(D),_F=n(D,"LI",{});var yxe=s(_F);Iue=n(yxe,"STRONG",{});var vmt=s(Iue);xrr=r(vmt,"flaubert"),vmt.forEach(t),$rr=r(yxe," \u2014 "),bX=n(yxe,"A",{href:!0});var Fmt=s(bX);krr=r(Fmt,"TFFlaubertModel"),Fmt.forEach(t),Srr=r(yxe," (FlauBERT model)"),yxe.forEach(t),Rrr=i(D),$s=n(D,"LI",{});var y7=s($s);que=n(y7,"STRONG",{});var Tmt=s(que);Brr=r(Tmt,"funnel"),Tmt.forEach(t),Prr=r(y7," \u2014 "),vX=n(y7,"A",{href:!0});var Mmt=s(vX);Irr=r(Mmt,"TFFunnelModel"),Mmt.forEach(t),qrr=r(y7," or "),FX=n(y7,"A",{href:!0});var Emt=s(FX);Nrr=r(Emt,"TFFunnelBaseModel"),Emt.forEach(t),jrr=r(y7," (Funnel Transformer model)"),y7.forEach(t),Drr=i(D),bF=n(D,"LI",{});var Lxe=s(bF);Nue=n(Lxe,"STRONG",{});var Cmt=s(Nue);Grr=r(Cmt,"gpt2"),Cmt.forEach(t),Orr=r(Lxe," \u2014 "),TX=n(Lxe,"A",{href:!0});var wmt=s(TX);Vrr=r(wmt,"TFGPT2Model"),wmt.forEach(t),Xrr=r(Lxe," (OpenAI GPT-2 model)"),Lxe.forEach(t),zrr=i(D),vF=n(D,"LI",{});var xxe=s(vF);jue=n(xxe,"STRONG",{});var Amt=s(jue);Qrr=r(Amt,"gptj"),Amt.forEach(t),Wrr=r(xxe," \u2014 "),MX=n(xxe,"A",{href:!0});var ymt=s(MX);Hrr=r(ymt,"TFGPTJModel"),ymt.forEach(t),Urr=r(xxe," (GPT-J model)"),xxe.forEach(t),Jrr=i(D),FF=n(D,"LI",{});var $xe=s(FF);Due=n($xe,"STRONG",{});var Lmt=s(Due);Yrr=r(Lmt,"hubert"),Lmt.forEach(t),Krr=r($xe," \u2014 "),EX=n($xe,"A",{href:!0});var xmt=s(EX);Zrr=r(xmt,"TFHubertModel"),xmt.forEach(t),etr=r($xe," (Hubert model)"),$xe.forEach(t),otr=i(D),TF=n(D,"LI",{});var kxe=s(TF);Gue=n(kxe,"STRONG",{});var $mt=s(Gue);rtr=r($mt,"layoutlm"),$mt.forEach(t),ttr=r(kxe," \u2014 "),CX=n(kxe,"A",{href:!0});var kmt=s(CX);atr=r(kmt,"TFLayoutLMModel"),kmt.forEach(t),ntr=r(kxe," (LayoutLM model)"),kxe.forEach(t),str=i(D),MF=n(D,"LI",{});var Sxe=s(MF);Oue=n(Sxe,"STRONG",{});var Smt=s(Oue);ltr=r(Smt,"led"),Smt.forEach(t),itr=r(Sxe," \u2014 "),wX=n(Sxe,"A",{href:!0});var Rmt=s(wX);dtr=r(Rmt,"TFLEDModel"),Rmt.forEach(t),ctr=r(Sxe," (LED model)"),Sxe.forEach(t),ftr=i(D),EF=n(D,"LI",{});var Rxe=s(EF);Vue=n(Rxe,"STRONG",{});var Bmt=s(Vue);mtr=r(Bmt,"longformer"),Bmt.forEach(t),gtr=r(Rxe," \u2014 "),AX=n(Rxe,"A",{href:!0});var Pmt=s(AX);htr=r(Pmt,"TFLongformerModel"),Pmt.forEach(t),ptr=r(Rxe," (Longformer model)"),Rxe.forEach(t),utr=i(D),CF=n(D,"LI",{});var Bxe=s(CF);Xue=n(Bxe,"STRONG",{});var Imt=s(Xue);_tr=r(Imt,"lxmert"),Imt.forEach(t),btr=r(Bxe," \u2014 "),yX=n(Bxe,"A",{href:!0});var qmt=s(yX);vtr=r(qmt,"TFLxmertModel"),qmt.forEach(t),Ftr=r(Bxe," (LXMERT model)"),Bxe.forEach(t),Ttr=i(D),wF=n(D,"LI",{});var Pxe=s(wF);zue=n(Pxe,"STRONG",{});var Nmt=s(zue);Mtr=r(Nmt,"marian"),Nmt.forEach(t),Etr=r(Pxe," \u2014 "),LX=n(Pxe,"A",{href:!0});var jmt=s(LX);Ctr=r(jmt,"TFMarianModel"),jmt.forEach(t),wtr=r(Pxe," (Marian model)"),Pxe.forEach(t),Atr=i(D),AF=n(D,"LI",{});var Ixe=s(AF);Que=n(Ixe,"STRONG",{});var Dmt=s(Que);ytr=r(Dmt,"mbart"),Dmt.forEach(t),Ltr=r(Ixe," \u2014 "),xX=n(Ixe,"A",{href:!0});var Gmt=s(xX);xtr=r(Gmt,"TFMBartModel"),Gmt.forEach(t),$tr=r(Ixe," (mBART model)"),Ixe.forEach(t),ktr=i(D),yF=n(D,"LI",{});var qxe=s(yF);Wue=n(qxe,"STRONG",{});var Omt=s(Wue);Str=r(Omt,"mobilebert"),Omt.forEach(t),Rtr=r(qxe," \u2014 "),$X=n(qxe,"A",{href:!0});var Vmt=s($X);Btr=r(Vmt,"TFMobileBertModel"),Vmt.forEach(t),Ptr=r(qxe," (MobileBERT model)"),qxe.forEach(t),Itr=i(D),LF=n(D,"LI",{});var Nxe=s(LF);Hue=n(Nxe,"STRONG",{});var Xmt=s(Hue);qtr=r(Xmt,"mpnet"),Xmt.forEach(t),Ntr=r(Nxe," \u2014 "),kX=n(Nxe,"A",{href:!0});var zmt=s(kX);jtr=r(zmt,"TFMPNetModel"),zmt.forEach(t),Dtr=r(Nxe," (MPNet model)"),Nxe.forEach(t),Gtr=i(D),xF=n(D,"LI",{});var jxe=s(xF);Uue=n(jxe,"STRONG",{});var Qmt=s(Uue);Otr=r(Qmt,"mt5"),Qmt.forEach(t),Vtr=r(jxe," \u2014 "),SX=n(jxe,"A",{href:!0});var Wmt=s(SX);Xtr=r(Wmt,"TFMT5Model"),Wmt.forEach(t),ztr=r(jxe," (mT5 model)"),jxe.forEach(t),Qtr=i(D),$F=n(D,"LI",{});var Dxe=s($F);Jue=n(Dxe,"STRONG",{});var Hmt=s(Jue);Wtr=r(Hmt,"openai-gpt"),Hmt.forEach(t),Htr=r(Dxe," \u2014 "),RX=n(Dxe,"A",{href:!0});var Umt=s(RX);Utr=r(Umt,"TFOpenAIGPTModel"),Umt.forEach(t),Jtr=r(Dxe," (OpenAI GPT model)"),Dxe.forEach(t),Ytr=i(D),kF=n(D,"LI",{});var Gxe=s(kF);Yue=n(Gxe,"STRONG",{});var Jmt=s(Yue);Ktr=r(Jmt,"pegasus"),Jmt.forEach(t),Ztr=r(Gxe," \u2014 "),BX=n(Gxe,"A",{href:!0});var Ymt=s(BX);ear=r(Ymt,"TFPegasusModel"),Ymt.forEach(t),oar=r(Gxe," (Pegasus model)"),Gxe.forEach(t),rar=i(D),SF=n(D,"LI",{});var Oxe=s(SF);Kue=n(Oxe,"STRONG",{});var Kmt=s(Kue);tar=r(Kmt,"rembert"),Kmt.forEach(t),aar=r(Oxe," \u2014 "),PX=n(Oxe,"A",{href:!0});var Zmt=s(PX);nar=r(Zmt,"TFRemBertModel"),Zmt.forEach(t),sar=r(Oxe," (RemBERT model)"),Oxe.forEach(t),lar=i(D),RF=n(D,"LI",{});var Vxe=s(RF);Zue=n(Vxe,"STRONG",{});var egt=s(Zue);iar=r(egt,"roberta"),egt.forEach(t),dar=r(Vxe," \u2014 "),IX=n(Vxe,"A",{href:!0});var ogt=s(IX);car=r(ogt,"TFRobertaModel"),ogt.forEach(t),far=r(Vxe," (RoBERTa model)"),Vxe.forEach(t),mar=i(D),BF=n(D,"LI",{});var Xxe=s(BF);e_e=n(Xxe,"STRONG",{});var rgt=s(e_e);gar=r(rgt,"roformer"),rgt.forEach(t),har=r(Xxe," \u2014 "),qX=n(Xxe,"A",{href:!0});var tgt=s(qX);par=r(tgt,"TFRoFormerModel"),tgt.forEach(t),uar=r(Xxe," (RoFormer model)"),Xxe.forEach(t),_ar=i(D),PF=n(D,"LI",{});var zxe=s(PF);o_e=n(zxe,"STRONG",{});var agt=s(o_e);bar=r(agt,"speech_to_text"),agt.forEach(t),Far=r(zxe," \u2014 "),NX=n(zxe,"A",{href:!0});var ngt=s(NX);Tar=r(ngt,"TFSpeech2TextModel"),ngt.forEach(t),Mar=r(zxe," (Speech2Text model)"),zxe.forEach(t),Ear=i(D),IF=n(D,"LI",{});var Qxe=s(IF);r_e=n(Qxe,"STRONG",{});var sgt=s(r_e);Car=r(sgt,"t5"),sgt.forEach(t),war=r(Qxe," \u2014 "),jX=n(Qxe,"A",{href:!0});var lgt=s(jX);Aar=r(lgt,"TFT5Model"),lgt.forEach(t),yar=r(Qxe," (T5 model)"),Qxe.forEach(t),Lar=i(D),qF=n(D,"LI",{});var Wxe=s(qF);t_e=n(Wxe,"STRONG",{});var igt=s(t_e);xar=r(igt,"tapas"),igt.forEach(t),$ar=r(Wxe," \u2014 "),DX=n(Wxe,"A",{href:!0});var dgt=s(DX);kar=r(dgt,"TFTapasModel"),dgt.forEach(t),Sar=r(Wxe," (TAPAS model)"),Wxe.forEach(t),Rar=i(D),NF=n(D,"LI",{});var Hxe=s(NF);a_e=n(Hxe,"STRONG",{});var cgt=s(a_e);Bar=r(cgt,"transfo-xl"),cgt.forEach(t),Par=r(Hxe," \u2014 "),GX=n(Hxe,"A",{href:!0});var fgt=s(GX);Iar=r(fgt,"TFTransfoXLModel"),fgt.forEach(t),qar=r(Hxe," (Transformer-XL model)"),Hxe.forEach(t),Nar=i(D),jF=n(D,"LI",{});var Uxe=s(jF);n_e=n(Uxe,"STRONG",{});var mgt=s(n_e);jar=r(mgt,"vit"),mgt.forEach(t),Dar=r(Uxe," \u2014 "),OX=n(Uxe,"A",{href:!0});var ggt=s(OX);Gar=r(ggt,"TFViTModel"),ggt.forEach(t),Oar=r(Uxe," (ViT model)"),Uxe.forEach(t),Var=i(D),DF=n(D,"LI",{});var Jxe=s(DF);s_e=n(Jxe,"STRONG",{});var hgt=s(s_e);Xar=r(hgt,"vit_mae"),hgt.forEach(t),zar=r(Jxe," \u2014 "),VX=n(Jxe,"A",{href:!0});var pgt=s(VX);Qar=r(pgt,"TFViTMAEModel"),pgt.forEach(t),War=r(Jxe," (ViTMAE model)"),Jxe.forEach(t),Har=i(D),GF=n(D,"LI",{});var Yxe=s(GF);l_e=n(Yxe,"STRONG",{});var ugt=s(l_e);Uar=r(ugt,"wav2vec2"),ugt.forEach(t),Jar=r(Yxe," \u2014 "),XX=n(Yxe,"A",{href:!0});var _gt=s(XX);Yar=r(_gt,"TFWav2Vec2Model"),_gt.forEach(t),Kar=r(Yxe," (Wav2Vec2 model)"),Yxe.forEach(t),Zar=i(D),OF=n(D,"LI",{});var Kxe=s(OF);i_e=n(Kxe,"STRONG",{});var bgt=s(i_e);enr=r(bgt,"xlm"),bgt.forEach(t),onr=r(Kxe," \u2014 "),zX=n(Kxe,"A",{href:!0});var vgt=s(zX);rnr=r(vgt,"TFXLMModel"),vgt.forEach(t),tnr=r(Kxe," (XLM model)"),Kxe.forEach(t),anr=i(D),VF=n(D,"LI",{});var Zxe=s(VF);d_e=n(Zxe,"STRONG",{});var Fgt=s(d_e);nnr=r(Fgt,"xlm-roberta"),Fgt.forEach(t),snr=r(Zxe," \u2014 "),QX=n(Zxe,"A",{href:!0});var Tgt=s(QX);lnr=r(Tgt,"TFXLMRobertaModel"),Tgt.forEach(t),inr=r(Zxe," (XLM-RoBERTa model)"),Zxe.forEach(t),dnr=i(D),XF=n(D,"LI",{});var e7e=s(XF);c_e=n(e7e,"STRONG",{});var Mgt=s(c_e);cnr=r(Mgt,"xlnet"),Mgt.forEach(t),fnr=r(e7e," \u2014 "),WX=n(e7e,"A",{href:!0});var Egt=s(WX);mnr=r(Egt,"TFXLNetModel"),Egt.forEach(t),gnr=r(e7e," (XLNet model)"),e7e.forEach(t),D.forEach(t),hnr=i(sl),T(zF.$$.fragment,sl),sl.forEach(t),nl.forEach(t),JBe=i(f),Bd=n(f,"H2",{class:!0});var ZIe=s(Bd);QF=n(ZIe,"A",{id:!0,class:!0,href:!0});var Cgt=s(QF);f_e=n(Cgt,"SPAN",{});var wgt=s(f_e);T(rL.$$.fragment,wgt),wgt.forEach(t),Cgt.forEach(t),pnr=i(ZIe),m_e=n(ZIe,"SPAN",{});var Agt=s(m_e);unr=r(Agt,"TFAutoModelForPreTraining"),Agt.forEach(t),ZIe.forEach(t),YBe=i(f),Ko=n(f,"DIV",{class:!0});var ll=s(Ko);T(tL.$$.fragment,ll),_nr=i(ll),Pd=n(ll,"P",{});var JY=s(Pd);bnr=r(JY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),HX=n(JY,"A",{href:!0});var ygt=s(HX);vnr=r(ygt,"from_pretrained()"),ygt.forEach(t),Fnr=r(JY," class method or the "),UX=n(JY,"A",{href:!0});var Lgt=s(UX);Tnr=r(Lgt,"from_config()"),Lgt.forEach(t),Mnr=r(JY,` class
method.`),JY.forEach(t),Enr=i(ll),aL=n(ll,"P",{});var eqe=s(aL);Cnr=r(eqe,"This class cannot be instantiated directly using "),g_e=n(eqe,"CODE",{});var xgt=s(g_e);wnr=r(xgt,"__init__()"),xgt.forEach(t),Anr=r(eqe," (throws an error)."),eqe.forEach(t),ynr=i(ll),Ct=n(ll,"DIV",{class:!0});var vw=s(Ct);T(nL.$$.fragment,vw),Lnr=i(vw),h_e=n(vw,"P",{});var $gt=s(h_e);xnr=r($gt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),$gt.forEach(t),$nr=i(vw),Id=n(vw,"P",{});var YY=s(Id);knr=r(YY,`Note:
Loading a model from its configuration file does `),p_e=n(YY,"STRONG",{});var kgt=s(p_e);Snr=r(kgt,"not"),kgt.forEach(t),Rnr=r(YY,` load the model weights. It only affects the
model\u2019s configuration. Use `),JX=n(YY,"A",{href:!0});var Sgt=s(JX);Bnr=r(Sgt,"from_pretrained()"),Sgt.forEach(t),Pnr=r(YY," to load the model weights."),YY.forEach(t),Inr=i(vw),T(WF.$$.fragment,vw),vw.forEach(t),qnr=i(ll),wr=n(ll,"DIV",{class:!0});var il=s(wr);T(sL.$$.fragment,il),Nnr=i(il),u_e=n(il,"P",{});var Rgt=s(u_e);jnr=r(Rgt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Rgt.forEach(t),Dnr=i(il),Ja=n(il,"P",{});var Fw=s(Ja);Gnr=r(Fw,"The model class to instantiate is selected based on the "),__e=n(Fw,"CODE",{});var Bgt=s(__e);Onr=r(Bgt,"model_type"),Bgt.forEach(t),Vnr=r(Fw,` property of the config object (either
passed as an argument or loaded from `),b_e=n(Fw,"CODE",{});var Pgt=s(b_e);Xnr=r(Pgt,"pretrained_model_name_or_path"),Pgt.forEach(t),znr=r(Fw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),v_e=n(Fw,"CODE",{});var Igt=s(v_e);Qnr=r(Igt,"pretrained_model_name_or_path"),Igt.forEach(t),Wnr=r(Fw,":"),Fw.forEach(t),Hnr=i(il),ne=n(il,"UL",{});var le=s(ne);HF=n(le,"LI",{});var o7e=s(HF);F_e=n(o7e,"STRONG",{});var qgt=s(F_e);Unr=r(qgt,"albert"),qgt.forEach(t),Jnr=r(o7e," \u2014 "),YX=n(o7e,"A",{href:!0});var Ngt=s(YX);Ynr=r(Ngt,"TFAlbertForPreTraining"),Ngt.forEach(t),Knr=r(o7e," (ALBERT model)"),o7e.forEach(t),Znr=i(le),UF=n(le,"LI",{});var r7e=s(UF);T_e=n(r7e,"STRONG",{});var jgt=s(T_e);esr=r(jgt,"bart"),jgt.forEach(t),osr=r(r7e," \u2014 "),KX=n(r7e,"A",{href:!0});var Dgt=s(KX);rsr=r(Dgt,"TFBartForConditionalGeneration"),Dgt.forEach(t),tsr=r(r7e," (BART model)"),r7e.forEach(t),asr=i(le),JF=n(le,"LI",{});var t7e=s(JF);M_e=n(t7e,"STRONG",{});var Ggt=s(M_e);nsr=r(Ggt,"bert"),Ggt.forEach(t),ssr=r(t7e," \u2014 "),ZX=n(t7e,"A",{href:!0});var Ogt=s(ZX);lsr=r(Ogt,"TFBertForPreTraining"),Ogt.forEach(t),isr=r(t7e," (BERT model)"),t7e.forEach(t),dsr=i(le),YF=n(le,"LI",{});var a7e=s(YF);E_e=n(a7e,"STRONG",{});var Vgt=s(E_e);csr=r(Vgt,"camembert"),Vgt.forEach(t),fsr=r(a7e," \u2014 "),ez=n(a7e,"A",{href:!0});var Xgt=s(ez);msr=r(Xgt,"TFCamembertForMaskedLM"),Xgt.forEach(t),gsr=r(a7e," (CamemBERT model)"),a7e.forEach(t),hsr=i(le),KF=n(le,"LI",{});var n7e=s(KF);C_e=n(n7e,"STRONG",{});var zgt=s(C_e);psr=r(zgt,"ctrl"),zgt.forEach(t),usr=r(n7e," \u2014 "),oz=n(n7e,"A",{href:!0});var Qgt=s(oz);_sr=r(Qgt,"TFCTRLLMHeadModel"),Qgt.forEach(t),bsr=r(n7e," (CTRL model)"),n7e.forEach(t),vsr=i(le),ZF=n(le,"LI",{});var s7e=s(ZF);w_e=n(s7e,"STRONG",{});var Wgt=s(w_e);Fsr=r(Wgt,"distilbert"),Wgt.forEach(t),Tsr=r(s7e," \u2014 "),rz=n(s7e,"A",{href:!0});var Hgt=s(rz);Msr=r(Hgt,"TFDistilBertForMaskedLM"),Hgt.forEach(t),Esr=r(s7e," (DistilBERT model)"),s7e.forEach(t),Csr=i(le),e6=n(le,"LI",{});var l7e=s(e6);A_e=n(l7e,"STRONG",{});var Ugt=s(A_e);wsr=r(Ugt,"electra"),Ugt.forEach(t),Asr=r(l7e," \u2014 "),tz=n(l7e,"A",{href:!0});var Jgt=s(tz);ysr=r(Jgt,"TFElectraForPreTraining"),Jgt.forEach(t),Lsr=r(l7e," (ELECTRA model)"),l7e.forEach(t),xsr=i(le),o6=n(le,"LI",{});var i7e=s(o6);y_e=n(i7e,"STRONG",{});var Ygt=s(y_e);$sr=r(Ygt,"flaubert"),Ygt.forEach(t),ksr=r(i7e," \u2014 "),az=n(i7e,"A",{href:!0});var Kgt=s(az);Ssr=r(Kgt,"TFFlaubertWithLMHeadModel"),Kgt.forEach(t),Rsr=r(i7e," (FlauBERT model)"),i7e.forEach(t),Bsr=i(le),r6=n(le,"LI",{});var d7e=s(r6);L_e=n(d7e,"STRONG",{});var Zgt=s(L_e);Psr=r(Zgt,"funnel"),Zgt.forEach(t),Isr=r(d7e," \u2014 "),nz=n(d7e,"A",{href:!0});var eht=s(nz);qsr=r(eht,"TFFunnelForPreTraining"),eht.forEach(t),Nsr=r(d7e," (Funnel Transformer model)"),d7e.forEach(t),jsr=i(le),t6=n(le,"LI",{});var c7e=s(t6);x_e=n(c7e,"STRONG",{});var oht=s(x_e);Dsr=r(oht,"gpt2"),oht.forEach(t),Gsr=r(c7e," \u2014 "),sz=n(c7e,"A",{href:!0});var rht=s(sz);Osr=r(rht,"TFGPT2LMHeadModel"),rht.forEach(t),Vsr=r(c7e," (OpenAI GPT-2 model)"),c7e.forEach(t),Xsr=i(le),a6=n(le,"LI",{});var f7e=s(a6);$_e=n(f7e,"STRONG",{});var tht=s($_e);zsr=r(tht,"layoutlm"),tht.forEach(t),Qsr=r(f7e," \u2014 "),lz=n(f7e,"A",{href:!0});var aht=s(lz);Wsr=r(aht,"TFLayoutLMForMaskedLM"),aht.forEach(t),Hsr=r(f7e," (LayoutLM model)"),f7e.forEach(t),Usr=i(le),n6=n(le,"LI",{});var m7e=s(n6);k_e=n(m7e,"STRONG",{});var nht=s(k_e);Jsr=r(nht,"lxmert"),nht.forEach(t),Ysr=r(m7e," \u2014 "),iz=n(m7e,"A",{href:!0});var sht=s(iz);Ksr=r(sht,"TFLxmertForPreTraining"),sht.forEach(t),Zsr=r(m7e," (LXMERT model)"),m7e.forEach(t),elr=i(le),s6=n(le,"LI",{});var g7e=s(s6);S_e=n(g7e,"STRONG",{});var lht=s(S_e);olr=r(lht,"mobilebert"),lht.forEach(t),rlr=r(g7e," \u2014 "),dz=n(g7e,"A",{href:!0});var iht=s(dz);tlr=r(iht,"TFMobileBertForPreTraining"),iht.forEach(t),alr=r(g7e," (MobileBERT model)"),g7e.forEach(t),nlr=i(le),l6=n(le,"LI",{});var h7e=s(l6);R_e=n(h7e,"STRONG",{});var dht=s(R_e);slr=r(dht,"mpnet"),dht.forEach(t),llr=r(h7e," \u2014 "),cz=n(h7e,"A",{href:!0});var cht=s(cz);ilr=r(cht,"TFMPNetForMaskedLM"),cht.forEach(t),dlr=r(h7e," (MPNet model)"),h7e.forEach(t),clr=i(le),i6=n(le,"LI",{});var p7e=s(i6);B_e=n(p7e,"STRONG",{});var fht=s(B_e);flr=r(fht,"openai-gpt"),fht.forEach(t),mlr=r(p7e," \u2014 "),fz=n(p7e,"A",{href:!0});var mht=s(fz);glr=r(mht,"TFOpenAIGPTLMHeadModel"),mht.forEach(t),hlr=r(p7e," (OpenAI GPT model)"),p7e.forEach(t),plr=i(le),d6=n(le,"LI",{});var u7e=s(d6);P_e=n(u7e,"STRONG",{});var ght=s(P_e);ulr=r(ght,"roberta"),ght.forEach(t),_lr=r(u7e," \u2014 "),mz=n(u7e,"A",{href:!0});var hht=s(mz);blr=r(hht,"TFRobertaForMaskedLM"),hht.forEach(t),vlr=r(u7e," (RoBERTa model)"),u7e.forEach(t),Flr=i(le),c6=n(le,"LI",{});var _7e=s(c6);I_e=n(_7e,"STRONG",{});var pht=s(I_e);Tlr=r(pht,"t5"),pht.forEach(t),Mlr=r(_7e," \u2014 "),gz=n(_7e,"A",{href:!0});var uht=s(gz);Elr=r(uht,"TFT5ForConditionalGeneration"),uht.forEach(t),Clr=r(_7e," (T5 model)"),_7e.forEach(t),wlr=i(le),f6=n(le,"LI",{});var b7e=s(f6);q_e=n(b7e,"STRONG",{});var _ht=s(q_e);Alr=r(_ht,"tapas"),_ht.forEach(t),ylr=r(b7e," \u2014 "),hz=n(b7e,"A",{href:!0});var bht=s(hz);Llr=r(bht,"TFTapasForMaskedLM"),bht.forEach(t),xlr=r(b7e," (TAPAS model)"),b7e.forEach(t),$lr=i(le),m6=n(le,"LI",{});var v7e=s(m6);N_e=n(v7e,"STRONG",{});var vht=s(N_e);klr=r(vht,"transfo-xl"),vht.forEach(t),Slr=r(v7e," \u2014 "),pz=n(v7e,"A",{href:!0});var Fht=s(pz);Rlr=r(Fht,"TFTransfoXLLMHeadModel"),Fht.forEach(t),Blr=r(v7e," (Transformer-XL model)"),v7e.forEach(t),Plr=i(le),g6=n(le,"LI",{});var F7e=s(g6);j_e=n(F7e,"STRONG",{});var Tht=s(j_e);Ilr=r(Tht,"vit_mae"),Tht.forEach(t),qlr=r(F7e," \u2014 "),uz=n(F7e,"A",{href:!0});var Mht=s(uz);Nlr=r(Mht,"TFViTMAEForPreTraining"),Mht.forEach(t),jlr=r(F7e," (ViTMAE model)"),F7e.forEach(t),Dlr=i(le),h6=n(le,"LI",{});var T7e=s(h6);D_e=n(T7e,"STRONG",{});var Eht=s(D_e);Glr=r(Eht,"xlm"),Eht.forEach(t),Olr=r(T7e," \u2014 "),_z=n(T7e,"A",{href:!0});var Cht=s(_z);Vlr=r(Cht,"TFXLMWithLMHeadModel"),Cht.forEach(t),Xlr=r(T7e," (XLM model)"),T7e.forEach(t),zlr=i(le),p6=n(le,"LI",{});var M7e=s(p6);G_e=n(M7e,"STRONG",{});var wht=s(G_e);Qlr=r(wht,"xlm-roberta"),wht.forEach(t),Wlr=r(M7e," \u2014 "),bz=n(M7e,"A",{href:!0});var Aht=s(bz);Hlr=r(Aht,"TFXLMRobertaForMaskedLM"),Aht.forEach(t),Ulr=r(M7e," (XLM-RoBERTa model)"),M7e.forEach(t),Jlr=i(le),u6=n(le,"LI",{});var E7e=s(u6);O_e=n(E7e,"STRONG",{});var yht=s(O_e);Ylr=r(yht,"xlnet"),yht.forEach(t),Klr=r(E7e," \u2014 "),vz=n(E7e,"A",{href:!0});var Lht=s(vz);Zlr=r(Lht,"TFXLNetLMHeadModel"),Lht.forEach(t),eir=r(E7e," (XLNet model)"),E7e.forEach(t),le.forEach(t),oir=i(il),T(_6.$$.fragment,il),il.forEach(t),ll.forEach(t),KBe=i(f),qd=n(f,"H2",{class:!0});var oqe=s(qd);b6=n(oqe,"A",{id:!0,class:!0,href:!0});var xht=s(b6);V_e=n(xht,"SPAN",{});var $ht=s(V_e);T(lL.$$.fragment,$ht),$ht.forEach(t),xht.forEach(t),rir=i(oqe),X_e=n(oqe,"SPAN",{});var kht=s(X_e);tir=r(kht,"TFAutoModelForCausalLM"),kht.forEach(t),oqe.forEach(t),ZBe=i(f),Zo=n(f,"DIV",{class:!0});var dl=s(Zo);T(iL.$$.fragment,dl),air=i(dl),Nd=n(dl,"P",{});var KY=s(Nd);nir=r(KY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Fz=n(KY,"A",{href:!0});var Sht=s(Fz);sir=r(Sht,"from_pretrained()"),Sht.forEach(t),lir=r(KY," class method or the "),Tz=n(KY,"A",{href:!0});var Rht=s(Tz);iir=r(Rht,"from_config()"),Rht.forEach(t),dir=r(KY,` class
method.`),KY.forEach(t),cir=i(dl),dL=n(dl,"P",{});var rqe=s(dL);fir=r(rqe,"This class cannot be instantiated directly using "),z_e=n(rqe,"CODE",{});var Bht=s(z_e);mir=r(Bht,"__init__()"),Bht.forEach(t),gir=r(rqe," (throws an error)."),rqe.forEach(t),hir=i(dl),wt=n(dl,"DIV",{class:!0});var Tw=s(wt);T(cL.$$.fragment,Tw),pir=i(Tw),Q_e=n(Tw,"P",{});var Pht=s(Q_e);uir=r(Pht,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Pht.forEach(t),_ir=i(Tw),jd=n(Tw,"P",{});var ZY=s(jd);bir=r(ZY,`Note:
Loading a model from its configuration file does `),W_e=n(ZY,"STRONG",{});var Iht=s(W_e);vir=r(Iht,"not"),Iht.forEach(t),Fir=r(ZY,` load the model weights. It only affects the
model\u2019s configuration. Use `),Mz=n(ZY,"A",{href:!0});var qht=s(Mz);Tir=r(qht,"from_pretrained()"),qht.forEach(t),Mir=r(ZY," to load the model weights."),ZY.forEach(t),Eir=i(Tw),T(v6.$$.fragment,Tw),Tw.forEach(t),Cir=i(dl),Ar=n(dl,"DIV",{class:!0});var cl=s(Ar);T(fL.$$.fragment,cl),wir=i(cl),H_e=n(cl,"P",{});var Nht=s(H_e);Air=r(Nht,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Nht.forEach(t),yir=i(cl),Ya=n(cl,"P",{});var Mw=s(Ya);Lir=r(Mw,"The model class to instantiate is selected based on the "),U_e=n(Mw,"CODE",{});var jht=s(U_e);xir=r(jht,"model_type"),jht.forEach(t),$ir=r(Mw,` property of the config object (either
passed as an argument or loaded from `),J_e=n(Mw,"CODE",{});var Dht=s(J_e);kir=r(Dht,"pretrained_model_name_or_path"),Dht.forEach(t),Sir=r(Mw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Y_e=n(Mw,"CODE",{});var Ght=s(Y_e);Rir=r(Ght,"pretrained_model_name_or_path"),Ght.forEach(t),Bir=r(Mw,":"),Mw.forEach(t),Pir=i(cl),Te=n(cl,"UL",{});var Ce=s(Te);F6=n(Ce,"LI",{});var C7e=s(F6);K_e=n(C7e,"STRONG",{});var Oht=s(K_e);Iir=r(Oht,"bert"),Oht.forEach(t),qir=r(C7e," \u2014 "),Ez=n(C7e,"A",{href:!0});var Vht=s(Ez);Nir=r(Vht,"TFBertLMHeadModel"),Vht.forEach(t),jir=r(C7e," (BERT model)"),C7e.forEach(t),Dir=i(Ce),T6=n(Ce,"LI",{});var w7e=s(T6);Z_e=n(w7e,"STRONG",{});var Xht=s(Z_e);Gir=r(Xht,"camembert"),Xht.forEach(t),Oir=r(w7e," \u2014 "),Cz=n(w7e,"A",{href:!0});var zht=s(Cz);Vir=r(zht,"TFCamembertForCausalLM"),zht.forEach(t),Xir=r(w7e," (CamemBERT model)"),w7e.forEach(t),zir=i(Ce),M6=n(Ce,"LI",{});var A7e=s(M6);e1e=n(A7e,"STRONG",{});var Qht=s(e1e);Qir=r(Qht,"ctrl"),Qht.forEach(t),Wir=r(A7e," \u2014 "),wz=n(A7e,"A",{href:!0});var Wht=s(wz);Hir=r(Wht,"TFCTRLLMHeadModel"),Wht.forEach(t),Uir=r(A7e," (CTRL model)"),A7e.forEach(t),Jir=i(Ce),E6=n(Ce,"LI",{});var y7e=s(E6);o1e=n(y7e,"STRONG",{});var Hht=s(o1e);Yir=r(Hht,"gpt2"),Hht.forEach(t),Kir=r(y7e," \u2014 "),Az=n(y7e,"A",{href:!0});var Uht=s(Az);Zir=r(Uht,"TFGPT2LMHeadModel"),Uht.forEach(t),edr=r(y7e," (OpenAI GPT-2 model)"),y7e.forEach(t),odr=i(Ce),C6=n(Ce,"LI",{});var L7e=s(C6);r1e=n(L7e,"STRONG",{});var Jht=s(r1e);rdr=r(Jht,"gptj"),Jht.forEach(t),tdr=r(L7e," \u2014 "),yz=n(L7e,"A",{href:!0});var Yht=s(yz);adr=r(Yht,"TFGPTJForCausalLM"),Yht.forEach(t),ndr=r(L7e," (GPT-J model)"),L7e.forEach(t),sdr=i(Ce),w6=n(Ce,"LI",{});var x7e=s(w6);t1e=n(x7e,"STRONG",{});var Kht=s(t1e);ldr=r(Kht,"openai-gpt"),Kht.forEach(t),idr=r(x7e," \u2014 "),Lz=n(x7e,"A",{href:!0});var Zht=s(Lz);ddr=r(Zht,"TFOpenAIGPTLMHeadModel"),Zht.forEach(t),cdr=r(x7e," (OpenAI GPT model)"),x7e.forEach(t),fdr=i(Ce),A6=n(Ce,"LI",{});var $7e=s(A6);a1e=n($7e,"STRONG",{});var ept=s(a1e);mdr=r(ept,"rembert"),ept.forEach(t),gdr=r($7e," \u2014 "),xz=n($7e,"A",{href:!0});var opt=s(xz);hdr=r(opt,"TFRemBertForCausalLM"),opt.forEach(t),pdr=r($7e," (RemBERT model)"),$7e.forEach(t),udr=i(Ce),y6=n(Ce,"LI",{});var k7e=s(y6);n1e=n(k7e,"STRONG",{});var rpt=s(n1e);_dr=r(rpt,"roberta"),rpt.forEach(t),bdr=r(k7e," \u2014 "),$z=n(k7e,"A",{href:!0});var tpt=s($z);vdr=r(tpt,"TFRobertaForCausalLM"),tpt.forEach(t),Fdr=r(k7e," (RoBERTa model)"),k7e.forEach(t),Tdr=i(Ce),L6=n(Ce,"LI",{});var S7e=s(L6);s1e=n(S7e,"STRONG",{});var apt=s(s1e);Mdr=r(apt,"roformer"),apt.forEach(t),Edr=r(S7e," \u2014 "),kz=n(S7e,"A",{href:!0});var npt=s(kz);Cdr=r(npt,"TFRoFormerForCausalLM"),npt.forEach(t),wdr=r(S7e," (RoFormer model)"),S7e.forEach(t),Adr=i(Ce),x6=n(Ce,"LI",{});var R7e=s(x6);l1e=n(R7e,"STRONG",{});var spt=s(l1e);ydr=r(spt,"transfo-xl"),spt.forEach(t),Ldr=r(R7e," \u2014 "),Sz=n(R7e,"A",{href:!0});var lpt=s(Sz);xdr=r(lpt,"TFTransfoXLLMHeadModel"),lpt.forEach(t),$dr=r(R7e," (Transformer-XL model)"),R7e.forEach(t),kdr=i(Ce),$6=n(Ce,"LI",{});var B7e=s($6);i1e=n(B7e,"STRONG",{});var ipt=s(i1e);Sdr=r(ipt,"xlm"),ipt.forEach(t),Rdr=r(B7e," \u2014 "),Rz=n(B7e,"A",{href:!0});var dpt=s(Rz);Bdr=r(dpt,"TFXLMWithLMHeadModel"),dpt.forEach(t),Pdr=r(B7e," (XLM model)"),B7e.forEach(t),Idr=i(Ce),k6=n(Ce,"LI",{});var P7e=s(k6);d1e=n(P7e,"STRONG",{});var cpt=s(d1e);qdr=r(cpt,"xlnet"),cpt.forEach(t),Ndr=r(P7e," \u2014 "),Bz=n(P7e,"A",{href:!0});var fpt=s(Bz);jdr=r(fpt,"TFXLNetLMHeadModel"),fpt.forEach(t),Ddr=r(P7e," (XLNet model)"),P7e.forEach(t),Ce.forEach(t),Gdr=i(cl),T(S6.$$.fragment,cl),cl.forEach(t),dl.forEach(t),ePe=i(f),Dd=n(f,"H2",{class:!0});var tqe=s(Dd);R6=n(tqe,"A",{id:!0,class:!0,href:!0});var mpt=s(R6);c1e=n(mpt,"SPAN",{});var gpt=s(c1e);T(mL.$$.fragment,gpt),gpt.forEach(t),mpt.forEach(t),Odr=i(tqe),f1e=n(tqe,"SPAN",{});var hpt=s(f1e);Vdr=r(hpt,"TFAutoModelForImageClassification"),hpt.forEach(t),tqe.forEach(t),oPe=i(f),er=n(f,"DIV",{class:!0});var fl=s(er);T(gL.$$.fragment,fl),Xdr=i(fl),Gd=n(fl,"P",{});var eK=s(Gd);zdr=r(eK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Pz=n(eK,"A",{href:!0});var ppt=s(Pz);Qdr=r(ppt,"from_pretrained()"),ppt.forEach(t),Wdr=r(eK," class method or the "),Iz=n(eK,"A",{href:!0});var upt=s(Iz);Hdr=r(upt,"from_config()"),upt.forEach(t),Udr=r(eK,` class
method.`),eK.forEach(t),Jdr=i(fl),hL=n(fl,"P",{});var aqe=s(hL);Ydr=r(aqe,"This class cannot be instantiated directly using "),m1e=n(aqe,"CODE",{});var _pt=s(m1e);Kdr=r(_pt,"__init__()"),_pt.forEach(t),Zdr=r(aqe," (throws an error)."),aqe.forEach(t),ecr=i(fl),At=n(fl,"DIV",{class:!0});var Ew=s(At);T(pL.$$.fragment,Ew),ocr=i(Ew),g1e=n(Ew,"P",{});var bpt=s(g1e);rcr=r(bpt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),bpt.forEach(t),tcr=i(Ew),Od=n(Ew,"P",{});var oK=s(Od);acr=r(oK,`Note:
Loading a model from its configuration file does `),h1e=n(oK,"STRONG",{});var vpt=s(h1e);ncr=r(vpt,"not"),vpt.forEach(t),scr=r(oK,` load the model weights. It only affects the
model\u2019s configuration. Use `),qz=n(oK,"A",{href:!0});var Fpt=s(qz);lcr=r(Fpt,"from_pretrained()"),Fpt.forEach(t),icr=r(oK," to load the model weights."),oK.forEach(t),dcr=i(Ew),T(B6.$$.fragment,Ew),Ew.forEach(t),ccr=i(fl),yr=n(fl,"DIV",{class:!0});var ml=s(yr);T(uL.$$.fragment,ml),fcr=i(ml),p1e=n(ml,"P",{});var Tpt=s(p1e);mcr=r(Tpt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Tpt.forEach(t),gcr=i(ml),Ka=n(ml,"P",{});var Cw=s(Ka);hcr=r(Cw,"The model class to instantiate is selected based on the "),u1e=n(Cw,"CODE",{});var Mpt=s(u1e);pcr=r(Mpt,"model_type"),Mpt.forEach(t),ucr=r(Cw,` property of the config object (either
passed as an argument or loaded from `),_1e=n(Cw,"CODE",{});var Ept=s(_1e);_cr=r(Ept,"pretrained_model_name_or_path"),Ept.forEach(t),bcr=r(Cw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),b1e=n(Cw,"CODE",{});var Cpt=s(b1e);vcr=r(Cpt,"pretrained_model_name_or_path"),Cpt.forEach(t),Fcr=r(Cw,":"),Cw.forEach(t),Tcr=i(ml),_L=n(ml,"UL",{});var nqe=s(_L);P6=n(nqe,"LI",{});var I7e=s(P6);v1e=n(I7e,"STRONG",{});var wpt=s(v1e);Mcr=r(wpt,"convnext"),wpt.forEach(t),Ecr=r(I7e," \u2014 "),Nz=n(I7e,"A",{href:!0});var Apt=s(Nz);Ccr=r(Apt,"TFConvNextForImageClassification"),Apt.forEach(t),wcr=r(I7e," (ConvNext model)"),I7e.forEach(t),Acr=i(nqe),I6=n(nqe,"LI",{});var q7e=s(I6);F1e=n(q7e,"STRONG",{});var ypt=s(F1e);ycr=r(ypt,"vit"),ypt.forEach(t),Lcr=r(q7e," \u2014 "),jz=n(q7e,"A",{href:!0});var Lpt=s(jz);xcr=r(Lpt,"TFViTForImageClassification"),Lpt.forEach(t),$cr=r(q7e," (ViT model)"),q7e.forEach(t),nqe.forEach(t),kcr=i(ml),T(q6.$$.fragment,ml),ml.forEach(t),fl.forEach(t),rPe=i(f),Vd=n(f,"H2",{class:!0});var sqe=s(Vd);N6=n(sqe,"A",{id:!0,class:!0,href:!0});var xpt=s(N6);T1e=n(xpt,"SPAN",{});var $pt=s(T1e);T(bL.$$.fragment,$pt),$pt.forEach(t),xpt.forEach(t),Scr=i(sqe),M1e=n(sqe,"SPAN",{});var kpt=s(M1e);Rcr=r(kpt,"TFAutoModelForMaskedLM"),kpt.forEach(t),sqe.forEach(t),tPe=i(f),or=n(f,"DIV",{class:!0});var gl=s(or);T(vL.$$.fragment,gl),Bcr=i(gl),Xd=n(gl,"P",{});var rK=s(Xd);Pcr=r(rK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Dz=n(rK,"A",{href:!0});var Spt=s(Dz);Icr=r(Spt,"from_pretrained()"),Spt.forEach(t),qcr=r(rK," class method or the "),Gz=n(rK,"A",{href:!0});var Rpt=s(Gz);Ncr=r(Rpt,"from_config()"),Rpt.forEach(t),jcr=r(rK,` class
method.`),rK.forEach(t),Dcr=i(gl),FL=n(gl,"P",{});var lqe=s(FL);Gcr=r(lqe,"This class cannot be instantiated directly using "),E1e=n(lqe,"CODE",{});var Bpt=s(E1e);Ocr=r(Bpt,"__init__()"),Bpt.forEach(t),Vcr=r(lqe," (throws an error)."),lqe.forEach(t),Xcr=i(gl),yt=n(gl,"DIV",{class:!0});var ww=s(yt);T(TL.$$.fragment,ww),zcr=i(ww),C1e=n(ww,"P",{});var Ppt=s(C1e);Qcr=r(Ppt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Ppt.forEach(t),Wcr=i(ww),zd=n(ww,"P",{});var tK=s(zd);Hcr=r(tK,`Note:
Loading a model from its configuration file does `),w1e=n(tK,"STRONG",{});var Ipt=s(w1e);Ucr=r(Ipt,"not"),Ipt.forEach(t),Jcr=r(tK,` load the model weights. It only affects the
model\u2019s configuration. Use `),Oz=n(tK,"A",{href:!0});var qpt=s(Oz);Ycr=r(qpt,"from_pretrained()"),qpt.forEach(t),Kcr=r(tK," to load the model weights."),tK.forEach(t),Zcr=i(ww),T(j6.$$.fragment,ww),ww.forEach(t),efr=i(gl),Lr=n(gl,"DIV",{class:!0});var hl=s(Lr);T(ML.$$.fragment,hl),ofr=i(hl),A1e=n(hl,"P",{});var Npt=s(A1e);rfr=r(Npt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Npt.forEach(t),tfr=i(hl),Za=n(hl,"P",{});var Aw=s(Za);afr=r(Aw,"The model class to instantiate is selected based on the "),y1e=n(Aw,"CODE",{});var jpt=s(y1e);nfr=r(jpt,"model_type"),jpt.forEach(t),sfr=r(Aw,` property of the config object (either
passed as an argument or loaded from `),L1e=n(Aw,"CODE",{});var Dpt=s(L1e);lfr=r(Dpt,"pretrained_model_name_or_path"),Dpt.forEach(t),ifr=r(Aw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),x1e=n(Aw,"CODE",{});var Gpt=s(x1e);dfr=r(Gpt,"pretrained_model_name_or_path"),Gpt.forEach(t),cfr=r(Aw,":"),Aw.forEach(t),ffr=i(hl),ie=n(hl,"UL",{});var fe=s(ie);D6=n(fe,"LI",{});var N7e=s(D6);$1e=n(N7e,"STRONG",{});var Opt=s($1e);mfr=r(Opt,"albert"),Opt.forEach(t),gfr=r(N7e," \u2014 "),Vz=n(N7e,"A",{href:!0});var Vpt=s(Vz);hfr=r(Vpt,"TFAlbertForMaskedLM"),Vpt.forEach(t),pfr=r(N7e," (ALBERT model)"),N7e.forEach(t),ufr=i(fe),G6=n(fe,"LI",{});var j7e=s(G6);k1e=n(j7e,"STRONG",{});var Xpt=s(k1e);_fr=r(Xpt,"bert"),Xpt.forEach(t),bfr=r(j7e," \u2014 "),Xz=n(j7e,"A",{href:!0});var zpt=s(Xz);vfr=r(zpt,"TFBertForMaskedLM"),zpt.forEach(t),Ffr=r(j7e," (BERT model)"),j7e.forEach(t),Tfr=i(fe),O6=n(fe,"LI",{});var D7e=s(O6);S1e=n(D7e,"STRONG",{});var Qpt=s(S1e);Mfr=r(Qpt,"camembert"),Qpt.forEach(t),Efr=r(D7e," \u2014 "),zz=n(D7e,"A",{href:!0});var Wpt=s(zz);Cfr=r(Wpt,"TFCamembertForMaskedLM"),Wpt.forEach(t),wfr=r(D7e," (CamemBERT model)"),D7e.forEach(t),Afr=i(fe),V6=n(fe,"LI",{});var G7e=s(V6);R1e=n(G7e,"STRONG",{});var Hpt=s(R1e);yfr=r(Hpt,"convbert"),Hpt.forEach(t),Lfr=r(G7e," \u2014 "),Qz=n(G7e,"A",{href:!0});var Upt=s(Qz);xfr=r(Upt,"TFConvBertForMaskedLM"),Upt.forEach(t),$fr=r(G7e," (ConvBERT model)"),G7e.forEach(t),kfr=i(fe),X6=n(fe,"LI",{});var O7e=s(X6);B1e=n(O7e,"STRONG",{});var Jpt=s(B1e);Sfr=r(Jpt,"deberta"),Jpt.forEach(t),Rfr=r(O7e," \u2014 "),Wz=n(O7e,"A",{href:!0});var Ypt=s(Wz);Bfr=r(Ypt,"TFDebertaForMaskedLM"),Ypt.forEach(t),Pfr=r(O7e," (DeBERTa model)"),O7e.forEach(t),Ifr=i(fe),z6=n(fe,"LI",{});var V7e=s(z6);P1e=n(V7e,"STRONG",{});var Kpt=s(P1e);qfr=r(Kpt,"deberta-v2"),Kpt.forEach(t),Nfr=r(V7e," \u2014 "),Hz=n(V7e,"A",{href:!0});var Zpt=s(Hz);jfr=r(Zpt,"TFDebertaV2ForMaskedLM"),Zpt.forEach(t),Dfr=r(V7e," (DeBERTa-v2 model)"),V7e.forEach(t),Gfr=i(fe),Q6=n(fe,"LI",{});var X7e=s(Q6);I1e=n(X7e,"STRONG",{});var eut=s(I1e);Ofr=r(eut,"distilbert"),eut.forEach(t),Vfr=r(X7e," \u2014 "),Uz=n(X7e,"A",{href:!0});var out=s(Uz);Xfr=r(out,"TFDistilBertForMaskedLM"),out.forEach(t),zfr=r(X7e," (DistilBERT model)"),X7e.forEach(t),Qfr=i(fe),W6=n(fe,"LI",{});var z7e=s(W6);q1e=n(z7e,"STRONG",{});var rut=s(q1e);Wfr=r(rut,"electra"),rut.forEach(t),Hfr=r(z7e," \u2014 "),Jz=n(z7e,"A",{href:!0});var tut=s(Jz);Ufr=r(tut,"TFElectraForMaskedLM"),tut.forEach(t),Jfr=r(z7e," (ELECTRA model)"),z7e.forEach(t),Yfr=i(fe),H6=n(fe,"LI",{});var Q7e=s(H6);N1e=n(Q7e,"STRONG",{});var aut=s(N1e);Kfr=r(aut,"flaubert"),aut.forEach(t),Zfr=r(Q7e," \u2014 "),Yz=n(Q7e,"A",{href:!0});var nut=s(Yz);emr=r(nut,"TFFlaubertWithLMHeadModel"),nut.forEach(t),omr=r(Q7e," (FlauBERT model)"),Q7e.forEach(t),rmr=i(fe),U6=n(fe,"LI",{});var W7e=s(U6);j1e=n(W7e,"STRONG",{});var sut=s(j1e);tmr=r(sut,"funnel"),sut.forEach(t),amr=r(W7e," \u2014 "),Kz=n(W7e,"A",{href:!0});var lut=s(Kz);nmr=r(lut,"TFFunnelForMaskedLM"),lut.forEach(t),smr=r(W7e," (Funnel Transformer model)"),W7e.forEach(t),lmr=i(fe),J6=n(fe,"LI",{});var H7e=s(J6);D1e=n(H7e,"STRONG",{});var iut=s(D1e);imr=r(iut,"layoutlm"),iut.forEach(t),dmr=r(H7e," \u2014 "),Zz=n(H7e,"A",{href:!0});var dut=s(Zz);cmr=r(dut,"TFLayoutLMForMaskedLM"),dut.forEach(t),fmr=r(H7e," (LayoutLM model)"),H7e.forEach(t),mmr=i(fe),Y6=n(fe,"LI",{});var U7e=s(Y6);G1e=n(U7e,"STRONG",{});var cut=s(G1e);gmr=r(cut,"longformer"),cut.forEach(t),hmr=r(U7e," \u2014 "),eQ=n(U7e,"A",{href:!0});var fut=s(eQ);pmr=r(fut,"TFLongformerForMaskedLM"),fut.forEach(t),umr=r(U7e," (Longformer model)"),U7e.forEach(t),_mr=i(fe),K6=n(fe,"LI",{});var J7e=s(K6);O1e=n(J7e,"STRONG",{});var mut=s(O1e);bmr=r(mut,"mobilebert"),mut.forEach(t),vmr=r(J7e," \u2014 "),oQ=n(J7e,"A",{href:!0});var gut=s(oQ);Fmr=r(gut,"TFMobileBertForMaskedLM"),gut.forEach(t),Tmr=r(J7e," (MobileBERT model)"),J7e.forEach(t),Mmr=i(fe),Z6=n(fe,"LI",{});var Y7e=s(Z6);V1e=n(Y7e,"STRONG",{});var hut=s(V1e);Emr=r(hut,"mpnet"),hut.forEach(t),Cmr=r(Y7e," \u2014 "),rQ=n(Y7e,"A",{href:!0});var put=s(rQ);wmr=r(put,"TFMPNetForMaskedLM"),put.forEach(t),Amr=r(Y7e," (MPNet model)"),Y7e.forEach(t),ymr=i(fe),eT=n(fe,"LI",{});var K7e=s(eT);X1e=n(K7e,"STRONG",{});var uut=s(X1e);Lmr=r(uut,"rembert"),uut.forEach(t),xmr=r(K7e," \u2014 "),tQ=n(K7e,"A",{href:!0});var _ut=s(tQ);$mr=r(_ut,"TFRemBertForMaskedLM"),_ut.forEach(t),kmr=r(K7e," (RemBERT model)"),K7e.forEach(t),Smr=i(fe),oT=n(fe,"LI",{});var Z7e=s(oT);z1e=n(Z7e,"STRONG",{});var but=s(z1e);Rmr=r(but,"roberta"),but.forEach(t),Bmr=r(Z7e," \u2014 "),aQ=n(Z7e,"A",{href:!0});var vut=s(aQ);Pmr=r(vut,"TFRobertaForMaskedLM"),vut.forEach(t),Imr=r(Z7e," (RoBERTa model)"),Z7e.forEach(t),qmr=i(fe),rT=n(fe,"LI",{});var e$e=s(rT);Q1e=n(e$e,"STRONG",{});var Fut=s(Q1e);Nmr=r(Fut,"roformer"),Fut.forEach(t),jmr=r(e$e," \u2014 "),nQ=n(e$e,"A",{href:!0});var Tut=s(nQ);Dmr=r(Tut,"TFRoFormerForMaskedLM"),Tut.forEach(t),Gmr=r(e$e," (RoFormer model)"),e$e.forEach(t),Omr=i(fe),tT=n(fe,"LI",{});var o$e=s(tT);W1e=n(o$e,"STRONG",{});var Mut=s(W1e);Vmr=r(Mut,"tapas"),Mut.forEach(t),Xmr=r(o$e," \u2014 "),sQ=n(o$e,"A",{href:!0});var Eut=s(sQ);zmr=r(Eut,"TFTapasForMaskedLM"),Eut.forEach(t),Qmr=r(o$e," (TAPAS model)"),o$e.forEach(t),Wmr=i(fe),aT=n(fe,"LI",{});var r$e=s(aT);H1e=n(r$e,"STRONG",{});var Cut=s(H1e);Hmr=r(Cut,"xlm"),Cut.forEach(t),Umr=r(r$e," \u2014 "),lQ=n(r$e,"A",{href:!0});var wut=s(lQ);Jmr=r(wut,"TFXLMWithLMHeadModel"),wut.forEach(t),Ymr=r(r$e," (XLM model)"),r$e.forEach(t),Kmr=i(fe),nT=n(fe,"LI",{});var t$e=s(nT);U1e=n(t$e,"STRONG",{});var Aut=s(U1e);Zmr=r(Aut,"xlm-roberta"),Aut.forEach(t),egr=r(t$e," \u2014 "),iQ=n(t$e,"A",{href:!0});var yut=s(iQ);ogr=r(yut,"TFXLMRobertaForMaskedLM"),yut.forEach(t),rgr=r(t$e," (XLM-RoBERTa model)"),t$e.forEach(t),fe.forEach(t),tgr=i(hl),T(sT.$$.fragment,hl),hl.forEach(t),gl.forEach(t),aPe=i(f),Qd=n(f,"H2",{class:!0});var iqe=s(Qd);lT=n(iqe,"A",{id:!0,class:!0,href:!0});var Lut=s(lT);J1e=n(Lut,"SPAN",{});var xut=s(J1e);T(EL.$$.fragment,xut),xut.forEach(t),Lut.forEach(t),agr=i(iqe),Y1e=n(iqe,"SPAN",{});var $ut=s(Y1e);ngr=r($ut,"TFAutoModelForSeq2SeqLM"),$ut.forEach(t),iqe.forEach(t),nPe=i(f),rr=n(f,"DIV",{class:!0});var pl=s(rr);T(CL.$$.fragment,pl),sgr=i(pl),Wd=n(pl,"P",{});var aK=s(Wd);lgr=r(aK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),dQ=n(aK,"A",{href:!0});var kut=s(dQ);igr=r(kut,"from_pretrained()"),kut.forEach(t),dgr=r(aK," class method or the "),cQ=n(aK,"A",{href:!0});var Sut=s(cQ);cgr=r(Sut,"from_config()"),Sut.forEach(t),fgr=r(aK,` class
method.`),aK.forEach(t),mgr=i(pl),wL=n(pl,"P",{});var dqe=s(wL);ggr=r(dqe,"This class cannot be instantiated directly using "),K1e=n(dqe,"CODE",{});var Rut=s(K1e);hgr=r(Rut,"__init__()"),Rut.forEach(t),pgr=r(dqe," (throws an error)."),dqe.forEach(t),ugr=i(pl),Lt=n(pl,"DIV",{class:!0});var yw=s(Lt);T(AL.$$.fragment,yw),_gr=i(yw),Z1e=n(yw,"P",{});var But=s(Z1e);bgr=r(But,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),But.forEach(t),vgr=i(yw),Hd=n(yw,"P",{});var nK=s(Hd);Fgr=r(nK,`Note:
Loading a model from its configuration file does `),e9e=n(nK,"STRONG",{});var Put=s(e9e);Tgr=r(Put,"not"),Put.forEach(t),Mgr=r(nK,` load the model weights. It only affects the
model\u2019s configuration. Use `),fQ=n(nK,"A",{href:!0});var Iut=s(fQ);Egr=r(Iut,"from_pretrained()"),Iut.forEach(t),Cgr=r(nK," to load the model weights."),nK.forEach(t),wgr=i(yw),T(iT.$$.fragment,yw),yw.forEach(t),Agr=i(pl),xr=n(pl,"DIV",{class:!0});var ul=s(xr);T(yL.$$.fragment,ul),ygr=i(ul),o9e=n(ul,"P",{});var qut=s(o9e);Lgr=r(qut,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),qut.forEach(t),xgr=i(ul),en=n(ul,"P",{});var Lw=s(en);$gr=r(Lw,"The model class to instantiate is selected based on the "),r9e=n(Lw,"CODE",{});var Nut=s(r9e);kgr=r(Nut,"model_type"),Nut.forEach(t),Sgr=r(Lw,` property of the config object (either
passed as an argument or loaded from `),t9e=n(Lw,"CODE",{});var jut=s(t9e);Rgr=r(jut,"pretrained_model_name_or_path"),jut.forEach(t),Bgr=r(Lw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),a9e=n(Lw,"CODE",{});var Dut=s(a9e);Pgr=r(Dut,"pretrained_model_name_or_path"),Dut.forEach(t),Igr=r(Lw,":"),Lw.forEach(t),qgr=i(ul),ye=n(ul,"UL",{});var Re=s(ye);dT=n(Re,"LI",{});var a$e=s(dT);n9e=n(a$e,"STRONG",{});var Gut=s(n9e);Ngr=r(Gut,"bart"),Gut.forEach(t),jgr=r(a$e," \u2014 "),mQ=n(a$e,"A",{href:!0});var Out=s(mQ);Dgr=r(Out,"TFBartForConditionalGeneration"),Out.forEach(t),Ggr=r(a$e," (BART model)"),a$e.forEach(t),Ogr=i(Re),cT=n(Re,"LI",{});var n$e=s(cT);s9e=n(n$e,"STRONG",{});var Vut=s(s9e);Vgr=r(Vut,"blenderbot"),Vut.forEach(t),Xgr=r(n$e," \u2014 "),gQ=n(n$e,"A",{href:!0});var Xut=s(gQ);zgr=r(Xut,"TFBlenderbotForConditionalGeneration"),Xut.forEach(t),Qgr=r(n$e," (Blenderbot model)"),n$e.forEach(t),Wgr=i(Re),fT=n(Re,"LI",{});var s$e=s(fT);l9e=n(s$e,"STRONG",{});var zut=s(l9e);Hgr=r(zut,"blenderbot-small"),zut.forEach(t),Ugr=r(s$e," \u2014 "),hQ=n(s$e,"A",{href:!0});var Qut=s(hQ);Jgr=r(Qut,"TFBlenderbotSmallForConditionalGeneration"),Qut.forEach(t),Ygr=r(s$e," (BlenderbotSmall model)"),s$e.forEach(t),Kgr=i(Re),mT=n(Re,"LI",{});var l$e=s(mT);i9e=n(l$e,"STRONG",{});var Wut=s(i9e);Zgr=r(Wut,"encoder-decoder"),Wut.forEach(t),ehr=r(l$e," \u2014 "),pQ=n(l$e,"A",{href:!0});var Hut=s(pQ);ohr=r(Hut,"TFEncoderDecoderModel"),Hut.forEach(t),rhr=r(l$e," (Encoder decoder model)"),l$e.forEach(t),thr=i(Re),gT=n(Re,"LI",{});var i$e=s(gT);d9e=n(i$e,"STRONG",{});var Uut=s(d9e);ahr=r(Uut,"led"),Uut.forEach(t),nhr=r(i$e," \u2014 "),uQ=n(i$e,"A",{href:!0});var Jut=s(uQ);shr=r(Jut,"TFLEDForConditionalGeneration"),Jut.forEach(t),lhr=r(i$e," (LED model)"),i$e.forEach(t),ihr=i(Re),hT=n(Re,"LI",{});var d$e=s(hT);c9e=n(d$e,"STRONG",{});var Yut=s(c9e);dhr=r(Yut,"marian"),Yut.forEach(t),chr=r(d$e," \u2014 "),_Q=n(d$e,"A",{href:!0});var Kut=s(_Q);fhr=r(Kut,"TFMarianMTModel"),Kut.forEach(t),mhr=r(d$e," (Marian model)"),d$e.forEach(t),ghr=i(Re),pT=n(Re,"LI",{});var c$e=s(pT);f9e=n(c$e,"STRONG",{});var Zut=s(f9e);hhr=r(Zut,"mbart"),Zut.forEach(t),phr=r(c$e," \u2014 "),bQ=n(c$e,"A",{href:!0});var e_t=s(bQ);uhr=r(e_t,"TFMBartForConditionalGeneration"),e_t.forEach(t),_hr=r(c$e," (mBART model)"),c$e.forEach(t),bhr=i(Re),uT=n(Re,"LI",{});var f$e=s(uT);m9e=n(f$e,"STRONG",{});var o_t=s(m9e);vhr=r(o_t,"mt5"),o_t.forEach(t),Fhr=r(f$e," \u2014 "),vQ=n(f$e,"A",{href:!0});var r_t=s(vQ);Thr=r(r_t,"TFMT5ForConditionalGeneration"),r_t.forEach(t),Mhr=r(f$e," (mT5 model)"),f$e.forEach(t),Ehr=i(Re),_T=n(Re,"LI",{});var m$e=s(_T);g9e=n(m$e,"STRONG",{});var t_t=s(g9e);Chr=r(t_t,"pegasus"),t_t.forEach(t),whr=r(m$e," \u2014 "),FQ=n(m$e,"A",{href:!0});var a_t=s(FQ);Ahr=r(a_t,"TFPegasusForConditionalGeneration"),a_t.forEach(t),yhr=r(m$e," (Pegasus model)"),m$e.forEach(t),Lhr=i(Re),bT=n(Re,"LI",{});var g$e=s(bT);h9e=n(g$e,"STRONG",{});var n_t=s(h9e);xhr=r(n_t,"t5"),n_t.forEach(t),$hr=r(g$e," \u2014 "),TQ=n(g$e,"A",{href:!0});var s_t=s(TQ);khr=r(s_t,"TFT5ForConditionalGeneration"),s_t.forEach(t),Shr=r(g$e," (T5 model)"),g$e.forEach(t),Re.forEach(t),Rhr=i(ul),T(vT.$$.fragment,ul),ul.forEach(t),pl.forEach(t),sPe=i(f),Ud=n(f,"H2",{class:!0});var cqe=s(Ud);FT=n(cqe,"A",{id:!0,class:!0,href:!0});var l_t=s(FT);p9e=n(l_t,"SPAN",{});var i_t=s(p9e);T(LL.$$.fragment,i_t),i_t.forEach(t),l_t.forEach(t),Bhr=i(cqe),u9e=n(cqe,"SPAN",{});var d_t=s(u9e);Phr=r(d_t,"TFAutoModelForSequenceClassification"),d_t.forEach(t),cqe.forEach(t),lPe=i(f),tr=n(f,"DIV",{class:!0});var _l=s(tr);T(xL.$$.fragment,_l),Ihr=i(_l),Jd=n(_l,"P",{});var sK=s(Jd);qhr=r(sK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),MQ=n(sK,"A",{href:!0});var c_t=s(MQ);Nhr=r(c_t,"from_pretrained()"),c_t.forEach(t),jhr=r(sK," class method or the "),EQ=n(sK,"A",{href:!0});var f_t=s(EQ);Dhr=r(f_t,"from_config()"),f_t.forEach(t),Ghr=r(sK,` class
method.`),sK.forEach(t),Ohr=i(_l),$L=n(_l,"P",{});var fqe=s($L);Vhr=r(fqe,"This class cannot be instantiated directly using "),_9e=n(fqe,"CODE",{});var m_t=s(_9e);Xhr=r(m_t,"__init__()"),m_t.forEach(t),zhr=r(fqe," (throws an error)."),fqe.forEach(t),Qhr=i(_l),xt=n(_l,"DIV",{class:!0});var xw=s(xt);T(kL.$$.fragment,xw),Whr=i(xw),b9e=n(xw,"P",{});var g_t=s(b9e);Hhr=r(g_t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),g_t.forEach(t),Uhr=i(xw),Yd=n(xw,"P",{});var lK=s(Yd);Jhr=r(lK,`Note:
Loading a model from its configuration file does `),v9e=n(lK,"STRONG",{});var h_t=s(v9e);Yhr=r(h_t,"not"),h_t.forEach(t),Khr=r(lK,` load the model weights. It only affects the
model\u2019s configuration. Use `),CQ=n(lK,"A",{href:!0});var p_t=s(CQ);Zhr=r(p_t,"from_pretrained()"),p_t.forEach(t),epr=r(lK," to load the model weights."),lK.forEach(t),opr=i(xw),T(TT.$$.fragment,xw),xw.forEach(t),rpr=i(_l),$r=n(_l,"DIV",{class:!0});var bl=s($r);T(SL.$$.fragment,bl),tpr=i(bl),F9e=n(bl,"P",{});var u_t=s(F9e);apr=r(u_t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),u_t.forEach(t),npr=i(bl),on=n(bl,"P",{});var $w=s(on);spr=r($w,"The model class to instantiate is selected based on the "),T9e=n($w,"CODE",{});var __t=s(T9e);lpr=r(__t,"model_type"),__t.forEach(t),ipr=r($w,` property of the config object (either
passed as an argument or loaded from `),M9e=n($w,"CODE",{});var b_t=s(M9e);dpr=r(b_t,"pretrained_model_name_or_path"),b_t.forEach(t),cpr=r($w,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),E9e=n($w,"CODE",{});var v_t=s(E9e);fpr=r(v_t,"pretrained_model_name_or_path"),v_t.forEach(t),mpr=r($w,":"),$w.forEach(t),gpr=i(bl),Z=n(bl,"UL",{});var re=s(Z);MT=n(re,"LI",{});var h$e=s(MT);C9e=n(h$e,"STRONG",{});var F_t=s(C9e);hpr=r(F_t,"albert"),F_t.forEach(t),ppr=r(h$e," \u2014 "),wQ=n(h$e,"A",{href:!0});var T_t=s(wQ);upr=r(T_t,"TFAlbertForSequenceClassification"),T_t.forEach(t),_pr=r(h$e," (ALBERT model)"),h$e.forEach(t),bpr=i(re),ET=n(re,"LI",{});var p$e=s(ET);w9e=n(p$e,"STRONG",{});var M_t=s(w9e);vpr=r(M_t,"bert"),M_t.forEach(t),Fpr=r(p$e," \u2014 "),AQ=n(p$e,"A",{href:!0});var E_t=s(AQ);Tpr=r(E_t,"TFBertForSequenceClassification"),E_t.forEach(t),Mpr=r(p$e," (BERT model)"),p$e.forEach(t),Epr=i(re),CT=n(re,"LI",{});var u$e=s(CT);A9e=n(u$e,"STRONG",{});var C_t=s(A9e);Cpr=r(C_t,"camembert"),C_t.forEach(t),wpr=r(u$e," \u2014 "),yQ=n(u$e,"A",{href:!0});var w_t=s(yQ);Apr=r(w_t,"TFCamembertForSequenceClassification"),w_t.forEach(t),ypr=r(u$e," (CamemBERT model)"),u$e.forEach(t),Lpr=i(re),wT=n(re,"LI",{});var _$e=s(wT);y9e=n(_$e,"STRONG",{});var A_t=s(y9e);xpr=r(A_t,"convbert"),A_t.forEach(t),$pr=r(_$e," \u2014 "),LQ=n(_$e,"A",{href:!0});var y_t=s(LQ);kpr=r(y_t,"TFConvBertForSequenceClassification"),y_t.forEach(t),Spr=r(_$e," (ConvBERT model)"),_$e.forEach(t),Rpr=i(re),AT=n(re,"LI",{});var b$e=s(AT);L9e=n(b$e,"STRONG",{});var L_t=s(L9e);Bpr=r(L_t,"ctrl"),L_t.forEach(t),Ppr=r(b$e," \u2014 "),xQ=n(b$e,"A",{href:!0});var x_t=s(xQ);Ipr=r(x_t,"TFCTRLForSequenceClassification"),x_t.forEach(t),qpr=r(b$e," (CTRL model)"),b$e.forEach(t),Npr=i(re),yT=n(re,"LI",{});var v$e=s(yT);x9e=n(v$e,"STRONG",{});var $_t=s(x9e);jpr=r($_t,"deberta"),$_t.forEach(t),Dpr=r(v$e," \u2014 "),$Q=n(v$e,"A",{href:!0});var k_t=s($Q);Gpr=r(k_t,"TFDebertaForSequenceClassification"),k_t.forEach(t),Opr=r(v$e," (DeBERTa model)"),v$e.forEach(t),Vpr=i(re),LT=n(re,"LI",{});var F$e=s(LT);$9e=n(F$e,"STRONG",{});var S_t=s($9e);Xpr=r(S_t,"deberta-v2"),S_t.forEach(t),zpr=r(F$e," \u2014 "),kQ=n(F$e,"A",{href:!0});var R_t=s(kQ);Qpr=r(R_t,"TFDebertaV2ForSequenceClassification"),R_t.forEach(t),Wpr=r(F$e," (DeBERTa-v2 model)"),F$e.forEach(t),Hpr=i(re),xT=n(re,"LI",{});var T$e=s(xT);k9e=n(T$e,"STRONG",{});var B_t=s(k9e);Upr=r(B_t,"distilbert"),B_t.forEach(t),Jpr=r(T$e," \u2014 "),SQ=n(T$e,"A",{href:!0});var P_t=s(SQ);Ypr=r(P_t,"TFDistilBertForSequenceClassification"),P_t.forEach(t),Kpr=r(T$e," (DistilBERT model)"),T$e.forEach(t),Zpr=i(re),$T=n(re,"LI",{});var M$e=s($T);S9e=n(M$e,"STRONG",{});var I_t=s(S9e);eur=r(I_t,"electra"),I_t.forEach(t),our=r(M$e," \u2014 "),RQ=n(M$e,"A",{href:!0});var q_t=s(RQ);rur=r(q_t,"TFElectraForSequenceClassification"),q_t.forEach(t),tur=r(M$e," (ELECTRA model)"),M$e.forEach(t),aur=i(re),kT=n(re,"LI",{});var E$e=s(kT);R9e=n(E$e,"STRONG",{});var N_t=s(R9e);nur=r(N_t,"flaubert"),N_t.forEach(t),sur=r(E$e," \u2014 "),BQ=n(E$e,"A",{href:!0});var j_t=s(BQ);lur=r(j_t,"TFFlaubertForSequenceClassification"),j_t.forEach(t),iur=r(E$e," (FlauBERT model)"),E$e.forEach(t),dur=i(re),ST=n(re,"LI",{});var C$e=s(ST);B9e=n(C$e,"STRONG",{});var D_t=s(B9e);cur=r(D_t,"funnel"),D_t.forEach(t),fur=r(C$e," \u2014 "),PQ=n(C$e,"A",{href:!0});var G_t=s(PQ);mur=r(G_t,"TFFunnelForSequenceClassification"),G_t.forEach(t),gur=r(C$e," (Funnel Transformer model)"),C$e.forEach(t),hur=i(re),RT=n(re,"LI",{});var w$e=s(RT);P9e=n(w$e,"STRONG",{});var O_t=s(P9e);pur=r(O_t,"gpt2"),O_t.forEach(t),uur=r(w$e," \u2014 "),IQ=n(w$e,"A",{href:!0});var V_t=s(IQ);_ur=r(V_t,"TFGPT2ForSequenceClassification"),V_t.forEach(t),bur=r(w$e," (OpenAI GPT-2 model)"),w$e.forEach(t),vur=i(re),BT=n(re,"LI",{});var A$e=s(BT);I9e=n(A$e,"STRONG",{});var X_t=s(I9e);Fur=r(X_t,"gptj"),X_t.forEach(t),Tur=r(A$e," \u2014 "),qQ=n(A$e,"A",{href:!0});var z_t=s(qQ);Mur=r(z_t,"TFGPTJForSequenceClassification"),z_t.forEach(t),Eur=r(A$e," (GPT-J model)"),A$e.forEach(t),Cur=i(re),PT=n(re,"LI",{});var y$e=s(PT);q9e=n(y$e,"STRONG",{});var Q_t=s(q9e);wur=r(Q_t,"layoutlm"),Q_t.forEach(t),Aur=r(y$e," \u2014 "),NQ=n(y$e,"A",{href:!0});var W_t=s(NQ);yur=r(W_t,"TFLayoutLMForSequenceClassification"),W_t.forEach(t),Lur=r(y$e," (LayoutLM model)"),y$e.forEach(t),xur=i(re),IT=n(re,"LI",{});var L$e=s(IT);N9e=n(L$e,"STRONG",{});var H_t=s(N9e);$ur=r(H_t,"longformer"),H_t.forEach(t),kur=r(L$e," \u2014 "),jQ=n(L$e,"A",{href:!0});var U_t=s(jQ);Sur=r(U_t,"TFLongformerForSequenceClassification"),U_t.forEach(t),Rur=r(L$e," (Longformer model)"),L$e.forEach(t),Bur=i(re),qT=n(re,"LI",{});var x$e=s(qT);j9e=n(x$e,"STRONG",{});var J_t=s(j9e);Pur=r(J_t,"mobilebert"),J_t.forEach(t),Iur=r(x$e," \u2014 "),DQ=n(x$e,"A",{href:!0});var Y_t=s(DQ);qur=r(Y_t,"TFMobileBertForSequenceClassification"),Y_t.forEach(t),Nur=r(x$e," (MobileBERT model)"),x$e.forEach(t),jur=i(re),NT=n(re,"LI",{});var $$e=s(NT);D9e=n($$e,"STRONG",{});var K_t=s(D9e);Dur=r(K_t,"mpnet"),K_t.forEach(t),Gur=r($$e," \u2014 "),GQ=n($$e,"A",{href:!0});var Z_t=s(GQ);Our=r(Z_t,"TFMPNetForSequenceClassification"),Z_t.forEach(t),Vur=r($$e," (MPNet model)"),$$e.forEach(t),Xur=i(re),jT=n(re,"LI",{});var k$e=s(jT);G9e=n(k$e,"STRONG",{});var e1t=s(G9e);zur=r(e1t,"openai-gpt"),e1t.forEach(t),Qur=r(k$e," \u2014 "),OQ=n(k$e,"A",{href:!0});var o1t=s(OQ);Wur=r(o1t,"TFOpenAIGPTForSequenceClassification"),o1t.forEach(t),Hur=r(k$e," (OpenAI GPT model)"),k$e.forEach(t),Uur=i(re),DT=n(re,"LI",{});var S$e=s(DT);O9e=n(S$e,"STRONG",{});var r1t=s(O9e);Jur=r(r1t,"rembert"),r1t.forEach(t),Yur=r(S$e," \u2014 "),VQ=n(S$e,"A",{href:!0});var t1t=s(VQ);Kur=r(t1t,"TFRemBertForSequenceClassification"),t1t.forEach(t),Zur=r(S$e," (RemBERT model)"),S$e.forEach(t),e_r=i(re),GT=n(re,"LI",{});var R$e=s(GT);V9e=n(R$e,"STRONG",{});var a1t=s(V9e);o_r=r(a1t,"roberta"),a1t.forEach(t),r_r=r(R$e," \u2014 "),XQ=n(R$e,"A",{href:!0});var n1t=s(XQ);t_r=r(n1t,"TFRobertaForSequenceClassification"),n1t.forEach(t),a_r=r(R$e," (RoBERTa model)"),R$e.forEach(t),n_r=i(re),OT=n(re,"LI",{});var B$e=s(OT);X9e=n(B$e,"STRONG",{});var s1t=s(X9e);s_r=r(s1t,"roformer"),s1t.forEach(t),l_r=r(B$e," \u2014 "),zQ=n(B$e,"A",{href:!0});var l1t=s(zQ);i_r=r(l1t,"TFRoFormerForSequenceClassification"),l1t.forEach(t),d_r=r(B$e," (RoFormer model)"),B$e.forEach(t),c_r=i(re),VT=n(re,"LI",{});var P$e=s(VT);z9e=n(P$e,"STRONG",{});var i1t=s(z9e);f_r=r(i1t,"tapas"),i1t.forEach(t),m_r=r(P$e," \u2014 "),QQ=n(P$e,"A",{href:!0});var d1t=s(QQ);g_r=r(d1t,"TFTapasForSequenceClassification"),d1t.forEach(t),h_r=r(P$e," (TAPAS model)"),P$e.forEach(t),p_r=i(re),XT=n(re,"LI",{});var I$e=s(XT);Q9e=n(I$e,"STRONG",{});var c1t=s(Q9e);u_r=r(c1t,"transfo-xl"),c1t.forEach(t),__r=r(I$e," \u2014 "),WQ=n(I$e,"A",{href:!0});var f1t=s(WQ);b_r=r(f1t,"TFTransfoXLForSequenceClassification"),f1t.forEach(t),v_r=r(I$e," (Transformer-XL model)"),I$e.forEach(t),F_r=i(re),zT=n(re,"LI",{});var q$e=s(zT);W9e=n(q$e,"STRONG",{});var m1t=s(W9e);T_r=r(m1t,"xlm"),m1t.forEach(t),M_r=r(q$e," \u2014 "),HQ=n(q$e,"A",{href:!0});var g1t=s(HQ);E_r=r(g1t,"TFXLMForSequenceClassification"),g1t.forEach(t),C_r=r(q$e," (XLM model)"),q$e.forEach(t),w_r=i(re),QT=n(re,"LI",{});var N$e=s(QT);H9e=n(N$e,"STRONG",{});var h1t=s(H9e);A_r=r(h1t,"xlm-roberta"),h1t.forEach(t),y_r=r(N$e," \u2014 "),UQ=n(N$e,"A",{href:!0});var p1t=s(UQ);L_r=r(p1t,"TFXLMRobertaForSequenceClassification"),p1t.forEach(t),x_r=r(N$e," (XLM-RoBERTa model)"),N$e.forEach(t),$_r=i(re),WT=n(re,"LI",{});var j$e=s(WT);U9e=n(j$e,"STRONG",{});var u1t=s(U9e);k_r=r(u1t,"xlnet"),u1t.forEach(t),S_r=r(j$e," \u2014 "),JQ=n(j$e,"A",{href:!0});var _1t=s(JQ);R_r=r(_1t,"TFXLNetForSequenceClassification"),_1t.forEach(t),B_r=r(j$e," (XLNet model)"),j$e.forEach(t),re.forEach(t),P_r=i(bl),T(HT.$$.fragment,bl),bl.forEach(t),_l.forEach(t),iPe=i(f),Kd=n(f,"H2",{class:!0});var mqe=s(Kd);UT=n(mqe,"A",{id:!0,class:!0,href:!0});var b1t=s(UT);J9e=n(b1t,"SPAN",{});var v1t=s(J9e);T(RL.$$.fragment,v1t),v1t.forEach(t),b1t.forEach(t),I_r=i(mqe),Y9e=n(mqe,"SPAN",{});var F1t=s(Y9e);q_r=r(F1t,"TFAutoModelForMultipleChoice"),F1t.forEach(t),mqe.forEach(t),dPe=i(f),ar=n(f,"DIV",{class:!0});var vl=s(ar);T(BL.$$.fragment,vl),N_r=i(vl),Zd=n(vl,"P",{});var iK=s(Zd);j_r=r(iK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),YQ=n(iK,"A",{href:!0});var T1t=s(YQ);D_r=r(T1t,"from_pretrained()"),T1t.forEach(t),G_r=r(iK," class method or the "),KQ=n(iK,"A",{href:!0});var M1t=s(KQ);O_r=r(M1t,"from_config()"),M1t.forEach(t),V_r=r(iK,` class
method.`),iK.forEach(t),X_r=i(vl),PL=n(vl,"P",{});var gqe=s(PL);z_r=r(gqe,"This class cannot be instantiated directly using "),K9e=n(gqe,"CODE",{});var E1t=s(K9e);Q_r=r(E1t,"__init__()"),E1t.forEach(t),W_r=r(gqe," (throws an error)."),gqe.forEach(t),H_r=i(vl),$t=n(vl,"DIV",{class:!0});var kw=s($t);T(IL.$$.fragment,kw),U_r=i(kw),Z9e=n(kw,"P",{});var C1t=s(Z9e);J_r=r(C1t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),C1t.forEach(t),Y_r=i(kw),ec=n(kw,"P",{});var dK=s(ec);K_r=r(dK,`Note:
Loading a model from its configuration file does `),ebe=n(dK,"STRONG",{});var w1t=s(ebe);Z_r=r(w1t,"not"),w1t.forEach(t),e1r=r(dK,` load the model weights. It only affects the
model\u2019s configuration. Use `),ZQ=n(dK,"A",{href:!0});var A1t=s(ZQ);o1r=r(A1t,"from_pretrained()"),A1t.forEach(t),r1r=r(dK," to load the model weights."),dK.forEach(t),t1r=i(kw),T(JT.$$.fragment,kw),kw.forEach(t),a1r=i(vl),kr=n(vl,"DIV",{class:!0});var Fl=s(kr);T(qL.$$.fragment,Fl),n1r=i(Fl),obe=n(Fl,"P",{});var y1t=s(obe);s1r=r(y1t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),y1t.forEach(t),l1r=i(Fl),rn=n(Fl,"P",{});var Sw=s(rn);i1r=r(Sw,"The model class to instantiate is selected based on the "),rbe=n(Sw,"CODE",{});var L1t=s(rbe);d1r=r(L1t,"model_type"),L1t.forEach(t),c1r=r(Sw,` property of the config object (either
passed as an argument or loaded from `),tbe=n(Sw,"CODE",{});var x1t=s(tbe);f1r=r(x1t,"pretrained_model_name_or_path"),x1t.forEach(t),m1r=r(Sw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),abe=n(Sw,"CODE",{});var $1t=s(abe);g1r=r($1t,"pretrained_model_name_or_path"),$1t.forEach(t),h1r=r(Sw,":"),Sw.forEach(t),p1r=i(Fl),pe=n(Fl,"UL",{});var _e=s(pe);YT=n(_e,"LI",{});var D$e=s(YT);nbe=n(D$e,"STRONG",{});var k1t=s(nbe);u1r=r(k1t,"albert"),k1t.forEach(t),_1r=r(D$e," \u2014 "),eW=n(D$e,"A",{href:!0});var S1t=s(eW);b1r=r(S1t,"TFAlbertForMultipleChoice"),S1t.forEach(t),v1r=r(D$e," (ALBERT model)"),D$e.forEach(t),F1r=i(_e),KT=n(_e,"LI",{});var G$e=s(KT);sbe=n(G$e,"STRONG",{});var R1t=s(sbe);T1r=r(R1t,"bert"),R1t.forEach(t),M1r=r(G$e," \u2014 "),oW=n(G$e,"A",{href:!0});var B1t=s(oW);E1r=r(B1t,"TFBertForMultipleChoice"),B1t.forEach(t),C1r=r(G$e," (BERT model)"),G$e.forEach(t),w1r=i(_e),ZT=n(_e,"LI",{});var O$e=s(ZT);lbe=n(O$e,"STRONG",{});var P1t=s(lbe);A1r=r(P1t,"camembert"),P1t.forEach(t),y1r=r(O$e," \u2014 "),rW=n(O$e,"A",{href:!0});var I1t=s(rW);L1r=r(I1t,"TFCamembertForMultipleChoice"),I1t.forEach(t),x1r=r(O$e," (CamemBERT model)"),O$e.forEach(t),$1r=i(_e),eM=n(_e,"LI",{});var V$e=s(eM);ibe=n(V$e,"STRONG",{});var q1t=s(ibe);k1r=r(q1t,"convbert"),q1t.forEach(t),S1r=r(V$e," \u2014 "),tW=n(V$e,"A",{href:!0});var N1t=s(tW);R1r=r(N1t,"TFConvBertForMultipleChoice"),N1t.forEach(t),B1r=r(V$e," (ConvBERT model)"),V$e.forEach(t),P1r=i(_e),oM=n(_e,"LI",{});var X$e=s(oM);dbe=n(X$e,"STRONG",{});var j1t=s(dbe);I1r=r(j1t,"distilbert"),j1t.forEach(t),q1r=r(X$e," \u2014 "),aW=n(X$e,"A",{href:!0});var D1t=s(aW);N1r=r(D1t,"TFDistilBertForMultipleChoice"),D1t.forEach(t),j1r=r(X$e," (DistilBERT model)"),X$e.forEach(t),D1r=i(_e),rM=n(_e,"LI",{});var z$e=s(rM);cbe=n(z$e,"STRONG",{});var G1t=s(cbe);G1r=r(G1t,"electra"),G1t.forEach(t),O1r=r(z$e," \u2014 "),nW=n(z$e,"A",{href:!0});var O1t=s(nW);V1r=r(O1t,"TFElectraForMultipleChoice"),O1t.forEach(t),X1r=r(z$e," (ELECTRA model)"),z$e.forEach(t),z1r=i(_e),tM=n(_e,"LI",{});var Q$e=s(tM);fbe=n(Q$e,"STRONG",{});var V1t=s(fbe);Q1r=r(V1t,"flaubert"),V1t.forEach(t),W1r=r(Q$e," \u2014 "),sW=n(Q$e,"A",{href:!0});var X1t=s(sW);H1r=r(X1t,"TFFlaubertForMultipleChoice"),X1t.forEach(t),U1r=r(Q$e," (FlauBERT model)"),Q$e.forEach(t),J1r=i(_e),aM=n(_e,"LI",{});var W$e=s(aM);mbe=n(W$e,"STRONG",{});var z1t=s(mbe);Y1r=r(z1t,"funnel"),z1t.forEach(t),K1r=r(W$e," \u2014 "),lW=n(W$e,"A",{href:!0});var Q1t=s(lW);Z1r=r(Q1t,"TFFunnelForMultipleChoice"),Q1t.forEach(t),e9r=r(W$e," (Funnel Transformer model)"),W$e.forEach(t),o9r=i(_e),nM=n(_e,"LI",{});var H$e=s(nM);gbe=n(H$e,"STRONG",{});var W1t=s(gbe);r9r=r(W1t,"longformer"),W1t.forEach(t),t9r=r(H$e," \u2014 "),iW=n(H$e,"A",{href:!0});var H1t=s(iW);a9r=r(H1t,"TFLongformerForMultipleChoice"),H1t.forEach(t),n9r=r(H$e," (Longformer model)"),H$e.forEach(t),s9r=i(_e),sM=n(_e,"LI",{});var U$e=s(sM);hbe=n(U$e,"STRONG",{});var U1t=s(hbe);l9r=r(U1t,"mobilebert"),U1t.forEach(t),i9r=r(U$e," \u2014 "),dW=n(U$e,"A",{href:!0});var J1t=s(dW);d9r=r(J1t,"TFMobileBertForMultipleChoice"),J1t.forEach(t),c9r=r(U$e," (MobileBERT model)"),U$e.forEach(t),f9r=i(_e),lM=n(_e,"LI",{});var J$e=s(lM);pbe=n(J$e,"STRONG",{});var Y1t=s(pbe);m9r=r(Y1t,"mpnet"),Y1t.forEach(t),g9r=r(J$e," \u2014 "),cW=n(J$e,"A",{href:!0});var K1t=s(cW);h9r=r(K1t,"TFMPNetForMultipleChoice"),K1t.forEach(t),p9r=r(J$e," (MPNet model)"),J$e.forEach(t),u9r=i(_e),iM=n(_e,"LI",{});var Y$e=s(iM);ube=n(Y$e,"STRONG",{});var Z1t=s(ube);_9r=r(Z1t,"rembert"),Z1t.forEach(t),b9r=r(Y$e," \u2014 "),fW=n(Y$e,"A",{href:!0});var e9t=s(fW);v9r=r(e9t,"TFRemBertForMultipleChoice"),e9t.forEach(t),F9r=r(Y$e," (RemBERT model)"),Y$e.forEach(t),T9r=i(_e),dM=n(_e,"LI",{});var K$e=s(dM);_be=n(K$e,"STRONG",{});var o9t=s(_be);M9r=r(o9t,"roberta"),o9t.forEach(t),E9r=r(K$e," \u2014 "),mW=n(K$e,"A",{href:!0});var r9t=s(mW);C9r=r(r9t,"TFRobertaForMultipleChoice"),r9t.forEach(t),w9r=r(K$e," (RoBERTa model)"),K$e.forEach(t),A9r=i(_e),cM=n(_e,"LI",{});var Z$e=s(cM);bbe=n(Z$e,"STRONG",{});var t9t=s(bbe);y9r=r(t9t,"roformer"),t9t.forEach(t),L9r=r(Z$e," \u2014 "),gW=n(Z$e,"A",{href:!0});var a9t=s(gW);x9r=r(a9t,"TFRoFormerForMultipleChoice"),a9t.forEach(t),$9r=r(Z$e," (RoFormer model)"),Z$e.forEach(t),k9r=i(_e),fM=n(_e,"LI",{});var eke=s(fM);vbe=n(eke,"STRONG",{});var n9t=s(vbe);S9r=r(n9t,"xlm"),n9t.forEach(t),R9r=r(eke," \u2014 "),hW=n(eke,"A",{href:!0});var s9t=s(hW);B9r=r(s9t,"TFXLMForMultipleChoice"),s9t.forEach(t),P9r=r(eke," (XLM model)"),eke.forEach(t),I9r=i(_e),mM=n(_e,"LI",{});var oke=s(mM);Fbe=n(oke,"STRONG",{});var l9t=s(Fbe);q9r=r(l9t,"xlm-roberta"),l9t.forEach(t),N9r=r(oke," \u2014 "),pW=n(oke,"A",{href:!0});var i9t=s(pW);j9r=r(i9t,"TFXLMRobertaForMultipleChoice"),i9t.forEach(t),D9r=r(oke," (XLM-RoBERTa model)"),oke.forEach(t),G9r=i(_e),gM=n(_e,"LI",{});var rke=s(gM);Tbe=n(rke,"STRONG",{});var d9t=s(Tbe);O9r=r(d9t,"xlnet"),d9t.forEach(t),V9r=r(rke," \u2014 "),uW=n(rke,"A",{href:!0});var c9t=s(uW);X9r=r(c9t,"TFXLNetForMultipleChoice"),c9t.forEach(t),z9r=r(rke," (XLNet model)"),rke.forEach(t),_e.forEach(t),Q9r=i(Fl),T(hM.$$.fragment,Fl),Fl.forEach(t),vl.forEach(t),cPe=i(f),oc=n(f,"H2",{class:!0});var hqe=s(oc);pM=n(hqe,"A",{id:!0,class:!0,href:!0});var f9t=s(pM);Mbe=n(f9t,"SPAN",{});var m9t=s(Mbe);T(NL.$$.fragment,m9t),m9t.forEach(t),f9t.forEach(t),W9r=i(hqe),Ebe=n(hqe,"SPAN",{});var g9t=s(Ebe);H9r=r(g9t,"TFAutoModelForTableQuestionAnswering"),g9t.forEach(t),hqe.forEach(t),fPe=i(f),nr=n(f,"DIV",{class:!0});var Tl=s(nr);T(jL.$$.fragment,Tl),U9r=i(Tl),rc=n(Tl,"P",{});var cK=s(rc);J9r=r(cK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),_W=n(cK,"A",{href:!0});var h9t=s(_W);Y9r=r(h9t,"from_pretrained()"),h9t.forEach(t),K9r=r(cK," class method or the "),bW=n(cK,"A",{href:!0});var p9t=s(bW);Z9r=r(p9t,"from_config()"),p9t.forEach(t),ebr=r(cK,` class
method.`),cK.forEach(t),obr=i(Tl),DL=n(Tl,"P",{});var pqe=s(DL);rbr=r(pqe,"This class cannot be instantiated directly using "),Cbe=n(pqe,"CODE",{});var u9t=s(Cbe);tbr=r(u9t,"__init__()"),u9t.forEach(t),abr=r(pqe," (throws an error)."),pqe.forEach(t),nbr=i(Tl),kt=n(Tl,"DIV",{class:!0});var Rw=s(kt);T(GL.$$.fragment,Rw),sbr=i(Rw),wbe=n(Rw,"P",{});var _9t=s(wbe);lbr=r(_9t,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),_9t.forEach(t),ibr=i(Rw),tc=n(Rw,"P",{});var fK=s(tc);dbr=r(fK,`Note:
Loading a model from its configuration file does `),Abe=n(fK,"STRONG",{});var b9t=s(Abe);cbr=r(b9t,"not"),b9t.forEach(t),fbr=r(fK,` load the model weights. It only affects the
model\u2019s configuration. Use `),vW=n(fK,"A",{href:!0});var v9t=s(vW);mbr=r(v9t,"from_pretrained()"),v9t.forEach(t),gbr=r(fK," to load the model weights."),fK.forEach(t),hbr=i(Rw),T(uM.$$.fragment,Rw),Rw.forEach(t),pbr=i(Tl),Sr=n(Tl,"DIV",{class:!0});var Ml=s(Sr);T(OL.$$.fragment,Ml),ubr=i(Ml),ybe=n(Ml,"P",{});var F9t=s(ybe);_br=r(F9t,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),F9t.forEach(t),bbr=i(Ml),tn=n(Ml,"P",{});var Bw=s(tn);vbr=r(Bw,"The model class to instantiate is selected based on the "),Lbe=n(Bw,"CODE",{});var T9t=s(Lbe);Fbr=r(T9t,"model_type"),T9t.forEach(t),Tbr=r(Bw,` property of the config object (either
passed as an argument or loaded from `),xbe=n(Bw,"CODE",{});var M9t=s(xbe);Mbr=r(M9t,"pretrained_model_name_or_path"),M9t.forEach(t),Ebr=r(Bw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$be=n(Bw,"CODE",{});var E9t=s($be);Cbr=r(E9t,"pretrained_model_name_or_path"),E9t.forEach(t),wbr=r(Bw,":"),Bw.forEach(t),Abr=i(Ml),kbe=n(Ml,"UL",{});var C9t=s(kbe);_M=n(C9t,"LI",{});var tke=s(_M);Sbe=n(tke,"STRONG",{});var w9t=s(Sbe);ybr=r(w9t,"tapas"),w9t.forEach(t),Lbr=r(tke," \u2014 "),FW=n(tke,"A",{href:!0});var A9t=s(FW);xbr=r(A9t,"TFTapasForQuestionAnswering"),A9t.forEach(t),$br=r(tke," (TAPAS model)"),tke.forEach(t),C9t.forEach(t),kbr=i(Ml),T(bM.$$.fragment,Ml),Ml.forEach(t),Tl.forEach(t),mPe=i(f),ac=n(f,"H2",{class:!0});var uqe=s(ac);vM=n(uqe,"A",{id:!0,class:!0,href:!0});var y9t=s(vM);Rbe=n(y9t,"SPAN",{});var L9t=s(Rbe);T(VL.$$.fragment,L9t),L9t.forEach(t),y9t.forEach(t),Sbr=i(uqe),Bbe=n(uqe,"SPAN",{});var x9t=s(Bbe);Rbr=r(x9t,"TFAutoModelForTokenClassification"),x9t.forEach(t),uqe.forEach(t),gPe=i(f),sr=n(f,"DIV",{class:!0});var El=s(sr);T(XL.$$.fragment,El),Bbr=i(El),nc=n(El,"P",{});var mK=s(nc);Pbr=r(mK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),TW=n(mK,"A",{href:!0});var $9t=s(TW);Ibr=r($9t,"from_pretrained()"),$9t.forEach(t),qbr=r(mK," class method or the "),MW=n(mK,"A",{href:!0});var k9t=s(MW);Nbr=r(k9t,"from_config()"),k9t.forEach(t),jbr=r(mK,` class
method.`),mK.forEach(t),Dbr=i(El),zL=n(El,"P",{});var _qe=s(zL);Gbr=r(_qe,"This class cannot be instantiated directly using "),Pbe=n(_qe,"CODE",{});var S9t=s(Pbe);Obr=r(S9t,"__init__()"),S9t.forEach(t),Vbr=r(_qe," (throws an error)."),_qe.forEach(t),Xbr=i(El),St=n(El,"DIV",{class:!0});var Pw=s(St);T(QL.$$.fragment,Pw),zbr=i(Pw),Ibe=n(Pw,"P",{});var R9t=s(Ibe);Qbr=r(R9t,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),R9t.forEach(t),Wbr=i(Pw),sc=n(Pw,"P",{});var gK=s(sc);Hbr=r(gK,`Note:
Loading a model from its configuration file does `),qbe=n(gK,"STRONG",{});var B9t=s(qbe);Ubr=r(B9t,"not"),B9t.forEach(t),Jbr=r(gK,` load the model weights. It only affects the
model\u2019s configuration. Use `),EW=n(gK,"A",{href:!0});var P9t=s(EW);Ybr=r(P9t,"from_pretrained()"),P9t.forEach(t),Kbr=r(gK," to load the model weights."),gK.forEach(t),Zbr=i(Pw),T(FM.$$.fragment,Pw),Pw.forEach(t),e2r=i(El),Rr=n(El,"DIV",{class:!0});var Cl=s(Rr);T(WL.$$.fragment,Cl),o2r=i(Cl),Nbe=n(Cl,"P",{});var I9t=s(Nbe);r2r=r(I9t,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),I9t.forEach(t),t2r=i(Cl),an=n(Cl,"P",{});var Iw=s(an);a2r=r(Iw,"The model class to instantiate is selected based on the "),jbe=n(Iw,"CODE",{});var q9t=s(jbe);n2r=r(q9t,"model_type"),q9t.forEach(t),s2r=r(Iw,` property of the config object (either
passed as an argument or loaded from `),Dbe=n(Iw,"CODE",{});var N9t=s(Dbe);l2r=r(N9t,"pretrained_model_name_or_path"),N9t.forEach(t),i2r=r(Iw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gbe=n(Iw,"CODE",{});var j9t=s(Gbe);d2r=r(j9t,"pretrained_model_name_or_path"),j9t.forEach(t),c2r=r(Iw,":"),Iw.forEach(t),f2r=i(Cl),de=n(Cl,"UL",{});var me=s(de);TM=n(me,"LI",{});var ake=s(TM);Obe=n(ake,"STRONG",{});var D9t=s(Obe);m2r=r(D9t,"albert"),D9t.forEach(t),g2r=r(ake," \u2014 "),CW=n(ake,"A",{href:!0});var G9t=s(CW);h2r=r(G9t,"TFAlbertForTokenClassification"),G9t.forEach(t),p2r=r(ake," (ALBERT model)"),ake.forEach(t),u2r=i(me),MM=n(me,"LI",{});var nke=s(MM);Vbe=n(nke,"STRONG",{});var O9t=s(Vbe);_2r=r(O9t,"bert"),O9t.forEach(t),b2r=r(nke," \u2014 "),wW=n(nke,"A",{href:!0});var V9t=s(wW);v2r=r(V9t,"TFBertForTokenClassification"),V9t.forEach(t),F2r=r(nke," (BERT model)"),nke.forEach(t),T2r=i(me),EM=n(me,"LI",{});var ske=s(EM);Xbe=n(ske,"STRONG",{});var X9t=s(Xbe);M2r=r(X9t,"camembert"),X9t.forEach(t),E2r=r(ske," \u2014 "),AW=n(ske,"A",{href:!0});var z9t=s(AW);C2r=r(z9t,"TFCamembertForTokenClassification"),z9t.forEach(t),w2r=r(ske," (CamemBERT model)"),ske.forEach(t),A2r=i(me),CM=n(me,"LI",{});var lke=s(CM);zbe=n(lke,"STRONG",{});var Q9t=s(zbe);y2r=r(Q9t,"convbert"),Q9t.forEach(t),L2r=r(lke," \u2014 "),yW=n(lke,"A",{href:!0});var W9t=s(yW);x2r=r(W9t,"TFConvBertForTokenClassification"),W9t.forEach(t),$2r=r(lke," (ConvBERT model)"),lke.forEach(t),k2r=i(me),wM=n(me,"LI",{});var ike=s(wM);Qbe=n(ike,"STRONG",{});var H9t=s(Qbe);S2r=r(H9t,"deberta"),H9t.forEach(t),R2r=r(ike," \u2014 "),LW=n(ike,"A",{href:!0});var U9t=s(LW);B2r=r(U9t,"TFDebertaForTokenClassification"),U9t.forEach(t),P2r=r(ike," (DeBERTa model)"),ike.forEach(t),I2r=i(me),AM=n(me,"LI",{});var dke=s(AM);Wbe=n(dke,"STRONG",{});var J9t=s(Wbe);q2r=r(J9t,"deberta-v2"),J9t.forEach(t),N2r=r(dke," \u2014 "),xW=n(dke,"A",{href:!0});var Y9t=s(xW);j2r=r(Y9t,"TFDebertaV2ForTokenClassification"),Y9t.forEach(t),D2r=r(dke," (DeBERTa-v2 model)"),dke.forEach(t),G2r=i(me),yM=n(me,"LI",{});var cke=s(yM);Hbe=n(cke,"STRONG",{});var K9t=s(Hbe);O2r=r(K9t,"distilbert"),K9t.forEach(t),V2r=r(cke," \u2014 "),$W=n(cke,"A",{href:!0});var Z9t=s($W);X2r=r(Z9t,"TFDistilBertForTokenClassification"),Z9t.forEach(t),z2r=r(cke," (DistilBERT model)"),cke.forEach(t),Q2r=i(me),LM=n(me,"LI",{});var fke=s(LM);Ube=n(fke,"STRONG",{});var ebt=s(Ube);W2r=r(ebt,"electra"),ebt.forEach(t),H2r=r(fke," \u2014 "),kW=n(fke,"A",{href:!0});var obt=s(kW);U2r=r(obt,"TFElectraForTokenClassification"),obt.forEach(t),J2r=r(fke," (ELECTRA model)"),fke.forEach(t),Y2r=i(me),xM=n(me,"LI",{});var mke=s(xM);Jbe=n(mke,"STRONG",{});var rbt=s(Jbe);K2r=r(rbt,"flaubert"),rbt.forEach(t),Z2r=r(mke," \u2014 "),SW=n(mke,"A",{href:!0});var tbt=s(SW);e5r=r(tbt,"TFFlaubertForTokenClassification"),tbt.forEach(t),o5r=r(mke," (FlauBERT model)"),mke.forEach(t),r5r=i(me),$M=n(me,"LI",{});var gke=s($M);Ybe=n(gke,"STRONG",{});var abt=s(Ybe);t5r=r(abt,"funnel"),abt.forEach(t),a5r=r(gke," \u2014 "),RW=n(gke,"A",{href:!0});var nbt=s(RW);n5r=r(nbt,"TFFunnelForTokenClassification"),nbt.forEach(t),s5r=r(gke," (Funnel Transformer model)"),gke.forEach(t),l5r=i(me),kM=n(me,"LI",{});var hke=s(kM);Kbe=n(hke,"STRONG",{});var sbt=s(Kbe);i5r=r(sbt,"layoutlm"),sbt.forEach(t),d5r=r(hke," \u2014 "),BW=n(hke,"A",{href:!0});var lbt=s(BW);c5r=r(lbt,"TFLayoutLMForTokenClassification"),lbt.forEach(t),f5r=r(hke," (LayoutLM model)"),hke.forEach(t),m5r=i(me),SM=n(me,"LI",{});var pke=s(SM);Zbe=n(pke,"STRONG",{});var ibt=s(Zbe);g5r=r(ibt,"longformer"),ibt.forEach(t),h5r=r(pke," \u2014 "),PW=n(pke,"A",{href:!0});var dbt=s(PW);p5r=r(dbt,"TFLongformerForTokenClassification"),dbt.forEach(t),u5r=r(pke," (Longformer model)"),pke.forEach(t),_5r=i(me),RM=n(me,"LI",{});var uke=s(RM);e2e=n(uke,"STRONG",{});var cbt=s(e2e);b5r=r(cbt,"mobilebert"),cbt.forEach(t),v5r=r(uke," \u2014 "),IW=n(uke,"A",{href:!0});var fbt=s(IW);F5r=r(fbt,"TFMobileBertForTokenClassification"),fbt.forEach(t),T5r=r(uke," (MobileBERT model)"),uke.forEach(t),M5r=i(me),BM=n(me,"LI",{});var _ke=s(BM);o2e=n(_ke,"STRONG",{});var mbt=s(o2e);E5r=r(mbt,"mpnet"),mbt.forEach(t),C5r=r(_ke," \u2014 "),qW=n(_ke,"A",{href:!0});var gbt=s(qW);w5r=r(gbt,"TFMPNetForTokenClassification"),gbt.forEach(t),A5r=r(_ke," (MPNet model)"),_ke.forEach(t),y5r=i(me),PM=n(me,"LI",{});var bke=s(PM);r2e=n(bke,"STRONG",{});var hbt=s(r2e);L5r=r(hbt,"rembert"),hbt.forEach(t),x5r=r(bke," \u2014 "),NW=n(bke,"A",{href:!0});var pbt=s(NW);$5r=r(pbt,"TFRemBertForTokenClassification"),pbt.forEach(t),k5r=r(bke," (RemBERT model)"),bke.forEach(t),S5r=i(me),IM=n(me,"LI",{});var vke=s(IM);t2e=n(vke,"STRONG",{});var ubt=s(t2e);R5r=r(ubt,"roberta"),ubt.forEach(t),B5r=r(vke," \u2014 "),jW=n(vke,"A",{href:!0});var _bt=s(jW);P5r=r(_bt,"TFRobertaForTokenClassification"),_bt.forEach(t),I5r=r(vke," (RoBERTa model)"),vke.forEach(t),q5r=i(me),qM=n(me,"LI",{});var Fke=s(qM);a2e=n(Fke,"STRONG",{});var bbt=s(a2e);N5r=r(bbt,"roformer"),bbt.forEach(t),j5r=r(Fke," \u2014 "),DW=n(Fke,"A",{href:!0});var vbt=s(DW);D5r=r(vbt,"TFRoFormerForTokenClassification"),vbt.forEach(t),G5r=r(Fke," (RoFormer model)"),Fke.forEach(t),O5r=i(me),NM=n(me,"LI",{});var Tke=s(NM);n2e=n(Tke,"STRONG",{});var Fbt=s(n2e);V5r=r(Fbt,"xlm"),Fbt.forEach(t),X5r=r(Tke," \u2014 "),GW=n(Tke,"A",{href:!0});var Tbt=s(GW);z5r=r(Tbt,"TFXLMForTokenClassification"),Tbt.forEach(t),Q5r=r(Tke," (XLM model)"),Tke.forEach(t),W5r=i(me),jM=n(me,"LI",{});var Mke=s(jM);s2e=n(Mke,"STRONG",{});var Mbt=s(s2e);H5r=r(Mbt,"xlm-roberta"),Mbt.forEach(t),U5r=r(Mke," \u2014 "),OW=n(Mke,"A",{href:!0});var Ebt=s(OW);J5r=r(Ebt,"TFXLMRobertaForTokenClassification"),Ebt.forEach(t),Y5r=r(Mke," (XLM-RoBERTa model)"),Mke.forEach(t),K5r=i(me),DM=n(me,"LI",{});var Eke=s(DM);l2e=n(Eke,"STRONG",{});var Cbt=s(l2e);Z5r=r(Cbt,"xlnet"),Cbt.forEach(t),evr=r(Eke," \u2014 "),VW=n(Eke,"A",{href:!0});var wbt=s(VW);ovr=r(wbt,"TFXLNetForTokenClassification"),wbt.forEach(t),rvr=r(Eke," (XLNet model)"),Eke.forEach(t),me.forEach(t),tvr=i(Cl),T(GM.$$.fragment,Cl),Cl.forEach(t),El.forEach(t),hPe=i(f),lc=n(f,"H2",{class:!0});var bqe=s(lc);OM=n(bqe,"A",{id:!0,class:!0,href:!0});var Abt=s(OM);i2e=n(Abt,"SPAN",{});var ybt=s(i2e);T(HL.$$.fragment,ybt),ybt.forEach(t),Abt.forEach(t),avr=i(bqe),d2e=n(bqe,"SPAN",{});var Lbt=s(d2e);nvr=r(Lbt,"TFAutoModelForQuestionAnswering"),Lbt.forEach(t),bqe.forEach(t),pPe=i(f),lr=n(f,"DIV",{class:!0});var wl=s(lr);T(UL.$$.fragment,wl),svr=i(wl),ic=n(wl,"P",{});var hK=s(ic);lvr=r(hK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),XW=n(hK,"A",{href:!0});var xbt=s(XW);ivr=r(xbt,"from_pretrained()"),xbt.forEach(t),dvr=r(hK," class method or the "),zW=n(hK,"A",{href:!0});var $bt=s(zW);cvr=r($bt,"from_config()"),$bt.forEach(t),fvr=r(hK,` class
method.`),hK.forEach(t),mvr=i(wl),JL=n(wl,"P",{});var vqe=s(JL);gvr=r(vqe,"This class cannot be instantiated directly using "),c2e=n(vqe,"CODE",{});var kbt=s(c2e);hvr=r(kbt,"__init__()"),kbt.forEach(t),pvr=r(vqe," (throws an error)."),vqe.forEach(t),uvr=i(wl),Rt=n(wl,"DIV",{class:!0});var qw=s(Rt);T(YL.$$.fragment,qw),_vr=i(qw),f2e=n(qw,"P",{});var Sbt=s(f2e);bvr=r(Sbt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Sbt.forEach(t),vvr=i(qw),dc=n(qw,"P",{});var pK=s(dc);Fvr=r(pK,`Note:
Loading a model from its configuration file does `),m2e=n(pK,"STRONG",{});var Rbt=s(m2e);Tvr=r(Rbt,"not"),Rbt.forEach(t),Mvr=r(pK,` load the model weights. It only affects the
model\u2019s configuration. Use `),QW=n(pK,"A",{href:!0});var Bbt=s(QW);Evr=r(Bbt,"from_pretrained()"),Bbt.forEach(t),Cvr=r(pK," to load the model weights."),pK.forEach(t),wvr=i(qw),T(VM.$$.fragment,qw),qw.forEach(t),Avr=i(wl),Br=n(wl,"DIV",{class:!0});var Al=s(Br);T(KL.$$.fragment,Al),yvr=i(Al),g2e=n(Al,"P",{});var Pbt=s(g2e);Lvr=r(Pbt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Pbt.forEach(t),xvr=i(Al),nn=n(Al,"P",{});var Nw=s(nn);$vr=r(Nw,"The model class to instantiate is selected based on the "),h2e=n(Nw,"CODE",{});var Ibt=s(h2e);kvr=r(Ibt,"model_type"),Ibt.forEach(t),Svr=r(Nw,` property of the config object (either
passed as an argument or loaded from `),p2e=n(Nw,"CODE",{});var qbt=s(p2e);Rvr=r(qbt,"pretrained_model_name_or_path"),qbt.forEach(t),Bvr=r(Nw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),u2e=n(Nw,"CODE",{});var Nbt=s(u2e);Pvr=r(Nbt,"pretrained_model_name_or_path"),Nbt.forEach(t),Ivr=r(Nw,":"),Nw.forEach(t),qvr=i(Al),ce=n(Al,"UL",{});var ge=s(ce);XM=n(ge,"LI",{});var Cke=s(XM);_2e=n(Cke,"STRONG",{});var jbt=s(_2e);Nvr=r(jbt,"albert"),jbt.forEach(t),jvr=r(Cke," \u2014 "),WW=n(Cke,"A",{href:!0});var Dbt=s(WW);Dvr=r(Dbt,"TFAlbertForQuestionAnswering"),Dbt.forEach(t),Gvr=r(Cke," (ALBERT model)"),Cke.forEach(t),Ovr=i(ge),zM=n(ge,"LI",{});var wke=s(zM);b2e=n(wke,"STRONG",{});var Gbt=s(b2e);Vvr=r(Gbt,"bert"),Gbt.forEach(t),Xvr=r(wke," \u2014 "),HW=n(wke,"A",{href:!0});var Obt=s(HW);zvr=r(Obt,"TFBertForQuestionAnswering"),Obt.forEach(t),Qvr=r(wke," (BERT model)"),wke.forEach(t),Wvr=i(ge),QM=n(ge,"LI",{});var Ake=s(QM);v2e=n(Ake,"STRONG",{});var Vbt=s(v2e);Hvr=r(Vbt,"camembert"),Vbt.forEach(t),Uvr=r(Ake," \u2014 "),UW=n(Ake,"A",{href:!0});var Xbt=s(UW);Jvr=r(Xbt,"TFCamembertForQuestionAnswering"),Xbt.forEach(t),Yvr=r(Ake," (CamemBERT model)"),Ake.forEach(t),Kvr=i(ge),WM=n(ge,"LI",{});var yke=s(WM);F2e=n(yke,"STRONG",{});var zbt=s(F2e);Zvr=r(zbt,"convbert"),zbt.forEach(t),eFr=r(yke," \u2014 "),JW=n(yke,"A",{href:!0});var Qbt=s(JW);oFr=r(Qbt,"TFConvBertForQuestionAnswering"),Qbt.forEach(t),rFr=r(yke," (ConvBERT model)"),yke.forEach(t),tFr=i(ge),HM=n(ge,"LI",{});var Lke=s(HM);T2e=n(Lke,"STRONG",{});var Wbt=s(T2e);aFr=r(Wbt,"deberta"),Wbt.forEach(t),nFr=r(Lke," \u2014 "),YW=n(Lke,"A",{href:!0});var Hbt=s(YW);sFr=r(Hbt,"TFDebertaForQuestionAnswering"),Hbt.forEach(t),lFr=r(Lke," (DeBERTa model)"),Lke.forEach(t),iFr=i(ge),UM=n(ge,"LI",{});var xke=s(UM);M2e=n(xke,"STRONG",{});var Ubt=s(M2e);dFr=r(Ubt,"deberta-v2"),Ubt.forEach(t),cFr=r(xke," \u2014 "),KW=n(xke,"A",{href:!0});var Jbt=s(KW);fFr=r(Jbt,"TFDebertaV2ForQuestionAnswering"),Jbt.forEach(t),mFr=r(xke," (DeBERTa-v2 model)"),xke.forEach(t),gFr=i(ge),JM=n(ge,"LI",{});var $ke=s(JM);E2e=n($ke,"STRONG",{});var Ybt=s(E2e);hFr=r(Ybt,"distilbert"),Ybt.forEach(t),pFr=r($ke," \u2014 "),ZW=n($ke,"A",{href:!0});var Kbt=s(ZW);uFr=r(Kbt,"TFDistilBertForQuestionAnswering"),Kbt.forEach(t),_Fr=r($ke," (DistilBERT model)"),$ke.forEach(t),bFr=i(ge),YM=n(ge,"LI",{});var kke=s(YM);C2e=n(kke,"STRONG",{});var Zbt=s(C2e);vFr=r(Zbt,"electra"),Zbt.forEach(t),FFr=r(kke," \u2014 "),eH=n(kke,"A",{href:!0});var e2t=s(eH);TFr=r(e2t,"TFElectraForQuestionAnswering"),e2t.forEach(t),MFr=r(kke," (ELECTRA model)"),kke.forEach(t),EFr=i(ge),KM=n(ge,"LI",{});var Ske=s(KM);w2e=n(Ske,"STRONG",{});var o2t=s(w2e);CFr=r(o2t,"flaubert"),o2t.forEach(t),wFr=r(Ske," \u2014 "),oH=n(Ske,"A",{href:!0});var r2t=s(oH);AFr=r(r2t,"TFFlaubertForQuestionAnsweringSimple"),r2t.forEach(t),yFr=r(Ske," (FlauBERT model)"),Ske.forEach(t),LFr=i(ge),ZM=n(ge,"LI",{});var Rke=s(ZM);A2e=n(Rke,"STRONG",{});var t2t=s(A2e);xFr=r(t2t,"funnel"),t2t.forEach(t),$Fr=r(Rke," \u2014 "),rH=n(Rke,"A",{href:!0});var a2t=s(rH);kFr=r(a2t,"TFFunnelForQuestionAnswering"),a2t.forEach(t),SFr=r(Rke," (Funnel Transformer model)"),Rke.forEach(t),RFr=i(ge),e4=n(ge,"LI",{});var Bke=s(e4);y2e=n(Bke,"STRONG",{});var n2t=s(y2e);BFr=r(n2t,"gptj"),n2t.forEach(t),PFr=r(Bke," \u2014 "),tH=n(Bke,"A",{href:!0});var s2t=s(tH);IFr=r(s2t,"TFGPTJForQuestionAnswering"),s2t.forEach(t),qFr=r(Bke," (GPT-J model)"),Bke.forEach(t),NFr=i(ge),o4=n(ge,"LI",{});var Pke=s(o4);L2e=n(Pke,"STRONG",{});var l2t=s(L2e);jFr=r(l2t,"longformer"),l2t.forEach(t),DFr=r(Pke," \u2014 "),aH=n(Pke,"A",{href:!0});var i2t=s(aH);GFr=r(i2t,"TFLongformerForQuestionAnswering"),i2t.forEach(t),OFr=r(Pke," (Longformer model)"),Pke.forEach(t),VFr=i(ge),r4=n(ge,"LI",{});var Ike=s(r4);x2e=n(Ike,"STRONG",{});var d2t=s(x2e);XFr=r(d2t,"mobilebert"),d2t.forEach(t),zFr=r(Ike," \u2014 "),nH=n(Ike,"A",{href:!0});var c2t=s(nH);QFr=r(c2t,"TFMobileBertForQuestionAnswering"),c2t.forEach(t),WFr=r(Ike," (MobileBERT model)"),Ike.forEach(t),HFr=i(ge),t4=n(ge,"LI",{});var qke=s(t4);$2e=n(qke,"STRONG",{});var f2t=s($2e);UFr=r(f2t,"mpnet"),f2t.forEach(t),JFr=r(qke," \u2014 "),sH=n(qke,"A",{href:!0});var m2t=s(sH);YFr=r(m2t,"TFMPNetForQuestionAnswering"),m2t.forEach(t),KFr=r(qke," (MPNet model)"),qke.forEach(t),ZFr=i(ge),a4=n(ge,"LI",{});var Nke=s(a4);k2e=n(Nke,"STRONG",{});var g2t=s(k2e);e6r=r(g2t,"rembert"),g2t.forEach(t),o6r=r(Nke," \u2014 "),lH=n(Nke,"A",{href:!0});var h2t=s(lH);r6r=r(h2t,"TFRemBertForQuestionAnswering"),h2t.forEach(t),t6r=r(Nke," (RemBERT model)"),Nke.forEach(t),a6r=i(ge),n4=n(ge,"LI",{});var jke=s(n4);S2e=n(jke,"STRONG",{});var p2t=s(S2e);n6r=r(p2t,"roberta"),p2t.forEach(t),s6r=r(jke," \u2014 "),iH=n(jke,"A",{href:!0});var u2t=s(iH);l6r=r(u2t,"TFRobertaForQuestionAnswering"),u2t.forEach(t),i6r=r(jke," (RoBERTa model)"),jke.forEach(t),d6r=i(ge),s4=n(ge,"LI",{});var Dke=s(s4);R2e=n(Dke,"STRONG",{});var _2t=s(R2e);c6r=r(_2t,"roformer"),_2t.forEach(t),f6r=r(Dke," \u2014 "),dH=n(Dke,"A",{href:!0});var b2t=s(dH);m6r=r(b2t,"TFRoFormerForQuestionAnswering"),b2t.forEach(t),g6r=r(Dke," (RoFormer model)"),Dke.forEach(t),h6r=i(ge),l4=n(ge,"LI",{});var Gke=s(l4);B2e=n(Gke,"STRONG",{});var v2t=s(B2e);p6r=r(v2t,"xlm"),v2t.forEach(t),u6r=r(Gke," \u2014 "),cH=n(Gke,"A",{href:!0});var F2t=s(cH);_6r=r(F2t,"TFXLMForQuestionAnsweringSimple"),F2t.forEach(t),b6r=r(Gke," (XLM model)"),Gke.forEach(t),v6r=i(ge),i4=n(ge,"LI",{});var Oke=s(i4);P2e=n(Oke,"STRONG",{});var T2t=s(P2e);F6r=r(T2t,"xlm-roberta"),T2t.forEach(t),T6r=r(Oke," \u2014 "),fH=n(Oke,"A",{href:!0});var M2t=s(fH);M6r=r(M2t,"TFXLMRobertaForQuestionAnswering"),M2t.forEach(t),E6r=r(Oke," (XLM-RoBERTa model)"),Oke.forEach(t),C6r=i(ge),d4=n(ge,"LI",{});var Vke=s(d4);I2e=n(Vke,"STRONG",{});var E2t=s(I2e);w6r=r(E2t,"xlnet"),E2t.forEach(t),A6r=r(Vke," \u2014 "),mH=n(Vke,"A",{href:!0});var C2t=s(mH);y6r=r(C2t,"TFXLNetForQuestionAnsweringSimple"),C2t.forEach(t),L6r=r(Vke," (XLNet model)"),Vke.forEach(t),ge.forEach(t),x6r=i(Al),T(c4.$$.fragment,Al),Al.forEach(t),wl.forEach(t),uPe=i(f),cc=n(f,"H2",{class:!0});var Fqe=s(cc);f4=n(Fqe,"A",{id:!0,class:!0,href:!0});var w2t=s(f4);q2e=n(w2t,"SPAN",{});var A2t=s(q2e);T(ZL.$$.fragment,A2t),A2t.forEach(t),w2t.forEach(t),$6r=i(Fqe),N2e=n(Fqe,"SPAN",{});var y2t=s(N2e);k6r=r(y2t,"TFAutoModelForVision2Seq"),y2t.forEach(t),Fqe.forEach(t),_Pe=i(f),ir=n(f,"DIV",{class:!0});var yl=s(ir);T(e8.$$.fragment,yl),S6r=i(yl),fc=n(yl,"P",{});var uK=s(fc);R6r=r(uK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),gH=n(uK,"A",{href:!0});var L2t=s(gH);B6r=r(L2t,"from_pretrained()"),L2t.forEach(t),P6r=r(uK," class method or the "),hH=n(uK,"A",{href:!0});var x2t=s(hH);I6r=r(x2t,"from_config()"),x2t.forEach(t),q6r=r(uK,` class
method.`),uK.forEach(t),N6r=i(yl),o8=n(yl,"P",{});var Tqe=s(o8);j6r=r(Tqe,"This class cannot be instantiated directly using "),j2e=n(Tqe,"CODE",{});var $2t=s(j2e);D6r=r($2t,"__init__()"),$2t.forEach(t),G6r=r(Tqe," (throws an error)."),Tqe.forEach(t),O6r=i(yl),Bt=n(yl,"DIV",{class:!0});var jw=s(Bt);T(r8.$$.fragment,jw),V6r=i(jw),D2e=n(jw,"P",{});var k2t=s(D2e);X6r=r(k2t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),k2t.forEach(t),z6r=i(jw),mc=n(jw,"P",{});var _K=s(mc);Q6r=r(_K,`Note:
Loading a model from its configuration file does `),G2e=n(_K,"STRONG",{});var S2t=s(G2e);W6r=r(S2t,"not"),S2t.forEach(t),H6r=r(_K,` load the model weights. It only affects the
model\u2019s configuration. Use `),pH=n(_K,"A",{href:!0});var R2t=s(pH);U6r=r(R2t,"from_pretrained()"),R2t.forEach(t),J6r=r(_K," to load the model weights."),_K.forEach(t),Y6r=i(jw),T(m4.$$.fragment,jw),jw.forEach(t),K6r=i(yl),Pr=n(yl,"DIV",{class:!0});var Ll=s(Pr);T(t8.$$.fragment,Ll),Z6r=i(Ll),O2e=n(Ll,"P",{});var B2t=s(O2e);eTr=r(B2t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),B2t.forEach(t),oTr=i(Ll),sn=n(Ll,"P",{});var Dw=s(sn);rTr=r(Dw,"The model class to instantiate is selected based on the "),V2e=n(Dw,"CODE",{});var P2t=s(V2e);tTr=r(P2t,"model_type"),P2t.forEach(t),aTr=r(Dw,` property of the config object (either
passed as an argument or loaded from `),X2e=n(Dw,"CODE",{});var I2t=s(X2e);nTr=r(I2t,"pretrained_model_name_or_path"),I2t.forEach(t),sTr=r(Dw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),z2e=n(Dw,"CODE",{});var q2t=s(z2e);lTr=r(q2t,"pretrained_model_name_or_path"),q2t.forEach(t),iTr=r(Dw,":"),Dw.forEach(t),dTr=i(Ll),Q2e=n(Ll,"UL",{});var N2t=s(Q2e);g4=n(N2t,"LI",{});var Xke=s(g4);W2e=n(Xke,"STRONG",{});var j2t=s(W2e);cTr=r(j2t,"vision-encoder-decoder"),j2t.forEach(t),fTr=r(Xke," \u2014 "),uH=n(Xke,"A",{href:!0});var D2t=s(uH);mTr=r(D2t,"TFVisionEncoderDecoderModel"),D2t.forEach(t),gTr=r(Xke," (Vision Encoder decoder model)"),Xke.forEach(t),N2t.forEach(t),hTr=i(Ll),T(h4.$$.fragment,Ll),Ll.forEach(t),yl.forEach(t),bPe=i(f),gc=n(f,"H2",{class:!0});var Mqe=s(gc);p4=n(Mqe,"A",{id:!0,class:!0,href:!0});var G2t=s(p4);H2e=n(G2t,"SPAN",{});var O2t=s(H2e);T(a8.$$.fragment,O2t),O2t.forEach(t),G2t.forEach(t),pTr=i(Mqe),U2e=n(Mqe,"SPAN",{});var V2t=s(U2e);uTr=r(V2t,"TFAutoModelForSpeechSeq2Seq"),V2t.forEach(t),Mqe.forEach(t),vPe=i(f),dr=n(f,"DIV",{class:!0});var xl=s(dr);T(n8.$$.fragment,xl),_Tr=i(xl),hc=n(xl,"P",{});var bK=s(hc);bTr=r(bK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),_H=n(bK,"A",{href:!0});var X2t=s(_H);vTr=r(X2t,"from_pretrained()"),X2t.forEach(t),FTr=r(bK," class method or the "),bH=n(bK,"A",{href:!0});var z2t=s(bH);TTr=r(z2t,"from_config()"),z2t.forEach(t),MTr=r(bK,` class
method.`),bK.forEach(t),ETr=i(xl),s8=n(xl,"P",{});var Eqe=s(s8);CTr=r(Eqe,"This class cannot be instantiated directly using "),J2e=n(Eqe,"CODE",{});var Q2t=s(J2e);wTr=r(Q2t,"__init__()"),Q2t.forEach(t),ATr=r(Eqe," (throws an error)."),Eqe.forEach(t),yTr=i(xl),Pt=n(xl,"DIV",{class:!0});var Gw=s(Pt);T(l8.$$.fragment,Gw),LTr=i(Gw),Y2e=n(Gw,"P",{});var W2t=s(Y2e);xTr=r(W2t,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),W2t.forEach(t),$Tr=i(Gw),pc=n(Gw,"P",{});var vK=s(pc);kTr=r(vK,`Note:
Loading a model from its configuration file does `),K2e=n(vK,"STRONG",{});var H2t=s(K2e);STr=r(H2t,"not"),H2t.forEach(t),RTr=r(vK,` load the model weights. It only affects the
model\u2019s configuration. Use `),vH=n(vK,"A",{href:!0});var U2t=s(vH);BTr=r(U2t,"from_pretrained()"),U2t.forEach(t),PTr=r(vK," to load the model weights."),vK.forEach(t),ITr=i(Gw),T(u4.$$.fragment,Gw),Gw.forEach(t),qTr=i(xl),Ir=n(xl,"DIV",{class:!0});var $l=s(Ir);T(i8.$$.fragment,$l),NTr=i($l),Z2e=n($l,"P",{});var J2t=s(Z2e);jTr=r(J2t,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),J2t.forEach(t),DTr=i($l),ln=n($l,"P",{});var Ow=s(ln);GTr=r(Ow,"The model class to instantiate is selected based on the "),e5e=n(Ow,"CODE",{});var Y2t=s(e5e);OTr=r(Y2t,"model_type"),Y2t.forEach(t),VTr=r(Ow,` property of the config object (either
passed as an argument or loaded from `),o5e=n(Ow,"CODE",{});var K2t=s(o5e);XTr=r(K2t,"pretrained_model_name_or_path"),K2t.forEach(t),zTr=r(Ow,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),r5e=n(Ow,"CODE",{});var Z2t=s(r5e);QTr=r(Z2t,"pretrained_model_name_or_path"),Z2t.forEach(t),WTr=r(Ow,":"),Ow.forEach(t),HTr=i($l),t5e=n($l,"UL",{});var e5t=s(t5e);_4=n(e5t,"LI",{});var zke=s(_4);a5e=n(zke,"STRONG",{});var o5t=s(a5e);UTr=r(o5t,"speech_to_text"),o5t.forEach(t),JTr=r(zke," \u2014 "),FH=n(zke,"A",{href:!0});var r5t=s(FH);YTr=r(r5t,"TFSpeech2TextForConditionalGeneration"),r5t.forEach(t),KTr=r(zke," (Speech2Text model)"),zke.forEach(t),e5t.forEach(t),ZTr=i($l),T(b4.$$.fragment,$l),$l.forEach(t),xl.forEach(t),FPe=i(f),uc=n(f,"H2",{class:!0});var Cqe=s(uc);v4=n(Cqe,"A",{id:!0,class:!0,href:!0});var t5t=s(v4);n5e=n(t5t,"SPAN",{});var a5t=s(n5e);T(d8.$$.fragment,a5t),a5t.forEach(t),t5t.forEach(t),eMr=i(Cqe),s5e=n(Cqe,"SPAN",{});var n5t=s(s5e);oMr=r(n5t,"FlaxAutoModel"),n5t.forEach(t),Cqe.forEach(t),TPe=i(f),cr=n(f,"DIV",{class:!0});var kl=s(cr);T(c8.$$.fragment,kl),rMr=i(kl),_c=n(kl,"P",{});var FK=s(_c);tMr=r(FK,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),TH=n(FK,"A",{href:!0});var s5t=s(TH);aMr=r(s5t,"from_pretrained()"),s5t.forEach(t),nMr=r(FK," class method or the "),MH=n(FK,"A",{href:!0});var l5t=s(MH);sMr=r(l5t,"from_config()"),l5t.forEach(t),lMr=r(FK,` class
method.`),FK.forEach(t),iMr=i(kl),f8=n(kl,"P",{});var wqe=s(f8);dMr=r(wqe,"This class cannot be instantiated directly using "),l5e=n(wqe,"CODE",{});var i5t=s(l5e);cMr=r(i5t,"__init__()"),i5t.forEach(t),fMr=r(wqe," (throws an error)."),wqe.forEach(t),mMr=i(kl),It=n(kl,"DIV",{class:!0});var Vw=s(It);T(m8.$$.fragment,Vw),gMr=i(Vw),i5e=n(Vw,"P",{});var d5t=s(i5e);hMr=r(d5t,"Instantiates one of the base model classes of the library from a configuration."),d5t.forEach(t),pMr=i(Vw),bc=n(Vw,"P",{});var TK=s(bc);uMr=r(TK,`Note:
Loading a model from its configuration file does `),d5e=n(TK,"STRONG",{});var c5t=s(d5e);_Mr=r(c5t,"not"),c5t.forEach(t),bMr=r(TK,` load the model weights. It only affects the
model\u2019s configuration. Use `),EH=n(TK,"A",{href:!0});var f5t=s(EH);vMr=r(f5t,"from_pretrained()"),f5t.forEach(t),FMr=r(TK," to load the model weights."),TK.forEach(t),TMr=i(Vw),T(F4.$$.fragment,Vw),Vw.forEach(t),MMr=i(kl),qr=n(kl,"DIV",{class:!0});var Sl=s(qr);T(g8.$$.fragment,Sl),EMr=i(Sl),c5e=n(Sl,"P",{});var m5t=s(c5e);CMr=r(m5t,"Instantiate one of the base model classes of the library from a pretrained model."),m5t.forEach(t),wMr=i(Sl),dn=n(Sl,"P",{});var Xw=s(dn);AMr=r(Xw,"The model class to instantiate is selected based on the "),f5e=n(Xw,"CODE",{});var g5t=s(f5e);yMr=r(g5t,"model_type"),g5t.forEach(t),LMr=r(Xw,` property of the config object (either
passed as an argument or loaded from `),m5e=n(Xw,"CODE",{});var h5t=s(m5e);xMr=r(h5t,"pretrained_model_name_or_path"),h5t.forEach(t),$Mr=r(Xw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),g5e=n(Xw,"CODE",{});var p5t=s(g5e);kMr=r(p5t,"pretrained_model_name_or_path"),p5t.forEach(t),SMr=r(Xw,":"),Xw.forEach(t),RMr=i(Sl),oe=n(Sl,"UL",{});var te=s(oe);T4=n(te,"LI",{});var Qke=s(T4);h5e=n(Qke,"STRONG",{});var u5t=s(h5e);BMr=r(u5t,"albert"),u5t.forEach(t),PMr=r(Qke," \u2014 "),CH=n(Qke,"A",{href:!0});var _5t=s(CH);IMr=r(_5t,"FlaxAlbertModel"),_5t.forEach(t),qMr=r(Qke," (ALBERT model)"),Qke.forEach(t),NMr=i(te),M4=n(te,"LI",{});var Wke=s(M4);p5e=n(Wke,"STRONG",{});var b5t=s(p5e);jMr=r(b5t,"bart"),b5t.forEach(t),DMr=r(Wke," \u2014 "),wH=n(Wke,"A",{href:!0});var v5t=s(wH);GMr=r(v5t,"FlaxBartModel"),v5t.forEach(t),OMr=r(Wke," (BART model)"),Wke.forEach(t),VMr=i(te),E4=n(te,"LI",{});var Hke=s(E4);u5e=n(Hke,"STRONG",{});var F5t=s(u5e);XMr=r(F5t,"beit"),F5t.forEach(t),zMr=r(Hke," \u2014 "),AH=n(Hke,"A",{href:!0});var T5t=s(AH);QMr=r(T5t,"FlaxBeitModel"),T5t.forEach(t),WMr=r(Hke," (BEiT model)"),Hke.forEach(t),HMr=i(te),C4=n(te,"LI",{});var Uke=s(C4);_5e=n(Uke,"STRONG",{});var M5t=s(_5e);UMr=r(M5t,"bert"),M5t.forEach(t),JMr=r(Uke," \u2014 "),yH=n(Uke,"A",{href:!0});var E5t=s(yH);YMr=r(E5t,"FlaxBertModel"),E5t.forEach(t),KMr=r(Uke," (BERT model)"),Uke.forEach(t),ZMr=i(te),w4=n(te,"LI",{});var Jke=s(w4);b5e=n(Jke,"STRONG",{});var C5t=s(b5e);e4r=r(C5t,"big_bird"),C5t.forEach(t),o4r=r(Jke," \u2014 "),LH=n(Jke,"A",{href:!0});var w5t=s(LH);r4r=r(w5t,"FlaxBigBirdModel"),w5t.forEach(t),t4r=r(Jke," (BigBird model)"),Jke.forEach(t),a4r=i(te),A4=n(te,"LI",{});var Yke=s(A4);v5e=n(Yke,"STRONG",{});var A5t=s(v5e);n4r=r(A5t,"blenderbot"),A5t.forEach(t),s4r=r(Yke," \u2014 "),xH=n(Yke,"A",{href:!0});var y5t=s(xH);l4r=r(y5t,"FlaxBlenderbotModel"),y5t.forEach(t),i4r=r(Yke," (Blenderbot model)"),Yke.forEach(t),d4r=i(te),y4=n(te,"LI",{});var Kke=s(y4);F5e=n(Kke,"STRONG",{});var L5t=s(F5e);c4r=r(L5t,"blenderbot-small"),L5t.forEach(t),f4r=r(Kke," \u2014 "),$H=n(Kke,"A",{href:!0});var x5t=s($H);m4r=r(x5t,"FlaxBlenderbotSmallModel"),x5t.forEach(t),g4r=r(Kke," (BlenderbotSmall model)"),Kke.forEach(t),h4r=i(te),L4=n(te,"LI",{});var Zke=s(L4);T5e=n(Zke,"STRONG",{});var $5t=s(T5e);p4r=r($5t,"clip"),$5t.forEach(t),u4r=r(Zke," \u2014 "),kH=n(Zke,"A",{href:!0});var k5t=s(kH);_4r=r(k5t,"FlaxCLIPModel"),k5t.forEach(t),b4r=r(Zke," (CLIP model)"),Zke.forEach(t),v4r=i(te),x4=n(te,"LI",{});var eSe=s(x4);M5e=n(eSe,"STRONG",{});var S5t=s(M5e);F4r=r(S5t,"distilbert"),S5t.forEach(t),T4r=r(eSe," \u2014 "),SH=n(eSe,"A",{href:!0});var R5t=s(SH);M4r=r(R5t,"FlaxDistilBertModel"),R5t.forEach(t),E4r=r(eSe," (DistilBERT model)"),eSe.forEach(t),C4r=i(te),$4=n(te,"LI",{});var oSe=s($4);E5e=n(oSe,"STRONG",{});var B5t=s(E5e);w4r=r(B5t,"electra"),B5t.forEach(t),A4r=r(oSe," \u2014 "),RH=n(oSe,"A",{href:!0});var P5t=s(RH);y4r=r(P5t,"FlaxElectraModel"),P5t.forEach(t),L4r=r(oSe," (ELECTRA model)"),oSe.forEach(t),x4r=i(te),k4=n(te,"LI",{});var rSe=s(k4);C5e=n(rSe,"STRONG",{});var I5t=s(C5e);$4r=r(I5t,"gpt2"),I5t.forEach(t),k4r=r(rSe," \u2014 "),BH=n(rSe,"A",{href:!0});var q5t=s(BH);S4r=r(q5t,"FlaxGPT2Model"),q5t.forEach(t),R4r=r(rSe," (OpenAI GPT-2 model)"),rSe.forEach(t),B4r=i(te),S4=n(te,"LI",{});var tSe=s(S4);w5e=n(tSe,"STRONG",{});var N5t=s(w5e);P4r=r(N5t,"gpt_neo"),N5t.forEach(t),I4r=r(tSe," \u2014 "),PH=n(tSe,"A",{href:!0});var j5t=s(PH);q4r=r(j5t,"FlaxGPTNeoModel"),j5t.forEach(t),N4r=r(tSe," (GPT Neo model)"),tSe.forEach(t),j4r=i(te),R4=n(te,"LI",{});var aSe=s(R4);A5e=n(aSe,"STRONG",{});var D5t=s(A5e);D4r=r(D5t,"gptj"),D5t.forEach(t),G4r=r(aSe," \u2014 "),IH=n(aSe,"A",{href:!0});var G5t=s(IH);O4r=r(G5t,"FlaxGPTJModel"),G5t.forEach(t),V4r=r(aSe," (GPT-J model)"),aSe.forEach(t),X4r=i(te),B4=n(te,"LI",{});var nSe=s(B4);y5e=n(nSe,"STRONG",{});var O5t=s(y5e);z4r=r(O5t,"marian"),O5t.forEach(t),Q4r=r(nSe," \u2014 "),qH=n(nSe,"A",{href:!0});var V5t=s(qH);W4r=r(V5t,"FlaxMarianModel"),V5t.forEach(t),H4r=r(nSe," (Marian model)"),nSe.forEach(t),U4r=i(te),P4=n(te,"LI",{});var sSe=s(P4);L5e=n(sSe,"STRONG",{});var X5t=s(L5e);J4r=r(X5t,"mbart"),X5t.forEach(t),Y4r=r(sSe," \u2014 "),NH=n(sSe,"A",{href:!0});var z5t=s(NH);K4r=r(z5t,"FlaxMBartModel"),z5t.forEach(t),Z4r=r(sSe," (mBART model)"),sSe.forEach(t),eEr=i(te),I4=n(te,"LI",{});var lSe=s(I4);x5e=n(lSe,"STRONG",{});var Q5t=s(x5e);oEr=r(Q5t,"mt5"),Q5t.forEach(t),rEr=r(lSe," \u2014 "),jH=n(lSe,"A",{href:!0});var W5t=s(jH);tEr=r(W5t,"FlaxMT5Model"),W5t.forEach(t),aEr=r(lSe," (mT5 model)"),lSe.forEach(t),nEr=i(te),q4=n(te,"LI",{});var iSe=s(q4);$5e=n(iSe,"STRONG",{});var H5t=s($5e);sEr=r(H5t,"pegasus"),H5t.forEach(t),lEr=r(iSe," \u2014 "),DH=n(iSe,"A",{href:!0});var U5t=s(DH);iEr=r(U5t,"FlaxPegasusModel"),U5t.forEach(t),dEr=r(iSe," (Pegasus model)"),iSe.forEach(t),cEr=i(te),N4=n(te,"LI",{});var dSe=s(N4);k5e=n(dSe,"STRONG",{});var J5t=s(k5e);fEr=r(J5t,"roberta"),J5t.forEach(t),mEr=r(dSe," \u2014 "),GH=n(dSe,"A",{href:!0});var Y5t=s(GH);gEr=r(Y5t,"FlaxRobertaModel"),Y5t.forEach(t),hEr=r(dSe," (RoBERTa model)"),dSe.forEach(t),pEr=i(te),j4=n(te,"LI",{});var cSe=s(j4);S5e=n(cSe,"STRONG",{});var K5t=s(S5e);uEr=r(K5t,"roformer"),K5t.forEach(t),_Er=r(cSe," \u2014 "),OH=n(cSe,"A",{href:!0});var Z5t=s(OH);bEr=r(Z5t,"FlaxRoFormerModel"),Z5t.forEach(t),vEr=r(cSe," (RoFormer model)"),cSe.forEach(t),FEr=i(te),D4=n(te,"LI",{});var fSe=s(D4);R5e=n(fSe,"STRONG",{});var evt=s(R5e);TEr=r(evt,"t5"),evt.forEach(t),MEr=r(fSe," \u2014 "),VH=n(fSe,"A",{href:!0});var ovt=s(VH);EEr=r(ovt,"FlaxT5Model"),ovt.forEach(t),CEr=r(fSe," (T5 model)"),fSe.forEach(t),wEr=i(te),G4=n(te,"LI",{});var mSe=s(G4);B5e=n(mSe,"STRONG",{});var rvt=s(B5e);AEr=r(rvt,"vision-text-dual-encoder"),rvt.forEach(t),yEr=r(mSe," \u2014 "),XH=n(mSe,"A",{href:!0});var tvt=s(XH);LEr=r(tvt,"FlaxVisionTextDualEncoderModel"),tvt.forEach(t),xEr=r(mSe," (VisionTextDualEncoder model)"),mSe.forEach(t),$Er=i(te),O4=n(te,"LI",{});var gSe=s(O4);P5e=n(gSe,"STRONG",{});var avt=s(P5e);kEr=r(avt,"vit"),avt.forEach(t),SEr=r(gSe," \u2014 "),zH=n(gSe,"A",{href:!0});var nvt=s(zH);REr=r(nvt,"FlaxViTModel"),nvt.forEach(t),BEr=r(gSe," (ViT model)"),gSe.forEach(t),PEr=i(te),V4=n(te,"LI",{});var hSe=s(V4);I5e=n(hSe,"STRONG",{});var svt=s(I5e);IEr=r(svt,"wav2vec2"),svt.forEach(t),qEr=r(hSe," \u2014 "),QH=n(hSe,"A",{href:!0});var lvt=s(QH);NEr=r(lvt,"FlaxWav2Vec2Model"),lvt.forEach(t),jEr=r(hSe," (Wav2Vec2 model)"),hSe.forEach(t),DEr=i(te),X4=n(te,"LI",{});var pSe=s(X4);q5e=n(pSe,"STRONG",{});var ivt=s(q5e);GEr=r(ivt,"xglm"),ivt.forEach(t),OEr=r(pSe," \u2014 "),WH=n(pSe,"A",{href:!0});var dvt=s(WH);VEr=r(dvt,"FlaxXGLMModel"),dvt.forEach(t),XEr=r(pSe," (XGLM model)"),pSe.forEach(t),zEr=i(te),z4=n(te,"LI",{});var uSe=s(z4);N5e=n(uSe,"STRONG",{});var cvt=s(N5e);QEr=r(cvt,"xlm-roberta"),cvt.forEach(t),WEr=r(uSe," \u2014 "),HH=n(uSe,"A",{href:!0});var fvt=s(HH);HEr=r(fvt,"FlaxXLMRobertaModel"),fvt.forEach(t),UEr=r(uSe," (XLM-RoBERTa model)"),uSe.forEach(t),te.forEach(t),JEr=i(Sl),T(Q4.$$.fragment,Sl),Sl.forEach(t),kl.forEach(t),MPe=i(f),vc=n(f,"H2",{class:!0});var Aqe=s(vc);W4=n(Aqe,"A",{id:!0,class:!0,href:!0});var mvt=s(W4);j5e=n(mvt,"SPAN",{});var gvt=s(j5e);T(h8.$$.fragment,gvt),gvt.forEach(t),mvt.forEach(t),YEr=i(Aqe),D5e=n(Aqe,"SPAN",{});var hvt=s(D5e);KEr=r(hvt,"FlaxAutoModelForCausalLM"),hvt.forEach(t),Aqe.forEach(t),EPe=i(f),fr=n(f,"DIV",{class:!0});var Rl=s(fr);T(p8.$$.fragment,Rl),ZEr=i(Rl),Fc=n(Rl,"P",{});var MK=s(Fc);eCr=r(MK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),UH=n(MK,"A",{href:!0});var pvt=s(UH);oCr=r(pvt,"from_pretrained()"),pvt.forEach(t),rCr=r(MK," class method or the "),JH=n(MK,"A",{href:!0});var uvt=s(JH);tCr=r(uvt,"from_config()"),uvt.forEach(t),aCr=r(MK,` class
method.`),MK.forEach(t),nCr=i(Rl),u8=n(Rl,"P",{});var yqe=s(u8);sCr=r(yqe,"This class cannot be instantiated directly using "),G5e=n(yqe,"CODE",{});var _vt=s(G5e);lCr=r(_vt,"__init__()"),_vt.forEach(t),iCr=r(yqe," (throws an error)."),yqe.forEach(t),dCr=i(Rl),qt=n(Rl,"DIV",{class:!0});var zw=s(qt);T(_8.$$.fragment,zw),cCr=i(zw),O5e=n(zw,"P",{});var bvt=s(O5e);fCr=r(bvt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),bvt.forEach(t),mCr=i(zw),Tc=n(zw,"P",{});var EK=s(Tc);gCr=r(EK,`Note:
Loading a model from its configuration file does `),V5e=n(EK,"STRONG",{});var vvt=s(V5e);hCr=r(vvt,"not"),vvt.forEach(t),pCr=r(EK,` load the model weights. It only affects the
model\u2019s configuration. Use `),YH=n(EK,"A",{href:!0});var Fvt=s(YH);uCr=r(Fvt,"from_pretrained()"),Fvt.forEach(t),_Cr=r(EK," to load the model weights."),EK.forEach(t),bCr=i(zw),T(H4.$$.fragment,zw),zw.forEach(t),vCr=i(Rl),Nr=n(Rl,"DIV",{class:!0});var Bl=s(Nr);T(b8.$$.fragment,Bl),FCr=i(Bl),X5e=n(Bl,"P",{});var Tvt=s(X5e);TCr=r(Tvt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Tvt.forEach(t),MCr=i(Bl),cn=n(Bl,"P",{});var Qw=s(cn);ECr=r(Qw,"The model class to instantiate is selected based on the "),z5e=n(Qw,"CODE",{});var Mvt=s(z5e);CCr=r(Mvt,"model_type"),Mvt.forEach(t),wCr=r(Qw,` property of the config object (either
passed as an argument or loaded from `),Q5e=n(Qw,"CODE",{});var Evt=s(Q5e);ACr=r(Evt,"pretrained_model_name_or_path"),Evt.forEach(t),yCr=r(Qw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),W5e=n(Qw,"CODE",{});var Cvt=s(W5e);LCr=r(Cvt,"pretrained_model_name_or_path"),Cvt.forEach(t),xCr=r(Qw,":"),Qw.forEach(t),$Cr=i(Bl),ke=n(Bl,"UL",{});var Oe=s(ke);U4=n(Oe,"LI",{});var _Se=s(U4);H5e=n(_Se,"STRONG",{});var wvt=s(H5e);kCr=r(wvt,"bart"),wvt.forEach(t),SCr=r(_Se," \u2014 "),KH=n(_Se,"A",{href:!0});var Avt=s(KH);RCr=r(Avt,"FlaxBartForCausalLM"),Avt.forEach(t),BCr=r(_Se," (BART model)"),_Se.forEach(t),PCr=i(Oe),J4=n(Oe,"LI",{});var bSe=s(J4);U5e=n(bSe,"STRONG",{});var yvt=s(U5e);ICr=r(yvt,"bert"),yvt.forEach(t),qCr=r(bSe," \u2014 "),ZH=n(bSe,"A",{href:!0});var Lvt=s(ZH);NCr=r(Lvt,"FlaxBertForCausalLM"),Lvt.forEach(t),jCr=r(bSe," (BERT model)"),bSe.forEach(t),DCr=i(Oe),Y4=n(Oe,"LI",{});var vSe=s(Y4);J5e=n(vSe,"STRONG",{});var xvt=s(J5e);GCr=r(xvt,"big_bird"),xvt.forEach(t),OCr=r(vSe," \u2014 "),eU=n(vSe,"A",{href:!0});var $vt=s(eU);VCr=r($vt,"FlaxBigBirdForCausalLM"),$vt.forEach(t),XCr=r(vSe," (BigBird model)"),vSe.forEach(t),zCr=i(Oe),K4=n(Oe,"LI",{});var FSe=s(K4);Y5e=n(FSe,"STRONG",{});var kvt=s(Y5e);QCr=r(kvt,"electra"),kvt.forEach(t),WCr=r(FSe," \u2014 "),oU=n(FSe,"A",{href:!0});var Svt=s(oU);HCr=r(Svt,"FlaxElectraForCausalLM"),Svt.forEach(t),UCr=r(FSe," (ELECTRA model)"),FSe.forEach(t),JCr=i(Oe),Z4=n(Oe,"LI",{});var TSe=s(Z4);K5e=n(TSe,"STRONG",{});var Rvt=s(K5e);YCr=r(Rvt,"gpt2"),Rvt.forEach(t),KCr=r(TSe," \u2014 "),rU=n(TSe,"A",{href:!0});var Bvt=s(rU);ZCr=r(Bvt,"FlaxGPT2LMHeadModel"),Bvt.forEach(t),e3r=r(TSe," (OpenAI GPT-2 model)"),TSe.forEach(t),o3r=i(Oe),eE=n(Oe,"LI",{});var MSe=s(eE);Z5e=n(MSe,"STRONG",{});var Pvt=s(Z5e);r3r=r(Pvt,"gpt_neo"),Pvt.forEach(t),t3r=r(MSe," \u2014 "),tU=n(MSe,"A",{href:!0});var Ivt=s(tU);a3r=r(Ivt,"FlaxGPTNeoForCausalLM"),Ivt.forEach(t),n3r=r(MSe," (GPT Neo model)"),MSe.forEach(t),s3r=i(Oe),oE=n(Oe,"LI",{});var ESe=s(oE);eve=n(ESe,"STRONG",{});var qvt=s(eve);l3r=r(qvt,"gptj"),qvt.forEach(t),i3r=r(ESe," \u2014 "),aU=n(ESe,"A",{href:!0});var Nvt=s(aU);d3r=r(Nvt,"FlaxGPTJForCausalLM"),Nvt.forEach(t),c3r=r(ESe," (GPT-J model)"),ESe.forEach(t),f3r=i(Oe),rE=n(Oe,"LI",{});var CSe=s(rE);ove=n(CSe,"STRONG",{});var jvt=s(ove);m3r=r(jvt,"roberta"),jvt.forEach(t),g3r=r(CSe," \u2014 "),nU=n(CSe,"A",{href:!0});var Dvt=s(nU);h3r=r(Dvt,"FlaxRobertaForCausalLM"),Dvt.forEach(t),p3r=r(CSe," (RoBERTa model)"),CSe.forEach(t),u3r=i(Oe),tE=n(Oe,"LI",{});var wSe=s(tE);rve=n(wSe,"STRONG",{});var Gvt=s(rve);_3r=r(Gvt,"xglm"),Gvt.forEach(t),b3r=r(wSe," \u2014 "),sU=n(wSe,"A",{href:!0});var Ovt=s(sU);v3r=r(Ovt,"FlaxXGLMForCausalLM"),Ovt.forEach(t),F3r=r(wSe," (XGLM model)"),wSe.forEach(t),Oe.forEach(t),T3r=i(Bl),T(aE.$$.fragment,Bl),Bl.forEach(t),Rl.forEach(t),CPe=i(f),Mc=n(f,"H2",{class:!0});var Lqe=s(Mc);nE=n(Lqe,"A",{id:!0,class:!0,href:!0});var Vvt=s(nE);tve=n(Vvt,"SPAN",{});var Xvt=s(tve);T(v8.$$.fragment,Xvt),Xvt.forEach(t),Vvt.forEach(t),M3r=i(Lqe),ave=n(Lqe,"SPAN",{});var zvt=s(ave);E3r=r(zvt,"FlaxAutoModelForPreTraining"),zvt.forEach(t),Lqe.forEach(t),wPe=i(f),mr=n(f,"DIV",{class:!0});var Pl=s(mr);T(F8.$$.fragment,Pl),C3r=i(Pl),Ec=n(Pl,"P",{});var CK=s(Ec);w3r=r(CK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),lU=n(CK,"A",{href:!0});var Qvt=s(lU);A3r=r(Qvt,"from_pretrained()"),Qvt.forEach(t),y3r=r(CK," class method or the "),iU=n(CK,"A",{href:!0});var Wvt=s(iU);L3r=r(Wvt,"from_config()"),Wvt.forEach(t),x3r=r(CK,` class
method.`),CK.forEach(t),$3r=i(Pl),T8=n(Pl,"P",{});var xqe=s(T8);k3r=r(xqe,"This class cannot be instantiated directly using "),nve=n(xqe,"CODE",{});var Hvt=s(nve);S3r=r(Hvt,"__init__()"),Hvt.forEach(t),R3r=r(xqe," (throws an error)."),xqe.forEach(t),B3r=i(Pl),Nt=n(Pl,"DIV",{class:!0});var Ww=s(Nt);T(M8.$$.fragment,Ww),P3r=i(Ww),sve=n(Ww,"P",{});var Uvt=s(sve);I3r=r(Uvt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Uvt.forEach(t),q3r=i(Ww),Cc=n(Ww,"P",{});var wK=s(Cc);N3r=r(wK,`Note:
Loading a model from its configuration file does `),lve=n(wK,"STRONG",{});var Jvt=s(lve);j3r=r(Jvt,"not"),Jvt.forEach(t),D3r=r(wK,` load the model weights. It only affects the
model\u2019s configuration. Use `),dU=n(wK,"A",{href:!0});var Yvt=s(dU);G3r=r(Yvt,"from_pretrained()"),Yvt.forEach(t),O3r=r(wK," to load the model weights."),wK.forEach(t),V3r=i(Ww),T(sE.$$.fragment,Ww),Ww.forEach(t),X3r=i(Pl),jr=n(Pl,"DIV",{class:!0});var Il=s(jr);T(E8.$$.fragment,Il),z3r=i(Il),ive=n(Il,"P",{});var Kvt=s(ive);Q3r=r(Kvt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Kvt.forEach(t),W3r=i(Il),fn=n(Il,"P",{});var Hw=s(fn);H3r=r(Hw,"The model class to instantiate is selected based on the "),dve=n(Hw,"CODE",{});var Zvt=s(dve);U3r=r(Zvt,"model_type"),Zvt.forEach(t),J3r=r(Hw,` property of the config object (either
passed as an argument or loaded from `),cve=n(Hw,"CODE",{});var eFt=s(cve);Y3r=r(eFt,"pretrained_model_name_or_path"),eFt.forEach(t),K3r=r(Hw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fve=n(Hw,"CODE",{});var oFt=s(fve);Z3r=r(oFt,"pretrained_model_name_or_path"),oFt.forEach(t),ewr=r(Hw,":"),Hw.forEach(t),owr=i(Il),Me=n(Il,"UL",{});var we=s(Me);lE=n(we,"LI",{});var ASe=s(lE);mve=n(ASe,"STRONG",{});var rFt=s(mve);rwr=r(rFt,"albert"),rFt.forEach(t),twr=r(ASe," \u2014 "),cU=n(ASe,"A",{href:!0});var tFt=s(cU);awr=r(tFt,"FlaxAlbertForPreTraining"),tFt.forEach(t),nwr=r(ASe," (ALBERT model)"),ASe.forEach(t),swr=i(we),iE=n(we,"LI",{});var ySe=s(iE);gve=n(ySe,"STRONG",{});var aFt=s(gve);lwr=r(aFt,"bart"),aFt.forEach(t),iwr=r(ySe," \u2014 "),fU=n(ySe,"A",{href:!0});var nFt=s(fU);dwr=r(nFt,"FlaxBartForConditionalGeneration"),nFt.forEach(t),cwr=r(ySe," (BART model)"),ySe.forEach(t),fwr=i(we),dE=n(we,"LI",{});var LSe=s(dE);hve=n(LSe,"STRONG",{});var sFt=s(hve);mwr=r(sFt,"bert"),sFt.forEach(t),gwr=r(LSe," \u2014 "),mU=n(LSe,"A",{href:!0});var lFt=s(mU);hwr=r(lFt,"FlaxBertForPreTraining"),lFt.forEach(t),pwr=r(LSe," (BERT model)"),LSe.forEach(t),uwr=i(we),cE=n(we,"LI",{});var xSe=s(cE);pve=n(xSe,"STRONG",{});var iFt=s(pve);_wr=r(iFt,"big_bird"),iFt.forEach(t),bwr=r(xSe," \u2014 "),gU=n(xSe,"A",{href:!0});var dFt=s(gU);vwr=r(dFt,"FlaxBigBirdForPreTraining"),dFt.forEach(t),Fwr=r(xSe," (BigBird model)"),xSe.forEach(t),Twr=i(we),fE=n(we,"LI",{});var $Se=s(fE);uve=n($Se,"STRONG",{});var cFt=s(uve);Mwr=r(cFt,"electra"),cFt.forEach(t),Ewr=r($Se," \u2014 "),hU=n($Se,"A",{href:!0});var fFt=s(hU);Cwr=r(fFt,"FlaxElectraForPreTraining"),fFt.forEach(t),wwr=r($Se," (ELECTRA model)"),$Se.forEach(t),Awr=i(we),mE=n(we,"LI",{});var kSe=s(mE);_ve=n(kSe,"STRONG",{});var mFt=s(_ve);ywr=r(mFt,"mbart"),mFt.forEach(t),Lwr=r(kSe," \u2014 "),pU=n(kSe,"A",{href:!0});var gFt=s(pU);xwr=r(gFt,"FlaxMBartForConditionalGeneration"),gFt.forEach(t),$wr=r(kSe," (mBART model)"),kSe.forEach(t),kwr=i(we),gE=n(we,"LI",{});var SSe=s(gE);bve=n(SSe,"STRONG",{});var hFt=s(bve);Swr=r(hFt,"mt5"),hFt.forEach(t),Rwr=r(SSe," \u2014 "),uU=n(SSe,"A",{href:!0});var pFt=s(uU);Bwr=r(pFt,"FlaxMT5ForConditionalGeneration"),pFt.forEach(t),Pwr=r(SSe," (mT5 model)"),SSe.forEach(t),Iwr=i(we),hE=n(we,"LI",{});var RSe=s(hE);vve=n(RSe,"STRONG",{});var uFt=s(vve);qwr=r(uFt,"roberta"),uFt.forEach(t),Nwr=r(RSe," \u2014 "),_U=n(RSe,"A",{href:!0});var _Ft=s(_U);jwr=r(_Ft,"FlaxRobertaForMaskedLM"),_Ft.forEach(t),Dwr=r(RSe," (RoBERTa model)"),RSe.forEach(t),Gwr=i(we),pE=n(we,"LI",{});var BSe=s(pE);Fve=n(BSe,"STRONG",{});var bFt=s(Fve);Owr=r(bFt,"roformer"),bFt.forEach(t),Vwr=r(BSe," \u2014 "),bU=n(BSe,"A",{href:!0});var vFt=s(bU);Xwr=r(vFt,"FlaxRoFormerForMaskedLM"),vFt.forEach(t),zwr=r(BSe," (RoFormer model)"),BSe.forEach(t),Qwr=i(we),uE=n(we,"LI",{});var PSe=s(uE);Tve=n(PSe,"STRONG",{});var FFt=s(Tve);Wwr=r(FFt,"t5"),FFt.forEach(t),Hwr=r(PSe," \u2014 "),vU=n(PSe,"A",{href:!0});var TFt=s(vU);Uwr=r(TFt,"FlaxT5ForConditionalGeneration"),TFt.forEach(t),Jwr=r(PSe," (T5 model)"),PSe.forEach(t),Ywr=i(we),_E=n(we,"LI",{});var ISe=s(_E);Mve=n(ISe,"STRONG",{});var MFt=s(Mve);Kwr=r(MFt,"wav2vec2"),MFt.forEach(t),Zwr=r(ISe," \u2014 "),FU=n(ISe,"A",{href:!0});var EFt=s(FU);eAr=r(EFt,"FlaxWav2Vec2ForPreTraining"),EFt.forEach(t),oAr=r(ISe," (Wav2Vec2 model)"),ISe.forEach(t),rAr=i(we),bE=n(we,"LI",{});var qSe=s(bE);Eve=n(qSe,"STRONG",{});var CFt=s(Eve);tAr=r(CFt,"xlm-roberta"),CFt.forEach(t),aAr=r(qSe," \u2014 "),TU=n(qSe,"A",{href:!0});var wFt=s(TU);nAr=r(wFt,"FlaxXLMRobertaForMaskedLM"),wFt.forEach(t),sAr=r(qSe," (XLM-RoBERTa model)"),qSe.forEach(t),we.forEach(t),lAr=i(Il),T(vE.$$.fragment,Il),Il.forEach(t),Pl.forEach(t),APe=i(f),wc=n(f,"H2",{class:!0});var $qe=s(wc);FE=n($qe,"A",{id:!0,class:!0,href:!0});var AFt=s(FE);Cve=n(AFt,"SPAN",{});var yFt=s(Cve);T(C8.$$.fragment,yFt),yFt.forEach(t),AFt.forEach(t),iAr=i($qe),wve=n($qe,"SPAN",{});var LFt=s(wve);dAr=r(LFt,"FlaxAutoModelForMaskedLM"),LFt.forEach(t),$qe.forEach(t),yPe=i(f),gr=n(f,"DIV",{class:!0});var ql=s(gr);T(w8.$$.fragment,ql),cAr=i(ql),Ac=n(ql,"P",{});var AK=s(Ac);fAr=r(AK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),MU=n(AK,"A",{href:!0});var xFt=s(MU);mAr=r(xFt,"from_pretrained()"),xFt.forEach(t),gAr=r(AK," class method or the "),EU=n(AK,"A",{href:!0});var $Ft=s(EU);hAr=r($Ft,"from_config()"),$Ft.forEach(t),pAr=r(AK,` class
method.`),AK.forEach(t),uAr=i(ql),A8=n(ql,"P",{});var kqe=s(A8);_Ar=r(kqe,"This class cannot be instantiated directly using "),Ave=n(kqe,"CODE",{});var kFt=s(Ave);bAr=r(kFt,"__init__()"),kFt.forEach(t),vAr=r(kqe," (throws an error)."),kqe.forEach(t),FAr=i(ql),jt=n(ql,"DIV",{class:!0});var Uw=s(jt);T(y8.$$.fragment,Uw),TAr=i(Uw),yve=n(Uw,"P",{});var SFt=s(yve);MAr=r(SFt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),SFt.forEach(t),EAr=i(Uw),yc=n(Uw,"P",{});var yK=s(yc);CAr=r(yK,`Note:
Loading a model from its configuration file does `),Lve=n(yK,"STRONG",{});var RFt=s(Lve);wAr=r(RFt,"not"),RFt.forEach(t),AAr=r(yK,` load the model weights. It only affects the
model\u2019s configuration. Use `),CU=n(yK,"A",{href:!0});var BFt=s(CU);yAr=r(BFt,"from_pretrained()"),BFt.forEach(t),LAr=r(yK," to load the model weights."),yK.forEach(t),xAr=i(Uw),T(TE.$$.fragment,Uw),Uw.forEach(t),$Ar=i(ql),Dr=n(ql,"DIV",{class:!0});var Nl=s(Dr);T(L8.$$.fragment,Nl),kAr=i(Nl),xve=n(Nl,"P",{});var PFt=s(xve);SAr=r(PFt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),PFt.forEach(t),RAr=i(Nl),mn=n(Nl,"P",{});var Jw=s(mn);BAr=r(Jw,"The model class to instantiate is selected based on the "),$ve=n(Jw,"CODE",{});var IFt=s($ve);PAr=r(IFt,"model_type"),IFt.forEach(t),IAr=r(Jw,` property of the config object (either
passed as an argument or loaded from `),kve=n(Jw,"CODE",{});var qFt=s(kve);qAr=r(qFt,"pretrained_model_name_or_path"),qFt.forEach(t),NAr=r(Jw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Sve=n(Jw,"CODE",{});var NFt=s(Sve);jAr=r(NFt,"pretrained_model_name_or_path"),NFt.forEach(t),DAr=r(Jw,":"),Jw.forEach(t),GAr=i(Nl),Le=n(Nl,"UL",{});var Be=s(Le);ME=n(Be,"LI",{});var NSe=s(ME);Rve=n(NSe,"STRONG",{});var jFt=s(Rve);OAr=r(jFt,"albert"),jFt.forEach(t),VAr=r(NSe," \u2014 "),wU=n(NSe,"A",{href:!0});var DFt=s(wU);XAr=r(DFt,"FlaxAlbertForMaskedLM"),DFt.forEach(t),zAr=r(NSe," (ALBERT model)"),NSe.forEach(t),QAr=i(Be),EE=n(Be,"LI",{});var jSe=s(EE);Bve=n(jSe,"STRONG",{});var GFt=s(Bve);WAr=r(GFt,"bart"),GFt.forEach(t),HAr=r(jSe," \u2014 "),AU=n(jSe,"A",{href:!0});var OFt=s(AU);UAr=r(OFt,"FlaxBartForConditionalGeneration"),OFt.forEach(t),JAr=r(jSe," (BART model)"),jSe.forEach(t),YAr=i(Be),CE=n(Be,"LI",{});var DSe=s(CE);Pve=n(DSe,"STRONG",{});var VFt=s(Pve);KAr=r(VFt,"bert"),VFt.forEach(t),ZAr=r(DSe," \u2014 "),yU=n(DSe,"A",{href:!0});var XFt=s(yU);e0r=r(XFt,"FlaxBertForMaskedLM"),XFt.forEach(t),o0r=r(DSe," (BERT model)"),DSe.forEach(t),r0r=i(Be),wE=n(Be,"LI",{});var GSe=s(wE);Ive=n(GSe,"STRONG",{});var zFt=s(Ive);t0r=r(zFt,"big_bird"),zFt.forEach(t),a0r=r(GSe," \u2014 "),LU=n(GSe,"A",{href:!0});var QFt=s(LU);n0r=r(QFt,"FlaxBigBirdForMaskedLM"),QFt.forEach(t),s0r=r(GSe," (BigBird model)"),GSe.forEach(t),l0r=i(Be),AE=n(Be,"LI",{});var OSe=s(AE);qve=n(OSe,"STRONG",{});var WFt=s(qve);i0r=r(WFt,"distilbert"),WFt.forEach(t),d0r=r(OSe," \u2014 "),xU=n(OSe,"A",{href:!0});var HFt=s(xU);c0r=r(HFt,"FlaxDistilBertForMaskedLM"),HFt.forEach(t),f0r=r(OSe," (DistilBERT model)"),OSe.forEach(t),m0r=i(Be),yE=n(Be,"LI",{});var VSe=s(yE);Nve=n(VSe,"STRONG",{});var UFt=s(Nve);g0r=r(UFt,"electra"),UFt.forEach(t),h0r=r(VSe," \u2014 "),$U=n(VSe,"A",{href:!0});var JFt=s($U);p0r=r(JFt,"FlaxElectraForMaskedLM"),JFt.forEach(t),u0r=r(VSe," (ELECTRA model)"),VSe.forEach(t),_0r=i(Be),LE=n(Be,"LI",{});var XSe=s(LE);jve=n(XSe,"STRONG",{});var YFt=s(jve);b0r=r(YFt,"mbart"),YFt.forEach(t),v0r=r(XSe," \u2014 "),kU=n(XSe,"A",{href:!0});var KFt=s(kU);F0r=r(KFt,"FlaxMBartForConditionalGeneration"),KFt.forEach(t),T0r=r(XSe," (mBART model)"),XSe.forEach(t),M0r=i(Be),xE=n(Be,"LI",{});var zSe=s(xE);Dve=n(zSe,"STRONG",{});var ZFt=s(Dve);E0r=r(ZFt,"roberta"),ZFt.forEach(t),C0r=r(zSe," \u2014 "),SU=n(zSe,"A",{href:!0});var e6t=s(SU);w0r=r(e6t,"FlaxRobertaForMaskedLM"),e6t.forEach(t),A0r=r(zSe," (RoBERTa model)"),zSe.forEach(t),y0r=i(Be),$E=n(Be,"LI",{});var QSe=s($E);Gve=n(QSe,"STRONG",{});var o6t=s(Gve);L0r=r(o6t,"roformer"),o6t.forEach(t),x0r=r(QSe," \u2014 "),RU=n(QSe,"A",{href:!0});var r6t=s(RU);$0r=r(r6t,"FlaxRoFormerForMaskedLM"),r6t.forEach(t),k0r=r(QSe," (RoFormer model)"),QSe.forEach(t),S0r=i(Be),kE=n(Be,"LI",{});var WSe=s(kE);Ove=n(WSe,"STRONG",{});var t6t=s(Ove);R0r=r(t6t,"xlm-roberta"),t6t.forEach(t),B0r=r(WSe," \u2014 "),BU=n(WSe,"A",{href:!0});var a6t=s(BU);P0r=r(a6t,"FlaxXLMRobertaForMaskedLM"),a6t.forEach(t),I0r=r(WSe," (XLM-RoBERTa model)"),WSe.forEach(t),Be.forEach(t),q0r=i(Nl),T(SE.$$.fragment,Nl),Nl.forEach(t),ql.forEach(t),LPe=i(f),Lc=n(f,"H2",{class:!0});var Sqe=s(Lc);RE=n(Sqe,"A",{id:!0,class:!0,href:!0});var n6t=s(RE);Vve=n(n6t,"SPAN",{});var s6t=s(Vve);T(x8.$$.fragment,s6t),s6t.forEach(t),n6t.forEach(t),N0r=i(Sqe),Xve=n(Sqe,"SPAN",{});var l6t=s(Xve);j0r=r(l6t,"FlaxAutoModelForSeq2SeqLM"),l6t.forEach(t),Sqe.forEach(t),xPe=i(f),hr=n(f,"DIV",{class:!0});var jl=s(hr);T($8.$$.fragment,jl),D0r=i(jl),xc=n(jl,"P",{});var LK=s(xc);G0r=r(LK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),PU=n(LK,"A",{href:!0});var i6t=s(PU);O0r=r(i6t,"from_pretrained()"),i6t.forEach(t),V0r=r(LK," class method or the "),IU=n(LK,"A",{href:!0});var d6t=s(IU);X0r=r(d6t,"from_config()"),d6t.forEach(t),z0r=r(LK,` class
method.`),LK.forEach(t),Q0r=i(jl),k8=n(jl,"P",{});var Rqe=s(k8);W0r=r(Rqe,"This class cannot be instantiated directly using "),zve=n(Rqe,"CODE",{});var c6t=s(zve);H0r=r(c6t,"__init__()"),c6t.forEach(t),U0r=r(Rqe," (throws an error)."),Rqe.forEach(t),J0r=i(jl),Dt=n(jl,"DIV",{class:!0});var Yw=s(Dt);T(S8.$$.fragment,Yw),Y0r=i(Yw),Qve=n(Yw,"P",{});var f6t=s(Qve);K0r=r(f6t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),f6t.forEach(t),Z0r=i(Yw),$c=n(Yw,"P",{});var xK=s($c);eyr=r(xK,`Note:
Loading a model from its configuration file does `),Wve=n(xK,"STRONG",{});var m6t=s(Wve);oyr=r(m6t,"not"),m6t.forEach(t),ryr=r(xK,` load the model weights. It only affects the
model\u2019s configuration. Use `),qU=n(xK,"A",{href:!0});var g6t=s(qU);tyr=r(g6t,"from_pretrained()"),g6t.forEach(t),ayr=r(xK," to load the model weights."),xK.forEach(t),nyr=i(Yw),T(BE.$$.fragment,Yw),Yw.forEach(t),syr=i(jl),Gr=n(jl,"DIV",{class:!0});var Dl=s(Gr);T(R8.$$.fragment,Dl),lyr=i(Dl),Hve=n(Dl,"P",{});var h6t=s(Hve);iyr=r(h6t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),h6t.forEach(t),dyr=i(Dl),gn=n(Dl,"P",{});var Kw=s(gn);cyr=r(Kw,"The model class to instantiate is selected based on the "),Uve=n(Kw,"CODE",{});var p6t=s(Uve);fyr=r(p6t,"model_type"),p6t.forEach(t),myr=r(Kw,` property of the config object (either
passed as an argument or loaded from `),Jve=n(Kw,"CODE",{});var u6t=s(Jve);gyr=r(u6t,"pretrained_model_name_or_path"),u6t.forEach(t),hyr=r(Kw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yve=n(Kw,"CODE",{});var _6t=s(Yve);pyr=r(_6t,"pretrained_model_name_or_path"),_6t.forEach(t),uyr=r(Kw,":"),Kw.forEach(t),_yr=i(Dl),Se=n(Dl,"UL",{});var Ve=s(Se);PE=n(Ve,"LI",{});var HSe=s(PE);Kve=n(HSe,"STRONG",{});var b6t=s(Kve);byr=r(b6t,"bart"),b6t.forEach(t),vyr=r(HSe," \u2014 "),NU=n(HSe,"A",{href:!0});var v6t=s(NU);Fyr=r(v6t,"FlaxBartForConditionalGeneration"),v6t.forEach(t),Tyr=r(HSe," (BART model)"),HSe.forEach(t),Myr=i(Ve),IE=n(Ve,"LI",{});var USe=s(IE);Zve=n(USe,"STRONG",{});var F6t=s(Zve);Eyr=r(F6t,"blenderbot"),F6t.forEach(t),Cyr=r(USe," \u2014 "),jU=n(USe,"A",{href:!0});var T6t=s(jU);wyr=r(T6t,"FlaxBlenderbotForConditionalGeneration"),T6t.forEach(t),Ayr=r(USe," (Blenderbot model)"),USe.forEach(t),yyr=i(Ve),qE=n(Ve,"LI",{});var JSe=s(qE);eFe=n(JSe,"STRONG",{});var M6t=s(eFe);Lyr=r(M6t,"blenderbot-small"),M6t.forEach(t),xyr=r(JSe," \u2014 "),DU=n(JSe,"A",{href:!0});var E6t=s(DU);$yr=r(E6t,"FlaxBlenderbotSmallForConditionalGeneration"),E6t.forEach(t),kyr=r(JSe," (BlenderbotSmall model)"),JSe.forEach(t),Syr=i(Ve),NE=n(Ve,"LI",{});var YSe=s(NE);oFe=n(YSe,"STRONG",{});var C6t=s(oFe);Ryr=r(C6t,"encoder-decoder"),C6t.forEach(t),Byr=r(YSe," \u2014 "),GU=n(YSe,"A",{href:!0});var w6t=s(GU);Pyr=r(w6t,"FlaxEncoderDecoderModel"),w6t.forEach(t),Iyr=r(YSe," (Encoder decoder model)"),YSe.forEach(t),qyr=i(Ve),jE=n(Ve,"LI",{});var KSe=s(jE);rFe=n(KSe,"STRONG",{});var A6t=s(rFe);Nyr=r(A6t,"marian"),A6t.forEach(t),jyr=r(KSe," \u2014 "),OU=n(KSe,"A",{href:!0});var y6t=s(OU);Dyr=r(y6t,"FlaxMarianMTModel"),y6t.forEach(t),Gyr=r(KSe," (Marian model)"),KSe.forEach(t),Oyr=i(Ve),DE=n(Ve,"LI",{});var ZSe=s(DE);tFe=n(ZSe,"STRONG",{});var L6t=s(tFe);Vyr=r(L6t,"mbart"),L6t.forEach(t),Xyr=r(ZSe," \u2014 "),VU=n(ZSe,"A",{href:!0});var x6t=s(VU);zyr=r(x6t,"FlaxMBartForConditionalGeneration"),x6t.forEach(t),Qyr=r(ZSe," (mBART model)"),ZSe.forEach(t),Wyr=i(Ve),GE=n(Ve,"LI",{});var eRe=s(GE);aFe=n(eRe,"STRONG",{});var $6t=s(aFe);Hyr=r($6t,"mt5"),$6t.forEach(t),Uyr=r(eRe," \u2014 "),XU=n(eRe,"A",{href:!0});var k6t=s(XU);Jyr=r(k6t,"FlaxMT5ForConditionalGeneration"),k6t.forEach(t),Yyr=r(eRe," (mT5 model)"),eRe.forEach(t),Kyr=i(Ve),OE=n(Ve,"LI",{});var oRe=s(OE);nFe=n(oRe,"STRONG",{});var S6t=s(nFe);Zyr=r(S6t,"pegasus"),S6t.forEach(t),eLr=r(oRe," \u2014 "),zU=n(oRe,"A",{href:!0});var R6t=s(zU);oLr=r(R6t,"FlaxPegasusForConditionalGeneration"),R6t.forEach(t),rLr=r(oRe," (Pegasus model)"),oRe.forEach(t),tLr=i(Ve),VE=n(Ve,"LI",{});var rRe=s(VE);sFe=n(rRe,"STRONG",{});var B6t=s(sFe);aLr=r(B6t,"t5"),B6t.forEach(t),nLr=r(rRe," \u2014 "),QU=n(rRe,"A",{href:!0});var P6t=s(QU);sLr=r(P6t,"FlaxT5ForConditionalGeneration"),P6t.forEach(t),lLr=r(rRe," (T5 model)"),rRe.forEach(t),Ve.forEach(t),iLr=i(Dl),T(XE.$$.fragment,Dl),Dl.forEach(t),jl.forEach(t),$Pe=i(f),kc=n(f,"H2",{class:!0});var Bqe=s(kc);zE=n(Bqe,"A",{id:!0,class:!0,href:!0});var I6t=s(zE);lFe=n(I6t,"SPAN",{});var q6t=s(lFe);T(B8.$$.fragment,q6t),q6t.forEach(t),I6t.forEach(t),dLr=i(Bqe),iFe=n(Bqe,"SPAN",{});var N6t=s(iFe);cLr=r(N6t,"FlaxAutoModelForSequenceClassification"),N6t.forEach(t),Bqe.forEach(t),kPe=i(f),pr=n(f,"DIV",{class:!0});var Gl=s(pr);T(P8.$$.fragment,Gl),fLr=i(Gl),Sc=n(Gl,"P",{});var $K=s(Sc);mLr=r($K,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),WU=n($K,"A",{href:!0});var j6t=s(WU);gLr=r(j6t,"from_pretrained()"),j6t.forEach(t),hLr=r($K," class method or the "),HU=n($K,"A",{href:!0});var D6t=s(HU);pLr=r(D6t,"from_config()"),D6t.forEach(t),uLr=r($K,` class
method.`),$K.forEach(t),_Lr=i(Gl),I8=n(Gl,"P",{});var Pqe=s(I8);bLr=r(Pqe,"This class cannot be instantiated directly using "),dFe=n(Pqe,"CODE",{});var G6t=s(dFe);vLr=r(G6t,"__init__()"),G6t.forEach(t),FLr=r(Pqe," (throws an error)."),Pqe.forEach(t),TLr=i(Gl),Gt=n(Gl,"DIV",{class:!0});var Zw=s(Gt);T(q8.$$.fragment,Zw),MLr=i(Zw),cFe=n(Zw,"P",{});var O6t=s(cFe);ELr=r(O6t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),O6t.forEach(t),CLr=i(Zw),Rc=n(Zw,"P",{});var kK=s(Rc);wLr=r(kK,`Note:
Loading a model from its configuration file does `),fFe=n(kK,"STRONG",{});var V6t=s(fFe);ALr=r(V6t,"not"),V6t.forEach(t),yLr=r(kK,` load the model weights. It only affects the
model\u2019s configuration. Use `),UU=n(kK,"A",{href:!0});var X6t=s(UU);LLr=r(X6t,"from_pretrained()"),X6t.forEach(t),xLr=r(kK," to load the model weights."),kK.forEach(t),$Lr=i(Zw),T(QE.$$.fragment,Zw),Zw.forEach(t),kLr=i(Gl),Or=n(Gl,"DIV",{class:!0});var Ol=s(Or);T(N8.$$.fragment,Ol),SLr=i(Ol),mFe=n(Ol,"P",{});var z6t=s(mFe);RLr=r(z6t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),z6t.forEach(t),BLr=i(Ol),hn=n(Ol,"P",{});var eA=s(hn);PLr=r(eA,"The model class to instantiate is selected based on the "),gFe=n(eA,"CODE",{});var Q6t=s(gFe);ILr=r(Q6t,"model_type"),Q6t.forEach(t),qLr=r(eA,` property of the config object (either
passed as an argument or loaded from `),hFe=n(eA,"CODE",{});var W6t=s(hFe);NLr=r(W6t,"pretrained_model_name_or_path"),W6t.forEach(t),jLr=r(eA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pFe=n(eA,"CODE",{});var H6t=s(pFe);DLr=r(H6t,"pretrained_model_name_or_path"),H6t.forEach(t),GLr=r(eA,":"),eA.forEach(t),OLr=i(Ol),xe=n(Ol,"UL",{});var Pe=s(xe);WE=n(Pe,"LI",{});var tRe=s(WE);uFe=n(tRe,"STRONG",{});var U6t=s(uFe);VLr=r(U6t,"albert"),U6t.forEach(t),XLr=r(tRe," \u2014 "),JU=n(tRe,"A",{href:!0});var J6t=s(JU);zLr=r(J6t,"FlaxAlbertForSequenceClassification"),J6t.forEach(t),QLr=r(tRe," (ALBERT model)"),tRe.forEach(t),WLr=i(Pe),HE=n(Pe,"LI",{});var aRe=s(HE);_Fe=n(aRe,"STRONG",{});var Y6t=s(_Fe);HLr=r(Y6t,"bart"),Y6t.forEach(t),ULr=r(aRe," \u2014 "),YU=n(aRe,"A",{href:!0});var K6t=s(YU);JLr=r(K6t,"FlaxBartForSequenceClassification"),K6t.forEach(t),YLr=r(aRe," (BART model)"),aRe.forEach(t),KLr=i(Pe),UE=n(Pe,"LI",{});var nRe=s(UE);bFe=n(nRe,"STRONG",{});var Z6t=s(bFe);ZLr=r(Z6t,"bert"),Z6t.forEach(t),e8r=r(nRe," \u2014 "),KU=n(nRe,"A",{href:!0});var eTt=s(KU);o8r=r(eTt,"FlaxBertForSequenceClassification"),eTt.forEach(t),r8r=r(nRe," (BERT model)"),nRe.forEach(t),t8r=i(Pe),JE=n(Pe,"LI",{});var sRe=s(JE);vFe=n(sRe,"STRONG",{});var oTt=s(vFe);a8r=r(oTt,"big_bird"),oTt.forEach(t),n8r=r(sRe," \u2014 "),ZU=n(sRe,"A",{href:!0});var rTt=s(ZU);s8r=r(rTt,"FlaxBigBirdForSequenceClassification"),rTt.forEach(t),l8r=r(sRe," (BigBird model)"),sRe.forEach(t),i8r=i(Pe),YE=n(Pe,"LI",{});var lRe=s(YE);FFe=n(lRe,"STRONG",{});var tTt=s(FFe);d8r=r(tTt,"distilbert"),tTt.forEach(t),c8r=r(lRe," \u2014 "),eJ=n(lRe,"A",{href:!0});var aTt=s(eJ);f8r=r(aTt,"FlaxDistilBertForSequenceClassification"),aTt.forEach(t),m8r=r(lRe," (DistilBERT model)"),lRe.forEach(t),g8r=i(Pe),KE=n(Pe,"LI",{});var iRe=s(KE);TFe=n(iRe,"STRONG",{});var nTt=s(TFe);h8r=r(nTt,"electra"),nTt.forEach(t),p8r=r(iRe," \u2014 "),oJ=n(iRe,"A",{href:!0});var sTt=s(oJ);u8r=r(sTt,"FlaxElectraForSequenceClassification"),sTt.forEach(t),_8r=r(iRe," (ELECTRA model)"),iRe.forEach(t),b8r=i(Pe),ZE=n(Pe,"LI",{});var dRe=s(ZE);MFe=n(dRe,"STRONG",{});var lTt=s(MFe);v8r=r(lTt,"mbart"),lTt.forEach(t),F8r=r(dRe," \u2014 "),rJ=n(dRe,"A",{href:!0});var iTt=s(rJ);T8r=r(iTt,"FlaxMBartForSequenceClassification"),iTt.forEach(t),M8r=r(dRe," (mBART model)"),dRe.forEach(t),E8r=i(Pe),eC=n(Pe,"LI",{});var cRe=s(eC);EFe=n(cRe,"STRONG",{});var dTt=s(EFe);C8r=r(dTt,"roberta"),dTt.forEach(t),w8r=r(cRe," \u2014 "),tJ=n(cRe,"A",{href:!0});var cTt=s(tJ);A8r=r(cTt,"FlaxRobertaForSequenceClassification"),cTt.forEach(t),y8r=r(cRe," (RoBERTa model)"),cRe.forEach(t),L8r=i(Pe),oC=n(Pe,"LI",{});var fRe=s(oC);CFe=n(fRe,"STRONG",{});var fTt=s(CFe);x8r=r(fTt,"roformer"),fTt.forEach(t),$8r=r(fRe," \u2014 "),aJ=n(fRe,"A",{href:!0});var mTt=s(aJ);k8r=r(mTt,"FlaxRoFormerForSequenceClassification"),mTt.forEach(t),S8r=r(fRe," (RoFormer model)"),fRe.forEach(t),R8r=i(Pe),rC=n(Pe,"LI",{});var mRe=s(rC);wFe=n(mRe,"STRONG",{});var gTt=s(wFe);B8r=r(gTt,"xlm-roberta"),gTt.forEach(t),P8r=r(mRe," \u2014 "),nJ=n(mRe,"A",{href:!0});var hTt=s(nJ);I8r=r(hTt,"FlaxXLMRobertaForSequenceClassification"),hTt.forEach(t),q8r=r(mRe," (XLM-RoBERTa model)"),mRe.forEach(t),Pe.forEach(t),N8r=i(Ol),T(tC.$$.fragment,Ol),Ol.forEach(t),Gl.forEach(t),SPe=i(f),Bc=n(f,"H2",{class:!0});var Iqe=s(Bc);aC=n(Iqe,"A",{id:!0,class:!0,href:!0});var pTt=s(aC);AFe=n(pTt,"SPAN",{});var uTt=s(AFe);T(j8.$$.fragment,uTt),uTt.forEach(t),pTt.forEach(t),j8r=i(Iqe),yFe=n(Iqe,"SPAN",{});var _Tt=s(yFe);D8r=r(_Tt,"FlaxAutoModelForQuestionAnswering"),_Tt.forEach(t),Iqe.forEach(t),RPe=i(f),ur=n(f,"DIV",{class:!0});var Vl=s(ur);T(D8.$$.fragment,Vl),G8r=i(Vl),Pc=n(Vl,"P",{});var SK=s(Pc);O8r=r(SK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),sJ=n(SK,"A",{href:!0});var bTt=s(sJ);V8r=r(bTt,"from_pretrained()"),bTt.forEach(t),X8r=r(SK," class method or the "),lJ=n(SK,"A",{href:!0});var vTt=s(lJ);z8r=r(vTt,"from_config()"),vTt.forEach(t),Q8r=r(SK,` class
method.`),SK.forEach(t),W8r=i(Vl),G8=n(Vl,"P",{});var qqe=s(G8);H8r=r(qqe,"This class cannot be instantiated directly using "),LFe=n(qqe,"CODE",{});var FTt=s(LFe);U8r=r(FTt,"__init__()"),FTt.forEach(t),J8r=r(qqe," (throws an error)."),qqe.forEach(t),Y8r=i(Vl),Ot=n(Vl,"DIV",{class:!0});var oA=s(Ot);T(O8.$$.fragment,oA),K8r=i(oA),xFe=n(oA,"P",{});var TTt=s(xFe);Z8r=r(TTt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),TTt.forEach(t),exr=i(oA),Ic=n(oA,"P",{});var RK=s(Ic);oxr=r(RK,`Note:
Loading a model from its configuration file does `),$Fe=n(RK,"STRONG",{});var MTt=s($Fe);rxr=r(MTt,"not"),MTt.forEach(t),txr=r(RK,` load the model weights. It only affects the
model\u2019s configuration. Use `),iJ=n(RK,"A",{href:!0});var ETt=s(iJ);axr=r(ETt,"from_pretrained()"),ETt.forEach(t),nxr=r(RK," to load the model weights."),RK.forEach(t),sxr=i(oA),T(nC.$$.fragment,oA),oA.forEach(t),lxr=i(Vl),Vr=n(Vl,"DIV",{class:!0});var Xl=s(Vr);T(V8.$$.fragment,Xl),ixr=i(Xl),kFe=n(Xl,"P",{});var CTt=s(kFe);dxr=r(CTt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),CTt.forEach(t),cxr=i(Xl),pn=n(Xl,"P",{});var rA=s(pn);fxr=r(rA,"The model class to instantiate is selected based on the "),SFe=n(rA,"CODE",{});var wTt=s(SFe);mxr=r(wTt,"model_type"),wTt.forEach(t),gxr=r(rA,` property of the config object (either
passed as an argument or loaded from `),RFe=n(rA,"CODE",{});var ATt=s(RFe);hxr=r(ATt,"pretrained_model_name_or_path"),ATt.forEach(t),pxr=r(rA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),BFe=n(rA,"CODE",{});var yTt=s(BFe);uxr=r(yTt,"pretrained_model_name_or_path"),yTt.forEach(t),_xr=r(rA,":"),rA.forEach(t),bxr=i(Xl),$e=n(Xl,"UL",{});var Ie=s($e);sC=n(Ie,"LI",{});var gRe=s(sC);PFe=n(gRe,"STRONG",{});var LTt=s(PFe);vxr=r(LTt,"albert"),LTt.forEach(t),Fxr=r(gRe," \u2014 "),dJ=n(gRe,"A",{href:!0});var xTt=s(dJ);Txr=r(xTt,"FlaxAlbertForQuestionAnswering"),xTt.forEach(t),Mxr=r(gRe," (ALBERT model)"),gRe.forEach(t),Exr=i(Ie),lC=n(Ie,"LI",{});var hRe=s(lC);IFe=n(hRe,"STRONG",{});var $Tt=s(IFe);Cxr=r($Tt,"bart"),$Tt.forEach(t),wxr=r(hRe," \u2014 "),cJ=n(hRe,"A",{href:!0});var kTt=s(cJ);Axr=r(kTt,"FlaxBartForQuestionAnswering"),kTt.forEach(t),yxr=r(hRe," (BART model)"),hRe.forEach(t),Lxr=i(Ie),iC=n(Ie,"LI",{});var pRe=s(iC);qFe=n(pRe,"STRONG",{});var STt=s(qFe);xxr=r(STt,"bert"),STt.forEach(t),$xr=r(pRe," \u2014 "),fJ=n(pRe,"A",{href:!0});var RTt=s(fJ);kxr=r(RTt,"FlaxBertForQuestionAnswering"),RTt.forEach(t),Sxr=r(pRe," (BERT model)"),pRe.forEach(t),Rxr=i(Ie),dC=n(Ie,"LI",{});var uRe=s(dC);NFe=n(uRe,"STRONG",{});var BTt=s(NFe);Bxr=r(BTt,"big_bird"),BTt.forEach(t),Pxr=r(uRe," \u2014 "),mJ=n(uRe,"A",{href:!0});var PTt=s(mJ);Ixr=r(PTt,"FlaxBigBirdForQuestionAnswering"),PTt.forEach(t),qxr=r(uRe," (BigBird model)"),uRe.forEach(t),Nxr=i(Ie),cC=n(Ie,"LI",{});var _Re=s(cC);jFe=n(_Re,"STRONG",{});var ITt=s(jFe);jxr=r(ITt,"distilbert"),ITt.forEach(t),Dxr=r(_Re," \u2014 "),gJ=n(_Re,"A",{href:!0});var qTt=s(gJ);Gxr=r(qTt,"FlaxDistilBertForQuestionAnswering"),qTt.forEach(t),Oxr=r(_Re," (DistilBERT model)"),_Re.forEach(t),Vxr=i(Ie),fC=n(Ie,"LI",{});var bRe=s(fC);DFe=n(bRe,"STRONG",{});var NTt=s(DFe);Xxr=r(NTt,"electra"),NTt.forEach(t),zxr=r(bRe," \u2014 "),hJ=n(bRe,"A",{href:!0});var jTt=s(hJ);Qxr=r(jTt,"FlaxElectraForQuestionAnswering"),jTt.forEach(t),Wxr=r(bRe," (ELECTRA model)"),bRe.forEach(t),Hxr=i(Ie),mC=n(Ie,"LI",{});var vRe=s(mC);GFe=n(vRe,"STRONG",{});var DTt=s(GFe);Uxr=r(DTt,"mbart"),DTt.forEach(t),Jxr=r(vRe," \u2014 "),pJ=n(vRe,"A",{href:!0});var GTt=s(pJ);Yxr=r(GTt,"FlaxMBartForQuestionAnswering"),GTt.forEach(t),Kxr=r(vRe," (mBART model)"),vRe.forEach(t),Zxr=i(Ie),gC=n(Ie,"LI",{});var FRe=s(gC);OFe=n(FRe,"STRONG",{});var OTt=s(OFe);e7r=r(OTt,"roberta"),OTt.forEach(t),o7r=r(FRe," \u2014 "),uJ=n(FRe,"A",{href:!0});var VTt=s(uJ);r7r=r(VTt,"FlaxRobertaForQuestionAnswering"),VTt.forEach(t),t7r=r(FRe," (RoBERTa model)"),FRe.forEach(t),a7r=i(Ie),hC=n(Ie,"LI",{});var TRe=s(hC);VFe=n(TRe,"STRONG",{});var XTt=s(VFe);n7r=r(XTt,"roformer"),XTt.forEach(t),s7r=r(TRe," \u2014 "),_J=n(TRe,"A",{href:!0});var zTt=s(_J);l7r=r(zTt,"FlaxRoFormerForQuestionAnswering"),zTt.forEach(t),i7r=r(TRe," (RoFormer model)"),TRe.forEach(t),d7r=i(Ie),pC=n(Ie,"LI",{});var MRe=s(pC);XFe=n(MRe,"STRONG",{});var QTt=s(XFe);c7r=r(QTt,"xlm-roberta"),QTt.forEach(t),f7r=r(MRe," \u2014 "),bJ=n(MRe,"A",{href:!0});var WTt=s(bJ);m7r=r(WTt,"FlaxXLMRobertaForQuestionAnswering"),WTt.forEach(t),g7r=r(MRe," (XLM-RoBERTa model)"),MRe.forEach(t),Ie.forEach(t),h7r=i(Xl),T(uC.$$.fragment,Xl),Xl.forEach(t),Vl.forEach(t),BPe=i(f),qc=n(f,"H2",{class:!0});var Nqe=s(qc);_C=n(Nqe,"A",{id:!0,class:!0,href:!0});var HTt=s(_C);zFe=n(HTt,"SPAN",{});var UTt=s(zFe);T(X8.$$.fragment,UTt),UTt.forEach(t),HTt.forEach(t),p7r=i(Nqe),QFe=n(Nqe,"SPAN",{});var JTt=s(QFe);u7r=r(JTt,"FlaxAutoModelForTokenClassification"),JTt.forEach(t),Nqe.forEach(t),PPe=i(f),_r=n(f,"DIV",{class:!0});var zl=s(_r);T(z8.$$.fragment,zl),_7r=i(zl),Nc=n(zl,"P",{});var BK=s(Nc);b7r=r(BK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),vJ=n(BK,"A",{href:!0});var YTt=s(vJ);v7r=r(YTt,"from_pretrained()"),YTt.forEach(t),F7r=r(BK," class method or the "),FJ=n(BK,"A",{href:!0});var KTt=s(FJ);T7r=r(KTt,"from_config()"),KTt.forEach(t),M7r=r(BK,` class
method.`),BK.forEach(t),E7r=i(zl),Q8=n(zl,"P",{});var jqe=s(Q8);C7r=r(jqe,"This class cannot be instantiated directly using "),WFe=n(jqe,"CODE",{});var ZTt=s(WFe);w7r=r(ZTt,"__init__()"),ZTt.forEach(t),A7r=r(jqe," (throws an error)."),jqe.forEach(t),y7r=i(zl),Vt=n(zl,"DIV",{class:!0});var tA=s(Vt);T(W8.$$.fragment,tA),L7r=i(tA),HFe=n(tA,"P",{});var eMt=s(HFe);x7r=r(eMt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),eMt.forEach(t),$7r=i(tA),jc=n(tA,"P",{});var PK=s(jc);k7r=r(PK,`Note:
Loading a model from its configuration file does `),UFe=n(PK,"STRONG",{});var oMt=s(UFe);S7r=r(oMt,"not"),oMt.forEach(t),R7r=r(PK,` load the model weights. It only affects the
model\u2019s configuration. Use `),TJ=n(PK,"A",{href:!0});var rMt=s(TJ);B7r=r(rMt,"from_pretrained()"),rMt.forEach(t),P7r=r(PK," to load the model weights."),PK.forEach(t),I7r=i(tA),T(bC.$$.fragment,tA),tA.forEach(t),q7r=i(zl),Xr=n(zl,"DIV",{class:!0});var Ql=s(Xr);T(H8.$$.fragment,Ql),N7r=i(Ql),JFe=n(Ql,"P",{});var tMt=s(JFe);j7r=r(tMt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),tMt.forEach(t),D7r=i(Ql),un=n(Ql,"P",{});var aA=s(un);G7r=r(aA,"The model class to instantiate is selected based on the "),YFe=n(aA,"CODE",{});var aMt=s(YFe);O7r=r(aMt,"model_type"),aMt.forEach(t),V7r=r(aA,` property of the config object (either
passed as an argument or loaded from `),KFe=n(aA,"CODE",{});var nMt=s(KFe);X7r=r(nMt,"pretrained_model_name_or_path"),nMt.forEach(t),z7r=r(aA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ZFe=n(aA,"CODE",{});var sMt=s(ZFe);Q7r=r(sMt,"pretrained_model_name_or_path"),sMt.forEach(t),W7r=r(aA,":"),aA.forEach(t),H7r=i(Ql),De=n(Ql,"UL",{});var Fo=s(De);vC=n(Fo,"LI",{});var ERe=s(vC);e6e=n(ERe,"STRONG",{});var lMt=s(e6e);U7r=r(lMt,"albert"),lMt.forEach(t),J7r=r(ERe," \u2014 "),MJ=n(ERe,"A",{href:!0});var iMt=s(MJ);Y7r=r(iMt,"FlaxAlbertForTokenClassification"),iMt.forEach(t),K7r=r(ERe," (ALBERT model)"),ERe.forEach(t),Z7r=i(Fo),FC=n(Fo,"LI",{});var CRe=s(FC);o6e=n(CRe,"STRONG",{});var dMt=s(o6e);e$r=r(dMt,"bert"),dMt.forEach(t),o$r=r(CRe," \u2014 "),EJ=n(CRe,"A",{href:!0});var cMt=s(EJ);r$r=r(cMt,"FlaxBertForTokenClassification"),cMt.forEach(t),t$r=r(CRe," (BERT model)"),CRe.forEach(t),a$r=i(Fo),TC=n(Fo,"LI",{});var wRe=s(TC);r6e=n(wRe,"STRONG",{});var fMt=s(r6e);n$r=r(fMt,"big_bird"),fMt.forEach(t),s$r=r(wRe," \u2014 "),CJ=n(wRe,"A",{href:!0});var mMt=s(CJ);l$r=r(mMt,"FlaxBigBirdForTokenClassification"),mMt.forEach(t),i$r=r(wRe," (BigBird model)"),wRe.forEach(t),d$r=i(Fo),MC=n(Fo,"LI",{});var ARe=s(MC);t6e=n(ARe,"STRONG",{});var gMt=s(t6e);c$r=r(gMt,"distilbert"),gMt.forEach(t),f$r=r(ARe," \u2014 "),wJ=n(ARe,"A",{href:!0});var hMt=s(wJ);m$r=r(hMt,"FlaxDistilBertForTokenClassification"),hMt.forEach(t),g$r=r(ARe," (DistilBERT model)"),ARe.forEach(t),h$r=i(Fo),EC=n(Fo,"LI",{});var yRe=s(EC);a6e=n(yRe,"STRONG",{});var pMt=s(a6e);p$r=r(pMt,"electra"),pMt.forEach(t),u$r=r(yRe," \u2014 "),AJ=n(yRe,"A",{href:!0});var uMt=s(AJ);_$r=r(uMt,"FlaxElectraForTokenClassification"),uMt.forEach(t),b$r=r(yRe," (ELECTRA model)"),yRe.forEach(t),v$r=i(Fo),CC=n(Fo,"LI",{});var LRe=s(CC);n6e=n(LRe,"STRONG",{});var _Mt=s(n6e);F$r=r(_Mt,"roberta"),_Mt.forEach(t),T$r=r(LRe," \u2014 "),yJ=n(LRe,"A",{href:!0});var bMt=s(yJ);M$r=r(bMt,"FlaxRobertaForTokenClassification"),bMt.forEach(t),E$r=r(LRe," (RoBERTa model)"),LRe.forEach(t),C$r=i(Fo),wC=n(Fo,"LI",{});var xRe=s(wC);s6e=n(xRe,"STRONG",{});var vMt=s(s6e);w$r=r(vMt,"roformer"),vMt.forEach(t),A$r=r(xRe," \u2014 "),LJ=n(xRe,"A",{href:!0});var FMt=s(LJ);y$r=r(FMt,"FlaxRoFormerForTokenClassification"),FMt.forEach(t),L$r=r(xRe," (RoFormer model)"),xRe.forEach(t),x$r=i(Fo),AC=n(Fo,"LI",{});var $Re=s(AC);l6e=n($Re,"STRONG",{});var TMt=s(l6e);$$r=r(TMt,"xlm-roberta"),TMt.forEach(t),k$r=r($Re," \u2014 "),xJ=n($Re,"A",{href:!0});var MMt=s(xJ);S$r=r(MMt,"FlaxXLMRobertaForTokenClassification"),MMt.forEach(t),R$r=r($Re," (XLM-RoBERTa model)"),$Re.forEach(t),Fo.forEach(t),B$r=i(Ql),T(yC.$$.fragment,Ql),Ql.forEach(t),zl.forEach(t),IPe=i(f),Dc=n(f,"H2",{class:!0});var Dqe=s(Dc);LC=n(Dqe,"A",{id:!0,class:!0,href:!0});var EMt=s(LC);i6e=n(EMt,"SPAN",{});var CMt=s(i6e);T(U8.$$.fragment,CMt),CMt.forEach(t),EMt.forEach(t),P$r=i(Dqe),d6e=n(Dqe,"SPAN",{});var wMt=s(d6e);I$r=r(wMt,"FlaxAutoModelForMultipleChoice"),wMt.forEach(t),Dqe.forEach(t),qPe=i(f),br=n(f,"DIV",{class:!0});var Wl=s(br);T(J8.$$.fragment,Wl),q$r=i(Wl),Gc=n(Wl,"P",{});var IK=s(Gc);N$r=r(IK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),$J=n(IK,"A",{href:!0});var AMt=s($J);j$r=r(AMt,"from_pretrained()"),AMt.forEach(t),D$r=r(IK," class method or the "),kJ=n(IK,"A",{href:!0});var yMt=s(kJ);G$r=r(yMt,"from_config()"),yMt.forEach(t),O$r=r(IK,` class
method.`),IK.forEach(t),V$r=i(Wl),Y8=n(Wl,"P",{});var Gqe=s(Y8);X$r=r(Gqe,"This class cannot be instantiated directly using "),c6e=n(Gqe,"CODE",{});var LMt=s(c6e);z$r=r(LMt,"__init__()"),LMt.forEach(t),Q$r=r(Gqe," (throws an error)."),Gqe.forEach(t),W$r=i(Wl),Xt=n(Wl,"DIV",{class:!0});var nA=s(Xt);T(K8.$$.fragment,nA),H$r=i(nA),f6e=n(nA,"P",{});var xMt=s(f6e);U$r=r(xMt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),xMt.forEach(t),J$r=i(nA),Oc=n(nA,"P",{});var qK=s(Oc);Y$r=r(qK,`Note:
Loading a model from its configuration file does `),m6e=n(qK,"STRONG",{});var $Mt=s(m6e);K$r=r($Mt,"not"),$Mt.forEach(t),Z$r=r(qK,` load the model weights. It only affects the
model\u2019s configuration. Use `),SJ=n(qK,"A",{href:!0});var kMt=s(SJ);ekr=r(kMt,"from_pretrained()"),kMt.forEach(t),okr=r(qK," to load the model weights."),qK.forEach(t),rkr=i(nA),T(xC.$$.fragment,nA),nA.forEach(t),tkr=i(Wl),zr=n(Wl,"DIV",{class:!0});var Hl=s(zr);T(Z8.$$.fragment,Hl),akr=i(Hl),g6e=n(Hl,"P",{});var SMt=s(g6e);nkr=r(SMt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),SMt.forEach(t),skr=i(Hl),_n=n(Hl,"P",{});var sA=s(_n);lkr=r(sA,"The model class to instantiate is selected based on the "),h6e=n(sA,"CODE",{});var RMt=s(h6e);ikr=r(RMt,"model_type"),RMt.forEach(t),dkr=r(sA,` property of the config object (either
passed as an argument or loaded from `),p6e=n(sA,"CODE",{});var BMt=s(p6e);ckr=r(BMt,"pretrained_model_name_or_path"),BMt.forEach(t),fkr=r(sA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),u6e=n(sA,"CODE",{});var PMt=s(u6e);mkr=r(PMt,"pretrained_model_name_or_path"),PMt.forEach(t),gkr=r(sA,":"),sA.forEach(t),hkr=i(Hl),Ge=n(Hl,"UL",{});var To=s(Ge);$C=n(To,"LI",{});var kRe=s($C);_6e=n(kRe,"STRONG",{});var IMt=s(_6e);pkr=r(IMt,"albert"),IMt.forEach(t),ukr=r(kRe," \u2014 "),RJ=n(kRe,"A",{href:!0});var qMt=s(RJ);_kr=r(qMt,"FlaxAlbertForMultipleChoice"),qMt.forEach(t),bkr=r(kRe," (ALBERT model)"),kRe.forEach(t),vkr=i(To),kC=n(To,"LI",{});var SRe=s(kC);b6e=n(SRe,"STRONG",{});var NMt=s(b6e);Fkr=r(NMt,"bert"),NMt.forEach(t),Tkr=r(SRe," \u2014 "),BJ=n(SRe,"A",{href:!0});var jMt=s(BJ);Mkr=r(jMt,"FlaxBertForMultipleChoice"),jMt.forEach(t),Ekr=r(SRe," (BERT model)"),SRe.forEach(t),Ckr=i(To),SC=n(To,"LI",{});var RRe=s(SC);v6e=n(RRe,"STRONG",{});var DMt=s(v6e);wkr=r(DMt,"big_bird"),DMt.forEach(t),Akr=r(RRe," \u2014 "),PJ=n(RRe,"A",{href:!0});var GMt=s(PJ);ykr=r(GMt,"FlaxBigBirdForMultipleChoice"),GMt.forEach(t),Lkr=r(RRe," (BigBird model)"),RRe.forEach(t),xkr=i(To),RC=n(To,"LI",{});var BRe=s(RC);F6e=n(BRe,"STRONG",{});var OMt=s(F6e);$kr=r(OMt,"distilbert"),OMt.forEach(t),kkr=r(BRe," \u2014 "),IJ=n(BRe,"A",{href:!0});var VMt=s(IJ);Skr=r(VMt,"FlaxDistilBertForMultipleChoice"),VMt.forEach(t),Rkr=r(BRe," (DistilBERT model)"),BRe.forEach(t),Bkr=i(To),BC=n(To,"LI",{});var PRe=s(BC);T6e=n(PRe,"STRONG",{});var XMt=s(T6e);Pkr=r(XMt,"electra"),XMt.forEach(t),Ikr=r(PRe," \u2014 "),qJ=n(PRe,"A",{href:!0});var zMt=s(qJ);qkr=r(zMt,"FlaxElectraForMultipleChoice"),zMt.forEach(t),Nkr=r(PRe," (ELECTRA model)"),PRe.forEach(t),jkr=i(To),PC=n(To,"LI",{});var IRe=s(PC);M6e=n(IRe,"STRONG",{});var QMt=s(M6e);Dkr=r(QMt,"roberta"),QMt.forEach(t),Gkr=r(IRe," \u2014 "),NJ=n(IRe,"A",{href:!0});var WMt=s(NJ);Okr=r(WMt,"FlaxRobertaForMultipleChoice"),WMt.forEach(t),Vkr=r(IRe," (RoBERTa model)"),IRe.forEach(t),Xkr=i(To),IC=n(To,"LI",{});var qRe=s(IC);E6e=n(qRe,"STRONG",{});var HMt=s(E6e);zkr=r(HMt,"roformer"),HMt.forEach(t),Qkr=r(qRe," \u2014 "),jJ=n(qRe,"A",{href:!0});var UMt=s(jJ);Wkr=r(UMt,"FlaxRoFormerForMultipleChoice"),UMt.forEach(t),Hkr=r(qRe," (RoFormer model)"),qRe.forEach(t),Ukr=i(To),qC=n(To,"LI",{});var NRe=s(qC);C6e=n(NRe,"STRONG",{});var JMt=s(C6e);Jkr=r(JMt,"xlm-roberta"),JMt.forEach(t),Ykr=r(NRe," \u2014 "),DJ=n(NRe,"A",{href:!0});var YMt=s(DJ);Kkr=r(YMt,"FlaxXLMRobertaForMultipleChoice"),YMt.forEach(t),Zkr=r(NRe," (XLM-RoBERTa model)"),NRe.forEach(t),To.forEach(t),eSr=i(Hl),T(NC.$$.fragment,Hl),Hl.forEach(t),Wl.forEach(t),NPe=i(f),Vc=n(f,"H2",{class:!0});var Oqe=s(Vc);jC=n(Oqe,"A",{id:!0,class:!0,href:!0});var KMt=s(jC);w6e=n(KMt,"SPAN",{});var ZMt=s(w6e);T(ex.$$.fragment,ZMt),ZMt.forEach(t),KMt.forEach(t),oSr=i(Oqe),A6e=n(Oqe,"SPAN",{});var e4t=s(A6e);rSr=r(e4t,"FlaxAutoModelForNextSentencePrediction"),e4t.forEach(t),Oqe.forEach(t),jPe=i(f),vr=n(f,"DIV",{class:!0});var Ul=s(vr);T(ox.$$.fragment,Ul),tSr=i(Ul),Xc=n(Ul,"P",{});var NK=s(Xc);aSr=r(NK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),GJ=n(NK,"A",{href:!0});var o4t=s(GJ);nSr=r(o4t,"from_pretrained()"),o4t.forEach(t),sSr=r(NK," class method or the "),OJ=n(NK,"A",{href:!0});var r4t=s(OJ);lSr=r(r4t,"from_config()"),r4t.forEach(t),iSr=r(NK,` class
method.`),NK.forEach(t),dSr=i(Ul),rx=n(Ul,"P",{});var Vqe=s(rx);cSr=r(Vqe,"This class cannot be instantiated directly using "),y6e=n(Vqe,"CODE",{});var t4t=s(y6e);fSr=r(t4t,"__init__()"),t4t.forEach(t),mSr=r(Vqe," (throws an error)."),Vqe.forEach(t),gSr=i(Ul),zt=n(Ul,"DIV",{class:!0});var lA=s(zt);T(tx.$$.fragment,lA),hSr=i(lA),L6e=n(lA,"P",{});var a4t=s(L6e);pSr=r(a4t,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),a4t.forEach(t),uSr=i(lA),zc=n(lA,"P",{});var jK=s(zc);_Sr=r(jK,`Note:
Loading a model from its configuration file does `),x6e=n(jK,"STRONG",{});var n4t=s(x6e);bSr=r(n4t,"not"),n4t.forEach(t),vSr=r(jK,` load the model weights. It only affects the
model\u2019s configuration. Use `),VJ=n(jK,"A",{href:!0});var s4t=s(VJ);FSr=r(s4t,"from_pretrained()"),s4t.forEach(t),TSr=r(jK," to load the model weights."),jK.forEach(t),MSr=i(lA),T(DC.$$.fragment,lA),lA.forEach(t),ESr=i(Ul),Qr=n(Ul,"DIV",{class:!0});var Jl=s(Qr);T(ax.$$.fragment,Jl),CSr=i(Jl),$6e=n(Jl,"P",{});var l4t=s($6e);wSr=r(l4t,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),l4t.forEach(t),ASr=i(Jl),bn=n(Jl,"P",{});var iA=s(bn);ySr=r(iA,"The model class to instantiate is selected based on the "),k6e=n(iA,"CODE",{});var i4t=s(k6e);LSr=r(i4t,"model_type"),i4t.forEach(t),xSr=r(iA,` property of the config object (either
passed as an argument or loaded from `),S6e=n(iA,"CODE",{});var d4t=s(S6e);$Sr=r(d4t,"pretrained_model_name_or_path"),d4t.forEach(t),kSr=r(iA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),R6e=n(iA,"CODE",{});var c4t=s(R6e);SSr=r(c4t,"pretrained_model_name_or_path"),c4t.forEach(t),RSr=r(iA,":"),iA.forEach(t),BSr=i(Jl),B6e=n(Jl,"UL",{});var f4t=s(B6e);GC=n(f4t,"LI",{});var jRe=s(GC);P6e=n(jRe,"STRONG",{});var m4t=s(P6e);PSr=r(m4t,"bert"),m4t.forEach(t),ISr=r(jRe," \u2014 "),XJ=n(jRe,"A",{href:!0});var g4t=s(XJ);qSr=r(g4t,"FlaxBertForNextSentencePrediction"),g4t.forEach(t),NSr=r(jRe," (BERT model)"),jRe.forEach(t),f4t.forEach(t),jSr=i(Jl),T(OC.$$.fragment,Jl),Jl.forEach(t),Ul.forEach(t),DPe=i(f),Qc=n(f,"H2",{class:!0});var Xqe=s(Qc);VC=n(Xqe,"A",{id:!0,class:!0,href:!0});var h4t=s(VC);I6e=n(h4t,"SPAN",{});var p4t=s(I6e);T(nx.$$.fragment,p4t),p4t.forEach(t),h4t.forEach(t),DSr=i(Xqe),q6e=n(Xqe,"SPAN",{});var u4t=s(q6e);GSr=r(u4t,"FlaxAutoModelForImageClassification"),u4t.forEach(t),Xqe.forEach(t),GPe=i(f),Fr=n(f,"DIV",{class:!0});var Yl=s(Fr);T(sx.$$.fragment,Yl),OSr=i(Yl),Wc=n(Yl,"P",{});var DK=s(Wc);VSr=r(DK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),zJ=n(DK,"A",{href:!0});var _4t=s(zJ);XSr=r(_4t,"from_pretrained()"),_4t.forEach(t),zSr=r(DK," class method or the "),QJ=n(DK,"A",{href:!0});var b4t=s(QJ);QSr=r(b4t,"from_config()"),b4t.forEach(t),WSr=r(DK,` class
method.`),DK.forEach(t),HSr=i(Yl),lx=n(Yl,"P",{});var zqe=s(lx);USr=r(zqe,"This class cannot be instantiated directly using "),N6e=n(zqe,"CODE",{});var v4t=s(N6e);JSr=r(v4t,"__init__()"),v4t.forEach(t),YSr=r(zqe," (throws an error)."),zqe.forEach(t),KSr=i(Yl),Qt=n(Yl,"DIV",{class:!0});var dA=s(Qt);T(ix.$$.fragment,dA),ZSr=i(dA),j6e=n(dA,"P",{});var F4t=s(j6e);eRr=r(F4t,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),F4t.forEach(t),oRr=i(dA),Hc=n(dA,"P",{});var GK=s(Hc);rRr=r(GK,`Note:
Loading a model from its configuration file does `),D6e=n(GK,"STRONG",{});var T4t=s(D6e);tRr=r(T4t,"not"),T4t.forEach(t),aRr=r(GK,` load the model weights. It only affects the
model\u2019s configuration. Use `),WJ=n(GK,"A",{href:!0});var M4t=s(WJ);nRr=r(M4t,"from_pretrained()"),M4t.forEach(t),sRr=r(GK," to load the model weights."),GK.forEach(t),lRr=i(dA),T(XC.$$.fragment,dA),dA.forEach(t),iRr=i(Yl),Wr=n(Yl,"DIV",{class:!0});var Kl=s(Wr);T(dx.$$.fragment,Kl),dRr=i(Kl),G6e=n(Kl,"P",{});var E4t=s(G6e);cRr=r(E4t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),E4t.forEach(t),fRr=i(Kl),vn=n(Kl,"P",{});var cA=s(vn);mRr=r(cA,"The model class to instantiate is selected based on the "),O6e=n(cA,"CODE",{});var C4t=s(O6e);gRr=r(C4t,"model_type"),C4t.forEach(t),hRr=r(cA,` property of the config object (either
passed as an argument or loaded from `),V6e=n(cA,"CODE",{});var w4t=s(V6e);pRr=r(w4t,"pretrained_model_name_or_path"),w4t.forEach(t),uRr=r(cA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),X6e=n(cA,"CODE",{});var A4t=s(X6e);_Rr=r(A4t,"pretrained_model_name_or_path"),A4t.forEach(t),bRr=r(cA,":"),cA.forEach(t),vRr=i(Kl),cx=n(Kl,"UL",{});var Qqe=s(cx);zC=n(Qqe,"LI",{});var DRe=s(zC);z6e=n(DRe,"STRONG",{});var y4t=s(z6e);FRr=r(y4t,"beit"),y4t.forEach(t),TRr=r(DRe," \u2014 "),HJ=n(DRe,"A",{href:!0});var L4t=s(HJ);MRr=r(L4t,"FlaxBeitForImageClassification"),L4t.forEach(t),ERr=r(DRe," (BEiT model)"),DRe.forEach(t),CRr=i(Qqe),QC=n(Qqe,"LI",{});var GRe=s(QC);Q6e=n(GRe,"STRONG",{});var x4t=s(Q6e);wRr=r(x4t,"vit"),x4t.forEach(t),ARr=r(GRe," \u2014 "),UJ=n(GRe,"A",{href:!0});var $4t=s(UJ);yRr=r($4t,"FlaxViTForImageClassification"),$4t.forEach(t),LRr=r(GRe," (ViT model)"),GRe.forEach(t),Qqe.forEach(t),xRr=i(Kl),T(WC.$$.fragment,Kl),Kl.forEach(t),Yl.forEach(t),OPe=i(f),Uc=n(f,"H2",{class:!0});var Wqe=s(Uc);HC=n(Wqe,"A",{id:!0,class:!0,href:!0});var k4t=s(HC);W6e=n(k4t,"SPAN",{});var S4t=s(W6e);T(fx.$$.fragment,S4t),S4t.forEach(t),k4t.forEach(t),$Rr=i(Wqe),H6e=n(Wqe,"SPAN",{});var R4t=s(H6e);kRr=r(R4t,"FlaxAutoModelForVision2Seq"),R4t.forEach(t),Wqe.forEach(t),VPe=i(f),Tr=n(f,"DIV",{class:!0});var Zl=s(Tr);T(mx.$$.fragment,Zl),SRr=i(Zl),Jc=n(Zl,"P",{});var OK=s(Jc);RRr=r(OK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),JJ=n(OK,"A",{href:!0});var B4t=s(JJ);BRr=r(B4t,"from_pretrained()"),B4t.forEach(t),PRr=r(OK," class method or the "),YJ=n(OK,"A",{href:!0});var P4t=s(YJ);IRr=r(P4t,"from_config()"),P4t.forEach(t),qRr=r(OK,` class
method.`),OK.forEach(t),NRr=i(Zl),gx=n(Zl,"P",{});var Hqe=s(gx);jRr=r(Hqe,"This class cannot be instantiated directly using "),U6e=n(Hqe,"CODE",{});var I4t=s(U6e);DRr=r(I4t,"__init__()"),I4t.forEach(t),GRr=r(Hqe," (throws an error)."),Hqe.forEach(t),ORr=i(Zl),Wt=n(Zl,"DIV",{class:!0});var fA=s(Wt);T(hx.$$.fragment,fA),VRr=i(fA),J6e=n(fA,"P",{});var q4t=s(J6e);XRr=r(q4t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),q4t.forEach(t),zRr=i(fA),Yc=n(fA,"P",{});var VK=s(Yc);QRr=r(VK,`Note:
Loading a model from its configuration file does `),Y6e=n(VK,"STRONG",{});var N4t=s(Y6e);WRr=r(N4t,"not"),N4t.forEach(t),HRr=r(VK,` load the model weights. It only affects the
model\u2019s configuration. Use `),KJ=n(VK,"A",{href:!0});var j4t=s(KJ);URr=r(j4t,"from_pretrained()"),j4t.forEach(t),JRr=r(VK," to load the model weights."),VK.forEach(t),YRr=i(fA),T(UC.$$.fragment,fA),fA.forEach(t),KRr=i(Zl),Hr=n(Zl,"DIV",{class:!0});var ei=s(Hr);T(px.$$.fragment,ei),ZRr=i(ei),K6e=n(ei,"P",{});var D4t=s(K6e);eBr=r(D4t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),D4t.forEach(t),oBr=i(ei),Fn=n(ei,"P",{});var mA=s(Fn);rBr=r(mA,"The model class to instantiate is selected based on the "),Z6e=n(mA,"CODE",{});var G4t=s(Z6e);tBr=r(G4t,"model_type"),G4t.forEach(t),aBr=r(mA,` property of the config object (either
passed as an argument or loaded from `),eTe=n(mA,"CODE",{});var O4t=s(eTe);nBr=r(O4t,"pretrained_model_name_or_path"),O4t.forEach(t),sBr=r(mA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),oTe=n(mA,"CODE",{});var V4t=s(oTe);lBr=r(V4t,"pretrained_model_name_or_path"),V4t.forEach(t),iBr=r(mA,":"),mA.forEach(t),dBr=i(ei),rTe=n(ei,"UL",{});var X4t=s(rTe);JC=n(X4t,"LI",{});var ORe=s(JC);tTe=n(ORe,"STRONG",{});var z4t=s(tTe);cBr=r(z4t,"vision-encoder-decoder"),z4t.forEach(t),fBr=r(ORe," \u2014 "),ZJ=n(ORe,"A",{href:!0});var Q4t=s(ZJ);mBr=r(Q4t,"FlaxVisionEncoderDecoderModel"),Q4t.forEach(t),gBr=r(ORe," (Vision Encoder decoder model)"),ORe.forEach(t),X4t.forEach(t),hBr=i(ei),T(YC.$$.fragment,ei),ei.forEach(t),Zl.forEach(t),this.h()},h(){c(g,"name","hf:doc:metadata"),c(g,"content",JSON.stringify(HCt)),c(m,"id","auto-classes"),c(m,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m,"href","#auto-classes"),c(p,"class","relative group"),c(Mn,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.AutoConfig"),c(Cn,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.AutoModel"),c(wn,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.AutoTokenizer"),c(li,"href","/docs/transformers/pr_16995/en/model_doc/bert#transformers.BertModel"),c(nf,"id","extending-the-auto-classes"),c(nf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(nf,"href","#extending-the-auto-classes"),c(ii,"class","relative group"),c(lf,"id","transformers.AutoConfig"),c(lf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(lf,"href","#transformers.AutoConfig"),c(di,"class","relative group"),c(B7,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(P7,"href","/docs/transformers/pr_16995/en/model_doc/albert#transformers.AlbertConfig"),c(I7,"href","/docs/transformers/pr_16995/en/model_doc/bart#transformers.BartConfig"),c(q7,"href","/docs/transformers/pr_16995/en/model_doc/beit#transformers.BeitConfig"),c(N7,"href","/docs/transformers/pr_16995/en/model_doc/bert#transformers.BertConfig"),c(j7,"href","/docs/transformers/pr_16995/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(D7,"href","/docs/transformers/pr_16995/en/model_doc/big_bird#transformers.BigBirdConfig"),c(G7,"href","/docs/transformers/pr_16995/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(O7,"href","/docs/transformers/pr_16995/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(V7,"href","/docs/transformers/pr_16995/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(X7,"href","/docs/transformers/pr_16995/en/model_doc/camembert#transformers.CamembertConfig"),c(z7,"href","/docs/transformers/pr_16995/en/model_doc/canine#transformers.CanineConfig"),c(Q7,"href","/docs/transformers/pr_16995/en/model_doc/clip#transformers.CLIPConfig"),c(W7,"href","/docs/transformers/pr_16995/en/model_doc/convbert#transformers.ConvBertConfig"),c(H7,"href","/docs/transformers/pr_16995/en/model_doc/convnext#transformers.ConvNextConfig"),c(U7,"href","/docs/transformers/pr_16995/en/model_doc/ctrl#transformers.CTRLConfig"),c(J7,"href","/docs/transformers/pr_16995/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(Y7,"href","/docs/transformers/pr_16995/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(K7,"href","/docs/transformers/pr_16995/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),c(Z7,"href","/docs/transformers/pr_16995/en/model_doc/deberta#transformers.DebertaConfig"),c(e$,"href","/docs/transformers/pr_16995/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(o$,"href","/docs/transformers/pr_16995/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),c(r$,"href","/docs/transformers/pr_16995/en/model_doc/deit#transformers.DeiTConfig"),c(t$,"href","/docs/transformers/pr_16995/en/model_doc/detr#transformers.DetrConfig"),c(a$,"href","/docs/transformers/pr_16995/en/model_doc/distilbert#transformers.DistilBertConfig"),c(n$,"href","/docs/transformers/pr_16995/en/model_doc/dpr#transformers.DPRConfig"),c(s$,"href","/docs/transformers/pr_16995/en/model_doc/dpt#transformers.DPTConfig"),c(l$,"href","/docs/transformers/pr_16995/en/model_doc/electra#transformers.ElectraConfig"),c(i$,"href","/docs/transformers/pr_16995/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(d$,"href","/docs/transformers/pr_16995/en/model_doc/flaubert#transformers.FlaubertConfig"),c(c$,"href","/docs/transformers/pr_16995/en/model_doc/fnet#transformers.FNetConfig"),c(f$,"href","/docs/transformers/pr_16995/en/model_doc/fsmt#transformers.FSMTConfig"),c(m$,"href","/docs/transformers/pr_16995/en/model_doc/funnel#transformers.FunnelConfig"),c(g$,"href","/docs/transformers/pr_16995/en/model_doc/glpn#transformers.GLPNConfig"),c(h$,"href","/docs/transformers/pr_16995/en/model_doc/gpt2#transformers.GPT2Config"),c(p$,"href","/docs/transformers/pr_16995/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(u$,"href","/docs/transformers/pr_16995/en/model_doc/gptj#transformers.GPTJConfig"),c(_$,"href","/docs/transformers/pr_16995/en/model_doc/hubert#transformers.HubertConfig"),c(b$,"href","/docs/transformers/pr_16995/en/model_doc/ibert#transformers.IBertConfig"),c(v$,"href","/docs/transformers/pr_16995/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(F$,"href","/docs/transformers/pr_16995/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(T$,"href","/docs/transformers/pr_16995/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(M$,"href","/docs/transformers/pr_16995/en/model_doc/led#transformers.LEDConfig"),c(E$,"href","/docs/transformers/pr_16995/en/model_doc/longformer#transformers.LongformerConfig"),c(C$,"href","/docs/transformers/pr_16995/en/model_doc/luke#transformers.LukeConfig"),c(w$,"href","/docs/transformers/pr_16995/en/model_doc/lxmert#transformers.LxmertConfig"),c(A$,"href","/docs/transformers/pr_16995/en/model_doc/m2m_100#transformers.M2M100Config"),c(y$,"href","/docs/transformers/pr_16995/en/model_doc/marian#transformers.MarianConfig"),c(L$,"href","/docs/transformers/pr_16995/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(x$,"href","/docs/transformers/pr_16995/en/model_doc/mbart#transformers.MBartConfig"),c($$,"href","/docs/transformers/pr_16995/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(k$,"href","/docs/transformers/pr_16995/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(S$,"href","/docs/transformers/pr_16995/en/model_doc/mpnet#transformers.MPNetConfig"),c(R$,"href","/docs/transformers/pr_16995/en/model_doc/mt5#transformers.MT5Config"),c(B$,"href","/docs/transformers/pr_16995/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(P$,"href","/docs/transformers/pr_16995/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(I$,"href","/docs/transformers/pr_16995/en/model_doc/pegasus#transformers.PegasusConfig"),c(q$,"href","/docs/transformers/pr_16995/en/model_doc/perceiver#transformers.PerceiverConfig"),c(N$,"href","/docs/transformers/pr_16995/en/model_doc/plbart#transformers.PLBartConfig"),c(j$,"href","/docs/transformers/pr_16995/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(D$,"href","/docs/transformers/pr_16995/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(G$,"href","/docs/transformers/pr_16995/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(O$,"href","/docs/transformers/pr_16995/en/model_doc/rag#transformers.RagConfig"),c(V$,"href","/docs/transformers/pr_16995/en/model_doc/realm#transformers.RealmConfig"),c(X$,"href","/docs/transformers/pr_16995/en/model_doc/reformer#transformers.ReformerConfig"),c(z$,"href","/docs/transformers/pr_16995/en/model_doc/regnet#transformers.RegNetConfig"),c(Q$,"href","/docs/transformers/pr_16995/en/model_doc/rembert#transformers.RemBertConfig"),c(W$,"href","/docs/transformers/pr_16995/en/model_doc/resnet#transformers.ResNetConfig"),c(H$,"href","/docs/transformers/pr_16995/en/model_doc/retribert#transformers.RetriBertConfig"),c(U$,"href","/docs/transformers/pr_16995/en/model_doc/roberta#transformers.RobertaConfig"),c(J$,"href","/docs/transformers/pr_16995/en/model_doc/roformer#transformers.RoFormerConfig"),c(Y$,"href","/docs/transformers/pr_16995/en/model_doc/segformer#transformers.SegformerConfig"),c(K$,"href","/docs/transformers/pr_16995/en/model_doc/sew#transformers.SEWConfig"),c(Z$,"href","/docs/transformers/pr_16995/en/model_doc/sew-d#transformers.SEWDConfig"),c(ek,"href","/docs/transformers/pr_16995/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(ok,"href","/docs/transformers/pr_16995/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(rk,"href","/docs/transformers/pr_16995/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(tk,"href","/docs/transformers/pr_16995/en/model_doc/splinter#transformers.SplinterConfig"),c(ak,"href","/docs/transformers/pr_16995/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(nk,"href","/docs/transformers/pr_16995/en/model_doc/swin#transformers.SwinConfig"),c(sk,"href","/docs/transformers/pr_16995/en/model_doc/t5#transformers.T5Config"),c(lk,"href","/docs/transformers/pr_16995/en/model_doc/tapas#transformers.TapasConfig"),c(ik,"href","/docs/transformers/pr_16995/en/model_doc/bart#transformers.BartConfig"),c(dk,"href","/docs/transformers/pr_16995/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(ck,"href","/docs/transformers/pr_16995/en/model_doc/trocr#transformers.TrOCRConfig"),c(fk,"href","/docs/transformers/pr_16995/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(mk,"href","/docs/transformers/pr_16995/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(gk,"href","/docs/transformers/pr_16995/en/model_doc/van#transformers.VanConfig"),c(hk,"href","/docs/transformers/pr_16995/en/model_doc/vilt#transformers.ViltConfig"),c(pk,"href","/docs/transformers/pr_16995/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(uk,"href","/docs/transformers/pr_16995/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(_k,"href","/docs/transformers/pr_16995/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(bk,"href","/docs/transformers/pr_16995/en/model_doc/vit#transformers.ViTConfig"),c(vk,"href","/docs/transformers/pr_16995/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(Fk,"href","/docs/transformers/pr_16995/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(Tk,"href","/docs/transformers/pr_16995/en/model_doc/wavlm#transformers.WavLMConfig"),c(Mk,"href","/docs/transformers/pr_16995/en/model_doc/xglm#transformers.XGLMConfig"),c(Ek,"href","/docs/transformers/pr_16995/en/model_doc/xlm#transformers.XLMConfig"),c(Ck,"href","/docs/transformers/pr_16995/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(wk,"href","/docs/transformers/pr_16995/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(Ak,"href","/docs/transformers/pr_16995/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(yk,"href","/docs/transformers/pr_16995/en/model_doc/xlnet#transformers.XLNetConfig"),c(Lk,"href","/docs/transformers/pr_16995/en/model_doc/yoso#transformers.YosoConfig"),c(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ag,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ng,"id","transformers.AutoTokenizer"),c(ng,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ng,"href","#transformers.AutoTokenizer"),c(fi,"class","relative group"),c(xk,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c($k,"href","/docs/transformers/pr_16995/en/model_doc/albert#transformers.AlbertTokenizer"),c(kk,"href","/docs/transformers/pr_16995/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(Sk,"href","/docs/transformers/pr_16995/en/model_doc/bart#transformers.BartTokenizer"),c(Rk,"href","/docs/transformers/pr_16995/en/model_doc/bart#transformers.BartTokenizerFast"),c(Bk,"href","/docs/transformers/pr_16995/en/model_doc/barthez#transformers.BarthezTokenizer"),c(Pk,"href","/docs/transformers/pr_16995/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(Ik,"href","/docs/transformers/pr_16995/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(qk,"href","/docs/transformers/pr_16995/en/model_doc/bert#transformers.BertTokenizer"),c(Nk,"href","/docs/transformers/pr_16995/en/model_doc/bert#transformers.BertTokenizerFast"),c(jk,"href","/docs/transformers/pr_16995/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(Dk,"href","/docs/transformers/pr_16995/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(Gk,"href","/docs/transformers/pr_16995/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(Ok,"href","/docs/transformers/pr_16995/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(Vk,"href","/docs/transformers/pr_16995/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(Xk,"href","/docs/transformers/pr_16995/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(zk,"href","/docs/transformers/pr_16995/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(Qk,"href","/docs/transformers/pr_16995/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(Wk,"href","/docs/transformers/pr_16995/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(Hk,"href","/docs/transformers/pr_16995/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(Uk,"href","/docs/transformers/pr_16995/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(Jk,"href","/docs/transformers/pr_16995/en/model_doc/camembert#transformers.CamembertTokenizer"),c(Yk,"href","/docs/transformers/pr_16995/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(Kk,"href","/docs/transformers/pr_16995/en/model_doc/canine#transformers.CanineTokenizer"),c(Zk,"href","/docs/transformers/pr_16995/en/model_doc/clip#transformers.CLIPTokenizer"),c(eS,"href","/docs/transformers/pr_16995/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(oS,"href","/docs/transformers/pr_16995/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(rS,"href","/docs/transformers/pr_16995/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(tS,"href","/docs/transformers/pr_16995/en/model_doc/cpm#transformers.CpmTokenizer"),c(aS,"href","/docs/transformers/pr_16995/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(nS,"href","/docs/transformers/pr_16995/en/model_doc/roberta#transformers.RobertaTokenizer"),c(sS,"href","/docs/transformers/pr_16995/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(lS,"href","/docs/transformers/pr_16995/en/model_doc/deberta#transformers.DebertaTokenizer"),c(iS,"href","/docs/transformers/pr_16995/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(dS,"href","/docs/transformers/pr_16995/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(cS,"href","/docs/transformers/pr_16995/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),c(fS,"href","/docs/transformers/pr_16995/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(mS,"href","/docs/transformers/pr_16995/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(gS,"href","/docs/transformers/pr_16995/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(hS,"href","/docs/transformers/pr_16995/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(pS,"href","/docs/transformers/pr_16995/en/model_doc/electra#transformers.ElectraTokenizer"),c(uS,"href","/docs/transformers/pr_16995/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(_S,"href","/docs/transformers/pr_16995/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(bS,"href","/docs/transformers/pr_16995/en/model_doc/fnet#transformers.FNetTokenizer"),c(vS,"href","/docs/transformers/pr_16995/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(FS,"href","/docs/transformers/pr_16995/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(TS,"href","/docs/transformers/pr_16995/en/model_doc/funnel#transformers.FunnelTokenizer"),c(MS,"href","/docs/transformers/pr_16995/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(ES,"href","/docs/transformers/pr_16995/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(CS,"href","/docs/transformers/pr_16995/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(wS,"href","/docs/transformers/pr_16995/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(AS,"href","/docs/transformers/pr_16995/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(yS,"href","/docs/transformers/pr_16995/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(LS,"href","/docs/transformers/pr_16995/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(xS,"href","/docs/transformers/pr_16995/en/model_doc/herbert#transformers.HerbertTokenizer"),c($S,"href","/docs/transformers/pr_16995/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(kS,"href","/docs/transformers/pr_16995/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(SS,"href","/docs/transformers/pr_16995/en/model_doc/roberta#transformers.RobertaTokenizer"),c(RS,"href","/docs/transformers/pr_16995/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(BS,"href","/docs/transformers/pr_16995/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(PS,"href","/docs/transformers/pr_16995/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(IS,"href","/docs/transformers/pr_16995/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(qS,"href","/docs/transformers/pr_16995/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(NS,"href","/docs/transformers/pr_16995/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(jS,"href","/docs/transformers/pr_16995/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(DS,"href","/docs/transformers/pr_16995/en/model_doc/led#transformers.LEDTokenizer"),c(GS,"href","/docs/transformers/pr_16995/en/model_doc/led#transformers.LEDTokenizerFast"),c(OS,"href","/docs/transformers/pr_16995/en/model_doc/longformer#transformers.LongformerTokenizer"),c(VS,"href","/docs/transformers/pr_16995/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(XS,"href","/docs/transformers/pr_16995/en/model_doc/luke#transformers.LukeTokenizer"),c(zS,"href","/docs/transformers/pr_16995/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(QS,"href","/docs/transformers/pr_16995/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(WS,"href","/docs/transformers/pr_16995/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(HS,"href","/docs/transformers/pr_16995/en/model_doc/marian#transformers.MarianTokenizer"),c(US,"href","/docs/transformers/pr_16995/en/model_doc/mbart#transformers.MBartTokenizer"),c(JS,"href","/docs/transformers/pr_16995/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(YS,"href","/docs/transformers/pr_16995/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(KS,"href","/docs/transformers/pr_16995/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(ZS,"href","/docs/transformers/pr_16995/en/model_doc/bert#transformers.BertTokenizer"),c(eR,"href","/docs/transformers/pr_16995/en/model_doc/bert#transformers.BertTokenizerFast"),c(oR,"href","/docs/transformers/pr_16995/en/model_doc/mluke#transformers.MLukeTokenizer"),c(rR,"href","/docs/transformers/pr_16995/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(tR,"href","/docs/transformers/pr_16995/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(aR,"href","/docs/transformers/pr_16995/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(nR,"href","/docs/transformers/pr_16995/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(sR,"href","/docs/transformers/pr_16995/en/model_doc/mt5#transformers.T5Tokenizer"),c(lR,"href","/docs/transformers/pr_16995/en/model_doc/mt5#transformers.T5TokenizerFast"),c(iR,"href","/docs/transformers/pr_16995/en/model_doc/albert#transformers.AlbertTokenizer"),c(dR,"href","/docs/transformers/pr_16995/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(cR,"href","/docs/transformers/pr_16995/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(fR,"href","/docs/transformers/pr_16995/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(mR,"href","/docs/transformers/pr_16995/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(gR,"href","/docs/transformers/pr_16995/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(hR,"href","/docs/transformers/pr_16995/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(pR,"href","/docs/transformers/pr_16995/en/model_doc/phobert#transformers.PhobertTokenizer"),c(uR,"href","/docs/transformers/pr_16995/en/model_doc/plbart#transformers.PLBartTokenizer"),c(_R,"href","/docs/transformers/pr_16995/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(bR,"href","/docs/transformers/pr_16995/en/model_doc/bert#transformers.BertTokenizer"),c(vR,"href","/docs/transformers/pr_16995/en/model_doc/bert#transformers.BertTokenizerFast"),c(FR,"href","/docs/transformers/pr_16995/en/model_doc/rag#transformers.RagTokenizer"),c(TR,"href","/docs/transformers/pr_16995/en/model_doc/realm#transformers.RealmTokenizer"),c(MR,"href","/docs/transformers/pr_16995/en/model_doc/realm#transformers.RealmTokenizerFast"),c(ER,"href","/docs/transformers/pr_16995/en/model_doc/reformer#transformers.ReformerTokenizer"),c(CR,"href","/docs/transformers/pr_16995/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(wR,"href","/docs/transformers/pr_16995/en/model_doc/rembert#transformers.RemBertTokenizer"),c(AR,"href","/docs/transformers/pr_16995/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(yR,"href","/docs/transformers/pr_16995/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(LR,"href","/docs/transformers/pr_16995/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(xR,"href","/docs/transformers/pr_16995/en/model_doc/roberta#transformers.RobertaTokenizer"),c($R,"href","/docs/transformers/pr_16995/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(kR,"href","/docs/transformers/pr_16995/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(SR,"href","/docs/transformers/pr_16995/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(RR,"href","/docs/transformers/pr_16995/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(BR,"href","/docs/transformers/pr_16995/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(PR,"href","/docs/transformers/pr_16995/en/model_doc/splinter#transformers.SplinterTokenizer"),c(IR,"href","/docs/transformers/pr_16995/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(qR,"href","/docs/transformers/pr_16995/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(NR,"href","/docs/transformers/pr_16995/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(jR,"href","/docs/transformers/pr_16995/en/model_doc/mt5#transformers.T5Tokenizer"),c(DR,"href","/docs/transformers/pr_16995/en/model_doc/mt5#transformers.T5TokenizerFast"),c(GR,"href","/docs/transformers/pr_16995/en/model_doc/tapas#transformers.TapasTokenizer"),c(OR,"href","/docs/transformers/pr_16995/en/model_doc/tapex#transformers.TapexTokenizer"),c(VR,"href","/docs/transformers/pr_16995/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(XR,"href","/docs/transformers/pr_16995/en/model_doc/bert#transformers.BertTokenizer"),c(zR,"href","/docs/transformers/pr_16995/en/model_doc/bert#transformers.BertTokenizerFast"),c(QR,"href","/docs/transformers/pr_16995/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(WR,"href","/docs/transformers/pr_16995/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(HR,"href","/docs/transformers/pr_16995/en/model_doc/xglm#transformers.XGLMTokenizer"),c(UR,"href","/docs/transformers/pr_16995/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(JR,"href","/docs/transformers/pr_16995/en/model_doc/xlm#transformers.XLMTokenizer"),c(YR,"href","/docs/transformers/pr_16995/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(KR,"href","/docs/transformers/pr_16995/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(ZR,"href","/docs/transformers/pr_16995/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(eB,"href","/docs/transformers/pr_16995/en/model_doc/roberta#transformers.RobertaTokenizer"),c(oB,"href","/docs/transformers/pr_16995/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(rB,"href","/docs/transformers/pr_16995/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(tB,"href","/docs/transformers/pr_16995/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(aB,"href","/docs/transformers/pr_16995/en/model_doc/albert#transformers.AlbertTokenizer"),c(nB,"href","/docs/transformers/pr_16995/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ig,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qg,"id","transformers.AutoFeatureExtractor"),c(qg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(qg,"href","#transformers.AutoFeatureExtractor"),c(mi,"class","relative group"),c(sB,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(lB,"href","/docs/transformers/pr_16995/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(iB,"href","/docs/transformers/pr_16995/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(dB,"href","/docs/transformers/pr_16995/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(cB,"href","/docs/transformers/pr_16995/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(fB,"href","/docs/transformers/pr_16995/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(mB,"href","/docs/transformers/pr_16995/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(gB,"href","/docs/transformers/pr_16995/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(hB,"href","/docs/transformers/pr_16995/en/model_doc/dpt#transformers.DPTFeatureExtractor"),c(pB,"href","/docs/transformers/pr_16995/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),c(uB,"href","/docs/transformers/pr_16995/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(_B,"href","/docs/transformers/pr_16995/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(bB,"href","/docs/transformers/pr_16995/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(vB,"href","/docs/transformers/pr_16995/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(FB,"href","/docs/transformers/pr_16995/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(TB,"href","/docs/transformers/pr_16995/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(MB,"href","/docs/transformers/pr_16995/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(EB,"href","/docs/transformers/pr_16995/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(CB,"href","/docs/transformers/pr_16995/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(wB,"href","/docs/transformers/pr_16995/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(AB,"href","/docs/transformers/pr_16995/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(yB,"href","/docs/transformers/pr_16995/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(LB,"href","/docs/transformers/pr_16995/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(xB,"href","/docs/transformers/pr_16995/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(Qe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ch,"id","transformers.AutoProcessor"),c(ch,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ch,"href","#transformers.AutoProcessor"),c(gi,"class","relative group"),c($B,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(kB,"href","/docs/transformers/pr_16995/en/model_doc/clip#transformers.CLIPProcessor"),c(SB,"href","/docs/transformers/pr_16995/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(RB,"href","/docs/transformers/pr_16995/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(BB,"href","/docs/transformers/pr_16995/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(PB,"href","/docs/transformers/pr_16995/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(IB,"href","/docs/transformers/pr_16995/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(qB,"href","/docs/transformers/pr_16995/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(NB,"href","/docs/transformers/pr_16995/en/model_doc/trocr#transformers.TrOCRProcessor"),c(jB,"href","/docs/transformers/pr_16995/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(DB,"href","/docs/transformers/pr_16995/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(GB,"href","/docs/transformers/pr_16995/en/model_doc/vilt#transformers.ViltProcessor"),c(OB,"href","/docs/transformers/pr_16995/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(VB,"href","/docs/transformers/pr_16995/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(XB,"href","/docs/transformers/pr_16995/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(We,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lh,"id","transformers.AutoModel"),c(Lh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Lh,"href","#transformers.AutoModel"),c(pi,"class","relative group"),c(zB,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(QB,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(WB,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HB,"href","/docs/transformers/pr_16995/en/model_doc/albert#transformers.AlbertModel"),c(UB,"href","/docs/transformers/pr_16995/en/model_doc/bart#transformers.BartModel"),c(JB,"href","/docs/transformers/pr_16995/en/model_doc/beit#transformers.BeitModel"),c(YB,"href","/docs/transformers/pr_16995/en/model_doc/bert#transformers.BertModel"),c(KB,"href","/docs/transformers/pr_16995/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(ZB,"href","/docs/transformers/pr_16995/en/model_doc/big_bird#transformers.BigBirdModel"),c(eP,"href","/docs/transformers/pr_16995/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(oP,"href","/docs/transformers/pr_16995/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(rP,"href","/docs/transformers/pr_16995/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(tP,"href","/docs/transformers/pr_16995/en/model_doc/camembert#transformers.CamembertModel"),c(aP,"href","/docs/transformers/pr_16995/en/model_doc/canine#transformers.CanineModel"),c(nP,"href","/docs/transformers/pr_16995/en/model_doc/clip#transformers.CLIPModel"),c(sP,"href","/docs/transformers/pr_16995/en/model_doc/convbert#transformers.ConvBertModel"),c(lP,"href","/docs/transformers/pr_16995/en/model_doc/convnext#transformers.ConvNextModel"),c(iP,"href","/docs/transformers/pr_16995/en/model_doc/ctrl#transformers.CTRLModel"),c(dP,"href","/docs/transformers/pr_16995/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(cP,"href","/docs/transformers/pr_16995/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(fP,"href","/docs/transformers/pr_16995/en/model_doc/data2vec#transformers.Data2VecVisionModel"),c(mP,"href","/docs/transformers/pr_16995/en/model_doc/deberta#transformers.DebertaModel"),c(gP,"href","/docs/transformers/pr_16995/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(hP,"href","/docs/transformers/pr_16995/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),c(pP,"href","/docs/transformers/pr_16995/en/model_doc/deit#transformers.DeiTModel"),c(uP,"href","/docs/transformers/pr_16995/en/model_doc/detr#transformers.DetrModel"),c(_P,"href","/docs/transformers/pr_16995/en/model_doc/distilbert#transformers.DistilBertModel"),c(bP,"href","/docs/transformers/pr_16995/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(vP,"href","/docs/transformers/pr_16995/en/model_doc/dpt#transformers.DPTModel"),c(FP,"href","/docs/transformers/pr_16995/en/model_doc/electra#transformers.ElectraModel"),c(TP,"href","/docs/transformers/pr_16995/en/model_doc/flaubert#transformers.FlaubertModel"),c(MP,"href","/docs/transformers/pr_16995/en/model_doc/fnet#transformers.FNetModel"),c(EP,"href","/docs/transformers/pr_16995/en/model_doc/fsmt#transformers.FSMTModel"),c(CP,"href","/docs/transformers/pr_16995/en/model_doc/funnel#transformers.FunnelModel"),c(wP,"href","/docs/transformers/pr_16995/en/model_doc/funnel#transformers.FunnelBaseModel"),c(AP,"href","/docs/transformers/pr_16995/en/model_doc/glpn#transformers.GLPNModel"),c(yP,"href","/docs/transformers/pr_16995/en/model_doc/gpt2#transformers.GPT2Model"),c(LP,"href","/docs/transformers/pr_16995/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(xP,"href","/docs/transformers/pr_16995/en/model_doc/gptj#transformers.GPTJModel"),c($P,"href","/docs/transformers/pr_16995/en/model_doc/hubert#transformers.HubertModel"),c(kP,"href","/docs/transformers/pr_16995/en/model_doc/ibert#transformers.IBertModel"),c(SP,"href","/docs/transformers/pr_16995/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(RP,"href","/docs/transformers/pr_16995/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(BP,"href","/docs/transformers/pr_16995/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(PP,"href","/docs/transformers/pr_16995/en/model_doc/led#transformers.LEDModel"),c(IP,"href","/docs/transformers/pr_16995/en/model_doc/longformer#transformers.LongformerModel"),c(qP,"href","/docs/transformers/pr_16995/en/model_doc/luke#transformers.LukeModel"),c(NP,"href","/docs/transformers/pr_16995/en/model_doc/lxmert#transformers.LxmertModel"),c(jP,"href","/docs/transformers/pr_16995/en/model_doc/m2m_100#transformers.M2M100Model"),c(DP,"href","/docs/transformers/pr_16995/en/model_doc/marian#transformers.MarianModel"),c(GP,"href","/docs/transformers/pr_16995/en/model_doc/maskformer#transformers.MaskFormerModel"),c(OP,"href","/docs/transformers/pr_16995/en/model_doc/mbart#transformers.MBartModel"),c(VP,"href","/docs/transformers/pr_16995/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(XP,"href","/docs/transformers/pr_16995/en/model_doc/mobilebert#transformers.MobileBertModel"),c(zP,"href","/docs/transformers/pr_16995/en/model_doc/mpnet#transformers.MPNetModel"),c(QP,"href","/docs/transformers/pr_16995/en/model_doc/mt5#transformers.MT5Model"),c(WP,"href","/docs/transformers/pr_16995/en/model_doc/nystromformer#transformers.NystromformerModel"),c(HP,"href","/docs/transformers/pr_16995/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(UP,"href","/docs/transformers/pr_16995/en/model_doc/pegasus#transformers.PegasusModel"),c(JP,"href","/docs/transformers/pr_16995/en/model_doc/perceiver#transformers.PerceiverModel"),c(YP,"href","/docs/transformers/pr_16995/en/model_doc/plbart#transformers.PLBartModel"),c(KP,"href","/docs/transformers/pr_16995/en/model_doc/poolformer#transformers.PoolFormerModel"),c(ZP,"href","/docs/transformers/pr_16995/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(eI,"href","/docs/transformers/pr_16995/en/model_doc/qdqbert#transformers.QDQBertModel"),c(oI,"href","/docs/transformers/pr_16995/en/model_doc/reformer#transformers.ReformerModel"),c(rI,"href","/docs/transformers/pr_16995/en/model_doc/regnet#transformers.RegNetModel"),c(tI,"href","/docs/transformers/pr_16995/en/model_doc/rembert#transformers.RemBertModel"),c(aI,"href","/docs/transformers/pr_16995/en/model_doc/resnet#transformers.ResNetModel"),c(nI,"href","/docs/transformers/pr_16995/en/model_doc/retribert#transformers.RetriBertModel"),c(sI,"href","/docs/transformers/pr_16995/en/model_doc/roberta#transformers.RobertaModel"),c(lI,"href","/docs/transformers/pr_16995/en/model_doc/roformer#transformers.RoFormerModel"),c(iI,"href","/docs/transformers/pr_16995/en/model_doc/segformer#transformers.SegformerModel"),c(dI,"href","/docs/transformers/pr_16995/en/model_doc/sew#transformers.SEWModel"),c(cI,"href","/docs/transformers/pr_16995/en/model_doc/sew-d#transformers.SEWDModel"),c(fI,"href","/docs/transformers/pr_16995/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(mI,"href","/docs/transformers/pr_16995/en/model_doc/splinter#transformers.SplinterModel"),c(gI,"href","/docs/transformers/pr_16995/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(hI,"href","/docs/transformers/pr_16995/en/model_doc/swin#transformers.SwinModel"),c(pI,"href","/docs/transformers/pr_16995/en/model_doc/t5#transformers.T5Model"),c(uI,"href","/docs/transformers/pr_16995/en/model_doc/tapas#transformers.TapasModel"),c(_I,"href","/docs/transformers/pr_16995/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(bI,"href","/docs/transformers/pr_16995/en/model_doc/unispeech#transformers.UniSpeechModel"),c(vI,"href","/docs/transformers/pr_16995/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(FI,"href","/docs/transformers/pr_16995/en/model_doc/van#transformers.VanModel"),c(TI,"href","/docs/transformers/pr_16995/en/model_doc/vilt#transformers.ViltModel"),c(MI,"href","/docs/transformers/pr_16995/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(EI,"href","/docs/transformers/pr_16995/en/model_doc/visual_bert#transformers.VisualBertModel"),c(CI,"href","/docs/transformers/pr_16995/en/model_doc/vit#transformers.ViTModel"),c(wI,"href","/docs/transformers/pr_16995/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(AI,"href","/docs/transformers/pr_16995/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(yI,"href","/docs/transformers/pr_16995/en/model_doc/wavlm#transformers.WavLMModel"),c(LI,"href","/docs/transformers/pr_16995/en/model_doc/xglm#transformers.XGLMModel"),c(xI,"href","/docs/transformers/pr_16995/en/model_doc/xlm#transformers.XLMModel"),c($I,"href","/docs/transformers/pr_16995/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(kI,"href","/docs/transformers/pr_16995/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(SI,"href","/docs/transformers/pr_16995/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(RI,"href","/docs/transformers/pr_16995/en/model_doc/xlnet#transformers.XLNetModel"),c(BI,"href","/docs/transformers/pr_16995/en/model_doc/yoso#transformers.YosoModel"),c(He,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_u,"id","transformers.AutoModelForPreTraining"),c(_u,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_u,"href","#transformers.AutoModelForPreTraining"),c(bi,"class","relative group"),c(PI,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(II,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qI,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(NI,"href","/docs/transformers/pr_16995/en/model_doc/albert#transformers.AlbertForPreTraining"),c(jI,"href","/docs/transformers/pr_16995/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(DI,"href","/docs/transformers/pr_16995/en/model_doc/bert#transformers.BertForPreTraining"),c(GI,"href","/docs/transformers/pr_16995/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(OI,"href","/docs/transformers/pr_16995/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(VI,"href","/docs/transformers/pr_16995/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(XI,"href","/docs/transformers/pr_16995/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(zI,"href","/docs/transformers/pr_16995/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(QI,"href","/docs/transformers/pr_16995/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(WI,"href","/docs/transformers/pr_16995/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(HI,"href","/docs/transformers/pr_16995/en/model_doc/electra#transformers.ElectraForPreTraining"),c(UI,"href","/docs/transformers/pr_16995/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(JI,"href","/docs/transformers/pr_16995/en/model_doc/fnet#transformers.FNetForPreTraining"),c(YI,"href","/docs/transformers/pr_16995/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(KI,"href","/docs/transformers/pr_16995/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(ZI,"href","/docs/transformers/pr_16995/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(eq,"href","/docs/transformers/pr_16995/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(oq,"href","/docs/transformers/pr_16995/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(rq,"href","/docs/transformers/pr_16995/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(tq,"href","/docs/transformers/pr_16995/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(aq,"href","/docs/transformers/pr_16995/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(nq,"href","/docs/transformers/pr_16995/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(sq,"href","/docs/transformers/pr_16995/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(lq,"href","/docs/transformers/pr_16995/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(iq,"href","/docs/transformers/pr_16995/en/model_doc/retribert#transformers.RetriBertModel"),c(dq,"href","/docs/transformers/pr_16995/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(cq,"href","/docs/transformers/pr_16995/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(fq,"href","/docs/transformers/pr_16995/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(mq,"href","/docs/transformers/pr_16995/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(gq,"href","/docs/transformers/pr_16995/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(hq,"href","/docs/transformers/pr_16995/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(pq,"href","/docs/transformers/pr_16995/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(uq,"href","/docs/transformers/pr_16995/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(_q,"href","/docs/transformers/pr_16995/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(bq,"href","/docs/transformers/pr_16995/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(vq,"href","/docs/transformers/pr_16995/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(Fq,"href","/docs/transformers/pr_16995/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(Tq,"href","/docs/transformers/pr_16995/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(Mq,"href","/docs/transformers/pr_16995/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(s_,"id","transformers.AutoModelForCausalLM"),c(s_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(s_,"href","#transformers.AutoModelForCausalLM"),c(Ti,"class","relative group"),c(Eq,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Cq,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(wq,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Aq,"href","/docs/transformers/pr_16995/en/model_doc/bart#transformers.BartForCausalLM"),c(yq,"href","/docs/transformers/pr_16995/en/model_doc/bert#transformers.BertLMHeadModel"),c(Lq,"href","/docs/transformers/pr_16995/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(xq,"href","/docs/transformers/pr_16995/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c($q,"href","/docs/transformers/pr_16995/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(kq,"href","/docs/transformers/pr_16995/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(Sq,"href","/docs/transformers/pr_16995/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(Rq,"href","/docs/transformers/pr_16995/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(Bq,"href","/docs/transformers/pr_16995/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(Pq,"href","/docs/transformers/pr_16995/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(Iq,"href","/docs/transformers/pr_16995/en/model_doc/electra#transformers.ElectraForCausalLM"),c(qq,"href","/docs/transformers/pr_16995/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(Nq,"href","/docs/transformers/pr_16995/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(jq,"href","/docs/transformers/pr_16995/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(Dq,"href","/docs/transformers/pr_16995/en/model_doc/marian#transformers.MarianForCausalLM"),c(Gq,"href","/docs/transformers/pr_16995/en/model_doc/mbart#transformers.MBartForCausalLM"),c(Oq,"href","/docs/transformers/pr_16995/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(Vq,"href","/docs/transformers/pr_16995/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(Xq,"href","/docs/transformers/pr_16995/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(zq,"href","/docs/transformers/pr_16995/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(Qq,"href","/docs/transformers/pr_16995/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(Wq,"href","/docs/transformers/pr_16995/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(Hq,"href","/docs/transformers/pr_16995/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(Uq,"href","/docs/transformers/pr_16995/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(Jq,"href","/docs/transformers/pr_16995/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(Yq,"href","/docs/transformers/pr_16995/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(Kq,"href","/docs/transformers/pr_16995/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(Zq,"href","/docs/transformers/pr_16995/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(eN,"href","/docs/transformers/pr_16995/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(oN,"href","/docs/transformers/pr_16995/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(rN,"href","/docs/transformers/pr_16995/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(tN,"href","/docs/transformers/pr_16995/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(aN,"href","/docs/transformers/pr_16995/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(nN,"href","/docs/transformers/pr_16995/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(sN,"href","/docs/transformers/pr_16995/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(z_,"id","transformers.AutoModelForMaskedLM"),c(z_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(z_,"href","#transformers.AutoModelForMaskedLM"),c(Ci,"class","relative group"),c(lN,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(iN,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(dN,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cN,"href","/docs/transformers/pr_16995/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(fN,"href","/docs/transformers/pr_16995/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(mN,"href","/docs/transformers/pr_16995/en/model_doc/bert#transformers.BertForMaskedLM"),c(gN,"href","/docs/transformers/pr_16995/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(hN,"href","/docs/transformers/pr_16995/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(pN,"href","/docs/transformers/pr_16995/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(uN,"href","/docs/transformers/pr_16995/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(_N,"href","/docs/transformers/pr_16995/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(bN,"href","/docs/transformers/pr_16995/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(vN,"href","/docs/transformers/pr_16995/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(FN,"href","/docs/transformers/pr_16995/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(TN,"href","/docs/transformers/pr_16995/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(MN,"href","/docs/transformers/pr_16995/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(EN,"href","/docs/transformers/pr_16995/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(CN,"href","/docs/transformers/pr_16995/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(wN,"href","/docs/transformers/pr_16995/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(AN,"href","/docs/transformers/pr_16995/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(yN,"href","/docs/transformers/pr_16995/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(LN,"href","/docs/transformers/pr_16995/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(xN,"href","/docs/transformers/pr_16995/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c($N,"href","/docs/transformers/pr_16995/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(kN,"href","/docs/transformers/pr_16995/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(SN,"href","/docs/transformers/pr_16995/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(RN,"href","/docs/transformers/pr_16995/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(BN,"href","/docs/transformers/pr_16995/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(PN,"href","/docs/transformers/pr_16995/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(IN,"href","/docs/transformers/pr_16995/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(qN,"href","/docs/transformers/pr_16995/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(NN,"href","/docs/transformers/pr_16995/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(jN,"href","/docs/transformers/pr_16995/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(DN,"href","/docs/transformers/pr_16995/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(GN,"href","/docs/transformers/pr_16995/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(ON,"href","/docs/transformers/pr_16995/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(VN,"href","/docs/transformers/pr_16995/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($1,"id","transformers.AutoModelForSeq2SeqLM"),c($1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($1,"href","#transformers.AutoModelForSeq2SeqLM"),c(yi,"class","relative group"),c(XN,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zN,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(QN,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WN,"href","/docs/transformers/pr_16995/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(HN,"href","/docs/transformers/pr_16995/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(UN,"href","/docs/transformers/pr_16995/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(JN,"href","/docs/transformers/pr_16995/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(YN,"href","/docs/transformers/pr_16995/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(KN,"href","/docs/transformers/pr_16995/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(ZN,"href","/docs/transformers/pr_16995/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(ej,"href","/docs/transformers/pr_16995/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(oj,"href","/docs/transformers/pr_16995/en/model_doc/marian#transformers.MarianMTModel"),c(rj,"href","/docs/transformers/pr_16995/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(tj,"href","/docs/transformers/pr_16995/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(aj,"href","/docs/transformers/pr_16995/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(nj,"href","/docs/transformers/pr_16995/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(sj,"href","/docs/transformers/pr_16995/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(lj,"href","/docs/transformers/pr_16995/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(ij,"href","/docs/transformers/pr_16995/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(dj,"href","/docs/transformers/pr_16995/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Y1,"id","transformers.AutoModelForSequenceClassification"),c(Y1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Y1,"href","#transformers.AutoModelForSequenceClassification"),c($i,"class","relative group"),c(cj,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(fj,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(mj,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(at,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gj,"href","/docs/transformers/pr_16995/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(hj,"href","/docs/transformers/pr_16995/en/model_doc/bart#transformers.BartForSequenceClassification"),c(pj,"href","/docs/transformers/pr_16995/en/model_doc/bert#transformers.BertForSequenceClassification"),c(uj,"href","/docs/transformers/pr_16995/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(_j,"href","/docs/transformers/pr_16995/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(bj,"href","/docs/transformers/pr_16995/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(vj,"href","/docs/transformers/pr_16995/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(Fj,"href","/docs/transformers/pr_16995/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(Tj,"href","/docs/transformers/pr_16995/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(Mj,"href","/docs/transformers/pr_16995/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(Ej,"href","/docs/transformers/pr_16995/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(Cj,"href","/docs/transformers/pr_16995/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(wj,"href","/docs/transformers/pr_16995/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(Aj,"href","/docs/transformers/pr_16995/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(yj,"href","/docs/transformers/pr_16995/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(Lj,"href","/docs/transformers/pr_16995/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(xj,"href","/docs/transformers/pr_16995/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c($j,"href","/docs/transformers/pr_16995/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(kj,"href","/docs/transformers/pr_16995/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(Sj,"href","/docs/transformers/pr_16995/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(Rj,"href","/docs/transformers/pr_16995/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(Bj,"href","/docs/transformers/pr_16995/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(Pj,"href","/docs/transformers/pr_16995/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(Ij,"href","/docs/transformers/pr_16995/en/model_doc/led#transformers.LEDForSequenceClassification"),c(qj,"href","/docs/transformers/pr_16995/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(Nj,"href","/docs/transformers/pr_16995/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(jj,"href","/docs/transformers/pr_16995/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(Dj,"href","/docs/transformers/pr_16995/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(Gj,"href","/docs/transformers/pr_16995/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(Oj,"href","/docs/transformers/pr_16995/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(Vj,"href","/docs/transformers/pr_16995/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(Xj,"href","/docs/transformers/pr_16995/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(zj,"href","/docs/transformers/pr_16995/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(Qj,"href","/docs/transformers/pr_16995/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(Wj,"href","/docs/transformers/pr_16995/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(Hj,"href","/docs/transformers/pr_16995/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(Uj,"href","/docs/transformers/pr_16995/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(Jj,"href","/docs/transformers/pr_16995/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(Yj,"href","/docs/transformers/pr_16995/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(Kj,"href","/docs/transformers/pr_16995/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(Zj,"href","/docs/transformers/pr_16995/en/model_doc/bart#transformers.BartForSequenceClassification"),c(eD,"href","/docs/transformers/pr_16995/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(oD,"href","/docs/transformers/pr_16995/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(rD,"href","/docs/transformers/pr_16995/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(tD,"href","/docs/transformers/pr_16995/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(aD,"href","/docs/transformers/pr_16995/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(nD,"href","/docs/transformers/pr_16995/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(H9,"id","transformers.AutoModelForMultipleChoice"),c(H9,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(H9,"href","#transformers.AutoModelForMultipleChoice"),c(Ri,"class","relative group"),c(sD,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lD,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(iD,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dD,"href","/docs/transformers/pr_16995/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(cD,"href","/docs/transformers/pr_16995/en/model_doc/bert#transformers.BertForMultipleChoice"),c(fD,"href","/docs/transformers/pr_16995/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(mD,"href","/docs/transformers/pr_16995/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(gD,"href","/docs/transformers/pr_16995/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(hD,"href","/docs/transformers/pr_16995/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(pD,"href","/docs/transformers/pr_16995/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(uD,"href","/docs/transformers/pr_16995/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(_D,"href","/docs/transformers/pr_16995/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(bD,"href","/docs/transformers/pr_16995/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(vD,"href","/docs/transformers/pr_16995/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(FD,"href","/docs/transformers/pr_16995/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(TD,"href","/docs/transformers/pr_16995/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(MD,"href","/docs/transformers/pr_16995/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(ED,"href","/docs/transformers/pr_16995/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(CD,"href","/docs/transformers/pr_16995/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(wD,"href","/docs/transformers/pr_16995/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(AD,"href","/docs/transformers/pr_16995/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(yD,"href","/docs/transformers/pr_16995/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(LD,"href","/docs/transformers/pr_16995/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(xD,"href","/docs/transformers/pr_16995/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c($D,"href","/docs/transformers/pr_16995/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(kD,"href","/docs/transformers/pr_16995/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(SD,"href","/docs/transformers/pr_16995/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(RD,"href","/docs/transformers/pr_16995/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(BD,"href","/docs/transformers/pr_16995/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(PD,"href","/docs/transformers/pr_16995/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(ID,"href","/docs/transformers/pr_16995/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ab,"id","transformers.AutoModelForNextSentencePrediction"),c(Ab,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ab,"href","#transformers.AutoModelForNextSentencePrediction"),c(Ii,"class","relative group"),c(qD,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ND,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(jD,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(st,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DD,"href","/docs/transformers/pr_16995/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(GD,"href","/docs/transformers/pr_16995/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(OD,"href","/docs/transformers/pr_16995/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(VD,"href","/docs/transformers/pr_16995/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(XD,"href","/docs/transformers/pr_16995/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Pb,"id","transformers.AutoModelForTokenClassification"),c(Pb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Pb,"href","#transformers.AutoModelForTokenClassification"),c(ji,"class","relative group"),c(zD,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(QD,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(WD,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HD,"href","/docs/transformers/pr_16995/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(UD,"href","/docs/transformers/pr_16995/en/model_doc/bert#transformers.BertForTokenClassification"),c(JD,"href","/docs/transformers/pr_16995/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(YD,"href","/docs/transformers/pr_16995/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(KD,"href","/docs/transformers/pr_16995/en/model_doc/canine#transformers.CanineForTokenClassification"),c(ZD,"href","/docs/transformers/pr_16995/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(eG,"href","/docs/transformers/pr_16995/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(oG,"href","/docs/transformers/pr_16995/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(rG,"href","/docs/transformers/pr_16995/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(tG,"href","/docs/transformers/pr_16995/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(aG,"href","/docs/transformers/pr_16995/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(nG,"href","/docs/transformers/pr_16995/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(sG,"href","/docs/transformers/pr_16995/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(lG,"href","/docs/transformers/pr_16995/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(iG,"href","/docs/transformers/pr_16995/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(dG,"href","/docs/transformers/pr_16995/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(cG,"href","/docs/transformers/pr_16995/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(fG,"href","/docs/transformers/pr_16995/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(mG,"href","/docs/transformers/pr_16995/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(gG,"href","/docs/transformers/pr_16995/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(hG,"href","/docs/transformers/pr_16995/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(pG,"href","/docs/transformers/pr_16995/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(uG,"href","/docs/transformers/pr_16995/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(_G,"href","/docs/transformers/pr_16995/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(bG,"href","/docs/transformers/pr_16995/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(vG,"href","/docs/transformers/pr_16995/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(FG,"href","/docs/transformers/pr_16995/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(TG,"href","/docs/transformers/pr_16995/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(MG,"href","/docs/transformers/pr_16995/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(EG,"href","/docs/transformers/pr_16995/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(CG,"href","/docs/transformers/pr_16995/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(wG,"href","/docs/transformers/pr_16995/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(AG,"href","/docs/transformers/pr_16995/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(b2,"id","transformers.AutoModelForQuestionAnswering"),c(b2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(b2,"href","#transformers.AutoModelForQuestionAnswering"),c(Oi,"class","relative group"),c(yG,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(LG,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(xG,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($G,"href","/docs/transformers/pr_16995/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(kG,"href","/docs/transformers/pr_16995/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(SG,"href","/docs/transformers/pr_16995/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(RG,"href","/docs/transformers/pr_16995/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(BG,"href","/docs/transformers/pr_16995/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(PG,"href","/docs/transformers/pr_16995/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(IG,"href","/docs/transformers/pr_16995/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(qG,"href","/docs/transformers/pr_16995/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(NG,"href","/docs/transformers/pr_16995/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(jG,"href","/docs/transformers/pr_16995/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(DG,"href","/docs/transformers/pr_16995/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(GG,"href","/docs/transformers/pr_16995/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(OG,"href","/docs/transformers/pr_16995/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(VG,"href","/docs/transformers/pr_16995/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(XG,"href","/docs/transformers/pr_16995/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(zG,"href","/docs/transformers/pr_16995/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(QG,"href","/docs/transformers/pr_16995/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(WG,"href","/docs/transformers/pr_16995/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(HG,"href","/docs/transformers/pr_16995/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(UG,"href","/docs/transformers/pr_16995/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(JG,"href","/docs/transformers/pr_16995/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(YG,"href","/docs/transformers/pr_16995/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(KG,"href","/docs/transformers/pr_16995/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(ZG,"href","/docs/transformers/pr_16995/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(eO,"href","/docs/transformers/pr_16995/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(oO,"href","/docs/transformers/pr_16995/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(rO,"href","/docs/transformers/pr_16995/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(tO,"href","/docs/transformers/pr_16995/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(aO,"href","/docs/transformers/pr_16995/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(nO,"href","/docs/transformers/pr_16995/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(sO,"href","/docs/transformers/pr_16995/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(lO,"href","/docs/transformers/pr_16995/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(iO,"href","/docs/transformers/pr_16995/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(dO,"href","/docs/transformers/pr_16995/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(cO,"href","/docs/transformers/pr_16995/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(fO,"href","/docs/transformers/pr_16995/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(mO,"href","/docs/transformers/pr_16995/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(gO,"href","/docs/transformers/pr_16995/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(hO,"href","/docs/transformers/pr_16995/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(l5,"id","transformers.AutoModelForTableQuestionAnswering"),c(l5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(l5,"href","#transformers.AutoModelForTableQuestionAnswering"),c(zi,"class","relative group"),c(pO,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(uO,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(_O,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bO,"href","/docs/transformers/pr_16995/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(m5,"id","transformers.AutoModelForImageClassification"),c(m5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m5,"href","#transformers.AutoModelForImageClassification"),c(Hi,"class","relative group"),c(vO,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(FO,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(TO,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MO,"href","/docs/transformers/pr_16995/en/model_doc/beit#transformers.BeitForImageClassification"),c(EO,"href","/docs/transformers/pr_16995/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(CO,"href","/docs/transformers/pr_16995/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),c(wO,"href","/docs/transformers/pr_16995/en/model_doc/deit#transformers.DeiTForImageClassification"),c(AO,"href","/docs/transformers/pr_16995/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(yO,"href","/docs/transformers/pr_16995/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(LO,"href","/docs/transformers/pr_16995/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(xO,"href","/docs/transformers/pr_16995/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c($O,"href","/docs/transformers/pr_16995/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(kO,"href","/docs/transformers/pr_16995/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(SO,"href","/docs/transformers/pr_16995/en/model_doc/regnet#transformers.RegNetForImageClassification"),c(RO,"href","/docs/transformers/pr_16995/en/model_doc/resnet#transformers.ResNetForImageClassification"),c(BO,"href","/docs/transformers/pr_16995/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(PO,"href","/docs/transformers/pr_16995/en/model_doc/swin#transformers.SwinForImageClassification"),c(IO,"href","/docs/transformers/pr_16995/en/model_doc/van#transformers.VanForImageClassification"),c(qO,"href","/docs/transformers/pr_16995/en/model_doc/vit#transformers.ViTForImageClassification"),c(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(y5,"id","transformers.AutoModelForVision2Seq"),c(y5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(y5,"href","#transformers.AutoModelForVision2Seq"),c(Yi,"class","relative group"),c(NO,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jO,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(DO,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GO,"href","/docs/transformers/pr_16995/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Do,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(S5,"id","transformers.AutoModelForAudioClassification"),c(S5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(S5,"href","#transformers.AutoModelForAudioClassification"),c(ed,"class","relative group"),c(OO,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(VO,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(XO,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zO,"href","/docs/transformers/pr_16995/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(QO,"href","/docs/transformers/pr_16995/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(WO,"href","/docs/transformers/pr_16995/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(HO,"href","/docs/transformers/pr_16995/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(UO,"href","/docs/transformers/pr_16995/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(JO,"href","/docs/transformers/pr_16995/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(YO,"href","/docs/transformers/pr_16995/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(KO,"href","/docs/transformers/pr_16995/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(X5,"id","transformers.AutoModelForAudioFrameClassification"),c(X5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(X5,"href","#transformers.AutoModelForAudioFrameClassification"),c(td,"class","relative group"),c(ZO,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(eV,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(oV,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rV,"href","/docs/transformers/pr_16995/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(tV,"href","/docs/transformers/pr_16995/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(aV,"href","/docs/transformers/pr_16995/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(nV,"href","/docs/transformers/pr_16995/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(K5,"id","transformers.AutoModelForCTC"),c(K5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(K5,"href","#transformers.AutoModelForCTC"),c(sd,"class","relative group"),c(sV,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lV,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(iV,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dV,"href","/docs/transformers/pr_16995/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(cV,"href","/docs/transformers/pr_16995/en/model_doc/hubert#transformers.HubertForCTC"),c(fV,"href","/docs/transformers/pr_16995/en/model_doc/sew#transformers.SEWForCTC"),c(mV,"href","/docs/transformers/pr_16995/en/model_doc/sew-d#transformers.SEWDForCTC"),c(gV,"href","/docs/transformers/pr_16995/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(hV,"href","/docs/transformers/pr_16995/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(pV,"href","/docs/transformers/pr_16995/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(uV,"href","/docs/transformers/pr_16995/en/model_doc/wavlm#transformers.WavLMForCTC"),c(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cv,"id","transformers.AutoModelForSpeechSeq2Seq"),c(cv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(cv,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(dd,"class","relative group"),c(_V,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bV,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(vV,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FV,"href","/docs/transformers/pr_16995/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(TV,"href","/docs/transformers/pr_16995/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uv,"id","transformers.AutoModelForAudioXVector"),c(uv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(uv,"href","#transformers.AutoModelForAudioXVector"),c(md,"class","relative group"),c(MV,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(EV,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(CV,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wV,"href","/docs/transformers/pr_16995/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(AV,"href","/docs/transformers/pr_16995/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(yV,"href","/docs/transformers/pr_16995/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(LV,"href","/docs/transformers/pr_16995/en/model_doc/wavlm#transformers.WavLMForXVector"),c(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Cv,"id","transformers.AutoModelForMaskedImageModeling"),c(Cv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Cv,"href","#transformers.AutoModelForMaskedImageModeling"),c(pd,"class","relative group"),c(xV,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($V,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(kV,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(SV,"href","/docs/transformers/pr_16995/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(RV,"href","/docs/transformers/pr_16995/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(BV,"href","/docs/transformers/pr_16995/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kv,"id","transformers.AutoModelForObjectDetection"),c(kv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(kv,"href","#transformers.AutoModelForObjectDetection"),c(vd,"class","relative group"),c(PV,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(IV,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qV,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(NV,"href","/docs/transformers/pr_16995/en/model_doc/detr#transformers.DetrForObjectDetection"),c(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Iv,"id","transformers.AutoModelForImageSegmentation"),c(Iv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Iv,"href","#transformers.AutoModelForImageSegmentation"),c(Md,"class","relative group"),c(jV,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(DV,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(GV,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OV,"href","/docs/transformers/pr_16995/en/model_doc/detr#transformers.DetrForSegmentation"),c(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Gv,"id","transformers.AutoModelForSemanticSegmentation"),c(Gv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Gv,"href","#transformers.AutoModelForSemanticSegmentation"),c(wd,"class","relative group"),c(VV,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(XV,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(zV,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QV,"href","/docs/transformers/pr_16995/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(WV,"href","/docs/transformers/pr_16995/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),c(HV,"href","/docs/transformers/pr_16995/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),c(UV,"href","/docs/transformers/pr_16995/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uv,"id","transformers.AutoModelForInstanceSegmentation"),c(Uv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Uv,"href","#transformers.AutoModelForInstanceSegmentation"),c(Ld,"class","relative group"),c(JV,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(YV,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(KV,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZV,"href","/docs/transformers/pr_16995/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eF,"id","transformers.TFAutoModel"),c(eF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(eF,"href","#transformers.TFAutoModel"),c(kd,"class","relative group"),c(eX,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oX,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(rX,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tX,"href","/docs/transformers/pr_16995/en/model_doc/albert#transformers.TFAlbertModel"),c(aX,"href","/docs/transformers/pr_16995/en/model_doc/bart#transformers.TFBartModel"),c(nX,"href","/docs/transformers/pr_16995/en/model_doc/bert#transformers.TFBertModel"),c(sX,"href","/docs/transformers/pr_16995/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(lX,"href","/docs/transformers/pr_16995/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(iX,"href","/docs/transformers/pr_16995/en/model_doc/camembert#transformers.TFCamembertModel"),c(dX,"href","/docs/transformers/pr_16995/en/model_doc/clip#transformers.TFCLIPModel"),c(cX,"href","/docs/transformers/pr_16995/en/model_doc/convbert#transformers.TFConvBertModel"),c(fX,"href","/docs/transformers/pr_16995/en/model_doc/convnext#transformers.TFConvNextModel"),c(mX,"href","/docs/transformers/pr_16995/en/model_doc/ctrl#transformers.TFCTRLModel"),c(gX,"href","/docs/transformers/pr_16995/en/model_doc/deberta#transformers.TFDebertaModel"),c(hX,"href","/docs/transformers/pr_16995/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(pX,"href","/docs/transformers/pr_16995/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(uX,"href","/docs/transformers/pr_16995/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(_X,"href","/docs/transformers/pr_16995/en/model_doc/electra#transformers.TFElectraModel"),c(bX,"href","/docs/transformers/pr_16995/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(vX,"href","/docs/transformers/pr_16995/en/model_doc/funnel#transformers.TFFunnelModel"),c(FX,"href","/docs/transformers/pr_16995/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(TX,"href","/docs/transformers/pr_16995/en/model_doc/gpt2#transformers.TFGPT2Model"),c(MX,"href","/docs/transformers/pr_16995/en/model_doc/gptj#transformers.TFGPTJModel"),c(EX,"href","/docs/transformers/pr_16995/en/model_doc/hubert#transformers.TFHubertModel"),c(CX,"href","/docs/transformers/pr_16995/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(wX,"href","/docs/transformers/pr_16995/en/model_doc/led#transformers.TFLEDModel"),c(AX,"href","/docs/transformers/pr_16995/en/model_doc/longformer#transformers.TFLongformerModel"),c(yX,"href","/docs/transformers/pr_16995/en/model_doc/lxmert#transformers.TFLxmertModel"),c(LX,"href","/docs/transformers/pr_16995/en/model_doc/marian#transformers.TFMarianModel"),c(xX,"href","/docs/transformers/pr_16995/en/model_doc/mbart#transformers.TFMBartModel"),c($X,"href","/docs/transformers/pr_16995/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(kX,"href","/docs/transformers/pr_16995/en/model_doc/mpnet#transformers.TFMPNetModel"),c(SX,"href","/docs/transformers/pr_16995/en/model_doc/mt5#transformers.TFMT5Model"),c(RX,"href","/docs/transformers/pr_16995/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(BX,"href","/docs/transformers/pr_16995/en/model_doc/pegasus#transformers.TFPegasusModel"),c(PX,"href","/docs/transformers/pr_16995/en/model_doc/rembert#transformers.TFRemBertModel"),c(IX,"href","/docs/transformers/pr_16995/en/model_doc/roberta#transformers.TFRobertaModel"),c(qX,"href","/docs/transformers/pr_16995/en/model_doc/roformer#transformers.TFRoFormerModel"),c(NX,"href","/docs/transformers/pr_16995/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(jX,"href","/docs/transformers/pr_16995/en/model_doc/t5#transformers.TFT5Model"),c(DX,"href","/docs/transformers/pr_16995/en/model_doc/tapas#transformers.TFTapasModel"),c(GX,"href","/docs/transformers/pr_16995/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(OX,"href","/docs/transformers/pr_16995/en/model_doc/vit#transformers.TFViTModel"),c(VX,"href","/docs/transformers/pr_16995/en/model_doc/vit_mae#transformers.TFViTMAEModel"),c(XX,"href","/docs/transformers/pr_16995/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(zX,"href","/docs/transformers/pr_16995/en/model_doc/xlm#transformers.TFXLMModel"),c(QX,"href","/docs/transformers/pr_16995/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(WX,"href","/docs/transformers/pr_16995/en/model_doc/xlnet#transformers.TFXLNetModel"),c(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QF,"id","transformers.TFAutoModelForPreTraining"),c(QF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(QF,"href","#transformers.TFAutoModelForPreTraining"),c(Bd,"class","relative group"),c(HX,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(UX,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(JX,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YX,"href","/docs/transformers/pr_16995/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(KX,"href","/docs/transformers/pr_16995/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(ZX,"href","/docs/transformers/pr_16995/en/model_doc/bert#transformers.TFBertForPreTraining"),c(ez,"href","/docs/transformers/pr_16995/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(oz,"href","/docs/transformers/pr_16995/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(rz,"href","/docs/transformers/pr_16995/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(tz,"href","/docs/transformers/pr_16995/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(az,"href","/docs/transformers/pr_16995/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(nz,"href","/docs/transformers/pr_16995/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(sz,"href","/docs/transformers/pr_16995/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(lz,"href","/docs/transformers/pr_16995/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(iz,"href","/docs/transformers/pr_16995/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(dz,"href","/docs/transformers/pr_16995/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(cz,"href","/docs/transformers/pr_16995/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(fz,"href","/docs/transformers/pr_16995/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(mz,"href","/docs/transformers/pr_16995/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(gz,"href","/docs/transformers/pr_16995/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(hz,"href","/docs/transformers/pr_16995/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(pz,"href","/docs/transformers/pr_16995/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(uz,"href","/docs/transformers/pr_16995/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),c(_z,"href","/docs/transformers/pr_16995/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(bz,"href","/docs/transformers/pr_16995/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(vz,"href","/docs/transformers/pr_16995/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(b6,"id","transformers.TFAutoModelForCausalLM"),c(b6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(b6,"href","#transformers.TFAutoModelForCausalLM"),c(qd,"class","relative group"),c(Fz,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tz,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Mz,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ez,"href","/docs/transformers/pr_16995/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(Cz,"href","/docs/transformers/pr_16995/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c(wz,"href","/docs/transformers/pr_16995/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(Az,"href","/docs/transformers/pr_16995/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(yz,"href","/docs/transformers/pr_16995/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),c(Lz,"href","/docs/transformers/pr_16995/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(xz,"href","/docs/transformers/pr_16995/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c($z,"href","/docs/transformers/pr_16995/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(kz,"href","/docs/transformers/pr_16995/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(Sz,"href","/docs/transformers/pr_16995/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(Rz,"href","/docs/transformers/pr_16995/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(Bz,"href","/docs/transformers/pr_16995/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(R6,"id","transformers.TFAutoModelForImageClassification"),c(R6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(R6,"href","#transformers.TFAutoModelForImageClassification"),c(Dd,"class","relative group"),c(Pz,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Iz,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qz,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Nz,"href","/docs/transformers/pr_16995/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(jz,"href","/docs/transformers/pr_16995/en/model_doc/vit#transformers.TFViTForImageClassification"),c(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(N6,"id","transformers.TFAutoModelForMaskedLM"),c(N6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(N6,"href","#transformers.TFAutoModelForMaskedLM"),c(Vd,"class","relative group"),c(Dz,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gz,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Oz,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vz,"href","/docs/transformers/pr_16995/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(Xz,"href","/docs/transformers/pr_16995/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(zz,"href","/docs/transformers/pr_16995/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(Qz,"href","/docs/transformers/pr_16995/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(Wz,"href","/docs/transformers/pr_16995/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(Hz,"href","/docs/transformers/pr_16995/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(Uz,"href","/docs/transformers/pr_16995/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(Jz,"href","/docs/transformers/pr_16995/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(Yz,"href","/docs/transformers/pr_16995/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(Kz,"href","/docs/transformers/pr_16995/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(Zz,"href","/docs/transformers/pr_16995/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(eQ,"href","/docs/transformers/pr_16995/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(oQ,"href","/docs/transformers/pr_16995/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(rQ,"href","/docs/transformers/pr_16995/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(tQ,"href","/docs/transformers/pr_16995/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(aQ,"href","/docs/transformers/pr_16995/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(nQ,"href","/docs/transformers/pr_16995/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(sQ,"href","/docs/transformers/pr_16995/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(lQ,"href","/docs/transformers/pr_16995/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(iQ,"href","/docs/transformers/pr_16995/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lT,"id","transformers.TFAutoModelForSeq2SeqLM"),c(lT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(lT,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(Qd,"class","relative group"),c(dQ,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cQ,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(fQ,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mQ,"href","/docs/transformers/pr_16995/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(gQ,"href","/docs/transformers/pr_16995/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(hQ,"href","/docs/transformers/pr_16995/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(pQ,"href","/docs/transformers/pr_16995/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(uQ,"href","/docs/transformers/pr_16995/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(_Q,"href","/docs/transformers/pr_16995/en/model_doc/marian#transformers.TFMarianMTModel"),c(bQ,"href","/docs/transformers/pr_16995/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(vQ,"href","/docs/transformers/pr_16995/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(FQ,"href","/docs/transformers/pr_16995/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(TQ,"href","/docs/transformers/pr_16995/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FT,"id","transformers.TFAutoModelForSequenceClassification"),c(FT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(FT,"href","#transformers.TFAutoModelForSequenceClassification"),c(Ud,"class","relative group"),c(MQ,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(EQ,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(CQ,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wQ,"href","/docs/transformers/pr_16995/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(AQ,"href","/docs/transformers/pr_16995/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(yQ,"href","/docs/transformers/pr_16995/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(LQ,"href","/docs/transformers/pr_16995/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(xQ,"href","/docs/transformers/pr_16995/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c($Q,"href","/docs/transformers/pr_16995/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(kQ,"href","/docs/transformers/pr_16995/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(SQ,"href","/docs/transformers/pr_16995/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(RQ,"href","/docs/transformers/pr_16995/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(BQ,"href","/docs/transformers/pr_16995/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(PQ,"href","/docs/transformers/pr_16995/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(IQ,"href","/docs/transformers/pr_16995/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(qQ,"href","/docs/transformers/pr_16995/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),c(NQ,"href","/docs/transformers/pr_16995/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(jQ,"href","/docs/transformers/pr_16995/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(DQ,"href","/docs/transformers/pr_16995/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(GQ,"href","/docs/transformers/pr_16995/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(OQ,"href","/docs/transformers/pr_16995/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(VQ,"href","/docs/transformers/pr_16995/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(XQ,"href","/docs/transformers/pr_16995/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(zQ,"href","/docs/transformers/pr_16995/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(QQ,"href","/docs/transformers/pr_16995/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(WQ,"href","/docs/transformers/pr_16995/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(HQ,"href","/docs/transformers/pr_16995/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(UQ,"href","/docs/transformers/pr_16995/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(JQ,"href","/docs/transformers/pr_16995/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UT,"id","transformers.TFAutoModelForMultipleChoice"),c(UT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(UT,"href","#transformers.TFAutoModelForMultipleChoice"),c(Kd,"class","relative group"),c(YQ,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(KQ,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ZQ,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eW,"href","/docs/transformers/pr_16995/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(oW,"href","/docs/transformers/pr_16995/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(rW,"href","/docs/transformers/pr_16995/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(tW,"href","/docs/transformers/pr_16995/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(aW,"href","/docs/transformers/pr_16995/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(nW,"href","/docs/transformers/pr_16995/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(sW,"href","/docs/transformers/pr_16995/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(lW,"href","/docs/transformers/pr_16995/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(iW,"href","/docs/transformers/pr_16995/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(dW,"href","/docs/transformers/pr_16995/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(cW,"href","/docs/transformers/pr_16995/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(fW,"href","/docs/transformers/pr_16995/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(mW,"href","/docs/transformers/pr_16995/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(gW,"href","/docs/transformers/pr_16995/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(hW,"href","/docs/transformers/pr_16995/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(pW,"href","/docs/transformers/pr_16995/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(uW,"href","/docs/transformers/pr_16995/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pM,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(pM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(pM,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(oc,"class","relative group"),c(_W,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bW,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(vW,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FW,"href","/docs/transformers/pr_16995/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vM,"id","transformers.TFAutoModelForTokenClassification"),c(vM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(vM,"href","#transformers.TFAutoModelForTokenClassification"),c(ac,"class","relative group"),c(TW,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(MW,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(EW,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CW,"href","/docs/transformers/pr_16995/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(wW,"href","/docs/transformers/pr_16995/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(AW,"href","/docs/transformers/pr_16995/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(yW,"href","/docs/transformers/pr_16995/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(LW,"href","/docs/transformers/pr_16995/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(xW,"href","/docs/transformers/pr_16995/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c($W,"href","/docs/transformers/pr_16995/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(kW,"href","/docs/transformers/pr_16995/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(SW,"href","/docs/transformers/pr_16995/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(RW,"href","/docs/transformers/pr_16995/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(BW,"href","/docs/transformers/pr_16995/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(PW,"href","/docs/transformers/pr_16995/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(IW,"href","/docs/transformers/pr_16995/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(qW,"href","/docs/transformers/pr_16995/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(NW,"href","/docs/transformers/pr_16995/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(jW,"href","/docs/transformers/pr_16995/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(DW,"href","/docs/transformers/pr_16995/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(GW,"href","/docs/transformers/pr_16995/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(OW,"href","/docs/transformers/pr_16995/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(VW,"href","/docs/transformers/pr_16995/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OM,"id","transformers.TFAutoModelForQuestionAnswering"),c(OM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(OM,"href","#transformers.TFAutoModelForQuestionAnswering"),c(lc,"class","relative group"),c(XW,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zW,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(QW,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WW,"href","/docs/transformers/pr_16995/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(HW,"href","/docs/transformers/pr_16995/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(UW,"href","/docs/transformers/pr_16995/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(JW,"href","/docs/transformers/pr_16995/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(YW,"href","/docs/transformers/pr_16995/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(KW,"href","/docs/transformers/pr_16995/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(ZW,"href","/docs/transformers/pr_16995/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(eH,"href","/docs/transformers/pr_16995/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(oH,"href","/docs/transformers/pr_16995/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(rH,"href","/docs/transformers/pr_16995/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(tH,"href","/docs/transformers/pr_16995/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),c(aH,"href","/docs/transformers/pr_16995/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(nH,"href","/docs/transformers/pr_16995/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(sH,"href","/docs/transformers/pr_16995/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(lH,"href","/docs/transformers/pr_16995/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(iH,"href","/docs/transformers/pr_16995/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(dH,"href","/docs/transformers/pr_16995/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(cH,"href","/docs/transformers/pr_16995/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(fH,"href","/docs/transformers/pr_16995/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(mH,"href","/docs/transformers/pr_16995/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(f4,"id","transformers.TFAutoModelForVision2Seq"),c(f4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(f4,"href","#transformers.TFAutoModelForVision2Seq"),c(cc,"class","relative group"),c(gH,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(hH,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(pH,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uH,"href","/docs/transformers/pr_16995/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(p4,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(p4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(p4,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(gc,"class","relative group"),c(_H,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bH,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(vH,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FH,"href","/docs/transformers/pr_16995/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(v4,"id","transformers.FlaxAutoModel"),c(v4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(v4,"href","#transformers.FlaxAutoModel"),c(uc,"class","relative group"),c(TH,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(MH,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(EH,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CH,"href","/docs/transformers/pr_16995/en/model_doc/albert#transformers.FlaxAlbertModel"),c(wH,"href","/docs/transformers/pr_16995/en/model_doc/bart#transformers.FlaxBartModel"),c(AH,"href","/docs/transformers/pr_16995/en/model_doc/beit#transformers.FlaxBeitModel"),c(yH,"href","/docs/transformers/pr_16995/en/model_doc/bert#transformers.FlaxBertModel"),c(LH,"href","/docs/transformers/pr_16995/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(xH,"href","/docs/transformers/pr_16995/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c($H,"href","/docs/transformers/pr_16995/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(kH,"href","/docs/transformers/pr_16995/en/model_doc/clip#transformers.FlaxCLIPModel"),c(SH,"href","/docs/transformers/pr_16995/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(RH,"href","/docs/transformers/pr_16995/en/model_doc/electra#transformers.FlaxElectraModel"),c(BH,"href","/docs/transformers/pr_16995/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(PH,"href","/docs/transformers/pr_16995/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(IH,"href","/docs/transformers/pr_16995/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(qH,"href","/docs/transformers/pr_16995/en/model_doc/marian#transformers.FlaxMarianModel"),c(NH,"href","/docs/transformers/pr_16995/en/model_doc/mbart#transformers.FlaxMBartModel"),c(jH,"href","/docs/transformers/pr_16995/en/model_doc/mt5#transformers.FlaxMT5Model"),c(DH,"href","/docs/transformers/pr_16995/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(GH,"href","/docs/transformers/pr_16995/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(OH,"href","/docs/transformers/pr_16995/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(VH,"href","/docs/transformers/pr_16995/en/model_doc/t5#transformers.FlaxT5Model"),c(XH,"href","/docs/transformers/pr_16995/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(zH,"href","/docs/transformers/pr_16995/en/model_doc/vit#transformers.FlaxViTModel"),c(QH,"href","/docs/transformers/pr_16995/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(WH,"href","/docs/transformers/pr_16995/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(HH,"href","/docs/transformers/pr_16995/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(W4,"id","transformers.FlaxAutoModelForCausalLM"),c(W4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(W4,"href","#transformers.FlaxAutoModelForCausalLM"),c(vc,"class","relative group"),c(UH,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(JH,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(YH,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KH,"href","/docs/transformers/pr_16995/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c(ZH,"href","/docs/transformers/pr_16995/en/model_doc/bert#transformers.FlaxBertForCausalLM"),c(eU,"href","/docs/transformers/pr_16995/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM"),c(oU,"href","/docs/transformers/pr_16995/en/model_doc/electra#transformers.FlaxElectraForCausalLM"),c(rU,"href","/docs/transformers/pr_16995/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(tU,"href","/docs/transformers/pr_16995/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(aU,"href","/docs/transformers/pr_16995/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(nU,"href","/docs/transformers/pr_16995/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM"),c(sU,"href","/docs/transformers/pr_16995/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nE,"id","transformers.FlaxAutoModelForPreTraining"),c(nE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(nE,"href","#transformers.FlaxAutoModelForPreTraining"),c(Mc,"class","relative group"),c(lU,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(iU,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(dU,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cU,"href","/docs/transformers/pr_16995/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(fU,"href","/docs/transformers/pr_16995/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(mU,"href","/docs/transformers/pr_16995/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(gU,"href","/docs/transformers/pr_16995/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(hU,"href","/docs/transformers/pr_16995/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(pU,"href","/docs/transformers/pr_16995/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(uU,"href","/docs/transformers/pr_16995/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(_U,"href","/docs/transformers/pr_16995/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(bU,"href","/docs/transformers/pr_16995/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(vU,"href","/docs/transformers/pr_16995/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(FU,"href","/docs/transformers/pr_16995/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(TU,"href","/docs/transformers/pr_16995/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FE,"id","transformers.FlaxAutoModelForMaskedLM"),c(FE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(FE,"href","#transformers.FlaxAutoModelForMaskedLM"),c(wc,"class","relative group"),c(MU,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(EU,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(CU,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wU,"href","/docs/transformers/pr_16995/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(AU,"href","/docs/transformers/pr_16995/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(yU,"href","/docs/transformers/pr_16995/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(LU,"href","/docs/transformers/pr_16995/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(xU,"href","/docs/transformers/pr_16995/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c($U,"href","/docs/transformers/pr_16995/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(kU,"href","/docs/transformers/pr_16995/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(SU,"href","/docs/transformers/pr_16995/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(RU,"href","/docs/transformers/pr_16995/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(BU,"href","/docs/transformers/pr_16995/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(RE,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(RE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(RE,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(Lc,"class","relative group"),c(PU,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(IU,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qU,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(NU,"href","/docs/transformers/pr_16995/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(jU,"href","/docs/transformers/pr_16995/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(DU,"href","/docs/transformers/pr_16995/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(GU,"href","/docs/transformers/pr_16995/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(OU,"href","/docs/transformers/pr_16995/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(VU,"href","/docs/transformers/pr_16995/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(XU,"href","/docs/transformers/pr_16995/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(zU,"href","/docs/transformers/pr_16995/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(QU,"href","/docs/transformers/pr_16995/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zE,"id","transformers.FlaxAutoModelForSequenceClassification"),c(zE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(zE,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(kc,"class","relative group"),c(WU,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(HU,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(UU,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JU,"href","/docs/transformers/pr_16995/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(YU,"href","/docs/transformers/pr_16995/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(KU,"href","/docs/transformers/pr_16995/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(ZU,"href","/docs/transformers/pr_16995/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(eJ,"href","/docs/transformers/pr_16995/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(oJ,"href","/docs/transformers/pr_16995/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(rJ,"href","/docs/transformers/pr_16995/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(tJ,"href","/docs/transformers/pr_16995/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(aJ,"href","/docs/transformers/pr_16995/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(nJ,"href","/docs/transformers/pr_16995/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aC,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(aC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(aC,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(Bc,"class","relative group"),c(sJ,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lJ,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(iJ,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dJ,"href","/docs/transformers/pr_16995/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(cJ,"href","/docs/transformers/pr_16995/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(fJ,"href","/docs/transformers/pr_16995/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(mJ,"href","/docs/transformers/pr_16995/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(gJ,"href","/docs/transformers/pr_16995/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(hJ,"href","/docs/transformers/pr_16995/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(pJ,"href","/docs/transformers/pr_16995/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(uJ,"href","/docs/transformers/pr_16995/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(_J,"href","/docs/transformers/pr_16995/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(bJ,"href","/docs/transformers/pr_16995/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_C,"id","transformers.FlaxAutoModelForTokenClassification"),c(_C,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_C,"href","#transformers.FlaxAutoModelForTokenClassification"),c(qc,"class","relative group"),c(vJ,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(FJ,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(TJ,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MJ,"href","/docs/transformers/pr_16995/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(EJ,"href","/docs/transformers/pr_16995/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(CJ,"href","/docs/transformers/pr_16995/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(wJ,"href","/docs/transformers/pr_16995/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(AJ,"href","/docs/transformers/pr_16995/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(yJ,"href","/docs/transformers/pr_16995/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(LJ,"href","/docs/transformers/pr_16995/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(xJ,"href","/docs/transformers/pr_16995/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LC,"id","transformers.FlaxAutoModelForMultipleChoice"),c(LC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(LC,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(Dc,"class","relative group"),c($J,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kJ,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(SJ,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(RJ,"href","/docs/transformers/pr_16995/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(BJ,"href","/docs/transformers/pr_16995/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(PJ,"href","/docs/transformers/pr_16995/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(IJ,"href","/docs/transformers/pr_16995/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(qJ,"href","/docs/transformers/pr_16995/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(NJ,"href","/docs/transformers/pr_16995/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(jJ,"href","/docs/transformers/pr_16995/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(DJ,"href","/docs/transformers/pr_16995/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jC,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(jC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(jC,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(Vc,"class","relative group"),c(GJ,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(OJ,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(VJ,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XJ,"href","/docs/transformers/pr_16995/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VC,"id","transformers.FlaxAutoModelForImageClassification"),c(VC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(VC,"href","#transformers.FlaxAutoModelForImageClassification"),c(Qc,"class","relative group"),c(zJ,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(QJ,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(WJ,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HJ,"href","/docs/transformers/pr_16995/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(UJ,"href","/docs/transformers/pr_16995/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HC,"id","transformers.FlaxAutoModelForVision2Seq"),c(HC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(HC,"href","#transformers.FlaxAutoModelForVision2Seq"),c(Uc,"class","relative group"),c(JJ,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(YJ,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(KJ,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZJ,"href","/docs/transformers/pr_16995/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(f,_){e(document.head,g),b(f,v,_),b(f,p,_),e(p,m),e(m,u),M(d,u,null),e(p,h),e(p,Mo),e(Mo,oi),b(f,of,_),b(f,Kr,_),e(Kr,ri),e(Kr,ti),e(ti,gA),e(Kr,rf),b(f,qe,_),b(f,Xe,_),e(Xe,ai),e(Xe,Mn),e(Mn,hA),e(Xe,En),e(Xe,Cn),e(Cn,pA),e(Xe,ni),e(Xe,wn),e(wn,uA),e(Xe,si),b(f,tf,_),M(va,f,_),b(f,ze,_),b(f,Ae,_),e(Ae,L7),e(Ae,li),e(li,x7),e(Ae,$7),b(f,Eo,_),b(f,Fa,_),e(Fa,k7),e(Fa,af),e(af,S7),e(Fa,Uqe),b(f,VRe,_),b(f,ii,_),e(ii,nf),e(nf,XK),M(_A,XK,null),e(ii,Jqe),e(ii,zK),e(zK,Yqe),b(f,XRe,_),b(f,An,_),e(An,Kqe),e(An,QK),e(QK,Zqe),e(An,eNe),e(An,WK),e(WK,oNe),e(An,rNe),b(f,zRe,_),M(bA,f,_),b(f,QRe,_),b(f,R7,_),e(R7,tNe),b(f,WRe,_),M(sf,f,_),b(f,HRe,_),b(f,di,_),e(di,lf),e(lf,HK),M(vA,HK,null),e(di,aNe),e(di,UK),e(UK,nNe),b(f,URe,_),b(f,Co,_),M(FA,Co,null),e(Co,sNe),e(Co,TA),e(TA,lNe),e(TA,B7),e(B7,iNe),e(TA,dNe),e(Co,cNe),e(Co,MA),e(MA,fNe),e(MA,JK),e(JK,mNe),e(MA,gNe),e(Co,hNe),e(Co,Mr),M(EA,Mr,null),e(Mr,pNe),e(Mr,YK),e(YK,uNe),e(Mr,_Ne),e(Mr,ci),e(ci,bNe),e(ci,KK),e(KK,vNe),e(ci,FNe),e(ci,ZK),e(ZK,TNe),e(ci,MNe),e(Mr,ENe),e(Mr,y),e(y,df),e(df,eZ),e(eZ,CNe),e(df,wNe),e(df,P7),e(P7,ANe),e(df,yNe),e(y,LNe),e(y,cf),e(cf,oZ),e(oZ,xNe),e(cf,$Ne),e(cf,I7),e(I7,kNe),e(cf,SNe),e(y,RNe),e(y,ff),e(ff,rZ),e(rZ,BNe),e(ff,PNe),e(ff,q7),e(q7,INe),e(ff,qNe),e(y,NNe),e(y,mf),e(mf,tZ),e(tZ,jNe),e(mf,DNe),e(mf,N7),e(N7,GNe),e(mf,ONe),e(y,VNe),e(y,gf),e(gf,aZ),e(aZ,XNe),e(gf,zNe),e(gf,j7),e(j7,QNe),e(gf,WNe),e(y,HNe),e(y,hf),e(hf,nZ),e(nZ,UNe),e(hf,JNe),e(hf,D7),e(D7,YNe),e(hf,KNe),e(y,ZNe),e(y,pf),e(pf,sZ),e(sZ,eje),e(pf,oje),e(pf,G7),e(G7,rje),e(pf,tje),e(y,aje),e(y,uf),e(uf,lZ),e(lZ,nje),e(uf,sje),e(uf,O7),e(O7,lje),e(uf,ije),e(y,dje),e(y,_f),e(_f,iZ),e(iZ,cje),e(_f,fje),e(_f,V7),e(V7,mje),e(_f,gje),e(y,hje),e(y,bf),e(bf,dZ),e(dZ,pje),e(bf,uje),e(bf,X7),e(X7,_je),e(bf,bje),e(y,vje),e(y,vf),e(vf,cZ),e(cZ,Fje),e(vf,Tje),e(vf,z7),e(z7,Mje),e(vf,Eje),e(y,Cje),e(y,Ff),e(Ff,fZ),e(fZ,wje),e(Ff,Aje),e(Ff,Q7),e(Q7,yje),e(Ff,Lje),e(y,xje),e(y,Tf),e(Tf,mZ),e(mZ,$je),e(Tf,kje),e(Tf,W7),e(W7,Sje),e(Tf,Rje),e(y,Bje),e(y,Mf),e(Mf,gZ),e(gZ,Pje),e(Mf,Ije),e(Mf,H7),e(H7,qje),e(Mf,Nje),e(y,jje),e(y,Ef),e(Ef,hZ),e(hZ,Dje),e(Ef,Gje),e(Ef,U7),e(U7,Oje),e(Ef,Vje),e(y,Xje),e(y,Cf),e(Cf,pZ),e(pZ,zje),e(Cf,Qje),e(Cf,J7),e(J7,Wje),e(Cf,Hje),e(y,Uje),e(y,wf),e(wf,uZ),e(uZ,Jje),e(wf,Yje),e(wf,Y7),e(Y7,Kje),e(wf,Zje),e(y,eDe),e(y,Af),e(Af,_Z),e(_Z,oDe),e(Af,rDe),e(Af,K7),e(K7,tDe),e(Af,aDe),e(y,nDe),e(y,yf),e(yf,bZ),e(bZ,sDe),e(yf,lDe),e(yf,Z7),e(Z7,iDe),e(yf,dDe),e(y,cDe),e(y,Lf),e(Lf,vZ),e(vZ,fDe),e(Lf,mDe),e(Lf,e$),e(e$,gDe),e(Lf,hDe),e(y,pDe),e(y,xf),e(xf,FZ),e(FZ,uDe),e(xf,_De),e(xf,o$),e(o$,bDe),e(xf,vDe),e(y,FDe),e(y,$f),e($f,TZ),e(TZ,TDe),e($f,MDe),e($f,r$),e(r$,EDe),e($f,CDe),e(y,wDe),e(y,kf),e(kf,MZ),e(MZ,ADe),e(kf,yDe),e(kf,t$),e(t$,LDe),e(kf,xDe),e(y,$De),e(y,Sf),e(Sf,EZ),e(EZ,kDe),e(Sf,SDe),e(Sf,a$),e(a$,RDe),e(Sf,BDe),e(y,PDe),e(y,Rf),e(Rf,CZ),e(CZ,IDe),e(Rf,qDe),e(Rf,n$),e(n$,NDe),e(Rf,jDe),e(y,DDe),e(y,Bf),e(Bf,wZ),e(wZ,GDe),e(Bf,ODe),e(Bf,s$),e(s$,VDe),e(Bf,XDe),e(y,zDe),e(y,Pf),e(Pf,AZ),e(AZ,QDe),e(Pf,WDe),e(Pf,l$),e(l$,HDe),e(Pf,UDe),e(y,JDe),e(y,If),e(If,yZ),e(yZ,YDe),e(If,KDe),e(If,i$),e(i$,ZDe),e(If,eGe),e(y,oGe),e(y,qf),e(qf,LZ),e(LZ,rGe),e(qf,tGe),e(qf,d$),e(d$,aGe),e(qf,nGe),e(y,sGe),e(y,Nf),e(Nf,xZ),e(xZ,lGe),e(Nf,iGe),e(Nf,c$),e(c$,dGe),e(Nf,cGe),e(y,fGe),e(y,jf),e(jf,$Z),e($Z,mGe),e(jf,gGe),e(jf,f$),e(f$,hGe),e(jf,pGe),e(y,uGe),e(y,Df),e(Df,kZ),e(kZ,_Ge),e(Df,bGe),e(Df,m$),e(m$,vGe),e(Df,FGe),e(y,TGe),e(y,Gf),e(Gf,SZ),e(SZ,MGe),e(Gf,EGe),e(Gf,g$),e(g$,CGe),e(Gf,wGe),e(y,AGe),e(y,Of),e(Of,RZ),e(RZ,yGe),e(Of,LGe),e(Of,h$),e(h$,xGe),e(Of,$Ge),e(y,kGe),e(y,Vf),e(Vf,BZ),e(BZ,SGe),e(Vf,RGe),e(Vf,p$),e(p$,BGe),e(Vf,PGe),e(y,IGe),e(y,Xf),e(Xf,PZ),e(PZ,qGe),e(Xf,NGe),e(Xf,u$),e(u$,jGe),e(Xf,DGe),e(y,GGe),e(y,zf),e(zf,IZ),e(IZ,OGe),e(zf,VGe),e(zf,_$),e(_$,XGe),e(zf,zGe),e(y,QGe),e(y,Qf),e(Qf,qZ),e(qZ,WGe),e(Qf,HGe),e(Qf,b$),e(b$,UGe),e(Qf,JGe),e(y,YGe),e(y,Wf),e(Wf,NZ),e(NZ,KGe),e(Wf,ZGe),e(Wf,v$),e(v$,eOe),e(Wf,oOe),e(y,rOe),e(y,Hf),e(Hf,jZ),e(jZ,tOe),e(Hf,aOe),e(Hf,F$),e(F$,nOe),e(Hf,sOe),e(y,lOe),e(y,Uf),e(Uf,DZ),e(DZ,iOe),e(Uf,dOe),e(Uf,T$),e(T$,cOe),e(Uf,fOe),e(y,mOe),e(y,Jf),e(Jf,GZ),e(GZ,gOe),e(Jf,hOe),e(Jf,M$),e(M$,pOe),e(Jf,uOe),e(y,_Oe),e(y,Yf),e(Yf,OZ),e(OZ,bOe),e(Yf,vOe),e(Yf,E$),e(E$,FOe),e(Yf,TOe),e(y,MOe),e(y,Kf),e(Kf,VZ),e(VZ,EOe),e(Kf,COe),e(Kf,C$),e(C$,wOe),e(Kf,AOe),e(y,yOe),e(y,Zf),e(Zf,XZ),e(XZ,LOe),e(Zf,xOe),e(Zf,w$),e(w$,$Oe),e(Zf,kOe),e(y,SOe),e(y,em),e(em,zZ),e(zZ,ROe),e(em,BOe),e(em,A$),e(A$,POe),e(em,IOe),e(y,qOe),e(y,om),e(om,QZ),e(QZ,NOe),e(om,jOe),e(om,y$),e(y$,DOe),e(om,GOe),e(y,OOe),e(y,rm),e(rm,WZ),e(WZ,VOe),e(rm,XOe),e(rm,L$),e(L$,zOe),e(rm,QOe),e(y,WOe),e(y,tm),e(tm,HZ),e(HZ,HOe),e(tm,UOe),e(tm,x$),e(x$,JOe),e(tm,YOe),e(y,KOe),e(y,am),e(am,UZ),e(UZ,ZOe),e(am,eVe),e(am,$$),e($$,oVe),e(am,rVe),e(y,tVe),e(y,nm),e(nm,JZ),e(JZ,aVe),e(nm,nVe),e(nm,k$),e(k$,sVe),e(nm,lVe),e(y,iVe),e(y,sm),e(sm,YZ),e(YZ,dVe),e(sm,cVe),e(sm,S$),e(S$,fVe),e(sm,mVe),e(y,gVe),e(y,lm),e(lm,KZ),e(KZ,hVe),e(lm,pVe),e(lm,R$),e(R$,uVe),e(lm,_Ve),e(y,bVe),e(y,im),e(im,ZZ),e(ZZ,vVe),e(im,FVe),e(im,B$),e(B$,TVe),e(im,MVe),e(y,EVe),e(y,dm),e(dm,eee),e(eee,CVe),e(dm,wVe),e(dm,P$),e(P$,AVe),e(dm,yVe),e(y,LVe),e(y,cm),e(cm,oee),e(oee,xVe),e(cm,$Ve),e(cm,I$),e(I$,kVe),e(cm,SVe),e(y,RVe),e(y,fm),e(fm,ree),e(ree,BVe),e(fm,PVe),e(fm,q$),e(q$,IVe),e(fm,qVe),e(y,NVe),e(y,mm),e(mm,tee),e(tee,jVe),e(mm,DVe),e(mm,N$),e(N$,GVe),e(mm,OVe),e(y,VVe),e(y,gm),e(gm,aee),e(aee,XVe),e(gm,zVe),e(gm,j$),e(j$,QVe),e(gm,WVe),e(y,HVe),e(y,hm),e(hm,nee),e(nee,UVe),e(hm,JVe),e(hm,D$),e(D$,YVe),e(hm,KVe),e(y,ZVe),e(y,pm),e(pm,see),e(see,eXe),e(pm,oXe),e(pm,G$),e(G$,rXe),e(pm,tXe),e(y,aXe),e(y,um),e(um,lee),e(lee,nXe),e(um,sXe),e(um,O$),e(O$,lXe),e(um,iXe),e(y,dXe),e(y,_m),e(_m,iee),e(iee,cXe),e(_m,fXe),e(_m,V$),e(V$,mXe),e(_m,gXe),e(y,hXe),e(y,bm),e(bm,dee),e(dee,pXe),e(bm,uXe),e(bm,X$),e(X$,_Xe),e(bm,bXe),e(y,vXe),e(y,vm),e(vm,cee),e(cee,FXe),e(vm,TXe),e(vm,z$),e(z$,MXe),e(vm,EXe),e(y,CXe),e(y,Fm),e(Fm,fee),e(fee,wXe),e(Fm,AXe),e(Fm,Q$),e(Q$,yXe),e(Fm,LXe),e(y,xXe),e(y,Tm),e(Tm,mee),e(mee,$Xe),e(Tm,kXe),e(Tm,W$),e(W$,SXe),e(Tm,RXe),e(y,BXe),e(y,Mm),e(Mm,gee),e(gee,PXe),e(Mm,IXe),e(Mm,H$),e(H$,qXe),e(Mm,NXe),e(y,jXe),e(y,Em),e(Em,hee),e(hee,DXe),e(Em,GXe),e(Em,U$),e(U$,OXe),e(Em,VXe),e(y,XXe),e(y,Cm),e(Cm,pee),e(pee,zXe),e(Cm,QXe),e(Cm,J$),e(J$,WXe),e(Cm,HXe),e(y,UXe),e(y,wm),e(wm,uee),e(uee,JXe),e(wm,YXe),e(wm,Y$),e(Y$,KXe),e(wm,ZXe),e(y,eze),e(y,Am),e(Am,_ee),e(_ee,oze),e(Am,rze),e(Am,K$),e(K$,tze),e(Am,aze),e(y,nze),e(y,ym),e(ym,bee),e(bee,sze),e(ym,lze),e(ym,Z$),e(Z$,ize),e(ym,dze),e(y,cze),e(y,Lm),e(Lm,vee),e(vee,fze),e(Lm,mze),e(Lm,ek),e(ek,gze),e(Lm,hze),e(y,pze),e(y,xm),e(xm,Fee),e(Fee,uze),e(xm,_ze),e(xm,ok),e(ok,bze),e(xm,vze),e(y,Fze),e(y,$m),e($m,Tee),e(Tee,Tze),e($m,Mze),e($m,rk),e(rk,Eze),e($m,Cze),e(y,wze),e(y,km),e(km,Mee),e(Mee,Aze),e(km,yze),e(km,tk),e(tk,Lze),e(km,xze),e(y,$ze),e(y,Sm),e(Sm,Eee),e(Eee,kze),e(Sm,Sze),e(Sm,ak),e(ak,Rze),e(Sm,Bze),e(y,Pze),e(y,Rm),e(Rm,Cee),e(Cee,Ize),e(Rm,qze),e(Rm,nk),e(nk,Nze),e(Rm,jze),e(y,Dze),e(y,Bm),e(Bm,wee),e(wee,Gze),e(Bm,Oze),e(Bm,sk),e(sk,Vze),e(Bm,Xze),e(y,zze),e(y,Pm),e(Pm,Aee),e(Aee,Qze),e(Pm,Wze),e(Pm,lk),e(lk,Hze),e(Pm,Uze),e(y,Jze),e(y,Im),e(Im,yee),e(yee,Yze),e(Im,Kze),e(Im,ik),e(ik,Zze),e(Im,eQe),e(y,oQe),e(y,qm),e(qm,Lee),e(Lee,rQe),e(qm,tQe),e(qm,dk),e(dk,aQe),e(qm,nQe),e(y,sQe),e(y,Nm),e(Nm,xee),e(xee,lQe),e(Nm,iQe),e(Nm,ck),e(ck,dQe),e(Nm,cQe),e(y,fQe),e(y,jm),e(jm,$ee),e($ee,mQe),e(jm,gQe),e(jm,fk),e(fk,hQe),e(jm,pQe),e(y,uQe),e(y,Dm),e(Dm,kee),e(kee,_Qe),e(Dm,bQe),e(Dm,mk),e(mk,vQe),e(Dm,FQe),e(y,TQe),e(y,Gm),e(Gm,See),e(See,MQe),e(Gm,EQe),e(Gm,gk),e(gk,CQe),e(Gm,wQe),e(y,AQe),e(y,Om),e(Om,Ree),e(Ree,yQe),e(Om,LQe),e(Om,hk),e(hk,xQe),e(Om,$Qe),e(y,kQe),e(y,Vm),e(Vm,Bee),e(Bee,SQe),e(Vm,RQe),e(Vm,pk),e(pk,BQe),e(Vm,PQe),e(y,IQe),e(y,Xm),e(Xm,Pee),e(Pee,qQe),e(Xm,NQe),e(Xm,uk),e(uk,jQe),e(Xm,DQe),e(y,GQe),e(y,zm),e(zm,Iee),e(Iee,OQe),e(zm,VQe),e(zm,_k),e(_k,XQe),e(zm,zQe),e(y,QQe),e(y,Qm),e(Qm,qee),e(qee,WQe),e(Qm,HQe),e(Qm,bk),e(bk,UQe),e(Qm,JQe),e(y,YQe),e(y,Wm),e(Wm,Nee),e(Nee,KQe),e(Wm,ZQe),e(Wm,vk),e(vk,eWe),e(Wm,oWe),e(y,rWe),e(y,Hm),e(Hm,jee),e(jee,tWe),e(Hm,aWe),e(Hm,Fk),e(Fk,nWe),e(Hm,sWe),e(y,lWe),e(y,Um),e(Um,Dee),e(Dee,iWe),e(Um,dWe),e(Um,Tk),e(Tk,cWe),e(Um,fWe),e(y,mWe),e(y,Jm),e(Jm,Gee),e(Gee,gWe),e(Jm,hWe),e(Jm,Mk),e(Mk,pWe),e(Jm,uWe),e(y,_We),e(y,Ym),e(Ym,Oee),e(Oee,bWe),e(Ym,vWe),e(Ym,Ek),e(Ek,FWe),e(Ym,TWe),e(y,MWe),e(y,Km),e(Km,Vee),e(Vee,EWe),e(Km,CWe),e(Km,Ck),e(Ck,wWe),e(Km,AWe),e(y,yWe),e(y,Zm),e(Zm,Xee),e(Xee,LWe),e(Zm,xWe),e(Zm,wk),e(wk,$We),e(Zm,kWe),e(y,SWe),e(y,eg),e(eg,zee),e(zee,RWe),e(eg,BWe),e(eg,Ak),e(Ak,PWe),e(eg,IWe),e(y,qWe),e(y,og),e(og,Qee),e(Qee,NWe),e(og,jWe),e(og,yk),e(yk,DWe),e(og,GWe),e(y,OWe),e(y,rg),e(rg,Wee),e(Wee,VWe),e(rg,XWe),e(rg,Lk),e(Lk,zWe),e(rg,QWe),e(Mr,WWe),M(tg,Mr,null),e(Co,HWe),e(Co,ag),M(CA,ag,null),e(ag,UWe),e(ag,Hee),e(Hee,JWe),b(f,JRe,_),b(f,fi,_),e(fi,ng),e(ng,Uee),M(wA,Uee,null),e(fi,YWe),e(fi,Jee),e(Jee,KWe),b(f,YRe,_),b(f,wo,_),M(AA,wo,null),e(wo,ZWe),e(wo,yA),e(yA,eHe),e(yA,xk),e(xk,oHe),e(yA,rHe),e(wo,tHe),e(wo,LA),e(LA,aHe),e(LA,Yee),e(Yee,nHe),e(LA,sHe),e(wo,lHe),e(wo,Er),M(xA,Er,null),e(Er,iHe),e(Er,Kee),e(Kee,dHe),e(Er,cHe),e(Er,Ta),e(Ta,fHe),e(Ta,Zee),e(Zee,mHe),e(Ta,gHe),e(Ta,eoe),e(eoe,hHe),e(Ta,pHe),e(Ta,ooe),e(ooe,uHe),e(Ta,_He),e(Er,bHe),e(Er,k),e(k,yn),e(yn,roe),e(roe,vHe),e(yn,FHe),e(yn,$k),e($k,THe),e(yn,MHe),e(yn,kk),e(kk,EHe),e(yn,CHe),e(k,wHe),e(k,Ln),e(Ln,toe),e(toe,AHe),e(Ln,yHe),e(Ln,Sk),e(Sk,LHe),e(Ln,xHe),e(Ln,Rk),e(Rk,$He),e(Ln,kHe),e(k,SHe),e(k,xn),e(xn,aoe),e(aoe,RHe),e(xn,BHe),e(xn,Bk),e(Bk,PHe),e(xn,IHe),e(xn,Pk),e(Pk,qHe),e(xn,NHe),e(k,jHe),e(k,sg),e(sg,noe),e(noe,DHe),e(sg,GHe),e(sg,Ik),e(Ik,OHe),e(sg,VHe),e(k,XHe),e(k,$n),e($n,soe),e(soe,zHe),e($n,QHe),e($n,qk),e(qk,WHe),e($n,HHe),e($n,Nk),e(Nk,UHe),e($n,JHe),e(k,YHe),e(k,lg),e(lg,loe),e(loe,KHe),e(lg,ZHe),e(lg,jk),e(jk,eUe),e(lg,oUe),e(k,rUe),e(k,ig),e(ig,ioe),e(ioe,tUe),e(ig,aUe),e(ig,Dk),e(Dk,nUe),e(ig,sUe),e(k,lUe),e(k,dg),e(dg,doe),e(doe,iUe),e(dg,dUe),e(dg,Gk),e(Gk,cUe),e(dg,fUe),e(k,mUe),e(k,kn),e(kn,coe),e(coe,gUe),e(kn,hUe),e(kn,Ok),e(Ok,pUe),e(kn,uUe),e(kn,Vk),e(Vk,_Ue),e(kn,bUe),e(k,vUe),e(k,Sn),e(Sn,foe),e(foe,FUe),e(Sn,TUe),e(Sn,Xk),e(Xk,MUe),e(Sn,EUe),e(Sn,zk),e(zk,CUe),e(Sn,wUe),e(k,AUe),e(k,Rn),e(Rn,moe),e(moe,yUe),e(Rn,LUe),e(Rn,Qk),e(Qk,xUe),e(Rn,$Ue),e(Rn,Wk),e(Wk,kUe),e(Rn,SUe),e(k,RUe),e(k,cg),e(cg,goe),e(goe,BUe),e(cg,PUe),e(cg,Hk),e(Hk,IUe),e(cg,qUe),e(k,NUe),e(k,fg),e(fg,hoe),e(hoe,jUe),e(fg,DUe),e(fg,Uk),e(Uk,GUe),e(fg,OUe),e(k,VUe),e(k,Bn),e(Bn,poe),e(poe,XUe),e(Bn,zUe),e(Bn,Jk),e(Jk,QUe),e(Bn,WUe),e(Bn,Yk),e(Yk,HUe),e(Bn,UUe),e(k,JUe),e(k,mg),e(mg,uoe),e(uoe,YUe),e(mg,KUe),e(mg,Kk),e(Kk,ZUe),e(mg,eJe),e(k,oJe),e(k,Pn),e(Pn,_oe),e(_oe,rJe),e(Pn,tJe),e(Pn,Zk),e(Zk,aJe),e(Pn,nJe),e(Pn,eS),e(eS,sJe),e(Pn,lJe),e(k,iJe),e(k,In),e(In,boe),e(boe,dJe),e(In,cJe),e(In,oS),e(oS,fJe),e(In,mJe),e(In,rS),e(rS,gJe),e(In,hJe),e(k,pJe),e(k,qn),e(qn,voe),e(voe,uJe),e(qn,_Je),e(qn,tS),e(tS,bJe),e(qn,vJe),e(qn,Foe),e(Foe,FJe),e(qn,TJe),e(k,MJe),e(k,gg),e(gg,Toe),e(Toe,EJe),e(gg,CJe),e(gg,aS),e(aS,wJe),e(gg,AJe),e(k,yJe),e(k,Nn),e(Nn,Moe),e(Moe,LJe),e(Nn,xJe),e(Nn,nS),e(nS,$Je),e(Nn,kJe),e(Nn,sS),e(sS,SJe),e(Nn,RJe),e(k,BJe),e(k,jn),e(jn,Eoe),e(Eoe,PJe),e(jn,IJe),e(jn,lS),e(lS,qJe),e(jn,NJe),e(jn,iS),e(iS,jJe),e(jn,DJe),e(k,GJe),e(k,Dn),e(Dn,Coe),e(Coe,OJe),e(Dn,VJe),e(Dn,dS),e(dS,XJe),e(Dn,zJe),e(Dn,cS),e(cS,QJe),e(Dn,WJe),e(k,HJe),e(k,Gn),e(Gn,woe),e(woe,UJe),e(Gn,JJe),e(Gn,fS),e(fS,YJe),e(Gn,KJe),e(Gn,mS),e(mS,ZJe),e(Gn,eYe),e(k,oYe),e(k,On),e(On,Aoe),e(Aoe,rYe),e(On,tYe),e(On,gS),e(gS,aYe),e(On,nYe),e(On,hS),e(hS,sYe),e(On,lYe),e(k,iYe),e(k,Vn),e(Vn,yoe),e(yoe,dYe),e(Vn,cYe),e(Vn,pS),e(pS,fYe),e(Vn,mYe),e(Vn,uS),e(uS,gYe),e(Vn,hYe),e(k,pYe),e(k,hg),e(hg,Loe),e(Loe,uYe),e(hg,_Ye),e(hg,_S),e(_S,bYe),e(hg,vYe),e(k,FYe),e(k,Xn),e(Xn,xoe),e(xoe,TYe),e(Xn,MYe),e(Xn,bS),e(bS,EYe),e(Xn,CYe),e(Xn,vS),e(vS,wYe),e(Xn,AYe),e(k,yYe),e(k,pg),e(pg,$oe),e($oe,LYe),e(pg,xYe),e(pg,FS),e(FS,$Ye),e(pg,kYe),e(k,SYe),e(k,zn),e(zn,koe),e(koe,RYe),e(zn,BYe),e(zn,TS),e(TS,PYe),e(zn,IYe),e(zn,MS),e(MS,qYe),e(zn,NYe),e(k,jYe),e(k,Qn),e(Qn,Soe),e(Soe,DYe),e(Qn,GYe),e(Qn,ES),e(ES,OYe),e(Qn,VYe),e(Qn,CS),e(CS,XYe),e(Qn,zYe),e(k,QYe),e(k,Wn),e(Wn,Roe),e(Roe,WYe),e(Wn,HYe),e(Wn,wS),e(wS,UYe),e(Wn,JYe),e(Wn,AS),e(AS,YYe),e(Wn,KYe),e(k,ZYe),e(k,Hn),e(Hn,Boe),e(Boe,eKe),e(Hn,oKe),e(Hn,yS),e(yS,rKe),e(Hn,tKe),e(Hn,LS),e(LS,aKe),e(Hn,nKe),e(k,sKe),e(k,Un),e(Un,Poe),e(Poe,lKe),e(Un,iKe),e(Un,xS),e(xS,dKe),e(Un,cKe),e(Un,$S),e($S,fKe),e(Un,mKe),e(k,gKe),e(k,ug),e(ug,Ioe),e(Ioe,hKe),e(ug,pKe),e(ug,kS),e(kS,uKe),e(ug,_Ke),e(k,bKe),e(k,Jn),e(Jn,qoe),e(qoe,vKe),e(Jn,FKe),e(Jn,SS),e(SS,TKe),e(Jn,MKe),e(Jn,RS),e(RS,EKe),e(Jn,CKe),e(k,wKe),e(k,Yn),e(Yn,Noe),e(Noe,AKe),e(Yn,yKe),e(Yn,BS),e(BS,LKe),e(Yn,xKe),e(Yn,PS),e(PS,$Ke),e(Yn,kKe),e(k,SKe),e(k,Kn),e(Kn,joe),e(joe,RKe),e(Kn,BKe),e(Kn,IS),e(IS,PKe),e(Kn,IKe),e(Kn,qS),e(qS,qKe),e(Kn,NKe),e(k,jKe),e(k,Zn),e(Zn,Doe),e(Doe,DKe),e(Zn,GKe),e(Zn,NS),e(NS,OKe),e(Zn,VKe),e(Zn,jS),e(jS,XKe),e(Zn,zKe),e(k,QKe),e(k,es),e(es,Goe),e(Goe,WKe),e(es,HKe),e(es,DS),e(DS,UKe),e(es,JKe),e(es,GS),e(GS,YKe),e(es,KKe),e(k,ZKe),e(k,os),e(os,Ooe),e(Ooe,eZe),e(os,oZe),e(os,OS),e(OS,rZe),e(os,tZe),e(os,VS),e(VS,aZe),e(os,nZe),e(k,sZe),e(k,_g),e(_g,Voe),e(Voe,lZe),e(_g,iZe),e(_g,XS),e(XS,dZe),e(_g,cZe),e(k,fZe),e(k,rs),e(rs,Xoe),e(Xoe,mZe),e(rs,gZe),e(rs,zS),e(zS,hZe),e(rs,pZe),e(rs,QS),e(QS,uZe),e(rs,_Ze),e(k,bZe),e(k,bg),e(bg,zoe),e(zoe,vZe),e(bg,FZe),e(bg,WS),e(WS,TZe),e(bg,MZe),e(k,EZe),e(k,vg),e(vg,Qoe),e(Qoe,CZe),e(vg,wZe),e(vg,HS),e(HS,AZe),e(vg,yZe),e(k,LZe),e(k,ts),e(ts,Woe),e(Woe,xZe),e(ts,$Ze),e(ts,US),e(US,kZe),e(ts,SZe),e(ts,JS),e(JS,RZe),e(ts,BZe),e(k,PZe),e(k,as),e(as,Hoe),e(Hoe,IZe),e(as,qZe),e(as,YS),e(YS,NZe),e(as,jZe),e(as,KS),e(KS,DZe),e(as,GZe),e(k,OZe),e(k,ns),e(ns,Uoe),e(Uoe,VZe),e(ns,XZe),e(ns,ZS),e(ZS,zZe),e(ns,QZe),e(ns,eR),e(eR,WZe),e(ns,HZe),e(k,UZe),e(k,Fg),e(Fg,Joe),e(Joe,JZe),e(Fg,YZe),e(Fg,oR),e(oR,KZe),e(Fg,ZZe),e(k,eeo),e(k,ss),e(ss,Yoe),e(Yoe,oeo),e(ss,reo),e(ss,rR),e(rR,teo),e(ss,aeo),e(ss,tR),e(tR,neo),e(ss,seo),e(k,leo),e(k,ls),e(ls,Koe),e(Koe,ieo),e(ls,deo),e(ls,aR),e(aR,ceo),e(ls,feo),e(ls,nR),e(nR,meo),e(ls,geo),e(k,heo),e(k,is),e(is,Zoe),e(Zoe,peo),e(is,ueo),e(is,sR),e(sR,_eo),e(is,beo),e(is,lR),e(lR,veo),e(is,Feo),e(k,Teo),e(k,ds),e(ds,ere),e(ere,Meo),e(ds,Eeo),e(ds,iR),e(iR,Ceo),e(ds,weo),e(ds,dR),e(dR,Aeo),e(ds,yeo),e(k,Leo),e(k,cs),e(cs,ore),e(ore,xeo),e(cs,$eo),e(cs,cR),e(cR,keo),e(cs,Seo),e(cs,fR),e(fR,Reo),e(cs,Beo),e(k,Peo),e(k,fs),e(fs,rre),e(rre,Ieo),e(fs,qeo),e(fs,mR),e(mR,Neo),e(fs,jeo),e(fs,gR),e(gR,Deo),e(fs,Geo),e(k,Oeo),e(k,Tg),e(Tg,tre),e(tre,Veo),e(Tg,Xeo),e(Tg,hR),e(hR,zeo),e(Tg,Qeo),e(k,Weo),e(k,Mg),e(Mg,are),e(are,Heo),e(Mg,Ueo),e(Mg,pR),e(pR,Jeo),e(Mg,Yeo),e(k,Keo),e(k,Eg),e(Eg,nre),e(nre,Zeo),e(Eg,eoo),e(Eg,uR),e(uR,ooo),e(Eg,roo),e(k,too),e(k,Cg),e(Cg,sre),e(sre,aoo),e(Cg,noo),e(Cg,_R),e(_R,soo),e(Cg,loo),e(k,ioo),e(k,ms),e(ms,lre),e(lre,doo),e(ms,coo),e(ms,bR),e(bR,foo),e(ms,moo),e(ms,vR),e(vR,goo),e(ms,hoo),e(k,poo),e(k,wg),e(wg,ire),e(ire,uoo),e(wg,_oo),e(wg,FR),e(FR,boo),e(wg,voo),e(k,Foo),e(k,gs),e(gs,dre),e(dre,Too),e(gs,Moo),e(gs,TR),e(TR,Eoo),e(gs,Coo),e(gs,MR),e(MR,woo),e(gs,Aoo),e(k,yoo),e(k,hs),e(hs,cre),e(cre,Loo),e(hs,xoo),e(hs,ER),e(ER,$oo),e(hs,koo),e(hs,CR),e(CR,Soo),e(hs,Roo),e(k,Boo),e(k,ps),e(ps,fre),e(fre,Poo),e(ps,Ioo),e(ps,wR),e(wR,qoo),e(ps,Noo),e(ps,AR),e(AR,joo),e(ps,Doo),e(k,Goo),e(k,us),e(us,mre),e(mre,Ooo),e(us,Voo),e(us,yR),e(yR,Xoo),e(us,zoo),e(us,LR),e(LR,Qoo),e(us,Woo),e(k,Hoo),e(k,_s),e(_s,gre),e(gre,Uoo),e(_s,Joo),e(_s,xR),e(xR,Yoo),e(_s,Koo),e(_s,$R),e($R,Zoo),e(_s,ero),e(k,oro),e(k,bs),e(bs,hre),e(hre,rro),e(bs,tro),e(bs,kR),e(kR,aro),e(bs,nro),e(bs,SR),e(SR,sro),e(bs,lro),e(k,iro),e(k,Ag),e(Ag,pre),e(pre,dro),e(Ag,cro),e(Ag,RR),e(RR,fro),e(Ag,mro),e(k,gro),e(k,yg),e(yg,ure),e(ure,hro),e(yg,pro),e(yg,BR),e(BR,uro),e(yg,_ro),e(k,bro),e(k,vs),e(vs,_re),e(_re,vro),e(vs,Fro),e(vs,PR),e(PR,Tro),e(vs,Mro),e(vs,IR),e(IR,Ero),e(vs,Cro),e(k,wro),e(k,Fs),e(Fs,bre),e(bre,Aro),e(Fs,yro),e(Fs,qR),e(qR,Lro),e(Fs,xro),e(Fs,NR),e(NR,$ro),e(Fs,kro),e(k,Sro),e(k,Ts),e(Ts,vre),e(vre,Rro),e(Ts,Bro),e(Ts,jR),e(jR,Pro),e(Ts,Iro),e(Ts,DR),e(DR,qro),e(Ts,Nro),e(k,jro),e(k,Lg),e(Lg,Fre),e(Fre,Dro),e(Lg,Gro),e(Lg,GR),e(GR,Oro),e(Lg,Vro),e(k,Xro),e(k,xg),e(xg,Tre),e(Tre,zro),e(xg,Qro),e(xg,OR),e(OR,Wro),e(xg,Hro),e(k,Uro),e(k,$g),e($g,Mre),e(Mre,Jro),e($g,Yro),e($g,VR),e(VR,Kro),e($g,Zro),e(k,eto),e(k,Ms),e(Ms,Ere),e(Ere,oto),e(Ms,rto),e(Ms,XR),e(XR,tto),e(Ms,ato),e(Ms,zR),e(zR,nto),e(Ms,sto),e(k,lto),e(k,kg),e(kg,Cre),e(Cre,ito),e(kg,dto),e(kg,QR),e(QR,cto),e(kg,fto),e(k,mto),e(k,Sg),e(Sg,wre),e(wre,gto),e(Sg,hto),e(Sg,WR),e(WR,pto),e(Sg,uto),e(k,_to),e(k,Es),e(Es,Are),e(Are,bto),e(Es,vto),e(Es,HR),e(HR,Fto),e(Es,Tto),e(Es,UR),e(UR,Mto),e(Es,Eto),e(k,Cto),e(k,Rg),e(Rg,yre),e(yre,wto),e(Rg,Ato),e(Rg,JR),e(JR,yto),e(Rg,Lto),e(k,xto),e(k,Bg),e(Bg,Lre),e(Lre,$to),e(Bg,kto),e(Bg,YR),e(YR,Sto),e(Bg,Rto),e(k,Bto),e(k,Cs),e(Cs,xre),e(xre,Pto),e(Cs,Ito),e(Cs,KR),e(KR,qto),e(Cs,Nto),e(Cs,ZR),e(ZR,jto),e(Cs,Dto),e(k,Gto),e(k,ws),e(ws,$re),e($re,Oto),e(ws,Vto),e(ws,eB),e(eB,Xto),e(ws,zto),e(ws,oB),e(oB,Qto),e(ws,Wto),e(k,Hto),e(k,As),e(As,kre),e(kre,Uto),e(As,Jto),e(As,rB),e(rB,Yto),e(As,Kto),e(As,tB),e(tB,Zto),e(As,eao),e(k,oao),e(k,ys),e(ys,Sre),e(Sre,rao),e(ys,tao),e(ys,aB),e(aB,aao),e(ys,nao),e(ys,nB),e(nB,sao),e(ys,lao),e(Er,iao),M(Pg,Er,null),e(wo,dao),e(wo,Ig),M($A,Ig,null),e(Ig,cao),e(Ig,Rre),e(Rre,fao),b(f,KRe,_),b(f,mi,_),e(mi,qg),e(qg,Bre),M(kA,Bre,null),e(mi,mao),e(mi,Pre),e(Pre,gao),b(f,ZRe,_),b(f,Ao,_),M(SA,Ao,null),e(Ao,hao),e(Ao,RA),e(RA,pao),e(RA,sB),e(sB,uao),e(RA,_ao),e(Ao,bao),e(Ao,BA),e(BA,vao),e(BA,Ire),e(Ire,Fao),e(BA,Tao),e(Ao,Mao),e(Ao,Qe),M(PA,Qe,null),e(Qe,Eao),e(Qe,qre),e(qre,Cao),e(Qe,wao),e(Qe,Ma),e(Ma,Aao),e(Ma,Nre),e(Nre,yao),e(Ma,Lao),e(Ma,jre),e(jre,xao),e(Ma,$ao),e(Ma,Dre),e(Dre,kao),e(Ma,Sao),e(Qe,Rao),e(Qe,ae),e(ae,Ng),e(Ng,Gre),e(Gre,Bao),e(Ng,Pao),e(Ng,lB),e(lB,Iao),e(Ng,qao),e(ae,Nao),e(ae,jg),e(jg,Ore),e(Ore,jao),e(jg,Dao),e(jg,iB),e(iB,Gao),e(jg,Oao),e(ae,Vao),e(ae,Dg),e(Dg,Vre),e(Vre,Xao),e(Dg,zao),e(Dg,dB),e(dB,Qao),e(Dg,Wao),e(ae,Hao),e(ae,Gg),e(Gg,Xre),e(Xre,Uao),e(Gg,Jao),e(Gg,cB),e(cB,Yao),e(Gg,Kao),e(ae,Zao),e(ae,Og),e(Og,zre),e(zre,eno),e(Og,ono),e(Og,fB),e(fB,rno),e(Og,tno),e(ae,ano),e(ae,Vg),e(Vg,Qre),e(Qre,nno),e(Vg,sno),e(Vg,mB),e(mB,lno),e(Vg,ino),e(ae,dno),e(ae,Xg),e(Xg,Wre),e(Wre,cno),e(Xg,fno),e(Xg,gB),e(gB,mno),e(Xg,gno),e(ae,hno),e(ae,zg),e(zg,Hre),e(Hre,pno),e(zg,uno),e(zg,hB),e(hB,_no),e(zg,bno),e(ae,vno),e(ae,Qg),e(Qg,Ure),e(Ure,Fno),e(Qg,Tno),e(Qg,pB),e(pB,Mno),e(Qg,Eno),e(ae,Cno),e(ae,Wg),e(Wg,Jre),e(Jre,wno),e(Wg,Ano),e(Wg,uB),e(uB,yno),e(Wg,Lno),e(ae,xno),e(ae,Hg),e(Hg,Yre),e(Yre,$no),e(Hg,kno),e(Hg,_B),e(_B,Sno),e(Hg,Rno),e(ae,Bno),e(ae,Ug),e(Ug,Kre),e(Kre,Pno),e(Ug,Ino),e(Ug,bB),e(bB,qno),e(Ug,Nno),e(ae,jno),e(ae,Jg),e(Jg,Zre),e(Zre,Dno),e(Jg,Gno),e(Jg,vB),e(vB,Ono),e(Jg,Vno),e(ae,Xno),e(ae,Yg),e(Yg,ete),e(ete,zno),e(Yg,Qno),e(Yg,FB),e(FB,Wno),e(Yg,Hno),e(ae,Uno),e(ae,Kg),e(Kg,ote),e(ote,Jno),e(Kg,Yno),e(Kg,TB),e(TB,Kno),e(Kg,Zno),e(ae,eso),e(ae,Zg),e(Zg,rte),e(rte,oso),e(Zg,rso),e(Zg,MB),e(MB,tso),e(Zg,aso),e(ae,nso),e(ae,eh),e(eh,tte),e(tte,sso),e(eh,lso),e(eh,EB),e(EB,iso),e(eh,dso),e(ae,cso),e(ae,oh),e(oh,ate),e(ate,fso),e(oh,mso),e(oh,CB),e(CB,gso),e(oh,hso),e(ae,pso),e(ae,rh),e(rh,nte),e(nte,uso),e(rh,_so),e(rh,wB),e(wB,bso),e(rh,vso),e(ae,Fso),e(ae,th),e(th,ste),e(ste,Tso),e(th,Mso),e(th,AB),e(AB,Eso),e(th,Cso),e(ae,wso),e(ae,ah),e(ah,lte),e(lte,Aso),e(ah,yso),e(ah,yB),e(yB,Lso),e(ah,xso),e(ae,$so),e(ae,nh),e(nh,ite),e(ite,kso),e(nh,Sso),e(nh,LB),e(LB,Rso),e(nh,Bso),e(ae,Pso),e(ae,sh),e(sh,dte),e(dte,Iso),e(sh,qso),e(sh,xB),e(xB,Nso),e(sh,jso),e(Qe,Dso),M(lh,Qe,null),e(Qe,Gso),M(ih,Qe,null),e(Ao,Oso),e(Ao,dh),M(IA,dh,null),e(dh,Vso),e(dh,cte),e(cte,Xso),b(f,eBe,_),b(f,gi,_),e(gi,ch),e(ch,fte),M(qA,fte,null),e(gi,zso),e(gi,mte),e(mte,Qso),b(f,oBe,_),b(f,yo,_),M(NA,yo,null),e(yo,Wso),e(yo,jA),e(jA,Hso),e(jA,$B),e($B,Uso),e(jA,Jso),e(yo,Yso),e(yo,DA),e(DA,Kso),e(DA,gte),e(gte,Zso),e(DA,elo),e(yo,olo),e(yo,We),M(GA,We,null),e(We,rlo),e(We,hte),e(hte,tlo),e(We,alo),e(We,hi),e(hi,nlo),e(hi,pte),e(pte,slo),e(hi,llo),e(hi,ute),e(ute,ilo),e(hi,dlo),e(We,clo),e(We,be),e(be,fh),e(fh,_te),e(_te,flo),e(fh,mlo),e(fh,kB),e(kB,glo),e(fh,hlo),e(be,plo),e(be,mh),e(mh,bte),e(bte,ulo),e(mh,_lo),e(mh,SB),e(SB,blo),e(mh,vlo),e(be,Flo),e(be,gh),e(gh,vte),e(vte,Tlo),e(gh,Mlo),e(gh,RB),e(RB,Elo),e(gh,Clo),e(be,wlo),e(be,hh),e(hh,Fte),e(Fte,Alo),e(hh,ylo),e(hh,BB),e(BB,Llo),e(hh,xlo),e(be,$lo),e(be,ph),e(ph,Tte),e(Tte,klo),e(ph,Slo),e(ph,PB),e(PB,Rlo),e(ph,Blo),e(be,Plo),e(be,uh),e(uh,Mte),e(Mte,Ilo),e(uh,qlo),e(uh,IB),e(IB,Nlo),e(uh,jlo),e(be,Dlo),e(be,_h),e(_h,Ete),e(Ete,Glo),e(_h,Olo),e(_h,qB),e(qB,Vlo),e(_h,Xlo),e(be,zlo),e(be,bh),e(bh,Cte),e(Cte,Qlo),e(bh,Wlo),e(bh,NB),e(NB,Hlo),e(bh,Ulo),e(be,Jlo),e(be,vh),e(vh,wte),e(wte,Ylo),e(vh,Klo),e(vh,jB),e(jB,Zlo),e(vh,eio),e(be,oio),e(be,Fh),e(Fh,Ate),e(Ate,rio),e(Fh,tio),e(Fh,DB),e(DB,aio),e(Fh,nio),e(be,sio),e(be,Th),e(Th,yte),e(yte,lio),e(Th,iio),e(Th,GB),e(GB,dio),e(Th,cio),e(be,fio),e(be,Mh),e(Mh,Lte),e(Lte,mio),e(Mh,gio),e(Mh,OB),e(OB,hio),e(Mh,pio),e(be,uio),e(be,Eh),e(Eh,xte),e(xte,_io),e(Eh,bio),e(Eh,VB),e(VB,vio),e(Eh,Fio),e(be,Tio),e(be,Ch),e(Ch,$te),e($te,Mio),e(Ch,Eio),e(Ch,XB),e(XB,Cio),e(Ch,wio),e(We,Aio),M(wh,We,null),e(We,yio),M(Ah,We,null),e(yo,Lio),e(yo,yh),M(OA,yh,null),e(yh,xio),e(yh,kte),e(kte,$io),b(f,rBe,_),b(f,pi,_),e(pi,Lh),e(Lh,Ste),M(VA,Ste,null),e(pi,kio),e(pi,Rte),e(Rte,Sio),b(f,tBe,_),b(f,Lo,_),M(XA,Lo,null),e(Lo,Rio),e(Lo,ui),e(ui,Bio),e(ui,zB),e(zB,Pio),e(ui,Iio),e(ui,QB),e(QB,qio),e(ui,Nio),e(Lo,jio),e(Lo,zA),e(zA,Dio),e(zA,Bte),e(Bte,Gio),e(zA,Oio),e(Lo,Vio),e(Lo,Zr),M(QA,Zr,null),e(Zr,Xio),e(Zr,Pte),e(Pte,zio),e(Zr,Qio),e(Zr,_i),e(_i,Wio),e(_i,Ite),e(Ite,Hio),e(_i,Uio),e(_i,WB),e(WB,Jio),e(_i,Yio),e(Zr,Kio),M(xh,Zr,null),e(Lo,Zio),e(Lo,He),M(WA,He,null),e(He,edo),e(He,qte),e(qte,odo),e(He,rdo),e(He,Ea),e(Ea,tdo),e(Ea,Nte),e(Nte,ado),e(Ea,ndo),e(Ea,jte),e(jte,sdo),e(Ea,ldo),e(Ea,Dte),e(Dte,ido),e(Ea,ddo),e(He,cdo),e(He,x),e(x,$h),e($h,Gte),e(Gte,fdo),e($h,mdo),e($h,HB),e(HB,gdo),e($h,hdo),e(x,pdo),e(x,kh),e(kh,Ote),e(Ote,udo),e(kh,_do),e(kh,UB),e(UB,bdo),e(kh,vdo),e(x,Fdo),e(x,Sh),e(Sh,Vte),e(Vte,Tdo),e(Sh,Mdo),e(Sh,JB),e(JB,Edo),e(Sh,Cdo),e(x,wdo),e(x,Rh),e(Rh,Xte),e(Xte,Ado),e(Rh,ydo),e(Rh,YB),e(YB,Ldo),e(Rh,xdo),e(x,$do),e(x,Bh),e(Bh,zte),e(zte,kdo),e(Bh,Sdo),e(Bh,KB),e(KB,Rdo),e(Bh,Bdo),e(x,Pdo),e(x,Ph),e(Ph,Qte),e(Qte,Ido),e(Ph,qdo),e(Ph,ZB),e(ZB,Ndo),e(Ph,jdo),e(x,Ddo),e(x,Ih),e(Ih,Wte),e(Wte,Gdo),e(Ih,Odo),e(Ih,eP),e(eP,Vdo),e(Ih,Xdo),e(x,zdo),e(x,qh),e(qh,Hte),e(Hte,Qdo),e(qh,Wdo),e(qh,oP),e(oP,Hdo),e(qh,Udo),e(x,Jdo),e(x,Nh),e(Nh,Ute),e(Ute,Ydo),e(Nh,Kdo),e(Nh,rP),e(rP,Zdo),e(Nh,eco),e(x,oco),e(x,jh),e(jh,Jte),e(Jte,rco),e(jh,tco),e(jh,tP),e(tP,aco),e(jh,nco),e(x,sco),e(x,Dh),e(Dh,Yte),e(Yte,lco),e(Dh,ico),e(Dh,aP),e(aP,dco),e(Dh,cco),e(x,fco),e(x,Gh),e(Gh,Kte),e(Kte,mco),e(Gh,gco),e(Gh,nP),e(nP,hco),e(Gh,pco),e(x,uco),e(x,Oh),e(Oh,Zte),e(Zte,_co),e(Oh,bco),e(Oh,sP),e(sP,vco),e(Oh,Fco),e(x,Tco),e(x,Vh),e(Vh,eae),e(eae,Mco),e(Vh,Eco),e(Vh,lP),e(lP,Cco),e(Vh,wco),e(x,Aco),e(x,Xh),e(Xh,oae),e(oae,yco),e(Xh,Lco),e(Xh,iP),e(iP,xco),e(Xh,$co),e(x,kco),e(x,zh),e(zh,rae),e(rae,Sco),e(zh,Rco),e(zh,dP),e(dP,Bco),e(zh,Pco),e(x,Ico),e(x,Qh),e(Qh,tae),e(tae,qco),e(Qh,Nco),e(Qh,cP),e(cP,jco),e(Qh,Dco),e(x,Gco),e(x,Wh),e(Wh,aae),e(aae,Oco),e(Wh,Vco),e(Wh,fP),e(fP,Xco),e(Wh,zco),e(x,Qco),e(x,Hh),e(Hh,nae),e(nae,Wco),e(Hh,Hco),e(Hh,mP),e(mP,Uco),e(Hh,Jco),e(x,Yco),e(x,Uh),e(Uh,sae),e(sae,Kco),e(Uh,Zco),e(Uh,gP),e(gP,efo),e(Uh,ofo),e(x,rfo),e(x,Jh),e(Jh,lae),e(lae,tfo),e(Jh,afo),e(Jh,hP),e(hP,nfo),e(Jh,sfo),e(x,lfo),e(x,Yh),e(Yh,iae),e(iae,ifo),e(Yh,dfo),e(Yh,pP),e(pP,cfo),e(Yh,ffo),e(x,mfo),e(x,Kh),e(Kh,dae),e(dae,gfo),e(Kh,hfo),e(Kh,uP),e(uP,pfo),e(Kh,ufo),e(x,_fo),e(x,Zh),e(Zh,cae),e(cae,bfo),e(Zh,vfo),e(Zh,_P),e(_P,Ffo),e(Zh,Tfo),e(x,Mfo),e(x,ep),e(ep,fae),e(fae,Efo),e(ep,Cfo),e(ep,bP),e(bP,wfo),e(ep,Afo),e(x,yfo),e(x,op),e(op,mae),e(mae,Lfo),e(op,xfo),e(op,vP),e(vP,$fo),e(op,kfo),e(x,Sfo),e(x,rp),e(rp,gae),e(gae,Rfo),e(rp,Bfo),e(rp,FP),e(FP,Pfo),e(rp,Ifo),e(x,qfo),e(x,tp),e(tp,hae),e(hae,Nfo),e(tp,jfo),e(tp,TP),e(TP,Dfo),e(tp,Gfo),e(x,Ofo),e(x,ap),e(ap,pae),e(pae,Vfo),e(ap,Xfo),e(ap,MP),e(MP,zfo),e(ap,Qfo),e(x,Wfo),e(x,np),e(np,uae),e(uae,Hfo),e(np,Ufo),e(np,EP),e(EP,Jfo),e(np,Yfo),e(x,Kfo),e(x,Ls),e(Ls,_ae),e(_ae,Zfo),e(Ls,emo),e(Ls,CP),e(CP,omo),e(Ls,rmo),e(Ls,wP),e(wP,tmo),e(Ls,amo),e(x,nmo),e(x,sp),e(sp,bae),e(bae,smo),e(sp,lmo),e(sp,AP),e(AP,imo),e(sp,dmo),e(x,cmo),e(x,lp),e(lp,vae),e(vae,fmo),e(lp,mmo),e(lp,yP),e(yP,gmo),e(lp,hmo),e(x,pmo),e(x,ip),e(ip,Fae),e(Fae,umo),e(ip,_mo),e(ip,LP),e(LP,bmo),e(ip,vmo),e(x,Fmo),e(x,dp),e(dp,Tae),e(Tae,Tmo),e(dp,Mmo),e(dp,xP),e(xP,Emo),e(dp,Cmo),e(x,wmo),e(x,cp),e(cp,Mae),e(Mae,Amo),e(cp,ymo),e(cp,$P),e($P,Lmo),e(cp,xmo),e(x,$mo),e(x,fp),e(fp,Eae),e(Eae,kmo),e(fp,Smo),e(fp,kP),e(kP,Rmo),e(fp,Bmo),e(x,Pmo),e(x,mp),e(mp,Cae),e(Cae,Imo),e(mp,qmo),e(mp,SP),e(SP,Nmo),e(mp,jmo),e(x,Dmo),e(x,gp),e(gp,wae),e(wae,Gmo),e(gp,Omo),e(gp,RP),e(RP,Vmo),e(gp,Xmo),e(x,zmo),e(x,hp),e(hp,Aae),e(Aae,Qmo),e(hp,Wmo),e(hp,BP),e(BP,Hmo),e(hp,Umo),e(x,Jmo),e(x,pp),e(pp,yae),e(yae,Ymo),e(pp,Kmo),e(pp,PP),e(PP,Zmo),e(pp,ego),e(x,ogo),e(x,up),e(up,Lae),e(Lae,rgo),e(up,tgo),e(up,IP),e(IP,ago),e(up,ngo),e(x,sgo),e(x,_p),e(_p,xae),e(xae,lgo),e(_p,igo),e(_p,qP),e(qP,dgo),e(_p,cgo),e(x,fgo),e(x,bp),e(bp,$ae),e($ae,mgo),e(bp,ggo),e(bp,NP),e(NP,hgo),e(bp,pgo),e(x,ugo),e(x,vp),e(vp,kae),e(kae,_go),e(vp,bgo),e(vp,jP),e(jP,vgo),e(vp,Fgo),e(x,Tgo),e(x,Fp),e(Fp,Sae),e(Sae,Mgo),e(Fp,Ego),e(Fp,DP),e(DP,Cgo),e(Fp,wgo),e(x,Ago),e(x,Tp),e(Tp,Rae),e(Rae,ygo),e(Tp,Lgo),e(Tp,GP),e(GP,xgo),e(Tp,$go),e(x,kgo),e(x,Mp),e(Mp,Bae),e(Bae,Sgo),e(Mp,Rgo),e(Mp,OP),e(OP,Bgo),e(Mp,Pgo),e(x,Igo),e(x,Ep),e(Ep,Pae),e(Pae,qgo),e(Ep,Ngo),e(Ep,VP),e(VP,jgo),e(Ep,Dgo),e(x,Ggo),e(x,Cp),e(Cp,Iae),e(Iae,Ogo),e(Cp,Vgo),e(Cp,XP),e(XP,Xgo),e(Cp,zgo),e(x,Qgo),e(x,wp),e(wp,qae),e(qae,Wgo),e(wp,Hgo),e(wp,zP),e(zP,Ugo),e(wp,Jgo),e(x,Ygo),e(x,Ap),e(Ap,Nae),e(Nae,Kgo),e(Ap,Zgo),e(Ap,QP),e(QP,eho),e(Ap,oho),e(x,rho),e(x,yp),e(yp,jae),e(jae,tho),e(yp,aho),e(yp,WP),e(WP,nho),e(yp,sho),e(x,lho),e(x,Lp),e(Lp,Dae),e(Dae,iho),e(Lp,dho),e(Lp,HP),e(HP,cho),e(Lp,fho),e(x,mho),e(x,xp),e(xp,Gae),e(Gae,gho),e(xp,hho),e(xp,UP),e(UP,pho),e(xp,uho),e(x,_ho),e(x,$p),e($p,Oae),e(Oae,bho),e($p,vho),e($p,JP),e(JP,Fho),e($p,Tho),e(x,Mho),e(x,kp),e(kp,Vae),e(Vae,Eho),e(kp,Cho),e(kp,YP),e(YP,who),e(kp,Aho),e(x,yho),e(x,Sp),e(Sp,Xae),e(Xae,Lho),e(Sp,xho),e(Sp,KP),e(KP,$ho),e(Sp,kho),e(x,Sho),e(x,Rp),e(Rp,zae),e(zae,Rho),e(Rp,Bho),e(Rp,ZP),e(ZP,Pho),e(Rp,Iho),e(x,qho),e(x,Bp),e(Bp,Qae),e(Qae,Nho),e(Bp,jho),e(Bp,eI),e(eI,Dho),e(Bp,Gho),e(x,Oho),e(x,Pp),e(Pp,Wae),e(Wae,Vho),e(Pp,Xho),e(Pp,oI),e(oI,zho),e(Pp,Qho),e(x,Who),e(x,Ip),e(Ip,Hae),e(Hae,Hho),e(Ip,Uho),e(Ip,rI),e(rI,Jho),e(Ip,Yho),e(x,Kho),e(x,qp),e(qp,Uae),e(Uae,Zho),e(qp,epo),e(qp,tI),e(tI,opo),e(qp,rpo),e(x,tpo),e(x,Np),e(Np,Jae),e(Jae,apo),e(Np,npo),e(Np,aI),e(aI,spo),e(Np,lpo),e(x,ipo),e(x,jp),e(jp,Yae),e(Yae,dpo),e(jp,cpo),e(jp,nI),e(nI,fpo),e(jp,mpo),e(x,gpo),e(x,Dp),e(Dp,Kae),e(Kae,hpo),e(Dp,ppo),e(Dp,sI),e(sI,upo),e(Dp,_po),e(x,bpo),e(x,Gp),e(Gp,Zae),e(Zae,vpo),e(Gp,Fpo),e(Gp,lI),e(lI,Tpo),e(Gp,Mpo),e(x,Epo),e(x,Op),e(Op,ene),e(ene,Cpo),e(Op,wpo),e(Op,iI),e(iI,Apo),e(Op,ypo),e(x,Lpo),e(x,Vp),e(Vp,one),e(one,xpo),e(Vp,$po),e(Vp,dI),e(dI,kpo),e(Vp,Spo),e(x,Rpo),e(x,Xp),e(Xp,rne),e(rne,Bpo),e(Xp,Ppo),e(Xp,cI),e(cI,Ipo),e(Xp,qpo),e(x,Npo),e(x,zp),e(zp,tne),e(tne,jpo),e(zp,Dpo),e(zp,fI),e(fI,Gpo),e(zp,Opo),e(x,Vpo),e(x,Qp),e(Qp,ane),e(ane,Xpo),e(Qp,zpo),e(Qp,mI),e(mI,Qpo),e(Qp,Wpo),e(x,Hpo),e(x,Wp),e(Wp,nne),e(nne,Upo),e(Wp,Jpo),e(Wp,gI),e(gI,Ypo),e(Wp,Kpo),e(x,Zpo),e(x,Hp),e(Hp,sne),e(sne,euo),e(Hp,ouo),e(Hp,hI),e(hI,ruo),e(Hp,tuo),e(x,auo),e(x,Up),e(Up,lne),e(lne,nuo),e(Up,suo),e(Up,pI),e(pI,luo),e(Up,iuo),e(x,duo),e(x,Jp),e(Jp,ine),e(ine,cuo),e(Jp,fuo),e(Jp,uI),e(uI,muo),e(Jp,guo),e(x,huo),e(x,Yp),e(Yp,dne),e(dne,puo),e(Yp,uuo),e(Yp,_I),e(_I,_uo),e(Yp,buo),e(x,vuo),e(x,Kp),e(Kp,cne),e(cne,Fuo),e(Kp,Tuo),e(Kp,bI),e(bI,Muo),e(Kp,Euo),e(x,Cuo),e(x,Zp),e(Zp,fne),e(fne,wuo),e(Zp,Auo),e(Zp,vI),e(vI,yuo),e(Zp,Luo),e(x,xuo),e(x,eu),e(eu,mne),e(mne,$uo),e(eu,kuo),e(eu,FI),e(FI,Suo),e(eu,Ruo),e(x,Buo),e(x,ou),e(ou,gne),e(gne,Puo),e(ou,Iuo),e(ou,TI),e(TI,quo),e(ou,Nuo),e(x,juo),e(x,ru),e(ru,hne),e(hne,Duo),e(ru,Guo),e(ru,MI),e(MI,Ouo),e(ru,Vuo),e(x,Xuo),e(x,tu),e(tu,pne),e(pne,zuo),e(tu,Quo),e(tu,EI),e(EI,Wuo),e(tu,Huo),e(x,Uuo),e(x,au),e(au,une),e(une,Juo),e(au,Yuo),e(au,CI),e(CI,Kuo),e(au,Zuo),e(x,e_o),e(x,nu),e(nu,_ne),e(_ne,o_o),e(nu,r_o),e(nu,wI),e(wI,t_o),e(nu,a_o),e(x,n_o),e(x,su),e(su,bne),e(bne,s_o),e(su,l_o),e(su,AI),e(AI,i_o),e(su,d_o),e(x,c_o),e(x,lu),e(lu,vne),e(vne,f_o),e(lu,m_o),e(lu,yI),e(yI,g_o),e(lu,h_o),e(x,p_o),e(x,iu),e(iu,Fne),e(Fne,u_o),e(iu,__o),e(iu,LI),e(LI,b_o),e(iu,v_o),e(x,F_o),e(x,du),e(du,Tne),e(Tne,T_o),e(du,M_o),e(du,xI),e(xI,E_o),e(du,C_o),e(x,w_o),e(x,cu),e(cu,Mne),e(Mne,A_o),e(cu,y_o),e(cu,$I),e($I,L_o),e(cu,x_o),e(x,$_o),e(x,fu),e(fu,Ene),e(Ene,k_o),e(fu,S_o),e(fu,kI),e(kI,R_o),e(fu,B_o),e(x,P_o),e(x,mu),e(mu,Cne),e(Cne,I_o),e(mu,q_o),e(mu,SI),e(SI,N_o),e(mu,j_o),e(x,D_o),e(x,gu),e(gu,wne),e(wne,G_o),e(gu,O_o),e(gu,RI),e(RI,V_o),e(gu,X_o),e(x,z_o),e(x,hu),e(hu,Ane),e(Ane,Q_o),e(hu,W_o),e(hu,BI),e(BI,H_o),e(hu,U_o),e(He,J_o),e(He,pu),e(pu,Y_o),e(pu,yne),e(yne,K_o),e(pu,Z_o),e(pu,Lne),e(Lne,e1o),e(He,o1o),M(uu,He,null),b(f,aBe,_),b(f,bi,_),e(bi,_u),e(_u,xne),M(HA,xne,null),e(bi,r1o),e(bi,$ne),e($ne,t1o),b(f,nBe,_),b(f,xo,_),M(UA,xo,null),e(xo,a1o),e(xo,vi),e(vi,n1o),e(vi,PI),e(PI,s1o),e(vi,l1o),e(vi,II),e(II,i1o),e(vi,d1o),e(xo,c1o),e(xo,JA),e(JA,f1o),e(JA,kne),e(kne,m1o),e(JA,g1o),e(xo,h1o),e(xo,et),M(YA,et,null),e(et,p1o),e(et,Sne),e(Sne,u1o),e(et,_1o),e(et,Fi),e(Fi,b1o),e(Fi,Rne),e(Rne,v1o),e(Fi,F1o),e(Fi,qI),e(qI,T1o),e(Fi,M1o),e(et,E1o),M(bu,et,null),e(xo,C1o),e(xo,Ue),M(KA,Ue,null),e(Ue,w1o),e(Ue,Bne),e(Bne,A1o),e(Ue,y1o),e(Ue,Ca),e(Ca,L1o),e(Ca,Pne),e(Pne,x1o),e(Ca,$1o),e(Ca,Ine),e(Ine,k1o),e(Ca,S1o),e(Ca,qne),e(qne,R1o),e(Ca,B1o),e(Ue,P1o),e(Ue,G),e(G,vu),e(vu,Nne),e(Nne,I1o),e(vu,q1o),e(vu,NI),e(NI,N1o),e(vu,j1o),e(G,D1o),e(G,Fu),e(Fu,jne),e(jne,G1o),e(Fu,O1o),e(Fu,jI),e(jI,V1o),e(Fu,X1o),e(G,z1o),e(G,Tu),e(Tu,Dne),e(Dne,Q1o),e(Tu,W1o),e(Tu,DI),e(DI,H1o),e(Tu,U1o),e(G,J1o),e(G,Mu),e(Mu,Gne),e(Gne,Y1o),e(Mu,K1o),e(Mu,GI),e(GI,Z1o),e(Mu,e9o),e(G,o9o),e(G,Eu),e(Eu,One),e(One,r9o),e(Eu,t9o),e(Eu,OI),e(OI,a9o),e(Eu,n9o),e(G,s9o),e(G,Cu),e(Cu,Vne),e(Vne,l9o),e(Cu,i9o),e(Cu,VI),e(VI,d9o),e(Cu,c9o),e(G,f9o),e(G,wu),e(wu,Xne),e(Xne,m9o),e(wu,g9o),e(wu,XI),e(XI,h9o),e(wu,p9o),e(G,u9o),e(G,Au),e(Au,zne),e(zne,_9o),e(Au,b9o),e(Au,zI),e(zI,v9o),e(Au,F9o),e(G,T9o),e(G,yu),e(yu,Qne),e(Qne,M9o),e(yu,E9o),e(yu,QI),e(QI,C9o),e(yu,w9o),e(G,A9o),e(G,Lu),e(Lu,Wne),e(Wne,y9o),e(Lu,L9o),e(Lu,WI),e(WI,x9o),e(Lu,$9o),e(G,k9o),e(G,xu),e(xu,Hne),e(Hne,S9o),e(xu,R9o),e(xu,HI),e(HI,B9o),e(xu,P9o),e(G,I9o),e(G,$u),e($u,Une),e(Une,q9o),e($u,N9o),e($u,UI),e(UI,j9o),e($u,D9o),e(G,G9o),e(G,ku),e(ku,Jne),e(Jne,O9o),e(ku,V9o),e(ku,JI),e(JI,X9o),e(ku,z9o),e(G,Q9o),e(G,Su),e(Su,Yne),e(Yne,W9o),e(Su,H9o),e(Su,YI),e(YI,U9o),e(Su,J9o),e(G,Y9o),e(G,Ru),e(Ru,Kne),e(Kne,K9o),e(Ru,Z9o),e(Ru,KI),e(KI,ebo),e(Ru,obo),e(G,rbo),e(G,Bu),e(Bu,Zne),e(Zne,tbo),e(Bu,abo),e(Bu,ZI),e(ZI,nbo),e(Bu,sbo),e(G,lbo),e(G,Pu),e(Pu,ese),e(ese,ibo),e(Pu,dbo),e(Pu,eq),e(eq,cbo),e(Pu,fbo),e(G,mbo),e(G,Iu),e(Iu,ose),e(ose,gbo),e(Iu,hbo),e(Iu,oq),e(oq,pbo),e(Iu,ubo),e(G,_bo),e(G,qu),e(qu,rse),e(rse,bbo),e(qu,vbo),e(qu,rq),e(rq,Fbo),e(qu,Tbo),e(G,Mbo),e(G,Nu),e(Nu,tse),e(tse,Ebo),e(Nu,Cbo),e(Nu,tq),e(tq,wbo),e(Nu,Abo),e(G,ybo),e(G,ju),e(ju,ase),e(ase,Lbo),e(ju,xbo),e(ju,aq),e(aq,$bo),e(ju,kbo),e(G,Sbo),e(G,Du),e(Du,nse),e(nse,Rbo),e(Du,Bbo),e(Du,nq),e(nq,Pbo),e(Du,Ibo),e(G,qbo),e(G,Gu),e(Gu,sse),e(sse,Nbo),e(Gu,jbo),e(Gu,sq),e(sq,Dbo),e(Gu,Gbo),e(G,Obo),e(G,Ou),e(Ou,lse),e(lse,Vbo),e(Ou,Xbo),e(Ou,lq),e(lq,zbo),e(Ou,Qbo),e(G,Wbo),e(G,Vu),e(Vu,ise),e(ise,Hbo),e(Vu,Ubo),e(Vu,iq),e(iq,Jbo),e(Vu,Ybo),e(G,Kbo),e(G,Xu),e(Xu,dse),e(dse,Zbo),e(Xu,e2o),e(Xu,dq),e(dq,o2o),e(Xu,r2o),e(G,t2o),e(G,zu),e(zu,cse),e(cse,a2o),e(zu,n2o),e(zu,cq),e(cq,s2o),e(zu,l2o),e(G,i2o),e(G,Qu),e(Qu,fse),e(fse,d2o),e(Qu,c2o),e(Qu,fq),e(fq,f2o),e(Qu,m2o),e(G,g2o),e(G,Wu),e(Wu,mse),e(mse,h2o),e(Wu,p2o),e(Wu,mq),e(mq,u2o),e(Wu,_2o),e(G,b2o),e(G,Hu),e(Hu,gse),e(gse,v2o),e(Hu,F2o),e(Hu,gq),e(gq,T2o),e(Hu,M2o),e(G,E2o),e(G,Uu),e(Uu,hse),e(hse,C2o),e(Uu,w2o),e(Uu,hq),e(hq,A2o),e(Uu,y2o),e(G,L2o),e(G,Ju),e(Ju,pse),e(pse,x2o),e(Ju,$2o),e(Ju,pq),e(pq,k2o),e(Ju,S2o),e(G,R2o),e(G,Yu),e(Yu,use),e(use,B2o),e(Yu,P2o),e(Yu,uq),e(uq,I2o),e(Yu,q2o),e(G,N2o),e(G,Ku),e(Ku,_se),e(_se,j2o),e(Ku,D2o),e(Ku,_q),e(_q,G2o),e(Ku,O2o),e(G,V2o),e(G,Zu),e(Zu,bse),e(bse,X2o),e(Zu,z2o),e(Zu,bq),e(bq,Q2o),e(Zu,W2o),e(G,H2o),e(G,e_),e(e_,vse),e(vse,U2o),e(e_,J2o),e(e_,vq),e(vq,Y2o),e(e_,K2o),e(G,Z2o),e(G,o_),e(o_,Fse),e(Fse,e5o),e(o_,o5o),e(o_,Fq),e(Fq,r5o),e(o_,t5o),e(G,a5o),e(G,r_),e(r_,Tse),e(Tse,n5o),e(r_,s5o),e(r_,Tq),e(Tq,l5o),e(r_,i5o),e(G,d5o),e(G,t_),e(t_,Mse),e(Mse,c5o),e(t_,f5o),e(t_,Mq),e(Mq,m5o),e(t_,g5o),e(Ue,h5o),e(Ue,a_),e(a_,p5o),e(a_,Ese),e(Ese,u5o),e(a_,_5o),e(a_,Cse),e(Cse,b5o),e(Ue,v5o),M(n_,Ue,null),b(f,sBe,_),b(f,Ti,_),e(Ti,s_),e(s_,wse),M(ZA,wse,null),e(Ti,F5o),e(Ti,Ase),e(Ase,T5o),b(f,lBe,_),b(f,$o,_),M(e0,$o,null),e($o,M5o),e($o,Mi),e(Mi,E5o),e(Mi,Eq),e(Eq,C5o),e(Mi,w5o),e(Mi,Cq),e(Cq,A5o),e(Mi,y5o),e($o,L5o),e($o,o0),e(o0,x5o),e(o0,yse),e(yse,$5o),e(o0,k5o),e($o,S5o),e($o,ot),M(r0,ot,null),e(ot,R5o),e(ot,Lse),e(Lse,B5o),e(ot,P5o),e(ot,Ei),e(Ei,I5o),e(Ei,xse),e(xse,q5o),e(Ei,N5o),e(Ei,wq),e(wq,j5o),e(Ei,D5o),e(ot,G5o),M(l_,ot,null),e($o,O5o),e($o,Je),M(t0,Je,null),e(Je,V5o),e(Je,$se),e($se,X5o),e(Je,z5o),e(Je,wa),e(wa,Q5o),e(wa,kse),e(kse,W5o),e(wa,H5o),e(wa,Sse),e(Sse,U5o),e(wa,J5o),e(wa,Rse),e(Rse,Y5o),e(wa,K5o),e(Je,Z5o),e(Je,z),e(z,i_),e(i_,Bse),e(Bse,evo),e(i_,ovo),e(i_,Aq),e(Aq,rvo),e(i_,tvo),e(z,avo),e(z,d_),e(d_,Pse),e(Pse,nvo),e(d_,svo),e(d_,yq),e(yq,lvo),e(d_,ivo),e(z,dvo),e(z,c_),e(c_,Ise),e(Ise,cvo),e(c_,fvo),e(c_,Lq),e(Lq,mvo),e(c_,gvo),e(z,hvo),e(z,f_),e(f_,qse),e(qse,pvo),e(f_,uvo),e(f_,xq),e(xq,_vo),e(f_,bvo),e(z,vvo),e(z,m_),e(m_,Nse),e(Nse,Fvo),e(m_,Tvo),e(m_,$q),e($q,Mvo),e(m_,Evo),e(z,Cvo),e(z,g_),e(g_,jse),e(jse,wvo),e(g_,Avo),e(g_,kq),e(kq,yvo),e(g_,Lvo),e(z,xvo),e(z,h_),e(h_,Dse),e(Dse,$vo),e(h_,kvo),e(h_,Sq),e(Sq,Svo),e(h_,Rvo),e(z,Bvo),e(z,p_),e(p_,Gse),e(Gse,Pvo),e(p_,Ivo),e(p_,Rq),e(Rq,qvo),e(p_,Nvo),e(z,jvo),e(z,u_),e(u_,Ose),e(Ose,Dvo),e(u_,Gvo),e(u_,Bq),e(Bq,Ovo),e(u_,Vvo),e(z,Xvo),e(z,__),e(__,Vse),e(Vse,zvo),e(__,Qvo),e(__,Pq),e(Pq,Wvo),e(__,Hvo),e(z,Uvo),e(z,b_),e(b_,Xse),e(Xse,Jvo),e(b_,Yvo),e(b_,Iq),e(Iq,Kvo),e(b_,Zvo),e(z,eFo),e(z,v_),e(v_,zse),e(zse,oFo),e(v_,rFo),e(v_,qq),e(qq,tFo),e(v_,aFo),e(z,nFo),e(z,F_),e(F_,Qse),e(Qse,sFo),e(F_,lFo),e(F_,Nq),e(Nq,iFo),e(F_,dFo),e(z,cFo),e(z,T_),e(T_,Wse),e(Wse,fFo),e(T_,mFo),e(T_,jq),e(jq,gFo),e(T_,hFo),e(z,pFo),e(z,M_),e(M_,Hse),e(Hse,uFo),e(M_,_Fo),e(M_,Dq),e(Dq,bFo),e(M_,vFo),e(z,FFo),e(z,E_),e(E_,Use),e(Use,TFo),e(E_,MFo),e(E_,Gq),e(Gq,EFo),e(E_,CFo),e(z,wFo),e(z,C_),e(C_,Jse),e(Jse,AFo),e(C_,yFo),e(C_,Oq),e(Oq,LFo),e(C_,xFo),e(z,$Fo),e(z,w_),e(w_,Yse),e(Yse,kFo),e(w_,SFo),e(w_,Vq),e(Vq,RFo),e(w_,BFo),e(z,PFo),e(z,A_),e(A_,Kse),e(Kse,IFo),e(A_,qFo),e(A_,Xq),e(Xq,NFo),e(A_,jFo),e(z,DFo),e(z,y_),e(y_,Zse),e(Zse,GFo),e(y_,OFo),e(y_,zq),e(zq,VFo),e(y_,XFo),e(z,zFo),e(z,L_),e(L_,ele),e(ele,QFo),e(L_,WFo),e(L_,Qq),e(Qq,HFo),e(L_,UFo),e(z,JFo),e(z,x_),e(x_,ole),e(ole,YFo),e(x_,KFo),e(x_,Wq),e(Wq,ZFo),e(x_,e6o),e(z,o6o),e(z,$_),e($_,rle),e(rle,r6o),e($_,t6o),e($_,Hq),e(Hq,a6o),e($_,n6o),e(z,s6o),e(z,k_),e(k_,tle),e(tle,l6o),e(k_,i6o),e(k_,Uq),e(Uq,d6o),e(k_,c6o),e(z,f6o),e(z,S_),e(S_,ale),e(ale,m6o),e(S_,g6o),e(S_,Jq),e(Jq,h6o),e(S_,p6o),e(z,u6o),e(z,R_),e(R_,nle),e(nle,_6o),e(R_,b6o),e(R_,Yq),e(Yq,v6o),e(R_,F6o),e(z,T6o),e(z,B_),e(B_,sle),e(sle,M6o),e(B_,E6o),e(B_,Kq),e(Kq,C6o),e(B_,w6o),e(z,A6o),e(z,P_),e(P_,lle),e(lle,y6o),e(P_,L6o),e(P_,Zq),e(Zq,x6o),e(P_,$6o),e(z,k6o),e(z,I_),e(I_,ile),e(ile,S6o),e(I_,R6o),e(I_,eN),e(eN,B6o),e(I_,P6o),e(z,I6o),e(z,q_),e(q_,dle),e(dle,q6o),e(q_,N6o),e(q_,oN),e(oN,j6o),e(q_,D6o),e(z,G6o),e(z,N_),e(N_,cle),e(cle,O6o),e(N_,V6o),e(N_,rN),e(rN,X6o),e(N_,z6o),e(z,Q6o),e(z,j_),e(j_,fle),e(fle,W6o),e(j_,H6o),e(j_,tN),e(tN,U6o),e(j_,J6o),e(z,Y6o),e(z,D_),e(D_,mle),e(mle,K6o),e(D_,Z6o),e(D_,aN),e(aN,eTo),e(D_,oTo),e(z,rTo),e(z,G_),e(G_,gle),e(gle,tTo),e(G_,aTo),e(G_,nN),e(nN,nTo),e(G_,sTo),e(z,lTo),e(z,O_),e(O_,hle),e(hle,iTo),e(O_,dTo),e(O_,sN),e(sN,cTo),e(O_,fTo),e(Je,mTo),e(Je,V_),e(V_,gTo),e(V_,ple),e(ple,hTo),e(V_,pTo),e(V_,ule),e(ule,uTo),e(Je,_To),M(X_,Je,null),b(f,iBe,_),b(f,Ci,_),e(Ci,z_),e(z_,_le),M(a0,_le,null),e(Ci,bTo),e(Ci,ble),e(ble,vTo),b(f,dBe,_),b(f,ko,_),M(n0,ko,null),e(ko,FTo),e(ko,wi),e(wi,TTo),e(wi,lN),e(lN,MTo),e(wi,ETo),e(wi,iN),e(iN,CTo),e(wi,wTo),e(ko,ATo),e(ko,s0),e(s0,yTo),e(s0,vle),e(vle,LTo),e(s0,xTo),e(ko,$To),e(ko,rt),M(l0,rt,null),e(rt,kTo),e(rt,Fle),e(Fle,STo),e(rt,RTo),e(rt,Ai),e(Ai,BTo),e(Ai,Tle),e(Tle,PTo),e(Ai,ITo),e(Ai,dN),e(dN,qTo),e(Ai,NTo),e(rt,jTo),M(Q_,rt,null),e(ko,DTo),e(ko,Ye),M(i0,Ye,null),e(Ye,GTo),e(Ye,Mle),e(Mle,OTo),e(Ye,VTo),e(Ye,Aa),e(Aa,XTo),e(Aa,Ele),e(Ele,zTo),e(Aa,QTo),e(Aa,Cle),e(Cle,WTo),e(Aa,HTo),e(Aa,wle),e(wle,UTo),e(Aa,JTo),e(Ye,YTo),e(Ye,Q),e(Q,W_),e(W_,Ale),e(Ale,KTo),e(W_,ZTo),e(W_,cN),e(cN,eMo),e(W_,oMo),e(Q,rMo),e(Q,H_),e(H_,yle),e(yle,tMo),e(H_,aMo),e(H_,fN),e(fN,nMo),e(H_,sMo),e(Q,lMo),e(Q,U_),e(U_,Lle),e(Lle,iMo),e(U_,dMo),e(U_,mN),e(mN,cMo),e(U_,fMo),e(Q,mMo),e(Q,J_),e(J_,xle),e(xle,gMo),e(J_,hMo),e(J_,gN),e(gN,pMo),e(J_,uMo),e(Q,_Mo),e(Q,Y_),e(Y_,$le),e($le,bMo),e(Y_,vMo),e(Y_,hN),e(hN,FMo),e(Y_,TMo),e(Q,MMo),e(Q,K_),e(K_,kle),e(kle,EMo),e(K_,CMo),e(K_,pN),e(pN,wMo),e(K_,AMo),e(Q,yMo),e(Q,Z_),e(Z_,Sle),e(Sle,LMo),e(Z_,xMo),e(Z_,uN),e(uN,$Mo),e(Z_,kMo),e(Q,SMo),e(Q,e1),e(e1,Rle),e(Rle,RMo),e(e1,BMo),e(e1,_N),e(_N,PMo),e(e1,IMo),e(Q,qMo),e(Q,o1),e(o1,Ble),e(Ble,NMo),e(o1,jMo),e(o1,bN),e(bN,DMo),e(o1,GMo),e(Q,OMo),e(Q,r1),e(r1,Ple),e(Ple,VMo),e(r1,XMo),e(r1,vN),e(vN,zMo),e(r1,QMo),e(Q,WMo),e(Q,t1),e(t1,Ile),e(Ile,HMo),e(t1,UMo),e(t1,FN),e(FN,JMo),e(t1,YMo),e(Q,KMo),e(Q,a1),e(a1,qle),e(qle,ZMo),e(a1,e4o),e(a1,TN),e(TN,o4o),e(a1,r4o),e(Q,t4o),e(Q,n1),e(n1,Nle),e(Nle,a4o),e(n1,n4o),e(n1,MN),e(MN,s4o),e(n1,l4o),e(Q,i4o),e(Q,s1),e(s1,jle),e(jle,d4o),e(s1,c4o),e(s1,EN),e(EN,f4o),e(s1,m4o),e(Q,g4o),e(Q,l1),e(l1,Dle),e(Dle,h4o),e(l1,p4o),e(l1,CN),e(CN,u4o),e(l1,_4o),e(Q,b4o),e(Q,i1),e(i1,Gle),e(Gle,v4o),e(i1,F4o),e(i1,wN),e(wN,T4o),e(i1,M4o),e(Q,E4o),e(Q,d1),e(d1,Ole),e(Ole,C4o),e(d1,w4o),e(d1,AN),e(AN,A4o),e(d1,y4o),e(Q,L4o),e(Q,c1),e(c1,Vle),e(Vle,x4o),e(c1,$4o),e(c1,yN),e(yN,k4o),e(c1,S4o),e(Q,R4o),e(Q,f1),e(f1,Xle),e(Xle,B4o),e(f1,P4o),e(f1,LN),e(LN,I4o),e(f1,q4o),e(Q,N4o),e(Q,m1),e(m1,zle),e(zle,j4o),e(m1,D4o),e(m1,xN),e(xN,G4o),e(m1,O4o),e(Q,V4o),e(Q,g1),e(g1,Qle),e(Qle,X4o),e(g1,z4o),e(g1,$N),e($N,Q4o),e(g1,W4o),e(Q,H4o),e(Q,h1),e(h1,Wle),e(Wle,U4o),e(h1,J4o),e(h1,kN),e(kN,Y4o),e(h1,K4o),e(Q,Z4o),e(Q,p1),e(p1,Hle),e(Hle,eEo),e(p1,oEo),e(p1,SN),e(SN,rEo),e(p1,tEo),e(Q,aEo),e(Q,u1),e(u1,Ule),e(Ule,nEo),e(u1,sEo),e(u1,RN),e(RN,lEo),e(u1,iEo),e(Q,dEo),e(Q,_1),e(_1,Jle),e(Jle,cEo),e(_1,fEo),e(_1,BN),e(BN,mEo),e(_1,gEo),e(Q,hEo),e(Q,b1),e(b1,Yle),e(Yle,pEo),e(b1,uEo),e(b1,PN),e(PN,_Eo),e(b1,bEo),e(Q,vEo),e(Q,v1),e(v1,Kle),e(Kle,FEo),e(v1,TEo),e(v1,IN),e(IN,MEo),e(v1,EEo),e(Q,CEo),e(Q,F1),e(F1,Zle),e(Zle,wEo),e(F1,AEo),e(F1,qN),e(qN,yEo),e(F1,LEo),e(Q,xEo),e(Q,T1),e(T1,eie),e(eie,$Eo),e(T1,kEo),e(T1,NN),e(NN,SEo),e(T1,REo),e(Q,BEo),e(Q,M1),e(M1,oie),e(oie,PEo),e(M1,IEo),e(M1,jN),e(jN,qEo),e(M1,NEo),e(Q,jEo),e(Q,E1),e(E1,rie),e(rie,DEo),e(E1,GEo),e(E1,tie),e(tie,OEo),e(E1,VEo),e(Q,XEo),e(Q,C1),e(C1,aie),e(aie,zEo),e(C1,QEo),e(C1,DN),e(DN,WEo),e(C1,HEo),e(Q,UEo),e(Q,w1),e(w1,nie),e(nie,JEo),e(w1,YEo),e(w1,GN),e(GN,KEo),e(w1,ZEo),e(Q,eCo),e(Q,A1),e(A1,sie),e(sie,oCo),e(A1,rCo),e(A1,ON),e(ON,tCo),e(A1,aCo),e(Q,nCo),e(Q,y1),e(y1,lie),e(lie,sCo),e(y1,lCo),e(y1,VN),e(VN,iCo),e(y1,dCo),e(Ye,cCo),e(Ye,L1),e(L1,fCo),e(L1,iie),e(iie,mCo),e(L1,gCo),e(L1,die),e(die,hCo),e(Ye,pCo),M(x1,Ye,null),b(f,cBe,_),b(f,yi,_),e(yi,$1),e($1,cie),M(d0,cie,null),e(yi,uCo),e(yi,fie),e(fie,_Co),b(f,fBe,_),b(f,So,_),M(c0,So,null),e(So,bCo),e(So,Li),e(Li,vCo),e(Li,XN),e(XN,FCo),e(Li,TCo),e(Li,zN),e(zN,MCo),e(Li,ECo),e(So,CCo),e(So,f0),e(f0,wCo),e(f0,mie),e(mie,ACo),e(f0,yCo),e(So,LCo),e(So,tt),M(m0,tt,null),e(tt,xCo),e(tt,gie),e(gie,$Co),e(tt,kCo),e(tt,xi),e(xi,SCo),e(xi,hie),e(hie,RCo),e(xi,BCo),e(xi,QN),e(QN,PCo),e(xi,ICo),e(tt,qCo),M(k1,tt,null),e(So,NCo),e(So,Ke),M(g0,Ke,null),e(Ke,jCo),e(Ke,pie),e(pie,DCo),e(Ke,GCo),e(Ke,ya),e(ya,OCo),e(ya,uie),e(uie,VCo),e(ya,XCo),e(ya,_ie),e(_ie,zCo),e(ya,QCo),e(ya,bie),e(bie,WCo),e(ya,HCo),e(Ke,UCo),e(Ke,he),e(he,S1),e(S1,vie),e(vie,JCo),e(S1,YCo),e(S1,WN),e(WN,KCo),e(S1,ZCo),e(he,e3o),e(he,R1),e(R1,Fie),e(Fie,o3o),e(R1,r3o),e(R1,HN),e(HN,t3o),e(R1,a3o),e(he,n3o),e(he,B1),e(B1,Tie),e(Tie,s3o),e(B1,l3o),e(B1,UN),e(UN,i3o),e(B1,d3o),e(he,c3o),e(he,P1),e(P1,Mie),e(Mie,f3o),e(P1,m3o),e(P1,JN),e(JN,g3o),e(P1,h3o),e(he,p3o),e(he,I1),e(I1,Eie),e(Eie,u3o),e(I1,_3o),e(I1,YN),e(YN,b3o),e(I1,v3o),e(he,F3o),e(he,q1),e(q1,Cie),e(Cie,T3o),e(q1,M3o),e(q1,KN),e(KN,E3o),e(q1,C3o),e(he,w3o),e(he,N1),e(N1,wie),e(wie,A3o),e(N1,y3o),e(N1,ZN),e(ZN,L3o),e(N1,x3o),e(he,$3o),e(he,j1),e(j1,Aie),e(Aie,k3o),e(j1,S3o),e(j1,ej),e(ej,R3o),e(j1,B3o),e(he,P3o),e(he,D1),e(D1,yie),e(yie,I3o),e(D1,q3o),e(D1,oj),e(oj,N3o),e(D1,j3o),e(he,D3o),e(he,G1),e(G1,Lie),e(Lie,G3o),e(G1,O3o),e(G1,rj),e(rj,V3o),e(G1,X3o),e(he,z3o),e(he,O1),e(O1,xie),e(xie,Q3o),e(O1,W3o),e(O1,tj),e(tj,H3o),e(O1,U3o),e(he,J3o),e(he,V1),e(V1,$ie),e($ie,Y3o),e(V1,K3o),e(V1,aj),e(aj,Z3o),e(V1,ewo),e(he,owo),e(he,X1),e(X1,kie),e(kie,rwo),e(X1,two),e(X1,nj),e(nj,awo),e(X1,nwo),e(he,swo),e(he,z1),e(z1,Sie),e(Sie,lwo),e(z1,iwo),e(z1,sj),e(sj,dwo),e(z1,cwo),e(he,fwo),e(he,Q1),e(Q1,Rie),e(Rie,mwo),e(Q1,gwo),e(Q1,lj),e(lj,hwo),e(Q1,pwo),e(he,uwo),e(he,W1),e(W1,Bie),e(Bie,_wo),e(W1,bwo),e(W1,ij),e(ij,vwo),e(W1,Fwo),e(he,Two),e(he,H1),e(H1,Pie),e(Pie,Mwo),e(H1,Ewo),e(H1,dj),e(dj,Cwo),e(H1,wwo),e(Ke,Awo),e(Ke,U1),e(U1,ywo),e(U1,Iie),e(Iie,Lwo),e(U1,xwo),e(U1,qie),e(qie,$wo),e(Ke,kwo),M(J1,Ke,null),b(f,mBe,_),b(f,$i,_),e($i,Y1),e(Y1,Nie),M(h0,Nie,null),e($i,Swo),e($i,jie),e(jie,Rwo),b(f,gBe,_),b(f,Ro,_),M(p0,Ro,null),e(Ro,Bwo),e(Ro,ki),e(ki,Pwo),e(ki,cj),e(cj,Iwo),e(ki,qwo),e(ki,fj),e(fj,Nwo),e(ki,jwo),e(Ro,Dwo),e(Ro,u0),e(u0,Gwo),e(u0,Die),e(Die,Owo),e(u0,Vwo),e(Ro,Xwo),e(Ro,at),M(_0,at,null),e(at,zwo),e(at,Gie),e(Gie,Qwo),e(at,Wwo),e(at,Si),e(Si,Hwo),e(Si,Oie),e(Oie,Uwo),e(Si,Jwo),e(Si,mj),e(mj,Ywo),e(Si,Kwo),e(at,Zwo),M(K1,at,null),e(Ro,eAo),e(Ro,Ze),M(b0,Ze,null),e(Ze,oAo),e(Ze,Vie),e(Vie,rAo),e(Ze,tAo),e(Ze,La),e(La,aAo),e(La,Xie),e(Xie,nAo),e(La,sAo),e(La,zie),e(zie,lAo),e(La,iAo),e(La,Qie),e(Qie,dAo),e(La,cAo),e(Ze,fAo),e(Ze,q),e(q,Z1),e(Z1,Wie),e(Wie,mAo),e(Z1,gAo),e(Z1,gj),e(gj,hAo),e(Z1,pAo),e(q,uAo),e(q,e9),e(e9,Hie),e(Hie,_Ao),e(e9,bAo),e(e9,hj),e(hj,vAo),e(e9,FAo),e(q,TAo),e(q,o9),e(o9,Uie),e(Uie,MAo),e(o9,EAo),e(o9,pj),e(pj,CAo),e(o9,wAo),e(q,AAo),e(q,r9),e(r9,Jie),e(Jie,yAo),e(r9,LAo),e(r9,uj),e(uj,xAo),e(r9,$Ao),e(q,kAo),e(q,t9),e(t9,Yie),e(Yie,SAo),e(t9,RAo),e(t9,_j),e(_j,BAo),e(t9,PAo),e(q,IAo),e(q,a9),e(a9,Kie),e(Kie,qAo),e(a9,NAo),e(a9,bj),e(bj,jAo),e(a9,DAo),e(q,GAo),e(q,n9),e(n9,Zie),e(Zie,OAo),e(n9,VAo),e(n9,vj),e(vj,XAo),e(n9,zAo),e(q,QAo),e(q,s9),e(s9,ede),e(ede,WAo),e(s9,HAo),e(s9,Fj),e(Fj,UAo),e(s9,JAo),e(q,YAo),e(q,l9),e(l9,ode),e(ode,KAo),e(l9,ZAo),e(l9,Tj),e(Tj,e0o),e(l9,o0o),e(q,r0o),e(q,i9),e(i9,rde),e(rde,t0o),e(i9,a0o),e(i9,Mj),e(Mj,n0o),e(i9,s0o),e(q,l0o),e(q,d9),e(d9,tde),e(tde,i0o),e(d9,d0o),e(d9,Ej),e(Ej,c0o),e(d9,f0o),e(q,m0o),e(q,c9),e(c9,ade),e(ade,g0o),e(c9,h0o),e(c9,Cj),e(Cj,p0o),e(c9,u0o),e(q,_0o),e(q,f9),e(f9,nde),e(nde,b0o),e(f9,v0o),e(f9,wj),e(wj,F0o),e(f9,T0o),e(q,M0o),e(q,m9),e(m9,sde),e(sde,E0o),e(m9,C0o),e(m9,Aj),e(Aj,w0o),e(m9,A0o),e(q,y0o),e(q,g9),e(g9,lde),e(lde,L0o),e(g9,x0o),e(g9,yj),e(yj,$0o),e(g9,k0o),e(q,S0o),e(q,h9),e(h9,ide),e(ide,R0o),e(h9,B0o),e(h9,Lj),e(Lj,P0o),e(h9,I0o),e(q,q0o),e(q,p9),e(p9,dde),e(dde,N0o),e(p9,j0o),e(p9,xj),e(xj,D0o),e(p9,G0o),e(q,O0o),e(q,u9),e(u9,cde),e(cde,V0o),e(u9,X0o),e(u9,$j),e($j,z0o),e(u9,Q0o),e(q,W0o),e(q,_9),e(_9,fde),e(fde,H0o),e(_9,U0o),e(_9,kj),e(kj,J0o),e(_9,Y0o),e(q,K0o),e(q,b9),e(b9,mde),e(mde,Z0o),e(b9,eyo),e(b9,Sj),e(Sj,oyo),e(b9,ryo),e(q,tyo),e(q,v9),e(v9,gde),e(gde,ayo),e(v9,nyo),e(v9,Rj),e(Rj,syo),e(v9,lyo),e(q,iyo),e(q,F9),e(F9,hde),e(hde,dyo),e(F9,cyo),e(F9,Bj),e(Bj,fyo),e(F9,myo),e(q,gyo),e(q,T9),e(T9,pde),e(pde,hyo),e(T9,pyo),e(T9,Pj),e(Pj,uyo),e(T9,_yo),e(q,byo),e(q,M9),e(M9,ude),e(ude,vyo),e(M9,Fyo),e(M9,Ij),e(Ij,Tyo),e(M9,Myo),e(q,Eyo),e(q,E9),e(E9,_de),e(_de,Cyo),e(E9,wyo),e(E9,qj),e(qj,Ayo),e(E9,yyo),e(q,Lyo),e(q,C9),e(C9,bde),e(bde,xyo),e(C9,$yo),e(C9,Nj),e(Nj,kyo),e(C9,Syo),e(q,Ryo),e(q,w9),e(w9,vde),e(vde,Byo),e(w9,Pyo),e(w9,jj),e(jj,Iyo),e(w9,qyo),e(q,Nyo),e(q,A9),e(A9,Fde),e(Fde,jyo),e(A9,Dyo),e(A9,Dj),e(Dj,Gyo),e(A9,Oyo),e(q,Vyo),e(q,y9),e(y9,Tde),e(Tde,Xyo),e(y9,zyo),e(y9,Gj),e(Gj,Qyo),e(y9,Wyo),e(q,Hyo),e(q,L9),e(L9,Mde),e(Mde,Uyo),e(L9,Jyo),e(L9,Oj),e(Oj,Yyo),e(L9,Kyo),e(q,Zyo),e(q,x9),e(x9,Ede),e(Ede,eLo),e(x9,oLo),e(x9,Vj),e(Vj,rLo),e(x9,tLo),e(q,aLo),e(q,$9),e($9,Cde),e(Cde,nLo),e($9,sLo),e($9,Xj),e(Xj,lLo),e($9,iLo),e(q,dLo),e(q,k9),e(k9,wde),e(wde,cLo),e(k9,fLo),e(k9,zj),e(zj,mLo),e(k9,gLo),e(q,hLo),e(q,S9),e(S9,Ade),e(Ade,pLo),e(S9,uLo),e(S9,Qj),e(Qj,_Lo),e(S9,bLo),e(q,vLo),e(q,R9),e(R9,yde),e(yde,FLo),e(R9,TLo),e(R9,Wj),e(Wj,MLo),e(R9,ELo),e(q,CLo),e(q,B9),e(B9,Lde),e(Lde,wLo),e(B9,ALo),e(B9,Hj),e(Hj,yLo),e(B9,LLo),e(q,xLo),e(q,P9),e(P9,xde),e(xde,$Lo),e(P9,kLo),e(P9,Uj),e(Uj,SLo),e(P9,RLo),e(q,BLo),e(q,I9),e(I9,$de),e($de,PLo),e(I9,ILo),e(I9,Jj),e(Jj,qLo),e(I9,NLo),e(q,jLo),e(q,q9),e(q9,kde),e(kde,DLo),e(q9,GLo),e(q9,Yj),e(Yj,OLo),e(q9,VLo),e(q,XLo),e(q,N9),e(N9,Sde),e(Sde,zLo),e(N9,QLo),e(N9,Kj),e(Kj,WLo),e(N9,HLo),e(q,ULo),e(q,j9),e(j9,Rde),e(Rde,JLo),e(j9,YLo),e(j9,Zj),e(Zj,KLo),e(j9,ZLo),e(q,e8o),e(q,D9),e(D9,Bde),e(Bde,o8o),e(D9,r8o),e(D9,eD),e(eD,t8o),e(D9,a8o),e(q,n8o),e(q,G9),e(G9,Pde),e(Pde,s8o),e(G9,l8o),e(G9,oD),e(oD,i8o),e(G9,d8o),e(q,c8o),e(q,O9),e(O9,Ide),e(Ide,f8o),e(O9,m8o),e(O9,rD),e(rD,g8o),e(O9,h8o),e(q,p8o),e(q,V9),e(V9,qde),e(qde,u8o),e(V9,_8o),e(V9,tD),e(tD,b8o),e(V9,v8o),e(q,F8o),e(q,X9),e(X9,Nde),e(Nde,T8o),e(X9,M8o),e(X9,aD),e(aD,E8o),e(X9,C8o),e(q,w8o),e(q,z9),e(z9,jde),e(jde,A8o),e(z9,y8o),e(z9,nD),e(nD,L8o),e(z9,x8o),e(Ze,$8o),e(Ze,Q9),e(Q9,k8o),e(Q9,Dde),e(Dde,S8o),e(Q9,R8o),e(Q9,Gde),e(Gde,B8o),e(Ze,P8o),M(W9,Ze,null),b(f,hBe,_),b(f,Ri,_),e(Ri,H9),e(H9,Ode),M(v0,Ode,null),e(Ri,I8o),e(Ri,Vde),e(Vde,q8o),b(f,pBe,_),b(f,Bo,_),M(F0,Bo,null),e(Bo,N8o),e(Bo,Bi),e(Bi,j8o),e(Bi,sD),e(sD,D8o),e(Bi,G8o),e(Bi,lD),e(lD,O8o),e(Bi,V8o),e(Bo,X8o),e(Bo,T0),e(T0,z8o),e(T0,Xde),e(Xde,Q8o),e(T0,W8o),e(Bo,H8o),e(Bo,nt),M(M0,nt,null),e(nt,U8o),e(nt,zde),e(zde,J8o),e(nt,Y8o),e(nt,Pi),e(Pi,K8o),e(Pi,Qde),e(Qde,Z8o),e(Pi,exo),e(Pi,iD),e(iD,oxo),e(Pi,rxo),e(nt,txo),M(U9,nt,null),e(Bo,axo),e(Bo,eo),M(E0,eo,null),e(eo,nxo),e(eo,Wde),e(Wde,sxo),e(eo,lxo),e(eo,xa),e(xa,ixo),e(xa,Hde),e(Hde,dxo),e(xa,cxo),e(xa,Ude),e(Ude,fxo),e(xa,mxo),e(xa,Jde),e(Jde,gxo),e(xa,hxo),e(eo,pxo),e(eo,Y),e(Y,J9),e(J9,Yde),e(Yde,uxo),e(J9,_xo),e(J9,dD),e(dD,bxo),e(J9,vxo),e(Y,Fxo),e(Y,Y9),e(Y9,Kde),e(Kde,Txo),e(Y9,Mxo),e(Y9,cD),e(cD,Exo),e(Y9,Cxo),e(Y,wxo),e(Y,K9),e(K9,Zde),e(Zde,Axo),e(K9,yxo),e(K9,fD),e(fD,Lxo),e(K9,xxo),e(Y,$xo),e(Y,Z9),e(Z9,ece),e(ece,kxo),e(Z9,Sxo),e(Z9,mD),e(mD,Rxo),e(Z9,Bxo),e(Y,Pxo),e(Y,eb),e(eb,oce),e(oce,Ixo),e(eb,qxo),e(eb,gD),e(gD,Nxo),e(eb,jxo),e(Y,Dxo),e(Y,ob),e(ob,rce),e(rce,Gxo),e(ob,Oxo),e(ob,hD),e(hD,Vxo),e(ob,Xxo),e(Y,zxo),e(Y,rb),e(rb,tce),e(tce,Qxo),e(rb,Wxo),e(rb,pD),e(pD,Hxo),e(rb,Uxo),e(Y,Jxo),e(Y,tb),e(tb,ace),e(ace,Yxo),e(tb,Kxo),e(tb,uD),e(uD,Zxo),e(tb,e7o),e(Y,o7o),e(Y,ab),e(ab,nce),e(nce,r7o),e(ab,t7o),e(ab,_D),e(_D,a7o),e(ab,n7o),e(Y,s7o),e(Y,nb),e(nb,sce),e(sce,l7o),e(nb,i7o),e(nb,bD),e(bD,d7o),e(nb,c7o),e(Y,f7o),e(Y,sb),e(sb,lce),e(lce,m7o),e(sb,g7o),e(sb,vD),e(vD,h7o),e(sb,p7o),e(Y,u7o),e(Y,lb),e(lb,ice),e(ice,_7o),e(lb,b7o),e(lb,FD),e(FD,v7o),e(lb,F7o),e(Y,T7o),e(Y,ib),e(ib,dce),e(dce,M7o),e(ib,E7o),e(ib,TD),e(TD,C7o),e(ib,w7o),e(Y,A7o),e(Y,db),e(db,cce),e(cce,y7o),e(db,L7o),e(db,MD),e(MD,x7o),e(db,$7o),e(Y,k7o),e(Y,cb),e(cb,fce),e(fce,S7o),e(cb,R7o),e(cb,ED),e(ED,B7o),e(cb,P7o),e(Y,I7o),e(Y,fb),e(fb,mce),e(mce,q7o),e(fb,N7o),e(fb,CD),e(CD,j7o),e(fb,D7o),e(Y,G7o),e(Y,mb),e(mb,gce),e(gce,O7o),e(mb,V7o),e(mb,wD),e(wD,X7o),e(mb,z7o),e(Y,Q7o),e(Y,gb),e(gb,hce),e(hce,W7o),e(gb,H7o),e(gb,AD),e(AD,U7o),e(gb,J7o),e(Y,Y7o),e(Y,hb),e(hb,pce),e(pce,K7o),e(hb,Z7o),e(hb,yD),e(yD,e$o),e(hb,o$o),e(Y,r$o),e(Y,pb),e(pb,uce),e(uce,t$o),e(pb,a$o),e(pb,LD),e(LD,n$o),e(pb,s$o),e(Y,l$o),e(Y,ub),e(ub,_ce),e(_ce,i$o),e(ub,d$o),e(ub,xD),e(xD,c$o),e(ub,f$o),e(Y,m$o),e(Y,_b),e(_b,bce),e(bce,g$o),e(_b,h$o),e(_b,$D),e($D,p$o),e(_b,u$o),e(Y,_$o),e(Y,bb),e(bb,vce),e(vce,b$o),e(bb,v$o),e(bb,kD),e(kD,F$o),e(bb,T$o),e(Y,M$o),e(Y,vb),e(vb,Fce),e(Fce,E$o),e(vb,C$o),e(vb,SD),e(SD,w$o),e(vb,A$o),e(Y,y$o),e(Y,Fb),e(Fb,Tce),e(Tce,L$o),e(Fb,x$o),e(Fb,RD),e(RD,$$o),e(Fb,k$o),e(Y,S$o),e(Y,Tb),e(Tb,Mce),e(Mce,R$o),e(Tb,B$o),e(Tb,BD),e(BD,P$o),e(Tb,I$o),e(Y,q$o),e(Y,Mb),e(Mb,Ece),e(Ece,N$o),e(Mb,j$o),e(Mb,PD),e(PD,D$o),e(Mb,G$o),e(Y,O$o),e(Y,Eb),e(Eb,Cce),e(Cce,V$o),e(Eb,X$o),e(Eb,ID),e(ID,z$o),e(Eb,Q$o),e(eo,W$o),e(eo,Cb),e(Cb,H$o),e(Cb,wce),e(wce,U$o),e(Cb,J$o),e(Cb,Ace),e(Ace,Y$o),e(eo,K$o),M(wb,eo,null),b(f,uBe,_),b(f,Ii,_),e(Ii,Ab),e(Ab,yce),M(C0,yce,null),e(Ii,Z$o),e(Ii,Lce),e(Lce,eko),b(f,_Be,_),b(f,Po,_),M(w0,Po,null),e(Po,oko),e(Po,qi),e(qi,rko),e(qi,qD),e(qD,tko),e(qi,ako),e(qi,ND),e(ND,nko),e(qi,sko),e(Po,lko),e(Po,A0),e(A0,iko),e(A0,xce),e(xce,dko),e(A0,cko),e(Po,fko),e(Po,st),M(y0,st,null),e(st,mko),e(st,$ce),e($ce,gko),e(st,hko),e(st,Ni),e(Ni,pko),e(Ni,kce),e(kce,uko),e(Ni,_ko),e(Ni,jD),e(jD,bko),e(Ni,vko),e(st,Fko),M(yb,st,null),e(Po,Tko),e(Po,oo),M(L0,oo,null),e(oo,Mko),e(oo,Sce),e(Sce,Eko),e(oo,Cko),e(oo,$a),e($a,wko),e($a,Rce),e(Rce,Ako),e($a,yko),e($a,Bce),e(Bce,Lko),e($a,xko),e($a,Pce),e(Pce,$ko),e($a,kko),e(oo,Sko),e(oo,Ur),e(Ur,Lb),e(Lb,Ice),e(Ice,Rko),e(Lb,Bko),e(Lb,DD),e(DD,Pko),e(Lb,Iko),e(Ur,qko),e(Ur,xb),e(xb,qce),e(qce,Nko),e(xb,jko),e(xb,GD),e(GD,Dko),e(xb,Gko),e(Ur,Oko),e(Ur,$b),e($b,Nce),e(Nce,Vko),e($b,Xko),e($b,OD),e(OD,zko),e($b,Qko),e(Ur,Wko),e(Ur,kb),e(kb,jce),e(jce,Hko),e(kb,Uko),e(kb,VD),e(VD,Jko),e(kb,Yko),e(Ur,Kko),e(Ur,Sb),e(Sb,Dce),e(Dce,Zko),e(Sb,eSo),e(Sb,XD),e(XD,oSo),e(Sb,rSo),e(oo,tSo),e(oo,Rb),e(Rb,aSo),e(Rb,Gce),e(Gce,nSo),e(Rb,sSo),e(Rb,Oce),e(Oce,lSo),e(oo,iSo),M(Bb,oo,null),b(f,bBe,_),b(f,ji,_),e(ji,Pb),e(Pb,Vce),M(x0,Vce,null),e(ji,dSo),e(ji,Xce),e(Xce,cSo),b(f,vBe,_),b(f,Io,_),M($0,Io,null),e(Io,fSo),e(Io,Di),e(Di,mSo),e(Di,zD),e(zD,gSo),e(Di,hSo),e(Di,QD),e(QD,pSo),e(Di,uSo),e(Io,_So),e(Io,k0),e(k0,bSo),e(k0,zce),e(zce,vSo),e(k0,FSo),e(Io,TSo),e(Io,lt),M(S0,lt,null),e(lt,MSo),e(lt,Qce),e(Qce,ESo),e(lt,CSo),e(lt,Gi),e(Gi,wSo),e(Gi,Wce),e(Wce,ASo),e(Gi,ySo),e(Gi,WD),e(WD,LSo),e(Gi,xSo),e(lt,$So),M(Ib,lt,null),e(Io,kSo),e(Io,ro),M(R0,ro,null),e(ro,SSo),e(ro,Hce),e(Hce,RSo),e(ro,BSo),e(ro,ka),e(ka,PSo),e(ka,Uce),e(Uce,ISo),e(ka,qSo),e(ka,Jce),e(Jce,NSo),e(ka,jSo),e(ka,Yce),e(Yce,DSo),e(ka,GSo),e(ro,OSo),e(ro,U),e(U,qb),e(qb,Kce),e(Kce,VSo),e(qb,XSo),e(qb,HD),e(HD,zSo),e(qb,QSo),e(U,WSo),e(U,Nb),e(Nb,Zce),e(Zce,HSo),e(Nb,USo),e(Nb,UD),e(UD,JSo),e(Nb,YSo),e(U,KSo),e(U,jb),e(jb,efe),e(efe,ZSo),e(jb,eRo),e(jb,JD),e(JD,oRo),e(jb,rRo),e(U,tRo),e(U,Db),e(Db,ofe),e(ofe,aRo),e(Db,nRo),e(Db,YD),e(YD,sRo),e(Db,lRo),e(U,iRo),e(U,Gb),e(Gb,rfe),e(rfe,dRo),e(Gb,cRo),e(Gb,KD),e(KD,fRo),e(Gb,mRo),e(U,gRo),e(U,Ob),e(Ob,tfe),e(tfe,hRo),e(Ob,pRo),e(Ob,ZD),e(ZD,uRo),e(Ob,_Ro),e(U,bRo),e(U,Vb),e(Vb,afe),e(afe,vRo),e(Vb,FRo),e(Vb,eG),e(eG,TRo),e(Vb,MRo),e(U,ERo),e(U,Xb),e(Xb,nfe),e(nfe,CRo),e(Xb,wRo),e(Xb,oG),e(oG,ARo),e(Xb,yRo),e(U,LRo),e(U,zb),e(zb,sfe),e(sfe,xRo),e(zb,$Ro),e(zb,rG),e(rG,kRo),e(zb,SRo),e(U,RRo),e(U,Qb),e(Qb,lfe),e(lfe,BRo),e(Qb,PRo),e(Qb,tG),e(tG,IRo),e(Qb,qRo),e(U,NRo),e(U,Wb),e(Wb,ife),e(ife,jRo),e(Wb,DRo),e(Wb,aG),e(aG,GRo),e(Wb,ORo),e(U,VRo),e(U,Hb),e(Hb,dfe),e(dfe,XRo),e(Hb,zRo),e(Hb,nG),e(nG,QRo),e(Hb,WRo),e(U,HRo),e(U,Ub),e(Ub,cfe),e(cfe,URo),e(Ub,JRo),e(Ub,sG),e(sG,YRo),e(Ub,KRo),e(U,ZRo),e(U,Jb),e(Jb,ffe),e(ffe,eBo),e(Jb,oBo),e(Jb,lG),e(lG,rBo),e(Jb,tBo),e(U,aBo),e(U,Yb),e(Yb,mfe),e(mfe,nBo),e(Yb,sBo),e(Yb,iG),e(iG,lBo),e(Yb,iBo),e(U,dBo),e(U,Kb),e(Kb,gfe),e(gfe,cBo),e(Kb,fBo),e(Kb,dG),e(dG,mBo),e(Kb,gBo),e(U,hBo),e(U,Zb),e(Zb,hfe),e(hfe,pBo),e(Zb,uBo),e(Zb,cG),e(cG,_Bo),e(Zb,bBo),e(U,vBo),e(U,e2),e(e2,pfe),e(pfe,FBo),e(e2,TBo),e(e2,fG),e(fG,MBo),e(e2,EBo),e(U,CBo),e(U,o2),e(o2,ufe),e(ufe,wBo),e(o2,ABo),e(o2,mG),e(mG,yBo),e(o2,LBo),e(U,xBo),e(U,r2),e(r2,_fe),e(_fe,$Bo),e(r2,kBo),e(r2,gG),e(gG,SBo),e(r2,RBo),e(U,BBo),e(U,t2),e(t2,bfe),e(bfe,PBo),e(t2,IBo),e(t2,hG),e(hG,qBo),e(t2,NBo),e(U,jBo),e(U,a2),e(a2,vfe),e(vfe,DBo),e(a2,GBo),e(a2,pG),e(pG,OBo),e(a2,VBo),e(U,XBo),e(U,n2),e(n2,Ffe),e(Ffe,zBo),e(n2,QBo),e(n2,uG),e(uG,WBo),e(n2,HBo),e(U,UBo),e(U,s2),e(s2,Tfe),e(Tfe,JBo),e(s2,YBo),e(s2,_G),e(_G,KBo),e(s2,ZBo),e(U,ePo),e(U,l2),e(l2,Mfe),e(Mfe,oPo),e(l2,rPo),e(l2,bG),e(bG,tPo),e(l2,aPo),e(U,nPo),e(U,i2),e(i2,Efe),e(Efe,sPo),e(i2,lPo),e(i2,vG),e(vG,iPo),e(i2,dPo),e(U,cPo),e(U,d2),e(d2,Cfe),e(Cfe,fPo),e(d2,mPo),e(d2,FG),e(FG,gPo),e(d2,hPo),e(U,pPo),e(U,c2),e(c2,wfe),e(wfe,uPo),e(c2,_Po),e(c2,TG),e(TG,bPo),e(c2,vPo),e(U,FPo),e(U,f2),e(f2,Afe),e(Afe,TPo),e(f2,MPo),e(f2,MG),e(MG,EPo),e(f2,CPo),e(U,wPo),e(U,m2),e(m2,yfe),e(yfe,APo),e(m2,yPo),e(m2,EG),e(EG,LPo),e(m2,xPo),e(U,$Po),e(U,g2),e(g2,Lfe),e(Lfe,kPo),e(g2,SPo),e(g2,CG),e(CG,RPo),e(g2,BPo),e(U,PPo),e(U,h2),e(h2,xfe),e(xfe,IPo),e(h2,qPo),e(h2,wG),e(wG,NPo),e(h2,jPo),e(U,DPo),e(U,p2),e(p2,$fe),e($fe,GPo),e(p2,OPo),e(p2,AG),e(AG,VPo),e(p2,XPo),e(ro,zPo),e(ro,u2),e(u2,QPo),e(u2,kfe),e(kfe,WPo),e(u2,HPo),e(u2,Sfe),e(Sfe,UPo),e(ro,JPo),M(_2,ro,null),b(f,FBe,_),b(f,Oi,_),e(Oi,b2),e(b2,Rfe),M(B0,Rfe,null),e(Oi,YPo),e(Oi,Bfe),e(Bfe,KPo),b(f,TBe,_),b(f,qo,_),M(P0,qo,null),e(qo,ZPo),e(qo,Vi),e(Vi,eIo),e(Vi,yG),e(yG,oIo),e(Vi,rIo),e(Vi,LG),e(LG,tIo),e(Vi,aIo),e(qo,nIo),e(qo,I0),e(I0,sIo),e(I0,Pfe),e(Pfe,lIo),e(I0,iIo),e(qo,dIo),e(qo,it),M(q0,it,null),e(it,cIo),e(it,Ife),e(Ife,fIo),e(it,mIo),e(it,Xi),e(Xi,gIo),e(Xi,qfe),e(qfe,hIo),e(Xi,pIo),e(Xi,xG),e(xG,uIo),e(Xi,_Io),e(it,bIo),M(v2,it,null),e(qo,vIo),e(qo,to),M(N0,to,null),e(to,FIo),e(to,Nfe),e(Nfe,TIo),e(to,MIo),e(to,Sa),e(Sa,EIo),e(Sa,jfe),e(jfe,CIo),e(Sa,wIo),e(Sa,Dfe),e(Dfe,AIo),e(Sa,yIo),e(Sa,Gfe),e(Gfe,LIo),e(Sa,xIo),e(to,$Io),e(to,O),e(O,F2),e(F2,Ofe),e(Ofe,kIo),e(F2,SIo),e(F2,$G),e($G,RIo),e(F2,BIo),e(O,PIo),e(O,T2),e(T2,Vfe),e(Vfe,IIo),e(T2,qIo),e(T2,kG),e(kG,NIo),e(T2,jIo),e(O,DIo),e(O,M2),e(M2,Xfe),e(Xfe,GIo),e(M2,OIo),e(M2,SG),e(SG,VIo),e(M2,XIo),e(O,zIo),e(O,E2),e(E2,zfe),e(zfe,QIo),e(E2,WIo),e(E2,RG),e(RG,HIo),e(E2,UIo),e(O,JIo),e(O,C2),e(C2,Qfe),e(Qfe,YIo),e(C2,KIo),e(C2,BG),e(BG,ZIo),e(C2,eqo),e(O,oqo),e(O,w2),e(w2,Wfe),e(Wfe,rqo),e(w2,tqo),e(w2,PG),e(PG,aqo),e(w2,nqo),e(O,sqo),e(O,A2),e(A2,Hfe),e(Hfe,lqo),e(A2,iqo),e(A2,IG),e(IG,dqo),e(A2,cqo),e(O,fqo),e(O,y2),e(y2,Ufe),e(Ufe,mqo),e(y2,gqo),e(y2,qG),e(qG,hqo),e(y2,pqo),e(O,uqo),e(O,L2),e(L2,Jfe),e(Jfe,_qo),e(L2,bqo),e(L2,NG),e(NG,vqo),e(L2,Fqo),e(O,Tqo),e(O,x2),e(x2,Yfe),e(Yfe,Mqo),e(x2,Eqo),e(x2,jG),e(jG,Cqo),e(x2,wqo),e(O,Aqo),e(O,$2),e($2,Kfe),e(Kfe,yqo),e($2,Lqo),e($2,DG),e(DG,xqo),e($2,$qo),e(O,kqo),e(O,k2),e(k2,Zfe),e(Zfe,Sqo),e(k2,Rqo),e(k2,GG),e(GG,Bqo),e(k2,Pqo),e(O,Iqo),e(O,S2),e(S2,eme),e(eme,qqo),e(S2,Nqo),e(S2,OG),e(OG,jqo),e(S2,Dqo),e(O,Gqo),e(O,R2),e(R2,ome),e(ome,Oqo),e(R2,Vqo),e(R2,VG),e(VG,Xqo),e(R2,zqo),e(O,Qqo),e(O,B2),e(B2,rme),e(rme,Wqo),e(B2,Hqo),e(B2,XG),e(XG,Uqo),e(B2,Jqo),e(O,Yqo),e(O,P2),e(P2,tme),e(tme,Kqo),e(P2,Zqo),e(P2,zG),e(zG,eNo),e(P2,oNo),e(O,rNo),e(O,I2),e(I2,ame),e(ame,tNo),e(I2,aNo),e(I2,QG),e(QG,nNo),e(I2,sNo),e(O,lNo),e(O,q2),e(q2,nme),e(nme,iNo),e(q2,dNo),e(q2,WG),e(WG,cNo),e(q2,fNo),e(O,mNo),e(O,N2),e(N2,sme),e(sme,gNo),e(N2,hNo),e(N2,HG),e(HG,pNo),e(N2,uNo),e(O,_No),e(O,j2),e(j2,lme),e(lme,bNo),e(j2,vNo),e(j2,UG),e(UG,FNo),e(j2,TNo),e(O,MNo),e(O,D2),e(D2,ime),e(ime,ENo),e(D2,CNo),e(D2,JG),e(JG,wNo),e(D2,ANo),e(O,yNo),e(O,G2),e(G2,dme),e(dme,LNo),e(G2,xNo),e(G2,YG),e(YG,$No),e(G2,kNo),e(O,SNo),e(O,O2),e(O2,cme),e(cme,RNo),e(O2,BNo),e(O2,KG),e(KG,PNo),e(O2,INo),e(O,qNo),e(O,V2),e(V2,fme),e(fme,NNo),e(V2,jNo),e(V2,ZG),e(ZG,DNo),e(V2,GNo),e(O,ONo),e(O,X2),e(X2,mme),e(mme,VNo),e(X2,XNo),e(X2,eO),e(eO,zNo),e(X2,QNo),e(O,WNo),e(O,z2),e(z2,gme),e(gme,HNo),e(z2,UNo),e(z2,oO),e(oO,JNo),e(z2,YNo),e(O,KNo),e(O,Q2),e(Q2,hme),e(hme,ZNo),e(Q2,ejo),e(Q2,rO),e(rO,ojo),e(Q2,rjo),e(O,tjo),e(O,W2),e(W2,pme),e(pme,ajo),e(W2,njo),e(W2,tO),e(tO,sjo),e(W2,ljo),e(O,ijo),e(O,H2),e(H2,ume),e(ume,djo),e(H2,cjo),e(H2,aO),e(aO,fjo),e(H2,mjo),e(O,gjo),e(O,U2),e(U2,_me),e(_me,hjo),e(U2,pjo),e(U2,nO),e(nO,ujo),e(U2,_jo),e(O,bjo),e(O,J2),e(J2,bme),e(bme,vjo),e(J2,Fjo),e(J2,sO),e(sO,Tjo),e(J2,Mjo),e(O,Ejo),e(O,Y2),e(Y2,vme),e(vme,Cjo),e(Y2,wjo),e(Y2,lO),e(lO,Ajo),e(Y2,yjo),e(O,Ljo),e(O,K2),e(K2,Fme),e(Fme,xjo),e(K2,$jo),e(K2,iO),e(iO,kjo),e(K2,Sjo),e(O,Rjo),e(O,Z2),e(Z2,Tme),e(Tme,Bjo),e(Z2,Pjo),e(Z2,dO),e(dO,Ijo),e(Z2,qjo),e(O,Njo),e(O,e5),e(e5,Mme),e(Mme,jjo),e(e5,Djo),e(e5,cO),e(cO,Gjo),e(e5,Ojo),e(O,Vjo),e(O,o5),e(o5,Eme),e(Eme,Xjo),e(o5,zjo),e(o5,fO),e(fO,Qjo),e(o5,Wjo),e(O,Hjo),e(O,r5),e(r5,Cme),e(Cme,Ujo),e(r5,Jjo),e(r5,mO),e(mO,Yjo),e(r5,Kjo),e(O,Zjo),e(O,t5),e(t5,wme),e(wme,eDo),e(t5,oDo),e(t5,gO),e(gO,rDo),e(t5,tDo),e(O,aDo),e(O,a5),e(a5,Ame),e(Ame,nDo),e(a5,sDo),e(a5,hO),e(hO,lDo),e(a5,iDo),e(to,dDo),e(to,n5),e(n5,cDo),e(n5,yme),e(yme,fDo),e(n5,mDo),e(n5,Lme),e(Lme,gDo),e(to,hDo),M(s5,to,null),b(f,MBe,_),b(f,zi,_),e(zi,l5),e(l5,xme),M(j0,xme,null),e(zi,pDo),e(zi,$me),e($me,uDo),b(f,EBe,_),b(f,No,_),M(D0,No,null),e(No,_Do),e(No,Qi),e(Qi,bDo),e(Qi,pO),e(pO,vDo),e(Qi,FDo),e(Qi,uO),e(uO,TDo),e(Qi,MDo),e(No,EDo),e(No,G0),e(G0,CDo),e(G0,kme),e(kme,wDo),e(G0,ADo),e(No,yDo),e(No,dt),M(O0,dt,null),e(dt,LDo),e(dt,Sme),e(Sme,xDo),e(dt,$Do),e(dt,Wi),e(Wi,kDo),e(Wi,Rme),e(Rme,SDo),e(Wi,RDo),e(Wi,_O),e(_O,BDo),e(Wi,PDo),e(dt,IDo),M(i5,dt,null),e(No,qDo),e(No,ao),M(V0,ao,null),e(ao,NDo),e(ao,Bme),e(Bme,jDo),e(ao,DDo),e(ao,Ra),e(Ra,GDo),e(Ra,Pme),e(Pme,ODo),e(Ra,VDo),e(Ra,Ime),e(Ime,XDo),e(Ra,zDo),e(Ra,qme),e(qme,QDo),e(Ra,WDo),e(ao,HDo),e(ao,Nme),e(Nme,d5),e(d5,jme),e(jme,UDo),e(d5,JDo),e(d5,bO),e(bO,YDo),e(d5,KDo),e(ao,ZDo),e(ao,c5),e(c5,eGo),e(c5,Dme),e(Dme,oGo),e(c5,rGo),e(c5,Gme),e(Gme,tGo),e(ao,aGo),M(f5,ao,null),b(f,CBe,_),b(f,Hi,_),e(Hi,m5),e(m5,Ome),M(X0,Ome,null),e(Hi,nGo),e(Hi,Vme),e(Vme,sGo),b(f,wBe,_),b(f,jo,_),M(z0,jo,null),e(jo,lGo),e(jo,Ui),e(Ui,iGo),e(Ui,vO),e(vO,dGo),e(Ui,cGo),e(Ui,FO),e(FO,fGo),e(Ui,mGo),e(jo,gGo),e(jo,Q0),e(Q0,hGo),e(Q0,Xme),e(Xme,pGo),e(Q0,uGo),e(jo,_Go),e(jo,ct),M(W0,ct,null),e(ct,bGo),e(ct,zme),e(zme,vGo),e(ct,FGo),e(ct,Ji),e(Ji,TGo),e(Ji,Qme),e(Qme,MGo),e(Ji,EGo),e(Ji,TO),e(TO,CGo),e(Ji,wGo),e(ct,AGo),M(g5,ct,null),e(jo,yGo),e(jo,no),M(H0,no,null),e(no,LGo),e(no,Wme),e(Wme,xGo),e(no,$Go),e(no,Ba),e(Ba,kGo),e(Ba,Hme),e(Hme,SGo),e(Ba,RGo),e(Ba,Ume),e(Ume,BGo),e(Ba,PGo),e(Ba,Jme),e(Jme,IGo),e(Ba,qGo),e(no,NGo),e(no,ve),e(ve,h5),e(h5,Yme),e(Yme,jGo),e(h5,DGo),e(h5,MO),e(MO,GGo),e(h5,OGo),e(ve,VGo),e(ve,p5),e(p5,Kme),e(Kme,XGo),e(p5,zGo),e(p5,EO),e(EO,QGo),e(p5,WGo),e(ve,HGo),e(ve,u5),e(u5,Zme),e(Zme,UGo),e(u5,JGo),e(u5,CO),e(CO,YGo),e(u5,KGo),e(ve,ZGo),e(ve,xs),e(xs,ege),e(ege,eOo),e(xs,oOo),e(xs,wO),e(wO,rOo),e(xs,tOo),e(xs,AO),e(AO,aOo),e(xs,nOo),e(ve,sOo),e(ve,_5),e(_5,oge),e(oge,lOo),e(_5,iOo),e(_5,yO),e(yO,dOo),e(_5,cOo),e(ve,fOo),e(ve,ft),e(ft,rge),e(rge,mOo),e(ft,gOo),e(ft,LO),e(LO,hOo),e(ft,pOo),e(ft,xO),e(xO,uOo),e(ft,_Oo),e(ft,$O),e($O,bOo),e(ft,vOo),e(ve,FOo),e(ve,b5),e(b5,tge),e(tge,TOo),e(b5,MOo),e(b5,kO),e(kO,EOo),e(b5,COo),e(ve,wOo),e(ve,v5),e(v5,age),e(age,AOo),e(v5,yOo),e(v5,SO),e(SO,LOo),e(v5,xOo),e(ve,$Oo),e(ve,F5),e(F5,nge),e(nge,kOo),e(F5,SOo),e(F5,RO),e(RO,ROo),e(F5,BOo),e(ve,POo),e(ve,T5),e(T5,sge),e(sge,IOo),e(T5,qOo),e(T5,BO),e(BO,NOo),e(T5,jOo),e(ve,DOo),e(ve,M5),e(M5,lge),e(lge,GOo),e(M5,OOo),e(M5,PO),e(PO,VOo),e(M5,XOo),e(ve,zOo),e(ve,E5),e(E5,ige),e(ige,QOo),e(E5,WOo),e(E5,IO),e(IO,HOo),e(E5,UOo),e(ve,JOo),e(ve,C5),e(C5,dge),e(dge,YOo),e(C5,KOo),e(C5,qO),e(qO,ZOo),e(C5,eVo),e(no,oVo),e(no,w5),e(w5,rVo),e(w5,cge),e(cge,tVo),e(w5,aVo),e(w5,fge),e(fge,nVo),e(no,sVo),M(A5,no,null),b(f,ABe,_),b(f,Yi,_),e(Yi,y5),e(y5,mge),M(U0,mge,null),e(Yi,lVo),e(Yi,gge),e(gge,iVo),b(f,yBe,_),b(f,Do,_),M(J0,Do,null),e(Do,dVo),e(Do,Ki),e(Ki,cVo),e(Ki,NO),e(NO,fVo),e(Ki,mVo),e(Ki,jO),e(jO,gVo),e(Ki,hVo),e(Do,pVo),e(Do,Y0),e(Y0,uVo),e(Y0,hge),e(hge,_Vo),e(Y0,bVo),e(Do,vVo),e(Do,mt),M(K0,mt,null),e(mt,FVo),e(mt,pge),e(pge,TVo),e(mt,MVo),e(mt,Zi),e(Zi,EVo),e(Zi,uge),e(uge,CVo),e(Zi,wVo),e(Zi,DO),e(DO,AVo),e(Zi,yVo),e(mt,LVo),M(L5,mt,null),e(Do,xVo),e(Do,so),M(Z0,so,null),e(so,$Vo),e(so,_ge),e(_ge,kVo),e(so,SVo),e(so,Pa),e(Pa,RVo),e(Pa,bge),e(bge,BVo),e(Pa,PVo),e(Pa,vge),e(vge,IVo),e(Pa,qVo),e(Pa,Fge),e(Fge,NVo),e(Pa,jVo),e(so,DVo),e(so,Tge),e(Tge,x5),e(x5,Mge),e(Mge,GVo),e(x5,OVo),e(x5,GO),e(GO,VVo),e(x5,XVo),e(so,zVo),e(so,$5),e($5,QVo),e($5,Ege),e(Ege,WVo),e($5,HVo),e($5,Cge),e(Cge,UVo),e(so,JVo),M(k5,so,null),b(f,LBe,_),b(f,ed,_),e(ed,S5),e(S5,wge),M(ey,wge,null),e(ed,YVo),e(ed,Age),e(Age,KVo),b(f,xBe,_),b(f,Go,_),M(oy,Go,null),e(Go,ZVo),e(Go,od),e(od,eXo),e(od,OO),e(OO,oXo),e(od,rXo),e(od,VO),e(VO,tXo),e(od,aXo),e(Go,nXo),e(Go,ry),e(ry,sXo),e(ry,yge),e(yge,lXo),e(ry,iXo),e(Go,dXo),e(Go,gt),M(ty,gt,null),e(gt,cXo),e(gt,Lge),e(Lge,fXo),e(gt,mXo),e(gt,rd),e(rd,gXo),e(rd,xge),e(xge,hXo),e(rd,pXo),e(rd,XO),e(XO,uXo),e(rd,_Xo),e(gt,bXo),M(R5,gt,null),e(Go,vXo),e(Go,lo),M(ay,lo,null),e(lo,FXo),e(lo,$ge),e($ge,TXo),e(lo,MXo),e(lo,Ia),e(Ia,EXo),e(Ia,kge),e(kge,CXo),e(Ia,wXo),e(Ia,Sge),e(Sge,AXo),e(Ia,yXo),e(Ia,Rge),e(Rge,LXo),e(Ia,xXo),e(lo,$Xo),e(lo,Ne),e(Ne,B5),e(B5,Bge),e(Bge,kXo),e(B5,SXo),e(B5,zO),e(zO,RXo),e(B5,BXo),e(Ne,PXo),e(Ne,P5),e(P5,Pge),e(Pge,IXo),e(P5,qXo),e(P5,QO),e(QO,NXo),e(P5,jXo),e(Ne,DXo),e(Ne,I5),e(I5,Ige),e(Ige,GXo),e(I5,OXo),e(I5,WO),e(WO,VXo),e(I5,XXo),e(Ne,zXo),e(Ne,q5),e(q5,qge),e(qge,QXo),e(q5,WXo),e(q5,HO),e(HO,HXo),e(q5,UXo),e(Ne,JXo),e(Ne,N5),e(N5,Nge),e(Nge,YXo),e(N5,KXo),e(N5,UO),e(UO,ZXo),e(N5,ezo),e(Ne,ozo),e(Ne,j5),e(j5,jge),e(jge,rzo),e(j5,tzo),e(j5,JO),e(JO,azo),e(j5,nzo),e(Ne,szo),e(Ne,D5),e(D5,Dge),e(Dge,lzo),e(D5,izo),e(D5,YO),e(YO,dzo),e(D5,czo),e(Ne,fzo),e(Ne,G5),e(G5,Gge),e(Gge,mzo),e(G5,gzo),e(G5,KO),e(KO,hzo),e(G5,pzo),e(lo,uzo),e(lo,O5),e(O5,_zo),e(O5,Oge),e(Oge,bzo),e(O5,vzo),e(O5,Vge),e(Vge,Fzo),e(lo,Tzo),M(V5,lo,null),b(f,$Be,_),b(f,td,_),e(td,X5),e(X5,Xge),M(ny,Xge,null),e(td,Mzo),e(td,zge),e(zge,Ezo),b(f,kBe,_),b(f,Oo,_),M(sy,Oo,null),e(Oo,Czo),e(Oo,ad),e(ad,wzo),e(ad,ZO),e(ZO,Azo),e(ad,yzo),e(ad,eV),e(eV,Lzo),e(ad,xzo),e(Oo,$zo),e(Oo,ly),e(ly,kzo),e(ly,Qge),e(Qge,Szo),e(ly,Rzo),e(Oo,Bzo),e(Oo,ht),M(iy,ht,null),e(ht,Pzo),e(ht,Wge),e(Wge,Izo),e(ht,qzo),e(ht,nd),e(nd,Nzo),e(nd,Hge),e(Hge,jzo),e(nd,Dzo),e(nd,oV),e(oV,Gzo),e(nd,Ozo),e(ht,Vzo),M(z5,ht,null),e(Oo,Xzo),e(Oo,io),M(dy,io,null),e(io,zzo),e(io,Uge),e(Uge,Qzo),e(io,Wzo),e(io,qa),e(qa,Hzo),e(qa,Jge),e(Jge,Uzo),e(qa,Jzo),e(qa,Yge),e(Yge,Yzo),e(qa,Kzo),e(qa,Kge),e(Kge,Zzo),e(qa,eQo),e(io,oQo),e(io,Na),e(Na,Q5),e(Q5,Zge),e(Zge,rQo),e(Q5,tQo),e(Q5,rV),e(rV,aQo),e(Q5,nQo),e(Na,sQo),e(Na,W5),e(W5,ehe),e(ehe,lQo),e(W5,iQo),e(W5,tV),e(tV,dQo),e(W5,cQo),e(Na,fQo),e(Na,H5),e(H5,ohe),e(ohe,mQo),e(H5,gQo),e(H5,aV),e(aV,hQo),e(H5,pQo),e(Na,uQo),e(Na,U5),e(U5,rhe),e(rhe,_Qo),e(U5,bQo),e(U5,nV),e(nV,vQo),e(U5,FQo),e(io,TQo),e(io,J5),e(J5,MQo),e(J5,the),e(the,EQo),e(J5,CQo),e(J5,ahe),e(ahe,wQo),e(io,AQo),M(Y5,io,null),b(f,SBe,_),b(f,sd,_),e(sd,K5),e(K5,nhe),M(cy,nhe,null),e(sd,yQo),e(sd,she),e(she,LQo),b(f,RBe,_),b(f,Vo,_),M(fy,Vo,null),e(Vo,xQo),e(Vo,ld),e(ld,$Qo),e(ld,sV),e(sV,kQo),e(ld,SQo),e(ld,lV),e(lV,RQo),e(ld,BQo),e(Vo,PQo),e(Vo,my),e(my,IQo),e(my,lhe),e(lhe,qQo),e(my,NQo),e(Vo,jQo),e(Vo,pt),M(gy,pt,null),e(pt,DQo),e(pt,ihe),e(ihe,GQo),e(pt,OQo),e(pt,id),e(id,VQo),e(id,dhe),e(dhe,XQo),e(id,zQo),e(id,iV),e(iV,QQo),e(id,WQo),e(pt,HQo),M(Z5,pt,null),e(Vo,UQo),e(Vo,co),M(hy,co,null),e(co,JQo),e(co,che),e(che,YQo),e(co,KQo),e(co,ja),e(ja,ZQo),e(ja,fhe),e(fhe,eWo),e(ja,oWo),e(ja,mhe),e(mhe,rWo),e(ja,tWo),e(ja,ghe),e(ghe,aWo),e(ja,nWo),e(co,sWo),e(co,je),e(je,ev),e(ev,hhe),e(hhe,lWo),e(ev,iWo),e(ev,dV),e(dV,dWo),e(ev,cWo),e(je,fWo),e(je,ov),e(ov,phe),e(phe,mWo),e(ov,gWo),e(ov,cV),e(cV,hWo),e(ov,pWo),e(je,uWo),e(je,rv),e(rv,uhe),e(uhe,_Wo),e(rv,bWo),e(rv,fV),e(fV,vWo),e(rv,FWo),e(je,TWo),e(je,tv),e(tv,_he),e(_he,MWo),e(tv,EWo),e(tv,mV),e(mV,CWo),e(tv,wWo),e(je,AWo),e(je,av),e(av,bhe),e(bhe,yWo),e(av,LWo),e(av,gV),e(gV,xWo),e(av,$Wo),e(je,kWo),e(je,nv),e(nv,vhe),e(vhe,SWo),e(nv,RWo),e(nv,hV),e(hV,BWo),e(nv,PWo),e(je,IWo),e(je,sv),e(sv,Fhe),e(Fhe,qWo),e(sv,NWo),e(sv,pV),e(pV,jWo),e(sv,DWo),e(je,GWo),e(je,lv),e(lv,The),e(The,OWo),e(lv,VWo),e(lv,uV),e(uV,XWo),e(lv,zWo),e(co,QWo),e(co,iv),e(iv,WWo),e(iv,Mhe),e(Mhe,HWo),e(iv,UWo),e(iv,Ehe),e(Ehe,JWo),e(co,YWo),M(dv,co,null),b(f,BBe,_),b(f,dd,_),e(dd,cv),e(cv,Che),M(py,Che,null),e(dd,KWo),e(dd,whe),e(whe,ZWo),b(f,PBe,_),b(f,Xo,_),M(uy,Xo,null),e(Xo,eHo),e(Xo,cd),e(cd,oHo),e(cd,_V),e(_V,rHo),e(cd,tHo),e(cd,bV),e(bV,aHo),e(cd,nHo),e(Xo,sHo),e(Xo,_y),e(_y,lHo),e(_y,Ahe),e(Ahe,iHo),e(_y,dHo),e(Xo,cHo),e(Xo,ut),M(by,ut,null),e(ut,fHo),e(ut,yhe),e(yhe,mHo),e(ut,gHo),e(ut,fd),e(fd,hHo),e(fd,Lhe),e(Lhe,pHo),e(fd,uHo),e(fd,vV),e(vV,_Ho),e(fd,bHo),e(ut,vHo),M(fv,ut,null),e(Xo,FHo),e(Xo,fo),M(vy,fo,null),e(fo,THo),e(fo,xhe),e(xhe,MHo),e(fo,EHo),e(fo,Da),e(Da,CHo),e(Da,$he),e($he,wHo),e(Da,AHo),e(Da,khe),e(khe,yHo),e(Da,LHo),e(Da,She),e(She,xHo),e(Da,$Ho),e(fo,kHo),e(fo,Fy),e(Fy,mv),e(mv,Rhe),e(Rhe,SHo),e(mv,RHo),e(mv,FV),e(FV,BHo),e(mv,PHo),e(Fy,IHo),e(Fy,gv),e(gv,Bhe),e(Bhe,qHo),e(gv,NHo),e(gv,TV),e(TV,jHo),e(gv,DHo),e(fo,GHo),e(fo,hv),e(hv,OHo),e(hv,Phe),e(Phe,VHo),e(hv,XHo),e(hv,Ihe),e(Ihe,zHo),e(fo,QHo),M(pv,fo,null),b(f,IBe,_),b(f,md,_),e(md,uv),e(uv,qhe),M(Ty,qhe,null),e(md,WHo),e(md,Nhe),e(Nhe,HHo),b(f,qBe,_),b(f,zo,_),M(My,zo,null),e(zo,UHo),e(zo,gd),e(gd,JHo),e(gd,MV),e(MV,YHo),e(gd,KHo),e(gd,EV),e(EV,ZHo),e(gd,eUo),e(zo,oUo),e(zo,Ey),e(Ey,rUo),e(Ey,jhe),e(jhe,tUo),e(Ey,aUo),e(zo,nUo),e(zo,_t),M(Cy,_t,null),e(_t,sUo),e(_t,Dhe),e(Dhe,lUo),e(_t,iUo),e(_t,hd),e(hd,dUo),e(hd,Ghe),e(Ghe,cUo),e(hd,fUo),e(hd,CV),e(CV,mUo),e(hd,gUo),e(_t,hUo),M(_v,_t,null),e(zo,pUo),e(zo,mo),M(wy,mo,null),e(mo,uUo),e(mo,Ohe),e(Ohe,_Uo),e(mo,bUo),e(mo,Ga),e(Ga,vUo),e(Ga,Vhe),e(Vhe,FUo),e(Ga,TUo),e(Ga,Xhe),e(Xhe,MUo),e(Ga,EUo),e(Ga,zhe),e(zhe,CUo),e(Ga,wUo),e(mo,AUo),e(mo,Oa),e(Oa,bv),e(bv,Qhe),e(Qhe,yUo),e(bv,LUo),e(bv,wV),e(wV,xUo),e(bv,$Uo),e(Oa,kUo),e(Oa,vv),e(vv,Whe),e(Whe,SUo),e(vv,RUo),e(vv,AV),e(AV,BUo),e(vv,PUo),e(Oa,IUo),e(Oa,Fv),e(Fv,Hhe),e(Hhe,qUo),e(Fv,NUo),e(Fv,yV),e(yV,jUo),e(Fv,DUo),e(Oa,GUo),e(Oa,Tv),e(Tv,Uhe),e(Uhe,OUo),e(Tv,VUo),e(Tv,LV),e(LV,XUo),e(Tv,zUo),e(mo,QUo),e(mo,Mv),e(Mv,WUo),e(Mv,Jhe),e(Jhe,HUo),e(Mv,UUo),e(Mv,Yhe),e(Yhe,JUo),e(mo,YUo),M(Ev,mo,null),b(f,NBe,_),b(f,pd,_),e(pd,Cv),e(Cv,Khe),M(Ay,Khe,null),e(pd,KUo),e(pd,Zhe),e(Zhe,ZUo),b(f,jBe,_),b(f,Qo,_),M(yy,Qo,null),e(Qo,eJo),e(Qo,ud),e(ud,oJo),e(ud,xV),e(xV,rJo),e(ud,tJo),e(ud,$V),e($V,aJo),e(ud,nJo),e(Qo,sJo),e(Qo,Ly),e(Ly,lJo),e(Ly,epe),e(epe,iJo),e(Ly,dJo),e(Qo,cJo),e(Qo,bt),M(xy,bt,null),e(bt,fJo),e(bt,ope),e(ope,mJo),e(bt,gJo),e(bt,_d),e(_d,hJo),e(_d,rpe),e(rpe,pJo),e(_d,uJo),e(_d,kV),e(kV,_Jo),e(_d,bJo),e(bt,vJo),M(wv,bt,null),e(Qo,FJo),e(Qo,go),M($y,go,null),e(go,TJo),e(go,tpe),e(tpe,MJo),e(go,EJo),e(go,Va),e(Va,CJo),e(Va,ape),e(ape,wJo),e(Va,AJo),e(Va,npe),e(npe,yJo),e(Va,LJo),e(Va,spe),e(spe,xJo),e(Va,$Jo),e(go,kJo),e(go,bd),e(bd,Av),e(Av,lpe),e(lpe,SJo),e(Av,RJo),e(Av,SV),e(SV,BJo),e(Av,PJo),e(bd,IJo),e(bd,yv),e(yv,ipe),e(ipe,qJo),e(yv,NJo),e(yv,RV),e(RV,jJo),e(yv,DJo),e(bd,GJo),e(bd,Lv),e(Lv,dpe),e(dpe,OJo),e(Lv,VJo),e(Lv,BV),e(BV,XJo),e(Lv,zJo),e(go,QJo),e(go,xv),e(xv,WJo),e(xv,cpe),e(cpe,HJo),e(xv,UJo),e(xv,fpe),e(fpe,JJo),e(go,YJo),M($v,go,null),b(f,DBe,_),b(f,vd,_),e(vd,kv),e(kv,mpe),M(ky,mpe,null),e(vd,KJo),e(vd,gpe),e(gpe,ZJo),b(f,GBe,_),b(f,Wo,_),M(Sy,Wo,null),e(Wo,eYo),e(Wo,Fd),e(Fd,oYo),e(Fd,PV),e(PV,rYo),e(Fd,tYo),e(Fd,IV),e(IV,aYo),e(Fd,nYo),e(Wo,sYo),e(Wo,Ry),e(Ry,lYo),e(Ry,hpe),e(hpe,iYo),e(Ry,dYo),e(Wo,cYo),e(Wo,vt),M(By,vt,null),e(vt,fYo),e(vt,ppe),e(ppe,mYo),e(vt,gYo),e(vt,Td),e(Td,hYo),e(Td,upe),e(upe,pYo),e(Td,uYo),e(Td,qV),e(qV,_Yo),e(Td,bYo),e(vt,vYo),M(Sv,vt,null),e(Wo,FYo),e(Wo,ho),M(Py,ho,null),e(ho,TYo),e(ho,_pe),e(_pe,MYo),e(ho,EYo),e(ho,Xa),e(Xa,CYo),e(Xa,bpe),e(bpe,wYo),e(Xa,AYo),e(Xa,vpe),e(vpe,yYo),e(Xa,LYo),e(Xa,Fpe),e(Fpe,xYo),e(Xa,$Yo),e(ho,kYo),e(ho,Tpe),e(Tpe,Rv),e(Rv,Mpe),e(Mpe,SYo),e(Rv,RYo),e(Rv,NV),e(NV,BYo),e(Rv,PYo),e(ho,IYo),e(ho,Bv),e(Bv,qYo),e(Bv,Epe),e(Epe,NYo),e(Bv,jYo),e(Bv,Cpe),e(Cpe,DYo),e(ho,GYo),M(Pv,ho,null),b(f,OBe,_),b(f,Md,_),e(Md,Iv),e(Iv,wpe),M(Iy,wpe,null),e(Md,OYo),e(Md,Ape),e(Ape,VYo),b(f,VBe,_),b(f,Ho,_),M(qy,Ho,null),e(Ho,XYo),e(Ho,Ed),e(Ed,zYo),e(Ed,jV),e(jV,QYo),e(Ed,WYo),e(Ed,DV),e(DV,HYo),e(Ed,UYo),e(Ho,JYo),e(Ho,Ny),e(Ny,YYo),e(Ny,ype),e(ype,KYo),e(Ny,ZYo),e(Ho,eKo),e(Ho,Ft),M(jy,Ft,null),e(Ft,oKo),e(Ft,Lpe),e(Lpe,rKo),e(Ft,tKo),e(Ft,Cd),e(Cd,aKo),e(Cd,xpe),e(xpe,nKo),e(Cd,sKo),e(Cd,GV),e(GV,lKo),e(Cd,iKo),e(Ft,dKo),M(qv,Ft,null),e(Ho,cKo),e(Ho,po),M(Dy,po,null),e(po,fKo),e(po,$pe),e($pe,mKo),e(po,gKo),e(po,za),e(za,hKo),e(za,kpe),e(kpe,pKo),e(za,uKo),e(za,Spe),e(Spe,_Ko),e(za,bKo),e(za,Rpe),e(Rpe,vKo),e(za,FKo),e(po,TKo),e(po,Bpe),e(Bpe,Nv),e(Nv,Ppe),e(Ppe,MKo),e(Nv,EKo),e(Nv,OV),e(OV,CKo),e(Nv,wKo),e(po,AKo),e(po,jv),e(jv,yKo),e(jv,Ipe),e(Ipe,LKo),e(jv,xKo),e(jv,qpe),e(qpe,$Ko),e(po,kKo),M(Dv,po,null),b(f,XBe,_),b(f,wd,_),e(wd,Gv),e(Gv,Npe),M(Gy,Npe,null),e(wd,SKo),e(wd,jpe),e(jpe,RKo),b(f,zBe,_),b(f,Uo,_),M(Oy,Uo,null),e(Uo,BKo),e(Uo,Ad),e(Ad,PKo),e(Ad,VV),e(VV,IKo),e(Ad,qKo),e(Ad,XV),e(XV,NKo),e(Ad,jKo),e(Uo,DKo),e(Uo,Vy),e(Vy,GKo),e(Vy,Dpe),e(Dpe,OKo),e(Vy,VKo),e(Uo,XKo),e(Uo,Tt),M(Xy,Tt,null),e(Tt,zKo),e(Tt,Gpe),e(Gpe,QKo),e(Tt,WKo),e(Tt,yd),e(yd,HKo),e(yd,Ope),e(Ope,UKo),e(yd,JKo),e(yd,zV),e(zV,YKo),e(yd,KKo),e(Tt,ZKo),M(Ov,Tt,null),e(Uo,eZo),e(Uo,uo),M(zy,uo,null),e(uo,oZo),e(uo,Vpe),e(Vpe,rZo),e(uo,tZo),e(uo,Qa),e(Qa,aZo),e(Qa,Xpe),e(Xpe,nZo),e(Qa,sZo),e(Qa,zpe),e(zpe,lZo),e(Qa,iZo),e(Qa,Qpe),e(Qpe,dZo),e(Qa,cZo),e(uo,fZo),e(uo,Wa),e(Wa,Vv),e(Vv,Wpe),e(Wpe,mZo),e(Vv,gZo),e(Vv,QV),e(QV,hZo),e(Vv,pZo),e(Wa,uZo),e(Wa,Xv),e(Xv,Hpe),e(Hpe,_Zo),e(Xv,bZo),e(Xv,WV),e(WV,vZo),e(Xv,FZo),e(Wa,TZo),e(Wa,zv),e(zv,Upe),e(Upe,MZo),e(zv,EZo),e(zv,HV),e(HV,CZo),e(zv,wZo),e(Wa,AZo),e(Wa,Qv),e(Qv,Jpe),e(Jpe,yZo),e(Qv,LZo),e(Qv,UV),e(UV,xZo),e(Qv,$Zo),e(uo,kZo),e(uo,Wv),e(Wv,SZo),e(Wv,Ype),e(Ype,RZo),e(Wv,BZo),e(Wv,Kpe),e(Kpe,PZo),e(uo,IZo),M(Hv,uo,null),b(f,QBe,_),b(f,Ld,_),e(Ld,Uv),e(Uv,Zpe),M(Qy,Zpe,null),e(Ld,qZo),e(Ld,eue),e(eue,NZo),b(f,WBe,_),b(f,Jo,_),M(Wy,Jo,null),e(Jo,jZo),e(Jo,xd),e(xd,DZo),e(xd,JV),e(JV,GZo),e(xd,OZo),e(xd,YV),e(YV,VZo),e(xd,XZo),e(Jo,zZo),e(Jo,Hy),e(Hy,QZo),e(Hy,oue),e(oue,WZo),e(Hy,HZo),e(Jo,UZo),e(Jo,Mt),M(Uy,Mt,null),e(Mt,JZo),e(Mt,rue),e(rue,YZo),e(Mt,KZo),e(Mt,$d),e($d,ZZo),e($d,tue),e(tue,eer),e($d,oer),e($d,KV),e(KV,rer),e($d,ter),e(Mt,aer),M(Jv,Mt,null),e(Jo,ner),e(Jo,_o),M(Jy,_o,null),e(_o,ser),e(_o,aue),e(aue,ler),e(_o,ier),e(_o,Ha),e(Ha,der),e(Ha,nue),e(nue,cer),e(Ha,fer),e(Ha,sue),e(sue,mer),e(Ha,ger),e(Ha,lue),e(lue,her),e(Ha,per),e(_o,uer),e(_o,iue),e(iue,Yv),e(Yv,due),e(due,_er),e(Yv,ber),e(Yv,ZV),e(ZV,ver),e(Yv,Fer),e(_o,Ter),e(_o,Kv),e(Kv,Mer),e(Kv,cue),e(cue,Eer),e(Kv,Cer),e(Kv,fue),e(fue,wer),e(_o,Aer),M(Zv,_o,null),b(f,HBe,_),b(f,kd,_),e(kd,eF),e(eF,mue),M(Yy,mue,null),e(kd,yer),e(kd,gue),e(gue,Ler),b(f,UBe,_),b(f,Yo,_),M(Ky,Yo,null),e(Yo,xer),e(Yo,Sd),e(Sd,$er),e(Sd,eX),e(eX,ker),e(Sd,Ser),e(Sd,oX),e(oX,Rer),e(Sd,Ber),e(Yo,Per),e(Yo,Zy),e(Zy,Ier),e(Zy,hue),e(hue,qer),e(Zy,Ner),e(Yo,jer),e(Yo,Et),M(eL,Et,null),e(Et,Der),e(Et,pue),e(pue,Ger),e(Et,Oer),e(Et,Rd),e(Rd,Ver),e(Rd,uue),e(uue,Xer),e(Rd,zer),e(Rd,rX),e(rX,Qer),e(Rd,Wer),e(Et,Her),M(oF,Et,null),e(Yo,Uer),e(Yo,Cr),M(oL,Cr,null),e(Cr,Jer),e(Cr,_ue),e(_ue,Yer),e(Cr,Ker),e(Cr,Ua),e(Ua,Zer),e(Ua,bue),e(bue,eor),e(Ua,oor),e(Ua,vue),e(vue,ror),e(Ua,tor),e(Ua,Fue),e(Fue,aor),e(Ua,nor),e(Cr,sor),e(Cr,j),e(j,rF),e(rF,Tue),e(Tue,lor),e(rF,ior),e(rF,tX),e(tX,dor),e(rF,cor),e(j,mor),e(j,tF),e(tF,Mue),e(Mue,gor),e(tF,hor),e(tF,aX),e(aX,por),e(tF,uor),e(j,_or),e(j,aF),e(aF,Eue),e(Eue,bor),e(aF,vor),e(aF,nX),e(nX,For),e(aF,Tor),e(j,Mor),e(j,nF),e(nF,Cue),e(Cue,Eor),e(nF,Cor),e(nF,sX),e(sX,wor),e(nF,Aor),e(j,yor),e(j,sF),e(sF,wue),e(wue,Lor),e(sF,xor),e(sF,lX),e(lX,$or),e(sF,kor),e(j,Sor),e(j,lF),e(lF,Aue),e(Aue,Ror),e(lF,Bor),e(lF,iX),e(iX,Por),e(lF,Ior),e(j,qor),e(j,iF),e(iF,yue),e(yue,Nor),e(iF,jor),e(iF,dX),e(dX,Dor),e(iF,Gor),e(j,Oor),e(j,dF),e(dF,Lue),e(Lue,Vor),e(dF,Xor),e(dF,cX),e(cX,zor),e(dF,Qor),e(j,Wor),e(j,cF),e(cF,xue),e(xue,Hor),e(cF,Uor),e(cF,fX),e(fX,Jor),e(cF,Yor),e(j,Kor),e(j,fF),e(fF,$ue),e($ue,Zor),e(fF,err),e(fF,mX),e(mX,orr),e(fF,rrr),e(j,trr),e(j,mF),e(mF,kue),e(kue,arr),e(mF,nrr),e(mF,gX),e(gX,srr),e(mF,lrr),e(j,irr),e(j,gF),e(gF,Sue),e(Sue,drr),e(gF,crr),e(gF,hX),e(hX,frr),e(gF,mrr),e(j,grr),e(j,hF),e(hF,Rue),e(Rue,hrr),e(hF,prr),e(hF,pX),e(pX,urr),e(hF,_rr),e(j,brr),e(j,pF),e(pF,Bue),e(Bue,vrr),e(pF,Frr),e(pF,uX),e(uX,Trr),e(pF,Mrr),e(j,Err),e(j,uF),e(uF,Pue),e(Pue,Crr),e(uF,wrr),e(uF,_X),e(_X,Arr),e(uF,yrr),e(j,Lrr),e(j,_F),e(_F,Iue),e(Iue,xrr),e(_F,$rr),e(_F,bX),e(bX,krr),e(_F,Srr),e(j,Rrr),e(j,$s),e($s,que),e(que,Brr),e($s,Prr),e($s,vX),e(vX,Irr),e($s,qrr),e($s,FX),e(FX,Nrr),e($s,jrr),e(j,Drr),e(j,bF),e(bF,Nue),e(Nue,Grr),e(bF,Orr),e(bF,TX),e(TX,Vrr),e(bF,Xrr),e(j,zrr),e(j,vF),e(vF,jue),e(jue,Qrr),e(vF,Wrr),e(vF,MX),e(MX,Hrr),e(vF,Urr),e(j,Jrr),e(j,FF),e(FF,Due),e(Due,Yrr),e(FF,Krr),e(FF,EX),e(EX,Zrr),e(FF,etr),e(j,otr),e(j,TF),e(TF,Gue),e(Gue,rtr),e(TF,ttr),e(TF,CX),e(CX,atr),e(TF,ntr),e(j,str),e(j,MF),e(MF,Oue),e(Oue,ltr),e(MF,itr),e(MF,wX),e(wX,dtr),e(MF,ctr),e(j,ftr),e(j,EF),e(EF,Vue),e(Vue,mtr),e(EF,gtr),e(EF,AX),e(AX,htr),e(EF,ptr),e(j,utr),e(j,CF),e(CF,Xue),e(Xue,_tr),e(CF,btr),e(CF,yX),e(yX,vtr),e(CF,Ftr),e(j,Ttr),e(j,wF),e(wF,zue),e(zue,Mtr),e(wF,Etr),e(wF,LX),e(LX,Ctr),e(wF,wtr),e(j,Atr),e(j,AF),e(AF,Que),e(Que,ytr),e(AF,Ltr),e(AF,xX),e(xX,xtr),e(AF,$tr),e(j,ktr),e(j,yF),e(yF,Wue),e(Wue,Str),e(yF,Rtr),e(yF,$X),e($X,Btr),e(yF,Ptr),e(j,Itr),e(j,LF),e(LF,Hue),e(Hue,qtr),e(LF,Ntr),e(LF,kX),e(kX,jtr),e(LF,Dtr),e(j,Gtr),e(j,xF),e(xF,Uue),e(Uue,Otr),e(xF,Vtr),e(xF,SX),e(SX,Xtr),e(xF,ztr),e(j,Qtr),e(j,$F),e($F,Jue),e(Jue,Wtr),e($F,Htr),e($F,RX),e(RX,Utr),e($F,Jtr),e(j,Ytr),e(j,kF),e(kF,Yue),e(Yue,Ktr),e(kF,Ztr),e(kF,BX),e(BX,ear),e(kF,oar),e(j,rar),e(j,SF),e(SF,Kue),e(Kue,tar),e(SF,aar),e(SF,PX),e(PX,nar),e(SF,sar),e(j,lar),e(j,RF),e(RF,Zue),e(Zue,iar),e(RF,dar),e(RF,IX),e(IX,car),e(RF,far),e(j,mar),e(j,BF),e(BF,e_e),e(e_e,gar),e(BF,har),e(BF,qX),e(qX,par),e(BF,uar),e(j,_ar),e(j,PF),e(PF,o_e),e(o_e,bar),e(PF,Far),e(PF,NX),e(NX,Tar),e(PF,Mar),e(j,Ear),e(j,IF),e(IF,r_e),e(r_e,Car),e(IF,war),e(IF,jX),e(jX,Aar),e(IF,yar),e(j,Lar),e(j,qF),e(qF,t_e),e(t_e,xar),e(qF,$ar),e(qF,DX),e(DX,kar),e(qF,Sar),e(j,Rar),e(j,NF),e(NF,a_e),e(a_e,Bar),e(NF,Par),e(NF,GX),e(GX,Iar),e(NF,qar),e(j,Nar),e(j,jF),e(jF,n_e),e(n_e,jar),e(jF,Dar),e(jF,OX),e(OX,Gar),e(jF,Oar),e(j,Var),e(j,DF),e(DF,s_e),e(s_e,Xar),e(DF,zar),e(DF,VX),e(VX,Qar),e(DF,War),e(j,Har),e(j,GF),e(GF,l_e),e(l_e,Uar),e(GF,Jar),e(GF,XX),e(XX,Yar),e(GF,Kar),e(j,Zar),e(j,OF),e(OF,i_e),e(i_e,enr),e(OF,onr),e(OF,zX),e(zX,rnr),e(OF,tnr),e(j,anr),e(j,VF),e(VF,d_e),e(d_e,nnr),e(VF,snr),e(VF,QX),e(QX,lnr),e(VF,inr),e(j,dnr),e(j,XF),e(XF,c_e),e(c_e,cnr),e(XF,fnr),e(XF,WX),e(WX,mnr),e(XF,gnr),e(Cr,hnr),M(zF,Cr,null),b(f,JBe,_),b(f,Bd,_),e(Bd,QF),e(QF,f_e),M(rL,f_e,null),e(Bd,pnr),e(Bd,m_e),e(m_e,unr),b(f,YBe,_),b(f,Ko,_),M(tL,Ko,null),e(Ko,_nr),e(Ko,Pd),e(Pd,bnr),e(Pd,HX),e(HX,vnr),e(Pd,Fnr),e(Pd,UX),e(UX,Tnr),e(Pd,Mnr),e(Ko,Enr),e(Ko,aL),e(aL,Cnr),e(aL,g_e),e(g_e,wnr),e(aL,Anr),e(Ko,ynr),e(Ko,Ct),M(nL,Ct,null),e(Ct,Lnr),e(Ct,h_e),e(h_e,xnr),e(Ct,$nr),e(Ct,Id),e(Id,knr),e(Id,p_e),e(p_e,Snr),e(Id,Rnr),e(Id,JX),e(JX,Bnr),e(Id,Pnr),e(Ct,Inr),M(WF,Ct,null),e(Ko,qnr),e(Ko,wr),M(sL,wr,null),e(wr,Nnr),e(wr,u_e),e(u_e,jnr),e(wr,Dnr),e(wr,Ja),e(Ja,Gnr),e(Ja,__e),e(__e,Onr),e(Ja,Vnr),e(Ja,b_e),e(b_e,Xnr),e(Ja,znr),e(Ja,v_e),e(v_e,Qnr),e(Ja,Wnr),e(wr,Hnr),e(wr,ne),e(ne,HF),e(HF,F_e),e(F_e,Unr),e(HF,Jnr),e(HF,YX),e(YX,Ynr),e(HF,Knr),e(ne,Znr),e(ne,UF),e(UF,T_e),e(T_e,esr),e(UF,osr),e(UF,KX),e(KX,rsr),e(UF,tsr),e(ne,asr),e(ne,JF),e(JF,M_e),e(M_e,nsr),e(JF,ssr),e(JF,ZX),e(ZX,lsr),e(JF,isr),e(ne,dsr),e(ne,YF),e(YF,E_e),e(E_e,csr),e(YF,fsr),e(YF,ez),e(ez,msr),e(YF,gsr),e(ne,hsr),e(ne,KF),e(KF,C_e),e(C_e,psr),e(KF,usr),e(KF,oz),e(oz,_sr),e(KF,bsr),e(ne,vsr),e(ne,ZF),e(ZF,w_e),e(w_e,Fsr),e(ZF,Tsr),e(ZF,rz),e(rz,Msr),e(ZF,Esr),e(ne,Csr),e(ne,e6),e(e6,A_e),e(A_e,wsr),e(e6,Asr),e(e6,tz),e(tz,ysr),e(e6,Lsr),e(ne,xsr),e(ne,o6),e(o6,y_e),e(y_e,$sr),e(o6,ksr),e(o6,az),e(az,Ssr),e(o6,Rsr),e(ne,Bsr),e(ne,r6),e(r6,L_e),e(L_e,Psr),e(r6,Isr),e(r6,nz),e(nz,qsr),e(r6,Nsr),e(ne,jsr),e(ne,t6),e(t6,x_e),e(x_e,Dsr),e(t6,Gsr),e(t6,sz),e(sz,Osr),e(t6,Vsr),e(ne,Xsr),e(ne,a6),e(a6,$_e),e($_e,zsr),e(a6,Qsr),e(a6,lz),e(lz,Wsr),e(a6,Hsr),e(ne,Usr),e(ne,n6),e(n6,k_e),e(k_e,Jsr),e(n6,Ysr),e(n6,iz),e(iz,Ksr),e(n6,Zsr),e(ne,elr),e(ne,s6),e(s6,S_e),e(S_e,olr),e(s6,rlr),e(s6,dz),e(dz,tlr),e(s6,alr),e(ne,nlr),e(ne,l6),e(l6,R_e),e(R_e,slr),e(l6,llr),e(l6,cz),e(cz,ilr),e(l6,dlr),e(ne,clr),e(ne,i6),e(i6,B_e),e(B_e,flr),e(i6,mlr),e(i6,fz),e(fz,glr),e(i6,hlr),e(ne,plr),e(ne,d6),e(d6,P_e),e(P_e,ulr),e(d6,_lr),e(d6,mz),e(mz,blr),e(d6,vlr),e(ne,Flr),e(ne,c6),e(c6,I_e),e(I_e,Tlr),e(c6,Mlr),e(c6,gz),e(gz,Elr),e(c6,Clr),e(ne,wlr),e(ne,f6),e(f6,q_e),e(q_e,Alr),e(f6,ylr),e(f6,hz),e(hz,Llr),e(f6,xlr),e(ne,$lr),e(ne,m6),e(m6,N_e),e(N_e,klr),e(m6,Slr),e(m6,pz),e(pz,Rlr),e(m6,Blr),e(ne,Plr),e(ne,g6),e(g6,j_e),e(j_e,Ilr),e(g6,qlr),e(g6,uz),e(uz,Nlr),e(g6,jlr),e(ne,Dlr),e(ne,h6),e(h6,D_e),e(D_e,Glr),e(h6,Olr),e(h6,_z),e(_z,Vlr),e(h6,Xlr),e(ne,zlr),e(ne,p6),e(p6,G_e),e(G_e,Qlr),e(p6,Wlr),e(p6,bz),e(bz,Hlr),e(p6,Ulr),e(ne,Jlr),e(ne,u6),e(u6,O_e),e(O_e,Ylr),e(u6,Klr),e(u6,vz),e(vz,Zlr),e(u6,eir),e(wr,oir),M(_6,wr,null),b(f,KBe,_),b(f,qd,_),e(qd,b6),e(b6,V_e),M(lL,V_e,null),e(qd,rir),e(qd,X_e),e(X_e,tir),b(f,ZBe,_),b(f,Zo,_),M(iL,Zo,null),e(Zo,air),e(Zo,Nd),e(Nd,nir),e(Nd,Fz),e(Fz,sir),e(Nd,lir),e(Nd,Tz),e(Tz,iir),e(Nd,dir),e(Zo,cir),e(Zo,dL),e(dL,fir),e(dL,z_e),e(z_e,mir),e(dL,gir),e(Zo,hir),e(Zo,wt),M(cL,wt,null),e(wt,pir),e(wt,Q_e),e(Q_e,uir),e(wt,_ir),e(wt,jd),e(jd,bir),e(jd,W_e),e(W_e,vir),e(jd,Fir),e(jd,Mz),e(Mz,Tir),e(jd,Mir),e(wt,Eir),M(v6,wt,null),e(Zo,Cir),e(Zo,Ar),M(fL,Ar,null),e(Ar,wir),e(Ar,H_e),e(H_e,Air),e(Ar,yir),e(Ar,Ya),e(Ya,Lir),e(Ya,U_e),e(U_e,xir),e(Ya,$ir),e(Ya,J_e),e(J_e,kir),e(Ya,Sir),e(Ya,Y_e),e(Y_e,Rir),e(Ya,Bir),e(Ar,Pir),e(Ar,Te),e(Te,F6),e(F6,K_e),e(K_e,Iir),e(F6,qir),e(F6,Ez),e(Ez,Nir),e(F6,jir),e(Te,Dir),e(Te,T6),e(T6,Z_e),e(Z_e,Gir),e(T6,Oir),e(T6,Cz),e(Cz,Vir),e(T6,Xir),e(Te,zir),e(Te,M6),e(M6,e1e),e(e1e,Qir),e(M6,Wir),e(M6,wz),e(wz,Hir),e(M6,Uir),e(Te,Jir),e(Te,E6),e(E6,o1e),e(o1e,Yir),e(E6,Kir),e(E6,Az),e(Az,Zir),e(E6,edr),e(Te,odr),e(Te,C6),e(C6,r1e),e(r1e,rdr),e(C6,tdr),e(C6,yz),e(yz,adr),e(C6,ndr),e(Te,sdr),e(Te,w6),e(w6,t1e),e(t1e,ldr),e(w6,idr),e(w6,Lz),e(Lz,ddr),e(w6,cdr),e(Te,fdr),e(Te,A6),e(A6,a1e),e(a1e,mdr),e(A6,gdr),e(A6,xz),e(xz,hdr),e(A6,pdr),e(Te,udr),e(Te,y6),e(y6,n1e),e(n1e,_dr),e(y6,bdr),e(y6,$z),e($z,vdr),e(y6,Fdr),e(Te,Tdr),e(Te,L6),e(L6,s1e),e(s1e,Mdr),e(L6,Edr),e(L6,kz),e(kz,Cdr),e(L6,wdr),e(Te,Adr),e(Te,x6),e(x6,l1e),e(l1e,ydr),e(x6,Ldr),e(x6,Sz),e(Sz,xdr),e(x6,$dr),e(Te,kdr),e(Te,$6),e($6,i1e),e(i1e,Sdr),e($6,Rdr),e($6,Rz),e(Rz,Bdr),e($6,Pdr),e(Te,Idr),e(Te,k6),e(k6,d1e),e(d1e,qdr),e(k6,Ndr),e(k6,Bz),e(Bz,jdr),e(k6,Ddr),e(Ar,Gdr),M(S6,Ar,null),b(f,ePe,_),b(f,Dd,_),e(Dd,R6),e(R6,c1e),M(mL,c1e,null),e(Dd,Odr),e(Dd,f1e),e(f1e,Vdr),b(f,oPe,_),b(f,er,_),M(gL,er,null),e(er,Xdr),e(er,Gd),e(Gd,zdr),e(Gd,Pz),e(Pz,Qdr),e(Gd,Wdr),e(Gd,Iz),e(Iz,Hdr),e(Gd,Udr),e(er,Jdr),e(er,hL),e(hL,Ydr),e(hL,m1e),e(m1e,Kdr),e(hL,Zdr),e(er,ecr),e(er,At),M(pL,At,null),e(At,ocr),e(At,g1e),e(g1e,rcr),e(At,tcr),e(At,Od),e(Od,acr),e(Od,h1e),e(h1e,ncr),e(Od,scr),e(Od,qz),e(qz,lcr),e(Od,icr),e(At,dcr),M(B6,At,null),e(er,ccr),e(er,yr),M(uL,yr,null),e(yr,fcr),e(yr,p1e),e(p1e,mcr),e(yr,gcr),e(yr,Ka),e(Ka,hcr),e(Ka,u1e),e(u1e,pcr),e(Ka,ucr),e(Ka,_1e),e(_1e,_cr),e(Ka,bcr),e(Ka,b1e),e(b1e,vcr),e(Ka,Fcr),e(yr,Tcr),e(yr,_L),e(_L,P6),e(P6,v1e),e(v1e,Mcr),e(P6,Ecr),e(P6,Nz),e(Nz,Ccr),e(P6,wcr),e(_L,Acr),e(_L,I6),e(I6,F1e),e(F1e,ycr),e(I6,Lcr),e(I6,jz),e(jz,xcr),e(I6,$cr),e(yr,kcr),M(q6,yr,null),b(f,rPe,_),b(f,Vd,_),e(Vd,N6),e(N6,T1e),M(bL,T1e,null),e(Vd,Scr),e(Vd,M1e),e(M1e,Rcr),b(f,tPe,_),b(f,or,_),M(vL,or,null),e(or,Bcr),e(or,Xd),e(Xd,Pcr),e(Xd,Dz),e(Dz,Icr),e(Xd,qcr),e(Xd,Gz),e(Gz,Ncr),e(Xd,jcr),e(or,Dcr),e(or,FL),e(FL,Gcr),e(FL,E1e),e(E1e,Ocr),e(FL,Vcr),e(or,Xcr),e(or,yt),M(TL,yt,null),e(yt,zcr),e(yt,C1e),e(C1e,Qcr),e(yt,Wcr),e(yt,zd),e(zd,Hcr),e(zd,w1e),e(w1e,Ucr),e(zd,Jcr),e(zd,Oz),e(Oz,Ycr),e(zd,Kcr),e(yt,Zcr),M(j6,yt,null),e(or,efr),e(or,Lr),M(ML,Lr,null),e(Lr,ofr),e(Lr,A1e),e(A1e,rfr),e(Lr,tfr),e(Lr,Za),e(Za,afr),e(Za,y1e),e(y1e,nfr),e(Za,sfr),e(Za,L1e),e(L1e,lfr),e(Za,ifr),e(Za,x1e),e(x1e,dfr),e(Za,cfr),e(Lr,ffr),e(Lr,ie),e(ie,D6),e(D6,$1e),e($1e,mfr),e(D6,gfr),e(D6,Vz),e(Vz,hfr),e(D6,pfr),e(ie,ufr),e(ie,G6),e(G6,k1e),e(k1e,_fr),e(G6,bfr),e(G6,Xz),e(Xz,vfr),e(G6,Ffr),e(ie,Tfr),e(ie,O6),e(O6,S1e),e(S1e,Mfr),e(O6,Efr),e(O6,zz),e(zz,Cfr),e(O6,wfr),e(ie,Afr),e(ie,V6),e(V6,R1e),e(R1e,yfr),e(V6,Lfr),e(V6,Qz),e(Qz,xfr),e(V6,$fr),e(ie,kfr),e(ie,X6),e(X6,B1e),e(B1e,Sfr),e(X6,Rfr),e(X6,Wz),e(Wz,Bfr),e(X6,Pfr),e(ie,Ifr),e(ie,z6),e(z6,P1e),e(P1e,qfr),e(z6,Nfr),e(z6,Hz),e(Hz,jfr),e(z6,Dfr),e(ie,Gfr),e(ie,Q6),e(Q6,I1e),e(I1e,Ofr),e(Q6,Vfr),e(Q6,Uz),e(Uz,Xfr),e(Q6,zfr),e(ie,Qfr),e(ie,W6),e(W6,q1e),e(q1e,Wfr),e(W6,Hfr),e(W6,Jz),e(Jz,Ufr),e(W6,Jfr),e(ie,Yfr),e(ie,H6),e(H6,N1e),e(N1e,Kfr),e(H6,Zfr),e(H6,Yz),e(Yz,emr),e(H6,omr),e(ie,rmr),e(ie,U6),e(U6,j1e),e(j1e,tmr),e(U6,amr),e(U6,Kz),e(Kz,nmr),e(U6,smr),e(ie,lmr),e(ie,J6),e(J6,D1e),e(D1e,imr),e(J6,dmr),e(J6,Zz),e(Zz,cmr),e(J6,fmr),e(ie,mmr),e(ie,Y6),e(Y6,G1e),e(G1e,gmr),e(Y6,hmr),e(Y6,eQ),e(eQ,pmr),e(Y6,umr),e(ie,_mr),e(ie,K6),e(K6,O1e),e(O1e,bmr),e(K6,vmr),e(K6,oQ),e(oQ,Fmr),e(K6,Tmr),e(ie,Mmr),e(ie,Z6),e(Z6,V1e),e(V1e,Emr),e(Z6,Cmr),e(Z6,rQ),e(rQ,wmr),e(Z6,Amr),e(ie,ymr),e(ie,eT),e(eT,X1e),e(X1e,Lmr),e(eT,xmr),e(eT,tQ),e(tQ,$mr),e(eT,kmr),e(ie,Smr),e(ie,oT),e(oT,z1e),e(z1e,Rmr),e(oT,Bmr),e(oT,aQ),e(aQ,Pmr),e(oT,Imr),e(ie,qmr),e(ie,rT),e(rT,Q1e),e(Q1e,Nmr),e(rT,jmr),e(rT,nQ),e(nQ,Dmr),e(rT,Gmr),e(ie,Omr),e(ie,tT),e(tT,W1e),e(W1e,Vmr),e(tT,Xmr),e(tT,sQ),e(sQ,zmr),e(tT,Qmr),e(ie,Wmr),e(ie,aT),e(aT,H1e),e(H1e,Hmr),e(aT,Umr),e(aT,lQ),e(lQ,Jmr),e(aT,Ymr),e(ie,Kmr),e(ie,nT),e(nT,U1e),e(U1e,Zmr),e(nT,egr),e(nT,iQ),e(iQ,ogr),e(nT,rgr),e(Lr,tgr),M(sT,Lr,null),b(f,aPe,_),b(f,Qd,_),e(Qd,lT),e(lT,J1e),M(EL,J1e,null),e(Qd,agr),e(Qd,Y1e),e(Y1e,ngr),b(f,nPe,_),b(f,rr,_),M(CL,rr,null),e(rr,sgr),e(rr,Wd),e(Wd,lgr),e(Wd,dQ),e(dQ,igr),e(Wd,dgr),e(Wd,cQ),e(cQ,cgr),e(Wd,fgr),e(rr,mgr),e(rr,wL),e(wL,ggr),e(wL,K1e),e(K1e,hgr),e(wL,pgr),e(rr,ugr),e(rr,Lt),M(AL,Lt,null),e(Lt,_gr),e(Lt,Z1e),e(Z1e,bgr),e(Lt,vgr),e(Lt,Hd),e(Hd,Fgr),e(Hd,e9e),e(e9e,Tgr),e(Hd,Mgr),e(Hd,fQ),e(fQ,Egr),e(Hd,Cgr),e(Lt,wgr),M(iT,Lt,null),e(rr,Agr),e(rr,xr),M(yL,xr,null),e(xr,ygr),e(xr,o9e),e(o9e,Lgr),e(xr,xgr),e(xr,en),e(en,$gr),e(en,r9e),e(r9e,kgr),e(en,Sgr),e(en,t9e),e(t9e,Rgr),e(en,Bgr),e(en,a9e),e(a9e,Pgr),e(en,Igr),e(xr,qgr),e(xr,ye),e(ye,dT),e(dT,n9e),e(n9e,Ngr),e(dT,jgr),e(dT,mQ),e(mQ,Dgr),e(dT,Ggr),e(ye,Ogr),e(ye,cT),e(cT,s9e),e(s9e,Vgr),e(cT,Xgr),e(cT,gQ),e(gQ,zgr),e(cT,Qgr),e(ye,Wgr),e(ye,fT),e(fT,l9e),e(l9e,Hgr),e(fT,Ugr),e(fT,hQ),e(hQ,Jgr),e(fT,Ygr),e(ye,Kgr),e(ye,mT),e(mT,i9e),e(i9e,Zgr),e(mT,ehr),e(mT,pQ),e(pQ,ohr),e(mT,rhr),e(ye,thr),e(ye,gT),e(gT,d9e),e(d9e,ahr),e(gT,nhr),e(gT,uQ),e(uQ,shr),e(gT,lhr),e(ye,ihr),e(ye,hT),e(hT,c9e),e(c9e,dhr),e(hT,chr),e(hT,_Q),e(_Q,fhr),e(hT,mhr),e(ye,ghr),e(ye,pT),e(pT,f9e),e(f9e,hhr),e(pT,phr),e(pT,bQ),e(bQ,uhr),e(pT,_hr),e(ye,bhr),e(ye,uT),e(uT,m9e),e(m9e,vhr),e(uT,Fhr),e(uT,vQ),e(vQ,Thr),e(uT,Mhr),e(ye,Ehr),e(ye,_T),e(_T,g9e),e(g9e,Chr),e(_T,whr),e(_T,FQ),e(FQ,Ahr),e(_T,yhr),e(ye,Lhr),e(ye,bT),e(bT,h9e),e(h9e,xhr),e(bT,$hr),e(bT,TQ),e(TQ,khr),e(bT,Shr),e(xr,Rhr),M(vT,xr,null),b(f,sPe,_),b(f,Ud,_),e(Ud,FT),e(FT,p9e),M(LL,p9e,null),e(Ud,Bhr),e(Ud,u9e),e(u9e,Phr),b(f,lPe,_),b(f,tr,_),M(xL,tr,null),e(tr,Ihr),e(tr,Jd),e(Jd,qhr),e(Jd,MQ),e(MQ,Nhr),e(Jd,jhr),e(Jd,EQ),e(EQ,Dhr),e(Jd,Ghr),e(tr,Ohr),e(tr,$L),e($L,Vhr),e($L,_9e),e(_9e,Xhr),e($L,zhr),e(tr,Qhr),e(tr,xt),M(kL,xt,null),e(xt,Whr),e(xt,b9e),e(b9e,Hhr),e(xt,Uhr),e(xt,Yd),e(Yd,Jhr),e(Yd,v9e),e(v9e,Yhr),e(Yd,Khr),e(Yd,CQ),e(CQ,Zhr),e(Yd,epr),e(xt,opr),M(TT,xt,null),e(tr,rpr),e(tr,$r),M(SL,$r,null),e($r,tpr),e($r,F9e),e(F9e,apr),e($r,npr),e($r,on),e(on,spr),e(on,T9e),e(T9e,lpr),e(on,ipr),e(on,M9e),e(M9e,dpr),e(on,cpr),e(on,E9e),e(E9e,fpr),e(on,mpr),e($r,gpr),e($r,Z),e(Z,MT),e(MT,C9e),e(C9e,hpr),e(MT,ppr),e(MT,wQ),e(wQ,upr),e(MT,_pr),e(Z,bpr),e(Z,ET),e(ET,w9e),e(w9e,vpr),e(ET,Fpr),e(ET,AQ),e(AQ,Tpr),e(ET,Mpr),e(Z,Epr),e(Z,CT),e(CT,A9e),e(A9e,Cpr),e(CT,wpr),e(CT,yQ),e(yQ,Apr),e(CT,ypr),e(Z,Lpr),e(Z,wT),e(wT,y9e),e(y9e,xpr),e(wT,$pr),e(wT,LQ),e(LQ,kpr),e(wT,Spr),e(Z,Rpr),e(Z,AT),e(AT,L9e),e(L9e,Bpr),e(AT,Ppr),e(AT,xQ),e(xQ,Ipr),e(AT,qpr),e(Z,Npr),e(Z,yT),e(yT,x9e),e(x9e,jpr),e(yT,Dpr),e(yT,$Q),e($Q,Gpr),e(yT,Opr),e(Z,Vpr),e(Z,LT),e(LT,$9e),e($9e,Xpr),e(LT,zpr),e(LT,kQ),e(kQ,Qpr),e(LT,Wpr),e(Z,Hpr),e(Z,xT),e(xT,k9e),e(k9e,Upr),e(xT,Jpr),e(xT,SQ),e(SQ,Ypr),e(xT,Kpr),e(Z,Zpr),e(Z,$T),e($T,S9e),e(S9e,eur),e($T,our),e($T,RQ),e(RQ,rur),e($T,tur),e(Z,aur),e(Z,kT),e(kT,R9e),e(R9e,nur),e(kT,sur),e(kT,BQ),e(BQ,lur),e(kT,iur),e(Z,dur),e(Z,ST),e(ST,B9e),e(B9e,cur),e(ST,fur),e(ST,PQ),e(PQ,mur),e(ST,gur),e(Z,hur),e(Z,RT),e(RT,P9e),e(P9e,pur),e(RT,uur),e(RT,IQ),e(IQ,_ur),e(RT,bur),e(Z,vur),e(Z,BT),e(BT,I9e),e(I9e,Fur),e(BT,Tur),e(BT,qQ),e(qQ,Mur),e(BT,Eur),e(Z,Cur),e(Z,PT),e(PT,q9e),e(q9e,wur),e(PT,Aur),e(PT,NQ),e(NQ,yur),e(PT,Lur),e(Z,xur),e(Z,IT),e(IT,N9e),e(N9e,$ur),e(IT,kur),e(IT,jQ),e(jQ,Sur),e(IT,Rur),e(Z,Bur),e(Z,qT),e(qT,j9e),e(j9e,Pur),e(qT,Iur),e(qT,DQ),e(DQ,qur),e(qT,Nur),e(Z,jur),e(Z,NT),e(NT,D9e),e(D9e,Dur),e(NT,Gur),e(NT,GQ),e(GQ,Our),e(NT,Vur),e(Z,Xur),e(Z,jT),e(jT,G9e),e(G9e,zur),e(jT,Qur),e(jT,OQ),e(OQ,Wur),e(jT,Hur),e(Z,Uur),e(Z,DT),e(DT,O9e),e(O9e,Jur),e(DT,Yur),e(DT,VQ),e(VQ,Kur),e(DT,Zur),e(Z,e_r),e(Z,GT),e(GT,V9e),e(V9e,o_r),e(GT,r_r),e(GT,XQ),e(XQ,t_r),e(GT,a_r),e(Z,n_r),e(Z,OT),e(OT,X9e),e(X9e,s_r),e(OT,l_r),e(OT,zQ),e(zQ,i_r),e(OT,d_r),e(Z,c_r),e(Z,VT),e(VT,z9e),e(z9e,f_r),e(VT,m_r),e(VT,QQ),e(QQ,g_r),e(VT,h_r),e(Z,p_r),e(Z,XT),e(XT,Q9e),e(Q9e,u_r),e(XT,__r),e(XT,WQ),e(WQ,b_r),e(XT,v_r),e(Z,F_r),e(Z,zT),e(zT,W9e),e(W9e,T_r),e(zT,M_r),e(zT,HQ),e(HQ,E_r),e(zT,C_r),e(Z,w_r),e(Z,QT),e(QT,H9e),e(H9e,A_r),e(QT,y_r),e(QT,UQ),e(UQ,L_r),e(QT,x_r),e(Z,$_r),e(Z,WT),e(WT,U9e),e(U9e,k_r),e(WT,S_r),e(WT,JQ),e(JQ,R_r),e(WT,B_r),e($r,P_r),M(HT,$r,null),b(f,iPe,_),b(f,Kd,_),e(Kd,UT),e(UT,J9e),M(RL,J9e,null),e(Kd,I_r),e(Kd,Y9e),e(Y9e,q_r),b(f,dPe,_),b(f,ar,_),M(BL,ar,null),e(ar,N_r),e(ar,Zd),e(Zd,j_r),e(Zd,YQ),e(YQ,D_r),e(Zd,G_r),e(Zd,KQ),e(KQ,O_r),e(Zd,V_r),e(ar,X_r),e(ar,PL),e(PL,z_r),e(PL,K9e),e(K9e,Q_r),e(PL,W_r),e(ar,H_r),e(ar,$t),M(IL,$t,null),e($t,U_r),e($t,Z9e),e(Z9e,J_r),e($t,Y_r),e($t,ec),e(ec,K_r),e(ec,ebe),e(ebe,Z_r),e(ec,e1r),e(ec,ZQ),e(ZQ,o1r),e(ec,r1r),e($t,t1r),M(JT,$t,null),e(ar,a1r),e(ar,kr),M(qL,kr,null),e(kr,n1r),e(kr,obe),e(obe,s1r),e(kr,l1r),e(kr,rn),e(rn,i1r),e(rn,rbe),e(rbe,d1r),e(rn,c1r),e(rn,tbe),e(tbe,f1r),e(rn,m1r),e(rn,abe),e(abe,g1r),e(rn,h1r),e(kr,p1r),e(kr,pe),e(pe,YT),e(YT,nbe),e(nbe,u1r),e(YT,_1r),e(YT,eW),e(eW,b1r),e(YT,v1r),e(pe,F1r),e(pe,KT),e(KT,sbe),e(sbe,T1r),e(KT,M1r),e(KT,oW),e(oW,E1r),e(KT,C1r),e(pe,w1r),e(pe,ZT),e(ZT,lbe),e(lbe,A1r),e(ZT,y1r),e(ZT,rW),e(rW,L1r),e(ZT,x1r),e(pe,$1r),e(pe,eM),e(eM,ibe),e(ibe,k1r),e(eM,S1r),e(eM,tW),e(tW,R1r),e(eM,B1r),e(pe,P1r),e(pe,oM),e(oM,dbe),e(dbe,I1r),e(oM,q1r),e(oM,aW),e(aW,N1r),e(oM,j1r),e(pe,D1r),e(pe,rM),e(rM,cbe),e(cbe,G1r),e(rM,O1r),e(rM,nW),e(nW,V1r),e(rM,X1r),e(pe,z1r),e(pe,tM),e(tM,fbe),e(fbe,Q1r),e(tM,W1r),e(tM,sW),e(sW,H1r),e(tM,U1r),e(pe,J1r),e(pe,aM),e(aM,mbe),e(mbe,Y1r),e(aM,K1r),e(aM,lW),e(lW,Z1r),e(aM,e9r),e(pe,o9r),e(pe,nM),e(nM,gbe),e(gbe,r9r),e(nM,t9r),e(nM,iW),e(iW,a9r),e(nM,n9r),e(pe,s9r),e(pe,sM),e(sM,hbe),e(hbe,l9r),e(sM,i9r),e(sM,dW),e(dW,d9r),e(sM,c9r),e(pe,f9r),e(pe,lM),e(lM,pbe),e(pbe,m9r),e(lM,g9r),e(lM,cW),e(cW,h9r),e(lM,p9r),e(pe,u9r),e(pe,iM),e(iM,ube),e(ube,_9r),e(iM,b9r),e(iM,fW),e(fW,v9r),e(iM,F9r),e(pe,T9r),e(pe,dM),e(dM,_be),e(_be,M9r),e(dM,E9r),e(dM,mW),e(mW,C9r),e(dM,w9r),e(pe,A9r),e(pe,cM),e(cM,bbe),e(bbe,y9r),e(cM,L9r),e(cM,gW),e(gW,x9r),e(cM,$9r),e(pe,k9r),e(pe,fM),e(fM,vbe),e(vbe,S9r),e(fM,R9r),e(fM,hW),e(hW,B9r),e(fM,P9r),e(pe,I9r),e(pe,mM),e(mM,Fbe),e(Fbe,q9r),e(mM,N9r),e(mM,pW),e(pW,j9r),e(mM,D9r),e(pe,G9r),e(pe,gM),e(gM,Tbe),e(Tbe,O9r),e(gM,V9r),e(gM,uW),e(uW,X9r),e(gM,z9r),e(kr,Q9r),M(hM,kr,null),b(f,cPe,_),b(f,oc,_),e(oc,pM),e(pM,Mbe),M(NL,Mbe,null),e(oc,W9r),e(oc,Ebe),e(Ebe,H9r),b(f,fPe,_),b(f,nr,_),M(jL,nr,null),e(nr,U9r),e(nr,rc),e(rc,J9r),e(rc,_W),e(_W,Y9r),e(rc,K9r),e(rc,bW),e(bW,Z9r),e(rc,ebr),e(nr,obr),e(nr,DL),e(DL,rbr),e(DL,Cbe),e(Cbe,tbr),e(DL,abr),e(nr,nbr),e(nr,kt),M(GL,kt,null),e(kt,sbr),e(kt,wbe),e(wbe,lbr),e(kt,ibr),e(kt,tc),e(tc,dbr),e(tc,Abe),e(Abe,cbr),e(tc,fbr),e(tc,vW),e(vW,mbr),e(tc,gbr),e(kt,hbr),M(uM,kt,null),e(nr,pbr),e(nr,Sr),M(OL,Sr,null),e(Sr,ubr),e(Sr,ybe),e(ybe,_br),e(Sr,bbr),e(Sr,tn),e(tn,vbr),e(tn,Lbe),e(Lbe,Fbr),e(tn,Tbr),e(tn,xbe),e(xbe,Mbr),e(tn,Ebr),e(tn,$be),e($be,Cbr),e(tn,wbr),e(Sr,Abr),e(Sr,kbe),e(kbe,_M),e(_M,Sbe),e(Sbe,ybr),e(_M,Lbr),e(_M,FW),e(FW,xbr),e(_M,$br),e(Sr,kbr),M(bM,Sr,null),b(f,mPe,_),b(f,ac,_),e(ac,vM),e(vM,Rbe),M(VL,Rbe,null),e(ac,Sbr),e(ac,Bbe),e(Bbe,Rbr),b(f,gPe,_),b(f,sr,_),M(XL,sr,null),e(sr,Bbr),e(sr,nc),e(nc,Pbr),e(nc,TW),e(TW,Ibr),e(nc,qbr),e(nc,MW),e(MW,Nbr),e(nc,jbr),e(sr,Dbr),e(sr,zL),e(zL,Gbr),e(zL,Pbe),e(Pbe,Obr),e(zL,Vbr),e(sr,Xbr),e(sr,St),M(QL,St,null),e(St,zbr),e(St,Ibe),e(Ibe,Qbr),e(St,Wbr),e(St,sc),e(sc,Hbr),e(sc,qbe),e(qbe,Ubr),e(sc,Jbr),e(sc,EW),e(EW,Ybr),e(sc,Kbr),e(St,Zbr),M(FM,St,null),e(sr,e2r),e(sr,Rr),M(WL,Rr,null),e(Rr,o2r),e(Rr,Nbe),e(Nbe,r2r),e(Rr,t2r),e(Rr,an),e(an,a2r),e(an,jbe),e(jbe,n2r),e(an,s2r),e(an,Dbe),e(Dbe,l2r),e(an,i2r),e(an,Gbe),e(Gbe,d2r),e(an,c2r),e(Rr,f2r),e(Rr,de),e(de,TM),e(TM,Obe),e(Obe,m2r),e(TM,g2r),e(TM,CW),e(CW,h2r),e(TM,p2r),e(de,u2r),e(de,MM),e(MM,Vbe),e(Vbe,_2r),e(MM,b2r),e(MM,wW),e(wW,v2r),e(MM,F2r),e(de,T2r),e(de,EM),e(EM,Xbe),e(Xbe,M2r),e(EM,E2r),e(EM,AW),e(AW,C2r),e(EM,w2r),e(de,A2r),e(de,CM),e(CM,zbe),e(zbe,y2r),e(CM,L2r),e(CM,yW),e(yW,x2r),e(CM,$2r),e(de,k2r),e(de,wM),e(wM,Qbe),e(Qbe,S2r),e(wM,R2r),e(wM,LW),e(LW,B2r),e(wM,P2r),e(de,I2r),e(de,AM),e(AM,Wbe),e(Wbe,q2r),e(AM,N2r),e(AM,xW),e(xW,j2r),e(AM,D2r),e(de,G2r),e(de,yM),e(yM,Hbe),e(Hbe,O2r),e(yM,V2r),e(yM,$W),e($W,X2r),e(yM,z2r),e(de,Q2r),e(de,LM),e(LM,Ube),e(Ube,W2r),e(LM,H2r),e(LM,kW),e(kW,U2r),e(LM,J2r),e(de,Y2r),e(de,xM),e(xM,Jbe),e(Jbe,K2r),e(xM,Z2r),e(xM,SW),e(SW,e5r),e(xM,o5r),e(de,r5r),e(de,$M),e($M,Ybe),e(Ybe,t5r),e($M,a5r),e($M,RW),e(RW,n5r),e($M,s5r),e(de,l5r),e(de,kM),e(kM,Kbe),e(Kbe,i5r),e(kM,d5r),e(kM,BW),e(BW,c5r),e(kM,f5r),e(de,m5r),e(de,SM),e(SM,Zbe),e(Zbe,g5r),e(SM,h5r),e(SM,PW),e(PW,p5r),e(SM,u5r),e(de,_5r),e(de,RM),e(RM,e2e),e(e2e,b5r),e(RM,v5r),e(RM,IW),e(IW,F5r),e(RM,T5r),e(de,M5r),e(de,BM),e(BM,o2e),e(o2e,E5r),e(BM,C5r),e(BM,qW),e(qW,w5r),e(BM,A5r),e(de,y5r),e(de,PM),e(PM,r2e),e(r2e,L5r),e(PM,x5r),e(PM,NW),e(NW,$5r),e(PM,k5r),e(de,S5r),e(de,IM),e(IM,t2e),e(t2e,R5r),e(IM,B5r),e(IM,jW),e(jW,P5r),e(IM,I5r),e(de,q5r),e(de,qM),e(qM,a2e),e(a2e,N5r),e(qM,j5r),e(qM,DW),e(DW,D5r),e(qM,G5r),e(de,O5r),e(de,NM),e(NM,n2e),e(n2e,V5r),e(NM,X5r),e(NM,GW),e(GW,z5r),e(NM,Q5r),e(de,W5r),e(de,jM),e(jM,s2e),e(s2e,H5r),e(jM,U5r),e(jM,OW),e(OW,J5r),e(jM,Y5r),e(de,K5r),e(de,DM),e(DM,l2e),e(l2e,Z5r),e(DM,evr),e(DM,VW),e(VW,ovr),e(DM,rvr),e(Rr,tvr),M(GM,Rr,null),b(f,hPe,_),b(f,lc,_),e(lc,OM),e(OM,i2e),M(HL,i2e,null),e(lc,avr),e(lc,d2e),e(d2e,nvr),b(f,pPe,_),b(f,lr,_),M(UL,lr,null),e(lr,svr),e(lr,ic),e(ic,lvr),e(ic,XW),e(XW,ivr),e(ic,dvr),e(ic,zW),e(zW,cvr),e(ic,fvr),e(lr,mvr),e(lr,JL),e(JL,gvr),e(JL,c2e),e(c2e,hvr),e(JL,pvr),e(lr,uvr),e(lr,Rt),M(YL,Rt,null),e(Rt,_vr),e(Rt,f2e),e(f2e,bvr),e(Rt,vvr),e(Rt,dc),e(dc,Fvr),e(dc,m2e),e(m2e,Tvr),e(dc,Mvr),e(dc,QW),e(QW,Evr),e(dc,Cvr),e(Rt,wvr),M(VM,Rt,null),e(lr,Avr),e(lr,Br),M(KL,Br,null),e(Br,yvr),e(Br,g2e),e(g2e,Lvr),e(Br,xvr),e(Br,nn),e(nn,$vr),e(nn,h2e),e(h2e,kvr),e(nn,Svr),e(nn,p2e),e(p2e,Rvr),e(nn,Bvr),e(nn,u2e),e(u2e,Pvr),e(nn,Ivr),e(Br,qvr),e(Br,ce),e(ce,XM),e(XM,_2e),e(_2e,Nvr),e(XM,jvr),e(XM,WW),e(WW,Dvr),e(XM,Gvr),e(ce,Ovr),e(ce,zM),e(zM,b2e),e(b2e,Vvr),e(zM,Xvr),e(zM,HW),e(HW,zvr),e(zM,Qvr),e(ce,Wvr),e(ce,QM),e(QM,v2e),e(v2e,Hvr),e(QM,Uvr),e(QM,UW),e(UW,Jvr),e(QM,Yvr),e(ce,Kvr),e(ce,WM),e(WM,F2e),e(F2e,Zvr),e(WM,eFr),e(WM,JW),e(JW,oFr),e(WM,rFr),e(ce,tFr),e(ce,HM),e(HM,T2e),e(T2e,aFr),e(HM,nFr),e(HM,YW),e(YW,sFr),e(HM,lFr),e(ce,iFr),e(ce,UM),e(UM,M2e),e(M2e,dFr),e(UM,cFr),e(UM,KW),e(KW,fFr),e(UM,mFr),e(ce,gFr),e(ce,JM),e(JM,E2e),e(E2e,hFr),e(JM,pFr),e(JM,ZW),e(ZW,uFr),e(JM,_Fr),e(ce,bFr),e(ce,YM),e(YM,C2e),e(C2e,vFr),e(YM,FFr),e(YM,eH),e(eH,TFr),e(YM,MFr),e(ce,EFr),e(ce,KM),e(KM,w2e),e(w2e,CFr),e(KM,wFr),e(KM,oH),e(oH,AFr),e(KM,yFr),e(ce,LFr),e(ce,ZM),e(ZM,A2e),e(A2e,xFr),e(ZM,$Fr),e(ZM,rH),e(rH,kFr),e(ZM,SFr),e(ce,RFr),e(ce,e4),e(e4,y2e),e(y2e,BFr),e(e4,PFr),e(e4,tH),e(tH,IFr),e(e4,qFr),e(ce,NFr),e(ce,o4),e(o4,L2e),e(L2e,jFr),e(o4,DFr),e(o4,aH),e(aH,GFr),e(o4,OFr),e(ce,VFr),e(ce,r4),e(r4,x2e),e(x2e,XFr),e(r4,zFr),e(r4,nH),e(nH,QFr),e(r4,WFr),e(ce,HFr),e(ce,t4),e(t4,$2e),e($2e,UFr),e(t4,JFr),e(t4,sH),e(sH,YFr),e(t4,KFr),e(ce,ZFr),e(ce,a4),e(a4,k2e),e(k2e,e6r),e(a4,o6r),e(a4,lH),e(lH,r6r),e(a4,t6r),e(ce,a6r),e(ce,n4),e(n4,S2e),e(S2e,n6r),e(n4,s6r),e(n4,iH),e(iH,l6r),e(n4,i6r),e(ce,d6r),e(ce,s4),e(s4,R2e),e(R2e,c6r),e(s4,f6r),e(s4,dH),e(dH,m6r),e(s4,g6r),e(ce,h6r),e(ce,l4),e(l4,B2e),e(B2e,p6r),e(l4,u6r),e(l4,cH),e(cH,_6r),e(l4,b6r),e(ce,v6r),e(ce,i4),e(i4,P2e),e(P2e,F6r),e(i4,T6r),e(i4,fH),e(fH,M6r),e(i4,E6r),e(ce,C6r),e(ce,d4),e(d4,I2e),e(I2e,w6r),e(d4,A6r),e(d4,mH),e(mH,y6r),e(d4,L6r),e(Br,x6r),M(c4,Br,null),b(f,uPe,_),b(f,cc,_),e(cc,f4),e(f4,q2e),M(ZL,q2e,null),e(cc,$6r),e(cc,N2e),e(N2e,k6r),b(f,_Pe,_),b(f,ir,_),M(e8,ir,null),e(ir,S6r),e(ir,fc),e(fc,R6r),e(fc,gH),e(gH,B6r),e(fc,P6r),e(fc,hH),e(hH,I6r),e(fc,q6r),e(ir,N6r),e(ir,o8),e(o8,j6r),e(o8,j2e),e(j2e,D6r),e(o8,G6r),e(ir,O6r),e(ir,Bt),M(r8,Bt,null),e(Bt,V6r),e(Bt,D2e),e(D2e,X6r),e(Bt,z6r),e(Bt,mc),e(mc,Q6r),e(mc,G2e),e(G2e,W6r),e(mc,H6r),e(mc,pH),e(pH,U6r),e(mc,J6r),e(Bt,Y6r),M(m4,Bt,null),e(ir,K6r),e(ir,Pr),M(t8,Pr,null),e(Pr,Z6r),e(Pr,O2e),e(O2e,eTr),e(Pr,oTr),e(Pr,sn),e(sn,rTr),e(sn,V2e),e(V2e,tTr),e(sn,aTr),e(sn,X2e),e(X2e,nTr),e(sn,sTr),e(sn,z2e),e(z2e,lTr),e(sn,iTr),e(Pr,dTr),e(Pr,Q2e),e(Q2e,g4),e(g4,W2e),e(W2e,cTr),e(g4,fTr),e(g4,uH),e(uH,mTr),e(g4,gTr),e(Pr,hTr),M(h4,Pr,null),b(f,bPe,_),b(f,gc,_),e(gc,p4),e(p4,H2e),M(a8,H2e,null),e(gc,pTr),e(gc,U2e),e(U2e,uTr),b(f,vPe,_),b(f,dr,_),M(n8,dr,null),e(dr,_Tr),e(dr,hc),e(hc,bTr),e(hc,_H),e(_H,vTr),e(hc,FTr),e(hc,bH),e(bH,TTr),e(hc,MTr),e(dr,ETr),e(dr,s8),e(s8,CTr),e(s8,J2e),e(J2e,wTr),e(s8,ATr),e(dr,yTr),e(dr,Pt),M(l8,Pt,null),e(Pt,LTr),e(Pt,Y2e),e(Y2e,xTr),e(Pt,$Tr),e(Pt,pc),e(pc,kTr),e(pc,K2e),e(K2e,STr),e(pc,RTr),e(pc,vH),e(vH,BTr),e(pc,PTr),e(Pt,ITr),M(u4,Pt,null),e(dr,qTr),e(dr,Ir),M(i8,Ir,null),e(Ir,NTr),e(Ir,Z2e),e(Z2e,jTr),e(Ir,DTr),e(Ir,ln),e(ln,GTr),e(ln,e5e),e(e5e,OTr),e(ln,VTr),e(ln,o5e),e(o5e,XTr),e(ln,zTr),e(ln,r5e),e(r5e,QTr),e(ln,WTr),e(Ir,HTr),e(Ir,t5e),e(t5e,_4),e(_4,a5e),e(a5e,UTr),e(_4,JTr),e(_4,FH),e(FH,YTr),e(_4,KTr),e(Ir,ZTr),M(b4,Ir,null),b(f,FPe,_),b(f,uc,_),e(uc,v4),e(v4,n5e),M(d8,n5e,null),e(uc,eMr),e(uc,s5e),e(s5e,oMr),b(f,TPe,_),b(f,cr,_),M(c8,cr,null),e(cr,rMr),e(cr,_c),e(_c,tMr),e(_c,TH),e(TH,aMr),e(_c,nMr),e(_c,MH),e(MH,sMr),e(_c,lMr),e(cr,iMr),e(cr,f8),e(f8,dMr),e(f8,l5e),e(l5e,cMr),e(f8,fMr),e(cr,mMr),e(cr,It),M(m8,It,null),e(It,gMr),e(It,i5e),e(i5e,hMr),e(It,pMr),e(It,bc),e(bc,uMr),e(bc,d5e),e(d5e,_Mr),e(bc,bMr),e(bc,EH),e(EH,vMr),e(bc,FMr),e(It,TMr),M(F4,It,null),e(cr,MMr),e(cr,qr),M(g8,qr,null),e(qr,EMr),e(qr,c5e),e(c5e,CMr),e(qr,wMr),e(qr,dn),e(dn,AMr),e(dn,f5e),e(f5e,yMr),e(dn,LMr),e(dn,m5e),e(m5e,xMr),e(dn,$Mr),e(dn,g5e),e(g5e,kMr),e(dn,SMr),e(qr,RMr),e(qr,oe),e(oe,T4),e(T4,h5e),e(h5e,BMr),e(T4,PMr),e(T4,CH),e(CH,IMr),e(T4,qMr),e(oe,NMr),e(oe,M4),e(M4,p5e),e(p5e,jMr),e(M4,DMr),e(M4,wH),e(wH,GMr),e(M4,OMr),e(oe,VMr),e(oe,E4),e(E4,u5e),e(u5e,XMr),e(E4,zMr),e(E4,AH),e(AH,QMr),e(E4,WMr),e(oe,HMr),e(oe,C4),e(C4,_5e),e(_5e,UMr),e(C4,JMr),e(C4,yH),e(yH,YMr),e(C4,KMr),e(oe,ZMr),e(oe,w4),e(w4,b5e),e(b5e,e4r),e(w4,o4r),e(w4,LH),e(LH,r4r),e(w4,t4r),e(oe,a4r),e(oe,A4),e(A4,v5e),e(v5e,n4r),e(A4,s4r),e(A4,xH),e(xH,l4r),e(A4,i4r),e(oe,d4r),e(oe,y4),e(y4,F5e),e(F5e,c4r),e(y4,f4r),e(y4,$H),e($H,m4r),e(y4,g4r),e(oe,h4r),e(oe,L4),e(L4,T5e),e(T5e,p4r),e(L4,u4r),e(L4,kH),e(kH,_4r),e(L4,b4r),e(oe,v4r),e(oe,x4),e(x4,M5e),e(M5e,F4r),e(x4,T4r),e(x4,SH),e(SH,M4r),e(x4,E4r),e(oe,C4r),e(oe,$4),e($4,E5e),e(E5e,w4r),e($4,A4r),e($4,RH),e(RH,y4r),e($4,L4r),e(oe,x4r),e(oe,k4),e(k4,C5e),e(C5e,$4r),e(k4,k4r),e(k4,BH),e(BH,S4r),e(k4,R4r),e(oe,B4r),e(oe,S4),e(S4,w5e),e(w5e,P4r),e(S4,I4r),e(S4,PH),e(PH,q4r),e(S4,N4r),e(oe,j4r),e(oe,R4),e(R4,A5e),e(A5e,D4r),e(R4,G4r),e(R4,IH),e(IH,O4r),e(R4,V4r),e(oe,X4r),e(oe,B4),e(B4,y5e),e(y5e,z4r),e(B4,Q4r),e(B4,qH),e(qH,W4r),e(B4,H4r),e(oe,U4r),e(oe,P4),e(P4,L5e),e(L5e,J4r),e(P4,Y4r),e(P4,NH),e(NH,K4r),e(P4,Z4r),e(oe,eEr),e(oe,I4),e(I4,x5e),e(x5e,oEr),e(I4,rEr),e(I4,jH),e(jH,tEr),e(I4,aEr),e(oe,nEr),e(oe,q4),e(q4,$5e),e($5e,sEr),e(q4,lEr),e(q4,DH),e(DH,iEr),e(q4,dEr),e(oe,cEr),e(oe,N4),e(N4,k5e),e(k5e,fEr),e(N4,mEr),e(N4,GH),e(GH,gEr),e(N4,hEr),e(oe,pEr),e(oe,j4),e(j4,S5e),e(S5e,uEr),e(j4,_Er),e(j4,OH),e(OH,bEr),e(j4,vEr),e(oe,FEr),e(oe,D4),e(D4,R5e),e(R5e,TEr),e(D4,MEr),e(D4,VH),e(VH,EEr),e(D4,CEr),e(oe,wEr),e(oe,G4),e(G4,B5e),e(B5e,AEr),e(G4,yEr),e(G4,XH),e(XH,LEr),e(G4,xEr),e(oe,$Er),e(oe,O4),e(O4,P5e),e(P5e,kEr),e(O4,SEr),e(O4,zH),e(zH,REr),e(O4,BEr),e(oe,PEr),e(oe,V4),e(V4,I5e),e(I5e,IEr),e(V4,qEr),e(V4,QH),e(QH,NEr),e(V4,jEr),e(oe,DEr),e(oe,X4),e(X4,q5e),e(q5e,GEr),e(X4,OEr),e(X4,WH),e(WH,VEr),e(X4,XEr),e(oe,zEr),e(oe,z4),e(z4,N5e),e(N5e,QEr),e(z4,WEr),e(z4,HH),e(HH,HEr),e(z4,UEr),e(qr,JEr),M(Q4,qr,null),b(f,MPe,_),b(f,vc,_),e(vc,W4),e(W4,j5e),M(h8,j5e,null),e(vc,YEr),e(vc,D5e),e(D5e,KEr),b(f,EPe,_),b(f,fr,_),M(p8,fr,null),e(fr,ZEr),e(fr,Fc),e(Fc,eCr),e(Fc,UH),e(UH,oCr),e(Fc,rCr),e(Fc,JH),e(JH,tCr),e(Fc,aCr),e(fr,nCr),e(fr,u8),e(u8,sCr),e(u8,G5e),e(G5e,lCr),e(u8,iCr),e(fr,dCr),e(fr,qt),M(_8,qt,null),e(qt,cCr),e(qt,O5e),e(O5e,fCr),e(qt,mCr),e(qt,Tc),e(Tc,gCr),e(Tc,V5e),e(V5e,hCr),e(Tc,pCr),e(Tc,YH),e(YH,uCr),e(Tc,_Cr),e(qt,bCr),M(H4,qt,null),e(fr,vCr),e(fr,Nr),M(b8,Nr,null),e(Nr,FCr),e(Nr,X5e),e(X5e,TCr),e(Nr,MCr),e(Nr,cn),e(cn,ECr),e(cn,z5e),e(z5e,CCr),e(cn,wCr),e(cn,Q5e),e(Q5e,ACr),e(cn,yCr),e(cn,W5e),e(W5e,LCr),e(cn,xCr),e(Nr,$Cr),e(Nr,ke),e(ke,U4),e(U4,H5e),e(H5e,kCr),e(U4,SCr),e(U4,KH),e(KH,RCr),e(U4,BCr),e(ke,PCr),e(ke,J4),e(J4,U5e),e(U5e,ICr),e(J4,qCr),e(J4,ZH),e(ZH,NCr),e(J4,jCr),e(ke,DCr),e(ke,Y4),e(Y4,J5e),e(J5e,GCr),e(Y4,OCr),e(Y4,eU),e(eU,VCr),e(Y4,XCr),e(ke,zCr),e(ke,K4),e(K4,Y5e),e(Y5e,QCr),e(K4,WCr),e(K4,oU),e(oU,HCr),e(K4,UCr),e(ke,JCr),e(ke,Z4),e(Z4,K5e),e(K5e,YCr),e(Z4,KCr),e(Z4,rU),e(rU,ZCr),e(Z4,e3r),e(ke,o3r),e(ke,eE),e(eE,Z5e),e(Z5e,r3r),e(eE,t3r),e(eE,tU),e(tU,a3r),e(eE,n3r),e(ke,s3r),e(ke,oE),e(oE,eve),e(eve,l3r),e(oE,i3r),e(oE,aU),e(aU,d3r),e(oE,c3r),e(ke,f3r),e(ke,rE),e(rE,ove),e(ove,m3r),e(rE,g3r),e(rE,nU),e(nU,h3r),e(rE,p3r),e(ke,u3r),e(ke,tE),e(tE,rve),e(rve,_3r),e(tE,b3r),e(tE,sU),e(sU,v3r),e(tE,F3r),e(Nr,T3r),M(aE,Nr,null),b(f,CPe,_),b(f,Mc,_),e(Mc,nE),e(nE,tve),M(v8,tve,null),e(Mc,M3r),e(Mc,ave),e(ave,E3r),b(f,wPe,_),b(f,mr,_),M(F8,mr,null),e(mr,C3r),e(mr,Ec),e(Ec,w3r),e(Ec,lU),e(lU,A3r),e(Ec,y3r),e(Ec,iU),e(iU,L3r),e(Ec,x3r),e(mr,$3r),e(mr,T8),e(T8,k3r),e(T8,nve),e(nve,S3r),e(T8,R3r),e(mr,B3r),e(mr,Nt),M(M8,Nt,null),e(Nt,P3r),e(Nt,sve),e(sve,I3r),e(Nt,q3r),e(Nt,Cc),e(Cc,N3r),e(Cc,lve),e(lve,j3r),e(Cc,D3r),e(Cc,dU),e(dU,G3r),e(Cc,O3r),e(Nt,V3r),M(sE,Nt,null),e(mr,X3r),e(mr,jr),M(E8,jr,null),e(jr,z3r),e(jr,ive),e(ive,Q3r),e(jr,W3r),e(jr,fn),e(fn,H3r),e(fn,dve),e(dve,U3r),e(fn,J3r),e(fn,cve),e(cve,Y3r),e(fn,K3r),e(fn,fve),e(fve,Z3r),e(fn,ewr),e(jr,owr),e(jr,Me),e(Me,lE),e(lE,mve),e(mve,rwr),e(lE,twr),e(lE,cU),e(cU,awr),e(lE,nwr),e(Me,swr),e(Me,iE),e(iE,gve),e(gve,lwr),e(iE,iwr),e(iE,fU),e(fU,dwr),e(iE,cwr),e(Me,fwr),e(Me,dE),e(dE,hve),e(hve,mwr),e(dE,gwr),e(dE,mU),e(mU,hwr),e(dE,pwr),e(Me,uwr),e(Me,cE),e(cE,pve),e(pve,_wr),e(cE,bwr),e(cE,gU),e(gU,vwr),e(cE,Fwr),e(Me,Twr),e(Me,fE),e(fE,uve),e(uve,Mwr),e(fE,Ewr),e(fE,hU),e(hU,Cwr),e(fE,wwr),e(Me,Awr),e(Me,mE),e(mE,_ve),e(_ve,ywr),e(mE,Lwr),e(mE,pU),e(pU,xwr),e(mE,$wr),e(Me,kwr),e(Me,gE),e(gE,bve),e(bve,Swr),e(gE,Rwr),e(gE,uU),e(uU,Bwr),e(gE,Pwr),e(Me,Iwr),e(Me,hE),e(hE,vve),e(vve,qwr),e(hE,Nwr),e(hE,_U),e(_U,jwr),e(hE,Dwr),e(Me,Gwr),e(Me,pE),e(pE,Fve),e(Fve,Owr),e(pE,Vwr),e(pE,bU),e(bU,Xwr),e(pE,zwr),e(Me,Qwr),e(Me,uE),e(uE,Tve),e(Tve,Wwr),e(uE,Hwr),e(uE,vU),e(vU,Uwr),e(uE,Jwr),e(Me,Ywr),e(Me,_E),e(_E,Mve),e(Mve,Kwr),e(_E,Zwr),e(_E,FU),e(FU,eAr),e(_E,oAr),e(Me,rAr),e(Me,bE),e(bE,Eve),e(Eve,tAr),e(bE,aAr),e(bE,TU),e(TU,nAr),e(bE,sAr),e(jr,lAr),M(vE,jr,null),b(f,APe,_),b(f,wc,_),e(wc,FE),e(FE,Cve),M(C8,Cve,null),e(wc,iAr),e(wc,wve),e(wve,dAr),b(f,yPe,_),b(f,gr,_),M(w8,gr,null),e(gr,cAr),e(gr,Ac),e(Ac,fAr),e(Ac,MU),e(MU,mAr),e(Ac,gAr),e(Ac,EU),e(EU,hAr),e(Ac,pAr),e(gr,uAr),e(gr,A8),e(A8,_Ar),e(A8,Ave),e(Ave,bAr),e(A8,vAr),e(gr,FAr),e(gr,jt),M(y8,jt,null),e(jt,TAr),e(jt,yve),e(yve,MAr),e(jt,EAr),e(jt,yc),e(yc,CAr),e(yc,Lve),e(Lve,wAr),e(yc,AAr),e(yc,CU),e(CU,yAr),e(yc,LAr),e(jt,xAr),M(TE,jt,null),e(gr,$Ar),e(gr,Dr),M(L8,Dr,null),e(Dr,kAr),e(Dr,xve),e(xve,SAr),e(Dr,RAr),e(Dr,mn),e(mn,BAr),e(mn,$ve),e($ve,PAr),e(mn,IAr),e(mn,kve),e(kve,qAr),e(mn,NAr),e(mn,Sve),e(Sve,jAr),e(mn,DAr),e(Dr,GAr),e(Dr,Le),e(Le,ME),e(ME,Rve),e(Rve,OAr),e(ME,VAr),e(ME,wU),e(wU,XAr),e(ME,zAr),e(Le,QAr),e(Le,EE),e(EE,Bve),e(Bve,WAr),e(EE,HAr),e(EE,AU),e(AU,UAr),e(EE,JAr),e(Le,YAr),e(Le,CE),e(CE,Pve),e(Pve,KAr),e(CE,ZAr),e(CE,yU),e(yU,e0r),e(CE,o0r),e(Le,r0r),e(Le,wE),e(wE,Ive),e(Ive,t0r),e(wE,a0r),e(wE,LU),e(LU,n0r),e(wE,s0r),e(Le,l0r),e(Le,AE),e(AE,qve),e(qve,i0r),e(AE,d0r),e(AE,xU),e(xU,c0r),e(AE,f0r),e(Le,m0r),e(Le,yE),e(yE,Nve),e(Nve,g0r),e(yE,h0r),e(yE,$U),e($U,p0r),e(yE,u0r),e(Le,_0r),e(Le,LE),e(LE,jve),e(jve,b0r),e(LE,v0r),e(LE,kU),e(kU,F0r),e(LE,T0r),e(Le,M0r),e(Le,xE),e(xE,Dve),e(Dve,E0r),e(xE,C0r),e(xE,SU),e(SU,w0r),e(xE,A0r),e(Le,y0r),e(Le,$E),e($E,Gve),e(Gve,L0r),e($E,x0r),e($E,RU),e(RU,$0r),e($E,k0r),e(Le,S0r),e(Le,kE),e(kE,Ove),e(Ove,R0r),e(kE,B0r),e(kE,BU),e(BU,P0r),e(kE,I0r),e(Dr,q0r),M(SE,Dr,null),b(f,LPe,_),b(f,Lc,_),e(Lc,RE),e(RE,Vve),M(x8,Vve,null),e(Lc,N0r),e(Lc,Xve),e(Xve,j0r),b(f,xPe,_),b(f,hr,_),M($8,hr,null),e(hr,D0r),e(hr,xc),e(xc,G0r),e(xc,PU),e(PU,O0r),e(xc,V0r),e(xc,IU),e(IU,X0r),e(xc,z0r),e(hr,Q0r),e(hr,k8),e(k8,W0r),e(k8,zve),e(zve,H0r),e(k8,U0r),e(hr,J0r),e(hr,Dt),M(S8,Dt,null),e(Dt,Y0r),e(Dt,Qve),e(Qve,K0r),e(Dt,Z0r),e(Dt,$c),e($c,eyr),e($c,Wve),e(Wve,oyr),e($c,ryr),e($c,qU),e(qU,tyr),e($c,ayr),e(Dt,nyr),M(BE,Dt,null),e(hr,syr),e(hr,Gr),M(R8,Gr,null),e(Gr,lyr),e(Gr,Hve),e(Hve,iyr),e(Gr,dyr),e(Gr,gn),e(gn,cyr),e(gn,Uve),e(Uve,fyr),e(gn,myr),e(gn,Jve),e(Jve,gyr),e(gn,hyr),e(gn,Yve),e(Yve,pyr),e(gn,uyr),e(Gr,_yr),e(Gr,Se),e(Se,PE),e(PE,Kve),e(Kve,byr),e(PE,vyr),e(PE,NU),e(NU,Fyr),e(PE,Tyr),e(Se,Myr),e(Se,IE),e(IE,Zve),e(Zve,Eyr),e(IE,Cyr),e(IE,jU),e(jU,wyr),e(IE,Ayr),e(Se,yyr),e(Se,qE),e(qE,eFe),e(eFe,Lyr),e(qE,xyr),e(qE,DU),e(DU,$yr),e(qE,kyr),e(Se,Syr),e(Se,NE),e(NE,oFe),e(oFe,Ryr),e(NE,Byr),e(NE,GU),e(GU,Pyr),e(NE,Iyr),e(Se,qyr),e(Se,jE),e(jE,rFe),e(rFe,Nyr),e(jE,jyr),e(jE,OU),e(OU,Dyr),e(jE,Gyr),e(Se,Oyr),e(Se,DE),e(DE,tFe),e(tFe,Vyr),e(DE,Xyr),e(DE,VU),e(VU,zyr),e(DE,Qyr),e(Se,Wyr),e(Se,GE),e(GE,aFe),e(aFe,Hyr),e(GE,Uyr),e(GE,XU),e(XU,Jyr),e(GE,Yyr),e(Se,Kyr),e(Se,OE),e(OE,nFe),e(nFe,Zyr),e(OE,eLr),e(OE,zU),e(zU,oLr),e(OE,rLr),e(Se,tLr),e(Se,VE),e(VE,sFe),e(sFe,aLr),e(VE,nLr),e(VE,QU),e(QU,sLr),e(VE,lLr),e(Gr,iLr),M(XE,Gr,null),b(f,$Pe,_),b(f,kc,_),e(kc,zE),e(zE,lFe),M(B8,lFe,null),e(kc,dLr),e(kc,iFe),e(iFe,cLr),b(f,kPe,_),b(f,pr,_),M(P8,pr,null),e(pr,fLr),e(pr,Sc),e(Sc,mLr),e(Sc,WU),e(WU,gLr),e(Sc,hLr),e(Sc,HU),e(HU,pLr),e(Sc,uLr),e(pr,_Lr),e(pr,I8),e(I8,bLr),e(I8,dFe),e(dFe,vLr),e(I8,FLr),e(pr,TLr),e(pr,Gt),M(q8,Gt,null),e(Gt,MLr),e(Gt,cFe),e(cFe,ELr),e(Gt,CLr),e(Gt,Rc),e(Rc,wLr),e(Rc,fFe),e(fFe,ALr),e(Rc,yLr),e(Rc,UU),e(UU,LLr),e(Rc,xLr),e(Gt,$Lr),M(QE,Gt,null),e(pr,kLr),e(pr,Or),M(N8,Or,null),e(Or,SLr),e(Or,mFe),e(mFe,RLr),e(Or,BLr),e(Or,hn),e(hn,PLr),e(hn,gFe),e(gFe,ILr),e(hn,qLr),e(hn,hFe),e(hFe,NLr),e(hn,jLr),e(hn,pFe),e(pFe,DLr),e(hn,GLr),e(Or,OLr),e(Or,xe),e(xe,WE),e(WE,uFe),e(uFe,VLr),e(WE,XLr),e(WE,JU),e(JU,zLr),e(WE,QLr),e(xe,WLr),e(xe,HE),e(HE,_Fe),e(_Fe,HLr),e(HE,ULr),e(HE,YU),e(YU,JLr),e(HE,YLr),e(xe,KLr),e(xe,UE),e(UE,bFe),e(bFe,ZLr),e(UE,e8r),e(UE,KU),e(KU,o8r),e(UE,r8r),e(xe,t8r),e(xe,JE),e(JE,vFe),e(vFe,a8r),e(JE,n8r),e(JE,ZU),e(ZU,s8r),e(JE,l8r),e(xe,i8r),e(xe,YE),e(YE,FFe),e(FFe,d8r),e(YE,c8r),e(YE,eJ),e(eJ,f8r),e(YE,m8r),e(xe,g8r),e(xe,KE),e(KE,TFe),e(TFe,h8r),e(KE,p8r),e(KE,oJ),e(oJ,u8r),e(KE,_8r),e(xe,b8r),e(xe,ZE),e(ZE,MFe),e(MFe,v8r),e(ZE,F8r),e(ZE,rJ),e(rJ,T8r),e(ZE,M8r),e(xe,E8r),e(xe,eC),e(eC,EFe),e(EFe,C8r),e(eC,w8r),e(eC,tJ),e(tJ,A8r),e(eC,y8r),e(xe,L8r),e(xe,oC),e(oC,CFe),e(CFe,x8r),e(oC,$8r),e(oC,aJ),e(aJ,k8r),e(oC,S8r),e(xe,R8r),e(xe,rC),e(rC,wFe),e(wFe,B8r),e(rC,P8r),e(rC,nJ),e(nJ,I8r),e(rC,q8r),e(Or,N8r),M(tC,Or,null),b(f,SPe,_),b(f,Bc,_),e(Bc,aC),e(aC,AFe),M(j8,AFe,null),e(Bc,j8r),e(Bc,yFe),e(yFe,D8r),b(f,RPe,_),b(f,ur,_),M(D8,ur,null),e(ur,G8r),e(ur,Pc),e(Pc,O8r),e(Pc,sJ),e(sJ,V8r),e(Pc,X8r),e(Pc,lJ),e(lJ,z8r),e(Pc,Q8r),e(ur,W8r),e(ur,G8),e(G8,H8r),e(G8,LFe),e(LFe,U8r),e(G8,J8r),e(ur,Y8r),e(ur,Ot),M(O8,Ot,null),e(Ot,K8r),e(Ot,xFe),e(xFe,Z8r),e(Ot,exr),e(Ot,Ic),e(Ic,oxr),e(Ic,$Fe),e($Fe,rxr),e(Ic,txr),e(Ic,iJ),e(iJ,axr),e(Ic,nxr),e(Ot,sxr),M(nC,Ot,null),e(ur,lxr),e(ur,Vr),M(V8,Vr,null),e(Vr,ixr),e(Vr,kFe),e(kFe,dxr),e(Vr,cxr),e(Vr,pn),e(pn,fxr),e(pn,SFe),e(SFe,mxr),e(pn,gxr),e(pn,RFe),e(RFe,hxr),e(pn,pxr),e(pn,BFe),e(BFe,uxr),e(pn,_xr),e(Vr,bxr),e(Vr,$e),e($e,sC),e(sC,PFe),e(PFe,vxr),e(sC,Fxr),e(sC,dJ),e(dJ,Txr),e(sC,Mxr),e($e,Exr),e($e,lC),e(lC,IFe),e(IFe,Cxr),e(lC,wxr),e(lC,cJ),e(cJ,Axr),e(lC,yxr),e($e,Lxr),e($e,iC),e(iC,qFe),e(qFe,xxr),e(iC,$xr),e(iC,fJ),e(fJ,kxr),e(iC,Sxr),e($e,Rxr),e($e,dC),e(dC,NFe),e(NFe,Bxr),e(dC,Pxr),e(dC,mJ),e(mJ,Ixr),e(dC,qxr),e($e,Nxr),e($e,cC),e(cC,jFe),e(jFe,jxr),e(cC,Dxr),e(cC,gJ),e(gJ,Gxr),e(cC,Oxr),e($e,Vxr),e($e,fC),e(fC,DFe),e(DFe,Xxr),e(fC,zxr),e(fC,hJ),e(hJ,Qxr),e(fC,Wxr),e($e,Hxr),e($e,mC),e(mC,GFe),e(GFe,Uxr),e(mC,Jxr),e(mC,pJ),e(pJ,Yxr),e(mC,Kxr),e($e,Zxr),e($e,gC),e(gC,OFe),e(OFe,e7r),e(gC,o7r),e(gC,uJ),e(uJ,r7r),e(gC,t7r),e($e,a7r),e($e,hC),e(hC,VFe),e(VFe,n7r),e(hC,s7r),e(hC,_J),e(_J,l7r),e(hC,i7r),e($e,d7r),e($e,pC),e(pC,XFe),e(XFe,c7r),e(pC,f7r),e(pC,bJ),e(bJ,m7r),e(pC,g7r),e(Vr,h7r),M(uC,Vr,null),b(f,BPe,_),b(f,qc,_),e(qc,_C),e(_C,zFe),M(X8,zFe,null),e(qc,p7r),e(qc,QFe),e(QFe,u7r),b(f,PPe,_),b(f,_r,_),M(z8,_r,null),e(_r,_7r),e(_r,Nc),e(Nc,b7r),e(Nc,vJ),e(vJ,v7r),e(Nc,F7r),e(Nc,FJ),e(FJ,T7r),e(Nc,M7r),e(_r,E7r),e(_r,Q8),e(Q8,C7r),e(Q8,WFe),e(WFe,w7r),e(Q8,A7r),e(_r,y7r),e(_r,Vt),M(W8,Vt,null),e(Vt,L7r),e(Vt,HFe),e(HFe,x7r),e(Vt,$7r),e(Vt,jc),e(jc,k7r),e(jc,UFe),e(UFe,S7r),e(jc,R7r),e(jc,TJ),e(TJ,B7r),e(jc,P7r),e(Vt,I7r),M(bC,Vt,null),e(_r,q7r),e(_r,Xr),M(H8,Xr,null),e(Xr,N7r),e(Xr,JFe),e(JFe,j7r),e(Xr,D7r),e(Xr,un),e(un,G7r),e(un,YFe),e(YFe,O7r),e(un,V7r),e(un,KFe),e(KFe,X7r),e(un,z7r),e(un,ZFe),e(ZFe,Q7r),e(un,W7r),e(Xr,H7r),e(Xr,De),e(De,vC),e(vC,e6e),e(e6e,U7r),e(vC,J7r),e(vC,MJ),e(MJ,Y7r),e(vC,K7r),e(De,Z7r),e(De,FC),e(FC,o6e),e(o6e,e$r),e(FC,o$r),e(FC,EJ),e(EJ,r$r),e(FC,t$r),e(De,a$r),e(De,TC),e(TC,r6e),e(r6e,n$r),e(TC,s$r),e(TC,CJ),e(CJ,l$r),e(TC,i$r),e(De,d$r),e(De,MC),e(MC,t6e),e(t6e,c$r),e(MC,f$r),e(MC,wJ),e(wJ,m$r),e(MC,g$r),e(De,h$r),e(De,EC),e(EC,a6e),e(a6e,p$r),e(EC,u$r),e(EC,AJ),e(AJ,_$r),e(EC,b$r),e(De,v$r),e(De,CC),e(CC,n6e),e(n6e,F$r),e(CC,T$r),e(CC,yJ),e(yJ,M$r),e(CC,E$r),e(De,C$r),e(De,wC),e(wC,s6e),e(s6e,w$r),e(wC,A$r),e(wC,LJ),e(LJ,y$r),e(wC,L$r),e(De,x$r),e(De,AC),e(AC,l6e),e(l6e,$$r),e(AC,k$r),e(AC,xJ),e(xJ,S$r),e(AC,R$r),e(Xr,B$r),M(yC,Xr,null),b(f,IPe,_),b(f,Dc,_),e(Dc,LC),e(LC,i6e),M(U8,i6e,null),e(Dc,P$r),e(Dc,d6e),e(d6e,I$r),b(f,qPe,_),b(f,br,_),M(J8,br,null),e(br,q$r),e(br,Gc),e(Gc,N$r),e(Gc,$J),e($J,j$r),e(Gc,D$r),e(Gc,kJ),e(kJ,G$r),e(Gc,O$r),e(br,V$r),e(br,Y8),e(Y8,X$r),e(Y8,c6e),e(c6e,z$r),e(Y8,Q$r),e(br,W$r),e(br,Xt),M(K8,Xt,null),e(Xt,H$r),e(Xt,f6e),e(f6e,U$r),e(Xt,J$r),e(Xt,Oc),e(Oc,Y$r),e(Oc,m6e),e(m6e,K$r),e(Oc,Z$r),e(Oc,SJ),e(SJ,ekr),e(Oc,okr),e(Xt,rkr),M(xC,Xt,null),e(br,tkr),e(br,zr),M(Z8,zr,null),e(zr,akr),e(zr,g6e),e(g6e,nkr),e(zr,skr),e(zr,_n),e(_n,lkr),e(_n,h6e),e(h6e,ikr),e(_n,dkr),e(_n,p6e),e(p6e,ckr),e(_n,fkr),e(_n,u6e),e(u6e,mkr),e(_n,gkr),e(zr,hkr),e(zr,Ge),e(Ge,$C),e($C,_6e),e(_6e,pkr),e($C,ukr),e($C,RJ),e(RJ,_kr),e($C,bkr),e(Ge,vkr),e(Ge,kC),e(kC,b6e),e(b6e,Fkr),e(kC,Tkr),e(kC,BJ),e(BJ,Mkr),e(kC,Ekr),e(Ge,Ckr),e(Ge,SC),e(SC,v6e),e(v6e,wkr),e(SC,Akr),e(SC,PJ),e(PJ,ykr),e(SC,Lkr),e(Ge,xkr),e(Ge,RC),e(RC,F6e),e(F6e,$kr),e(RC,kkr),e(RC,IJ),e(IJ,Skr),e(RC,Rkr),e(Ge,Bkr),e(Ge,BC),e(BC,T6e),e(T6e,Pkr),e(BC,Ikr),e(BC,qJ),e(qJ,qkr),e(BC,Nkr),e(Ge,jkr),e(Ge,PC),e(PC,M6e),e(M6e,Dkr),e(PC,Gkr),e(PC,NJ),e(NJ,Okr),e(PC,Vkr),e(Ge,Xkr),e(Ge,IC),e(IC,E6e),e(E6e,zkr),e(IC,Qkr),e(IC,jJ),e(jJ,Wkr),e(IC,Hkr),e(Ge,Ukr),e(Ge,qC),e(qC,C6e),e(C6e,Jkr),e(qC,Ykr),e(qC,DJ),e(DJ,Kkr),e(qC,Zkr),e(zr,eSr),M(NC,zr,null),b(f,NPe,_),b(f,Vc,_),e(Vc,jC),e(jC,w6e),M(ex,w6e,null),e(Vc,oSr),e(Vc,A6e),e(A6e,rSr),b(f,jPe,_),b(f,vr,_),M(ox,vr,null),e(vr,tSr),e(vr,Xc),e(Xc,aSr),e(Xc,GJ),e(GJ,nSr),e(Xc,sSr),e(Xc,OJ),e(OJ,lSr),e(Xc,iSr),e(vr,dSr),e(vr,rx),e(rx,cSr),e(rx,y6e),e(y6e,fSr),e(rx,mSr),e(vr,gSr),e(vr,zt),M(tx,zt,null),e(zt,hSr),e(zt,L6e),e(L6e,pSr),e(zt,uSr),e(zt,zc),e(zc,_Sr),e(zc,x6e),e(x6e,bSr),e(zc,vSr),e(zc,VJ),e(VJ,FSr),e(zc,TSr),e(zt,MSr),M(DC,zt,null),e(vr,ESr),e(vr,Qr),M(ax,Qr,null),e(Qr,CSr),e(Qr,$6e),e($6e,wSr),e(Qr,ASr),e(Qr,bn),e(bn,ySr),e(bn,k6e),e(k6e,LSr),e(bn,xSr),e(bn,S6e),e(S6e,$Sr),e(bn,kSr),e(bn,R6e),e(R6e,SSr),e(bn,RSr),e(Qr,BSr),e(Qr,B6e),e(B6e,GC),e(GC,P6e),e(P6e,PSr),e(GC,ISr),e(GC,XJ),e(XJ,qSr),e(GC,NSr),e(Qr,jSr),M(OC,Qr,null),b(f,DPe,_),b(f,Qc,_),e(Qc,VC),e(VC,I6e),M(nx,I6e,null),e(Qc,DSr),e(Qc,q6e),e(q6e,GSr),b(f,GPe,_),b(f,Fr,_),M(sx,Fr,null),e(Fr,OSr),e(Fr,Wc),e(Wc,VSr),e(Wc,zJ),e(zJ,XSr),e(Wc,zSr),e(Wc,QJ),e(QJ,QSr),e(Wc,WSr),e(Fr,HSr),e(Fr,lx),e(lx,USr),e(lx,N6e),e(N6e,JSr),e(lx,YSr),e(Fr,KSr),e(Fr,Qt),M(ix,Qt,null),e(Qt,ZSr),e(Qt,j6e),e(j6e,eRr),e(Qt,oRr),e(Qt,Hc),e(Hc,rRr),e(Hc,D6e),e(D6e,tRr),e(Hc,aRr),e(Hc,WJ),e(WJ,nRr),e(Hc,sRr),e(Qt,lRr),M(XC,Qt,null),e(Fr,iRr),e(Fr,Wr),M(dx,Wr,null),e(Wr,dRr),e(Wr,G6e),e(G6e,cRr),e(Wr,fRr),e(Wr,vn),e(vn,mRr),e(vn,O6e),e(O6e,gRr),e(vn,hRr),e(vn,V6e),e(V6e,pRr),e(vn,uRr),e(vn,X6e),e(X6e,_Rr),e(vn,bRr),e(Wr,vRr),e(Wr,cx),e(cx,zC),e(zC,z6e),e(z6e,FRr),e(zC,TRr),e(zC,HJ),e(HJ,MRr),e(zC,ERr),e(cx,CRr),e(cx,QC),e(QC,Q6e),e(Q6e,wRr),e(QC,ARr),e(QC,UJ),e(UJ,yRr),e(QC,LRr),e(Wr,xRr),M(WC,Wr,null),b(f,OPe,_),b(f,Uc,_),e(Uc,HC),e(HC,W6e),M(fx,W6e,null),e(Uc,$Rr),e(Uc,H6e),e(H6e,kRr),b(f,VPe,_),b(f,Tr,_),M(mx,Tr,null),e(Tr,SRr),e(Tr,Jc),e(Jc,RRr),e(Jc,JJ),e(JJ,BRr),e(Jc,PRr),e(Jc,YJ),e(YJ,IRr),e(Jc,qRr),e(Tr,NRr),e(Tr,gx),e(gx,jRr),e(gx,U6e),e(U6e,DRr),e(gx,GRr),e(Tr,ORr),e(Tr,Wt),M(hx,Wt,null),e(Wt,VRr),e(Wt,J6e),e(J6e,XRr),e(Wt,zRr),e(Wt,Yc),e(Yc,QRr),e(Yc,Y6e),e(Y6e,WRr),e(Yc,HRr),e(Yc,KJ),e(KJ,URr),e(Yc,JRr),e(Wt,YRr),M(UC,Wt,null),e(Tr,KRr),e(Tr,Hr),M(px,Hr,null),e(Hr,ZRr),e(Hr,K6e),e(K6e,eBr),e(Hr,oBr),e(Hr,Fn),e(Fn,rBr),e(Fn,Z6e),e(Z6e,tBr),e(Fn,aBr),e(Fn,eTe),e(eTe,nBr),e(Fn,sBr),e(Fn,oTe),e(oTe,lBr),e(Fn,iBr),e(Hr,dBr),e(Hr,rTe),e(rTe,JC),e(JC,tTe),e(tTe,cBr),e(JC,fBr),e(JC,ZJ),e(ZJ,mBr),e(JC,gBr),e(Hr,hBr),M(YC,Hr,null),XPe=!0},p(f,[_]){const ux={};_&2&&(ux.$$scope={dirty:_,ctx:f}),sf.$set(ux);const aTe={};_&2&&(aTe.$$scope={dirty:_,ctx:f}),tg.$set(aTe);const nTe={};_&2&&(nTe.$$scope={dirty:_,ctx:f}),Pg.$set(nTe);const sTe={};_&2&&(sTe.$$scope={dirty:_,ctx:f}),lh.$set(sTe);const _x={};_&2&&(_x.$$scope={dirty:_,ctx:f}),ih.$set(_x);const lTe={};_&2&&(lTe.$$scope={dirty:_,ctx:f}),wh.$set(lTe);const Tn={};_&2&&(Tn.$$scope={dirty:_,ctx:f}),Ah.$set(Tn);const iTe={};_&2&&(iTe.$$scope={dirty:_,ctx:f}),xh.$set(iTe);const dTe={};_&2&&(dTe.$$scope={dirty:_,ctx:f}),uu.$set(dTe);const cTe={};_&2&&(cTe.$$scope={dirty:_,ctx:f}),bu.$set(cTe);const bx={};_&2&&(bx.$$scope={dirty:_,ctx:f}),n_.$set(bx);const fTe={};_&2&&(fTe.$$scope={dirty:_,ctx:f}),l_.$set(fTe);const vx={};_&2&&(vx.$$scope={dirty:_,ctx:f}),X_.$set(vx);const mTe={};_&2&&(mTe.$$scope={dirty:_,ctx:f}),Q_.$set(mTe);const Fx={};_&2&&(Fx.$$scope={dirty:_,ctx:f}),x1.$set(Fx);const gTe={};_&2&&(gTe.$$scope={dirty:_,ctx:f}),k1.$set(gTe);const hTe={};_&2&&(hTe.$$scope={dirty:_,ctx:f}),J1.$set(hTe);const pTe={};_&2&&(pTe.$$scope={dirty:_,ctx:f}),K1.$set(pTe);const Kc={};_&2&&(Kc.$$scope={dirty:_,ctx:f}),W9.$set(Kc);const uTe={};_&2&&(uTe.$$scope={dirty:_,ctx:f}),U9.$set(uTe);const _Te={};_&2&&(_Te.$$scope={dirty:_,ctx:f}),wb.$set(_Te);const bTe={};_&2&&(bTe.$$scope={dirty:_,ctx:f}),yb.$set(bTe);const Tx={};_&2&&(Tx.$$scope={dirty:_,ctx:f}),Bb.$set(Tx);const vTe={};_&2&&(vTe.$$scope={dirty:_,ctx:f}),Ib.$set(vTe);const FTe={};_&2&&(FTe.$$scope={dirty:_,ctx:f}),_2.$set(FTe);const TTe={};_&2&&(TTe.$$scope={dirty:_,ctx:f}),v2.$set(TTe);const Jr={};_&2&&(Jr.$$scope={dirty:_,ctx:f}),s5.$set(Jr);const Mx={};_&2&&(Mx.$$scope={dirty:_,ctx:f}),i5.$set(Mx);const MTe={};_&2&&(MTe.$$scope={dirty:_,ctx:f}),f5.$set(MTe);const Ex={};_&2&&(Ex.$$scope={dirty:_,ctx:f}),g5.$set(Ex);const ETe={};_&2&&(ETe.$$scope={dirty:_,ctx:f}),A5.$set(ETe);const Yr={};_&2&&(Yr.$$scope={dirty:_,ctx:f}),L5.$set(Yr);const CTe={};_&2&&(CTe.$$scope={dirty:_,ctx:f}),k5.$set(CTe);const Zc={};_&2&&(Zc.$$scope={dirty:_,ctx:f}),R5.$set(Zc);const wTe={};_&2&&(wTe.$$scope={dirty:_,ctx:f}),V5.$set(wTe);const ATe={};_&2&&(ATe.$$scope={dirty:_,ctx:f}),z5.$set(ATe);const L={};_&2&&(L.$$scope={dirty:_,ctx:f}),Y5.$set(L);const KC={};_&2&&(KC.$$scope={dirty:_,ctx:f}),Z5.$set(KC);const yTe={};_&2&&(yTe.$$scope={dirty:_,ctx:f}),dv.$set(yTe);const LTe={};_&2&&(LTe.$$scope={dirty:_,ctx:f}),fv.$set(LTe);const ZC={};_&2&&(ZC.$$scope={dirty:_,ctx:f}),pv.$set(ZC);const xTe={};_&2&&(xTe.$$scope={dirty:_,ctx:f}),_v.$set(xTe);const $Te={};_&2&&($Te.$$scope={dirty:_,ctx:f}),Ev.$set($Te);const e3={};_&2&&(e3.$$scope={dirty:_,ctx:f}),wv.$set(e3);const kTe={};_&2&&(kTe.$$scope={dirty:_,ctx:f}),$v.$set(kTe);const STe={};_&2&&(STe.$$scope={dirty:_,ctx:f}),Sv.$set(STe);const o3={};_&2&&(o3.$$scope={dirty:_,ctx:f}),Pv.$set(o3);const RTe={};_&2&&(RTe.$$scope={dirty:_,ctx:f}),qv.$set(RTe);const BTe={};_&2&&(BTe.$$scope={dirty:_,ctx:f}),Dv.$set(BTe);const r3={};_&2&&(r3.$$scope={dirty:_,ctx:f}),Ov.$set(r3);const PTe={};_&2&&(PTe.$$scope={dirty:_,ctx:f}),Hv.$set(PTe);const ITe={};_&2&&(ITe.$$scope={dirty:_,ctx:f}),Jv.$set(ITe);const t3={};_&2&&(t3.$$scope={dirty:_,ctx:f}),Zv.$set(t3);const qTe={};_&2&&(qTe.$$scope={dirty:_,ctx:f}),oF.$set(qTe);const NTe={};_&2&&(NTe.$$scope={dirty:_,ctx:f}),zF.$set(NTe);const a3={};_&2&&(a3.$$scope={dirty:_,ctx:f}),WF.$set(a3);const jTe={};_&2&&(jTe.$$scope={dirty:_,ctx:f}),_6.$set(jTe);const DTe={};_&2&&(DTe.$$scope={dirty:_,ctx:f}),v6.$set(DTe);const n3={};_&2&&(n3.$$scope={dirty:_,ctx:f}),S6.$set(n3);const GTe={};_&2&&(GTe.$$scope={dirty:_,ctx:f}),B6.$set(GTe);const OTe={};_&2&&(OTe.$$scope={dirty:_,ctx:f}),q6.$set(OTe);const s3={};_&2&&(s3.$$scope={dirty:_,ctx:f}),j6.$set(s3);const VTe={};_&2&&(VTe.$$scope={dirty:_,ctx:f}),sT.$set(VTe);const XTe={};_&2&&(XTe.$$scope={dirty:_,ctx:f}),iT.$set(XTe);const l3={};_&2&&(l3.$$scope={dirty:_,ctx:f}),vT.$set(l3);const zTe={};_&2&&(zTe.$$scope={dirty:_,ctx:f}),TT.$set(zTe);const QTe={};_&2&&(QTe.$$scope={dirty:_,ctx:f}),HT.$set(QTe);const i3={};_&2&&(i3.$$scope={dirty:_,ctx:f}),JT.$set(i3);const WTe={};_&2&&(WTe.$$scope={dirty:_,ctx:f}),hM.$set(WTe);const HTe={};_&2&&(HTe.$$scope={dirty:_,ctx:f}),uM.$set(HTe);const d3={};_&2&&(d3.$$scope={dirty:_,ctx:f}),bM.$set(d3);const UTe={};_&2&&(UTe.$$scope={dirty:_,ctx:f}),FM.$set(UTe);const JTe={};_&2&&(JTe.$$scope={dirty:_,ctx:f}),GM.$set(JTe);const c3={};_&2&&(c3.$$scope={dirty:_,ctx:f}),VM.$set(c3);const YTe={};_&2&&(YTe.$$scope={dirty:_,ctx:f}),c4.$set(YTe);const KTe={};_&2&&(KTe.$$scope={dirty:_,ctx:f}),m4.$set(KTe);const f3={};_&2&&(f3.$$scope={dirty:_,ctx:f}),h4.$set(f3);const ZTe={};_&2&&(ZTe.$$scope={dirty:_,ctx:f}),u4.$set(ZTe);const eMe={};_&2&&(eMe.$$scope={dirty:_,ctx:f}),b4.$set(eMe);const m3={};_&2&&(m3.$$scope={dirty:_,ctx:f}),F4.$set(m3);const oMe={};_&2&&(oMe.$$scope={dirty:_,ctx:f}),Q4.$set(oMe);const rMe={};_&2&&(rMe.$$scope={dirty:_,ctx:f}),H4.$set(rMe);const g3={};_&2&&(g3.$$scope={dirty:_,ctx:f}),aE.$set(g3);const tMe={};_&2&&(tMe.$$scope={dirty:_,ctx:f}),sE.$set(tMe);const aMe={};_&2&&(aMe.$$scope={dirty:_,ctx:f}),vE.$set(aMe);const h3={};_&2&&(h3.$$scope={dirty:_,ctx:f}),TE.$set(h3);const nMe={};_&2&&(nMe.$$scope={dirty:_,ctx:f}),SE.$set(nMe);const sMe={};_&2&&(sMe.$$scope={dirty:_,ctx:f}),BE.$set(sMe);const p3={};_&2&&(p3.$$scope={dirty:_,ctx:f}),XE.$set(p3);const lMe={};_&2&&(lMe.$$scope={dirty:_,ctx:f}),QE.$set(lMe);const iMe={};_&2&&(iMe.$$scope={dirty:_,ctx:f}),tC.$set(iMe);const u3={};_&2&&(u3.$$scope={dirty:_,ctx:f}),nC.$set(u3);const dMe={};_&2&&(dMe.$$scope={dirty:_,ctx:f}),uC.$set(dMe);const cMe={};_&2&&(cMe.$$scope={dirty:_,ctx:f}),bC.$set(cMe);const _3={};_&2&&(_3.$$scope={dirty:_,ctx:f}),yC.$set(_3);const fMe={};_&2&&(fMe.$$scope={dirty:_,ctx:f}),xC.$set(fMe);const mMe={};_&2&&(mMe.$$scope={dirty:_,ctx:f}),NC.$set(mMe);const b3={};_&2&&(b3.$$scope={dirty:_,ctx:f}),DC.$set(b3);const gMe={};_&2&&(gMe.$$scope={dirty:_,ctx:f}),OC.$set(gMe);const hMe={};_&2&&(hMe.$$scope={dirty:_,ctx:f}),XC.$set(hMe);const v3={};_&2&&(v3.$$scope={dirty:_,ctx:f}),WC.$set(v3);const pMe={};_&2&&(pMe.$$scope={dirty:_,ctx:f}),UC.$set(pMe);const uMe={};_&2&&(uMe.$$scope={dirty:_,ctx:f}),YC.$set(uMe)},i(f){XPe||(E(d.$$.fragment,f),E(va.$$.fragment,f),E(_A.$$.fragment,f),E(bA.$$.fragment,f),E(sf.$$.fragment,f),E(vA.$$.fragment,f),E(FA.$$.fragment,f),E(EA.$$.fragment,f),E(tg.$$.fragment,f),E(CA.$$.fragment,f),E(wA.$$.fragment,f),E(AA.$$.fragment,f),E(xA.$$.fragment,f),E(Pg.$$.fragment,f),E($A.$$.fragment,f),E(kA.$$.fragment,f),E(SA.$$.fragment,f),E(PA.$$.fragment,f),E(lh.$$.fragment,f),E(ih.$$.fragment,f),E(IA.$$.fragment,f),E(qA.$$.fragment,f),E(NA.$$.fragment,f),E(GA.$$.fragment,f),E(wh.$$.fragment,f),E(Ah.$$.fragment,f),E(OA.$$.fragment,f),E(VA.$$.fragment,f),E(XA.$$.fragment,f),E(QA.$$.fragment,f),E(xh.$$.fragment,f),E(WA.$$.fragment,f),E(uu.$$.fragment,f),E(HA.$$.fragment,f),E(UA.$$.fragment,f),E(YA.$$.fragment,f),E(bu.$$.fragment,f),E(KA.$$.fragment,f),E(n_.$$.fragment,f),E(ZA.$$.fragment,f),E(e0.$$.fragment,f),E(r0.$$.fragment,f),E(l_.$$.fragment,f),E(t0.$$.fragment,f),E(X_.$$.fragment,f),E(a0.$$.fragment,f),E(n0.$$.fragment,f),E(l0.$$.fragment,f),E(Q_.$$.fragment,f),E(i0.$$.fragment,f),E(x1.$$.fragment,f),E(d0.$$.fragment,f),E(c0.$$.fragment,f),E(m0.$$.fragment,f),E(k1.$$.fragment,f),E(g0.$$.fragment,f),E(J1.$$.fragment,f),E(h0.$$.fragment,f),E(p0.$$.fragment,f),E(_0.$$.fragment,f),E(K1.$$.fragment,f),E(b0.$$.fragment,f),E(W9.$$.fragment,f),E(v0.$$.fragment,f),E(F0.$$.fragment,f),E(M0.$$.fragment,f),E(U9.$$.fragment,f),E(E0.$$.fragment,f),E(wb.$$.fragment,f),E(C0.$$.fragment,f),E(w0.$$.fragment,f),E(y0.$$.fragment,f),E(yb.$$.fragment,f),E(L0.$$.fragment,f),E(Bb.$$.fragment,f),E(x0.$$.fragment,f),E($0.$$.fragment,f),E(S0.$$.fragment,f),E(Ib.$$.fragment,f),E(R0.$$.fragment,f),E(_2.$$.fragment,f),E(B0.$$.fragment,f),E(P0.$$.fragment,f),E(q0.$$.fragment,f),E(v2.$$.fragment,f),E(N0.$$.fragment,f),E(s5.$$.fragment,f),E(j0.$$.fragment,f),E(D0.$$.fragment,f),E(O0.$$.fragment,f),E(i5.$$.fragment,f),E(V0.$$.fragment,f),E(f5.$$.fragment,f),E(X0.$$.fragment,f),E(z0.$$.fragment,f),E(W0.$$.fragment,f),E(g5.$$.fragment,f),E(H0.$$.fragment,f),E(A5.$$.fragment,f),E(U0.$$.fragment,f),E(J0.$$.fragment,f),E(K0.$$.fragment,f),E(L5.$$.fragment,f),E(Z0.$$.fragment,f),E(k5.$$.fragment,f),E(ey.$$.fragment,f),E(oy.$$.fragment,f),E(ty.$$.fragment,f),E(R5.$$.fragment,f),E(ay.$$.fragment,f),E(V5.$$.fragment,f),E(ny.$$.fragment,f),E(sy.$$.fragment,f),E(iy.$$.fragment,f),E(z5.$$.fragment,f),E(dy.$$.fragment,f),E(Y5.$$.fragment,f),E(cy.$$.fragment,f),E(fy.$$.fragment,f),E(gy.$$.fragment,f),E(Z5.$$.fragment,f),E(hy.$$.fragment,f),E(dv.$$.fragment,f),E(py.$$.fragment,f),E(uy.$$.fragment,f),E(by.$$.fragment,f),E(fv.$$.fragment,f),E(vy.$$.fragment,f),E(pv.$$.fragment,f),E(Ty.$$.fragment,f),E(My.$$.fragment,f),E(Cy.$$.fragment,f),E(_v.$$.fragment,f),E(wy.$$.fragment,f),E(Ev.$$.fragment,f),E(Ay.$$.fragment,f),E(yy.$$.fragment,f),E(xy.$$.fragment,f),E(wv.$$.fragment,f),E($y.$$.fragment,f),E($v.$$.fragment,f),E(ky.$$.fragment,f),E(Sy.$$.fragment,f),E(By.$$.fragment,f),E(Sv.$$.fragment,f),E(Py.$$.fragment,f),E(Pv.$$.fragment,f),E(Iy.$$.fragment,f),E(qy.$$.fragment,f),E(jy.$$.fragment,f),E(qv.$$.fragment,f),E(Dy.$$.fragment,f),E(Dv.$$.fragment,f),E(Gy.$$.fragment,f),E(Oy.$$.fragment,f),E(Xy.$$.fragment,f),E(Ov.$$.fragment,f),E(zy.$$.fragment,f),E(Hv.$$.fragment,f),E(Qy.$$.fragment,f),E(Wy.$$.fragment,f),E(Uy.$$.fragment,f),E(Jv.$$.fragment,f),E(Jy.$$.fragment,f),E(Zv.$$.fragment,f),E(Yy.$$.fragment,f),E(Ky.$$.fragment,f),E(eL.$$.fragment,f),E(oF.$$.fragment,f),E(oL.$$.fragment,f),E(zF.$$.fragment,f),E(rL.$$.fragment,f),E(tL.$$.fragment,f),E(nL.$$.fragment,f),E(WF.$$.fragment,f),E(sL.$$.fragment,f),E(_6.$$.fragment,f),E(lL.$$.fragment,f),E(iL.$$.fragment,f),E(cL.$$.fragment,f),E(v6.$$.fragment,f),E(fL.$$.fragment,f),E(S6.$$.fragment,f),E(mL.$$.fragment,f),E(gL.$$.fragment,f),E(pL.$$.fragment,f),E(B6.$$.fragment,f),E(uL.$$.fragment,f),E(q6.$$.fragment,f),E(bL.$$.fragment,f),E(vL.$$.fragment,f),E(TL.$$.fragment,f),E(j6.$$.fragment,f),E(ML.$$.fragment,f),E(sT.$$.fragment,f),E(EL.$$.fragment,f),E(CL.$$.fragment,f),E(AL.$$.fragment,f),E(iT.$$.fragment,f),E(yL.$$.fragment,f),E(vT.$$.fragment,f),E(LL.$$.fragment,f),E(xL.$$.fragment,f),E(kL.$$.fragment,f),E(TT.$$.fragment,f),E(SL.$$.fragment,f),E(HT.$$.fragment,f),E(RL.$$.fragment,f),E(BL.$$.fragment,f),E(IL.$$.fragment,f),E(JT.$$.fragment,f),E(qL.$$.fragment,f),E(hM.$$.fragment,f),E(NL.$$.fragment,f),E(jL.$$.fragment,f),E(GL.$$.fragment,f),E(uM.$$.fragment,f),E(OL.$$.fragment,f),E(bM.$$.fragment,f),E(VL.$$.fragment,f),E(XL.$$.fragment,f),E(QL.$$.fragment,f),E(FM.$$.fragment,f),E(WL.$$.fragment,f),E(GM.$$.fragment,f),E(HL.$$.fragment,f),E(UL.$$.fragment,f),E(YL.$$.fragment,f),E(VM.$$.fragment,f),E(KL.$$.fragment,f),E(c4.$$.fragment,f),E(ZL.$$.fragment,f),E(e8.$$.fragment,f),E(r8.$$.fragment,f),E(m4.$$.fragment,f),E(t8.$$.fragment,f),E(h4.$$.fragment,f),E(a8.$$.fragment,f),E(n8.$$.fragment,f),E(l8.$$.fragment,f),E(u4.$$.fragment,f),E(i8.$$.fragment,f),E(b4.$$.fragment,f),E(d8.$$.fragment,f),E(c8.$$.fragment,f),E(m8.$$.fragment,f),E(F4.$$.fragment,f),E(g8.$$.fragment,f),E(Q4.$$.fragment,f),E(h8.$$.fragment,f),E(p8.$$.fragment,f),E(_8.$$.fragment,f),E(H4.$$.fragment,f),E(b8.$$.fragment,f),E(aE.$$.fragment,f),E(v8.$$.fragment,f),E(F8.$$.fragment,f),E(M8.$$.fragment,f),E(sE.$$.fragment,f),E(E8.$$.fragment,f),E(vE.$$.fragment,f),E(C8.$$.fragment,f),E(w8.$$.fragment,f),E(y8.$$.fragment,f),E(TE.$$.fragment,f),E(L8.$$.fragment,f),E(SE.$$.fragment,f),E(x8.$$.fragment,f),E($8.$$.fragment,f),E(S8.$$.fragment,f),E(BE.$$.fragment,f),E(R8.$$.fragment,f),E(XE.$$.fragment,f),E(B8.$$.fragment,f),E(P8.$$.fragment,f),E(q8.$$.fragment,f),E(QE.$$.fragment,f),E(N8.$$.fragment,f),E(tC.$$.fragment,f),E(j8.$$.fragment,f),E(D8.$$.fragment,f),E(O8.$$.fragment,f),E(nC.$$.fragment,f),E(V8.$$.fragment,f),E(uC.$$.fragment,f),E(X8.$$.fragment,f),E(z8.$$.fragment,f),E(W8.$$.fragment,f),E(bC.$$.fragment,f),E(H8.$$.fragment,f),E(yC.$$.fragment,f),E(U8.$$.fragment,f),E(J8.$$.fragment,f),E(K8.$$.fragment,f),E(xC.$$.fragment,f),E(Z8.$$.fragment,f),E(NC.$$.fragment,f),E(ex.$$.fragment,f),E(ox.$$.fragment,f),E(tx.$$.fragment,f),E(DC.$$.fragment,f),E(ax.$$.fragment,f),E(OC.$$.fragment,f),E(nx.$$.fragment,f),E(sx.$$.fragment,f),E(ix.$$.fragment,f),E(XC.$$.fragment,f),E(dx.$$.fragment,f),E(WC.$$.fragment,f),E(fx.$$.fragment,f),E(mx.$$.fragment,f),E(hx.$$.fragment,f),E(UC.$$.fragment,f),E(px.$$.fragment,f),E(YC.$$.fragment,f),XPe=!0)},o(f){C(d.$$.fragment,f),C(va.$$.fragment,f),C(_A.$$.fragment,f),C(bA.$$.fragment,f),C(sf.$$.fragment,f),C(vA.$$.fragment,f),C(FA.$$.fragment,f),C(EA.$$.fragment,f),C(tg.$$.fragment,f),C(CA.$$.fragment,f),C(wA.$$.fragment,f),C(AA.$$.fragment,f),C(xA.$$.fragment,f),C(Pg.$$.fragment,f),C($A.$$.fragment,f),C(kA.$$.fragment,f),C(SA.$$.fragment,f),C(PA.$$.fragment,f),C(lh.$$.fragment,f),C(ih.$$.fragment,f),C(IA.$$.fragment,f),C(qA.$$.fragment,f),C(NA.$$.fragment,f),C(GA.$$.fragment,f),C(wh.$$.fragment,f),C(Ah.$$.fragment,f),C(OA.$$.fragment,f),C(VA.$$.fragment,f),C(XA.$$.fragment,f),C(QA.$$.fragment,f),C(xh.$$.fragment,f),C(WA.$$.fragment,f),C(uu.$$.fragment,f),C(HA.$$.fragment,f),C(UA.$$.fragment,f),C(YA.$$.fragment,f),C(bu.$$.fragment,f),C(KA.$$.fragment,f),C(n_.$$.fragment,f),C(ZA.$$.fragment,f),C(e0.$$.fragment,f),C(r0.$$.fragment,f),C(l_.$$.fragment,f),C(t0.$$.fragment,f),C(X_.$$.fragment,f),C(a0.$$.fragment,f),C(n0.$$.fragment,f),C(l0.$$.fragment,f),C(Q_.$$.fragment,f),C(i0.$$.fragment,f),C(x1.$$.fragment,f),C(d0.$$.fragment,f),C(c0.$$.fragment,f),C(m0.$$.fragment,f),C(k1.$$.fragment,f),C(g0.$$.fragment,f),C(J1.$$.fragment,f),C(h0.$$.fragment,f),C(p0.$$.fragment,f),C(_0.$$.fragment,f),C(K1.$$.fragment,f),C(b0.$$.fragment,f),C(W9.$$.fragment,f),C(v0.$$.fragment,f),C(F0.$$.fragment,f),C(M0.$$.fragment,f),C(U9.$$.fragment,f),C(E0.$$.fragment,f),C(wb.$$.fragment,f),C(C0.$$.fragment,f),C(w0.$$.fragment,f),C(y0.$$.fragment,f),C(yb.$$.fragment,f),C(L0.$$.fragment,f),C(Bb.$$.fragment,f),C(x0.$$.fragment,f),C($0.$$.fragment,f),C(S0.$$.fragment,f),C(Ib.$$.fragment,f),C(R0.$$.fragment,f),C(_2.$$.fragment,f),C(B0.$$.fragment,f),C(P0.$$.fragment,f),C(q0.$$.fragment,f),C(v2.$$.fragment,f),C(N0.$$.fragment,f),C(s5.$$.fragment,f),C(j0.$$.fragment,f),C(D0.$$.fragment,f),C(O0.$$.fragment,f),C(i5.$$.fragment,f),C(V0.$$.fragment,f),C(f5.$$.fragment,f),C(X0.$$.fragment,f),C(z0.$$.fragment,f),C(W0.$$.fragment,f),C(g5.$$.fragment,f),C(H0.$$.fragment,f),C(A5.$$.fragment,f),C(U0.$$.fragment,f),C(J0.$$.fragment,f),C(K0.$$.fragment,f),C(L5.$$.fragment,f),C(Z0.$$.fragment,f),C(k5.$$.fragment,f),C(ey.$$.fragment,f),C(oy.$$.fragment,f),C(ty.$$.fragment,f),C(R5.$$.fragment,f),C(ay.$$.fragment,f),C(V5.$$.fragment,f),C(ny.$$.fragment,f),C(sy.$$.fragment,f),C(iy.$$.fragment,f),C(z5.$$.fragment,f),C(dy.$$.fragment,f),C(Y5.$$.fragment,f),C(cy.$$.fragment,f),C(fy.$$.fragment,f),C(gy.$$.fragment,f),C(Z5.$$.fragment,f),C(hy.$$.fragment,f),C(dv.$$.fragment,f),C(py.$$.fragment,f),C(uy.$$.fragment,f),C(by.$$.fragment,f),C(fv.$$.fragment,f),C(vy.$$.fragment,f),C(pv.$$.fragment,f),C(Ty.$$.fragment,f),C(My.$$.fragment,f),C(Cy.$$.fragment,f),C(_v.$$.fragment,f),C(wy.$$.fragment,f),C(Ev.$$.fragment,f),C(Ay.$$.fragment,f),C(yy.$$.fragment,f),C(xy.$$.fragment,f),C(wv.$$.fragment,f),C($y.$$.fragment,f),C($v.$$.fragment,f),C(ky.$$.fragment,f),C(Sy.$$.fragment,f),C(By.$$.fragment,f),C(Sv.$$.fragment,f),C(Py.$$.fragment,f),C(Pv.$$.fragment,f),C(Iy.$$.fragment,f),C(qy.$$.fragment,f),C(jy.$$.fragment,f),C(qv.$$.fragment,f),C(Dy.$$.fragment,f),C(Dv.$$.fragment,f),C(Gy.$$.fragment,f),C(Oy.$$.fragment,f),C(Xy.$$.fragment,f),C(Ov.$$.fragment,f),C(zy.$$.fragment,f),C(Hv.$$.fragment,f),C(Qy.$$.fragment,f),C(Wy.$$.fragment,f),C(Uy.$$.fragment,f),C(Jv.$$.fragment,f),C(Jy.$$.fragment,f),C(Zv.$$.fragment,f),C(Yy.$$.fragment,f),C(Ky.$$.fragment,f),C(eL.$$.fragment,f),C(oF.$$.fragment,f),C(oL.$$.fragment,f),C(zF.$$.fragment,f),C(rL.$$.fragment,f),C(tL.$$.fragment,f),C(nL.$$.fragment,f),C(WF.$$.fragment,f),C(sL.$$.fragment,f),C(_6.$$.fragment,f),C(lL.$$.fragment,f),C(iL.$$.fragment,f),C(cL.$$.fragment,f),C(v6.$$.fragment,f),C(fL.$$.fragment,f),C(S6.$$.fragment,f),C(mL.$$.fragment,f),C(gL.$$.fragment,f),C(pL.$$.fragment,f),C(B6.$$.fragment,f),C(uL.$$.fragment,f),C(q6.$$.fragment,f),C(bL.$$.fragment,f),C(vL.$$.fragment,f),C(TL.$$.fragment,f),C(j6.$$.fragment,f),C(ML.$$.fragment,f),C(sT.$$.fragment,f),C(EL.$$.fragment,f),C(CL.$$.fragment,f),C(AL.$$.fragment,f),C(iT.$$.fragment,f),C(yL.$$.fragment,f),C(vT.$$.fragment,f),C(LL.$$.fragment,f),C(xL.$$.fragment,f),C(kL.$$.fragment,f),C(TT.$$.fragment,f),C(SL.$$.fragment,f),C(HT.$$.fragment,f),C(RL.$$.fragment,f),C(BL.$$.fragment,f),C(IL.$$.fragment,f),C(JT.$$.fragment,f),C(qL.$$.fragment,f),C(hM.$$.fragment,f),C(NL.$$.fragment,f),C(jL.$$.fragment,f),C(GL.$$.fragment,f),C(uM.$$.fragment,f),C(OL.$$.fragment,f),C(bM.$$.fragment,f),C(VL.$$.fragment,f),C(XL.$$.fragment,f),C(QL.$$.fragment,f),C(FM.$$.fragment,f),C(WL.$$.fragment,f),C(GM.$$.fragment,f),C(HL.$$.fragment,f),C(UL.$$.fragment,f),C(YL.$$.fragment,f),C(VM.$$.fragment,f),C(KL.$$.fragment,f),C(c4.$$.fragment,f),C(ZL.$$.fragment,f),C(e8.$$.fragment,f),C(r8.$$.fragment,f),C(m4.$$.fragment,f),C(t8.$$.fragment,f),C(h4.$$.fragment,f),C(a8.$$.fragment,f),C(n8.$$.fragment,f),C(l8.$$.fragment,f),C(u4.$$.fragment,f),C(i8.$$.fragment,f),C(b4.$$.fragment,f),C(d8.$$.fragment,f),C(c8.$$.fragment,f),C(m8.$$.fragment,f),C(F4.$$.fragment,f),C(g8.$$.fragment,f),C(Q4.$$.fragment,f),C(h8.$$.fragment,f),C(p8.$$.fragment,f),C(_8.$$.fragment,f),C(H4.$$.fragment,f),C(b8.$$.fragment,f),C(aE.$$.fragment,f),C(v8.$$.fragment,f),C(F8.$$.fragment,f),C(M8.$$.fragment,f),C(sE.$$.fragment,f),C(E8.$$.fragment,f),C(vE.$$.fragment,f),C(C8.$$.fragment,f),C(w8.$$.fragment,f),C(y8.$$.fragment,f),C(TE.$$.fragment,f),C(L8.$$.fragment,f),C(SE.$$.fragment,f),C(x8.$$.fragment,f),C($8.$$.fragment,f),C(S8.$$.fragment,f),C(BE.$$.fragment,f),C(R8.$$.fragment,f),C(XE.$$.fragment,f),C(B8.$$.fragment,f),C(P8.$$.fragment,f),C(q8.$$.fragment,f),C(QE.$$.fragment,f),C(N8.$$.fragment,f),C(tC.$$.fragment,f),C(j8.$$.fragment,f),C(D8.$$.fragment,f),C(O8.$$.fragment,f),C(nC.$$.fragment,f),C(V8.$$.fragment,f),C(uC.$$.fragment,f),C(X8.$$.fragment,f),C(z8.$$.fragment,f),C(W8.$$.fragment,f),C(bC.$$.fragment,f),C(H8.$$.fragment,f),C(yC.$$.fragment,f),C(U8.$$.fragment,f),C(J8.$$.fragment,f),C(K8.$$.fragment,f),C(xC.$$.fragment,f),C(Z8.$$.fragment,f),C(NC.$$.fragment,f),C(ex.$$.fragment,f),C(ox.$$.fragment,f),C(tx.$$.fragment,f),C(DC.$$.fragment,f),C(ax.$$.fragment,f),C(OC.$$.fragment,f),C(nx.$$.fragment,f),C(sx.$$.fragment,f),C(ix.$$.fragment,f),C(XC.$$.fragment,f),C(dx.$$.fragment,f),C(WC.$$.fragment,f),C(fx.$$.fragment,f),C(mx.$$.fragment,f),C(hx.$$.fragment,f),C(UC.$$.fragment,f),C(px.$$.fragment,f),C(YC.$$.fragment,f),XPe=!1},d(f){t(g),f&&t(v),f&&t(p),w(d),f&&t(of),f&&t(Kr),f&&t(qe),f&&t(Xe),f&&t(tf),w(va,f),f&&t(ze),f&&t(Ae),f&&t(Eo),f&&t(Fa),f&&t(VRe),f&&t(ii),w(_A),f&&t(XRe),f&&t(An),f&&t(zRe),w(bA,f),f&&t(QRe),f&&t(R7),f&&t(WRe),w(sf,f),f&&t(HRe),f&&t(di),w(vA),f&&t(URe),f&&t(Co),w(FA),w(EA),w(tg),w(CA),f&&t(JRe),f&&t(fi),w(wA),f&&t(YRe),f&&t(wo),w(AA),w(xA),w(Pg),w($A),f&&t(KRe),f&&t(mi),w(kA),f&&t(ZRe),f&&t(Ao),w(SA),w(PA),w(lh),w(ih),w(IA),f&&t(eBe),f&&t(gi),w(qA),f&&t(oBe),f&&t(yo),w(NA),w(GA),w(wh),w(Ah),w(OA),f&&t(rBe),f&&t(pi),w(VA),f&&t(tBe),f&&t(Lo),w(XA),w(QA),w(xh),w(WA),w(uu),f&&t(aBe),f&&t(bi),w(HA),f&&t(nBe),f&&t(xo),w(UA),w(YA),w(bu),w(KA),w(n_),f&&t(sBe),f&&t(Ti),w(ZA),f&&t(lBe),f&&t($o),w(e0),w(r0),w(l_),w(t0),w(X_),f&&t(iBe),f&&t(Ci),w(a0),f&&t(dBe),f&&t(ko),w(n0),w(l0),w(Q_),w(i0),w(x1),f&&t(cBe),f&&t(yi),w(d0),f&&t(fBe),f&&t(So),w(c0),w(m0),w(k1),w(g0),w(J1),f&&t(mBe),f&&t($i),w(h0),f&&t(gBe),f&&t(Ro),w(p0),w(_0),w(K1),w(b0),w(W9),f&&t(hBe),f&&t(Ri),w(v0),f&&t(pBe),f&&t(Bo),w(F0),w(M0),w(U9),w(E0),w(wb),f&&t(uBe),f&&t(Ii),w(C0),f&&t(_Be),f&&t(Po),w(w0),w(y0),w(yb),w(L0),w(Bb),f&&t(bBe),f&&t(ji),w(x0),f&&t(vBe),f&&t(Io),w($0),w(S0),w(Ib),w(R0),w(_2),f&&t(FBe),f&&t(Oi),w(B0),f&&t(TBe),f&&t(qo),w(P0),w(q0),w(v2),w(N0),w(s5),f&&t(MBe),f&&t(zi),w(j0),f&&t(EBe),f&&t(No),w(D0),w(O0),w(i5),w(V0),w(f5),f&&t(CBe),f&&t(Hi),w(X0),f&&t(wBe),f&&t(jo),w(z0),w(W0),w(g5),w(H0),w(A5),f&&t(ABe),f&&t(Yi),w(U0),f&&t(yBe),f&&t(Do),w(J0),w(K0),w(L5),w(Z0),w(k5),f&&t(LBe),f&&t(ed),w(ey),f&&t(xBe),f&&t(Go),w(oy),w(ty),w(R5),w(ay),w(V5),f&&t($Be),f&&t(td),w(ny),f&&t(kBe),f&&t(Oo),w(sy),w(iy),w(z5),w(dy),w(Y5),f&&t(SBe),f&&t(sd),w(cy),f&&t(RBe),f&&t(Vo),w(fy),w(gy),w(Z5),w(hy),w(dv),f&&t(BBe),f&&t(dd),w(py),f&&t(PBe),f&&t(Xo),w(uy),w(by),w(fv),w(vy),w(pv),f&&t(IBe),f&&t(md),w(Ty),f&&t(qBe),f&&t(zo),w(My),w(Cy),w(_v),w(wy),w(Ev),f&&t(NBe),f&&t(pd),w(Ay),f&&t(jBe),f&&t(Qo),w(yy),w(xy),w(wv),w($y),w($v),f&&t(DBe),f&&t(vd),w(ky),f&&t(GBe),f&&t(Wo),w(Sy),w(By),w(Sv),w(Py),w(Pv),f&&t(OBe),f&&t(Md),w(Iy),f&&t(VBe),f&&t(Ho),w(qy),w(jy),w(qv),w(Dy),w(Dv),f&&t(XBe),f&&t(wd),w(Gy),f&&t(zBe),f&&t(Uo),w(Oy),w(Xy),w(Ov),w(zy),w(Hv),f&&t(QBe),f&&t(Ld),w(Qy),f&&t(WBe),f&&t(Jo),w(Wy),w(Uy),w(Jv),w(Jy),w(Zv),f&&t(HBe),f&&t(kd),w(Yy),f&&t(UBe),f&&t(Yo),w(Ky),w(eL),w(oF),w(oL),w(zF),f&&t(JBe),f&&t(Bd),w(rL),f&&t(YBe),f&&t(Ko),w(tL),w(nL),w(WF),w(sL),w(_6),f&&t(KBe),f&&t(qd),w(lL),f&&t(ZBe),f&&t(Zo),w(iL),w(cL),w(v6),w(fL),w(S6),f&&t(ePe),f&&t(Dd),w(mL),f&&t(oPe),f&&t(er),w(gL),w(pL),w(B6),w(uL),w(q6),f&&t(rPe),f&&t(Vd),w(bL),f&&t(tPe),f&&t(or),w(vL),w(TL),w(j6),w(ML),w(sT),f&&t(aPe),f&&t(Qd),w(EL),f&&t(nPe),f&&t(rr),w(CL),w(AL),w(iT),w(yL),w(vT),f&&t(sPe),f&&t(Ud),w(LL),f&&t(lPe),f&&t(tr),w(xL),w(kL),w(TT),w(SL),w(HT),f&&t(iPe),f&&t(Kd),w(RL),f&&t(dPe),f&&t(ar),w(BL),w(IL),w(JT),w(qL),w(hM),f&&t(cPe),f&&t(oc),w(NL),f&&t(fPe),f&&t(nr),w(jL),w(GL),w(uM),w(OL),w(bM),f&&t(mPe),f&&t(ac),w(VL),f&&t(gPe),f&&t(sr),w(XL),w(QL),w(FM),w(WL),w(GM),f&&t(hPe),f&&t(lc),w(HL),f&&t(pPe),f&&t(lr),w(UL),w(YL),w(VM),w(KL),w(c4),f&&t(uPe),f&&t(cc),w(ZL),f&&t(_Pe),f&&t(ir),w(e8),w(r8),w(m4),w(t8),w(h4),f&&t(bPe),f&&t(gc),w(a8),f&&t(vPe),f&&t(dr),w(n8),w(l8),w(u4),w(i8),w(b4),f&&t(FPe),f&&t(uc),w(d8),f&&t(TPe),f&&t(cr),w(c8),w(m8),w(F4),w(g8),w(Q4),f&&t(MPe),f&&t(vc),w(h8),f&&t(EPe),f&&t(fr),w(p8),w(_8),w(H4),w(b8),w(aE),f&&t(CPe),f&&t(Mc),w(v8),f&&t(wPe),f&&t(mr),w(F8),w(M8),w(sE),w(E8),w(vE),f&&t(APe),f&&t(wc),w(C8),f&&t(yPe),f&&t(gr),w(w8),w(y8),w(TE),w(L8),w(SE),f&&t(LPe),f&&t(Lc),w(x8),f&&t(xPe),f&&t(hr),w($8),w(S8),w(BE),w(R8),w(XE),f&&t($Pe),f&&t(kc),w(B8),f&&t(kPe),f&&t(pr),w(P8),w(q8),w(QE),w(N8),w(tC),f&&t(SPe),f&&t(Bc),w(j8),f&&t(RPe),f&&t(ur),w(D8),w(O8),w(nC),w(V8),w(uC),f&&t(BPe),f&&t(qc),w(X8),f&&t(PPe),f&&t(_r),w(z8),w(W8),w(bC),w(H8),w(yC),f&&t(IPe),f&&t(Dc),w(U8),f&&t(qPe),f&&t(br),w(J8),w(K8),w(xC),w(Z8),w(NC),f&&t(NPe),f&&t(Vc),w(ex),f&&t(jPe),f&&t(vr),w(ox),w(tx),w(DC),w(ax),w(OC),f&&t(DPe),f&&t(Qc),w(nx),f&&t(GPe),f&&t(Fr),w(sx),w(ix),w(XC),w(dx),w(WC),f&&t(OPe),f&&t(Uc),w(fx),f&&t(VPe),f&&t(Tr),w(mx),w(hx),w(UC),w(px),w(YC)}}}const HCt={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function UCt(A){return Y4t(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class r3t extends W4t{constructor(g){super();H4t(this,g,UCt,WCt,U4t,{})}}export{r3t as default,HCt as metadata};
