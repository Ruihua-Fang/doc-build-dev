import{S as w4t,i as A4t,s as y4t,e as a,k as l,w as F,t as o,M as L4t,c as n,d as t,m as i,a as s,x as T,h as r,b as c,F as e,g as b,y as M,q as E,o as C,B as w,v as x4t,L as I}from"../../chunks/vendor-6b77c823.js";import{T as YRr}from"../../chunks/Tip-39098574.js";import{D as R}from"../../chunks/Docstring-1088f2fb.js";import{C as B}from"../../chunks/CodeBlock-3a8b25a8.js";import{I as ee}from"../../chunks/IconCopyLink-7a11ce68.js";import{E as P}from"../../chunks/ExampleCodeBlock-5212b321.js";function $4t(A){let g,v,p,m,u,d,h,To,oi,of,Kr,ri,ti,fA,rf,Ie,Ve,ai,Mn,mA,En,Cn,gA,ni,wn,hA,si,tf,va;return{c(){g=a("p"),v=o("If your "),p=a("code"),m=o("NewModelConfig"),u=o(" is a subclass of "),d=a("code"),h=o("PretrainedConfig"),To=o(`, make sure its
`),oi=a("code"),of=o("model_type"),Kr=o(" attribute is set to the same key you use when registering the config (here "),ri=a("code"),ti=o('"new-model"'),fA=o(")."),rf=l(),Ie=a("p"),Ve=o("Likewise, if your "),ai=a("code"),Mn=o("NewModel"),mA=o(" is a subclass of "),En=a("a"),Cn=o("PreTrainedModel"),gA=o(`, make sure its
`),ni=a("code"),wn=o("config_class"),hA=o(` attribute is set to the same class you use when registering the model (here
`),si=a("code"),tf=o("NewModelConfig"),va=o(")."),this.h()},l(Xe){g=n(Xe,"P",{});var Ae=s(g);v=r(Ae,"If your "),p=n(Ae,"CODE",{});var Ax=s(p);m=r(Ax,"NewModelConfig"),Ax.forEach(t),u=r(Ae," is a subclass of "),d=n(Ae,"CODE",{});var li=s(d);h=r(li,"PretrainedConfig"),li.forEach(t),To=r(Ae,`, make sure its
`),oi=n(Ae,"CODE",{});var yx=s(oi);of=r(yx,"model_type"),yx.forEach(t),Kr=r(Ae," attribute is set to the same key you use when registering the config (here "),ri=n(Ae,"CODE",{});var Lx=s(ri);ti=r(Lx,'"new-model"'),Lx.forEach(t),fA=r(Ae,")."),Ae.forEach(t),rf=i(Xe),Ie=n(Xe,"P",{});var Mo=s(Ie);Ve=r(Mo,"Likewise, if your "),ai=n(Mo,"CODE",{});var Fa=s(ai);Mn=r(Fa,"NewModel"),Fa.forEach(t),mA=r(Mo," is a subclass of "),En=n(Mo,"A",{href:!0});var xx=s(En);Cn=r(xx,"PreTrainedModel"),xx.forEach(t),gA=r(Mo,`, make sure its
`),ni=n(Mo,"CODE",{});var af=s(ni);wn=r(af,"config_class"),af.forEach(t),hA=r(Mo,` attribute is set to the same class you use when registering the model (here
`),si=n(Mo,"CODE",{});var $x=s(si);tf=r($x,"NewModelConfig"),$x.forEach(t),va=r(Mo,")."),Mo.forEach(t),this.h()},h(){c(En,"href","/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel")},m(Xe,Ae){b(Xe,g,Ae),e(g,v),e(g,p),e(p,m),e(g,u),e(g,d),e(d,h),e(g,To),e(g,oi),e(oi,of),e(g,Kr),e(g,ri),e(ri,ti),e(g,fA),b(Xe,rf,Ae),b(Xe,Ie,Ae),e(Ie,Ve),e(Ie,ai),e(ai,Mn),e(Ie,mA),e(Ie,En),e(En,Cn),e(Ie,gA),e(Ie,ni),e(ni,wn),e(Ie,hA),e(Ie,si),e(si,tf),e(Ie,va)},d(Xe){Xe&&t(g),Xe&&t(rf),Xe&&t(Ie)}}}function k4t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

config.unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config.unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function S4t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function R4t(A){let g,v,p,m,u;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),u=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var To=s(p);m=r(To,"use_auth_token=True"),To.forEach(t),u=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,u)},d(d){d&&t(g)}}}function B4t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function P4t(A){let g,v,p,m,u;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),u=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var To=s(p);m=r(To,"use_auth_token=True"),To.forEach(t),u=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,u)},d(d){d&&t(g)}}}function I4t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function q4t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function N4t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function j4t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function D4t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function G4t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function O4t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function V4t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function X4t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function z4t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Q4t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function W4t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function H4t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function U4t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function J4t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Y4t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function K4t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Z4t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function eEt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oEt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rEt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tEt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function aEt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nEt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sEt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lEt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iEt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dEt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cEt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fEt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mEt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gEt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hEt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pEt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uEt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _Et(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bEt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vEt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function FEt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function TEt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function MEt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function EEt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function CEt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wEt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function AEt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yEt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function LEt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xEt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $Et(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kEt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function SEt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function REt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function BEt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function PEt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function IEt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qEt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function NEt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jEt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function DEt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function GEt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function OEt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function VEt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function XEt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zEt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function QEt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function WEt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function HEt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function UEt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function JEt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function YEt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function KEt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ZEt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function eCt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oCt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rCt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tCt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function aCt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nCt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sCt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lCt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iCt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dCt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cCt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fCt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mCt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gCt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hCt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pCt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uCt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _Ct(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bCt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vCt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function FCt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function TCt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function MCt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ECt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function CCt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wCt(A){let g,v,p,m,u,d,h,To,oi,of,Kr,ri,ti,fA,rf,Ie,Ve,ai,Mn,mA,En,Cn,gA,ni,wn,hA,si,tf,va,Xe,Ae,Ax,li,yx,Lx,Mo,Fa,xx,af,$x,Gqe,PRe,ii,nf,NK,pA,Oqe,jK,Vqe,IRe,An,Xqe,DK,zqe,Qqe,GK,Wqe,Hqe,qRe,uA,NRe,kx,Uqe,jRe,sf,DRe,di,lf,OK,_A,Jqe,VK,Yqe,GRe,Eo,bA,Kqe,vA,Zqe,Sx,eNe,oNe,rNe,FA,tNe,XK,aNe,nNe,sNe,Tr,TA,lNe,zK,iNe,dNe,ci,cNe,QK,fNe,mNe,WK,gNe,hNe,pNe,y,df,HK,uNe,_Ne,Rx,bNe,vNe,FNe,cf,UK,TNe,MNe,Bx,ENe,CNe,wNe,ff,JK,ANe,yNe,Px,LNe,xNe,$Ne,mf,YK,kNe,SNe,Ix,RNe,BNe,PNe,gf,KK,INe,qNe,qx,NNe,jNe,DNe,hf,ZK,GNe,ONe,Nx,VNe,XNe,zNe,pf,eZ,QNe,WNe,jx,HNe,UNe,JNe,uf,oZ,YNe,KNe,Dx,ZNe,eje,oje,_f,rZ,rje,tje,Gx,aje,nje,sje,bf,tZ,lje,ije,Ox,dje,cje,fje,vf,aZ,mje,gje,Vx,hje,pje,uje,Ff,nZ,_je,bje,Xx,vje,Fje,Tje,Tf,sZ,Mje,Eje,zx,Cje,wje,Aje,Mf,lZ,yje,Lje,Qx,xje,$je,kje,Ef,iZ,Sje,Rje,Wx,Bje,Pje,Ije,Cf,dZ,qje,Nje,Hx,jje,Dje,Gje,wf,cZ,Oje,Vje,Ux,Xje,zje,Qje,Af,fZ,Wje,Hje,Jx,Uje,Jje,Yje,yf,mZ,Kje,Zje,Yx,eDe,oDe,rDe,Lf,gZ,tDe,aDe,Kx,nDe,sDe,lDe,xf,hZ,iDe,dDe,Zx,cDe,fDe,mDe,$f,pZ,gDe,hDe,e$,pDe,uDe,_De,kf,uZ,bDe,vDe,o$,FDe,TDe,MDe,Sf,_Z,EDe,CDe,r$,wDe,ADe,yDe,Rf,bZ,LDe,xDe,t$,$De,kDe,SDe,Bf,vZ,RDe,BDe,a$,PDe,IDe,qDe,Pf,FZ,NDe,jDe,n$,DDe,GDe,ODe,If,TZ,VDe,XDe,s$,zDe,QDe,WDe,qf,MZ,HDe,UDe,l$,JDe,YDe,KDe,Nf,EZ,ZDe,eGe,i$,oGe,rGe,tGe,jf,CZ,aGe,nGe,d$,sGe,lGe,iGe,Df,wZ,dGe,cGe,c$,fGe,mGe,gGe,Gf,AZ,hGe,pGe,f$,uGe,_Ge,bGe,Of,yZ,vGe,FGe,m$,TGe,MGe,EGe,Vf,LZ,CGe,wGe,g$,AGe,yGe,LGe,Xf,xZ,xGe,$Ge,h$,kGe,SGe,RGe,zf,$Z,BGe,PGe,p$,IGe,qGe,NGe,Qf,kZ,jGe,DGe,u$,GGe,OGe,VGe,Wf,SZ,XGe,zGe,_$,QGe,WGe,HGe,Hf,RZ,UGe,JGe,b$,YGe,KGe,ZGe,Uf,BZ,eOe,oOe,v$,rOe,tOe,aOe,Jf,PZ,nOe,sOe,F$,lOe,iOe,dOe,Yf,IZ,cOe,fOe,T$,mOe,gOe,hOe,Kf,qZ,pOe,uOe,M$,_Oe,bOe,vOe,Zf,NZ,FOe,TOe,E$,MOe,EOe,COe,em,jZ,wOe,AOe,C$,yOe,LOe,xOe,om,DZ,$Oe,kOe,w$,SOe,ROe,BOe,rm,GZ,POe,IOe,A$,qOe,NOe,jOe,tm,OZ,DOe,GOe,y$,OOe,VOe,XOe,am,VZ,zOe,QOe,L$,WOe,HOe,UOe,nm,XZ,JOe,YOe,x$,KOe,ZOe,eVe,sm,zZ,oVe,rVe,$$,tVe,aVe,nVe,lm,QZ,sVe,lVe,k$,iVe,dVe,cVe,im,WZ,fVe,mVe,S$,gVe,hVe,pVe,dm,HZ,uVe,_Ve,R$,bVe,vVe,FVe,cm,UZ,TVe,MVe,B$,EVe,CVe,wVe,fm,JZ,AVe,yVe,P$,LVe,xVe,$Ve,mm,YZ,kVe,SVe,I$,RVe,BVe,PVe,gm,KZ,IVe,qVe,q$,NVe,jVe,DVe,hm,ZZ,GVe,OVe,N$,VVe,XVe,zVe,pm,eee,QVe,WVe,j$,HVe,UVe,JVe,um,oee,YVe,KVe,D$,ZVe,eXe,oXe,_m,ree,rXe,tXe,G$,aXe,nXe,sXe,bm,tee,lXe,iXe,O$,dXe,cXe,fXe,vm,aee,mXe,gXe,V$,hXe,pXe,uXe,Fm,nee,_Xe,bXe,X$,vXe,FXe,TXe,Tm,see,MXe,EXe,z$,CXe,wXe,AXe,Mm,lee,yXe,LXe,Q$,xXe,$Xe,kXe,Em,iee,SXe,RXe,W$,BXe,PXe,IXe,Cm,dee,qXe,NXe,H$,jXe,DXe,GXe,wm,cee,OXe,VXe,U$,XXe,zXe,QXe,Am,fee,WXe,HXe,J$,UXe,JXe,YXe,ym,mee,KXe,ZXe,Y$,eze,oze,rze,Lm,gee,tze,aze,K$,nze,sze,lze,xm,hee,ize,dze,Z$,cze,fze,mze,$m,pee,gze,hze,ek,pze,uze,_ze,km,uee,bze,vze,ok,Fze,Tze,Mze,Sm,_ee,Eze,Cze,rk,wze,Aze,yze,Rm,bee,Lze,xze,tk,$ze,kze,Sze,Bm,vee,Rze,Bze,ak,Pze,Ize,qze,Pm,Fee,Nze,jze,nk,Dze,Gze,Oze,Im,Tee,Vze,Xze,sk,zze,Qze,Wze,qm,Mee,Hze,Uze,lk,Jze,Yze,Kze,Nm,Eee,Zze,eQe,ik,oQe,rQe,tQe,jm,Cee,aQe,nQe,dk,sQe,lQe,iQe,Dm,wee,dQe,cQe,ck,fQe,mQe,gQe,Gm,Aee,hQe,pQe,fk,uQe,_Qe,bQe,Om,yee,vQe,FQe,mk,TQe,MQe,EQe,Vm,Lee,CQe,wQe,gk,AQe,yQe,LQe,Xm,xee,xQe,$Qe,hk,kQe,SQe,RQe,zm,$ee,BQe,PQe,pk,IQe,qQe,NQe,Qm,kee,jQe,DQe,uk,GQe,OQe,VQe,Wm,See,XQe,zQe,_k,QQe,WQe,HQe,Hm,Ree,UQe,JQe,bk,YQe,KQe,ZQe,Um,Bee,eWe,oWe,vk,rWe,tWe,aWe,Jm,Pee,nWe,sWe,Fk,lWe,iWe,dWe,Ym,Iee,cWe,fWe,Tk,mWe,gWe,hWe,Km,qee,pWe,uWe,Mk,_We,bWe,vWe,Zm,Nee,FWe,TWe,Ek,MWe,EWe,CWe,eg,jee,wWe,AWe,Ck,yWe,LWe,xWe,og,Dee,$We,kWe,wk,SWe,RWe,BWe,rg,Gee,PWe,IWe,Ak,qWe,NWe,jWe,tg,DWe,ag,MA,GWe,Oee,OWe,ORe,fi,ng,Vee,EA,VWe,Xee,XWe,VRe,Co,CA,zWe,wA,QWe,yk,WWe,HWe,UWe,AA,JWe,zee,YWe,KWe,ZWe,Mr,yA,eHe,Qee,oHe,rHe,Ta,tHe,Wee,aHe,nHe,Hee,sHe,lHe,Uee,iHe,dHe,cHe,k,yn,Jee,fHe,mHe,Lk,gHe,hHe,xk,pHe,uHe,_He,Ln,Yee,bHe,vHe,$k,FHe,THe,kk,MHe,EHe,CHe,xn,Kee,wHe,AHe,Sk,yHe,LHe,Rk,xHe,$He,kHe,sg,Zee,SHe,RHe,Bk,BHe,PHe,IHe,$n,eoe,qHe,NHe,Pk,jHe,DHe,Ik,GHe,OHe,VHe,lg,ooe,XHe,zHe,qk,QHe,WHe,HHe,ig,roe,UHe,JHe,Nk,YHe,KHe,ZHe,dg,toe,eUe,oUe,jk,rUe,tUe,aUe,kn,aoe,nUe,sUe,Dk,lUe,iUe,Gk,dUe,cUe,fUe,Sn,noe,mUe,gUe,Ok,hUe,pUe,Vk,uUe,_Ue,bUe,Rn,soe,vUe,FUe,Xk,TUe,MUe,zk,EUe,CUe,wUe,cg,loe,AUe,yUe,Qk,LUe,xUe,$Ue,fg,ioe,kUe,SUe,Wk,RUe,BUe,PUe,Bn,doe,IUe,qUe,Hk,NUe,jUe,Uk,DUe,GUe,OUe,mg,coe,VUe,XUe,Jk,zUe,QUe,WUe,Pn,foe,HUe,UUe,Yk,JUe,YUe,Kk,KUe,ZUe,eJe,In,moe,oJe,rJe,Zk,tJe,aJe,eS,nJe,sJe,lJe,qn,goe,iJe,dJe,oS,cJe,fJe,hoe,mJe,gJe,hJe,gg,poe,pJe,uJe,rS,_Je,bJe,vJe,Nn,uoe,FJe,TJe,tS,MJe,EJe,aS,CJe,wJe,AJe,jn,_oe,yJe,LJe,nS,xJe,$Je,sS,kJe,SJe,RJe,Dn,boe,BJe,PJe,lS,IJe,qJe,iS,NJe,jJe,DJe,Gn,voe,GJe,OJe,dS,VJe,XJe,cS,zJe,QJe,WJe,On,Foe,HJe,UJe,fS,JJe,YJe,mS,KJe,ZJe,eYe,Vn,Toe,oYe,rYe,gS,tYe,aYe,hS,nYe,sYe,lYe,hg,Moe,iYe,dYe,pS,cYe,fYe,mYe,Xn,Eoe,gYe,hYe,uS,pYe,uYe,_S,_Ye,bYe,vYe,pg,Coe,FYe,TYe,bS,MYe,EYe,CYe,zn,woe,wYe,AYe,vS,yYe,LYe,FS,xYe,$Ye,kYe,Qn,Aoe,SYe,RYe,TS,BYe,PYe,MS,IYe,qYe,NYe,Wn,yoe,jYe,DYe,ES,GYe,OYe,CS,VYe,XYe,zYe,Hn,Loe,QYe,WYe,wS,HYe,UYe,AS,JYe,YYe,KYe,Un,xoe,ZYe,eKe,yS,oKe,rKe,LS,tKe,aKe,nKe,ug,$oe,sKe,lKe,xS,iKe,dKe,cKe,Jn,koe,fKe,mKe,$S,gKe,hKe,kS,pKe,uKe,_Ke,Yn,Soe,bKe,vKe,SS,FKe,TKe,RS,MKe,EKe,CKe,Kn,Roe,wKe,AKe,BS,yKe,LKe,PS,xKe,$Ke,kKe,Zn,Boe,SKe,RKe,IS,BKe,PKe,qS,IKe,qKe,NKe,es,Poe,jKe,DKe,NS,GKe,OKe,jS,VKe,XKe,zKe,os,Ioe,QKe,WKe,DS,HKe,UKe,GS,JKe,YKe,KKe,_g,qoe,ZKe,eZe,OS,oZe,rZe,tZe,rs,Noe,aZe,nZe,VS,sZe,lZe,XS,iZe,dZe,cZe,bg,joe,fZe,mZe,zS,gZe,hZe,pZe,vg,Doe,uZe,_Ze,QS,bZe,vZe,FZe,ts,Goe,TZe,MZe,WS,EZe,CZe,HS,wZe,AZe,yZe,as,Ooe,LZe,xZe,US,$Ze,kZe,JS,SZe,RZe,BZe,ns,Voe,PZe,IZe,YS,qZe,NZe,KS,jZe,DZe,GZe,Fg,Xoe,OZe,VZe,ZS,XZe,zZe,QZe,ss,zoe,WZe,HZe,eR,UZe,JZe,oR,YZe,KZe,ZZe,ls,Qoe,eeo,oeo,rR,reo,teo,tR,aeo,neo,seo,is,Woe,leo,ieo,aR,deo,ceo,nR,feo,meo,geo,ds,Hoe,heo,peo,sR,ueo,_eo,lR,beo,veo,Feo,cs,Uoe,Teo,Meo,iR,Eeo,Ceo,dR,weo,Aeo,yeo,fs,Joe,Leo,xeo,cR,$eo,keo,fR,Seo,Reo,Beo,Tg,Yoe,Peo,Ieo,mR,qeo,Neo,jeo,Mg,Koe,Deo,Geo,gR,Oeo,Veo,Xeo,Eg,Zoe,zeo,Qeo,hR,Weo,Heo,Ueo,Cg,ere,Jeo,Yeo,pR,Keo,Zeo,eoo,ms,ore,ooo,roo,uR,too,aoo,_R,noo,soo,loo,wg,rre,ioo,doo,bR,coo,foo,moo,gs,tre,goo,hoo,vR,poo,uoo,FR,_oo,boo,voo,hs,are,Foo,Too,TR,Moo,Eoo,MR,Coo,woo,Aoo,ps,nre,yoo,Loo,ER,xoo,$oo,CR,koo,Soo,Roo,us,sre,Boo,Poo,wR,Ioo,qoo,AR,Noo,joo,Doo,_s,lre,Goo,Ooo,yR,Voo,Xoo,LR,zoo,Qoo,Woo,bs,ire,Hoo,Uoo,xR,Joo,Yoo,$R,Koo,Zoo,ero,Ag,dre,oro,rro,kR,tro,aro,nro,yg,cre,sro,lro,SR,iro,dro,cro,vs,fre,fro,mro,RR,gro,hro,BR,pro,uro,_ro,Fs,mre,bro,vro,PR,Fro,Tro,IR,Mro,Ero,Cro,Ts,gre,wro,Aro,qR,yro,Lro,NR,xro,$ro,kro,Lg,hre,Sro,Rro,jR,Bro,Pro,Iro,xg,pre,qro,Nro,DR,jro,Dro,Gro,$g,ure,Oro,Vro,GR,Xro,zro,Qro,Ms,_re,Wro,Hro,OR,Uro,Jro,VR,Yro,Kro,Zro,kg,bre,eto,oto,XR,rto,tto,ato,Sg,vre,nto,sto,zR,lto,ito,dto,Es,Fre,cto,fto,QR,mto,gto,WR,hto,pto,uto,Rg,Tre,_to,bto,HR,vto,Fto,Tto,Bg,Mre,Mto,Eto,UR,Cto,wto,Ato,Cs,Ere,yto,Lto,JR,xto,$to,YR,kto,Sto,Rto,ws,Cre,Bto,Pto,KR,Ito,qto,ZR,Nto,jto,Dto,As,wre,Gto,Oto,eB,Vto,Xto,oB,zto,Qto,Wto,ys,Are,Hto,Uto,rB,Jto,Yto,tB,Kto,Zto,eao,Pg,oao,Ig,LA,rao,yre,tao,XRe,mi,qg,Lre,xA,aao,xre,nao,zRe,wo,$A,sao,kA,lao,aB,iao,dao,cao,SA,fao,$re,mao,gao,hao,ze,RA,pao,kre,uao,_ao,Ma,bao,Sre,vao,Fao,Rre,Tao,Mao,Bre,Eao,Cao,wao,ae,Ng,Pre,Aao,yao,nB,Lao,xao,$ao,jg,Ire,kao,Sao,sB,Rao,Bao,Pao,Dg,qre,Iao,qao,lB,Nao,jao,Dao,Gg,Nre,Gao,Oao,iB,Vao,Xao,zao,Og,jre,Qao,Wao,dB,Hao,Uao,Jao,Vg,Dre,Yao,Kao,cB,Zao,eno,ono,Xg,Gre,rno,tno,fB,ano,nno,sno,zg,Ore,lno,ino,mB,dno,cno,fno,Qg,Vre,mno,gno,gB,hno,pno,uno,Wg,Xre,_no,bno,hB,vno,Fno,Tno,Hg,zre,Mno,Eno,pB,Cno,wno,Ano,Ug,Qre,yno,Lno,uB,xno,$no,kno,Jg,Wre,Sno,Rno,_B,Bno,Pno,Ino,Yg,Hre,qno,Nno,bB,jno,Dno,Gno,Kg,Ure,Ono,Vno,vB,Xno,zno,Qno,Zg,Jre,Wno,Hno,FB,Uno,Jno,Yno,eh,Yre,Kno,Zno,TB,eso,oso,rso,oh,Kre,tso,aso,MB,nso,sso,lso,rh,Zre,iso,dso,EB,cso,fso,mso,th,ete,gso,hso,CB,pso,uso,_so,ah,ote,bso,vso,wB,Fso,Tso,Mso,nh,rte,Eso,Cso,AB,wso,Aso,yso,sh,tte,Lso,xso,yB,$so,kso,Sso,lh,Rso,ih,Bso,dh,BA,Pso,ate,Iso,QRe,gi,ch,nte,PA,qso,ste,Nso,WRe,Ao,IA,jso,qA,Dso,LB,Gso,Oso,Vso,NA,Xso,lte,zso,Qso,Wso,Qe,jA,Hso,ite,Uso,Jso,hi,Yso,dte,Kso,Zso,cte,elo,olo,rlo,be,fh,fte,tlo,alo,xB,nlo,slo,llo,mh,mte,ilo,dlo,$B,clo,flo,mlo,gh,gte,glo,hlo,kB,plo,ulo,_lo,hh,hte,blo,vlo,SB,Flo,Tlo,Mlo,ph,pte,Elo,Clo,RB,wlo,Alo,ylo,uh,ute,Llo,xlo,BB,$lo,klo,Slo,_h,_te,Rlo,Blo,PB,Plo,Ilo,qlo,bh,bte,Nlo,jlo,IB,Dlo,Glo,Olo,vh,vte,Vlo,Xlo,qB,zlo,Qlo,Wlo,Fh,Fte,Hlo,Ulo,NB,Jlo,Ylo,Klo,Th,Tte,Zlo,eio,jB,oio,rio,tio,Mh,Mte,aio,nio,DB,sio,lio,iio,Eh,Ete,dio,cio,GB,fio,mio,gio,Ch,Cte,hio,pio,OB,uio,_io,bio,wh,vio,Ah,Fio,yh,DA,Tio,wte,Mio,HRe,pi,Lh,Ate,GA,Eio,yte,Cio,URe,yo,OA,wio,ui,Aio,VB,yio,Lio,XB,xio,$io,kio,VA,Sio,Lte,Rio,Bio,Pio,Zr,XA,Iio,xte,qio,Nio,_i,jio,$te,Dio,Gio,zB,Oio,Vio,Xio,xh,zio,We,zA,Qio,kte,Wio,Hio,Ea,Uio,Ste,Jio,Yio,Rte,Kio,Zio,Bte,edo,odo,rdo,x,$h,Pte,tdo,ado,QB,ndo,sdo,ldo,kh,Ite,ido,ddo,WB,cdo,fdo,mdo,Sh,qte,gdo,hdo,HB,pdo,udo,_do,Rh,Nte,bdo,vdo,UB,Fdo,Tdo,Mdo,Bh,jte,Edo,Cdo,JB,wdo,Ado,ydo,Ph,Dte,Ldo,xdo,YB,$do,kdo,Sdo,Ih,Gte,Rdo,Bdo,KB,Pdo,Ido,qdo,qh,Ote,Ndo,jdo,ZB,Ddo,Gdo,Odo,Nh,Vte,Vdo,Xdo,eP,zdo,Qdo,Wdo,jh,Xte,Hdo,Udo,oP,Jdo,Ydo,Kdo,Dh,zte,Zdo,eco,rP,oco,rco,tco,Gh,Qte,aco,nco,tP,sco,lco,ico,Oh,Wte,dco,cco,aP,fco,mco,gco,Vh,Hte,hco,pco,nP,uco,_co,bco,Xh,Ute,vco,Fco,sP,Tco,Mco,Eco,zh,Jte,Cco,wco,lP,Aco,yco,Lco,Qh,Yte,xco,$co,iP,kco,Sco,Rco,Wh,Kte,Bco,Pco,dP,Ico,qco,Nco,Hh,Zte,jco,Dco,cP,Gco,Oco,Vco,Uh,eae,Xco,zco,fP,Qco,Wco,Hco,Jh,oae,Uco,Jco,mP,Yco,Kco,Zco,Yh,rae,efo,ofo,gP,rfo,tfo,afo,Kh,tae,nfo,sfo,hP,lfo,ifo,dfo,Zh,aae,cfo,ffo,pP,mfo,gfo,hfo,ep,nae,pfo,ufo,uP,_fo,bfo,vfo,op,sae,Ffo,Tfo,_P,Mfo,Efo,Cfo,rp,lae,wfo,Afo,bP,yfo,Lfo,xfo,tp,iae,$fo,kfo,vP,Sfo,Rfo,Bfo,ap,dae,Pfo,Ifo,FP,qfo,Nfo,jfo,np,cae,Dfo,Gfo,TP,Ofo,Vfo,Xfo,Ls,fae,zfo,Qfo,MP,Wfo,Hfo,EP,Ufo,Jfo,Yfo,sp,mae,Kfo,Zfo,CP,emo,omo,rmo,lp,gae,tmo,amo,wP,nmo,smo,lmo,ip,hae,imo,dmo,AP,cmo,fmo,mmo,dp,pae,gmo,hmo,yP,pmo,umo,_mo,cp,uae,bmo,vmo,LP,Fmo,Tmo,Mmo,fp,_ae,Emo,Cmo,xP,wmo,Amo,ymo,mp,bae,Lmo,xmo,$P,$mo,kmo,Smo,gp,vae,Rmo,Bmo,kP,Pmo,Imo,qmo,hp,Fae,Nmo,jmo,SP,Dmo,Gmo,Omo,pp,Tae,Vmo,Xmo,RP,zmo,Qmo,Wmo,up,Mae,Hmo,Umo,BP,Jmo,Ymo,Kmo,_p,Eae,Zmo,ego,PP,ogo,rgo,tgo,bp,Cae,ago,ngo,IP,sgo,lgo,igo,vp,wae,dgo,cgo,qP,fgo,mgo,ggo,Fp,Aae,hgo,pgo,NP,ugo,_go,bgo,Tp,yae,vgo,Fgo,jP,Tgo,Mgo,Ego,Mp,Lae,Cgo,wgo,DP,Ago,ygo,Lgo,Ep,xae,xgo,$go,GP,kgo,Sgo,Rgo,Cp,$ae,Bgo,Pgo,OP,Igo,qgo,Ngo,wp,kae,jgo,Dgo,VP,Ggo,Ogo,Vgo,Ap,Sae,Xgo,zgo,XP,Qgo,Wgo,Hgo,yp,Rae,Ugo,Jgo,zP,Ygo,Kgo,Zgo,Lp,Bae,eho,oho,QP,rho,tho,aho,xp,Pae,nho,sho,WP,lho,iho,dho,$p,Iae,cho,fho,HP,mho,gho,hho,kp,qae,pho,uho,UP,_ho,bho,vho,Sp,Nae,Fho,Tho,JP,Mho,Eho,Cho,Rp,jae,who,Aho,YP,yho,Lho,xho,Bp,Dae,$ho,kho,KP,Sho,Rho,Bho,Pp,Gae,Pho,Iho,ZP,qho,Nho,jho,Ip,Oae,Dho,Gho,eI,Oho,Vho,Xho,qp,Vae,zho,Qho,oI,Who,Hho,Uho,Np,Xae,Jho,Yho,rI,Kho,Zho,epo,jp,zae,opo,rpo,tI,tpo,apo,npo,Dp,Qae,spo,lpo,aI,ipo,dpo,cpo,Gp,Wae,fpo,mpo,nI,gpo,hpo,ppo,Op,Hae,upo,_po,sI,bpo,vpo,Fpo,Vp,Uae,Tpo,Mpo,lI,Epo,Cpo,wpo,Xp,Jae,Apo,ypo,iI,Lpo,xpo,$po,zp,Yae,kpo,Spo,dI,Rpo,Bpo,Ppo,Qp,Kae,Ipo,qpo,cI,Npo,jpo,Dpo,Wp,Zae,Gpo,Opo,fI,Vpo,Xpo,zpo,Hp,ene,Qpo,Wpo,mI,Hpo,Upo,Jpo,Up,one,Ypo,Kpo,gI,Zpo,euo,ouo,Jp,rne,ruo,tuo,hI,auo,nuo,suo,Yp,tne,luo,iuo,pI,duo,cuo,fuo,Kp,ane,muo,guo,uI,huo,puo,uuo,Zp,nne,_uo,buo,_I,vuo,Fuo,Tuo,eu,sne,Muo,Euo,bI,Cuo,wuo,Auo,ou,lne,yuo,Luo,vI,xuo,$uo,kuo,ru,ine,Suo,Ruo,FI,Buo,Puo,Iuo,tu,dne,quo,Nuo,TI,juo,Duo,Guo,au,cne,Ouo,Vuo,MI,Xuo,zuo,Quo,nu,fne,Wuo,Huo,EI,Uuo,Juo,Yuo,su,mne,Kuo,Zuo,CI,e_o,o_o,r_o,lu,gne,t_o,a_o,wI,n_o,s_o,l_o,iu,hne,i_o,d_o,AI,c_o,f_o,m_o,du,pne,g_o,h_o,yI,p_o,u_o,__o,cu,une,b_o,v_o,LI,F_o,T_o,M_o,fu,_ne,E_o,C_o,xI,w_o,A_o,y_o,mu,bne,L_o,x_o,$I,$_o,k_o,S_o,gu,vne,R_o,B_o,kI,P_o,I_o,q_o,hu,Fne,N_o,j_o,SI,D_o,G_o,O_o,pu,V_o,Tne,X_o,z_o,Mne,Q_o,W_o,uu,JRe,bi,_u,Ene,QA,H_o,Cne,U_o,YRe,Lo,WA,J_o,vi,Y_o,RI,K_o,Z_o,BI,e1o,o1o,r1o,HA,t1o,wne,a1o,n1o,s1o,et,UA,l1o,Ane,i1o,d1o,Fi,c1o,yne,f1o,m1o,PI,g1o,h1o,p1o,bu,u1o,He,JA,_1o,Lne,b1o,v1o,Ca,F1o,xne,T1o,M1o,$ne,E1o,C1o,kne,w1o,A1o,y1o,G,vu,Sne,L1o,x1o,II,$1o,k1o,S1o,Fu,Rne,R1o,B1o,qI,P1o,I1o,q1o,Tu,Bne,N1o,j1o,NI,D1o,G1o,O1o,Mu,Pne,V1o,X1o,jI,z1o,Q1o,W1o,Eu,Ine,H1o,U1o,DI,J1o,Y1o,K1o,Cu,qne,Z1o,e9o,GI,o9o,r9o,t9o,wu,Nne,a9o,n9o,OI,s9o,l9o,i9o,Au,jne,d9o,c9o,VI,f9o,m9o,g9o,yu,Dne,h9o,p9o,XI,u9o,_9o,b9o,Lu,Gne,v9o,F9o,zI,T9o,M9o,E9o,xu,One,C9o,w9o,QI,A9o,y9o,L9o,$u,Vne,x9o,$9o,WI,k9o,S9o,R9o,ku,Xne,B9o,P9o,HI,I9o,q9o,N9o,Su,zne,j9o,D9o,UI,G9o,O9o,V9o,Ru,Qne,X9o,z9o,JI,Q9o,W9o,H9o,Bu,Wne,U9o,J9o,YI,Y9o,K9o,Z9o,Pu,Hne,ebo,obo,KI,rbo,tbo,abo,Iu,Une,nbo,sbo,ZI,lbo,ibo,dbo,qu,Jne,cbo,fbo,eq,mbo,gbo,hbo,Nu,Yne,pbo,ubo,oq,_bo,bbo,vbo,ju,Kne,Fbo,Tbo,rq,Mbo,Ebo,Cbo,Du,Zne,wbo,Abo,tq,ybo,Lbo,xbo,Gu,ese,$bo,kbo,aq,Sbo,Rbo,Bbo,Ou,ose,Pbo,Ibo,nq,qbo,Nbo,jbo,Vu,rse,Dbo,Gbo,sq,Obo,Vbo,Xbo,Xu,tse,zbo,Qbo,lq,Wbo,Hbo,Ubo,zu,ase,Jbo,Ybo,iq,Kbo,Zbo,e2o,Qu,nse,o2o,r2o,dq,t2o,a2o,n2o,Wu,sse,s2o,l2o,cq,i2o,d2o,c2o,Hu,lse,f2o,m2o,fq,g2o,h2o,p2o,Uu,ise,u2o,_2o,mq,b2o,v2o,F2o,Ju,dse,T2o,M2o,gq,E2o,C2o,w2o,Yu,cse,A2o,y2o,hq,L2o,x2o,$2o,Ku,fse,k2o,S2o,pq,R2o,B2o,P2o,Zu,mse,I2o,q2o,uq,N2o,j2o,D2o,e_,gse,G2o,O2o,_q,V2o,X2o,z2o,o_,hse,Q2o,W2o,bq,H2o,U2o,J2o,r_,pse,Y2o,K2o,vq,Z2o,e5o,o5o,t_,use,r5o,t5o,Fq,a5o,n5o,s5o,a_,l5o,_se,i5o,d5o,bse,c5o,f5o,n_,KRe,Ti,s_,vse,YA,m5o,Fse,g5o,ZRe,xo,KA,h5o,Mi,p5o,Tq,u5o,_5o,Mq,b5o,v5o,F5o,ZA,T5o,Tse,M5o,E5o,C5o,ot,e0,w5o,Mse,A5o,y5o,Ei,L5o,Ese,x5o,$5o,Eq,k5o,S5o,R5o,l_,B5o,Ue,o0,P5o,Cse,I5o,q5o,wa,N5o,wse,j5o,D5o,Ase,G5o,O5o,yse,V5o,X5o,z5o,z,i_,Lse,Q5o,W5o,Cq,H5o,U5o,J5o,d_,xse,Y5o,K5o,wq,Z5o,evo,ovo,c_,$se,rvo,tvo,Aq,avo,nvo,svo,f_,kse,lvo,ivo,yq,dvo,cvo,fvo,m_,Sse,mvo,gvo,Lq,hvo,pvo,uvo,g_,Rse,_vo,bvo,xq,vvo,Fvo,Tvo,h_,Bse,Mvo,Evo,$q,Cvo,wvo,Avo,p_,Pse,yvo,Lvo,kq,xvo,$vo,kvo,u_,Ise,Svo,Rvo,Sq,Bvo,Pvo,Ivo,__,qse,qvo,Nvo,Rq,jvo,Dvo,Gvo,b_,Nse,Ovo,Vvo,Bq,Xvo,zvo,Qvo,v_,jse,Wvo,Hvo,Pq,Uvo,Jvo,Yvo,F_,Dse,Kvo,Zvo,Iq,eFo,oFo,rFo,T_,Gse,tFo,aFo,qq,nFo,sFo,lFo,M_,Ose,iFo,dFo,Nq,cFo,fFo,mFo,E_,Vse,gFo,hFo,jq,pFo,uFo,_Fo,C_,Xse,bFo,vFo,Dq,FFo,TFo,MFo,w_,zse,EFo,CFo,Gq,wFo,AFo,yFo,A_,Qse,LFo,xFo,Oq,$Fo,kFo,SFo,y_,Wse,RFo,BFo,Vq,PFo,IFo,qFo,L_,Hse,NFo,jFo,Xq,DFo,GFo,OFo,x_,Use,VFo,XFo,zq,zFo,QFo,WFo,$_,Jse,HFo,UFo,Qq,JFo,YFo,KFo,k_,Yse,ZFo,e6o,Wq,o6o,r6o,t6o,S_,Kse,a6o,n6o,Hq,s6o,l6o,i6o,R_,Zse,d6o,c6o,Uq,f6o,m6o,g6o,B_,ele,h6o,p6o,Jq,u6o,_6o,b6o,P_,ole,v6o,F6o,Yq,T6o,M6o,E6o,I_,rle,C6o,w6o,Kq,A6o,y6o,L6o,q_,tle,x6o,$6o,Zq,k6o,S6o,R6o,N_,ale,B6o,P6o,eN,I6o,q6o,N6o,j_,nle,j6o,D6o,oN,G6o,O6o,V6o,D_,sle,X6o,z6o,rN,Q6o,W6o,H6o,G_,lle,U6o,J6o,tN,Y6o,K6o,Z6o,O_,ile,eTo,oTo,aN,rTo,tTo,aTo,V_,nTo,dle,sTo,lTo,cle,iTo,dTo,X_,eBe,Ci,z_,fle,r0,cTo,mle,fTo,oBe,$o,t0,mTo,wi,gTo,nN,hTo,pTo,sN,uTo,_To,bTo,a0,vTo,gle,FTo,TTo,MTo,rt,n0,ETo,hle,CTo,wTo,Ai,ATo,ple,yTo,LTo,lN,xTo,$To,kTo,Q_,STo,Je,s0,RTo,ule,BTo,PTo,Aa,ITo,_le,qTo,NTo,ble,jTo,DTo,vle,GTo,OTo,VTo,Q,W_,Fle,XTo,zTo,iN,QTo,WTo,HTo,H_,Tle,UTo,JTo,dN,YTo,KTo,ZTo,U_,Mle,eMo,oMo,cN,rMo,tMo,aMo,J_,Ele,nMo,sMo,fN,lMo,iMo,dMo,Y_,Cle,cMo,fMo,mN,mMo,gMo,hMo,K_,wle,pMo,uMo,gN,_Mo,bMo,vMo,Z_,Ale,FMo,TMo,hN,MMo,EMo,CMo,e1,yle,wMo,AMo,pN,yMo,LMo,xMo,o1,Lle,$Mo,kMo,uN,SMo,RMo,BMo,r1,xle,PMo,IMo,_N,qMo,NMo,jMo,t1,$le,DMo,GMo,bN,OMo,VMo,XMo,a1,kle,zMo,QMo,vN,WMo,HMo,UMo,n1,Sle,JMo,YMo,FN,KMo,ZMo,e4o,s1,Rle,o4o,r4o,TN,t4o,a4o,n4o,l1,Ble,s4o,l4o,MN,i4o,d4o,c4o,i1,Ple,f4o,m4o,EN,g4o,h4o,p4o,d1,Ile,u4o,_4o,CN,b4o,v4o,F4o,c1,qle,T4o,M4o,wN,E4o,C4o,w4o,f1,Nle,A4o,y4o,AN,L4o,x4o,$4o,m1,jle,k4o,S4o,yN,R4o,B4o,P4o,g1,Dle,I4o,q4o,LN,N4o,j4o,D4o,h1,Gle,G4o,O4o,xN,V4o,X4o,z4o,p1,Ole,Q4o,W4o,$N,H4o,U4o,J4o,u1,Vle,Y4o,K4o,kN,Z4o,eEo,oEo,_1,Xle,rEo,tEo,SN,aEo,nEo,sEo,b1,zle,lEo,iEo,RN,dEo,cEo,fEo,v1,Qle,mEo,gEo,BN,hEo,pEo,uEo,F1,Wle,_Eo,bEo,PN,vEo,FEo,TEo,T1,Hle,MEo,EEo,IN,CEo,wEo,AEo,M1,Ule,yEo,LEo,qN,xEo,$Eo,kEo,E1,Jle,SEo,REo,Yle,BEo,PEo,IEo,C1,Kle,qEo,NEo,NN,jEo,DEo,GEo,w1,Zle,OEo,VEo,jN,XEo,zEo,QEo,A1,eie,WEo,HEo,DN,UEo,JEo,YEo,y1,oie,KEo,ZEo,GN,eCo,oCo,rCo,L1,tCo,rie,aCo,nCo,tie,sCo,lCo,x1,rBe,yi,$1,aie,l0,iCo,nie,dCo,tBe,ko,i0,cCo,Li,fCo,ON,mCo,gCo,VN,hCo,pCo,uCo,d0,_Co,sie,bCo,vCo,FCo,tt,c0,TCo,lie,MCo,ECo,xi,CCo,iie,wCo,ACo,XN,yCo,LCo,xCo,k1,$Co,Ye,f0,kCo,die,SCo,RCo,ya,BCo,cie,PCo,ICo,fie,qCo,NCo,mie,jCo,DCo,GCo,he,S1,gie,OCo,VCo,zN,XCo,zCo,QCo,R1,hie,WCo,HCo,QN,UCo,JCo,YCo,B1,pie,KCo,ZCo,WN,e3o,o3o,r3o,P1,uie,t3o,a3o,HN,n3o,s3o,l3o,I1,_ie,i3o,d3o,UN,c3o,f3o,m3o,q1,bie,g3o,h3o,JN,p3o,u3o,_3o,N1,vie,b3o,v3o,YN,F3o,T3o,M3o,j1,Fie,E3o,C3o,KN,w3o,A3o,y3o,D1,Tie,L3o,x3o,ZN,$3o,k3o,S3o,G1,Mie,R3o,B3o,ej,P3o,I3o,q3o,O1,Eie,N3o,j3o,oj,D3o,G3o,O3o,V1,Cie,V3o,X3o,rj,z3o,Q3o,W3o,X1,wie,H3o,U3o,tj,J3o,Y3o,K3o,z1,Aie,Z3o,ewo,aj,owo,rwo,two,Q1,yie,awo,nwo,nj,swo,lwo,iwo,W1,Lie,dwo,cwo,sj,fwo,mwo,gwo,H1,xie,hwo,pwo,lj,uwo,_wo,bwo,U1,vwo,$ie,Fwo,Two,kie,Mwo,Ewo,J1,aBe,$i,Y1,Sie,m0,Cwo,Rie,wwo,nBe,So,g0,Awo,ki,ywo,ij,Lwo,xwo,dj,$wo,kwo,Swo,h0,Rwo,Bie,Bwo,Pwo,Iwo,at,p0,qwo,Pie,Nwo,jwo,Si,Dwo,Iie,Gwo,Owo,cj,Vwo,Xwo,zwo,K1,Qwo,Ke,u0,Wwo,qie,Hwo,Uwo,La,Jwo,Nie,Ywo,Kwo,jie,Zwo,eAo,Die,oAo,rAo,tAo,q,Z1,Gie,aAo,nAo,fj,sAo,lAo,iAo,e9,Oie,dAo,cAo,mj,fAo,mAo,gAo,o9,Vie,hAo,pAo,gj,uAo,_Ao,bAo,r9,Xie,vAo,FAo,hj,TAo,MAo,EAo,t9,zie,CAo,wAo,pj,AAo,yAo,LAo,a9,Qie,xAo,$Ao,uj,kAo,SAo,RAo,n9,Wie,BAo,PAo,_j,IAo,qAo,NAo,s9,Hie,jAo,DAo,bj,GAo,OAo,VAo,l9,Uie,XAo,zAo,vj,QAo,WAo,HAo,i9,Jie,UAo,JAo,Fj,YAo,KAo,ZAo,d9,Yie,e0o,o0o,Tj,r0o,t0o,a0o,c9,Kie,n0o,s0o,Mj,l0o,i0o,d0o,f9,Zie,c0o,f0o,Ej,m0o,g0o,h0o,m9,ede,p0o,u0o,Cj,_0o,b0o,v0o,g9,ode,F0o,T0o,wj,M0o,E0o,C0o,h9,rde,w0o,A0o,Aj,y0o,L0o,x0o,p9,tde,$0o,k0o,yj,S0o,R0o,B0o,u9,ade,P0o,I0o,Lj,q0o,N0o,j0o,_9,nde,D0o,G0o,xj,O0o,V0o,X0o,b9,sde,z0o,Q0o,$j,W0o,H0o,U0o,v9,lde,J0o,Y0o,kj,K0o,Z0o,eyo,F9,ide,oyo,ryo,Sj,tyo,ayo,nyo,T9,dde,syo,lyo,Rj,iyo,dyo,cyo,M9,cde,fyo,myo,Bj,gyo,hyo,pyo,E9,fde,uyo,_yo,Pj,byo,vyo,Fyo,C9,mde,Tyo,Myo,Ij,Eyo,Cyo,wyo,w9,gde,Ayo,yyo,qj,Lyo,xyo,$yo,A9,hde,kyo,Syo,Nj,Ryo,Byo,Pyo,y9,pde,Iyo,qyo,jj,Nyo,jyo,Dyo,L9,ude,Gyo,Oyo,Dj,Vyo,Xyo,zyo,x9,_de,Qyo,Wyo,Gj,Hyo,Uyo,Jyo,$9,bde,Yyo,Kyo,Oj,Zyo,eLo,oLo,k9,vde,rLo,tLo,Vj,aLo,nLo,sLo,S9,Fde,lLo,iLo,Xj,dLo,cLo,fLo,R9,Tde,mLo,gLo,zj,hLo,pLo,uLo,B9,Mde,_Lo,bLo,Qj,vLo,FLo,TLo,P9,Ede,MLo,ELo,Wj,CLo,wLo,ALo,I9,Cde,yLo,LLo,Hj,xLo,$Lo,kLo,q9,wde,SLo,RLo,Uj,BLo,PLo,ILo,N9,Ade,qLo,NLo,Jj,jLo,DLo,GLo,j9,yde,OLo,VLo,Yj,XLo,zLo,QLo,D9,Lde,WLo,HLo,Kj,ULo,JLo,YLo,G9,xde,KLo,ZLo,Zj,e8o,o8o,r8o,O9,$de,t8o,a8o,eD,n8o,s8o,l8o,V9,kde,i8o,d8o,oD,c8o,f8o,m8o,X9,Sde,g8o,h8o,rD,p8o,u8o,_8o,z9,Rde,b8o,v8o,tD,F8o,T8o,M8o,Q9,E8o,Bde,C8o,w8o,Pde,A8o,y8o,W9,sBe,Ri,H9,Ide,_0,L8o,qde,x8o,lBe,Ro,b0,$8o,Bi,k8o,aD,S8o,R8o,nD,B8o,P8o,I8o,v0,q8o,Nde,N8o,j8o,D8o,nt,F0,G8o,jde,O8o,V8o,Pi,X8o,Dde,z8o,Q8o,sD,W8o,H8o,U8o,U9,J8o,Ze,T0,Y8o,Gde,K8o,Z8o,xa,e7o,Ode,o7o,r7o,Vde,t7o,a7o,Xde,n7o,s7o,l7o,Y,J9,zde,i7o,d7o,lD,c7o,f7o,m7o,Y9,Qde,g7o,h7o,iD,p7o,u7o,_7o,K9,Wde,b7o,v7o,dD,F7o,T7o,M7o,Z9,Hde,E7o,C7o,cD,w7o,A7o,y7o,eb,Ude,L7o,x7o,fD,$7o,k7o,S7o,ob,Jde,R7o,B7o,mD,P7o,I7o,q7o,rb,Yde,N7o,j7o,gD,D7o,G7o,O7o,tb,Kde,V7o,X7o,hD,z7o,Q7o,W7o,ab,Zde,H7o,U7o,pD,J7o,Y7o,K7o,nb,ece,Z7o,exo,uD,oxo,rxo,txo,sb,oce,axo,nxo,_D,sxo,lxo,ixo,lb,rce,dxo,cxo,bD,fxo,mxo,gxo,ib,tce,hxo,pxo,vD,uxo,_xo,bxo,db,ace,vxo,Fxo,FD,Txo,Mxo,Exo,cb,nce,Cxo,wxo,TD,Axo,yxo,Lxo,fb,sce,xxo,$xo,MD,kxo,Sxo,Rxo,mb,lce,Bxo,Pxo,ED,Ixo,qxo,Nxo,gb,ice,jxo,Dxo,CD,Gxo,Oxo,Vxo,hb,dce,Xxo,zxo,wD,Qxo,Wxo,Hxo,pb,cce,Uxo,Jxo,AD,Yxo,Kxo,Zxo,ub,fce,e$o,o$o,yD,r$o,t$o,a$o,_b,mce,n$o,s$o,LD,l$o,i$o,d$o,bb,gce,c$o,f$o,xD,m$o,g$o,h$o,vb,hce,p$o,u$o,$D,_$o,b$o,v$o,Fb,pce,F$o,T$o,kD,M$o,E$o,C$o,Tb,uce,w$o,A$o,SD,y$o,L$o,x$o,Mb,_ce,$$o,k$o,RD,S$o,R$o,B$o,Eb,bce,P$o,I$o,BD,q$o,N$o,j$o,Cb,D$o,vce,G$o,O$o,Fce,V$o,X$o,wb,iBe,Ii,Ab,Tce,M0,z$o,Mce,Q$o,dBe,Bo,E0,W$o,qi,H$o,PD,U$o,J$o,ID,Y$o,K$o,Z$o,C0,eko,Ece,oko,rko,tko,st,w0,ako,Cce,nko,sko,Ni,lko,wce,iko,dko,qD,cko,fko,mko,yb,gko,eo,A0,hko,Ace,pko,uko,$a,_ko,yce,bko,vko,Lce,Fko,Tko,xce,Mko,Eko,Cko,Ur,Lb,$ce,wko,Ako,ND,yko,Lko,xko,xb,kce,$ko,kko,jD,Sko,Rko,Bko,$b,Sce,Pko,Iko,DD,qko,Nko,jko,kb,Rce,Dko,Gko,GD,Oko,Vko,Xko,Sb,Bce,zko,Qko,OD,Wko,Hko,Uko,Rb,Jko,Pce,Yko,Kko,Ice,Zko,eSo,Bb,cBe,ji,Pb,qce,y0,oSo,Nce,rSo,fBe,Po,L0,tSo,Di,aSo,VD,nSo,sSo,XD,lSo,iSo,dSo,x0,cSo,jce,fSo,mSo,gSo,lt,$0,hSo,Dce,pSo,uSo,Gi,_So,Gce,bSo,vSo,zD,FSo,TSo,MSo,Ib,ESo,oo,k0,CSo,Oce,wSo,ASo,ka,ySo,Vce,LSo,xSo,Xce,$So,kSo,zce,SSo,RSo,BSo,U,qb,Qce,PSo,ISo,QD,qSo,NSo,jSo,Nb,Wce,DSo,GSo,WD,OSo,VSo,XSo,jb,Hce,zSo,QSo,HD,WSo,HSo,USo,Db,Uce,JSo,YSo,UD,KSo,ZSo,eRo,Gb,Jce,oRo,rRo,JD,tRo,aRo,nRo,Ob,Yce,sRo,lRo,YD,iRo,dRo,cRo,Vb,Kce,fRo,mRo,KD,gRo,hRo,pRo,Xb,Zce,uRo,_Ro,ZD,bRo,vRo,FRo,zb,efe,TRo,MRo,eG,ERo,CRo,wRo,Qb,ofe,ARo,yRo,oG,LRo,xRo,$Ro,Wb,rfe,kRo,SRo,rG,RRo,BRo,PRo,Hb,tfe,IRo,qRo,tG,NRo,jRo,DRo,Ub,afe,GRo,ORo,aG,VRo,XRo,zRo,Jb,nfe,QRo,WRo,nG,HRo,URo,JRo,Yb,sfe,YRo,KRo,sG,ZRo,eBo,oBo,Kb,lfe,rBo,tBo,lG,aBo,nBo,sBo,Zb,ife,lBo,iBo,iG,dBo,cBo,fBo,e2,dfe,mBo,gBo,dG,hBo,pBo,uBo,o2,cfe,_Bo,bBo,cG,vBo,FBo,TBo,r2,ffe,MBo,EBo,fG,CBo,wBo,ABo,t2,mfe,yBo,LBo,mG,xBo,$Bo,kBo,a2,gfe,SBo,RBo,gG,BBo,PBo,IBo,n2,hfe,qBo,NBo,hG,jBo,DBo,GBo,s2,pfe,OBo,VBo,pG,XBo,zBo,QBo,l2,ufe,WBo,HBo,uG,UBo,JBo,YBo,i2,_fe,KBo,ZBo,_G,ePo,oPo,rPo,d2,bfe,tPo,aPo,bG,nPo,sPo,lPo,c2,vfe,iPo,dPo,vG,cPo,fPo,mPo,f2,Ffe,gPo,hPo,FG,pPo,uPo,_Po,m2,Tfe,bPo,vPo,TG,FPo,TPo,MPo,g2,Mfe,EPo,CPo,MG,wPo,APo,yPo,h2,Efe,LPo,xPo,EG,$Po,kPo,SPo,p2,Cfe,RPo,BPo,CG,PPo,IPo,qPo,u2,NPo,wfe,jPo,DPo,Afe,GPo,OPo,_2,mBe,Oi,b2,yfe,S0,VPo,Lfe,XPo,gBe,Io,R0,zPo,Vi,QPo,wG,WPo,HPo,AG,UPo,JPo,YPo,B0,KPo,xfe,ZPo,eIo,oIo,it,P0,rIo,$fe,tIo,aIo,Xi,nIo,kfe,sIo,lIo,yG,iIo,dIo,cIo,v2,fIo,ro,I0,mIo,Sfe,gIo,hIo,Sa,pIo,Rfe,uIo,_Io,Bfe,bIo,vIo,Pfe,FIo,TIo,MIo,O,F2,Ife,EIo,CIo,LG,wIo,AIo,yIo,T2,qfe,LIo,xIo,xG,$Io,kIo,SIo,M2,Nfe,RIo,BIo,$G,PIo,IIo,qIo,E2,jfe,NIo,jIo,kG,DIo,GIo,OIo,C2,Dfe,VIo,XIo,SG,zIo,QIo,WIo,w2,Gfe,HIo,UIo,RG,JIo,YIo,KIo,A2,Ofe,ZIo,eqo,BG,oqo,rqo,tqo,y2,Vfe,aqo,nqo,PG,sqo,lqo,iqo,L2,Xfe,dqo,cqo,IG,fqo,mqo,gqo,x2,zfe,hqo,pqo,qG,uqo,_qo,bqo,$2,Qfe,vqo,Fqo,NG,Tqo,Mqo,Eqo,k2,Wfe,Cqo,wqo,jG,Aqo,yqo,Lqo,S2,Hfe,xqo,$qo,DG,kqo,Sqo,Rqo,R2,Ufe,Bqo,Pqo,GG,Iqo,qqo,Nqo,B2,Jfe,jqo,Dqo,OG,Gqo,Oqo,Vqo,P2,Yfe,Xqo,zqo,VG,Qqo,Wqo,Hqo,I2,Kfe,Uqo,Jqo,XG,Yqo,Kqo,Zqo,q2,Zfe,eNo,oNo,zG,rNo,tNo,aNo,N2,eme,nNo,sNo,QG,lNo,iNo,dNo,j2,ome,cNo,fNo,WG,mNo,gNo,hNo,D2,rme,pNo,uNo,HG,_No,bNo,vNo,G2,tme,FNo,TNo,UG,MNo,ENo,CNo,O2,ame,wNo,ANo,JG,yNo,LNo,xNo,V2,nme,$No,kNo,YG,SNo,RNo,BNo,X2,sme,PNo,INo,KG,qNo,NNo,jNo,z2,lme,DNo,GNo,ZG,ONo,VNo,XNo,Q2,ime,zNo,QNo,eO,WNo,HNo,UNo,W2,dme,JNo,YNo,oO,KNo,ZNo,ejo,H2,cme,ojo,rjo,rO,tjo,ajo,njo,U2,fme,sjo,ljo,tO,ijo,djo,cjo,J2,mme,fjo,mjo,aO,gjo,hjo,pjo,Y2,gme,ujo,_jo,nO,bjo,vjo,Fjo,K2,hme,Tjo,Mjo,sO,Ejo,Cjo,wjo,Z2,pme,Ajo,yjo,lO,Ljo,xjo,$jo,e5,ume,kjo,Sjo,iO,Rjo,Bjo,Pjo,o5,_me,Ijo,qjo,dO,Njo,jjo,Djo,r5,bme,Gjo,Ojo,cO,Vjo,Xjo,zjo,t5,vme,Qjo,Wjo,fO,Hjo,Ujo,Jjo,a5,Fme,Yjo,Kjo,mO,Zjo,eDo,oDo,n5,rDo,Tme,tDo,aDo,Mme,nDo,sDo,s5,hBe,zi,l5,Eme,q0,lDo,Cme,iDo,pBe,qo,N0,dDo,Qi,cDo,gO,fDo,mDo,hO,gDo,hDo,pDo,j0,uDo,wme,_Do,bDo,vDo,dt,D0,FDo,Ame,TDo,MDo,Wi,EDo,yme,CDo,wDo,pO,ADo,yDo,LDo,i5,xDo,to,G0,$Do,Lme,kDo,SDo,Ra,RDo,xme,BDo,PDo,$me,IDo,qDo,kme,NDo,jDo,DDo,Sme,d5,Rme,GDo,ODo,uO,VDo,XDo,zDo,c5,QDo,Bme,WDo,HDo,Pme,UDo,JDo,f5,uBe,Hi,m5,Ime,O0,YDo,qme,KDo,_Be,No,V0,ZDo,Ui,eGo,_O,oGo,rGo,bO,tGo,aGo,nGo,X0,sGo,Nme,lGo,iGo,dGo,ct,z0,cGo,jme,fGo,mGo,Ji,gGo,Dme,hGo,pGo,vO,uGo,_Go,bGo,g5,vGo,ao,Q0,FGo,Gme,TGo,MGo,Ba,EGo,Ome,CGo,wGo,Vme,AGo,yGo,Xme,LGo,xGo,$Go,ve,h5,zme,kGo,SGo,FO,RGo,BGo,PGo,p5,Qme,IGo,qGo,TO,NGo,jGo,DGo,u5,Wme,GGo,OGo,MO,VGo,XGo,zGo,xs,Hme,QGo,WGo,EO,HGo,UGo,CO,JGo,YGo,KGo,_5,Ume,ZGo,eOo,wO,oOo,rOo,tOo,ft,Jme,aOo,nOo,AO,sOo,lOo,yO,iOo,dOo,LO,cOo,fOo,mOo,b5,Yme,gOo,hOo,xO,pOo,uOo,_Oo,v5,Kme,bOo,vOo,$O,FOo,TOo,MOo,F5,Zme,EOo,COo,kO,wOo,AOo,yOo,T5,ege,LOo,xOo,SO,$Oo,kOo,SOo,M5,oge,ROo,BOo,RO,POo,IOo,qOo,E5,rge,NOo,jOo,BO,DOo,GOo,OOo,C5,tge,VOo,XOo,PO,zOo,QOo,WOo,w5,HOo,age,UOo,JOo,nge,YOo,KOo,A5,bBe,Yi,y5,sge,W0,ZOo,lge,eVo,vBe,jo,H0,oVo,Ki,rVo,IO,tVo,aVo,qO,nVo,sVo,lVo,U0,iVo,ige,dVo,cVo,fVo,mt,J0,mVo,dge,gVo,hVo,Zi,pVo,cge,uVo,_Vo,NO,bVo,vVo,FVo,L5,TVo,no,Y0,MVo,fge,EVo,CVo,Pa,wVo,mge,AVo,yVo,gge,LVo,xVo,hge,$Vo,kVo,SVo,pge,x5,uge,RVo,BVo,jO,PVo,IVo,qVo,$5,NVo,_ge,jVo,DVo,bge,GVo,OVo,k5,FBe,ed,S5,vge,K0,VVo,Fge,XVo,TBe,Do,Z0,zVo,od,QVo,DO,WVo,HVo,GO,UVo,JVo,YVo,ey,KVo,Tge,ZVo,eXo,oXo,gt,oy,rXo,Mge,tXo,aXo,rd,nXo,Ege,sXo,lXo,OO,iXo,dXo,cXo,R5,fXo,so,ry,mXo,Cge,gXo,hXo,Ia,pXo,wge,uXo,_Xo,Age,bXo,vXo,yge,FXo,TXo,MXo,qe,B5,Lge,EXo,CXo,VO,wXo,AXo,yXo,P5,xge,LXo,xXo,XO,$Xo,kXo,SXo,I5,$ge,RXo,BXo,zO,PXo,IXo,qXo,q5,kge,NXo,jXo,QO,DXo,GXo,OXo,N5,Sge,VXo,XXo,WO,zXo,QXo,WXo,j5,Rge,HXo,UXo,HO,JXo,YXo,KXo,D5,Bge,ZXo,ezo,UO,ozo,rzo,tzo,G5,Pge,azo,nzo,JO,szo,lzo,izo,O5,dzo,Ige,czo,fzo,qge,mzo,gzo,V5,MBe,td,X5,Nge,ty,hzo,jge,pzo,EBe,Go,ay,uzo,ad,_zo,YO,bzo,vzo,KO,Fzo,Tzo,Mzo,ny,Ezo,Dge,Czo,wzo,Azo,ht,sy,yzo,Gge,Lzo,xzo,nd,$zo,Oge,kzo,Szo,ZO,Rzo,Bzo,Pzo,z5,Izo,lo,ly,qzo,Vge,Nzo,jzo,qa,Dzo,Xge,Gzo,Ozo,zge,Vzo,Xzo,Qge,zzo,Qzo,Wzo,Na,Q5,Wge,Hzo,Uzo,eV,Jzo,Yzo,Kzo,W5,Hge,Zzo,eQo,oV,oQo,rQo,tQo,H5,Uge,aQo,nQo,rV,sQo,lQo,iQo,U5,Jge,dQo,cQo,tV,fQo,mQo,gQo,J5,hQo,Yge,pQo,uQo,Kge,_Qo,bQo,Y5,CBe,sd,K5,Zge,iy,vQo,ehe,FQo,wBe,Oo,dy,TQo,ld,MQo,aV,EQo,CQo,nV,wQo,AQo,yQo,cy,LQo,ohe,xQo,$Qo,kQo,pt,fy,SQo,rhe,RQo,BQo,id,PQo,the,IQo,qQo,sV,NQo,jQo,DQo,Z5,GQo,io,my,OQo,ahe,VQo,XQo,ja,zQo,nhe,QQo,WQo,she,HQo,UQo,lhe,JQo,YQo,KQo,Ne,ev,ihe,ZQo,eWo,lV,oWo,rWo,tWo,ov,dhe,aWo,nWo,iV,sWo,lWo,iWo,rv,che,dWo,cWo,dV,fWo,mWo,gWo,tv,fhe,hWo,pWo,cV,uWo,_Wo,bWo,av,mhe,vWo,FWo,fV,TWo,MWo,EWo,nv,ghe,CWo,wWo,mV,AWo,yWo,LWo,sv,hhe,xWo,$Wo,gV,kWo,SWo,RWo,lv,phe,BWo,PWo,hV,IWo,qWo,NWo,iv,jWo,uhe,DWo,GWo,_he,OWo,VWo,dv,ABe,dd,cv,bhe,gy,XWo,vhe,zWo,yBe,Vo,hy,QWo,cd,WWo,pV,HWo,UWo,uV,JWo,YWo,KWo,py,ZWo,Fhe,eHo,oHo,rHo,ut,uy,tHo,The,aHo,nHo,fd,sHo,Mhe,lHo,iHo,_V,dHo,cHo,fHo,fv,mHo,co,_y,gHo,Ehe,hHo,pHo,Da,uHo,Che,_Ho,bHo,whe,vHo,FHo,Ahe,THo,MHo,EHo,by,mv,yhe,CHo,wHo,bV,AHo,yHo,LHo,gv,Lhe,xHo,$Ho,vV,kHo,SHo,RHo,hv,BHo,xhe,PHo,IHo,$he,qHo,NHo,pv,LBe,md,uv,khe,vy,jHo,She,DHo,xBe,Xo,Fy,GHo,gd,OHo,FV,VHo,XHo,TV,zHo,QHo,WHo,Ty,HHo,Rhe,UHo,JHo,YHo,_t,My,KHo,Bhe,ZHo,eUo,hd,oUo,Phe,rUo,tUo,MV,aUo,nUo,sUo,_v,lUo,fo,Ey,iUo,Ihe,dUo,cUo,Ga,fUo,qhe,mUo,gUo,Nhe,hUo,pUo,jhe,uUo,_Uo,bUo,Oa,bv,Dhe,vUo,FUo,EV,TUo,MUo,EUo,vv,Ghe,CUo,wUo,CV,AUo,yUo,LUo,Fv,Ohe,xUo,$Uo,wV,kUo,SUo,RUo,Tv,Vhe,BUo,PUo,AV,IUo,qUo,NUo,Mv,jUo,Xhe,DUo,GUo,zhe,OUo,VUo,Ev,$Be,pd,Cv,Qhe,Cy,XUo,Whe,zUo,kBe,zo,wy,QUo,ud,WUo,yV,HUo,UUo,LV,JUo,YUo,KUo,Ay,ZUo,Hhe,eJo,oJo,rJo,bt,yy,tJo,Uhe,aJo,nJo,_d,sJo,Jhe,lJo,iJo,xV,dJo,cJo,fJo,wv,mJo,mo,Ly,gJo,Yhe,hJo,pJo,Va,uJo,Khe,_Jo,bJo,Zhe,vJo,FJo,epe,TJo,MJo,EJo,bd,Av,ope,CJo,wJo,$V,AJo,yJo,LJo,yv,rpe,xJo,$Jo,kV,kJo,SJo,RJo,Lv,tpe,BJo,PJo,SV,IJo,qJo,NJo,xv,jJo,ape,DJo,GJo,npe,OJo,VJo,$v,SBe,vd,kv,spe,xy,XJo,lpe,zJo,RBe,Qo,$y,QJo,Fd,WJo,RV,HJo,UJo,BV,JJo,YJo,KJo,ky,ZJo,ipe,eYo,oYo,rYo,vt,Sy,tYo,dpe,aYo,nYo,Td,sYo,cpe,lYo,iYo,PV,dYo,cYo,fYo,Sv,mYo,go,Ry,gYo,fpe,hYo,pYo,Xa,uYo,mpe,_Yo,bYo,gpe,vYo,FYo,hpe,TYo,MYo,EYo,ppe,Rv,upe,CYo,wYo,IV,AYo,yYo,LYo,Bv,xYo,_pe,$Yo,kYo,bpe,SYo,RYo,Pv,BBe,Md,Iv,vpe,By,BYo,Fpe,PYo,PBe,Wo,Py,IYo,Ed,qYo,qV,NYo,jYo,NV,DYo,GYo,OYo,Iy,VYo,Tpe,XYo,zYo,QYo,Ft,qy,WYo,Mpe,HYo,UYo,Cd,JYo,Epe,YYo,KYo,jV,ZYo,eKo,oKo,qv,rKo,ho,Ny,tKo,Cpe,aKo,nKo,za,sKo,wpe,lKo,iKo,Ape,dKo,cKo,ype,fKo,mKo,gKo,Lpe,Nv,xpe,hKo,pKo,DV,uKo,_Ko,bKo,jv,vKo,$pe,FKo,TKo,kpe,MKo,EKo,Dv,IBe,wd,Gv,Spe,jy,CKo,Rpe,wKo,qBe,Ho,Dy,AKo,Ad,yKo,GV,LKo,xKo,OV,$Ko,kKo,SKo,Gy,RKo,Bpe,BKo,PKo,IKo,Tt,Oy,qKo,Ppe,NKo,jKo,yd,DKo,Ipe,GKo,OKo,VV,VKo,XKo,zKo,Ov,QKo,po,Vy,WKo,qpe,HKo,UKo,Qa,JKo,Npe,YKo,KKo,jpe,ZKo,eZo,Dpe,oZo,rZo,tZo,Wa,Vv,Gpe,aZo,nZo,XV,sZo,lZo,iZo,Xv,Ope,dZo,cZo,zV,fZo,mZo,gZo,zv,Vpe,hZo,pZo,QV,uZo,_Zo,bZo,Qv,Xpe,vZo,FZo,WV,TZo,MZo,EZo,Wv,CZo,zpe,wZo,AZo,Qpe,yZo,LZo,Hv,NBe,Ld,Uv,Wpe,Xy,xZo,Hpe,$Zo,jBe,Uo,zy,kZo,xd,SZo,HV,RZo,BZo,UV,PZo,IZo,qZo,Qy,NZo,Upe,jZo,DZo,GZo,Mt,Wy,OZo,Jpe,VZo,XZo,$d,zZo,Ype,QZo,WZo,JV,HZo,UZo,JZo,Jv,YZo,uo,Hy,KZo,Kpe,ZZo,eer,Ha,oer,Zpe,rer,ter,eue,aer,ner,oue,ser,ler,ier,rue,Yv,tue,der,cer,YV,fer,mer,ger,Kv,her,aue,per,uer,nue,_er,ber,Zv,DBe,kd,eF,sue,Uy,ver,lue,Fer,GBe,Jo,Jy,Ter,Sd,Mer,KV,Eer,Cer,ZV,wer,Aer,yer,Yy,Ler,iue,xer,$er,ker,Et,Ky,Ser,due,Rer,Ber,Rd,Per,cue,Ier,qer,eX,Ner,jer,Der,oF,Ger,Er,Zy,Oer,fue,Ver,Xer,Ua,zer,mue,Qer,Wer,gue,Her,Uer,hue,Jer,Yer,Ker,j,rF,pue,Zer,eor,oX,oor,ror,tor,tF,uue,aor,nor,rX,sor,lor,ior,aF,_ue,dor,cor,tX,mor,gor,hor,nF,bue,por,uor,aX,_or,bor,vor,sF,vue,For,Tor,nX,Mor,Eor,Cor,lF,Fue,wor,Aor,sX,yor,Lor,xor,iF,Tue,$or,kor,lX,Sor,Ror,Bor,dF,Mue,Por,Ior,iX,qor,Nor,jor,cF,Eue,Dor,Gor,dX,Oor,Vor,Xor,fF,Cue,zor,Qor,cX,Wor,Hor,Uor,mF,wue,Jor,Yor,fX,Kor,Zor,err,gF,Aue,orr,rrr,mX,trr,arr,nrr,hF,yue,srr,lrr,gX,irr,drr,crr,pF,Lue,frr,mrr,hX,grr,hrr,prr,uF,xue,urr,_rr,pX,brr,vrr,Frr,_F,$ue,Trr,Mrr,uX,Err,Crr,wrr,$s,kue,Arr,yrr,_X,Lrr,xrr,bX,$rr,krr,Srr,bF,Sue,Rrr,Brr,vX,Prr,Irr,qrr,vF,Rue,Nrr,jrr,FX,Drr,Grr,Orr,FF,Bue,Vrr,Xrr,TX,zrr,Qrr,Wrr,TF,Pue,Hrr,Urr,MX,Jrr,Yrr,Krr,MF,Iue,Zrr,etr,EX,otr,rtr,ttr,EF,que,atr,ntr,CX,str,ltr,itr,CF,Nue,dtr,ctr,wX,ftr,mtr,gtr,wF,jue,htr,ptr,AX,utr,_tr,btr,AF,Due,vtr,Ftr,yX,Ttr,Mtr,Etr,yF,Gue,Ctr,wtr,LX,Atr,ytr,Ltr,LF,Oue,xtr,$tr,xX,ktr,Str,Rtr,xF,Vue,Btr,Ptr,$X,Itr,qtr,Ntr,$F,Xue,jtr,Dtr,kX,Gtr,Otr,Vtr,kF,zue,Xtr,ztr,SX,Qtr,Wtr,Htr,SF,Que,Utr,Jtr,RX,Ytr,Ktr,Ztr,RF,Wue,ear,oar,BX,rar,tar,aar,BF,Hue,nar,sar,PX,lar,iar,dar,PF,Uue,car,far,IX,mar,gar,har,IF,Jue,par,uar,qX,_ar,bar,Far,qF,Yue,Tar,Mar,NX,Ear,Car,war,NF,Kue,Aar,yar,jX,Lar,xar,$ar,jF,Zue,kar,Sar,DX,Rar,Bar,Par,DF,e_e,Iar,qar,GX,Nar,jar,Dar,GF,o_e,Gar,Oar,OX,Var,Xar,zar,OF,r_e,Qar,War,VX,Har,Uar,Jar,VF,t_e,Yar,Kar,XX,Zar,enr,onr,XF,a_e,rnr,tnr,zX,anr,nnr,snr,zF,OBe,Bd,QF,n_e,eL,lnr,s_e,inr,VBe,Yo,oL,dnr,Pd,cnr,QX,fnr,mnr,WX,gnr,hnr,pnr,rL,unr,l_e,_nr,bnr,vnr,Ct,tL,Fnr,i_e,Tnr,Mnr,Id,Enr,d_e,Cnr,wnr,HX,Anr,ynr,Lnr,WF,xnr,Cr,aL,$nr,c_e,knr,Snr,Ja,Rnr,f_e,Bnr,Pnr,m_e,Inr,qnr,g_e,Nnr,jnr,Dnr,ne,HF,h_e,Gnr,Onr,UX,Vnr,Xnr,znr,UF,p_e,Qnr,Wnr,JX,Hnr,Unr,Jnr,JF,u_e,Ynr,Knr,YX,Znr,esr,osr,YF,__e,rsr,tsr,KX,asr,nsr,ssr,KF,b_e,lsr,isr,ZX,dsr,csr,fsr,ZF,v_e,msr,gsr,ez,hsr,psr,usr,e6,F_e,_sr,bsr,oz,vsr,Fsr,Tsr,o6,T_e,Msr,Esr,rz,Csr,wsr,Asr,r6,M_e,ysr,Lsr,tz,xsr,$sr,ksr,t6,E_e,Ssr,Rsr,az,Bsr,Psr,Isr,a6,C_e,qsr,Nsr,nz,jsr,Dsr,Gsr,n6,w_e,Osr,Vsr,sz,Xsr,zsr,Qsr,s6,A_e,Wsr,Hsr,lz,Usr,Jsr,Ysr,l6,y_e,Ksr,Zsr,iz,elr,olr,rlr,i6,L_e,tlr,alr,dz,nlr,slr,llr,d6,x_e,ilr,dlr,cz,clr,flr,mlr,c6,$_e,glr,hlr,fz,plr,ulr,_lr,f6,k_e,blr,vlr,mz,Flr,Tlr,Mlr,m6,S_e,Elr,Clr,gz,wlr,Alr,ylr,g6,R_e,Llr,xlr,hz,$lr,klr,Slr,h6,B_e,Rlr,Blr,pz,Plr,Ilr,qlr,p6,P_e,Nlr,jlr,uz,Dlr,Glr,Olr,u6,I_e,Vlr,Xlr,_z,zlr,Qlr,Wlr,_6,XBe,qd,b6,q_e,nL,Hlr,N_e,Ulr,zBe,Ko,sL,Jlr,Nd,Ylr,bz,Klr,Zlr,vz,eir,oir,rir,lL,tir,j_e,air,nir,sir,wt,iL,lir,D_e,iir,dir,jd,cir,G_e,fir,mir,Fz,gir,hir,pir,v6,uir,wr,dL,_ir,O_e,bir,vir,Ya,Fir,V_e,Tir,Mir,X_e,Eir,Cir,z_e,wir,Air,yir,Te,F6,Q_e,Lir,xir,Tz,$ir,kir,Sir,T6,W_e,Rir,Bir,Mz,Pir,Iir,qir,M6,H_e,Nir,jir,Ez,Dir,Gir,Oir,E6,U_e,Vir,Xir,Cz,zir,Qir,Wir,C6,J_e,Hir,Uir,wz,Jir,Yir,Kir,w6,Y_e,Zir,edr,Az,odr,rdr,tdr,A6,K_e,adr,ndr,yz,sdr,ldr,idr,y6,Z_e,ddr,cdr,Lz,fdr,mdr,gdr,L6,e1e,hdr,pdr,xz,udr,_dr,bdr,x6,o1e,vdr,Fdr,$z,Tdr,Mdr,Edr,$6,r1e,Cdr,wdr,kz,Adr,ydr,Ldr,k6,t1e,xdr,$dr,Sz,kdr,Sdr,Rdr,S6,QBe,Dd,R6,a1e,cL,Bdr,n1e,Pdr,WBe,Zo,fL,Idr,Gd,qdr,Rz,Ndr,jdr,Bz,Ddr,Gdr,Odr,mL,Vdr,s1e,Xdr,zdr,Qdr,At,gL,Wdr,l1e,Hdr,Udr,Od,Jdr,i1e,Ydr,Kdr,Pz,Zdr,ecr,ocr,B6,rcr,Ar,hL,tcr,d1e,acr,ncr,Ka,scr,c1e,lcr,icr,f1e,dcr,ccr,m1e,fcr,mcr,gcr,pL,P6,g1e,hcr,pcr,Iz,ucr,_cr,bcr,I6,h1e,vcr,Fcr,qz,Tcr,Mcr,Ecr,q6,HBe,Vd,N6,p1e,uL,Ccr,u1e,wcr,UBe,er,_L,Acr,Xd,ycr,Nz,Lcr,xcr,jz,$cr,kcr,Scr,bL,Rcr,_1e,Bcr,Pcr,Icr,yt,vL,qcr,b1e,Ncr,jcr,zd,Dcr,v1e,Gcr,Ocr,Dz,Vcr,Xcr,zcr,j6,Qcr,yr,FL,Wcr,F1e,Hcr,Ucr,Za,Jcr,T1e,Ycr,Kcr,M1e,Zcr,efr,E1e,ofr,rfr,tfr,ie,D6,C1e,afr,nfr,Gz,sfr,lfr,ifr,G6,w1e,dfr,cfr,Oz,ffr,mfr,gfr,O6,A1e,hfr,pfr,Vz,ufr,_fr,bfr,V6,y1e,vfr,Ffr,Xz,Tfr,Mfr,Efr,X6,L1e,Cfr,wfr,zz,Afr,yfr,Lfr,z6,x1e,xfr,$fr,Qz,kfr,Sfr,Rfr,Q6,$1e,Bfr,Pfr,Wz,Ifr,qfr,Nfr,W6,k1e,jfr,Dfr,Hz,Gfr,Ofr,Vfr,H6,S1e,Xfr,zfr,Uz,Qfr,Wfr,Hfr,U6,R1e,Ufr,Jfr,Jz,Yfr,Kfr,Zfr,J6,B1e,emr,omr,Yz,rmr,tmr,amr,Y6,P1e,nmr,smr,Kz,lmr,imr,dmr,K6,I1e,cmr,fmr,Zz,mmr,gmr,hmr,Z6,q1e,pmr,umr,eQ,_mr,bmr,vmr,eT,N1e,Fmr,Tmr,oQ,Mmr,Emr,Cmr,oT,j1e,wmr,Amr,rQ,ymr,Lmr,xmr,rT,D1e,$mr,kmr,tQ,Smr,Rmr,Bmr,tT,G1e,Pmr,Imr,aQ,qmr,Nmr,jmr,aT,O1e,Dmr,Gmr,nQ,Omr,Vmr,Xmr,nT,V1e,zmr,Qmr,sQ,Wmr,Hmr,Umr,sT,JBe,Qd,lT,X1e,TL,Jmr,z1e,Ymr,YBe,or,ML,Kmr,Wd,Zmr,lQ,egr,ogr,iQ,rgr,tgr,agr,EL,ngr,Q1e,sgr,lgr,igr,Lt,CL,dgr,W1e,cgr,fgr,Hd,mgr,H1e,ggr,hgr,dQ,pgr,ugr,_gr,iT,bgr,Lr,wL,vgr,U1e,Fgr,Tgr,en,Mgr,J1e,Egr,Cgr,Y1e,wgr,Agr,K1e,ygr,Lgr,xgr,ye,dT,Z1e,$gr,kgr,cQ,Sgr,Rgr,Bgr,cT,e9e,Pgr,Igr,fQ,qgr,Ngr,jgr,fT,o9e,Dgr,Ggr,mQ,Ogr,Vgr,Xgr,mT,r9e,zgr,Qgr,gQ,Wgr,Hgr,Ugr,gT,t9e,Jgr,Ygr,hQ,Kgr,Zgr,ehr,hT,a9e,ohr,rhr,pQ,thr,ahr,nhr,pT,n9e,shr,lhr,uQ,ihr,dhr,chr,uT,s9e,fhr,mhr,_Q,ghr,hhr,phr,_T,l9e,uhr,_hr,bQ,bhr,vhr,Fhr,bT,i9e,Thr,Mhr,vQ,Ehr,Chr,whr,vT,KBe,Ud,FT,d9e,AL,Ahr,c9e,yhr,ZBe,rr,yL,Lhr,Jd,xhr,FQ,$hr,khr,TQ,Shr,Rhr,Bhr,LL,Phr,f9e,Ihr,qhr,Nhr,xt,xL,jhr,m9e,Dhr,Ghr,Yd,Ohr,g9e,Vhr,Xhr,MQ,zhr,Qhr,Whr,TT,Hhr,xr,$L,Uhr,h9e,Jhr,Yhr,on,Khr,p9e,Zhr,epr,u9e,opr,rpr,_9e,tpr,apr,npr,Z,MT,b9e,spr,lpr,EQ,ipr,dpr,cpr,ET,v9e,fpr,mpr,CQ,gpr,hpr,ppr,CT,F9e,upr,_pr,wQ,bpr,vpr,Fpr,wT,T9e,Tpr,Mpr,AQ,Epr,Cpr,wpr,AT,M9e,Apr,ypr,yQ,Lpr,xpr,$pr,yT,E9e,kpr,Spr,LQ,Rpr,Bpr,Ppr,LT,C9e,Ipr,qpr,xQ,Npr,jpr,Dpr,xT,w9e,Gpr,Opr,$Q,Vpr,Xpr,zpr,$T,A9e,Qpr,Wpr,kQ,Hpr,Upr,Jpr,kT,y9e,Ypr,Kpr,SQ,Zpr,eur,our,ST,L9e,rur,tur,RQ,aur,nur,sur,RT,x9e,lur,iur,BQ,dur,cur,fur,BT,$9e,mur,gur,PQ,hur,pur,uur,PT,k9e,_ur,bur,IQ,vur,Fur,Tur,IT,S9e,Mur,Eur,qQ,Cur,wur,Aur,qT,R9e,yur,Lur,NQ,xur,$ur,kur,NT,B9e,Sur,Rur,jQ,Bur,Pur,Iur,jT,P9e,qur,Nur,DQ,jur,Dur,Gur,DT,I9e,Our,Vur,GQ,Xur,zur,Qur,GT,q9e,Wur,Hur,OQ,Uur,Jur,Yur,OT,N9e,Kur,Zur,VQ,e_r,o_r,r_r,VT,j9e,t_r,a_r,XQ,n_r,s_r,l_r,XT,D9e,i_r,d_r,zQ,c_r,f_r,m_r,zT,G9e,g_r,h_r,QQ,p_r,u_r,__r,QT,O9e,b_r,v_r,WQ,F_r,T_r,M_r,WT,V9e,E_r,C_r,HQ,w_r,A_r,y_r,HT,ePe,Kd,UT,X9e,kL,L_r,z9e,x_r,oPe,tr,SL,$_r,Zd,k_r,UQ,S_r,R_r,JQ,B_r,P_r,I_r,RL,q_r,Q9e,N_r,j_r,D_r,$t,BL,G_r,W9e,O_r,V_r,ec,X_r,H9e,z_r,Q_r,YQ,W_r,H_r,U_r,JT,J_r,$r,PL,Y_r,U9e,K_r,Z_r,rn,e1r,J9e,o1r,r1r,Y9e,t1r,a1r,K9e,n1r,s1r,l1r,pe,YT,Z9e,i1r,d1r,KQ,c1r,f1r,m1r,KT,ebe,g1r,h1r,ZQ,p1r,u1r,_1r,ZT,obe,b1r,v1r,eW,F1r,T1r,M1r,eM,rbe,E1r,C1r,oW,w1r,A1r,y1r,oM,tbe,L1r,x1r,rW,$1r,k1r,S1r,rM,abe,R1r,B1r,tW,P1r,I1r,q1r,tM,nbe,N1r,j1r,aW,D1r,G1r,O1r,aM,sbe,V1r,X1r,nW,z1r,Q1r,W1r,nM,lbe,H1r,U1r,sW,J1r,Y1r,K1r,sM,ibe,Z1r,e9r,lW,o9r,r9r,t9r,lM,dbe,a9r,n9r,iW,s9r,l9r,i9r,iM,cbe,d9r,c9r,dW,f9r,m9r,g9r,dM,fbe,h9r,p9r,cW,u9r,_9r,b9r,cM,mbe,v9r,F9r,fW,T9r,M9r,E9r,fM,gbe,C9r,w9r,mW,A9r,y9r,L9r,mM,hbe,x9r,$9r,gW,k9r,S9r,R9r,gM,pbe,B9r,P9r,hW,I9r,q9r,N9r,hM,rPe,oc,pM,ube,IL,j9r,_be,D9r,tPe,ar,qL,G9r,rc,O9r,pW,V9r,X9r,uW,z9r,Q9r,W9r,NL,H9r,bbe,U9r,J9r,Y9r,kt,jL,K9r,vbe,Z9r,ebr,tc,obr,Fbe,rbr,tbr,_W,abr,nbr,sbr,uM,lbr,kr,DL,ibr,Tbe,dbr,cbr,tn,fbr,Mbe,mbr,gbr,Ebe,hbr,pbr,Cbe,ubr,_br,bbr,wbe,_M,Abe,vbr,Fbr,bW,Tbr,Mbr,Ebr,bM,aPe,ac,vM,ybe,GL,Cbr,Lbe,wbr,nPe,nr,OL,Abr,nc,ybr,vW,Lbr,xbr,FW,$br,kbr,Sbr,VL,Rbr,xbe,Bbr,Pbr,Ibr,St,XL,qbr,$be,Nbr,jbr,sc,Dbr,kbe,Gbr,Obr,TW,Vbr,Xbr,zbr,FM,Qbr,Sr,zL,Wbr,Sbe,Hbr,Ubr,an,Jbr,Rbe,Ybr,Kbr,Bbe,Zbr,e2r,Pbe,o2r,r2r,t2r,de,TM,Ibe,a2r,n2r,MW,s2r,l2r,i2r,MM,qbe,d2r,c2r,EW,f2r,m2r,g2r,EM,Nbe,h2r,p2r,CW,u2r,_2r,b2r,CM,jbe,v2r,F2r,wW,T2r,M2r,E2r,wM,Dbe,C2r,w2r,AW,A2r,y2r,L2r,AM,Gbe,x2r,$2r,yW,k2r,S2r,R2r,yM,Obe,B2r,P2r,LW,I2r,q2r,N2r,LM,Vbe,j2r,D2r,xW,G2r,O2r,V2r,xM,Xbe,X2r,z2r,$W,Q2r,W2r,H2r,$M,zbe,U2r,J2r,kW,Y2r,K2r,Z2r,kM,Qbe,e5r,o5r,SW,r5r,t5r,a5r,SM,Wbe,n5r,s5r,RW,l5r,i5r,d5r,RM,Hbe,c5r,f5r,BW,m5r,g5r,h5r,BM,Ube,p5r,u5r,PW,_5r,b5r,v5r,PM,Jbe,F5r,T5r,IW,M5r,E5r,C5r,IM,Ybe,w5r,A5r,qW,y5r,L5r,x5r,qM,Kbe,$5r,k5r,NW,S5r,R5r,B5r,NM,Zbe,P5r,I5r,jW,q5r,N5r,j5r,jM,e2e,D5r,G5r,DW,O5r,V5r,X5r,DM,o2e,z5r,Q5r,GW,W5r,H5r,U5r,GM,sPe,lc,OM,r2e,QL,J5r,t2e,Y5r,lPe,sr,WL,K5r,ic,Z5r,OW,evr,ovr,VW,rvr,tvr,avr,HL,nvr,a2e,svr,lvr,ivr,Rt,UL,dvr,n2e,cvr,fvr,dc,mvr,s2e,gvr,hvr,XW,pvr,uvr,_vr,VM,bvr,Rr,JL,vvr,l2e,Fvr,Tvr,nn,Mvr,i2e,Evr,Cvr,d2e,wvr,Avr,c2e,yvr,Lvr,xvr,ce,XM,f2e,$vr,kvr,zW,Svr,Rvr,Bvr,zM,m2e,Pvr,Ivr,QW,qvr,Nvr,jvr,QM,g2e,Dvr,Gvr,WW,Ovr,Vvr,Xvr,WM,h2e,zvr,Qvr,HW,Wvr,Hvr,Uvr,HM,p2e,Jvr,Yvr,UW,Kvr,Zvr,eFr,UM,u2e,oFr,rFr,JW,tFr,aFr,nFr,JM,_2e,sFr,lFr,YW,iFr,dFr,cFr,YM,b2e,fFr,mFr,KW,gFr,hFr,pFr,KM,v2e,uFr,_Fr,ZW,bFr,vFr,FFr,ZM,F2e,TFr,MFr,eH,EFr,CFr,wFr,e4,T2e,AFr,yFr,oH,LFr,xFr,$Fr,o4,M2e,kFr,SFr,rH,RFr,BFr,PFr,r4,E2e,IFr,qFr,tH,NFr,jFr,DFr,t4,C2e,GFr,OFr,aH,VFr,XFr,zFr,a4,w2e,QFr,WFr,nH,HFr,UFr,JFr,n4,A2e,YFr,KFr,sH,ZFr,e6r,o6r,s4,y2e,r6r,t6r,lH,a6r,n6r,s6r,l4,L2e,l6r,i6r,iH,d6r,c6r,f6r,i4,x2e,m6r,g6r,dH,h6r,p6r,u6r,d4,$2e,_6r,b6r,cH,v6r,F6r,T6r,c4,iPe,cc,f4,k2e,YL,M6r,S2e,E6r,dPe,lr,KL,C6r,fc,w6r,fH,A6r,y6r,mH,L6r,x6r,$6r,ZL,k6r,R2e,S6r,R6r,B6r,Bt,e8,P6r,B2e,I6r,q6r,mc,N6r,P2e,j6r,D6r,gH,G6r,O6r,V6r,m4,X6r,Br,o8,z6r,I2e,Q6r,W6r,sn,H6r,q2e,U6r,J6r,N2e,Y6r,K6r,j2e,Z6r,eTr,oTr,D2e,g4,G2e,rTr,tTr,hH,aTr,nTr,sTr,h4,cPe,gc,p4,O2e,r8,lTr,V2e,iTr,fPe,ir,t8,dTr,hc,cTr,pH,fTr,mTr,uH,gTr,hTr,pTr,a8,uTr,X2e,_Tr,bTr,vTr,Pt,n8,FTr,z2e,TTr,MTr,pc,ETr,Q2e,CTr,wTr,_H,ATr,yTr,LTr,u4,xTr,Pr,s8,$Tr,W2e,kTr,STr,ln,RTr,H2e,BTr,PTr,U2e,ITr,qTr,J2e,NTr,jTr,DTr,Y2e,_4,K2e,GTr,OTr,bH,VTr,XTr,zTr,b4,mPe,uc,v4,Z2e,l8,QTr,e5e,WTr,gPe,dr,i8,HTr,_c,UTr,vH,JTr,YTr,FH,KTr,ZTr,eMr,d8,oMr,o5e,rMr,tMr,aMr,It,c8,nMr,r5e,sMr,lMr,bc,iMr,t5e,dMr,cMr,TH,fMr,mMr,gMr,F4,hMr,Ir,f8,pMr,a5e,uMr,_Mr,dn,bMr,n5e,vMr,FMr,s5e,TMr,MMr,l5e,EMr,CMr,wMr,oe,T4,i5e,AMr,yMr,MH,LMr,xMr,$Mr,M4,d5e,kMr,SMr,EH,RMr,BMr,PMr,E4,c5e,IMr,qMr,CH,NMr,jMr,DMr,C4,f5e,GMr,OMr,wH,VMr,XMr,zMr,w4,m5e,QMr,WMr,AH,HMr,UMr,JMr,A4,g5e,YMr,KMr,yH,ZMr,e4r,o4r,y4,h5e,r4r,t4r,LH,a4r,n4r,s4r,L4,p5e,l4r,i4r,xH,d4r,c4r,f4r,x4,u5e,m4r,g4r,$H,h4r,p4r,u4r,$4,_5e,_4r,b4r,kH,v4r,F4r,T4r,k4,b5e,M4r,E4r,SH,C4r,w4r,A4r,S4,v5e,y4r,L4r,RH,x4r,$4r,k4r,R4,F5e,S4r,R4r,BH,B4r,P4r,I4r,B4,T5e,q4r,N4r,PH,j4r,D4r,G4r,P4,M5e,O4r,V4r,IH,X4r,z4r,Q4r,I4,E5e,W4r,H4r,qH,U4r,J4r,Y4r,q4,C5e,K4r,Z4r,NH,eEr,oEr,rEr,N4,w5e,tEr,aEr,jH,nEr,sEr,lEr,j4,A5e,iEr,dEr,DH,cEr,fEr,mEr,D4,y5e,gEr,hEr,GH,pEr,uEr,_Er,G4,L5e,bEr,vEr,OH,FEr,TEr,MEr,O4,x5e,EEr,CEr,VH,wEr,AEr,yEr,V4,$5e,LEr,xEr,XH,$Er,kEr,SEr,X4,k5e,REr,BEr,zH,PEr,IEr,qEr,z4,S5e,NEr,jEr,QH,DEr,GEr,OEr,Q4,hPe,vc,W4,R5e,m8,VEr,B5e,XEr,pPe,cr,g8,zEr,Fc,QEr,WH,WEr,HEr,HH,UEr,JEr,YEr,h8,KEr,P5e,ZEr,eCr,oCr,qt,p8,rCr,I5e,tCr,aCr,Tc,nCr,q5e,sCr,lCr,UH,iCr,dCr,cCr,H4,fCr,qr,u8,mCr,N5e,gCr,hCr,cn,pCr,j5e,uCr,_Cr,D5e,bCr,vCr,G5e,FCr,TCr,MCr,Oe,U4,O5e,ECr,CCr,JH,wCr,ACr,yCr,J4,V5e,LCr,xCr,X5e,$Cr,kCr,SCr,Y4,z5e,RCr,BCr,YH,PCr,ICr,qCr,K4,Q5e,NCr,jCr,KH,DCr,GCr,OCr,Z4,W5e,VCr,XCr,ZH,zCr,QCr,WCr,eE,H5e,HCr,UCr,U5e,JCr,YCr,KCr,oE,J5e,ZCr,e3r,eU,o3r,r3r,t3r,rE,uPe,Mc,tE,Y5e,_8,a3r,K5e,n3r,_Pe,fr,b8,s3r,Ec,l3r,oU,i3r,d3r,rU,c3r,f3r,m3r,v8,g3r,Z5e,h3r,p3r,u3r,Nt,F8,_3r,eve,b3r,v3r,Cc,F3r,ove,T3r,M3r,tU,E3r,C3r,w3r,aE,A3r,Nr,T8,y3r,rve,L3r,x3r,fn,$3r,tve,k3r,S3r,ave,R3r,B3r,nve,P3r,I3r,q3r,Me,nE,sve,N3r,j3r,aU,D3r,G3r,O3r,sE,lve,V3r,X3r,nU,z3r,Q3r,W3r,lE,ive,H3r,U3r,sU,J3r,Y3r,K3r,iE,dve,Z3r,ewr,lU,owr,rwr,twr,dE,cve,awr,nwr,iU,swr,lwr,iwr,cE,fve,dwr,cwr,dU,fwr,mwr,gwr,fE,mve,hwr,pwr,cU,uwr,_wr,bwr,mE,gve,vwr,Fwr,fU,Twr,Mwr,Ewr,gE,hve,Cwr,wwr,mU,Awr,ywr,Lwr,hE,pve,xwr,$wr,gU,kwr,Swr,Rwr,pE,uve,Bwr,Pwr,hU,Iwr,qwr,Nwr,uE,_ve,jwr,Dwr,pU,Gwr,Owr,Vwr,_E,bPe,wc,bE,bve,M8,Xwr,vve,zwr,vPe,mr,E8,Qwr,Ac,Wwr,uU,Hwr,Uwr,_U,Jwr,Ywr,Kwr,C8,Zwr,Fve,eAr,oAr,rAr,jt,w8,tAr,Tve,aAr,nAr,yc,sAr,Mve,lAr,iAr,bU,dAr,cAr,fAr,vE,mAr,jr,A8,gAr,Eve,hAr,pAr,mn,uAr,Cve,_Ar,bAr,wve,vAr,FAr,Ave,TAr,MAr,EAr,Le,FE,yve,CAr,wAr,vU,AAr,yAr,LAr,TE,Lve,xAr,$Ar,FU,kAr,SAr,RAr,ME,xve,BAr,PAr,TU,IAr,qAr,NAr,EE,$ve,jAr,DAr,MU,GAr,OAr,VAr,CE,kve,XAr,zAr,EU,QAr,WAr,HAr,wE,Sve,UAr,JAr,CU,YAr,KAr,ZAr,AE,Rve,e0r,o0r,wU,r0r,t0r,a0r,yE,Bve,n0r,s0r,AU,l0r,i0r,d0r,LE,Pve,c0r,f0r,yU,m0r,g0r,h0r,xE,Ive,p0r,u0r,LU,_0r,b0r,v0r,$E,FPe,Lc,kE,qve,y8,F0r,Nve,T0r,TPe,gr,L8,M0r,xc,E0r,xU,C0r,w0r,$U,A0r,y0r,L0r,x8,x0r,jve,$0r,k0r,S0r,Dt,$8,R0r,Dve,B0r,P0r,$c,I0r,Gve,q0r,N0r,kU,j0r,D0r,G0r,SE,O0r,Dr,k8,V0r,Ove,X0r,z0r,gn,Q0r,Vve,W0r,H0r,Xve,U0r,J0r,zve,Y0r,K0r,Z0r,ke,RE,Qve,eyr,oyr,SU,ryr,tyr,ayr,BE,Wve,nyr,syr,RU,lyr,iyr,dyr,PE,Hve,cyr,fyr,BU,myr,gyr,hyr,IE,Uve,pyr,uyr,PU,_yr,byr,vyr,qE,Jve,Fyr,Tyr,IU,Myr,Eyr,Cyr,NE,Yve,wyr,Ayr,qU,yyr,Lyr,xyr,jE,Kve,$yr,kyr,NU,Syr,Ryr,Byr,DE,Zve,Pyr,Iyr,jU,qyr,Nyr,jyr,GE,eFe,Dyr,Gyr,DU,Oyr,Vyr,Xyr,OE,MPe,kc,VE,oFe,S8,zyr,rFe,Qyr,EPe,hr,R8,Wyr,Sc,Hyr,GU,Uyr,Jyr,OU,Yyr,Kyr,Zyr,B8,eLr,tFe,oLr,rLr,tLr,Gt,P8,aLr,aFe,nLr,sLr,Rc,lLr,nFe,iLr,dLr,VU,cLr,fLr,mLr,XE,gLr,Gr,I8,hLr,sFe,pLr,uLr,hn,_Lr,lFe,bLr,vLr,iFe,FLr,TLr,dFe,MLr,ELr,CLr,xe,zE,cFe,wLr,ALr,XU,yLr,LLr,xLr,QE,fFe,$Lr,kLr,zU,SLr,RLr,BLr,WE,mFe,PLr,ILr,QU,qLr,NLr,jLr,HE,gFe,DLr,GLr,WU,OLr,VLr,XLr,UE,hFe,zLr,QLr,HU,WLr,HLr,ULr,JE,pFe,JLr,YLr,UU,KLr,ZLr,e8r,YE,uFe,o8r,r8r,JU,t8r,a8r,n8r,KE,_Fe,s8r,l8r,YU,i8r,d8r,c8r,ZE,bFe,f8r,m8r,KU,g8r,h8r,p8r,eC,vFe,u8r,_8r,ZU,b8r,v8r,F8r,oC,CPe,Bc,rC,FFe,q8,T8r,TFe,M8r,wPe,pr,N8,E8r,Pc,C8r,eJ,w8r,A8r,oJ,y8r,L8r,x8r,j8,$8r,MFe,k8r,S8r,R8r,Ot,D8,B8r,EFe,P8r,I8r,Ic,q8r,CFe,N8r,j8r,rJ,D8r,G8r,O8r,tC,V8r,Or,G8,X8r,wFe,z8r,Q8r,pn,W8r,AFe,H8r,U8r,yFe,J8r,Y8r,LFe,K8r,Z8r,e7r,$e,aC,xFe,o7r,r7r,tJ,t7r,a7r,n7r,nC,$Fe,s7r,l7r,aJ,i7r,d7r,c7r,sC,kFe,f7r,m7r,nJ,g7r,h7r,p7r,lC,SFe,u7r,_7r,sJ,b7r,v7r,F7r,iC,RFe,T7r,M7r,lJ,E7r,C7r,w7r,dC,BFe,A7r,y7r,iJ,L7r,x7r,$7r,cC,PFe,k7r,S7r,dJ,R7r,B7r,P7r,fC,IFe,I7r,q7r,cJ,N7r,j7r,D7r,mC,qFe,G7r,O7r,fJ,V7r,X7r,z7r,gC,NFe,Q7r,W7r,mJ,H7r,U7r,J7r,hC,APe,qc,pC,jFe,O8,Y7r,DFe,K7r,yPe,ur,V8,Z7r,Nc,exr,gJ,oxr,rxr,hJ,txr,axr,nxr,X8,sxr,GFe,lxr,ixr,dxr,Vt,z8,cxr,OFe,fxr,mxr,jc,gxr,VFe,hxr,pxr,pJ,uxr,_xr,bxr,uC,vxr,Vr,Q8,Fxr,XFe,Txr,Mxr,un,Exr,zFe,Cxr,wxr,QFe,Axr,yxr,WFe,Lxr,xxr,$xr,je,_C,HFe,kxr,Sxr,uJ,Rxr,Bxr,Pxr,bC,UFe,Ixr,qxr,_J,Nxr,jxr,Dxr,vC,JFe,Gxr,Oxr,bJ,Vxr,Xxr,zxr,FC,YFe,Qxr,Wxr,vJ,Hxr,Uxr,Jxr,TC,KFe,Yxr,Kxr,FJ,Zxr,e$r,o$r,MC,ZFe,r$r,t$r,TJ,a$r,n$r,s$r,EC,e6e,l$r,i$r,MJ,d$r,c$r,f$r,CC,o6e,m$r,g$r,EJ,h$r,p$r,u$r,wC,LPe,Dc,AC,r6e,W8,_$r,t6e,b$r,xPe,_r,H8,v$r,Gc,F$r,CJ,T$r,M$r,wJ,E$r,C$r,w$r,U8,A$r,a6e,y$r,L$r,x$r,Xt,J8,$$r,n6e,k$r,S$r,Oc,R$r,s6e,B$r,P$r,AJ,I$r,q$r,N$r,yC,j$r,Xr,Y8,D$r,l6e,G$r,O$r,_n,V$r,i6e,X$r,z$r,d6e,Q$r,W$r,c6e,H$r,U$r,J$r,De,LC,f6e,Y$r,K$r,yJ,Z$r,ekr,okr,xC,m6e,rkr,tkr,LJ,akr,nkr,skr,$C,g6e,lkr,ikr,xJ,dkr,ckr,fkr,kC,h6e,mkr,gkr,$J,hkr,pkr,ukr,SC,p6e,_kr,bkr,kJ,vkr,Fkr,Tkr,RC,u6e,Mkr,Ekr,SJ,Ckr,wkr,Akr,BC,_6e,ykr,Lkr,RJ,xkr,$kr,kkr,PC,b6e,Skr,Rkr,BJ,Bkr,Pkr,Ikr,IC,$Pe,Vc,qC,v6e,K8,qkr,F6e,Nkr,kPe,br,Z8,jkr,Xc,Dkr,PJ,Gkr,Okr,IJ,Vkr,Xkr,zkr,e7,Qkr,T6e,Wkr,Hkr,Ukr,zt,o7,Jkr,M6e,Ykr,Kkr,zc,Zkr,E6e,eSr,oSr,qJ,rSr,tSr,aSr,NC,nSr,zr,r7,sSr,C6e,lSr,iSr,bn,dSr,w6e,cSr,fSr,A6e,mSr,gSr,y6e,hSr,pSr,uSr,L6e,jC,x6e,_Sr,bSr,NJ,vSr,FSr,TSr,DC,SPe,Qc,GC,$6e,t7,MSr,k6e,ESr,RPe,vr,a7,CSr,Wc,wSr,jJ,ASr,ySr,DJ,LSr,xSr,$Sr,n7,kSr,S6e,SSr,RSr,BSr,Qt,s7,PSr,R6e,ISr,qSr,Hc,NSr,B6e,jSr,DSr,GJ,GSr,OSr,VSr,OC,XSr,Qr,l7,zSr,P6e,QSr,WSr,vn,HSr,I6e,USr,JSr,q6e,YSr,KSr,N6e,ZSr,eRr,oRr,i7,VC,j6e,rRr,tRr,OJ,aRr,nRr,sRr,XC,D6e,lRr,iRr,VJ,dRr,cRr,fRr,zC,BPe,Uc,QC,G6e,d7,mRr,O6e,gRr,PPe,Fr,c7,hRr,Jc,pRr,XJ,uRr,_Rr,zJ,bRr,vRr,FRr,f7,TRr,V6e,MRr,ERr,CRr,Wt,m7,wRr,X6e,ARr,yRr,Yc,LRr,z6e,xRr,$Rr,QJ,kRr,SRr,RRr,WC,BRr,Wr,g7,PRr,Q6e,IRr,qRr,Fn,NRr,W6e,jRr,DRr,H6e,GRr,ORr,U6e,VRr,XRr,zRr,J6e,HC,Y6e,QRr,WRr,WJ,HRr,URr,JRr,UC,IPe;return d=new ee({}),va=new B({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),pA=new ee({}),uA=new B({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),sf=new YRr({props:{warning:!0,$$slots:{default:[$4t]},$$scope:{ctx:A}}}),_A=new ee({}),bA=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/configuration_auto.py#L560"}}),TA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/configuration_auto.py#L583"}}),tg=new P({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[k4t]},$$scope:{ctx:A}}}),MA=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/configuration_auto.py#L705"}}),EA=new ee({}),CA=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/tokenization_auto.py#L377"}}),yA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_16995/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/tokenization_auto.py#L391"}}),Pg=new P({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[S4t]},$$scope:{ctx:A}}}),LA=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/tokenization_auto.py#L587"}}),xA=new ee({}),$A=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/feature_extraction_auto.py#L176"}}),RA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_16995/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/feature_extraction_auto.py#L190"}}),lh=new YRr({props:{$$slots:{default:[R4t]},$$scope:{ctx:A}}}),ih=new P({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[B4t]},$$scope:{ctx:A}}}),BA=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/feature_extraction_auto.py#L317"}}),PA=new ee({}),IA=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/processing_auto.py#L76"}}),jA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/processing_auto.py#L90"}}),wh=new YRr({props:{$$slots:{default:[P4t]},$$scope:{ctx:A}}}),Ah=new P({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[I4t]},$$scope:{ctx:A}}}),DA=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/processing_auto.py#L243"}}),GA=new ee({}),OA=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/modeling_auto.py#L714"}}),XA=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16995/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_16995/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L389"}}),xh=new P({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[q4t]},$$scope:{ctx:A}}}),zA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L417"}}),uu=new P({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[N4t]},$$scope:{ctx:A}}}),QA=new ee({}),WA=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/modeling_auto.py#L721"}}),UA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16995/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L389"}}),bu=new P({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[j4t]},$$scope:{ctx:A}}}),JA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L417"}}),n_=new P({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[D4t]},$$scope:{ctx:A}}}),YA=new ee({}),KA=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/modeling_auto.py#L736"}}),e0=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16995/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L389"}}),l_=new P({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[G4t]},$$scope:{ctx:A}}}),o0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L417"}}),X_=new P({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[O4t]},$$scope:{ctx:A}}}),r0=new ee({}),t0=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/modeling_auto.py#L743"}}),n0=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16995/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L389"}}),Q_=new P({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[V4t]},$$scope:{ctx:A}}}),s0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L417"}}),x1=new P({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[X4t]},$$scope:{ctx:A}}}),l0=new ee({}),i0=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/modeling_auto.py#L750"}}),c0=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16995/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLMProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L389"}}),k1=new P({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[z4t]},$$scope:{ctx:A}}}),f0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L417"}}),J1=new P({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[Q4t]},$$scope:{ctx:A}}}),m0=new ee({}),g0=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/modeling_auto.py#L759"}}),p0=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16995/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L389"}}),K1=new P({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[W4t]},$$scope:{ctx:A}}}),u0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L417"}}),W9=new P({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[H4t]},$$scope:{ctx:A}}}),_0=new ee({}),b0=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/modeling_auto.py#L793"}}),F0=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16995/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L389"}}),U9=new P({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[U4t]},$$scope:{ctx:A}}}),T0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L417"}}),wb=new P({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[J4t]},$$scope:{ctx:A}}}),M0=new ee({}),E0=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/modeling_auto.py#L800"}}),w0=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16995/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L389"}}),yb=new P({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[Y4t]},$$scope:{ctx:A}}}),A0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L417"}}),Bb=new P({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[K4t]},$$scope:{ctx:A}}}),y0=new ee({}),L0=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/modeling_auto.py#L786"}}),$0=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16995/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L389"}}),Ib=new P({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[Z4t]},$$scope:{ctx:A}}}),k0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L417"}}),_2=new P({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[eEt]},$$scope:{ctx:A}}}),S0=new ee({}),R0=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/modeling_auto.py#L768"}}),P0=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16995/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L389"}}),v2=new P({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[oEt]},$$scope:{ctx:A}}}),I0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L417"}}),s5=new P({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[rEt]},$$scope:{ctx:A}}}),q0=new ee({}),N0=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/modeling_auto.py#L775"}}),D0=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16995/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L389"}}),i5=new P({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[tEt]},$$scope:{ctx:A}}}),G0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L417"}}),f5=new P({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[aEt]},$$scope:{ctx:A}}}),O0=new ee({}),V0=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/modeling_auto.py#L809"}}),z0=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16995/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_16995/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_16995/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_16995/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L389"}}),g5=new P({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[nEt]},$$scope:{ctx:A}}}),Q0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L417"}}),A5=new P({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[sEt]},$$scope:{ctx:A}}}),W0=new ee({}),H0=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/modeling_auto.py#L848"}}),J0=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16995/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L389"}}),L5=new P({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[lEt]},$$scope:{ctx:A}}}),Y0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L417"}}),k5=new P({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[iEt]},$$scope:{ctx:A}}}),K0=new ee({}),Z0=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/modeling_auto.py#L855"}}),oy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16995/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L389"}}),R5=new P({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[dEt]},$$scope:{ctx:A}}}),ry=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L417"}}),V5=new P({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[cEt]},$$scope:{ctx:A}}}),ty=new ee({}),ay=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/modeling_auto.py#L878"}}),sy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16995/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L389"}}),z5=new P({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[fEt]},$$scope:{ctx:A}}}),ly=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L417"}}),Y5=new P({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[mEt]},$$scope:{ctx:A}}}),iy=new ee({}),dy=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/modeling_auto.py#L862"}}),fy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16995/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L389"}}),Z5=new P({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[gEt]},$$scope:{ctx:A}}}),my=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L417"}}),dv=new P({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[hEt]},$$scope:{ctx:A}}}),gy=new ee({}),hy=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/modeling_auto.py#L869"}}),uy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16995/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L389"}}),fv=new P({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[pEt]},$$scope:{ctx:A}}}),_y=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L417"}}),pv=new P({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[uEt]},$$scope:{ctx:A}}}),vy=new ee({}),Fy=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/modeling_auto.py#L887"}}),My=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16995/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L389"}}),_v=new P({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[_Et]},$$scope:{ctx:A}}}),Ey=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L417"}}),Ev=new P({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[bEt]},$$scope:{ctx:A}}}),Cy=new ee({}),wy=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/modeling_auto.py#L894"}}),yy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16995/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L389"}}),wv=new P({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[vEt]},$$scope:{ctx:A}}}),Ly=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L417"}}),$v=new P({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[FEt]},$$scope:{ctx:A}}}),xy=new ee({}),$y=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/modeling_auto.py#L841"}}),Sy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16995/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L389"}}),Sv=new P({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[TEt]},$$scope:{ctx:A}}}),Ry=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L417"}}),Pv=new P({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[MEt]},$$scope:{ctx:A}}}),By=new ee({}),Py=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/modeling_auto.py#L816"}}),qy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16995/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L389"}}),qv=new P({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[EEt]},$$scope:{ctx:A}}}),Ny=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L417"}}),Dv=new P({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[CEt]},$$scope:{ctx:A}}}),jy=new ee({}),Dy=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/modeling_auto.py#L823"}}),Oy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16995/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L389"}}),Ov=new P({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[wEt]},$$scope:{ctx:A}}}),Vy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L417"}}),Hv=new P({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[AEt]},$$scope:{ctx:A}}}),Xy=new ee({}),zy=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/modeling_auto.py#L832"}}),Wy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16995/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L389"}}),Jv=new P({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[yEt]},$$scope:{ctx:A}}}),Hy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L417"}}),Zv=new P({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[LEt]},$$scope:{ctx:A}}}),Uy=new ee({}),Jy=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/modeling_tf_auto.py#L381"}}),Ky=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16995/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_16995/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L389"}}),oF=new P({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[xEt]},$$scope:{ctx:A}}}),Zy=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L417"}}),zF=new P({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[$Et]},$$scope:{ctx:A}}}),eL=new ee({}),oL=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/modeling_tf_auto.py#L388"}}),tL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16995/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L389"}}),WF=new P({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[kEt]},$$scope:{ctx:A}}}),aL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L417"}}),_6=new P({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[SEt]},$$scope:{ctx:A}}}),nL=new ee({}),sL=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/modeling_tf_auto.py#L403"}}),iL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16995/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L389"}}),v6=new P({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[REt]},$$scope:{ctx:A}}}),dL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L417"}}),S6=new P({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[BEt]},$$scope:{ctx:A}}}),cL=new ee({}),fL=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/modeling_tf_auto.py#L410"}}),gL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16995/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L389"}}),B6=new P({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[PEt]},$$scope:{ctx:A}}}),hL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L417"}}),q6=new P({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[IEt]},$$scope:{ctx:A}}}),uL=new ee({}),_L=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/modeling_tf_auto.py#L426"}}),vL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16995/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L389"}}),j6=new P({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[qEt]},$$scope:{ctx:A}}}),FL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L417"}}),sT=new P({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[NEt]},$$scope:{ctx:A}}}),TL=new ee({}),ML=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/modeling_tf_auto.py#L433"}}),CL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16995/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L389"}}),iT=new P({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[jEt]},$$scope:{ctx:A}}}),wL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L417"}}),vT=new P({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[DEt]},$$scope:{ctx:A}}}),AL=new ee({}),yL=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/modeling_tf_auto.py#L442"}}),xL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16995/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L389"}}),TT=new P({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[GEt]},$$scope:{ctx:A}}}),$L=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L417"}}),HT=new P({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[OEt]},$$scope:{ctx:A}}}),kL=new ee({}),SL=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/modeling_tf_auto.py#L478"}}),BL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16995/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L389"}}),JT=new P({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[VEt]},$$scope:{ctx:A}}}),PL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L417"}}),hM=new P({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[XEt]},$$scope:{ctx:A}}}),IL=new ee({}),qL=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/modeling_tf_auto.py#L458"}}),jL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16995/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L389"}}),uM=new P({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[zEt]},$$scope:{ctx:A}}}),DL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L417"}}),bM=new P({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[QEt]},$$scope:{ctx:A}}}),GL=new ee({}),OL=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/modeling_tf_auto.py#L469"}}),XL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16995/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L389"}}),FM=new P({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[WEt]},$$scope:{ctx:A}}}),zL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L417"}}),GM=new P({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[HEt]},$$scope:{ctx:A}}}),QL=new ee({}),WL=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/modeling_tf_auto.py#L451"}}),UL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16995/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L389"}}),VM=new P({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[UEt]},$$scope:{ctx:A}}}),JL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L417"}}),c4=new P({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[JEt]},$$scope:{ctx:A}}}),YL=new ee({}),KL=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/modeling_tf_auto.py#L419"}}),e8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16995/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L389"}}),m4=new P({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[YEt]},$$scope:{ctx:A}}}),o8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L417"}}),h4=new P({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[KEt]},$$scope:{ctx:A}}}),r8=new ee({}),t8=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/modeling_tf_auto.py#L494"}}),n8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16995/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L389"}}),u4=new P({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[ZEt]},$$scope:{ctx:A}}}),s8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L417"}}),b4=new P({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[eCt]},$$scope:{ctx:A}}}),l8=new ee({}),i8=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/modeling_flax_auto.py#L239"}}),c8=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16995/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L389"}}),F4=new P({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[oCt]},$$scope:{ctx:A}}}),f8=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L417"}}),Q4=new P({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[rCt]},$$scope:{ctx:A}}}),m8=new ee({}),g8=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/modeling_flax_auto.py#L253"}}),p8=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16995/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <code>FlaxBertForCausalLM</code> (BERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <code>FlaxRobertaForCausalLM</code> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L389"}}),H4=new P({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[tCt]},$$scope:{ctx:A}}}),u8=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L417"}}),rE=new P({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[aCt]},$$scope:{ctx:A}}}),_8=new ee({}),b8=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/modeling_flax_auto.py#L246"}}),F8=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16995/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L389"}}),aE=new P({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[nCt]},$$scope:{ctx:A}}}),T8=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L417"}}),_E=new P({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[sCt]},$$scope:{ctx:A}}}),M8=new ee({}),E8=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/modeling_flax_auto.py#L260"}}),w8=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16995/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L389"}}),vE=new P({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[lCt]},$$scope:{ctx:A}}}),A8=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L417"}}),$E=new P({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[iCt]},$$scope:{ctx:A}}}),y8=new ee({}),L8=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/modeling_flax_auto.py#L267"}}),$8=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16995/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L389"}}),SE=new P({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[dCt]},$$scope:{ctx:A}}}),k8=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L417"}}),OE=new P({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[cCt]},$$scope:{ctx:A}}}),S8=new ee({}),R8=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/modeling_flax_auto.py#L276"}}),P8=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16995/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L389"}}),XE=new P({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[fCt]},$$scope:{ctx:A}}}),I8=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L417"}}),oC=new P({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[mCt]},$$scope:{ctx:A}}}),q8=new ee({}),N8=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/modeling_flax_auto.py#L285"}}),D8=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16995/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L389"}}),tC=new P({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[gCt]},$$scope:{ctx:A}}}),G8=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L417"}}),hC=new P({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[hCt]},$$scope:{ctx:A}}}),O8=new ee({}),V8=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/modeling_flax_auto.py#L292"}}),z8=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16995/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L389"}}),uC=new P({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[pCt]},$$scope:{ctx:A}}}),Q8=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L417"}}),wC=new P({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[uCt]},$$scope:{ctx:A}}}),W8=new ee({}),H8=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/modeling_flax_auto.py#L301"}}),J8=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16995/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L389"}}),yC=new P({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[_Ct]},$$scope:{ctx:A}}}),Y8=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L417"}}),IC=new P({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[bCt]},$$scope:{ctx:A}}}),K8=new ee({}),Z8=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/modeling_flax_auto.py#L308"}}),o7=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16995/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L389"}}),NC=new P({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[vCt]},$$scope:{ctx:A}}}),r7=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L417"}}),DC=new P({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[FCt]},$$scope:{ctx:A}}}),t7=new ee({}),a7=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/modeling_flax_auto.py#L317"}}),s7=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16995/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16995/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L389"}}),OC=new P({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[TCt]},$$scope:{ctx:A}}}),l7=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L417"}}),zC=new P({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[MCt]},$$scope:{ctx:A}}}),d7=new ee({}),c7=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/modeling_flax_auto.py#L326"}}),m7=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16995/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16995/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L389"}}),WC=new P({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[ECt]},$$scope:{ctx:A}}}),g7=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16995/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16995/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16995/src/transformers/models/auto/auto_factory.py#L417"}}),UC=new P({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[CCt]},$$scope:{ctx:A}}}),{c(){g=a("meta"),v=l(),p=a("h1"),m=a("a"),u=a("span"),F(d.$$.fragment),h=l(),To=a("span"),oi=o("Auto Classes"),of=l(),Kr=a("p"),ri=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),ti=a("code"),fA=o("from_pretrained()"),rf=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Ie=l(),Ve=a("p"),ai=o("Instantiating one of "),Mn=a("a"),mA=o("AutoConfig"),En=o(", "),Cn=a("a"),gA=o("AutoModel"),ni=o(`, and
`),wn=a("a"),hA=o("AutoTokenizer"),si=o(" will directly create a class of the relevant architecture. For instance"),tf=l(),F(va.$$.fragment),Xe=l(),Ae=a("p"),Ax=o("will create a model that is an instance of "),li=a("a"),yx=o("BertModel"),Lx=o("."),Mo=l(),Fa=a("p"),xx=o("There is one class of "),af=a("code"),$x=o("AutoModel"),Gqe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),PRe=l(),ii=a("h2"),nf=a("a"),NK=a("span"),F(pA.$$.fragment),Oqe=l(),jK=a("span"),Vqe=o("Extending the Auto Classes"),IRe=l(),An=a("p"),Xqe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),DK=a("code"),zqe=o("NewModel"),Qqe=o(", make sure you have a "),GK=a("code"),Wqe=o("NewModelConfig"),Hqe=o(` then you can add those to the auto
classes like this:`),qRe=l(),F(uA.$$.fragment),NRe=l(),kx=a("p"),Uqe=o("You will then be able to use the auto classes like you would usually do!"),jRe=l(),F(sf.$$.fragment),DRe=l(),di=a("h2"),lf=a("a"),OK=a("span"),F(_A.$$.fragment),Jqe=l(),VK=a("span"),Yqe=o("AutoConfig"),GRe=l(),Eo=a("div"),F(bA.$$.fragment),Kqe=l(),vA=a("p"),Zqe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),Sx=a("a"),eNe=o("from_pretrained()"),oNe=o(" class method."),rNe=l(),FA=a("p"),tNe=o("This class cannot be instantiated directly using "),XK=a("code"),aNe=o("__init__()"),nNe=o(" (throws an error)."),sNe=l(),Tr=a("div"),F(TA.$$.fragment),lNe=l(),zK=a("p"),iNe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),dNe=l(),ci=a("p"),cNe=o("The configuration class to instantiate is selected based on the "),QK=a("code"),fNe=o("model_type"),mNe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),WK=a("code"),gNe=o("pretrained_model_name_or_path"),hNe=o(":"),pNe=l(),y=a("ul"),df=a("li"),HK=a("strong"),uNe=o("albert"),_Ne=o(" \u2014 "),Rx=a("a"),bNe=o("AlbertConfig"),vNe=o(" (ALBERT model)"),FNe=l(),cf=a("li"),UK=a("strong"),TNe=o("bart"),MNe=o(" \u2014 "),Bx=a("a"),ENe=o("BartConfig"),CNe=o(" (BART model)"),wNe=l(),ff=a("li"),JK=a("strong"),ANe=o("beit"),yNe=o(" \u2014 "),Px=a("a"),LNe=o("BeitConfig"),xNe=o(" (BEiT model)"),$Ne=l(),mf=a("li"),YK=a("strong"),kNe=o("bert"),SNe=o(" \u2014 "),Ix=a("a"),RNe=o("BertConfig"),BNe=o(" (BERT model)"),PNe=l(),gf=a("li"),KK=a("strong"),INe=o("bert-generation"),qNe=o(" \u2014 "),qx=a("a"),NNe=o("BertGenerationConfig"),jNe=o(" (Bert Generation model)"),DNe=l(),hf=a("li"),ZK=a("strong"),GNe=o("big_bird"),ONe=o(" \u2014 "),Nx=a("a"),VNe=o("BigBirdConfig"),XNe=o(" (BigBird model)"),zNe=l(),pf=a("li"),eZ=a("strong"),QNe=o("bigbird_pegasus"),WNe=o(" \u2014 "),jx=a("a"),HNe=o("BigBirdPegasusConfig"),UNe=o(" (BigBirdPegasus model)"),JNe=l(),uf=a("li"),oZ=a("strong"),YNe=o("blenderbot"),KNe=o(" \u2014 "),Dx=a("a"),ZNe=o("BlenderbotConfig"),eje=o(" (Blenderbot model)"),oje=l(),_f=a("li"),rZ=a("strong"),rje=o("blenderbot-small"),tje=o(" \u2014 "),Gx=a("a"),aje=o("BlenderbotSmallConfig"),nje=o(" (BlenderbotSmall model)"),sje=l(),bf=a("li"),tZ=a("strong"),lje=o("camembert"),ije=o(" \u2014 "),Ox=a("a"),dje=o("CamembertConfig"),cje=o(" (CamemBERT model)"),fje=l(),vf=a("li"),aZ=a("strong"),mje=o("canine"),gje=o(" \u2014 "),Vx=a("a"),hje=o("CanineConfig"),pje=o(" (Canine model)"),uje=l(),Ff=a("li"),nZ=a("strong"),_je=o("clip"),bje=o(" \u2014 "),Xx=a("a"),vje=o("CLIPConfig"),Fje=o(" (CLIP model)"),Tje=l(),Tf=a("li"),sZ=a("strong"),Mje=o("convbert"),Eje=o(" \u2014 "),zx=a("a"),Cje=o("ConvBertConfig"),wje=o(" (ConvBERT model)"),Aje=l(),Mf=a("li"),lZ=a("strong"),yje=o("convnext"),Lje=o(" \u2014 "),Qx=a("a"),xje=o("ConvNextConfig"),$je=o(" (ConvNext model)"),kje=l(),Ef=a("li"),iZ=a("strong"),Sje=o("ctrl"),Rje=o(" \u2014 "),Wx=a("a"),Bje=o("CTRLConfig"),Pje=o(" (CTRL model)"),Ije=l(),Cf=a("li"),dZ=a("strong"),qje=o("data2vec-audio"),Nje=o(" \u2014 "),Hx=a("a"),jje=o("Data2VecAudioConfig"),Dje=o(" (Data2VecAudio model)"),Gje=l(),wf=a("li"),cZ=a("strong"),Oje=o("data2vec-text"),Vje=o(" \u2014 "),Ux=a("a"),Xje=o("Data2VecTextConfig"),zje=o(" (Data2VecText model)"),Qje=l(),Af=a("li"),fZ=a("strong"),Wje=o("data2vec-vision"),Hje=o(" \u2014 "),Jx=a("a"),Uje=o("Data2VecVisionConfig"),Jje=o(" (Data2VecVision model)"),Yje=l(),yf=a("li"),mZ=a("strong"),Kje=o("deberta"),Zje=o(" \u2014 "),Yx=a("a"),eDe=o("DebertaConfig"),oDe=o(" (DeBERTa model)"),rDe=l(),Lf=a("li"),gZ=a("strong"),tDe=o("deberta-v2"),aDe=o(" \u2014 "),Kx=a("a"),nDe=o("DebertaV2Config"),sDe=o(" (DeBERTa-v2 model)"),lDe=l(),xf=a("li"),hZ=a("strong"),iDe=o("decision_transformer"),dDe=o(" \u2014 "),Zx=a("a"),cDe=o("DecisionTransformerConfig"),fDe=o(" (Decision Transformer model)"),mDe=l(),$f=a("li"),pZ=a("strong"),gDe=o("deit"),hDe=o(" \u2014 "),e$=a("a"),pDe=o("DeiTConfig"),uDe=o(" (DeiT model)"),_De=l(),kf=a("li"),uZ=a("strong"),bDe=o("detr"),vDe=o(" \u2014 "),o$=a("a"),FDe=o("DetrConfig"),TDe=o(" (DETR model)"),MDe=l(),Sf=a("li"),_Z=a("strong"),EDe=o("distilbert"),CDe=o(" \u2014 "),r$=a("a"),wDe=o("DistilBertConfig"),ADe=o(" (DistilBERT model)"),yDe=l(),Rf=a("li"),bZ=a("strong"),LDe=o("dpr"),xDe=o(" \u2014 "),t$=a("a"),$De=o("DPRConfig"),kDe=o(" (DPR model)"),SDe=l(),Bf=a("li"),vZ=a("strong"),RDe=o("dpt"),BDe=o(" \u2014 "),a$=a("a"),PDe=o("DPTConfig"),IDe=o(" (DPT model)"),qDe=l(),Pf=a("li"),FZ=a("strong"),NDe=o("electra"),jDe=o(" \u2014 "),n$=a("a"),DDe=o("ElectraConfig"),GDe=o(" (ELECTRA model)"),ODe=l(),If=a("li"),TZ=a("strong"),VDe=o("encoder-decoder"),XDe=o(" \u2014 "),s$=a("a"),zDe=o("EncoderDecoderConfig"),QDe=o(" (Encoder decoder model)"),WDe=l(),qf=a("li"),MZ=a("strong"),HDe=o("flaubert"),UDe=o(" \u2014 "),l$=a("a"),JDe=o("FlaubertConfig"),YDe=o(" (FlauBERT model)"),KDe=l(),Nf=a("li"),EZ=a("strong"),ZDe=o("fnet"),eGe=o(" \u2014 "),i$=a("a"),oGe=o("FNetConfig"),rGe=o(" (FNet model)"),tGe=l(),jf=a("li"),CZ=a("strong"),aGe=o("fsmt"),nGe=o(" \u2014 "),d$=a("a"),sGe=o("FSMTConfig"),lGe=o(" (FairSeq Machine-Translation model)"),iGe=l(),Df=a("li"),wZ=a("strong"),dGe=o("funnel"),cGe=o(" \u2014 "),c$=a("a"),fGe=o("FunnelConfig"),mGe=o(" (Funnel Transformer model)"),gGe=l(),Gf=a("li"),AZ=a("strong"),hGe=o("glpn"),pGe=o(" \u2014 "),f$=a("a"),uGe=o("GLPNConfig"),_Ge=o(" (GLPN model)"),bGe=l(),Of=a("li"),yZ=a("strong"),vGe=o("gpt2"),FGe=o(" \u2014 "),m$=a("a"),TGe=o("GPT2Config"),MGe=o(" (OpenAI GPT-2 model)"),EGe=l(),Vf=a("li"),LZ=a("strong"),CGe=o("gpt_neo"),wGe=o(" \u2014 "),g$=a("a"),AGe=o("GPTNeoConfig"),yGe=o(" (GPT Neo model)"),LGe=l(),Xf=a("li"),xZ=a("strong"),xGe=o("gptj"),$Ge=o(" \u2014 "),h$=a("a"),kGe=o("GPTJConfig"),SGe=o(" (GPT-J model)"),RGe=l(),zf=a("li"),$Z=a("strong"),BGe=o("hubert"),PGe=o(" \u2014 "),p$=a("a"),IGe=o("HubertConfig"),qGe=o(" (Hubert model)"),NGe=l(),Qf=a("li"),kZ=a("strong"),jGe=o("ibert"),DGe=o(" \u2014 "),u$=a("a"),GGe=o("IBertConfig"),OGe=o(" (I-BERT model)"),VGe=l(),Wf=a("li"),SZ=a("strong"),XGe=o("imagegpt"),zGe=o(" \u2014 "),_$=a("a"),QGe=o("ImageGPTConfig"),WGe=o(" (ImageGPT model)"),HGe=l(),Hf=a("li"),RZ=a("strong"),UGe=o("layoutlm"),JGe=o(" \u2014 "),b$=a("a"),YGe=o("LayoutLMConfig"),KGe=o(" (LayoutLM model)"),ZGe=l(),Uf=a("li"),BZ=a("strong"),eOe=o("layoutlmv2"),oOe=o(" \u2014 "),v$=a("a"),rOe=o("LayoutLMv2Config"),tOe=o(" (LayoutLMv2 model)"),aOe=l(),Jf=a("li"),PZ=a("strong"),nOe=o("led"),sOe=o(" \u2014 "),F$=a("a"),lOe=o("LEDConfig"),iOe=o(" (LED model)"),dOe=l(),Yf=a("li"),IZ=a("strong"),cOe=o("longformer"),fOe=o(" \u2014 "),T$=a("a"),mOe=o("LongformerConfig"),gOe=o(" (Longformer model)"),hOe=l(),Kf=a("li"),qZ=a("strong"),pOe=o("luke"),uOe=o(" \u2014 "),M$=a("a"),_Oe=o("LukeConfig"),bOe=o(" (LUKE model)"),vOe=l(),Zf=a("li"),NZ=a("strong"),FOe=o("lxmert"),TOe=o(" \u2014 "),E$=a("a"),MOe=o("LxmertConfig"),EOe=o(" (LXMERT model)"),COe=l(),em=a("li"),jZ=a("strong"),wOe=o("m2m_100"),AOe=o(" \u2014 "),C$=a("a"),yOe=o("M2M100Config"),LOe=o(" (M2M100 model)"),xOe=l(),om=a("li"),DZ=a("strong"),$Oe=o("marian"),kOe=o(" \u2014 "),w$=a("a"),SOe=o("MarianConfig"),ROe=o(" (Marian model)"),BOe=l(),rm=a("li"),GZ=a("strong"),POe=o("maskformer"),IOe=o(" \u2014 "),A$=a("a"),qOe=o("MaskFormerConfig"),NOe=o(" (MaskFormer model)"),jOe=l(),tm=a("li"),OZ=a("strong"),DOe=o("mbart"),GOe=o(" \u2014 "),y$=a("a"),OOe=o("MBartConfig"),VOe=o(" (mBART model)"),XOe=l(),am=a("li"),VZ=a("strong"),zOe=o("megatron-bert"),QOe=o(" \u2014 "),L$=a("a"),WOe=o("MegatronBertConfig"),HOe=o(" (MegatronBert model)"),UOe=l(),nm=a("li"),XZ=a("strong"),JOe=o("mobilebert"),YOe=o(" \u2014 "),x$=a("a"),KOe=o("MobileBertConfig"),ZOe=o(" (MobileBERT model)"),eVe=l(),sm=a("li"),zZ=a("strong"),oVe=o("mpnet"),rVe=o(" \u2014 "),$$=a("a"),tVe=o("MPNetConfig"),aVe=o(" (MPNet model)"),nVe=l(),lm=a("li"),QZ=a("strong"),sVe=o("mt5"),lVe=o(" \u2014 "),k$=a("a"),iVe=o("MT5Config"),dVe=o(" (mT5 model)"),cVe=l(),im=a("li"),WZ=a("strong"),fVe=o("nystromformer"),mVe=o(" \u2014 "),S$=a("a"),gVe=o("NystromformerConfig"),hVe=o(" (Nystromformer model)"),pVe=l(),dm=a("li"),HZ=a("strong"),uVe=o("openai-gpt"),_Ve=o(" \u2014 "),R$=a("a"),bVe=o("OpenAIGPTConfig"),vVe=o(" (OpenAI GPT model)"),FVe=l(),cm=a("li"),UZ=a("strong"),TVe=o("pegasus"),MVe=o(" \u2014 "),B$=a("a"),EVe=o("PegasusConfig"),CVe=o(" (Pegasus model)"),wVe=l(),fm=a("li"),JZ=a("strong"),AVe=o("perceiver"),yVe=o(" \u2014 "),P$=a("a"),LVe=o("PerceiverConfig"),xVe=o(" (Perceiver model)"),$Ve=l(),mm=a("li"),YZ=a("strong"),kVe=o("plbart"),SVe=o(" \u2014 "),I$=a("a"),RVe=o("PLBartConfig"),BVe=o(" (PLBart model)"),PVe=l(),gm=a("li"),KZ=a("strong"),IVe=o("poolformer"),qVe=o(" \u2014 "),q$=a("a"),NVe=o("PoolFormerConfig"),jVe=o(" (PoolFormer model)"),DVe=l(),hm=a("li"),ZZ=a("strong"),GVe=o("prophetnet"),OVe=o(" \u2014 "),N$=a("a"),VVe=o("ProphetNetConfig"),XVe=o(" (ProphetNet model)"),zVe=l(),pm=a("li"),eee=a("strong"),QVe=o("qdqbert"),WVe=o(" \u2014 "),j$=a("a"),HVe=o("QDQBertConfig"),UVe=o(" (QDQBert model)"),JVe=l(),um=a("li"),oee=a("strong"),YVe=o("rag"),KVe=o(" \u2014 "),D$=a("a"),ZVe=o("RagConfig"),eXe=o(" (RAG model)"),oXe=l(),_m=a("li"),ree=a("strong"),rXe=o("realm"),tXe=o(" \u2014 "),G$=a("a"),aXe=o("RealmConfig"),nXe=o(" (Realm model)"),sXe=l(),bm=a("li"),tee=a("strong"),lXe=o("reformer"),iXe=o(" \u2014 "),O$=a("a"),dXe=o("ReformerConfig"),cXe=o(" (Reformer model)"),fXe=l(),vm=a("li"),aee=a("strong"),mXe=o("regnet"),gXe=o(" \u2014 "),V$=a("a"),hXe=o("RegNetConfig"),pXe=o(" (RegNet model)"),uXe=l(),Fm=a("li"),nee=a("strong"),_Xe=o("rembert"),bXe=o(" \u2014 "),X$=a("a"),vXe=o("RemBertConfig"),FXe=o(" (RemBERT model)"),TXe=l(),Tm=a("li"),see=a("strong"),MXe=o("resnet"),EXe=o(" \u2014 "),z$=a("a"),CXe=o("ResNetConfig"),wXe=o(" (ResNet model)"),AXe=l(),Mm=a("li"),lee=a("strong"),yXe=o("retribert"),LXe=o(" \u2014 "),Q$=a("a"),xXe=o("RetriBertConfig"),$Xe=o(" (RetriBERT model)"),kXe=l(),Em=a("li"),iee=a("strong"),SXe=o("roberta"),RXe=o(" \u2014 "),W$=a("a"),BXe=o("RobertaConfig"),PXe=o(" (RoBERTa model)"),IXe=l(),Cm=a("li"),dee=a("strong"),qXe=o("roformer"),NXe=o(" \u2014 "),H$=a("a"),jXe=o("RoFormerConfig"),DXe=o(" (RoFormer model)"),GXe=l(),wm=a("li"),cee=a("strong"),OXe=o("segformer"),VXe=o(" \u2014 "),U$=a("a"),XXe=o("SegformerConfig"),zXe=o(" (SegFormer model)"),QXe=l(),Am=a("li"),fee=a("strong"),WXe=o("sew"),HXe=o(" \u2014 "),J$=a("a"),UXe=o("SEWConfig"),JXe=o(" (SEW model)"),YXe=l(),ym=a("li"),mee=a("strong"),KXe=o("sew-d"),ZXe=o(" \u2014 "),Y$=a("a"),eze=o("SEWDConfig"),oze=o(" (SEW-D model)"),rze=l(),Lm=a("li"),gee=a("strong"),tze=o("speech-encoder-decoder"),aze=o(" \u2014 "),K$=a("a"),nze=o("SpeechEncoderDecoderConfig"),sze=o(" (Speech Encoder decoder model)"),lze=l(),xm=a("li"),hee=a("strong"),ize=o("speech_to_text"),dze=o(" \u2014 "),Z$=a("a"),cze=o("Speech2TextConfig"),fze=o(" (Speech2Text model)"),mze=l(),$m=a("li"),pee=a("strong"),gze=o("speech_to_text_2"),hze=o(" \u2014 "),ek=a("a"),pze=o("Speech2Text2Config"),uze=o(" (Speech2Text2 model)"),_ze=l(),km=a("li"),uee=a("strong"),bze=o("splinter"),vze=o(" \u2014 "),ok=a("a"),Fze=o("SplinterConfig"),Tze=o(" (Splinter model)"),Mze=l(),Sm=a("li"),_ee=a("strong"),Eze=o("squeezebert"),Cze=o(" \u2014 "),rk=a("a"),wze=o("SqueezeBertConfig"),Aze=o(" (SqueezeBERT model)"),yze=l(),Rm=a("li"),bee=a("strong"),Lze=o("swin"),xze=o(" \u2014 "),tk=a("a"),$ze=o("SwinConfig"),kze=o(" (Swin model)"),Sze=l(),Bm=a("li"),vee=a("strong"),Rze=o("t5"),Bze=o(" \u2014 "),ak=a("a"),Pze=o("T5Config"),Ize=o(" (T5 model)"),qze=l(),Pm=a("li"),Fee=a("strong"),Nze=o("tapas"),jze=o(" \u2014 "),nk=a("a"),Dze=o("TapasConfig"),Gze=o(" (TAPAS model)"),Oze=l(),Im=a("li"),Tee=a("strong"),Vze=o("tapex"),Xze=o(" \u2014 "),sk=a("a"),zze=o("BartConfig"),Qze=o(" (TAPEX model)"),Wze=l(),qm=a("li"),Mee=a("strong"),Hze=o("transfo-xl"),Uze=o(" \u2014 "),lk=a("a"),Jze=o("TransfoXLConfig"),Yze=o(" (Transformer-XL model)"),Kze=l(),Nm=a("li"),Eee=a("strong"),Zze=o("trocr"),eQe=o(" \u2014 "),ik=a("a"),oQe=o("TrOCRConfig"),rQe=o(" (TrOCR model)"),tQe=l(),jm=a("li"),Cee=a("strong"),aQe=o("unispeech"),nQe=o(" \u2014 "),dk=a("a"),sQe=o("UniSpeechConfig"),lQe=o(" (UniSpeech model)"),iQe=l(),Dm=a("li"),wee=a("strong"),dQe=o("unispeech-sat"),cQe=o(" \u2014 "),ck=a("a"),fQe=o("UniSpeechSatConfig"),mQe=o(" (UniSpeechSat model)"),gQe=l(),Gm=a("li"),Aee=a("strong"),hQe=o("van"),pQe=o(" \u2014 "),fk=a("a"),uQe=o("VanConfig"),_Qe=o(" (VAN model)"),bQe=l(),Om=a("li"),yee=a("strong"),vQe=o("vilt"),FQe=o(" \u2014 "),mk=a("a"),TQe=o("ViltConfig"),MQe=o(" (ViLT model)"),EQe=l(),Vm=a("li"),Lee=a("strong"),CQe=o("vision-encoder-decoder"),wQe=o(" \u2014 "),gk=a("a"),AQe=o("VisionEncoderDecoderConfig"),yQe=o(" (Vision Encoder decoder model)"),LQe=l(),Xm=a("li"),xee=a("strong"),xQe=o("vision-text-dual-encoder"),$Qe=o(" \u2014 "),hk=a("a"),kQe=o("VisionTextDualEncoderConfig"),SQe=o(" (VisionTextDualEncoder model)"),RQe=l(),zm=a("li"),$ee=a("strong"),BQe=o("visual_bert"),PQe=o(" \u2014 "),pk=a("a"),IQe=o("VisualBertConfig"),qQe=o(" (VisualBert model)"),NQe=l(),Qm=a("li"),kee=a("strong"),jQe=o("vit"),DQe=o(" \u2014 "),uk=a("a"),GQe=o("ViTConfig"),OQe=o(" (ViT model)"),VQe=l(),Wm=a("li"),See=a("strong"),XQe=o("vit_mae"),zQe=o(" \u2014 "),_k=a("a"),QQe=o("ViTMAEConfig"),WQe=o(" (ViTMAE model)"),HQe=l(),Hm=a("li"),Ree=a("strong"),UQe=o("wav2vec2"),JQe=o(" \u2014 "),bk=a("a"),YQe=o("Wav2Vec2Config"),KQe=o(" (Wav2Vec2 model)"),ZQe=l(),Um=a("li"),Bee=a("strong"),eWe=o("wavlm"),oWe=o(" \u2014 "),vk=a("a"),rWe=o("WavLMConfig"),tWe=o(" (WavLM model)"),aWe=l(),Jm=a("li"),Pee=a("strong"),nWe=o("xglm"),sWe=o(" \u2014 "),Fk=a("a"),lWe=o("XGLMConfig"),iWe=o(" (XGLM model)"),dWe=l(),Ym=a("li"),Iee=a("strong"),cWe=o("xlm"),fWe=o(" \u2014 "),Tk=a("a"),mWe=o("XLMConfig"),gWe=o(" (XLM model)"),hWe=l(),Km=a("li"),qee=a("strong"),pWe=o("xlm-prophetnet"),uWe=o(" \u2014 "),Mk=a("a"),_We=o("XLMProphetNetConfig"),bWe=o(" (XLMProphetNet model)"),vWe=l(),Zm=a("li"),Nee=a("strong"),FWe=o("xlm-roberta"),TWe=o(" \u2014 "),Ek=a("a"),MWe=o("XLMRobertaConfig"),EWe=o(" (XLM-RoBERTa model)"),CWe=l(),eg=a("li"),jee=a("strong"),wWe=o("xlm-roberta-xl"),AWe=o(" \u2014 "),Ck=a("a"),yWe=o("XLMRobertaXLConfig"),LWe=o(" (XLM-RoBERTa-XL model)"),xWe=l(),og=a("li"),Dee=a("strong"),$We=o("xlnet"),kWe=o(" \u2014 "),wk=a("a"),SWe=o("XLNetConfig"),RWe=o(" (XLNet model)"),BWe=l(),rg=a("li"),Gee=a("strong"),PWe=o("yoso"),IWe=o(" \u2014 "),Ak=a("a"),qWe=o("YosoConfig"),NWe=o(" (YOSO model)"),jWe=l(),F(tg.$$.fragment),DWe=l(),ag=a("div"),F(MA.$$.fragment),GWe=l(),Oee=a("p"),OWe=o("Register a new configuration for this class."),ORe=l(),fi=a("h2"),ng=a("a"),Vee=a("span"),F(EA.$$.fragment),VWe=l(),Xee=a("span"),XWe=o("AutoTokenizer"),VRe=l(),Co=a("div"),F(CA.$$.fragment),zWe=l(),wA=a("p"),QWe=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),yk=a("a"),WWe=o("AutoTokenizer.from_pretrained()"),HWe=o(" class method."),UWe=l(),AA=a("p"),JWe=o("This class cannot be instantiated directly using "),zee=a("code"),YWe=o("__init__()"),KWe=o(" (throws an error)."),ZWe=l(),Mr=a("div"),F(yA.$$.fragment),eHe=l(),Qee=a("p"),oHe=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),rHe=l(),Ta=a("p"),tHe=o("The tokenizer class to instantiate is selected based on the "),Wee=a("code"),aHe=o("model_type"),nHe=o(` property of the config object (either
passed as an argument or loaded from `),Hee=a("code"),sHe=o("pretrained_model_name_or_path"),lHe=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Uee=a("code"),iHe=o("pretrained_model_name_or_path"),dHe=o(":"),cHe=l(),k=a("ul"),yn=a("li"),Jee=a("strong"),fHe=o("albert"),mHe=o(" \u2014 "),Lk=a("a"),gHe=o("AlbertTokenizer"),hHe=o(" or "),xk=a("a"),pHe=o("AlbertTokenizerFast"),uHe=o(" (ALBERT model)"),_He=l(),Ln=a("li"),Yee=a("strong"),bHe=o("bart"),vHe=o(" \u2014 "),$k=a("a"),FHe=o("BartTokenizer"),THe=o(" or "),kk=a("a"),MHe=o("BartTokenizerFast"),EHe=o(" (BART model)"),CHe=l(),xn=a("li"),Kee=a("strong"),wHe=o("barthez"),AHe=o(" \u2014 "),Sk=a("a"),yHe=o("BarthezTokenizer"),LHe=o(" or "),Rk=a("a"),xHe=o("BarthezTokenizerFast"),$He=o(" (BARThez model)"),kHe=l(),sg=a("li"),Zee=a("strong"),SHe=o("bartpho"),RHe=o(" \u2014 "),Bk=a("a"),BHe=o("BartphoTokenizer"),PHe=o(" (BARTpho model)"),IHe=l(),$n=a("li"),eoe=a("strong"),qHe=o("bert"),NHe=o(" \u2014 "),Pk=a("a"),jHe=o("BertTokenizer"),DHe=o(" or "),Ik=a("a"),GHe=o("BertTokenizerFast"),OHe=o(" (BERT model)"),VHe=l(),lg=a("li"),ooe=a("strong"),XHe=o("bert-generation"),zHe=o(" \u2014 "),qk=a("a"),QHe=o("BertGenerationTokenizer"),WHe=o(" (Bert Generation model)"),HHe=l(),ig=a("li"),roe=a("strong"),UHe=o("bert-japanese"),JHe=o(" \u2014 "),Nk=a("a"),YHe=o("BertJapaneseTokenizer"),KHe=o(" (BertJapanese model)"),ZHe=l(),dg=a("li"),toe=a("strong"),eUe=o("bertweet"),oUe=o(" \u2014 "),jk=a("a"),rUe=o("BertweetTokenizer"),tUe=o(" (Bertweet model)"),aUe=l(),kn=a("li"),aoe=a("strong"),nUe=o("big_bird"),sUe=o(" \u2014 "),Dk=a("a"),lUe=o("BigBirdTokenizer"),iUe=o(" or "),Gk=a("a"),dUe=o("BigBirdTokenizerFast"),cUe=o(" (BigBird model)"),fUe=l(),Sn=a("li"),noe=a("strong"),mUe=o("bigbird_pegasus"),gUe=o(" \u2014 "),Ok=a("a"),hUe=o("PegasusTokenizer"),pUe=o(" or "),Vk=a("a"),uUe=o("PegasusTokenizerFast"),_Ue=o(" (BigBirdPegasus model)"),bUe=l(),Rn=a("li"),soe=a("strong"),vUe=o("blenderbot"),FUe=o(" \u2014 "),Xk=a("a"),TUe=o("BlenderbotTokenizer"),MUe=o(" or "),zk=a("a"),EUe=o("BlenderbotTokenizerFast"),CUe=o(" (Blenderbot model)"),wUe=l(),cg=a("li"),loe=a("strong"),AUe=o("blenderbot-small"),yUe=o(" \u2014 "),Qk=a("a"),LUe=o("BlenderbotSmallTokenizer"),xUe=o(" (BlenderbotSmall model)"),$Ue=l(),fg=a("li"),ioe=a("strong"),kUe=o("byt5"),SUe=o(" \u2014 "),Wk=a("a"),RUe=o("ByT5Tokenizer"),BUe=o(" (ByT5 model)"),PUe=l(),Bn=a("li"),doe=a("strong"),IUe=o("camembert"),qUe=o(" \u2014 "),Hk=a("a"),NUe=o("CamembertTokenizer"),jUe=o(" or "),Uk=a("a"),DUe=o("CamembertTokenizerFast"),GUe=o(" (CamemBERT model)"),OUe=l(),mg=a("li"),coe=a("strong"),VUe=o("canine"),XUe=o(" \u2014 "),Jk=a("a"),zUe=o("CanineTokenizer"),QUe=o(" (Canine model)"),WUe=l(),Pn=a("li"),foe=a("strong"),HUe=o("clip"),UUe=o(" \u2014 "),Yk=a("a"),JUe=o("CLIPTokenizer"),YUe=o(" or "),Kk=a("a"),KUe=o("CLIPTokenizerFast"),ZUe=o(" (CLIP model)"),eJe=l(),In=a("li"),moe=a("strong"),oJe=o("convbert"),rJe=o(" \u2014 "),Zk=a("a"),tJe=o("ConvBertTokenizer"),aJe=o(" or "),eS=a("a"),nJe=o("ConvBertTokenizerFast"),sJe=o(" (ConvBERT model)"),lJe=l(),qn=a("li"),goe=a("strong"),iJe=o("cpm"),dJe=o(" \u2014 "),oS=a("a"),cJe=o("CpmTokenizer"),fJe=o(" or "),hoe=a("code"),mJe=o("CpmTokenizerFast"),gJe=o(" (CPM model)"),hJe=l(),gg=a("li"),poe=a("strong"),pJe=o("ctrl"),uJe=o(" \u2014 "),rS=a("a"),_Je=o("CTRLTokenizer"),bJe=o(" (CTRL model)"),vJe=l(),Nn=a("li"),uoe=a("strong"),FJe=o("data2vec-text"),TJe=o(" \u2014 "),tS=a("a"),MJe=o("RobertaTokenizer"),EJe=o(" or "),aS=a("a"),CJe=o("RobertaTokenizerFast"),wJe=o(" (Data2VecText model)"),AJe=l(),jn=a("li"),_oe=a("strong"),yJe=o("deberta"),LJe=o(" \u2014 "),nS=a("a"),xJe=o("DebertaTokenizer"),$Je=o(" or "),sS=a("a"),kJe=o("DebertaTokenizerFast"),SJe=o(" (DeBERTa model)"),RJe=l(),Dn=a("li"),boe=a("strong"),BJe=o("deberta-v2"),PJe=o(" \u2014 "),lS=a("a"),IJe=o("DebertaV2Tokenizer"),qJe=o(" or "),iS=a("a"),NJe=o("DebertaV2TokenizerFast"),jJe=o(" (DeBERTa-v2 model)"),DJe=l(),Gn=a("li"),voe=a("strong"),GJe=o("distilbert"),OJe=o(" \u2014 "),dS=a("a"),VJe=o("DistilBertTokenizer"),XJe=o(" or "),cS=a("a"),zJe=o("DistilBertTokenizerFast"),QJe=o(" (DistilBERT model)"),WJe=l(),On=a("li"),Foe=a("strong"),HJe=o("dpr"),UJe=o(" \u2014 "),fS=a("a"),JJe=o("DPRQuestionEncoderTokenizer"),YJe=o(" or "),mS=a("a"),KJe=o("DPRQuestionEncoderTokenizerFast"),ZJe=o(" (DPR model)"),eYe=l(),Vn=a("li"),Toe=a("strong"),oYe=o("electra"),rYe=o(" \u2014 "),gS=a("a"),tYe=o("ElectraTokenizer"),aYe=o(" or "),hS=a("a"),nYe=o("ElectraTokenizerFast"),sYe=o(" (ELECTRA model)"),lYe=l(),hg=a("li"),Moe=a("strong"),iYe=o("flaubert"),dYe=o(" \u2014 "),pS=a("a"),cYe=o("FlaubertTokenizer"),fYe=o(" (FlauBERT model)"),mYe=l(),Xn=a("li"),Eoe=a("strong"),gYe=o("fnet"),hYe=o(" \u2014 "),uS=a("a"),pYe=o("FNetTokenizer"),uYe=o(" or "),_S=a("a"),_Ye=o("FNetTokenizerFast"),bYe=o(" (FNet model)"),vYe=l(),pg=a("li"),Coe=a("strong"),FYe=o("fsmt"),TYe=o(" \u2014 "),bS=a("a"),MYe=o("FSMTTokenizer"),EYe=o(" (FairSeq Machine-Translation model)"),CYe=l(),zn=a("li"),woe=a("strong"),wYe=o("funnel"),AYe=o(" \u2014 "),vS=a("a"),yYe=o("FunnelTokenizer"),LYe=o(" or "),FS=a("a"),xYe=o("FunnelTokenizerFast"),$Ye=o(" (Funnel Transformer model)"),kYe=l(),Qn=a("li"),Aoe=a("strong"),SYe=o("gpt2"),RYe=o(" \u2014 "),TS=a("a"),BYe=o("GPT2Tokenizer"),PYe=o(" or "),MS=a("a"),IYe=o("GPT2TokenizerFast"),qYe=o(" (OpenAI GPT-2 model)"),NYe=l(),Wn=a("li"),yoe=a("strong"),jYe=o("gpt_neo"),DYe=o(" \u2014 "),ES=a("a"),GYe=o("GPT2Tokenizer"),OYe=o(" or "),CS=a("a"),VYe=o("GPT2TokenizerFast"),XYe=o(" (GPT Neo model)"),zYe=l(),Hn=a("li"),Loe=a("strong"),QYe=o("gptj"),WYe=o(" \u2014 "),wS=a("a"),HYe=o("GPT2Tokenizer"),UYe=o(" or "),AS=a("a"),JYe=o("GPT2TokenizerFast"),YYe=o(" (GPT-J model)"),KYe=l(),Un=a("li"),xoe=a("strong"),ZYe=o("herbert"),eKe=o(" \u2014 "),yS=a("a"),oKe=o("HerbertTokenizer"),rKe=o(" or "),LS=a("a"),tKe=o("HerbertTokenizerFast"),aKe=o(" (HerBERT model)"),nKe=l(),ug=a("li"),$oe=a("strong"),sKe=o("hubert"),lKe=o(" \u2014 "),xS=a("a"),iKe=o("Wav2Vec2CTCTokenizer"),dKe=o(" (Hubert model)"),cKe=l(),Jn=a("li"),koe=a("strong"),fKe=o("ibert"),mKe=o(" \u2014 "),$S=a("a"),gKe=o("RobertaTokenizer"),hKe=o(" or "),kS=a("a"),pKe=o("RobertaTokenizerFast"),uKe=o(" (I-BERT model)"),_Ke=l(),Yn=a("li"),Soe=a("strong"),bKe=o("layoutlm"),vKe=o(" \u2014 "),SS=a("a"),FKe=o("LayoutLMTokenizer"),TKe=o(" or "),RS=a("a"),MKe=o("LayoutLMTokenizerFast"),EKe=o(" (LayoutLM model)"),CKe=l(),Kn=a("li"),Roe=a("strong"),wKe=o("layoutlmv2"),AKe=o(" \u2014 "),BS=a("a"),yKe=o("LayoutLMv2Tokenizer"),LKe=o(" or "),PS=a("a"),xKe=o("LayoutLMv2TokenizerFast"),$Ke=o(" (LayoutLMv2 model)"),kKe=l(),Zn=a("li"),Boe=a("strong"),SKe=o("layoutxlm"),RKe=o(" \u2014 "),IS=a("a"),BKe=o("LayoutXLMTokenizer"),PKe=o(" or "),qS=a("a"),IKe=o("LayoutXLMTokenizerFast"),qKe=o(" (LayoutXLM model)"),NKe=l(),es=a("li"),Poe=a("strong"),jKe=o("led"),DKe=o(" \u2014 "),NS=a("a"),GKe=o("LEDTokenizer"),OKe=o(" or "),jS=a("a"),VKe=o("LEDTokenizerFast"),XKe=o(" (LED model)"),zKe=l(),os=a("li"),Ioe=a("strong"),QKe=o("longformer"),WKe=o(" \u2014 "),DS=a("a"),HKe=o("LongformerTokenizer"),UKe=o(" or "),GS=a("a"),JKe=o("LongformerTokenizerFast"),YKe=o(" (Longformer model)"),KKe=l(),_g=a("li"),qoe=a("strong"),ZKe=o("luke"),eZe=o(" \u2014 "),OS=a("a"),oZe=o("LukeTokenizer"),rZe=o(" (LUKE model)"),tZe=l(),rs=a("li"),Noe=a("strong"),aZe=o("lxmert"),nZe=o(" \u2014 "),VS=a("a"),sZe=o("LxmertTokenizer"),lZe=o(" or "),XS=a("a"),iZe=o("LxmertTokenizerFast"),dZe=o(" (LXMERT model)"),cZe=l(),bg=a("li"),joe=a("strong"),fZe=o("m2m_100"),mZe=o(" \u2014 "),zS=a("a"),gZe=o("M2M100Tokenizer"),hZe=o(" (M2M100 model)"),pZe=l(),vg=a("li"),Doe=a("strong"),uZe=o("marian"),_Ze=o(" \u2014 "),QS=a("a"),bZe=o("MarianTokenizer"),vZe=o(" (Marian model)"),FZe=l(),ts=a("li"),Goe=a("strong"),TZe=o("mbart"),MZe=o(" \u2014 "),WS=a("a"),EZe=o("MBartTokenizer"),CZe=o(" or "),HS=a("a"),wZe=o("MBartTokenizerFast"),AZe=o(" (mBART model)"),yZe=l(),as=a("li"),Ooe=a("strong"),LZe=o("mbart50"),xZe=o(" \u2014 "),US=a("a"),$Ze=o("MBart50Tokenizer"),kZe=o(" or "),JS=a("a"),SZe=o("MBart50TokenizerFast"),RZe=o(" (mBART-50 model)"),BZe=l(),ns=a("li"),Voe=a("strong"),PZe=o("megatron-bert"),IZe=o(" \u2014 "),YS=a("a"),qZe=o("BertTokenizer"),NZe=o(" or "),KS=a("a"),jZe=o("BertTokenizerFast"),DZe=o(" (MegatronBert model)"),GZe=l(),Fg=a("li"),Xoe=a("strong"),OZe=o("mluke"),VZe=o(" \u2014 "),ZS=a("a"),XZe=o("MLukeTokenizer"),zZe=o(" (mLUKE model)"),QZe=l(),ss=a("li"),zoe=a("strong"),WZe=o("mobilebert"),HZe=o(" \u2014 "),eR=a("a"),UZe=o("MobileBertTokenizer"),JZe=o(" or "),oR=a("a"),YZe=o("MobileBertTokenizerFast"),KZe=o(" (MobileBERT model)"),ZZe=l(),ls=a("li"),Qoe=a("strong"),eeo=o("mpnet"),oeo=o(" \u2014 "),rR=a("a"),reo=o("MPNetTokenizer"),teo=o(" or "),tR=a("a"),aeo=o("MPNetTokenizerFast"),neo=o(" (MPNet model)"),seo=l(),is=a("li"),Woe=a("strong"),leo=o("mt5"),ieo=o(" \u2014 "),aR=a("a"),deo=o("MT5Tokenizer"),ceo=o(" or "),nR=a("a"),feo=o("MT5TokenizerFast"),meo=o(" (mT5 model)"),geo=l(),ds=a("li"),Hoe=a("strong"),heo=o("nystromformer"),peo=o(" \u2014 "),sR=a("a"),ueo=o("AlbertTokenizer"),_eo=o(" or "),lR=a("a"),beo=o("AlbertTokenizerFast"),veo=o(" (Nystromformer model)"),Feo=l(),cs=a("li"),Uoe=a("strong"),Teo=o("openai-gpt"),Meo=o(" \u2014 "),iR=a("a"),Eeo=o("OpenAIGPTTokenizer"),Ceo=o(" or "),dR=a("a"),weo=o("OpenAIGPTTokenizerFast"),Aeo=o(" (OpenAI GPT model)"),yeo=l(),fs=a("li"),Joe=a("strong"),Leo=o("pegasus"),xeo=o(" \u2014 "),cR=a("a"),$eo=o("PegasusTokenizer"),keo=o(" or "),fR=a("a"),Seo=o("PegasusTokenizerFast"),Reo=o(" (Pegasus model)"),Beo=l(),Tg=a("li"),Yoe=a("strong"),Peo=o("perceiver"),Ieo=o(" \u2014 "),mR=a("a"),qeo=o("PerceiverTokenizer"),Neo=o(" (Perceiver model)"),jeo=l(),Mg=a("li"),Koe=a("strong"),Deo=o("phobert"),Geo=o(" \u2014 "),gR=a("a"),Oeo=o("PhobertTokenizer"),Veo=o(" (PhoBERT model)"),Xeo=l(),Eg=a("li"),Zoe=a("strong"),zeo=o("plbart"),Qeo=o(" \u2014 "),hR=a("a"),Weo=o("PLBartTokenizer"),Heo=o(" (PLBart model)"),Ueo=l(),Cg=a("li"),ere=a("strong"),Jeo=o("prophetnet"),Yeo=o(" \u2014 "),pR=a("a"),Keo=o("ProphetNetTokenizer"),Zeo=o(" (ProphetNet model)"),eoo=l(),ms=a("li"),ore=a("strong"),ooo=o("qdqbert"),roo=o(" \u2014 "),uR=a("a"),too=o("BertTokenizer"),aoo=o(" or "),_R=a("a"),noo=o("BertTokenizerFast"),soo=o(" (QDQBert model)"),loo=l(),wg=a("li"),rre=a("strong"),ioo=o("rag"),doo=o(" \u2014 "),bR=a("a"),coo=o("RagTokenizer"),foo=o(" (RAG model)"),moo=l(),gs=a("li"),tre=a("strong"),goo=o("realm"),hoo=o(" \u2014 "),vR=a("a"),poo=o("RealmTokenizer"),uoo=o(" or "),FR=a("a"),_oo=o("RealmTokenizerFast"),boo=o(" (Realm model)"),voo=l(),hs=a("li"),are=a("strong"),Foo=o("reformer"),Too=o(" \u2014 "),TR=a("a"),Moo=o("ReformerTokenizer"),Eoo=o(" or "),MR=a("a"),Coo=o("ReformerTokenizerFast"),woo=o(" (Reformer model)"),Aoo=l(),ps=a("li"),nre=a("strong"),yoo=o("rembert"),Loo=o(" \u2014 "),ER=a("a"),xoo=o("RemBertTokenizer"),$oo=o(" or "),CR=a("a"),koo=o("RemBertTokenizerFast"),Soo=o(" (RemBERT model)"),Roo=l(),us=a("li"),sre=a("strong"),Boo=o("retribert"),Poo=o(" \u2014 "),wR=a("a"),Ioo=o("RetriBertTokenizer"),qoo=o(" or "),AR=a("a"),Noo=o("RetriBertTokenizerFast"),joo=o(" (RetriBERT model)"),Doo=l(),_s=a("li"),lre=a("strong"),Goo=o("roberta"),Ooo=o(" \u2014 "),yR=a("a"),Voo=o("RobertaTokenizer"),Xoo=o(" or "),LR=a("a"),zoo=o("RobertaTokenizerFast"),Qoo=o(" (RoBERTa model)"),Woo=l(),bs=a("li"),ire=a("strong"),Hoo=o("roformer"),Uoo=o(" \u2014 "),xR=a("a"),Joo=o("RoFormerTokenizer"),Yoo=o(" or "),$R=a("a"),Koo=o("RoFormerTokenizerFast"),Zoo=o(" (RoFormer model)"),ero=l(),Ag=a("li"),dre=a("strong"),oro=o("speech_to_text"),rro=o(" \u2014 "),kR=a("a"),tro=o("Speech2TextTokenizer"),aro=o(" (Speech2Text model)"),nro=l(),yg=a("li"),cre=a("strong"),sro=o("speech_to_text_2"),lro=o(" \u2014 "),SR=a("a"),iro=o("Speech2Text2Tokenizer"),dro=o(" (Speech2Text2 model)"),cro=l(),vs=a("li"),fre=a("strong"),fro=o("splinter"),mro=o(" \u2014 "),RR=a("a"),gro=o("SplinterTokenizer"),hro=o(" or "),BR=a("a"),pro=o("SplinterTokenizerFast"),uro=o(" (Splinter model)"),_ro=l(),Fs=a("li"),mre=a("strong"),bro=o("squeezebert"),vro=o(" \u2014 "),PR=a("a"),Fro=o("SqueezeBertTokenizer"),Tro=o(" or "),IR=a("a"),Mro=o("SqueezeBertTokenizerFast"),Ero=o(" (SqueezeBERT model)"),Cro=l(),Ts=a("li"),gre=a("strong"),wro=o("t5"),Aro=o(" \u2014 "),qR=a("a"),yro=o("T5Tokenizer"),Lro=o(" or "),NR=a("a"),xro=o("T5TokenizerFast"),$ro=o(" (T5 model)"),kro=l(),Lg=a("li"),hre=a("strong"),Sro=o("tapas"),Rro=o(" \u2014 "),jR=a("a"),Bro=o("TapasTokenizer"),Pro=o(" (TAPAS model)"),Iro=l(),xg=a("li"),pre=a("strong"),qro=o("tapex"),Nro=o(" \u2014 "),DR=a("a"),jro=o("TapexTokenizer"),Dro=o(" (TAPEX model)"),Gro=l(),$g=a("li"),ure=a("strong"),Oro=o("transfo-xl"),Vro=o(" \u2014 "),GR=a("a"),Xro=o("TransfoXLTokenizer"),zro=o(" (Transformer-XL model)"),Qro=l(),Ms=a("li"),_re=a("strong"),Wro=o("visual_bert"),Hro=o(" \u2014 "),OR=a("a"),Uro=o("BertTokenizer"),Jro=o(" or "),VR=a("a"),Yro=o("BertTokenizerFast"),Kro=o(" (VisualBert model)"),Zro=l(),kg=a("li"),bre=a("strong"),eto=o("wav2vec2"),oto=o(" \u2014 "),XR=a("a"),rto=o("Wav2Vec2CTCTokenizer"),tto=o(" (Wav2Vec2 model)"),ato=l(),Sg=a("li"),vre=a("strong"),nto=o("wav2vec2_phoneme"),sto=o(" \u2014 "),zR=a("a"),lto=o("Wav2Vec2PhonemeCTCTokenizer"),ito=o(" (Wav2Vec2Phoneme model)"),dto=l(),Es=a("li"),Fre=a("strong"),cto=o("xglm"),fto=o(" \u2014 "),QR=a("a"),mto=o("XGLMTokenizer"),gto=o(" or "),WR=a("a"),hto=o("XGLMTokenizerFast"),pto=o(" (XGLM model)"),uto=l(),Rg=a("li"),Tre=a("strong"),_to=o("xlm"),bto=o(" \u2014 "),HR=a("a"),vto=o("XLMTokenizer"),Fto=o(" (XLM model)"),Tto=l(),Bg=a("li"),Mre=a("strong"),Mto=o("xlm-prophetnet"),Eto=o(" \u2014 "),UR=a("a"),Cto=o("XLMProphetNetTokenizer"),wto=o(" (XLMProphetNet model)"),Ato=l(),Cs=a("li"),Ere=a("strong"),yto=o("xlm-roberta"),Lto=o(" \u2014 "),JR=a("a"),xto=o("XLMRobertaTokenizer"),$to=o(" or "),YR=a("a"),kto=o("XLMRobertaTokenizerFast"),Sto=o(" (XLM-RoBERTa model)"),Rto=l(),ws=a("li"),Cre=a("strong"),Bto=o("xlm-roberta-xl"),Pto=o(" \u2014 "),KR=a("a"),Ito=o("RobertaTokenizer"),qto=o(" or "),ZR=a("a"),Nto=o("RobertaTokenizerFast"),jto=o(" (XLM-RoBERTa-XL model)"),Dto=l(),As=a("li"),wre=a("strong"),Gto=o("xlnet"),Oto=o(" \u2014 "),eB=a("a"),Vto=o("XLNetTokenizer"),Xto=o(" or "),oB=a("a"),zto=o("XLNetTokenizerFast"),Qto=o(" (XLNet model)"),Wto=l(),ys=a("li"),Are=a("strong"),Hto=o("yoso"),Uto=o(" \u2014 "),rB=a("a"),Jto=o("AlbertTokenizer"),Yto=o(" or "),tB=a("a"),Kto=o("AlbertTokenizerFast"),Zto=o(" (YOSO model)"),eao=l(),F(Pg.$$.fragment),oao=l(),Ig=a("div"),F(LA.$$.fragment),rao=l(),yre=a("p"),tao=o("Register a new tokenizer in this mapping."),XRe=l(),mi=a("h2"),qg=a("a"),Lre=a("span"),F(xA.$$.fragment),aao=l(),xre=a("span"),nao=o("AutoFeatureExtractor"),zRe=l(),wo=a("div"),F($A.$$.fragment),sao=l(),kA=a("p"),lao=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),aB=a("a"),iao=o("AutoFeatureExtractor.from_pretrained()"),dao=o(" class method."),cao=l(),SA=a("p"),fao=o("This class cannot be instantiated directly using "),$re=a("code"),mao=o("__init__()"),gao=o(" (throws an error)."),hao=l(),ze=a("div"),F(RA.$$.fragment),pao=l(),kre=a("p"),uao=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),_ao=l(),Ma=a("p"),bao=o("The feature extractor class to instantiate is selected based on the "),Sre=a("code"),vao=o("model_type"),Fao=o(` property of the config object
(either passed as an argument or loaded from `),Rre=a("code"),Tao=o("pretrained_model_name_or_path"),Mao=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Bre=a("code"),Eao=o("pretrained_model_name_or_path"),Cao=o(":"),wao=l(),ae=a("ul"),Ng=a("li"),Pre=a("strong"),Aao=o("beit"),yao=o(" \u2014 "),nB=a("a"),Lao=o("BeitFeatureExtractor"),xao=o(" (BEiT model)"),$ao=l(),jg=a("li"),Ire=a("strong"),kao=o("clip"),Sao=o(" \u2014 "),sB=a("a"),Rao=o("CLIPFeatureExtractor"),Bao=o(" (CLIP model)"),Pao=l(),Dg=a("li"),qre=a("strong"),Iao=o("convnext"),qao=o(" \u2014 "),lB=a("a"),Nao=o("ConvNextFeatureExtractor"),jao=o(" (ConvNext model)"),Dao=l(),Gg=a("li"),Nre=a("strong"),Gao=o("data2vec-audio"),Oao=o(" \u2014 "),iB=a("a"),Vao=o("Wav2Vec2FeatureExtractor"),Xao=o(" (Data2VecAudio model)"),zao=l(),Og=a("li"),jre=a("strong"),Qao=o("data2vec-vision"),Wao=o(" \u2014 "),dB=a("a"),Hao=o("BeitFeatureExtractor"),Uao=o(" (Data2VecVision model)"),Jao=l(),Vg=a("li"),Dre=a("strong"),Yao=o("deit"),Kao=o(" \u2014 "),cB=a("a"),Zao=o("DeiTFeatureExtractor"),eno=o(" (DeiT model)"),ono=l(),Xg=a("li"),Gre=a("strong"),rno=o("detr"),tno=o(" \u2014 "),fB=a("a"),ano=o("DetrFeatureExtractor"),nno=o(" (DETR model)"),sno=l(),zg=a("li"),Ore=a("strong"),lno=o("dpt"),ino=o(" \u2014 "),mB=a("a"),dno=o("DPTFeatureExtractor"),cno=o(" (DPT model)"),fno=l(),Qg=a("li"),Vre=a("strong"),mno=o("glpn"),gno=o(" \u2014 "),gB=a("a"),hno=o("GLPNFeatureExtractor"),pno=o(" (GLPN model)"),uno=l(),Wg=a("li"),Xre=a("strong"),_no=o("hubert"),bno=o(" \u2014 "),hB=a("a"),vno=o("Wav2Vec2FeatureExtractor"),Fno=o(" (Hubert model)"),Tno=l(),Hg=a("li"),zre=a("strong"),Mno=o("layoutlmv2"),Eno=o(" \u2014 "),pB=a("a"),Cno=o("LayoutLMv2FeatureExtractor"),wno=o(" (LayoutLMv2 model)"),Ano=l(),Ug=a("li"),Qre=a("strong"),yno=o("maskformer"),Lno=o(" \u2014 "),uB=a("a"),xno=o("MaskFormerFeatureExtractor"),$no=o(" (MaskFormer model)"),kno=l(),Jg=a("li"),Wre=a("strong"),Sno=o("perceiver"),Rno=o(" \u2014 "),_B=a("a"),Bno=o("PerceiverFeatureExtractor"),Pno=o(" (Perceiver model)"),Ino=l(),Yg=a("li"),Hre=a("strong"),qno=o("poolformer"),Nno=o(" \u2014 "),bB=a("a"),jno=o("PoolFormerFeatureExtractor"),Dno=o(" (PoolFormer model)"),Gno=l(),Kg=a("li"),Ure=a("strong"),Ono=o("regnet"),Vno=o(" \u2014 "),vB=a("a"),Xno=o("ConvNextFeatureExtractor"),zno=o(" (RegNet model)"),Qno=l(),Zg=a("li"),Jre=a("strong"),Wno=o("resnet"),Hno=o(" \u2014 "),FB=a("a"),Uno=o("ConvNextFeatureExtractor"),Jno=o(" (ResNet model)"),Yno=l(),eh=a("li"),Yre=a("strong"),Kno=o("segformer"),Zno=o(" \u2014 "),TB=a("a"),eso=o("SegformerFeatureExtractor"),oso=o(" (SegFormer model)"),rso=l(),oh=a("li"),Kre=a("strong"),tso=o("speech_to_text"),aso=o(" \u2014 "),MB=a("a"),nso=o("Speech2TextFeatureExtractor"),sso=o(" (Speech2Text model)"),lso=l(),rh=a("li"),Zre=a("strong"),iso=o("swin"),dso=o(" \u2014 "),EB=a("a"),cso=o("ViTFeatureExtractor"),fso=o(" (Swin model)"),mso=l(),th=a("li"),ete=a("strong"),gso=o("van"),hso=o(" \u2014 "),CB=a("a"),pso=o("ConvNextFeatureExtractor"),uso=o(" (VAN model)"),_so=l(),ah=a("li"),ote=a("strong"),bso=o("vit"),vso=o(" \u2014 "),wB=a("a"),Fso=o("ViTFeatureExtractor"),Tso=o(" (ViT model)"),Mso=l(),nh=a("li"),rte=a("strong"),Eso=o("vit_mae"),Cso=o(" \u2014 "),AB=a("a"),wso=o("ViTFeatureExtractor"),Aso=o(" (ViTMAE model)"),yso=l(),sh=a("li"),tte=a("strong"),Lso=o("wav2vec2"),xso=o(" \u2014 "),yB=a("a"),$so=o("Wav2Vec2FeatureExtractor"),kso=o(" (Wav2Vec2 model)"),Sso=l(),F(lh.$$.fragment),Rso=l(),F(ih.$$.fragment),Bso=l(),dh=a("div"),F(BA.$$.fragment),Pso=l(),ate=a("p"),Iso=o("Register a new feature extractor for this class."),QRe=l(),gi=a("h2"),ch=a("a"),nte=a("span"),F(PA.$$.fragment),qso=l(),ste=a("span"),Nso=o("AutoProcessor"),WRe=l(),Ao=a("div"),F(IA.$$.fragment),jso=l(),qA=a("p"),Dso=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),LB=a("a"),Gso=o("AutoProcessor.from_pretrained()"),Oso=o(" class method."),Vso=l(),NA=a("p"),Xso=o("This class cannot be instantiated directly using "),lte=a("code"),zso=o("__init__()"),Qso=o(" (throws an error)."),Wso=l(),Qe=a("div"),F(jA.$$.fragment),Hso=l(),ite=a("p"),Uso=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),Jso=l(),hi=a("p"),Yso=o("The processor class to instantiate is selected based on the "),dte=a("code"),Kso=o("model_type"),Zso=o(` property of the config object (either
passed as an argument or loaded from `),cte=a("code"),elo=o("pretrained_model_name_or_path"),olo=o(" if possible):"),rlo=l(),be=a("ul"),fh=a("li"),fte=a("strong"),tlo=o("clip"),alo=o(" \u2014 "),xB=a("a"),nlo=o("CLIPProcessor"),slo=o(" (CLIP model)"),llo=l(),mh=a("li"),mte=a("strong"),ilo=o("layoutlmv2"),dlo=o(" \u2014 "),$B=a("a"),clo=o("LayoutLMv2Processor"),flo=o(" (LayoutLMv2 model)"),mlo=l(),gh=a("li"),gte=a("strong"),glo=o("layoutxlm"),hlo=o(" \u2014 "),kB=a("a"),plo=o("LayoutXLMProcessor"),ulo=o(" (LayoutXLM model)"),_lo=l(),hh=a("li"),hte=a("strong"),blo=o("sew"),vlo=o(" \u2014 "),SB=a("a"),Flo=o("Wav2Vec2Processor"),Tlo=o(" (SEW model)"),Mlo=l(),ph=a("li"),pte=a("strong"),Elo=o("sew-d"),Clo=o(" \u2014 "),RB=a("a"),wlo=o("Wav2Vec2Processor"),Alo=o(" (SEW-D model)"),ylo=l(),uh=a("li"),ute=a("strong"),Llo=o("speech_to_text"),xlo=o(" \u2014 "),BB=a("a"),$lo=o("Speech2TextProcessor"),klo=o(" (Speech2Text model)"),Slo=l(),_h=a("li"),_te=a("strong"),Rlo=o("speech_to_text_2"),Blo=o(" \u2014 "),PB=a("a"),Plo=o("Speech2Text2Processor"),Ilo=o(" (Speech2Text2 model)"),qlo=l(),bh=a("li"),bte=a("strong"),Nlo=o("trocr"),jlo=o(" \u2014 "),IB=a("a"),Dlo=o("TrOCRProcessor"),Glo=o(" (TrOCR model)"),Olo=l(),vh=a("li"),vte=a("strong"),Vlo=o("unispeech"),Xlo=o(" \u2014 "),qB=a("a"),zlo=o("Wav2Vec2Processor"),Qlo=o(" (UniSpeech model)"),Wlo=l(),Fh=a("li"),Fte=a("strong"),Hlo=o("unispeech-sat"),Ulo=o(" \u2014 "),NB=a("a"),Jlo=o("Wav2Vec2Processor"),Ylo=o(" (UniSpeechSat model)"),Klo=l(),Th=a("li"),Tte=a("strong"),Zlo=o("vilt"),eio=o(" \u2014 "),jB=a("a"),oio=o("ViltProcessor"),rio=o(" (ViLT model)"),tio=l(),Mh=a("li"),Mte=a("strong"),aio=o("vision-text-dual-encoder"),nio=o(" \u2014 "),DB=a("a"),sio=o("VisionTextDualEncoderProcessor"),lio=o(" (VisionTextDualEncoder model)"),iio=l(),Eh=a("li"),Ete=a("strong"),dio=o("wav2vec2"),cio=o(" \u2014 "),GB=a("a"),fio=o("Wav2Vec2Processor"),mio=o(" (Wav2Vec2 model)"),gio=l(),Ch=a("li"),Cte=a("strong"),hio=o("wavlm"),pio=o(" \u2014 "),OB=a("a"),uio=o("Wav2Vec2Processor"),_io=o(" (WavLM model)"),bio=l(),F(wh.$$.fragment),vio=l(),F(Ah.$$.fragment),Fio=l(),yh=a("div"),F(DA.$$.fragment),Tio=l(),wte=a("p"),Mio=o("Register a new processor for this class."),HRe=l(),pi=a("h2"),Lh=a("a"),Ate=a("span"),F(GA.$$.fragment),Eio=l(),yte=a("span"),Cio=o("AutoModel"),URe=l(),yo=a("div"),F(OA.$$.fragment),wio=l(),ui=a("p"),Aio=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),VB=a("a"),yio=o("from_pretrained()"),Lio=o(" class method or the "),XB=a("a"),xio=o("from_config()"),$io=o(` class
method.`),kio=l(),VA=a("p"),Sio=o("This class cannot be instantiated directly using "),Lte=a("code"),Rio=o("__init__()"),Bio=o(" (throws an error)."),Pio=l(),Zr=a("div"),F(XA.$$.fragment),Iio=l(),xte=a("p"),qio=o("Instantiates one of the base model classes of the library from a configuration."),Nio=l(),_i=a("p"),jio=o(`Note:
Loading a model from its configuration file does `),$te=a("strong"),Dio=o("not"),Gio=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zB=a("a"),Oio=o("from_pretrained()"),Vio=o(" to load the model weights."),Xio=l(),F(xh.$$.fragment),zio=l(),We=a("div"),F(zA.$$.fragment),Qio=l(),kte=a("p"),Wio=o("Instantiate one of the base model classes of the library from a pretrained model."),Hio=l(),Ea=a("p"),Uio=o("The model class to instantiate is selected based on the "),Ste=a("code"),Jio=o("model_type"),Yio=o(` property of the config object (either
passed as an argument or loaded from `),Rte=a("code"),Kio=o("pretrained_model_name_or_path"),Zio=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bte=a("code"),edo=o("pretrained_model_name_or_path"),odo=o(":"),rdo=l(),x=a("ul"),$h=a("li"),Pte=a("strong"),tdo=o("albert"),ado=o(" \u2014 "),QB=a("a"),ndo=o("AlbertModel"),sdo=o(" (ALBERT model)"),ldo=l(),kh=a("li"),Ite=a("strong"),ido=o("bart"),ddo=o(" \u2014 "),WB=a("a"),cdo=o("BartModel"),fdo=o(" (BART model)"),mdo=l(),Sh=a("li"),qte=a("strong"),gdo=o("beit"),hdo=o(" \u2014 "),HB=a("a"),pdo=o("BeitModel"),udo=o(" (BEiT model)"),_do=l(),Rh=a("li"),Nte=a("strong"),bdo=o("bert"),vdo=o(" \u2014 "),UB=a("a"),Fdo=o("BertModel"),Tdo=o(" (BERT model)"),Mdo=l(),Bh=a("li"),jte=a("strong"),Edo=o("bert-generation"),Cdo=o(" \u2014 "),JB=a("a"),wdo=o("BertGenerationEncoder"),Ado=o(" (Bert Generation model)"),ydo=l(),Ph=a("li"),Dte=a("strong"),Ldo=o("big_bird"),xdo=o(" \u2014 "),YB=a("a"),$do=o("BigBirdModel"),kdo=o(" (BigBird model)"),Sdo=l(),Ih=a("li"),Gte=a("strong"),Rdo=o("bigbird_pegasus"),Bdo=o(" \u2014 "),KB=a("a"),Pdo=o("BigBirdPegasusModel"),Ido=o(" (BigBirdPegasus model)"),qdo=l(),qh=a("li"),Ote=a("strong"),Ndo=o("blenderbot"),jdo=o(" \u2014 "),ZB=a("a"),Ddo=o("BlenderbotModel"),Gdo=o(" (Blenderbot model)"),Odo=l(),Nh=a("li"),Vte=a("strong"),Vdo=o("blenderbot-small"),Xdo=o(" \u2014 "),eP=a("a"),zdo=o("BlenderbotSmallModel"),Qdo=o(" (BlenderbotSmall model)"),Wdo=l(),jh=a("li"),Xte=a("strong"),Hdo=o("camembert"),Udo=o(" \u2014 "),oP=a("a"),Jdo=o("CamembertModel"),Ydo=o(" (CamemBERT model)"),Kdo=l(),Dh=a("li"),zte=a("strong"),Zdo=o("canine"),eco=o(" \u2014 "),rP=a("a"),oco=o("CanineModel"),rco=o(" (Canine model)"),tco=l(),Gh=a("li"),Qte=a("strong"),aco=o("clip"),nco=o(" \u2014 "),tP=a("a"),sco=o("CLIPModel"),lco=o(" (CLIP model)"),ico=l(),Oh=a("li"),Wte=a("strong"),dco=o("convbert"),cco=o(" \u2014 "),aP=a("a"),fco=o("ConvBertModel"),mco=o(" (ConvBERT model)"),gco=l(),Vh=a("li"),Hte=a("strong"),hco=o("convnext"),pco=o(" \u2014 "),nP=a("a"),uco=o("ConvNextModel"),_co=o(" (ConvNext model)"),bco=l(),Xh=a("li"),Ute=a("strong"),vco=o("ctrl"),Fco=o(" \u2014 "),sP=a("a"),Tco=o("CTRLModel"),Mco=o(" (CTRL model)"),Eco=l(),zh=a("li"),Jte=a("strong"),Cco=o("data2vec-audio"),wco=o(" \u2014 "),lP=a("a"),Aco=o("Data2VecAudioModel"),yco=o(" (Data2VecAudio model)"),Lco=l(),Qh=a("li"),Yte=a("strong"),xco=o("data2vec-text"),$co=o(" \u2014 "),iP=a("a"),kco=o("Data2VecTextModel"),Sco=o(" (Data2VecText model)"),Rco=l(),Wh=a("li"),Kte=a("strong"),Bco=o("data2vec-vision"),Pco=o(" \u2014 "),dP=a("a"),Ico=o("Data2VecVisionModel"),qco=o(" (Data2VecVision model)"),Nco=l(),Hh=a("li"),Zte=a("strong"),jco=o("deberta"),Dco=o(" \u2014 "),cP=a("a"),Gco=o("DebertaModel"),Oco=o(" (DeBERTa model)"),Vco=l(),Uh=a("li"),eae=a("strong"),Xco=o("deberta-v2"),zco=o(" \u2014 "),fP=a("a"),Qco=o("DebertaV2Model"),Wco=o(" (DeBERTa-v2 model)"),Hco=l(),Jh=a("li"),oae=a("strong"),Uco=o("decision_transformer"),Jco=o(" \u2014 "),mP=a("a"),Yco=o("DecisionTransformerModel"),Kco=o(" (Decision Transformer model)"),Zco=l(),Yh=a("li"),rae=a("strong"),efo=o("deit"),ofo=o(" \u2014 "),gP=a("a"),rfo=o("DeiTModel"),tfo=o(" (DeiT model)"),afo=l(),Kh=a("li"),tae=a("strong"),nfo=o("detr"),sfo=o(" \u2014 "),hP=a("a"),lfo=o("DetrModel"),ifo=o(" (DETR model)"),dfo=l(),Zh=a("li"),aae=a("strong"),cfo=o("distilbert"),ffo=o(" \u2014 "),pP=a("a"),mfo=o("DistilBertModel"),gfo=o(" (DistilBERT model)"),hfo=l(),ep=a("li"),nae=a("strong"),pfo=o("dpr"),ufo=o(" \u2014 "),uP=a("a"),_fo=o("DPRQuestionEncoder"),bfo=o(" (DPR model)"),vfo=l(),op=a("li"),sae=a("strong"),Ffo=o("dpt"),Tfo=o(" \u2014 "),_P=a("a"),Mfo=o("DPTModel"),Efo=o(" (DPT model)"),Cfo=l(),rp=a("li"),lae=a("strong"),wfo=o("electra"),Afo=o(" \u2014 "),bP=a("a"),yfo=o("ElectraModel"),Lfo=o(" (ELECTRA model)"),xfo=l(),tp=a("li"),iae=a("strong"),$fo=o("flaubert"),kfo=o(" \u2014 "),vP=a("a"),Sfo=o("FlaubertModel"),Rfo=o(" (FlauBERT model)"),Bfo=l(),ap=a("li"),dae=a("strong"),Pfo=o("fnet"),Ifo=o(" \u2014 "),FP=a("a"),qfo=o("FNetModel"),Nfo=o(" (FNet model)"),jfo=l(),np=a("li"),cae=a("strong"),Dfo=o("fsmt"),Gfo=o(" \u2014 "),TP=a("a"),Ofo=o("FSMTModel"),Vfo=o(" (FairSeq Machine-Translation model)"),Xfo=l(),Ls=a("li"),fae=a("strong"),zfo=o("funnel"),Qfo=o(" \u2014 "),MP=a("a"),Wfo=o("FunnelModel"),Hfo=o(" or "),EP=a("a"),Ufo=o("FunnelBaseModel"),Jfo=o(" (Funnel Transformer model)"),Yfo=l(),sp=a("li"),mae=a("strong"),Kfo=o("glpn"),Zfo=o(" \u2014 "),CP=a("a"),emo=o("GLPNModel"),omo=o(" (GLPN model)"),rmo=l(),lp=a("li"),gae=a("strong"),tmo=o("gpt2"),amo=o(" \u2014 "),wP=a("a"),nmo=o("GPT2Model"),smo=o(" (OpenAI GPT-2 model)"),lmo=l(),ip=a("li"),hae=a("strong"),imo=o("gpt_neo"),dmo=o(" \u2014 "),AP=a("a"),cmo=o("GPTNeoModel"),fmo=o(" (GPT Neo model)"),mmo=l(),dp=a("li"),pae=a("strong"),gmo=o("gptj"),hmo=o(" \u2014 "),yP=a("a"),pmo=o("GPTJModel"),umo=o(" (GPT-J model)"),_mo=l(),cp=a("li"),uae=a("strong"),bmo=o("hubert"),vmo=o(" \u2014 "),LP=a("a"),Fmo=o("HubertModel"),Tmo=o(" (Hubert model)"),Mmo=l(),fp=a("li"),_ae=a("strong"),Emo=o("ibert"),Cmo=o(" \u2014 "),xP=a("a"),wmo=o("IBertModel"),Amo=o(" (I-BERT model)"),ymo=l(),mp=a("li"),bae=a("strong"),Lmo=o("imagegpt"),xmo=o(" \u2014 "),$P=a("a"),$mo=o("ImageGPTModel"),kmo=o(" (ImageGPT model)"),Smo=l(),gp=a("li"),vae=a("strong"),Rmo=o("layoutlm"),Bmo=o(" \u2014 "),kP=a("a"),Pmo=o("LayoutLMModel"),Imo=o(" (LayoutLM model)"),qmo=l(),hp=a("li"),Fae=a("strong"),Nmo=o("layoutlmv2"),jmo=o(" \u2014 "),SP=a("a"),Dmo=o("LayoutLMv2Model"),Gmo=o(" (LayoutLMv2 model)"),Omo=l(),pp=a("li"),Tae=a("strong"),Vmo=o("led"),Xmo=o(" \u2014 "),RP=a("a"),zmo=o("LEDModel"),Qmo=o(" (LED model)"),Wmo=l(),up=a("li"),Mae=a("strong"),Hmo=o("longformer"),Umo=o(" \u2014 "),BP=a("a"),Jmo=o("LongformerModel"),Ymo=o(" (Longformer model)"),Kmo=l(),_p=a("li"),Eae=a("strong"),Zmo=o("luke"),ego=o(" \u2014 "),PP=a("a"),ogo=o("LukeModel"),rgo=o(" (LUKE model)"),tgo=l(),bp=a("li"),Cae=a("strong"),ago=o("lxmert"),ngo=o(" \u2014 "),IP=a("a"),sgo=o("LxmertModel"),lgo=o(" (LXMERT model)"),igo=l(),vp=a("li"),wae=a("strong"),dgo=o("m2m_100"),cgo=o(" \u2014 "),qP=a("a"),fgo=o("M2M100Model"),mgo=o(" (M2M100 model)"),ggo=l(),Fp=a("li"),Aae=a("strong"),hgo=o("marian"),pgo=o(" \u2014 "),NP=a("a"),ugo=o("MarianModel"),_go=o(" (Marian model)"),bgo=l(),Tp=a("li"),yae=a("strong"),vgo=o("maskformer"),Fgo=o(" \u2014 "),jP=a("a"),Tgo=o("MaskFormerModel"),Mgo=o(" (MaskFormer model)"),Ego=l(),Mp=a("li"),Lae=a("strong"),Cgo=o("mbart"),wgo=o(" \u2014 "),DP=a("a"),Ago=o("MBartModel"),ygo=o(" (mBART model)"),Lgo=l(),Ep=a("li"),xae=a("strong"),xgo=o("megatron-bert"),$go=o(" \u2014 "),GP=a("a"),kgo=o("MegatronBertModel"),Sgo=o(" (MegatronBert model)"),Rgo=l(),Cp=a("li"),$ae=a("strong"),Bgo=o("mobilebert"),Pgo=o(" \u2014 "),OP=a("a"),Igo=o("MobileBertModel"),qgo=o(" (MobileBERT model)"),Ngo=l(),wp=a("li"),kae=a("strong"),jgo=o("mpnet"),Dgo=o(" \u2014 "),VP=a("a"),Ggo=o("MPNetModel"),Ogo=o(" (MPNet model)"),Vgo=l(),Ap=a("li"),Sae=a("strong"),Xgo=o("mt5"),zgo=o(" \u2014 "),XP=a("a"),Qgo=o("MT5Model"),Wgo=o(" (mT5 model)"),Hgo=l(),yp=a("li"),Rae=a("strong"),Ugo=o("nystromformer"),Jgo=o(" \u2014 "),zP=a("a"),Ygo=o("NystromformerModel"),Kgo=o(" (Nystromformer model)"),Zgo=l(),Lp=a("li"),Bae=a("strong"),eho=o("openai-gpt"),oho=o(" \u2014 "),QP=a("a"),rho=o("OpenAIGPTModel"),tho=o(" (OpenAI GPT model)"),aho=l(),xp=a("li"),Pae=a("strong"),nho=o("pegasus"),sho=o(" \u2014 "),WP=a("a"),lho=o("PegasusModel"),iho=o(" (Pegasus model)"),dho=l(),$p=a("li"),Iae=a("strong"),cho=o("perceiver"),fho=o(" \u2014 "),HP=a("a"),mho=o("PerceiverModel"),gho=o(" (Perceiver model)"),hho=l(),kp=a("li"),qae=a("strong"),pho=o("plbart"),uho=o(" \u2014 "),UP=a("a"),_ho=o("PLBartModel"),bho=o(" (PLBart model)"),vho=l(),Sp=a("li"),Nae=a("strong"),Fho=o("poolformer"),Tho=o(" \u2014 "),JP=a("a"),Mho=o("PoolFormerModel"),Eho=o(" (PoolFormer model)"),Cho=l(),Rp=a("li"),jae=a("strong"),who=o("prophetnet"),Aho=o(" \u2014 "),YP=a("a"),yho=o("ProphetNetModel"),Lho=o(" (ProphetNet model)"),xho=l(),Bp=a("li"),Dae=a("strong"),$ho=o("qdqbert"),kho=o(" \u2014 "),KP=a("a"),Sho=o("QDQBertModel"),Rho=o(" (QDQBert model)"),Bho=l(),Pp=a("li"),Gae=a("strong"),Pho=o("reformer"),Iho=o(" \u2014 "),ZP=a("a"),qho=o("ReformerModel"),Nho=o(" (Reformer model)"),jho=l(),Ip=a("li"),Oae=a("strong"),Dho=o("regnet"),Gho=o(" \u2014 "),eI=a("a"),Oho=o("RegNetModel"),Vho=o(" (RegNet model)"),Xho=l(),qp=a("li"),Vae=a("strong"),zho=o("rembert"),Qho=o(" \u2014 "),oI=a("a"),Who=o("RemBertModel"),Hho=o(" (RemBERT model)"),Uho=l(),Np=a("li"),Xae=a("strong"),Jho=o("resnet"),Yho=o(" \u2014 "),rI=a("a"),Kho=o("ResNetModel"),Zho=o(" (ResNet model)"),epo=l(),jp=a("li"),zae=a("strong"),opo=o("retribert"),rpo=o(" \u2014 "),tI=a("a"),tpo=o("RetriBertModel"),apo=o(" (RetriBERT model)"),npo=l(),Dp=a("li"),Qae=a("strong"),spo=o("roberta"),lpo=o(" \u2014 "),aI=a("a"),ipo=o("RobertaModel"),dpo=o(" (RoBERTa model)"),cpo=l(),Gp=a("li"),Wae=a("strong"),fpo=o("roformer"),mpo=o(" \u2014 "),nI=a("a"),gpo=o("RoFormerModel"),hpo=o(" (RoFormer model)"),ppo=l(),Op=a("li"),Hae=a("strong"),upo=o("segformer"),_po=o(" \u2014 "),sI=a("a"),bpo=o("SegformerModel"),vpo=o(" (SegFormer model)"),Fpo=l(),Vp=a("li"),Uae=a("strong"),Tpo=o("sew"),Mpo=o(" \u2014 "),lI=a("a"),Epo=o("SEWModel"),Cpo=o(" (SEW model)"),wpo=l(),Xp=a("li"),Jae=a("strong"),Apo=o("sew-d"),ypo=o(" \u2014 "),iI=a("a"),Lpo=o("SEWDModel"),xpo=o(" (SEW-D model)"),$po=l(),zp=a("li"),Yae=a("strong"),kpo=o("speech_to_text"),Spo=o(" \u2014 "),dI=a("a"),Rpo=o("Speech2TextModel"),Bpo=o(" (Speech2Text model)"),Ppo=l(),Qp=a("li"),Kae=a("strong"),Ipo=o("splinter"),qpo=o(" \u2014 "),cI=a("a"),Npo=o("SplinterModel"),jpo=o(" (Splinter model)"),Dpo=l(),Wp=a("li"),Zae=a("strong"),Gpo=o("squeezebert"),Opo=o(" \u2014 "),fI=a("a"),Vpo=o("SqueezeBertModel"),Xpo=o(" (SqueezeBERT model)"),zpo=l(),Hp=a("li"),ene=a("strong"),Qpo=o("swin"),Wpo=o(" \u2014 "),mI=a("a"),Hpo=o("SwinModel"),Upo=o(" (Swin model)"),Jpo=l(),Up=a("li"),one=a("strong"),Ypo=o("t5"),Kpo=o(" \u2014 "),gI=a("a"),Zpo=o("T5Model"),euo=o(" (T5 model)"),ouo=l(),Jp=a("li"),rne=a("strong"),ruo=o("tapas"),tuo=o(" \u2014 "),hI=a("a"),auo=o("TapasModel"),nuo=o(" (TAPAS model)"),suo=l(),Yp=a("li"),tne=a("strong"),luo=o("transfo-xl"),iuo=o(" \u2014 "),pI=a("a"),duo=o("TransfoXLModel"),cuo=o(" (Transformer-XL model)"),fuo=l(),Kp=a("li"),ane=a("strong"),muo=o("unispeech"),guo=o(" \u2014 "),uI=a("a"),huo=o("UniSpeechModel"),puo=o(" (UniSpeech model)"),uuo=l(),Zp=a("li"),nne=a("strong"),_uo=o("unispeech-sat"),buo=o(" \u2014 "),_I=a("a"),vuo=o("UniSpeechSatModel"),Fuo=o(" (UniSpeechSat model)"),Tuo=l(),eu=a("li"),sne=a("strong"),Muo=o("van"),Euo=o(" \u2014 "),bI=a("a"),Cuo=o("VanModel"),wuo=o(" (VAN model)"),Auo=l(),ou=a("li"),lne=a("strong"),yuo=o("vilt"),Luo=o(" \u2014 "),vI=a("a"),xuo=o("ViltModel"),$uo=o(" (ViLT model)"),kuo=l(),ru=a("li"),ine=a("strong"),Suo=o("vision-text-dual-encoder"),Ruo=o(" \u2014 "),FI=a("a"),Buo=o("VisionTextDualEncoderModel"),Puo=o(" (VisionTextDualEncoder model)"),Iuo=l(),tu=a("li"),dne=a("strong"),quo=o("visual_bert"),Nuo=o(" \u2014 "),TI=a("a"),juo=o("VisualBertModel"),Duo=o(" (VisualBert model)"),Guo=l(),au=a("li"),cne=a("strong"),Ouo=o("vit"),Vuo=o(" \u2014 "),MI=a("a"),Xuo=o("ViTModel"),zuo=o(" (ViT model)"),Quo=l(),nu=a("li"),fne=a("strong"),Wuo=o("vit_mae"),Huo=o(" \u2014 "),EI=a("a"),Uuo=o("ViTMAEModel"),Juo=o(" (ViTMAE model)"),Yuo=l(),su=a("li"),mne=a("strong"),Kuo=o("wav2vec2"),Zuo=o(" \u2014 "),CI=a("a"),e_o=o("Wav2Vec2Model"),o_o=o(" (Wav2Vec2 model)"),r_o=l(),lu=a("li"),gne=a("strong"),t_o=o("wavlm"),a_o=o(" \u2014 "),wI=a("a"),n_o=o("WavLMModel"),s_o=o(" (WavLM model)"),l_o=l(),iu=a("li"),hne=a("strong"),i_o=o("xglm"),d_o=o(" \u2014 "),AI=a("a"),c_o=o("XGLMModel"),f_o=o(" (XGLM model)"),m_o=l(),du=a("li"),pne=a("strong"),g_o=o("xlm"),h_o=o(" \u2014 "),yI=a("a"),p_o=o("XLMModel"),u_o=o(" (XLM model)"),__o=l(),cu=a("li"),une=a("strong"),b_o=o("xlm-prophetnet"),v_o=o(" \u2014 "),LI=a("a"),F_o=o("XLMProphetNetModel"),T_o=o(" (XLMProphetNet model)"),M_o=l(),fu=a("li"),_ne=a("strong"),E_o=o("xlm-roberta"),C_o=o(" \u2014 "),xI=a("a"),w_o=o("XLMRobertaModel"),A_o=o(" (XLM-RoBERTa model)"),y_o=l(),mu=a("li"),bne=a("strong"),L_o=o("xlm-roberta-xl"),x_o=o(" \u2014 "),$I=a("a"),$_o=o("XLMRobertaXLModel"),k_o=o(" (XLM-RoBERTa-XL model)"),S_o=l(),gu=a("li"),vne=a("strong"),R_o=o("xlnet"),B_o=o(" \u2014 "),kI=a("a"),P_o=o("XLNetModel"),I_o=o(" (XLNet model)"),q_o=l(),hu=a("li"),Fne=a("strong"),N_o=o("yoso"),j_o=o(" \u2014 "),SI=a("a"),D_o=o("YosoModel"),G_o=o(" (YOSO model)"),O_o=l(),pu=a("p"),V_o=o("The model is set in evaluation mode by default using "),Tne=a("code"),X_o=o("model.eval()"),z_o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Mne=a("code"),Q_o=o("model.train()"),W_o=l(),F(uu.$$.fragment),JRe=l(),bi=a("h2"),_u=a("a"),Ene=a("span"),F(QA.$$.fragment),H_o=l(),Cne=a("span"),U_o=o("AutoModelForPreTraining"),YRe=l(),Lo=a("div"),F(WA.$$.fragment),J_o=l(),vi=a("p"),Y_o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),RI=a("a"),K_o=o("from_pretrained()"),Z_o=o(" class method or the "),BI=a("a"),e1o=o("from_config()"),o1o=o(` class
method.`),r1o=l(),HA=a("p"),t1o=o("This class cannot be instantiated directly using "),wne=a("code"),a1o=o("__init__()"),n1o=o(" (throws an error)."),s1o=l(),et=a("div"),F(UA.$$.fragment),l1o=l(),Ane=a("p"),i1o=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),d1o=l(),Fi=a("p"),c1o=o(`Note:
Loading a model from its configuration file does `),yne=a("strong"),f1o=o("not"),m1o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),PI=a("a"),g1o=o("from_pretrained()"),h1o=o(" to load the model weights."),p1o=l(),F(bu.$$.fragment),u1o=l(),He=a("div"),F(JA.$$.fragment),_1o=l(),Lne=a("p"),b1o=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),v1o=l(),Ca=a("p"),F1o=o("The model class to instantiate is selected based on the "),xne=a("code"),T1o=o("model_type"),M1o=o(` property of the config object (either
passed as an argument or loaded from `),$ne=a("code"),E1o=o("pretrained_model_name_or_path"),C1o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kne=a("code"),w1o=o("pretrained_model_name_or_path"),A1o=o(":"),y1o=l(),G=a("ul"),vu=a("li"),Sne=a("strong"),L1o=o("albert"),x1o=o(" \u2014 "),II=a("a"),$1o=o("AlbertForPreTraining"),k1o=o(" (ALBERT model)"),S1o=l(),Fu=a("li"),Rne=a("strong"),R1o=o("bart"),B1o=o(" \u2014 "),qI=a("a"),P1o=o("BartForConditionalGeneration"),I1o=o(" (BART model)"),q1o=l(),Tu=a("li"),Bne=a("strong"),N1o=o("bert"),j1o=o(" \u2014 "),NI=a("a"),D1o=o("BertForPreTraining"),G1o=o(" (BERT model)"),O1o=l(),Mu=a("li"),Pne=a("strong"),V1o=o("big_bird"),X1o=o(" \u2014 "),jI=a("a"),z1o=o("BigBirdForPreTraining"),Q1o=o(" (BigBird model)"),W1o=l(),Eu=a("li"),Ine=a("strong"),H1o=o("camembert"),U1o=o(" \u2014 "),DI=a("a"),J1o=o("CamembertForMaskedLM"),Y1o=o(" (CamemBERT model)"),K1o=l(),Cu=a("li"),qne=a("strong"),Z1o=o("ctrl"),e9o=o(" \u2014 "),GI=a("a"),o9o=o("CTRLLMHeadModel"),r9o=o(" (CTRL model)"),t9o=l(),wu=a("li"),Nne=a("strong"),a9o=o("data2vec-text"),n9o=o(" \u2014 "),OI=a("a"),s9o=o("Data2VecTextForMaskedLM"),l9o=o(" (Data2VecText model)"),i9o=l(),Au=a("li"),jne=a("strong"),d9o=o("deberta"),c9o=o(" \u2014 "),VI=a("a"),f9o=o("DebertaForMaskedLM"),m9o=o(" (DeBERTa model)"),g9o=l(),yu=a("li"),Dne=a("strong"),h9o=o("deberta-v2"),p9o=o(" \u2014 "),XI=a("a"),u9o=o("DebertaV2ForMaskedLM"),_9o=o(" (DeBERTa-v2 model)"),b9o=l(),Lu=a("li"),Gne=a("strong"),v9o=o("distilbert"),F9o=o(" \u2014 "),zI=a("a"),T9o=o("DistilBertForMaskedLM"),M9o=o(" (DistilBERT model)"),E9o=l(),xu=a("li"),One=a("strong"),C9o=o("electra"),w9o=o(" \u2014 "),QI=a("a"),A9o=o("ElectraForPreTraining"),y9o=o(" (ELECTRA model)"),L9o=l(),$u=a("li"),Vne=a("strong"),x9o=o("flaubert"),$9o=o(" \u2014 "),WI=a("a"),k9o=o("FlaubertWithLMHeadModel"),S9o=o(" (FlauBERT model)"),R9o=l(),ku=a("li"),Xne=a("strong"),B9o=o("fnet"),P9o=o(" \u2014 "),HI=a("a"),I9o=o("FNetForPreTraining"),q9o=o(" (FNet model)"),N9o=l(),Su=a("li"),zne=a("strong"),j9o=o("fsmt"),D9o=o(" \u2014 "),UI=a("a"),G9o=o("FSMTForConditionalGeneration"),O9o=o(" (FairSeq Machine-Translation model)"),V9o=l(),Ru=a("li"),Qne=a("strong"),X9o=o("funnel"),z9o=o(" \u2014 "),JI=a("a"),Q9o=o("FunnelForPreTraining"),W9o=o(" (Funnel Transformer model)"),H9o=l(),Bu=a("li"),Wne=a("strong"),U9o=o("gpt2"),J9o=o(" \u2014 "),YI=a("a"),Y9o=o("GPT2LMHeadModel"),K9o=o(" (OpenAI GPT-2 model)"),Z9o=l(),Pu=a("li"),Hne=a("strong"),ebo=o("ibert"),obo=o(" \u2014 "),KI=a("a"),rbo=o("IBertForMaskedLM"),tbo=o(" (I-BERT model)"),abo=l(),Iu=a("li"),Une=a("strong"),nbo=o("layoutlm"),sbo=o(" \u2014 "),ZI=a("a"),lbo=o("LayoutLMForMaskedLM"),ibo=o(" (LayoutLM model)"),dbo=l(),qu=a("li"),Jne=a("strong"),cbo=o("longformer"),fbo=o(" \u2014 "),eq=a("a"),mbo=o("LongformerForMaskedLM"),gbo=o(" (Longformer model)"),hbo=l(),Nu=a("li"),Yne=a("strong"),pbo=o("lxmert"),ubo=o(" \u2014 "),oq=a("a"),_bo=o("LxmertForPreTraining"),bbo=o(" (LXMERT model)"),vbo=l(),ju=a("li"),Kne=a("strong"),Fbo=o("megatron-bert"),Tbo=o(" \u2014 "),rq=a("a"),Mbo=o("MegatronBertForPreTraining"),Ebo=o(" (MegatronBert model)"),Cbo=l(),Du=a("li"),Zne=a("strong"),wbo=o("mobilebert"),Abo=o(" \u2014 "),tq=a("a"),ybo=o("MobileBertForPreTraining"),Lbo=o(" (MobileBERT model)"),xbo=l(),Gu=a("li"),ese=a("strong"),$bo=o("mpnet"),kbo=o(" \u2014 "),aq=a("a"),Sbo=o("MPNetForMaskedLM"),Rbo=o(" (MPNet model)"),Bbo=l(),Ou=a("li"),ose=a("strong"),Pbo=o("openai-gpt"),Ibo=o(" \u2014 "),nq=a("a"),qbo=o("OpenAIGPTLMHeadModel"),Nbo=o(" (OpenAI GPT model)"),jbo=l(),Vu=a("li"),rse=a("strong"),Dbo=o("retribert"),Gbo=o(" \u2014 "),sq=a("a"),Obo=o("RetriBertModel"),Vbo=o(" (RetriBERT model)"),Xbo=l(),Xu=a("li"),tse=a("strong"),zbo=o("roberta"),Qbo=o(" \u2014 "),lq=a("a"),Wbo=o("RobertaForMaskedLM"),Hbo=o(" (RoBERTa model)"),Ubo=l(),zu=a("li"),ase=a("strong"),Jbo=o("squeezebert"),Ybo=o(" \u2014 "),iq=a("a"),Kbo=o("SqueezeBertForMaskedLM"),Zbo=o(" (SqueezeBERT model)"),e2o=l(),Qu=a("li"),nse=a("strong"),o2o=o("t5"),r2o=o(" \u2014 "),dq=a("a"),t2o=o("T5ForConditionalGeneration"),a2o=o(" (T5 model)"),n2o=l(),Wu=a("li"),sse=a("strong"),s2o=o("tapas"),l2o=o(" \u2014 "),cq=a("a"),i2o=o("TapasForMaskedLM"),d2o=o(" (TAPAS model)"),c2o=l(),Hu=a("li"),lse=a("strong"),f2o=o("transfo-xl"),m2o=o(" \u2014 "),fq=a("a"),g2o=o("TransfoXLLMHeadModel"),h2o=o(" (Transformer-XL model)"),p2o=l(),Uu=a("li"),ise=a("strong"),u2o=o("unispeech"),_2o=o(" \u2014 "),mq=a("a"),b2o=o("UniSpeechForPreTraining"),v2o=o(" (UniSpeech model)"),F2o=l(),Ju=a("li"),dse=a("strong"),T2o=o("unispeech-sat"),M2o=o(" \u2014 "),gq=a("a"),E2o=o("UniSpeechSatForPreTraining"),C2o=o(" (UniSpeechSat model)"),w2o=l(),Yu=a("li"),cse=a("strong"),A2o=o("visual_bert"),y2o=o(" \u2014 "),hq=a("a"),L2o=o("VisualBertForPreTraining"),x2o=o(" (VisualBert model)"),$2o=l(),Ku=a("li"),fse=a("strong"),k2o=o("vit_mae"),S2o=o(" \u2014 "),pq=a("a"),R2o=o("ViTMAEForPreTraining"),B2o=o(" (ViTMAE model)"),P2o=l(),Zu=a("li"),mse=a("strong"),I2o=o("wav2vec2"),q2o=o(" \u2014 "),uq=a("a"),N2o=o("Wav2Vec2ForPreTraining"),j2o=o(" (Wav2Vec2 model)"),D2o=l(),e_=a("li"),gse=a("strong"),G2o=o("xlm"),O2o=o(" \u2014 "),_q=a("a"),V2o=o("XLMWithLMHeadModel"),X2o=o(" (XLM model)"),z2o=l(),o_=a("li"),hse=a("strong"),Q2o=o("xlm-roberta"),W2o=o(" \u2014 "),bq=a("a"),H2o=o("XLMRobertaForMaskedLM"),U2o=o(" (XLM-RoBERTa model)"),J2o=l(),r_=a("li"),pse=a("strong"),Y2o=o("xlm-roberta-xl"),K2o=o(" \u2014 "),vq=a("a"),Z2o=o("XLMRobertaXLForMaskedLM"),e5o=o(" (XLM-RoBERTa-XL model)"),o5o=l(),t_=a("li"),use=a("strong"),r5o=o("xlnet"),t5o=o(" \u2014 "),Fq=a("a"),a5o=o("XLNetLMHeadModel"),n5o=o(" (XLNet model)"),s5o=l(),a_=a("p"),l5o=o("The model is set in evaluation mode by default using "),_se=a("code"),i5o=o("model.eval()"),d5o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),bse=a("code"),c5o=o("model.train()"),f5o=l(),F(n_.$$.fragment),KRe=l(),Ti=a("h2"),s_=a("a"),vse=a("span"),F(YA.$$.fragment),m5o=l(),Fse=a("span"),g5o=o("AutoModelForCausalLM"),ZRe=l(),xo=a("div"),F(KA.$$.fragment),h5o=l(),Mi=a("p"),p5o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Tq=a("a"),u5o=o("from_pretrained()"),_5o=o(" class method or the "),Mq=a("a"),b5o=o("from_config()"),v5o=o(` class
method.`),F5o=l(),ZA=a("p"),T5o=o("This class cannot be instantiated directly using "),Tse=a("code"),M5o=o("__init__()"),E5o=o(" (throws an error)."),C5o=l(),ot=a("div"),F(e0.$$.fragment),w5o=l(),Mse=a("p"),A5o=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),y5o=l(),Ei=a("p"),L5o=o(`Note:
Loading a model from its configuration file does `),Ese=a("strong"),x5o=o("not"),$5o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Eq=a("a"),k5o=o("from_pretrained()"),S5o=o(" to load the model weights."),R5o=l(),F(l_.$$.fragment),B5o=l(),Ue=a("div"),F(o0.$$.fragment),P5o=l(),Cse=a("p"),I5o=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),q5o=l(),wa=a("p"),N5o=o("The model class to instantiate is selected based on the "),wse=a("code"),j5o=o("model_type"),D5o=o(` property of the config object (either
passed as an argument or loaded from `),Ase=a("code"),G5o=o("pretrained_model_name_or_path"),O5o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yse=a("code"),V5o=o("pretrained_model_name_or_path"),X5o=o(":"),z5o=l(),z=a("ul"),i_=a("li"),Lse=a("strong"),Q5o=o("bart"),W5o=o(" \u2014 "),Cq=a("a"),H5o=o("BartForCausalLM"),U5o=o(" (BART model)"),J5o=l(),d_=a("li"),xse=a("strong"),Y5o=o("bert"),K5o=o(" \u2014 "),wq=a("a"),Z5o=o("BertLMHeadModel"),evo=o(" (BERT model)"),ovo=l(),c_=a("li"),$se=a("strong"),rvo=o("bert-generation"),tvo=o(" \u2014 "),Aq=a("a"),avo=o("BertGenerationDecoder"),nvo=o(" (Bert Generation model)"),svo=l(),f_=a("li"),kse=a("strong"),lvo=o("big_bird"),ivo=o(" \u2014 "),yq=a("a"),dvo=o("BigBirdForCausalLM"),cvo=o(" (BigBird model)"),fvo=l(),m_=a("li"),Sse=a("strong"),mvo=o("bigbird_pegasus"),gvo=o(" \u2014 "),Lq=a("a"),hvo=o("BigBirdPegasusForCausalLM"),pvo=o(" (BigBirdPegasus model)"),uvo=l(),g_=a("li"),Rse=a("strong"),_vo=o("blenderbot"),bvo=o(" \u2014 "),xq=a("a"),vvo=o("BlenderbotForCausalLM"),Fvo=o(" (Blenderbot model)"),Tvo=l(),h_=a("li"),Bse=a("strong"),Mvo=o("blenderbot-small"),Evo=o(" \u2014 "),$q=a("a"),Cvo=o("BlenderbotSmallForCausalLM"),wvo=o(" (BlenderbotSmall model)"),Avo=l(),p_=a("li"),Pse=a("strong"),yvo=o("camembert"),Lvo=o(" \u2014 "),kq=a("a"),xvo=o("CamembertForCausalLM"),$vo=o(" (CamemBERT model)"),kvo=l(),u_=a("li"),Ise=a("strong"),Svo=o("ctrl"),Rvo=o(" \u2014 "),Sq=a("a"),Bvo=o("CTRLLMHeadModel"),Pvo=o(" (CTRL model)"),Ivo=l(),__=a("li"),qse=a("strong"),qvo=o("data2vec-text"),Nvo=o(" \u2014 "),Rq=a("a"),jvo=o("Data2VecTextForCausalLM"),Dvo=o(" (Data2VecText model)"),Gvo=l(),b_=a("li"),Nse=a("strong"),Ovo=o("electra"),Vvo=o(" \u2014 "),Bq=a("a"),Xvo=o("ElectraForCausalLM"),zvo=o(" (ELECTRA model)"),Qvo=l(),v_=a("li"),jse=a("strong"),Wvo=o("gpt2"),Hvo=o(" \u2014 "),Pq=a("a"),Uvo=o("GPT2LMHeadModel"),Jvo=o(" (OpenAI GPT-2 model)"),Yvo=l(),F_=a("li"),Dse=a("strong"),Kvo=o("gpt_neo"),Zvo=o(" \u2014 "),Iq=a("a"),eFo=o("GPTNeoForCausalLM"),oFo=o(" (GPT Neo model)"),rFo=l(),T_=a("li"),Gse=a("strong"),tFo=o("gptj"),aFo=o(" \u2014 "),qq=a("a"),nFo=o("GPTJForCausalLM"),sFo=o(" (GPT-J model)"),lFo=l(),M_=a("li"),Ose=a("strong"),iFo=o("marian"),dFo=o(" \u2014 "),Nq=a("a"),cFo=o("MarianForCausalLM"),fFo=o(" (Marian model)"),mFo=l(),E_=a("li"),Vse=a("strong"),gFo=o("mbart"),hFo=o(" \u2014 "),jq=a("a"),pFo=o("MBartForCausalLM"),uFo=o(" (mBART model)"),_Fo=l(),C_=a("li"),Xse=a("strong"),bFo=o("megatron-bert"),vFo=o(" \u2014 "),Dq=a("a"),FFo=o("MegatronBertForCausalLM"),TFo=o(" (MegatronBert model)"),MFo=l(),w_=a("li"),zse=a("strong"),EFo=o("openai-gpt"),CFo=o(" \u2014 "),Gq=a("a"),wFo=o("OpenAIGPTLMHeadModel"),AFo=o(" (OpenAI GPT model)"),yFo=l(),A_=a("li"),Qse=a("strong"),LFo=o("pegasus"),xFo=o(" \u2014 "),Oq=a("a"),$Fo=o("PegasusForCausalLM"),kFo=o(" (Pegasus model)"),SFo=l(),y_=a("li"),Wse=a("strong"),RFo=o("plbart"),BFo=o(" \u2014 "),Vq=a("a"),PFo=o("PLBartForCausalLM"),IFo=o(" (PLBart model)"),qFo=l(),L_=a("li"),Hse=a("strong"),NFo=o("prophetnet"),jFo=o(" \u2014 "),Xq=a("a"),DFo=o("ProphetNetForCausalLM"),GFo=o(" (ProphetNet model)"),OFo=l(),x_=a("li"),Use=a("strong"),VFo=o("qdqbert"),XFo=o(" \u2014 "),zq=a("a"),zFo=o("QDQBertLMHeadModel"),QFo=o(" (QDQBert model)"),WFo=l(),$_=a("li"),Jse=a("strong"),HFo=o("reformer"),UFo=o(" \u2014 "),Qq=a("a"),JFo=o("ReformerModelWithLMHead"),YFo=o(" (Reformer model)"),KFo=l(),k_=a("li"),Yse=a("strong"),ZFo=o("rembert"),e6o=o(" \u2014 "),Wq=a("a"),o6o=o("RemBertForCausalLM"),r6o=o(" (RemBERT model)"),t6o=l(),S_=a("li"),Kse=a("strong"),a6o=o("roberta"),n6o=o(" \u2014 "),Hq=a("a"),s6o=o("RobertaForCausalLM"),l6o=o(" (RoBERTa model)"),i6o=l(),R_=a("li"),Zse=a("strong"),d6o=o("roformer"),c6o=o(" \u2014 "),Uq=a("a"),f6o=o("RoFormerForCausalLM"),m6o=o(" (RoFormer model)"),g6o=l(),B_=a("li"),ele=a("strong"),h6o=o("speech_to_text_2"),p6o=o(" \u2014 "),Jq=a("a"),u6o=o("Speech2Text2ForCausalLM"),_6o=o(" (Speech2Text2 model)"),b6o=l(),P_=a("li"),ole=a("strong"),v6o=o("transfo-xl"),F6o=o(" \u2014 "),Yq=a("a"),T6o=o("TransfoXLLMHeadModel"),M6o=o(" (Transformer-XL model)"),E6o=l(),I_=a("li"),rle=a("strong"),C6o=o("trocr"),w6o=o(" \u2014 "),Kq=a("a"),A6o=o("TrOCRForCausalLM"),y6o=o(" (TrOCR model)"),L6o=l(),q_=a("li"),tle=a("strong"),x6o=o("xglm"),$6o=o(" \u2014 "),Zq=a("a"),k6o=o("XGLMForCausalLM"),S6o=o(" (XGLM model)"),R6o=l(),N_=a("li"),ale=a("strong"),B6o=o("xlm"),P6o=o(" \u2014 "),eN=a("a"),I6o=o("XLMWithLMHeadModel"),q6o=o(" (XLM model)"),N6o=l(),j_=a("li"),nle=a("strong"),j6o=o("xlm-prophetnet"),D6o=o(" \u2014 "),oN=a("a"),G6o=o("XLMProphetNetForCausalLM"),O6o=o(" (XLMProphetNet model)"),V6o=l(),D_=a("li"),sle=a("strong"),X6o=o("xlm-roberta"),z6o=o(" \u2014 "),rN=a("a"),Q6o=o("XLMRobertaForCausalLM"),W6o=o(" (XLM-RoBERTa model)"),H6o=l(),G_=a("li"),lle=a("strong"),U6o=o("xlm-roberta-xl"),J6o=o(" \u2014 "),tN=a("a"),Y6o=o("XLMRobertaXLForCausalLM"),K6o=o(" (XLM-RoBERTa-XL model)"),Z6o=l(),O_=a("li"),ile=a("strong"),eTo=o("xlnet"),oTo=o(" \u2014 "),aN=a("a"),rTo=o("XLNetLMHeadModel"),tTo=o(" (XLNet model)"),aTo=l(),V_=a("p"),nTo=o("The model is set in evaluation mode by default using "),dle=a("code"),sTo=o("model.eval()"),lTo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),cle=a("code"),iTo=o("model.train()"),dTo=l(),F(X_.$$.fragment),eBe=l(),Ci=a("h2"),z_=a("a"),fle=a("span"),F(r0.$$.fragment),cTo=l(),mle=a("span"),fTo=o("AutoModelForMaskedLM"),oBe=l(),$o=a("div"),F(t0.$$.fragment),mTo=l(),wi=a("p"),gTo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),nN=a("a"),hTo=o("from_pretrained()"),pTo=o(" class method or the "),sN=a("a"),uTo=o("from_config()"),_To=o(` class
method.`),bTo=l(),a0=a("p"),vTo=o("This class cannot be instantiated directly using "),gle=a("code"),FTo=o("__init__()"),TTo=o(" (throws an error)."),MTo=l(),rt=a("div"),F(n0.$$.fragment),ETo=l(),hle=a("p"),CTo=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),wTo=l(),Ai=a("p"),ATo=o(`Note:
Loading a model from its configuration file does `),ple=a("strong"),yTo=o("not"),LTo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lN=a("a"),xTo=o("from_pretrained()"),$To=o(" to load the model weights."),kTo=l(),F(Q_.$$.fragment),STo=l(),Je=a("div"),F(s0.$$.fragment),RTo=l(),ule=a("p"),BTo=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),PTo=l(),Aa=a("p"),ITo=o("The model class to instantiate is selected based on the "),_le=a("code"),qTo=o("model_type"),NTo=o(` property of the config object (either
passed as an argument or loaded from `),ble=a("code"),jTo=o("pretrained_model_name_or_path"),DTo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vle=a("code"),GTo=o("pretrained_model_name_or_path"),OTo=o(":"),VTo=l(),Q=a("ul"),W_=a("li"),Fle=a("strong"),XTo=o("albert"),zTo=o(" \u2014 "),iN=a("a"),QTo=o("AlbertForMaskedLM"),WTo=o(" (ALBERT model)"),HTo=l(),H_=a("li"),Tle=a("strong"),UTo=o("bart"),JTo=o(" \u2014 "),dN=a("a"),YTo=o("BartForConditionalGeneration"),KTo=o(" (BART model)"),ZTo=l(),U_=a("li"),Mle=a("strong"),eMo=o("bert"),oMo=o(" \u2014 "),cN=a("a"),rMo=o("BertForMaskedLM"),tMo=o(" (BERT model)"),aMo=l(),J_=a("li"),Ele=a("strong"),nMo=o("big_bird"),sMo=o(" \u2014 "),fN=a("a"),lMo=o("BigBirdForMaskedLM"),iMo=o(" (BigBird model)"),dMo=l(),Y_=a("li"),Cle=a("strong"),cMo=o("camembert"),fMo=o(" \u2014 "),mN=a("a"),mMo=o("CamembertForMaskedLM"),gMo=o(" (CamemBERT model)"),hMo=l(),K_=a("li"),wle=a("strong"),pMo=o("convbert"),uMo=o(" \u2014 "),gN=a("a"),_Mo=o("ConvBertForMaskedLM"),bMo=o(" (ConvBERT model)"),vMo=l(),Z_=a("li"),Ale=a("strong"),FMo=o("data2vec-text"),TMo=o(" \u2014 "),hN=a("a"),MMo=o("Data2VecTextForMaskedLM"),EMo=o(" (Data2VecText model)"),CMo=l(),e1=a("li"),yle=a("strong"),wMo=o("deberta"),AMo=o(" \u2014 "),pN=a("a"),yMo=o("DebertaForMaskedLM"),LMo=o(" (DeBERTa model)"),xMo=l(),o1=a("li"),Lle=a("strong"),$Mo=o("deberta-v2"),kMo=o(" \u2014 "),uN=a("a"),SMo=o("DebertaV2ForMaskedLM"),RMo=o(" (DeBERTa-v2 model)"),BMo=l(),r1=a("li"),xle=a("strong"),PMo=o("distilbert"),IMo=o(" \u2014 "),_N=a("a"),qMo=o("DistilBertForMaskedLM"),NMo=o(" (DistilBERT model)"),jMo=l(),t1=a("li"),$le=a("strong"),DMo=o("electra"),GMo=o(" \u2014 "),bN=a("a"),OMo=o("ElectraForMaskedLM"),VMo=o(" (ELECTRA model)"),XMo=l(),a1=a("li"),kle=a("strong"),zMo=o("flaubert"),QMo=o(" \u2014 "),vN=a("a"),WMo=o("FlaubertWithLMHeadModel"),HMo=o(" (FlauBERT model)"),UMo=l(),n1=a("li"),Sle=a("strong"),JMo=o("fnet"),YMo=o(" \u2014 "),FN=a("a"),KMo=o("FNetForMaskedLM"),ZMo=o(" (FNet model)"),e4o=l(),s1=a("li"),Rle=a("strong"),o4o=o("funnel"),r4o=o(" \u2014 "),TN=a("a"),t4o=o("FunnelForMaskedLM"),a4o=o(" (Funnel Transformer model)"),n4o=l(),l1=a("li"),Ble=a("strong"),s4o=o("ibert"),l4o=o(" \u2014 "),MN=a("a"),i4o=o("IBertForMaskedLM"),d4o=o(" (I-BERT model)"),c4o=l(),i1=a("li"),Ple=a("strong"),f4o=o("layoutlm"),m4o=o(" \u2014 "),EN=a("a"),g4o=o("LayoutLMForMaskedLM"),h4o=o(" (LayoutLM model)"),p4o=l(),d1=a("li"),Ile=a("strong"),u4o=o("longformer"),_4o=o(" \u2014 "),CN=a("a"),b4o=o("LongformerForMaskedLM"),v4o=o(" (Longformer model)"),F4o=l(),c1=a("li"),qle=a("strong"),T4o=o("mbart"),M4o=o(" \u2014 "),wN=a("a"),E4o=o("MBartForConditionalGeneration"),C4o=o(" (mBART model)"),w4o=l(),f1=a("li"),Nle=a("strong"),A4o=o("megatron-bert"),y4o=o(" \u2014 "),AN=a("a"),L4o=o("MegatronBertForMaskedLM"),x4o=o(" (MegatronBert model)"),$4o=l(),m1=a("li"),jle=a("strong"),k4o=o("mobilebert"),S4o=o(" \u2014 "),yN=a("a"),R4o=o("MobileBertForMaskedLM"),B4o=o(" (MobileBERT model)"),P4o=l(),g1=a("li"),Dle=a("strong"),I4o=o("mpnet"),q4o=o(" \u2014 "),LN=a("a"),N4o=o("MPNetForMaskedLM"),j4o=o(" (MPNet model)"),D4o=l(),h1=a("li"),Gle=a("strong"),G4o=o("nystromformer"),O4o=o(" \u2014 "),xN=a("a"),V4o=o("NystromformerForMaskedLM"),X4o=o(" (Nystromformer model)"),z4o=l(),p1=a("li"),Ole=a("strong"),Q4o=o("perceiver"),W4o=o(" \u2014 "),$N=a("a"),H4o=o("PerceiverForMaskedLM"),U4o=o(" (Perceiver model)"),J4o=l(),u1=a("li"),Vle=a("strong"),Y4o=o("qdqbert"),K4o=o(" \u2014 "),kN=a("a"),Z4o=o("QDQBertForMaskedLM"),eEo=o(" (QDQBert model)"),oEo=l(),_1=a("li"),Xle=a("strong"),rEo=o("reformer"),tEo=o(" \u2014 "),SN=a("a"),aEo=o("ReformerForMaskedLM"),nEo=o(" (Reformer model)"),sEo=l(),b1=a("li"),zle=a("strong"),lEo=o("rembert"),iEo=o(" \u2014 "),RN=a("a"),dEo=o("RemBertForMaskedLM"),cEo=o(" (RemBERT model)"),fEo=l(),v1=a("li"),Qle=a("strong"),mEo=o("roberta"),gEo=o(" \u2014 "),BN=a("a"),hEo=o("RobertaForMaskedLM"),pEo=o(" (RoBERTa model)"),uEo=l(),F1=a("li"),Wle=a("strong"),_Eo=o("roformer"),bEo=o(" \u2014 "),PN=a("a"),vEo=o("RoFormerForMaskedLM"),FEo=o(" (RoFormer model)"),TEo=l(),T1=a("li"),Hle=a("strong"),MEo=o("squeezebert"),EEo=o(" \u2014 "),IN=a("a"),CEo=o("SqueezeBertForMaskedLM"),wEo=o(" (SqueezeBERT model)"),AEo=l(),M1=a("li"),Ule=a("strong"),yEo=o("tapas"),LEo=o(" \u2014 "),qN=a("a"),xEo=o("TapasForMaskedLM"),$Eo=o(" (TAPAS model)"),kEo=l(),E1=a("li"),Jle=a("strong"),SEo=o("wav2vec2"),REo=o(" \u2014 "),Yle=a("code"),BEo=o("Wav2Vec2ForMaskedLM"),PEo=o(" (Wav2Vec2 model)"),IEo=l(),C1=a("li"),Kle=a("strong"),qEo=o("xlm"),NEo=o(" \u2014 "),NN=a("a"),jEo=o("XLMWithLMHeadModel"),DEo=o(" (XLM model)"),GEo=l(),w1=a("li"),Zle=a("strong"),OEo=o("xlm-roberta"),VEo=o(" \u2014 "),jN=a("a"),XEo=o("XLMRobertaForMaskedLM"),zEo=o(" (XLM-RoBERTa model)"),QEo=l(),A1=a("li"),eie=a("strong"),WEo=o("xlm-roberta-xl"),HEo=o(" \u2014 "),DN=a("a"),UEo=o("XLMRobertaXLForMaskedLM"),JEo=o(" (XLM-RoBERTa-XL model)"),YEo=l(),y1=a("li"),oie=a("strong"),KEo=o("yoso"),ZEo=o(" \u2014 "),GN=a("a"),eCo=o("YosoForMaskedLM"),oCo=o(" (YOSO model)"),rCo=l(),L1=a("p"),tCo=o("The model is set in evaluation mode by default using "),rie=a("code"),aCo=o("model.eval()"),nCo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),tie=a("code"),sCo=o("model.train()"),lCo=l(),F(x1.$$.fragment),rBe=l(),yi=a("h2"),$1=a("a"),aie=a("span"),F(l0.$$.fragment),iCo=l(),nie=a("span"),dCo=o("AutoModelForSeq2SeqLM"),tBe=l(),ko=a("div"),F(i0.$$.fragment),cCo=l(),Li=a("p"),fCo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),ON=a("a"),mCo=o("from_pretrained()"),gCo=o(" class method or the "),VN=a("a"),hCo=o("from_config()"),pCo=o(` class
method.`),uCo=l(),d0=a("p"),_Co=o("This class cannot be instantiated directly using "),sie=a("code"),bCo=o("__init__()"),vCo=o(" (throws an error)."),FCo=l(),tt=a("div"),F(c0.$$.fragment),TCo=l(),lie=a("p"),MCo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),ECo=l(),xi=a("p"),CCo=o(`Note:
Loading a model from its configuration file does `),iie=a("strong"),wCo=o("not"),ACo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),XN=a("a"),yCo=o("from_pretrained()"),LCo=o(" to load the model weights."),xCo=l(),F(k1.$$.fragment),$Co=l(),Ye=a("div"),F(f0.$$.fragment),kCo=l(),die=a("p"),SCo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),RCo=l(),ya=a("p"),BCo=o("The model class to instantiate is selected based on the "),cie=a("code"),PCo=o("model_type"),ICo=o(` property of the config object (either
passed as an argument or loaded from `),fie=a("code"),qCo=o("pretrained_model_name_or_path"),NCo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mie=a("code"),jCo=o("pretrained_model_name_or_path"),DCo=o(":"),GCo=l(),he=a("ul"),S1=a("li"),gie=a("strong"),OCo=o("bart"),VCo=o(" \u2014 "),zN=a("a"),XCo=o("BartForConditionalGeneration"),zCo=o(" (BART model)"),QCo=l(),R1=a("li"),hie=a("strong"),WCo=o("bigbird_pegasus"),HCo=o(" \u2014 "),QN=a("a"),UCo=o("BigBirdPegasusForConditionalGeneration"),JCo=o(" (BigBirdPegasus model)"),YCo=l(),B1=a("li"),pie=a("strong"),KCo=o("blenderbot"),ZCo=o(" \u2014 "),WN=a("a"),e3o=o("BlenderbotForConditionalGeneration"),o3o=o(" (Blenderbot model)"),r3o=l(),P1=a("li"),uie=a("strong"),t3o=o("blenderbot-small"),a3o=o(" \u2014 "),HN=a("a"),n3o=o("BlenderbotSmallForConditionalGeneration"),s3o=o(" (BlenderbotSmall model)"),l3o=l(),I1=a("li"),_ie=a("strong"),i3o=o("encoder-decoder"),d3o=o(" \u2014 "),UN=a("a"),c3o=o("EncoderDecoderModel"),f3o=o(" (Encoder decoder model)"),m3o=l(),q1=a("li"),bie=a("strong"),g3o=o("fsmt"),h3o=o(" \u2014 "),JN=a("a"),p3o=o("FSMTForConditionalGeneration"),u3o=o(" (FairSeq Machine-Translation model)"),_3o=l(),N1=a("li"),vie=a("strong"),b3o=o("led"),v3o=o(" \u2014 "),YN=a("a"),F3o=o("LEDForConditionalGeneration"),T3o=o(" (LED model)"),M3o=l(),j1=a("li"),Fie=a("strong"),E3o=o("m2m_100"),C3o=o(" \u2014 "),KN=a("a"),w3o=o("M2M100ForConditionalGeneration"),A3o=o(" (M2M100 model)"),y3o=l(),D1=a("li"),Tie=a("strong"),L3o=o("marian"),x3o=o(" \u2014 "),ZN=a("a"),$3o=o("MarianMTModel"),k3o=o(" (Marian model)"),S3o=l(),G1=a("li"),Mie=a("strong"),R3o=o("mbart"),B3o=o(" \u2014 "),ej=a("a"),P3o=o("MBartForConditionalGeneration"),I3o=o(" (mBART model)"),q3o=l(),O1=a("li"),Eie=a("strong"),N3o=o("mt5"),j3o=o(" \u2014 "),oj=a("a"),D3o=o("MT5ForConditionalGeneration"),G3o=o(" (mT5 model)"),O3o=l(),V1=a("li"),Cie=a("strong"),V3o=o("pegasus"),X3o=o(" \u2014 "),rj=a("a"),z3o=o("PegasusForConditionalGeneration"),Q3o=o(" (Pegasus model)"),W3o=l(),X1=a("li"),wie=a("strong"),H3o=o("plbart"),U3o=o(" \u2014 "),tj=a("a"),J3o=o("PLBartForConditionalGeneration"),Y3o=o(" (PLBart model)"),K3o=l(),z1=a("li"),Aie=a("strong"),Z3o=o("prophetnet"),ewo=o(" \u2014 "),aj=a("a"),owo=o("ProphetNetForConditionalGeneration"),rwo=o(" (ProphetNet model)"),two=l(),Q1=a("li"),yie=a("strong"),awo=o("t5"),nwo=o(" \u2014 "),nj=a("a"),swo=o("T5ForConditionalGeneration"),lwo=o(" (T5 model)"),iwo=l(),W1=a("li"),Lie=a("strong"),dwo=o("tapex"),cwo=o(" \u2014 "),sj=a("a"),fwo=o("BartForConditionalGeneration"),mwo=o(" (TAPEX model)"),gwo=l(),H1=a("li"),xie=a("strong"),hwo=o("xlm-prophetnet"),pwo=o(" \u2014 "),lj=a("a"),uwo=o("XLMProphetNetForConditionalGeneration"),_wo=o(" (XLMProphetNet model)"),bwo=l(),U1=a("p"),vwo=o("The model is set in evaluation mode by default using "),$ie=a("code"),Fwo=o("model.eval()"),Two=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),kie=a("code"),Mwo=o("model.train()"),Ewo=l(),F(J1.$$.fragment),aBe=l(),$i=a("h2"),Y1=a("a"),Sie=a("span"),F(m0.$$.fragment),Cwo=l(),Rie=a("span"),wwo=o("AutoModelForSequenceClassification"),nBe=l(),So=a("div"),F(g0.$$.fragment),Awo=l(),ki=a("p"),ywo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),ij=a("a"),Lwo=o("from_pretrained()"),xwo=o(" class method or the "),dj=a("a"),$wo=o("from_config()"),kwo=o(` class
method.`),Swo=l(),h0=a("p"),Rwo=o("This class cannot be instantiated directly using "),Bie=a("code"),Bwo=o("__init__()"),Pwo=o(" (throws an error)."),Iwo=l(),at=a("div"),F(p0.$$.fragment),qwo=l(),Pie=a("p"),Nwo=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),jwo=l(),Si=a("p"),Dwo=o(`Note:
Loading a model from its configuration file does `),Iie=a("strong"),Gwo=o("not"),Owo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cj=a("a"),Vwo=o("from_pretrained()"),Xwo=o(" to load the model weights."),zwo=l(),F(K1.$$.fragment),Qwo=l(),Ke=a("div"),F(u0.$$.fragment),Wwo=l(),qie=a("p"),Hwo=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Uwo=l(),La=a("p"),Jwo=o("The model class to instantiate is selected based on the "),Nie=a("code"),Ywo=o("model_type"),Kwo=o(` property of the config object (either
passed as an argument or loaded from `),jie=a("code"),Zwo=o("pretrained_model_name_or_path"),eAo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Die=a("code"),oAo=o("pretrained_model_name_or_path"),rAo=o(":"),tAo=l(),q=a("ul"),Z1=a("li"),Gie=a("strong"),aAo=o("albert"),nAo=o(" \u2014 "),fj=a("a"),sAo=o("AlbertForSequenceClassification"),lAo=o(" (ALBERT model)"),iAo=l(),e9=a("li"),Oie=a("strong"),dAo=o("bart"),cAo=o(" \u2014 "),mj=a("a"),fAo=o("BartForSequenceClassification"),mAo=o(" (BART model)"),gAo=l(),o9=a("li"),Vie=a("strong"),hAo=o("bert"),pAo=o(" \u2014 "),gj=a("a"),uAo=o("BertForSequenceClassification"),_Ao=o(" (BERT model)"),bAo=l(),r9=a("li"),Xie=a("strong"),vAo=o("big_bird"),FAo=o(" \u2014 "),hj=a("a"),TAo=o("BigBirdForSequenceClassification"),MAo=o(" (BigBird model)"),EAo=l(),t9=a("li"),zie=a("strong"),CAo=o("bigbird_pegasus"),wAo=o(" \u2014 "),pj=a("a"),AAo=o("BigBirdPegasusForSequenceClassification"),yAo=o(" (BigBirdPegasus model)"),LAo=l(),a9=a("li"),Qie=a("strong"),xAo=o("camembert"),$Ao=o(" \u2014 "),uj=a("a"),kAo=o("CamembertForSequenceClassification"),SAo=o(" (CamemBERT model)"),RAo=l(),n9=a("li"),Wie=a("strong"),BAo=o("canine"),PAo=o(" \u2014 "),_j=a("a"),IAo=o("CanineForSequenceClassification"),qAo=o(" (Canine model)"),NAo=l(),s9=a("li"),Hie=a("strong"),jAo=o("convbert"),DAo=o(" \u2014 "),bj=a("a"),GAo=o("ConvBertForSequenceClassification"),OAo=o(" (ConvBERT model)"),VAo=l(),l9=a("li"),Uie=a("strong"),XAo=o("ctrl"),zAo=o(" \u2014 "),vj=a("a"),QAo=o("CTRLForSequenceClassification"),WAo=o(" (CTRL model)"),HAo=l(),i9=a("li"),Jie=a("strong"),UAo=o("data2vec-text"),JAo=o(" \u2014 "),Fj=a("a"),YAo=o("Data2VecTextForSequenceClassification"),KAo=o(" (Data2VecText model)"),ZAo=l(),d9=a("li"),Yie=a("strong"),e0o=o("deberta"),o0o=o(" \u2014 "),Tj=a("a"),r0o=o("DebertaForSequenceClassification"),t0o=o(" (DeBERTa model)"),a0o=l(),c9=a("li"),Kie=a("strong"),n0o=o("deberta-v2"),s0o=o(" \u2014 "),Mj=a("a"),l0o=o("DebertaV2ForSequenceClassification"),i0o=o(" (DeBERTa-v2 model)"),d0o=l(),f9=a("li"),Zie=a("strong"),c0o=o("distilbert"),f0o=o(" \u2014 "),Ej=a("a"),m0o=o("DistilBertForSequenceClassification"),g0o=o(" (DistilBERT model)"),h0o=l(),m9=a("li"),ede=a("strong"),p0o=o("electra"),u0o=o(" \u2014 "),Cj=a("a"),_0o=o("ElectraForSequenceClassification"),b0o=o(" (ELECTRA model)"),v0o=l(),g9=a("li"),ode=a("strong"),F0o=o("flaubert"),T0o=o(" \u2014 "),wj=a("a"),M0o=o("FlaubertForSequenceClassification"),E0o=o(" (FlauBERT model)"),C0o=l(),h9=a("li"),rde=a("strong"),w0o=o("fnet"),A0o=o(" \u2014 "),Aj=a("a"),y0o=o("FNetForSequenceClassification"),L0o=o(" (FNet model)"),x0o=l(),p9=a("li"),tde=a("strong"),$0o=o("funnel"),k0o=o(" \u2014 "),yj=a("a"),S0o=o("FunnelForSequenceClassification"),R0o=o(" (Funnel Transformer model)"),B0o=l(),u9=a("li"),ade=a("strong"),P0o=o("gpt2"),I0o=o(" \u2014 "),Lj=a("a"),q0o=o("GPT2ForSequenceClassification"),N0o=o(" (OpenAI GPT-2 model)"),j0o=l(),_9=a("li"),nde=a("strong"),D0o=o("gpt_neo"),G0o=o(" \u2014 "),xj=a("a"),O0o=o("GPTNeoForSequenceClassification"),V0o=o(" (GPT Neo model)"),X0o=l(),b9=a("li"),sde=a("strong"),z0o=o("gptj"),Q0o=o(" \u2014 "),$j=a("a"),W0o=o("GPTJForSequenceClassification"),H0o=o(" (GPT-J model)"),U0o=l(),v9=a("li"),lde=a("strong"),J0o=o("ibert"),Y0o=o(" \u2014 "),kj=a("a"),K0o=o("IBertForSequenceClassification"),Z0o=o(" (I-BERT model)"),eyo=l(),F9=a("li"),ide=a("strong"),oyo=o("layoutlm"),ryo=o(" \u2014 "),Sj=a("a"),tyo=o("LayoutLMForSequenceClassification"),ayo=o(" (LayoutLM model)"),nyo=l(),T9=a("li"),dde=a("strong"),syo=o("layoutlmv2"),lyo=o(" \u2014 "),Rj=a("a"),iyo=o("LayoutLMv2ForSequenceClassification"),dyo=o(" (LayoutLMv2 model)"),cyo=l(),M9=a("li"),cde=a("strong"),fyo=o("led"),myo=o(" \u2014 "),Bj=a("a"),gyo=o("LEDForSequenceClassification"),hyo=o(" (LED model)"),pyo=l(),E9=a("li"),fde=a("strong"),uyo=o("longformer"),_yo=o(" \u2014 "),Pj=a("a"),byo=o("LongformerForSequenceClassification"),vyo=o(" (Longformer model)"),Fyo=l(),C9=a("li"),mde=a("strong"),Tyo=o("mbart"),Myo=o(" \u2014 "),Ij=a("a"),Eyo=o("MBartForSequenceClassification"),Cyo=o(" (mBART model)"),wyo=l(),w9=a("li"),gde=a("strong"),Ayo=o("megatron-bert"),yyo=o(" \u2014 "),qj=a("a"),Lyo=o("MegatronBertForSequenceClassification"),xyo=o(" (MegatronBert model)"),$yo=l(),A9=a("li"),hde=a("strong"),kyo=o("mobilebert"),Syo=o(" \u2014 "),Nj=a("a"),Ryo=o("MobileBertForSequenceClassification"),Byo=o(" (MobileBERT model)"),Pyo=l(),y9=a("li"),pde=a("strong"),Iyo=o("mpnet"),qyo=o(" \u2014 "),jj=a("a"),Nyo=o("MPNetForSequenceClassification"),jyo=o(" (MPNet model)"),Dyo=l(),L9=a("li"),ude=a("strong"),Gyo=o("nystromformer"),Oyo=o(" \u2014 "),Dj=a("a"),Vyo=o("NystromformerForSequenceClassification"),Xyo=o(" (Nystromformer model)"),zyo=l(),x9=a("li"),_de=a("strong"),Qyo=o("openai-gpt"),Wyo=o(" \u2014 "),Gj=a("a"),Hyo=o("OpenAIGPTForSequenceClassification"),Uyo=o(" (OpenAI GPT model)"),Jyo=l(),$9=a("li"),bde=a("strong"),Yyo=o("perceiver"),Kyo=o(" \u2014 "),Oj=a("a"),Zyo=o("PerceiverForSequenceClassification"),eLo=o(" (Perceiver model)"),oLo=l(),k9=a("li"),vde=a("strong"),rLo=o("plbart"),tLo=o(" \u2014 "),Vj=a("a"),aLo=o("PLBartForSequenceClassification"),nLo=o(" (PLBart model)"),sLo=l(),S9=a("li"),Fde=a("strong"),lLo=o("qdqbert"),iLo=o(" \u2014 "),Xj=a("a"),dLo=o("QDQBertForSequenceClassification"),cLo=o(" (QDQBert model)"),fLo=l(),R9=a("li"),Tde=a("strong"),mLo=o("reformer"),gLo=o(" \u2014 "),zj=a("a"),hLo=o("ReformerForSequenceClassification"),pLo=o(" (Reformer model)"),uLo=l(),B9=a("li"),Mde=a("strong"),_Lo=o("rembert"),bLo=o(" \u2014 "),Qj=a("a"),vLo=o("RemBertForSequenceClassification"),FLo=o(" (RemBERT model)"),TLo=l(),P9=a("li"),Ede=a("strong"),MLo=o("roberta"),ELo=o(" \u2014 "),Wj=a("a"),CLo=o("RobertaForSequenceClassification"),wLo=o(" (RoBERTa model)"),ALo=l(),I9=a("li"),Cde=a("strong"),yLo=o("roformer"),LLo=o(" \u2014 "),Hj=a("a"),xLo=o("RoFormerForSequenceClassification"),$Lo=o(" (RoFormer model)"),kLo=l(),q9=a("li"),wde=a("strong"),SLo=o("squeezebert"),RLo=o(" \u2014 "),Uj=a("a"),BLo=o("SqueezeBertForSequenceClassification"),PLo=o(" (SqueezeBERT model)"),ILo=l(),N9=a("li"),Ade=a("strong"),qLo=o("tapas"),NLo=o(" \u2014 "),Jj=a("a"),jLo=o("TapasForSequenceClassification"),DLo=o(" (TAPAS model)"),GLo=l(),j9=a("li"),yde=a("strong"),OLo=o("tapex"),VLo=o(" \u2014 "),Yj=a("a"),XLo=o("BartForSequenceClassification"),zLo=o(" (TAPEX model)"),QLo=l(),D9=a("li"),Lde=a("strong"),WLo=o("transfo-xl"),HLo=o(" \u2014 "),Kj=a("a"),ULo=o("TransfoXLForSequenceClassification"),JLo=o(" (Transformer-XL model)"),YLo=l(),G9=a("li"),xde=a("strong"),KLo=o("xlm"),ZLo=o(" \u2014 "),Zj=a("a"),e8o=o("XLMForSequenceClassification"),o8o=o(" (XLM model)"),r8o=l(),O9=a("li"),$de=a("strong"),t8o=o("xlm-roberta"),a8o=o(" \u2014 "),eD=a("a"),n8o=o("XLMRobertaForSequenceClassification"),s8o=o(" (XLM-RoBERTa model)"),l8o=l(),V9=a("li"),kde=a("strong"),i8o=o("xlm-roberta-xl"),d8o=o(" \u2014 "),oD=a("a"),c8o=o("XLMRobertaXLForSequenceClassification"),f8o=o(" (XLM-RoBERTa-XL model)"),m8o=l(),X9=a("li"),Sde=a("strong"),g8o=o("xlnet"),h8o=o(" \u2014 "),rD=a("a"),p8o=o("XLNetForSequenceClassification"),u8o=o(" (XLNet model)"),_8o=l(),z9=a("li"),Rde=a("strong"),b8o=o("yoso"),v8o=o(" \u2014 "),tD=a("a"),F8o=o("YosoForSequenceClassification"),T8o=o(" (YOSO model)"),M8o=l(),Q9=a("p"),E8o=o("The model is set in evaluation mode by default using "),Bde=a("code"),C8o=o("model.eval()"),w8o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Pde=a("code"),A8o=o("model.train()"),y8o=l(),F(W9.$$.fragment),sBe=l(),Ri=a("h2"),H9=a("a"),Ide=a("span"),F(_0.$$.fragment),L8o=l(),qde=a("span"),x8o=o("AutoModelForMultipleChoice"),lBe=l(),Ro=a("div"),F(b0.$$.fragment),$8o=l(),Bi=a("p"),k8o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),aD=a("a"),S8o=o("from_pretrained()"),R8o=o(" class method or the "),nD=a("a"),B8o=o("from_config()"),P8o=o(` class
method.`),I8o=l(),v0=a("p"),q8o=o("This class cannot be instantiated directly using "),Nde=a("code"),N8o=o("__init__()"),j8o=o(" (throws an error)."),D8o=l(),nt=a("div"),F(F0.$$.fragment),G8o=l(),jde=a("p"),O8o=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),V8o=l(),Pi=a("p"),X8o=o(`Note:
Loading a model from its configuration file does `),Dde=a("strong"),z8o=o("not"),Q8o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sD=a("a"),W8o=o("from_pretrained()"),H8o=o(" to load the model weights."),U8o=l(),F(U9.$$.fragment),J8o=l(),Ze=a("div"),F(T0.$$.fragment),Y8o=l(),Gde=a("p"),K8o=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Z8o=l(),xa=a("p"),e7o=o("The model class to instantiate is selected based on the "),Ode=a("code"),o7o=o("model_type"),r7o=o(` property of the config object (either
passed as an argument or loaded from `),Vde=a("code"),t7o=o("pretrained_model_name_or_path"),a7o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xde=a("code"),n7o=o("pretrained_model_name_or_path"),s7o=o(":"),l7o=l(),Y=a("ul"),J9=a("li"),zde=a("strong"),i7o=o("albert"),d7o=o(" \u2014 "),lD=a("a"),c7o=o("AlbertForMultipleChoice"),f7o=o(" (ALBERT model)"),m7o=l(),Y9=a("li"),Qde=a("strong"),g7o=o("bert"),h7o=o(" \u2014 "),iD=a("a"),p7o=o("BertForMultipleChoice"),u7o=o(" (BERT model)"),_7o=l(),K9=a("li"),Wde=a("strong"),b7o=o("big_bird"),v7o=o(" \u2014 "),dD=a("a"),F7o=o("BigBirdForMultipleChoice"),T7o=o(" (BigBird model)"),M7o=l(),Z9=a("li"),Hde=a("strong"),E7o=o("camembert"),C7o=o(" \u2014 "),cD=a("a"),w7o=o("CamembertForMultipleChoice"),A7o=o(" (CamemBERT model)"),y7o=l(),eb=a("li"),Ude=a("strong"),L7o=o("canine"),x7o=o(" \u2014 "),fD=a("a"),$7o=o("CanineForMultipleChoice"),k7o=o(" (Canine model)"),S7o=l(),ob=a("li"),Jde=a("strong"),R7o=o("convbert"),B7o=o(" \u2014 "),mD=a("a"),P7o=o("ConvBertForMultipleChoice"),I7o=o(" (ConvBERT model)"),q7o=l(),rb=a("li"),Yde=a("strong"),N7o=o("data2vec-text"),j7o=o(" \u2014 "),gD=a("a"),D7o=o("Data2VecTextForMultipleChoice"),G7o=o(" (Data2VecText model)"),O7o=l(),tb=a("li"),Kde=a("strong"),V7o=o("distilbert"),X7o=o(" \u2014 "),hD=a("a"),z7o=o("DistilBertForMultipleChoice"),Q7o=o(" (DistilBERT model)"),W7o=l(),ab=a("li"),Zde=a("strong"),H7o=o("electra"),U7o=o(" \u2014 "),pD=a("a"),J7o=o("ElectraForMultipleChoice"),Y7o=o(" (ELECTRA model)"),K7o=l(),nb=a("li"),ece=a("strong"),Z7o=o("flaubert"),exo=o(" \u2014 "),uD=a("a"),oxo=o("FlaubertForMultipleChoice"),rxo=o(" (FlauBERT model)"),txo=l(),sb=a("li"),oce=a("strong"),axo=o("fnet"),nxo=o(" \u2014 "),_D=a("a"),sxo=o("FNetForMultipleChoice"),lxo=o(" (FNet model)"),ixo=l(),lb=a("li"),rce=a("strong"),dxo=o("funnel"),cxo=o(" \u2014 "),bD=a("a"),fxo=o("FunnelForMultipleChoice"),mxo=o(" (Funnel Transformer model)"),gxo=l(),ib=a("li"),tce=a("strong"),hxo=o("ibert"),pxo=o(" \u2014 "),vD=a("a"),uxo=o("IBertForMultipleChoice"),_xo=o(" (I-BERT model)"),bxo=l(),db=a("li"),ace=a("strong"),vxo=o("longformer"),Fxo=o(" \u2014 "),FD=a("a"),Txo=o("LongformerForMultipleChoice"),Mxo=o(" (Longformer model)"),Exo=l(),cb=a("li"),nce=a("strong"),Cxo=o("megatron-bert"),wxo=o(" \u2014 "),TD=a("a"),Axo=o("MegatronBertForMultipleChoice"),yxo=o(" (MegatronBert model)"),Lxo=l(),fb=a("li"),sce=a("strong"),xxo=o("mobilebert"),$xo=o(" \u2014 "),MD=a("a"),kxo=o("MobileBertForMultipleChoice"),Sxo=o(" (MobileBERT model)"),Rxo=l(),mb=a("li"),lce=a("strong"),Bxo=o("mpnet"),Pxo=o(" \u2014 "),ED=a("a"),Ixo=o("MPNetForMultipleChoice"),qxo=o(" (MPNet model)"),Nxo=l(),gb=a("li"),ice=a("strong"),jxo=o("nystromformer"),Dxo=o(" \u2014 "),CD=a("a"),Gxo=o("NystromformerForMultipleChoice"),Oxo=o(" (Nystromformer model)"),Vxo=l(),hb=a("li"),dce=a("strong"),Xxo=o("qdqbert"),zxo=o(" \u2014 "),wD=a("a"),Qxo=o("QDQBertForMultipleChoice"),Wxo=o(" (QDQBert model)"),Hxo=l(),pb=a("li"),cce=a("strong"),Uxo=o("rembert"),Jxo=o(" \u2014 "),AD=a("a"),Yxo=o("RemBertForMultipleChoice"),Kxo=o(" (RemBERT model)"),Zxo=l(),ub=a("li"),fce=a("strong"),e$o=o("roberta"),o$o=o(" \u2014 "),yD=a("a"),r$o=o("RobertaForMultipleChoice"),t$o=o(" (RoBERTa model)"),a$o=l(),_b=a("li"),mce=a("strong"),n$o=o("roformer"),s$o=o(" \u2014 "),LD=a("a"),l$o=o("RoFormerForMultipleChoice"),i$o=o(" (RoFormer model)"),d$o=l(),bb=a("li"),gce=a("strong"),c$o=o("squeezebert"),f$o=o(" \u2014 "),xD=a("a"),m$o=o("SqueezeBertForMultipleChoice"),g$o=o(" (SqueezeBERT model)"),h$o=l(),vb=a("li"),hce=a("strong"),p$o=o("xlm"),u$o=o(" \u2014 "),$D=a("a"),_$o=o("XLMForMultipleChoice"),b$o=o(" (XLM model)"),v$o=l(),Fb=a("li"),pce=a("strong"),F$o=o("xlm-roberta"),T$o=o(" \u2014 "),kD=a("a"),M$o=o("XLMRobertaForMultipleChoice"),E$o=o(" (XLM-RoBERTa model)"),C$o=l(),Tb=a("li"),uce=a("strong"),w$o=o("xlm-roberta-xl"),A$o=o(" \u2014 "),SD=a("a"),y$o=o("XLMRobertaXLForMultipleChoice"),L$o=o(" (XLM-RoBERTa-XL model)"),x$o=l(),Mb=a("li"),_ce=a("strong"),$$o=o("xlnet"),k$o=o(" \u2014 "),RD=a("a"),S$o=o("XLNetForMultipleChoice"),R$o=o(" (XLNet model)"),B$o=l(),Eb=a("li"),bce=a("strong"),P$o=o("yoso"),I$o=o(" \u2014 "),BD=a("a"),q$o=o("YosoForMultipleChoice"),N$o=o(" (YOSO model)"),j$o=l(),Cb=a("p"),D$o=o("The model is set in evaluation mode by default using "),vce=a("code"),G$o=o("model.eval()"),O$o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Fce=a("code"),V$o=o("model.train()"),X$o=l(),F(wb.$$.fragment),iBe=l(),Ii=a("h2"),Ab=a("a"),Tce=a("span"),F(M0.$$.fragment),z$o=l(),Mce=a("span"),Q$o=o("AutoModelForNextSentencePrediction"),dBe=l(),Bo=a("div"),F(E0.$$.fragment),W$o=l(),qi=a("p"),H$o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),PD=a("a"),U$o=o("from_pretrained()"),J$o=o(" class method or the "),ID=a("a"),Y$o=o("from_config()"),K$o=o(` class
method.`),Z$o=l(),C0=a("p"),eko=o("This class cannot be instantiated directly using "),Ece=a("code"),oko=o("__init__()"),rko=o(" (throws an error)."),tko=l(),st=a("div"),F(w0.$$.fragment),ako=l(),Cce=a("p"),nko=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),sko=l(),Ni=a("p"),lko=o(`Note:
Loading a model from its configuration file does `),wce=a("strong"),iko=o("not"),dko=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qD=a("a"),cko=o("from_pretrained()"),fko=o(" to load the model weights."),mko=l(),F(yb.$$.fragment),gko=l(),eo=a("div"),F(A0.$$.fragment),hko=l(),Ace=a("p"),pko=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),uko=l(),$a=a("p"),_ko=o("The model class to instantiate is selected based on the "),yce=a("code"),bko=o("model_type"),vko=o(` property of the config object (either
passed as an argument or loaded from `),Lce=a("code"),Fko=o("pretrained_model_name_or_path"),Tko=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xce=a("code"),Mko=o("pretrained_model_name_or_path"),Eko=o(":"),Cko=l(),Ur=a("ul"),Lb=a("li"),$ce=a("strong"),wko=o("bert"),Ako=o(" \u2014 "),ND=a("a"),yko=o("BertForNextSentencePrediction"),Lko=o(" (BERT model)"),xko=l(),xb=a("li"),kce=a("strong"),$ko=o("fnet"),kko=o(" \u2014 "),jD=a("a"),Sko=o("FNetForNextSentencePrediction"),Rko=o(" (FNet model)"),Bko=l(),$b=a("li"),Sce=a("strong"),Pko=o("megatron-bert"),Iko=o(" \u2014 "),DD=a("a"),qko=o("MegatronBertForNextSentencePrediction"),Nko=o(" (MegatronBert model)"),jko=l(),kb=a("li"),Rce=a("strong"),Dko=o("mobilebert"),Gko=o(" \u2014 "),GD=a("a"),Oko=o("MobileBertForNextSentencePrediction"),Vko=o(" (MobileBERT model)"),Xko=l(),Sb=a("li"),Bce=a("strong"),zko=o("qdqbert"),Qko=o(" \u2014 "),OD=a("a"),Wko=o("QDQBertForNextSentencePrediction"),Hko=o(" (QDQBert model)"),Uko=l(),Rb=a("p"),Jko=o("The model is set in evaluation mode by default using "),Pce=a("code"),Yko=o("model.eval()"),Kko=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ice=a("code"),Zko=o("model.train()"),eSo=l(),F(Bb.$$.fragment),cBe=l(),ji=a("h2"),Pb=a("a"),qce=a("span"),F(y0.$$.fragment),oSo=l(),Nce=a("span"),rSo=o("AutoModelForTokenClassification"),fBe=l(),Po=a("div"),F(L0.$$.fragment),tSo=l(),Di=a("p"),aSo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),VD=a("a"),nSo=o("from_pretrained()"),sSo=o(" class method or the "),XD=a("a"),lSo=o("from_config()"),iSo=o(` class
method.`),dSo=l(),x0=a("p"),cSo=o("This class cannot be instantiated directly using "),jce=a("code"),fSo=o("__init__()"),mSo=o(" (throws an error)."),gSo=l(),lt=a("div"),F($0.$$.fragment),hSo=l(),Dce=a("p"),pSo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),uSo=l(),Gi=a("p"),_So=o(`Note:
Loading a model from its configuration file does `),Gce=a("strong"),bSo=o("not"),vSo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zD=a("a"),FSo=o("from_pretrained()"),TSo=o(" to load the model weights."),MSo=l(),F(Ib.$$.fragment),ESo=l(),oo=a("div"),F(k0.$$.fragment),CSo=l(),Oce=a("p"),wSo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),ASo=l(),ka=a("p"),ySo=o("The model class to instantiate is selected based on the "),Vce=a("code"),LSo=o("model_type"),xSo=o(` property of the config object (either
passed as an argument or loaded from `),Xce=a("code"),$So=o("pretrained_model_name_or_path"),kSo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zce=a("code"),SSo=o("pretrained_model_name_or_path"),RSo=o(":"),BSo=l(),U=a("ul"),qb=a("li"),Qce=a("strong"),PSo=o("albert"),ISo=o(" \u2014 "),QD=a("a"),qSo=o("AlbertForTokenClassification"),NSo=o(" (ALBERT model)"),jSo=l(),Nb=a("li"),Wce=a("strong"),DSo=o("bert"),GSo=o(" \u2014 "),WD=a("a"),OSo=o("BertForTokenClassification"),VSo=o(" (BERT model)"),XSo=l(),jb=a("li"),Hce=a("strong"),zSo=o("big_bird"),QSo=o(" \u2014 "),HD=a("a"),WSo=o("BigBirdForTokenClassification"),HSo=o(" (BigBird model)"),USo=l(),Db=a("li"),Uce=a("strong"),JSo=o("camembert"),YSo=o(" \u2014 "),UD=a("a"),KSo=o("CamembertForTokenClassification"),ZSo=o(" (CamemBERT model)"),eRo=l(),Gb=a("li"),Jce=a("strong"),oRo=o("canine"),rRo=o(" \u2014 "),JD=a("a"),tRo=o("CanineForTokenClassification"),aRo=o(" (Canine model)"),nRo=l(),Ob=a("li"),Yce=a("strong"),sRo=o("convbert"),lRo=o(" \u2014 "),YD=a("a"),iRo=o("ConvBertForTokenClassification"),dRo=o(" (ConvBERT model)"),cRo=l(),Vb=a("li"),Kce=a("strong"),fRo=o("data2vec-text"),mRo=o(" \u2014 "),KD=a("a"),gRo=o("Data2VecTextForTokenClassification"),hRo=o(" (Data2VecText model)"),pRo=l(),Xb=a("li"),Zce=a("strong"),uRo=o("deberta"),_Ro=o(" \u2014 "),ZD=a("a"),bRo=o("DebertaForTokenClassification"),vRo=o(" (DeBERTa model)"),FRo=l(),zb=a("li"),efe=a("strong"),TRo=o("deberta-v2"),MRo=o(" \u2014 "),eG=a("a"),ERo=o("DebertaV2ForTokenClassification"),CRo=o(" (DeBERTa-v2 model)"),wRo=l(),Qb=a("li"),ofe=a("strong"),ARo=o("distilbert"),yRo=o(" \u2014 "),oG=a("a"),LRo=o("DistilBertForTokenClassification"),xRo=o(" (DistilBERT model)"),$Ro=l(),Wb=a("li"),rfe=a("strong"),kRo=o("electra"),SRo=o(" \u2014 "),rG=a("a"),RRo=o("ElectraForTokenClassification"),BRo=o(" (ELECTRA model)"),PRo=l(),Hb=a("li"),tfe=a("strong"),IRo=o("flaubert"),qRo=o(" \u2014 "),tG=a("a"),NRo=o("FlaubertForTokenClassification"),jRo=o(" (FlauBERT model)"),DRo=l(),Ub=a("li"),afe=a("strong"),GRo=o("fnet"),ORo=o(" \u2014 "),aG=a("a"),VRo=o("FNetForTokenClassification"),XRo=o(" (FNet model)"),zRo=l(),Jb=a("li"),nfe=a("strong"),QRo=o("funnel"),WRo=o(" \u2014 "),nG=a("a"),HRo=o("FunnelForTokenClassification"),URo=o(" (Funnel Transformer model)"),JRo=l(),Yb=a("li"),sfe=a("strong"),YRo=o("gpt2"),KRo=o(" \u2014 "),sG=a("a"),ZRo=o("GPT2ForTokenClassification"),eBo=o(" (OpenAI GPT-2 model)"),oBo=l(),Kb=a("li"),lfe=a("strong"),rBo=o("ibert"),tBo=o(" \u2014 "),lG=a("a"),aBo=o("IBertForTokenClassification"),nBo=o(" (I-BERT model)"),sBo=l(),Zb=a("li"),ife=a("strong"),lBo=o("layoutlm"),iBo=o(" \u2014 "),iG=a("a"),dBo=o("LayoutLMForTokenClassification"),cBo=o(" (LayoutLM model)"),fBo=l(),e2=a("li"),dfe=a("strong"),mBo=o("layoutlmv2"),gBo=o(" \u2014 "),dG=a("a"),hBo=o("LayoutLMv2ForTokenClassification"),pBo=o(" (LayoutLMv2 model)"),uBo=l(),o2=a("li"),cfe=a("strong"),_Bo=o("longformer"),bBo=o(" \u2014 "),cG=a("a"),vBo=o("LongformerForTokenClassification"),FBo=o(" (Longformer model)"),TBo=l(),r2=a("li"),ffe=a("strong"),MBo=o("megatron-bert"),EBo=o(" \u2014 "),fG=a("a"),CBo=o("MegatronBertForTokenClassification"),wBo=o(" (MegatronBert model)"),ABo=l(),t2=a("li"),mfe=a("strong"),yBo=o("mobilebert"),LBo=o(" \u2014 "),mG=a("a"),xBo=o("MobileBertForTokenClassification"),$Bo=o(" (MobileBERT model)"),kBo=l(),a2=a("li"),gfe=a("strong"),SBo=o("mpnet"),RBo=o(" \u2014 "),gG=a("a"),BBo=o("MPNetForTokenClassification"),PBo=o(" (MPNet model)"),IBo=l(),n2=a("li"),hfe=a("strong"),qBo=o("nystromformer"),NBo=o(" \u2014 "),hG=a("a"),jBo=o("NystromformerForTokenClassification"),DBo=o(" (Nystromformer model)"),GBo=l(),s2=a("li"),pfe=a("strong"),OBo=o("qdqbert"),VBo=o(" \u2014 "),pG=a("a"),XBo=o("QDQBertForTokenClassification"),zBo=o(" (QDQBert model)"),QBo=l(),l2=a("li"),ufe=a("strong"),WBo=o("rembert"),HBo=o(" \u2014 "),uG=a("a"),UBo=o("RemBertForTokenClassification"),JBo=o(" (RemBERT model)"),YBo=l(),i2=a("li"),_fe=a("strong"),KBo=o("roberta"),ZBo=o(" \u2014 "),_G=a("a"),ePo=o("RobertaForTokenClassification"),oPo=o(" (RoBERTa model)"),rPo=l(),d2=a("li"),bfe=a("strong"),tPo=o("roformer"),aPo=o(" \u2014 "),bG=a("a"),nPo=o("RoFormerForTokenClassification"),sPo=o(" (RoFormer model)"),lPo=l(),c2=a("li"),vfe=a("strong"),iPo=o("squeezebert"),dPo=o(" \u2014 "),vG=a("a"),cPo=o("SqueezeBertForTokenClassification"),fPo=o(" (SqueezeBERT model)"),mPo=l(),f2=a("li"),Ffe=a("strong"),gPo=o("xlm"),hPo=o(" \u2014 "),FG=a("a"),pPo=o("XLMForTokenClassification"),uPo=o(" (XLM model)"),_Po=l(),m2=a("li"),Tfe=a("strong"),bPo=o("xlm-roberta"),vPo=o(" \u2014 "),TG=a("a"),FPo=o("XLMRobertaForTokenClassification"),TPo=o(" (XLM-RoBERTa model)"),MPo=l(),g2=a("li"),Mfe=a("strong"),EPo=o("xlm-roberta-xl"),CPo=o(" \u2014 "),MG=a("a"),wPo=o("XLMRobertaXLForTokenClassification"),APo=o(" (XLM-RoBERTa-XL model)"),yPo=l(),h2=a("li"),Efe=a("strong"),LPo=o("xlnet"),xPo=o(" \u2014 "),EG=a("a"),$Po=o("XLNetForTokenClassification"),kPo=o(" (XLNet model)"),SPo=l(),p2=a("li"),Cfe=a("strong"),RPo=o("yoso"),BPo=o(" \u2014 "),CG=a("a"),PPo=o("YosoForTokenClassification"),IPo=o(" (YOSO model)"),qPo=l(),u2=a("p"),NPo=o("The model is set in evaluation mode by default using "),wfe=a("code"),jPo=o("model.eval()"),DPo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Afe=a("code"),GPo=o("model.train()"),OPo=l(),F(_2.$$.fragment),mBe=l(),Oi=a("h2"),b2=a("a"),yfe=a("span"),F(S0.$$.fragment),VPo=l(),Lfe=a("span"),XPo=o("AutoModelForQuestionAnswering"),gBe=l(),Io=a("div"),F(R0.$$.fragment),zPo=l(),Vi=a("p"),QPo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),wG=a("a"),WPo=o("from_pretrained()"),HPo=o(" class method or the "),AG=a("a"),UPo=o("from_config()"),JPo=o(` class
method.`),YPo=l(),B0=a("p"),KPo=o("This class cannot be instantiated directly using "),xfe=a("code"),ZPo=o("__init__()"),eIo=o(" (throws an error)."),oIo=l(),it=a("div"),F(P0.$$.fragment),rIo=l(),$fe=a("p"),tIo=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),aIo=l(),Xi=a("p"),nIo=o(`Note:
Loading a model from its configuration file does `),kfe=a("strong"),sIo=o("not"),lIo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yG=a("a"),iIo=o("from_pretrained()"),dIo=o(" to load the model weights."),cIo=l(),F(v2.$$.fragment),fIo=l(),ro=a("div"),F(I0.$$.fragment),mIo=l(),Sfe=a("p"),gIo=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),hIo=l(),Sa=a("p"),pIo=o("The model class to instantiate is selected based on the "),Rfe=a("code"),uIo=o("model_type"),_Io=o(` property of the config object (either
passed as an argument or loaded from `),Bfe=a("code"),bIo=o("pretrained_model_name_or_path"),vIo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Pfe=a("code"),FIo=o("pretrained_model_name_or_path"),TIo=o(":"),MIo=l(),O=a("ul"),F2=a("li"),Ife=a("strong"),EIo=o("albert"),CIo=o(" \u2014 "),LG=a("a"),wIo=o("AlbertForQuestionAnswering"),AIo=o(" (ALBERT model)"),yIo=l(),T2=a("li"),qfe=a("strong"),LIo=o("bart"),xIo=o(" \u2014 "),xG=a("a"),$Io=o("BartForQuestionAnswering"),kIo=o(" (BART model)"),SIo=l(),M2=a("li"),Nfe=a("strong"),RIo=o("bert"),BIo=o(" \u2014 "),$G=a("a"),PIo=o("BertForQuestionAnswering"),IIo=o(" (BERT model)"),qIo=l(),E2=a("li"),jfe=a("strong"),NIo=o("big_bird"),jIo=o(" \u2014 "),kG=a("a"),DIo=o("BigBirdForQuestionAnswering"),GIo=o(" (BigBird model)"),OIo=l(),C2=a("li"),Dfe=a("strong"),VIo=o("bigbird_pegasus"),XIo=o(" \u2014 "),SG=a("a"),zIo=o("BigBirdPegasusForQuestionAnswering"),QIo=o(" (BigBirdPegasus model)"),WIo=l(),w2=a("li"),Gfe=a("strong"),HIo=o("camembert"),UIo=o(" \u2014 "),RG=a("a"),JIo=o("CamembertForQuestionAnswering"),YIo=o(" (CamemBERT model)"),KIo=l(),A2=a("li"),Ofe=a("strong"),ZIo=o("canine"),eqo=o(" \u2014 "),BG=a("a"),oqo=o("CanineForQuestionAnswering"),rqo=o(" (Canine model)"),tqo=l(),y2=a("li"),Vfe=a("strong"),aqo=o("convbert"),nqo=o(" \u2014 "),PG=a("a"),sqo=o("ConvBertForQuestionAnswering"),lqo=o(" (ConvBERT model)"),iqo=l(),L2=a("li"),Xfe=a("strong"),dqo=o("data2vec-text"),cqo=o(" \u2014 "),IG=a("a"),fqo=o("Data2VecTextForQuestionAnswering"),mqo=o(" (Data2VecText model)"),gqo=l(),x2=a("li"),zfe=a("strong"),hqo=o("deberta"),pqo=o(" \u2014 "),qG=a("a"),uqo=o("DebertaForQuestionAnswering"),_qo=o(" (DeBERTa model)"),bqo=l(),$2=a("li"),Qfe=a("strong"),vqo=o("deberta-v2"),Fqo=o(" \u2014 "),NG=a("a"),Tqo=o("DebertaV2ForQuestionAnswering"),Mqo=o(" (DeBERTa-v2 model)"),Eqo=l(),k2=a("li"),Wfe=a("strong"),Cqo=o("distilbert"),wqo=o(" \u2014 "),jG=a("a"),Aqo=o("DistilBertForQuestionAnswering"),yqo=o(" (DistilBERT model)"),Lqo=l(),S2=a("li"),Hfe=a("strong"),xqo=o("electra"),$qo=o(" \u2014 "),DG=a("a"),kqo=o("ElectraForQuestionAnswering"),Sqo=o(" (ELECTRA model)"),Rqo=l(),R2=a("li"),Ufe=a("strong"),Bqo=o("flaubert"),Pqo=o(" \u2014 "),GG=a("a"),Iqo=o("FlaubertForQuestionAnsweringSimple"),qqo=o(" (FlauBERT model)"),Nqo=l(),B2=a("li"),Jfe=a("strong"),jqo=o("fnet"),Dqo=o(" \u2014 "),OG=a("a"),Gqo=o("FNetForQuestionAnswering"),Oqo=o(" (FNet model)"),Vqo=l(),P2=a("li"),Yfe=a("strong"),Xqo=o("funnel"),zqo=o(" \u2014 "),VG=a("a"),Qqo=o("FunnelForQuestionAnswering"),Wqo=o(" (Funnel Transformer model)"),Hqo=l(),I2=a("li"),Kfe=a("strong"),Uqo=o("gptj"),Jqo=o(" \u2014 "),XG=a("a"),Yqo=o("GPTJForQuestionAnswering"),Kqo=o(" (GPT-J model)"),Zqo=l(),q2=a("li"),Zfe=a("strong"),eNo=o("ibert"),oNo=o(" \u2014 "),zG=a("a"),rNo=o("IBertForQuestionAnswering"),tNo=o(" (I-BERT model)"),aNo=l(),N2=a("li"),eme=a("strong"),nNo=o("layoutlmv2"),sNo=o(" \u2014 "),QG=a("a"),lNo=o("LayoutLMv2ForQuestionAnswering"),iNo=o(" (LayoutLMv2 model)"),dNo=l(),j2=a("li"),ome=a("strong"),cNo=o("led"),fNo=o(" \u2014 "),WG=a("a"),mNo=o("LEDForQuestionAnswering"),gNo=o(" (LED model)"),hNo=l(),D2=a("li"),rme=a("strong"),pNo=o("longformer"),uNo=o(" \u2014 "),HG=a("a"),_No=o("LongformerForQuestionAnswering"),bNo=o(" (Longformer model)"),vNo=l(),G2=a("li"),tme=a("strong"),FNo=o("lxmert"),TNo=o(" \u2014 "),UG=a("a"),MNo=o("LxmertForQuestionAnswering"),ENo=o(" (LXMERT model)"),CNo=l(),O2=a("li"),ame=a("strong"),wNo=o("mbart"),ANo=o(" \u2014 "),JG=a("a"),yNo=o("MBartForQuestionAnswering"),LNo=o(" (mBART model)"),xNo=l(),V2=a("li"),nme=a("strong"),$No=o("megatron-bert"),kNo=o(" \u2014 "),YG=a("a"),SNo=o("MegatronBertForQuestionAnswering"),RNo=o(" (MegatronBert model)"),BNo=l(),X2=a("li"),sme=a("strong"),PNo=o("mobilebert"),INo=o(" \u2014 "),KG=a("a"),qNo=o("MobileBertForQuestionAnswering"),NNo=o(" (MobileBERT model)"),jNo=l(),z2=a("li"),lme=a("strong"),DNo=o("mpnet"),GNo=o(" \u2014 "),ZG=a("a"),ONo=o("MPNetForQuestionAnswering"),VNo=o(" (MPNet model)"),XNo=l(),Q2=a("li"),ime=a("strong"),zNo=o("nystromformer"),QNo=o(" \u2014 "),eO=a("a"),WNo=o("NystromformerForQuestionAnswering"),HNo=o(" (Nystromformer model)"),UNo=l(),W2=a("li"),dme=a("strong"),JNo=o("qdqbert"),YNo=o(" \u2014 "),oO=a("a"),KNo=o("QDQBertForQuestionAnswering"),ZNo=o(" (QDQBert model)"),ejo=l(),H2=a("li"),cme=a("strong"),ojo=o("reformer"),rjo=o(" \u2014 "),rO=a("a"),tjo=o("ReformerForQuestionAnswering"),ajo=o(" (Reformer model)"),njo=l(),U2=a("li"),fme=a("strong"),sjo=o("rembert"),ljo=o(" \u2014 "),tO=a("a"),ijo=o("RemBertForQuestionAnswering"),djo=o(" (RemBERT model)"),cjo=l(),J2=a("li"),mme=a("strong"),fjo=o("roberta"),mjo=o(" \u2014 "),aO=a("a"),gjo=o("RobertaForQuestionAnswering"),hjo=o(" (RoBERTa model)"),pjo=l(),Y2=a("li"),gme=a("strong"),ujo=o("roformer"),_jo=o(" \u2014 "),nO=a("a"),bjo=o("RoFormerForQuestionAnswering"),vjo=o(" (RoFormer model)"),Fjo=l(),K2=a("li"),hme=a("strong"),Tjo=o("splinter"),Mjo=o(" \u2014 "),sO=a("a"),Ejo=o("SplinterForQuestionAnswering"),Cjo=o(" (Splinter model)"),wjo=l(),Z2=a("li"),pme=a("strong"),Ajo=o("squeezebert"),yjo=o(" \u2014 "),lO=a("a"),Ljo=o("SqueezeBertForQuestionAnswering"),xjo=o(" (SqueezeBERT model)"),$jo=l(),e5=a("li"),ume=a("strong"),kjo=o("xlm"),Sjo=o(" \u2014 "),iO=a("a"),Rjo=o("XLMForQuestionAnsweringSimple"),Bjo=o(" (XLM model)"),Pjo=l(),o5=a("li"),_me=a("strong"),Ijo=o("xlm-roberta"),qjo=o(" \u2014 "),dO=a("a"),Njo=o("XLMRobertaForQuestionAnswering"),jjo=o(" (XLM-RoBERTa model)"),Djo=l(),r5=a("li"),bme=a("strong"),Gjo=o("xlm-roberta-xl"),Ojo=o(" \u2014 "),cO=a("a"),Vjo=o("XLMRobertaXLForQuestionAnswering"),Xjo=o(" (XLM-RoBERTa-XL model)"),zjo=l(),t5=a("li"),vme=a("strong"),Qjo=o("xlnet"),Wjo=o(" \u2014 "),fO=a("a"),Hjo=o("XLNetForQuestionAnsweringSimple"),Ujo=o(" (XLNet model)"),Jjo=l(),a5=a("li"),Fme=a("strong"),Yjo=o("yoso"),Kjo=o(" \u2014 "),mO=a("a"),Zjo=o("YosoForQuestionAnswering"),eDo=o(" (YOSO model)"),oDo=l(),n5=a("p"),rDo=o("The model is set in evaluation mode by default using "),Tme=a("code"),tDo=o("model.eval()"),aDo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Mme=a("code"),nDo=o("model.train()"),sDo=l(),F(s5.$$.fragment),hBe=l(),zi=a("h2"),l5=a("a"),Eme=a("span"),F(q0.$$.fragment),lDo=l(),Cme=a("span"),iDo=o("AutoModelForTableQuestionAnswering"),pBe=l(),qo=a("div"),F(N0.$$.fragment),dDo=l(),Qi=a("p"),cDo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),gO=a("a"),fDo=o("from_pretrained()"),mDo=o(" class method or the "),hO=a("a"),gDo=o("from_config()"),hDo=o(` class
method.`),pDo=l(),j0=a("p"),uDo=o("This class cannot be instantiated directly using "),wme=a("code"),_Do=o("__init__()"),bDo=o(" (throws an error)."),vDo=l(),dt=a("div"),F(D0.$$.fragment),FDo=l(),Ame=a("p"),TDo=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),MDo=l(),Wi=a("p"),EDo=o(`Note:
Loading a model from its configuration file does `),yme=a("strong"),CDo=o("not"),wDo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pO=a("a"),ADo=o("from_pretrained()"),yDo=o(" to load the model weights."),LDo=l(),F(i5.$$.fragment),xDo=l(),to=a("div"),F(G0.$$.fragment),$Do=l(),Lme=a("p"),kDo=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),SDo=l(),Ra=a("p"),RDo=o("The model class to instantiate is selected based on the "),xme=a("code"),BDo=o("model_type"),PDo=o(` property of the config object (either
passed as an argument or loaded from `),$me=a("code"),IDo=o("pretrained_model_name_or_path"),qDo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kme=a("code"),NDo=o("pretrained_model_name_or_path"),jDo=o(":"),DDo=l(),Sme=a("ul"),d5=a("li"),Rme=a("strong"),GDo=o("tapas"),ODo=o(" \u2014 "),uO=a("a"),VDo=o("TapasForQuestionAnswering"),XDo=o(" (TAPAS model)"),zDo=l(),c5=a("p"),QDo=o("The model is set in evaluation mode by default using "),Bme=a("code"),WDo=o("model.eval()"),HDo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Pme=a("code"),UDo=o("model.train()"),JDo=l(),F(f5.$$.fragment),uBe=l(),Hi=a("h2"),m5=a("a"),Ime=a("span"),F(O0.$$.fragment),YDo=l(),qme=a("span"),KDo=o("AutoModelForImageClassification"),_Be=l(),No=a("div"),F(V0.$$.fragment),ZDo=l(),Ui=a("p"),eGo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),_O=a("a"),oGo=o("from_pretrained()"),rGo=o(" class method or the "),bO=a("a"),tGo=o("from_config()"),aGo=o(` class
method.`),nGo=l(),X0=a("p"),sGo=o("This class cannot be instantiated directly using "),Nme=a("code"),lGo=o("__init__()"),iGo=o(" (throws an error)."),dGo=l(),ct=a("div"),F(z0.$$.fragment),cGo=l(),jme=a("p"),fGo=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),mGo=l(),Ji=a("p"),gGo=o(`Note:
Loading a model from its configuration file does `),Dme=a("strong"),hGo=o("not"),pGo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vO=a("a"),uGo=o("from_pretrained()"),_Go=o(" to load the model weights."),bGo=l(),F(g5.$$.fragment),vGo=l(),ao=a("div"),F(Q0.$$.fragment),FGo=l(),Gme=a("p"),TGo=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),MGo=l(),Ba=a("p"),EGo=o("The model class to instantiate is selected based on the "),Ome=a("code"),CGo=o("model_type"),wGo=o(` property of the config object (either
passed as an argument or loaded from `),Vme=a("code"),AGo=o("pretrained_model_name_or_path"),yGo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xme=a("code"),LGo=o("pretrained_model_name_or_path"),xGo=o(":"),$Go=l(),ve=a("ul"),h5=a("li"),zme=a("strong"),kGo=o("beit"),SGo=o(" \u2014 "),FO=a("a"),RGo=o("BeitForImageClassification"),BGo=o(" (BEiT model)"),PGo=l(),p5=a("li"),Qme=a("strong"),IGo=o("convnext"),qGo=o(" \u2014 "),TO=a("a"),NGo=o("ConvNextForImageClassification"),jGo=o(" (ConvNext model)"),DGo=l(),u5=a("li"),Wme=a("strong"),GGo=o("data2vec-vision"),OGo=o(" \u2014 "),MO=a("a"),VGo=o("Data2VecVisionForImageClassification"),XGo=o(" (Data2VecVision model)"),zGo=l(),xs=a("li"),Hme=a("strong"),QGo=o("deit"),WGo=o(" \u2014 "),EO=a("a"),HGo=o("DeiTForImageClassification"),UGo=o(" or "),CO=a("a"),JGo=o("DeiTForImageClassificationWithTeacher"),YGo=o(" (DeiT model)"),KGo=l(),_5=a("li"),Ume=a("strong"),ZGo=o("imagegpt"),eOo=o(" \u2014 "),wO=a("a"),oOo=o("ImageGPTForImageClassification"),rOo=o(" (ImageGPT model)"),tOo=l(),ft=a("li"),Jme=a("strong"),aOo=o("perceiver"),nOo=o(" \u2014 "),AO=a("a"),sOo=o("PerceiverForImageClassificationLearned"),lOo=o(" or "),yO=a("a"),iOo=o("PerceiverForImageClassificationFourier"),dOo=o(" or "),LO=a("a"),cOo=o("PerceiverForImageClassificationConvProcessing"),fOo=o(" (Perceiver model)"),mOo=l(),b5=a("li"),Yme=a("strong"),gOo=o("poolformer"),hOo=o(" \u2014 "),xO=a("a"),pOo=o("PoolFormerForImageClassification"),uOo=o(" (PoolFormer model)"),_Oo=l(),v5=a("li"),Kme=a("strong"),bOo=o("regnet"),vOo=o(" \u2014 "),$O=a("a"),FOo=o("RegNetForImageClassification"),TOo=o(" (RegNet model)"),MOo=l(),F5=a("li"),Zme=a("strong"),EOo=o("resnet"),COo=o(" \u2014 "),kO=a("a"),wOo=o("ResNetForImageClassification"),AOo=o(" (ResNet model)"),yOo=l(),T5=a("li"),ege=a("strong"),LOo=o("segformer"),xOo=o(" \u2014 "),SO=a("a"),$Oo=o("SegformerForImageClassification"),kOo=o(" (SegFormer model)"),SOo=l(),M5=a("li"),oge=a("strong"),ROo=o("swin"),BOo=o(" \u2014 "),RO=a("a"),POo=o("SwinForImageClassification"),IOo=o(" (Swin model)"),qOo=l(),E5=a("li"),rge=a("strong"),NOo=o("van"),jOo=o(" \u2014 "),BO=a("a"),DOo=o("VanForImageClassification"),GOo=o(" (VAN model)"),OOo=l(),C5=a("li"),tge=a("strong"),VOo=o("vit"),XOo=o(" \u2014 "),PO=a("a"),zOo=o("ViTForImageClassification"),QOo=o(" (ViT model)"),WOo=l(),w5=a("p"),HOo=o("The model is set in evaluation mode by default using "),age=a("code"),UOo=o("model.eval()"),JOo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),nge=a("code"),YOo=o("model.train()"),KOo=l(),F(A5.$$.fragment),bBe=l(),Yi=a("h2"),y5=a("a"),sge=a("span"),F(W0.$$.fragment),ZOo=l(),lge=a("span"),eVo=o("AutoModelForVision2Seq"),vBe=l(),jo=a("div"),F(H0.$$.fragment),oVo=l(),Ki=a("p"),rVo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),IO=a("a"),tVo=o("from_pretrained()"),aVo=o(" class method or the "),qO=a("a"),nVo=o("from_config()"),sVo=o(` class
method.`),lVo=l(),U0=a("p"),iVo=o("This class cannot be instantiated directly using "),ige=a("code"),dVo=o("__init__()"),cVo=o(" (throws an error)."),fVo=l(),mt=a("div"),F(J0.$$.fragment),mVo=l(),dge=a("p"),gVo=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),hVo=l(),Zi=a("p"),pVo=o(`Note:
Loading a model from its configuration file does `),cge=a("strong"),uVo=o("not"),_Vo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),NO=a("a"),bVo=o("from_pretrained()"),vVo=o(" to load the model weights."),FVo=l(),F(L5.$$.fragment),TVo=l(),no=a("div"),F(Y0.$$.fragment),MVo=l(),fge=a("p"),EVo=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),CVo=l(),Pa=a("p"),wVo=o("The model class to instantiate is selected based on the "),mge=a("code"),AVo=o("model_type"),yVo=o(` property of the config object (either
passed as an argument or loaded from `),gge=a("code"),LVo=o("pretrained_model_name_or_path"),xVo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hge=a("code"),$Vo=o("pretrained_model_name_or_path"),kVo=o(":"),SVo=l(),pge=a("ul"),x5=a("li"),uge=a("strong"),RVo=o("vision-encoder-decoder"),BVo=o(" \u2014 "),jO=a("a"),PVo=o("VisionEncoderDecoderModel"),IVo=o(" (Vision Encoder decoder model)"),qVo=l(),$5=a("p"),NVo=o("The model is set in evaluation mode by default using "),_ge=a("code"),jVo=o("model.eval()"),DVo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),bge=a("code"),GVo=o("model.train()"),OVo=l(),F(k5.$$.fragment),FBe=l(),ed=a("h2"),S5=a("a"),vge=a("span"),F(K0.$$.fragment),VVo=l(),Fge=a("span"),XVo=o("AutoModelForAudioClassification"),TBe=l(),Do=a("div"),F(Z0.$$.fragment),zVo=l(),od=a("p"),QVo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),DO=a("a"),WVo=o("from_pretrained()"),HVo=o(" class method or the "),GO=a("a"),UVo=o("from_config()"),JVo=o(` class
method.`),YVo=l(),ey=a("p"),KVo=o("This class cannot be instantiated directly using "),Tge=a("code"),ZVo=o("__init__()"),eXo=o(" (throws an error)."),oXo=l(),gt=a("div"),F(oy.$$.fragment),rXo=l(),Mge=a("p"),tXo=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),aXo=l(),rd=a("p"),nXo=o(`Note:
Loading a model from its configuration file does `),Ege=a("strong"),sXo=o("not"),lXo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),OO=a("a"),iXo=o("from_pretrained()"),dXo=o(" to load the model weights."),cXo=l(),F(R5.$$.fragment),fXo=l(),so=a("div"),F(ry.$$.fragment),mXo=l(),Cge=a("p"),gXo=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),hXo=l(),Ia=a("p"),pXo=o("The model class to instantiate is selected based on the "),wge=a("code"),uXo=o("model_type"),_Xo=o(` property of the config object (either
passed as an argument or loaded from `),Age=a("code"),bXo=o("pretrained_model_name_or_path"),vXo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yge=a("code"),FXo=o("pretrained_model_name_or_path"),TXo=o(":"),MXo=l(),qe=a("ul"),B5=a("li"),Lge=a("strong"),EXo=o("data2vec-audio"),CXo=o(" \u2014 "),VO=a("a"),wXo=o("Data2VecAudioForSequenceClassification"),AXo=o(" (Data2VecAudio model)"),yXo=l(),P5=a("li"),xge=a("strong"),LXo=o("hubert"),xXo=o(" \u2014 "),XO=a("a"),$Xo=o("HubertForSequenceClassification"),kXo=o(" (Hubert model)"),SXo=l(),I5=a("li"),$ge=a("strong"),RXo=o("sew"),BXo=o(" \u2014 "),zO=a("a"),PXo=o("SEWForSequenceClassification"),IXo=o(" (SEW model)"),qXo=l(),q5=a("li"),kge=a("strong"),NXo=o("sew-d"),jXo=o(" \u2014 "),QO=a("a"),DXo=o("SEWDForSequenceClassification"),GXo=o(" (SEW-D model)"),OXo=l(),N5=a("li"),Sge=a("strong"),VXo=o("unispeech"),XXo=o(" \u2014 "),WO=a("a"),zXo=o("UniSpeechForSequenceClassification"),QXo=o(" (UniSpeech model)"),WXo=l(),j5=a("li"),Rge=a("strong"),HXo=o("unispeech-sat"),UXo=o(" \u2014 "),HO=a("a"),JXo=o("UniSpeechSatForSequenceClassification"),YXo=o(" (UniSpeechSat model)"),KXo=l(),D5=a("li"),Bge=a("strong"),ZXo=o("wav2vec2"),ezo=o(" \u2014 "),UO=a("a"),ozo=o("Wav2Vec2ForSequenceClassification"),rzo=o(" (Wav2Vec2 model)"),tzo=l(),G5=a("li"),Pge=a("strong"),azo=o("wavlm"),nzo=o(" \u2014 "),JO=a("a"),szo=o("WavLMForSequenceClassification"),lzo=o(" (WavLM model)"),izo=l(),O5=a("p"),dzo=o("The model is set in evaluation mode by default using "),Ige=a("code"),czo=o("model.eval()"),fzo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),qge=a("code"),mzo=o("model.train()"),gzo=l(),F(V5.$$.fragment),MBe=l(),td=a("h2"),X5=a("a"),Nge=a("span"),F(ty.$$.fragment),hzo=l(),jge=a("span"),pzo=o("AutoModelForAudioFrameClassification"),EBe=l(),Go=a("div"),F(ay.$$.fragment),uzo=l(),ad=a("p"),_zo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),YO=a("a"),bzo=o("from_pretrained()"),vzo=o(" class method or the "),KO=a("a"),Fzo=o("from_config()"),Tzo=o(` class
method.`),Mzo=l(),ny=a("p"),Ezo=o("This class cannot be instantiated directly using "),Dge=a("code"),Czo=o("__init__()"),wzo=o(" (throws an error)."),Azo=l(),ht=a("div"),F(sy.$$.fragment),yzo=l(),Gge=a("p"),Lzo=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),xzo=l(),nd=a("p"),$zo=o(`Note:
Loading a model from its configuration file does `),Oge=a("strong"),kzo=o("not"),Szo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ZO=a("a"),Rzo=o("from_pretrained()"),Bzo=o(" to load the model weights."),Pzo=l(),F(z5.$$.fragment),Izo=l(),lo=a("div"),F(ly.$$.fragment),qzo=l(),Vge=a("p"),Nzo=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),jzo=l(),qa=a("p"),Dzo=o("The model class to instantiate is selected based on the "),Xge=a("code"),Gzo=o("model_type"),Ozo=o(` property of the config object (either
passed as an argument or loaded from `),zge=a("code"),Vzo=o("pretrained_model_name_or_path"),Xzo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qge=a("code"),zzo=o("pretrained_model_name_or_path"),Qzo=o(":"),Wzo=l(),Na=a("ul"),Q5=a("li"),Wge=a("strong"),Hzo=o("data2vec-audio"),Uzo=o(" \u2014 "),eV=a("a"),Jzo=o("Data2VecAudioForAudioFrameClassification"),Yzo=o(" (Data2VecAudio model)"),Kzo=l(),W5=a("li"),Hge=a("strong"),Zzo=o("unispeech-sat"),eQo=o(" \u2014 "),oV=a("a"),oQo=o("UniSpeechSatForAudioFrameClassification"),rQo=o(" (UniSpeechSat model)"),tQo=l(),H5=a("li"),Uge=a("strong"),aQo=o("wav2vec2"),nQo=o(" \u2014 "),rV=a("a"),sQo=o("Wav2Vec2ForAudioFrameClassification"),lQo=o(" (Wav2Vec2 model)"),iQo=l(),U5=a("li"),Jge=a("strong"),dQo=o("wavlm"),cQo=o(" \u2014 "),tV=a("a"),fQo=o("WavLMForAudioFrameClassification"),mQo=o(" (WavLM model)"),gQo=l(),J5=a("p"),hQo=o("The model is set in evaluation mode by default using "),Yge=a("code"),pQo=o("model.eval()"),uQo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Kge=a("code"),_Qo=o("model.train()"),bQo=l(),F(Y5.$$.fragment),CBe=l(),sd=a("h2"),K5=a("a"),Zge=a("span"),F(iy.$$.fragment),vQo=l(),ehe=a("span"),FQo=o("AutoModelForCTC"),wBe=l(),Oo=a("div"),F(dy.$$.fragment),TQo=l(),ld=a("p"),MQo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),aV=a("a"),EQo=o("from_pretrained()"),CQo=o(" class method or the "),nV=a("a"),wQo=o("from_config()"),AQo=o(` class
method.`),yQo=l(),cy=a("p"),LQo=o("This class cannot be instantiated directly using "),ohe=a("code"),xQo=o("__init__()"),$Qo=o(" (throws an error)."),kQo=l(),pt=a("div"),F(fy.$$.fragment),SQo=l(),rhe=a("p"),RQo=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),BQo=l(),id=a("p"),PQo=o(`Note:
Loading a model from its configuration file does `),the=a("strong"),IQo=o("not"),qQo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sV=a("a"),NQo=o("from_pretrained()"),jQo=o(" to load the model weights."),DQo=l(),F(Z5.$$.fragment),GQo=l(),io=a("div"),F(my.$$.fragment),OQo=l(),ahe=a("p"),VQo=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),XQo=l(),ja=a("p"),zQo=o("The model class to instantiate is selected based on the "),nhe=a("code"),QQo=o("model_type"),WQo=o(` property of the config object (either
passed as an argument or loaded from `),she=a("code"),HQo=o("pretrained_model_name_or_path"),UQo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lhe=a("code"),JQo=o("pretrained_model_name_or_path"),YQo=o(":"),KQo=l(),Ne=a("ul"),ev=a("li"),ihe=a("strong"),ZQo=o("data2vec-audio"),eWo=o(" \u2014 "),lV=a("a"),oWo=o("Data2VecAudioForCTC"),rWo=o(" (Data2VecAudio model)"),tWo=l(),ov=a("li"),dhe=a("strong"),aWo=o("hubert"),nWo=o(" \u2014 "),iV=a("a"),sWo=o("HubertForCTC"),lWo=o(" (Hubert model)"),iWo=l(),rv=a("li"),che=a("strong"),dWo=o("sew"),cWo=o(" \u2014 "),dV=a("a"),fWo=o("SEWForCTC"),mWo=o(" (SEW model)"),gWo=l(),tv=a("li"),fhe=a("strong"),hWo=o("sew-d"),pWo=o(" \u2014 "),cV=a("a"),uWo=o("SEWDForCTC"),_Wo=o(" (SEW-D model)"),bWo=l(),av=a("li"),mhe=a("strong"),vWo=o("unispeech"),FWo=o(" \u2014 "),fV=a("a"),TWo=o("UniSpeechForCTC"),MWo=o(" (UniSpeech model)"),EWo=l(),nv=a("li"),ghe=a("strong"),CWo=o("unispeech-sat"),wWo=o(" \u2014 "),mV=a("a"),AWo=o("UniSpeechSatForCTC"),yWo=o(" (UniSpeechSat model)"),LWo=l(),sv=a("li"),hhe=a("strong"),xWo=o("wav2vec2"),$Wo=o(" \u2014 "),gV=a("a"),kWo=o("Wav2Vec2ForCTC"),SWo=o(" (Wav2Vec2 model)"),RWo=l(),lv=a("li"),phe=a("strong"),BWo=o("wavlm"),PWo=o(" \u2014 "),hV=a("a"),IWo=o("WavLMForCTC"),qWo=o(" (WavLM model)"),NWo=l(),iv=a("p"),jWo=o("The model is set in evaluation mode by default using "),uhe=a("code"),DWo=o("model.eval()"),GWo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_he=a("code"),OWo=o("model.train()"),VWo=l(),F(dv.$$.fragment),ABe=l(),dd=a("h2"),cv=a("a"),bhe=a("span"),F(gy.$$.fragment),XWo=l(),vhe=a("span"),zWo=o("AutoModelForSpeechSeq2Seq"),yBe=l(),Vo=a("div"),F(hy.$$.fragment),QWo=l(),cd=a("p"),WWo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),pV=a("a"),HWo=o("from_pretrained()"),UWo=o(" class method or the "),uV=a("a"),JWo=o("from_config()"),YWo=o(` class
method.`),KWo=l(),py=a("p"),ZWo=o("This class cannot be instantiated directly using "),Fhe=a("code"),eHo=o("__init__()"),oHo=o(" (throws an error)."),rHo=l(),ut=a("div"),F(uy.$$.fragment),tHo=l(),The=a("p"),aHo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),nHo=l(),fd=a("p"),sHo=o(`Note:
Loading a model from its configuration file does `),Mhe=a("strong"),lHo=o("not"),iHo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_V=a("a"),dHo=o("from_pretrained()"),cHo=o(" to load the model weights."),fHo=l(),F(fv.$$.fragment),mHo=l(),co=a("div"),F(_y.$$.fragment),gHo=l(),Ehe=a("p"),hHo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),pHo=l(),Da=a("p"),uHo=o("The model class to instantiate is selected based on the "),Che=a("code"),_Ho=o("model_type"),bHo=o(` property of the config object (either
passed as an argument or loaded from `),whe=a("code"),vHo=o("pretrained_model_name_or_path"),FHo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ahe=a("code"),THo=o("pretrained_model_name_or_path"),MHo=o(":"),EHo=l(),by=a("ul"),mv=a("li"),yhe=a("strong"),CHo=o("speech-encoder-decoder"),wHo=o(" \u2014 "),bV=a("a"),AHo=o("SpeechEncoderDecoderModel"),yHo=o(" (Speech Encoder decoder model)"),LHo=l(),gv=a("li"),Lhe=a("strong"),xHo=o("speech_to_text"),$Ho=o(" \u2014 "),vV=a("a"),kHo=o("Speech2TextForConditionalGeneration"),SHo=o(" (Speech2Text model)"),RHo=l(),hv=a("p"),BHo=o("The model is set in evaluation mode by default using "),xhe=a("code"),PHo=o("model.eval()"),IHo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$he=a("code"),qHo=o("model.train()"),NHo=l(),F(pv.$$.fragment),LBe=l(),md=a("h2"),uv=a("a"),khe=a("span"),F(vy.$$.fragment),jHo=l(),She=a("span"),DHo=o("AutoModelForAudioXVector"),xBe=l(),Xo=a("div"),F(Fy.$$.fragment),GHo=l(),gd=a("p"),OHo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),FV=a("a"),VHo=o("from_pretrained()"),XHo=o(" class method or the "),TV=a("a"),zHo=o("from_config()"),QHo=o(` class
method.`),WHo=l(),Ty=a("p"),HHo=o("This class cannot be instantiated directly using "),Rhe=a("code"),UHo=o("__init__()"),JHo=o(" (throws an error)."),YHo=l(),_t=a("div"),F(My.$$.fragment),KHo=l(),Bhe=a("p"),ZHo=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),eUo=l(),hd=a("p"),oUo=o(`Note:
Loading a model from its configuration file does `),Phe=a("strong"),rUo=o("not"),tUo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),MV=a("a"),aUo=o("from_pretrained()"),nUo=o(" to load the model weights."),sUo=l(),F(_v.$$.fragment),lUo=l(),fo=a("div"),F(Ey.$$.fragment),iUo=l(),Ihe=a("p"),dUo=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),cUo=l(),Ga=a("p"),fUo=o("The model class to instantiate is selected based on the "),qhe=a("code"),mUo=o("model_type"),gUo=o(` property of the config object (either
passed as an argument or loaded from `),Nhe=a("code"),hUo=o("pretrained_model_name_or_path"),pUo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jhe=a("code"),uUo=o("pretrained_model_name_or_path"),_Uo=o(":"),bUo=l(),Oa=a("ul"),bv=a("li"),Dhe=a("strong"),vUo=o("data2vec-audio"),FUo=o(" \u2014 "),EV=a("a"),TUo=o("Data2VecAudioForXVector"),MUo=o(" (Data2VecAudio model)"),EUo=l(),vv=a("li"),Ghe=a("strong"),CUo=o("unispeech-sat"),wUo=o(" \u2014 "),CV=a("a"),AUo=o("UniSpeechSatForXVector"),yUo=o(" (UniSpeechSat model)"),LUo=l(),Fv=a("li"),Ohe=a("strong"),xUo=o("wav2vec2"),$Uo=o(" \u2014 "),wV=a("a"),kUo=o("Wav2Vec2ForXVector"),SUo=o(" (Wav2Vec2 model)"),RUo=l(),Tv=a("li"),Vhe=a("strong"),BUo=o("wavlm"),PUo=o(" \u2014 "),AV=a("a"),IUo=o("WavLMForXVector"),qUo=o(" (WavLM model)"),NUo=l(),Mv=a("p"),jUo=o("The model is set in evaluation mode by default using "),Xhe=a("code"),DUo=o("model.eval()"),GUo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zhe=a("code"),OUo=o("model.train()"),VUo=l(),F(Ev.$$.fragment),$Be=l(),pd=a("h2"),Cv=a("a"),Qhe=a("span"),F(Cy.$$.fragment),XUo=l(),Whe=a("span"),zUo=o("AutoModelForMaskedImageModeling"),kBe=l(),zo=a("div"),F(wy.$$.fragment),QUo=l(),ud=a("p"),WUo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),yV=a("a"),HUo=o("from_pretrained()"),UUo=o(" class method or the "),LV=a("a"),JUo=o("from_config()"),YUo=o(` class
method.`),KUo=l(),Ay=a("p"),ZUo=o("This class cannot be instantiated directly using "),Hhe=a("code"),eJo=o("__init__()"),oJo=o(" (throws an error)."),rJo=l(),bt=a("div"),F(yy.$$.fragment),tJo=l(),Uhe=a("p"),aJo=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),nJo=l(),_d=a("p"),sJo=o(`Note:
Loading a model from its configuration file does `),Jhe=a("strong"),lJo=o("not"),iJo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xV=a("a"),dJo=o("from_pretrained()"),cJo=o(" to load the model weights."),fJo=l(),F(wv.$$.fragment),mJo=l(),mo=a("div"),F(Ly.$$.fragment),gJo=l(),Yhe=a("p"),hJo=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),pJo=l(),Va=a("p"),uJo=o("The model class to instantiate is selected based on the "),Khe=a("code"),_Jo=o("model_type"),bJo=o(` property of the config object (either
passed as an argument or loaded from `),Zhe=a("code"),vJo=o("pretrained_model_name_or_path"),FJo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),epe=a("code"),TJo=o("pretrained_model_name_or_path"),MJo=o(":"),EJo=l(),bd=a("ul"),Av=a("li"),ope=a("strong"),CJo=o("deit"),wJo=o(" \u2014 "),$V=a("a"),AJo=o("DeiTForMaskedImageModeling"),yJo=o(" (DeiT model)"),LJo=l(),yv=a("li"),rpe=a("strong"),xJo=o("swin"),$Jo=o(" \u2014 "),kV=a("a"),kJo=o("SwinForMaskedImageModeling"),SJo=o(" (Swin model)"),RJo=l(),Lv=a("li"),tpe=a("strong"),BJo=o("vit"),PJo=o(" \u2014 "),SV=a("a"),IJo=o("ViTForMaskedImageModeling"),qJo=o(" (ViT model)"),NJo=l(),xv=a("p"),jJo=o("The model is set in evaluation mode by default using "),ape=a("code"),DJo=o("model.eval()"),GJo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),npe=a("code"),OJo=o("model.train()"),VJo=l(),F($v.$$.fragment),SBe=l(),vd=a("h2"),kv=a("a"),spe=a("span"),F(xy.$$.fragment),XJo=l(),lpe=a("span"),zJo=o("AutoModelForObjectDetection"),RBe=l(),Qo=a("div"),F($y.$$.fragment),QJo=l(),Fd=a("p"),WJo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),RV=a("a"),HJo=o("from_pretrained()"),UJo=o(" class method or the "),BV=a("a"),JJo=o("from_config()"),YJo=o(` class
method.`),KJo=l(),ky=a("p"),ZJo=o("This class cannot be instantiated directly using "),ipe=a("code"),eYo=o("__init__()"),oYo=o(" (throws an error)."),rYo=l(),vt=a("div"),F(Sy.$$.fragment),tYo=l(),dpe=a("p"),aYo=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),nYo=l(),Td=a("p"),sYo=o(`Note:
Loading a model from its configuration file does `),cpe=a("strong"),lYo=o("not"),iYo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),PV=a("a"),dYo=o("from_pretrained()"),cYo=o(" to load the model weights."),fYo=l(),F(Sv.$$.fragment),mYo=l(),go=a("div"),F(Ry.$$.fragment),gYo=l(),fpe=a("p"),hYo=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),pYo=l(),Xa=a("p"),uYo=o("The model class to instantiate is selected based on the "),mpe=a("code"),_Yo=o("model_type"),bYo=o(` property of the config object (either
passed as an argument or loaded from `),gpe=a("code"),vYo=o("pretrained_model_name_or_path"),FYo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hpe=a("code"),TYo=o("pretrained_model_name_or_path"),MYo=o(":"),EYo=l(),ppe=a("ul"),Rv=a("li"),upe=a("strong"),CYo=o("detr"),wYo=o(" \u2014 "),IV=a("a"),AYo=o("DetrForObjectDetection"),yYo=o(" (DETR model)"),LYo=l(),Bv=a("p"),xYo=o("The model is set in evaluation mode by default using "),_pe=a("code"),$Yo=o("model.eval()"),kYo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),bpe=a("code"),SYo=o("model.train()"),RYo=l(),F(Pv.$$.fragment),BBe=l(),Md=a("h2"),Iv=a("a"),vpe=a("span"),F(By.$$.fragment),BYo=l(),Fpe=a("span"),PYo=o("AutoModelForImageSegmentation"),PBe=l(),Wo=a("div"),F(Py.$$.fragment),IYo=l(),Ed=a("p"),qYo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),qV=a("a"),NYo=o("from_pretrained()"),jYo=o(" class method or the "),NV=a("a"),DYo=o("from_config()"),GYo=o(` class
method.`),OYo=l(),Iy=a("p"),VYo=o("This class cannot be instantiated directly using "),Tpe=a("code"),XYo=o("__init__()"),zYo=o(" (throws an error)."),QYo=l(),Ft=a("div"),F(qy.$$.fragment),WYo=l(),Mpe=a("p"),HYo=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),UYo=l(),Cd=a("p"),JYo=o(`Note:
Loading a model from its configuration file does `),Epe=a("strong"),YYo=o("not"),KYo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jV=a("a"),ZYo=o("from_pretrained()"),eKo=o(" to load the model weights."),oKo=l(),F(qv.$$.fragment),rKo=l(),ho=a("div"),F(Ny.$$.fragment),tKo=l(),Cpe=a("p"),aKo=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),nKo=l(),za=a("p"),sKo=o("The model class to instantiate is selected based on the "),wpe=a("code"),lKo=o("model_type"),iKo=o(` property of the config object (either
passed as an argument or loaded from `),Ape=a("code"),dKo=o("pretrained_model_name_or_path"),cKo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ype=a("code"),fKo=o("pretrained_model_name_or_path"),mKo=o(":"),gKo=l(),Lpe=a("ul"),Nv=a("li"),xpe=a("strong"),hKo=o("detr"),pKo=o(" \u2014 "),DV=a("a"),uKo=o("DetrForSegmentation"),_Ko=o(" (DETR model)"),bKo=l(),jv=a("p"),vKo=o("The model is set in evaluation mode by default using "),$pe=a("code"),FKo=o("model.eval()"),TKo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),kpe=a("code"),MKo=o("model.train()"),EKo=l(),F(Dv.$$.fragment),IBe=l(),wd=a("h2"),Gv=a("a"),Spe=a("span"),F(jy.$$.fragment),CKo=l(),Rpe=a("span"),wKo=o("AutoModelForSemanticSegmentation"),qBe=l(),Ho=a("div"),F(Dy.$$.fragment),AKo=l(),Ad=a("p"),yKo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),GV=a("a"),LKo=o("from_pretrained()"),xKo=o(" class method or the "),OV=a("a"),$Ko=o("from_config()"),kKo=o(` class
method.`),SKo=l(),Gy=a("p"),RKo=o("This class cannot be instantiated directly using "),Bpe=a("code"),BKo=o("__init__()"),PKo=o(" (throws an error)."),IKo=l(),Tt=a("div"),F(Oy.$$.fragment),qKo=l(),Ppe=a("p"),NKo=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),jKo=l(),yd=a("p"),DKo=o(`Note:
Loading a model from its configuration file does `),Ipe=a("strong"),GKo=o("not"),OKo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),VV=a("a"),VKo=o("from_pretrained()"),XKo=o(" to load the model weights."),zKo=l(),F(Ov.$$.fragment),QKo=l(),po=a("div"),F(Vy.$$.fragment),WKo=l(),qpe=a("p"),HKo=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),UKo=l(),Qa=a("p"),JKo=o("The model class to instantiate is selected based on the "),Npe=a("code"),YKo=o("model_type"),KKo=o(` property of the config object (either
passed as an argument or loaded from `),jpe=a("code"),ZKo=o("pretrained_model_name_or_path"),eZo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dpe=a("code"),oZo=o("pretrained_model_name_or_path"),rZo=o(":"),tZo=l(),Wa=a("ul"),Vv=a("li"),Gpe=a("strong"),aZo=o("beit"),nZo=o(" \u2014 "),XV=a("a"),sZo=o("BeitForSemanticSegmentation"),lZo=o(" (BEiT model)"),iZo=l(),Xv=a("li"),Ope=a("strong"),dZo=o("data2vec-vision"),cZo=o(" \u2014 "),zV=a("a"),fZo=o("Data2VecVisionForSemanticSegmentation"),mZo=o(" (Data2VecVision model)"),gZo=l(),zv=a("li"),Vpe=a("strong"),hZo=o("dpt"),pZo=o(" \u2014 "),QV=a("a"),uZo=o("DPTForSemanticSegmentation"),_Zo=o(" (DPT model)"),bZo=l(),Qv=a("li"),Xpe=a("strong"),vZo=o("segformer"),FZo=o(" \u2014 "),WV=a("a"),TZo=o("SegformerForSemanticSegmentation"),MZo=o(" (SegFormer model)"),EZo=l(),Wv=a("p"),CZo=o("The model is set in evaluation mode by default using "),zpe=a("code"),wZo=o("model.eval()"),AZo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Qpe=a("code"),yZo=o("model.train()"),LZo=l(),F(Hv.$$.fragment),NBe=l(),Ld=a("h2"),Uv=a("a"),Wpe=a("span"),F(Xy.$$.fragment),xZo=l(),Hpe=a("span"),$Zo=o("AutoModelForInstanceSegmentation"),jBe=l(),Uo=a("div"),F(zy.$$.fragment),kZo=l(),xd=a("p"),SZo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),HV=a("a"),RZo=o("from_pretrained()"),BZo=o(" class method or the "),UV=a("a"),PZo=o("from_config()"),IZo=o(` class
method.`),qZo=l(),Qy=a("p"),NZo=o("This class cannot be instantiated directly using "),Upe=a("code"),jZo=o("__init__()"),DZo=o(" (throws an error)."),GZo=l(),Mt=a("div"),F(Wy.$$.fragment),OZo=l(),Jpe=a("p"),VZo=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),XZo=l(),$d=a("p"),zZo=o(`Note:
Loading a model from its configuration file does `),Ype=a("strong"),QZo=o("not"),WZo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),JV=a("a"),HZo=o("from_pretrained()"),UZo=o(" to load the model weights."),JZo=l(),F(Jv.$$.fragment),YZo=l(),uo=a("div"),F(Hy.$$.fragment),KZo=l(),Kpe=a("p"),ZZo=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),eer=l(),Ha=a("p"),oer=o("The model class to instantiate is selected based on the "),Zpe=a("code"),rer=o("model_type"),ter=o(` property of the config object (either
passed as an argument or loaded from `),eue=a("code"),aer=o("pretrained_model_name_or_path"),ner=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),oue=a("code"),ser=o("pretrained_model_name_or_path"),ler=o(":"),ier=l(),rue=a("ul"),Yv=a("li"),tue=a("strong"),der=o("maskformer"),cer=o(" \u2014 "),YV=a("a"),fer=o("MaskFormerForInstanceSegmentation"),mer=o(" (MaskFormer model)"),ger=l(),Kv=a("p"),her=o("The model is set in evaluation mode by default using "),aue=a("code"),per=o("model.eval()"),uer=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),nue=a("code"),_er=o("model.train()"),ber=l(),F(Zv.$$.fragment),DBe=l(),kd=a("h2"),eF=a("a"),sue=a("span"),F(Uy.$$.fragment),ver=l(),lue=a("span"),Fer=o("TFAutoModel"),GBe=l(),Jo=a("div"),F(Jy.$$.fragment),Ter=l(),Sd=a("p"),Mer=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),KV=a("a"),Eer=o("from_pretrained()"),Cer=o(" class method or the "),ZV=a("a"),wer=o("from_config()"),Aer=o(` class
method.`),yer=l(),Yy=a("p"),Ler=o("This class cannot be instantiated directly using "),iue=a("code"),xer=o("__init__()"),$er=o(" (throws an error)."),ker=l(),Et=a("div"),F(Ky.$$.fragment),Ser=l(),due=a("p"),Rer=o("Instantiates one of the base model classes of the library from a configuration."),Ber=l(),Rd=a("p"),Per=o(`Note:
Loading a model from its configuration file does `),cue=a("strong"),Ier=o("not"),qer=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),eX=a("a"),Ner=o("from_pretrained()"),jer=o(" to load the model weights."),Der=l(),F(oF.$$.fragment),Ger=l(),Er=a("div"),F(Zy.$$.fragment),Oer=l(),fue=a("p"),Ver=o("Instantiate one of the base model classes of the library from a pretrained model."),Xer=l(),Ua=a("p"),zer=o("The model class to instantiate is selected based on the "),mue=a("code"),Qer=o("model_type"),Wer=o(` property of the config object (either
passed as an argument or loaded from `),gue=a("code"),Her=o("pretrained_model_name_or_path"),Uer=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hue=a("code"),Jer=o("pretrained_model_name_or_path"),Yer=o(":"),Ker=l(),j=a("ul"),rF=a("li"),pue=a("strong"),Zer=o("albert"),eor=o(" \u2014 "),oX=a("a"),oor=o("TFAlbertModel"),ror=o(" (ALBERT model)"),tor=l(),tF=a("li"),uue=a("strong"),aor=o("bart"),nor=o(" \u2014 "),rX=a("a"),sor=o("TFBartModel"),lor=o(" (BART model)"),ior=l(),aF=a("li"),_ue=a("strong"),dor=o("bert"),cor=o(" \u2014 "),tX=a("a"),mor=o("TFBertModel"),gor=o(" (BERT model)"),hor=l(),nF=a("li"),bue=a("strong"),por=o("blenderbot"),uor=o(" \u2014 "),aX=a("a"),_or=o("TFBlenderbotModel"),bor=o(" (Blenderbot model)"),vor=l(),sF=a("li"),vue=a("strong"),For=o("blenderbot-small"),Tor=o(" \u2014 "),nX=a("a"),Mor=o("TFBlenderbotSmallModel"),Eor=o(" (BlenderbotSmall model)"),Cor=l(),lF=a("li"),Fue=a("strong"),wor=o("camembert"),Aor=o(" \u2014 "),sX=a("a"),yor=o("TFCamembertModel"),Lor=o(" (CamemBERT model)"),xor=l(),iF=a("li"),Tue=a("strong"),$or=o("clip"),kor=o(" \u2014 "),lX=a("a"),Sor=o("TFCLIPModel"),Ror=o(" (CLIP model)"),Bor=l(),dF=a("li"),Mue=a("strong"),Por=o("convbert"),Ior=o(" \u2014 "),iX=a("a"),qor=o("TFConvBertModel"),Nor=o(" (ConvBERT model)"),jor=l(),cF=a("li"),Eue=a("strong"),Dor=o("convnext"),Gor=o(" \u2014 "),dX=a("a"),Oor=o("TFConvNextModel"),Vor=o(" (ConvNext model)"),Xor=l(),fF=a("li"),Cue=a("strong"),zor=o("ctrl"),Qor=o(" \u2014 "),cX=a("a"),Wor=o("TFCTRLModel"),Hor=o(" (CTRL model)"),Uor=l(),mF=a("li"),wue=a("strong"),Jor=o("deberta"),Yor=o(" \u2014 "),fX=a("a"),Kor=o("TFDebertaModel"),Zor=o(" (DeBERTa model)"),err=l(),gF=a("li"),Aue=a("strong"),orr=o("deberta-v2"),rrr=o(" \u2014 "),mX=a("a"),trr=o("TFDebertaV2Model"),arr=o(" (DeBERTa-v2 model)"),nrr=l(),hF=a("li"),yue=a("strong"),srr=o("distilbert"),lrr=o(" \u2014 "),gX=a("a"),irr=o("TFDistilBertModel"),drr=o(" (DistilBERT model)"),crr=l(),pF=a("li"),Lue=a("strong"),frr=o("dpr"),mrr=o(" \u2014 "),hX=a("a"),grr=o("TFDPRQuestionEncoder"),hrr=o(" (DPR model)"),prr=l(),uF=a("li"),xue=a("strong"),urr=o("electra"),_rr=o(" \u2014 "),pX=a("a"),brr=o("TFElectraModel"),vrr=o(" (ELECTRA model)"),Frr=l(),_F=a("li"),$ue=a("strong"),Trr=o("flaubert"),Mrr=o(" \u2014 "),uX=a("a"),Err=o("TFFlaubertModel"),Crr=o(" (FlauBERT model)"),wrr=l(),$s=a("li"),kue=a("strong"),Arr=o("funnel"),yrr=o(" \u2014 "),_X=a("a"),Lrr=o("TFFunnelModel"),xrr=o(" or "),bX=a("a"),$rr=o("TFFunnelBaseModel"),krr=o(" (Funnel Transformer model)"),Srr=l(),bF=a("li"),Sue=a("strong"),Rrr=o("gpt2"),Brr=o(" \u2014 "),vX=a("a"),Prr=o("TFGPT2Model"),Irr=o(" (OpenAI GPT-2 model)"),qrr=l(),vF=a("li"),Rue=a("strong"),Nrr=o("gptj"),jrr=o(" \u2014 "),FX=a("a"),Drr=o("TFGPTJModel"),Grr=o(" (GPT-J model)"),Orr=l(),FF=a("li"),Bue=a("strong"),Vrr=o("hubert"),Xrr=o(" \u2014 "),TX=a("a"),zrr=o("TFHubertModel"),Qrr=o(" (Hubert model)"),Wrr=l(),TF=a("li"),Pue=a("strong"),Hrr=o("layoutlm"),Urr=o(" \u2014 "),MX=a("a"),Jrr=o("TFLayoutLMModel"),Yrr=o(" (LayoutLM model)"),Krr=l(),MF=a("li"),Iue=a("strong"),Zrr=o("led"),etr=o(" \u2014 "),EX=a("a"),otr=o("TFLEDModel"),rtr=o(" (LED model)"),ttr=l(),EF=a("li"),que=a("strong"),atr=o("longformer"),ntr=o(" \u2014 "),CX=a("a"),str=o("TFLongformerModel"),ltr=o(" (Longformer model)"),itr=l(),CF=a("li"),Nue=a("strong"),dtr=o("lxmert"),ctr=o(" \u2014 "),wX=a("a"),ftr=o("TFLxmertModel"),mtr=o(" (LXMERT model)"),gtr=l(),wF=a("li"),jue=a("strong"),htr=o("marian"),ptr=o(" \u2014 "),AX=a("a"),utr=o("TFMarianModel"),_tr=o(" (Marian model)"),btr=l(),AF=a("li"),Due=a("strong"),vtr=o("mbart"),Ftr=o(" \u2014 "),yX=a("a"),Ttr=o("TFMBartModel"),Mtr=o(" (mBART model)"),Etr=l(),yF=a("li"),Gue=a("strong"),Ctr=o("mobilebert"),wtr=o(" \u2014 "),LX=a("a"),Atr=o("TFMobileBertModel"),ytr=o(" (MobileBERT model)"),Ltr=l(),LF=a("li"),Oue=a("strong"),xtr=o("mpnet"),$tr=o(" \u2014 "),xX=a("a"),ktr=o("TFMPNetModel"),Str=o(" (MPNet model)"),Rtr=l(),xF=a("li"),Vue=a("strong"),Btr=o("mt5"),Ptr=o(" \u2014 "),$X=a("a"),Itr=o("TFMT5Model"),qtr=o(" (mT5 model)"),Ntr=l(),$F=a("li"),Xue=a("strong"),jtr=o("openai-gpt"),Dtr=o(" \u2014 "),kX=a("a"),Gtr=o("TFOpenAIGPTModel"),Otr=o(" (OpenAI GPT model)"),Vtr=l(),kF=a("li"),zue=a("strong"),Xtr=o("pegasus"),ztr=o(" \u2014 "),SX=a("a"),Qtr=o("TFPegasusModel"),Wtr=o(" (Pegasus model)"),Htr=l(),SF=a("li"),Que=a("strong"),Utr=o("rembert"),Jtr=o(" \u2014 "),RX=a("a"),Ytr=o("TFRemBertModel"),Ktr=o(" (RemBERT model)"),Ztr=l(),RF=a("li"),Wue=a("strong"),ear=o("roberta"),oar=o(" \u2014 "),BX=a("a"),rar=o("TFRobertaModel"),tar=o(" (RoBERTa model)"),aar=l(),BF=a("li"),Hue=a("strong"),nar=o("roformer"),sar=o(" \u2014 "),PX=a("a"),lar=o("TFRoFormerModel"),iar=o(" (RoFormer model)"),dar=l(),PF=a("li"),Uue=a("strong"),car=o("speech_to_text"),far=o(" \u2014 "),IX=a("a"),mar=o("TFSpeech2TextModel"),gar=o(" (Speech2Text model)"),har=l(),IF=a("li"),Jue=a("strong"),par=o("t5"),uar=o(" \u2014 "),qX=a("a"),_ar=o("TFT5Model"),bar=o(" (T5 model)"),Far=l(),qF=a("li"),Yue=a("strong"),Tar=o("tapas"),Mar=o(" \u2014 "),NX=a("a"),Ear=o("TFTapasModel"),Car=o(" (TAPAS model)"),war=l(),NF=a("li"),Kue=a("strong"),Aar=o("transfo-xl"),yar=o(" \u2014 "),jX=a("a"),Lar=o("TFTransfoXLModel"),xar=o(" (Transformer-XL model)"),$ar=l(),jF=a("li"),Zue=a("strong"),kar=o("vit"),Sar=o(" \u2014 "),DX=a("a"),Rar=o("TFViTModel"),Bar=o(" (ViT model)"),Par=l(),DF=a("li"),e_e=a("strong"),Iar=o("vit_mae"),qar=o(" \u2014 "),GX=a("a"),Nar=o("TFViTMAEModel"),jar=o(" (ViTMAE model)"),Dar=l(),GF=a("li"),o_e=a("strong"),Gar=o("wav2vec2"),Oar=o(" \u2014 "),OX=a("a"),Var=o("TFWav2Vec2Model"),Xar=o(" (Wav2Vec2 model)"),zar=l(),OF=a("li"),r_e=a("strong"),Qar=o("xlm"),War=o(" \u2014 "),VX=a("a"),Har=o("TFXLMModel"),Uar=o(" (XLM model)"),Jar=l(),VF=a("li"),t_e=a("strong"),Yar=o("xlm-roberta"),Kar=o(" \u2014 "),XX=a("a"),Zar=o("TFXLMRobertaModel"),enr=o(" (XLM-RoBERTa model)"),onr=l(),XF=a("li"),a_e=a("strong"),rnr=o("xlnet"),tnr=o(" \u2014 "),zX=a("a"),anr=o("TFXLNetModel"),nnr=o(" (XLNet model)"),snr=l(),F(zF.$$.fragment),OBe=l(),Bd=a("h2"),QF=a("a"),n_e=a("span"),F(eL.$$.fragment),lnr=l(),s_e=a("span"),inr=o("TFAutoModelForPreTraining"),VBe=l(),Yo=a("div"),F(oL.$$.fragment),dnr=l(),Pd=a("p"),cnr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),QX=a("a"),fnr=o("from_pretrained()"),mnr=o(" class method or the "),WX=a("a"),gnr=o("from_config()"),hnr=o(` class
method.`),pnr=l(),rL=a("p"),unr=o("This class cannot be instantiated directly using "),l_e=a("code"),_nr=o("__init__()"),bnr=o(" (throws an error)."),vnr=l(),Ct=a("div"),F(tL.$$.fragment),Fnr=l(),i_e=a("p"),Tnr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Mnr=l(),Id=a("p"),Enr=o(`Note:
Loading a model from its configuration file does `),d_e=a("strong"),Cnr=o("not"),wnr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),HX=a("a"),Anr=o("from_pretrained()"),ynr=o(" to load the model weights."),Lnr=l(),F(WF.$$.fragment),xnr=l(),Cr=a("div"),F(aL.$$.fragment),$nr=l(),c_e=a("p"),knr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Snr=l(),Ja=a("p"),Rnr=o("The model class to instantiate is selected based on the "),f_e=a("code"),Bnr=o("model_type"),Pnr=o(` property of the config object (either
passed as an argument or loaded from `),m_e=a("code"),Inr=o("pretrained_model_name_or_path"),qnr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),g_e=a("code"),Nnr=o("pretrained_model_name_or_path"),jnr=o(":"),Dnr=l(),ne=a("ul"),HF=a("li"),h_e=a("strong"),Gnr=o("albert"),Onr=o(" \u2014 "),UX=a("a"),Vnr=o("TFAlbertForPreTraining"),Xnr=o(" (ALBERT model)"),znr=l(),UF=a("li"),p_e=a("strong"),Qnr=o("bart"),Wnr=o(" \u2014 "),JX=a("a"),Hnr=o("TFBartForConditionalGeneration"),Unr=o(" (BART model)"),Jnr=l(),JF=a("li"),u_e=a("strong"),Ynr=o("bert"),Knr=o(" \u2014 "),YX=a("a"),Znr=o("TFBertForPreTraining"),esr=o(" (BERT model)"),osr=l(),YF=a("li"),__e=a("strong"),rsr=o("camembert"),tsr=o(" \u2014 "),KX=a("a"),asr=o("TFCamembertForMaskedLM"),nsr=o(" (CamemBERT model)"),ssr=l(),KF=a("li"),b_e=a("strong"),lsr=o("ctrl"),isr=o(" \u2014 "),ZX=a("a"),dsr=o("TFCTRLLMHeadModel"),csr=o(" (CTRL model)"),fsr=l(),ZF=a("li"),v_e=a("strong"),msr=o("distilbert"),gsr=o(" \u2014 "),ez=a("a"),hsr=o("TFDistilBertForMaskedLM"),psr=o(" (DistilBERT model)"),usr=l(),e6=a("li"),F_e=a("strong"),_sr=o("electra"),bsr=o(" \u2014 "),oz=a("a"),vsr=o("TFElectraForPreTraining"),Fsr=o(" (ELECTRA model)"),Tsr=l(),o6=a("li"),T_e=a("strong"),Msr=o("flaubert"),Esr=o(" \u2014 "),rz=a("a"),Csr=o("TFFlaubertWithLMHeadModel"),wsr=o(" (FlauBERT model)"),Asr=l(),r6=a("li"),M_e=a("strong"),ysr=o("funnel"),Lsr=o(" \u2014 "),tz=a("a"),xsr=o("TFFunnelForPreTraining"),$sr=o(" (Funnel Transformer model)"),ksr=l(),t6=a("li"),E_e=a("strong"),Ssr=o("gpt2"),Rsr=o(" \u2014 "),az=a("a"),Bsr=o("TFGPT2LMHeadModel"),Psr=o(" (OpenAI GPT-2 model)"),Isr=l(),a6=a("li"),C_e=a("strong"),qsr=o("layoutlm"),Nsr=o(" \u2014 "),nz=a("a"),jsr=o("TFLayoutLMForMaskedLM"),Dsr=o(" (LayoutLM model)"),Gsr=l(),n6=a("li"),w_e=a("strong"),Osr=o("lxmert"),Vsr=o(" \u2014 "),sz=a("a"),Xsr=o("TFLxmertForPreTraining"),zsr=o(" (LXMERT model)"),Qsr=l(),s6=a("li"),A_e=a("strong"),Wsr=o("mobilebert"),Hsr=o(" \u2014 "),lz=a("a"),Usr=o("TFMobileBertForPreTraining"),Jsr=o(" (MobileBERT model)"),Ysr=l(),l6=a("li"),y_e=a("strong"),Ksr=o("mpnet"),Zsr=o(" \u2014 "),iz=a("a"),elr=o("TFMPNetForMaskedLM"),olr=o(" (MPNet model)"),rlr=l(),i6=a("li"),L_e=a("strong"),tlr=o("openai-gpt"),alr=o(" \u2014 "),dz=a("a"),nlr=o("TFOpenAIGPTLMHeadModel"),slr=o(" (OpenAI GPT model)"),llr=l(),d6=a("li"),x_e=a("strong"),ilr=o("roberta"),dlr=o(" \u2014 "),cz=a("a"),clr=o("TFRobertaForMaskedLM"),flr=o(" (RoBERTa model)"),mlr=l(),c6=a("li"),$_e=a("strong"),glr=o("t5"),hlr=o(" \u2014 "),fz=a("a"),plr=o("TFT5ForConditionalGeneration"),ulr=o(" (T5 model)"),_lr=l(),f6=a("li"),k_e=a("strong"),blr=o("tapas"),vlr=o(" \u2014 "),mz=a("a"),Flr=o("TFTapasForMaskedLM"),Tlr=o(" (TAPAS model)"),Mlr=l(),m6=a("li"),S_e=a("strong"),Elr=o("transfo-xl"),Clr=o(" \u2014 "),gz=a("a"),wlr=o("TFTransfoXLLMHeadModel"),Alr=o(" (Transformer-XL model)"),ylr=l(),g6=a("li"),R_e=a("strong"),Llr=o("vit_mae"),xlr=o(" \u2014 "),hz=a("a"),$lr=o("TFViTMAEForPreTraining"),klr=o(" (ViTMAE model)"),Slr=l(),h6=a("li"),B_e=a("strong"),Rlr=o("xlm"),Blr=o(" \u2014 "),pz=a("a"),Plr=o("TFXLMWithLMHeadModel"),Ilr=o(" (XLM model)"),qlr=l(),p6=a("li"),P_e=a("strong"),Nlr=o("xlm-roberta"),jlr=o(" \u2014 "),uz=a("a"),Dlr=o("TFXLMRobertaForMaskedLM"),Glr=o(" (XLM-RoBERTa model)"),Olr=l(),u6=a("li"),I_e=a("strong"),Vlr=o("xlnet"),Xlr=o(" \u2014 "),_z=a("a"),zlr=o("TFXLNetLMHeadModel"),Qlr=o(" (XLNet model)"),Wlr=l(),F(_6.$$.fragment),XBe=l(),qd=a("h2"),b6=a("a"),q_e=a("span"),F(nL.$$.fragment),Hlr=l(),N_e=a("span"),Ulr=o("TFAutoModelForCausalLM"),zBe=l(),Ko=a("div"),F(sL.$$.fragment),Jlr=l(),Nd=a("p"),Ylr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),bz=a("a"),Klr=o("from_pretrained()"),Zlr=o(" class method or the "),vz=a("a"),eir=o("from_config()"),oir=o(` class
method.`),rir=l(),lL=a("p"),tir=o("This class cannot be instantiated directly using "),j_e=a("code"),air=o("__init__()"),nir=o(" (throws an error)."),sir=l(),wt=a("div"),F(iL.$$.fragment),lir=l(),D_e=a("p"),iir=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),dir=l(),jd=a("p"),cir=o(`Note:
Loading a model from its configuration file does `),G_e=a("strong"),fir=o("not"),mir=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Fz=a("a"),gir=o("from_pretrained()"),hir=o(" to load the model weights."),pir=l(),F(v6.$$.fragment),uir=l(),wr=a("div"),F(dL.$$.fragment),_ir=l(),O_e=a("p"),bir=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),vir=l(),Ya=a("p"),Fir=o("The model class to instantiate is selected based on the "),V_e=a("code"),Tir=o("model_type"),Mir=o(` property of the config object (either
passed as an argument or loaded from `),X_e=a("code"),Eir=o("pretrained_model_name_or_path"),Cir=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),z_e=a("code"),wir=o("pretrained_model_name_or_path"),Air=o(":"),yir=l(),Te=a("ul"),F6=a("li"),Q_e=a("strong"),Lir=o("bert"),xir=o(" \u2014 "),Tz=a("a"),$ir=o("TFBertLMHeadModel"),kir=o(" (BERT model)"),Sir=l(),T6=a("li"),W_e=a("strong"),Rir=o("camembert"),Bir=o(" \u2014 "),Mz=a("a"),Pir=o("TFCamembertForCausalLM"),Iir=o(" (CamemBERT model)"),qir=l(),M6=a("li"),H_e=a("strong"),Nir=o("ctrl"),jir=o(" \u2014 "),Ez=a("a"),Dir=o("TFCTRLLMHeadModel"),Gir=o(" (CTRL model)"),Oir=l(),E6=a("li"),U_e=a("strong"),Vir=o("gpt2"),Xir=o(" \u2014 "),Cz=a("a"),zir=o("TFGPT2LMHeadModel"),Qir=o(" (OpenAI GPT-2 model)"),Wir=l(),C6=a("li"),J_e=a("strong"),Hir=o("gptj"),Uir=o(" \u2014 "),wz=a("a"),Jir=o("TFGPTJForCausalLM"),Yir=o(" (GPT-J model)"),Kir=l(),w6=a("li"),Y_e=a("strong"),Zir=o("openai-gpt"),edr=o(" \u2014 "),Az=a("a"),odr=o("TFOpenAIGPTLMHeadModel"),rdr=o(" (OpenAI GPT model)"),tdr=l(),A6=a("li"),K_e=a("strong"),adr=o("rembert"),ndr=o(" \u2014 "),yz=a("a"),sdr=o("TFRemBertForCausalLM"),ldr=o(" (RemBERT model)"),idr=l(),y6=a("li"),Z_e=a("strong"),ddr=o("roberta"),cdr=o(" \u2014 "),Lz=a("a"),fdr=o("TFRobertaForCausalLM"),mdr=o(" (RoBERTa model)"),gdr=l(),L6=a("li"),e1e=a("strong"),hdr=o("roformer"),pdr=o(" \u2014 "),xz=a("a"),udr=o("TFRoFormerForCausalLM"),_dr=o(" (RoFormer model)"),bdr=l(),x6=a("li"),o1e=a("strong"),vdr=o("transfo-xl"),Fdr=o(" \u2014 "),$z=a("a"),Tdr=o("TFTransfoXLLMHeadModel"),Mdr=o(" (Transformer-XL model)"),Edr=l(),$6=a("li"),r1e=a("strong"),Cdr=o("xlm"),wdr=o(" \u2014 "),kz=a("a"),Adr=o("TFXLMWithLMHeadModel"),ydr=o(" (XLM model)"),Ldr=l(),k6=a("li"),t1e=a("strong"),xdr=o("xlnet"),$dr=o(" \u2014 "),Sz=a("a"),kdr=o("TFXLNetLMHeadModel"),Sdr=o(" (XLNet model)"),Rdr=l(),F(S6.$$.fragment),QBe=l(),Dd=a("h2"),R6=a("a"),a1e=a("span"),F(cL.$$.fragment),Bdr=l(),n1e=a("span"),Pdr=o("TFAutoModelForImageClassification"),WBe=l(),Zo=a("div"),F(fL.$$.fragment),Idr=l(),Gd=a("p"),qdr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Rz=a("a"),Ndr=o("from_pretrained()"),jdr=o(" class method or the "),Bz=a("a"),Ddr=o("from_config()"),Gdr=o(` class
method.`),Odr=l(),mL=a("p"),Vdr=o("This class cannot be instantiated directly using "),s1e=a("code"),Xdr=o("__init__()"),zdr=o(" (throws an error)."),Qdr=l(),At=a("div"),F(gL.$$.fragment),Wdr=l(),l1e=a("p"),Hdr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Udr=l(),Od=a("p"),Jdr=o(`Note:
Loading a model from its configuration file does `),i1e=a("strong"),Ydr=o("not"),Kdr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Pz=a("a"),Zdr=o("from_pretrained()"),ecr=o(" to load the model weights."),ocr=l(),F(B6.$$.fragment),rcr=l(),Ar=a("div"),F(hL.$$.fragment),tcr=l(),d1e=a("p"),acr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),ncr=l(),Ka=a("p"),scr=o("The model class to instantiate is selected based on the "),c1e=a("code"),lcr=o("model_type"),icr=o(` property of the config object (either
passed as an argument or loaded from `),f1e=a("code"),dcr=o("pretrained_model_name_or_path"),ccr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),m1e=a("code"),fcr=o("pretrained_model_name_or_path"),mcr=o(":"),gcr=l(),pL=a("ul"),P6=a("li"),g1e=a("strong"),hcr=o("convnext"),pcr=o(" \u2014 "),Iz=a("a"),ucr=o("TFConvNextForImageClassification"),_cr=o(" (ConvNext model)"),bcr=l(),I6=a("li"),h1e=a("strong"),vcr=o("vit"),Fcr=o(" \u2014 "),qz=a("a"),Tcr=o("TFViTForImageClassification"),Mcr=o(" (ViT model)"),Ecr=l(),F(q6.$$.fragment),HBe=l(),Vd=a("h2"),N6=a("a"),p1e=a("span"),F(uL.$$.fragment),Ccr=l(),u1e=a("span"),wcr=o("TFAutoModelForMaskedLM"),UBe=l(),er=a("div"),F(_L.$$.fragment),Acr=l(),Xd=a("p"),ycr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Nz=a("a"),Lcr=o("from_pretrained()"),xcr=o(" class method or the "),jz=a("a"),$cr=o("from_config()"),kcr=o(` class
method.`),Scr=l(),bL=a("p"),Rcr=o("This class cannot be instantiated directly using "),_1e=a("code"),Bcr=o("__init__()"),Pcr=o(" (throws an error)."),Icr=l(),yt=a("div"),F(vL.$$.fragment),qcr=l(),b1e=a("p"),Ncr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),jcr=l(),zd=a("p"),Dcr=o(`Note:
Loading a model from its configuration file does `),v1e=a("strong"),Gcr=o("not"),Ocr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Dz=a("a"),Vcr=o("from_pretrained()"),Xcr=o(" to load the model weights."),zcr=l(),F(j6.$$.fragment),Qcr=l(),yr=a("div"),F(FL.$$.fragment),Wcr=l(),F1e=a("p"),Hcr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Ucr=l(),Za=a("p"),Jcr=o("The model class to instantiate is selected based on the "),T1e=a("code"),Ycr=o("model_type"),Kcr=o(` property of the config object (either
passed as an argument or loaded from `),M1e=a("code"),Zcr=o("pretrained_model_name_or_path"),efr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),E1e=a("code"),ofr=o("pretrained_model_name_or_path"),rfr=o(":"),tfr=l(),ie=a("ul"),D6=a("li"),C1e=a("strong"),afr=o("albert"),nfr=o(" \u2014 "),Gz=a("a"),sfr=o("TFAlbertForMaskedLM"),lfr=o(" (ALBERT model)"),ifr=l(),G6=a("li"),w1e=a("strong"),dfr=o("bert"),cfr=o(" \u2014 "),Oz=a("a"),ffr=o("TFBertForMaskedLM"),mfr=o(" (BERT model)"),gfr=l(),O6=a("li"),A1e=a("strong"),hfr=o("camembert"),pfr=o(" \u2014 "),Vz=a("a"),ufr=o("TFCamembertForMaskedLM"),_fr=o(" (CamemBERT model)"),bfr=l(),V6=a("li"),y1e=a("strong"),vfr=o("convbert"),Ffr=o(" \u2014 "),Xz=a("a"),Tfr=o("TFConvBertForMaskedLM"),Mfr=o(" (ConvBERT model)"),Efr=l(),X6=a("li"),L1e=a("strong"),Cfr=o("deberta"),wfr=o(" \u2014 "),zz=a("a"),Afr=o("TFDebertaForMaskedLM"),yfr=o(" (DeBERTa model)"),Lfr=l(),z6=a("li"),x1e=a("strong"),xfr=o("deberta-v2"),$fr=o(" \u2014 "),Qz=a("a"),kfr=o("TFDebertaV2ForMaskedLM"),Sfr=o(" (DeBERTa-v2 model)"),Rfr=l(),Q6=a("li"),$1e=a("strong"),Bfr=o("distilbert"),Pfr=o(" \u2014 "),Wz=a("a"),Ifr=o("TFDistilBertForMaskedLM"),qfr=o(" (DistilBERT model)"),Nfr=l(),W6=a("li"),k1e=a("strong"),jfr=o("electra"),Dfr=o(" \u2014 "),Hz=a("a"),Gfr=o("TFElectraForMaskedLM"),Ofr=o(" (ELECTRA model)"),Vfr=l(),H6=a("li"),S1e=a("strong"),Xfr=o("flaubert"),zfr=o(" \u2014 "),Uz=a("a"),Qfr=o("TFFlaubertWithLMHeadModel"),Wfr=o(" (FlauBERT model)"),Hfr=l(),U6=a("li"),R1e=a("strong"),Ufr=o("funnel"),Jfr=o(" \u2014 "),Jz=a("a"),Yfr=o("TFFunnelForMaskedLM"),Kfr=o(" (Funnel Transformer model)"),Zfr=l(),J6=a("li"),B1e=a("strong"),emr=o("layoutlm"),omr=o(" \u2014 "),Yz=a("a"),rmr=o("TFLayoutLMForMaskedLM"),tmr=o(" (LayoutLM model)"),amr=l(),Y6=a("li"),P1e=a("strong"),nmr=o("longformer"),smr=o(" \u2014 "),Kz=a("a"),lmr=o("TFLongformerForMaskedLM"),imr=o(" (Longformer model)"),dmr=l(),K6=a("li"),I1e=a("strong"),cmr=o("mobilebert"),fmr=o(" \u2014 "),Zz=a("a"),mmr=o("TFMobileBertForMaskedLM"),gmr=o(" (MobileBERT model)"),hmr=l(),Z6=a("li"),q1e=a("strong"),pmr=o("mpnet"),umr=o(" \u2014 "),eQ=a("a"),_mr=o("TFMPNetForMaskedLM"),bmr=o(" (MPNet model)"),vmr=l(),eT=a("li"),N1e=a("strong"),Fmr=o("rembert"),Tmr=o(" \u2014 "),oQ=a("a"),Mmr=o("TFRemBertForMaskedLM"),Emr=o(" (RemBERT model)"),Cmr=l(),oT=a("li"),j1e=a("strong"),wmr=o("roberta"),Amr=o(" \u2014 "),rQ=a("a"),ymr=o("TFRobertaForMaskedLM"),Lmr=o(" (RoBERTa model)"),xmr=l(),rT=a("li"),D1e=a("strong"),$mr=o("roformer"),kmr=o(" \u2014 "),tQ=a("a"),Smr=o("TFRoFormerForMaskedLM"),Rmr=o(" (RoFormer model)"),Bmr=l(),tT=a("li"),G1e=a("strong"),Pmr=o("tapas"),Imr=o(" \u2014 "),aQ=a("a"),qmr=o("TFTapasForMaskedLM"),Nmr=o(" (TAPAS model)"),jmr=l(),aT=a("li"),O1e=a("strong"),Dmr=o("xlm"),Gmr=o(" \u2014 "),nQ=a("a"),Omr=o("TFXLMWithLMHeadModel"),Vmr=o(" (XLM model)"),Xmr=l(),nT=a("li"),V1e=a("strong"),zmr=o("xlm-roberta"),Qmr=o(" \u2014 "),sQ=a("a"),Wmr=o("TFXLMRobertaForMaskedLM"),Hmr=o(" (XLM-RoBERTa model)"),Umr=l(),F(sT.$$.fragment),JBe=l(),Qd=a("h2"),lT=a("a"),X1e=a("span"),F(TL.$$.fragment),Jmr=l(),z1e=a("span"),Ymr=o("TFAutoModelForSeq2SeqLM"),YBe=l(),or=a("div"),F(ML.$$.fragment),Kmr=l(),Wd=a("p"),Zmr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),lQ=a("a"),egr=o("from_pretrained()"),ogr=o(" class method or the "),iQ=a("a"),rgr=o("from_config()"),tgr=o(` class
method.`),agr=l(),EL=a("p"),ngr=o("This class cannot be instantiated directly using "),Q1e=a("code"),sgr=o("__init__()"),lgr=o(" (throws an error)."),igr=l(),Lt=a("div"),F(CL.$$.fragment),dgr=l(),W1e=a("p"),cgr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),fgr=l(),Hd=a("p"),mgr=o(`Note:
Loading a model from its configuration file does `),H1e=a("strong"),ggr=o("not"),hgr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dQ=a("a"),pgr=o("from_pretrained()"),ugr=o(" to load the model weights."),_gr=l(),F(iT.$$.fragment),bgr=l(),Lr=a("div"),F(wL.$$.fragment),vgr=l(),U1e=a("p"),Fgr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Tgr=l(),en=a("p"),Mgr=o("The model class to instantiate is selected based on the "),J1e=a("code"),Egr=o("model_type"),Cgr=o(` property of the config object (either
passed as an argument or loaded from `),Y1e=a("code"),wgr=o("pretrained_model_name_or_path"),Agr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),K1e=a("code"),ygr=o("pretrained_model_name_or_path"),Lgr=o(":"),xgr=l(),ye=a("ul"),dT=a("li"),Z1e=a("strong"),$gr=o("bart"),kgr=o(" \u2014 "),cQ=a("a"),Sgr=o("TFBartForConditionalGeneration"),Rgr=o(" (BART model)"),Bgr=l(),cT=a("li"),e9e=a("strong"),Pgr=o("blenderbot"),Igr=o(" \u2014 "),fQ=a("a"),qgr=o("TFBlenderbotForConditionalGeneration"),Ngr=o(" (Blenderbot model)"),jgr=l(),fT=a("li"),o9e=a("strong"),Dgr=o("blenderbot-small"),Ggr=o(" \u2014 "),mQ=a("a"),Ogr=o("TFBlenderbotSmallForConditionalGeneration"),Vgr=o(" (BlenderbotSmall model)"),Xgr=l(),mT=a("li"),r9e=a("strong"),zgr=o("encoder-decoder"),Qgr=o(" \u2014 "),gQ=a("a"),Wgr=o("TFEncoderDecoderModel"),Hgr=o(" (Encoder decoder model)"),Ugr=l(),gT=a("li"),t9e=a("strong"),Jgr=o("led"),Ygr=o(" \u2014 "),hQ=a("a"),Kgr=o("TFLEDForConditionalGeneration"),Zgr=o(" (LED model)"),ehr=l(),hT=a("li"),a9e=a("strong"),ohr=o("marian"),rhr=o(" \u2014 "),pQ=a("a"),thr=o("TFMarianMTModel"),ahr=o(" (Marian model)"),nhr=l(),pT=a("li"),n9e=a("strong"),shr=o("mbart"),lhr=o(" \u2014 "),uQ=a("a"),ihr=o("TFMBartForConditionalGeneration"),dhr=o(" (mBART model)"),chr=l(),uT=a("li"),s9e=a("strong"),fhr=o("mt5"),mhr=o(" \u2014 "),_Q=a("a"),ghr=o("TFMT5ForConditionalGeneration"),hhr=o(" (mT5 model)"),phr=l(),_T=a("li"),l9e=a("strong"),uhr=o("pegasus"),_hr=o(" \u2014 "),bQ=a("a"),bhr=o("TFPegasusForConditionalGeneration"),vhr=o(" (Pegasus model)"),Fhr=l(),bT=a("li"),i9e=a("strong"),Thr=o("t5"),Mhr=o(" \u2014 "),vQ=a("a"),Ehr=o("TFT5ForConditionalGeneration"),Chr=o(" (T5 model)"),whr=l(),F(vT.$$.fragment),KBe=l(),Ud=a("h2"),FT=a("a"),d9e=a("span"),F(AL.$$.fragment),Ahr=l(),c9e=a("span"),yhr=o("TFAutoModelForSequenceClassification"),ZBe=l(),rr=a("div"),F(yL.$$.fragment),Lhr=l(),Jd=a("p"),xhr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),FQ=a("a"),$hr=o("from_pretrained()"),khr=o(" class method or the "),TQ=a("a"),Shr=o("from_config()"),Rhr=o(` class
method.`),Bhr=l(),LL=a("p"),Phr=o("This class cannot be instantiated directly using "),f9e=a("code"),Ihr=o("__init__()"),qhr=o(" (throws an error)."),Nhr=l(),xt=a("div"),F(xL.$$.fragment),jhr=l(),m9e=a("p"),Dhr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Ghr=l(),Yd=a("p"),Ohr=o(`Note:
Loading a model from its configuration file does `),g9e=a("strong"),Vhr=o("not"),Xhr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),MQ=a("a"),zhr=o("from_pretrained()"),Qhr=o(" to load the model weights."),Whr=l(),F(TT.$$.fragment),Hhr=l(),xr=a("div"),F($L.$$.fragment),Uhr=l(),h9e=a("p"),Jhr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Yhr=l(),on=a("p"),Khr=o("The model class to instantiate is selected based on the "),p9e=a("code"),Zhr=o("model_type"),epr=o(` property of the config object (either
passed as an argument or loaded from `),u9e=a("code"),opr=o("pretrained_model_name_or_path"),rpr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_9e=a("code"),tpr=o("pretrained_model_name_or_path"),apr=o(":"),npr=l(),Z=a("ul"),MT=a("li"),b9e=a("strong"),spr=o("albert"),lpr=o(" \u2014 "),EQ=a("a"),ipr=o("TFAlbertForSequenceClassification"),dpr=o(" (ALBERT model)"),cpr=l(),ET=a("li"),v9e=a("strong"),fpr=o("bert"),mpr=o(" \u2014 "),CQ=a("a"),gpr=o("TFBertForSequenceClassification"),hpr=o(" (BERT model)"),ppr=l(),CT=a("li"),F9e=a("strong"),upr=o("camembert"),_pr=o(" \u2014 "),wQ=a("a"),bpr=o("TFCamembertForSequenceClassification"),vpr=o(" (CamemBERT model)"),Fpr=l(),wT=a("li"),T9e=a("strong"),Tpr=o("convbert"),Mpr=o(" \u2014 "),AQ=a("a"),Epr=o("TFConvBertForSequenceClassification"),Cpr=o(" (ConvBERT model)"),wpr=l(),AT=a("li"),M9e=a("strong"),Apr=o("ctrl"),ypr=o(" \u2014 "),yQ=a("a"),Lpr=o("TFCTRLForSequenceClassification"),xpr=o(" (CTRL model)"),$pr=l(),yT=a("li"),E9e=a("strong"),kpr=o("deberta"),Spr=o(" \u2014 "),LQ=a("a"),Rpr=o("TFDebertaForSequenceClassification"),Bpr=o(" (DeBERTa model)"),Ppr=l(),LT=a("li"),C9e=a("strong"),Ipr=o("deberta-v2"),qpr=o(" \u2014 "),xQ=a("a"),Npr=o("TFDebertaV2ForSequenceClassification"),jpr=o(" (DeBERTa-v2 model)"),Dpr=l(),xT=a("li"),w9e=a("strong"),Gpr=o("distilbert"),Opr=o(" \u2014 "),$Q=a("a"),Vpr=o("TFDistilBertForSequenceClassification"),Xpr=o(" (DistilBERT model)"),zpr=l(),$T=a("li"),A9e=a("strong"),Qpr=o("electra"),Wpr=o(" \u2014 "),kQ=a("a"),Hpr=o("TFElectraForSequenceClassification"),Upr=o(" (ELECTRA model)"),Jpr=l(),kT=a("li"),y9e=a("strong"),Ypr=o("flaubert"),Kpr=o(" \u2014 "),SQ=a("a"),Zpr=o("TFFlaubertForSequenceClassification"),eur=o(" (FlauBERT model)"),our=l(),ST=a("li"),L9e=a("strong"),rur=o("funnel"),tur=o(" \u2014 "),RQ=a("a"),aur=o("TFFunnelForSequenceClassification"),nur=o(" (Funnel Transformer model)"),sur=l(),RT=a("li"),x9e=a("strong"),lur=o("gpt2"),iur=o(" \u2014 "),BQ=a("a"),dur=o("TFGPT2ForSequenceClassification"),cur=o(" (OpenAI GPT-2 model)"),fur=l(),BT=a("li"),$9e=a("strong"),mur=o("gptj"),gur=o(" \u2014 "),PQ=a("a"),hur=o("TFGPTJForSequenceClassification"),pur=o(" (GPT-J model)"),uur=l(),PT=a("li"),k9e=a("strong"),_ur=o("layoutlm"),bur=o(" \u2014 "),IQ=a("a"),vur=o("TFLayoutLMForSequenceClassification"),Fur=o(" (LayoutLM model)"),Tur=l(),IT=a("li"),S9e=a("strong"),Mur=o("longformer"),Eur=o(" \u2014 "),qQ=a("a"),Cur=o("TFLongformerForSequenceClassification"),wur=o(" (Longformer model)"),Aur=l(),qT=a("li"),R9e=a("strong"),yur=o("mobilebert"),Lur=o(" \u2014 "),NQ=a("a"),xur=o("TFMobileBertForSequenceClassification"),$ur=o(" (MobileBERT model)"),kur=l(),NT=a("li"),B9e=a("strong"),Sur=o("mpnet"),Rur=o(" \u2014 "),jQ=a("a"),Bur=o("TFMPNetForSequenceClassification"),Pur=o(" (MPNet model)"),Iur=l(),jT=a("li"),P9e=a("strong"),qur=o("openai-gpt"),Nur=o(" \u2014 "),DQ=a("a"),jur=o("TFOpenAIGPTForSequenceClassification"),Dur=o(" (OpenAI GPT model)"),Gur=l(),DT=a("li"),I9e=a("strong"),Our=o("rembert"),Vur=o(" \u2014 "),GQ=a("a"),Xur=o("TFRemBertForSequenceClassification"),zur=o(" (RemBERT model)"),Qur=l(),GT=a("li"),q9e=a("strong"),Wur=o("roberta"),Hur=o(" \u2014 "),OQ=a("a"),Uur=o("TFRobertaForSequenceClassification"),Jur=o(" (RoBERTa model)"),Yur=l(),OT=a("li"),N9e=a("strong"),Kur=o("roformer"),Zur=o(" \u2014 "),VQ=a("a"),e_r=o("TFRoFormerForSequenceClassification"),o_r=o(" (RoFormer model)"),r_r=l(),VT=a("li"),j9e=a("strong"),t_r=o("tapas"),a_r=o(" \u2014 "),XQ=a("a"),n_r=o("TFTapasForSequenceClassification"),s_r=o(" (TAPAS model)"),l_r=l(),XT=a("li"),D9e=a("strong"),i_r=o("transfo-xl"),d_r=o(" \u2014 "),zQ=a("a"),c_r=o("TFTransfoXLForSequenceClassification"),f_r=o(" (Transformer-XL model)"),m_r=l(),zT=a("li"),G9e=a("strong"),g_r=o("xlm"),h_r=o(" \u2014 "),QQ=a("a"),p_r=o("TFXLMForSequenceClassification"),u_r=o(" (XLM model)"),__r=l(),QT=a("li"),O9e=a("strong"),b_r=o("xlm-roberta"),v_r=o(" \u2014 "),WQ=a("a"),F_r=o("TFXLMRobertaForSequenceClassification"),T_r=o(" (XLM-RoBERTa model)"),M_r=l(),WT=a("li"),V9e=a("strong"),E_r=o("xlnet"),C_r=o(" \u2014 "),HQ=a("a"),w_r=o("TFXLNetForSequenceClassification"),A_r=o(" (XLNet model)"),y_r=l(),F(HT.$$.fragment),ePe=l(),Kd=a("h2"),UT=a("a"),X9e=a("span"),F(kL.$$.fragment),L_r=l(),z9e=a("span"),x_r=o("TFAutoModelForMultipleChoice"),oPe=l(),tr=a("div"),F(SL.$$.fragment),$_r=l(),Zd=a("p"),k_r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),UQ=a("a"),S_r=o("from_pretrained()"),R_r=o(" class method or the "),JQ=a("a"),B_r=o("from_config()"),P_r=o(` class
method.`),I_r=l(),RL=a("p"),q_r=o("This class cannot be instantiated directly using "),Q9e=a("code"),N_r=o("__init__()"),j_r=o(" (throws an error)."),D_r=l(),$t=a("div"),F(BL.$$.fragment),G_r=l(),W9e=a("p"),O_r=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),V_r=l(),ec=a("p"),X_r=o(`Note:
Loading a model from its configuration file does `),H9e=a("strong"),z_r=o("not"),Q_r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),YQ=a("a"),W_r=o("from_pretrained()"),H_r=o(" to load the model weights."),U_r=l(),F(JT.$$.fragment),J_r=l(),$r=a("div"),F(PL.$$.fragment),Y_r=l(),U9e=a("p"),K_r=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Z_r=l(),rn=a("p"),e1r=o("The model class to instantiate is selected based on the "),J9e=a("code"),o1r=o("model_type"),r1r=o(` property of the config object (either
passed as an argument or loaded from `),Y9e=a("code"),t1r=o("pretrained_model_name_or_path"),a1r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),K9e=a("code"),n1r=o("pretrained_model_name_or_path"),s1r=o(":"),l1r=l(),pe=a("ul"),YT=a("li"),Z9e=a("strong"),i1r=o("albert"),d1r=o(" \u2014 "),KQ=a("a"),c1r=o("TFAlbertForMultipleChoice"),f1r=o(" (ALBERT model)"),m1r=l(),KT=a("li"),ebe=a("strong"),g1r=o("bert"),h1r=o(" \u2014 "),ZQ=a("a"),p1r=o("TFBertForMultipleChoice"),u1r=o(" (BERT model)"),_1r=l(),ZT=a("li"),obe=a("strong"),b1r=o("camembert"),v1r=o(" \u2014 "),eW=a("a"),F1r=o("TFCamembertForMultipleChoice"),T1r=o(" (CamemBERT model)"),M1r=l(),eM=a("li"),rbe=a("strong"),E1r=o("convbert"),C1r=o(" \u2014 "),oW=a("a"),w1r=o("TFConvBertForMultipleChoice"),A1r=o(" (ConvBERT model)"),y1r=l(),oM=a("li"),tbe=a("strong"),L1r=o("distilbert"),x1r=o(" \u2014 "),rW=a("a"),$1r=o("TFDistilBertForMultipleChoice"),k1r=o(" (DistilBERT model)"),S1r=l(),rM=a("li"),abe=a("strong"),R1r=o("electra"),B1r=o(" \u2014 "),tW=a("a"),P1r=o("TFElectraForMultipleChoice"),I1r=o(" (ELECTRA model)"),q1r=l(),tM=a("li"),nbe=a("strong"),N1r=o("flaubert"),j1r=o(" \u2014 "),aW=a("a"),D1r=o("TFFlaubertForMultipleChoice"),G1r=o(" (FlauBERT model)"),O1r=l(),aM=a("li"),sbe=a("strong"),V1r=o("funnel"),X1r=o(" \u2014 "),nW=a("a"),z1r=o("TFFunnelForMultipleChoice"),Q1r=o(" (Funnel Transformer model)"),W1r=l(),nM=a("li"),lbe=a("strong"),H1r=o("longformer"),U1r=o(" \u2014 "),sW=a("a"),J1r=o("TFLongformerForMultipleChoice"),Y1r=o(" (Longformer model)"),K1r=l(),sM=a("li"),ibe=a("strong"),Z1r=o("mobilebert"),e9r=o(" \u2014 "),lW=a("a"),o9r=o("TFMobileBertForMultipleChoice"),r9r=o(" (MobileBERT model)"),t9r=l(),lM=a("li"),dbe=a("strong"),a9r=o("mpnet"),n9r=o(" \u2014 "),iW=a("a"),s9r=o("TFMPNetForMultipleChoice"),l9r=o(" (MPNet model)"),i9r=l(),iM=a("li"),cbe=a("strong"),d9r=o("rembert"),c9r=o(" \u2014 "),dW=a("a"),f9r=o("TFRemBertForMultipleChoice"),m9r=o(" (RemBERT model)"),g9r=l(),dM=a("li"),fbe=a("strong"),h9r=o("roberta"),p9r=o(" \u2014 "),cW=a("a"),u9r=o("TFRobertaForMultipleChoice"),_9r=o(" (RoBERTa model)"),b9r=l(),cM=a("li"),mbe=a("strong"),v9r=o("roformer"),F9r=o(" \u2014 "),fW=a("a"),T9r=o("TFRoFormerForMultipleChoice"),M9r=o(" (RoFormer model)"),E9r=l(),fM=a("li"),gbe=a("strong"),C9r=o("xlm"),w9r=o(" \u2014 "),mW=a("a"),A9r=o("TFXLMForMultipleChoice"),y9r=o(" (XLM model)"),L9r=l(),mM=a("li"),hbe=a("strong"),x9r=o("xlm-roberta"),$9r=o(" \u2014 "),gW=a("a"),k9r=o("TFXLMRobertaForMultipleChoice"),S9r=o(" (XLM-RoBERTa model)"),R9r=l(),gM=a("li"),pbe=a("strong"),B9r=o("xlnet"),P9r=o(" \u2014 "),hW=a("a"),I9r=o("TFXLNetForMultipleChoice"),q9r=o(" (XLNet model)"),N9r=l(),F(hM.$$.fragment),rPe=l(),oc=a("h2"),pM=a("a"),ube=a("span"),F(IL.$$.fragment),j9r=l(),_be=a("span"),D9r=o("TFAutoModelForTableQuestionAnswering"),tPe=l(),ar=a("div"),F(qL.$$.fragment),G9r=l(),rc=a("p"),O9r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),pW=a("a"),V9r=o("from_pretrained()"),X9r=o(" class method or the "),uW=a("a"),z9r=o("from_config()"),Q9r=o(` class
method.`),W9r=l(),NL=a("p"),H9r=o("This class cannot be instantiated directly using "),bbe=a("code"),U9r=o("__init__()"),J9r=o(" (throws an error)."),Y9r=l(),kt=a("div"),F(jL.$$.fragment),K9r=l(),vbe=a("p"),Z9r=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),ebr=l(),tc=a("p"),obr=o(`Note:
Loading a model from its configuration file does `),Fbe=a("strong"),rbr=o("not"),tbr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_W=a("a"),abr=o("from_pretrained()"),nbr=o(" to load the model weights."),sbr=l(),F(uM.$$.fragment),lbr=l(),kr=a("div"),F(DL.$$.fragment),ibr=l(),Tbe=a("p"),dbr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),cbr=l(),tn=a("p"),fbr=o("The model class to instantiate is selected based on the "),Mbe=a("code"),mbr=o("model_type"),gbr=o(` property of the config object (either
passed as an argument or loaded from `),Ebe=a("code"),hbr=o("pretrained_model_name_or_path"),pbr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cbe=a("code"),ubr=o("pretrained_model_name_or_path"),_br=o(":"),bbr=l(),wbe=a("ul"),_M=a("li"),Abe=a("strong"),vbr=o("tapas"),Fbr=o(" \u2014 "),bW=a("a"),Tbr=o("TFTapasForQuestionAnswering"),Mbr=o(" (TAPAS model)"),Ebr=l(),F(bM.$$.fragment),aPe=l(),ac=a("h2"),vM=a("a"),ybe=a("span"),F(GL.$$.fragment),Cbr=l(),Lbe=a("span"),wbr=o("TFAutoModelForTokenClassification"),nPe=l(),nr=a("div"),F(OL.$$.fragment),Abr=l(),nc=a("p"),ybr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),vW=a("a"),Lbr=o("from_pretrained()"),xbr=o(" class method or the "),FW=a("a"),$br=o("from_config()"),kbr=o(` class
method.`),Sbr=l(),VL=a("p"),Rbr=o("This class cannot be instantiated directly using "),xbe=a("code"),Bbr=o("__init__()"),Pbr=o(" (throws an error)."),Ibr=l(),St=a("div"),F(XL.$$.fragment),qbr=l(),$be=a("p"),Nbr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),jbr=l(),sc=a("p"),Dbr=o(`Note:
Loading a model from its configuration file does `),kbe=a("strong"),Gbr=o("not"),Obr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),TW=a("a"),Vbr=o("from_pretrained()"),Xbr=o(" to load the model weights."),zbr=l(),F(FM.$$.fragment),Qbr=l(),Sr=a("div"),F(zL.$$.fragment),Wbr=l(),Sbe=a("p"),Hbr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Ubr=l(),an=a("p"),Jbr=o("The model class to instantiate is selected based on the "),Rbe=a("code"),Ybr=o("model_type"),Kbr=o(` property of the config object (either
passed as an argument or loaded from `),Bbe=a("code"),Zbr=o("pretrained_model_name_or_path"),e2r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Pbe=a("code"),o2r=o("pretrained_model_name_or_path"),r2r=o(":"),t2r=l(),de=a("ul"),TM=a("li"),Ibe=a("strong"),a2r=o("albert"),n2r=o(" \u2014 "),MW=a("a"),s2r=o("TFAlbertForTokenClassification"),l2r=o(" (ALBERT model)"),i2r=l(),MM=a("li"),qbe=a("strong"),d2r=o("bert"),c2r=o(" \u2014 "),EW=a("a"),f2r=o("TFBertForTokenClassification"),m2r=o(" (BERT model)"),g2r=l(),EM=a("li"),Nbe=a("strong"),h2r=o("camembert"),p2r=o(" \u2014 "),CW=a("a"),u2r=o("TFCamembertForTokenClassification"),_2r=o(" (CamemBERT model)"),b2r=l(),CM=a("li"),jbe=a("strong"),v2r=o("convbert"),F2r=o(" \u2014 "),wW=a("a"),T2r=o("TFConvBertForTokenClassification"),M2r=o(" (ConvBERT model)"),E2r=l(),wM=a("li"),Dbe=a("strong"),C2r=o("deberta"),w2r=o(" \u2014 "),AW=a("a"),A2r=o("TFDebertaForTokenClassification"),y2r=o(" (DeBERTa model)"),L2r=l(),AM=a("li"),Gbe=a("strong"),x2r=o("deberta-v2"),$2r=o(" \u2014 "),yW=a("a"),k2r=o("TFDebertaV2ForTokenClassification"),S2r=o(" (DeBERTa-v2 model)"),R2r=l(),yM=a("li"),Obe=a("strong"),B2r=o("distilbert"),P2r=o(" \u2014 "),LW=a("a"),I2r=o("TFDistilBertForTokenClassification"),q2r=o(" (DistilBERT model)"),N2r=l(),LM=a("li"),Vbe=a("strong"),j2r=o("electra"),D2r=o(" \u2014 "),xW=a("a"),G2r=o("TFElectraForTokenClassification"),O2r=o(" (ELECTRA model)"),V2r=l(),xM=a("li"),Xbe=a("strong"),X2r=o("flaubert"),z2r=o(" \u2014 "),$W=a("a"),Q2r=o("TFFlaubertForTokenClassification"),W2r=o(" (FlauBERT model)"),H2r=l(),$M=a("li"),zbe=a("strong"),U2r=o("funnel"),J2r=o(" \u2014 "),kW=a("a"),Y2r=o("TFFunnelForTokenClassification"),K2r=o(" (Funnel Transformer model)"),Z2r=l(),kM=a("li"),Qbe=a("strong"),e5r=o("layoutlm"),o5r=o(" \u2014 "),SW=a("a"),r5r=o("TFLayoutLMForTokenClassification"),t5r=o(" (LayoutLM model)"),a5r=l(),SM=a("li"),Wbe=a("strong"),n5r=o("longformer"),s5r=o(" \u2014 "),RW=a("a"),l5r=o("TFLongformerForTokenClassification"),i5r=o(" (Longformer model)"),d5r=l(),RM=a("li"),Hbe=a("strong"),c5r=o("mobilebert"),f5r=o(" \u2014 "),BW=a("a"),m5r=o("TFMobileBertForTokenClassification"),g5r=o(" (MobileBERT model)"),h5r=l(),BM=a("li"),Ube=a("strong"),p5r=o("mpnet"),u5r=o(" \u2014 "),PW=a("a"),_5r=o("TFMPNetForTokenClassification"),b5r=o(" (MPNet model)"),v5r=l(),PM=a("li"),Jbe=a("strong"),F5r=o("rembert"),T5r=o(" \u2014 "),IW=a("a"),M5r=o("TFRemBertForTokenClassification"),E5r=o(" (RemBERT model)"),C5r=l(),IM=a("li"),Ybe=a("strong"),w5r=o("roberta"),A5r=o(" \u2014 "),qW=a("a"),y5r=o("TFRobertaForTokenClassification"),L5r=o(" (RoBERTa model)"),x5r=l(),qM=a("li"),Kbe=a("strong"),$5r=o("roformer"),k5r=o(" \u2014 "),NW=a("a"),S5r=o("TFRoFormerForTokenClassification"),R5r=o(" (RoFormer model)"),B5r=l(),NM=a("li"),Zbe=a("strong"),P5r=o("xlm"),I5r=o(" \u2014 "),jW=a("a"),q5r=o("TFXLMForTokenClassification"),N5r=o(" (XLM model)"),j5r=l(),jM=a("li"),e2e=a("strong"),D5r=o("xlm-roberta"),G5r=o(" \u2014 "),DW=a("a"),O5r=o("TFXLMRobertaForTokenClassification"),V5r=o(" (XLM-RoBERTa model)"),X5r=l(),DM=a("li"),o2e=a("strong"),z5r=o("xlnet"),Q5r=o(" \u2014 "),GW=a("a"),W5r=o("TFXLNetForTokenClassification"),H5r=o(" (XLNet model)"),U5r=l(),F(GM.$$.fragment),sPe=l(),lc=a("h2"),OM=a("a"),r2e=a("span"),F(QL.$$.fragment),J5r=l(),t2e=a("span"),Y5r=o("TFAutoModelForQuestionAnswering"),lPe=l(),sr=a("div"),F(WL.$$.fragment),K5r=l(),ic=a("p"),Z5r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),OW=a("a"),evr=o("from_pretrained()"),ovr=o(" class method or the "),VW=a("a"),rvr=o("from_config()"),tvr=o(` class
method.`),avr=l(),HL=a("p"),nvr=o("This class cannot be instantiated directly using "),a2e=a("code"),svr=o("__init__()"),lvr=o(" (throws an error)."),ivr=l(),Rt=a("div"),F(UL.$$.fragment),dvr=l(),n2e=a("p"),cvr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),fvr=l(),dc=a("p"),mvr=o(`Note:
Loading a model from its configuration file does `),s2e=a("strong"),gvr=o("not"),hvr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),XW=a("a"),pvr=o("from_pretrained()"),uvr=o(" to load the model weights."),_vr=l(),F(VM.$$.fragment),bvr=l(),Rr=a("div"),F(JL.$$.fragment),vvr=l(),l2e=a("p"),Fvr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Tvr=l(),nn=a("p"),Mvr=o("The model class to instantiate is selected based on the "),i2e=a("code"),Evr=o("model_type"),Cvr=o(` property of the config object (either
passed as an argument or loaded from `),d2e=a("code"),wvr=o("pretrained_model_name_or_path"),Avr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),c2e=a("code"),yvr=o("pretrained_model_name_or_path"),Lvr=o(":"),xvr=l(),ce=a("ul"),XM=a("li"),f2e=a("strong"),$vr=o("albert"),kvr=o(" \u2014 "),zW=a("a"),Svr=o("TFAlbertForQuestionAnswering"),Rvr=o(" (ALBERT model)"),Bvr=l(),zM=a("li"),m2e=a("strong"),Pvr=o("bert"),Ivr=o(" \u2014 "),QW=a("a"),qvr=o("TFBertForQuestionAnswering"),Nvr=o(" (BERT model)"),jvr=l(),QM=a("li"),g2e=a("strong"),Dvr=o("camembert"),Gvr=o(" \u2014 "),WW=a("a"),Ovr=o("TFCamembertForQuestionAnswering"),Vvr=o(" (CamemBERT model)"),Xvr=l(),WM=a("li"),h2e=a("strong"),zvr=o("convbert"),Qvr=o(" \u2014 "),HW=a("a"),Wvr=o("TFConvBertForQuestionAnswering"),Hvr=o(" (ConvBERT model)"),Uvr=l(),HM=a("li"),p2e=a("strong"),Jvr=o("deberta"),Yvr=o(" \u2014 "),UW=a("a"),Kvr=o("TFDebertaForQuestionAnswering"),Zvr=o(" (DeBERTa model)"),eFr=l(),UM=a("li"),u2e=a("strong"),oFr=o("deberta-v2"),rFr=o(" \u2014 "),JW=a("a"),tFr=o("TFDebertaV2ForQuestionAnswering"),aFr=o(" (DeBERTa-v2 model)"),nFr=l(),JM=a("li"),_2e=a("strong"),sFr=o("distilbert"),lFr=o(" \u2014 "),YW=a("a"),iFr=o("TFDistilBertForQuestionAnswering"),dFr=o(" (DistilBERT model)"),cFr=l(),YM=a("li"),b2e=a("strong"),fFr=o("electra"),mFr=o(" \u2014 "),KW=a("a"),gFr=o("TFElectraForQuestionAnswering"),hFr=o(" (ELECTRA model)"),pFr=l(),KM=a("li"),v2e=a("strong"),uFr=o("flaubert"),_Fr=o(" \u2014 "),ZW=a("a"),bFr=o("TFFlaubertForQuestionAnsweringSimple"),vFr=o(" (FlauBERT model)"),FFr=l(),ZM=a("li"),F2e=a("strong"),TFr=o("funnel"),MFr=o(" \u2014 "),eH=a("a"),EFr=o("TFFunnelForQuestionAnswering"),CFr=o(" (Funnel Transformer model)"),wFr=l(),e4=a("li"),T2e=a("strong"),AFr=o("gptj"),yFr=o(" \u2014 "),oH=a("a"),LFr=o("TFGPTJForQuestionAnswering"),xFr=o(" (GPT-J model)"),$Fr=l(),o4=a("li"),M2e=a("strong"),kFr=o("longformer"),SFr=o(" \u2014 "),rH=a("a"),RFr=o("TFLongformerForQuestionAnswering"),BFr=o(" (Longformer model)"),PFr=l(),r4=a("li"),E2e=a("strong"),IFr=o("mobilebert"),qFr=o(" \u2014 "),tH=a("a"),NFr=o("TFMobileBertForQuestionAnswering"),jFr=o(" (MobileBERT model)"),DFr=l(),t4=a("li"),C2e=a("strong"),GFr=o("mpnet"),OFr=o(" \u2014 "),aH=a("a"),VFr=o("TFMPNetForQuestionAnswering"),XFr=o(" (MPNet model)"),zFr=l(),a4=a("li"),w2e=a("strong"),QFr=o("rembert"),WFr=o(" \u2014 "),nH=a("a"),HFr=o("TFRemBertForQuestionAnswering"),UFr=o(" (RemBERT model)"),JFr=l(),n4=a("li"),A2e=a("strong"),YFr=o("roberta"),KFr=o(" \u2014 "),sH=a("a"),ZFr=o("TFRobertaForQuestionAnswering"),e6r=o(" (RoBERTa model)"),o6r=l(),s4=a("li"),y2e=a("strong"),r6r=o("roformer"),t6r=o(" \u2014 "),lH=a("a"),a6r=o("TFRoFormerForQuestionAnswering"),n6r=o(" (RoFormer model)"),s6r=l(),l4=a("li"),L2e=a("strong"),l6r=o("xlm"),i6r=o(" \u2014 "),iH=a("a"),d6r=o("TFXLMForQuestionAnsweringSimple"),c6r=o(" (XLM model)"),f6r=l(),i4=a("li"),x2e=a("strong"),m6r=o("xlm-roberta"),g6r=o(" \u2014 "),dH=a("a"),h6r=o("TFXLMRobertaForQuestionAnswering"),p6r=o(" (XLM-RoBERTa model)"),u6r=l(),d4=a("li"),$2e=a("strong"),_6r=o("xlnet"),b6r=o(" \u2014 "),cH=a("a"),v6r=o("TFXLNetForQuestionAnsweringSimple"),F6r=o(" (XLNet model)"),T6r=l(),F(c4.$$.fragment),iPe=l(),cc=a("h2"),f4=a("a"),k2e=a("span"),F(YL.$$.fragment),M6r=l(),S2e=a("span"),E6r=o("TFAutoModelForVision2Seq"),dPe=l(),lr=a("div"),F(KL.$$.fragment),C6r=l(),fc=a("p"),w6r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),fH=a("a"),A6r=o("from_pretrained()"),y6r=o(" class method or the "),mH=a("a"),L6r=o("from_config()"),x6r=o(` class
method.`),$6r=l(),ZL=a("p"),k6r=o("This class cannot be instantiated directly using "),R2e=a("code"),S6r=o("__init__()"),R6r=o(" (throws an error)."),B6r=l(),Bt=a("div"),F(e8.$$.fragment),P6r=l(),B2e=a("p"),I6r=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),q6r=l(),mc=a("p"),N6r=o(`Note:
Loading a model from its configuration file does `),P2e=a("strong"),j6r=o("not"),D6r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gH=a("a"),G6r=o("from_pretrained()"),O6r=o(" to load the model weights."),V6r=l(),F(m4.$$.fragment),X6r=l(),Br=a("div"),F(o8.$$.fragment),z6r=l(),I2e=a("p"),Q6r=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),W6r=l(),sn=a("p"),H6r=o("The model class to instantiate is selected based on the "),q2e=a("code"),U6r=o("model_type"),J6r=o(` property of the config object (either
passed as an argument or loaded from `),N2e=a("code"),Y6r=o("pretrained_model_name_or_path"),K6r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),j2e=a("code"),Z6r=o("pretrained_model_name_or_path"),eTr=o(":"),oTr=l(),D2e=a("ul"),g4=a("li"),G2e=a("strong"),rTr=o("vision-encoder-decoder"),tTr=o(" \u2014 "),hH=a("a"),aTr=o("TFVisionEncoderDecoderModel"),nTr=o(" (Vision Encoder decoder model)"),sTr=l(),F(h4.$$.fragment),cPe=l(),gc=a("h2"),p4=a("a"),O2e=a("span"),F(r8.$$.fragment),lTr=l(),V2e=a("span"),iTr=o("TFAutoModelForSpeechSeq2Seq"),fPe=l(),ir=a("div"),F(t8.$$.fragment),dTr=l(),hc=a("p"),cTr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),pH=a("a"),fTr=o("from_pretrained()"),mTr=o(" class method or the "),uH=a("a"),gTr=o("from_config()"),hTr=o(` class
method.`),pTr=l(),a8=a("p"),uTr=o("This class cannot be instantiated directly using "),X2e=a("code"),_Tr=o("__init__()"),bTr=o(" (throws an error)."),vTr=l(),Pt=a("div"),F(n8.$$.fragment),FTr=l(),z2e=a("p"),TTr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),MTr=l(),pc=a("p"),ETr=o(`Note:
Loading a model from its configuration file does `),Q2e=a("strong"),CTr=o("not"),wTr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_H=a("a"),ATr=o("from_pretrained()"),yTr=o(" to load the model weights."),LTr=l(),F(u4.$$.fragment),xTr=l(),Pr=a("div"),F(s8.$$.fragment),$Tr=l(),W2e=a("p"),kTr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),STr=l(),ln=a("p"),RTr=o("The model class to instantiate is selected based on the "),H2e=a("code"),BTr=o("model_type"),PTr=o(` property of the config object (either
passed as an argument or loaded from `),U2e=a("code"),ITr=o("pretrained_model_name_or_path"),qTr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),J2e=a("code"),NTr=o("pretrained_model_name_or_path"),jTr=o(":"),DTr=l(),Y2e=a("ul"),_4=a("li"),K2e=a("strong"),GTr=o("speech_to_text"),OTr=o(" \u2014 "),bH=a("a"),VTr=o("TFSpeech2TextForConditionalGeneration"),XTr=o(" (Speech2Text model)"),zTr=l(),F(b4.$$.fragment),mPe=l(),uc=a("h2"),v4=a("a"),Z2e=a("span"),F(l8.$$.fragment),QTr=l(),e5e=a("span"),WTr=o("FlaxAutoModel"),gPe=l(),dr=a("div"),F(i8.$$.fragment),HTr=l(),_c=a("p"),UTr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),vH=a("a"),JTr=o("from_pretrained()"),YTr=o(" class method or the "),FH=a("a"),KTr=o("from_config()"),ZTr=o(` class
method.`),eMr=l(),d8=a("p"),oMr=o("This class cannot be instantiated directly using "),o5e=a("code"),rMr=o("__init__()"),tMr=o(" (throws an error)."),aMr=l(),It=a("div"),F(c8.$$.fragment),nMr=l(),r5e=a("p"),sMr=o("Instantiates one of the base model classes of the library from a configuration."),lMr=l(),bc=a("p"),iMr=o(`Note:
Loading a model from its configuration file does `),t5e=a("strong"),dMr=o("not"),cMr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),TH=a("a"),fMr=o("from_pretrained()"),mMr=o(" to load the model weights."),gMr=l(),F(F4.$$.fragment),hMr=l(),Ir=a("div"),F(f8.$$.fragment),pMr=l(),a5e=a("p"),uMr=o("Instantiate one of the base model classes of the library from a pretrained model."),_Mr=l(),dn=a("p"),bMr=o("The model class to instantiate is selected based on the "),n5e=a("code"),vMr=o("model_type"),FMr=o(` property of the config object (either
passed as an argument or loaded from `),s5e=a("code"),TMr=o("pretrained_model_name_or_path"),MMr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),l5e=a("code"),EMr=o("pretrained_model_name_or_path"),CMr=o(":"),wMr=l(),oe=a("ul"),T4=a("li"),i5e=a("strong"),AMr=o("albert"),yMr=o(" \u2014 "),MH=a("a"),LMr=o("FlaxAlbertModel"),xMr=o(" (ALBERT model)"),$Mr=l(),M4=a("li"),d5e=a("strong"),kMr=o("bart"),SMr=o(" \u2014 "),EH=a("a"),RMr=o("FlaxBartModel"),BMr=o(" (BART model)"),PMr=l(),E4=a("li"),c5e=a("strong"),IMr=o("beit"),qMr=o(" \u2014 "),CH=a("a"),NMr=o("FlaxBeitModel"),jMr=o(" (BEiT model)"),DMr=l(),C4=a("li"),f5e=a("strong"),GMr=o("bert"),OMr=o(" \u2014 "),wH=a("a"),VMr=o("FlaxBertModel"),XMr=o(" (BERT model)"),zMr=l(),w4=a("li"),m5e=a("strong"),QMr=o("big_bird"),WMr=o(" \u2014 "),AH=a("a"),HMr=o("FlaxBigBirdModel"),UMr=o(" (BigBird model)"),JMr=l(),A4=a("li"),g5e=a("strong"),YMr=o("blenderbot"),KMr=o(" \u2014 "),yH=a("a"),ZMr=o("FlaxBlenderbotModel"),e4r=o(" (Blenderbot model)"),o4r=l(),y4=a("li"),h5e=a("strong"),r4r=o("blenderbot-small"),t4r=o(" \u2014 "),LH=a("a"),a4r=o("FlaxBlenderbotSmallModel"),n4r=o(" (BlenderbotSmall model)"),s4r=l(),L4=a("li"),p5e=a("strong"),l4r=o("clip"),i4r=o(" \u2014 "),xH=a("a"),d4r=o("FlaxCLIPModel"),c4r=o(" (CLIP model)"),f4r=l(),x4=a("li"),u5e=a("strong"),m4r=o("distilbert"),g4r=o(" \u2014 "),$H=a("a"),h4r=o("FlaxDistilBertModel"),p4r=o(" (DistilBERT model)"),u4r=l(),$4=a("li"),_5e=a("strong"),_4r=o("electra"),b4r=o(" \u2014 "),kH=a("a"),v4r=o("FlaxElectraModel"),F4r=o(" (ELECTRA model)"),T4r=l(),k4=a("li"),b5e=a("strong"),M4r=o("gpt2"),E4r=o(" \u2014 "),SH=a("a"),C4r=o("FlaxGPT2Model"),w4r=o(" (OpenAI GPT-2 model)"),A4r=l(),S4=a("li"),v5e=a("strong"),y4r=o("gpt_neo"),L4r=o(" \u2014 "),RH=a("a"),x4r=o("FlaxGPTNeoModel"),$4r=o(" (GPT Neo model)"),k4r=l(),R4=a("li"),F5e=a("strong"),S4r=o("gptj"),R4r=o(" \u2014 "),BH=a("a"),B4r=o("FlaxGPTJModel"),P4r=o(" (GPT-J model)"),I4r=l(),B4=a("li"),T5e=a("strong"),q4r=o("marian"),N4r=o(" \u2014 "),PH=a("a"),j4r=o("FlaxMarianModel"),D4r=o(" (Marian model)"),G4r=l(),P4=a("li"),M5e=a("strong"),O4r=o("mbart"),V4r=o(" \u2014 "),IH=a("a"),X4r=o("FlaxMBartModel"),z4r=o(" (mBART model)"),Q4r=l(),I4=a("li"),E5e=a("strong"),W4r=o("mt5"),H4r=o(" \u2014 "),qH=a("a"),U4r=o("FlaxMT5Model"),J4r=o(" (mT5 model)"),Y4r=l(),q4=a("li"),C5e=a("strong"),K4r=o("pegasus"),Z4r=o(" \u2014 "),NH=a("a"),eEr=o("FlaxPegasusModel"),oEr=o(" (Pegasus model)"),rEr=l(),N4=a("li"),w5e=a("strong"),tEr=o("roberta"),aEr=o(" \u2014 "),jH=a("a"),nEr=o("FlaxRobertaModel"),sEr=o(" (RoBERTa model)"),lEr=l(),j4=a("li"),A5e=a("strong"),iEr=o("roformer"),dEr=o(" \u2014 "),DH=a("a"),cEr=o("FlaxRoFormerModel"),fEr=o(" (RoFormer model)"),mEr=l(),D4=a("li"),y5e=a("strong"),gEr=o("t5"),hEr=o(" \u2014 "),GH=a("a"),pEr=o("FlaxT5Model"),uEr=o(" (T5 model)"),_Er=l(),G4=a("li"),L5e=a("strong"),bEr=o("vision-text-dual-encoder"),vEr=o(" \u2014 "),OH=a("a"),FEr=o("FlaxVisionTextDualEncoderModel"),TEr=o(" (VisionTextDualEncoder model)"),MEr=l(),O4=a("li"),x5e=a("strong"),EEr=o("vit"),CEr=o(" \u2014 "),VH=a("a"),wEr=o("FlaxViTModel"),AEr=o(" (ViT model)"),yEr=l(),V4=a("li"),$5e=a("strong"),LEr=o("wav2vec2"),xEr=o(" \u2014 "),XH=a("a"),$Er=o("FlaxWav2Vec2Model"),kEr=o(" (Wav2Vec2 model)"),SEr=l(),X4=a("li"),k5e=a("strong"),REr=o("xglm"),BEr=o(" \u2014 "),zH=a("a"),PEr=o("FlaxXGLMModel"),IEr=o(" (XGLM model)"),qEr=l(),z4=a("li"),S5e=a("strong"),NEr=o("xlm-roberta"),jEr=o(" \u2014 "),QH=a("a"),DEr=o("FlaxXLMRobertaModel"),GEr=o(" (XLM-RoBERTa model)"),OEr=l(),F(Q4.$$.fragment),hPe=l(),vc=a("h2"),W4=a("a"),R5e=a("span"),F(m8.$$.fragment),VEr=l(),B5e=a("span"),XEr=o("FlaxAutoModelForCausalLM"),pPe=l(),cr=a("div"),F(g8.$$.fragment),zEr=l(),Fc=a("p"),QEr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),WH=a("a"),WEr=o("from_pretrained()"),HEr=o(" class method or the "),HH=a("a"),UEr=o("from_config()"),JEr=o(` class
method.`),YEr=l(),h8=a("p"),KEr=o("This class cannot be instantiated directly using "),P5e=a("code"),ZEr=o("__init__()"),eCr=o(" (throws an error)."),oCr=l(),qt=a("div"),F(p8.$$.fragment),rCr=l(),I5e=a("p"),tCr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),aCr=l(),Tc=a("p"),nCr=o(`Note:
Loading a model from its configuration file does `),q5e=a("strong"),sCr=o("not"),lCr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),UH=a("a"),iCr=o("from_pretrained()"),dCr=o(" to load the model weights."),cCr=l(),F(H4.$$.fragment),fCr=l(),qr=a("div"),F(u8.$$.fragment),mCr=l(),N5e=a("p"),gCr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),hCr=l(),cn=a("p"),pCr=o("The model class to instantiate is selected based on the "),j5e=a("code"),uCr=o("model_type"),_Cr=o(` property of the config object (either
passed as an argument or loaded from `),D5e=a("code"),bCr=o("pretrained_model_name_or_path"),vCr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),G5e=a("code"),FCr=o("pretrained_model_name_or_path"),TCr=o(":"),MCr=l(),Oe=a("ul"),U4=a("li"),O5e=a("strong"),ECr=o("bart"),CCr=o(" \u2014 "),JH=a("a"),wCr=o("FlaxBartForCausalLM"),ACr=o(" (BART model)"),yCr=l(),J4=a("li"),V5e=a("strong"),LCr=o("bert"),xCr=o(" \u2014 "),X5e=a("code"),$Cr=o("FlaxBertForCausalLM"),kCr=o(" (BERT model)"),SCr=l(),Y4=a("li"),z5e=a("strong"),RCr=o("gpt2"),BCr=o(" \u2014 "),YH=a("a"),PCr=o("FlaxGPT2LMHeadModel"),ICr=o(" (OpenAI GPT-2 model)"),qCr=l(),K4=a("li"),Q5e=a("strong"),NCr=o("gpt_neo"),jCr=o(" \u2014 "),KH=a("a"),DCr=o("FlaxGPTNeoForCausalLM"),GCr=o(" (GPT Neo model)"),OCr=l(),Z4=a("li"),W5e=a("strong"),VCr=o("gptj"),XCr=o(" \u2014 "),ZH=a("a"),zCr=o("FlaxGPTJForCausalLM"),QCr=o(" (GPT-J model)"),WCr=l(),eE=a("li"),H5e=a("strong"),HCr=o("roberta"),UCr=o(" \u2014 "),U5e=a("code"),JCr=o("FlaxRobertaForCausalLM"),YCr=o(" (RoBERTa model)"),KCr=l(),oE=a("li"),J5e=a("strong"),ZCr=o("xglm"),e3r=o(" \u2014 "),eU=a("a"),o3r=o("FlaxXGLMForCausalLM"),r3r=o(" (XGLM model)"),t3r=l(),F(rE.$$.fragment),uPe=l(),Mc=a("h2"),tE=a("a"),Y5e=a("span"),F(_8.$$.fragment),a3r=l(),K5e=a("span"),n3r=o("FlaxAutoModelForPreTraining"),_Pe=l(),fr=a("div"),F(b8.$$.fragment),s3r=l(),Ec=a("p"),l3r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),oU=a("a"),i3r=o("from_pretrained()"),d3r=o(" class method or the "),rU=a("a"),c3r=o("from_config()"),f3r=o(` class
method.`),m3r=l(),v8=a("p"),g3r=o("This class cannot be instantiated directly using "),Z5e=a("code"),h3r=o("__init__()"),p3r=o(" (throws an error)."),u3r=l(),Nt=a("div"),F(F8.$$.fragment),_3r=l(),eve=a("p"),b3r=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),v3r=l(),Cc=a("p"),F3r=o(`Note:
Loading a model from its configuration file does `),ove=a("strong"),T3r=o("not"),M3r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tU=a("a"),E3r=o("from_pretrained()"),C3r=o(" to load the model weights."),w3r=l(),F(aE.$$.fragment),A3r=l(),Nr=a("div"),F(T8.$$.fragment),y3r=l(),rve=a("p"),L3r=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),x3r=l(),fn=a("p"),$3r=o("The model class to instantiate is selected based on the "),tve=a("code"),k3r=o("model_type"),S3r=o(` property of the config object (either
passed as an argument or loaded from `),ave=a("code"),R3r=o("pretrained_model_name_or_path"),B3r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nve=a("code"),P3r=o("pretrained_model_name_or_path"),I3r=o(":"),q3r=l(),Me=a("ul"),nE=a("li"),sve=a("strong"),N3r=o("albert"),j3r=o(" \u2014 "),aU=a("a"),D3r=o("FlaxAlbertForPreTraining"),G3r=o(" (ALBERT model)"),O3r=l(),sE=a("li"),lve=a("strong"),V3r=o("bart"),X3r=o(" \u2014 "),nU=a("a"),z3r=o("FlaxBartForConditionalGeneration"),Q3r=o(" (BART model)"),W3r=l(),lE=a("li"),ive=a("strong"),H3r=o("bert"),U3r=o(" \u2014 "),sU=a("a"),J3r=o("FlaxBertForPreTraining"),Y3r=o(" (BERT model)"),K3r=l(),iE=a("li"),dve=a("strong"),Z3r=o("big_bird"),ewr=o(" \u2014 "),lU=a("a"),owr=o("FlaxBigBirdForPreTraining"),rwr=o(" (BigBird model)"),twr=l(),dE=a("li"),cve=a("strong"),awr=o("electra"),nwr=o(" \u2014 "),iU=a("a"),swr=o("FlaxElectraForPreTraining"),lwr=o(" (ELECTRA model)"),iwr=l(),cE=a("li"),fve=a("strong"),dwr=o("mbart"),cwr=o(" \u2014 "),dU=a("a"),fwr=o("FlaxMBartForConditionalGeneration"),mwr=o(" (mBART model)"),gwr=l(),fE=a("li"),mve=a("strong"),hwr=o("mt5"),pwr=o(" \u2014 "),cU=a("a"),uwr=o("FlaxMT5ForConditionalGeneration"),_wr=o(" (mT5 model)"),bwr=l(),mE=a("li"),gve=a("strong"),vwr=o("roberta"),Fwr=o(" \u2014 "),fU=a("a"),Twr=o("FlaxRobertaForMaskedLM"),Mwr=o(" (RoBERTa model)"),Ewr=l(),gE=a("li"),hve=a("strong"),Cwr=o("roformer"),wwr=o(" \u2014 "),mU=a("a"),Awr=o("FlaxRoFormerForMaskedLM"),ywr=o(" (RoFormer model)"),Lwr=l(),hE=a("li"),pve=a("strong"),xwr=o("t5"),$wr=o(" \u2014 "),gU=a("a"),kwr=o("FlaxT5ForConditionalGeneration"),Swr=o(" (T5 model)"),Rwr=l(),pE=a("li"),uve=a("strong"),Bwr=o("wav2vec2"),Pwr=o(" \u2014 "),hU=a("a"),Iwr=o("FlaxWav2Vec2ForPreTraining"),qwr=o(" (Wav2Vec2 model)"),Nwr=l(),uE=a("li"),_ve=a("strong"),jwr=o("xlm-roberta"),Dwr=o(" \u2014 "),pU=a("a"),Gwr=o("FlaxXLMRobertaForMaskedLM"),Owr=o(" (XLM-RoBERTa model)"),Vwr=l(),F(_E.$$.fragment),bPe=l(),wc=a("h2"),bE=a("a"),bve=a("span"),F(M8.$$.fragment),Xwr=l(),vve=a("span"),zwr=o("FlaxAutoModelForMaskedLM"),vPe=l(),mr=a("div"),F(E8.$$.fragment),Qwr=l(),Ac=a("p"),Wwr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),uU=a("a"),Hwr=o("from_pretrained()"),Uwr=o(" class method or the "),_U=a("a"),Jwr=o("from_config()"),Ywr=o(` class
method.`),Kwr=l(),C8=a("p"),Zwr=o("This class cannot be instantiated directly using "),Fve=a("code"),eAr=o("__init__()"),oAr=o(" (throws an error)."),rAr=l(),jt=a("div"),F(w8.$$.fragment),tAr=l(),Tve=a("p"),aAr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),nAr=l(),yc=a("p"),sAr=o(`Note:
Loading a model from its configuration file does `),Mve=a("strong"),lAr=o("not"),iAr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bU=a("a"),dAr=o("from_pretrained()"),cAr=o(" to load the model weights."),fAr=l(),F(vE.$$.fragment),mAr=l(),jr=a("div"),F(A8.$$.fragment),gAr=l(),Eve=a("p"),hAr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),pAr=l(),mn=a("p"),uAr=o("The model class to instantiate is selected based on the "),Cve=a("code"),_Ar=o("model_type"),bAr=o(` property of the config object (either
passed as an argument or loaded from `),wve=a("code"),vAr=o("pretrained_model_name_or_path"),FAr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ave=a("code"),TAr=o("pretrained_model_name_or_path"),MAr=o(":"),EAr=l(),Le=a("ul"),FE=a("li"),yve=a("strong"),CAr=o("albert"),wAr=o(" \u2014 "),vU=a("a"),AAr=o("FlaxAlbertForMaskedLM"),yAr=o(" (ALBERT model)"),LAr=l(),TE=a("li"),Lve=a("strong"),xAr=o("bart"),$Ar=o(" \u2014 "),FU=a("a"),kAr=o("FlaxBartForConditionalGeneration"),SAr=o(" (BART model)"),RAr=l(),ME=a("li"),xve=a("strong"),BAr=o("bert"),PAr=o(" \u2014 "),TU=a("a"),IAr=o("FlaxBertForMaskedLM"),qAr=o(" (BERT model)"),NAr=l(),EE=a("li"),$ve=a("strong"),jAr=o("big_bird"),DAr=o(" \u2014 "),MU=a("a"),GAr=o("FlaxBigBirdForMaskedLM"),OAr=o(" (BigBird model)"),VAr=l(),CE=a("li"),kve=a("strong"),XAr=o("distilbert"),zAr=o(" \u2014 "),EU=a("a"),QAr=o("FlaxDistilBertForMaskedLM"),WAr=o(" (DistilBERT model)"),HAr=l(),wE=a("li"),Sve=a("strong"),UAr=o("electra"),JAr=o(" \u2014 "),CU=a("a"),YAr=o("FlaxElectraForMaskedLM"),KAr=o(" (ELECTRA model)"),ZAr=l(),AE=a("li"),Rve=a("strong"),e0r=o("mbart"),o0r=o(" \u2014 "),wU=a("a"),r0r=o("FlaxMBartForConditionalGeneration"),t0r=o(" (mBART model)"),a0r=l(),yE=a("li"),Bve=a("strong"),n0r=o("roberta"),s0r=o(" \u2014 "),AU=a("a"),l0r=o("FlaxRobertaForMaskedLM"),i0r=o(" (RoBERTa model)"),d0r=l(),LE=a("li"),Pve=a("strong"),c0r=o("roformer"),f0r=o(" \u2014 "),yU=a("a"),m0r=o("FlaxRoFormerForMaskedLM"),g0r=o(" (RoFormer model)"),h0r=l(),xE=a("li"),Ive=a("strong"),p0r=o("xlm-roberta"),u0r=o(" \u2014 "),LU=a("a"),_0r=o("FlaxXLMRobertaForMaskedLM"),b0r=o(" (XLM-RoBERTa model)"),v0r=l(),F($E.$$.fragment),FPe=l(),Lc=a("h2"),kE=a("a"),qve=a("span"),F(y8.$$.fragment),F0r=l(),Nve=a("span"),T0r=o("FlaxAutoModelForSeq2SeqLM"),TPe=l(),gr=a("div"),F(L8.$$.fragment),M0r=l(),xc=a("p"),E0r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),xU=a("a"),C0r=o("from_pretrained()"),w0r=o(" class method or the "),$U=a("a"),A0r=o("from_config()"),y0r=o(` class
method.`),L0r=l(),x8=a("p"),x0r=o("This class cannot be instantiated directly using "),jve=a("code"),$0r=o("__init__()"),k0r=o(" (throws an error)."),S0r=l(),Dt=a("div"),F($8.$$.fragment),R0r=l(),Dve=a("p"),B0r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),P0r=l(),$c=a("p"),I0r=o(`Note:
Loading a model from its configuration file does `),Gve=a("strong"),q0r=o("not"),N0r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),kU=a("a"),j0r=o("from_pretrained()"),D0r=o(" to load the model weights."),G0r=l(),F(SE.$$.fragment),O0r=l(),Dr=a("div"),F(k8.$$.fragment),V0r=l(),Ove=a("p"),X0r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),z0r=l(),gn=a("p"),Q0r=o("The model class to instantiate is selected based on the "),Vve=a("code"),W0r=o("model_type"),H0r=o(` property of the config object (either
passed as an argument or loaded from `),Xve=a("code"),U0r=o("pretrained_model_name_or_path"),J0r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zve=a("code"),Y0r=o("pretrained_model_name_or_path"),K0r=o(":"),Z0r=l(),ke=a("ul"),RE=a("li"),Qve=a("strong"),eyr=o("bart"),oyr=o(" \u2014 "),SU=a("a"),ryr=o("FlaxBartForConditionalGeneration"),tyr=o(" (BART model)"),ayr=l(),BE=a("li"),Wve=a("strong"),nyr=o("blenderbot"),syr=o(" \u2014 "),RU=a("a"),lyr=o("FlaxBlenderbotForConditionalGeneration"),iyr=o(" (Blenderbot model)"),dyr=l(),PE=a("li"),Hve=a("strong"),cyr=o("blenderbot-small"),fyr=o(" \u2014 "),BU=a("a"),myr=o("FlaxBlenderbotSmallForConditionalGeneration"),gyr=o(" (BlenderbotSmall model)"),hyr=l(),IE=a("li"),Uve=a("strong"),pyr=o("encoder-decoder"),uyr=o(" \u2014 "),PU=a("a"),_yr=o("FlaxEncoderDecoderModel"),byr=o(" (Encoder decoder model)"),vyr=l(),qE=a("li"),Jve=a("strong"),Fyr=o("marian"),Tyr=o(" \u2014 "),IU=a("a"),Myr=o("FlaxMarianMTModel"),Eyr=o(" (Marian model)"),Cyr=l(),NE=a("li"),Yve=a("strong"),wyr=o("mbart"),Ayr=o(" \u2014 "),qU=a("a"),yyr=o("FlaxMBartForConditionalGeneration"),Lyr=o(" (mBART model)"),xyr=l(),jE=a("li"),Kve=a("strong"),$yr=o("mt5"),kyr=o(" \u2014 "),NU=a("a"),Syr=o("FlaxMT5ForConditionalGeneration"),Ryr=o(" (mT5 model)"),Byr=l(),DE=a("li"),Zve=a("strong"),Pyr=o("pegasus"),Iyr=o(" \u2014 "),jU=a("a"),qyr=o("FlaxPegasusForConditionalGeneration"),Nyr=o(" (Pegasus model)"),jyr=l(),GE=a("li"),eFe=a("strong"),Dyr=o("t5"),Gyr=o(" \u2014 "),DU=a("a"),Oyr=o("FlaxT5ForConditionalGeneration"),Vyr=o(" (T5 model)"),Xyr=l(),F(OE.$$.fragment),MPe=l(),kc=a("h2"),VE=a("a"),oFe=a("span"),F(S8.$$.fragment),zyr=l(),rFe=a("span"),Qyr=o("FlaxAutoModelForSequenceClassification"),EPe=l(),hr=a("div"),F(R8.$$.fragment),Wyr=l(),Sc=a("p"),Hyr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),GU=a("a"),Uyr=o("from_pretrained()"),Jyr=o(" class method or the "),OU=a("a"),Yyr=o("from_config()"),Kyr=o(` class
method.`),Zyr=l(),B8=a("p"),eLr=o("This class cannot be instantiated directly using "),tFe=a("code"),oLr=o("__init__()"),rLr=o(" (throws an error)."),tLr=l(),Gt=a("div"),F(P8.$$.fragment),aLr=l(),aFe=a("p"),nLr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),sLr=l(),Rc=a("p"),lLr=o(`Note:
Loading a model from its configuration file does `),nFe=a("strong"),iLr=o("not"),dLr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),VU=a("a"),cLr=o("from_pretrained()"),fLr=o(" to load the model weights."),mLr=l(),F(XE.$$.fragment),gLr=l(),Gr=a("div"),F(I8.$$.fragment),hLr=l(),sFe=a("p"),pLr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),uLr=l(),hn=a("p"),_Lr=o("The model class to instantiate is selected based on the "),lFe=a("code"),bLr=o("model_type"),vLr=o(` property of the config object (either
passed as an argument or loaded from `),iFe=a("code"),FLr=o("pretrained_model_name_or_path"),TLr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dFe=a("code"),MLr=o("pretrained_model_name_or_path"),ELr=o(":"),CLr=l(),xe=a("ul"),zE=a("li"),cFe=a("strong"),wLr=o("albert"),ALr=o(" \u2014 "),XU=a("a"),yLr=o("FlaxAlbertForSequenceClassification"),LLr=o(" (ALBERT model)"),xLr=l(),QE=a("li"),fFe=a("strong"),$Lr=o("bart"),kLr=o(" \u2014 "),zU=a("a"),SLr=o("FlaxBartForSequenceClassification"),RLr=o(" (BART model)"),BLr=l(),WE=a("li"),mFe=a("strong"),PLr=o("bert"),ILr=o(" \u2014 "),QU=a("a"),qLr=o("FlaxBertForSequenceClassification"),NLr=o(" (BERT model)"),jLr=l(),HE=a("li"),gFe=a("strong"),DLr=o("big_bird"),GLr=o(" \u2014 "),WU=a("a"),OLr=o("FlaxBigBirdForSequenceClassification"),VLr=o(" (BigBird model)"),XLr=l(),UE=a("li"),hFe=a("strong"),zLr=o("distilbert"),QLr=o(" \u2014 "),HU=a("a"),WLr=o("FlaxDistilBertForSequenceClassification"),HLr=o(" (DistilBERT model)"),ULr=l(),JE=a("li"),pFe=a("strong"),JLr=o("electra"),YLr=o(" \u2014 "),UU=a("a"),KLr=o("FlaxElectraForSequenceClassification"),ZLr=o(" (ELECTRA model)"),e8r=l(),YE=a("li"),uFe=a("strong"),o8r=o("mbart"),r8r=o(" \u2014 "),JU=a("a"),t8r=o("FlaxMBartForSequenceClassification"),a8r=o(" (mBART model)"),n8r=l(),KE=a("li"),_Fe=a("strong"),s8r=o("roberta"),l8r=o(" \u2014 "),YU=a("a"),i8r=o("FlaxRobertaForSequenceClassification"),d8r=o(" (RoBERTa model)"),c8r=l(),ZE=a("li"),bFe=a("strong"),f8r=o("roformer"),m8r=o(" \u2014 "),KU=a("a"),g8r=o("FlaxRoFormerForSequenceClassification"),h8r=o(" (RoFormer model)"),p8r=l(),eC=a("li"),vFe=a("strong"),u8r=o("xlm-roberta"),_8r=o(" \u2014 "),ZU=a("a"),b8r=o("FlaxXLMRobertaForSequenceClassification"),v8r=o(" (XLM-RoBERTa model)"),F8r=l(),F(oC.$$.fragment),CPe=l(),Bc=a("h2"),rC=a("a"),FFe=a("span"),F(q8.$$.fragment),T8r=l(),TFe=a("span"),M8r=o("FlaxAutoModelForQuestionAnswering"),wPe=l(),pr=a("div"),F(N8.$$.fragment),E8r=l(),Pc=a("p"),C8r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),eJ=a("a"),w8r=o("from_pretrained()"),A8r=o(" class method or the "),oJ=a("a"),y8r=o("from_config()"),L8r=o(` class
method.`),x8r=l(),j8=a("p"),$8r=o("This class cannot be instantiated directly using "),MFe=a("code"),k8r=o("__init__()"),S8r=o(" (throws an error)."),R8r=l(),Ot=a("div"),F(D8.$$.fragment),B8r=l(),EFe=a("p"),P8r=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),I8r=l(),Ic=a("p"),q8r=o(`Note:
Loading a model from its configuration file does `),CFe=a("strong"),N8r=o("not"),j8r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rJ=a("a"),D8r=o("from_pretrained()"),G8r=o(" to load the model weights."),O8r=l(),F(tC.$$.fragment),V8r=l(),Or=a("div"),F(G8.$$.fragment),X8r=l(),wFe=a("p"),z8r=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Q8r=l(),pn=a("p"),W8r=o("The model class to instantiate is selected based on the "),AFe=a("code"),H8r=o("model_type"),U8r=o(` property of the config object (either
passed as an argument or loaded from `),yFe=a("code"),J8r=o("pretrained_model_name_or_path"),Y8r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),LFe=a("code"),K8r=o("pretrained_model_name_or_path"),Z8r=o(":"),e7r=l(),$e=a("ul"),aC=a("li"),xFe=a("strong"),o7r=o("albert"),r7r=o(" \u2014 "),tJ=a("a"),t7r=o("FlaxAlbertForQuestionAnswering"),a7r=o(" (ALBERT model)"),n7r=l(),nC=a("li"),$Fe=a("strong"),s7r=o("bart"),l7r=o(" \u2014 "),aJ=a("a"),i7r=o("FlaxBartForQuestionAnswering"),d7r=o(" (BART model)"),c7r=l(),sC=a("li"),kFe=a("strong"),f7r=o("bert"),m7r=o(" \u2014 "),nJ=a("a"),g7r=o("FlaxBertForQuestionAnswering"),h7r=o(" (BERT model)"),p7r=l(),lC=a("li"),SFe=a("strong"),u7r=o("big_bird"),_7r=o(" \u2014 "),sJ=a("a"),b7r=o("FlaxBigBirdForQuestionAnswering"),v7r=o(" (BigBird model)"),F7r=l(),iC=a("li"),RFe=a("strong"),T7r=o("distilbert"),M7r=o(" \u2014 "),lJ=a("a"),E7r=o("FlaxDistilBertForQuestionAnswering"),C7r=o(" (DistilBERT model)"),w7r=l(),dC=a("li"),BFe=a("strong"),A7r=o("electra"),y7r=o(" \u2014 "),iJ=a("a"),L7r=o("FlaxElectraForQuestionAnswering"),x7r=o(" (ELECTRA model)"),$7r=l(),cC=a("li"),PFe=a("strong"),k7r=o("mbart"),S7r=o(" \u2014 "),dJ=a("a"),R7r=o("FlaxMBartForQuestionAnswering"),B7r=o(" (mBART model)"),P7r=l(),fC=a("li"),IFe=a("strong"),I7r=o("roberta"),q7r=o(" \u2014 "),cJ=a("a"),N7r=o("FlaxRobertaForQuestionAnswering"),j7r=o(" (RoBERTa model)"),D7r=l(),mC=a("li"),qFe=a("strong"),G7r=o("roformer"),O7r=o(" \u2014 "),fJ=a("a"),V7r=o("FlaxRoFormerForQuestionAnswering"),X7r=o(" (RoFormer model)"),z7r=l(),gC=a("li"),NFe=a("strong"),Q7r=o("xlm-roberta"),W7r=o(" \u2014 "),mJ=a("a"),H7r=o("FlaxXLMRobertaForQuestionAnswering"),U7r=o(" (XLM-RoBERTa model)"),J7r=l(),F(hC.$$.fragment),APe=l(),qc=a("h2"),pC=a("a"),jFe=a("span"),F(O8.$$.fragment),Y7r=l(),DFe=a("span"),K7r=o("FlaxAutoModelForTokenClassification"),yPe=l(),ur=a("div"),F(V8.$$.fragment),Z7r=l(),Nc=a("p"),exr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),gJ=a("a"),oxr=o("from_pretrained()"),rxr=o(" class method or the "),hJ=a("a"),txr=o("from_config()"),axr=o(` class
method.`),nxr=l(),X8=a("p"),sxr=o("This class cannot be instantiated directly using "),GFe=a("code"),lxr=o("__init__()"),ixr=o(" (throws an error)."),dxr=l(),Vt=a("div"),F(z8.$$.fragment),cxr=l(),OFe=a("p"),fxr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),mxr=l(),jc=a("p"),gxr=o(`Note:
Loading a model from its configuration file does `),VFe=a("strong"),hxr=o("not"),pxr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pJ=a("a"),uxr=o("from_pretrained()"),_xr=o(" to load the model weights."),bxr=l(),F(uC.$$.fragment),vxr=l(),Vr=a("div"),F(Q8.$$.fragment),Fxr=l(),XFe=a("p"),Txr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Mxr=l(),un=a("p"),Exr=o("The model class to instantiate is selected based on the "),zFe=a("code"),Cxr=o("model_type"),wxr=o(` property of the config object (either
passed as an argument or loaded from `),QFe=a("code"),Axr=o("pretrained_model_name_or_path"),yxr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),WFe=a("code"),Lxr=o("pretrained_model_name_or_path"),xxr=o(":"),$xr=l(),je=a("ul"),_C=a("li"),HFe=a("strong"),kxr=o("albert"),Sxr=o(" \u2014 "),uJ=a("a"),Rxr=o("FlaxAlbertForTokenClassification"),Bxr=o(" (ALBERT model)"),Pxr=l(),bC=a("li"),UFe=a("strong"),Ixr=o("bert"),qxr=o(" \u2014 "),_J=a("a"),Nxr=o("FlaxBertForTokenClassification"),jxr=o(" (BERT model)"),Dxr=l(),vC=a("li"),JFe=a("strong"),Gxr=o("big_bird"),Oxr=o(" \u2014 "),bJ=a("a"),Vxr=o("FlaxBigBirdForTokenClassification"),Xxr=o(" (BigBird model)"),zxr=l(),FC=a("li"),YFe=a("strong"),Qxr=o("distilbert"),Wxr=o(" \u2014 "),vJ=a("a"),Hxr=o("FlaxDistilBertForTokenClassification"),Uxr=o(" (DistilBERT model)"),Jxr=l(),TC=a("li"),KFe=a("strong"),Yxr=o("electra"),Kxr=o(" \u2014 "),FJ=a("a"),Zxr=o("FlaxElectraForTokenClassification"),e$r=o(" (ELECTRA model)"),o$r=l(),MC=a("li"),ZFe=a("strong"),r$r=o("roberta"),t$r=o(" \u2014 "),TJ=a("a"),a$r=o("FlaxRobertaForTokenClassification"),n$r=o(" (RoBERTa model)"),s$r=l(),EC=a("li"),e6e=a("strong"),l$r=o("roformer"),i$r=o(" \u2014 "),MJ=a("a"),d$r=o("FlaxRoFormerForTokenClassification"),c$r=o(" (RoFormer model)"),f$r=l(),CC=a("li"),o6e=a("strong"),m$r=o("xlm-roberta"),g$r=o(" \u2014 "),EJ=a("a"),h$r=o("FlaxXLMRobertaForTokenClassification"),p$r=o(" (XLM-RoBERTa model)"),u$r=l(),F(wC.$$.fragment),LPe=l(),Dc=a("h2"),AC=a("a"),r6e=a("span"),F(W8.$$.fragment),_$r=l(),t6e=a("span"),b$r=o("FlaxAutoModelForMultipleChoice"),xPe=l(),_r=a("div"),F(H8.$$.fragment),v$r=l(),Gc=a("p"),F$r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),CJ=a("a"),T$r=o("from_pretrained()"),M$r=o(" class method or the "),wJ=a("a"),E$r=o("from_config()"),C$r=o(` class
method.`),w$r=l(),U8=a("p"),A$r=o("This class cannot be instantiated directly using "),a6e=a("code"),y$r=o("__init__()"),L$r=o(" (throws an error)."),x$r=l(),Xt=a("div"),F(J8.$$.fragment),$$r=l(),n6e=a("p"),k$r=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),S$r=l(),Oc=a("p"),R$r=o(`Note:
Loading a model from its configuration file does `),s6e=a("strong"),B$r=o("not"),P$r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),AJ=a("a"),I$r=o("from_pretrained()"),q$r=o(" to load the model weights."),N$r=l(),F(yC.$$.fragment),j$r=l(),Xr=a("div"),F(Y8.$$.fragment),D$r=l(),l6e=a("p"),G$r=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),O$r=l(),_n=a("p"),V$r=o("The model class to instantiate is selected based on the "),i6e=a("code"),X$r=o("model_type"),z$r=o(` property of the config object (either
passed as an argument or loaded from `),d6e=a("code"),Q$r=o("pretrained_model_name_or_path"),W$r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),c6e=a("code"),H$r=o("pretrained_model_name_or_path"),U$r=o(":"),J$r=l(),De=a("ul"),LC=a("li"),f6e=a("strong"),Y$r=o("albert"),K$r=o(" \u2014 "),yJ=a("a"),Z$r=o("FlaxAlbertForMultipleChoice"),ekr=o(" (ALBERT model)"),okr=l(),xC=a("li"),m6e=a("strong"),rkr=o("bert"),tkr=o(" \u2014 "),LJ=a("a"),akr=o("FlaxBertForMultipleChoice"),nkr=o(" (BERT model)"),skr=l(),$C=a("li"),g6e=a("strong"),lkr=o("big_bird"),ikr=o(" \u2014 "),xJ=a("a"),dkr=o("FlaxBigBirdForMultipleChoice"),ckr=o(" (BigBird model)"),fkr=l(),kC=a("li"),h6e=a("strong"),mkr=o("distilbert"),gkr=o(" \u2014 "),$J=a("a"),hkr=o("FlaxDistilBertForMultipleChoice"),pkr=o(" (DistilBERT model)"),ukr=l(),SC=a("li"),p6e=a("strong"),_kr=o("electra"),bkr=o(" \u2014 "),kJ=a("a"),vkr=o("FlaxElectraForMultipleChoice"),Fkr=o(" (ELECTRA model)"),Tkr=l(),RC=a("li"),u6e=a("strong"),Mkr=o("roberta"),Ekr=o(" \u2014 "),SJ=a("a"),Ckr=o("FlaxRobertaForMultipleChoice"),wkr=o(" (RoBERTa model)"),Akr=l(),BC=a("li"),_6e=a("strong"),ykr=o("roformer"),Lkr=o(" \u2014 "),RJ=a("a"),xkr=o("FlaxRoFormerForMultipleChoice"),$kr=o(" (RoFormer model)"),kkr=l(),PC=a("li"),b6e=a("strong"),Skr=o("xlm-roberta"),Rkr=o(" \u2014 "),BJ=a("a"),Bkr=o("FlaxXLMRobertaForMultipleChoice"),Pkr=o(" (XLM-RoBERTa model)"),Ikr=l(),F(IC.$$.fragment),$Pe=l(),Vc=a("h2"),qC=a("a"),v6e=a("span"),F(K8.$$.fragment),qkr=l(),F6e=a("span"),Nkr=o("FlaxAutoModelForNextSentencePrediction"),kPe=l(),br=a("div"),F(Z8.$$.fragment),jkr=l(),Xc=a("p"),Dkr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),PJ=a("a"),Gkr=o("from_pretrained()"),Okr=o(" class method or the "),IJ=a("a"),Vkr=o("from_config()"),Xkr=o(` class
method.`),zkr=l(),e7=a("p"),Qkr=o("This class cannot be instantiated directly using "),T6e=a("code"),Wkr=o("__init__()"),Hkr=o(" (throws an error)."),Ukr=l(),zt=a("div"),F(o7.$$.fragment),Jkr=l(),M6e=a("p"),Ykr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Kkr=l(),zc=a("p"),Zkr=o(`Note:
Loading a model from its configuration file does `),E6e=a("strong"),eSr=o("not"),oSr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qJ=a("a"),rSr=o("from_pretrained()"),tSr=o(" to load the model weights."),aSr=l(),F(NC.$$.fragment),nSr=l(),zr=a("div"),F(r7.$$.fragment),sSr=l(),C6e=a("p"),lSr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),iSr=l(),bn=a("p"),dSr=o("The model class to instantiate is selected based on the "),w6e=a("code"),cSr=o("model_type"),fSr=o(` property of the config object (either
passed as an argument or loaded from `),A6e=a("code"),mSr=o("pretrained_model_name_or_path"),gSr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),y6e=a("code"),hSr=o("pretrained_model_name_or_path"),pSr=o(":"),uSr=l(),L6e=a("ul"),jC=a("li"),x6e=a("strong"),_Sr=o("bert"),bSr=o(" \u2014 "),NJ=a("a"),vSr=o("FlaxBertForNextSentencePrediction"),FSr=o(" (BERT model)"),TSr=l(),F(DC.$$.fragment),SPe=l(),Qc=a("h2"),GC=a("a"),$6e=a("span"),F(t7.$$.fragment),MSr=l(),k6e=a("span"),ESr=o("FlaxAutoModelForImageClassification"),RPe=l(),vr=a("div"),F(a7.$$.fragment),CSr=l(),Wc=a("p"),wSr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),jJ=a("a"),ASr=o("from_pretrained()"),ySr=o(" class method or the "),DJ=a("a"),LSr=o("from_config()"),xSr=o(` class
method.`),$Sr=l(),n7=a("p"),kSr=o("This class cannot be instantiated directly using "),S6e=a("code"),SSr=o("__init__()"),RSr=o(" (throws an error)."),BSr=l(),Qt=a("div"),F(s7.$$.fragment),PSr=l(),R6e=a("p"),ISr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),qSr=l(),Hc=a("p"),NSr=o(`Note:
Loading a model from its configuration file does `),B6e=a("strong"),jSr=o("not"),DSr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),GJ=a("a"),GSr=o("from_pretrained()"),OSr=o(" to load the model weights."),VSr=l(),F(OC.$$.fragment),XSr=l(),Qr=a("div"),F(l7.$$.fragment),zSr=l(),P6e=a("p"),QSr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),WSr=l(),vn=a("p"),HSr=o("The model class to instantiate is selected based on the "),I6e=a("code"),USr=o("model_type"),JSr=o(` property of the config object (either
passed as an argument or loaded from `),q6e=a("code"),YSr=o("pretrained_model_name_or_path"),KSr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),N6e=a("code"),ZSr=o("pretrained_model_name_or_path"),eRr=o(":"),oRr=l(),i7=a("ul"),VC=a("li"),j6e=a("strong"),rRr=o("beit"),tRr=o(" \u2014 "),OJ=a("a"),aRr=o("FlaxBeitForImageClassification"),nRr=o(" (BEiT model)"),sRr=l(),XC=a("li"),D6e=a("strong"),lRr=o("vit"),iRr=o(" \u2014 "),VJ=a("a"),dRr=o("FlaxViTForImageClassification"),cRr=o(" (ViT model)"),fRr=l(),F(zC.$$.fragment),BPe=l(),Uc=a("h2"),QC=a("a"),G6e=a("span"),F(d7.$$.fragment),mRr=l(),O6e=a("span"),gRr=o("FlaxAutoModelForVision2Seq"),PPe=l(),Fr=a("div"),F(c7.$$.fragment),hRr=l(),Jc=a("p"),pRr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),XJ=a("a"),uRr=o("from_pretrained()"),_Rr=o(" class method or the "),zJ=a("a"),bRr=o("from_config()"),vRr=o(` class
method.`),FRr=l(),f7=a("p"),TRr=o("This class cannot be instantiated directly using "),V6e=a("code"),MRr=o("__init__()"),ERr=o(" (throws an error)."),CRr=l(),Wt=a("div"),F(m7.$$.fragment),wRr=l(),X6e=a("p"),ARr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),yRr=l(),Yc=a("p"),LRr=o(`Note:
Loading a model from its configuration file does `),z6e=a("strong"),xRr=o("not"),$Rr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QJ=a("a"),kRr=o("from_pretrained()"),SRr=o(" to load the model weights."),RRr=l(),F(WC.$$.fragment),BRr=l(),Wr=a("div"),F(g7.$$.fragment),PRr=l(),Q6e=a("p"),IRr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),qRr=l(),Fn=a("p"),NRr=o("The model class to instantiate is selected based on the "),W6e=a("code"),jRr=o("model_type"),DRr=o(` property of the config object (either
passed as an argument or loaded from `),H6e=a("code"),GRr=o("pretrained_model_name_or_path"),ORr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),U6e=a("code"),VRr=o("pretrained_model_name_or_path"),XRr=o(":"),zRr=l(),J6e=a("ul"),HC=a("li"),Y6e=a("strong"),QRr=o("vision-encoder-decoder"),WRr=o(" \u2014 "),WJ=a("a"),HRr=o("FlaxVisionEncoderDecoderModel"),URr=o(" (Vision Encoder decoder model)"),JRr=l(),F(UC.$$.fragment),this.h()},l(f){const _=L4t('[data-svelte="svelte-1phssyn"]',document.head);g=n(_,"META",{name:!0,content:!0}),_.forEach(t),v=i(f),p=n(f,"H1",{class:!0});var h7=s(p);m=n(h7,"A",{id:!0,class:!0,href:!0});var K6e=s(m);u=n(K6e,"SPAN",{});var Z6e=s(u);T(d.$$.fragment,Z6e),Z6e.forEach(t),K6e.forEach(t),h=i(h7),To=n(h7,"SPAN",{});var eTe=s(To);oi=r(eTe,"Auto Classes"),eTe.forEach(t),h7.forEach(t),of=i(f),Kr=n(f,"P",{});var p7=s(Kr);ri=r(p7,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),ti=n(p7,"CODE",{});var oTe=s(ti);fA=r(oTe,"from_pretrained()"),oTe.forEach(t),rf=r(p7,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),p7.forEach(t),Ie=i(f),Ve=n(f,"P",{});var Tn=s(Ve);ai=r(Tn,"Instantiating one of "),Mn=n(Tn,"A",{href:!0});var rTe=s(Mn);mA=r(rTe,"AutoConfig"),rTe.forEach(t),En=r(Tn,", "),Cn=n(Tn,"A",{href:!0});var tTe=s(Cn);gA=r(tTe,"AutoModel"),tTe.forEach(t),ni=r(Tn,`, and
`),wn=n(Tn,"A",{href:!0});var aTe=s(wn);hA=r(aTe,"AutoTokenizer"),aTe.forEach(t),si=r(Tn," will directly create a class of the relevant architecture. For instance"),Tn.forEach(t),tf=i(f),T(va.$$.fragment,f),Xe=i(f),Ae=n(f,"P",{});var u7=s(Ae);Ax=r(u7,"will create a model that is an instance of "),li=n(u7,"A",{href:!0});var nTe=s(li);yx=r(nTe,"BertModel"),nTe.forEach(t),Lx=r(u7,"."),u7.forEach(t),Mo=i(f),Fa=n(f,"P",{});var _7=s(Fa);xx=r(_7,"There is one class of "),af=n(_7,"CODE",{});var sTe=s(af);$x=r(sTe,"AutoModel"),sTe.forEach(t),Gqe=r(_7," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),_7.forEach(t),PRe=i(f),ii=n(f,"H2",{class:!0});var b7=s(ii);nf=n(b7,"A",{id:!0,class:!0,href:!0});var lTe=s(nf);NK=n(lTe,"SPAN",{});var iTe=s(NK);T(pA.$$.fragment,iTe),iTe.forEach(t),lTe.forEach(t),Oqe=i(b7),jK=n(b7,"SPAN",{});var dTe=s(jK);Vqe=r(dTe,"Extending the Auto Classes"),dTe.forEach(t),b7.forEach(t),IRe=i(f),An=n(f,"P",{});var Kc=s(An);Xqe=r(Kc,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),DK=n(Kc,"CODE",{});var cTe=s(DK);zqe=r(cTe,"NewModel"),cTe.forEach(t),Qqe=r(Kc,", make sure you have a "),GK=n(Kc,"CODE",{});var fTe=s(GK);Wqe=r(fTe,"NewModelConfig"),fTe.forEach(t),Hqe=r(Kc,` then you can add those to the auto
classes like this:`),Kc.forEach(t),qRe=i(f),T(uA.$$.fragment,f),NRe=i(f),kx=n(f,"P",{});var mTe=s(kx);Uqe=r(mTe,"You will then be able to use the auto classes like you would usually do!"),mTe.forEach(t),jRe=i(f),T(sf.$$.fragment,f),DRe=i(f),di=n(f,"H2",{class:!0});var v7=s(di);lf=n(v7,"A",{id:!0,class:!0,href:!0});var gTe=s(lf);OK=n(gTe,"SPAN",{});var hTe=s(OK);T(_A.$$.fragment,hTe),hTe.forEach(t),gTe.forEach(t),Jqe=i(v7),VK=n(v7,"SPAN",{});var pTe=s(VK);Yqe=r(pTe,"AutoConfig"),pTe.forEach(t),v7.forEach(t),GRe=i(f),Eo=n(f,"DIV",{class:!0});var Jr=s(Eo);T(bA.$$.fragment,Jr),Kqe=i(Jr),vA=n(Jr,"P",{});var F7=s(vA);Zqe=r(F7,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),Sx=n(F7,"A",{href:!0});var uTe=s(Sx);eNe=r(uTe,"from_pretrained()"),uTe.forEach(t),oNe=r(F7," class method."),F7.forEach(t),rNe=i(Jr),FA=n(Jr,"P",{});var T7=s(FA);tNe=r(T7,"This class cannot be instantiated directly using "),XK=n(T7,"CODE",{});var _Te=s(XK);aNe=r(_Te,"__init__()"),_Te.forEach(t),nNe=r(T7," (throws an error)."),T7.forEach(t),sNe=i(Jr),Tr=n(Jr,"DIV",{class:!0});var Yr=s(Tr);T(TA.$$.fragment,Yr),lNe=i(Yr),zK=n(Yr,"P",{});var bTe=s(zK);iNe=r(bTe,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),bTe.forEach(t),dNe=i(Yr),ci=n(Yr,"P",{});var Zc=s(ci);cNe=r(Zc,"The configuration class to instantiate is selected based on the "),QK=n(Zc,"CODE",{});var vTe=s(QK);fNe=r(vTe,"model_type"),vTe.forEach(t),mNe=r(Zc,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),WK=n(Zc,"CODE",{});var FTe=s(WK);gNe=r(FTe,"pretrained_model_name_or_path"),FTe.forEach(t),hNe=r(Zc,":"),Zc.forEach(t),pNe=i(Yr),y=n(Yr,"UL",{});var L=s(y);df=n(L,"LI",{});var JC=s(df);HK=n(JC,"STRONG",{});var TTe=s(HK);uNe=r(TTe,"albert"),TTe.forEach(t),_Ne=r(JC," \u2014 "),Rx=n(JC,"A",{href:!0});var MTe=s(Rx);bNe=r(MTe,"AlbertConfig"),MTe.forEach(t),vNe=r(JC," (ALBERT model)"),JC.forEach(t),FNe=i(L),cf=n(L,"LI",{});var YC=s(cf);UK=n(YC,"STRONG",{});var ETe=s(UK);TNe=r(ETe,"bart"),ETe.forEach(t),MNe=r(YC," \u2014 "),Bx=n(YC,"A",{href:!0});var CTe=s(Bx);ENe=r(CTe,"BartConfig"),CTe.forEach(t),CNe=r(YC," (BART model)"),YC.forEach(t),wNe=i(L),ff=n(L,"LI",{});var KC=s(ff);JK=n(KC,"STRONG",{});var wTe=s(JK);ANe=r(wTe,"beit"),wTe.forEach(t),yNe=r(KC," \u2014 "),Px=n(KC,"A",{href:!0});var ATe=s(Px);LNe=r(ATe,"BeitConfig"),ATe.forEach(t),xNe=r(KC," (BEiT model)"),KC.forEach(t),$Ne=i(L),mf=n(L,"LI",{});var ZC=s(mf);YK=n(ZC,"STRONG",{});var yTe=s(YK);kNe=r(yTe,"bert"),yTe.forEach(t),SNe=r(ZC," \u2014 "),Ix=n(ZC,"A",{href:!0});var LTe=s(Ix);RNe=r(LTe,"BertConfig"),LTe.forEach(t),BNe=r(ZC," (BERT model)"),ZC.forEach(t),PNe=i(L),gf=n(L,"LI",{});var e3=s(gf);KK=n(e3,"STRONG",{});var xTe=s(KK);INe=r(xTe,"bert-generation"),xTe.forEach(t),qNe=r(e3," \u2014 "),qx=n(e3,"A",{href:!0});var $Te=s(qx);NNe=r($Te,"BertGenerationConfig"),$Te.forEach(t),jNe=r(e3," (Bert Generation model)"),e3.forEach(t),DNe=i(L),hf=n(L,"LI",{});var o3=s(hf);ZK=n(o3,"STRONG",{});var kTe=s(ZK);GNe=r(kTe,"big_bird"),kTe.forEach(t),ONe=r(o3," \u2014 "),Nx=n(o3,"A",{href:!0});var STe=s(Nx);VNe=r(STe,"BigBirdConfig"),STe.forEach(t),XNe=r(o3," (BigBird model)"),o3.forEach(t),zNe=i(L),pf=n(L,"LI",{});var r3=s(pf);eZ=n(r3,"STRONG",{});var RTe=s(eZ);QNe=r(RTe,"bigbird_pegasus"),RTe.forEach(t),WNe=r(r3," \u2014 "),jx=n(r3,"A",{href:!0});var BTe=s(jx);HNe=r(BTe,"BigBirdPegasusConfig"),BTe.forEach(t),UNe=r(r3," (BigBirdPegasus model)"),r3.forEach(t),JNe=i(L),uf=n(L,"LI",{});var t3=s(uf);oZ=n(t3,"STRONG",{});var PTe=s(oZ);YNe=r(PTe,"blenderbot"),PTe.forEach(t),KNe=r(t3," \u2014 "),Dx=n(t3,"A",{href:!0});var ITe=s(Dx);ZNe=r(ITe,"BlenderbotConfig"),ITe.forEach(t),eje=r(t3," (Blenderbot model)"),t3.forEach(t),oje=i(L),_f=n(L,"LI",{});var a3=s(_f);rZ=n(a3,"STRONG",{});var qTe=s(rZ);rje=r(qTe,"blenderbot-small"),qTe.forEach(t),tje=r(a3," \u2014 "),Gx=n(a3,"A",{href:!0});var NTe=s(Gx);aje=r(NTe,"BlenderbotSmallConfig"),NTe.forEach(t),nje=r(a3," (BlenderbotSmall model)"),a3.forEach(t),sje=i(L),bf=n(L,"LI",{});var n3=s(bf);tZ=n(n3,"STRONG",{});var jTe=s(tZ);lje=r(jTe,"camembert"),jTe.forEach(t),ije=r(n3," \u2014 "),Ox=n(n3,"A",{href:!0});var DTe=s(Ox);dje=r(DTe,"CamembertConfig"),DTe.forEach(t),cje=r(n3," (CamemBERT model)"),n3.forEach(t),fje=i(L),vf=n(L,"LI",{});var s3=s(vf);aZ=n(s3,"STRONG",{});var GTe=s(aZ);mje=r(GTe,"canine"),GTe.forEach(t),gje=r(s3," \u2014 "),Vx=n(s3,"A",{href:!0});var OTe=s(Vx);hje=r(OTe,"CanineConfig"),OTe.forEach(t),pje=r(s3," (Canine model)"),s3.forEach(t),uje=i(L),Ff=n(L,"LI",{});var l3=s(Ff);nZ=n(l3,"STRONG",{});var VTe=s(nZ);_je=r(VTe,"clip"),VTe.forEach(t),bje=r(l3," \u2014 "),Xx=n(l3,"A",{href:!0});var XTe=s(Xx);vje=r(XTe,"CLIPConfig"),XTe.forEach(t),Fje=r(l3," (CLIP model)"),l3.forEach(t),Tje=i(L),Tf=n(L,"LI",{});var i3=s(Tf);sZ=n(i3,"STRONG",{});var zTe=s(sZ);Mje=r(zTe,"convbert"),zTe.forEach(t),Eje=r(i3," \u2014 "),zx=n(i3,"A",{href:!0});var QTe=s(zx);Cje=r(QTe,"ConvBertConfig"),QTe.forEach(t),wje=r(i3," (ConvBERT model)"),i3.forEach(t),Aje=i(L),Mf=n(L,"LI",{});var d3=s(Mf);lZ=n(d3,"STRONG",{});var WTe=s(lZ);yje=r(WTe,"convnext"),WTe.forEach(t),Lje=r(d3," \u2014 "),Qx=n(d3,"A",{href:!0});var HTe=s(Qx);xje=r(HTe,"ConvNextConfig"),HTe.forEach(t),$je=r(d3," (ConvNext model)"),d3.forEach(t),kje=i(L),Ef=n(L,"LI",{});var c3=s(Ef);iZ=n(c3,"STRONG",{});var UTe=s(iZ);Sje=r(UTe,"ctrl"),UTe.forEach(t),Rje=r(c3," \u2014 "),Wx=n(c3,"A",{href:!0});var JTe=s(Wx);Bje=r(JTe,"CTRLConfig"),JTe.forEach(t),Pje=r(c3," (CTRL model)"),c3.forEach(t),Ije=i(L),Cf=n(L,"LI",{});var f3=s(Cf);dZ=n(f3,"STRONG",{});var YTe=s(dZ);qje=r(YTe,"data2vec-audio"),YTe.forEach(t),Nje=r(f3," \u2014 "),Hx=n(f3,"A",{href:!0});var KTe=s(Hx);jje=r(KTe,"Data2VecAudioConfig"),KTe.forEach(t),Dje=r(f3," (Data2VecAudio model)"),f3.forEach(t),Gje=i(L),wf=n(L,"LI",{});var m3=s(wf);cZ=n(m3,"STRONG",{});var ZTe=s(cZ);Oje=r(ZTe,"data2vec-text"),ZTe.forEach(t),Vje=r(m3," \u2014 "),Ux=n(m3,"A",{href:!0});var eMe=s(Ux);Xje=r(eMe,"Data2VecTextConfig"),eMe.forEach(t),zje=r(m3," (Data2VecText model)"),m3.forEach(t),Qje=i(L),Af=n(L,"LI",{});var g3=s(Af);fZ=n(g3,"STRONG",{});var oMe=s(fZ);Wje=r(oMe,"data2vec-vision"),oMe.forEach(t),Hje=r(g3," \u2014 "),Jx=n(g3,"A",{href:!0});var rMe=s(Jx);Uje=r(rMe,"Data2VecVisionConfig"),rMe.forEach(t),Jje=r(g3," (Data2VecVision model)"),g3.forEach(t),Yje=i(L),yf=n(L,"LI",{});var h3=s(yf);mZ=n(h3,"STRONG",{});var tMe=s(mZ);Kje=r(tMe,"deberta"),tMe.forEach(t),Zje=r(h3," \u2014 "),Yx=n(h3,"A",{href:!0});var aMe=s(Yx);eDe=r(aMe,"DebertaConfig"),aMe.forEach(t),oDe=r(h3," (DeBERTa model)"),h3.forEach(t),rDe=i(L),Lf=n(L,"LI",{});var p3=s(Lf);gZ=n(p3,"STRONG",{});var nMe=s(gZ);tDe=r(nMe,"deberta-v2"),nMe.forEach(t),aDe=r(p3," \u2014 "),Kx=n(p3,"A",{href:!0});var sMe=s(Kx);nDe=r(sMe,"DebertaV2Config"),sMe.forEach(t),sDe=r(p3," (DeBERTa-v2 model)"),p3.forEach(t),lDe=i(L),xf=n(L,"LI",{});var u3=s(xf);hZ=n(u3,"STRONG",{});var lMe=s(hZ);iDe=r(lMe,"decision_transformer"),lMe.forEach(t),dDe=r(u3," \u2014 "),Zx=n(u3,"A",{href:!0});var iMe=s(Zx);cDe=r(iMe,"DecisionTransformerConfig"),iMe.forEach(t),fDe=r(u3," (Decision Transformer model)"),u3.forEach(t),mDe=i(L),$f=n(L,"LI",{});var _3=s($f);pZ=n(_3,"STRONG",{});var dMe=s(pZ);gDe=r(dMe,"deit"),dMe.forEach(t),hDe=r(_3," \u2014 "),e$=n(_3,"A",{href:!0});var cMe=s(e$);pDe=r(cMe,"DeiTConfig"),cMe.forEach(t),uDe=r(_3," (DeiT model)"),_3.forEach(t),_De=i(L),kf=n(L,"LI",{});var fMe=s(kf);uZ=n(fMe,"STRONG",{});var KRr=s(uZ);bDe=r(KRr,"detr"),KRr.forEach(t),vDe=r(fMe," \u2014 "),o$=n(fMe,"A",{href:!0});var ZRr=s(o$);FDe=r(ZRr,"DetrConfig"),ZRr.forEach(t),TDe=r(fMe," (DETR model)"),fMe.forEach(t),MDe=i(L),Sf=n(L,"LI",{});var mMe=s(Sf);_Z=n(mMe,"STRONG",{});var eBr=s(_Z);EDe=r(eBr,"distilbert"),eBr.forEach(t),CDe=r(mMe," \u2014 "),r$=n(mMe,"A",{href:!0});var oBr=s(r$);wDe=r(oBr,"DistilBertConfig"),oBr.forEach(t),ADe=r(mMe," (DistilBERT model)"),mMe.forEach(t),yDe=i(L),Rf=n(L,"LI",{});var gMe=s(Rf);bZ=n(gMe,"STRONG",{});var rBr=s(bZ);LDe=r(rBr,"dpr"),rBr.forEach(t),xDe=r(gMe," \u2014 "),t$=n(gMe,"A",{href:!0});var tBr=s(t$);$De=r(tBr,"DPRConfig"),tBr.forEach(t),kDe=r(gMe," (DPR model)"),gMe.forEach(t),SDe=i(L),Bf=n(L,"LI",{});var hMe=s(Bf);vZ=n(hMe,"STRONG",{});var aBr=s(vZ);RDe=r(aBr,"dpt"),aBr.forEach(t),BDe=r(hMe," \u2014 "),a$=n(hMe,"A",{href:!0});var nBr=s(a$);PDe=r(nBr,"DPTConfig"),nBr.forEach(t),IDe=r(hMe," (DPT model)"),hMe.forEach(t),qDe=i(L),Pf=n(L,"LI",{});var pMe=s(Pf);FZ=n(pMe,"STRONG",{});var sBr=s(FZ);NDe=r(sBr,"electra"),sBr.forEach(t),jDe=r(pMe," \u2014 "),n$=n(pMe,"A",{href:!0});var lBr=s(n$);DDe=r(lBr,"ElectraConfig"),lBr.forEach(t),GDe=r(pMe," (ELECTRA model)"),pMe.forEach(t),ODe=i(L),If=n(L,"LI",{});var uMe=s(If);TZ=n(uMe,"STRONG",{});var iBr=s(TZ);VDe=r(iBr,"encoder-decoder"),iBr.forEach(t),XDe=r(uMe," \u2014 "),s$=n(uMe,"A",{href:!0});var dBr=s(s$);zDe=r(dBr,"EncoderDecoderConfig"),dBr.forEach(t),QDe=r(uMe," (Encoder decoder model)"),uMe.forEach(t),WDe=i(L),qf=n(L,"LI",{});var _Me=s(qf);MZ=n(_Me,"STRONG",{});var cBr=s(MZ);HDe=r(cBr,"flaubert"),cBr.forEach(t),UDe=r(_Me," \u2014 "),l$=n(_Me,"A",{href:!0});var fBr=s(l$);JDe=r(fBr,"FlaubertConfig"),fBr.forEach(t),YDe=r(_Me," (FlauBERT model)"),_Me.forEach(t),KDe=i(L),Nf=n(L,"LI",{});var bMe=s(Nf);EZ=n(bMe,"STRONG",{});var mBr=s(EZ);ZDe=r(mBr,"fnet"),mBr.forEach(t),eGe=r(bMe," \u2014 "),i$=n(bMe,"A",{href:!0});var gBr=s(i$);oGe=r(gBr,"FNetConfig"),gBr.forEach(t),rGe=r(bMe," (FNet model)"),bMe.forEach(t),tGe=i(L),jf=n(L,"LI",{});var vMe=s(jf);CZ=n(vMe,"STRONG",{});var hBr=s(CZ);aGe=r(hBr,"fsmt"),hBr.forEach(t),nGe=r(vMe," \u2014 "),d$=n(vMe,"A",{href:!0});var pBr=s(d$);sGe=r(pBr,"FSMTConfig"),pBr.forEach(t),lGe=r(vMe," (FairSeq Machine-Translation model)"),vMe.forEach(t),iGe=i(L),Df=n(L,"LI",{});var FMe=s(Df);wZ=n(FMe,"STRONG",{});var uBr=s(wZ);dGe=r(uBr,"funnel"),uBr.forEach(t),cGe=r(FMe," \u2014 "),c$=n(FMe,"A",{href:!0});var _Br=s(c$);fGe=r(_Br,"FunnelConfig"),_Br.forEach(t),mGe=r(FMe," (Funnel Transformer model)"),FMe.forEach(t),gGe=i(L),Gf=n(L,"LI",{});var TMe=s(Gf);AZ=n(TMe,"STRONG",{});var bBr=s(AZ);hGe=r(bBr,"glpn"),bBr.forEach(t),pGe=r(TMe," \u2014 "),f$=n(TMe,"A",{href:!0});var vBr=s(f$);uGe=r(vBr,"GLPNConfig"),vBr.forEach(t),_Ge=r(TMe," (GLPN model)"),TMe.forEach(t),bGe=i(L),Of=n(L,"LI",{});var MMe=s(Of);yZ=n(MMe,"STRONG",{});var FBr=s(yZ);vGe=r(FBr,"gpt2"),FBr.forEach(t),FGe=r(MMe," \u2014 "),m$=n(MMe,"A",{href:!0});var TBr=s(m$);TGe=r(TBr,"GPT2Config"),TBr.forEach(t),MGe=r(MMe," (OpenAI GPT-2 model)"),MMe.forEach(t),EGe=i(L),Vf=n(L,"LI",{});var EMe=s(Vf);LZ=n(EMe,"STRONG",{});var MBr=s(LZ);CGe=r(MBr,"gpt_neo"),MBr.forEach(t),wGe=r(EMe," \u2014 "),g$=n(EMe,"A",{href:!0});var EBr=s(g$);AGe=r(EBr,"GPTNeoConfig"),EBr.forEach(t),yGe=r(EMe," (GPT Neo model)"),EMe.forEach(t),LGe=i(L),Xf=n(L,"LI",{});var CMe=s(Xf);xZ=n(CMe,"STRONG",{});var CBr=s(xZ);xGe=r(CBr,"gptj"),CBr.forEach(t),$Ge=r(CMe," \u2014 "),h$=n(CMe,"A",{href:!0});var wBr=s(h$);kGe=r(wBr,"GPTJConfig"),wBr.forEach(t),SGe=r(CMe," (GPT-J model)"),CMe.forEach(t),RGe=i(L),zf=n(L,"LI",{});var wMe=s(zf);$Z=n(wMe,"STRONG",{});var ABr=s($Z);BGe=r(ABr,"hubert"),ABr.forEach(t),PGe=r(wMe," \u2014 "),p$=n(wMe,"A",{href:!0});var yBr=s(p$);IGe=r(yBr,"HubertConfig"),yBr.forEach(t),qGe=r(wMe," (Hubert model)"),wMe.forEach(t),NGe=i(L),Qf=n(L,"LI",{});var AMe=s(Qf);kZ=n(AMe,"STRONG",{});var LBr=s(kZ);jGe=r(LBr,"ibert"),LBr.forEach(t),DGe=r(AMe," \u2014 "),u$=n(AMe,"A",{href:!0});var xBr=s(u$);GGe=r(xBr,"IBertConfig"),xBr.forEach(t),OGe=r(AMe," (I-BERT model)"),AMe.forEach(t),VGe=i(L),Wf=n(L,"LI",{});var yMe=s(Wf);SZ=n(yMe,"STRONG",{});var $Br=s(SZ);XGe=r($Br,"imagegpt"),$Br.forEach(t),zGe=r(yMe," \u2014 "),_$=n(yMe,"A",{href:!0});var kBr=s(_$);QGe=r(kBr,"ImageGPTConfig"),kBr.forEach(t),WGe=r(yMe," (ImageGPT model)"),yMe.forEach(t),HGe=i(L),Hf=n(L,"LI",{});var LMe=s(Hf);RZ=n(LMe,"STRONG",{});var SBr=s(RZ);UGe=r(SBr,"layoutlm"),SBr.forEach(t),JGe=r(LMe," \u2014 "),b$=n(LMe,"A",{href:!0});var RBr=s(b$);YGe=r(RBr,"LayoutLMConfig"),RBr.forEach(t),KGe=r(LMe," (LayoutLM model)"),LMe.forEach(t),ZGe=i(L),Uf=n(L,"LI",{});var xMe=s(Uf);BZ=n(xMe,"STRONG",{});var BBr=s(BZ);eOe=r(BBr,"layoutlmv2"),BBr.forEach(t),oOe=r(xMe," \u2014 "),v$=n(xMe,"A",{href:!0});var PBr=s(v$);rOe=r(PBr,"LayoutLMv2Config"),PBr.forEach(t),tOe=r(xMe," (LayoutLMv2 model)"),xMe.forEach(t),aOe=i(L),Jf=n(L,"LI",{});var $Me=s(Jf);PZ=n($Me,"STRONG",{});var IBr=s(PZ);nOe=r(IBr,"led"),IBr.forEach(t),sOe=r($Me," \u2014 "),F$=n($Me,"A",{href:!0});var qBr=s(F$);lOe=r(qBr,"LEDConfig"),qBr.forEach(t),iOe=r($Me," (LED model)"),$Me.forEach(t),dOe=i(L),Yf=n(L,"LI",{});var kMe=s(Yf);IZ=n(kMe,"STRONG",{});var NBr=s(IZ);cOe=r(NBr,"longformer"),NBr.forEach(t),fOe=r(kMe," \u2014 "),T$=n(kMe,"A",{href:!0});var jBr=s(T$);mOe=r(jBr,"LongformerConfig"),jBr.forEach(t),gOe=r(kMe," (Longformer model)"),kMe.forEach(t),hOe=i(L),Kf=n(L,"LI",{});var SMe=s(Kf);qZ=n(SMe,"STRONG",{});var DBr=s(qZ);pOe=r(DBr,"luke"),DBr.forEach(t),uOe=r(SMe," \u2014 "),M$=n(SMe,"A",{href:!0});var GBr=s(M$);_Oe=r(GBr,"LukeConfig"),GBr.forEach(t),bOe=r(SMe," (LUKE model)"),SMe.forEach(t),vOe=i(L),Zf=n(L,"LI",{});var RMe=s(Zf);NZ=n(RMe,"STRONG",{});var OBr=s(NZ);FOe=r(OBr,"lxmert"),OBr.forEach(t),TOe=r(RMe," \u2014 "),E$=n(RMe,"A",{href:!0});var VBr=s(E$);MOe=r(VBr,"LxmertConfig"),VBr.forEach(t),EOe=r(RMe," (LXMERT model)"),RMe.forEach(t),COe=i(L),em=n(L,"LI",{});var BMe=s(em);jZ=n(BMe,"STRONG",{});var XBr=s(jZ);wOe=r(XBr,"m2m_100"),XBr.forEach(t),AOe=r(BMe," \u2014 "),C$=n(BMe,"A",{href:!0});var zBr=s(C$);yOe=r(zBr,"M2M100Config"),zBr.forEach(t),LOe=r(BMe," (M2M100 model)"),BMe.forEach(t),xOe=i(L),om=n(L,"LI",{});var PMe=s(om);DZ=n(PMe,"STRONG",{});var QBr=s(DZ);$Oe=r(QBr,"marian"),QBr.forEach(t),kOe=r(PMe," \u2014 "),w$=n(PMe,"A",{href:!0});var WBr=s(w$);SOe=r(WBr,"MarianConfig"),WBr.forEach(t),ROe=r(PMe," (Marian model)"),PMe.forEach(t),BOe=i(L),rm=n(L,"LI",{});var IMe=s(rm);GZ=n(IMe,"STRONG",{});var HBr=s(GZ);POe=r(HBr,"maskformer"),HBr.forEach(t),IOe=r(IMe," \u2014 "),A$=n(IMe,"A",{href:!0});var UBr=s(A$);qOe=r(UBr,"MaskFormerConfig"),UBr.forEach(t),NOe=r(IMe," (MaskFormer model)"),IMe.forEach(t),jOe=i(L),tm=n(L,"LI",{});var qMe=s(tm);OZ=n(qMe,"STRONG",{});var JBr=s(OZ);DOe=r(JBr,"mbart"),JBr.forEach(t),GOe=r(qMe," \u2014 "),y$=n(qMe,"A",{href:!0});var YBr=s(y$);OOe=r(YBr,"MBartConfig"),YBr.forEach(t),VOe=r(qMe," (mBART model)"),qMe.forEach(t),XOe=i(L),am=n(L,"LI",{});var NMe=s(am);VZ=n(NMe,"STRONG",{});var KBr=s(VZ);zOe=r(KBr,"megatron-bert"),KBr.forEach(t),QOe=r(NMe," \u2014 "),L$=n(NMe,"A",{href:!0});var ZBr=s(L$);WOe=r(ZBr,"MegatronBertConfig"),ZBr.forEach(t),HOe=r(NMe," (MegatronBert model)"),NMe.forEach(t),UOe=i(L),nm=n(L,"LI",{});var jMe=s(nm);XZ=n(jMe,"STRONG",{});var ePr=s(XZ);JOe=r(ePr,"mobilebert"),ePr.forEach(t),YOe=r(jMe," \u2014 "),x$=n(jMe,"A",{href:!0});var oPr=s(x$);KOe=r(oPr,"MobileBertConfig"),oPr.forEach(t),ZOe=r(jMe," (MobileBERT model)"),jMe.forEach(t),eVe=i(L),sm=n(L,"LI",{});var DMe=s(sm);zZ=n(DMe,"STRONG",{});var rPr=s(zZ);oVe=r(rPr,"mpnet"),rPr.forEach(t),rVe=r(DMe," \u2014 "),$$=n(DMe,"A",{href:!0});var tPr=s($$);tVe=r(tPr,"MPNetConfig"),tPr.forEach(t),aVe=r(DMe," (MPNet model)"),DMe.forEach(t),nVe=i(L),lm=n(L,"LI",{});var GMe=s(lm);QZ=n(GMe,"STRONG",{});var aPr=s(QZ);sVe=r(aPr,"mt5"),aPr.forEach(t),lVe=r(GMe," \u2014 "),k$=n(GMe,"A",{href:!0});var nPr=s(k$);iVe=r(nPr,"MT5Config"),nPr.forEach(t),dVe=r(GMe," (mT5 model)"),GMe.forEach(t),cVe=i(L),im=n(L,"LI",{});var OMe=s(im);WZ=n(OMe,"STRONG",{});var sPr=s(WZ);fVe=r(sPr,"nystromformer"),sPr.forEach(t),mVe=r(OMe," \u2014 "),S$=n(OMe,"A",{href:!0});var lPr=s(S$);gVe=r(lPr,"NystromformerConfig"),lPr.forEach(t),hVe=r(OMe," (Nystromformer model)"),OMe.forEach(t),pVe=i(L),dm=n(L,"LI",{});var VMe=s(dm);HZ=n(VMe,"STRONG",{});var iPr=s(HZ);uVe=r(iPr,"openai-gpt"),iPr.forEach(t),_Ve=r(VMe," \u2014 "),R$=n(VMe,"A",{href:!0});var dPr=s(R$);bVe=r(dPr,"OpenAIGPTConfig"),dPr.forEach(t),vVe=r(VMe," (OpenAI GPT model)"),VMe.forEach(t),FVe=i(L),cm=n(L,"LI",{});var XMe=s(cm);UZ=n(XMe,"STRONG",{});var cPr=s(UZ);TVe=r(cPr,"pegasus"),cPr.forEach(t),MVe=r(XMe," \u2014 "),B$=n(XMe,"A",{href:!0});var fPr=s(B$);EVe=r(fPr,"PegasusConfig"),fPr.forEach(t),CVe=r(XMe," (Pegasus model)"),XMe.forEach(t),wVe=i(L),fm=n(L,"LI",{});var zMe=s(fm);JZ=n(zMe,"STRONG",{});var mPr=s(JZ);AVe=r(mPr,"perceiver"),mPr.forEach(t),yVe=r(zMe," \u2014 "),P$=n(zMe,"A",{href:!0});var gPr=s(P$);LVe=r(gPr,"PerceiverConfig"),gPr.forEach(t),xVe=r(zMe," (Perceiver model)"),zMe.forEach(t),$Ve=i(L),mm=n(L,"LI",{});var QMe=s(mm);YZ=n(QMe,"STRONG",{});var hPr=s(YZ);kVe=r(hPr,"plbart"),hPr.forEach(t),SVe=r(QMe," \u2014 "),I$=n(QMe,"A",{href:!0});var pPr=s(I$);RVe=r(pPr,"PLBartConfig"),pPr.forEach(t),BVe=r(QMe," (PLBart model)"),QMe.forEach(t),PVe=i(L),gm=n(L,"LI",{});var WMe=s(gm);KZ=n(WMe,"STRONG",{});var uPr=s(KZ);IVe=r(uPr,"poolformer"),uPr.forEach(t),qVe=r(WMe," \u2014 "),q$=n(WMe,"A",{href:!0});var _Pr=s(q$);NVe=r(_Pr,"PoolFormerConfig"),_Pr.forEach(t),jVe=r(WMe," (PoolFormer model)"),WMe.forEach(t),DVe=i(L),hm=n(L,"LI",{});var HMe=s(hm);ZZ=n(HMe,"STRONG",{});var bPr=s(ZZ);GVe=r(bPr,"prophetnet"),bPr.forEach(t),OVe=r(HMe," \u2014 "),N$=n(HMe,"A",{href:!0});var vPr=s(N$);VVe=r(vPr,"ProphetNetConfig"),vPr.forEach(t),XVe=r(HMe," (ProphetNet model)"),HMe.forEach(t),zVe=i(L),pm=n(L,"LI",{});var UMe=s(pm);eee=n(UMe,"STRONG",{});var FPr=s(eee);QVe=r(FPr,"qdqbert"),FPr.forEach(t),WVe=r(UMe," \u2014 "),j$=n(UMe,"A",{href:!0});var TPr=s(j$);HVe=r(TPr,"QDQBertConfig"),TPr.forEach(t),UVe=r(UMe," (QDQBert model)"),UMe.forEach(t),JVe=i(L),um=n(L,"LI",{});var JMe=s(um);oee=n(JMe,"STRONG",{});var MPr=s(oee);YVe=r(MPr,"rag"),MPr.forEach(t),KVe=r(JMe," \u2014 "),D$=n(JMe,"A",{href:!0});var EPr=s(D$);ZVe=r(EPr,"RagConfig"),EPr.forEach(t),eXe=r(JMe," (RAG model)"),JMe.forEach(t),oXe=i(L),_m=n(L,"LI",{});var YMe=s(_m);ree=n(YMe,"STRONG",{});var CPr=s(ree);rXe=r(CPr,"realm"),CPr.forEach(t),tXe=r(YMe," \u2014 "),G$=n(YMe,"A",{href:!0});var wPr=s(G$);aXe=r(wPr,"RealmConfig"),wPr.forEach(t),nXe=r(YMe," (Realm model)"),YMe.forEach(t),sXe=i(L),bm=n(L,"LI",{});var KMe=s(bm);tee=n(KMe,"STRONG",{});var APr=s(tee);lXe=r(APr,"reformer"),APr.forEach(t),iXe=r(KMe," \u2014 "),O$=n(KMe,"A",{href:!0});var yPr=s(O$);dXe=r(yPr,"ReformerConfig"),yPr.forEach(t),cXe=r(KMe," (Reformer model)"),KMe.forEach(t),fXe=i(L),vm=n(L,"LI",{});var ZMe=s(vm);aee=n(ZMe,"STRONG",{});var LPr=s(aee);mXe=r(LPr,"regnet"),LPr.forEach(t),gXe=r(ZMe," \u2014 "),V$=n(ZMe,"A",{href:!0});var xPr=s(V$);hXe=r(xPr,"RegNetConfig"),xPr.forEach(t),pXe=r(ZMe," (RegNet model)"),ZMe.forEach(t),uXe=i(L),Fm=n(L,"LI",{});var e4e=s(Fm);nee=n(e4e,"STRONG",{});var $Pr=s(nee);_Xe=r($Pr,"rembert"),$Pr.forEach(t),bXe=r(e4e," \u2014 "),X$=n(e4e,"A",{href:!0});var kPr=s(X$);vXe=r(kPr,"RemBertConfig"),kPr.forEach(t),FXe=r(e4e," (RemBERT model)"),e4e.forEach(t),TXe=i(L),Tm=n(L,"LI",{});var o4e=s(Tm);see=n(o4e,"STRONG",{});var SPr=s(see);MXe=r(SPr,"resnet"),SPr.forEach(t),EXe=r(o4e," \u2014 "),z$=n(o4e,"A",{href:!0});var RPr=s(z$);CXe=r(RPr,"ResNetConfig"),RPr.forEach(t),wXe=r(o4e," (ResNet model)"),o4e.forEach(t),AXe=i(L),Mm=n(L,"LI",{});var r4e=s(Mm);lee=n(r4e,"STRONG",{});var BPr=s(lee);yXe=r(BPr,"retribert"),BPr.forEach(t),LXe=r(r4e," \u2014 "),Q$=n(r4e,"A",{href:!0});var PPr=s(Q$);xXe=r(PPr,"RetriBertConfig"),PPr.forEach(t),$Xe=r(r4e," (RetriBERT model)"),r4e.forEach(t),kXe=i(L),Em=n(L,"LI",{});var t4e=s(Em);iee=n(t4e,"STRONG",{});var IPr=s(iee);SXe=r(IPr,"roberta"),IPr.forEach(t),RXe=r(t4e," \u2014 "),W$=n(t4e,"A",{href:!0});var qPr=s(W$);BXe=r(qPr,"RobertaConfig"),qPr.forEach(t),PXe=r(t4e," (RoBERTa model)"),t4e.forEach(t),IXe=i(L),Cm=n(L,"LI",{});var a4e=s(Cm);dee=n(a4e,"STRONG",{});var NPr=s(dee);qXe=r(NPr,"roformer"),NPr.forEach(t),NXe=r(a4e," \u2014 "),H$=n(a4e,"A",{href:!0});var jPr=s(H$);jXe=r(jPr,"RoFormerConfig"),jPr.forEach(t),DXe=r(a4e," (RoFormer model)"),a4e.forEach(t),GXe=i(L),wm=n(L,"LI",{});var n4e=s(wm);cee=n(n4e,"STRONG",{});var DPr=s(cee);OXe=r(DPr,"segformer"),DPr.forEach(t),VXe=r(n4e," \u2014 "),U$=n(n4e,"A",{href:!0});var GPr=s(U$);XXe=r(GPr,"SegformerConfig"),GPr.forEach(t),zXe=r(n4e," (SegFormer model)"),n4e.forEach(t),QXe=i(L),Am=n(L,"LI",{});var s4e=s(Am);fee=n(s4e,"STRONG",{});var OPr=s(fee);WXe=r(OPr,"sew"),OPr.forEach(t),HXe=r(s4e," \u2014 "),J$=n(s4e,"A",{href:!0});var VPr=s(J$);UXe=r(VPr,"SEWConfig"),VPr.forEach(t),JXe=r(s4e," (SEW model)"),s4e.forEach(t),YXe=i(L),ym=n(L,"LI",{});var l4e=s(ym);mee=n(l4e,"STRONG",{});var XPr=s(mee);KXe=r(XPr,"sew-d"),XPr.forEach(t),ZXe=r(l4e," \u2014 "),Y$=n(l4e,"A",{href:!0});var zPr=s(Y$);eze=r(zPr,"SEWDConfig"),zPr.forEach(t),oze=r(l4e," (SEW-D model)"),l4e.forEach(t),rze=i(L),Lm=n(L,"LI",{});var i4e=s(Lm);gee=n(i4e,"STRONG",{});var QPr=s(gee);tze=r(QPr,"speech-encoder-decoder"),QPr.forEach(t),aze=r(i4e," \u2014 "),K$=n(i4e,"A",{href:!0});var WPr=s(K$);nze=r(WPr,"SpeechEncoderDecoderConfig"),WPr.forEach(t),sze=r(i4e," (Speech Encoder decoder model)"),i4e.forEach(t),lze=i(L),xm=n(L,"LI",{});var d4e=s(xm);hee=n(d4e,"STRONG",{});var HPr=s(hee);ize=r(HPr,"speech_to_text"),HPr.forEach(t),dze=r(d4e," \u2014 "),Z$=n(d4e,"A",{href:!0});var UPr=s(Z$);cze=r(UPr,"Speech2TextConfig"),UPr.forEach(t),fze=r(d4e," (Speech2Text model)"),d4e.forEach(t),mze=i(L),$m=n(L,"LI",{});var c4e=s($m);pee=n(c4e,"STRONG",{});var JPr=s(pee);gze=r(JPr,"speech_to_text_2"),JPr.forEach(t),hze=r(c4e," \u2014 "),ek=n(c4e,"A",{href:!0});var YPr=s(ek);pze=r(YPr,"Speech2Text2Config"),YPr.forEach(t),uze=r(c4e," (Speech2Text2 model)"),c4e.forEach(t),_ze=i(L),km=n(L,"LI",{});var f4e=s(km);uee=n(f4e,"STRONG",{});var KPr=s(uee);bze=r(KPr,"splinter"),KPr.forEach(t),vze=r(f4e," \u2014 "),ok=n(f4e,"A",{href:!0});var ZPr=s(ok);Fze=r(ZPr,"SplinterConfig"),ZPr.forEach(t),Tze=r(f4e," (Splinter model)"),f4e.forEach(t),Mze=i(L),Sm=n(L,"LI",{});var m4e=s(Sm);_ee=n(m4e,"STRONG",{});var eIr=s(_ee);Eze=r(eIr,"squeezebert"),eIr.forEach(t),Cze=r(m4e," \u2014 "),rk=n(m4e,"A",{href:!0});var oIr=s(rk);wze=r(oIr,"SqueezeBertConfig"),oIr.forEach(t),Aze=r(m4e," (SqueezeBERT model)"),m4e.forEach(t),yze=i(L),Rm=n(L,"LI",{});var g4e=s(Rm);bee=n(g4e,"STRONG",{});var rIr=s(bee);Lze=r(rIr,"swin"),rIr.forEach(t),xze=r(g4e," \u2014 "),tk=n(g4e,"A",{href:!0});var tIr=s(tk);$ze=r(tIr,"SwinConfig"),tIr.forEach(t),kze=r(g4e," (Swin model)"),g4e.forEach(t),Sze=i(L),Bm=n(L,"LI",{});var h4e=s(Bm);vee=n(h4e,"STRONG",{});var aIr=s(vee);Rze=r(aIr,"t5"),aIr.forEach(t),Bze=r(h4e," \u2014 "),ak=n(h4e,"A",{href:!0});var nIr=s(ak);Pze=r(nIr,"T5Config"),nIr.forEach(t),Ize=r(h4e," (T5 model)"),h4e.forEach(t),qze=i(L),Pm=n(L,"LI",{});var p4e=s(Pm);Fee=n(p4e,"STRONG",{});var sIr=s(Fee);Nze=r(sIr,"tapas"),sIr.forEach(t),jze=r(p4e," \u2014 "),nk=n(p4e,"A",{href:!0});var lIr=s(nk);Dze=r(lIr,"TapasConfig"),lIr.forEach(t),Gze=r(p4e," (TAPAS model)"),p4e.forEach(t),Oze=i(L),Im=n(L,"LI",{});var u4e=s(Im);Tee=n(u4e,"STRONG",{});var iIr=s(Tee);Vze=r(iIr,"tapex"),iIr.forEach(t),Xze=r(u4e," \u2014 "),sk=n(u4e,"A",{href:!0});var dIr=s(sk);zze=r(dIr,"BartConfig"),dIr.forEach(t),Qze=r(u4e," (TAPEX model)"),u4e.forEach(t),Wze=i(L),qm=n(L,"LI",{});var _4e=s(qm);Mee=n(_4e,"STRONG",{});var cIr=s(Mee);Hze=r(cIr,"transfo-xl"),cIr.forEach(t),Uze=r(_4e," \u2014 "),lk=n(_4e,"A",{href:!0});var fIr=s(lk);Jze=r(fIr,"TransfoXLConfig"),fIr.forEach(t),Yze=r(_4e," (Transformer-XL model)"),_4e.forEach(t),Kze=i(L),Nm=n(L,"LI",{});var b4e=s(Nm);Eee=n(b4e,"STRONG",{});var mIr=s(Eee);Zze=r(mIr,"trocr"),mIr.forEach(t),eQe=r(b4e," \u2014 "),ik=n(b4e,"A",{href:!0});var gIr=s(ik);oQe=r(gIr,"TrOCRConfig"),gIr.forEach(t),rQe=r(b4e," (TrOCR model)"),b4e.forEach(t),tQe=i(L),jm=n(L,"LI",{});var v4e=s(jm);Cee=n(v4e,"STRONG",{});var hIr=s(Cee);aQe=r(hIr,"unispeech"),hIr.forEach(t),nQe=r(v4e," \u2014 "),dk=n(v4e,"A",{href:!0});var pIr=s(dk);sQe=r(pIr,"UniSpeechConfig"),pIr.forEach(t),lQe=r(v4e," (UniSpeech model)"),v4e.forEach(t),iQe=i(L),Dm=n(L,"LI",{});var F4e=s(Dm);wee=n(F4e,"STRONG",{});var uIr=s(wee);dQe=r(uIr,"unispeech-sat"),uIr.forEach(t),cQe=r(F4e," \u2014 "),ck=n(F4e,"A",{href:!0});var _Ir=s(ck);fQe=r(_Ir,"UniSpeechSatConfig"),_Ir.forEach(t),mQe=r(F4e," (UniSpeechSat model)"),F4e.forEach(t),gQe=i(L),Gm=n(L,"LI",{});var T4e=s(Gm);Aee=n(T4e,"STRONG",{});var bIr=s(Aee);hQe=r(bIr,"van"),bIr.forEach(t),pQe=r(T4e," \u2014 "),fk=n(T4e,"A",{href:!0});var vIr=s(fk);uQe=r(vIr,"VanConfig"),vIr.forEach(t),_Qe=r(T4e," (VAN model)"),T4e.forEach(t),bQe=i(L),Om=n(L,"LI",{});var M4e=s(Om);yee=n(M4e,"STRONG",{});var FIr=s(yee);vQe=r(FIr,"vilt"),FIr.forEach(t),FQe=r(M4e," \u2014 "),mk=n(M4e,"A",{href:!0});var TIr=s(mk);TQe=r(TIr,"ViltConfig"),TIr.forEach(t),MQe=r(M4e," (ViLT model)"),M4e.forEach(t),EQe=i(L),Vm=n(L,"LI",{});var E4e=s(Vm);Lee=n(E4e,"STRONG",{});var MIr=s(Lee);CQe=r(MIr,"vision-encoder-decoder"),MIr.forEach(t),wQe=r(E4e," \u2014 "),gk=n(E4e,"A",{href:!0});var EIr=s(gk);AQe=r(EIr,"VisionEncoderDecoderConfig"),EIr.forEach(t),yQe=r(E4e," (Vision Encoder decoder model)"),E4e.forEach(t),LQe=i(L),Xm=n(L,"LI",{});var C4e=s(Xm);xee=n(C4e,"STRONG",{});var CIr=s(xee);xQe=r(CIr,"vision-text-dual-encoder"),CIr.forEach(t),$Qe=r(C4e," \u2014 "),hk=n(C4e,"A",{href:!0});var wIr=s(hk);kQe=r(wIr,"VisionTextDualEncoderConfig"),wIr.forEach(t),SQe=r(C4e," (VisionTextDualEncoder model)"),C4e.forEach(t),RQe=i(L),zm=n(L,"LI",{});var w4e=s(zm);$ee=n(w4e,"STRONG",{});var AIr=s($ee);BQe=r(AIr,"visual_bert"),AIr.forEach(t),PQe=r(w4e," \u2014 "),pk=n(w4e,"A",{href:!0});var yIr=s(pk);IQe=r(yIr,"VisualBertConfig"),yIr.forEach(t),qQe=r(w4e," (VisualBert model)"),w4e.forEach(t),NQe=i(L),Qm=n(L,"LI",{});var A4e=s(Qm);kee=n(A4e,"STRONG",{});var LIr=s(kee);jQe=r(LIr,"vit"),LIr.forEach(t),DQe=r(A4e," \u2014 "),uk=n(A4e,"A",{href:!0});var xIr=s(uk);GQe=r(xIr,"ViTConfig"),xIr.forEach(t),OQe=r(A4e," (ViT model)"),A4e.forEach(t),VQe=i(L),Wm=n(L,"LI",{});var y4e=s(Wm);See=n(y4e,"STRONG",{});var $Ir=s(See);XQe=r($Ir,"vit_mae"),$Ir.forEach(t),zQe=r(y4e," \u2014 "),_k=n(y4e,"A",{href:!0});var kIr=s(_k);QQe=r(kIr,"ViTMAEConfig"),kIr.forEach(t),WQe=r(y4e," (ViTMAE model)"),y4e.forEach(t),HQe=i(L),Hm=n(L,"LI",{});var L4e=s(Hm);Ree=n(L4e,"STRONG",{});var SIr=s(Ree);UQe=r(SIr,"wav2vec2"),SIr.forEach(t),JQe=r(L4e," \u2014 "),bk=n(L4e,"A",{href:!0});var RIr=s(bk);YQe=r(RIr,"Wav2Vec2Config"),RIr.forEach(t),KQe=r(L4e," (Wav2Vec2 model)"),L4e.forEach(t),ZQe=i(L),Um=n(L,"LI",{});var x4e=s(Um);Bee=n(x4e,"STRONG",{});var BIr=s(Bee);eWe=r(BIr,"wavlm"),BIr.forEach(t),oWe=r(x4e," \u2014 "),vk=n(x4e,"A",{href:!0});var PIr=s(vk);rWe=r(PIr,"WavLMConfig"),PIr.forEach(t),tWe=r(x4e," (WavLM model)"),x4e.forEach(t),aWe=i(L),Jm=n(L,"LI",{});var $4e=s(Jm);Pee=n($4e,"STRONG",{});var IIr=s(Pee);nWe=r(IIr,"xglm"),IIr.forEach(t),sWe=r($4e," \u2014 "),Fk=n($4e,"A",{href:!0});var qIr=s(Fk);lWe=r(qIr,"XGLMConfig"),qIr.forEach(t),iWe=r($4e," (XGLM model)"),$4e.forEach(t),dWe=i(L),Ym=n(L,"LI",{});var k4e=s(Ym);Iee=n(k4e,"STRONG",{});var NIr=s(Iee);cWe=r(NIr,"xlm"),NIr.forEach(t),fWe=r(k4e," \u2014 "),Tk=n(k4e,"A",{href:!0});var jIr=s(Tk);mWe=r(jIr,"XLMConfig"),jIr.forEach(t),gWe=r(k4e," (XLM model)"),k4e.forEach(t),hWe=i(L),Km=n(L,"LI",{});var S4e=s(Km);qee=n(S4e,"STRONG",{});var DIr=s(qee);pWe=r(DIr,"xlm-prophetnet"),DIr.forEach(t),uWe=r(S4e," \u2014 "),Mk=n(S4e,"A",{href:!0});var GIr=s(Mk);_We=r(GIr,"XLMProphetNetConfig"),GIr.forEach(t),bWe=r(S4e," (XLMProphetNet model)"),S4e.forEach(t),vWe=i(L),Zm=n(L,"LI",{});var R4e=s(Zm);Nee=n(R4e,"STRONG",{});var OIr=s(Nee);FWe=r(OIr,"xlm-roberta"),OIr.forEach(t),TWe=r(R4e," \u2014 "),Ek=n(R4e,"A",{href:!0});var VIr=s(Ek);MWe=r(VIr,"XLMRobertaConfig"),VIr.forEach(t),EWe=r(R4e," (XLM-RoBERTa model)"),R4e.forEach(t),CWe=i(L),eg=n(L,"LI",{});var B4e=s(eg);jee=n(B4e,"STRONG",{});var XIr=s(jee);wWe=r(XIr,"xlm-roberta-xl"),XIr.forEach(t),AWe=r(B4e," \u2014 "),Ck=n(B4e,"A",{href:!0});var zIr=s(Ck);yWe=r(zIr,"XLMRobertaXLConfig"),zIr.forEach(t),LWe=r(B4e," (XLM-RoBERTa-XL model)"),B4e.forEach(t),xWe=i(L),og=n(L,"LI",{});var P4e=s(og);Dee=n(P4e,"STRONG",{});var QIr=s(Dee);$We=r(QIr,"xlnet"),QIr.forEach(t),kWe=r(P4e," \u2014 "),wk=n(P4e,"A",{href:!0});var WIr=s(wk);SWe=r(WIr,"XLNetConfig"),WIr.forEach(t),RWe=r(P4e," (XLNet model)"),P4e.forEach(t),BWe=i(L),rg=n(L,"LI",{});var I4e=s(rg);Gee=n(I4e,"STRONG",{});var HIr=s(Gee);PWe=r(HIr,"yoso"),HIr.forEach(t),IWe=r(I4e," \u2014 "),Ak=n(I4e,"A",{href:!0});var UIr=s(Ak);qWe=r(UIr,"YosoConfig"),UIr.forEach(t),NWe=r(I4e," (YOSO model)"),I4e.forEach(t),L.forEach(t),jWe=i(Yr),T(tg.$$.fragment,Yr),Yr.forEach(t),DWe=i(Jr),ag=n(Jr,"DIV",{class:!0});var qPe=s(ag);T(MA.$$.fragment,qPe),GWe=i(qPe),Oee=n(qPe,"P",{});var JIr=s(Oee);OWe=r(JIr,"Register a new configuration for this class."),JIr.forEach(t),qPe.forEach(t),Jr.forEach(t),ORe=i(f),fi=n(f,"H2",{class:!0});var NPe=s(fi);ng=n(NPe,"A",{id:!0,class:!0,href:!0});var YIr=s(ng);Vee=n(YIr,"SPAN",{});var KIr=s(Vee);T(EA.$$.fragment,KIr),KIr.forEach(t),YIr.forEach(t),VWe=i(NPe),Xee=n(NPe,"SPAN",{});var ZIr=s(Xee);XWe=r(ZIr,"AutoTokenizer"),ZIr.forEach(t),NPe.forEach(t),VRe=i(f),Co=n(f,"DIV",{class:!0});var ks=s(Co);T(CA.$$.fragment,ks),zWe=i(ks),wA=n(ks,"P",{});var jPe=s(wA);QWe=r(jPe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),yk=n(jPe,"A",{href:!0});var eqr=s(yk);WWe=r(eqr,"AutoTokenizer.from_pretrained()"),eqr.forEach(t),HWe=r(jPe," class method."),jPe.forEach(t),UWe=i(ks),AA=n(ks,"P",{});var DPe=s(AA);JWe=r(DPe,"This class cannot be instantiated directly using "),zee=n(DPe,"CODE",{});var oqr=s(zee);YWe=r(oqr,"__init__()"),oqr.forEach(t),KWe=r(DPe," (throws an error)."),DPe.forEach(t),ZWe=i(ks),Mr=n(ks,"DIV",{class:!0});var Ss=s(Mr);T(yA.$$.fragment,Ss),eHe=i(Ss),Qee=n(Ss,"P",{});var rqr=s(Qee);oHe=r(rqr,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),rqr.forEach(t),rHe=i(Ss),Ta=n(Ss,"P",{});var b3=s(Ta);tHe=r(b3,"The tokenizer class to instantiate is selected based on the "),Wee=n(b3,"CODE",{});var tqr=s(Wee);aHe=r(tqr,"model_type"),tqr.forEach(t),nHe=r(b3,` property of the config object (either
passed as an argument or loaded from `),Hee=n(b3,"CODE",{});var aqr=s(Hee);sHe=r(aqr,"pretrained_model_name_or_path"),aqr.forEach(t),lHe=r(b3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Uee=n(b3,"CODE",{});var nqr=s(Uee);iHe=r(nqr,"pretrained_model_name_or_path"),nqr.forEach(t),dHe=r(b3,":"),b3.forEach(t),cHe=i(Ss),k=n(Ss,"UL",{});var S=s(k);yn=n(S,"LI",{});var M7=s(yn);Jee=n(M7,"STRONG",{});var sqr=s(Jee);fHe=r(sqr,"albert"),sqr.forEach(t),mHe=r(M7," \u2014 "),Lk=n(M7,"A",{href:!0});var lqr=s(Lk);gHe=r(lqr,"AlbertTokenizer"),lqr.forEach(t),hHe=r(M7," or "),xk=n(M7,"A",{href:!0});var iqr=s(xk);pHe=r(iqr,"AlbertTokenizerFast"),iqr.forEach(t),uHe=r(M7," (ALBERT model)"),M7.forEach(t),_He=i(S),Ln=n(S,"LI",{});var E7=s(Ln);Yee=n(E7,"STRONG",{});var dqr=s(Yee);bHe=r(dqr,"bart"),dqr.forEach(t),vHe=r(E7," \u2014 "),$k=n(E7,"A",{href:!0});var cqr=s($k);FHe=r(cqr,"BartTokenizer"),cqr.forEach(t),THe=r(E7," or "),kk=n(E7,"A",{href:!0});var fqr=s(kk);MHe=r(fqr,"BartTokenizerFast"),fqr.forEach(t),EHe=r(E7," (BART model)"),E7.forEach(t),CHe=i(S),xn=n(S,"LI",{});var C7=s(xn);Kee=n(C7,"STRONG",{});var mqr=s(Kee);wHe=r(mqr,"barthez"),mqr.forEach(t),AHe=r(C7," \u2014 "),Sk=n(C7,"A",{href:!0});var gqr=s(Sk);yHe=r(gqr,"BarthezTokenizer"),gqr.forEach(t),LHe=r(C7," or "),Rk=n(C7,"A",{href:!0});var hqr=s(Rk);xHe=r(hqr,"BarthezTokenizerFast"),hqr.forEach(t),$He=r(C7," (BARThez model)"),C7.forEach(t),kHe=i(S),sg=n(S,"LI",{});var q4e=s(sg);Zee=n(q4e,"STRONG",{});var pqr=s(Zee);SHe=r(pqr,"bartpho"),pqr.forEach(t),RHe=r(q4e," \u2014 "),Bk=n(q4e,"A",{href:!0});var uqr=s(Bk);BHe=r(uqr,"BartphoTokenizer"),uqr.forEach(t),PHe=r(q4e," (BARTpho model)"),q4e.forEach(t),IHe=i(S),$n=n(S,"LI",{});var w7=s($n);eoe=n(w7,"STRONG",{});var _qr=s(eoe);qHe=r(_qr,"bert"),_qr.forEach(t),NHe=r(w7," \u2014 "),Pk=n(w7,"A",{href:!0});var bqr=s(Pk);jHe=r(bqr,"BertTokenizer"),bqr.forEach(t),DHe=r(w7," or "),Ik=n(w7,"A",{href:!0});var vqr=s(Ik);GHe=r(vqr,"BertTokenizerFast"),vqr.forEach(t),OHe=r(w7," (BERT model)"),w7.forEach(t),VHe=i(S),lg=n(S,"LI",{});var N4e=s(lg);ooe=n(N4e,"STRONG",{});var Fqr=s(ooe);XHe=r(Fqr,"bert-generation"),Fqr.forEach(t),zHe=r(N4e," \u2014 "),qk=n(N4e,"A",{href:!0});var Tqr=s(qk);QHe=r(Tqr,"BertGenerationTokenizer"),Tqr.forEach(t),WHe=r(N4e," (Bert Generation model)"),N4e.forEach(t),HHe=i(S),ig=n(S,"LI",{});var j4e=s(ig);roe=n(j4e,"STRONG",{});var Mqr=s(roe);UHe=r(Mqr,"bert-japanese"),Mqr.forEach(t),JHe=r(j4e," \u2014 "),Nk=n(j4e,"A",{href:!0});var Eqr=s(Nk);YHe=r(Eqr,"BertJapaneseTokenizer"),Eqr.forEach(t),KHe=r(j4e," (BertJapanese model)"),j4e.forEach(t),ZHe=i(S),dg=n(S,"LI",{});var D4e=s(dg);toe=n(D4e,"STRONG",{});var Cqr=s(toe);eUe=r(Cqr,"bertweet"),Cqr.forEach(t),oUe=r(D4e," \u2014 "),jk=n(D4e,"A",{href:!0});var wqr=s(jk);rUe=r(wqr,"BertweetTokenizer"),wqr.forEach(t),tUe=r(D4e," (Bertweet model)"),D4e.forEach(t),aUe=i(S),kn=n(S,"LI",{});var A7=s(kn);aoe=n(A7,"STRONG",{});var Aqr=s(aoe);nUe=r(Aqr,"big_bird"),Aqr.forEach(t),sUe=r(A7," \u2014 "),Dk=n(A7,"A",{href:!0});var yqr=s(Dk);lUe=r(yqr,"BigBirdTokenizer"),yqr.forEach(t),iUe=r(A7," or "),Gk=n(A7,"A",{href:!0});var Lqr=s(Gk);dUe=r(Lqr,"BigBirdTokenizerFast"),Lqr.forEach(t),cUe=r(A7," (BigBird model)"),A7.forEach(t),fUe=i(S),Sn=n(S,"LI",{});var y7=s(Sn);noe=n(y7,"STRONG",{});var xqr=s(noe);mUe=r(xqr,"bigbird_pegasus"),xqr.forEach(t),gUe=r(y7," \u2014 "),Ok=n(y7,"A",{href:!0});var $qr=s(Ok);hUe=r($qr,"PegasusTokenizer"),$qr.forEach(t),pUe=r(y7," or "),Vk=n(y7,"A",{href:!0});var kqr=s(Vk);uUe=r(kqr,"PegasusTokenizerFast"),kqr.forEach(t),_Ue=r(y7," (BigBirdPegasus model)"),y7.forEach(t),bUe=i(S),Rn=n(S,"LI",{});var L7=s(Rn);soe=n(L7,"STRONG",{});var Sqr=s(soe);vUe=r(Sqr,"blenderbot"),Sqr.forEach(t),FUe=r(L7," \u2014 "),Xk=n(L7,"A",{href:!0});var Rqr=s(Xk);TUe=r(Rqr,"BlenderbotTokenizer"),Rqr.forEach(t),MUe=r(L7," or "),zk=n(L7,"A",{href:!0});var Bqr=s(zk);EUe=r(Bqr,"BlenderbotTokenizerFast"),Bqr.forEach(t),CUe=r(L7," (Blenderbot model)"),L7.forEach(t),wUe=i(S),cg=n(S,"LI",{});var G4e=s(cg);loe=n(G4e,"STRONG",{});var Pqr=s(loe);AUe=r(Pqr,"blenderbot-small"),Pqr.forEach(t),yUe=r(G4e," \u2014 "),Qk=n(G4e,"A",{href:!0});var Iqr=s(Qk);LUe=r(Iqr,"BlenderbotSmallTokenizer"),Iqr.forEach(t),xUe=r(G4e," (BlenderbotSmall model)"),G4e.forEach(t),$Ue=i(S),fg=n(S,"LI",{});var O4e=s(fg);ioe=n(O4e,"STRONG",{});var qqr=s(ioe);kUe=r(qqr,"byt5"),qqr.forEach(t),SUe=r(O4e," \u2014 "),Wk=n(O4e,"A",{href:!0});var Nqr=s(Wk);RUe=r(Nqr,"ByT5Tokenizer"),Nqr.forEach(t),BUe=r(O4e," (ByT5 model)"),O4e.forEach(t),PUe=i(S),Bn=n(S,"LI",{});var x7=s(Bn);doe=n(x7,"STRONG",{});var jqr=s(doe);IUe=r(jqr,"camembert"),jqr.forEach(t),qUe=r(x7," \u2014 "),Hk=n(x7,"A",{href:!0});var Dqr=s(Hk);NUe=r(Dqr,"CamembertTokenizer"),Dqr.forEach(t),jUe=r(x7," or "),Uk=n(x7,"A",{href:!0});var Gqr=s(Uk);DUe=r(Gqr,"CamembertTokenizerFast"),Gqr.forEach(t),GUe=r(x7," (CamemBERT model)"),x7.forEach(t),OUe=i(S),mg=n(S,"LI",{});var V4e=s(mg);coe=n(V4e,"STRONG",{});var Oqr=s(coe);VUe=r(Oqr,"canine"),Oqr.forEach(t),XUe=r(V4e," \u2014 "),Jk=n(V4e,"A",{href:!0});var Vqr=s(Jk);zUe=r(Vqr,"CanineTokenizer"),Vqr.forEach(t),QUe=r(V4e," (Canine model)"),V4e.forEach(t),WUe=i(S),Pn=n(S,"LI",{});var $7=s(Pn);foe=n($7,"STRONG",{});var Xqr=s(foe);HUe=r(Xqr,"clip"),Xqr.forEach(t),UUe=r($7," \u2014 "),Yk=n($7,"A",{href:!0});var zqr=s(Yk);JUe=r(zqr,"CLIPTokenizer"),zqr.forEach(t),YUe=r($7," or "),Kk=n($7,"A",{href:!0});var Qqr=s(Kk);KUe=r(Qqr,"CLIPTokenizerFast"),Qqr.forEach(t),ZUe=r($7," (CLIP model)"),$7.forEach(t),eJe=i(S),In=n(S,"LI",{});var k7=s(In);moe=n(k7,"STRONG",{});var Wqr=s(moe);oJe=r(Wqr,"convbert"),Wqr.forEach(t),rJe=r(k7," \u2014 "),Zk=n(k7,"A",{href:!0});var Hqr=s(Zk);tJe=r(Hqr,"ConvBertTokenizer"),Hqr.forEach(t),aJe=r(k7," or "),eS=n(k7,"A",{href:!0});var Uqr=s(eS);nJe=r(Uqr,"ConvBertTokenizerFast"),Uqr.forEach(t),sJe=r(k7," (ConvBERT model)"),k7.forEach(t),lJe=i(S),qn=n(S,"LI",{});var S7=s(qn);goe=n(S7,"STRONG",{});var Jqr=s(goe);iJe=r(Jqr,"cpm"),Jqr.forEach(t),dJe=r(S7," \u2014 "),oS=n(S7,"A",{href:!0});var Yqr=s(oS);cJe=r(Yqr,"CpmTokenizer"),Yqr.forEach(t),fJe=r(S7," or "),hoe=n(S7,"CODE",{});var Kqr=s(hoe);mJe=r(Kqr,"CpmTokenizerFast"),Kqr.forEach(t),gJe=r(S7," (CPM model)"),S7.forEach(t),hJe=i(S),gg=n(S,"LI",{});var X4e=s(gg);poe=n(X4e,"STRONG",{});var Zqr=s(poe);pJe=r(Zqr,"ctrl"),Zqr.forEach(t),uJe=r(X4e," \u2014 "),rS=n(X4e,"A",{href:!0});var eNr=s(rS);_Je=r(eNr,"CTRLTokenizer"),eNr.forEach(t),bJe=r(X4e," (CTRL model)"),X4e.forEach(t),vJe=i(S),Nn=n(S,"LI",{});var R7=s(Nn);uoe=n(R7,"STRONG",{});var oNr=s(uoe);FJe=r(oNr,"data2vec-text"),oNr.forEach(t),TJe=r(R7," \u2014 "),tS=n(R7,"A",{href:!0});var rNr=s(tS);MJe=r(rNr,"RobertaTokenizer"),rNr.forEach(t),EJe=r(R7," or "),aS=n(R7,"A",{href:!0});var tNr=s(aS);CJe=r(tNr,"RobertaTokenizerFast"),tNr.forEach(t),wJe=r(R7," (Data2VecText model)"),R7.forEach(t),AJe=i(S),jn=n(S,"LI",{});var B7=s(jn);_oe=n(B7,"STRONG",{});var aNr=s(_oe);yJe=r(aNr,"deberta"),aNr.forEach(t),LJe=r(B7," \u2014 "),nS=n(B7,"A",{href:!0});var nNr=s(nS);xJe=r(nNr,"DebertaTokenizer"),nNr.forEach(t),$Je=r(B7," or "),sS=n(B7,"A",{href:!0});var sNr=s(sS);kJe=r(sNr,"DebertaTokenizerFast"),sNr.forEach(t),SJe=r(B7," (DeBERTa model)"),B7.forEach(t),RJe=i(S),Dn=n(S,"LI",{});var P7=s(Dn);boe=n(P7,"STRONG",{});var lNr=s(boe);BJe=r(lNr,"deberta-v2"),lNr.forEach(t),PJe=r(P7," \u2014 "),lS=n(P7,"A",{href:!0});var iNr=s(lS);IJe=r(iNr,"DebertaV2Tokenizer"),iNr.forEach(t),qJe=r(P7," or "),iS=n(P7,"A",{href:!0});var dNr=s(iS);NJe=r(dNr,"DebertaV2TokenizerFast"),dNr.forEach(t),jJe=r(P7," (DeBERTa-v2 model)"),P7.forEach(t),DJe=i(S),Gn=n(S,"LI",{});var I7=s(Gn);voe=n(I7,"STRONG",{});var cNr=s(voe);GJe=r(cNr,"distilbert"),cNr.forEach(t),OJe=r(I7," \u2014 "),dS=n(I7,"A",{href:!0});var fNr=s(dS);VJe=r(fNr,"DistilBertTokenizer"),fNr.forEach(t),XJe=r(I7," or "),cS=n(I7,"A",{href:!0});var mNr=s(cS);zJe=r(mNr,"DistilBertTokenizerFast"),mNr.forEach(t),QJe=r(I7," (DistilBERT model)"),I7.forEach(t),WJe=i(S),On=n(S,"LI",{});var q7=s(On);Foe=n(q7,"STRONG",{});var gNr=s(Foe);HJe=r(gNr,"dpr"),gNr.forEach(t),UJe=r(q7," \u2014 "),fS=n(q7,"A",{href:!0});var hNr=s(fS);JJe=r(hNr,"DPRQuestionEncoderTokenizer"),hNr.forEach(t),YJe=r(q7," or "),mS=n(q7,"A",{href:!0});var pNr=s(mS);KJe=r(pNr,"DPRQuestionEncoderTokenizerFast"),pNr.forEach(t),ZJe=r(q7," (DPR model)"),q7.forEach(t),eYe=i(S),Vn=n(S,"LI",{});var N7=s(Vn);Toe=n(N7,"STRONG",{});var uNr=s(Toe);oYe=r(uNr,"electra"),uNr.forEach(t),rYe=r(N7," \u2014 "),gS=n(N7,"A",{href:!0});var _Nr=s(gS);tYe=r(_Nr,"ElectraTokenizer"),_Nr.forEach(t),aYe=r(N7," or "),hS=n(N7,"A",{href:!0});var bNr=s(hS);nYe=r(bNr,"ElectraTokenizerFast"),bNr.forEach(t),sYe=r(N7," (ELECTRA model)"),N7.forEach(t),lYe=i(S),hg=n(S,"LI",{});var z4e=s(hg);Moe=n(z4e,"STRONG",{});var vNr=s(Moe);iYe=r(vNr,"flaubert"),vNr.forEach(t),dYe=r(z4e," \u2014 "),pS=n(z4e,"A",{href:!0});var FNr=s(pS);cYe=r(FNr,"FlaubertTokenizer"),FNr.forEach(t),fYe=r(z4e," (FlauBERT model)"),z4e.forEach(t),mYe=i(S),Xn=n(S,"LI",{});var j7=s(Xn);Eoe=n(j7,"STRONG",{});var TNr=s(Eoe);gYe=r(TNr,"fnet"),TNr.forEach(t),hYe=r(j7," \u2014 "),uS=n(j7,"A",{href:!0});var MNr=s(uS);pYe=r(MNr,"FNetTokenizer"),MNr.forEach(t),uYe=r(j7," or "),_S=n(j7,"A",{href:!0});var ENr=s(_S);_Ye=r(ENr,"FNetTokenizerFast"),ENr.forEach(t),bYe=r(j7," (FNet model)"),j7.forEach(t),vYe=i(S),pg=n(S,"LI",{});var Q4e=s(pg);Coe=n(Q4e,"STRONG",{});var CNr=s(Coe);FYe=r(CNr,"fsmt"),CNr.forEach(t),TYe=r(Q4e," \u2014 "),bS=n(Q4e,"A",{href:!0});var wNr=s(bS);MYe=r(wNr,"FSMTTokenizer"),wNr.forEach(t),EYe=r(Q4e," (FairSeq Machine-Translation model)"),Q4e.forEach(t),CYe=i(S),zn=n(S,"LI",{});var D7=s(zn);woe=n(D7,"STRONG",{});var ANr=s(woe);wYe=r(ANr,"funnel"),ANr.forEach(t),AYe=r(D7," \u2014 "),vS=n(D7,"A",{href:!0});var yNr=s(vS);yYe=r(yNr,"FunnelTokenizer"),yNr.forEach(t),LYe=r(D7," or "),FS=n(D7,"A",{href:!0});var LNr=s(FS);xYe=r(LNr,"FunnelTokenizerFast"),LNr.forEach(t),$Ye=r(D7," (Funnel Transformer model)"),D7.forEach(t),kYe=i(S),Qn=n(S,"LI",{});var G7=s(Qn);Aoe=n(G7,"STRONG",{});var xNr=s(Aoe);SYe=r(xNr,"gpt2"),xNr.forEach(t),RYe=r(G7," \u2014 "),TS=n(G7,"A",{href:!0});var $Nr=s(TS);BYe=r($Nr,"GPT2Tokenizer"),$Nr.forEach(t),PYe=r(G7," or "),MS=n(G7,"A",{href:!0});var kNr=s(MS);IYe=r(kNr,"GPT2TokenizerFast"),kNr.forEach(t),qYe=r(G7," (OpenAI GPT-2 model)"),G7.forEach(t),NYe=i(S),Wn=n(S,"LI",{});var O7=s(Wn);yoe=n(O7,"STRONG",{});var SNr=s(yoe);jYe=r(SNr,"gpt_neo"),SNr.forEach(t),DYe=r(O7," \u2014 "),ES=n(O7,"A",{href:!0});var RNr=s(ES);GYe=r(RNr,"GPT2Tokenizer"),RNr.forEach(t),OYe=r(O7," or "),CS=n(O7,"A",{href:!0});var BNr=s(CS);VYe=r(BNr,"GPT2TokenizerFast"),BNr.forEach(t),XYe=r(O7," (GPT Neo model)"),O7.forEach(t),zYe=i(S),Hn=n(S,"LI",{});var V7=s(Hn);Loe=n(V7,"STRONG",{});var PNr=s(Loe);QYe=r(PNr,"gptj"),PNr.forEach(t),WYe=r(V7," \u2014 "),wS=n(V7,"A",{href:!0});var INr=s(wS);HYe=r(INr,"GPT2Tokenizer"),INr.forEach(t),UYe=r(V7," or "),AS=n(V7,"A",{href:!0});var qNr=s(AS);JYe=r(qNr,"GPT2TokenizerFast"),qNr.forEach(t),YYe=r(V7," (GPT-J model)"),V7.forEach(t),KYe=i(S),Un=n(S,"LI",{});var X7=s(Un);xoe=n(X7,"STRONG",{});var NNr=s(xoe);ZYe=r(NNr,"herbert"),NNr.forEach(t),eKe=r(X7," \u2014 "),yS=n(X7,"A",{href:!0});var jNr=s(yS);oKe=r(jNr,"HerbertTokenizer"),jNr.forEach(t),rKe=r(X7," or "),LS=n(X7,"A",{href:!0});var DNr=s(LS);tKe=r(DNr,"HerbertTokenizerFast"),DNr.forEach(t),aKe=r(X7," (HerBERT model)"),X7.forEach(t),nKe=i(S),ug=n(S,"LI",{});var W4e=s(ug);$oe=n(W4e,"STRONG",{});var GNr=s($oe);sKe=r(GNr,"hubert"),GNr.forEach(t),lKe=r(W4e," \u2014 "),xS=n(W4e,"A",{href:!0});var ONr=s(xS);iKe=r(ONr,"Wav2Vec2CTCTokenizer"),ONr.forEach(t),dKe=r(W4e," (Hubert model)"),W4e.forEach(t),cKe=i(S),Jn=n(S,"LI",{});var z7=s(Jn);koe=n(z7,"STRONG",{});var VNr=s(koe);fKe=r(VNr,"ibert"),VNr.forEach(t),mKe=r(z7," \u2014 "),$S=n(z7,"A",{href:!0});var XNr=s($S);gKe=r(XNr,"RobertaTokenizer"),XNr.forEach(t),hKe=r(z7," or "),kS=n(z7,"A",{href:!0});var zNr=s(kS);pKe=r(zNr,"RobertaTokenizerFast"),zNr.forEach(t),uKe=r(z7," (I-BERT model)"),z7.forEach(t),_Ke=i(S),Yn=n(S,"LI",{});var Q7=s(Yn);Soe=n(Q7,"STRONG",{});var QNr=s(Soe);bKe=r(QNr,"layoutlm"),QNr.forEach(t),vKe=r(Q7," \u2014 "),SS=n(Q7,"A",{href:!0});var WNr=s(SS);FKe=r(WNr,"LayoutLMTokenizer"),WNr.forEach(t),TKe=r(Q7," or "),RS=n(Q7,"A",{href:!0});var HNr=s(RS);MKe=r(HNr,"LayoutLMTokenizerFast"),HNr.forEach(t),EKe=r(Q7," (LayoutLM model)"),Q7.forEach(t),CKe=i(S),Kn=n(S,"LI",{});var W7=s(Kn);Roe=n(W7,"STRONG",{});var UNr=s(Roe);wKe=r(UNr,"layoutlmv2"),UNr.forEach(t),AKe=r(W7," \u2014 "),BS=n(W7,"A",{href:!0});var JNr=s(BS);yKe=r(JNr,"LayoutLMv2Tokenizer"),JNr.forEach(t),LKe=r(W7," or "),PS=n(W7,"A",{href:!0});var YNr=s(PS);xKe=r(YNr,"LayoutLMv2TokenizerFast"),YNr.forEach(t),$Ke=r(W7," (LayoutLMv2 model)"),W7.forEach(t),kKe=i(S),Zn=n(S,"LI",{});var H7=s(Zn);Boe=n(H7,"STRONG",{});var KNr=s(Boe);SKe=r(KNr,"layoutxlm"),KNr.forEach(t),RKe=r(H7," \u2014 "),IS=n(H7,"A",{href:!0});var ZNr=s(IS);BKe=r(ZNr,"LayoutXLMTokenizer"),ZNr.forEach(t),PKe=r(H7," or "),qS=n(H7,"A",{href:!0});var ejr=s(qS);IKe=r(ejr,"LayoutXLMTokenizerFast"),ejr.forEach(t),qKe=r(H7," (LayoutXLM model)"),H7.forEach(t),NKe=i(S),es=n(S,"LI",{});var U7=s(es);Poe=n(U7,"STRONG",{});var ojr=s(Poe);jKe=r(ojr,"led"),ojr.forEach(t),DKe=r(U7," \u2014 "),NS=n(U7,"A",{href:!0});var rjr=s(NS);GKe=r(rjr,"LEDTokenizer"),rjr.forEach(t),OKe=r(U7," or "),jS=n(U7,"A",{href:!0});var tjr=s(jS);VKe=r(tjr,"LEDTokenizerFast"),tjr.forEach(t),XKe=r(U7," (LED model)"),U7.forEach(t),zKe=i(S),os=n(S,"LI",{});var J7=s(os);Ioe=n(J7,"STRONG",{});var ajr=s(Ioe);QKe=r(ajr,"longformer"),ajr.forEach(t),WKe=r(J7," \u2014 "),DS=n(J7,"A",{href:!0});var njr=s(DS);HKe=r(njr,"LongformerTokenizer"),njr.forEach(t),UKe=r(J7," or "),GS=n(J7,"A",{href:!0});var sjr=s(GS);JKe=r(sjr,"LongformerTokenizerFast"),sjr.forEach(t),YKe=r(J7," (Longformer model)"),J7.forEach(t),KKe=i(S),_g=n(S,"LI",{});var H4e=s(_g);qoe=n(H4e,"STRONG",{});var ljr=s(qoe);ZKe=r(ljr,"luke"),ljr.forEach(t),eZe=r(H4e," \u2014 "),OS=n(H4e,"A",{href:!0});var ijr=s(OS);oZe=r(ijr,"LukeTokenizer"),ijr.forEach(t),rZe=r(H4e," (LUKE model)"),H4e.forEach(t),tZe=i(S),rs=n(S,"LI",{});var Y7=s(rs);Noe=n(Y7,"STRONG",{});var djr=s(Noe);aZe=r(djr,"lxmert"),djr.forEach(t),nZe=r(Y7," \u2014 "),VS=n(Y7,"A",{href:!0});var cjr=s(VS);sZe=r(cjr,"LxmertTokenizer"),cjr.forEach(t),lZe=r(Y7," or "),XS=n(Y7,"A",{href:!0});var fjr=s(XS);iZe=r(fjr,"LxmertTokenizerFast"),fjr.forEach(t),dZe=r(Y7," (LXMERT model)"),Y7.forEach(t),cZe=i(S),bg=n(S,"LI",{});var U4e=s(bg);joe=n(U4e,"STRONG",{});var mjr=s(joe);fZe=r(mjr,"m2m_100"),mjr.forEach(t),mZe=r(U4e," \u2014 "),zS=n(U4e,"A",{href:!0});var gjr=s(zS);gZe=r(gjr,"M2M100Tokenizer"),gjr.forEach(t),hZe=r(U4e," (M2M100 model)"),U4e.forEach(t),pZe=i(S),vg=n(S,"LI",{});var J4e=s(vg);Doe=n(J4e,"STRONG",{});var hjr=s(Doe);uZe=r(hjr,"marian"),hjr.forEach(t),_Ze=r(J4e," \u2014 "),QS=n(J4e,"A",{href:!0});var pjr=s(QS);bZe=r(pjr,"MarianTokenizer"),pjr.forEach(t),vZe=r(J4e," (Marian model)"),J4e.forEach(t),FZe=i(S),ts=n(S,"LI",{});var K7=s(ts);Goe=n(K7,"STRONG",{});var ujr=s(Goe);TZe=r(ujr,"mbart"),ujr.forEach(t),MZe=r(K7," \u2014 "),WS=n(K7,"A",{href:!0});var _jr=s(WS);EZe=r(_jr,"MBartTokenizer"),_jr.forEach(t),CZe=r(K7," or "),HS=n(K7,"A",{href:!0});var bjr=s(HS);wZe=r(bjr,"MBartTokenizerFast"),bjr.forEach(t),AZe=r(K7," (mBART model)"),K7.forEach(t),yZe=i(S),as=n(S,"LI",{});var Z7=s(as);Ooe=n(Z7,"STRONG",{});var vjr=s(Ooe);LZe=r(vjr,"mbart50"),vjr.forEach(t),xZe=r(Z7," \u2014 "),US=n(Z7,"A",{href:!0});var Fjr=s(US);$Ze=r(Fjr,"MBart50Tokenizer"),Fjr.forEach(t),kZe=r(Z7," or "),JS=n(Z7,"A",{href:!0});var Tjr=s(JS);SZe=r(Tjr,"MBart50TokenizerFast"),Tjr.forEach(t),RZe=r(Z7," (mBART-50 model)"),Z7.forEach(t),BZe=i(S),ns=n(S,"LI",{});var ex=s(ns);Voe=n(ex,"STRONG",{});var Mjr=s(Voe);PZe=r(Mjr,"megatron-bert"),Mjr.forEach(t),IZe=r(ex," \u2014 "),YS=n(ex,"A",{href:!0});var Ejr=s(YS);qZe=r(Ejr,"BertTokenizer"),Ejr.forEach(t),NZe=r(ex," or "),KS=n(ex,"A",{href:!0});var Cjr=s(KS);jZe=r(Cjr,"BertTokenizerFast"),Cjr.forEach(t),DZe=r(ex," (MegatronBert model)"),ex.forEach(t),GZe=i(S),Fg=n(S,"LI",{});var Y4e=s(Fg);Xoe=n(Y4e,"STRONG",{});var wjr=s(Xoe);OZe=r(wjr,"mluke"),wjr.forEach(t),VZe=r(Y4e," \u2014 "),ZS=n(Y4e,"A",{href:!0});var Ajr=s(ZS);XZe=r(Ajr,"MLukeTokenizer"),Ajr.forEach(t),zZe=r(Y4e," (mLUKE model)"),Y4e.forEach(t),QZe=i(S),ss=n(S,"LI",{});var ox=s(ss);zoe=n(ox,"STRONG",{});var yjr=s(zoe);WZe=r(yjr,"mobilebert"),yjr.forEach(t),HZe=r(ox," \u2014 "),eR=n(ox,"A",{href:!0});var Ljr=s(eR);UZe=r(Ljr,"MobileBertTokenizer"),Ljr.forEach(t),JZe=r(ox," or "),oR=n(ox,"A",{href:!0});var xjr=s(oR);YZe=r(xjr,"MobileBertTokenizerFast"),xjr.forEach(t),KZe=r(ox," (MobileBERT model)"),ox.forEach(t),ZZe=i(S),ls=n(S,"LI",{});var rx=s(ls);Qoe=n(rx,"STRONG",{});var $jr=s(Qoe);eeo=r($jr,"mpnet"),$jr.forEach(t),oeo=r(rx," \u2014 "),rR=n(rx,"A",{href:!0});var kjr=s(rR);reo=r(kjr,"MPNetTokenizer"),kjr.forEach(t),teo=r(rx," or "),tR=n(rx,"A",{href:!0});var Sjr=s(tR);aeo=r(Sjr,"MPNetTokenizerFast"),Sjr.forEach(t),neo=r(rx," (MPNet model)"),rx.forEach(t),seo=i(S),is=n(S,"LI",{});var tx=s(is);Woe=n(tx,"STRONG",{});var Rjr=s(Woe);leo=r(Rjr,"mt5"),Rjr.forEach(t),ieo=r(tx," \u2014 "),aR=n(tx,"A",{href:!0});var Bjr=s(aR);deo=r(Bjr,"MT5Tokenizer"),Bjr.forEach(t),ceo=r(tx," or "),nR=n(tx,"A",{href:!0});var Pjr=s(nR);feo=r(Pjr,"MT5TokenizerFast"),Pjr.forEach(t),meo=r(tx," (mT5 model)"),tx.forEach(t),geo=i(S),ds=n(S,"LI",{});var ax=s(ds);Hoe=n(ax,"STRONG",{});var Ijr=s(Hoe);heo=r(Ijr,"nystromformer"),Ijr.forEach(t),peo=r(ax," \u2014 "),sR=n(ax,"A",{href:!0});var qjr=s(sR);ueo=r(qjr,"AlbertTokenizer"),qjr.forEach(t),_eo=r(ax," or "),lR=n(ax,"A",{href:!0});var Njr=s(lR);beo=r(Njr,"AlbertTokenizerFast"),Njr.forEach(t),veo=r(ax," (Nystromformer model)"),ax.forEach(t),Feo=i(S),cs=n(S,"LI",{});var nx=s(cs);Uoe=n(nx,"STRONG",{});var jjr=s(Uoe);Teo=r(jjr,"openai-gpt"),jjr.forEach(t),Meo=r(nx," \u2014 "),iR=n(nx,"A",{href:!0});var Djr=s(iR);Eeo=r(Djr,"OpenAIGPTTokenizer"),Djr.forEach(t),Ceo=r(nx," or "),dR=n(nx,"A",{href:!0});var Gjr=s(dR);weo=r(Gjr,"OpenAIGPTTokenizerFast"),Gjr.forEach(t),Aeo=r(nx," (OpenAI GPT model)"),nx.forEach(t),yeo=i(S),fs=n(S,"LI",{});var sx=s(fs);Joe=n(sx,"STRONG",{});var Ojr=s(Joe);Leo=r(Ojr,"pegasus"),Ojr.forEach(t),xeo=r(sx," \u2014 "),cR=n(sx,"A",{href:!0});var Vjr=s(cR);$eo=r(Vjr,"PegasusTokenizer"),Vjr.forEach(t),keo=r(sx," or "),fR=n(sx,"A",{href:!0});var Xjr=s(fR);Seo=r(Xjr,"PegasusTokenizerFast"),Xjr.forEach(t),Reo=r(sx," (Pegasus model)"),sx.forEach(t),Beo=i(S),Tg=n(S,"LI",{});var K4e=s(Tg);Yoe=n(K4e,"STRONG",{});var zjr=s(Yoe);Peo=r(zjr,"perceiver"),zjr.forEach(t),Ieo=r(K4e," \u2014 "),mR=n(K4e,"A",{href:!0});var Qjr=s(mR);qeo=r(Qjr,"PerceiverTokenizer"),Qjr.forEach(t),Neo=r(K4e," (Perceiver model)"),K4e.forEach(t),jeo=i(S),Mg=n(S,"LI",{});var Z4e=s(Mg);Koe=n(Z4e,"STRONG",{});var Wjr=s(Koe);Deo=r(Wjr,"phobert"),Wjr.forEach(t),Geo=r(Z4e," \u2014 "),gR=n(Z4e,"A",{href:!0});var Hjr=s(gR);Oeo=r(Hjr,"PhobertTokenizer"),Hjr.forEach(t),Veo=r(Z4e," (PhoBERT model)"),Z4e.forEach(t),Xeo=i(S),Eg=n(S,"LI",{});var eEe=s(Eg);Zoe=n(eEe,"STRONG",{});var Ujr=s(Zoe);zeo=r(Ujr,"plbart"),Ujr.forEach(t),Qeo=r(eEe," \u2014 "),hR=n(eEe,"A",{href:!0});var Jjr=s(hR);Weo=r(Jjr,"PLBartTokenizer"),Jjr.forEach(t),Heo=r(eEe," (PLBart model)"),eEe.forEach(t),Ueo=i(S),Cg=n(S,"LI",{});var oEe=s(Cg);ere=n(oEe,"STRONG",{});var Yjr=s(ere);Jeo=r(Yjr,"prophetnet"),Yjr.forEach(t),Yeo=r(oEe," \u2014 "),pR=n(oEe,"A",{href:!0});var Kjr=s(pR);Keo=r(Kjr,"ProphetNetTokenizer"),Kjr.forEach(t),Zeo=r(oEe," (ProphetNet model)"),oEe.forEach(t),eoo=i(S),ms=n(S,"LI",{});var lx=s(ms);ore=n(lx,"STRONG",{});var Zjr=s(ore);ooo=r(Zjr,"qdqbert"),Zjr.forEach(t),roo=r(lx," \u2014 "),uR=n(lx,"A",{href:!0});var eDr=s(uR);too=r(eDr,"BertTokenizer"),eDr.forEach(t),aoo=r(lx," or "),_R=n(lx,"A",{href:!0});var oDr=s(_R);noo=r(oDr,"BertTokenizerFast"),oDr.forEach(t),soo=r(lx," (QDQBert model)"),lx.forEach(t),loo=i(S),wg=n(S,"LI",{});var rEe=s(wg);rre=n(rEe,"STRONG",{});var rDr=s(rre);ioo=r(rDr,"rag"),rDr.forEach(t),doo=r(rEe," \u2014 "),bR=n(rEe,"A",{href:!0});var tDr=s(bR);coo=r(tDr,"RagTokenizer"),tDr.forEach(t),foo=r(rEe," (RAG model)"),rEe.forEach(t),moo=i(S),gs=n(S,"LI",{});var ix=s(gs);tre=n(ix,"STRONG",{});var aDr=s(tre);goo=r(aDr,"realm"),aDr.forEach(t),hoo=r(ix," \u2014 "),vR=n(ix,"A",{href:!0});var nDr=s(vR);poo=r(nDr,"RealmTokenizer"),nDr.forEach(t),uoo=r(ix," or "),FR=n(ix,"A",{href:!0});var sDr=s(FR);_oo=r(sDr,"RealmTokenizerFast"),sDr.forEach(t),boo=r(ix," (Realm model)"),ix.forEach(t),voo=i(S),hs=n(S,"LI",{});var dx=s(hs);are=n(dx,"STRONG",{});var lDr=s(are);Foo=r(lDr,"reformer"),lDr.forEach(t),Too=r(dx," \u2014 "),TR=n(dx,"A",{href:!0});var iDr=s(TR);Moo=r(iDr,"ReformerTokenizer"),iDr.forEach(t),Eoo=r(dx," or "),MR=n(dx,"A",{href:!0});var dDr=s(MR);Coo=r(dDr,"ReformerTokenizerFast"),dDr.forEach(t),woo=r(dx," (Reformer model)"),dx.forEach(t),Aoo=i(S),ps=n(S,"LI",{});var cx=s(ps);nre=n(cx,"STRONG",{});var cDr=s(nre);yoo=r(cDr,"rembert"),cDr.forEach(t),Loo=r(cx," \u2014 "),ER=n(cx,"A",{href:!0});var fDr=s(ER);xoo=r(fDr,"RemBertTokenizer"),fDr.forEach(t),$oo=r(cx," or "),CR=n(cx,"A",{href:!0});var mDr=s(CR);koo=r(mDr,"RemBertTokenizerFast"),mDr.forEach(t),Soo=r(cx," (RemBERT model)"),cx.forEach(t),Roo=i(S),us=n(S,"LI",{});var fx=s(us);sre=n(fx,"STRONG",{});var gDr=s(sre);Boo=r(gDr,"retribert"),gDr.forEach(t),Poo=r(fx," \u2014 "),wR=n(fx,"A",{href:!0});var hDr=s(wR);Ioo=r(hDr,"RetriBertTokenizer"),hDr.forEach(t),qoo=r(fx," or "),AR=n(fx,"A",{href:!0});var pDr=s(AR);Noo=r(pDr,"RetriBertTokenizerFast"),pDr.forEach(t),joo=r(fx," (RetriBERT model)"),fx.forEach(t),Doo=i(S),_s=n(S,"LI",{});var mx=s(_s);lre=n(mx,"STRONG",{});var uDr=s(lre);Goo=r(uDr,"roberta"),uDr.forEach(t),Ooo=r(mx," \u2014 "),yR=n(mx,"A",{href:!0});var _Dr=s(yR);Voo=r(_Dr,"RobertaTokenizer"),_Dr.forEach(t),Xoo=r(mx," or "),LR=n(mx,"A",{href:!0});var bDr=s(LR);zoo=r(bDr,"RobertaTokenizerFast"),bDr.forEach(t),Qoo=r(mx," (RoBERTa model)"),mx.forEach(t),Woo=i(S),bs=n(S,"LI",{});var gx=s(bs);ire=n(gx,"STRONG",{});var vDr=s(ire);Hoo=r(vDr,"roformer"),vDr.forEach(t),Uoo=r(gx," \u2014 "),xR=n(gx,"A",{href:!0});var FDr=s(xR);Joo=r(FDr,"RoFormerTokenizer"),FDr.forEach(t),Yoo=r(gx," or "),$R=n(gx,"A",{href:!0});var TDr=s($R);Koo=r(TDr,"RoFormerTokenizerFast"),TDr.forEach(t),Zoo=r(gx," (RoFormer model)"),gx.forEach(t),ero=i(S),Ag=n(S,"LI",{});var tEe=s(Ag);dre=n(tEe,"STRONG",{});var MDr=s(dre);oro=r(MDr,"speech_to_text"),MDr.forEach(t),rro=r(tEe," \u2014 "),kR=n(tEe,"A",{href:!0});var EDr=s(kR);tro=r(EDr,"Speech2TextTokenizer"),EDr.forEach(t),aro=r(tEe," (Speech2Text model)"),tEe.forEach(t),nro=i(S),yg=n(S,"LI",{});var aEe=s(yg);cre=n(aEe,"STRONG",{});var CDr=s(cre);sro=r(CDr,"speech_to_text_2"),CDr.forEach(t),lro=r(aEe," \u2014 "),SR=n(aEe,"A",{href:!0});var wDr=s(SR);iro=r(wDr,"Speech2Text2Tokenizer"),wDr.forEach(t),dro=r(aEe," (Speech2Text2 model)"),aEe.forEach(t),cro=i(S),vs=n(S,"LI",{});var hx=s(vs);fre=n(hx,"STRONG",{});var ADr=s(fre);fro=r(ADr,"splinter"),ADr.forEach(t),mro=r(hx," \u2014 "),RR=n(hx,"A",{href:!0});var yDr=s(RR);gro=r(yDr,"SplinterTokenizer"),yDr.forEach(t),hro=r(hx," or "),BR=n(hx,"A",{href:!0});var LDr=s(BR);pro=r(LDr,"SplinterTokenizerFast"),LDr.forEach(t),uro=r(hx," (Splinter model)"),hx.forEach(t),_ro=i(S),Fs=n(S,"LI",{});var px=s(Fs);mre=n(px,"STRONG",{});var xDr=s(mre);bro=r(xDr,"squeezebert"),xDr.forEach(t),vro=r(px," \u2014 "),PR=n(px,"A",{href:!0});var $Dr=s(PR);Fro=r($Dr,"SqueezeBertTokenizer"),$Dr.forEach(t),Tro=r(px," or "),IR=n(px,"A",{href:!0});var kDr=s(IR);Mro=r(kDr,"SqueezeBertTokenizerFast"),kDr.forEach(t),Ero=r(px," (SqueezeBERT model)"),px.forEach(t),Cro=i(S),Ts=n(S,"LI",{});var ux=s(Ts);gre=n(ux,"STRONG",{});var SDr=s(gre);wro=r(SDr,"t5"),SDr.forEach(t),Aro=r(ux," \u2014 "),qR=n(ux,"A",{href:!0});var RDr=s(qR);yro=r(RDr,"T5Tokenizer"),RDr.forEach(t),Lro=r(ux," or "),NR=n(ux,"A",{href:!0});var BDr=s(NR);xro=r(BDr,"T5TokenizerFast"),BDr.forEach(t),$ro=r(ux," (T5 model)"),ux.forEach(t),kro=i(S),Lg=n(S,"LI",{});var nEe=s(Lg);hre=n(nEe,"STRONG",{});var PDr=s(hre);Sro=r(PDr,"tapas"),PDr.forEach(t),Rro=r(nEe," \u2014 "),jR=n(nEe,"A",{href:!0});var IDr=s(jR);Bro=r(IDr,"TapasTokenizer"),IDr.forEach(t),Pro=r(nEe," (TAPAS model)"),nEe.forEach(t),Iro=i(S),xg=n(S,"LI",{});var sEe=s(xg);pre=n(sEe,"STRONG",{});var qDr=s(pre);qro=r(qDr,"tapex"),qDr.forEach(t),Nro=r(sEe," \u2014 "),DR=n(sEe,"A",{href:!0});var NDr=s(DR);jro=r(NDr,"TapexTokenizer"),NDr.forEach(t),Dro=r(sEe," (TAPEX model)"),sEe.forEach(t),Gro=i(S),$g=n(S,"LI",{});var lEe=s($g);ure=n(lEe,"STRONG",{});var jDr=s(ure);Oro=r(jDr,"transfo-xl"),jDr.forEach(t),Vro=r(lEe," \u2014 "),GR=n(lEe,"A",{href:!0});var DDr=s(GR);Xro=r(DDr,"TransfoXLTokenizer"),DDr.forEach(t),zro=r(lEe," (Transformer-XL model)"),lEe.forEach(t),Qro=i(S),Ms=n(S,"LI",{});var _x=s(Ms);_re=n(_x,"STRONG",{});var GDr=s(_re);Wro=r(GDr,"visual_bert"),GDr.forEach(t),Hro=r(_x," \u2014 "),OR=n(_x,"A",{href:!0});var ODr=s(OR);Uro=r(ODr,"BertTokenizer"),ODr.forEach(t),Jro=r(_x," or "),VR=n(_x,"A",{href:!0});var VDr=s(VR);Yro=r(VDr,"BertTokenizerFast"),VDr.forEach(t),Kro=r(_x," (VisualBert model)"),_x.forEach(t),Zro=i(S),kg=n(S,"LI",{});var iEe=s(kg);bre=n(iEe,"STRONG",{});var XDr=s(bre);eto=r(XDr,"wav2vec2"),XDr.forEach(t),oto=r(iEe," \u2014 "),XR=n(iEe,"A",{href:!0});var zDr=s(XR);rto=r(zDr,"Wav2Vec2CTCTokenizer"),zDr.forEach(t),tto=r(iEe," (Wav2Vec2 model)"),iEe.forEach(t),ato=i(S),Sg=n(S,"LI",{});var dEe=s(Sg);vre=n(dEe,"STRONG",{});var QDr=s(vre);nto=r(QDr,"wav2vec2_phoneme"),QDr.forEach(t),sto=r(dEe," \u2014 "),zR=n(dEe,"A",{href:!0});var WDr=s(zR);lto=r(WDr,"Wav2Vec2PhonemeCTCTokenizer"),WDr.forEach(t),ito=r(dEe," (Wav2Vec2Phoneme model)"),dEe.forEach(t),dto=i(S),Es=n(S,"LI",{});var bx=s(Es);Fre=n(bx,"STRONG",{});var HDr=s(Fre);cto=r(HDr,"xglm"),HDr.forEach(t),fto=r(bx," \u2014 "),QR=n(bx,"A",{href:!0});var UDr=s(QR);mto=r(UDr,"XGLMTokenizer"),UDr.forEach(t),gto=r(bx," or "),WR=n(bx,"A",{href:!0});var JDr=s(WR);hto=r(JDr,"XGLMTokenizerFast"),JDr.forEach(t),pto=r(bx," (XGLM model)"),bx.forEach(t),uto=i(S),Rg=n(S,"LI",{});var cEe=s(Rg);Tre=n(cEe,"STRONG",{});var YDr=s(Tre);_to=r(YDr,"xlm"),YDr.forEach(t),bto=r(cEe," \u2014 "),HR=n(cEe,"A",{href:!0});var KDr=s(HR);vto=r(KDr,"XLMTokenizer"),KDr.forEach(t),Fto=r(cEe," (XLM model)"),cEe.forEach(t),Tto=i(S),Bg=n(S,"LI",{});var fEe=s(Bg);Mre=n(fEe,"STRONG",{});var ZDr=s(Mre);Mto=r(ZDr,"xlm-prophetnet"),ZDr.forEach(t),Eto=r(fEe," \u2014 "),UR=n(fEe,"A",{href:!0});var eGr=s(UR);Cto=r(eGr,"XLMProphetNetTokenizer"),eGr.forEach(t),wto=r(fEe," (XLMProphetNet model)"),fEe.forEach(t),Ato=i(S),Cs=n(S,"LI",{});var vx=s(Cs);Ere=n(vx,"STRONG",{});var oGr=s(Ere);yto=r(oGr,"xlm-roberta"),oGr.forEach(t),Lto=r(vx," \u2014 "),JR=n(vx,"A",{href:!0});var rGr=s(JR);xto=r(rGr,"XLMRobertaTokenizer"),rGr.forEach(t),$to=r(vx," or "),YR=n(vx,"A",{href:!0});var tGr=s(YR);kto=r(tGr,"XLMRobertaTokenizerFast"),tGr.forEach(t),Sto=r(vx," (XLM-RoBERTa model)"),vx.forEach(t),Rto=i(S),ws=n(S,"LI",{});var Fx=s(ws);Cre=n(Fx,"STRONG",{});var aGr=s(Cre);Bto=r(aGr,"xlm-roberta-xl"),aGr.forEach(t),Pto=r(Fx," \u2014 "),KR=n(Fx,"A",{href:!0});var nGr=s(KR);Ito=r(nGr,"RobertaTokenizer"),nGr.forEach(t),qto=r(Fx," or "),ZR=n(Fx,"A",{href:!0});var sGr=s(ZR);Nto=r(sGr,"RobertaTokenizerFast"),sGr.forEach(t),jto=r(Fx," (XLM-RoBERTa-XL model)"),Fx.forEach(t),Dto=i(S),As=n(S,"LI",{});var Tx=s(As);wre=n(Tx,"STRONG",{});var lGr=s(wre);Gto=r(lGr,"xlnet"),lGr.forEach(t),Oto=r(Tx," \u2014 "),eB=n(Tx,"A",{href:!0});var iGr=s(eB);Vto=r(iGr,"XLNetTokenizer"),iGr.forEach(t),Xto=r(Tx," or "),oB=n(Tx,"A",{href:!0});var dGr=s(oB);zto=r(dGr,"XLNetTokenizerFast"),dGr.forEach(t),Qto=r(Tx," (XLNet model)"),Tx.forEach(t),Wto=i(S),ys=n(S,"LI",{});var Mx=s(ys);Are=n(Mx,"STRONG",{});var cGr=s(Are);Hto=r(cGr,"yoso"),cGr.forEach(t),Uto=r(Mx," \u2014 "),rB=n(Mx,"A",{href:!0});var fGr=s(rB);Jto=r(fGr,"AlbertTokenizer"),fGr.forEach(t),Yto=r(Mx," or "),tB=n(Mx,"A",{href:!0});var mGr=s(tB);Kto=r(mGr,"AlbertTokenizerFast"),mGr.forEach(t),Zto=r(Mx," (YOSO model)"),Mx.forEach(t),S.forEach(t),eao=i(Ss),T(Pg.$$.fragment,Ss),Ss.forEach(t),oao=i(ks),Ig=n(ks,"DIV",{class:!0});var GPe=s(Ig);T(LA.$$.fragment,GPe),rao=i(GPe),yre=n(GPe,"P",{});var gGr=s(yre);tao=r(gGr,"Register a new tokenizer in this mapping."),gGr.forEach(t),GPe.forEach(t),ks.forEach(t),XRe=i(f),mi=n(f,"H2",{class:!0});var OPe=s(mi);qg=n(OPe,"A",{id:!0,class:!0,href:!0});var hGr=s(qg);Lre=n(hGr,"SPAN",{});var pGr=s(Lre);T(xA.$$.fragment,pGr),pGr.forEach(t),hGr.forEach(t),aao=i(OPe),xre=n(OPe,"SPAN",{});var uGr=s(xre);nao=r(uGr,"AutoFeatureExtractor"),uGr.forEach(t),OPe.forEach(t),zRe=i(f),wo=n(f,"DIV",{class:!0});var Rs=s(wo);T($A.$$.fragment,Rs),sao=i(Rs),kA=n(Rs,"P",{});var VPe=s(kA);lao=r(VPe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),aB=n(VPe,"A",{href:!0});var _Gr=s(aB);iao=r(_Gr,"AutoFeatureExtractor.from_pretrained()"),_Gr.forEach(t),dao=r(VPe," class method."),VPe.forEach(t),cao=i(Rs),SA=n(Rs,"P",{});var XPe=s(SA);fao=r(XPe,"This class cannot be instantiated directly using "),$re=n(XPe,"CODE",{});var bGr=s($re);mao=r(bGr,"__init__()"),bGr.forEach(t),gao=r(XPe," (throws an error)."),XPe.forEach(t),hao=i(Rs),ze=n(Rs,"DIV",{class:!0});var Ht=s(ze);T(RA.$$.fragment,Ht),pao=i(Ht),kre=n(Ht,"P",{});var vGr=s(kre);uao=r(vGr,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),vGr.forEach(t),_ao=i(Ht),Ma=n(Ht,"P",{});var v3=s(Ma);bao=r(v3,"The feature extractor class to instantiate is selected based on the "),Sre=n(v3,"CODE",{});var FGr=s(Sre);vao=r(FGr,"model_type"),FGr.forEach(t),Fao=r(v3,` property of the config object
(either passed as an argument or loaded from `),Rre=n(v3,"CODE",{});var TGr=s(Rre);Tao=r(TGr,"pretrained_model_name_or_path"),TGr.forEach(t),Mao=r(v3,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Bre=n(v3,"CODE",{});var MGr=s(Bre);Eao=r(MGr,"pretrained_model_name_or_path"),MGr.forEach(t),Cao=r(v3,":"),v3.forEach(t),wao=i(Ht),ae=n(Ht,"UL",{});var se=s(ae);Ng=n(se,"LI",{});var mEe=s(Ng);Pre=n(mEe,"STRONG",{});var EGr=s(Pre);Aao=r(EGr,"beit"),EGr.forEach(t),yao=r(mEe," \u2014 "),nB=n(mEe,"A",{href:!0});var CGr=s(nB);Lao=r(CGr,"BeitFeatureExtractor"),CGr.forEach(t),xao=r(mEe," (BEiT model)"),mEe.forEach(t),$ao=i(se),jg=n(se,"LI",{});var gEe=s(jg);Ire=n(gEe,"STRONG",{});var wGr=s(Ire);kao=r(wGr,"clip"),wGr.forEach(t),Sao=r(gEe," \u2014 "),sB=n(gEe,"A",{href:!0});var AGr=s(sB);Rao=r(AGr,"CLIPFeatureExtractor"),AGr.forEach(t),Bao=r(gEe," (CLIP model)"),gEe.forEach(t),Pao=i(se),Dg=n(se,"LI",{});var hEe=s(Dg);qre=n(hEe,"STRONG",{});var yGr=s(qre);Iao=r(yGr,"convnext"),yGr.forEach(t),qao=r(hEe," \u2014 "),lB=n(hEe,"A",{href:!0});var LGr=s(lB);Nao=r(LGr,"ConvNextFeatureExtractor"),LGr.forEach(t),jao=r(hEe," (ConvNext model)"),hEe.forEach(t),Dao=i(se),Gg=n(se,"LI",{});var pEe=s(Gg);Nre=n(pEe,"STRONG",{});var xGr=s(Nre);Gao=r(xGr,"data2vec-audio"),xGr.forEach(t),Oao=r(pEe," \u2014 "),iB=n(pEe,"A",{href:!0});var $Gr=s(iB);Vao=r($Gr,"Wav2Vec2FeatureExtractor"),$Gr.forEach(t),Xao=r(pEe," (Data2VecAudio model)"),pEe.forEach(t),zao=i(se),Og=n(se,"LI",{});var uEe=s(Og);jre=n(uEe,"STRONG",{});var kGr=s(jre);Qao=r(kGr,"data2vec-vision"),kGr.forEach(t),Wao=r(uEe," \u2014 "),dB=n(uEe,"A",{href:!0});var SGr=s(dB);Hao=r(SGr,"BeitFeatureExtractor"),SGr.forEach(t),Uao=r(uEe," (Data2VecVision model)"),uEe.forEach(t),Jao=i(se),Vg=n(se,"LI",{});var _Ee=s(Vg);Dre=n(_Ee,"STRONG",{});var RGr=s(Dre);Yao=r(RGr,"deit"),RGr.forEach(t),Kao=r(_Ee," \u2014 "),cB=n(_Ee,"A",{href:!0});var BGr=s(cB);Zao=r(BGr,"DeiTFeatureExtractor"),BGr.forEach(t),eno=r(_Ee," (DeiT model)"),_Ee.forEach(t),ono=i(se),Xg=n(se,"LI",{});var bEe=s(Xg);Gre=n(bEe,"STRONG",{});var PGr=s(Gre);rno=r(PGr,"detr"),PGr.forEach(t),tno=r(bEe," \u2014 "),fB=n(bEe,"A",{href:!0});var IGr=s(fB);ano=r(IGr,"DetrFeatureExtractor"),IGr.forEach(t),nno=r(bEe," (DETR model)"),bEe.forEach(t),sno=i(se),zg=n(se,"LI",{});var vEe=s(zg);Ore=n(vEe,"STRONG",{});var qGr=s(Ore);lno=r(qGr,"dpt"),qGr.forEach(t),ino=r(vEe," \u2014 "),mB=n(vEe,"A",{href:!0});var NGr=s(mB);dno=r(NGr,"DPTFeatureExtractor"),NGr.forEach(t),cno=r(vEe," (DPT model)"),vEe.forEach(t),fno=i(se),Qg=n(se,"LI",{});var FEe=s(Qg);Vre=n(FEe,"STRONG",{});var jGr=s(Vre);mno=r(jGr,"glpn"),jGr.forEach(t),gno=r(FEe," \u2014 "),gB=n(FEe,"A",{href:!0});var DGr=s(gB);hno=r(DGr,"GLPNFeatureExtractor"),DGr.forEach(t),pno=r(FEe," (GLPN model)"),FEe.forEach(t),uno=i(se),Wg=n(se,"LI",{});var TEe=s(Wg);Xre=n(TEe,"STRONG",{});var GGr=s(Xre);_no=r(GGr,"hubert"),GGr.forEach(t),bno=r(TEe," \u2014 "),hB=n(TEe,"A",{href:!0});var OGr=s(hB);vno=r(OGr,"Wav2Vec2FeatureExtractor"),OGr.forEach(t),Fno=r(TEe," (Hubert model)"),TEe.forEach(t),Tno=i(se),Hg=n(se,"LI",{});var MEe=s(Hg);zre=n(MEe,"STRONG",{});var VGr=s(zre);Mno=r(VGr,"layoutlmv2"),VGr.forEach(t),Eno=r(MEe," \u2014 "),pB=n(MEe,"A",{href:!0});var XGr=s(pB);Cno=r(XGr,"LayoutLMv2FeatureExtractor"),XGr.forEach(t),wno=r(MEe," (LayoutLMv2 model)"),MEe.forEach(t),Ano=i(se),Ug=n(se,"LI",{});var EEe=s(Ug);Qre=n(EEe,"STRONG",{});var zGr=s(Qre);yno=r(zGr,"maskformer"),zGr.forEach(t),Lno=r(EEe," \u2014 "),uB=n(EEe,"A",{href:!0});var QGr=s(uB);xno=r(QGr,"MaskFormerFeatureExtractor"),QGr.forEach(t),$no=r(EEe," (MaskFormer model)"),EEe.forEach(t),kno=i(se),Jg=n(se,"LI",{});var CEe=s(Jg);Wre=n(CEe,"STRONG",{});var WGr=s(Wre);Sno=r(WGr,"perceiver"),WGr.forEach(t),Rno=r(CEe," \u2014 "),_B=n(CEe,"A",{href:!0});var HGr=s(_B);Bno=r(HGr,"PerceiverFeatureExtractor"),HGr.forEach(t),Pno=r(CEe," (Perceiver model)"),CEe.forEach(t),Ino=i(se),Yg=n(se,"LI",{});var wEe=s(Yg);Hre=n(wEe,"STRONG",{});var UGr=s(Hre);qno=r(UGr,"poolformer"),UGr.forEach(t),Nno=r(wEe," \u2014 "),bB=n(wEe,"A",{href:!0});var JGr=s(bB);jno=r(JGr,"PoolFormerFeatureExtractor"),JGr.forEach(t),Dno=r(wEe," (PoolFormer model)"),wEe.forEach(t),Gno=i(se),Kg=n(se,"LI",{});var AEe=s(Kg);Ure=n(AEe,"STRONG",{});var YGr=s(Ure);Ono=r(YGr,"regnet"),YGr.forEach(t),Vno=r(AEe," \u2014 "),vB=n(AEe,"A",{href:!0});var KGr=s(vB);Xno=r(KGr,"ConvNextFeatureExtractor"),KGr.forEach(t),zno=r(AEe," (RegNet model)"),AEe.forEach(t),Qno=i(se),Zg=n(se,"LI",{});var yEe=s(Zg);Jre=n(yEe,"STRONG",{});var ZGr=s(Jre);Wno=r(ZGr,"resnet"),ZGr.forEach(t),Hno=r(yEe," \u2014 "),FB=n(yEe,"A",{href:!0});var eOr=s(FB);Uno=r(eOr,"ConvNextFeatureExtractor"),eOr.forEach(t),Jno=r(yEe," (ResNet model)"),yEe.forEach(t),Yno=i(se),eh=n(se,"LI",{});var LEe=s(eh);Yre=n(LEe,"STRONG",{});var oOr=s(Yre);Kno=r(oOr,"segformer"),oOr.forEach(t),Zno=r(LEe," \u2014 "),TB=n(LEe,"A",{href:!0});var rOr=s(TB);eso=r(rOr,"SegformerFeatureExtractor"),rOr.forEach(t),oso=r(LEe," (SegFormer model)"),LEe.forEach(t),rso=i(se),oh=n(se,"LI",{});var xEe=s(oh);Kre=n(xEe,"STRONG",{});var tOr=s(Kre);tso=r(tOr,"speech_to_text"),tOr.forEach(t),aso=r(xEe," \u2014 "),MB=n(xEe,"A",{href:!0});var aOr=s(MB);nso=r(aOr,"Speech2TextFeatureExtractor"),aOr.forEach(t),sso=r(xEe," (Speech2Text model)"),xEe.forEach(t),lso=i(se),rh=n(se,"LI",{});var $Ee=s(rh);Zre=n($Ee,"STRONG",{});var nOr=s(Zre);iso=r(nOr,"swin"),nOr.forEach(t),dso=r($Ee," \u2014 "),EB=n($Ee,"A",{href:!0});var sOr=s(EB);cso=r(sOr,"ViTFeatureExtractor"),sOr.forEach(t),fso=r($Ee," (Swin model)"),$Ee.forEach(t),mso=i(se),th=n(se,"LI",{});var kEe=s(th);ete=n(kEe,"STRONG",{});var lOr=s(ete);gso=r(lOr,"van"),lOr.forEach(t),hso=r(kEe," \u2014 "),CB=n(kEe,"A",{href:!0});var iOr=s(CB);pso=r(iOr,"ConvNextFeatureExtractor"),iOr.forEach(t),uso=r(kEe," (VAN model)"),kEe.forEach(t),_so=i(se),ah=n(se,"LI",{});var SEe=s(ah);ote=n(SEe,"STRONG",{});var dOr=s(ote);bso=r(dOr,"vit"),dOr.forEach(t),vso=r(SEe," \u2014 "),wB=n(SEe,"A",{href:!0});var cOr=s(wB);Fso=r(cOr,"ViTFeatureExtractor"),cOr.forEach(t),Tso=r(SEe," (ViT model)"),SEe.forEach(t),Mso=i(se),nh=n(se,"LI",{});var REe=s(nh);rte=n(REe,"STRONG",{});var fOr=s(rte);Eso=r(fOr,"vit_mae"),fOr.forEach(t),Cso=r(REe," \u2014 "),AB=n(REe,"A",{href:!0});var mOr=s(AB);wso=r(mOr,"ViTFeatureExtractor"),mOr.forEach(t),Aso=r(REe," (ViTMAE model)"),REe.forEach(t),yso=i(se),sh=n(se,"LI",{});var BEe=s(sh);tte=n(BEe,"STRONG",{});var gOr=s(tte);Lso=r(gOr,"wav2vec2"),gOr.forEach(t),xso=r(BEe," \u2014 "),yB=n(BEe,"A",{href:!0});var hOr=s(yB);$so=r(hOr,"Wav2Vec2FeatureExtractor"),hOr.forEach(t),kso=r(BEe," (Wav2Vec2 model)"),BEe.forEach(t),se.forEach(t),Sso=i(Ht),T(lh.$$.fragment,Ht),Rso=i(Ht),T(ih.$$.fragment,Ht),Ht.forEach(t),Bso=i(Rs),dh=n(Rs,"DIV",{class:!0});var zPe=s(dh);T(BA.$$.fragment,zPe),Pso=i(zPe),ate=n(zPe,"P",{});var pOr=s(ate);Iso=r(pOr,"Register a new feature extractor for this class."),pOr.forEach(t),zPe.forEach(t),Rs.forEach(t),QRe=i(f),gi=n(f,"H2",{class:!0});var QPe=s(gi);ch=n(QPe,"A",{id:!0,class:!0,href:!0});var uOr=s(ch);nte=n(uOr,"SPAN",{});var _Or=s(nte);T(PA.$$.fragment,_Or),_Or.forEach(t),uOr.forEach(t),qso=i(QPe),ste=n(QPe,"SPAN",{});var bOr=s(ste);Nso=r(bOr,"AutoProcessor"),bOr.forEach(t),QPe.forEach(t),WRe=i(f),Ao=n(f,"DIV",{class:!0});var Bs=s(Ao);T(IA.$$.fragment,Bs),jso=i(Bs),qA=n(Bs,"P",{});var WPe=s(qA);Dso=r(WPe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),LB=n(WPe,"A",{href:!0});var vOr=s(LB);Gso=r(vOr,"AutoProcessor.from_pretrained()"),vOr.forEach(t),Oso=r(WPe," class method."),WPe.forEach(t),Vso=i(Bs),NA=n(Bs,"P",{});var HPe=s(NA);Xso=r(HPe,"This class cannot be instantiated directly using "),lte=n(HPe,"CODE",{});var FOr=s(lte);zso=r(FOr,"__init__()"),FOr.forEach(t),Qso=r(HPe," (throws an error)."),HPe.forEach(t),Wso=i(Bs),Qe=n(Bs,"DIV",{class:!0});var Ut=s(Qe);T(jA.$$.fragment,Ut),Hso=i(Ut),ite=n(Ut,"P",{});var TOr=s(ite);Uso=r(TOr,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),TOr.forEach(t),Jso=i(Ut),hi=n(Ut,"P",{});var HJ=s(hi);Yso=r(HJ,"The processor class to instantiate is selected based on the "),dte=n(HJ,"CODE",{});var MOr=s(dte);Kso=r(MOr,"model_type"),MOr.forEach(t),Zso=r(HJ,` property of the config object (either
passed as an argument or loaded from `),cte=n(HJ,"CODE",{});var EOr=s(cte);elo=r(EOr,"pretrained_model_name_or_path"),EOr.forEach(t),olo=r(HJ," if possible):"),HJ.forEach(t),rlo=i(Ut),be=n(Ut,"UL",{});var Fe=s(be);fh=n(Fe,"LI",{});var PEe=s(fh);fte=n(PEe,"STRONG",{});var COr=s(fte);tlo=r(COr,"clip"),COr.forEach(t),alo=r(PEe," \u2014 "),xB=n(PEe,"A",{href:!0});var wOr=s(xB);nlo=r(wOr,"CLIPProcessor"),wOr.forEach(t),slo=r(PEe," (CLIP model)"),PEe.forEach(t),llo=i(Fe),mh=n(Fe,"LI",{});var IEe=s(mh);mte=n(IEe,"STRONG",{});var AOr=s(mte);ilo=r(AOr,"layoutlmv2"),AOr.forEach(t),dlo=r(IEe," \u2014 "),$B=n(IEe,"A",{href:!0});var yOr=s($B);clo=r(yOr,"LayoutLMv2Processor"),yOr.forEach(t),flo=r(IEe," (LayoutLMv2 model)"),IEe.forEach(t),mlo=i(Fe),gh=n(Fe,"LI",{});var qEe=s(gh);gte=n(qEe,"STRONG",{});var LOr=s(gte);glo=r(LOr,"layoutxlm"),LOr.forEach(t),hlo=r(qEe," \u2014 "),kB=n(qEe,"A",{href:!0});var xOr=s(kB);plo=r(xOr,"LayoutXLMProcessor"),xOr.forEach(t),ulo=r(qEe," (LayoutXLM model)"),qEe.forEach(t),_lo=i(Fe),hh=n(Fe,"LI",{});var NEe=s(hh);hte=n(NEe,"STRONG",{});var $Or=s(hte);blo=r($Or,"sew"),$Or.forEach(t),vlo=r(NEe," \u2014 "),SB=n(NEe,"A",{href:!0});var kOr=s(SB);Flo=r(kOr,"Wav2Vec2Processor"),kOr.forEach(t),Tlo=r(NEe," (SEW model)"),NEe.forEach(t),Mlo=i(Fe),ph=n(Fe,"LI",{});var jEe=s(ph);pte=n(jEe,"STRONG",{});var SOr=s(pte);Elo=r(SOr,"sew-d"),SOr.forEach(t),Clo=r(jEe," \u2014 "),RB=n(jEe,"A",{href:!0});var ROr=s(RB);wlo=r(ROr,"Wav2Vec2Processor"),ROr.forEach(t),Alo=r(jEe," (SEW-D model)"),jEe.forEach(t),ylo=i(Fe),uh=n(Fe,"LI",{});var DEe=s(uh);ute=n(DEe,"STRONG",{});var BOr=s(ute);Llo=r(BOr,"speech_to_text"),BOr.forEach(t),xlo=r(DEe," \u2014 "),BB=n(DEe,"A",{href:!0});var POr=s(BB);$lo=r(POr,"Speech2TextProcessor"),POr.forEach(t),klo=r(DEe," (Speech2Text model)"),DEe.forEach(t),Slo=i(Fe),_h=n(Fe,"LI",{});var GEe=s(_h);_te=n(GEe,"STRONG",{});var IOr=s(_te);Rlo=r(IOr,"speech_to_text_2"),IOr.forEach(t),Blo=r(GEe," \u2014 "),PB=n(GEe,"A",{href:!0});var qOr=s(PB);Plo=r(qOr,"Speech2Text2Processor"),qOr.forEach(t),Ilo=r(GEe," (Speech2Text2 model)"),GEe.forEach(t),qlo=i(Fe),bh=n(Fe,"LI",{});var OEe=s(bh);bte=n(OEe,"STRONG",{});var NOr=s(bte);Nlo=r(NOr,"trocr"),NOr.forEach(t),jlo=r(OEe," \u2014 "),IB=n(OEe,"A",{href:!0});var jOr=s(IB);Dlo=r(jOr,"TrOCRProcessor"),jOr.forEach(t),Glo=r(OEe," (TrOCR model)"),OEe.forEach(t),Olo=i(Fe),vh=n(Fe,"LI",{});var VEe=s(vh);vte=n(VEe,"STRONG",{});var DOr=s(vte);Vlo=r(DOr,"unispeech"),DOr.forEach(t),Xlo=r(VEe," \u2014 "),qB=n(VEe,"A",{href:!0});var GOr=s(qB);zlo=r(GOr,"Wav2Vec2Processor"),GOr.forEach(t),Qlo=r(VEe," (UniSpeech model)"),VEe.forEach(t),Wlo=i(Fe),Fh=n(Fe,"LI",{});var XEe=s(Fh);Fte=n(XEe,"STRONG",{});var OOr=s(Fte);Hlo=r(OOr,"unispeech-sat"),OOr.forEach(t),Ulo=r(XEe," \u2014 "),NB=n(XEe,"A",{href:!0});var VOr=s(NB);Jlo=r(VOr,"Wav2Vec2Processor"),VOr.forEach(t),Ylo=r(XEe," (UniSpeechSat model)"),XEe.forEach(t),Klo=i(Fe),Th=n(Fe,"LI",{});var zEe=s(Th);Tte=n(zEe,"STRONG",{});var XOr=s(Tte);Zlo=r(XOr,"vilt"),XOr.forEach(t),eio=r(zEe," \u2014 "),jB=n(zEe,"A",{href:!0});var zOr=s(jB);oio=r(zOr,"ViltProcessor"),zOr.forEach(t),rio=r(zEe," (ViLT model)"),zEe.forEach(t),tio=i(Fe),Mh=n(Fe,"LI",{});var QEe=s(Mh);Mte=n(QEe,"STRONG",{});var QOr=s(Mte);aio=r(QOr,"vision-text-dual-encoder"),QOr.forEach(t),nio=r(QEe," \u2014 "),DB=n(QEe,"A",{href:!0});var WOr=s(DB);sio=r(WOr,"VisionTextDualEncoderProcessor"),WOr.forEach(t),lio=r(QEe," (VisionTextDualEncoder model)"),QEe.forEach(t),iio=i(Fe),Eh=n(Fe,"LI",{});var WEe=s(Eh);Ete=n(WEe,"STRONG",{});var HOr=s(Ete);dio=r(HOr,"wav2vec2"),HOr.forEach(t),cio=r(WEe," \u2014 "),GB=n(WEe,"A",{href:!0});var UOr=s(GB);fio=r(UOr,"Wav2Vec2Processor"),UOr.forEach(t),mio=r(WEe," (Wav2Vec2 model)"),WEe.forEach(t),gio=i(Fe),Ch=n(Fe,"LI",{});var HEe=s(Ch);Cte=n(HEe,"STRONG",{});var JOr=s(Cte);hio=r(JOr,"wavlm"),JOr.forEach(t),pio=r(HEe," \u2014 "),OB=n(HEe,"A",{href:!0});var YOr=s(OB);uio=r(YOr,"Wav2Vec2Processor"),YOr.forEach(t),_io=r(HEe," (WavLM model)"),HEe.forEach(t),Fe.forEach(t),bio=i(Ut),T(wh.$$.fragment,Ut),vio=i(Ut),T(Ah.$$.fragment,Ut),Ut.forEach(t),Fio=i(Bs),yh=n(Bs,"DIV",{class:!0});var UPe=s(yh);T(DA.$$.fragment,UPe),Tio=i(UPe),wte=n(UPe,"P",{});var KOr=s(wte);Mio=r(KOr,"Register a new processor for this class."),KOr.forEach(t),UPe.forEach(t),Bs.forEach(t),HRe=i(f),pi=n(f,"H2",{class:!0});var JPe=s(pi);Lh=n(JPe,"A",{id:!0,class:!0,href:!0});var ZOr=s(Lh);Ate=n(ZOr,"SPAN",{});var eVr=s(Ate);T(GA.$$.fragment,eVr),eVr.forEach(t),ZOr.forEach(t),Eio=i(JPe),yte=n(JPe,"SPAN",{});var oVr=s(yte);Cio=r(oVr,"AutoModel"),oVr.forEach(t),JPe.forEach(t),URe=i(f),yo=n(f,"DIV",{class:!0});var Ps=s(yo);T(OA.$$.fragment,Ps),wio=i(Ps),ui=n(Ps,"P",{});var UJ=s(ui);Aio=r(UJ,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),VB=n(UJ,"A",{href:!0});var rVr=s(VB);yio=r(rVr,"from_pretrained()"),rVr.forEach(t),Lio=r(UJ," class method or the "),XB=n(UJ,"A",{href:!0});var tVr=s(XB);xio=r(tVr,"from_config()"),tVr.forEach(t),$io=r(UJ,` class
method.`),UJ.forEach(t),kio=i(Ps),VA=n(Ps,"P",{});var YPe=s(VA);Sio=r(YPe,"This class cannot be instantiated directly using "),Lte=n(YPe,"CODE",{});var aVr=s(Lte);Rio=r(aVr,"__init__()"),aVr.forEach(t),Bio=r(YPe," (throws an error)."),YPe.forEach(t),Pio=i(Ps),Zr=n(Ps,"DIV",{class:!0});var F3=s(Zr);T(XA.$$.fragment,F3),Iio=i(F3),xte=n(F3,"P",{});var nVr=s(xte);qio=r(nVr,"Instantiates one of the base model classes of the library from a configuration."),nVr.forEach(t),Nio=i(F3),_i=n(F3,"P",{});var JJ=s(_i);jio=r(JJ,`Note:
Loading a model from its configuration file does `),$te=n(JJ,"STRONG",{});var sVr=s($te);Dio=r(sVr,"not"),sVr.forEach(t),Gio=r(JJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),zB=n(JJ,"A",{href:!0});var lVr=s(zB);Oio=r(lVr,"from_pretrained()"),lVr.forEach(t),Vio=r(JJ," to load the model weights."),JJ.forEach(t),Xio=i(F3),T(xh.$$.fragment,F3),F3.forEach(t),zio=i(Ps),We=n(Ps,"DIV",{class:!0});var Jt=s(We);T(zA.$$.fragment,Jt),Qio=i(Jt),kte=n(Jt,"P",{});var iVr=s(kte);Wio=r(iVr,"Instantiate one of the base model classes of the library from a pretrained model."),iVr.forEach(t),Hio=i(Jt),Ea=n(Jt,"P",{});var T3=s(Ea);Uio=r(T3,"The model class to instantiate is selected based on the "),Ste=n(T3,"CODE",{});var dVr=s(Ste);Jio=r(dVr,"model_type"),dVr.forEach(t),Yio=r(T3,` property of the config object (either
passed as an argument or loaded from `),Rte=n(T3,"CODE",{});var cVr=s(Rte);Kio=r(cVr,"pretrained_model_name_or_path"),cVr.forEach(t),Zio=r(T3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bte=n(T3,"CODE",{});var fVr=s(Bte);edo=r(fVr,"pretrained_model_name_or_path"),fVr.forEach(t),odo=r(T3,":"),T3.forEach(t),rdo=i(Jt),x=n(Jt,"UL",{});var $=s(x);$h=n($,"LI",{});var UEe=s($h);Pte=n(UEe,"STRONG",{});var mVr=s(Pte);tdo=r(mVr,"albert"),mVr.forEach(t),ado=r(UEe," \u2014 "),QB=n(UEe,"A",{href:!0});var gVr=s(QB);ndo=r(gVr,"AlbertModel"),gVr.forEach(t),sdo=r(UEe," (ALBERT model)"),UEe.forEach(t),ldo=i($),kh=n($,"LI",{});var JEe=s(kh);Ite=n(JEe,"STRONG",{});var hVr=s(Ite);ido=r(hVr,"bart"),hVr.forEach(t),ddo=r(JEe," \u2014 "),WB=n(JEe,"A",{href:!0});var pVr=s(WB);cdo=r(pVr,"BartModel"),pVr.forEach(t),fdo=r(JEe," (BART model)"),JEe.forEach(t),mdo=i($),Sh=n($,"LI",{});var YEe=s(Sh);qte=n(YEe,"STRONG",{});var uVr=s(qte);gdo=r(uVr,"beit"),uVr.forEach(t),hdo=r(YEe," \u2014 "),HB=n(YEe,"A",{href:!0});var _Vr=s(HB);pdo=r(_Vr,"BeitModel"),_Vr.forEach(t),udo=r(YEe," (BEiT model)"),YEe.forEach(t),_do=i($),Rh=n($,"LI",{});var KEe=s(Rh);Nte=n(KEe,"STRONG",{});var bVr=s(Nte);bdo=r(bVr,"bert"),bVr.forEach(t),vdo=r(KEe," \u2014 "),UB=n(KEe,"A",{href:!0});var vVr=s(UB);Fdo=r(vVr,"BertModel"),vVr.forEach(t),Tdo=r(KEe," (BERT model)"),KEe.forEach(t),Mdo=i($),Bh=n($,"LI",{});var ZEe=s(Bh);jte=n(ZEe,"STRONG",{});var FVr=s(jte);Edo=r(FVr,"bert-generation"),FVr.forEach(t),Cdo=r(ZEe," \u2014 "),JB=n(ZEe,"A",{href:!0});var TVr=s(JB);wdo=r(TVr,"BertGenerationEncoder"),TVr.forEach(t),Ado=r(ZEe," (Bert Generation model)"),ZEe.forEach(t),ydo=i($),Ph=n($,"LI",{});var eCe=s(Ph);Dte=n(eCe,"STRONG",{});var MVr=s(Dte);Ldo=r(MVr,"big_bird"),MVr.forEach(t),xdo=r(eCe," \u2014 "),YB=n(eCe,"A",{href:!0});var EVr=s(YB);$do=r(EVr,"BigBirdModel"),EVr.forEach(t),kdo=r(eCe," (BigBird model)"),eCe.forEach(t),Sdo=i($),Ih=n($,"LI",{});var oCe=s(Ih);Gte=n(oCe,"STRONG",{});var CVr=s(Gte);Rdo=r(CVr,"bigbird_pegasus"),CVr.forEach(t),Bdo=r(oCe," \u2014 "),KB=n(oCe,"A",{href:!0});var wVr=s(KB);Pdo=r(wVr,"BigBirdPegasusModel"),wVr.forEach(t),Ido=r(oCe," (BigBirdPegasus model)"),oCe.forEach(t),qdo=i($),qh=n($,"LI",{});var rCe=s(qh);Ote=n(rCe,"STRONG",{});var AVr=s(Ote);Ndo=r(AVr,"blenderbot"),AVr.forEach(t),jdo=r(rCe," \u2014 "),ZB=n(rCe,"A",{href:!0});var yVr=s(ZB);Ddo=r(yVr,"BlenderbotModel"),yVr.forEach(t),Gdo=r(rCe," (Blenderbot model)"),rCe.forEach(t),Odo=i($),Nh=n($,"LI",{});var tCe=s(Nh);Vte=n(tCe,"STRONG",{});var LVr=s(Vte);Vdo=r(LVr,"blenderbot-small"),LVr.forEach(t),Xdo=r(tCe," \u2014 "),eP=n(tCe,"A",{href:!0});var xVr=s(eP);zdo=r(xVr,"BlenderbotSmallModel"),xVr.forEach(t),Qdo=r(tCe," (BlenderbotSmall model)"),tCe.forEach(t),Wdo=i($),jh=n($,"LI",{});var aCe=s(jh);Xte=n(aCe,"STRONG",{});var $Vr=s(Xte);Hdo=r($Vr,"camembert"),$Vr.forEach(t),Udo=r(aCe," \u2014 "),oP=n(aCe,"A",{href:!0});var kVr=s(oP);Jdo=r(kVr,"CamembertModel"),kVr.forEach(t),Ydo=r(aCe," (CamemBERT model)"),aCe.forEach(t),Kdo=i($),Dh=n($,"LI",{});var nCe=s(Dh);zte=n(nCe,"STRONG",{});var SVr=s(zte);Zdo=r(SVr,"canine"),SVr.forEach(t),eco=r(nCe," \u2014 "),rP=n(nCe,"A",{href:!0});var RVr=s(rP);oco=r(RVr,"CanineModel"),RVr.forEach(t),rco=r(nCe," (Canine model)"),nCe.forEach(t),tco=i($),Gh=n($,"LI",{});var sCe=s(Gh);Qte=n(sCe,"STRONG",{});var BVr=s(Qte);aco=r(BVr,"clip"),BVr.forEach(t),nco=r(sCe," \u2014 "),tP=n(sCe,"A",{href:!0});var PVr=s(tP);sco=r(PVr,"CLIPModel"),PVr.forEach(t),lco=r(sCe," (CLIP model)"),sCe.forEach(t),ico=i($),Oh=n($,"LI",{});var lCe=s(Oh);Wte=n(lCe,"STRONG",{});var IVr=s(Wte);dco=r(IVr,"convbert"),IVr.forEach(t),cco=r(lCe," \u2014 "),aP=n(lCe,"A",{href:!0});var qVr=s(aP);fco=r(qVr,"ConvBertModel"),qVr.forEach(t),mco=r(lCe," (ConvBERT model)"),lCe.forEach(t),gco=i($),Vh=n($,"LI",{});var iCe=s(Vh);Hte=n(iCe,"STRONG",{});var NVr=s(Hte);hco=r(NVr,"convnext"),NVr.forEach(t),pco=r(iCe," \u2014 "),nP=n(iCe,"A",{href:!0});var jVr=s(nP);uco=r(jVr,"ConvNextModel"),jVr.forEach(t),_co=r(iCe," (ConvNext model)"),iCe.forEach(t),bco=i($),Xh=n($,"LI",{});var dCe=s(Xh);Ute=n(dCe,"STRONG",{});var DVr=s(Ute);vco=r(DVr,"ctrl"),DVr.forEach(t),Fco=r(dCe," \u2014 "),sP=n(dCe,"A",{href:!0});var GVr=s(sP);Tco=r(GVr,"CTRLModel"),GVr.forEach(t),Mco=r(dCe," (CTRL model)"),dCe.forEach(t),Eco=i($),zh=n($,"LI",{});var cCe=s(zh);Jte=n(cCe,"STRONG",{});var OVr=s(Jte);Cco=r(OVr,"data2vec-audio"),OVr.forEach(t),wco=r(cCe," \u2014 "),lP=n(cCe,"A",{href:!0});var VVr=s(lP);Aco=r(VVr,"Data2VecAudioModel"),VVr.forEach(t),yco=r(cCe," (Data2VecAudio model)"),cCe.forEach(t),Lco=i($),Qh=n($,"LI",{});var fCe=s(Qh);Yte=n(fCe,"STRONG",{});var XVr=s(Yte);xco=r(XVr,"data2vec-text"),XVr.forEach(t),$co=r(fCe," \u2014 "),iP=n(fCe,"A",{href:!0});var zVr=s(iP);kco=r(zVr,"Data2VecTextModel"),zVr.forEach(t),Sco=r(fCe," (Data2VecText model)"),fCe.forEach(t),Rco=i($),Wh=n($,"LI",{});var mCe=s(Wh);Kte=n(mCe,"STRONG",{});var QVr=s(Kte);Bco=r(QVr,"data2vec-vision"),QVr.forEach(t),Pco=r(mCe," \u2014 "),dP=n(mCe,"A",{href:!0});var WVr=s(dP);Ico=r(WVr,"Data2VecVisionModel"),WVr.forEach(t),qco=r(mCe," (Data2VecVision model)"),mCe.forEach(t),Nco=i($),Hh=n($,"LI",{});var gCe=s(Hh);Zte=n(gCe,"STRONG",{});var HVr=s(Zte);jco=r(HVr,"deberta"),HVr.forEach(t),Dco=r(gCe," \u2014 "),cP=n(gCe,"A",{href:!0});var UVr=s(cP);Gco=r(UVr,"DebertaModel"),UVr.forEach(t),Oco=r(gCe," (DeBERTa model)"),gCe.forEach(t),Vco=i($),Uh=n($,"LI",{});var hCe=s(Uh);eae=n(hCe,"STRONG",{});var JVr=s(eae);Xco=r(JVr,"deberta-v2"),JVr.forEach(t),zco=r(hCe," \u2014 "),fP=n(hCe,"A",{href:!0});var YVr=s(fP);Qco=r(YVr,"DebertaV2Model"),YVr.forEach(t),Wco=r(hCe," (DeBERTa-v2 model)"),hCe.forEach(t),Hco=i($),Jh=n($,"LI",{});var pCe=s(Jh);oae=n(pCe,"STRONG",{});var KVr=s(oae);Uco=r(KVr,"decision_transformer"),KVr.forEach(t),Jco=r(pCe," \u2014 "),mP=n(pCe,"A",{href:!0});var ZVr=s(mP);Yco=r(ZVr,"DecisionTransformerModel"),ZVr.forEach(t),Kco=r(pCe," (Decision Transformer model)"),pCe.forEach(t),Zco=i($),Yh=n($,"LI",{});var uCe=s(Yh);rae=n(uCe,"STRONG",{});var eXr=s(rae);efo=r(eXr,"deit"),eXr.forEach(t),ofo=r(uCe," \u2014 "),gP=n(uCe,"A",{href:!0});var oXr=s(gP);rfo=r(oXr,"DeiTModel"),oXr.forEach(t),tfo=r(uCe," (DeiT model)"),uCe.forEach(t),afo=i($),Kh=n($,"LI",{});var _Ce=s(Kh);tae=n(_Ce,"STRONG",{});var rXr=s(tae);nfo=r(rXr,"detr"),rXr.forEach(t),sfo=r(_Ce," \u2014 "),hP=n(_Ce,"A",{href:!0});var tXr=s(hP);lfo=r(tXr,"DetrModel"),tXr.forEach(t),ifo=r(_Ce," (DETR model)"),_Ce.forEach(t),dfo=i($),Zh=n($,"LI",{});var bCe=s(Zh);aae=n(bCe,"STRONG",{});var aXr=s(aae);cfo=r(aXr,"distilbert"),aXr.forEach(t),ffo=r(bCe," \u2014 "),pP=n(bCe,"A",{href:!0});var nXr=s(pP);mfo=r(nXr,"DistilBertModel"),nXr.forEach(t),gfo=r(bCe," (DistilBERT model)"),bCe.forEach(t),hfo=i($),ep=n($,"LI",{});var vCe=s(ep);nae=n(vCe,"STRONG",{});var sXr=s(nae);pfo=r(sXr,"dpr"),sXr.forEach(t),ufo=r(vCe," \u2014 "),uP=n(vCe,"A",{href:!0});var lXr=s(uP);_fo=r(lXr,"DPRQuestionEncoder"),lXr.forEach(t),bfo=r(vCe," (DPR model)"),vCe.forEach(t),vfo=i($),op=n($,"LI",{});var FCe=s(op);sae=n(FCe,"STRONG",{});var iXr=s(sae);Ffo=r(iXr,"dpt"),iXr.forEach(t),Tfo=r(FCe," \u2014 "),_P=n(FCe,"A",{href:!0});var dXr=s(_P);Mfo=r(dXr,"DPTModel"),dXr.forEach(t),Efo=r(FCe," (DPT model)"),FCe.forEach(t),Cfo=i($),rp=n($,"LI",{});var TCe=s(rp);lae=n(TCe,"STRONG",{});var cXr=s(lae);wfo=r(cXr,"electra"),cXr.forEach(t),Afo=r(TCe," \u2014 "),bP=n(TCe,"A",{href:!0});var fXr=s(bP);yfo=r(fXr,"ElectraModel"),fXr.forEach(t),Lfo=r(TCe," (ELECTRA model)"),TCe.forEach(t),xfo=i($),tp=n($,"LI",{});var MCe=s(tp);iae=n(MCe,"STRONG",{});var mXr=s(iae);$fo=r(mXr,"flaubert"),mXr.forEach(t),kfo=r(MCe," \u2014 "),vP=n(MCe,"A",{href:!0});var gXr=s(vP);Sfo=r(gXr,"FlaubertModel"),gXr.forEach(t),Rfo=r(MCe," (FlauBERT model)"),MCe.forEach(t),Bfo=i($),ap=n($,"LI",{});var ECe=s(ap);dae=n(ECe,"STRONG",{});var hXr=s(dae);Pfo=r(hXr,"fnet"),hXr.forEach(t),Ifo=r(ECe," \u2014 "),FP=n(ECe,"A",{href:!0});var pXr=s(FP);qfo=r(pXr,"FNetModel"),pXr.forEach(t),Nfo=r(ECe," (FNet model)"),ECe.forEach(t),jfo=i($),np=n($,"LI",{});var CCe=s(np);cae=n(CCe,"STRONG",{});var uXr=s(cae);Dfo=r(uXr,"fsmt"),uXr.forEach(t),Gfo=r(CCe," \u2014 "),TP=n(CCe,"A",{href:!0});var _Xr=s(TP);Ofo=r(_Xr,"FSMTModel"),_Xr.forEach(t),Vfo=r(CCe," (FairSeq Machine-Translation model)"),CCe.forEach(t),Xfo=i($),Ls=n($,"LI",{});var Ex=s(Ls);fae=n(Ex,"STRONG",{});var bXr=s(fae);zfo=r(bXr,"funnel"),bXr.forEach(t),Qfo=r(Ex," \u2014 "),MP=n(Ex,"A",{href:!0});var vXr=s(MP);Wfo=r(vXr,"FunnelModel"),vXr.forEach(t),Hfo=r(Ex," or "),EP=n(Ex,"A",{href:!0});var FXr=s(EP);Ufo=r(FXr,"FunnelBaseModel"),FXr.forEach(t),Jfo=r(Ex," (Funnel Transformer model)"),Ex.forEach(t),Yfo=i($),sp=n($,"LI",{});var wCe=s(sp);mae=n(wCe,"STRONG",{});var TXr=s(mae);Kfo=r(TXr,"glpn"),TXr.forEach(t),Zfo=r(wCe," \u2014 "),CP=n(wCe,"A",{href:!0});var MXr=s(CP);emo=r(MXr,"GLPNModel"),MXr.forEach(t),omo=r(wCe," (GLPN model)"),wCe.forEach(t),rmo=i($),lp=n($,"LI",{});var ACe=s(lp);gae=n(ACe,"STRONG",{});var EXr=s(gae);tmo=r(EXr,"gpt2"),EXr.forEach(t),amo=r(ACe," \u2014 "),wP=n(ACe,"A",{href:!0});var CXr=s(wP);nmo=r(CXr,"GPT2Model"),CXr.forEach(t),smo=r(ACe," (OpenAI GPT-2 model)"),ACe.forEach(t),lmo=i($),ip=n($,"LI",{});var yCe=s(ip);hae=n(yCe,"STRONG",{});var wXr=s(hae);imo=r(wXr,"gpt_neo"),wXr.forEach(t),dmo=r(yCe," \u2014 "),AP=n(yCe,"A",{href:!0});var AXr=s(AP);cmo=r(AXr,"GPTNeoModel"),AXr.forEach(t),fmo=r(yCe," (GPT Neo model)"),yCe.forEach(t),mmo=i($),dp=n($,"LI",{});var LCe=s(dp);pae=n(LCe,"STRONG",{});var yXr=s(pae);gmo=r(yXr,"gptj"),yXr.forEach(t),hmo=r(LCe," \u2014 "),yP=n(LCe,"A",{href:!0});var LXr=s(yP);pmo=r(LXr,"GPTJModel"),LXr.forEach(t),umo=r(LCe," (GPT-J model)"),LCe.forEach(t),_mo=i($),cp=n($,"LI",{});var xCe=s(cp);uae=n(xCe,"STRONG",{});var xXr=s(uae);bmo=r(xXr,"hubert"),xXr.forEach(t),vmo=r(xCe," \u2014 "),LP=n(xCe,"A",{href:!0});var $Xr=s(LP);Fmo=r($Xr,"HubertModel"),$Xr.forEach(t),Tmo=r(xCe," (Hubert model)"),xCe.forEach(t),Mmo=i($),fp=n($,"LI",{});var $Ce=s(fp);_ae=n($Ce,"STRONG",{});var kXr=s(_ae);Emo=r(kXr,"ibert"),kXr.forEach(t),Cmo=r($Ce," \u2014 "),xP=n($Ce,"A",{href:!0});var SXr=s(xP);wmo=r(SXr,"IBertModel"),SXr.forEach(t),Amo=r($Ce," (I-BERT model)"),$Ce.forEach(t),ymo=i($),mp=n($,"LI",{});var kCe=s(mp);bae=n(kCe,"STRONG",{});var RXr=s(bae);Lmo=r(RXr,"imagegpt"),RXr.forEach(t),xmo=r(kCe," \u2014 "),$P=n(kCe,"A",{href:!0});var BXr=s($P);$mo=r(BXr,"ImageGPTModel"),BXr.forEach(t),kmo=r(kCe," (ImageGPT model)"),kCe.forEach(t),Smo=i($),gp=n($,"LI",{});var SCe=s(gp);vae=n(SCe,"STRONG",{});var PXr=s(vae);Rmo=r(PXr,"layoutlm"),PXr.forEach(t),Bmo=r(SCe," \u2014 "),kP=n(SCe,"A",{href:!0});var IXr=s(kP);Pmo=r(IXr,"LayoutLMModel"),IXr.forEach(t),Imo=r(SCe," (LayoutLM model)"),SCe.forEach(t),qmo=i($),hp=n($,"LI",{});var RCe=s(hp);Fae=n(RCe,"STRONG",{});var qXr=s(Fae);Nmo=r(qXr,"layoutlmv2"),qXr.forEach(t),jmo=r(RCe," \u2014 "),SP=n(RCe,"A",{href:!0});var NXr=s(SP);Dmo=r(NXr,"LayoutLMv2Model"),NXr.forEach(t),Gmo=r(RCe," (LayoutLMv2 model)"),RCe.forEach(t),Omo=i($),pp=n($,"LI",{});var BCe=s(pp);Tae=n(BCe,"STRONG",{});var jXr=s(Tae);Vmo=r(jXr,"led"),jXr.forEach(t),Xmo=r(BCe," \u2014 "),RP=n(BCe,"A",{href:!0});var DXr=s(RP);zmo=r(DXr,"LEDModel"),DXr.forEach(t),Qmo=r(BCe," (LED model)"),BCe.forEach(t),Wmo=i($),up=n($,"LI",{});var PCe=s(up);Mae=n(PCe,"STRONG",{});var GXr=s(Mae);Hmo=r(GXr,"longformer"),GXr.forEach(t),Umo=r(PCe," \u2014 "),BP=n(PCe,"A",{href:!0});var OXr=s(BP);Jmo=r(OXr,"LongformerModel"),OXr.forEach(t),Ymo=r(PCe," (Longformer model)"),PCe.forEach(t),Kmo=i($),_p=n($,"LI",{});var ICe=s(_p);Eae=n(ICe,"STRONG",{});var VXr=s(Eae);Zmo=r(VXr,"luke"),VXr.forEach(t),ego=r(ICe," \u2014 "),PP=n(ICe,"A",{href:!0});var XXr=s(PP);ogo=r(XXr,"LukeModel"),XXr.forEach(t),rgo=r(ICe," (LUKE model)"),ICe.forEach(t),tgo=i($),bp=n($,"LI",{});var qCe=s(bp);Cae=n(qCe,"STRONG",{});var zXr=s(Cae);ago=r(zXr,"lxmert"),zXr.forEach(t),ngo=r(qCe," \u2014 "),IP=n(qCe,"A",{href:!0});var QXr=s(IP);sgo=r(QXr,"LxmertModel"),QXr.forEach(t),lgo=r(qCe," (LXMERT model)"),qCe.forEach(t),igo=i($),vp=n($,"LI",{});var NCe=s(vp);wae=n(NCe,"STRONG",{});var WXr=s(wae);dgo=r(WXr,"m2m_100"),WXr.forEach(t),cgo=r(NCe," \u2014 "),qP=n(NCe,"A",{href:!0});var HXr=s(qP);fgo=r(HXr,"M2M100Model"),HXr.forEach(t),mgo=r(NCe," (M2M100 model)"),NCe.forEach(t),ggo=i($),Fp=n($,"LI",{});var jCe=s(Fp);Aae=n(jCe,"STRONG",{});var UXr=s(Aae);hgo=r(UXr,"marian"),UXr.forEach(t),pgo=r(jCe," \u2014 "),NP=n(jCe,"A",{href:!0});var JXr=s(NP);ugo=r(JXr,"MarianModel"),JXr.forEach(t),_go=r(jCe," (Marian model)"),jCe.forEach(t),bgo=i($),Tp=n($,"LI",{});var DCe=s(Tp);yae=n(DCe,"STRONG",{});var YXr=s(yae);vgo=r(YXr,"maskformer"),YXr.forEach(t),Fgo=r(DCe," \u2014 "),jP=n(DCe,"A",{href:!0});var KXr=s(jP);Tgo=r(KXr,"MaskFormerModel"),KXr.forEach(t),Mgo=r(DCe," (MaskFormer model)"),DCe.forEach(t),Ego=i($),Mp=n($,"LI",{});var GCe=s(Mp);Lae=n(GCe,"STRONG",{});var ZXr=s(Lae);Cgo=r(ZXr,"mbart"),ZXr.forEach(t),wgo=r(GCe," \u2014 "),DP=n(GCe,"A",{href:!0});var ezr=s(DP);Ago=r(ezr,"MBartModel"),ezr.forEach(t),ygo=r(GCe," (mBART model)"),GCe.forEach(t),Lgo=i($),Ep=n($,"LI",{});var OCe=s(Ep);xae=n(OCe,"STRONG",{});var ozr=s(xae);xgo=r(ozr,"megatron-bert"),ozr.forEach(t),$go=r(OCe," \u2014 "),GP=n(OCe,"A",{href:!0});var rzr=s(GP);kgo=r(rzr,"MegatronBertModel"),rzr.forEach(t),Sgo=r(OCe," (MegatronBert model)"),OCe.forEach(t),Rgo=i($),Cp=n($,"LI",{});var VCe=s(Cp);$ae=n(VCe,"STRONG",{});var tzr=s($ae);Bgo=r(tzr,"mobilebert"),tzr.forEach(t),Pgo=r(VCe," \u2014 "),OP=n(VCe,"A",{href:!0});var azr=s(OP);Igo=r(azr,"MobileBertModel"),azr.forEach(t),qgo=r(VCe," (MobileBERT model)"),VCe.forEach(t),Ngo=i($),wp=n($,"LI",{});var XCe=s(wp);kae=n(XCe,"STRONG",{});var nzr=s(kae);jgo=r(nzr,"mpnet"),nzr.forEach(t),Dgo=r(XCe," \u2014 "),VP=n(XCe,"A",{href:!0});var szr=s(VP);Ggo=r(szr,"MPNetModel"),szr.forEach(t),Ogo=r(XCe," (MPNet model)"),XCe.forEach(t),Vgo=i($),Ap=n($,"LI",{});var zCe=s(Ap);Sae=n(zCe,"STRONG",{});var lzr=s(Sae);Xgo=r(lzr,"mt5"),lzr.forEach(t),zgo=r(zCe," \u2014 "),XP=n(zCe,"A",{href:!0});var izr=s(XP);Qgo=r(izr,"MT5Model"),izr.forEach(t),Wgo=r(zCe," (mT5 model)"),zCe.forEach(t),Hgo=i($),yp=n($,"LI",{});var QCe=s(yp);Rae=n(QCe,"STRONG",{});var dzr=s(Rae);Ugo=r(dzr,"nystromformer"),dzr.forEach(t),Jgo=r(QCe," \u2014 "),zP=n(QCe,"A",{href:!0});var czr=s(zP);Ygo=r(czr,"NystromformerModel"),czr.forEach(t),Kgo=r(QCe," (Nystromformer model)"),QCe.forEach(t),Zgo=i($),Lp=n($,"LI",{});var WCe=s(Lp);Bae=n(WCe,"STRONG",{});var fzr=s(Bae);eho=r(fzr,"openai-gpt"),fzr.forEach(t),oho=r(WCe," \u2014 "),QP=n(WCe,"A",{href:!0});var mzr=s(QP);rho=r(mzr,"OpenAIGPTModel"),mzr.forEach(t),tho=r(WCe," (OpenAI GPT model)"),WCe.forEach(t),aho=i($),xp=n($,"LI",{});var HCe=s(xp);Pae=n(HCe,"STRONG",{});var gzr=s(Pae);nho=r(gzr,"pegasus"),gzr.forEach(t),sho=r(HCe," \u2014 "),WP=n(HCe,"A",{href:!0});var hzr=s(WP);lho=r(hzr,"PegasusModel"),hzr.forEach(t),iho=r(HCe," (Pegasus model)"),HCe.forEach(t),dho=i($),$p=n($,"LI",{});var UCe=s($p);Iae=n(UCe,"STRONG",{});var pzr=s(Iae);cho=r(pzr,"perceiver"),pzr.forEach(t),fho=r(UCe," \u2014 "),HP=n(UCe,"A",{href:!0});var uzr=s(HP);mho=r(uzr,"PerceiverModel"),uzr.forEach(t),gho=r(UCe," (Perceiver model)"),UCe.forEach(t),hho=i($),kp=n($,"LI",{});var JCe=s(kp);qae=n(JCe,"STRONG",{});var _zr=s(qae);pho=r(_zr,"plbart"),_zr.forEach(t),uho=r(JCe," \u2014 "),UP=n(JCe,"A",{href:!0});var bzr=s(UP);_ho=r(bzr,"PLBartModel"),bzr.forEach(t),bho=r(JCe," (PLBart model)"),JCe.forEach(t),vho=i($),Sp=n($,"LI",{});var YCe=s(Sp);Nae=n(YCe,"STRONG",{});var vzr=s(Nae);Fho=r(vzr,"poolformer"),vzr.forEach(t),Tho=r(YCe," \u2014 "),JP=n(YCe,"A",{href:!0});var Fzr=s(JP);Mho=r(Fzr,"PoolFormerModel"),Fzr.forEach(t),Eho=r(YCe," (PoolFormer model)"),YCe.forEach(t),Cho=i($),Rp=n($,"LI",{});var KCe=s(Rp);jae=n(KCe,"STRONG",{});var Tzr=s(jae);who=r(Tzr,"prophetnet"),Tzr.forEach(t),Aho=r(KCe," \u2014 "),YP=n(KCe,"A",{href:!0});var Mzr=s(YP);yho=r(Mzr,"ProphetNetModel"),Mzr.forEach(t),Lho=r(KCe," (ProphetNet model)"),KCe.forEach(t),xho=i($),Bp=n($,"LI",{});var ZCe=s(Bp);Dae=n(ZCe,"STRONG",{});var Ezr=s(Dae);$ho=r(Ezr,"qdqbert"),Ezr.forEach(t),kho=r(ZCe," \u2014 "),KP=n(ZCe,"A",{href:!0});var Czr=s(KP);Sho=r(Czr,"QDQBertModel"),Czr.forEach(t),Rho=r(ZCe," (QDQBert model)"),ZCe.forEach(t),Bho=i($),Pp=n($,"LI",{});var e3e=s(Pp);Gae=n(e3e,"STRONG",{});var wzr=s(Gae);Pho=r(wzr,"reformer"),wzr.forEach(t),Iho=r(e3e," \u2014 "),ZP=n(e3e,"A",{href:!0});var Azr=s(ZP);qho=r(Azr,"ReformerModel"),Azr.forEach(t),Nho=r(e3e," (Reformer model)"),e3e.forEach(t),jho=i($),Ip=n($,"LI",{});var o3e=s(Ip);Oae=n(o3e,"STRONG",{});var yzr=s(Oae);Dho=r(yzr,"regnet"),yzr.forEach(t),Gho=r(o3e," \u2014 "),eI=n(o3e,"A",{href:!0});var Lzr=s(eI);Oho=r(Lzr,"RegNetModel"),Lzr.forEach(t),Vho=r(o3e," (RegNet model)"),o3e.forEach(t),Xho=i($),qp=n($,"LI",{});var r3e=s(qp);Vae=n(r3e,"STRONG",{});var xzr=s(Vae);zho=r(xzr,"rembert"),xzr.forEach(t),Qho=r(r3e," \u2014 "),oI=n(r3e,"A",{href:!0});var $zr=s(oI);Who=r($zr,"RemBertModel"),$zr.forEach(t),Hho=r(r3e," (RemBERT model)"),r3e.forEach(t),Uho=i($),Np=n($,"LI",{});var t3e=s(Np);Xae=n(t3e,"STRONG",{});var kzr=s(Xae);Jho=r(kzr,"resnet"),kzr.forEach(t),Yho=r(t3e," \u2014 "),rI=n(t3e,"A",{href:!0});var Szr=s(rI);Kho=r(Szr,"ResNetModel"),Szr.forEach(t),Zho=r(t3e," (ResNet model)"),t3e.forEach(t),epo=i($),jp=n($,"LI",{});var a3e=s(jp);zae=n(a3e,"STRONG",{});var Rzr=s(zae);opo=r(Rzr,"retribert"),Rzr.forEach(t),rpo=r(a3e," \u2014 "),tI=n(a3e,"A",{href:!0});var Bzr=s(tI);tpo=r(Bzr,"RetriBertModel"),Bzr.forEach(t),apo=r(a3e," (RetriBERT model)"),a3e.forEach(t),npo=i($),Dp=n($,"LI",{});var n3e=s(Dp);Qae=n(n3e,"STRONG",{});var Pzr=s(Qae);spo=r(Pzr,"roberta"),Pzr.forEach(t),lpo=r(n3e," \u2014 "),aI=n(n3e,"A",{href:!0});var Izr=s(aI);ipo=r(Izr,"RobertaModel"),Izr.forEach(t),dpo=r(n3e," (RoBERTa model)"),n3e.forEach(t),cpo=i($),Gp=n($,"LI",{});var s3e=s(Gp);Wae=n(s3e,"STRONG",{});var qzr=s(Wae);fpo=r(qzr,"roformer"),qzr.forEach(t),mpo=r(s3e," \u2014 "),nI=n(s3e,"A",{href:!0});var Nzr=s(nI);gpo=r(Nzr,"RoFormerModel"),Nzr.forEach(t),hpo=r(s3e," (RoFormer model)"),s3e.forEach(t),ppo=i($),Op=n($,"LI",{});var l3e=s(Op);Hae=n(l3e,"STRONG",{});var jzr=s(Hae);upo=r(jzr,"segformer"),jzr.forEach(t),_po=r(l3e," \u2014 "),sI=n(l3e,"A",{href:!0});var Dzr=s(sI);bpo=r(Dzr,"SegformerModel"),Dzr.forEach(t),vpo=r(l3e," (SegFormer model)"),l3e.forEach(t),Fpo=i($),Vp=n($,"LI",{});var i3e=s(Vp);Uae=n(i3e,"STRONG",{});var Gzr=s(Uae);Tpo=r(Gzr,"sew"),Gzr.forEach(t),Mpo=r(i3e," \u2014 "),lI=n(i3e,"A",{href:!0});var Ozr=s(lI);Epo=r(Ozr,"SEWModel"),Ozr.forEach(t),Cpo=r(i3e," (SEW model)"),i3e.forEach(t),wpo=i($),Xp=n($,"LI",{});var d3e=s(Xp);Jae=n(d3e,"STRONG",{});var Vzr=s(Jae);Apo=r(Vzr,"sew-d"),Vzr.forEach(t),ypo=r(d3e," \u2014 "),iI=n(d3e,"A",{href:!0});var Xzr=s(iI);Lpo=r(Xzr,"SEWDModel"),Xzr.forEach(t),xpo=r(d3e," (SEW-D model)"),d3e.forEach(t),$po=i($),zp=n($,"LI",{});var c3e=s(zp);Yae=n(c3e,"STRONG",{});var zzr=s(Yae);kpo=r(zzr,"speech_to_text"),zzr.forEach(t),Spo=r(c3e," \u2014 "),dI=n(c3e,"A",{href:!0});var Qzr=s(dI);Rpo=r(Qzr,"Speech2TextModel"),Qzr.forEach(t),Bpo=r(c3e," (Speech2Text model)"),c3e.forEach(t),Ppo=i($),Qp=n($,"LI",{});var f3e=s(Qp);Kae=n(f3e,"STRONG",{});var Wzr=s(Kae);Ipo=r(Wzr,"splinter"),Wzr.forEach(t),qpo=r(f3e," \u2014 "),cI=n(f3e,"A",{href:!0});var Hzr=s(cI);Npo=r(Hzr,"SplinterModel"),Hzr.forEach(t),jpo=r(f3e," (Splinter model)"),f3e.forEach(t),Dpo=i($),Wp=n($,"LI",{});var m3e=s(Wp);Zae=n(m3e,"STRONG",{});var Uzr=s(Zae);Gpo=r(Uzr,"squeezebert"),Uzr.forEach(t),Opo=r(m3e," \u2014 "),fI=n(m3e,"A",{href:!0});var Jzr=s(fI);Vpo=r(Jzr,"SqueezeBertModel"),Jzr.forEach(t),Xpo=r(m3e," (SqueezeBERT model)"),m3e.forEach(t),zpo=i($),Hp=n($,"LI",{});var g3e=s(Hp);ene=n(g3e,"STRONG",{});var Yzr=s(ene);Qpo=r(Yzr,"swin"),Yzr.forEach(t),Wpo=r(g3e," \u2014 "),mI=n(g3e,"A",{href:!0});var Kzr=s(mI);Hpo=r(Kzr,"SwinModel"),Kzr.forEach(t),Upo=r(g3e," (Swin model)"),g3e.forEach(t),Jpo=i($),Up=n($,"LI",{});var h3e=s(Up);one=n(h3e,"STRONG",{});var Zzr=s(one);Ypo=r(Zzr,"t5"),Zzr.forEach(t),Kpo=r(h3e," \u2014 "),gI=n(h3e,"A",{href:!0});var eQr=s(gI);Zpo=r(eQr,"T5Model"),eQr.forEach(t),euo=r(h3e," (T5 model)"),h3e.forEach(t),ouo=i($),Jp=n($,"LI",{});var p3e=s(Jp);rne=n(p3e,"STRONG",{});var oQr=s(rne);ruo=r(oQr,"tapas"),oQr.forEach(t),tuo=r(p3e," \u2014 "),hI=n(p3e,"A",{href:!0});var rQr=s(hI);auo=r(rQr,"TapasModel"),rQr.forEach(t),nuo=r(p3e," (TAPAS model)"),p3e.forEach(t),suo=i($),Yp=n($,"LI",{});var u3e=s(Yp);tne=n(u3e,"STRONG",{});var tQr=s(tne);luo=r(tQr,"transfo-xl"),tQr.forEach(t),iuo=r(u3e," \u2014 "),pI=n(u3e,"A",{href:!0});var aQr=s(pI);duo=r(aQr,"TransfoXLModel"),aQr.forEach(t),cuo=r(u3e," (Transformer-XL model)"),u3e.forEach(t),fuo=i($),Kp=n($,"LI",{});var _3e=s(Kp);ane=n(_3e,"STRONG",{});var nQr=s(ane);muo=r(nQr,"unispeech"),nQr.forEach(t),guo=r(_3e," \u2014 "),uI=n(_3e,"A",{href:!0});var sQr=s(uI);huo=r(sQr,"UniSpeechModel"),sQr.forEach(t),puo=r(_3e," (UniSpeech model)"),_3e.forEach(t),uuo=i($),Zp=n($,"LI",{});var b3e=s(Zp);nne=n(b3e,"STRONG",{});var lQr=s(nne);_uo=r(lQr,"unispeech-sat"),lQr.forEach(t),buo=r(b3e," \u2014 "),_I=n(b3e,"A",{href:!0});var iQr=s(_I);vuo=r(iQr,"UniSpeechSatModel"),iQr.forEach(t),Fuo=r(b3e," (UniSpeechSat model)"),b3e.forEach(t),Tuo=i($),eu=n($,"LI",{});var v3e=s(eu);sne=n(v3e,"STRONG",{});var dQr=s(sne);Muo=r(dQr,"van"),dQr.forEach(t),Euo=r(v3e," \u2014 "),bI=n(v3e,"A",{href:!0});var cQr=s(bI);Cuo=r(cQr,"VanModel"),cQr.forEach(t),wuo=r(v3e," (VAN model)"),v3e.forEach(t),Auo=i($),ou=n($,"LI",{});var F3e=s(ou);lne=n(F3e,"STRONG",{});var fQr=s(lne);yuo=r(fQr,"vilt"),fQr.forEach(t),Luo=r(F3e," \u2014 "),vI=n(F3e,"A",{href:!0});var mQr=s(vI);xuo=r(mQr,"ViltModel"),mQr.forEach(t),$uo=r(F3e," (ViLT model)"),F3e.forEach(t),kuo=i($),ru=n($,"LI",{});var T3e=s(ru);ine=n(T3e,"STRONG",{});var gQr=s(ine);Suo=r(gQr,"vision-text-dual-encoder"),gQr.forEach(t),Ruo=r(T3e," \u2014 "),FI=n(T3e,"A",{href:!0});var hQr=s(FI);Buo=r(hQr,"VisionTextDualEncoderModel"),hQr.forEach(t),Puo=r(T3e," (VisionTextDualEncoder model)"),T3e.forEach(t),Iuo=i($),tu=n($,"LI",{});var M3e=s(tu);dne=n(M3e,"STRONG",{});var pQr=s(dne);quo=r(pQr,"visual_bert"),pQr.forEach(t),Nuo=r(M3e," \u2014 "),TI=n(M3e,"A",{href:!0});var uQr=s(TI);juo=r(uQr,"VisualBertModel"),uQr.forEach(t),Duo=r(M3e," (VisualBert model)"),M3e.forEach(t),Guo=i($),au=n($,"LI",{});var E3e=s(au);cne=n(E3e,"STRONG",{});var _Qr=s(cne);Ouo=r(_Qr,"vit"),_Qr.forEach(t),Vuo=r(E3e," \u2014 "),MI=n(E3e,"A",{href:!0});var bQr=s(MI);Xuo=r(bQr,"ViTModel"),bQr.forEach(t),zuo=r(E3e," (ViT model)"),E3e.forEach(t),Quo=i($),nu=n($,"LI",{});var C3e=s(nu);fne=n(C3e,"STRONG",{});var vQr=s(fne);Wuo=r(vQr,"vit_mae"),vQr.forEach(t),Huo=r(C3e," \u2014 "),EI=n(C3e,"A",{href:!0});var FQr=s(EI);Uuo=r(FQr,"ViTMAEModel"),FQr.forEach(t),Juo=r(C3e," (ViTMAE model)"),C3e.forEach(t),Yuo=i($),su=n($,"LI",{});var w3e=s(su);mne=n(w3e,"STRONG",{});var TQr=s(mne);Kuo=r(TQr,"wav2vec2"),TQr.forEach(t),Zuo=r(w3e," \u2014 "),CI=n(w3e,"A",{href:!0});var MQr=s(CI);e_o=r(MQr,"Wav2Vec2Model"),MQr.forEach(t),o_o=r(w3e," (Wav2Vec2 model)"),w3e.forEach(t),r_o=i($),lu=n($,"LI",{});var A3e=s(lu);gne=n(A3e,"STRONG",{});var EQr=s(gne);t_o=r(EQr,"wavlm"),EQr.forEach(t),a_o=r(A3e," \u2014 "),wI=n(A3e,"A",{href:!0});var CQr=s(wI);n_o=r(CQr,"WavLMModel"),CQr.forEach(t),s_o=r(A3e," (WavLM model)"),A3e.forEach(t),l_o=i($),iu=n($,"LI",{});var y3e=s(iu);hne=n(y3e,"STRONG",{});var wQr=s(hne);i_o=r(wQr,"xglm"),wQr.forEach(t),d_o=r(y3e," \u2014 "),AI=n(y3e,"A",{href:!0});var AQr=s(AI);c_o=r(AQr,"XGLMModel"),AQr.forEach(t),f_o=r(y3e," (XGLM model)"),y3e.forEach(t),m_o=i($),du=n($,"LI",{});var L3e=s(du);pne=n(L3e,"STRONG",{});var yQr=s(pne);g_o=r(yQr,"xlm"),yQr.forEach(t),h_o=r(L3e," \u2014 "),yI=n(L3e,"A",{href:!0});var LQr=s(yI);p_o=r(LQr,"XLMModel"),LQr.forEach(t),u_o=r(L3e," (XLM model)"),L3e.forEach(t),__o=i($),cu=n($,"LI",{});var x3e=s(cu);une=n(x3e,"STRONG",{});var xQr=s(une);b_o=r(xQr,"xlm-prophetnet"),xQr.forEach(t),v_o=r(x3e," \u2014 "),LI=n(x3e,"A",{href:!0});var $Qr=s(LI);F_o=r($Qr,"XLMProphetNetModel"),$Qr.forEach(t),T_o=r(x3e," (XLMProphetNet model)"),x3e.forEach(t),M_o=i($),fu=n($,"LI",{});var $3e=s(fu);_ne=n($3e,"STRONG",{});var kQr=s(_ne);E_o=r(kQr,"xlm-roberta"),kQr.forEach(t),C_o=r($3e," \u2014 "),xI=n($3e,"A",{href:!0});var SQr=s(xI);w_o=r(SQr,"XLMRobertaModel"),SQr.forEach(t),A_o=r($3e," (XLM-RoBERTa model)"),$3e.forEach(t),y_o=i($),mu=n($,"LI",{});var k3e=s(mu);bne=n(k3e,"STRONG",{});var RQr=s(bne);L_o=r(RQr,"xlm-roberta-xl"),RQr.forEach(t),x_o=r(k3e," \u2014 "),$I=n(k3e,"A",{href:!0});var BQr=s($I);$_o=r(BQr,"XLMRobertaXLModel"),BQr.forEach(t),k_o=r(k3e," (XLM-RoBERTa-XL model)"),k3e.forEach(t),S_o=i($),gu=n($,"LI",{});var S3e=s(gu);vne=n(S3e,"STRONG",{});var PQr=s(vne);R_o=r(PQr,"xlnet"),PQr.forEach(t),B_o=r(S3e," \u2014 "),kI=n(S3e,"A",{href:!0});var IQr=s(kI);P_o=r(IQr,"XLNetModel"),IQr.forEach(t),I_o=r(S3e," (XLNet model)"),S3e.forEach(t),q_o=i($),hu=n($,"LI",{});var R3e=s(hu);Fne=n(R3e,"STRONG",{});var qQr=s(Fne);N_o=r(qQr,"yoso"),qQr.forEach(t),j_o=r(R3e," \u2014 "),SI=n(R3e,"A",{href:!0});var NQr=s(SI);D_o=r(NQr,"YosoModel"),NQr.forEach(t),G_o=r(R3e," (YOSO model)"),R3e.forEach(t),$.forEach(t),O_o=i(Jt),pu=n(Jt,"P",{});var B3e=s(pu);V_o=r(B3e,"The model is set in evaluation mode by default using "),Tne=n(B3e,"CODE",{});var jQr=s(Tne);X_o=r(jQr,"model.eval()"),jQr.forEach(t),z_o=r(B3e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Mne=n(B3e,"CODE",{});var DQr=s(Mne);Q_o=r(DQr,"model.train()"),DQr.forEach(t),B3e.forEach(t),W_o=i(Jt),T(uu.$$.fragment,Jt),Jt.forEach(t),Ps.forEach(t),JRe=i(f),bi=n(f,"H2",{class:!0});var KPe=s(bi);_u=n(KPe,"A",{id:!0,class:!0,href:!0});var GQr=s(_u);Ene=n(GQr,"SPAN",{});var OQr=s(Ene);T(QA.$$.fragment,OQr),OQr.forEach(t),GQr.forEach(t),H_o=i(KPe),Cne=n(KPe,"SPAN",{});var VQr=s(Cne);U_o=r(VQr,"AutoModelForPreTraining"),VQr.forEach(t),KPe.forEach(t),YRe=i(f),Lo=n(f,"DIV",{class:!0});var Is=s(Lo);T(WA.$$.fragment,Is),J_o=i(Is),vi=n(Is,"P",{});var YJ=s(vi);Y_o=r(YJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),RI=n(YJ,"A",{href:!0});var XQr=s(RI);K_o=r(XQr,"from_pretrained()"),XQr.forEach(t),Z_o=r(YJ," class method or the "),BI=n(YJ,"A",{href:!0});var zQr=s(BI);e1o=r(zQr,"from_config()"),zQr.forEach(t),o1o=r(YJ,` class
method.`),YJ.forEach(t),r1o=i(Is),HA=n(Is,"P",{});var ZPe=s(HA);t1o=r(ZPe,"This class cannot be instantiated directly using "),wne=n(ZPe,"CODE",{});var QQr=s(wne);a1o=r(QQr,"__init__()"),QQr.forEach(t),n1o=r(ZPe," (throws an error)."),ZPe.forEach(t),s1o=i(Is),et=n(Is,"DIV",{class:!0});var M3=s(et);T(UA.$$.fragment,M3),l1o=i(M3),Ane=n(M3,"P",{});var WQr=s(Ane);i1o=r(WQr,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),WQr.forEach(t),d1o=i(M3),Fi=n(M3,"P",{});var KJ=s(Fi);c1o=r(KJ,`Note:
Loading a model from its configuration file does `),yne=n(KJ,"STRONG",{});var HQr=s(yne);f1o=r(HQr,"not"),HQr.forEach(t),m1o=r(KJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),PI=n(KJ,"A",{href:!0});var UQr=s(PI);g1o=r(UQr,"from_pretrained()"),UQr.forEach(t),h1o=r(KJ," to load the model weights."),KJ.forEach(t),p1o=i(M3),T(bu.$$.fragment,M3),M3.forEach(t),u1o=i(Is),He=n(Is,"DIV",{class:!0});var Yt=s(He);T(JA.$$.fragment,Yt),_1o=i(Yt),Lne=n(Yt,"P",{});var JQr=s(Lne);b1o=r(JQr,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),JQr.forEach(t),v1o=i(Yt),Ca=n(Yt,"P",{});var E3=s(Ca);F1o=r(E3,"The model class to instantiate is selected based on the "),xne=n(E3,"CODE",{});var YQr=s(xne);T1o=r(YQr,"model_type"),YQr.forEach(t),M1o=r(E3,` property of the config object (either
passed as an argument or loaded from `),$ne=n(E3,"CODE",{});var KQr=s($ne);E1o=r(KQr,"pretrained_model_name_or_path"),KQr.forEach(t),C1o=r(E3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kne=n(E3,"CODE",{});var ZQr=s(kne);w1o=r(ZQr,"pretrained_model_name_or_path"),ZQr.forEach(t),A1o=r(E3,":"),E3.forEach(t),y1o=i(Yt),G=n(Yt,"UL",{});var V=s(G);vu=n(V,"LI",{});var P3e=s(vu);Sne=n(P3e,"STRONG",{});var eWr=s(Sne);L1o=r(eWr,"albert"),eWr.forEach(t),x1o=r(P3e," \u2014 "),II=n(P3e,"A",{href:!0});var oWr=s(II);$1o=r(oWr,"AlbertForPreTraining"),oWr.forEach(t),k1o=r(P3e," (ALBERT model)"),P3e.forEach(t),S1o=i(V),Fu=n(V,"LI",{});var I3e=s(Fu);Rne=n(I3e,"STRONG",{});var rWr=s(Rne);R1o=r(rWr,"bart"),rWr.forEach(t),B1o=r(I3e," \u2014 "),qI=n(I3e,"A",{href:!0});var tWr=s(qI);P1o=r(tWr,"BartForConditionalGeneration"),tWr.forEach(t),I1o=r(I3e," (BART model)"),I3e.forEach(t),q1o=i(V),Tu=n(V,"LI",{});var q3e=s(Tu);Bne=n(q3e,"STRONG",{});var aWr=s(Bne);N1o=r(aWr,"bert"),aWr.forEach(t),j1o=r(q3e," \u2014 "),NI=n(q3e,"A",{href:!0});var nWr=s(NI);D1o=r(nWr,"BertForPreTraining"),nWr.forEach(t),G1o=r(q3e," (BERT model)"),q3e.forEach(t),O1o=i(V),Mu=n(V,"LI",{});var N3e=s(Mu);Pne=n(N3e,"STRONG",{});var sWr=s(Pne);V1o=r(sWr,"big_bird"),sWr.forEach(t),X1o=r(N3e," \u2014 "),jI=n(N3e,"A",{href:!0});var lWr=s(jI);z1o=r(lWr,"BigBirdForPreTraining"),lWr.forEach(t),Q1o=r(N3e," (BigBird model)"),N3e.forEach(t),W1o=i(V),Eu=n(V,"LI",{});var j3e=s(Eu);Ine=n(j3e,"STRONG",{});var iWr=s(Ine);H1o=r(iWr,"camembert"),iWr.forEach(t),U1o=r(j3e," \u2014 "),DI=n(j3e,"A",{href:!0});var dWr=s(DI);J1o=r(dWr,"CamembertForMaskedLM"),dWr.forEach(t),Y1o=r(j3e," (CamemBERT model)"),j3e.forEach(t),K1o=i(V),Cu=n(V,"LI",{});var D3e=s(Cu);qne=n(D3e,"STRONG",{});var cWr=s(qne);Z1o=r(cWr,"ctrl"),cWr.forEach(t),e9o=r(D3e," \u2014 "),GI=n(D3e,"A",{href:!0});var fWr=s(GI);o9o=r(fWr,"CTRLLMHeadModel"),fWr.forEach(t),r9o=r(D3e," (CTRL model)"),D3e.forEach(t),t9o=i(V),wu=n(V,"LI",{});var G3e=s(wu);Nne=n(G3e,"STRONG",{});var mWr=s(Nne);a9o=r(mWr,"data2vec-text"),mWr.forEach(t),n9o=r(G3e," \u2014 "),OI=n(G3e,"A",{href:!0});var gWr=s(OI);s9o=r(gWr,"Data2VecTextForMaskedLM"),gWr.forEach(t),l9o=r(G3e," (Data2VecText model)"),G3e.forEach(t),i9o=i(V),Au=n(V,"LI",{});var O3e=s(Au);jne=n(O3e,"STRONG",{});var hWr=s(jne);d9o=r(hWr,"deberta"),hWr.forEach(t),c9o=r(O3e," \u2014 "),VI=n(O3e,"A",{href:!0});var pWr=s(VI);f9o=r(pWr,"DebertaForMaskedLM"),pWr.forEach(t),m9o=r(O3e," (DeBERTa model)"),O3e.forEach(t),g9o=i(V),yu=n(V,"LI",{});var V3e=s(yu);Dne=n(V3e,"STRONG",{});var uWr=s(Dne);h9o=r(uWr,"deberta-v2"),uWr.forEach(t),p9o=r(V3e," \u2014 "),XI=n(V3e,"A",{href:!0});var _Wr=s(XI);u9o=r(_Wr,"DebertaV2ForMaskedLM"),_Wr.forEach(t),_9o=r(V3e," (DeBERTa-v2 model)"),V3e.forEach(t),b9o=i(V),Lu=n(V,"LI",{});var X3e=s(Lu);Gne=n(X3e,"STRONG",{});var bWr=s(Gne);v9o=r(bWr,"distilbert"),bWr.forEach(t),F9o=r(X3e," \u2014 "),zI=n(X3e,"A",{href:!0});var vWr=s(zI);T9o=r(vWr,"DistilBertForMaskedLM"),vWr.forEach(t),M9o=r(X3e," (DistilBERT model)"),X3e.forEach(t),E9o=i(V),xu=n(V,"LI",{});var z3e=s(xu);One=n(z3e,"STRONG",{});var FWr=s(One);C9o=r(FWr,"electra"),FWr.forEach(t),w9o=r(z3e," \u2014 "),QI=n(z3e,"A",{href:!0});var TWr=s(QI);A9o=r(TWr,"ElectraForPreTraining"),TWr.forEach(t),y9o=r(z3e," (ELECTRA model)"),z3e.forEach(t),L9o=i(V),$u=n(V,"LI",{});var Q3e=s($u);Vne=n(Q3e,"STRONG",{});var MWr=s(Vne);x9o=r(MWr,"flaubert"),MWr.forEach(t),$9o=r(Q3e," \u2014 "),WI=n(Q3e,"A",{href:!0});var EWr=s(WI);k9o=r(EWr,"FlaubertWithLMHeadModel"),EWr.forEach(t),S9o=r(Q3e," (FlauBERT model)"),Q3e.forEach(t),R9o=i(V),ku=n(V,"LI",{});var W3e=s(ku);Xne=n(W3e,"STRONG",{});var CWr=s(Xne);B9o=r(CWr,"fnet"),CWr.forEach(t),P9o=r(W3e," \u2014 "),HI=n(W3e,"A",{href:!0});var wWr=s(HI);I9o=r(wWr,"FNetForPreTraining"),wWr.forEach(t),q9o=r(W3e," (FNet model)"),W3e.forEach(t),N9o=i(V),Su=n(V,"LI",{});var H3e=s(Su);zne=n(H3e,"STRONG",{});var AWr=s(zne);j9o=r(AWr,"fsmt"),AWr.forEach(t),D9o=r(H3e," \u2014 "),UI=n(H3e,"A",{href:!0});var yWr=s(UI);G9o=r(yWr,"FSMTForConditionalGeneration"),yWr.forEach(t),O9o=r(H3e," (FairSeq Machine-Translation model)"),H3e.forEach(t),V9o=i(V),Ru=n(V,"LI",{});var U3e=s(Ru);Qne=n(U3e,"STRONG",{});var LWr=s(Qne);X9o=r(LWr,"funnel"),LWr.forEach(t),z9o=r(U3e," \u2014 "),JI=n(U3e,"A",{href:!0});var xWr=s(JI);Q9o=r(xWr,"FunnelForPreTraining"),xWr.forEach(t),W9o=r(U3e," (Funnel Transformer model)"),U3e.forEach(t),H9o=i(V),Bu=n(V,"LI",{});var J3e=s(Bu);Wne=n(J3e,"STRONG",{});var $Wr=s(Wne);U9o=r($Wr,"gpt2"),$Wr.forEach(t),J9o=r(J3e," \u2014 "),YI=n(J3e,"A",{href:!0});var kWr=s(YI);Y9o=r(kWr,"GPT2LMHeadModel"),kWr.forEach(t),K9o=r(J3e," (OpenAI GPT-2 model)"),J3e.forEach(t),Z9o=i(V),Pu=n(V,"LI",{});var Y3e=s(Pu);Hne=n(Y3e,"STRONG",{});var SWr=s(Hne);ebo=r(SWr,"ibert"),SWr.forEach(t),obo=r(Y3e," \u2014 "),KI=n(Y3e,"A",{href:!0});var RWr=s(KI);rbo=r(RWr,"IBertForMaskedLM"),RWr.forEach(t),tbo=r(Y3e," (I-BERT model)"),Y3e.forEach(t),abo=i(V),Iu=n(V,"LI",{});var K3e=s(Iu);Une=n(K3e,"STRONG",{});var BWr=s(Une);nbo=r(BWr,"layoutlm"),BWr.forEach(t),sbo=r(K3e," \u2014 "),ZI=n(K3e,"A",{href:!0});var PWr=s(ZI);lbo=r(PWr,"LayoutLMForMaskedLM"),PWr.forEach(t),ibo=r(K3e," (LayoutLM model)"),K3e.forEach(t),dbo=i(V),qu=n(V,"LI",{});var Z3e=s(qu);Jne=n(Z3e,"STRONG",{});var IWr=s(Jne);cbo=r(IWr,"longformer"),IWr.forEach(t),fbo=r(Z3e," \u2014 "),eq=n(Z3e,"A",{href:!0});var qWr=s(eq);mbo=r(qWr,"LongformerForMaskedLM"),qWr.forEach(t),gbo=r(Z3e," (Longformer model)"),Z3e.forEach(t),hbo=i(V),Nu=n(V,"LI",{});var ewe=s(Nu);Yne=n(ewe,"STRONG",{});var NWr=s(Yne);pbo=r(NWr,"lxmert"),NWr.forEach(t),ubo=r(ewe," \u2014 "),oq=n(ewe,"A",{href:!0});var jWr=s(oq);_bo=r(jWr,"LxmertForPreTraining"),jWr.forEach(t),bbo=r(ewe," (LXMERT model)"),ewe.forEach(t),vbo=i(V),ju=n(V,"LI",{});var owe=s(ju);Kne=n(owe,"STRONG",{});var DWr=s(Kne);Fbo=r(DWr,"megatron-bert"),DWr.forEach(t),Tbo=r(owe," \u2014 "),rq=n(owe,"A",{href:!0});var GWr=s(rq);Mbo=r(GWr,"MegatronBertForPreTraining"),GWr.forEach(t),Ebo=r(owe," (MegatronBert model)"),owe.forEach(t),Cbo=i(V),Du=n(V,"LI",{});var rwe=s(Du);Zne=n(rwe,"STRONG",{});var OWr=s(Zne);wbo=r(OWr,"mobilebert"),OWr.forEach(t),Abo=r(rwe," \u2014 "),tq=n(rwe,"A",{href:!0});var VWr=s(tq);ybo=r(VWr,"MobileBertForPreTraining"),VWr.forEach(t),Lbo=r(rwe," (MobileBERT model)"),rwe.forEach(t),xbo=i(V),Gu=n(V,"LI",{});var twe=s(Gu);ese=n(twe,"STRONG",{});var XWr=s(ese);$bo=r(XWr,"mpnet"),XWr.forEach(t),kbo=r(twe," \u2014 "),aq=n(twe,"A",{href:!0});var zWr=s(aq);Sbo=r(zWr,"MPNetForMaskedLM"),zWr.forEach(t),Rbo=r(twe," (MPNet model)"),twe.forEach(t),Bbo=i(V),Ou=n(V,"LI",{});var awe=s(Ou);ose=n(awe,"STRONG",{});var QWr=s(ose);Pbo=r(QWr,"openai-gpt"),QWr.forEach(t),Ibo=r(awe," \u2014 "),nq=n(awe,"A",{href:!0});var WWr=s(nq);qbo=r(WWr,"OpenAIGPTLMHeadModel"),WWr.forEach(t),Nbo=r(awe," (OpenAI GPT model)"),awe.forEach(t),jbo=i(V),Vu=n(V,"LI",{});var nwe=s(Vu);rse=n(nwe,"STRONG",{});var HWr=s(rse);Dbo=r(HWr,"retribert"),HWr.forEach(t),Gbo=r(nwe," \u2014 "),sq=n(nwe,"A",{href:!0});var UWr=s(sq);Obo=r(UWr,"RetriBertModel"),UWr.forEach(t),Vbo=r(nwe," (RetriBERT model)"),nwe.forEach(t),Xbo=i(V),Xu=n(V,"LI",{});var swe=s(Xu);tse=n(swe,"STRONG",{});var JWr=s(tse);zbo=r(JWr,"roberta"),JWr.forEach(t),Qbo=r(swe," \u2014 "),lq=n(swe,"A",{href:!0});var YWr=s(lq);Wbo=r(YWr,"RobertaForMaskedLM"),YWr.forEach(t),Hbo=r(swe," (RoBERTa model)"),swe.forEach(t),Ubo=i(V),zu=n(V,"LI",{});var lwe=s(zu);ase=n(lwe,"STRONG",{});var KWr=s(ase);Jbo=r(KWr,"squeezebert"),KWr.forEach(t),Ybo=r(lwe," \u2014 "),iq=n(lwe,"A",{href:!0});var ZWr=s(iq);Kbo=r(ZWr,"SqueezeBertForMaskedLM"),ZWr.forEach(t),Zbo=r(lwe," (SqueezeBERT model)"),lwe.forEach(t),e2o=i(V),Qu=n(V,"LI",{});var iwe=s(Qu);nse=n(iwe,"STRONG",{});var eHr=s(nse);o2o=r(eHr,"t5"),eHr.forEach(t),r2o=r(iwe," \u2014 "),dq=n(iwe,"A",{href:!0});var oHr=s(dq);t2o=r(oHr,"T5ForConditionalGeneration"),oHr.forEach(t),a2o=r(iwe," (T5 model)"),iwe.forEach(t),n2o=i(V),Wu=n(V,"LI",{});var dwe=s(Wu);sse=n(dwe,"STRONG",{});var rHr=s(sse);s2o=r(rHr,"tapas"),rHr.forEach(t),l2o=r(dwe," \u2014 "),cq=n(dwe,"A",{href:!0});var tHr=s(cq);i2o=r(tHr,"TapasForMaskedLM"),tHr.forEach(t),d2o=r(dwe," (TAPAS model)"),dwe.forEach(t),c2o=i(V),Hu=n(V,"LI",{});var cwe=s(Hu);lse=n(cwe,"STRONG",{});var aHr=s(lse);f2o=r(aHr,"transfo-xl"),aHr.forEach(t),m2o=r(cwe," \u2014 "),fq=n(cwe,"A",{href:!0});var nHr=s(fq);g2o=r(nHr,"TransfoXLLMHeadModel"),nHr.forEach(t),h2o=r(cwe," (Transformer-XL model)"),cwe.forEach(t),p2o=i(V),Uu=n(V,"LI",{});var fwe=s(Uu);ise=n(fwe,"STRONG",{});var sHr=s(ise);u2o=r(sHr,"unispeech"),sHr.forEach(t),_2o=r(fwe," \u2014 "),mq=n(fwe,"A",{href:!0});var lHr=s(mq);b2o=r(lHr,"UniSpeechForPreTraining"),lHr.forEach(t),v2o=r(fwe," (UniSpeech model)"),fwe.forEach(t),F2o=i(V),Ju=n(V,"LI",{});var mwe=s(Ju);dse=n(mwe,"STRONG",{});var iHr=s(dse);T2o=r(iHr,"unispeech-sat"),iHr.forEach(t),M2o=r(mwe," \u2014 "),gq=n(mwe,"A",{href:!0});var dHr=s(gq);E2o=r(dHr,"UniSpeechSatForPreTraining"),dHr.forEach(t),C2o=r(mwe," (UniSpeechSat model)"),mwe.forEach(t),w2o=i(V),Yu=n(V,"LI",{});var gwe=s(Yu);cse=n(gwe,"STRONG",{});var cHr=s(cse);A2o=r(cHr,"visual_bert"),cHr.forEach(t),y2o=r(gwe," \u2014 "),hq=n(gwe,"A",{href:!0});var fHr=s(hq);L2o=r(fHr,"VisualBertForPreTraining"),fHr.forEach(t),x2o=r(gwe," (VisualBert model)"),gwe.forEach(t),$2o=i(V),Ku=n(V,"LI",{});var hwe=s(Ku);fse=n(hwe,"STRONG",{});var mHr=s(fse);k2o=r(mHr,"vit_mae"),mHr.forEach(t),S2o=r(hwe," \u2014 "),pq=n(hwe,"A",{href:!0});var gHr=s(pq);R2o=r(gHr,"ViTMAEForPreTraining"),gHr.forEach(t),B2o=r(hwe," (ViTMAE model)"),hwe.forEach(t),P2o=i(V),Zu=n(V,"LI",{});var pwe=s(Zu);mse=n(pwe,"STRONG",{});var hHr=s(mse);I2o=r(hHr,"wav2vec2"),hHr.forEach(t),q2o=r(pwe," \u2014 "),uq=n(pwe,"A",{href:!0});var pHr=s(uq);N2o=r(pHr,"Wav2Vec2ForPreTraining"),pHr.forEach(t),j2o=r(pwe," (Wav2Vec2 model)"),pwe.forEach(t),D2o=i(V),e_=n(V,"LI",{});var uwe=s(e_);gse=n(uwe,"STRONG",{});var uHr=s(gse);G2o=r(uHr,"xlm"),uHr.forEach(t),O2o=r(uwe," \u2014 "),_q=n(uwe,"A",{href:!0});var _Hr=s(_q);V2o=r(_Hr,"XLMWithLMHeadModel"),_Hr.forEach(t),X2o=r(uwe," (XLM model)"),uwe.forEach(t),z2o=i(V),o_=n(V,"LI",{});var _we=s(o_);hse=n(_we,"STRONG",{});var bHr=s(hse);Q2o=r(bHr,"xlm-roberta"),bHr.forEach(t),W2o=r(_we," \u2014 "),bq=n(_we,"A",{href:!0});var vHr=s(bq);H2o=r(vHr,"XLMRobertaForMaskedLM"),vHr.forEach(t),U2o=r(_we," (XLM-RoBERTa model)"),_we.forEach(t),J2o=i(V),r_=n(V,"LI",{});var bwe=s(r_);pse=n(bwe,"STRONG",{});var FHr=s(pse);Y2o=r(FHr,"xlm-roberta-xl"),FHr.forEach(t),K2o=r(bwe," \u2014 "),vq=n(bwe,"A",{href:!0});var THr=s(vq);Z2o=r(THr,"XLMRobertaXLForMaskedLM"),THr.forEach(t),e5o=r(bwe," (XLM-RoBERTa-XL model)"),bwe.forEach(t),o5o=i(V),t_=n(V,"LI",{});var vwe=s(t_);use=n(vwe,"STRONG",{});var MHr=s(use);r5o=r(MHr,"xlnet"),MHr.forEach(t),t5o=r(vwe," \u2014 "),Fq=n(vwe,"A",{href:!0});var EHr=s(Fq);a5o=r(EHr,"XLNetLMHeadModel"),EHr.forEach(t),n5o=r(vwe," (XLNet model)"),vwe.forEach(t),V.forEach(t),s5o=i(Yt),a_=n(Yt,"P",{});var Fwe=s(a_);l5o=r(Fwe,"The model is set in evaluation mode by default using "),_se=n(Fwe,"CODE",{});var CHr=s(_se);i5o=r(CHr,"model.eval()"),CHr.forEach(t),d5o=r(Fwe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),bse=n(Fwe,"CODE",{});var wHr=s(bse);c5o=r(wHr,"model.train()"),wHr.forEach(t),Fwe.forEach(t),f5o=i(Yt),T(n_.$$.fragment,Yt),Yt.forEach(t),Is.forEach(t),KRe=i(f),Ti=n(f,"H2",{class:!0});var eIe=s(Ti);s_=n(eIe,"A",{id:!0,class:!0,href:!0});var AHr=s(s_);vse=n(AHr,"SPAN",{});var yHr=s(vse);T(YA.$$.fragment,yHr),yHr.forEach(t),AHr.forEach(t),m5o=i(eIe),Fse=n(eIe,"SPAN",{});var LHr=s(Fse);g5o=r(LHr,"AutoModelForCausalLM"),LHr.forEach(t),eIe.forEach(t),ZRe=i(f),xo=n(f,"DIV",{class:!0});var qs=s(xo);T(KA.$$.fragment,qs),h5o=i(qs),Mi=n(qs,"P",{});var ZJ=s(Mi);p5o=r(ZJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Tq=n(ZJ,"A",{href:!0});var xHr=s(Tq);u5o=r(xHr,"from_pretrained()"),xHr.forEach(t),_5o=r(ZJ," class method or the "),Mq=n(ZJ,"A",{href:!0});var $Hr=s(Mq);b5o=r($Hr,"from_config()"),$Hr.forEach(t),v5o=r(ZJ,` class
method.`),ZJ.forEach(t),F5o=i(qs),ZA=n(qs,"P",{});var oIe=s(ZA);T5o=r(oIe,"This class cannot be instantiated directly using "),Tse=n(oIe,"CODE",{});var kHr=s(Tse);M5o=r(kHr,"__init__()"),kHr.forEach(t),E5o=r(oIe," (throws an error)."),oIe.forEach(t),C5o=i(qs),ot=n(qs,"DIV",{class:!0});var C3=s(ot);T(e0.$$.fragment,C3),w5o=i(C3),Mse=n(C3,"P",{});var SHr=s(Mse);A5o=r(SHr,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),SHr.forEach(t),y5o=i(C3),Ei=n(C3,"P",{});var eY=s(Ei);L5o=r(eY,`Note:
Loading a model from its configuration file does `),Ese=n(eY,"STRONG",{});var RHr=s(Ese);x5o=r(RHr,"not"),RHr.forEach(t),$5o=r(eY,` load the model weights. It only affects the
model\u2019s configuration. Use `),Eq=n(eY,"A",{href:!0});var BHr=s(Eq);k5o=r(BHr,"from_pretrained()"),BHr.forEach(t),S5o=r(eY," to load the model weights."),eY.forEach(t),R5o=i(C3),T(l_.$$.fragment,C3),C3.forEach(t),B5o=i(qs),Ue=n(qs,"DIV",{class:!0});var Kt=s(Ue);T(o0.$$.fragment,Kt),P5o=i(Kt),Cse=n(Kt,"P",{});var PHr=s(Cse);I5o=r(PHr,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),PHr.forEach(t),q5o=i(Kt),wa=n(Kt,"P",{});var w3=s(wa);N5o=r(w3,"The model class to instantiate is selected based on the "),wse=n(w3,"CODE",{});var IHr=s(wse);j5o=r(IHr,"model_type"),IHr.forEach(t),D5o=r(w3,` property of the config object (either
passed as an argument or loaded from `),Ase=n(w3,"CODE",{});var qHr=s(Ase);G5o=r(qHr,"pretrained_model_name_or_path"),qHr.forEach(t),O5o=r(w3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yse=n(w3,"CODE",{});var NHr=s(yse);V5o=r(NHr,"pretrained_model_name_or_path"),NHr.forEach(t),X5o=r(w3,":"),w3.forEach(t),z5o=i(Kt),z=n(Kt,"UL",{});var W=s(z);i_=n(W,"LI",{});var Twe=s(i_);Lse=n(Twe,"STRONG",{});var jHr=s(Lse);Q5o=r(jHr,"bart"),jHr.forEach(t),W5o=r(Twe," \u2014 "),Cq=n(Twe,"A",{href:!0});var DHr=s(Cq);H5o=r(DHr,"BartForCausalLM"),DHr.forEach(t),U5o=r(Twe," (BART model)"),Twe.forEach(t),J5o=i(W),d_=n(W,"LI",{});var Mwe=s(d_);xse=n(Mwe,"STRONG",{});var GHr=s(xse);Y5o=r(GHr,"bert"),GHr.forEach(t),K5o=r(Mwe," \u2014 "),wq=n(Mwe,"A",{href:!0});var OHr=s(wq);Z5o=r(OHr,"BertLMHeadModel"),OHr.forEach(t),evo=r(Mwe," (BERT model)"),Mwe.forEach(t),ovo=i(W),c_=n(W,"LI",{});var Ewe=s(c_);$se=n(Ewe,"STRONG",{});var VHr=s($se);rvo=r(VHr,"bert-generation"),VHr.forEach(t),tvo=r(Ewe," \u2014 "),Aq=n(Ewe,"A",{href:!0});var XHr=s(Aq);avo=r(XHr,"BertGenerationDecoder"),XHr.forEach(t),nvo=r(Ewe," (Bert Generation model)"),Ewe.forEach(t),svo=i(W),f_=n(W,"LI",{});var Cwe=s(f_);kse=n(Cwe,"STRONG",{});var zHr=s(kse);lvo=r(zHr,"big_bird"),zHr.forEach(t),ivo=r(Cwe," \u2014 "),yq=n(Cwe,"A",{href:!0});var QHr=s(yq);dvo=r(QHr,"BigBirdForCausalLM"),QHr.forEach(t),cvo=r(Cwe," (BigBird model)"),Cwe.forEach(t),fvo=i(W),m_=n(W,"LI",{});var wwe=s(m_);Sse=n(wwe,"STRONG",{});var WHr=s(Sse);mvo=r(WHr,"bigbird_pegasus"),WHr.forEach(t),gvo=r(wwe," \u2014 "),Lq=n(wwe,"A",{href:!0});var HHr=s(Lq);hvo=r(HHr,"BigBirdPegasusForCausalLM"),HHr.forEach(t),pvo=r(wwe," (BigBirdPegasus model)"),wwe.forEach(t),uvo=i(W),g_=n(W,"LI",{});var Awe=s(g_);Rse=n(Awe,"STRONG",{});var UHr=s(Rse);_vo=r(UHr,"blenderbot"),UHr.forEach(t),bvo=r(Awe," \u2014 "),xq=n(Awe,"A",{href:!0});var JHr=s(xq);vvo=r(JHr,"BlenderbotForCausalLM"),JHr.forEach(t),Fvo=r(Awe," (Blenderbot model)"),Awe.forEach(t),Tvo=i(W),h_=n(W,"LI",{});var ywe=s(h_);Bse=n(ywe,"STRONG",{});var YHr=s(Bse);Mvo=r(YHr,"blenderbot-small"),YHr.forEach(t),Evo=r(ywe," \u2014 "),$q=n(ywe,"A",{href:!0});var KHr=s($q);Cvo=r(KHr,"BlenderbotSmallForCausalLM"),KHr.forEach(t),wvo=r(ywe," (BlenderbotSmall model)"),ywe.forEach(t),Avo=i(W),p_=n(W,"LI",{});var Lwe=s(p_);Pse=n(Lwe,"STRONG",{});var ZHr=s(Pse);yvo=r(ZHr,"camembert"),ZHr.forEach(t),Lvo=r(Lwe," \u2014 "),kq=n(Lwe,"A",{href:!0});var eUr=s(kq);xvo=r(eUr,"CamembertForCausalLM"),eUr.forEach(t),$vo=r(Lwe," (CamemBERT model)"),Lwe.forEach(t),kvo=i(W),u_=n(W,"LI",{});var xwe=s(u_);Ise=n(xwe,"STRONG",{});var oUr=s(Ise);Svo=r(oUr,"ctrl"),oUr.forEach(t),Rvo=r(xwe," \u2014 "),Sq=n(xwe,"A",{href:!0});var rUr=s(Sq);Bvo=r(rUr,"CTRLLMHeadModel"),rUr.forEach(t),Pvo=r(xwe," (CTRL model)"),xwe.forEach(t),Ivo=i(W),__=n(W,"LI",{});var $we=s(__);qse=n($we,"STRONG",{});var tUr=s(qse);qvo=r(tUr,"data2vec-text"),tUr.forEach(t),Nvo=r($we," \u2014 "),Rq=n($we,"A",{href:!0});var aUr=s(Rq);jvo=r(aUr,"Data2VecTextForCausalLM"),aUr.forEach(t),Dvo=r($we," (Data2VecText model)"),$we.forEach(t),Gvo=i(W),b_=n(W,"LI",{});var kwe=s(b_);Nse=n(kwe,"STRONG",{});var nUr=s(Nse);Ovo=r(nUr,"electra"),nUr.forEach(t),Vvo=r(kwe," \u2014 "),Bq=n(kwe,"A",{href:!0});var sUr=s(Bq);Xvo=r(sUr,"ElectraForCausalLM"),sUr.forEach(t),zvo=r(kwe," (ELECTRA model)"),kwe.forEach(t),Qvo=i(W),v_=n(W,"LI",{});var Swe=s(v_);jse=n(Swe,"STRONG",{});var lUr=s(jse);Wvo=r(lUr,"gpt2"),lUr.forEach(t),Hvo=r(Swe," \u2014 "),Pq=n(Swe,"A",{href:!0});var iUr=s(Pq);Uvo=r(iUr,"GPT2LMHeadModel"),iUr.forEach(t),Jvo=r(Swe," (OpenAI GPT-2 model)"),Swe.forEach(t),Yvo=i(W),F_=n(W,"LI",{});var Rwe=s(F_);Dse=n(Rwe,"STRONG",{});var dUr=s(Dse);Kvo=r(dUr,"gpt_neo"),dUr.forEach(t),Zvo=r(Rwe," \u2014 "),Iq=n(Rwe,"A",{href:!0});var cUr=s(Iq);eFo=r(cUr,"GPTNeoForCausalLM"),cUr.forEach(t),oFo=r(Rwe," (GPT Neo model)"),Rwe.forEach(t),rFo=i(W),T_=n(W,"LI",{});var Bwe=s(T_);Gse=n(Bwe,"STRONG",{});var fUr=s(Gse);tFo=r(fUr,"gptj"),fUr.forEach(t),aFo=r(Bwe," \u2014 "),qq=n(Bwe,"A",{href:!0});var mUr=s(qq);nFo=r(mUr,"GPTJForCausalLM"),mUr.forEach(t),sFo=r(Bwe," (GPT-J model)"),Bwe.forEach(t),lFo=i(W),M_=n(W,"LI",{});var Pwe=s(M_);Ose=n(Pwe,"STRONG",{});var gUr=s(Ose);iFo=r(gUr,"marian"),gUr.forEach(t),dFo=r(Pwe," \u2014 "),Nq=n(Pwe,"A",{href:!0});var hUr=s(Nq);cFo=r(hUr,"MarianForCausalLM"),hUr.forEach(t),fFo=r(Pwe," (Marian model)"),Pwe.forEach(t),mFo=i(W),E_=n(W,"LI",{});var Iwe=s(E_);Vse=n(Iwe,"STRONG",{});var pUr=s(Vse);gFo=r(pUr,"mbart"),pUr.forEach(t),hFo=r(Iwe," \u2014 "),jq=n(Iwe,"A",{href:!0});var uUr=s(jq);pFo=r(uUr,"MBartForCausalLM"),uUr.forEach(t),uFo=r(Iwe," (mBART model)"),Iwe.forEach(t),_Fo=i(W),C_=n(W,"LI",{});var qwe=s(C_);Xse=n(qwe,"STRONG",{});var _Ur=s(Xse);bFo=r(_Ur,"megatron-bert"),_Ur.forEach(t),vFo=r(qwe," \u2014 "),Dq=n(qwe,"A",{href:!0});var bUr=s(Dq);FFo=r(bUr,"MegatronBertForCausalLM"),bUr.forEach(t),TFo=r(qwe," (MegatronBert model)"),qwe.forEach(t),MFo=i(W),w_=n(W,"LI",{});var Nwe=s(w_);zse=n(Nwe,"STRONG",{});var vUr=s(zse);EFo=r(vUr,"openai-gpt"),vUr.forEach(t),CFo=r(Nwe," \u2014 "),Gq=n(Nwe,"A",{href:!0});var FUr=s(Gq);wFo=r(FUr,"OpenAIGPTLMHeadModel"),FUr.forEach(t),AFo=r(Nwe," (OpenAI GPT model)"),Nwe.forEach(t),yFo=i(W),A_=n(W,"LI",{});var jwe=s(A_);Qse=n(jwe,"STRONG",{});var TUr=s(Qse);LFo=r(TUr,"pegasus"),TUr.forEach(t),xFo=r(jwe," \u2014 "),Oq=n(jwe,"A",{href:!0});var MUr=s(Oq);$Fo=r(MUr,"PegasusForCausalLM"),MUr.forEach(t),kFo=r(jwe," (Pegasus model)"),jwe.forEach(t),SFo=i(W),y_=n(W,"LI",{});var Dwe=s(y_);Wse=n(Dwe,"STRONG",{});var EUr=s(Wse);RFo=r(EUr,"plbart"),EUr.forEach(t),BFo=r(Dwe," \u2014 "),Vq=n(Dwe,"A",{href:!0});var CUr=s(Vq);PFo=r(CUr,"PLBartForCausalLM"),CUr.forEach(t),IFo=r(Dwe," (PLBart model)"),Dwe.forEach(t),qFo=i(W),L_=n(W,"LI",{});var Gwe=s(L_);Hse=n(Gwe,"STRONG",{});var wUr=s(Hse);NFo=r(wUr,"prophetnet"),wUr.forEach(t),jFo=r(Gwe," \u2014 "),Xq=n(Gwe,"A",{href:!0});var AUr=s(Xq);DFo=r(AUr,"ProphetNetForCausalLM"),AUr.forEach(t),GFo=r(Gwe," (ProphetNet model)"),Gwe.forEach(t),OFo=i(W),x_=n(W,"LI",{});var Owe=s(x_);Use=n(Owe,"STRONG",{});var yUr=s(Use);VFo=r(yUr,"qdqbert"),yUr.forEach(t),XFo=r(Owe," \u2014 "),zq=n(Owe,"A",{href:!0});var LUr=s(zq);zFo=r(LUr,"QDQBertLMHeadModel"),LUr.forEach(t),QFo=r(Owe," (QDQBert model)"),Owe.forEach(t),WFo=i(W),$_=n(W,"LI",{});var Vwe=s($_);Jse=n(Vwe,"STRONG",{});var xUr=s(Jse);HFo=r(xUr,"reformer"),xUr.forEach(t),UFo=r(Vwe," \u2014 "),Qq=n(Vwe,"A",{href:!0});var $Ur=s(Qq);JFo=r($Ur,"ReformerModelWithLMHead"),$Ur.forEach(t),YFo=r(Vwe," (Reformer model)"),Vwe.forEach(t),KFo=i(W),k_=n(W,"LI",{});var Xwe=s(k_);Yse=n(Xwe,"STRONG",{});var kUr=s(Yse);ZFo=r(kUr,"rembert"),kUr.forEach(t),e6o=r(Xwe," \u2014 "),Wq=n(Xwe,"A",{href:!0});var SUr=s(Wq);o6o=r(SUr,"RemBertForCausalLM"),SUr.forEach(t),r6o=r(Xwe," (RemBERT model)"),Xwe.forEach(t),t6o=i(W),S_=n(W,"LI",{});var zwe=s(S_);Kse=n(zwe,"STRONG",{});var RUr=s(Kse);a6o=r(RUr,"roberta"),RUr.forEach(t),n6o=r(zwe," \u2014 "),Hq=n(zwe,"A",{href:!0});var BUr=s(Hq);s6o=r(BUr,"RobertaForCausalLM"),BUr.forEach(t),l6o=r(zwe," (RoBERTa model)"),zwe.forEach(t),i6o=i(W),R_=n(W,"LI",{});var Qwe=s(R_);Zse=n(Qwe,"STRONG",{});var PUr=s(Zse);d6o=r(PUr,"roformer"),PUr.forEach(t),c6o=r(Qwe," \u2014 "),Uq=n(Qwe,"A",{href:!0});var IUr=s(Uq);f6o=r(IUr,"RoFormerForCausalLM"),IUr.forEach(t),m6o=r(Qwe," (RoFormer model)"),Qwe.forEach(t),g6o=i(W),B_=n(W,"LI",{});var Wwe=s(B_);ele=n(Wwe,"STRONG",{});var qUr=s(ele);h6o=r(qUr,"speech_to_text_2"),qUr.forEach(t),p6o=r(Wwe," \u2014 "),Jq=n(Wwe,"A",{href:!0});var NUr=s(Jq);u6o=r(NUr,"Speech2Text2ForCausalLM"),NUr.forEach(t),_6o=r(Wwe," (Speech2Text2 model)"),Wwe.forEach(t),b6o=i(W),P_=n(W,"LI",{});var Hwe=s(P_);ole=n(Hwe,"STRONG",{});var jUr=s(ole);v6o=r(jUr,"transfo-xl"),jUr.forEach(t),F6o=r(Hwe," \u2014 "),Yq=n(Hwe,"A",{href:!0});var DUr=s(Yq);T6o=r(DUr,"TransfoXLLMHeadModel"),DUr.forEach(t),M6o=r(Hwe," (Transformer-XL model)"),Hwe.forEach(t),E6o=i(W),I_=n(W,"LI",{});var Uwe=s(I_);rle=n(Uwe,"STRONG",{});var GUr=s(rle);C6o=r(GUr,"trocr"),GUr.forEach(t),w6o=r(Uwe," \u2014 "),Kq=n(Uwe,"A",{href:!0});var OUr=s(Kq);A6o=r(OUr,"TrOCRForCausalLM"),OUr.forEach(t),y6o=r(Uwe," (TrOCR model)"),Uwe.forEach(t),L6o=i(W),q_=n(W,"LI",{});var Jwe=s(q_);tle=n(Jwe,"STRONG",{});var VUr=s(tle);x6o=r(VUr,"xglm"),VUr.forEach(t),$6o=r(Jwe," \u2014 "),Zq=n(Jwe,"A",{href:!0});var XUr=s(Zq);k6o=r(XUr,"XGLMForCausalLM"),XUr.forEach(t),S6o=r(Jwe," (XGLM model)"),Jwe.forEach(t),R6o=i(W),N_=n(W,"LI",{});var Ywe=s(N_);ale=n(Ywe,"STRONG",{});var zUr=s(ale);B6o=r(zUr,"xlm"),zUr.forEach(t),P6o=r(Ywe," \u2014 "),eN=n(Ywe,"A",{href:!0});var QUr=s(eN);I6o=r(QUr,"XLMWithLMHeadModel"),QUr.forEach(t),q6o=r(Ywe," (XLM model)"),Ywe.forEach(t),N6o=i(W),j_=n(W,"LI",{});var Kwe=s(j_);nle=n(Kwe,"STRONG",{});var WUr=s(nle);j6o=r(WUr,"xlm-prophetnet"),WUr.forEach(t),D6o=r(Kwe," \u2014 "),oN=n(Kwe,"A",{href:!0});var HUr=s(oN);G6o=r(HUr,"XLMProphetNetForCausalLM"),HUr.forEach(t),O6o=r(Kwe," (XLMProphetNet model)"),Kwe.forEach(t),V6o=i(W),D_=n(W,"LI",{});var Zwe=s(D_);sle=n(Zwe,"STRONG",{});var UUr=s(sle);X6o=r(UUr,"xlm-roberta"),UUr.forEach(t),z6o=r(Zwe," \u2014 "),rN=n(Zwe,"A",{href:!0});var JUr=s(rN);Q6o=r(JUr,"XLMRobertaForCausalLM"),JUr.forEach(t),W6o=r(Zwe," (XLM-RoBERTa model)"),Zwe.forEach(t),H6o=i(W),G_=n(W,"LI",{});var eAe=s(G_);lle=n(eAe,"STRONG",{});var YUr=s(lle);U6o=r(YUr,"xlm-roberta-xl"),YUr.forEach(t),J6o=r(eAe," \u2014 "),tN=n(eAe,"A",{href:!0});var KUr=s(tN);Y6o=r(KUr,"XLMRobertaXLForCausalLM"),KUr.forEach(t),K6o=r(eAe," (XLM-RoBERTa-XL model)"),eAe.forEach(t),Z6o=i(W),O_=n(W,"LI",{});var oAe=s(O_);ile=n(oAe,"STRONG",{});var ZUr=s(ile);eTo=r(ZUr,"xlnet"),ZUr.forEach(t),oTo=r(oAe," \u2014 "),aN=n(oAe,"A",{href:!0});var eJr=s(aN);rTo=r(eJr,"XLNetLMHeadModel"),eJr.forEach(t),tTo=r(oAe," (XLNet model)"),oAe.forEach(t),W.forEach(t),aTo=i(Kt),V_=n(Kt,"P",{});var rAe=s(V_);nTo=r(rAe,"The model is set in evaluation mode by default using "),dle=n(rAe,"CODE",{});var oJr=s(dle);sTo=r(oJr,"model.eval()"),oJr.forEach(t),lTo=r(rAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),cle=n(rAe,"CODE",{});var rJr=s(cle);iTo=r(rJr,"model.train()"),rJr.forEach(t),rAe.forEach(t),dTo=i(Kt),T(X_.$$.fragment,Kt),Kt.forEach(t),qs.forEach(t),eBe=i(f),Ci=n(f,"H2",{class:!0});var rIe=s(Ci);z_=n(rIe,"A",{id:!0,class:!0,href:!0});var tJr=s(z_);fle=n(tJr,"SPAN",{});var aJr=s(fle);T(r0.$$.fragment,aJr),aJr.forEach(t),tJr.forEach(t),cTo=i(rIe),mle=n(rIe,"SPAN",{});var nJr=s(mle);fTo=r(nJr,"AutoModelForMaskedLM"),nJr.forEach(t),rIe.forEach(t),oBe=i(f),$o=n(f,"DIV",{class:!0});var Ns=s($o);T(t0.$$.fragment,Ns),mTo=i(Ns),wi=n(Ns,"P",{});var oY=s(wi);gTo=r(oY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),nN=n(oY,"A",{href:!0});var sJr=s(nN);hTo=r(sJr,"from_pretrained()"),sJr.forEach(t),pTo=r(oY," class method or the "),sN=n(oY,"A",{href:!0});var lJr=s(sN);uTo=r(lJr,"from_config()"),lJr.forEach(t),_To=r(oY,` class
method.`),oY.forEach(t),bTo=i(Ns),a0=n(Ns,"P",{});var tIe=s(a0);vTo=r(tIe,"This class cannot be instantiated directly using "),gle=n(tIe,"CODE",{});var iJr=s(gle);FTo=r(iJr,"__init__()"),iJr.forEach(t),TTo=r(tIe," (throws an error)."),tIe.forEach(t),MTo=i(Ns),rt=n(Ns,"DIV",{class:!0});var A3=s(rt);T(n0.$$.fragment,A3),ETo=i(A3),hle=n(A3,"P",{});var dJr=s(hle);CTo=r(dJr,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),dJr.forEach(t),wTo=i(A3),Ai=n(A3,"P",{});var rY=s(Ai);ATo=r(rY,`Note:
Loading a model from its configuration file does `),ple=n(rY,"STRONG",{});var cJr=s(ple);yTo=r(cJr,"not"),cJr.forEach(t),LTo=r(rY,` load the model weights. It only affects the
model\u2019s configuration. Use `),lN=n(rY,"A",{href:!0});var fJr=s(lN);xTo=r(fJr,"from_pretrained()"),fJr.forEach(t),$To=r(rY," to load the model weights."),rY.forEach(t),kTo=i(A3),T(Q_.$$.fragment,A3),A3.forEach(t),STo=i(Ns),Je=n(Ns,"DIV",{class:!0});var Zt=s(Je);T(s0.$$.fragment,Zt),RTo=i(Zt),ule=n(Zt,"P",{});var mJr=s(ule);BTo=r(mJr,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),mJr.forEach(t),PTo=i(Zt),Aa=n(Zt,"P",{});var y3=s(Aa);ITo=r(y3,"The model class to instantiate is selected based on the "),_le=n(y3,"CODE",{});var gJr=s(_le);qTo=r(gJr,"model_type"),gJr.forEach(t),NTo=r(y3,` property of the config object (either
passed as an argument or loaded from `),ble=n(y3,"CODE",{});var hJr=s(ble);jTo=r(hJr,"pretrained_model_name_or_path"),hJr.forEach(t),DTo=r(y3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vle=n(y3,"CODE",{});var pJr=s(vle);GTo=r(pJr,"pretrained_model_name_or_path"),pJr.forEach(t),OTo=r(y3,":"),y3.forEach(t),VTo=i(Zt),Q=n(Zt,"UL",{});var H=s(Q);W_=n(H,"LI",{});var tAe=s(W_);Fle=n(tAe,"STRONG",{});var uJr=s(Fle);XTo=r(uJr,"albert"),uJr.forEach(t),zTo=r(tAe," \u2014 "),iN=n(tAe,"A",{href:!0});var _Jr=s(iN);QTo=r(_Jr,"AlbertForMaskedLM"),_Jr.forEach(t),WTo=r(tAe," (ALBERT model)"),tAe.forEach(t),HTo=i(H),H_=n(H,"LI",{});var aAe=s(H_);Tle=n(aAe,"STRONG",{});var bJr=s(Tle);UTo=r(bJr,"bart"),bJr.forEach(t),JTo=r(aAe," \u2014 "),dN=n(aAe,"A",{href:!0});var vJr=s(dN);YTo=r(vJr,"BartForConditionalGeneration"),vJr.forEach(t),KTo=r(aAe," (BART model)"),aAe.forEach(t),ZTo=i(H),U_=n(H,"LI",{});var nAe=s(U_);Mle=n(nAe,"STRONG",{});var FJr=s(Mle);eMo=r(FJr,"bert"),FJr.forEach(t),oMo=r(nAe," \u2014 "),cN=n(nAe,"A",{href:!0});var TJr=s(cN);rMo=r(TJr,"BertForMaskedLM"),TJr.forEach(t),tMo=r(nAe," (BERT model)"),nAe.forEach(t),aMo=i(H),J_=n(H,"LI",{});var sAe=s(J_);Ele=n(sAe,"STRONG",{});var MJr=s(Ele);nMo=r(MJr,"big_bird"),MJr.forEach(t),sMo=r(sAe," \u2014 "),fN=n(sAe,"A",{href:!0});var EJr=s(fN);lMo=r(EJr,"BigBirdForMaskedLM"),EJr.forEach(t),iMo=r(sAe," (BigBird model)"),sAe.forEach(t),dMo=i(H),Y_=n(H,"LI",{});var lAe=s(Y_);Cle=n(lAe,"STRONG",{});var CJr=s(Cle);cMo=r(CJr,"camembert"),CJr.forEach(t),fMo=r(lAe," \u2014 "),mN=n(lAe,"A",{href:!0});var wJr=s(mN);mMo=r(wJr,"CamembertForMaskedLM"),wJr.forEach(t),gMo=r(lAe," (CamemBERT model)"),lAe.forEach(t),hMo=i(H),K_=n(H,"LI",{});var iAe=s(K_);wle=n(iAe,"STRONG",{});var AJr=s(wle);pMo=r(AJr,"convbert"),AJr.forEach(t),uMo=r(iAe," \u2014 "),gN=n(iAe,"A",{href:!0});var yJr=s(gN);_Mo=r(yJr,"ConvBertForMaskedLM"),yJr.forEach(t),bMo=r(iAe," (ConvBERT model)"),iAe.forEach(t),vMo=i(H),Z_=n(H,"LI",{});var dAe=s(Z_);Ale=n(dAe,"STRONG",{});var LJr=s(Ale);FMo=r(LJr,"data2vec-text"),LJr.forEach(t),TMo=r(dAe," \u2014 "),hN=n(dAe,"A",{href:!0});var xJr=s(hN);MMo=r(xJr,"Data2VecTextForMaskedLM"),xJr.forEach(t),EMo=r(dAe," (Data2VecText model)"),dAe.forEach(t),CMo=i(H),e1=n(H,"LI",{});var cAe=s(e1);yle=n(cAe,"STRONG",{});var $Jr=s(yle);wMo=r($Jr,"deberta"),$Jr.forEach(t),AMo=r(cAe," \u2014 "),pN=n(cAe,"A",{href:!0});var kJr=s(pN);yMo=r(kJr,"DebertaForMaskedLM"),kJr.forEach(t),LMo=r(cAe," (DeBERTa model)"),cAe.forEach(t),xMo=i(H),o1=n(H,"LI",{});var fAe=s(o1);Lle=n(fAe,"STRONG",{});var SJr=s(Lle);$Mo=r(SJr,"deberta-v2"),SJr.forEach(t),kMo=r(fAe," \u2014 "),uN=n(fAe,"A",{href:!0});var RJr=s(uN);SMo=r(RJr,"DebertaV2ForMaskedLM"),RJr.forEach(t),RMo=r(fAe," (DeBERTa-v2 model)"),fAe.forEach(t),BMo=i(H),r1=n(H,"LI",{});var mAe=s(r1);xle=n(mAe,"STRONG",{});var BJr=s(xle);PMo=r(BJr,"distilbert"),BJr.forEach(t),IMo=r(mAe," \u2014 "),_N=n(mAe,"A",{href:!0});var PJr=s(_N);qMo=r(PJr,"DistilBertForMaskedLM"),PJr.forEach(t),NMo=r(mAe," (DistilBERT model)"),mAe.forEach(t),jMo=i(H),t1=n(H,"LI",{});var gAe=s(t1);$le=n(gAe,"STRONG",{});var IJr=s($le);DMo=r(IJr,"electra"),IJr.forEach(t),GMo=r(gAe," \u2014 "),bN=n(gAe,"A",{href:!0});var qJr=s(bN);OMo=r(qJr,"ElectraForMaskedLM"),qJr.forEach(t),VMo=r(gAe," (ELECTRA model)"),gAe.forEach(t),XMo=i(H),a1=n(H,"LI",{});var hAe=s(a1);kle=n(hAe,"STRONG",{});var NJr=s(kle);zMo=r(NJr,"flaubert"),NJr.forEach(t),QMo=r(hAe," \u2014 "),vN=n(hAe,"A",{href:!0});var jJr=s(vN);WMo=r(jJr,"FlaubertWithLMHeadModel"),jJr.forEach(t),HMo=r(hAe," (FlauBERT model)"),hAe.forEach(t),UMo=i(H),n1=n(H,"LI",{});var pAe=s(n1);Sle=n(pAe,"STRONG",{});var DJr=s(Sle);JMo=r(DJr,"fnet"),DJr.forEach(t),YMo=r(pAe," \u2014 "),FN=n(pAe,"A",{href:!0});var GJr=s(FN);KMo=r(GJr,"FNetForMaskedLM"),GJr.forEach(t),ZMo=r(pAe," (FNet model)"),pAe.forEach(t),e4o=i(H),s1=n(H,"LI",{});var uAe=s(s1);Rle=n(uAe,"STRONG",{});var OJr=s(Rle);o4o=r(OJr,"funnel"),OJr.forEach(t),r4o=r(uAe," \u2014 "),TN=n(uAe,"A",{href:!0});var VJr=s(TN);t4o=r(VJr,"FunnelForMaskedLM"),VJr.forEach(t),a4o=r(uAe," (Funnel Transformer model)"),uAe.forEach(t),n4o=i(H),l1=n(H,"LI",{});var _Ae=s(l1);Ble=n(_Ae,"STRONG",{});var XJr=s(Ble);s4o=r(XJr,"ibert"),XJr.forEach(t),l4o=r(_Ae," \u2014 "),MN=n(_Ae,"A",{href:!0});var zJr=s(MN);i4o=r(zJr,"IBertForMaskedLM"),zJr.forEach(t),d4o=r(_Ae," (I-BERT model)"),_Ae.forEach(t),c4o=i(H),i1=n(H,"LI",{});var bAe=s(i1);Ple=n(bAe,"STRONG",{});var QJr=s(Ple);f4o=r(QJr,"layoutlm"),QJr.forEach(t),m4o=r(bAe," \u2014 "),EN=n(bAe,"A",{href:!0});var WJr=s(EN);g4o=r(WJr,"LayoutLMForMaskedLM"),WJr.forEach(t),h4o=r(bAe," (LayoutLM model)"),bAe.forEach(t),p4o=i(H),d1=n(H,"LI",{});var vAe=s(d1);Ile=n(vAe,"STRONG",{});var HJr=s(Ile);u4o=r(HJr,"longformer"),HJr.forEach(t),_4o=r(vAe," \u2014 "),CN=n(vAe,"A",{href:!0});var UJr=s(CN);b4o=r(UJr,"LongformerForMaskedLM"),UJr.forEach(t),v4o=r(vAe," (Longformer model)"),vAe.forEach(t),F4o=i(H),c1=n(H,"LI",{});var FAe=s(c1);qle=n(FAe,"STRONG",{});var JJr=s(qle);T4o=r(JJr,"mbart"),JJr.forEach(t),M4o=r(FAe," \u2014 "),wN=n(FAe,"A",{href:!0});var YJr=s(wN);E4o=r(YJr,"MBartForConditionalGeneration"),YJr.forEach(t),C4o=r(FAe," (mBART model)"),FAe.forEach(t),w4o=i(H),f1=n(H,"LI",{});var TAe=s(f1);Nle=n(TAe,"STRONG",{});var KJr=s(Nle);A4o=r(KJr,"megatron-bert"),KJr.forEach(t),y4o=r(TAe," \u2014 "),AN=n(TAe,"A",{href:!0});var ZJr=s(AN);L4o=r(ZJr,"MegatronBertForMaskedLM"),ZJr.forEach(t),x4o=r(TAe," (MegatronBert model)"),TAe.forEach(t),$4o=i(H),m1=n(H,"LI",{});var MAe=s(m1);jle=n(MAe,"STRONG",{});var eYr=s(jle);k4o=r(eYr,"mobilebert"),eYr.forEach(t),S4o=r(MAe," \u2014 "),yN=n(MAe,"A",{href:!0});var oYr=s(yN);R4o=r(oYr,"MobileBertForMaskedLM"),oYr.forEach(t),B4o=r(MAe," (MobileBERT model)"),MAe.forEach(t),P4o=i(H),g1=n(H,"LI",{});var EAe=s(g1);Dle=n(EAe,"STRONG",{});var rYr=s(Dle);I4o=r(rYr,"mpnet"),rYr.forEach(t),q4o=r(EAe," \u2014 "),LN=n(EAe,"A",{href:!0});var tYr=s(LN);N4o=r(tYr,"MPNetForMaskedLM"),tYr.forEach(t),j4o=r(EAe," (MPNet model)"),EAe.forEach(t),D4o=i(H),h1=n(H,"LI",{});var CAe=s(h1);Gle=n(CAe,"STRONG",{});var aYr=s(Gle);G4o=r(aYr,"nystromformer"),aYr.forEach(t),O4o=r(CAe," \u2014 "),xN=n(CAe,"A",{href:!0});var nYr=s(xN);V4o=r(nYr,"NystromformerForMaskedLM"),nYr.forEach(t),X4o=r(CAe," (Nystromformer model)"),CAe.forEach(t),z4o=i(H),p1=n(H,"LI",{});var wAe=s(p1);Ole=n(wAe,"STRONG",{});var sYr=s(Ole);Q4o=r(sYr,"perceiver"),sYr.forEach(t),W4o=r(wAe," \u2014 "),$N=n(wAe,"A",{href:!0});var lYr=s($N);H4o=r(lYr,"PerceiverForMaskedLM"),lYr.forEach(t),U4o=r(wAe," (Perceiver model)"),wAe.forEach(t),J4o=i(H),u1=n(H,"LI",{});var AAe=s(u1);Vle=n(AAe,"STRONG",{});var iYr=s(Vle);Y4o=r(iYr,"qdqbert"),iYr.forEach(t),K4o=r(AAe," \u2014 "),kN=n(AAe,"A",{href:!0});var dYr=s(kN);Z4o=r(dYr,"QDQBertForMaskedLM"),dYr.forEach(t),eEo=r(AAe," (QDQBert model)"),AAe.forEach(t),oEo=i(H),_1=n(H,"LI",{});var yAe=s(_1);Xle=n(yAe,"STRONG",{});var cYr=s(Xle);rEo=r(cYr,"reformer"),cYr.forEach(t),tEo=r(yAe," \u2014 "),SN=n(yAe,"A",{href:!0});var fYr=s(SN);aEo=r(fYr,"ReformerForMaskedLM"),fYr.forEach(t),nEo=r(yAe," (Reformer model)"),yAe.forEach(t),sEo=i(H),b1=n(H,"LI",{});var LAe=s(b1);zle=n(LAe,"STRONG",{});var mYr=s(zle);lEo=r(mYr,"rembert"),mYr.forEach(t),iEo=r(LAe," \u2014 "),RN=n(LAe,"A",{href:!0});var gYr=s(RN);dEo=r(gYr,"RemBertForMaskedLM"),gYr.forEach(t),cEo=r(LAe," (RemBERT model)"),LAe.forEach(t),fEo=i(H),v1=n(H,"LI",{});var xAe=s(v1);Qle=n(xAe,"STRONG",{});var hYr=s(Qle);mEo=r(hYr,"roberta"),hYr.forEach(t),gEo=r(xAe," \u2014 "),BN=n(xAe,"A",{href:!0});var pYr=s(BN);hEo=r(pYr,"RobertaForMaskedLM"),pYr.forEach(t),pEo=r(xAe," (RoBERTa model)"),xAe.forEach(t),uEo=i(H),F1=n(H,"LI",{});var $Ae=s(F1);Wle=n($Ae,"STRONG",{});var uYr=s(Wle);_Eo=r(uYr,"roformer"),uYr.forEach(t),bEo=r($Ae," \u2014 "),PN=n($Ae,"A",{href:!0});var _Yr=s(PN);vEo=r(_Yr,"RoFormerForMaskedLM"),_Yr.forEach(t),FEo=r($Ae," (RoFormer model)"),$Ae.forEach(t),TEo=i(H),T1=n(H,"LI",{});var kAe=s(T1);Hle=n(kAe,"STRONG",{});var bYr=s(Hle);MEo=r(bYr,"squeezebert"),bYr.forEach(t),EEo=r(kAe," \u2014 "),IN=n(kAe,"A",{href:!0});var vYr=s(IN);CEo=r(vYr,"SqueezeBertForMaskedLM"),vYr.forEach(t),wEo=r(kAe," (SqueezeBERT model)"),kAe.forEach(t),AEo=i(H),M1=n(H,"LI",{});var SAe=s(M1);Ule=n(SAe,"STRONG",{});var FYr=s(Ule);yEo=r(FYr,"tapas"),FYr.forEach(t),LEo=r(SAe," \u2014 "),qN=n(SAe,"A",{href:!0});var TYr=s(qN);xEo=r(TYr,"TapasForMaskedLM"),TYr.forEach(t),$Eo=r(SAe," (TAPAS model)"),SAe.forEach(t),kEo=i(H),E1=n(H,"LI",{});var RAe=s(E1);Jle=n(RAe,"STRONG",{});var MYr=s(Jle);SEo=r(MYr,"wav2vec2"),MYr.forEach(t),REo=r(RAe," \u2014 "),Yle=n(RAe,"CODE",{});var EYr=s(Yle);BEo=r(EYr,"Wav2Vec2ForMaskedLM"),EYr.forEach(t),PEo=r(RAe," (Wav2Vec2 model)"),RAe.forEach(t),IEo=i(H),C1=n(H,"LI",{});var BAe=s(C1);Kle=n(BAe,"STRONG",{});var CYr=s(Kle);qEo=r(CYr,"xlm"),CYr.forEach(t),NEo=r(BAe," \u2014 "),NN=n(BAe,"A",{href:!0});var wYr=s(NN);jEo=r(wYr,"XLMWithLMHeadModel"),wYr.forEach(t),DEo=r(BAe," (XLM model)"),BAe.forEach(t),GEo=i(H),w1=n(H,"LI",{});var PAe=s(w1);Zle=n(PAe,"STRONG",{});var AYr=s(Zle);OEo=r(AYr,"xlm-roberta"),AYr.forEach(t),VEo=r(PAe," \u2014 "),jN=n(PAe,"A",{href:!0});var yYr=s(jN);XEo=r(yYr,"XLMRobertaForMaskedLM"),yYr.forEach(t),zEo=r(PAe," (XLM-RoBERTa model)"),PAe.forEach(t),QEo=i(H),A1=n(H,"LI",{});var IAe=s(A1);eie=n(IAe,"STRONG",{});var LYr=s(eie);WEo=r(LYr,"xlm-roberta-xl"),LYr.forEach(t),HEo=r(IAe," \u2014 "),DN=n(IAe,"A",{href:!0});var xYr=s(DN);UEo=r(xYr,"XLMRobertaXLForMaskedLM"),xYr.forEach(t),JEo=r(IAe," (XLM-RoBERTa-XL model)"),IAe.forEach(t),YEo=i(H),y1=n(H,"LI",{});var qAe=s(y1);oie=n(qAe,"STRONG",{});var $Yr=s(oie);KEo=r($Yr,"yoso"),$Yr.forEach(t),ZEo=r(qAe," \u2014 "),GN=n(qAe,"A",{href:!0});var kYr=s(GN);eCo=r(kYr,"YosoForMaskedLM"),kYr.forEach(t),oCo=r(qAe," (YOSO model)"),qAe.forEach(t),H.forEach(t),rCo=i(Zt),L1=n(Zt,"P",{});var NAe=s(L1);tCo=r(NAe,"The model is set in evaluation mode by default using "),rie=n(NAe,"CODE",{});var SYr=s(rie);aCo=r(SYr,"model.eval()"),SYr.forEach(t),nCo=r(NAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),tie=n(NAe,"CODE",{});var RYr=s(tie);sCo=r(RYr,"model.train()"),RYr.forEach(t),NAe.forEach(t),lCo=i(Zt),T(x1.$$.fragment,Zt),Zt.forEach(t),Ns.forEach(t),rBe=i(f),yi=n(f,"H2",{class:!0});var aIe=s(yi);$1=n(aIe,"A",{id:!0,class:!0,href:!0});var BYr=s($1);aie=n(BYr,"SPAN",{});var PYr=s(aie);T(l0.$$.fragment,PYr),PYr.forEach(t),BYr.forEach(t),iCo=i(aIe),nie=n(aIe,"SPAN",{});var IYr=s(nie);dCo=r(IYr,"AutoModelForSeq2SeqLM"),IYr.forEach(t),aIe.forEach(t),tBe=i(f),ko=n(f,"DIV",{class:!0});var js=s(ko);T(i0.$$.fragment,js),cCo=i(js),Li=n(js,"P",{});var tY=s(Li);fCo=r(tY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),ON=n(tY,"A",{href:!0});var qYr=s(ON);mCo=r(qYr,"from_pretrained()"),qYr.forEach(t),gCo=r(tY," class method or the "),VN=n(tY,"A",{href:!0});var NYr=s(VN);hCo=r(NYr,"from_config()"),NYr.forEach(t),pCo=r(tY,` class
method.`),tY.forEach(t),uCo=i(js),d0=n(js,"P",{});var nIe=s(d0);_Co=r(nIe,"This class cannot be instantiated directly using "),sie=n(nIe,"CODE",{});var jYr=s(sie);bCo=r(jYr,"__init__()"),jYr.forEach(t),vCo=r(nIe," (throws an error)."),nIe.forEach(t),FCo=i(js),tt=n(js,"DIV",{class:!0});var L3=s(tt);T(c0.$$.fragment,L3),TCo=i(L3),lie=n(L3,"P",{});var DYr=s(lie);MCo=r(DYr,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),DYr.forEach(t),ECo=i(L3),xi=n(L3,"P",{});var aY=s(xi);CCo=r(aY,`Note:
Loading a model from its configuration file does `),iie=n(aY,"STRONG",{});var GYr=s(iie);wCo=r(GYr,"not"),GYr.forEach(t),ACo=r(aY,` load the model weights. It only affects the
model\u2019s configuration. Use `),XN=n(aY,"A",{href:!0});var OYr=s(XN);yCo=r(OYr,"from_pretrained()"),OYr.forEach(t),LCo=r(aY," to load the model weights."),aY.forEach(t),xCo=i(L3),T(k1.$$.fragment,L3),L3.forEach(t),$Co=i(js),Ye=n(js,"DIV",{class:!0});var ea=s(Ye);T(f0.$$.fragment,ea),kCo=i(ea),die=n(ea,"P",{});var VYr=s(die);SCo=r(VYr,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),VYr.forEach(t),RCo=i(ea),ya=n(ea,"P",{});var x3=s(ya);BCo=r(x3,"The model class to instantiate is selected based on the "),cie=n(x3,"CODE",{});var XYr=s(cie);PCo=r(XYr,"model_type"),XYr.forEach(t),ICo=r(x3,` property of the config object (either
passed as an argument or loaded from `),fie=n(x3,"CODE",{});var zYr=s(fie);qCo=r(zYr,"pretrained_model_name_or_path"),zYr.forEach(t),NCo=r(x3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mie=n(x3,"CODE",{});var QYr=s(mie);jCo=r(QYr,"pretrained_model_name_or_path"),QYr.forEach(t),DCo=r(x3,":"),x3.forEach(t),GCo=i(ea),he=n(ea,"UL",{});var ue=s(he);S1=n(ue,"LI",{});var jAe=s(S1);gie=n(jAe,"STRONG",{});var WYr=s(gie);OCo=r(WYr,"bart"),WYr.forEach(t),VCo=r(jAe," \u2014 "),zN=n(jAe,"A",{href:!0});var HYr=s(zN);XCo=r(HYr,"BartForConditionalGeneration"),HYr.forEach(t),zCo=r(jAe," (BART model)"),jAe.forEach(t),QCo=i(ue),R1=n(ue,"LI",{});var DAe=s(R1);hie=n(DAe,"STRONG",{});var UYr=s(hie);WCo=r(UYr,"bigbird_pegasus"),UYr.forEach(t),HCo=r(DAe," \u2014 "),QN=n(DAe,"A",{href:!0});var JYr=s(QN);UCo=r(JYr,"BigBirdPegasusForConditionalGeneration"),JYr.forEach(t),JCo=r(DAe," (BigBirdPegasus model)"),DAe.forEach(t),YCo=i(ue),B1=n(ue,"LI",{});var GAe=s(B1);pie=n(GAe,"STRONG",{});var YYr=s(pie);KCo=r(YYr,"blenderbot"),YYr.forEach(t),ZCo=r(GAe," \u2014 "),WN=n(GAe,"A",{href:!0});var KYr=s(WN);e3o=r(KYr,"BlenderbotForConditionalGeneration"),KYr.forEach(t),o3o=r(GAe," (Blenderbot model)"),GAe.forEach(t),r3o=i(ue),P1=n(ue,"LI",{});var OAe=s(P1);uie=n(OAe,"STRONG",{});var ZYr=s(uie);t3o=r(ZYr,"blenderbot-small"),ZYr.forEach(t),a3o=r(OAe," \u2014 "),HN=n(OAe,"A",{href:!0});var eKr=s(HN);n3o=r(eKr,"BlenderbotSmallForConditionalGeneration"),eKr.forEach(t),s3o=r(OAe," (BlenderbotSmall model)"),OAe.forEach(t),l3o=i(ue),I1=n(ue,"LI",{});var VAe=s(I1);_ie=n(VAe,"STRONG",{});var oKr=s(_ie);i3o=r(oKr,"encoder-decoder"),oKr.forEach(t),d3o=r(VAe," \u2014 "),UN=n(VAe,"A",{href:!0});var rKr=s(UN);c3o=r(rKr,"EncoderDecoderModel"),rKr.forEach(t),f3o=r(VAe," (Encoder decoder model)"),VAe.forEach(t),m3o=i(ue),q1=n(ue,"LI",{});var XAe=s(q1);bie=n(XAe,"STRONG",{});var tKr=s(bie);g3o=r(tKr,"fsmt"),tKr.forEach(t),h3o=r(XAe," \u2014 "),JN=n(XAe,"A",{href:!0});var aKr=s(JN);p3o=r(aKr,"FSMTForConditionalGeneration"),aKr.forEach(t),u3o=r(XAe," (FairSeq Machine-Translation model)"),XAe.forEach(t),_3o=i(ue),N1=n(ue,"LI",{});var zAe=s(N1);vie=n(zAe,"STRONG",{});var nKr=s(vie);b3o=r(nKr,"led"),nKr.forEach(t),v3o=r(zAe," \u2014 "),YN=n(zAe,"A",{href:!0});var sKr=s(YN);F3o=r(sKr,"LEDForConditionalGeneration"),sKr.forEach(t),T3o=r(zAe," (LED model)"),zAe.forEach(t),M3o=i(ue),j1=n(ue,"LI",{});var QAe=s(j1);Fie=n(QAe,"STRONG",{});var lKr=s(Fie);E3o=r(lKr,"m2m_100"),lKr.forEach(t),C3o=r(QAe," \u2014 "),KN=n(QAe,"A",{href:!0});var iKr=s(KN);w3o=r(iKr,"M2M100ForConditionalGeneration"),iKr.forEach(t),A3o=r(QAe," (M2M100 model)"),QAe.forEach(t),y3o=i(ue),D1=n(ue,"LI",{});var WAe=s(D1);Tie=n(WAe,"STRONG",{});var dKr=s(Tie);L3o=r(dKr,"marian"),dKr.forEach(t),x3o=r(WAe," \u2014 "),ZN=n(WAe,"A",{href:!0});var cKr=s(ZN);$3o=r(cKr,"MarianMTModel"),cKr.forEach(t),k3o=r(WAe," (Marian model)"),WAe.forEach(t),S3o=i(ue),G1=n(ue,"LI",{});var HAe=s(G1);Mie=n(HAe,"STRONG",{});var fKr=s(Mie);R3o=r(fKr,"mbart"),fKr.forEach(t),B3o=r(HAe," \u2014 "),ej=n(HAe,"A",{href:!0});var mKr=s(ej);P3o=r(mKr,"MBartForConditionalGeneration"),mKr.forEach(t),I3o=r(HAe," (mBART model)"),HAe.forEach(t),q3o=i(ue),O1=n(ue,"LI",{});var UAe=s(O1);Eie=n(UAe,"STRONG",{});var gKr=s(Eie);N3o=r(gKr,"mt5"),gKr.forEach(t),j3o=r(UAe," \u2014 "),oj=n(UAe,"A",{href:!0});var hKr=s(oj);D3o=r(hKr,"MT5ForConditionalGeneration"),hKr.forEach(t),G3o=r(UAe," (mT5 model)"),UAe.forEach(t),O3o=i(ue),V1=n(ue,"LI",{});var JAe=s(V1);Cie=n(JAe,"STRONG",{});var pKr=s(Cie);V3o=r(pKr,"pegasus"),pKr.forEach(t),X3o=r(JAe," \u2014 "),rj=n(JAe,"A",{href:!0});var uKr=s(rj);z3o=r(uKr,"PegasusForConditionalGeneration"),uKr.forEach(t),Q3o=r(JAe," (Pegasus model)"),JAe.forEach(t),W3o=i(ue),X1=n(ue,"LI",{});var YAe=s(X1);wie=n(YAe,"STRONG",{});var _Kr=s(wie);H3o=r(_Kr,"plbart"),_Kr.forEach(t),U3o=r(YAe," \u2014 "),tj=n(YAe,"A",{href:!0});var bKr=s(tj);J3o=r(bKr,"PLBartForConditionalGeneration"),bKr.forEach(t),Y3o=r(YAe," (PLBart model)"),YAe.forEach(t),K3o=i(ue),z1=n(ue,"LI",{});var KAe=s(z1);Aie=n(KAe,"STRONG",{});var vKr=s(Aie);Z3o=r(vKr,"prophetnet"),vKr.forEach(t),ewo=r(KAe," \u2014 "),aj=n(KAe,"A",{href:!0});var FKr=s(aj);owo=r(FKr,"ProphetNetForConditionalGeneration"),FKr.forEach(t),rwo=r(KAe," (ProphetNet model)"),KAe.forEach(t),two=i(ue),Q1=n(ue,"LI",{});var ZAe=s(Q1);yie=n(ZAe,"STRONG",{});var TKr=s(yie);awo=r(TKr,"t5"),TKr.forEach(t),nwo=r(ZAe," \u2014 "),nj=n(ZAe,"A",{href:!0});var MKr=s(nj);swo=r(MKr,"T5ForConditionalGeneration"),MKr.forEach(t),lwo=r(ZAe," (T5 model)"),ZAe.forEach(t),iwo=i(ue),W1=n(ue,"LI",{});var e0e=s(W1);Lie=n(e0e,"STRONG",{});var EKr=s(Lie);dwo=r(EKr,"tapex"),EKr.forEach(t),cwo=r(e0e," \u2014 "),sj=n(e0e,"A",{href:!0});var CKr=s(sj);fwo=r(CKr,"BartForConditionalGeneration"),CKr.forEach(t),mwo=r(e0e," (TAPEX model)"),e0e.forEach(t),gwo=i(ue),H1=n(ue,"LI",{});var o0e=s(H1);xie=n(o0e,"STRONG",{});var wKr=s(xie);hwo=r(wKr,"xlm-prophetnet"),wKr.forEach(t),pwo=r(o0e," \u2014 "),lj=n(o0e,"A",{href:!0});var AKr=s(lj);uwo=r(AKr,"XLMProphetNetForConditionalGeneration"),AKr.forEach(t),_wo=r(o0e," (XLMProphetNet model)"),o0e.forEach(t),ue.forEach(t),bwo=i(ea),U1=n(ea,"P",{});var r0e=s(U1);vwo=r(r0e,"The model is set in evaluation mode by default using "),$ie=n(r0e,"CODE",{});var yKr=s($ie);Fwo=r(yKr,"model.eval()"),yKr.forEach(t),Two=r(r0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),kie=n(r0e,"CODE",{});var LKr=s(kie);Mwo=r(LKr,"model.train()"),LKr.forEach(t),r0e.forEach(t),Ewo=i(ea),T(J1.$$.fragment,ea),ea.forEach(t),js.forEach(t),aBe=i(f),$i=n(f,"H2",{class:!0});var sIe=s($i);Y1=n(sIe,"A",{id:!0,class:!0,href:!0});var xKr=s(Y1);Sie=n(xKr,"SPAN",{});var $Kr=s(Sie);T(m0.$$.fragment,$Kr),$Kr.forEach(t),xKr.forEach(t),Cwo=i(sIe),Rie=n(sIe,"SPAN",{});var kKr=s(Rie);wwo=r(kKr,"AutoModelForSequenceClassification"),kKr.forEach(t),sIe.forEach(t),nBe=i(f),So=n(f,"DIV",{class:!0});var Ds=s(So);T(g0.$$.fragment,Ds),Awo=i(Ds),ki=n(Ds,"P",{});var nY=s(ki);ywo=r(nY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),ij=n(nY,"A",{href:!0});var SKr=s(ij);Lwo=r(SKr,"from_pretrained()"),SKr.forEach(t),xwo=r(nY," class method or the "),dj=n(nY,"A",{href:!0});var RKr=s(dj);$wo=r(RKr,"from_config()"),RKr.forEach(t),kwo=r(nY,` class
method.`),nY.forEach(t),Swo=i(Ds),h0=n(Ds,"P",{});var lIe=s(h0);Rwo=r(lIe,"This class cannot be instantiated directly using "),Bie=n(lIe,"CODE",{});var BKr=s(Bie);Bwo=r(BKr,"__init__()"),BKr.forEach(t),Pwo=r(lIe," (throws an error)."),lIe.forEach(t),Iwo=i(Ds),at=n(Ds,"DIV",{class:!0});var $3=s(at);T(p0.$$.fragment,$3),qwo=i($3),Pie=n($3,"P",{});var PKr=s(Pie);Nwo=r(PKr,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),PKr.forEach(t),jwo=i($3),Si=n($3,"P",{});var sY=s(Si);Dwo=r(sY,`Note:
Loading a model from its configuration file does `),Iie=n(sY,"STRONG",{});var IKr=s(Iie);Gwo=r(IKr,"not"),IKr.forEach(t),Owo=r(sY,` load the model weights. It only affects the
model\u2019s configuration. Use `),cj=n(sY,"A",{href:!0});var qKr=s(cj);Vwo=r(qKr,"from_pretrained()"),qKr.forEach(t),Xwo=r(sY," to load the model weights."),sY.forEach(t),zwo=i($3),T(K1.$$.fragment,$3),$3.forEach(t),Qwo=i(Ds),Ke=n(Ds,"DIV",{class:!0});var oa=s(Ke);T(u0.$$.fragment,oa),Wwo=i(oa),qie=n(oa,"P",{});var NKr=s(qie);Hwo=r(NKr,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),NKr.forEach(t),Uwo=i(oa),La=n(oa,"P",{});var k3=s(La);Jwo=r(k3,"The model class to instantiate is selected based on the "),Nie=n(k3,"CODE",{});var jKr=s(Nie);Ywo=r(jKr,"model_type"),jKr.forEach(t),Kwo=r(k3,` property of the config object (either
passed as an argument or loaded from `),jie=n(k3,"CODE",{});var DKr=s(jie);Zwo=r(DKr,"pretrained_model_name_or_path"),DKr.forEach(t),eAo=r(k3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Die=n(k3,"CODE",{});var GKr=s(Die);oAo=r(GKr,"pretrained_model_name_or_path"),GKr.forEach(t),rAo=r(k3,":"),k3.forEach(t),tAo=i(oa),q=n(oa,"UL",{});var N=s(q);Z1=n(N,"LI",{});var t0e=s(Z1);Gie=n(t0e,"STRONG",{});var OKr=s(Gie);aAo=r(OKr,"albert"),OKr.forEach(t),nAo=r(t0e," \u2014 "),fj=n(t0e,"A",{href:!0});var VKr=s(fj);sAo=r(VKr,"AlbertForSequenceClassification"),VKr.forEach(t),lAo=r(t0e," (ALBERT model)"),t0e.forEach(t),iAo=i(N),e9=n(N,"LI",{});var a0e=s(e9);Oie=n(a0e,"STRONG",{});var XKr=s(Oie);dAo=r(XKr,"bart"),XKr.forEach(t),cAo=r(a0e," \u2014 "),mj=n(a0e,"A",{href:!0});var zKr=s(mj);fAo=r(zKr,"BartForSequenceClassification"),zKr.forEach(t),mAo=r(a0e," (BART model)"),a0e.forEach(t),gAo=i(N),o9=n(N,"LI",{});var n0e=s(o9);Vie=n(n0e,"STRONG",{});var QKr=s(Vie);hAo=r(QKr,"bert"),QKr.forEach(t),pAo=r(n0e," \u2014 "),gj=n(n0e,"A",{href:!0});var WKr=s(gj);uAo=r(WKr,"BertForSequenceClassification"),WKr.forEach(t),_Ao=r(n0e," (BERT model)"),n0e.forEach(t),bAo=i(N),r9=n(N,"LI",{});var s0e=s(r9);Xie=n(s0e,"STRONG",{});var HKr=s(Xie);vAo=r(HKr,"big_bird"),HKr.forEach(t),FAo=r(s0e," \u2014 "),hj=n(s0e,"A",{href:!0});var UKr=s(hj);TAo=r(UKr,"BigBirdForSequenceClassification"),UKr.forEach(t),MAo=r(s0e," (BigBird model)"),s0e.forEach(t),EAo=i(N),t9=n(N,"LI",{});var l0e=s(t9);zie=n(l0e,"STRONG",{});var JKr=s(zie);CAo=r(JKr,"bigbird_pegasus"),JKr.forEach(t),wAo=r(l0e," \u2014 "),pj=n(l0e,"A",{href:!0});var YKr=s(pj);AAo=r(YKr,"BigBirdPegasusForSequenceClassification"),YKr.forEach(t),yAo=r(l0e," (BigBirdPegasus model)"),l0e.forEach(t),LAo=i(N),a9=n(N,"LI",{});var i0e=s(a9);Qie=n(i0e,"STRONG",{});var KKr=s(Qie);xAo=r(KKr,"camembert"),KKr.forEach(t),$Ao=r(i0e," \u2014 "),uj=n(i0e,"A",{href:!0});var ZKr=s(uj);kAo=r(ZKr,"CamembertForSequenceClassification"),ZKr.forEach(t),SAo=r(i0e," (CamemBERT model)"),i0e.forEach(t),RAo=i(N),n9=n(N,"LI",{});var d0e=s(n9);Wie=n(d0e,"STRONG",{});var eZr=s(Wie);BAo=r(eZr,"canine"),eZr.forEach(t),PAo=r(d0e," \u2014 "),_j=n(d0e,"A",{href:!0});var oZr=s(_j);IAo=r(oZr,"CanineForSequenceClassification"),oZr.forEach(t),qAo=r(d0e," (Canine model)"),d0e.forEach(t),NAo=i(N),s9=n(N,"LI",{});var c0e=s(s9);Hie=n(c0e,"STRONG",{});var rZr=s(Hie);jAo=r(rZr,"convbert"),rZr.forEach(t),DAo=r(c0e," \u2014 "),bj=n(c0e,"A",{href:!0});var tZr=s(bj);GAo=r(tZr,"ConvBertForSequenceClassification"),tZr.forEach(t),OAo=r(c0e," (ConvBERT model)"),c0e.forEach(t),VAo=i(N),l9=n(N,"LI",{});var f0e=s(l9);Uie=n(f0e,"STRONG",{});var aZr=s(Uie);XAo=r(aZr,"ctrl"),aZr.forEach(t),zAo=r(f0e," \u2014 "),vj=n(f0e,"A",{href:!0});var nZr=s(vj);QAo=r(nZr,"CTRLForSequenceClassification"),nZr.forEach(t),WAo=r(f0e," (CTRL model)"),f0e.forEach(t),HAo=i(N),i9=n(N,"LI",{});var m0e=s(i9);Jie=n(m0e,"STRONG",{});var sZr=s(Jie);UAo=r(sZr,"data2vec-text"),sZr.forEach(t),JAo=r(m0e," \u2014 "),Fj=n(m0e,"A",{href:!0});var lZr=s(Fj);YAo=r(lZr,"Data2VecTextForSequenceClassification"),lZr.forEach(t),KAo=r(m0e," (Data2VecText model)"),m0e.forEach(t),ZAo=i(N),d9=n(N,"LI",{});var g0e=s(d9);Yie=n(g0e,"STRONG",{});var iZr=s(Yie);e0o=r(iZr,"deberta"),iZr.forEach(t),o0o=r(g0e," \u2014 "),Tj=n(g0e,"A",{href:!0});var dZr=s(Tj);r0o=r(dZr,"DebertaForSequenceClassification"),dZr.forEach(t),t0o=r(g0e," (DeBERTa model)"),g0e.forEach(t),a0o=i(N),c9=n(N,"LI",{});var h0e=s(c9);Kie=n(h0e,"STRONG",{});var cZr=s(Kie);n0o=r(cZr,"deberta-v2"),cZr.forEach(t),s0o=r(h0e," \u2014 "),Mj=n(h0e,"A",{href:!0});var fZr=s(Mj);l0o=r(fZr,"DebertaV2ForSequenceClassification"),fZr.forEach(t),i0o=r(h0e," (DeBERTa-v2 model)"),h0e.forEach(t),d0o=i(N),f9=n(N,"LI",{});var p0e=s(f9);Zie=n(p0e,"STRONG",{});var mZr=s(Zie);c0o=r(mZr,"distilbert"),mZr.forEach(t),f0o=r(p0e," \u2014 "),Ej=n(p0e,"A",{href:!0});var gZr=s(Ej);m0o=r(gZr,"DistilBertForSequenceClassification"),gZr.forEach(t),g0o=r(p0e," (DistilBERT model)"),p0e.forEach(t),h0o=i(N),m9=n(N,"LI",{});var u0e=s(m9);ede=n(u0e,"STRONG",{});var hZr=s(ede);p0o=r(hZr,"electra"),hZr.forEach(t),u0o=r(u0e," \u2014 "),Cj=n(u0e,"A",{href:!0});var pZr=s(Cj);_0o=r(pZr,"ElectraForSequenceClassification"),pZr.forEach(t),b0o=r(u0e," (ELECTRA model)"),u0e.forEach(t),v0o=i(N),g9=n(N,"LI",{});var _0e=s(g9);ode=n(_0e,"STRONG",{});var uZr=s(ode);F0o=r(uZr,"flaubert"),uZr.forEach(t),T0o=r(_0e," \u2014 "),wj=n(_0e,"A",{href:!0});var _Zr=s(wj);M0o=r(_Zr,"FlaubertForSequenceClassification"),_Zr.forEach(t),E0o=r(_0e," (FlauBERT model)"),_0e.forEach(t),C0o=i(N),h9=n(N,"LI",{});var b0e=s(h9);rde=n(b0e,"STRONG",{});var bZr=s(rde);w0o=r(bZr,"fnet"),bZr.forEach(t),A0o=r(b0e," \u2014 "),Aj=n(b0e,"A",{href:!0});var vZr=s(Aj);y0o=r(vZr,"FNetForSequenceClassification"),vZr.forEach(t),L0o=r(b0e," (FNet model)"),b0e.forEach(t),x0o=i(N),p9=n(N,"LI",{});var v0e=s(p9);tde=n(v0e,"STRONG",{});var FZr=s(tde);$0o=r(FZr,"funnel"),FZr.forEach(t),k0o=r(v0e," \u2014 "),yj=n(v0e,"A",{href:!0});var TZr=s(yj);S0o=r(TZr,"FunnelForSequenceClassification"),TZr.forEach(t),R0o=r(v0e," (Funnel Transformer model)"),v0e.forEach(t),B0o=i(N),u9=n(N,"LI",{});var F0e=s(u9);ade=n(F0e,"STRONG",{});var MZr=s(ade);P0o=r(MZr,"gpt2"),MZr.forEach(t),I0o=r(F0e," \u2014 "),Lj=n(F0e,"A",{href:!0});var EZr=s(Lj);q0o=r(EZr,"GPT2ForSequenceClassification"),EZr.forEach(t),N0o=r(F0e," (OpenAI GPT-2 model)"),F0e.forEach(t),j0o=i(N),_9=n(N,"LI",{});var T0e=s(_9);nde=n(T0e,"STRONG",{});var CZr=s(nde);D0o=r(CZr,"gpt_neo"),CZr.forEach(t),G0o=r(T0e," \u2014 "),xj=n(T0e,"A",{href:!0});var wZr=s(xj);O0o=r(wZr,"GPTNeoForSequenceClassification"),wZr.forEach(t),V0o=r(T0e," (GPT Neo model)"),T0e.forEach(t),X0o=i(N),b9=n(N,"LI",{});var M0e=s(b9);sde=n(M0e,"STRONG",{});var AZr=s(sde);z0o=r(AZr,"gptj"),AZr.forEach(t),Q0o=r(M0e," \u2014 "),$j=n(M0e,"A",{href:!0});var yZr=s($j);W0o=r(yZr,"GPTJForSequenceClassification"),yZr.forEach(t),H0o=r(M0e," (GPT-J model)"),M0e.forEach(t),U0o=i(N),v9=n(N,"LI",{});var E0e=s(v9);lde=n(E0e,"STRONG",{});var LZr=s(lde);J0o=r(LZr,"ibert"),LZr.forEach(t),Y0o=r(E0e," \u2014 "),kj=n(E0e,"A",{href:!0});var xZr=s(kj);K0o=r(xZr,"IBertForSequenceClassification"),xZr.forEach(t),Z0o=r(E0e," (I-BERT model)"),E0e.forEach(t),eyo=i(N),F9=n(N,"LI",{});var C0e=s(F9);ide=n(C0e,"STRONG",{});var $Zr=s(ide);oyo=r($Zr,"layoutlm"),$Zr.forEach(t),ryo=r(C0e," \u2014 "),Sj=n(C0e,"A",{href:!0});var kZr=s(Sj);tyo=r(kZr,"LayoutLMForSequenceClassification"),kZr.forEach(t),ayo=r(C0e," (LayoutLM model)"),C0e.forEach(t),nyo=i(N),T9=n(N,"LI",{});var w0e=s(T9);dde=n(w0e,"STRONG",{});var SZr=s(dde);syo=r(SZr,"layoutlmv2"),SZr.forEach(t),lyo=r(w0e," \u2014 "),Rj=n(w0e,"A",{href:!0});var RZr=s(Rj);iyo=r(RZr,"LayoutLMv2ForSequenceClassification"),RZr.forEach(t),dyo=r(w0e," (LayoutLMv2 model)"),w0e.forEach(t),cyo=i(N),M9=n(N,"LI",{});var A0e=s(M9);cde=n(A0e,"STRONG",{});var BZr=s(cde);fyo=r(BZr,"led"),BZr.forEach(t),myo=r(A0e," \u2014 "),Bj=n(A0e,"A",{href:!0});var PZr=s(Bj);gyo=r(PZr,"LEDForSequenceClassification"),PZr.forEach(t),hyo=r(A0e," (LED model)"),A0e.forEach(t),pyo=i(N),E9=n(N,"LI",{});var y0e=s(E9);fde=n(y0e,"STRONG",{});var IZr=s(fde);uyo=r(IZr,"longformer"),IZr.forEach(t),_yo=r(y0e," \u2014 "),Pj=n(y0e,"A",{href:!0});var qZr=s(Pj);byo=r(qZr,"LongformerForSequenceClassification"),qZr.forEach(t),vyo=r(y0e," (Longformer model)"),y0e.forEach(t),Fyo=i(N),C9=n(N,"LI",{});var L0e=s(C9);mde=n(L0e,"STRONG",{});var NZr=s(mde);Tyo=r(NZr,"mbart"),NZr.forEach(t),Myo=r(L0e," \u2014 "),Ij=n(L0e,"A",{href:!0});var jZr=s(Ij);Eyo=r(jZr,"MBartForSequenceClassification"),jZr.forEach(t),Cyo=r(L0e," (mBART model)"),L0e.forEach(t),wyo=i(N),w9=n(N,"LI",{});var x0e=s(w9);gde=n(x0e,"STRONG",{});var DZr=s(gde);Ayo=r(DZr,"megatron-bert"),DZr.forEach(t),yyo=r(x0e," \u2014 "),qj=n(x0e,"A",{href:!0});var GZr=s(qj);Lyo=r(GZr,"MegatronBertForSequenceClassification"),GZr.forEach(t),xyo=r(x0e," (MegatronBert model)"),x0e.forEach(t),$yo=i(N),A9=n(N,"LI",{});var $0e=s(A9);hde=n($0e,"STRONG",{});var OZr=s(hde);kyo=r(OZr,"mobilebert"),OZr.forEach(t),Syo=r($0e," \u2014 "),Nj=n($0e,"A",{href:!0});var VZr=s(Nj);Ryo=r(VZr,"MobileBertForSequenceClassification"),VZr.forEach(t),Byo=r($0e," (MobileBERT model)"),$0e.forEach(t),Pyo=i(N),y9=n(N,"LI",{});var k0e=s(y9);pde=n(k0e,"STRONG",{});var XZr=s(pde);Iyo=r(XZr,"mpnet"),XZr.forEach(t),qyo=r(k0e," \u2014 "),jj=n(k0e,"A",{href:!0});var zZr=s(jj);Nyo=r(zZr,"MPNetForSequenceClassification"),zZr.forEach(t),jyo=r(k0e," (MPNet model)"),k0e.forEach(t),Dyo=i(N),L9=n(N,"LI",{});var S0e=s(L9);ude=n(S0e,"STRONG",{});var QZr=s(ude);Gyo=r(QZr,"nystromformer"),QZr.forEach(t),Oyo=r(S0e," \u2014 "),Dj=n(S0e,"A",{href:!0});var WZr=s(Dj);Vyo=r(WZr,"NystromformerForSequenceClassification"),WZr.forEach(t),Xyo=r(S0e," (Nystromformer model)"),S0e.forEach(t),zyo=i(N),x9=n(N,"LI",{});var R0e=s(x9);_de=n(R0e,"STRONG",{});var HZr=s(_de);Qyo=r(HZr,"openai-gpt"),HZr.forEach(t),Wyo=r(R0e," \u2014 "),Gj=n(R0e,"A",{href:!0});var UZr=s(Gj);Hyo=r(UZr,"OpenAIGPTForSequenceClassification"),UZr.forEach(t),Uyo=r(R0e," (OpenAI GPT model)"),R0e.forEach(t),Jyo=i(N),$9=n(N,"LI",{});var B0e=s($9);bde=n(B0e,"STRONG",{});var JZr=s(bde);Yyo=r(JZr,"perceiver"),JZr.forEach(t),Kyo=r(B0e," \u2014 "),Oj=n(B0e,"A",{href:!0});var YZr=s(Oj);Zyo=r(YZr,"PerceiverForSequenceClassification"),YZr.forEach(t),eLo=r(B0e," (Perceiver model)"),B0e.forEach(t),oLo=i(N),k9=n(N,"LI",{});var P0e=s(k9);vde=n(P0e,"STRONG",{});var KZr=s(vde);rLo=r(KZr,"plbart"),KZr.forEach(t),tLo=r(P0e," \u2014 "),Vj=n(P0e,"A",{href:!0});var ZZr=s(Vj);aLo=r(ZZr,"PLBartForSequenceClassification"),ZZr.forEach(t),nLo=r(P0e," (PLBart model)"),P0e.forEach(t),sLo=i(N),S9=n(N,"LI",{});var I0e=s(S9);Fde=n(I0e,"STRONG",{});var eet=s(Fde);lLo=r(eet,"qdqbert"),eet.forEach(t),iLo=r(I0e," \u2014 "),Xj=n(I0e,"A",{href:!0});var oet=s(Xj);dLo=r(oet,"QDQBertForSequenceClassification"),oet.forEach(t),cLo=r(I0e," (QDQBert model)"),I0e.forEach(t),fLo=i(N),R9=n(N,"LI",{});var q0e=s(R9);Tde=n(q0e,"STRONG",{});var ret=s(Tde);mLo=r(ret,"reformer"),ret.forEach(t),gLo=r(q0e," \u2014 "),zj=n(q0e,"A",{href:!0});var tet=s(zj);hLo=r(tet,"ReformerForSequenceClassification"),tet.forEach(t),pLo=r(q0e," (Reformer model)"),q0e.forEach(t),uLo=i(N),B9=n(N,"LI",{});var N0e=s(B9);Mde=n(N0e,"STRONG",{});var aet=s(Mde);_Lo=r(aet,"rembert"),aet.forEach(t),bLo=r(N0e," \u2014 "),Qj=n(N0e,"A",{href:!0});var net=s(Qj);vLo=r(net,"RemBertForSequenceClassification"),net.forEach(t),FLo=r(N0e," (RemBERT model)"),N0e.forEach(t),TLo=i(N),P9=n(N,"LI",{});var j0e=s(P9);Ede=n(j0e,"STRONG",{});var set=s(Ede);MLo=r(set,"roberta"),set.forEach(t),ELo=r(j0e," \u2014 "),Wj=n(j0e,"A",{href:!0});var iet=s(Wj);CLo=r(iet,"RobertaForSequenceClassification"),iet.forEach(t),wLo=r(j0e," (RoBERTa model)"),j0e.forEach(t),ALo=i(N),I9=n(N,"LI",{});var D0e=s(I9);Cde=n(D0e,"STRONG",{});var det=s(Cde);yLo=r(det,"roformer"),det.forEach(t),LLo=r(D0e," \u2014 "),Hj=n(D0e,"A",{href:!0});var cet=s(Hj);xLo=r(cet,"RoFormerForSequenceClassification"),cet.forEach(t),$Lo=r(D0e," (RoFormer model)"),D0e.forEach(t),kLo=i(N),q9=n(N,"LI",{});var G0e=s(q9);wde=n(G0e,"STRONG",{});var fet=s(wde);SLo=r(fet,"squeezebert"),fet.forEach(t),RLo=r(G0e," \u2014 "),Uj=n(G0e,"A",{href:!0});var met=s(Uj);BLo=r(met,"SqueezeBertForSequenceClassification"),met.forEach(t),PLo=r(G0e," (SqueezeBERT model)"),G0e.forEach(t),ILo=i(N),N9=n(N,"LI",{});var O0e=s(N9);Ade=n(O0e,"STRONG",{});var get=s(Ade);qLo=r(get,"tapas"),get.forEach(t),NLo=r(O0e," \u2014 "),Jj=n(O0e,"A",{href:!0});var het=s(Jj);jLo=r(het,"TapasForSequenceClassification"),het.forEach(t),DLo=r(O0e," (TAPAS model)"),O0e.forEach(t),GLo=i(N),j9=n(N,"LI",{});var V0e=s(j9);yde=n(V0e,"STRONG",{});var pet=s(yde);OLo=r(pet,"tapex"),pet.forEach(t),VLo=r(V0e," \u2014 "),Yj=n(V0e,"A",{href:!0});var uet=s(Yj);XLo=r(uet,"BartForSequenceClassification"),uet.forEach(t),zLo=r(V0e," (TAPEX model)"),V0e.forEach(t),QLo=i(N),D9=n(N,"LI",{});var X0e=s(D9);Lde=n(X0e,"STRONG",{});var _et=s(Lde);WLo=r(_et,"transfo-xl"),_et.forEach(t),HLo=r(X0e," \u2014 "),Kj=n(X0e,"A",{href:!0});var bet=s(Kj);ULo=r(bet,"TransfoXLForSequenceClassification"),bet.forEach(t),JLo=r(X0e," (Transformer-XL model)"),X0e.forEach(t),YLo=i(N),G9=n(N,"LI",{});var z0e=s(G9);xde=n(z0e,"STRONG",{});var vet=s(xde);KLo=r(vet,"xlm"),vet.forEach(t),ZLo=r(z0e," \u2014 "),Zj=n(z0e,"A",{href:!0});var Fet=s(Zj);e8o=r(Fet,"XLMForSequenceClassification"),Fet.forEach(t),o8o=r(z0e," (XLM model)"),z0e.forEach(t),r8o=i(N),O9=n(N,"LI",{});var Q0e=s(O9);$de=n(Q0e,"STRONG",{});var Tet=s($de);t8o=r(Tet,"xlm-roberta"),Tet.forEach(t),a8o=r(Q0e," \u2014 "),eD=n(Q0e,"A",{href:!0});var Met=s(eD);n8o=r(Met,"XLMRobertaForSequenceClassification"),Met.forEach(t),s8o=r(Q0e," (XLM-RoBERTa model)"),Q0e.forEach(t),l8o=i(N),V9=n(N,"LI",{});var W0e=s(V9);kde=n(W0e,"STRONG",{});var Eet=s(kde);i8o=r(Eet,"xlm-roberta-xl"),Eet.forEach(t),d8o=r(W0e," \u2014 "),oD=n(W0e,"A",{href:!0});var Cet=s(oD);c8o=r(Cet,"XLMRobertaXLForSequenceClassification"),Cet.forEach(t),f8o=r(W0e," (XLM-RoBERTa-XL model)"),W0e.forEach(t),m8o=i(N),X9=n(N,"LI",{});var H0e=s(X9);Sde=n(H0e,"STRONG",{});var wet=s(Sde);g8o=r(wet,"xlnet"),wet.forEach(t),h8o=r(H0e," \u2014 "),rD=n(H0e,"A",{href:!0});var Aet=s(rD);p8o=r(Aet,"XLNetForSequenceClassification"),Aet.forEach(t),u8o=r(H0e," (XLNet model)"),H0e.forEach(t),_8o=i(N),z9=n(N,"LI",{});var U0e=s(z9);Rde=n(U0e,"STRONG",{});var yet=s(Rde);b8o=r(yet,"yoso"),yet.forEach(t),v8o=r(U0e," \u2014 "),tD=n(U0e,"A",{href:!0});var Let=s(tD);F8o=r(Let,"YosoForSequenceClassification"),Let.forEach(t),T8o=r(U0e," (YOSO model)"),U0e.forEach(t),N.forEach(t),M8o=i(oa),Q9=n(oa,"P",{});var J0e=s(Q9);E8o=r(J0e,"The model is set in evaluation mode by default using "),Bde=n(J0e,"CODE",{});var xet=s(Bde);C8o=r(xet,"model.eval()"),xet.forEach(t),w8o=r(J0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Pde=n(J0e,"CODE",{});var $et=s(Pde);A8o=r($et,"model.train()"),$et.forEach(t),J0e.forEach(t),y8o=i(oa),T(W9.$$.fragment,oa),oa.forEach(t),Ds.forEach(t),sBe=i(f),Ri=n(f,"H2",{class:!0});var iIe=s(Ri);H9=n(iIe,"A",{id:!0,class:!0,href:!0});var ket=s(H9);Ide=n(ket,"SPAN",{});var Set=s(Ide);T(_0.$$.fragment,Set),Set.forEach(t),ket.forEach(t),L8o=i(iIe),qde=n(iIe,"SPAN",{});var Ret=s(qde);x8o=r(Ret,"AutoModelForMultipleChoice"),Ret.forEach(t),iIe.forEach(t),lBe=i(f),Ro=n(f,"DIV",{class:!0});var Gs=s(Ro);T(b0.$$.fragment,Gs),$8o=i(Gs),Bi=n(Gs,"P",{});var lY=s(Bi);k8o=r(lY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),aD=n(lY,"A",{href:!0});var Bet=s(aD);S8o=r(Bet,"from_pretrained()"),Bet.forEach(t),R8o=r(lY," class method or the "),nD=n(lY,"A",{href:!0});var Pet=s(nD);B8o=r(Pet,"from_config()"),Pet.forEach(t),P8o=r(lY,` class
method.`),lY.forEach(t),I8o=i(Gs),v0=n(Gs,"P",{});var dIe=s(v0);q8o=r(dIe,"This class cannot be instantiated directly using "),Nde=n(dIe,"CODE",{});var Iet=s(Nde);N8o=r(Iet,"__init__()"),Iet.forEach(t),j8o=r(dIe," (throws an error)."),dIe.forEach(t),D8o=i(Gs),nt=n(Gs,"DIV",{class:!0});var S3=s(nt);T(F0.$$.fragment,S3),G8o=i(S3),jde=n(S3,"P",{});var qet=s(jde);O8o=r(qet,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),qet.forEach(t),V8o=i(S3),Pi=n(S3,"P",{});var iY=s(Pi);X8o=r(iY,`Note:
Loading a model from its configuration file does `),Dde=n(iY,"STRONG",{});var Net=s(Dde);z8o=r(Net,"not"),Net.forEach(t),Q8o=r(iY,` load the model weights. It only affects the
model\u2019s configuration. Use `),sD=n(iY,"A",{href:!0});var jet=s(sD);W8o=r(jet,"from_pretrained()"),jet.forEach(t),H8o=r(iY," to load the model weights."),iY.forEach(t),U8o=i(S3),T(U9.$$.fragment,S3),S3.forEach(t),J8o=i(Gs),Ze=n(Gs,"DIV",{class:!0});var ra=s(Ze);T(T0.$$.fragment,ra),Y8o=i(ra),Gde=n(ra,"P",{});var Det=s(Gde);K8o=r(Det,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Det.forEach(t),Z8o=i(ra),xa=n(ra,"P",{});var R3=s(xa);e7o=r(R3,"The model class to instantiate is selected based on the "),Ode=n(R3,"CODE",{});var Get=s(Ode);o7o=r(Get,"model_type"),Get.forEach(t),r7o=r(R3,` property of the config object (either
passed as an argument or loaded from `),Vde=n(R3,"CODE",{});var Oet=s(Vde);t7o=r(Oet,"pretrained_model_name_or_path"),Oet.forEach(t),a7o=r(R3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xde=n(R3,"CODE",{});var Vet=s(Xde);n7o=r(Vet,"pretrained_model_name_or_path"),Vet.forEach(t),s7o=r(R3,":"),R3.forEach(t),l7o=i(ra),Y=n(ra,"UL",{});var K=s(Y);J9=n(K,"LI",{});var Y0e=s(J9);zde=n(Y0e,"STRONG",{});var Xet=s(zde);i7o=r(Xet,"albert"),Xet.forEach(t),d7o=r(Y0e," \u2014 "),lD=n(Y0e,"A",{href:!0});var zet=s(lD);c7o=r(zet,"AlbertForMultipleChoice"),zet.forEach(t),f7o=r(Y0e," (ALBERT model)"),Y0e.forEach(t),m7o=i(K),Y9=n(K,"LI",{});var K0e=s(Y9);Qde=n(K0e,"STRONG",{});var Qet=s(Qde);g7o=r(Qet,"bert"),Qet.forEach(t),h7o=r(K0e," \u2014 "),iD=n(K0e,"A",{href:!0});var Wet=s(iD);p7o=r(Wet,"BertForMultipleChoice"),Wet.forEach(t),u7o=r(K0e," (BERT model)"),K0e.forEach(t),_7o=i(K),K9=n(K,"LI",{});var Z0e=s(K9);Wde=n(Z0e,"STRONG",{});var Het=s(Wde);b7o=r(Het,"big_bird"),Het.forEach(t),v7o=r(Z0e," \u2014 "),dD=n(Z0e,"A",{href:!0});var Uet=s(dD);F7o=r(Uet,"BigBirdForMultipleChoice"),Uet.forEach(t),T7o=r(Z0e," (BigBird model)"),Z0e.forEach(t),M7o=i(K),Z9=n(K,"LI",{});var eye=s(Z9);Hde=n(eye,"STRONG",{});var Jet=s(Hde);E7o=r(Jet,"camembert"),Jet.forEach(t),C7o=r(eye," \u2014 "),cD=n(eye,"A",{href:!0});var Yet=s(cD);w7o=r(Yet,"CamembertForMultipleChoice"),Yet.forEach(t),A7o=r(eye," (CamemBERT model)"),eye.forEach(t),y7o=i(K),eb=n(K,"LI",{});var oye=s(eb);Ude=n(oye,"STRONG",{});var Ket=s(Ude);L7o=r(Ket,"canine"),Ket.forEach(t),x7o=r(oye," \u2014 "),fD=n(oye,"A",{href:!0});var Zet=s(fD);$7o=r(Zet,"CanineForMultipleChoice"),Zet.forEach(t),k7o=r(oye," (Canine model)"),oye.forEach(t),S7o=i(K),ob=n(K,"LI",{});var rye=s(ob);Jde=n(rye,"STRONG",{});var eot=s(Jde);R7o=r(eot,"convbert"),eot.forEach(t),B7o=r(rye," \u2014 "),mD=n(rye,"A",{href:!0});var oot=s(mD);P7o=r(oot,"ConvBertForMultipleChoice"),oot.forEach(t),I7o=r(rye," (ConvBERT model)"),rye.forEach(t),q7o=i(K),rb=n(K,"LI",{});var tye=s(rb);Yde=n(tye,"STRONG",{});var rot=s(Yde);N7o=r(rot,"data2vec-text"),rot.forEach(t),j7o=r(tye," \u2014 "),gD=n(tye,"A",{href:!0});var tot=s(gD);D7o=r(tot,"Data2VecTextForMultipleChoice"),tot.forEach(t),G7o=r(tye," (Data2VecText model)"),tye.forEach(t),O7o=i(K),tb=n(K,"LI",{});var aye=s(tb);Kde=n(aye,"STRONG",{});var aot=s(Kde);V7o=r(aot,"distilbert"),aot.forEach(t),X7o=r(aye," \u2014 "),hD=n(aye,"A",{href:!0});var not=s(hD);z7o=r(not,"DistilBertForMultipleChoice"),not.forEach(t),Q7o=r(aye," (DistilBERT model)"),aye.forEach(t),W7o=i(K),ab=n(K,"LI",{});var nye=s(ab);Zde=n(nye,"STRONG",{});var sot=s(Zde);H7o=r(sot,"electra"),sot.forEach(t),U7o=r(nye," \u2014 "),pD=n(nye,"A",{href:!0});var lot=s(pD);J7o=r(lot,"ElectraForMultipleChoice"),lot.forEach(t),Y7o=r(nye," (ELECTRA model)"),nye.forEach(t),K7o=i(K),nb=n(K,"LI",{});var sye=s(nb);ece=n(sye,"STRONG",{});var iot=s(ece);Z7o=r(iot,"flaubert"),iot.forEach(t),exo=r(sye," \u2014 "),uD=n(sye,"A",{href:!0});var dot=s(uD);oxo=r(dot,"FlaubertForMultipleChoice"),dot.forEach(t),rxo=r(sye," (FlauBERT model)"),sye.forEach(t),txo=i(K),sb=n(K,"LI",{});var lye=s(sb);oce=n(lye,"STRONG",{});var cot=s(oce);axo=r(cot,"fnet"),cot.forEach(t),nxo=r(lye," \u2014 "),_D=n(lye,"A",{href:!0});var fot=s(_D);sxo=r(fot,"FNetForMultipleChoice"),fot.forEach(t),lxo=r(lye," (FNet model)"),lye.forEach(t),ixo=i(K),lb=n(K,"LI",{});var iye=s(lb);rce=n(iye,"STRONG",{});var mot=s(rce);dxo=r(mot,"funnel"),mot.forEach(t),cxo=r(iye," \u2014 "),bD=n(iye,"A",{href:!0});var got=s(bD);fxo=r(got,"FunnelForMultipleChoice"),got.forEach(t),mxo=r(iye," (Funnel Transformer model)"),iye.forEach(t),gxo=i(K),ib=n(K,"LI",{});var dye=s(ib);tce=n(dye,"STRONG",{});var hot=s(tce);hxo=r(hot,"ibert"),hot.forEach(t),pxo=r(dye," \u2014 "),vD=n(dye,"A",{href:!0});var pot=s(vD);uxo=r(pot,"IBertForMultipleChoice"),pot.forEach(t),_xo=r(dye," (I-BERT model)"),dye.forEach(t),bxo=i(K),db=n(K,"LI",{});var cye=s(db);ace=n(cye,"STRONG",{});var uot=s(ace);vxo=r(uot,"longformer"),uot.forEach(t),Fxo=r(cye," \u2014 "),FD=n(cye,"A",{href:!0});var _ot=s(FD);Txo=r(_ot,"LongformerForMultipleChoice"),_ot.forEach(t),Mxo=r(cye," (Longformer model)"),cye.forEach(t),Exo=i(K),cb=n(K,"LI",{});var fye=s(cb);nce=n(fye,"STRONG",{});var bot=s(nce);Cxo=r(bot,"megatron-bert"),bot.forEach(t),wxo=r(fye," \u2014 "),TD=n(fye,"A",{href:!0});var vot=s(TD);Axo=r(vot,"MegatronBertForMultipleChoice"),vot.forEach(t),yxo=r(fye," (MegatronBert model)"),fye.forEach(t),Lxo=i(K),fb=n(K,"LI",{});var mye=s(fb);sce=n(mye,"STRONG",{});var Fot=s(sce);xxo=r(Fot,"mobilebert"),Fot.forEach(t),$xo=r(mye," \u2014 "),MD=n(mye,"A",{href:!0});var Tot=s(MD);kxo=r(Tot,"MobileBertForMultipleChoice"),Tot.forEach(t),Sxo=r(mye," (MobileBERT model)"),mye.forEach(t),Rxo=i(K),mb=n(K,"LI",{});var gye=s(mb);lce=n(gye,"STRONG",{});var Mot=s(lce);Bxo=r(Mot,"mpnet"),Mot.forEach(t),Pxo=r(gye," \u2014 "),ED=n(gye,"A",{href:!0});var Eot=s(ED);Ixo=r(Eot,"MPNetForMultipleChoice"),Eot.forEach(t),qxo=r(gye," (MPNet model)"),gye.forEach(t),Nxo=i(K),gb=n(K,"LI",{});var hye=s(gb);ice=n(hye,"STRONG",{});var Cot=s(ice);jxo=r(Cot,"nystromformer"),Cot.forEach(t),Dxo=r(hye," \u2014 "),CD=n(hye,"A",{href:!0});var wot=s(CD);Gxo=r(wot,"NystromformerForMultipleChoice"),wot.forEach(t),Oxo=r(hye," (Nystromformer model)"),hye.forEach(t),Vxo=i(K),hb=n(K,"LI",{});var pye=s(hb);dce=n(pye,"STRONG",{});var Aot=s(dce);Xxo=r(Aot,"qdqbert"),Aot.forEach(t),zxo=r(pye," \u2014 "),wD=n(pye,"A",{href:!0});var yot=s(wD);Qxo=r(yot,"QDQBertForMultipleChoice"),yot.forEach(t),Wxo=r(pye," (QDQBert model)"),pye.forEach(t),Hxo=i(K),pb=n(K,"LI",{});var uye=s(pb);cce=n(uye,"STRONG",{});var Lot=s(cce);Uxo=r(Lot,"rembert"),Lot.forEach(t),Jxo=r(uye," \u2014 "),AD=n(uye,"A",{href:!0});var xot=s(AD);Yxo=r(xot,"RemBertForMultipleChoice"),xot.forEach(t),Kxo=r(uye," (RemBERT model)"),uye.forEach(t),Zxo=i(K),ub=n(K,"LI",{});var _ye=s(ub);fce=n(_ye,"STRONG",{});var $ot=s(fce);e$o=r($ot,"roberta"),$ot.forEach(t),o$o=r(_ye," \u2014 "),yD=n(_ye,"A",{href:!0});var kot=s(yD);r$o=r(kot,"RobertaForMultipleChoice"),kot.forEach(t),t$o=r(_ye," (RoBERTa model)"),_ye.forEach(t),a$o=i(K),_b=n(K,"LI",{});var bye=s(_b);mce=n(bye,"STRONG",{});var Sot=s(mce);n$o=r(Sot,"roformer"),Sot.forEach(t),s$o=r(bye," \u2014 "),LD=n(bye,"A",{href:!0});var Rot=s(LD);l$o=r(Rot,"RoFormerForMultipleChoice"),Rot.forEach(t),i$o=r(bye," (RoFormer model)"),bye.forEach(t),d$o=i(K),bb=n(K,"LI",{});var vye=s(bb);gce=n(vye,"STRONG",{});var Bot=s(gce);c$o=r(Bot,"squeezebert"),Bot.forEach(t),f$o=r(vye," \u2014 "),xD=n(vye,"A",{href:!0});var Pot=s(xD);m$o=r(Pot,"SqueezeBertForMultipleChoice"),Pot.forEach(t),g$o=r(vye," (SqueezeBERT model)"),vye.forEach(t),h$o=i(K),vb=n(K,"LI",{});var Fye=s(vb);hce=n(Fye,"STRONG",{});var Iot=s(hce);p$o=r(Iot,"xlm"),Iot.forEach(t),u$o=r(Fye," \u2014 "),$D=n(Fye,"A",{href:!0});var qot=s($D);_$o=r(qot,"XLMForMultipleChoice"),qot.forEach(t),b$o=r(Fye," (XLM model)"),Fye.forEach(t),v$o=i(K),Fb=n(K,"LI",{});var Tye=s(Fb);pce=n(Tye,"STRONG",{});var Not=s(pce);F$o=r(Not,"xlm-roberta"),Not.forEach(t),T$o=r(Tye," \u2014 "),kD=n(Tye,"A",{href:!0});var jot=s(kD);M$o=r(jot,"XLMRobertaForMultipleChoice"),jot.forEach(t),E$o=r(Tye," (XLM-RoBERTa model)"),Tye.forEach(t),C$o=i(K),Tb=n(K,"LI",{});var Mye=s(Tb);uce=n(Mye,"STRONG",{});var Dot=s(uce);w$o=r(Dot,"xlm-roberta-xl"),Dot.forEach(t),A$o=r(Mye," \u2014 "),SD=n(Mye,"A",{href:!0});var Got=s(SD);y$o=r(Got,"XLMRobertaXLForMultipleChoice"),Got.forEach(t),L$o=r(Mye," (XLM-RoBERTa-XL model)"),Mye.forEach(t),x$o=i(K),Mb=n(K,"LI",{});var Eye=s(Mb);_ce=n(Eye,"STRONG",{});var Oot=s(_ce);$$o=r(Oot,"xlnet"),Oot.forEach(t),k$o=r(Eye," \u2014 "),RD=n(Eye,"A",{href:!0});var Vot=s(RD);S$o=r(Vot,"XLNetForMultipleChoice"),Vot.forEach(t),R$o=r(Eye," (XLNet model)"),Eye.forEach(t),B$o=i(K),Eb=n(K,"LI",{});var Cye=s(Eb);bce=n(Cye,"STRONG",{});var Xot=s(bce);P$o=r(Xot,"yoso"),Xot.forEach(t),I$o=r(Cye," \u2014 "),BD=n(Cye,"A",{href:!0});var zot=s(BD);q$o=r(zot,"YosoForMultipleChoice"),zot.forEach(t),N$o=r(Cye," (YOSO model)"),Cye.forEach(t),K.forEach(t),j$o=i(ra),Cb=n(ra,"P",{});var wye=s(Cb);D$o=r(wye,"The model is set in evaluation mode by default using "),vce=n(wye,"CODE",{});var Qot=s(vce);G$o=r(Qot,"model.eval()"),Qot.forEach(t),O$o=r(wye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Fce=n(wye,"CODE",{});var Wot=s(Fce);V$o=r(Wot,"model.train()"),Wot.forEach(t),wye.forEach(t),X$o=i(ra),T(wb.$$.fragment,ra),ra.forEach(t),Gs.forEach(t),iBe=i(f),Ii=n(f,"H2",{class:!0});var cIe=s(Ii);Ab=n(cIe,"A",{id:!0,class:!0,href:!0});var Hot=s(Ab);Tce=n(Hot,"SPAN",{});var Uot=s(Tce);T(M0.$$.fragment,Uot),Uot.forEach(t),Hot.forEach(t),z$o=i(cIe),Mce=n(cIe,"SPAN",{});var Jot=s(Mce);Q$o=r(Jot,"AutoModelForNextSentencePrediction"),Jot.forEach(t),cIe.forEach(t),dBe=i(f),Bo=n(f,"DIV",{class:!0});var Os=s(Bo);T(E0.$$.fragment,Os),W$o=i(Os),qi=n(Os,"P",{});var dY=s(qi);H$o=r(dY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),PD=n(dY,"A",{href:!0});var Yot=s(PD);U$o=r(Yot,"from_pretrained()"),Yot.forEach(t),J$o=r(dY," class method or the "),ID=n(dY,"A",{href:!0});var Kot=s(ID);Y$o=r(Kot,"from_config()"),Kot.forEach(t),K$o=r(dY,` class
method.`),dY.forEach(t),Z$o=i(Os),C0=n(Os,"P",{});var fIe=s(C0);eko=r(fIe,"This class cannot be instantiated directly using "),Ece=n(fIe,"CODE",{});var Zot=s(Ece);oko=r(Zot,"__init__()"),Zot.forEach(t),rko=r(fIe," (throws an error)."),fIe.forEach(t),tko=i(Os),st=n(Os,"DIV",{class:!0});var B3=s(st);T(w0.$$.fragment,B3),ako=i(B3),Cce=n(B3,"P",{});var ert=s(Cce);nko=r(ert,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),ert.forEach(t),sko=i(B3),Ni=n(B3,"P",{});var cY=s(Ni);lko=r(cY,`Note:
Loading a model from its configuration file does `),wce=n(cY,"STRONG",{});var ort=s(wce);iko=r(ort,"not"),ort.forEach(t),dko=r(cY,` load the model weights. It only affects the
model\u2019s configuration. Use `),qD=n(cY,"A",{href:!0});var rrt=s(qD);cko=r(rrt,"from_pretrained()"),rrt.forEach(t),fko=r(cY," to load the model weights."),cY.forEach(t),mko=i(B3),T(yb.$$.fragment,B3),B3.forEach(t),gko=i(Os),eo=n(Os,"DIV",{class:!0});var ta=s(eo);T(A0.$$.fragment,ta),hko=i(ta),Ace=n(ta,"P",{});var trt=s(Ace);pko=r(trt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),trt.forEach(t),uko=i(ta),$a=n(ta,"P",{});var P3=s($a);_ko=r(P3,"The model class to instantiate is selected based on the "),yce=n(P3,"CODE",{});var art=s(yce);bko=r(art,"model_type"),art.forEach(t),vko=r(P3,` property of the config object (either
passed as an argument or loaded from `),Lce=n(P3,"CODE",{});var nrt=s(Lce);Fko=r(nrt,"pretrained_model_name_or_path"),nrt.forEach(t),Tko=r(P3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xce=n(P3,"CODE",{});var srt=s(xce);Mko=r(srt,"pretrained_model_name_or_path"),srt.forEach(t),Eko=r(P3,":"),P3.forEach(t),Cko=i(ta),Ur=n(ta,"UL",{});var Vs=s(Ur);Lb=n(Vs,"LI",{});var Aye=s(Lb);$ce=n(Aye,"STRONG",{});var lrt=s($ce);wko=r(lrt,"bert"),lrt.forEach(t),Ako=r(Aye," \u2014 "),ND=n(Aye,"A",{href:!0});var irt=s(ND);yko=r(irt,"BertForNextSentencePrediction"),irt.forEach(t),Lko=r(Aye," (BERT model)"),Aye.forEach(t),xko=i(Vs),xb=n(Vs,"LI",{});var yye=s(xb);kce=n(yye,"STRONG",{});var drt=s(kce);$ko=r(drt,"fnet"),drt.forEach(t),kko=r(yye," \u2014 "),jD=n(yye,"A",{href:!0});var crt=s(jD);Sko=r(crt,"FNetForNextSentencePrediction"),crt.forEach(t),Rko=r(yye," (FNet model)"),yye.forEach(t),Bko=i(Vs),$b=n(Vs,"LI",{});var Lye=s($b);Sce=n(Lye,"STRONG",{});var frt=s(Sce);Pko=r(frt,"megatron-bert"),frt.forEach(t),Iko=r(Lye," \u2014 "),DD=n(Lye,"A",{href:!0});var mrt=s(DD);qko=r(mrt,"MegatronBertForNextSentencePrediction"),mrt.forEach(t),Nko=r(Lye," (MegatronBert model)"),Lye.forEach(t),jko=i(Vs),kb=n(Vs,"LI",{});var xye=s(kb);Rce=n(xye,"STRONG",{});var grt=s(Rce);Dko=r(grt,"mobilebert"),grt.forEach(t),Gko=r(xye," \u2014 "),GD=n(xye,"A",{href:!0});var hrt=s(GD);Oko=r(hrt,"MobileBertForNextSentencePrediction"),hrt.forEach(t),Vko=r(xye," (MobileBERT model)"),xye.forEach(t),Xko=i(Vs),Sb=n(Vs,"LI",{});var $ye=s(Sb);Bce=n($ye,"STRONG",{});var prt=s(Bce);zko=r(prt,"qdqbert"),prt.forEach(t),Qko=r($ye," \u2014 "),OD=n($ye,"A",{href:!0});var urt=s(OD);Wko=r(urt,"QDQBertForNextSentencePrediction"),urt.forEach(t),Hko=r($ye," (QDQBert model)"),$ye.forEach(t),Vs.forEach(t),Uko=i(ta),Rb=n(ta,"P",{});var kye=s(Rb);Jko=r(kye,"The model is set in evaluation mode by default using "),Pce=n(kye,"CODE",{});var _rt=s(Pce);Yko=r(_rt,"model.eval()"),_rt.forEach(t),Kko=r(kye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ice=n(kye,"CODE",{});var brt=s(Ice);Zko=r(brt,"model.train()"),brt.forEach(t),kye.forEach(t),eSo=i(ta),T(Bb.$$.fragment,ta),ta.forEach(t),Os.forEach(t),cBe=i(f),ji=n(f,"H2",{class:!0});var mIe=s(ji);Pb=n(mIe,"A",{id:!0,class:!0,href:!0});var vrt=s(Pb);qce=n(vrt,"SPAN",{});var Frt=s(qce);T(y0.$$.fragment,Frt),Frt.forEach(t),vrt.forEach(t),oSo=i(mIe),Nce=n(mIe,"SPAN",{});var Trt=s(Nce);rSo=r(Trt,"AutoModelForTokenClassification"),Trt.forEach(t),mIe.forEach(t),fBe=i(f),Po=n(f,"DIV",{class:!0});var Xs=s(Po);T(L0.$$.fragment,Xs),tSo=i(Xs),Di=n(Xs,"P",{});var fY=s(Di);aSo=r(fY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),VD=n(fY,"A",{href:!0});var Mrt=s(VD);nSo=r(Mrt,"from_pretrained()"),Mrt.forEach(t),sSo=r(fY," class method or the "),XD=n(fY,"A",{href:!0});var Ert=s(XD);lSo=r(Ert,"from_config()"),Ert.forEach(t),iSo=r(fY,` class
method.`),fY.forEach(t),dSo=i(Xs),x0=n(Xs,"P",{});var gIe=s(x0);cSo=r(gIe,"This class cannot be instantiated directly using "),jce=n(gIe,"CODE",{});var Crt=s(jce);fSo=r(Crt,"__init__()"),Crt.forEach(t),mSo=r(gIe," (throws an error)."),gIe.forEach(t),gSo=i(Xs),lt=n(Xs,"DIV",{class:!0});var I3=s(lt);T($0.$$.fragment,I3),hSo=i(I3),Dce=n(I3,"P",{});var wrt=s(Dce);pSo=r(wrt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),wrt.forEach(t),uSo=i(I3),Gi=n(I3,"P",{});var mY=s(Gi);_So=r(mY,`Note:
Loading a model from its configuration file does `),Gce=n(mY,"STRONG",{});var Art=s(Gce);bSo=r(Art,"not"),Art.forEach(t),vSo=r(mY,` load the model weights. It only affects the
model\u2019s configuration. Use `),zD=n(mY,"A",{href:!0});var yrt=s(zD);FSo=r(yrt,"from_pretrained()"),yrt.forEach(t),TSo=r(mY," to load the model weights."),mY.forEach(t),MSo=i(I3),T(Ib.$$.fragment,I3),I3.forEach(t),ESo=i(Xs),oo=n(Xs,"DIV",{class:!0});var aa=s(oo);T(k0.$$.fragment,aa),CSo=i(aa),Oce=n(aa,"P",{});var Lrt=s(Oce);wSo=r(Lrt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Lrt.forEach(t),ASo=i(aa),ka=n(aa,"P",{});var q3=s(ka);ySo=r(q3,"The model class to instantiate is selected based on the "),Vce=n(q3,"CODE",{});var xrt=s(Vce);LSo=r(xrt,"model_type"),xrt.forEach(t),xSo=r(q3,` property of the config object (either
passed as an argument or loaded from `),Xce=n(q3,"CODE",{});var $rt=s(Xce);$So=r($rt,"pretrained_model_name_or_path"),$rt.forEach(t),kSo=r(q3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zce=n(q3,"CODE",{});var krt=s(zce);SSo=r(krt,"pretrained_model_name_or_path"),krt.forEach(t),RSo=r(q3,":"),q3.forEach(t),BSo=i(aa),U=n(aa,"UL",{});var J=s(U);qb=n(J,"LI",{});var Sye=s(qb);Qce=n(Sye,"STRONG",{});var Srt=s(Qce);PSo=r(Srt,"albert"),Srt.forEach(t),ISo=r(Sye," \u2014 "),QD=n(Sye,"A",{href:!0});var Rrt=s(QD);qSo=r(Rrt,"AlbertForTokenClassification"),Rrt.forEach(t),NSo=r(Sye," (ALBERT model)"),Sye.forEach(t),jSo=i(J),Nb=n(J,"LI",{});var Rye=s(Nb);Wce=n(Rye,"STRONG",{});var Brt=s(Wce);DSo=r(Brt,"bert"),Brt.forEach(t),GSo=r(Rye," \u2014 "),WD=n(Rye,"A",{href:!0});var Prt=s(WD);OSo=r(Prt,"BertForTokenClassification"),Prt.forEach(t),VSo=r(Rye," (BERT model)"),Rye.forEach(t),XSo=i(J),jb=n(J,"LI",{});var Bye=s(jb);Hce=n(Bye,"STRONG",{});var Irt=s(Hce);zSo=r(Irt,"big_bird"),Irt.forEach(t),QSo=r(Bye," \u2014 "),HD=n(Bye,"A",{href:!0});var qrt=s(HD);WSo=r(qrt,"BigBirdForTokenClassification"),qrt.forEach(t),HSo=r(Bye," (BigBird model)"),Bye.forEach(t),USo=i(J),Db=n(J,"LI",{});var Pye=s(Db);Uce=n(Pye,"STRONG",{});var Nrt=s(Uce);JSo=r(Nrt,"camembert"),Nrt.forEach(t),YSo=r(Pye," \u2014 "),UD=n(Pye,"A",{href:!0});var jrt=s(UD);KSo=r(jrt,"CamembertForTokenClassification"),jrt.forEach(t),ZSo=r(Pye," (CamemBERT model)"),Pye.forEach(t),eRo=i(J),Gb=n(J,"LI",{});var Iye=s(Gb);Jce=n(Iye,"STRONG",{});var Drt=s(Jce);oRo=r(Drt,"canine"),Drt.forEach(t),rRo=r(Iye," \u2014 "),JD=n(Iye,"A",{href:!0});var Grt=s(JD);tRo=r(Grt,"CanineForTokenClassification"),Grt.forEach(t),aRo=r(Iye," (Canine model)"),Iye.forEach(t),nRo=i(J),Ob=n(J,"LI",{});var qye=s(Ob);Yce=n(qye,"STRONG",{});var Ort=s(Yce);sRo=r(Ort,"convbert"),Ort.forEach(t),lRo=r(qye," \u2014 "),YD=n(qye,"A",{href:!0});var Vrt=s(YD);iRo=r(Vrt,"ConvBertForTokenClassification"),Vrt.forEach(t),dRo=r(qye," (ConvBERT model)"),qye.forEach(t),cRo=i(J),Vb=n(J,"LI",{});var Nye=s(Vb);Kce=n(Nye,"STRONG",{});var Xrt=s(Kce);fRo=r(Xrt,"data2vec-text"),Xrt.forEach(t),mRo=r(Nye," \u2014 "),KD=n(Nye,"A",{href:!0});var zrt=s(KD);gRo=r(zrt,"Data2VecTextForTokenClassification"),zrt.forEach(t),hRo=r(Nye," (Data2VecText model)"),Nye.forEach(t),pRo=i(J),Xb=n(J,"LI",{});var jye=s(Xb);Zce=n(jye,"STRONG",{});var Qrt=s(Zce);uRo=r(Qrt,"deberta"),Qrt.forEach(t),_Ro=r(jye," \u2014 "),ZD=n(jye,"A",{href:!0});var Wrt=s(ZD);bRo=r(Wrt,"DebertaForTokenClassification"),Wrt.forEach(t),vRo=r(jye," (DeBERTa model)"),jye.forEach(t),FRo=i(J),zb=n(J,"LI",{});var Dye=s(zb);efe=n(Dye,"STRONG",{});var Hrt=s(efe);TRo=r(Hrt,"deberta-v2"),Hrt.forEach(t),MRo=r(Dye," \u2014 "),eG=n(Dye,"A",{href:!0});var Urt=s(eG);ERo=r(Urt,"DebertaV2ForTokenClassification"),Urt.forEach(t),CRo=r(Dye," (DeBERTa-v2 model)"),Dye.forEach(t),wRo=i(J),Qb=n(J,"LI",{});var Gye=s(Qb);ofe=n(Gye,"STRONG",{});var Jrt=s(ofe);ARo=r(Jrt,"distilbert"),Jrt.forEach(t),yRo=r(Gye," \u2014 "),oG=n(Gye,"A",{href:!0});var Yrt=s(oG);LRo=r(Yrt,"DistilBertForTokenClassification"),Yrt.forEach(t),xRo=r(Gye," (DistilBERT model)"),Gye.forEach(t),$Ro=i(J),Wb=n(J,"LI",{});var Oye=s(Wb);rfe=n(Oye,"STRONG",{});var Krt=s(rfe);kRo=r(Krt,"electra"),Krt.forEach(t),SRo=r(Oye," \u2014 "),rG=n(Oye,"A",{href:!0});var Zrt=s(rG);RRo=r(Zrt,"ElectraForTokenClassification"),Zrt.forEach(t),BRo=r(Oye," (ELECTRA model)"),Oye.forEach(t),PRo=i(J),Hb=n(J,"LI",{});var Vye=s(Hb);tfe=n(Vye,"STRONG",{});var ett=s(tfe);IRo=r(ett,"flaubert"),ett.forEach(t),qRo=r(Vye," \u2014 "),tG=n(Vye,"A",{href:!0});var ott=s(tG);NRo=r(ott,"FlaubertForTokenClassification"),ott.forEach(t),jRo=r(Vye," (FlauBERT model)"),Vye.forEach(t),DRo=i(J),Ub=n(J,"LI",{});var Xye=s(Ub);afe=n(Xye,"STRONG",{});var rtt=s(afe);GRo=r(rtt,"fnet"),rtt.forEach(t),ORo=r(Xye," \u2014 "),aG=n(Xye,"A",{href:!0});var ttt=s(aG);VRo=r(ttt,"FNetForTokenClassification"),ttt.forEach(t),XRo=r(Xye," (FNet model)"),Xye.forEach(t),zRo=i(J),Jb=n(J,"LI",{});var zye=s(Jb);nfe=n(zye,"STRONG",{});var att=s(nfe);QRo=r(att,"funnel"),att.forEach(t),WRo=r(zye," \u2014 "),nG=n(zye,"A",{href:!0});var ntt=s(nG);HRo=r(ntt,"FunnelForTokenClassification"),ntt.forEach(t),URo=r(zye," (Funnel Transformer model)"),zye.forEach(t),JRo=i(J),Yb=n(J,"LI",{});var Qye=s(Yb);sfe=n(Qye,"STRONG",{});var stt=s(sfe);YRo=r(stt,"gpt2"),stt.forEach(t),KRo=r(Qye," \u2014 "),sG=n(Qye,"A",{href:!0});var ltt=s(sG);ZRo=r(ltt,"GPT2ForTokenClassification"),ltt.forEach(t),eBo=r(Qye," (OpenAI GPT-2 model)"),Qye.forEach(t),oBo=i(J),Kb=n(J,"LI",{});var Wye=s(Kb);lfe=n(Wye,"STRONG",{});var itt=s(lfe);rBo=r(itt,"ibert"),itt.forEach(t),tBo=r(Wye," \u2014 "),lG=n(Wye,"A",{href:!0});var dtt=s(lG);aBo=r(dtt,"IBertForTokenClassification"),dtt.forEach(t),nBo=r(Wye," (I-BERT model)"),Wye.forEach(t),sBo=i(J),Zb=n(J,"LI",{});var Hye=s(Zb);ife=n(Hye,"STRONG",{});var ctt=s(ife);lBo=r(ctt,"layoutlm"),ctt.forEach(t),iBo=r(Hye," \u2014 "),iG=n(Hye,"A",{href:!0});var ftt=s(iG);dBo=r(ftt,"LayoutLMForTokenClassification"),ftt.forEach(t),cBo=r(Hye," (LayoutLM model)"),Hye.forEach(t),fBo=i(J),e2=n(J,"LI",{});var Uye=s(e2);dfe=n(Uye,"STRONG",{});var mtt=s(dfe);mBo=r(mtt,"layoutlmv2"),mtt.forEach(t),gBo=r(Uye," \u2014 "),dG=n(Uye,"A",{href:!0});var gtt=s(dG);hBo=r(gtt,"LayoutLMv2ForTokenClassification"),gtt.forEach(t),pBo=r(Uye," (LayoutLMv2 model)"),Uye.forEach(t),uBo=i(J),o2=n(J,"LI",{});var Jye=s(o2);cfe=n(Jye,"STRONG",{});var htt=s(cfe);_Bo=r(htt,"longformer"),htt.forEach(t),bBo=r(Jye," \u2014 "),cG=n(Jye,"A",{href:!0});var ptt=s(cG);vBo=r(ptt,"LongformerForTokenClassification"),ptt.forEach(t),FBo=r(Jye," (Longformer model)"),Jye.forEach(t),TBo=i(J),r2=n(J,"LI",{});var Yye=s(r2);ffe=n(Yye,"STRONG",{});var utt=s(ffe);MBo=r(utt,"megatron-bert"),utt.forEach(t),EBo=r(Yye," \u2014 "),fG=n(Yye,"A",{href:!0});var _tt=s(fG);CBo=r(_tt,"MegatronBertForTokenClassification"),_tt.forEach(t),wBo=r(Yye," (MegatronBert model)"),Yye.forEach(t),ABo=i(J),t2=n(J,"LI",{});var Kye=s(t2);mfe=n(Kye,"STRONG",{});var btt=s(mfe);yBo=r(btt,"mobilebert"),btt.forEach(t),LBo=r(Kye," \u2014 "),mG=n(Kye,"A",{href:!0});var vtt=s(mG);xBo=r(vtt,"MobileBertForTokenClassification"),vtt.forEach(t),$Bo=r(Kye," (MobileBERT model)"),Kye.forEach(t),kBo=i(J),a2=n(J,"LI",{});var Zye=s(a2);gfe=n(Zye,"STRONG",{});var Ftt=s(gfe);SBo=r(Ftt,"mpnet"),Ftt.forEach(t),RBo=r(Zye," \u2014 "),gG=n(Zye,"A",{href:!0});var Ttt=s(gG);BBo=r(Ttt,"MPNetForTokenClassification"),Ttt.forEach(t),PBo=r(Zye," (MPNet model)"),Zye.forEach(t),IBo=i(J),n2=n(J,"LI",{});var eLe=s(n2);hfe=n(eLe,"STRONG",{});var Mtt=s(hfe);qBo=r(Mtt,"nystromformer"),Mtt.forEach(t),NBo=r(eLe," \u2014 "),hG=n(eLe,"A",{href:!0});var Ett=s(hG);jBo=r(Ett,"NystromformerForTokenClassification"),Ett.forEach(t),DBo=r(eLe," (Nystromformer model)"),eLe.forEach(t),GBo=i(J),s2=n(J,"LI",{});var oLe=s(s2);pfe=n(oLe,"STRONG",{});var Ctt=s(pfe);OBo=r(Ctt,"qdqbert"),Ctt.forEach(t),VBo=r(oLe," \u2014 "),pG=n(oLe,"A",{href:!0});var wtt=s(pG);XBo=r(wtt,"QDQBertForTokenClassification"),wtt.forEach(t),zBo=r(oLe," (QDQBert model)"),oLe.forEach(t),QBo=i(J),l2=n(J,"LI",{});var rLe=s(l2);ufe=n(rLe,"STRONG",{});var Att=s(ufe);WBo=r(Att,"rembert"),Att.forEach(t),HBo=r(rLe," \u2014 "),uG=n(rLe,"A",{href:!0});var ytt=s(uG);UBo=r(ytt,"RemBertForTokenClassification"),ytt.forEach(t),JBo=r(rLe," (RemBERT model)"),rLe.forEach(t),YBo=i(J),i2=n(J,"LI",{});var tLe=s(i2);_fe=n(tLe,"STRONG",{});var Ltt=s(_fe);KBo=r(Ltt,"roberta"),Ltt.forEach(t),ZBo=r(tLe," \u2014 "),_G=n(tLe,"A",{href:!0});var xtt=s(_G);ePo=r(xtt,"RobertaForTokenClassification"),xtt.forEach(t),oPo=r(tLe," (RoBERTa model)"),tLe.forEach(t),rPo=i(J),d2=n(J,"LI",{});var aLe=s(d2);bfe=n(aLe,"STRONG",{});var $tt=s(bfe);tPo=r($tt,"roformer"),$tt.forEach(t),aPo=r(aLe," \u2014 "),bG=n(aLe,"A",{href:!0});var ktt=s(bG);nPo=r(ktt,"RoFormerForTokenClassification"),ktt.forEach(t),sPo=r(aLe," (RoFormer model)"),aLe.forEach(t),lPo=i(J),c2=n(J,"LI",{});var nLe=s(c2);vfe=n(nLe,"STRONG",{});var Stt=s(vfe);iPo=r(Stt,"squeezebert"),Stt.forEach(t),dPo=r(nLe," \u2014 "),vG=n(nLe,"A",{href:!0});var Rtt=s(vG);cPo=r(Rtt,"SqueezeBertForTokenClassification"),Rtt.forEach(t),fPo=r(nLe," (SqueezeBERT model)"),nLe.forEach(t),mPo=i(J),f2=n(J,"LI",{});var sLe=s(f2);Ffe=n(sLe,"STRONG",{});var Btt=s(Ffe);gPo=r(Btt,"xlm"),Btt.forEach(t),hPo=r(sLe," \u2014 "),FG=n(sLe,"A",{href:!0});var Ptt=s(FG);pPo=r(Ptt,"XLMForTokenClassification"),Ptt.forEach(t),uPo=r(sLe," (XLM model)"),sLe.forEach(t),_Po=i(J),m2=n(J,"LI",{});var lLe=s(m2);Tfe=n(lLe,"STRONG",{});var Itt=s(Tfe);bPo=r(Itt,"xlm-roberta"),Itt.forEach(t),vPo=r(lLe," \u2014 "),TG=n(lLe,"A",{href:!0});var qtt=s(TG);FPo=r(qtt,"XLMRobertaForTokenClassification"),qtt.forEach(t),TPo=r(lLe," (XLM-RoBERTa model)"),lLe.forEach(t),MPo=i(J),g2=n(J,"LI",{});var iLe=s(g2);Mfe=n(iLe,"STRONG",{});var Ntt=s(Mfe);EPo=r(Ntt,"xlm-roberta-xl"),Ntt.forEach(t),CPo=r(iLe," \u2014 "),MG=n(iLe,"A",{href:!0});var jtt=s(MG);wPo=r(jtt,"XLMRobertaXLForTokenClassification"),jtt.forEach(t),APo=r(iLe," (XLM-RoBERTa-XL model)"),iLe.forEach(t),yPo=i(J),h2=n(J,"LI",{});var dLe=s(h2);Efe=n(dLe,"STRONG",{});var Dtt=s(Efe);LPo=r(Dtt,"xlnet"),Dtt.forEach(t),xPo=r(dLe," \u2014 "),EG=n(dLe,"A",{href:!0});var Gtt=s(EG);$Po=r(Gtt,"XLNetForTokenClassification"),Gtt.forEach(t),kPo=r(dLe," (XLNet model)"),dLe.forEach(t),SPo=i(J),p2=n(J,"LI",{});var cLe=s(p2);Cfe=n(cLe,"STRONG",{});var Ott=s(Cfe);RPo=r(Ott,"yoso"),Ott.forEach(t),BPo=r(cLe," \u2014 "),CG=n(cLe,"A",{href:!0});var Vtt=s(CG);PPo=r(Vtt,"YosoForTokenClassification"),Vtt.forEach(t),IPo=r(cLe," (YOSO model)"),cLe.forEach(t),J.forEach(t),qPo=i(aa),u2=n(aa,"P",{});var fLe=s(u2);NPo=r(fLe,"The model is set in evaluation mode by default using "),wfe=n(fLe,"CODE",{});var Xtt=s(wfe);jPo=r(Xtt,"model.eval()"),Xtt.forEach(t),DPo=r(fLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Afe=n(fLe,"CODE",{});var ztt=s(Afe);GPo=r(ztt,"model.train()"),ztt.forEach(t),fLe.forEach(t),OPo=i(aa),T(_2.$$.fragment,aa),aa.forEach(t),Xs.forEach(t),mBe=i(f),Oi=n(f,"H2",{class:!0});var hIe=s(Oi);b2=n(hIe,"A",{id:!0,class:!0,href:!0});var Qtt=s(b2);yfe=n(Qtt,"SPAN",{});var Wtt=s(yfe);T(S0.$$.fragment,Wtt),Wtt.forEach(t),Qtt.forEach(t),VPo=i(hIe),Lfe=n(hIe,"SPAN",{});var Htt=s(Lfe);XPo=r(Htt,"AutoModelForQuestionAnswering"),Htt.forEach(t),hIe.forEach(t),gBe=i(f),Io=n(f,"DIV",{class:!0});var zs=s(Io);T(R0.$$.fragment,zs),zPo=i(zs),Vi=n(zs,"P",{});var gY=s(Vi);QPo=r(gY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),wG=n(gY,"A",{href:!0});var Utt=s(wG);WPo=r(Utt,"from_pretrained()"),Utt.forEach(t),HPo=r(gY," class method or the "),AG=n(gY,"A",{href:!0});var Jtt=s(AG);UPo=r(Jtt,"from_config()"),Jtt.forEach(t),JPo=r(gY,` class
method.`),gY.forEach(t),YPo=i(zs),B0=n(zs,"P",{});var pIe=s(B0);KPo=r(pIe,"This class cannot be instantiated directly using "),xfe=n(pIe,"CODE",{});var Ytt=s(xfe);ZPo=r(Ytt,"__init__()"),Ytt.forEach(t),eIo=r(pIe," (throws an error)."),pIe.forEach(t),oIo=i(zs),it=n(zs,"DIV",{class:!0});var N3=s(it);T(P0.$$.fragment,N3),rIo=i(N3),$fe=n(N3,"P",{});var Ktt=s($fe);tIo=r(Ktt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Ktt.forEach(t),aIo=i(N3),Xi=n(N3,"P",{});var hY=s(Xi);nIo=r(hY,`Note:
Loading a model from its configuration file does `),kfe=n(hY,"STRONG",{});var Ztt=s(kfe);sIo=r(Ztt,"not"),Ztt.forEach(t),lIo=r(hY,` load the model weights. It only affects the
model\u2019s configuration. Use `),yG=n(hY,"A",{href:!0});var eat=s(yG);iIo=r(eat,"from_pretrained()"),eat.forEach(t),dIo=r(hY," to load the model weights."),hY.forEach(t),cIo=i(N3),T(v2.$$.fragment,N3),N3.forEach(t),fIo=i(zs),ro=n(zs,"DIV",{class:!0});var na=s(ro);T(I0.$$.fragment,na),mIo=i(na),Sfe=n(na,"P",{});var oat=s(Sfe);gIo=r(oat,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),oat.forEach(t),hIo=i(na),Sa=n(na,"P",{});var j3=s(Sa);pIo=r(j3,"The model class to instantiate is selected based on the "),Rfe=n(j3,"CODE",{});var rat=s(Rfe);uIo=r(rat,"model_type"),rat.forEach(t),_Io=r(j3,` property of the config object (either
passed as an argument or loaded from `),Bfe=n(j3,"CODE",{});var tat=s(Bfe);bIo=r(tat,"pretrained_model_name_or_path"),tat.forEach(t),vIo=r(j3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Pfe=n(j3,"CODE",{});var aat=s(Pfe);FIo=r(aat,"pretrained_model_name_or_path"),aat.forEach(t),TIo=r(j3,":"),j3.forEach(t),MIo=i(na),O=n(na,"UL",{});var X=s(O);F2=n(X,"LI",{});var mLe=s(F2);Ife=n(mLe,"STRONG",{});var nat=s(Ife);EIo=r(nat,"albert"),nat.forEach(t),CIo=r(mLe," \u2014 "),LG=n(mLe,"A",{href:!0});var sat=s(LG);wIo=r(sat,"AlbertForQuestionAnswering"),sat.forEach(t),AIo=r(mLe," (ALBERT model)"),mLe.forEach(t),yIo=i(X),T2=n(X,"LI",{});var gLe=s(T2);qfe=n(gLe,"STRONG",{});var lat=s(qfe);LIo=r(lat,"bart"),lat.forEach(t),xIo=r(gLe," \u2014 "),xG=n(gLe,"A",{href:!0});var iat=s(xG);$Io=r(iat,"BartForQuestionAnswering"),iat.forEach(t),kIo=r(gLe," (BART model)"),gLe.forEach(t),SIo=i(X),M2=n(X,"LI",{});var hLe=s(M2);Nfe=n(hLe,"STRONG",{});var dat=s(Nfe);RIo=r(dat,"bert"),dat.forEach(t),BIo=r(hLe," \u2014 "),$G=n(hLe,"A",{href:!0});var cat=s($G);PIo=r(cat,"BertForQuestionAnswering"),cat.forEach(t),IIo=r(hLe," (BERT model)"),hLe.forEach(t),qIo=i(X),E2=n(X,"LI",{});var pLe=s(E2);jfe=n(pLe,"STRONG",{});var fat=s(jfe);NIo=r(fat,"big_bird"),fat.forEach(t),jIo=r(pLe," \u2014 "),kG=n(pLe,"A",{href:!0});var mat=s(kG);DIo=r(mat,"BigBirdForQuestionAnswering"),mat.forEach(t),GIo=r(pLe," (BigBird model)"),pLe.forEach(t),OIo=i(X),C2=n(X,"LI",{});var uLe=s(C2);Dfe=n(uLe,"STRONG",{});var gat=s(Dfe);VIo=r(gat,"bigbird_pegasus"),gat.forEach(t),XIo=r(uLe," \u2014 "),SG=n(uLe,"A",{href:!0});var hat=s(SG);zIo=r(hat,"BigBirdPegasusForQuestionAnswering"),hat.forEach(t),QIo=r(uLe," (BigBirdPegasus model)"),uLe.forEach(t),WIo=i(X),w2=n(X,"LI",{});var _Le=s(w2);Gfe=n(_Le,"STRONG",{});var pat=s(Gfe);HIo=r(pat,"camembert"),pat.forEach(t),UIo=r(_Le," \u2014 "),RG=n(_Le,"A",{href:!0});var uat=s(RG);JIo=r(uat,"CamembertForQuestionAnswering"),uat.forEach(t),YIo=r(_Le," (CamemBERT model)"),_Le.forEach(t),KIo=i(X),A2=n(X,"LI",{});var bLe=s(A2);Ofe=n(bLe,"STRONG",{});var _at=s(Ofe);ZIo=r(_at,"canine"),_at.forEach(t),eqo=r(bLe," \u2014 "),BG=n(bLe,"A",{href:!0});var bat=s(BG);oqo=r(bat,"CanineForQuestionAnswering"),bat.forEach(t),rqo=r(bLe," (Canine model)"),bLe.forEach(t),tqo=i(X),y2=n(X,"LI",{});var vLe=s(y2);Vfe=n(vLe,"STRONG",{});var vat=s(Vfe);aqo=r(vat,"convbert"),vat.forEach(t),nqo=r(vLe," \u2014 "),PG=n(vLe,"A",{href:!0});var Fat=s(PG);sqo=r(Fat,"ConvBertForQuestionAnswering"),Fat.forEach(t),lqo=r(vLe," (ConvBERT model)"),vLe.forEach(t),iqo=i(X),L2=n(X,"LI",{});var FLe=s(L2);Xfe=n(FLe,"STRONG",{});var Tat=s(Xfe);dqo=r(Tat,"data2vec-text"),Tat.forEach(t),cqo=r(FLe," \u2014 "),IG=n(FLe,"A",{href:!0});var Mat=s(IG);fqo=r(Mat,"Data2VecTextForQuestionAnswering"),Mat.forEach(t),mqo=r(FLe," (Data2VecText model)"),FLe.forEach(t),gqo=i(X),x2=n(X,"LI",{});var TLe=s(x2);zfe=n(TLe,"STRONG",{});var Eat=s(zfe);hqo=r(Eat,"deberta"),Eat.forEach(t),pqo=r(TLe," \u2014 "),qG=n(TLe,"A",{href:!0});var Cat=s(qG);uqo=r(Cat,"DebertaForQuestionAnswering"),Cat.forEach(t),_qo=r(TLe," (DeBERTa model)"),TLe.forEach(t),bqo=i(X),$2=n(X,"LI",{});var MLe=s($2);Qfe=n(MLe,"STRONG",{});var wat=s(Qfe);vqo=r(wat,"deberta-v2"),wat.forEach(t),Fqo=r(MLe," \u2014 "),NG=n(MLe,"A",{href:!0});var Aat=s(NG);Tqo=r(Aat,"DebertaV2ForQuestionAnswering"),Aat.forEach(t),Mqo=r(MLe," (DeBERTa-v2 model)"),MLe.forEach(t),Eqo=i(X),k2=n(X,"LI",{});var ELe=s(k2);Wfe=n(ELe,"STRONG",{});var yat=s(Wfe);Cqo=r(yat,"distilbert"),yat.forEach(t),wqo=r(ELe," \u2014 "),jG=n(ELe,"A",{href:!0});var Lat=s(jG);Aqo=r(Lat,"DistilBertForQuestionAnswering"),Lat.forEach(t),yqo=r(ELe," (DistilBERT model)"),ELe.forEach(t),Lqo=i(X),S2=n(X,"LI",{});var CLe=s(S2);Hfe=n(CLe,"STRONG",{});var xat=s(Hfe);xqo=r(xat,"electra"),xat.forEach(t),$qo=r(CLe," \u2014 "),DG=n(CLe,"A",{href:!0});var $at=s(DG);kqo=r($at,"ElectraForQuestionAnswering"),$at.forEach(t),Sqo=r(CLe," (ELECTRA model)"),CLe.forEach(t),Rqo=i(X),R2=n(X,"LI",{});var wLe=s(R2);Ufe=n(wLe,"STRONG",{});var kat=s(Ufe);Bqo=r(kat,"flaubert"),kat.forEach(t),Pqo=r(wLe," \u2014 "),GG=n(wLe,"A",{href:!0});var Sat=s(GG);Iqo=r(Sat,"FlaubertForQuestionAnsweringSimple"),Sat.forEach(t),qqo=r(wLe," (FlauBERT model)"),wLe.forEach(t),Nqo=i(X),B2=n(X,"LI",{});var ALe=s(B2);Jfe=n(ALe,"STRONG",{});var Rat=s(Jfe);jqo=r(Rat,"fnet"),Rat.forEach(t),Dqo=r(ALe," \u2014 "),OG=n(ALe,"A",{href:!0});var Bat=s(OG);Gqo=r(Bat,"FNetForQuestionAnswering"),Bat.forEach(t),Oqo=r(ALe," (FNet model)"),ALe.forEach(t),Vqo=i(X),P2=n(X,"LI",{});var yLe=s(P2);Yfe=n(yLe,"STRONG",{});var Pat=s(Yfe);Xqo=r(Pat,"funnel"),Pat.forEach(t),zqo=r(yLe," \u2014 "),VG=n(yLe,"A",{href:!0});var Iat=s(VG);Qqo=r(Iat,"FunnelForQuestionAnswering"),Iat.forEach(t),Wqo=r(yLe," (Funnel Transformer model)"),yLe.forEach(t),Hqo=i(X),I2=n(X,"LI",{});var LLe=s(I2);Kfe=n(LLe,"STRONG",{});var qat=s(Kfe);Uqo=r(qat,"gptj"),qat.forEach(t),Jqo=r(LLe," \u2014 "),XG=n(LLe,"A",{href:!0});var Nat=s(XG);Yqo=r(Nat,"GPTJForQuestionAnswering"),Nat.forEach(t),Kqo=r(LLe," (GPT-J model)"),LLe.forEach(t),Zqo=i(X),q2=n(X,"LI",{});var xLe=s(q2);Zfe=n(xLe,"STRONG",{});var jat=s(Zfe);eNo=r(jat,"ibert"),jat.forEach(t),oNo=r(xLe," \u2014 "),zG=n(xLe,"A",{href:!0});var Dat=s(zG);rNo=r(Dat,"IBertForQuestionAnswering"),Dat.forEach(t),tNo=r(xLe," (I-BERT model)"),xLe.forEach(t),aNo=i(X),N2=n(X,"LI",{});var $Le=s(N2);eme=n($Le,"STRONG",{});var Gat=s(eme);nNo=r(Gat,"layoutlmv2"),Gat.forEach(t),sNo=r($Le," \u2014 "),QG=n($Le,"A",{href:!0});var Oat=s(QG);lNo=r(Oat,"LayoutLMv2ForQuestionAnswering"),Oat.forEach(t),iNo=r($Le," (LayoutLMv2 model)"),$Le.forEach(t),dNo=i(X),j2=n(X,"LI",{});var kLe=s(j2);ome=n(kLe,"STRONG",{});var Vat=s(ome);cNo=r(Vat,"led"),Vat.forEach(t),fNo=r(kLe," \u2014 "),WG=n(kLe,"A",{href:!0});var Xat=s(WG);mNo=r(Xat,"LEDForQuestionAnswering"),Xat.forEach(t),gNo=r(kLe," (LED model)"),kLe.forEach(t),hNo=i(X),D2=n(X,"LI",{});var SLe=s(D2);rme=n(SLe,"STRONG",{});var zat=s(rme);pNo=r(zat,"longformer"),zat.forEach(t),uNo=r(SLe," \u2014 "),HG=n(SLe,"A",{href:!0});var Qat=s(HG);_No=r(Qat,"LongformerForQuestionAnswering"),Qat.forEach(t),bNo=r(SLe," (Longformer model)"),SLe.forEach(t),vNo=i(X),G2=n(X,"LI",{});var RLe=s(G2);tme=n(RLe,"STRONG",{});var Wat=s(tme);FNo=r(Wat,"lxmert"),Wat.forEach(t),TNo=r(RLe," \u2014 "),UG=n(RLe,"A",{href:!0});var Hat=s(UG);MNo=r(Hat,"LxmertForQuestionAnswering"),Hat.forEach(t),ENo=r(RLe," (LXMERT model)"),RLe.forEach(t),CNo=i(X),O2=n(X,"LI",{});var BLe=s(O2);ame=n(BLe,"STRONG",{});var Uat=s(ame);wNo=r(Uat,"mbart"),Uat.forEach(t),ANo=r(BLe," \u2014 "),JG=n(BLe,"A",{href:!0});var Jat=s(JG);yNo=r(Jat,"MBartForQuestionAnswering"),Jat.forEach(t),LNo=r(BLe," (mBART model)"),BLe.forEach(t),xNo=i(X),V2=n(X,"LI",{});var PLe=s(V2);nme=n(PLe,"STRONG",{});var Yat=s(nme);$No=r(Yat,"megatron-bert"),Yat.forEach(t),kNo=r(PLe," \u2014 "),YG=n(PLe,"A",{href:!0});var Kat=s(YG);SNo=r(Kat,"MegatronBertForQuestionAnswering"),Kat.forEach(t),RNo=r(PLe," (MegatronBert model)"),PLe.forEach(t),BNo=i(X),X2=n(X,"LI",{});var ILe=s(X2);sme=n(ILe,"STRONG",{});var Zat=s(sme);PNo=r(Zat,"mobilebert"),Zat.forEach(t),INo=r(ILe," \u2014 "),KG=n(ILe,"A",{href:!0});var ent=s(KG);qNo=r(ent,"MobileBertForQuestionAnswering"),ent.forEach(t),NNo=r(ILe," (MobileBERT model)"),ILe.forEach(t),jNo=i(X),z2=n(X,"LI",{});var qLe=s(z2);lme=n(qLe,"STRONG",{});var ont=s(lme);DNo=r(ont,"mpnet"),ont.forEach(t),GNo=r(qLe," \u2014 "),ZG=n(qLe,"A",{href:!0});var rnt=s(ZG);ONo=r(rnt,"MPNetForQuestionAnswering"),rnt.forEach(t),VNo=r(qLe," (MPNet model)"),qLe.forEach(t),XNo=i(X),Q2=n(X,"LI",{});var NLe=s(Q2);ime=n(NLe,"STRONG",{});var tnt=s(ime);zNo=r(tnt,"nystromformer"),tnt.forEach(t),QNo=r(NLe," \u2014 "),eO=n(NLe,"A",{href:!0});var ant=s(eO);WNo=r(ant,"NystromformerForQuestionAnswering"),ant.forEach(t),HNo=r(NLe," (Nystromformer model)"),NLe.forEach(t),UNo=i(X),W2=n(X,"LI",{});var jLe=s(W2);dme=n(jLe,"STRONG",{});var nnt=s(dme);JNo=r(nnt,"qdqbert"),nnt.forEach(t),YNo=r(jLe," \u2014 "),oO=n(jLe,"A",{href:!0});var snt=s(oO);KNo=r(snt,"QDQBertForQuestionAnswering"),snt.forEach(t),ZNo=r(jLe," (QDQBert model)"),jLe.forEach(t),ejo=i(X),H2=n(X,"LI",{});var DLe=s(H2);cme=n(DLe,"STRONG",{});var lnt=s(cme);ojo=r(lnt,"reformer"),lnt.forEach(t),rjo=r(DLe," \u2014 "),rO=n(DLe,"A",{href:!0});var int=s(rO);tjo=r(int,"ReformerForQuestionAnswering"),int.forEach(t),ajo=r(DLe," (Reformer model)"),DLe.forEach(t),njo=i(X),U2=n(X,"LI",{});var GLe=s(U2);fme=n(GLe,"STRONG",{});var dnt=s(fme);sjo=r(dnt,"rembert"),dnt.forEach(t),ljo=r(GLe," \u2014 "),tO=n(GLe,"A",{href:!0});var cnt=s(tO);ijo=r(cnt,"RemBertForQuestionAnswering"),cnt.forEach(t),djo=r(GLe," (RemBERT model)"),GLe.forEach(t),cjo=i(X),J2=n(X,"LI",{});var OLe=s(J2);mme=n(OLe,"STRONG",{});var fnt=s(mme);fjo=r(fnt,"roberta"),fnt.forEach(t),mjo=r(OLe," \u2014 "),aO=n(OLe,"A",{href:!0});var mnt=s(aO);gjo=r(mnt,"RobertaForQuestionAnswering"),mnt.forEach(t),hjo=r(OLe," (RoBERTa model)"),OLe.forEach(t),pjo=i(X),Y2=n(X,"LI",{});var VLe=s(Y2);gme=n(VLe,"STRONG",{});var gnt=s(gme);ujo=r(gnt,"roformer"),gnt.forEach(t),_jo=r(VLe," \u2014 "),nO=n(VLe,"A",{href:!0});var hnt=s(nO);bjo=r(hnt,"RoFormerForQuestionAnswering"),hnt.forEach(t),vjo=r(VLe," (RoFormer model)"),VLe.forEach(t),Fjo=i(X),K2=n(X,"LI",{});var XLe=s(K2);hme=n(XLe,"STRONG",{});var pnt=s(hme);Tjo=r(pnt,"splinter"),pnt.forEach(t),Mjo=r(XLe," \u2014 "),sO=n(XLe,"A",{href:!0});var unt=s(sO);Ejo=r(unt,"SplinterForQuestionAnswering"),unt.forEach(t),Cjo=r(XLe," (Splinter model)"),XLe.forEach(t),wjo=i(X),Z2=n(X,"LI",{});var zLe=s(Z2);pme=n(zLe,"STRONG",{});var _nt=s(pme);Ajo=r(_nt,"squeezebert"),_nt.forEach(t),yjo=r(zLe," \u2014 "),lO=n(zLe,"A",{href:!0});var bnt=s(lO);Ljo=r(bnt,"SqueezeBertForQuestionAnswering"),bnt.forEach(t),xjo=r(zLe," (SqueezeBERT model)"),zLe.forEach(t),$jo=i(X),e5=n(X,"LI",{});var QLe=s(e5);ume=n(QLe,"STRONG",{});var vnt=s(ume);kjo=r(vnt,"xlm"),vnt.forEach(t),Sjo=r(QLe," \u2014 "),iO=n(QLe,"A",{href:!0});var Fnt=s(iO);Rjo=r(Fnt,"XLMForQuestionAnsweringSimple"),Fnt.forEach(t),Bjo=r(QLe," (XLM model)"),QLe.forEach(t),Pjo=i(X),o5=n(X,"LI",{});var WLe=s(o5);_me=n(WLe,"STRONG",{});var Tnt=s(_me);Ijo=r(Tnt,"xlm-roberta"),Tnt.forEach(t),qjo=r(WLe," \u2014 "),dO=n(WLe,"A",{href:!0});var Mnt=s(dO);Njo=r(Mnt,"XLMRobertaForQuestionAnswering"),Mnt.forEach(t),jjo=r(WLe," (XLM-RoBERTa model)"),WLe.forEach(t),Djo=i(X),r5=n(X,"LI",{});var HLe=s(r5);bme=n(HLe,"STRONG",{});var Ent=s(bme);Gjo=r(Ent,"xlm-roberta-xl"),Ent.forEach(t),Ojo=r(HLe," \u2014 "),cO=n(HLe,"A",{href:!0});var Cnt=s(cO);Vjo=r(Cnt,"XLMRobertaXLForQuestionAnswering"),Cnt.forEach(t),Xjo=r(HLe," (XLM-RoBERTa-XL model)"),HLe.forEach(t),zjo=i(X),t5=n(X,"LI",{});var ULe=s(t5);vme=n(ULe,"STRONG",{});var wnt=s(vme);Qjo=r(wnt,"xlnet"),wnt.forEach(t),Wjo=r(ULe," \u2014 "),fO=n(ULe,"A",{href:!0});var Ant=s(fO);Hjo=r(Ant,"XLNetForQuestionAnsweringSimple"),Ant.forEach(t),Ujo=r(ULe," (XLNet model)"),ULe.forEach(t),Jjo=i(X),a5=n(X,"LI",{});var JLe=s(a5);Fme=n(JLe,"STRONG",{});var ynt=s(Fme);Yjo=r(ynt,"yoso"),ynt.forEach(t),Kjo=r(JLe," \u2014 "),mO=n(JLe,"A",{href:!0});var Lnt=s(mO);Zjo=r(Lnt,"YosoForQuestionAnswering"),Lnt.forEach(t),eDo=r(JLe," (YOSO model)"),JLe.forEach(t),X.forEach(t),oDo=i(na),n5=n(na,"P",{});var YLe=s(n5);rDo=r(YLe,"The model is set in evaluation mode by default using "),Tme=n(YLe,"CODE",{});var xnt=s(Tme);tDo=r(xnt,"model.eval()"),xnt.forEach(t),aDo=r(YLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Mme=n(YLe,"CODE",{});var $nt=s(Mme);nDo=r($nt,"model.train()"),$nt.forEach(t),YLe.forEach(t),sDo=i(na),T(s5.$$.fragment,na),na.forEach(t),zs.forEach(t),hBe=i(f),zi=n(f,"H2",{class:!0});var uIe=s(zi);l5=n(uIe,"A",{id:!0,class:!0,href:!0});var knt=s(l5);Eme=n(knt,"SPAN",{});var Snt=s(Eme);T(q0.$$.fragment,Snt),Snt.forEach(t),knt.forEach(t),lDo=i(uIe),Cme=n(uIe,"SPAN",{});var Rnt=s(Cme);iDo=r(Rnt,"AutoModelForTableQuestionAnswering"),Rnt.forEach(t),uIe.forEach(t),pBe=i(f),qo=n(f,"DIV",{class:!0});var Qs=s(qo);T(N0.$$.fragment,Qs),dDo=i(Qs),Qi=n(Qs,"P",{});var pY=s(Qi);cDo=r(pY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),gO=n(pY,"A",{href:!0});var Bnt=s(gO);fDo=r(Bnt,"from_pretrained()"),Bnt.forEach(t),mDo=r(pY," class method or the "),hO=n(pY,"A",{href:!0});var Pnt=s(hO);gDo=r(Pnt,"from_config()"),Pnt.forEach(t),hDo=r(pY,` class
method.`),pY.forEach(t),pDo=i(Qs),j0=n(Qs,"P",{});var _Ie=s(j0);uDo=r(_Ie,"This class cannot be instantiated directly using "),wme=n(_Ie,"CODE",{});var Int=s(wme);_Do=r(Int,"__init__()"),Int.forEach(t),bDo=r(_Ie," (throws an error)."),_Ie.forEach(t),vDo=i(Qs),dt=n(Qs,"DIV",{class:!0});var D3=s(dt);T(D0.$$.fragment,D3),FDo=i(D3),Ame=n(D3,"P",{});var qnt=s(Ame);TDo=r(qnt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),qnt.forEach(t),MDo=i(D3),Wi=n(D3,"P",{});var uY=s(Wi);EDo=r(uY,`Note:
Loading a model from its configuration file does `),yme=n(uY,"STRONG",{});var Nnt=s(yme);CDo=r(Nnt,"not"),Nnt.forEach(t),wDo=r(uY,` load the model weights. It only affects the
model\u2019s configuration. Use `),pO=n(uY,"A",{href:!0});var jnt=s(pO);ADo=r(jnt,"from_pretrained()"),jnt.forEach(t),yDo=r(uY," to load the model weights."),uY.forEach(t),LDo=i(D3),T(i5.$$.fragment,D3),D3.forEach(t),xDo=i(Qs),to=n(Qs,"DIV",{class:!0});var sa=s(to);T(G0.$$.fragment,sa),$Do=i(sa),Lme=n(sa,"P",{});var Dnt=s(Lme);kDo=r(Dnt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Dnt.forEach(t),SDo=i(sa),Ra=n(sa,"P",{});var G3=s(Ra);RDo=r(G3,"The model class to instantiate is selected based on the "),xme=n(G3,"CODE",{});var Gnt=s(xme);BDo=r(Gnt,"model_type"),Gnt.forEach(t),PDo=r(G3,` property of the config object (either
passed as an argument or loaded from `),$me=n(G3,"CODE",{});var Ont=s($me);IDo=r(Ont,"pretrained_model_name_or_path"),Ont.forEach(t),qDo=r(G3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kme=n(G3,"CODE",{});var Vnt=s(kme);NDo=r(Vnt,"pretrained_model_name_or_path"),Vnt.forEach(t),jDo=r(G3,":"),G3.forEach(t),DDo=i(sa),Sme=n(sa,"UL",{});var Xnt=s(Sme);d5=n(Xnt,"LI",{});var KLe=s(d5);Rme=n(KLe,"STRONG",{});var znt=s(Rme);GDo=r(znt,"tapas"),znt.forEach(t),ODo=r(KLe," \u2014 "),uO=n(KLe,"A",{href:!0});var Qnt=s(uO);VDo=r(Qnt,"TapasForQuestionAnswering"),Qnt.forEach(t),XDo=r(KLe," (TAPAS model)"),KLe.forEach(t),Xnt.forEach(t),zDo=i(sa),c5=n(sa,"P",{});var ZLe=s(c5);QDo=r(ZLe,"The model is set in evaluation mode by default using "),Bme=n(ZLe,"CODE",{});var Wnt=s(Bme);WDo=r(Wnt,"model.eval()"),Wnt.forEach(t),HDo=r(ZLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Pme=n(ZLe,"CODE",{});var Hnt=s(Pme);UDo=r(Hnt,"model.train()"),Hnt.forEach(t),ZLe.forEach(t),JDo=i(sa),T(f5.$$.fragment,sa),sa.forEach(t),Qs.forEach(t),uBe=i(f),Hi=n(f,"H2",{class:!0});var bIe=s(Hi);m5=n(bIe,"A",{id:!0,class:!0,href:!0});var Unt=s(m5);Ime=n(Unt,"SPAN",{});var Jnt=s(Ime);T(O0.$$.fragment,Jnt),Jnt.forEach(t),Unt.forEach(t),YDo=i(bIe),qme=n(bIe,"SPAN",{});var Ynt=s(qme);KDo=r(Ynt,"AutoModelForImageClassification"),Ynt.forEach(t),bIe.forEach(t),_Be=i(f),No=n(f,"DIV",{class:!0});var Ws=s(No);T(V0.$$.fragment,Ws),ZDo=i(Ws),Ui=n(Ws,"P",{});var _Y=s(Ui);eGo=r(_Y,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),_O=n(_Y,"A",{href:!0});var Knt=s(_O);oGo=r(Knt,"from_pretrained()"),Knt.forEach(t),rGo=r(_Y," class method or the "),bO=n(_Y,"A",{href:!0});var Znt=s(bO);tGo=r(Znt,"from_config()"),Znt.forEach(t),aGo=r(_Y,` class
method.`),_Y.forEach(t),nGo=i(Ws),X0=n(Ws,"P",{});var vIe=s(X0);sGo=r(vIe,"This class cannot be instantiated directly using "),Nme=n(vIe,"CODE",{});var est=s(Nme);lGo=r(est,"__init__()"),est.forEach(t),iGo=r(vIe," (throws an error)."),vIe.forEach(t),dGo=i(Ws),ct=n(Ws,"DIV",{class:!0});var O3=s(ct);T(z0.$$.fragment,O3),cGo=i(O3),jme=n(O3,"P",{});var ost=s(jme);fGo=r(ost,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),ost.forEach(t),mGo=i(O3),Ji=n(O3,"P",{});var bY=s(Ji);gGo=r(bY,`Note:
Loading a model from its configuration file does `),Dme=n(bY,"STRONG",{});var rst=s(Dme);hGo=r(rst,"not"),rst.forEach(t),pGo=r(bY,` load the model weights. It only affects the
model\u2019s configuration. Use `),vO=n(bY,"A",{href:!0});var tst=s(vO);uGo=r(tst,"from_pretrained()"),tst.forEach(t),_Go=r(bY," to load the model weights."),bY.forEach(t),bGo=i(O3),T(g5.$$.fragment,O3),O3.forEach(t),vGo=i(Ws),ao=n(Ws,"DIV",{class:!0});var la=s(ao);T(Q0.$$.fragment,la),FGo=i(la),Gme=n(la,"P",{});var ast=s(Gme);TGo=r(ast,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),ast.forEach(t),MGo=i(la),Ba=n(la,"P",{});var V3=s(Ba);EGo=r(V3,"The model class to instantiate is selected based on the "),Ome=n(V3,"CODE",{});var nst=s(Ome);CGo=r(nst,"model_type"),nst.forEach(t),wGo=r(V3,` property of the config object (either
passed as an argument or loaded from `),Vme=n(V3,"CODE",{});var sst=s(Vme);AGo=r(sst,"pretrained_model_name_or_path"),sst.forEach(t),yGo=r(V3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xme=n(V3,"CODE",{});var lst=s(Xme);LGo=r(lst,"pretrained_model_name_or_path"),lst.forEach(t),xGo=r(V3,":"),V3.forEach(t),$Go=i(la),ve=n(la,"UL",{});var Ee=s(ve);h5=n(Ee,"LI",{});var e8e=s(h5);zme=n(e8e,"STRONG",{});var ist=s(zme);kGo=r(ist,"beit"),ist.forEach(t),SGo=r(e8e," \u2014 "),FO=n(e8e,"A",{href:!0});var dst=s(FO);RGo=r(dst,"BeitForImageClassification"),dst.forEach(t),BGo=r(e8e," (BEiT model)"),e8e.forEach(t),PGo=i(Ee),p5=n(Ee,"LI",{});var o8e=s(p5);Qme=n(o8e,"STRONG",{});var cst=s(Qme);IGo=r(cst,"convnext"),cst.forEach(t),qGo=r(o8e," \u2014 "),TO=n(o8e,"A",{href:!0});var fst=s(TO);NGo=r(fst,"ConvNextForImageClassification"),fst.forEach(t),jGo=r(o8e," (ConvNext model)"),o8e.forEach(t),DGo=i(Ee),u5=n(Ee,"LI",{});var r8e=s(u5);Wme=n(r8e,"STRONG",{});var mst=s(Wme);GGo=r(mst,"data2vec-vision"),mst.forEach(t),OGo=r(r8e," \u2014 "),MO=n(r8e,"A",{href:!0});var gst=s(MO);VGo=r(gst,"Data2VecVisionForImageClassification"),gst.forEach(t),XGo=r(r8e," (Data2VecVision model)"),r8e.forEach(t),zGo=i(Ee),xs=n(Ee,"LI",{});var Cx=s(xs);Hme=n(Cx,"STRONG",{});var hst=s(Hme);QGo=r(hst,"deit"),hst.forEach(t),WGo=r(Cx," \u2014 "),EO=n(Cx,"A",{href:!0});var pst=s(EO);HGo=r(pst,"DeiTForImageClassification"),pst.forEach(t),UGo=r(Cx," or "),CO=n(Cx,"A",{href:!0});var ust=s(CO);JGo=r(ust,"DeiTForImageClassificationWithTeacher"),ust.forEach(t),YGo=r(Cx," (DeiT model)"),Cx.forEach(t),KGo=i(Ee),_5=n(Ee,"LI",{});var t8e=s(_5);Ume=n(t8e,"STRONG",{});var _st=s(Ume);ZGo=r(_st,"imagegpt"),_st.forEach(t),eOo=r(t8e," \u2014 "),wO=n(t8e,"A",{href:!0});var bst=s(wO);oOo=r(bst,"ImageGPTForImageClassification"),bst.forEach(t),rOo=r(t8e," (ImageGPT model)"),t8e.forEach(t),tOo=i(Ee),ft=n(Ee,"LI",{});var ef=s(ft);Jme=n(ef,"STRONG",{});var vst=s(Jme);aOo=r(vst,"perceiver"),vst.forEach(t),nOo=r(ef," \u2014 "),AO=n(ef,"A",{href:!0});var Fst=s(AO);sOo=r(Fst,"PerceiverForImageClassificationLearned"),Fst.forEach(t),lOo=r(ef," or "),yO=n(ef,"A",{href:!0});var Tst=s(yO);iOo=r(Tst,"PerceiverForImageClassificationFourier"),Tst.forEach(t),dOo=r(ef," or "),LO=n(ef,"A",{href:!0});var Mst=s(LO);cOo=r(Mst,"PerceiverForImageClassificationConvProcessing"),Mst.forEach(t),fOo=r(ef," (Perceiver model)"),ef.forEach(t),mOo=i(Ee),b5=n(Ee,"LI",{});var a8e=s(b5);Yme=n(a8e,"STRONG",{});var Est=s(Yme);gOo=r(Est,"poolformer"),Est.forEach(t),hOo=r(a8e," \u2014 "),xO=n(a8e,"A",{href:!0});var Cst=s(xO);pOo=r(Cst,"PoolFormerForImageClassification"),Cst.forEach(t),uOo=r(a8e," (PoolFormer model)"),a8e.forEach(t),_Oo=i(Ee),v5=n(Ee,"LI",{});var n8e=s(v5);Kme=n(n8e,"STRONG",{});var wst=s(Kme);bOo=r(wst,"regnet"),wst.forEach(t),vOo=r(n8e," \u2014 "),$O=n(n8e,"A",{href:!0});var Ast=s($O);FOo=r(Ast,"RegNetForImageClassification"),Ast.forEach(t),TOo=r(n8e," (RegNet model)"),n8e.forEach(t),MOo=i(Ee),F5=n(Ee,"LI",{});var s8e=s(F5);Zme=n(s8e,"STRONG",{});var yst=s(Zme);EOo=r(yst,"resnet"),yst.forEach(t),COo=r(s8e," \u2014 "),kO=n(s8e,"A",{href:!0});var Lst=s(kO);wOo=r(Lst,"ResNetForImageClassification"),Lst.forEach(t),AOo=r(s8e," (ResNet model)"),s8e.forEach(t),yOo=i(Ee),T5=n(Ee,"LI",{});var l8e=s(T5);ege=n(l8e,"STRONG",{});var xst=s(ege);LOo=r(xst,"segformer"),xst.forEach(t),xOo=r(l8e," \u2014 "),SO=n(l8e,"A",{href:!0});var $st=s(SO);$Oo=r($st,"SegformerForImageClassification"),$st.forEach(t),kOo=r(l8e," (SegFormer model)"),l8e.forEach(t),SOo=i(Ee),M5=n(Ee,"LI",{});var i8e=s(M5);oge=n(i8e,"STRONG",{});var kst=s(oge);ROo=r(kst,"swin"),kst.forEach(t),BOo=r(i8e," \u2014 "),RO=n(i8e,"A",{href:!0});var Sst=s(RO);POo=r(Sst,"SwinForImageClassification"),Sst.forEach(t),IOo=r(i8e," (Swin model)"),i8e.forEach(t),qOo=i(Ee),E5=n(Ee,"LI",{});var d8e=s(E5);rge=n(d8e,"STRONG",{});var Rst=s(rge);NOo=r(Rst,"van"),Rst.forEach(t),jOo=r(d8e," \u2014 "),BO=n(d8e,"A",{href:!0});var Bst=s(BO);DOo=r(Bst,"VanForImageClassification"),Bst.forEach(t),GOo=r(d8e," (VAN model)"),d8e.forEach(t),OOo=i(Ee),C5=n(Ee,"LI",{});var c8e=s(C5);tge=n(c8e,"STRONG",{});var Pst=s(tge);VOo=r(Pst,"vit"),Pst.forEach(t),XOo=r(c8e," \u2014 "),PO=n(c8e,"A",{href:!0});var Ist=s(PO);zOo=r(Ist,"ViTForImageClassification"),Ist.forEach(t),QOo=r(c8e," (ViT model)"),c8e.forEach(t),Ee.forEach(t),WOo=i(la),w5=n(la,"P",{});var f8e=s(w5);HOo=r(f8e,"The model is set in evaluation mode by default using "),age=n(f8e,"CODE",{});var qst=s(age);UOo=r(qst,"model.eval()"),qst.forEach(t),JOo=r(f8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),nge=n(f8e,"CODE",{});var Nst=s(nge);YOo=r(Nst,"model.train()"),Nst.forEach(t),f8e.forEach(t),KOo=i(la),T(A5.$$.fragment,la),la.forEach(t),Ws.forEach(t),bBe=i(f),Yi=n(f,"H2",{class:!0});var FIe=s(Yi);y5=n(FIe,"A",{id:!0,class:!0,href:!0});var jst=s(y5);sge=n(jst,"SPAN",{});var Dst=s(sge);T(W0.$$.fragment,Dst),Dst.forEach(t),jst.forEach(t),ZOo=i(FIe),lge=n(FIe,"SPAN",{});var Gst=s(lge);eVo=r(Gst,"AutoModelForVision2Seq"),Gst.forEach(t),FIe.forEach(t),vBe=i(f),jo=n(f,"DIV",{class:!0});var Hs=s(jo);T(H0.$$.fragment,Hs),oVo=i(Hs),Ki=n(Hs,"P",{});var vY=s(Ki);rVo=r(vY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),IO=n(vY,"A",{href:!0});var Ost=s(IO);tVo=r(Ost,"from_pretrained()"),Ost.forEach(t),aVo=r(vY," class method or the "),qO=n(vY,"A",{href:!0});var Vst=s(qO);nVo=r(Vst,"from_config()"),Vst.forEach(t),sVo=r(vY,` class
method.`),vY.forEach(t),lVo=i(Hs),U0=n(Hs,"P",{});var TIe=s(U0);iVo=r(TIe,"This class cannot be instantiated directly using "),ige=n(TIe,"CODE",{});var Xst=s(ige);dVo=r(Xst,"__init__()"),Xst.forEach(t),cVo=r(TIe," (throws an error)."),TIe.forEach(t),fVo=i(Hs),mt=n(Hs,"DIV",{class:!0});var X3=s(mt);T(J0.$$.fragment,X3),mVo=i(X3),dge=n(X3,"P",{});var zst=s(dge);gVo=r(zst,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),zst.forEach(t),hVo=i(X3),Zi=n(X3,"P",{});var FY=s(Zi);pVo=r(FY,`Note:
Loading a model from its configuration file does `),cge=n(FY,"STRONG",{});var Qst=s(cge);uVo=r(Qst,"not"),Qst.forEach(t),_Vo=r(FY,` load the model weights. It only affects the
model\u2019s configuration. Use `),NO=n(FY,"A",{href:!0});var Wst=s(NO);bVo=r(Wst,"from_pretrained()"),Wst.forEach(t),vVo=r(FY," to load the model weights."),FY.forEach(t),FVo=i(X3),T(L5.$$.fragment,X3),X3.forEach(t),TVo=i(Hs),no=n(Hs,"DIV",{class:!0});var ia=s(no);T(Y0.$$.fragment,ia),MVo=i(ia),fge=n(ia,"P",{});var Hst=s(fge);EVo=r(Hst,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Hst.forEach(t),CVo=i(ia),Pa=n(ia,"P",{});var z3=s(Pa);wVo=r(z3,"The model class to instantiate is selected based on the "),mge=n(z3,"CODE",{});var Ust=s(mge);AVo=r(Ust,"model_type"),Ust.forEach(t),yVo=r(z3,` property of the config object (either
passed as an argument or loaded from `),gge=n(z3,"CODE",{});var Jst=s(gge);LVo=r(Jst,"pretrained_model_name_or_path"),Jst.forEach(t),xVo=r(z3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hge=n(z3,"CODE",{});var Yst=s(hge);$Vo=r(Yst,"pretrained_model_name_or_path"),Yst.forEach(t),kVo=r(z3,":"),z3.forEach(t),SVo=i(ia),pge=n(ia,"UL",{});var Kst=s(pge);x5=n(Kst,"LI",{});var m8e=s(x5);uge=n(m8e,"STRONG",{});var Zst=s(uge);RVo=r(Zst,"vision-encoder-decoder"),Zst.forEach(t),BVo=r(m8e," \u2014 "),jO=n(m8e,"A",{href:!0});var elt=s(jO);PVo=r(elt,"VisionEncoderDecoderModel"),elt.forEach(t),IVo=r(m8e," (Vision Encoder decoder model)"),m8e.forEach(t),Kst.forEach(t),qVo=i(ia),$5=n(ia,"P",{});var g8e=s($5);NVo=r(g8e,"The model is set in evaluation mode by default using "),_ge=n(g8e,"CODE",{});var olt=s(_ge);jVo=r(olt,"model.eval()"),olt.forEach(t),DVo=r(g8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),bge=n(g8e,"CODE",{});var rlt=s(bge);GVo=r(rlt,"model.train()"),rlt.forEach(t),g8e.forEach(t),OVo=i(ia),T(k5.$$.fragment,ia),ia.forEach(t),Hs.forEach(t),FBe=i(f),ed=n(f,"H2",{class:!0});var MIe=s(ed);S5=n(MIe,"A",{id:!0,class:!0,href:!0});var tlt=s(S5);vge=n(tlt,"SPAN",{});var alt=s(vge);T(K0.$$.fragment,alt),alt.forEach(t),tlt.forEach(t),VVo=i(MIe),Fge=n(MIe,"SPAN",{});var nlt=s(Fge);XVo=r(nlt,"AutoModelForAudioClassification"),nlt.forEach(t),MIe.forEach(t),TBe=i(f),Do=n(f,"DIV",{class:!0});var Us=s(Do);T(Z0.$$.fragment,Us),zVo=i(Us),od=n(Us,"P",{});var TY=s(od);QVo=r(TY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),DO=n(TY,"A",{href:!0});var slt=s(DO);WVo=r(slt,"from_pretrained()"),slt.forEach(t),HVo=r(TY," class method or the "),GO=n(TY,"A",{href:!0});var llt=s(GO);UVo=r(llt,"from_config()"),llt.forEach(t),JVo=r(TY,` class
method.`),TY.forEach(t),YVo=i(Us),ey=n(Us,"P",{});var EIe=s(ey);KVo=r(EIe,"This class cannot be instantiated directly using "),Tge=n(EIe,"CODE",{});var ilt=s(Tge);ZVo=r(ilt,"__init__()"),ilt.forEach(t),eXo=r(EIe," (throws an error)."),EIe.forEach(t),oXo=i(Us),gt=n(Us,"DIV",{class:!0});var Q3=s(gt);T(oy.$$.fragment,Q3),rXo=i(Q3),Mge=n(Q3,"P",{});var dlt=s(Mge);tXo=r(dlt,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),dlt.forEach(t),aXo=i(Q3),rd=n(Q3,"P",{});var MY=s(rd);nXo=r(MY,`Note:
Loading a model from its configuration file does `),Ege=n(MY,"STRONG",{});var clt=s(Ege);sXo=r(clt,"not"),clt.forEach(t),lXo=r(MY,` load the model weights. It only affects the
model\u2019s configuration. Use `),OO=n(MY,"A",{href:!0});var flt=s(OO);iXo=r(flt,"from_pretrained()"),flt.forEach(t),dXo=r(MY," to load the model weights."),MY.forEach(t),cXo=i(Q3),T(R5.$$.fragment,Q3),Q3.forEach(t),fXo=i(Us),so=n(Us,"DIV",{class:!0});var da=s(so);T(ry.$$.fragment,da),mXo=i(da),Cge=n(da,"P",{});var mlt=s(Cge);gXo=r(mlt,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),mlt.forEach(t),hXo=i(da),Ia=n(da,"P",{});var W3=s(Ia);pXo=r(W3,"The model class to instantiate is selected based on the "),wge=n(W3,"CODE",{});var glt=s(wge);uXo=r(glt,"model_type"),glt.forEach(t),_Xo=r(W3,` property of the config object (either
passed as an argument or loaded from `),Age=n(W3,"CODE",{});var hlt=s(Age);bXo=r(hlt,"pretrained_model_name_or_path"),hlt.forEach(t),vXo=r(W3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yge=n(W3,"CODE",{});var plt=s(yge);FXo=r(plt,"pretrained_model_name_or_path"),plt.forEach(t),TXo=r(W3,":"),W3.forEach(t),MXo=i(da),qe=n(da,"UL",{});var _o=s(qe);B5=n(_o,"LI",{});var h8e=s(B5);Lge=n(h8e,"STRONG",{});var ult=s(Lge);EXo=r(ult,"data2vec-audio"),ult.forEach(t),CXo=r(h8e," \u2014 "),VO=n(h8e,"A",{href:!0});var _lt=s(VO);wXo=r(_lt,"Data2VecAudioForSequenceClassification"),_lt.forEach(t),AXo=r(h8e," (Data2VecAudio model)"),h8e.forEach(t),yXo=i(_o),P5=n(_o,"LI",{});var p8e=s(P5);xge=n(p8e,"STRONG",{});var blt=s(xge);LXo=r(blt,"hubert"),blt.forEach(t),xXo=r(p8e," \u2014 "),XO=n(p8e,"A",{href:!0});var vlt=s(XO);$Xo=r(vlt,"HubertForSequenceClassification"),vlt.forEach(t),kXo=r(p8e," (Hubert model)"),p8e.forEach(t),SXo=i(_o),I5=n(_o,"LI",{});var u8e=s(I5);$ge=n(u8e,"STRONG",{});var Flt=s($ge);RXo=r(Flt,"sew"),Flt.forEach(t),BXo=r(u8e," \u2014 "),zO=n(u8e,"A",{href:!0});var Tlt=s(zO);PXo=r(Tlt,"SEWForSequenceClassification"),Tlt.forEach(t),IXo=r(u8e," (SEW model)"),u8e.forEach(t),qXo=i(_o),q5=n(_o,"LI",{});var _8e=s(q5);kge=n(_8e,"STRONG",{});var Mlt=s(kge);NXo=r(Mlt,"sew-d"),Mlt.forEach(t),jXo=r(_8e," \u2014 "),QO=n(_8e,"A",{href:!0});var Elt=s(QO);DXo=r(Elt,"SEWDForSequenceClassification"),Elt.forEach(t),GXo=r(_8e," (SEW-D model)"),_8e.forEach(t),OXo=i(_o),N5=n(_o,"LI",{});var b8e=s(N5);Sge=n(b8e,"STRONG",{});var Clt=s(Sge);VXo=r(Clt,"unispeech"),Clt.forEach(t),XXo=r(b8e," \u2014 "),WO=n(b8e,"A",{href:!0});var wlt=s(WO);zXo=r(wlt,"UniSpeechForSequenceClassification"),wlt.forEach(t),QXo=r(b8e," (UniSpeech model)"),b8e.forEach(t),WXo=i(_o),j5=n(_o,"LI",{});var v8e=s(j5);Rge=n(v8e,"STRONG",{});var Alt=s(Rge);HXo=r(Alt,"unispeech-sat"),Alt.forEach(t),UXo=r(v8e," \u2014 "),HO=n(v8e,"A",{href:!0});var ylt=s(HO);JXo=r(ylt,"UniSpeechSatForSequenceClassification"),ylt.forEach(t),YXo=r(v8e," (UniSpeechSat model)"),v8e.forEach(t),KXo=i(_o),D5=n(_o,"LI",{});var F8e=s(D5);Bge=n(F8e,"STRONG",{});var Llt=s(Bge);ZXo=r(Llt,"wav2vec2"),Llt.forEach(t),ezo=r(F8e," \u2014 "),UO=n(F8e,"A",{href:!0});var xlt=s(UO);ozo=r(xlt,"Wav2Vec2ForSequenceClassification"),xlt.forEach(t),rzo=r(F8e," (Wav2Vec2 model)"),F8e.forEach(t),tzo=i(_o),G5=n(_o,"LI",{});var T8e=s(G5);Pge=n(T8e,"STRONG",{});var $lt=s(Pge);azo=r($lt,"wavlm"),$lt.forEach(t),nzo=r(T8e," \u2014 "),JO=n(T8e,"A",{href:!0});var klt=s(JO);szo=r(klt,"WavLMForSequenceClassification"),klt.forEach(t),lzo=r(T8e," (WavLM model)"),T8e.forEach(t),_o.forEach(t),izo=i(da),O5=n(da,"P",{});var M8e=s(O5);dzo=r(M8e,"The model is set in evaluation mode by default using "),Ige=n(M8e,"CODE",{});var Slt=s(Ige);czo=r(Slt,"model.eval()"),Slt.forEach(t),fzo=r(M8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),qge=n(M8e,"CODE",{});var Rlt=s(qge);mzo=r(Rlt,"model.train()"),Rlt.forEach(t),M8e.forEach(t),gzo=i(da),T(V5.$$.fragment,da),da.forEach(t),Us.forEach(t),MBe=i(f),td=n(f,"H2",{class:!0});var CIe=s(td);X5=n(CIe,"A",{id:!0,class:!0,href:!0});var Blt=s(X5);Nge=n(Blt,"SPAN",{});var Plt=s(Nge);T(ty.$$.fragment,Plt),Plt.forEach(t),Blt.forEach(t),hzo=i(CIe),jge=n(CIe,"SPAN",{});var Ilt=s(jge);pzo=r(Ilt,"AutoModelForAudioFrameClassification"),Ilt.forEach(t),CIe.forEach(t),EBe=i(f),Go=n(f,"DIV",{class:!0});var Js=s(Go);T(ay.$$.fragment,Js),uzo=i(Js),ad=n(Js,"P",{});var EY=s(ad);_zo=r(EY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),YO=n(EY,"A",{href:!0});var qlt=s(YO);bzo=r(qlt,"from_pretrained()"),qlt.forEach(t),vzo=r(EY," class method or the "),KO=n(EY,"A",{href:!0});var Nlt=s(KO);Fzo=r(Nlt,"from_config()"),Nlt.forEach(t),Tzo=r(EY,` class
method.`),EY.forEach(t),Mzo=i(Js),ny=n(Js,"P",{});var wIe=s(ny);Ezo=r(wIe,"This class cannot be instantiated directly using "),Dge=n(wIe,"CODE",{});var jlt=s(Dge);Czo=r(jlt,"__init__()"),jlt.forEach(t),wzo=r(wIe," (throws an error)."),wIe.forEach(t),Azo=i(Js),ht=n(Js,"DIV",{class:!0});var H3=s(ht);T(sy.$$.fragment,H3),yzo=i(H3),Gge=n(H3,"P",{});var Dlt=s(Gge);Lzo=r(Dlt,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),Dlt.forEach(t),xzo=i(H3),nd=n(H3,"P",{});var CY=s(nd);$zo=r(CY,`Note:
Loading a model from its configuration file does `),Oge=n(CY,"STRONG",{});var Glt=s(Oge);kzo=r(Glt,"not"),Glt.forEach(t),Szo=r(CY,` load the model weights. It only affects the
model\u2019s configuration. Use `),ZO=n(CY,"A",{href:!0});var Olt=s(ZO);Rzo=r(Olt,"from_pretrained()"),Olt.forEach(t),Bzo=r(CY," to load the model weights."),CY.forEach(t),Pzo=i(H3),T(z5.$$.fragment,H3),H3.forEach(t),Izo=i(Js),lo=n(Js,"DIV",{class:!0});var ca=s(lo);T(ly.$$.fragment,ca),qzo=i(ca),Vge=n(ca,"P",{});var Vlt=s(Vge);Nzo=r(Vlt,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),Vlt.forEach(t),jzo=i(ca),qa=n(ca,"P",{});var U3=s(qa);Dzo=r(U3,"The model class to instantiate is selected based on the "),Xge=n(U3,"CODE",{});var Xlt=s(Xge);Gzo=r(Xlt,"model_type"),Xlt.forEach(t),Ozo=r(U3,` property of the config object (either
passed as an argument or loaded from `),zge=n(U3,"CODE",{});var zlt=s(zge);Vzo=r(zlt,"pretrained_model_name_or_path"),zlt.forEach(t),Xzo=r(U3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qge=n(U3,"CODE",{});var Qlt=s(Qge);zzo=r(Qlt,"pretrained_model_name_or_path"),Qlt.forEach(t),Qzo=r(U3,":"),U3.forEach(t),Wzo=i(ca),Na=n(ca,"UL",{});var J3=s(Na);Q5=n(J3,"LI",{});var E8e=s(Q5);Wge=n(E8e,"STRONG",{});var Wlt=s(Wge);Hzo=r(Wlt,"data2vec-audio"),Wlt.forEach(t),Uzo=r(E8e," \u2014 "),eV=n(E8e,"A",{href:!0});var Hlt=s(eV);Jzo=r(Hlt,"Data2VecAudioForAudioFrameClassification"),Hlt.forEach(t),Yzo=r(E8e," (Data2VecAudio model)"),E8e.forEach(t),Kzo=i(J3),W5=n(J3,"LI",{});var C8e=s(W5);Hge=n(C8e,"STRONG",{});var Ult=s(Hge);Zzo=r(Ult,"unispeech-sat"),Ult.forEach(t),eQo=r(C8e," \u2014 "),oV=n(C8e,"A",{href:!0});var Jlt=s(oV);oQo=r(Jlt,"UniSpeechSatForAudioFrameClassification"),Jlt.forEach(t),rQo=r(C8e," (UniSpeechSat model)"),C8e.forEach(t),tQo=i(J3),H5=n(J3,"LI",{});var w8e=s(H5);Uge=n(w8e,"STRONG",{});var Ylt=s(Uge);aQo=r(Ylt,"wav2vec2"),Ylt.forEach(t),nQo=r(w8e," \u2014 "),rV=n(w8e,"A",{href:!0});var Klt=s(rV);sQo=r(Klt,"Wav2Vec2ForAudioFrameClassification"),Klt.forEach(t),lQo=r(w8e," (Wav2Vec2 model)"),w8e.forEach(t),iQo=i(J3),U5=n(J3,"LI",{});var A8e=s(U5);Jge=n(A8e,"STRONG",{});var Zlt=s(Jge);dQo=r(Zlt,"wavlm"),Zlt.forEach(t),cQo=r(A8e," \u2014 "),tV=n(A8e,"A",{href:!0});var eit=s(tV);fQo=r(eit,"WavLMForAudioFrameClassification"),eit.forEach(t),mQo=r(A8e," (WavLM model)"),A8e.forEach(t),J3.forEach(t),gQo=i(ca),J5=n(ca,"P",{});var y8e=s(J5);hQo=r(y8e,"The model is set in evaluation mode by default using "),Yge=n(y8e,"CODE",{});var oit=s(Yge);pQo=r(oit,"model.eval()"),oit.forEach(t),uQo=r(y8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Kge=n(y8e,"CODE",{});var rit=s(Kge);_Qo=r(rit,"model.train()"),rit.forEach(t),y8e.forEach(t),bQo=i(ca),T(Y5.$$.fragment,ca),ca.forEach(t),Js.forEach(t),CBe=i(f),sd=n(f,"H2",{class:!0});var AIe=s(sd);K5=n(AIe,"A",{id:!0,class:!0,href:!0});var tit=s(K5);Zge=n(tit,"SPAN",{});var ait=s(Zge);T(iy.$$.fragment,ait),ait.forEach(t),tit.forEach(t),vQo=i(AIe),ehe=n(AIe,"SPAN",{});var nit=s(ehe);FQo=r(nit,"AutoModelForCTC"),nit.forEach(t),AIe.forEach(t),wBe=i(f),Oo=n(f,"DIV",{class:!0});var Ys=s(Oo);T(dy.$$.fragment,Ys),TQo=i(Ys),ld=n(Ys,"P",{});var wY=s(ld);MQo=r(wY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),aV=n(wY,"A",{href:!0});var sit=s(aV);EQo=r(sit,"from_pretrained()"),sit.forEach(t),CQo=r(wY," class method or the "),nV=n(wY,"A",{href:!0});var lit=s(nV);wQo=r(lit,"from_config()"),lit.forEach(t),AQo=r(wY,` class
method.`),wY.forEach(t),yQo=i(Ys),cy=n(Ys,"P",{});var yIe=s(cy);LQo=r(yIe,"This class cannot be instantiated directly using "),ohe=n(yIe,"CODE",{});var iit=s(ohe);xQo=r(iit,"__init__()"),iit.forEach(t),$Qo=r(yIe," (throws an error)."),yIe.forEach(t),kQo=i(Ys),pt=n(Ys,"DIV",{class:!0});var Y3=s(pt);T(fy.$$.fragment,Y3),SQo=i(Y3),rhe=n(Y3,"P",{});var dit=s(rhe);RQo=r(dit,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),dit.forEach(t),BQo=i(Y3),id=n(Y3,"P",{});var AY=s(id);PQo=r(AY,`Note:
Loading a model from its configuration file does `),the=n(AY,"STRONG",{});var cit=s(the);IQo=r(cit,"not"),cit.forEach(t),qQo=r(AY,` load the model weights. It only affects the
model\u2019s configuration. Use `),sV=n(AY,"A",{href:!0});var fit=s(sV);NQo=r(fit,"from_pretrained()"),fit.forEach(t),jQo=r(AY," to load the model weights."),AY.forEach(t),DQo=i(Y3),T(Z5.$$.fragment,Y3),Y3.forEach(t),GQo=i(Ys),io=n(Ys,"DIV",{class:!0});var fa=s(io);T(my.$$.fragment,fa),OQo=i(fa),ahe=n(fa,"P",{});var mit=s(ahe);VQo=r(mit,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),mit.forEach(t),XQo=i(fa),ja=n(fa,"P",{});var K3=s(ja);zQo=r(K3,"The model class to instantiate is selected based on the "),nhe=n(K3,"CODE",{});var git=s(nhe);QQo=r(git,"model_type"),git.forEach(t),WQo=r(K3,` property of the config object (either
passed as an argument or loaded from `),she=n(K3,"CODE",{});var hit=s(she);HQo=r(hit,"pretrained_model_name_or_path"),hit.forEach(t),UQo=r(K3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lhe=n(K3,"CODE",{});var pit=s(lhe);JQo=r(pit,"pretrained_model_name_or_path"),pit.forEach(t),YQo=r(K3,":"),K3.forEach(t),KQo=i(fa),Ne=n(fa,"UL",{});var bo=s(Ne);ev=n(bo,"LI",{});var L8e=s(ev);ihe=n(L8e,"STRONG",{});var uit=s(ihe);ZQo=r(uit,"data2vec-audio"),uit.forEach(t),eWo=r(L8e," \u2014 "),lV=n(L8e,"A",{href:!0});var _it=s(lV);oWo=r(_it,"Data2VecAudioForCTC"),_it.forEach(t),rWo=r(L8e," (Data2VecAudio model)"),L8e.forEach(t),tWo=i(bo),ov=n(bo,"LI",{});var x8e=s(ov);dhe=n(x8e,"STRONG",{});var bit=s(dhe);aWo=r(bit,"hubert"),bit.forEach(t),nWo=r(x8e," \u2014 "),iV=n(x8e,"A",{href:!0});var vit=s(iV);sWo=r(vit,"HubertForCTC"),vit.forEach(t),lWo=r(x8e," (Hubert model)"),x8e.forEach(t),iWo=i(bo),rv=n(bo,"LI",{});var $8e=s(rv);che=n($8e,"STRONG",{});var Fit=s(che);dWo=r(Fit,"sew"),Fit.forEach(t),cWo=r($8e," \u2014 "),dV=n($8e,"A",{href:!0});var Tit=s(dV);fWo=r(Tit,"SEWForCTC"),Tit.forEach(t),mWo=r($8e," (SEW model)"),$8e.forEach(t),gWo=i(bo),tv=n(bo,"LI",{});var k8e=s(tv);fhe=n(k8e,"STRONG",{});var Mit=s(fhe);hWo=r(Mit,"sew-d"),Mit.forEach(t),pWo=r(k8e," \u2014 "),cV=n(k8e,"A",{href:!0});var Eit=s(cV);uWo=r(Eit,"SEWDForCTC"),Eit.forEach(t),_Wo=r(k8e," (SEW-D model)"),k8e.forEach(t),bWo=i(bo),av=n(bo,"LI",{});var S8e=s(av);mhe=n(S8e,"STRONG",{});var Cit=s(mhe);vWo=r(Cit,"unispeech"),Cit.forEach(t),FWo=r(S8e," \u2014 "),fV=n(S8e,"A",{href:!0});var wit=s(fV);TWo=r(wit,"UniSpeechForCTC"),wit.forEach(t),MWo=r(S8e," (UniSpeech model)"),S8e.forEach(t),EWo=i(bo),nv=n(bo,"LI",{});var R8e=s(nv);ghe=n(R8e,"STRONG",{});var Ait=s(ghe);CWo=r(Ait,"unispeech-sat"),Ait.forEach(t),wWo=r(R8e," \u2014 "),mV=n(R8e,"A",{href:!0});var yit=s(mV);AWo=r(yit,"UniSpeechSatForCTC"),yit.forEach(t),yWo=r(R8e," (UniSpeechSat model)"),R8e.forEach(t),LWo=i(bo),sv=n(bo,"LI",{});var B8e=s(sv);hhe=n(B8e,"STRONG",{});var Lit=s(hhe);xWo=r(Lit,"wav2vec2"),Lit.forEach(t),$Wo=r(B8e," \u2014 "),gV=n(B8e,"A",{href:!0});var xit=s(gV);kWo=r(xit,"Wav2Vec2ForCTC"),xit.forEach(t),SWo=r(B8e," (Wav2Vec2 model)"),B8e.forEach(t),RWo=i(bo),lv=n(bo,"LI",{});var P8e=s(lv);phe=n(P8e,"STRONG",{});var $it=s(phe);BWo=r($it,"wavlm"),$it.forEach(t),PWo=r(P8e," \u2014 "),hV=n(P8e,"A",{href:!0});var kit=s(hV);IWo=r(kit,"WavLMForCTC"),kit.forEach(t),qWo=r(P8e," (WavLM model)"),P8e.forEach(t),bo.forEach(t),NWo=i(fa),iv=n(fa,"P",{});var I8e=s(iv);jWo=r(I8e,"The model is set in evaluation mode by default using "),uhe=n(I8e,"CODE",{});var Sit=s(uhe);DWo=r(Sit,"model.eval()"),Sit.forEach(t),GWo=r(I8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_he=n(I8e,"CODE",{});var Rit=s(_he);OWo=r(Rit,"model.train()"),Rit.forEach(t),I8e.forEach(t),VWo=i(fa),T(dv.$$.fragment,fa),fa.forEach(t),Ys.forEach(t),ABe=i(f),dd=n(f,"H2",{class:!0});var LIe=s(dd);cv=n(LIe,"A",{id:!0,class:!0,href:!0});var Bit=s(cv);bhe=n(Bit,"SPAN",{});var Pit=s(bhe);T(gy.$$.fragment,Pit),Pit.forEach(t),Bit.forEach(t),XWo=i(LIe),vhe=n(LIe,"SPAN",{});var Iit=s(vhe);zWo=r(Iit,"AutoModelForSpeechSeq2Seq"),Iit.forEach(t),LIe.forEach(t),yBe=i(f),Vo=n(f,"DIV",{class:!0});var Ks=s(Vo);T(hy.$$.fragment,Ks),QWo=i(Ks),cd=n(Ks,"P",{});var yY=s(cd);WWo=r(yY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),pV=n(yY,"A",{href:!0});var qit=s(pV);HWo=r(qit,"from_pretrained()"),qit.forEach(t),UWo=r(yY," class method or the "),uV=n(yY,"A",{href:!0});var Nit=s(uV);JWo=r(Nit,"from_config()"),Nit.forEach(t),YWo=r(yY,` class
method.`),yY.forEach(t),KWo=i(Ks),py=n(Ks,"P",{});var xIe=s(py);ZWo=r(xIe,"This class cannot be instantiated directly using "),Fhe=n(xIe,"CODE",{});var jit=s(Fhe);eHo=r(jit,"__init__()"),jit.forEach(t),oHo=r(xIe," (throws an error)."),xIe.forEach(t),rHo=i(Ks),ut=n(Ks,"DIV",{class:!0});var Z3=s(ut);T(uy.$$.fragment,Z3),tHo=i(Z3),The=n(Z3,"P",{});var Dit=s(The);aHo=r(Dit,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Dit.forEach(t),nHo=i(Z3),fd=n(Z3,"P",{});var LY=s(fd);sHo=r(LY,`Note:
Loading a model from its configuration file does `),Mhe=n(LY,"STRONG",{});var Git=s(Mhe);lHo=r(Git,"not"),Git.forEach(t),iHo=r(LY,` load the model weights. It only affects the
model\u2019s configuration. Use `),_V=n(LY,"A",{href:!0});var Oit=s(_V);dHo=r(Oit,"from_pretrained()"),Oit.forEach(t),cHo=r(LY," to load the model weights."),LY.forEach(t),fHo=i(Z3),T(fv.$$.fragment,Z3),Z3.forEach(t),mHo=i(Ks),co=n(Ks,"DIV",{class:!0});var ma=s(co);T(_y.$$.fragment,ma),gHo=i(ma),Ehe=n(ma,"P",{});var Vit=s(Ehe);hHo=r(Vit,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Vit.forEach(t),pHo=i(ma),Da=n(ma,"P",{});var ew=s(Da);uHo=r(ew,"The model class to instantiate is selected based on the "),Che=n(ew,"CODE",{});var Xit=s(Che);_Ho=r(Xit,"model_type"),Xit.forEach(t),bHo=r(ew,` property of the config object (either
passed as an argument or loaded from `),whe=n(ew,"CODE",{});var zit=s(whe);vHo=r(zit,"pretrained_model_name_or_path"),zit.forEach(t),FHo=r(ew,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ahe=n(ew,"CODE",{});var Qit=s(Ahe);THo=r(Qit,"pretrained_model_name_or_path"),Qit.forEach(t),MHo=r(ew,":"),ew.forEach(t),EHo=i(ma),by=n(ma,"UL",{});var $Ie=s(by);mv=n($Ie,"LI",{});var q8e=s(mv);yhe=n(q8e,"STRONG",{});var Wit=s(yhe);CHo=r(Wit,"speech-encoder-decoder"),Wit.forEach(t),wHo=r(q8e," \u2014 "),bV=n(q8e,"A",{href:!0});var Hit=s(bV);AHo=r(Hit,"SpeechEncoderDecoderModel"),Hit.forEach(t),yHo=r(q8e," (Speech Encoder decoder model)"),q8e.forEach(t),LHo=i($Ie),gv=n($Ie,"LI",{});var N8e=s(gv);Lhe=n(N8e,"STRONG",{});var Uit=s(Lhe);xHo=r(Uit,"speech_to_text"),Uit.forEach(t),$Ho=r(N8e," \u2014 "),vV=n(N8e,"A",{href:!0});var Jit=s(vV);kHo=r(Jit,"Speech2TextForConditionalGeneration"),Jit.forEach(t),SHo=r(N8e," (Speech2Text model)"),N8e.forEach(t),$Ie.forEach(t),RHo=i(ma),hv=n(ma,"P",{});var j8e=s(hv);BHo=r(j8e,"The model is set in evaluation mode by default using "),xhe=n(j8e,"CODE",{});var Yit=s(xhe);PHo=r(Yit,"model.eval()"),Yit.forEach(t),IHo=r(j8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$he=n(j8e,"CODE",{});var Kit=s($he);qHo=r(Kit,"model.train()"),Kit.forEach(t),j8e.forEach(t),NHo=i(ma),T(pv.$$.fragment,ma),ma.forEach(t),Ks.forEach(t),LBe=i(f),md=n(f,"H2",{class:!0});var kIe=s(md);uv=n(kIe,"A",{id:!0,class:!0,href:!0});var Zit=s(uv);khe=n(Zit,"SPAN",{});var edt=s(khe);T(vy.$$.fragment,edt),edt.forEach(t),Zit.forEach(t),jHo=i(kIe),She=n(kIe,"SPAN",{});var odt=s(She);DHo=r(odt,"AutoModelForAudioXVector"),odt.forEach(t),kIe.forEach(t),xBe=i(f),Xo=n(f,"DIV",{class:!0});var Zs=s(Xo);T(Fy.$$.fragment,Zs),GHo=i(Zs),gd=n(Zs,"P",{});var xY=s(gd);OHo=r(xY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),FV=n(xY,"A",{href:!0});var rdt=s(FV);VHo=r(rdt,"from_pretrained()"),rdt.forEach(t),XHo=r(xY," class method or the "),TV=n(xY,"A",{href:!0});var tdt=s(TV);zHo=r(tdt,"from_config()"),tdt.forEach(t),QHo=r(xY,` class
method.`),xY.forEach(t),WHo=i(Zs),Ty=n(Zs,"P",{});var SIe=s(Ty);HHo=r(SIe,"This class cannot be instantiated directly using "),Rhe=n(SIe,"CODE",{});var adt=s(Rhe);UHo=r(adt,"__init__()"),adt.forEach(t),JHo=r(SIe," (throws an error)."),SIe.forEach(t),YHo=i(Zs),_t=n(Zs,"DIV",{class:!0});var ow=s(_t);T(My.$$.fragment,ow),KHo=i(ow),Bhe=n(ow,"P",{});var ndt=s(Bhe);ZHo=r(ndt,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),ndt.forEach(t),eUo=i(ow),hd=n(ow,"P",{});var $Y=s(hd);oUo=r($Y,`Note:
Loading a model from its configuration file does `),Phe=n($Y,"STRONG",{});var sdt=s(Phe);rUo=r(sdt,"not"),sdt.forEach(t),tUo=r($Y,` load the model weights. It only affects the
model\u2019s configuration. Use `),MV=n($Y,"A",{href:!0});var ldt=s(MV);aUo=r(ldt,"from_pretrained()"),ldt.forEach(t),nUo=r($Y," to load the model weights."),$Y.forEach(t),sUo=i(ow),T(_v.$$.fragment,ow),ow.forEach(t),lUo=i(Zs),fo=n(Zs,"DIV",{class:!0});var ga=s(fo);T(Ey.$$.fragment,ga),iUo=i(ga),Ihe=n(ga,"P",{});var idt=s(Ihe);dUo=r(idt,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),idt.forEach(t),cUo=i(ga),Ga=n(ga,"P",{});var rw=s(Ga);fUo=r(rw,"The model class to instantiate is selected based on the "),qhe=n(rw,"CODE",{});var ddt=s(qhe);mUo=r(ddt,"model_type"),ddt.forEach(t),gUo=r(rw,` property of the config object (either
passed as an argument or loaded from `),Nhe=n(rw,"CODE",{});var cdt=s(Nhe);hUo=r(cdt,"pretrained_model_name_or_path"),cdt.forEach(t),pUo=r(rw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jhe=n(rw,"CODE",{});var fdt=s(jhe);uUo=r(fdt,"pretrained_model_name_or_path"),fdt.forEach(t),_Uo=r(rw,":"),rw.forEach(t),bUo=i(ga),Oa=n(ga,"UL",{});var tw=s(Oa);bv=n(tw,"LI",{});var D8e=s(bv);Dhe=n(D8e,"STRONG",{});var mdt=s(Dhe);vUo=r(mdt,"data2vec-audio"),mdt.forEach(t),FUo=r(D8e," \u2014 "),EV=n(D8e,"A",{href:!0});var gdt=s(EV);TUo=r(gdt,"Data2VecAudioForXVector"),gdt.forEach(t),MUo=r(D8e," (Data2VecAudio model)"),D8e.forEach(t),EUo=i(tw),vv=n(tw,"LI",{});var G8e=s(vv);Ghe=n(G8e,"STRONG",{});var hdt=s(Ghe);CUo=r(hdt,"unispeech-sat"),hdt.forEach(t),wUo=r(G8e," \u2014 "),CV=n(G8e,"A",{href:!0});var pdt=s(CV);AUo=r(pdt,"UniSpeechSatForXVector"),pdt.forEach(t),yUo=r(G8e," (UniSpeechSat model)"),G8e.forEach(t),LUo=i(tw),Fv=n(tw,"LI",{});var O8e=s(Fv);Ohe=n(O8e,"STRONG",{});var udt=s(Ohe);xUo=r(udt,"wav2vec2"),udt.forEach(t),$Uo=r(O8e," \u2014 "),wV=n(O8e,"A",{href:!0});var _dt=s(wV);kUo=r(_dt,"Wav2Vec2ForXVector"),_dt.forEach(t),SUo=r(O8e," (Wav2Vec2 model)"),O8e.forEach(t),RUo=i(tw),Tv=n(tw,"LI",{});var V8e=s(Tv);Vhe=n(V8e,"STRONG",{});var bdt=s(Vhe);BUo=r(bdt,"wavlm"),bdt.forEach(t),PUo=r(V8e," \u2014 "),AV=n(V8e,"A",{href:!0});var vdt=s(AV);IUo=r(vdt,"WavLMForXVector"),vdt.forEach(t),qUo=r(V8e," (WavLM model)"),V8e.forEach(t),tw.forEach(t),NUo=i(ga),Mv=n(ga,"P",{});var X8e=s(Mv);jUo=r(X8e,"The model is set in evaluation mode by default using "),Xhe=n(X8e,"CODE",{});var Fdt=s(Xhe);DUo=r(Fdt,"model.eval()"),Fdt.forEach(t),GUo=r(X8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zhe=n(X8e,"CODE",{});var Tdt=s(zhe);OUo=r(Tdt,"model.train()"),Tdt.forEach(t),X8e.forEach(t),VUo=i(ga),T(Ev.$$.fragment,ga),ga.forEach(t),Zs.forEach(t),$Be=i(f),pd=n(f,"H2",{class:!0});var RIe=s(pd);Cv=n(RIe,"A",{id:!0,class:!0,href:!0});var Mdt=s(Cv);Qhe=n(Mdt,"SPAN",{});var Edt=s(Qhe);T(Cy.$$.fragment,Edt),Edt.forEach(t),Mdt.forEach(t),XUo=i(RIe),Whe=n(RIe,"SPAN",{});var Cdt=s(Whe);zUo=r(Cdt,"AutoModelForMaskedImageModeling"),Cdt.forEach(t),RIe.forEach(t),kBe=i(f),zo=n(f,"DIV",{class:!0});var el=s(zo);T(wy.$$.fragment,el),QUo=i(el),ud=n(el,"P",{});var kY=s(ud);WUo=r(kY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),yV=n(kY,"A",{href:!0});var wdt=s(yV);HUo=r(wdt,"from_pretrained()"),wdt.forEach(t),UUo=r(kY," class method or the "),LV=n(kY,"A",{href:!0});var Adt=s(LV);JUo=r(Adt,"from_config()"),Adt.forEach(t),YUo=r(kY,` class
method.`),kY.forEach(t),KUo=i(el),Ay=n(el,"P",{});var BIe=s(Ay);ZUo=r(BIe,"This class cannot be instantiated directly using "),Hhe=n(BIe,"CODE",{});var ydt=s(Hhe);eJo=r(ydt,"__init__()"),ydt.forEach(t),oJo=r(BIe," (throws an error)."),BIe.forEach(t),rJo=i(el),bt=n(el,"DIV",{class:!0});var aw=s(bt);T(yy.$$.fragment,aw),tJo=i(aw),Uhe=n(aw,"P",{});var Ldt=s(Uhe);aJo=r(Ldt,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),Ldt.forEach(t),nJo=i(aw),_d=n(aw,"P",{});var SY=s(_d);sJo=r(SY,`Note:
Loading a model from its configuration file does `),Jhe=n(SY,"STRONG",{});var xdt=s(Jhe);lJo=r(xdt,"not"),xdt.forEach(t),iJo=r(SY,` load the model weights. It only affects the
model\u2019s configuration. Use `),xV=n(SY,"A",{href:!0});var $dt=s(xV);dJo=r($dt,"from_pretrained()"),$dt.forEach(t),cJo=r(SY," to load the model weights."),SY.forEach(t),fJo=i(aw),T(wv.$$.fragment,aw),aw.forEach(t),mJo=i(el),mo=n(el,"DIV",{class:!0});var ha=s(mo);T(Ly.$$.fragment,ha),gJo=i(ha),Yhe=n(ha,"P",{});var kdt=s(Yhe);hJo=r(kdt,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),kdt.forEach(t),pJo=i(ha),Va=n(ha,"P",{});var nw=s(Va);uJo=r(nw,"The model class to instantiate is selected based on the "),Khe=n(nw,"CODE",{});var Sdt=s(Khe);_Jo=r(Sdt,"model_type"),Sdt.forEach(t),bJo=r(nw,` property of the config object (either
passed as an argument or loaded from `),Zhe=n(nw,"CODE",{});var Rdt=s(Zhe);vJo=r(Rdt,"pretrained_model_name_or_path"),Rdt.forEach(t),FJo=r(nw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),epe=n(nw,"CODE",{});var Bdt=s(epe);TJo=r(Bdt,"pretrained_model_name_or_path"),Bdt.forEach(t),MJo=r(nw,":"),nw.forEach(t),EJo=i(ha),bd=n(ha,"UL",{});var RY=s(bd);Av=n(RY,"LI",{});var z8e=s(Av);ope=n(z8e,"STRONG",{});var Pdt=s(ope);CJo=r(Pdt,"deit"),Pdt.forEach(t),wJo=r(z8e," \u2014 "),$V=n(z8e,"A",{href:!0});var Idt=s($V);AJo=r(Idt,"DeiTForMaskedImageModeling"),Idt.forEach(t),yJo=r(z8e," (DeiT model)"),z8e.forEach(t),LJo=i(RY),yv=n(RY,"LI",{});var Q8e=s(yv);rpe=n(Q8e,"STRONG",{});var qdt=s(rpe);xJo=r(qdt,"swin"),qdt.forEach(t),$Jo=r(Q8e," \u2014 "),kV=n(Q8e,"A",{href:!0});var Ndt=s(kV);kJo=r(Ndt,"SwinForMaskedImageModeling"),Ndt.forEach(t),SJo=r(Q8e," (Swin model)"),Q8e.forEach(t),RJo=i(RY),Lv=n(RY,"LI",{});var W8e=s(Lv);tpe=n(W8e,"STRONG",{});var jdt=s(tpe);BJo=r(jdt,"vit"),jdt.forEach(t),PJo=r(W8e," \u2014 "),SV=n(W8e,"A",{href:!0});var Ddt=s(SV);IJo=r(Ddt,"ViTForMaskedImageModeling"),Ddt.forEach(t),qJo=r(W8e," (ViT model)"),W8e.forEach(t),RY.forEach(t),NJo=i(ha),xv=n(ha,"P",{});var H8e=s(xv);jJo=r(H8e,"The model is set in evaluation mode by default using "),ape=n(H8e,"CODE",{});var Gdt=s(ape);DJo=r(Gdt,"model.eval()"),Gdt.forEach(t),GJo=r(H8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),npe=n(H8e,"CODE",{});var Odt=s(npe);OJo=r(Odt,"model.train()"),Odt.forEach(t),H8e.forEach(t),VJo=i(ha),T($v.$$.fragment,ha),ha.forEach(t),el.forEach(t),SBe=i(f),vd=n(f,"H2",{class:!0});var PIe=s(vd);kv=n(PIe,"A",{id:!0,class:!0,href:!0});var Vdt=s(kv);spe=n(Vdt,"SPAN",{});var Xdt=s(spe);T(xy.$$.fragment,Xdt),Xdt.forEach(t),Vdt.forEach(t),XJo=i(PIe),lpe=n(PIe,"SPAN",{});var zdt=s(lpe);zJo=r(zdt,"AutoModelForObjectDetection"),zdt.forEach(t),PIe.forEach(t),RBe=i(f),Qo=n(f,"DIV",{class:!0});var ol=s(Qo);T($y.$$.fragment,ol),QJo=i(ol),Fd=n(ol,"P",{});var BY=s(Fd);WJo=r(BY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),RV=n(BY,"A",{href:!0});var Qdt=s(RV);HJo=r(Qdt,"from_pretrained()"),Qdt.forEach(t),UJo=r(BY," class method or the "),BV=n(BY,"A",{href:!0});var Wdt=s(BV);JJo=r(Wdt,"from_config()"),Wdt.forEach(t),YJo=r(BY,` class
method.`),BY.forEach(t),KJo=i(ol),ky=n(ol,"P",{});var IIe=s(ky);ZJo=r(IIe,"This class cannot be instantiated directly using "),ipe=n(IIe,"CODE",{});var Hdt=s(ipe);eYo=r(Hdt,"__init__()"),Hdt.forEach(t),oYo=r(IIe," (throws an error)."),IIe.forEach(t),rYo=i(ol),vt=n(ol,"DIV",{class:!0});var sw=s(vt);T(Sy.$$.fragment,sw),tYo=i(sw),dpe=n(sw,"P",{});var Udt=s(dpe);aYo=r(Udt,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),Udt.forEach(t),nYo=i(sw),Td=n(sw,"P",{});var PY=s(Td);sYo=r(PY,`Note:
Loading a model from its configuration file does `),cpe=n(PY,"STRONG",{});var Jdt=s(cpe);lYo=r(Jdt,"not"),Jdt.forEach(t),iYo=r(PY,` load the model weights. It only affects the
model\u2019s configuration. Use `),PV=n(PY,"A",{href:!0});var Ydt=s(PV);dYo=r(Ydt,"from_pretrained()"),Ydt.forEach(t),cYo=r(PY," to load the model weights."),PY.forEach(t),fYo=i(sw),T(Sv.$$.fragment,sw),sw.forEach(t),mYo=i(ol),go=n(ol,"DIV",{class:!0});var pa=s(go);T(Ry.$$.fragment,pa),gYo=i(pa),fpe=n(pa,"P",{});var Kdt=s(fpe);hYo=r(Kdt,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),Kdt.forEach(t),pYo=i(pa),Xa=n(pa,"P",{});var lw=s(Xa);uYo=r(lw,"The model class to instantiate is selected based on the "),mpe=n(lw,"CODE",{});var Zdt=s(mpe);_Yo=r(Zdt,"model_type"),Zdt.forEach(t),bYo=r(lw,` property of the config object (either
passed as an argument or loaded from `),gpe=n(lw,"CODE",{});var ect=s(gpe);vYo=r(ect,"pretrained_model_name_or_path"),ect.forEach(t),FYo=r(lw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hpe=n(lw,"CODE",{});var oct=s(hpe);TYo=r(oct,"pretrained_model_name_or_path"),oct.forEach(t),MYo=r(lw,":"),lw.forEach(t),EYo=i(pa),ppe=n(pa,"UL",{});var rct=s(ppe);Rv=n(rct,"LI",{});var U8e=s(Rv);upe=n(U8e,"STRONG",{});var tct=s(upe);CYo=r(tct,"detr"),tct.forEach(t),wYo=r(U8e," \u2014 "),IV=n(U8e,"A",{href:!0});var act=s(IV);AYo=r(act,"DetrForObjectDetection"),act.forEach(t),yYo=r(U8e," (DETR model)"),U8e.forEach(t),rct.forEach(t),LYo=i(pa),Bv=n(pa,"P",{});var J8e=s(Bv);xYo=r(J8e,"The model is set in evaluation mode by default using "),_pe=n(J8e,"CODE",{});var nct=s(_pe);$Yo=r(nct,"model.eval()"),nct.forEach(t),kYo=r(J8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),bpe=n(J8e,"CODE",{});var sct=s(bpe);SYo=r(sct,"model.train()"),sct.forEach(t),J8e.forEach(t),RYo=i(pa),T(Pv.$$.fragment,pa),pa.forEach(t),ol.forEach(t),BBe=i(f),Md=n(f,"H2",{class:!0});var qIe=s(Md);Iv=n(qIe,"A",{id:!0,class:!0,href:!0});var lct=s(Iv);vpe=n(lct,"SPAN",{});var ict=s(vpe);T(By.$$.fragment,ict),ict.forEach(t),lct.forEach(t),BYo=i(qIe),Fpe=n(qIe,"SPAN",{});var dct=s(Fpe);PYo=r(dct,"AutoModelForImageSegmentation"),dct.forEach(t),qIe.forEach(t),PBe=i(f),Wo=n(f,"DIV",{class:!0});var rl=s(Wo);T(Py.$$.fragment,rl),IYo=i(rl),Ed=n(rl,"P",{});var IY=s(Ed);qYo=r(IY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),qV=n(IY,"A",{href:!0});var cct=s(qV);NYo=r(cct,"from_pretrained()"),cct.forEach(t),jYo=r(IY," class method or the "),NV=n(IY,"A",{href:!0});var fct=s(NV);DYo=r(fct,"from_config()"),fct.forEach(t),GYo=r(IY,` class
method.`),IY.forEach(t),OYo=i(rl),Iy=n(rl,"P",{});var NIe=s(Iy);VYo=r(NIe,"This class cannot be instantiated directly using "),Tpe=n(NIe,"CODE",{});var mct=s(Tpe);XYo=r(mct,"__init__()"),mct.forEach(t),zYo=r(NIe," (throws an error)."),NIe.forEach(t),QYo=i(rl),Ft=n(rl,"DIV",{class:!0});var iw=s(Ft);T(qy.$$.fragment,iw),WYo=i(iw),Mpe=n(iw,"P",{});var gct=s(Mpe);HYo=r(gct,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),gct.forEach(t),UYo=i(iw),Cd=n(iw,"P",{});var qY=s(Cd);JYo=r(qY,`Note:
Loading a model from its configuration file does `),Epe=n(qY,"STRONG",{});var hct=s(Epe);YYo=r(hct,"not"),hct.forEach(t),KYo=r(qY,` load the model weights. It only affects the
model\u2019s configuration. Use `),jV=n(qY,"A",{href:!0});var pct=s(jV);ZYo=r(pct,"from_pretrained()"),pct.forEach(t),eKo=r(qY," to load the model weights."),qY.forEach(t),oKo=i(iw),T(qv.$$.fragment,iw),iw.forEach(t),rKo=i(rl),ho=n(rl,"DIV",{class:!0});var ua=s(ho);T(Ny.$$.fragment,ua),tKo=i(ua),Cpe=n(ua,"P",{});var uct=s(Cpe);aKo=r(uct,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),uct.forEach(t),nKo=i(ua),za=n(ua,"P",{});var dw=s(za);sKo=r(dw,"The model class to instantiate is selected based on the "),wpe=n(dw,"CODE",{});var _ct=s(wpe);lKo=r(_ct,"model_type"),_ct.forEach(t),iKo=r(dw,` property of the config object (either
passed as an argument or loaded from `),Ape=n(dw,"CODE",{});var bct=s(Ape);dKo=r(bct,"pretrained_model_name_or_path"),bct.forEach(t),cKo=r(dw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ype=n(dw,"CODE",{});var vct=s(ype);fKo=r(vct,"pretrained_model_name_or_path"),vct.forEach(t),mKo=r(dw,":"),dw.forEach(t),gKo=i(ua),Lpe=n(ua,"UL",{});var Fct=s(Lpe);Nv=n(Fct,"LI",{});var Y8e=s(Nv);xpe=n(Y8e,"STRONG",{});var Tct=s(xpe);hKo=r(Tct,"detr"),Tct.forEach(t),pKo=r(Y8e," \u2014 "),DV=n(Y8e,"A",{href:!0});var Mct=s(DV);uKo=r(Mct,"DetrForSegmentation"),Mct.forEach(t),_Ko=r(Y8e," (DETR model)"),Y8e.forEach(t),Fct.forEach(t),bKo=i(ua),jv=n(ua,"P",{});var K8e=s(jv);vKo=r(K8e,"The model is set in evaluation mode by default using "),$pe=n(K8e,"CODE",{});var Ect=s($pe);FKo=r(Ect,"model.eval()"),Ect.forEach(t),TKo=r(K8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),kpe=n(K8e,"CODE",{});var Cct=s(kpe);MKo=r(Cct,"model.train()"),Cct.forEach(t),K8e.forEach(t),EKo=i(ua),T(Dv.$$.fragment,ua),ua.forEach(t),rl.forEach(t),IBe=i(f),wd=n(f,"H2",{class:!0});var jIe=s(wd);Gv=n(jIe,"A",{id:!0,class:!0,href:!0});var wct=s(Gv);Spe=n(wct,"SPAN",{});var Act=s(Spe);T(jy.$$.fragment,Act),Act.forEach(t),wct.forEach(t),CKo=i(jIe),Rpe=n(jIe,"SPAN",{});var yct=s(Rpe);wKo=r(yct,"AutoModelForSemanticSegmentation"),yct.forEach(t),jIe.forEach(t),qBe=i(f),Ho=n(f,"DIV",{class:!0});var tl=s(Ho);T(Dy.$$.fragment,tl),AKo=i(tl),Ad=n(tl,"P",{});var NY=s(Ad);yKo=r(NY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),GV=n(NY,"A",{href:!0});var Lct=s(GV);LKo=r(Lct,"from_pretrained()"),Lct.forEach(t),xKo=r(NY," class method or the "),OV=n(NY,"A",{href:!0});var xct=s(OV);$Ko=r(xct,"from_config()"),xct.forEach(t),kKo=r(NY,` class
method.`),NY.forEach(t),SKo=i(tl),Gy=n(tl,"P",{});var DIe=s(Gy);RKo=r(DIe,"This class cannot be instantiated directly using "),Bpe=n(DIe,"CODE",{});var $ct=s(Bpe);BKo=r($ct,"__init__()"),$ct.forEach(t),PKo=r(DIe," (throws an error)."),DIe.forEach(t),IKo=i(tl),Tt=n(tl,"DIV",{class:!0});var cw=s(Tt);T(Oy.$$.fragment,cw),qKo=i(cw),Ppe=n(cw,"P",{});var kct=s(Ppe);NKo=r(kct,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),kct.forEach(t),jKo=i(cw),yd=n(cw,"P",{});var jY=s(yd);DKo=r(jY,`Note:
Loading a model from its configuration file does `),Ipe=n(jY,"STRONG",{});var Sct=s(Ipe);GKo=r(Sct,"not"),Sct.forEach(t),OKo=r(jY,` load the model weights. It only affects the
model\u2019s configuration. Use `),VV=n(jY,"A",{href:!0});var Rct=s(VV);VKo=r(Rct,"from_pretrained()"),Rct.forEach(t),XKo=r(jY," to load the model weights."),jY.forEach(t),zKo=i(cw),T(Ov.$$.fragment,cw),cw.forEach(t),QKo=i(tl),po=n(tl,"DIV",{class:!0});var _a=s(po);T(Vy.$$.fragment,_a),WKo=i(_a),qpe=n(_a,"P",{});var Bct=s(qpe);HKo=r(Bct,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),Bct.forEach(t),UKo=i(_a),Qa=n(_a,"P",{});var fw=s(Qa);JKo=r(fw,"The model class to instantiate is selected based on the "),Npe=n(fw,"CODE",{});var Pct=s(Npe);YKo=r(Pct,"model_type"),Pct.forEach(t),KKo=r(fw,` property of the config object (either
passed as an argument or loaded from `),jpe=n(fw,"CODE",{});var Ict=s(jpe);ZKo=r(Ict,"pretrained_model_name_or_path"),Ict.forEach(t),eZo=r(fw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dpe=n(fw,"CODE",{});var qct=s(Dpe);oZo=r(qct,"pretrained_model_name_or_path"),qct.forEach(t),rZo=r(fw,":"),fw.forEach(t),tZo=i(_a),Wa=n(_a,"UL",{});var mw=s(Wa);Vv=n(mw,"LI",{});var Z8e=s(Vv);Gpe=n(Z8e,"STRONG",{});var Nct=s(Gpe);aZo=r(Nct,"beit"),Nct.forEach(t),nZo=r(Z8e," \u2014 "),XV=n(Z8e,"A",{href:!0});var jct=s(XV);sZo=r(jct,"BeitForSemanticSegmentation"),jct.forEach(t),lZo=r(Z8e," (BEiT model)"),Z8e.forEach(t),iZo=i(mw),Xv=n(mw,"LI",{});var e7e=s(Xv);Ope=n(e7e,"STRONG",{});var Dct=s(Ope);dZo=r(Dct,"data2vec-vision"),Dct.forEach(t),cZo=r(e7e," \u2014 "),zV=n(e7e,"A",{href:!0});var Gct=s(zV);fZo=r(Gct,"Data2VecVisionForSemanticSegmentation"),Gct.forEach(t),mZo=r(e7e," (Data2VecVision model)"),e7e.forEach(t),gZo=i(mw),zv=n(mw,"LI",{});var o7e=s(zv);Vpe=n(o7e,"STRONG",{});var Oct=s(Vpe);hZo=r(Oct,"dpt"),Oct.forEach(t),pZo=r(o7e," \u2014 "),QV=n(o7e,"A",{href:!0});var Vct=s(QV);uZo=r(Vct,"DPTForSemanticSegmentation"),Vct.forEach(t),_Zo=r(o7e," (DPT model)"),o7e.forEach(t),bZo=i(mw),Qv=n(mw,"LI",{});var r7e=s(Qv);Xpe=n(r7e,"STRONG",{});var Xct=s(Xpe);vZo=r(Xct,"segformer"),Xct.forEach(t),FZo=r(r7e," \u2014 "),WV=n(r7e,"A",{href:!0});var zct=s(WV);TZo=r(zct,"SegformerForSemanticSegmentation"),zct.forEach(t),MZo=r(r7e," (SegFormer model)"),r7e.forEach(t),mw.forEach(t),EZo=i(_a),Wv=n(_a,"P",{});var t7e=s(Wv);CZo=r(t7e,"The model is set in evaluation mode by default using "),zpe=n(t7e,"CODE",{});var Qct=s(zpe);wZo=r(Qct,"model.eval()"),Qct.forEach(t),AZo=r(t7e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Qpe=n(t7e,"CODE",{});var Wct=s(Qpe);yZo=r(Wct,"model.train()"),Wct.forEach(t),t7e.forEach(t),LZo=i(_a),T(Hv.$$.fragment,_a),_a.forEach(t),tl.forEach(t),NBe=i(f),Ld=n(f,"H2",{class:!0});var GIe=s(Ld);Uv=n(GIe,"A",{id:!0,class:!0,href:!0});var Hct=s(Uv);Wpe=n(Hct,"SPAN",{});var Uct=s(Wpe);T(Xy.$$.fragment,Uct),Uct.forEach(t),Hct.forEach(t),xZo=i(GIe),Hpe=n(GIe,"SPAN",{});var Jct=s(Hpe);$Zo=r(Jct,"AutoModelForInstanceSegmentation"),Jct.forEach(t),GIe.forEach(t),jBe=i(f),Uo=n(f,"DIV",{class:!0});var al=s(Uo);T(zy.$$.fragment,al),kZo=i(al),xd=n(al,"P",{});var DY=s(xd);SZo=r(DY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),HV=n(DY,"A",{href:!0});var Yct=s(HV);RZo=r(Yct,"from_pretrained()"),Yct.forEach(t),BZo=r(DY," class method or the "),UV=n(DY,"A",{href:!0});var Kct=s(UV);PZo=r(Kct,"from_config()"),Kct.forEach(t),IZo=r(DY,` class
method.`),DY.forEach(t),qZo=i(al),Qy=n(al,"P",{});var OIe=s(Qy);NZo=r(OIe,"This class cannot be instantiated directly using "),Upe=n(OIe,"CODE",{});var Zct=s(Upe);jZo=r(Zct,"__init__()"),Zct.forEach(t),DZo=r(OIe," (throws an error)."),OIe.forEach(t),GZo=i(al),Mt=n(al,"DIV",{class:!0});var gw=s(Mt);T(Wy.$$.fragment,gw),OZo=i(gw),Jpe=n(gw,"P",{});var eft=s(Jpe);VZo=r(eft,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),eft.forEach(t),XZo=i(gw),$d=n(gw,"P",{});var GY=s($d);zZo=r(GY,`Note:
Loading a model from its configuration file does `),Ype=n(GY,"STRONG",{});var oft=s(Ype);QZo=r(oft,"not"),oft.forEach(t),WZo=r(GY,` load the model weights. It only affects the
model\u2019s configuration. Use `),JV=n(GY,"A",{href:!0});var rft=s(JV);HZo=r(rft,"from_pretrained()"),rft.forEach(t),UZo=r(GY," to load the model weights."),GY.forEach(t),JZo=i(gw),T(Jv.$$.fragment,gw),gw.forEach(t),YZo=i(al),uo=n(al,"DIV",{class:!0});var ba=s(uo);T(Hy.$$.fragment,ba),KZo=i(ba),Kpe=n(ba,"P",{});var tft=s(Kpe);ZZo=r(tft,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),tft.forEach(t),eer=i(ba),Ha=n(ba,"P",{});var hw=s(Ha);oer=r(hw,"The model class to instantiate is selected based on the "),Zpe=n(hw,"CODE",{});var aft=s(Zpe);rer=r(aft,"model_type"),aft.forEach(t),ter=r(hw,` property of the config object (either
passed as an argument or loaded from `),eue=n(hw,"CODE",{});var nft=s(eue);aer=r(nft,"pretrained_model_name_or_path"),nft.forEach(t),ner=r(hw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),oue=n(hw,"CODE",{});var sft=s(oue);ser=r(sft,"pretrained_model_name_or_path"),sft.forEach(t),ler=r(hw,":"),hw.forEach(t),ier=i(ba),rue=n(ba,"UL",{});var lft=s(rue);Yv=n(lft,"LI",{});var a7e=s(Yv);tue=n(a7e,"STRONG",{});var ift=s(tue);der=r(ift,"maskformer"),ift.forEach(t),cer=r(a7e," \u2014 "),YV=n(a7e,"A",{href:!0});var dft=s(YV);fer=r(dft,"MaskFormerForInstanceSegmentation"),dft.forEach(t),mer=r(a7e," (MaskFormer model)"),a7e.forEach(t),lft.forEach(t),ger=i(ba),Kv=n(ba,"P",{});var n7e=s(Kv);her=r(n7e,"The model is set in evaluation mode by default using "),aue=n(n7e,"CODE",{});var cft=s(aue);per=r(cft,"model.eval()"),cft.forEach(t),uer=r(n7e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),nue=n(n7e,"CODE",{});var fft=s(nue);_er=r(fft,"model.train()"),fft.forEach(t),n7e.forEach(t),ber=i(ba),T(Zv.$$.fragment,ba),ba.forEach(t),al.forEach(t),DBe=i(f),kd=n(f,"H2",{class:!0});var VIe=s(kd);eF=n(VIe,"A",{id:!0,class:!0,href:!0});var mft=s(eF);sue=n(mft,"SPAN",{});var gft=s(sue);T(Uy.$$.fragment,gft),gft.forEach(t),mft.forEach(t),ver=i(VIe),lue=n(VIe,"SPAN",{});var hft=s(lue);Fer=r(hft,"TFAutoModel"),hft.forEach(t),VIe.forEach(t),GBe=i(f),Jo=n(f,"DIV",{class:!0});var nl=s(Jo);T(Jy.$$.fragment,nl),Ter=i(nl),Sd=n(nl,"P",{});var OY=s(Sd);Mer=r(OY,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),KV=n(OY,"A",{href:!0});var pft=s(KV);Eer=r(pft,"from_pretrained()"),pft.forEach(t),Cer=r(OY," class method or the "),ZV=n(OY,"A",{href:!0});var uft=s(ZV);wer=r(uft,"from_config()"),uft.forEach(t),Aer=r(OY,` class
method.`),OY.forEach(t),yer=i(nl),Yy=n(nl,"P",{});var XIe=s(Yy);Ler=r(XIe,"This class cannot be instantiated directly using "),iue=n(XIe,"CODE",{});var _ft=s(iue);xer=r(_ft,"__init__()"),_ft.forEach(t),$er=r(XIe," (throws an error)."),XIe.forEach(t),ker=i(nl),Et=n(nl,"DIV",{class:!0});var pw=s(Et);T(Ky.$$.fragment,pw),Ser=i(pw),due=n(pw,"P",{});var bft=s(due);Rer=r(bft,"Instantiates one of the base model classes of the library from a configuration."),bft.forEach(t),Ber=i(pw),Rd=n(pw,"P",{});var VY=s(Rd);Per=r(VY,`Note:
Loading a model from its configuration file does `),cue=n(VY,"STRONG",{});var vft=s(cue);Ier=r(vft,"not"),vft.forEach(t),qer=r(VY,` load the model weights. It only affects the
model\u2019s configuration. Use `),eX=n(VY,"A",{href:!0});var Fft=s(eX);Ner=r(Fft,"from_pretrained()"),Fft.forEach(t),jer=r(VY," to load the model weights."),VY.forEach(t),Der=i(pw),T(oF.$$.fragment,pw),pw.forEach(t),Ger=i(nl),Er=n(nl,"DIV",{class:!0});var sl=s(Er);T(Zy.$$.fragment,sl),Oer=i(sl),fue=n(sl,"P",{});var Tft=s(fue);Ver=r(Tft,"Instantiate one of the base model classes of the library from a pretrained model."),Tft.forEach(t),Xer=i(sl),Ua=n(sl,"P",{});var uw=s(Ua);zer=r(uw,"The model class to instantiate is selected based on the "),mue=n(uw,"CODE",{});var Mft=s(mue);Qer=r(Mft,"model_type"),Mft.forEach(t),Wer=r(uw,` property of the config object (either
passed as an argument or loaded from `),gue=n(uw,"CODE",{});var Eft=s(gue);Her=r(Eft,"pretrained_model_name_or_path"),Eft.forEach(t),Uer=r(uw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hue=n(uw,"CODE",{});var Cft=s(hue);Jer=r(Cft,"pretrained_model_name_or_path"),Cft.forEach(t),Yer=r(uw,":"),uw.forEach(t),Ker=i(sl),j=n(sl,"UL",{});var D=s(j);rF=n(D,"LI",{});var s7e=s(rF);pue=n(s7e,"STRONG",{});var wft=s(pue);Zer=r(wft,"albert"),wft.forEach(t),eor=r(s7e," \u2014 "),oX=n(s7e,"A",{href:!0});var Aft=s(oX);oor=r(Aft,"TFAlbertModel"),Aft.forEach(t),ror=r(s7e," (ALBERT model)"),s7e.forEach(t),tor=i(D),tF=n(D,"LI",{});var l7e=s(tF);uue=n(l7e,"STRONG",{});var yft=s(uue);aor=r(yft,"bart"),yft.forEach(t),nor=r(l7e," \u2014 "),rX=n(l7e,"A",{href:!0});var Lft=s(rX);sor=r(Lft,"TFBartModel"),Lft.forEach(t),lor=r(l7e," (BART model)"),l7e.forEach(t),ior=i(D),aF=n(D,"LI",{});var i7e=s(aF);_ue=n(i7e,"STRONG",{});var xft=s(_ue);dor=r(xft,"bert"),xft.forEach(t),cor=r(i7e," \u2014 "),tX=n(i7e,"A",{href:!0});var $ft=s(tX);mor=r($ft,"TFBertModel"),$ft.forEach(t),gor=r(i7e," (BERT model)"),i7e.forEach(t),hor=i(D),nF=n(D,"LI",{});var d7e=s(nF);bue=n(d7e,"STRONG",{});var kft=s(bue);por=r(kft,"blenderbot"),kft.forEach(t),uor=r(d7e," \u2014 "),aX=n(d7e,"A",{href:!0});var Sft=s(aX);_or=r(Sft,"TFBlenderbotModel"),Sft.forEach(t),bor=r(d7e," (Blenderbot model)"),d7e.forEach(t),vor=i(D),sF=n(D,"LI",{});var c7e=s(sF);vue=n(c7e,"STRONG",{});var Rft=s(vue);For=r(Rft,"blenderbot-small"),Rft.forEach(t),Tor=r(c7e," \u2014 "),nX=n(c7e,"A",{href:!0});var Bft=s(nX);Mor=r(Bft,"TFBlenderbotSmallModel"),Bft.forEach(t),Eor=r(c7e," (BlenderbotSmall model)"),c7e.forEach(t),Cor=i(D),lF=n(D,"LI",{});var f7e=s(lF);Fue=n(f7e,"STRONG",{});var Pft=s(Fue);wor=r(Pft,"camembert"),Pft.forEach(t),Aor=r(f7e," \u2014 "),sX=n(f7e,"A",{href:!0});var Ift=s(sX);yor=r(Ift,"TFCamembertModel"),Ift.forEach(t),Lor=r(f7e," (CamemBERT model)"),f7e.forEach(t),xor=i(D),iF=n(D,"LI",{});var m7e=s(iF);Tue=n(m7e,"STRONG",{});var qft=s(Tue);$or=r(qft,"clip"),qft.forEach(t),kor=r(m7e," \u2014 "),lX=n(m7e,"A",{href:!0});var Nft=s(lX);Sor=r(Nft,"TFCLIPModel"),Nft.forEach(t),Ror=r(m7e," (CLIP model)"),m7e.forEach(t),Bor=i(D),dF=n(D,"LI",{});var g7e=s(dF);Mue=n(g7e,"STRONG",{});var jft=s(Mue);Por=r(jft,"convbert"),jft.forEach(t),Ior=r(g7e," \u2014 "),iX=n(g7e,"A",{href:!0});var Dft=s(iX);qor=r(Dft,"TFConvBertModel"),Dft.forEach(t),Nor=r(g7e," (ConvBERT model)"),g7e.forEach(t),jor=i(D),cF=n(D,"LI",{});var h7e=s(cF);Eue=n(h7e,"STRONG",{});var Gft=s(Eue);Dor=r(Gft,"convnext"),Gft.forEach(t),Gor=r(h7e," \u2014 "),dX=n(h7e,"A",{href:!0});var Oft=s(dX);Oor=r(Oft,"TFConvNextModel"),Oft.forEach(t),Vor=r(h7e," (ConvNext model)"),h7e.forEach(t),Xor=i(D),fF=n(D,"LI",{});var p7e=s(fF);Cue=n(p7e,"STRONG",{});var Vft=s(Cue);zor=r(Vft,"ctrl"),Vft.forEach(t),Qor=r(p7e," \u2014 "),cX=n(p7e,"A",{href:!0});var Xft=s(cX);Wor=r(Xft,"TFCTRLModel"),Xft.forEach(t),Hor=r(p7e," (CTRL model)"),p7e.forEach(t),Uor=i(D),mF=n(D,"LI",{});var u7e=s(mF);wue=n(u7e,"STRONG",{});var zft=s(wue);Jor=r(zft,"deberta"),zft.forEach(t),Yor=r(u7e," \u2014 "),fX=n(u7e,"A",{href:!0});var Qft=s(fX);Kor=r(Qft,"TFDebertaModel"),Qft.forEach(t),Zor=r(u7e," (DeBERTa model)"),u7e.forEach(t),err=i(D),gF=n(D,"LI",{});var _7e=s(gF);Aue=n(_7e,"STRONG",{});var Wft=s(Aue);orr=r(Wft,"deberta-v2"),Wft.forEach(t),rrr=r(_7e," \u2014 "),mX=n(_7e,"A",{href:!0});var Hft=s(mX);trr=r(Hft,"TFDebertaV2Model"),Hft.forEach(t),arr=r(_7e," (DeBERTa-v2 model)"),_7e.forEach(t),nrr=i(D),hF=n(D,"LI",{});var b7e=s(hF);yue=n(b7e,"STRONG",{});var Uft=s(yue);srr=r(Uft,"distilbert"),Uft.forEach(t),lrr=r(b7e," \u2014 "),gX=n(b7e,"A",{href:!0});var Jft=s(gX);irr=r(Jft,"TFDistilBertModel"),Jft.forEach(t),drr=r(b7e," (DistilBERT model)"),b7e.forEach(t),crr=i(D),pF=n(D,"LI",{});var v7e=s(pF);Lue=n(v7e,"STRONG",{});var Yft=s(Lue);frr=r(Yft,"dpr"),Yft.forEach(t),mrr=r(v7e," \u2014 "),hX=n(v7e,"A",{href:!0});var Kft=s(hX);grr=r(Kft,"TFDPRQuestionEncoder"),Kft.forEach(t),hrr=r(v7e," (DPR model)"),v7e.forEach(t),prr=i(D),uF=n(D,"LI",{});var F7e=s(uF);xue=n(F7e,"STRONG",{});var Zft=s(xue);urr=r(Zft,"electra"),Zft.forEach(t),_rr=r(F7e," \u2014 "),pX=n(F7e,"A",{href:!0});var emt=s(pX);brr=r(emt,"TFElectraModel"),emt.forEach(t),vrr=r(F7e," (ELECTRA model)"),F7e.forEach(t),Frr=i(D),_F=n(D,"LI",{});var T7e=s(_F);$ue=n(T7e,"STRONG",{});var omt=s($ue);Trr=r(omt,"flaubert"),omt.forEach(t),Mrr=r(T7e," \u2014 "),uX=n(T7e,"A",{href:!0});var rmt=s(uX);Err=r(rmt,"TFFlaubertModel"),rmt.forEach(t),Crr=r(T7e," (FlauBERT model)"),T7e.forEach(t),wrr=i(D),$s=n(D,"LI",{});var wx=s($s);kue=n(wx,"STRONG",{});var tmt=s(kue);Arr=r(tmt,"funnel"),tmt.forEach(t),yrr=r(wx," \u2014 "),_X=n(wx,"A",{href:!0});var amt=s(_X);Lrr=r(amt,"TFFunnelModel"),amt.forEach(t),xrr=r(wx," or "),bX=n(wx,"A",{href:!0});var nmt=s(bX);$rr=r(nmt,"TFFunnelBaseModel"),nmt.forEach(t),krr=r(wx," (Funnel Transformer model)"),wx.forEach(t),Srr=i(D),bF=n(D,"LI",{});var M7e=s(bF);Sue=n(M7e,"STRONG",{});var smt=s(Sue);Rrr=r(smt,"gpt2"),smt.forEach(t),Brr=r(M7e," \u2014 "),vX=n(M7e,"A",{href:!0});var lmt=s(vX);Prr=r(lmt,"TFGPT2Model"),lmt.forEach(t),Irr=r(M7e," (OpenAI GPT-2 model)"),M7e.forEach(t),qrr=i(D),vF=n(D,"LI",{});var E7e=s(vF);Rue=n(E7e,"STRONG",{});var imt=s(Rue);Nrr=r(imt,"gptj"),imt.forEach(t),jrr=r(E7e," \u2014 "),FX=n(E7e,"A",{href:!0});var dmt=s(FX);Drr=r(dmt,"TFGPTJModel"),dmt.forEach(t),Grr=r(E7e," (GPT-J model)"),E7e.forEach(t),Orr=i(D),FF=n(D,"LI",{});var C7e=s(FF);Bue=n(C7e,"STRONG",{});var cmt=s(Bue);Vrr=r(cmt,"hubert"),cmt.forEach(t),Xrr=r(C7e," \u2014 "),TX=n(C7e,"A",{href:!0});var fmt=s(TX);zrr=r(fmt,"TFHubertModel"),fmt.forEach(t),Qrr=r(C7e," (Hubert model)"),C7e.forEach(t),Wrr=i(D),TF=n(D,"LI",{});var w7e=s(TF);Pue=n(w7e,"STRONG",{});var mmt=s(Pue);Hrr=r(mmt,"layoutlm"),mmt.forEach(t),Urr=r(w7e," \u2014 "),MX=n(w7e,"A",{href:!0});var gmt=s(MX);Jrr=r(gmt,"TFLayoutLMModel"),gmt.forEach(t),Yrr=r(w7e," (LayoutLM model)"),w7e.forEach(t),Krr=i(D),MF=n(D,"LI",{});var A7e=s(MF);Iue=n(A7e,"STRONG",{});var hmt=s(Iue);Zrr=r(hmt,"led"),hmt.forEach(t),etr=r(A7e," \u2014 "),EX=n(A7e,"A",{href:!0});var pmt=s(EX);otr=r(pmt,"TFLEDModel"),pmt.forEach(t),rtr=r(A7e," (LED model)"),A7e.forEach(t),ttr=i(D),EF=n(D,"LI",{});var y7e=s(EF);que=n(y7e,"STRONG",{});var umt=s(que);atr=r(umt,"longformer"),umt.forEach(t),ntr=r(y7e," \u2014 "),CX=n(y7e,"A",{href:!0});var _mt=s(CX);str=r(_mt,"TFLongformerModel"),_mt.forEach(t),ltr=r(y7e," (Longformer model)"),y7e.forEach(t),itr=i(D),CF=n(D,"LI",{});var L7e=s(CF);Nue=n(L7e,"STRONG",{});var bmt=s(Nue);dtr=r(bmt,"lxmert"),bmt.forEach(t),ctr=r(L7e," \u2014 "),wX=n(L7e,"A",{href:!0});var vmt=s(wX);ftr=r(vmt,"TFLxmertModel"),vmt.forEach(t),mtr=r(L7e," (LXMERT model)"),L7e.forEach(t),gtr=i(D),wF=n(D,"LI",{});var x7e=s(wF);jue=n(x7e,"STRONG",{});var Fmt=s(jue);htr=r(Fmt,"marian"),Fmt.forEach(t),ptr=r(x7e," \u2014 "),AX=n(x7e,"A",{href:!0});var Tmt=s(AX);utr=r(Tmt,"TFMarianModel"),Tmt.forEach(t),_tr=r(x7e," (Marian model)"),x7e.forEach(t),btr=i(D),AF=n(D,"LI",{});var $7e=s(AF);Due=n($7e,"STRONG",{});var Mmt=s(Due);vtr=r(Mmt,"mbart"),Mmt.forEach(t),Ftr=r($7e," \u2014 "),yX=n($7e,"A",{href:!0});var Emt=s(yX);Ttr=r(Emt,"TFMBartModel"),Emt.forEach(t),Mtr=r($7e," (mBART model)"),$7e.forEach(t),Etr=i(D),yF=n(D,"LI",{});var k7e=s(yF);Gue=n(k7e,"STRONG",{});var Cmt=s(Gue);Ctr=r(Cmt,"mobilebert"),Cmt.forEach(t),wtr=r(k7e," \u2014 "),LX=n(k7e,"A",{href:!0});var wmt=s(LX);Atr=r(wmt,"TFMobileBertModel"),wmt.forEach(t),ytr=r(k7e," (MobileBERT model)"),k7e.forEach(t),Ltr=i(D),LF=n(D,"LI",{});var S7e=s(LF);Oue=n(S7e,"STRONG",{});var Amt=s(Oue);xtr=r(Amt,"mpnet"),Amt.forEach(t),$tr=r(S7e," \u2014 "),xX=n(S7e,"A",{href:!0});var ymt=s(xX);ktr=r(ymt,"TFMPNetModel"),ymt.forEach(t),Str=r(S7e," (MPNet model)"),S7e.forEach(t),Rtr=i(D),xF=n(D,"LI",{});var R7e=s(xF);Vue=n(R7e,"STRONG",{});var Lmt=s(Vue);Btr=r(Lmt,"mt5"),Lmt.forEach(t),Ptr=r(R7e," \u2014 "),$X=n(R7e,"A",{href:!0});var xmt=s($X);Itr=r(xmt,"TFMT5Model"),xmt.forEach(t),qtr=r(R7e," (mT5 model)"),R7e.forEach(t),Ntr=i(D),$F=n(D,"LI",{});var B7e=s($F);Xue=n(B7e,"STRONG",{});var $mt=s(Xue);jtr=r($mt,"openai-gpt"),$mt.forEach(t),Dtr=r(B7e," \u2014 "),kX=n(B7e,"A",{href:!0});var kmt=s(kX);Gtr=r(kmt,"TFOpenAIGPTModel"),kmt.forEach(t),Otr=r(B7e," (OpenAI GPT model)"),B7e.forEach(t),Vtr=i(D),kF=n(D,"LI",{});var P7e=s(kF);zue=n(P7e,"STRONG",{});var Smt=s(zue);Xtr=r(Smt,"pegasus"),Smt.forEach(t),ztr=r(P7e," \u2014 "),SX=n(P7e,"A",{href:!0});var Rmt=s(SX);Qtr=r(Rmt,"TFPegasusModel"),Rmt.forEach(t),Wtr=r(P7e," (Pegasus model)"),P7e.forEach(t),Htr=i(D),SF=n(D,"LI",{});var I7e=s(SF);Que=n(I7e,"STRONG",{});var Bmt=s(Que);Utr=r(Bmt,"rembert"),Bmt.forEach(t),Jtr=r(I7e," \u2014 "),RX=n(I7e,"A",{href:!0});var Pmt=s(RX);Ytr=r(Pmt,"TFRemBertModel"),Pmt.forEach(t),Ktr=r(I7e," (RemBERT model)"),I7e.forEach(t),Ztr=i(D),RF=n(D,"LI",{});var q7e=s(RF);Wue=n(q7e,"STRONG",{});var Imt=s(Wue);ear=r(Imt,"roberta"),Imt.forEach(t),oar=r(q7e," \u2014 "),BX=n(q7e,"A",{href:!0});var qmt=s(BX);rar=r(qmt,"TFRobertaModel"),qmt.forEach(t),tar=r(q7e," (RoBERTa model)"),q7e.forEach(t),aar=i(D),BF=n(D,"LI",{});var N7e=s(BF);Hue=n(N7e,"STRONG",{});var Nmt=s(Hue);nar=r(Nmt,"roformer"),Nmt.forEach(t),sar=r(N7e," \u2014 "),PX=n(N7e,"A",{href:!0});var jmt=s(PX);lar=r(jmt,"TFRoFormerModel"),jmt.forEach(t),iar=r(N7e," (RoFormer model)"),N7e.forEach(t),dar=i(D),PF=n(D,"LI",{});var j7e=s(PF);Uue=n(j7e,"STRONG",{});var Dmt=s(Uue);car=r(Dmt,"speech_to_text"),Dmt.forEach(t),far=r(j7e," \u2014 "),IX=n(j7e,"A",{href:!0});var Gmt=s(IX);mar=r(Gmt,"TFSpeech2TextModel"),Gmt.forEach(t),gar=r(j7e," (Speech2Text model)"),j7e.forEach(t),har=i(D),IF=n(D,"LI",{});var D7e=s(IF);Jue=n(D7e,"STRONG",{});var Omt=s(Jue);par=r(Omt,"t5"),Omt.forEach(t),uar=r(D7e," \u2014 "),qX=n(D7e,"A",{href:!0});var Vmt=s(qX);_ar=r(Vmt,"TFT5Model"),Vmt.forEach(t),bar=r(D7e," (T5 model)"),D7e.forEach(t),Far=i(D),qF=n(D,"LI",{});var G7e=s(qF);Yue=n(G7e,"STRONG",{});var Xmt=s(Yue);Tar=r(Xmt,"tapas"),Xmt.forEach(t),Mar=r(G7e," \u2014 "),NX=n(G7e,"A",{href:!0});var zmt=s(NX);Ear=r(zmt,"TFTapasModel"),zmt.forEach(t),Car=r(G7e," (TAPAS model)"),G7e.forEach(t),war=i(D),NF=n(D,"LI",{});var O7e=s(NF);Kue=n(O7e,"STRONG",{});var Qmt=s(Kue);Aar=r(Qmt,"transfo-xl"),Qmt.forEach(t),yar=r(O7e," \u2014 "),jX=n(O7e,"A",{href:!0});var Wmt=s(jX);Lar=r(Wmt,"TFTransfoXLModel"),Wmt.forEach(t),xar=r(O7e," (Transformer-XL model)"),O7e.forEach(t),$ar=i(D),jF=n(D,"LI",{});var V7e=s(jF);Zue=n(V7e,"STRONG",{});var Hmt=s(Zue);kar=r(Hmt,"vit"),Hmt.forEach(t),Sar=r(V7e," \u2014 "),DX=n(V7e,"A",{href:!0});var Umt=s(DX);Rar=r(Umt,"TFViTModel"),Umt.forEach(t),Bar=r(V7e," (ViT model)"),V7e.forEach(t),Par=i(D),DF=n(D,"LI",{});var X7e=s(DF);e_e=n(X7e,"STRONG",{});var Jmt=s(e_e);Iar=r(Jmt,"vit_mae"),Jmt.forEach(t),qar=r(X7e," \u2014 "),GX=n(X7e,"A",{href:!0});var Ymt=s(GX);Nar=r(Ymt,"TFViTMAEModel"),Ymt.forEach(t),jar=r(X7e," (ViTMAE model)"),X7e.forEach(t),Dar=i(D),GF=n(D,"LI",{});var z7e=s(GF);o_e=n(z7e,"STRONG",{});var Kmt=s(o_e);Gar=r(Kmt,"wav2vec2"),Kmt.forEach(t),Oar=r(z7e," \u2014 "),OX=n(z7e,"A",{href:!0});var Zmt=s(OX);Var=r(Zmt,"TFWav2Vec2Model"),Zmt.forEach(t),Xar=r(z7e," (Wav2Vec2 model)"),z7e.forEach(t),zar=i(D),OF=n(D,"LI",{});var Q7e=s(OF);r_e=n(Q7e,"STRONG",{});var egt=s(r_e);Qar=r(egt,"xlm"),egt.forEach(t),War=r(Q7e," \u2014 "),VX=n(Q7e,"A",{href:!0});var ogt=s(VX);Har=r(ogt,"TFXLMModel"),ogt.forEach(t),Uar=r(Q7e," (XLM model)"),Q7e.forEach(t),Jar=i(D),VF=n(D,"LI",{});var W7e=s(VF);t_e=n(W7e,"STRONG",{});var rgt=s(t_e);Yar=r(rgt,"xlm-roberta"),rgt.forEach(t),Kar=r(W7e," \u2014 "),XX=n(W7e,"A",{href:!0});var tgt=s(XX);Zar=r(tgt,"TFXLMRobertaModel"),tgt.forEach(t),enr=r(W7e," (XLM-RoBERTa model)"),W7e.forEach(t),onr=i(D),XF=n(D,"LI",{});var H7e=s(XF);a_e=n(H7e,"STRONG",{});var agt=s(a_e);rnr=r(agt,"xlnet"),agt.forEach(t),tnr=r(H7e," \u2014 "),zX=n(H7e,"A",{href:!0});var ngt=s(zX);anr=r(ngt,"TFXLNetModel"),ngt.forEach(t),nnr=r(H7e," (XLNet model)"),H7e.forEach(t),D.forEach(t),snr=i(sl),T(zF.$$.fragment,sl),sl.forEach(t),nl.forEach(t),OBe=i(f),Bd=n(f,"H2",{class:!0});var zIe=s(Bd);QF=n(zIe,"A",{id:!0,class:!0,href:!0});var sgt=s(QF);n_e=n(sgt,"SPAN",{});var lgt=s(n_e);T(eL.$$.fragment,lgt),lgt.forEach(t),sgt.forEach(t),lnr=i(zIe),s_e=n(zIe,"SPAN",{});var igt=s(s_e);inr=r(igt,"TFAutoModelForPreTraining"),igt.forEach(t),zIe.forEach(t),VBe=i(f),Yo=n(f,"DIV",{class:!0});var ll=s(Yo);T(oL.$$.fragment,ll),dnr=i(ll),Pd=n(ll,"P",{});var XY=s(Pd);cnr=r(XY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),QX=n(XY,"A",{href:!0});var dgt=s(QX);fnr=r(dgt,"from_pretrained()"),dgt.forEach(t),mnr=r(XY," class method or the "),WX=n(XY,"A",{href:!0});var cgt=s(WX);gnr=r(cgt,"from_config()"),cgt.forEach(t),hnr=r(XY,` class
method.`),XY.forEach(t),pnr=i(ll),rL=n(ll,"P",{});var QIe=s(rL);unr=r(QIe,"This class cannot be instantiated directly using "),l_e=n(QIe,"CODE",{});var fgt=s(l_e);_nr=r(fgt,"__init__()"),fgt.forEach(t),bnr=r(QIe," (throws an error)."),QIe.forEach(t),vnr=i(ll),Ct=n(ll,"DIV",{class:!0});var _w=s(Ct);T(tL.$$.fragment,_w),Fnr=i(_w),i_e=n(_w,"P",{});var mgt=s(i_e);Tnr=r(mgt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),mgt.forEach(t),Mnr=i(_w),Id=n(_w,"P",{});var zY=s(Id);Enr=r(zY,`Note:
Loading a model from its configuration file does `),d_e=n(zY,"STRONG",{});var ggt=s(d_e);Cnr=r(ggt,"not"),ggt.forEach(t),wnr=r(zY,` load the model weights. It only affects the
model\u2019s configuration. Use `),HX=n(zY,"A",{href:!0});var hgt=s(HX);Anr=r(hgt,"from_pretrained()"),hgt.forEach(t),ynr=r(zY," to load the model weights."),zY.forEach(t),Lnr=i(_w),T(WF.$$.fragment,_w),_w.forEach(t),xnr=i(ll),Cr=n(ll,"DIV",{class:!0});var il=s(Cr);T(aL.$$.fragment,il),$nr=i(il),c_e=n(il,"P",{});var pgt=s(c_e);knr=r(pgt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),pgt.forEach(t),Snr=i(il),Ja=n(il,"P",{});var bw=s(Ja);Rnr=r(bw,"The model class to instantiate is selected based on the "),f_e=n(bw,"CODE",{});var ugt=s(f_e);Bnr=r(ugt,"model_type"),ugt.forEach(t),Pnr=r(bw,` property of the config object (either
passed as an argument or loaded from `),m_e=n(bw,"CODE",{});var _gt=s(m_e);Inr=r(_gt,"pretrained_model_name_or_path"),_gt.forEach(t),qnr=r(bw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),g_e=n(bw,"CODE",{});var bgt=s(g_e);Nnr=r(bgt,"pretrained_model_name_or_path"),bgt.forEach(t),jnr=r(bw,":"),bw.forEach(t),Dnr=i(il),ne=n(il,"UL",{});var le=s(ne);HF=n(le,"LI",{});var U7e=s(HF);h_e=n(U7e,"STRONG",{});var vgt=s(h_e);Gnr=r(vgt,"albert"),vgt.forEach(t),Onr=r(U7e," \u2014 "),UX=n(U7e,"A",{href:!0});var Fgt=s(UX);Vnr=r(Fgt,"TFAlbertForPreTraining"),Fgt.forEach(t),Xnr=r(U7e," (ALBERT model)"),U7e.forEach(t),znr=i(le),UF=n(le,"LI",{});var J7e=s(UF);p_e=n(J7e,"STRONG",{});var Tgt=s(p_e);Qnr=r(Tgt,"bart"),Tgt.forEach(t),Wnr=r(J7e," \u2014 "),JX=n(J7e,"A",{href:!0});var Mgt=s(JX);Hnr=r(Mgt,"TFBartForConditionalGeneration"),Mgt.forEach(t),Unr=r(J7e," (BART model)"),J7e.forEach(t),Jnr=i(le),JF=n(le,"LI",{});var Y7e=s(JF);u_e=n(Y7e,"STRONG",{});var Egt=s(u_e);Ynr=r(Egt,"bert"),Egt.forEach(t),Knr=r(Y7e," \u2014 "),YX=n(Y7e,"A",{href:!0});var Cgt=s(YX);Znr=r(Cgt,"TFBertForPreTraining"),Cgt.forEach(t),esr=r(Y7e," (BERT model)"),Y7e.forEach(t),osr=i(le),YF=n(le,"LI",{});var K7e=s(YF);__e=n(K7e,"STRONG",{});var wgt=s(__e);rsr=r(wgt,"camembert"),wgt.forEach(t),tsr=r(K7e," \u2014 "),KX=n(K7e,"A",{href:!0});var Agt=s(KX);asr=r(Agt,"TFCamembertForMaskedLM"),Agt.forEach(t),nsr=r(K7e," (CamemBERT model)"),K7e.forEach(t),ssr=i(le),KF=n(le,"LI",{});var Z7e=s(KF);b_e=n(Z7e,"STRONG",{});var ygt=s(b_e);lsr=r(ygt,"ctrl"),ygt.forEach(t),isr=r(Z7e," \u2014 "),ZX=n(Z7e,"A",{href:!0});var Lgt=s(ZX);dsr=r(Lgt,"TFCTRLLMHeadModel"),Lgt.forEach(t),csr=r(Z7e," (CTRL model)"),Z7e.forEach(t),fsr=i(le),ZF=n(le,"LI",{});var exe=s(ZF);v_e=n(exe,"STRONG",{});var xgt=s(v_e);msr=r(xgt,"distilbert"),xgt.forEach(t),gsr=r(exe," \u2014 "),ez=n(exe,"A",{href:!0});var $gt=s(ez);hsr=r($gt,"TFDistilBertForMaskedLM"),$gt.forEach(t),psr=r(exe," (DistilBERT model)"),exe.forEach(t),usr=i(le),e6=n(le,"LI",{});var oxe=s(e6);F_e=n(oxe,"STRONG",{});var kgt=s(F_e);_sr=r(kgt,"electra"),kgt.forEach(t),bsr=r(oxe," \u2014 "),oz=n(oxe,"A",{href:!0});var Sgt=s(oz);vsr=r(Sgt,"TFElectraForPreTraining"),Sgt.forEach(t),Fsr=r(oxe," (ELECTRA model)"),oxe.forEach(t),Tsr=i(le),o6=n(le,"LI",{});var rxe=s(o6);T_e=n(rxe,"STRONG",{});var Rgt=s(T_e);Msr=r(Rgt,"flaubert"),Rgt.forEach(t),Esr=r(rxe," \u2014 "),rz=n(rxe,"A",{href:!0});var Bgt=s(rz);Csr=r(Bgt,"TFFlaubertWithLMHeadModel"),Bgt.forEach(t),wsr=r(rxe," (FlauBERT model)"),rxe.forEach(t),Asr=i(le),r6=n(le,"LI",{});var txe=s(r6);M_e=n(txe,"STRONG",{});var Pgt=s(M_e);ysr=r(Pgt,"funnel"),Pgt.forEach(t),Lsr=r(txe," \u2014 "),tz=n(txe,"A",{href:!0});var Igt=s(tz);xsr=r(Igt,"TFFunnelForPreTraining"),Igt.forEach(t),$sr=r(txe," (Funnel Transformer model)"),txe.forEach(t),ksr=i(le),t6=n(le,"LI",{});var axe=s(t6);E_e=n(axe,"STRONG",{});var qgt=s(E_e);Ssr=r(qgt,"gpt2"),qgt.forEach(t),Rsr=r(axe," \u2014 "),az=n(axe,"A",{href:!0});var Ngt=s(az);Bsr=r(Ngt,"TFGPT2LMHeadModel"),Ngt.forEach(t),Psr=r(axe," (OpenAI GPT-2 model)"),axe.forEach(t),Isr=i(le),a6=n(le,"LI",{});var nxe=s(a6);C_e=n(nxe,"STRONG",{});var jgt=s(C_e);qsr=r(jgt,"layoutlm"),jgt.forEach(t),Nsr=r(nxe," \u2014 "),nz=n(nxe,"A",{href:!0});var Dgt=s(nz);jsr=r(Dgt,"TFLayoutLMForMaskedLM"),Dgt.forEach(t),Dsr=r(nxe," (LayoutLM model)"),nxe.forEach(t),Gsr=i(le),n6=n(le,"LI",{});var sxe=s(n6);w_e=n(sxe,"STRONG",{});var Ggt=s(w_e);Osr=r(Ggt,"lxmert"),Ggt.forEach(t),Vsr=r(sxe," \u2014 "),sz=n(sxe,"A",{href:!0});var Ogt=s(sz);Xsr=r(Ogt,"TFLxmertForPreTraining"),Ogt.forEach(t),zsr=r(sxe," (LXMERT model)"),sxe.forEach(t),Qsr=i(le),s6=n(le,"LI",{});var lxe=s(s6);A_e=n(lxe,"STRONG",{});var Vgt=s(A_e);Wsr=r(Vgt,"mobilebert"),Vgt.forEach(t),Hsr=r(lxe," \u2014 "),lz=n(lxe,"A",{href:!0});var Xgt=s(lz);Usr=r(Xgt,"TFMobileBertForPreTraining"),Xgt.forEach(t),Jsr=r(lxe," (MobileBERT model)"),lxe.forEach(t),Ysr=i(le),l6=n(le,"LI",{});var ixe=s(l6);y_e=n(ixe,"STRONG",{});var zgt=s(y_e);Ksr=r(zgt,"mpnet"),zgt.forEach(t),Zsr=r(ixe," \u2014 "),iz=n(ixe,"A",{href:!0});var Qgt=s(iz);elr=r(Qgt,"TFMPNetForMaskedLM"),Qgt.forEach(t),olr=r(ixe," (MPNet model)"),ixe.forEach(t),rlr=i(le),i6=n(le,"LI",{});var dxe=s(i6);L_e=n(dxe,"STRONG",{});var Wgt=s(L_e);tlr=r(Wgt,"openai-gpt"),Wgt.forEach(t),alr=r(dxe," \u2014 "),dz=n(dxe,"A",{href:!0});var Hgt=s(dz);nlr=r(Hgt,"TFOpenAIGPTLMHeadModel"),Hgt.forEach(t),slr=r(dxe," (OpenAI GPT model)"),dxe.forEach(t),llr=i(le),d6=n(le,"LI",{});var cxe=s(d6);x_e=n(cxe,"STRONG",{});var Ugt=s(x_e);ilr=r(Ugt,"roberta"),Ugt.forEach(t),dlr=r(cxe," \u2014 "),cz=n(cxe,"A",{href:!0});var Jgt=s(cz);clr=r(Jgt,"TFRobertaForMaskedLM"),Jgt.forEach(t),flr=r(cxe," (RoBERTa model)"),cxe.forEach(t),mlr=i(le),c6=n(le,"LI",{});var fxe=s(c6);$_e=n(fxe,"STRONG",{});var Ygt=s($_e);glr=r(Ygt,"t5"),Ygt.forEach(t),hlr=r(fxe," \u2014 "),fz=n(fxe,"A",{href:!0});var Kgt=s(fz);plr=r(Kgt,"TFT5ForConditionalGeneration"),Kgt.forEach(t),ulr=r(fxe," (T5 model)"),fxe.forEach(t),_lr=i(le),f6=n(le,"LI",{});var mxe=s(f6);k_e=n(mxe,"STRONG",{});var Zgt=s(k_e);blr=r(Zgt,"tapas"),Zgt.forEach(t),vlr=r(mxe," \u2014 "),mz=n(mxe,"A",{href:!0});var eht=s(mz);Flr=r(eht,"TFTapasForMaskedLM"),eht.forEach(t),Tlr=r(mxe," (TAPAS model)"),mxe.forEach(t),Mlr=i(le),m6=n(le,"LI",{});var gxe=s(m6);S_e=n(gxe,"STRONG",{});var oht=s(S_e);Elr=r(oht,"transfo-xl"),oht.forEach(t),Clr=r(gxe," \u2014 "),gz=n(gxe,"A",{href:!0});var rht=s(gz);wlr=r(rht,"TFTransfoXLLMHeadModel"),rht.forEach(t),Alr=r(gxe," (Transformer-XL model)"),gxe.forEach(t),ylr=i(le),g6=n(le,"LI",{});var hxe=s(g6);R_e=n(hxe,"STRONG",{});var tht=s(R_e);Llr=r(tht,"vit_mae"),tht.forEach(t),xlr=r(hxe," \u2014 "),hz=n(hxe,"A",{href:!0});var aht=s(hz);$lr=r(aht,"TFViTMAEForPreTraining"),aht.forEach(t),klr=r(hxe," (ViTMAE model)"),hxe.forEach(t),Slr=i(le),h6=n(le,"LI",{});var pxe=s(h6);B_e=n(pxe,"STRONG",{});var nht=s(B_e);Rlr=r(nht,"xlm"),nht.forEach(t),Blr=r(pxe," \u2014 "),pz=n(pxe,"A",{href:!0});var sht=s(pz);Plr=r(sht,"TFXLMWithLMHeadModel"),sht.forEach(t),Ilr=r(pxe," (XLM model)"),pxe.forEach(t),qlr=i(le),p6=n(le,"LI",{});var uxe=s(p6);P_e=n(uxe,"STRONG",{});var lht=s(P_e);Nlr=r(lht,"xlm-roberta"),lht.forEach(t),jlr=r(uxe," \u2014 "),uz=n(uxe,"A",{href:!0});var iht=s(uz);Dlr=r(iht,"TFXLMRobertaForMaskedLM"),iht.forEach(t),Glr=r(uxe," (XLM-RoBERTa model)"),uxe.forEach(t),Olr=i(le),u6=n(le,"LI",{});var _xe=s(u6);I_e=n(_xe,"STRONG",{});var dht=s(I_e);Vlr=r(dht,"xlnet"),dht.forEach(t),Xlr=r(_xe," \u2014 "),_z=n(_xe,"A",{href:!0});var cht=s(_z);zlr=r(cht,"TFXLNetLMHeadModel"),cht.forEach(t),Qlr=r(_xe," (XLNet model)"),_xe.forEach(t),le.forEach(t),Wlr=i(il),T(_6.$$.fragment,il),il.forEach(t),ll.forEach(t),XBe=i(f),qd=n(f,"H2",{class:!0});var WIe=s(qd);b6=n(WIe,"A",{id:!0,class:!0,href:!0});var fht=s(b6);q_e=n(fht,"SPAN",{});var mht=s(q_e);T(nL.$$.fragment,mht),mht.forEach(t),fht.forEach(t),Hlr=i(WIe),N_e=n(WIe,"SPAN",{});var ght=s(N_e);Ulr=r(ght,"TFAutoModelForCausalLM"),ght.forEach(t),WIe.forEach(t),zBe=i(f),Ko=n(f,"DIV",{class:!0});var dl=s(Ko);T(sL.$$.fragment,dl),Jlr=i(dl),Nd=n(dl,"P",{});var QY=s(Nd);Ylr=r(QY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),bz=n(QY,"A",{href:!0});var hht=s(bz);Klr=r(hht,"from_pretrained()"),hht.forEach(t),Zlr=r(QY," class method or the "),vz=n(QY,"A",{href:!0});var pht=s(vz);eir=r(pht,"from_config()"),pht.forEach(t),oir=r(QY,` class
method.`),QY.forEach(t),rir=i(dl),lL=n(dl,"P",{});var HIe=s(lL);tir=r(HIe,"This class cannot be instantiated directly using "),j_e=n(HIe,"CODE",{});var uht=s(j_e);air=r(uht,"__init__()"),uht.forEach(t),nir=r(HIe," (throws an error)."),HIe.forEach(t),sir=i(dl),wt=n(dl,"DIV",{class:!0});var vw=s(wt);T(iL.$$.fragment,vw),lir=i(vw),D_e=n(vw,"P",{});var _ht=s(D_e);iir=r(_ht,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),_ht.forEach(t),dir=i(vw),jd=n(vw,"P",{});var WY=s(jd);cir=r(WY,`Note:
Loading a model from its configuration file does `),G_e=n(WY,"STRONG",{});var bht=s(G_e);fir=r(bht,"not"),bht.forEach(t),mir=r(WY,` load the model weights. It only affects the
model\u2019s configuration. Use `),Fz=n(WY,"A",{href:!0});var vht=s(Fz);gir=r(vht,"from_pretrained()"),vht.forEach(t),hir=r(WY," to load the model weights."),WY.forEach(t),pir=i(vw),T(v6.$$.fragment,vw),vw.forEach(t),uir=i(dl),wr=n(dl,"DIV",{class:!0});var cl=s(wr);T(dL.$$.fragment,cl),_ir=i(cl),O_e=n(cl,"P",{});var Fht=s(O_e);bir=r(Fht,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Fht.forEach(t),vir=i(cl),Ya=n(cl,"P",{});var Fw=s(Ya);Fir=r(Fw,"The model class to instantiate is selected based on the "),V_e=n(Fw,"CODE",{});var Tht=s(V_e);Tir=r(Tht,"model_type"),Tht.forEach(t),Mir=r(Fw,` property of the config object (either
passed as an argument or loaded from `),X_e=n(Fw,"CODE",{});var Mht=s(X_e);Eir=r(Mht,"pretrained_model_name_or_path"),Mht.forEach(t),Cir=r(Fw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),z_e=n(Fw,"CODE",{});var Eht=s(z_e);wir=r(Eht,"pretrained_model_name_or_path"),Eht.forEach(t),Air=r(Fw,":"),Fw.forEach(t),yir=i(cl),Te=n(cl,"UL",{});var Ce=s(Te);F6=n(Ce,"LI",{});var bxe=s(F6);Q_e=n(bxe,"STRONG",{});var Cht=s(Q_e);Lir=r(Cht,"bert"),Cht.forEach(t),xir=r(bxe," \u2014 "),Tz=n(bxe,"A",{href:!0});var wht=s(Tz);$ir=r(wht,"TFBertLMHeadModel"),wht.forEach(t),kir=r(bxe," (BERT model)"),bxe.forEach(t),Sir=i(Ce),T6=n(Ce,"LI",{});var vxe=s(T6);W_e=n(vxe,"STRONG",{});var Aht=s(W_e);Rir=r(Aht,"camembert"),Aht.forEach(t),Bir=r(vxe," \u2014 "),Mz=n(vxe,"A",{href:!0});var yht=s(Mz);Pir=r(yht,"TFCamembertForCausalLM"),yht.forEach(t),Iir=r(vxe," (CamemBERT model)"),vxe.forEach(t),qir=i(Ce),M6=n(Ce,"LI",{});var Fxe=s(M6);H_e=n(Fxe,"STRONG",{});var Lht=s(H_e);Nir=r(Lht,"ctrl"),Lht.forEach(t),jir=r(Fxe," \u2014 "),Ez=n(Fxe,"A",{href:!0});var xht=s(Ez);Dir=r(xht,"TFCTRLLMHeadModel"),xht.forEach(t),Gir=r(Fxe," (CTRL model)"),Fxe.forEach(t),Oir=i(Ce),E6=n(Ce,"LI",{});var Txe=s(E6);U_e=n(Txe,"STRONG",{});var $ht=s(U_e);Vir=r($ht,"gpt2"),$ht.forEach(t),Xir=r(Txe," \u2014 "),Cz=n(Txe,"A",{href:!0});var kht=s(Cz);zir=r(kht,"TFGPT2LMHeadModel"),kht.forEach(t),Qir=r(Txe," (OpenAI GPT-2 model)"),Txe.forEach(t),Wir=i(Ce),C6=n(Ce,"LI",{});var Mxe=s(C6);J_e=n(Mxe,"STRONG",{});var Sht=s(J_e);Hir=r(Sht,"gptj"),Sht.forEach(t),Uir=r(Mxe," \u2014 "),wz=n(Mxe,"A",{href:!0});var Rht=s(wz);Jir=r(Rht,"TFGPTJForCausalLM"),Rht.forEach(t),Yir=r(Mxe," (GPT-J model)"),Mxe.forEach(t),Kir=i(Ce),w6=n(Ce,"LI",{});var Exe=s(w6);Y_e=n(Exe,"STRONG",{});var Bht=s(Y_e);Zir=r(Bht,"openai-gpt"),Bht.forEach(t),edr=r(Exe," \u2014 "),Az=n(Exe,"A",{href:!0});var Pht=s(Az);odr=r(Pht,"TFOpenAIGPTLMHeadModel"),Pht.forEach(t),rdr=r(Exe," (OpenAI GPT model)"),Exe.forEach(t),tdr=i(Ce),A6=n(Ce,"LI",{});var Cxe=s(A6);K_e=n(Cxe,"STRONG",{});var Iht=s(K_e);adr=r(Iht,"rembert"),Iht.forEach(t),ndr=r(Cxe," \u2014 "),yz=n(Cxe,"A",{href:!0});var qht=s(yz);sdr=r(qht,"TFRemBertForCausalLM"),qht.forEach(t),ldr=r(Cxe," (RemBERT model)"),Cxe.forEach(t),idr=i(Ce),y6=n(Ce,"LI",{});var wxe=s(y6);Z_e=n(wxe,"STRONG",{});var Nht=s(Z_e);ddr=r(Nht,"roberta"),Nht.forEach(t),cdr=r(wxe," \u2014 "),Lz=n(wxe,"A",{href:!0});var jht=s(Lz);fdr=r(jht,"TFRobertaForCausalLM"),jht.forEach(t),mdr=r(wxe," (RoBERTa model)"),wxe.forEach(t),gdr=i(Ce),L6=n(Ce,"LI",{});var Axe=s(L6);e1e=n(Axe,"STRONG",{});var Dht=s(e1e);hdr=r(Dht,"roformer"),Dht.forEach(t),pdr=r(Axe," \u2014 "),xz=n(Axe,"A",{href:!0});var Ght=s(xz);udr=r(Ght,"TFRoFormerForCausalLM"),Ght.forEach(t),_dr=r(Axe," (RoFormer model)"),Axe.forEach(t),bdr=i(Ce),x6=n(Ce,"LI",{});var yxe=s(x6);o1e=n(yxe,"STRONG",{});var Oht=s(o1e);vdr=r(Oht,"transfo-xl"),Oht.forEach(t),Fdr=r(yxe," \u2014 "),$z=n(yxe,"A",{href:!0});var Vht=s($z);Tdr=r(Vht,"TFTransfoXLLMHeadModel"),Vht.forEach(t),Mdr=r(yxe," (Transformer-XL model)"),yxe.forEach(t),Edr=i(Ce),$6=n(Ce,"LI",{});var Lxe=s($6);r1e=n(Lxe,"STRONG",{});var Xht=s(r1e);Cdr=r(Xht,"xlm"),Xht.forEach(t),wdr=r(Lxe," \u2014 "),kz=n(Lxe,"A",{href:!0});var zht=s(kz);Adr=r(zht,"TFXLMWithLMHeadModel"),zht.forEach(t),ydr=r(Lxe," (XLM model)"),Lxe.forEach(t),Ldr=i(Ce),k6=n(Ce,"LI",{});var xxe=s(k6);t1e=n(xxe,"STRONG",{});var Qht=s(t1e);xdr=r(Qht,"xlnet"),Qht.forEach(t),$dr=r(xxe," \u2014 "),Sz=n(xxe,"A",{href:!0});var Wht=s(Sz);kdr=r(Wht,"TFXLNetLMHeadModel"),Wht.forEach(t),Sdr=r(xxe," (XLNet model)"),xxe.forEach(t),Ce.forEach(t),Rdr=i(cl),T(S6.$$.fragment,cl),cl.forEach(t),dl.forEach(t),QBe=i(f),Dd=n(f,"H2",{class:!0});var UIe=s(Dd);R6=n(UIe,"A",{id:!0,class:!0,href:!0});var Hht=s(R6);a1e=n(Hht,"SPAN",{});var Uht=s(a1e);T(cL.$$.fragment,Uht),Uht.forEach(t),Hht.forEach(t),Bdr=i(UIe),n1e=n(UIe,"SPAN",{});var Jht=s(n1e);Pdr=r(Jht,"TFAutoModelForImageClassification"),Jht.forEach(t),UIe.forEach(t),WBe=i(f),Zo=n(f,"DIV",{class:!0});var fl=s(Zo);T(fL.$$.fragment,fl),Idr=i(fl),Gd=n(fl,"P",{});var HY=s(Gd);qdr=r(HY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Rz=n(HY,"A",{href:!0});var Yht=s(Rz);Ndr=r(Yht,"from_pretrained()"),Yht.forEach(t),jdr=r(HY," class method or the "),Bz=n(HY,"A",{href:!0});var Kht=s(Bz);Ddr=r(Kht,"from_config()"),Kht.forEach(t),Gdr=r(HY,` class
method.`),HY.forEach(t),Odr=i(fl),mL=n(fl,"P",{});var JIe=s(mL);Vdr=r(JIe,"This class cannot be instantiated directly using "),s1e=n(JIe,"CODE",{});var Zht=s(s1e);Xdr=r(Zht,"__init__()"),Zht.forEach(t),zdr=r(JIe," (throws an error)."),JIe.forEach(t),Qdr=i(fl),At=n(fl,"DIV",{class:!0});var Tw=s(At);T(gL.$$.fragment,Tw),Wdr=i(Tw),l1e=n(Tw,"P",{});var ept=s(l1e);Hdr=r(ept,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),ept.forEach(t),Udr=i(Tw),Od=n(Tw,"P",{});var UY=s(Od);Jdr=r(UY,`Note:
Loading a model from its configuration file does `),i1e=n(UY,"STRONG",{});var opt=s(i1e);Ydr=r(opt,"not"),opt.forEach(t),Kdr=r(UY,` load the model weights. It only affects the
model\u2019s configuration. Use `),Pz=n(UY,"A",{href:!0});var rpt=s(Pz);Zdr=r(rpt,"from_pretrained()"),rpt.forEach(t),ecr=r(UY," to load the model weights."),UY.forEach(t),ocr=i(Tw),T(B6.$$.fragment,Tw),Tw.forEach(t),rcr=i(fl),Ar=n(fl,"DIV",{class:!0});var ml=s(Ar);T(hL.$$.fragment,ml),tcr=i(ml),d1e=n(ml,"P",{});var tpt=s(d1e);acr=r(tpt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),tpt.forEach(t),ncr=i(ml),Ka=n(ml,"P",{});var Mw=s(Ka);scr=r(Mw,"The model class to instantiate is selected based on the "),c1e=n(Mw,"CODE",{});var apt=s(c1e);lcr=r(apt,"model_type"),apt.forEach(t),icr=r(Mw,` property of the config object (either
passed as an argument or loaded from `),f1e=n(Mw,"CODE",{});var npt=s(f1e);dcr=r(npt,"pretrained_model_name_or_path"),npt.forEach(t),ccr=r(Mw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),m1e=n(Mw,"CODE",{});var spt=s(m1e);fcr=r(spt,"pretrained_model_name_or_path"),spt.forEach(t),mcr=r(Mw,":"),Mw.forEach(t),gcr=i(ml),pL=n(ml,"UL",{});var YIe=s(pL);P6=n(YIe,"LI",{});var $xe=s(P6);g1e=n($xe,"STRONG",{});var lpt=s(g1e);hcr=r(lpt,"convnext"),lpt.forEach(t),pcr=r($xe," \u2014 "),Iz=n($xe,"A",{href:!0});var ipt=s(Iz);ucr=r(ipt,"TFConvNextForImageClassification"),ipt.forEach(t),_cr=r($xe," (ConvNext model)"),$xe.forEach(t),bcr=i(YIe),I6=n(YIe,"LI",{});var kxe=s(I6);h1e=n(kxe,"STRONG",{});var dpt=s(h1e);vcr=r(dpt,"vit"),dpt.forEach(t),Fcr=r(kxe," \u2014 "),qz=n(kxe,"A",{href:!0});var cpt=s(qz);Tcr=r(cpt,"TFViTForImageClassification"),cpt.forEach(t),Mcr=r(kxe," (ViT model)"),kxe.forEach(t),YIe.forEach(t),Ecr=i(ml),T(q6.$$.fragment,ml),ml.forEach(t),fl.forEach(t),HBe=i(f),Vd=n(f,"H2",{class:!0});var KIe=s(Vd);N6=n(KIe,"A",{id:!0,class:!0,href:!0});var fpt=s(N6);p1e=n(fpt,"SPAN",{});var mpt=s(p1e);T(uL.$$.fragment,mpt),mpt.forEach(t),fpt.forEach(t),Ccr=i(KIe),u1e=n(KIe,"SPAN",{});var gpt=s(u1e);wcr=r(gpt,"TFAutoModelForMaskedLM"),gpt.forEach(t),KIe.forEach(t),UBe=i(f),er=n(f,"DIV",{class:!0});var gl=s(er);T(_L.$$.fragment,gl),Acr=i(gl),Xd=n(gl,"P",{});var JY=s(Xd);ycr=r(JY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Nz=n(JY,"A",{href:!0});var hpt=s(Nz);Lcr=r(hpt,"from_pretrained()"),hpt.forEach(t),xcr=r(JY," class method or the "),jz=n(JY,"A",{href:!0});var ppt=s(jz);$cr=r(ppt,"from_config()"),ppt.forEach(t),kcr=r(JY,` class
method.`),JY.forEach(t),Scr=i(gl),bL=n(gl,"P",{});var ZIe=s(bL);Rcr=r(ZIe,"This class cannot be instantiated directly using "),_1e=n(ZIe,"CODE",{});var upt=s(_1e);Bcr=r(upt,"__init__()"),upt.forEach(t),Pcr=r(ZIe," (throws an error)."),ZIe.forEach(t),Icr=i(gl),yt=n(gl,"DIV",{class:!0});var Ew=s(yt);T(vL.$$.fragment,Ew),qcr=i(Ew),b1e=n(Ew,"P",{});var _pt=s(b1e);Ncr=r(_pt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),_pt.forEach(t),jcr=i(Ew),zd=n(Ew,"P",{});var YY=s(zd);Dcr=r(YY,`Note:
Loading a model from its configuration file does `),v1e=n(YY,"STRONG",{});var bpt=s(v1e);Gcr=r(bpt,"not"),bpt.forEach(t),Ocr=r(YY,` load the model weights. It only affects the
model\u2019s configuration. Use `),Dz=n(YY,"A",{href:!0});var vpt=s(Dz);Vcr=r(vpt,"from_pretrained()"),vpt.forEach(t),Xcr=r(YY," to load the model weights."),YY.forEach(t),zcr=i(Ew),T(j6.$$.fragment,Ew),Ew.forEach(t),Qcr=i(gl),yr=n(gl,"DIV",{class:!0});var hl=s(yr);T(FL.$$.fragment,hl),Wcr=i(hl),F1e=n(hl,"P",{});var Fpt=s(F1e);Hcr=r(Fpt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Fpt.forEach(t),Ucr=i(hl),Za=n(hl,"P",{});var Cw=s(Za);Jcr=r(Cw,"The model class to instantiate is selected based on the "),T1e=n(Cw,"CODE",{});var Tpt=s(T1e);Ycr=r(Tpt,"model_type"),Tpt.forEach(t),Kcr=r(Cw,` property of the config object (either
passed as an argument or loaded from `),M1e=n(Cw,"CODE",{});var Mpt=s(M1e);Zcr=r(Mpt,"pretrained_model_name_or_path"),Mpt.forEach(t),efr=r(Cw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),E1e=n(Cw,"CODE",{});var Ept=s(E1e);ofr=r(Ept,"pretrained_model_name_or_path"),Ept.forEach(t),rfr=r(Cw,":"),Cw.forEach(t),tfr=i(hl),ie=n(hl,"UL",{});var fe=s(ie);D6=n(fe,"LI",{});var Sxe=s(D6);C1e=n(Sxe,"STRONG",{});var Cpt=s(C1e);afr=r(Cpt,"albert"),Cpt.forEach(t),nfr=r(Sxe," \u2014 "),Gz=n(Sxe,"A",{href:!0});var wpt=s(Gz);sfr=r(wpt,"TFAlbertForMaskedLM"),wpt.forEach(t),lfr=r(Sxe," (ALBERT model)"),Sxe.forEach(t),ifr=i(fe),G6=n(fe,"LI",{});var Rxe=s(G6);w1e=n(Rxe,"STRONG",{});var Apt=s(w1e);dfr=r(Apt,"bert"),Apt.forEach(t),cfr=r(Rxe," \u2014 "),Oz=n(Rxe,"A",{href:!0});var ypt=s(Oz);ffr=r(ypt,"TFBertForMaskedLM"),ypt.forEach(t),mfr=r(Rxe," (BERT model)"),Rxe.forEach(t),gfr=i(fe),O6=n(fe,"LI",{});var Bxe=s(O6);A1e=n(Bxe,"STRONG",{});var Lpt=s(A1e);hfr=r(Lpt,"camembert"),Lpt.forEach(t),pfr=r(Bxe," \u2014 "),Vz=n(Bxe,"A",{href:!0});var xpt=s(Vz);ufr=r(xpt,"TFCamembertForMaskedLM"),xpt.forEach(t),_fr=r(Bxe," (CamemBERT model)"),Bxe.forEach(t),bfr=i(fe),V6=n(fe,"LI",{});var Pxe=s(V6);y1e=n(Pxe,"STRONG",{});var $pt=s(y1e);vfr=r($pt,"convbert"),$pt.forEach(t),Ffr=r(Pxe," \u2014 "),Xz=n(Pxe,"A",{href:!0});var kpt=s(Xz);Tfr=r(kpt,"TFConvBertForMaskedLM"),kpt.forEach(t),Mfr=r(Pxe," (ConvBERT model)"),Pxe.forEach(t),Efr=i(fe),X6=n(fe,"LI",{});var Ixe=s(X6);L1e=n(Ixe,"STRONG",{});var Spt=s(L1e);Cfr=r(Spt,"deberta"),Spt.forEach(t),wfr=r(Ixe," \u2014 "),zz=n(Ixe,"A",{href:!0});var Rpt=s(zz);Afr=r(Rpt,"TFDebertaForMaskedLM"),Rpt.forEach(t),yfr=r(Ixe," (DeBERTa model)"),Ixe.forEach(t),Lfr=i(fe),z6=n(fe,"LI",{});var qxe=s(z6);x1e=n(qxe,"STRONG",{});var Bpt=s(x1e);xfr=r(Bpt,"deberta-v2"),Bpt.forEach(t),$fr=r(qxe," \u2014 "),Qz=n(qxe,"A",{href:!0});var Ppt=s(Qz);kfr=r(Ppt,"TFDebertaV2ForMaskedLM"),Ppt.forEach(t),Sfr=r(qxe," (DeBERTa-v2 model)"),qxe.forEach(t),Rfr=i(fe),Q6=n(fe,"LI",{});var Nxe=s(Q6);$1e=n(Nxe,"STRONG",{});var Ipt=s($1e);Bfr=r(Ipt,"distilbert"),Ipt.forEach(t),Pfr=r(Nxe," \u2014 "),Wz=n(Nxe,"A",{href:!0});var qpt=s(Wz);Ifr=r(qpt,"TFDistilBertForMaskedLM"),qpt.forEach(t),qfr=r(Nxe," (DistilBERT model)"),Nxe.forEach(t),Nfr=i(fe),W6=n(fe,"LI",{});var jxe=s(W6);k1e=n(jxe,"STRONG",{});var Npt=s(k1e);jfr=r(Npt,"electra"),Npt.forEach(t),Dfr=r(jxe," \u2014 "),Hz=n(jxe,"A",{href:!0});var jpt=s(Hz);Gfr=r(jpt,"TFElectraForMaskedLM"),jpt.forEach(t),Ofr=r(jxe," (ELECTRA model)"),jxe.forEach(t),Vfr=i(fe),H6=n(fe,"LI",{});var Dxe=s(H6);S1e=n(Dxe,"STRONG",{});var Dpt=s(S1e);Xfr=r(Dpt,"flaubert"),Dpt.forEach(t),zfr=r(Dxe," \u2014 "),Uz=n(Dxe,"A",{href:!0});var Gpt=s(Uz);Qfr=r(Gpt,"TFFlaubertWithLMHeadModel"),Gpt.forEach(t),Wfr=r(Dxe," (FlauBERT model)"),Dxe.forEach(t),Hfr=i(fe),U6=n(fe,"LI",{});var Gxe=s(U6);R1e=n(Gxe,"STRONG",{});var Opt=s(R1e);Ufr=r(Opt,"funnel"),Opt.forEach(t),Jfr=r(Gxe," \u2014 "),Jz=n(Gxe,"A",{href:!0});var Vpt=s(Jz);Yfr=r(Vpt,"TFFunnelForMaskedLM"),Vpt.forEach(t),Kfr=r(Gxe," (Funnel Transformer model)"),Gxe.forEach(t),Zfr=i(fe),J6=n(fe,"LI",{});var Oxe=s(J6);B1e=n(Oxe,"STRONG",{});var Xpt=s(B1e);emr=r(Xpt,"layoutlm"),Xpt.forEach(t),omr=r(Oxe," \u2014 "),Yz=n(Oxe,"A",{href:!0});var zpt=s(Yz);rmr=r(zpt,"TFLayoutLMForMaskedLM"),zpt.forEach(t),tmr=r(Oxe," (LayoutLM model)"),Oxe.forEach(t),amr=i(fe),Y6=n(fe,"LI",{});var Vxe=s(Y6);P1e=n(Vxe,"STRONG",{});var Qpt=s(P1e);nmr=r(Qpt,"longformer"),Qpt.forEach(t),smr=r(Vxe," \u2014 "),Kz=n(Vxe,"A",{href:!0});var Wpt=s(Kz);lmr=r(Wpt,"TFLongformerForMaskedLM"),Wpt.forEach(t),imr=r(Vxe," (Longformer model)"),Vxe.forEach(t),dmr=i(fe),K6=n(fe,"LI",{});var Xxe=s(K6);I1e=n(Xxe,"STRONG",{});var Hpt=s(I1e);cmr=r(Hpt,"mobilebert"),Hpt.forEach(t),fmr=r(Xxe," \u2014 "),Zz=n(Xxe,"A",{href:!0});var Upt=s(Zz);mmr=r(Upt,"TFMobileBertForMaskedLM"),Upt.forEach(t),gmr=r(Xxe," (MobileBERT model)"),Xxe.forEach(t),hmr=i(fe),Z6=n(fe,"LI",{});var zxe=s(Z6);q1e=n(zxe,"STRONG",{});var Jpt=s(q1e);pmr=r(Jpt,"mpnet"),Jpt.forEach(t),umr=r(zxe," \u2014 "),eQ=n(zxe,"A",{href:!0});var Ypt=s(eQ);_mr=r(Ypt,"TFMPNetForMaskedLM"),Ypt.forEach(t),bmr=r(zxe," (MPNet model)"),zxe.forEach(t),vmr=i(fe),eT=n(fe,"LI",{});var Qxe=s(eT);N1e=n(Qxe,"STRONG",{});var Kpt=s(N1e);Fmr=r(Kpt,"rembert"),Kpt.forEach(t),Tmr=r(Qxe," \u2014 "),oQ=n(Qxe,"A",{href:!0});var Zpt=s(oQ);Mmr=r(Zpt,"TFRemBertForMaskedLM"),Zpt.forEach(t),Emr=r(Qxe," (RemBERT model)"),Qxe.forEach(t),Cmr=i(fe),oT=n(fe,"LI",{});var Wxe=s(oT);j1e=n(Wxe,"STRONG",{});var eut=s(j1e);wmr=r(eut,"roberta"),eut.forEach(t),Amr=r(Wxe," \u2014 "),rQ=n(Wxe,"A",{href:!0});var out=s(rQ);ymr=r(out,"TFRobertaForMaskedLM"),out.forEach(t),Lmr=r(Wxe," (RoBERTa model)"),Wxe.forEach(t),xmr=i(fe),rT=n(fe,"LI",{});var Hxe=s(rT);D1e=n(Hxe,"STRONG",{});var rut=s(D1e);$mr=r(rut,"roformer"),rut.forEach(t),kmr=r(Hxe," \u2014 "),tQ=n(Hxe,"A",{href:!0});var tut=s(tQ);Smr=r(tut,"TFRoFormerForMaskedLM"),tut.forEach(t),Rmr=r(Hxe," (RoFormer model)"),Hxe.forEach(t),Bmr=i(fe),tT=n(fe,"LI",{});var Uxe=s(tT);G1e=n(Uxe,"STRONG",{});var aut=s(G1e);Pmr=r(aut,"tapas"),aut.forEach(t),Imr=r(Uxe," \u2014 "),aQ=n(Uxe,"A",{href:!0});var nut=s(aQ);qmr=r(nut,"TFTapasForMaskedLM"),nut.forEach(t),Nmr=r(Uxe," (TAPAS model)"),Uxe.forEach(t),jmr=i(fe),aT=n(fe,"LI",{});var Jxe=s(aT);O1e=n(Jxe,"STRONG",{});var sut=s(O1e);Dmr=r(sut,"xlm"),sut.forEach(t),Gmr=r(Jxe," \u2014 "),nQ=n(Jxe,"A",{href:!0});var lut=s(nQ);Omr=r(lut,"TFXLMWithLMHeadModel"),lut.forEach(t),Vmr=r(Jxe," (XLM model)"),Jxe.forEach(t),Xmr=i(fe),nT=n(fe,"LI",{});var Yxe=s(nT);V1e=n(Yxe,"STRONG",{});var iut=s(V1e);zmr=r(iut,"xlm-roberta"),iut.forEach(t),Qmr=r(Yxe," \u2014 "),sQ=n(Yxe,"A",{href:!0});var dut=s(sQ);Wmr=r(dut,"TFXLMRobertaForMaskedLM"),dut.forEach(t),Hmr=r(Yxe," (XLM-RoBERTa model)"),Yxe.forEach(t),fe.forEach(t),Umr=i(hl),T(sT.$$.fragment,hl),hl.forEach(t),gl.forEach(t),JBe=i(f),Qd=n(f,"H2",{class:!0});var eqe=s(Qd);lT=n(eqe,"A",{id:!0,class:!0,href:!0});var cut=s(lT);X1e=n(cut,"SPAN",{});var fut=s(X1e);T(TL.$$.fragment,fut),fut.forEach(t),cut.forEach(t),Jmr=i(eqe),z1e=n(eqe,"SPAN",{});var mut=s(z1e);Ymr=r(mut,"TFAutoModelForSeq2SeqLM"),mut.forEach(t),eqe.forEach(t),YBe=i(f),or=n(f,"DIV",{class:!0});var pl=s(or);T(ML.$$.fragment,pl),Kmr=i(pl),Wd=n(pl,"P",{});var KY=s(Wd);Zmr=r(KY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),lQ=n(KY,"A",{href:!0});var gut=s(lQ);egr=r(gut,"from_pretrained()"),gut.forEach(t),ogr=r(KY," class method or the "),iQ=n(KY,"A",{href:!0});var hut=s(iQ);rgr=r(hut,"from_config()"),hut.forEach(t),tgr=r(KY,` class
method.`),KY.forEach(t),agr=i(pl),EL=n(pl,"P",{});var oqe=s(EL);ngr=r(oqe,"This class cannot be instantiated directly using "),Q1e=n(oqe,"CODE",{});var put=s(Q1e);sgr=r(put,"__init__()"),put.forEach(t),lgr=r(oqe," (throws an error)."),oqe.forEach(t),igr=i(pl),Lt=n(pl,"DIV",{class:!0});var ww=s(Lt);T(CL.$$.fragment,ww),dgr=i(ww),W1e=n(ww,"P",{});var uut=s(W1e);cgr=r(uut,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),uut.forEach(t),fgr=i(ww),Hd=n(ww,"P",{});var ZY=s(Hd);mgr=r(ZY,`Note:
Loading a model from its configuration file does `),H1e=n(ZY,"STRONG",{});var _ut=s(H1e);ggr=r(_ut,"not"),_ut.forEach(t),hgr=r(ZY,` load the model weights. It only affects the
model\u2019s configuration. Use `),dQ=n(ZY,"A",{href:!0});var but=s(dQ);pgr=r(but,"from_pretrained()"),but.forEach(t),ugr=r(ZY," to load the model weights."),ZY.forEach(t),_gr=i(ww),T(iT.$$.fragment,ww),ww.forEach(t),bgr=i(pl),Lr=n(pl,"DIV",{class:!0});var ul=s(Lr);T(wL.$$.fragment,ul),vgr=i(ul),U1e=n(ul,"P",{});var vut=s(U1e);Fgr=r(vut,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),vut.forEach(t),Tgr=i(ul),en=n(ul,"P",{});var Aw=s(en);Mgr=r(Aw,"The model class to instantiate is selected based on the "),J1e=n(Aw,"CODE",{});var Fut=s(J1e);Egr=r(Fut,"model_type"),Fut.forEach(t),Cgr=r(Aw,` property of the config object (either
passed as an argument or loaded from `),Y1e=n(Aw,"CODE",{});var Tut=s(Y1e);wgr=r(Tut,"pretrained_model_name_or_path"),Tut.forEach(t),Agr=r(Aw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),K1e=n(Aw,"CODE",{});var Mut=s(K1e);ygr=r(Mut,"pretrained_model_name_or_path"),Mut.forEach(t),Lgr=r(Aw,":"),Aw.forEach(t),xgr=i(ul),ye=n(ul,"UL",{});var Se=s(ye);dT=n(Se,"LI",{});var Kxe=s(dT);Z1e=n(Kxe,"STRONG",{});var Eut=s(Z1e);$gr=r(Eut,"bart"),Eut.forEach(t),kgr=r(Kxe," \u2014 "),cQ=n(Kxe,"A",{href:!0});var Cut=s(cQ);Sgr=r(Cut,"TFBartForConditionalGeneration"),Cut.forEach(t),Rgr=r(Kxe," (BART model)"),Kxe.forEach(t),Bgr=i(Se),cT=n(Se,"LI",{});var Zxe=s(cT);e9e=n(Zxe,"STRONG",{});var wut=s(e9e);Pgr=r(wut,"blenderbot"),wut.forEach(t),Igr=r(Zxe," \u2014 "),fQ=n(Zxe,"A",{href:!0});var Aut=s(fQ);qgr=r(Aut,"TFBlenderbotForConditionalGeneration"),Aut.forEach(t),Ngr=r(Zxe," (Blenderbot model)"),Zxe.forEach(t),jgr=i(Se),fT=n(Se,"LI",{});var e$e=s(fT);o9e=n(e$e,"STRONG",{});var yut=s(o9e);Dgr=r(yut,"blenderbot-small"),yut.forEach(t),Ggr=r(e$e," \u2014 "),mQ=n(e$e,"A",{href:!0});var Lut=s(mQ);Ogr=r(Lut,"TFBlenderbotSmallForConditionalGeneration"),Lut.forEach(t),Vgr=r(e$e," (BlenderbotSmall model)"),e$e.forEach(t),Xgr=i(Se),mT=n(Se,"LI",{});var o$e=s(mT);r9e=n(o$e,"STRONG",{});var xut=s(r9e);zgr=r(xut,"encoder-decoder"),xut.forEach(t),Qgr=r(o$e," \u2014 "),gQ=n(o$e,"A",{href:!0});var $ut=s(gQ);Wgr=r($ut,"TFEncoderDecoderModel"),$ut.forEach(t),Hgr=r(o$e," (Encoder decoder model)"),o$e.forEach(t),Ugr=i(Se),gT=n(Se,"LI",{});var r$e=s(gT);t9e=n(r$e,"STRONG",{});var kut=s(t9e);Jgr=r(kut,"led"),kut.forEach(t),Ygr=r(r$e," \u2014 "),hQ=n(r$e,"A",{href:!0});var Sut=s(hQ);Kgr=r(Sut,"TFLEDForConditionalGeneration"),Sut.forEach(t),Zgr=r(r$e," (LED model)"),r$e.forEach(t),ehr=i(Se),hT=n(Se,"LI",{});var t$e=s(hT);a9e=n(t$e,"STRONG",{});var Rut=s(a9e);ohr=r(Rut,"marian"),Rut.forEach(t),rhr=r(t$e," \u2014 "),pQ=n(t$e,"A",{href:!0});var But=s(pQ);thr=r(But,"TFMarianMTModel"),But.forEach(t),ahr=r(t$e," (Marian model)"),t$e.forEach(t),nhr=i(Se),pT=n(Se,"LI",{});var a$e=s(pT);n9e=n(a$e,"STRONG",{});var Put=s(n9e);shr=r(Put,"mbart"),Put.forEach(t),lhr=r(a$e," \u2014 "),uQ=n(a$e,"A",{href:!0});var Iut=s(uQ);ihr=r(Iut,"TFMBartForConditionalGeneration"),Iut.forEach(t),dhr=r(a$e," (mBART model)"),a$e.forEach(t),chr=i(Se),uT=n(Se,"LI",{});var n$e=s(uT);s9e=n(n$e,"STRONG",{});var qut=s(s9e);fhr=r(qut,"mt5"),qut.forEach(t),mhr=r(n$e," \u2014 "),_Q=n(n$e,"A",{href:!0});var Nut=s(_Q);ghr=r(Nut,"TFMT5ForConditionalGeneration"),Nut.forEach(t),hhr=r(n$e," (mT5 model)"),n$e.forEach(t),phr=i(Se),_T=n(Se,"LI",{});var s$e=s(_T);l9e=n(s$e,"STRONG",{});var jut=s(l9e);uhr=r(jut,"pegasus"),jut.forEach(t),_hr=r(s$e," \u2014 "),bQ=n(s$e,"A",{href:!0});var Dut=s(bQ);bhr=r(Dut,"TFPegasusForConditionalGeneration"),Dut.forEach(t),vhr=r(s$e," (Pegasus model)"),s$e.forEach(t),Fhr=i(Se),bT=n(Se,"LI",{});var l$e=s(bT);i9e=n(l$e,"STRONG",{});var Gut=s(i9e);Thr=r(Gut,"t5"),Gut.forEach(t),Mhr=r(l$e," \u2014 "),vQ=n(l$e,"A",{href:!0});var Out=s(vQ);Ehr=r(Out,"TFT5ForConditionalGeneration"),Out.forEach(t),Chr=r(l$e," (T5 model)"),l$e.forEach(t),Se.forEach(t),whr=i(ul),T(vT.$$.fragment,ul),ul.forEach(t),pl.forEach(t),KBe=i(f),Ud=n(f,"H2",{class:!0});var rqe=s(Ud);FT=n(rqe,"A",{id:!0,class:!0,href:!0});var Vut=s(FT);d9e=n(Vut,"SPAN",{});var Xut=s(d9e);T(AL.$$.fragment,Xut),Xut.forEach(t),Vut.forEach(t),Ahr=i(rqe),c9e=n(rqe,"SPAN",{});var zut=s(c9e);yhr=r(zut,"TFAutoModelForSequenceClassification"),zut.forEach(t),rqe.forEach(t),ZBe=i(f),rr=n(f,"DIV",{class:!0});var _l=s(rr);T(yL.$$.fragment,_l),Lhr=i(_l),Jd=n(_l,"P",{});var eK=s(Jd);xhr=r(eK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),FQ=n(eK,"A",{href:!0});var Qut=s(FQ);$hr=r(Qut,"from_pretrained()"),Qut.forEach(t),khr=r(eK," class method or the "),TQ=n(eK,"A",{href:!0});var Wut=s(TQ);Shr=r(Wut,"from_config()"),Wut.forEach(t),Rhr=r(eK,` class
method.`),eK.forEach(t),Bhr=i(_l),LL=n(_l,"P",{});var tqe=s(LL);Phr=r(tqe,"This class cannot be instantiated directly using "),f9e=n(tqe,"CODE",{});var Hut=s(f9e);Ihr=r(Hut,"__init__()"),Hut.forEach(t),qhr=r(tqe," (throws an error)."),tqe.forEach(t),Nhr=i(_l),xt=n(_l,"DIV",{class:!0});var yw=s(xt);T(xL.$$.fragment,yw),jhr=i(yw),m9e=n(yw,"P",{});var Uut=s(m9e);Dhr=r(Uut,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Uut.forEach(t),Ghr=i(yw),Yd=n(yw,"P",{});var oK=s(Yd);Ohr=r(oK,`Note:
Loading a model from its configuration file does `),g9e=n(oK,"STRONG",{});var Jut=s(g9e);Vhr=r(Jut,"not"),Jut.forEach(t),Xhr=r(oK,` load the model weights. It only affects the
model\u2019s configuration. Use `),MQ=n(oK,"A",{href:!0});var Yut=s(MQ);zhr=r(Yut,"from_pretrained()"),Yut.forEach(t),Qhr=r(oK," to load the model weights."),oK.forEach(t),Whr=i(yw),T(TT.$$.fragment,yw),yw.forEach(t),Hhr=i(_l),xr=n(_l,"DIV",{class:!0});var bl=s(xr);T($L.$$.fragment,bl),Uhr=i(bl),h9e=n(bl,"P",{});var Kut=s(h9e);Jhr=r(Kut,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Kut.forEach(t),Yhr=i(bl),on=n(bl,"P",{});var Lw=s(on);Khr=r(Lw,"The model class to instantiate is selected based on the "),p9e=n(Lw,"CODE",{});var Zut=s(p9e);Zhr=r(Zut,"model_type"),Zut.forEach(t),epr=r(Lw,` property of the config object (either
passed as an argument or loaded from `),u9e=n(Lw,"CODE",{});var e_t=s(u9e);opr=r(e_t,"pretrained_model_name_or_path"),e_t.forEach(t),rpr=r(Lw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_9e=n(Lw,"CODE",{});var o_t=s(_9e);tpr=r(o_t,"pretrained_model_name_or_path"),o_t.forEach(t),apr=r(Lw,":"),Lw.forEach(t),npr=i(bl),Z=n(bl,"UL",{});var re=s(Z);MT=n(re,"LI",{});var i$e=s(MT);b9e=n(i$e,"STRONG",{});var r_t=s(b9e);spr=r(r_t,"albert"),r_t.forEach(t),lpr=r(i$e," \u2014 "),EQ=n(i$e,"A",{href:!0});var t_t=s(EQ);ipr=r(t_t,"TFAlbertForSequenceClassification"),t_t.forEach(t),dpr=r(i$e," (ALBERT model)"),i$e.forEach(t),cpr=i(re),ET=n(re,"LI",{});var d$e=s(ET);v9e=n(d$e,"STRONG",{});var a_t=s(v9e);fpr=r(a_t,"bert"),a_t.forEach(t),mpr=r(d$e," \u2014 "),CQ=n(d$e,"A",{href:!0});var n_t=s(CQ);gpr=r(n_t,"TFBertForSequenceClassification"),n_t.forEach(t),hpr=r(d$e," (BERT model)"),d$e.forEach(t),ppr=i(re),CT=n(re,"LI",{});var c$e=s(CT);F9e=n(c$e,"STRONG",{});var s_t=s(F9e);upr=r(s_t,"camembert"),s_t.forEach(t),_pr=r(c$e," \u2014 "),wQ=n(c$e,"A",{href:!0});var l_t=s(wQ);bpr=r(l_t,"TFCamembertForSequenceClassification"),l_t.forEach(t),vpr=r(c$e," (CamemBERT model)"),c$e.forEach(t),Fpr=i(re),wT=n(re,"LI",{});var f$e=s(wT);T9e=n(f$e,"STRONG",{});var i_t=s(T9e);Tpr=r(i_t,"convbert"),i_t.forEach(t),Mpr=r(f$e," \u2014 "),AQ=n(f$e,"A",{href:!0});var d_t=s(AQ);Epr=r(d_t,"TFConvBertForSequenceClassification"),d_t.forEach(t),Cpr=r(f$e," (ConvBERT model)"),f$e.forEach(t),wpr=i(re),AT=n(re,"LI",{});var m$e=s(AT);M9e=n(m$e,"STRONG",{});var c_t=s(M9e);Apr=r(c_t,"ctrl"),c_t.forEach(t),ypr=r(m$e," \u2014 "),yQ=n(m$e,"A",{href:!0});var f_t=s(yQ);Lpr=r(f_t,"TFCTRLForSequenceClassification"),f_t.forEach(t),xpr=r(m$e," (CTRL model)"),m$e.forEach(t),$pr=i(re),yT=n(re,"LI",{});var g$e=s(yT);E9e=n(g$e,"STRONG",{});var m_t=s(E9e);kpr=r(m_t,"deberta"),m_t.forEach(t),Spr=r(g$e," \u2014 "),LQ=n(g$e,"A",{href:!0});var g_t=s(LQ);Rpr=r(g_t,"TFDebertaForSequenceClassification"),g_t.forEach(t),Bpr=r(g$e," (DeBERTa model)"),g$e.forEach(t),Ppr=i(re),LT=n(re,"LI",{});var h$e=s(LT);C9e=n(h$e,"STRONG",{});var h_t=s(C9e);Ipr=r(h_t,"deberta-v2"),h_t.forEach(t),qpr=r(h$e," \u2014 "),xQ=n(h$e,"A",{href:!0});var p_t=s(xQ);Npr=r(p_t,"TFDebertaV2ForSequenceClassification"),p_t.forEach(t),jpr=r(h$e," (DeBERTa-v2 model)"),h$e.forEach(t),Dpr=i(re),xT=n(re,"LI",{});var p$e=s(xT);w9e=n(p$e,"STRONG",{});var u_t=s(w9e);Gpr=r(u_t,"distilbert"),u_t.forEach(t),Opr=r(p$e," \u2014 "),$Q=n(p$e,"A",{href:!0});var __t=s($Q);Vpr=r(__t,"TFDistilBertForSequenceClassification"),__t.forEach(t),Xpr=r(p$e," (DistilBERT model)"),p$e.forEach(t),zpr=i(re),$T=n(re,"LI",{});var u$e=s($T);A9e=n(u$e,"STRONG",{});var b_t=s(A9e);Qpr=r(b_t,"electra"),b_t.forEach(t),Wpr=r(u$e," \u2014 "),kQ=n(u$e,"A",{href:!0});var v_t=s(kQ);Hpr=r(v_t,"TFElectraForSequenceClassification"),v_t.forEach(t),Upr=r(u$e," (ELECTRA model)"),u$e.forEach(t),Jpr=i(re),kT=n(re,"LI",{});var _$e=s(kT);y9e=n(_$e,"STRONG",{});var F_t=s(y9e);Ypr=r(F_t,"flaubert"),F_t.forEach(t),Kpr=r(_$e," \u2014 "),SQ=n(_$e,"A",{href:!0});var T_t=s(SQ);Zpr=r(T_t,"TFFlaubertForSequenceClassification"),T_t.forEach(t),eur=r(_$e," (FlauBERT model)"),_$e.forEach(t),our=i(re),ST=n(re,"LI",{});var b$e=s(ST);L9e=n(b$e,"STRONG",{});var M_t=s(L9e);rur=r(M_t,"funnel"),M_t.forEach(t),tur=r(b$e," \u2014 "),RQ=n(b$e,"A",{href:!0});var E_t=s(RQ);aur=r(E_t,"TFFunnelForSequenceClassification"),E_t.forEach(t),nur=r(b$e," (Funnel Transformer model)"),b$e.forEach(t),sur=i(re),RT=n(re,"LI",{});var v$e=s(RT);x9e=n(v$e,"STRONG",{});var C_t=s(x9e);lur=r(C_t,"gpt2"),C_t.forEach(t),iur=r(v$e," \u2014 "),BQ=n(v$e,"A",{href:!0});var w_t=s(BQ);dur=r(w_t,"TFGPT2ForSequenceClassification"),w_t.forEach(t),cur=r(v$e," (OpenAI GPT-2 model)"),v$e.forEach(t),fur=i(re),BT=n(re,"LI",{});var F$e=s(BT);$9e=n(F$e,"STRONG",{});var A_t=s($9e);mur=r(A_t,"gptj"),A_t.forEach(t),gur=r(F$e," \u2014 "),PQ=n(F$e,"A",{href:!0});var y_t=s(PQ);hur=r(y_t,"TFGPTJForSequenceClassification"),y_t.forEach(t),pur=r(F$e," (GPT-J model)"),F$e.forEach(t),uur=i(re),PT=n(re,"LI",{});var T$e=s(PT);k9e=n(T$e,"STRONG",{});var L_t=s(k9e);_ur=r(L_t,"layoutlm"),L_t.forEach(t),bur=r(T$e," \u2014 "),IQ=n(T$e,"A",{href:!0});var x_t=s(IQ);vur=r(x_t,"TFLayoutLMForSequenceClassification"),x_t.forEach(t),Fur=r(T$e," (LayoutLM model)"),T$e.forEach(t),Tur=i(re),IT=n(re,"LI",{});var M$e=s(IT);S9e=n(M$e,"STRONG",{});var $_t=s(S9e);Mur=r($_t,"longformer"),$_t.forEach(t),Eur=r(M$e," \u2014 "),qQ=n(M$e,"A",{href:!0});var k_t=s(qQ);Cur=r(k_t,"TFLongformerForSequenceClassification"),k_t.forEach(t),wur=r(M$e," (Longformer model)"),M$e.forEach(t),Aur=i(re),qT=n(re,"LI",{});var E$e=s(qT);R9e=n(E$e,"STRONG",{});var S_t=s(R9e);yur=r(S_t,"mobilebert"),S_t.forEach(t),Lur=r(E$e," \u2014 "),NQ=n(E$e,"A",{href:!0});var R_t=s(NQ);xur=r(R_t,"TFMobileBertForSequenceClassification"),R_t.forEach(t),$ur=r(E$e," (MobileBERT model)"),E$e.forEach(t),kur=i(re),NT=n(re,"LI",{});var C$e=s(NT);B9e=n(C$e,"STRONG",{});var B_t=s(B9e);Sur=r(B_t,"mpnet"),B_t.forEach(t),Rur=r(C$e," \u2014 "),jQ=n(C$e,"A",{href:!0});var P_t=s(jQ);Bur=r(P_t,"TFMPNetForSequenceClassification"),P_t.forEach(t),Pur=r(C$e," (MPNet model)"),C$e.forEach(t),Iur=i(re),jT=n(re,"LI",{});var w$e=s(jT);P9e=n(w$e,"STRONG",{});var I_t=s(P9e);qur=r(I_t,"openai-gpt"),I_t.forEach(t),Nur=r(w$e," \u2014 "),DQ=n(w$e,"A",{href:!0});var q_t=s(DQ);jur=r(q_t,"TFOpenAIGPTForSequenceClassification"),q_t.forEach(t),Dur=r(w$e," (OpenAI GPT model)"),w$e.forEach(t),Gur=i(re),DT=n(re,"LI",{});var A$e=s(DT);I9e=n(A$e,"STRONG",{});var N_t=s(I9e);Our=r(N_t,"rembert"),N_t.forEach(t),Vur=r(A$e," \u2014 "),GQ=n(A$e,"A",{href:!0});var j_t=s(GQ);Xur=r(j_t,"TFRemBertForSequenceClassification"),j_t.forEach(t),zur=r(A$e," (RemBERT model)"),A$e.forEach(t),Qur=i(re),GT=n(re,"LI",{});var y$e=s(GT);q9e=n(y$e,"STRONG",{});var D_t=s(q9e);Wur=r(D_t,"roberta"),D_t.forEach(t),Hur=r(y$e," \u2014 "),OQ=n(y$e,"A",{href:!0});var G_t=s(OQ);Uur=r(G_t,"TFRobertaForSequenceClassification"),G_t.forEach(t),Jur=r(y$e," (RoBERTa model)"),y$e.forEach(t),Yur=i(re),OT=n(re,"LI",{});var L$e=s(OT);N9e=n(L$e,"STRONG",{});var O_t=s(N9e);Kur=r(O_t,"roformer"),O_t.forEach(t),Zur=r(L$e," \u2014 "),VQ=n(L$e,"A",{href:!0});var V_t=s(VQ);e_r=r(V_t,"TFRoFormerForSequenceClassification"),V_t.forEach(t),o_r=r(L$e," (RoFormer model)"),L$e.forEach(t),r_r=i(re),VT=n(re,"LI",{});var x$e=s(VT);j9e=n(x$e,"STRONG",{});var X_t=s(j9e);t_r=r(X_t,"tapas"),X_t.forEach(t),a_r=r(x$e," \u2014 "),XQ=n(x$e,"A",{href:!0});var z_t=s(XQ);n_r=r(z_t,"TFTapasForSequenceClassification"),z_t.forEach(t),s_r=r(x$e," (TAPAS model)"),x$e.forEach(t),l_r=i(re),XT=n(re,"LI",{});var $$e=s(XT);D9e=n($$e,"STRONG",{});var Q_t=s(D9e);i_r=r(Q_t,"transfo-xl"),Q_t.forEach(t),d_r=r($$e," \u2014 "),zQ=n($$e,"A",{href:!0});var W_t=s(zQ);c_r=r(W_t,"TFTransfoXLForSequenceClassification"),W_t.forEach(t),f_r=r($$e," (Transformer-XL model)"),$$e.forEach(t),m_r=i(re),zT=n(re,"LI",{});var k$e=s(zT);G9e=n(k$e,"STRONG",{});var H_t=s(G9e);g_r=r(H_t,"xlm"),H_t.forEach(t),h_r=r(k$e," \u2014 "),QQ=n(k$e,"A",{href:!0});var U_t=s(QQ);p_r=r(U_t,"TFXLMForSequenceClassification"),U_t.forEach(t),u_r=r(k$e," (XLM model)"),k$e.forEach(t),__r=i(re),QT=n(re,"LI",{});var S$e=s(QT);O9e=n(S$e,"STRONG",{});var J_t=s(O9e);b_r=r(J_t,"xlm-roberta"),J_t.forEach(t),v_r=r(S$e," \u2014 "),WQ=n(S$e,"A",{href:!0});var Y_t=s(WQ);F_r=r(Y_t,"TFXLMRobertaForSequenceClassification"),Y_t.forEach(t),T_r=r(S$e," (XLM-RoBERTa model)"),S$e.forEach(t),M_r=i(re),WT=n(re,"LI",{});var R$e=s(WT);V9e=n(R$e,"STRONG",{});var K_t=s(V9e);E_r=r(K_t,"xlnet"),K_t.forEach(t),C_r=r(R$e," \u2014 "),HQ=n(R$e,"A",{href:!0});var Z_t=s(HQ);w_r=r(Z_t,"TFXLNetForSequenceClassification"),Z_t.forEach(t),A_r=r(R$e," (XLNet model)"),R$e.forEach(t),re.forEach(t),y_r=i(bl),T(HT.$$.fragment,bl),bl.forEach(t),_l.forEach(t),ePe=i(f),Kd=n(f,"H2",{class:!0});var aqe=s(Kd);UT=n(aqe,"A",{id:!0,class:!0,href:!0});var e1t=s(UT);X9e=n(e1t,"SPAN",{});var o1t=s(X9e);T(kL.$$.fragment,o1t),o1t.forEach(t),e1t.forEach(t),L_r=i(aqe),z9e=n(aqe,"SPAN",{});var r1t=s(z9e);x_r=r(r1t,"TFAutoModelForMultipleChoice"),r1t.forEach(t),aqe.forEach(t),oPe=i(f),tr=n(f,"DIV",{class:!0});var vl=s(tr);T(SL.$$.fragment,vl),$_r=i(vl),Zd=n(vl,"P",{});var rK=s(Zd);k_r=r(rK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),UQ=n(rK,"A",{href:!0});var t1t=s(UQ);S_r=r(t1t,"from_pretrained()"),t1t.forEach(t),R_r=r(rK," class method or the "),JQ=n(rK,"A",{href:!0});var a1t=s(JQ);B_r=r(a1t,"from_config()"),a1t.forEach(t),P_r=r(rK,` class
method.`),rK.forEach(t),I_r=i(vl),RL=n(vl,"P",{});var nqe=s(RL);q_r=r(nqe,"This class cannot be instantiated directly using "),Q9e=n(nqe,"CODE",{});var n1t=s(Q9e);N_r=r(n1t,"__init__()"),n1t.forEach(t),j_r=r(nqe," (throws an error)."),nqe.forEach(t),D_r=i(vl),$t=n(vl,"DIV",{class:!0});var xw=s($t);T(BL.$$.fragment,xw),G_r=i(xw),W9e=n(xw,"P",{});var s1t=s(W9e);O_r=r(s1t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),s1t.forEach(t),V_r=i(xw),ec=n(xw,"P",{});var tK=s(ec);X_r=r(tK,`Note:
Loading a model from its configuration file does `),H9e=n(tK,"STRONG",{});var l1t=s(H9e);z_r=r(l1t,"not"),l1t.forEach(t),Q_r=r(tK,` load the model weights. It only affects the
model\u2019s configuration. Use `),YQ=n(tK,"A",{href:!0});var i1t=s(YQ);W_r=r(i1t,"from_pretrained()"),i1t.forEach(t),H_r=r(tK," to load the model weights."),tK.forEach(t),U_r=i(xw),T(JT.$$.fragment,xw),xw.forEach(t),J_r=i(vl),$r=n(vl,"DIV",{class:!0});var Fl=s($r);T(PL.$$.fragment,Fl),Y_r=i(Fl),U9e=n(Fl,"P",{});var d1t=s(U9e);K_r=r(d1t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),d1t.forEach(t),Z_r=i(Fl),rn=n(Fl,"P",{});var $w=s(rn);e1r=r($w,"The model class to instantiate is selected based on the "),J9e=n($w,"CODE",{});var c1t=s(J9e);o1r=r(c1t,"model_type"),c1t.forEach(t),r1r=r($w,` property of the config object (either
passed as an argument or loaded from `),Y9e=n($w,"CODE",{});var f1t=s(Y9e);t1r=r(f1t,"pretrained_model_name_or_path"),f1t.forEach(t),a1r=r($w,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),K9e=n($w,"CODE",{});var m1t=s(K9e);n1r=r(m1t,"pretrained_model_name_or_path"),m1t.forEach(t),s1r=r($w,":"),$w.forEach(t),l1r=i(Fl),pe=n(Fl,"UL",{});var _e=s(pe);YT=n(_e,"LI",{});var B$e=s(YT);Z9e=n(B$e,"STRONG",{});var g1t=s(Z9e);i1r=r(g1t,"albert"),g1t.forEach(t),d1r=r(B$e," \u2014 "),KQ=n(B$e,"A",{href:!0});var h1t=s(KQ);c1r=r(h1t,"TFAlbertForMultipleChoice"),h1t.forEach(t),f1r=r(B$e," (ALBERT model)"),B$e.forEach(t),m1r=i(_e),KT=n(_e,"LI",{});var P$e=s(KT);ebe=n(P$e,"STRONG",{});var p1t=s(ebe);g1r=r(p1t,"bert"),p1t.forEach(t),h1r=r(P$e," \u2014 "),ZQ=n(P$e,"A",{href:!0});var u1t=s(ZQ);p1r=r(u1t,"TFBertForMultipleChoice"),u1t.forEach(t),u1r=r(P$e," (BERT model)"),P$e.forEach(t),_1r=i(_e),ZT=n(_e,"LI",{});var I$e=s(ZT);obe=n(I$e,"STRONG",{});var _1t=s(obe);b1r=r(_1t,"camembert"),_1t.forEach(t),v1r=r(I$e," \u2014 "),eW=n(I$e,"A",{href:!0});var b1t=s(eW);F1r=r(b1t,"TFCamembertForMultipleChoice"),b1t.forEach(t),T1r=r(I$e," (CamemBERT model)"),I$e.forEach(t),M1r=i(_e),eM=n(_e,"LI",{});var q$e=s(eM);rbe=n(q$e,"STRONG",{});var v1t=s(rbe);E1r=r(v1t,"convbert"),v1t.forEach(t),C1r=r(q$e," \u2014 "),oW=n(q$e,"A",{href:!0});var F1t=s(oW);w1r=r(F1t,"TFConvBertForMultipleChoice"),F1t.forEach(t),A1r=r(q$e," (ConvBERT model)"),q$e.forEach(t),y1r=i(_e),oM=n(_e,"LI",{});var N$e=s(oM);tbe=n(N$e,"STRONG",{});var T1t=s(tbe);L1r=r(T1t,"distilbert"),T1t.forEach(t),x1r=r(N$e," \u2014 "),rW=n(N$e,"A",{href:!0});var M1t=s(rW);$1r=r(M1t,"TFDistilBertForMultipleChoice"),M1t.forEach(t),k1r=r(N$e," (DistilBERT model)"),N$e.forEach(t),S1r=i(_e),rM=n(_e,"LI",{});var j$e=s(rM);abe=n(j$e,"STRONG",{});var E1t=s(abe);R1r=r(E1t,"electra"),E1t.forEach(t),B1r=r(j$e," \u2014 "),tW=n(j$e,"A",{href:!0});var C1t=s(tW);P1r=r(C1t,"TFElectraForMultipleChoice"),C1t.forEach(t),I1r=r(j$e," (ELECTRA model)"),j$e.forEach(t),q1r=i(_e),tM=n(_e,"LI",{});var D$e=s(tM);nbe=n(D$e,"STRONG",{});var w1t=s(nbe);N1r=r(w1t,"flaubert"),w1t.forEach(t),j1r=r(D$e," \u2014 "),aW=n(D$e,"A",{href:!0});var A1t=s(aW);D1r=r(A1t,"TFFlaubertForMultipleChoice"),A1t.forEach(t),G1r=r(D$e," (FlauBERT model)"),D$e.forEach(t),O1r=i(_e),aM=n(_e,"LI",{});var G$e=s(aM);sbe=n(G$e,"STRONG",{});var y1t=s(sbe);V1r=r(y1t,"funnel"),y1t.forEach(t),X1r=r(G$e," \u2014 "),nW=n(G$e,"A",{href:!0});var L1t=s(nW);z1r=r(L1t,"TFFunnelForMultipleChoice"),L1t.forEach(t),Q1r=r(G$e," (Funnel Transformer model)"),G$e.forEach(t),W1r=i(_e),nM=n(_e,"LI",{});var O$e=s(nM);lbe=n(O$e,"STRONG",{});var x1t=s(lbe);H1r=r(x1t,"longformer"),x1t.forEach(t),U1r=r(O$e," \u2014 "),sW=n(O$e,"A",{href:!0});var $1t=s(sW);J1r=r($1t,"TFLongformerForMultipleChoice"),$1t.forEach(t),Y1r=r(O$e," (Longformer model)"),O$e.forEach(t),K1r=i(_e),sM=n(_e,"LI",{});var V$e=s(sM);ibe=n(V$e,"STRONG",{});var k1t=s(ibe);Z1r=r(k1t,"mobilebert"),k1t.forEach(t),e9r=r(V$e," \u2014 "),lW=n(V$e,"A",{href:!0});var S1t=s(lW);o9r=r(S1t,"TFMobileBertForMultipleChoice"),S1t.forEach(t),r9r=r(V$e," (MobileBERT model)"),V$e.forEach(t),t9r=i(_e),lM=n(_e,"LI",{});var X$e=s(lM);dbe=n(X$e,"STRONG",{});var R1t=s(dbe);a9r=r(R1t,"mpnet"),R1t.forEach(t),n9r=r(X$e," \u2014 "),iW=n(X$e,"A",{href:!0});var B1t=s(iW);s9r=r(B1t,"TFMPNetForMultipleChoice"),B1t.forEach(t),l9r=r(X$e," (MPNet model)"),X$e.forEach(t),i9r=i(_e),iM=n(_e,"LI",{});var z$e=s(iM);cbe=n(z$e,"STRONG",{});var P1t=s(cbe);d9r=r(P1t,"rembert"),P1t.forEach(t),c9r=r(z$e," \u2014 "),dW=n(z$e,"A",{href:!0});var I1t=s(dW);f9r=r(I1t,"TFRemBertForMultipleChoice"),I1t.forEach(t),m9r=r(z$e," (RemBERT model)"),z$e.forEach(t),g9r=i(_e),dM=n(_e,"LI",{});var Q$e=s(dM);fbe=n(Q$e,"STRONG",{});var q1t=s(fbe);h9r=r(q1t,"roberta"),q1t.forEach(t),p9r=r(Q$e," \u2014 "),cW=n(Q$e,"A",{href:!0});var N1t=s(cW);u9r=r(N1t,"TFRobertaForMultipleChoice"),N1t.forEach(t),_9r=r(Q$e," (RoBERTa model)"),Q$e.forEach(t),b9r=i(_e),cM=n(_e,"LI",{});var W$e=s(cM);mbe=n(W$e,"STRONG",{});var j1t=s(mbe);v9r=r(j1t,"roformer"),j1t.forEach(t),F9r=r(W$e," \u2014 "),fW=n(W$e,"A",{href:!0});var D1t=s(fW);T9r=r(D1t,"TFRoFormerForMultipleChoice"),D1t.forEach(t),M9r=r(W$e," (RoFormer model)"),W$e.forEach(t),E9r=i(_e),fM=n(_e,"LI",{});var H$e=s(fM);gbe=n(H$e,"STRONG",{});var G1t=s(gbe);C9r=r(G1t,"xlm"),G1t.forEach(t),w9r=r(H$e," \u2014 "),mW=n(H$e,"A",{href:!0});var O1t=s(mW);A9r=r(O1t,"TFXLMForMultipleChoice"),O1t.forEach(t),y9r=r(H$e," (XLM model)"),H$e.forEach(t),L9r=i(_e),mM=n(_e,"LI",{});var U$e=s(mM);hbe=n(U$e,"STRONG",{});var V1t=s(hbe);x9r=r(V1t,"xlm-roberta"),V1t.forEach(t),$9r=r(U$e," \u2014 "),gW=n(U$e,"A",{href:!0});var X1t=s(gW);k9r=r(X1t,"TFXLMRobertaForMultipleChoice"),X1t.forEach(t),S9r=r(U$e," (XLM-RoBERTa model)"),U$e.forEach(t),R9r=i(_e),gM=n(_e,"LI",{});var J$e=s(gM);pbe=n(J$e,"STRONG",{});var z1t=s(pbe);B9r=r(z1t,"xlnet"),z1t.forEach(t),P9r=r(J$e," \u2014 "),hW=n(J$e,"A",{href:!0});var Q1t=s(hW);I9r=r(Q1t,"TFXLNetForMultipleChoice"),Q1t.forEach(t),q9r=r(J$e," (XLNet model)"),J$e.forEach(t),_e.forEach(t),N9r=i(Fl),T(hM.$$.fragment,Fl),Fl.forEach(t),vl.forEach(t),rPe=i(f),oc=n(f,"H2",{class:!0});var sqe=s(oc);pM=n(sqe,"A",{id:!0,class:!0,href:!0});var W1t=s(pM);ube=n(W1t,"SPAN",{});var H1t=s(ube);T(IL.$$.fragment,H1t),H1t.forEach(t),W1t.forEach(t),j9r=i(sqe),_be=n(sqe,"SPAN",{});var U1t=s(_be);D9r=r(U1t,"TFAutoModelForTableQuestionAnswering"),U1t.forEach(t),sqe.forEach(t),tPe=i(f),ar=n(f,"DIV",{class:!0});var Tl=s(ar);T(qL.$$.fragment,Tl),G9r=i(Tl),rc=n(Tl,"P",{});var aK=s(rc);O9r=r(aK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),pW=n(aK,"A",{href:!0});var J1t=s(pW);V9r=r(J1t,"from_pretrained()"),J1t.forEach(t),X9r=r(aK," class method or the "),uW=n(aK,"A",{href:!0});var Y1t=s(uW);z9r=r(Y1t,"from_config()"),Y1t.forEach(t),Q9r=r(aK,` class
method.`),aK.forEach(t),W9r=i(Tl),NL=n(Tl,"P",{});var lqe=s(NL);H9r=r(lqe,"This class cannot be instantiated directly using "),bbe=n(lqe,"CODE",{});var K1t=s(bbe);U9r=r(K1t,"__init__()"),K1t.forEach(t),J9r=r(lqe," (throws an error)."),lqe.forEach(t),Y9r=i(Tl),kt=n(Tl,"DIV",{class:!0});var kw=s(kt);T(jL.$$.fragment,kw),K9r=i(kw),vbe=n(kw,"P",{});var Z1t=s(vbe);Z9r=r(Z1t,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Z1t.forEach(t),ebr=i(kw),tc=n(kw,"P",{});var nK=s(tc);obr=r(nK,`Note:
Loading a model from its configuration file does `),Fbe=n(nK,"STRONG",{});var e9t=s(Fbe);rbr=r(e9t,"not"),e9t.forEach(t),tbr=r(nK,` load the model weights. It only affects the
model\u2019s configuration. Use `),_W=n(nK,"A",{href:!0});var o9t=s(_W);abr=r(o9t,"from_pretrained()"),o9t.forEach(t),nbr=r(nK," to load the model weights."),nK.forEach(t),sbr=i(kw),T(uM.$$.fragment,kw),kw.forEach(t),lbr=i(Tl),kr=n(Tl,"DIV",{class:!0});var Ml=s(kr);T(DL.$$.fragment,Ml),ibr=i(Ml),Tbe=n(Ml,"P",{});var r9t=s(Tbe);dbr=r(r9t,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),r9t.forEach(t),cbr=i(Ml),tn=n(Ml,"P",{});var Sw=s(tn);fbr=r(Sw,"The model class to instantiate is selected based on the "),Mbe=n(Sw,"CODE",{});var t9t=s(Mbe);mbr=r(t9t,"model_type"),t9t.forEach(t),gbr=r(Sw,` property of the config object (either
passed as an argument or loaded from `),Ebe=n(Sw,"CODE",{});var a9t=s(Ebe);hbr=r(a9t,"pretrained_model_name_or_path"),a9t.forEach(t),pbr=r(Sw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cbe=n(Sw,"CODE",{});var n9t=s(Cbe);ubr=r(n9t,"pretrained_model_name_or_path"),n9t.forEach(t),_br=r(Sw,":"),Sw.forEach(t),bbr=i(Ml),wbe=n(Ml,"UL",{});var s9t=s(wbe);_M=n(s9t,"LI",{});var Y$e=s(_M);Abe=n(Y$e,"STRONG",{});var l9t=s(Abe);vbr=r(l9t,"tapas"),l9t.forEach(t),Fbr=r(Y$e," \u2014 "),bW=n(Y$e,"A",{href:!0});var i9t=s(bW);Tbr=r(i9t,"TFTapasForQuestionAnswering"),i9t.forEach(t),Mbr=r(Y$e," (TAPAS model)"),Y$e.forEach(t),s9t.forEach(t),Ebr=i(Ml),T(bM.$$.fragment,Ml),Ml.forEach(t),Tl.forEach(t),aPe=i(f),ac=n(f,"H2",{class:!0});var iqe=s(ac);vM=n(iqe,"A",{id:!0,class:!0,href:!0});var d9t=s(vM);ybe=n(d9t,"SPAN",{});var c9t=s(ybe);T(GL.$$.fragment,c9t),c9t.forEach(t),d9t.forEach(t),Cbr=i(iqe),Lbe=n(iqe,"SPAN",{});var f9t=s(Lbe);wbr=r(f9t,"TFAutoModelForTokenClassification"),f9t.forEach(t),iqe.forEach(t),nPe=i(f),nr=n(f,"DIV",{class:!0});var El=s(nr);T(OL.$$.fragment,El),Abr=i(El),nc=n(El,"P",{});var sK=s(nc);ybr=r(sK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),vW=n(sK,"A",{href:!0});var m9t=s(vW);Lbr=r(m9t,"from_pretrained()"),m9t.forEach(t),xbr=r(sK," class method or the "),FW=n(sK,"A",{href:!0});var g9t=s(FW);$br=r(g9t,"from_config()"),g9t.forEach(t),kbr=r(sK,` class
method.`),sK.forEach(t),Sbr=i(El),VL=n(El,"P",{});var dqe=s(VL);Rbr=r(dqe,"This class cannot be instantiated directly using "),xbe=n(dqe,"CODE",{});var h9t=s(xbe);Bbr=r(h9t,"__init__()"),h9t.forEach(t),Pbr=r(dqe," (throws an error)."),dqe.forEach(t),Ibr=i(El),St=n(El,"DIV",{class:!0});var Rw=s(St);T(XL.$$.fragment,Rw),qbr=i(Rw),$be=n(Rw,"P",{});var p9t=s($be);Nbr=r(p9t,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),p9t.forEach(t),jbr=i(Rw),sc=n(Rw,"P",{});var lK=s(sc);Dbr=r(lK,`Note:
Loading a model from its configuration file does `),kbe=n(lK,"STRONG",{});var u9t=s(kbe);Gbr=r(u9t,"not"),u9t.forEach(t),Obr=r(lK,` load the model weights. It only affects the
model\u2019s configuration. Use `),TW=n(lK,"A",{href:!0});var _9t=s(TW);Vbr=r(_9t,"from_pretrained()"),_9t.forEach(t),Xbr=r(lK," to load the model weights."),lK.forEach(t),zbr=i(Rw),T(FM.$$.fragment,Rw),Rw.forEach(t),Qbr=i(El),Sr=n(El,"DIV",{class:!0});var Cl=s(Sr);T(zL.$$.fragment,Cl),Wbr=i(Cl),Sbe=n(Cl,"P",{});var b9t=s(Sbe);Hbr=r(b9t,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),b9t.forEach(t),Ubr=i(Cl),an=n(Cl,"P",{});var Bw=s(an);Jbr=r(Bw,"The model class to instantiate is selected based on the "),Rbe=n(Bw,"CODE",{});var v9t=s(Rbe);Ybr=r(v9t,"model_type"),v9t.forEach(t),Kbr=r(Bw,` property of the config object (either
passed as an argument or loaded from `),Bbe=n(Bw,"CODE",{});var F9t=s(Bbe);Zbr=r(F9t,"pretrained_model_name_or_path"),F9t.forEach(t),e2r=r(Bw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Pbe=n(Bw,"CODE",{});var T9t=s(Pbe);o2r=r(T9t,"pretrained_model_name_or_path"),T9t.forEach(t),r2r=r(Bw,":"),Bw.forEach(t),t2r=i(Cl),de=n(Cl,"UL",{});var me=s(de);TM=n(me,"LI",{});var K$e=s(TM);Ibe=n(K$e,"STRONG",{});var M9t=s(Ibe);a2r=r(M9t,"albert"),M9t.forEach(t),n2r=r(K$e," \u2014 "),MW=n(K$e,"A",{href:!0});var E9t=s(MW);s2r=r(E9t,"TFAlbertForTokenClassification"),E9t.forEach(t),l2r=r(K$e," (ALBERT model)"),K$e.forEach(t),i2r=i(me),MM=n(me,"LI",{});var Z$e=s(MM);qbe=n(Z$e,"STRONG",{});var C9t=s(qbe);d2r=r(C9t,"bert"),C9t.forEach(t),c2r=r(Z$e," \u2014 "),EW=n(Z$e,"A",{href:!0});var w9t=s(EW);f2r=r(w9t,"TFBertForTokenClassification"),w9t.forEach(t),m2r=r(Z$e," (BERT model)"),Z$e.forEach(t),g2r=i(me),EM=n(me,"LI",{});var eke=s(EM);Nbe=n(eke,"STRONG",{});var A9t=s(Nbe);h2r=r(A9t,"camembert"),A9t.forEach(t),p2r=r(eke," \u2014 "),CW=n(eke,"A",{href:!0});var y9t=s(CW);u2r=r(y9t,"TFCamembertForTokenClassification"),y9t.forEach(t),_2r=r(eke," (CamemBERT model)"),eke.forEach(t),b2r=i(me),CM=n(me,"LI",{});var oke=s(CM);jbe=n(oke,"STRONG",{});var L9t=s(jbe);v2r=r(L9t,"convbert"),L9t.forEach(t),F2r=r(oke," \u2014 "),wW=n(oke,"A",{href:!0});var x9t=s(wW);T2r=r(x9t,"TFConvBertForTokenClassification"),x9t.forEach(t),M2r=r(oke," (ConvBERT model)"),oke.forEach(t),E2r=i(me),wM=n(me,"LI",{});var rke=s(wM);Dbe=n(rke,"STRONG",{});var $9t=s(Dbe);C2r=r($9t,"deberta"),$9t.forEach(t),w2r=r(rke," \u2014 "),AW=n(rke,"A",{href:!0});var k9t=s(AW);A2r=r(k9t,"TFDebertaForTokenClassification"),k9t.forEach(t),y2r=r(rke," (DeBERTa model)"),rke.forEach(t),L2r=i(me),AM=n(me,"LI",{});var tke=s(AM);Gbe=n(tke,"STRONG",{});var S9t=s(Gbe);x2r=r(S9t,"deberta-v2"),S9t.forEach(t),$2r=r(tke," \u2014 "),yW=n(tke,"A",{href:!0});var R9t=s(yW);k2r=r(R9t,"TFDebertaV2ForTokenClassification"),R9t.forEach(t),S2r=r(tke," (DeBERTa-v2 model)"),tke.forEach(t),R2r=i(me),yM=n(me,"LI",{});var ake=s(yM);Obe=n(ake,"STRONG",{});var B9t=s(Obe);B2r=r(B9t,"distilbert"),B9t.forEach(t),P2r=r(ake," \u2014 "),LW=n(ake,"A",{href:!0});var P9t=s(LW);I2r=r(P9t,"TFDistilBertForTokenClassification"),P9t.forEach(t),q2r=r(ake," (DistilBERT model)"),ake.forEach(t),N2r=i(me),LM=n(me,"LI",{});var nke=s(LM);Vbe=n(nke,"STRONG",{});var I9t=s(Vbe);j2r=r(I9t,"electra"),I9t.forEach(t),D2r=r(nke," \u2014 "),xW=n(nke,"A",{href:!0});var q9t=s(xW);G2r=r(q9t,"TFElectraForTokenClassification"),q9t.forEach(t),O2r=r(nke," (ELECTRA model)"),nke.forEach(t),V2r=i(me),xM=n(me,"LI",{});var ske=s(xM);Xbe=n(ske,"STRONG",{});var N9t=s(Xbe);X2r=r(N9t,"flaubert"),N9t.forEach(t),z2r=r(ske," \u2014 "),$W=n(ske,"A",{href:!0});var j9t=s($W);Q2r=r(j9t,"TFFlaubertForTokenClassification"),j9t.forEach(t),W2r=r(ske," (FlauBERT model)"),ske.forEach(t),H2r=i(me),$M=n(me,"LI",{});var lke=s($M);zbe=n(lke,"STRONG",{});var D9t=s(zbe);U2r=r(D9t,"funnel"),D9t.forEach(t),J2r=r(lke," \u2014 "),kW=n(lke,"A",{href:!0});var G9t=s(kW);Y2r=r(G9t,"TFFunnelForTokenClassification"),G9t.forEach(t),K2r=r(lke," (Funnel Transformer model)"),lke.forEach(t),Z2r=i(me),kM=n(me,"LI",{});var ike=s(kM);Qbe=n(ike,"STRONG",{});var O9t=s(Qbe);e5r=r(O9t,"layoutlm"),O9t.forEach(t),o5r=r(ike," \u2014 "),SW=n(ike,"A",{href:!0});var V9t=s(SW);r5r=r(V9t,"TFLayoutLMForTokenClassification"),V9t.forEach(t),t5r=r(ike," (LayoutLM model)"),ike.forEach(t),a5r=i(me),SM=n(me,"LI",{});var dke=s(SM);Wbe=n(dke,"STRONG",{});var X9t=s(Wbe);n5r=r(X9t,"longformer"),X9t.forEach(t),s5r=r(dke," \u2014 "),RW=n(dke,"A",{href:!0});var z9t=s(RW);l5r=r(z9t,"TFLongformerForTokenClassification"),z9t.forEach(t),i5r=r(dke," (Longformer model)"),dke.forEach(t),d5r=i(me),RM=n(me,"LI",{});var cke=s(RM);Hbe=n(cke,"STRONG",{});var Q9t=s(Hbe);c5r=r(Q9t,"mobilebert"),Q9t.forEach(t),f5r=r(cke," \u2014 "),BW=n(cke,"A",{href:!0});var W9t=s(BW);m5r=r(W9t,"TFMobileBertForTokenClassification"),W9t.forEach(t),g5r=r(cke," (MobileBERT model)"),cke.forEach(t),h5r=i(me),BM=n(me,"LI",{});var fke=s(BM);Ube=n(fke,"STRONG",{});var H9t=s(Ube);p5r=r(H9t,"mpnet"),H9t.forEach(t),u5r=r(fke," \u2014 "),PW=n(fke,"A",{href:!0});var U9t=s(PW);_5r=r(U9t,"TFMPNetForTokenClassification"),U9t.forEach(t),b5r=r(fke," (MPNet model)"),fke.forEach(t),v5r=i(me),PM=n(me,"LI",{});var mke=s(PM);Jbe=n(mke,"STRONG",{});var J9t=s(Jbe);F5r=r(J9t,"rembert"),J9t.forEach(t),T5r=r(mke," \u2014 "),IW=n(mke,"A",{href:!0});var Y9t=s(IW);M5r=r(Y9t,"TFRemBertForTokenClassification"),Y9t.forEach(t),E5r=r(mke," (RemBERT model)"),mke.forEach(t),C5r=i(me),IM=n(me,"LI",{});var gke=s(IM);Ybe=n(gke,"STRONG",{});var K9t=s(Ybe);w5r=r(K9t,"roberta"),K9t.forEach(t),A5r=r(gke," \u2014 "),qW=n(gke,"A",{href:!0});var Z9t=s(qW);y5r=r(Z9t,"TFRobertaForTokenClassification"),Z9t.forEach(t),L5r=r(gke," (RoBERTa model)"),gke.forEach(t),x5r=i(me),qM=n(me,"LI",{});var hke=s(qM);Kbe=n(hke,"STRONG",{});var ebt=s(Kbe);$5r=r(ebt,"roformer"),ebt.forEach(t),k5r=r(hke," \u2014 "),NW=n(hke,"A",{href:!0});var obt=s(NW);S5r=r(obt,"TFRoFormerForTokenClassification"),obt.forEach(t),R5r=r(hke," (RoFormer model)"),hke.forEach(t),B5r=i(me),NM=n(me,"LI",{});var pke=s(NM);Zbe=n(pke,"STRONG",{});var rbt=s(Zbe);P5r=r(rbt,"xlm"),rbt.forEach(t),I5r=r(pke," \u2014 "),jW=n(pke,"A",{href:!0});var tbt=s(jW);q5r=r(tbt,"TFXLMForTokenClassification"),tbt.forEach(t),N5r=r(pke," (XLM model)"),pke.forEach(t),j5r=i(me),jM=n(me,"LI",{});var uke=s(jM);e2e=n(uke,"STRONG",{});var abt=s(e2e);D5r=r(abt,"xlm-roberta"),abt.forEach(t),G5r=r(uke," \u2014 "),DW=n(uke,"A",{href:!0});var nbt=s(DW);O5r=r(nbt,"TFXLMRobertaForTokenClassification"),nbt.forEach(t),V5r=r(uke," (XLM-RoBERTa model)"),uke.forEach(t),X5r=i(me),DM=n(me,"LI",{});var _ke=s(DM);o2e=n(_ke,"STRONG",{});var sbt=s(o2e);z5r=r(sbt,"xlnet"),sbt.forEach(t),Q5r=r(_ke," \u2014 "),GW=n(_ke,"A",{href:!0});var lbt=s(GW);W5r=r(lbt,"TFXLNetForTokenClassification"),lbt.forEach(t),H5r=r(_ke," (XLNet model)"),_ke.forEach(t),me.forEach(t),U5r=i(Cl),T(GM.$$.fragment,Cl),Cl.forEach(t),El.forEach(t),sPe=i(f),lc=n(f,"H2",{class:!0});var cqe=s(lc);OM=n(cqe,"A",{id:!0,class:!0,href:!0});var ibt=s(OM);r2e=n(ibt,"SPAN",{});var dbt=s(r2e);T(QL.$$.fragment,dbt),dbt.forEach(t),ibt.forEach(t),J5r=i(cqe),t2e=n(cqe,"SPAN",{});var cbt=s(t2e);Y5r=r(cbt,"TFAutoModelForQuestionAnswering"),cbt.forEach(t),cqe.forEach(t),lPe=i(f),sr=n(f,"DIV",{class:!0});var wl=s(sr);T(WL.$$.fragment,wl),K5r=i(wl),ic=n(wl,"P",{});var iK=s(ic);Z5r=r(iK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),OW=n(iK,"A",{href:!0});var fbt=s(OW);evr=r(fbt,"from_pretrained()"),fbt.forEach(t),ovr=r(iK," class method or the "),VW=n(iK,"A",{href:!0});var mbt=s(VW);rvr=r(mbt,"from_config()"),mbt.forEach(t),tvr=r(iK,` class
method.`),iK.forEach(t),avr=i(wl),HL=n(wl,"P",{});var fqe=s(HL);nvr=r(fqe,"This class cannot be instantiated directly using "),a2e=n(fqe,"CODE",{});var gbt=s(a2e);svr=r(gbt,"__init__()"),gbt.forEach(t),lvr=r(fqe," (throws an error)."),fqe.forEach(t),ivr=i(wl),Rt=n(wl,"DIV",{class:!0});var Pw=s(Rt);T(UL.$$.fragment,Pw),dvr=i(Pw),n2e=n(Pw,"P",{});var hbt=s(n2e);cvr=r(hbt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),hbt.forEach(t),fvr=i(Pw),dc=n(Pw,"P",{});var dK=s(dc);mvr=r(dK,`Note:
Loading a model from its configuration file does `),s2e=n(dK,"STRONG",{});var pbt=s(s2e);gvr=r(pbt,"not"),pbt.forEach(t),hvr=r(dK,` load the model weights. It only affects the
model\u2019s configuration. Use `),XW=n(dK,"A",{href:!0});var ubt=s(XW);pvr=r(ubt,"from_pretrained()"),ubt.forEach(t),uvr=r(dK," to load the model weights."),dK.forEach(t),_vr=i(Pw),T(VM.$$.fragment,Pw),Pw.forEach(t),bvr=i(wl),Rr=n(wl,"DIV",{class:!0});var Al=s(Rr);T(JL.$$.fragment,Al),vvr=i(Al),l2e=n(Al,"P",{});var _bt=s(l2e);Fvr=r(_bt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),_bt.forEach(t),Tvr=i(Al),nn=n(Al,"P",{});var Iw=s(nn);Mvr=r(Iw,"The model class to instantiate is selected based on the "),i2e=n(Iw,"CODE",{});var bbt=s(i2e);Evr=r(bbt,"model_type"),bbt.forEach(t),Cvr=r(Iw,` property of the config object (either
passed as an argument or loaded from `),d2e=n(Iw,"CODE",{});var vbt=s(d2e);wvr=r(vbt,"pretrained_model_name_or_path"),vbt.forEach(t),Avr=r(Iw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),c2e=n(Iw,"CODE",{});var Fbt=s(c2e);yvr=r(Fbt,"pretrained_model_name_or_path"),Fbt.forEach(t),Lvr=r(Iw,":"),Iw.forEach(t),xvr=i(Al),ce=n(Al,"UL",{});var ge=s(ce);XM=n(ge,"LI",{});var bke=s(XM);f2e=n(bke,"STRONG",{});var Tbt=s(f2e);$vr=r(Tbt,"albert"),Tbt.forEach(t),kvr=r(bke," \u2014 "),zW=n(bke,"A",{href:!0});var Mbt=s(zW);Svr=r(Mbt,"TFAlbertForQuestionAnswering"),Mbt.forEach(t),Rvr=r(bke," (ALBERT model)"),bke.forEach(t),Bvr=i(ge),zM=n(ge,"LI",{});var vke=s(zM);m2e=n(vke,"STRONG",{});var Ebt=s(m2e);Pvr=r(Ebt,"bert"),Ebt.forEach(t),Ivr=r(vke," \u2014 "),QW=n(vke,"A",{href:!0});var Cbt=s(QW);qvr=r(Cbt,"TFBertForQuestionAnswering"),Cbt.forEach(t),Nvr=r(vke," (BERT model)"),vke.forEach(t),jvr=i(ge),QM=n(ge,"LI",{});var Fke=s(QM);g2e=n(Fke,"STRONG",{});var wbt=s(g2e);Dvr=r(wbt,"camembert"),wbt.forEach(t),Gvr=r(Fke," \u2014 "),WW=n(Fke,"A",{href:!0});var Abt=s(WW);Ovr=r(Abt,"TFCamembertForQuestionAnswering"),Abt.forEach(t),Vvr=r(Fke," (CamemBERT model)"),Fke.forEach(t),Xvr=i(ge),WM=n(ge,"LI",{});var Tke=s(WM);h2e=n(Tke,"STRONG",{});var ybt=s(h2e);zvr=r(ybt,"convbert"),ybt.forEach(t),Qvr=r(Tke," \u2014 "),HW=n(Tke,"A",{href:!0});var Lbt=s(HW);Wvr=r(Lbt,"TFConvBertForQuestionAnswering"),Lbt.forEach(t),Hvr=r(Tke," (ConvBERT model)"),Tke.forEach(t),Uvr=i(ge),HM=n(ge,"LI",{});var Mke=s(HM);p2e=n(Mke,"STRONG",{});var xbt=s(p2e);Jvr=r(xbt,"deberta"),xbt.forEach(t),Yvr=r(Mke," \u2014 "),UW=n(Mke,"A",{href:!0});var $bt=s(UW);Kvr=r($bt,"TFDebertaForQuestionAnswering"),$bt.forEach(t),Zvr=r(Mke," (DeBERTa model)"),Mke.forEach(t),eFr=i(ge),UM=n(ge,"LI",{});var Eke=s(UM);u2e=n(Eke,"STRONG",{});var kbt=s(u2e);oFr=r(kbt,"deberta-v2"),kbt.forEach(t),rFr=r(Eke," \u2014 "),JW=n(Eke,"A",{href:!0});var Sbt=s(JW);tFr=r(Sbt,"TFDebertaV2ForQuestionAnswering"),Sbt.forEach(t),aFr=r(Eke," (DeBERTa-v2 model)"),Eke.forEach(t),nFr=i(ge),JM=n(ge,"LI",{});var Cke=s(JM);_2e=n(Cke,"STRONG",{});var Rbt=s(_2e);sFr=r(Rbt,"distilbert"),Rbt.forEach(t),lFr=r(Cke," \u2014 "),YW=n(Cke,"A",{href:!0});var Bbt=s(YW);iFr=r(Bbt,"TFDistilBertForQuestionAnswering"),Bbt.forEach(t),dFr=r(Cke," (DistilBERT model)"),Cke.forEach(t),cFr=i(ge),YM=n(ge,"LI",{});var wke=s(YM);b2e=n(wke,"STRONG",{});var Pbt=s(b2e);fFr=r(Pbt,"electra"),Pbt.forEach(t),mFr=r(wke," \u2014 "),KW=n(wke,"A",{href:!0});var Ibt=s(KW);gFr=r(Ibt,"TFElectraForQuestionAnswering"),Ibt.forEach(t),hFr=r(wke," (ELECTRA model)"),wke.forEach(t),pFr=i(ge),KM=n(ge,"LI",{});var Ake=s(KM);v2e=n(Ake,"STRONG",{});var qbt=s(v2e);uFr=r(qbt,"flaubert"),qbt.forEach(t),_Fr=r(Ake," \u2014 "),ZW=n(Ake,"A",{href:!0});var Nbt=s(ZW);bFr=r(Nbt,"TFFlaubertForQuestionAnsweringSimple"),Nbt.forEach(t),vFr=r(Ake," (FlauBERT model)"),Ake.forEach(t),FFr=i(ge),ZM=n(ge,"LI",{});var yke=s(ZM);F2e=n(yke,"STRONG",{});var jbt=s(F2e);TFr=r(jbt,"funnel"),jbt.forEach(t),MFr=r(yke," \u2014 "),eH=n(yke,"A",{href:!0});var Dbt=s(eH);EFr=r(Dbt,"TFFunnelForQuestionAnswering"),Dbt.forEach(t),CFr=r(yke," (Funnel Transformer model)"),yke.forEach(t),wFr=i(ge),e4=n(ge,"LI",{});var Lke=s(e4);T2e=n(Lke,"STRONG",{});var Gbt=s(T2e);AFr=r(Gbt,"gptj"),Gbt.forEach(t),yFr=r(Lke," \u2014 "),oH=n(Lke,"A",{href:!0});var Obt=s(oH);LFr=r(Obt,"TFGPTJForQuestionAnswering"),Obt.forEach(t),xFr=r(Lke," (GPT-J model)"),Lke.forEach(t),$Fr=i(ge),o4=n(ge,"LI",{});var xke=s(o4);M2e=n(xke,"STRONG",{});var Vbt=s(M2e);kFr=r(Vbt,"longformer"),Vbt.forEach(t),SFr=r(xke," \u2014 "),rH=n(xke,"A",{href:!0});var Xbt=s(rH);RFr=r(Xbt,"TFLongformerForQuestionAnswering"),Xbt.forEach(t),BFr=r(xke," (Longformer model)"),xke.forEach(t),PFr=i(ge),r4=n(ge,"LI",{});var $ke=s(r4);E2e=n($ke,"STRONG",{});var zbt=s(E2e);IFr=r(zbt,"mobilebert"),zbt.forEach(t),qFr=r($ke," \u2014 "),tH=n($ke,"A",{href:!0});var Qbt=s(tH);NFr=r(Qbt,"TFMobileBertForQuestionAnswering"),Qbt.forEach(t),jFr=r($ke," (MobileBERT model)"),$ke.forEach(t),DFr=i(ge),t4=n(ge,"LI",{});var kke=s(t4);C2e=n(kke,"STRONG",{});var Wbt=s(C2e);GFr=r(Wbt,"mpnet"),Wbt.forEach(t),OFr=r(kke," \u2014 "),aH=n(kke,"A",{href:!0});var Hbt=s(aH);VFr=r(Hbt,"TFMPNetForQuestionAnswering"),Hbt.forEach(t),XFr=r(kke," (MPNet model)"),kke.forEach(t),zFr=i(ge),a4=n(ge,"LI",{});var Ske=s(a4);w2e=n(Ske,"STRONG",{});var Ubt=s(w2e);QFr=r(Ubt,"rembert"),Ubt.forEach(t),WFr=r(Ske," \u2014 "),nH=n(Ske,"A",{href:!0});var Jbt=s(nH);HFr=r(Jbt,"TFRemBertForQuestionAnswering"),Jbt.forEach(t),UFr=r(Ske," (RemBERT model)"),Ske.forEach(t),JFr=i(ge),n4=n(ge,"LI",{});var Rke=s(n4);A2e=n(Rke,"STRONG",{});var Ybt=s(A2e);YFr=r(Ybt,"roberta"),Ybt.forEach(t),KFr=r(Rke," \u2014 "),sH=n(Rke,"A",{href:!0});var Kbt=s(sH);ZFr=r(Kbt,"TFRobertaForQuestionAnswering"),Kbt.forEach(t),e6r=r(Rke," (RoBERTa model)"),Rke.forEach(t),o6r=i(ge),s4=n(ge,"LI",{});var Bke=s(s4);y2e=n(Bke,"STRONG",{});var Zbt=s(y2e);r6r=r(Zbt,"roformer"),Zbt.forEach(t),t6r=r(Bke," \u2014 "),lH=n(Bke,"A",{href:!0});var e2t=s(lH);a6r=r(e2t,"TFRoFormerForQuestionAnswering"),e2t.forEach(t),n6r=r(Bke," (RoFormer model)"),Bke.forEach(t),s6r=i(ge),l4=n(ge,"LI",{});var Pke=s(l4);L2e=n(Pke,"STRONG",{});var o2t=s(L2e);l6r=r(o2t,"xlm"),o2t.forEach(t),i6r=r(Pke," \u2014 "),iH=n(Pke,"A",{href:!0});var r2t=s(iH);d6r=r(r2t,"TFXLMForQuestionAnsweringSimple"),r2t.forEach(t),c6r=r(Pke," (XLM model)"),Pke.forEach(t),f6r=i(ge),i4=n(ge,"LI",{});var Ike=s(i4);x2e=n(Ike,"STRONG",{});var t2t=s(x2e);m6r=r(t2t,"xlm-roberta"),t2t.forEach(t),g6r=r(Ike," \u2014 "),dH=n(Ike,"A",{href:!0});var a2t=s(dH);h6r=r(a2t,"TFXLMRobertaForQuestionAnswering"),a2t.forEach(t),p6r=r(Ike," (XLM-RoBERTa model)"),Ike.forEach(t),u6r=i(ge),d4=n(ge,"LI",{});var qke=s(d4);$2e=n(qke,"STRONG",{});var n2t=s($2e);_6r=r(n2t,"xlnet"),n2t.forEach(t),b6r=r(qke," \u2014 "),cH=n(qke,"A",{href:!0});var s2t=s(cH);v6r=r(s2t,"TFXLNetForQuestionAnsweringSimple"),s2t.forEach(t),F6r=r(qke," (XLNet model)"),qke.forEach(t),ge.forEach(t),T6r=i(Al),T(c4.$$.fragment,Al),Al.forEach(t),wl.forEach(t),iPe=i(f),cc=n(f,"H2",{class:!0});var mqe=s(cc);f4=n(mqe,"A",{id:!0,class:!0,href:!0});var l2t=s(f4);k2e=n(l2t,"SPAN",{});var i2t=s(k2e);T(YL.$$.fragment,i2t),i2t.forEach(t),l2t.forEach(t),M6r=i(mqe),S2e=n(mqe,"SPAN",{});var d2t=s(S2e);E6r=r(d2t,"TFAutoModelForVision2Seq"),d2t.forEach(t),mqe.forEach(t),dPe=i(f),lr=n(f,"DIV",{class:!0});var yl=s(lr);T(KL.$$.fragment,yl),C6r=i(yl),fc=n(yl,"P",{});var cK=s(fc);w6r=r(cK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),fH=n(cK,"A",{href:!0});var c2t=s(fH);A6r=r(c2t,"from_pretrained()"),c2t.forEach(t),y6r=r(cK," class method or the "),mH=n(cK,"A",{href:!0});var f2t=s(mH);L6r=r(f2t,"from_config()"),f2t.forEach(t),x6r=r(cK,` class
method.`),cK.forEach(t),$6r=i(yl),ZL=n(yl,"P",{});var gqe=s(ZL);k6r=r(gqe,"This class cannot be instantiated directly using "),R2e=n(gqe,"CODE",{});var m2t=s(R2e);S6r=r(m2t,"__init__()"),m2t.forEach(t),R6r=r(gqe," (throws an error)."),gqe.forEach(t),B6r=i(yl),Bt=n(yl,"DIV",{class:!0});var qw=s(Bt);T(e8.$$.fragment,qw),P6r=i(qw),B2e=n(qw,"P",{});var g2t=s(B2e);I6r=r(g2t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),g2t.forEach(t),q6r=i(qw),mc=n(qw,"P",{});var fK=s(mc);N6r=r(fK,`Note:
Loading a model from its configuration file does `),P2e=n(fK,"STRONG",{});var h2t=s(P2e);j6r=r(h2t,"not"),h2t.forEach(t),D6r=r(fK,` load the model weights. It only affects the
model\u2019s configuration. Use `),gH=n(fK,"A",{href:!0});var p2t=s(gH);G6r=r(p2t,"from_pretrained()"),p2t.forEach(t),O6r=r(fK," to load the model weights."),fK.forEach(t),V6r=i(qw),T(m4.$$.fragment,qw),qw.forEach(t),X6r=i(yl),Br=n(yl,"DIV",{class:!0});var Ll=s(Br);T(o8.$$.fragment,Ll),z6r=i(Ll),I2e=n(Ll,"P",{});var u2t=s(I2e);Q6r=r(u2t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),u2t.forEach(t),W6r=i(Ll),sn=n(Ll,"P",{});var Nw=s(sn);H6r=r(Nw,"The model class to instantiate is selected based on the "),q2e=n(Nw,"CODE",{});var _2t=s(q2e);U6r=r(_2t,"model_type"),_2t.forEach(t),J6r=r(Nw,` property of the config object (either
passed as an argument or loaded from `),N2e=n(Nw,"CODE",{});var b2t=s(N2e);Y6r=r(b2t,"pretrained_model_name_or_path"),b2t.forEach(t),K6r=r(Nw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),j2e=n(Nw,"CODE",{});var v2t=s(j2e);Z6r=r(v2t,"pretrained_model_name_or_path"),v2t.forEach(t),eTr=r(Nw,":"),Nw.forEach(t),oTr=i(Ll),D2e=n(Ll,"UL",{});var F2t=s(D2e);g4=n(F2t,"LI",{});var Nke=s(g4);G2e=n(Nke,"STRONG",{});var T2t=s(G2e);rTr=r(T2t,"vision-encoder-decoder"),T2t.forEach(t),tTr=r(Nke," \u2014 "),hH=n(Nke,"A",{href:!0});var M2t=s(hH);aTr=r(M2t,"TFVisionEncoderDecoderModel"),M2t.forEach(t),nTr=r(Nke," (Vision Encoder decoder model)"),Nke.forEach(t),F2t.forEach(t),sTr=i(Ll),T(h4.$$.fragment,Ll),Ll.forEach(t),yl.forEach(t),cPe=i(f),gc=n(f,"H2",{class:!0});var hqe=s(gc);p4=n(hqe,"A",{id:!0,class:!0,href:!0});var E2t=s(p4);O2e=n(E2t,"SPAN",{});var C2t=s(O2e);T(r8.$$.fragment,C2t),C2t.forEach(t),E2t.forEach(t),lTr=i(hqe),V2e=n(hqe,"SPAN",{});var w2t=s(V2e);iTr=r(w2t,"TFAutoModelForSpeechSeq2Seq"),w2t.forEach(t),hqe.forEach(t),fPe=i(f),ir=n(f,"DIV",{class:!0});var xl=s(ir);T(t8.$$.fragment,xl),dTr=i(xl),hc=n(xl,"P",{});var mK=s(hc);cTr=r(mK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),pH=n(mK,"A",{href:!0});var A2t=s(pH);fTr=r(A2t,"from_pretrained()"),A2t.forEach(t),mTr=r(mK," class method or the "),uH=n(mK,"A",{href:!0});var y2t=s(uH);gTr=r(y2t,"from_config()"),y2t.forEach(t),hTr=r(mK,` class
method.`),mK.forEach(t),pTr=i(xl),a8=n(xl,"P",{});var pqe=s(a8);uTr=r(pqe,"This class cannot be instantiated directly using "),X2e=n(pqe,"CODE",{});var L2t=s(X2e);_Tr=r(L2t,"__init__()"),L2t.forEach(t),bTr=r(pqe," (throws an error)."),pqe.forEach(t),vTr=i(xl),Pt=n(xl,"DIV",{class:!0});var jw=s(Pt);T(n8.$$.fragment,jw),FTr=i(jw),z2e=n(jw,"P",{});var x2t=s(z2e);TTr=r(x2t,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),x2t.forEach(t),MTr=i(jw),pc=n(jw,"P",{});var gK=s(pc);ETr=r(gK,`Note:
Loading a model from its configuration file does `),Q2e=n(gK,"STRONG",{});var $2t=s(Q2e);CTr=r($2t,"not"),$2t.forEach(t),wTr=r(gK,` load the model weights. It only affects the
model\u2019s configuration. Use `),_H=n(gK,"A",{href:!0});var k2t=s(_H);ATr=r(k2t,"from_pretrained()"),k2t.forEach(t),yTr=r(gK," to load the model weights."),gK.forEach(t),LTr=i(jw),T(u4.$$.fragment,jw),jw.forEach(t),xTr=i(xl),Pr=n(xl,"DIV",{class:!0});var $l=s(Pr);T(s8.$$.fragment,$l),$Tr=i($l),W2e=n($l,"P",{});var S2t=s(W2e);kTr=r(S2t,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),S2t.forEach(t),STr=i($l),ln=n($l,"P",{});var Dw=s(ln);RTr=r(Dw,"The model class to instantiate is selected based on the "),H2e=n(Dw,"CODE",{});var R2t=s(H2e);BTr=r(R2t,"model_type"),R2t.forEach(t),PTr=r(Dw,` property of the config object (either
passed as an argument or loaded from `),U2e=n(Dw,"CODE",{});var B2t=s(U2e);ITr=r(B2t,"pretrained_model_name_or_path"),B2t.forEach(t),qTr=r(Dw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),J2e=n(Dw,"CODE",{});var P2t=s(J2e);NTr=r(P2t,"pretrained_model_name_or_path"),P2t.forEach(t),jTr=r(Dw,":"),Dw.forEach(t),DTr=i($l),Y2e=n($l,"UL",{});var I2t=s(Y2e);_4=n(I2t,"LI",{});var jke=s(_4);K2e=n(jke,"STRONG",{});var q2t=s(K2e);GTr=r(q2t,"speech_to_text"),q2t.forEach(t),OTr=r(jke," \u2014 "),bH=n(jke,"A",{href:!0});var N2t=s(bH);VTr=r(N2t,"TFSpeech2TextForConditionalGeneration"),N2t.forEach(t),XTr=r(jke," (Speech2Text model)"),jke.forEach(t),I2t.forEach(t),zTr=i($l),T(b4.$$.fragment,$l),$l.forEach(t),xl.forEach(t),mPe=i(f),uc=n(f,"H2",{class:!0});var uqe=s(uc);v4=n(uqe,"A",{id:!0,class:!0,href:!0});var j2t=s(v4);Z2e=n(j2t,"SPAN",{});var D2t=s(Z2e);T(l8.$$.fragment,D2t),D2t.forEach(t),j2t.forEach(t),QTr=i(uqe),e5e=n(uqe,"SPAN",{});var G2t=s(e5e);WTr=r(G2t,"FlaxAutoModel"),G2t.forEach(t),uqe.forEach(t),gPe=i(f),dr=n(f,"DIV",{class:!0});var kl=s(dr);T(i8.$$.fragment,kl),HTr=i(kl),_c=n(kl,"P",{});var hK=s(_c);UTr=r(hK,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),vH=n(hK,"A",{href:!0});var O2t=s(vH);JTr=r(O2t,"from_pretrained()"),O2t.forEach(t),YTr=r(hK," class method or the "),FH=n(hK,"A",{href:!0});var V2t=s(FH);KTr=r(V2t,"from_config()"),V2t.forEach(t),ZTr=r(hK,` class
method.`),hK.forEach(t),eMr=i(kl),d8=n(kl,"P",{});var _qe=s(d8);oMr=r(_qe,"This class cannot be instantiated directly using "),o5e=n(_qe,"CODE",{});var X2t=s(o5e);rMr=r(X2t,"__init__()"),X2t.forEach(t),tMr=r(_qe," (throws an error)."),_qe.forEach(t),aMr=i(kl),It=n(kl,"DIV",{class:!0});var Gw=s(It);T(c8.$$.fragment,Gw),nMr=i(Gw),r5e=n(Gw,"P",{});var z2t=s(r5e);sMr=r(z2t,"Instantiates one of the base model classes of the library from a configuration."),z2t.forEach(t),lMr=i(Gw),bc=n(Gw,"P",{});var pK=s(bc);iMr=r(pK,`Note:
Loading a model from its configuration file does `),t5e=n(pK,"STRONG",{});var Q2t=s(t5e);dMr=r(Q2t,"not"),Q2t.forEach(t),cMr=r(pK,` load the model weights. It only affects the
model\u2019s configuration. Use `),TH=n(pK,"A",{href:!0});var W2t=s(TH);fMr=r(W2t,"from_pretrained()"),W2t.forEach(t),mMr=r(pK," to load the model weights."),pK.forEach(t),gMr=i(Gw),T(F4.$$.fragment,Gw),Gw.forEach(t),hMr=i(kl),Ir=n(kl,"DIV",{class:!0});var Sl=s(Ir);T(f8.$$.fragment,Sl),pMr=i(Sl),a5e=n(Sl,"P",{});var H2t=s(a5e);uMr=r(H2t,"Instantiate one of the base model classes of the library from a pretrained model."),H2t.forEach(t),_Mr=i(Sl),dn=n(Sl,"P",{});var Ow=s(dn);bMr=r(Ow,"The model class to instantiate is selected based on the "),n5e=n(Ow,"CODE",{});var U2t=s(n5e);vMr=r(U2t,"model_type"),U2t.forEach(t),FMr=r(Ow,` property of the config object (either
passed as an argument or loaded from `),s5e=n(Ow,"CODE",{});var J2t=s(s5e);TMr=r(J2t,"pretrained_model_name_or_path"),J2t.forEach(t),MMr=r(Ow,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),l5e=n(Ow,"CODE",{});var Y2t=s(l5e);EMr=r(Y2t,"pretrained_model_name_or_path"),Y2t.forEach(t),CMr=r(Ow,":"),Ow.forEach(t),wMr=i(Sl),oe=n(Sl,"UL",{});var te=s(oe);T4=n(te,"LI",{});var Dke=s(T4);i5e=n(Dke,"STRONG",{});var K2t=s(i5e);AMr=r(K2t,"albert"),K2t.forEach(t),yMr=r(Dke," \u2014 "),MH=n(Dke,"A",{href:!0});var Z2t=s(MH);LMr=r(Z2t,"FlaxAlbertModel"),Z2t.forEach(t),xMr=r(Dke," (ALBERT model)"),Dke.forEach(t),$Mr=i(te),M4=n(te,"LI",{});var Gke=s(M4);d5e=n(Gke,"STRONG",{});var e5t=s(d5e);kMr=r(e5t,"bart"),e5t.forEach(t),SMr=r(Gke," \u2014 "),EH=n(Gke,"A",{href:!0});var o5t=s(EH);RMr=r(o5t,"FlaxBartModel"),o5t.forEach(t),BMr=r(Gke," (BART model)"),Gke.forEach(t),PMr=i(te),E4=n(te,"LI",{});var Oke=s(E4);c5e=n(Oke,"STRONG",{});var r5t=s(c5e);IMr=r(r5t,"beit"),r5t.forEach(t),qMr=r(Oke," \u2014 "),CH=n(Oke,"A",{href:!0});var t5t=s(CH);NMr=r(t5t,"FlaxBeitModel"),t5t.forEach(t),jMr=r(Oke," (BEiT model)"),Oke.forEach(t),DMr=i(te),C4=n(te,"LI",{});var Vke=s(C4);f5e=n(Vke,"STRONG",{});var a5t=s(f5e);GMr=r(a5t,"bert"),a5t.forEach(t),OMr=r(Vke," \u2014 "),wH=n(Vke,"A",{href:!0});var n5t=s(wH);VMr=r(n5t,"FlaxBertModel"),n5t.forEach(t),XMr=r(Vke," (BERT model)"),Vke.forEach(t),zMr=i(te),w4=n(te,"LI",{});var Xke=s(w4);m5e=n(Xke,"STRONG",{});var s5t=s(m5e);QMr=r(s5t,"big_bird"),s5t.forEach(t),WMr=r(Xke," \u2014 "),AH=n(Xke,"A",{href:!0});var l5t=s(AH);HMr=r(l5t,"FlaxBigBirdModel"),l5t.forEach(t),UMr=r(Xke," (BigBird model)"),Xke.forEach(t),JMr=i(te),A4=n(te,"LI",{});var zke=s(A4);g5e=n(zke,"STRONG",{});var i5t=s(g5e);YMr=r(i5t,"blenderbot"),i5t.forEach(t),KMr=r(zke," \u2014 "),yH=n(zke,"A",{href:!0});var d5t=s(yH);ZMr=r(d5t,"FlaxBlenderbotModel"),d5t.forEach(t),e4r=r(zke," (Blenderbot model)"),zke.forEach(t),o4r=i(te),y4=n(te,"LI",{});var Qke=s(y4);h5e=n(Qke,"STRONG",{});var c5t=s(h5e);r4r=r(c5t,"blenderbot-small"),c5t.forEach(t),t4r=r(Qke," \u2014 "),LH=n(Qke,"A",{href:!0});var f5t=s(LH);a4r=r(f5t,"FlaxBlenderbotSmallModel"),f5t.forEach(t),n4r=r(Qke," (BlenderbotSmall model)"),Qke.forEach(t),s4r=i(te),L4=n(te,"LI",{});var Wke=s(L4);p5e=n(Wke,"STRONG",{});var m5t=s(p5e);l4r=r(m5t,"clip"),m5t.forEach(t),i4r=r(Wke," \u2014 "),xH=n(Wke,"A",{href:!0});var g5t=s(xH);d4r=r(g5t,"FlaxCLIPModel"),g5t.forEach(t),c4r=r(Wke," (CLIP model)"),Wke.forEach(t),f4r=i(te),x4=n(te,"LI",{});var Hke=s(x4);u5e=n(Hke,"STRONG",{});var h5t=s(u5e);m4r=r(h5t,"distilbert"),h5t.forEach(t),g4r=r(Hke," \u2014 "),$H=n(Hke,"A",{href:!0});var p5t=s($H);h4r=r(p5t,"FlaxDistilBertModel"),p5t.forEach(t),p4r=r(Hke," (DistilBERT model)"),Hke.forEach(t),u4r=i(te),$4=n(te,"LI",{});var Uke=s($4);_5e=n(Uke,"STRONG",{});var u5t=s(_5e);_4r=r(u5t,"electra"),u5t.forEach(t),b4r=r(Uke," \u2014 "),kH=n(Uke,"A",{href:!0});var _5t=s(kH);v4r=r(_5t,"FlaxElectraModel"),_5t.forEach(t),F4r=r(Uke," (ELECTRA model)"),Uke.forEach(t),T4r=i(te),k4=n(te,"LI",{});var Jke=s(k4);b5e=n(Jke,"STRONG",{});var b5t=s(b5e);M4r=r(b5t,"gpt2"),b5t.forEach(t),E4r=r(Jke," \u2014 "),SH=n(Jke,"A",{href:!0});var v5t=s(SH);C4r=r(v5t,"FlaxGPT2Model"),v5t.forEach(t),w4r=r(Jke," (OpenAI GPT-2 model)"),Jke.forEach(t),A4r=i(te),S4=n(te,"LI",{});var Yke=s(S4);v5e=n(Yke,"STRONG",{});var F5t=s(v5e);y4r=r(F5t,"gpt_neo"),F5t.forEach(t),L4r=r(Yke," \u2014 "),RH=n(Yke,"A",{href:!0});var T5t=s(RH);x4r=r(T5t,"FlaxGPTNeoModel"),T5t.forEach(t),$4r=r(Yke," (GPT Neo model)"),Yke.forEach(t),k4r=i(te),R4=n(te,"LI",{});var Kke=s(R4);F5e=n(Kke,"STRONG",{});var M5t=s(F5e);S4r=r(M5t,"gptj"),M5t.forEach(t),R4r=r(Kke," \u2014 "),BH=n(Kke,"A",{href:!0});var E5t=s(BH);B4r=r(E5t,"FlaxGPTJModel"),E5t.forEach(t),P4r=r(Kke," (GPT-J model)"),Kke.forEach(t),I4r=i(te),B4=n(te,"LI",{});var Zke=s(B4);T5e=n(Zke,"STRONG",{});var C5t=s(T5e);q4r=r(C5t,"marian"),C5t.forEach(t),N4r=r(Zke," \u2014 "),PH=n(Zke,"A",{href:!0});var w5t=s(PH);j4r=r(w5t,"FlaxMarianModel"),w5t.forEach(t),D4r=r(Zke," (Marian model)"),Zke.forEach(t),G4r=i(te),P4=n(te,"LI",{});var eSe=s(P4);M5e=n(eSe,"STRONG",{});var A5t=s(M5e);O4r=r(A5t,"mbart"),A5t.forEach(t),V4r=r(eSe," \u2014 "),IH=n(eSe,"A",{href:!0});var y5t=s(IH);X4r=r(y5t,"FlaxMBartModel"),y5t.forEach(t),z4r=r(eSe," (mBART model)"),eSe.forEach(t),Q4r=i(te),I4=n(te,"LI",{});var oSe=s(I4);E5e=n(oSe,"STRONG",{});var L5t=s(E5e);W4r=r(L5t,"mt5"),L5t.forEach(t),H4r=r(oSe," \u2014 "),qH=n(oSe,"A",{href:!0});var x5t=s(qH);U4r=r(x5t,"FlaxMT5Model"),x5t.forEach(t),J4r=r(oSe," (mT5 model)"),oSe.forEach(t),Y4r=i(te),q4=n(te,"LI",{});var rSe=s(q4);C5e=n(rSe,"STRONG",{});var $5t=s(C5e);K4r=r($5t,"pegasus"),$5t.forEach(t),Z4r=r(rSe," \u2014 "),NH=n(rSe,"A",{href:!0});var k5t=s(NH);eEr=r(k5t,"FlaxPegasusModel"),k5t.forEach(t),oEr=r(rSe," (Pegasus model)"),rSe.forEach(t),rEr=i(te),N4=n(te,"LI",{});var tSe=s(N4);w5e=n(tSe,"STRONG",{});var S5t=s(w5e);tEr=r(S5t,"roberta"),S5t.forEach(t),aEr=r(tSe," \u2014 "),jH=n(tSe,"A",{href:!0});var R5t=s(jH);nEr=r(R5t,"FlaxRobertaModel"),R5t.forEach(t),sEr=r(tSe," (RoBERTa model)"),tSe.forEach(t),lEr=i(te),j4=n(te,"LI",{});var aSe=s(j4);A5e=n(aSe,"STRONG",{});var B5t=s(A5e);iEr=r(B5t,"roformer"),B5t.forEach(t),dEr=r(aSe," \u2014 "),DH=n(aSe,"A",{href:!0});var P5t=s(DH);cEr=r(P5t,"FlaxRoFormerModel"),P5t.forEach(t),fEr=r(aSe," (RoFormer model)"),aSe.forEach(t),mEr=i(te),D4=n(te,"LI",{});var nSe=s(D4);y5e=n(nSe,"STRONG",{});var I5t=s(y5e);gEr=r(I5t,"t5"),I5t.forEach(t),hEr=r(nSe," \u2014 "),GH=n(nSe,"A",{href:!0});var q5t=s(GH);pEr=r(q5t,"FlaxT5Model"),q5t.forEach(t),uEr=r(nSe," (T5 model)"),nSe.forEach(t),_Er=i(te),G4=n(te,"LI",{});var sSe=s(G4);L5e=n(sSe,"STRONG",{});var N5t=s(L5e);bEr=r(N5t,"vision-text-dual-encoder"),N5t.forEach(t),vEr=r(sSe," \u2014 "),OH=n(sSe,"A",{href:!0});var j5t=s(OH);FEr=r(j5t,"FlaxVisionTextDualEncoderModel"),j5t.forEach(t),TEr=r(sSe," (VisionTextDualEncoder model)"),sSe.forEach(t),MEr=i(te),O4=n(te,"LI",{});var lSe=s(O4);x5e=n(lSe,"STRONG",{});var D5t=s(x5e);EEr=r(D5t,"vit"),D5t.forEach(t),CEr=r(lSe," \u2014 "),VH=n(lSe,"A",{href:!0});var G5t=s(VH);wEr=r(G5t,"FlaxViTModel"),G5t.forEach(t),AEr=r(lSe," (ViT model)"),lSe.forEach(t),yEr=i(te),V4=n(te,"LI",{});var iSe=s(V4);$5e=n(iSe,"STRONG",{});var O5t=s($5e);LEr=r(O5t,"wav2vec2"),O5t.forEach(t),xEr=r(iSe," \u2014 "),XH=n(iSe,"A",{href:!0});var V5t=s(XH);$Er=r(V5t,"FlaxWav2Vec2Model"),V5t.forEach(t),kEr=r(iSe," (Wav2Vec2 model)"),iSe.forEach(t),SEr=i(te),X4=n(te,"LI",{});var dSe=s(X4);k5e=n(dSe,"STRONG",{});var X5t=s(k5e);REr=r(X5t,"xglm"),X5t.forEach(t),BEr=r(dSe," \u2014 "),zH=n(dSe,"A",{href:!0});var z5t=s(zH);PEr=r(z5t,"FlaxXGLMModel"),z5t.forEach(t),IEr=r(dSe," (XGLM model)"),dSe.forEach(t),qEr=i(te),z4=n(te,"LI",{});var cSe=s(z4);S5e=n(cSe,"STRONG",{});var Q5t=s(S5e);NEr=r(Q5t,"xlm-roberta"),Q5t.forEach(t),jEr=r(cSe," \u2014 "),QH=n(cSe,"A",{href:!0});var W5t=s(QH);DEr=r(W5t,"FlaxXLMRobertaModel"),W5t.forEach(t),GEr=r(cSe," (XLM-RoBERTa model)"),cSe.forEach(t),te.forEach(t),OEr=i(Sl),T(Q4.$$.fragment,Sl),Sl.forEach(t),kl.forEach(t),hPe=i(f),vc=n(f,"H2",{class:!0});var bqe=s(vc);W4=n(bqe,"A",{id:!0,class:!0,href:!0});var H5t=s(W4);R5e=n(H5t,"SPAN",{});var U5t=s(R5e);T(m8.$$.fragment,U5t),U5t.forEach(t),H5t.forEach(t),VEr=i(bqe),B5e=n(bqe,"SPAN",{});var J5t=s(B5e);XEr=r(J5t,"FlaxAutoModelForCausalLM"),J5t.forEach(t),bqe.forEach(t),pPe=i(f),cr=n(f,"DIV",{class:!0});var Rl=s(cr);T(g8.$$.fragment,Rl),zEr=i(Rl),Fc=n(Rl,"P",{});var uK=s(Fc);QEr=r(uK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),WH=n(uK,"A",{href:!0});var Y5t=s(WH);WEr=r(Y5t,"from_pretrained()"),Y5t.forEach(t),HEr=r(uK," class method or the "),HH=n(uK,"A",{href:!0});var K5t=s(HH);UEr=r(K5t,"from_config()"),K5t.forEach(t),JEr=r(uK,` class
method.`),uK.forEach(t),YEr=i(Rl),h8=n(Rl,"P",{});var vqe=s(h8);KEr=r(vqe,"This class cannot be instantiated directly using "),P5e=n(vqe,"CODE",{});var Z5t=s(P5e);ZEr=r(Z5t,"__init__()"),Z5t.forEach(t),eCr=r(vqe," (throws an error)."),vqe.forEach(t),oCr=i(Rl),qt=n(Rl,"DIV",{class:!0});var Vw=s(qt);T(p8.$$.fragment,Vw),rCr=i(Vw),I5e=n(Vw,"P",{});var evt=s(I5e);tCr=r(evt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),evt.forEach(t),aCr=i(Vw),Tc=n(Vw,"P",{});var _K=s(Tc);nCr=r(_K,`Note:
Loading a model from its configuration file does `),q5e=n(_K,"STRONG",{});var ovt=s(q5e);sCr=r(ovt,"not"),ovt.forEach(t),lCr=r(_K,` load the model weights. It only affects the
model\u2019s configuration. Use `),UH=n(_K,"A",{href:!0});var rvt=s(UH);iCr=r(rvt,"from_pretrained()"),rvt.forEach(t),dCr=r(_K," to load the model weights."),_K.forEach(t),cCr=i(Vw),T(H4.$$.fragment,Vw),Vw.forEach(t),fCr=i(Rl),qr=n(Rl,"DIV",{class:!0});var Bl=s(qr);T(u8.$$.fragment,Bl),mCr=i(Bl),N5e=n(Bl,"P",{});var tvt=s(N5e);gCr=r(tvt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),tvt.forEach(t),hCr=i(Bl),cn=n(Bl,"P",{});var Xw=s(cn);pCr=r(Xw,"The model class to instantiate is selected based on the "),j5e=n(Xw,"CODE",{});var avt=s(j5e);uCr=r(avt,"model_type"),avt.forEach(t),_Cr=r(Xw,` property of the config object (either
passed as an argument or loaded from `),D5e=n(Xw,"CODE",{});var nvt=s(D5e);bCr=r(nvt,"pretrained_model_name_or_path"),nvt.forEach(t),vCr=r(Xw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),G5e=n(Xw,"CODE",{});var svt=s(G5e);FCr=r(svt,"pretrained_model_name_or_path"),svt.forEach(t),TCr=r(Xw,":"),Xw.forEach(t),MCr=i(Bl),Oe=n(Bl,"UL",{});var Hr=s(Oe);U4=n(Hr,"LI",{});var fSe=s(U4);O5e=n(fSe,"STRONG",{});var lvt=s(O5e);ECr=r(lvt,"bart"),lvt.forEach(t),CCr=r(fSe," \u2014 "),JH=n(fSe,"A",{href:!0});var ivt=s(JH);wCr=r(ivt,"FlaxBartForCausalLM"),ivt.forEach(t),ACr=r(fSe," (BART model)"),fSe.forEach(t),yCr=i(Hr),J4=n(Hr,"LI",{});var mSe=s(J4);V5e=n(mSe,"STRONG",{});var dvt=s(V5e);LCr=r(dvt,"bert"),dvt.forEach(t),xCr=r(mSe," \u2014 "),X5e=n(mSe,"CODE",{});var cvt=s(X5e);$Cr=r(cvt,"FlaxBertForCausalLM"),cvt.forEach(t),kCr=r(mSe," (BERT model)"),mSe.forEach(t),SCr=i(Hr),Y4=n(Hr,"LI",{});var gSe=s(Y4);z5e=n(gSe,"STRONG",{});var fvt=s(z5e);RCr=r(fvt,"gpt2"),fvt.forEach(t),BCr=r(gSe," \u2014 "),YH=n(gSe,"A",{href:!0});var mvt=s(YH);PCr=r(mvt,"FlaxGPT2LMHeadModel"),mvt.forEach(t),ICr=r(gSe," (OpenAI GPT-2 model)"),gSe.forEach(t),qCr=i(Hr),K4=n(Hr,"LI",{});var hSe=s(K4);Q5e=n(hSe,"STRONG",{});var gvt=s(Q5e);NCr=r(gvt,"gpt_neo"),gvt.forEach(t),jCr=r(hSe," \u2014 "),KH=n(hSe,"A",{href:!0});var hvt=s(KH);DCr=r(hvt,"FlaxGPTNeoForCausalLM"),hvt.forEach(t),GCr=r(hSe," (GPT Neo model)"),hSe.forEach(t),OCr=i(Hr),Z4=n(Hr,"LI",{});var pSe=s(Z4);W5e=n(pSe,"STRONG",{});var pvt=s(W5e);VCr=r(pvt,"gptj"),pvt.forEach(t),XCr=r(pSe," \u2014 "),ZH=n(pSe,"A",{href:!0});var uvt=s(ZH);zCr=r(uvt,"FlaxGPTJForCausalLM"),uvt.forEach(t),QCr=r(pSe," (GPT-J model)"),pSe.forEach(t),WCr=i(Hr),eE=n(Hr,"LI",{});var uSe=s(eE);H5e=n(uSe,"STRONG",{});var _vt=s(H5e);HCr=r(_vt,"roberta"),_vt.forEach(t),UCr=r(uSe," \u2014 "),U5e=n(uSe,"CODE",{});var bvt=s(U5e);JCr=r(bvt,"FlaxRobertaForCausalLM"),bvt.forEach(t),YCr=r(uSe," (RoBERTa model)"),uSe.forEach(t),KCr=i(Hr),oE=n(Hr,"LI",{});var _Se=s(oE);J5e=n(_Se,"STRONG",{});var vvt=s(J5e);ZCr=r(vvt,"xglm"),vvt.forEach(t),e3r=r(_Se," \u2014 "),eU=n(_Se,"A",{href:!0});var Fvt=s(eU);o3r=r(Fvt,"FlaxXGLMForCausalLM"),Fvt.forEach(t),r3r=r(_Se," (XGLM model)"),_Se.forEach(t),Hr.forEach(t),t3r=i(Bl),T(rE.$$.fragment,Bl),Bl.forEach(t),Rl.forEach(t),uPe=i(f),Mc=n(f,"H2",{class:!0});var Fqe=s(Mc);tE=n(Fqe,"A",{id:!0,class:!0,href:!0});var Tvt=s(tE);Y5e=n(Tvt,"SPAN",{});var Mvt=s(Y5e);T(_8.$$.fragment,Mvt),Mvt.forEach(t),Tvt.forEach(t),a3r=i(Fqe),K5e=n(Fqe,"SPAN",{});var Evt=s(K5e);n3r=r(Evt,"FlaxAutoModelForPreTraining"),Evt.forEach(t),Fqe.forEach(t),_Pe=i(f),fr=n(f,"DIV",{class:!0});var Pl=s(fr);T(b8.$$.fragment,Pl),s3r=i(Pl),Ec=n(Pl,"P",{});var bK=s(Ec);l3r=r(bK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),oU=n(bK,"A",{href:!0});var Cvt=s(oU);i3r=r(Cvt,"from_pretrained()"),Cvt.forEach(t),d3r=r(bK," class method or the "),rU=n(bK,"A",{href:!0});var wvt=s(rU);c3r=r(wvt,"from_config()"),wvt.forEach(t),f3r=r(bK,` class
method.`),bK.forEach(t),m3r=i(Pl),v8=n(Pl,"P",{});var Tqe=s(v8);g3r=r(Tqe,"This class cannot be instantiated directly using "),Z5e=n(Tqe,"CODE",{});var Avt=s(Z5e);h3r=r(Avt,"__init__()"),Avt.forEach(t),p3r=r(Tqe," (throws an error)."),Tqe.forEach(t),u3r=i(Pl),Nt=n(Pl,"DIV",{class:!0});var zw=s(Nt);T(F8.$$.fragment,zw),_3r=i(zw),eve=n(zw,"P",{});var yvt=s(eve);b3r=r(yvt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),yvt.forEach(t),v3r=i(zw),Cc=n(zw,"P",{});var vK=s(Cc);F3r=r(vK,`Note:
Loading a model from its configuration file does `),ove=n(vK,"STRONG",{});var Lvt=s(ove);T3r=r(Lvt,"not"),Lvt.forEach(t),M3r=r(vK,` load the model weights. It only affects the
model\u2019s configuration. Use `),tU=n(vK,"A",{href:!0});var xvt=s(tU);E3r=r(xvt,"from_pretrained()"),xvt.forEach(t),C3r=r(vK," to load the model weights."),vK.forEach(t),w3r=i(zw),T(aE.$$.fragment,zw),zw.forEach(t),A3r=i(Pl),Nr=n(Pl,"DIV",{class:!0});var Il=s(Nr);T(T8.$$.fragment,Il),y3r=i(Il),rve=n(Il,"P",{});var $vt=s(rve);L3r=r($vt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),$vt.forEach(t),x3r=i(Il),fn=n(Il,"P",{});var Qw=s(fn);$3r=r(Qw,"The model class to instantiate is selected based on the "),tve=n(Qw,"CODE",{});var kvt=s(tve);k3r=r(kvt,"model_type"),kvt.forEach(t),S3r=r(Qw,` property of the config object (either
passed as an argument or loaded from `),ave=n(Qw,"CODE",{});var Svt=s(ave);R3r=r(Svt,"pretrained_model_name_or_path"),Svt.forEach(t),B3r=r(Qw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nve=n(Qw,"CODE",{});var Rvt=s(nve);P3r=r(Rvt,"pretrained_model_name_or_path"),Rvt.forEach(t),I3r=r(Qw,":"),Qw.forEach(t),q3r=i(Il),Me=n(Il,"UL",{});var we=s(Me);nE=n(we,"LI",{});var bSe=s(nE);sve=n(bSe,"STRONG",{});var Bvt=s(sve);N3r=r(Bvt,"albert"),Bvt.forEach(t),j3r=r(bSe," \u2014 "),aU=n(bSe,"A",{href:!0});var Pvt=s(aU);D3r=r(Pvt,"FlaxAlbertForPreTraining"),Pvt.forEach(t),G3r=r(bSe," (ALBERT model)"),bSe.forEach(t),O3r=i(we),sE=n(we,"LI",{});var vSe=s(sE);lve=n(vSe,"STRONG",{});var Ivt=s(lve);V3r=r(Ivt,"bart"),Ivt.forEach(t),X3r=r(vSe," \u2014 "),nU=n(vSe,"A",{href:!0});var qvt=s(nU);z3r=r(qvt,"FlaxBartForConditionalGeneration"),qvt.forEach(t),Q3r=r(vSe," (BART model)"),vSe.forEach(t),W3r=i(we),lE=n(we,"LI",{});var FSe=s(lE);ive=n(FSe,"STRONG",{});var Nvt=s(ive);H3r=r(Nvt,"bert"),Nvt.forEach(t),U3r=r(FSe," \u2014 "),sU=n(FSe,"A",{href:!0});var jvt=s(sU);J3r=r(jvt,"FlaxBertForPreTraining"),jvt.forEach(t),Y3r=r(FSe," (BERT model)"),FSe.forEach(t),K3r=i(we),iE=n(we,"LI",{});var TSe=s(iE);dve=n(TSe,"STRONG",{});var Dvt=s(dve);Z3r=r(Dvt,"big_bird"),Dvt.forEach(t),ewr=r(TSe," \u2014 "),lU=n(TSe,"A",{href:!0});var Gvt=s(lU);owr=r(Gvt,"FlaxBigBirdForPreTraining"),Gvt.forEach(t),rwr=r(TSe," (BigBird model)"),TSe.forEach(t),twr=i(we),dE=n(we,"LI",{});var MSe=s(dE);cve=n(MSe,"STRONG",{});var Ovt=s(cve);awr=r(Ovt,"electra"),Ovt.forEach(t),nwr=r(MSe," \u2014 "),iU=n(MSe,"A",{href:!0});var Vvt=s(iU);swr=r(Vvt,"FlaxElectraForPreTraining"),Vvt.forEach(t),lwr=r(MSe," (ELECTRA model)"),MSe.forEach(t),iwr=i(we),cE=n(we,"LI",{});var ESe=s(cE);fve=n(ESe,"STRONG",{});var Xvt=s(fve);dwr=r(Xvt,"mbart"),Xvt.forEach(t),cwr=r(ESe," \u2014 "),dU=n(ESe,"A",{href:!0});var zvt=s(dU);fwr=r(zvt,"FlaxMBartForConditionalGeneration"),zvt.forEach(t),mwr=r(ESe," (mBART model)"),ESe.forEach(t),gwr=i(we),fE=n(we,"LI",{});var CSe=s(fE);mve=n(CSe,"STRONG",{});var Qvt=s(mve);hwr=r(Qvt,"mt5"),Qvt.forEach(t),pwr=r(CSe," \u2014 "),cU=n(CSe,"A",{href:!0});var Wvt=s(cU);uwr=r(Wvt,"FlaxMT5ForConditionalGeneration"),Wvt.forEach(t),_wr=r(CSe," (mT5 model)"),CSe.forEach(t),bwr=i(we),mE=n(we,"LI",{});var wSe=s(mE);gve=n(wSe,"STRONG",{});var Hvt=s(gve);vwr=r(Hvt,"roberta"),Hvt.forEach(t),Fwr=r(wSe," \u2014 "),fU=n(wSe,"A",{href:!0});var Uvt=s(fU);Twr=r(Uvt,"FlaxRobertaForMaskedLM"),Uvt.forEach(t),Mwr=r(wSe," (RoBERTa model)"),wSe.forEach(t),Ewr=i(we),gE=n(we,"LI",{});var ASe=s(gE);hve=n(ASe,"STRONG",{});var Jvt=s(hve);Cwr=r(Jvt,"roformer"),Jvt.forEach(t),wwr=r(ASe," \u2014 "),mU=n(ASe,"A",{href:!0});var Yvt=s(mU);Awr=r(Yvt,"FlaxRoFormerForMaskedLM"),Yvt.forEach(t),ywr=r(ASe," (RoFormer model)"),ASe.forEach(t),Lwr=i(we),hE=n(we,"LI",{});var ySe=s(hE);pve=n(ySe,"STRONG",{});var Kvt=s(pve);xwr=r(Kvt,"t5"),Kvt.forEach(t),$wr=r(ySe," \u2014 "),gU=n(ySe,"A",{href:!0});var Zvt=s(gU);kwr=r(Zvt,"FlaxT5ForConditionalGeneration"),Zvt.forEach(t),Swr=r(ySe," (T5 model)"),ySe.forEach(t),Rwr=i(we),pE=n(we,"LI",{});var LSe=s(pE);uve=n(LSe,"STRONG",{});var eFt=s(uve);Bwr=r(eFt,"wav2vec2"),eFt.forEach(t),Pwr=r(LSe," \u2014 "),hU=n(LSe,"A",{href:!0});var oFt=s(hU);Iwr=r(oFt,"FlaxWav2Vec2ForPreTraining"),oFt.forEach(t),qwr=r(LSe," (Wav2Vec2 model)"),LSe.forEach(t),Nwr=i(we),uE=n(we,"LI",{});var xSe=s(uE);_ve=n(xSe,"STRONG",{});var rFt=s(_ve);jwr=r(rFt,"xlm-roberta"),rFt.forEach(t),Dwr=r(xSe," \u2014 "),pU=n(xSe,"A",{href:!0});var tFt=s(pU);Gwr=r(tFt,"FlaxXLMRobertaForMaskedLM"),tFt.forEach(t),Owr=r(xSe," (XLM-RoBERTa model)"),xSe.forEach(t),we.forEach(t),Vwr=i(Il),T(_E.$$.fragment,Il),Il.forEach(t),Pl.forEach(t),bPe=i(f),wc=n(f,"H2",{class:!0});var Mqe=s(wc);bE=n(Mqe,"A",{id:!0,class:!0,href:!0});var aFt=s(bE);bve=n(aFt,"SPAN",{});var nFt=s(bve);T(M8.$$.fragment,nFt),nFt.forEach(t),aFt.forEach(t),Xwr=i(Mqe),vve=n(Mqe,"SPAN",{});var sFt=s(vve);zwr=r(sFt,"FlaxAutoModelForMaskedLM"),sFt.forEach(t),Mqe.forEach(t),vPe=i(f),mr=n(f,"DIV",{class:!0});var ql=s(mr);T(E8.$$.fragment,ql),Qwr=i(ql),Ac=n(ql,"P",{});var FK=s(Ac);Wwr=r(FK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),uU=n(FK,"A",{href:!0});var lFt=s(uU);Hwr=r(lFt,"from_pretrained()"),lFt.forEach(t),Uwr=r(FK," class method or the "),_U=n(FK,"A",{href:!0});var iFt=s(_U);Jwr=r(iFt,"from_config()"),iFt.forEach(t),Ywr=r(FK,` class
method.`),FK.forEach(t),Kwr=i(ql),C8=n(ql,"P",{});var Eqe=s(C8);Zwr=r(Eqe,"This class cannot be instantiated directly using "),Fve=n(Eqe,"CODE",{});var dFt=s(Fve);eAr=r(dFt,"__init__()"),dFt.forEach(t),oAr=r(Eqe," (throws an error)."),Eqe.forEach(t),rAr=i(ql),jt=n(ql,"DIV",{class:!0});var Ww=s(jt);T(w8.$$.fragment,Ww),tAr=i(Ww),Tve=n(Ww,"P",{});var cFt=s(Tve);aAr=r(cFt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),cFt.forEach(t),nAr=i(Ww),yc=n(Ww,"P",{});var TK=s(yc);sAr=r(TK,`Note:
Loading a model from its configuration file does `),Mve=n(TK,"STRONG",{});var fFt=s(Mve);lAr=r(fFt,"not"),fFt.forEach(t),iAr=r(TK,` load the model weights. It only affects the
model\u2019s configuration. Use `),bU=n(TK,"A",{href:!0});var mFt=s(bU);dAr=r(mFt,"from_pretrained()"),mFt.forEach(t),cAr=r(TK," to load the model weights."),TK.forEach(t),fAr=i(Ww),T(vE.$$.fragment,Ww),Ww.forEach(t),mAr=i(ql),jr=n(ql,"DIV",{class:!0});var Nl=s(jr);T(A8.$$.fragment,Nl),gAr=i(Nl),Eve=n(Nl,"P",{});var gFt=s(Eve);hAr=r(gFt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),gFt.forEach(t),pAr=i(Nl),mn=n(Nl,"P",{});var Hw=s(mn);uAr=r(Hw,"The model class to instantiate is selected based on the "),Cve=n(Hw,"CODE",{});var hFt=s(Cve);_Ar=r(hFt,"model_type"),hFt.forEach(t),bAr=r(Hw,` property of the config object (either
passed as an argument or loaded from `),wve=n(Hw,"CODE",{});var pFt=s(wve);vAr=r(pFt,"pretrained_model_name_or_path"),pFt.forEach(t),FAr=r(Hw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ave=n(Hw,"CODE",{});var uFt=s(Ave);TAr=r(uFt,"pretrained_model_name_or_path"),uFt.forEach(t),MAr=r(Hw,":"),Hw.forEach(t),EAr=i(Nl),Le=n(Nl,"UL",{});var Re=s(Le);FE=n(Re,"LI",{});var $Se=s(FE);yve=n($Se,"STRONG",{});var _Ft=s(yve);CAr=r(_Ft,"albert"),_Ft.forEach(t),wAr=r($Se," \u2014 "),vU=n($Se,"A",{href:!0});var bFt=s(vU);AAr=r(bFt,"FlaxAlbertForMaskedLM"),bFt.forEach(t),yAr=r($Se," (ALBERT model)"),$Se.forEach(t),LAr=i(Re),TE=n(Re,"LI",{});var kSe=s(TE);Lve=n(kSe,"STRONG",{});var vFt=s(Lve);xAr=r(vFt,"bart"),vFt.forEach(t),$Ar=r(kSe," \u2014 "),FU=n(kSe,"A",{href:!0});var FFt=s(FU);kAr=r(FFt,"FlaxBartForConditionalGeneration"),FFt.forEach(t),SAr=r(kSe," (BART model)"),kSe.forEach(t),RAr=i(Re),ME=n(Re,"LI",{});var SSe=s(ME);xve=n(SSe,"STRONG",{});var TFt=s(xve);BAr=r(TFt,"bert"),TFt.forEach(t),PAr=r(SSe," \u2014 "),TU=n(SSe,"A",{href:!0});var MFt=s(TU);IAr=r(MFt,"FlaxBertForMaskedLM"),MFt.forEach(t),qAr=r(SSe," (BERT model)"),SSe.forEach(t),NAr=i(Re),EE=n(Re,"LI",{});var RSe=s(EE);$ve=n(RSe,"STRONG",{});var EFt=s($ve);jAr=r(EFt,"big_bird"),EFt.forEach(t),DAr=r(RSe," \u2014 "),MU=n(RSe,"A",{href:!0});var CFt=s(MU);GAr=r(CFt,"FlaxBigBirdForMaskedLM"),CFt.forEach(t),OAr=r(RSe," (BigBird model)"),RSe.forEach(t),VAr=i(Re),CE=n(Re,"LI",{});var BSe=s(CE);kve=n(BSe,"STRONG",{});var wFt=s(kve);XAr=r(wFt,"distilbert"),wFt.forEach(t),zAr=r(BSe," \u2014 "),EU=n(BSe,"A",{href:!0});var AFt=s(EU);QAr=r(AFt,"FlaxDistilBertForMaskedLM"),AFt.forEach(t),WAr=r(BSe," (DistilBERT model)"),BSe.forEach(t),HAr=i(Re),wE=n(Re,"LI",{});var PSe=s(wE);Sve=n(PSe,"STRONG",{});var yFt=s(Sve);UAr=r(yFt,"electra"),yFt.forEach(t),JAr=r(PSe," \u2014 "),CU=n(PSe,"A",{href:!0});var LFt=s(CU);YAr=r(LFt,"FlaxElectraForMaskedLM"),LFt.forEach(t),KAr=r(PSe," (ELECTRA model)"),PSe.forEach(t),ZAr=i(Re),AE=n(Re,"LI",{});var ISe=s(AE);Rve=n(ISe,"STRONG",{});var xFt=s(Rve);e0r=r(xFt,"mbart"),xFt.forEach(t),o0r=r(ISe," \u2014 "),wU=n(ISe,"A",{href:!0});var $Ft=s(wU);r0r=r($Ft,"FlaxMBartForConditionalGeneration"),$Ft.forEach(t),t0r=r(ISe," (mBART model)"),ISe.forEach(t),a0r=i(Re),yE=n(Re,"LI",{});var qSe=s(yE);Bve=n(qSe,"STRONG",{});var kFt=s(Bve);n0r=r(kFt,"roberta"),kFt.forEach(t),s0r=r(qSe," \u2014 "),AU=n(qSe,"A",{href:!0});var SFt=s(AU);l0r=r(SFt,"FlaxRobertaForMaskedLM"),SFt.forEach(t),i0r=r(qSe," (RoBERTa model)"),qSe.forEach(t),d0r=i(Re),LE=n(Re,"LI",{});var NSe=s(LE);Pve=n(NSe,"STRONG",{});var RFt=s(Pve);c0r=r(RFt,"roformer"),RFt.forEach(t),f0r=r(NSe," \u2014 "),yU=n(NSe,"A",{href:!0});var BFt=s(yU);m0r=r(BFt,"FlaxRoFormerForMaskedLM"),BFt.forEach(t),g0r=r(NSe," (RoFormer model)"),NSe.forEach(t),h0r=i(Re),xE=n(Re,"LI",{});var jSe=s(xE);Ive=n(jSe,"STRONG",{});var PFt=s(Ive);p0r=r(PFt,"xlm-roberta"),PFt.forEach(t),u0r=r(jSe," \u2014 "),LU=n(jSe,"A",{href:!0});var IFt=s(LU);_0r=r(IFt,"FlaxXLMRobertaForMaskedLM"),IFt.forEach(t),b0r=r(jSe," (XLM-RoBERTa model)"),jSe.forEach(t),Re.forEach(t),v0r=i(Nl),T($E.$$.fragment,Nl),Nl.forEach(t),ql.forEach(t),FPe=i(f),Lc=n(f,"H2",{class:!0});var Cqe=s(Lc);kE=n(Cqe,"A",{id:!0,class:!0,href:!0});var qFt=s(kE);qve=n(qFt,"SPAN",{});var NFt=s(qve);T(y8.$$.fragment,NFt),NFt.forEach(t),qFt.forEach(t),F0r=i(Cqe),Nve=n(Cqe,"SPAN",{});var jFt=s(Nve);T0r=r(jFt,"FlaxAutoModelForSeq2SeqLM"),jFt.forEach(t),Cqe.forEach(t),TPe=i(f),gr=n(f,"DIV",{class:!0});var jl=s(gr);T(L8.$$.fragment,jl),M0r=i(jl),xc=n(jl,"P",{});var MK=s(xc);E0r=r(MK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),xU=n(MK,"A",{href:!0});var DFt=s(xU);C0r=r(DFt,"from_pretrained()"),DFt.forEach(t),w0r=r(MK," class method or the "),$U=n(MK,"A",{href:!0});var GFt=s($U);A0r=r(GFt,"from_config()"),GFt.forEach(t),y0r=r(MK,` class
method.`),MK.forEach(t),L0r=i(jl),x8=n(jl,"P",{});var wqe=s(x8);x0r=r(wqe,"This class cannot be instantiated directly using "),jve=n(wqe,"CODE",{});var OFt=s(jve);$0r=r(OFt,"__init__()"),OFt.forEach(t),k0r=r(wqe," (throws an error)."),wqe.forEach(t),S0r=i(jl),Dt=n(jl,"DIV",{class:!0});var Uw=s(Dt);T($8.$$.fragment,Uw),R0r=i(Uw),Dve=n(Uw,"P",{});var VFt=s(Dve);B0r=r(VFt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),VFt.forEach(t),P0r=i(Uw),$c=n(Uw,"P",{});var EK=s($c);I0r=r(EK,`Note:
Loading a model from its configuration file does `),Gve=n(EK,"STRONG",{});var XFt=s(Gve);q0r=r(XFt,"not"),XFt.forEach(t),N0r=r(EK,` load the model weights. It only affects the
model\u2019s configuration. Use `),kU=n(EK,"A",{href:!0});var zFt=s(kU);j0r=r(zFt,"from_pretrained()"),zFt.forEach(t),D0r=r(EK," to load the model weights."),EK.forEach(t),G0r=i(Uw),T(SE.$$.fragment,Uw),Uw.forEach(t),O0r=i(jl),Dr=n(jl,"DIV",{class:!0});var Dl=s(Dr);T(k8.$$.fragment,Dl),V0r=i(Dl),Ove=n(Dl,"P",{});var QFt=s(Ove);X0r=r(QFt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),QFt.forEach(t),z0r=i(Dl),gn=n(Dl,"P",{});var Jw=s(gn);Q0r=r(Jw,"The model class to instantiate is selected based on the "),Vve=n(Jw,"CODE",{});var WFt=s(Vve);W0r=r(WFt,"model_type"),WFt.forEach(t),H0r=r(Jw,` property of the config object (either
passed as an argument or loaded from `),Xve=n(Jw,"CODE",{});var HFt=s(Xve);U0r=r(HFt,"pretrained_model_name_or_path"),HFt.forEach(t),J0r=r(Jw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zve=n(Jw,"CODE",{});var UFt=s(zve);Y0r=r(UFt,"pretrained_model_name_or_path"),UFt.forEach(t),K0r=r(Jw,":"),Jw.forEach(t),Z0r=i(Dl),ke=n(Dl,"UL",{});var Ge=s(ke);RE=n(Ge,"LI",{});var DSe=s(RE);Qve=n(DSe,"STRONG",{});var JFt=s(Qve);eyr=r(JFt,"bart"),JFt.forEach(t),oyr=r(DSe," \u2014 "),SU=n(DSe,"A",{href:!0});var YFt=s(SU);ryr=r(YFt,"FlaxBartForConditionalGeneration"),YFt.forEach(t),tyr=r(DSe," (BART model)"),DSe.forEach(t),ayr=i(Ge),BE=n(Ge,"LI",{});var GSe=s(BE);Wve=n(GSe,"STRONG",{});var KFt=s(Wve);nyr=r(KFt,"blenderbot"),KFt.forEach(t),syr=r(GSe," \u2014 "),RU=n(GSe,"A",{href:!0});var ZFt=s(RU);lyr=r(ZFt,"FlaxBlenderbotForConditionalGeneration"),ZFt.forEach(t),iyr=r(GSe," (Blenderbot model)"),GSe.forEach(t),dyr=i(Ge),PE=n(Ge,"LI",{});var OSe=s(PE);Hve=n(OSe,"STRONG",{});var e6t=s(Hve);cyr=r(e6t,"blenderbot-small"),e6t.forEach(t),fyr=r(OSe," \u2014 "),BU=n(OSe,"A",{href:!0});var o6t=s(BU);myr=r(o6t,"FlaxBlenderbotSmallForConditionalGeneration"),o6t.forEach(t),gyr=r(OSe," (BlenderbotSmall model)"),OSe.forEach(t),hyr=i(Ge),IE=n(Ge,"LI",{});var VSe=s(IE);Uve=n(VSe,"STRONG",{});var r6t=s(Uve);pyr=r(r6t,"encoder-decoder"),r6t.forEach(t),uyr=r(VSe," \u2014 "),PU=n(VSe,"A",{href:!0});var t6t=s(PU);_yr=r(t6t,"FlaxEncoderDecoderModel"),t6t.forEach(t),byr=r(VSe," (Encoder decoder model)"),VSe.forEach(t),vyr=i(Ge),qE=n(Ge,"LI",{});var XSe=s(qE);Jve=n(XSe,"STRONG",{});var a6t=s(Jve);Fyr=r(a6t,"marian"),a6t.forEach(t),Tyr=r(XSe," \u2014 "),IU=n(XSe,"A",{href:!0});var n6t=s(IU);Myr=r(n6t,"FlaxMarianMTModel"),n6t.forEach(t),Eyr=r(XSe," (Marian model)"),XSe.forEach(t),Cyr=i(Ge),NE=n(Ge,"LI",{});var zSe=s(NE);Yve=n(zSe,"STRONG",{});var s6t=s(Yve);wyr=r(s6t,"mbart"),s6t.forEach(t),Ayr=r(zSe," \u2014 "),qU=n(zSe,"A",{href:!0});var l6t=s(qU);yyr=r(l6t,"FlaxMBartForConditionalGeneration"),l6t.forEach(t),Lyr=r(zSe," (mBART model)"),zSe.forEach(t),xyr=i(Ge),jE=n(Ge,"LI",{});var QSe=s(jE);Kve=n(QSe,"STRONG",{});var i6t=s(Kve);$yr=r(i6t,"mt5"),i6t.forEach(t),kyr=r(QSe," \u2014 "),NU=n(QSe,"A",{href:!0});var d6t=s(NU);Syr=r(d6t,"FlaxMT5ForConditionalGeneration"),d6t.forEach(t),Ryr=r(QSe," (mT5 model)"),QSe.forEach(t),Byr=i(Ge),DE=n(Ge,"LI",{});var WSe=s(DE);Zve=n(WSe,"STRONG",{});var c6t=s(Zve);Pyr=r(c6t,"pegasus"),c6t.forEach(t),Iyr=r(WSe," \u2014 "),jU=n(WSe,"A",{href:!0});var f6t=s(jU);qyr=r(f6t,"FlaxPegasusForConditionalGeneration"),f6t.forEach(t),Nyr=r(WSe," (Pegasus model)"),WSe.forEach(t),jyr=i(Ge),GE=n(Ge,"LI",{});var HSe=s(GE);eFe=n(HSe,"STRONG",{});var m6t=s(eFe);Dyr=r(m6t,"t5"),m6t.forEach(t),Gyr=r(HSe," \u2014 "),DU=n(HSe,"A",{href:!0});var g6t=s(DU);Oyr=r(g6t,"FlaxT5ForConditionalGeneration"),g6t.forEach(t),Vyr=r(HSe," (T5 model)"),HSe.forEach(t),Ge.forEach(t),Xyr=i(Dl),T(OE.$$.fragment,Dl),Dl.forEach(t),jl.forEach(t),MPe=i(f),kc=n(f,"H2",{class:!0});var Aqe=s(kc);VE=n(Aqe,"A",{id:!0,class:!0,href:!0});var h6t=s(VE);oFe=n(h6t,"SPAN",{});var p6t=s(oFe);T(S8.$$.fragment,p6t),p6t.forEach(t),h6t.forEach(t),zyr=i(Aqe),rFe=n(Aqe,"SPAN",{});var u6t=s(rFe);Qyr=r(u6t,"FlaxAutoModelForSequenceClassification"),u6t.forEach(t),Aqe.forEach(t),EPe=i(f),hr=n(f,"DIV",{class:!0});var Gl=s(hr);T(R8.$$.fragment,Gl),Wyr=i(Gl),Sc=n(Gl,"P",{});var CK=s(Sc);Hyr=r(CK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),GU=n(CK,"A",{href:!0});var _6t=s(GU);Uyr=r(_6t,"from_pretrained()"),_6t.forEach(t),Jyr=r(CK," class method or the "),OU=n(CK,"A",{href:!0});var b6t=s(OU);Yyr=r(b6t,"from_config()"),b6t.forEach(t),Kyr=r(CK,` class
method.`),CK.forEach(t),Zyr=i(Gl),B8=n(Gl,"P",{});var yqe=s(B8);eLr=r(yqe,"This class cannot be instantiated directly using "),tFe=n(yqe,"CODE",{});var v6t=s(tFe);oLr=r(v6t,"__init__()"),v6t.forEach(t),rLr=r(yqe," (throws an error)."),yqe.forEach(t),tLr=i(Gl),Gt=n(Gl,"DIV",{class:!0});var Yw=s(Gt);T(P8.$$.fragment,Yw),aLr=i(Yw),aFe=n(Yw,"P",{});var F6t=s(aFe);nLr=r(F6t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),F6t.forEach(t),sLr=i(Yw),Rc=n(Yw,"P",{});var wK=s(Rc);lLr=r(wK,`Note:
Loading a model from its configuration file does `),nFe=n(wK,"STRONG",{});var T6t=s(nFe);iLr=r(T6t,"not"),T6t.forEach(t),dLr=r(wK,` load the model weights. It only affects the
model\u2019s configuration. Use `),VU=n(wK,"A",{href:!0});var M6t=s(VU);cLr=r(M6t,"from_pretrained()"),M6t.forEach(t),fLr=r(wK," to load the model weights."),wK.forEach(t),mLr=i(Yw),T(XE.$$.fragment,Yw),Yw.forEach(t),gLr=i(Gl),Gr=n(Gl,"DIV",{class:!0});var Ol=s(Gr);T(I8.$$.fragment,Ol),hLr=i(Ol),sFe=n(Ol,"P",{});var E6t=s(sFe);pLr=r(E6t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),E6t.forEach(t),uLr=i(Ol),hn=n(Ol,"P",{});var Kw=s(hn);_Lr=r(Kw,"The model class to instantiate is selected based on the "),lFe=n(Kw,"CODE",{});var C6t=s(lFe);bLr=r(C6t,"model_type"),C6t.forEach(t),vLr=r(Kw,` property of the config object (either
passed as an argument or loaded from `),iFe=n(Kw,"CODE",{});var w6t=s(iFe);FLr=r(w6t,"pretrained_model_name_or_path"),w6t.forEach(t),TLr=r(Kw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dFe=n(Kw,"CODE",{});var A6t=s(dFe);MLr=r(A6t,"pretrained_model_name_or_path"),A6t.forEach(t),ELr=r(Kw,":"),Kw.forEach(t),CLr=i(Ol),xe=n(Ol,"UL",{});var Be=s(xe);zE=n(Be,"LI",{});var USe=s(zE);cFe=n(USe,"STRONG",{});var y6t=s(cFe);wLr=r(y6t,"albert"),y6t.forEach(t),ALr=r(USe," \u2014 "),XU=n(USe,"A",{href:!0});var L6t=s(XU);yLr=r(L6t,"FlaxAlbertForSequenceClassification"),L6t.forEach(t),LLr=r(USe," (ALBERT model)"),USe.forEach(t),xLr=i(Be),QE=n(Be,"LI",{});var JSe=s(QE);fFe=n(JSe,"STRONG",{});var x6t=s(fFe);$Lr=r(x6t,"bart"),x6t.forEach(t),kLr=r(JSe," \u2014 "),zU=n(JSe,"A",{href:!0});var $6t=s(zU);SLr=r($6t,"FlaxBartForSequenceClassification"),$6t.forEach(t),RLr=r(JSe," (BART model)"),JSe.forEach(t),BLr=i(Be),WE=n(Be,"LI",{});var YSe=s(WE);mFe=n(YSe,"STRONG",{});var k6t=s(mFe);PLr=r(k6t,"bert"),k6t.forEach(t),ILr=r(YSe," \u2014 "),QU=n(YSe,"A",{href:!0});var S6t=s(QU);qLr=r(S6t,"FlaxBertForSequenceClassification"),S6t.forEach(t),NLr=r(YSe," (BERT model)"),YSe.forEach(t),jLr=i(Be),HE=n(Be,"LI",{});var KSe=s(HE);gFe=n(KSe,"STRONG",{});var R6t=s(gFe);DLr=r(R6t,"big_bird"),R6t.forEach(t),GLr=r(KSe," \u2014 "),WU=n(KSe,"A",{href:!0});var B6t=s(WU);OLr=r(B6t,"FlaxBigBirdForSequenceClassification"),B6t.forEach(t),VLr=r(KSe," (BigBird model)"),KSe.forEach(t),XLr=i(Be),UE=n(Be,"LI",{});var ZSe=s(UE);hFe=n(ZSe,"STRONG",{});var P6t=s(hFe);zLr=r(P6t,"distilbert"),P6t.forEach(t),QLr=r(ZSe," \u2014 "),HU=n(ZSe,"A",{href:!0});var I6t=s(HU);WLr=r(I6t,"FlaxDistilBertForSequenceClassification"),I6t.forEach(t),HLr=r(ZSe," (DistilBERT model)"),ZSe.forEach(t),ULr=i(Be),JE=n(Be,"LI",{});var eRe=s(JE);pFe=n(eRe,"STRONG",{});var q6t=s(pFe);JLr=r(q6t,"electra"),q6t.forEach(t),YLr=r(eRe," \u2014 "),UU=n(eRe,"A",{href:!0});var N6t=s(UU);KLr=r(N6t,"FlaxElectraForSequenceClassification"),N6t.forEach(t),ZLr=r(eRe," (ELECTRA model)"),eRe.forEach(t),e8r=i(Be),YE=n(Be,"LI",{});var oRe=s(YE);uFe=n(oRe,"STRONG",{});var j6t=s(uFe);o8r=r(j6t,"mbart"),j6t.forEach(t),r8r=r(oRe," \u2014 "),JU=n(oRe,"A",{href:!0});var D6t=s(JU);t8r=r(D6t,"FlaxMBartForSequenceClassification"),D6t.forEach(t),a8r=r(oRe," (mBART model)"),oRe.forEach(t),n8r=i(Be),KE=n(Be,"LI",{});var rRe=s(KE);_Fe=n(rRe,"STRONG",{});var G6t=s(_Fe);s8r=r(G6t,"roberta"),G6t.forEach(t),l8r=r(rRe," \u2014 "),YU=n(rRe,"A",{href:!0});var O6t=s(YU);i8r=r(O6t,"FlaxRobertaForSequenceClassification"),O6t.forEach(t),d8r=r(rRe," (RoBERTa model)"),rRe.forEach(t),c8r=i(Be),ZE=n(Be,"LI",{});var tRe=s(ZE);bFe=n(tRe,"STRONG",{});var V6t=s(bFe);f8r=r(V6t,"roformer"),V6t.forEach(t),m8r=r(tRe," \u2014 "),KU=n(tRe,"A",{href:!0});var X6t=s(KU);g8r=r(X6t,"FlaxRoFormerForSequenceClassification"),X6t.forEach(t),h8r=r(tRe," (RoFormer model)"),tRe.forEach(t),p8r=i(Be),eC=n(Be,"LI",{});var aRe=s(eC);vFe=n(aRe,"STRONG",{});var z6t=s(vFe);u8r=r(z6t,"xlm-roberta"),z6t.forEach(t),_8r=r(aRe," \u2014 "),ZU=n(aRe,"A",{href:!0});var Q6t=s(ZU);b8r=r(Q6t,"FlaxXLMRobertaForSequenceClassification"),Q6t.forEach(t),v8r=r(aRe," (XLM-RoBERTa model)"),aRe.forEach(t),Be.forEach(t),F8r=i(Ol),T(oC.$$.fragment,Ol),Ol.forEach(t),Gl.forEach(t),CPe=i(f),Bc=n(f,"H2",{class:!0});var Lqe=s(Bc);rC=n(Lqe,"A",{id:!0,class:!0,href:!0});var W6t=s(rC);FFe=n(W6t,"SPAN",{});var H6t=s(FFe);T(q8.$$.fragment,H6t),H6t.forEach(t),W6t.forEach(t),T8r=i(Lqe),TFe=n(Lqe,"SPAN",{});var U6t=s(TFe);M8r=r(U6t,"FlaxAutoModelForQuestionAnswering"),U6t.forEach(t),Lqe.forEach(t),wPe=i(f),pr=n(f,"DIV",{class:!0});var Vl=s(pr);T(N8.$$.fragment,Vl),E8r=i(Vl),Pc=n(Vl,"P",{});var AK=s(Pc);C8r=r(AK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),eJ=n(AK,"A",{href:!0});var J6t=s(eJ);w8r=r(J6t,"from_pretrained()"),J6t.forEach(t),A8r=r(AK," class method or the "),oJ=n(AK,"A",{href:!0});var Y6t=s(oJ);y8r=r(Y6t,"from_config()"),Y6t.forEach(t),L8r=r(AK,` class
method.`),AK.forEach(t),x8r=i(Vl),j8=n(Vl,"P",{});var xqe=s(j8);$8r=r(xqe,"This class cannot be instantiated directly using "),MFe=n(xqe,"CODE",{});var K6t=s(MFe);k8r=r(K6t,"__init__()"),K6t.forEach(t),S8r=r(xqe," (throws an error)."),xqe.forEach(t),R8r=i(Vl),Ot=n(Vl,"DIV",{class:!0});var Zw=s(Ot);T(D8.$$.fragment,Zw),B8r=i(Zw),EFe=n(Zw,"P",{});var Z6t=s(EFe);P8r=r(Z6t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Z6t.forEach(t),I8r=i(Zw),Ic=n(Zw,"P",{});var yK=s(Ic);q8r=r(yK,`Note:
Loading a model from its configuration file does `),CFe=n(yK,"STRONG",{});var eTt=s(CFe);N8r=r(eTt,"not"),eTt.forEach(t),j8r=r(yK,` load the model weights. It only affects the
model\u2019s configuration. Use `),rJ=n(yK,"A",{href:!0});var oTt=s(rJ);D8r=r(oTt,"from_pretrained()"),oTt.forEach(t),G8r=r(yK," to load the model weights."),yK.forEach(t),O8r=i(Zw),T(tC.$$.fragment,Zw),Zw.forEach(t),V8r=i(Vl),Or=n(Vl,"DIV",{class:!0});var Xl=s(Or);T(G8.$$.fragment,Xl),X8r=i(Xl),wFe=n(Xl,"P",{});var rTt=s(wFe);z8r=r(rTt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),rTt.forEach(t),Q8r=i(Xl),pn=n(Xl,"P",{});var eA=s(pn);W8r=r(eA,"The model class to instantiate is selected based on the "),AFe=n(eA,"CODE",{});var tTt=s(AFe);H8r=r(tTt,"model_type"),tTt.forEach(t),U8r=r(eA,` property of the config object (either
passed as an argument or loaded from `),yFe=n(eA,"CODE",{});var aTt=s(yFe);J8r=r(aTt,"pretrained_model_name_or_path"),aTt.forEach(t),Y8r=r(eA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),LFe=n(eA,"CODE",{});var nTt=s(LFe);K8r=r(nTt,"pretrained_model_name_or_path"),nTt.forEach(t),Z8r=r(eA,":"),eA.forEach(t),e7r=i(Xl),$e=n(Xl,"UL",{});var Pe=s($e);aC=n(Pe,"LI",{});var nRe=s(aC);xFe=n(nRe,"STRONG",{});var sTt=s(xFe);o7r=r(sTt,"albert"),sTt.forEach(t),r7r=r(nRe," \u2014 "),tJ=n(nRe,"A",{href:!0});var lTt=s(tJ);t7r=r(lTt,"FlaxAlbertForQuestionAnswering"),lTt.forEach(t),a7r=r(nRe," (ALBERT model)"),nRe.forEach(t),n7r=i(Pe),nC=n(Pe,"LI",{});var sRe=s(nC);$Fe=n(sRe,"STRONG",{});var iTt=s($Fe);s7r=r(iTt,"bart"),iTt.forEach(t),l7r=r(sRe," \u2014 "),aJ=n(sRe,"A",{href:!0});var dTt=s(aJ);i7r=r(dTt,"FlaxBartForQuestionAnswering"),dTt.forEach(t),d7r=r(sRe," (BART model)"),sRe.forEach(t),c7r=i(Pe),sC=n(Pe,"LI",{});var lRe=s(sC);kFe=n(lRe,"STRONG",{});var cTt=s(kFe);f7r=r(cTt,"bert"),cTt.forEach(t),m7r=r(lRe," \u2014 "),nJ=n(lRe,"A",{href:!0});var fTt=s(nJ);g7r=r(fTt,"FlaxBertForQuestionAnswering"),fTt.forEach(t),h7r=r(lRe," (BERT model)"),lRe.forEach(t),p7r=i(Pe),lC=n(Pe,"LI",{});var iRe=s(lC);SFe=n(iRe,"STRONG",{});var mTt=s(SFe);u7r=r(mTt,"big_bird"),mTt.forEach(t),_7r=r(iRe," \u2014 "),sJ=n(iRe,"A",{href:!0});var gTt=s(sJ);b7r=r(gTt,"FlaxBigBirdForQuestionAnswering"),gTt.forEach(t),v7r=r(iRe," (BigBird model)"),iRe.forEach(t),F7r=i(Pe),iC=n(Pe,"LI",{});var dRe=s(iC);RFe=n(dRe,"STRONG",{});var hTt=s(RFe);T7r=r(hTt,"distilbert"),hTt.forEach(t),M7r=r(dRe," \u2014 "),lJ=n(dRe,"A",{href:!0});var pTt=s(lJ);E7r=r(pTt,"FlaxDistilBertForQuestionAnswering"),pTt.forEach(t),C7r=r(dRe," (DistilBERT model)"),dRe.forEach(t),w7r=i(Pe),dC=n(Pe,"LI",{});var cRe=s(dC);BFe=n(cRe,"STRONG",{});var uTt=s(BFe);A7r=r(uTt,"electra"),uTt.forEach(t),y7r=r(cRe," \u2014 "),iJ=n(cRe,"A",{href:!0});var _Tt=s(iJ);L7r=r(_Tt,"FlaxElectraForQuestionAnswering"),_Tt.forEach(t),x7r=r(cRe," (ELECTRA model)"),cRe.forEach(t),$7r=i(Pe),cC=n(Pe,"LI",{});var fRe=s(cC);PFe=n(fRe,"STRONG",{});var bTt=s(PFe);k7r=r(bTt,"mbart"),bTt.forEach(t),S7r=r(fRe," \u2014 "),dJ=n(fRe,"A",{href:!0});var vTt=s(dJ);R7r=r(vTt,"FlaxMBartForQuestionAnswering"),vTt.forEach(t),B7r=r(fRe," (mBART model)"),fRe.forEach(t),P7r=i(Pe),fC=n(Pe,"LI",{});var mRe=s(fC);IFe=n(mRe,"STRONG",{});var FTt=s(IFe);I7r=r(FTt,"roberta"),FTt.forEach(t),q7r=r(mRe," \u2014 "),cJ=n(mRe,"A",{href:!0});var TTt=s(cJ);N7r=r(TTt,"FlaxRobertaForQuestionAnswering"),TTt.forEach(t),j7r=r(mRe," (RoBERTa model)"),mRe.forEach(t),D7r=i(Pe),mC=n(Pe,"LI",{});var gRe=s(mC);qFe=n(gRe,"STRONG",{});var MTt=s(qFe);G7r=r(MTt,"roformer"),MTt.forEach(t),O7r=r(gRe," \u2014 "),fJ=n(gRe,"A",{href:!0});var ETt=s(fJ);V7r=r(ETt,"FlaxRoFormerForQuestionAnswering"),ETt.forEach(t),X7r=r(gRe," (RoFormer model)"),gRe.forEach(t),z7r=i(Pe),gC=n(Pe,"LI",{});var hRe=s(gC);NFe=n(hRe,"STRONG",{});var CTt=s(NFe);Q7r=r(CTt,"xlm-roberta"),CTt.forEach(t),W7r=r(hRe," \u2014 "),mJ=n(hRe,"A",{href:!0});var wTt=s(mJ);H7r=r(wTt,"FlaxXLMRobertaForQuestionAnswering"),wTt.forEach(t),U7r=r(hRe," (XLM-RoBERTa model)"),hRe.forEach(t),Pe.forEach(t),J7r=i(Xl),T(hC.$$.fragment,Xl),Xl.forEach(t),Vl.forEach(t),APe=i(f),qc=n(f,"H2",{class:!0});var $qe=s(qc);pC=n($qe,"A",{id:!0,class:!0,href:!0});var ATt=s(pC);jFe=n(ATt,"SPAN",{});var yTt=s(jFe);T(O8.$$.fragment,yTt),yTt.forEach(t),ATt.forEach(t),Y7r=i($qe),DFe=n($qe,"SPAN",{});var LTt=s(DFe);K7r=r(LTt,"FlaxAutoModelForTokenClassification"),LTt.forEach(t),$qe.forEach(t),yPe=i(f),ur=n(f,"DIV",{class:!0});var zl=s(ur);T(V8.$$.fragment,zl),Z7r=i(zl),Nc=n(zl,"P",{});var LK=s(Nc);exr=r(LK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),gJ=n(LK,"A",{href:!0});var xTt=s(gJ);oxr=r(xTt,"from_pretrained()"),xTt.forEach(t),rxr=r(LK," class method or the "),hJ=n(LK,"A",{href:!0});var $Tt=s(hJ);txr=r($Tt,"from_config()"),$Tt.forEach(t),axr=r(LK,` class
method.`),LK.forEach(t),nxr=i(zl),X8=n(zl,"P",{});var kqe=s(X8);sxr=r(kqe,"This class cannot be instantiated directly using "),GFe=n(kqe,"CODE",{});var kTt=s(GFe);lxr=r(kTt,"__init__()"),kTt.forEach(t),ixr=r(kqe," (throws an error)."),kqe.forEach(t),dxr=i(zl),Vt=n(zl,"DIV",{class:!0});var oA=s(Vt);T(z8.$$.fragment,oA),cxr=i(oA),OFe=n(oA,"P",{});var STt=s(OFe);fxr=r(STt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),STt.forEach(t),mxr=i(oA),jc=n(oA,"P",{});var xK=s(jc);gxr=r(xK,`Note:
Loading a model from its configuration file does `),VFe=n(xK,"STRONG",{});var RTt=s(VFe);hxr=r(RTt,"not"),RTt.forEach(t),pxr=r(xK,` load the model weights. It only affects the
model\u2019s configuration. Use `),pJ=n(xK,"A",{href:!0});var BTt=s(pJ);uxr=r(BTt,"from_pretrained()"),BTt.forEach(t),_xr=r(xK," to load the model weights."),xK.forEach(t),bxr=i(oA),T(uC.$$.fragment,oA),oA.forEach(t),vxr=i(zl),Vr=n(zl,"DIV",{class:!0});var Ql=s(Vr);T(Q8.$$.fragment,Ql),Fxr=i(Ql),XFe=n(Ql,"P",{});var PTt=s(XFe);Txr=r(PTt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),PTt.forEach(t),Mxr=i(Ql),un=n(Ql,"P",{});var rA=s(un);Exr=r(rA,"The model class to instantiate is selected based on the "),zFe=n(rA,"CODE",{});var ITt=s(zFe);Cxr=r(ITt,"model_type"),ITt.forEach(t),wxr=r(rA,` property of the config object (either
passed as an argument or loaded from `),QFe=n(rA,"CODE",{});var qTt=s(QFe);Axr=r(qTt,"pretrained_model_name_or_path"),qTt.forEach(t),yxr=r(rA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),WFe=n(rA,"CODE",{});var NTt=s(WFe);Lxr=r(NTt,"pretrained_model_name_or_path"),NTt.forEach(t),xxr=r(rA,":"),rA.forEach(t),$xr=i(Ql),je=n(Ql,"UL",{});var vo=s(je);_C=n(vo,"LI",{});var pRe=s(_C);HFe=n(pRe,"STRONG",{});var jTt=s(HFe);kxr=r(jTt,"albert"),jTt.forEach(t),Sxr=r(pRe," \u2014 "),uJ=n(pRe,"A",{href:!0});var DTt=s(uJ);Rxr=r(DTt,"FlaxAlbertForTokenClassification"),DTt.forEach(t),Bxr=r(pRe," (ALBERT model)"),pRe.forEach(t),Pxr=i(vo),bC=n(vo,"LI",{});var uRe=s(bC);UFe=n(uRe,"STRONG",{});var GTt=s(UFe);Ixr=r(GTt,"bert"),GTt.forEach(t),qxr=r(uRe," \u2014 "),_J=n(uRe,"A",{href:!0});var OTt=s(_J);Nxr=r(OTt,"FlaxBertForTokenClassification"),OTt.forEach(t),jxr=r(uRe," (BERT model)"),uRe.forEach(t),Dxr=i(vo),vC=n(vo,"LI",{});var _Re=s(vC);JFe=n(_Re,"STRONG",{});var VTt=s(JFe);Gxr=r(VTt,"big_bird"),VTt.forEach(t),Oxr=r(_Re," \u2014 "),bJ=n(_Re,"A",{href:!0});var XTt=s(bJ);Vxr=r(XTt,"FlaxBigBirdForTokenClassification"),XTt.forEach(t),Xxr=r(_Re," (BigBird model)"),_Re.forEach(t),zxr=i(vo),FC=n(vo,"LI",{});var bRe=s(FC);YFe=n(bRe,"STRONG",{});var zTt=s(YFe);Qxr=r(zTt,"distilbert"),zTt.forEach(t),Wxr=r(bRe," \u2014 "),vJ=n(bRe,"A",{href:!0});var QTt=s(vJ);Hxr=r(QTt,"FlaxDistilBertForTokenClassification"),QTt.forEach(t),Uxr=r(bRe," (DistilBERT model)"),bRe.forEach(t),Jxr=i(vo),TC=n(vo,"LI",{});var vRe=s(TC);KFe=n(vRe,"STRONG",{});var WTt=s(KFe);Yxr=r(WTt,"electra"),WTt.forEach(t),Kxr=r(vRe," \u2014 "),FJ=n(vRe,"A",{href:!0});var HTt=s(FJ);Zxr=r(HTt,"FlaxElectraForTokenClassification"),HTt.forEach(t),e$r=r(vRe," (ELECTRA model)"),vRe.forEach(t),o$r=i(vo),MC=n(vo,"LI",{});var FRe=s(MC);ZFe=n(FRe,"STRONG",{});var UTt=s(ZFe);r$r=r(UTt,"roberta"),UTt.forEach(t),t$r=r(FRe," \u2014 "),TJ=n(FRe,"A",{href:!0});var JTt=s(TJ);a$r=r(JTt,"FlaxRobertaForTokenClassification"),JTt.forEach(t),n$r=r(FRe," (RoBERTa model)"),FRe.forEach(t),s$r=i(vo),EC=n(vo,"LI",{});var TRe=s(EC);e6e=n(TRe,"STRONG",{});var YTt=s(e6e);l$r=r(YTt,"roformer"),YTt.forEach(t),i$r=r(TRe," \u2014 "),MJ=n(TRe,"A",{href:!0});var KTt=s(MJ);d$r=r(KTt,"FlaxRoFormerForTokenClassification"),KTt.forEach(t),c$r=r(TRe," (RoFormer model)"),TRe.forEach(t),f$r=i(vo),CC=n(vo,"LI",{});var MRe=s(CC);o6e=n(MRe,"STRONG",{});var ZTt=s(o6e);m$r=r(ZTt,"xlm-roberta"),ZTt.forEach(t),g$r=r(MRe," \u2014 "),EJ=n(MRe,"A",{href:!0});var eMt=s(EJ);h$r=r(eMt,"FlaxXLMRobertaForTokenClassification"),eMt.forEach(t),p$r=r(MRe," (XLM-RoBERTa model)"),MRe.forEach(t),vo.forEach(t),u$r=i(Ql),T(wC.$$.fragment,Ql),Ql.forEach(t),zl.forEach(t),LPe=i(f),Dc=n(f,"H2",{class:!0});var Sqe=s(Dc);AC=n(Sqe,"A",{id:!0,class:!0,href:!0});var oMt=s(AC);r6e=n(oMt,"SPAN",{});var rMt=s(r6e);T(W8.$$.fragment,rMt),rMt.forEach(t),oMt.forEach(t),_$r=i(Sqe),t6e=n(Sqe,"SPAN",{});var tMt=s(t6e);b$r=r(tMt,"FlaxAutoModelForMultipleChoice"),tMt.forEach(t),Sqe.forEach(t),xPe=i(f),_r=n(f,"DIV",{class:!0});var Wl=s(_r);T(H8.$$.fragment,Wl),v$r=i(Wl),Gc=n(Wl,"P",{});var $K=s(Gc);F$r=r($K,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),CJ=n($K,"A",{href:!0});var aMt=s(CJ);T$r=r(aMt,"from_pretrained()"),aMt.forEach(t),M$r=r($K," class method or the "),wJ=n($K,"A",{href:!0});var nMt=s(wJ);E$r=r(nMt,"from_config()"),nMt.forEach(t),C$r=r($K,` class
method.`),$K.forEach(t),w$r=i(Wl),U8=n(Wl,"P",{});var Rqe=s(U8);A$r=r(Rqe,"This class cannot be instantiated directly using "),a6e=n(Rqe,"CODE",{});var sMt=s(a6e);y$r=r(sMt,"__init__()"),sMt.forEach(t),L$r=r(Rqe," (throws an error)."),Rqe.forEach(t),x$r=i(Wl),Xt=n(Wl,"DIV",{class:!0});var tA=s(Xt);T(J8.$$.fragment,tA),$$r=i(tA),n6e=n(tA,"P",{});var lMt=s(n6e);k$r=r(lMt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),lMt.forEach(t),S$r=i(tA),Oc=n(tA,"P",{});var kK=s(Oc);R$r=r(kK,`Note:
Loading a model from its configuration file does `),s6e=n(kK,"STRONG",{});var iMt=s(s6e);B$r=r(iMt,"not"),iMt.forEach(t),P$r=r(kK,` load the model weights. It only affects the
model\u2019s configuration. Use `),AJ=n(kK,"A",{href:!0});var dMt=s(AJ);I$r=r(dMt,"from_pretrained()"),dMt.forEach(t),q$r=r(kK," to load the model weights."),kK.forEach(t),N$r=i(tA),T(yC.$$.fragment,tA),tA.forEach(t),j$r=i(Wl),Xr=n(Wl,"DIV",{class:!0});var Hl=s(Xr);T(Y8.$$.fragment,Hl),D$r=i(Hl),l6e=n(Hl,"P",{});var cMt=s(l6e);G$r=r(cMt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),cMt.forEach(t),O$r=i(Hl),_n=n(Hl,"P",{});var aA=s(_n);V$r=r(aA,"The model class to instantiate is selected based on the "),i6e=n(aA,"CODE",{});var fMt=s(i6e);X$r=r(fMt,"model_type"),fMt.forEach(t),z$r=r(aA,` property of the config object (either
passed as an argument or loaded from `),d6e=n(aA,"CODE",{});var mMt=s(d6e);Q$r=r(mMt,"pretrained_model_name_or_path"),mMt.forEach(t),W$r=r(aA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),c6e=n(aA,"CODE",{});var gMt=s(c6e);H$r=r(gMt,"pretrained_model_name_or_path"),gMt.forEach(t),U$r=r(aA,":"),aA.forEach(t),J$r=i(Hl),De=n(Hl,"UL",{});var Fo=s(De);LC=n(Fo,"LI",{});var ERe=s(LC);f6e=n(ERe,"STRONG",{});var hMt=s(f6e);Y$r=r(hMt,"albert"),hMt.forEach(t),K$r=r(ERe," \u2014 "),yJ=n(ERe,"A",{href:!0});var pMt=s(yJ);Z$r=r(pMt,"FlaxAlbertForMultipleChoice"),pMt.forEach(t),ekr=r(ERe," (ALBERT model)"),ERe.forEach(t),okr=i(Fo),xC=n(Fo,"LI",{});var CRe=s(xC);m6e=n(CRe,"STRONG",{});var uMt=s(m6e);rkr=r(uMt,"bert"),uMt.forEach(t),tkr=r(CRe," \u2014 "),LJ=n(CRe,"A",{href:!0});var _Mt=s(LJ);akr=r(_Mt,"FlaxBertForMultipleChoice"),_Mt.forEach(t),nkr=r(CRe," (BERT model)"),CRe.forEach(t),skr=i(Fo),$C=n(Fo,"LI",{});var wRe=s($C);g6e=n(wRe,"STRONG",{});var bMt=s(g6e);lkr=r(bMt,"big_bird"),bMt.forEach(t),ikr=r(wRe," \u2014 "),xJ=n(wRe,"A",{href:!0});var vMt=s(xJ);dkr=r(vMt,"FlaxBigBirdForMultipleChoice"),vMt.forEach(t),ckr=r(wRe," (BigBird model)"),wRe.forEach(t),fkr=i(Fo),kC=n(Fo,"LI",{});var ARe=s(kC);h6e=n(ARe,"STRONG",{});var FMt=s(h6e);mkr=r(FMt,"distilbert"),FMt.forEach(t),gkr=r(ARe," \u2014 "),$J=n(ARe,"A",{href:!0});var TMt=s($J);hkr=r(TMt,"FlaxDistilBertForMultipleChoice"),TMt.forEach(t),pkr=r(ARe," (DistilBERT model)"),ARe.forEach(t),ukr=i(Fo),SC=n(Fo,"LI",{});var yRe=s(SC);p6e=n(yRe,"STRONG",{});var MMt=s(p6e);_kr=r(MMt,"electra"),MMt.forEach(t),bkr=r(yRe," \u2014 "),kJ=n(yRe,"A",{href:!0});var EMt=s(kJ);vkr=r(EMt,"FlaxElectraForMultipleChoice"),EMt.forEach(t),Fkr=r(yRe," (ELECTRA model)"),yRe.forEach(t),Tkr=i(Fo),RC=n(Fo,"LI",{});var LRe=s(RC);u6e=n(LRe,"STRONG",{});var CMt=s(u6e);Mkr=r(CMt,"roberta"),CMt.forEach(t),Ekr=r(LRe," \u2014 "),SJ=n(LRe,"A",{href:!0});var wMt=s(SJ);Ckr=r(wMt,"FlaxRobertaForMultipleChoice"),wMt.forEach(t),wkr=r(LRe," (RoBERTa model)"),LRe.forEach(t),Akr=i(Fo),BC=n(Fo,"LI",{});var xRe=s(BC);_6e=n(xRe,"STRONG",{});var AMt=s(_6e);ykr=r(AMt,"roformer"),AMt.forEach(t),Lkr=r(xRe," \u2014 "),RJ=n(xRe,"A",{href:!0});var yMt=s(RJ);xkr=r(yMt,"FlaxRoFormerForMultipleChoice"),yMt.forEach(t),$kr=r(xRe," (RoFormer model)"),xRe.forEach(t),kkr=i(Fo),PC=n(Fo,"LI",{});var $Re=s(PC);b6e=n($Re,"STRONG",{});var LMt=s(b6e);Skr=r(LMt,"xlm-roberta"),LMt.forEach(t),Rkr=r($Re," \u2014 "),BJ=n($Re,"A",{href:!0});var xMt=s(BJ);Bkr=r(xMt,"FlaxXLMRobertaForMultipleChoice"),xMt.forEach(t),Pkr=r($Re," (XLM-RoBERTa model)"),$Re.forEach(t),Fo.forEach(t),Ikr=i(Hl),T(IC.$$.fragment,Hl),Hl.forEach(t),Wl.forEach(t),$Pe=i(f),Vc=n(f,"H2",{class:!0});var Bqe=s(Vc);qC=n(Bqe,"A",{id:!0,class:!0,href:!0});var $Mt=s(qC);v6e=n($Mt,"SPAN",{});var kMt=s(v6e);T(K8.$$.fragment,kMt),kMt.forEach(t),$Mt.forEach(t),qkr=i(Bqe),F6e=n(Bqe,"SPAN",{});var SMt=s(F6e);Nkr=r(SMt,"FlaxAutoModelForNextSentencePrediction"),SMt.forEach(t),Bqe.forEach(t),kPe=i(f),br=n(f,"DIV",{class:!0});var Ul=s(br);T(Z8.$$.fragment,Ul),jkr=i(Ul),Xc=n(Ul,"P",{});var SK=s(Xc);Dkr=r(SK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),PJ=n(SK,"A",{href:!0});var RMt=s(PJ);Gkr=r(RMt,"from_pretrained()"),RMt.forEach(t),Okr=r(SK," class method or the "),IJ=n(SK,"A",{href:!0});var BMt=s(IJ);Vkr=r(BMt,"from_config()"),BMt.forEach(t),Xkr=r(SK,` class
method.`),SK.forEach(t),zkr=i(Ul),e7=n(Ul,"P",{});var Pqe=s(e7);Qkr=r(Pqe,"This class cannot be instantiated directly using "),T6e=n(Pqe,"CODE",{});var PMt=s(T6e);Wkr=r(PMt,"__init__()"),PMt.forEach(t),Hkr=r(Pqe," (throws an error)."),Pqe.forEach(t),Ukr=i(Ul),zt=n(Ul,"DIV",{class:!0});var nA=s(zt);T(o7.$$.fragment,nA),Jkr=i(nA),M6e=n(nA,"P",{});var IMt=s(M6e);Ykr=r(IMt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),IMt.forEach(t),Kkr=i(nA),zc=n(nA,"P",{});var RK=s(zc);Zkr=r(RK,`Note:
Loading a model from its configuration file does `),E6e=n(RK,"STRONG",{});var qMt=s(E6e);eSr=r(qMt,"not"),qMt.forEach(t),oSr=r(RK,` load the model weights. It only affects the
model\u2019s configuration. Use `),qJ=n(RK,"A",{href:!0});var NMt=s(qJ);rSr=r(NMt,"from_pretrained()"),NMt.forEach(t),tSr=r(RK," to load the model weights."),RK.forEach(t),aSr=i(nA),T(NC.$$.fragment,nA),nA.forEach(t),nSr=i(Ul),zr=n(Ul,"DIV",{class:!0});var Jl=s(zr);T(r7.$$.fragment,Jl),sSr=i(Jl),C6e=n(Jl,"P",{});var jMt=s(C6e);lSr=r(jMt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),jMt.forEach(t),iSr=i(Jl),bn=n(Jl,"P",{});var sA=s(bn);dSr=r(sA,"The model class to instantiate is selected based on the "),w6e=n(sA,"CODE",{});var DMt=s(w6e);cSr=r(DMt,"model_type"),DMt.forEach(t),fSr=r(sA,` property of the config object (either
passed as an argument or loaded from `),A6e=n(sA,"CODE",{});var GMt=s(A6e);mSr=r(GMt,"pretrained_model_name_or_path"),GMt.forEach(t),gSr=r(sA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),y6e=n(sA,"CODE",{});var OMt=s(y6e);hSr=r(OMt,"pretrained_model_name_or_path"),OMt.forEach(t),pSr=r(sA,":"),sA.forEach(t),uSr=i(Jl),L6e=n(Jl,"UL",{});var VMt=s(L6e);jC=n(VMt,"LI",{});var kRe=s(jC);x6e=n(kRe,"STRONG",{});var XMt=s(x6e);_Sr=r(XMt,"bert"),XMt.forEach(t),bSr=r(kRe," \u2014 "),NJ=n(kRe,"A",{href:!0});var zMt=s(NJ);vSr=r(zMt,"FlaxBertForNextSentencePrediction"),zMt.forEach(t),FSr=r(kRe," (BERT model)"),kRe.forEach(t),VMt.forEach(t),TSr=i(Jl),T(DC.$$.fragment,Jl),Jl.forEach(t),Ul.forEach(t),SPe=i(f),Qc=n(f,"H2",{class:!0});var Iqe=s(Qc);GC=n(Iqe,"A",{id:!0,class:!0,href:!0});var QMt=s(GC);$6e=n(QMt,"SPAN",{});var WMt=s($6e);T(t7.$$.fragment,WMt),WMt.forEach(t),QMt.forEach(t),MSr=i(Iqe),k6e=n(Iqe,"SPAN",{});var HMt=s(k6e);ESr=r(HMt,"FlaxAutoModelForImageClassification"),HMt.forEach(t),Iqe.forEach(t),RPe=i(f),vr=n(f,"DIV",{class:!0});var Yl=s(vr);T(a7.$$.fragment,Yl),CSr=i(Yl),Wc=n(Yl,"P",{});var BK=s(Wc);wSr=r(BK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),jJ=n(BK,"A",{href:!0});var UMt=s(jJ);ASr=r(UMt,"from_pretrained()"),UMt.forEach(t),ySr=r(BK," class method or the "),DJ=n(BK,"A",{href:!0});var JMt=s(DJ);LSr=r(JMt,"from_config()"),JMt.forEach(t),xSr=r(BK,` class
method.`),BK.forEach(t),$Sr=i(Yl),n7=n(Yl,"P",{});var qqe=s(n7);kSr=r(qqe,"This class cannot be instantiated directly using "),S6e=n(qqe,"CODE",{});var YMt=s(S6e);SSr=r(YMt,"__init__()"),YMt.forEach(t),RSr=r(qqe," (throws an error)."),qqe.forEach(t),BSr=i(Yl),Qt=n(Yl,"DIV",{class:!0});var lA=s(Qt);T(s7.$$.fragment,lA),PSr=i(lA),R6e=n(lA,"P",{});var KMt=s(R6e);ISr=r(KMt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),KMt.forEach(t),qSr=i(lA),Hc=n(lA,"P",{});var PK=s(Hc);NSr=r(PK,`Note:
Loading a model from its configuration file does `),B6e=n(PK,"STRONG",{});var ZMt=s(B6e);jSr=r(ZMt,"not"),ZMt.forEach(t),DSr=r(PK,` load the model weights. It only affects the
model\u2019s configuration. Use `),GJ=n(PK,"A",{href:!0});var e4t=s(GJ);GSr=r(e4t,"from_pretrained()"),e4t.forEach(t),OSr=r(PK," to load the model weights."),PK.forEach(t),VSr=i(lA),T(OC.$$.fragment,lA),lA.forEach(t),XSr=i(Yl),Qr=n(Yl,"DIV",{class:!0});var Kl=s(Qr);T(l7.$$.fragment,Kl),zSr=i(Kl),P6e=n(Kl,"P",{});var o4t=s(P6e);QSr=r(o4t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),o4t.forEach(t),WSr=i(Kl),vn=n(Kl,"P",{});var iA=s(vn);HSr=r(iA,"The model class to instantiate is selected based on the "),I6e=n(iA,"CODE",{});var r4t=s(I6e);USr=r(r4t,"model_type"),r4t.forEach(t),JSr=r(iA,` property of the config object (either
passed as an argument or loaded from `),q6e=n(iA,"CODE",{});var t4t=s(q6e);YSr=r(t4t,"pretrained_model_name_or_path"),t4t.forEach(t),KSr=r(iA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),N6e=n(iA,"CODE",{});var a4t=s(N6e);ZSr=r(a4t,"pretrained_model_name_or_path"),a4t.forEach(t),eRr=r(iA,":"),iA.forEach(t),oRr=i(Kl),i7=n(Kl,"UL",{});var Nqe=s(i7);VC=n(Nqe,"LI",{});var SRe=s(VC);j6e=n(SRe,"STRONG",{});var n4t=s(j6e);rRr=r(n4t,"beit"),n4t.forEach(t),tRr=r(SRe," \u2014 "),OJ=n(SRe,"A",{href:!0});var s4t=s(OJ);aRr=r(s4t,"FlaxBeitForImageClassification"),s4t.forEach(t),nRr=r(SRe," (BEiT model)"),SRe.forEach(t),sRr=i(Nqe),XC=n(Nqe,"LI",{});var RRe=s(XC);D6e=n(RRe,"STRONG",{});var l4t=s(D6e);lRr=r(l4t,"vit"),l4t.forEach(t),iRr=r(RRe," \u2014 "),VJ=n(RRe,"A",{href:!0});var i4t=s(VJ);dRr=r(i4t,"FlaxViTForImageClassification"),i4t.forEach(t),cRr=r(RRe," (ViT model)"),RRe.forEach(t),Nqe.forEach(t),fRr=i(Kl),T(zC.$$.fragment,Kl),Kl.forEach(t),Yl.forEach(t),BPe=i(f),Uc=n(f,"H2",{class:!0});var jqe=s(Uc);QC=n(jqe,"A",{id:!0,class:!0,href:!0});var d4t=s(QC);G6e=n(d4t,"SPAN",{});var c4t=s(G6e);T(d7.$$.fragment,c4t),c4t.forEach(t),d4t.forEach(t),mRr=i(jqe),O6e=n(jqe,"SPAN",{});var f4t=s(O6e);gRr=r(f4t,"FlaxAutoModelForVision2Seq"),f4t.forEach(t),jqe.forEach(t),PPe=i(f),Fr=n(f,"DIV",{class:!0});var Zl=s(Fr);T(c7.$$.fragment,Zl),hRr=i(Zl),Jc=n(Zl,"P",{});var IK=s(Jc);pRr=r(IK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),XJ=n(IK,"A",{href:!0});var m4t=s(XJ);uRr=r(m4t,"from_pretrained()"),m4t.forEach(t),_Rr=r(IK," class method or the "),zJ=n(IK,"A",{href:!0});var g4t=s(zJ);bRr=r(g4t,"from_config()"),g4t.forEach(t),vRr=r(IK,` class
method.`),IK.forEach(t),FRr=i(Zl),f7=n(Zl,"P",{});var Dqe=s(f7);TRr=r(Dqe,"This class cannot be instantiated directly using "),V6e=n(Dqe,"CODE",{});var h4t=s(V6e);MRr=r(h4t,"__init__()"),h4t.forEach(t),ERr=r(Dqe," (throws an error)."),Dqe.forEach(t),CRr=i(Zl),Wt=n(Zl,"DIV",{class:!0});var dA=s(Wt);T(m7.$$.fragment,dA),wRr=i(dA),X6e=n(dA,"P",{});var p4t=s(X6e);ARr=r(p4t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),p4t.forEach(t),yRr=i(dA),Yc=n(dA,"P",{});var qK=s(Yc);LRr=r(qK,`Note:
Loading a model from its configuration file does `),z6e=n(qK,"STRONG",{});var u4t=s(z6e);xRr=r(u4t,"not"),u4t.forEach(t),$Rr=r(qK,` load the model weights. It only affects the
model\u2019s configuration. Use `),QJ=n(qK,"A",{href:!0});var _4t=s(QJ);kRr=r(_4t,"from_pretrained()"),_4t.forEach(t),SRr=r(qK," to load the model weights."),qK.forEach(t),RRr=i(dA),T(WC.$$.fragment,dA),dA.forEach(t),BRr=i(Zl),Wr=n(Zl,"DIV",{class:!0});var ei=s(Wr);T(g7.$$.fragment,ei),PRr=i(ei),Q6e=n(ei,"P",{});var b4t=s(Q6e);IRr=r(b4t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),b4t.forEach(t),qRr=i(ei),Fn=n(ei,"P",{});var cA=s(Fn);NRr=r(cA,"The model class to instantiate is selected based on the "),W6e=n(cA,"CODE",{});var v4t=s(W6e);jRr=r(v4t,"model_type"),v4t.forEach(t),DRr=r(cA,` property of the config object (either
passed as an argument or loaded from `),H6e=n(cA,"CODE",{});var F4t=s(H6e);GRr=r(F4t,"pretrained_model_name_or_path"),F4t.forEach(t),ORr=r(cA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),U6e=n(cA,"CODE",{});var T4t=s(U6e);VRr=r(T4t,"pretrained_model_name_or_path"),T4t.forEach(t),XRr=r(cA,":"),cA.forEach(t),zRr=i(ei),J6e=n(ei,"UL",{});var M4t=s(J6e);HC=n(M4t,"LI",{});var BRe=s(HC);Y6e=n(BRe,"STRONG",{});var E4t=s(Y6e);QRr=r(E4t,"vision-encoder-decoder"),E4t.forEach(t),WRr=r(BRe," \u2014 "),WJ=n(BRe,"A",{href:!0});var C4t=s(WJ);HRr=r(C4t,"FlaxVisionEncoderDecoderModel"),C4t.forEach(t),URr=r(BRe," (Vision Encoder decoder model)"),BRe.forEach(t),M4t.forEach(t),JRr=i(ei),T(UC.$$.fragment,ei),ei.forEach(t),Zl.forEach(t),this.h()},h(){c(g,"name","hf:doc:metadata"),c(g,"content",JSON.stringify(ACt)),c(m,"id","auto-classes"),c(m,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m,"href","#auto-classes"),c(p,"class","relative group"),c(Mn,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.AutoConfig"),c(Cn,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.AutoModel"),c(wn,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.AutoTokenizer"),c(li,"href","/docs/transformers/pr_16995/en/model_doc/bert#transformers.BertModel"),c(nf,"id","extending-the-auto-classes"),c(nf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(nf,"href","#extending-the-auto-classes"),c(ii,"class","relative group"),c(lf,"id","transformers.AutoConfig"),c(lf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(lf,"href","#transformers.AutoConfig"),c(di,"class","relative group"),c(Sx,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(Rx,"href","/docs/transformers/pr_16995/en/model_doc/albert#transformers.AlbertConfig"),c(Bx,"href","/docs/transformers/pr_16995/en/model_doc/bart#transformers.BartConfig"),c(Px,"href","/docs/transformers/pr_16995/en/model_doc/beit#transformers.BeitConfig"),c(Ix,"href","/docs/transformers/pr_16995/en/model_doc/bert#transformers.BertConfig"),c(qx,"href","/docs/transformers/pr_16995/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(Nx,"href","/docs/transformers/pr_16995/en/model_doc/big_bird#transformers.BigBirdConfig"),c(jx,"href","/docs/transformers/pr_16995/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(Dx,"href","/docs/transformers/pr_16995/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(Gx,"href","/docs/transformers/pr_16995/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(Ox,"href","/docs/transformers/pr_16995/en/model_doc/camembert#transformers.CamembertConfig"),c(Vx,"href","/docs/transformers/pr_16995/en/model_doc/canine#transformers.CanineConfig"),c(Xx,"href","/docs/transformers/pr_16995/en/model_doc/clip#transformers.CLIPConfig"),c(zx,"href","/docs/transformers/pr_16995/en/model_doc/convbert#transformers.ConvBertConfig"),c(Qx,"href","/docs/transformers/pr_16995/en/model_doc/convnext#transformers.ConvNextConfig"),c(Wx,"href","/docs/transformers/pr_16995/en/model_doc/ctrl#transformers.CTRLConfig"),c(Hx,"href","/docs/transformers/pr_16995/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(Ux,"href","/docs/transformers/pr_16995/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(Jx,"href","/docs/transformers/pr_16995/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),c(Yx,"href","/docs/transformers/pr_16995/en/model_doc/deberta#transformers.DebertaConfig"),c(Kx,"href","/docs/transformers/pr_16995/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(Zx,"href","/docs/transformers/pr_16995/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),c(e$,"href","/docs/transformers/pr_16995/en/model_doc/deit#transformers.DeiTConfig"),c(o$,"href","/docs/transformers/pr_16995/en/model_doc/detr#transformers.DetrConfig"),c(r$,"href","/docs/transformers/pr_16995/en/model_doc/distilbert#transformers.DistilBertConfig"),c(t$,"href","/docs/transformers/pr_16995/en/model_doc/dpr#transformers.DPRConfig"),c(a$,"href","/docs/transformers/pr_16995/en/model_doc/dpt#transformers.DPTConfig"),c(n$,"href","/docs/transformers/pr_16995/en/model_doc/electra#transformers.ElectraConfig"),c(s$,"href","/docs/transformers/pr_16995/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(l$,"href","/docs/transformers/pr_16995/en/model_doc/flaubert#transformers.FlaubertConfig"),c(i$,"href","/docs/transformers/pr_16995/en/model_doc/fnet#transformers.FNetConfig"),c(d$,"href","/docs/transformers/pr_16995/en/model_doc/fsmt#transformers.FSMTConfig"),c(c$,"href","/docs/transformers/pr_16995/en/model_doc/funnel#transformers.FunnelConfig"),c(f$,"href","/docs/transformers/pr_16995/en/model_doc/glpn#transformers.GLPNConfig"),c(m$,"href","/docs/transformers/pr_16995/en/model_doc/gpt2#transformers.GPT2Config"),c(g$,"href","/docs/transformers/pr_16995/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(h$,"href","/docs/transformers/pr_16995/en/model_doc/gptj#transformers.GPTJConfig"),c(p$,"href","/docs/transformers/pr_16995/en/model_doc/hubert#transformers.HubertConfig"),c(u$,"href","/docs/transformers/pr_16995/en/model_doc/ibert#transformers.IBertConfig"),c(_$,"href","/docs/transformers/pr_16995/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(b$,"href","/docs/transformers/pr_16995/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(v$,"href","/docs/transformers/pr_16995/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(F$,"href","/docs/transformers/pr_16995/en/model_doc/led#transformers.LEDConfig"),c(T$,"href","/docs/transformers/pr_16995/en/model_doc/longformer#transformers.LongformerConfig"),c(M$,"href","/docs/transformers/pr_16995/en/model_doc/luke#transformers.LukeConfig"),c(E$,"href","/docs/transformers/pr_16995/en/model_doc/lxmert#transformers.LxmertConfig"),c(C$,"href","/docs/transformers/pr_16995/en/model_doc/m2m_100#transformers.M2M100Config"),c(w$,"href","/docs/transformers/pr_16995/en/model_doc/marian#transformers.MarianConfig"),c(A$,"href","/docs/transformers/pr_16995/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(y$,"href","/docs/transformers/pr_16995/en/model_doc/mbart#transformers.MBartConfig"),c(L$,"href","/docs/transformers/pr_16995/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(x$,"href","/docs/transformers/pr_16995/en/model_doc/mobilebert#transformers.MobileBertConfig"),c($$,"href","/docs/transformers/pr_16995/en/model_doc/mpnet#transformers.MPNetConfig"),c(k$,"href","/docs/transformers/pr_16995/en/model_doc/mt5#transformers.MT5Config"),c(S$,"href","/docs/transformers/pr_16995/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(R$,"href","/docs/transformers/pr_16995/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(B$,"href","/docs/transformers/pr_16995/en/model_doc/pegasus#transformers.PegasusConfig"),c(P$,"href","/docs/transformers/pr_16995/en/model_doc/perceiver#transformers.PerceiverConfig"),c(I$,"href","/docs/transformers/pr_16995/en/model_doc/plbart#transformers.PLBartConfig"),c(q$,"href","/docs/transformers/pr_16995/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(N$,"href","/docs/transformers/pr_16995/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(j$,"href","/docs/transformers/pr_16995/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(D$,"href","/docs/transformers/pr_16995/en/model_doc/rag#transformers.RagConfig"),c(G$,"href","/docs/transformers/pr_16995/en/model_doc/realm#transformers.RealmConfig"),c(O$,"href","/docs/transformers/pr_16995/en/model_doc/reformer#transformers.ReformerConfig"),c(V$,"href","/docs/transformers/pr_16995/en/model_doc/regnet#transformers.RegNetConfig"),c(X$,"href","/docs/transformers/pr_16995/en/model_doc/rembert#transformers.RemBertConfig"),c(z$,"href","/docs/transformers/pr_16995/en/model_doc/resnet#transformers.ResNetConfig"),c(Q$,"href","/docs/transformers/pr_16995/en/model_doc/retribert#transformers.RetriBertConfig"),c(W$,"href","/docs/transformers/pr_16995/en/model_doc/roberta#transformers.RobertaConfig"),c(H$,"href","/docs/transformers/pr_16995/en/model_doc/roformer#transformers.RoFormerConfig"),c(U$,"href","/docs/transformers/pr_16995/en/model_doc/segformer#transformers.SegformerConfig"),c(J$,"href","/docs/transformers/pr_16995/en/model_doc/sew#transformers.SEWConfig"),c(Y$,"href","/docs/transformers/pr_16995/en/model_doc/sew-d#transformers.SEWDConfig"),c(K$,"href","/docs/transformers/pr_16995/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(Z$,"href","/docs/transformers/pr_16995/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(ek,"href","/docs/transformers/pr_16995/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(ok,"href","/docs/transformers/pr_16995/en/model_doc/splinter#transformers.SplinterConfig"),c(rk,"href","/docs/transformers/pr_16995/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(tk,"href","/docs/transformers/pr_16995/en/model_doc/swin#transformers.SwinConfig"),c(ak,"href","/docs/transformers/pr_16995/en/model_doc/t5#transformers.T5Config"),c(nk,"href","/docs/transformers/pr_16995/en/model_doc/tapas#transformers.TapasConfig"),c(sk,"href","/docs/transformers/pr_16995/en/model_doc/bart#transformers.BartConfig"),c(lk,"href","/docs/transformers/pr_16995/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(ik,"href","/docs/transformers/pr_16995/en/model_doc/trocr#transformers.TrOCRConfig"),c(dk,"href","/docs/transformers/pr_16995/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(ck,"href","/docs/transformers/pr_16995/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(fk,"href","/docs/transformers/pr_16995/en/model_doc/van#transformers.VanConfig"),c(mk,"href","/docs/transformers/pr_16995/en/model_doc/vilt#transformers.ViltConfig"),c(gk,"href","/docs/transformers/pr_16995/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(hk,"href","/docs/transformers/pr_16995/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(pk,"href","/docs/transformers/pr_16995/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(uk,"href","/docs/transformers/pr_16995/en/model_doc/vit#transformers.ViTConfig"),c(_k,"href","/docs/transformers/pr_16995/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(bk,"href","/docs/transformers/pr_16995/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(vk,"href","/docs/transformers/pr_16995/en/model_doc/wavlm#transformers.WavLMConfig"),c(Fk,"href","/docs/transformers/pr_16995/en/model_doc/xglm#transformers.XGLMConfig"),c(Tk,"href","/docs/transformers/pr_16995/en/model_doc/xlm#transformers.XLMConfig"),c(Mk,"href","/docs/transformers/pr_16995/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(Ek,"href","/docs/transformers/pr_16995/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(Ck,"href","/docs/transformers/pr_16995/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(wk,"href","/docs/transformers/pr_16995/en/model_doc/xlnet#transformers.XLNetConfig"),c(Ak,"href","/docs/transformers/pr_16995/en/model_doc/yoso#transformers.YosoConfig"),c(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ag,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ng,"id","transformers.AutoTokenizer"),c(ng,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ng,"href","#transformers.AutoTokenizer"),c(fi,"class","relative group"),c(yk,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(Lk,"href","/docs/transformers/pr_16995/en/model_doc/albert#transformers.AlbertTokenizer"),c(xk,"href","/docs/transformers/pr_16995/en/model_doc/albert#transformers.AlbertTokenizerFast"),c($k,"href","/docs/transformers/pr_16995/en/model_doc/bart#transformers.BartTokenizer"),c(kk,"href","/docs/transformers/pr_16995/en/model_doc/bart#transformers.BartTokenizerFast"),c(Sk,"href","/docs/transformers/pr_16995/en/model_doc/barthez#transformers.BarthezTokenizer"),c(Rk,"href","/docs/transformers/pr_16995/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(Bk,"href","/docs/transformers/pr_16995/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(Pk,"href","/docs/transformers/pr_16995/en/model_doc/bert#transformers.BertTokenizer"),c(Ik,"href","/docs/transformers/pr_16995/en/model_doc/bert#transformers.BertTokenizerFast"),c(qk,"href","/docs/transformers/pr_16995/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(Nk,"href","/docs/transformers/pr_16995/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(jk,"href","/docs/transformers/pr_16995/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(Dk,"href","/docs/transformers/pr_16995/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(Gk,"href","/docs/transformers/pr_16995/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(Ok,"href","/docs/transformers/pr_16995/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(Vk,"href","/docs/transformers/pr_16995/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(Xk,"href","/docs/transformers/pr_16995/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(zk,"href","/docs/transformers/pr_16995/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(Qk,"href","/docs/transformers/pr_16995/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(Wk,"href","/docs/transformers/pr_16995/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(Hk,"href","/docs/transformers/pr_16995/en/model_doc/camembert#transformers.CamembertTokenizer"),c(Uk,"href","/docs/transformers/pr_16995/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(Jk,"href","/docs/transformers/pr_16995/en/model_doc/canine#transformers.CanineTokenizer"),c(Yk,"href","/docs/transformers/pr_16995/en/model_doc/clip#transformers.CLIPTokenizer"),c(Kk,"href","/docs/transformers/pr_16995/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(Zk,"href","/docs/transformers/pr_16995/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(eS,"href","/docs/transformers/pr_16995/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(oS,"href","/docs/transformers/pr_16995/en/model_doc/cpm#transformers.CpmTokenizer"),c(rS,"href","/docs/transformers/pr_16995/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(tS,"href","/docs/transformers/pr_16995/en/model_doc/roberta#transformers.RobertaTokenizer"),c(aS,"href","/docs/transformers/pr_16995/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(nS,"href","/docs/transformers/pr_16995/en/model_doc/deberta#transformers.DebertaTokenizer"),c(sS,"href","/docs/transformers/pr_16995/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(lS,"href","/docs/transformers/pr_16995/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(iS,"href","/docs/transformers/pr_16995/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),c(dS,"href","/docs/transformers/pr_16995/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(cS,"href","/docs/transformers/pr_16995/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(fS,"href","/docs/transformers/pr_16995/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(mS,"href","/docs/transformers/pr_16995/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(gS,"href","/docs/transformers/pr_16995/en/model_doc/electra#transformers.ElectraTokenizer"),c(hS,"href","/docs/transformers/pr_16995/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(pS,"href","/docs/transformers/pr_16995/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(uS,"href","/docs/transformers/pr_16995/en/model_doc/fnet#transformers.FNetTokenizer"),c(_S,"href","/docs/transformers/pr_16995/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(bS,"href","/docs/transformers/pr_16995/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(vS,"href","/docs/transformers/pr_16995/en/model_doc/funnel#transformers.FunnelTokenizer"),c(FS,"href","/docs/transformers/pr_16995/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(TS,"href","/docs/transformers/pr_16995/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(MS,"href","/docs/transformers/pr_16995/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(ES,"href","/docs/transformers/pr_16995/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(CS,"href","/docs/transformers/pr_16995/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(wS,"href","/docs/transformers/pr_16995/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(AS,"href","/docs/transformers/pr_16995/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(yS,"href","/docs/transformers/pr_16995/en/model_doc/herbert#transformers.HerbertTokenizer"),c(LS,"href","/docs/transformers/pr_16995/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(xS,"href","/docs/transformers/pr_16995/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c($S,"href","/docs/transformers/pr_16995/en/model_doc/roberta#transformers.RobertaTokenizer"),c(kS,"href","/docs/transformers/pr_16995/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(SS,"href","/docs/transformers/pr_16995/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(RS,"href","/docs/transformers/pr_16995/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(BS,"href","/docs/transformers/pr_16995/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(PS,"href","/docs/transformers/pr_16995/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(IS,"href","/docs/transformers/pr_16995/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(qS,"href","/docs/transformers/pr_16995/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(NS,"href","/docs/transformers/pr_16995/en/model_doc/led#transformers.LEDTokenizer"),c(jS,"href","/docs/transformers/pr_16995/en/model_doc/led#transformers.LEDTokenizerFast"),c(DS,"href","/docs/transformers/pr_16995/en/model_doc/longformer#transformers.LongformerTokenizer"),c(GS,"href","/docs/transformers/pr_16995/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(OS,"href","/docs/transformers/pr_16995/en/model_doc/luke#transformers.LukeTokenizer"),c(VS,"href","/docs/transformers/pr_16995/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(XS,"href","/docs/transformers/pr_16995/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(zS,"href","/docs/transformers/pr_16995/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(QS,"href","/docs/transformers/pr_16995/en/model_doc/marian#transformers.MarianTokenizer"),c(WS,"href","/docs/transformers/pr_16995/en/model_doc/mbart#transformers.MBartTokenizer"),c(HS,"href","/docs/transformers/pr_16995/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(US,"href","/docs/transformers/pr_16995/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(JS,"href","/docs/transformers/pr_16995/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(YS,"href","/docs/transformers/pr_16995/en/model_doc/bert#transformers.BertTokenizer"),c(KS,"href","/docs/transformers/pr_16995/en/model_doc/bert#transformers.BertTokenizerFast"),c(ZS,"href","/docs/transformers/pr_16995/en/model_doc/mluke#transformers.MLukeTokenizer"),c(eR,"href","/docs/transformers/pr_16995/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(oR,"href","/docs/transformers/pr_16995/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(rR,"href","/docs/transformers/pr_16995/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(tR,"href","/docs/transformers/pr_16995/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(aR,"href","/docs/transformers/pr_16995/en/model_doc/mt5#transformers.T5Tokenizer"),c(nR,"href","/docs/transformers/pr_16995/en/model_doc/mt5#transformers.T5TokenizerFast"),c(sR,"href","/docs/transformers/pr_16995/en/model_doc/albert#transformers.AlbertTokenizer"),c(lR,"href","/docs/transformers/pr_16995/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(iR,"href","/docs/transformers/pr_16995/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(dR,"href","/docs/transformers/pr_16995/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(cR,"href","/docs/transformers/pr_16995/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(fR,"href","/docs/transformers/pr_16995/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(mR,"href","/docs/transformers/pr_16995/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(gR,"href","/docs/transformers/pr_16995/en/model_doc/phobert#transformers.PhobertTokenizer"),c(hR,"href","/docs/transformers/pr_16995/en/model_doc/plbart#transformers.PLBartTokenizer"),c(pR,"href","/docs/transformers/pr_16995/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(uR,"href","/docs/transformers/pr_16995/en/model_doc/bert#transformers.BertTokenizer"),c(_R,"href","/docs/transformers/pr_16995/en/model_doc/bert#transformers.BertTokenizerFast"),c(bR,"href","/docs/transformers/pr_16995/en/model_doc/rag#transformers.RagTokenizer"),c(vR,"href","/docs/transformers/pr_16995/en/model_doc/realm#transformers.RealmTokenizer"),c(FR,"href","/docs/transformers/pr_16995/en/model_doc/realm#transformers.RealmTokenizerFast"),c(TR,"href","/docs/transformers/pr_16995/en/model_doc/reformer#transformers.ReformerTokenizer"),c(MR,"href","/docs/transformers/pr_16995/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(ER,"href","/docs/transformers/pr_16995/en/model_doc/rembert#transformers.RemBertTokenizer"),c(CR,"href","/docs/transformers/pr_16995/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(wR,"href","/docs/transformers/pr_16995/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(AR,"href","/docs/transformers/pr_16995/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(yR,"href","/docs/transformers/pr_16995/en/model_doc/roberta#transformers.RobertaTokenizer"),c(LR,"href","/docs/transformers/pr_16995/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(xR,"href","/docs/transformers/pr_16995/en/model_doc/roformer#transformers.RoFormerTokenizer"),c($R,"href","/docs/transformers/pr_16995/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(kR,"href","/docs/transformers/pr_16995/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(SR,"href","/docs/transformers/pr_16995/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(RR,"href","/docs/transformers/pr_16995/en/model_doc/splinter#transformers.SplinterTokenizer"),c(BR,"href","/docs/transformers/pr_16995/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(PR,"href","/docs/transformers/pr_16995/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(IR,"href","/docs/transformers/pr_16995/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(qR,"href","/docs/transformers/pr_16995/en/model_doc/mt5#transformers.T5Tokenizer"),c(NR,"href","/docs/transformers/pr_16995/en/model_doc/mt5#transformers.T5TokenizerFast"),c(jR,"href","/docs/transformers/pr_16995/en/model_doc/tapas#transformers.TapasTokenizer"),c(DR,"href","/docs/transformers/pr_16995/en/model_doc/tapex#transformers.TapexTokenizer"),c(GR,"href","/docs/transformers/pr_16995/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(OR,"href","/docs/transformers/pr_16995/en/model_doc/bert#transformers.BertTokenizer"),c(VR,"href","/docs/transformers/pr_16995/en/model_doc/bert#transformers.BertTokenizerFast"),c(XR,"href","/docs/transformers/pr_16995/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(zR,"href","/docs/transformers/pr_16995/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(QR,"href","/docs/transformers/pr_16995/en/model_doc/xglm#transformers.XGLMTokenizer"),c(WR,"href","/docs/transformers/pr_16995/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(HR,"href","/docs/transformers/pr_16995/en/model_doc/xlm#transformers.XLMTokenizer"),c(UR,"href","/docs/transformers/pr_16995/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(JR,"href","/docs/transformers/pr_16995/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(YR,"href","/docs/transformers/pr_16995/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(KR,"href","/docs/transformers/pr_16995/en/model_doc/roberta#transformers.RobertaTokenizer"),c(ZR,"href","/docs/transformers/pr_16995/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(eB,"href","/docs/transformers/pr_16995/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(oB,"href","/docs/transformers/pr_16995/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(rB,"href","/docs/transformers/pr_16995/en/model_doc/albert#transformers.AlbertTokenizer"),c(tB,"href","/docs/transformers/pr_16995/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ig,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qg,"id","transformers.AutoFeatureExtractor"),c(qg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(qg,"href","#transformers.AutoFeatureExtractor"),c(mi,"class","relative group"),c(aB,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(nB,"href","/docs/transformers/pr_16995/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(sB,"href","/docs/transformers/pr_16995/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(lB,"href","/docs/transformers/pr_16995/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(iB,"href","/docs/transformers/pr_16995/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(dB,"href","/docs/transformers/pr_16995/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(cB,"href","/docs/transformers/pr_16995/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(fB,"href","/docs/transformers/pr_16995/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(mB,"href","/docs/transformers/pr_16995/en/model_doc/dpt#transformers.DPTFeatureExtractor"),c(gB,"href","/docs/transformers/pr_16995/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),c(hB,"href","/docs/transformers/pr_16995/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(pB,"href","/docs/transformers/pr_16995/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(uB,"href","/docs/transformers/pr_16995/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(_B,"href","/docs/transformers/pr_16995/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(bB,"href","/docs/transformers/pr_16995/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(vB,"href","/docs/transformers/pr_16995/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(FB,"href","/docs/transformers/pr_16995/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(TB,"href","/docs/transformers/pr_16995/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(MB,"href","/docs/transformers/pr_16995/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(EB,"href","/docs/transformers/pr_16995/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(CB,"href","/docs/transformers/pr_16995/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(wB,"href","/docs/transformers/pr_16995/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(AB,"href","/docs/transformers/pr_16995/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(yB,"href","/docs/transformers/pr_16995/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ch,"id","transformers.AutoProcessor"),c(ch,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ch,"href","#transformers.AutoProcessor"),c(gi,"class","relative group"),c(LB,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(xB,"href","/docs/transformers/pr_16995/en/model_doc/clip#transformers.CLIPProcessor"),c($B,"href","/docs/transformers/pr_16995/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(kB,"href","/docs/transformers/pr_16995/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(SB,"href","/docs/transformers/pr_16995/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(RB,"href","/docs/transformers/pr_16995/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(BB,"href","/docs/transformers/pr_16995/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(PB,"href","/docs/transformers/pr_16995/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(IB,"href","/docs/transformers/pr_16995/en/model_doc/trocr#transformers.TrOCRProcessor"),c(qB,"href","/docs/transformers/pr_16995/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(NB,"href","/docs/transformers/pr_16995/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(jB,"href","/docs/transformers/pr_16995/en/model_doc/vilt#transformers.ViltProcessor"),c(DB,"href","/docs/transformers/pr_16995/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(GB,"href","/docs/transformers/pr_16995/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(OB,"href","/docs/transformers/pr_16995/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Qe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lh,"id","transformers.AutoModel"),c(Lh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Lh,"href","#transformers.AutoModel"),c(pi,"class","relative group"),c(VB,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(XB,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(zB,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QB,"href","/docs/transformers/pr_16995/en/model_doc/albert#transformers.AlbertModel"),c(WB,"href","/docs/transformers/pr_16995/en/model_doc/bart#transformers.BartModel"),c(HB,"href","/docs/transformers/pr_16995/en/model_doc/beit#transformers.BeitModel"),c(UB,"href","/docs/transformers/pr_16995/en/model_doc/bert#transformers.BertModel"),c(JB,"href","/docs/transformers/pr_16995/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(YB,"href","/docs/transformers/pr_16995/en/model_doc/big_bird#transformers.BigBirdModel"),c(KB,"href","/docs/transformers/pr_16995/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(ZB,"href","/docs/transformers/pr_16995/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(eP,"href","/docs/transformers/pr_16995/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(oP,"href","/docs/transformers/pr_16995/en/model_doc/camembert#transformers.CamembertModel"),c(rP,"href","/docs/transformers/pr_16995/en/model_doc/canine#transformers.CanineModel"),c(tP,"href","/docs/transformers/pr_16995/en/model_doc/clip#transformers.CLIPModel"),c(aP,"href","/docs/transformers/pr_16995/en/model_doc/convbert#transformers.ConvBertModel"),c(nP,"href","/docs/transformers/pr_16995/en/model_doc/convnext#transformers.ConvNextModel"),c(sP,"href","/docs/transformers/pr_16995/en/model_doc/ctrl#transformers.CTRLModel"),c(lP,"href","/docs/transformers/pr_16995/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(iP,"href","/docs/transformers/pr_16995/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(dP,"href","/docs/transformers/pr_16995/en/model_doc/data2vec#transformers.Data2VecVisionModel"),c(cP,"href","/docs/transformers/pr_16995/en/model_doc/deberta#transformers.DebertaModel"),c(fP,"href","/docs/transformers/pr_16995/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(mP,"href","/docs/transformers/pr_16995/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),c(gP,"href","/docs/transformers/pr_16995/en/model_doc/deit#transformers.DeiTModel"),c(hP,"href","/docs/transformers/pr_16995/en/model_doc/detr#transformers.DetrModel"),c(pP,"href","/docs/transformers/pr_16995/en/model_doc/distilbert#transformers.DistilBertModel"),c(uP,"href","/docs/transformers/pr_16995/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(_P,"href","/docs/transformers/pr_16995/en/model_doc/dpt#transformers.DPTModel"),c(bP,"href","/docs/transformers/pr_16995/en/model_doc/electra#transformers.ElectraModel"),c(vP,"href","/docs/transformers/pr_16995/en/model_doc/flaubert#transformers.FlaubertModel"),c(FP,"href","/docs/transformers/pr_16995/en/model_doc/fnet#transformers.FNetModel"),c(TP,"href","/docs/transformers/pr_16995/en/model_doc/fsmt#transformers.FSMTModel"),c(MP,"href","/docs/transformers/pr_16995/en/model_doc/funnel#transformers.FunnelModel"),c(EP,"href","/docs/transformers/pr_16995/en/model_doc/funnel#transformers.FunnelBaseModel"),c(CP,"href","/docs/transformers/pr_16995/en/model_doc/glpn#transformers.GLPNModel"),c(wP,"href","/docs/transformers/pr_16995/en/model_doc/gpt2#transformers.GPT2Model"),c(AP,"href","/docs/transformers/pr_16995/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(yP,"href","/docs/transformers/pr_16995/en/model_doc/gptj#transformers.GPTJModel"),c(LP,"href","/docs/transformers/pr_16995/en/model_doc/hubert#transformers.HubertModel"),c(xP,"href","/docs/transformers/pr_16995/en/model_doc/ibert#transformers.IBertModel"),c($P,"href","/docs/transformers/pr_16995/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(kP,"href","/docs/transformers/pr_16995/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(SP,"href","/docs/transformers/pr_16995/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(RP,"href","/docs/transformers/pr_16995/en/model_doc/led#transformers.LEDModel"),c(BP,"href","/docs/transformers/pr_16995/en/model_doc/longformer#transformers.LongformerModel"),c(PP,"href","/docs/transformers/pr_16995/en/model_doc/luke#transformers.LukeModel"),c(IP,"href","/docs/transformers/pr_16995/en/model_doc/lxmert#transformers.LxmertModel"),c(qP,"href","/docs/transformers/pr_16995/en/model_doc/m2m_100#transformers.M2M100Model"),c(NP,"href","/docs/transformers/pr_16995/en/model_doc/marian#transformers.MarianModel"),c(jP,"href","/docs/transformers/pr_16995/en/model_doc/maskformer#transformers.MaskFormerModel"),c(DP,"href","/docs/transformers/pr_16995/en/model_doc/mbart#transformers.MBartModel"),c(GP,"href","/docs/transformers/pr_16995/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(OP,"href","/docs/transformers/pr_16995/en/model_doc/mobilebert#transformers.MobileBertModel"),c(VP,"href","/docs/transformers/pr_16995/en/model_doc/mpnet#transformers.MPNetModel"),c(XP,"href","/docs/transformers/pr_16995/en/model_doc/mt5#transformers.MT5Model"),c(zP,"href","/docs/transformers/pr_16995/en/model_doc/nystromformer#transformers.NystromformerModel"),c(QP,"href","/docs/transformers/pr_16995/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(WP,"href","/docs/transformers/pr_16995/en/model_doc/pegasus#transformers.PegasusModel"),c(HP,"href","/docs/transformers/pr_16995/en/model_doc/perceiver#transformers.PerceiverModel"),c(UP,"href","/docs/transformers/pr_16995/en/model_doc/plbart#transformers.PLBartModel"),c(JP,"href","/docs/transformers/pr_16995/en/model_doc/poolformer#transformers.PoolFormerModel"),c(YP,"href","/docs/transformers/pr_16995/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(KP,"href","/docs/transformers/pr_16995/en/model_doc/qdqbert#transformers.QDQBertModel"),c(ZP,"href","/docs/transformers/pr_16995/en/model_doc/reformer#transformers.ReformerModel"),c(eI,"href","/docs/transformers/pr_16995/en/model_doc/regnet#transformers.RegNetModel"),c(oI,"href","/docs/transformers/pr_16995/en/model_doc/rembert#transformers.RemBertModel"),c(rI,"href","/docs/transformers/pr_16995/en/model_doc/resnet#transformers.ResNetModel"),c(tI,"href","/docs/transformers/pr_16995/en/model_doc/retribert#transformers.RetriBertModel"),c(aI,"href","/docs/transformers/pr_16995/en/model_doc/roberta#transformers.RobertaModel"),c(nI,"href","/docs/transformers/pr_16995/en/model_doc/roformer#transformers.RoFormerModel"),c(sI,"href","/docs/transformers/pr_16995/en/model_doc/segformer#transformers.SegformerModel"),c(lI,"href","/docs/transformers/pr_16995/en/model_doc/sew#transformers.SEWModel"),c(iI,"href","/docs/transformers/pr_16995/en/model_doc/sew-d#transformers.SEWDModel"),c(dI,"href","/docs/transformers/pr_16995/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(cI,"href","/docs/transformers/pr_16995/en/model_doc/splinter#transformers.SplinterModel"),c(fI,"href","/docs/transformers/pr_16995/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(mI,"href","/docs/transformers/pr_16995/en/model_doc/swin#transformers.SwinModel"),c(gI,"href","/docs/transformers/pr_16995/en/model_doc/t5#transformers.T5Model"),c(hI,"href","/docs/transformers/pr_16995/en/model_doc/tapas#transformers.TapasModel"),c(pI,"href","/docs/transformers/pr_16995/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(uI,"href","/docs/transformers/pr_16995/en/model_doc/unispeech#transformers.UniSpeechModel"),c(_I,"href","/docs/transformers/pr_16995/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(bI,"href","/docs/transformers/pr_16995/en/model_doc/van#transformers.VanModel"),c(vI,"href","/docs/transformers/pr_16995/en/model_doc/vilt#transformers.ViltModel"),c(FI,"href","/docs/transformers/pr_16995/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(TI,"href","/docs/transformers/pr_16995/en/model_doc/visual_bert#transformers.VisualBertModel"),c(MI,"href","/docs/transformers/pr_16995/en/model_doc/vit#transformers.ViTModel"),c(EI,"href","/docs/transformers/pr_16995/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(CI,"href","/docs/transformers/pr_16995/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(wI,"href","/docs/transformers/pr_16995/en/model_doc/wavlm#transformers.WavLMModel"),c(AI,"href","/docs/transformers/pr_16995/en/model_doc/xglm#transformers.XGLMModel"),c(yI,"href","/docs/transformers/pr_16995/en/model_doc/xlm#transformers.XLMModel"),c(LI,"href","/docs/transformers/pr_16995/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(xI,"href","/docs/transformers/pr_16995/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c($I,"href","/docs/transformers/pr_16995/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(kI,"href","/docs/transformers/pr_16995/en/model_doc/xlnet#transformers.XLNetModel"),c(SI,"href","/docs/transformers/pr_16995/en/model_doc/yoso#transformers.YosoModel"),c(We,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_u,"id","transformers.AutoModelForPreTraining"),c(_u,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_u,"href","#transformers.AutoModelForPreTraining"),c(bi,"class","relative group"),c(RI,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(BI,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(PI,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(II,"href","/docs/transformers/pr_16995/en/model_doc/albert#transformers.AlbertForPreTraining"),c(qI,"href","/docs/transformers/pr_16995/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(NI,"href","/docs/transformers/pr_16995/en/model_doc/bert#transformers.BertForPreTraining"),c(jI,"href","/docs/transformers/pr_16995/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(DI,"href","/docs/transformers/pr_16995/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(GI,"href","/docs/transformers/pr_16995/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(OI,"href","/docs/transformers/pr_16995/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(VI,"href","/docs/transformers/pr_16995/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(XI,"href","/docs/transformers/pr_16995/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(zI,"href","/docs/transformers/pr_16995/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(QI,"href","/docs/transformers/pr_16995/en/model_doc/electra#transformers.ElectraForPreTraining"),c(WI,"href","/docs/transformers/pr_16995/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(HI,"href","/docs/transformers/pr_16995/en/model_doc/fnet#transformers.FNetForPreTraining"),c(UI,"href","/docs/transformers/pr_16995/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(JI,"href","/docs/transformers/pr_16995/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(YI,"href","/docs/transformers/pr_16995/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(KI,"href","/docs/transformers/pr_16995/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(ZI,"href","/docs/transformers/pr_16995/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(eq,"href","/docs/transformers/pr_16995/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(oq,"href","/docs/transformers/pr_16995/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(rq,"href","/docs/transformers/pr_16995/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(tq,"href","/docs/transformers/pr_16995/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(aq,"href","/docs/transformers/pr_16995/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(nq,"href","/docs/transformers/pr_16995/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(sq,"href","/docs/transformers/pr_16995/en/model_doc/retribert#transformers.RetriBertModel"),c(lq,"href","/docs/transformers/pr_16995/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(iq,"href","/docs/transformers/pr_16995/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(dq,"href","/docs/transformers/pr_16995/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(cq,"href","/docs/transformers/pr_16995/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(fq,"href","/docs/transformers/pr_16995/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(mq,"href","/docs/transformers/pr_16995/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(gq,"href","/docs/transformers/pr_16995/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(hq,"href","/docs/transformers/pr_16995/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(pq,"href","/docs/transformers/pr_16995/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(uq,"href","/docs/transformers/pr_16995/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(_q,"href","/docs/transformers/pr_16995/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(bq,"href","/docs/transformers/pr_16995/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(vq,"href","/docs/transformers/pr_16995/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(Fq,"href","/docs/transformers/pr_16995/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(He,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(s_,"id","transformers.AutoModelForCausalLM"),c(s_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(s_,"href","#transformers.AutoModelForCausalLM"),c(Ti,"class","relative group"),c(Tq,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mq,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Eq,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Cq,"href","/docs/transformers/pr_16995/en/model_doc/bart#transformers.BartForCausalLM"),c(wq,"href","/docs/transformers/pr_16995/en/model_doc/bert#transformers.BertLMHeadModel"),c(Aq,"href","/docs/transformers/pr_16995/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(yq,"href","/docs/transformers/pr_16995/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(Lq,"href","/docs/transformers/pr_16995/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(xq,"href","/docs/transformers/pr_16995/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c($q,"href","/docs/transformers/pr_16995/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(kq,"href","/docs/transformers/pr_16995/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(Sq,"href","/docs/transformers/pr_16995/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(Rq,"href","/docs/transformers/pr_16995/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(Bq,"href","/docs/transformers/pr_16995/en/model_doc/electra#transformers.ElectraForCausalLM"),c(Pq,"href","/docs/transformers/pr_16995/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(Iq,"href","/docs/transformers/pr_16995/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(qq,"href","/docs/transformers/pr_16995/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(Nq,"href","/docs/transformers/pr_16995/en/model_doc/marian#transformers.MarianForCausalLM"),c(jq,"href","/docs/transformers/pr_16995/en/model_doc/mbart#transformers.MBartForCausalLM"),c(Dq,"href","/docs/transformers/pr_16995/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(Gq,"href","/docs/transformers/pr_16995/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(Oq,"href","/docs/transformers/pr_16995/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(Vq,"href","/docs/transformers/pr_16995/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(Xq,"href","/docs/transformers/pr_16995/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(zq,"href","/docs/transformers/pr_16995/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(Qq,"href","/docs/transformers/pr_16995/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(Wq,"href","/docs/transformers/pr_16995/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(Hq,"href","/docs/transformers/pr_16995/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(Uq,"href","/docs/transformers/pr_16995/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(Jq,"href","/docs/transformers/pr_16995/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(Yq,"href","/docs/transformers/pr_16995/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(Kq,"href","/docs/transformers/pr_16995/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(Zq,"href","/docs/transformers/pr_16995/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(eN,"href","/docs/transformers/pr_16995/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(oN,"href","/docs/transformers/pr_16995/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(rN,"href","/docs/transformers/pr_16995/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(tN,"href","/docs/transformers/pr_16995/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(aN,"href","/docs/transformers/pr_16995/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(z_,"id","transformers.AutoModelForMaskedLM"),c(z_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(z_,"href","#transformers.AutoModelForMaskedLM"),c(Ci,"class","relative group"),c(nN,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(sN,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(lN,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iN,"href","/docs/transformers/pr_16995/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(dN,"href","/docs/transformers/pr_16995/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(cN,"href","/docs/transformers/pr_16995/en/model_doc/bert#transformers.BertForMaskedLM"),c(fN,"href","/docs/transformers/pr_16995/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(mN,"href","/docs/transformers/pr_16995/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(gN,"href","/docs/transformers/pr_16995/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(hN,"href","/docs/transformers/pr_16995/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(pN,"href","/docs/transformers/pr_16995/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(uN,"href","/docs/transformers/pr_16995/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(_N,"href","/docs/transformers/pr_16995/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(bN,"href","/docs/transformers/pr_16995/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(vN,"href","/docs/transformers/pr_16995/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(FN,"href","/docs/transformers/pr_16995/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(TN,"href","/docs/transformers/pr_16995/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(MN,"href","/docs/transformers/pr_16995/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(EN,"href","/docs/transformers/pr_16995/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(CN,"href","/docs/transformers/pr_16995/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(wN,"href","/docs/transformers/pr_16995/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(AN,"href","/docs/transformers/pr_16995/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(yN,"href","/docs/transformers/pr_16995/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(LN,"href","/docs/transformers/pr_16995/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(xN,"href","/docs/transformers/pr_16995/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c($N,"href","/docs/transformers/pr_16995/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(kN,"href","/docs/transformers/pr_16995/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(SN,"href","/docs/transformers/pr_16995/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(RN,"href","/docs/transformers/pr_16995/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(BN,"href","/docs/transformers/pr_16995/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(PN,"href","/docs/transformers/pr_16995/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(IN,"href","/docs/transformers/pr_16995/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(qN,"href","/docs/transformers/pr_16995/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(NN,"href","/docs/transformers/pr_16995/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(jN,"href","/docs/transformers/pr_16995/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(DN,"href","/docs/transformers/pr_16995/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(GN,"href","/docs/transformers/pr_16995/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($1,"id","transformers.AutoModelForSeq2SeqLM"),c($1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($1,"href","#transformers.AutoModelForSeq2SeqLM"),c(yi,"class","relative group"),c(ON,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(VN,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(XN,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zN,"href","/docs/transformers/pr_16995/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(QN,"href","/docs/transformers/pr_16995/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(WN,"href","/docs/transformers/pr_16995/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(HN,"href","/docs/transformers/pr_16995/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(UN,"href","/docs/transformers/pr_16995/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(JN,"href","/docs/transformers/pr_16995/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(YN,"href","/docs/transformers/pr_16995/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(KN,"href","/docs/transformers/pr_16995/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(ZN,"href","/docs/transformers/pr_16995/en/model_doc/marian#transformers.MarianMTModel"),c(ej,"href","/docs/transformers/pr_16995/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(oj,"href","/docs/transformers/pr_16995/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(rj,"href","/docs/transformers/pr_16995/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(tj,"href","/docs/transformers/pr_16995/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(aj,"href","/docs/transformers/pr_16995/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(nj,"href","/docs/transformers/pr_16995/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(sj,"href","/docs/transformers/pr_16995/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(lj,"href","/docs/transformers/pr_16995/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Y1,"id","transformers.AutoModelForSequenceClassification"),c(Y1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Y1,"href","#transformers.AutoModelForSequenceClassification"),c($i,"class","relative group"),c(ij,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dj,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(cj,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(at,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fj,"href","/docs/transformers/pr_16995/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(mj,"href","/docs/transformers/pr_16995/en/model_doc/bart#transformers.BartForSequenceClassification"),c(gj,"href","/docs/transformers/pr_16995/en/model_doc/bert#transformers.BertForSequenceClassification"),c(hj,"href","/docs/transformers/pr_16995/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(pj,"href","/docs/transformers/pr_16995/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(uj,"href","/docs/transformers/pr_16995/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(_j,"href","/docs/transformers/pr_16995/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(bj,"href","/docs/transformers/pr_16995/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(vj,"href","/docs/transformers/pr_16995/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(Fj,"href","/docs/transformers/pr_16995/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(Tj,"href","/docs/transformers/pr_16995/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(Mj,"href","/docs/transformers/pr_16995/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(Ej,"href","/docs/transformers/pr_16995/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(Cj,"href","/docs/transformers/pr_16995/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(wj,"href","/docs/transformers/pr_16995/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(Aj,"href","/docs/transformers/pr_16995/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(yj,"href","/docs/transformers/pr_16995/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(Lj,"href","/docs/transformers/pr_16995/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(xj,"href","/docs/transformers/pr_16995/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c($j,"href","/docs/transformers/pr_16995/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(kj,"href","/docs/transformers/pr_16995/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(Sj,"href","/docs/transformers/pr_16995/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(Rj,"href","/docs/transformers/pr_16995/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(Bj,"href","/docs/transformers/pr_16995/en/model_doc/led#transformers.LEDForSequenceClassification"),c(Pj,"href","/docs/transformers/pr_16995/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(Ij,"href","/docs/transformers/pr_16995/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(qj,"href","/docs/transformers/pr_16995/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(Nj,"href","/docs/transformers/pr_16995/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(jj,"href","/docs/transformers/pr_16995/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(Dj,"href","/docs/transformers/pr_16995/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(Gj,"href","/docs/transformers/pr_16995/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(Oj,"href","/docs/transformers/pr_16995/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(Vj,"href","/docs/transformers/pr_16995/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(Xj,"href","/docs/transformers/pr_16995/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(zj,"href","/docs/transformers/pr_16995/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(Qj,"href","/docs/transformers/pr_16995/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(Wj,"href","/docs/transformers/pr_16995/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(Hj,"href","/docs/transformers/pr_16995/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(Uj,"href","/docs/transformers/pr_16995/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(Jj,"href","/docs/transformers/pr_16995/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(Yj,"href","/docs/transformers/pr_16995/en/model_doc/bart#transformers.BartForSequenceClassification"),c(Kj,"href","/docs/transformers/pr_16995/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(Zj,"href","/docs/transformers/pr_16995/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(eD,"href","/docs/transformers/pr_16995/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(oD,"href","/docs/transformers/pr_16995/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(rD,"href","/docs/transformers/pr_16995/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(tD,"href","/docs/transformers/pr_16995/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(H9,"id","transformers.AutoModelForMultipleChoice"),c(H9,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(H9,"href","#transformers.AutoModelForMultipleChoice"),c(Ri,"class","relative group"),c(aD,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nD,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(sD,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lD,"href","/docs/transformers/pr_16995/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(iD,"href","/docs/transformers/pr_16995/en/model_doc/bert#transformers.BertForMultipleChoice"),c(dD,"href","/docs/transformers/pr_16995/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(cD,"href","/docs/transformers/pr_16995/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(fD,"href","/docs/transformers/pr_16995/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(mD,"href","/docs/transformers/pr_16995/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(gD,"href","/docs/transformers/pr_16995/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(hD,"href","/docs/transformers/pr_16995/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(pD,"href","/docs/transformers/pr_16995/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(uD,"href","/docs/transformers/pr_16995/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(_D,"href","/docs/transformers/pr_16995/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(bD,"href","/docs/transformers/pr_16995/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(vD,"href","/docs/transformers/pr_16995/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(FD,"href","/docs/transformers/pr_16995/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(TD,"href","/docs/transformers/pr_16995/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(MD,"href","/docs/transformers/pr_16995/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(ED,"href","/docs/transformers/pr_16995/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(CD,"href","/docs/transformers/pr_16995/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(wD,"href","/docs/transformers/pr_16995/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(AD,"href","/docs/transformers/pr_16995/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(yD,"href","/docs/transformers/pr_16995/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(LD,"href","/docs/transformers/pr_16995/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(xD,"href","/docs/transformers/pr_16995/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c($D,"href","/docs/transformers/pr_16995/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(kD,"href","/docs/transformers/pr_16995/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(SD,"href","/docs/transformers/pr_16995/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(RD,"href","/docs/transformers/pr_16995/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(BD,"href","/docs/transformers/pr_16995/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ab,"id","transformers.AutoModelForNextSentencePrediction"),c(Ab,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ab,"href","#transformers.AutoModelForNextSentencePrediction"),c(Ii,"class","relative group"),c(PD,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ID,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qD,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(st,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ND,"href","/docs/transformers/pr_16995/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(jD,"href","/docs/transformers/pr_16995/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(DD,"href","/docs/transformers/pr_16995/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(GD,"href","/docs/transformers/pr_16995/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(OD,"href","/docs/transformers/pr_16995/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Pb,"id","transformers.AutoModelForTokenClassification"),c(Pb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Pb,"href","#transformers.AutoModelForTokenClassification"),c(ji,"class","relative group"),c(VD,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(XD,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(zD,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QD,"href","/docs/transformers/pr_16995/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(WD,"href","/docs/transformers/pr_16995/en/model_doc/bert#transformers.BertForTokenClassification"),c(HD,"href","/docs/transformers/pr_16995/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(UD,"href","/docs/transformers/pr_16995/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(JD,"href","/docs/transformers/pr_16995/en/model_doc/canine#transformers.CanineForTokenClassification"),c(YD,"href","/docs/transformers/pr_16995/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(KD,"href","/docs/transformers/pr_16995/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(ZD,"href","/docs/transformers/pr_16995/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(eG,"href","/docs/transformers/pr_16995/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(oG,"href","/docs/transformers/pr_16995/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(rG,"href","/docs/transformers/pr_16995/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(tG,"href","/docs/transformers/pr_16995/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(aG,"href","/docs/transformers/pr_16995/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(nG,"href","/docs/transformers/pr_16995/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(sG,"href","/docs/transformers/pr_16995/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(lG,"href","/docs/transformers/pr_16995/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(iG,"href","/docs/transformers/pr_16995/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(dG,"href","/docs/transformers/pr_16995/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(cG,"href","/docs/transformers/pr_16995/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(fG,"href","/docs/transformers/pr_16995/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(mG,"href","/docs/transformers/pr_16995/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(gG,"href","/docs/transformers/pr_16995/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(hG,"href","/docs/transformers/pr_16995/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(pG,"href","/docs/transformers/pr_16995/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(uG,"href","/docs/transformers/pr_16995/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(_G,"href","/docs/transformers/pr_16995/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(bG,"href","/docs/transformers/pr_16995/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(vG,"href","/docs/transformers/pr_16995/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(FG,"href","/docs/transformers/pr_16995/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(TG,"href","/docs/transformers/pr_16995/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(MG,"href","/docs/transformers/pr_16995/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(EG,"href","/docs/transformers/pr_16995/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(CG,"href","/docs/transformers/pr_16995/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(b2,"id","transformers.AutoModelForQuestionAnswering"),c(b2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(b2,"href","#transformers.AutoModelForQuestionAnswering"),c(Oi,"class","relative group"),c(wG,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(AG,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(yG,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LG,"href","/docs/transformers/pr_16995/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(xG,"href","/docs/transformers/pr_16995/en/model_doc/bart#transformers.BartForQuestionAnswering"),c($G,"href","/docs/transformers/pr_16995/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(kG,"href","/docs/transformers/pr_16995/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(SG,"href","/docs/transformers/pr_16995/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(RG,"href","/docs/transformers/pr_16995/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(BG,"href","/docs/transformers/pr_16995/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(PG,"href","/docs/transformers/pr_16995/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(IG,"href","/docs/transformers/pr_16995/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(qG,"href","/docs/transformers/pr_16995/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(NG,"href","/docs/transformers/pr_16995/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(jG,"href","/docs/transformers/pr_16995/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(DG,"href","/docs/transformers/pr_16995/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(GG,"href","/docs/transformers/pr_16995/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(OG,"href","/docs/transformers/pr_16995/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(VG,"href","/docs/transformers/pr_16995/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(XG,"href","/docs/transformers/pr_16995/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(zG,"href","/docs/transformers/pr_16995/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(QG,"href","/docs/transformers/pr_16995/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(WG,"href","/docs/transformers/pr_16995/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(HG,"href","/docs/transformers/pr_16995/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(UG,"href","/docs/transformers/pr_16995/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(JG,"href","/docs/transformers/pr_16995/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(YG,"href","/docs/transformers/pr_16995/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(KG,"href","/docs/transformers/pr_16995/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(ZG,"href","/docs/transformers/pr_16995/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(eO,"href","/docs/transformers/pr_16995/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(oO,"href","/docs/transformers/pr_16995/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(rO,"href","/docs/transformers/pr_16995/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(tO,"href","/docs/transformers/pr_16995/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(aO,"href","/docs/transformers/pr_16995/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(nO,"href","/docs/transformers/pr_16995/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(sO,"href","/docs/transformers/pr_16995/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(lO,"href","/docs/transformers/pr_16995/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(iO,"href","/docs/transformers/pr_16995/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(dO,"href","/docs/transformers/pr_16995/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(cO,"href","/docs/transformers/pr_16995/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(fO,"href","/docs/transformers/pr_16995/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(mO,"href","/docs/transformers/pr_16995/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(l5,"id","transformers.AutoModelForTableQuestionAnswering"),c(l5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(l5,"href","#transformers.AutoModelForTableQuestionAnswering"),c(zi,"class","relative group"),c(gO,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(hO,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(pO,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uO,"href","/docs/transformers/pr_16995/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(m5,"id","transformers.AutoModelForImageClassification"),c(m5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m5,"href","#transformers.AutoModelForImageClassification"),c(Hi,"class","relative group"),c(_O,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bO,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(vO,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FO,"href","/docs/transformers/pr_16995/en/model_doc/beit#transformers.BeitForImageClassification"),c(TO,"href","/docs/transformers/pr_16995/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(MO,"href","/docs/transformers/pr_16995/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),c(EO,"href","/docs/transformers/pr_16995/en/model_doc/deit#transformers.DeiTForImageClassification"),c(CO,"href","/docs/transformers/pr_16995/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(wO,"href","/docs/transformers/pr_16995/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(AO,"href","/docs/transformers/pr_16995/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(yO,"href","/docs/transformers/pr_16995/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(LO,"href","/docs/transformers/pr_16995/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(xO,"href","/docs/transformers/pr_16995/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c($O,"href","/docs/transformers/pr_16995/en/model_doc/regnet#transformers.RegNetForImageClassification"),c(kO,"href","/docs/transformers/pr_16995/en/model_doc/resnet#transformers.ResNetForImageClassification"),c(SO,"href","/docs/transformers/pr_16995/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(RO,"href","/docs/transformers/pr_16995/en/model_doc/swin#transformers.SwinForImageClassification"),c(BO,"href","/docs/transformers/pr_16995/en/model_doc/van#transformers.VanForImageClassification"),c(PO,"href","/docs/transformers/pr_16995/en/model_doc/vit#transformers.ViTForImageClassification"),c(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(y5,"id","transformers.AutoModelForVision2Seq"),c(y5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(y5,"href","#transformers.AutoModelForVision2Seq"),c(Yi,"class","relative group"),c(IO,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qO,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(NO,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jO,"href","/docs/transformers/pr_16995/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(S5,"id","transformers.AutoModelForAudioClassification"),c(S5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(S5,"href","#transformers.AutoModelForAudioClassification"),c(ed,"class","relative group"),c(DO,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(GO,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(OO,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VO,"href","/docs/transformers/pr_16995/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(XO,"href","/docs/transformers/pr_16995/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(zO,"href","/docs/transformers/pr_16995/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(QO,"href","/docs/transformers/pr_16995/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(WO,"href","/docs/transformers/pr_16995/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(HO,"href","/docs/transformers/pr_16995/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(UO,"href","/docs/transformers/pr_16995/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(JO,"href","/docs/transformers/pr_16995/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Do,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(X5,"id","transformers.AutoModelForAudioFrameClassification"),c(X5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(X5,"href","#transformers.AutoModelForAudioFrameClassification"),c(td,"class","relative group"),c(YO,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(KO,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ZO,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eV,"href","/docs/transformers/pr_16995/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(oV,"href","/docs/transformers/pr_16995/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(rV,"href","/docs/transformers/pr_16995/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(tV,"href","/docs/transformers/pr_16995/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(K5,"id","transformers.AutoModelForCTC"),c(K5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(K5,"href","#transformers.AutoModelForCTC"),c(sd,"class","relative group"),c(aV,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nV,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(sV,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lV,"href","/docs/transformers/pr_16995/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(iV,"href","/docs/transformers/pr_16995/en/model_doc/hubert#transformers.HubertForCTC"),c(dV,"href","/docs/transformers/pr_16995/en/model_doc/sew#transformers.SEWForCTC"),c(cV,"href","/docs/transformers/pr_16995/en/model_doc/sew-d#transformers.SEWDForCTC"),c(fV,"href","/docs/transformers/pr_16995/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(mV,"href","/docs/transformers/pr_16995/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(gV,"href","/docs/transformers/pr_16995/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(hV,"href","/docs/transformers/pr_16995/en/model_doc/wavlm#transformers.WavLMForCTC"),c(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cv,"id","transformers.AutoModelForSpeechSeq2Seq"),c(cv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(cv,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(dd,"class","relative group"),c(pV,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(uV,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(_V,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bV,"href","/docs/transformers/pr_16995/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(vV,"href","/docs/transformers/pr_16995/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uv,"id","transformers.AutoModelForAudioXVector"),c(uv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(uv,"href","#transformers.AutoModelForAudioXVector"),c(md,"class","relative group"),c(FV,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(TV,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(MV,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EV,"href","/docs/transformers/pr_16995/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(CV,"href","/docs/transformers/pr_16995/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(wV,"href","/docs/transformers/pr_16995/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(AV,"href","/docs/transformers/pr_16995/en/model_doc/wavlm#transformers.WavLMForXVector"),c(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Cv,"id","transformers.AutoModelForMaskedImageModeling"),c(Cv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Cv,"href","#transformers.AutoModelForMaskedImageModeling"),c(pd,"class","relative group"),c(yV,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(LV,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(xV,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($V,"href","/docs/transformers/pr_16995/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(kV,"href","/docs/transformers/pr_16995/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(SV,"href","/docs/transformers/pr_16995/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kv,"id","transformers.AutoModelForObjectDetection"),c(kv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(kv,"href","#transformers.AutoModelForObjectDetection"),c(vd,"class","relative group"),c(RV,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(BV,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(PV,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(IV,"href","/docs/transformers/pr_16995/en/model_doc/detr#transformers.DetrForObjectDetection"),c(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Iv,"id","transformers.AutoModelForImageSegmentation"),c(Iv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Iv,"href","#transformers.AutoModelForImageSegmentation"),c(Md,"class","relative group"),c(qV,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(NV,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(jV,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DV,"href","/docs/transformers/pr_16995/en/model_doc/detr#transformers.DetrForSegmentation"),c(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Gv,"id","transformers.AutoModelForSemanticSegmentation"),c(Gv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Gv,"href","#transformers.AutoModelForSemanticSegmentation"),c(wd,"class","relative group"),c(GV,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(OV,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(VV,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XV,"href","/docs/transformers/pr_16995/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(zV,"href","/docs/transformers/pr_16995/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),c(QV,"href","/docs/transformers/pr_16995/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),c(WV,"href","/docs/transformers/pr_16995/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uv,"id","transformers.AutoModelForInstanceSegmentation"),c(Uv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Uv,"href","#transformers.AutoModelForInstanceSegmentation"),c(Ld,"class","relative group"),c(HV,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(UV,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(JV,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YV,"href","/docs/transformers/pr_16995/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eF,"id","transformers.TFAutoModel"),c(eF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(eF,"href","#transformers.TFAutoModel"),c(kd,"class","relative group"),c(KV,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ZV,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(eX,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oX,"href","/docs/transformers/pr_16995/en/model_doc/albert#transformers.TFAlbertModel"),c(rX,"href","/docs/transformers/pr_16995/en/model_doc/bart#transformers.TFBartModel"),c(tX,"href","/docs/transformers/pr_16995/en/model_doc/bert#transformers.TFBertModel"),c(aX,"href","/docs/transformers/pr_16995/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(nX,"href","/docs/transformers/pr_16995/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(sX,"href","/docs/transformers/pr_16995/en/model_doc/camembert#transformers.TFCamembertModel"),c(lX,"href","/docs/transformers/pr_16995/en/model_doc/clip#transformers.TFCLIPModel"),c(iX,"href","/docs/transformers/pr_16995/en/model_doc/convbert#transformers.TFConvBertModel"),c(dX,"href","/docs/transformers/pr_16995/en/model_doc/convnext#transformers.TFConvNextModel"),c(cX,"href","/docs/transformers/pr_16995/en/model_doc/ctrl#transformers.TFCTRLModel"),c(fX,"href","/docs/transformers/pr_16995/en/model_doc/deberta#transformers.TFDebertaModel"),c(mX,"href","/docs/transformers/pr_16995/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(gX,"href","/docs/transformers/pr_16995/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(hX,"href","/docs/transformers/pr_16995/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(pX,"href","/docs/transformers/pr_16995/en/model_doc/electra#transformers.TFElectraModel"),c(uX,"href","/docs/transformers/pr_16995/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(_X,"href","/docs/transformers/pr_16995/en/model_doc/funnel#transformers.TFFunnelModel"),c(bX,"href","/docs/transformers/pr_16995/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(vX,"href","/docs/transformers/pr_16995/en/model_doc/gpt2#transformers.TFGPT2Model"),c(FX,"href","/docs/transformers/pr_16995/en/model_doc/gptj#transformers.TFGPTJModel"),c(TX,"href","/docs/transformers/pr_16995/en/model_doc/hubert#transformers.TFHubertModel"),c(MX,"href","/docs/transformers/pr_16995/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(EX,"href","/docs/transformers/pr_16995/en/model_doc/led#transformers.TFLEDModel"),c(CX,"href","/docs/transformers/pr_16995/en/model_doc/longformer#transformers.TFLongformerModel"),c(wX,"href","/docs/transformers/pr_16995/en/model_doc/lxmert#transformers.TFLxmertModel"),c(AX,"href","/docs/transformers/pr_16995/en/model_doc/marian#transformers.TFMarianModel"),c(yX,"href","/docs/transformers/pr_16995/en/model_doc/mbart#transformers.TFMBartModel"),c(LX,"href","/docs/transformers/pr_16995/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(xX,"href","/docs/transformers/pr_16995/en/model_doc/mpnet#transformers.TFMPNetModel"),c($X,"href","/docs/transformers/pr_16995/en/model_doc/mt5#transformers.TFMT5Model"),c(kX,"href","/docs/transformers/pr_16995/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(SX,"href","/docs/transformers/pr_16995/en/model_doc/pegasus#transformers.TFPegasusModel"),c(RX,"href","/docs/transformers/pr_16995/en/model_doc/rembert#transformers.TFRemBertModel"),c(BX,"href","/docs/transformers/pr_16995/en/model_doc/roberta#transformers.TFRobertaModel"),c(PX,"href","/docs/transformers/pr_16995/en/model_doc/roformer#transformers.TFRoFormerModel"),c(IX,"href","/docs/transformers/pr_16995/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(qX,"href","/docs/transformers/pr_16995/en/model_doc/t5#transformers.TFT5Model"),c(NX,"href","/docs/transformers/pr_16995/en/model_doc/tapas#transformers.TFTapasModel"),c(jX,"href","/docs/transformers/pr_16995/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(DX,"href","/docs/transformers/pr_16995/en/model_doc/vit#transformers.TFViTModel"),c(GX,"href","/docs/transformers/pr_16995/en/model_doc/vit_mae#transformers.TFViTMAEModel"),c(OX,"href","/docs/transformers/pr_16995/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(VX,"href","/docs/transformers/pr_16995/en/model_doc/xlm#transformers.TFXLMModel"),c(XX,"href","/docs/transformers/pr_16995/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(zX,"href","/docs/transformers/pr_16995/en/model_doc/xlnet#transformers.TFXLNetModel"),c(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QF,"id","transformers.TFAutoModelForPreTraining"),c(QF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(QF,"href","#transformers.TFAutoModelForPreTraining"),c(Bd,"class","relative group"),c(QX,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(WX,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(HX,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UX,"href","/docs/transformers/pr_16995/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(JX,"href","/docs/transformers/pr_16995/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(YX,"href","/docs/transformers/pr_16995/en/model_doc/bert#transformers.TFBertForPreTraining"),c(KX,"href","/docs/transformers/pr_16995/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(ZX,"href","/docs/transformers/pr_16995/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(ez,"href","/docs/transformers/pr_16995/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(oz,"href","/docs/transformers/pr_16995/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(rz,"href","/docs/transformers/pr_16995/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(tz,"href","/docs/transformers/pr_16995/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(az,"href","/docs/transformers/pr_16995/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(nz,"href","/docs/transformers/pr_16995/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(sz,"href","/docs/transformers/pr_16995/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(lz,"href","/docs/transformers/pr_16995/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(iz,"href","/docs/transformers/pr_16995/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(dz,"href","/docs/transformers/pr_16995/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(cz,"href","/docs/transformers/pr_16995/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(fz,"href","/docs/transformers/pr_16995/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(mz,"href","/docs/transformers/pr_16995/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(gz,"href","/docs/transformers/pr_16995/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(hz,"href","/docs/transformers/pr_16995/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),c(pz,"href","/docs/transformers/pr_16995/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(uz,"href","/docs/transformers/pr_16995/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(_z,"href","/docs/transformers/pr_16995/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(b6,"id","transformers.TFAutoModelForCausalLM"),c(b6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(b6,"href","#transformers.TFAutoModelForCausalLM"),c(qd,"class","relative group"),c(bz,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vz,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Fz,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tz,"href","/docs/transformers/pr_16995/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(Mz,"href","/docs/transformers/pr_16995/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c(Ez,"href","/docs/transformers/pr_16995/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(Cz,"href","/docs/transformers/pr_16995/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(wz,"href","/docs/transformers/pr_16995/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),c(Az,"href","/docs/transformers/pr_16995/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(yz,"href","/docs/transformers/pr_16995/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(Lz,"href","/docs/transformers/pr_16995/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(xz,"href","/docs/transformers/pr_16995/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c($z,"href","/docs/transformers/pr_16995/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(kz,"href","/docs/transformers/pr_16995/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(Sz,"href","/docs/transformers/pr_16995/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(R6,"id","transformers.TFAutoModelForImageClassification"),c(R6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(R6,"href","#transformers.TFAutoModelForImageClassification"),c(Dd,"class","relative group"),c(Rz,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bz,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Pz,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Iz,"href","/docs/transformers/pr_16995/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(qz,"href","/docs/transformers/pr_16995/en/model_doc/vit#transformers.TFViTForImageClassification"),c(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(N6,"id","transformers.TFAutoModelForMaskedLM"),c(N6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(N6,"href","#transformers.TFAutoModelForMaskedLM"),c(Vd,"class","relative group"),c(Nz,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jz,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Dz,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Gz,"href","/docs/transformers/pr_16995/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(Oz,"href","/docs/transformers/pr_16995/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(Vz,"href","/docs/transformers/pr_16995/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(Xz,"href","/docs/transformers/pr_16995/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(zz,"href","/docs/transformers/pr_16995/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(Qz,"href","/docs/transformers/pr_16995/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(Wz,"href","/docs/transformers/pr_16995/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(Hz,"href","/docs/transformers/pr_16995/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(Uz,"href","/docs/transformers/pr_16995/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(Jz,"href","/docs/transformers/pr_16995/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(Yz,"href","/docs/transformers/pr_16995/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(Kz,"href","/docs/transformers/pr_16995/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(Zz,"href","/docs/transformers/pr_16995/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(eQ,"href","/docs/transformers/pr_16995/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(oQ,"href","/docs/transformers/pr_16995/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(rQ,"href","/docs/transformers/pr_16995/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(tQ,"href","/docs/transformers/pr_16995/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(aQ,"href","/docs/transformers/pr_16995/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(nQ,"href","/docs/transformers/pr_16995/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(sQ,"href","/docs/transformers/pr_16995/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lT,"id","transformers.TFAutoModelForSeq2SeqLM"),c(lT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(lT,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(Qd,"class","relative group"),c(lQ,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(iQ,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(dQ,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cQ,"href","/docs/transformers/pr_16995/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(fQ,"href","/docs/transformers/pr_16995/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(mQ,"href","/docs/transformers/pr_16995/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(gQ,"href","/docs/transformers/pr_16995/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(hQ,"href","/docs/transformers/pr_16995/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(pQ,"href","/docs/transformers/pr_16995/en/model_doc/marian#transformers.TFMarianMTModel"),c(uQ,"href","/docs/transformers/pr_16995/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(_Q,"href","/docs/transformers/pr_16995/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(bQ,"href","/docs/transformers/pr_16995/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(vQ,"href","/docs/transformers/pr_16995/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FT,"id","transformers.TFAutoModelForSequenceClassification"),c(FT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(FT,"href","#transformers.TFAutoModelForSequenceClassification"),c(Ud,"class","relative group"),c(FQ,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(TQ,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(MQ,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EQ,"href","/docs/transformers/pr_16995/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(CQ,"href","/docs/transformers/pr_16995/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(wQ,"href","/docs/transformers/pr_16995/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(AQ,"href","/docs/transformers/pr_16995/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(yQ,"href","/docs/transformers/pr_16995/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(LQ,"href","/docs/transformers/pr_16995/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(xQ,"href","/docs/transformers/pr_16995/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c($Q,"href","/docs/transformers/pr_16995/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(kQ,"href","/docs/transformers/pr_16995/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(SQ,"href","/docs/transformers/pr_16995/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(RQ,"href","/docs/transformers/pr_16995/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(BQ,"href","/docs/transformers/pr_16995/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(PQ,"href","/docs/transformers/pr_16995/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),c(IQ,"href","/docs/transformers/pr_16995/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(qQ,"href","/docs/transformers/pr_16995/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(NQ,"href","/docs/transformers/pr_16995/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(jQ,"href","/docs/transformers/pr_16995/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(DQ,"href","/docs/transformers/pr_16995/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(GQ,"href","/docs/transformers/pr_16995/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(OQ,"href","/docs/transformers/pr_16995/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(VQ,"href","/docs/transformers/pr_16995/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(XQ,"href","/docs/transformers/pr_16995/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(zQ,"href","/docs/transformers/pr_16995/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(QQ,"href","/docs/transformers/pr_16995/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(WQ,"href","/docs/transformers/pr_16995/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(HQ,"href","/docs/transformers/pr_16995/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UT,"id","transformers.TFAutoModelForMultipleChoice"),c(UT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(UT,"href","#transformers.TFAutoModelForMultipleChoice"),c(Kd,"class","relative group"),c(UQ,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(JQ,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(YQ,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KQ,"href","/docs/transformers/pr_16995/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(ZQ,"href","/docs/transformers/pr_16995/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(eW,"href","/docs/transformers/pr_16995/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(oW,"href","/docs/transformers/pr_16995/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(rW,"href","/docs/transformers/pr_16995/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(tW,"href","/docs/transformers/pr_16995/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(aW,"href","/docs/transformers/pr_16995/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(nW,"href","/docs/transformers/pr_16995/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(sW,"href","/docs/transformers/pr_16995/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(lW,"href","/docs/transformers/pr_16995/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(iW,"href","/docs/transformers/pr_16995/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(dW,"href","/docs/transformers/pr_16995/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(cW,"href","/docs/transformers/pr_16995/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(fW,"href","/docs/transformers/pr_16995/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(mW,"href","/docs/transformers/pr_16995/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(gW,"href","/docs/transformers/pr_16995/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(hW,"href","/docs/transformers/pr_16995/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pM,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(pM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(pM,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(oc,"class","relative group"),c(pW,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(uW,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(_W,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bW,"href","/docs/transformers/pr_16995/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vM,"id","transformers.TFAutoModelForTokenClassification"),c(vM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(vM,"href","#transformers.TFAutoModelForTokenClassification"),c(ac,"class","relative group"),c(vW,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(FW,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(TW,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MW,"href","/docs/transformers/pr_16995/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(EW,"href","/docs/transformers/pr_16995/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(CW,"href","/docs/transformers/pr_16995/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(wW,"href","/docs/transformers/pr_16995/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(AW,"href","/docs/transformers/pr_16995/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(yW,"href","/docs/transformers/pr_16995/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(LW,"href","/docs/transformers/pr_16995/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(xW,"href","/docs/transformers/pr_16995/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c($W,"href","/docs/transformers/pr_16995/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(kW,"href","/docs/transformers/pr_16995/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(SW,"href","/docs/transformers/pr_16995/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(RW,"href","/docs/transformers/pr_16995/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(BW,"href","/docs/transformers/pr_16995/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(PW,"href","/docs/transformers/pr_16995/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(IW,"href","/docs/transformers/pr_16995/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(qW,"href","/docs/transformers/pr_16995/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(NW,"href","/docs/transformers/pr_16995/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(jW,"href","/docs/transformers/pr_16995/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(DW,"href","/docs/transformers/pr_16995/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(GW,"href","/docs/transformers/pr_16995/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OM,"id","transformers.TFAutoModelForQuestionAnswering"),c(OM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(OM,"href","#transformers.TFAutoModelForQuestionAnswering"),c(lc,"class","relative group"),c(OW,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(VW,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(XW,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zW,"href","/docs/transformers/pr_16995/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(QW,"href","/docs/transformers/pr_16995/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(WW,"href","/docs/transformers/pr_16995/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(HW,"href","/docs/transformers/pr_16995/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(UW,"href","/docs/transformers/pr_16995/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(JW,"href","/docs/transformers/pr_16995/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(YW,"href","/docs/transformers/pr_16995/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(KW,"href","/docs/transformers/pr_16995/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(ZW,"href","/docs/transformers/pr_16995/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(eH,"href","/docs/transformers/pr_16995/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(oH,"href","/docs/transformers/pr_16995/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),c(rH,"href","/docs/transformers/pr_16995/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(tH,"href","/docs/transformers/pr_16995/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(aH,"href","/docs/transformers/pr_16995/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(nH,"href","/docs/transformers/pr_16995/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(sH,"href","/docs/transformers/pr_16995/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(lH,"href","/docs/transformers/pr_16995/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(iH,"href","/docs/transformers/pr_16995/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(dH,"href","/docs/transformers/pr_16995/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(cH,"href","/docs/transformers/pr_16995/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(f4,"id","transformers.TFAutoModelForVision2Seq"),c(f4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(f4,"href","#transformers.TFAutoModelForVision2Seq"),c(cc,"class","relative group"),c(fH,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mH,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(gH,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hH,"href","/docs/transformers/pr_16995/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(p4,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(p4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(p4,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(gc,"class","relative group"),c(pH,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(uH,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(_H,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bH,"href","/docs/transformers/pr_16995/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(v4,"id","transformers.FlaxAutoModel"),c(v4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(v4,"href","#transformers.FlaxAutoModel"),c(uc,"class","relative group"),c(vH,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(FH,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(TH,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MH,"href","/docs/transformers/pr_16995/en/model_doc/albert#transformers.FlaxAlbertModel"),c(EH,"href","/docs/transformers/pr_16995/en/model_doc/bart#transformers.FlaxBartModel"),c(CH,"href","/docs/transformers/pr_16995/en/model_doc/beit#transformers.FlaxBeitModel"),c(wH,"href","/docs/transformers/pr_16995/en/model_doc/bert#transformers.FlaxBertModel"),c(AH,"href","/docs/transformers/pr_16995/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(yH,"href","/docs/transformers/pr_16995/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(LH,"href","/docs/transformers/pr_16995/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(xH,"href","/docs/transformers/pr_16995/en/model_doc/clip#transformers.FlaxCLIPModel"),c($H,"href","/docs/transformers/pr_16995/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(kH,"href","/docs/transformers/pr_16995/en/model_doc/electra#transformers.FlaxElectraModel"),c(SH,"href","/docs/transformers/pr_16995/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(RH,"href","/docs/transformers/pr_16995/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(BH,"href","/docs/transformers/pr_16995/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(PH,"href","/docs/transformers/pr_16995/en/model_doc/marian#transformers.FlaxMarianModel"),c(IH,"href","/docs/transformers/pr_16995/en/model_doc/mbart#transformers.FlaxMBartModel"),c(qH,"href","/docs/transformers/pr_16995/en/model_doc/mt5#transformers.FlaxMT5Model"),c(NH,"href","/docs/transformers/pr_16995/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(jH,"href","/docs/transformers/pr_16995/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(DH,"href","/docs/transformers/pr_16995/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(GH,"href","/docs/transformers/pr_16995/en/model_doc/t5#transformers.FlaxT5Model"),c(OH,"href","/docs/transformers/pr_16995/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(VH,"href","/docs/transformers/pr_16995/en/model_doc/vit#transformers.FlaxViTModel"),c(XH,"href","/docs/transformers/pr_16995/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(zH,"href","/docs/transformers/pr_16995/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(QH,"href","/docs/transformers/pr_16995/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(W4,"id","transformers.FlaxAutoModelForCausalLM"),c(W4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(W4,"href","#transformers.FlaxAutoModelForCausalLM"),c(vc,"class","relative group"),c(WH,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(HH,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(UH,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JH,"href","/docs/transformers/pr_16995/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c(YH,"href","/docs/transformers/pr_16995/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(KH,"href","/docs/transformers/pr_16995/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(ZH,"href","/docs/transformers/pr_16995/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(eU,"href","/docs/transformers/pr_16995/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tE,"id","transformers.FlaxAutoModelForPreTraining"),c(tE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(tE,"href","#transformers.FlaxAutoModelForPreTraining"),c(Mc,"class","relative group"),c(oU,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rU,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(tU,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aU,"href","/docs/transformers/pr_16995/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(nU,"href","/docs/transformers/pr_16995/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(sU,"href","/docs/transformers/pr_16995/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(lU,"href","/docs/transformers/pr_16995/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(iU,"href","/docs/transformers/pr_16995/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(dU,"href","/docs/transformers/pr_16995/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(cU,"href","/docs/transformers/pr_16995/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(fU,"href","/docs/transformers/pr_16995/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(mU,"href","/docs/transformers/pr_16995/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(gU,"href","/docs/transformers/pr_16995/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(hU,"href","/docs/transformers/pr_16995/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(pU,"href","/docs/transformers/pr_16995/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bE,"id","transformers.FlaxAutoModelForMaskedLM"),c(bE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(bE,"href","#transformers.FlaxAutoModelForMaskedLM"),c(wc,"class","relative group"),c(uU,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_U,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(bU,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vU,"href","/docs/transformers/pr_16995/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(FU,"href","/docs/transformers/pr_16995/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(TU,"href","/docs/transformers/pr_16995/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(MU,"href","/docs/transformers/pr_16995/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(EU,"href","/docs/transformers/pr_16995/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(CU,"href","/docs/transformers/pr_16995/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(wU,"href","/docs/transformers/pr_16995/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(AU,"href","/docs/transformers/pr_16995/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(yU,"href","/docs/transformers/pr_16995/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(LU,"href","/docs/transformers/pr_16995/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kE,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(kE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(kE,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(Lc,"class","relative group"),c(xU,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($U,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(kU,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(SU,"href","/docs/transformers/pr_16995/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(RU,"href","/docs/transformers/pr_16995/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(BU,"href","/docs/transformers/pr_16995/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(PU,"href","/docs/transformers/pr_16995/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(IU,"href","/docs/transformers/pr_16995/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(qU,"href","/docs/transformers/pr_16995/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(NU,"href","/docs/transformers/pr_16995/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(jU,"href","/docs/transformers/pr_16995/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(DU,"href","/docs/transformers/pr_16995/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VE,"id","transformers.FlaxAutoModelForSequenceClassification"),c(VE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(VE,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(kc,"class","relative group"),c(GU,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(OU,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(VU,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XU,"href","/docs/transformers/pr_16995/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(zU,"href","/docs/transformers/pr_16995/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(QU,"href","/docs/transformers/pr_16995/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(WU,"href","/docs/transformers/pr_16995/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(HU,"href","/docs/transformers/pr_16995/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(UU,"href","/docs/transformers/pr_16995/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(JU,"href","/docs/transformers/pr_16995/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(YU,"href","/docs/transformers/pr_16995/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(KU,"href","/docs/transformers/pr_16995/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(ZU,"href","/docs/transformers/pr_16995/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rC,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(rC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(rC,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(Bc,"class","relative group"),c(eJ,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oJ,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(rJ,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tJ,"href","/docs/transformers/pr_16995/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(aJ,"href","/docs/transformers/pr_16995/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(nJ,"href","/docs/transformers/pr_16995/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(sJ,"href","/docs/transformers/pr_16995/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(lJ,"href","/docs/transformers/pr_16995/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(iJ,"href","/docs/transformers/pr_16995/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(dJ,"href","/docs/transformers/pr_16995/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(cJ,"href","/docs/transformers/pr_16995/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(fJ,"href","/docs/transformers/pr_16995/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(mJ,"href","/docs/transformers/pr_16995/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pC,"id","transformers.FlaxAutoModelForTokenClassification"),c(pC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(pC,"href","#transformers.FlaxAutoModelForTokenClassification"),c(qc,"class","relative group"),c(gJ,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(hJ,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(pJ,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uJ,"href","/docs/transformers/pr_16995/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(_J,"href","/docs/transformers/pr_16995/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(bJ,"href","/docs/transformers/pr_16995/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(vJ,"href","/docs/transformers/pr_16995/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(FJ,"href","/docs/transformers/pr_16995/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(TJ,"href","/docs/transformers/pr_16995/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(MJ,"href","/docs/transformers/pr_16995/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(EJ,"href","/docs/transformers/pr_16995/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(AC,"id","transformers.FlaxAutoModelForMultipleChoice"),c(AC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(AC,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(Dc,"class","relative group"),c(CJ,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wJ,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(AJ,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yJ,"href","/docs/transformers/pr_16995/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(LJ,"href","/docs/transformers/pr_16995/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(xJ,"href","/docs/transformers/pr_16995/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c($J,"href","/docs/transformers/pr_16995/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(kJ,"href","/docs/transformers/pr_16995/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(SJ,"href","/docs/transformers/pr_16995/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(RJ,"href","/docs/transformers/pr_16995/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(BJ,"href","/docs/transformers/pr_16995/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qC,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(qC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(qC,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(Vc,"class","relative group"),c(PJ,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(IJ,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qJ,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(NJ,"href","/docs/transformers/pr_16995/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GC,"id","transformers.FlaxAutoModelForImageClassification"),c(GC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(GC,"href","#transformers.FlaxAutoModelForImageClassification"),c(Qc,"class","relative group"),c(jJ,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(DJ,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(GJ,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OJ,"href","/docs/transformers/pr_16995/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(VJ,"href","/docs/transformers/pr_16995/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QC,"id","transformers.FlaxAutoModelForVision2Seq"),c(QC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(QC,"href","#transformers.FlaxAutoModelForVision2Seq"),c(Uc,"class","relative group"),c(XJ,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zJ,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(QJ,"href","/docs/transformers/pr_16995/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WJ,"href","/docs/transformers/pr_16995/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(f,_){e(document.head,g),b(f,v,_),b(f,p,_),e(p,m),e(m,u),M(d,u,null),e(p,h),e(p,To),e(To,oi),b(f,of,_),b(f,Kr,_),e(Kr,ri),e(Kr,ti),e(ti,fA),e(Kr,rf),b(f,Ie,_),b(f,Ve,_),e(Ve,ai),e(Ve,Mn),e(Mn,mA),e(Ve,En),e(Ve,Cn),e(Cn,gA),e(Ve,ni),e(Ve,wn),e(wn,hA),e(Ve,si),b(f,tf,_),M(va,f,_),b(f,Xe,_),b(f,Ae,_),e(Ae,Ax),e(Ae,li),e(li,yx),e(Ae,Lx),b(f,Mo,_),b(f,Fa,_),e(Fa,xx),e(Fa,af),e(af,$x),e(Fa,Gqe),b(f,PRe,_),b(f,ii,_),e(ii,nf),e(nf,NK),M(pA,NK,null),e(ii,Oqe),e(ii,jK),e(jK,Vqe),b(f,IRe,_),b(f,An,_),e(An,Xqe),e(An,DK),e(DK,zqe),e(An,Qqe),e(An,GK),e(GK,Wqe),e(An,Hqe),b(f,qRe,_),M(uA,f,_),b(f,NRe,_),b(f,kx,_),e(kx,Uqe),b(f,jRe,_),M(sf,f,_),b(f,DRe,_),b(f,di,_),e(di,lf),e(lf,OK),M(_A,OK,null),e(di,Jqe),e(di,VK),e(VK,Yqe),b(f,GRe,_),b(f,Eo,_),M(bA,Eo,null),e(Eo,Kqe),e(Eo,vA),e(vA,Zqe),e(vA,Sx),e(Sx,eNe),e(vA,oNe),e(Eo,rNe),e(Eo,FA),e(FA,tNe),e(FA,XK),e(XK,aNe),e(FA,nNe),e(Eo,sNe),e(Eo,Tr),M(TA,Tr,null),e(Tr,lNe),e(Tr,zK),e(zK,iNe),e(Tr,dNe),e(Tr,ci),e(ci,cNe),e(ci,QK),e(QK,fNe),e(ci,mNe),e(ci,WK),e(WK,gNe),e(ci,hNe),e(Tr,pNe),e(Tr,y),e(y,df),e(df,HK),e(HK,uNe),e(df,_Ne),e(df,Rx),e(Rx,bNe),e(df,vNe),e(y,FNe),e(y,cf),e(cf,UK),e(UK,TNe),e(cf,MNe),e(cf,Bx),e(Bx,ENe),e(cf,CNe),e(y,wNe),e(y,ff),e(ff,JK),e(JK,ANe),e(ff,yNe),e(ff,Px),e(Px,LNe),e(ff,xNe),e(y,$Ne),e(y,mf),e(mf,YK),e(YK,kNe),e(mf,SNe),e(mf,Ix),e(Ix,RNe),e(mf,BNe),e(y,PNe),e(y,gf),e(gf,KK),e(KK,INe),e(gf,qNe),e(gf,qx),e(qx,NNe),e(gf,jNe),e(y,DNe),e(y,hf),e(hf,ZK),e(ZK,GNe),e(hf,ONe),e(hf,Nx),e(Nx,VNe),e(hf,XNe),e(y,zNe),e(y,pf),e(pf,eZ),e(eZ,QNe),e(pf,WNe),e(pf,jx),e(jx,HNe),e(pf,UNe),e(y,JNe),e(y,uf),e(uf,oZ),e(oZ,YNe),e(uf,KNe),e(uf,Dx),e(Dx,ZNe),e(uf,eje),e(y,oje),e(y,_f),e(_f,rZ),e(rZ,rje),e(_f,tje),e(_f,Gx),e(Gx,aje),e(_f,nje),e(y,sje),e(y,bf),e(bf,tZ),e(tZ,lje),e(bf,ije),e(bf,Ox),e(Ox,dje),e(bf,cje),e(y,fje),e(y,vf),e(vf,aZ),e(aZ,mje),e(vf,gje),e(vf,Vx),e(Vx,hje),e(vf,pje),e(y,uje),e(y,Ff),e(Ff,nZ),e(nZ,_je),e(Ff,bje),e(Ff,Xx),e(Xx,vje),e(Ff,Fje),e(y,Tje),e(y,Tf),e(Tf,sZ),e(sZ,Mje),e(Tf,Eje),e(Tf,zx),e(zx,Cje),e(Tf,wje),e(y,Aje),e(y,Mf),e(Mf,lZ),e(lZ,yje),e(Mf,Lje),e(Mf,Qx),e(Qx,xje),e(Mf,$je),e(y,kje),e(y,Ef),e(Ef,iZ),e(iZ,Sje),e(Ef,Rje),e(Ef,Wx),e(Wx,Bje),e(Ef,Pje),e(y,Ije),e(y,Cf),e(Cf,dZ),e(dZ,qje),e(Cf,Nje),e(Cf,Hx),e(Hx,jje),e(Cf,Dje),e(y,Gje),e(y,wf),e(wf,cZ),e(cZ,Oje),e(wf,Vje),e(wf,Ux),e(Ux,Xje),e(wf,zje),e(y,Qje),e(y,Af),e(Af,fZ),e(fZ,Wje),e(Af,Hje),e(Af,Jx),e(Jx,Uje),e(Af,Jje),e(y,Yje),e(y,yf),e(yf,mZ),e(mZ,Kje),e(yf,Zje),e(yf,Yx),e(Yx,eDe),e(yf,oDe),e(y,rDe),e(y,Lf),e(Lf,gZ),e(gZ,tDe),e(Lf,aDe),e(Lf,Kx),e(Kx,nDe),e(Lf,sDe),e(y,lDe),e(y,xf),e(xf,hZ),e(hZ,iDe),e(xf,dDe),e(xf,Zx),e(Zx,cDe),e(xf,fDe),e(y,mDe),e(y,$f),e($f,pZ),e(pZ,gDe),e($f,hDe),e($f,e$),e(e$,pDe),e($f,uDe),e(y,_De),e(y,kf),e(kf,uZ),e(uZ,bDe),e(kf,vDe),e(kf,o$),e(o$,FDe),e(kf,TDe),e(y,MDe),e(y,Sf),e(Sf,_Z),e(_Z,EDe),e(Sf,CDe),e(Sf,r$),e(r$,wDe),e(Sf,ADe),e(y,yDe),e(y,Rf),e(Rf,bZ),e(bZ,LDe),e(Rf,xDe),e(Rf,t$),e(t$,$De),e(Rf,kDe),e(y,SDe),e(y,Bf),e(Bf,vZ),e(vZ,RDe),e(Bf,BDe),e(Bf,a$),e(a$,PDe),e(Bf,IDe),e(y,qDe),e(y,Pf),e(Pf,FZ),e(FZ,NDe),e(Pf,jDe),e(Pf,n$),e(n$,DDe),e(Pf,GDe),e(y,ODe),e(y,If),e(If,TZ),e(TZ,VDe),e(If,XDe),e(If,s$),e(s$,zDe),e(If,QDe),e(y,WDe),e(y,qf),e(qf,MZ),e(MZ,HDe),e(qf,UDe),e(qf,l$),e(l$,JDe),e(qf,YDe),e(y,KDe),e(y,Nf),e(Nf,EZ),e(EZ,ZDe),e(Nf,eGe),e(Nf,i$),e(i$,oGe),e(Nf,rGe),e(y,tGe),e(y,jf),e(jf,CZ),e(CZ,aGe),e(jf,nGe),e(jf,d$),e(d$,sGe),e(jf,lGe),e(y,iGe),e(y,Df),e(Df,wZ),e(wZ,dGe),e(Df,cGe),e(Df,c$),e(c$,fGe),e(Df,mGe),e(y,gGe),e(y,Gf),e(Gf,AZ),e(AZ,hGe),e(Gf,pGe),e(Gf,f$),e(f$,uGe),e(Gf,_Ge),e(y,bGe),e(y,Of),e(Of,yZ),e(yZ,vGe),e(Of,FGe),e(Of,m$),e(m$,TGe),e(Of,MGe),e(y,EGe),e(y,Vf),e(Vf,LZ),e(LZ,CGe),e(Vf,wGe),e(Vf,g$),e(g$,AGe),e(Vf,yGe),e(y,LGe),e(y,Xf),e(Xf,xZ),e(xZ,xGe),e(Xf,$Ge),e(Xf,h$),e(h$,kGe),e(Xf,SGe),e(y,RGe),e(y,zf),e(zf,$Z),e($Z,BGe),e(zf,PGe),e(zf,p$),e(p$,IGe),e(zf,qGe),e(y,NGe),e(y,Qf),e(Qf,kZ),e(kZ,jGe),e(Qf,DGe),e(Qf,u$),e(u$,GGe),e(Qf,OGe),e(y,VGe),e(y,Wf),e(Wf,SZ),e(SZ,XGe),e(Wf,zGe),e(Wf,_$),e(_$,QGe),e(Wf,WGe),e(y,HGe),e(y,Hf),e(Hf,RZ),e(RZ,UGe),e(Hf,JGe),e(Hf,b$),e(b$,YGe),e(Hf,KGe),e(y,ZGe),e(y,Uf),e(Uf,BZ),e(BZ,eOe),e(Uf,oOe),e(Uf,v$),e(v$,rOe),e(Uf,tOe),e(y,aOe),e(y,Jf),e(Jf,PZ),e(PZ,nOe),e(Jf,sOe),e(Jf,F$),e(F$,lOe),e(Jf,iOe),e(y,dOe),e(y,Yf),e(Yf,IZ),e(IZ,cOe),e(Yf,fOe),e(Yf,T$),e(T$,mOe),e(Yf,gOe),e(y,hOe),e(y,Kf),e(Kf,qZ),e(qZ,pOe),e(Kf,uOe),e(Kf,M$),e(M$,_Oe),e(Kf,bOe),e(y,vOe),e(y,Zf),e(Zf,NZ),e(NZ,FOe),e(Zf,TOe),e(Zf,E$),e(E$,MOe),e(Zf,EOe),e(y,COe),e(y,em),e(em,jZ),e(jZ,wOe),e(em,AOe),e(em,C$),e(C$,yOe),e(em,LOe),e(y,xOe),e(y,om),e(om,DZ),e(DZ,$Oe),e(om,kOe),e(om,w$),e(w$,SOe),e(om,ROe),e(y,BOe),e(y,rm),e(rm,GZ),e(GZ,POe),e(rm,IOe),e(rm,A$),e(A$,qOe),e(rm,NOe),e(y,jOe),e(y,tm),e(tm,OZ),e(OZ,DOe),e(tm,GOe),e(tm,y$),e(y$,OOe),e(tm,VOe),e(y,XOe),e(y,am),e(am,VZ),e(VZ,zOe),e(am,QOe),e(am,L$),e(L$,WOe),e(am,HOe),e(y,UOe),e(y,nm),e(nm,XZ),e(XZ,JOe),e(nm,YOe),e(nm,x$),e(x$,KOe),e(nm,ZOe),e(y,eVe),e(y,sm),e(sm,zZ),e(zZ,oVe),e(sm,rVe),e(sm,$$),e($$,tVe),e(sm,aVe),e(y,nVe),e(y,lm),e(lm,QZ),e(QZ,sVe),e(lm,lVe),e(lm,k$),e(k$,iVe),e(lm,dVe),e(y,cVe),e(y,im),e(im,WZ),e(WZ,fVe),e(im,mVe),e(im,S$),e(S$,gVe),e(im,hVe),e(y,pVe),e(y,dm),e(dm,HZ),e(HZ,uVe),e(dm,_Ve),e(dm,R$),e(R$,bVe),e(dm,vVe),e(y,FVe),e(y,cm),e(cm,UZ),e(UZ,TVe),e(cm,MVe),e(cm,B$),e(B$,EVe),e(cm,CVe),e(y,wVe),e(y,fm),e(fm,JZ),e(JZ,AVe),e(fm,yVe),e(fm,P$),e(P$,LVe),e(fm,xVe),e(y,$Ve),e(y,mm),e(mm,YZ),e(YZ,kVe),e(mm,SVe),e(mm,I$),e(I$,RVe),e(mm,BVe),e(y,PVe),e(y,gm),e(gm,KZ),e(KZ,IVe),e(gm,qVe),e(gm,q$),e(q$,NVe),e(gm,jVe),e(y,DVe),e(y,hm),e(hm,ZZ),e(ZZ,GVe),e(hm,OVe),e(hm,N$),e(N$,VVe),e(hm,XVe),e(y,zVe),e(y,pm),e(pm,eee),e(eee,QVe),e(pm,WVe),e(pm,j$),e(j$,HVe),e(pm,UVe),e(y,JVe),e(y,um),e(um,oee),e(oee,YVe),e(um,KVe),e(um,D$),e(D$,ZVe),e(um,eXe),e(y,oXe),e(y,_m),e(_m,ree),e(ree,rXe),e(_m,tXe),e(_m,G$),e(G$,aXe),e(_m,nXe),e(y,sXe),e(y,bm),e(bm,tee),e(tee,lXe),e(bm,iXe),e(bm,O$),e(O$,dXe),e(bm,cXe),e(y,fXe),e(y,vm),e(vm,aee),e(aee,mXe),e(vm,gXe),e(vm,V$),e(V$,hXe),e(vm,pXe),e(y,uXe),e(y,Fm),e(Fm,nee),e(nee,_Xe),e(Fm,bXe),e(Fm,X$),e(X$,vXe),e(Fm,FXe),e(y,TXe),e(y,Tm),e(Tm,see),e(see,MXe),e(Tm,EXe),e(Tm,z$),e(z$,CXe),e(Tm,wXe),e(y,AXe),e(y,Mm),e(Mm,lee),e(lee,yXe),e(Mm,LXe),e(Mm,Q$),e(Q$,xXe),e(Mm,$Xe),e(y,kXe),e(y,Em),e(Em,iee),e(iee,SXe),e(Em,RXe),e(Em,W$),e(W$,BXe),e(Em,PXe),e(y,IXe),e(y,Cm),e(Cm,dee),e(dee,qXe),e(Cm,NXe),e(Cm,H$),e(H$,jXe),e(Cm,DXe),e(y,GXe),e(y,wm),e(wm,cee),e(cee,OXe),e(wm,VXe),e(wm,U$),e(U$,XXe),e(wm,zXe),e(y,QXe),e(y,Am),e(Am,fee),e(fee,WXe),e(Am,HXe),e(Am,J$),e(J$,UXe),e(Am,JXe),e(y,YXe),e(y,ym),e(ym,mee),e(mee,KXe),e(ym,ZXe),e(ym,Y$),e(Y$,eze),e(ym,oze),e(y,rze),e(y,Lm),e(Lm,gee),e(gee,tze),e(Lm,aze),e(Lm,K$),e(K$,nze),e(Lm,sze),e(y,lze),e(y,xm),e(xm,hee),e(hee,ize),e(xm,dze),e(xm,Z$),e(Z$,cze),e(xm,fze),e(y,mze),e(y,$m),e($m,pee),e(pee,gze),e($m,hze),e($m,ek),e(ek,pze),e($m,uze),e(y,_ze),e(y,km),e(km,uee),e(uee,bze),e(km,vze),e(km,ok),e(ok,Fze),e(km,Tze),e(y,Mze),e(y,Sm),e(Sm,_ee),e(_ee,Eze),e(Sm,Cze),e(Sm,rk),e(rk,wze),e(Sm,Aze),e(y,yze),e(y,Rm),e(Rm,bee),e(bee,Lze),e(Rm,xze),e(Rm,tk),e(tk,$ze),e(Rm,kze),e(y,Sze),e(y,Bm),e(Bm,vee),e(vee,Rze),e(Bm,Bze),e(Bm,ak),e(ak,Pze),e(Bm,Ize),e(y,qze),e(y,Pm),e(Pm,Fee),e(Fee,Nze),e(Pm,jze),e(Pm,nk),e(nk,Dze),e(Pm,Gze),e(y,Oze),e(y,Im),e(Im,Tee),e(Tee,Vze),e(Im,Xze),e(Im,sk),e(sk,zze),e(Im,Qze),e(y,Wze),e(y,qm),e(qm,Mee),e(Mee,Hze),e(qm,Uze),e(qm,lk),e(lk,Jze),e(qm,Yze),e(y,Kze),e(y,Nm),e(Nm,Eee),e(Eee,Zze),e(Nm,eQe),e(Nm,ik),e(ik,oQe),e(Nm,rQe),e(y,tQe),e(y,jm),e(jm,Cee),e(Cee,aQe),e(jm,nQe),e(jm,dk),e(dk,sQe),e(jm,lQe),e(y,iQe),e(y,Dm),e(Dm,wee),e(wee,dQe),e(Dm,cQe),e(Dm,ck),e(ck,fQe),e(Dm,mQe),e(y,gQe),e(y,Gm),e(Gm,Aee),e(Aee,hQe),e(Gm,pQe),e(Gm,fk),e(fk,uQe),e(Gm,_Qe),e(y,bQe),e(y,Om),e(Om,yee),e(yee,vQe),e(Om,FQe),e(Om,mk),e(mk,TQe),e(Om,MQe),e(y,EQe),e(y,Vm),e(Vm,Lee),e(Lee,CQe),e(Vm,wQe),e(Vm,gk),e(gk,AQe),e(Vm,yQe),e(y,LQe),e(y,Xm),e(Xm,xee),e(xee,xQe),e(Xm,$Qe),e(Xm,hk),e(hk,kQe),e(Xm,SQe),e(y,RQe),e(y,zm),e(zm,$ee),e($ee,BQe),e(zm,PQe),e(zm,pk),e(pk,IQe),e(zm,qQe),e(y,NQe),e(y,Qm),e(Qm,kee),e(kee,jQe),e(Qm,DQe),e(Qm,uk),e(uk,GQe),e(Qm,OQe),e(y,VQe),e(y,Wm),e(Wm,See),e(See,XQe),e(Wm,zQe),e(Wm,_k),e(_k,QQe),e(Wm,WQe),e(y,HQe),e(y,Hm),e(Hm,Ree),e(Ree,UQe),e(Hm,JQe),e(Hm,bk),e(bk,YQe),e(Hm,KQe),e(y,ZQe),e(y,Um),e(Um,Bee),e(Bee,eWe),e(Um,oWe),e(Um,vk),e(vk,rWe),e(Um,tWe),e(y,aWe),e(y,Jm),e(Jm,Pee),e(Pee,nWe),e(Jm,sWe),e(Jm,Fk),e(Fk,lWe),e(Jm,iWe),e(y,dWe),e(y,Ym),e(Ym,Iee),e(Iee,cWe),e(Ym,fWe),e(Ym,Tk),e(Tk,mWe),e(Ym,gWe),e(y,hWe),e(y,Km),e(Km,qee),e(qee,pWe),e(Km,uWe),e(Km,Mk),e(Mk,_We),e(Km,bWe),e(y,vWe),e(y,Zm),e(Zm,Nee),e(Nee,FWe),e(Zm,TWe),e(Zm,Ek),e(Ek,MWe),e(Zm,EWe),e(y,CWe),e(y,eg),e(eg,jee),e(jee,wWe),e(eg,AWe),e(eg,Ck),e(Ck,yWe),e(eg,LWe),e(y,xWe),e(y,og),e(og,Dee),e(Dee,$We),e(og,kWe),e(og,wk),e(wk,SWe),e(og,RWe),e(y,BWe),e(y,rg),e(rg,Gee),e(Gee,PWe),e(rg,IWe),e(rg,Ak),e(Ak,qWe),e(rg,NWe),e(Tr,jWe),M(tg,Tr,null),e(Eo,DWe),e(Eo,ag),M(MA,ag,null),e(ag,GWe),e(ag,Oee),e(Oee,OWe),b(f,ORe,_),b(f,fi,_),e(fi,ng),e(ng,Vee),M(EA,Vee,null),e(fi,VWe),e(fi,Xee),e(Xee,XWe),b(f,VRe,_),b(f,Co,_),M(CA,Co,null),e(Co,zWe),e(Co,wA),e(wA,QWe),e(wA,yk),e(yk,WWe),e(wA,HWe),e(Co,UWe),e(Co,AA),e(AA,JWe),e(AA,zee),e(zee,YWe),e(AA,KWe),e(Co,ZWe),e(Co,Mr),M(yA,Mr,null),e(Mr,eHe),e(Mr,Qee),e(Qee,oHe),e(Mr,rHe),e(Mr,Ta),e(Ta,tHe),e(Ta,Wee),e(Wee,aHe),e(Ta,nHe),e(Ta,Hee),e(Hee,sHe),e(Ta,lHe),e(Ta,Uee),e(Uee,iHe),e(Ta,dHe),e(Mr,cHe),e(Mr,k),e(k,yn),e(yn,Jee),e(Jee,fHe),e(yn,mHe),e(yn,Lk),e(Lk,gHe),e(yn,hHe),e(yn,xk),e(xk,pHe),e(yn,uHe),e(k,_He),e(k,Ln),e(Ln,Yee),e(Yee,bHe),e(Ln,vHe),e(Ln,$k),e($k,FHe),e(Ln,THe),e(Ln,kk),e(kk,MHe),e(Ln,EHe),e(k,CHe),e(k,xn),e(xn,Kee),e(Kee,wHe),e(xn,AHe),e(xn,Sk),e(Sk,yHe),e(xn,LHe),e(xn,Rk),e(Rk,xHe),e(xn,$He),e(k,kHe),e(k,sg),e(sg,Zee),e(Zee,SHe),e(sg,RHe),e(sg,Bk),e(Bk,BHe),e(sg,PHe),e(k,IHe),e(k,$n),e($n,eoe),e(eoe,qHe),e($n,NHe),e($n,Pk),e(Pk,jHe),e($n,DHe),e($n,Ik),e(Ik,GHe),e($n,OHe),e(k,VHe),e(k,lg),e(lg,ooe),e(ooe,XHe),e(lg,zHe),e(lg,qk),e(qk,QHe),e(lg,WHe),e(k,HHe),e(k,ig),e(ig,roe),e(roe,UHe),e(ig,JHe),e(ig,Nk),e(Nk,YHe),e(ig,KHe),e(k,ZHe),e(k,dg),e(dg,toe),e(toe,eUe),e(dg,oUe),e(dg,jk),e(jk,rUe),e(dg,tUe),e(k,aUe),e(k,kn),e(kn,aoe),e(aoe,nUe),e(kn,sUe),e(kn,Dk),e(Dk,lUe),e(kn,iUe),e(kn,Gk),e(Gk,dUe),e(kn,cUe),e(k,fUe),e(k,Sn),e(Sn,noe),e(noe,mUe),e(Sn,gUe),e(Sn,Ok),e(Ok,hUe),e(Sn,pUe),e(Sn,Vk),e(Vk,uUe),e(Sn,_Ue),e(k,bUe),e(k,Rn),e(Rn,soe),e(soe,vUe),e(Rn,FUe),e(Rn,Xk),e(Xk,TUe),e(Rn,MUe),e(Rn,zk),e(zk,EUe),e(Rn,CUe),e(k,wUe),e(k,cg),e(cg,loe),e(loe,AUe),e(cg,yUe),e(cg,Qk),e(Qk,LUe),e(cg,xUe),e(k,$Ue),e(k,fg),e(fg,ioe),e(ioe,kUe),e(fg,SUe),e(fg,Wk),e(Wk,RUe),e(fg,BUe),e(k,PUe),e(k,Bn),e(Bn,doe),e(doe,IUe),e(Bn,qUe),e(Bn,Hk),e(Hk,NUe),e(Bn,jUe),e(Bn,Uk),e(Uk,DUe),e(Bn,GUe),e(k,OUe),e(k,mg),e(mg,coe),e(coe,VUe),e(mg,XUe),e(mg,Jk),e(Jk,zUe),e(mg,QUe),e(k,WUe),e(k,Pn),e(Pn,foe),e(foe,HUe),e(Pn,UUe),e(Pn,Yk),e(Yk,JUe),e(Pn,YUe),e(Pn,Kk),e(Kk,KUe),e(Pn,ZUe),e(k,eJe),e(k,In),e(In,moe),e(moe,oJe),e(In,rJe),e(In,Zk),e(Zk,tJe),e(In,aJe),e(In,eS),e(eS,nJe),e(In,sJe),e(k,lJe),e(k,qn),e(qn,goe),e(goe,iJe),e(qn,dJe),e(qn,oS),e(oS,cJe),e(qn,fJe),e(qn,hoe),e(hoe,mJe),e(qn,gJe),e(k,hJe),e(k,gg),e(gg,poe),e(poe,pJe),e(gg,uJe),e(gg,rS),e(rS,_Je),e(gg,bJe),e(k,vJe),e(k,Nn),e(Nn,uoe),e(uoe,FJe),e(Nn,TJe),e(Nn,tS),e(tS,MJe),e(Nn,EJe),e(Nn,aS),e(aS,CJe),e(Nn,wJe),e(k,AJe),e(k,jn),e(jn,_oe),e(_oe,yJe),e(jn,LJe),e(jn,nS),e(nS,xJe),e(jn,$Je),e(jn,sS),e(sS,kJe),e(jn,SJe),e(k,RJe),e(k,Dn),e(Dn,boe),e(boe,BJe),e(Dn,PJe),e(Dn,lS),e(lS,IJe),e(Dn,qJe),e(Dn,iS),e(iS,NJe),e(Dn,jJe),e(k,DJe),e(k,Gn),e(Gn,voe),e(voe,GJe),e(Gn,OJe),e(Gn,dS),e(dS,VJe),e(Gn,XJe),e(Gn,cS),e(cS,zJe),e(Gn,QJe),e(k,WJe),e(k,On),e(On,Foe),e(Foe,HJe),e(On,UJe),e(On,fS),e(fS,JJe),e(On,YJe),e(On,mS),e(mS,KJe),e(On,ZJe),e(k,eYe),e(k,Vn),e(Vn,Toe),e(Toe,oYe),e(Vn,rYe),e(Vn,gS),e(gS,tYe),e(Vn,aYe),e(Vn,hS),e(hS,nYe),e(Vn,sYe),e(k,lYe),e(k,hg),e(hg,Moe),e(Moe,iYe),e(hg,dYe),e(hg,pS),e(pS,cYe),e(hg,fYe),e(k,mYe),e(k,Xn),e(Xn,Eoe),e(Eoe,gYe),e(Xn,hYe),e(Xn,uS),e(uS,pYe),e(Xn,uYe),e(Xn,_S),e(_S,_Ye),e(Xn,bYe),e(k,vYe),e(k,pg),e(pg,Coe),e(Coe,FYe),e(pg,TYe),e(pg,bS),e(bS,MYe),e(pg,EYe),e(k,CYe),e(k,zn),e(zn,woe),e(woe,wYe),e(zn,AYe),e(zn,vS),e(vS,yYe),e(zn,LYe),e(zn,FS),e(FS,xYe),e(zn,$Ye),e(k,kYe),e(k,Qn),e(Qn,Aoe),e(Aoe,SYe),e(Qn,RYe),e(Qn,TS),e(TS,BYe),e(Qn,PYe),e(Qn,MS),e(MS,IYe),e(Qn,qYe),e(k,NYe),e(k,Wn),e(Wn,yoe),e(yoe,jYe),e(Wn,DYe),e(Wn,ES),e(ES,GYe),e(Wn,OYe),e(Wn,CS),e(CS,VYe),e(Wn,XYe),e(k,zYe),e(k,Hn),e(Hn,Loe),e(Loe,QYe),e(Hn,WYe),e(Hn,wS),e(wS,HYe),e(Hn,UYe),e(Hn,AS),e(AS,JYe),e(Hn,YYe),e(k,KYe),e(k,Un),e(Un,xoe),e(xoe,ZYe),e(Un,eKe),e(Un,yS),e(yS,oKe),e(Un,rKe),e(Un,LS),e(LS,tKe),e(Un,aKe),e(k,nKe),e(k,ug),e(ug,$oe),e($oe,sKe),e(ug,lKe),e(ug,xS),e(xS,iKe),e(ug,dKe),e(k,cKe),e(k,Jn),e(Jn,koe),e(koe,fKe),e(Jn,mKe),e(Jn,$S),e($S,gKe),e(Jn,hKe),e(Jn,kS),e(kS,pKe),e(Jn,uKe),e(k,_Ke),e(k,Yn),e(Yn,Soe),e(Soe,bKe),e(Yn,vKe),e(Yn,SS),e(SS,FKe),e(Yn,TKe),e(Yn,RS),e(RS,MKe),e(Yn,EKe),e(k,CKe),e(k,Kn),e(Kn,Roe),e(Roe,wKe),e(Kn,AKe),e(Kn,BS),e(BS,yKe),e(Kn,LKe),e(Kn,PS),e(PS,xKe),e(Kn,$Ke),e(k,kKe),e(k,Zn),e(Zn,Boe),e(Boe,SKe),e(Zn,RKe),e(Zn,IS),e(IS,BKe),e(Zn,PKe),e(Zn,qS),e(qS,IKe),e(Zn,qKe),e(k,NKe),e(k,es),e(es,Poe),e(Poe,jKe),e(es,DKe),e(es,NS),e(NS,GKe),e(es,OKe),e(es,jS),e(jS,VKe),e(es,XKe),e(k,zKe),e(k,os),e(os,Ioe),e(Ioe,QKe),e(os,WKe),e(os,DS),e(DS,HKe),e(os,UKe),e(os,GS),e(GS,JKe),e(os,YKe),e(k,KKe),e(k,_g),e(_g,qoe),e(qoe,ZKe),e(_g,eZe),e(_g,OS),e(OS,oZe),e(_g,rZe),e(k,tZe),e(k,rs),e(rs,Noe),e(Noe,aZe),e(rs,nZe),e(rs,VS),e(VS,sZe),e(rs,lZe),e(rs,XS),e(XS,iZe),e(rs,dZe),e(k,cZe),e(k,bg),e(bg,joe),e(joe,fZe),e(bg,mZe),e(bg,zS),e(zS,gZe),e(bg,hZe),e(k,pZe),e(k,vg),e(vg,Doe),e(Doe,uZe),e(vg,_Ze),e(vg,QS),e(QS,bZe),e(vg,vZe),e(k,FZe),e(k,ts),e(ts,Goe),e(Goe,TZe),e(ts,MZe),e(ts,WS),e(WS,EZe),e(ts,CZe),e(ts,HS),e(HS,wZe),e(ts,AZe),e(k,yZe),e(k,as),e(as,Ooe),e(Ooe,LZe),e(as,xZe),e(as,US),e(US,$Ze),e(as,kZe),e(as,JS),e(JS,SZe),e(as,RZe),e(k,BZe),e(k,ns),e(ns,Voe),e(Voe,PZe),e(ns,IZe),e(ns,YS),e(YS,qZe),e(ns,NZe),e(ns,KS),e(KS,jZe),e(ns,DZe),e(k,GZe),e(k,Fg),e(Fg,Xoe),e(Xoe,OZe),e(Fg,VZe),e(Fg,ZS),e(ZS,XZe),e(Fg,zZe),e(k,QZe),e(k,ss),e(ss,zoe),e(zoe,WZe),e(ss,HZe),e(ss,eR),e(eR,UZe),e(ss,JZe),e(ss,oR),e(oR,YZe),e(ss,KZe),e(k,ZZe),e(k,ls),e(ls,Qoe),e(Qoe,eeo),e(ls,oeo),e(ls,rR),e(rR,reo),e(ls,teo),e(ls,tR),e(tR,aeo),e(ls,neo),e(k,seo),e(k,is),e(is,Woe),e(Woe,leo),e(is,ieo),e(is,aR),e(aR,deo),e(is,ceo),e(is,nR),e(nR,feo),e(is,meo),e(k,geo),e(k,ds),e(ds,Hoe),e(Hoe,heo),e(ds,peo),e(ds,sR),e(sR,ueo),e(ds,_eo),e(ds,lR),e(lR,beo),e(ds,veo),e(k,Feo),e(k,cs),e(cs,Uoe),e(Uoe,Teo),e(cs,Meo),e(cs,iR),e(iR,Eeo),e(cs,Ceo),e(cs,dR),e(dR,weo),e(cs,Aeo),e(k,yeo),e(k,fs),e(fs,Joe),e(Joe,Leo),e(fs,xeo),e(fs,cR),e(cR,$eo),e(fs,keo),e(fs,fR),e(fR,Seo),e(fs,Reo),e(k,Beo),e(k,Tg),e(Tg,Yoe),e(Yoe,Peo),e(Tg,Ieo),e(Tg,mR),e(mR,qeo),e(Tg,Neo),e(k,jeo),e(k,Mg),e(Mg,Koe),e(Koe,Deo),e(Mg,Geo),e(Mg,gR),e(gR,Oeo),e(Mg,Veo),e(k,Xeo),e(k,Eg),e(Eg,Zoe),e(Zoe,zeo),e(Eg,Qeo),e(Eg,hR),e(hR,Weo),e(Eg,Heo),e(k,Ueo),e(k,Cg),e(Cg,ere),e(ere,Jeo),e(Cg,Yeo),e(Cg,pR),e(pR,Keo),e(Cg,Zeo),e(k,eoo),e(k,ms),e(ms,ore),e(ore,ooo),e(ms,roo),e(ms,uR),e(uR,too),e(ms,aoo),e(ms,_R),e(_R,noo),e(ms,soo),e(k,loo),e(k,wg),e(wg,rre),e(rre,ioo),e(wg,doo),e(wg,bR),e(bR,coo),e(wg,foo),e(k,moo),e(k,gs),e(gs,tre),e(tre,goo),e(gs,hoo),e(gs,vR),e(vR,poo),e(gs,uoo),e(gs,FR),e(FR,_oo),e(gs,boo),e(k,voo),e(k,hs),e(hs,are),e(are,Foo),e(hs,Too),e(hs,TR),e(TR,Moo),e(hs,Eoo),e(hs,MR),e(MR,Coo),e(hs,woo),e(k,Aoo),e(k,ps),e(ps,nre),e(nre,yoo),e(ps,Loo),e(ps,ER),e(ER,xoo),e(ps,$oo),e(ps,CR),e(CR,koo),e(ps,Soo),e(k,Roo),e(k,us),e(us,sre),e(sre,Boo),e(us,Poo),e(us,wR),e(wR,Ioo),e(us,qoo),e(us,AR),e(AR,Noo),e(us,joo),e(k,Doo),e(k,_s),e(_s,lre),e(lre,Goo),e(_s,Ooo),e(_s,yR),e(yR,Voo),e(_s,Xoo),e(_s,LR),e(LR,zoo),e(_s,Qoo),e(k,Woo),e(k,bs),e(bs,ire),e(ire,Hoo),e(bs,Uoo),e(bs,xR),e(xR,Joo),e(bs,Yoo),e(bs,$R),e($R,Koo),e(bs,Zoo),e(k,ero),e(k,Ag),e(Ag,dre),e(dre,oro),e(Ag,rro),e(Ag,kR),e(kR,tro),e(Ag,aro),e(k,nro),e(k,yg),e(yg,cre),e(cre,sro),e(yg,lro),e(yg,SR),e(SR,iro),e(yg,dro),e(k,cro),e(k,vs),e(vs,fre),e(fre,fro),e(vs,mro),e(vs,RR),e(RR,gro),e(vs,hro),e(vs,BR),e(BR,pro),e(vs,uro),e(k,_ro),e(k,Fs),e(Fs,mre),e(mre,bro),e(Fs,vro),e(Fs,PR),e(PR,Fro),e(Fs,Tro),e(Fs,IR),e(IR,Mro),e(Fs,Ero),e(k,Cro),e(k,Ts),e(Ts,gre),e(gre,wro),e(Ts,Aro),e(Ts,qR),e(qR,yro),e(Ts,Lro),e(Ts,NR),e(NR,xro),e(Ts,$ro),e(k,kro),e(k,Lg),e(Lg,hre),e(hre,Sro),e(Lg,Rro),e(Lg,jR),e(jR,Bro),e(Lg,Pro),e(k,Iro),e(k,xg),e(xg,pre),e(pre,qro),e(xg,Nro),e(xg,DR),e(DR,jro),e(xg,Dro),e(k,Gro),e(k,$g),e($g,ure),e(ure,Oro),e($g,Vro),e($g,GR),e(GR,Xro),e($g,zro),e(k,Qro),e(k,Ms),e(Ms,_re),e(_re,Wro),e(Ms,Hro),e(Ms,OR),e(OR,Uro),e(Ms,Jro),e(Ms,VR),e(VR,Yro),e(Ms,Kro),e(k,Zro),e(k,kg),e(kg,bre),e(bre,eto),e(kg,oto),e(kg,XR),e(XR,rto),e(kg,tto),e(k,ato),e(k,Sg),e(Sg,vre),e(vre,nto),e(Sg,sto),e(Sg,zR),e(zR,lto),e(Sg,ito),e(k,dto),e(k,Es),e(Es,Fre),e(Fre,cto),e(Es,fto),e(Es,QR),e(QR,mto),e(Es,gto),e(Es,WR),e(WR,hto),e(Es,pto),e(k,uto),e(k,Rg),e(Rg,Tre),e(Tre,_to),e(Rg,bto),e(Rg,HR),e(HR,vto),e(Rg,Fto),e(k,Tto),e(k,Bg),e(Bg,Mre),e(Mre,Mto),e(Bg,Eto),e(Bg,UR),e(UR,Cto),e(Bg,wto),e(k,Ato),e(k,Cs),e(Cs,Ere),e(Ere,yto),e(Cs,Lto),e(Cs,JR),e(JR,xto),e(Cs,$to),e(Cs,YR),e(YR,kto),e(Cs,Sto),e(k,Rto),e(k,ws),e(ws,Cre),e(Cre,Bto),e(ws,Pto),e(ws,KR),e(KR,Ito),e(ws,qto),e(ws,ZR),e(ZR,Nto),e(ws,jto),e(k,Dto),e(k,As),e(As,wre),e(wre,Gto),e(As,Oto),e(As,eB),e(eB,Vto),e(As,Xto),e(As,oB),e(oB,zto),e(As,Qto),e(k,Wto),e(k,ys),e(ys,Are),e(Are,Hto),e(ys,Uto),e(ys,rB),e(rB,Jto),e(ys,Yto),e(ys,tB),e(tB,Kto),e(ys,Zto),e(Mr,eao),M(Pg,Mr,null),e(Co,oao),e(Co,Ig),M(LA,Ig,null),e(Ig,rao),e(Ig,yre),e(yre,tao),b(f,XRe,_),b(f,mi,_),e(mi,qg),e(qg,Lre),M(xA,Lre,null),e(mi,aao),e(mi,xre),e(xre,nao),b(f,zRe,_),b(f,wo,_),M($A,wo,null),e(wo,sao),e(wo,kA),e(kA,lao),e(kA,aB),e(aB,iao),e(kA,dao),e(wo,cao),e(wo,SA),e(SA,fao),e(SA,$re),e($re,mao),e(SA,gao),e(wo,hao),e(wo,ze),M(RA,ze,null),e(ze,pao),e(ze,kre),e(kre,uao),e(ze,_ao),e(ze,Ma),e(Ma,bao),e(Ma,Sre),e(Sre,vao),e(Ma,Fao),e(Ma,Rre),e(Rre,Tao),e(Ma,Mao),e(Ma,Bre),e(Bre,Eao),e(Ma,Cao),e(ze,wao),e(ze,ae),e(ae,Ng),e(Ng,Pre),e(Pre,Aao),e(Ng,yao),e(Ng,nB),e(nB,Lao),e(Ng,xao),e(ae,$ao),e(ae,jg),e(jg,Ire),e(Ire,kao),e(jg,Sao),e(jg,sB),e(sB,Rao),e(jg,Bao),e(ae,Pao),e(ae,Dg),e(Dg,qre),e(qre,Iao),e(Dg,qao),e(Dg,lB),e(lB,Nao),e(Dg,jao),e(ae,Dao),e(ae,Gg),e(Gg,Nre),e(Nre,Gao),e(Gg,Oao),e(Gg,iB),e(iB,Vao),e(Gg,Xao),e(ae,zao),e(ae,Og),e(Og,jre),e(jre,Qao),e(Og,Wao),e(Og,dB),e(dB,Hao),e(Og,Uao),e(ae,Jao),e(ae,Vg),e(Vg,Dre),e(Dre,Yao),e(Vg,Kao),e(Vg,cB),e(cB,Zao),e(Vg,eno),e(ae,ono),e(ae,Xg),e(Xg,Gre),e(Gre,rno),e(Xg,tno),e(Xg,fB),e(fB,ano),e(Xg,nno),e(ae,sno),e(ae,zg),e(zg,Ore),e(Ore,lno),e(zg,ino),e(zg,mB),e(mB,dno),e(zg,cno),e(ae,fno),e(ae,Qg),e(Qg,Vre),e(Vre,mno),e(Qg,gno),e(Qg,gB),e(gB,hno),e(Qg,pno),e(ae,uno),e(ae,Wg),e(Wg,Xre),e(Xre,_no),e(Wg,bno),e(Wg,hB),e(hB,vno),e(Wg,Fno),e(ae,Tno),e(ae,Hg),e(Hg,zre),e(zre,Mno),e(Hg,Eno),e(Hg,pB),e(pB,Cno),e(Hg,wno),e(ae,Ano),e(ae,Ug),e(Ug,Qre),e(Qre,yno),e(Ug,Lno),e(Ug,uB),e(uB,xno),e(Ug,$no),e(ae,kno),e(ae,Jg),e(Jg,Wre),e(Wre,Sno),e(Jg,Rno),e(Jg,_B),e(_B,Bno),e(Jg,Pno),e(ae,Ino),e(ae,Yg),e(Yg,Hre),e(Hre,qno),e(Yg,Nno),e(Yg,bB),e(bB,jno),e(Yg,Dno),e(ae,Gno),e(ae,Kg),e(Kg,Ure),e(Ure,Ono),e(Kg,Vno),e(Kg,vB),e(vB,Xno),e(Kg,zno),e(ae,Qno),e(ae,Zg),e(Zg,Jre),e(Jre,Wno),e(Zg,Hno),e(Zg,FB),e(FB,Uno),e(Zg,Jno),e(ae,Yno),e(ae,eh),e(eh,Yre),e(Yre,Kno),e(eh,Zno),e(eh,TB),e(TB,eso),e(eh,oso),e(ae,rso),e(ae,oh),e(oh,Kre),e(Kre,tso),e(oh,aso),e(oh,MB),e(MB,nso),e(oh,sso),e(ae,lso),e(ae,rh),e(rh,Zre),e(Zre,iso),e(rh,dso),e(rh,EB),e(EB,cso),e(rh,fso),e(ae,mso),e(ae,th),e(th,ete),e(ete,gso),e(th,hso),e(th,CB),e(CB,pso),e(th,uso),e(ae,_so),e(ae,ah),e(ah,ote),e(ote,bso),e(ah,vso),e(ah,wB),e(wB,Fso),e(ah,Tso),e(ae,Mso),e(ae,nh),e(nh,rte),e(rte,Eso),e(nh,Cso),e(nh,AB),e(AB,wso),e(nh,Aso),e(ae,yso),e(ae,sh),e(sh,tte),e(tte,Lso),e(sh,xso),e(sh,yB),e(yB,$so),e(sh,kso),e(ze,Sso),M(lh,ze,null),e(ze,Rso),M(ih,ze,null),e(wo,Bso),e(wo,dh),M(BA,dh,null),e(dh,Pso),e(dh,ate),e(ate,Iso),b(f,QRe,_),b(f,gi,_),e(gi,ch),e(ch,nte),M(PA,nte,null),e(gi,qso),e(gi,ste),e(ste,Nso),b(f,WRe,_),b(f,Ao,_),M(IA,Ao,null),e(Ao,jso),e(Ao,qA),e(qA,Dso),e(qA,LB),e(LB,Gso),e(qA,Oso),e(Ao,Vso),e(Ao,NA),e(NA,Xso),e(NA,lte),e(lte,zso),e(NA,Qso),e(Ao,Wso),e(Ao,Qe),M(jA,Qe,null),e(Qe,Hso),e(Qe,ite),e(ite,Uso),e(Qe,Jso),e(Qe,hi),e(hi,Yso),e(hi,dte),e(dte,Kso),e(hi,Zso),e(hi,cte),e(cte,elo),e(hi,olo),e(Qe,rlo),e(Qe,be),e(be,fh),e(fh,fte),e(fte,tlo),e(fh,alo),e(fh,xB),e(xB,nlo),e(fh,slo),e(be,llo),e(be,mh),e(mh,mte),e(mte,ilo),e(mh,dlo),e(mh,$B),e($B,clo),e(mh,flo),e(be,mlo),e(be,gh),e(gh,gte),e(gte,glo),e(gh,hlo),e(gh,kB),e(kB,plo),e(gh,ulo),e(be,_lo),e(be,hh),e(hh,hte),e(hte,blo),e(hh,vlo),e(hh,SB),e(SB,Flo),e(hh,Tlo),e(be,Mlo),e(be,ph),e(ph,pte),e(pte,Elo),e(ph,Clo),e(ph,RB),e(RB,wlo),e(ph,Alo),e(be,ylo),e(be,uh),e(uh,ute),e(ute,Llo),e(uh,xlo),e(uh,BB),e(BB,$lo),e(uh,klo),e(be,Slo),e(be,_h),e(_h,_te),e(_te,Rlo),e(_h,Blo),e(_h,PB),e(PB,Plo),e(_h,Ilo),e(be,qlo),e(be,bh),e(bh,bte),e(bte,Nlo),e(bh,jlo),e(bh,IB),e(IB,Dlo),e(bh,Glo),e(be,Olo),e(be,vh),e(vh,vte),e(vte,Vlo),e(vh,Xlo),e(vh,qB),e(qB,zlo),e(vh,Qlo),e(be,Wlo),e(be,Fh),e(Fh,Fte),e(Fte,Hlo),e(Fh,Ulo),e(Fh,NB),e(NB,Jlo),e(Fh,Ylo),e(be,Klo),e(be,Th),e(Th,Tte),e(Tte,Zlo),e(Th,eio),e(Th,jB),e(jB,oio),e(Th,rio),e(be,tio),e(be,Mh),e(Mh,Mte),e(Mte,aio),e(Mh,nio),e(Mh,DB),e(DB,sio),e(Mh,lio),e(be,iio),e(be,Eh),e(Eh,Ete),e(Ete,dio),e(Eh,cio),e(Eh,GB),e(GB,fio),e(Eh,mio),e(be,gio),e(be,Ch),e(Ch,Cte),e(Cte,hio),e(Ch,pio),e(Ch,OB),e(OB,uio),e(Ch,_io),e(Qe,bio),M(wh,Qe,null),e(Qe,vio),M(Ah,Qe,null),e(Ao,Fio),e(Ao,yh),M(DA,yh,null),e(yh,Tio),e(yh,wte),e(wte,Mio),b(f,HRe,_),b(f,pi,_),e(pi,Lh),e(Lh,Ate),M(GA,Ate,null),e(pi,Eio),e(pi,yte),e(yte,Cio),b(f,URe,_),b(f,yo,_),M(OA,yo,null),e(yo,wio),e(yo,ui),e(ui,Aio),e(ui,VB),e(VB,yio),e(ui,Lio),e(ui,XB),e(XB,xio),e(ui,$io),e(yo,kio),e(yo,VA),e(VA,Sio),e(VA,Lte),e(Lte,Rio),e(VA,Bio),e(yo,Pio),e(yo,Zr),M(XA,Zr,null),e(Zr,Iio),e(Zr,xte),e(xte,qio),e(Zr,Nio),e(Zr,_i),e(_i,jio),e(_i,$te),e($te,Dio),e(_i,Gio),e(_i,zB),e(zB,Oio),e(_i,Vio),e(Zr,Xio),M(xh,Zr,null),e(yo,zio),e(yo,We),M(zA,We,null),e(We,Qio),e(We,kte),e(kte,Wio),e(We,Hio),e(We,Ea),e(Ea,Uio),e(Ea,Ste),e(Ste,Jio),e(Ea,Yio),e(Ea,Rte),e(Rte,Kio),e(Ea,Zio),e(Ea,Bte),e(Bte,edo),e(Ea,odo),e(We,rdo),e(We,x),e(x,$h),e($h,Pte),e(Pte,tdo),e($h,ado),e($h,QB),e(QB,ndo),e($h,sdo),e(x,ldo),e(x,kh),e(kh,Ite),e(Ite,ido),e(kh,ddo),e(kh,WB),e(WB,cdo),e(kh,fdo),e(x,mdo),e(x,Sh),e(Sh,qte),e(qte,gdo),e(Sh,hdo),e(Sh,HB),e(HB,pdo),e(Sh,udo),e(x,_do),e(x,Rh),e(Rh,Nte),e(Nte,bdo),e(Rh,vdo),e(Rh,UB),e(UB,Fdo),e(Rh,Tdo),e(x,Mdo),e(x,Bh),e(Bh,jte),e(jte,Edo),e(Bh,Cdo),e(Bh,JB),e(JB,wdo),e(Bh,Ado),e(x,ydo),e(x,Ph),e(Ph,Dte),e(Dte,Ldo),e(Ph,xdo),e(Ph,YB),e(YB,$do),e(Ph,kdo),e(x,Sdo),e(x,Ih),e(Ih,Gte),e(Gte,Rdo),e(Ih,Bdo),e(Ih,KB),e(KB,Pdo),e(Ih,Ido),e(x,qdo),e(x,qh),e(qh,Ote),e(Ote,Ndo),e(qh,jdo),e(qh,ZB),e(ZB,Ddo),e(qh,Gdo),e(x,Odo),e(x,Nh),e(Nh,Vte),e(Vte,Vdo),e(Nh,Xdo),e(Nh,eP),e(eP,zdo),e(Nh,Qdo),e(x,Wdo),e(x,jh),e(jh,Xte),e(Xte,Hdo),e(jh,Udo),e(jh,oP),e(oP,Jdo),e(jh,Ydo),e(x,Kdo),e(x,Dh),e(Dh,zte),e(zte,Zdo),e(Dh,eco),e(Dh,rP),e(rP,oco),e(Dh,rco),e(x,tco),e(x,Gh),e(Gh,Qte),e(Qte,aco),e(Gh,nco),e(Gh,tP),e(tP,sco),e(Gh,lco),e(x,ico),e(x,Oh),e(Oh,Wte),e(Wte,dco),e(Oh,cco),e(Oh,aP),e(aP,fco),e(Oh,mco),e(x,gco),e(x,Vh),e(Vh,Hte),e(Hte,hco),e(Vh,pco),e(Vh,nP),e(nP,uco),e(Vh,_co),e(x,bco),e(x,Xh),e(Xh,Ute),e(Ute,vco),e(Xh,Fco),e(Xh,sP),e(sP,Tco),e(Xh,Mco),e(x,Eco),e(x,zh),e(zh,Jte),e(Jte,Cco),e(zh,wco),e(zh,lP),e(lP,Aco),e(zh,yco),e(x,Lco),e(x,Qh),e(Qh,Yte),e(Yte,xco),e(Qh,$co),e(Qh,iP),e(iP,kco),e(Qh,Sco),e(x,Rco),e(x,Wh),e(Wh,Kte),e(Kte,Bco),e(Wh,Pco),e(Wh,dP),e(dP,Ico),e(Wh,qco),e(x,Nco),e(x,Hh),e(Hh,Zte),e(Zte,jco),e(Hh,Dco),e(Hh,cP),e(cP,Gco),e(Hh,Oco),e(x,Vco),e(x,Uh),e(Uh,eae),e(eae,Xco),e(Uh,zco),e(Uh,fP),e(fP,Qco),e(Uh,Wco),e(x,Hco),e(x,Jh),e(Jh,oae),e(oae,Uco),e(Jh,Jco),e(Jh,mP),e(mP,Yco),e(Jh,Kco),e(x,Zco),e(x,Yh),e(Yh,rae),e(rae,efo),e(Yh,ofo),e(Yh,gP),e(gP,rfo),e(Yh,tfo),e(x,afo),e(x,Kh),e(Kh,tae),e(tae,nfo),e(Kh,sfo),e(Kh,hP),e(hP,lfo),e(Kh,ifo),e(x,dfo),e(x,Zh),e(Zh,aae),e(aae,cfo),e(Zh,ffo),e(Zh,pP),e(pP,mfo),e(Zh,gfo),e(x,hfo),e(x,ep),e(ep,nae),e(nae,pfo),e(ep,ufo),e(ep,uP),e(uP,_fo),e(ep,bfo),e(x,vfo),e(x,op),e(op,sae),e(sae,Ffo),e(op,Tfo),e(op,_P),e(_P,Mfo),e(op,Efo),e(x,Cfo),e(x,rp),e(rp,lae),e(lae,wfo),e(rp,Afo),e(rp,bP),e(bP,yfo),e(rp,Lfo),e(x,xfo),e(x,tp),e(tp,iae),e(iae,$fo),e(tp,kfo),e(tp,vP),e(vP,Sfo),e(tp,Rfo),e(x,Bfo),e(x,ap),e(ap,dae),e(dae,Pfo),e(ap,Ifo),e(ap,FP),e(FP,qfo),e(ap,Nfo),e(x,jfo),e(x,np),e(np,cae),e(cae,Dfo),e(np,Gfo),e(np,TP),e(TP,Ofo),e(np,Vfo),e(x,Xfo),e(x,Ls),e(Ls,fae),e(fae,zfo),e(Ls,Qfo),e(Ls,MP),e(MP,Wfo),e(Ls,Hfo),e(Ls,EP),e(EP,Ufo),e(Ls,Jfo),e(x,Yfo),e(x,sp),e(sp,mae),e(mae,Kfo),e(sp,Zfo),e(sp,CP),e(CP,emo),e(sp,omo),e(x,rmo),e(x,lp),e(lp,gae),e(gae,tmo),e(lp,amo),e(lp,wP),e(wP,nmo),e(lp,smo),e(x,lmo),e(x,ip),e(ip,hae),e(hae,imo),e(ip,dmo),e(ip,AP),e(AP,cmo),e(ip,fmo),e(x,mmo),e(x,dp),e(dp,pae),e(pae,gmo),e(dp,hmo),e(dp,yP),e(yP,pmo),e(dp,umo),e(x,_mo),e(x,cp),e(cp,uae),e(uae,bmo),e(cp,vmo),e(cp,LP),e(LP,Fmo),e(cp,Tmo),e(x,Mmo),e(x,fp),e(fp,_ae),e(_ae,Emo),e(fp,Cmo),e(fp,xP),e(xP,wmo),e(fp,Amo),e(x,ymo),e(x,mp),e(mp,bae),e(bae,Lmo),e(mp,xmo),e(mp,$P),e($P,$mo),e(mp,kmo),e(x,Smo),e(x,gp),e(gp,vae),e(vae,Rmo),e(gp,Bmo),e(gp,kP),e(kP,Pmo),e(gp,Imo),e(x,qmo),e(x,hp),e(hp,Fae),e(Fae,Nmo),e(hp,jmo),e(hp,SP),e(SP,Dmo),e(hp,Gmo),e(x,Omo),e(x,pp),e(pp,Tae),e(Tae,Vmo),e(pp,Xmo),e(pp,RP),e(RP,zmo),e(pp,Qmo),e(x,Wmo),e(x,up),e(up,Mae),e(Mae,Hmo),e(up,Umo),e(up,BP),e(BP,Jmo),e(up,Ymo),e(x,Kmo),e(x,_p),e(_p,Eae),e(Eae,Zmo),e(_p,ego),e(_p,PP),e(PP,ogo),e(_p,rgo),e(x,tgo),e(x,bp),e(bp,Cae),e(Cae,ago),e(bp,ngo),e(bp,IP),e(IP,sgo),e(bp,lgo),e(x,igo),e(x,vp),e(vp,wae),e(wae,dgo),e(vp,cgo),e(vp,qP),e(qP,fgo),e(vp,mgo),e(x,ggo),e(x,Fp),e(Fp,Aae),e(Aae,hgo),e(Fp,pgo),e(Fp,NP),e(NP,ugo),e(Fp,_go),e(x,bgo),e(x,Tp),e(Tp,yae),e(yae,vgo),e(Tp,Fgo),e(Tp,jP),e(jP,Tgo),e(Tp,Mgo),e(x,Ego),e(x,Mp),e(Mp,Lae),e(Lae,Cgo),e(Mp,wgo),e(Mp,DP),e(DP,Ago),e(Mp,ygo),e(x,Lgo),e(x,Ep),e(Ep,xae),e(xae,xgo),e(Ep,$go),e(Ep,GP),e(GP,kgo),e(Ep,Sgo),e(x,Rgo),e(x,Cp),e(Cp,$ae),e($ae,Bgo),e(Cp,Pgo),e(Cp,OP),e(OP,Igo),e(Cp,qgo),e(x,Ngo),e(x,wp),e(wp,kae),e(kae,jgo),e(wp,Dgo),e(wp,VP),e(VP,Ggo),e(wp,Ogo),e(x,Vgo),e(x,Ap),e(Ap,Sae),e(Sae,Xgo),e(Ap,zgo),e(Ap,XP),e(XP,Qgo),e(Ap,Wgo),e(x,Hgo),e(x,yp),e(yp,Rae),e(Rae,Ugo),e(yp,Jgo),e(yp,zP),e(zP,Ygo),e(yp,Kgo),e(x,Zgo),e(x,Lp),e(Lp,Bae),e(Bae,eho),e(Lp,oho),e(Lp,QP),e(QP,rho),e(Lp,tho),e(x,aho),e(x,xp),e(xp,Pae),e(Pae,nho),e(xp,sho),e(xp,WP),e(WP,lho),e(xp,iho),e(x,dho),e(x,$p),e($p,Iae),e(Iae,cho),e($p,fho),e($p,HP),e(HP,mho),e($p,gho),e(x,hho),e(x,kp),e(kp,qae),e(qae,pho),e(kp,uho),e(kp,UP),e(UP,_ho),e(kp,bho),e(x,vho),e(x,Sp),e(Sp,Nae),e(Nae,Fho),e(Sp,Tho),e(Sp,JP),e(JP,Mho),e(Sp,Eho),e(x,Cho),e(x,Rp),e(Rp,jae),e(jae,who),e(Rp,Aho),e(Rp,YP),e(YP,yho),e(Rp,Lho),e(x,xho),e(x,Bp),e(Bp,Dae),e(Dae,$ho),e(Bp,kho),e(Bp,KP),e(KP,Sho),e(Bp,Rho),e(x,Bho),e(x,Pp),e(Pp,Gae),e(Gae,Pho),e(Pp,Iho),e(Pp,ZP),e(ZP,qho),e(Pp,Nho),e(x,jho),e(x,Ip),e(Ip,Oae),e(Oae,Dho),e(Ip,Gho),e(Ip,eI),e(eI,Oho),e(Ip,Vho),e(x,Xho),e(x,qp),e(qp,Vae),e(Vae,zho),e(qp,Qho),e(qp,oI),e(oI,Who),e(qp,Hho),e(x,Uho),e(x,Np),e(Np,Xae),e(Xae,Jho),e(Np,Yho),e(Np,rI),e(rI,Kho),e(Np,Zho),e(x,epo),e(x,jp),e(jp,zae),e(zae,opo),e(jp,rpo),e(jp,tI),e(tI,tpo),e(jp,apo),e(x,npo),e(x,Dp),e(Dp,Qae),e(Qae,spo),e(Dp,lpo),e(Dp,aI),e(aI,ipo),e(Dp,dpo),e(x,cpo),e(x,Gp),e(Gp,Wae),e(Wae,fpo),e(Gp,mpo),e(Gp,nI),e(nI,gpo),e(Gp,hpo),e(x,ppo),e(x,Op),e(Op,Hae),e(Hae,upo),e(Op,_po),e(Op,sI),e(sI,bpo),e(Op,vpo),e(x,Fpo),e(x,Vp),e(Vp,Uae),e(Uae,Tpo),e(Vp,Mpo),e(Vp,lI),e(lI,Epo),e(Vp,Cpo),e(x,wpo),e(x,Xp),e(Xp,Jae),e(Jae,Apo),e(Xp,ypo),e(Xp,iI),e(iI,Lpo),e(Xp,xpo),e(x,$po),e(x,zp),e(zp,Yae),e(Yae,kpo),e(zp,Spo),e(zp,dI),e(dI,Rpo),e(zp,Bpo),e(x,Ppo),e(x,Qp),e(Qp,Kae),e(Kae,Ipo),e(Qp,qpo),e(Qp,cI),e(cI,Npo),e(Qp,jpo),e(x,Dpo),e(x,Wp),e(Wp,Zae),e(Zae,Gpo),e(Wp,Opo),e(Wp,fI),e(fI,Vpo),e(Wp,Xpo),e(x,zpo),e(x,Hp),e(Hp,ene),e(ene,Qpo),e(Hp,Wpo),e(Hp,mI),e(mI,Hpo),e(Hp,Upo),e(x,Jpo),e(x,Up),e(Up,one),e(one,Ypo),e(Up,Kpo),e(Up,gI),e(gI,Zpo),e(Up,euo),e(x,ouo),e(x,Jp),e(Jp,rne),e(rne,ruo),e(Jp,tuo),e(Jp,hI),e(hI,auo),e(Jp,nuo),e(x,suo),e(x,Yp),e(Yp,tne),e(tne,luo),e(Yp,iuo),e(Yp,pI),e(pI,duo),e(Yp,cuo),e(x,fuo),e(x,Kp),e(Kp,ane),e(ane,muo),e(Kp,guo),e(Kp,uI),e(uI,huo),e(Kp,puo),e(x,uuo),e(x,Zp),e(Zp,nne),e(nne,_uo),e(Zp,buo),e(Zp,_I),e(_I,vuo),e(Zp,Fuo),e(x,Tuo),e(x,eu),e(eu,sne),e(sne,Muo),e(eu,Euo),e(eu,bI),e(bI,Cuo),e(eu,wuo),e(x,Auo),e(x,ou),e(ou,lne),e(lne,yuo),e(ou,Luo),e(ou,vI),e(vI,xuo),e(ou,$uo),e(x,kuo),e(x,ru),e(ru,ine),e(ine,Suo),e(ru,Ruo),e(ru,FI),e(FI,Buo),e(ru,Puo),e(x,Iuo),e(x,tu),e(tu,dne),e(dne,quo),e(tu,Nuo),e(tu,TI),e(TI,juo),e(tu,Duo),e(x,Guo),e(x,au),e(au,cne),e(cne,Ouo),e(au,Vuo),e(au,MI),e(MI,Xuo),e(au,zuo),e(x,Quo),e(x,nu),e(nu,fne),e(fne,Wuo),e(nu,Huo),e(nu,EI),e(EI,Uuo),e(nu,Juo),e(x,Yuo),e(x,su),e(su,mne),e(mne,Kuo),e(su,Zuo),e(su,CI),e(CI,e_o),e(su,o_o),e(x,r_o),e(x,lu),e(lu,gne),e(gne,t_o),e(lu,a_o),e(lu,wI),e(wI,n_o),e(lu,s_o),e(x,l_o),e(x,iu),e(iu,hne),e(hne,i_o),e(iu,d_o),e(iu,AI),e(AI,c_o),e(iu,f_o),e(x,m_o),e(x,du),e(du,pne),e(pne,g_o),e(du,h_o),e(du,yI),e(yI,p_o),e(du,u_o),e(x,__o),e(x,cu),e(cu,une),e(une,b_o),e(cu,v_o),e(cu,LI),e(LI,F_o),e(cu,T_o),e(x,M_o),e(x,fu),e(fu,_ne),e(_ne,E_o),e(fu,C_o),e(fu,xI),e(xI,w_o),e(fu,A_o),e(x,y_o),e(x,mu),e(mu,bne),e(bne,L_o),e(mu,x_o),e(mu,$I),e($I,$_o),e(mu,k_o),e(x,S_o),e(x,gu),e(gu,vne),e(vne,R_o),e(gu,B_o),e(gu,kI),e(kI,P_o),e(gu,I_o),e(x,q_o),e(x,hu),e(hu,Fne),e(Fne,N_o),e(hu,j_o),e(hu,SI),e(SI,D_o),e(hu,G_o),e(We,O_o),e(We,pu),e(pu,V_o),e(pu,Tne),e(Tne,X_o),e(pu,z_o),e(pu,Mne),e(Mne,Q_o),e(We,W_o),M(uu,We,null),b(f,JRe,_),b(f,bi,_),e(bi,_u),e(_u,Ene),M(QA,Ene,null),e(bi,H_o),e(bi,Cne),e(Cne,U_o),b(f,YRe,_),b(f,Lo,_),M(WA,Lo,null),e(Lo,J_o),e(Lo,vi),e(vi,Y_o),e(vi,RI),e(RI,K_o),e(vi,Z_o),e(vi,BI),e(BI,e1o),e(vi,o1o),e(Lo,r1o),e(Lo,HA),e(HA,t1o),e(HA,wne),e(wne,a1o),e(HA,n1o),e(Lo,s1o),e(Lo,et),M(UA,et,null),e(et,l1o),e(et,Ane),e(Ane,i1o),e(et,d1o),e(et,Fi),e(Fi,c1o),e(Fi,yne),e(yne,f1o),e(Fi,m1o),e(Fi,PI),e(PI,g1o),e(Fi,h1o),e(et,p1o),M(bu,et,null),e(Lo,u1o),e(Lo,He),M(JA,He,null),e(He,_1o),e(He,Lne),e(Lne,b1o),e(He,v1o),e(He,Ca),e(Ca,F1o),e(Ca,xne),e(xne,T1o),e(Ca,M1o),e(Ca,$ne),e($ne,E1o),e(Ca,C1o),e(Ca,kne),e(kne,w1o),e(Ca,A1o),e(He,y1o),e(He,G),e(G,vu),e(vu,Sne),e(Sne,L1o),e(vu,x1o),e(vu,II),e(II,$1o),e(vu,k1o),e(G,S1o),e(G,Fu),e(Fu,Rne),e(Rne,R1o),e(Fu,B1o),e(Fu,qI),e(qI,P1o),e(Fu,I1o),e(G,q1o),e(G,Tu),e(Tu,Bne),e(Bne,N1o),e(Tu,j1o),e(Tu,NI),e(NI,D1o),e(Tu,G1o),e(G,O1o),e(G,Mu),e(Mu,Pne),e(Pne,V1o),e(Mu,X1o),e(Mu,jI),e(jI,z1o),e(Mu,Q1o),e(G,W1o),e(G,Eu),e(Eu,Ine),e(Ine,H1o),e(Eu,U1o),e(Eu,DI),e(DI,J1o),e(Eu,Y1o),e(G,K1o),e(G,Cu),e(Cu,qne),e(qne,Z1o),e(Cu,e9o),e(Cu,GI),e(GI,o9o),e(Cu,r9o),e(G,t9o),e(G,wu),e(wu,Nne),e(Nne,a9o),e(wu,n9o),e(wu,OI),e(OI,s9o),e(wu,l9o),e(G,i9o),e(G,Au),e(Au,jne),e(jne,d9o),e(Au,c9o),e(Au,VI),e(VI,f9o),e(Au,m9o),e(G,g9o),e(G,yu),e(yu,Dne),e(Dne,h9o),e(yu,p9o),e(yu,XI),e(XI,u9o),e(yu,_9o),e(G,b9o),e(G,Lu),e(Lu,Gne),e(Gne,v9o),e(Lu,F9o),e(Lu,zI),e(zI,T9o),e(Lu,M9o),e(G,E9o),e(G,xu),e(xu,One),e(One,C9o),e(xu,w9o),e(xu,QI),e(QI,A9o),e(xu,y9o),e(G,L9o),e(G,$u),e($u,Vne),e(Vne,x9o),e($u,$9o),e($u,WI),e(WI,k9o),e($u,S9o),e(G,R9o),e(G,ku),e(ku,Xne),e(Xne,B9o),e(ku,P9o),e(ku,HI),e(HI,I9o),e(ku,q9o),e(G,N9o),e(G,Su),e(Su,zne),e(zne,j9o),e(Su,D9o),e(Su,UI),e(UI,G9o),e(Su,O9o),e(G,V9o),e(G,Ru),e(Ru,Qne),e(Qne,X9o),e(Ru,z9o),e(Ru,JI),e(JI,Q9o),e(Ru,W9o),e(G,H9o),e(G,Bu),e(Bu,Wne),e(Wne,U9o),e(Bu,J9o),e(Bu,YI),e(YI,Y9o),e(Bu,K9o),e(G,Z9o),e(G,Pu),e(Pu,Hne),e(Hne,ebo),e(Pu,obo),e(Pu,KI),e(KI,rbo),e(Pu,tbo),e(G,abo),e(G,Iu),e(Iu,Une),e(Une,nbo),e(Iu,sbo),e(Iu,ZI),e(ZI,lbo),e(Iu,ibo),e(G,dbo),e(G,qu),e(qu,Jne),e(Jne,cbo),e(qu,fbo),e(qu,eq),e(eq,mbo),e(qu,gbo),e(G,hbo),e(G,Nu),e(Nu,Yne),e(Yne,pbo),e(Nu,ubo),e(Nu,oq),e(oq,_bo),e(Nu,bbo),e(G,vbo),e(G,ju),e(ju,Kne),e(Kne,Fbo),e(ju,Tbo),e(ju,rq),e(rq,Mbo),e(ju,Ebo),e(G,Cbo),e(G,Du),e(Du,Zne),e(Zne,wbo),e(Du,Abo),e(Du,tq),e(tq,ybo),e(Du,Lbo),e(G,xbo),e(G,Gu),e(Gu,ese),e(ese,$bo),e(Gu,kbo),e(Gu,aq),e(aq,Sbo),e(Gu,Rbo),e(G,Bbo),e(G,Ou),e(Ou,ose),e(ose,Pbo),e(Ou,Ibo),e(Ou,nq),e(nq,qbo),e(Ou,Nbo),e(G,jbo),e(G,Vu),e(Vu,rse),e(rse,Dbo),e(Vu,Gbo),e(Vu,sq),e(sq,Obo),e(Vu,Vbo),e(G,Xbo),e(G,Xu),e(Xu,tse),e(tse,zbo),e(Xu,Qbo),e(Xu,lq),e(lq,Wbo),e(Xu,Hbo),e(G,Ubo),e(G,zu),e(zu,ase),e(ase,Jbo),e(zu,Ybo),e(zu,iq),e(iq,Kbo),e(zu,Zbo),e(G,e2o),e(G,Qu),e(Qu,nse),e(nse,o2o),e(Qu,r2o),e(Qu,dq),e(dq,t2o),e(Qu,a2o),e(G,n2o),e(G,Wu),e(Wu,sse),e(sse,s2o),e(Wu,l2o),e(Wu,cq),e(cq,i2o),e(Wu,d2o),e(G,c2o),e(G,Hu),e(Hu,lse),e(lse,f2o),e(Hu,m2o),e(Hu,fq),e(fq,g2o),e(Hu,h2o),e(G,p2o),e(G,Uu),e(Uu,ise),e(ise,u2o),e(Uu,_2o),e(Uu,mq),e(mq,b2o),e(Uu,v2o),e(G,F2o),e(G,Ju),e(Ju,dse),e(dse,T2o),e(Ju,M2o),e(Ju,gq),e(gq,E2o),e(Ju,C2o),e(G,w2o),e(G,Yu),e(Yu,cse),e(cse,A2o),e(Yu,y2o),e(Yu,hq),e(hq,L2o),e(Yu,x2o),e(G,$2o),e(G,Ku),e(Ku,fse),e(fse,k2o),e(Ku,S2o),e(Ku,pq),e(pq,R2o),e(Ku,B2o),e(G,P2o),e(G,Zu),e(Zu,mse),e(mse,I2o),e(Zu,q2o),e(Zu,uq),e(uq,N2o),e(Zu,j2o),e(G,D2o),e(G,e_),e(e_,gse),e(gse,G2o),e(e_,O2o),e(e_,_q),e(_q,V2o),e(e_,X2o),e(G,z2o),e(G,o_),e(o_,hse),e(hse,Q2o),e(o_,W2o),e(o_,bq),e(bq,H2o),e(o_,U2o),e(G,J2o),e(G,r_),e(r_,pse),e(pse,Y2o),e(r_,K2o),e(r_,vq),e(vq,Z2o),e(r_,e5o),e(G,o5o),e(G,t_),e(t_,use),e(use,r5o),e(t_,t5o),e(t_,Fq),e(Fq,a5o),e(t_,n5o),e(He,s5o),e(He,a_),e(a_,l5o),e(a_,_se),e(_se,i5o),e(a_,d5o),e(a_,bse),e(bse,c5o),e(He,f5o),M(n_,He,null),b(f,KRe,_),b(f,Ti,_),e(Ti,s_),e(s_,vse),M(YA,vse,null),e(Ti,m5o),e(Ti,Fse),e(Fse,g5o),b(f,ZRe,_),b(f,xo,_),M(KA,xo,null),e(xo,h5o),e(xo,Mi),e(Mi,p5o),e(Mi,Tq),e(Tq,u5o),e(Mi,_5o),e(Mi,Mq),e(Mq,b5o),e(Mi,v5o),e(xo,F5o),e(xo,ZA),e(ZA,T5o),e(ZA,Tse),e(Tse,M5o),e(ZA,E5o),e(xo,C5o),e(xo,ot),M(e0,ot,null),e(ot,w5o),e(ot,Mse),e(Mse,A5o),e(ot,y5o),e(ot,Ei),e(Ei,L5o),e(Ei,Ese),e(Ese,x5o),e(Ei,$5o),e(Ei,Eq),e(Eq,k5o),e(Ei,S5o),e(ot,R5o),M(l_,ot,null),e(xo,B5o),e(xo,Ue),M(o0,Ue,null),e(Ue,P5o),e(Ue,Cse),e(Cse,I5o),e(Ue,q5o),e(Ue,wa),e(wa,N5o),e(wa,wse),e(wse,j5o),e(wa,D5o),e(wa,Ase),e(Ase,G5o),e(wa,O5o),e(wa,yse),e(yse,V5o),e(wa,X5o),e(Ue,z5o),e(Ue,z),e(z,i_),e(i_,Lse),e(Lse,Q5o),e(i_,W5o),e(i_,Cq),e(Cq,H5o),e(i_,U5o),e(z,J5o),e(z,d_),e(d_,xse),e(xse,Y5o),e(d_,K5o),e(d_,wq),e(wq,Z5o),e(d_,evo),e(z,ovo),e(z,c_),e(c_,$se),e($se,rvo),e(c_,tvo),e(c_,Aq),e(Aq,avo),e(c_,nvo),e(z,svo),e(z,f_),e(f_,kse),e(kse,lvo),e(f_,ivo),e(f_,yq),e(yq,dvo),e(f_,cvo),e(z,fvo),e(z,m_),e(m_,Sse),e(Sse,mvo),e(m_,gvo),e(m_,Lq),e(Lq,hvo),e(m_,pvo),e(z,uvo),e(z,g_),e(g_,Rse),e(Rse,_vo),e(g_,bvo),e(g_,xq),e(xq,vvo),e(g_,Fvo),e(z,Tvo),e(z,h_),e(h_,Bse),e(Bse,Mvo),e(h_,Evo),e(h_,$q),e($q,Cvo),e(h_,wvo),e(z,Avo),e(z,p_),e(p_,Pse),e(Pse,yvo),e(p_,Lvo),e(p_,kq),e(kq,xvo),e(p_,$vo),e(z,kvo),e(z,u_),e(u_,Ise),e(Ise,Svo),e(u_,Rvo),e(u_,Sq),e(Sq,Bvo),e(u_,Pvo),e(z,Ivo),e(z,__),e(__,qse),e(qse,qvo),e(__,Nvo),e(__,Rq),e(Rq,jvo),e(__,Dvo),e(z,Gvo),e(z,b_),e(b_,Nse),e(Nse,Ovo),e(b_,Vvo),e(b_,Bq),e(Bq,Xvo),e(b_,zvo),e(z,Qvo),e(z,v_),e(v_,jse),e(jse,Wvo),e(v_,Hvo),e(v_,Pq),e(Pq,Uvo),e(v_,Jvo),e(z,Yvo),e(z,F_),e(F_,Dse),e(Dse,Kvo),e(F_,Zvo),e(F_,Iq),e(Iq,eFo),e(F_,oFo),e(z,rFo),e(z,T_),e(T_,Gse),e(Gse,tFo),e(T_,aFo),e(T_,qq),e(qq,nFo),e(T_,sFo),e(z,lFo),e(z,M_),e(M_,Ose),e(Ose,iFo),e(M_,dFo),e(M_,Nq),e(Nq,cFo),e(M_,fFo),e(z,mFo),e(z,E_),e(E_,Vse),e(Vse,gFo),e(E_,hFo),e(E_,jq),e(jq,pFo),e(E_,uFo),e(z,_Fo),e(z,C_),e(C_,Xse),e(Xse,bFo),e(C_,vFo),e(C_,Dq),e(Dq,FFo),e(C_,TFo),e(z,MFo),e(z,w_),e(w_,zse),e(zse,EFo),e(w_,CFo),e(w_,Gq),e(Gq,wFo),e(w_,AFo),e(z,yFo),e(z,A_),e(A_,Qse),e(Qse,LFo),e(A_,xFo),e(A_,Oq),e(Oq,$Fo),e(A_,kFo),e(z,SFo),e(z,y_),e(y_,Wse),e(Wse,RFo),e(y_,BFo),e(y_,Vq),e(Vq,PFo),e(y_,IFo),e(z,qFo),e(z,L_),e(L_,Hse),e(Hse,NFo),e(L_,jFo),e(L_,Xq),e(Xq,DFo),e(L_,GFo),e(z,OFo),e(z,x_),e(x_,Use),e(Use,VFo),e(x_,XFo),e(x_,zq),e(zq,zFo),e(x_,QFo),e(z,WFo),e(z,$_),e($_,Jse),e(Jse,HFo),e($_,UFo),e($_,Qq),e(Qq,JFo),e($_,YFo),e(z,KFo),e(z,k_),e(k_,Yse),e(Yse,ZFo),e(k_,e6o),e(k_,Wq),e(Wq,o6o),e(k_,r6o),e(z,t6o),e(z,S_),e(S_,Kse),e(Kse,a6o),e(S_,n6o),e(S_,Hq),e(Hq,s6o),e(S_,l6o),e(z,i6o),e(z,R_),e(R_,Zse),e(Zse,d6o),e(R_,c6o),e(R_,Uq),e(Uq,f6o),e(R_,m6o),e(z,g6o),e(z,B_),e(B_,ele),e(ele,h6o),e(B_,p6o),e(B_,Jq),e(Jq,u6o),e(B_,_6o),e(z,b6o),e(z,P_),e(P_,ole),e(ole,v6o),e(P_,F6o),e(P_,Yq),e(Yq,T6o),e(P_,M6o),e(z,E6o),e(z,I_),e(I_,rle),e(rle,C6o),e(I_,w6o),e(I_,Kq),e(Kq,A6o),e(I_,y6o),e(z,L6o),e(z,q_),e(q_,tle),e(tle,x6o),e(q_,$6o),e(q_,Zq),e(Zq,k6o),e(q_,S6o),e(z,R6o),e(z,N_),e(N_,ale),e(ale,B6o),e(N_,P6o),e(N_,eN),e(eN,I6o),e(N_,q6o),e(z,N6o),e(z,j_),e(j_,nle),e(nle,j6o),e(j_,D6o),e(j_,oN),e(oN,G6o),e(j_,O6o),e(z,V6o),e(z,D_),e(D_,sle),e(sle,X6o),e(D_,z6o),e(D_,rN),e(rN,Q6o),e(D_,W6o),e(z,H6o),e(z,G_),e(G_,lle),e(lle,U6o),e(G_,J6o),e(G_,tN),e(tN,Y6o),e(G_,K6o),e(z,Z6o),e(z,O_),e(O_,ile),e(ile,eTo),e(O_,oTo),e(O_,aN),e(aN,rTo),e(O_,tTo),e(Ue,aTo),e(Ue,V_),e(V_,nTo),e(V_,dle),e(dle,sTo),e(V_,lTo),e(V_,cle),e(cle,iTo),e(Ue,dTo),M(X_,Ue,null),b(f,eBe,_),b(f,Ci,_),e(Ci,z_),e(z_,fle),M(r0,fle,null),e(Ci,cTo),e(Ci,mle),e(mle,fTo),b(f,oBe,_),b(f,$o,_),M(t0,$o,null),e($o,mTo),e($o,wi),e(wi,gTo),e(wi,nN),e(nN,hTo),e(wi,pTo),e(wi,sN),e(sN,uTo),e(wi,_To),e($o,bTo),e($o,a0),e(a0,vTo),e(a0,gle),e(gle,FTo),e(a0,TTo),e($o,MTo),e($o,rt),M(n0,rt,null),e(rt,ETo),e(rt,hle),e(hle,CTo),e(rt,wTo),e(rt,Ai),e(Ai,ATo),e(Ai,ple),e(ple,yTo),e(Ai,LTo),e(Ai,lN),e(lN,xTo),e(Ai,$To),e(rt,kTo),M(Q_,rt,null),e($o,STo),e($o,Je),M(s0,Je,null),e(Je,RTo),e(Je,ule),e(ule,BTo),e(Je,PTo),e(Je,Aa),e(Aa,ITo),e(Aa,_le),e(_le,qTo),e(Aa,NTo),e(Aa,ble),e(ble,jTo),e(Aa,DTo),e(Aa,vle),e(vle,GTo),e(Aa,OTo),e(Je,VTo),e(Je,Q),e(Q,W_),e(W_,Fle),e(Fle,XTo),e(W_,zTo),e(W_,iN),e(iN,QTo),e(W_,WTo),e(Q,HTo),e(Q,H_),e(H_,Tle),e(Tle,UTo),e(H_,JTo),e(H_,dN),e(dN,YTo),e(H_,KTo),e(Q,ZTo),e(Q,U_),e(U_,Mle),e(Mle,eMo),e(U_,oMo),e(U_,cN),e(cN,rMo),e(U_,tMo),e(Q,aMo),e(Q,J_),e(J_,Ele),e(Ele,nMo),e(J_,sMo),e(J_,fN),e(fN,lMo),e(J_,iMo),e(Q,dMo),e(Q,Y_),e(Y_,Cle),e(Cle,cMo),e(Y_,fMo),e(Y_,mN),e(mN,mMo),e(Y_,gMo),e(Q,hMo),e(Q,K_),e(K_,wle),e(wle,pMo),e(K_,uMo),e(K_,gN),e(gN,_Mo),e(K_,bMo),e(Q,vMo),e(Q,Z_),e(Z_,Ale),e(Ale,FMo),e(Z_,TMo),e(Z_,hN),e(hN,MMo),e(Z_,EMo),e(Q,CMo),e(Q,e1),e(e1,yle),e(yle,wMo),e(e1,AMo),e(e1,pN),e(pN,yMo),e(e1,LMo),e(Q,xMo),e(Q,o1),e(o1,Lle),e(Lle,$Mo),e(o1,kMo),e(o1,uN),e(uN,SMo),e(o1,RMo),e(Q,BMo),e(Q,r1),e(r1,xle),e(xle,PMo),e(r1,IMo),e(r1,_N),e(_N,qMo),e(r1,NMo),e(Q,jMo),e(Q,t1),e(t1,$le),e($le,DMo),e(t1,GMo),e(t1,bN),e(bN,OMo),e(t1,VMo),e(Q,XMo),e(Q,a1),e(a1,kle),e(kle,zMo),e(a1,QMo),e(a1,vN),e(vN,WMo),e(a1,HMo),e(Q,UMo),e(Q,n1),e(n1,Sle),e(Sle,JMo),e(n1,YMo),e(n1,FN),e(FN,KMo),e(n1,ZMo),e(Q,e4o),e(Q,s1),e(s1,Rle),e(Rle,o4o),e(s1,r4o),e(s1,TN),e(TN,t4o),e(s1,a4o),e(Q,n4o),e(Q,l1),e(l1,Ble),e(Ble,s4o),e(l1,l4o),e(l1,MN),e(MN,i4o),e(l1,d4o),e(Q,c4o),e(Q,i1),e(i1,Ple),e(Ple,f4o),e(i1,m4o),e(i1,EN),e(EN,g4o),e(i1,h4o),e(Q,p4o),e(Q,d1),e(d1,Ile),e(Ile,u4o),e(d1,_4o),e(d1,CN),e(CN,b4o),e(d1,v4o),e(Q,F4o),e(Q,c1),e(c1,qle),e(qle,T4o),e(c1,M4o),e(c1,wN),e(wN,E4o),e(c1,C4o),e(Q,w4o),e(Q,f1),e(f1,Nle),e(Nle,A4o),e(f1,y4o),e(f1,AN),e(AN,L4o),e(f1,x4o),e(Q,$4o),e(Q,m1),e(m1,jle),e(jle,k4o),e(m1,S4o),e(m1,yN),e(yN,R4o),e(m1,B4o),e(Q,P4o),e(Q,g1),e(g1,Dle),e(Dle,I4o),e(g1,q4o),e(g1,LN),e(LN,N4o),e(g1,j4o),e(Q,D4o),e(Q,h1),e(h1,Gle),e(Gle,G4o),e(h1,O4o),e(h1,xN),e(xN,V4o),e(h1,X4o),e(Q,z4o),e(Q,p1),e(p1,Ole),e(Ole,Q4o),e(p1,W4o),e(p1,$N),e($N,H4o),e(p1,U4o),e(Q,J4o),e(Q,u1),e(u1,Vle),e(Vle,Y4o),e(u1,K4o),e(u1,kN),e(kN,Z4o),e(u1,eEo),e(Q,oEo),e(Q,_1),e(_1,Xle),e(Xle,rEo),e(_1,tEo),e(_1,SN),e(SN,aEo),e(_1,nEo),e(Q,sEo),e(Q,b1),e(b1,zle),e(zle,lEo),e(b1,iEo),e(b1,RN),e(RN,dEo),e(b1,cEo),e(Q,fEo),e(Q,v1),e(v1,Qle),e(Qle,mEo),e(v1,gEo),e(v1,BN),e(BN,hEo),e(v1,pEo),e(Q,uEo),e(Q,F1),e(F1,Wle),e(Wle,_Eo),e(F1,bEo),e(F1,PN),e(PN,vEo),e(F1,FEo),e(Q,TEo),e(Q,T1),e(T1,Hle),e(Hle,MEo),e(T1,EEo),e(T1,IN),e(IN,CEo),e(T1,wEo),e(Q,AEo),e(Q,M1),e(M1,Ule),e(Ule,yEo),e(M1,LEo),e(M1,qN),e(qN,xEo),e(M1,$Eo),e(Q,kEo),e(Q,E1),e(E1,Jle),e(Jle,SEo),e(E1,REo),e(E1,Yle),e(Yle,BEo),e(E1,PEo),e(Q,IEo),e(Q,C1),e(C1,Kle),e(Kle,qEo),e(C1,NEo),e(C1,NN),e(NN,jEo),e(C1,DEo),e(Q,GEo),e(Q,w1),e(w1,Zle),e(Zle,OEo),e(w1,VEo),e(w1,jN),e(jN,XEo),e(w1,zEo),e(Q,QEo),e(Q,A1),e(A1,eie),e(eie,WEo),e(A1,HEo),e(A1,DN),e(DN,UEo),e(A1,JEo),e(Q,YEo),e(Q,y1),e(y1,oie),e(oie,KEo),e(y1,ZEo),e(y1,GN),e(GN,eCo),e(y1,oCo),e(Je,rCo),e(Je,L1),e(L1,tCo),e(L1,rie),e(rie,aCo),e(L1,nCo),e(L1,tie),e(tie,sCo),e(Je,lCo),M(x1,Je,null),b(f,rBe,_),b(f,yi,_),e(yi,$1),e($1,aie),M(l0,aie,null),e(yi,iCo),e(yi,nie),e(nie,dCo),b(f,tBe,_),b(f,ko,_),M(i0,ko,null),e(ko,cCo),e(ko,Li),e(Li,fCo),e(Li,ON),e(ON,mCo),e(Li,gCo),e(Li,VN),e(VN,hCo),e(Li,pCo),e(ko,uCo),e(ko,d0),e(d0,_Co),e(d0,sie),e(sie,bCo),e(d0,vCo),e(ko,FCo),e(ko,tt),M(c0,tt,null),e(tt,TCo),e(tt,lie),e(lie,MCo),e(tt,ECo),e(tt,xi),e(xi,CCo),e(xi,iie),e(iie,wCo),e(xi,ACo),e(xi,XN),e(XN,yCo),e(xi,LCo),e(tt,xCo),M(k1,tt,null),e(ko,$Co),e(ko,Ye),M(f0,Ye,null),e(Ye,kCo),e(Ye,die),e(die,SCo),e(Ye,RCo),e(Ye,ya),e(ya,BCo),e(ya,cie),e(cie,PCo),e(ya,ICo),e(ya,fie),e(fie,qCo),e(ya,NCo),e(ya,mie),e(mie,jCo),e(ya,DCo),e(Ye,GCo),e(Ye,he),e(he,S1),e(S1,gie),e(gie,OCo),e(S1,VCo),e(S1,zN),e(zN,XCo),e(S1,zCo),e(he,QCo),e(he,R1),e(R1,hie),e(hie,WCo),e(R1,HCo),e(R1,QN),e(QN,UCo),e(R1,JCo),e(he,YCo),e(he,B1),e(B1,pie),e(pie,KCo),e(B1,ZCo),e(B1,WN),e(WN,e3o),e(B1,o3o),e(he,r3o),e(he,P1),e(P1,uie),e(uie,t3o),e(P1,a3o),e(P1,HN),e(HN,n3o),e(P1,s3o),e(he,l3o),e(he,I1),e(I1,_ie),e(_ie,i3o),e(I1,d3o),e(I1,UN),e(UN,c3o),e(I1,f3o),e(he,m3o),e(he,q1),e(q1,bie),e(bie,g3o),e(q1,h3o),e(q1,JN),e(JN,p3o),e(q1,u3o),e(he,_3o),e(he,N1),e(N1,vie),e(vie,b3o),e(N1,v3o),e(N1,YN),e(YN,F3o),e(N1,T3o),e(he,M3o),e(he,j1),e(j1,Fie),e(Fie,E3o),e(j1,C3o),e(j1,KN),e(KN,w3o),e(j1,A3o),e(he,y3o),e(he,D1),e(D1,Tie),e(Tie,L3o),e(D1,x3o),e(D1,ZN),e(ZN,$3o),e(D1,k3o),e(he,S3o),e(he,G1),e(G1,Mie),e(Mie,R3o),e(G1,B3o),e(G1,ej),e(ej,P3o),e(G1,I3o),e(he,q3o),e(he,O1),e(O1,Eie),e(Eie,N3o),e(O1,j3o),e(O1,oj),e(oj,D3o),e(O1,G3o),e(he,O3o),e(he,V1),e(V1,Cie),e(Cie,V3o),e(V1,X3o),e(V1,rj),e(rj,z3o),e(V1,Q3o),e(he,W3o),e(he,X1),e(X1,wie),e(wie,H3o),e(X1,U3o),e(X1,tj),e(tj,J3o),e(X1,Y3o),e(he,K3o),e(he,z1),e(z1,Aie),e(Aie,Z3o),e(z1,ewo),e(z1,aj),e(aj,owo),e(z1,rwo),e(he,two),e(he,Q1),e(Q1,yie),e(yie,awo),e(Q1,nwo),e(Q1,nj),e(nj,swo),e(Q1,lwo),e(he,iwo),e(he,W1),e(W1,Lie),e(Lie,dwo),e(W1,cwo),e(W1,sj),e(sj,fwo),e(W1,mwo),e(he,gwo),e(he,H1),e(H1,xie),e(xie,hwo),e(H1,pwo),e(H1,lj),e(lj,uwo),e(H1,_wo),e(Ye,bwo),e(Ye,U1),e(U1,vwo),e(U1,$ie),e($ie,Fwo),e(U1,Two),e(U1,kie),e(kie,Mwo),e(Ye,Ewo),M(J1,Ye,null),b(f,aBe,_),b(f,$i,_),e($i,Y1),e(Y1,Sie),M(m0,Sie,null),e($i,Cwo),e($i,Rie),e(Rie,wwo),b(f,nBe,_),b(f,So,_),M(g0,So,null),e(So,Awo),e(So,ki),e(ki,ywo),e(ki,ij),e(ij,Lwo),e(ki,xwo),e(ki,dj),e(dj,$wo),e(ki,kwo),e(So,Swo),e(So,h0),e(h0,Rwo),e(h0,Bie),e(Bie,Bwo),e(h0,Pwo),e(So,Iwo),e(So,at),M(p0,at,null),e(at,qwo),e(at,Pie),e(Pie,Nwo),e(at,jwo),e(at,Si),e(Si,Dwo),e(Si,Iie),e(Iie,Gwo),e(Si,Owo),e(Si,cj),e(cj,Vwo),e(Si,Xwo),e(at,zwo),M(K1,at,null),e(So,Qwo),e(So,Ke),M(u0,Ke,null),e(Ke,Wwo),e(Ke,qie),e(qie,Hwo),e(Ke,Uwo),e(Ke,La),e(La,Jwo),e(La,Nie),e(Nie,Ywo),e(La,Kwo),e(La,jie),e(jie,Zwo),e(La,eAo),e(La,Die),e(Die,oAo),e(La,rAo),e(Ke,tAo),e(Ke,q),e(q,Z1),e(Z1,Gie),e(Gie,aAo),e(Z1,nAo),e(Z1,fj),e(fj,sAo),e(Z1,lAo),e(q,iAo),e(q,e9),e(e9,Oie),e(Oie,dAo),e(e9,cAo),e(e9,mj),e(mj,fAo),e(e9,mAo),e(q,gAo),e(q,o9),e(o9,Vie),e(Vie,hAo),e(o9,pAo),e(o9,gj),e(gj,uAo),e(o9,_Ao),e(q,bAo),e(q,r9),e(r9,Xie),e(Xie,vAo),e(r9,FAo),e(r9,hj),e(hj,TAo),e(r9,MAo),e(q,EAo),e(q,t9),e(t9,zie),e(zie,CAo),e(t9,wAo),e(t9,pj),e(pj,AAo),e(t9,yAo),e(q,LAo),e(q,a9),e(a9,Qie),e(Qie,xAo),e(a9,$Ao),e(a9,uj),e(uj,kAo),e(a9,SAo),e(q,RAo),e(q,n9),e(n9,Wie),e(Wie,BAo),e(n9,PAo),e(n9,_j),e(_j,IAo),e(n9,qAo),e(q,NAo),e(q,s9),e(s9,Hie),e(Hie,jAo),e(s9,DAo),e(s9,bj),e(bj,GAo),e(s9,OAo),e(q,VAo),e(q,l9),e(l9,Uie),e(Uie,XAo),e(l9,zAo),e(l9,vj),e(vj,QAo),e(l9,WAo),e(q,HAo),e(q,i9),e(i9,Jie),e(Jie,UAo),e(i9,JAo),e(i9,Fj),e(Fj,YAo),e(i9,KAo),e(q,ZAo),e(q,d9),e(d9,Yie),e(Yie,e0o),e(d9,o0o),e(d9,Tj),e(Tj,r0o),e(d9,t0o),e(q,a0o),e(q,c9),e(c9,Kie),e(Kie,n0o),e(c9,s0o),e(c9,Mj),e(Mj,l0o),e(c9,i0o),e(q,d0o),e(q,f9),e(f9,Zie),e(Zie,c0o),e(f9,f0o),e(f9,Ej),e(Ej,m0o),e(f9,g0o),e(q,h0o),e(q,m9),e(m9,ede),e(ede,p0o),e(m9,u0o),e(m9,Cj),e(Cj,_0o),e(m9,b0o),e(q,v0o),e(q,g9),e(g9,ode),e(ode,F0o),e(g9,T0o),e(g9,wj),e(wj,M0o),e(g9,E0o),e(q,C0o),e(q,h9),e(h9,rde),e(rde,w0o),e(h9,A0o),e(h9,Aj),e(Aj,y0o),e(h9,L0o),e(q,x0o),e(q,p9),e(p9,tde),e(tde,$0o),e(p9,k0o),e(p9,yj),e(yj,S0o),e(p9,R0o),e(q,B0o),e(q,u9),e(u9,ade),e(ade,P0o),e(u9,I0o),e(u9,Lj),e(Lj,q0o),e(u9,N0o),e(q,j0o),e(q,_9),e(_9,nde),e(nde,D0o),e(_9,G0o),e(_9,xj),e(xj,O0o),e(_9,V0o),e(q,X0o),e(q,b9),e(b9,sde),e(sde,z0o),e(b9,Q0o),e(b9,$j),e($j,W0o),e(b9,H0o),e(q,U0o),e(q,v9),e(v9,lde),e(lde,J0o),e(v9,Y0o),e(v9,kj),e(kj,K0o),e(v9,Z0o),e(q,eyo),e(q,F9),e(F9,ide),e(ide,oyo),e(F9,ryo),e(F9,Sj),e(Sj,tyo),e(F9,ayo),e(q,nyo),e(q,T9),e(T9,dde),e(dde,syo),e(T9,lyo),e(T9,Rj),e(Rj,iyo),e(T9,dyo),e(q,cyo),e(q,M9),e(M9,cde),e(cde,fyo),e(M9,myo),e(M9,Bj),e(Bj,gyo),e(M9,hyo),e(q,pyo),e(q,E9),e(E9,fde),e(fde,uyo),e(E9,_yo),e(E9,Pj),e(Pj,byo),e(E9,vyo),e(q,Fyo),e(q,C9),e(C9,mde),e(mde,Tyo),e(C9,Myo),e(C9,Ij),e(Ij,Eyo),e(C9,Cyo),e(q,wyo),e(q,w9),e(w9,gde),e(gde,Ayo),e(w9,yyo),e(w9,qj),e(qj,Lyo),e(w9,xyo),e(q,$yo),e(q,A9),e(A9,hde),e(hde,kyo),e(A9,Syo),e(A9,Nj),e(Nj,Ryo),e(A9,Byo),e(q,Pyo),e(q,y9),e(y9,pde),e(pde,Iyo),e(y9,qyo),e(y9,jj),e(jj,Nyo),e(y9,jyo),e(q,Dyo),e(q,L9),e(L9,ude),e(ude,Gyo),e(L9,Oyo),e(L9,Dj),e(Dj,Vyo),e(L9,Xyo),e(q,zyo),e(q,x9),e(x9,_de),e(_de,Qyo),e(x9,Wyo),e(x9,Gj),e(Gj,Hyo),e(x9,Uyo),e(q,Jyo),e(q,$9),e($9,bde),e(bde,Yyo),e($9,Kyo),e($9,Oj),e(Oj,Zyo),e($9,eLo),e(q,oLo),e(q,k9),e(k9,vde),e(vde,rLo),e(k9,tLo),e(k9,Vj),e(Vj,aLo),e(k9,nLo),e(q,sLo),e(q,S9),e(S9,Fde),e(Fde,lLo),e(S9,iLo),e(S9,Xj),e(Xj,dLo),e(S9,cLo),e(q,fLo),e(q,R9),e(R9,Tde),e(Tde,mLo),e(R9,gLo),e(R9,zj),e(zj,hLo),e(R9,pLo),e(q,uLo),e(q,B9),e(B9,Mde),e(Mde,_Lo),e(B9,bLo),e(B9,Qj),e(Qj,vLo),e(B9,FLo),e(q,TLo),e(q,P9),e(P9,Ede),e(Ede,MLo),e(P9,ELo),e(P9,Wj),e(Wj,CLo),e(P9,wLo),e(q,ALo),e(q,I9),e(I9,Cde),e(Cde,yLo),e(I9,LLo),e(I9,Hj),e(Hj,xLo),e(I9,$Lo),e(q,kLo),e(q,q9),e(q9,wde),e(wde,SLo),e(q9,RLo),e(q9,Uj),e(Uj,BLo),e(q9,PLo),e(q,ILo),e(q,N9),e(N9,Ade),e(Ade,qLo),e(N9,NLo),e(N9,Jj),e(Jj,jLo),e(N9,DLo),e(q,GLo),e(q,j9),e(j9,yde),e(yde,OLo),e(j9,VLo),e(j9,Yj),e(Yj,XLo),e(j9,zLo),e(q,QLo),e(q,D9),e(D9,Lde),e(Lde,WLo),e(D9,HLo),e(D9,Kj),e(Kj,ULo),e(D9,JLo),e(q,YLo),e(q,G9),e(G9,xde),e(xde,KLo),e(G9,ZLo),e(G9,Zj),e(Zj,e8o),e(G9,o8o),e(q,r8o),e(q,O9),e(O9,$de),e($de,t8o),e(O9,a8o),e(O9,eD),e(eD,n8o),e(O9,s8o),e(q,l8o),e(q,V9),e(V9,kde),e(kde,i8o),e(V9,d8o),e(V9,oD),e(oD,c8o),e(V9,f8o),e(q,m8o),e(q,X9),e(X9,Sde),e(Sde,g8o),e(X9,h8o),e(X9,rD),e(rD,p8o),e(X9,u8o),e(q,_8o),e(q,z9),e(z9,Rde),e(Rde,b8o),e(z9,v8o),e(z9,tD),e(tD,F8o),e(z9,T8o),e(Ke,M8o),e(Ke,Q9),e(Q9,E8o),e(Q9,Bde),e(Bde,C8o),e(Q9,w8o),e(Q9,Pde),e(Pde,A8o),e(Ke,y8o),M(W9,Ke,null),b(f,sBe,_),b(f,Ri,_),e(Ri,H9),e(H9,Ide),M(_0,Ide,null),e(Ri,L8o),e(Ri,qde),e(qde,x8o),b(f,lBe,_),b(f,Ro,_),M(b0,Ro,null),e(Ro,$8o),e(Ro,Bi),e(Bi,k8o),e(Bi,aD),e(aD,S8o),e(Bi,R8o),e(Bi,nD),e(nD,B8o),e(Bi,P8o),e(Ro,I8o),e(Ro,v0),e(v0,q8o),e(v0,Nde),e(Nde,N8o),e(v0,j8o),e(Ro,D8o),e(Ro,nt),M(F0,nt,null),e(nt,G8o),e(nt,jde),e(jde,O8o),e(nt,V8o),e(nt,Pi),e(Pi,X8o),e(Pi,Dde),e(Dde,z8o),e(Pi,Q8o),e(Pi,sD),e(sD,W8o),e(Pi,H8o),e(nt,U8o),M(U9,nt,null),e(Ro,J8o),e(Ro,Ze),M(T0,Ze,null),e(Ze,Y8o),e(Ze,Gde),e(Gde,K8o),e(Ze,Z8o),e(Ze,xa),e(xa,e7o),e(xa,Ode),e(Ode,o7o),e(xa,r7o),e(xa,Vde),e(Vde,t7o),e(xa,a7o),e(xa,Xde),e(Xde,n7o),e(xa,s7o),e(Ze,l7o),e(Ze,Y),e(Y,J9),e(J9,zde),e(zde,i7o),e(J9,d7o),e(J9,lD),e(lD,c7o),e(J9,f7o),e(Y,m7o),e(Y,Y9),e(Y9,Qde),e(Qde,g7o),e(Y9,h7o),e(Y9,iD),e(iD,p7o),e(Y9,u7o),e(Y,_7o),e(Y,K9),e(K9,Wde),e(Wde,b7o),e(K9,v7o),e(K9,dD),e(dD,F7o),e(K9,T7o),e(Y,M7o),e(Y,Z9),e(Z9,Hde),e(Hde,E7o),e(Z9,C7o),e(Z9,cD),e(cD,w7o),e(Z9,A7o),e(Y,y7o),e(Y,eb),e(eb,Ude),e(Ude,L7o),e(eb,x7o),e(eb,fD),e(fD,$7o),e(eb,k7o),e(Y,S7o),e(Y,ob),e(ob,Jde),e(Jde,R7o),e(ob,B7o),e(ob,mD),e(mD,P7o),e(ob,I7o),e(Y,q7o),e(Y,rb),e(rb,Yde),e(Yde,N7o),e(rb,j7o),e(rb,gD),e(gD,D7o),e(rb,G7o),e(Y,O7o),e(Y,tb),e(tb,Kde),e(Kde,V7o),e(tb,X7o),e(tb,hD),e(hD,z7o),e(tb,Q7o),e(Y,W7o),e(Y,ab),e(ab,Zde),e(Zde,H7o),e(ab,U7o),e(ab,pD),e(pD,J7o),e(ab,Y7o),e(Y,K7o),e(Y,nb),e(nb,ece),e(ece,Z7o),e(nb,exo),e(nb,uD),e(uD,oxo),e(nb,rxo),e(Y,txo),e(Y,sb),e(sb,oce),e(oce,axo),e(sb,nxo),e(sb,_D),e(_D,sxo),e(sb,lxo),e(Y,ixo),e(Y,lb),e(lb,rce),e(rce,dxo),e(lb,cxo),e(lb,bD),e(bD,fxo),e(lb,mxo),e(Y,gxo),e(Y,ib),e(ib,tce),e(tce,hxo),e(ib,pxo),e(ib,vD),e(vD,uxo),e(ib,_xo),e(Y,bxo),e(Y,db),e(db,ace),e(ace,vxo),e(db,Fxo),e(db,FD),e(FD,Txo),e(db,Mxo),e(Y,Exo),e(Y,cb),e(cb,nce),e(nce,Cxo),e(cb,wxo),e(cb,TD),e(TD,Axo),e(cb,yxo),e(Y,Lxo),e(Y,fb),e(fb,sce),e(sce,xxo),e(fb,$xo),e(fb,MD),e(MD,kxo),e(fb,Sxo),e(Y,Rxo),e(Y,mb),e(mb,lce),e(lce,Bxo),e(mb,Pxo),e(mb,ED),e(ED,Ixo),e(mb,qxo),e(Y,Nxo),e(Y,gb),e(gb,ice),e(ice,jxo),e(gb,Dxo),e(gb,CD),e(CD,Gxo),e(gb,Oxo),e(Y,Vxo),e(Y,hb),e(hb,dce),e(dce,Xxo),e(hb,zxo),e(hb,wD),e(wD,Qxo),e(hb,Wxo),e(Y,Hxo),e(Y,pb),e(pb,cce),e(cce,Uxo),e(pb,Jxo),e(pb,AD),e(AD,Yxo),e(pb,Kxo),e(Y,Zxo),e(Y,ub),e(ub,fce),e(fce,e$o),e(ub,o$o),e(ub,yD),e(yD,r$o),e(ub,t$o),e(Y,a$o),e(Y,_b),e(_b,mce),e(mce,n$o),e(_b,s$o),e(_b,LD),e(LD,l$o),e(_b,i$o),e(Y,d$o),e(Y,bb),e(bb,gce),e(gce,c$o),e(bb,f$o),e(bb,xD),e(xD,m$o),e(bb,g$o),e(Y,h$o),e(Y,vb),e(vb,hce),e(hce,p$o),e(vb,u$o),e(vb,$D),e($D,_$o),e(vb,b$o),e(Y,v$o),e(Y,Fb),e(Fb,pce),e(pce,F$o),e(Fb,T$o),e(Fb,kD),e(kD,M$o),e(Fb,E$o),e(Y,C$o),e(Y,Tb),e(Tb,uce),e(uce,w$o),e(Tb,A$o),e(Tb,SD),e(SD,y$o),e(Tb,L$o),e(Y,x$o),e(Y,Mb),e(Mb,_ce),e(_ce,$$o),e(Mb,k$o),e(Mb,RD),e(RD,S$o),e(Mb,R$o),e(Y,B$o),e(Y,Eb),e(Eb,bce),e(bce,P$o),e(Eb,I$o),e(Eb,BD),e(BD,q$o),e(Eb,N$o),e(Ze,j$o),e(Ze,Cb),e(Cb,D$o),e(Cb,vce),e(vce,G$o),e(Cb,O$o),e(Cb,Fce),e(Fce,V$o),e(Ze,X$o),M(wb,Ze,null),b(f,iBe,_),b(f,Ii,_),e(Ii,Ab),e(Ab,Tce),M(M0,Tce,null),e(Ii,z$o),e(Ii,Mce),e(Mce,Q$o),b(f,dBe,_),b(f,Bo,_),M(E0,Bo,null),e(Bo,W$o),e(Bo,qi),e(qi,H$o),e(qi,PD),e(PD,U$o),e(qi,J$o),e(qi,ID),e(ID,Y$o),e(qi,K$o),e(Bo,Z$o),e(Bo,C0),e(C0,eko),e(C0,Ece),e(Ece,oko),e(C0,rko),e(Bo,tko),e(Bo,st),M(w0,st,null),e(st,ako),e(st,Cce),e(Cce,nko),e(st,sko),e(st,Ni),e(Ni,lko),e(Ni,wce),e(wce,iko),e(Ni,dko),e(Ni,qD),e(qD,cko),e(Ni,fko),e(st,mko),M(yb,st,null),e(Bo,gko),e(Bo,eo),M(A0,eo,null),e(eo,hko),e(eo,Ace),e(Ace,pko),e(eo,uko),e(eo,$a),e($a,_ko),e($a,yce),e(yce,bko),e($a,vko),e($a,Lce),e(Lce,Fko),e($a,Tko),e($a,xce),e(xce,Mko),e($a,Eko),e(eo,Cko),e(eo,Ur),e(Ur,Lb),e(Lb,$ce),e($ce,wko),e(Lb,Ako),e(Lb,ND),e(ND,yko),e(Lb,Lko),e(Ur,xko),e(Ur,xb),e(xb,kce),e(kce,$ko),e(xb,kko),e(xb,jD),e(jD,Sko),e(xb,Rko),e(Ur,Bko),e(Ur,$b),e($b,Sce),e(Sce,Pko),e($b,Iko),e($b,DD),e(DD,qko),e($b,Nko),e(Ur,jko),e(Ur,kb),e(kb,Rce),e(Rce,Dko),e(kb,Gko),e(kb,GD),e(GD,Oko),e(kb,Vko),e(Ur,Xko),e(Ur,Sb),e(Sb,Bce),e(Bce,zko),e(Sb,Qko),e(Sb,OD),e(OD,Wko),e(Sb,Hko),e(eo,Uko),e(eo,Rb),e(Rb,Jko),e(Rb,Pce),e(Pce,Yko),e(Rb,Kko),e(Rb,Ice),e(Ice,Zko),e(eo,eSo),M(Bb,eo,null),b(f,cBe,_),b(f,ji,_),e(ji,Pb),e(Pb,qce),M(y0,qce,null),e(ji,oSo),e(ji,Nce),e(Nce,rSo),b(f,fBe,_),b(f,Po,_),M(L0,Po,null),e(Po,tSo),e(Po,Di),e(Di,aSo),e(Di,VD),e(VD,nSo),e(Di,sSo),e(Di,XD),e(XD,lSo),e(Di,iSo),e(Po,dSo),e(Po,x0),e(x0,cSo),e(x0,jce),e(jce,fSo),e(x0,mSo),e(Po,gSo),e(Po,lt),M($0,lt,null),e(lt,hSo),e(lt,Dce),e(Dce,pSo),e(lt,uSo),e(lt,Gi),e(Gi,_So),e(Gi,Gce),e(Gce,bSo),e(Gi,vSo),e(Gi,zD),e(zD,FSo),e(Gi,TSo),e(lt,MSo),M(Ib,lt,null),e(Po,ESo),e(Po,oo),M(k0,oo,null),e(oo,CSo),e(oo,Oce),e(Oce,wSo),e(oo,ASo),e(oo,ka),e(ka,ySo),e(ka,Vce),e(Vce,LSo),e(ka,xSo),e(ka,Xce),e(Xce,$So),e(ka,kSo),e(ka,zce),e(zce,SSo),e(ka,RSo),e(oo,BSo),e(oo,U),e(U,qb),e(qb,Qce),e(Qce,PSo),e(qb,ISo),e(qb,QD),e(QD,qSo),e(qb,NSo),e(U,jSo),e(U,Nb),e(Nb,Wce),e(Wce,DSo),e(Nb,GSo),e(Nb,WD),e(WD,OSo),e(Nb,VSo),e(U,XSo),e(U,jb),e(jb,Hce),e(Hce,zSo),e(jb,QSo),e(jb,HD),e(HD,WSo),e(jb,HSo),e(U,USo),e(U,Db),e(Db,Uce),e(Uce,JSo),e(Db,YSo),e(Db,UD),e(UD,KSo),e(Db,ZSo),e(U,eRo),e(U,Gb),e(Gb,Jce),e(Jce,oRo),e(Gb,rRo),e(Gb,JD),e(JD,tRo),e(Gb,aRo),e(U,nRo),e(U,Ob),e(Ob,Yce),e(Yce,sRo),e(Ob,lRo),e(Ob,YD),e(YD,iRo),e(Ob,dRo),e(U,cRo),e(U,Vb),e(Vb,Kce),e(Kce,fRo),e(Vb,mRo),e(Vb,KD),e(KD,gRo),e(Vb,hRo),e(U,pRo),e(U,Xb),e(Xb,Zce),e(Zce,uRo),e(Xb,_Ro),e(Xb,ZD),e(ZD,bRo),e(Xb,vRo),e(U,FRo),e(U,zb),e(zb,efe),e(efe,TRo),e(zb,MRo),e(zb,eG),e(eG,ERo),e(zb,CRo),e(U,wRo),e(U,Qb),e(Qb,ofe),e(ofe,ARo),e(Qb,yRo),e(Qb,oG),e(oG,LRo),e(Qb,xRo),e(U,$Ro),e(U,Wb),e(Wb,rfe),e(rfe,kRo),e(Wb,SRo),e(Wb,rG),e(rG,RRo),e(Wb,BRo),e(U,PRo),e(U,Hb),e(Hb,tfe),e(tfe,IRo),e(Hb,qRo),e(Hb,tG),e(tG,NRo),e(Hb,jRo),e(U,DRo),e(U,Ub),e(Ub,afe),e(afe,GRo),e(Ub,ORo),e(Ub,aG),e(aG,VRo),e(Ub,XRo),e(U,zRo),e(U,Jb),e(Jb,nfe),e(nfe,QRo),e(Jb,WRo),e(Jb,nG),e(nG,HRo),e(Jb,URo),e(U,JRo),e(U,Yb),e(Yb,sfe),e(sfe,YRo),e(Yb,KRo),e(Yb,sG),e(sG,ZRo),e(Yb,eBo),e(U,oBo),e(U,Kb),e(Kb,lfe),e(lfe,rBo),e(Kb,tBo),e(Kb,lG),e(lG,aBo),e(Kb,nBo),e(U,sBo),e(U,Zb),e(Zb,ife),e(ife,lBo),e(Zb,iBo),e(Zb,iG),e(iG,dBo),e(Zb,cBo),e(U,fBo),e(U,e2),e(e2,dfe),e(dfe,mBo),e(e2,gBo),e(e2,dG),e(dG,hBo),e(e2,pBo),e(U,uBo),e(U,o2),e(o2,cfe),e(cfe,_Bo),e(o2,bBo),e(o2,cG),e(cG,vBo),e(o2,FBo),e(U,TBo),e(U,r2),e(r2,ffe),e(ffe,MBo),e(r2,EBo),e(r2,fG),e(fG,CBo),e(r2,wBo),e(U,ABo),e(U,t2),e(t2,mfe),e(mfe,yBo),e(t2,LBo),e(t2,mG),e(mG,xBo),e(t2,$Bo),e(U,kBo),e(U,a2),e(a2,gfe),e(gfe,SBo),e(a2,RBo),e(a2,gG),e(gG,BBo),e(a2,PBo),e(U,IBo),e(U,n2),e(n2,hfe),e(hfe,qBo),e(n2,NBo),e(n2,hG),e(hG,jBo),e(n2,DBo),e(U,GBo),e(U,s2),e(s2,pfe),e(pfe,OBo),e(s2,VBo),e(s2,pG),e(pG,XBo),e(s2,zBo),e(U,QBo),e(U,l2),e(l2,ufe),e(ufe,WBo),e(l2,HBo),e(l2,uG),e(uG,UBo),e(l2,JBo),e(U,YBo),e(U,i2),e(i2,_fe),e(_fe,KBo),e(i2,ZBo),e(i2,_G),e(_G,ePo),e(i2,oPo),e(U,rPo),e(U,d2),e(d2,bfe),e(bfe,tPo),e(d2,aPo),e(d2,bG),e(bG,nPo),e(d2,sPo),e(U,lPo),e(U,c2),e(c2,vfe),e(vfe,iPo),e(c2,dPo),e(c2,vG),e(vG,cPo),e(c2,fPo),e(U,mPo),e(U,f2),e(f2,Ffe),e(Ffe,gPo),e(f2,hPo),e(f2,FG),e(FG,pPo),e(f2,uPo),e(U,_Po),e(U,m2),e(m2,Tfe),e(Tfe,bPo),e(m2,vPo),e(m2,TG),e(TG,FPo),e(m2,TPo),e(U,MPo),e(U,g2),e(g2,Mfe),e(Mfe,EPo),e(g2,CPo),e(g2,MG),e(MG,wPo),e(g2,APo),e(U,yPo),e(U,h2),e(h2,Efe),e(Efe,LPo),e(h2,xPo),e(h2,EG),e(EG,$Po),e(h2,kPo),e(U,SPo),e(U,p2),e(p2,Cfe),e(Cfe,RPo),e(p2,BPo),e(p2,CG),e(CG,PPo),e(p2,IPo),e(oo,qPo),e(oo,u2),e(u2,NPo),e(u2,wfe),e(wfe,jPo),e(u2,DPo),e(u2,Afe),e(Afe,GPo),e(oo,OPo),M(_2,oo,null),b(f,mBe,_),b(f,Oi,_),e(Oi,b2),e(b2,yfe),M(S0,yfe,null),e(Oi,VPo),e(Oi,Lfe),e(Lfe,XPo),b(f,gBe,_),b(f,Io,_),M(R0,Io,null),e(Io,zPo),e(Io,Vi),e(Vi,QPo),e(Vi,wG),e(wG,WPo),e(Vi,HPo),e(Vi,AG),e(AG,UPo),e(Vi,JPo),e(Io,YPo),e(Io,B0),e(B0,KPo),e(B0,xfe),e(xfe,ZPo),e(B0,eIo),e(Io,oIo),e(Io,it),M(P0,it,null),e(it,rIo),e(it,$fe),e($fe,tIo),e(it,aIo),e(it,Xi),e(Xi,nIo),e(Xi,kfe),e(kfe,sIo),e(Xi,lIo),e(Xi,yG),e(yG,iIo),e(Xi,dIo),e(it,cIo),M(v2,it,null),e(Io,fIo),e(Io,ro),M(I0,ro,null),e(ro,mIo),e(ro,Sfe),e(Sfe,gIo),e(ro,hIo),e(ro,Sa),e(Sa,pIo),e(Sa,Rfe),e(Rfe,uIo),e(Sa,_Io),e(Sa,Bfe),e(Bfe,bIo),e(Sa,vIo),e(Sa,Pfe),e(Pfe,FIo),e(Sa,TIo),e(ro,MIo),e(ro,O),e(O,F2),e(F2,Ife),e(Ife,EIo),e(F2,CIo),e(F2,LG),e(LG,wIo),e(F2,AIo),e(O,yIo),e(O,T2),e(T2,qfe),e(qfe,LIo),e(T2,xIo),e(T2,xG),e(xG,$Io),e(T2,kIo),e(O,SIo),e(O,M2),e(M2,Nfe),e(Nfe,RIo),e(M2,BIo),e(M2,$G),e($G,PIo),e(M2,IIo),e(O,qIo),e(O,E2),e(E2,jfe),e(jfe,NIo),e(E2,jIo),e(E2,kG),e(kG,DIo),e(E2,GIo),e(O,OIo),e(O,C2),e(C2,Dfe),e(Dfe,VIo),e(C2,XIo),e(C2,SG),e(SG,zIo),e(C2,QIo),e(O,WIo),e(O,w2),e(w2,Gfe),e(Gfe,HIo),e(w2,UIo),e(w2,RG),e(RG,JIo),e(w2,YIo),e(O,KIo),e(O,A2),e(A2,Ofe),e(Ofe,ZIo),e(A2,eqo),e(A2,BG),e(BG,oqo),e(A2,rqo),e(O,tqo),e(O,y2),e(y2,Vfe),e(Vfe,aqo),e(y2,nqo),e(y2,PG),e(PG,sqo),e(y2,lqo),e(O,iqo),e(O,L2),e(L2,Xfe),e(Xfe,dqo),e(L2,cqo),e(L2,IG),e(IG,fqo),e(L2,mqo),e(O,gqo),e(O,x2),e(x2,zfe),e(zfe,hqo),e(x2,pqo),e(x2,qG),e(qG,uqo),e(x2,_qo),e(O,bqo),e(O,$2),e($2,Qfe),e(Qfe,vqo),e($2,Fqo),e($2,NG),e(NG,Tqo),e($2,Mqo),e(O,Eqo),e(O,k2),e(k2,Wfe),e(Wfe,Cqo),e(k2,wqo),e(k2,jG),e(jG,Aqo),e(k2,yqo),e(O,Lqo),e(O,S2),e(S2,Hfe),e(Hfe,xqo),e(S2,$qo),e(S2,DG),e(DG,kqo),e(S2,Sqo),e(O,Rqo),e(O,R2),e(R2,Ufe),e(Ufe,Bqo),e(R2,Pqo),e(R2,GG),e(GG,Iqo),e(R2,qqo),e(O,Nqo),e(O,B2),e(B2,Jfe),e(Jfe,jqo),e(B2,Dqo),e(B2,OG),e(OG,Gqo),e(B2,Oqo),e(O,Vqo),e(O,P2),e(P2,Yfe),e(Yfe,Xqo),e(P2,zqo),e(P2,VG),e(VG,Qqo),e(P2,Wqo),e(O,Hqo),e(O,I2),e(I2,Kfe),e(Kfe,Uqo),e(I2,Jqo),e(I2,XG),e(XG,Yqo),e(I2,Kqo),e(O,Zqo),e(O,q2),e(q2,Zfe),e(Zfe,eNo),e(q2,oNo),e(q2,zG),e(zG,rNo),e(q2,tNo),e(O,aNo),e(O,N2),e(N2,eme),e(eme,nNo),e(N2,sNo),e(N2,QG),e(QG,lNo),e(N2,iNo),e(O,dNo),e(O,j2),e(j2,ome),e(ome,cNo),e(j2,fNo),e(j2,WG),e(WG,mNo),e(j2,gNo),e(O,hNo),e(O,D2),e(D2,rme),e(rme,pNo),e(D2,uNo),e(D2,HG),e(HG,_No),e(D2,bNo),e(O,vNo),e(O,G2),e(G2,tme),e(tme,FNo),e(G2,TNo),e(G2,UG),e(UG,MNo),e(G2,ENo),e(O,CNo),e(O,O2),e(O2,ame),e(ame,wNo),e(O2,ANo),e(O2,JG),e(JG,yNo),e(O2,LNo),e(O,xNo),e(O,V2),e(V2,nme),e(nme,$No),e(V2,kNo),e(V2,YG),e(YG,SNo),e(V2,RNo),e(O,BNo),e(O,X2),e(X2,sme),e(sme,PNo),e(X2,INo),e(X2,KG),e(KG,qNo),e(X2,NNo),e(O,jNo),e(O,z2),e(z2,lme),e(lme,DNo),e(z2,GNo),e(z2,ZG),e(ZG,ONo),e(z2,VNo),e(O,XNo),e(O,Q2),e(Q2,ime),e(ime,zNo),e(Q2,QNo),e(Q2,eO),e(eO,WNo),e(Q2,HNo),e(O,UNo),e(O,W2),e(W2,dme),e(dme,JNo),e(W2,YNo),e(W2,oO),e(oO,KNo),e(W2,ZNo),e(O,ejo),e(O,H2),e(H2,cme),e(cme,ojo),e(H2,rjo),e(H2,rO),e(rO,tjo),e(H2,ajo),e(O,njo),e(O,U2),e(U2,fme),e(fme,sjo),e(U2,ljo),e(U2,tO),e(tO,ijo),e(U2,djo),e(O,cjo),e(O,J2),e(J2,mme),e(mme,fjo),e(J2,mjo),e(J2,aO),e(aO,gjo),e(J2,hjo),e(O,pjo),e(O,Y2),e(Y2,gme),e(gme,ujo),e(Y2,_jo),e(Y2,nO),e(nO,bjo),e(Y2,vjo),e(O,Fjo),e(O,K2),e(K2,hme),e(hme,Tjo),e(K2,Mjo),e(K2,sO),e(sO,Ejo),e(K2,Cjo),e(O,wjo),e(O,Z2),e(Z2,pme),e(pme,Ajo),e(Z2,yjo),e(Z2,lO),e(lO,Ljo),e(Z2,xjo),e(O,$jo),e(O,e5),e(e5,ume),e(ume,kjo),e(e5,Sjo),e(e5,iO),e(iO,Rjo),e(e5,Bjo),e(O,Pjo),e(O,o5),e(o5,_me),e(_me,Ijo),e(o5,qjo),e(o5,dO),e(dO,Njo),e(o5,jjo),e(O,Djo),e(O,r5),e(r5,bme),e(bme,Gjo),e(r5,Ojo),e(r5,cO),e(cO,Vjo),e(r5,Xjo),e(O,zjo),e(O,t5),e(t5,vme),e(vme,Qjo),e(t5,Wjo),e(t5,fO),e(fO,Hjo),e(t5,Ujo),e(O,Jjo),e(O,a5),e(a5,Fme),e(Fme,Yjo),e(a5,Kjo),e(a5,mO),e(mO,Zjo),e(a5,eDo),e(ro,oDo),e(ro,n5),e(n5,rDo),e(n5,Tme),e(Tme,tDo),e(n5,aDo),e(n5,Mme),e(Mme,nDo),e(ro,sDo),M(s5,ro,null),b(f,hBe,_),b(f,zi,_),e(zi,l5),e(l5,Eme),M(q0,Eme,null),e(zi,lDo),e(zi,Cme),e(Cme,iDo),b(f,pBe,_),b(f,qo,_),M(N0,qo,null),e(qo,dDo),e(qo,Qi),e(Qi,cDo),e(Qi,gO),e(gO,fDo),e(Qi,mDo),e(Qi,hO),e(hO,gDo),e(Qi,hDo),e(qo,pDo),e(qo,j0),e(j0,uDo),e(j0,wme),e(wme,_Do),e(j0,bDo),e(qo,vDo),e(qo,dt),M(D0,dt,null),e(dt,FDo),e(dt,Ame),e(Ame,TDo),e(dt,MDo),e(dt,Wi),e(Wi,EDo),e(Wi,yme),e(yme,CDo),e(Wi,wDo),e(Wi,pO),e(pO,ADo),e(Wi,yDo),e(dt,LDo),M(i5,dt,null),e(qo,xDo),e(qo,to),M(G0,to,null),e(to,$Do),e(to,Lme),e(Lme,kDo),e(to,SDo),e(to,Ra),e(Ra,RDo),e(Ra,xme),e(xme,BDo),e(Ra,PDo),e(Ra,$me),e($me,IDo),e(Ra,qDo),e(Ra,kme),e(kme,NDo),e(Ra,jDo),e(to,DDo),e(to,Sme),e(Sme,d5),e(d5,Rme),e(Rme,GDo),e(d5,ODo),e(d5,uO),e(uO,VDo),e(d5,XDo),e(to,zDo),e(to,c5),e(c5,QDo),e(c5,Bme),e(Bme,WDo),e(c5,HDo),e(c5,Pme),e(Pme,UDo),e(to,JDo),M(f5,to,null),b(f,uBe,_),b(f,Hi,_),e(Hi,m5),e(m5,Ime),M(O0,Ime,null),e(Hi,YDo),e(Hi,qme),e(qme,KDo),b(f,_Be,_),b(f,No,_),M(V0,No,null),e(No,ZDo),e(No,Ui),e(Ui,eGo),e(Ui,_O),e(_O,oGo),e(Ui,rGo),e(Ui,bO),e(bO,tGo),e(Ui,aGo),e(No,nGo),e(No,X0),e(X0,sGo),e(X0,Nme),e(Nme,lGo),e(X0,iGo),e(No,dGo),e(No,ct),M(z0,ct,null),e(ct,cGo),e(ct,jme),e(jme,fGo),e(ct,mGo),e(ct,Ji),e(Ji,gGo),e(Ji,Dme),e(Dme,hGo),e(Ji,pGo),e(Ji,vO),e(vO,uGo),e(Ji,_Go),e(ct,bGo),M(g5,ct,null),e(No,vGo),e(No,ao),M(Q0,ao,null),e(ao,FGo),e(ao,Gme),e(Gme,TGo),e(ao,MGo),e(ao,Ba),e(Ba,EGo),e(Ba,Ome),e(Ome,CGo),e(Ba,wGo),e(Ba,Vme),e(Vme,AGo),e(Ba,yGo),e(Ba,Xme),e(Xme,LGo),e(Ba,xGo),e(ao,$Go),e(ao,ve),e(ve,h5),e(h5,zme),e(zme,kGo),e(h5,SGo),e(h5,FO),e(FO,RGo),e(h5,BGo),e(ve,PGo),e(ve,p5),e(p5,Qme),e(Qme,IGo),e(p5,qGo),e(p5,TO),e(TO,NGo),e(p5,jGo),e(ve,DGo),e(ve,u5),e(u5,Wme),e(Wme,GGo),e(u5,OGo),e(u5,MO),e(MO,VGo),e(u5,XGo),e(ve,zGo),e(ve,xs),e(xs,Hme),e(Hme,QGo),e(xs,WGo),e(xs,EO),e(EO,HGo),e(xs,UGo),e(xs,CO),e(CO,JGo),e(xs,YGo),e(ve,KGo),e(ve,_5),e(_5,Ume),e(Ume,ZGo),e(_5,eOo),e(_5,wO),e(wO,oOo),e(_5,rOo),e(ve,tOo),e(ve,ft),e(ft,Jme),e(Jme,aOo),e(ft,nOo),e(ft,AO),e(AO,sOo),e(ft,lOo),e(ft,yO),e(yO,iOo),e(ft,dOo),e(ft,LO),e(LO,cOo),e(ft,fOo),e(ve,mOo),e(ve,b5),e(b5,Yme),e(Yme,gOo),e(b5,hOo),e(b5,xO),e(xO,pOo),e(b5,uOo),e(ve,_Oo),e(ve,v5),e(v5,Kme),e(Kme,bOo),e(v5,vOo),e(v5,$O),e($O,FOo),e(v5,TOo),e(ve,MOo),e(ve,F5),e(F5,Zme),e(Zme,EOo),e(F5,COo),e(F5,kO),e(kO,wOo),e(F5,AOo),e(ve,yOo),e(ve,T5),e(T5,ege),e(ege,LOo),e(T5,xOo),e(T5,SO),e(SO,$Oo),e(T5,kOo),e(ve,SOo),e(ve,M5),e(M5,oge),e(oge,ROo),e(M5,BOo),e(M5,RO),e(RO,POo),e(M5,IOo),e(ve,qOo),e(ve,E5),e(E5,rge),e(rge,NOo),e(E5,jOo),e(E5,BO),e(BO,DOo),e(E5,GOo),e(ve,OOo),e(ve,C5),e(C5,tge),e(tge,VOo),e(C5,XOo),e(C5,PO),e(PO,zOo),e(C5,QOo),e(ao,WOo),e(ao,w5),e(w5,HOo),e(w5,age),e(age,UOo),e(w5,JOo),e(w5,nge),e(nge,YOo),e(ao,KOo),M(A5,ao,null),b(f,bBe,_),b(f,Yi,_),e(Yi,y5),e(y5,sge),M(W0,sge,null),e(Yi,ZOo),e(Yi,lge),e(lge,eVo),b(f,vBe,_),b(f,jo,_),M(H0,jo,null),e(jo,oVo),e(jo,Ki),e(Ki,rVo),e(Ki,IO),e(IO,tVo),e(Ki,aVo),e(Ki,qO),e(qO,nVo),e(Ki,sVo),e(jo,lVo),e(jo,U0),e(U0,iVo),e(U0,ige),e(ige,dVo),e(U0,cVo),e(jo,fVo),e(jo,mt),M(J0,mt,null),e(mt,mVo),e(mt,dge),e(dge,gVo),e(mt,hVo),e(mt,Zi),e(Zi,pVo),e(Zi,cge),e(cge,uVo),e(Zi,_Vo),e(Zi,NO),e(NO,bVo),e(Zi,vVo),e(mt,FVo),M(L5,mt,null),e(jo,TVo),e(jo,no),M(Y0,no,null),e(no,MVo),e(no,fge),e(fge,EVo),e(no,CVo),e(no,Pa),e(Pa,wVo),e(Pa,mge),e(mge,AVo),e(Pa,yVo),e(Pa,gge),e(gge,LVo),e(Pa,xVo),e(Pa,hge),e(hge,$Vo),e(Pa,kVo),e(no,SVo),e(no,pge),e(pge,x5),e(x5,uge),e(uge,RVo),e(x5,BVo),e(x5,jO),e(jO,PVo),e(x5,IVo),e(no,qVo),e(no,$5),e($5,NVo),e($5,_ge),e(_ge,jVo),e($5,DVo),e($5,bge),e(bge,GVo),e(no,OVo),M(k5,no,null),b(f,FBe,_),b(f,ed,_),e(ed,S5),e(S5,vge),M(K0,vge,null),e(ed,VVo),e(ed,Fge),e(Fge,XVo),b(f,TBe,_),b(f,Do,_),M(Z0,Do,null),e(Do,zVo),e(Do,od),e(od,QVo),e(od,DO),e(DO,WVo),e(od,HVo),e(od,GO),e(GO,UVo),e(od,JVo),e(Do,YVo),e(Do,ey),e(ey,KVo),e(ey,Tge),e(Tge,ZVo),e(ey,eXo),e(Do,oXo),e(Do,gt),M(oy,gt,null),e(gt,rXo),e(gt,Mge),e(Mge,tXo),e(gt,aXo),e(gt,rd),e(rd,nXo),e(rd,Ege),e(Ege,sXo),e(rd,lXo),e(rd,OO),e(OO,iXo),e(rd,dXo),e(gt,cXo),M(R5,gt,null),e(Do,fXo),e(Do,so),M(ry,so,null),e(so,mXo),e(so,Cge),e(Cge,gXo),e(so,hXo),e(so,Ia),e(Ia,pXo),e(Ia,wge),e(wge,uXo),e(Ia,_Xo),e(Ia,Age),e(Age,bXo),e(Ia,vXo),e(Ia,yge),e(yge,FXo),e(Ia,TXo),e(so,MXo),e(so,qe),e(qe,B5),e(B5,Lge),e(Lge,EXo),e(B5,CXo),e(B5,VO),e(VO,wXo),e(B5,AXo),e(qe,yXo),e(qe,P5),e(P5,xge),e(xge,LXo),e(P5,xXo),e(P5,XO),e(XO,$Xo),e(P5,kXo),e(qe,SXo),e(qe,I5),e(I5,$ge),e($ge,RXo),e(I5,BXo),e(I5,zO),e(zO,PXo),e(I5,IXo),e(qe,qXo),e(qe,q5),e(q5,kge),e(kge,NXo),e(q5,jXo),e(q5,QO),e(QO,DXo),e(q5,GXo),e(qe,OXo),e(qe,N5),e(N5,Sge),e(Sge,VXo),e(N5,XXo),e(N5,WO),e(WO,zXo),e(N5,QXo),e(qe,WXo),e(qe,j5),e(j5,Rge),e(Rge,HXo),e(j5,UXo),e(j5,HO),e(HO,JXo),e(j5,YXo),e(qe,KXo),e(qe,D5),e(D5,Bge),e(Bge,ZXo),e(D5,ezo),e(D5,UO),e(UO,ozo),e(D5,rzo),e(qe,tzo),e(qe,G5),e(G5,Pge),e(Pge,azo),e(G5,nzo),e(G5,JO),e(JO,szo),e(G5,lzo),e(so,izo),e(so,O5),e(O5,dzo),e(O5,Ige),e(Ige,czo),e(O5,fzo),e(O5,qge),e(qge,mzo),e(so,gzo),M(V5,so,null),b(f,MBe,_),b(f,td,_),e(td,X5),e(X5,Nge),M(ty,Nge,null),e(td,hzo),e(td,jge),e(jge,pzo),b(f,EBe,_),b(f,Go,_),M(ay,Go,null),e(Go,uzo),e(Go,ad),e(ad,_zo),e(ad,YO),e(YO,bzo),e(ad,vzo),e(ad,KO),e(KO,Fzo),e(ad,Tzo),e(Go,Mzo),e(Go,ny),e(ny,Ezo),e(ny,Dge),e(Dge,Czo),e(ny,wzo),e(Go,Azo),e(Go,ht),M(sy,ht,null),e(ht,yzo),e(ht,Gge),e(Gge,Lzo),e(ht,xzo),e(ht,nd),e(nd,$zo),e(nd,Oge),e(Oge,kzo),e(nd,Szo),e(nd,ZO),e(ZO,Rzo),e(nd,Bzo),e(ht,Pzo),M(z5,ht,null),e(Go,Izo),e(Go,lo),M(ly,lo,null),e(lo,qzo),e(lo,Vge),e(Vge,Nzo),e(lo,jzo),e(lo,qa),e(qa,Dzo),e(qa,Xge),e(Xge,Gzo),e(qa,Ozo),e(qa,zge),e(zge,Vzo),e(qa,Xzo),e(qa,Qge),e(Qge,zzo),e(qa,Qzo),e(lo,Wzo),e(lo,Na),e(Na,Q5),e(Q5,Wge),e(Wge,Hzo),e(Q5,Uzo),e(Q5,eV),e(eV,Jzo),e(Q5,Yzo),e(Na,Kzo),e(Na,W5),e(W5,Hge),e(Hge,Zzo),e(W5,eQo),e(W5,oV),e(oV,oQo),e(W5,rQo),e(Na,tQo),e(Na,H5),e(H5,Uge),e(Uge,aQo),e(H5,nQo),e(H5,rV),e(rV,sQo),e(H5,lQo),e(Na,iQo),e(Na,U5),e(U5,Jge),e(Jge,dQo),e(U5,cQo),e(U5,tV),e(tV,fQo),e(U5,mQo),e(lo,gQo),e(lo,J5),e(J5,hQo),e(J5,Yge),e(Yge,pQo),e(J5,uQo),e(J5,Kge),e(Kge,_Qo),e(lo,bQo),M(Y5,lo,null),b(f,CBe,_),b(f,sd,_),e(sd,K5),e(K5,Zge),M(iy,Zge,null),e(sd,vQo),e(sd,ehe),e(ehe,FQo),b(f,wBe,_),b(f,Oo,_),M(dy,Oo,null),e(Oo,TQo),e(Oo,ld),e(ld,MQo),e(ld,aV),e(aV,EQo),e(ld,CQo),e(ld,nV),e(nV,wQo),e(ld,AQo),e(Oo,yQo),e(Oo,cy),e(cy,LQo),e(cy,ohe),e(ohe,xQo),e(cy,$Qo),e(Oo,kQo),e(Oo,pt),M(fy,pt,null),e(pt,SQo),e(pt,rhe),e(rhe,RQo),e(pt,BQo),e(pt,id),e(id,PQo),e(id,the),e(the,IQo),e(id,qQo),e(id,sV),e(sV,NQo),e(id,jQo),e(pt,DQo),M(Z5,pt,null),e(Oo,GQo),e(Oo,io),M(my,io,null),e(io,OQo),e(io,ahe),e(ahe,VQo),e(io,XQo),e(io,ja),e(ja,zQo),e(ja,nhe),e(nhe,QQo),e(ja,WQo),e(ja,she),e(she,HQo),e(ja,UQo),e(ja,lhe),e(lhe,JQo),e(ja,YQo),e(io,KQo),e(io,Ne),e(Ne,ev),e(ev,ihe),e(ihe,ZQo),e(ev,eWo),e(ev,lV),e(lV,oWo),e(ev,rWo),e(Ne,tWo),e(Ne,ov),e(ov,dhe),e(dhe,aWo),e(ov,nWo),e(ov,iV),e(iV,sWo),e(ov,lWo),e(Ne,iWo),e(Ne,rv),e(rv,che),e(che,dWo),e(rv,cWo),e(rv,dV),e(dV,fWo),e(rv,mWo),e(Ne,gWo),e(Ne,tv),e(tv,fhe),e(fhe,hWo),e(tv,pWo),e(tv,cV),e(cV,uWo),e(tv,_Wo),e(Ne,bWo),e(Ne,av),e(av,mhe),e(mhe,vWo),e(av,FWo),e(av,fV),e(fV,TWo),e(av,MWo),e(Ne,EWo),e(Ne,nv),e(nv,ghe),e(ghe,CWo),e(nv,wWo),e(nv,mV),e(mV,AWo),e(nv,yWo),e(Ne,LWo),e(Ne,sv),e(sv,hhe),e(hhe,xWo),e(sv,$Wo),e(sv,gV),e(gV,kWo),e(sv,SWo),e(Ne,RWo),e(Ne,lv),e(lv,phe),e(phe,BWo),e(lv,PWo),e(lv,hV),e(hV,IWo),e(lv,qWo),e(io,NWo),e(io,iv),e(iv,jWo),e(iv,uhe),e(uhe,DWo),e(iv,GWo),e(iv,_he),e(_he,OWo),e(io,VWo),M(dv,io,null),b(f,ABe,_),b(f,dd,_),e(dd,cv),e(cv,bhe),M(gy,bhe,null),e(dd,XWo),e(dd,vhe),e(vhe,zWo),b(f,yBe,_),b(f,Vo,_),M(hy,Vo,null),e(Vo,QWo),e(Vo,cd),e(cd,WWo),e(cd,pV),e(pV,HWo),e(cd,UWo),e(cd,uV),e(uV,JWo),e(cd,YWo),e(Vo,KWo),e(Vo,py),e(py,ZWo),e(py,Fhe),e(Fhe,eHo),e(py,oHo),e(Vo,rHo),e(Vo,ut),M(uy,ut,null),e(ut,tHo),e(ut,The),e(The,aHo),e(ut,nHo),e(ut,fd),e(fd,sHo),e(fd,Mhe),e(Mhe,lHo),e(fd,iHo),e(fd,_V),e(_V,dHo),e(fd,cHo),e(ut,fHo),M(fv,ut,null),e(Vo,mHo),e(Vo,co),M(_y,co,null),e(co,gHo),e(co,Ehe),e(Ehe,hHo),e(co,pHo),e(co,Da),e(Da,uHo),e(Da,Che),e(Che,_Ho),e(Da,bHo),e(Da,whe),e(whe,vHo),e(Da,FHo),e(Da,Ahe),e(Ahe,THo),e(Da,MHo),e(co,EHo),e(co,by),e(by,mv),e(mv,yhe),e(yhe,CHo),e(mv,wHo),e(mv,bV),e(bV,AHo),e(mv,yHo),e(by,LHo),e(by,gv),e(gv,Lhe),e(Lhe,xHo),e(gv,$Ho),e(gv,vV),e(vV,kHo),e(gv,SHo),e(co,RHo),e(co,hv),e(hv,BHo),e(hv,xhe),e(xhe,PHo),e(hv,IHo),e(hv,$he),e($he,qHo),e(co,NHo),M(pv,co,null),b(f,LBe,_),b(f,md,_),e(md,uv),e(uv,khe),M(vy,khe,null),e(md,jHo),e(md,She),e(She,DHo),b(f,xBe,_),b(f,Xo,_),M(Fy,Xo,null),e(Xo,GHo),e(Xo,gd),e(gd,OHo),e(gd,FV),e(FV,VHo),e(gd,XHo),e(gd,TV),e(TV,zHo),e(gd,QHo),e(Xo,WHo),e(Xo,Ty),e(Ty,HHo),e(Ty,Rhe),e(Rhe,UHo),e(Ty,JHo),e(Xo,YHo),e(Xo,_t),M(My,_t,null),e(_t,KHo),e(_t,Bhe),e(Bhe,ZHo),e(_t,eUo),e(_t,hd),e(hd,oUo),e(hd,Phe),e(Phe,rUo),e(hd,tUo),e(hd,MV),e(MV,aUo),e(hd,nUo),e(_t,sUo),M(_v,_t,null),e(Xo,lUo),e(Xo,fo),M(Ey,fo,null),e(fo,iUo),e(fo,Ihe),e(Ihe,dUo),e(fo,cUo),e(fo,Ga),e(Ga,fUo),e(Ga,qhe),e(qhe,mUo),e(Ga,gUo),e(Ga,Nhe),e(Nhe,hUo),e(Ga,pUo),e(Ga,jhe),e(jhe,uUo),e(Ga,_Uo),e(fo,bUo),e(fo,Oa),e(Oa,bv),e(bv,Dhe),e(Dhe,vUo),e(bv,FUo),e(bv,EV),e(EV,TUo),e(bv,MUo),e(Oa,EUo),e(Oa,vv),e(vv,Ghe),e(Ghe,CUo),e(vv,wUo),e(vv,CV),e(CV,AUo),e(vv,yUo),e(Oa,LUo),e(Oa,Fv),e(Fv,Ohe),e(Ohe,xUo),e(Fv,$Uo),e(Fv,wV),e(wV,kUo),e(Fv,SUo),e(Oa,RUo),e(Oa,Tv),e(Tv,Vhe),e(Vhe,BUo),e(Tv,PUo),e(Tv,AV),e(AV,IUo),e(Tv,qUo),e(fo,NUo),e(fo,Mv),e(Mv,jUo),e(Mv,Xhe),e(Xhe,DUo),e(Mv,GUo),e(Mv,zhe),e(zhe,OUo),e(fo,VUo),M(Ev,fo,null),b(f,$Be,_),b(f,pd,_),e(pd,Cv),e(Cv,Qhe),M(Cy,Qhe,null),e(pd,XUo),e(pd,Whe),e(Whe,zUo),b(f,kBe,_),b(f,zo,_),M(wy,zo,null),e(zo,QUo),e(zo,ud),e(ud,WUo),e(ud,yV),e(yV,HUo),e(ud,UUo),e(ud,LV),e(LV,JUo),e(ud,YUo),e(zo,KUo),e(zo,Ay),e(Ay,ZUo),e(Ay,Hhe),e(Hhe,eJo),e(Ay,oJo),e(zo,rJo),e(zo,bt),M(yy,bt,null),e(bt,tJo),e(bt,Uhe),e(Uhe,aJo),e(bt,nJo),e(bt,_d),e(_d,sJo),e(_d,Jhe),e(Jhe,lJo),e(_d,iJo),e(_d,xV),e(xV,dJo),e(_d,cJo),e(bt,fJo),M(wv,bt,null),e(zo,mJo),e(zo,mo),M(Ly,mo,null),e(mo,gJo),e(mo,Yhe),e(Yhe,hJo),e(mo,pJo),e(mo,Va),e(Va,uJo),e(Va,Khe),e(Khe,_Jo),e(Va,bJo),e(Va,Zhe),e(Zhe,vJo),e(Va,FJo),e(Va,epe),e(epe,TJo),e(Va,MJo),e(mo,EJo),e(mo,bd),e(bd,Av),e(Av,ope),e(ope,CJo),e(Av,wJo),e(Av,$V),e($V,AJo),e(Av,yJo),e(bd,LJo),e(bd,yv),e(yv,rpe),e(rpe,xJo),e(yv,$Jo),e(yv,kV),e(kV,kJo),e(yv,SJo),e(bd,RJo),e(bd,Lv),e(Lv,tpe),e(tpe,BJo),e(Lv,PJo),e(Lv,SV),e(SV,IJo),e(Lv,qJo),e(mo,NJo),e(mo,xv),e(xv,jJo),e(xv,ape),e(ape,DJo),e(xv,GJo),e(xv,npe),e(npe,OJo),e(mo,VJo),M($v,mo,null),b(f,SBe,_),b(f,vd,_),e(vd,kv),e(kv,spe),M(xy,spe,null),e(vd,XJo),e(vd,lpe),e(lpe,zJo),b(f,RBe,_),b(f,Qo,_),M($y,Qo,null),e(Qo,QJo),e(Qo,Fd),e(Fd,WJo),e(Fd,RV),e(RV,HJo),e(Fd,UJo),e(Fd,BV),e(BV,JJo),e(Fd,YJo),e(Qo,KJo),e(Qo,ky),e(ky,ZJo),e(ky,ipe),e(ipe,eYo),e(ky,oYo),e(Qo,rYo),e(Qo,vt),M(Sy,vt,null),e(vt,tYo),e(vt,dpe),e(dpe,aYo),e(vt,nYo),e(vt,Td),e(Td,sYo),e(Td,cpe),e(cpe,lYo),e(Td,iYo),e(Td,PV),e(PV,dYo),e(Td,cYo),e(vt,fYo),M(Sv,vt,null),e(Qo,mYo),e(Qo,go),M(Ry,go,null),e(go,gYo),e(go,fpe),e(fpe,hYo),e(go,pYo),e(go,Xa),e(Xa,uYo),e(Xa,mpe),e(mpe,_Yo),e(Xa,bYo),e(Xa,gpe),e(gpe,vYo),e(Xa,FYo),e(Xa,hpe),e(hpe,TYo),e(Xa,MYo),e(go,EYo),e(go,ppe),e(ppe,Rv),e(Rv,upe),e(upe,CYo),e(Rv,wYo),e(Rv,IV),e(IV,AYo),e(Rv,yYo),e(go,LYo),e(go,Bv),e(Bv,xYo),e(Bv,_pe),e(_pe,$Yo),e(Bv,kYo),e(Bv,bpe),e(bpe,SYo),e(go,RYo),M(Pv,go,null),b(f,BBe,_),b(f,Md,_),e(Md,Iv),e(Iv,vpe),M(By,vpe,null),e(Md,BYo),e(Md,Fpe),e(Fpe,PYo),b(f,PBe,_),b(f,Wo,_),M(Py,Wo,null),e(Wo,IYo),e(Wo,Ed),e(Ed,qYo),e(Ed,qV),e(qV,NYo),e(Ed,jYo),e(Ed,NV),e(NV,DYo),e(Ed,GYo),e(Wo,OYo),e(Wo,Iy),e(Iy,VYo),e(Iy,Tpe),e(Tpe,XYo),e(Iy,zYo),e(Wo,QYo),e(Wo,Ft),M(qy,Ft,null),e(Ft,WYo),e(Ft,Mpe),e(Mpe,HYo),e(Ft,UYo),e(Ft,Cd),e(Cd,JYo),e(Cd,Epe),e(Epe,YYo),e(Cd,KYo),e(Cd,jV),e(jV,ZYo),e(Cd,eKo),e(Ft,oKo),M(qv,Ft,null),e(Wo,rKo),e(Wo,ho),M(Ny,ho,null),e(ho,tKo),e(ho,Cpe),e(Cpe,aKo),e(ho,nKo),e(ho,za),e(za,sKo),e(za,wpe),e(wpe,lKo),e(za,iKo),e(za,Ape),e(Ape,dKo),e(za,cKo),e(za,ype),e(ype,fKo),e(za,mKo),e(ho,gKo),e(ho,Lpe),e(Lpe,Nv),e(Nv,xpe),e(xpe,hKo),e(Nv,pKo),e(Nv,DV),e(DV,uKo),e(Nv,_Ko),e(ho,bKo),e(ho,jv),e(jv,vKo),e(jv,$pe),e($pe,FKo),e(jv,TKo),e(jv,kpe),e(kpe,MKo),e(ho,EKo),M(Dv,ho,null),b(f,IBe,_),b(f,wd,_),e(wd,Gv),e(Gv,Spe),M(jy,Spe,null),e(wd,CKo),e(wd,Rpe),e(Rpe,wKo),b(f,qBe,_),b(f,Ho,_),M(Dy,Ho,null),e(Ho,AKo),e(Ho,Ad),e(Ad,yKo),e(Ad,GV),e(GV,LKo),e(Ad,xKo),e(Ad,OV),e(OV,$Ko),e(Ad,kKo),e(Ho,SKo),e(Ho,Gy),e(Gy,RKo),e(Gy,Bpe),e(Bpe,BKo),e(Gy,PKo),e(Ho,IKo),e(Ho,Tt),M(Oy,Tt,null),e(Tt,qKo),e(Tt,Ppe),e(Ppe,NKo),e(Tt,jKo),e(Tt,yd),e(yd,DKo),e(yd,Ipe),e(Ipe,GKo),e(yd,OKo),e(yd,VV),e(VV,VKo),e(yd,XKo),e(Tt,zKo),M(Ov,Tt,null),e(Ho,QKo),e(Ho,po),M(Vy,po,null),e(po,WKo),e(po,qpe),e(qpe,HKo),e(po,UKo),e(po,Qa),e(Qa,JKo),e(Qa,Npe),e(Npe,YKo),e(Qa,KKo),e(Qa,jpe),e(jpe,ZKo),e(Qa,eZo),e(Qa,Dpe),e(Dpe,oZo),e(Qa,rZo),e(po,tZo),e(po,Wa),e(Wa,Vv),e(Vv,Gpe),e(Gpe,aZo),e(Vv,nZo),e(Vv,XV),e(XV,sZo),e(Vv,lZo),e(Wa,iZo),e(Wa,Xv),e(Xv,Ope),e(Ope,dZo),e(Xv,cZo),e(Xv,zV),e(zV,fZo),e(Xv,mZo),e(Wa,gZo),e(Wa,zv),e(zv,Vpe),e(Vpe,hZo),e(zv,pZo),e(zv,QV),e(QV,uZo),e(zv,_Zo),e(Wa,bZo),e(Wa,Qv),e(Qv,Xpe),e(Xpe,vZo),e(Qv,FZo),e(Qv,WV),e(WV,TZo),e(Qv,MZo),e(po,EZo),e(po,Wv),e(Wv,CZo),e(Wv,zpe),e(zpe,wZo),e(Wv,AZo),e(Wv,Qpe),e(Qpe,yZo),e(po,LZo),M(Hv,po,null),b(f,NBe,_),b(f,Ld,_),e(Ld,Uv),e(Uv,Wpe),M(Xy,Wpe,null),e(Ld,xZo),e(Ld,Hpe),e(Hpe,$Zo),b(f,jBe,_),b(f,Uo,_),M(zy,Uo,null),e(Uo,kZo),e(Uo,xd),e(xd,SZo),e(xd,HV),e(HV,RZo),e(xd,BZo),e(xd,UV),e(UV,PZo),e(xd,IZo),e(Uo,qZo),e(Uo,Qy),e(Qy,NZo),e(Qy,Upe),e(Upe,jZo),e(Qy,DZo),e(Uo,GZo),e(Uo,Mt),M(Wy,Mt,null),e(Mt,OZo),e(Mt,Jpe),e(Jpe,VZo),e(Mt,XZo),e(Mt,$d),e($d,zZo),e($d,Ype),e(Ype,QZo),e($d,WZo),e($d,JV),e(JV,HZo),e($d,UZo),e(Mt,JZo),M(Jv,Mt,null),e(Uo,YZo),e(Uo,uo),M(Hy,uo,null),e(uo,KZo),e(uo,Kpe),e(Kpe,ZZo),e(uo,eer),e(uo,Ha),e(Ha,oer),e(Ha,Zpe),e(Zpe,rer),e(Ha,ter),e(Ha,eue),e(eue,aer),e(Ha,ner),e(Ha,oue),e(oue,ser),e(Ha,ler),e(uo,ier),e(uo,rue),e(rue,Yv),e(Yv,tue),e(tue,der),e(Yv,cer),e(Yv,YV),e(YV,fer),e(Yv,mer),e(uo,ger),e(uo,Kv),e(Kv,her),e(Kv,aue),e(aue,per),e(Kv,uer),e(Kv,nue),e(nue,_er),e(uo,ber),M(Zv,uo,null),b(f,DBe,_),b(f,kd,_),e(kd,eF),e(eF,sue),M(Uy,sue,null),e(kd,ver),e(kd,lue),e(lue,Fer),b(f,GBe,_),b(f,Jo,_),M(Jy,Jo,null),e(Jo,Ter),e(Jo,Sd),e(Sd,Mer),e(Sd,KV),e(KV,Eer),e(Sd,Cer),e(Sd,ZV),e(ZV,wer),e(Sd,Aer),e(Jo,yer),e(Jo,Yy),e(Yy,Ler),e(Yy,iue),e(iue,xer),e(Yy,$er),e(Jo,ker),e(Jo,Et),M(Ky,Et,null),e(Et,Ser),e(Et,due),e(due,Rer),e(Et,Ber),e(Et,Rd),e(Rd,Per),e(Rd,cue),e(cue,Ier),e(Rd,qer),e(Rd,eX),e(eX,Ner),e(Rd,jer),e(Et,Der),M(oF,Et,null),e(Jo,Ger),e(Jo,Er),M(Zy,Er,null),e(Er,Oer),e(Er,fue),e(fue,Ver),e(Er,Xer),e(Er,Ua),e(Ua,zer),e(Ua,mue),e(mue,Qer),e(Ua,Wer),e(Ua,gue),e(gue,Her),e(Ua,Uer),e(Ua,hue),e(hue,Jer),e(Ua,Yer),e(Er,Ker),e(Er,j),e(j,rF),e(rF,pue),e(pue,Zer),e(rF,eor),e(rF,oX),e(oX,oor),e(rF,ror),e(j,tor),e(j,tF),e(tF,uue),e(uue,aor),e(tF,nor),e(tF,rX),e(rX,sor),e(tF,lor),e(j,ior),e(j,aF),e(aF,_ue),e(_ue,dor),e(aF,cor),e(aF,tX),e(tX,mor),e(aF,gor),e(j,hor),e(j,nF),e(nF,bue),e(bue,por),e(nF,uor),e(nF,aX),e(aX,_or),e(nF,bor),e(j,vor),e(j,sF),e(sF,vue),e(vue,For),e(sF,Tor),e(sF,nX),e(nX,Mor),e(sF,Eor),e(j,Cor),e(j,lF),e(lF,Fue),e(Fue,wor),e(lF,Aor),e(lF,sX),e(sX,yor),e(lF,Lor),e(j,xor),e(j,iF),e(iF,Tue),e(Tue,$or),e(iF,kor),e(iF,lX),e(lX,Sor),e(iF,Ror),e(j,Bor),e(j,dF),e(dF,Mue),e(Mue,Por),e(dF,Ior),e(dF,iX),e(iX,qor),e(dF,Nor),e(j,jor),e(j,cF),e(cF,Eue),e(Eue,Dor),e(cF,Gor),e(cF,dX),e(dX,Oor),e(cF,Vor),e(j,Xor),e(j,fF),e(fF,Cue),e(Cue,zor),e(fF,Qor),e(fF,cX),e(cX,Wor),e(fF,Hor),e(j,Uor),e(j,mF),e(mF,wue),e(wue,Jor),e(mF,Yor),e(mF,fX),e(fX,Kor),e(mF,Zor),e(j,err),e(j,gF),e(gF,Aue),e(Aue,orr),e(gF,rrr),e(gF,mX),e(mX,trr),e(gF,arr),e(j,nrr),e(j,hF),e(hF,yue),e(yue,srr),e(hF,lrr),e(hF,gX),e(gX,irr),e(hF,drr),e(j,crr),e(j,pF),e(pF,Lue),e(Lue,frr),e(pF,mrr),e(pF,hX),e(hX,grr),e(pF,hrr),e(j,prr),e(j,uF),e(uF,xue),e(xue,urr),e(uF,_rr),e(uF,pX),e(pX,brr),e(uF,vrr),e(j,Frr),e(j,_F),e(_F,$ue),e($ue,Trr),e(_F,Mrr),e(_F,uX),e(uX,Err),e(_F,Crr),e(j,wrr),e(j,$s),e($s,kue),e(kue,Arr),e($s,yrr),e($s,_X),e(_X,Lrr),e($s,xrr),e($s,bX),e(bX,$rr),e($s,krr),e(j,Srr),e(j,bF),e(bF,Sue),e(Sue,Rrr),e(bF,Brr),e(bF,vX),e(vX,Prr),e(bF,Irr),e(j,qrr),e(j,vF),e(vF,Rue),e(Rue,Nrr),e(vF,jrr),e(vF,FX),e(FX,Drr),e(vF,Grr),e(j,Orr),e(j,FF),e(FF,Bue),e(Bue,Vrr),e(FF,Xrr),e(FF,TX),e(TX,zrr),e(FF,Qrr),e(j,Wrr),e(j,TF),e(TF,Pue),e(Pue,Hrr),e(TF,Urr),e(TF,MX),e(MX,Jrr),e(TF,Yrr),e(j,Krr),e(j,MF),e(MF,Iue),e(Iue,Zrr),e(MF,etr),e(MF,EX),e(EX,otr),e(MF,rtr),e(j,ttr),e(j,EF),e(EF,que),e(que,atr),e(EF,ntr),e(EF,CX),e(CX,str),e(EF,ltr),e(j,itr),e(j,CF),e(CF,Nue),e(Nue,dtr),e(CF,ctr),e(CF,wX),e(wX,ftr),e(CF,mtr),e(j,gtr),e(j,wF),e(wF,jue),e(jue,htr),e(wF,ptr),e(wF,AX),e(AX,utr),e(wF,_tr),e(j,btr),e(j,AF),e(AF,Due),e(Due,vtr),e(AF,Ftr),e(AF,yX),e(yX,Ttr),e(AF,Mtr),e(j,Etr),e(j,yF),e(yF,Gue),e(Gue,Ctr),e(yF,wtr),e(yF,LX),e(LX,Atr),e(yF,ytr),e(j,Ltr),e(j,LF),e(LF,Oue),e(Oue,xtr),e(LF,$tr),e(LF,xX),e(xX,ktr),e(LF,Str),e(j,Rtr),e(j,xF),e(xF,Vue),e(Vue,Btr),e(xF,Ptr),e(xF,$X),e($X,Itr),e(xF,qtr),e(j,Ntr),e(j,$F),e($F,Xue),e(Xue,jtr),e($F,Dtr),e($F,kX),e(kX,Gtr),e($F,Otr),e(j,Vtr),e(j,kF),e(kF,zue),e(zue,Xtr),e(kF,ztr),e(kF,SX),e(SX,Qtr),e(kF,Wtr),e(j,Htr),e(j,SF),e(SF,Que),e(Que,Utr),e(SF,Jtr),e(SF,RX),e(RX,Ytr),e(SF,Ktr),e(j,Ztr),e(j,RF),e(RF,Wue),e(Wue,ear),e(RF,oar),e(RF,BX),e(BX,rar),e(RF,tar),e(j,aar),e(j,BF),e(BF,Hue),e(Hue,nar),e(BF,sar),e(BF,PX),e(PX,lar),e(BF,iar),e(j,dar),e(j,PF),e(PF,Uue),e(Uue,car),e(PF,far),e(PF,IX),e(IX,mar),e(PF,gar),e(j,har),e(j,IF),e(IF,Jue),e(Jue,par),e(IF,uar),e(IF,qX),e(qX,_ar),e(IF,bar),e(j,Far),e(j,qF),e(qF,Yue),e(Yue,Tar),e(qF,Mar),e(qF,NX),e(NX,Ear),e(qF,Car),e(j,war),e(j,NF),e(NF,Kue),e(Kue,Aar),e(NF,yar),e(NF,jX),e(jX,Lar),e(NF,xar),e(j,$ar),e(j,jF),e(jF,Zue),e(Zue,kar),e(jF,Sar),e(jF,DX),e(DX,Rar),e(jF,Bar),e(j,Par),e(j,DF),e(DF,e_e),e(e_e,Iar),e(DF,qar),e(DF,GX),e(GX,Nar),e(DF,jar),e(j,Dar),e(j,GF),e(GF,o_e),e(o_e,Gar),e(GF,Oar),e(GF,OX),e(OX,Var),e(GF,Xar),e(j,zar),e(j,OF),e(OF,r_e),e(r_e,Qar),e(OF,War),e(OF,VX),e(VX,Har),e(OF,Uar),e(j,Jar),e(j,VF),e(VF,t_e),e(t_e,Yar),e(VF,Kar),e(VF,XX),e(XX,Zar),e(VF,enr),e(j,onr),e(j,XF),e(XF,a_e),e(a_e,rnr),e(XF,tnr),e(XF,zX),e(zX,anr),e(XF,nnr),e(Er,snr),M(zF,Er,null),b(f,OBe,_),b(f,Bd,_),e(Bd,QF),e(QF,n_e),M(eL,n_e,null),e(Bd,lnr),e(Bd,s_e),e(s_e,inr),b(f,VBe,_),b(f,Yo,_),M(oL,Yo,null),e(Yo,dnr),e(Yo,Pd),e(Pd,cnr),e(Pd,QX),e(QX,fnr),e(Pd,mnr),e(Pd,WX),e(WX,gnr),e(Pd,hnr),e(Yo,pnr),e(Yo,rL),e(rL,unr),e(rL,l_e),e(l_e,_nr),e(rL,bnr),e(Yo,vnr),e(Yo,Ct),M(tL,Ct,null),e(Ct,Fnr),e(Ct,i_e),e(i_e,Tnr),e(Ct,Mnr),e(Ct,Id),e(Id,Enr),e(Id,d_e),e(d_e,Cnr),e(Id,wnr),e(Id,HX),e(HX,Anr),e(Id,ynr),e(Ct,Lnr),M(WF,Ct,null),e(Yo,xnr),e(Yo,Cr),M(aL,Cr,null),e(Cr,$nr),e(Cr,c_e),e(c_e,knr),e(Cr,Snr),e(Cr,Ja),e(Ja,Rnr),e(Ja,f_e),e(f_e,Bnr),e(Ja,Pnr),e(Ja,m_e),e(m_e,Inr),e(Ja,qnr),e(Ja,g_e),e(g_e,Nnr),e(Ja,jnr),e(Cr,Dnr),e(Cr,ne),e(ne,HF),e(HF,h_e),e(h_e,Gnr),e(HF,Onr),e(HF,UX),e(UX,Vnr),e(HF,Xnr),e(ne,znr),e(ne,UF),e(UF,p_e),e(p_e,Qnr),e(UF,Wnr),e(UF,JX),e(JX,Hnr),e(UF,Unr),e(ne,Jnr),e(ne,JF),e(JF,u_e),e(u_e,Ynr),e(JF,Knr),e(JF,YX),e(YX,Znr),e(JF,esr),e(ne,osr),e(ne,YF),e(YF,__e),e(__e,rsr),e(YF,tsr),e(YF,KX),e(KX,asr),e(YF,nsr),e(ne,ssr),e(ne,KF),e(KF,b_e),e(b_e,lsr),e(KF,isr),e(KF,ZX),e(ZX,dsr),e(KF,csr),e(ne,fsr),e(ne,ZF),e(ZF,v_e),e(v_e,msr),e(ZF,gsr),e(ZF,ez),e(ez,hsr),e(ZF,psr),e(ne,usr),e(ne,e6),e(e6,F_e),e(F_e,_sr),e(e6,bsr),e(e6,oz),e(oz,vsr),e(e6,Fsr),e(ne,Tsr),e(ne,o6),e(o6,T_e),e(T_e,Msr),e(o6,Esr),e(o6,rz),e(rz,Csr),e(o6,wsr),e(ne,Asr),e(ne,r6),e(r6,M_e),e(M_e,ysr),e(r6,Lsr),e(r6,tz),e(tz,xsr),e(r6,$sr),e(ne,ksr),e(ne,t6),e(t6,E_e),e(E_e,Ssr),e(t6,Rsr),e(t6,az),e(az,Bsr),e(t6,Psr),e(ne,Isr),e(ne,a6),e(a6,C_e),e(C_e,qsr),e(a6,Nsr),e(a6,nz),e(nz,jsr),e(a6,Dsr),e(ne,Gsr),e(ne,n6),e(n6,w_e),e(w_e,Osr),e(n6,Vsr),e(n6,sz),e(sz,Xsr),e(n6,zsr),e(ne,Qsr),e(ne,s6),e(s6,A_e),e(A_e,Wsr),e(s6,Hsr),e(s6,lz),e(lz,Usr),e(s6,Jsr),e(ne,Ysr),e(ne,l6),e(l6,y_e),e(y_e,Ksr),e(l6,Zsr),e(l6,iz),e(iz,elr),e(l6,olr),e(ne,rlr),e(ne,i6),e(i6,L_e),e(L_e,tlr),e(i6,alr),e(i6,dz),e(dz,nlr),e(i6,slr),e(ne,llr),e(ne,d6),e(d6,x_e),e(x_e,ilr),e(d6,dlr),e(d6,cz),e(cz,clr),e(d6,flr),e(ne,mlr),e(ne,c6),e(c6,$_e),e($_e,glr),e(c6,hlr),e(c6,fz),e(fz,plr),e(c6,ulr),e(ne,_lr),e(ne,f6),e(f6,k_e),e(k_e,blr),e(f6,vlr),e(f6,mz),e(mz,Flr),e(f6,Tlr),e(ne,Mlr),e(ne,m6),e(m6,S_e),e(S_e,Elr),e(m6,Clr),e(m6,gz),e(gz,wlr),e(m6,Alr),e(ne,ylr),e(ne,g6),e(g6,R_e),e(R_e,Llr),e(g6,xlr),e(g6,hz),e(hz,$lr),e(g6,klr),e(ne,Slr),e(ne,h6),e(h6,B_e),e(B_e,Rlr),e(h6,Blr),e(h6,pz),e(pz,Plr),e(h6,Ilr),e(ne,qlr),e(ne,p6),e(p6,P_e),e(P_e,Nlr),e(p6,jlr),e(p6,uz),e(uz,Dlr),e(p6,Glr),e(ne,Olr),e(ne,u6),e(u6,I_e),e(I_e,Vlr),e(u6,Xlr),e(u6,_z),e(_z,zlr),e(u6,Qlr),e(Cr,Wlr),M(_6,Cr,null),b(f,XBe,_),b(f,qd,_),e(qd,b6),e(b6,q_e),M(nL,q_e,null),e(qd,Hlr),e(qd,N_e),e(N_e,Ulr),b(f,zBe,_),b(f,Ko,_),M(sL,Ko,null),e(Ko,Jlr),e(Ko,Nd),e(Nd,Ylr),e(Nd,bz),e(bz,Klr),e(Nd,Zlr),e(Nd,vz),e(vz,eir),e(Nd,oir),e(Ko,rir),e(Ko,lL),e(lL,tir),e(lL,j_e),e(j_e,air),e(lL,nir),e(Ko,sir),e(Ko,wt),M(iL,wt,null),e(wt,lir),e(wt,D_e),e(D_e,iir),e(wt,dir),e(wt,jd),e(jd,cir),e(jd,G_e),e(G_e,fir),e(jd,mir),e(jd,Fz),e(Fz,gir),e(jd,hir),e(wt,pir),M(v6,wt,null),e(Ko,uir),e(Ko,wr),M(dL,wr,null),e(wr,_ir),e(wr,O_e),e(O_e,bir),e(wr,vir),e(wr,Ya),e(Ya,Fir),e(Ya,V_e),e(V_e,Tir),e(Ya,Mir),e(Ya,X_e),e(X_e,Eir),e(Ya,Cir),e(Ya,z_e),e(z_e,wir),e(Ya,Air),e(wr,yir),e(wr,Te),e(Te,F6),e(F6,Q_e),e(Q_e,Lir),e(F6,xir),e(F6,Tz),e(Tz,$ir),e(F6,kir),e(Te,Sir),e(Te,T6),e(T6,W_e),e(W_e,Rir),e(T6,Bir),e(T6,Mz),e(Mz,Pir),e(T6,Iir),e(Te,qir),e(Te,M6),e(M6,H_e),e(H_e,Nir),e(M6,jir),e(M6,Ez),e(Ez,Dir),e(M6,Gir),e(Te,Oir),e(Te,E6),e(E6,U_e),e(U_e,Vir),e(E6,Xir),e(E6,Cz),e(Cz,zir),e(E6,Qir),e(Te,Wir),e(Te,C6),e(C6,J_e),e(J_e,Hir),e(C6,Uir),e(C6,wz),e(wz,Jir),e(C6,Yir),e(Te,Kir),e(Te,w6),e(w6,Y_e),e(Y_e,Zir),e(w6,edr),e(w6,Az),e(Az,odr),e(w6,rdr),e(Te,tdr),e(Te,A6),e(A6,K_e),e(K_e,adr),e(A6,ndr),e(A6,yz),e(yz,sdr),e(A6,ldr),e(Te,idr),e(Te,y6),e(y6,Z_e),e(Z_e,ddr),e(y6,cdr),e(y6,Lz),e(Lz,fdr),e(y6,mdr),e(Te,gdr),e(Te,L6),e(L6,e1e),e(e1e,hdr),e(L6,pdr),e(L6,xz),e(xz,udr),e(L6,_dr),e(Te,bdr),e(Te,x6),e(x6,o1e),e(o1e,vdr),e(x6,Fdr),e(x6,$z),e($z,Tdr),e(x6,Mdr),e(Te,Edr),e(Te,$6),e($6,r1e),e(r1e,Cdr),e($6,wdr),e($6,kz),e(kz,Adr),e($6,ydr),e(Te,Ldr),e(Te,k6),e(k6,t1e),e(t1e,xdr),e(k6,$dr),e(k6,Sz),e(Sz,kdr),e(k6,Sdr),e(wr,Rdr),M(S6,wr,null),b(f,QBe,_),b(f,Dd,_),e(Dd,R6),e(R6,a1e),M(cL,a1e,null),e(Dd,Bdr),e(Dd,n1e),e(n1e,Pdr),b(f,WBe,_),b(f,Zo,_),M(fL,Zo,null),e(Zo,Idr),e(Zo,Gd),e(Gd,qdr),e(Gd,Rz),e(Rz,Ndr),e(Gd,jdr),e(Gd,Bz),e(Bz,Ddr),e(Gd,Gdr),e(Zo,Odr),e(Zo,mL),e(mL,Vdr),e(mL,s1e),e(s1e,Xdr),e(mL,zdr),e(Zo,Qdr),e(Zo,At),M(gL,At,null),e(At,Wdr),e(At,l1e),e(l1e,Hdr),e(At,Udr),e(At,Od),e(Od,Jdr),e(Od,i1e),e(i1e,Ydr),e(Od,Kdr),e(Od,Pz),e(Pz,Zdr),e(Od,ecr),e(At,ocr),M(B6,At,null),e(Zo,rcr),e(Zo,Ar),M(hL,Ar,null),e(Ar,tcr),e(Ar,d1e),e(d1e,acr),e(Ar,ncr),e(Ar,Ka),e(Ka,scr),e(Ka,c1e),e(c1e,lcr),e(Ka,icr),e(Ka,f1e),e(f1e,dcr),e(Ka,ccr),e(Ka,m1e),e(m1e,fcr),e(Ka,mcr),e(Ar,gcr),e(Ar,pL),e(pL,P6),e(P6,g1e),e(g1e,hcr),e(P6,pcr),e(P6,Iz),e(Iz,ucr),e(P6,_cr),e(pL,bcr),e(pL,I6),e(I6,h1e),e(h1e,vcr),e(I6,Fcr),e(I6,qz),e(qz,Tcr),e(I6,Mcr),e(Ar,Ecr),M(q6,Ar,null),b(f,HBe,_),b(f,Vd,_),e(Vd,N6),e(N6,p1e),M(uL,p1e,null),e(Vd,Ccr),e(Vd,u1e),e(u1e,wcr),b(f,UBe,_),b(f,er,_),M(_L,er,null),e(er,Acr),e(er,Xd),e(Xd,ycr),e(Xd,Nz),e(Nz,Lcr),e(Xd,xcr),e(Xd,jz),e(jz,$cr),e(Xd,kcr),e(er,Scr),e(er,bL),e(bL,Rcr),e(bL,_1e),e(_1e,Bcr),e(bL,Pcr),e(er,Icr),e(er,yt),M(vL,yt,null),e(yt,qcr),e(yt,b1e),e(b1e,Ncr),e(yt,jcr),e(yt,zd),e(zd,Dcr),e(zd,v1e),e(v1e,Gcr),e(zd,Ocr),e(zd,Dz),e(Dz,Vcr),e(zd,Xcr),e(yt,zcr),M(j6,yt,null),e(er,Qcr),e(er,yr),M(FL,yr,null),e(yr,Wcr),e(yr,F1e),e(F1e,Hcr),e(yr,Ucr),e(yr,Za),e(Za,Jcr),e(Za,T1e),e(T1e,Ycr),e(Za,Kcr),e(Za,M1e),e(M1e,Zcr),e(Za,efr),e(Za,E1e),e(E1e,ofr),e(Za,rfr),e(yr,tfr),e(yr,ie),e(ie,D6),e(D6,C1e),e(C1e,afr),e(D6,nfr),e(D6,Gz),e(Gz,sfr),e(D6,lfr),e(ie,ifr),e(ie,G6),e(G6,w1e),e(w1e,dfr),e(G6,cfr),e(G6,Oz),e(Oz,ffr),e(G6,mfr),e(ie,gfr),e(ie,O6),e(O6,A1e),e(A1e,hfr),e(O6,pfr),e(O6,Vz),e(Vz,ufr),e(O6,_fr),e(ie,bfr),e(ie,V6),e(V6,y1e),e(y1e,vfr),e(V6,Ffr),e(V6,Xz),e(Xz,Tfr),e(V6,Mfr),e(ie,Efr),e(ie,X6),e(X6,L1e),e(L1e,Cfr),e(X6,wfr),e(X6,zz),e(zz,Afr),e(X6,yfr),e(ie,Lfr),e(ie,z6),e(z6,x1e),e(x1e,xfr),e(z6,$fr),e(z6,Qz),e(Qz,kfr),e(z6,Sfr),e(ie,Rfr),e(ie,Q6),e(Q6,$1e),e($1e,Bfr),e(Q6,Pfr),e(Q6,Wz),e(Wz,Ifr),e(Q6,qfr),e(ie,Nfr),e(ie,W6),e(W6,k1e),e(k1e,jfr),e(W6,Dfr),e(W6,Hz),e(Hz,Gfr),e(W6,Ofr),e(ie,Vfr),e(ie,H6),e(H6,S1e),e(S1e,Xfr),e(H6,zfr),e(H6,Uz),e(Uz,Qfr),e(H6,Wfr),e(ie,Hfr),e(ie,U6),e(U6,R1e),e(R1e,Ufr),e(U6,Jfr),e(U6,Jz),e(Jz,Yfr),e(U6,Kfr),e(ie,Zfr),e(ie,J6),e(J6,B1e),e(B1e,emr),e(J6,omr),e(J6,Yz),e(Yz,rmr),e(J6,tmr),e(ie,amr),e(ie,Y6),e(Y6,P1e),e(P1e,nmr),e(Y6,smr),e(Y6,Kz),e(Kz,lmr),e(Y6,imr),e(ie,dmr),e(ie,K6),e(K6,I1e),e(I1e,cmr),e(K6,fmr),e(K6,Zz),e(Zz,mmr),e(K6,gmr),e(ie,hmr),e(ie,Z6),e(Z6,q1e),e(q1e,pmr),e(Z6,umr),e(Z6,eQ),e(eQ,_mr),e(Z6,bmr),e(ie,vmr),e(ie,eT),e(eT,N1e),e(N1e,Fmr),e(eT,Tmr),e(eT,oQ),e(oQ,Mmr),e(eT,Emr),e(ie,Cmr),e(ie,oT),e(oT,j1e),e(j1e,wmr),e(oT,Amr),e(oT,rQ),e(rQ,ymr),e(oT,Lmr),e(ie,xmr),e(ie,rT),e(rT,D1e),e(D1e,$mr),e(rT,kmr),e(rT,tQ),e(tQ,Smr),e(rT,Rmr),e(ie,Bmr),e(ie,tT),e(tT,G1e),e(G1e,Pmr),e(tT,Imr),e(tT,aQ),e(aQ,qmr),e(tT,Nmr),e(ie,jmr),e(ie,aT),e(aT,O1e),e(O1e,Dmr),e(aT,Gmr),e(aT,nQ),e(nQ,Omr),e(aT,Vmr),e(ie,Xmr),e(ie,nT),e(nT,V1e),e(V1e,zmr),e(nT,Qmr),e(nT,sQ),e(sQ,Wmr),e(nT,Hmr),e(yr,Umr),M(sT,yr,null),b(f,JBe,_),b(f,Qd,_),e(Qd,lT),e(lT,X1e),M(TL,X1e,null),e(Qd,Jmr),e(Qd,z1e),e(z1e,Ymr),b(f,YBe,_),b(f,or,_),M(ML,or,null),e(or,Kmr),e(or,Wd),e(Wd,Zmr),e(Wd,lQ),e(lQ,egr),e(Wd,ogr),e(Wd,iQ),e(iQ,rgr),e(Wd,tgr),e(or,agr),e(or,EL),e(EL,ngr),e(EL,Q1e),e(Q1e,sgr),e(EL,lgr),e(or,igr),e(or,Lt),M(CL,Lt,null),e(Lt,dgr),e(Lt,W1e),e(W1e,cgr),e(Lt,fgr),e(Lt,Hd),e(Hd,mgr),e(Hd,H1e),e(H1e,ggr),e(Hd,hgr),e(Hd,dQ),e(dQ,pgr),e(Hd,ugr),e(Lt,_gr),M(iT,Lt,null),e(or,bgr),e(or,Lr),M(wL,Lr,null),e(Lr,vgr),e(Lr,U1e),e(U1e,Fgr),e(Lr,Tgr),e(Lr,en),e(en,Mgr),e(en,J1e),e(J1e,Egr),e(en,Cgr),e(en,Y1e),e(Y1e,wgr),e(en,Agr),e(en,K1e),e(K1e,ygr),e(en,Lgr),e(Lr,xgr),e(Lr,ye),e(ye,dT),e(dT,Z1e),e(Z1e,$gr),e(dT,kgr),e(dT,cQ),e(cQ,Sgr),e(dT,Rgr),e(ye,Bgr),e(ye,cT),e(cT,e9e),e(e9e,Pgr),e(cT,Igr),e(cT,fQ),e(fQ,qgr),e(cT,Ngr),e(ye,jgr),e(ye,fT),e(fT,o9e),e(o9e,Dgr),e(fT,Ggr),e(fT,mQ),e(mQ,Ogr),e(fT,Vgr),e(ye,Xgr),e(ye,mT),e(mT,r9e),e(r9e,zgr),e(mT,Qgr),e(mT,gQ),e(gQ,Wgr),e(mT,Hgr),e(ye,Ugr),e(ye,gT),e(gT,t9e),e(t9e,Jgr),e(gT,Ygr),e(gT,hQ),e(hQ,Kgr),e(gT,Zgr),e(ye,ehr),e(ye,hT),e(hT,a9e),e(a9e,ohr),e(hT,rhr),e(hT,pQ),e(pQ,thr),e(hT,ahr),e(ye,nhr),e(ye,pT),e(pT,n9e),e(n9e,shr),e(pT,lhr),e(pT,uQ),e(uQ,ihr),e(pT,dhr),e(ye,chr),e(ye,uT),e(uT,s9e),e(s9e,fhr),e(uT,mhr),e(uT,_Q),e(_Q,ghr),e(uT,hhr),e(ye,phr),e(ye,_T),e(_T,l9e),e(l9e,uhr),e(_T,_hr),e(_T,bQ),e(bQ,bhr),e(_T,vhr),e(ye,Fhr),e(ye,bT),e(bT,i9e),e(i9e,Thr),e(bT,Mhr),e(bT,vQ),e(vQ,Ehr),e(bT,Chr),e(Lr,whr),M(vT,Lr,null),b(f,KBe,_),b(f,Ud,_),e(Ud,FT),e(FT,d9e),M(AL,d9e,null),e(Ud,Ahr),e(Ud,c9e),e(c9e,yhr),b(f,ZBe,_),b(f,rr,_),M(yL,rr,null),e(rr,Lhr),e(rr,Jd),e(Jd,xhr),e(Jd,FQ),e(FQ,$hr),e(Jd,khr),e(Jd,TQ),e(TQ,Shr),e(Jd,Rhr),e(rr,Bhr),e(rr,LL),e(LL,Phr),e(LL,f9e),e(f9e,Ihr),e(LL,qhr),e(rr,Nhr),e(rr,xt),M(xL,xt,null),e(xt,jhr),e(xt,m9e),e(m9e,Dhr),e(xt,Ghr),e(xt,Yd),e(Yd,Ohr),e(Yd,g9e),e(g9e,Vhr),e(Yd,Xhr),e(Yd,MQ),e(MQ,zhr),e(Yd,Qhr),e(xt,Whr),M(TT,xt,null),e(rr,Hhr),e(rr,xr),M($L,xr,null),e(xr,Uhr),e(xr,h9e),e(h9e,Jhr),e(xr,Yhr),e(xr,on),e(on,Khr),e(on,p9e),e(p9e,Zhr),e(on,epr),e(on,u9e),e(u9e,opr),e(on,rpr),e(on,_9e),e(_9e,tpr),e(on,apr),e(xr,npr),e(xr,Z),e(Z,MT),e(MT,b9e),e(b9e,spr),e(MT,lpr),e(MT,EQ),e(EQ,ipr),e(MT,dpr),e(Z,cpr),e(Z,ET),e(ET,v9e),e(v9e,fpr),e(ET,mpr),e(ET,CQ),e(CQ,gpr),e(ET,hpr),e(Z,ppr),e(Z,CT),e(CT,F9e),e(F9e,upr),e(CT,_pr),e(CT,wQ),e(wQ,bpr),e(CT,vpr),e(Z,Fpr),e(Z,wT),e(wT,T9e),e(T9e,Tpr),e(wT,Mpr),e(wT,AQ),e(AQ,Epr),e(wT,Cpr),e(Z,wpr),e(Z,AT),e(AT,M9e),e(M9e,Apr),e(AT,ypr),e(AT,yQ),e(yQ,Lpr),e(AT,xpr),e(Z,$pr),e(Z,yT),e(yT,E9e),e(E9e,kpr),e(yT,Spr),e(yT,LQ),e(LQ,Rpr),e(yT,Bpr),e(Z,Ppr),e(Z,LT),e(LT,C9e),e(C9e,Ipr),e(LT,qpr),e(LT,xQ),e(xQ,Npr),e(LT,jpr),e(Z,Dpr),e(Z,xT),e(xT,w9e),e(w9e,Gpr),e(xT,Opr),e(xT,$Q),e($Q,Vpr),e(xT,Xpr),e(Z,zpr),e(Z,$T),e($T,A9e),e(A9e,Qpr),e($T,Wpr),e($T,kQ),e(kQ,Hpr),e($T,Upr),e(Z,Jpr),e(Z,kT),e(kT,y9e),e(y9e,Ypr),e(kT,Kpr),e(kT,SQ),e(SQ,Zpr),e(kT,eur),e(Z,our),e(Z,ST),e(ST,L9e),e(L9e,rur),e(ST,tur),e(ST,RQ),e(RQ,aur),e(ST,nur),e(Z,sur),e(Z,RT),e(RT,x9e),e(x9e,lur),e(RT,iur),e(RT,BQ),e(BQ,dur),e(RT,cur),e(Z,fur),e(Z,BT),e(BT,$9e),e($9e,mur),e(BT,gur),e(BT,PQ),e(PQ,hur),e(BT,pur),e(Z,uur),e(Z,PT),e(PT,k9e),e(k9e,_ur),e(PT,bur),e(PT,IQ),e(IQ,vur),e(PT,Fur),e(Z,Tur),e(Z,IT),e(IT,S9e),e(S9e,Mur),e(IT,Eur),e(IT,qQ),e(qQ,Cur),e(IT,wur),e(Z,Aur),e(Z,qT),e(qT,R9e),e(R9e,yur),e(qT,Lur),e(qT,NQ),e(NQ,xur),e(qT,$ur),e(Z,kur),e(Z,NT),e(NT,B9e),e(B9e,Sur),e(NT,Rur),e(NT,jQ),e(jQ,Bur),e(NT,Pur),e(Z,Iur),e(Z,jT),e(jT,P9e),e(P9e,qur),e(jT,Nur),e(jT,DQ),e(DQ,jur),e(jT,Dur),e(Z,Gur),e(Z,DT),e(DT,I9e),e(I9e,Our),e(DT,Vur),e(DT,GQ),e(GQ,Xur),e(DT,zur),e(Z,Qur),e(Z,GT),e(GT,q9e),e(q9e,Wur),e(GT,Hur),e(GT,OQ),e(OQ,Uur),e(GT,Jur),e(Z,Yur),e(Z,OT),e(OT,N9e),e(N9e,Kur),e(OT,Zur),e(OT,VQ),e(VQ,e_r),e(OT,o_r),e(Z,r_r),e(Z,VT),e(VT,j9e),e(j9e,t_r),e(VT,a_r),e(VT,XQ),e(XQ,n_r),e(VT,s_r),e(Z,l_r),e(Z,XT),e(XT,D9e),e(D9e,i_r),e(XT,d_r),e(XT,zQ),e(zQ,c_r),e(XT,f_r),e(Z,m_r),e(Z,zT),e(zT,G9e),e(G9e,g_r),e(zT,h_r),e(zT,QQ),e(QQ,p_r),e(zT,u_r),e(Z,__r),e(Z,QT),e(QT,O9e),e(O9e,b_r),e(QT,v_r),e(QT,WQ),e(WQ,F_r),e(QT,T_r),e(Z,M_r),e(Z,WT),e(WT,V9e),e(V9e,E_r),e(WT,C_r),e(WT,HQ),e(HQ,w_r),e(WT,A_r),e(xr,y_r),M(HT,xr,null),b(f,ePe,_),b(f,Kd,_),e(Kd,UT),e(UT,X9e),M(kL,X9e,null),e(Kd,L_r),e(Kd,z9e),e(z9e,x_r),b(f,oPe,_),b(f,tr,_),M(SL,tr,null),e(tr,$_r),e(tr,Zd),e(Zd,k_r),e(Zd,UQ),e(UQ,S_r),e(Zd,R_r),e(Zd,JQ),e(JQ,B_r),e(Zd,P_r),e(tr,I_r),e(tr,RL),e(RL,q_r),e(RL,Q9e),e(Q9e,N_r),e(RL,j_r),e(tr,D_r),e(tr,$t),M(BL,$t,null),e($t,G_r),e($t,W9e),e(W9e,O_r),e($t,V_r),e($t,ec),e(ec,X_r),e(ec,H9e),e(H9e,z_r),e(ec,Q_r),e(ec,YQ),e(YQ,W_r),e(ec,H_r),e($t,U_r),M(JT,$t,null),e(tr,J_r),e(tr,$r),M(PL,$r,null),e($r,Y_r),e($r,U9e),e(U9e,K_r),e($r,Z_r),e($r,rn),e(rn,e1r),e(rn,J9e),e(J9e,o1r),e(rn,r1r),e(rn,Y9e),e(Y9e,t1r),e(rn,a1r),e(rn,K9e),e(K9e,n1r),e(rn,s1r),e($r,l1r),e($r,pe),e(pe,YT),e(YT,Z9e),e(Z9e,i1r),e(YT,d1r),e(YT,KQ),e(KQ,c1r),e(YT,f1r),e(pe,m1r),e(pe,KT),e(KT,ebe),e(ebe,g1r),e(KT,h1r),e(KT,ZQ),e(ZQ,p1r),e(KT,u1r),e(pe,_1r),e(pe,ZT),e(ZT,obe),e(obe,b1r),e(ZT,v1r),e(ZT,eW),e(eW,F1r),e(ZT,T1r),e(pe,M1r),e(pe,eM),e(eM,rbe),e(rbe,E1r),e(eM,C1r),e(eM,oW),e(oW,w1r),e(eM,A1r),e(pe,y1r),e(pe,oM),e(oM,tbe),e(tbe,L1r),e(oM,x1r),e(oM,rW),e(rW,$1r),e(oM,k1r),e(pe,S1r),e(pe,rM),e(rM,abe),e(abe,R1r),e(rM,B1r),e(rM,tW),e(tW,P1r),e(rM,I1r),e(pe,q1r),e(pe,tM),e(tM,nbe),e(nbe,N1r),e(tM,j1r),e(tM,aW),e(aW,D1r),e(tM,G1r),e(pe,O1r),e(pe,aM),e(aM,sbe),e(sbe,V1r),e(aM,X1r),e(aM,nW),e(nW,z1r),e(aM,Q1r),e(pe,W1r),e(pe,nM),e(nM,lbe),e(lbe,H1r),e(nM,U1r),e(nM,sW),e(sW,J1r),e(nM,Y1r),e(pe,K1r),e(pe,sM),e(sM,ibe),e(ibe,Z1r),e(sM,e9r),e(sM,lW),e(lW,o9r),e(sM,r9r),e(pe,t9r),e(pe,lM),e(lM,dbe),e(dbe,a9r),e(lM,n9r),e(lM,iW),e(iW,s9r),e(lM,l9r),e(pe,i9r),e(pe,iM),e(iM,cbe),e(cbe,d9r),e(iM,c9r),e(iM,dW),e(dW,f9r),e(iM,m9r),e(pe,g9r),e(pe,dM),e(dM,fbe),e(fbe,h9r),e(dM,p9r),e(dM,cW),e(cW,u9r),e(dM,_9r),e(pe,b9r),e(pe,cM),e(cM,mbe),e(mbe,v9r),e(cM,F9r),e(cM,fW),e(fW,T9r),e(cM,M9r),e(pe,E9r),e(pe,fM),e(fM,gbe),e(gbe,C9r),e(fM,w9r),e(fM,mW),e(mW,A9r),e(fM,y9r),e(pe,L9r),e(pe,mM),e(mM,hbe),e(hbe,x9r),e(mM,$9r),e(mM,gW),e(gW,k9r),e(mM,S9r),e(pe,R9r),e(pe,gM),e(gM,pbe),e(pbe,B9r),e(gM,P9r),e(gM,hW),e(hW,I9r),e(gM,q9r),e($r,N9r),M(hM,$r,null),b(f,rPe,_),b(f,oc,_),e(oc,pM),e(pM,ube),M(IL,ube,null),e(oc,j9r),e(oc,_be),e(_be,D9r),b(f,tPe,_),b(f,ar,_),M(qL,ar,null),e(ar,G9r),e(ar,rc),e(rc,O9r),e(rc,pW),e(pW,V9r),e(rc,X9r),e(rc,uW),e(uW,z9r),e(rc,Q9r),e(ar,W9r),e(ar,NL),e(NL,H9r),e(NL,bbe),e(bbe,U9r),e(NL,J9r),e(ar,Y9r),e(ar,kt),M(jL,kt,null),e(kt,K9r),e(kt,vbe),e(vbe,Z9r),e(kt,ebr),e(kt,tc),e(tc,obr),e(tc,Fbe),e(Fbe,rbr),e(tc,tbr),e(tc,_W),e(_W,abr),e(tc,nbr),e(kt,sbr),M(uM,kt,null),e(ar,lbr),e(ar,kr),M(DL,kr,null),e(kr,ibr),e(kr,Tbe),e(Tbe,dbr),e(kr,cbr),e(kr,tn),e(tn,fbr),e(tn,Mbe),e(Mbe,mbr),e(tn,gbr),e(tn,Ebe),e(Ebe,hbr),e(tn,pbr),e(tn,Cbe),e(Cbe,ubr),e(tn,_br),e(kr,bbr),e(kr,wbe),e(wbe,_M),e(_M,Abe),e(Abe,vbr),e(_M,Fbr),e(_M,bW),e(bW,Tbr),e(_M,Mbr),e(kr,Ebr),M(bM,kr,null),b(f,aPe,_),b(f,ac,_),e(ac,vM),e(vM,ybe),M(GL,ybe,null),e(ac,Cbr),e(ac,Lbe),e(Lbe,wbr),b(f,nPe,_),b(f,nr,_),M(OL,nr,null),e(nr,Abr),e(nr,nc),e(nc,ybr),e(nc,vW),e(vW,Lbr),e(nc,xbr),e(nc,FW),e(FW,$br),e(nc,kbr),e(nr,Sbr),e(nr,VL),e(VL,Rbr),e(VL,xbe),e(xbe,Bbr),e(VL,Pbr),e(nr,Ibr),e(nr,St),M(XL,St,null),e(St,qbr),e(St,$be),e($be,Nbr),e(St,jbr),e(St,sc),e(sc,Dbr),e(sc,kbe),e(kbe,Gbr),e(sc,Obr),e(sc,TW),e(TW,Vbr),e(sc,Xbr),e(St,zbr),M(FM,St,null),e(nr,Qbr),e(nr,Sr),M(zL,Sr,null),e(Sr,Wbr),e(Sr,Sbe),e(Sbe,Hbr),e(Sr,Ubr),e(Sr,an),e(an,Jbr),e(an,Rbe),e(Rbe,Ybr),e(an,Kbr),e(an,Bbe),e(Bbe,Zbr),e(an,e2r),e(an,Pbe),e(Pbe,o2r),e(an,r2r),e(Sr,t2r),e(Sr,de),e(de,TM),e(TM,Ibe),e(Ibe,a2r),e(TM,n2r),e(TM,MW),e(MW,s2r),e(TM,l2r),e(de,i2r),e(de,MM),e(MM,qbe),e(qbe,d2r),e(MM,c2r),e(MM,EW),e(EW,f2r),e(MM,m2r),e(de,g2r),e(de,EM),e(EM,Nbe),e(Nbe,h2r),e(EM,p2r),e(EM,CW),e(CW,u2r),e(EM,_2r),e(de,b2r),e(de,CM),e(CM,jbe),e(jbe,v2r),e(CM,F2r),e(CM,wW),e(wW,T2r),e(CM,M2r),e(de,E2r),e(de,wM),e(wM,Dbe),e(Dbe,C2r),e(wM,w2r),e(wM,AW),e(AW,A2r),e(wM,y2r),e(de,L2r),e(de,AM),e(AM,Gbe),e(Gbe,x2r),e(AM,$2r),e(AM,yW),e(yW,k2r),e(AM,S2r),e(de,R2r),e(de,yM),e(yM,Obe),e(Obe,B2r),e(yM,P2r),e(yM,LW),e(LW,I2r),e(yM,q2r),e(de,N2r),e(de,LM),e(LM,Vbe),e(Vbe,j2r),e(LM,D2r),e(LM,xW),e(xW,G2r),e(LM,O2r),e(de,V2r),e(de,xM),e(xM,Xbe),e(Xbe,X2r),e(xM,z2r),e(xM,$W),e($W,Q2r),e(xM,W2r),e(de,H2r),e(de,$M),e($M,zbe),e(zbe,U2r),e($M,J2r),e($M,kW),e(kW,Y2r),e($M,K2r),e(de,Z2r),e(de,kM),e(kM,Qbe),e(Qbe,e5r),e(kM,o5r),e(kM,SW),e(SW,r5r),e(kM,t5r),e(de,a5r),e(de,SM),e(SM,Wbe),e(Wbe,n5r),e(SM,s5r),e(SM,RW),e(RW,l5r),e(SM,i5r),e(de,d5r),e(de,RM),e(RM,Hbe),e(Hbe,c5r),e(RM,f5r),e(RM,BW),e(BW,m5r),e(RM,g5r),e(de,h5r),e(de,BM),e(BM,Ube),e(Ube,p5r),e(BM,u5r),e(BM,PW),e(PW,_5r),e(BM,b5r),e(de,v5r),e(de,PM),e(PM,Jbe),e(Jbe,F5r),e(PM,T5r),e(PM,IW),e(IW,M5r),e(PM,E5r),e(de,C5r),e(de,IM),e(IM,Ybe),e(Ybe,w5r),e(IM,A5r),e(IM,qW),e(qW,y5r),e(IM,L5r),e(de,x5r),e(de,qM),e(qM,Kbe),e(Kbe,$5r),e(qM,k5r),e(qM,NW),e(NW,S5r),e(qM,R5r),e(de,B5r),e(de,NM),e(NM,Zbe),e(Zbe,P5r),e(NM,I5r),e(NM,jW),e(jW,q5r),e(NM,N5r),e(de,j5r),e(de,jM),e(jM,e2e),e(e2e,D5r),e(jM,G5r),e(jM,DW),e(DW,O5r),e(jM,V5r),e(de,X5r),e(de,DM),e(DM,o2e),e(o2e,z5r),e(DM,Q5r),e(DM,GW),e(GW,W5r),e(DM,H5r),e(Sr,U5r),M(GM,Sr,null),b(f,sPe,_),b(f,lc,_),e(lc,OM),e(OM,r2e),M(QL,r2e,null),e(lc,J5r),e(lc,t2e),e(t2e,Y5r),b(f,lPe,_),b(f,sr,_),M(WL,sr,null),e(sr,K5r),e(sr,ic),e(ic,Z5r),e(ic,OW),e(OW,evr),e(ic,ovr),e(ic,VW),e(VW,rvr),e(ic,tvr),e(sr,avr),e(sr,HL),e(HL,nvr),e(HL,a2e),e(a2e,svr),e(HL,lvr),e(sr,ivr),e(sr,Rt),M(UL,Rt,null),e(Rt,dvr),e(Rt,n2e),e(n2e,cvr),e(Rt,fvr),e(Rt,dc),e(dc,mvr),e(dc,s2e),e(s2e,gvr),e(dc,hvr),e(dc,XW),e(XW,pvr),e(dc,uvr),e(Rt,_vr),M(VM,Rt,null),e(sr,bvr),e(sr,Rr),M(JL,Rr,null),e(Rr,vvr),e(Rr,l2e),e(l2e,Fvr),e(Rr,Tvr),e(Rr,nn),e(nn,Mvr),e(nn,i2e),e(i2e,Evr),e(nn,Cvr),e(nn,d2e),e(d2e,wvr),e(nn,Avr),e(nn,c2e),e(c2e,yvr),e(nn,Lvr),e(Rr,xvr),e(Rr,ce),e(ce,XM),e(XM,f2e),e(f2e,$vr),e(XM,kvr),e(XM,zW),e(zW,Svr),e(XM,Rvr),e(ce,Bvr),e(ce,zM),e(zM,m2e),e(m2e,Pvr),e(zM,Ivr),e(zM,QW),e(QW,qvr),e(zM,Nvr),e(ce,jvr),e(ce,QM),e(QM,g2e),e(g2e,Dvr),e(QM,Gvr),e(QM,WW),e(WW,Ovr),e(QM,Vvr),e(ce,Xvr),e(ce,WM),e(WM,h2e),e(h2e,zvr),e(WM,Qvr),e(WM,HW),e(HW,Wvr),e(WM,Hvr),e(ce,Uvr),e(ce,HM),e(HM,p2e),e(p2e,Jvr),e(HM,Yvr),e(HM,UW),e(UW,Kvr),e(HM,Zvr),e(ce,eFr),e(ce,UM),e(UM,u2e),e(u2e,oFr),e(UM,rFr),e(UM,JW),e(JW,tFr),e(UM,aFr),e(ce,nFr),e(ce,JM),e(JM,_2e),e(_2e,sFr),e(JM,lFr),e(JM,YW),e(YW,iFr),e(JM,dFr),e(ce,cFr),e(ce,YM),e(YM,b2e),e(b2e,fFr),e(YM,mFr),e(YM,KW),e(KW,gFr),e(YM,hFr),e(ce,pFr),e(ce,KM),e(KM,v2e),e(v2e,uFr),e(KM,_Fr),e(KM,ZW),e(ZW,bFr),e(KM,vFr),e(ce,FFr),e(ce,ZM),e(ZM,F2e),e(F2e,TFr),e(ZM,MFr),e(ZM,eH),e(eH,EFr),e(ZM,CFr),e(ce,wFr),e(ce,e4),e(e4,T2e),e(T2e,AFr),e(e4,yFr),e(e4,oH),e(oH,LFr),e(e4,xFr),e(ce,$Fr),e(ce,o4),e(o4,M2e),e(M2e,kFr),e(o4,SFr),e(o4,rH),e(rH,RFr),e(o4,BFr),e(ce,PFr),e(ce,r4),e(r4,E2e),e(E2e,IFr),e(r4,qFr),e(r4,tH),e(tH,NFr),e(r4,jFr),e(ce,DFr),e(ce,t4),e(t4,C2e),e(C2e,GFr),e(t4,OFr),e(t4,aH),e(aH,VFr),e(t4,XFr),e(ce,zFr),e(ce,a4),e(a4,w2e),e(w2e,QFr),e(a4,WFr),e(a4,nH),e(nH,HFr),e(a4,UFr),e(ce,JFr),e(ce,n4),e(n4,A2e),e(A2e,YFr),e(n4,KFr),e(n4,sH),e(sH,ZFr),e(n4,e6r),e(ce,o6r),e(ce,s4),e(s4,y2e),e(y2e,r6r),e(s4,t6r),e(s4,lH),e(lH,a6r),e(s4,n6r),e(ce,s6r),e(ce,l4),e(l4,L2e),e(L2e,l6r),e(l4,i6r),e(l4,iH),e(iH,d6r),e(l4,c6r),e(ce,f6r),e(ce,i4),e(i4,x2e),e(x2e,m6r),e(i4,g6r),e(i4,dH),e(dH,h6r),e(i4,p6r),e(ce,u6r),e(ce,d4),e(d4,$2e),e($2e,_6r),e(d4,b6r),e(d4,cH),e(cH,v6r),e(d4,F6r),e(Rr,T6r),M(c4,Rr,null),b(f,iPe,_),b(f,cc,_),e(cc,f4),e(f4,k2e),M(YL,k2e,null),e(cc,M6r),e(cc,S2e),e(S2e,E6r),b(f,dPe,_),b(f,lr,_),M(KL,lr,null),e(lr,C6r),e(lr,fc),e(fc,w6r),e(fc,fH),e(fH,A6r),e(fc,y6r),e(fc,mH),e(mH,L6r),e(fc,x6r),e(lr,$6r),e(lr,ZL),e(ZL,k6r),e(ZL,R2e),e(R2e,S6r),e(ZL,R6r),e(lr,B6r),e(lr,Bt),M(e8,Bt,null),e(Bt,P6r),e(Bt,B2e),e(B2e,I6r),e(Bt,q6r),e(Bt,mc),e(mc,N6r),e(mc,P2e),e(P2e,j6r),e(mc,D6r),e(mc,gH),e(gH,G6r),e(mc,O6r),e(Bt,V6r),M(m4,Bt,null),e(lr,X6r),e(lr,Br),M(o8,Br,null),e(Br,z6r),e(Br,I2e),e(I2e,Q6r),e(Br,W6r),e(Br,sn),e(sn,H6r),e(sn,q2e),e(q2e,U6r),e(sn,J6r),e(sn,N2e),e(N2e,Y6r),e(sn,K6r),e(sn,j2e),e(j2e,Z6r),e(sn,eTr),e(Br,oTr),e(Br,D2e),e(D2e,g4),e(g4,G2e),e(G2e,rTr),e(g4,tTr),e(g4,hH),e(hH,aTr),e(g4,nTr),e(Br,sTr),M(h4,Br,null),b(f,cPe,_),b(f,gc,_),e(gc,p4),e(p4,O2e),M(r8,O2e,null),e(gc,lTr),e(gc,V2e),e(V2e,iTr),b(f,fPe,_),b(f,ir,_),M(t8,ir,null),e(ir,dTr),e(ir,hc),e(hc,cTr),e(hc,pH),e(pH,fTr),e(hc,mTr),e(hc,uH),e(uH,gTr),e(hc,hTr),e(ir,pTr),e(ir,a8),e(a8,uTr),e(a8,X2e),e(X2e,_Tr),e(a8,bTr),e(ir,vTr),e(ir,Pt),M(n8,Pt,null),e(Pt,FTr),e(Pt,z2e),e(z2e,TTr),e(Pt,MTr),e(Pt,pc),e(pc,ETr),e(pc,Q2e),e(Q2e,CTr),e(pc,wTr),e(pc,_H),e(_H,ATr),e(pc,yTr),e(Pt,LTr),M(u4,Pt,null),e(ir,xTr),e(ir,Pr),M(s8,Pr,null),e(Pr,$Tr),e(Pr,W2e),e(W2e,kTr),e(Pr,STr),e(Pr,ln),e(ln,RTr),e(ln,H2e),e(H2e,BTr),e(ln,PTr),e(ln,U2e),e(U2e,ITr),e(ln,qTr),e(ln,J2e),e(J2e,NTr),e(ln,jTr),e(Pr,DTr),e(Pr,Y2e),e(Y2e,_4),e(_4,K2e),e(K2e,GTr),e(_4,OTr),e(_4,bH),e(bH,VTr),e(_4,XTr),e(Pr,zTr),M(b4,Pr,null),b(f,mPe,_),b(f,uc,_),e(uc,v4),e(v4,Z2e),M(l8,Z2e,null),e(uc,QTr),e(uc,e5e),e(e5e,WTr),b(f,gPe,_),b(f,dr,_),M(i8,dr,null),e(dr,HTr),e(dr,_c),e(_c,UTr),e(_c,vH),e(vH,JTr),e(_c,YTr),e(_c,FH),e(FH,KTr),e(_c,ZTr),e(dr,eMr),e(dr,d8),e(d8,oMr),e(d8,o5e),e(o5e,rMr),e(d8,tMr),e(dr,aMr),e(dr,It),M(c8,It,null),e(It,nMr),e(It,r5e),e(r5e,sMr),e(It,lMr),e(It,bc),e(bc,iMr),e(bc,t5e),e(t5e,dMr),e(bc,cMr),e(bc,TH),e(TH,fMr),e(bc,mMr),e(It,gMr),M(F4,It,null),e(dr,hMr),e(dr,Ir),M(f8,Ir,null),e(Ir,pMr),e(Ir,a5e),e(a5e,uMr),e(Ir,_Mr),e(Ir,dn),e(dn,bMr),e(dn,n5e),e(n5e,vMr),e(dn,FMr),e(dn,s5e),e(s5e,TMr),e(dn,MMr),e(dn,l5e),e(l5e,EMr),e(dn,CMr),e(Ir,wMr),e(Ir,oe),e(oe,T4),e(T4,i5e),e(i5e,AMr),e(T4,yMr),e(T4,MH),e(MH,LMr),e(T4,xMr),e(oe,$Mr),e(oe,M4),e(M4,d5e),e(d5e,kMr),e(M4,SMr),e(M4,EH),e(EH,RMr),e(M4,BMr),e(oe,PMr),e(oe,E4),e(E4,c5e),e(c5e,IMr),e(E4,qMr),e(E4,CH),e(CH,NMr),e(E4,jMr),e(oe,DMr),e(oe,C4),e(C4,f5e),e(f5e,GMr),e(C4,OMr),e(C4,wH),e(wH,VMr),e(C4,XMr),e(oe,zMr),e(oe,w4),e(w4,m5e),e(m5e,QMr),e(w4,WMr),e(w4,AH),e(AH,HMr),e(w4,UMr),e(oe,JMr),e(oe,A4),e(A4,g5e),e(g5e,YMr),e(A4,KMr),e(A4,yH),e(yH,ZMr),e(A4,e4r),e(oe,o4r),e(oe,y4),e(y4,h5e),e(h5e,r4r),e(y4,t4r),e(y4,LH),e(LH,a4r),e(y4,n4r),e(oe,s4r),e(oe,L4),e(L4,p5e),e(p5e,l4r),e(L4,i4r),e(L4,xH),e(xH,d4r),e(L4,c4r),e(oe,f4r),e(oe,x4),e(x4,u5e),e(u5e,m4r),e(x4,g4r),e(x4,$H),e($H,h4r),e(x4,p4r),e(oe,u4r),e(oe,$4),e($4,_5e),e(_5e,_4r),e($4,b4r),e($4,kH),e(kH,v4r),e($4,F4r),e(oe,T4r),e(oe,k4),e(k4,b5e),e(b5e,M4r),e(k4,E4r),e(k4,SH),e(SH,C4r),e(k4,w4r),e(oe,A4r),e(oe,S4),e(S4,v5e),e(v5e,y4r),e(S4,L4r),e(S4,RH),e(RH,x4r),e(S4,$4r),e(oe,k4r),e(oe,R4),e(R4,F5e),e(F5e,S4r),e(R4,R4r),e(R4,BH),e(BH,B4r),e(R4,P4r),e(oe,I4r),e(oe,B4),e(B4,T5e),e(T5e,q4r),e(B4,N4r),e(B4,PH),e(PH,j4r),e(B4,D4r),e(oe,G4r),e(oe,P4),e(P4,M5e),e(M5e,O4r),e(P4,V4r),e(P4,IH),e(IH,X4r),e(P4,z4r),e(oe,Q4r),e(oe,I4),e(I4,E5e),e(E5e,W4r),e(I4,H4r),e(I4,qH),e(qH,U4r),e(I4,J4r),e(oe,Y4r),e(oe,q4),e(q4,C5e),e(C5e,K4r),e(q4,Z4r),e(q4,NH),e(NH,eEr),e(q4,oEr),e(oe,rEr),e(oe,N4),e(N4,w5e),e(w5e,tEr),e(N4,aEr),e(N4,jH),e(jH,nEr),e(N4,sEr),e(oe,lEr),e(oe,j4),e(j4,A5e),e(A5e,iEr),e(j4,dEr),e(j4,DH),e(DH,cEr),e(j4,fEr),e(oe,mEr),e(oe,D4),e(D4,y5e),e(y5e,gEr),e(D4,hEr),e(D4,GH),e(GH,pEr),e(D4,uEr),e(oe,_Er),e(oe,G4),e(G4,L5e),e(L5e,bEr),e(G4,vEr),e(G4,OH),e(OH,FEr),e(G4,TEr),e(oe,MEr),e(oe,O4),e(O4,x5e),e(x5e,EEr),e(O4,CEr),e(O4,VH),e(VH,wEr),e(O4,AEr),e(oe,yEr),e(oe,V4),e(V4,$5e),e($5e,LEr),e(V4,xEr),e(V4,XH),e(XH,$Er),e(V4,kEr),e(oe,SEr),e(oe,X4),e(X4,k5e),e(k5e,REr),e(X4,BEr),e(X4,zH),e(zH,PEr),e(X4,IEr),e(oe,qEr),e(oe,z4),e(z4,S5e),e(S5e,NEr),e(z4,jEr),e(z4,QH),e(QH,DEr),e(z4,GEr),e(Ir,OEr),M(Q4,Ir,null),b(f,hPe,_),b(f,vc,_),e(vc,W4),e(W4,R5e),M(m8,R5e,null),e(vc,VEr),e(vc,B5e),e(B5e,XEr),b(f,pPe,_),b(f,cr,_),M(g8,cr,null),e(cr,zEr),e(cr,Fc),e(Fc,QEr),e(Fc,WH),e(WH,WEr),e(Fc,HEr),e(Fc,HH),e(HH,UEr),e(Fc,JEr),e(cr,YEr),e(cr,h8),e(h8,KEr),e(h8,P5e),e(P5e,ZEr),e(h8,eCr),e(cr,oCr),e(cr,qt),M(p8,qt,null),e(qt,rCr),e(qt,I5e),e(I5e,tCr),e(qt,aCr),e(qt,Tc),e(Tc,nCr),e(Tc,q5e),e(q5e,sCr),e(Tc,lCr),e(Tc,UH),e(UH,iCr),e(Tc,dCr),e(qt,cCr),M(H4,qt,null),e(cr,fCr),e(cr,qr),M(u8,qr,null),e(qr,mCr),e(qr,N5e),e(N5e,gCr),e(qr,hCr),e(qr,cn),e(cn,pCr),e(cn,j5e),e(j5e,uCr),e(cn,_Cr),e(cn,D5e),e(D5e,bCr),e(cn,vCr),e(cn,G5e),e(G5e,FCr),e(cn,TCr),e(qr,MCr),e(qr,Oe),e(Oe,U4),e(U4,O5e),e(O5e,ECr),e(U4,CCr),e(U4,JH),e(JH,wCr),e(U4,ACr),e(Oe,yCr),e(Oe,J4),e(J4,V5e),e(V5e,LCr),e(J4,xCr),e(J4,X5e),e(X5e,$Cr),e(J4,kCr),e(Oe,SCr),e(Oe,Y4),e(Y4,z5e),e(z5e,RCr),e(Y4,BCr),e(Y4,YH),e(YH,PCr),e(Y4,ICr),e(Oe,qCr),e(Oe,K4),e(K4,Q5e),e(Q5e,NCr),e(K4,jCr),e(K4,KH),e(KH,DCr),e(K4,GCr),e(Oe,OCr),e(Oe,Z4),e(Z4,W5e),e(W5e,VCr),e(Z4,XCr),e(Z4,ZH),e(ZH,zCr),e(Z4,QCr),e(Oe,WCr),e(Oe,eE),e(eE,H5e),e(H5e,HCr),e(eE,UCr),e(eE,U5e),e(U5e,JCr),e(eE,YCr),e(Oe,KCr),e(Oe,oE),e(oE,J5e),e(J5e,ZCr),e(oE,e3r),e(oE,eU),e(eU,o3r),e(oE,r3r),e(qr,t3r),M(rE,qr,null),b(f,uPe,_),b(f,Mc,_),e(Mc,tE),e(tE,Y5e),M(_8,Y5e,null),e(Mc,a3r),e(Mc,K5e),e(K5e,n3r),b(f,_Pe,_),b(f,fr,_),M(b8,fr,null),e(fr,s3r),e(fr,Ec),e(Ec,l3r),e(Ec,oU),e(oU,i3r),e(Ec,d3r),e(Ec,rU),e(rU,c3r),e(Ec,f3r),e(fr,m3r),e(fr,v8),e(v8,g3r),e(v8,Z5e),e(Z5e,h3r),e(v8,p3r),e(fr,u3r),e(fr,Nt),M(F8,Nt,null),e(Nt,_3r),e(Nt,eve),e(eve,b3r),e(Nt,v3r),e(Nt,Cc),e(Cc,F3r),e(Cc,ove),e(ove,T3r),e(Cc,M3r),e(Cc,tU),e(tU,E3r),e(Cc,C3r),e(Nt,w3r),M(aE,Nt,null),e(fr,A3r),e(fr,Nr),M(T8,Nr,null),e(Nr,y3r),e(Nr,rve),e(rve,L3r),e(Nr,x3r),e(Nr,fn),e(fn,$3r),e(fn,tve),e(tve,k3r),e(fn,S3r),e(fn,ave),e(ave,R3r),e(fn,B3r),e(fn,nve),e(nve,P3r),e(fn,I3r),e(Nr,q3r),e(Nr,Me),e(Me,nE),e(nE,sve),e(sve,N3r),e(nE,j3r),e(nE,aU),e(aU,D3r),e(nE,G3r),e(Me,O3r),e(Me,sE),e(sE,lve),e(lve,V3r),e(sE,X3r),e(sE,nU),e(nU,z3r),e(sE,Q3r),e(Me,W3r),e(Me,lE),e(lE,ive),e(ive,H3r),e(lE,U3r),e(lE,sU),e(sU,J3r),e(lE,Y3r),e(Me,K3r),e(Me,iE),e(iE,dve),e(dve,Z3r),e(iE,ewr),e(iE,lU),e(lU,owr),e(iE,rwr),e(Me,twr),e(Me,dE),e(dE,cve),e(cve,awr),e(dE,nwr),e(dE,iU),e(iU,swr),e(dE,lwr),e(Me,iwr),e(Me,cE),e(cE,fve),e(fve,dwr),e(cE,cwr),e(cE,dU),e(dU,fwr),e(cE,mwr),e(Me,gwr),e(Me,fE),e(fE,mve),e(mve,hwr),e(fE,pwr),e(fE,cU),e(cU,uwr),e(fE,_wr),e(Me,bwr),e(Me,mE),e(mE,gve),e(gve,vwr),e(mE,Fwr),e(mE,fU),e(fU,Twr),e(mE,Mwr),e(Me,Ewr),e(Me,gE),e(gE,hve),e(hve,Cwr),e(gE,wwr),e(gE,mU),e(mU,Awr),e(gE,ywr),e(Me,Lwr),e(Me,hE),e(hE,pve),e(pve,xwr),e(hE,$wr),e(hE,gU),e(gU,kwr),e(hE,Swr),e(Me,Rwr),e(Me,pE),e(pE,uve),e(uve,Bwr),e(pE,Pwr),e(pE,hU),e(hU,Iwr),e(pE,qwr),e(Me,Nwr),e(Me,uE),e(uE,_ve),e(_ve,jwr),e(uE,Dwr),e(uE,pU),e(pU,Gwr),e(uE,Owr),e(Nr,Vwr),M(_E,Nr,null),b(f,bPe,_),b(f,wc,_),e(wc,bE),e(bE,bve),M(M8,bve,null),e(wc,Xwr),e(wc,vve),e(vve,zwr),b(f,vPe,_),b(f,mr,_),M(E8,mr,null),e(mr,Qwr),e(mr,Ac),e(Ac,Wwr),e(Ac,uU),e(uU,Hwr),e(Ac,Uwr),e(Ac,_U),e(_U,Jwr),e(Ac,Ywr),e(mr,Kwr),e(mr,C8),e(C8,Zwr),e(C8,Fve),e(Fve,eAr),e(C8,oAr),e(mr,rAr),e(mr,jt),M(w8,jt,null),e(jt,tAr),e(jt,Tve),e(Tve,aAr),e(jt,nAr),e(jt,yc),e(yc,sAr),e(yc,Mve),e(Mve,lAr),e(yc,iAr),e(yc,bU),e(bU,dAr),e(yc,cAr),e(jt,fAr),M(vE,jt,null),e(mr,mAr),e(mr,jr),M(A8,jr,null),e(jr,gAr),e(jr,Eve),e(Eve,hAr),e(jr,pAr),e(jr,mn),e(mn,uAr),e(mn,Cve),e(Cve,_Ar),e(mn,bAr),e(mn,wve),e(wve,vAr),e(mn,FAr),e(mn,Ave),e(Ave,TAr),e(mn,MAr),e(jr,EAr),e(jr,Le),e(Le,FE),e(FE,yve),e(yve,CAr),e(FE,wAr),e(FE,vU),e(vU,AAr),e(FE,yAr),e(Le,LAr),e(Le,TE),e(TE,Lve),e(Lve,xAr),e(TE,$Ar),e(TE,FU),e(FU,kAr),e(TE,SAr),e(Le,RAr),e(Le,ME),e(ME,xve),e(xve,BAr),e(ME,PAr),e(ME,TU),e(TU,IAr),e(ME,qAr),e(Le,NAr),e(Le,EE),e(EE,$ve),e($ve,jAr),e(EE,DAr),e(EE,MU),e(MU,GAr),e(EE,OAr),e(Le,VAr),e(Le,CE),e(CE,kve),e(kve,XAr),e(CE,zAr),e(CE,EU),e(EU,QAr),e(CE,WAr),e(Le,HAr),e(Le,wE),e(wE,Sve),e(Sve,UAr),e(wE,JAr),e(wE,CU),e(CU,YAr),e(wE,KAr),e(Le,ZAr),e(Le,AE),e(AE,Rve),e(Rve,e0r),e(AE,o0r),e(AE,wU),e(wU,r0r),e(AE,t0r),e(Le,a0r),e(Le,yE),e(yE,Bve),e(Bve,n0r),e(yE,s0r),e(yE,AU),e(AU,l0r),e(yE,i0r),e(Le,d0r),e(Le,LE),e(LE,Pve),e(Pve,c0r),e(LE,f0r),e(LE,yU),e(yU,m0r),e(LE,g0r),e(Le,h0r),e(Le,xE),e(xE,Ive),e(Ive,p0r),e(xE,u0r),e(xE,LU),e(LU,_0r),e(xE,b0r),e(jr,v0r),M($E,jr,null),b(f,FPe,_),b(f,Lc,_),e(Lc,kE),e(kE,qve),M(y8,qve,null),e(Lc,F0r),e(Lc,Nve),e(Nve,T0r),b(f,TPe,_),b(f,gr,_),M(L8,gr,null),e(gr,M0r),e(gr,xc),e(xc,E0r),e(xc,xU),e(xU,C0r),e(xc,w0r),e(xc,$U),e($U,A0r),e(xc,y0r),e(gr,L0r),e(gr,x8),e(x8,x0r),e(x8,jve),e(jve,$0r),e(x8,k0r),e(gr,S0r),e(gr,Dt),M($8,Dt,null),e(Dt,R0r),e(Dt,Dve),e(Dve,B0r),e(Dt,P0r),e(Dt,$c),e($c,I0r),e($c,Gve),e(Gve,q0r),e($c,N0r),e($c,kU),e(kU,j0r),e($c,D0r),e(Dt,G0r),M(SE,Dt,null),e(gr,O0r),e(gr,Dr),M(k8,Dr,null),e(Dr,V0r),e(Dr,Ove),e(Ove,X0r),e(Dr,z0r),e(Dr,gn),e(gn,Q0r),e(gn,Vve),e(Vve,W0r),e(gn,H0r),e(gn,Xve),e(Xve,U0r),e(gn,J0r),e(gn,zve),e(zve,Y0r),e(gn,K0r),e(Dr,Z0r),e(Dr,ke),e(ke,RE),e(RE,Qve),e(Qve,eyr),e(RE,oyr),e(RE,SU),e(SU,ryr),e(RE,tyr),e(ke,ayr),e(ke,BE),e(BE,Wve),e(Wve,nyr),e(BE,syr),e(BE,RU),e(RU,lyr),e(BE,iyr),e(ke,dyr),e(ke,PE),e(PE,Hve),e(Hve,cyr),e(PE,fyr),e(PE,BU),e(BU,myr),e(PE,gyr),e(ke,hyr),e(ke,IE),e(IE,Uve),e(Uve,pyr),e(IE,uyr),e(IE,PU),e(PU,_yr),e(IE,byr),e(ke,vyr),e(ke,qE),e(qE,Jve),e(Jve,Fyr),e(qE,Tyr),e(qE,IU),e(IU,Myr),e(qE,Eyr),e(ke,Cyr),e(ke,NE),e(NE,Yve),e(Yve,wyr),e(NE,Ayr),e(NE,qU),e(qU,yyr),e(NE,Lyr),e(ke,xyr),e(ke,jE),e(jE,Kve),e(Kve,$yr),e(jE,kyr),e(jE,NU),e(NU,Syr),e(jE,Ryr),e(ke,Byr),e(ke,DE),e(DE,Zve),e(Zve,Pyr),e(DE,Iyr),e(DE,jU),e(jU,qyr),e(DE,Nyr),e(ke,jyr),e(ke,GE),e(GE,eFe),e(eFe,Dyr),e(GE,Gyr),e(GE,DU),e(DU,Oyr),e(GE,Vyr),e(Dr,Xyr),M(OE,Dr,null),b(f,MPe,_),b(f,kc,_),e(kc,VE),e(VE,oFe),M(S8,oFe,null),e(kc,zyr),e(kc,rFe),e(rFe,Qyr),b(f,EPe,_),b(f,hr,_),M(R8,hr,null),e(hr,Wyr),e(hr,Sc),e(Sc,Hyr),e(Sc,GU),e(GU,Uyr),e(Sc,Jyr),e(Sc,OU),e(OU,Yyr),e(Sc,Kyr),e(hr,Zyr),e(hr,B8),e(B8,eLr),e(B8,tFe),e(tFe,oLr),e(B8,rLr),e(hr,tLr),e(hr,Gt),M(P8,Gt,null),e(Gt,aLr),e(Gt,aFe),e(aFe,nLr),e(Gt,sLr),e(Gt,Rc),e(Rc,lLr),e(Rc,nFe),e(nFe,iLr),e(Rc,dLr),e(Rc,VU),e(VU,cLr),e(Rc,fLr),e(Gt,mLr),M(XE,Gt,null),e(hr,gLr),e(hr,Gr),M(I8,Gr,null),e(Gr,hLr),e(Gr,sFe),e(sFe,pLr),e(Gr,uLr),e(Gr,hn),e(hn,_Lr),e(hn,lFe),e(lFe,bLr),e(hn,vLr),e(hn,iFe),e(iFe,FLr),e(hn,TLr),e(hn,dFe),e(dFe,MLr),e(hn,ELr),e(Gr,CLr),e(Gr,xe),e(xe,zE),e(zE,cFe),e(cFe,wLr),e(zE,ALr),e(zE,XU),e(XU,yLr),e(zE,LLr),e(xe,xLr),e(xe,QE),e(QE,fFe),e(fFe,$Lr),e(QE,kLr),e(QE,zU),e(zU,SLr),e(QE,RLr),e(xe,BLr),e(xe,WE),e(WE,mFe),e(mFe,PLr),e(WE,ILr),e(WE,QU),e(QU,qLr),e(WE,NLr),e(xe,jLr),e(xe,HE),e(HE,gFe),e(gFe,DLr),e(HE,GLr),e(HE,WU),e(WU,OLr),e(HE,VLr),e(xe,XLr),e(xe,UE),e(UE,hFe),e(hFe,zLr),e(UE,QLr),e(UE,HU),e(HU,WLr),e(UE,HLr),e(xe,ULr),e(xe,JE),e(JE,pFe),e(pFe,JLr),e(JE,YLr),e(JE,UU),e(UU,KLr),e(JE,ZLr),e(xe,e8r),e(xe,YE),e(YE,uFe),e(uFe,o8r),e(YE,r8r),e(YE,JU),e(JU,t8r),e(YE,a8r),e(xe,n8r),e(xe,KE),e(KE,_Fe),e(_Fe,s8r),e(KE,l8r),e(KE,YU),e(YU,i8r),e(KE,d8r),e(xe,c8r),e(xe,ZE),e(ZE,bFe),e(bFe,f8r),e(ZE,m8r),e(ZE,KU),e(KU,g8r),e(ZE,h8r),e(xe,p8r),e(xe,eC),e(eC,vFe),e(vFe,u8r),e(eC,_8r),e(eC,ZU),e(ZU,b8r),e(eC,v8r),e(Gr,F8r),M(oC,Gr,null),b(f,CPe,_),b(f,Bc,_),e(Bc,rC),e(rC,FFe),M(q8,FFe,null),e(Bc,T8r),e(Bc,TFe),e(TFe,M8r),b(f,wPe,_),b(f,pr,_),M(N8,pr,null),e(pr,E8r),e(pr,Pc),e(Pc,C8r),e(Pc,eJ),e(eJ,w8r),e(Pc,A8r),e(Pc,oJ),e(oJ,y8r),e(Pc,L8r),e(pr,x8r),e(pr,j8),e(j8,$8r),e(j8,MFe),e(MFe,k8r),e(j8,S8r),e(pr,R8r),e(pr,Ot),M(D8,Ot,null),e(Ot,B8r),e(Ot,EFe),e(EFe,P8r),e(Ot,I8r),e(Ot,Ic),e(Ic,q8r),e(Ic,CFe),e(CFe,N8r),e(Ic,j8r),e(Ic,rJ),e(rJ,D8r),e(Ic,G8r),e(Ot,O8r),M(tC,Ot,null),e(pr,V8r),e(pr,Or),M(G8,Or,null),e(Or,X8r),e(Or,wFe),e(wFe,z8r),e(Or,Q8r),e(Or,pn),e(pn,W8r),e(pn,AFe),e(AFe,H8r),e(pn,U8r),e(pn,yFe),e(yFe,J8r),e(pn,Y8r),e(pn,LFe),e(LFe,K8r),e(pn,Z8r),e(Or,e7r),e(Or,$e),e($e,aC),e(aC,xFe),e(xFe,o7r),e(aC,r7r),e(aC,tJ),e(tJ,t7r),e(aC,a7r),e($e,n7r),e($e,nC),e(nC,$Fe),e($Fe,s7r),e(nC,l7r),e(nC,aJ),e(aJ,i7r),e(nC,d7r),e($e,c7r),e($e,sC),e(sC,kFe),e(kFe,f7r),e(sC,m7r),e(sC,nJ),e(nJ,g7r),e(sC,h7r),e($e,p7r),e($e,lC),e(lC,SFe),e(SFe,u7r),e(lC,_7r),e(lC,sJ),e(sJ,b7r),e(lC,v7r),e($e,F7r),e($e,iC),e(iC,RFe),e(RFe,T7r),e(iC,M7r),e(iC,lJ),e(lJ,E7r),e(iC,C7r),e($e,w7r),e($e,dC),e(dC,BFe),e(BFe,A7r),e(dC,y7r),e(dC,iJ),e(iJ,L7r),e(dC,x7r),e($e,$7r),e($e,cC),e(cC,PFe),e(PFe,k7r),e(cC,S7r),e(cC,dJ),e(dJ,R7r),e(cC,B7r),e($e,P7r),e($e,fC),e(fC,IFe),e(IFe,I7r),e(fC,q7r),e(fC,cJ),e(cJ,N7r),e(fC,j7r),e($e,D7r),e($e,mC),e(mC,qFe),e(qFe,G7r),e(mC,O7r),e(mC,fJ),e(fJ,V7r),e(mC,X7r),e($e,z7r),e($e,gC),e(gC,NFe),e(NFe,Q7r),e(gC,W7r),e(gC,mJ),e(mJ,H7r),e(gC,U7r),e(Or,J7r),M(hC,Or,null),b(f,APe,_),b(f,qc,_),e(qc,pC),e(pC,jFe),M(O8,jFe,null),e(qc,Y7r),e(qc,DFe),e(DFe,K7r),b(f,yPe,_),b(f,ur,_),M(V8,ur,null),e(ur,Z7r),e(ur,Nc),e(Nc,exr),e(Nc,gJ),e(gJ,oxr),e(Nc,rxr),e(Nc,hJ),e(hJ,txr),e(Nc,axr),e(ur,nxr),e(ur,X8),e(X8,sxr),e(X8,GFe),e(GFe,lxr),e(X8,ixr),e(ur,dxr),e(ur,Vt),M(z8,Vt,null),e(Vt,cxr),e(Vt,OFe),e(OFe,fxr),e(Vt,mxr),e(Vt,jc),e(jc,gxr),e(jc,VFe),e(VFe,hxr),e(jc,pxr),e(jc,pJ),e(pJ,uxr),e(jc,_xr),e(Vt,bxr),M(uC,Vt,null),e(ur,vxr),e(ur,Vr),M(Q8,Vr,null),e(Vr,Fxr),e(Vr,XFe),e(XFe,Txr),e(Vr,Mxr),e(Vr,un),e(un,Exr),e(un,zFe),e(zFe,Cxr),e(un,wxr),e(un,QFe),e(QFe,Axr),e(un,yxr),e(un,WFe),e(WFe,Lxr),e(un,xxr),e(Vr,$xr),e(Vr,je),e(je,_C),e(_C,HFe),e(HFe,kxr),e(_C,Sxr),e(_C,uJ),e(uJ,Rxr),e(_C,Bxr),e(je,Pxr),e(je,bC),e(bC,UFe),e(UFe,Ixr),e(bC,qxr),e(bC,_J),e(_J,Nxr),e(bC,jxr),e(je,Dxr),e(je,vC),e(vC,JFe),e(JFe,Gxr),e(vC,Oxr),e(vC,bJ),e(bJ,Vxr),e(vC,Xxr),e(je,zxr),e(je,FC),e(FC,YFe),e(YFe,Qxr),e(FC,Wxr),e(FC,vJ),e(vJ,Hxr),e(FC,Uxr),e(je,Jxr),e(je,TC),e(TC,KFe),e(KFe,Yxr),e(TC,Kxr),e(TC,FJ),e(FJ,Zxr),e(TC,e$r),e(je,o$r),e(je,MC),e(MC,ZFe),e(ZFe,r$r),e(MC,t$r),e(MC,TJ),e(TJ,a$r),e(MC,n$r),e(je,s$r),e(je,EC),e(EC,e6e),e(e6e,l$r),e(EC,i$r),e(EC,MJ),e(MJ,d$r),e(EC,c$r),e(je,f$r),e(je,CC),e(CC,o6e),e(o6e,m$r),e(CC,g$r),e(CC,EJ),e(EJ,h$r),e(CC,p$r),e(Vr,u$r),M(wC,Vr,null),b(f,LPe,_),b(f,Dc,_),e(Dc,AC),e(AC,r6e),M(W8,r6e,null),e(Dc,_$r),e(Dc,t6e),e(t6e,b$r),b(f,xPe,_),b(f,_r,_),M(H8,_r,null),e(_r,v$r),e(_r,Gc),e(Gc,F$r),e(Gc,CJ),e(CJ,T$r),e(Gc,M$r),e(Gc,wJ),e(wJ,E$r),e(Gc,C$r),e(_r,w$r),e(_r,U8),e(U8,A$r),e(U8,a6e),e(a6e,y$r),e(U8,L$r),e(_r,x$r),e(_r,Xt),M(J8,Xt,null),e(Xt,$$r),e(Xt,n6e),e(n6e,k$r),e(Xt,S$r),e(Xt,Oc),e(Oc,R$r),e(Oc,s6e),e(s6e,B$r),e(Oc,P$r),e(Oc,AJ),e(AJ,I$r),e(Oc,q$r),e(Xt,N$r),M(yC,Xt,null),e(_r,j$r),e(_r,Xr),M(Y8,Xr,null),e(Xr,D$r),e(Xr,l6e),e(l6e,G$r),e(Xr,O$r),e(Xr,_n),e(_n,V$r),e(_n,i6e),e(i6e,X$r),e(_n,z$r),e(_n,d6e),e(d6e,Q$r),e(_n,W$r),e(_n,c6e),e(c6e,H$r),e(_n,U$r),e(Xr,J$r),e(Xr,De),e(De,LC),e(LC,f6e),e(f6e,Y$r),e(LC,K$r),e(LC,yJ),e(yJ,Z$r),e(LC,ekr),e(De,okr),e(De,xC),e(xC,m6e),e(m6e,rkr),e(xC,tkr),e(xC,LJ),e(LJ,akr),e(xC,nkr),e(De,skr),e(De,$C),e($C,g6e),e(g6e,lkr),e($C,ikr),e($C,xJ),e(xJ,dkr),e($C,ckr),e(De,fkr),e(De,kC),e(kC,h6e),e(h6e,mkr),e(kC,gkr),e(kC,$J),e($J,hkr),e(kC,pkr),e(De,ukr),e(De,SC),e(SC,p6e),e(p6e,_kr),e(SC,bkr),e(SC,kJ),e(kJ,vkr),e(SC,Fkr),e(De,Tkr),e(De,RC),e(RC,u6e),e(u6e,Mkr),e(RC,Ekr),e(RC,SJ),e(SJ,Ckr),e(RC,wkr),e(De,Akr),e(De,BC),e(BC,_6e),e(_6e,ykr),e(BC,Lkr),e(BC,RJ),e(RJ,xkr),e(BC,$kr),e(De,kkr),e(De,PC),e(PC,b6e),e(b6e,Skr),e(PC,Rkr),e(PC,BJ),e(BJ,Bkr),e(PC,Pkr),e(Xr,Ikr),M(IC,Xr,null),b(f,$Pe,_),b(f,Vc,_),e(Vc,qC),e(qC,v6e),M(K8,v6e,null),e(Vc,qkr),e(Vc,F6e),e(F6e,Nkr),b(f,kPe,_),b(f,br,_),M(Z8,br,null),e(br,jkr),e(br,Xc),e(Xc,Dkr),e(Xc,PJ),e(PJ,Gkr),e(Xc,Okr),e(Xc,IJ),e(IJ,Vkr),e(Xc,Xkr),e(br,zkr),e(br,e7),e(e7,Qkr),e(e7,T6e),e(T6e,Wkr),e(e7,Hkr),e(br,Ukr),e(br,zt),M(o7,zt,null),e(zt,Jkr),e(zt,M6e),e(M6e,Ykr),e(zt,Kkr),e(zt,zc),e(zc,Zkr),e(zc,E6e),e(E6e,eSr),e(zc,oSr),e(zc,qJ),e(qJ,rSr),e(zc,tSr),e(zt,aSr),M(NC,zt,null),e(br,nSr),e(br,zr),M(r7,zr,null),e(zr,sSr),e(zr,C6e),e(C6e,lSr),e(zr,iSr),e(zr,bn),e(bn,dSr),e(bn,w6e),e(w6e,cSr),e(bn,fSr),e(bn,A6e),e(A6e,mSr),e(bn,gSr),e(bn,y6e),e(y6e,hSr),e(bn,pSr),e(zr,uSr),e(zr,L6e),e(L6e,jC),e(jC,x6e),e(x6e,_Sr),e(jC,bSr),e(jC,NJ),e(NJ,vSr),e(jC,FSr),e(zr,TSr),M(DC,zr,null),b(f,SPe,_),b(f,Qc,_),e(Qc,GC),e(GC,$6e),M(t7,$6e,null),e(Qc,MSr),e(Qc,k6e),e(k6e,ESr),b(f,RPe,_),b(f,vr,_),M(a7,vr,null),e(vr,CSr),e(vr,Wc),e(Wc,wSr),e(Wc,jJ),e(jJ,ASr),e(Wc,ySr),e(Wc,DJ),e(DJ,LSr),e(Wc,xSr),e(vr,$Sr),e(vr,n7),e(n7,kSr),e(n7,S6e),e(S6e,SSr),e(n7,RSr),e(vr,BSr),e(vr,Qt),M(s7,Qt,null),e(Qt,PSr),e(Qt,R6e),e(R6e,ISr),e(Qt,qSr),e(Qt,Hc),e(Hc,NSr),e(Hc,B6e),e(B6e,jSr),e(Hc,DSr),e(Hc,GJ),e(GJ,GSr),e(Hc,OSr),e(Qt,VSr),M(OC,Qt,null),e(vr,XSr),e(vr,Qr),M(l7,Qr,null),e(Qr,zSr),e(Qr,P6e),e(P6e,QSr),e(Qr,WSr),e(Qr,vn),e(vn,HSr),e(vn,I6e),e(I6e,USr),e(vn,JSr),e(vn,q6e),e(q6e,YSr),e(vn,KSr),e(vn,N6e),e(N6e,ZSr),e(vn,eRr),e(Qr,oRr),e(Qr,i7),e(i7,VC),e(VC,j6e),e(j6e,rRr),e(VC,tRr),e(VC,OJ),e(OJ,aRr),e(VC,nRr),e(i7,sRr),e(i7,XC),e(XC,D6e),e(D6e,lRr),e(XC,iRr),e(XC,VJ),e(VJ,dRr),e(XC,cRr),e(Qr,fRr),M(zC,Qr,null),b(f,BPe,_),b(f,Uc,_),e(Uc,QC),e(QC,G6e),M(d7,G6e,null),e(Uc,mRr),e(Uc,O6e),e(O6e,gRr),b(f,PPe,_),b(f,Fr,_),M(c7,Fr,null),e(Fr,hRr),e(Fr,Jc),e(Jc,pRr),e(Jc,XJ),e(XJ,uRr),e(Jc,_Rr),e(Jc,zJ),e(zJ,bRr),e(Jc,vRr),e(Fr,FRr),e(Fr,f7),e(f7,TRr),e(f7,V6e),e(V6e,MRr),e(f7,ERr),e(Fr,CRr),e(Fr,Wt),M(m7,Wt,null),e(Wt,wRr),e(Wt,X6e),e(X6e,ARr),e(Wt,yRr),e(Wt,Yc),e(Yc,LRr),e(Yc,z6e),e(z6e,xRr),e(Yc,$Rr),e(Yc,QJ),e(QJ,kRr),e(Yc,SRr),e(Wt,RRr),M(WC,Wt,null),e(Fr,BRr),e(Fr,Wr),M(g7,Wr,null),e(Wr,PRr),e(Wr,Q6e),e(Q6e,IRr),e(Wr,qRr),e(Wr,Fn),e(Fn,NRr),e(Fn,W6e),e(W6e,jRr),e(Fn,DRr),e(Fn,H6e),e(H6e,GRr),e(Fn,ORr),e(Fn,U6e),e(U6e,VRr),e(Fn,XRr),e(Wr,zRr),e(Wr,J6e),e(J6e,HC),e(HC,Y6e),e(Y6e,QRr),e(HC,WRr),e(HC,WJ),e(WJ,HRr),e(HC,URr),e(Wr,JRr),M(UC,Wr,null),IPe=!0},p(f,[_]){const h7={};_&2&&(h7.$$scope={dirty:_,ctx:f}),sf.$set(h7);const K6e={};_&2&&(K6e.$$scope={dirty:_,ctx:f}),tg.$set(K6e);const Z6e={};_&2&&(Z6e.$$scope={dirty:_,ctx:f}),Pg.$set(Z6e);const eTe={};_&2&&(eTe.$$scope={dirty:_,ctx:f}),lh.$set(eTe);const p7={};_&2&&(p7.$$scope={dirty:_,ctx:f}),ih.$set(p7);const oTe={};_&2&&(oTe.$$scope={dirty:_,ctx:f}),wh.$set(oTe);const Tn={};_&2&&(Tn.$$scope={dirty:_,ctx:f}),Ah.$set(Tn);const rTe={};_&2&&(rTe.$$scope={dirty:_,ctx:f}),xh.$set(rTe);const tTe={};_&2&&(tTe.$$scope={dirty:_,ctx:f}),uu.$set(tTe);const aTe={};_&2&&(aTe.$$scope={dirty:_,ctx:f}),bu.$set(aTe);const u7={};_&2&&(u7.$$scope={dirty:_,ctx:f}),n_.$set(u7);const nTe={};_&2&&(nTe.$$scope={dirty:_,ctx:f}),l_.$set(nTe);const _7={};_&2&&(_7.$$scope={dirty:_,ctx:f}),X_.$set(_7);const sTe={};_&2&&(sTe.$$scope={dirty:_,ctx:f}),Q_.$set(sTe);const b7={};_&2&&(b7.$$scope={dirty:_,ctx:f}),x1.$set(b7);const lTe={};_&2&&(lTe.$$scope={dirty:_,ctx:f}),k1.$set(lTe);const iTe={};_&2&&(iTe.$$scope={dirty:_,ctx:f}),J1.$set(iTe);const dTe={};_&2&&(dTe.$$scope={dirty:_,ctx:f}),K1.$set(dTe);const Kc={};_&2&&(Kc.$$scope={dirty:_,ctx:f}),W9.$set(Kc);const cTe={};_&2&&(cTe.$$scope={dirty:_,ctx:f}),U9.$set(cTe);const fTe={};_&2&&(fTe.$$scope={dirty:_,ctx:f}),wb.$set(fTe);const mTe={};_&2&&(mTe.$$scope={dirty:_,ctx:f}),yb.$set(mTe);const v7={};_&2&&(v7.$$scope={dirty:_,ctx:f}),Bb.$set(v7);const gTe={};_&2&&(gTe.$$scope={dirty:_,ctx:f}),Ib.$set(gTe);const hTe={};_&2&&(hTe.$$scope={dirty:_,ctx:f}),_2.$set(hTe);const pTe={};_&2&&(pTe.$$scope={dirty:_,ctx:f}),v2.$set(pTe);const Jr={};_&2&&(Jr.$$scope={dirty:_,ctx:f}),s5.$set(Jr);const F7={};_&2&&(F7.$$scope={dirty:_,ctx:f}),i5.$set(F7);const uTe={};_&2&&(uTe.$$scope={dirty:_,ctx:f}),f5.$set(uTe);const T7={};_&2&&(T7.$$scope={dirty:_,ctx:f}),g5.$set(T7);const _Te={};_&2&&(_Te.$$scope={dirty:_,ctx:f}),A5.$set(_Te);const Yr={};_&2&&(Yr.$$scope={dirty:_,ctx:f}),L5.$set(Yr);const bTe={};_&2&&(bTe.$$scope={dirty:_,ctx:f}),k5.$set(bTe);const Zc={};_&2&&(Zc.$$scope={dirty:_,ctx:f}),R5.$set(Zc);const vTe={};_&2&&(vTe.$$scope={dirty:_,ctx:f}),V5.$set(vTe);const FTe={};_&2&&(FTe.$$scope={dirty:_,ctx:f}),z5.$set(FTe);const L={};_&2&&(L.$$scope={dirty:_,ctx:f}),Y5.$set(L);const JC={};_&2&&(JC.$$scope={dirty:_,ctx:f}),Z5.$set(JC);const TTe={};_&2&&(TTe.$$scope={dirty:_,ctx:f}),dv.$set(TTe);const MTe={};_&2&&(MTe.$$scope={dirty:_,ctx:f}),fv.$set(MTe);const YC={};_&2&&(YC.$$scope={dirty:_,ctx:f}),pv.$set(YC);const ETe={};_&2&&(ETe.$$scope={dirty:_,ctx:f}),_v.$set(ETe);const CTe={};_&2&&(CTe.$$scope={dirty:_,ctx:f}),Ev.$set(CTe);const KC={};_&2&&(KC.$$scope={dirty:_,ctx:f}),wv.$set(KC);const wTe={};_&2&&(wTe.$$scope={dirty:_,ctx:f}),$v.$set(wTe);const ATe={};_&2&&(ATe.$$scope={dirty:_,ctx:f}),Sv.$set(ATe);const ZC={};_&2&&(ZC.$$scope={dirty:_,ctx:f}),Pv.$set(ZC);const yTe={};_&2&&(yTe.$$scope={dirty:_,ctx:f}),qv.$set(yTe);const LTe={};_&2&&(LTe.$$scope={dirty:_,ctx:f}),Dv.$set(LTe);const e3={};_&2&&(e3.$$scope={dirty:_,ctx:f}),Ov.$set(e3);const xTe={};_&2&&(xTe.$$scope={dirty:_,ctx:f}),Hv.$set(xTe);const $Te={};_&2&&($Te.$$scope={dirty:_,ctx:f}),Jv.$set($Te);const o3={};_&2&&(o3.$$scope={dirty:_,ctx:f}),Zv.$set(o3);const kTe={};_&2&&(kTe.$$scope={dirty:_,ctx:f}),oF.$set(kTe);const STe={};_&2&&(STe.$$scope={dirty:_,ctx:f}),zF.$set(STe);const r3={};_&2&&(r3.$$scope={dirty:_,ctx:f}),WF.$set(r3);const RTe={};_&2&&(RTe.$$scope={dirty:_,ctx:f}),_6.$set(RTe);const BTe={};_&2&&(BTe.$$scope={dirty:_,ctx:f}),v6.$set(BTe);const t3={};_&2&&(t3.$$scope={dirty:_,ctx:f}),S6.$set(t3);const PTe={};_&2&&(PTe.$$scope={dirty:_,ctx:f}),B6.$set(PTe);const ITe={};_&2&&(ITe.$$scope={dirty:_,ctx:f}),q6.$set(ITe);const a3={};_&2&&(a3.$$scope={dirty:_,ctx:f}),j6.$set(a3);const qTe={};_&2&&(qTe.$$scope={dirty:_,ctx:f}),sT.$set(qTe);const NTe={};_&2&&(NTe.$$scope={dirty:_,ctx:f}),iT.$set(NTe);const n3={};_&2&&(n3.$$scope={dirty:_,ctx:f}),vT.$set(n3);const jTe={};_&2&&(jTe.$$scope={dirty:_,ctx:f}),TT.$set(jTe);const DTe={};_&2&&(DTe.$$scope={dirty:_,ctx:f}),HT.$set(DTe);const s3={};_&2&&(s3.$$scope={dirty:_,ctx:f}),JT.$set(s3);const GTe={};_&2&&(GTe.$$scope={dirty:_,ctx:f}),hM.$set(GTe);const OTe={};_&2&&(OTe.$$scope={dirty:_,ctx:f}),uM.$set(OTe);const l3={};_&2&&(l3.$$scope={dirty:_,ctx:f}),bM.$set(l3);const VTe={};_&2&&(VTe.$$scope={dirty:_,ctx:f}),FM.$set(VTe);const XTe={};_&2&&(XTe.$$scope={dirty:_,ctx:f}),GM.$set(XTe);const i3={};_&2&&(i3.$$scope={dirty:_,ctx:f}),VM.$set(i3);const zTe={};_&2&&(zTe.$$scope={dirty:_,ctx:f}),c4.$set(zTe);const QTe={};_&2&&(QTe.$$scope={dirty:_,ctx:f}),m4.$set(QTe);const d3={};_&2&&(d3.$$scope={dirty:_,ctx:f}),h4.$set(d3);const WTe={};_&2&&(WTe.$$scope={dirty:_,ctx:f}),u4.$set(WTe);const HTe={};_&2&&(HTe.$$scope={dirty:_,ctx:f}),b4.$set(HTe);const c3={};_&2&&(c3.$$scope={dirty:_,ctx:f}),F4.$set(c3);const UTe={};_&2&&(UTe.$$scope={dirty:_,ctx:f}),Q4.$set(UTe);const JTe={};_&2&&(JTe.$$scope={dirty:_,ctx:f}),H4.$set(JTe);const f3={};_&2&&(f3.$$scope={dirty:_,ctx:f}),rE.$set(f3);const YTe={};_&2&&(YTe.$$scope={dirty:_,ctx:f}),aE.$set(YTe);const KTe={};_&2&&(KTe.$$scope={dirty:_,ctx:f}),_E.$set(KTe);const m3={};_&2&&(m3.$$scope={dirty:_,ctx:f}),vE.$set(m3);const ZTe={};_&2&&(ZTe.$$scope={dirty:_,ctx:f}),$E.$set(ZTe);const eMe={};_&2&&(eMe.$$scope={dirty:_,ctx:f}),SE.$set(eMe);const g3={};_&2&&(g3.$$scope={dirty:_,ctx:f}),OE.$set(g3);const oMe={};_&2&&(oMe.$$scope={dirty:_,ctx:f}),XE.$set(oMe);const rMe={};_&2&&(rMe.$$scope={dirty:_,ctx:f}),oC.$set(rMe);const h3={};_&2&&(h3.$$scope={dirty:_,ctx:f}),tC.$set(h3);const tMe={};_&2&&(tMe.$$scope={dirty:_,ctx:f}),hC.$set(tMe);const aMe={};_&2&&(aMe.$$scope={dirty:_,ctx:f}),uC.$set(aMe);const p3={};_&2&&(p3.$$scope={dirty:_,ctx:f}),wC.$set(p3);const nMe={};_&2&&(nMe.$$scope={dirty:_,ctx:f}),yC.$set(nMe);const sMe={};_&2&&(sMe.$$scope={dirty:_,ctx:f}),IC.$set(sMe);const u3={};_&2&&(u3.$$scope={dirty:_,ctx:f}),NC.$set(u3);const lMe={};_&2&&(lMe.$$scope={dirty:_,ctx:f}),DC.$set(lMe);const iMe={};_&2&&(iMe.$$scope={dirty:_,ctx:f}),OC.$set(iMe);const _3={};_&2&&(_3.$$scope={dirty:_,ctx:f}),zC.$set(_3);const dMe={};_&2&&(dMe.$$scope={dirty:_,ctx:f}),WC.$set(dMe);const cMe={};_&2&&(cMe.$$scope={dirty:_,ctx:f}),UC.$set(cMe)},i(f){IPe||(E(d.$$.fragment,f),E(va.$$.fragment,f),E(pA.$$.fragment,f),E(uA.$$.fragment,f),E(sf.$$.fragment,f),E(_A.$$.fragment,f),E(bA.$$.fragment,f),E(TA.$$.fragment,f),E(tg.$$.fragment,f),E(MA.$$.fragment,f),E(EA.$$.fragment,f),E(CA.$$.fragment,f),E(yA.$$.fragment,f),E(Pg.$$.fragment,f),E(LA.$$.fragment,f),E(xA.$$.fragment,f),E($A.$$.fragment,f),E(RA.$$.fragment,f),E(lh.$$.fragment,f),E(ih.$$.fragment,f),E(BA.$$.fragment,f),E(PA.$$.fragment,f),E(IA.$$.fragment,f),E(jA.$$.fragment,f),E(wh.$$.fragment,f),E(Ah.$$.fragment,f),E(DA.$$.fragment,f),E(GA.$$.fragment,f),E(OA.$$.fragment,f),E(XA.$$.fragment,f),E(xh.$$.fragment,f),E(zA.$$.fragment,f),E(uu.$$.fragment,f),E(QA.$$.fragment,f),E(WA.$$.fragment,f),E(UA.$$.fragment,f),E(bu.$$.fragment,f),E(JA.$$.fragment,f),E(n_.$$.fragment,f),E(YA.$$.fragment,f),E(KA.$$.fragment,f),E(e0.$$.fragment,f),E(l_.$$.fragment,f),E(o0.$$.fragment,f),E(X_.$$.fragment,f),E(r0.$$.fragment,f),E(t0.$$.fragment,f),E(n0.$$.fragment,f),E(Q_.$$.fragment,f),E(s0.$$.fragment,f),E(x1.$$.fragment,f),E(l0.$$.fragment,f),E(i0.$$.fragment,f),E(c0.$$.fragment,f),E(k1.$$.fragment,f),E(f0.$$.fragment,f),E(J1.$$.fragment,f),E(m0.$$.fragment,f),E(g0.$$.fragment,f),E(p0.$$.fragment,f),E(K1.$$.fragment,f),E(u0.$$.fragment,f),E(W9.$$.fragment,f),E(_0.$$.fragment,f),E(b0.$$.fragment,f),E(F0.$$.fragment,f),E(U9.$$.fragment,f),E(T0.$$.fragment,f),E(wb.$$.fragment,f),E(M0.$$.fragment,f),E(E0.$$.fragment,f),E(w0.$$.fragment,f),E(yb.$$.fragment,f),E(A0.$$.fragment,f),E(Bb.$$.fragment,f),E(y0.$$.fragment,f),E(L0.$$.fragment,f),E($0.$$.fragment,f),E(Ib.$$.fragment,f),E(k0.$$.fragment,f),E(_2.$$.fragment,f),E(S0.$$.fragment,f),E(R0.$$.fragment,f),E(P0.$$.fragment,f),E(v2.$$.fragment,f),E(I0.$$.fragment,f),E(s5.$$.fragment,f),E(q0.$$.fragment,f),E(N0.$$.fragment,f),E(D0.$$.fragment,f),E(i5.$$.fragment,f),E(G0.$$.fragment,f),E(f5.$$.fragment,f),E(O0.$$.fragment,f),E(V0.$$.fragment,f),E(z0.$$.fragment,f),E(g5.$$.fragment,f),E(Q0.$$.fragment,f),E(A5.$$.fragment,f),E(W0.$$.fragment,f),E(H0.$$.fragment,f),E(J0.$$.fragment,f),E(L5.$$.fragment,f),E(Y0.$$.fragment,f),E(k5.$$.fragment,f),E(K0.$$.fragment,f),E(Z0.$$.fragment,f),E(oy.$$.fragment,f),E(R5.$$.fragment,f),E(ry.$$.fragment,f),E(V5.$$.fragment,f),E(ty.$$.fragment,f),E(ay.$$.fragment,f),E(sy.$$.fragment,f),E(z5.$$.fragment,f),E(ly.$$.fragment,f),E(Y5.$$.fragment,f),E(iy.$$.fragment,f),E(dy.$$.fragment,f),E(fy.$$.fragment,f),E(Z5.$$.fragment,f),E(my.$$.fragment,f),E(dv.$$.fragment,f),E(gy.$$.fragment,f),E(hy.$$.fragment,f),E(uy.$$.fragment,f),E(fv.$$.fragment,f),E(_y.$$.fragment,f),E(pv.$$.fragment,f),E(vy.$$.fragment,f),E(Fy.$$.fragment,f),E(My.$$.fragment,f),E(_v.$$.fragment,f),E(Ey.$$.fragment,f),E(Ev.$$.fragment,f),E(Cy.$$.fragment,f),E(wy.$$.fragment,f),E(yy.$$.fragment,f),E(wv.$$.fragment,f),E(Ly.$$.fragment,f),E($v.$$.fragment,f),E(xy.$$.fragment,f),E($y.$$.fragment,f),E(Sy.$$.fragment,f),E(Sv.$$.fragment,f),E(Ry.$$.fragment,f),E(Pv.$$.fragment,f),E(By.$$.fragment,f),E(Py.$$.fragment,f),E(qy.$$.fragment,f),E(qv.$$.fragment,f),E(Ny.$$.fragment,f),E(Dv.$$.fragment,f),E(jy.$$.fragment,f),E(Dy.$$.fragment,f),E(Oy.$$.fragment,f),E(Ov.$$.fragment,f),E(Vy.$$.fragment,f),E(Hv.$$.fragment,f),E(Xy.$$.fragment,f),E(zy.$$.fragment,f),E(Wy.$$.fragment,f),E(Jv.$$.fragment,f),E(Hy.$$.fragment,f),E(Zv.$$.fragment,f),E(Uy.$$.fragment,f),E(Jy.$$.fragment,f),E(Ky.$$.fragment,f),E(oF.$$.fragment,f),E(Zy.$$.fragment,f),E(zF.$$.fragment,f),E(eL.$$.fragment,f),E(oL.$$.fragment,f),E(tL.$$.fragment,f),E(WF.$$.fragment,f),E(aL.$$.fragment,f),E(_6.$$.fragment,f),E(nL.$$.fragment,f),E(sL.$$.fragment,f),E(iL.$$.fragment,f),E(v6.$$.fragment,f),E(dL.$$.fragment,f),E(S6.$$.fragment,f),E(cL.$$.fragment,f),E(fL.$$.fragment,f),E(gL.$$.fragment,f),E(B6.$$.fragment,f),E(hL.$$.fragment,f),E(q6.$$.fragment,f),E(uL.$$.fragment,f),E(_L.$$.fragment,f),E(vL.$$.fragment,f),E(j6.$$.fragment,f),E(FL.$$.fragment,f),E(sT.$$.fragment,f),E(TL.$$.fragment,f),E(ML.$$.fragment,f),E(CL.$$.fragment,f),E(iT.$$.fragment,f),E(wL.$$.fragment,f),E(vT.$$.fragment,f),E(AL.$$.fragment,f),E(yL.$$.fragment,f),E(xL.$$.fragment,f),E(TT.$$.fragment,f),E($L.$$.fragment,f),E(HT.$$.fragment,f),E(kL.$$.fragment,f),E(SL.$$.fragment,f),E(BL.$$.fragment,f),E(JT.$$.fragment,f),E(PL.$$.fragment,f),E(hM.$$.fragment,f),E(IL.$$.fragment,f),E(qL.$$.fragment,f),E(jL.$$.fragment,f),E(uM.$$.fragment,f),E(DL.$$.fragment,f),E(bM.$$.fragment,f),E(GL.$$.fragment,f),E(OL.$$.fragment,f),E(XL.$$.fragment,f),E(FM.$$.fragment,f),E(zL.$$.fragment,f),E(GM.$$.fragment,f),E(QL.$$.fragment,f),E(WL.$$.fragment,f),E(UL.$$.fragment,f),E(VM.$$.fragment,f),E(JL.$$.fragment,f),E(c4.$$.fragment,f),E(YL.$$.fragment,f),E(KL.$$.fragment,f),E(e8.$$.fragment,f),E(m4.$$.fragment,f),E(o8.$$.fragment,f),E(h4.$$.fragment,f),E(r8.$$.fragment,f),E(t8.$$.fragment,f),E(n8.$$.fragment,f),E(u4.$$.fragment,f),E(s8.$$.fragment,f),E(b4.$$.fragment,f),E(l8.$$.fragment,f),E(i8.$$.fragment,f),E(c8.$$.fragment,f),E(F4.$$.fragment,f),E(f8.$$.fragment,f),E(Q4.$$.fragment,f),E(m8.$$.fragment,f),E(g8.$$.fragment,f),E(p8.$$.fragment,f),E(H4.$$.fragment,f),E(u8.$$.fragment,f),E(rE.$$.fragment,f),E(_8.$$.fragment,f),E(b8.$$.fragment,f),E(F8.$$.fragment,f),E(aE.$$.fragment,f),E(T8.$$.fragment,f),E(_E.$$.fragment,f),E(M8.$$.fragment,f),E(E8.$$.fragment,f),E(w8.$$.fragment,f),E(vE.$$.fragment,f),E(A8.$$.fragment,f),E($E.$$.fragment,f),E(y8.$$.fragment,f),E(L8.$$.fragment,f),E($8.$$.fragment,f),E(SE.$$.fragment,f),E(k8.$$.fragment,f),E(OE.$$.fragment,f),E(S8.$$.fragment,f),E(R8.$$.fragment,f),E(P8.$$.fragment,f),E(XE.$$.fragment,f),E(I8.$$.fragment,f),E(oC.$$.fragment,f),E(q8.$$.fragment,f),E(N8.$$.fragment,f),E(D8.$$.fragment,f),E(tC.$$.fragment,f),E(G8.$$.fragment,f),E(hC.$$.fragment,f),E(O8.$$.fragment,f),E(V8.$$.fragment,f),E(z8.$$.fragment,f),E(uC.$$.fragment,f),E(Q8.$$.fragment,f),E(wC.$$.fragment,f),E(W8.$$.fragment,f),E(H8.$$.fragment,f),E(J8.$$.fragment,f),E(yC.$$.fragment,f),E(Y8.$$.fragment,f),E(IC.$$.fragment,f),E(K8.$$.fragment,f),E(Z8.$$.fragment,f),E(o7.$$.fragment,f),E(NC.$$.fragment,f),E(r7.$$.fragment,f),E(DC.$$.fragment,f),E(t7.$$.fragment,f),E(a7.$$.fragment,f),E(s7.$$.fragment,f),E(OC.$$.fragment,f),E(l7.$$.fragment,f),E(zC.$$.fragment,f),E(d7.$$.fragment,f),E(c7.$$.fragment,f),E(m7.$$.fragment,f),E(WC.$$.fragment,f),E(g7.$$.fragment,f),E(UC.$$.fragment,f),IPe=!0)},o(f){C(d.$$.fragment,f),C(va.$$.fragment,f),C(pA.$$.fragment,f),C(uA.$$.fragment,f),C(sf.$$.fragment,f),C(_A.$$.fragment,f),C(bA.$$.fragment,f),C(TA.$$.fragment,f),C(tg.$$.fragment,f),C(MA.$$.fragment,f),C(EA.$$.fragment,f),C(CA.$$.fragment,f),C(yA.$$.fragment,f),C(Pg.$$.fragment,f),C(LA.$$.fragment,f),C(xA.$$.fragment,f),C($A.$$.fragment,f),C(RA.$$.fragment,f),C(lh.$$.fragment,f),C(ih.$$.fragment,f),C(BA.$$.fragment,f),C(PA.$$.fragment,f),C(IA.$$.fragment,f),C(jA.$$.fragment,f),C(wh.$$.fragment,f),C(Ah.$$.fragment,f),C(DA.$$.fragment,f),C(GA.$$.fragment,f),C(OA.$$.fragment,f),C(XA.$$.fragment,f),C(xh.$$.fragment,f),C(zA.$$.fragment,f),C(uu.$$.fragment,f),C(QA.$$.fragment,f),C(WA.$$.fragment,f),C(UA.$$.fragment,f),C(bu.$$.fragment,f),C(JA.$$.fragment,f),C(n_.$$.fragment,f),C(YA.$$.fragment,f),C(KA.$$.fragment,f),C(e0.$$.fragment,f),C(l_.$$.fragment,f),C(o0.$$.fragment,f),C(X_.$$.fragment,f),C(r0.$$.fragment,f),C(t0.$$.fragment,f),C(n0.$$.fragment,f),C(Q_.$$.fragment,f),C(s0.$$.fragment,f),C(x1.$$.fragment,f),C(l0.$$.fragment,f),C(i0.$$.fragment,f),C(c0.$$.fragment,f),C(k1.$$.fragment,f),C(f0.$$.fragment,f),C(J1.$$.fragment,f),C(m0.$$.fragment,f),C(g0.$$.fragment,f),C(p0.$$.fragment,f),C(K1.$$.fragment,f),C(u0.$$.fragment,f),C(W9.$$.fragment,f),C(_0.$$.fragment,f),C(b0.$$.fragment,f),C(F0.$$.fragment,f),C(U9.$$.fragment,f),C(T0.$$.fragment,f),C(wb.$$.fragment,f),C(M0.$$.fragment,f),C(E0.$$.fragment,f),C(w0.$$.fragment,f),C(yb.$$.fragment,f),C(A0.$$.fragment,f),C(Bb.$$.fragment,f),C(y0.$$.fragment,f),C(L0.$$.fragment,f),C($0.$$.fragment,f),C(Ib.$$.fragment,f),C(k0.$$.fragment,f),C(_2.$$.fragment,f),C(S0.$$.fragment,f),C(R0.$$.fragment,f),C(P0.$$.fragment,f),C(v2.$$.fragment,f),C(I0.$$.fragment,f),C(s5.$$.fragment,f),C(q0.$$.fragment,f),C(N0.$$.fragment,f),C(D0.$$.fragment,f),C(i5.$$.fragment,f),C(G0.$$.fragment,f),C(f5.$$.fragment,f),C(O0.$$.fragment,f),C(V0.$$.fragment,f),C(z0.$$.fragment,f),C(g5.$$.fragment,f),C(Q0.$$.fragment,f),C(A5.$$.fragment,f),C(W0.$$.fragment,f),C(H0.$$.fragment,f),C(J0.$$.fragment,f),C(L5.$$.fragment,f),C(Y0.$$.fragment,f),C(k5.$$.fragment,f),C(K0.$$.fragment,f),C(Z0.$$.fragment,f),C(oy.$$.fragment,f),C(R5.$$.fragment,f),C(ry.$$.fragment,f),C(V5.$$.fragment,f),C(ty.$$.fragment,f),C(ay.$$.fragment,f),C(sy.$$.fragment,f),C(z5.$$.fragment,f),C(ly.$$.fragment,f),C(Y5.$$.fragment,f),C(iy.$$.fragment,f),C(dy.$$.fragment,f),C(fy.$$.fragment,f),C(Z5.$$.fragment,f),C(my.$$.fragment,f),C(dv.$$.fragment,f),C(gy.$$.fragment,f),C(hy.$$.fragment,f),C(uy.$$.fragment,f),C(fv.$$.fragment,f),C(_y.$$.fragment,f),C(pv.$$.fragment,f),C(vy.$$.fragment,f),C(Fy.$$.fragment,f),C(My.$$.fragment,f),C(_v.$$.fragment,f),C(Ey.$$.fragment,f),C(Ev.$$.fragment,f),C(Cy.$$.fragment,f),C(wy.$$.fragment,f),C(yy.$$.fragment,f),C(wv.$$.fragment,f),C(Ly.$$.fragment,f),C($v.$$.fragment,f),C(xy.$$.fragment,f),C($y.$$.fragment,f),C(Sy.$$.fragment,f),C(Sv.$$.fragment,f),C(Ry.$$.fragment,f),C(Pv.$$.fragment,f),C(By.$$.fragment,f),C(Py.$$.fragment,f),C(qy.$$.fragment,f),C(qv.$$.fragment,f),C(Ny.$$.fragment,f),C(Dv.$$.fragment,f),C(jy.$$.fragment,f),C(Dy.$$.fragment,f),C(Oy.$$.fragment,f),C(Ov.$$.fragment,f),C(Vy.$$.fragment,f),C(Hv.$$.fragment,f),C(Xy.$$.fragment,f),C(zy.$$.fragment,f),C(Wy.$$.fragment,f),C(Jv.$$.fragment,f),C(Hy.$$.fragment,f),C(Zv.$$.fragment,f),C(Uy.$$.fragment,f),C(Jy.$$.fragment,f),C(Ky.$$.fragment,f),C(oF.$$.fragment,f),C(Zy.$$.fragment,f),C(zF.$$.fragment,f),C(eL.$$.fragment,f),C(oL.$$.fragment,f),C(tL.$$.fragment,f),C(WF.$$.fragment,f),C(aL.$$.fragment,f),C(_6.$$.fragment,f),C(nL.$$.fragment,f),C(sL.$$.fragment,f),C(iL.$$.fragment,f),C(v6.$$.fragment,f),C(dL.$$.fragment,f),C(S6.$$.fragment,f),C(cL.$$.fragment,f),C(fL.$$.fragment,f),C(gL.$$.fragment,f),C(B6.$$.fragment,f),C(hL.$$.fragment,f),C(q6.$$.fragment,f),C(uL.$$.fragment,f),C(_L.$$.fragment,f),C(vL.$$.fragment,f),C(j6.$$.fragment,f),C(FL.$$.fragment,f),C(sT.$$.fragment,f),C(TL.$$.fragment,f),C(ML.$$.fragment,f),C(CL.$$.fragment,f),C(iT.$$.fragment,f),C(wL.$$.fragment,f),C(vT.$$.fragment,f),C(AL.$$.fragment,f),C(yL.$$.fragment,f),C(xL.$$.fragment,f),C(TT.$$.fragment,f),C($L.$$.fragment,f),C(HT.$$.fragment,f),C(kL.$$.fragment,f),C(SL.$$.fragment,f),C(BL.$$.fragment,f),C(JT.$$.fragment,f),C(PL.$$.fragment,f),C(hM.$$.fragment,f),C(IL.$$.fragment,f),C(qL.$$.fragment,f),C(jL.$$.fragment,f),C(uM.$$.fragment,f),C(DL.$$.fragment,f),C(bM.$$.fragment,f),C(GL.$$.fragment,f),C(OL.$$.fragment,f),C(XL.$$.fragment,f),C(FM.$$.fragment,f),C(zL.$$.fragment,f),C(GM.$$.fragment,f),C(QL.$$.fragment,f),C(WL.$$.fragment,f),C(UL.$$.fragment,f),C(VM.$$.fragment,f),C(JL.$$.fragment,f),C(c4.$$.fragment,f),C(YL.$$.fragment,f),C(KL.$$.fragment,f),C(e8.$$.fragment,f),C(m4.$$.fragment,f),C(o8.$$.fragment,f),C(h4.$$.fragment,f),C(r8.$$.fragment,f),C(t8.$$.fragment,f),C(n8.$$.fragment,f),C(u4.$$.fragment,f),C(s8.$$.fragment,f),C(b4.$$.fragment,f),C(l8.$$.fragment,f),C(i8.$$.fragment,f),C(c8.$$.fragment,f),C(F4.$$.fragment,f),C(f8.$$.fragment,f),C(Q4.$$.fragment,f),C(m8.$$.fragment,f),C(g8.$$.fragment,f),C(p8.$$.fragment,f),C(H4.$$.fragment,f),C(u8.$$.fragment,f),C(rE.$$.fragment,f),C(_8.$$.fragment,f),C(b8.$$.fragment,f),C(F8.$$.fragment,f),C(aE.$$.fragment,f),C(T8.$$.fragment,f),C(_E.$$.fragment,f),C(M8.$$.fragment,f),C(E8.$$.fragment,f),C(w8.$$.fragment,f),C(vE.$$.fragment,f),C(A8.$$.fragment,f),C($E.$$.fragment,f),C(y8.$$.fragment,f),C(L8.$$.fragment,f),C($8.$$.fragment,f),C(SE.$$.fragment,f),C(k8.$$.fragment,f),C(OE.$$.fragment,f),C(S8.$$.fragment,f),C(R8.$$.fragment,f),C(P8.$$.fragment,f),C(XE.$$.fragment,f),C(I8.$$.fragment,f),C(oC.$$.fragment,f),C(q8.$$.fragment,f),C(N8.$$.fragment,f),C(D8.$$.fragment,f),C(tC.$$.fragment,f),C(G8.$$.fragment,f),C(hC.$$.fragment,f),C(O8.$$.fragment,f),C(V8.$$.fragment,f),C(z8.$$.fragment,f),C(uC.$$.fragment,f),C(Q8.$$.fragment,f),C(wC.$$.fragment,f),C(W8.$$.fragment,f),C(H8.$$.fragment,f),C(J8.$$.fragment,f),C(yC.$$.fragment,f),C(Y8.$$.fragment,f),C(IC.$$.fragment,f),C(K8.$$.fragment,f),C(Z8.$$.fragment,f),C(o7.$$.fragment,f),C(NC.$$.fragment,f),C(r7.$$.fragment,f),C(DC.$$.fragment,f),C(t7.$$.fragment,f),C(a7.$$.fragment,f),C(s7.$$.fragment,f),C(OC.$$.fragment,f),C(l7.$$.fragment,f),C(zC.$$.fragment,f),C(d7.$$.fragment,f),C(c7.$$.fragment,f),C(m7.$$.fragment,f),C(WC.$$.fragment,f),C(g7.$$.fragment,f),C(UC.$$.fragment,f),IPe=!1},d(f){t(g),f&&t(v),f&&t(p),w(d),f&&t(of),f&&t(Kr),f&&t(Ie),f&&t(Ve),f&&t(tf),w(va,f),f&&t(Xe),f&&t(Ae),f&&t(Mo),f&&t(Fa),f&&t(PRe),f&&t(ii),w(pA),f&&t(IRe),f&&t(An),f&&t(qRe),w(uA,f),f&&t(NRe),f&&t(kx),f&&t(jRe),w(sf,f),f&&t(DRe),f&&t(di),w(_A),f&&t(GRe),f&&t(Eo),w(bA),w(TA),w(tg),w(MA),f&&t(ORe),f&&t(fi),w(EA),f&&t(VRe),f&&t(Co),w(CA),w(yA),w(Pg),w(LA),f&&t(XRe),f&&t(mi),w(xA),f&&t(zRe),f&&t(wo),w($A),w(RA),w(lh),w(ih),w(BA),f&&t(QRe),f&&t(gi),w(PA),f&&t(WRe),f&&t(Ao),w(IA),w(jA),w(wh),w(Ah),w(DA),f&&t(HRe),f&&t(pi),w(GA),f&&t(URe),f&&t(yo),w(OA),w(XA),w(xh),w(zA),w(uu),f&&t(JRe),f&&t(bi),w(QA),f&&t(YRe),f&&t(Lo),w(WA),w(UA),w(bu),w(JA),w(n_),f&&t(KRe),f&&t(Ti),w(YA),f&&t(ZRe),f&&t(xo),w(KA),w(e0),w(l_),w(o0),w(X_),f&&t(eBe),f&&t(Ci),w(r0),f&&t(oBe),f&&t($o),w(t0),w(n0),w(Q_),w(s0),w(x1),f&&t(rBe),f&&t(yi),w(l0),f&&t(tBe),f&&t(ko),w(i0),w(c0),w(k1),w(f0),w(J1),f&&t(aBe),f&&t($i),w(m0),f&&t(nBe),f&&t(So),w(g0),w(p0),w(K1),w(u0),w(W9),f&&t(sBe),f&&t(Ri),w(_0),f&&t(lBe),f&&t(Ro),w(b0),w(F0),w(U9),w(T0),w(wb),f&&t(iBe),f&&t(Ii),w(M0),f&&t(dBe),f&&t(Bo),w(E0),w(w0),w(yb),w(A0),w(Bb),f&&t(cBe),f&&t(ji),w(y0),f&&t(fBe),f&&t(Po),w(L0),w($0),w(Ib),w(k0),w(_2),f&&t(mBe),f&&t(Oi),w(S0),f&&t(gBe),f&&t(Io),w(R0),w(P0),w(v2),w(I0),w(s5),f&&t(hBe),f&&t(zi),w(q0),f&&t(pBe),f&&t(qo),w(N0),w(D0),w(i5),w(G0),w(f5),f&&t(uBe),f&&t(Hi),w(O0),f&&t(_Be),f&&t(No),w(V0),w(z0),w(g5),w(Q0),w(A5),f&&t(bBe),f&&t(Yi),w(W0),f&&t(vBe),f&&t(jo),w(H0),w(J0),w(L5),w(Y0),w(k5),f&&t(FBe),f&&t(ed),w(K0),f&&t(TBe),f&&t(Do),w(Z0),w(oy),w(R5),w(ry),w(V5),f&&t(MBe),f&&t(td),w(ty),f&&t(EBe),f&&t(Go),w(ay),w(sy),w(z5),w(ly),w(Y5),f&&t(CBe),f&&t(sd),w(iy),f&&t(wBe),f&&t(Oo),w(dy),w(fy),w(Z5),w(my),w(dv),f&&t(ABe),f&&t(dd),w(gy),f&&t(yBe),f&&t(Vo),w(hy),w(uy),w(fv),w(_y),w(pv),f&&t(LBe),f&&t(md),w(vy),f&&t(xBe),f&&t(Xo),w(Fy),w(My),w(_v),w(Ey),w(Ev),f&&t($Be),f&&t(pd),w(Cy),f&&t(kBe),f&&t(zo),w(wy),w(yy),w(wv),w(Ly),w($v),f&&t(SBe),f&&t(vd),w(xy),f&&t(RBe),f&&t(Qo),w($y),w(Sy),w(Sv),w(Ry),w(Pv),f&&t(BBe),f&&t(Md),w(By),f&&t(PBe),f&&t(Wo),w(Py),w(qy),w(qv),w(Ny),w(Dv),f&&t(IBe),f&&t(wd),w(jy),f&&t(qBe),f&&t(Ho),w(Dy),w(Oy),w(Ov),w(Vy),w(Hv),f&&t(NBe),f&&t(Ld),w(Xy),f&&t(jBe),f&&t(Uo),w(zy),w(Wy),w(Jv),w(Hy),w(Zv),f&&t(DBe),f&&t(kd),w(Uy),f&&t(GBe),f&&t(Jo),w(Jy),w(Ky),w(oF),w(Zy),w(zF),f&&t(OBe),f&&t(Bd),w(eL),f&&t(VBe),f&&t(Yo),w(oL),w(tL),w(WF),w(aL),w(_6),f&&t(XBe),f&&t(qd),w(nL),f&&t(zBe),f&&t(Ko),w(sL),w(iL),w(v6),w(dL),w(S6),f&&t(QBe),f&&t(Dd),w(cL),f&&t(WBe),f&&t(Zo),w(fL),w(gL),w(B6),w(hL),w(q6),f&&t(HBe),f&&t(Vd),w(uL),f&&t(UBe),f&&t(er),w(_L),w(vL),w(j6),w(FL),w(sT),f&&t(JBe),f&&t(Qd),w(TL),f&&t(YBe),f&&t(or),w(ML),w(CL),w(iT),w(wL),w(vT),f&&t(KBe),f&&t(Ud),w(AL),f&&t(ZBe),f&&t(rr),w(yL),w(xL),w(TT),w($L),w(HT),f&&t(ePe),f&&t(Kd),w(kL),f&&t(oPe),f&&t(tr),w(SL),w(BL),w(JT),w(PL),w(hM),f&&t(rPe),f&&t(oc),w(IL),f&&t(tPe),f&&t(ar),w(qL),w(jL),w(uM),w(DL),w(bM),f&&t(aPe),f&&t(ac),w(GL),f&&t(nPe),f&&t(nr),w(OL),w(XL),w(FM),w(zL),w(GM),f&&t(sPe),f&&t(lc),w(QL),f&&t(lPe),f&&t(sr),w(WL),w(UL),w(VM),w(JL),w(c4),f&&t(iPe),f&&t(cc),w(YL),f&&t(dPe),f&&t(lr),w(KL),w(e8),w(m4),w(o8),w(h4),f&&t(cPe),f&&t(gc),w(r8),f&&t(fPe),f&&t(ir),w(t8),w(n8),w(u4),w(s8),w(b4),f&&t(mPe),f&&t(uc),w(l8),f&&t(gPe),f&&t(dr),w(i8),w(c8),w(F4),w(f8),w(Q4),f&&t(hPe),f&&t(vc),w(m8),f&&t(pPe),f&&t(cr),w(g8),w(p8),w(H4),w(u8),w(rE),f&&t(uPe),f&&t(Mc),w(_8),f&&t(_Pe),f&&t(fr),w(b8),w(F8),w(aE),w(T8),w(_E),f&&t(bPe),f&&t(wc),w(M8),f&&t(vPe),f&&t(mr),w(E8),w(w8),w(vE),w(A8),w($E),f&&t(FPe),f&&t(Lc),w(y8),f&&t(TPe),f&&t(gr),w(L8),w($8),w(SE),w(k8),w(OE),f&&t(MPe),f&&t(kc),w(S8),f&&t(EPe),f&&t(hr),w(R8),w(P8),w(XE),w(I8),w(oC),f&&t(CPe),f&&t(Bc),w(q8),f&&t(wPe),f&&t(pr),w(N8),w(D8),w(tC),w(G8),w(hC),f&&t(APe),f&&t(qc),w(O8),f&&t(yPe),f&&t(ur),w(V8),w(z8),w(uC),w(Q8),w(wC),f&&t(LPe),f&&t(Dc),w(W8),f&&t(xPe),f&&t(_r),w(H8),w(J8),w(yC),w(Y8),w(IC),f&&t($Pe),f&&t(Vc),w(K8),f&&t(kPe),f&&t(br),w(Z8),w(o7),w(NC),w(r7),w(DC),f&&t(SPe),f&&t(Qc),w(t7),f&&t(RPe),f&&t(vr),w(a7),w(s7),w(OC),w(l7),w(zC),f&&t(BPe),f&&t(Uc),w(d7),f&&t(PPe),f&&t(Fr),w(c7),w(m7),w(WC),w(g7),w(UC)}}}const ACt={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function yCt(A){return x4t(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class BCt extends w4t{constructor(g){super();A4t(this,g,yCt,wCt,y4t,{})}}export{BCt as default,ACt as metadata};
