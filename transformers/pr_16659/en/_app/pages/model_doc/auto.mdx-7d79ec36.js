import{S as v3t,i as T3t,s as M3t,e as a,k as l,w as f,t as o,M as E3t,c as n,d as t,m as i,a as s,x as m,h as r,b as d,F as e,g as b,y as g,q as h,o as p,B as _,v as C3t}from"../../chunks/vendor-6b77c823.js";import{T as $Pr}from"../../chunks/Tip-39098574.js";import{D as E}from"../../chunks/Docstring-abef54e3.js";import{C as A}from"../../chunks/CodeBlock-3a8b25a8.js";import{I as X}from"../../chunks/IconCopyLink-7a11ce68.js";function w3t(If){let Z,io,de,Ce,lo,ge,Me,Xo,Ii,qf,fa,qi,Ni,yC,Nf,xe,co,ji,Gn,LC,On,Vn,xC,Di,Xn,kC,Gi,jf,Da;return{c(){Z=a("p"),io=o("If your "),de=a("code"),Ce=o("NewModelConfig"),lo=o(" is a subclass of "),ge=a("code"),Me=o("PretrainedConfig"),Xo=o(`, make sure its
`),Ii=a("code"),qf=o("model_type"),fa=o(" attribute is set to the same key you use when registering the config (here "),qi=a("code"),Ni=o('"new-model"'),yC=o(")."),Nf=l(),xe=a("p"),co=o("Likewise, if your "),ji=a("code"),Gn=o("NewModel"),LC=o(" is a subclass of "),On=a("a"),Vn=o("PreTrainedModel"),xC=o(`, make sure its
`),Di=a("code"),Xn=o("config_class"),kC=o(` attribute is set to the same class you use when registering the model (here
`),Gi=a("code"),jf=o("NewModelConfig"),Da=o(")."),this.h()},l(fo){Z=n(fo,"P",{});var ue=s(Z);io=r(ue,"If your "),de=n(ue,"CODE",{});var F7=s(de);Ce=r(F7,"NewModelConfig"),F7.forEach(t),lo=r(ue," is a subclass of "),ge=n(ue,"CODE",{});var Oi=s(ge);Me=r(Oi,"PretrainedConfig"),Oi.forEach(t),Xo=r(ue,`, make sure its
`),Ii=n(ue,"CODE",{});var v7=s(Ii);qf=r(v7,"model_type"),v7.forEach(t),fa=r(ue," attribute is set to the same key you use when registering the config (here "),qi=n(ue,"CODE",{});var T7=s(qi);Ni=r(T7,'"new-model"'),T7.forEach(t),yC=r(ue,")."),ue.forEach(t),Nf=i(fo),xe=n(fo,"P",{});var zo=s(xe);co=r(zo,"Likewise, if your "),ji=n(zo,"CODE",{});var Ga=s(ji);Gn=r(Ga,"NewModel"),Ga.forEach(t),LC=r(zo," is a subclass of "),On=n(zo,"A",{href:!0});var M7=s(On);Vn=r(M7,"PreTrainedModel"),M7.forEach(t),xC=r(zo,`, make sure its
`),Di=n(zo,"CODE",{});var Df=s(Di);Xn=r(Df,"config_class"),Df.forEach(t),kC=r(zo,` attribute is set to the same class you use when registering the model (here
`),Gi=n(zo,"CODE",{});var E7=s(Gi);jf=r(E7,"NewModelConfig"),E7.forEach(t),Da=r(zo,")."),zo.forEach(t),this.h()},h(){d(On,"href","/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel")},m(fo,ue){b(fo,Z,ue),e(Z,io),e(Z,de),e(de,Ce),e(Z,lo),e(Z,ge),e(ge,Me),e(Z,Xo),e(Z,Ii),e(Ii,qf),e(Z,fa),e(Z,qi),e(qi,Ni),e(Z,yC),b(fo,Nf,ue),b(fo,xe,ue),e(xe,co),e(xe,ji),e(ji,Gn),e(xe,LC),e(xe,On),e(On,Vn),e(xe,xC),e(xe,Di),e(Di,Xn),e(xe,kC),e(xe,Gi),e(Gi,jf),e(xe,Da)},d(fo){fo&&t(Z),fo&&t(Nf),fo&&t(xe)}}}function A3t(If){let Z,io,de,Ce,lo;return{c(){Z=a("p"),io=o("Passing "),de=a("code"),Ce=o("use_auth_token=True"),lo=o(" is required when you want to use a private model.")},l(ge){Z=n(ge,"P",{});var Me=s(Z);io=r(Me,"Passing "),de=n(Me,"CODE",{});var Xo=s(de);Ce=r(Xo,"use_auth_token=True"),Xo.forEach(t),lo=r(Me," is required when you want to use a private model."),Me.forEach(t)},m(ge,Me){b(ge,Z,Me),e(Z,io),e(Z,de),e(de,Ce),e(Z,lo)},d(ge){ge&&t(Z)}}}function y3t(If){let Z,io,de,Ce,lo;return{c(){Z=a("p"),io=o("Passing "),de=a("code"),Ce=o("use_auth_token=True"),lo=o(" is required when you want to use a private model.")},l(ge){Z=n(ge,"P",{});var Me=s(Z);io=r(Me,"Passing "),de=n(Me,"CODE",{});var Xo=s(de);Ce=r(Xo,"use_auth_token=True"),Xo.forEach(t),lo=r(Me," is required when you want to use a private model."),Me.forEach(t)},m(ge,Me){b(ge,Z,Me),e(Z,io),e(Z,de),e(de,Ce),e(Z,lo)},d(ge){ge&&t(Z)}}}function L3t(If){let Z,io,de,Ce,lo,ge,Me,Xo,Ii,qf,fa,qi,Ni,yC,Nf,xe,co,ji,Gn,LC,On,Vn,xC,Di,Xn,kC,Gi,jf,Da,fo,ue,F7,Oi,v7,T7,zo,Ga,M7,Df,E7,XIe,SRe,Vi,Gf,oY,SC,zIe,rY,QIe,RRe,zn,WIe,tY,HIe,UIe,aY,JIe,YIe,BRe,RC,PRe,C7,KIe,$Re,Of,IRe,Xi,Vf,nY,BC,ZIe,sY,eqe,qRe,Qo,PC,oqe,$C,rqe,w7,tqe,aqe,nqe,IC,sqe,lY,lqe,iqe,dqe,mo,qC,cqe,iY,fqe,mqe,zi,gqe,dY,hqe,pqe,cY,_qe,uqe,bqe,F,Xf,fY,Fqe,vqe,A7,Tqe,Mqe,Eqe,zf,mY,Cqe,wqe,y7,Aqe,yqe,Lqe,Qf,gY,xqe,kqe,L7,Sqe,Rqe,Bqe,Wf,hY,Pqe,$qe,x7,Iqe,qqe,Nqe,Hf,pY,jqe,Dqe,k7,Gqe,Oqe,Vqe,Uf,_Y,Xqe,zqe,S7,Qqe,Wqe,Hqe,Jf,uY,Uqe,Jqe,R7,Yqe,Kqe,Zqe,Yf,bY,eNe,oNe,B7,rNe,tNe,aNe,Kf,FY,nNe,sNe,P7,lNe,iNe,dNe,Zf,vY,cNe,fNe,$7,mNe,gNe,hNe,em,TY,pNe,_Ne,I7,uNe,bNe,FNe,om,MY,vNe,TNe,q7,MNe,ENe,CNe,rm,EY,wNe,ANe,N7,yNe,LNe,xNe,tm,CY,kNe,SNe,j7,RNe,BNe,PNe,am,wY,$Ne,INe,D7,qNe,NNe,jNe,nm,AY,DNe,GNe,G7,ONe,VNe,XNe,sm,yY,zNe,QNe,O7,WNe,HNe,UNe,lm,LY,JNe,YNe,V7,KNe,ZNe,eje,im,xY,oje,rje,X7,tje,aje,nje,dm,kY,sje,lje,z7,ije,dje,cje,cm,SY,fje,mje,Q7,gje,hje,pje,fm,RY,_je,uje,W7,bje,Fje,vje,mm,BY,Tje,Mje,H7,Eje,Cje,wje,gm,PY,Aje,yje,U7,Lje,xje,kje,hm,$Y,Sje,Rje,J7,Bje,Pje,$je,pm,IY,Ije,qje,Y7,Nje,jje,Dje,_m,qY,Gje,Oje,K7,Vje,Xje,zje,um,NY,Qje,Wje,Z7,Hje,Uje,Jje,bm,jY,Yje,Kje,ex,Zje,eDe,oDe,Fm,DY,rDe,tDe,ox,aDe,nDe,sDe,vm,GY,lDe,iDe,rx,dDe,cDe,fDe,Tm,OY,mDe,gDe,tx,hDe,pDe,_De,Mm,VY,uDe,bDe,ax,FDe,vDe,TDe,Em,XY,MDe,EDe,nx,CDe,wDe,ADe,Cm,zY,yDe,LDe,QY,xDe,kDe,SDe,wm,WY,RDe,BDe,sx,PDe,$De,IDe,Am,HY,qDe,NDe,lx,jDe,DDe,GDe,ym,UY,ODe,VDe,ix,XDe,zDe,QDe,Lm,JY,WDe,HDe,dx,UDe,JDe,YDe,xm,YY,KDe,ZDe,cx,eGe,oGe,rGe,km,KY,tGe,aGe,fx,nGe,sGe,lGe,Sm,ZY,iGe,dGe,mx,cGe,fGe,mGe,Rm,eK,gGe,hGe,gx,pGe,_Ge,uGe,Bm,oK,bGe,FGe,hx,vGe,TGe,MGe,Pm,rK,EGe,CGe,px,wGe,AGe,yGe,$m,tK,LGe,xGe,_x,kGe,SGe,RGe,Im,aK,BGe,PGe,ux,$Ge,IGe,qGe,qm,nK,NGe,jGe,bx,DGe,GGe,OGe,Nm,sK,VGe,XGe,Fx,zGe,QGe,WGe,jm,lK,HGe,UGe,vx,JGe,YGe,KGe,Dm,iK,ZGe,eOe,Tx,oOe,rOe,tOe,Gm,dK,aOe,nOe,Mx,sOe,lOe,iOe,Om,cK,dOe,cOe,Ex,fOe,mOe,gOe,Vm,fK,hOe,pOe,Cx,_Oe,uOe,bOe,Xm,mK,FOe,vOe,wx,TOe,MOe,EOe,zm,gK,COe,wOe,Ax,AOe,yOe,LOe,Qm,hK,xOe,kOe,yx,SOe,ROe,BOe,Wm,pK,POe,$Oe,Lx,IOe,qOe,NOe,Hm,_K,jOe,DOe,xx,GOe,OOe,VOe,Um,uK,XOe,zOe,kx,QOe,WOe,HOe,Jm,bK,UOe,JOe,Sx,YOe,KOe,ZOe,Ym,FK,eVe,oVe,Rx,rVe,tVe,aVe,Km,vK,nVe,sVe,Bx,lVe,iVe,dVe,Zm,TK,cVe,fVe,Px,mVe,gVe,hVe,eg,MK,pVe,_Ve,$x,uVe,bVe,FVe,og,EK,vVe,TVe,Ix,MVe,EVe,CVe,rg,CK,wVe,AVe,qx,yVe,LVe,xVe,tg,wK,kVe,SVe,Nx,RVe,BVe,PVe,ag,AK,$Ve,IVe,jx,qVe,NVe,jVe,ng,yK,DVe,GVe,Dx,OVe,VVe,XVe,sg,LK,zVe,QVe,Gx,WVe,HVe,UVe,lg,xK,JVe,YVe,Ox,KVe,ZVe,eXe,ig,kK,oXe,rXe,Vx,tXe,aXe,nXe,dg,SK,sXe,lXe,Xx,iXe,dXe,cXe,cg,RK,fXe,mXe,zx,gXe,hXe,pXe,fg,BK,_Xe,uXe,Qx,bXe,FXe,vXe,mg,PK,TXe,MXe,Wx,EXe,CXe,wXe,gg,$K,AXe,yXe,Hx,LXe,xXe,kXe,hg,IK,SXe,RXe,Ux,BXe,PXe,$Xe,pg,qK,IXe,qXe,Jx,NXe,jXe,DXe,_g,NK,GXe,OXe,Yx,VXe,XXe,zXe,ug,jK,QXe,WXe,Kx,HXe,UXe,JXe,bg,DK,YXe,KXe,Zx,ZXe,eze,oze,Fg,GK,rze,tze,ek,aze,nze,sze,vg,OK,lze,ize,ok,dze,cze,fze,Tg,VK,mze,gze,rk,hze,pze,_ze,Mg,XK,uze,bze,tk,Fze,vze,Tze,Eg,zK,Mze,Eze,ak,Cze,wze,Aze,Cg,QK,yze,Lze,nk,xze,kze,Sze,wg,WK,Rze,Bze,sk,Pze,$ze,Ize,Ag,HK,qze,Nze,lk,jze,Dze,Gze,yg,UK,Oze,Vze,ik,Xze,zze,Qze,Lg,JK,Wze,Hze,dk,Uze,Jze,Yze,xg,YK,Kze,Zze,ck,eQe,oQe,rQe,kg,KK,tQe,aQe,fk,nQe,sQe,lQe,Sg,ZK,iQe,dQe,mk,cQe,fQe,mQe,Rg,eZ,gQe,hQe,gk,pQe,_Qe,uQe,Bg,oZ,bQe,FQe,hk,vQe,TQe,MQe,Pg,rZ,EQe,CQe,pk,wQe,AQe,yQe,$g,tZ,LQe,xQe,_k,kQe,SQe,RQe,Ig,aZ,BQe,PQe,uk,$Qe,IQe,qQe,nZ,NQe,jQe,NC,DQe,qg,jC,GQe,sZ,OQe,NRe,Qi,Ng,lZ,DC,VQe,iZ,XQe,jRe,Wo,GC,zQe,OC,QQe,bk,WQe,HQe,UQe,VC,JQe,dZ,YQe,KQe,ZQe,go,XC,eWe,cZ,oWe,rWe,Oa,tWe,fZ,aWe,nWe,mZ,sWe,lWe,gZ,iWe,dWe,cWe,C,Qn,hZ,fWe,mWe,Fk,gWe,hWe,vk,pWe,_We,uWe,Wn,pZ,bWe,FWe,Tk,vWe,TWe,Mk,MWe,EWe,CWe,Hn,_Z,wWe,AWe,Ek,yWe,LWe,Ck,xWe,kWe,SWe,jg,uZ,RWe,BWe,wk,PWe,$We,IWe,Un,bZ,qWe,NWe,Ak,jWe,DWe,yk,GWe,OWe,VWe,Dg,FZ,XWe,zWe,Lk,QWe,WWe,HWe,Gg,vZ,UWe,JWe,xk,YWe,KWe,ZWe,Og,TZ,eHe,oHe,kk,rHe,tHe,aHe,Jn,MZ,nHe,sHe,Sk,lHe,iHe,Rk,dHe,cHe,fHe,Yn,EZ,mHe,gHe,Bk,hHe,pHe,Pk,_He,uHe,bHe,Kn,CZ,FHe,vHe,$k,THe,MHe,Ik,EHe,CHe,wHe,Vg,wZ,AHe,yHe,qk,LHe,xHe,kHe,Xg,AZ,SHe,RHe,Nk,BHe,PHe,$He,Zn,yZ,IHe,qHe,jk,NHe,jHe,Dk,DHe,GHe,OHe,zg,LZ,VHe,XHe,Gk,zHe,QHe,WHe,es,xZ,HHe,UHe,Ok,JHe,YHe,Vk,KHe,ZHe,eUe,os,kZ,oUe,rUe,Xk,tUe,aUe,zk,nUe,sUe,lUe,rs,SZ,iUe,dUe,Qk,cUe,fUe,RZ,mUe,gUe,hUe,Qg,BZ,pUe,_Ue,Wk,uUe,bUe,FUe,ts,PZ,vUe,TUe,Hk,MUe,EUe,Uk,CUe,wUe,AUe,Wg,$Z,yUe,LUe,Jk,xUe,kUe,SUe,as,IZ,RUe,BUe,Yk,PUe,$Ue,Kk,IUe,qUe,NUe,ns,qZ,jUe,DUe,Zk,GUe,OUe,eS,VUe,XUe,zUe,ss,NZ,QUe,WUe,oS,HUe,UUe,rS,JUe,YUe,KUe,Hg,jZ,ZUe,eJe,tS,oJe,rJe,tJe,ls,DZ,aJe,nJe,aS,sJe,lJe,nS,iJe,dJe,cJe,Ug,GZ,fJe,mJe,sS,gJe,hJe,pJe,is,OZ,_Je,uJe,lS,bJe,FJe,iS,vJe,TJe,MJe,ds,VZ,EJe,CJe,dS,wJe,AJe,cS,yJe,LJe,xJe,cs,XZ,kJe,SJe,fS,RJe,BJe,mS,PJe,$Je,IJe,fs,zZ,qJe,NJe,gS,jJe,DJe,hS,GJe,OJe,VJe,Jg,QZ,XJe,zJe,pS,QJe,WJe,HJe,ms,WZ,UJe,JJe,_S,YJe,KJe,uS,ZJe,eYe,oYe,gs,HZ,rYe,tYe,bS,aYe,nYe,FS,sYe,lYe,iYe,hs,UZ,dYe,cYe,vS,fYe,mYe,TS,gYe,hYe,pYe,ps,JZ,_Ye,uYe,MS,bYe,FYe,ES,vYe,TYe,MYe,_s,YZ,EYe,CYe,CS,wYe,AYe,wS,yYe,LYe,xYe,us,KZ,kYe,SYe,AS,RYe,BYe,yS,PYe,$Ye,IYe,Yg,ZZ,qYe,NYe,LS,jYe,DYe,GYe,bs,eee,OYe,VYe,xS,XYe,zYe,kS,QYe,WYe,HYe,Kg,oee,UYe,JYe,SS,YYe,KYe,ZYe,Zg,ree,eKe,oKe,RS,rKe,tKe,aKe,Fs,tee,nKe,sKe,BS,lKe,iKe,PS,dKe,cKe,fKe,vs,aee,mKe,gKe,$S,hKe,pKe,IS,_Ke,uKe,bKe,eh,nee,FKe,vKe,qS,TKe,MKe,EKe,Ts,see,CKe,wKe,NS,AKe,yKe,jS,LKe,xKe,kKe,Ms,lee,SKe,RKe,DS,BKe,PKe,GS,$Ke,IKe,qKe,Es,iee,NKe,jKe,OS,DKe,GKe,VS,OKe,VKe,XKe,Cs,dee,zKe,QKe,XS,WKe,HKe,zS,UKe,JKe,YKe,ws,cee,KKe,ZKe,QS,eZe,oZe,WS,rZe,tZe,aZe,oh,fee,nZe,sZe,HS,lZe,iZe,dZe,rh,mee,cZe,fZe,US,mZe,gZe,hZe,th,gee,pZe,_Ze,JS,uZe,bZe,FZe,ah,hee,vZe,TZe,YS,MZe,EZe,CZe,As,pee,wZe,AZe,KS,yZe,LZe,ZS,xZe,kZe,SZe,nh,_ee,RZe,BZe,eR,PZe,$Ze,IZe,ys,uee,qZe,NZe,oR,jZe,DZe,rR,GZe,OZe,VZe,Ls,bee,XZe,zZe,tR,QZe,WZe,aR,HZe,UZe,JZe,xs,Fee,YZe,KZe,nR,ZZe,eeo,sR,oeo,reo,teo,ks,vee,aeo,neo,lR,seo,leo,iR,ieo,deo,ceo,Ss,Tee,feo,meo,dR,geo,heo,cR,peo,_eo,ueo,Rs,Mee,beo,Feo,fR,veo,Teo,mR,Meo,Eeo,Ceo,sh,Eee,weo,Aeo,gR,yeo,Leo,xeo,lh,Cee,keo,Seo,hR,Reo,Beo,Peo,Bs,wee,$eo,Ieo,pR,qeo,Neo,_R,jeo,Deo,Geo,Ps,Aee,Oeo,Veo,uR,Xeo,zeo,bR,Qeo,Weo,Heo,$s,yee,Ueo,Jeo,FR,Yeo,Keo,vR,Zeo,eoo,ooo,ih,Lee,roo,too,TR,aoo,noo,soo,dh,xee,loo,ioo,MR,doo,coo,foo,ch,kee,moo,goo,ER,hoo,poo,_oo,fh,See,uoo,boo,CR,Foo,voo,Too,Is,Ree,Moo,Eoo,wR,Coo,woo,AR,Aoo,yoo,Loo,mh,Bee,xoo,koo,yR,Soo,Roo,Boo,gh,Pee,Poo,$oo,LR,Ioo,qoo,Noo,qs,$ee,joo,Doo,xR,Goo,Ooo,kR,Voo,Xoo,zoo,Ns,Iee,Qoo,Woo,SR,Hoo,Uoo,RR,Joo,Yoo,Koo,qee,Zoo,ero,zC,oro,hh,QC,rro,Nee,tro,DRe,Wi,ph,jee,WC,aro,Dee,nro,GRe,Ho,HC,sro,UC,lro,BR,iro,dro,cro,JC,fro,Gee,mro,gro,hro,$e,YC,pro,Oee,_ro,uro,Va,bro,Vee,Fro,vro,Xee,Tro,Mro,zee,Ero,Cro,wro,ee,_h,Qee,Aro,yro,PR,Lro,xro,kro,uh,Wee,Sro,Rro,$R,Bro,Pro,$ro,bh,Hee,Iro,qro,IR,Nro,jro,Dro,Fh,Uee,Gro,Oro,qR,Vro,Xro,zro,vh,Jee,Qro,Wro,NR,Hro,Uro,Jro,Th,Yee,Yro,Kro,jR,Zro,eto,oto,Mh,Kee,rto,tto,DR,ato,nto,sto,Eh,Zee,lto,ito,GR,dto,cto,fto,Ch,eoe,mto,gto,OR,hto,pto,_to,wh,ooe,uto,bto,VR,Fto,vto,Tto,Ah,roe,Mto,Eto,XR,Cto,wto,Ato,yh,toe,yto,Lto,zR,xto,kto,Sto,Lh,aoe,Rto,Bto,QR,Pto,$to,Ito,xh,noe,qto,Nto,WR,jto,Dto,Gto,kh,soe,Oto,Vto,HR,Xto,zto,Qto,Sh,loe,Wto,Hto,UR,Uto,Jto,Yto,Rh,ioe,Kto,Zto,JR,eao,oao,rao,Bh,doe,tao,aao,YR,nao,sao,lao,Ph,coe,iao,dao,KR,cao,fao,mao,$h,gao,foe,hao,pao,KC,_ao,Ih,ZC,uao,moe,bao,ORe,Hi,qh,goe,e3,Fao,hoe,vao,VRe,Uo,o3,Tao,r3,Mao,ZR,Eao,Cao,wao,t3,Aao,poe,yao,Lao,xao,Ie,a3,kao,_oe,Sao,Rao,Ui,Bao,uoe,Pao,$ao,boe,Iao,qao,Nao,ke,Nh,Foe,jao,Dao,eB,Gao,Oao,Vao,jh,voe,Xao,zao,oB,Qao,Wao,Hao,Dh,Toe,Uao,Jao,rB,Yao,Kao,Zao,Gh,Moe,eno,ono,tB,rno,tno,ano,Oh,Eoe,nno,sno,aB,lno,ino,dno,Vh,Coe,cno,fno,nB,mno,gno,hno,Xh,woe,pno,_no,sB,uno,bno,Fno,zh,Aoe,vno,Tno,lB,Mno,Eno,Cno,Qh,wno,yoe,Ano,yno,n3,Lno,Wh,s3,xno,Loe,kno,XRe,Ji,Hh,xoe,l3,Sno,koe,Rno,zRe,Jo,i3,Bno,Yi,Pno,iB,$no,Ino,dB,qno,Nno,jno,d3,Dno,Soe,Gno,Ono,Vno,Xr,c3,Xno,Roe,zno,Qno,Ki,Wno,Boe,Hno,Uno,cB,Jno,Yno,Kno,Poe,Zno,eso,f3,oso,qe,m3,rso,$oe,tso,aso,Xa,nso,Ioe,sso,lso,qoe,iso,dso,Noe,cso,fso,mso,T,Uh,joe,gso,hso,fB,pso,_so,uso,Jh,Doe,bso,Fso,mB,vso,Tso,Mso,Yh,Goe,Eso,Cso,gB,wso,Aso,yso,Kh,Ooe,Lso,xso,hB,kso,Sso,Rso,Zh,Voe,Bso,Pso,pB,$so,Iso,qso,ep,Xoe,Nso,jso,_B,Dso,Gso,Oso,op,zoe,Vso,Xso,uB,zso,Qso,Wso,rp,Qoe,Hso,Uso,bB,Jso,Yso,Kso,tp,Woe,Zso,elo,FB,olo,rlo,tlo,ap,Hoe,alo,nlo,vB,slo,llo,ilo,np,Uoe,dlo,clo,TB,flo,mlo,glo,sp,Joe,hlo,plo,MB,_lo,ulo,blo,lp,Yoe,Flo,vlo,EB,Tlo,Mlo,Elo,ip,Koe,Clo,wlo,CB,Alo,ylo,Llo,dp,Zoe,xlo,klo,wB,Slo,Rlo,Blo,cp,ere,Plo,$lo,AB,Ilo,qlo,Nlo,fp,ore,jlo,Dlo,yB,Glo,Olo,Vlo,mp,rre,Xlo,zlo,LB,Qlo,Wlo,Hlo,gp,tre,Ulo,Jlo,xB,Ylo,Klo,Zlo,hp,are,eio,oio,kB,rio,tio,aio,pp,nre,nio,sio,SB,lio,iio,dio,_p,sre,cio,fio,RB,mio,gio,hio,up,lre,pio,_io,BB,uio,bio,Fio,bp,ire,vio,Tio,PB,Mio,Eio,Cio,Fp,dre,wio,Aio,$B,yio,Lio,xio,vp,cre,kio,Sio,IB,Rio,Bio,Pio,Tp,fre,$io,Iio,qB,qio,Nio,jio,Mp,mre,Dio,Gio,NB,Oio,Vio,Xio,Ep,gre,zio,Qio,jB,Wio,Hio,Uio,js,hre,Jio,Yio,DB,Kio,Zio,GB,edo,odo,rdo,Cp,pre,tdo,ado,OB,ndo,sdo,ldo,wp,_re,ido,ddo,VB,cdo,fdo,mdo,Ap,ure,gdo,hdo,XB,pdo,_do,udo,yp,bre,bdo,Fdo,Fre,vdo,Tdo,Mdo,Lp,vre,Edo,Cdo,zB,wdo,Ado,ydo,xp,Tre,Ldo,xdo,QB,kdo,Sdo,Rdo,kp,Mre,Bdo,Pdo,WB,$do,Ido,qdo,Sp,Ere,Ndo,jdo,HB,Ddo,Gdo,Odo,Rp,Cre,Vdo,Xdo,UB,zdo,Qdo,Wdo,Bp,wre,Hdo,Udo,JB,Jdo,Ydo,Kdo,Pp,Are,Zdo,eco,YB,oco,rco,tco,$p,yre,aco,nco,KB,sco,lco,ico,Ip,Lre,dco,cco,ZB,fco,mco,gco,qp,xre,hco,pco,eP,_co,uco,bco,Np,kre,Fco,vco,oP,Tco,Mco,Eco,jp,Sre,Cco,wco,rP,Aco,yco,Lco,Dp,Rre,xco,kco,tP,Sco,Rco,Bco,Gp,Bre,Pco,$co,aP,Ico,qco,Nco,Op,Pre,jco,Dco,nP,Gco,Oco,Vco,Vp,$re,Xco,zco,sP,Qco,Wco,Hco,Xp,Ire,Uco,Jco,lP,Yco,Kco,Zco,zp,qre,efo,ofo,iP,rfo,tfo,afo,Qp,Nre,nfo,sfo,dP,lfo,ifo,dfo,Wp,jre,cfo,ffo,cP,mfo,gfo,hfo,Hp,Dre,pfo,_fo,fP,ufo,bfo,Ffo,Up,Gre,vfo,Tfo,mP,Mfo,Efo,Cfo,Jp,Ore,wfo,Afo,gP,yfo,Lfo,xfo,Yp,Vre,kfo,Sfo,hP,Rfo,Bfo,Pfo,Kp,Xre,$fo,Ifo,pP,qfo,Nfo,jfo,Zp,zre,Dfo,Gfo,_P,Ofo,Vfo,Xfo,e_,Qre,zfo,Qfo,uP,Wfo,Hfo,Ufo,o_,Wre,Jfo,Yfo,bP,Kfo,Zfo,emo,r_,Hre,omo,rmo,FP,tmo,amo,nmo,t_,Ure,smo,lmo,vP,imo,dmo,cmo,a_,Jre,fmo,mmo,TP,gmo,hmo,pmo,n_,Yre,_mo,umo,MP,bmo,Fmo,vmo,s_,Kre,Tmo,Mmo,EP,Emo,Cmo,wmo,l_,Zre,Amo,ymo,CP,Lmo,xmo,kmo,i_,ete,Smo,Rmo,wP,Bmo,Pmo,$mo,d_,ote,Imo,qmo,AP,Nmo,jmo,Dmo,c_,rte,Gmo,Omo,yP,Vmo,Xmo,zmo,f_,tte,Qmo,Wmo,LP,Hmo,Umo,Jmo,m_,ate,Ymo,Kmo,xP,Zmo,ego,ogo,g_,nte,rgo,tgo,kP,ago,ngo,sgo,h_,ste,lgo,igo,SP,dgo,cgo,fgo,p_,lte,mgo,ggo,RP,hgo,pgo,_go,__,ite,ugo,bgo,BP,Fgo,vgo,Tgo,u_,dte,Mgo,Ego,PP,Cgo,wgo,Ago,b_,cte,ygo,Lgo,$P,xgo,kgo,Sgo,F_,fte,Rgo,Bgo,IP,Pgo,$go,Igo,v_,mte,qgo,Ngo,qP,jgo,Dgo,Ggo,T_,gte,Ogo,Vgo,NP,Xgo,zgo,Qgo,M_,hte,Wgo,Hgo,jP,Ugo,Jgo,Ygo,E_,pte,Kgo,Zgo,DP,eho,oho,rho,C_,_te,tho,aho,GP,nho,sho,lho,w_,ute,iho,dho,OP,cho,fho,mho,A_,bte,gho,hho,VP,pho,_ho,uho,y_,Fte,bho,Fho,XP,vho,Tho,Mho,L_,vte,Eho,Cho,zP,who,Aho,yho,x_,Tte,Lho,xho,QP,kho,Sho,Rho,k_,Mte,Bho,Pho,WP,$ho,Iho,qho,S_,Ete,Nho,jho,HP,Dho,Gho,Oho,R_,Cte,Vho,Xho,UP,zho,Qho,Who,B_,wte,Hho,Uho,JP,Jho,Yho,Kho,P_,Zho,Ate,epo,opo,yte,rpo,tpo,Lte,apo,npo,g3,QRe,Zi,$_,xte,h3,spo,kte,lpo,WRe,Yo,p3,ipo,ed,dpo,YP,cpo,fpo,KP,mpo,gpo,hpo,_3,ppo,Ste,_po,upo,bpo,zr,u3,Fpo,Rte,vpo,Tpo,od,Mpo,Bte,Epo,Cpo,ZP,wpo,Apo,ypo,Pte,Lpo,xpo,b3,kpo,Ne,F3,Spo,$te,Rpo,Bpo,za,Ppo,Ite,$po,Ipo,qte,qpo,Npo,Nte,jpo,Dpo,Gpo,R,I_,jte,Opo,Vpo,e$,Xpo,zpo,Qpo,q_,Dte,Wpo,Hpo,o$,Upo,Jpo,Ypo,N_,Gte,Kpo,Zpo,r$,e_o,o_o,r_o,j_,Ote,t_o,a_o,t$,n_o,s_o,l_o,D_,Vte,i_o,d_o,a$,c_o,f_o,m_o,G_,Xte,g_o,h_o,n$,p_o,__o,u_o,O_,zte,b_o,F_o,s$,v_o,T_o,M_o,V_,Qte,E_o,C_o,l$,w_o,A_o,y_o,X_,Wte,L_o,x_o,i$,k_o,S_o,R_o,z_,Hte,B_o,P_o,d$,$_o,I_o,q_o,Q_,Ute,N_o,j_o,c$,D_o,G_o,O_o,W_,Jte,V_o,X_o,f$,z_o,Q_o,W_o,H_,Yte,H_o,U_o,m$,J_o,Y_o,K_o,U_,Kte,Z_o,euo,g$,ouo,ruo,tuo,J_,Zte,auo,nuo,h$,suo,luo,iuo,Y_,eae,duo,cuo,p$,fuo,muo,guo,K_,oae,huo,puo,_$,_uo,uuo,buo,Z_,rae,Fuo,vuo,u$,Tuo,Muo,Euo,eu,tae,Cuo,wuo,b$,Auo,yuo,Luo,ou,aae,xuo,kuo,F$,Suo,Ruo,Buo,ru,nae,Puo,$uo,v$,Iuo,quo,Nuo,tu,sae,juo,Duo,T$,Guo,Ouo,Vuo,au,lae,Xuo,zuo,M$,Quo,Wuo,Huo,nu,iae,Uuo,Juo,E$,Yuo,Kuo,Zuo,su,dae,e6o,o6o,C$,r6o,t6o,a6o,lu,cae,n6o,s6o,w$,l6o,i6o,d6o,iu,fae,c6o,f6o,A$,m6o,g6o,h6o,du,mae,p6o,_6o,y$,u6o,b6o,F6o,cu,gae,v6o,T6o,L$,M6o,E6o,C6o,fu,hae,w6o,A6o,x$,y6o,L6o,x6o,mu,pae,k6o,S6o,k$,R6o,B6o,P6o,gu,_ae,$6o,I6o,S$,q6o,N6o,j6o,hu,uae,D6o,G6o,R$,O6o,V6o,X6o,pu,bae,z6o,Q6o,B$,W6o,H6o,U6o,_u,Fae,J6o,Y6o,P$,K6o,Z6o,e1o,uu,vae,o1o,r1o,$$,t1o,a1o,n1o,bu,Tae,s1o,l1o,I$,i1o,d1o,c1o,Fu,Mae,f1o,m1o,q$,g1o,h1o,p1o,vu,Eae,_1o,u1o,N$,b1o,F1o,v1o,Tu,T1o,Cae,M1o,E1o,wae,C1o,w1o,Aae,A1o,y1o,v3,HRe,rd,Mu,yae,T3,L1o,Lae,x1o,URe,Ko,M3,k1o,td,S1o,j$,R1o,B1o,D$,P1o,$1o,I1o,E3,q1o,xae,N1o,j1o,D1o,Qr,C3,G1o,kae,O1o,V1o,ad,X1o,Sae,z1o,Q1o,G$,W1o,H1o,U1o,Rae,J1o,Y1o,w3,K1o,je,A3,Z1o,Bae,ebo,obo,Qa,rbo,Pae,tbo,abo,$ae,nbo,sbo,Iae,lbo,ibo,dbo,$,Eu,qae,cbo,fbo,O$,mbo,gbo,hbo,Cu,Nae,pbo,_bo,V$,ubo,bbo,Fbo,wu,jae,vbo,Tbo,X$,Mbo,Ebo,Cbo,Au,Dae,wbo,Abo,z$,ybo,Lbo,xbo,yu,Gae,kbo,Sbo,Q$,Rbo,Bbo,Pbo,Lu,Oae,$bo,Ibo,W$,qbo,Nbo,jbo,xu,Vae,Dbo,Gbo,H$,Obo,Vbo,Xbo,ku,Xae,zbo,Qbo,U$,Wbo,Hbo,Ubo,Su,zae,Jbo,Ybo,J$,Kbo,Zbo,e5o,Ru,Qae,o5o,r5o,Y$,t5o,a5o,n5o,Bu,Wae,s5o,l5o,K$,i5o,d5o,c5o,Pu,Hae,f5o,m5o,Z$,g5o,h5o,p5o,$u,Uae,_5o,u5o,eI,b5o,F5o,v5o,Iu,Jae,T5o,M5o,Yae,E5o,C5o,w5o,qu,Kae,A5o,y5o,oI,L5o,x5o,k5o,Nu,Zae,S5o,R5o,rI,B5o,P5o,$5o,ju,ene,I5o,q5o,tI,N5o,j5o,D5o,Du,one,G5o,O5o,aI,V5o,X5o,z5o,Gu,rne,Q5o,W5o,nI,H5o,U5o,J5o,Ou,tne,Y5o,K5o,sI,Z5o,e2o,o2o,Vu,ane,r2o,t2o,lI,a2o,n2o,s2o,Xu,nne,l2o,i2o,iI,d2o,c2o,f2o,zu,sne,m2o,g2o,dI,h2o,p2o,_2o,Qu,lne,u2o,b2o,cI,F2o,v2o,T2o,Wu,ine,M2o,E2o,fI,C2o,w2o,A2o,Hu,dne,y2o,L2o,mI,x2o,k2o,S2o,Uu,cne,R2o,B2o,gI,P2o,$2o,I2o,Ju,fne,q2o,N2o,hI,j2o,D2o,G2o,Yu,mne,O2o,V2o,pI,X2o,z2o,Q2o,Ku,gne,W2o,H2o,_I,U2o,J2o,Y2o,Zu,hne,K2o,Z2o,uI,eFo,oFo,rFo,e6,pne,tFo,aFo,bI,nFo,sFo,lFo,o6,_ne,iFo,dFo,FI,cFo,fFo,mFo,r6,une,gFo,hFo,vI,pFo,_Fo,uFo,t6,bne,bFo,FFo,TI,vFo,TFo,MFo,a6,Fne,EFo,CFo,MI,wFo,AFo,yFo,n6,LFo,vne,xFo,kFo,Tne,SFo,RFo,Mne,BFo,PFo,y3,JRe,nd,s6,Ene,L3,$Fo,Cne,IFo,YRe,Zo,x3,qFo,sd,NFo,EI,jFo,DFo,CI,GFo,OFo,VFo,k3,XFo,wne,zFo,QFo,WFo,Wr,S3,HFo,Ane,UFo,JFo,ld,YFo,yne,KFo,ZFo,wI,evo,ovo,rvo,Lne,tvo,avo,R3,nvo,De,B3,svo,xne,lvo,ivo,Wa,dvo,kne,cvo,fvo,Sne,mvo,gvo,Rne,hvo,pvo,_vo,I,l6,Bne,uvo,bvo,AI,Fvo,vvo,Tvo,i6,Pne,Mvo,Evo,yI,Cvo,wvo,Avo,d6,$ne,yvo,Lvo,LI,xvo,kvo,Svo,c6,Ine,Rvo,Bvo,xI,Pvo,$vo,Ivo,f6,qne,qvo,Nvo,kI,jvo,Dvo,Gvo,m6,Nne,Ovo,Vvo,SI,Xvo,zvo,Qvo,g6,jne,Wvo,Hvo,RI,Uvo,Jvo,Yvo,h6,Dne,Kvo,Zvo,BI,eTo,oTo,rTo,p6,Gne,tTo,aTo,PI,nTo,sTo,lTo,_6,One,iTo,dTo,$I,cTo,fTo,mTo,u6,Vne,gTo,hTo,II,pTo,_To,uTo,b6,Xne,bTo,FTo,qI,vTo,TTo,MTo,F6,zne,ETo,CTo,NI,wTo,ATo,yTo,v6,Qne,LTo,xTo,jI,kTo,STo,RTo,T6,Wne,BTo,PTo,Hne,$To,ITo,qTo,M6,Une,NTo,jTo,DI,DTo,GTo,OTo,E6,Jne,VTo,XTo,GI,zTo,QTo,WTo,C6,Yne,HTo,UTo,OI,JTo,YTo,KTo,w6,Kne,ZTo,e9o,VI,o9o,r9o,t9o,A6,Zne,a9o,n9o,XI,s9o,l9o,i9o,y6,ese,d9o,c9o,zI,f9o,m9o,g9o,L6,ose,h9o,p9o,QI,_9o,u9o,b9o,x6,rse,F9o,v9o,WI,T9o,M9o,E9o,k6,tse,C9o,w9o,HI,A9o,y9o,L9o,S6,ase,x9o,k9o,UI,S9o,R9o,B9o,R6,nse,P9o,$9o,JI,I9o,q9o,N9o,B6,sse,j9o,D9o,YI,G9o,O9o,V9o,P6,lse,X9o,z9o,KI,Q9o,W9o,H9o,$6,ise,U9o,J9o,ZI,Y9o,K9o,Z9o,I6,dse,eMo,oMo,eq,rMo,tMo,aMo,q6,cse,nMo,sMo,oq,lMo,iMo,dMo,N6,fse,cMo,fMo,mse,mMo,gMo,hMo,j6,gse,pMo,_Mo,rq,uMo,bMo,FMo,D6,hse,vMo,TMo,tq,MMo,EMo,CMo,G6,pse,wMo,AMo,aq,yMo,LMo,xMo,O6,_se,kMo,SMo,nq,RMo,BMo,PMo,V6,$Mo,use,IMo,qMo,bse,NMo,jMo,Fse,DMo,GMo,P3,KRe,id,X6,vse,$3,OMo,Tse,VMo,ZRe,er,I3,XMo,dd,zMo,sq,QMo,WMo,lq,HMo,UMo,JMo,q3,YMo,Mse,KMo,ZMo,e4o,Hr,N3,o4o,Ese,r4o,t4o,cd,a4o,Cse,n4o,s4o,iq,l4o,i4o,d4o,wse,c4o,f4o,j3,m4o,Ge,D3,g4o,Ase,h4o,p4o,Ha,_4o,yse,u4o,b4o,Lse,F4o,v4o,xse,T4o,M4o,E4o,se,z6,kse,C4o,w4o,dq,A4o,y4o,L4o,Q6,Sse,x4o,k4o,cq,S4o,R4o,B4o,W6,Rse,P4o,$4o,fq,I4o,q4o,N4o,H6,Bse,j4o,D4o,mq,G4o,O4o,V4o,U6,Pse,X4o,z4o,gq,Q4o,W4o,H4o,J6,$se,U4o,J4o,hq,Y4o,K4o,Z4o,Y6,Ise,eEo,oEo,pq,rEo,tEo,aEo,K6,qse,nEo,sEo,_q,lEo,iEo,dEo,Z6,Nse,cEo,fEo,uq,mEo,gEo,hEo,e1,jse,pEo,_Eo,bq,uEo,bEo,FEo,o1,Dse,vEo,TEo,Fq,MEo,EEo,CEo,r1,Gse,wEo,AEo,vq,yEo,LEo,xEo,t1,Ose,kEo,SEo,Tq,REo,BEo,PEo,a1,Vse,$Eo,IEo,Mq,qEo,NEo,jEo,n1,Xse,DEo,GEo,Eq,OEo,VEo,XEo,s1,zse,zEo,QEo,Cq,WEo,HEo,UEo,l1,JEo,Qse,YEo,KEo,Wse,ZEo,eCo,Hse,oCo,rCo,G3,eBe,fd,i1,Use,O3,tCo,Jse,aCo,oBe,or,V3,nCo,md,sCo,wq,lCo,iCo,Aq,dCo,cCo,fCo,X3,mCo,Yse,gCo,hCo,pCo,Ur,z3,_Co,Kse,uCo,bCo,gd,FCo,Zse,vCo,TCo,yq,MCo,ECo,CCo,ele,wCo,ACo,Q3,yCo,Oe,W3,LCo,ole,xCo,kCo,Ua,SCo,rle,RCo,BCo,tle,PCo,$Co,ale,ICo,qCo,NCo,y,d1,nle,jCo,DCo,Lq,GCo,OCo,VCo,c1,sle,XCo,zCo,xq,QCo,WCo,HCo,f1,lle,UCo,JCo,kq,YCo,KCo,ZCo,m1,ile,e3o,o3o,Sq,r3o,t3o,a3o,g1,dle,n3o,s3o,Rq,l3o,i3o,d3o,h1,cle,c3o,f3o,Bq,m3o,g3o,h3o,p1,fle,p3o,_3o,Pq,u3o,b3o,F3o,_1,mle,v3o,T3o,$q,M3o,E3o,C3o,u1,gle,w3o,A3o,Iq,y3o,L3o,x3o,b1,hle,k3o,S3o,qq,R3o,B3o,P3o,F1,ple,$3o,I3o,Nq,q3o,N3o,j3o,v1,_le,D3o,G3o,jq,O3o,V3o,X3o,T1,ule,z3o,Q3o,Dq,W3o,H3o,U3o,M1,ble,J3o,Y3o,Gq,K3o,Z3o,ewo,E1,Fle,owo,rwo,Oq,two,awo,nwo,C1,vle,swo,lwo,Vq,iwo,dwo,cwo,w1,Tle,fwo,mwo,Xq,gwo,hwo,pwo,A1,Mle,_wo,uwo,zq,bwo,Fwo,vwo,y1,Ele,Two,Mwo,Qq,Ewo,Cwo,wwo,L1,Cle,Awo,ywo,wle,Lwo,xwo,kwo,x1,Ale,Swo,Rwo,Wq,Bwo,Pwo,$wo,k1,yle,Iwo,qwo,Hq,Nwo,jwo,Dwo,S1,Lle,Gwo,Owo,Uq,Vwo,Xwo,zwo,R1,xle,Qwo,Wwo,Jq,Hwo,Uwo,Jwo,B1,kle,Ywo,Kwo,Yq,Zwo,eAo,oAo,P1,Sle,rAo,tAo,Kq,aAo,nAo,sAo,$1,Rle,lAo,iAo,Zq,dAo,cAo,fAo,I1,Ble,mAo,gAo,eN,hAo,pAo,_Ao,q1,Ple,uAo,bAo,oN,FAo,vAo,TAo,N1,$le,MAo,EAo,rN,CAo,wAo,AAo,j1,Ile,yAo,LAo,tN,xAo,kAo,SAo,D1,qle,RAo,BAo,aN,PAo,$Ao,IAo,G1,Nle,qAo,NAo,nN,jAo,DAo,GAo,O1,jle,OAo,VAo,sN,XAo,zAo,QAo,V1,Dle,WAo,HAo,lN,UAo,JAo,YAo,X1,Gle,KAo,ZAo,iN,e0o,o0o,r0o,z1,Ole,t0o,a0o,dN,n0o,s0o,l0o,Q1,Vle,i0o,d0o,cN,c0o,f0o,m0o,W1,Xle,g0o,h0o,fN,p0o,_0o,u0o,H1,zle,b0o,F0o,mN,v0o,T0o,M0o,U1,Qle,E0o,C0o,gN,w0o,A0o,y0o,J1,Wle,L0o,x0o,hN,k0o,S0o,R0o,Y1,Hle,B0o,P0o,pN,$0o,I0o,q0o,K1,Ule,N0o,j0o,_N,D0o,G0o,O0o,Z1,Jle,V0o,X0o,uN,z0o,Q0o,W0o,eb,Yle,H0o,U0o,bN,J0o,Y0o,K0o,ob,Kle,Z0o,eyo,FN,oyo,ryo,tyo,rb,ayo,Zle,nyo,syo,eie,lyo,iyo,oie,dyo,cyo,H3,rBe,hd,tb,rie,U3,fyo,tie,myo,tBe,rr,J3,gyo,pd,hyo,vN,pyo,_yo,TN,uyo,byo,Fyo,Y3,vyo,aie,Tyo,Myo,Eyo,Jr,K3,Cyo,nie,wyo,Ayo,_d,yyo,sie,Lyo,xyo,MN,kyo,Syo,Ryo,lie,Byo,Pyo,Z3,$yo,Ve,ew,Iyo,iie,qyo,Nyo,Ja,jyo,die,Dyo,Gyo,cie,Oyo,Vyo,fie,Xyo,zyo,Qyo,G,ab,mie,Wyo,Hyo,EN,Uyo,Jyo,Yyo,nb,gie,Kyo,Zyo,CN,eLo,oLo,rLo,sb,hie,tLo,aLo,wN,nLo,sLo,lLo,lb,pie,iLo,dLo,AN,cLo,fLo,mLo,ib,_ie,gLo,hLo,yN,pLo,_Lo,uLo,db,uie,bLo,FLo,LN,vLo,TLo,MLo,cb,bie,ELo,CLo,xN,wLo,ALo,yLo,fb,Fie,LLo,xLo,kN,kLo,SLo,RLo,mb,vie,BLo,PLo,SN,$Lo,ILo,qLo,gb,Tie,NLo,jLo,RN,DLo,GLo,OLo,hb,Mie,VLo,XLo,BN,zLo,QLo,WLo,pb,Eie,HLo,ULo,PN,JLo,YLo,KLo,_b,Cie,ZLo,e8o,wie,o8o,r8o,t8o,ub,Aie,a8o,n8o,$N,s8o,l8o,i8o,bb,yie,d8o,c8o,IN,f8o,m8o,g8o,Fb,Lie,h8o,p8o,qN,_8o,u8o,b8o,vb,xie,F8o,v8o,NN,T8o,M8o,E8o,Tb,kie,C8o,w8o,jN,A8o,y8o,L8o,Mb,Sie,x8o,k8o,DN,S8o,R8o,B8o,Eb,Rie,P8o,$8o,GN,I8o,q8o,N8o,Cb,Bie,j8o,D8o,ON,G8o,O8o,V8o,wb,Pie,X8o,z8o,VN,Q8o,W8o,H8o,Ab,$ie,U8o,J8o,XN,Y8o,K8o,Z8o,yb,Iie,e7o,o7o,zN,r7o,t7o,a7o,Lb,qie,n7o,s7o,QN,l7o,i7o,d7o,xb,Nie,c7o,f7o,WN,m7o,g7o,h7o,kb,jie,p7o,_7o,HN,u7o,b7o,F7o,Sb,Die,v7o,T7o,UN,M7o,E7o,C7o,Rb,Gie,w7o,A7o,JN,y7o,L7o,x7o,Bb,k7o,Oie,S7o,R7o,Vie,B7o,P7o,Xie,$7o,I7o,ow,aBe,ud,Pb,zie,rw,q7o,Qie,N7o,nBe,tr,tw,j7o,bd,D7o,YN,G7o,O7o,KN,V7o,X7o,z7o,aw,Q7o,Wie,W7o,H7o,U7o,Yr,nw,J7o,Hie,Y7o,K7o,Fd,Z7o,Uie,exo,oxo,ZN,rxo,txo,axo,Jie,nxo,sxo,sw,lxo,Xe,lw,ixo,Yie,dxo,cxo,Ya,fxo,Kie,mxo,gxo,Zie,hxo,pxo,ede,_xo,uxo,bxo,da,$b,ode,Fxo,vxo,ej,Txo,Mxo,Exo,Ib,rde,Cxo,wxo,oj,Axo,yxo,Lxo,qb,tde,xxo,kxo,rj,Sxo,Rxo,Bxo,Nb,ade,Pxo,$xo,tj,Ixo,qxo,Nxo,jb,nde,jxo,Dxo,aj,Gxo,Oxo,Vxo,Db,Xxo,sde,zxo,Qxo,lde,Wxo,Hxo,ide,Uxo,Jxo,iw,sBe,vd,Gb,dde,dw,Yxo,cde,Kxo,lBe,ar,cw,Zxo,Td,eko,nj,oko,rko,sj,tko,ako,nko,fw,sko,fde,lko,iko,dko,Kr,mw,cko,mde,fko,mko,Md,gko,gde,hko,pko,lj,_ko,uko,bko,hde,Fko,vko,gw,Tko,ze,hw,Mko,pde,Eko,Cko,Ka,wko,_de,Ako,yko,ude,Lko,xko,bde,kko,Sko,Rko,j,Ob,Fde,Bko,Pko,ij,$ko,Iko,qko,Vb,vde,Nko,jko,dj,Dko,Gko,Oko,Xb,Tde,Vko,Xko,cj,zko,Qko,Wko,zb,Mde,Hko,Uko,fj,Jko,Yko,Kko,Qb,Ede,Zko,eSo,mj,oSo,rSo,tSo,Wb,Cde,aSo,nSo,gj,sSo,lSo,iSo,Hb,wde,dSo,cSo,hj,fSo,mSo,gSo,Ub,Ade,hSo,pSo,pj,_So,uSo,bSo,Jb,yde,FSo,vSo,_j,TSo,MSo,ESo,Yb,Lde,CSo,wSo,uj,ASo,ySo,LSo,Kb,xde,xSo,kSo,bj,SSo,RSo,BSo,Zb,kde,PSo,$So,Fj,ISo,qSo,NSo,e5,Sde,jSo,DSo,vj,GSo,OSo,VSo,o5,Rde,XSo,zSo,Tj,QSo,WSo,HSo,r5,Bde,USo,JSo,Mj,YSo,KSo,ZSo,t5,Pde,eRo,oRo,$de,rRo,tRo,aRo,a5,Ide,nRo,sRo,Ej,lRo,iRo,dRo,n5,qde,cRo,fRo,Cj,mRo,gRo,hRo,s5,Nde,pRo,_Ro,wj,uRo,bRo,FRo,l5,jde,vRo,TRo,Aj,MRo,ERo,CRo,i5,Dde,wRo,ARo,yj,yRo,LRo,xRo,d5,Gde,kRo,SRo,Lj,RRo,BRo,PRo,c5,Ode,$Ro,IRo,xj,qRo,NRo,jRo,f5,Vde,DRo,GRo,kj,ORo,VRo,XRo,m5,Xde,zRo,QRo,Sj,WRo,HRo,URo,g5,zde,JRo,YRo,Rj,KRo,ZRo,eBo,h5,Qde,oBo,rBo,Bj,tBo,aBo,nBo,p5,Wde,sBo,lBo,Pj,iBo,dBo,cBo,_5,Hde,fBo,mBo,$j,gBo,hBo,pBo,u5,Ude,_Bo,uBo,Ij,bBo,FBo,vBo,b5,Jde,TBo,MBo,qj,EBo,CBo,wBo,F5,Yde,ABo,yBo,Nj,LBo,xBo,kBo,v5,Kde,SBo,RBo,jj,BBo,PBo,$Bo,T5,Zde,IBo,qBo,Dj,NBo,jBo,DBo,M5,GBo,ece,OBo,VBo,oce,XBo,zBo,rce,QBo,WBo,pw,iBe,Ed,E5,tce,_w,HBo,ace,UBo,dBe,nr,uw,JBo,Cd,YBo,Gj,KBo,ZBo,Oj,ePo,oPo,rPo,bw,tPo,nce,aPo,nPo,sPo,Zr,Fw,lPo,sce,iPo,dPo,wd,cPo,lce,fPo,mPo,Vj,gPo,hPo,pPo,ice,_Po,uPo,vw,bPo,Qe,Tw,FPo,dce,vPo,TPo,Za,MPo,cce,EPo,CPo,fce,wPo,APo,mce,yPo,LPo,xPo,S,C5,gce,kPo,SPo,Xj,RPo,BPo,PPo,w5,hce,$Po,IPo,zj,qPo,NPo,jPo,A5,pce,DPo,GPo,Qj,OPo,VPo,XPo,y5,_ce,zPo,QPo,Wj,WPo,HPo,UPo,L5,uce,JPo,YPo,Hj,KPo,ZPo,e$o,x5,bce,o$o,r$o,Uj,t$o,a$o,n$o,k5,Fce,s$o,l$o,Jj,i$o,d$o,c$o,S5,vce,f$o,m$o,Yj,g$o,h$o,p$o,R5,Tce,_$o,u$o,Kj,b$o,F$o,v$o,B5,Mce,T$o,M$o,Zj,E$o,C$o,w$o,P5,Ece,A$o,y$o,eD,L$o,x$o,k$o,$5,Cce,S$o,R$o,oD,B$o,P$o,$$o,I5,wce,I$o,q$o,rD,N$o,j$o,D$o,q5,Ace,G$o,O$o,tD,V$o,X$o,z$o,N5,yce,Q$o,W$o,aD,H$o,U$o,J$o,j5,Lce,Y$o,K$o,nD,Z$o,eIo,oIo,D5,xce,rIo,tIo,kce,aIo,nIo,sIo,G5,Sce,lIo,iIo,sD,dIo,cIo,fIo,O5,Rce,mIo,gIo,lD,hIo,pIo,_Io,V5,Bce,uIo,bIo,iD,FIo,vIo,TIo,X5,Pce,MIo,EIo,dD,CIo,wIo,AIo,z5,$ce,yIo,LIo,cD,xIo,kIo,SIo,Q5,Ice,RIo,BIo,fD,PIo,$Io,IIo,W5,qce,qIo,NIo,mD,jIo,DIo,GIo,H5,Nce,OIo,VIo,gD,XIo,zIo,QIo,U5,jce,WIo,HIo,hD,UIo,JIo,YIo,J5,Dce,KIo,ZIo,pD,eqo,oqo,rqo,Y5,Gce,tqo,aqo,_D,nqo,sqo,lqo,K5,Oce,iqo,dqo,uD,cqo,fqo,mqo,Z5,Vce,gqo,hqo,bD,pqo,_qo,uqo,e2,Xce,bqo,Fqo,FD,vqo,Tqo,Mqo,o2,zce,Eqo,Cqo,vD,wqo,Aqo,yqo,r2,Qce,Lqo,xqo,TD,kqo,Sqo,Rqo,t2,Wce,Bqo,Pqo,MD,$qo,Iqo,qqo,a2,Hce,Nqo,jqo,ED,Dqo,Gqo,Oqo,n2,Uce,Vqo,Xqo,CD,zqo,Qqo,Wqo,s2,Jce,Hqo,Uqo,wD,Jqo,Yqo,Kqo,l2,Yce,Zqo,eNo,AD,oNo,rNo,tNo,i2,Kce,aNo,nNo,yD,sNo,lNo,iNo,d2,Zce,dNo,cNo,LD,fNo,mNo,gNo,c2,hNo,efe,pNo,_No,ofe,uNo,bNo,rfe,FNo,vNo,Mw,cBe,Ad,f2,tfe,Ew,TNo,afe,MNo,fBe,sr,Cw,ENo,yd,CNo,xD,wNo,ANo,kD,yNo,LNo,xNo,ww,kNo,nfe,SNo,RNo,BNo,et,Aw,PNo,sfe,$No,INo,Ld,qNo,lfe,NNo,jNo,SD,DNo,GNo,ONo,ife,VNo,XNo,yw,zNo,We,Lw,QNo,dfe,WNo,HNo,en,UNo,cfe,JNo,YNo,ffe,KNo,ZNo,mfe,ejo,ojo,rjo,gfe,m2,hfe,tjo,ajo,RD,njo,sjo,ljo,g2,ijo,pfe,djo,cjo,_fe,fjo,mjo,ufe,gjo,hjo,xw,mBe,xd,h2,bfe,kw,pjo,Ffe,_jo,gBe,lr,Sw,ujo,kd,bjo,BD,Fjo,vjo,PD,Tjo,Mjo,Ejo,Rw,Cjo,vfe,wjo,Ajo,yjo,ot,Bw,Ljo,Tfe,xjo,kjo,Sd,Sjo,Mfe,Rjo,Bjo,$D,Pjo,$jo,Ijo,Efe,qjo,Njo,Pw,jjo,He,$w,Djo,Cfe,Gjo,Ojo,on,Vjo,wfe,Xjo,zjo,Afe,Qjo,Wjo,yfe,Hjo,Ujo,Jjo,ce,p2,Lfe,Yjo,Kjo,ID,Zjo,eDo,oDo,_2,xfe,rDo,tDo,qD,aDo,nDo,sDo,Ds,kfe,lDo,iDo,ND,dDo,cDo,jD,fDo,mDo,gDo,u2,Sfe,hDo,pDo,DD,_Do,uDo,bDo,ma,Rfe,FDo,vDo,GD,TDo,MDo,OD,EDo,CDo,VD,wDo,ADo,yDo,b2,Bfe,LDo,xDo,XD,kDo,SDo,RDo,F2,Pfe,BDo,PDo,zD,$Do,IDo,qDo,v2,$fe,NDo,jDo,QD,DDo,GDo,ODo,T2,Ife,VDo,XDo,WD,zDo,QDo,WDo,M2,qfe,HDo,UDo,HD,JDo,YDo,KDo,E2,Nfe,ZDo,eGo,UD,oGo,rGo,tGo,C2,jfe,aGo,nGo,JD,sGo,lGo,iGo,w2,dGo,Dfe,cGo,fGo,Gfe,mGo,gGo,Ofe,hGo,pGo,Iw,hBe,Rd,A2,Vfe,qw,_Go,Xfe,uGo,pBe,ir,Nw,bGo,Bd,FGo,YD,vGo,TGo,KD,MGo,EGo,CGo,jw,wGo,zfe,AGo,yGo,LGo,rt,Dw,xGo,Qfe,kGo,SGo,Pd,RGo,Wfe,BGo,PGo,ZD,$Go,IGo,qGo,Hfe,NGo,jGo,Gw,DGo,Ue,Ow,GGo,Ufe,OGo,VGo,rn,XGo,Jfe,zGo,QGo,Yfe,WGo,HGo,Kfe,UGo,JGo,YGo,Zfe,y2,eme,KGo,ZGo,eG,eOo,oOo,rOo,L2,tOo,ome,aOo,nOo,rme,sOo,lOo,tme,iOo,dOo,Vw,_Be,$d,x2,ame,Xw,cOo,nme,fOo,uBe,dr,zw,mOo,Id,gOo,oG,hOo,pOo,rG,_Oo,uOo,bOo,Qw,FOo,sme,vOo,TOo,MOo,tt,Ww,EOo,lme,COo,wOo,qd,AOo,ime,yOo,LOo,tG,xOo,kOo,SOo,dme,ROo,BOo,Hw,POo,Je,Uw,$Oo,cme,IOo,qOo,tn,NOo,fme,jOo,DOo,mme,GOo,OOo,gme,VOo,XOo,zOo,Se,k2,hme,QOo,WOo,aG,HOo,UOo,JOo,S2,pme,YOo,KOo,nG,ZOo,eVo,oVo,R2,_me,rVo,tVo,sG,aVo,nVo,sVo,B2,ume,lVo,iVo,lG,dVo,cVo,fVo,P2,bme,mVo,gVo,iG,hVo,pVo,_Vo,$2,Fme,uVo,bVo,dG,FVo,vVo,TVo,I2,vme,MVo,EVo,cG,CVo,wVo,AVo,q2,Tme,yVo,LVo,fG,xVo,kVo,SVo,N2,RVo,Mme,BVo,PVo,Eme,$Vo,IVo,Cme,qVo,NVo,Jw,bBe,Nd,j2,wme,Yw,jVo,Ame,DVo,FBe,cr,Kw,GVo,jd,OVo,mG,VVo,XVo,gG,zVo,QVo,WVo,Zw,HVo,yme,UVo,JVo,YVo,at,eA,KVo,Lme,ZVo,eXo,Dd,oXo,xme,rXo,tXo,hG,aXo,nXo,sXo,kme,lXo,iXo,oA,dXo,Ye,rA,cXo,Sme,fXo,mXo,an,gXo,Rme,hXo,pXo,Bme,_Xo,uXo,Pme,bXo,FXo,vXo,nn,D2,$me,TXo,MXo,pG,EXo,CXo,wXo,G2,Ime,AXo,yXo,_G,LXo,xXo,kXo,O2,qme,SXo,RXo,uG,BXo,PXo,$Xo,V2,Nme,IXo,qXo,bG,NXo,jXo,DXo,X2,GXo,jme,OXo,VXo,Dme,XXo,zXo,Gme,QXo,WXo,tA,vBe,Gd,z2,Ome,aA,HXo,Vme,UXo,TBe,fr,nA,JXo,Od,YXo,FG,KXo,ZXo,vG,ezo,ozo,rzo,sA,tzo,Xme,azo,nzo,szo,nt,lA,lzo,zme,izo,dzo,Vd,czo,Qme,fzo,mzo,TG,gzo,hzo,pzo,Wme,_zo,uzo,iA,bzo,Ke,dA,Fzo,Hme,vzo,Tzo,sn,Mzo,Ume,Ezo,Czo,Jme,wzo,Azo,Yme,yzo,Lzo,xzo,Re,Q2,Kme,kzo,Szo,MG,Rzo,Bzo,Pzo,W2,Zme,$zo,Izo,EG,qzo,Nzo,jzo,H2,ege,Dzo,Gzo,CG,Ozo,Vzo,Xzo,U2,oge,zzo,Qzo,wG,Wzo,Hzo,Uzo,J2,rge,Jzo,Yzo,AG,Kzo,Zzo,eQo,Y2,tge,oQo,rQo,yG,tQo,aQo,nQo,K2,age,sQo,lQo,LG,iQo,dQo,cQo,Z2,nge,fQo,mQo,xG,gQo,hQo,pQo,eF,_Qo,sge,uQo,bQo,lge,FQo,vQo,ige,TQo,MQo,cA,MBe,Xd,oF,dge,fA,EQo,cge,CQo,EBe,mr,mA,wQo,zd,AQo,kG,yQo,LQo,SG,xQo,kQo,SQo,gA,RQo,fge,BQo,PQo,$Qo,st,hA,IQo,mge,qQo,NQo,Qd,jQo,gge,DQo,GQo,RG,OQo,VQo,XQo,hge,zQo,QQo,pA,WQo,Ze,_A,HQo,pge,UQo,JQo,ln,YQo,_ge,KQo,ZQo,uge,eWo,oWo,bge,rWo,tWo,aWo,uA,rF,Fge,nWo,sWo,BG,lWo,iWo,dWo,tF,vge,cWo,fWo,PG,mWo,gWo,hWo,aF,pWo,Tge,_Wo,uWo,Mge,bWo,FWo,Ege,vWo,TWo,bA,CBe,Wd,nF,Cge,FA,MWo,wge,EWo,wBe,gr,vA,CWo,Hd,wWo,$G,AWo,yWo,IG,LWo,xWo,kWo,TA,SWo,Age,RWo,BWo,PWo,lt,MA,$Wo,yge,IWo,qWo,Ud,NWo,Lge,jWo,DWo,qG,GWo,OWo,VWo,xge,XWo,zWo,EA,QWo,eo,CA,WWo,kge,HWo,UWo,dn,JWo,Sge,YWo,KWo,Rge,ZWo,eHo,Bge,oHo,rHo,tHo,cn,sF,Pge,aHo,nHo,NG,sHo,lHo,iHo,lF,$ge,dHo,cHo,jG,fHo,mHo,gHo,iF,Ige,hHo,pHo,DG,_Ho,uHo,bHo,dF,qge,FHo,vHo,GG,THo,MHo,EHo,cF,CHo,Nge,wHo,AHo,jge,yHo,LHo,Dge,xHo,kHo,wA,ABe,Jd,fF,Gge,AA,SHo,Oge,RHo,yBe,hr,yA,BHo,Yd,PHo,OG,$Ho,IHo,VG,qHo,NHo,jHo,LA,DHo,Vge,GHo,OHo,VHo,it,xA,XHo,Xge,zHo,QHo,Kd,WHo,zge,HHo,UHo,XG,JHo,YHo,KHo,Qge,ZHo,eUo,kA,oUo,oo,SA,rUo,Wge,tUo,aUo,fn,nUo,Hge,sUo,lUo,Uge,iUo,dUo,Jge,cUo,fUo,mUo,Zd,mF,Yge,gUo,hUo,zG,pUo,_Uo,uUo,gF,Kge,bUo,FUo,QG,vUo,TUo,MUo,hF,Zge,EUo,CUo,WG,wUo,AUo,yUo,pF,LUo,ehe,xUo,kUo,ohe,SUo,RUo,rhe,BUo,PUo,RA,LBe,ec,_F,the,BA,$Uo,ahe,IUo,xBe,pr,PA,qUo,oc,NUo,HG,jUo,DUo,UG,GUo,OUo,VUo,$A,XUo,nhe,zUo,QUo,WUo,dt,IA,HUo,she,UUo,JUo,rc,YUo,lhe,KUo,ZUo,JG,eJo,oJo,rJo,ihe,tJo,aJo,qA,nJo,ro,NA,sJo,dhe,lJo,iJo,mn,dJo,che,cJo,fJo,fhe,mJo,gJo,mhe,hJo,pJo,_Jo,ghe,uF,hhe,uJo,bJo,YG,FJo,vJo,TJo,bF,MJo,phe,EJo,CJo,_he,wJo,AJo,uhe,yJo,LJo,jA,kBe,tc,FF,bhe,DA,xJo,Fhe,kJo,SBe,_r,GA,SJo,ac,RJo,KG,BJo,PJo,ZG,$Jo,IJo,qJo,OA,NJo,vhe,jJo,DJo,GJo,ct,VA,OJo,The,VJo,XJo,nc,zJo,Mhe,QJo,WJo,eO,HJo,UJo,JJo,Ehe,YJo,KJo,XA,ZJo,to,zA,eYo,Che,oYo,rYo,gn,tYo,whe,aYo,nYo,Ahe,sYo,lYo,yhe,iYo,dYo,cYo,Lhe,vF,xhe,fYo,mYo,oO,gYo,hYo,pYo,TF,_Yo,khe,uYo,bYo,She,FYo,vYo,Rhe,TYo,MYo,QA,RBe,sc,MF,Bhe,WA,EYo,Phe,CYo,BBe,ur,HA,wYo,lc,AYo,rO,yYo,LYo,tO,xYo,kYo,SYo,UA,RYo,$he,BYo,PYo,$Yo,ft,JA,IYo,Ihe,qYo,NYo,ic,jYo,qhe,DYo,GYo,aO,OYo,VYo,XYo,Nhe,zYo,QYo,YA,WYo,ao,KA,HYo,jhe,UYo,JYo,hn,YYo,Dhe,KYo,ZYo,Ghe,eKo,oKo,Ohe,rKo,tKo,aKo,dc,EF,Vhe,nKo,sKo,nO,lKo,iKo,dKo,CF,Xhe,cKo,fKo,sO,mKo,gKo,hKo,wF,zhe,pKo,_Ko,lO,uKo,bKo,FKo,AF,vKo,Qhe,TKo,MKo,Whe,EKo,CKo,Hhe,wKo,AKo,ZA,PBe,cc,yF,Uhe,e0,yKo,Jhe,LKo,$Be,br,o0,xKo,fc,kKo,iO,SKo,RKo,dO,BKo,PKo,$Ko,r0,IKo,Yhe,qKo,NKo,jKo,mt,t0,DKo,Khe,GKo,OKo,mc,VKo,Zhe,XKo,zKo,cO,QKo,WKo,HKo,epe,UKo,JKo,a0,YKo,no,n0,KKo,ope,ZKo,eZo,pn,oZo,rpe,rZo,tZo,tpe,aZo,nZo,ape,sZo,lZo,iZo,npe,LF,spe,dZo,cZo,fO,fZo,mZo,gZo,xF,hZo,lpe,pZo,_Zo,ipe,uZo,bZo,dpe,FZo,vZo,s0,IBe,gc,kF,cpe,l0,TZo,fpe,MZo,qBe,Fr,i0,EZo,hc,CZo,mO,wZo,AZo,gO,yZo,LZo,xZo,d0,kZo,mpe,SZo,RZo,BZo,gt,c0,PZo,gpe,$Zo,IZo,pc,qZo,hpe,NZo,jZo,hO,DZo,GZo,OZo,ppe,VZo,XZo,f0,zZo,ho,m0,QZo,_pe,WZo,HZo,_n,UZo,upe,JZo,YZo,bpe,KZo,ZZo,Fpe,eer,oer,rer,x,SF,vpe,ter,aer,pO,ner,ser,ler,RF,Tpe,ier,der,_O,cer,fer,mer,BF,Mpe,ger,her,uO,per,_er,uer,PF,Epe,ber,Fer,bO,ver,Ter,Mer,$F,Cpe,Eer,Cer,FO,wer,Aer,yer,IF,wpe,Ler,xer,vO,ker,Ser,Rer,qF,Ape,Ber,Per,TO,$er,Ier,qer,NF,ype,Ner,jer,MO,Der,Ger,Oer,jF,Lpe,Ver,Xer,EO,zer,Qer,Wer,DF,xpe,Her,Uer,CO,Jer,Yer,Ker,GF,kpe,Zer,eor,wO,oor,ror,tor,OF,Spe,aor,nor,AO,sor,lor,ior,VF,Rpe,dor,cor,yO,mor,gor,hor,XF,Bpe,por,_or,LO,uor,bor,For,zF,Ppe,vor,Tor,xO,Mor,Eor,Cor,QF,$pe,wor,Aor,kO,yor,Lor,xor,Gs,Ipe,kor,Sor,SO,Ror,Bor,RO,Por,$or,Ior,WF,qpe,qor,Nor,BO,jor,Dor,Gor,HF,Npe,Oor,Vor,PO,Xor,zor,Qor,UF,jpe,Wor,Hor,$O,Uor,Jor,Yor,JF,Dpe,Kor,Zor,IO,err,orr,rrr,YF,Gpe,trr,arr,qO,nrr,srr,lrr,KF,Ope,irr,drr,NO,crr,frr,mrr,ZF,Vpe,grr,hrr,jO,prr,_rr,urr,ev,Xpe,brr,Frr,DO,vrr,Trr,Mrr,ov,zpe,Err,Crr,GO,wrr,Arr,yrr,rv,Qpe,Lrr,xrr,OO,krr,Srr,Rrr,tv,Wpe,Brr,Prr,VO,$rr,Irr,qrr,av,Hpe,Nrr,jrr,XO,Drr,Grr,Orr,nv,Upe,Vrr,Xrr,zO,zrr,Qrr,Wrr,sv,Jpe,Hrr,Urr,QO,Jrr,Yrr,Krr,lv,Ype,Zrr,etr,WO,otr,rtr,ttr,iv,Kpe,atr,ntr,HO,str,ltr,itr,dv,Zpe,dtr,ctr,UO,ftr,mtr,gtr,cv,e_e,htr,ptr,JO,_tr,utr,btr,fv,o_e,Ftr,vtr,YO,Ttr,Mtr,Etr,mv,r_e,Ctr,wtr,KO,Atr,ytr,Ltr,gv,t_e,xtr,ktr,ZO,Str,Rtr,Btr,hv,a_e,Ptr,$tr,eV,Itr,qtr,Ntr,pv,n_e,jtr,Dtr,oV,Gtr,Otr,Vtr,_v,s_e,Xtr,ztr,rV,Qtr,Wtr,Htr,uv,l_e,Utr,Jtr,tV,Ytr,Ktr,Ztr,bv,i_e,ear,oar,aV,rar,tar,aar,Fv,d_e,nar,sar,nV,lar,iar,dar,c_e,car,far,g0,NBe,_c,vv,f_e,h0,mar,m_e,gar,jBe,vr,p0,har,uc,par,sV,_ar,uar,lV,bar,Far,Tar,_0,Mar,g_e,Ear,Car,war,ht,u0,Aar,h_e,yar,Lar,bc,xar,p_e,kar,Sar,iV,Rar,Bar,Par,__e,$ar,Iar,b0,qar,po,F0,Nar,u_e,jar,Dar,un,Gar,b_e,Oar,Var,F_e,Xar,zar,v_e,Qar,War,Har,H,Tv,T_e,Uar,Jar,dV,Yar,Kar,Zar,Mv,M_e,enr,onr,cV,rnr,tnr,anr,Ev,E_e,nnr,snr,fV,lnr,inr,dnr,Cv,C_e,cnr,fnr,mV,mnr,gnr,hnr,wv,w_e,pnr,_nr,gV,unr,bnr,Fnr,Av,A_e,vnr,Tnr,hV,Mnr,Enr,Cnr,yv,y_e,wnr,Anr,pV,ynr,Lnr,xnr,Lv,L_e,knr,Snr,_V,Rnr,Bnr,Pnr,xv,x_e,$nr,Inr,uV,qnr,Nnr,jnr,kv,k_e,Dnr,Gnr,bV,Onr,Vnr,Xnr,Sv,S_e,znr,Qnr,FV,Wnr,Hnr,Unr,Rv,R_e,Jnr,Ynr,vV,Knr,Znr,esr,Bv,B_e,osr,rsr,TV,tsr,asr,nsr,Pv,P_e,ssr,lsr,MV,isr,dsr,csr,$v,$_e,fsr,msr,EV,gsr,hsr,psr,Iv,I_e,_sr,usr,CV,bsr,Fsr,vsr,qv,q_e,Tsr,Msr,wV,Esr,Csr,wsr,Nv,N_e,Asr,ysr,AV,Lsr,xsr,ksr,jv,j_e,Ssr,Rsr,yV,Bsr,Psr,$sr,Dv,D_e,Isr,qsr,LV,Nsr,jsr,Dsr,Gv,G_e,Gsr,Osr,xV,Vsr,Xsr,zsr,Ov,O_e,Qsr,Wsr,kV,Hsr,Usr,Jsr,Vv,V_e,Ysr,Ksr,SV,Zsr,elr,olr,X_e,rlr,tlr,v0,DBe,Fc,Xv,z_e,T0,alr,Q_e,nlr,GBe,Tr,M0,slr,vc,llr,RV,ilr,dlr,BV,clr,flr,mlr,E0,glr,W_e,hlr,plr,_lr,pt,C0,ulr,H_e,blr,Flr,Tc,vlr,U_e,Tlr,Mlr,PV,Elr,Clr,wlr,J_e,Alr,ylr,w0,Llr,_o,A0,xlr,Y_e,klr,Slr,bn,Rlr,K_e,Blr,Plr,Z_e,$lr,Ilr,eue,qlr,Nlr,jlr,fe,zv,oue,Dlr,Glr,$V,Olr,Vlr,Xlr,Qv,rue,zlr,Qlr,IV,Wlr,Hlr,Ulr,Wv,tue,Jlr,Ylr,qV,Klr,Zlr,eir,Hv,aue,oir,rir,NV,tir,air,nir,Uv,nue,sir,lir,jV,iir,dir,cir,Jv,sue,fir,mir,DV,gir,hir,pir,Yv,lue,_ir,uir,GV,bir,Fir,vir,Kv,iue,Tir,Mir,OV,Eir,Cir,wir,Zv,due,Air,yir,VV,Lir,xir,kir,eT,cue,Sir,Rir,XV,Bir,Pir,$ir,oT,fue,Iir,qir,zV,Nir,jir,Dir,rT,mue,Gir,Oir,QV,Vir,Xir,zir,gue,Qir,Wir,y0,OBe,Mc,tT,hue,L0,Hir,pue,Uir,VBe,Mr,x0,Jir,Ec,Yir,WV,Kir,Zir,HV,edr,odr,rdr,k0,tdr,_ue,adr,ndr,sdr,_t,S0,ldr,uue,idr,ddr,Cc,cdr,bue,fdr,mdr,UV,gdr,hdr,pdr,Fue,_dr,udr,R0,bdr,uo,B0,Fdr,vue,vdr,Tdr,Fn,Mdr,Tue,Edr,Cdr,Mue,wdr,Adr,Eue,ydr,Ldr,xdr,P0,aT,Cue,kdr,Sdr,JV,Rdr,Bdr,Pdr,nT,wue,$dr,Idr,YV,qdr,Ndr,jdr,Aue,Ddr,Gdr,$0,XBe,wc,sT,yue,I0,Odr,Lue,Vdr,zBe,Er,q0,Xdr,Ac,zdr,KV,Qdr,Wdr,ZV,Hdr,Udr,Jdr,N0,Ydr,xue,Kdr,Zdr,ecr,ut,j0,ocr,kue,rcr,tcr,yc,acr,Sue,ncr,scr,eX,lcr,icr,dcr,Rue,ccr,fcr,D0,mcr,bo,G0,gcr,Bue,hcr,pcr,vn,_cr,Pue,ucr,bcr,$ue,Fcr,vcr,Iue,Tcr,Mcr,Ecr,J,lT,que,Ccr,wcr,oX,Acr,ycr,Lcr,iT,Nue,xcr,kcr,rX,Scr,Rcr,Bcr,dT,jue,Pcr,$cr,tX,Icr,qcr,Ncr,cT,Due,jcr,Dcr,aX,Gcr,Ocr,Vcr,fT,Gue,Xcr,zcr,nX,Qcr,Wcr,Hcr,mT,Oue,Ucr,Jcr,sX,Ycr,Kcr,Zcr,gT,Vue,efr,ofr,lX,rfr,tfr,afr,hT,Xue,nfr,sfr,iX,lfr,ifr,dfr,pT,zue,cfr,ffr,dX,mfr,gfr,hfr,_T,Que,pfr,_fr,cX,ufr,bfr,Ffr,uT,Wue,vfr,Tfr,fX,Mfr,Efr,Cfr,bT,Hue,wfr,Afr,mX,yfr,Lfr,xfr,FT,Uue,kfr,Sfr,gX,Rfr,Bfr,Pfr,vT,Jue,$fr,Ifr,hX,qfr,Nfr,jfr,TT,Yue,Dfr,Gfr,pX,Ofr,Vfr,Xfr,MT,Kue,zfr,Qfr,_X,Wfr,Hfr,Ufr,ET,Zue,Jfr,Yfr,uX,Kfr,Zfr,emr,CT,e6e,omr,rmr,bX,tmr,amr,nmr,wT,o6e,smr,lmr,FX,imr,dmr,cmr,AT,r6e,fmr,mmr,vX,gmr,hmr,pmr,t6e,_mr,umr,O0,QBe,Lc,yT,a6e,V0,bmr,n6e,Fmr,WBe,Cr,X0,vmr,xc,Tmr,TX,Mmr,Emr,MX,Cmr,wmr,Amr,z0,ymr,s6e,Lmr,xmr,kmr,bt,Q0,Smr,l6e,Rmr,Bmr,kc,Pmr,i6e,$mr,Imr,EX,qmr,Nmr,jmr,d6e,Dmr,Gmr,W0,Omr,Fo,H0,Vmr,c6e,Xmr,zmr,Tn,Qmr,f6e,Wmr,Hmr,m6e,Umr,Jmr,g6e,Ymr,Kmr,Zmr,be,LT,h6e,egr,ogr,CX,rgr,tgr,agr,xT,p6e,ngr,sgr,wX,lgr,igr,dgr,kT,_6e,cgr,fgr,AX,mgr,ggr,hgr,ST,u6e,pgr,_gr,yX,ugr,bgr,Fgr,RT,b6e,vgr,Tgr,LX,Mgr,Egr,Cgr,BT,F6e,wgr,Agr,xX,ygr,Lgr,xgr,PT,v6e,kgr,Sgr,kX,Rgr,Bgr,Pgr,$T,T6e,$gr,Igr,SX,qgr,Ngr,jgr,IT,M6e,Dgr,Ggr,RX,Ogr,Vgr,Xgr,qT,E6e,zgr,Qgr,BX,Wgr,Hgr,Ugr,C6e,Jgr,Ygr,U0,HBe,Sc,NT,w6e,J0,Kgr,A6e,Zgr,UBe,wr,Y0,ehr,Rc,ohr,PX,rhr,thr,$X,ahr,nhr,shr,K0,lhr,y6e,ihr,dhr,chr,Ft,Z0,fhr,L6e,mhr,ghr,Bc,hhr,x6e,phr,_hr,IX,uhr,bhr,Fhr,k6e,vhr,Thr,ey,Mhr,vo,oy,Ehr,S6e,Chr,whr,Mn,Ahr,R6e,yhr,Lhr,B6e,xhr,khr,P6e,Shr,Rhr,Bhr,V,jT,$6e,Phr,$hr,qX,Ihr,qhr,Nhr,DT,I6e,jhr,Dhr,NX,Ghr,Ohr,Vhr,GT,q6e,Xhr,zhr,jX,Qhr,Whr,Hhr,OT,N6e,Uhr,Jhr,DX,Yhr,Khr,Zhr,VT,j6e,epr,opr,GX,rpr,tpr,apr,XT,D6e,npr,spr,OX,lpr,ipr,dpr,zT,G6e,cpr,fpr,VX,mpr,gpr,hpr,QT,O6e,ppr,_pr,XX,upr,bpr,Fpr,WT,V6e,vpr,Tpr,zX,Mpr,Epr,Cpr,HT,X6e,wpr,Apr,QX,ypr,Lpr,xpr,UT,z6e,kpr,Spr,WX,Rpr,Bpr,Ppr,JT,Q6e,$pr,Ipr,HX,qpr,Npr,jpr,YT,W6e,Dpr,Gpr,UX,Opr,Vpr,Xpr,KT,H6e,zpr,Qpr,JX,Wpr,Hpr,Upr,ZT,U6e,Jpr,Ypr,YX,Kpr,Zpr,e_r,e9,J6e,o_r,r_r,KX,t_r,a_r,n_r,o9,Y6e,s_r,l_r,ZX,i_r,d_r,c_r,r9,K6e,f_r,m_r,ez,g_r,h_r,p_r,t9,Z6e,__r,u_r,oz,b_r,F_r,v_r,a9,e1e,T_r,M_r,rz,E_r,C_r,w_r,n9,o1e,A_r,y_r,tz,L_r,x_r,k_r,s9,r1e,S_r,R_r,az,B_r,P_r,$_r,l9,t1e,I_r,q_r,nz,N_r,j_r,D_r,i9,a1e,G_r,O_r,sz,V_r,X_r,z_r,d9,n1e,Q_r,W_r,lz,H_r,U_r,J_r,c9,s1e,Y_r,K_r,iz,Z_r,eur,our,l1e,rur,tur,ry,JBe,Pc,f9,i1e,ty,aur,d1e,nur,YBe,Ar,ay,sur,$c,lur,dz,iur,dur,cz,cur,fur,mur,ny,gur,c1e,hur,pur,_ur,vt,sy,uur,f1e,bur,Fur,Ic,vur,m1e,Tur,Mur,fz,Eur,Cur,wur,g1e,Aur,yur,ly,Lur,To,iy,xur,h1e,kur,Sur,En,Rur,p1e,Bur,Pur,_1e,$ur,Iur,u1e,qur,Nur,jur,ne,m9,b1e,Dur,Gur,mz,Our,Vur,Xur,g9,F1e,zur,Qur,gz,Wur,Hur,Uur,h9,v1e,Jur,Yur,hz,Kur,Zur,e6r,p9,T1e,o6r,r6r,pz,t6r,a6r,n6r,_9,M1e,s6r,l6r,_z,i6r,d6r,c6r,u9,E1e,f6r,m6r,uz,g6r,h6r,p6r,b9,C1e,_6r,u6r,bz,b6r,F6r,v6r,F9,w1e,T6r,M6r,Fz,E6r,C6r,w6r,v9,A1e,A6r,y6r,vz,L6r,x6r,k6r,T9,y1e,S6r,R6r,Tz,B6r,P6r,$6r,M9,L1e,I6r,q6r,Mz,N6r,j6r,D6r,E9,x1e,G6r,O6r,Ez,V6r,X6r,z6r,C9,k1e,Q6r,W6r,Cz,H6r,U6r,J6r,w9,S1e,Y6r,K6r,wz,Z6r,e1r,o1r,A9,R1e,r1r,t1r,Az,a1r,n1r,s1r,y9,B1e,l1r,i1r,yz,d1r,c1r,f1r,L9,P1e,m1r,g1r,Lz,h1r,p1r,_1r,$1e,u1r,b1r,dy,KBe,qc,x9,I1e,cy,F1r,q1e,v1r,ZBe,yr,fy,T1r,Nc,M1r,xz,E1r,C1r,kz,w1r,A1r,y1r,my,L1r,N1e,x1r,k1r,S1r,Tt,gy,R1r,j1e,B1r,P1r,jc,$1r,D1e,I1r,q1r,Sz,N1r,j1r,D1r,G1e,G1r,O1r,hy,V1r,Mo,py,X1r,O1e,z1r,Q1r,Cn,W1r,V1e,H1r,U1r,X1e,J1r,Y1r,z1e,K1r,Z1r,ebr,Q1e,k9,W1e,obr,rbr,Rz,tbr,abr,nbr,H1e,sbr,lbr,_y,ePe,Dc,S9,U1e,uy,ibr,J1e,dbr,oPe,Lr,by,cbr,Gc,fbr,Bz,mbr,gbr,Pz,hbr,pbr,_br,Fy,ubr,Y1e,bbr,Fbr,vbr,Mt,vy,Tbr,K1e,Mbr,Ebr,Oc,Cbr,Z1e,wbr,Abr,$z,ybr,Lbr,xbr,ebe,kbr,Sbr,Ty,Rbr,Eo,My,Bbr,obe,Pbr,$br,wn,Ibr,rbe,qbr,Nbr,tbe,jbr,Dbr,abe,Gbr,Obr,Vbr,Y,R9,nbe,Xbr,zbr,Iz,Qbr,Wbr,Hbr,B9,sbe,Ubr,Jbr,qz,Ybr,Kbr,Zbr,P9,lbe,e5r,o5r,Nz,r5r,t5r,a5r,$9,ibe,n5r,s5r,jz,l5r,i5r,d5r,I9,dbe,c5r,f5r,Dz,m5r,g5r,h5r,q9,cbe,p5r,_5r,Gz,u5r,b5r,F5r,N9,fbe,v5r,T5r,Oz,M5r,E5r,C5r,j9,mbe,w5r,A5r,Vz,y5r,L5r,x5r,D9,gbe,k5r,S5r,Xz,R5r,B5r,P5r,G9,hbe,$5r,I5r,zz,q5r,N5r,j5r,O9,pbe,D5r,G5r,Qz,O5r,V5r,X5r,V9,_be,z5r,Q5r,Wz,W5r,H5r,U5r,X9,ube,J5r,Y5r,Hz,K5r,Z5r,e2r,z9,bbe,o2r,r2r,Uz,t2r,a2r,n2r,Q9,Fbe,s2r,l2r,Jz,i2r,d2r,c2r,W9,vbe,f2r,m2r,Yz,g2r,h2r,p2r,H9,Tbe,_2r,u2r,Kz,b2r,F2r,v2r,U9,Mbe,T2r,M2r,Zz,E2r,C2r,w2r,J9,Ebe,A2r,y2r,eQ,L2r,x2r,k2r,Y9,Cbe,S2r,R2r,oQ,B2r,P2r,$2r,wbe,I2r,q2r,Ey,rPe,Vc,K9,Abe,Cy,N2r,ybe,j2r,tPe,xr,wy,D2r,Xc,G2r,rQ,O2r,V2r,tQ,X2r,z2r,Q2r,Ay,W2r,Lbe,H2r,U2r,J2r,Et,yy,Y2r,xbe,K2r,Z2r,zc,eFr,kbe,oFr,rFr,aQ,tFr,aFr,nFr,Sbe,sFr,lFr,Ly,iFr,Co,xy,dFr,Rbe,cFr,fFr,An,mFr,Bbe,gFr,hFr,Pbe,pFr,_Fr,$be,uFr,bFr,FFr,K,Z9,Ibe,vFr,TFr,nQ,MFr,EFr,CFr,eM,qbe,wFr,AFr,sQ,yFr,LFr,xFr,oM,Nbe,kFr,SFr,lQ,RFr,BFr,PFr,rM,jbe,$Fr,IFr,iQ,qFr,NFr,jFr,tM,Dbe,DFr,GFr,dQ,OFr,VFr,XFr,aM,Gbe,zFr,QFr,cQ,WFr,HFr,UFr,nM,Obe,JFr,YFr,fQ,KFr,ZFr,evr,sM,Vbe,ovr,rvr,mQ,tvr,avr,nvr,lM,Xbe,svr,lvr,gQ,ivr,dvr,cvr,iM,zbe,fvr,mvr,hQ,gvr,hvr,pvr,dM,Qbe,_vr,uvr,pQ,bvr,Fvr,vvr,cM,Wbe,Tvr,Mvr,_Q,Evr,Cvr,wvr,fM,Hbe,Avr,yvr,uQ,Lvr,xvr,kvr,mM,Ube,Svr,Rvr,bQ,Bvr,Pvr,$vr,gM,Jbe,Ivr,qvr,FQ,Nvr,jvr,Dvr,hM,Ybe,Gvr,Ovr,vQ,Vvr,Xvr,zvr,pM,Kbe,Qvr,Wvr,TQ,Hvr,Uvr,Jvr,_M,Zbe,Yvr,Kvr,MQ,Zvr,eTr,oTr,uM,e5e,rTr,tTr,EQ,aTr,nTr,sTr,bM,o5e,lTr,iTr,CQ,dTr,cTr,fTr,r5e,mTr,gTr,ky,aPe,Qc,FM,t5e,Sy,hTr,a5e,pTr,nPe,kr,Ry,_Tr,Wc,uTr,wQ,bTr,FTr,AQ,vTr,TTr,MTr,By,ETr,n5e,CTr,wTr,ATr,Ct,Py,yTr,s5e,LTr,xTr,Hc,kTr,l5e,STr,RTr,yQ,BTr,PTr,$Tr,i5e,ITr,qTr,$y,NTr,wo,Iy,jTr,d5e,DTr,GTr,yn,OTr,c5e,VTr,XTr,f5e,zTr,QTr,m5e,WTr,HTr,UTr,g5e,vM,h5e,JTr,YTr,LQ,KTr,ZTr,e9r,p5e,o9r,r9r,qy,sPe,Uc,TM,_5e,Ny,t9r,u5e,a9r,lPe,Sr,jy,n9r,Jc,s9r,xQ,l9r,i9r,kQ,d9r,c9r,f9r,Dy,m9r,b5e,g9r,h9r,p9r,wt,Gy,_9r,F5e,u9r,b9r,Yc,F9r,v5e,v9r,T9r,SQ,M9r,E9r,C9r,T5e,w9r,A9r,Oy,y9r,Ao,Vy,L9r,M5e,x9r,k9r,Ln,S9r,E5e,R9r,B9r,C5e,P9r,$9r,w5e,I9r,q9r,N9r,A5e,MM,y5e,j9r,D9r,RQ,G9r,O9r,V9r,L5e,X9r,z9r,Xy,iPe,Kc,EM,x5e,zy,Q9r,k5e,W9r,dPe,Rr,Qy,H9r,Zc,U9r,BQ,J9r,Y9r,PQ,K9r,Z9r,eMr,Wy,oMr,S5e,rMr,tMr,aMr,At,Hy,nMr,R5e,sMr,lMr,ef,iMr,B5e,dMr,cMr,$Q,fMr,mMr,gMr,P5e,hMr,pMr,Uy,_Mr,yo,Jy,uMr,$5e,bMr,FMr,xn,vMr,I5e,TMr,MMr,q5e,EMr,CMr,N5e,wMr,AMr,yMr,z,CM,j5e,LMr,xMr,IQ,kMr,SMr,RMr,wM,D5e,BMr,PMr,qQ,$Mr,IMr,qMr,AM,G5e,NMr,jMr,NQ,DMr,GMr,OMr,yM,O5e,VMr,XMr,jQ,zMr,QMr,WMr,LM,V5e,HMr,UMr,DQ,JMr,YMr,KMr,xM,X5e,ZMr,e4r,GQ,o4r,r4r,t4r,kM,z5e,a4r,n4r,OQ,s4r,l4r,i4r,SM,Q5e,d4r,c4r,VQ,f4r,m4r,g4r,RM,W5e,h4r,p4r,XQ,_4r,u4r,b4r,BM,H5e,F4r,v4r,zQ,T4r,M4r,E4r,PM,U5e,C4r,w4r,QQ,A4r,y4r,L4r,$M,J5e,x4r,k4r,WQ,S4r,R4r,B4r,IM,Y5e,P4r,$4r,HQ,I4r,q4r,N4r,qM,K5e,j4r,D4r,UQ,G4r,O4r,V4r,NM,Z5e,X4r,z4r,JQ,Q4r,W4r,H4r,jM,e2e,U4r,J4r,YQ,Y4r,K4r,Z4r,DM,o2e,eEr,oEr,KQ,rEr,tEr,aEr,GM,r2e,nEr,sEr,ZQ,lEr,iEr,dEr,OM,t2e,cEr,fEr,eW,mEr,gEr,hEr,VM,a2e,pEr,_Er,oW,uEr,bEr,FEr,XM,n2e,vEr,TEr,rW,MEr,EEr,CEr,zM,s2e,wEr,AEr,tW,yEr,LEr,xEr,QM,l2e,kEr,SEr,aW,REr,BEr,PEr,WM,i2e,$Er,IEr,nW,qEr,NEr,jEr,HM,d2e,DEr,GEr,sW,OEr,VEr,XEr,c2e,zEr,QEr,Yy,cPe,of,UM,f2e,Ky,WEr,m2e,HEr,fPe,Br,Zy,UEr,rf,JEr,lW,YEr,KEr,iW,ZEr,eCr,oCr,eL,rCr,g2e,tCr,aCr,nCr,yt,oL,sCr,h2e,lCr,iCr,tf,dCr,p2e,cCr,fCr,dW,mCr,gCr,hCr,_2e,pCr,_Cr,rL,uCr,Lo,tL,bCr,u2e,FCr,vCr,kn,TCr,b2e,MCr,ECr,F2e,CCr,wCr,v2e,ACr,yCr,LCr,ca,JM,T2e,xCr,kCr,cW,SCr,RCr,BCr,YM,M2e,PCr,$Cr,fW,ICr,qCr,NCr,KM,E2e,jCr,DCr,mW,GCr,OCr,VCr,ZM,C2e,XCr,zCr,gW,QCr,WCr,HCr,e4,w2e,UCr,JCr,hW,YCr,KCr,ZCr,A2e,e3r,o3r,aL,mPe,af,o4,y2e,nL,r3r,L2e,t3r,gPe,Pr,sL,a3r,nf,n3r,pW,s3r,l3r,_W,i3r,d3r,c3r,lL,f3r,x2e,m3r,g3r,h3r,Lt,iL,p3r,k2e,_3r,u3r,sf,b3r,S2e,F3r,v3r,uW,T3r,M3r,E3r,R2e,C3r,w3r,dL,A3r,xo,cL,y3r,B2e,L3r,x3r,Sn,k3r,P2e,S3r,R3r,$2e,B3r,P3r,I2e,$3r,I3r,q3r,me,r4,q2e,N3r,j3r,bW,D3r,G3r,O3r,t4,N2e,V3r,X3r,FW,z3r,Q3r,W3r,a4,j2e,H3r,U3r,vW,J3r,Y3r,K3r,n4,D2e,Z3r,ewr,TW,owr,rwr,twr,s4,G2e,awr,nwr,MW,swr,lwr,iwr,l4,O2e,dwr,cwr,EW,fwr,mwr,gwr,i4,V2e,hwr,pwr,CW,_wr,uwr,bwr,d4,X2e,Fwr,vwr,wW,Twr,Mwr,Ewr,c4,z2e,Cwr,wwr,AW,Awr,ywr,Lwr,f4,Q2e,xwr,kwr,yW,Swr,Rwr,Bwr,m4,W2e,Pwr,$wr,LW,Iwr,qwr,Nwr,g4,H2e,jwr,Dwr,xW,Gwr,Owr,Vwr,U2e,Xwr,zwr,fL,hPe,lf,h4,J2e,mL,Qwr,Y2e,Wwr,pPe,$r,gL,Hwr,df,Uwr,kW,Jwr,Ywr,SW,Kwr,Zwr,eAr,hL,oAr,K2e,rAr,tAr,aAr,xt,pL,nAr,Z2e,sAr,lAr,cf,iAr,eFe,dAr,cAr,RW,fAr,mAr,gAr,oFe,hAr,pAr,_L,_Ar,ko,uL,uAr,rFe,bAr,FAr,Rn,vAr,tFe,TAr,MAr,aFe,EAr,CAr,nFe,wAr,AAr,yAr,Fe,p4,sFe,LAr,xAr,BW,kAr,SAr,RAr,_4,lFe,BAr,PAr,PW,$Ar,IAr,qAr,u4,iFe,NAr,jAr,$W,DAr,GAr,OAr,b4,dFe,VAr,XAr,IW,zAr,QAr,WAr,F4,cFe,HAr,UAr,qW,JAr,YAr,KAr,v4,fFe,ZAr,e0r,NW,o0r,r0r,t0r,T4,mFe,a0r,n0r,jW,s0r,l0r,i0r,M4,gFe,d0r,c0r,DW,f0r,m0r,g0r,E4,hFe,h0r,p0r,GW,_0r,u0r,b0r,C4,pFe,F0r,v0r,OW,T0r,M0r,E0r,_Fe,C0r,w0r,bL,_Pe,ff,w4,uFe,FL,A0r,bFe,y0r,uPe,Ir,vL,L0r,mf,x0r,VW,k0r,S0r,XW,R0r,B0r,P0r,TL,$0r,FFe,I0r,q0r,N0r,kt,ML,j0r,vFe,D0r,G0r,gf,O0r,TFe,V0r,X0r,zW,z0r,Q0r,W0r,MFe,H0r,U0r,EL,J0r,So,CL,Y0r,EFe,K0r,Z0r,Bn,eyr,CFe,oyr,ryr,wFe,tyr,ayr,AFe,nyr,syr,lyr,Ee,A4,yFe,iyr,dyr,QW,cyr,fyr,myr,y4,LFe,gyr,hyr,WW,pyr,_yr,uyr,L4,xFe,byr,Fyr,HW,vyr,Tyr,Myr,x4,kFe,Eyr,Cyr,UW,wyr,Ayr,yyr,k4,SFe,Lyr,xyr,JW,kyr,Syr,Ryr,S4,RFe,Byr,Pyr,YW,$yr,Iyr,qyr,R4,BFe,Nyr,jyr,KW,Dyr,Gyr,Oyr,B4,PFe,Vyr,Xyr,ZW,zyr,Qyr,Wyr,P4,$Fe,Hyr,Uyr,eH,Jyr,Yyr,Kyr,IFe,Zyr,eLr,wL,bPe,hf,$4,qFe,AL,oLr,NFe,rLr,FPe,qr,yL,tLr,pf,aLr,oH,nLr,sLr,rH,lLr,iLr,dLr,LL,cLr,jFe,fLr,mLr,gLr,St,xL,hLr,DFe,pLr,_Lr,_f,uLr,GFe,bLr,FLr,tH,vLr,TLr,MLr,OFe,ELr,CLr,kL,wLr,Ro,SL,ALr,VFe,yLr,LLr,Pn,xLr,XFe,kLr,SLr,zFe,RLr,BLr,QFe,PLr,$Lr,ILr,ve,I4,WFe,qLr,NLr,aH,jLr,DLr,GLr,q4,HFe,OLr,VLr,nH,XLr,zLr,QLr,N4,UFe,WLr,HLr,sH,ULr,JLr,YLr,j4,JFe,KLr,ZLr,lH,e8r,o8r,r8r,D4,YFe,t8r,a8r,iH,n8r,s8r,l8r,G4,KFe,i8r,d8r,dH,c8r,f8r,m8r,O4,ZFe,g8r,h8r,cH,p8r,_8r,u8r,V4,eve,b8r,F8r,fH,v8r,T8r,M8r,X4,ove,E8r,C8r,mH,w8r,A8r,y8r,z4,rve,L8r,x8r,gH,k8r,S8r,R8r,tve,B8r,P8r,RL,vPe,uf,Q4,ave,BL,$8r,nve,I8r,TPe,Nr,PL,q8r,bf,N8r,hH,j8r,D8r,pH,G8r,O8r,V8r,$L,X8r,sve,z8r,Q8r,W8r,Rt,IL,H8r,lve,U8r,J8r,Ff,Y8r,ive,K8r,Z8r,_H,e7r,o7r,r7r,dve,t7r,a7r,qL,n7r,Bo,NL,s7r,cve,l7r,i7r,$n,d7r,fve,c7r,f7r,mve,m7r,g7r,gve,h7r,p7r,_7r,Te,W4,hve,u7r,b7r,uH,F7r,v7r,T7r,H4,pve,M7r,E7r,bH,C7r,w7r,A7r,U4,_ve,y7r,L7r,FH,x7r,k7r,S7r,J4,uve,R7r,B7r,vH,P7r,$7r,I7r,Y4,bve,q7r,N7r,TH,j7r,D7r,G7r,K4,Fve,O7r,V7r,MH,X7r,z7r,Q7r,Z4,vve,W7r,H7r,EH,U7r,J7r,Y7r,eE,Tve,K7r,Z7r,CH,exr,oxr,rxr,oE,Mve,txr,axr,wH,nxr,sxr,lxr,rE,Eve,ixr,dxr,AH,cxr,fxr,mxr,Cve,gxr,hxr,jL,MPe,vf,tE,wve,DL,pxr,Ave,_xr,EPe,jr,GL,uxr,Tf,bxr,yH,Fxr,vxr,LH,Txr,Mxr,Exr,OL,Cxr,yve,wxr,Axr,yxr,Bt,VL,Lxr,Lve,xxr,kxr,Mf,Sxr,xve,Rxr,Bxr,xH,Pxr,$xr,Ixr,kve,qxr,Nxr,XL,jxr,Po,zL,Dxr,Sve,Gxr,Oxr,In,Vxr,Rve,Xxr,zxr,Bve,Qxr,Wxr,Pve,Hxr,Uxr,Jxr,Be,aE,$ve,Yxr,Kxr,kH,Zxr,ekr,okr,nE,Ive,rkr,tkr,SH,akr,nkr,skr,sE,qve,lkr,ikr,RH,dkr,ckr,fkr,lE,Nve,mkr,gkr,BH,hkr,pkr,_kr,iE,jve,ukr,bkr,PH,Fkr,vkr,Tkr,dE,Dve,Mkr,Ekr,$H,Ckr,wkr,Akr,cE,Gve,ykr,Lkr,IH,xkr,kkr,Skr,fE,Ove,Rkr,Bkr,qH,Pkr,$kr,Ikr,Vve,qkr,Nkr,QL,CPe,Ef,mE,Xve,WL,jkr,zve,Dkr,wPe,Dr,HL,Gkr,Cf,Okr,NH,Vkr,Xkr,jH,zkr,Qkr,Wkr,UL,Hkr,Qve,Ukr,Jkr,Ykr,Pt,JL,Kkr,Wve,Zkr,eSr,wf,oSr,Hve,rSr,tSr,DH,aSr,nSr,sSr,Uve,lSr,iSr,YL,dSr,$o,KL,cSr,Jve,fSr,mSr,qn,gSr,Yve,hSr,pSr,Kve,_Sr,uSr,Zve,bSr,FSr,vSr,Pe,gE,eTe,TSr,MSr,GH,ESr,CSr,wSr,hE,oTe,ASr,ySr,OH,LSr,xSr,kSr,pE,rTe,SSr,RSr,VH,BSr,PSr,$Sr,_E,tTe,ISr,qSr,XH,NSr,jSr,DSr,uE,aTe,GSr,OSr,zH,VSr,XSr,zSr,bE,nTe,QSr,WSr,QH,HSr,USr,JSr,FE,sTe,YSr,KSr,WH,ZSr,eRr,oRr,vE,lTe,rRr,tRr,HH,aRr,nRr,sRr,iTe,lRr,iRr,ZL,APe,Af,TE,dTe,e8,dRr,cTe,cRr,yPe,Gr,o8,fRr,yf,mRr,UH,gRr,hRr,JH,pRr,_Rr,uRr,r8,bRr,fTe,FRr,vRr,TRr,$t,t8,MRr,mTe,ERr,CRr,Lf,wRr,gTe,ARr,yRr,YH,LRr,xRr,kRr,hTe,SRr,RRr,a8,BRr,Io,n8,PRr,pTe,$Rr,IRr,Nn,qRr,_Te,NRr,jRr,uTe,DRr,GRr,bTe,ORr,VRr,XRr,FTe,ME,vTe,zRr,QRr,KH,WRr,HRr,URr,TTe,JRr,YRr,s8,LPe,xf,EE,MTe,l8,KRr,ETe,ZRr,xPe,Or,i8,eBr,kf,oBr,ZH,rBr,tBr,eU,aBr,nBr,sBr,d8,lBr,CTe,iBr,dBr,cBr,It,c8,fBr,wTe,mBr,gBr,Sf,hBr,ATe,pBr,_Br,oU,uBr,bBr,FBr,yTe,vBr,TBr,f8,MBr,qo,m8,EBr,LTe,CBr,wBr,jn,ABr,xTe,yBr,LBr,kTe,xBr,kBr,STe,SBr,RBr,BBr,g8,CE,RTe,PBr,$Br,rU,IBr,qBr,NBr,wE,BTe,jBr,DBr,tU,GBr,OBr,VBr,PTe,XBr,zBr,h8,kPe,Rf,AE,$Te,p8,QBr,ITe,WBr,SPe,Vr,_8,HBr,Bf,UBr,aU,JBr,YBr,nU,KBr,ZBr,ePr,u8,oPr,qTe,rPr,tPr,aPr,qt,b8,nPr,NTe,sPr,lPr,Pf,iPr,jTe,dPr,cPr,sU,fPr,mPr,gPr,DTe,hPr,pPr,F8,_Pr,No,v8,uPr,GTe,bPr,FPr,Dn,vPr,OTe,TPr,MPr,VTe,EPr,CPr,XTe,wPr,APr,yPr,zTe,yE,QTe,LPr,xPr,lU,kPr,SPr,RPr,WTe,BPr,PPr,T8,RPe;return ge=new X({}),Da=new A({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),SC=new X({}),RC=new A({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),Of=new $Pr({props:{warning:!0,$$slots:{default:[w3t]},$$scope:{ctx:If}}}),BC=new X({}),PC=new E({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/configuration_auto.py#L553"}}),qC=new E({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/configuration_auto.py#L576",parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}]}}),NC=new A({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

config.unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config.unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),jC=new E({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/configuration_auto.py#L698",parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}]}}),DC=new X({}),GC=new E({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/tokenization_auto.py#L351"}}),XC=new E({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/tokenization_auto.py#L365",parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_16659/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}]}}),zC=new A({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)`}}),QC=new E({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/tokenization_auto.py#L561",parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}]}}),WC=new X({}),HC=new E({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/feature_extraction_auto.py#L172"}}),YC=new E({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/feature_extraction_auto.py#L186",parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_16659/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}]}}),$h=new $Pr({props:{$$slots:{default:[A3t]},$$scope:{ctx:If}}}),KC=new A({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),ZC=new E({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/feature_extraction_auto.py#L313",parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}]}}),e3=new X({}),o3=new E({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/processing_auto.py#L70"}}),a3=new E({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/processing_auto.py#L84",parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}]}}),Qh=new $Pr({props:{$$slots:{default:[y3t]},$$scope:{ctx:If}}}),n3=new A({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),s3=new E({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/processing_auto.py#L237",parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}]}}),l3=new X({}),i3=new E({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/modeling_auto.py#L717"}}),c3=new E({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16659/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_16659/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><code>GPTNeoXConfig</code> configuration class: <code>GPTNeoXModel</code> (GPTNeoX model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),f3=new A({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),m3=new E({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),g3=new A({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),h3=new X({}),p3=new E({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/modeling_auto.py#L724"}}),u3=new E({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16659/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),b3=new A({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),F3=new E({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),v3=new A({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),T3=new X({}),M3=new E({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/modeling_auto.py#L739"}}),C3=new E({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16659/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><code>GPTNeoXConfig</code> configuration class: <code>GPTNeoXForCausalLM</code> (GPTNeoX model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),w3=new A({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),A3=new E({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),y3=new A({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),L3=new X({}),x3=new E({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/modeling_auto.py#L746"}}),S3=new E({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16659/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><code>GPTNeoXConfig</code> configuration class: <code>GPTNeoXForMaskedLM</code> (GPTNeoX model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),R3=new A({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),B3=new E({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),P3=new A({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),$3=new X({}),I3=new E({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/modeling_auto.py#L753"}}),N3=new E({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16659/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLMProphetNet model)</li>
</ul>`,name:"config"}]}}),j3=new A({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),D3=new E({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),G3=new A({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),O3=new X({}),V3=new E({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/modeling_auto.py#L762"}}),z3=new E({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16659/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><code>GPTNeoXConfig</code> configuration class: <code>GPTNeoXForSequenceClassification</code> (GPTNeoX model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),Q3=new A({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),W3=new E({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),H3=new A({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),U3=new X({}),J3=new E({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/modeling_auto.py#L796"}}),K3=new E({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16659/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><code>GPTNeoXConfig</code> configuration class: <code>GPTNeoXForMultipleChoice</code> (GPTNeoX model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),Z3=new A({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),ew=new E({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),ow=new A({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),rw=new X({}),tw=new E({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/modeling_auto.py#L803"}}),nw=new E({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16659/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}]}}),sw=new A({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),lw=new E({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),iw=new A({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),dw=new X({}),cw=new E({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/modeling_auto.py#L789"}}),mw=new E({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16659/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><code>GPTNeoXConfig</code> configuration class: <code>GPTNeoXForTokenClassification</code> (GPTNeoX model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),gw=new A({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),hw=new E({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),pw=new A({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),_w=new X({}),uw=new E({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/modeling_auto.py#L771"}}),Fw=new E({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16659/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><code>GPTNeoXConfig</code> configuration class: <code>GPTNeoXForQuestionAnswering</code> (GPTNeoX model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),vw=new A({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),Tw=new E({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Mw=new A({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Ew=new X({}),Cw=new E({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/modeling_auto.py#L778"}}),Aw=new E({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16659/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}]}}),yw=new A({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),Lw=new E({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),xw=new A({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),kw=new X({}),Sw=new E({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/modeling_auto.py#L812"}}),Bw=new E({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16659/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_16659/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_16659/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_16659/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}]}}),Pw=new A({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),$w=new E({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Iw=new A({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),qw=new X({}),Nw=new E({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/modeling_auto.py#L851"}}),Dw=new E({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16659/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}]}}),Gw=new A({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),Ow=new E({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Vw=new A({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Xw=new X({}),zw=new E({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/modeling_auto.py#L858"}}),Ww=new E({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16659/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),Hw=new A({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),Uw=new E({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Jw=new A({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Yw=new X({}),Kw=new E({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/modeling_auto.py#L881"}}),eA=new E({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16659/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),oA=new A({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),rA=new E({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),tA=new A({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),aA=new X({}),nA=new E({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/modeling_auto.py#L865"}}),lA=new E({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16659/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),iA=new A({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),dA=new E({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),cA=new A({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),fA=new X({}),mA=new E({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/modeling_auto.py#L872"}}),hA=new E({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16659/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}]}}),pA=new A({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),_A=new E({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),bA=new A({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),FA=new X({}),vA=new E({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/modeling_auto.py#L890"}}),MA=new E({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16659/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),EA=new A({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),CA=new E({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),wA=new A({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),AA=new X({}),yA=new E({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/modeling_auto.py#L897"}}),xA=new E({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16659/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}]}}),kA=new A({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),SA=new E({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),RA=new A({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),BA=new X({}),PA=new E({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/modeling_auto.py#L844"}}),IA=new E({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16659/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
</ul>`,name:"config"}]}}),qA=new A({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),NA=new E({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),jA=new A({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),DA=new X({}),GA=new E({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/modeling_auto.py#L819"}}),VA=new E({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16659/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}]}}),XA=new A({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),zA=new E({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),QA=new A({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),WA=new X({}),HA=new E({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/modeling_auto.py#L826"}}),JA=new E({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16659/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}]}}),YA=new A({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),KA=new E({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),ZA=new A({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),e0=new X({}),o0=new E({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/modeling_auto.py#L835"}}),t0=new E({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16659/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}]}}),a0=new A({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),n0=new E({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),s0=new A({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),l0=new X({}),i0=new E({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/modeling_tf_auto.py#L381"}}),c0=new E({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16659/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_16659/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),f0=new A({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),m0=new E({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),g0=new A({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),h0=new X({}),p0=new E({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/modeling_tf_auto.py#L388"}}),u0=new E({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16659/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),b0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),F0=new E({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),v0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),T0=new X({}),M0=new E({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/modeling_tf_auto.py#L403"}}),C0=new E({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16659/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),w0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),A0=new E({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),y0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),L0=new X({}),x0=new E({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/modeling_tf_auto.py#L410"}}),S0=new E({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16659/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}]}}),R0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),B0=new E({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),$0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),I0=new X({}),q0=new E({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/modeling_tf_auto.py#L424"}}),j0=new E({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16659/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),D0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),G0=new E({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),O0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),V0=new X({}),X0=new E({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/modeling_tf_auto.py#L431"}}),Q0=new E({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16659/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}]}}),W0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),H0=new E({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),U0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),J0=new X({}),Y0=new E({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/modeling_tf_auto.py#L440"}}),Z0=new E({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16659/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),ey=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),oy=new E({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),ry=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),ty=new X({}),ay=new E({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/modeling_tf_auto.py#L476"}}),sy=new E({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16659/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),ly=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),iy=new E({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),dy=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),cy=new X({}),fy=new E({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/modeling_tf_auto.py#L456"}}),gy=new E({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16659/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}]}}),hy=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),py=new E({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),_y=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),uy=new X({}),by=new E({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/modeling_tf_auto.py#L467"}}),vy=new E({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16659/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),Ty=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),My=new E({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Ey=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Cy=new X({}),wy=new E({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/modeling_tf_auto.py#L449"}}),yy=new E({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16659/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),Ly=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),xy=new E({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),ky=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Sy=new X({}),Ry=new E({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/modeling_tf_auto.py#L417"}}),Py=new E({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16659/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}]}}),$y=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),Iy=new E({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),qy=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Ny=new X({}),jy=new E({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/modeling_tf_auto.py#L492"}}),Gy=new E({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16659/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}]}}),Oy=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),Vy=new E({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Xy=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),zy=new X({}),Qy=new E({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/modeling_flax_auto.py#L237"}}),Hy=new E({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16659/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),Uy=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),Jy=new E({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Yy=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Ky=new X({}),Zy=new E({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/modeling_flax_auto.py#L251"}}),oL=new E({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16659/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}]}}),rL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),tL=new E({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),aL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),nL=new X({}),sL=new E({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/modeling_flax_auto.py#L244"}}),iL=new E({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16659/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),dL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),cL=new E({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),fL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),mL=new X({}),gL=new E({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/modeling_flax_auto.py#L258"}}),pL=new E({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16659/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),_L=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),uL=new E({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),bL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),FL=new X({}),vL=new E({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/modeling_flax_auto.py#L265"}}),ML=new E({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16659/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}]}}),EL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),CL=new E({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),wL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),AL=new X({}),yL=new E({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/modeling_flax_auto.py#L274"}}),xL=new E({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16659/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),kL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),SL=new E({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),RL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),BL=new X({}),PL=new E({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/modeling_flax_auto.py#L283"}}),IL=new E({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16659/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),qL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),NL=new E({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),jL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),DL=new X({}),GL=new E({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/modeling_flax_auto.py#L290"}}),VL=new E({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16659/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),XL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),zL=new E({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),QL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),WL=new X({}),HL=new E({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/modeling_flax_auto.py#L299"}}),JL=new E({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16659/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),YL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),KL=new E({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),ZL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),e8=new X({}),o8=new E({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/modeling_flax_auto.py#L306"}}),t8=new E({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16659/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}]}}),a8=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),n8=new E({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),s8=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),l8=new X({}),i8=new E({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/modeling_flax_auto.py#L315"}}),c8=new E({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16659/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}]}}),f8=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),m8=new E({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),h8=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),p8=new X({}),_8=new E({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/modeling_flax_auto.py#L324"}}),b8=new E({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16659/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}]}}),F8=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),v8=new E({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),T8=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){Z=a("meta"),io=l(),de=a("h1"),Ce=a("a"),lo=a("span"),f(ge.$$.fragment),Me=l(),Xo=a("span"),Ii=o("Auto Classes"),qf=l(),fa=a("p"),qi=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Ni=a("code"),yC=o("from_pretrained()"),Nf=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),xe=l(),co=a("p"),ji=o("Instantiating one of "),Gn=a("a"),LC=o("AutoConfig"),On=o(", "),Vn=a("a"),xC=o("AutoModel"),Di=o(`, and
`),Xn=a("a"),kC=o("AutoTokenizer"),Gi=o(" will directly create a class of the relevant architecture. For instance"),jf=l(),f(Da.$$.fragment),fo=l(),ue=a("p"),F7=o("will create a model that is an instance of "),Oi=a("a"),v7=o("BertModel"),T7=o("."),zo=l(),Ga=a("p"),M7=o("There is one class of "),Df=a("code"),E7=o("AutoModel"),XIe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),SRe=l(),Vi=a("h2"),Gf=a("a"),oY=a("span"),f(SC.$$.fragment),zIe=l(),rY=a("span"),QIe=o("Extending the Auto Classes"),RRe=l(),zn=a("p"),WIe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),tY=a("code"),HIe=o("NewModel"),UIe=o(", make sure you have a "),aY=a("code"),JIe=o("NewModelConfig"),YIe=o(` then you can add those to the auto
classes like this:`),BRe=l(),f(RC.$$.fragment),PRe=l(),C7=a("p"),KIe=o("You will then be able to use the auto classes like you would usually do!"),$Re=l(),f(Of.$$.fragment),IRe=l(),Xi=a("h2"),Vf=a("a"),nY=a("span"),f(BC.$$.fragment),ZIe=l(),sY=a("span"),eqe=o("AutoConfig"),qRe=l(),Qo=a("div"),f(PC.$$.fragment),oqe=l(),$C=a("p"),rqe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),w7=a("a"),tqe=o("from_pretrained()"),aqe=o(" class method."),nqe=l(),IC=a("p"),sqe=o("This class cannot be instantiated directly using "),lY=a("code"),lqe=o("__init__()"),iqe=o(" (throws an error)."),dqe=l(),mo=a("div"),f(qC.$$.fragment),cqe=l(),iY=a("p"),fqe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),mqe=l(),zi=a("p"),gqe=o("The configuration class to instantiate is selected based on the "),dY=a("code"),hqe=o("model_type"),pqe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),cY=a("code"),_qe=o("pretrained_model_name_or_path"),uqe=o(":"),bqe=l(),F=a("ul"),Xf=a("li"),fY=a("strong"),Fqe=o("albert"),vqe=o(" \u2014 "),A7=a("a"),Tqe=o("AlbertConfig"),Mqe=o(" (ALBERT model)"),Eqe=l(),zf=a("li"),mY=a("strong"),Cqe=o("bart"),wqe=o(" \u2014 "),y7=a("a"),Aqe=o("BartConfig"),yqe=o(" (BART model)"),Lqe=l(),Qf=a("li"),gY=a("strong"),xqe=o("beit"),kqe=o(" \u2014 "),L7=a("a"),Sqe=o("BeitConfig"),Rqe=o(" (BEiT model)"),Bqe=l(),Wf=a("li"),hY=a("strong"),Pqe=o("bert"),$qe=o(" \u2014 "),x7=a("a"),Iqe=o("BertConfig"),qqe=o(" (BERT model)"),Nqe=l(),Hf=a("li"),pY=a("strong"),jqe=o("bert-generation"),Dqe=o(" \u2014 "),k7=a("a"),Gqe=o("BertGenerationConfig"),Oqe=o(" (Bert Generation model)"),Vqe=l(),Uf=a("li"),_Y=a("strong"),Xqe=o("big_bird"),zqe=o(" \u2014 "),S7=a("a"),Qqe=o("BigBirdConfig"),Wqe=o(" (BigBird model)"),Hqe=l(),Jf=a("li"),uY=a("strong"),Uqe=o("bigbird_pegasus"),Jqe=o(" \u2014 "),R7=a("a"),Yqe=o("BigBirdPegasusConfig"),Kqe=o(" (BigBirdPegasus model)"),Zqe=l(),Yf=a("li"),bY=a("strong"),eNe=o("blenderbot"),oNe=o(" \u2014 "),B7=a("a"),rNe=o("BlenderbotConfig"),tNe=o(" (Blenderbot model)"),aNe=l(),Kf=a("li"),FY=a("strong"),nNe=o("blenderbot-small"),sNe=o(" \u2014 "),P7=a("a"),lNe=o("BlenderbotSmallConfig"),iNe=o(" (BlenderbotSmall model)"),dNe=l(),Zf=a("li"),vY=a("strong"),cNe=o("camembert"),fNe=o(" \u2014 "),$7=a("a"),mNe=o("CamembertConfig"),gNe=o(" (CamemBERT model)"),hNe=l(),em=a("li"),TY=a("strong"),pNe=o("canine"),_Ne=o(" \u2014 "),I7=a("a"),uNe=o("CanineConfig"),bNe=o(" (Canine model)"),FNe=l(),om=a("li"),MY=a("strong"),vNe=o("clip"),TNe=o(" \u2014 "),q7=a("a"),MNe=o("CLIPConfig"),ENe=o(" (CLIP model)"),CNe=l(),rm=a("li"),EY=a("strong"),wNe=o("convbert"),ANe=o(" \u2014 "),N7=a("a"),yNe=o("ConvBertConfig"),LNe=o(" (ConvBERT model)"),xNe=l(),tm=a("li"),CY=a("strong"),kNe=o("convnext"),SNe=o(" \u2014 "),j7=a("a"),RNe=o("ConvNextConfig"),BNe=o(" (ConvNext model)"),PNe=l(),am=a("li"),wY=a("strong"),$Ne=o("ctrl"),INe=o(" \u2014 "),D7=a("a"),qNe=o("CTRLConfig"),NNe=o(" (CTRL model)"),jNe=l(),nm=a("li"),AY=a("strong"),DNe=o("data2vec-audio"),GNe=o(" \u2014 "),G7=a("a"),ONe=o("Data2VecAudioConfig"),VNe=o(" (Data2VecAudio model)"),XNe=l(),sm=a("li"),yY=a("strong"),zNe=o("data2vec-text"),QNe=o(" \u2014 "),O7=a("a"),WNe=o("Data2VecTextConfig"),HNe=o(" (Data2VecText model)"),UNe=l(),lm=a("li"),LY=a("strong"),JNe=o("deberta"),YNe=o(" \u2014 "),V7=a("a"),KNe=o("DebertaConfig"),ZNe=o(" (DeBERTa model)"),eje=l(),im=a("li"),xY=a("strong"),oje=o("deberta-v2"),rje=o(" \u2014 "),X7=a("a"),tje=o("DebertaV2Config"),aje=o(" (DeBERTa-v2 model)"),nje=l(),dm=a("li"),kY=a("strong"),sje=o("decision_transformer"),lje=o(" \u2014 "),z7=a("a"),ije=o("DecisionTransformerConfig"),dje=o(" (Decision Transformer model)"),cje=l(),cm=a("li"),SY=a("strong"),fje=o("deit"),mje=o(" \u2014 "),Q7=a("a"),gje=o("DeiTConfig"),hje=o(" (DeiT model)"),pje=l(),fm=a("li"),RY=a("strong"),_je=o("detr"),uje=o(" \u2014 "),W7=a("a"),bje=o("DetrConfig"),Fje=o(" (DETR model)"),vje=l(),mm=a("li"),BY=a("strong"),Tje=o("distilbert"),Mje=o(" \u2014 "),H7=a("a"),Eje=o("DistilBertConfig"),Cje=o(" (DistilBERT model)"),wje=l(),gm=a("li"),PY=a("strong"),Aje=o("dpr"),yje=o(" \u2014 "),U7=a("a"),Lje=o("DPRConfig"),xje=o(" (DPR model)"),kje=l(),hm=a("li"),$Y=a("strong"),Sje=o("dpt"),Rje=o(" \u2014 "),J7=a("a"),Bje=o("DPTConfig"),Pje=o(" (DPT model)"),$je=l(),pm=a("li"),IY=a("strong"),Ije=o("electra"),qje=o(" \u2014 "),Y7=a("a"),Nje=o("ElectraConfig"),jje=o(" (ELECTRA model)"),Dje=l(),_m=a("li"),qY=a("strong"),Gje=o("encoder-decoder"),Oje=o(" \u2014 "),K7=a("a"),Vje=o("EncoderDecoderConfig"),Xje=o(" (Encoder decoder model)"),zje=l(),um=a("li"),NY=a("strong"),Qje=o("flaubert"),Wje=o(" \u2014 "),Z7=a("a"),Hje=o("FlaubertConfig"),Uje=o(" (FlauBERT model)"),Jje=l(),bm=a("li"),jY=a("strong"),Yje=o("fnet"),Kje=o(" \u2014 "),ex=a("a"),Zje=o("FNetConfig"),eDe=o(" (FNet model)"),oDe=l(),Fm=a("li"),DY=a("strong"),rDe=o("fsmt"),tDe=o(" \u2014 "),ox=a("a"),aDe=o("FSMTConfig"),nDe=o(" (FairSeq Machine-Translation model)"),sDe=l(),vm=a("li"),GY=a("strong"),lDe=o("funnel"),iDe=o(" \u2014 "),rx=a("a"),dDe=o("FunnelConfig"),cDe=o(" (Funnel Transformer model)"),fDe=l(),Tm=a("li"),OY=a("strong"),mDe=o("glpn"),gDe=o(" \u2014 "),tx=a("a"),hDe=o("GLPNConfig"),pDe=o(" (GLPN model)"),_De=l(),Mm=a("li"),VY=a("strong"),uDe=o("gpt2"),bDe=o(" \u2014 "),ax=a("a"),FDe=o("GPT2Config"),vDe=o(" (OpenAI GPT-2 model)"),TDe=l(),Em=a("li"),XY=a("strong"),MDe=o("gpt_neo"),EDe=o(" \u2014 "),nx=a("a"),CDe=o("GPTNeoConfig"),wDe=o(" (GPT Neo model)"),ADe=l(),Cm=a("li"),zY=a("strong"),yDe=o("gpt_neox"),LDe=o(" \u2014 "),QY=a("code"),xDe=o("GPTNeoXConfig"),kDe=o(" (GPTNeoX model)"),SDe=l(),wm=a("li"),WY=a("strong"),RDe=o("gptj"),BDe=o(" \u2014 "),sx=a("a"),PDe=o("GPTJConfig"),$De=o(" (GPT-J model)"),IDe=l(),Am=a("li"),HY=a("strong"),qDe=o("hubert"),NDe=o(" \u2014 "),lx=a("a"),jDe=o("HubertConfig"),DDe=o(" (Hubert model)"),GDe=l(),ym=a("li"),UY=a("strong"),ODe=o("ibert"),VDe=o(" \u2014 "),ix=a("a"),XDe=o("IBertConfig"),zDe=o(" (I-BERT model)"),QDe=l(),Lm=a("li"),JY=a("strong"),WDe=o("imagegpt"),HDe=o(" \u2014 "),dx=a("a"),UDe=o("ImageGPTConfig"),JDe=o(" (ImageGPT model)"),YDe=l(),xm=a("li"),YY=a("strong"),KDe=o("layoutlm"),ZDe=o(" \u2014 "),cx=a("a"),eGe=o("LayoutLMConfig"),oGe=o(" (LayoutLM model)"),rGe=l(),km=a("li"),KY=a("strong"),tGe=o("layoutlmv2"),aGe=o(" \u2014 "),fx=a("a"),nGe=o("LayoutLMv2Config"),sGe=o(" (LayoutLMv2 model)"),lGe=l(),Sm=a("li"),ZY=a("strong"),iGe=o("led"),dGe=o(" \u2014 "),mx=a("a"),cGe=o("LEDConfig"),fGe=o(" (LED model)"),mGe=l(),Rm=a("li"),eK=a("strong"),gGe=o("longformer"),hGe=o(" \u2014 "),gx=a("a"),pGe=o("LongformerConfig"),_Ge=o(" (Longformer model)"),uGe=l(),Bm=a("li"),oK=a("strong"),bGe=o("luke"),FGe=o(" \u2014 "),hx=a("a"),vGe=o("LukeConfig"),TGe=o(" (LUKE model)"),MGe=l(),Pm=a("li"),rK=a("strong"),EGe=o("lxmert"),CGe=o(" \u2014 "),px=a("a"),wGe=o("LxmertConfig"),AGe=o(" (LXMERT model)"),yGe=l(),$m=a("li"),tK=a("strong"),LGe=o("m2m_100"),xGe=o(" \u2014 "),_x=a("a"),kGe=o("M2M100Config"),SGe=o(" (M2M100 model)"),RGe=l(),Im=a("li"),aK=a("strong"),BGe=o("marian"),PGe=o(" \u2014 "),ux=a("a"),$Ge=o("MarianConfig"),IGe=o(" (Marian model)"),qGe=l(),qm=a("li"),nK=a("strong"),NGe=o("maskformer"),jGe=o(" \u2014 "),bx=a("a"),DGe=o("MaskFormerConfig"),GGe=o(" (MaskFormer model)"),OGe=l(),Nm=a("li"),sK=a("strong"),VGe=o("mbart"),XGe=o(" \u2014 "),Fx=a("a"),zGe=o("MBartConfig"),QGe=o(" (mBART model)"),WGe=l(),jm=a("li"),lK=a("strong"),HGe=o("megatron-bert"),UGe=o(" \u2014 "),vx=a("a"),JGe=o("MegatronBertConfig"),YGe=o(" (MegatronBert model)"),KGe=l(),Dm=a("li"),iK=a("strong"),ZGe=o("mobilebert"),eOe=o(" \u2014 "),Tx=a("a"),oOe=o("MobileBertConfig"),rOe=o(" (MobileBERT model)"),tOe=l(),Gm=a("li"),dK=a("strong"),aOe=o("mpnet"),nOe=o(" \u2014 "),Mx=a("a"),sOe=o("MPNetConfig"),lOe=o(" (MPNet model)"),iOe=l(),Om=a("li"),cK=a("strong"),dOe=o("mt5"),cOe=o(" \u2014 "),Ex=a("a"),fOe=o("MT5Config"),mOe=o(" (mT5 model)"),gOe=l(),Vm=a("li"),fK=a("strong"),hOe=o("nystromformer"),pOe=o(" \u2014 "),Cx=a("a"),_Oe=o("NystromformerConfig"),uOe=o(" (Nystromformer model)"),bOe=l(),Xm=a("li"),mK=a("strong"),FOe=o("openai-gpt"),vOe=o(" \u2014 "),wx=a("a"),TOe=o("OpenAIGPTConfig"),MOe=o(" (OpenAI GPT model)"),EOe=l(),zm=a("li"),gK=a("strong"),COe=o("pegasus"),wOe=o(" \u2014 "),Ax=a("a"),AOe=o("PegasusConfig"),yOe=o(" (Pegasus model)"),LOe=l(),Qm=a("li"),hK=a("strong"),xOe=o("perceiver"),kOe=o(" \u2014 "),yx=a("a"),SOe=o("PerceiverConfig"),ROe=o(" (Perceiver model)"),BOe=l(),Wm=a("li"),pK=a("strong"),POe=o("plbart"),$Oe=o(" \u2014 "),Lx=a("a"),IOe=o("PLBartConfig"),qOe=o(" (PLBart model)"),NOe=l(),Hm=a("li"),_K=a("strong"),jOe=o("poolformer"),DOe=o(" \u2014 "),xx=a("a"),GOe=o("PoolFormerConfig"),OOe=o(" (PoolFormer model)"),VOe=l(),Um=a("li"),uK=a("strong"),XOe=o("prophetnet"),zOe=o(" \u2014 "),kx=a("a"),QOe=o("ProphetNetConfig"),WOe=o(" (ProphetNet model)"),HOe=l(),Jm=a("li"),bK=a("strong"),UOe=o("qdqbert"),JOe=o(" \u2014 "),Sx=a("a"),YOe=o("QDQBertConfig"),KOe=o(" (QDQBert model)"),ZOe=l(),Ym=a("li"),FK=a("strong"),eVe=o("rag"),oVe=o(" \u2014 "),Rx=a("a"),rVe=o("RagConfig"),tVe=o(" (RAG model)"),aVe=l(),Km=a("li"),vK=a("strong"),nVe=o("realm"),sVe=o(" \u2014 "),Bx=a("a"),lVe=o("RealmConfig"),iVe=o(" (Realm model)"),dVe=l(),Zm=a("li"),TK=a("strong"),cVe=o("reformer"),fVe=o(" \u2014 "),Px=a("a"),mVe=o("ReformerConfig"),gVe=o(" (Reformer model)"),hVe=l(),eg=a("li"),MK=a("strong"),pVe=o("regnet"),_Ve=o(" \u2014 "),$x=a("a"),uVe=o("RegNetConfig"),bVe=o(" (RegNet model)"),FVe=l(),og=a("li"),EK=a("strong"),vVe=o("rembert"),TVe=o(" \u2014 "),Ix=a("a"),MVe=o("RemBertConfig"),EVe=o(" (RemBERT model)"),CVe=l(),rg=a("li"),CK=a("strong"),wVe=o("resnet"),AVe=o(" \u2014 "),qx=a("a"),yVe=o("ResNetConfig"),LVe=o(" (ResNet model)"),xVe=l(),tg=a("li"),wK=a("strong"),kVe=o("retribert"),SVe=o(" \u2014 "),Nx=a("a"),RVe=o("RetriBertConfig"),BVe=o(" (RetriBERT model)"),PVe=l(),ag=a("li"),AK=a("strong"),$Ve=o("roberta"),IVe=o(" \u2014 "),jx=a("a"),qVe=o("RobertaConfig"),NVe=o(" (RoBERTa model)"),jVe=l(),ng=a("li"),yK=a("strong"),DVe=o("roformer"),GVe=o(" \u2014 "),Dx=a("a"),OVe=o("RoFormerConfig"),VVe=o(" (RoFormer model)"),XVe=l(),sg=a("li"),LK=a("strong"),zVe=o("segformer"),QVe=o(" \u2014 "),Gx=a("a"),WVe=o("SegformerConfig"),HVe=o(" (SegFormer model)"),UVe=l(),lg=a("li"),xK=a("strong"),JVe=o("sew"),YVe=o(" \u2014 "),Ox=a("a"),KVe=o("SEWConfig"),ZVe=o(" (SEW model)"),eXe=l(),ig=a("li"),kK=a("strong"),oXe=o("sew-d"),rXe=o(" \u2014 "),Vx=a("a"),tXe=o("SEWDConfig"),aXe=o(" (SEW-D model)"),nXe=l(),dg=a("li"),SK=a("strong"),sXe=o("speech-encoder-decoder"),lXe=o(" \u2014 "),Xx=a("a"),iXe=o("SpeechEncoderDecoderConfig"),dXe=o(" (Speech Encoder decoder model)"),cXe=l(),cg=a("li"),RK=a("strong"),fXe=o("speech_to_text"),mXe=o(" \u2014 "),zx=a("a"),gXe=o("Speech2TextConfig"),hXe=o(" (Speech2Text model)"),pXe=l(),fg=a("li"),BK=a("strong"),_Xe=o("speech_to_text_2"),uXe=o(" \u2014 "),Qx=a("a"),bXe=o("Speech2Text2Config"),FXe=o(" (Speech2Text2 model)"),vXe=l(),mg=a("li"),PK=a("strong"),TXe=o("splinter"),MXe=o(" \u2014 "),Wx=a("a"),EXe=o("SplinterConfig"),CXe=o(" (Splinter model)"),wXe=l(),gg=a("li"),$K=a("strong"),AXe=o("squeezebert"),yXe=o(" \u2014 "),Hx=a("a"),LXe=o("SqueezeBertConfig"),xXe=o(" (SqueezeBERT model)"),kXe=l(),hg=a("li"),IK=a("strong"),SXe=o("swin"),RXe=o(" \u2014 "),Ux=a("a"),BXe=o("SwinConfig"),PXe=o(" (Swin model)"),$Xe=l(),pg=a("li"),qK=a("strong"),IXe=o("t5"),qXe=o(" \u2014 "),Jx=a("a"),NXe=o("T5Config"),jXe=o(" (T5 model)"),DXe=l(),_g=a("li"),NK=a("strong"),GXe=o("tapas"),OXe=o(" \u2014 "),Yx=a("a"),VXe=o("TapasConfig"),XXe=o(" (TAPAS model)"),zXe=l(),ug=a("li"),jK=a("strong"),QXe=o("transfo-xl"),WXe=o(" \u2014 "),Kx=a("a"),HXe=o("TransfoXLConfig"),UXe=o(" (Transformer-XL model)"),JXe=l(),bg=a("li"),DK=a("strong"),YXe=o("trocr"),KXe=o(" \u2014 "),Zx=a("a"),ZXe=o("TrOCRConfig"),eze=o(" (TrOCR model)"),oze=l(),Fg=a("li"),GK=a("strong"),rze=o("unispeech"),tze=o(" \u2014 "),ek=a("a"),aze=o("UniSpeechConfig"),nze=o(" (UniSpeech model)"),sze=l(),vg=a("li"),OK=a("strong"),lze=o("unispeech-sat"),ize=o(" \u2014 "),ok=a("a"),dze=o("UniSpeechSatConfig"),cze=o(" (UniSpeechSat model)"),fze=l(),Tg=a("li"),VK=a("strong"),mze=o("van"),gze=o(" \u2014 "),rk=a("a"),hze=o("VanConfig"),pze=o(" (VAN model)"),_ze=l(),Mg=a("li"),XK=a("strong"),uze=o("vilt"),bze=o(" \u2014 "),tk=a("a"),Fze=o("ViltConfig"),vze=o(" (ViLT model)"),Tze=l(),Eg=a("li"),zK=a("strong"),Mze=o("vision-encoder-decoder"),Eze=o(" \u2014 "),ak=a("a"),Cze=o("VisionEncoderDecoderConfig"),wze=o(" (Vision Encoder decoder model)"),Aze=l(),Cg=a("li"),QK=a("strong"),yze=o("vision-text-dual-encoder"),Lze=o(" \u2014 "),nk=a("a"),xze=o("VisionTextDualEncoderConfig"),kze=o(" (VisionTextDualEncoder model)"),Sze=l(),wg=a("li"),WK=a("strong"),Rze=o("visual_bert"),Bze=o(" \u2014 "),sk=a("a"),Pze=o("VisualBertConfig"),$ze=o(" (VisualBert model)"),Ize=l(),Ag=a("li"),HK=a("strong"),qze=o("vit"),Nze=o(" \u2014 "),lk=a("a"),jze=o("ViTConfig"),Dze=o(" (ViT model)"),Gze=l(),yg=a("li"),UK=a("strong"),Oze=o("vit_mae"),Vze=o(" \u2014 "),ik=a("a"),Xze=o("ViTMAEConfig"),zze=o(" (ViTMAE model)"),Qze=l(),Lg=a("li"),JK=a("strong"),Wze=o("wav2vec2"),Hze=o(" \u2014 "),dk=a("a"),Uze=o("Wav2Vec2Config"),Jze=o(" (Wav2Vec2 model)"),Yze=l(),xg=a("li"),YK=a("strong"),Kze=o("wavlm"),Zze=o(" \u2014 "),ck=a("a"),eQe=o("WavLMConfig"),oQe=o(" (WavLM model)"),rQe=l(),kg=a("li"),KK=a("strong"),tQe=o("xglm"),aQe=o(" \u2014 "),fk=a("a"),nQe=o("XGLMConfig"),sQe=o(" (XGLM model)"),lQe=l(),Sg=a("li"),ZK=a("strong"),iQe=o("xlm"),dQe=o(" \u2014 "),mk=a("a"),cQe=o("XLMConfig"),fQe=o(" (XLM model)"),mQe=l(),Rg=a("li"),eZ=a("strong"),gQe=o("xlm-prophetnet"),hQe=o(" \u2014 "),gk=a("a"),pQe=o("XLMProphetNetConfig"),_Qe=o(" (XLMProphetNet model)"),uQe=l(),Bg=a("li"),oZ=a("strong"),bQe=o("xlm-roberta"),FQe=o(" \u2014 "),hk=a("a"),vQe=o("XLMRobertaConfig"),TQe=o(" (XLM-RoBERTa model)"),MQe=l(),Pg=a("li"),rZ=a("strong"),EQe=o("xlm-roberta-xl"),CQe=o(" \u2014 "),pk=a("a"),wQe=o("XLMRobertaXLConfig"),AQe=o(" (XLM-RoBERTa-XL model)"),yQe=l(),$g=a("li"),tZ=a("strong"),LQe=o("xlnet"),xQe=o(" \u2014 "),_k=a("a"),kQe=o("XLNetConfig"),SQe=o(" (XLNet model)"),RQe=l(),Ig=a("li"),aZ=a("strong"),BQe=o("yoso"),PQe=o(" \u2014 "),uk=a("a"),$Qe=o("YosoConfig"),IQe=o(" (YOSO model)"),qQe=l(),nZ=a("p"),NQe=o("Examples:"),jQe=l(),f(NC.$$.fragment),DQe=l(),qg=a("div"),f(jC.$$.fragment),GQe=l(),sZ=a("p"),OQe=o("Register a new configuration for this class."),NRe=l(),Qi=a("h2"),Ng=a("a"),lZ=a("span"),f(DC.$$.fragment),VQe=l(),iZ=a("span"),XQe=o("AutoTokenizer"),jRe=l(),Wo=a("div"),f(GC.$$.fragment),zQe=l(),OC=a("p"),QQe=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),bk=a("a"),WQe=o("AutoTokenizer.from_pretrained()"),HQe=o(" class method."),UQe=l(),VC=a("p"),JQe=o("This class cannot be instantiated directly using "),dZ=a("code"),YQe=o("__init__()"),KQe=o(" (throws an error)."),ZQe=l(),go=a("div"),f(XC.$$.fragment),eWe=l(),cZ=a("p"),oWe=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),rWe=l(),Oa=a("p"),tWe=o("The tokenizer class to instantiate is selected based on the "),fZ=a("code"),aWe=o("model_type"),nWe=o(` property of the config object (either
passed as an argument or loaded from `),mZ=a("code"),sWe=o("pretrained_model_name_or_path"),lWe=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gZ=a("code"),iWe=o("pretrained_model_name_or_path"),dWe=o(":"),cWe=l(),C=a("ul"),Qn=a("li"),hZ=a("strong"),fWe=o("albert"),mWe=o(" \u2014 "),Fk=a("a"),gWe=o("AlbertTokenizer"),hWe=o(" or "),vk=a("a"),pWe=o("AlbertTokenizerFast"),_We=o(" (ALBERT model)"),uWe=l(),Wn=a("li"),pZ=a("strong"),bWe=o("bart"),FWe=o(" \u2014 "),Tk=a("a"),vWe=o("BartTokenizer"),TWe=o(" or "),Mk=a("a"),MWe=o("BartTokenizerFast"),EWe=o(" (BART model)"),CWe=l(),Hn=a("li"),_Z=a("strong"),wWe=o("barthez"),AWe=o(" \u2014 "),Ek=a("a"),yWe=o("BarthezTokenizer"),LWe=o(" or "),Ck=a("a"),xWe=o("BarthezTokenizerFast"),kWe=o(" (BARThez model)"),SWe=l(),jg=a("li"),uZ=a("strong"),RWe=o("bartpho"),BWe=o(" \u2014 "),wk=a("a"),PWe=o("BartphoTokenizer"),$We=o(" (BARTpho model)"),IWe=l(),Un=a("li"),bZ=a("strong"),qWe=o("bert"),NWe=o(" \u2014 "),Ak=a("a"),jWe=o("BertTokenizer"),DWe=o(" or "),yk=a("a"),GWe=o("BertTokenizerFast"),OWe=o(" (BERT model)"),VWe=l(),Dg=a("li"),FZ=a("strong"),XWe=o("bert-generation"),zWe=o(" \u2014 "),Lk=a("a"),QWe=o("BertGenerationTokenizer"),WWe=o(" (Bert Generation model)"),HWe=l(),Gg=a("li"),vZ=a("strong"),UWe=o("bert-japanese"),JWe=o(" \u2014 "),xk=a("a"),YWe=o("BertJapaneseTokenizer"),KWe=o(" (BertJapanese model)"),ZWe=l(),Og=a("li"),TZ=a("strong"),eHe=o("bertweet"),oHe=o(" \u2014 "),kk=a("a"),rHe=o("BertweetTokenizer"),tHe=o(" (Bertweet model)"),aHe=l(),Jn=a("li"),MZ=a("strong"),nHe=o("big_bird"),sHe=o(" \u2014 "),Sk=a("a"),lHe=o("BigBirdTokenizer"),iHe=o(" or "),Rk=a("a"),dHe=o("BigBirdTokenizerFast"),cHe=o(" (BigBird model)"),fHe=l(),Yn=a("li"),EZ=a("strong"),mHe=o("bigbird_pegasus"),gHe=o(" \u2014 "),Bk=a("a"),hHe=o("PegasusTokenizer"),pHe=o(" or "),Pk=a("a"),_He=o("PegasusTokenizerFast"),uHe=o(" (BigBirdPegasus model)"),bHe=l(),Kn=a("li"),CZ=a("strong"),FHe=o("blenderbot"),vHe=o(" \u2014 "),$k=a("a"),THe=o("BlenderbotTokenizer"),MHe=o(" or "),Ik=a("a"),EHe=o("BlenderbotTokenizerFast"),CHe=o(" (Blenderbot model)"),wHe=l(),Vg=a("li"),wZ=a("strong"),AHe=o("blenderbot-small"),yHe=o(" \u2014 "),qk=a("a"),LHe=o("BlenderbotSmallTokenizer"),xHe=o(" (BlenderbotSmall model)"),kHe=l(),Xg=a("li"),AZ=a("strong"),SHe=o("byt5"),RHe=o(" \u2014 "),Nk=a("a"),BHe=o("ByT5Tokenizer"),PHe=o(" (ByT5 model)"),$He=l(),Zn=a("li"),yZ=a("strong"),IHe=o("camembert"),qHe=o(" \u2014 "),jk=a("a"),NHe=o("CamembertTokenizer"),jHe=o(" or "),Dk=a("a"),DHe=o("CamembertTokenizerFast"),GHe=o(" (CamemBERT model)"),OHe=l(),zg=a("li"),LZ=a("strong"),VHe=o("canine"),XHe=o(" \u2014 "),Gk=a("a"),zHe=o("CanineTokenizer"),QHe=o(" (Canine model)"),WHe=l(),es=a("li"),xZ=a("strong"),HHe=o("clip"),UHe=o(" \u2014 "),Ok=a("a"),JHe=o("CLIPTokenizer"),YHe=o(" or "),Vk=a("a"),KHe=o("CLIPTokenizerFast"),ZHe=o(" (CLIP model)"),eUe=l(),os=a("li"),kZ=a("strong"),oUe=o("convbert"),rUe=o(" \u2014 "),Xk=a("a"),tUe=o("ConvBertTokenizer"),aUe=o(" or "),zk=a("a"),nUe=o("ConvBertTokenizerFast"),sUe=o(" (ConvBERT model)"),lUe=l(),rs=a("li"),SZ=a("strong"),iUe=o("cpm"),dUe=o(" \u2014 "),Qk=a("a"),cUe=o("CpmTokenizer"),fUe=o(" or "),RZ=a("code"),mUe=o("CpmTokenizerFast"),gUe=o(" (CPM model)"),hUe=l(),Qg=a("li"),BZ=a("strong"),pUe=o("ctrl"),_Ue=o(" \u2014 "),Wk=a("a"),uUe=o("CTRLTokenizer"),bUe=o(" (CTRL model)"),FUe=l(),ts=a("li"),PZ=a("strong"),vUe=o("deberta"),TUe=o(" \u2014 "),Hk=a("a"),MUe=o("DebertaTokenizer"),EUe=o(" or "),Uk=a("a"),CUe=o("DebertaTokenizerFast"),wUe=o(" (DeBERTa model)"),AUe=l(),Wg=a("li"),$Z=a("strong"),yUe=o("deberta-v2"),LUe=o(" \u2014 "),Jk=a("a"),xUe=o("DebertaV2Tokenizer"),kUe=o(" (DeBERTa-v2 model)"),SUe=l(),as=a("li"),IZ=a("strong"),RUe=o("distilbert"),BUe=o(" \u2014 "),Yk=a("a"),PUe=o("DistilBertTokenizer"),$Ue=o(" or "),Kk=a("a"),IUe=o("DistilBertTokenizerFast"),qUe=o(" (DistilBERT model)"),NUe=l(),ns=a("li"),qZ=a("strong"),jUe=o("dpr"),DUe=o(" \u2014 "),Zk=a("a"),GUe=o("DPRQuestionEncoderTokenizer"),OUe=o(" or "),eS=a("a"),VUe=o("DPRQuestionEncoderTokenizerFast"),XUe=o(" (DPR model)"),zUe=l(),ss=a("li"),NZ=a("strong"),QUe=o("electra"),WUe=o(" \u2014 "),oS=a("a"),HUe=o("ElectraTokenizer"),UUe=o(" or "),rS=a("a"),JUe=o("ElectraTokenizerFast"),YUe=o(" (ELECTRA model)"),KUe=l(),Hg=a("li"),jZ=a("strong"),ZUe=o("flaubert"),eJe=o(" \u2014 "),tS=a("a"),oJe=o("FlaubertTokenizer"),rJe=o(" (FlauBERT model)"),tJe=l(),ls=a("li"),DZ=a("strong"),aJe=o("fnet"),nJe=o(" \u2014 "),aS=a("a"),sJe=o("FNetTokenizer"),lJe=o(" or "),nS=a("a"),iJe=o("FNetTokenizerFast"),dJe=o(" (FNet model)"),cJe=l(),Ug=a("li"),GZ=a("strong"),fJe=o("fsmt"),mJe=o(" \u2014 "),sS=a("a"),gJe=o("FSMTTokenizer"),hJe=o(" (FairSeq Machine-Translation model)"),pJe=l(),is=a("li"),OZ=a("strong"),_Je=o("funnel"),uJe=o(" \u2014 "),lS=a("a"),bJe=o("FunnelTokenizer"),FJe=o(" or "),iS=a("a"),vJe=o("FunnelTokenizerFast"),TJe=o(" (Funnel Transformer model)"),MJe=l(),ds=a("li"),VZ=a("strong"),EJe=o("gpt2"),CJe=o(" \u2014 "),dS=a("a"),wJe=o("GPT2Tokenizer"),AJe=o(" or "),cS=a("a"),yJe=o("GPT2TokenizerFast"),LJe=o(" (OpenAI GPT-2 model)"),xJe=l(),cs=a("li"),XZ=a("strong"),kJe=o("gpt_neo"),SJe=o(" \u2014 "),fS=a("a"),RJe=o("GPT2Tokenizer"),BJe=o(" or "),mS=a("a"),PJe=o("GPT2TokenizerFast"),$Je=o(" (GPT Neo model)"),IJe=l(),fs=a("li"),zZ=a("strong"),qJe=o("herbert"),NJe=o(" \u2014 "),gS=a("a"),jJe=o("HerbertTokenizer"),DJe=o(" or "),hS=a("a"),GJe=o("HerbertTokenizerFast"),OJe=o(" (HerBERT model)"),VJe=l(),Jg=a("li"),QZ=a("strong"),XJe=o("hubert"),zJe=o(" \u2014 "),pS=a("a"),QJe=o("Wav2Vec2CTCTokenizer"),WJe=o(" (Hubert model)"),HJe=l(),ms=a("li"),WZ=a("strong"),UJe=o("ibert"),JJe=o(" \u2014 "),_S=a("a"),YJe=o("RobertaTokenizer"),KJe=o(" or "),uS=a("a"),ZJe=o("RobertaTokenizerFast"),eYe=o(" (I-BERT model)"),oYe=l(),gs=a("li"),HZ=a("strong"),rYe=o("layoutlm"),tYe=o(" \u2014 "),bS=a("a"),aYe=o("LayoutLMTokenizer"),nYe=o(" or "),FS=a("a"),sYe=o("LayoutLMTokenizerFast"),lYe=o(" (LayoutLM model)"),iYe=l(),hs=a("li"),UZ=a("strong"),dYe=o("layoutlmv2"),cYe=o(" \u2014 "),vS=a("a"),fYe=o("LayoutLMv2Tokenizer"),mYe=o(" or "),TS=a("a"),gYe=o("LayoutLMv2TokenizerFast"),hYe=o(" (LayoutLMv2 model)"),pYe=l(),ps=a("li"),JZ=a("strong"),_Ye=o("layoutxlm"),uYe=o(" \u2014 "),MS=a("a"),bYe=o("LayoutXLMTokenizer"),FYe=o(" or "),ES=a("a"),vYe=o("LayoutXLMTokenizerFast"),TYe=o(" (LayoutXLM model)"),MYe=l(),_s=a("li"),YZ=a("strong"),EYe=o("led"),CYe=o(" \u2014 "),CS=a("a"),wYe=o("LEDTokenizer"),AYe=o(" or "),wS=a("a"),yYe=o("LEDTokenizerFast"),LYe=o(" (LED model)"),xYe=l(),us=a("li"),KZ=a("strong"),kYe=o("longformer"),SYe=o(" \u2014 "),AS=a("a"),RYe=o("LongformerTokenizer"),BYe=o(" or "),yS=a("a"),PYe=o("LongformerTokenizerFast"),$Ye=o(" (Longformer model)"),IYe=l(),Yg=a("li"),ZZ=a("strong"),qYe=o("luke"),NYe=o(" \u2014 "),LS=a("a"),jYe=o("LukeTokenizer"),DYe=o(" (LUKE model)"),GYe=l(),bs=a("li"),eee=a("strong"),OYe=o("lxmert"),VYe=o(" \u2014 "),xS=a("a"),XYe=o("LxmertTokenizer"),zYe=o(" or "),kS=a("a"),QYe=o("LxmertTokenizerFast"),WYe=o(" (LXMERT model)"),HYe=l(),Kg=a("li"),oee=a("strong"),UYe=o("m2m_100"),JYe=o(" \u2014 "),SS=a("a"),YYe=o("M2M100Tokenizer"),KYe=o(" (M2M100 model)"),ZYe=l(),Zg=a("li"),ree=a("strong"),eKe=o("marian"),oKe=o(" \u2014 "),RS=a("a"),rKe=o("MarianTokenizer"),tKe=o(" (Marian model)"),aKe=l(),Fs=a("li"),tee=a("strong"),nKe=o("mbart"),sKe=o(" \u2014 "),BS=a("a"),lKe=o("MBartTokenizer"),iKe=o(" or "),PS=a("a"),dKe=o("MBartTokenizerFast"),cKe=o(" (mBART model)"),fKe=l(),vs=a("li"),aee=a("strong"),mKe=o("mbart50"),gKe=o(" \u2014 "),$S=a("a"),hKe=o("MBart50Tokenizer"),pKe=o(" or "),IS=a("a"),_Ke=o("MBart50TokenizerFast"),uKe=o(" (mBART-50 model)"),bKe=l(),eh=a("li"),nee=a("strong"),FKe=o("mluke"),vKe=o(" \u2014 "),qS=a("a"),TKe=o("MLukeTokenizer"),MKe=o(" (mLUKE model)"),EKe=l(),Ts=a("li"),see=a("strong"),CKe=o("mobilebert"),wKe=o(" \u2014 "),NS=a("a"),AKe=o("MobileBertTokenizer"),yKe=o(" or "),jS=a("a"),LKe=o("MobileBertTokenizerFast"),xKe=o(" (MobileBERT model)"),kKe=l(),Ms=a("li"),lee=a("strong"),SKe=o("mpnet"),RKe=o(" \u2014 "),DS=a("a"),BKe=o("MPNetTokenizer"),PKe=o(" or "),GS=a("a"),$Ke=o("MPNetTokenizerFast"),IKe=o(" (MPNet model)"),qKe=l(),Es=a("li"),iee=a("strong"),NKe=o("mt5"),jKe=o(" \u2014 "),OS=a("a"),DKe=o("MT5Tokenizer"),GKe=o(" or "),VS=a("a"),OKe=o("MT5TokenizerFast"),VKe=o(" (mT5 model)"),XKe=l(),Cs=a("li"),dee=a("strong"),zKe=o("openai-gpt"),QKe=o(" \u2014 "),XS=a("a"),WKe=o("OpenAIGPTTokenizer"),HKe=o(" or "),zS=a("a"),UKe=o("OpenAIGPTTokenizerFast"),JKe=o(" (OpenAI GPT model)"),YKe=l(),ws=a("li"),cee=a("strong"),KKe=o("pegasus"),ZKe=o(" \u2014 "),QS=a("a"),eZe=o("PegasusTokenizer"),oZe=o(" or "),WS=a("a"),rZe=o("PegasusTokenizerFast"),tZe=o(" (Pegasus model)"),aZe=l(),oh=a("li"),fee=a("strong"),nZe=o("perceiver"),sZe=o(" \u2014 "),HS=a("a"),lZe=o("PerceiverTokenizer"),iZe=o(" (Perceiver model)"),dZe=l(),rh=a("li"),mee=a("strong"),cZe=o("phobert"),fZe=o(" \u2014 "),US=a("a"),mZe=o("PhobertTokenizer"),gZe=o(" (PhoBERT model)"),hZe=l(),th=a("li"),gee=a("strong"),pZe=o("plbart"),_Ze=o(" \u2014 "),JS=a("a"),uZe=o("PLBartTokenizer"),bZe=o(" (PLBart model)"),FZe=l(),ah=a("li"),hee=a("strong"),vZe=o("prophetnet"),TZe=o(" \u2014 "),YS=a("a"),MZe=o("ProphetNetTokenizer"),EZe=o(" (ProphetNet model)"),CZe=l(),As=a("li"),pee=a("strong"),wZe=o("qdqbert"),AZe=o(" \u2014 "),KS=a("a"),yZe=o("BertTokenizer"),LZe=o(" or "),ZS=a("a"),xZe=o("BertTokenizerFast"),kZe=o(" (QDQBert model)"),SZe=l(),nh=a("li"),_ee=a("strong"),RZe=o("rag"),BZe=o(" \u2014 "),eR=a("a"),PZe=o("RagTokenizer"),$Ze=o(" (RAG model)"),IZe=l(),ys=a("li"),uee=a("strong"),qZe=o("realm"),NZe=o(" \u2014 "),oR=a("a"),jZe=o("RealmTokenizer"),DZe=o(" or "),rR=a("a"),GZe=o("RealmTokenizerFast"),OZe=o(" (Realm model)"),VZe=l(),Ls=a("li"),bee=a("strong"),XZe=o("reformer"),zZe=o(" \u2014 "),tR=a("a"),QZe=o("ReformerTokenizer"),WZe=o(" or "),aR=a("a"),HZe=o("ReformerTokenizerFast"),UZe=o(" (Reformer model)"),JZe=l(),xs=a("li"),Fee=a("strong"),YZe=o("rembert"),KZe=o(" \u2014 "),nR=a("a"),ZZe=o("RemBertTokenizer"),eeo=o(" or "),sR=a("a"),oeo=o("RemBertTokenizerFast"),reo=o(" (RemBERT model)"),teo=l(),ks=a("li"),vee=a("strong"),aeo=o("retribert"),neo=o(" \u2014 "),lR=a("a"),seo=o("RetriBertTokenizer"),leo=o(" or "),iR=a("a"),ieo=o("RetriBertTokenizerFast"),deo=o(" (RetriBERT model)"),ceo=l(),Ss=a("li"),Tee=a("strong"),feo=o("roberta"),meo=o(" \u2014 "),dR=a("a"),geo=o("RobertaTokenizer"),heo=o(" or "),cR=a("a"),peo=o("RobertaTokenizerFast"),_eo=o(" (RoBERTa model)"),ueo=l(),Rs=a("li"),Mee=a("strong"),beo=o("roformer"),Feo=o(" \u2014 "),fR=a("a"),veo=o("RoFormerTokenizer"),Teo=o(" or "),mR=a("a"),Meo=o("RoFormerTokenizerFast"),Eeo=o(" (RoFormer model)"),Ceo=l(),sh=a("li"),Eee=a("strong"),weo=o("speech_to_text"),Aeo=o(" \u2014 "),gR=a("a"),yeo=o("Speech2TextTokenizer"),Leo=o(" (Speech2Text model)"),xeo=l(),lh=a("li"),Cee=a("strong"),keo=o("speech_to_text_2"),Seo=o(" \u2014 "),hR=a("a"),Reo=o("Speech2Text2Tokenizer"),Beo=o(" (Speech2Text2 model)"),Peo=l(),Bs=a("li"),wee=a("strong"),$eo=o("splinter"),Ieo=o(" \u2014 "),pR=a("a"),qeo=o("SplinterTokenizer"),Neo=o(" or "),_R=a("a"),jeo=o("SplinterTokenizerFast"),Deo=o(" (Splinter model)"),Geo=l(),Ps=a("li"),Aee=a("strong"),Oeo=o("squeezebert"),Veo=o(" \u2014 "),uR=a("a"),Xeo=o("SqueezeBertTokenizer"),zeo=o(" or "),bR=a("a"),Qeo=o("SqueezeBertTokenizerFast"),Weo=o(" (SqueezeBERT model)"),Heo=l(),$s=a("li"),yee=a("strong"),Ueo=o("t5"),Jeo=o(" \u2014 "),FR=a("a"),Yeo=o("T5Tokenizer"),Keo=o(" or "),vR=a("a"),Zeo=o("T5TokenizerFast"),eoo=o(" (T5 model)"),ooo=l(),ih=a("li"),Lee=a("strong"),roo=o("tapas"),too=o(" \u2014 "),TR=a("a"),aoo=o("TapasTokenizer"),noo=o(" (TAPAS model)"),soo=l(),dh=a("li"),xee=a("strong"),loo=o("transfo-xl"),ioo=o(" \u2014 "),MR=a("a"),doo=o("TransfoXLTokenizer"),coo=o(" (Transformer-XL model)"),foo=l(),ch=a("li"),kee=a("strong"),moo=o("wav2vec2"),goo=o(" \u2014 "),ER=a("a"),hoo=o("Wav2Vec2CTCTokenizer"),poo=o(" (Wav2Vec2 model)"),_oo=l(),fh=a("li"),See=a("strong"),uoo=o("wav2vec2_phoneme"),boo=o(" \u2014 "),CR=a("a"),Foo=o("Wav2Vec2PhonemeCTCTokenizer"),voo=o(" (Wav2Vec2Phoneme model)"),Too=l(),Is=a("li"),Ree=a("strong"),Moo=o("xglm"),Eoo=o(" \u2014 "),wR=a("a"),Coo=o("XGLMTokenizer"),woo=o(" or "),AR=a("a"),Aoo=o("XGLMTokenizerFast"),yoo=o(" (XGLM model)"),Loo=l(),mh=a("li"),Bee=a("strong"),xoo=o("xlm"),koo=o(" \u2014 "),yR=a("a"),Soo=o("XLMTokenizer"),Roo=o(" (XLM model)"),Boo=l(),gh=a("li"),Pee=a("strong"),Poo=o("xlm-prophetnet"),$oo=o(" \u2014 "),LR=a("a"),Ioo=o("XLMProphetNetTokenizer"),qoo=o(" (XLMProphetNet model)"),Noo=l(),qs=a("li"),$ee=a("strong"),joo=o("xlm-roberta"),Doo=o(" \u2014 "),xR=a("a"),Goo=o("XLMRobertaTokenizer"),Ooo=o(" or "),kR=a("a"),Voo=o("XLMRobertaTokenizerFast"),Xoo=o(" (XLM-RoBERTa model)"),zoo=l(),Ns=a("li"),Iee=a("strong"),Qoo=o("xlnet"),Woo=o(" \u2014 "),SR=a("a"),Hoo=o("XLNetTokenizer"),Uoo=o(" or "),RR=a("a"),Joo=o("XLNetTokenizerFast"),Yoo=o(" (XLNet model)"),Koo=l(),qee=a("p"),Zoo=o("Examples:"),ero=l(),f(zC.$$.fragment),oro=l(),hh=a("div"),f(QC.$$.fragment),rro=l(),Nee=a("p"),tro=o("Register a new tokenizer in this mapping."),DRe=l(),Wi=a("h2"),ph=a("a"),jee=a("span"),f(WC.$$.fragment),aro=l(),Dee=a("span"),nro=o("AutoFeatureExtractor"),GRe=l(),Ho=a("div"),f(HC.$$.fragment),sro=l(),UC=a("p"),lro=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),BR=a("a"),iro=o("AutoFeatureExtractor.from_pretrained()"),dro=o(" class method."),cro=l(),JC=a("p"),fro=o("This class cannot be instantiated directly using "),Gee=a("code"),mro=o("__init__()"),gro=o(" (throws an error)."),hro=l(),$e=a("div"),f(YC.$$.fragment),pro=l(),Oee=a("p"),_ro=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),uro=l(),Va=a("p"),bro=o("The feature extractor class to instantiate is selected based on the "),Vee=a("code"),Fro=o("model_type"),vro=o(` property of the config object
(either passed as an argument or loaded from `),Xee=a("code"),Tro=o("pretrained_model_name_or_path"),Mro=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),zee=a("code"),Ero=o("pretrained_model_name_or_path"),Cro=o(":"),wro=l(),ee=a("ul"),_h=a("li"),Qee=a("strong"),Aro=o("beit"),yro=o(" \u2014 "),PR=a("a"),Lro=o("BeitFeatureExtractor"),xro=o(" (BEiT model)"),kro=l(),uh=a("li"),Wee=a("strong"),Sro=o("clip"),Rro=o(" \u2014 "),$R=a("a"),Bro=o("CLIPFeatureExtractor"),Pro=o(" (CLIP model)"),$ro=l(),bh=a("li"),Hee=a("strong"),Iro=o("convnext"),qro=o(" \u2014 "),IR=a("a"),Nro=o("ConvNextFeatureExtractor"),jro=o(" (ConvNext model)"),Dro=l(),Fh=a("li"),Uee=a("strong"),Gro=o("deit"),Oro=o(" \u2014 "),qR=a("a"),Vro=o("DeiTFeatureExtractor"),Xro=o(" (DeiT model)"),zro=l(),vh=a("li"),Jee=a("strong"),Qro=o("detr"),Wro=o(" \u2014 "),NR=a("a"),Hro=o("DetrFeatureExtractor"),Uro=o(" (DETR model)"),Jro=l(),Th=a("li"),Yee=a("strong"),Yro=o("hubert"),Kro=o(" \u2014 "),jR=a("a"),Zro=o("Wav2Vec2FeatureExtractor"),eto=o(" (Hubert model)"),oto=l(),Mh=a("li"),Kee=a("strong"),rto=o("layoutlmv2"),tto=o(" \u2014 "),DR=a("a"),ato=o("LayoutLMv2FeatureExtractor"),nto=o(" (LayoutLMv2 model)"),sto=l(),Eh=a("li"),Zee=a("strong"),lto=o("maskformer"),ito=o(" \u2014 "),GR=a("a"),dto=o("MaskFormerFeatureExtractor"),cto=o(" (MaskFormer model)"),fto=l(),Ch=a("li"),eoe=a("strong"),mto=o("perceiver"),gto=o(" \u2014 "),OR=a("a"),hto=o("PerceiverFeatureExtractor"),pto=o(" (Perceiver model)"),_to=l(),wh=a("li"),ooe=a("strong"),uto=o("poolformer"),bto=o(" \u2014 "),VR=a("a"),Fto=o("PoolFormerFeatureExtractor"),vto=o(" (PoolFormer model)"),Tto=l(),Ah=a("li"),roe=a("strong"),Mto=o("regnet"),Eto=o(" \u2014 "),XR=a("a"),Cto=o("ConvNextFeatureExtractor"),wto=o(" (RegNet model)"),Ato=l(),yh=a("li"),toe=a("strong"),yto=o("resnet"),Lto=o(" \u2014 "),zR=a("a"),xto=o("ConvNextFeatureExtractor"),kto=o(" (ResNet model)"),Sto=l(),Lh=a("li"),aoe=a("strong"),Rto=o("segformer"),Bto=o(" \u2014 "),QR=a("a"),Pto=o("SegformerFeatureExtractor"),$to=o(" (SegFormer model)"),Ito=l(),xh=a("li"),noe=a("strong"),qto=o("speech_to_text"),Nto=o(" \u2014 "),WR=a("a"),jto=o("Speech2TextFeatureExtractor"),Dto=o(" (Speech2Text model)"),Gto=l(),kh=a("li"),soe=a("strong"),Oto=o("swin"),Vto=o(" \u2014 "),HR=a("a"),Xto=o("ViTFeatureExtractor"),zto=o(" (Swin model)"),Qto=l(),Sh=a("li"),loe=a("strong"),Wto=o("van"),Hto=o(" \u2014 "),UR=a("a"),Uto=o("ConvNextFeatureExtractor"),Jto=o(" (VAN model)"),Yto=l(),Rh=a("li"),ioe=a("strong"),Kto=o("vit"),Zto=o(" \u2014 "),JR=a("a"),eao=o("ViTFeatureExtractor"),oao=o(" (ViT model)"),rao=l(),Bh=a("li"),doe=a("strong"),tao=o("vit_mae"),aao=o(" \u2014 "),YR=a("a"),nao=o("ViTFeatureExtractor"),sao=o(" (ViTMAE model)"),lao=l(),Ph=a("li"),coe=a("strong"),iao=o("wav2vec2"),dao=o(" \u2014 "),KR=a("a"),cao=o("Wav2Vec2FeatureExtractor"),fao=o(" (Wav2Vec2 model)"),mao=l(),f($h.$$.fragment),gao=l(),foe=a("p"),hao=o("Examples:"),pao=l(),f(KC.$$.fragment),_ao=l(),Ih=a("div"),f(ZC.$$.fragment),uao=l(),moe=a("p"),bao=o("Register a new feature extractor for this class."),ORe=l(),Hi=a("h2"),qh=a("a"),goe=a("span"),f(e3.$$.fragment),Fao=l(),hoe=a("span"),vao=o("AutoProcessor"),VRe=l(),Uo=a("div"),f(o3.$$.fragment),Tao=l(),r3=a("p"),Mao=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),ZR=a("a"),Eao=o("AutoProcessor.from_pretrained()"),Cao=o(" class method."),wao=l(),t3=a("p"),Aao=o("This class cannot be instantiated directly using "),poe=a("code"),yao=o("__init__()"),Lao=o(" (throws an error)."),xao=l(),Ie=a("div"),f(a3.$$.fragment),kao=l(),_oe=a("p"),Sao=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),Rao=l(),Ui=a("p"),Bao=o("The processor class to instantiate is selected based on the "),uoe=a("code"),Pao=o("model_type"),$ao=o(` property of the config object (either
passed as an argument or loaded from `),boe=a("code"),Iao=o("pretrained_model_name_or_path"),qao=o(" if possible):"),Nao=l(),ke=a("ul"),Nh=a("li"),Foe=a("strong"),jao=o("clip"),Dao=o(" \u2014 "),eB=a("a"),Gao=o("CLIPProcessor"),Oao=o(" (CLIP model)"),Vao=l(),jh=a("li"),voe=a("strong"),Xao=o("layoutlmv2"),zao=o(" \u2014 "),oB=a("a"),Qao=o("LayoutLMv2Processor"),Wao=o(" (LayoutLMv2 model)"),Hao=l(),Dh=a("li"),Toe=a("strong"),Uao=o("layoutxlm"),Jao=o(" \u2014 "),rB=a("a"),Yao=o("LayoutXLMProcessor"),Kao=o(" (LayoutXLM model)"),Zao=l(),Gh=a("li"),Moe=a("strong"),eno=o("speech_to_text"),ono=o(" \u2014 "),tB=a("a"),rno=o("Speech2TextProcessor"),tno=o(" (Speech2Text model)"),ano=l(),Oh=a("li"),Eoe=a("strong"),nno=o("speech_to_text_2"),sno=o(" \u2014 "),aB=a("a"),lno=o("Speech2Text2Processor"),ino=o(" (Speech2Text2 model)"),dno=l(),Vh=a("li"),Coe=a("strong"),cno=o("trocr"),fno=o(" \u2014 "),nB=a("a"),mno=o("TrOCRProcessor"),gno=o(" (TrOCR model)"),hno=l(),Xh=a("li"),woe=a("strong"),pno=o("vision-text-dual-encoder"),_no=o(" \u2014 "),sB=a("a"),uno=o("VisionTextDualEncoderProcessor"),bno=o(" (VisionTextDualEncoder model)"),Fno=l(),zh=a("li"),Aoe=a("strong"),vno=o("wav2vec2"),Tno=o(" \u2014 "),lB=a("a"),Mno=o("Wav2Vec2Processor"),Eno=o(" (Wav2Vec2 model)"),Cno=l(),f(Qh.$$.fragment),wno=l(),yoe=a("p"),Ano=o("Examples:"),yno=l(),f(n3.$$.fragment),Lno=l(),Wh=a("div"),f(s3.$$.fragment),xno=l(),Loe=a("p"),kno=o("Register a new processor for this class."),XRe=l(),Ji=a("h2"),Hh=a("a"),xoe=a("span"),f(l3.$$.fragment),Sno=l(),koe=a("span"),Rno=o("AutoModel"),zRe=l(),Jo=a("div"),f(i3.$$.fragment),Bno=l(),Yi=a("p"),Pno=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),iB=a("a"),$no=o("from_pretrained()"),Ino=o(" class method or the "),dB=a("a"),qno=o("from_config()"),Nno=o(` class
method.`),jno=l(),d3=a("p"),Dno=o("This class cannot be instantiated directly using "),Soe=a("code"),Gno=o("__init__()"),Ono=o(" (throws an error)."),Vno=l(),Xr=a("div"),f(c3.$$.fragment),Xno=l(),Roe=a("p"),zno=o("Instantiates one of the base model classes of the library from a configuration."),Qno=l(),Ki=a("p"),Wno=o(`Note:
Loading a model from its configuration file does `),Boe=a("strong"),Hno=o("not"),Uno=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cB=a("a"),Jno=o("from_pretrained()"),Yno=o(" to load the model weights."),Kno=l(),Poe=a("p"),Zno=o("Examples:"),eso=l(),f(f3.$$.fragment),oso=l(),qe=a("div"),f(m3.$$.fragment),rso=l(),$oe=a("p"),tso=o("Instantiate one of the base model classes of the library from a pretrained model."),aso=l(),Xa=a("p"),nso=o("The model class to instantiate is selected based on the "),Ioe=a("code"),sso=o("model_type"),lso=o(` property of the config object (either
passed as an argument or loaded from `),qoe=a("code"),iso=o("pretrained_model_name_or_path"),dso=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Noe=a("code"),cso=o("pretrained_model_name_or_path"),fso=o(":"),mso=l(),T=a("ul"),Uh=a("li"),joe=a("strong"),gso=o("albert"),hso=o(" \u2014 "),fB=a("a"),pso=o("AlbertModel"),_so=o(" (ALBERT model)"),uso=l(),Jh=a("li"),Doe=a("strong"),bso=o("bart"),Fso=o(" \u2014 "),mB=a("a"),vso=o("BartModel"),Tso=o(" (BART model)"),Mso=l(),Yh=a("li"),Goe=a("strong"),Eso=o("beit"),Cso=o(" \u2014 "),gB=a("a"),wso=o("BeitModel"),Aso=o(" (BEiT model)"),yso=l(),Kh=a("li"),Ooe=a("strong"),Lso=o("bert"),xso=o(" \u2014 "),hB=a("a"),kso=o("BertModel"),Sso=o(" (BERT model)"),Rso=l(),Zh=a("li"),Voe=a("strong"),Bso=o("bert-generation"),Pso=o(" \u2014 "),pB=a("a"),$so=o("BertGenerationEncoder"),Iso=o(" (Bert Generation model)"),qso=l(),ep=a("li"),Xoe=a("strong"),Nso=o("big_bird"),jso=o(" \u2014 "),_B=a("a"),Dso=o("BigBirdModel"),Gso=o(" (BigBird model)"),Oso=l(),op=a("li"),zoe=a("strong"),Vso=o("bigbird_pegasus"),Xso=o(" \u2014 "),uB=a("a"),zso=o("BigBirdPegasusModel"),Qso=o(" (BigBirdPegasus model)"),Wso=l(),rp=a("li"),Qoe=a("strong"),Hso=o("blenderbot"),Uso=o(" \u2014 "),bB=a("a"),Jso=o("BlenderbotModel"),Yso=o(" (Blenderbot model)"),Kso=l(),tp=a("li"),Woe=a("strong"),Zso=o("blenderbot-small"),elo=o(" \u2014 "),FB=a("a"),olo=o("BlenderbotSmallModel"),rlo=o(" (BlenderbotSmall model)"),tlo=l(),ap=a("li"),Hoe=a("strong"),alo=o("camembert"),nlo=o(" \u2014 "),vB=a("a"),slo=o("CamembertModel"),llo=o(" (CamemBERT model)"),ilo=l(),np=a("li"),Uoe=a("strong"),dlo=o("canine"),clo=o(" \u2014 "),TB=a("a"),flo=o("CanineModel"),mlo=o(" (Canine model)"),glo=l(),sp=a("li"),Joe=a("strong"),hlo=o("clip"),plo=o(" \u2014 "),MB=a("a"),_lo=o("CLIPModel"),ulo=o(" (CLIP model)"),blo=l(),lp=a("li"),Yoe=a("strong"),Flo=o("convbert"),vlo=o(" \u2014 "),EB=a("a"),Tlo=o("ConvBertModel"),Mlo=o(" (ConvBERT model)"),Elo=l(),ip=a("li"),Koe=a("strong"),Clo=o("convnext"),wlo=o(" \u2014 "),CB=a("a"),Alo=o("ConvNextModel"),ylo=o(" (ConvNext model)"),Llo=l(),dp=a("li"),Zoe=a("strong"),xlo=o("ctrl"),klo=o(" \u2014 "),wB=a("a"),Slo=o("CTRLModel"),Rlo=o(" (CTRL model)"),Blo=l(),cp=a("li"),ere=a("strong"),Plo=o("data2vec-audio"),$lo=o(" \u2014 "),AB=a("a"),Ilo=o("Data2VecAudioModel"),qlo=o(" (Data2VecAudio model)"),Nlo=l(),fp=a("li"),ore=a("strong"),jlo=o("data2vec-text"),Dlo=o(" \u2014 "),yB=a("a"),Glo=o("Data2VecTextModel"),Olo=o(" (Data2VecText model)"),Vlo=l(),mp=a("li"),rre=a("strong"),Xlo=o("deberta"),zlo=o(" \u2014 "),LB=a("a"),Qlo=o("DebertaModel"),Wlo=o(" (DeBERTa model)"),Hlo=l(),gp=a("li"),tre=a("strong"),Ulo=o("deberta-v2"),Jlo=o(" \u2014 "),xB=a("a"),Ylo=o("DebertaV2Model"),Klo=o(" (DeBERTa-v2 model)"),Zlo=l(),hp=a("li"),are=a("strong"),eio=o("decision_transformer"),oio=o(" \u2014 "),kB=a("a"),rio=o("DecisionTransformerModel"),tio=o(" (Decision Transformer model)"),aio=l(),pp=a("li"),nre=a("strong"),nio=o("deit"),sio=o(" \u2014 "),SB=a("a"),lio=o("DeiTModel"),iio=o(" (DeiT model)"),dio=l(),_p=a("li"),sre=a("strong"),cio=o("detr"),fio=o(" \u2014 "),RB=a("a"),mio=o("DetrModel"),gio=o(" (DETR model)"),hio=l(),up=a("li"),lre=a("strong"),pio=o("distilbert"),_io=o(" \u2014 "),BB=a("a"),uio=o("DistilBertModel"),bio=o(" (DistilBERT model)"),Fio=l(),bp=a("li"),ire=a("strong"),vio=o("dpr"),Tio=o(" \u2014 "),PB=a("a"),Mio=o("DPRQuestionEncoder"),Eio=o(" (DPR model)"),Cio=l(),Fp=a("li"),dre=a("strong"),wio=o("dpt"),Aio=o(" \u2014 "),$B=a("a"),yio=o("DPTModel"),Lio=o(" (DPT model)"),xio=l(),vp=a("li"),cre=a("strong"),kio=o("electra"),Sio=o(" \u2014 "),IB=a("a"),Rio=o("ElectraModel"),Bio=o(" (ELECTRA model)"),Pio=l(),Tp=a("li"),fre=a("strong"),$io=o("flaubert"),Iio=o(" \u2014 "),qB=a("a"),qio=o("FlaubertModel"),Nio=o(" (FlauBERT model)"),jio=l(),Mp=a("li"),mre=a("strong"),Dio=o("fnet"),Gio=o(" \u2014 "),NB=a("a"),Oio=o("FNetModel"),Vio=o(" (FNet model)"),Xio=l(),Ep=a("li"),gre=a("strong"),zio=o("fsmt"),Qio=o(" \u2014 "),jB=a("a"),Wio=o("FSMTModel"),Hio=o(" (FairSeq Machine-Translation model)"),Uio=l(),js=a("li"),hre=a("strong"),Jio=o("funnel"),Yio=o(" \u2014 "),DB=a("a"),Kio=o("FunnelModel"),Zio=o(" or "),GB=a("a"),edo=o("FunnelBaseModel"),odo=o(" (Funnel Transformer model)"),rdo=l(),Cp=a("li"),pre=a("strong"),tdo=o("glpn"),ado=o(" \u2014 "),OB=a("a"),ndo=o("GLPNModel"),sdo=o(" (GLPN model)"),ldo=l(),wp=a("li"),_re=a("strong"),ido=o("gpt2"),ddo=o(" \u2014 "),VB=a("a"),cdo=o("GPT2Model"),fdo=o(" (OpenAI GPT-2 model)"),mdo=l(),Ap=a("li"),ure=a("strong"),gdo=o("gpt_neo"),hdo=o(" \u2014 "),XB=a("a"),pdo=o("GPTNeoModel"),_do=o(" (GPT Neo model)"),udo=l(),yp=a("li"),bre=a("strong"),bdo=o("gpt_neox"),Fdo=o(" \u2014 "),Fre=a("code"),vdo=o("GPTNeoXModel"),Tdo=o(" (GPTNeoX model)"),Mdo=l(),Lp=a("li"),vre=a("strong"),Edo=o("gptj"),Cdo=o(" \u2014 "),zB=a("a"),wdo=o("GPTJModel"),Ado=o(" (GPT-J model)"),ydo=l(),xp=a("li"),Tre=a("strong"),Ldo=o("hubert"),xdo=o(" \u2014 "),QB=a("a"),kdo=o("HubertModel"),Sdo=o(" (Hubert model)"),Rdo=l(),kp=a("li"),Mre=a("strong"),Bdo=o("ibert"),Pdo=o(" \u2014 "),WB=a("a"),$do=o("IBertModel"),Ido=o(" (I-BERT model)"),qdo=l(),Sp=a("li"),Ere=a("strong"),Ndo=o("imagegpt"),jdo=o(" \u2014 "),HB=a("a"),Ddo=o("ImageGPTModel"),Gdo=o(" (ImageGPT model)"),Odo=l(),Rp=a("li"),Cre=a("strong"),Vdo=o("layoutlm"),Xdo=o(" \u2014 "),UB=a("a"),zdo=o("LayoutLMModel"),Qdo=o(" (LayoutLM model)"),Wdo=l(),Bp=a("li"),wre=a("strong"),Hdo=o("layoutlmv2"),Udo=o(" \u2014 "),JB=a("a"),Jdo=o("LayoutLMv2Model"),Ydo=o(" (LayoutLMv2 model)"),Kdo=l(),Pp=a("li"),Are=a("strong"),Zdo=o("led"),eco=o(" \u2014 "),YB=a("a"),oco=o("LEDModel"),rco=o(" (LED model)"),tco=l(),$p=a("li"),yre=a("strong"),aco=o("longformer"),nco=o(" \u2014 "),KB=a("a"),sco=o("LongformerModel"),lco=o(" (Longformer model)"),ico=l(),Ip=a("li"),Lre=a("strong"),dco=o("luke"),cco=o(" \u2014 "),ZB=a("a"),fco=o("LukeModel"),mco=o(" (LUKE model)"),gco=l(),qp=a("li"),xre=a("strong"),hco=o("lxmert"),pco=o(" \u2014 "),eP=a("a"),_co=o("LxmertModel"),uco=o(" (LXMERT model)"),bco=l(),Np=a("li"),kre=a("strong"),Fco=o("m2m_100"),vco=o(" \u2014 "),oP=a("a"),Tco=o("M2M100Model"),Mco=o(" (M2M100 model)"),Eco=l(),jp=a("li"),Sre=a("strong"),Cco=o("marian"),wco=o(" \u2014 "),rP=a("a"),Aco=o("MarianModel"),yco=o(" (Marian model)"),Lco=l(),Dp=a("li"),Rre=a("strong"),xco=o("maskformer"),kco=o(" \u2014 "),tP=a("a"),Sco=o("MaskFormerModel"),Rco=o(" (MaskFormer model)"),Bco=l(),Gp=a("li"),Bre=a("strong"),Pco=o("mbart"),$co=o(" \u2014 "),aP=a("a"),Ico=o("MBartModel"),qco=o(" (mBART model)"),Nco=l(),Op=a("li"),Pre=a("strong"),jco=o("megatron-bert"),Dco=o(" \u2014 "),nP=a("a"),Gco=o("MegatronBertModel"),Oco=o(" (MegatronBert model)"),Vco=l(),Vp=a("li"),$re=a("strong"),Xco=o("mobilebert"),zco=o(" \u2014 "),sP=a("a"),Qco=o("MobileBertModel"),Wco=o(" (MobileBERT model)"),Hco=l(),Xp=a("li"),Ire=a("strong"),Uco=o("mpnet"),Jco=o(" \u2014 "),lP=a("a"),Yco=o("MPNetModel"),Kco=o(" (MPNet model)"),Zco=l(),zp=a("li"),qre=a("strong"),efo=o("mt5"),ofo=o(" \u2014 "),iP=a("a"),rfo=o("MT5Model"),tfo=o(" (mT5 model)"),afo=l(),Qp=a("li"),Nre=a("strong"),nfo=o("nystromformer"),sfo=o(" \u2014 "),dP=a("a"),lfo=o("NystromformerModel"),ifo=o(" (Nystromformer model)"),dfo=l(),Wp=a("li"),jre=a("strong"),cfo=o("openai-gpt"),ffo=o(" \u2014 "),cP=a("a"),mfo=o("OpenAIGPTModel"),gfo=o(" (OpenAI GPT model)"),hfo=l(),Hp=a("li"),Dre=a("strong"),pfo=o("pegasus"),_fo=o(" \u2014 "),fP=a("a"),ufo=o("PegasusModel"),bfo=o(" (Pegasus model)"),Ffo=l(),Up=a("li"),Gre=a("strong"),vfo=o("perceiver"),Tfo=o(" \u2014 "),mP=a("a"),Mfo=o("PerceiverModel"),Efo=o(" (Perceiver model)"),Cfo=l(),Jp=a("li"),Ore=a("strong"),wfo=o("plbart"),Afo=o(" \u2014 "),gP=a("a"),yfo=o("PLBartModel"),Lfo=o(" (PLBart model)"),xfo=l(),Yp=a("li"),Vre=a("strong"),kfo=o("poolformer"),Sfo=o(" \u2014 "),hP=a("a"),Rfo=o("PoolFormerModel"),Bfo=o(" (PoolFormer model)"),Pfo=l(),Kp=a("li"),Xre=a("strong"),$fo=o("prophetnet"),Ifo=o(" \u2014 "),pP=a("a"),qfo=o("ProphetNetModel"),Nfo=o(" (ProphetNet model)"),jfo=l(),Zp=a("li"),zre=a("strong"),Dfo=o("qdqbert"),Gfo=o(" \u2014 "),_P=a("a"),Ofo=o("QDQBertModel"),Vfo=o(" (QDQBert model)"),Xfo=l(),e_=a("li"),Qre=a("strong"),zfo=o("reformer"),Qfo=o(" \u2014 "),uP=a("a"),Wfo=o("ReformerModel"),Hfo=o(" (Reformer model)"),Ufo=l(),o_=a("li"),Wre=a("strong"),Jfo=o("regnet"),Yfo=o(" \u2014 "),bP=a("a"),Kfo=o("RegNetModel"),Zfo=o(" (RegNet model)"),emo=l(),r_=a("li"),Hre=a("strong"),omo=o("rembert"),rmo=o(" \u2014 "),FP=a("a"),tmo=o("RemBertModel"),amo=o(" (RemBERT model)"),nmo=l(),t_=a("li"),Ure=a("strong"),smo=o("resnet"),lmo=o(" \u2014 "),vP=a("a"),imo=o("ResNetModel"),dmo=o(" (ResNet model)"),cmo=l(),a_=a("li"),Jre=a("strong"),fmo=o("retribert"),mmo=o(" \u2014 "),TP=a("a"),gmo=o("RetriBertModel"),hmo=o(" (RetriBERT model)"),pmo=l(),n_=a("li"),Yre=a("strong"),_mo=o("roberta"),umo=o(" \u2014 "),MP=a("a"),bmo=o("RobertaModel"),Fmo=o(" (RoBERTa model)"),vmo=l(),s_=a("li"),Kre=a("strong"),Tmo=o("roformer"),Mmo=o(" \u2014 "),EP=a("a"),Emo=o("RoFormerModel"),Cmo=o(" (RoFormer model)"),wmo=l(),l_=a("li"),Zre=a("strong"),Amo=o("segformer"),ymo=o(" \u2014 "),CP=a("a"),Lmo=o("SegformerModel"),xmo=o(" (SegFormer model)"),kmo=l(),i_=a("li"),ete=a("strong"),Smo=o("sew"),Rmo=o(" \u2014 "),wP=a("a"),Bmo=o("SEWModel"),Pmo=o(" (SEW model)"),$mo=l(),d_=a("li"),ote=a("strong"),Imo=o("sew-d"),qmo=o(" \u2014 "),AP=a("a"),Nmo=o("SEWDModel"),jmo=o(" (SEW-D model)"),Dmo=l(),c_=a("li"),rte=a("strong"),Gmo=o("speech_to_text"),Omo=o(" \u2014 "),yP=a("a"),Vmo=o("Speech2TextModel"),Xmo=o(" (Speech2Text model)"),zmo=l(),f_=a("li"),tte=a("strong"),Qmo=o("splinter"),Wmo=o(" \u2014 "),LP=a("a"),Hmo=o("SplinterModel"),Umo=o(" (Splinter model)"),Jmo=l(),m_=a("li"),ate=a("strong"),Ymo=o("squeezebert"),Kmo=o(" \u2014 "),xP=a("a"),Zmo=o("SqueezeBertModel"),ego=o(" (SqueezeBERT model)"),ogo=l(),g_=a("li"),nte=a("strong"),rgo=o("swin"),tgo=o(" \u2014 "),kP=a("a"),ago=o("SwinModel"),ngo=o(" (Swin model)"),sgo=l(),h_=a("li"),ste=a("strong"),lgo=o("t5"),igo=o(" \u2014 "),SP=a("a"),dgo=o("T5Model"),cgo=o(" (T5 model)"),fgo=l(),p_=a("li"),lte=a("strong"),mgo=o("tapas"),ggo=o(" \u2014 "),RP=a("a"),hgo=o("TapasModel"),pgo=o(" (TAPAS model)"),_go=l(),__=a("li"),ite=a("strong"),ugo=o("transfo-xl"),bgo=o(" \u2014 "),BP=a("a"),Fgo=o("TransfoXLModel"),vgo=o(" (Transformer-XL model)"),Tgo=l(),u_=a("li"),dte=a("strong"),Mgo=o("unispeech"),Ego=o(" \u2014 "),PP=a("a"),Cgo=o("UniSpeechModel"),wgo=o(" (UniSpeech model)"),Ago=l(),b_=a("li"),cte=a("strong"),ygo=o("unispeech-sat"),Lgo=o(" \u2014 "),$P=a("a"),xgo=o("UniSpeechSatModel"),kgo=o(" (UniSpeechSat model)"),Sgo=l(),F_=a("li"),fte=a("strong"),Rgo=o("van"),Bgo=o(" \u2014 "),IP=a("a"),Pgo=o("VanModel"),$go=o(" (VAN model)"),Igo=l(),v_=a("li"),mte=a("strong"),qgo=o("vilt"),Ngo=o(" \u2014 "),qP=a("a"),jgo=o("ViltModel"),Dgo=o(" (ViLT model)"),Ggo=l(),T_=a("li"),gte=a("strong"),Ogo=o("vision-text-dual-encoder"),Vgo=o(" \u2014 "),NP=a("a"),Xgo=o("VisionTextDualEncoderModel"),zgo=o(" (VisionTextDualEncoder model)"),Qgo=l(),M_=a("li"),hte=a("strong"),Wgo=o("visual_bert"),Hgo=o(" \u2014 "),jP=a("a"),Ugo=o("VisualBertModel"),Jgo=o(" (VisualBert model)"),Ygo=l(),E_=a("li"),pte=a("strong"),Kgo=o("vit"),Zgo=o(" \u2014 "),DP=a("a"),eho=o("ViTModel"),oho=o(" (ViT model)"),rho=l(),C_=a("li"),_te=a("strong"),tho=o("vit_mae"),aho=o(" \u2014 "),GP=a("a"),nho=o("ViTMAEModel"),sho=o(" (ViTMAE model)"),lho=l(),w_=a("li"),ute=a("strong"),iho=o("wav2vec2"),dho=o(" \u2014 "),OP=a("a"),cho=o("Wav2Vec2Model"),fho=o(" (Wav2Vec2 model)"),mho=l(),A_=a("li"),bte=a("strong"),gho=o("wavlm"),hho=o(" \u2014 "),VP=a("a"),pho=o("WavLMModel"),_ho=o(" (WavLM model)"),uho=l(),y_=a("li"),Fte=a("strong"),bho=o("xglm"),Fho=o(" \u2014 "),XP=a("a"),vho=o("XGLMModel"),Tho=o(" (XGLM model)"),Mho=l(),L_=a("li"),vte=a("strong"),Eho=o("xlm"),Cho=o(" \u2014 "),zP=a("a"),who=o("XLMModel"),Aho=o(" (XLM model)"),yho=l(),x_=a("li"),Tte=a("strong"),Lho=o("xlm-prophetnet"),xho=o(" \u2014 "),QP=a("a"),kho=o("XLMProphetNetModel"),Sho=o(" (XLMProphetNet model)"),Rho=l(),k_=a("li"),Mte=a("strong"),Bho=o("xlm-roberta"),Pho=o(" \u2014 "),WP=a("a"),$ho=o("XLMRobertaModel"),Iho=o(" (XLM-RoBERTa model)"),qho=l(),S_=a("li"),Ete=a("strong"),Nho=o("xlm-roberta-xl"),jho=o(" \u2014 "),HP=a("a"),Dho=o("XLMRobertaXLModel"),Gho=o(" (XLM-RoBERTa-XL model)"),Oho=l(),R_=a("li"),Cte=a("strong"),Vho=o("xlnet"),Xho=o(" \u2014 "),UP=a("a"),zho=o("XLNetModel"),Qho=o(" (XLNet model)"),Who=l(),B_=a("li"),wte=a("strong"),Hho=o("yoso"),Uho=o(" \u2014 "),JP=a("a"),Jho=o("YosoModel"),Yho=o(" (YOSO model)"),Kho=l(),P_=a("p"),Zho=o("The model is set in evaluation mode by default using "),Ate=a("code"),epo=o("model.eval()"),opo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),yte=a("code"),rpo=o("model.train()"),tpo=l(),Lte=a("p"),apo=o("Examples:"),npo=l(),f(g3.$$.fragment),QRe=l(),Zi=a("h2"),$_=a("a"),xte=a("span"),f(h3.$$.fragment),spo=l(),kte=a("span"),lpo=o("AutoModelForPreTraining"),WRe=l(),Yo=a("div"),f(p3.$$.fragment),ipo=l(),ed=a("p"),dpo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),YP=a("a"),cpo=o("from_pretrained()"),fpo=o(" class method or the "),KP=a("a"),mpo=o("from_config()"),gpo=o(` class
method.`),hpo=l(),_3=a("p"),ppo=o("This class cannot be instantiated directly using "),Ste=a("code"),_po=o("__init__()"),upo=o(" (throws an error)."),bpo=l(),zr=a("div"),f(u3.$$.fragment),Fpo=l(),Rte=a("p"),vpo=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Tpo=l(),od=a("p"),Mpo=o(`Note:
Loading a model from its configuration file does `),Bte=a("strong"),Epo=o("not"),Cpo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ZP=a("a"),wpo=o("from_pretrained()"),Apo=o(" to load the model weights."),ypo=l(),Pte=a("p"),Lpo=o("Examples:"),xpo=l(),f(b3.$$.fragment),kpo=l(),Ne=a("div"),f(F3.$$.fragment),Spo=l(),$te=a("p"),Rpo=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Bpo=l(),za=a("p"),Ppo=o("The model class to instantiate is selected based on the "),Ite=a("code"),$po=o("model_type"),Ipo=o(` property of the config object (either
passed as an argument or loaded from `),qte=a("code"),qpo=o("pretrained_model_name_or_path"),Npo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nte=a("code"),jpo=o("pretrained_model_name_or_path"),Dpo=o(":"),Gpo=l(),R=a("ul"),I_=a("li"),jte=a("strong"),Opo=o("albert"),Vpo=o(" \u2014 "),e$=a("a"),Xpo=o("AlbertForPreTraining"),zpo=o(" (ALBERT model)"),Qpo=l(),q_=a("li"),Dte=a("strong"),Wpo=o("bart"),Hpo=o(" \u2014 "),o$=a("a"),Upo=o("BartForConditionalGeneration"),Jpo=o(" (BART model)"),Ypo=l(),N_=a("li"),Gte=a("strong"),Kpo=o("bert"),Zpo=o(" \u2014 "),r$=a("a"),e_o=o("BertForPreTraining"),o_o=o(" (BERT model)"),r_o=l(),j_=a("li"),Ote=a("strong"),t_o=o("big_bird"),a_o=o(" \u2014 "),t$=a("a"),n_o=o("BigBirdForPreTraining"),s_o=o(" (BigBird model)"),l_o=l(),D_=a("li"),Vte=a("strong"),i_o=o("camembert"),d_o=o(" \u2014 "),a$=a("a"),c_o=o("CamembertForMaskedLM"),f_o=o(" (CamemBERT model)"),m_o=l(),G_=a("li"),Xte=a("strong"),g_o=o("ctrl"),h_o=o(" \u2014 "),n$=a("a"),p_o=o("CTRLLMHeadModel"),__o=o(" (CTRL model)"),u_o=l(),O_=a("li"),zte=a("strong"),b_o=o("data2vec-text"),F_o=o(" \u2014 "),s$=a("a"),v_o=o("Data2VecTextForMaskedLM"),T_o=o(" (Data2VecText model)"),M_o=l(),V_=a("li"),Qte=a("strong"),E_o=o("deberta"),C_o=o(" \u2014 "),l$=a("a"),w_o=o("DebertaForMaskedLM"),A_o=o(" (DeBERTa model)"),y_o=l(),X_=a("li"),Wte=a("strong"),L_o=o("deberta-v2"),x_o=o(" \u2014 "),i$=a("a"),k_o=o("DebertaV2ForMaskedLM"),S_o=o(" (DeBERTa-v2 model)"),R_o=l(),z_=a("li"),Hte=a("strong"),B_o=o("distilbert"),P_o=o(" \u2014 "),d$=a("a"),$_o=o("DistilBertForMaskedLM"),I_o=o(" (DistilBERT model)"),q_o=l(),Q_=a("li"),Ute=a("strong"),N_o=o("electra"),j_o=o(" \u2014 "),c$=a("a"),D_o=o("ElectraForPreTraining"),G_o=o(" (ELECTRA model)"),O_o=l(),W_=a("li"),Jte=a("strong"),V_o=o("flaubert"),X_o=o(" \u2014 "),f$=a("a"),z_o=o("FlaubertWithLMHeadModel"),Q_o=o(" (FlauBERT model)"),W_o=l(),H_=a("li"),Yte=a("strong"),H_o=o("fnet"),U_o=o(" \u2014 "),m$=a("a"),J_o=o("FNetForPreTraining"),Y_o=o(" (FNet model)"),K_o=l(),U_=a("li"),Kte=a("strong"),Z_o=o("fsmt"),euo=o(" \u2014 "),g$=a("a"),ouo=o("FSMTForConditionalGeneration"),ruo=o(" (FairSeq Machine-Translation model)"),tuo=l(),J_=a("li"),Zte=a("strong"),auo=o("funnel"),nuo=o(" \u2014 "),h$=a("a"),suo=o("FunnelForPreTraining"),luo=o(" (Funnel Transformer model)"),iuo=l(),Y_=a("li"),eae=a("strong"),duo=o("gpt2"),cuo=o(" \u2014 "),p$=a("a"),fuo=o("GPT2LMHeadModel"),muo=o(" (OpenAI GPT-2 model)"),guo=l(),K_=a("li"),oae=a("strong"),huo=o("ibert"),puo=o(" \u2014 "),_$=a("a"),_uo=o("IBertForMaskedLM"),uuo=o(" (I-BERT model)"),buo=l(),Z_=a("li"),rae=a("strong"),Fuo=o("layoutlm"),vuo=o(" \u2014 "),u$=a("a"),Tuo=o("LayoutLMForMaskedLM"),Muo=o(" (LayoutLM model)"),Euo=l(),eu=a("li"),tae=a("strong"),Cuo=o("longformer"),wuo=o(" \u2014 "),b$=a("a"),Auo=o("LongformerForMaskedLM"),yuo=o(" (Longformer model)"),Luo=l(),ou=a("li"),aae=a("strong"),xuo=o("lxmert"),kuo=o(" \u2014 "),F$=a("a"),Suo=o("LxmertForPreTraining"),Ruo=o(" (LXMERT model)"),Buo=l(),ru=a("li"),nae=a("strong"),Puo=o("megatron-bert"),$uo=o(" \u2014 "),v$=a("a"),Iuo=o("MegatronBertForPreTraining"),quo=o(" (MegatronBert model)"),Nuo=l(),tu=a("li"),sae=a("strong"),juo=o("mobilebert"),Duo=o(" \u2014 "),T$=a("a"),Guo=o("MobileBertForPreTraining"),Ouo=o(" (MobileBERT model)"),Vuo=l(),au=a("li"),lae=a("strong"),Xuo=o("mpnet"),zuo=o(" \u2014 "),M$=a("a"),Quo=o("MPNetForMaskedLM"),Wuo=o(" (MPNet model)"),Huo=l(),nu=a("li"),iae=a("strong"),Uuo=o("openai-gpt"),Juo=o(" \u2014 "),E$=a("a"),Yuo=o("OpenAIGPTLMHeadModel"),Kuo=o(" (OpenAI GPT model)"),Zuo=l(),su=a("li"),dae=a("strong"),e6o=o("retribert"),o6o=o(" \u2014 "),C$=a("a"),r6o=o("RetriBertModel"),t6o=o(" (RetriBERT model)"),a6o=l(),lu=a("li"),cae=a("strong"),n6o=o("roberta"),s6o=o(" \u2014 "),w$=a("a"),l6o=o("RobertaForMaskedLM"),i6o=o(" (RoBERTa model)"),d6o=l(),iu=a("li"),fae=a("strong"),c6o=o("squeezebert"),f6o=o(" \u2014 "),A$=a("a"),m6o=o("SqueezeBertForMaskedLM"),g6o=o(" (SqueezeBERT model)"),h6o=l(),du=a("li"),mae=a("strong"),p6o=o("t5"),_6o=o(" \u2014 "),y$=a("a"),u6o=o("T5ForConditionalGeneration"),b6o=o(" (T5 model)"),F6o=l(),cu=a("li"),gae=a("strong"),v6o=o("tapas"),T6o=o(" \u2014 "),L$=a("a"),M6o=o("TapasForMaskedLM"),E6o=o(" (TAPAS model)"),C6o=l(),fu=a("li"),hae=a("strong"),w6o=o("transfo-xl"),A6o=o(" \u2014 "),x$=a("a"),y6o=o("TransfoXLLMHeadModel"),L6o=o(" (Transformer-XL model)"),x6o=l(),mu=a("li"),pae=a("strong"),k6o=o("unispeech"),S6o=o(" \u2014 "),k$=a("a"),R6o=o("UniSpeechForPreTraining"),B6o=o(" (UniSpeech model)"),P6o=l(),gu=a("li"),_ae=a("strong"),$6o=o("unispeech-sat"),I6o=o(" \u2014 "),S$=a("a"),q6o=o("UniSpeechSatForPreTraining"),N6o=o(" (UniSpeechSat model)"),j6o=l(),hu=a("li"),uae=a("strong"),D6o=o("visual_bert"),G6o=o(" \u2014 "),R$=a("a"),O6o=o("VisualBertForPreTraining"),V6o=o(" (VisualBert model)"),X6o=l(),pu=a("li"),bae=a("strong"),z6o=o("vit_mae"),Q6o=o(" \u2014 "),B$=a("a"),W6o=o("ViTMAEForPreTraining"),H6o=o(" (ViTMAE model)"),U6o=l(),_u=a("li"),Fae=a("strong"),J6o=o("wav2vec2"),Y6o=o(" \u2014 "),P$=a("a"),K6o=o("Wav2Vec2ForPreTraining"),Z6o=o(" (Wav2Vec2 model)"),e1o=l(),uu=a("li"),vae=a("strong"),o1o=o("xlm"),r1o=o(" \u2014 "),$$=a("a"),t1o=o("XLMWithLMHeadModel"),a1o=o(" (XLM model)"),n1o=l(),bu=a("li"),Tae=a("strong"),s1o=o("xlm-roberta"),l1o=o(" \u2014 "),I$=a("a"),i1o=o("XLMRobertaForMaskedLM"),d1o=o(" (XLM-RoBERTa model)"),c1o=l(),Fu=a("li"),Mae=a("strong"),f1o=o("xlm-roberta-xl"),m1o=o(" \u2014 "),q$=a("a"),g1o=o("XLMRobertaXLForMaskedLM"),h1o=o(" (XLM-RoBERTa-XL model)"),p1o=l(),vu=a("li"),Eae=a("strong"),_1o=o("xlnet"),u1o=o(" \u2014 "),N$=a("a"),b1o=o("XLNetLMHeadModel"),F1o=o(" (XLNet model)"),v1o=l(),Tu=a("p"),T1o=o("The model is set in evaluation mode by default using "),Cae=a("code"),M1o=o("model.eval()"),E1o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),wae=a("code"),C1o=o("model.train()"),w1o=l(),Aae=a("p"),A1o=o("Examples:"),y1o=l(),f(v3.$$.fragment),HRe=l(),rd=a("h2"),Mu=a("a"),yae=a("span"),f(T3.$$.fragment),L1o=l(),Lae=a("span"),x1o=o("AutoModelForCausalLM"),URe=l(),Ko=a("div"),f(M3.$$.fragment),k1o=l(),td=a("p"),S1o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),j$=a("a"),R1o=o("from_pretrained()"),B1o=o(" class method or the "),D$=a("a"),P1o=o("from_config()"),$1o=o(` class
method.`),I1o=l(),E3=a("p"),q1o=o("This class cannot be instantiated directly using "),xae=a("code"),N1o=o("__init__()"),j1o=o(" (throws an error)."),D1o=l(),Qr=a("div"),f(C3.$$.fragment),G1o=l(),kae=a("p"),O1o=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),V1o=l(),ad=a("p"),X1o=o(`Note:
Loading a model from its configuration file does `),Sae=a("strong"),z1o=o("not"),Q1o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),G$=a("a"),W1o=o("from_pretrained()"),H1o=o(" to load the model weights."),U1o=l(),Rae=a("p"),J1o=o("Examples:"),Y1o=l(),f(w3.$$.fragment),K1o=l(),je=a("div"),f(A3.$$.fragment),Z1o=l(),Bae=a("p"),ebo=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),obo=l(),Qa=a("p"),rbo=o("The model class to instantiate is selected based on the "),Pae=a("code"),tbo=o("model_type"),abo=o(` property of the config object (either
passed as an argument or loaded from `),$ae=a("code"),nbo=o("pretrained_model_name_or_path"),sbo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Iae=a("code"),lbo=o("pretrained_model_name_or_path"),ibo=o(":"),dbo=l(),$=a("ul"),Eu=a("li"),qae=a("strong"),cbo=o("bart"),fbo=o(" \u2014 "),O$=a("a"),mbo=o("BartForCausalLM"),gbo=o(" (BART model)"),hbo=l(),Cu=a("li"),Nae=a("strong"),pbo=o("bert"),_bo=o(" \u2014 "),V$=a("a"),ubo=o("BertLMHeadModel"),bbo=o(" (BERT model)"),Fbo=l(),wu=a("li"),jae=a("strong"),vbo=o("bert-generation"),Tbo=o(" \u2014 "),X$=a("a"),Mbo=o("BertGenerationDecoder"),Ebo=o(" (Bert Generation model)"),Cbo=l(),Au=a("li"),Dae=a("strong"),wbo=o("big_bird"),Abo=o(" \u2014 "),z$=a("a"),ybo=o("BigBirdForCausalLM"),Lbo=o(" (BigBird model)"),xbo=l(),yu=a("li"),Gae=a("strong"),kbo=o("bigbird_pegasus"),Sbo=o(" \u2014 "),Q$=a("a"),Rbo=o("BigBirdPegasusForCausalLM"),Bbo=o(" (BigBirdPegasus model)"),Pbo=l(),Lu=a("li"),Oae=a("strong"),$bo=o("blenderbot"),Ibo=o(" \u2014 "),W$=a("a"),qbo=o("BlenderbotForCausalLM"),Nbo=o(" (Blenderbot model)"),jbo=l(),xu=a("li"),Vae=a("strong"),Dbo=o("blenderbot-small"),Gbo=o(" \u2014 "),H$=a("a"),Obo=o("BlenderbotSmallForCausalLM"),Vbo=o(" (BlenderbotSmall model)"),Xbo=l(),ku=a("li"),Xae=a("strong"),zbo=o("camembert"),Qbo=o(" \u2014 "),U$=a("a"),Wbo=o("CamembertForCausalLM"),Hbo=o(" (CamemBERT model)"),Ubo=l(),Su=a("li"),zae=a("strong"),Jbo=o("ctrl"),Ybo=o(" \u2014 "),J$=a("a"),Kbo=o("CTRLLMHeadModel"),Zbo=o(" (CTRL model)"),e5o=l(),Ru=a("li"),Qae=a("strong"),o5o=o("data2vec-text"),r5o=o(" \u2014 "),Y$=a("a"),t5o=o("Data2VecTextForCausalLM"),a5o=o(" (Data2VecText model)"),n5o=l(),Bu=a("li"),Wae=a("strong"),s5o=o("electra"),l5o=o(" \u2014 "),K$=a("a"),i5o=o("ElectraForCausalLM"),d5o=o(" (ELECTRA model)"),c5o=l(),Pu=a("li"),Hae=a("strong"),f5o=o("gpt2"),m5o=o(" \u2014 "),Z$=a("a"),g5o=o("GPT2LMHeadModel"),h5o=o(" (OpenAI GPT-2 model)"),p5o=l(),$u=a("li"),Uae=a("strong"),_5o=o("gpt_neo"),u5o=o(" \u2014 "),eI=a("a"),b5o=o("GPTNeoForCausalLM"),F5o=o(" (GPT Neo model)"),v5o=l(),Iu=a("li"),Jae=a("strong"),T5o=o("gpt_neox"),M5o=o(" \u2014 "),Yae=a("code"),E5o=o("GPTNeoXForCausalLM"),C5o=o(" (GPTNeoX model)"),w5o=l(),qu=a("li"),Kae=a("strong"),A5o=o("gptj"),y5o=o(" \u2014 "),oI=a("a"),L5o=o("GPTJForCausalLM"),x5o=o(" (GPT-J model)"),k5o=l(),Nu=a("li"),Zae=a("strong"),S5o=o("marian"),R5o=o(" \u2014 "),rI=a("a"),B5o=o("MarianForCausalLM"),P5o=o(" (Marian model)"),$5o=l(),ju=a("li"),ene=a("strong"),I5o=o("mbart"),q5o=o(" \u2014 "),tI=a("a"),N5o=o("MBartForCausalLM"),j5o=o(" (mBART model)"),D5o=l(),Du=a("li"),one=a("strong"),G5o=o("megatron-bert"),O5o=o(" \u2014 "),aI=a("a"),V5o=o("MegatronBertForCausalLM"),X5o=o(" (MegatronBert model)"),z5o=l(),Gu=a("li"),rne=a("strong"),Q5o=o("openai-gpt"),W5o=o(" \u2014 "),nI=a("a"),H5o=o("OpenAIGPTLMHeadModel"),U5o=o(" (OpenAI GPT model)"),J5o=l(),Ou=a("li"),tne=a("strong"),Y5o=o("pegasus"),K5o=o(" \u2014 "),sI=a("a"),Z5o=o("PegasusForCausalLM"),e2o=o(" (Pegasus model)"),o2o=l(),Vu=a("li"),ane=a("strong"),r2o=o("plbart"),t2o=o(" \u2014 "),lI=a("a"),a2o=o("PLBartForCausalLM"),n2o=o(" (PLBart model)"),s2o=l(),Xu=a("li"),nne=a("strong"),l2o=o("prophetnet"),i2o=o(" \u2014 "),iI=a("a"),d2o=o("ProphetNetForCausalLM"),c2o=o(" (ProphetNet model)"),f2o=l(),zu=a("li"),sne=a("strong"),m2o=o("qdqbert"),g2o=o(" \u2014 "),dI=a("a"),h2o=o("QDQBertLMHeadModel"),p2o=o(" (QDQBert model)"),_2o=l(),Qu=a("li"),lne=a("strong"),u2o=o("reformer"),b2o=o(" \u2014 "),cI=a("a"),F2o=o("ReformerModelWithLMHead"),v2o=o(" (Reformer model)"),T2o=l(),Wu=a("li"),ine=a("strong"),M2o=o("rembert"),E2o=o(" \u2014 "),fI=a("a"),C2o=o("RemBertForCausalLM"),w2o=o(" (RemBERT model)"),A2o=l(),Hu=a("li"),dne=a("strong"),y2o=o("roberta"),L2o=o(" \u2014 "),mI=a("a"),x2o=o("RobertaForCausalLM"),k2o=o(" (RoBERTa model)"),S2o=l(),Uu=a("li"),cne=a("strong"),R2o=o("roformer"),B2o=o(" \u2014 "),gI=a("a"),P2o=o("RoFormerForCausalLM"),$2o=o(" (RoFormer model)"),I2o=l(),Ju=a("li"),fne=a("strong"),q2o=o("speech_to_text_2"),N2o=o(" \u2014 "),hI=a("a"),j2o=o("Speech2Text2ForCausalLM"),D2o=o(" (Speech2Text2 model)"),G2o=l(),Yu=a("li"),mne=a("strong"),O2o=o("transfo-xl"),V2o=o(" \u2014 "),pI=a("a"),X2o=o("TransfoXLLMHeadModel"),z2o=o(" (Transformer-XL model)"),Q2o=l(),Ku=a("li"),gne=a("strong"),W2o=o("trocr"),H2o=o(" \u2014 "),_I=a("a"),U2o=o("TrOCRForCausalLM"),J2o=o(" (TrOCR model)"),Y2o=l(),Zu=a("li"),hne=a("strong"),K2o=o("xglm"),Z2o=o(" \u2014 "),uI=a("a"),eFo=o("XGLMForCausalLM"),oFo=o(" (XGLM model)"),rFo=l(),e6=a("li"),pne=a("strong"),tFo=o("xlm"),aFo=o(" \u2014 "),bI=a("a"),nFo=o("XLMWithLMHeadModel"),sFo=o(" (XLM model)"),lFo=l(),o6=a("li"),_ne=a("strong"),iFo=o("xlm-prophetnet"),dFo=o(" \u2014 "),FI=a("a"),cFo=o("XLMProphetNetForCausalLM"),fFo=o(" (XLMProphetNet model)"),mFo=l(),r6=a("li"),une=a("strong"),gFo=o("xlm-roberta"),hFo=o(" \u2014 "),vI=a("a"),pFo=o("XLMRobertaForCausalLM"),_Fo=o(" (XLM-RoBERTa model)"),uFo=l(),t6=a("li"),bne=a("strong"),bFo=o("xlm-roberta-xl"),FFo=o(" \u2014 "),TI=a("a"),vFo=o("XLMRobertaXLForCausalLM"),TFo=o(" (XLM-RoBERTa-XL model)"),MFo=l(),a6=a("li"),Fne=a("strong"),EFo=o("xlnet"),CFo=o(" \u2014 "),MI=a("a"),wFo=o("XLNetLMHeadModel"),AFo=o(" (XLNet model)"),yFo=l(),n6=a("p"),LFo=o("The model is set in evaluation mode by default using "),vne=a("code"),xFo=o("model.eval()"),kFo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Tne=a("code"),SFo=o("model.train()"),RFo=l(),Mne=a("p"),BFo=o("Examples:"),PFo=l(),f(y3.$$.fragment),JRe=l(),nd=a("h2"),s6=a("a"),Ene=a("span"),f(L3.$$.fragment),$Fo=l(),Cne=a("span"),IFo=o("AutoModelForMaskedLM"),YRe=l(),Zo=a("div"),f(x3.$$.fragment),qFo=l(),sd=a("p"),NFo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),EI=a("a"),jFo=o("from_pretrained()"),DFo=o(" class method or the "),CI=a("a"),GFo=o("from_config()"),OFo=o(` class
method.`),VFo=l(),k3=a("p"),XFo=o("This class cannot be instantiated directly using "),wne=a("code"),zFo=o("__init__()"),QFo=o(" (throws an error)."),WFo=l(),Wr=a("div"),f(S3.$$.fragment),HFo=l(),Ane=a("p"),UFo=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),JFo=l(),ld=a("p"),YFo=o(`Note:
Loading a model from its configuration file does `),yne=a("strong"),KFo=o("not"),ZFo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wI=a("a"),evo=o("from_pretrained()"),ovo=o(" to load the model weights."),rvo=l(),Lne=a("p"),tvo=o("Examples:"),avo=l(),f(R3.$$.fragment),nvo=l(),De=a("div"),f(B3.$$.fragment),svo=l(),xne=a("p"),lvo=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),ivo=l(),Wa=a("p"),dvo=o("The model class to instantiate is selected based on the "),kne=a("code"),cvo=o("model_type"),fvo=o(` property of the config object (either
passed as an argument or loaded from `),Sne=a("code"),mvo=o("pretrained_model_name_or_path"),gvo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rne=a("code"),hvo=o("pretrained_model_name_or_path"),pvo=o(":"),_vo=l(),I=a("ul"),l6=a("li"),Bne=a("strong"),uvo=o("albert"),bvo=o(" \u2014 "),AI=a("a"),Fvo=o("AlbertForMaskedLM"),vvo=o(" (ALBERT model)"),Tvo=l(),i6=a("li"),Pne=a("strong"),Mvo=o("bart"),Evo=o(" \u2014 "),yI=a("a"),Cvo=o("BartForConditionalGeneration"),wvo=o(" (BART model)"),Avo=l(),d6=a("li"),$ne=a("strong"),yvo=o("bert"),Lvo=o(" \u2014 "),LI=a("a"),xvo=o("BertForMaskedLM"),kvo=o(" (BERT model)"),Svo=l(),c6=a("li"),Ine=a("strong"),Rvo=o("big_bird"),Bvo=o(" \u2014 "),xI=a("a"),Pvo=o("BigBirdForMaskedLM"),$vo=o(" (BigBird model)"),Ivo=l(),f6=a("li"),qne=a("strong"),qvo=o("camembert"),Nvo=o(" \u2014 "),kI=a("a"),jvo=o("CamembertForMaskedLM"),Dvo=o(" (CamemBERT model)"),Gvo=l(),m6=a("li"),Nne=a("strong"),Ovo=o("convbert"),Vvo=o(" \u2014 "),SI=a("a"),Xvo=o("ConvBertForMaskedLM"),zvo=o(" (ConvBERT model)"),Qvo=l(),g6=a("li"),jne=a("strong"),Wvo=o("data2vec-text"),Hvo=o(" \u2014 "),RI=a("a"),Uvo=o("Data2VecTextForMaskedLM"),Jvo=o(" (Data2VecText model)"),Yvo=l(),h6=a("li"),Dne=a("strong"),Kvo=o("deberta"),Zvo=o(" \u2014 "),BI=a("a"),eTo=o("DebertaForMaskedLM"),oTo=o(" (DeBERTa model)"),rTo=l(),p6=a("li"),Gne=a("strong"),tTo=o("deberta-v2"),aTo=o(" \u2014 "),PI=a("a"),nTo=o("DebertaV2ForMaskedLM"),sTo=o(" (DeBERTa-v2 model)"),lTo=l(),_6=a("li"),One=a("strong"),iTo=o("distilbert"),dTo=o(" \u2014 "),$I=a("a"),cTo=o("DistilBertForMaskedLM"),fTo=o(" (DistilBERT model)"),mTo=l(),u6=a("li"),Vne=a("strong"),gTo=o("electra"),hTo=o(" \u2014 "),II=a("a"),pTo=o("ElectraForMaskedLM"),_To=o(" (ELECTRA model)"),uTo=l(),b6=a("li"),Xne=a("strong"),bTo=o("flaubert"),FTo=o(" \u2014 "),qI=a("a"),vTo=o("FlaubertWithLMHeadModel"),TTo=o(" (FlauBERT model)"),MTo=l(),F6=a("li"),zne=a("strong"),ETo=o("fnet"),CTo=o(" \u2014 "),NI=a("a"),wTo=o("FNetForMaskedLM"),ATo=o(" (FNet model)"),yTo=l(),v6=a("li"),Qne=a("strong"),LTo=o("funnel"),xTo=o(" \u2014 "),jI=a("a"),kTo=o("FunnelForMaskedLM"),STo=o(" (Funnel Transformer model)"),RTo=l(),T6=a("li"),Wne=a("strong"),BTo=o("gpt_neox"),PTo=o(" \u2014 "),Hne=a("code"),$To=o("GPTNeoXForMaskedLM"),ITo=o(" (GPTNeoX model)"),qTo=l(),M6=a("li"),Une=a("strong"),NTo=o("ibert"),jTo=o(" \u2014 "),DI=a("a"),DTo=o("IBertForMaskedLM"),GTo=o(" (I-BERT model)"),OTo=l(),E6=a("li"),Jne=a("strong"),VTo=o("layoutlm"),XTo=o(" \u2014 "),GI=a("a"),zTo=o("LayoutLMForMaskedLM"),QTo=o(" (LayoutLM model)"),WTo=l(),C6=a("li"),Yne=a("strong"),HTo=o("longformer"),UTo=o(" \u2014 "),OI=a("a"),JTo=o("LongformerForMaskedLM"),YTo=o(" (Longformer model)"),KTo=l(),w6=a("li"),Kne=a("strong"),ZTo=o("mbart"),e9o=o(" \u2014 "),VI=a("a"),o9o=o("MBartForConditionalGeneration"),r9o=o(" (mBART model)"),t9o=l(),A6=a("li"),Zne=a("strong"),a9o=o("megatron-bert"),n9o=o(" \u2014 "),XI=a("a"),s9o=o("MegatronBertForMaskedLM"),l9o=o(" (MegatronBert model)"),i9o=l(),y6=a("li"),ese=a("strong"),d9o=o("mobilebert"),c9o=o(" \u2014 "),zI=a("a"),f9o=o("MobileBertForMaskedLM"),m9o=o(" (MobileBERT model)"),g9o=l(),L6=a("li"),ose=a("strong"),h9o=o("mpnet"),p9o=o(" \u2014 "),QI=a("a"),_9o=o("MPNetForMaskedLM"),u9o=o(" (MPNet model)"),b9o=l(),x6=a("li"),rse=a("strong"),F9o=o("nystromformer"),v9o=o(" \u2014 "),WI=a("a"),T9o=o("NystromformerForMaskedLM"),M9o=o(" (Nystromformer model)"),E9o=l(),k6=a("li"),tse=a("strong"),C9o=o("perceiver"),w9o=o(" \u2014 "),HI=a("a"),A9o=o("PerceiverForMaskedLM"),y9o=o(" (Perceiver model)"),L9o=l(),S6=a("li"),ase=a("strong"),x9o=o("qdqbert"),k9o=o(" \u2014 "),UI=a("a"),S9o=o("QDQBertForMaskedLM"),R9o=o(" (QDQBert model)"),B9o=l(),R6=a("li"),nse=a("strong"),P9o=o("reformer"),$9o=o(" \u2014 "),JI=a("a"),I9o=o("ReformerForMaskedLM"),q9o=o(" (Reformer model)"),N9o=l(),B6=a("li"),sse=a("strong"),j9o=o("rembert"),D9o=o(" \u2014 "),YI=a("a"),G9o=o("RemBertForMaskedLM"),O9o=o(" (RemBERT model)"),V9o=l(),P6=a("li"),lse=a("strong"),X9o=o("roberta"),z9o=o(" \u2014 "),KI=a("a"),Q9o=o("RobertaForMaskedLM"),W9o=o(" (RoBERTa model)"),H9o=l(),$6=a("li"),ise=a("strong"),U9o=o("roformer"),J9o=o(" \u2014 "),ZI=a("a"),Y9o=o("RoFormerForMaskedLM"),K9o=o(" (RoFormer model)"),Z9o=l(),I6=a("li"),dse=a("strong"),eMo=o("squeezebert"),oMo=o(" \u2014 "),eq=a("a"),rMo=o("SqueezeBertForMaskedLM"),tMo=o(" (SqueezeBERT model)"),aMo=l(),q6=a("li"),cse=a("strong"),nMo=o("tapas"),sMo=o(" \u2014 "),oq=a("a"),lMo=o("TapasForMaskedLM"),iMo=o(" (TAPAS model)"),dMo=l(),N6=a("li"),fse=a("strong"),cMo=o("wav2vec2"),fMo=o(" \u2014 "),mse=a("code"),mMo=o("Wav2Vec2ForMaskedLM"),gMo=o(" (Wav2Vec2 model)"),hMo=l(),j6=a("li"),gse=a("strong"),pMo=o("xlm"),_Mo=o(" \u2014 "),rq=a("a"),uMo=o("XLMWithLMHeadModel"),bMo=o(" (XLM model)"),FMo=l(),D6=a("li"),hse=a("strong"),vMo=o("xlm-roberta"),TMo=o(" \u2014 "),tq=a("a"),MMo=o("XLMRobertaForMaskedLM"),EMo=o(" (XLM-RoBERTa model)"),CMo=l(),G6=a("li"),pse=a("strong"),wMo=o("xlm-roberta-xl"),AMo=o(" \u2014 "),aq=a("a"),yMo=o("XLMRobertaXLForMaskedLM"),LMo=o(" (XLM-RoBERTa-XL model)"),xMo=l(),O6=a("li"),_se=a("strong"),kMo=o("yoso"),SMo=o(" \u2014 "),nq=a("a"),RMo=o("YosoForMaskedLM"),BMo=o(" (YOSO model)"),PMo=l(),V6=a("p"),$Mo=o("The model is set in evaluation mode by default using "),use=a("code"),IMo=o("model.eval()"),qMo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),bse=a("code"),NMo=o("model.train()"),jMo=l(),Fse=a("p"),DMo=o("Examples:"),GMo=l(),f(P3.$$.fragment),KRe=l(),id=a("h2"),X6=a("a"),vse=a("span"),f($3.$$.fragment),OMo=l(),Tse=a("span"),VMo=o("AutoModelForSeq2SeqLM"),ZRe=l(),er=a("div"),f(I3.$$.fragment),XMo=l(),dd=a("p"),zMo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),sq=a("a"),QMo=o("from_pretrained()"),WMo=o(" class method or the "),lq=a("a"),HMo=o("from_config()"),UMo=o(` class
method.`),JMo=l(),q3=a("p"),YMo=o("This class cannot be instantiated directly using "),Mse=a("code"),KMo=o("__init__()"),ZMo=o(" (throws an error)."),e4o=l(),Hr=a("div"),f(N3.$$.fragment),o4o=l(),Ese=a("p"),r4o=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),t4o=l(),cd=a("p"),a4o=o(`Note:
Loading a model from its configuration file does `),Cse=a("strong"),n4o=o("not"),s4o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),iq=a("a"),l4o=o("from_pretrained()"),i4o=o(" to load the model weights."),d4o=l(),wse=a("p"),c4o=o("Examples:"),f4o=l(),f(j3.$$.fragment),m4o=l(),Ge=a("div"),f(D3.$$.fragment),g4o=l(),Ase=a("p"),h4o=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),p4o=l(),Ha=a("p"),_4o=o("The model class to instantiate is selected based on the "),yse=a("code"),u4o=o("model_type"),b4o=o(` property of the config object (either
passed as an argument or loaded from `),Lse=a("code"),F4o=o("pretrained_model_name_or_path"),v4o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xse=a("code"),T4o=o("pretrained_model_name_or_path"),M4o=o(":"),E4o=l(),se=a("ul"),z6=a("li"),kse=a("strong"),C4o=o("bart"),w4o=o(" \u2014 "),dq=a("a"),A4o=o("BartForConditionalGeneration"),y4o=o(" (BART model)"),L4o=l(),Q6=a("li"),Sse=a("strong"),x4o=o("bigbird_pegasus"),k4o=o(" \u2014 "),cq=a("a"),S4o=o("BigBirdPegasusForConditionalGeneration"),R4o=o(" (BigBirdPegasus model)"),B4o=l(),W6=a("li"),Rse=a("strong"),P4o=o("blenderbot"),$4o=o(" \u2014 "),fq=a("a"),I4o=o("BlenderbotForConditionalGeneration"),q4o=o(" (Blenderbot model)"),N4o=l(),H6=a("li"),Bse=a("strong"),j4o=o("blenderbot-small"),D4o=o(" \u2014 "),mq=a("a"),G4o=o("BlenderbotSmallForConditionalGeneration"),O4o=o(" (BlenderbotSmall model)"),V4o=l(),U6=a("li"),Pse=a("strong"),X4o=o("encoder-decoder"),z4o=o(" \u2014 "),gq=a("a"),Q4o=o("EncoderDecoderModel"),W4o=o(" (Encoder decoder model)"),H4o=l(),J6=a("li"),$se=a("strong"),U4o=o("fsmt"),J4o=o(" \u2014 "),hq=a("a"),Y4o=o("FSMTForConditionalGeneration"),K4o=o(" (FairSeq Machine-Translation model)"),Z4o=l(),Y6=a("li"),Ise=a("strong"),eEo=o("led"),oEo=o(" \u2014 "),pq=a("a"),rEo=o("LEDForConditionalGeneration"),tEo=o(" (LED model)"),aEo=l(),K6=a("li"),qse=a("strong"),nEo=o("m2m_100"),sEo=o(" \u2014 "),_q=a("a"),lEo=o("M2M100ForConditionalGeneration"),iEo=o(" (M2M100 model)"),dEo=l(),Z6=a("li"),Nse=a("strong"),cEo=o("marian"),fEo=o(" \u2014 "),uq=a("a"),mEo=o("MarianMTModel"),gEo=o(" (Marian model)"),hEo=l(),e1=a("li"),jse=a("strong"),pEo=o("mbart"),_Eo=o(" \u2014 "),bq=a("a"),uEo=o("MBartForConditionalGeneration"),bEo=o(" (mBART model)"),FEo=l(),o1=a("li"),Dse=a("strong"),vEo=o("mt5"),TEo=o(" \u2014 "),Fq=a("a"),MEo=o("MT5ForConditionalGeneration"),EEo=o(" (mT5 model)"),CEo=l(),r1=a("li"),Gse=a("strong"),wEo=o("pegasus"),AEo=o(" \u2014 "),vq=a("a"),yEo=o("PegasusForConditionalGeneration"),LEo=o(" (Pegasus model)"),xEo=l(),t1=a("li"),Ose=a("strong"),kEo=o("plbart"),SEo=o(" \u2014 "),Tq=a("a"),REo=o("PLBartForConditionalGeneration"),BEo=o(" (PLBart model)"),PEo=l(),a1=a("li"),Vse=a("strong"),$Eo=o("prophetnet"),IEo=o(" \u2014 "),Mq=a("a"),qEo=o("ProphetNetForConditionalGeneration"),NEo=o(" (ProphetNet model)"),jEo=l(),n1=a("li"),Xse=a("strong"),DEo=o("t5"),GEo=o(" \u2014 "),Eq=a("a"),OEo=o("T5ForConditionalGeneration"),VEo=o(" (T5 model)"),XEo=l(),s1=a("li"),zse=a("strong"),zEo=o("xlm-prophetnet"),QEo=o(" \u2014 "),Cq=a("a"),WEo=o("XLMProphetNetForConditionalGeneration"),HEo=o(" (XLMProphetNet model)"),UEo=l(),l1=a("p"),JEo=o("The model is set in evaluation mode by default using "),Qse=a("code"),YEo=o("model.eval()"),KEo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Wse=a("code"),ZEo=o("model.train()"),eCo=l(),Hse=a("p"),oCo=o("Examples:"),rCo=l(),f(G3.$$.fragment),eBe=l(),fd=a("h2"),i1=a("a"),Use=a("span"),f(O3.$$.fragment),tCo=l(),Jse=a("span"),aCo=o("AutoModelForSequenceClassification"),oBe=l(),or=a("div"),f(V3.$$.fragment),nCo=l(),md=a("p"),sCo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),wq=a("a"),lCo=o("from_pretrained()"),iCo=o(" class method or the "),Aq=a("a"),dCo=o("from_config()"),cCo=o(` class
method.`),fCo=l(),X3=a("p"),mCo=o("This class cannot be instantiated directly using "),Yse=a("code"),gCo=o("__init__()"),hCo=o(" (throws an error)."),pCo=l(),Ur=a("div"),f(z3.$$.fragment),_Co=l(),Kse=a("p"),uCo=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),bCo=l(),gd=a("p"),FCo=o(`Note:
Loading a model from its configuration file does `),Zse=a("strong"),vCo=o("not"),TCo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yq=a("a"),MCo=o("from_pretrained()"),ECo=o(" to load the model weights."),CCo=l(),ele=a("p"),wCo=o("Examples:"),ACo=l(),f(Q3.$$.fragment),yCo=l(),Oe=a("div"),f(W3.$$.fragment),LCo=l(),ole=a("p"),xCo=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),kCo=l(),Ua=a("p"),SCo=o("The model class to instantiate is selected based on the "),rle=a("code"),RCo=o("model_type"),BCo=o(` property of the config object (either
passed as an argument or loaded from `),tle=a("code"),PCo=o("pretrained_model_name_or_path"),$Co=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ale=a("code"),ICo=o("pretrained_model_name_or_path"),qCo=o(":"),NCo=l(),y=a("ul"),d1=a("li"),nle=a("strong"),jCo=o("albert"),DCo=o(" \u2014 "),Lq=a("a"),GCo=o("AlbertForSequenceClassification"),OCo=o(" (ALBERT model)"),VCo=l(),c1=a("li"),sle=a("strong"),XCo=o("bart"),zCo=o(" \u2014 "),xq=a("a"),QCo=o("BartForSequenceClassification"),WCo=o(" (BART model)"),HCo=l(),f1=a("li"),lle=a("strong"),UCo=o("bert"),JCo=o(" \u2014 "),kq=a("a"),YCo=o("BertForSequenceClassification"),KCo=o(" (BERT model)"),ZCo=l(),m1=a("li"),ile=a("strong"),e3o=o("big_bird"),o3o=o(" \u2014 "),Sq=a("a"),r3o=o("BigBirdForSequenceClassification"),t3o=o(" (BigBird model)"),a3o=l(),g1=a("li"),dle=a("strong"),n3o=o("bigbird_pegasus"),s3o=o(" \u2014 "),Rq=a("a"),l3o=o("BigBirdPegasusForSequenceClassification"),i3o=o(" (BigBirdPegasus model)"),d3o=l(),h1=a("li"),cle=a("strong"),c3o=o("camembert"),f3o=o(" \u2014 "),Bq=a("a"),m3o=o("CamembertForSequenceClassification"),g3o=o(" (CamemBERT model)"),h3o=l(),p1=a("li"),fle=a("strong"),p3o=o("canine"),_3o=o(" \u2014 "),Pq=a("a"),u3o=o("CanineForSequenceClassification"),b3o=o(" (Canine model)"),F3o=l(),_1=a("li"),mle=a("strong"),v3o=o("convbert"),T3o=o(" \u2014 "),$q=a("a"),M3o=o("ConvBertForSequenceClassification"),E3o=o(" (ConvBERT model)"),C3o=l(),u1=a("li"),gle=a("strong"),w3o=o("ctrl"),A3o=o(" \u2014 "),Iq=a("a"),y3o=o("CTRLForSequenceClassification"),L3o=o(" (CTRL model)"),x3o=l(),b1=a("li"),hle=a("strong"),k3o=o("data2vec-text"),S3o=o(" \u2014 "),qq=a("a"),R3o=o("Data2VecTextForSequenceClassification"),B3o=o(" (Data2VecText model)"),P3o=l(),F1=a("li"),ple=a("strong"),$3o=o("deberta"),I3o=o(" \u2014 "),Nq=a("a"),q3o=o("DebertaForSequenceClassification"),N3o=o(" (DeBERTa model)"),j3o=l(),v1=a("li"),_le=a("strong"),D3o=o("deberta-v2"),G3o=o(" \u2014 "),jq=a("a"),O3o=o("DebertaV2ForSequenceClassification"),V3o=o(" (DeBERTa-v2 model)"),X3o=l(),T1=a("li"),ule=a("strong"),z3o=o("distilbert"),Q3o=o(" \u2014 "),Dq=a("a"),W3o=o("DistilBertForSequenceClassification"),H3o=o(" (DistilBERT model)"),U3o=l(),M1=a("li"),ble=a("strong"),J3o=o("electra"),Y3o=o(" \u2014 "),Gq=a("a"),K3o=o("ElectraForSequenceClassification"),Z3o=o(" (ELECTRA model)"),ewo=l(),E1=a("li"),Fle=a("strong"),owo=o("flaubert"),rwo=o(" \u2014 "),Oq=a("a"),two=o("FlaubertForSequenceClassification"),awo=o(" (FlauBERT model)"),nwo=l(),C1=a("li"),vle=a("strong"),swo=o("fnet"),lwo=o(" \u2014 "),Vq=a("a"),iwo=o("FNetForSequenceClassification"),dwo=o(" (FNet model)"),cwo=l(),w1=a("li"),Tle=a("strong"),fwo=o("funnel"),mwo=o(" \u2014 "),Xq=a("a"),gwo=o("FunnelForSequenceClassification"),hwo=o(" (Funnel Transformer model)"),pwo=l(),A1=a("li"),Mle=a("strong"),_wo=o("gpt2"),uwo=o(" \u2014 "),zq=a("a"),bwo=o("GPT2ForSequenceClassification"),Fwo=o(" (OpenAI GPT-2 model)"),vwo=l(),y1=a("li"),Ele=a("strong"),Two=o("gpt_neo"),Mwo=o(" \u2014 "),Qq=a("a"),Ewo=o("GPTNeoForSequenceClassification"),Cwo=o(" (GPT Neo model)"),wwo=l(),L1=a("li"),Cle=a("strong"),Awo=o("gpt_neox"),ywo=o(" \u2014 "),wle=a("code"),Lwo=o("GPTNeoXForSequenceClassification"),xwo=o(" (GPTNeoX model)"),kwo=l(),x1=a("li"),Ale=a("strong"),Swo=o("gptj"),Rwo=o(" \u2014 "),Wq=a("a"),Bwo=o("GPTJForSequenceClassification"),Pwo=o(" (GPT-J model)"),$wo=l(),k1=a("li"),yle=a("strong"),Iwo=o("ibert"),qwo=o(" \u2014 "),Hq=a("a"),Nwo=o("IBertForSequenceClassification"),jwo=o(" (I-BERT model)"),Dwo=l(),S1=a("li"),Lle=a("strong"),Gwo=o("layoutlm"),Owo=o(" \u2014 "),Uq=a("a"),Vwo=o("LayoutLMForSequenceClassification"),Xwo=o(" (LayoutLM model)"),zwo=l(),R1=a("li"),xle=a("strong"),Qwo=o("layoutlmv2"),Wwo=o(" \u2014 "),Jq=a("a"),Hwo=o("LayoutLMv2ForSequenceClassification"),Uwo=o(" (LayoutLMv2 model)"),Jwo=l(),B1=a("li"),kle=a("strong"),Ywo=o("led"),Kwo=o(" \u2014 "),Yq=a("a"),Zwo=o("LEDForSequenceClassification"),eAo=o(" (LED model)"),oAo=l(),P1=a("li"),Sle=a("strong"),rAo=o("longformer"),tAo=o(" \u2014 "),Kq=a("a"),aAo=o("LongformerForSequenceClassification"),nAo=o(" (Longformer model)"),sAo=l(),$1=a("li"),Rle=a("strong"),lAo=o("mbart"),iAo=o(" \u2014 "),Zq=a("a"),dAo=o("MBartForSequenceClassification"),cAo=o(" (mBART model)"),fAo=l(),I1=a("li"),Ble=a("strong"),mAo=o("megatron-bert"),gAo=o(" \u2014 "),eN=a("a"),hAo=o("MegatronBertForSequenceClassification"),pAo=o(" (MegatronBert model)"),_Ao=l(),q1=a("li"),Ple=a("strong"),uAo=o("mobilebert"),bAo=o(" \u2014 "),oN=a("a"),FAo=o("MobileBertForSequenceClassification"),vAo=o(" (MobileBERT model)"),TAo=l(),N1=a("li"),$le=a("strong"),MAo=o("mpnet"),EAo=o(" \u2014 "),rN=a("a"),CAo=o("MPNetForSequenceClassification"),wAo=o(" (MPNet model)"),AAo=l(),j1=a("li"),Ile=a("strong"),yAo=o("nystromformer"),LAo=o(" \u2014 "),tN=a("a"),xAo=o("NystromformerForSequenceClassification"),kAo=o(" (Nystromformer model)"),SAo=l(),D1=a("li"),qle=a("strong"),RAo=o("openai-gpt"),BAo=o(" \u2014 "),aN=a("a"),PAo=o("OpenAIGPTForSequenceClassification"),$Ao=o(" (OpenAI GPT model)"),IAo=l(),G1=a("li"),Nle=a("strong"),qAo=o("perceiver"),NAo=o(" \u2014 "),nN=a("a"),jAo=o("PerceiverForSequenceClassification"),DAo=o(" (Perceiver model)"),GAo=l(),O1=a("li"),jle=a("strong"),OAo=o("plbart"),VAo=o(" \u2014 "),sN=a("a"),XAo=o("PLBartForSequenceClassification"),zAo=o(" (PLBart model)"),QAo=l(),V1=a("li"),Dle=a("strong"),WAo=o("qdqbert"),HAo=o(" \u2014 "),lN=a("a"),UAo=o("QDQBertForSequenceClassification"),JAo=o(" (QDQBert model)"),YAo=l(),X1=a("li"),Gle=a("strong"),KAo=o("reformer"),ZAo=o(" \u2014 "),iN=a("a"),e0o=o("ReformerForSequenceClassification"),o0o=o(" (Reformer model)"),r0o=l(),z1=a("li"),Ole=a("strong"),t0o=o("rembert"),a0o=o(" \u2014 "),dN=a("a"),n0o=o("RemBertForSequenceClassification"),s0o=o(" (RemBERT model)"),l0o=l(),Q1=a("li"),Vle=a("strong"),i0o=o("roberta"),d0o=o(" \u2014 "),cN=a("a"),c0o=o("RobertaForSequenceClassification"),f0o=o(" (RoBERTa model)"),m0o=l(),W1=a("li"),Xle=a("strong"),g0o=o("roformer"),h0o=o(" \u2014 "),fN=a("a"),p0o=o("RoFormerForSequenceClassification"),_0o=o(" (RoFormer model)"),u0o=l(),H1=a("li"),zle=a("strong"),b0o=o("squeezebert"),F0o=o(" \u2014 "),mN=a("a"),v0o=o("SqueezeBertForSequenceClassification"),T0o=o(" (SqueezeBERT model)"),M0o=l(),U1=a("li"),Qle=a("strong"),E0o=o("tapas"),C0o=o(" \u2014 "),gN=a("a"),w0o=o("TapasForSequenceClassification"),A0o=o(" (TAPAS model)"),y0o=l(),J1=a("li"),Wle=a("strong"),L0o=o("transfo-xl"),x0o=o(" \u2014 "),hN=a("a"),k0o=o("TransfoXLForSequenceClassification"),S0o=o(" (Transformer-XL model)"),R0o=l(),Y1=a("li"),Hle=a("strong"),B0o=o("xlm"),P0o=o(" \u2014 "),pN=a("a"),$0o=o("XLMForSequenceClassification"),I0o=o(" (XLM model)"),q0o=l(),K1=a("li"),Ule=a("strong"),N0o=o("xlm-roberta"),j0o=o(" \u2014 "),_N=a("a"),D0o=o("XLMRobertaForSequenceClassification"),G0o=o(" (XLM-RoBERTa model)"),O0o=l(),Z1=a("li"),Jle=a("strong"),V0o=o("xlm-roberta-xl"),X0o=o(" \u2014 "),uN=a("a"),z0o=o("XLMRobertaXLForSequenceClassification"),Q0o=o(" (XLM-RoBERTa-XL model)"),W0o=l(),eb=a("li"),Yle=a("strong"),H0o=o("xlnet"),U0o=o(" \u2014 "),bN=a("a"),J0o=o("XLNetForSequenceClassification"),Y0o=o(" (XLNet model)"),K0o=l(),ob=a("li"),Kle=a("strong"),Z0o=o("yoso"),eyo=o(" \u2014 "),FN=a("a"),oyo=o("YosoForSequenceClassification"),ryo=o(" (YOSO model)"),tyo=l(),rb=a("p"),ayo=o("The model is set in evaluation mode by default using "),Zle=a("code"),nyo=o("model.eval()"),syo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),eie=a("code"),lyo=o("model.train()"),iyo=l(),oie=a("p"),dyo=o("Examples:"),cyo=l(),f(H3.$$.fragment),rBe=l(),hd=a("h2"),tb=a("a"),rie=a("span"),f(U3.$$.fragment),fyo=l(),tie=a("span"),myo=o("AutoModelForMultipleChoice"),tBe=l(),rr=a("div"),f(J3.$$.fragment),gyo=l(),pd=a("p"),hyo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),vN=a("a"),pyo=o("from_pretrained()"),_yo=o(" class method or the "),TN=a("a"),uyo=o("from_config()"),byo=o(` class
method.`),Fyo=l(),Y3=a("p"),vyo=o("This class cannot be instantiated directly using "),aie=a("code"),Tyo=o("__init__()"),Myo=o(" (throws an error)."),Eyo=l(),Jr=a("div"),f(K3.$$.fragment),Cyo=l(),nie=a("p"),wyo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Ayo=l(),_d=a("p"),yyo=o(`Note:
Loading a model from its configuration file does `),sie=a("strong"),Lyo=o("not"),xyo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),MN=a("a"),kyo=o("from_pretrained()"),Syo=o(" to load the model weights."),Ryo=l(),lie=a("p"),Byo=o("Examples:"),Pyo=l(),f(Z3.$$.fragment),$yo=l(),Ve=a("div"),f(ew.$$.fragment),Iyo=l(),iie=a("p"),qyo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Nyo=l(),Ja=a("p"),jyo=o("The model class to instantiate is selected based on the "),die=a("code"),Dyo=o("model_type"),Gyo=o(` property of the config object (either
passed as an argument or loaded from `),cie=a("code"),Oyo=o("pretrained_model_name_or_path"),Vyo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fie=a("code"),Xyo=o("pretrained_model_name_or_path"),zyo=o(":"),Qyo=l(),G=a("ul"),ab=a("li"),mie=a("strong"),Wyo=o("albert"),Hyo=o(" \u2014 "),EN=a("a"),Uyo=o("AlbertForMultipleChoice"),Jyo=o(" (ALBERT model)"),Yyo=l(),nb=a("li"),gie=a("strong"),Kyo=o("bert"),Zyo=o(" \u2014 "),CN=a("a"),eLo=o("BertForMultipleChoice"),oLo=o(" (BERT model)"),rLo=l(),sb=a("li"),hie=a("strong"),tLo=o("big_bird"),aLo=o(" \u2014 "),wN=a("a"),nLo=o("BigBirdForMultipleChoice"),sLo=o(" (BigBird model)"),lLo=l(),lb=a("li"),pie=a("strong"),iLo=o("camembert"),dLo=o(" \u2014 "),AN=a("a"),cLo=o("CamembertForMultipleChoice"),fLo=o(" (CamemBERT model)"),mLo=l(),ib=a("li"),_ie=a("strong"),gLo=o("canine"),hLo=o(" \u2014 "),yN=a("a"),pLo=o("CanineForMultipleChoice"),_Lo=o(" (Canine model)"),uLo=l(),db=a("li"),uie=a("strong"),bLo=o("convbert"),FLo=o(" \u2014 "),LN=a("a"),vLo=o("ConvBertForMultipleChoice"),TLo=o(" (ConvBERT model)"),MLo=l(),cb=a("li"),bie=a("strong"),ELo=o("data2vec-text"),CLo=o(" \u2014 "),xN=a("a"),wLo=o("Data2VecTextForMultipleChoice"),ALo=o(" (Data2VecText model)"),yLo=l(),fb=a("li"),Fie=a("strong"),LLo=o("distilbert"),xLo=o(" \u2014 "),kN=a("a"),kLo=o("DistilBertForMultipleChoice"),SLo=o(" (DistilBERT model)"),RLo=l(),mb=a("li"),vie=a("strong"),BLo=o("electra"),PLo=o(" \u2014 "),SN=a("a"),$Lo=o("ElectraForMultipleChoice"),ILo=o(" (ELECTRA model)"),qLo=l(),gb=a("li"),Tie=a("strong"),NLo=o("flaubert"),jLo=o(" \u2014 "),RN=a("a"),DLo=o("FlaubertForMultipleChoice"),GLo=o(" (FlauBERT model)"),OLo=l(),hb=a("li"),Mie=a("strong"),VLo=o("fnet"),XLo=o(" \u2014 "),BN=a("a"),zLo=o("FNetForMultipleChoice"),QLo=o(" (FNet model)"),WLo=l(),pb=a("li"),Eie=a("strong"),HLo=o("funnel"),ULo=o(" \u2014 "),PN=a("a"),JLo=o("FunnelForMultipleChoice"),YLo=o(" (Funnel Transformer model)"),KLo=l(),_b=a("li"),Cie=a("strong"),ZLo=o("gpt_neox"),e8o=o(" \u2014 "),wie=a("code"),o8o=o("GPTNeoXForMultipleChoice"),r8o=o(" (GPTNeoX model)"),t8o=l(),ub=a("li"),Aie=a("strong"),a8o=o("ibert"),n8o=o(" \u2014 "),$N=a("a"),s8o=o("IBertForMultipleChoice"),l8o=o(" (I-BERT model)"),i8o=l(),bb=a("li"),yie=a("strong"),d8o=o("longformer"),c8o=o(" \u2014 "),IN=a("a"),f8o=o("LongformerForMultipleChoice"),m8o=o(" (Longformer model)"),g8o=l(),Fb=a("li"),Lie=a("strong"),h8o=o("megatron-bert"),p8o=o(" \u2014 "),qN=a("a"),_8o=o("MegatronBertForMultipleChoice"),u8o=o(" (MegatronBert model)"),b8o=l(),vb=a("li"),xie=a("strong"),F8o=o("mobilebert"),v8o=o(" \u2014 "),NN=a("a"),T8o=o("MobileBertForMultipleChoice"),M8o=o(" (MobileBERT model)"),E8o=l(),Tb=a("li"),kie=a("strong"),C8o=o("mpnet"),w8o=o(" \u2014 "),jN=a("a"),A8o=o("MPNetForMultipleChoice"),y8o=o(" (MPNet model)"),L8o=l(),Mb=a("li"),Sie=a("strong"),x8o=o("nystromformer"),k8o=o(" \u2014 "),DN=a("a"),S8o=o("NystromformerForMultipleChoice"),R8o=o(" (Nystromformer model)"),B8o=l(),Eb=a("li"),Rie=a("strong"),P8o=o("qdqbert"),$8o=o(" \u2014 "),GN=a("a"),I8o=o("QDQBertForMultipleChoice"),q8o=o(" (QDQBert model)"),N8o=l(),Cb=a("li"),Bie=a("strong"),j8o=o("rembert"),D8o=o(" \u2014 "),ON=a("a"),G8o=o("RemBertForMultipleChoice"),O8o=o(" (RemBERT model)"),V8o=l(),wb=a("li"),Pie=a("strong"),X8o=o("roberta"),z8o=o(" \u2014 "),VN=a("a"),Q8o=o("RobertaForMultipleChoice"),W8o=o(" (RoBERTa model)"),H8o=l(),Ab=a("li"),$ie=a("strong"),U8o=o("roformer"),J8o=o(" \u2014 "),XN=a("a"),Y8o=o("RoFormerForMultipleChoice"),K8o=o(" (RoFormer model)"),Z8o=l(),yb=a("li"),Iie=a("strong"),e7o=o("squeezebert"),o7o=o(" \u2014 "),zN=a("a"),r7o=o("SqueezeBertForMultipleChoice"),t7o=o(" (SqueezeBERT model)"),a7o=l(),Lb=a("li"),qie=a("strong"),n7o=o("xlm"),s7o=o(" \u2014 "),QN=a("a"),l7o=o("XLMForMultipleChoice"),i7o=o(" (XLM model)"),d7o=l(),xb=a("li"),Nie=a("strong"),c7o=o("xlm-roberta"),f7o=o(" \u2014 "),WN=a("a"),m7o=o("XLMRobertaForMultipleChoice"),g7o=o(" (XLM-RoBERTa model)"),h7o=l(),kb=a("li"),jie=a("strong"),p7o=o("xlm-roberta-xl"),_7o=o(" \u2014 "),HN=a("a"),u7o=o("XLMRobertaXLForMultipleChoice"),b7o=o(" (XLM-RoBERTa-XL model)"),F7o=l(),Sb=a("li"),Die=a("strong"),v7o=o("xlnet"),T7o=o(" \u2014 "),UN=a("a"),M7o=o("XLNetForMultipleChoice"),E7o=o(" (XLNet model)"),C7o=l(),Rb=a("li"),Gie=a("strong"),w7o=o("yoso"),A7o=o(" \u2014 "),JN=a("a"),y7o=o("YosoForMultipleChoice"),L7o=o(" (YOSO model)"),x7o=l(),Bb=a("p"),k7o=o("The model is set in evaluation mode by default using "),Oie=a("code"),S7o=o("model.eval()"),R7o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Vie=a("code"),B7o=o("model.train()"),P7o=l(),Xie=a("p"),$7o=o("Examples:"),I7o=l(),f(ow.$$.fragment),aBe=l(),ud=a("h2"),Pb=a("a"),zie=a("span"),f(rw.$$.fragment),q7o=l(),Qie=a("span"),N7o=o("AutoModelForNextSentencePrediction"),nBe=l(),tr=a("div"),f(tw.$$.fragment),j7o=l(),bd=a("p"),D7o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),YN=a("a"),G7o=o("from_pretrained()"),O7o=o(" class method or the "),KN=a("a"),V7o=o("from_config()"),X7o=o(` class
method.`),z7o=l(),aw=a("p"),Q7o=o("This class cannot be instantiated directly using "),Wie=a("code"),W7o=o("__init__()"),H7o=o(" (throws an error)."),U7o=l(),Yr=a("div"),f(nw.$$.fragment),J7o=l(),Hie=a("p"),Y7o=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),K7o=l(),Fd=a("p"),Z7o=o(`Note:
Loading a model from its configuration file does `),Uie=a("strong"),exo=o("not"),oxo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ZN=a("a"),rxo=o("from_pretrained()"),txo=o(" to load the model weights."),axo=l(),Jie=a("p"),nxo=o("Examples:"),sxo=l(),f(sw.$$.fragment),lxo=l(),Xe=a("div"),f(lw.$$.fragment),ixo=l(),Yie=a("p"),dxo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),cxo=l(),Ya=a("p"),fxo=o("The model class to instantiate is selected based on the "),Kie=a("code"),mxo=o("model_type"),gxo=o(` property of the config object (either
passed as an argument or loaded from `),Zie=a("code"),hxo=o("pretrained_model_name_or_path"),pxo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ede=a("code"),_xo=o("pretrained_model_name_or_path"),uxo=o(":"),bxo=l(),da=a("ul"),$b=a("li"),ode=a("strong"),Fxo=o("bert"),vxo=o(" \u2014 "),ej=a("a"),Txo=o("BertForNextSentencePrediction"),Mxo=o(" (BERT model)"),Exo=l(),Ib=a("li"),rde=a("strong"),Cxo=o("fnet"),wxo=o(" \u2014 "),oj=a("a"),Axo=o("FNetForNextSentencePrediction"),yxo=o(" (FNet model)"),Lxo=l(),qb=a("li"),tde=a("strong"),xxo=o("megatron-bert"),kxo=o(" \u2014 "),rj=a("a"),Sxo=o("MegatronBertForNextSentencePrediction"),Rxo=o(" (MegatronBert model)"),Bxo=l(),Nb=a("li"),ade=a("strong"),Pxo=o("mobilebert"),$xo=o(" \u2014 "),tj=a("a"),Ixo=o("MobileBertForNextSentencePrediction"),qxo=o(" (MobileBERT model)"),Nxo=l(),jb=a("li"),nde=a("strong"),jxo=o("qdqbert"),Dxo=o(" \u2014 "),aj=a("a"),Gxo=o("QDQBertForNextSentencePrediction"),Oxo=o(" (QDQBert model)"),Vxo=l(),Db=a("p"),Xxo=o("The model is set in evaluation mode by default using "),sde=a("code"),zxo=o("model.eval()"),Qxo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),lde=a("code"),Wxo=o("model.train()"),Hxo=l(),ide=a("p"),Uxo=o("Examples:"),Jxo=l(),f(iw.$$.fragment),sBe=l(),vd=a("h2"),Gb=a("a"),dde=a("span"),f(dw.$$.fragment),Yxo=l(),cde=a("span"),Kxo=o("AutoModelForTokenClassification"),lBe=l(),ar=a("div"),f(cw.$$.fragment),Zxo=l(),Td=a("p"),eko=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),nj=a("a"),oko=o("from_pretrained()"),rko=o(" class method or the "),sj=a("a"),tko=o("from_config()"),ako=o(` class
method.`),nko=l(),fw=a("p"),sko=o("This class cannot be instantiated directly using "),fde=a("code"),lko=o("__init__()"),iko=o(" (throws an error)."),dko=l(),Kr=a("div"),f(mw.$$.fragment),cko=l(),mde=a("p"),fko=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),mko=l(),Md=a("p"),gko=o(`Note:
Loading a model from its configuration file does `),gde=a("strong"),hko=o("not"),pko=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lj=a("a"),_ko=o("from_pretrained()"),uko=o(" to load the model weights."),bko=l(),hde=a("p"),Fko=o("Examples:"),vko=l(),f(gw.$$.fragment),Tko=l(),ze=a("div"),f(hw.$$.fragment),Mko=l(),pde=a("p"),Eko=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Cko=l(),Ka=a("p"),wko=o("The model class to instantiate is selected based on the "),_de=a("code"),Ako=o("model_type"),yko=o(` property of the config object (either
passed as an argument or loaded from `),ude=a("code"),Lko=o("pretrained_model_name_or_path"),xko=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bde=a("code"),kko=o("pretrained_model_name_or_path"),Sko=o(":"),Rko=l(),j=a("ul"),Ob=a("li"),Fde=a("strong"),Bko=o("albert"),Pko=o(" \u2014 "),ij=a("a"),$ko=o("AlbertForTokenClassification"),Iko=o(" (ALBERT model)"),qko=l(),Vb=a("li"),vde=a("strong"),Nko=o("bert"),jko=o(" \u2014 "),dj=a("a"),Dko=o("BertForTokenClassification"),Gko=o(" (BERT model)"),Oko=l(),Xb=a("li"),Tde=a("strong"),Vko=o("big_bird"),Xko=o(" \u2014 "),cj=a("a"),zko=o("BigBirdForTokenClassification"),Qko=o(" (BigBird model)"),Wko=l(),zb=a("li"),Mde=a("strong"),Hko=o("camembert"),Uko=o(" \u2014 "),fj=a("a"),Jko=o("CamembertForTokenClassification"),Yko=o(" (CamemBERT model)"),Kko=l(),Qb=a("li"),Ede=a("strong"),Zko=o("canine"),eSo=o(" \u2014 "),mj=a("a"),oSo=o("CanineForTokenClassification"),rSo=o(" (Canine model)"),tSo=l(),Wb=a("li"),Cde=a("strong"),aSo=o("convbert"),nSo=o(" \u2014 "),gj=a("a"),sSo=o("ConvBertForTokenClassification"),lSo=o(" (ConvBERT model)"),iSo=l(),Hb=a("li"),wde=a("strong"),dSo=o("data2vec-text"),cSo=o(" \u2014 "),hj=a("a"),fSo=o("Data2VecTextForTokenClassification"),mSo=o(" (Data2VecText model)"),gSo=l(),Ub=a("li"),Ade=a("strong"),hSo=o("deberta"),pSo=o(" \u2014 "),pj=a("a"),_So=o("DebertaForTokenClassification"),uSo=o(" (DeBERTa model)"),bSo=l(),Jb=a("li"),yde=a("strong"),FSo=o("deberta-v2"),vSo=o(" \u2014 "),_j=a("a"),TSo=o("DebertaV2ForTokenClassification"),MSo=o(" (DeBERTa-v2 model)"),ESo=l(),Yb=a("li"),Lde=a("strong"),CSo=o("distilbert"),wSo=o(" \u2014 "),uj=a("a"),ASo=o("DistilBertForTokenClassification"),ySo=o(" (DistilBERT model)"),LSo=l(),Kb=a("li"),xde=a("strong"),xSo=o("electra"),kSo=o(" \u2014 "),bj=a("a"),SSo=o("ElectraForTokenClassification"),RSo=o(" (ELECTRA model)"),BSo=l(),Zb=a("li"),kde=a("strong"),PSo=o("flaubert"),$So=o(" \u2014 "),Fj=a("a"),ISo=o("FlaubertForTokenClassification"),qSo=o(" (FlauBERT model)"),NSo=l(),e5=a("li"),Sde=a("strong"),jSo=o("fnet"),DSo=o(" \u2014 "),vj=a("a"),GSo=o("FNetForTokenClassification"),OSo=o(" (FNet model)"),VSo=l(),o5=a("li"),Rde=a("strong"),XSo=o("funnel"),zSo=o(" \u2014 "),Tj=a("a"),QSo=o("FunnelForTokenClassification"),WSo=o(" (Funnel Transformer model)"),HSo=l(),r5=a("li"),Bde=a("strong"),USo=o("gpt2"),JSo=o(" \u2014 "),Mj=a("a"),YSo=o("GPT2ForTokenClassification"),KSo=o(" (OpenAI GPT-2 model)"),ZSo=l(),t5=a("li"),Pde=a("strong"),eRo=o("gpt_neox"),oRo=o(" \u2014 "),$de=a("code"),rRo=o("GPTNeoXForTokenClassification"),tRo=o(" (GPTNeoX model)"),aRo=l(),a5=a("li"),Ide=a("strong"),nRo=o("ibert"),sRo=o(" \u2014 "),Ej=a("a"),lRo=o("IBertForTokenClassification"),iRo=o(" (I-BERT model)"),dRo=l(),n5=a("li"),qde=a("strong"),cRo=o("layoutlm"),fRo=o(" \u2014 "),Cj=a("a"),mRo=o("LayoutLMForTokenClassification"),gRo=o(" (LayoutLM model)"),hRo=l(),s5=a("li"),Nde=a("strong"),pRo=o("layoutlmv2"),_Ro=o(" \u2014 "),wj=a("a"),uRo=o("LayoutLMv2ForTokenClassification"),bRo=o(" (LayoutLMv2 model)"),FRo=l(),l5=a("li"),jde=a("strong"),vRo=o("longformer"),TRo=o(" \u2014 "),Aj=a("a"),MRo=o("LongformerForTokenClassification"),ERo=o(" (Longformer model)"),CRo=l(),i5=a("li"),Dde=a("strong"),wRo=o("megatron-bert"),ARo=o(" \u2014 "),yj=a("a"),yRo=o("MegatronBertForTokenClassification"),LRo=o(" (MegatronBert model)"),xRo=l(),d5=a("li"),Gde=a("strong"),kRo=o("mobilebert"),SRo=o(" \u2014 "),Lj=a("a"),RRo=o("MobileBertForTokenClassification"),BRo=o(" (MobileBERT model)"),PRo=l(),c5=a("li"),Ode=a("strong"),$Ro=o("mpnet"),IRo=o(" \u2014 "),xj=a("a"),qRo=o("MPNetForTokenClassification"),NRo=o(" (MPNet model)"),jRo=l(),f5=a("li"),Vde=a("strong"),DRo=o("nystromformer"),GRo=o(" \u2014 "),kj=a("a"),ORo=o("NystromformerForTokenClassification"),VRo=o(" (Nystromformer model)"),XRo=l(),m5=a("li"),Xde=a("strong"),zRo=o("qdqbert"),QRo=o(" \u2014 "),Sj=a("a"),WRo=o("QDQBertForTokenClassification"),HRo=o(" (QDQBert model)"),URo=l(),g5=a("li"),zde=a("strong"),JRo=o("rembert"),YRo=o(" \u2014 "),Rj=a("a"),KRo=o("RemBertForTokenClassification"),ZRo=o(" (RemBERT model)"),eBo=l(),h5=a("li"),Qde=a("strong"),oBo=o("roberta"),rBo=o(" \u2014 "),Bj=a("a"),tBo=o("RobertaForTokenClassification"),aBo=o(" (RoBERTa model)"),nBo=l(),p5=a("li"),Wde=a("strong"),sBo=o("roformer"),lBo=o(" \u2014 "),Pj=a("a"),iBo=o("RoFormerForTokenClassification"),dBo=o(" (RoFormer model)"),cBo=l(),_5=a("li"),Hde=a("strong"),fBo=o("squeezebert"),mBo=o(" \u2014 "),$j=a("a"),gBo=o("SqueezeBertForTokenClassification"),hBo=o(" (SqueezeBERT model)"),pBo=l(),u5=a("li"),Ude=a("strong"),_Bo=o("xlm"),uBo=o(" \u2014 "),Ij=a("a"),bBo=o("XLMForTokenClassification"),FBo=o(" (XLM model)"),vBo=l(),b5=a("li"),Jde=a("strong"),TBo=o("xlm-roberta"),MBo=o(" \u2014 "),qj=a("a"),EBo=o("XLMRobertaForTokenClassification"),CBo=o(" (XLM-RoBERTa model)"),wBo=l(),F5=a("li"),Yde=a("strong"),ABo=o("xlm-roberta-xl"),yBo=o(" \u2014 "),Nj=a("a"),LBo=o("XLMRobertaXLForTokenClassification"),xBo=o(" (XLM-RoBERTa-XL model)"),kBo=l(),v5=a("li"),Kde=a("strong"),SBo=o("xlnet"),RBo=o(" \u2014 "),jj=a("a"),BBo=o("XLNetForTokenClassification"),PBo=o(" (XLNet model)"),$Bo=l(),T5=a("li"),Zde=a("strong"),IBo=o("yoso"),qBo=o(" \u2014 "),Dj=a("a"),NBo=o("YosoForTokenClassification"),jBo=o(" (YOSO model)"),DBo=l(),M5=a("p"),GBo=o("The model is set in evaluation mode by default using "),ece=a("code"),OBo=o("model.eval()"),VBo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),oce=a("code"),XBo=o("model.train()"),zBo=l(),rce=a("p"),QBo=o("Examples:"),WBo=l(),f(pw.$$.fragment),iBe=l(),Ed=a("h2"),E5=a("a"),tce=a("span"),f(_w.$$.fragment),HBo=l(),ace=a("span"),UBo=o("AutoModelForQuestionAnswering"),dBe=l(),nr=a("div"),f(uw.$$.fragment),JBo=l(),Cd=a("p"),YBo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Gj=a("a"),KBo=o("from_pretrained()"),ZBo=o(" class method or the "),Oj=a("a"),ePo=o("from_config()"),oPo=o(` class
method.`),rPo=l(),bw=a("p"),tPo=o("This class cannot be instantiated directly using "),nce=a("code"),aPo=o("__init__()"),nPo=o(" (throws an error)."),sPo=l(),Zr=a("div"),f(Fw.$$.fragment),lPo=l(),sce=a("p"),iPo=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),dPo=l(),wd=a("p"),cPo=o(`Note:
Loading a model from its configuration file does `),lce=a("strong"),fPo=o("not"),mPo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Vj=a("a"),gPo=o("from_pretrained()"),hPo=o(" to load the model weights."),pPo=l(),ice=a("p"),_Po=o("Examples:"),uPo=l(),f(vw.$$.fragment),bPo=l(),Qe=a("div"),f(Tw.$$.fragment),FPo=l(),dce=a("p"),vPo=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),TPo=l(),Za=a("p"),MPo=o("The model class to instantiate is selected based on the "),cce=a("code"),EPo=o("model_type"),CPo=o(` property of the config object (either
passed as an argument or loaded from `),fce=a("code"),wPo=o("pretrained_model_name_or_path"),APo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mce=a("code"),yPo=o("pretrained_model_name_or_path"),LPo=o(":"),xPo=l(),S=a("ul"),C5=a("li"),gce=a("strong"),kPo=o("albert"),SPo=o(" \u2014 "),Xj=a("a"),RPo=o("AlbertForQuestionAnswering"),BPo=o(" (ALBERT model)"),PPo=l(),w5=a("li"),hce=a("strong"),$Po=o("bart"),IPo=o(" \u2014 "),zj=a("a"),qPo=o("BartForQuestionAnswering"),NPo=o(" (BART model)"),jPo=l(),A5=a("li"),pce=a("strong"),DPo=o("bert"),GPo=o(" \u2014 "),Qj=a("a"),OPo=o("BertForQuestionAnswering"),VPo=o(" (BERT model)"),XPo=l(),y5=a("li"),_ce=a("strong"),zPo=o("big_bird"),QPo=o(" \u2014 "),Wj=a("a"),WPo=o("BigBirdForQuestionAnswering"),HPo=o(" (BigBird model)"),UPo=l(),L5=a("li"),uce=a("strong"),JPo=o("bigbird_pegasus"),YPo=o(" \u2014 "),Hj=a("a"),KPo=o("BigBirdPegasusForQuestionAnswering"),ZPo=o(" (BigBirdPegasus model)"),e$o=l(),x5=a("li"),bce=a("strong"),o$o=o("camembert"),r$o=o(" \u2014 "),Uj=a("a"),t$o=o("CamembertForQuestionAnswering"),a$o=o(" (CamemBERT model)"),n$o=l(),k5=a("li"),Fce=a("strong"),s$o=o("canine"),l$o=o(" \u2014 "),Jj=a("a"),i$o=o("CanineForQuestionAnswering"),d$o=o(" (Canine model)"),c$o=l(),S5=a("li"),vce=a("strong"),f$o=o("convbert"),m$o=o(" \u2014 "),Yj=a("a"),g$o=o("ConvBertForQuestionAnswering"),h$o=o(" (ConvBERT model)"),p$o=l(),R5=a("li"),Tce=a("strong"),_$o=o("data2vec-text"),u$o=o(" \u2014 "),Kj=a("a"),b$o=o("Data2VecTextForQuestionAnswering"),F$o=o(" (Data2VecText model)"),v$o=l(),B5=a("li"),Mce=a("strong"),T$o=o("deberta"),M$o=o(" \u2014 "),Zj=a("a"),E$o=o("DebertaForQuestionAnswering"),C$o=o(" (DeBERTa model)"),w$o=l(),P5=a("li"),Ece=a("strong"),A$o=o("deberta-v2"),y$o=o(" \u2014 "),eD=a("a"),L$o=o("DebertaV2ForQuestionAnswering"),x$o=o(" (DeBERTa-v2 model)"),k$o=l(),$5=a("li"),Cce=a("strong"),S$o=o("distilbert"),R$o=o(" \u2014 "),oD=a("a"),B$o=o("DistilBertForQuestionAnswering"),P$o=o(" (DistilBERT model)"),$$o=l(),I5=a("li"),wce=a("strong"),I$o=o("electra"),q$o=o(" \u2014 "),rD=a("a"),N$o=o("ElectraForQuestionAnswering"),j$o=o(" (ELECTRA model)"),D$o=l(),q5=a("li"),Ace=a("strong"),G$o=o("flaubert"),O$o=o(" \u2014 "),tD=a("a"),V$o=o("FlaubertForQuestionAnsweringSimple"),X$o=o(" (FlauBERT model)"),z$o=l(),N5=a("li"),yce=a("strong"),Q$o=o("fnet"),W$o=o(" \u2014 "),aD=a("a"),H$o=o("FNetForQuestionAnswering"),U$o=o(" (FNet model)"),J$o=l(),j5=a("li"),Lce=a("strong"),Y$o=o("funnel"),K$o=o(" \u2014 "),nD=a("a"),Z$o=o("FunnelForQuestionAnswering"),eIo=o(" (Funnel Transformer model)"),oIo=l(),D5=a("li"),xce=a("strong"),rIo=o("gpt_neox"),tIo=o(" \u2014 "),kce=a("code"),aIo=o("GPTNeoXForQuestionAnswering"),nIo=o(" (GPTNeoX model)"),sIo=l(),G5=a("li"),Sce=a("strong"),lIo=o("gptj"),iIo=o(" \u2014 "),sD=a("a"),dIo=o("GPTJForQuestionAnswering"),cIo=o(" (GPT-J model)"),fIo=l(),O5=a("li"),Rce=a("strong"),mIo=o("ibert"),gIo=o(" \u2014 "),lD=a("a"),hIo=o("IBertForQuestionAnswering"),pIo=o(" (I-BERT model)"),_Io=l(),V5=a("li"),Bce=a("strong"),uIo=o("layoutlmv2"),bIo=o(" \u2014 "),iD=a("a"),FIo=o("LayoutLMv2ForQuestionAnswering"),vIo=o(" (LayoutLMv2 model)"),TIo=l(),X5=a("li"),Pce=a("strong"),MIo=o("led"),EIo=o(" \u2014 "),dD=a("a"),CIo=o("LEDForQuestionAnswering"),wIo=o(" (LED model)"),AIo=l(),z5=a("li"),$ce=a("strong"),yIo=o("longformer"),LIo=o(" \u2014 "),cD=a("a"),xIo=o("LongformerForQuestionAnswering"),kIo=o(" (Longformer model)"),SIo=l(),Q5=a("li"),Ice=a("strong"),RIo=o("lxmert"),BIo=o(" \u2014 "),fD=a("a"),PIo=o("LxmertForQuestionAnswering"),$Io=o(" (LXMERT model)"),IIo=l(),W5=a("li"),qce=a("strong"),qIo=o("mbart"),NIo=o(" \u2014 "),mD=a("a"),jIo=o("MBartForQuestionAnswering"),DIo=o(" (mBART model)"),GIo=l(),H5=a("li"),Nce=a("strong"),OIo=o("megatron-bert"),VIo=o(" \u2014 "),gD=a("a"),XIo=o("MegatronBertForQuestionAnswering"),zIo=o(" (MegatronBert model)"),QIo=l(),U5=a("li"),jce=a("strong"),WIo=o("mobilebert"),HIo=o(" \u2014 "),hD=a("a"),UIo=o("MobileBertForQuestionAnswering"),JIo=o(" (MobileBERT model)"),YIo=l(),J5=a("li"),Dce=a("strong"),KIo=o("mpnet"),ZIo=o(" \u2014 "),pD=a("a"),eqo=o("MPNetForQuestionAnswering"),oqo=o(" (MPNet model)"),rqo=l(),Y5=a("li"),Gce=a("strong"),tqo=o("nystromformer"),aqo=o(" \u2014 "),_D=a("a"),nqo=o("NystromformerForQuestionAnswering"),sqo=o(" (Nystromformer model)"),lqo=l(),K5=a("li"),Oce=a("strong"),iqo=o("qdqbert"),dqo=o(" \u2014 "),uD=a("a"),cqo=o("QDQBertForQuestionAnswering"),fqo=o(" (QDQBert model)"),mqo=l(),Z5=a("li"),Vce=a("strong"),gqo=o("reformer"),hqo=o(" \u2014 "),bD=a("a"),pqo=o("ReformerForQuestionAnswering"),_qo=o(" (Reformer model)"),uqo=l(),e2=a("li"),Xce=a("strong"),bqo=o("rembert"),Fqo=o(" \u2014 "),FD=a("a"),vqo=o("RemBertForQuestionAnswering"),Tqo=o(" (RemBERT model)"),Mqo=l(),o2=a("li"),zce=a("strong"),Eqo=o("roberta"),Cqo=o(" \u2014 "),vD=a("a"),wqo=o("RobertaForQuestionAnswering"),Aqo=o(" (RoBERTa model)"),yqo=l(),r2=a("li"),Qce=a("strong"),Lqo=o("roformer"),xqo=o(" \u2014 "),TD=a("a"),kqo=o("RoFormerForQuestionAnswering"),Sqo=o(" (RoFormer model)"),Rqo=l(),t2=a("li"),Wce=a("strong"),Bqo=o("splinter"),Pqo=o(" \u2014 "),MD=a("a"),$qo=o("SplinterForQuestionAnswering"),Iqo=o(" (Splinter model)"),qqo=l(),a2=a("li"),Hce=a("strong"),Nqo=o("squeezebert"),jqo=o(" \u2014 "),ED=a("a"),Dqo=o("SqueezeBertForQuestionAnswering"),Gqo=o(" (SqueezeBERT model)"),Oqo=l(),n2=a("li"),Uce=a("strong"),Vqo=o("xlm"),Xqo=o(" \u2014 "),CD=a("a"),zqo=o("XLMForQuestionAnsweringSimple"),Qqo=o(" (XLM model)"),Wqo=l(),s2=a("li"),Jce=a("strong"),Hqo=o("xlm-roberta"),Uqo=o(" \u2014 "),wD=a("a"),Jqo=o("XLMRobertaForQuestionAnswering"),Yqo=o(" (XLM-RoBERTa model)"),Kqo=l(),l2=a("li"),Yce=a("strong"),Zqo=o("xlm-roberta-xl"),eNo=o(" \u2014 "),AD=a("a"),oNo=o("XLMRobertaXLForQuestionAnswering"),rNo=o(" (XLM-RoBERTa-XL model)"),tNo=l(),i2=a("li"),Kce=a("strong"),aNo=o("xlnet"),nNo=o(" \u2014 "),yD=a("a"),sNo=o("XLNetForQuestionAnsweringSimple"),lNo=o(" (XLNet model)"),iNo=l(),d2=a("li"),Zce=a("strong"),dNo=o("yoso"),cNo=o(" \u2014 "),LD=a("a"),fNo=o("YosoForQuestionAnswering"),mNo=o(" (YOSO model)"),gNo=l(),c2=a("p"),hNo=o("The model is set in evaluation mode by default using "),efe=a("code"),pNo=o("model.eval()"),_No=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ofe=a("code"),uNo=o("model.train()"),bNo=l(),rfe=a("p"),FNo=o("Examples:"),vNo=l(),f(Mw.$$.fragment),cBe=l(),Ad=a("h2"),f2=a("a"),tfe=a("span"),f(Ew.$$.fragment),TNo=l(),afe=a("span"),MNo=o("AutoModelForTableQuestionAnswering"),fBe=l(),sr=a("div"),f(Cw.$$.fragment),ENo=l(),yd=a("p"),CNo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),xD=a("a"),wNo=o("from_pretrained()"),ANo=o(" class method or the "),kD=a("a"),yNo=o("from_config()"),LNo=o(` class
method.`),xNo=l(),ww=a("p"),kNo=o("This class cannot be instantiated directly using "),nfe=a("code"),SNo=o("__init__()"),RNo=o(" (throws an error)."),BNo=l(),et=a("div"),f(Aw.$$.fragment),PNo=l(),sfe=a("p"),$No=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),INo=l(),Ld=a("p"),qNo=o(`Note:
Loading a model from its configuration file does `),lfe=a("strong"),NNo=o("not"),jNo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),SD=a("a"),DNo=o("from_pretrained()"),GNo=o(" to load the model weights."),ONo=l(),ife=a("p"),VNo=o("Examples:"),XNo=l(),f(yw.$$.fragment),zNo=l(),We=a("div"),f(Lw.$$.fragment),QNo=l(),dfe=a("p"),WNo=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),HNo=l(),en=a("p"),UNo=o("The model class to instantiate is selected based on the "),cfe=a("code"),JNo=o("model_type"),YNo=o(` property of the config object (either
passed as an argument or loaded from `),ffe=a("code"),KNo=o("pretrained_model_name_or_path"),ZNo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mfe=a("code"),ejo=o("pretrained_model_name_or_path"),ojo=o(":"),rjo=l(),gfe=a("ul"),m2=a("li"),hfe=a("strong"),tjo=o("tapas"),ajo=o(" \u2014 "),RD=a("a"),njo=o("TapasForQuestionAnswering"),sjo=o(" (TAPAS model)"),ljo=l(),g2=a("p"),ijo=o("The model is set in evaluation mode by default using "),pfe=a("code"),djo=o("model.eval()"),cjo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_fe=a("code"),fjo=o("model.train()"),mjo=l(),ufe=a("p"),gjo=o("Examples:"),hjo=l(),f(xw.$$.fragment),mBe=l(),xd=a("h2"),h2=a("a"),bfe=a("span"),f(kw.$$.fragment),pjo=l(),Ffe=a("span"),_jo=o("AutoModelForImageClassification"),gBe=l(),lr=a("div"),f(Sw.$$.fragment),ujo=l(),kd=a("p"),bjo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),BD=a("a"),Fjo=o("from_pretrained()"),vjo=o(" class method or the "),PD=a("a"),Tjo=o("from_config()"),Mjo=o(` class
method.`),Ejo=l(),Rw=a("p"),Cjo=o("This class cannot be instantiated directly using "),vfe=a("code"),wjo=o("__init__()"),Ajo=o(" (throws an error)."),yjo=l(),ot=a("div"),f(Bw.$$.fragment),Ljo=l(),Tfe=a("p"),xjo=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),kjo=l(),Sd=a("p"),Sjo=o(`Note:
Loading a model from its configuration file does `),Mfe=a("strong"),Rjo=o("not"),Bjo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$D=a("a"),Pjo=o("from_pretrained()"),$jo=o(" to load the model weights."),Ijo=l(),Efe=a("p"),qjo=o("Examples:"),Njo=l(),f(Pw.$$.fragment),jjo=l(),He=a("div"),f($w.$$.fragment),Djo=l(),Cfe=a("p"),Gjo=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Ojo=l(),on=a("p"),Vjo=o("The model class to instantiate is selected based on the "),wfe=a("code"),Xjo=o("model_type"),zjo=o(` property of the config object (either
passed as an argument or loaded from `),Afe=a("code"),Qjo=o("pretrained_model_name_or_path"),Wjo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yfe=a("code"),Hjo=o("pretrained_model_name_or_path"),Ujo=o(":"),Jjo=l(),ce=a("ul"),p2=a("li"),Lfe=a("strong"),Yjo=o("beit"),Kjo=o(" \u2014 "),ID=a("a"),Zjo=o("BeitForImageClassification"),eDo=o(" (BEiT model)"),oDo=l(),_2=a("li"),xfe=a("strong"),rDo=o("convnext"),tDo=o(" \u2014 "),qD=a("a"),aDo=o("ConvNextForImageClassification"),nDo=o(" (ConvNext model)"),sDo=l(),Ds=a("li"),kfe=a("strong"),lDo=o("deit"),iDo=o(" \u2014 "),ND=a("a"),dDo=o("DeiTForImageClassification"),cDo=o(" or "),jD=a("a"),fDo=o("DeiTForImageClassificationWithTeacher"),mDo=o(" (DeiT model)"),gDo=l(),u2=a("li"),Sfe=a("strong"),hDo=o("imagegpt"),pDo=o(" \u2014 "),DD=a("a"),_Do=o("ImageGPTForImageClassification"),uDo=o(" (ImageGPT model)"),bDo=l(),ma=a("li"),Rfe=a("strong"),FDo=o("perceiver"),vDo=o(" \u2014 "),GD=a("a"),TDo=o("PerceiverForImageClassificationLearned"),MDo=o(" or "),OD=a("a"),EDo=o("PerceiverForImageClassificationFourier"),CDo=o(" or "),VD=a("a"),wDo=o("PerceiverForImageClassificationConvProcessing"),ADo=o(" (Perceiver model)"),yDo=l(),b2=a("li"),Bfe=a("strong"),LDo=o("poolformer"),xDo=o(" \u2014 "),XD=a("a"),kDo=o("PoolFormerForImageClassification"),SDo=o(" (PoolFormer model)"),RDo=l(),F2=a("li"),Pfe=a("strong"),BDo=o("regnet"),PDo=o(" \u2014 "),zD=a("a"),$Do=o("RegNetForImageClassification"),IDo=o(" (RegNet model)"),qDo=l(),v2=a("li"),$fe=a("strong"),NDo=o("resnet"),jDo=o(" \u2014 "),QD=a("a"),DDo=o("ResNetForImageClassification"),GDo=o(" (ResNet model)"),ODo=l(),T2=a("li"),Ife=a("strong"),VDo=o("segformer"),XDo=o(" \u2014 "),WD=a("a"),zDo=o("SegformerForImageClassification"),QDo=o(" (SegFormer model)"),WDo=l(),M2=a("li"),qfe=a("strong"),HDo=o("swin"),UDo=o(" \u2014 "),HD=a("a"),JDo=o("SwinForImageClassification"),YDo=o(" (Swin model)"),KDo=l(),E2=a("li"),Nfe=a("strong"),ZDo=o("van"),eGo=o(" \u2014 "),UD=a("a"),oGo=o("VanForImageClassification"),rGo=o(" (VAN model)"),tGo=l(),C2=a("li"),jfe=a("strong"),aGo=o("vit"),nGo=o(" \u2014 "),JD=a("a"),sGo=o("ViTForImageClassification"),lGo=o(" (ViT model)"),iGo=l(),w2=a("p"),dGo=o("The model is set in evaluation mode by default using "),Dfe=a("code"),cGo=o("model.eval()"),fGo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Gfe=a("code"),mGo=o("model.train()"),gGo=l(),Ofe=a("p"),hGo=o("Examples:"),pGo=l(),f(Iw.$$.fragment),hBe=l(),Rd=a("h2"),A2=a("a"),Vfe=a("span"),f(qw.$$.fragment),_Go=l(),Xfe=a("span"),uGo=o("AutoModelForVision2Seq"),pBe=l(),ir=a("div"),f(Nw.$$.fragment),bGo=l(),Bd=a("p"),FGo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),YD=a("a"),vGo=o("from_pretrained()"),TGo=o(" class method or the "),KD=a("a"),MGo=o("from_config()"),EGo=o(` class
method.`),CGo=l(),jw=a("p"),wGo=o("This class cannot be instantiated directly using "),zfe=a("code"),AGo=o("__init__()"),yGo=o(" (throws an error)."),LGo=l(),rt=a("div"),f(Dw.$$.fragment),xGo=l(),Qfe=a("p"),kGo=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),SGo=l(),Pd=a("p"),RGo=o(`Note:
Loading a model from its configuration file does `),Wfe=a("strong"),BGo=o("not"),PGo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ZD=a("a"),$Go=o("from_pretrained()"),IGo=o(" to load the model weights."),qGo=l(),Hfe=a("p"),NGo=o("Examples:"),jGo=l(),f(Gw.$$.fragment),DGo=l(),Ue=a("div"),f(Ow.$$.fragment),GGo=l(),Ufe=a("p"),OGo=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),VGo=l(),rn=a("p"),XGo=o("The model class to instantiate is selected based on the "),Jfe=a("code"),zGo=o("model_type"),QGo=o(` property of the config object (either
passed as an argument or loaded from `),Yfe=a("code"),WGo=o("pretrained_model_name_or_path"),HGo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kfe=a("code"),UGo=o("pretrained_model_name_or_path"),JGo=o(":"),YGo=l(),Zfe=a("ul"),y2=a("li"),eme=a("strong"),KGo=o("vision-encoder-decoder"),ZGo=o(" \u2014 "),eG=a("a"),eOo=o("VisionEncoderDecoderModel"),oOo=o(" (Vision Encoder decoder model)"),rOo=l(),L2=a("p"),tOo=o("The model is set in evaluation mode by default using "),ome=a("code"),aOo=o("model.eval()"),nOo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),rme=a("code"),sOo=o("model.train()"),lOo=l(),tme=a("p"),iOo=o("Examples:"),dOo=l(),f(Vw.$$.fragment),_Be=l(),$d=a("h2"),x2=a("a"),ame=a("span"),f(Xw.$$.fragment),cOo=l(),nme=a("span"),fOo=o("AutoModelForAudioClassification"),uBe=l(),dr=a("div"),f(zw.$$.fragment),mOo=l(),Id=a("p"),gOo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),oG=a("a"),hOo=o("from_pretrained()"),pOo=o(" class method or the "),rG=a("a"),_Oo=o("from_config()"),uOo=o(` class
method.`),bOo=l(),Qw=a("p"),FOo=o("This class cannot be instantiated directly using "),sme=a("code"),vOo=o("__init__()"),TOo=o(" (throws an error)."),MOo=l(),tt=a("div"),f(Ww.$$.fragment),EOo=l(),lme=a("p"),COo=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),wOo=l(),qd=a("p"),AOo=o(`Note:
Loading a model from its configuration file does `),ime=a("strong"),yOo=o("not"),LOo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tG=a("a"),xOo=o("from_pretrained()"),kOo=o(" to load the model weights."),SOo=l(),dme=a("p"),ROo=o("Examples:"),BOo=l(),f(Hw.$$.fragment),POo=l(),Je=a("div"),f(Uw.$$.fragment),$Oo=l(),cme=a("p"),IOo=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),qOo=l(),tn=a("p"),NOo=o("The model class to instantiate is selected based on the "),fme=a("code"),jOo=o("model_type"),DOo=o(` property of the config object (either
passed as an argument or loaded from `),mme=a("code"),GOo=o("pretrained_model_name_or_path"),OOo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gme=a("code"),VOo=o("pretrained_model_name_or_path"),XOo=o(":"),zOo=l(),Se=a("ul"),k2=a("li"),hme=a("strong"),QOo=o("data2vec-audio"),WOo=o(" \u2014 "),aG=a("a"),HOo=o("Data2VecAudioForSequenceClassification"),UOo=o(" (Data2VecAudio model)"),JOo=l(),S2=a("li"),pme=a("strong"),YOo=o("hubert"),KOo=o(" \u2014 "),nG=a("a"),ZOo=o("HubertForSequenceClassification"),eVo=o(" (Hubert model)"),oVo=l(),R2=a("li"),_me=a("strong"),rVo=o("sew"),tVo=o(" \u2014 "),sG=a("a"),aVo=o("SEWForSequenceClassification"),nVo=o(" (SEW model)"),sVo=l(),B2=a("li"),ume=a("strong"),lVo=o("sew-d"),iVo=o(" \u2014 "),lG=a("a"),dVo=o("SEWDForSequenceClassification"),cVo=o(" (SEW-D model)"),fVo=l(),P2=a("li"),bme=a("strong"),mVo=o("unispeech"),gVo=o(" \u2014 "),iG=a("a"),hVo=o("UniSpeechForSequenceClassification"),pVo=o(" (UniSpeech model)"),_Vo=l(),$2=a("li"),Fme=a("strong"),uVo=o("unispeech-sat"),bVo=o(" \u2014 "),dG=a("a"),FVo=o("UniSpeechSatForSequenceClassification"),vVo=o(" (UniSpeechSat model)"),TVo=l(),I2=a("li"),vme=a("strong"),MVo=o("wav2vec2"),EVo=o(" \u2014 "),cG=a("a"),CVo=o("Wav2Vec2ForSequenceClassification"),wVo=o(" (Wav2Vec2 model)"),AVo=l(),q2=a("li"),Tme=a("strong"),yVo=o("wavlm"),LVo=o(" \u2014 "),fG=a("a"),xVo=o("WavLMForSequenceClassification"),kVo=o(" (WavLM model)"),SVo=l(),N2=a("p"),RVo=o("The model is set in evaluation mode by default using "),Mme=a("code"),BVo=o("model.eval()"),PVo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Eme=a("code"),$Vo=o("model.train()"),IVo=l(),Cme=a("p"),qVo=o("Examples:"),NVo=l(),f(Jw.$$.fragment),bBe=l(),Nd=a("h2"),j2=a("a"),wme=a("span"),f(Yw.$$.fragment),jVo=l(),Ame=a("span"),DVo=o("AutoModelForAudioFrameClassification"),FBe=l(),cr=a("div"),f(Kw.$$.fragment),GVo=l(),jd=a("p"),OVo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),mG=a("a"),VVo=o("from_pretrained()"),XVo=o(" class method or the "),gG=a("a"),zVo=o("from_config()"),QVo=o(` class
method.`),WVo=l(),Zw=a("p"),HVo=o("This class cannot be instantiated directly using "),yme=a("code"),UVo=o("__init__()"),JVo=o(" (throws an error)."),YVo=l(),at=a("div"),f(eA.$$.fragment),KVo=l(),Lme=a("p"),ZVo=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),eXo=l(),Dd=a("p"),oXo=o(`Note:
Loading a model from its configuration file does `),xme=a("strong"),rXo=o("not"),tXo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hG=a("a"),aXo=o("from_pretrained()"),nXo=o(" to load the model weights."),sXo=l(),kme=a("p"),lXo=o("Examples:"),iXo=l(),f(oA.$$.fragment),dXo=l(),Ye=a("div"),f(rA.$$.fragment),cXo=l(),Sme=a("p"),fXo=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),mXo=l(),an=a("p"),gXo=o("The model class to instantiate is selected based on the "),Rme=a("code"),hXo=o("model_type"),pXo=o(` property of the config object (either
passed as an argument or loaded from `),Bme=a("code"),_Xo=o("pretrained_model_name_or_path"),uXo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Pme=a("code"),bXo=o("pretrained_model_name_or_path"),FXo=o(":"),vXo=l(),nn=a("ul"),D2=a("li"),$me=a("strong"),TXo=o("data2vec-audio"),MXo=o(" \u2014 "),pG=a("a"),EXo=o("Data2VecAudioForAudioFrameClassification"),CXo=o(" (Data2VecAudio model)"),wXo=l(),G2=a("li"),Ime=a("strong"),AXo=o("unispeech-sat"),yXo=o(" \u2014 "),_G=a("a"),LXo=o("UniSpeechSatForAudioFrameClassification"),xXo=o(" (UniSpeechSat model)"),kXo=l(),O2=a("li"),qme=a("strong"),SXo=o("wav2vec2"),RXo=o(" \u2014 "),uG=a("a"),BXo=o("Wav2Vec2ForAudioFrameClassification"),PXo=o(" (Wav2Vec2 model)"),$Xo=l(),V2=a("li"),Nme=a("strong"),IXo=o("wavlm"),qXo=o(" \u2014 "),bG=a("a"),NXo=o("WavLMForAudioFrameClassification"),jXo=o(" (WavLM model)"),DXo=l(),X2=a("p"),GXo=o("The model is set in evaluation mode by default using "),jme=a("code"),OXo=o("model.eval()"),VXo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Dme=a("code"),XXo=o("model.train()"),zXo=l(),Gme=a("p"),QXo=o("Examples:"),WXo=l(),f(tA.$$.fragment),vBe=l(),Gd=a("h2"),z2=a("a"),Ome=a("span"),f(aA.$$.fragment),HXo=l(),Vme=a("span"),UXo=o("AutoModelForCTC"),TBe=l(),fr=a("div"),f(nA.$$.fragment),JXo=l(),Od=a("p"),YXo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),FG=a("a"),KXo=o("from_pretrained()"),ZXo=o(" class method or the "),vG=a("a"),ezo=o("from_config()"),ozo=o(` class
method.`),rzo=l(),sA=a("p"),tzo=o("This class cannot be instantiated directly using "),Xme=a("code"),azo=o("__init__()"),nzo=o(" (throws an error)."),szo=l(),nt=a("div"),f(lA.$$.fragment),lzo=l(),zme=a("p"),izo=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),dzo=l(),Vd=a("p"),czo=o(`Note:
Loading a model from its configuration file does `),Qme=a("strong"),fzo=o("not"),mzo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),TG=a("a"),gzo=o("from_pretrained()"),hzo=o(" to load the model weights."),pzo=l(),Wme=a("p"),_zo=o("Examples:"),uzo=l(),f(iA.$$.fragment),bzo=l(),Ke=a("div"),f(dA.$$.fragment),Fzo=l(),Hme=a("p"),vzo=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),Tzo=l(),sn=a("p"),Mzo=o("The model class to instantiate is selected based on the "),Ume=a("code"),Ezo=o("model_type"),Czo=o(` property of the config object (either
passed as an argument or loaded from `),Jme=a("code"),wzo=o("pretrained_model_name_or_path"),Azo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yme=a("code"),yzo=o("pretrained_model_name_or_path"),Lzo=o(":"),xzo=l(),Re=a("ul"),Q2=a("li"),Kme=a("strong"),kzo=o("data2vec-audio"),Szo=o(" \u2014 "),MG=a("a"),Rzo=o("Data2VecAudioForCTC"),Bzo=o(" (Data2VecAudio model)"),Pzo=l(),W2=a("li"),Zme=a("strong"),$zo=o("hubert"),Izo=o(" \u2014 "),EG=a("a"),qzo=o("HubertForCTC"),Nzo=o(" (Hubert model)"),jzo=l(),H2=a("li"),ege=a("strong"),Dzo=o("sew"),Gzo=o(" \u2014 "),CG=a("a"),Ozo=o("SEWForCTC"),Vzo=o(" (SEW model)"),Xzo=l(),U2=a("li"),oge=a("strong"),zzo=o("sew-d"),Qzo=o(" \u2014 "),wG=a("a"),Wzo=o("SEWDForCTC"),Hzo=o(" (SEW-D model)"),Uzo=l(),J2=a("li"),rge=a("strong"),Jzo=o("unispeech"),Yzo=o(" \u2014 "),AG=a("a"),Kzo=o("UniSpeechForCTC"),Zzo=o(" (UniSpeech model)"),eQo=l(),Y2=a("li"),tge=a("strong"),oQo=o("unispeech-sat"),rQo=o(" \u2014 "),yG=a("a"),tQo=o("UniSpeechSatForCTC"),aQo=o(" (UniSpeechSat model)"),nQo=l(),K2=a("li"),age=a("strong"),sQo=o("wav2vec2"),lQo=o(" \u2014 "),LG=a("a"),iQo=o("Wav2Vec2ForCTC"),dQo=o(" (Wav2Vec2 model)"),cQo=l(),Z2=a("li"),nge=a("strong"),fQo=o("wavlm"),mQo=o(" \u2014 "),xG=a("a"),gQo=o("WavLMForCTC"),hQo=o(" (WavLM model)"),pQo=l(),eF=a("p"),_Qo=o("The model is set in evaluation mode by default using "),sge=a("code"),uQo=o("model.eval()"),bQo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),lge=a("code"),FQo=o("model.train()"),vQo=l(),ige=a("p"),TQo=o("Examples:"),MQo=l(),f(cA.$$.fragment),MBe=l(),Xd=a("h2"),oF=a("a"),dge=a("span"),f(fA.$$.fragment),EQo=l(),cge=a("span"),CQo=o("AutoModelForSpeechSeq2Seq"),EBe=l(),mr=a("div"),f(mA.$$.fragment),wQo=l(),zd=a("p"),AQo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),kG=a("a"),yQo=o("from_pretrained()"),LQo=o(" class method or the "),SG=a("a"),xQo=o("from_config()"),kQo=o(` class
method.`),SQo=l(),gA=a("p"),RQo=o("This class cannot be instantiated directly using "),fge=a("code"),BQo=o("__init__()"),PQo=o(" (throws an error)."),$Qo=l(),st=a("div"),f(hA.$$.fragment),IQo=l(),mge=a("p"),qQo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),NQo=l(),Qd=a("p"),jQo=o(`Note:
Loading a model from its configuration file does `),gge=a("strong"),DQo=o("not"),GQo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),RG=a("a"),OQo=o("from_pretrained()"),VQo=o(" to load the model weights."),XQo=l(),hge=a("p"),zQo=o("Examples:"),QQo=l(),f(pA.$$.fragment),WQo=l(),Ze=a("div"),f(_A.$$.fragment),HQo=l(),pge=a("p"),UQo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),JQo=l(),ln=a("p"),YQo=o("The model class to instantiate is selected based on the "),_ge=a("code"),KQo=o("model_type"),ZQo=o(` property of the config object (either
passed as an argument or loaded from `),uge=a("code"),eWo=o("pretrained_model_name_or_path"),oWo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bge=a("code"),rWo=o("pretrained_model_name_or_path"),tWo=o(":"),aWo=l(),uA=a("ul"),rF=a("li"),Fge=a("strong"),nWo=o("speech-encoder-decoder"),sWo=o(" \u2014 "),BG=a("a"),lWo=o("SpeechEncoderDecoderModel"),iWo=o(" (Speech Encoder decoder model)"),dWo=l(),tF=a("li"),vge=a("strong"),cWo=o("speech_to_text"),fWo=o(" \u2014 "),PG=a("a"),mWo=o("Speech2TextForConditionalGeneration"),gWo=o(" (Speech2Text model)"),hWo=l(),aF=a("p"),pWo=o("The model is set in evaluation mode by default using "),Tge=a("code"),_Wo=o("model.eval()"),uWo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Mge=a("code"),bWo=o("model.train()"),FWo=l(),Ege=a("p"),vWo=o("Examples:"),TWo=l(),f(bA.$$.fragment),CBe=l(),Wd=a("h2"),nF=a("a"),Cge=a("span"),f(FA.$$.fragment),MWo=l(),wge=a("span"),EWo=o("AutoModelForAudioXVector"),wBe=l(),gr=a("div"),f(vA.$$.fragment),CWo=l(),Hd=a("p"),wWo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),$G=a("a"),AWo=o("from_pretrained()"),yWo=o(" class method or the "),IG=a("a"),LWo=o("from_config()"),xWo=o(` class
method.`),kWo=l(),TA=a("p"),SWo=o("This class cannot be instantiated directly using "),Age=a("code"),RWo=o("__init__()"),BWo=o(" (throws an error)."),PWo=l(),lt=a("div"),f(MA.$$.fragment),$Wo=l(),yge=a("p"),IWo=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),qWo=l(),Ud=a("p"),NWo=o(`Note:
Loading a model from its configuration file does `),Lge=a("strong"),jWo=o("not"),DWo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qG=a("a"),GWo=o("from_pretrained()"),OWo=o(" to load the model weights."),VWo=l(),xge=a("p"),XWo=o("Examples:"),zWo=l(),f(EA.$$.fragment),QWo=l(),eo=a("div"),f(CA.$$.fragment),WWo=l(),kge=a("p"),HWo=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),UWo=l(),dn=a("p"),JWo=o("The model class to instantiate is selected based on the "),Sge=a("code"),YWo=o("model_type"),KWo=o(` property of the config object (either
passed as an argument or loaded from `),Rge=a("code"),ZWo=o("pretrained_model_name_or_path"),eHo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bge=a("code"),oHo=o("pretrained_model_name_or_path"),rHo=o(":"),tHo=l(),cn=a("ul"),sF=a("li"),Pge=a("strong"),aHo=o("data2vec-audio"),nHo=o(" \u2014 "),NG=a("a"),sHo=o("Data2VecAudioForXVector"),lHo=o(" (Data2VecAudio model)"),iHo=l(),lF=a("li"),$ge=a("strong"),dHo=o("unispeech-sat"),cHo=o(" \u2014 "),jG=a("a"),fHo=o("UniSpeechSatForXVector"),mHo=o(" (UniSpeechSat model)"),gHo=l(),iF=a("li"),Ige=a("strong"),hHo=o("wav2vec2"),pHo=o(" \u2014 "),DG=a("a"),_Ho=o("Wav2Vec2ForXVector"),uHo=o(" (Wav2Vec2 model)"),bHo=l(),dF=a("li"),qge=a("strong"),FHo=o("wavlm"),vHo=o(" \u2014 "),GG=a("a"),THo=o("WavLMForXVector"),MHo=o(" (WavLM model)"),EHo=l(),cF=a("p"),CHo=o("The model is set in evaluation mode by default using "),Nge=a("code"),wHo=o("model.eval()"),AHo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),jge=a("code"),yHo=o("model.train()"),LHo=l(),Dge=a("p"),xHo=o("Examples:"),kHo=l(),f(wA.$$.fragment),ABe=l(),Jd=a("h2"),fF=a("a"),Gge=a("span"),f(AA.$$.fragment),SHo=l(),Oge=a("span"),RHo=o("AutoModelForMaskedImageModeling"),yBe=l(),hr=a("div"),f(yA.$$.fragment),BHo=l(),Yd=a("p"),PHo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),OG=a("a"),$Ho=o("from_pretrained()"),IHo=o(" class method or the "),VG=a("a"),qHo=o("from_config()"),NHo=o(` class
method.`),jHo=l(),LA=a("p"),DHo=o("This class cannot be instantiated directly using "),Vge=a("code"),GHo=o("__init__()"),OHo=o(" (throws an error)."),VHo=l(),it=a("div"),f(xA.$$.fragment),XHo=l(),Xge=a("p"),zHo=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),QHo=l(),Kd=a("p"),WHo=o(`Note:
Loading a model from its configuration file does `),zge=a("strong"),HHo=o("not"),UHo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),XG=a("a"),JHo=o("from_pretrained()"),YHo=o(" to load the model weights."),KHo=l(),Qge=a("p"),ZHo=o("Examples:"),eUo=l(),f(kA.$$.fragment),oUo=l(),oo=a("div"),f(SA.$$.fragment),rUo=l(),Wge=a("p"),tUo=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),aUo=l(),fn=a("p"),nUo=o("The model class to instantiate is selected based on the "),Hge=a("code"),sUo=o("model_type"),lUo=o(` property of the config object (either
passed as an argument or loaded from `),Uge=a("code"),iUo=o("pretrained_model_name_or_path"),dUo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jge=a("code"),cUo=o("pretrained_model_name_or_path"),fUo=o(":"),mUo=l(),Zd=a("ul"),mF=a("li"),Yge=a("strong"),gUo=o("deit"),hUo=o(" \u2014 "),zG=a("a"),pUo=o("DeiTForMaskedImageModeling"),_Uo=o(" (DeiT model)"),uUo=l(),gF=a("li"),Kge=a("strong"),bUo=o("swin"),FUo=o(" \u2014 "),QG=a("a"),vUo=o("SwinForMaskedImageModeling"),TUo=o(" (Swin model)"),MUo=l(),hF=a("li"),Zge=a("strong"),EUo=o("vit"),CUo=o(" \u2014 "),WG=a("a"),wUo=o("ViTForMaskedImageModeling"),AUo=o(" (ViT model)"),yUo=l(),pF=a("p"),LUo=o("The model is set in evaluation mode by default using "),ehe=a("code"),xUo=o("model.eval()"),kUo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ohe=a("code"),SUo=o("model.train()"),RUo=l(),rhe=a("p"),BUo=o("Examples:"),PUo=l(),f(RA.$$.fragment),LBe=l(),ec=a("h2"),_F=a("a"),the=a("span"),f(BA.$$.fragment),$Uo=l(),ahe=a("span"),IUo=o("AutoModelForObjectDetection"),xBe=l(),pr=a("div"),f(PA.$$.fragment),qUo=l(),oc=a("p"),NUo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),HG=a("a"),jUo=o("from_pretrained()"),DUo=o(" class method or the "),UG=a("a"),GUo=o("from_config()"),OUo=o(` class
method.`),VUo=l(),$A=a("p"),XUo=o("This class cannot be instantiated directly using "),nhe=a("code"),zUo=o("__init__()"),QUo=o(" (throws an error)."),WUo=l(),dt=a("div"),f(IA.$$.fragment),HUo=l(),she=a("p"),UUo=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),JUo=l(),rc=a("p"),YUo=o(`Note:
Loading a model from its configuration file does `),lhe=a("strong"),KUo=o("not"),ZUo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),JG=a("a"),eJo=o("from_pretrained()"),oJo=o(" to load the model weights."),rJo=l(),ihe=a("p"),tJo=o("Examples:"),aJo=l(),f(qA.$$.fragment),nJo=l(),ro=a("div"),f(NA.$$.fragment),sJo=l(),dhe=a("p"),lJo=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),iJo=l(),mn=a("p"),dJo=o("The model class to instantiate is selected based on the "),che=a("code"),cJo=o("model_type"),fJo=o(` property of the config object (either
passed as an argument or loaded from `),fhe=a("code"),mJo=o("pretrained_model_name_or_path"),gJo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mhe=a("code"),hJo=o("pretrained_model_name_or_path"),pJo=o(":"),_Jo=l(),ghe=a("ul"),uF=a("li"),hhe=a("strong"),uJo=o("detr"),bJo=o(" \u2014 "),YG=a("a"),FJo=o("DetrForObjectDetection"),vJo=o(" (DETR model)"),TJo=l(),bF=a("p"),MJo=o("The model is set in evaluation mode by default using "),phe=a("code"),EJo=o("model.eval()"),CJo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_he=a("code"),wJo=o("model.train()"),AJo=l(),uhe=a("p"),yJo=o("Examples:"),LJo=l(),f(jA.$$.fragment),kBe=l(),tc=a("h2"),FF=a("a"),bhe=a("span"),f(DA.$$.fragment),xJo=l(),Fhe=a("span"),kJo=o("AutoModelForImageSegmentation"),SBe=l(),_r=a("div"),f(GA.$$.fragment),SJo=l(),ac=a("p"),RJo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),KG=a("a"),BJo=o("from_pretrained()"),PJo=o(" class method or the "),ZG=a("a"),$Jo=o("from_config()"),IJo=o(` class
method.`),qJo=l(),OA=a("p"),NJo=o("This class cannot be instantiated directly using "),vhe=a("code"),jJo=o("__init__()"),DJo=o(" (throws an error)."),GJo=l(),ct=a("div"),f(VA.$$.fragment),OJo=l(),The=a("p"),VJo=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),XJo=l(),nc=a("p"),zJo=o(`Note:
Loading a model from its configuration file does `),Mhe=a("strong"),QJo=o("not"),WJo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),eO=a("a"),HJo=o("from_pretrained()"),UJo=o(" to load the model weights."),JJo=l(),Ehe=a("p"),YJo=o("Examples:"),KJo=l(),f(XA.$$.fragment),ZJo=l(),to=a("div"),f(zA.$$.fragment),eYo=l(),Che=a("p"),oYo=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),rYo=l(),gn=a("p"),tYo=o("The model class to instantiate is selected based on the "),whe=a("code"),aYo=o("model_type"),nYo=o(` property of the config object (either
passed as an argument or loaded from `),Ahe=a("code"),sYo=o("pretrained_model_name_or_path"),lYo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yhe=a("code"),iYo=o("pretrained_model_name_or_path"),dYo=o(":"),cYo=l(),Lhe=a("ul"),vF=a("li"),xhe=a("strong"),fYo=o("detr"),mYo=o(" \u2014 "),oO=a("a"),gYo=o("DetrForSegmentation"),hYo=o(" (DETR model)"),pYo=l(),TF=a("p"),_Yo=o("The model is set in evaluation mode by default using "),khe=a("code"),uYo=o("model.eval()"),bYo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),She=a("code"),FYo=o("model.train()"),vYo=l(),Rhe=a("p"),TYo=o("Examples:"),MYo=l(),f(QA.$$.fragment),RBe=l(),sc=a("h2"),MF=a("a"),Bhe=a("span"),f(WA.$$.fragment),EYo=l(),Phe=a("span"),CYo=o("AutoModelForSemanticSegmentation"),BBe=l(),ur=a("div"),f(HA.$$.fragment),wYo=l(),lc=a("p"),AYo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),rO=a("a"),yYo=o("from_pretrained()"),LYo=o(" class method or the "),tO=a("a"),xYo=o("from_config()"),kYo=o(` class
method.`),SYo=l(),UA=a("p"),RYo=o("This class cannot be instantiated directly using "),$he=a("code"),BYo=o("__init__()"),PYo=o(" (throws an error)."),$Yo=l(),ft=a("div"),f(JA.$$.fragment),IYo=l(),Ihe=a("p"),qYo=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),NYo=l(),ic=a("p"),jYo=o(`Note:
Loading a model from its configuration file does `),qhe=a("strong"),DYo=o("not"),GYo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aO=a("a"),OYo=o("from_pretrained()"),VYo=o(" to load the model weights."),XYo=l(),Nhe=a("p"),zYo=o("Examples:"),QYo=l(),f(YA.$$.fragment),WYo=l(),ao=a("div"),f(KA.$$.fragment),HYo=l(),jhe=a("p"),UYo=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),JYo=l(),hn=a("p"),YYo=o("The model class to instantiate is selected based on the "),Dhe=a("code"),KYo=o("model_type"),ZYo=o(` property of the config object (either
passed as an argument or loaded from `),Ghe=a("code"),eKo=o("pretrained_model_name_or_path"),oKo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ohe=a("code"),rKo=o("pretrained_model_name_or_path"),tKo=o(":"),aKo=l(),dc=a("ul"),EF=a("li"),Vhe=a("strong"),nKo=o("beit"),sKo=o(" \u2014 "),nO=a("a"),lKo=o("BeitForSemanticSegmentation"),iKo=o(" (BEiT model)"),dKo=l(),CF=a("li"),Xhe=a("strong"),cKo=o("dpt"),fKo=o(" \u2014 "),sO=a("a"),mKo=o("DPTForSemanticSegmentation"),gKo=o(" (DPT model)"),hKo=l(),wF=a("li"),zhe=a("strong"),pKo=o("segformer"),_Ko=o(" \u2014 "),lO=a("a"),uKo=o("SegformerForSemanticSegmentation"),bKo=o(" (SegFormer model)"),FKo=l(),AF=a("p"),vKo=o("The model is set in evaluation mode by default using "),Qhe=a("code"),TKo=o("model.eval()"),MKo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Whe=a("code"),EKo=o("model.train()"),CKo=l(),Hhe=a("p"),wKo=o("Examples:"),AKo=l(),f(ZA.$$.fragment),PBe=l(),cc=a("h2"),yF=a("a"),Uhe=a("span"),f(e0.$$.fragment),yKo=l(),Jhe=a("span"),LKo=o("AutoModelForInstanceSegmentation"),$Be=l(),br=a("div"),f(o0.$$.fragment),xKo=l(),fc=a("p"),kKo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),iO=a("a"),SKo=o("from_pretrained()"),RKo=o(" class method or the "),dO=a("a"),BKo=o("from_config()"),PKo=o(` class
method.`),$Ko=l(),r0=a("p"),IKo=o("This class cannot be instantiated directly using "),Yhe=a("code"),qKo=o("__init__()"),NKo=o(" (throws an error)."),jKo=l(),mt=a("div"),f(t0.$$.fragment),DKo=l(),Khe=a("p"),GKo=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),OKo=l(),mc=a("p"),VKo=o(`Note:
Loading a model from its configuration file does `),Zhe=a("strong"),XKo=o("not"),zKo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cO=a("a"),QKo=o("from_pretrained()"),WKo=o(" to load the model weights."),HKo=l(),epe=a("p"),UKo=o("Examples:"),JKo=l(),f(a0.$$.fragment),YKo=l(),no=a("div"),f(n0.$$.fragment),KKo=l(),ope=a("p"),ZKo=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),eZo=l(),pn=a("p"),oZo=o("The model class to instantiate is selected based on the "),rpe=a("code"),rZo=o("model_type"),tZo=o(` property of the config object (either
passed as an argument or loaded from `),tpe=a("code"),aZo=o("pretrained_model_name_or_path"),nZo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ape=a("code"),sZo=o("pretrained_model_name_or_path"),lZo=o(":"),iZo=l(),npe=a("ul"),LF=a("li"),spe=a("strong"),dZo=o("maskformer"),cZo=o(" \u2014 "),fO=a("a"),fZo=o("MaskFormerForInstanceSegmentation"),mZo=o(" (MaskFormer model)"),gZo=l(),xF=a("p"),hZo=o("The model is set in evaluation mode by default using "),lpe=a("code"),pZo=o("model.eval()"),_Zo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ipe=a("code"),uZo=o("model.train()"),bZo=l(),dpe=a("p"),FZo=o("Examples:"),vZo=l(),f(s0.$$.fragment),IBe=l(),gc=a("h2"),kF=a("a"),cpe=a("span"),f(l0.$$.fragment),TZo=l(),fpe=a("span"),MZo=o("TFAutoModel"),qBe=l(),Fr=a("div"),f(i0.$$.fragment),EZo=l(),hc=a("p"),CZo=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),mO=a("a"),wZo=o("from_pretrained()"),AZo=o(" class method or the "),gO=a("a"),yZo=o("from_config()"),LZo=o(` class
method.`),xZo=l(),d0=a("p"),kZo=o("This class cannot be instantiated directly using "),mpe=a("code"),SZo=o("__init__()"),RZo=o(" (throws an error)."),BZo=l(),gt=a("div"),f(c0.$$.fragment),PZo=l(),gpe=a("p"),$Zo=o("Instantiates one of the base model classes of the library from a configuration."),IZo=l(),pc=a("p"),qZo=o(`Note:
Loading a model from its configuration file does `),hpe=a("strong"),NZo=o("not"),jZo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hO=a("a"),DZo=o("from_pretrained()"),GZo=o(" to load the model weights."),OZo=l(),ppe=a("p"),VZo=o("Examples:"),XZo=l(),f(f0.$$.fragment),zZo=l(),ho=a("div"),f(m0.$$.fragment),QZo=l(),_pe=a("p"),WZo=o("Instantiate one of the base model classes of the library from a pretrained model."),HZo=l(),_n=a("p"),UZo=o("The model class to instantiate is selected based on the "),upe=a("code"),JZo=o("model_type"),YZo=o(` property of the config object (either
passed as an argument or loaded from `),bpe=a("code"),KZo=o("pretrained_model_name_or_path"),ZZo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fpe=a("code"),eer=o("pretrained_model_name_or_path"),oer=o(":"),rer=l(),x=a("ul"),SF=a("li"),vpe=a("strong"),ter=o("albert"),aer=o(" \u2014 "),pO=a("a"),ner=o("TFAlbertModel"),ser=o(" (ALBERT model)"),ler=l(),RF=a("li"),Tpe=a("strong"),ier=o("bart"),der=o(" \u2014 "),_O=a("a"),cer=o("TFBartModel"),fer=o(" (BART model)"),mer=l(),BF=a("li"),Mpe=a("strong"),ger=o("bert"),her=o(" \u2014 "),uO=a("a"),per=o("TFBertModel"),_er=o(" (BERT model)"),uer=l(),PF=a("li"),Epe=a("strong"),ber=o("blenderbot"),Fer=o(" \u2014 "),bO=a("a"),ver=o("TFBlenderbotModel"),Ter=o(" (Blenderbot model)"),Mer=l(),$F=a("li"),Cpe=a("strong"),Eer=o("blenderbot-small"),Cer=o(" \u2014 "),FO=a("a"),wer=o("TFBlenderbotSmallModel"),Aer=o(" (BlenderbotSmall model)"),yer=l(),IF=a("li"),wpe=a("strong"),Ler=o("camembert"),xer=o(" \u2014 "),vO=a("a"),ker=o("TFCamembertModel"),Ser=o(" (CamemBERT model)"),Rer=l(),qF=a("li"),Ape=a("strong"),Ber=o("clip"),Per=o(" \u2014 "),TO=a("a"),$er=o("TFCLIPModel"),Ier=o(" (CLIP model)"),qer=l(),NF=a("li"),ype=a("strong"),Ner=o("convbert"),jer=o(" \u2014 "),MO=a("a"),Der=o("TFConvBertModel"),Ger=o(" (ConvBERT model)"),Oer=l(),jF=a("li"),Lpe=a("strong"),Ver=o("convnext"),Xer=o(" \u2014 "),EO=a("a"),zer=o("TFConvNextModel"),Qer=o(" (ConvNext model)"),Wer=l(),DF=a("li"),xpe=a("strong"),Her=o("ctrl"),Uer=o(" \u2014 "),CO=a("a"),Jer=o("TFCTRLModel"),Yer=o(" (CTRL model)"),Ker=l(),GF=a("li"),kpe=a("strong"),Zer=o("deberta"),eor=o(" \u2014 "),wO=a("a"),oor=o("TFDebertaModel"),ror=o(" (DeBERTa model)"),tor=l(),OF=a("li"),Spe=a("strong"),aor=o("deberta-v2"),nor=o(" \u2014 "),AO=a("a"),sor=o("TFDebertaV2Model"),lor=o(" (DeBERTa-v2 model)"),ior=l(),VF=a("li"),Rpe=a("strong"),dor=o("distilbert"),cor=o(" \u2014 "),yO=a("a"),mor=o("TFDistilBertModel"),gor=o(" (DistilBERT model)"),hor=l(),XF=a("li"),Bpe=a("strong"),por=o("dpr"),_or=o(" \u2014 "),LO=a("a"),uor=o("TFDPRQuestionEncoder"),bor=o(" (DPR model)"),For=l(),zF=a("li"),Ppe=a("strong"),vor=o("electra"),Tor=o(" \u2014 "),xO=a("a"),Mor=o("TFElectraModel"),Eor=o(" (ELECTRA model)"),Cor=l(),QF=a("li"),$pe=a("strong"),wor=o("flaubert"),Aor=o(" \u2014 "),kO=a("a"),yor=o("TFFlaubertModel"),Lor=o(" (FlauBERT model)"),xor=l(),Gs=a("li"),Ipe=a("strong"),kor=o("funnel"),Sor=o(" \u2014 "),SO=a("a"),Ror=o("TFFunnelModel"),Bor=o(" or "),RO=a("a"),Por=o("TFFunnelBaseModel"),$or=o(" (Funnel Transformer model)"),Ior=l(),WF=a("li"),qpe=a("strong"),qor=o("gpt2"),Nor=o(" \u2014 "),BO=a("a"),jor=o("TFGPT2Model"),Dor=o(" (OpenAI GPT-2 model)"),Gor=l(),HF=a("li"),Npe=a("strong"),Oor=o("gptj"),Vor=o(" \u2014 "),PO=a("a"),Xor=o("TFGPTJModel"),zor=o(" (GPT-J model)"),Qor=l(),UF=a("li"),jpe=a("strong"),Wor=o("hubert"),Hor=o(" \u2014 "),$O=a("a"),Uor=o("TFHubertModel"),Jor=o(" (Hubert model)"),Yor=l(),JF=a("li"),Dpe=a("strong"),Kor=o("layoutlm"),Zor=o(" \u2014 "),IO=a("a"),err=o("TFLayoutLMModel"),orr=o(" (LayoutLM model)"),rrr=l(),YF=a("li"),Gpe=a("strong"),trr=o("led"),arr=o(" \u2014 "),qO=a("a"),nrr=o("TFLEDModel"),srr=o(" (LED model)"),lrr=l(),KF=a("li"),Ope=a("strong"),irr=o("longformer"),drr=o(" \u2014 "),NO=a("a"),crr=o("TFLongformerModel"),frr=o(" (Longformer model)"),mrr=l(),ZF=a("li"),Vpe=a("strong"),grr=o("lxmert"),hrr=o(" \u2014 "),jO=a("a"),prr=o("TFLxmertModel"),_rr=o(" (LXMERT model)"),urr=l(),ev=a("li"),Xpe=a("strong"),brr=o("marian"),Frr=o(" \u2014 "),DO=a("a"),vrr=o("TFMarianModel"),Trr=o(" (Marian model)"),Mrr=l(),ov=a("li"),zpe=a("strong"),Err=o("mbart"),Crr=o(" \u2014 "),GO=a("a"),wrr=o("TFMBartModel"),Arr=o(" (mBART model)"),yrr=l(),rv=a("li"),Qpe=a("strong"),Lrr=o("mobilebert"),xrr=o(" \u2014 "),OO=a("a"),krr=o("TFMobileBertModel"),Srr=o(" (MobileBERT model)"),Rrr=l(),tv=a("li"),Wpe=a("strong"),Brr=o("mpnet"),Prr=o(" \u2014 "),VO=a("a"),$rr=o("TFMPNetModel"),Irr=o(" (MPNet model)"),qrr=l(),av=a("li"),Hpe=a("strong"),Nrr=o("mt5"),jrr=o(" \u2014 "),XO=a("a"),Drr=o("TFMT5Model"),Grr=o(" (mT5 model)"),Orr=l(),nv=a("li"),Upe=a("strong"),Vrr=o("openai-gpt"),Xrr=o(" \u2014 "),zO=a("a"),zrr=o("TFOpenAIGPTModel"),Qrr=o(" (OpenAI GPT model)"),Wrr=l(),sv=a("li"),Jpe=a("strong"),Hrr=o("pegasus"),Urr=o(" \u2014 "),QO=a("a"),Jrr=o("TFPegasusModel"),Yrr=o(" (Pegasus model)"),Krr=l(),lv=a("li"),Ype=a("strong"),Zrr=o("rembert"),etr=o(" \u2014 "),WO=a("a"),otr=o("TFRemBertModel"),rtr=o(" (RemBERT model)"),ttr=l(),iv=a("li"),Kpe=a("strong"),atr=o("roberta"),ntr=o(" \u2014 "),HO=a("a"),str=o("TFRobertaModel"),ltr=o(" (RoBERTa model)"),itr=l(),dv=a("li"),Zpe=a("strong"),dtr=o("roformer"),ctr=o(" \u2014 "),UO=a("a"),ftr=o("TFRoFormerModel"),mtr=o(" (RoFormer model)"),gtr=l(),cv=a("li"),e_e=a("strong"),htr=o("speech_to_text"),ptr=o(" \u2014 "),JO=a("a"),_tr=o("TFSpeech2TextModel"),utr=o(" (Speech2Text model)"),btr=l(),fv=a("li"),o_e=a("strong"),Ftr=o("t5"),vtr=o(" \u2014 "),YO=a("a"),Ttr=o("TFT5Model"),Mtr=o(" (T5 model)"),Etr=l(),mv=a("li"),r_e=a("strong"),Ctr=o("tapas"),wtr=o(" \u2014 "),KO=a("a"),Atr=o("TFTapasModel"),ytr=o(" (TAPAS model)"),Ltr=l(),gv=a("li"),t_e=a("strong"),xtr=o("transfo-xl"),ktr=o(" \u2014 "),ZO=a("a"),Str=o("TFTransfoXLModel"),Rtr=o(" (Transformer-XL model)"),Btr=l(),hv=a("li"),a_e=a("strong"),Ptr=o("vit"),$tr=o(" \u2014 "),eV=a("a"),Itr=o("TFViTModel"),qtr=o(" (ViT model)"),Ntr=l(),pv=a("li"),n_e=a("strong"),jtr=o("vit_mae"),Dtr=o(" \u2014 "),oV=a("a"),Gtr=o("TFViTMAEModel"),Otr=o(" (ViTMAE model)"),Vtr=l(),_v=a("li"),s_e=a("strong"),Xtr=o("wav2vec2"),ztr=o(" \u2014 "),rV=a("a"),Qtr=o("TFWav2Vec2Model"),Wtr=o(" (Wav2Vec2 model)"),Htr=l(),uv=a("li"),l_e=a("strong"),Utr=o("xlm"),Jtr=o(" \u2014 "),tV=a("a"),Ytr=o("TFXLMModel"),Ktr=o(" (XLM model)"),Ztr=l(),bv=a("li"),i_e=a("strong"),ear=o("xlm-roberta"),oar=o(" \u2014 "),aV=a("a"),rar=o("TFXLMRobertaModel"),tar=o(" (XLM-RoBERTa model)"),aar=l(),Fv=a("li"),d_e=a("strong"),nar=o("xlnet"),sar=o(" \u2014 "),nV=a("a"),lar=o("TFXLNetModel"),iar=o(" (XLNet model)"),dar=l(),c_e=a("p"),car=o("Examples:"),far=l(),f(g0.$$.fragment),NBe=l(),_c=a("h2"),vv=a("a"),f_e=a("span"),f(h0.$$.fragment),mar=l(),m_e=a("span"),gar=o("TFAutoModelForPreTraining"),jBe=l(),vr=a("div"),f(p0.$$.fragment),har=l(),uc=a("p"),par=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),sV=a("a"),_ar=o("from_pretrained()"),uar=o(" class method or the "),lV=a("a"),bar=o("from_config()"),Far=o(` class
method.`),Tar=l(),_0=a("p"),Mar=o("This class cannot be instantiated directly using "),g_e=a("code"),Ear=o("__init__()"),Car=o(" (throws an error)."),war=l(),ht=a("div"),f(u0.$$.fragment),Aar=l(),h_e=a("p"),yar=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Lar=l(),bc=a("p"),xar=o(`Note:
Loading a model from its configuration file does `),p_e=a("strong"),kar=o("not"),Sar=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),iV=a("a"),Rar=o("from_pretrained()"),Bar=o(" to load the model weights."),Par=l(),__e=a("p"),$ar=o("Examples:"),Iar=l(),f(b0.$$.fragment),qar=l(),po=a("div"),f(F0.$$.fragment),Nar=l(),u_e=a("p"),jar=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Dar=l(),un=a("p"),Gar=o("The model class to instantiate is selected based on the "),b_e=a("code"),Oar=o("model_type"),Var=o(` property of the config object (either
passed as an argument or loaded from `),F_e=a("code"),Xar=o("pretrained_model_name_or_path"),zar=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),v_e=a("code"),Qar=o("pretrained_model_name_or_path"),War=o(":"),Har=l(),H=a("ul"),Tv=a("li"),T_e=a("strong"),Uar=o("albert"),Jar=o(" \u2014 "),dV=a("a"),Yar=o("TFAlbertForPreTraining"),Kar=o(" (ALBERT model)"),Zar=l(),Mv=a("li"),M_e=a("strong"),enr=o("bart"),onr=o(" \u2014 "),cV=a("a"),rnr=o("TFBartForConditionalGeneration"),tnr=o(" (BART model)"),anr=l(),Ev=a("li"),E_e=a("strong"),nnr=o("bert"),snr=o(" \u2014 "),fV=a("a"),lnr=o("TFBertForPreTraining"),inr=o(" (BERT model)"),dnr=l(),Cv=a("li"),C_e=a("strong"),cnr=o("camembert"),fnr=o(" \u2014 "),mV=a("a"),mnr=o("TFCamembertForMaskedLM"),gnr=o(" (CamemBERT model)"),hnr=l(),wv=a("li"),w_e=a("strong"),pnr=o("ctrl"),_nr=o(" \u2014 "),gV=a("a"),unr=o("TFCTRLLMHeadModel"),bnr=o(" (CTRL model)"),Fnr=l(),Av=a("li"),A_e=a("strong"),vnr=o("distilbert"),Tnr=o(" \u2014 "),hV=a("a"),Mnr=o("TFDistilBertForMaskedLM"),Enr=o(" (DistilBERT model)"),Cnr=l(),yv=a("li"),y_e=a("strong"),wnr=o("electra"),Anr=o(" \u2014 "),pV=a("a"),ynr=o("TFElectraForPreTraining"),Lnr=o(" (ELECTRA model)"),xnr=l(),Lv=a("li"),L_e=a("strong"),knr=o("flaubert"),Snr=o(" \u2014 "),_V=a("a"),Rnr=o("TFFlaubertWithLMHeadModel"),Bnr=o(" (FlauBERT model)"),Pnr=l(),xv=a("li"),x_e=a("strong"),$nr=o("funnel"),Inr=o(" \u2014 "),uV=a("a"),qnr=o("TFFunnelForPreTraining"),Nnr=o(" (Funnel Transformer model)"),jnr=l(),kv=a("li"),k_e=a("strong"),Dnr=o("gpt2"),Gnr=o(" \u2014 "),bV=a("a"),Onr=o("TFGPT2LMHeadModel"),Vnr=o(" (OpenAI GPT-2 model)"),Xnr=l(),Sv=a("li"),S_e=a("strong"),znr=o("layoutlm"),Qnr=o(" \u2014 "),FV=a("a"),Wnr=o("TFLayoutLMForMaskedLM"),Hnr=o(" (LayoutLM model)"),Unr=l(),Rv=a("li"),R_e=a("strong"),Jnr=o("lxmert"),Ynr=o(" \u2014 "),vV=a("a"),Knr=o("TFLxmertForPreTraining"),Znr=o(" (LXMERT model)"),esr=l(),Bv=a("li"),B_e=a("strong"),osr=o("mobilebert"),rsr=o(" \u2014 "),TV=a("a"),tsr=o("TFMobileBertForPreTraining"),asr=o(" (MobileBERT model)"),nsr=l(),Pv=a("li"),P_e=a("strong"),ssr=o("mpnet"),lsr=o(" \u2014 "),MV=a("a"),isr=o("TFMPNetForMaskedLM"),dsr=o(" (MPNet model)"),csr=l(),$v=a("li"),$_e=a("strong"),fsr=o("openai-gpt"),msr=o(" \u2014 "),EV=a("a"),gsr=o("TFOpenAIGPTLMHeadModel"),hsr=o(" (OpenAI GPT model)"),psr=l(),Iv=a("li"),I_e=a("strong"),_sr=o("roberta"),usr=o(" \u2014 "),CV=a("a"),bsr=o("TFRobertaForMaskedLM"),Fsr=o(" (RoBERTa model)"),vsr=l(),qv=a("li"),q_e=a("strong"),Tsr=o("t5"),Msr=o(" \u2014 "),wV=a("a"),Esr=o("TFT5ForConditionalGeneration"),Csr=o(" (T5 model)"),wsr=l(),Nv=a("li"),N_e=a("strong"),Asr=o("tapas"),ysr=o(" \u2014 "),AV=a("a"),Lsr=o("TFTapasForMaskedLM"),xsr=o(" (TAPAS model)"),ksr=l(),jv=a("li"),j_e=a("strong"),Ssr=o("transfo-xl"),Rsr=o(" \u2014 "),yV=a("a"),Bsr=o("TFTransfoXLLMHeadModel"),Psr=o(" (Transformer-XL model)"),$sr=l(),Dv=a("li"),D_e=a("strong"),Isr=o("vit_mae"),qsr=o(" \u2014 "),LV=a("a"),Nsr=o("TFViTMAEForPreTraining"),jsr=o(" (ViTMAE model)"),Dsr=l(),Gv=a("li"),G_e=a("strong"),Gsr=o("xlm"),Osr=o(" \u2014 "),xV=a("a"),Vsr=o("TFXLMWithLMHeadModel"),Xsr=o(" (XLM model)"),zsr=l(),Ov=a("li"),O_e=a("strong"),Qsr=o("xlm-roberta"),Wsr=o(" \u2014 "),kV=a("a"),Hsr=o("TFXLMRobertaForMaskedLM"),Usr=o(" (XLM-RoBERTa model)"),Jsr=l(),Vv=a("li"),V_e=a("strong"),Ysr=o("xlnet"),Ksr=o(" \u2014 "),SV=a("a"),Zsr=o("TFXLNetLMHeadModel"),elr=o(" (XLNet model)"),olr=l(),X_e=a("p"),rlr=o("Examples:"),tlr=l(),f(v0.$$.fragment),DBe=l(),Fc=a("h2"),Xv=a("a"),z_e=a("span"),f(T0.$$.fragment),alr=l(),Q_e=a("span"),nlr=o("TFAutoModelForCausalLM"),GBe=l(),Tr=a("div"),f(M0.$$.fragment),slr=l(),vc=a("p"),llr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),RV=a("a"),ilr=o("from_pretrained()"),dlr=o(" class method or the "),BV=a("a"),clr=o("from_config()"),flr=o(` class
method.`),mlr=l(),E0=a("p"),glr=o("This class cannot be instantiated directly using "),W_e=a("code"),hlr=o("__init__()"),plr=o(" (throws an error)."),_lr=l(),pt=a("div"),f(C0.$$.fragment),ulr=l(),H_e=a("p"),blr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Flr=l(),Tc=a("p"),vlr=o(`Note:
Loading a model from its configuration file does `),U_e=a("strong"),Tlr=o("not"),Mlr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),PV=a("a"),Elr=o("from_pretrained()"),Clr=o(" to load the model weights."),wlr=l(),J_e=a("p"),Alr=o("Examples:"),ylr=l(),f(w0.$$.fragment),Llr=l(),_o=a("div"),f(A0.$$.fragment),xlr=l(),Y_e=a("p"),klr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Slr=l(),bn=a("p"),Rlr=o("The model class to instantiate is selected based on the "),K_e=a("code"),Blr=o("model_type"),Plr=o(` property of the config object (either
passed as an argument or loaded from `),Z_e=a("code"),$lr=o("pretrained_model_name_or_path"),Ilr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),eue=a("code"),qlr=o("pretrained_model_name_or_path"),Nlr=o(":"),jlr=l(),fe=a("ul"),zv=a("li"),oue=a("strong"),Dlr=o("bert"),Glr=o(" \u2014 "),$V=a("a"),Olr=o("TFBertLMHeadModel"),Vlr=o(" (BERT model)"),Xlr=l(),Qv=a("li"),rue=a("strong"),zlr=o("camembert"),Qlr=o(" \u2014 "),IV=a("a"),Wlr=o("TFCamembertForCausalLM"),Hlr=o(" (CamemBERT model)"),Ulr=l(),Wv=a("li"),tue=a("strong"),Jlr=o("ctrl"),Ylr=o(" \u2014 "),qV=a("a"),Klr=o("TFCTRLLMHeadModel"),Zlr=o(" (CTRL model)"),eir=l(),Hv=a("li"),aue=a("strong"),oir=o("gpt2"),rir=o(" \u2014 "),NV=a("a"),tir=o("TFGPT2LMHeadModel"),air=o(" (OpenAI GPT-2 model)"),nir=l(),Uv=a("li"),nue=a("strong"),sir=o("gptj"),lir=o(" \u2014 "),jV=a("a"),iir=o("TFGPTJForCausalLM"),dir=o(" (GPT-J model)"),cir=l(),Jv=a("li"),sue=a("strong"),fir=o("openai-gpt"),mir=o(" \u2014 "),DV=a("a"),gir=o("TFOpenAIGPTLMHeadModel"),hir=o(" (OpenAI GPT model)"),pir=l(),Yv=a("li"),lue=a("strong"),_ir=o("rembert"),uir=o(" \u2014 "),GV=a("a"),bir=o("TFRemBertForCausalLM"),Fir=o(" (RemBERT model)"),vir=l(),Kv=a("li"),iue=a("strong"),Tir=o("roberta"),Mir=o(" \u2014 "),OV=a("a"),Eir=o("TFRobertaForCausalLM"),Cir=o(" (RoBERTa model)"),wir=l(),Zv=a("li"),due=a("strong"),Air=o("roformer"),yir=o(" \u2014 "),VV=a("a"),Lir=o("TFRoFormerForCausalLM"),xir=o(" (RoFormer model)"),kir=l(),eT=a("li"),cue=a("strong"),Sir=o("transfo-xl"),Rir=o(" \u2014 "),XV=a("a"),Bir=o("TFTransfoXLLMHeadModel"),Pir=o(" (Transformer-XL model)"),$ir=l(),oT=a("li"),fue=a("strong"),Iir=o("xlm"),qir=o(" \u2014 "),zV=a("a"),Nir=o("TFXLMWithLMHeadModel"),jir=o(" (XLM model)"),Dir=l(),rT=a("li"),mue=a("strong"),Gir=o("xlnet"),Oir=o(" \u2014 "),QV=a("a"),Vir=o("TFXLNetLMHeadModel"),Xir=o(" (XLNet model)"),zir=l(),gue=a("p"),Qir=o("Examples:"),Wir=l(),f(y0.$$.fragment),OBe=l(),Mc=a("h2"),tT=a("a"),hue=a("span"),f(L0.$$.fragment),Hir=l(),pue=a("span"),Uir=o("TFAutoModelForImageClassification"),VBe=l(),Mr=a("div"),f(x0.$$.fragment),Jir=l(),Ec=a("p"),Yir=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),WV=a("a"),Kir=o("from_pretrained()"),Zir=o(" class method or the "),HV=a("a"),edr=o("from_config()"),odr=o(` class
method.`),rdr=l(),k0=a("p"),tdr=o("This class cannot be instantiated directly using "),_ue=a("code"),adr=o("__init__()"),ndr=o(" (throws an error)."),sdr=l(),_t=a("div"),f(S0.$$.fragment),ldr=l(),uue=a("p"),idr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),ddr=l(),Cc=a("p"),cdr=o(`Note:
Loading a model from its configuration file does `),bue=a("strong"),fdr=o("not"),mdr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),UV=a("a"),gdr=o("from_pretrained()"),hdr=o(" to load the model weights."),pdr=l(),Fue=a("p"),_dr=o("Examples:"),udr=l(),f(R0.$$.fragment),bdr=l(),uo=a("div"),f(B0.$$.fragment),Fdr=l(),vue=a("p"),vdr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Tdr=l(),Fn=a("p"),Mdr=o("The model class to instantiate is selected based on the "),Tue=a("code"),Edr=o("model_type"),Cdr=o(` property of the config object (either
passed as an argument or loaded from `),Mue=a("code"),wdr=o("pretrained_model_name_or_path"),Adr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Eue=a("code"),ydr=o("pretrained_model_name_or_path"),Ldr=o(":"),xdr=l(),P0=a("ul"),aT=a("li"),Cue=a("strong"),kdr=o("convnext"),Sdr=o(" \u2014 "),JV=a("a"),Rdr=o("TFConvNextForImageClassification"),Bdr=o(" (ConvNext model)"),Pdr=l(),nT=a("li"),wue=a("strong"),$dr=o("vit"),Idr=o(" \u2014 "),YV=a("a"),qdr=o("TFViTForImageClassification"),Ndr=o(" (ViT model)"),jdr=l(),Aue=a("p"),Ddr=o("Examples:"),Gdr=l(),f($0.$$.fragment),XBe=l(),wc=a("h2"),sT=a("a"),yue=a("span"),f(I0.$$.fragment),Odr=l(),Lue=a("span"),Vdr=o("TFAutoModelForMaskedLM"),zBe=l(),Er=a("div"),f(q0.$$.fragment),Xdr=l(),Ac=a("p"),zdr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),KV=a("a"),Qdr=o("from_pretrained()"),Wdr=o(" class method or the "),ZV=a("a"),Hdr=o("from_config()"),Udr=o(` class
method.`),Jdr=l(),N0=a("p"),Ydr=o("This class cannot be instantiated directly using "),xue=a("code"),Kdr=o("__init__()"),Zdr=o(" (throws an error)."),ecr=l(),ut=a("div"),f(j0.$$.fragment),ocr=l(),kue=a("p"),rcr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),tcr=l(),yc=a("p"),acr=o(`Note:
Loading a model from its configuration file does `),Sue=a("strong"),ncr=o("not"),scr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),eX=a("a"),lcr=o("from_pretrained()"),icr=o(" to load the model weights."),dcr=l(),Rue=a("p"),ccr=o("Examples:"),fcr=l(),f(D0.$$.fragment),mcr=l(),bo=a("div"),f(G0.$$.fragment),gcr=l(),Bue=a("p"),hcr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),pcr=l(),vn=a("p"),_cr=o("The model class to instantiate is selected based on the "),Pue=a("code"),ucr=o("model_type"),bcr=o(` property of the config object (either
passed as an argument or loaded from `),$ue=a("code"),Fcr=o("pretrained_model_name_or_path"),vcr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Iue=a("code"),Tcr=o("pretrained_model_name_or_path"),Mcr=o(":"),Ecr=l(),J=a("ul"),lT=a("li"),que=a("strong"),Ccr=o("albert"),wcr=o(" \u2014 "),oX=a("a"),Acr=o("TFAlbertForMaskedLM"),ycr=o(" (ALBERT model)"),Lcr=l(),iT=a("li"),Nue=a("strong"),xcr=o("bert"),kcr=o(" \u2014 "),rX=a("a"),Scr=o("TFBertForMaskedLM"),Rcr=o(" (BERT model)"),Bcr=l(),dT=a("li"),jue=a("strong"),Pcr=o("camembert"),$cr=o(" \u2014 "),tX=a("a"),Icr=o("TFCamembertForMaskedLM"),qcr=o(" (CamemBERT model)"),Ncr=l(),cT=a("li"),Due=a("strong"),jcr=o("convbert"),Dcr=o(" \u2014 "),aX=a("a"),Gcr=o("TFConvBertForMaskedLM"),Ocr=o(" (ConvBERT model)"),Vcr=l(),fT=a("li"),Gue=a("strong"),Xcr=o("deberta"),zcr=o(" \u2014 "),nX=a("a"),Qcr=o("TFDebertaForMaskedLM"),Wcr=o(" (DeBERTa model)"),Hcr=l(),mT=a("li"),Oue=a("strong"),Ucr=o("deberta-v2"),Jcr=o(" \u2014 "),sX=a("a"),Ycr=o("TFDebertaV2ForMaskedLM"),Kcr=o(" (DeBERTa-v2 model)"),Zcr=l(),gT=a("li"),Vue=a("strong"),efr=o("distilbert"),ofr=o(" \u2014 "),lX=a("a"),rfr=o("TFDistilBertForMaskedLM"),tfr=o(" (DistilBERT model)"),afr=l(),hT=a("li"),Xue=a("strong"),nfr=o("electra"),sfr=o(" \u2014 "),iX=a("a"),lfr=o("TFElectraForMaskedLM"),ifr=o(" (ELECTRA model)"),dfr=l(),pT=a("li"),zue=a("strong"),cfr=o("flaubert"),ffr=o(" \u2014 "),dX=a("a"),mfr=o("TFFlaubertWithLMHeadModel"),gfr=o(" (FlauBERT model)"),hfr=l(),_T=a("li"),Que=a("strong"),pfr=o("funnel"),_fr=o(" \u2014 "),cX=a("a"),ufr=o("TFFunnelForMaskedLM"),bfr=o(" (Funnel Transformer model)"),Ffr=l(),uT=a("li"),Wue=a("strong"),vfr=o("layoutlm"),Tfr=o(" \u2014 "),fX=a("a"),Mfr=o("TFLayoutLMForMaskedLM"),Efr=o(" (LayoutLM model)"),Cfr=l(),bT=a("li"),Hue=a("strong"),wfr=o("longformer"),Afr=o(" \u2014 "),mX=a("a"),yfr=o("TFLongformerForMaskedLM"),Lfr=o(" (Longformer model)"),xfr=l(),FT=a("li"),Uue=a("strong"),kfr=o("mobilebert"),Sfr=o(" \u2014 "),gX=a("a"),Rfr=o("TFMobileBertForMaskedLM"),Bfr=o(" (MobileBERT model)"),Pfr=l(),vT=a("li"),Jue=a("strong"),$fr=o("mpnet"),Ifr=o(" \u2014 "),hX=a("a"),qfr=o("TFMPNetForMaskedLM"),Nfr=o(" (MPNet model)"),jfr=l(),TT=a("li"),Yue=a("strong"),Dfr=o("rembert"),Gfr=o(" \u2014 "),pX=a("a"),Ofr=o("TFRemBertForMaskedLM"),Vfr=o(" (RemBERT model)"),Xfr=l(),MT=a("li"),Kue=a("strong"),zfr=o("roberta"),Qfr=o(" \u2014 "),_X=a("a"),Wfr=o("TFRobertaForMaskedLM"),Hfr=o(" (RoBERTa model)"),Ufr=l(),ET=a("li"),Zue=a("strong"),Jfr=o("roformer"),Yfr=o(" \u2014 "),uX=a("a"),Kfr=o("TFRoFormerForMaskedLM"),Zfr=o(" (RoFormer model)"),emr=l(),CT=a("li"),e6e=a("strong"),omr=o("tapas"),rmr=o(" \u2014 "),bX=a("a"),tmr=o("TFTapasForMaskedLM"),amr=o(" (TAPAS model)"),nmr=l(),wT=a("li"),o6e=a("strong"),smr=o("xlm"),lmr=o(" \u2014 "),FX=a("a"),imr=o("TFXLMWithLMHeadModel"),dmr=o(" (XLM model)"),cmr=l(),AT=a("li"),r6e=a("strong"),fmr=o("xlm-roberta"),mmr=o(" \u2014 "),vX=a("a"),gmr=o("TFXLMRobertaForMaskedLM"),hmr=o(" (XLM-RoBERTa model)"),pmr=l(),t6e=a("p"),_mr=o("Examples:"),umr=l(),f(O0.$$.fragment),QBe=l(),Lc=a("h2"),yT=a("a"),a6e=a("span"),f(V0.$$.fragment),bmr=l(),n6e=a("span"),Fmr=o("TFAutoModelForSeq2SeqLM"),WBe=l(),Cr=a("div"),f(X0.$$.fragment),vmr=l(),xc=a("p"),Tmr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),TX=a("a"),Mmr=o("from_pretrained()"),Emr=o(" class method or the "),MX=a("a"),Cmr=o("from_config()"),wmr=o(` class
method.`),Amr=l(),z0=a("p"),ymr=o("This class cannot be instantiated directly using "),s6e=a("code"),Lmr=o("__init__()"),xmr=o(" (throws an error)."),kmr=l(),bt=a("div"),f(Q0.$$.fragment),Smr=l(),l6e=a("p"),Rmr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Bmr=l(),kc=a("p"),Pmr=o(`Note:
Loading a model from its configuration file does `),i6e=a("strong"),$mr=o("not"),Imr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),EX=a("a"),qmr=o("from_pretrained()"),Nmr=o(" to load the model weights."),jmr=l(),d6e=a("p"),Dmr=o("Examples:"),Gmr=l(),f(W0.$$.fragment),Omr=l(),Fo=a("div"),f(H0.$$.fragment),Vmr=l(),c6e=a("p"),Xmr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),zmr=l(),Tn=a("p"),Qmr=o("The model class to instantiate is selected based on the "),f6e=a("code"),Wmr=o("model_type"),Hmr=o(` property of the config object (either
passed as an argument or loaded from `),m6e=a("code"),Umr=o("pretrained_model_name_or_path"),Jmr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),g6e=a("code"),Ymr=o("pretrained_model_name_or_path"),Kmr=o(":"),Zmr=l(),be=a("ul"),LT=a("li"),h6e=a("strong"),egr=o("bart"),ogr=o(" \u2014 "),CX=a("a"),rgr=o("TFBartForConditionalGeneration"),tgr=o(" (BART model)"),agr=l(),xT=a("li"),p6e=a("strong"),ngr=o("blenderbot"),sgr=o(" \u2014 "),wX=a("a"),lgr=o("TFBlenderbotForConditionalGeneration"),igr=o(" (Blenderbot model)"),dgr=l(),kT=a("li"),_6e=a("strong"),cgr=o("blenderbot-small"),fgr=o(" \u2014 "),AX=a("a"),mgr=o("TFBlenderbotSmallForConditionalGeneration"),ggr=o(" (BlenderbotSmall model)"),hgr=l(),ST=a("li"),u6e=a("strong"),pgr=o("encoder-decoder"),_gr=o(" \u2014 "),yX=a("a"),ugr=o("TFEncoderDecoderModel"),bgr=o(" (Encoder decoder model)"),Fgr=l(),RT=a("li"),b6e=a("strong"),vgr=o("led"),Tgr=o(" \u2014 "),LX=a("a"),Mgr=o("TFLEDForConditionalGeneration"),Egr=o(" (LED model)"),Cgr=l(),BT=a("li"),F6e=a("strong"),wgr=o("marian"),Agr=o(" \u2014 "),xX=a("a"),ygr=o("TFMarianMTModel"),Lgr=o(" (Marian model)"),xgr=l(),PT=a("li"),v6e=a("strong"),kgr=o("mbart"),Sgr=o(" \u2014 "),kX=a("a"),Rgr=o("TFMBartForConditionalGeneration"),Bgr=o(" (mBART model)"),Pgr=l(),$T=a("li"),T6e=a("strong"),$gr=o("mt5"),Igr=o(" \u2014 "),SX=a("a"),qgr=o("TFMT5ForConditionalGeneration"),Ngr=o(" (mT5 model)"),jgr=l(),IT=a("li"),M6e=a("strong"),Dgr=o("pegasus"),Ggr=o(" \u2014 "),RX=a("a"),Ogr=o("TFPegasusForConditionalGeneration"),Vgr=o(" (Pegasus model)"),Xgr=l(),qT=a("li"),E6e=a("strong"),zgr=o("t5"),Qgr=o(" \u2014 "),BX=a("a"),Wgr=o("TFT5ForConditionalGeneration"),Hgr=o(" (T5 model)"),Ugr=l(),C6e=a("p"),Jgr=o("Examples:"),Ygr=l(),f(U0.$$.fragment),HBe=l(),Sc=a("h2"),NT=a("a"),w6e=a("span"),f(J0.$$.fragment),Kgr=l(),A6e=a("span"),Zgr=o("TFAutoModelForSequenceClassification"),UBe=l(),wr=a("div"),f(Y0.$$.fragment),ehr=l(),Rc=a("p"),ohr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),PX=a("a"),rhr=o("from_pretrained()"),thr=o(" class method or the "),$X=a("a"),ahr=o("from_config()"),nhr=o(` class
method.`),shr=l(),K0=a("p"),lhr=o("This class cannot be instantiated directly using "),y6e=a("code"),ihr=o("__init__()"),dhr=o(" (throws an error)."),chr=l(),Ft=a("div"),f(Z0.$$.fragment),fhr=l(),L6e=a("p"),mhr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),ghr=l(),Bc=a("p"),hhr=o(`Note:
Loading a model from its configuration file does `),x6e=a("strong"),phr=o("not"),_hr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),IX=a("a"),uhr=o("from_pretrained()"),bhr=o(" to load the model weights."),Fhr=l(),k6e=a("p"),vhr=o("Examples:"),Thr=l(),f(ey.$$.fragment),Mhr=l(),vo=a("div"),f(oy.$$.fragment),Ehr=l(),S6e=a("p"),Chr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),whr=l(),Mn=a("p"),Ahr=o("The model class to instantiate is selected based on the "),R6e=a("code"),yhr=o("model_type"),Lhr=o(` property of the config object (either
passed as an argument or loaded from `),B6e=a("code"),xhr=o("pretrained_model_name_or_path"),khr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),P6e=a("code"),Shr=o("pretrained_model_name_or_path"),Rhr=o(":"),Bhr=l(),V=a("ul"),jT=a("li"),$6e=a("strong"),Phr=o("albert"),$hr=o(" \u2014 "),qX=a("a"),Ihr=o("TFAlbertForSequenceClassification"),qhr=o(" (ALBERT model)"),Nhr=l(),DT=a("li"),I6e=a("strong"),jhr=o("bert"),Dhr=o(" \u2014 "),NX=a("a"),Ghr=o("TFBertForSequenceClassification"),Ohr=o(" (BERT model)"),Vhr=l(),GT=a("li"),q6e=a("strong"),Xhr=o("camembert"),zhr=o(" \u2014 "),jX=a("a"),Qhr=o("TFCamembertForSequenceClassification"),Whr=o(" (CamemBERT model)"),Hhr=l(),OT=a("li"),N6e=a("strong"),Uhr=o("convbert"),Jhr=o(" \u2014 "),DX=a("a"),Yhr=o("TFConvBertForSequenceClassification"),Khr=o(" (ConvBERT model)"),Zhr=l(),VT=a("li"),j6e=a("strong"),epr=o("ctrl"),opr=o(" \u2014 "),GX=a("a"),rpr=o("TFCTRLForSequenceClassification"),tpr=o(" (CTRL model)"),apr=l(),XT=a("li"),D6e=a("strong"),npr=o("deberta"),spr=o(" \u2014 "),OX=a("a"),lpr=o("TFDebertaForSequenceClassification"),ipr=o(" (DeBERTa model)"),dpr=l(),zT=a("li"),G6e=a("strong"),cpr=o("deberta-v2"),fpr=o(" \u2014 "),VX=a("a"),mpr=o("TFDebertaV2ForSequenceClassification"),gpr=o(" (DeBERTa-v2 model)"),hpr=l(),QT=a("li"),O6e=a("strong"),ppr=o("distilbert"),_pr=o(" \u2014 "),XX=a("a"),upr=o("TFDistilBertForSequenceClassification"),bpr=o(" (DistilBERT model)"),Fpr=l(),WT=a("li"),V6e=a("strong"),vpr=o("electra"),Tpr=o(" \u2014 "),zX=a("a"),Mpr=o("TFElectraForSequenceClassification"),Epr=o(" (ELECTRA model)"),Cpr=l(),HT=a("li"),X6e=a("strong"),wpr=o("flaubert"),Apr=o(" \u2014 "),QX=a("a"),ypr=o("TFFlaubertForSequenceClassification"),Lpr=o(" (FlauBERT model)"),xpr=l(),UT=a("li"),z6e=a("strong"),kpr=o("funnel"),Spr=o(" \u2014 "),WX=a("a"),Rpr=o("TFFunnelForSequenceClassification"),Bpr=o(" (Funnel Transformer model)"),Ppr=l(),JT=a("li"),Q6e=a("strong"),$pr=o("gpt2"),Ipr=o(" \u2014 "),HX=a("a"),qpr=o("TFGPT2ForSequenceClassification"),Npr=o(" (OpenAI GPT-2 model)"),jpr=l(),YT=a("li"),W6e=a("strong"),Dpr=o("gptj"),Gpr=o(" \u2014 "),UX=a("a"),Opr=o("TFGPTJForSequenceClassification"),Vpr=o(" (GPT-J model)"),Xpr=l(),KT=a("li"),H6e=a("strong"),zpr=o("layoutlm"),Qpr=o(" \u2014 "),JX=a("a"),Wpr=o("TFLayoutLMForSequenceClassification"),Hpr=o(" (LayoutLM model)"),Upr=l(),ZT=a("li"),U6e=a("strong"),Jpr=o("longformer"),Ypr=o(" \u2014 "),YX=a("a"),Kpr=o("TFLongformerForSequenceClassification"),Zpr=o(" (Longformer model)"),e_r=l(),e9=a("li"),J6e=a("strong"),o_r=o("mobilebert"),r_r=o(" \u2014 "),KX=a("a"),t_r=o("TFMobileBertForSequenceClassification"),a_r=o(" (MobileBERT model)"),n_r=l(),o9=a("li"),Y6e=a("strong"),s_r=o("mpnet"),l_r=o(" \u2014 "),ZX=a("a"),i_r=o("TFMPNetForSequenceClassification"),d_r=o(" (MPNet model)"),c_r=l(),r9=a("li"),K6e=a("strong"),f_r=o("openai-gpt"),m_r=o(" \u2014 "),ez=a("a"),g_r=o("TFOpenAIGPTForSequenceClassification"),h_r=o(" (OpenAI GPT model)"),p_r=l(),t9=a("li"),Z6e=a("strong"),__r=o("rembert"),u_r=o(" \u2014 "),oz=a("a"),b_r=o("TFRemBertForSequenceClassification"),F_r=o(" (RemBERT model)"),v_r=l(),a9=a("li"),e1e=a("strong"),T_r=o("roberta"),M_r=o(" \u2014 "),rz=a("a"),E_r=o("TFRobertaForSequenceClassification"),C_r=o(" (RoBERTa model)"),w_r=l(),n9=a("li"),o1e=a("strong"),A_r=o("roformer"),y_r=o(" \u2014 "),tz=a("a"),L_r=o("TFRoFormerForSequenceClassification"),x_r=o(" (RoFormer model)"),k_r=l(),s9=a("li"),r1e=a("strong"),S_r=o("tapas"),R_r=o(" \u2014 "),az=a("a"),B_r=o("TFTapasForSequenceClassification"),P_r=o(" (TAPAS model)"),$_r=l(),l9=a("li"),t1e=a("strong"),I_r=o("transfo-xl"),q_r=o(" \u2014 "),nz=a("a"),N_r=o("TFTransfoXLForSequenceClassification"),j_r=o(" (Transformer-XL model)"),D_r=l(),i9=a("li"),a1e=a("strong"),G_r=o("xlm"),O_r=o(" \u2014 "),sz=a("a"),V_r=o("TFXLMForSequenceClassification"),X_r=o(" (XLM model)"),z_r=l(),d9=a("li"),n1e=a("strong"),Q_r=o("xlm-roberta"),W_r=o(" \u2014 "),lz=a("a"),H_r=o("TFXLMRobertaForSequenceClassification"),U_r=o(" (XLM-RoBERTa model)"),J_r=l(),c9=a("li"),s1e=a("strong"),Y_r=o("xlnet"),K_r=o(" \u2014 "),iz=a("a"),Z_r=o("TFXLNetForSequenceClassification"),eur=o(" (XLNet model)"),our=l(),l1e=a("p"),rur=o("Examples:"),tur=l(),f(ry.$$.fragment),JBe=l(),Pc=a("h2"),f9=a("a"),i1e=a("span"),f(ty.$$.fragment),aur=l(),d1e=a("span"),nur=o("TFAutoModelForMultipleChoice"),YBe=l(),Ar=a("div"),f(ay.$$.fragment),sur=l(),$c=a("p"),lur=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),dz=a("a"),iur=o("from_pretrained()"),dur=o(" class method or the "),cz=a("a"),cur=o("from_config()"),fur=o(` class
method.`),mur=l(),ny=a("p"),gur=o("This class cannot be instantiated directly using "),c1e=a("code"),hur=o("__init__()"),pur=o(" (throws an error)."),_ur=l(),vt=a("div"),f(sy.$$.fragment),uur=l(),f1e=a("p"),bur=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Fur=l(),Ic=a("p"),vur=o(`Note:
Loading a model from its configuration file does `),m1e=a("strong"),Tur=o("not"),Mur=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fz=a("a"),Eur=o("from_pretrained()"),Cur=o(" to load the model weights."),wur=l(),g1e=a("p"),Aur=o("Examples:"),yur=l(),f(ly.$$.fragment),Lur=l(),To=a("div"),f(iy.$$.fragment),xur=l(),h1e=a("p"),kur=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Sur=l(),En=a("p"),Rur=o("The model class to instantiate is selected based on the "),p1e=a("code"),Bur=o("model_type"),Pur=o(` property of the config object (either
passed as an argument or loaded from `),_1e=a("code"),$ur=o("pretrained_model_name_or_path"),Iur=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),u1e=a("code"),qur=o("pretrained_model_name_or_path"),Nur=o(":"),jur=l(),ne=a("ul"),m9=a("li"),b1e=a("strong"),Dur=o("albert"),Gur=o(" \u2014 "),mz=a("a"),Our=o("TFAlbertForMultipleChoice"),Vur=o(" (ALBERT model)"),Xur=l(),g9=a("li"),F1e=a("strong"),zur=o("bert"),Qur=o(" \u2014 "),gz=a("a"),Wur=o("TFBertForMultipleChoice"),Hur=o(" (BERT model)"),Uur=l(),h9=a("li"),v1e=a("strong"),Jur=o("camembert"),Yur=o(" \u2014 "),hz=a("a"),Kur=o("TFCamembertForMultipleChoice"),Zur=o(" (CamemBERT model)"),e6r=l(),p9=a("li"),T1e=a("strong"),o6r=o("convbert"),r6r=o(" \u2014 "),pz=a("a"),t6r=o("TFConvBertForMultipleChoice"),a6r=o(" (ConvBERT model)"),n6r=l(),_9=a("li"),M1e=a("strong"),s6r=o("distilbert"),l6r=o(" \u2014 "),_z=a("a"),i6r=o("TFDistilBertForMultipleChoice"),d6r=o(" (DistilBERT model)"),c6r=l(),u9=a("li"),E1e=a("strong"),f6r=o("electra"),m6r=o(" \u2014 "),uz=a("a"),g6r=o("TFElectraForMultipleChoice"),h6r=o(" (ELECTRA model)"),p6r=l(),b9=a("li"),C1e=a("strong"),_6r=o("flaubert"),u6r=o(" \u2014 "),bz=a("a"),b6r=o("TFFlaubertForMultipleChoice"),F6r=o(" (FlauBERT model)"),v6r=l(),F9=a("li"),w1e=a("strong"),T6r=o("funnel"),M6r=o(" \u2014 "),Fz=a("a"),E6r=o("TFFunnelForMultipleChoice"),C6r=o(" (Funnel Transformer model)"),w6r=l(),v9=a("li"),A1e=a("strong"),A6r=o("longformer"),y6r=o(" \u2014 "),vz=a("a"),L6r=o("TFLongformerForMultipleChoice"),x6r=o(" (Longformer model)"),k6r=l(),T9=a("li"),y1e=a("strong"),S6r=o("mobilebert"),R6r=o(" \u2014 "),Tz=a("a"),B6r=o("TFMobileBertForMultipleChoice"),P6r=o(" (MobileBERT model)"),$6r=l(),M9=a("li"),L1e=a("strong"),I6r=o("mpnet"),q6r=o(" \u2014 "),Mz=a("a"),N6r=o("TFMPNetForMultipleChoice"),j6r=o(" (MPNet model)"),D6r=l(),E9=a("li"),x1e=a("strong"),G6r=o("rembert"),O6r=o(" \u2014 "),Ez=a("a"),V6r=o("TFRemBertForMultipleChoice"),X6r=o(" (RemBERT model)"),z6r=l(),C9=a("li"),k1e=a("strong"),Q6r=o("roberta"),W6r=o(" \u2014 "),Cz=a("a"),H6r=o("TFRobertaForMultipleChoice"),U6r=o(" (RoBERTa model)"),J6r=l(),w9=a("li"),S1e=a("strong"),Y6r=o("roformer"),K6r=o(" \u2014 "),wz=a("a"),Z6r=o("TFRoFormerForMultipleChoice"),e1r=o(" (RoFormer model)"),o1r=l(),A9=a("li"),R1e=a("strong"),r1r=o("xlm"),t1r=o(" \u2014 "),Az=a("a"),a1r=o("TFXLMForMultipleChoice"),n1r=o(" (XLM model)"),s1r=l(),y9=a("li"),B1e=a("strong"),l1r=o("xlm-roberta"),i1r=o(" \u2014 "),yz=a("a"),d1r=o("TFXLMRobertaForMultipleChoice"),c1r=o(" (XLM-RoBERTa model)"),f1r=l(),L9=a("li"),P1e=a("strong"),m1r=o("xlnet"),g1r=o(" \u2014 "),Lz=a("a"),h1r=o("TFXLNetForMultipleChoice"),p1r=o(" (XLNet model)"),_1r=l(),$1e=a("p"),u1r=o("Examples:"),b1r=l(),f(dy.$$.fragment),KBe=l(),qc=a("h2"),x9=a("a"),I1e=a("span"),f(cy.$$.fragment),F1r=l(),q1e=a("span"),v1r=o("TFAutoModelForTableQuestionAnswering"),ZBe=l(),yr=a("div"),f(fy.$$.fragment),T1r=l(),Nc=a("p"),M1r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),xz=a("a"),E1r=o("from_pretrained()"),C1r=o(" class method or the "),kz=a("a"),w1r=o("from_config()"),A1r=o(` class
method.`),y1r=l(),my=a("p"),L1r=o("This class cannot be instantiated directly using "),N1e=a("code"),x1r=o("__init__()"),k1r=o(" (throws an error)."),S1r=l(),Tt=a("div"),f(gy.$$.fragment),R1r=l(),j1e=a("p"),B1r=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),P1r=l(),jc=a("p"),$1r=o(`Note:
Loading a model from its configuration file does `),D1e=a("strong"),I1r=o("not"),q1r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Sz=a("a"),N1r=o("from_pretrained()"),j1r=o(" to load the model weights."),D1r=l(),G1e=a("p"),G1r=o("Examples:"),O1r=l(),f(hy.$$.fragment),V1r=l(),Mo=a("div"),f(py.$$.fragment),X1r=l(),O1e=a("p"),z1r=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Q1r=l(),Cn=a("p"),W1r=o("The model class to instantiate is selected based on the "),V1e=a("code"),H1r=o("model_type"),U1r=o(` property of the config object (either
passed as an argument or loaded from `),X1e=a("code"),J1r=o("pretrained_model_name_or_path"),Y1r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),z1e=a("code"),K1r=o("pretrained_model_name_or_path"),Z1r=o(":"),ebr=l(),Q1e=a("ul"),k9=a("li"),W1e=a("strong"),obr=o("tapas"),rbr=o(" \u2014 "),Rz=a("a"),tbr=o("TFTapasForQuestionAnswering"),abr=o(" (TAPAS model)"),nbr=l(),H1e=a("p"),sbr=o("Examples:"),lbr=l(),f(_y.$$.fragment),ePe=l(),Dc=a("h2"),S9=a("a"),U1e=a("span"),f(uy.$$.fragment),ibr=l(),J1e=a("span"),dbr=o("TFAutoModelForTokenClassification"),oPe=l(),Lr=a("div"),f(by.$$.fragment),cbr=l(),Gc=a("p"),fbr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Bz=a("a"),mbr=o("from_pretrained()"),gbr=o(" class method or the "),Pz=a("a"),hbr=o("from_config()"),pbr=o(` class
method.`),_br=l(),Fy=a("p"),ubr=o("This class cannot be instantiated directly using "),Y1e=a("code"),bbr=o("__init__()"),Fbr=o(" (throws an error)."),vbr=l(),Mt=a("div"),f(vy.$$.fragment),Tbr=l(),K1e=a("p"),Mbr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Ebr=l(),Oc=a("p"),Cbr=o(`Note:
Loading a model from its configuration file does `),Z1e=a("strong"),wbr=o("not"),Abr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$z=a("a"),ybr=o("from_pretrained()"),Lbr=o(" to load the model weights."),xbr=l(),ebe=a("p"),kbr=o("Examples:"),Sbr=l(),f(Ty.$$.fragment),Rbr=l(),Eo=a("div"),f(My.$$.fragment),Bbr=l(),obe=a("p"),Pbr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),$br=l(),wn=a("p"),Ibr=o("The model class to instantiate is selected based on the "),rbe=a("code"),qbr=o("model_type"),Nbr=o(` property of the config object (either
passed as an argument or loaded from `),tbe=a("code"),jbr=o("pretrained_model_name_or_path"),Dbr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),abe=a("code"),Gbr=o("pretrained_model_name_or_path"),Obr=o(":"),Vbr=l(),Y=a("ul"),R9=a("li"),nbe=a("strong"),Xbr=o("albert"),zbr=o(" \u2014 "),Iz=a("a"),Qbr=o("TFAlbertForTokenClassification"),Wbr=o(" (ALBERT model)"),Hbr=l(),B9=a("li"),sbe=a("strong"),Ubr=o("bert"),Jbr=o(" \u2014 "),qz=a("a"),Ybr=o("TFBertForTokenClassification"),Kbr=o(" (BERT model)"),Zbr=l(),P9=a("li"),lbe=a("strong"),e5r=o("camembert"),o5r=o(" \u2014 "),Nz=a("a"),r5r=o("TFCamembertForTokenClassification"),t5r=o(" (CamemBERT model)"),a5r=l(),$9=a("li"),ibe=a("strong"),n5r=o("convbert"),s5r=o(" \u2014 "),jz=a("a"),l5r=o("TFConvBertForTokenClassification"),i5r=o(" (ConvBERT model)"),d5r=l(),I9=a("li"),dbe=a("strong"),c5r=o("deberta"),f5r=o(" \u2014 "),Dz=a("a"),m5r=o("TFDebertaForTokenClassification"),g5r=o(" (DeBERTa model)"),h5r=l(),q9=a("li"),cbe=a("strong"),p5r=o("deberta-v2"),_5r=o(" \u2014 "),Gz=a("a"),u5r=o("TFDebertaV2ForTokenClassification"),b5r=o(" (DeBERTa-v2 model)"),F5r=l(),N9=a("li"),fbe=a("strong"),v5r=o("distilbert"),T5r=o(" \u2014 "),Oz=a("a"),M5r=o("TFDistilBertForTokenClassification"),E5r=o(" (DistilBERT model)"),C5r=l(),j9=a("li"),mbe=a("strong"),w5r=o("electra"),A5r=o(" \u2014 "),Vz=a("a"),y5r=o("TFElectraForTokenClassification"),L5r=o(" (ELECTRA model)"),x5r=l(),D9=a("li"),gbe=a("strong"),k5r=o("flaubert"),S5r=o(" \u2014 "),Xz=a("a"),R5r=o("TFFlaubertForTokenClassification"),B5r=o(" (FlauBERT model)"),P5r=l(),G9=a("li"),hbe=a("strong"),$5r=o("funnel"),I5r=o(" \u2014 "),zz=a("a"),q5r=o("TFFunnelForTokenClassification"),N5r=o(" (Funnel Transformer model)"),j5r=l(),O9=a("li"),pbe=a("strong"),D5r=o("layoutlm"),G5r=o(" \u2014 "),Qz=a("a"),O5r=o("TFLayoutLMForTokenClassification"),V5r=o(" (LayoutLM model)"),X5r=l(),V9=a("li"),_be=a("strong"),z5r=o("longformer"),Q5r=o(" \u2014 "),Wz=a("a"),W5r=o("TFLongformerForTokenClassification"),H5r=o(" (Longformer model)"),U5r=l(),X9=a("li"),ube=a("strong"),J5r=o("mobilebert"),Y5r=o(" \u2014 "),Hz=a("a"),K5r=o("TFMobileBertForTokenClassification"),Z5r=o(" (MobileBERT model)"),e2r=l(),z9=a("li"),bbe=a("strong"),o2r=o("mpnet"),r2r=o(" \u2014 "),Uz=a("a"),t2r=o("TFMPNetForTokenClassification"),a2r=o(" (MPNet model)"),n2r=l(),Q9=a("li"),Fbe=a("strong"),s2r=o("rembert"),l2r=o(" \u2014 "),Jz=a("a"),i2r=o("TFRemBertForTokenClassification"),d2r=o(" (RemBERT model)"),c2r=l(),W9=a("li"),vbe=a("strong"),f2r=o("roberta"),m2r=o(" \u2014 "),Yz=a("a"),g2r=o("TFRobertaForTokenClassification"),h2r=o(" (RoBERTa model)"),p2r=l(),H9=a("li"),Tbe=a("strong"),_2r=o("roformer"),u2r=o(" \u2014 "),Kz=a("a"),b2r=o("TFRoFormerForTokenClassification"),F2r=o(" (RoFormer model)"),v2r=l(),U9=a("li"),Mbe=a("strong"),T2r=o("xlm"),M2r=o(" \u2014 "),Zz=a("a"),E2r=o("TFXLMForTokenClassification"),C2r=o(" (XLM model)"),w2r=l(),J9=a("li"),Ebe=a("strong"),A2r=o("xlm-roberta"),y2r=o(" \u2014 "),eQ=a("a"),L2r=o("TFXLMRobertaForTokenClassification"),x2r=o(" (XLM-RoBERTa model)"),k2r=l(),Y9=a("li"),Cbe=a("strong"),S2r=o("xlnet"),R2r=o(" \u2014 "),oQ=a("a"),B2r=o("TFXLNetForTokenClassification"),P2r=o(" (XLNet model)"),$2r=l(),wbe=a("p"),I2r=o("Examples:"),q2r=l(),f(Ey.$$.fragment),rPe=l(),Vc=a("h2"),K9=a("a"),Abe=a("span"),f(Cy.$$.fragment),N2r=l(),ybe=a("span"),j2r=o("TFAutoModelForQuestionAnswering"),tPe=l(),xr=a("div"),f(wy.$$.fragment),D2r=l(),Xc=a("p"),G2r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),rQ=a("a"),O2r=o("from_pretrained()"),V2r=o(" class method or the "),tQ=a("a"),X2r=o("from_config()"),z2r=o(` class
method.`),Q2r=l(),Ay=a("p"),W2r=o("This class cannot be instantiated directly using "),Lbe=a("code"),H2r=o("__init__()"),U2r=o(" (throws an error)."),J2r=l(),Et=a("div"),f(yy.$$.fragment),Y2r=l(),xbe=a("p"),K2r=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Z2r=l(),zc=a("p"),eFr=o(`Note:
Loading a model from its configuration file does `),kbe=a("strong"),oFr=o("not"),rFr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aQ=a("a"),tFr=o("from_pretrained()"),aFr=o(" to load the model weights."),nFr=l(),Sbe=a("p"),sFr=o("Examples:"),lFr=l(),f(Ly.$$.fragment),iFr=l(),Co=a("div"),f(xy.$$.fragment),dFr=l(),Rbe=a("p"),cFr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),fFr=l(),An=a("p"),mFr=o("The model class to instantiate is selected based on the "),Bbe=a("code"),gFr=o("model_type"),hFr=o(` property of the config object (either
passed as an argument or loaded from `),Pbe=a("code"),pFr=o("pretrained_model_name_or_path"),_Fr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$be=a("code"),uFr=o("pretrained_model_name_or_path"),bFr=o(":"),FFr=l(),K=a("ul"),Z9=a("li"),Ibe=a("strong"),vFr=o("albert"),TFr=o(" \u2014 "),nQ=a("a"),MFr=o("TFAlbertForQuestionAnswering"),EFr=o(" (ALBERT model)"),CFr=l(),eM=a("li"),qbe=a("strong"),wFr=o("bert"),AFr=o(" \u2014 "),sQ=a("a"),yFr=o("TFBertForQuestionAnswering"),LFr=o(" (BERT model)"),xFr=l(),oM=a("li"),Nbe=a("strong"),kFr=o("camembert"),SFr=o(" \u2014 "),lQ=a("a"),RFr=o("TFCamembertForQuestionAnswering"),BFr=o(" (CamemBERT model)"),PFr=l(),rM=a("li"),jbe=a("strong"),$Fr=o("convbert"),IFr=o(" \u2014 "),iQ=a("a"),qFr=o("TFConvBertForQuestionAnswering"),NFr=o(" (ConvBERT model)"),jFr=l(),tM=a("li"),Dbe=a("strong"),DFr=o("deberta"),GFr=o(" \u2014 "),dQ=a("a"),OFr=o("TFDebertaForQuestionAnswering"),VFr=o(" (DeBERTa model)"),XFr=l(),aM=a("li"),Gbe=a("strong"),zFr=o("deberta-v2"),QFr=o(" \u2014 "),cQ=a("a"),WFr=o("TFDebertaV2ForQuestionAnswering"),HFr=o(" (DeBERTa-v2 model)"),UFr=l(),nM=a("li"),Obe=a("strong"),JFr=o("distilbert"),YFr=o(" \u2014 "),fQ=a("a"),KFr=o("TFDistilBertForQuestionAnswering"),ZFr=o(" (DistilBERT model)"),evr=l(),sM=a("li"),Vbe=a("strong"),ovr=o("electra"),rvr=o(" \u2014 "),mQ=a("a"),tvr=o("TFElectraForQuestionAnswering"),avr=o(" (ELECTRA model)"),nvr=l(),lM=a("li"),Xbe=a("strong"),svr=o("flaubert"),lvr=o(" \u2014 "),gQ=a("a"),ivr=o("TFFlaubertForQuestionAnsweringSimple"),dvr=o(" (FlauBERT model)"),cvr=l(),iM=a("li"),zbe=a("strong"),fvr=o("funnel"),mvr=o(" \u2014 "),hQ=a("a"),gvr=o("TFFunnelForQuestionAnswering"),hvr=o(" (Funnel Transformer model)"),pvr=l(),dM=a("li"),Qbe=a("strong"),_vr=o("gptj"),uvr=o(" \u2014 "),pQ=a("a"),bvr=o("TFGPTJForQuestionAnswering"),Fvr=o(" (GPT-J model)"),vvr=l(),cM=a("li"),Wbe=a("strong"),Tvr=o("longformer"),Mvr=o(" \u2014 "),_Q=a("a"),Evr=o("TFLongformerForQuestionAnswering"),Cvr=o(" (Longformer model)"),wvr=l(),fM=a("li"),Hbe=a("strong"),Avr=o("mobilebert"),yvr=o(" \u2014 "),uQ=a("a"),Lvr=o("TFMobileBertForQuestionAnswering"),xvr=o(" (MobileBERT model)"),kvr=l(),mM=a("li"),Ube=a("strong"),Svr=o("mpnet"),Rvr=o(" \u2014 "),bQ=a("a"),Bvr=o("TFMPNetForQuestionAnswering"),Pvr=o(" (MPNet model)"),$vr=l(),gM=a("li"),Jbe=a("strong"),Ivr=o("rembert"),qvr=o(" \u2014 "),FQ=a("a"),Nvr=o("TFRemBertForQuestionAnswering"),jvr=o(" (RemBERT model)"),Dvr=l(),hM=a("li"),Ybe=a("strong"),Gvr=o("roberta"),Ovr=o(" \u2014 "),vQ=a("a"),Vvr=o("TFRobertaForQuestionAnswering"),Xvr=o(" (RoBERTa model)"),zvr=l(),pM=a("li"),Kbe=a("strong"),Qvr=o("roformer"),Wvr=o(" \u2014 "),TQ=a("a"),Hvr=o("TFRoFormerForQuestionAnswering"),Uvr=o(" (RoFormer model)"),Jvr=l(),_M=a("li"),Zbe=a("strong"),Yvr=o("xlm"),Kvr=o(" \u2014 "),MQ=a("a"),Zvr=o("TFXLMForQuestionAnsweringSimple"),eTr=o(" (XLM model)"),oTr=l(),uM=a("li"),e5e=a("strong"),rTr=o("xlm-roberta"),tTr=o(" \u2014 "),EQ=a("a"),aTr=o("TFXLMRobertaForQuestionAnswering"),nTr=o(" (XLM-RoBERTa model)"),sTr=l(),bM=a("li"),o5e=a("strong"),lTr=o("xlnet"),iTr=o(" \u2014 "),CQ=a("a"),dTr=o("TFXLNetForQuestionAnsweringSimple"),cTr=o(" (XLNet model)"),fTr=l(),r5e=a("p"),mTr=o("Examples:"),gTr=l(),f(ky.$$.fragment),aPe=l(),Qc=a("h2"),FM=a("a"),t5e=a("span"),f(Sy.$$.fragment),hTr=l(),a5e=a("span"),pTr=o("TFAutoModelForVision2Seq"),nPe=l(),kr=a("div"),f(Ry.$$.fragment),_Tr=l(),Wc=a("p"),uTr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),wQ=a("a"),bTr=o("from_pretrained()"),FTr=o(" class method or the "),AQ=a("a"),vTr=o("from_config()"),TTr=o(` class
method.`),MTr=l(),By=a("p"),ETr=o("This class cannot be instantiated directly using "),n5e=a("code"),CTr=o("__init__()"),wTr=o(" (throws an error)."),ATr=l(),Ct=a("div"),f(Py.$$.fragment),yTr=l(),s5e=a("p"),LTr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),xTr=l(),Hc=a("p"),kTr=o(`Note:
Loading a model from its configuration file does `),l5e=a("strong"),STr=o("not"),RTr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yQ=a("a"),BTr=o("from_pretrained()"),PTr=o(" to load the model weights."),$Tr=l(),i5e=a("p"),ITr=o("Examples:"),qTr=l(),f($y.$$.fragment),NTr=l(),wo=a("div"),f(Iy.$$.fragment),jTr=l(),d5e=a("p"),DTr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),GTr=l(),yn=a("p"),OTr=o("The model class to instantiate is selected based on the "),c5e=a("code"),VTr=o("model_type"),XTr=o(` property of the config object (either
passed as an argument or loaded from `),f5e=a("code"),zTr=o("pretrained_model_name_or_path"),QTr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),m5e=a("code"),WTr=o("pretrained_model_name_or_path"),HTr=o(":"),UTr=l(),g5e=a("ul"),vM=a("li"),h5e=a("strong"),JTr=o("vision-encoder-decoder"),YTr=o(" \u2014 "),LQ=a("a"),KTr=o("TFVisionEncoderDecoderModel"),ZTr=o(" (Vision Encoder decoder model)"),e9r=l(),p5e=a("p"),o9r=o("Examples:"),r9r=l(),f(qy.$$.fragment),sPe=l(),Uc=a("h2"),TM=a("a"),_5e=a("span"),f(Ny.$$.fragment),t9r=l(),u5e=a("span"),a9r=o("TFAutoModelForSpeechSeq2Seq"),lPe=l(),Sr=a("div"),f(jy.$$.fragment),n9r=l(),Jc=a("p"),s9r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),xQ=a("a"),l9r=o("from_pretrained()"),i9r=o(" class method or the "),kQ=a("a"),d9r=o("from_config()"),c9r=o(` class
method.`),f9r=l(),Dy=a("p"),m9r=o("This class cannot be instantiated directly using "),b5e=a("code"),g9r=o("__init__()"),h9r=o(" (throws an error)."),p9r=l(),wt=a("div"),f(Gy.$$.fragment),_9r=l(),F5e=a("p"),u9r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),b9r=l(),Yc=a("p"),F9r=o(`Note:
Loading a model from its configuration file does `),v5e=a("strong"),v9r=o("not"),T9r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),SQ=a("a"),M9r=o("from_pretrained()"),E9r=o(" to load the model weights."),C9r=l(),T5e=a("p"),w9r=o("Examples:"),A9r=l(),f(Oy.$$.fragment),y9r=l(),Ao=a("div"),f(Vy.$$.fragment),L9r=l(),M5e=a("p"),x9r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),k9r=l(),Ln=a("p"),S9r=o("The model class to instantiate is selected based on the "),E5e=a("code"),R9r=o("model_type"),B9r=o(` property of the config object (either
passed as an argument or loaded from `),C5e=a("code"),P9r=o("pretrained_model_name_or_path"),$9r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),w5e=a("code"),I9r=o("pretrained_model_name_or_path"),q9r=o(":"),N9r=l(),A5e=a("ul"),MM=a("li"),y5e=a("strong"),j9r=o("speech_to_text"),D9r=o(" \u2014 "),RQ=a("a"),G9r=o("TFSpeech2TextForConditionalGeneration"),O9r=o(" (Speech2Text model)"),V9r=l(),L5e=a("p"),X9r=o("Examples:"),z9r=l(),f(Xy.$$.fragment),iPe=l(),Kc=a("h2"),EM=a("a"),x5e=a("span"),f(zy.$$.fragment),Q9r=l(),k5e=a("span"),W9r=o("FlaxAutoModel"),dPe=l(),Rr=a("div"),f(Qy.$$.fragment),H9r=l(),Zc=a("p"),U9r=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),BQ=a("a"),J9r=o("from_pretrained()"),Y9r=o(" class method or the "),PQ=a("a"),K9r=o("from_config()"),Z9r=o(` class
method.`),eMr=l(),Wy=a("p"),oMr=o("This class cannot be instantiated directly using "),S5e=a("code"),rMr=o("__init__()"),tMr=o(" (throws an error)."),aMr=l(),At=a("div"),f(Hy.$$.fragment),nMr=l(),R5e=a("p"),sMr=o("Instantiates one of the base model classes of the library from a configuration."),lMr=l(),ef=a("p"),iMr=o(`Note:
Loading a model from its configuration file does `),B5e=a("strong"),dMr=o("not"),cMr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$Q=a("a"),fMr=o("from_pretrained()"),mMr=o(" to load the model weights."),gMr=l(),P5e=a("p"),hMr=o("Examples:"),pMr=l(),f(Uy.$$.fragment),_Mr=l(),yo=a("div"),f(Jy.$$.fragment),uMr=l(),$5e=a("p"),bMr=o("Instantiate one of the base model classes of the library from a pretrained model."),FMr=l(),xn=a("p"),vMr=o("The model class to instantiate is selected based on the "),I5e=a("code"),TMr=o("model_type"),MMr=o(` property of the config object (either
passed as an argument or loaded from `),q5e=a("code"),EMr=o("pretrained_model_name_or_path"),CMr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),N5e=a("code"),wMr=o("pretrained_model_name_or_path"),AMr=o(":"),yMr=l(),z=a("ul"),CM=a("li"),j5e=a("strong"),LMr=o("albert"),xMr=o(" \u2014 "),IQ=a("a"),kMr=o("FlaxAlbertModel"),SMr=o(" (ALBERT model)"),RMr=l(),wM=a("li"),D5e=a("strong"),BMr=o("bart"),PMr=o(" \u2014 "),qQ=a("a"),$Mr=o("FlaxBartModel"),IMr=o(" (BART model)"),qMr=l(),AM=a("li"),G5e=a("strong"),NMr=o("beit"),jMr=o(" \u2014 "),NQ=a("a"),DMr=o("FlaxBeitModel"),GMr=o(" (BEiT model)"),OMr=l(),yM=a("li"),O5e=a("strong"),VMr=o("bert"),XMr=o(" \u2014 "),jQ=a("a"),zMr=o("FlaxBertModel"),QMr=o(" (BERT model)"),WMr=l(),LM=a("li"),V5e=a("strong"),HMr=o("big_bird"),UMr=o(" \u2014 "),DQ=a("a"),JMr=o("FlaxBigBirdModel"),YMr=o(" (BigBird model)"),KMr=l(),xM=a("li"),X5e=a("strong"),ZMr=o("blenderbot"),e4r=o(" \u2014 "),GQ=a("a"),o4r=o("FlaxBlenderbotModel"),r4r=o(" (Blenderbot model)"),t4r=l(),kM=a("li"),z5e=a("strong"),a4r=o("blenderbot-small"),n4r=o(" \u2014 "),OQ=a("a"),s4r=o("FlaxBlenderbotSmallModel"),l4r=o(" (BlenderbotSmall model)"),i4r=l(),SM=a("li"),Q5e=a("strong"),d4r=o("clip"),c4r=o(" \u2014 "),VQ=a("a"),f4r=o("FlaxCLIPModel"),m4r=o(" (CLIP model)"),g4r=l(),RM=a("li"),W5e=a("strong"),h4r=o("distilbert"),p4r=o(" \u2014 "),XQ=a("a"),_4r=o("FlaxDistilBertModel"),u4r=o(" (DistilBERT model)"),b4r=l(),BM=a("li"),H5e=a("strong"),F4r=o("electra"),v4r=o(" \u2014 "),zQ=a("a"),T4r=o("FlaxElectraModel"),M4r=o(" (ELECTRA model)"),E4r=l(),PM=a("li"),U5e=a("strong"),C4r=o("gpt2"),w4r=o(" \u2014 "),QQ=a("a"),A4r=o("FlaxGPT2Model"),y4r=o(" (OpenAI GPT-2 model)"),L4r=l(),$M=a("li"),J5e=a("strong"),x4r=o("gpt_neo"),k4r=o(" \u2014 "),WQ=a("a"),S4r=o("FlaxGPTNeoModel"),R4r=o(" (GPT Neo model)"),B4r=l(),IM=a("li"),Y5e=a("strong"),P4r=o("gptj"),$4r=o(" \u2014 "),HQ=a("a"),I4r=o("FlaxGPTJModel"),q4r=o(" (GPT-J model)"),N4r=l(),qM=a("li"),K5e=a("strong"),j4r=o("marian"),D4r=o(" \u2014 "),UQ=a("a"),G4r=o("FlaxMarianModel"),O4r=o(" (Marian model)"),V4r=l(),NM=a("li"),Z5e=a("strong"),X4r=o("mbart"),z4r=o(" \u2014 "),JQ=a("a"),Q4r=o("FlaxMBartModel"),W4r=o(" (mBART model)"),H4r=l(),jM=a("li"),e2e=a("strong"),U4r=o("mt5"),J4r=o(" \u2014 "),YQ=a("a"),Y4r=o("FlaxMT5Model"),K4r=o(" (mT5 model)"),Z4r=l(),DM=a("li"),o2e=a("strong"),eEr=o("pegasus"),oEr=o(" \u2014 "),KQ=a("a"),rEr=o("FlaxPegasusModel"),tEr=o(" (Pegasus model)"),aEr=l(),GM=a("li"),r2e=a("strong"),nEr=o("roberta"),sEr=o(" \u2014 "),ZQ=a("a"),lEr=o("FlaxRobertaModel"),iEr=o(" (RoBERTa model)"),dEr=l(),OM=a("li"),t2e=a("strong"),cEr=o("roformer"),fEr=o(" \u2014 "),eW=a("a"),mEr=o("FlaxRoFormerModel"),gEr=o(" (RoFormer model)"),hEr=l(),VM=a("li"),a2e=a("strong"),pEr=o("t5"),_Er=o(" \u2014 "),oW=a("a"),uEr=o("FlaxT5Model"),bEr=o(" (T5 model)"),FEr=l(),XM=a("li"),n2e=a("strong"),vEr=o("vision-text-dual-encoder"),TEr=o(" \u2014 "),rW=a("a"),MEr=o("FlaxVisionTextDualEncoderModel"),EEr=o(" (VisionTextDualEncoder model)"),CEr=l(),zM=a("li"),s2e=a("strong"),wEr=o("vit"),AEr=o(" \u2014 "),tW=a("a"),yEr=o("FlaxViTModel"),LEr=o(" (ViT model)"),xEr=l(),QM=a("li"),l2e=a("strong"),kEr=o("wav2vec2"),SEr=o(" \u2014 "),aW=a("a"),REr=o("FlaxWav2Vec2Model"),BEr=o(" (Wav2Vec2 model)"),PEr=l(),WM=a("li"),i2e=a("strong"),$Er=o("xglm"),IEr=o(" \u2014 "),nW=a("a"),qEr=o("FlaxXGLMModel"),NEr=o(" (XGLM model)"),jEr=l(),HM=a("li"),d2e=a("strong"),DEr=o("xlm-roberta"),GEr=o(" \u2014 "),sW=a("a"),OEr=o("FlaxXLMRobertaModel"),VEr=o(" (XLM-RoBERTa model)"),XEr=l(),c2e=a("p"),zEr=o("Examples:"),QEr=l(),f(Yy.$$.fragment),cPe=l(),of=a("h2"),UM=a("a"),f2e=a("span"),f(Ky.$$.fragment),WEr=l(),m2e=a("span"),HEr=o("FlaxAutoModelForCausalLM"),fPe=l(),Br=a("div"),f(Zy.$$.fragment),UEr=l(),rf=a("p"),JEr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),lW=a("a"),YEr=o("from_pretrained()"),KEr=o(" class method or the "),iW=a("a"),ZEr=o("from_config()"),eCr=o(` class
method.`),oCr=l(),eL=a("p"),rCr=o("This class cannot be instantiated directly using "),g2e=a("code"),tCr=o("__init__()"),aCr=o(" (throws an error)."),nCr=l(),yt=a("div"),f(oL.$$.fragment),sCr=l(),h2e=a("p"),lCr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),iCr=l(),tf=a("p"),dCr=o(`Note:
Loading a model from its configuration file does `),p2e=a("strong"),cCr=o("not"),fCr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dW=a("a"),mCr=o("from_pretrained()"),gCr=o(" to load the model weights."),hCr=l(),_2e=a("p"),pCr=o("Examples:"),_Cr=l(),f(rL.$$.fragment),uCr=l(),Lo=a("div"),f(tL.$$.fragment),bCr=l(),u2e=a("p"),FCr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),vCr=l(),kn=a("p"),TCr=o("The model class to instantiate is selected based on the "),b2e=a("code"),MCr=o("model_type"),ECr=o(` property of the config object (either
passed as an argument or loaded from `),F2e=a("code"),CCr=o("pretrained_model_name_or_path"),wCr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),v2e=a("code"),ACr=o("pretrained_model_name_or_path"),yCr=o(":"),LCr=l(),ca=a("ul"),JM=a("li"),T2e=a("strong"),xCr=o("bart"),kCr=o(" \u2014 "),cW=a("a"),SCr=o("FlaxBartForCausalLM"),RCr=o(" (BART model)"),BCr=l(),YM=a("li"),M2e=a("strong"),PCr=o("gpt2"),$Cr=o(" \u2014 "),fW=a("a"),ICr=o("FlaxGPT2LMHeadModel"),qCr=o(" (OpenAI GPT-2 model)"),NCr=l(),KM=a("li"),E2e=a("strong"),jCr=o("gpt_neo"),DCr=o(" \u2014 "),mW=a("a"),GCr=o("FlaxGPTNeoForCausalLM"),OCr=o(" (GPT Neo model)"),VCr=l(),ZM=a("li"),C2e=a("strong"),XCr=o("gptj"),zCr=o(" \u2014 "),gW=a("a"),QCr=o("FlaxGPTJForCausalLM"),WCr=o(" (GPT-J model)"),HCr=l(),e4=a("li"),w2e=a("strong"),UCr=o("xglm"),JCr=o(" \u2014 "),hW=a("a"),YCr=o("FlaxXGLMForCausalLM"),KCr=o(" (XGLM model)"),ZCr=l(),A2e=a("p"),e3r=o("Examples:"),o3r=l(),f(aL.$$.fragment),mPe=l(),af=a("h2"),o4=a("a"),y2e=a("span"),f(nL.$$.fragment),r3r=l(),L2e=a("span"),t3r=o("FlaxAutoModelForPreTraining"),gPe=l(),Pr=a("div"),f(sL.$$.fragment),a3r=l(),nf=a("p"),n3r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),pW=a("a"),s3r=o("from_pretrained()"),l3r=o(" class method or the "),_W=a("a"),i3r=o("from_config()"),d3r=o(` class
method.`),c3r=l(),lL=a("p"),f3r=o("This class cannot be instantiated directly using "),x2e=a("code"),m3r=o("__init__()"),g3r=o(" (throws an error)."),h3r=l(),Lt=a("div"),f(iL.$$.fragment),p3r=l(),k2e=a("p"),_3r=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),u3r=l(),sf=a("p"),b3r=o(`Note:
Loading a model from its configuration file does `),S2e=a("strong"),F3r=o("not"),v3r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uW=a("a"),T3r=o("from_pretrained()"),M3r=o(" to load the model weights."),E3r=l(),R2e=a("p"),C3r=o("Examples:"),w3r=l(),f(dL.$$.fragment),A3r=l(),xo=a("div"),f(cL.$$.fragment),y3r=l(),B2e=a("p"),L3r=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),x3r=l(),Sn=a("p"),k3r=o("The model class to instantiate is selected based on the "),P2e=a("code"),S3r=o("model_type"),R3r=o(` property of the config object (either
passed as an argument or loaded from `),$2e=a("code"),B3r=o("pretrained_model_name_or_path"),P3r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),I2e=a("code"),$3r=o("pretrained_model_name_or_path"),I3r=o(":"),q3r=l(),me=a("ul"),r4=a("li"),q2e=a("strong"),N3r=o("albert"),j3r=o(" \u2014 "),bW=a("a"),D3r=o("FlaxAlbertForPreTraining"),G3r=o(" (ALBERT model)"),O3r=l(),t4=a("li"),N2e=a("strong"),V3r=o("bart"),X3r=o(" \u2014 "),FW=a("a"),z3r=o("FlaxBartForConditionalGeneration"),Q3r=o(" (BART model)"),W3r=l(),a4=a("li"),j2e=a("strong"),H3r=o("bert"),U3r=o(" \u2014 "),vW=a("a"),J3r=o("FlaxBertForPreTraining"),Y3r=o(" (BERT model)"),K3r=l(),n4=a("li"),D2e=a("strong"),Z3r=o("big_bird"),ewr=o(" \u2014 "),TW=a("a"),owr=o("FlaxBigBirdForPreTraining"),rwr=o(" (BigBird model)"),twr=l(),s4=a("li"),G2e=a("strong"),awr=o("electra"),nwr=o(" \u2014 "),MW=a("a"),swr=o("FlaxElectraForPreTraining"),lwr=o(" (ELECTRA model)"),iwr=l(),l4=a("li"),O2e=a("strong"),dwr=o("mbart"),cwr=o(" \u2014 "),EW=a("a"),fwr=o("FlaxMBartForConditionalGeneration"),mwr=o(" (mBART model)"),gwr=l(),i4=a("li"),V2e=a("strong"),hwr=o("mt5"),pwr=o(" \u2014 "),CW=a("a"),_wr=o("FlaxMT5ForConditionalGeneration"),uwr=o(" (mT5 model)"),bwr=l(),d4=a("li"),X2e=a("strong"),Fwr=o("roberta"),vwr=o(" \u2014 "),wW=a("a"),Twr=o("FlaxRobertaForMaskedLM"),Mwr=o(" (RoBERTa model)"),Ewr=l(),c4=a("li"),z2e=a("strong"),Cwr=o("roformer"),wwr=o(" \u2014 "),AW=a("a"),Awr=o("FlaxRoFormerForMaskedLM"),ywr=o(" (RoFormer model)"),Lwr=l(),f4=a("li"),Q2e=a("strong"),xwr=o("t5"),kwr=o(" \u2014 "),yW=a("a"),Swr=o("FlaxT5ForConditionalGeneration"),Rwr=o(" (T5 model)"),Bwr=l(),m4=a("li"),W2e=a("strong"),Pwr=o("wav2vec2"),$wr=o(" \u2014 "),LW=a("a"),Iwr=o("FlaxWav2Vec2ForPreTraining"),qwr=o(" (Wav2Vec2 model)"),Nwr=l(),g4=a("li"),H2e=a("strong"),jwr=o("xlm-roberta"),Dwr=o(" \u2014 "),xW=a("a"),Gwr=o("FlaxXLMRobertaForMaskedLM"),Owr=o(" (XLM-RoBERTa model)"),Vwr=l(),U2e=a("p"),Xwr=o("Examples:"),zwr=l(),f(fL.$$.fragment),hPe=l(),lf=a("h2"),h4=a("a"),J2e=a("span"),f(mL.$$.fragment),Qwr=l(),Y2e=a("span"),Wwr=o("FlaxAutoModelForMaskedLM"),pPe=l(),$r=a("div"),f(gL.$$.fragment),Hwr=l(),df=a("p"),Uwr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),kW=a("a"),Jwr=o("from_pretrained()"),Ywr=o(" class method or the "),SW=a("a"),Kwr=o("from_config()"),Zwr=o(` class
method.`),eAr=l(),hL=a("p"),oAr=o("This class cannot be instantiated directly using "),K2e=a("code"),rAr=o("__init__()"),tAr=o(" (throws an error)."),aAr=l(),xt=a("div"),f(pL.$$.fragment),nAr=l(),Z2e=a("p"),sAr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),lAr=l(),cf=a("p"),iAr=o(`Note:
Loading a model from its configuration file does `),eFe=a("strong"),dAr=o("not"),cAr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),RW=a("a"),fAr=o("from_pretrained()"),mAr=o(" to load the model weights."),gAr=l(),oFe=a("p"),hAr=o("Examples:"),pAr=l(),f(_L.$$.fragment),_Ar=l(),ko=a("div"),f(uL.$$.fragment),uAr=l(),rFe=a("p"),bAr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),FAr=l(),Rn=a("p"),vAr=o("The model class to instantiate is selected based on the "),tFe=a("code"),TAr=o("model_type"),MAr=o(` property of the config object (either
passed as an argument or loaded from `),aFe=a("code"),EAr=o("pretrained_model_name_or_path"),CAr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nFe=a("code"),wAr=o("pretrained_model_name_or_path"),AAr=o(":"),yAr=l(),Fe=a("ul"),p4=a("li"),sFe=a("strong"),LAr=o("albert"),xAr=o(" \u2014 "),BW=a("a"),kAr=o("FlaxAlbertForMaskedLM"),SAr=o(" (ALBERT model)"),RAr=l(),_4=a("li"),lFe=a("strong"),BAr=o("bart"),PAr=o(" \u2014 "),PW=a("a"),$Ar=o("FlaxBartForConditionalGeneration"),IAr=o(" (BART model)"),qAr=l(),u4=a("li"),iFe=a("strong"),NAr=o("bert"),jAr=o(" \u2014 "),$W=a("a"),DAr=o("FlaxBertForMaskedLM"),GAr=o(" (BERT model)"),OAr=l(),b4=a("li"),dFe=a("strong"),VAr=o("big_bird"),XAr=o(" \u2014 "),IW=a("a"),zAr=o("FlaxBigBirdForMaskedLM"),QAr=o(" (BigBird model)"),WAr=l(),F4=a("li"),cFe=a("strong"),HAr=o("distilbert"),UAr=o(" \u2014 "),qW=a("a"),JAr=o("FlaxDistilBertForMaskedLM"),YAr=o(" (DistilBERT model)"),KAr=l(),v4=a("li"),fFe=a("strong"),ZAr=o("electra"),e0r=o(" \u2014 "),NW=a("a"),o0r=o("FlaxElectraForMaskedLM"),r0r=o(" (ELECTRA model)"),t0r=l(),T4=a("li"),mFe=a("strong"),a0r=o("mbart"),n0r=o(" \u2014 "),jW=a("a"),s0r=o("FlaxMBartForConditionalGeneration"),l0r=o(" (mBART model)"),i0r=l(),M4=a("li"),gFe=a("strong"),d0r=o("roberta"),c0r=o(" \u2014 "),DW=a("a"),f0r=o("FlaxRobertaForMaskedLM"),m0r=o(" (RoBERTa model)"),g0r=l(),E4=a("li"),hFe=a("strong"),h0r=o("roformer"),p0r=o(" \u2014 "),GW=a("a"),_0r=o("FlaxRoFormerForMaskedLM"),u0r=o(" (RoFormer model)"),b0r=l(),C4=a("li"),pFe=a("strong"),F0r=o("xlm-roberta"),v0r=o(" \u2014 "),OW=a("a"),T0r=o("FlaxXLMRobertaForMaskedLM"),M0r=o(" (XLM-RoBERTa model)"),E0r=l(),_Fe=a("p"),C0r=o("Examples:"),w0r=l(),f(bL.$$.fragment),_Pe=l(),ff=a("h2"),w4=a("a"),uFe=a("span"),f(FL.$$.fragment),A0r=l(),bFe=a("span"),y0r=o("FlaxAutoModelForSeq2SeqLM"),uPe=l(),Ir=a("div"),f(vL.$$.fragment),L0r=l(),mf=a("p"),x0r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),VW=a("a"),k0r=o("from_pretrained()"),S0r=o(" class method or the "),XW=a("a"),R0r=o("from_config()"),B0r=o(` class
method.`),P0r=l(),TL=a("p"),$0r=o("This class cannot be instantiated directly using "),FFe=a("code"),I0r=o("__init__()"),q0r=o(" (throws an error)."),N0r=l(),kt=a("div"),f(ML.$$.fragment),j0r=l(),vFe=a("p"),D0r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),G0r=l(),gf=a("p"),O0r=o(`Note:
Loading a model from its configuration file does `),TFe=a("strong"),V0r=o("not"),X0r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zW=a("a"),z0r=o("from_pretrained()"),Q0r=o(" to load the model weights."),W0r=l(),MFe=a("p"),H0r=o("Examples:"),U0r=l(),f(EL.$$.fragment),J0r=l(),So=a("div"),f(CL.$$.fragment),Y0r=l(),EFe=a("p"),K0r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Z0r=l(),Bn=a("p"),eyr=o("The model class to instantiate is selected based on the "),CFe=a("code"),oyr=o("model_type"),ryr=o(` property of the config object (either
passed as an argument or loaded from `),wFe=a("code"),tyr=o("pretrained_model_name_or_path"),ayr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),AFe=a("code"),nyr=o("pretrained_model_name_or_path"),syr=o(":"),lyr=l(),Ee=a("ul"),A4=a("li"),yFe=a("strong"),iyr=o("bart"),dyr=o(" \u2014 "),QW=a("a"),cyr=o("FlaxBartForConditionalGeneration"),fyr=o(" (BART model)"),myr=l(),y4=a("li"),LFe=a("strong"),gyr=o("blenderbot"),hyr=o(" \u2014 "),WW=a("a"),pyr=o("FlaxBlenderbotForConditionalGeneration"),_yr=o(" (Blenderbot model)"),uyr=l(),L4=a("li"),xFe=a("strong"),byr=o("blenderbot-small"),Fyr=o(" \u2014 "),HW=a("a"),vyr=o("FlaxBlenderbotSmallForConditionalGeneration"),Tyr=o(" (BlenderbotSmall model)"),Myr=l(),x4=a("li"),kFe=a("strong"),Eyr=o("encoder-decoder"),Cyr=o(" \u2014 "),UW=a("a"),wyr=o("FlaxEncoderDecoderModel"),Ayr=o(" (Encoder decoder model)"),yyr=l(),k4=a("li"),SFe=a("strong"),Lyr=o("marian"),xyr=o(" \u2014 "),JW=a("a"),kyr=o("FlaxMarianMTModel"),Syr=o(" (Marian model)"),Ryr=l(),S4=a("li"),RFe=a("strong"),Byr=o("mbart"),Pyr=o(" \u2014 "),YW=a("a"),$yr=o("FlaxMBartForConditionalGeneration"),Iyr=o(" (mBART model)"),qyr=l(),R4=a("li"),BFe=a("strong"),Nyr=o("mt5"),jyr=o(" \u2014 "),KW=a("a"),Dyr=o("FlaxMT5ForConditionalGeneration"),Gyr=o(" (mT5 model)"),Oyr=l(),B4=a("li"),PFe=a("strong"),Vyr=o("pegasus"),Xyr=o(" \u2014 "),ZW=a("a"),zyr=o("FlaxPegasusForConditionalGeneration"),Qyr=o(" (Pegasus model)"),Wyr=l(),P4=a("li"),$Fe=a("strong"),Hyr=o("t5"),Uyr=o(" \u2014 "),eH=a("a"),Jyr=o("FlaxT5ForConditionalGeneration"),Yyr=o(" (T5 model)"),Kyr=l(),IFe=a("p"),Zyr=o("Examples:"),eLr=l(),f(wL.$$.fragment),bPe=l(),hf=a("h2"),$4=a("a"),qFe=a("span"),f(AL.$$.fragment),oLr=l(),NFe=a("span"),rLr=o("FlaxAutoModelForSequenceClassification"),FPe=l(),qr=a("div"),f(yL.$$.fragment),tLr=l(),pf=a("p"),aLr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),oH=a("a"),nLr=o("from_pretrained()"),sLr=o(" class method or the "),rH=a("a"),lLr=o("from_config()"),iLr=o(` class
method.`),dLr=l(),LL=a("p"),cLr=o("This class cannot be instantiated directly using "),jFe=a("code"),fLr=o("__init__()"),mLr=o(" (throws an error)."),gLr=l(),St=a("div"),f(xL.$$.fragment),hLr=l(),DFe=a("p"),pLr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),_Lr=l(),_f=a("p"),uLr=o(`Note:
Loading a model from its configuration file does `),GFe=a("strong"),bLr=o("not"),FLr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tH=a("a"),vLr=o("from_pretrained()"),TLr=o(" to load the model weights."),MLr=l(),OFe=a("p"),ELr=o("Examples:"),CLr=l(),f(kL.$$.fragment),wLr=l(),Ro=a("div"),f(SL.$$.fragment),ALr=l(),VFe=a("p"),yLr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),LLr=l(),Pn=a("p"),xLr=o("The model class to instantiate is selected based on the "),XFe=a("code"),kLr=o("model_type"),SLr=o(` property of the config object (either
passed as an argument or loaded from `),zFe=a("code"),RLr=o("pretrained_model_name_or_path"),BLr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),QFe=a("code"),PLr=o("pretrained_model_name_or_path"),$Lr=o(":"),ILr=l(),ve=a("ul"),I4=a("li"),WFe=a("strong"),qLr=o("albert"),NLr=o(" \u2014 "),aH=a("a"),jLr=o("FlaxAlbertForSequenceClassification"),DLr=o(" (ALBERT model)"),GLr=l(),q4=a("li"),HFe=a("strong"),OLr=o("bart"),VLr=o(" \u2014 "),nH=a("a"),XLr=o("FlaxBartForSequenceClassification"),zLr=o(" (BART model)"),QLr=l(),N4=a("li"),UFe=a("strong"),WLr=o("bert"),HLr=o(" \u2014 "),sH=a("a"),ULr=o("FlaxBertForSequenceClassification"),JLr=o(" (BERT model)"),YLr=l(),j4=a("li"),JFe=a("strong"),KLr=o("big_bird"),ZLr=o(" \u2014 "),lH=a("a"),e8r=o("FlaxBigBirdForSequenceClassification"),o8r=o(" (BigBird model)"),r8r=l(),D4=a("li"),YFe=a("strong"),t8r=o("distilbert"),a8r=o(" \u2014 "),iH=a("a"),n8r=o("FlaxDistilBertForSequenceClassification"),s8r=o(" (DistilBERT model)"),l8r=l(),G4=a("li"),KFe=a("strong"),i8r=o("electra"),d8r=o(" \u2014 "),dH=a("a"),c8r=o("FlaxElectraForSequenceClassification"),f8r=o(" (ELECTRA model)"),m8r=l(),O4=a("li"),ZFe=a("strong"),g8r=o("mbart"),h8r=o(" \u2014 "),cH=a("a"),p8r=o("FlaxMBartForSequenceClassification"),_8r=o(" (mBART model)"),u8r=l(),V4=a("li"),eve=a("strong"),b8r=o("roberta"),F8r=o(" \u2014 "),fH=a("a"),v8r=o("FlaxRobertaForSequenceClassification"),T8r=o(" (RoBERTa model)"),M8r=l(),X4=a("li"),ove=a("strong"),E8r=o("roformer"),C8r=o(" \u2014 "),mH=a("a"),w8r=o("FlaxRoFormerForSequenceClassification"),A8r=o(" (RoFormer model)"),y8r=l(),z4=a("li"),rve=a("strong"),L8r=o("xlm-roberta"),x8r=o(" \u2014 "),gH=a("a"),k8r=o("FlaxXLMRobertaForSequenceClassification"),S8r=o(" (XLM-RoBERTa model)"),R8r=l(),tve=a("p"),B8r=o("Examples:"),P8r=l(),f(RL.$$.fragment),vPe=l(),uf=a("h2"),Q4=a("a"),ave=a("span"),f(BL.$$.fragment),$8r=l(),nve=a("span"),I8r=o("FlaxAutoModelForQuestionAnswering"),TPe=l(),Nr=a("div"),f(PL.$$.fragment),q8r=l(),bf=a("p"),N8r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),hH=a("a"),j8r=o("from_pretrained()"),D8r=o(" class method or the "),pH=a("a"),G8r=o("from_config()"),O8r=o(` class
method.`),V8r=l(),$L=a("p"),X8r=o("This class cannot be instantiated directly using "),sve=a("code"),z8r=o("__init__()"),Q8r=o(" (throws an error)."),W8r=l(),Rt=a("div"),f(IL.$$.fragment),H8r=l(),lve=a("p"),U8r=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),J8r=l(),Ff=a("p"),Y8r=o(`Note:
Loading a model from its configuration file does `),ive=a("strong"),K8r=o("not"),Z8r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_H=a("a"),e7r=o("from_pretrained()"),o7r=o(" to load the model weights."),r7r=l(),dve=a("p"),t7r=o("Examples:"),a7r=l(),f(qL.$$.fragment),n7r=l(),Bo=a("div"),f(NL.$$.fragment),s7r=l(),cve=a("p"),l7r=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),i7r=l(),$n=a("p"),d7r=o("The model class to instantiate is selected based on the "),fve=a("code"),c7r=o("model_type"),f7r=o(` property of the config object (either
passed as an argument or loaded from `),mve=a("code"),m7r=o("pretrained_model_name_or_path"),g7r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gve=a("code"),h7r=o("pretrained_model_name_or_path"),p7r=o(":"),_7r=l(),Te=a("ul"),W4=a("li"),hve=a("strong"),u7r=o("albert"),b7r=o(" \u2014 "),uH=a("a"),F7r=o("FlaxAlbertForQuestionAnswering"),v7r=o(" (ALBERT model)"),T7r=l(),H4=a("li"),pve=a("strong"),M7r=o("bart"),E7r=o(" \u2014 "),bH=a("a"),C7r=o("FlaxBartForQuestionAnswering"),w7r=o(" (BART model)"),A7r=l(),U4=a("li"),_ve=a("strong"),y7r=o("bert"),L7r=o(" \u2014 "),FH=a("a"),x7r=o("FlaxBertForQuestionAnswering"),k7r=o(" (BERT model)"),S7r=l(),J4=a("li"),uve=a("strong"),R7r=o("big_bird"),B7r=o(" \u2014 "),vH=a("a"),P7r=o("FlaxBigBirdForQuestionAnswering"),$7r=o(" (BigBird model)"),I7r=l(),Y4=a("li"),bve=a("strong"),q7r=o("distilbert"),N7r=o(" \u2014 "),TH=a("a"),j7r=o("FlaxDistilBertForQuestionAnswering"),D7r=o(" (DistilBERT model)"),G7r=l(),K4=a("li"),Fve=a("strong"),O7r=o("electra"),V7r=o(" \u2014 "),MH=a("a"),X7r=o("FlaxElectraForQuestionAnswering"),z7r=o(" (ELECTRA model)"),Q7r=l(),Z4=a("li"),vve=a("strong"),W7r=o("mbart"),H7r=o(" \u2014 "),EH=a("a"),U7r=o("FlaxMBartForQuestionAnswering"),J7r=o(" (mBART model)"),Y7r=l(),eE=a("li"),Tve=a("strong"),K7r=o("roberta"),Z7r=o(" \u2014 "),CH=a("a"),exr=o("FlaxRobertaForQuestionAnswering"),oxr=o(" (RoBERTa model)"),rxr=l(),oE=a("li"),Mve=a("strong"),txr=o("roformer"),axr=o(" \u2014 "),wH=a("a"),nxr=o("FlaxRoFormerForQuestionAnswering"),sxr=o(" (RoFormer model)"),lxr=l(),rE=a("li"),Eve=a("strong"),ixr=o("xlm-roberta"),dxr=o(" \u2014 "),AH=a("a"),cxr=o("FlaxXLMRobertaForQuestionAnswering"),fxr=o(" (XLM-RoBERTa model)"),mxr=l(),Cve=a("p"),gxr=o("Examples:"),hxr=l(),f(jL.$$.fragment),MPe=l(),vf=a("h2"),tE=a("a"),wve=a("span"),f(DL.$$.fragment),pxr=l(),Ave=a("span"),_xr=o("FlaxAutoModelForTokenClassification"),EPe=l(),jr=a("div"),f(GL.$$.fragment),uxr=l(),Tf=a("p"),bxr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),yH=a("a"),Fxr=o("from_pretrained()"),vxr=o(" class method or the "),LH=a("a"),Txr=o("from_config()"),Mxr=o(` class
method.`),Exr=l(),OL=a("p"),Cxr=o("This class cannot be instantiated directly using "),yve=a("code"),wxr=o("__init__()"),Axr=o(" (throws an error)."),yxr=l(),Bt=a("div"),f(VL.$$.fragment),Lxr=l(),Lve=a("p"),xxr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),kxr=l(),Mf=a("p"),Sxr=o(`Note:
Loading a model from its configuration file does `),xve=a("strong"),Rxr=o("not"),Bxr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xH=a("a"),Pxr=o("from_pretrained()"),$xr=o(" to load the model weights."),Ixr=l(),kve=a("p"),qxr=o("Examples:"),Nxr=l(),f(XL.$$.fragment),jxr=l(),Po=a("div"),f(zL.$$.fragment),Dxr=l(),Sve=a("p"),Gxr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Oxr=l(),In=a("p"),Vxr=o("The model class to instantiate is selected based on the "),Rve=a("code"),Xxr=o("model_type"),zxr=o(` property of the config object (either
passed as an argument or loaded from `),Bve=a("code"),Qxr=o("pretrained_model_name_or_path"),Wxr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Pve=a("code"),Hxr=o("pretrained_model_name_or_path"),Uxr=o(":"),Jxr=l(),Be=a("ul"),aE=a("li"),$ve=a("strong"),Yxr=o("albert"),Kxr=o(" \u2014 "),kH=a("a"),Zxr=o("FlaxAlbertForTokenClassification"),ekr=o(" (ALBERT model)"),okr=l(),nE=a("li"),Ive=a("strong"),rkr=o("bert"),tkr=o(" \u2014 "),SH=a("a"),akr=o("FlaxBertForTokenClassification"),nkr=o(" (BERT model)"),skr=l(),sE=a("li"),qve=a("strong"),lkr=o("big_bird"),ikr=o(" \u2014 "),RH=a("a"),dkr=o("FlaxBigBirdForTokenClassification"),ckr=o(" (BigBird model)"),fkr=l(),lE=a("li"),Nve=a("strong"),mkr=o("distilbert"),gkr=o(" \u2014 "),BH=a("a"),hkr=o("FlaxDistilBertForTokenClassification"),pkr=o(" (DistilBERT model)"),_kr=l(),iE=a("li"),jve=a("strong"),ukr=o("electra"),bkr=o(" \u2014 "),PH=a("a"),Fkr=o("FlaxElectraForTokenClassification"),vkr=o(" (ELECTRA model)"),Tkr=l(),dE=a("li"),Dve=a("strong"),Mkr=o("roberta"),Ekr=o(" \u2014 "),$H=a("a"),Ckr=o("FlaxRobertaForTokenClassification"),wkr=o(" (RoBERTa model)"),Akr=l(),cE=a("li"),Gve=a("strong"),ykr=o("roformer"),Lkr=o(" \u2014 "),IH=a("a"),xkr=o("FlaxRoFormerForTokenClassification"),kkr=o(" (RoFormer model)"),Skr=l(),fE=a("li"),Ove=a("strong"),Rkr=o("xlm-roberta"),Bkr=o(" \u2014 "),qH=a("a"),Pkr=o("FlaxXLMRobertaForTokenClassification"),$kr=o(" (XLM-RoBERTa model)"),Ikr=l(),Vve=a("p"),qkr=o("Examples:"),Nkr=l(),f(QL.$$.fragment),CPe=l(),Ef=a("h2"),mE=a("a"),Xve=a("span"),f(WL.$$.fragment),jkr=l(),zve=a("span"),Dkr=o("FlaxAutoModelForMultipleChoice"),wPe=l(),Dr=a("div"),f(HL.$$.fragment),Gkr=l(),Cf=a("p"),Okr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),NH=a("a"),Vkr=o("from_pretrained()"),Xkr=o(" class method or the "),jH=a("a"),zkr=o("from_config()"),Qkr=o(` class
method.`),Wkr=l(),UL=a("p"),Hkr=o("This class cannot be instantiated directly using "),Qve=a("code"),Ukr=o("__init__()"),Jkr=o(" (throws an error)."),Ykr=l(),Pt=a("div"),f(JL.$$.fragment),Kkr=l(),Wve=a("p"),Zkr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),eSr=l(),wf=a("p"),oSr=o(`Note:
Loading a model from its configuration file does `),Hve=a("strong"),rSr=o("not"),tSr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),DH=a("a"),aSr=o("from_pretrained()"),nSr=o(" to load the model weights."),sSr=l(),Uve=a("p"),lSr=o("Examples:"),iSr=l(),f(YL.$$.fragment),dSr=l(),$o=a("div"),f(KL.$$.fragment),cSr=l(),Jve=a("p"),fSr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),mSr=l(),qn=a("p"),gSr=o("The model class to instantiate is selected based on the "),Yve=a("code"),hSr=o("model_type"),pSr=o(` property of the config object (either
passed as an argument or loaded from `),Kve=a("code"),_Sr=o("pretrained_model_name_or_path"),uSr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zve=a("code"),bSr=o("pretrained_model_name_or_path"),FSr=o(":"),vSr=l(),Pe=a("ul"),gE=a("li"),eTe=a("strong"),TSr=o("albert"),MSr=o(" \u2014 "),GH=a("a"),ESr=o("FlaxAlbertForMultipleChoice"),CSr=o(" (ALBERT model)"),wSr=l(),hE=a("li"),oTe=a("strong"),ASr=o("bert"),ySr=o(" \u2014 "),OH=a("a"),LSr=o("FlaxBertForMultipleChoice"),xSr=o(" (BERT model)"),kSr=l(),pE=a("li"),rTe=a("strong"),SSr=o("big_bird"),RSr=o(" \u2014 "),VH=a("a"),BSr=o("FlaxBigBirdForMultipleChoice"),PSr=o(" (BigBird model)"),$Sr=l(),_E=a("li"),tTe=a("strong"),ISr=o("distilbert"),qSr=o(" \u2014 "),XH=a("a"),NSr=o("FlaxDistilBertForMultipleChoice"),jSr=o(" (DistilBERT model)"),DSr=l(),uE=a("li"),aTe=a("strong"),GSr=o("electra"),OSr=o(" \u2014 "),zH=a("a"),VSr=o("FlaxElectraForMultipleChoice"),XSr=o(" (ELECTRA model)"),zSr=l(),bE=a("li"),nTe=a("strong"),QSr=o("roberta"),WSr=o(" \u2014 "),QH=a("a"),HSr=o("FlaxRobertaForMultipleChoice"),USr=o(" (RoBERTa model)"),JSr=l(),FE=a("li"),sTe=a("strong"),YSr=o("roformer"),KSr=o(" \u2014 "),WH=a("a"),ZSr=o("FlaxRoFormerForMultipleChoice"),eRr=o(" (RoFormer model)"),oRr=l(),vE=a("li"),lTe=a("strong"),rRr=o("xlm-roberta"),tRr=o(" \u2014 "),HH=a("a"),aRr=o("FlaxXLMRobertaForMultipleChoice"),nRr=o(" (XLM-RoBERTa model)"),sRr=l(),iTe=a("p"),lRr=o("Examples:"),iRr=l(),f(ZL.$$.fragment),APe=l(),Af=a("h2"),TE=a("a"),dTe=a("span"),f(e8.$$.fragment),dRr=l(),cTe=a("span"),cRr=o("FlaxAutoModelForNextSentencePrediction"),yPe=l(),Gr=a("div"),f(o8.$$.fragment),fRr=l(),yf=a("p"),mRr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),UH=a("a"),gRr=o("from_pretrained()"),hRr=o(" class method or the "),JH=a("a"),pRr=o("from_config()"),_Rr=o(` class
method.`),uRr=l(),r8=a("p"),bRr=o("This class cannot be instantiated directly using "),fTe=a("code"),FRr=o("__init__()"),vRr=o(" (throws an error)."),TRr=l(),$t=a("div"),f(t8.$$.fragment),MRr=l(),mTe=a("p"),ERr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),CRr=l(),Lf=a("p"),wRr=o(`Note:
Loading a model from its configuration file does `),gTe=a("strong"),ARr=o("not"),yRr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),YH=a("a"),LRr=o("from_pretrained()"),xRr=o(" to load the model weights."),kRr=l(),hTe=a("p"),SRr=o("Examples:"),RRr=l(),f(a8.$$.fragment),BRr=l(),Io=a("div"),f(n8.$$.fragment),PRr=l(),pTe=a("p"),$Rr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),IRr=l(),Nn=a("p"),qRr=o("The model class to instantiate is selected based on the "),_Te=a("code"),NRr=o("model_type"),jRr=o(` property of the config object (either
passed as an argument or loaded from `),uTe=a("code"),DRr=o("pretrained_model_name_or_path"),GRr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bTe=a("code"),ORr=o("pretrained_model_name_or_path"),VRr=o(":"),XRr=l(),FTe=a("ul"),ME=a("li"),vTe=a("strong"),zRr=o("bert"),QRr=o(" \u2014 "),KH=a("a"),WRr=o("FlaxBertForNextSentencePrediction"),HRr=o(" (BERT model)"),URr=l(),TTe=a("p"),JRr=o("Examples:"),YRr=l(),f(s8.$$.fragment),LPe=l(),xf=a("h2"),EE=a("a"),MTe=a("span"),f(l8.$$.fragment),KRr=l(),ETe=a("span"),ZRr=o("FlaxAutoModelForImageClassification"),xPe=l(),Or=a("div"),f(i8.$$.fragment),eBr=l(),kf=a("p"),oBr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),ZH=a("a"),rBr=o("from_pretrained()"),tBr=o(" class method or the "),eU=a("a"),aBr=o("from_config()"),nBr=o(` class
method.`),sBr=l(),d8=a("p"),lBr=o("This class cannot be instantiated directly using "),CTe=a("code"),iBr=o("__init__()"),dBr=o(" (throws an error)."),cBr=l(),It=a("div"),f(c8.$$.fragment),fBr=l(),wTe=a("p"),mBr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),gBr=l(),Sf=a("p"),hBr=o(`Note:
Loading a model from its configuration file does `),ATe=a("strong"),pBr=o("not"),_Br=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oU=a("a"),uBr=o("from_pretrained()"),bBr=o(" to load the model weights."),FBr=l(),yTe=a("p"),vBr=o("Examples:"),TBr=l(),f(f8.$$.fragment),MBr=l(),qo=a("div"),f(m8.$$.fragment),EBr=l(),LTe=a("p"),CBr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),wBr=l(),jn=a("p"),ABr=o("The model class to instantiate is selected based on the "),xTe=a("code"),yBr=o("model_type"),LBr=o(` property of the config object (either
passed as an argument or loaded from `),kTe=a("code"),xBr=o("pretrained_model_name_or_path"),kBr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),STe=a("code"),SBr=o("pretrained_model_name_or_path"),RBr=o(":"),BBr=l(),g8=a("ul"),CE=a("li"),RTe=a("strong"),PBr=o("beit"),$Br=o(" \u2014 "),rU=a("a"),IBr=o("FlaxBeitForImageClassification"),qBr=o(" (BEiT model)"),NBr=l(),wE=a("li"),BTe=a("strong"),jBr=o("vit"),DBr=o(" \u2014 "),tU=a("a"),GBr=o("FlaxViTForImageClassification"),OBr=o(" (ViT model)"),VBr=l(),PTe=a("p"),XBr=o("Examples:"),zBr=l(),f(h8.$$.fragment),kPe=l(),Rf=a("h2"),AE=a("a"),$Te=a("span"),f(p8.$$.fragment),QBr=l(),ITe=a("span"),WBr=o("FlaxAutoModelForVision2Seq"),SPe=l(),Vr=a("div"),f(_8.$$.fragment),HBr=l(),Bf=a("p"),UBr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),aU=a("a"),JBr=o("from_pretrained()"),YBr=o(" class method or the "),nU=a("a"),KBr=o("from_config()"),ZBr=o(` class
method.`),ePr=l(),u8=a("p"),oPr=o("This class cannot be instantiated directly using "),qTe=a("code"),rPr=o("__init__()"),tPr=o(" (throws an error)."),aPr=l(),qt=a("div"),f(b8.$$.fragment),nPr=l(),NTe=a("p"),sPr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),lPr=l(),Pf=a("p"),iPr=o(`Note:
Loading a model from its configuration file does `),jTe=a("strong"),dPr=o("not"),cPr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sU=a("a"),fPr=o("from_pretrained()"),mPr=o(" to load the model weights."),gPr=l(),DTe=a("p"),hPr=o("Examples:"),pPr=l(),f(F8.$$.fragment),_Pr=l(),No=a("div"),f(v8.$$.fragment),uPr=l(),GTe=a("p"),bPr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),FPr=l(),Dn=a("p"),vPr=o("The model class to instantiate is selected based on the "),OTe=a("code"),TPr=o("model_type"),MPr=o(` property of the config object (either
passed as an argument or loaded from `),VTe=a("code"),EPr=o("pretrained_model_name_or_path"),CPr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),XTe=a("code"),wPr=o("pretrained_model_name_or_path"),APr=o(":"),yPr=l(),zTe=a("ul"),yE=a("li"),QTe=a("strong"),LPr=o("vision-encoder-decoder"),xPr=o(" \u2014 "),lU=a("a"),kPr=o("FlaxVisionEncoderDecoderModel"),SPr=o(" (Vision Encoder decoder model)"),RPr=l(),WTe=a("p"),BPr=o("Examples:"),PPr=l(),f(T8.$$.fragment),this.h()},l(c){const u=E3t('[data-svelte="svelte-1phssyn"]',document.head);Z=n(u,"META",{name:!0,content:!0}),u.forEach(t),io=i(c),de=n(c,"H1",{class:!0});var M8=s(de);Ce=n(M8,"A",{id:!0,class:!0,href:!0});var HTe=s(Ce);lo=n(HTe,"SPAN",{});var UTe=s(lo);m(ge.$$.fragment,UTe),UTe.forEach(t),HTe.forEach(t),Me=i(M8),Xo=n(M8,"SPAN",{});var IPr=s(Xo);Ii=r(IPr,"Auto Classes"),IPr.forEach(t),M8.forEach(t),qf=i(c),fa=n(c,"P",{});var BPe=s(fa);qi=r(BPe,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Ni=n(BPe,"CODE",{});var qPr=s(Ni);yC=r(qPr,"from_pretrained()"),qPr.forEach(t),Nf=r(BPe,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),BPe.forEach(t),xe=i(c),co=n(c,"P",{});var LE=s(co);ji=r(LE,"Instantiating one of "),Gn=n(LE,"A",{href:!0});var NPr=s(Gn);LC=r(NPr,"AutoConfig"),NPr.forEach(t),On=r(LE,", "),Vn=n(LE,"A",{href:!0});var jPr=s(Vn);xC=r(jPr,"AutoModel"),jPr.forEach(t),Di=r(LE,`, and
`),Xn=n(LE,"A",{href:!0});var DPr=s(Xn);kC=r(DPr,"AutoTokenizer"),DPr.forEach(t),Gi=r(LE," will directly create a class of the relevant architecture. For instance"),LE.forEach(t),jf=i(c),m(Da.$$.fragment,c),fo=i(c),ue=n(c,"P",{});var PPe=s(ue);F7=r(PPe,"will create a model that is an instance of "),Oi=n(PPe,"A",{href:!0});var GPr=s(Oi);v7=r(GPr,"BertModel"),GPr.forEach(t),T7=r(PPe,"."),PPe.forEach(t),zo=i(c),Ga=n(c,"P",{});var $Pe=s(Ga);M7=r($Pe,"There is one class of "),Df=n($Pe,"CODE",{});var OPr=s(Df);E7=r(OPr,"AutoModel"),OPr.forEach(t),XIe=r($Pe," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),$Pe.forEach(t),SRe=i(c),Vi=n(c,"H2",{class:!0});var IPe=s(Vi);Gf=n(IPe,"A",{id:!0,class:!0,href:!0});var VPr=s(Gf);oY=n(VPr,"SPAN",{});var XPr=s(oY);m(SC.$$.fragment,XPr),XPr.forEach(t),VPr.forEach(t),zIe=i(IPe),rY=n(IPe,"SPAN",{});var zPr=s(rY);QIe=r(zPr,"Extending the Auto Classes"),zPr.forEach(t),IPe.forEach(t),RRe=i(c),zn=n(c,"P",{});var iU=s(zn);WIe=r(iU,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),tY=n(iU,"CODE",{});var QPr=s(tY);HIe=r(QPr,"NewModel"),QPr.forEach(t),UIe=r(iU,", make sure you have a "),aY=n(iU,"CODE",{});var WPr=s(aY);JIe=r(WPr,"NewModelConfig"),WPr.forEach(t),YIe=r(iU,` then you can add those to the auto
classes like this:`),iU.forEach(t),BRe=i(c),m(RC.$$.fragment,c),PRe=i(c),C7=n(c,"P",{});var HPr=s(C7);KIe=r(HPr,"You will then be able to use the auto classes like you would usually do!"),HPr.forEach(t),$Re=i(c),m(Of.$$.fragment,c),IRe=i(c),Xi=n(c,"H2",{class:!0});var qPe=s(Xi);Vf=n(qPe,"A",{id:!0,class:!0,href:!0});var UPr=s(Vf);nY=n(UPr,"SPAN",{});var JPr=s(nY);m(BC.$$.fragment,JPr),JPr.forEach(t),UPr.forEach(t),ZIe=i(qPe),sY=n(qPe,"SPAN",{});var YPr=s(sY);eqe=r(YPr,"AutoConfig"),YPr.forEach(t),qPe.forEach(t),qRe=i(c),Qo=n(c,"DIV",{class:!0});var Os=s(Qo);m(PC.$$.fragment,Os),oqe=i(Os),$C=n(Os,"P",{});var NPe=s($C);rqe=r(NPe,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),w7=n(NPe,"A",{href:!0});var KPr=s(w7);tqe=r(KPr,"from_pretrained()"),KPr.forEach(t),aqe=r(NPe," class method."),NPe.forEach(t),nqe=i(Os),IC=n(Os,"P",{});var jPe=s(IC);sqe=r(jPe,"This class cannot be instantiated directly using "),lY=n(jPe,"CODE",{});var ZPr=s(lY);lqe=r(ZPr,"__init__()"),ZPr.forEach(t),iqe=r(jPe," (throws an error)."),jPe.forEach(t),dqe=i(Os),mo=n(Os,"DIV",{class:!0});var ga=s(mo);m(qC.$$.fragment,ga),cqe=i(ga),iY=n(ga,"P",{});var e$r=s(iY);fqe=r(e$r,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),e$r.forEach(t),mqe=i(ga),zi=n(ga,"P",{});var dU=s(zi);gqe=r(dU,"The configuration class to instantiate is selected based on the "),dY=n(dU,"CODE",{});var o$r=s(dY);hqe=r(o$r,"model_type"),o$r.forEach(t),pqe=r(dU,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),cY=n(dU,"CODE",{});var r$r=s(cY);_qe=r(r$r,"pretrained_model_name_or_path"),r$r.forEach(t),uqe=r(dU,":"),dU.forEach(t),bqe=i(ga),F=n(ga,"UL",{});var v=s(F);Xf=n(v,"LI",{});var JTe=s(Xf);fY=n(JTe,"STRONG",{});var t$r=s(fY);Fqe=r(t$r,"albert"),t$r.forEach(t),vqe=r(JTe," \u2014 "),A7=n(JTe,"A",{href:!0});var a$r=s(A7);Tqe=r(a$r,"AlbertConfig"),a$r.forEach(t),Mqe=r(JTe," (ALBERT model)"),JTe.forEach(t),Eqe=i(v),zf=n(v,"LI",{});var YTe=s(zf);mY=n(YTe,"STRONG",{});var n$r=s(mY);Cqe=r(n$r,"bart"),n$r.forEach(t),wqe=r(YTe," \u2014 "),y7=n(YTe,"A",{href:!0});var s$r=s(y7);Aqe=r(s$r,"BartConfig"),s$r.forEach(t),yqe=r(YTe," (BART model)"),YTe.forEach(t),Lqe=i(v),Qf=n(v,"LI",{});var KTe=s(Qf);gY=n(KTe,"STRONG",{});var l$r=s(gY);xqe=r(l$r,"beit"),l$r.forEach(t),kqe=r(KTe," \u2014 "),L7=n(KTe,"A",{href:!0});var i$r=s(L7);Sqe=r(i$r,"BeitConfig"),i$r.forEach(t),Rqe=r(KTe," (BEiT model)"),KTe.forEach(t),Bqe=i(v),Wf=n(v,"LI",{});var ZTe=s(Wf);hY=n(ZTe,"STRONG",{});var d$r=s(hY);Pqe=r(d$r,"bert"),d$r.forEach(t),$qe=r(ZTe," \u2014 "),x7=n(ZTe,"A",{href:!0});var c$r=s(x7);Iqe=r(c$r,"BertConfig"),c$r.forEach(t),qqe=r(ZTe," (BERT model)"),ZTe.forEach(t),Nqe=i(v),Hf=n(v,"LI",{});var e9e=s(Hf);pY=n(e9e,"STRONG",{});var f$r=s(pY);jqe=r(f$r,"bert-generation"),f$r.forEach(t),Dqe=r(e9e," \u2014 "),k7=n(e9e,"A",{href:!0});var m$r=s(k7);Gqe=r(m$r,"BertGenerationConfig"),m$r.forEach(t),Oqe=r(e9e," (Bert Generation model)"),e9e.forEach(t),Vqe=i(v),Uf=n(v,"LI",{});var o9e=s(Uf);_Y=n(o9e,"STRONG",{});var g$r=s(_Y);Xqe=r(g$r,"big_bird"),g$r.forEach(t),zqe=r(o9e," \u2014 "),S7=n(o9e,"A",{href:!0});var h$r=s(S7);Qqe=r(h$r,"BigBirdConfig"),h$r.forEach(t),Wqe=r(o9e," (BigBird model)"),o9e.forEach(t),Hqe=i(v),Jf=n(v,"LI",{});var r9e=s(Jf);uY=n(r9e,"STRONG",{});var p$r=s(uY);Uqe=r(p$r,"bigbird_pegasus"),p$r.forEach(t),Jqe=r(r9e," \u2014 "),R7=n(r9e,"A",{href:!0});var _$r=s(R7);Yqe=r(_$r,"BigBirdPegasusConfig"),_$r.forEach(t),Kqe=r(r9e," (BigBirdPegasus model)"),r9e.forEach(t),Zqe=i(v),Yf=n(v,"LI",{});var t9e=s(Yf);bY=n(t9e,"STRONG",{});var u$r=s(bY);eNe=r(u$r,"blenderbot"),u$r.forEach(t),oNe=r(t9e," \u2014 "),B7=n(t9e,"A",{href:!0});var b$r=s(B7);rNe=r(b$r,"BlenderbotConfig"),b$r.forEach(t),tNe=r(t9e," (Blenderbot model)"),t9e.forEach(t),aNe=i(v),Kf=n(v,"LI",{});var a9e=s(Kf);FY=n(a9e,"STRONG",{});var F$r=s(FY);nNe=r(F$r,"blenderbot-small"),F$r.forEach(t),sNe=r(a9e," \u2014 "),P7=n(a9e,"A",{href:!0});var v$r=s(P7);lNe=r(v$r,"BlenderbotSmallConfig"),v$r.forEach(t),iNe=r(a9e," (BlenderbotSmall model)"),a9e.forEach(t),dNe=i(v),Zf=n(v,"LI",{});var n9e=s(Zf);vY=n(n9e,"STRONG",{});var T$r=s(vY);cNe=r(T$r,"camembert"),T$r.forEach(t),fNe=r(n9e," \u2014 "),$7=n(n9e,"A",{href:!0});var M$r=s($7);mNe=r(M$r,"CamembertConfig"),M$r.forEach(t),gNe=r(n9e," (CamemBERT model)"),n9e.forEach(t),hNe=i(v),em=n(v,"LI",{});var s9e=s(em);TY=n(s9e,"STRONG",{});var E$r=s(TY);pNe=r(E$r,"canine"),E$r.forEach(t),_Ne=r(s9e," \u2014 "),I7=n(s9e,"A",{href:!0});var C$r=s(I7);uNe=r(C$r,"CanineConfig"),C$r.forEach(t),bNe=r(s9e," (Canine model)"),s9e.forEach(t),FNe=i(v),om=n(v,"LI",{});var l9e=s(om);MY=n(l9e,"STRONG",{});var w$r=s(MY);vNe=r(w$r,"clip"),w$r.forEach(t),TNe=r(l9e," \u2014 "),q7=n(l9e,"A",{href:!0});var A$r=s(q7);MNe=r(A$r,"CLIPConfig"),A$r.forEach(t),ENe=r(l9e," (CLIP model)"),l9e.forEach(t),CNe=i(v),rm=n(v,"LI",{});var i9e=s(rm);EY=n(i9e,"STRONG",{});var y$r=s(EY);wNe=r(y$r,"convbert"),y$r.forEach(t),ANe=r(i9e," \u2014 "),N7=n(i9e,"A",{href:!0});var L$r=s(N7);yNe=r(L$r,"ConvBertConfig"),L$r.forEach(t),LNe=r(i9e," (ConvBERT model)"),i9e.forEach(t),xNe=i(v),tm=n(v,"LI",{});var d9e=s(tm);CY=n(d9e,"STRONG",{});var x$r=s(CY);kNe=r(x$r,"convnext"),x$r.forEach(t),SNe=r(d9e," \u2014 "),j7=n(d9e,"A",{href:!0});var k$r=s(j7);RNe=r(k$r,"ConvNextConfig"),k$r.forEach(t),BNe=r(d9e," (ConvNext model)"),d9e.forEach(t),PNe=i(v),am=n(v,"LI",{});var c9e=s(am);wY=n(c9e,"STRONG",{});var S$r=s(wY);$Ne=r(S$r,"ctrl"),S$r.forEach(t),INe=r(c9e," \u2014 "),D7=n(c9e,"A",{href:!0});var R$r=s(D7);qNe=r(R$r,"CTRLConfig"),R$r.forEach(t),NNe=r(c9e," (CTRL model)"),c9e.forEach(t),jNe=i(v),nm=n(v,"LI",{});var f9e=s(nm);AY=n(f9e,"STRONG",{});var B$r=s(AY);DNe=r(B$r,"data2vec-audio"),B$r.forEach(t),GNe=r(f9e," \u2014 "),G7=n(f9e,"A",{href:!0});var P$r=s(G7);ONe=r(P$r,"Data2VecAudioConfig"),P$r.forEach(t),VNe=r(f9e," (Data2VecAudio model)"),f9e.forEach(t),XNe=i(v),sm=n(v,"LI",{});var m9e=s(sm);yY=n(m9e,"STRONG",{});var $$r=s(yY);zNe=r($$r,"data2vec-text"),$$r.forEach(t),QNe=r(m9e," \u2014 "),O7=n(m9e,"A",{href:!0});var I$r=s(O7);WNe=r(I$r,"Data2VecTextConfig"),I$r.forEach(t),HNe=r(m9e," (Data2VecText model)"),m9e.forEach(t),UNe=i(v),lm=n(v,"LI",{});var g9e=s(lm);LY=n(g9e,"STRONG",{});var q$r=s(LY);JNe=r(q$r,"deberta"),q$r.forEach(t),YNe=r(g9e," \u2014 "),V7=n(g9e,"A",{href:!0});var N$r=s(V7);KNe=r(N$r,"DebertaConfig"),N$r.forEach(t),ZNe=r(g9e," (DeBERTa model)"),g9e.forEach(t),eje=i(v),im=n(v,"LI",{});var h9e=s(im);xY=n(h9e,"STRONG",{});var j$r=s(xY);oje=r(j$r,"deberta-v2"),j$r.forEach(t),rje=r(h9e," \u2014 "),X7=n(h9e,"A",{href:!0});var D$r=s(X7);tje=r(D$r,"DebertaV2Config"),D$r.forEach(t),aje=r(h9e," (DeBERTa-v2 model)"),h9e.forEach(t),nje=i(v),dm=n(v,"LI",{});var p9e=s(dm);kY=n(p9e,"STRONG",{});var G$r=s(kY);sje=r(G$r,"decision_transformer"),G$r.forEach(t),lje=r(p9e," \u2014 "),z7=n(p9e,"A",{href:!0});var O$r=s(z7);ije=r(O$r,"DecisionTransformerConfig"),O$r.forEach(t),dje=r(p9e," (Decision Transformer model)"),p9e.forEach(t),cje=i(v),cm=n(v,"LI",{});var _9e=s(cm);SY=n(_9e,"STRONG",{});var V$r=s(SY);fje=r(V$r,"deit"),V$r.forEach(t),mje=r(_9e," \u2014 "),Q7=n(_9e,"A",{href:!0});var X$r=s(Q7);gje=r(X$r,"DeiTConfig"),X$r.forEach(t),hje=r(_9e," (DeiT model)"),_9e.forEach(t),pje=i(v),fm=n(v,"LI",{});var u9e=s(fm);RY=n(u9e,"STRONG",{});var z$r=s(RY);_je=r(z$r,"detr"),z$r.forEach(t),uje=r(u9e," \u2014 "),W7=n(u9e,"A",{href:!0});var Q$r=s(W7);bje=r(Q$r,"DetrConfig"),Q$r.forEach(t),Fje=r(u9e," (DETR model)"),u9e.forEach(t),vje=i(v),mm=n(v,"LI",{});var b9e=s(mm);BY=n(b9e,"STRONG",{});var W$r=s(BY);Tje=r(W$r,"distilbert"),W$r.forEach(t),Mje=r(b9e," \u2014 "),H7=n(b9e,"A",{href:!0});var H$r=s(H7);Eje=r(H$r,"DistilBertConfig"),H$r.forEach(t),Cje=r(b9e," (DistilBERT model)"),b9e.forEach(t),wje=i(v),gm=n(v,"LI",{});var F9e=s(gm);PY=n(F9e,"STRONG",{});var U$r=s(PY);Aje=r(U$r,"dpr"),U$r.forEach(t),yje=r(F9e," \u2014 "),U7=n(F9e,"A",{href:!0});var J$r=s(U7);Lje=r(J$r,"DPRConfig"),J$r.forEach(t),xje=r(F9e," (DPR model)"),F9e.forEach(t),kje=i(v),hm=n(v,"LI",{});var v9e=s(hm);$Y=n(v9e,"STRONG",{});var Y$r=s($Y);Sje=r(Y$r,"dpt"),Y$r.forEach(t),Rje=r(v9e," \u2014 "),J7=n(v9e,"A",{href:!0});var K$r=s(J7);Bje=r(K$r,"DPTConfig"),K$r.forEach(t),Pje=r(v9e," (DPT model)"),v9e.forEach(t),$je=i(v),pm=n(v,"LI",{});var T9e=s(pm);IY=n(T9e,"STRONG",{});var Z$r=s(IY);Ije=r(Z$r,"electra"),Z$r.forEach(t),qje=r(T9e," \u2014 "),Y7=n(T9e,"A",{href:!0});var eIr=s(Y7);Nje=r(eIr,"ElectraConfig"),eIr.forEach(t),jje=r(T9e," (ELECTRA model)"),T9e.forEach(t),Dje=i(v),_m=n(v,"LI",{});var M9e=s(_m);qY=n(M9e,"STRONG",{});var oIr=s(qY);Gje=r(oIr,"encoder-decoder"),oIr.forEach(t),Oje=r(M9e," \u2014 "),K7=n(M9e,"A",{href:!0});var rIr=s(K7);Vje=r(rIr,"EncoderDecoderConfig"),rIr.forEach(t),Xje=r(M9e," (Encoder decoder model)"),M9e.forEach(t),zje=i(v),um=n(v,"LI",{});var E9e=s(um);NY=n(E9e,"STRONG",{});var tIr=s(NY);Qje=r(tIr,"flaubert"),tIr.forEach(t),Wje=r(E9e," \u2014 "),Z7=n(E9e,"A",{href:!0});var aIr=s(Z7);Hje=r(aIr,"FlaubertConfig"),aIr.forEach(t),Uje=r(E9e," (FlauBERT model)"),E9e.forEach(t),Jje=i(v),bm=n(v,"LI",{});var C9e=s(bm);jY=n(C9e,"STRONG",{});var nIr=s(jY);Yje=r(nIr,"fnet"),nIr.forEach(t),Kje=r(C9e," \u2014 "),ex=n(C9e,"A",{href:!0});var sIr=s(ex);Zje=r(sIr,"FNetConfig"),sIr.forEach(t),eDe=r(C9e," (FNet model)"),C9e.forEach(t),oDe=i(v),Fm=n(v,"LI",{});var w9e=s(Fm);DY=n(w9e,"STRONG",{});var lIr=s(DY);rDe=r(lIr,"fsmt"),lIr.forEach(t),tDe=r(w9e," \u2014 "),ox=n(w9e,"A",{href:!0});var iIr=s(ox);aDe=r(iIr,"FSMTConfig"),iIr.forEach(t),nDe=r(w9e," (FairSeq Machine-Translation model)"),w9e.forEach(t),sDe=i(v),vm=n(v,"LI",{});var A9e=s(vm);GY=n(A9e,"STRONG",{});var dIr=s(GY);lDe=r(dIr,"funnel"),dIr.forEach(t),iDe=r(A9e," \u2014 "),rx=n(A9e,"A",{href:!0});var cIr=s(rx);dDe=r(cIr,"FunnelConfig"),cIr.forEach(t),cDe=r(A9e," (Funnel Transformer model)"),A9e.forEach(t),fDe=i(v),Tm=n(v,"LI",{});var y9e=s(Tm);OY=n(y9e,"STRONG",{});var fIr=s(OY);mDe=r(fIr,"glpn"),fIr.forEach(t),gDe=r(y9e," \u2014 "),tx=n(y9e,"A",{href:!0});var mIr=s(tx);hDe=r(mIr,"GLPNConfig"),mIr.forEach(t),pDe=r(y9e," (GLPN model)"),y9e.forEach(t),_De=i(v),Mm=n(v,"LI",{});var L9e=s(Mm);VY=n(L9e,"STRONG",{});var gIr=s(VY);uDe=r(gIr,"gpt2"),gIr.forEach(t),bDe=r(L9e," \u2014 "),ax=n(L9e,"A",{href:!0});var hIr=s(ax);FDe=r(hIr,"GPT2Config"),hIr.forEach(t),vDe=r(L9e," (OpenAI GPT-2 model)"),L9e.forEach(t),TDe=i(v),Em=n(v,"LI",{});var x9e=s(Em);XY=n(x9e,"STRONG",{});var pIr=s(XY);MDe=r(pIr,"gpt_neo"),pIr.forEach(t),EDe=r(x9e," \u2014 "),nx=n(x9e,"A",{href:!0});var _Ir=s(nx);CDe=r(_Ir,"GPTNeoConfig"),_Ir.forEach(t),wDe=r(x9e," (GPT Neo model)"),x9e.forEach(t),ADe=i(v),Cm=n(v,"LI",{});var k9e=s(Cm);zY=n(k9e,"STRONG",{});var uIr=s(zY);yDe=r(uIr,"gpt_neox"),uIr.forEach(t),LDe=r(k9e," \u2014 "),QY=n(k9e,"CODE",{});var bIr=s(QY);xDe=r(bIr,"GPTNeoXConfig"),bIr.forEach(t),kDe=r(k9e," (GPTNeoX model)"),k9e.forEach(t),SDe=i(v),wm=n(v,"LI",{});var S9e=s(wm);WY=n(S9e,"STRONG",{});var FIr=s(WY);RDe=r(FIr,"gptj"),FIr.forEach(t),BDe=r(S9e," \u2014 "),sx=n(S9e,"A",{href:!0});var vIr=s(sx);PDe=r(vIr,"GPTJConfig"),vIr.forEach(t),$De=r(S9e," (GPT-J model)"),S9e.forEach(t),IDe=i(v),Am=n(v,"LI",{});var R9e=s(Am);HY=n(R9e,"STRONG",{});var TIr=s(HY);qDe=r(TIr,"hubert"),TIr.forEach(t),NDe=r(R9e," \u2014 "),lx=n(R9e,"A",{href:!0});var MIr=s(lx);jDe=r(MIr,"HubertConfig"),MIr.forEach(t),DDe=r(R9e," (Hubert model)"),R9e.forEach(t),GDe=i(v),ym=n(v,"LI",{});var B9e=s(ym);UY=n(B9e,"STRONG",{});var EIr=s(UY);ODe=r(EIr,"ibert"),EIr.forEach(t),VDe=r(B9e," \u2014 "),ix=n(B9e,"A",{href:!0});var CIr=s(ix);XDe=r(CIr,"IBertConfig"),CIr.forEach(t),zDe=r(B9e," (I-BERT model)"),B9e.forEach(t),QDe=i(v),Lm=n(v,"LI",{});var P9e=s(Lm);JY=n(P9e,"STRONG",{});var wIr=s(JY);WDe=r(wIr,"imagegpt"),wIr.forEach(t),HDe=r(P9e," \u2014 "),dx=n(P9e,"A",{href:!0});var AIr=s(dx);UDe=r(AIr,"ImageGPTConfig"),AIr.forEach(t),JDe=r(P9e," (ImageGPT model)"),P9e.forEach(t),YDe=i(v),xm=n(v,"LI",{});var $9e=s(xm);YY=n($9e,"STRONG",{});var yIr=s(YY);KDe=r(yIr,"layoutlm"),yIr.forEach(t),ZDe=r($9e," \u2014 "),cx=n($9e,"A",{href:!0});var LIr=s(cx);eGe=r(LIr,"LayoutLMConfig"),LIr.forEach(t),oGe=r($9e," (LayoutLM model)"),$9e.forEach(t),rGe=i(v),km=n(v,"LI",{});var I9e=s(km);KY=n(I9e,"STRONG",{});var xIr=s(KY);tGe=r(xIr,"layoutlmv2"),xIr.forEach(t),aGe=r(I9e," \u2014 "),fx=n(I9e,"A",{href:!0});var kIr=s(fx);nGe=r(kIr,"LayoutLMv2Config"),kIr.forEach(t),sGe=r(I9e," (LayoutLMv2 model)"),I9e.forEach(t),lGe=i(v),Sm=n(v,"LI",{});var q9e=s(Sm);ZY=n(q9e,"STRONG",{});var SIr=s(ZY);iGe=r(SIr,"led"),SIr.forEach(t),dGe=r(q9e," \u2014 "),mx=n(q9e,"A",{href:!0});var RIr=s(mx);cGe=r(RIr,"LEDConfig"),RIr.forEach(t),fGe=r(q9e," (LED model)"),q9e.forEach(t),mGe=i(v),Rm=n(v,"LI",{});var N9e=s(Rm);eK=n(N9e,"STRONG",{});var BIr=s(eK);gGe=r(BIr,"longformer"),BIr.forEach(t),hGe=r(N9e," \u2014 "),gx=n(N9e,"A",{href:!0});var PIr=s(gx);pGe=r(PIr,"LongformerConfig"),PIr.forEach(t),_Ge=r(N9e," (Longformer model)"),N9e.forEach(t),uGe=i(v),Bm=n(v,"LI",{});var j9e=s(Bm);oK=n(j9e,"STRONG",{});var $Ir=s(oK);bGe=r($Ir,"luke"),$Ir.forEach(t),FGe=r(j9e," \u2014 "),hx=n(j9e,"A",{href:!0});var IIr=s(hx);vGe=r(IIr,"LukeConfig"),IIr.forEach(t),TGe=r(j9e," (LUKE model)"),j9e.forEach(t),MGe=i(v),Pm=n(v,"LI",{});var D9e=s(Pm);rK=n(D9e,"STRONG",{});var qIr=s(rK);EGe=r(qIr,"lxmert"),qIr.forEach(t),CGe=r(D9e," \u2014 "),px=n(D9e,"A",{href:!0});var NIr=s(px);wGe=r(NIr,"LxmertConfig"),NIr.forEach(t),AGe=r(D9e," (LXMERT model)"),D9e.forEach(t),yGe=i(v),$m=n(v,"LI",{});var G9e=s($m);tK=n(G9e,"STRONG",{});var jIr=s(tK);LGe=r(jIr,"m2m_100"),jIr.forEach(t),xGe=r(G9e," \u2014 "),_x=n(G9e,"A",{href:!0});var DIr=s(_x);kGe=r(DIr,"M2M100Config"),DIr.forEach(t),SGe=r(G9e," (M2M100 model)"),G9e.forEach(t),RGe=i(v),Im=n(v,"LI",{});var O9e=s(Im);aK=n(O9e,"STRONG",{});var GIr=s(aK);BGe=r(GIr,"marian"),GIr.forEach(t),PGe=r(O9e," \u2014 "),ux=n(O9e,"A",{href:!0});var OIr=s(ux);$Ge=r(OIr,"MarianConfig"),OIr.forEach(t),IGe=r(O9e," (Marian model)"),O9e.forEach(t),qGe=i(v),qm=n(v,"LI",{});var V9e=s(qm);nK=n(V9e,"STRONG",{});var VIr=s(nK);NGe=r(VIr,"maskformer"),VIr.forEach(t),jGe=r(V9e," \u2014 "),bx=n(V9e,"A",{href:!0});var XIr=s(bx);DGe=r(XIr,"MaskFormerConfig"),XIr.forEach(t),GGe=r(V9e," (MaskFormer model)"),V9e.forEach(t),OGe=i(v),Nm=n(v,"LI",{});var X9e=s(Nm);sK=n(X9e,"STRONG",{});var zIr=s(sK);VGe=r(zIr,"mbart"),zIr.forEach(t),XGe=r(X9e," \u2014 "),Fx=n(X9e,"A",{href:!0});var QIr=s(Fx);zGe=r(QIr,"MBartConfig"),QIr.forEach(t),QGe=r(X9e," (mBART model)"),X9e.forEach(t),WGe=i(v),jm=n(v,"LI",{});var z9e=s(jm);lK=n(z9e,"STRONG",{});var WIr=s(lK);HGe=r(WIr,"megatron-bert"),WIr.forEach(t),UGe=r(z9e," \u2014 "),vx=n(z9e,"A",{href:!0});var HIr=s(vx);JGe=r(HIr,"MegatronBertConfig"),HIr.forEach(t),YGe=r(z9e," (MegatronBert model)"),z9e.forEach(t),KGe=i(v),Dm=n(v,"LI",{});var Q9e=s(Dm);iK=n(Q9e,"STRONG",{});var UIr=s(iK);ZGe=r(UIr,"mobilebert"),UIr.forEach(t),eOe=r(Q9e," \u2014 "),Tx=n(Q9e,"A",{href:!0});var JIr=s(Tx);oOe=r(JIr,"MobileBertConfig"),JIr.forEach(t),rOe=r(Q9e," (MobileBERT model)"),Q9e.forEach(t),tOe=i(v),Gm=n(v,"LI",{});var W9e=s(Gm);dK=n(W9e,"STRONG",{});var YIr=s(dK);aOe=r(YIr,"mpnet"),YIr.forEach(t),nOe=r(W9e," \u2014 "),Mx=n(W9e,"A",{href:!0});var KIr=s(Mx);sOe=r(KIr,"MPNetConfig"),KIr.forEach(t),lOe=r(W9e," (MPNet model)"),W9e.forEach(t),iOe=i(v),Om=n(v,"LI",{});var H9e=s(Om);cK=n(H9e,"STRONG",{});var ZIr=s(cK);dOe=r(ZIr,"mt5"),ZIr.forEach(t),cOe=r(H9e," \u2014 "),Ex=n(H9e,"A",{href:!0});var eqr=s(Ex);fOe=r(eqr,"MT5Config"),eqr.forEach(t),mOe=r(H9e," (mT5 model)"),H9e.forEach(t),gOe=i(v),Vm=n(v,"LI",{});var U9e=s(Vm);fK=n(U9e,"STRONG",{});var oqr=s(fK);hOe=r(oqr,"nystromformer"),oqr.forEach(t),pOe=r(U9e," \u2014 "),Cx=n(U9e,"A",{href:!0});var rqr=s(Cx);_Oe=r(rqr,"NystromformerConfig"),rqr.forEach(t),uOe=r(U9e," (Nystromformer model)"),U9e.forEach(t),bOe=i(v),Xm=n(v,"LI",{});var J9e=s(Xm);mK=n(J9e,"STRONG",{});var tqr=s(mK);FOe=r(tqr,"openai-gpt"),tqr.forEach(t),vOe=r(J9e," \u2014 "),wx=n(J9e,"A",{href:!0});var aqr=s(wx);TOe=r(aqr,"OpenAIGPTConfig"),aqr.forEach(t),MOe=r(J9e," (OpenAI GPT model)"),J9e.forEach(t),EOe=i(v),zm=n(v,"LI",{});var Y9e=s(zm);gK=n(Y9e,"STRONG",{});var nqr=s(gK);COe=r(nqr,"pegasus"),nqr.forEach(t),wOe=r(Y9e," \u2014 "),Ax=n(Y9e,"A",{href:!0});var sqr=s(Ax);AOe=r(sqr,"PegasusConfig"),sqr.forEach(t),yOe=r(Y9e," (Pegasus model)"),Y9e.forEach(t),LOe=i(v),Qm=n(v,"LI",{});var K9e=s(Qm);hK=n(K9e,"STRONG",{});var lqr=s(hK);xOe=r(lqr,"perceiver"),lqr.forEach(t),kOe=r(K9e," \u2014 "),yx=n(K9e,"A",{href:!0});var iqr=s(yx);SOe=r(iqr,"PerceiverConfig"),iqr.forEach(t),ROe=r(K9e," (Perceiver model)"),K9e.forEach(t),BOe=i(v),Wm=n(v,"LI",{});var Z9e=s(Wm);pK=n(Z9e,"STRONG",{});var dqr=s(pK);POe=r(dqr,"plbart"),dqr.forEach(t),$Oe=r(Z9e," \u2014 "),Lx=n(Z9e,"A",{href:!0});var cqr=s(Lx);IOe=r(cqr,"PLBartConfig"),cqr.forEach(t),qOe=r(Z9e," (PLBart model)"),Z9e.forEach(t),NOe=i(v),Hm=n(v,"LI",{});var eMe=s(Hm);_K=n(eMe,"STRONG",{});var fqr=s(_K);jOe=r(fqr,"poolformer"),fqr.forEach(t),DOe=r(eMe," \u2014 "),xx=n(eMe,"A",{href:!0});var mqr=s(xx);GOe=r(mqr,"PoolFormerConfig"),mqr.forEach(t),OOe=r(eMe," (PoolFormer model)"),eMe.forEach(t),VOe=i(v),Um=n(v,"LI",{});var oMe=s(Um);uK=n(oMe,"STRONG",{});var gqr=s(uK);XOe=r(gqr,"prophetnet"),gqr.forEach(t),zOe=r(oMe," \u2014 "),kx=n(oMe,"A",{href:!0});var hqr=s(kx);QOe=r(hqr,"ProphetNetConfig"),hqr.forEach(t),WOe=r(oMe," (ProphetNet model)"),oMe.forEach(t),HOe=i(v),Jm=n(v,"LI",{});var rMe=s(Jm);bK=n(rMe,"STRONG",{});var pqr=s(bK);UOe=r(pqr,"qdqbert"),pqr.forEach(t),JOe=r(rMe," \u2014 "),Sx=n(rMe,"A",{href:!0});var _qr=s(Sx);YOe=r(_qr,"QDQBertConfig"),_qr.forEach(t),KOe=r(rMe," (QDQBert model)"),rMe.forEach(t),ZOe=i(v),Ym=n(v,"LI",{});var tMe=s(Ym);FK=n(tMe,"STRONG",{});var uqr=s(FK);eVe=r(uqr,"rag"),uqr.forEach(t),oVe=r(tMe," \u2014 "),Rx=n(tMe,"A",{href:!0});var bqr=s(Rx);rVe=r(bqr,"RagConfig"),bqr.forEach(t),tVe=r(tMe," (RAG model)"),tMe.forEach(t),aVe=i(v),Km=n(v,"LI",{});var aMe=s(Km);vK=n(aMe,"STRONG",{});var Fqr=s(vK);nVe=r(Fqr,"realm"),Fqr.forEach(t),sVe=r(aMe," \u2014 "),Bx=n(aMe,"A",{href:!0});var vqr=s(Bx);lVe=r(vqr,"RealmConfig"),vqr.forEach(t),iVe=r(aMe," (Realm model)"),aMe.forEach(t),dVe=i(v),Zm=n(v,"LI",{});var nMe=s(Zm);TK=n(nMe,"STRONG",{});var Tqr=s(TK);cVe=r(Tqr,"reformer"),Tqr.forEach(t),fVe=r(nMe," \u2014 "),Px=n(nMe,"A",{href:!0});var Mqr=s(Px);mVe=r(Mqr,"ReformerConfig"),Mqr.forEach(t),gVe=r(nMe," (Reformer model)"),nMe.forEach(t),hVe=i(v),eg=n(v,"LI",{});var sMe=s(eg);MK=n(sMe,"STRONG",{});var Eqr=s(MK);pVe=r(Eqr,"regnet"),Eqr.forEach(t),_Ve=r(sMe," \u2014 "),$x=n(sMe,"A",{href:!0});var Cqr=s($x);uVe=r(Cqr,"RegNetConfig"),Cqr.forEach(t),bVe=r(sMe," (RegNet model)"),sMe.forEach(t),FVe=i(v),og=n(v,"LI",{});var lMe=s(og);EK=n(lMe,"STRONG",{});var wqr=s(EK);vVe=r(wqr,"rembert"),wqr.forEach(t),TVe=r(lMe," \u2014 "),Ix=n(lMe,"A",{href:!0});var Aqr=s(Ix);MVe=r(Aqr,"RemBertConfig"),Aqr.forEach(t),EVe=r(lMe," (RemBERT model)"),lMe.forEach(t),CVe=i(v),rg=n(v,"LI",{});var iMe=s(rg);CK=n(iMe,"STRONG",{});var yqr=s(CK);wVe=r(yqr,"resnet"),yqr.forEach(t),AVe=r(iMe," \u2014 "),qx=n(iMe,"A",{href:!0});var Lqr=s(qx);yVe=r(Lqr,"ResNetConfig"),Lqr.forEach(t),LVe=r(iMe," (ResNet model)"),iMe.forEach(t),xVe=i(v),tg=n(v,"LI",{});var dMe=s(tg);wK=n(dMe,"STRONG",{});var xqr=s(wK);kVe=r(xqr,"retribert"),xqr.forEach(t),SVe=r(dMe," \u2014 "),Nx=n(dMe,"A",{href:!0});var kqr=s(Nx);RVe=r(kqr,"RetriBertConfig"),kqr.forEach(t),BVe=r(dMe," (RetriBERT model)"),dMe.forEach(t),PVe=i(v),ag=n(v,"LI",{});var cMe=s(ag);AK=n(cMe,"STRONG",{});var Sqr=s(AK);$Ve=r(Sqr,"roberta"),Sqr.forEach(t),IVe=r(cMe," \u2014 "),jx=n(cMe,"A",{href:!0});var Rqr=s(jx);qVe=r(Rqr,"RobertaConfig"),Rqr.forEach(t),NVe=r(cMe," (RoBERTa model)"),cMe.forEach(t),jVe=i(v),ng=n(v,"LI",{});var fMe=s(ng);yK=n(fMe,"STRONG",{});var Bqr=s(yK);DVe=r(Bqr,"roformer"),Bqr.forEach(t),GVe=r(fMe," \u2014 "),Dx=n(fMe,"A",{href:!0});var Pqr=s(Dx);OVe=r(Pqr,"RoFormerConfig"),Pqr.forEach(t),VVe=r(fMe," (RoFormer model)"),fMe.forEach(t),XVe=i(v),sg=n(v,"LI",{});var mMe=s(sg);LK=n(mMe,"STRONG",{});var $qr=s(LK);zVe=r($qr,"segformer"),$qr.forEach(t),QVe=r(mMe," \u2014 "),Gx=n(mMe,"A",{href:!0});var Iqr=s(Gx);WVe=r(Iqr,"SegformerConfig"),Iqr.forEach(t),HVe=r(mMe," (SegFormer model)"),mMe.forEach(t),UVe=i(v),lg=n(v,"LI",{});var gMe=s(lg);xK=n(gMe,"STRONG",{});var qqr=s(xK);JVe=r(qqr,"sew"),qqr.forEach(t),YVe=r(gMe," \u2014 "),Ox=n(gMe,"A",{href:!0});var Nqr=s(Ox);KVe=r(Nqr,"SEWConfig"),Nqr.forEach(t),ZVe=r(gMe," (SEW model)"),gMe.forEach(t),eXe=i(v),ig=n(v,"LI",{});var hMe=s(ig);kK=n(hMe,"STRONG",{});var jqr=s(kK);oXe=r(jqr,"sew-d"),jqr.forEach(t),rXe=r(hMe," \u2014 "),Vx=n(hMe,"A",{href:!0});var Dqr=s(Vx);tXe=r(Dqr,"SEWDConfig"),Dqr.forEach(t),aXe=r(hMe," (SEW-D model)"),hMe.forEach(t),nXe=i(v),dg=n(v,"LI",{});var pMe=s(dg);SK=n(pMe,"STRONG",{});var Gqr=s(SK);sXe=r(Gqr,"speech-encoder-decoder"),Gqr.forEach(t),lXe=r(pMe," \u2014 "),Xx=n(pMe,"A",{href:!0});var Oqr=s(Xx);iXe=r(Oqr,"SpeechEncoderDecoderConfig"),Oqr.forEach(t),dXe=r(pMe," (Speech Encoder decoder model)"),pMe.forEach(t),cXe=i(v),cg=n(v,"LI",{});var _Me=s(cg);RK=n(_Me,"STRONG",{});var Vqr=s(RK);fXe=r(Vqr,"speech_to_text"),Vqr.forEach(t),mXe=r(_Me," \u2014 "),zx=n(_Me,"A",{href:!0});var Xqr=s(zx);gXe=r(Xqr,"Speech2TextConfig"),Xqr.forEach(t),hXe=r(_Me," (Speech2Text model)"),_Me.forEach(t),pXe=i(v),fg=n(v,"LI",{});var uMe=s(fg);BK=n(uMe,"STRONG",{});var zqr=s(BK);_Xe=r(zqr,"speech_to_text_2"),zqr.forEach(t),uXe=r(uMe," \u2014 "),Qx=n(uMe,"A",{href:!0});var Qqr=s(Qx);bXe=r(Qqr,"Speech2Text2Config"),Qqr.forEach(t),FXe=r(uMe," (Speech2Text2 model)"),uMe.forEach(t),vXe=i(v),mg=n(v,"LI",{});var bMe=s(mg);PK=n(bMe,"STRONG",{});var Wqr=s(PK);TXe=r(Wqr,"splinter"),Wqr.forEach(t),MXe=r(bMe," \u2014 "),Wx=n(bMe,"A",{href:!0});var Hqr=s(Wx);EXe=r(Hqr,"SplinterConfig"),Hqr.forEach(t),CXe=r(bMe," (Splinter model)"),bMe.forEach(t),wXe=i(v),gg=n(v,"LI",{});var FMe=s(gg);$K=n(FMe,"STRONG",{});var Uqr=s($K);AXe=r(Uqr,"squeezebert"),Uqr.forEach(t),yXe=r(FMe," \u2014 "),Hx=n(FMe,"A",{href:!0});var Jqr=s(Hx);LXe=r(Jqr,"SqueezeBertConfig"),Jqr.forEach(t),xXe=r(FMe," (SqueezeBERT model)"),FMe.forEach(t),kXe=i(v),hg=n(v,"LI",{});var vMe=s(hg);IK=n(vMe,"STRONG",{});var Yqr=s(IK);SXe=r(Yqr,"swin"),Yqr.forEach(t),RXe=r(vMe," \u2014 "),Ux=n(vMe,"A",{href:!0});var Kqr=s(Ux);BXe=r(Kqr,"SwinConfig"),Kqr.forEach(t),PXe=r(vMe," (Swin model)"),vMe.forEach(t),$Xe=i(v),pg=n(v,"LI",{});var TMe=s(pg);qK=n(TMe,"STRONG",{});var Zqr=s(qK);IXe=r(Zqr,"t5"),Zqr.forEach(t),qXe=r(TMe," \u2014 "),Jx=n(TMe,"A",{href:!0});var eNr=s(Jx);NXe=r(eNr,"T5Config"),eNr.forEach(t),jXe=r(TMe," (T5 model)"),TMe.forEach(t),DXe=i(v),_g=n(v,"LI",{});var MMe=s(_g);NK=n(MMe,"STRONG",{});var oNr=s(NK);GXe=r(oNr,"tapas"),oNr.forEach(t),OXe=r(MMe," \u2014 "),Yx=n(MMe,"A",{href:!0});var rNr=s(Yx);VXe=r(rNr,"TapasConfig"),rNr.forEach(t),XXe=r(MMe," (TAPAS model)"),MMe.forEach(t),zXe=i(v),ug=n(v,"LI",{});var EMe=s(ug);jK=n(EMe,"STRONG",{});var tNr=s(jK);QXe=r(tNr,"transfo-xl"),tNr.forEach(t),WXe=r(EMe," \u2014 "),Kx=n(EMe,"A",{href:!0});var aNr=s(Kx);HXe=r(aNr,"TransfoXLConfig"),aNr.forEach(t),UXe=r(EMe," (Transformer-XL model)"),EMe.forEach(t),JXe=i(v),bg=n(v,"LI",{});var CMe=s(bg);DK=n(CMe,"STRONG",{});var nNr=s(DK);YXe=r(nNr,"trocr"),nNr.forEach(t),KXe=r(CMe," \u2014 "),Zx=n(CMe,"A",{href:!0});var sNr=s(Zx);ZXe=r(sNr,"TrOCRConfig"),sNr.forEach(t),eze=r(CMe," (TrOCR model)"),CMe.forEach(t),oze=i(v),Fg=n(v,"LI",{});var wMe=s(Fg);GK=n(wMe,"STRONG",{});var lNr=s(GK);rze=r(lNr,"unispeech"),lNr.forEach(t),tze=r(wMe," \u2014 "),ek=n(wMe,"A",{href:!0});var iNr=s(ek);aze=r(iNr,"UniSpeechConfig"),iNr.forEach(t),nze=r(wMe," (UniSpeech model)"),wMe.forEach(t),sze=i(v),vg=n(v,"LI",{});var AMe=s(vg);OK=n(AMe,"STRONG",{});var dNr=s(OK);lze=r(dNr,"unispeech-sat"),dNr.forEach(t),ize=r(AMe," \u2014 "),ok=n(AMe,"A",{href:!0});var cNr=s(ok);dze=r(cNr,"UniSpeechSatConfig"),cNr.forEach(t),cze=r(AMe," (UniSpeechSat model)"),AMe.forEach(t),fze=i(v),Tg=n(v,"LI",{});var yMe=s(Tg);VK=n(yMe,"STRONG",{});var fNr=s(VK);mze=r(fNr,"van"),fNr.forEach(t),gze=r(yMe," \u2014 "),rk=n(yMe,"A",{href:!0});var mNr=s(rk);hze=r(mNr,"VanConfig"),mNr.forEach(t),pze=r(yMe," (VAN model)"),yMe.forEach(t),_ze=i(v),Mg=n(v,"LI",{});var LMe=s(Mg);XK=n(LMe,"STRONG",{});var gNr=s(XK);uze=r(gNr,"vilt"),gNr.forEach(t),bze=r(LMe," \u2014 "),tk=n(LMe,"A",{href:!0});var hNr=s(tk);Fze=r(hNr,"ViltConfig"),hNr.forEach(t),vze=r(LMe," (ViLT model)"),LMe.forEach(t),Tze=i(v),Eg=n(v,"LI",{});var xMe=s(Eg);zK=n(xMe,"STRONG",{});var pNr=s(zK);Mze=r(pNr,"vision-encoder-decoder"),pNr.forEach(t),Eze=r(xMe," \u2014 "),ak=n(xMe,"A",{href:!0});var _Nr=s(ak);Cze=r(_Nr,"VisionEncoderDecoderConfig"),_Nr.forEach(t),wze=r(xMe," (Vision Encoder decoder model)"),xMe.forEach(t),Aze=i(v),Cg=n(v,"LI",{});var kMe=s(Cg);QK=n(kMe,"STRONG",{});var uNr=s(QK);yze=r(uNr,"vision-text-dual-encoder"),uNr.forEach(t),Lze=r(kMe," \u2014 "),nk=n(kMe,"A",{href:!0});var bNr=s(nk);xze=r(bNr,"VisionTextDualEncoderConfig"),bNr.forEach(t),kze=r(kMe," (VisionTextDualEncoder model)"),kMe.forEach(t),Sze=i(v),wg=n(v,"LI",{});var SMe=s(wg);WK=n(SMe,"STRONG",{});var FNr=s(WK);Rze=r(FNr,"visual_bert"),FNr.forEach(t),Bze=r(SMe," \u2014 "),sk=n(SMe,"A",{href:!0});var vNr=s(sk);Pze=r(vNr,"VisualBertConfig"),vNr.forEach(t),$ze=r(SMe," (VisualBert model)"),SMe.forEach(t),Ize=i(v),Ag=n(v,"LI",{});var RMe=s(Ag);HK=n(RMe,"STRONG",{});var TNr=s(HK);qze=r(TNr,"vit"),TNr.forEach(t),Nze=r(RMe," \u2014 "),lk=n(RMe,"A",{href:!0});var MNr=s(lk);jze=r(MNr,"ViTConfig"),MNr.forEach(t),Dze=r(RMe," (ViT model)"),RMe.forEach(t),Gze=i(v),yg=n(v,"LI",{});var BMe=s(yg);UK=n(BMe,"STRONG",{});var ENr=s(UK);Oze=r(ENr,"vit_mae"),ENr.forEach(t),Vze=r(BMe," \u2014 "),ik=n(BMe,"A",{href:!0});var CNr=s(ik);Xze=r(CNr,"ViTMAEConfig"),CNr.forEach(t),zze=r(BMe," (ViTMAE model)"),BMe.forEach(t),Qze=i(v),Lg=n(v,"LI",{});var PMe=s(Lg);JK=n(PMe,"STRONG",{});var wNr=s(JK);Wze=r(wNr,"wav2vec2"),wNr.forEach(t),Hze=r(PMe," \u2014 "),dk=n(PMe,"A",{href:!0});var ANr=s(dk);Uze=r(ANr,"Wav2Vec2Config"),ANr.forEach(t),Jze=r(PMe," (Wav2Vec2 model)"),PMe.forEach(t),Yze=i(v),xg=n(v,"LI",{});var $Me=s(xg);YK=n($Me,"STRONG",{});var yNr=s(YK);Kze=r(yNr,"wavlm"),yNr.forEach(t),Zze=r($Me," \u2014 "),ck=n($Me,"A",{href:!0});var LNr=s(ck);eQe=r(LNr,"WavLMConfig"),LNr.forEach(t),oQe=r($Me," (WavLM model)"),$Me.forEach(t),rQe=i(v),kg=n(v,"LI",{});var IMe=s(kg);KK=n(IMe,"STRONG",{});var xNr=s(KK);tQe=r(xNr,"xglm"),xNr.forEach(t),aQe=r(IMe," \u2014 "),fk=n(IMe,"A",{href:!0});var kNr=s(fk);nQe=r(kNr,"XGLMConfig"),kNr.forEach(t),sQe=r(IMe," (XGLM model)"),IMe.forEach(t),lQe=i(v),Sg=n(v,"LI",{});var qMe=s(Sg);ZK=n(qMe,"STRONG",{});var SNr=s(ZK);iQe=r(SNr,"xlm"),SNr.forEach(t),dQe=r(qMe," \u2014 "),mk=n(qMe,"A",{href:!0});var RNr=s(mk);cQe=r(RNr,"XLMConfig"),RNr.forEach(t),fQe=r(qMe," (XLM model)"),qMe.forEach(t),mQe=i(v),Rg=n(v,"LI",{});var NMe=s(Rg);eZ=n(NMe,"STRONG",{});var BNr=s(eZ);gQe=r(BNr,"xlm-prophetnet"),BNr.forEach(t),hQe=r(NMe," \u2014 "),gk=n(NMe,"A",{href:!0});var PNr=s(gk);pQe=r(PNr,"XLMProphetNetConfig"),PNr.forEach(t),_Qe=r(NMe," (XLMProphetNet model)"),NMe.forEach(t),uQe=i(v),Bg=n(v,"LI",{});var jMe=s(Bg);oZ=n(jMe,"STRONG",{});var $Nr=s(oZ);bQe=r($Nr,"xlm-roberta"),$Nr.forEach(t),FQe=r(jMe," \u2014 "),hk=n(jMe,"A",{href:!0});var INr=s(hk);vQe=r(INr,"XLMRobertaConfig"),INr.forEach(t),TQe=r(jMe," (XLM-RoBERTa model)"),jMe.forEach(t),MQe=i(v),Pg=n(v,"LI",{});var DMe=s(Pg);rZ=n(DMe,"STRONG",{});var qNr=s(rZ);EQe=r(qNr,"xlm-roberta-xl"),qNr.forEach(t),CQe=r(DMe," \u2014 "),pk=n(DMe,"A",{href:!0});var NNr=s(pk);wQe=r(NNr,"XLMRobertaXLConfig"),NNr.forEach(t),AQe=r(DMe," (XLM-RoBERTa-XL model)"),DMe.forEach(t),yQe=i(v),$g=n(v,"LI",{});var GMe=s($g);tZ=n(GMe,"STRONG",{});var jNr=s(tZ);LQe=r(jNr,"xlnet"),jNr.forEach(t),xQe=r(GMe," \u2014 "),_k=n(GMe,"A",{href:!0});var DNr=s(_k);kQe=r(DNr,"XLNetConfig"),DNr.forEach(t),SQe=r(GMe," (XLNet model)"),GMe.forEach(t),RQe=i(v),Ig=n(v,"LI",{});var OMe=s(Ig);aZ=n(OMe,"STRONG",{});var GNr=s(aZ);BQe=r(GNr,"yoso"),GNr.forEach(t),PQe=r(OMe," \u2014 "),uk=n(OMe,"A",{href:!0});var ONr=s(uk);$Qe=r(ONr,"YosoConfig"),ONr.forEach(t),IQe=r(OMe," (YOSO model)"),OMe.forEach(t),v.forEach(t),qQe=i(ga),nZ=n(ga,"P",{});var VNr=s(nZ);NQe=r(VNr,"Examples:"),VNr.forEach(t),jQe=i(ga),m(NC.$$.fragment,ga),ga.forEach(t),DQe=i(Os),qg=n(Os,"DIV",{class:!0});var DPe=s(qg);m(jC.$$.fragment,DPe),GQe=i(DPe),sZ=n(DPe,"P",{});var XNr=s(sZ);OQe=r(XNr,"Register a new configuration for this class."),XNr.forEach(t),DPe.forEach(t),Os.forEach(t),NRe=i(c),Qi=n(c,"H2",{class:!0});var GPe=s(Qi);Ng=n(GPe,"A",{id:!0,class:!0,href:!0});var zNr=s(Ng);lZ=n(zNr,"SPAN",{});var QNr=s(lZ);m(DC.$$.fragment,QNr),QNr.forEach(t),zNr.forEach(t),VQe=i(GPe),iZ=n(GPe,"SPAN",{});var WNr=s(iZ);XQe=r(WNr,"AutoTokenizer"),WNr.forEach(t),GPe.forEach(t),jRe=i(c),Wo=n(c,"DIV",{class:!0});var Vs=s(Wo);m(GC.$$.fragment,Vs),zQe=i(Vs),OC=n(Vs,"P",{});var OPe=s(OC);QQe=r(OPe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),bk=n(OPe,"A",{href:!0});var HNr=s(bk);WQe=r(HNr,"AutoTokenizer.from_pretrained()"),HNr.forEach(t),HQe=r(OPe," class method."),OPe.forEach(t),UQe=i(Vs),VC=n(Vs,"P",{});var VPe=s(VC);JQe=r(VPe,"This class cannot be instantiated directly using "),dZ=n(VPe,"CODE",{});var UNr=s(dZ);YQe=r(UNr,"__init__()"),UNr.forEach(t),KQe=r(VPe," (throws an error)."),VPe.forEach(t),ZQe=i(Vs),go=n(Vs,"DIV",{class:!0});var ha=s(go);m(XC.$$.fragment,ha),eWe=i(ha),cZ=n(ha,"P",{});var JNr=s(cZ);oWe=r(JNr,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),JNr.forEach(t),rWe=i(ha),Oa=n(ha,"P",{});var xE=s(Oa);tWe=r(xE,"The tokenizer class to instantiate is selected based on the "),fZ=n(xE,"CODE",{});var YNr=s(fZ);aWe=r(YNr,"model_type"),YNr.forEach(t),nWe=r(xE,` property of the config object (either
passed as an argument or loaded from `),mZ=n(xE,"CODE",{});var KNr=s(mZ);sWe=r(KNr,"pretrained_model_name_or_path"),KNr.forEach(t),lWe=r(xE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gZ=n(xE,"CODE",{});var ZNr=s(gZ);iWe=r(ZNr,"pretrained_model_name_or_path"),ZNr.forEach(t),dWe=r(xE,":"),xE.forEach(t),cWe=i(ha),C=n(ha,"UL",{});var w=s(C);Qn=n(w,"LI",{});var E8=s(Qn);hZ=n(E8,"STRONG",{});var ejr=s(hZ);fWe=r(ejr,"albert"),ejr.forEach(t),mWe=r(E8," \u2014 "),Fk=n(E8,"A",{href:!0});var ojr=s(Fk);gWe=r(ojr,"AlbertTokenizer"),ojr.forEach(t),hWe=r(E8," or "),vk=n(E8,"A",{href:!0});var rjr=s(vk);pWe=r(rjr,"AlbertTokenizerFast"),rjr.forEach(t),_We=r(E8," (ALBERT model)"),E8.forEach(t),uWe=i(w),Wn=n(w,"LI",{});var C8=s(Wn);pZ=n(C8,"STRONG",{});var tjr=s(pZ);bWe=r(tjr,"bart"),tjr.forEach(t),FWe=r(C8," \u2014 "),Tk=n(C8,"A",{href:!0});var ajr=s(Tk);vWe=r(ajr,"BartTokenizer"),ajr.forEach(t),TWe=r(C8," or "),Mk=n(C8,"A",{href:!0});var njr=s(Mk);MWe=r(njr,"BartTokenizerFast"),njr.forEach(t),EWe=r(C8," (BART model)"),C8.forEach(t),CWe=i(w),Hn=n(w,"LI",{});var w8=s(Hn);_Z=n(w8,"STRONG",{});var sjr=s(_Z);wWe=r(sjr,"barthez"),sjr.forEach(t),AWe=r(w8," \u2014 "),Ek=n(w8,"A",{href:!0});var ljr=s(Ek);yWe=r(ljr,"BarthezTokenizer"),ljr.forEach(t),LWe=r(w8," or "),Ck=n(w8,"A",{href:!0});var ijr=s(Ck);xWe=r(ijr,"BarthezTokenizerFast"),ijr.forEach(t),kWe=r(w8," (BARThez model)"),w8.forEach(t),SWe=i(w),jg=n(w,"LI",{});var VMe=s(jg);uZ=n(VMe,"STRONG",{});var djr=s(uZ);RWe=r(djr,"bartpho"),djr.forEach(t),BWe=r(VMe," \u2014 "),wk=n(VMe,"A",{href:!0});var cjr=s(wk);PWe=r(cjr,"BartphoTokenizer"),cjr.forEach(t),$We=r(VMe," (BARTpho model)"),VMe.forEach(t),IWe=i(w),Un=n(w,"LI",{});var A8=s(Un);bZ=n(A8,"STRONG",{});var fjr=s(bZ);qWe=r(fjr,"bert"),fjr.forEach(t),NWe=r(A8," \u2014 "),Ak=n(A8,"A",{href:!0});var mjr=s(Ak);jWe=r(mjr,"BertTokenizer"),mjr.forEach(t),DWe=r(A8," or "),yk=n(A8,"A",{href:!0});var gjr=s(yk);GWe=r(gjr,"BertTokenizerFast"),gjr.forEach(t),OWe=r(A8," (BERT model)"),A8.forEach(t),VWe=i(w),Dg=n(w,"LI",{});var XMe=s(Dg);FZ=n(XMe,"STRONG",{});var hjr=s(FZ);XWe=r(hjr,"bert-generation"),hjr.forEach(t),zWe=r(XMe," \u2014 "),Lk=n(XMe,"A",{href:!0});var pjr=s(Lk);QWe=r(pjr,"BertGenerationTokenizer"),pjr.forEach(t),WWe=r(XMe," (Bert Generation model)"),XMe.forEach(t),HWe=i(w),Gg=n(w,"LI",{});var zMe=s(Gg);vZ=n(zMe,"STRONG",{});var _jr=s(vZ);UWe=r(_jr,"bert-japanese"),_jr.forEach(t),JWe=r(zMe," \u2014 "),xk=n(zMe,"A",{href:!0});var ujr=s(xk);YWe=r(ujr,"BertJapaneseTokenizer"),ujr.forEach(t),KWe=r(zMe," (BertJapanese model)"),zMe.forEach(t),ZWe=i(w),Og=n(w,"LI",{});var QMe=s(Og);TZ=n(QMe,"STRONG",{});var bjr=s(TZ);eHe=r(bjr,"bertweet"),bjr.forEach(t),oHe=r(QMe," \u2014 "),kk=n(QMe,"A",{href:!0});var Fjr=s(kk);rHe=r(Fjr,"BertweetTokenizer"),Fjr.forEach(t),tHe=r(QMe," (Bertweet model)"),QMe.forEach(t),aHe=i(w),Jn=n(w,"LI",{});var y8=s(Jn);MZ=n(y8,"STRONG",{});var vjr=s(MZ);nHe=r(vjr,"big_bird"),vjr.forEach(t),sHe=r(y8," \u2014 "),Sk=n(y8,"A",{href:!0});var Tjr=s(Sk);lHe=r(Tjr,"BigBirdTokenizer"),Tjr.forEach(t),iHe=r(y8," or "),Rk=n(y8,"A",{href:!0});var Mjr=s(Rk);dHe=r(Mjr,"BigBirdTokenizerFast"),Mjr.forEach(t),cHe=r(y8," (BigBird model)"),y8.forEach(t),fHe=i(w),Yn=n(w,"LI",{});var L8=s(Yn);EZ=n(L8,"STRONG",{});var Ejr=s(EZ);mHe=r(Ejr,"bigbird_pegasus"),Ejr.forEach(t),gHe=r(L8," \u2014 "),Bk=n(L8,"A",{href:!0});var Cjr=s(Bk);hHe=r(Cjr,"PegasusTokenizer"),Cjr.forEach(t),pHe=r(L8," or "),Pk=n(L8,"A",{href:!0});var wjr=s(Pk);_He=r(wjr,"PegasusTokenizerFast"),wjr.forEach(t),uHe=r(L8," (BigBirdPegasus model)"),L8.forEach(t),bHe=i(w),Kn=n(w,"LI",{});var x8=s(Kn);CZ=n(x8,"STRONG",{});var Ajr=s(CZ);FHe=r(Ajr,"blenderbot"),Ajr.forEach(t),vHe=r(x8," \u2014 "),$k=n(x8,"A",{href:!0});var yjr=s($k);THe=r(yjr,"BlenderbotTokenizer"),yjr.forEach(t),MHe=r(x8," or "),Ik=n(x8,"A",{href:!0});var Ljr=s(Ik);EHe=r(Ljr,"BlenderbotTokenizerFast"),Ljr.forEach(t),CHe=r(x8," (Blenderbot model)"),x8.forEach(t),wHe=i(w),Vg=n(w,"LI",{});var WMe=s(Vg);wZ=n(WMe,"STRONG",{});var xjr=s(wZ);AHe=r(xjr,"blenderbot-small"),xjr.forEach(t),yHe=r(WMe," \u2014 "),qk=n(WMe,"A",{href:!0});var kjr=s(qk);LHe=r(kjr,"BlenderbotSmallTokenizer"),kjr.forEach(t),xHe=r(WMe," (BlenderbotSmall model)"),WMe.forEach(t),kHe=i(w),Xg=n(w,"LI",{});var HMe=s(Xg);AZ=n(HMe,"STRONG",{});var Sjr=s(AZ);SHe=r(Sjr,"byt5"),Sjr.forEach(t),RHe=r(HMe," \u2014 "),Nk=n(HMe,"A",{href:!0});var Rjr=s(Nk);BHe=r(Rjr,"ByT5Tokenizer"),Rjr.forEach(t),PHe=r(HMe," (ByT5 model)"),HMe.forEach(t),$He=i(w),Zn=n(w,"LI",{});var k8=s(Zn);yZ=n(k8,"STRONG",{});var Bjr=s(yZ);IHe=r(Bjr,"camembert"),Bjr.forEach(t),qHe=r(k8," \u2014 "),jk=n(k8,"A",{href:!0});var Pjr=s(jk);NHe=r(Pjr,"CamembertTokenizer"),Pjr.forEach(t),jHe=r(k8," or "),Dk=n(k8,"A",{href:!0});var $jr=s(Dk);DHe=r($jr,"CamembertTokenizerFast"),$jr.forEach(t),GHe=r(k8," (CamemBERT model)"),k8.forEach(t),OHe=i(w),zg=n(w,"LI",{});var UMe=s(zg);LZ=n(UMe,"STRONG",{});var Ijr=s(LZ);VHe=r(Ijr,"canine"),Ijr.forEach(t),XHe=r(UMe," \u2014 "),Gk=n(UMe,"A",{href:!0});var qjr=s(Gk);zHe=r(qjr,"CanineTokenizer"),qjr.forEach(t),QHe=r(UMe," (Canine model)"),UMe.forEach(t),WHe=i(w),es=n(w,"LI",{});var S8=s(es);xZ=n(S8,"STRONG",{});var Njr=s(xZ);HHe=r(Njr,"clip"),Njr.forEach(t),UHe=r(S8," \u2014 "),Ok=n(S8,"A",{href:!0});var jjr=s(Ok);JHe=r(jjr,"CLIPTokenizer"),jjr.forEach(t),YHe=r(S8," or "),Vk=n(S8,"A",{href:!0});var Djr=s(Vk);KHe=r(Djr,"CLIPTokenizerFast"),Djr.forEach(t),ZHe=r(S8," (CLIP model)"),S8.forEach(t),eUe=i(w),os=n(w,"LI",{});var R8=s(os);kZ=n(R8,"STRONG",{});var Gjr=s(kZ);oUe=r(Gjr,"convbert"),Gjr.forEach(t),rUe=r(R8," \u2014 "),Xk=n(R8,"A",{href:!0});var Ojr=s(Xk);tUe=r(Ojr,"ConvBertTokenizer"),Ojr.forEach(t),aUe=r(R8," or "),zk=n(R8,"A",{href:!0});var Vjr=s(zk);nUe=r(Vjr,"ConvBertTokenizerFast"),Vjr.forEach(t),sUe=r(R8," (ConvBERT model)"),R8.forEach(t),lUe=i(w),rs=n(w,"LI",{});var B8=s(rs);SZ=n(B8,"STRONG",{});var Xjr=s(SZ);iUe=r(Xjr,"cpm"),Xjr.forEach(t),dUe=r(B8," \u2014 "),Qk=n(B8,"A",{href:!0});var zjr=s(Qk);cUe=r(zjr,"CpmTokenizer"),zjr.forEach(t),fUe=r(B8," or "),RZ=n(B8,"CODE",{});var Qjr=s(RZ);mUe=r(Qjr,"CpmTokenizerFast"),Qjr.forEach(t),gUe=r(B8," (CPM model)"),B8.forEach(t),hUe=i(w),Qg=n(w,"LI",{});var JMe=s(Qg);BZ=n(JMe,"STRONG",{});var Wjr=s(BZ);pUe=r(Wjr,"ctrl"),Wjr.forEach(t),_Ue=r(JMe," \u2014 "),Wk=n(JMe,"A",{href:!0});var Hjr=s(Wk);uUe=r(Hjr,"CTRLTokenizer"),Hjr.forEach(t),bUe=r(JMe," (CTRL model)"),JMe.forEach(t),FUe=i(w),ts=n(w,"LI",{});var P8=s(ts);PZ=n(P8,"STRONG",{});var Ujr=s(PZ);vUe=r(Ujr,"deberta"),Ujr.forEach(t),TUe=r(P8," \u2014 "),Hk=n(P8,"A",{href:!0});var Jjr=s(Hk);MUe=r(Jjr,"DebertaTokenizer"),Jjr.forEach(t),EUe=r(P8," or "),Uk=n(P8,"A",{href:!0});var Yjr=s(Uk);CUe=r(Yjr,"DebertaTokenizerFast"),Yjr.forEach(t),wUe=r(P8," (DeBERTa model)"),P8.forEach(t),AUe=i(w),Wg=n(w,"LI",{});var YMe=s(Wg);$Z=n(YMe,"STRONG",{});var Kjr=s($Z);yUe=r(Kjr,"deberta-v2"),Kjr.forEach(t),LUe=r(YMe," \u2014 "),Jk=n(YMe,"A",{href:!0});var Zjr=s(Jk);xUe=r(Zjr,"DebertaV2Tokenizer"),Zjr.forEach(t),kUe=r(YMe," (DeBERTa-v2 model)"),YMe.forEach(t),SUe=i(w),as=n(w,"LI",{});var $8=s(as);IZ=n($8,"STRONG",{});var eDr=s(IZ);RUe=r(eDr,"distilbert"),eDr.forEach(t),BUe=r($8," \u2014 "),Yk=n($8,"A",{href:!0});var oDr=s(Yk);PUe=r(oDr,"DistilBertTokenizer"),oDr.forEach(t),$Ue=r($8," or "),Kk=n($8,"A",{href:!0});var rDr=s(Kk);IUe=r(rDr,"DistilBertTokenizerFast"),rDr.forEach(t),qUe=r($8," (DistilBERT model)"),$8.forEach(t),NUe=i(w),ns=n(w,"LI",{});var I8=s(ns);qZ=n(I8,"STRONG",{});var tDr=s(qZ);jUe=r(tDr,"dpr"),tDr.forEach(t),DUe=r(I8," \u2014 "),Zk=n(I8,"A",{href:!0});var aDr=s(Zk);GUe=r(aDr,"DPRQuestionEncoderTokenizer"),aDr.forEach(t),OUe=r(I8," or "),eS=n(I8,"A",{href:!0});var nDr=s(eS);VUe=r(nDr,"DPRQuestionEncoderTokenizerFast"),nDr.forEach(t),XUe=r(I8," (DPR model)"),I8.forEach(t),zUe=i(w),ss=n(w,"LI",{});var q8=s(ss);NZ=n(q8,"STRONG",{});var sDr=s(NZ);QUe=r(sDr,"electra"),sDr.forEach(t),WUe=r(q8," \u2014 "),oS=n(q8,"A",{href:!0});var lDr=s(oS);HUe=r(lDr,"ElectraTokenizer"),lDr.forEach(t),UUe=r(q8," or "),rS=n(q8,"A",{href:!0});var iDr=s(rS);JUe=r(iDr,"ElectraTokenizerFast"),iDr.forEach(t),YUe=r(q8," (ELECTRA model)"),q8.forEach(t),KUe=i(w),Hg=n(w,"LI",{});var KMe=s(Hg);jZ=n(KMe,"STRONG",{});var dDr=s(jZ);ZUe=r(dDr,"flaubert"),dDr.forEach(t),eJe=r(KMe," \u2014 "),tS=n(KMe,"A",{href:!0});var cDr=s(tS);oJe=r(cDr,"FlaubertTokenizer"),cDr.forEach(t),rJe=r(KMe," (FlauBERT model)"),KMe.forEach(t),tJe=i(w),ls=n(w,"LI",{});var N8=s(ls);DZ=n(N8,"STRONG",{});var fDr=s(DZ);aJe=r(fDr,"fnet"),fDr.forEach(t),nJe=r(N8," \u2014 "),aS=n(N8,"A",{href:!0});var mDr=s(aS);sJe=r(mDr,"FNetTokenizer"),mDr.forEach(t),lJe=r(N8," or "),nS=n(N8,"A",{href:!0});var gDr=s(nS);iJe=r(gDr,"FNetTokenizerFast"),gDr.forEach(t),dJe=r(N8," (FNet model)"),N8.forEach(t),cJe=i(w),Ug=n(w,"LI",{});var ZMe=s(Ug);GZ=n(ZMe,"STRONG",{});var hDr=s(GZ);fJe=r(hDr,"fsmt"),hDr.forEach(t),mJe=r(ZMe," \u2014 "),sS=n(ZMe,"A",{href:!0});var pDr=s(sS);gJe=r(pDr,"FSMTTokenizer"),pDr.forEach(t),hJe=r(ZMe," (FairSeq Machine-Translation model)"),ZMe.forEach(t),pJe=i(w),is=n(w,"LI",{});var j8=s(is);OZ=n(j8,"STRONG",{});var _Dr=s(OZ);_Je=r(_Dr,"funnel"),_Dr.forEach(t),uJe=r(j8," \u2014 "),lS=n(j8,"A",{href:!0});var uDr=s(lS);bJe=r(uDr,"FunnelTokenizer"),uDr.forEach(t),FJe=r(j8," or "),iS=n(j8,"A",{href:!0});var bDr=s(iS);vJe=r(bDr,"FunnelTokenizerFast"),bDr.forEach(t),TJe=r(j8," (Funnel Transformer model)"),j8.forEach(t),MJe=i(w),ds=n(w,"LI",{});var D8=s(ds);VZ=n(D8,"STRONG",{});var FDr=s(VZ);EJe=r(FDr,"gpt2"),FDr.forEach(t),CJe=r(D8," \u2014 "),dS=n(D8,"A",{href:!0});var vDr=s(dS);wJe=r(vDr,"GPT2Tokenizer"),vDr.forEach(t),AJe=r(D8," or "),cS=n(D8,"A",{href:!0});var TDr=s(cS);yJe=r(TDr,"GPT2TokenizerFast"),TDr.forEach(t),LJe=r(D8," (OpenAI GPT-2 model)"),D8.forEach(t),xJe=i(w),cs=n(w,"LI",{});var G8=s(cs);XZ=n(G8,"STRONG",{});var MDr=s(XZ);kJe=r(MDr,"gpt_neo"),MDr.forEach(t),SJe=r(G8," \u2014 "),fS=n(G8,"A",{href:!0});var EDr=s(fS);RJe=r(EDr,"GPT2Tokenizer"),EDr.forEach(t),BJe=r(G8," or "),mS=n(G8,"A",{href:!0});var CDr=s(mS);PJe=r(CDr,"GPT2TokenizerFast"),CDr.forEach(t),$Je=r(G8," (GPT Neo model)"),G8.forEach(t),IJe=i(w),fs=n(w,"LI",{});var O8=s(fs);zZ=n(O8,"STRONG",{});var wDr=s(zZ);qJe=r(wDr,"herbert"),wDr.forEach(t),NJe=r(O8," \u2014 "),gS=n(O8,"A",{href:!0});var ADr=s(gS);jJe=r(ADr,"HerbertTokenizer"),ADr.forEach(t),DJe=r(O8," or "),hS=n(O8,"A",{href:!0});var yDr=s(hS);GJe=r(yDr,"HerbertTokenizerFast"),yDr.forEach(t),OJe=r(O8," (HerBERT model)"),O8.forEach(t),VJe=i(w),Jg=n(w,"LI",{});var e4e=s(Jg);QZ=n(e4e,"STRONG",{});var LDr=s(QZ);XJe=r(LDr,"hubert"),LDr.forEach(t),zJe=r(e4e," \u2014 "),pS=n(e4e,"A",{href:!0});var xDr=s(pS);QJe=r(xDr,"Wav2Vec2CTCTokenizer"),xDr.forEach(t),WJe=r(e4e," (Hubert model)"),e4e.forEach(t),HJe=i(w),ms=n(w,"LI",{});var V8=s(ms);WZ=n(V8,"STRONG",{});var kDr=s(WZ);UJe=r(kDr,"ibert"),kDr.forEach(t),JJe=r(V8," \u2014 "),_S=n(V8,"A",{href:!0});var SDr=s(_S);YJe=r(SDr,"RobertaTokenizer"),SDr.forEach(t),KJe=r(V8," or "),uS=n(V8,"A",{href:!0});var RDr=s(uS);ZJe=r(RDr,"RobertaTokenizerFast"),RDr.forEach(t),eYe=r(V8," (I-BERT model)"),V8.forEach(t),oYe=i(w),gs=n(w,"LI",{});var X8=s(gs);HZ=n(X8,"STRONG",{});var BDr=s(HZ);rYe=r(BDr,"layoutlm"),BDr.forEach(t),tYe=r(X8," \u2014 "),bS=n(X8,"A",{href:!0});var PDr=s(bS);aYe=r(PDr,"LayoutLMTokenizer"),PDr.forEach(t),nYe=r(X8," or "),FS=n(X8,"A",{href:!0});var $Dr=s(FS);sYe=r($Dr,"LayoutLMTokenizerFast"),$Dr.forEach(t),lYe=r(X8," (LayoutLM model)"),X8.forEach(t),iYe=i(w),hs=n(w,"LI",{});var z8=s(hs);UZ=n(z8,"STRONG",{});var IDr=s(UZ);dYe=r(IDr,"layoutlmv2"),IDr.forEach(t),cYe=r(z8," \u2014 "),vS=n(z8,"A",{href:!0});var qDr=s(vS);fYe=r(qDr,"LayoutLMv2Tokenizer"),qDr.forEach(t),mYe=r(z8," or "),TS=n(z8,"A",{href:!0});var NDr=s(TS);gYe=r(NDr,"LayoutLMv2TokenizerFast"),NDr.forEach(t),hYe=r(z8," (LayoutLMv2 model)"),z8.forEach(t),pYe=i(w),ps=n(w,"LI",{});var Q8=s(ps);JZ=n(Q8,"STRONG",{});var jDr=s(JZ);_Ye=r(jDr,"layoutxlm"),jDr.forEach(t),uYe=r(Q8," \u2014 "),MS=n(Q8,"A",{href:!0});var DDr=s(MS);bYe=r(DDr,"LayoutXLMTokenizer"),DDr.forEach(t),FYe=r(Q8," or "),ES=n(Q8,"A",{href:!0});var GDr=s(ES);vYe=r(GDr,"LayoutXLMTokenizerFast"),GDr.forEach(t),TYe=r(Q8," (LayoutXLM model)"),Q8.forEach(t),MYe=i(w),_s=n(w,"LI",{});var W8=s(_s);YZ=n(W8,"STRONG",{});var ODr=s(YZ);EYe=r(ODr,"led"),ODr.forEach(t),CYe=r(W8," \u2014 "),CS=n(W8,"A",{href:!0});var VDr=s(CS);wYe=r(VDr,"LEDTokenizer"),VDr.forEach(t),AYe=r(W8," or "),wS=n(W8,"A",{href:!0});var XDr=s(wS);yYe=r(XDr,"LEDTokenizerFast"),XDr.forEach(t),LYe=r(W8," (LED model)"),W8.forEach(t),xYe=i(w),us=n(w,"LI",{});var H8=s(us);KZ=n(H8,"STRONG",{});var zDr=s(KZ);kYe=r(zDr,"longformer"),zDr.forEach(t),SYe=r(H8," \u2014 "),AS=n(H8,"A",{href:!0});var QDr=s(AS);RYe=r(QDr,"LongformerTokenizer"),QDr.forEach(t),BYe=r(H8," or "),yS=n(H8,"A",{href:!0});var WDr=s(yS);PYe=r(WDr,"LongformerTokenizerFast"),WDr.forEach(t),$Ye=r(H8," (Longformer model)"),H8.forEach(t),IYe=i(w),Yg=n(w,"LI",{});var o4e=s(Yg);ZZ=n(o4e,"STRONG",{});var HDr=s(ZZ);qYe=r(HDr,"luke"),HDr.forEach(t),NYe=r(o4e," \u2014 "),LS=n(o4e,"A",{href:!0});var UDr=s(LS);jYe=r(UDr,"LukeTokenizer"),UDr.forEach(t),DYe=r(o4e," (LUKE model)"),o4e.forEach(t),GYe=i(w),bs=n(w,"LI",{});var U8=s(bs);eee=n(U8,"STRONG",{});var JDr=s(eee);OYe=r(JDr,"lxmert"),JDr.forEach(t),VYe=r(U8," \u2014 "),xS=n(U8,"A",{href:!0});var YDr=s(xS);XYe=r(YDr,"LxmertTokenizer"),YDr.forEach(t),zYe=r(U8," or "),kS=n(U8,"A",{href:!0});var KDr=s(kS);QYe=r(KDr,"LxmertTokenizerFast"),KDr.forEach(t),WYe=r(U8," (LXMERT model)"),U8.forEach(t),HYe=i(w),Kg=n(w,"LI",{});var r4e=s(Kg);oee=n(r4e,"STRONG",{});var ZDr=s(oee);UYe=r(ZDr,"m2m_100"),ZDr.forEach(t),JYe=r(r4e," \u2014 "),SS=n(r4e,"A",{href:!0});var eGr=s(SS);YYe=r(eGr,"M2M100Tokenizer"),eGr.forEach(t),KYe=r(r4e," (M2M100 model)"),r4e.forEach(t),ZYe=i(w),Zg=n(w,"LI",{});var t4e=s(Zg);ree=n(t4e,"STRONG",{});var oGr=s(ree);eKe=r(oGr,"marian"),oGr.forEach(t),oKe=r(t4e," \u2014 "),RS=n(t4e,"A",{href:!0});var rGr=s(RS);rKe=r(rGr,"MarianTokenizer"),rGr.forEach(t),tKe=r(t4e," (Marian model)"),t4e.forEach(t),aKe=i(w),Fs=n(w,"LI",{});var J8=s(Fs);tee=n(J8,"STRONG",{});var tGr=s(tee);nKe=r(tGr,"mbart"),tGr.forEach(t),sKe=r(J8," \u2014 "),BS=n(J8,"A",{href:!0});var aGr=s(BS);lKe=r(aGr,"MBartTokenizer"),aGr.forEach(t),iKe=r(J8," or "),PS=n(J8,"A",{href:!0});var nGr=s(PS);dKe=r(nGr,"MBartTokenizerFast"),nGr.forEach(t),cKe=r(J8," (mBART model)"),J8.forEach(t),fKe=i(w),vs=n(w,"LI",{});var Y8=s(vs);aee=n(Y8,"STRONG",{});var sGr=s(aee);mKe=r(sGr,"mbart50"),sGr.forEach(t),gKe=r(Y8," \u2014 "),$S=n(Y8,"A",{href:!0});var lGr=s($S);hKe=r(lGr,"MBart50Tokenizer"),lGr.forEach(t),pKe=r(Y8," or "),IS=n(Y8,"A",{href:!0});var iGr=s(IS);_Ke=r(iGr,"MBart50TokenizerFast"),iGr.forEach(t),uKe=r(Y8," (mBART-50 model)"),Y8.forEach(t),bKe=i(w),eh=n(w,"LI",{});var a4e=s(eh);nee=n(a4e,"STRONG",{});var dGr=s(nee);FKe=r(dGr,"mluke"),dGr.forEach(t),vKe=r(a4e," \u2014 "),qS=n(a4e,"A",{href:!0});var cGr=s(qS);TKe=r(cGr,"MLukeTokenizer"),cGr.forEach(t),MKe=r(a4e," (mLUKE model)"),a4e.forEach(t),EKe=i(w),Ts=n(w,"LI",{});var K8=s(Ts);see=n(K8,"STRONG",{});var fGr=s(see);CKe=r(fGr,"mobilebert"),fGr.forEach(t),wKe=r(K8," \u2014 "),NS=n(K8,"A",{href:!0});var mGr=s(NS);AKe=r(mGr,"MobileBertTokenizer"),mGr.forEach(t),yKe=r(K8," or "),jS=n(K8,"A",{href:!0});var gGr=s(jS);LKe=r(gGr,"MobileBertTokenizerFast"),gGr.forEach(t),xKe=r(K8," (MobileBERT model)"),K8.forEach(t),kKe=i(w),Ms=n(w,"LI",{});var Z8=s(Ms);lee=n(Z8,"STRONG",{});var hGr=s(lee);SKe=r(hGr,"mpnet"),hGr.forEach(t),RKe=r(Z8," \u2014 "),DS=n(Z8,"A",{href:!0});var pGr=s(DS);BKe=r(pGr,"MPNetTokenizer"),pGr.forEach(t),PKe=r(Z8," or "),GS=n(Z8,"A",{href:!0});var _Gr=s(GS);$Ke=r(_Gr,"MPNetTokenizerFast"),_Gr.forEach(t),IKe=r(Z8," (MPNet model)"),Z8.forEach(t),qKe=i(w),Es=n(w,"LI",{});var e7=s(Es);iee=n(e7,"STRONG",{});var uGr=s(iee);NKe=r(uGr,"mt5"),uGr.forEach(t),jKe=r(e7," \u2014 "),OS=n(e7,"A",{href:!0});var bGr=s(OS);DKe=r(bGr,"MT5Tokenizer"),bGr.forEach(t),GKe=r(e7," or "),VS=n(e7,"A",{href:!0});var FGr=s(VS);OKe=r(FGr,"MT5TokenizerFast"),FGr.forEach(t),VKe=r(e7," (mT5 model)"),e7.forEach(t),XKe=i(w),Cs=n(w,"LI",{});var o7=s(Cs);dee=n(o7,"STRONG",{});var vGr=s(dee);zKe=r(vGr,"openai-gpt"),vGr.forEach(t),QKe=r(o7," \u2014 "),XS=n(o7,"A",{href:!0});var TGr=s(XS);WKe=r(TGr,"OpenAIGPTTokenizer"),TGr.forEach(t),HKe=r(o7," or "),zS=n(o7,"A",{href:!0});var MGr=s(zS);UKe=r(MGr,"OpenAIGPTTokenizerFast"),MGr.forEach(t),JKe=r(o7," (OpenAI GPT model)"),o7.forEach(t),YKe=i(w),ws=n(w,"LI",{});var r7=s(ws);cee=n(r7,"STRONG",{});var EGr=s(cee);KKe=r(EGr,"pegasus"),EGr.forEach(t),ZKe=r(r7," \u2014 "),QS=n(r7,"A",{href:!0});var CGr=s(QS);eZe=r(CGr,"PegasusTokenizer"),CGr.forEach(t),oZe=r(r7," or "),WS=n(r7,"A",{href:!0});var wGr=s(WS);rZe=r(wGr,"PegasusTokenizerFast"),wGr.forEach(t),tZe=r(r7," (Pegasus model)"),r7.forEach(t),aZe=i(w),oh=n(w,"LI",{});var n4e=s(oh);fee=n(n4e,"STRONG",{});var AGr=s(fee);nZe=r(AGr,"perceiver"),AGr.forEach(t),sZe=r(n4e," \u2014 "),HS=n(n4e,"A",{href:!0});var yGr=s(HS);lZe=r(yGr,"PerceiverTokenizer"),yGr.forEach(t),iZe=r(n4e," (Perceiver model)"),n4e.forEach(t),dZe=i(w),rh=n(w,"LI",{});var s4e=s(rh);mee=n(s4e,"STRONG",{});var LGr=s(mee);cZe=r(LGr,"phobert"),LGr.forEach(t),fZe=r(s4e," \u2014 "),US=n(s4e,"A",{href:!0});var xGr=s(US);mZe=r(xGr,"PhobertTokenizer"),xGr.forEach(t),gZe=r(s4e," (PhoBERT model)"),s4e.forEach(t),hZe=i(w),th=n(w,"LI",{});var l4e=s(th);gee=n(l4e,"STRONG",{});var kGr=s(gee);pZe=r(kGr,"plbart"),kGr.forEach(t),_Ze=r(l4e," \u2014 "),JS=n(l4e,"A",{href:!0});var SGr=s(JS);uZe=r(SGr,"PLBartTokenizer"),SGr.forEach(t),bZe=r(l4e," (PLBart model)"),l4e.forEach(t),FZe=i(w),ah=n(w,"LI",{});var i4e=s(ah);hee=n(i4e,"STRONG",{});var RGr=s(hee);vZe=r(RGr,"prophetnet"),RGr.forEach(t),TZe=r(i4e," \u2014 "),YS=n(i4e,"A",{href:!0});var BGr=s(YS);MZe=r(BGr,"ProphetNetTokenizer"),BGr.forEach(t),EZe=r(i4e," (ProphetNet model)"),i4e.forEach(t),CZe=i(w),As=n(w,"LI",{});var t7=s(As);pee=n(t7,"STRONG",{});var PGr=s(pee);wZe=r(PGr,"qdqbert"),PGr.forEach(t),AZe=r(t7," \u2014 "),KS=n(t7,"A",{href:!0});var $Gr=s(KS);yZe=r($Gr,"BertTokenizer"),$Gr.forEach(t),LZe=r(t7," or "),ZS=n(t7,"A",{href:!0});var IGr=s(ZS);xZe=r(IGr,"BertTokenizerFast"),IGr.forEach(t),kZe=r(t7," (QDQBert model)"),t7.forEach(t),SZe=i(w),nh=n(w,"LI",{});var d4e=s(nh);_ee=n(d4e,"STRONG",{});var qGr=s(_ee);RZe=r(qGr,"rag"),qGr.forEach(t),BZe=r(d4e," \u2014 "),eR=n(d4e,"A",{href:!0});var NGr=s(eR);PZe=r(NGr,"RagTokenizer"),NGr.forEach(t),$Ze=r(d4e," (RAG model)"),d4e.forEach(t),IZe=i(w),ys=n(w,"LI",{});var a7=s(ys);uee=n(a7,"STRONG",{});var jGr=s(uee);qZe=r(jGr,"realm"),jGr.forEach(t),NZe=r(a7," \u2014 "),oR=n(a7,"A",{href:!0});var DGr=s(oR);jZe=r(DGr,"RealmTokenizer"),DGr.forEach(t),DZe=r(a7," or "),rR=n(a7,"A",{href:!0});var GGr=s(rR);GZe=r(GGr,"RealmTokenizerFast"),GGr.forEach(t),OZe=r(a7," (Realm model)"),a7.forEach(t),VZe=i(w),Ls=n(w,"LI",{});var n7=s(Ls);bee=n(n7,"STRONG",{});var OGr=s(bee);XZe=r(OGr,"reformer"),OGr.forEach(t),zZe=r(n7," \u2014 "),tR=n(n7,"A",{href:!0});var VGr=s(tR);QZe=r(VGr,"ReformerTokenizer"),VGr.forEach(t),WZe=r(n7," or "),aR=n(n7,"A",{href:!0});var XGr=s(aR);HZe=r(XGr,"ReformerTokenizerFast"),XGr.forEach(t),UZe=r(n7," (Reformer model)"),n7.forEach(t),JZe=i(w),xs=n(w,"LI",{});var s7=s(xs);Fee=n(s7,"STRONG",{});var zGr=s(Fee);YZe=r(zGr,"rembert"),zGr.forEach(t),KZe=r(s7," \u2014 "),nR=n(s7,"A",{href:!0});var QGr=s(nR);ZZe=r(QGr,"RemBertTokenizer"),QGr.forEach(t),eeo=r(s7," or "),sR=n(s7,"A",{href:!0});var WGr=s(sR);oeo=r(WGr,"RemBertTokenizerFast"),WGr.forEach(t),reo=r(s7," (RemBERT model)"),s7.forEach(t),teo=i(w),ks=n(w,"LI",{});var l7=s(ks);vee=n(l7,"STRONG",{});var HGr=s(vee);aeo=r(HGr,"retribert"),HGr.forEach(t),neo=r(l7," \u2014 "),lR=n(l7,"A",{href:!0});var UGr=s(lR);seo=r(UGr,"RetriBertTokenizer"),UGr.forEach(t),leo=r(l7," or "),iR=n(l7,"A",{href:!0});var JGr=s(iR);ieo=r(JGr,"RetriBertTokenizerFast"),JGr.forEach(t),deo=r(l7," (RetriBERT model)"),l7.forEach(t),ceo=i(w),Ss=n(w,"LI",{});var i7=s(Ss);Tee=n(i7,"STRONG",{});var YGr=s(Tee);feo=r(YGr,"roberta"),YGr.forEach(t),meo=r(i7," \u2014 "),dR=n(i7,"A",{href:!0});var KGr=s(dR);geo=r(KGr,"RobertaTokenizer"),KGr.forEach(t),heo=r(i7," or "),cR=n(i7,"A",{href:!0});var ZGr=s(cR);peo=r(ZGr,"RobertaTokenizerFast"),ZGr.forEach(t),_eo=r(i7," (RoBERTa model)"),i7.forEach(t),ueo=i(w),Rs=n(w,"LI",{});var d7=s(Rs);Mee=n(d7,"STRONG",{});var eOr=s(Mee);beo=r(eOr,"roformer"),eOr.forEach(t),Feo=r(d7," \u2014 "),fR=n(d7,"A",{href:!0});var oOr=s(fR);veo=r(oOr,"RoFormerTokenizer"),oOr.forEach(t),Teo=r(d7," or "),mR=n(d7,"A",{href:!0});var rOr=s(mR);Meo=r(rOr,"RoFormerTokenizerFast"),rOr.forEach(t),Eeo=r(d7," (RoFormer model)"),d7.forEach(t),Ceo=i(w),sh=n(w,"LI",{});var c4e=s(sh);Eee=n(c4e,"STRONG",{});var tOr=s(Eee);weo=r(tOr,"speech_to_text"),tOr.forEach(t),Aeo=r(c4e," \u2014 "),gR=n(c4e,"A",{href:!0});var aOr=s(gR);yeo=r(aOr,"Speech2TextTokenizer"),aOr.forEach(t),Leo=r(c4e," (Speech2Text model)"),c4e.forEach(t),xeo=i(w),lh=n(w,"LI",{});var f4e=s(lh);Cee=n(f4e,"STRONG",{});var nOr=s(Cee);keo=r(nOr,"speech_to_text_2"),nOr.forEach(t),Seo=r(f4e," \u2014 "),hR=n(f4e,"A",{href:!0});var sOr=s(hR);Reo=r(sOr,"Speech2Text2Tokenizer"),sOr.forEach(t),Beo=r(f4e," (Speech2Text2 model)"),f4e.forEach(t),Peo=i(w),Bs=n(w,"LI",{});var c7=s(Bs);wee=n(c7,"STRONG",{});var lOr=s(wee);$eo=r(lOr,"splinter"),lOr.forEach(t),Ieo=r(c7," \u2014 "),pR=n(c7,"A",{href:!0});var iOr=s(pR);qeo=r(iOr,"SplinterTokenizer"),iOr.forEach(t),Neo=r(c7," or "),_R=n(c7,"A",{href:!0});var dOr=s(_R);jeo=r(dOr,"SplinterTokenizerFast"),dOr.forEach(t),Deo=r(c7," (Splinter model)"),c7.forEach(t),Geo=i(w),Ps=n(w,"LI",{});var f7=s(Ps);Aee=n(f7,"STRONG",{});var cOr=s(Aee);Oeo=r(cOr,"squeezebert"),cOr.forEach(t),Veo=r(f7," \u2014 "),uR=n(f7,"A",{href:!0});var fOr=s(uR);Xeo=r(fOr,"SqueezeBertTokenizer"),fOr.forEach(t),zeo=r(f7," or "),bR=n(f7,"A",{href:!0});var mOr=s(bR);Qeo=r(mOr,"SqueezeBertTokenizerFast"),mOr.forEach(t),Weo=r(f7," (SqueezeBERT model)"),f7.forEach(t),Heo=i(w),$s=n(w,"LI",{});var m7=s($s);yee=n(m7,"STRONG",{});var gOr=s(yee);Ueo=r(gOr,"t5"),gOr.forEach(t),Jeo=r(m7," \u2014 "),FR=n(m7,"A",{href:!0});var hOr=s(FR);Yeo=r(hOr,"T5Tokenizer"),hOr.forEach(t),Keo=r(m7," or "),vR=n(m7,"A",{href:!0});var pOr=s(vR);Zeo=r(pOr,"T5TokenizerFast"),pOr.forEach(t),eoo=r(m7," (T5 model)"),m7.forEach(t),ooo=i(w),ih=n(w,"LI",{});var m4e=s(ih);Lee=n(m4e,"STRONG",{});var _Or=s(Lee);roo=r(_Or,"tapas"),_Or.forEach(t),too=r(m4e," \u2014 "),TR=n(m4e,"A",{href:!0});var uOr=s(TR);aoo=r(uOr,"TapasTokenizer"),uOr.forEach(t),noo=r(m4e," (TAPAS model)"),m4e.forEach(t),soo=i(w),dh=n(w,"LI",{});var g4e=s(dh);xee=n(g4e,"STRONG",{});var bOr=s(xee);loo=r(bOr,"transfo-xl"),bOr.forEach(t),ioo=r(g4e," \u2014 "),MR=n(g4e,"A",{href:!0});var FOr=s(MR);doo=r(FOr,"TransfoXLTokenizer"),FOr.forEach(t),coo=r(g4e," (Transformer-XL model)"),g4e.forEach(t),foo=i(w),ch=n(w,"LI",{});var h4e=s(ch);kee=n(h4e,"STRONG",{});var vOr=s(kee);moo=r(vOr,"wav2vec2"),vOr.forEach(t),goo=r(h4e," \u2014 "),ER=n(h4e,"A",{href:!0});var TOr=s(ER);hoo=r(TOr,"Wav2Vec2CTCTokenizer"),TOr.forEach(t),poo=r(h4e," (Wav2Vec2 model)"),h4e.forEach(t),_oo=i(w),fh=n(w,"LI",{});var p4e=s(fh);See=n(p4e,"STRONG",{});var MOr=s(See);uoo=r(MOr,"wav2vec2_phoneme"),MOr.forEach(t),boo=r(p4e," \u2014 "),CR=n(p4e,"A",{href:!0});var EOr=s(CR);Foo=r(EOr,"Wav2Vec2PhonemeCTCTokenizer"),EOr.forEach(t),voo=r(p4e," (Wav2Vec2Phoneme model)"),p4e.forEach(t),Too=i(w),Is=n(w,"LI",{});var g7=s(Is);Ree=n(g7,"STRONG",{});var COr=s(Ree);Moo=r(COr,"xglm"),COr.forEach(t),Eoo=r(g7," \u2014 "),wR=n(g7,"A",{href:!0});var wOr=s(wR);Coo=r(wOr,"XGLMTokenizer"),wOr.forEach(t),woo=r(g7," or "),AR=n(g7,"A",{href:!0});var AOr=s(AR);Aoo=r(AOr,"XGLMTokenizerFast"),AOr.forEach(t),yoo=r(g7," (XGLM model)"),g7.forEach(t),Loo=i(w),mh=n(w,"LI",{});var _4e=s(mh);Bee=n(_4e,"STRONG",{});var yOr=s(Bee);xoo=r(yOr,"xlm"),yOr.forEach(t),koo=r(_4e," \u2014 "),yR=n(_4e,"A",{href:!0});var LOr=s(yR);Soo=r(LOr,"XLMTokenizer"),LOr.forEach(t),Roo=r(_4e," (XLM model)"),_4e.forEach(t),Boo=i(w),gh=n(w,"LI",{});var u4e=s(gh);Pee=n(u4e,"STRONG",{});var xOr=s(Pee);Poo=r(xOr,"xlm-prophetnet"),xOr.forEach(t),$oo=r(u4e," \u2014 "),LR=n(u4e,"A",{href:!0});var kOr=s(LR);Ioo=r(kOr,"XLMProphetNetTokenizer"),kOr.forEach(t),qoo=r(u4e," (XLMProphetNet model)"),u4e.forEach(t),Noo=i(w),qs=n(w,"LI",{});var h7=s(qs);$ee=n(h7,"STRONG",{});var SOr=s($ee);joo=r(SOr,"xlm-roberta"),SOr.forEach(t),Doo=r(h7," \u2014 "),xR=n(h7,"A",{href:!0});var ROr=s(xR);Goo=r(ROr,"XLMRobertaTokenizer"),ROr.forEach(t),Ooo=r(h7," or "),kR=n(h7,"A",{href:!0});var BOr=s(kR);Voo=r(BOr,"XLMRobertaTokenizerFast"),BOr.forEach(t),Xoo=r(h7," (XLM-RoBERTa model)"),h7.forEach(t),zoo=i(w),Ns=n(w,"LI",{});var p7=s(Ns);Iee=n(p7,"STRONG",{});var POr=s(Iee);Qoo=r(POr,"xlnet"),POr.forEach(t),Woo=r(p7," \u2014 "),SR=n(p7,"A",{href:!0});var $Or=s(SR);Hoo=r($Or,"XLNetTokenizer"),$Or.forEach(t),Uoo=r(p7," or "),RR=n(p7,"A",{href:!0});var IOr=s(RR);Joo=r(IOr,"XLNetTokenizerFast"),IOr.forEach(t),Yoo=r(p7," (XLNet model)"),p7.forEach(t),w.forEach(t),Koo=i(ha),qee=n(ha,"P",{});var qOr=s(qee);Zoo=r(qOr,"Examples:"),qOr.forEach(t),ero=i(ha),m(zC.$$.fragment,ha),ha.forEach(t),oro=i(Vs),hh=n(Vs,"DIV",{class:!0});var XPe=s(hh);m(QC.$$.fragment,XPe),rro=i(XPe),Nee=n(XPe,"P",{});var NOr=s(Nee);tro=r(NOr,"Register a new tokenizer in this mapping."),NOr.forEach(t),XPe.forEach(t),Vs.forEach(t),DRe=i(c),Wi=n(c,"H2",{class:!0});var zPe=s(Wi);ph=n(zPe,"A",{id:!0,class:!0,href:!0});var jOr=s(ph);jee=n(jOr,"SPAN",{});var DOr=s(jee);m(WC.$$.fragment,DOr),DOr.forEach(t),jOr.forEach(t),aro=i(zPe),Dee=n(zPe,"SPAN",{});var GOr=s(Dee);nro=r(GOr,"AutoFeatureExtractor"),GOr.forEach(t),zPe.forEach(t),GRe=i(c),Ho=n(c,"DIV",{class:!0});var Xs=s(Ho);m(HC.$$.fragment,Xs),sro=i(Xs),UC=n(Xs,"P",{});var QPe=s(UC);lro=r(QPe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),BR=n(QPe,"A",{href:!0});var OOr=s(BR);iro=r(OOr,"AutoFeatureExtractor.from_pretrained()"),OOr.forEach(t),dro=r(QPe," class method."),QPe.forEach(t),cro=i(Xs),JC=n(Xs,"P",{});var WPe=s(JC);fro=r(WPe,"This class cannot be instantiated directly using "),Gee=n(WPe,"CODE",{});var VOr=s(Gee);mro=r(VOr,"__init__()"),VOr.forEach(t),gro=r(WPe," (throws an error)."),WPe.forEach(t),hro=i(Xs),$e=n(Xs,"DIV",{class:!0});var Nt=s($e);m(YC.$$.fragment,Nt),pro=i(Nt),Oee=n(Nt,"P",{});var XOr=s(Oee);_ro=r(XOr,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),XOr.forEach(t),uro=i(Nt),Va=n(Nt,"P",{});var kE=s(Va);bro=r(kE,"The feature extractor class to instantiate is selected based on the "),Vee=n(kE,"CODE",{});var zOr=s(Vee);Fro=r(zOr,"model_type"),zOr.forEach(t),vro=r(kE,` property of the config object
(either passed as an argument or loaded from `),Xee=n(kE,"CODE",{});var QOr=s(Xee);Tro=r(QOr,"pretrained_model_name_or_path"),QOr.forEach(t),Mro=r(kE,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),zee=n(kE,"CODE",{});var WOr=s(zee);Ero=r(WOr,"pretrained_model_name_or_path"),WOr.forEach(t),Cro=r(kE,":"),kE.forEach(t),wro=i(Nt),ee=n(Nt,"UL",{});var ae=s(ee);_h=n(ae,"LI",{});var b4e=s(_h);Qee=n(b4e,"STRONG",{});var HOr=s(Qee);Aro=r(HOr,"beit"),HOr.forEach(t),yro=r(b4e," \u2014 "),PR=n(b4e,"A",{href:!0});var UOr=s(PR);Lro=r(UOr,"BeitFeatureExtractor"),UOr.forEach(t),xro=r(b4e," (BEiT model)"),b4e.forEach(t),kro=i(ae),uh=n(ae,"LI",{});var F4e=s(uh);Wee=n(F4e,"STRONG",{});var JOr=s(Wee);Sro=r(JOr,"clip"),JOr.forEach(t),Rro=r(F4e," \u2014 "),$R=n(F4e,"A",{href:!0});var YOr=s($R);Bro=r(YOr,"CLIPFeatureExtractor"),YOr.forEach(t),Pro=r(F4e," (CLIP model)"),F4e.forEach(t),$ro=i(ae),bh=n(ae,"LI",{});var v4e=s(bh);Hee=n(v4e,"STRONG",{});var KOr=s(Hee);Iro=r(KOr,"convnext"),KOr.forEach(t),qro=r(v4e," \u2014 "),IR=n(v4e,"A",{href:!0});var ZOr=s(IR);Nro=r(ZOr,"ConvNextFeatureExtractor"),ZOr.forEach(t),jro=r(v4e," (ConvNext model)"),v4e.forEach(t),Dro=i(ae),Fh=n(ae,"LI",{});var T4e=s(Fh);Uee=n(T4e,"STRONG",{});var eVr=s(Uee);Gro=r(eVr,"deit"),eVr.forEach(t),Oro=r(T4e," \u2014 "),qR=n(T4e,"A",{href:!0});var oVr=s(qR);Vro=r(oVr,"DeiTFeatureExtractor"),oVr.forEach(t),Xro=r(T4e," (DeiT model)"),T4e.forEach(t),zro=i(ae),vh=n(ae,"LI",{});var M4e=s(vh);Jee=n(M4e,"STRONG",{});var rVr=s(Jee);Qro=r(rVr,"detr"),rVr.forEach(t),Wro=r(M4e," \u2014 "),NR=n(M4e,"A",{href:!0});var tVr=s(NR);Hro=r(tVr,"DetrFeatureExtractor"),tVr.forEach(t),Uro=r(M4e," (DETR model)"),M4e.forEach(t),Jro=i(ae),Th=n(ae,"LI",{});var E4e=s(Th);Yee=n(E4e,"STRONG",{});var aVr=s(Yee);Yro=r(aVr,"hubert"),aVr.forEach(t),Kro=r(E4e," \u2014 "),jR=n(E4e,"A",{href:!0});var nVr=s(jR);Zro=r(nVr,"Wav2Vec2FeatureExtractor"),nVr.forEach(t),eto=r(E4e," (Hubert model)"),E4e.forEach(t),oto=i(ae),Mh=n(ae,"LI",{});var C4e=s(Mh);Kee=n(C4e,"STRONG",{});var sVr=s(Kee);rto=r(sVr,"layoutlmv2"),sVr.forEach(t),tto=r(C4e," \u2014 "),DR=n(C4e,"A",{href:!0});var lVr=s(DR);ato=r(lVr,"LayoutLMv2FeatureExtractor"),lVr.forEach(t),nto=r(C4e," (LayoutLMv2 model)"),C4e.forEach(t),sto=i(ae),Eh=n(ae,"LI",{});var w4e=s(Eh);Zee=n(w4e,"STRONG",{});var iVr=s(Zee);lto=r(iVr,"maskformer"),iVr.forEach(t),ito=r(w4e," \u2014 "),GR=n(w4e,"A",{href:!0});var dVr=s(GR);dto=r(dVr,"MaskFormerFeatureExtractor"),dVr.forEach(t),cto=r(w4e," (MaskFormer model)"),w4e.forEach(t),fto=i(ae),Ch=n(ae,"LI",{});var A4e=s(Ch);eoe=n(A4e,"STRONG",{});var cVr=s(eoe);mto=r(cVr,"perceiver"),cVr.forEach(t),gto=r(A4e," \u2014 "),OR=n(A4e,"A",{href:!0});var fVr=s(OR);hto=r(fVr,"PerceiverFeatureExtractor"),fVr.forEach(t),pto=r(A4e," (Perceiver model)"),A4e.forEach(t),_to=i(ae),wh=n(ae,"LI",{});var y4e=s(wh);ooe=n(y4e,"STRONG",{});var mVr=s(ooe);uto=r(mVr,"poolformer"),mVr.forEach(t),bto=r(y4e," \u2014 "),VR=n(y4e,"A",{href:!0});var gVr=s(VR);Fto=r(gVr,"PoolFormerFeatureExtractor"),gVr.forEach(t),vto=r(y4e," (PoolFormer model)"),y4e.forEach(t),Tto=i(ae),Ah=n(ae,"LI",{});var L4e=s(Ah);roe=n(L4e,"STRONG",{});var hVr=s(roe);Mto=r(hVr,"regnet"),hVr.forEach(t),Eto=r(L4e," \u2014 "),XR=n(L4e,"A",{href:!0});var pVr=s(XR);Cto=r(pVr,"ConvNextFeatureExtractor"),pVr.forEach(t),wto=r(L4e," (RegNet model)"),L4e.forEach(t),Ato=i(ae),yh=n(ae,"LI",{});var x4e=s(yh);toe=n(x4e,"STRONG",{});var _Vr=s(toe);yto=r(_Vr,"resnet"),_Vr.forEach(t),Lto=r(x4e," \u2014 "),zR=n(x4e,"A",{href:!0});var uVr=s(zR);xto=r(uVr,"ConvNextFeatureExtractor"),uVr.forEach(t),kto=r(x4e," (ResNet model)"),x4e.forEach(t),Sto=i(ae),Lh=n(ae,"LI",{});var k4e=s(Lh);aoe=n(k4e,"STRONG",{});var bVr=s(aoe);Rto=r(bVr,"segformer"),bVr.forEach(t),Bto=r(k4e," \u2014 "),QR=n(k4e,"A",{href:!0});var FVr=s(QR);Pto=r(FVr,"SegformerFeatureExtractor"),FVr.forEach(t),$to=r(k4e," (SegFormer model)"),k4e.forEach(t),Ito=i(ae),xh=n(ae,"LI",{});var S4e=s(xh);noe=n(S4e,"STRONG",{});var vVr=s(noe);qto=r(vVr,"speech_to_text"),vVr.forEach(t),Nto=r(S4e," \u2014 "),WR=n(S4e,"A",{href:!0});var TVr=s(WR);jto=r(TVr,"Speech2TextFeatureExtractor"),TVr.forEach(t),Dto=r(S4e," (Speech2Text model)"),S4e.forEach(t),Gto=i(ae),kh=n(ae,"LI",{});var R4e=s(kh);soe=n(R4e,"STRONG",{});var MVr=s(soe);Oto=r(MVr,"swin"),MVr.forEach(t),Vto=r(R4e," \u2014 "),HR=n(R4e,"A",{href:!0});var EVr=s(HR);Xto=r(EVr,"ViTFeatureExtractor"),EVr.forEach(t),zto=r(R4e," (Swin model)"),R4e.forEach(t),Qto=i(ae),Sh=n(ae,"LI",{});var B4e=s(Sh);loe=n(B4e,"STRONG",{});var CVr=s(loe);Wto=r(CVr,"van"),CVr.forEach(t),Hto=r(B4e," \u2014 "),UR=n(B4e,"A",{href:!0});var wVr=s(UR);Uto=r(wVr,"ConvNextFeatureExtractor"),wVr.forEach(t),Jto=r(B4e," (VAN model)"),B4e.forEach(t),Yto=i(ae),Rh=n(ae,"LI",{});var P4e=s(Rh);ioe=n(P4e,"STRONG",{});var AVr=s(ioe);Kto=r(AVr,"vit"),AVr.forEach(t),Zto=r(P4e," \u2014 "),JR=n(P4e,"A",{href:!0});var yVr=s(JR);eao=r(yVr,"ViTFeatureExtractor"),yVr.forEach(t),oao=r(P4e," (ViT model)"),P4e.forEach(t),rao=i(ae),Bh=n(ae,"LI",{});var $4e=s(Bh);doe=n($4e,"STRONG",{});var LVr=s(doe);tao=r(LVr,"vit_mae"),LVr.forEach(t),aao=r($4e," \u2014 "),YR=n($4e,"A",{href:!0});var xVr=s(YR);nao=r(xVr,"ViTFeatureExtractor"),xVr.forEach(t),sao=r($4e," (ViTMAE model)"),$4e.forEach(t),lao=i(ae),Ph=n(ae,"LI",{});var I4e=s(Ph);coe=n(I4e,"STRONG",{});var kVr=s(coe);iao=r(kVr,"wav2vec2"),kVr.forEach(t),dao=r(I4e," \u2014 "),KR=n(I4e,"A",{href:!0});var SVr=s(KR);cao=r(SVr,"Wav2Vec2FeatureExtractor"),SVr.forEach(t),fao=r(I4e," (Wav2Vec2 model)"),I4e.forEach(t),ae.forEach(t),mao=i(Nt),m($h.$$.fragment,Nt),gao=i(Nt),foe=n(Nt,"P",{});var RVr=s(foe);hao=r(RVr,"Examples:"),RVr.forEach(t),pao=i(Nt),m(KC.$$.fragment,Nt),Nt.forEach(t),_ao=i(Xs),Ih=n(Xs,"DIV",{class:!0});var HPe=s(Ih);m(ZC.$$.fragment,HPe),uao=i(HPe),moe=n(HPe,"P",{});var BVr=s(moe);bao=r(BVr,"Register a new feature extractor for this class."),BVr.forEach(t),HPe.forEach(t),Xs.forEach(t),ORe=i(c),Hi=n(c,"H2",{class:!0});var UPe=s(Hi);qh=n(UPe,"A",{id:!0,class:!0,href:!0});var PVr=s(qh);goe=n(PVr,"SPAN",{});var $Vr=s(goe);m(e3.$$.fragment,$Vr),$Vr.forEach(t),PVr.forEach(t),Fao=i(UPe),hoe=n(UPe,"SPAN",{});var IVr=s(hoe);vao=r(IVr,"AutoProcessor"),IVr.forEach(t),UPe.forEach(t),VRe=i(c),Uo=n(c,"DIV",{class:!0});var zs=s(Uo);m(o3.$$.fragment,zs),Tao=i(zs),r3=n(zs,"P",{});var JPe=s(r3);Mao=r(JPe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),ZR=n(JPe,"A",{href:!0});var qVr=s(ZR);Eao=r(qVr,"AutoProcessor.from_pretrained()"),qVr.forEach(t),Cao=r(JPe," class method."),JPe.forEach(t),wao=i(zs),t3=n(zs,"P",{});var YPe=s(t3);Aao=r(YPe,"This class cannot be instantiated directly using "),poe=n(YPe,"CODE",{});var NVr=s(poe);yao=r(NVr,"__init__()"),NVr.forEach(t),Lao=r(YPe," (throws an error)."),YPe.forEach(t),xao=i(zs),Ie=n(zs,"DIV",{class:!0});var jt=s(Ie);m(a3.$$.fragment,jt),kao=i(jt),_oe=n(jt,"P",{});var jVr=s(_oe);Sao=r(jVr,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),jVr.forEach(t),Rao=i(jt),Ui=n(jt,"P",{});var cU=s(Ui);Bao=r(cU,"The processor class to instantiate is selected based on the "),uoe=n(cU,"CODE",{});var DVr=s(uoe);Pao=r(DVr,"model_type"),DVr.forEach(t),$ao=r(cU,` property of the config object (either
passed as an argument or loaded from `),boe=n(cU,"CODE",{});var GVr=s(boe);Iao=r(GVr,"pretrained_model_name_or_path"),GVr.forEach(t),qao=r(cU," if possible):"),cU.forEach(t),Nao=i(jt),ke=n(jt,"UL",{});var jo=s(ke);Nh=n(jo,"LI",{});var q4e=s(Nh);Foe=n(q4e,"STRONG",{});var OVr=s(Foe);jao=r(OVr,"clip"),OVr.forEach(t),Dao=r(q4e," \u2014 "),eB=n(q4e,"A",{href:!0});var VVr=s(eB);Gao=r(VVr,"CLIPProcessor"),VVr.forEach(t),Oao=r(q4e," (CLIP model)"),q4e.forEach(t),Vao=i(jo),jh=n(jo,"LI",{});var N4e=s(jh);voe=n(N4e,"STRONG",{});var XVr=s(voe);Xao=r(XVr,"layoutlmv2"),XVr.forEach(t),zao=r(N4e," \u2014 "),oB=n(N4e,"A",{href:!0});var zVr=s(oB);Qao=r(zVr,"LayoutLMv2Processor"),zVr.forEach(t),Wao=r(N4e," (LayoutLMv2 model)"),N4e.forEach(t),Hao=i(jo),Dh=n(jo,"LI",{});var j4e=s(Dh);Toe=n(j4e,"STRONG",{});var QVr=s(Toe);Uao=r(QVr,"layoutxlm"),QVr.forEach(t),Jao=r(j4e," \u2014 "),rB=n(j4e,"A",{href:!0});var WVr=s(rB);Yao=r(WVr,"LayoutXLMProcessor"),WVr.forEach(t),Kao=r(j4e," (LayoutXLM model)"),j4e.forEach(t),Zao=i(jo),Gh=n(jo,"LI",{});var D4e=s(Gh);Moe=n(D4e,"STRONG",{});var HVr=s(Moe);eno=r(HVr,"speech_to_text"),HVr.forEach(t),ono=r(D4e," \u2014 "),tB=n(D4e,"A",{href:!0});var UVr=s(tB);rno=r(UVr,"Speech2TextProcessor"),UVr.forEach(t),tno=r(D4e," (Speech2Text model)"),D4e.forEach(t),ano=i(jo),Oh=n(jo,"LI",{});var G4e=s(Oh);Eoe=n(G4e,"STRONG",{});var JVr=s(Eoe);nno=r(JVr,"speech_to_text_2"),JVr.forEach(t),sno=r(G4e," \u2014 "),aB=n(G4e,"A",{href:!0});var YVr=s(aB);lno=r(YVr,"Speech2Text2Processor"),YVr.forEach(t),ino=r(G4e," (Speech2Text2 model)"),G4e.forEach(t),dno=i(jo),Vh=n(jo,"LI",{});var O4e=s(Vh);Coe=n(O4e,"STRONG",{});var KVr=s(Coe);cno=r(KVr,"trocr"),KVr.forEach(t),fno=r(O4e," \u2014 "),nB=n(O4e,"A",{href:!0});var ZVr=s(nB);mno=r(ZVr,"TrOCRProcessor"),ZVr.forEach(t),gno=r(O4e," (TrOCR model)"),O4e.forEach(t),hno=i(jo),Xh=n(jo,"LI",{});var V4e=s(Xh);woe=n(V4e,"STRONG",{});var eXr=s(woe);pno=r(eXr,"vision-text-dual-encoder"),eXr.forEach(t),_no=r(V4e," \u2014 "),sB=n(V4e,"A",{href:!0});var oXr=s(sB);uno=r(oXr,"VisionTextDualEncoderProcessor"),oXr.forEach(t),bno=r(V4e," (VisionTextDualEncoder model)"),V4e.forEach(t),Fno=i(jo),zh=n(jo,"LI",{});var X4e=s(zh);Aoe=n(X4e,"STRONG",{});var rXr=s(Aoe);vno=r(rXr,"wav2vec2"),rXr.forEach(t),Tno=r(X4e," \u2014 "),lB=n(X4e,"A",{href:!0});var tXr=s(lB);Mno=r(tXr,"Wav2Vec2Processor"),tXr.forEach(t),Eno=r(X4e," (Wav2Vec2 model)"),X4e.forEach(t),jo.forEach(t),Cno=i(jt),m(Qh.$$.fragment,jt),wno=i(jt),yoe=n(jt,"P",{});var aXr=s(yoe);Ano=r(aXr,"Examples:"),aXr.forEach(t),yno=i(jt),m(n3.$$.fragment,jt),jt.forEach(t),Lno=i(zs),Wh=n(zs,"DIV",{class:!0});var KPe=s(Wh);m(s3.$$.fragment,KPe),xno=i(KPe),Loe=n(KPe,"P",{});var nXr=s(Loe);kno=r(nXr,"Register a new processor for this class."),nXr.forEach(t),KPe.forEach(t),zs.forEach(t),XRe=i(c),Ji=n(c,"H2",{class:!0});var ZPe=s(Ji);Hh=n(ZPe,"A",{id:!0,class:!0,href:!0});var sXr=s(Hh);xoe=n(sXr,"SPAN",{});var lXr=s(xoe);m(l3.$$.fragment,lXr),lXr.forEach(t),sXr.forEach(t),Sno=i(ZPe),koe=n(ZPe,"SPAN",{});var iXr=s(koe);Rno=r(iXr,"AutoModel"),iXr.forEach(t),ZPe.forEach(t),zRe=i(c),Jo=n(c,"DIV",{class:!0});var Qs=s(Jo);m(i3.$$.fragment,Qs),Bno=i(Qs),Yi=n(Qs,"P",{});var fU=s(Yi);Pno=r(fU,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),iB=n(fU,"A",{href:!0});var dXr=s(iB);$no=r(dXr,"from_pretrained()"),dXr.forEach(t),Ino=r(fU," class method or the "),dB=n(fU,"A",{href:!0});var cXr=s(dB);qno=r(cXr,"from_config()"),cXr.forEach(t),Nno=r(fU,` class
method.`),fU.forEach(t),jno=i(Qs),d3=n(Qs,"P",{});var e$e=s(d3);Dno=r(e$e,"This class cannot be instantiated directly using "),Soe=n(e$e,"CODE",{});var fXr=s(Soe);Gno=r(fXr,"__init__()"),fXr.forEach(t),Ono=r(e$e," (throws an error)."),e$e.forEach(t),Vno=i(Qs),Xr=n(Qs,"DIV",{class:!0});var Ws=s(Xr);m(c3.$$.fragment,Ws),Xno=i(Ws),Roe=n(Ws,"P",{});var mXr=s(Roe);zno=r(mXr,"Instantiates one of the base model classes of the library from a configuration."),mXr.forEach(t),Qno=i(Ws),Ki=n(Ws,"P",{});var mU=s(Ki);Wno=r(mU,`Note:
Loading a model from its configuration file does `),Boe=n(mU,"STRONG",{});var gXr=s(Boe);Hno=r(gXr,"not"),gXr.forEach(t),Uno=r(mU,` load the model weights. It only affects the
model\u2019s configuration. Use `),cB=n(mU,"A",{href:!0});var hXr=s(cB);Jno=r(hXr,"from_pretrained()"),hXr.forEach(t),Yno=r(mU," to load the model weights."),mU.forEach(t),Kno=i(Ws),Poe=n(Ws,"P",{});var pXr=s(Poe);Zno=r(pXr,"Examples:"),pXr.forEach(t),eso=i(Ws),m(f3.$$.fragment,Ws),Ws.forEach(t),oso=i(Qs),qe=n(Qs,"DIV",{class:!0});var Dt=s(qe);m(m3.$$.fragment,Dt),rso=i(Dt),$oe=n(Dt,"P",{});var _Xr=s($oe);tso=r(_Xr,"Instantiate one of the base model classes of the library from a pretrained model."),_Xr.forEach(t),aso=i(Dt),Xa=n(Dt,"P",{});var SE=s(Xa);nso=r(SE,"The model class to instantiate is selected based on the "),Ioe=n(SE,"CODE",{});var uXr=s(Ioe);sso=r(uXr,"model_type"),uXr.forEach(t),lso=r(SE,` property of the config object (either
passed as an argument or loaded from `),qoe=n(SE,"CODE",{});var bXr=s(qoe);iso=r(bXr,"pretrained_model_name_or_path"),bXr.forEach(t),dso=r(SE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Noe=n(SE,"CODE",{});var FXr=s(Noe);cso=r(FXr,"pretrained_model_name_or_path"),FXr.forEach(t),fso=r(SE,":"),SE.forEach(t),mso=i(Dt),T=n(Dt,"UL",{});var M=s(T);Uh=n(M,"LI",{});var z4e=s(Uh);joe=n(z4e,"STRONG",{});var vXr=s(joe);gso=r(vXr,"albert"),vXr.forEach(t),hso=r(z4e," \u2014 "),fB=n(z4e,"A",{href:!0});var TXr=s(fB);pso=r(TXr,"AlbertModel"),TXr.forEach(t),_so=r(z4e," (ALBERT model)"),z4e.forEach(t),uso=i(M),Jh=n(M,"LI",{});var Q4e=s(Jh);Doe=n(Q4e,"STRONG",{});var MXr=s(Doe);bso=r(MXr,"bart"),MXr.forEach(t),Fso=r(Q4e," \u2014 "),mB=n(Q4e,"A",{href:!0});var EXr=s(mB);vso=r(EXr,"BartModel"),EXr.forEach(t),Tso=r(Q4e," (BART model)"),Q4e.forEach(t),Mso=i(M),Yh=n(M,"LI",{});var W4e=s(Yh);Goe=n(W4e,"STRONG",{});var CXr=s(Goe);Eso=r(CXr,"beit"),CXr.forEach(t),Cso=r(W4e," \u2014 "),gB=n(W4e,"A",{href:!0});var wXr=s(gB);wso=r(wXr,"BeitModel"),wXr.forEach(t),Aso=r(W4e," (BEiT model)"),W4e.forEach(t),yso=i(M),Kh=n(M,"LI",{});var H4e=s(Kh);Ooe=n(H4e,"STRONG",{});var AXr=s(Ooe);Lso=r(AXr,"bert"),AXr.forEach(t),xso=r(H4e," \u2014 "),hB=n(H4e,"A",{href:!0});var yXr=s(hB);kso=r(yXr,"BertModel"),yXr.forEach(t),Sso=r(H4e," (BERT model)"),H4e.forEach(t),Rso=i(M),Zh=n(M,"LI",{});var U4e=s(Zh);Voe=n(U4e,"STRONG",{});var LXr=s(Voe);Bso=r(LXr,"bert-generation"),LXr.forEach(t),Pso=r(U4e," \u2014 "),pB=n(U4e,"A",{href:!0});var xXr=s(pB);$so=r(xXr,"BertGenerationEncoder"),xXr.forEach(t),Iso=r(U4e," (Bert Generation model)"),U4e.forEach(t),qso=i(M),ep=n(M,"LI",{});var J4e=s(ep);Xoe=n(J4e,"STRONG",{});var kXr=s(Xoe);Nso=r(kXr,"big_bird"),kXr.forEach(t),jso=r(J4e," \u2014 "),_B=n(J4e,"A",{href:!0});var SXr=s(_B);Dso=r(SXr,"BigBirdModel"),SXr.forEach(t),Gso=r(J4e," (BigBird model)"),J4e.forEach(t),Oso=i(M),op=n(M,"LI",{});var Y4e=s(op);zoe=n(Y4e,"STRONG",{});var RXr=s(zoe);Vso=r(RXr,"bigbird_pegasus"),RXr.forEach(t),Xso=r(Y4e," \u2014 "),uB=n(Y4e,"A",{href:!0});var BXr=s(uB);zso=r(BXr,"BigBirdPegasusModel"),BXr.forEach(t),Qso=r(Y4e," (BigBirdPegasus model)"),Y4e.forEach(t),Wso=i(M),rp=n(M,"LI",{});var K4e=s(rp);Qoe=n(K4e,"STRONG",{});var PXr=s(Qoe);Hso=r(PXr,"blenderbot"),PXr.forEach(t),Uso=r(K4e," \u2014 "),bB=n(K4e,"A",{href:!0});var $Xr=s(bB);Jso=r($Xr,"BlenderbotModel"),$Xr.forEach(t),Yso=r(K4e," (Blenderbot model)"),K4e.forEach(t),Kso=i(M),tp=n(M,"LI",{});var Z4e=s(tp);Woe=n(Z4e,"STRONG",{});var IXr=s(Woe);Zso=r(IXr,"blenderbot-small"),IXr.forEach(t),elo=r(Z4e," \u2014 "),FB=n(Z4e,"A",{href:!0});var qXr=s(FB);olo=r(qXr,"BlenderbotSmallModel"),qXr.forEach(t),rlo=r(Z4e," (BlenderbotSmall model)"),Z4e.forEach(t),tlo=i(M),ap=n(M,"LI",{});var eEe=s(ap);Hoe=n(eEe,"STRONG",{});var NXr=s(Hoe);alo=r(NXr,"camembert"),NXr.forEach(t),nlo=r(eEe," \u2014 "),vB=n(eEe,"A",{href:!0});var jXr=s(vB);slo=r(jXr,"CamembertModel"),jXr.forEach(t),llo=r(eEe," (CamemBERT model)"),eEe.forEach(t),ilo=i(M),np=n(M,"LI",{});var oEe=s(np);Uoe=n(oEe,"STRONG",{});var DXr=s(Uoe);dlo=r(DXr,"canine"),DXr.forEach(t),clo=r(oEe," \u2014 "),TB=n(oEe,"A",{href:!0});var GXr=s(TB);flo=r(GXr,"CanineModel"),GXr.forEach(t),mlo=r(oEe," (Canine model)"),oEe.forEach(t),glo=i(M),sp=n(M,"LI",{});var rEe=s(sp);Joe=n(rEe,"STRONG",{});var OXr=s(Joe);hlo=r(OXr,"clip"),OXr.forEach(t),plo=r(rEe," \u2014 "),MB=n(rEe,"A",{href:!0});var VXr=s(MB);_lo=r(VXr,"CLIPModel"),VXr.forEach(t),ulo=r(rEe," (CLIP model)"),rEe.forEach(t),blo=i(M),lp=n(M,"LI",{});var tEe=s(lp);Yoe=n(tEe,"STRONG",{});var XXr=s(Yoe);Flo=r(XXr,"convbert"),XXr.forEach(t),vlo=r(tEe," \u2014 "),EB=n(tEe,"A",{href:!0});var zXr=s(EB);Tlo=r(zXr,"ConvBertModel"),zXr.forEach(t),Mlo=r(tEe," (ConvBERT model)"),tEe.forEach(t),Elo=i(M),ip=n(M,"LI",{});var aEe=s(ip);Koe=n(aEe,"STRONG",{});var QXr=s(Koe);Clo=r(QXr,"convnext"),QXr.forEach(t),wlo=r(aEe," \u2014 "),CB=n(aEe,"A",{href:!0});var WXr=s(CB);Alo=r(WXr,"ConvNextModel"),WXr.forEach(t),ylo=r(aEe," (ConvNext model)"),aEe.forEach(t),Llo=i(M),dp=n(M,"LI",{});var nEe=s(dp);Zoe=n(nEe,"STRONG",{});var HXr=s(Zoe);xlo=r(HXr,"ctrl"),HXr.forEach(t),klo=r(nEe," \u2014 "),wB=n(nEe,"A",{href:!0});var UXr=s(wB);Slo=r(UXr,"CTRLModel"),UXr.forEach(t),Rlo=r(nEe," (CTRL model)"),nEe.forEach(t),Blo=i(M),cp=n(M,"LI",{});var sEe=s(cp);ere=n(sEe,"STRONG",{});var JXr=s(ere);Plo=r(JXr,"data2vec-audio"),JXr.forEach(t),$lo=r(sEe," \u2014 "),AB=n(sEe,"A",{href:!0});var YXr=s(AB);Ilo=r(YXr,"Data2VecAudioModel"),YXr.forEach(t),qlo=r(sEe," (Data2VecAudio model)"),sEe.forEach(t),Nlo=i(M),fp=n(M,"LI",{});var lEe=s(fp);ore=n(lEe,"STRONG",{});var KXr=s(ore);jlo=r(KXr,"data2vec-text"),KXr.forEach(t),Dlo=r(lEe," \u2014 "),yB=n(lEe,"A",{href:!0});var ZXr=s(yB);Glo=r(ZXr,"Data2VecTextModel"),ZXr.forEach(t),Olo=r(lEe," (Data2VecText model)"),lEe.forEach(t),Vlo=i(M),mp=n(M,"LI",{});var iEe=s(mp);rre=n(iEe,"STRONG",{});var ezr=s(rre);Xlo=r(ezr,"deberta"),ezr.forEach(t),zlo=r(iEe," \u2014 "),LB=n(iEe,"A",{href:!0});var ozr=s(LB);Qlo=r(ozr,"DebertaModel"),ozr.forEach(t),Wlo=r(iEe," (DeBERTa model)"),iEe.forEach(t),Hlo=i(M),gp=n(M,"LI",{});var dEe=s(gp);tre=n(dEe,"STRONG",{});var rzr=s(tre);Ulo=r(rzr,"deberta-v2"),rzr.forEach(t),Jlo=r(dEe," \u2014 "),xB=n(dEe,"A",{href:!0});var tzr=s(xB);Ylo=r(tzr,"DebertaV2Model"),tzr.forEach(t),Klo=r(dEe," (DeBERTa-v2 model)"),dEe.forEach(t),Zlo=i(M),hp=n(M,"LI",{});var cEe=s(hp);are=n(cEe,"STRONG",{});var azr=s(are);eio=r(azr,"decision_transformer"),azr.forEach(t),oio=r(cEe," \u2014 "),kB=n(cEe,"A",{href:!0});var nzr=s(kB);rio=r(nzr,"DecisionTransformerModel"),nzr.forEach(t),tio=r(cEe," (Decision Transformer model)"),cEe.forEach(t),aio=i(M),pp=n(M,"LI",{});var fEe=s(pp);nre=n(fEe,"STRONG",{});var szr=s(nre);nio=r(szr,"deit"),szr.forEach(t),sio=r(fEe," \u2014 "),SB=n(fEe,"A",{href:!0});var lzr=s(SB);lio=r(lzr,"DeiTModel"),lzr.forEach(t),iio=r(fEe," (DeiT model)"),fEe.forEach(t),dio=i(M),_p=n(M,"LI",{});var mEe=s(_p);sre=n(mEe,"STRONG",{});var izr=s(sre);cio=r(izr,"detr"),izr.forEach(t),fio=r(mEe," \u2014 "),RB=n(mEe,"A",{href:!0});var dzr=s(RB);mio=r(dzr,"DetrModel"),dzr.forEach(t),gio=r(mEe," (DETR model)"),mEe.forEach(t),hio=i(M),up=n(M,"LI",{});var gEe=s(up);lre=n(gEe,"STRONG",{});var czr=s(lre);pio=r(czr,"distilbert"),czr.forEach(t),_io=r(gEe," \u2014 "),BB=n(gEe,"A",{href:!0});var fzr=s(BB);uio=r(fzr,"DistilBertModel"),fzr.forEach(t),bio=r(gEe," (DistilBERT model)"),gEe.forEach(t),Fio=i(M),bp=n(M,"LI",{});var hEe=s(bp);ire=n(hEe,"STRONG",{});var mzr=s(ire);vio=r(mzr,"dpr"),mzr.forEach(t),Tio=r(hEe," \u2014 "),PB=n(hEe,"A",{href:!0});var gzr=s(PB);Mio=r(gzr,"DPRQuestionEncoder"),gzr.forEach(t),Eio=r(hEe," (DPR model)"),hEe.forEach(t),Cio=i(M),Fp=n(M,"LI",{});var pEe=s(Fp);dre=n(pEe,"STRONG",{});var hzr=s(dre);wio=r(hzr,"dpt"),hzr.forEach(t),Aio=r(pEe," \u2014 "),$B=n(pEe,"A",{href:!0});var pzr=s($B);yio=r(pzr,"DPTModel"),pzr.forEach(t),Lio=r(pEe," (DPT model)"),pEe.forEach(t),xio=i(M),vp=n(M,"LI",{});var _Ee=s(vp);cre=n(_Ee,"STRONG",{});var _zr=s(cre);kio=r(_zr,"electra"),_zr.forEach(t),Sio=r(_Ee," \u2014 "),IB=n(_Ee,"A",{href:!0});var uzr=s(IB);Rio=r(uzr,"ElectraModel"),uzr.forEach(t),Bio=r(_Ee," (ELECTRA model)"),_Ee.forEach(t),Pio=i(M),Tp=n(M,"LI",{});var uEe=s(Tp);fre=n(uEe,"STRONG",{});var bzr=s(fre);$io=r(bzr,"flaubert"),bzr.forEach(t),Iio=r(uEe," \u2014 "),qB=n(uEe,"A",{href:!0});var Fzr=s(qB);qio=r(Fzr,"FlaubertModel"),Fzr.forEach(t),Nio=r(uEe," (FlauBERT model)"),uEe.forEach(t),jio=i(M),Mp=n(M,"LI",{});var bEe=s(Mp);mre=n(bEe,"STRONG",{});var vzr=s(mre);Dio=r(vzr,"fnet"),vzr.forEach(t),Gio=r(bEe," \u2014 "),NB=n(bEe,"A",{href:!0});var Tzr=s(NB);Oio=r(Tzr,"FNetModel"),Tzr.forEach(t),Vio=r(bEe," (FNet model)"),bEe.forEach(t),Xio=i(M),Ep=n(M,"LI",{});var FEe=s(Ep);gre=n(FEe,"STRONG",{});var Mzr=s(gre);zio=r(Mzr,"fsmt"),Mzr.forEach(t),Qio=r(FEe," \u2014 "),jB=n(FEe,"A",{href:!0});var Ezr=s(jB);Wio=r(Ezr,"FSMTModel"),Ezr.forEach(t),Hio=r(FEe," (FairSeq Machine-Translation model)"),FEe.forEach(t),Uio=i(M),js=n(M,"LI",{});var _7=s(js);hre=n(_7,"STRONG",{});var Czr=s(hre);Jio=r(Czr,"funnel"),Czr.forEach(t),Yio=r(_7," \u2014 "),DB=n(_7,"A",{href:!0});var wzr=s(DB);Kio=r(wzr,"FunnelModel"),wzr.forEach(t),Zio=r(_7," or "),GB=n(_7,"A",{href:!0});var Azr=s(GB);edo=r(Azr,"FunnelBaseModel"),Azr.forEach(t),odo=r(_7," (Funnel Transformer model)"),_7.forEach(t),rdo=i(M),Cp=n(M,"LI",{});var vEe=s(Cp);pre=n(vEe,"STRONG",{});var yzr=s(pre);tdo=r(yzr,"glpn"),yzr.forEach(t),ado=r(vEe," \u2014 "),OB=n(vEe,"A",{href:!0});var Lzr=s(OB);ndo=r(Lzr,"GLPNModel"),Lzr.forEach(t),sdo=r(vEe," (GLPN model)"),vEe.forEach(t),ldo=i(M),wp=n(M,"LI",{});var TEe=s(wp);_re=n(TEe,"STRONG",{});var xzr=s(_re);ido=r(xzr,"gpt2"),xzr.forEach(t),ddo=r(TEe," \u2014 "),VB=n(TEe,"A",{href:!0});var kzr=s(VB);cdo=r(kzr,"GPT2Model"),kzr.forEach(t),fdo=r(TEe," (OpenAI GPT-2 model)"),TEe.forEach(t),mdo=i(M),Ap=n(M,"LI",{});var MEe=s(Ap);ure=n(MEe,"STRONG",{});var Szr=s(ure);gdo=r(Szr,"gpt_neo"),Szr.forEach(t),hdo=r(MEe," \u2014 "),XB=n(MEe,"A",{href:!0});var Rzr=s(XB);pdo=r(Rzr,"GPTNeoModel"),Rzr.forEach(t),_do=r(MEe," (GPT Neo model)"),MEe.forEach(t),udo=i(M),yp=n(M,"LI",{});var EEe=s(yp);bre=n(EEe,"STRONG",{});var Bzr=s(bre);bdo=r(Bzr,"gpt_neox"),Bzr.forEach(t),Fdo=r(EEe," \u2014 "),Fre=n(EEe,"CODE",{});var Pzr=s(Fre);vdo=r(Pzr,"GPTNeoXModel"),Pzr.forEach(t),Tdo=r(EEe," (GPTNeoX model)"),EEe.forEach(t),Mdo=i(M),Lp=n(M,"LI",{});var CEe=s(Lp);vre=n(CEe,"STRONG",{});var $zr=s(vre);Edo=r($zr,"gptj"),$zr.forEach(t),Cdo=r(CEe," \u2014 "),zB=n(CEe,"A",{href:!0});var Izr=s(zB);wdo=r(Izr,"GPTJModel"),Izr.forEach(t),Ado=r(CEe," (GPT-J model)"),CEe.forEach(t),ydo=i(M),xp=n(M,"LI",{});var wEe=s(xp);Tre=n(wEe,"STRONG",{});var qzr=s(Tre);Ldo=r(qzr,"hubert"),qzr.forEach(t),xdo=r(wEe," \u2014 "),QB=n(wEe,"A",{href:!0});var Nzr=s(QB);kdo=r(Nzr,"HubertModel"),Nzr.forEach(t),Sdo=r(wEe," (Hubert model)"),wEe.forEach(t),Rdo=i(M),kp=n(M,"LI",{});var AEe=s(kp);Mre=n(AEe,"STRONG",{});var jzr=s(Mre);Bdo=r(jzr,"ibert"),jzr.forEach(t),Pdo=r(AEe," \u2014 "),WB=n(AEe,"A",{href:!0});var Dzr=s(WB);$do=r(Dzr,"IBertModel"),Dzr.forEach(t),Ido=r(AEe," (I-BERT model)"),AEe.forEach(t),qdo=i(M),Sp=n(M,"LI",{});var yEe=s(Sp);Ere=n(yEe,"STRONG",{});var Gzr=s(Ere);Ndo=r(Gzr,"imagegpt"),Gzr.forEach(t),jdo=r(yEe," \u2014 "),HB=n(yEe,"A",{href:!0});var Ozr=s(HB);Ddo=r(Ozr,"ImageGPTModel"),Ozr.forEach(t),Gdo=r(yEe," (ImageGPT model)"),yEe.forEach(t),Odo=i(M),Rp=n(M,"LI",{});var LEe=s(Rp);Cre=n(LEe,"STRONG",{});var Vzr=s(Cre);Vdo=r(Vzr,"layoutlm"),Vzr.forEach(t),Xdo=r(LEe," \u2014 "),UB=n(LEe,"A",{href:!0});var Xzr=s(UB);zdo=r(Xzr,"LayoutLMModel"),Xzr.forEach(t),Qdo=r(LEe," (LayoutLM model)"),LEe.forEach(t),Wdo=i(M),Bp=n(M,"LI",{});var xEe=s(Bp);wre=n(xEe,"STRONG",{});var zzr=s(wre);Hdo=r(zzr,"layoutlmv2"),zzr.forEach(t),Udo=r(xEe," \u2014 "),JB=n(xEe,"A",{href:!0});var Qzr=s(JB);Jdo=r(Qzr,"LayoutLMv2Model"),Qzr.forEach(t),Ydo=r(xEe," (LayoutLMv2 model)"),xEe.forEach(t),Kdo=i(M),Pp=n(M,"LI",{});var kEe=s(Pp);Are=n(kEe,"STRONG",{});var Wzr=s(Are);Zdo=r(Wzr,"led"),Wzr.forEach(t),eco=r(kEe," \u2014 "),YB=n(kEe,"A",{href:!0});var Hzr=s(YB);oco=r(Hzr,"LEDModel"),Hzr.forEach(t),rco=r(kEe," (LED model)"),kEe.forEach(t),tco=i(M),$p=n(M,"LI",{});var SEe=s($p);yre=n(SEe,"STRONG",{});var Uzr=s(yre);aco=r(Uzr,"longformer"),Uzr.forEach(t),nco=r(SEe," \u2014 "),KB=n(SEe,"A",{href:!0});var Jzr=s(KB);sco=r(Jzr,"LongformerModel"),Jzr.forEach(t),lco=r(SEe," (Longformer model)"),SEe.forEach(t),ico=i(M),Ip=n(M,"LI",{});var REe=s(Ip);Lre=n(REe,"STRONG",{});var Yzr=s(Lre);dco=r(Yzr,"luke"),Yzr.forEach(t),cco=r(REe," \u2014 "),ZB=n(REe,"A",{href:!0});var Kzr=s(ZB);fco=r(Kzr,"LukeModel"),Kzr.forEach(t),mco=r(REe," (LUKE model)"),REe.forEach(t),gco=i(M),qp=n(M,"LI",{});var BEe=s(qp);xre=n(BEe,"STRONG",{});var Zzr=s(xre);hco=r(Zzr,"lxmert"),Zzr.forEach(t),pco=r(BEe," \u2014 "),eP=n(BEe,"A",{href:!0});var eQr=s(eP);_co=r(eQr,"LxmertModel"),eQr.forEach(t),uco=r(BEe," (LXMERT model)"),BEe.forEach(t),bco=i(M),Np=n(M,"LI",{});var PEe=s(Np);kre=n(PEe,"STRONG",{});var oQr=s(kre);Fco=r(oQr,"m2m_100"),oQr.forEach(t),vco=r(PEe," \u2014 "),oP=n(PEe,"A",{href:!0});var rQr=s(oP);Tco=r(rQr,"M2M100Model"),rQr.forEach(t),Mco=r(PEe," (M2M100 model)"),PEe.forEach(t),Eco=i(M),jp=n(M,"LI",{});var $Ee=s(jp);Sre=n($Ee,"STRONG",{});var tQr=s(Sre);Cco=r(tQr,"marian"),tQr.forEach(t),wco=r($Ee," \u2014 "),rP=n($Ee,"A",{href:!0});var aQr=s(rP);Aco=r(aQr,"MarianModel"),aQr.forEach(t),yco=r($Ee," (Marian model)"),$Ee.forEach(t),Lco=i(M),Dp=n(M,"LI",{});var IEe=s(Dp);Rre=n(IEe,"STRONG",{});var nQr=s(Rre);xco=r(nQr,"maskformer"),nQr.forEach(t),kco=r(IEe," \u2014 "),tP=n(IEe,"A",{href:!0});var sQr=s(tP);Sco=r(sQr,"MaskFormerModel"),sQr.forEach(t),Rco=r(IEe," (MaskFormer model)"),IEe.forEach(t),Bco=i(M),Gp=n(M,"LI",{});var qEe=s(Gp);Bre=n(qEe,"STRONG",{});var lQr=s(Bre);Pco=r(lQr,"mbart"),lQr.forEach(t),$co=r(qEe," \u2014 "),aP=n(qEe,"A",{href:!0});var iQr=s(aP);Ico=r(iQr,"MBartModel"),iQr.forEach(t),qco=r(qEe," (mBART model)"),qEe.forEach(t),Nco=i(M),Op=n(M,"LI",{});var NEe=s(Op);Pre=n(NEe,"STRONG",{});var dQr=s(Pre);jco=r(dQr,"megatron-bert"),dQr.forEach(t),Dco=r(NEe," \u2014 "),nP=n(NEe,"A",{href:!0});var cQr=s(nP);Gco=r(cQr,"MegatronBertModel"),cQr.forEach(t),Oco=r(NEe," (MegatronBert model)"),NEe.forEach(t),Vco=i(M),Vp=n(M,"LI",{});var jEe=s(Vp);$re=n(jEe,"STRONG",{});var fQr=s($re);Xco=r(fQr,"mobilebert"),fQr.forEach(t),zco=r(jEe," \u2014 "),sP=n(jEe,"A",{href:!0});var mQr=s(sP);Qco=r(mQr,"MobileBertModel"),mQr.forEach(t),Wco=r(jEe," (MobileBERT model)"),jEe.forEach(t),Hco=i(M),Xp=n(M,"LI",{});var DEe=s(Xp);Ire=n(DEe,"STRONG",{});var gQr=s(Ire);Uco=r(gQr,"mpnet"),gQr.forEach(t),Jco=r(DEe," \u2014 "),lP=n(DEe,"A",{href:!0});var hQr=s(lP);Yco=r(hQr,"MPNetModel"),hQr.forEach(t),Kco=r(DEe," (MPNet model)"),DEe.forEach(t),Zco=i(M),zp=n(M,"LI",{});var GEe=s(zp);qre=n(GEe,"STRONG",{});var pQr=s(qre);efo=r(pQr,"mt5"),pQr.forEach(t),ofo=r(GEe," \u2014 "),iP=n(GEe,"A",{href:!0});var _Qr=s(iP);rfo=r(_Qr,"MT5Model"),_Qr.forEach(t),tfo=r(GEe," (mT5 model)"),GEe.forEach(t),afo=i(M),Qp=n(M,"LI",{});var OEe=s(Qp);Nre=n(OEe,"STRONG",{});var uQr=s(Nre);nfo=r(uQr,"nystromformer"),uQr.forEach(t),sfo=r(OEe," \u2014 "),dP=n(OEe,"A",{href:!0});var bQr=s(dP);lfo=r(bQr,"NystromformerModel"),bQr.forEach(t),ifo=r(OEe," (Nystromformer model)"),OEe.forEach(t),dfo=i(M),Wp=n(M,"LI",{});var VEe=s(Wp);jre=n(VEe,"STRONG",{});var FQr=s(jre);cfo=r(FQr,"openai-gpt"),FQr.forEach(t),ffo=r(VEe," \u2014 "),cP=n(VEe,"A",{href:!0});var vQr=s(cP);mfo=r(vQr,"OpenAIGPTModel"),vQr.forEach(t),gfo=r(VEe," (OpenAI GPT model)"),VEe.forEach(t),hfo=i(M),Hp=n(M,"LI",{});var XEe=s(Hp);Dre=n(XEe,"STRONG",{});var TQr=s(Dre);pfo=r(TQr,"pegasus"),TQr.forEach(t),_fo=r(XEe," \u2014 "),fP=n(XEe,"A",{href:!0});var MQr=s(fP);ufo=r(MQr,"PegasusModel"),MQr.forEach(t),bfo=r(XEe," (Pegasus model)"),XEe.forEach(t),Ffo=i(M),Up=n(M,"LI",{});var zEe=s(Up);Gre=n(zEe,"STRONG",{});var EQr=s(Gre);vfo=r(EQr,"perceiver"),EQr.forEach(t),Tfo=r(zEe," \u2014 "),mP=n(zEe,"A",{href:!0});var CQr=s(mP);Mfo=r(CQr,"PerceiverModel"),CQr.forEach(t),Efo=r(zEe," (Perceiver model)"),zEe.forEach(t),Cfo=i(M),Jp=n(M,"LI",{});var QEe=s(Jp);Ore=n(QEe,"STRONG",{});var wQr=s(Ore);wfo=r(wQr,"plbart"),wQr.forEach(t),Afo=r(QEe," \u2014 "),gP=n(QEe,"A",{href:!0});var AQr=s(gP);yfo=r(AQr,"PLBartModel"),AQr.forEach(t),Lfo=r(QEe," (PLBart model)"),QEe.forEach(t),xfo=i(M),Yp=n(M,"LI",{});var WEe=s(Yp);Vre=n(WEe,"STRONG",{});var yQr=s(Vre);kfo=r(yQr,"poolformer"),yQr.forEach(t),Sfo=r(WEe," \u2014 "),hP=n(WEe,"A",{href:!0});var LQr=s(hP);Rfo=r(LQr,"PoolFormerModel"),LQr.forEach(t),Bfo=r(WEe," (PoolFormer model)"),WEe.forEach(t),Pfo=i(M),Kp=n(M,"LI",{});var HEe=s(Kp);Xre=n(HEe,"STRONG",{});var xQr=s(Xre);$fo=r(xQr,"prophetnet"),xQr.forEach(t),Ifo=r(HEe," \u2014 "),pP=n(HEe,"A",{href:!0});var kQr=s(pP);qfo=r(kQr,"ProphetNetModel"),kQr.forEach(t),Nfo=r(HEe," (ProphetNet model)"),HEe.forEach(t),jfo=i(M),Zp=n(M,"LI",{});var UEe=s(Zp);zre=n(UEe,"STRONG",{});var SQr=s(zre);Dfo=r(SQr,"qdqbert"),SQr.forEach(t),Gfo=r(UEe," \u2014 "),_P=n(UEe,"A",{href:!0});var RQr=s(_P);Ofo=r(RQr,"QDQBertModel"),RQr.forEach(t),Vfo=r(UEe," (QDQBert model)"),UEe.forEach(t),Xfo=i(M),e_=n(M,"LI",{});var JEe=s(e_);Qre=n(JEe,"STRONG",{});var BQr=s(Qre);zfo=r(BQr,"reformer"),BQr.forEach(t),Qfo=r(JEe," \u2014 "),uP=n(JEe,"A",{href:!0});var PQr=s(uP);Wfo=r(PQr,"ReformerModel"),PQr.forEach(t),Hfo=r(JEe," (Reformer model)"),JEe.forEach(t),Ufo=i(M),o_=n(M,"LI",{});var YEe=s(o_);Wre=n(YEe,"STRONG",{});var $Qr=s(Wre);Jfo=r($Qr,"regnet"),$Qr.forEach(t),Yfo=r(YEe," \u2014 "),bP=n(YEe,"A",{href:!0});var IQr=s(bP);Kfo=r(IQr,"RegNetModel"),IQr.forEach(t),Zfo=r(YEe," (RegNet model)"),YEe.forEach(t),emo=i(M),r_=n(M,"LI",{});var KEe=s(r_);Hre=n(KEe,"STRONG",{});var qQr=s(Hre);omo=r(qQr,"rembert"),qQr.forEach(t),rmo=r(KEe," \u2014 "),FP=n(KEe,"A",{href:!0});var NQr=s(FP);tmo=r(NQr,"RemBertModel"),NQr.forEach(t),amo=r(KEe," (RemBERT model)"),KEe.forEach(t),nmo=i(M),t_=n(M,"LI",{});var ZEe=s(t_);Ure=n(ZEe,"STRONG",{});var jQr=s(Ure);smo=r(jQr,"resnet"),jQr.forEach(t),lmo=r(ZEe," \u2014 "),vP=n(ZEe,"A",{href:!0});var DQr=s(vP);imo=r(DQr,"ResNetModel"),DQr.forEach(t),dmo=r(ZEe," (ResNet model)"),ZEe.forEach(t),cmo=i(M),a_=n(M,"LI",{});var eCe=s(a_);Jre=n(eCe,"STRONG",{});var GQr=s(Jre);fmo=r(GQr,"retribert"),GQr.forEach(t),mmo=r(eCe," \u2014 "),TP=n(eCe,"A",{href:!0});var OQr=s(TP);gmo=r(OQr,"RetriBertModel"),OQr.forEach(t),hmo=r(eCe," (RetriBERT model)"),eCe.forEach(t),pmo=i(M),n_=n(M,"LI",{});var oCe=s(n_);Yre=n(oCe,"STRONG",{});var VQr=s(Yre);_mo=r(VQr,"roberta"),VQr.forEach(t),umo=r(oCe," \u2014 "),MP=n(oCe,"A",{href:!0});var XQr=s(MP);bmo=r(XQr,"RobertaModel"),XQr.forEach(t),Fmo=r(oCe," (RoBERTa model)"),oCe.forEach(t),vmo=i(M),s_=n(M,"LI",{});var rCe=s(s_);Kre=n(rCe,"STRONG",{});var zQr=s(Kre);Tmo=r(zQr,"roformer"),zQr.forEach(t),Mmo=r(rCe," \u2014 "),EP=n(rCe,"A",{href:!0});var QQr=s(EP);Emo=r(QQr,"RoFormerModel"),QQr.forEach(t),Cmo=r(rCe," (RoFormer model)"),rCe.forEach(t),wmo=i(M),l_=n(M,"LI",{});var tCe=s(l_);Zre=n(tCe,"STRONG",{});var WQr=s(Zre);Amo=r(WQr,"segformer"),WQr.forEach(t),ymo=r(tCe," \u2014 "),CP=n(tCe,"A",{href:!0});var HQr=s(CP);Lmo=r(HQr,"SegformerModel"),HQr.forEach(t),xmo=r(tCe," (SegFormer model)"),tCe.forEach(t),kmo=i(M),i_=n(M,"LI",{});var aCe=s(i_);ete=n(aCe,"STRONG",{});var UQr=s(ete);Smo=r(UQr,"sew"),UQr.forEach(t),Rmo=r(aCe," \u2014 "),wP=n(aCe,"A",{href:!0});var JQr=s(wP);Bmo=r(JQr,"SEWModel"),JQr.forEach(t),Pmo=r(aCe," (SEW model)"),aCe.forEach(t),$mo=i(M),d_=n(M,"LI",{});var nCe=s(d_);ote=n(nCe,"STRONG",{});var YQr=s(ote);Imo=r(YQr,"sew-d"),YQr.forEach(t),qmo=r(nCe," \u2014 "),AP=n(nCe,"A",{href:!0});var KQr=s(AP);Nmo=r(KQr,"SEWDModel"),KQr.forEach(t),jmo=r(nCe," (SEW-D model)"),nCe.forEach(t),Dmo=i(M),c_=n(M,"LI",{});var sCe=s(c_);rte=n(sCe,"STRONG",{});var ZQr=s(rte);Gmo=r(ZQr,"speech_to_text"),ZQr.forEach(t),Omo=r(sCe," \u2014 "),yP=n(sCe,"A",{href:!0});var eWr=s(yP);Vmo=r(eWr,"Speech2TextModel"),eWr.forEach(t),Xmo=r(sCe," (Speech2Text model)"),sCe.forEach(t),zmo=i(M),f_=n(M,"LI",{});var lCe=s(f_);tte=n(lCe,"STRONG",{});var oWr=s(tte);Qmo=r(oWr,"splinter"),oWr.forEach(t),Wmo=r(lCe," \u2014 "),LP=n(lCe,"A",{href:!0});var rWr=s(LP);Hmo=r(rWr,"SplinterModel"),rWr.forEach(t),Umo=r(lCe," (Splinter model)"),lCe.forEach(t),Jmo=i(M),m_=n(M,"LI",{});var iCe=s(m_);ate=n(iCe,"STRONG",{});var tWr=s(ate);Ymo=r(tWr,"squeezebert"),tWr.forEach(t),Kmo=r(iCe," \u2014 "),xP=n(iCe,"A",{href:!0});var aWr=s(xP);Zmo=r(aWr,"SqueezeBertModel"),aWr.forEach(t),ego=r(iCe," (SqueezeBERT model)"),iCe.forEach(t),ogo=i(M),g_=n(M,"LI",{});var dCe=s(g_);nte=n(dCe,"STRONG",{});var nWr=s(nte);rgo=r(nWr,"swin"),nWr.forEach(t),tgo=r(dCe," \u2014 "),kP=n(dCe,"A",{href:!0});var sWr=s(kP);ago=r(sWr,"SwinModel"),sWr.forEach(t),ngo=r(dCe," (Swin model)"),dCe.forEach(t),sgo=i(M),h_=n(M,"LI",{});var cCe=s(h_);ste=n(cCe,"STRONG",{});var lWr=s(ste);lgo=r(lWr,"t5"),lWr.forEach(t),igo=r(cCe," \u2014 "),SP=n(cCe,"A",{href:!0});var iWr=s(SP);dgo=r(iWr,"T5Model"),iWr.forEach(t),cgo=r(cCe," (T5 model)"),cCe.forEach(t),fgo=i(M),p_=n(M,"LI",{});var fCe=s(p_);lte=n(fCe,"STRONG",{});var dWr=s(lte);mgo=r(dWr,"tapas"),dWr.forEach(t),ggo=r(fCe," \u2014 "),RP=n(fCe,"A",{href:!0});var cWr=s(RP);hgo=r(cWr,"TapasModel"),cWr.forEach(t),pgo=r(fCe," (TAPAS model)"),fCe.forEach(t),_go=i(M),__=n(M,"LI",{});var mCe=s(__);ite=n(mCe,"STRONG",{});var fWr=s(ite);ugo=r(fWr,"transfo-xl"),fWr.forEach(t),bgo=r(mCe," \u2014 "),BP=n(mCe,"A",{href:!0});var mWr=s(BP);Fgo=r(mWr,"TransfoXLModel"),mWr.forEach(t),vgo=r(mCe," (Transformer-XL model)"),mCe.forEach(t),Tgo=i(M),u_=n(M,"LI",{});var gCe=s(u_);dte=n(gCe,"STRONG",{});var gWr=s(dte);Mgo=r(gWr,"unispeech"),gWr.forEach(t),Ego=r(gCe," \u2014 "),PP=n(gCe,"A",{href:!0});var hWr=s(PP);Cgo=r(hWr,"UniSpeechModel"),hWr.forEach(t),wgo=r(gCe," (UniSpeech model)"),gCe.forEach(t),Ago=i(M),b_=n(M,"LI",{});var hCe=s(b_);cte=n(hCe,"STRONG",{});var pWr=s(cte);ygo=r(pWr,"unispeech-sat"),pWr.forEach(t),Lgo=r(hCe," \u2014 "),$P=n(hCe,"A",{href:!0});var _Wr=s($P);xgo=r(_Wr,"UniSpeechSatModel"),_Wr.forEach(t),kgo=r(hCe," (UniSpeechSat model)"),hCe.forEach(t),Sgo=i(M),F_=n(M,"LI",{});var pCe=s(F_);fte=n(pCe,"STRONG",{});var uWr=s(fte);Rgo=r(uWr,"van"),uWr.forEach(t),Bgo=r(pCe," \u2014 "),IP=n(pCe,"A",{href:!0});var bWr=s(IP);Pgo=r(bWr,"VanModel"),bWr.forEach(t),$go=r(pCe," (VAN model)"),pCe.forEach(t),Igo=i(M),v_=n(M,"LI",{});var _Ce=s(v_);mte=n(_Ce,"STRONG",{});var FWr=s(mte);qgo=r(FWr,"vilt"),FWr.forEach(t),Ngo=r(_Ce," \u2014 "),qP=n(_Ce,"A",{href:!0});var vWr=s(qP);jgo=r(vWr,"ViltModel"),vWr.forEach(t),Dgo=r(_Ce," (ViLT model)"),_Ce.forEach(t),Ggo=i(M),T_=n(M,"LI",{});var uCe=s(T_);gte=n(uCe,"STRONG",{});var TWr=s(gte);Ogo=r(TWr,"vision-text-dual-encoder"),TWr.forEach(t),Vgo=r(uCe," \u2014 "),NP=n(uCe,"A",{href:!0});var MWr=s(NP);Xgo=r(MWr,"VisionTextDualEncoderModel"),MWr.forEach(t),zgo=r(uCe," (VisionTextDualEncoder model)"),uCe.forEach(t),Qgo=i(M),M_=n(M,"LI",{});var bCe=s(M_);hte=n(bCe,"STRONG",{});var EWr=s(hte);Wgo=r(EWr,"visual_bert"),EWr.forEach(t),Hgo=r(bCe," \u2014 "),jP=n(bCe,"A",{href:!0});var CWr=s(jP);Ugo=r(CWr,"VisualBertModel"),CWr.forEach(t),Jgo=r(bCe," (VisualBert model)"),bCe.forEach(t),Ygo=i(M),E_=n(M,"LI",{});var FCe=s(E_);pte=n(FCe,"STRONG",{});var wWr=s(pte);Kgo=r(wWr,"vit"),wWr.forEach(t),Zgo=r(FCe," \u2014 "),DP=n(FCe,"A",{href:!0});var AWr=s(DP);eho=r(AWr,"ViTModel"),AWr.forEach(t),oho=r(FCe," (ViT model)"),FCe.forEach(t),rho=i(M),C_=n(M,"LI",{});var vCe=s(C_);_te=n(vCe,"STRONG",{});var yWr=s(_te);tho=r(yWr,"vit_mae"),yWr.forEach(t),aho=r(vCe," \u2014 "),GP=n(vCe,"A",{href:!0});var LWr=s(GP);nho=r(LWr,"ViTMAEModel"),LWr.forEach(t),sho=r(vCe," (ViTMAE model)"),vCe.forEach(t),lho=i(M),w_=n(M,"LI",{});var TCe=s(w_);ute=n(TCe,"STRONG",{});var xWr=s(ute);iho=r(xWr,"wav2vec2"),xWr.forEach(t),dho=r(TCe," \u2014 "),OP=n(TCe,"A",{href:!0});var kWr=s(OP);cho=r(kWr,"Wav2Vec2Model"),kWr.forEach(t),fho=r(TCe," (Wav2Vec2 model)"),TCe.forEach(t),mho=i(M),A_=n(M,"LI",{});var MCe=s(A_);bte=n(MCe,"STRONG",{});var SWr=s(bte);gho=r(SWr,"wavlm"),SWr.forEach(t),hho=r(MCe," \u2014 "),VP=n(MCe,"A",{href:!0});var RWr=s(VP);pho=r(RWr,"WavLMModel"),RWr.forEach(t),_ho=r(MCe," (WavLM model)"),MCe.forEach(t),uho=i(M),y_=n(M,"LI",{});var ECe=s(y_);Fte=n(ECe,"STRONG",{});var BWr=s(Fte);bho=r(BWr,"xglm"),BWr.forEach(t),Fho=r(ECe," \u2014 "),XP=n(ECe,"A",{href:!0});var PWr=s(XP);vho=r(PWr,"XGLMModel"),PWr.forEach(t),Tho=r(ECe," (XGLM model)"),ECe.forEach(t),Mho=i(M),L_=n(M,"LI",{});var CCe=s(L_);vte=n(CCe,"STRONG",{});var $Wr=s(vte);Eho=r($Wr,"xlm"),$Wr.forEach(t),Cho=r(CCe," \u2014 "),zP=n(CCe,"A",{href:!0});var IWr=s(zP);who=r(IWr,"XLMModel"),IWr.forEach(t),Aho=r(CCe," (XLM model)"),CCe.forEach(t),yho=i(M),x_=n(M,"LI",{});var wCe=s(x_);Tte=n(wCe,"STRONG",{});var qWr=s(Tte);Lho=r(qWr,"xlm-prophetnet"),qWr.forEach(t),xho=r(wCe," \u2014 "),QP=n(wCe,"A",{href:!0});var NWr=s(QP);kho=r(NWr,"XLMProphetNetModel"),NWr.forEach(t),Sho=r(wCe," (XLMProphetNet model)"),wCe.forEach(t),Rho=i(M),k_=n(M,"LI",{});var ACe=s(k_);Mte=n(ACe,"STRONG",{});var jWr=s(Mte);Bho=r(jWr,"xlm-roberta"),jWr.forEach(t),Pho=r(ACe," \u2014 "),WP=n(ACe,"A",{href:!0});var DWr=s(WP);$ho=r(DWr,"XLMRobertaModel"),DWr.forEach(t),Iho=r(ACe," (XLM-RoBERTa model)"),ACe.forEach(t),qho=i(M),S_=n(M,"LI",{});var yCe=s(S_);Ete=n(yCe,"STRONG",{});var GWr=s(Ete);Nho=r(GWr,"xlm-roberta-xl"),GWr.forEach(t),jho=r(yCe," \u2014 "),HP=n(yCe,"A",{href:!0});var OWr=s(HP);Dho=r(OWr,"XLMRobertaXLModel"),OWr.forEach(t),Gho=r(yCe," (XLM-RoBERTa-XL model)"),yCe.forEach(t),Oho=i(M),R_=n(M,"LI",{});var LCe=s(R_);Cte=n(LCe,"STRONG",{});var VWr=s(Cte);Vho=r(VWr,"xlnet"),VWr.forEach(t),Xho=r(LCe," \u2014 "),UP=n(LCe,"A",{href:!0});var XWr=s(UP);zho=r(XWr,"XLNetModel"),XWr.forEach(t),Qho=r(LCe," (XLNet model)"),LCe.forEach(t),Who=i(M),B_=n(M,"LI",{});var xCe=s(B_);wte=n(xCe,"STRONG",{});var zWr=s(wte);Hho=r(zWr,"yoso"),zWr.forEach(t),Uho=r(xCe," \u2014 "),JP=n(xCe,"A",{href:!0});var QWr=s(JP);Jho=r(QWr,"YosoModel"),QWr.forEach(t),Yho=r(xCe," (YOSO model)"),xCe.forEach(t),M.forEach(t),Kho=i(Dt),P_=n(Dt,"P",{});var kCe=s(P_);Zho=r(kCe,"The model is set in evaluation mode by default using "),Ate=n(kCe,"CODE",{});var WWr=s(Ate);epo=r(WWr,"model.eval()"),WWr.forEach(t),opo=r(kCe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),yte=n(kCe,"CODE",{});var HWr=s(yte);rpo=r(HWr,"model.train()"),HWr.forEach(t),kCe.forEach(t),tpo=i(Dt),Lte=n(Dt,"P",{});var UWr=s(Lte);apo=r(UWr,"Examples:"),UWr.forEach(t),npo=i(Dt),m(g3.$$.fragment,Dt),Dt.forEach(t),Qs.forEach(t),QRe=i(c),Zi=n(c,"H2",{class:!0});var o$e=s(Zi);$_=n(o$e,"A",{id:!0,class:!0,href:!0});var JWr=s($_);xte=n(JWr,"SPAN",{});var YWr=s(xte);m(h3.$$.fragment,YWr),YWr.forEach(t),JWr.forEach(t),spo=i(o$e),kte=n(o$e,"SPAN",{});var KWr=s(kte);lpo=r(KWr,"AutoModelForPreTraining"),KWr.forEach(t),o$e.forEach(t),WRe=i(c),Yo=n(c,"DIV",{class:!0});var Hs=s(Yo);m(p3.$$.fragment,Hs),ipo=i(Hs),ed=n(Hs,"P",{});var gU=s(ed);dpo=r(gU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),YP=n(gU,"A",{href:!0});var ZWr=s(YP);cpo=r(ZWr,"from_pretrained()"),ZWr.forEach(t),fpo=r(gU," class method or the "),KP=n(gU,"A",{href:!0});var eHr=s(KP);mpo=r(eHr,"from_config()"),eHr.forEach(t),gpo=r(gU,` class
method.`),gU.forEach(t),hpo=i(Hs),_3=n(Hs,"P",{});var r$e=s(_3);ppo=r(r$e,"This class cannot be instantiated directly using "),Ste=n(r$e,"CODE",{});var oHr=s(Ste);_po=r(oHr,"__init__()"),oHr.forEach(t),upo=r(r$e," (throws an error)."),r$e.forEach(t),bpo=i(Hs),zr=n(Hs,"DIV",{class:!0});var Us=s(zr);m(u3.$$.fragment,Us),Fpo=i(Us),Rte=n(Us,"P",{});var rHr=s(Rte);vpo=r(rHr,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),rHr.forEach(t),Tpo=i(Us),od=n(Us,"P",{});var hU=s(od);Mpo=r(hU,`Note:
Loading a model from its configuration file does `),Bte=n(hU,"STRONG",{});var tHr=s(Bte);Epo=r(tHr,"not"),tHr.forEach(t),Cpo=r(hU,` load the model weights. It only affects the
model\u2019s configuration. Use `),ZP=n(hU,"A",{href:!0});var aHr=s(ZP);wpo=r(aHr,"from_pretrained()"),aHr.forEach(t),Apo=r(hU," to load the model weights."),hU.forEach(t),ypo=i(Us),Pte=n(Us,"P",{});var nHr=s(Pte);Lpo=r(nHr,"Examples:"),nHr.forEach(t),xpo=i(Us),m(b3.$$.fragment,Us),Us.forEach(t),kpo=i(Hs),Ne=n(Hs,"DIV",{class:!0});var Gt=s(Ne);m(F3.$$.fragment,Gt),Spo=i(Gt),$te=n(Gt,"P",{});var sHr=s($te);Rpo=r(sHr,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),sHr.forEach(t),Bpo=i(Gt),za=n(Gt,"P",{});var RE=s(za);Ppo=r(RE,"The model class to instantiate is selected based on the "),Ite=n(RE,"CODE",{});var lHr=s(Ite);$po=r(lHr,"model_type"),lHr.forEach(t),Ipo=r(RE,` property of the config object (either
passed as an argument or loaded from `),qte=n(RE,"CODE",{});var iHr=s(qte);qpo=r(iHr,"pretrained_model_name_or_path"),iHr.forEach(t),Npo=r(RE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nte=n(RE,"CODE",{});var dHr=s(Nte);jpo=r(dHr,"pretrained_model_name_or_path"),dHr.forEach(t),Dpo=r(RE,":"),RE.forEach(t),Gpo=i(Gt),R=n(Gt,"UL",{});var P=s(R);I_=n(P,"LI",{});var SCe=s(I_);jte=n(SCe,"STRONG",{});var cHr=s(jte);Opo=r(cHr,"albert"),cHr.forEach(t),Vpo=r(SCe," \u2014 "),e$=n(SCe,"A",{href:!0});var fHr=s(e$);Xpo=r(fHr,"AlbertForPreTraining"),fHr.forEach(t),zpo=r(SCe," (ALBERT model)"),SCe.forEach(t),Qpo=i(P),q_=n(P,"LI",{});var RCe=s(q_);Dte=n(RCe,"STRONG",{});var mHr=s(Dte);Wpo=r(mHr,"bart"),mHr.forEach(t),Hpo=r(RCe," \u2014 "),o$=n(RCe,"A",{href:!0});var gHr=s(o$);Upo=r(gHr,"BartForConditionalGeneration"),gHr.forEach(t),Jpo=r(RCe," (BART model)"),RCe.forEach(t),Ypo=i(P),N_=n(P,"LI",{});var BCe=s(N_);Gte=n(BCe,"STRONG",{});var hHr=s(Gte);Kpo=r(hHr,"bert"),hHr.forEach(t),Zpo=r(BCe," \u2014 "),r$=n(BCe,"A",{href:!0});var pHr=s(r$);e_o=r(pHr,"BertForPreTraining"),pHr.forEach(t),o_o=r(BCe," (BERT model)"),BCe.forEach(t),r_o=i(P),j_=n(P,"LI",{});var PCe=s(j_);Ote=n(PCe,"STRONG",{});var _Hr=s(Ote);t_o=r(_Hr,"big_bird"),_Hr.forEach(t),a_o=r(PCe," \u2014 "),t$=n(PCe,"A",{href:!0});var uHr=s(t$);n_o=r(uHr,"BigBirdForPreTraining"),uHr.forEach(t),s_o=r(PCe," (BigBird model)"),PCe.forEach(t),l_o=i(P),D_=n(P,"LI",{});var $Ce=s(D_);Vte=n($Ce,"STRONG",{});var bHr=s(Vte);i_o=r(bHr,"camembert"),bHr.forEach(t),d_o=r($Ce," \u2014 "),a$=n($Ce,"A",{href:!0});var FHr=s(a$);c_o=r(FHr,"CamembertForMaskedLM"),FHr.forEach(t),f_o=r($Ce," (CamemBERT model)"),$Ce.forEach(t),m_o=i(P),G_=n(P,"LI",{});var ICe=s(G_);Xte=n(ICe,"STRONG",{});var vHr=s(Xte);g_o=r(vHr,"ctrl"),vHr.forEach(t),h_o=r(ICe," \u2014 "),n$=n(ICe,"A",{href:!0});var THr=s(n$);p_o=r(THr,"CTRLLMHeadModel"),THr.forEach(t),__o=r(ICe," (CTRL model)"),ICe.forEach(t),u_o=i(P),O_=n(P,"LI",{});var qCe=s(O_);zte=n(qCe,"STRONG",{});var MHr=s(zte);b_o=r(MHr,"data2vec-text"),MHr.forEach(t),F_o=r(qCe," \u2014 "),s$=n(qCe,"A",{href:!0});var EHr=s(s$);v_o=r(EHr,"Data2VecTextForMaskedLM"),EHr.forEach(t),T_o=r(qCe," (Data2VecText model)"),qCe.forEach(t),M_o=i(P),V_=n(P,"LI",{});var NCe=s(V_);Qte=n(NCe,"STRONG",{});var CHr=s(Qte);E_o=r(CHr,"deberta"),CHr.forEach(t),C_o=r(NCe," \u2014 "),l$=n(NCe,"A",{href:!0});var wHr=s(l$);w_o=r(wHr,"DebertaForMaskedLM"),wHr.forEach(t),A_o=r(NCe," (DeBERTa model)"),NCe.forEach(t),y_o=i(P),X_=n(P,"LI",{});var jCe=s(X_);Wte=n(jCe,"STRONG",{});var AHr=s(Wte);L_o=r(AHr,"deberta-v2"),AHr.forEach(t),x_o=r(jCe," \u2014 "),i$=n(jCe,"A",{href:!0});var yHr=s(i$);k_o=r(yHr,"DebertaV2ForMaskedLM"),yHr.forEach(t),S_o=r(jCe," (DeBERTa-v2 model)"),jCe.forEach(t),R_o=i(P),z_=n(P,"LI",{});var DCe=s(z_);Hte=n(DCe,"STRONG",{});var LHr=s(Hte);B_o=r(LHr,"distilbert"),LHr.forEach(t),P_o=r(DCe," \u2014 "),d$=n(DCe,"A",{href:!0});var xHr=s(d$);$_o=r(xHr,"DistilBertForMaskedLM"),xHr.forEach(t),I_o=r(DCe," (DistilBERT model)"),DCe.forEach(t),q_o=i(P),Q_=n(P,"LI",{});var GCe=s(Q_);Ute=n(GCe,"STRONG",{});var kHr=s(Ute);N_o=r(kHr,"electra"),kHr.forEach(t),j_o=r(GCe," \u2014 "),c$=n(GCe,"A",{href:!0});var SHr=s(c$);D_o=r(SHr,"ElectraForPreTraining"),SHr.forEach(t),G_o=r(GCe," (ELECTRA model)"),GCe.forEach(t),O_o=i(P),W_=n(P,"LI",{});var OCe=s(W_);Jte=n(OCe,"STRONG",{});var RHr=s(Jte);V_o=r(RHr,"flaubert"),RHr.forEach(t),X_o=r(OCe," \u2014 "),f$=n(OCe,"A",{href:!0});var BHr=s(f$);z_o=r(BHr,"FlaubertWithLMHeadModel"),BHr.forEach(t),Q_o=r(OCe," (FlauBERT model)"),OCe.forEach(t),W_o=i(P),H_=n(P,"LI",{});var VCe=s(H_);Yte=n(VCe,"STRONG",{});var PHr=s(Yte);H_o=r(PHr,"fnet"),PHr.forEach(t),U_o=r(VCe," \u2014 "),m$=n(VCe,"A",{href:!0});var $Hr=s(m$);J_o=r($Hr,"FNetForPreTraining"),$Hr.forEach(t),Y_o=r(VCe," (FNet model)"),VCe.forEach(t),K_o=i(P),U_=n(P,"LI",{});var XCe=s(U_);Kte=n(XCe,"STRONG",{});var IHr=s(Kte);Z_o=r(IHr,"fsmt"),IHr.forEach(t),euo=r(XCe," \u2014 "),g$=n(XCe,"A",{href:!0});var qHr=s(g$);ouo=r(qHr,"FSMTForConditionalGeneration"),qHr.forEach(t),ruo=r(XCe," (FairSeq Machine-Translation model)"),XCe.forEach(t),tuo=i(P),J_=n(P,"LI",{});var zCe=s(J_);Zte=n(zCe,"STRONG",{});var NHr=s(Zte);auo=r(NHr,"funnel"),NHr.forEach(t),nuo=r(zCe," \u2014 "),h$=n(zCe,"A",{href:!0});var jHr=s(h$);suo=r(jHr,"FunnelForPreTraining"),jHr.forEach(t),luo=r(zCe," (Funnel Transformer model)"),zCe.forEach(t),iuo=i(P),Y_=n(P,"LI",{});var QCe=s(Y_);eae=n(QCe,"STRONG",{});var DHr=s(eae);duo=r(DHr,"gpt2"),DHr.forEach(t),cuo=r(QCe," \u2014 "),p$=n(QCe,"A",{href:!0});var GHr=s(p$);fuo=r(GHr,"GPT2LMHeadModel"),GHr.forEach(t),muo=r(QCe," (OpenAI GPT-2 model)"),QCe.forEach(t),guo=i(P),K_=n(P,"LI",{});var WCe=s(K_);oae=n(WCe,"STRONG",{});var OHr=s(oae);huo=r(OHr,"ibert"),OHr.forEach(t),puo=r(WCe," \u2014 "),_$=n(WCe,"A",{href:!0});var VHr=s(_$);_uo=r(VHr,"IBertForMaskedLM"),VHr.forEach(t),uuo=r(WCe," (I-BERT model)"),WCe.forEach(t),buo=i(P),Z_=n(P,"LI",{});var HCe=s(Z_);rae=n(HCe,"STRONG",{});var XHr=s(rae);Fuo=r(XHr,"layoutlm"),XHr.forEach(t),vuo=r(HCe," \u2014 "),u$=n(HCe,"A",{href:!0});var zHr=s(u$);Tuo=r(zHr,"LayoutLMForMaskedLM"),zHr.forEach(t),Muo=r(HCe," (LayoutLM model)"),HCe.forEach(t),Euo=i(P),eu=n(P,"LI",{});var UCe=s(eu);tae=n(UCe,"STRONG",{});var QHr=s(tae);Cuo=r(QHr,"longformer"),QHr.forEach(t),wuo=r(UCe," \u2014 "),b$=n(UCe,"A",{href:!0});var WHr=s(b$);Auo=r(WHr,"LongformerForMaskedLM"),WHr.forEach(t),yuo=r(UCe," (Longformer model)"),UCe.forEach(t),Luo=i(P),ou=n(P,"LI",{});var JCe=s(ou);aae=n(JCe,"STRONG",{});var HHr=s(aae);xuo=r(HHr,"lxmert"),HHr.forEach(t),kuo=r(JCe," \u2014 "),F$=n(JCe,"A",{href:!0});var UHr=s(F$);Suo=r(UHr,"LxmertForPreTraining"),UHr.forEach(t),Ruo=r(JCe," (LXMERT model)"),JCe.forEach(t),Buo=i(P),ru=n(P,"LI",{});var YCe=s(ru);nae=n(YCe,"STRONG",{});var JHr=s(nae);Puo=r(JHr,"megatron-bert"),JHr.forEach(t),$uo=r(YCe," \u2014 "),v$=n(YCe,"A",{href:!0});var YHr=s(v$);Iuo=r(YHr,"MegatronBertForPreTraining"),YHr.forEach(t),quo=r(YCe," (MegatronBert model)"),YCe.forEach(t),Nuo=i(P),tu=n(P,"LI",{});var KCe=s(tu);sae=n(KCe,"STRONG",{});var KHr=s(sae);juo=r(KHr,"mobilebert"),KHr.forEach(t),Duo=r(KCe," \u2014 "),T$=n(KCe,"A",{href:!0});var ZHr=s(T$);Guo=r(ZHr,"MobileBertForPreTraining"),ZHr.forEach(t),Ouo=r(KCe," (MobileBERT model)"),KCe.forEach(t),Vuo=i(P),au=n(P,"LI",{});var ZCe=s(au);lae=n(ZCe,"STRONG",{});var eUr=s(lae);Xuo=r(eUr,"mpnet"),eUr.forEach(t),zuo=r(ZCe," \u2014 "),M$=n(ZCe,"A",{href:!0});var oUr=s(M$);Quo=r(oUr,"MPNetForMaskedLM"),oUr.forEach(t),Wuo=r(ZCe," (MPNet model)"),ZCe.forEach(t),Huo=i(P),nu=n(P,"LI",{});var e3e=s(nu);iae=n(e3e,"STRONG",{});var rUr=s(iae);Uuo=r(rUr,"openai-gpt"),rUr.forEach(t),Juo=r(e3e," \u2014 "),E$=n(e3e,"A",{href:!0});var tUr=s(E$);Yuo=r(tUr,"OpenAIGPTLMHeadModel"),tUr.forEach(t),Kuo=r(e3e," (OpenAI GPT model)"),e3e.forEach(t),Zuo=i(P),su=n(P,"LI",{});var o3e=s(su);dae=n(o3e,"STRONG",{});var aUr=s(dae);e6o=r(aUr,"retribert"),aUr.forEach(t),o6o=r(o3e," \u2014 "),C$=n(o3e,"A",{href:!0});var nUr=s(C$);r6o=r(nUr,"RetriBertModel"),nUr.forEach(t),t6o=r(o3e," (RetriBERT model)"),o3e.forEach(t),a6o=i(P),lu=n(P,"LI",{});var r3e=s(lu);cae=n(r3e,"STRONG",{});var sUr=s(cae);n6o=r(sUr,"roberta"),sUr.forEach(t),s6o=r(r3e," \u2014 "),w$=n(r3e,"A",{href:!0});var lUr=s(w$);l6o=r(lUr,"RobertaForMaskedLM"),lUr.forEach(t),i6o=r(r3e," (RoBERTa model)"),r3e.forEach(t),d6o=i(P),iu=n(P,"LI",{});var t3e=s(iu);fae=n(t3e,"STRONG",{});var iUr=s(fae);c6o=r(iUr,"squeezebert"),iUr.forEach(t),f6o=r(t3e," \u2014 "),A$=n(t3e,"A",{href:!0});var dUr=s(A$);m6o=r(dUr,"SqueezeBertForMaskedLM"),dUr.forEach(t),g6o=r(t3e," (SqueezeBERT model)"),t3e.forEach(t),h6o=i(P),du=n(P,"LI",{});var a3e=s(du);mae=n(a3e,"STRONG",{});var cUr=s(mae);p6o=r(cUr,"t5"),cUr.forEach(t),_6o=r(a3e," \u2014 "),y$=n(a3e,"A",{href:!0});var fUr=s(y$);u6o=r(fUr,"T5ForConditionalGeneration"),fUr.forEach(t),b6o=r(a3e," (T5 model)"),a3e.forEach(t),F6o=i(P),cu=n(P,"LI",{});var n3e=s(cu);gae=n(n3e,"STRONG",{});var mUr=s(gae);v6o=r(mUr,"tapas"),mUr.forEach(t),T6o=r(n3e," \u2014 "),L$=n(n3e,"A",{href:!0});var gUr=s(L$);M6o=r(gUr,"TapasForMaskedLM"),gUr.forEach(t),E6o=r(n3e," (TAPAS model)"),n3e.forEach(t),C6o=i(P),fu=n(P,"LI",{});var s3e=s(fu);hae=n(s3e,"STRONG",{});var hUr=s(hae);w6o=r(hUr,"transfo-xl"),hUr.forEach(t),A6o=r(s3e," \u2014 "),x$=n(s3e,"A",{href:!0});var pUr=s(x$);y6o=r(pUr,"TransfoXLLMHeadModel"),pUr.forEach(t),L6o=r(s3e," (Transformer-XL model)"),s3e.forEach(t),x6o=i(P),mu=n(P,"LI",{});var l3e=s(mu);pae=n(l3e,"STRONG",{});var _Ur=s(pae);k6o=r(_Ur,"unispeech"),_Ur.forEach(t),S6o=r(l3e," \u2014 "),k$=n(l3e,"A",{href:!0});var uUr=s(k$);R6o=r(uUr,"UniSpeechForPreTraining"),uUr.forEach(t),B6o=r(l3e," (UniSpeech model)"),l3e.forEach(t),P6o=i(P),gu=n(P,"LI",{});var i3e=s(gu);_ae=n(i3e,"STRONG",{});var bUr=s(_ae);$6o=r(bUr,"unispeech-sat"),bUr.forEach(t),I6o=r(i3e," \u2014 "),S$=n(i3e,"A",{href:!0});var FUr=s(S$);q6o=r(FUr,"UniSpeechSatForPreTraining"),FUr.forEach(t),N6o=r(i3e," (UniSpeechSat model)"),i3e.forEach(t),j6o=i(P),hu=n(P,"LI",{});var d3e=s(hu);uae=n(d3e,"STRONG",{});var vUr=s(uae);D6o=r(vUr,"visual_bert"),vUr.forEach(t),G6o=r(d3e," \u2014 "),R$=n(d3e,"A",{href:!0});var TUr=s(R$);O6o=r(TUr,"VisualBertForPreTraining"),TUr.forEach(t),V6o=r(d3e," (VisualBert model)"),d3e.forEach(t),X6o=i(P),pu=n(P,"LI",{});var c3e=s(pu);bae=n(c3e,"STRONG",{});var MUr=s(bae);z6o=r(MUr,"vit_mae"),MUr.forEach(t),Q6o=r(c3e," \u2014 "),B$=n(c3e,"A",{href:!0});var EUr=s(B$);W6o=r(EUr,"ViTMAEForPreTraining"),EUr.forEach(t),H6o=r(c3e," (ViTMAE model)"),c3e.forEach(t),U6o=i(P),_u=n(P,"LI",{});var f3e=s(_u);Fae=n(f3e,"STRONG",{});var CUr=s(Fae);J6o=r(CUr,"wav2vec2"),CUr.forEach(t),Y6o=r(f3e," \u2014 "),P$=n(f3e,"A",{href:!0});var wUr=s(P$);K6o=r(wUr,"Wav2Vec2ForPreTraining"),wUr.forEach(t),Z6o=r(f3e," (Wav2Vec2 model)"),f3e.forEach(t),e1o=i(P),uu=n(P,"LI",{});var m3e=s(uu);vae=n(m3e,"STRONG",{});var AUr=s(vae);o1o=r(AUr,"xlm"),AUr.forEach(t),r1o=r(m3e," \u2014 "),$$=n(m3e,"A",{href:!0});var yUr=s($$);t1o=r(yUr,"XLMWithLMHeadModel"),yUr.forEach(t),a1o=r(m3e," (XLM model)"),m3e.forEach(t),n1o=i(P),bu=n(P,"LI",{});var g3e=s(bu);Tae=n(g3e,"STRONG",{});var LUr=s(Tae);s1o=r(LUr,"xlm-roberta"),LUr.forEach(t),l1o=r(g3e," \u2014 "),I$=n(g3e,"A",{href:!0});var xUr=s(I$);i1o=r(xUr,"XLMRobertaForMaskedLM"),xUr.forEach(t),d1o=r(g3e," (XLM-RoBERTa model)"),g3e.forEach(t),c1o=i(P),Fu=n(P,"LI",{});var h3e=s(Fu);Mae=n(h3e,"STRONG",{});var kUr=s(Mae);f1o=r(kUr,"xlm-roberta-xl"),kUr.forEach(t),m1o=r(h3e," \u2014 "),q$=n(h3e,"A",{href:!0});var SUr=s(q$);g1o=r(SUr,"XLMRobertaXLForMaskedLM"),SUr.forEach(t),h1o=r(h3e," (XLM-RoBERTa-XL model)"),h3e.forEach(t),p1o=i(P),vu=n(P,"LI",{});var p3e=s(vu);Eae=n(p3e,"STRONG",{});var RUr=s(Eae);_1o=r(RUr,"xlnet"),RUr.forEach(t),u1o=r(p3e," \u2014 "),N$=n(p3e,"A",{href:!0});var BUr=s(N$);b1o=r(BUr,"XLNetLMHeadModel"),BUr.forEach(t),F1o=r(p3e," (XLNet model)"),p3e.forEach(t),P.forEach(t),v1o=i(Gt),Tu=n(Gt,"P",{});var _3e=s(Tu);T1o=r(_3e,"The model is set in evaluation mode by default using "),Cae=n(_3e,"CODE",{});var PUr=s(Cae);M1o=r(PUr,"model.eval()"),PUr.forEach(t),E1o=r(_3e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),wae=n(_3e,"CODE",{});var $Ur=s(wae);C1o=r($Ur,"model.train()"),$Ur.forEach(t),_3e.forEach(t),w1o=i(Gt),Aae=n(Gt,"P",{});var IUr=s(Aae);A1o=r(IUr,"Examples:"),IUr.forEach(t),y1o=i(Gt),m(v3.$$.fragment,Gt),Gt.forEach(t),Hs.forEach(t),HRe=i(c),rd=n(c,"H2",{class:!0});var t$e=s(rd);Mu=n(t$e,"A",{id:!0,class:!0,href:!0});var qUr=s(Mu);yae=n(qUr,"SPAN",{});var NUr=s(yae);m(T3.$$.fragment,NUr),NUr.forEach(t),qUr.forEach(t),L1o=i(t$e),Lae=n(t$e,"SPAN",{});var jUr=s(Lae);x1o=r(jUr,"AutoModelForCausalLM"),jUr.forEach(t),t$e.forEach(t),URe=i(c),Ko=n(c,"DIV",{class:!0});var Js=s(Ko);m(M3.$$.fragment,Js),k1o=i(Js),td=n(Js,"P",{});var pU=s(td);S1o=r(pU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),j$=n(pU,"A",{href:!0});var DUr=s(j$);R1o=r(DUr,"from_pretrained()"),DUr.forEach(t),B1o=r(pU," class method or the "),D$=n(pU,"A",{href:!0});var GUr=s(D$);P1o=r(GUr,"from_config()"),GUr.forEach(t),$1o=r(pU,` class
method.`),pU.forEach(t),I1o=i(Js),E3=n(Js,"P",{});var a$e=s(E3);q1o=r(a$e,"This class cannot be instantiated directly using "),xae=n(a$e,"CODE",{});var OUr=s(xae);N1o=r(OUr,"__init__()"),OUr.forEach(t),j1o=r(a$e," (throws an error)."),a$e.forEach(t),D1o=i(Js),Qr=n(Js,"DIV",{class:!0});var Ys=s(Qr);m(C3.$$.fragment,Ys),G1o=i(Ys),kae=n(Ys,"P",{});var VUr=s(kae);O1o=r(VUr,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),VUr.forEach(t),V1o=i(Ys),ad=n(Ys,"P",{});var _U=s(ad);X1o=r(_U,`Note:
Loading a model from its configuration file does `),Sae=n(_U,"STRONG",{});var XUr=s(Sae);z1o=r(XUr,"not"),XUr.forEach(t),Q1o=r(_U,` load the model weights. It only affects the
model\u2019s configuration. Use `),G$=n(_U,"A",{href:!0});var zUr=s(G$);W1o=r(zUr,"from_pretrained()"),zUr.forEach(t),H1o=r(_U," to load the model weights."),_U.forEach(t),U1o=i(Ys),Rae=n(Ys,"P",{});var QUr=s(Rae);J1o=r(QUr,"Examples:"),QUr.forEach(t),Y1o=i(Ys),m(w3.$$.fragment,Ys),Ys.forEach(t),K1o=i(Js),je=n(Js,"DIV",{class:!0});var Ot=s(je);m(A3.$$.fragment,Ot),Z1o=i(Ot),Bae=n(Ot,"P",{});var WUr=s(Bae);ebo=r(WUr,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),WUr.forEach(t),obo=i(Ot),Qa=n(Ot,"P",{});var BE=s(Qa);rbo=r(BE,"The model class to instantiate is selected based on the "),Pae=n(BE,"CODE",{});var HUr=s(Pae);tbo=r(HUr,"model_type"),HUr.forEach(t),abo=r(BE,` property of the config object (either
passed as an argument or loaded from `),$ae=n(BE,"CODE",{});var UUr=s($ae);nbo=r(UUr,"pretrained_model_name_or_path"),UUr.forEach(t),sbo=r(BE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Iae=n(BE,"CODE",{});var JUr=s(Iae);lbo=r(JUr,"pretrained_model_name_or_path"),JUr.forEach(t),ibo=r(BE,":"),BE.forEach(t),dbo=i(Ot),$=n(Ot,"UL",{});var q=s($);Eu=n(q,"LI",{});var u3e=s(Eu);qae=n(u3e,"STRONG",{});var YUr=s(qae);cbo=r(YUr,"bart"),YUr.forEach(t),fbo=r(u3e," \u2014 "),O$=n(u3e,"A",{href:!0});var KUr=s(O$);mbo=r(KUr,"BartForCausalLM"),KUr.forEach(t),gbo=r(u3e," (BART model)"),u3e.forEach(t),hbo=i(q),Cu=n(q,"LI",{});var b3e=s(Cu);Nae=n(b3e,"STRONG",{});var ZUr=s(Nae);pbo=r(ZUr,"bert"),ZUr.forEach(t),_bo=r(b3e," \u2014 "),V$=n(b3e,"A",{href:!0});var eJr=s(V$);ubo=r(eJr,"BertLMHeadModel"),eJr.forEach(t),bbo=r(b3e," (BERT model)"),b3e.forEach(t),Fbo=i(q),wu=n(q,"LI",{});var F3e=s(wu);jae=n(F3e,"STRONG",{});var oJr=s(jae);vbo=r(oJr,"bert-generation"),oJr.forEach(t),Tbo=r(F3e," \u2014 "),X$=n(F3e,"A",{href:!0});var rJr=s(X$);Mbo=r(rJr,"BertGenerationDecoder"),rJr.forEach(t),Ebo=r(F3e," (Bert Generation model)"),F3e.forEach(t),Cbo=i(q),Au=n(q,"LI",{});var v3e=s(Au);Dae=n(v3e,"STRONG",{});var tJr=s(Dae);wbo=r(tJr,"big_bird"),tJr.forEach(t),Abo=r(v3e," \u2014 "),z$=n(v3e,"A",{href:!0});var aJr=s(z$);ybo=r(aJr,"BigBirdForCausalLM"),aJr.forEach(t),Lbo=r(v3e," (BigBird model)"),v3e.forEach(t),xbo=i(q),yu=n(q,"LI",{});var T3e=s(yu);Gae=n(T3e,"STRONG",{});var nJr=s(Gae);kbo=r(nJr,"bigbird_pegasus"),nJr.forEach(t),Sbo=r(T3e," \u2014 "),Q$=n(T3e,"A",{href:!0});var sJr=s(Q$);Rbo=r(sJr,"BigBirdPegasusForCausalLM"),sJr.forEach(t),Bbo=r(T3e," (BigBirdPegasus model)"),T3e.forEach(t),Pbo=i(q),Lu=n(q,"LI",{});var M3e=s(Lu);Oae=n(M3e,"STRONG",{});var lJr=s(Oae);$bo=r(lJr,"blenderbot"),lJr.forEach(t),Ibo=r(M3e," \u2014 "),W$=n(M3e,"A",{href:!0});var iJr=s(W$);qbo=r(iJr,"BlenderbotForCausalLM"),iJr.forEach(t),Nbo=r(M3e," (Blenderbot model)"),M3e.forEach(t),jbo=i(q),xu=n(q,"LI",{});var E3e=s(xu);Vae=n(E3e,"STRONG",{});var dJr=s(Vae);Dbo=r(dJr,"blenderbot-small"),dJr.forEach(t),Gbo=r(E3e," \u2014 "),H$=n(E3e,"A",{href:!0});var cJr=s(H$);Obo=r(cJr,"BlenderbotSmallForCausalLM"),cJr.forEach(t),Vbo=r(E3e," (BlenderbotSmall model)"),E3e.forEach(t),Xbo=i(q),ku=n(q,"LI",{});var C3e=s(ku);Xae=n(C3e,"STRONG",{});var fJr=s(Xae);zbo=r(fJr,"camembert"),fJr.forEach(t),Qbo=r(C3e," \u2014 "),U$=n(C3e,"A",{href:!0});var mJr=s(U$);Wbo=r(mJr,"CamembertForCausalLM"),mJr.forEach(t),Hbo=r(C3e," (CamemBERT model)"),C3e.forEach(t),Ubo=i(q),Su=n(q,"LI",{});var w3e=s(Su);zae=n(w3e,"STRONG",{});var gJr=s(zae);Jbo=r(gJr,"ctrl"),gJr.forEach(t),Ybo=r(w3e," \u2014 "),J$=n(w3e,"A",{href:!0});var hJr=s(J$);Kbo=r(hJr,"CTRLLMHeadModel"),hJr.forEach(t),Zbo=r(w3e," (CTRL model)"),w3e.forEach(t),e5o=i(q),Ru=n(q,"LI",{});var A3e=s(Ru);Qae=n(A3e,"STRONG",{});var pJr=s(Qae);o5o=r(pJr,"data2vec-text"),pJr.forEach(t),r5o=r(A3e," \u2014 "),Y$=n(A3e,"A",{href:!0});var _Jr=s(Y$);t5o=r(_Jr,"Data2VecTextForCausalLM"),_Jr.forEach(t),a5o=r(A3e," (Data2VecText model)"),A3e.forEach(t),n5o=i(q),Bu=n(q,"LI",{});var y3e=s(Bu);Wae=n(y3e,"STRONG",{});var uJr=s(Wae);s5o=r(uJr,"electra"),uJr.forEach(t),l5o=r(y3e," \u2014 "),K$=n(y3e,"A",{href:!0});var bJr=s(K$);i5o=r(bJr,"ElectraForCausalLM"),bJr.forEach(t),d5o=r(y3e," (ELECTRA model)"),y3e.forEach(t),c5o=i(q),Pu=n(q,"LI",{});var L3e=s(Pu);Hae=n(L3e,"STRONG",{});var FJr=s(Hae);f5o=r(FJr,"gpt2"),FJr.forEach(t),m5o=r(L3e," \u2014 "),Z$=n(L3e,"A",{href:!0});var vJr=s(Z$);g5o=r(vJr,"GPT2LMHeadModel"),vJr.forEach(t),h5o=r(L3e," (OpenAI GPT-2 model)"),L3e.forEach(t),p5o=i(q),$u=n(q,"LI",{});var x3e=s($u);Uae=n(x3e,"STRONG",{});var TJr=s(Uae);_5o=r(TJr,"gpt_neo"),TJr.forEach(t),u5o=r(x3e," \u2014 "),eI=n(x3e,"A",{href:!0});var MJr=s(eI);b5o=r(MJr,"GPTNeoForCausalLM"),MJr.forEach(t),F5o=r(x3e," (GPT Neo model)"),x3e.forEach(t),v5o=i(q),Iu=n(q,"LI",{});var k3e=s(Iu);Jae=n(k3e,"STRONG",{});var EJr=s(Jae);T5o=r(EJr,"gpt_neox"),EJr.forEach(t),M5o=r(k3e," \u2014 "),Yae=n(k3e,"CODE",{});var CJr=s(Yae);E5o=r(CJr,"GPTNeoXForCausalLM"),CJr.forEach(t),C5o=r(k3e," (GPTNeoX model)"),k3e.forEach(t),w5o=i(q),qu=n(q,"LI",{});var S3e=s(qu);Kae=n(S3e,"STRONG",{});var wJr=s(Kae);A5o=r(wJr,"gptj"),wJr.forEach(t),y5o=r(S3e," \u2014 "),oI=n(S3e,"A",{href:!0});var AJr=s(oI);L5o=r(AJr,"GPTJForCausalLM"),AJr.forEach(t),x5o=r(S3e," (GPT-J model)"),S3e.forEach(t),k5o=i(q),Nu=n(q,"LI",{});var R3e=s(Nu);Zae=n(R3e,"STRONG",{});var yJr=s(Zae);S5o=r(yJr,"marian"),yJr.forEach(t),R5o=r(R3e," \u2014 "),rI=n(R3e,"A",{href:!0});var LJr=s(rI);B5o=r(LJr,"MarianForCausalLM"),LJr.forEach(t),P5o=r(R3e," (Marian model)"),R3e.forEach(t),$5o=i(q),ju=n(q,"LI",{});var B3e=s(ju);ene=n(B3e,"STRONG",{});var xJr=s(ene);I5o=r(xJr,"mbart"),xJr.forEach(t),q5o=r(B3e," \u2014 "),tI=n(B3e,"A",{href:!0});var kJr=s(tI);N5o=r(kJr,"MBartForCausalLM"),kJr.forEach(t),j5o=r(B3e," (mBART model)"),B3e.forEach(t),D5o=i(q),Du=n(q,"LI",{});var P3e=s(Du);one=n(P3e,"STRONG",{});var SJr=s(one);G5o=r(SJr,"megatron-bert"),SJr.forEach(t),O5o=r(P3e," \u2014 "),aI=n(P3e,"A",{href:!0});var RJr=s(aI);V5o=r(RJr,"MegatronBertForCausalLM"),RJr.forEach(t),X5o=r(P3e," (MegatronBert model)"),P3e.forEach(t),z5o=i(q),Gu=n(q,"LI",{});var $3e=s(Gu);rne=n($3e,"STRONG",{});var BJr=s(rne);Q5o=r(BJr,"openai-gpt"),BJr.forEach(t),W5o=r($3e," \u2014 "),nI=n($3e,"A",{href:!0});var PJr=s(nI);H5o=r(PJr,"OpenAIGPTLMHeadModel"),PJr.forEach(t),U5o=r($3e," (OpenAI GPT model)"),$3e.forEach(t),J5o=i(q),Ou=n(q,"LI",{});var I3e=s(Ou);tne=n(I3e,"STRONG",{});var $Jr=s(tne);Y5o=r($Jr,"pegasus"),$Jr.forEach(t),K5o=r(I3e," \u2014 "),sI=n(I3e,"A",{href:!0});var IJr=s(sI);Z5o=r(IJr,"PegasusForCausalLM"),IJr.forEach(t),e2o=r(I3e," (Pegasus model)"),I3e.forEach(t),o2o=i(q),Vu=n(q,"LI",{});var q3e=s(Vu);ane=n(q3e,"STRONG",{});var qJr=s(ane);r2o=r(qJr,"plbart"),qJr.forEach(t),t2o=r(q3e," \u2014 "),lI=n(q3e,"A",{href:!0});var NJr=s(lI);a2o=r(NJr,"PLBartForCausalLM"),NJr.forEach(t),n2o=r(q3e," (PLBart model)"),q3e.forEach(t),s2o=i(q),Xu=n(q,"LI",{});var N3e=s(Xu);nne=n(N3e,"STRONG",{});var jJr=s(nne);l2o=r(jJr,"prophetnet"),jJr.forEach(t),i2o=r(N3e," \u2014 "),iI=n(N3e,"A",{href:!0});var DJr=s(iI);d2o=r(DJr,"ProphetNetForCausalLM"),DJr.forEach(t),c2o=r(N3e," (ProphetNet model)"),N3e.forEach(t),f2o=i(q),zu=n(q,"LI",{});var j3e=s(zu);sne=n(j3e,"STRONG",{});var GJr=s(sne);m2o=r(GJr,"qdqbert"),GJr.forEach(t),g2o=r(j3e," \u2014 "),dI=n(j3e,"A",{href:!0});var OJr=s(dI);h2o=r(OJr,"QDQBertLMHeadModel"),OJr.forEach(t),p2o=r(j3e," (QDQBert model)"),j3e.forEach(t),_2o=i(q),Qu=n(q,"LI",{});var D3e=s(Qu);lne=n(D3e,"STRONG",{});var VJr=s(lne);u2o=r(VJr,"reformer"),VJr.forEach(t),b2o=r(D3e," \u2014 "),cI=n(D3e,"A",{href:!0});var XJr=s(cI);F2o=r(XJr,"ReformerModelWithLMHead"),XJr.forEach(t),v2o=r(D3e," (Reformer model)"),D3e.forEach(t),T2o=i(q),Wu=n(q,"LI",{});var G3e=s(Wu);ine=n(G3e,"STRONG",{});var zJr=s(ine);M2o=r(zJr,"rembert"),zJr.forEach(t),E2o=r(G3e," \u2014 "),fI=n(G3e,"A",{href:!0});var QJr=s(fI);C2o=r(QJr,"RemBertForCausalLM"),QJr.forEach(t),w2o=r(G3e," (RemBERT model)"),G3e.forEach(t),A2o=i(q),Hu=n(q,"LI",{});var O3e=s(Hu);dne=n(O3e,"STRONG",{});var WJr=s(dne);y2o=r(WJr,"roberta"),WJr.forEach(t),L2o=r(O3e," \u2014 "),mI=n(O3e,"A",{href:!0});var HJr=s(mI);x2o=r(HJr,"RobertaForCausalLM"),HJr.forEach(t),k2o=r(O3e," (RoBERTa model)"),O3e.forEach(t),S2o=i(q),Uu=n(q,"LI",{});var V3e=s(Uu);cne=n(V3e,"STRONG",{});var UJr=s(cne);R2o=r(UJr,"roformer"),UJr.forEach(t),B2o=r(V3e," \u2014 "),gI=n(V3e,"A",{href:!0});var JJr=s(gI);P2o=r(JJr,"RoFormerForCausalLM"),JJr.forEach(t),$2o=r(V3e," (RoFormer model)"),V3e.forEach(t),I2o=i(q),Ju=n(q,"LI",{});var X3e=s(Ju);fne=n(X3e,"STRONG",{});var YJr=s(fne);q2o=r(YJr,"speech_to_text_2"),YJr.forEach(t),N2o=r(X3e," \u2014 "),hI=n(X3e,"A",{href:!0});var KJr=s(hI);j2o=r(KJr,"Speech2Text2ForCausalLM"),KJr.forEach(t),D2o=r(X3e," (Speech2Text2 model)"),X3e.forEach(t),G2o=i(q),Yu=n(q,"LI",{});var z3e=s(Yu);mne=n(z3e,"STRONG",{});var ZJr=s(mne);O2o=r(ZJr,"transfo-xl"),ZJr.forEach(t),V2o=r(z3e," \u2014 "),pI=n(z3e,"A",{href:!0});var eYr=s(pI);X2o=r(eYr,"TransfoXLLMHeadModel"),eYr.forEach(t),z2o=r(z3e," (Transformer-XL model)"),z3e.forEach(t),Q2o=i(q),Ku=n(q,"LI",{});var Q3e=s(Ku);gne=n(Q3e,"STRONG",{});var oYr=s(gne);W2o=r(oYr,"trocr"),oYr.forEach(t),H2o=r(Q3e," \u2014 "),_I=n(Q3e,"A",{href:!0});var rYr=s(_I);U2o=r(rYr,"TrOCRForCausalLM"),rYr.forEach(t),J2o=r(Q3e," (TrOCR model)"),Q3e.forEach(t),Y2o=i(q),Zu=n(q,"LI",{});var W3e=s(Zu);hne=n(W3e,"STRONG",{});var tYr=s(hne);K2o=r(tYr,"xglm"),tYr.forEach(t),Z2o=r(W3e," \u2014 "),uI=n(W3e,"A",{href:!0});var aYr=s(uI);eFo=r(aYr,"XGLMForCausalLM"),aYr.forEach(t),oFo=r(W3e," (XGLM model)"),W3e.forEach(t),rFo=i(q),e6=n(q,"LI",{});var H3e=s(e6);pne=n(H3e,"STRONG",{});var nYr=s(pne);tFo=r(nYr,"xlm"),nYr.forEach(t),aFo=r(H3e," \u2014 "),bI=n(H3e,"A",{href:!0});var sYr=s(bI);nFo=r(sYr,"XLMWithLMHeadModel"),sYr.forEach(t),sFo=r(H3e," (XLM model)"),H3e.forEach(t),lFo=i(q),o6=n(q,"LI",{});var U3e=s(o6);_ne=n(U3e,"STRONG",{});var lYr=s(_ne);iFo=r(lYr,"xlm-prophetnet"),lYr.forEach(t),dFo=r(U3e," \u2014 "),FI=n(U3e,"A",{href:!0});var iYr=s(FI);cFo=r(iYr,"XLMProphetNetForCausalLM"),iYr.forEach(t),fFo=r(U3e," (XLMProphetNet model)"),U3e.forEach(t),mFo=i(q),r6=n(q,"LI",{});var J3e=s(r6);une=n(J3e,"STRONG",{});var dYr=s(une);gFo=r(dYr,"xlm-roberta"),dYr.forEach(t),hFo=r(J3e," \u2014 "),vI=n(J3e,"A",{href:!0});var cYr=s(vI);pFo=r(cYr,"XLMRobertaForCausalLM"),cYr.forEach(t),_Fo=r(J3e," (XLM-RoBERTa model)"),J3e.forEach(t),uFo=i(q),t6=n(q,"LI",{});var Y3e=s(t6);bne=n(Y3e,"STRONG",{});var fYr=s(bne);bFo=r(fYr,"xlm-roberta-xl"),fYr.forEach(t),FFo=r(Y3e," \u2014 "),TI=n(Y3e,"A",{href:!0});var mYr=s(TI);vFo=r(mYr,"XLMRobertaXLForCausalLM"),mYr.forEach(t),TFo=r(Y3e," (XLM-RoBERTa-XL model)"),Y3e.forEach(t),MFo=i(q),a6=n(q,"LI",{});var K3e=s(a6);Fne=n(K3e,"STRONG",{});var gYr=s(Fne);EFo=r(gYr,"xlnet"),gYr.forEach(t),CFo=r(K3e," \u2014 "),MI=n(K3e,"A",{href:!0});var hYr=s(MI);wFo=r(hYr,"XLNetLMHeadModel"),hYr.forEach(t),AFo=r(K3e," (XLNet model)"),K3e.forEach(t),q.forEach(t),yFo=i(Ot),n6=n(Ot,"P",{});var Z3e=s(n6);LFo=r(Z3e,"The model is set in evaluation mode by default using "),vne=n(Z3e,"CODE",{});var pYr=s(vne);xFo=r(pYr,"model.eval()"),pYr.forEach(t),kFo=r(Z3e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Tne=n(Z3e,"CODE",{});var _Yr=s(Tne);SFo=r(_Yr,"model.train()"),_Yr.forEach(t),Z3e.forEach(t),RFo=i(Ot),Mne=n(Ot,"P",{});var uYr=s(Mne);BFo=r(uYr,"Examples:"),uYr.forEach(t),PFo=i(Ot),m(y3.$$.fragment,Ot),Ot.forEach(t),Js.forEach(t),JRe=i(c),nd=n(c,"H2",{class:!0});var n$e=s(nd);s6=n(n$e,"A",{id:!0,class:!0,href:!0});var bYr=s(s6);Ene=n(bYr,"SPAN",{});var FYr=s(Ene);m(L3.$$.fragment,FYr),FYr.forEach(t),bYr.forEach(t),$Fo=i(n$e),Cne=n(n$e,"SPAN",{});var vYr=s(Cne);IFo=r(vYr,"AutoModelForMaskedLM"),vYr.forEach(t),n$e.forEach(t),YRe=i(c),Zo=n(c,"DIV",{class:!0});var Ks=s(Zo);m(x3.$$.fragment,Ks),qFo=i(Ks),sd=n(Ks,"P",{});var uU=s(sd);NFo=r(uU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),EI=n(uU,"A",{href:!0});var TYr=s(EI);jFo=r(TYr,"from_pretrained()"),TYr.forEach(t),DFo=r(uU," class method or the "),CI=n(uU,"A",{href:!0});var MYr=s(CI);GFo=r(MYr,"from_config()"),MYr.forEach(t),OFo=r(uU,` class
method.`),uU.forEach(t),VFo=i(Ks),k3=n(Ks,"P",{});var s$e=s(k3);XFo=r(s$e,"This class cannot be instantiated directly using "),wne=n(s$e,"CODE",{});var EYr=s(wne);zFo=r(EYr,"__init__()"),EYr.forEach(t),QFo=r(s$e," (throws an error)."),s$e.forEach(t),WFo=i(Ks),Wr=n(Ks,"DIV",{class:!0});var Zs=s(Wr);m(S3.$$.fragment,Zs),HFo=i(Zs),Ane=n(Zs,"P",{});var CYr=s(Ane);UFo=r(CYr,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),CYr.forEach(t),JFo=i(Zs),ld=n(Zs,"P",{});var bU=s(ld);YFo=r(bU,`Note:
Loading a model from its configuration file does `),yne=n(bU,"STRONG",{});var wYr=s(yne);KFo=r(wYr,"not"),wYr.forEach(t),ZFo=r(bU,` load the model weights. It only affects the
model\u2019s configuration. Use `),wI=n(bU,"A",{href:!0});var AYr=s(wI);evo=r(AYr,"from_pretrained()"),AYr.forEach(t),ovo=r(bU," to load the model weights."),bU.forEach(t),rvo=i(Zs),Lne=n(Zs,"P",{});var yYr=s(Lne);tvo=r(yYr,"Examples:"),yYr.forEach(t),avo=i(Zs),m(R3.$$.fragment,Zs),Zs.forEach(t),nvo=i(Ks),De=n(Ks,"DIV",{class:!0});var Vt=s(De);m(B3.$$.fragment,Vt),svo=i(Vt),xne=n(Vt,"P",{});var LYr=s(xne);lvo=r(LYr,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),LYr.forEach(t),ivo=i(Vt),Wa=n(Vt,"P",{});var PE=s(Wa);dvo=r(PE,"The model class to instantiate is selected based on the "),kne=n(PE,"CODE",{});var xYr=s(kne);cvo=r(xYr,"model_type"),xYr.forEach(t),fvo=r(PE,` property of the config object (either
passed as an argument or loaded from `),Sne=n(PE,"CODE",{});var kYr=s(Sne);mvo=r(kYr,"pretrained_model_name_or_path"),kYr.forEach(t),gvo=r(PE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rne=n(PE,"CODE",{});var SYr=s(Rne);hvo=r(SYr,"pretrained_model_name_or_path"),SYr.forEach(t),pvo=r(PE,":"),PE.forEach(t),_vo=i(Vt),I=n(Vt,"UL",{});var N=s(I);l6=n(N,"LI",{});var ewe=s(l6);Bne=n(ewe,"STRONG",{});var RYr=s(Bne);uvo=r(RYr,"albert"),RYr.forEach(t),bvo=r(ewe," \u2014 "),AI=n(ewe,"A",{href:!0});var BYr=s(AI);Fvo=r(BYr,"AlbertForMaskedLM"),BYr.forEach(t),vvo=r(ewe," (ALBERT model)"),ewe.forEach(t),Tvo=i(N),i6=n(N,"LI",{});var owe=s(i6);Pne=n(owe,"STRONG",{});var PYr=s(Pne);Mvo=r(PYr,"bart"),PYr.forEach(t),Evo=r(owe," \u2014 "),yI=n(owe,"A",{href:!0});var $Yr=s(yI);Cvo=r($Yr,"BartForConditionalGeneration"),$Yr.forEach(t),wvo=r(owe," (BART model)"),owe.forEach(t),Avo=i(N),d6=n(N,"LI",{});var rwe=s(d6);$ne=n(rwe,"STRONG",{});var IYr=s($ne);yvo=r(IYr,"bert"),IYr.forEach(t),Lvo=r(rwe," \u2014 "),LI=n(rwe,"A",{href:!0});var qYr=s(LI);xvo=r(qYr,"BertForMaskedLM"),qYr.forEach(t),kvo=r(rwe," (BERT model)"),rwe.forEach(t),Svo=i(N),c6=n(N,"LI",{});var twe=s(c6);Ine=n(twe,"STRONG",{});var NYr=s(Ine);Rvo=r(NYr,"big_bird"),NYr.forEach(t),Bvo=r(twe," \u2014 "),xI=n(twe,"A",{href:!0});var jYr=s(xI);Pvo=r(jYr,"BigBirdForMaskedLM"),jYr.forEach(t),$vo=r(twe," (BigBird model)"),twe.forEach(t),Ivo=i(N),f6=n(N,"LI",{});var awe=s(f6);qne=n(awe,"STRONG",{});var DYr=s(qne);qvo=r(DYr,"camembert"),DYr.forEach(t),Nvo=r(awe," \u2014 "),kI=n(awe,"A",{href:!0});var GYr=s(kI);jvo=r(GYr,"CamembertForMaskedLM"),GYr.forEach(t),Dvo=r(awe," (CamemBERT model)"),awe.forEach(t),Gvo=i(N),m6=n(N,"LI",{});var nwe=s(m6);Nne=n(nwe,"STRONG",{});var OYr=s(Nne);Ovo=r(OYr,"convbert"),OYr.forEach(t),Vvo=r(nwe," \u2014 "),SI=n(nwe,"A",{href:!0});var VYr=s(SI);Xvo=r(VYr,"ConvBertForMaskedLM"),VYr.forEach(t),zvo=r(nwe," (ConvBERT model)"),nwe.forEach(t),Qvo=i(N),g6=n(N,"LI",{});var swe=s(g6);jne=n(swe,"STRONG",{});var XYr=s(jne);Wvo=r(XYr,"data2vec-text"),XYr.forEach(t),Hvo=r(swe," \u2014 "),RI=n(swe,"A",{href:!0});var zYr=s(RI);Uvo=r(zYr,"Data2VecTextForMaskedLM"),zYr.forEach(t),Jvo=r(swe," (Data2VecText model)"),swe.forEach(t),Yvo=i(N),h6=n(N,"LI",{});var lwe=s(h6);Dne=n(lwe,"STRONG",{});var QYr=s(Dne);Kvo=r(QYr,"deberta"),QYr.forEach(t),Zvo=r(lwe," \u2014 "),BI=n(lwe,"A",{href:!0});var WYr=s(BI);eTo=r(WYr,"DebertaForMaskedLM"),WYr.forEach(t),oTo=r(lwe," (DeBERTa model)"),lwe.forEach(t),rTo=i(N),p6=n(N,"LI",{});var iwe=s(p6);Gne=n(iwe,"STRONG",{});var HYr=s(Gne);tTo=r(HYr,"deberta-v2"),HYr.forEach(t),aTo=r(iwe," \u2014 "),PI=n(iwe,"A",{href:!0});var UYr=s(PI);nTo=r(UYr,"DebertaV2ForMaskedLM"),UYr.forEach(t),sTo=r(iwe," (DeBERTa-v2 model)"),iwe.forEach(t),lTo=i(N),_6=n(N,"LI",{});var dwe=s(_6);One=n(dwe,"STRONG",{});var JYr=s(One);iTo=r(JYr,"distilbert"),JYr.forEach(t),dTo=r(dwe," \u2014 "),$I=n(dwe,"A",{href:!0});var YYr=s($I);cTo=r(YYr,"DistilBertForMaskedLM"),YYr.forEach(t),fTo=r(dwe," (DistilBERT model)"),dwe.forEach(t),mTo=i(N),u6=n(N,"LI",{});var cwe=s(u6);Vne=n(cwe,"STRONG",{});var KYr=s(Vne);gTo=r(KYr,"electra"),KYr.forEach(t),hTo=r(cwe," \u2014 "),II=n(cwe,"A",{href:!0});var ZYr=s(II);pTo=r(ZYr,"ElectraForMaskedLM"),ZYr.forEach(t),_To=r(cwe," (ELECTRA model)"),cwe.forEach(t),uTo=i(N),b6=n(N,"LI",{});var fwe=s(b6);Xne=n(fwe,"STRONG",{});var eKr=s(Xne);bTo=r(eKr,"flaubert"),eKr.forEach(t),FTo=r(fwe," \u2014 "),qI=n(fwe,"A",{href:!0});var oKr=s(qI);vTo=r(oKr,"FlaubertWithLMHeadModel"),oKr.forEach(t),TTo=r(fwe," (FlauBERT model)"),fwe.forEach(t),MTo=i(N),F6=n(N,"LI",{});var mwe=s(F6);zne=n(mwe,"STRONG",{});var rKr=s(zne);ETo=r(rKr,"fnet"),rKr.forEach(t),CTo=r(mwe," \u2014 "),NI=n(mwe,"A",{href:!0});var tKr=s(NI);wTo=r(tKr,"FNetForMaskedLM"),tKr.forEach(t),ATo=r(mwe," (FNet model)"),mwe.forEach(t),yTo=i(N),v6=n(N,"LI",{});var gwe=s(v6);Qne=n(gwe,"STRONG",{});var aKr=s(Qne);LTo=r(aKr,"funnel"),aKr.forEach(t),xTo=r(gwe," \u2014 "),jI=n(gwe,"A",{href:!0});var nKr=s(jI);kTo=r(nKr,"FunnelForMaskedLM"),nKr.forEach(t),STo=r(gwe," (Funnel Transformer model)"),gwe.forEach(t),RTo=i(N),T6=n(N,"LI",{});var hwe=s(T6);Wne=n(hwe,"STRONG",{});var sKr=s(Wne);BTo=r(sKr,"gpt_neox"),sKr.forEach(t),PTo=r(hwe," \u2014 "),Hne=n(hwe,"CODE",{});var lKr=s(Hne);$To=r(lKr,"GPTNeoXForMaskedLM"),lKr.forEach(t),ITo=r(hwe," (GPTNeoX model)"),hwe.forEach(t),qTo=i(N),M6=n(N,"LI",{});var pwe=s(M6);Une=n(pwe,"STRONG",{});var iKr=s(Une);NTo=r(iKr,"ibert"),iKr.forEach(t),jTo=r(pwe," \u2014 "),DI=n(pwe,"A",{href:!0});var dKr=s(DI);DTo=r(dKr,"IBertForMaskedLM"),dKr.forEach(t),GTo=r(pwe," (I-BERT model)"),pwe.forEach(t),OTo=i(N),E6=n(N,"LI",{});var _we=s(E6);Jne=n(_we,"STRONG",{});var cKr=s(Jne);VTo=r(cKr,"layoutlm"),cKr.forEach(t),XTo=r(_we," \u2014 "),GI=n(_we,"A",{href:!0});var fKr=s(GI);zTo=r(fKr,"LayoutLMForMaskedLM"),fKr.forEach(t),QTo=r(_we," (LayoutLM model)"),_we.forEach(t),WTo=i(N),C6=n(N,"LI",{});var uwe=s(C6);Yne=n(uwe,"STRONG",{});var mKr=s(Yne);HTo=r(mKr,"longformer"),mKr.forEach(t),UTo=r(uwe," \u2014 "),OI=n(uwe,"A",{href:!0});var gKr=s(OI);JTo=r(gKr,"LongformerForMaskedLM"),gKr.forEach(t),YTo=r(uwe," (Longformer model)"),uwe.forEach(t),KTo=i(N),w6=n(N,"LI",{});var bwe=s(w6);Kne=n(bwe,"STRONG",{});var hKr=s(Kne);ZTo=r(hKr,"mbart"),hKr.forEach(t),e9o=r(bwe," \u2014 "),VI=n(bwe,"A",{href:!0});var pKr=s(VI);o9o=r(pKr,"MBartForConditionalGeneration"),pKr.forEach(t),r9o=r(bwe," (mBART model)"),bwe.forEach(t),t9o=i(N),A6=n(N,"LI",{});var Fwe=s(A6);Zne=n(Fwe,"STRONG",{});var _Kr=s(Zne);a9o=r(_Kr,"megatron-bert"),_Kr.forEach(t),n9o=r(Fwe," \u2014 "),XI=n(Fwe,"A",{href:!0});var uKr=s(XI);s9o=r(uKr,"MegatronBertForMaskedLM"),uKr.forEach(t),l9o=r(Fwe," (MegatronBert model)"),Fwe.forEach(t),i9o=i(N),y6=n(N,"LI",{});var vwe=s(y6);ese=n(vwe,"STRONG",{});var bKr=s(ese);d9o=r(bKr,"mobilebert"),bKr.forEach(t),c9o=r(vwe," \u2014 "),zI=n(vwe,"A",{href:!0});var FKr=s(zI);f9o=r(FKr,"MobileBertForMaskedLM"),FKr.forEach(t),m9o=r(vwe," (MobileBERT model)"),vwe.forEach(t),g9o=i(N),L6=n(N,"LI",{});var Twe=s(L6);ose=n(Twe,"STRONG",{});var vKr=s(ose);h9o=r(vKr,"mpnet"),vKr.forEach(t),p9o=r(Twe," \u2014 "),QI=n(Twe,"A",{href:!0});var TKr=s(QI);_9o=r(TKr,"MPNetForMaskedLM"),TKr.forEach(t),u9o=r(Twe," (MPNet model)"),Twe.forEach(t),b9o=i(N),x6=n(N,"LI",{});var Mwe=s(x6);rse=n(Mwe,"STRONG",{});var MKr=s(rse);F9o=r(MKr,"nystromformer"),MKr.forEach(t),v9o=r(Mwe," \u2014 "),WI=n(Mwe,"A",{href:!0});var EKr=s(WI);T9o=r(EKr,"NystromformerForMaskedLM"),EKr.forEach(t),M9o=r(Mwe," (Nystromformer model)"),Mwe.forEach(t),E9o=i(N),k6=n(N,"LI",{});var Ewe=s(k6);tse=n(Ewe,"STRONG",{});var CKr=s(tse);C9o=r(CKr,"perceiver"),CKr.forEach(t),w9o=r(Ewe," \u2014 "),HI=n(Ewe,"A",{href:!0});var wKr=s(HI);A9o=r(wKr,"PerceiverForMaskedLM"),wKr.forEach(t),y9o=r(Ewe," (Perceiver model)"),Ewe.forEach(t),L9o=i(N),S6=n(N,"LI",{});var Cwe=s(S6);ase=n(Cwe,"STRONG",{});var AKr=s(ase);x9o=r(AKr,"qdqbert"),AKr.forEach(t),k9o=r(Cwe," \u2014 "),UI=n(Cwe,"A",{href:!0});var yKr=s(UI);S9o=r(yKr,"QDQBertForMaskedLM"),yKr.forEach(t),R9o=r(Cwe," (QDQBert model)"),Cwe.forEach(t),B9o=i(N),R6=n(N,"LI",{});var wwe=s(R6);nse=n(wwe,"STRONG",{});var LKr=s(nse);P9o=r(LKr,"reformer"),LKr.forEach(t),$9o=r(wwe," \u2014 "),JI=n(wwe,"A",{href:!0});var xKr=s(JI);I9o=r(xKr,"ReformerForMaskedLM"),xKr.forEach(t),q9o=r(wwe," (Reformer model)"),wwe.forEach(t),N9o=i(N),B6=n(N,"LI",{});var Awe=s(B6);sse=n(Awe,"STRONG",{});var kKr=s(sse);j9o=r(kKr,"rembert"),kKr.forEach(t),D9o=r(Awe," \u2014 "),YI=n(Awe,"A",{href:!0});var SKr=s(YI);G9o=r(SKr,"RemBertForMaskedLM"),SKr.forEach(t),O9o=r(Awe," (RemBERT model)"),Awe.forEach(t),V9o=i(N),P6=n(N,"LI",{});var ywe=s(P6);lse=n(ywe,"STRONG",{});var RKr=s(lse);X9o=r(RKr,"roberta"),RKr.forEach(t),z9o=r(ywe," \u2014 "),KI=n(ywe,"A",{href:!0});var BKr=s(KI);Q9o=r(BKr,"RobertaForMaskedLM"),BKr.forEach(t),W9o=r(ywe," (RoBERTa model)"),ywe.forEach(t),H9o=i(N),$6=n(N,"LI",{});var Lwe=s($6);ise=n(Lwe,"STRONG",{});var PKr=s(ise);U9o=r(PKr,"roformer"),PKr.forEach(t),J9o=r(Lwe," \u2014 "),ZI=n(Lwe,"A",{href:!0});var $Kr=s(ZI);Y9o=r($Kr,"RoFormerForMaskedLM"),$Kr.forEach(t),K9o=r(Lwe," (RoFormer model)"),Lwe.forEach(t),Z9o=i(N),I6=n(N,"LI",{});var xwe=s(I6);dse=n(xwe,"STRONG",{});var IKr=s(dse);eMo=r(IKr,"squeezebert"),IKr.forEach(t),oMo=r(xwe," \u2014 "),eq=n(xwe,"A",{href:!0});var qKr=s(eq);rMo=r(qKr,"SqueezeBertForMaskedLM"),qKr.forEach(t),tMo=r(xwe," (SqueezeBERT model)"),xwe.forEach(t),aMo=i(N),q6=n(N,"LI",{});var kwe=s(q6);cse=n(kwe,"STRONG",{});var NKr=s(cse);nMo=r(NKr,"tapas"),NKr.forEach(t),sMo=r(kwe," \u2014 "),oq=n(kwe,"A",{href:!0});var jKr=s(oq);lMo=r(jKr,"TapasForMaskedLM"),jKr.forEach(t),iMo=r(kwe," (TAPAS model)"),kwe.forEach(t),dMo=i(N),N6=n(N,"LI",{});var Swe=s(N6);fse=n(Swe,"STRONG",{});var DKr=s(fse);cMo=r(DKr,"wav2vec2"),DKr.forEach(t),fMo=r(Swe," \u2014 "),mse=n(Swe,"CODE",{});var GKr=s(mse);mMo=r(GKr,"Wav2Vec2ForMaskedLM"),GKr.forEach(t),gMo=r(Swe," (Wav2Vec2 model)"),Swe.forEach(t),hMo=i(N),j6=n(N,"LI",{});var Rwe=s(j6);gse=n(Rwe,"STRONG",{});var OKr=s(gse);pMo=r(OKr,"xlm"),OKr.forEach(t),_Mo=r(Rwe," \u2014 "),rq=n(Rwe,"A",{href:!0});var VKr=s(rq);uMo=r(VKr,"XLMWithLMHeadModel"),VKr.forEach(t),bMo=r(Rwe," (XLM model)"),Rwe.forEach(t),FMo=i(N),D6=n(N,"LI",{});var Bwe=s(D6);hse=n(Bwe,"STRONG",{});var XKr=s(hse);vMo=r(XKr,"xlm-roberta"),XKr.forEach(t),TMo=r(Bwe," \u2014 "),tq=n(Bwe,"A",{href:!0});var zKr=s(tq);MMo=r(zKr,"XLMRobertaForMaskedLM"),zKr.forEach(t),EMo=r(Bwe," (XLM-RoBERTa model)"),Bwe.forEach(t),CMo=i(N),G6=n(N,"LI",{});var Pwe=s(G6);pse=n(Pwe,"STRONG",{});var QKr=s(pse);wMo=r(QKr,"xlm-roberta-xl"),QKr.forEach(t),AMo=r(Pwe," \u2014 "),aq=n(Pwe,"A",{href:!0});var WKr=s(aq);yMo=r(WKr,"XLMRobertaXLForMaskedLM"),WKr.forEach(t),LMo=r(Pwe," (XLM-RoBERTa-XL model)"),Pwe.forEach(t),xMo=i(N),O6=n(N,"LI",{});var $we=s(O6);_se=n($we,"STRONG",{});var HKr=s(_se);kMo=r(HKr,"yoso"),HKr.forEach(t),SMo=r($we," \u2014 "),nq=n($we,"A",{href:!0});var UKr=s(nq);RMo=r(UKr,"YosoForMaskedLM"),UKr.forEach(t),BMo=r($we," (YOSO model)"),$we.forEach(t),N.forEach(t),PMo=i(Vt),V6=n(Vt,"P",{});var Iwe=s(V6);$Mo=r(Iwe,"The model is set in evaluation mode by default using "),use=n(Iwe,"CODE",{});var JKr=s(use);IMo=r(JKr,"model.eval()"),JKr.forEach(t),qMo=r(Iwe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),bse=n(Iwe,"CODE",{});var YKr=s(bse);NMo=r(YKr,"model.train()"),YKr.forEach(t),Iwe.forEach(t),jMo=i(Vt),Fse=n(Vt,"P",{});var KKr=s(Fse);DMo=r(KKr,"Examples:"),KKr.forEach(t),GMo=i(Vt),m(P3.$$.fragment,Vt),Vt.forEach(t),Ks.forEach(t),KRe=i(c),id=n(c,"H2",{class:!0});var l$e=s(id);X6=n(l$e,"A",{id:!0,class:!0,href:!0});var ZKr=s(X6);vse=n(ZKr,"SPAN",{});var eZr=s(vse);m($3.$$.fragment,eZr),eZr.forEach(t),ZKr.forEach(t),OMo=i(l$e),Tse=n(l$e,"SPAN",{});var oZr=s(Tse);VMo=r(oZr,"AutoModelForSeq2SeqLM"),oZr.forEach(t),l$e.forEach(t),ZRe=i(c),er=n(c,"DIV",{class:!0});var el=s(er);m(I3.$$.fragment,el),XMo=i(el),dd=n(el,"P",{});var FU=s(dd);zMo=r(FU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),sq=n(FU,"A",{href:!0});var rZr=s(sq);QMo=r(rZr,"from_pretrained()"),rZr.forEach(t),WMo=r(FU," class method or the "),lq=n(FU,"A",{href:!0});var tZr=s(lq);HMo=r(tZr,"from_config()"),tZr.forEach(t),UMo=r(FU,` class
method.`),FU.forEach(t),JMo=i(el),q3=n(el,"P",{});var i$e=s(q3);YMo=r(i$e,"This class cannot be instantiated directly using "),Mse=n(i$e,"CODE",{});var aZr=s(Mse);KMo=r(aZr,"__init__()"),aZr.forEach(t),ZMo=r(i$e," (throws an error)."),i$e.forEach(t),e4o=i(el),Hr=n(el,"DIV",{class:!0});var ol=s(Hr);m(N3.$$.fragment,ol),o4o=i(ol),Ese=n(ol,"P",{});var nZr=s(Ese);r4o=r(nZr,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),nZr.forEach(t),t4o=i(ol),cd=n(ol,"P",{});var vU=s(cd);a4o=r(vU,`Note:
Loading a model from its configuration file does `),Cse=n(vU,"STRONG",{});var sZr=s(Cse);n4o=r(sZr,"not"),sZr.forEach(t),s4o=r(vU,` load the model weights. It only affects the
model\u2019s configuration. Use `),iq=n(vU,"A",{href:!0});var lZr=s(iq);l4o=r(lZr,"from_pretrained()"),lZr.forEach(t),i4o=r(vU," to load the model weights."),vU.forEach(t),d4o=i(ol),wse=n(ol,"P",{});var iZr=s(wse);c4o=r(iZr,"Examples:"),iZr.forEach(t),f4o=i(ol),m(j3.$$.fragment,ol),ol.forEach(t),m4o=i(el),Ge=n(el,"DIV",{class:!0});var Xt=s(Ge);m(D3.$$.fragment,Xt),g4o=i(Xt),Ase=n(Xt,"P",{});var dZr=s(Ase);h4o=r(dZr,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),dZr.forEach(t),p4o=i(Xt),Ha=n(Xt,"P",{});var $E=s(Ha);_4o=r($E,"The model class to instantiate is selected based on the "),yse=n($E,"CODE",{});var cZr=s(yse);u4o=r(cZr,"model_type"),cZr.forEach(t),b4o=r($E,` property of the config object (either
passed as an argument or loaded from `),Lse=n($E,"CODE",{});var fZr=s(Lse);F4o=r(fZr,"pretrained_model_name_or_path"),fZr.forEach(t),v4o=r($E,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xse=n($E,"CODE",{});var mZr=s(xse);T4o=r(mZr,"pretrained_model_name_or_path"),mZr.forEach(t),M4o=r($E,":"),$E.forEach(t),E4o=i(Xt),se=n(Xt,"UL",{});var ie=s(se);z6=n(ie,"LI",{});var qwe=s(z6);kse=n(qwe,"STRONG",{});var gZr=s(kse);C4o=r(gZr,"bart"),gZr.forEach(t),w4o=r(qwe," \u2014 "),dq=n(qwe,"A",{href:!0});var hZr=s(dq);A4o=r(hZr,"BartForConditionalGeneration"),hZr.forEach(t),y4o=r(qwe," (BART model)"),qwe.forEach(t),L4o=i(ie),Q6=n(ie,"LI",{});var Nwe=s(Q6);Sse=n(Nwe,"STRONG",{});var pZr=s(Sse);x4o=r(pZr,"bigbird_pegasus"),pZr.forEach(t),k4o=r(Nwe," \u2014 "),cq=n(Nwe,"A",{href:!0});var _Zr=s(cq);S4o=r(_Zr,"BigBirdPegasusForConditionalGeneration"),_Zr.forEach(t),R4o=r(Nwe," (BigBirdPegasus model)"),Nwe.forEach(t),B4o=i(ie),W6=n(ie,"LI",{});var jwe=s(W6);Rse=n(jwe,"STRONG",{});var uZr=s(Rse);P4o=r(uZr,"blenderbot"),uZr.forEach(t),$4o=r(jwe," \u2014 "),fq=n(jwe,"A",{href:!0});var bZr=s(fq);I4o=r(bZr,"BlenderbotForConditionalGeneration"),bZr.forEach(t),q4o=r(jwe," (Blenderbot model)"),jwe.forEach(t),N4o=i(ie),H6=n(ie,"LI",{});var Dwe=s(H6);Bse=n(Dwe,"STRONG",{});var FZr=s(Bse);j4o=r(FZr,"blenderbot-small"),FZr.forEach(t),D4o=r(Dwe," \u2014 "),mq=n(Dwe,"A",{href:!0});var vZr=s(mq);G4o=r(vZr,"BlenderbotSmallForConditionalGeneration"),vZr.forEach(t),O4o=r(Dwe," (BlenderbotSmall model)"),Dwe.forEach(t),V4o=i(ie),U6=n(ie,"LI",{});var Gwe=s(U6);Pse=n(Gwe,"STRONG",{});var TZr=s(Pse);X4o=r(TZr,"encoder-decoder"),TZr.forEach(t),z4o=r(Gwe," \u2014 "),gq=n(Gwe,"A",{href:!0});var MZr=s(gq);Q4o=r(MZr,"EncoderDecoderModel"),MZr.forEach(t),W4o=r(Gwe," (Encoder decoder model)"),Gwe.forEach(t),H4o=i(ie),J6=n(ie,"LI",{});var Owe=s(J6);$se=n(Owe,"STRONG",{});var EZr=s($se);U4o=r(EZr,"fsmt"),EZr.forEach(t),J4o=r(Owe," \u2014 "),hq=n(Owe,"A",{href:!0});var CZr=s(hq);Y4o=r(CZr,"FSMTForConditionalGeneration"),CZr.forEach(t),K4o=r(Owe," (FairSeq Machine-Translation model)"),Owe.forEach(t),Z4o=i(ie),Y6=n(ie,"LI",{});var Vwe=s(Y6);Ise=n(Vwe,"STRONG",{});var wZr=s(Ise);eEo=r(wZr,"led"),wZr.forEach(t),oEo=r(Vwe," \u2014 "),pq=n(Vwe,"A",{href:!0});var AZr=s(pq);rEo=r(AZr,"LEDForConditionalGeneration"),AZr.forEach(t),tEo=r(Vwe," (LED model)"),Vwe.forEach(t),aEo=i(ie),K6=n(ie,"LI",{});var Xwe=s(K6);qse=n(Xwe,"STRONG",{});var yZr=s(qse);nEo=r(yZr,"m2m_100"),yZr.forEach(t),sEo=r(Xwe," \u2014 "),_q=n(Xwe,"A",{href:!0});var LZr=s(_q);lEo=r(LZr,"M2M100ForConditionalGeneration"),LZr.forEach(t),iEo=r(Xwe," (M2M100 model)"),Xwe.forEach(t),dEo=i(ie),Z6=n(ie,"LI",{});var zwe=s(Z6);Nse=n(zwe,"STRONG",{});var xZr=s(Nse);cEo=r(xZr,"marian"),xZr.forEach(t),fEo=r(zwe," \u2014 "),uq=n(zwe,"A",{href:!0});var kZr=s(uq);mEo=r(kZr,"MarianMTModel"),kZr.forEach(t),gEo=r(zwe," (Marian model)"),zwe.forEach(t),hEo=i(ie),e1=n(ie,"LI",{});var Qwe=s(e1);jse=n(Qwe,"STRONG",{});var SZr=s(jse);pEo=r(SZr,"mbart"),SZr.forEach(t),_Eo=r(Qwe," \u2014 "),bq=n(Qwe,"A",{href:!0});var RZr=s(bq);uEo=r(RZr,"MBartForConditionalGeneration"),RZr.forEach(t),bEo=r(Qwe," (mBART model)"),Qwe.forEach(t),FEo=i(ie),o1=n(ie,"LI",{});var Wwe=s(o1);Dse=n(Wwe,"STRONG",{});var BZr=s(Dse);vEo=r(BZr,"mt5"),BZr.forEach(t),TEo=r(Wwe," \u2014 "),Fq=n(Wwe,"A",{href:!0});var PZr=s(Fq);MEo=r(PZr,"MT5ForConditionalGeneration"),PZr.forEach(t),EEo=r(Wwe," (mT5 model)"),Wwe.forEach(t),CEo=i(ie),r1=n(ie,"LI",{});var Hwe=s(r1);Gse=n(Hwe,"STRONG",{});var $Zr=s(Gse);wEo=r($Zr,"pegasus"),$Zr.forEach(t),AEo=r(Hwe," \u2014 "),vq=n(Hwe,"A",{href:!0});var IZr=s(vq);yEo=r(IZr,"PegasusForConditionalGeneration"),IZr.forEach(t),LEo=r(Hwe," (Pegasus model)"),Hwe.forEach(t),xEo=i(ie),t1=n(ie,"LI",{});var Uwe=s(t1);Ose=n(Uwe,"STRONG",{});var qZr=s(Ose);kEo=r(qZr,"plbart"),qZr.forEach(t),SEo=r(Uwe," \u2014 "),Tq=n(Uwe,"A",{href:!0});var NZr=s(Tq);REo=r(NZr,"PLBartForConditionalGeneration"),NZr.forEach(t),BEo=r(Uwe," (PLBart model)"),Uwe.forEach(t),PEo=i(ie),a1=n(ie,"LI",{});var Jwe=s(a1);Vse=n(Jwe,"STRONG",{});var jZr=s(Vse);$Eo=r(jZr,"prophetnet"),jZr.forEach(t),IEo=r(Jwe," \u2014 "),Mq=n(Jwe,"A",{href:!0});var DZr=s(Mq);qEo=r(DZr,"ProphetNetForConditionalGeneration"),DZr.forEach(t),NEo=r(Jwe," (ProphetNet model)"),Jwe.forEach(t),jEo=i(ie),n1=n(ie,"LI",{});var Ywe=s(n1);Xse=n(Ywe,"STRONG",{});var GZr=s(Xse);DEo=r(GZr,"t5"),GZr.forEach(t),GEo=r(Ywe," \u2014 "),Eq=n(Ywe,"A",{href:!0});var OZr=s(Eq);OEo=r(OZr,"T5ForConditionalGeneration"),OZr.forEach(t),VEo=r(Ywe," (T5 model)"),Ywe.forEach(t),XEo=i(ie),s1=n(ie,"LI",{});var Kwe=s(s1);zse=n(Kwe,"STRONG",{});var VZr=s(zse);zEo=r(VZr,"xlm-prophetnet"),VZr.forEach(t),QEo=r(Kwe," \u2014 "),Cq=n(Kwe,"A",{href:!0});var XZr=s(Cq);WEo=r(XZr,"XLMProphetNetForConditionalGeneration"),XZr.forEach(t),HEo=r(Kwe," (XLMProphetNet model)"),Kwe.forEach(t),ie.forEach(t),UEo=i(Xt),l1=n(Xt,"P",{});var Zwe=s(l1);JEo=r(Zwe,"The model is set in evaluation mode by default using "),Qse=n(Zwe,"CODE",{});var zZr=s(Qse);YEo=r(zZr,"model.eval()"),zZr.forEach(t),KEo=r(Zwe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Wse=n(Zwe,"CODE",{});var QZr=s(Wse);ZEo=r(QZr,"model.train()"),QZr.forEach(t),Zwe.forEach(t),eCo=i(Xt),Hse=n(Xt,"P",{});var WZr=s(Hse);oCo=r(WZr,"Examples:"),WZr.forEach(t),rCo=i(Xt),m(G3.$$.fragment,Xt),Xt.forEach(t),el.forEach(t),eBe=i(c),fd=n(c,"H2",{class:!0});var d$e=s(fd);i1=n(d$e,"A",{id:!0,class:!0,href:!0});var HZr=s(i1);Use=n(HZr,"SPAN",{});var UZr=s(Use);m(O3.$$.fragment,UZr),UZr.forEach(t),HZr.forEach(t),tCo=i(d$e),Jse=n(d$e,"SPAN",{});var JZr=s(Jse);aCo=r(JZr,"AutoModelForSequenceClassification"),JZr.forEach(t),d$e.forEach(t),oBe=i(c),or=n(c,"DIV",{class:!0});var rl=s(or);m(V3.$$.fragment,rl),nCo=i(rl),md=n(rl,"P",{});var TU=s(md);sCo=r(TU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),wq=n(TU,"A",{href:!0});var YZr=s(wq);lCo=r(YZr,"from_pretrained()"),YZr.forEach(t),iCo=r(TU," class method or the "),Aq=n(TU,"A",{href:!0});var KZr=s(Aq);dCo=r(KZr,"from_config()"),KZr.forEach(t),cCo=r(TU,` class
method.`),TU.forEach(t),fCo=i(rl),X3=n(rl,"P",{});var c$e=s(X3);mCo=r(c$e,"This class cannot be instantiated directly using "),Yse=n(c$e,"CODE",{});var ZZr=s(Yse);gCo=r(ZZr,"__init__()"),ZZr.forEach(t),hCo=r(c$e," (throws an error)."),c$e.forEach(t),pCo=i(rl),Ur=n(rl,"DIV",{class:!0});var tl=s(Ur);m(z3.$$.fragment,tl),_Co=i(tl),Kse=n(tl,"P",{});var eet=s(Kse);uCo=r(eet,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),eet.forEach(t),bCo=i(tl),gd=n(tl,"P",{});var MU=s(gd);FCo=r(MU,`Note:
Loading a model from its configuration file does `),Zse=n(MU,"STRONG",{});var oet=s(Zse);vCo=r(oet,"not"),oet.forEach(t),TCo=r(MU,` load the model weights. It only affects the
model\u2019s configuration. Use `),yq=n(MU,"A",{href:!0});var ret=s(yq);MCo=r(ret,"from_pretrained()"),ret.forEach(t),ECo=r(MU," to load the model weights."),MU.forEach(t),CCo=i(tl),ele=n(tl,"P",{});var tet=s(ele);wCo=r(tet,"Examples:"),tet.forEach(t),ACo=i(tl),m(Q3.$$.fragment,tl),tl.forEach(t),yCo=i(rl),Oe=n(rl,"DIV",{class:!0});var zt=s(Oe);m(W3.$$.fragment,zt),LCo=i(zt),ole=n(zt,"P",{});var aet=s(ole);xCo=r(aet,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),aet.forEach(t),kCo=i(zt),Ua=n(zt,"P",{});var IE=s(Ua);SCo=r(IE,"The model class to instantiate is selected based on the "),rle=n(IE,"CODE",{});var net=s(rle);RCo=r(net,"model_type"),net.forEach(t),BCo=r(IE,` property of the config object (either
passed as an argument or loaded from `),tle=n(IE,"CODE",{});var set=s(tle);PCo=r(set,"pretrained_model_name_or_path"),set.forEach(t),$Co=r(IE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ale=n(IE,"CODE",{});var iet=s(ale);ICo=r(iet,"pretrained_model_name_or_path"),iet.forEach(t),qCo=r(IE,":"),IE.forEach(t),NCo=i(zt),y=n(zt,"UL",{});var L=s(y);d1=n(L,"LI",{});var eAe=s(d1);nle=n(eAe,"STRONG",{});var det=s(nle);jCo=r(det,"albert"),det.forEach(t),DCo=r(eAe," \u2014 "),Lq=n(eAe,"A",{href:!0});var cet=s(Lq);GCo=r(cet,"AlbertForSequenceClassification"),cet.forEach(t),OCo=r(eAe," (ALBERT model)"),eAe.forEach(t),VCo=i(L),c1=n(L,"LI",{});var oAe=s(c1);sle=n(oAe,"STRONG",{});var fet=s(sle);XCo=r(fet,"bart"),fet.forEach(t),zCo=r(oAe," \u2014 "),xq=n(oAe,"A",{href:!0});var met=s(xq);QCo=r(met,"BartForSequenceClassification"),met.forEach(t),WCo=r(oAe," (BART model)"),oAe.forEach(t),HCo=i(L),f1=n(L,"LI",{});var rAe=s(f1);lle=n(rAe,"STRONG",{});var get=s(lle);UCo=r(get,"bert"),get.forEach(t),JCo=r(rAe," \u2014 "),kq=n(rAe,"A",{href:!0});var het=s(kq);YCo=r(het,"BertForSequenceClassification"),het.forEach(t),KCo=r(rAe," (BERT model)"),rAe.forEach(t),ZCo=i(L),m1=n(L,"LI",{});var tAe=s(m1);ile=n(tAe,"STRONG",{});var pet=s(ile);e3o=r(pet,"big_bird"),pet.forEach(t),o3o=r(tAe," \u2014 "),Sq=n(tAe,"A",{href:!0});var _et=s(Sq);r3o=r(_et,"BigBirdForSequenceClassification"),_et.forEach(t),t3o=r(tAe," (BigBird model)"),tAe.forEach(t),a3o=i(L),g1=n(L,"LI",{});var aAe=s(g1);dle=n(aAe,"STRONG",{});var uet=s(dle);n3o=r(uet,"bigbird_pegasus"),uet.forEach(t),s3o=r(aAe," \u2014 "),Rq=n(aAe,"A",{href:!0});var bet=s(Rq);l3o=r(bet,"BigBirdPegasusForSequenceClassification"),bet.forEach(t),i3o=r(aAe," (BigBirdPegasus model)"),aAe.forEach(t),d3o=i(L),h1=n(L,"LI",{});var nAe=s(h1);cle=n(nAe,"STRONG",{});var Fet=s(cle);c3o=r(Fet,"camembert"),Fet.forEach(t),f3o=r(nAe," \u2014 "),Bq=n(nAe,"A",{href:!0});var vet=s(Bq);m3o=r(vet,"CamembertForSequenceClassification"),vet.forEach(t),g3o=r(nAe," (CamemBERT model)"),nAe.forEach(t),h3o=i(L),p1=n(L,"LI",{});var sAe=s(p1);fle=n(sAe,"STRONG",{});var Tet=s(fle);p3o=r(Tet,"canine"),Tet.forEach(t),_3o=r(sAe," \u2014 "),Pq=n(sAe,"A",{href:!0});var Met=s(Pq);u3o=r(Met,"CanineForSequenceClassification"),Met.forEach(t),b3o=r(sAe," (Canine model)"),sAe.forEach(t),F3o=i(L),_1=n(L,"LI",{});var lAe=s(_1);mle=n(lAe,"STRONG",{});var Eet=s(mle);v3o=r(Eet,"convbert"),Eet.forEach(t),T3o=r(lAe," \u2014 "),$q=n(lAe,"A",{href:!0});var Cet=s($q);M3o=r(Cet,"ConvBertForSequenceClassification"),Cet.forEach(t),E3o=r(lAe," (ConvBERT model)"),lAe.forEach(t),C3o=i(L),u1=n(L,"LI",{});var iAe=s(u1);gle=n(iAe,"STRONG",{});var wet=s(gle);w3o=r(wet,"ctrl"),wet.forEach(t),A3o=r(iAe," \u2014 "),Iq=n(iAe,"A",{href:!0});var Aet=s(Iq);y3o=r(Aet,"CTRLForSequenceClassification"),Aet.forEach(t),L3o=r(iAe," (CTRL model)"),iAe.forEach(t),x3o=i(L),b1=n(L,"LI",{});var dAe=s(b1);hle=n(dAe,"STRONG",{});var yet=s(hle);k3o=r(yet,"data2vec-text"),yet.forEach(t),S3o=r(dAe," \u2014 "),qq=n(dAe,"A",{href:!0});var Let=s(qq);R3o=r(Let,"Data2VecTextForSequenceClassification"),Let.forEach(t),B3o=r(dAe," (Data2VecText model)"),dAe.forEach(t),P3o=i(L),F1=n(L,"LI",{});var cAe=s(F1);ple=n(cAe,"STRONG",{});var xet=s(ple);$3o=r(xet,"deberta"),xet.forEach(t),I3o=r(cAe," \u2014 "),Nq=n(cAe,"A",{href:!0});var ket=s(Nq);q3o=r(ket,"DebertaForSequenceClassification"),ket.forEach(t),N3o=r(cAe," (DeBERTa model)"),cAe.forEach(t),j3o=i(L),v1=n(L,"LI",{});var fAe=s(v1);_le=n(fAe,"STRONG",{});var Set=s(_le);D3o=r(Set,"deberta-v2"),Set.forEach(t),G3o=r(fAe," \u2014 "),jq=n(fAe,"A",{href:!0});var Ret=s(jq);O3o=r(Ret,"DebertaV2ForSequenceClassification"),Ret.forEach(t),V3o=r(fAe," (DeBERTa-v2 model)"),fAe.forEach(t),X3o=i(L),T1=n(L,"LI",{});var mAe=s(T1);ule=n(mAe,"STRONG",{});var Bet=s(ule);z3o=r(Bet,"distilbert"),Bet.forEach(t),Q3o=r(mAe," \u2014 "),Dq=n(mAe,"A",{href:!0});var Pet=s(Dq);W3o=r(Pet,"DistilBertForSequenceClassification"),Pet.forEach(t),H3o=r(mAe," (DistilBERT model)"),mAe.forEach(t),U3o=i(L),M1=n(L,"LI",{});var gAe=s(M1);ble=n(gAe,"STRONG",{});var $et=s(ble);J3o=r($et,"electra"),$et.forEach(t),Y3o=r(gAe," \u2014 "),Gq=n(gAe,"A",{href:!0});var Iet=s(Gq);K3o=r(Iet,"ElectraForSequenceClassification"),Iet.forEach(t),Z3o=r(gAe," (ELECTRA model)"),gAe.forEach(t),ewo=i(L),E1=n(L,"LI",{});var hAe=s(E1);Fle=n(hAe,"STRONG",{});var qet=s(Fle);owo=r(qet,"flaubert"),qet.forEach(t),rwo=r(hAe," \u2014 "),Oq=n(hAe,"A",{href:!0});var Net=s(Oq);two=r(Net,"FlaubertForSequenceClassification"),Net.forEach(t),awo=r(hAe," (FlauBERT model)"),hAe.forEach(t),nwo=i(L),C1=n(L,"LI",{});var pAe=s(C1);vle=n(pAe,"STRONG",{});var jet=s(vle);swo=r(jet,"fnet"),jet.forEach(t),lwo=r(pAe," \u2014 "),Vq=n(pAe,"A",{href:!0});var Det=s(Vq);iwo=r(Det,"FNetForSequenceClassification"),Det.forEach(t),dwo=r(pAe," (FNet model)"),pAe.forEach(t),cwo=i(L),w1=n(L,"LI",{});var _Ae=s(w1);Tle=n(_Ae,"STRONG",{});var Get=s(Tle);fwo=r(Get,"funnel"),Get.forEach(t),mwo=r(_Ae," \u2014 "),Xq=n(_Ae,"A",{href:!0});var Oet=s(Xq);gwo=r(Oet,"FunnelForSequenceClassification"),Oet.forEach(t),hwo=r(_Ae," (Funnel Transformer model)"),_Ae.forEach(t),pwo=i(L),A1=n(L,"LI",{});var uAe=s(A1);Mle=n(uAe,"STRONG",{});var Vet=s(Mle);_wo=r(Vet,"gpt2"),Vet.forEach(t),uwo=r(uAe," \u2014 "),zq=n(uAe,"A",{href:!0});var Xet=s(zq);bwo=r(Xet,"GPT2ForSequenceClassification"),Xet.forEach(t),Fwo=r(uAe," (OpenAI GPT-2 model)"),uAe.forEach(t),vwo=i(L),y1=n(L,"LI",{});var bAe=s(y1);Ele=n(bAe,"STRONG",{});var zet=s(Ele);Two=r(zet,"gpt_neo"),zet.forEach(t),Mwo=r(bAe," \u2014 "),Qq=n(bAe,"A",{href:!0});var Qet=s(Qq);Ewo=r(Qet,"GPTNeoForSequenceClassification"),Qet.forEach(t),Cwo=r(bAe," (GPT Neo model)"),bAe.forEach(t),wwo=i(L),L1=n(L,"LI",{});var FAe=s(L1);Cle=n(FAe,"STRONG",{});var Wet=s(Cle);Awo=r(Wet,"gpt_neox"),Wet.forEach(t),ywo=r(FAe," \u2014 "),wle=n(FAe,"CODE",{});var Het=s(wle);Lwo=r(Het,"GPTNeoXForSequenceClassification"),Het.forEach(t),xwo=r(FAe," (GPTNeoX model)"),FAe.forEach(t),kwo=i(L),x1=n(L,"LI",{});var vAe=s(x1);Ale=n(vAe,"STRONG",{});var Uet=s(Ale);Swo=r(Uet,"gptj"),Uet.forEach(t),Rwo=r(vAe," \u2014 "),Wq=n(vAe,"A",{href:!0});var Jet=s(Wq);Bwo=r(Jet,"GPTJForSequenceClassification"),Jet.forEach(t),Pwo=r(vAe," (GPT-J model)"),vAe.forEach(t),$wo=i(L),k1=n(L,"LI",{});var TAe=s(k1);yle=n(TAe,"STRONG",{});var Yet=s(yle);Iwo=r(Yet,"ibert"),Yet.forEach(t),qwo=r(TAe," \u2014 "),Hq=n(TAe,"A",{href:!0});var Ket=s(Hq);Nwo=r(Ket,"IBertForSequenceClassification"),Ket.forEach(t),jwo=r(TAe," (I-BERT model)"),TAe.forEach(t),Dwo=i(L),S1=n(L,"LI",{});var MAe=s(S1);Lle=n(MAe,"STRONG",{});var Zet=s(Lle);Gwo=r(Zet,"layoutlm"),Zet.forEach(t),Owo=r(MAe," \u2014 "),Uq=n(MAe,"A",{href:!0});var eot=s(Uq);Vwo=r(eot,"LayoutLMForSequenceClassification"),eot.forEach(t),Xwo=r(MAe," (LayoutLM model)"),MAe.forEach(t),zwo=i(L),R1=n(L,"LI",{});var EAe=s(R1);xle=n(EAe,"STRONG",{});var oot=s(xle);Qwo=r(oot,"layoutlmv2"),oot.forEach(t),Wwo=r(EAe," \u2014 "),Jq=n(EAe,"A",{href:!0});var rot=s(Jq);Hwo=r(rot,"LayoutLMv2ForSequenceClassification"),rot.forEach(t),Uwo=r(EAe," (LayoutLMv2 model)"),EAe.forEach(t),Jwo=i(L),B1=n(L,"LI",{});var CAe=s(B1);kle=n(CAe,"STRONG",{});var tot=s(kle);Ywo=r(tot,"led"),tot.forEach(t),Kwo=r(CAe," \u2014 "),Yq=n(CAe,"A",{href:!0});var aot=s(Yq);Zwo=r(aot,"LEDForSequenceClassification"),aot.forEach(t),eAo=r(CAe," (LED model)"),CAe.forEach(t),oAo=i(L),P1=n(L,"LI",{});var wAe=s(P1);Sle=n(wAe,"STRONG",{});var not=s(Sle);rAo=r(not,"longformer"),not.forEach(t),tAo=r(wAe," \u2014 "),Kq=n(wAe,"A",{href:!0});var sot=s(Kq);aAo=r(sot,"LongformerForSequenceClassification"),sot.forEach(t),nAo=r(wAe," (Longformer model)"),wAe.forEach(t),sAo=i(L),$1=n(L,"LI",{});var AAe=s($1);Rle=n(AAe,"STRONG",{});var lot=s(Rle);lAo=r(lot,"mbart"),lot.forEach(t),iAo=r(AAe," \u2014 "),Zq=n(AAe,"A",{href:!0});var iot=s(Zq);dAo=r(iot,"MBartForSequenceClassification"),iot.forEach(t),cAo=r(AAe," (mBART model)"),AAe.forEach(t),fAo=i(L),I1=n(L,"LI",{});var yAe=s(I1);Ble=n(yAe,"STRONG",{});var dot=s(Ble);mAo=r(dot,"megatron-bert"),dot.forEach(t),gAo=r(yAe," \u2014 "),eN=n(yAe,"A",{href:!0});var cot=s(eN);hAo=r(cot,"MegatronBertForSequenceClassification"),cot.forEach(t),pAo=r(yAe," (MegatronBert model)"),yAe.forEach(t),_Ao=i(L),q1=n(L,"LI",{});var LAe=s(q1);Ple=n(LAe,"STRONG",{});var fot=s(Ple);uAo=r(fot,"mobilebert"),fot.forEach(t),bAo=r(LAe," \u2014 "),oN=n(LAe,"A",{href:!0});var mot=s(oN);FAo=r(mot,"MobileBertForSequenceClassification"),mot.forEach(t),vAo=r(LAe," (MobileBERT model)"),LAe.forEach(t),TAo=i(L),N1=n(L,"LI",{});var xAe=s(N1);$le=n(xAe,"STRONG",{});var got=s($le);MAo=r(got,"mpnet"),got.forEach(t),EAo=r(xAe," \u2014 "),rN=n(xAe,"A",{href:!0});var hot=s(rN);CAo=r(hot,"MPNetForSequenceClassification"),hot.forEach(t),wAo=r(xAe," (MPNet model)"),xAe.forEach(t),AAo=i(L),j1=n(L,"LI",{});var kAe=s(j1);Ile=n(kAe,"STRONG",{});var pot=s(Ile);yAo=r(pot,"nystromformer"),pot.forEach(t),LAo=r(kAe," \u2014 "),tN=n(kAe,"A",{href:!0});var _ot=s(tN);xAo=r(_ot,"NystromformerForSequenceClassification"),_ot.forEach(t),kAo=r(kAe," (Nystromformer model)"),kAe.forEach(t),SAo=i(L),D1=n(L,"LI",{});var SAe=s(D1);qle=n(SAe,"STRONG",{});var uot=s(qle);RAo=r(uot,"openai-gpt"),uot.forEach(t),BAo=r(SAe," \u2014 "),aN=n(SAe,"A",{href:!0});var bot=s(aN);PAo=r(bot,"OpenAIGPTForSequenceClassification"),bot.forEach(t),$Ao=r(SAe," (OpenAI GPT model)"),SAe.forEach(t),IAo=i(L),G1=n(L,"LI",{});var RAe=s(G1);Nle=n(RAe,"STRONG",{});var Fot=s(Nle);qAo=r(Fot,"perceiver"),Fot.forEach(t),NAo=r(RAe," \u2014 "),nN=n(RAe,"A",{href:!0});var vot=s(nN);jAo=r(vot,"PerceiverForSequenceClassification"),vot.forEach(t),DAo=r(RAe," (Perceiver model)"),RAe.forEach(t),GAo=i(L),O1=n(L,"LI",{});var BAe=s(O1);jle=n(BAe,"STRONG",{});var Tot=s(jle);OAo=r(Tot,"plbart"),Tot.forEach(t),VAo=r(BAe," \u2014 "),sN=n(BAe,"A",{href:!0});var Mot=s(sN);XAo=r(Mot,"PLBartForSequenceClassification"),Mot.forEach(t),zAo=r(BAe," (PLBart model)"),BAe.forEach(t),QAo=i(L),V1=n(L,"LI",{});var PAe=s(V1);Dle=n(PAe,"STRONG",{});var Eot=s(Dle);WAo=r(Eot,"qdqbert"),Eot.forEach(t),HAo=r(PAe," \u2014 "),lN=n(PAe,"A",{href:!0});var Cot=s(lN);UAo=r(Cot,"QDQBertForSequenceClassification"),Cot.forEach(t),JAo=r(PAe," (QDQBert model)"),PAe.forEach(t),YAo=i(L),X1=n(L,"LI",{});var $Ae=s(X1);Gle=n($Ae,"STRONG",{});var wot=s(Gle);KAo=r(wot,"reformer"),wot.forEach(t),ZAo=r($Ae," \u2014 "),iN=n($Ae,"A",{href:!0});var Aot=s(iN);e0o=r(Aot,"ReformerForSequenceClassification"),Aot.forEach(t),o0o=r($Ae," (Reformer model)"),$Ae.forEach(t),r0o=i(L),z1=n(L,"LI",{});var IAe=s(z1);Ole=n(IAe,"STRONG",{});var yot=s(Ole);t0o=r(yot,"rembert"),yot.forEach(t),a0o=r(IAe," \u2014 "),dN=n(IAe,"A",{href:!0});var Lot=s(dN);n0o=r(Lot,"RemBertForSequenceClassification"),Lot.forEach(t),s0o=r(IAe," (RemBERT model)"),IAe.forEach(t),l0o=i(L),Q1=n(L,"LI",{});var qAe=s(Q1);Vle=n(qAe,"STRONG",{});var xot=s(Vle);i0o=r(xot,"roberta"),xot.forEach(t),d0o=r(qAe," \u2014 "),cN=n(qAe,"A",{href:!0});var kot=s(cN);c0o=r(kot,"RobertaForSequenceClassification"),kot.forEach(t),f0o=r(qAe," (RoBERTa model)"),qAe.forEach(t),m0o=i(L),W1=n(L,"LI",{});var NAe=s(W1);Xle=n(NAe,"STRONG",{});var Sot=s(Xle);g0o=r(Sot,"roformer"),Sot.forEach(t),h0o=r(NAe," \u2014 "),fN=n(NAe,"A",{href:!0});var Rot=s(fN);p0o=r(Rot,"RoFormerForSequenceClassification"),Rot.forEach(t),_0o=r(NAe," (RoFormer model)"),NAe.forEach(t),u0o=i(L),H1=n(L,"LI",{});var jAe=s(H1);zle=n(jAe,"STRONG",{});var Bot=s(zle);b0o=r(Bot,"squeezebert"),Bot.forEach(t),F0o=r(jAe," \u2014 "),mN=n(jAe,"A",{href:!0});var Pot=s(mN);v0o=r(Pot,"SqueezeBertForSequenceClassification"),Pot.forEach(t),T0o=r(jAe," (SqueezeBERT model)"),jAe.forEach(t),M0o=i(L),U1=n(L,"LI",{});var DAe=s(U1);Qle=n(DAe,"STRONG",{});var $ot=s(Qle);E0o=r($ot,"tapas"),$ot.forEach(t),C0o=r(DAe," \u2014 "),gN=n(DAe,"A",{href:!0});var Iot=s(gN);w0o=r(Iot,"TapasForSequenceClassification"),Iot.forEach(t),A0o=r(DAe," (TAPAS model)"),DAe.forEach(t),y0o=i(L),J1=n(L,"LI",{});var GAe=s(J1);Wle=n(GAe,"STRONG",{});var qot=s(Wle);L0o=r(qot,"transfo-xl"),qot.forEach(t),x0o=r(GAe," \u2014 "),hN=n(GAe,"A",{href:!0});var Not=s(hN);k0o=r(Not,"TransfoXLForSequenceClassification"),Not.forEach(t),S0o=r(GAe," (Transformer-XL model)"),GAe.forEach(t),R0o=i(L),Y1=n(L,"LI",{});var OAe=s(Y1);Hle=n(OAe,"STRONG",{});var jot=s(Hle);B0o=r(jot,"xlm"),jot.forEach(t),P0o=r(OAe," \u2014 "),pN=n(OAe,"A",{href:!0});var Dot=s(pN);$0o=r(Dot,"XLMForSequenceClassification"),Dot.forEach(t),I0o=r(OAe," (XLM model)"),OAe.forEach(t),q0o=i(L),K1=n(L,"LI",{});var VAe=s(K1);Ule=n(VAe,"STRONG",{});var Got=s(Ule);N0o=r(Got,"xlm-roberta"),Got.forEach(t),j0o=r(VAe," \u2014 "),_N=n(VAe,"A",{href:!0});var Oot=s(_N);D0o=r(Oot,"XLMRobertaForSequenceClassification"),Oot.forEach(t),G0o=r(VAe," (XLM-RoBERTa model)"),VAe.forEach(t),O0o=i(L),Z1=n(L,"LI",{});var XAe=s(Z1);Jle=n(XAe,"STRONG",{});var Vot=s(Jle);V0o=r(Vot,"xlm-roberta-xl"),Vot.forEach(t),X0o=r(XAe," \u2014 "),uN=n(XAe,"A",{href:!0});var Xot=s(uN);z0o=r(Xot,"XLMRobertaXLForSequenceClassification"),Xot.forEach(t),Q0o=r(XAe," (XLM-RoBERTa-XL model)"),XAe.forEach(t),W0o=i(L),eb=n(L,"LI",{});var zAe=s(eb);Yle=n(zAe,"STRONG",{});var zot=s(Yle);H0o=r(zot,"xlnet"),zot.forEach(t),U0o=r(zAe," \u2014 "),bN=n(zAe,"A",{href:!0});var Qot=s(bN);J0o=r(Qot,"XLNetForSequenceClassification"),Qot.forEach(t),Y0o=r(zAe," (XLNet model)"),zAe.forEach(t),K0o=i(L),ob=n(L,"LI",{});var QAe=s(ob);Kle=n(QAe,"STRONG",{});var Wot=s(Kle);Z0o=r(Wot,"yoso"),Wot.forEach(t),eyo=r(QAe," \u2014 "),FN=n(QAe,"A",{href:!0});var Hot=s(FN);oyo=r(Hot,"YosoForSequenceClassification"),Hot.forEach(t),ryo=r(QAe," (YOSO model)"),QAe.forEach(t),L.forEach(t),tyo=i(zt),rb=n(zt,"P",{});var WAe=s(rb);ayo=r(WAe,"The model is set in evaluation mode by default using "),Zle=n(WAe,"CODE",{});var Uot=s(Zle);nyo=r(Uot,"model.eval()"),Uot.forEach(t),syo=r(WAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),eie=n(WAe,"CODE",{});var Jot=s(eie);lyo=r(Jot,"model.train()"),Jot.forEach(t),WAe.forEach(t),iyo=i(zt),oie=n(zt,"P",{});var Yot=s(oie);dyo=r(Yot,"Examples:"),Yot.forEach(t),cyo=i(zt),m(H3.$$.fragment,zt),zt.forEach(t),rl.forEach(t),rBe=i(c),hd=n(c,"H2",{class:!0});var f$e=s(hd);tb=n(f$e,"A",{id:!0,class:!0,href:!0});var Kot=s(tb);rie=n(Kot,"SPAN",{});var Zot=s(rie);m(U3.$$.fragment,Zot),Zot.forEach(t),Kot.forEach(t),fyo=i(f$e),tie=n(f$e,"SPAN",{});var ert=s(tie);myo=r(ert,"AutoModelForMultipleChoice"),ert.forEach(t),f$e.forEach(t),tBe=i(c),rr=n(c,"DIV",{class:!0});var al=s(rr);m(J3.$$.fragment,al),gyo=i(al),pd=n(al,"P",{});var EU=s(pd);hyo=r(EU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),vN=n(EU,"A",{href:!0});var ort=s(vN);pyo=r(ort,"from_pretrained()"),ort.forEach(t),_yo=r(EU," class method or the "),TN=n(EU,"A",{href:!0});var rrt=s(TN);uyo=r(rrt,"from_config()"),rrt.forEach(t),byo=r(EU,` class
method.`),EU.forEach(t),Fyo=i(al),Y3=n(al,"P",{});var m$e=s(Y3);vyo=r(m$e,"This class cannot be instantiated directly using "),aie=n(m$e,"CODE",{});var trt=s(aie);Tyo=r(trt,"__init__()"),trt.forEach(t),Myo=r(m$e," (throws an error)."),m$e.forEach(t),Eyo=i(al),Jr=n(al,"DIV",{class:!0});var nl=s(Jr);m(K3.$$.fragment,nl),Cyo=i(nl),nie=n(nl,"P",{});var art=s(nie);wyo=r(art,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),art.forEach(t),Ayo=i(nl),_d=n(nl,"P",{});var CU=s(_d);yyo=r(CU,`Note:
Loading a model from its configuration file does `),sie=n(CU,"STRONG",{});var nrt=s(sie);Lyo=r(nrt,"not"),nrt.forEach(t),xyo=r(CU,` load the model weights. It only affects the
model\u2019s configuration. Use `),MN=n(CU,"A",{href:!0});var srt=s(MN);kyo=r(srt,"from_pretrained()"),srt.forEach(t),Syo=r(CU," to load the model weights."),CU.forEach(t),Ryo=i(nl),lie=n(nl,"P",{});var lrt=s(lie);Byo=r(lrt,"Examples:"),lrt.forEach(t),Pyo=i(nl),m(Z3.$$.fragment,nl),nl.forEach(t),$yo=i(al),Ve=n(al,"DIV",{class:!0});var Qt=s(Ve);m(ew.$$.fragment,Qt),Iyo=i(Qt),iie=n(Qt,"P",{});var irt=s(iie);qyo=r(irt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),irt.forEach(t),Nyo=i(Qt),Ja=n(Qt,"P",{});var qE=s(Ja);jyo=r(qE,"The model class to instantiate is selected based on the "),die=n(qE,"CODE",{});var drt=s(die);Dyo=r(drt,"model_type"),drt.forEach(t),Gyo=r(qE,` property of the config object (either
passed as an argument or loaded from `),cie=n(qE,"CODE",{});var crt=s(cie);Oyo=r(crt,"pretrained_model_name_or_path"),crt.forEach(t),Vyo=r(qE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fie=n(qE,"CODE",{});var frt=s(fie);Xyo=r(frt,"pretrained_model_name_or_path"),frt.forEach(t),zyo=r(qE,":"),qE.forEach(t),Qyo=i(Qt),G=n(Qt,"UL",{});var O=s(G);ab=n(O,"LI",{});var HAe=s(ab);mie=n(HAe,"STRONG",{});var mrt=s(mie);Wyo=r(mrt,"albert"),mrt.forEach(t),Hyo=r(HAe," \u2014 "),EN=n(HAe,"A",{href:!0});var grt=s(EN);Uyo=r(grt,"AlbertForMultipleChoice"),grt.forEach(t),Jyo=r(HAe," (ALBERT model)"),HAe.forEach(t),Yyo=i(O),nb=n(O,"LI",{});var UAe=s(nb);gie=n(UAe,"STRONG",{});var hrt=s(gie);Kyo=r(hrt,"bert"),hrt.forEach(t),Zyo=r(UAe," \u2014 "),CN=n(UAe,"A",{href:!0});var prt=s(CN);eLo=r(prt,"BertForMultipleChoice"),prt.forEach(t),oLo=r(UAe," (BERT model)"),UAe.forEach(t),rLo=i(O),sb=n(O,"LI",{});var JAe=s(sb);hie=n(JAe,"STRONG",{});var _rt=s(hie);tLo=r(_rt,"big_bird"),_rt.forEach(t),aLo=r(JAe," \u2014 "),wN=n(JAe,"A",{href:!0});var urt=s(wN);nLo=r(urt,"BigBirdForMultipleChoice"),urt.forEach(t),sLo=r(JAe," (BigBird model)"),JAe.forEach(t),lLo=i(O),lb=n(O,"LI",{});var YAe=s(lb);pie=n(YAe,"STRONG",{});var brt=s(pie);iLo=r(brt,"camembert"),brt.forEach(t),dLo=r(YAe," \u2014 "),AN=n(YAe,"A",{href:!0});var Frt=s(AN);cLo=r(Frt,"CamembertForMultipleChoice"),Frt.forEach(t),fLo=r(YAe," (CamemBERT model)"),YAe.forEach(t),mLo=i(O),ib=n(O,"LI",{});var KAe=s(ib);_ie=n(KAe,"STRONG",{});var vrt=s(_ie);gLo=r(vrt,"canine"),vrt.forEach(t),hLo=r(KAe," \u2014 "),yN=n(KAe,"A",{href:!0});var Trt=s(yN);pLo=r(Trt,"CanineForMultipleChoice"),Trt.forEach(t),_Lo=r(KAe," (Canine model)"),KAe.forEach(t),uLo=i(O),db=n(O,"LI",{});var ZAe=s(db);uie=n(ZAe,"STRONG",{});var Mrt=s(uie);bLo=r(Mrt,"convbert"),Mrt.forEach(t),FLo=r(ZAe," \u2014 "),LN=n(ZAe,"A",{href:!0});var Ert=s(LN);vLo=r(Ert,"ConvBertForMultipleChoice"),Ert.forEach(t),TLo=r(ZAe," (ConvBERT model)"),ZAe.forEach(t),MLo=i(O),cb=n(O,"LI",{});var e0e=s(cb);bie=n(e0e,"STRONG",{});var Crt=s(bie);ELo=r(Crt,"data2vec-text"),Crt.forEach(t),CLo=r(e0e," \u2014 "),xN=n(e0e,"A",{href:!0});var wrt=s(xN);wLo=r(wrt,"Data2VecTextForMultipleChoice"),wrt.forEach(t),ALo=r(e0e," (Data2VecText model)"),e0e.forEach(t),yLo=i(O),fb=n(O,"LI",{});var o0e=s(fb);Fie=n(o0e,"STRONG",{});var Art=s(Fie);LLo=r(Art,"distilbert"),Art.forEach(t),xLo=r(o0e," \u2014 "),kN=n(o0e,"A",{href:!0});var yrt=s(kN);kLo=r(yrt,"DistilBertForMultipleChoice"),yrt.forEach(t),SLo=r(o0e," (DistilBERT model)"),o0e.forEach(t),RLo=i(O),mb=n(O,"LI",{});var r0e=s(mb);vie=n(r0e,"STRONG",{});var Lrt=s(vie);BLo=r(Lrt,"electra"),Lrt.forEach(t),PLo=r(r0e," \u2014 "),SN=n(r0e,"A",{href:!0});var xrt=s(SN);$Lo=r(xrt,"ElectraForMultipleChoice"),xrt.forEach(t),ILo=r(r0e," (ELECTRA model)"),r0e.forEach(t),qLo=i(O),gb=n(O,"LI",{});var t0e=s(gb);Tie=n(t0e,"STRONG",{});var krt=s(Tie);NLo=r(krt,"flaubert"),krt.forEach(t),jLo=r(t0e," \u2014 "),RN=n(t0e,"A",{href:!0});var Srt=s(RN);DLo=r(Srt,"FlaubertForMultipleChoice"),Srt.forEach(t),GLo=r(t0e," (FlauBERT model)"),t0e.forEach(t),OLo=i(O),hb=n(O,"LI",{});var a0e=s(hb);Mie=n(a0e,"STRONG",{});var Rrt=s(Mie);VLo=r(Rrt,"fnet"),Rrt.forEach(t),XLo=r(a0e," \u2014 "),BN=n(a0e,"A",{href:!0});var Brt=s(BN);zLo=r(Brt,"FNetForMultipleChoice"),Brt.forEach(t),QLo=r(a0e," (FNet model)"),a0e.forEach(t),WLo=i(O),pb=n(O,"LI",{});var n0e=s(pb);Eie=n(n0e,"STRONG",{});var Prt=s(Eie);HLo=r(Prt,"funnel"),Prt.forEach(t),ULo=r(n0e," \u2014 "),PN=n(n0e,"A",{href:!0});var $rt=s(PN);JLo=r($rt,"FunnelForMultipleChoice"),$rt.forEach(t),YLo=r(n0e," (Funnel Transformer model)"),n0e.forEach(t),KLo=i(O),_b=n(O,"LI",{});var s0e=s(_b);Cie=n(s0e,"STRONG",{});var Irt=s(Cie);ZLo=r(Irt,"gpt_neox"),Irt.forEach(t),e8o=r(s0e," \u2014 "),wie=n(s0e,"CODE",{});var qrt=s(wie);o8o=r(qrt,"GPTNeoXForMultipleChoice"),qrt.forEach(t),r8o=r(s0e," (GPTNeoX model)"),s0e.forEach(t),t8o=i(O),ub=n(O,"LI",{});var l0e=s(ub);Aie=n(l0e,"STRONG",{});var Nrt=s(Aie);a8o=r(Nrt,"ibert"),Nrt.forEach(t),n8o=r(l0e," \u2014 "),$N=n(l0e,"A",{href:!0});var jrt=s($N);s8o=r(jrt,"IBertForMultipleChoice"),jrt.forEach(t),l8o=r(l0e," (I-BERT model)"),l0e.forEach(t),i8o=i(O),bb=n(O,"LI",{});var i0e=s(bb);yie=n(i0e,"STRONG",{});var Drt=s(yie);d8o=r(Drt,"longformer"),Drt.forEach(t),c8o=r(i0e," \u2014 "),IN=n(i0e,"A",{href:!0});var Grt=s(IN);f8o=r(Grt,"LongformerForMultipleChoice"),Grt.forEach(t),m8o=r(i0e," (Longformer model)"),i0e.forEach(t),g8o=i(O),Fb=n(O,"LI",{});var d0e=s(Fb);Lie=n(d0e,"STRONG",{});var Ort=s(Lie);h8o=r(Ort,"megatron-bert"),Ort.forEach(t),p8o=r(d0e," \u2014 "),qN=n(d0e,"A",{href:!0});var Vrt=s(qN);_8o=r(Vrt,"MegatronBertForMultipleChoice"),Vrt.forEach(t),u8o=r(d0e," (MegatronBert model)"),d0e.forEach(t),b8o=i(O),vb=n(O,"LI",{});var c0e=s(vb);xie=n(c0e,"STRONG",{});var Xrt=s(xie);F8o=r(Xrt,"mobilebert"),Xrt.forEach(t),v8o=r(c0e," \u2014 "),NN=n(c0e,"A",{href:!0});var zrt=s(NN);T8o=r(zrt,"MobileBertForMultipleChoice"),zrt.forEach(t),M8o=r(c0e," (MobileBERT model)"),c0e.forEach(t),E8o=i(O),Tb=n(O,"LI",{});var f0e=s(Tb);kie=n(f0e,"STRONG",{});var Qrt=s(kie);C8o=r(Qrt,"mpnet"),Qrt.forEach(t),w8o=r(f0e," \u2014 "),jN=n(f0e,"A",{href:!0});var Wrt=s(jN);A8o=r(Wrt,"MPNetForMultipleChoice"),Wrt.forEach(t),y8o=r(f0e," (MPNet model)"),f0e.forEach(t),L8o=i(O),Mb=n(O,"LI",{});var m0e=s(Mb);Sie=n(m0e,"STRONG",{});var Hrt=s(Sie);x8o=r(Hrt,"nystromformer"),Hrt.forEach(t),k8o=r(m0e," \u2014 "),DN=n(m0e,"A",{href:!0});var Urt=s(DN);S8o=r(Urt,"NystromformerForMultipleChoice"),Urt.forEach(t),R8o=r(m0e," (Nystromformer model)"),m0e.forEach(t),B8o=i(O),Eb=n(O,"LI",{});var g0e=s(Eb);Rie=n(g0e,"STRONG",{});var Jrt=s(Rie);P8o=r(Jrt,"qdqbert"),Jrt.forEach(t),$8o=r(g0e," \u2014 "),GN=n(g0e,"A",{href:!0});var Yrt=s(GN);I8o=r(Yrt,"QDQBertForMultipleChoice"),Yrt.forEach(t),q8o=r(g0e," (QDQBert model)"),g0e.forEach(t),N8o=i(O),Cb=n(O,"LI",{});var h0e=s(Cb);Bie=n(h0e,"STRONG",{});var Krt=s(Bie);j8o=r(Krt,"rembert"),Krt.forEach(t),D8o=r(h0e," \u2014 "),ON=n(h0e,"A",{href:!0});var Zrt=s(ON);G8o=r(Zrt,"RemBertForMultipleChoice"),Zrt.forEach(t),O8o=r(h0e," (RemBERT model)"),h0e.forEach(t),V8o=i(O),wb=n(O,"LI",{});var p0e=s(wb);Pie=n(p0e,"STRONG",{});var ett=s(Pie);X8o=r(ett,"roberta"),ett.forEach(t),z8o=r(p0e," \u2014 "),VN=n(p0e,"A",{href:!0});var ott=s(VN);Q8o=r(ott,"RobertaForMultipleChoice"),ott.forEach(t),W8o=r(p0e," (RoBERTa model)"),p0e.forEach(t),H8o=i(O),Ab=n(O,"LI",{});var _0e=s(Ab);$ie=n(_0e,"STRONG",{});var rtt=s($ie);U8o=r(rtt,"roformer"),rtt.forEach(t),J8o=r(_0e," \u2014 "),XN=n(_0e,"A",{href:!0});var ttt=s(XN);Y8o=r(ttt,"RoFormerForMultipleChoice"),ttt.forEach(t),K8o=r(_0e," (RoFormer model)"),_0e.forEach(t),Z8o=i(O),yb=n(O,"LI",{});var u0e=s(yb);Iie=n(u0e,"STRONG",{});var att=s(Iie);e7o=r(att,"squeezebert"),att.forEach(t),o7o=r(u0e," \u2014 "),zN=n(u0e,"A",{href:!0});var ntt=s(zN);r7o=r(ntt,"SqueezeBertForMultipleChoice"),ntt.forEach(t),t7o=r(u0e," (SqueezeBERT model)"),u0e.forEach(t),a7o=i(O),Lb=n(O,"LI",{});var b0e=s(Lb);qie=n(b0e,"STRONG",{});var stt=s(qie);n7o=r(stt,"xlm"),stt.forEach(t),s7o=r(b0e," \u2014 "),QN=n(b0e,"A",{href:!0});var ltt=s(QN);l7o=r(ltt,"XLMForMultipleChoice"),ltt.forEach(t),i7o=r(b0e," (XLM model)"),b0e.forEach(t),d7o=i(O),xb=n(O,"LI",{});var F0e=s(xb);Nie=n(F0e,"STRONG",{});var itt=s(Nie);c7o=r(itt,"xlm-roberta"),itt.forEach(t),f7o=r(F0e," \u2014 "),WN=n(F0e,"A",{href:!0});var dtt=s(WN);m7o=r(dtt,"XLMRobertaForMultipleChoice"),dtt.forEach(t),g7o=r(F0e," (XLM-RoBERTa model)"),F0e.forEach(t),h7o=i(O),kb=n(O,"LI",{});var v0e=s(kb);jie=n(v0e,"STRONG",{});var ctt=s(jie);p7o=r(ctt,"xlm-roberta-xl"),ctt.forEach(t),_7o=r(v0e," \u2014 "),HN=n(v0e,"A",{href:!0});var ftt=s(HN);u7o=r(ftt,"XLMRobertaXLForMultipleChoice"),ftt.forEach(t),b7o=r(v0e," (XLM-RoBERTa-XL model)"),v0e.forEach(t),F7o=i(O),Sb=n(O,"LI",{});var T0e=s(Sb);Die=n(T0e,"STRONG",{});var mtt=s(Die);v7o=r(mtt,"xlnet"),mtt.forEach(t),T7o=r(T0e," \u2014 "),UN=n(T0e,"A",{href:!0});var gtt=s(UN);M7o=r(gtt,"XLNetForMultipleChoice"),gtt.forEach(t),E7o=r(T0e," (XLNet model)"),T0e.forEach(t),C7o=i(O),Rb=n(O,"LI",{});var M0e=s(Rb);Gie=n(M0e,"STRONG",{});var htt=s(Gie);w7o=r(htt,"yoso"),htt.forEach(t),A7o=r(M0e," \u2014 "),JN=n(M0e,"A",{href:!0});var ptt=s(JN);y7o=r(ptt,"YosoForMultipleChoice"),ptt.forEach(t),L7o=r(M0e," (YOSO model)"),M0e.forEach(t),O.forEach(t),x7o=i(Qt),Bb=n(Qt,"P",{});var E0e=s(Bb);k7o=r(E0e,"The model is set in evaluation mode by default using "),Oie=n(E0e,"CODE",{});var _tt=s(Oie);S7o=r(_tt,"model.eval()"),_tt.forEach(t),R7o=r(E0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Vie=n(E0e,"CODE",{});var utt=s(Vie);B7o=r(utt,"model.train()"),utt.forEach(t),E0e.forEach(t),P7o=i(Qt),Xie=n(Qt,"P",{});var btt=s(Xie);$7o=r(btt,"Examples:"),btt.forEach(t),I7o=i(Qt),m(ow.$$.fragment,Qt),Qt.forEach(t),al.forEach(t),aBe=i(c),ud=n(c,"H2",{class:!0});var g$e=s(ud);Pb=n(g$e,"A",{id:!0,class:!0,href:!0});var Ftt=s(Pb);zie=n(Ftt,"SPAN",{});var vtt=s(zie);m(rw.$$.fragment,vtt),vtt.forEach(t),Ftt.forEach(t),q7o=i(g$e),Qie=n(g$e,"SPAN",{});var Ttt=s(Qie);N7o=r(Ttt,"AutoModelForNextSentencePrediction"),Ttt.forEach(t),g$e.forEach(t),nBe=i(c),tr=n(c,"DIV",{class:!0});var sl=s(tr);m(tw.$$.fragment,sl),j7o=i(sl),bd=n(sl,"P",{});var wU=s(bd);D7o=r(wU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),YN=n(wU,"A",{href:!0});var Mtt=s(YN);G7o=r(Mtt,"from_pretrained()"),Mtt.forEach(t),O7o=r(wU," class method or the "),KN=n(wU,"A",{href:!0});var Ett=s(KN);V7o=r(Ett,"from_config()"),Ett.forEach(t),X7o=r(wU,` class
method.`),wU.forEach(t),z7o=i(sl),aw=n(sl,"P",{});var h$e=s(aw);Q7o=r(h$e,"This class cannot be instantiated directly using "),Wie=n(h$e,"CODE",{});var Ctt=s(Wie);W7o=r(Ctt,"__init__()"),Ctt.forEach(t),H7o=r(h$e," (throws an error)."),h$e.forEach(t),U7o=i(sl),Yr=n(sl,"DIV",{class:!0});var ll=s(Yr);m(nw.$$.fragment,ll),J7o=i(ll),Hie=n(ll,"P",{});var wtt=s(Hie);Y7o=r(wtt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),wtt.forEach(t),K7o=i(ll),Fd=n(ll,"P",{});var AU=s(Fd);Z7o=r(AU,`Note:
Loading a model from its configuration file does `),Uie=n(AU,"STRONG",{});var Att=s(Uie);exo=r(Att,"not"),Att.forEach(t),oxo=r(AU,` load the model weights. It only affects the
model\u2019s configuration. Use `),ZN=n(AU,"A",{href:!0});var ytt=s(ZN);rxo=r(ytt,"from_pretrained()"),ytt.forEach(t),txo=r(AU," to load the model weights."),AU.forEach(t),axo=i(ll),Jie=n(ll,"P",{});var Ltt=s(Jie);nxo=r(Ltt,"Examples:"),Ltt.forEach(t),sxo=i(ll),m(sw.$$.fragment,ll),ll.forEach(t),lxo=i(sl),Xe=n(sl,"DIV",{class:!0});var Wt=s(Xe);m(lw.$$.fragment,Wt),ixo=i(Wt),Yie=n(Wt,"P",{});var xtt=s(Yie);dxo=r(xtt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),xtt.forEach(t),cxo=i(Wt),Ya=n(Wt,"P",{});var NE=s(Ya);fxo=r(NE,"The model class to instantiate is selected based on the "),Kie=n(NE,"CODE",{});var ktt=s(Kie);mxo=r(ktt,"model_type"),ktt.forEach(t),gxo=r(NE,` property of the config object (either
passed as an argument or loaded from `),Zie=n(NE,"CODE",{});var Stt=s(Zie);hxo=r(Stt,"pretrained_model_name_or_path"),Stt.forEach(t),pxo=r(NE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ede=n(NE,"CODE",{});var Rtt=s(ede);_xo=r(Rtt,"pretrained_model_name_or_path"),Rtt.forEach(t),uxo=r(NE,":"),NE.forEach(t),bxo=i(Wt),da=n(Wt,"UL",{});var il=s(da);$b=n(il,"LI",{});var C0e=s($b);ode=n(C0e,"STRONG",{});var Btt=s(ode);Fxo=r(Btt,"bert"),Btt.forEach(t),vxo=r(C0e," \u2014 "),ej=n(C0e,"A",{href:!0});var Ptt=s(ej);Txo=r(Ptt,"BertForNextSentencePrediction"),Ptt.forEach(t),Mxo=r(C0e," (BERT model)"),C0e.forEach(t),Exo=i(il),Ib=n(il,"LI",{});var w0e=s(Ib);rde=n(w0e,"STRONG",{});var $tt=s(rde);Cxo=r($tt,"fnet"),$tt.forEach(t),wxo=r(w0e," \u2014 "),oj=n(w0e,"A",{href:!0});var Itt=s(oj);Axo=r(Itt,"FNetForNextSentencePrediction"),Itt.forEach(t),yxo=r(w0e," (FNet model)"),w0e.forEach(t),Lxo=i(il),qb=n(il,"LI",{});var A0e=s(qb);tde=n(A0e,"STRONG",{});var qtt=s(tde);xxo=r(qtt,"megatron-bert"),qtt.forEach(t),kxo=r(A0e," \u2014 "),rj=n(A0e,"A",{href:!0});var Ntt=s(rj);Sxo=r(Ntt,"MegatronBertForNextSentencePrediction"),Ntt.forEach(t),Rxo=r(A0e," (MegatronBert model)"),A0e.forEach(t),Bxo=i(il),Nb=n(il,"LI",{});var y0e=s(Nb);ade=n(y0e,"STRONG",{});var jtt=s(ade);Pxo=r(jtt,"mobilebert"),jtt.forEach(t),$xo=r(y0e," \u2014 "),tj=n(y0e,"A",{href:!0});var Dtt=s(tj);Ixo=r(Dtt,"MobileBertForNextSentencePrediction"),Dtt.forEach(t),qxo=r(y0e," (MobileBERT model)"),y0e.forEach(t),Nxo=i(il),jb=n(il,"LI",{});var L0e=s(jb);nde=n(L0e,"STRONG",{});var Gtt=s(nde);jxo=r(Gtt,"qdqbert"),Gtt.forEach(t),Dxo=r(L0e," \u2014 "),aj=n(L0e,"A",{href:!0});var Ott=s(aj);Gxo=r(Ott,"QDQBertForNextSentencePrediction"),Ott.forEach(t),Oxo=r(L0e," (QDQBert model)"),L0e.forEach(t),il.forEach(t),Vxo=i(Wt),Db=n(Wt,"P",{});var x0e=s(Db);Xxo=r(x0e,"The model is set in evaluation mode by default using "),sde=n(x0e,"CODE",{});var Vtt=s(sde);zxo=r(Vtt,"model.eval()"),Vtt.forEach(t),Qxo=r(x0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),lde=n(x0e,"CODE",{});var Xtt=s(lde);Wxo=r(Xtt,"model.train()"),Xtt.forEach(t),x0e.forEach(t),Hxo=i(Wt),ide=n(Wt,"P",{});var ztt=s(ide);Uxo=r(ztt,"Examples:"),ztt.forEach(t),Jxo=i(Wt),m(iw.$$.fragment,Wt),Wt.forEach(t),sl.forEach(t),sBe=i(c),vd=n(c,"H2",{class:!0});var p$e=s(vd);Gb=n(p$e,"A",{id:!0,class:!0,href:!0});var Qtt=s(Gb);dde=n(Qtt,"SPAN",{});var Wtt=s(dde);m(dw.$$.fragment,Wtt),Wtt.forEach(t),Qtt.forEach(t),Yxo=i(p$e),cde=n(p$e,"SPAN",{});var Htt=s(cde);Kxo=r(Htt,"AutoModelForTokenClassification"),Htt.forEach(t),p$e.forEach(t),lBe=i(c),ar=n(c,"DIV",{class:!0});var dl=s(ar);m(cw.$$.fragment,dl),Zxo=i(dl),Td=n(dl,"P",{});var yU=s(Td);eko=r(yU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),nj=n(yU,"A",{href:!0});var Utt=s(nj);oko=r(Utt,"from_pretrained()"),Utt.forEach(t),rko=r(yU," class method or the "),sj=n(yU,"A",{href:!0});var Jtt=s(sj);tko=r(Jtt,"from_config()"),Jtt.forEach(t),ako=r(yU,` class
method.`),yU.forEach(t),nko=i(dl),fw=n(dl,"P",{});var _$e=s(fw);sko=r(_$e,"This class cannot be instantiated directly using "),fde=n(_$e,"CODE",{});var Ytt=s(fde);lko=r(Ytt,"__init__()"),Ytt.forEach(t),iko=r(_$e," (throws an error)."),_$e.forEach(t),dko=i(dl),Kr=n(dl,"DIV",{class:!0});var cl=s(Kr);m(mw.$$.fragment,cl),cko=i(cl),mde=n(cl,"P",{});var Ktt=s(mde);fko=r(Ktt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Ktt.forEach(t),mko=i(cl),Md=n(cl,"P",{});var LU=s(Md);gko=r(LU,`Note:
Loading a model from its configuration file does `),gde=n(LU,"STRONG",{});var Ztt=s(gde);hko=r(Ztt,"not"),Ztt.forEach(t),pko=r(LU,` load the model weights. It only affects the
model\u2019s configuration. Use `),lj=n(LU,"A",{href:!0});var eat=s(lj);_ko=r(eat,"from_pretrained()"),eat.forEach(t),uko=r(LU," to load the model weights."),LU.forEach(t),bko=i(cl),hde=n(cl,"P",{});var oat=s(hde);Fko=r(oat,"Examples:"),oat.forEach(t),vko=i(cl),m(gw.$$.fragment,cl),cl.forEach(t),Tko=i(dl),ze=n(dl,"DIV",{class:!0});var Ht=s(ze);m(hw.$$.fragment,Ht),Mko=i(Ht),pde=n(Ht,"P",{});var rat=s(pde);Eko=r(rat,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),rat.forEach(t),Cko=i(Ht),Ka=n(Ht,"P",{});var jE=s(Ka);wko=r(jE,"The model class to instantiate is selected based on the "),_de=n(jE,"CODE",{});var tat=s(_de);Ako=r(tat,"model_type"),tat.forEach(t),yko=r(jE,` property of the config object (either
passed as an argument or loaded from `),ude=n(jE,"CODE",{});var aat=s(ude);Lko=r(aat,"pretrained_model_name_or_path"),aat.forEach(t),xko=r(jE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bde=n(jE,"CODE",{});var nat=s(bde);kko=r(nat,"pretrained_model_name_or_path"),nat.forEach(t),Sko=r(jE,":"),jE.forEach(t),Rko=i(Ht),j=n(Ht,"UL",{});var D=s(j);Ob=n(D,"LI",{});var k0e=s(Ob);Fde=n(k0e,"STRONG",{});var sat=s(Fde);Bko=r(sat,"albert"),sat.forEach(t),Pko=r(k0e," \u2014 "),ij=n(k0e,"A",{href:!0});var lat=s(ij);$ko=r(lat,"AlbertForTokenClassification"),lat.forEach(t),Iko=r(k0e," (ALBERT model)"),k0e.forEach(t),qko=i(D),Vb=n(D,"LI",{});var S0e=s(Vb);vde=n(S0e,"STRONG",{});var iat=s(vde);Nko=r(iat,"bert"),iat.forEach(t),jko=r(S0e," \u2014 "),dj=n(S0e,"A",{href:!0});var dat=s(dj);Dko=r(dat,"BertForTokenClassification"),dat.forEach(t),Gko=r(S0e," (BERT model)"),S0e.forEach(t),Oko=i(D),Xb=n(D,"LI",{});var R0e=s(Xb);Tde=n(R0e,"STRONG",{});var cat=s(Tde);Vko=r(cat,"big_bird"),cat.forEach(t),Xko=r(R0e," \u2014 "),cj=n(R0e,"A",{href:!0});var fat=s(cj);zko=r(fat,"BigBirdForTokenClassification"),fat.forEach(t),Qko=r(R0e," (BigBird model)"),R0e.forEach(t),Wko=i(D),zb=n(D,"LI",{});var B0e=s(zb);Mde=n(B0e,"STRONG",{});var mat=s(Mde);Hko=r(mat,"camembert"),mat.forEach(t),Uko=r(B0e," \u2014 "),fj=n(B0e,"A",{href:!0});var gat=s(fj);Jko=r(gat,"CamembertForTokenClassification"),gat.forEach(t),Yko=r(B0e," (CamemBERT model)"),B0e.forEach(t),Kko=i(D),Qb=n(D,"LI",{});var P0e=s(Qb);Ede=n(P0e,"STRONG",{});var hat=s(Ede);Zko=r(hat,"canine"),hat.forEach(t),eSo=r(P0e," \u2014 "),mj=n(P0e,"A",{href:!0});var pat=s(mj);oSo=r(pat,"CanineForTokenClassification"),pat.forEach(t),rSo=r(P0e," (Canine model)"),P0e.forEach(t),tSo=i(D),Wb=n(D,"LI",{});var $0e=s(Wb);Cde=n($0e,"STRONG",{});var _at=s(Cde);aSo=r(_at,"convbert"),_at.forEach(t),nSo=r($0e," \u2014 "),gj=n($0e,"A",{href:!0});var uat=s(gj);sSo=r(uat,"ConvBertForTokenClassification"),uat.forEach(t),lSo=r($0e," (ConvBERT model)"),$0e.forEach(t),iSo=i(D),Hb=n(D,"LI",{});var I0e=s(Hb);wde=n(I0e,"STRONG",{});var bat=s(wde);dSo=r(bat,"data2vec-text"),bat.forEach(t),cSo=r(I0e," \u2014 "),hj=n(I0e,"A",{href:!0});var Fat=s(hj);fSo=r(Fat,"Data2VecTextForTokenClassification"),Fat.forEach(t),mSo=r(I0e," (Data2VecText model)"),I0e.forEach(t),gSo=i(D),Ub=n(D,"LI",{});var q0e=s(Ub);Ade=n(q0e,"STRONG",{});var vat=s(Ade);hSo=r(vat,"deberta"),vat.forEach(t),pSo=r(q0e," \u2014 "),pj=n(q0e,"A",{href:!0});var Tat=s(pj);_So=r(Tat,"DebertaForTokenClassification"),Tat.forEach(t),uSo=r(q0e," (DeBERTa model)"),q0e.forEach(t),bSo=i(D),Jb=n(D,"LI",{});var N0e=s(Jb);yde=n(N0e,"STRONG",{});var Mat=s(yde);FSo=r(Mat,"deberta-v2"),Mat.forEach(t),vSo=r(N0e," \u2014 "),_j=n(N0e,"A",{href:!0});var Eat=s(_j);TSo=r(Eat,"DebertaV2ForTokenClassification"),Eat.forEach(t),MSo=r(N0e," (DeBERTa-v2 model)"),N0e.forEach(t),ESo=i(D),Yb=n(D,"LI",{});var j0e=s(Yb);Lde=n(j0e,"STRONG",{});var Cat=s(Lde);CSo=r(Cat,"distilbert"),Cat.forEach(t),wSo=r(j0e," \u2014 "),uj=n(j0e,"A",{href:!0});var wat=s(uj);ASo=r(wat,"DistilBertForTokenClassification"),wat.forEach(t),ySo=r(j0e," (DistilBERT model)"),j0e.forEach(t),LSo=i(D),Kb=n(D,"LI",{});var D0e=s(Kb);xde=n(D0e,"STRONG",{});var Aat=s(xde);xSo=r(Aat,"electra"),Aat.forEach(t),kSo=r(D0e," \u2014 "),bj=n(D0e,"A",{href:!0});var yat=s(bj);SSo=r(yat,"ElectraForTokenClassification"),yat.forEach(t),RSo=r(D0e," (ELECTRA model)"),D0e.forEach(t),BSo=i(D),Zb=n(D,"LI",{});var G0e=s(Zb);kde=n(G0e,"STRONG",{});var Lat=s(kde);PSo=r(Lat,"flaubert"),Lat.forEach(t),$So=r(G0e," \u2014 "),Fj=n(G0e,"A",{href:!0});var xat=s(Fj);ISo=r(xat,"FlaubertForTokenClassification"),xat.forEach(t),qSo=r(G0e," (FlauBERT model)"),G0e.forEach(t),NSo=i(D),e5=n(D,"LI",{});var O0e=s(e5);Sde=n(O0e,"STRONG",{});var kat=s(Sde);jSo=r(kat,"fnet"),kat.forEach(t),DSo=r(O0e," \u2014 "),vj=n(O0e,"A",{href:!0});var Sat=s(vj);GSo=r(Sat,"FNetForTokenClassification"),Sat.forEach(t),OSo=r(O0e," (FNet model)"),O0e.forEach(t),VSo=i(D),o5=n(D,"LI",{});var V0e=s(o5);Rde=n(V0e,"STRONG",{});var Rat=s(Rde);XSo=r(Rat,"funnel"),Rat.forEach(t),zSo=r(V0e," \u2014 "),Tj=n(V0e,"A",{href:!0});var Bat=s(Tj);QSo=r(Bat,"FunnelForTokenClassification"),Bat.forEach(t),WSo=r(V0e," (Funnel Transformer model)"),V0e.forEach(t),HSo=i(D),r5=n(D,"LI",{});var X0e=s(r5);Bde=n(X0e,"STRONG",{});var Pat=s(Bde);USo=r(Pat,"gpt2"),Pat.forEach(t),JSo=r(X0e," \u2014 "),Mj=n(X0e,"A",{href:!0});var $at=s(Mj);YSo=r($at,"GPT2ForTokenClassification"),$at.forEach(t),KSo=r(X0e," (OpenAI GPT-2 model)"),X0e.forEach(t),ZSo=i(D),t5=n(D,"LI",{});var z0e=s(t5);Pde=n(z0e,"STRONG",{});var Iat=s(Pde);eRo=r(Iat,"gpt_neox"),Iat.forEach(t),oRo=r(z0e," \u2014 "),$de=n(z0e,"CODE",{});var qat=s($de);rRo=r(qat,"GPTNeoXForTokenClassification"),qat.forEach(t),tRo=r(z0e," (GPTNeoX model)"),z0e.forEach(t),aRo=i(D),a5=n(D,"LI",{});var Q0e=s(a5);Ide=n(Q0e,"STRONG",{});var Nat=s(Ide);nRo=r(Nat,"ibert"),Nat.forEach(t),sRo=r(Q0e," \u2014 "),Ej=n(Q0e,"A",{href:!0});var jat=s(Ej);lRo=r(jat,"IBertForTokenClassification"),jat.forEach(t),iRo=r(Q0e," (I-BERT model)"),Q0e.forEach(t),dRo=i(D),n5=n(D,"LI",{});var W0e=s(n5);qde=n(W0e,"STRONG",{});var Dat=s(qde);cRo=r(Dat,"layoutlm"),Dat.forEach(t),fRo=r(W0e," \u2014 "),Cj=n(W0e,"A",{href:!0});var Gat=s(Cj);mRo=r(Gat,"LayoutLMForTokenClassification"),Gat.forEach(t),gRo=r(W0e," (LayoutLM model)"),W0e.forEach(t),hRo=i(D),s5=n(D,"LI",{});var H0e=s(s5);Nde=n(H0e,"STRONG",{});var Oat=s(Nde);pRo=r(Oat,"layoutlmv2"),Oat.forEach(t),_Ro=r(H0e," \u2014 "),wj=n(H0e,"A",{href:!0});var Vat=s(wj);uRo=r(Vat,"LayoutLMv2ForTokenClassification"),Vat.forEach(t),bRo=r(H0e," (LayoutLMv2 model)"),H0e.forEach(t),FRo=i(D),l5=n(D,"LI",{});var U0e=s(l5);jde=n(U0e,"STRONG",{});var Xat=s(jde);vRo=r(Xat,"longformer"),Xat.forEach(t),TRo=r(U0e," \u2014 "),Aj=n(U0e,"A",{href:!0});var zat=s(Aj);MRo=r(zat,"LongformerForTokenClassification"),zat.forEach(t),ERo=r(U0e," (Longformer model)"),U0e.forEach(t),CRo=i(D),i5=n(D,"LI",{});var J0e=s(i5);Dde=n(J0e,"STRONG",{});var Qat=s(Dde);wRo=r(Qat,"megatron-bert"),Qat.forEach(t),ARo=r(J0e," \u2014 "),yj=n(J0e,"A",{href:!0});var Wat=s(yj);yRo=r(Wat,"MegatronBertForTokenClassification"),Wat.forEach(t),LRo=r(J0e," (MegatronBert model)"),J0e.forEach(t),xRo=i(D),d5=n(D,"LI",{});var Y0e=s(d5);Gde=n(Y0e,"STRONG",{});var Hat=s(Gde);kRo=r(Hat,"mobilebert"),Hat.forEach(t),SRo=r(Y0e," \u2014 "),Lj=n(Y0e,"A",{href:!0});var Uat=s(Lj);RRo=r(Uat,"MobileBertForTokenClassification"),Uat.forEach(t),BRo=r(Y0e," (MobileBERT model)"),Y0e.forEach(t),PRo=i(D),c5=n(D,"LI",{});var K0e=s(c5);Ode=n(K0e,"STRONG",{});var Jat=s(Ode);$Ro=r(Jat,"mpnet"),Jat.forEach(t),IRo=r(K0e," \u2014 "),xj=n(K0e,"A",{href:!0});var Yat=s(xj);qRo=r(Yat,"MPNetForTokenClassification"),Yat.forEach(t),NRo=r(K0e," (MPNet model)"),K0e.forEach(t),jRo=i(D),f5=n(D,"LI",{});var Z0e=s(f5);Vde=n(Z0e,"STRONG",{});var Kat=s(Vde);DRo=r(Kat,"nystromformer"),Kat.forEach(t),GRo=r(Z0e," \u2014 "),kj=n(Z0e,"A",{href:!0});var Zat=s(kj);ORo=r(Zat,"NystromformerForTokenClassification"),Zat.forEach(t),VRo=r(Z0e," (Nystromformer model)"),Z0e.forEach(t),XRo=i(D),m5=n(D,"LI",{});var eye=s(m5);Xde=n(eye,"STRONG",{});var ent=s(Xde);zRo=r(ent,"qdqbert"),ent.forEach(t),QRo=r(eye," \u2014 "),Sj=n(eye,"A",{href:!0});var ont=s(Sj);WRo=r(ont,"QDQBertForTokenClassification"),ont.forEach(t),HRo=r(eye," (QDQBert model)"),eye.forEach(t),URo=i(D),g5=n(D,"LI",{});var oye=s(g5);zde=n(oye,"STRONG",{});var rnt=s(zde);JRo=r(rnt,"rembert"),rnt.forEach(t),YRo=r(oye," \u2014 "),Rj=n(oye,"A",{href:!0});var tnt=s(Rj);KRo=r(tnt,"RemBertForTokenClassification"),tnt.forEach(t),ZRo=r(oye," (RemBERT model)"),oye.forEach(t),eBo=i(D),h5=n(D,"LI",{});var rye=s(h5);Qde=n(rye,"STRONG",{});var ant=s(Qde);oBo=r(ant,"roberta"),ant.forEach(t),rBo=r(rye," \u2014 "),Bj=n(rye,"A",{href:!0});var nnt=s(Bj);tBo=r(nnt,"RobertaForTokenClassification"),nnt.forEach(t),aBo=r(rye," (RoBERTa model)"),rye.forEach(t),nBo=i(D),p5=n(D,"LI",{});var tye=s(p5);Wde=n(tye,"STRONG",{});var snt=s(Wde);sBo=r(snt,"roformer"),snt.forEach(t),lBo=r(tye," \u2014 "),Pj=n(tye,"A",{href:!0});var lnt=s(Pj);iBo=r(lnt,"RoFormerForTokenClassification"),lnt.forEach(t),dBo=r(tye," (RoFormer model)"),tye.forEach(t),cBo=i(D),_5=n(D,"LI",{});var aye=s(_5);Hde=n(aye,"STRONG",{});var int=s(Hde);fBo=r(int,"squeezebert"),int.forEach(t),mBo=r(aye," \u2014 "),$j=n(aye,"A",{href:!0});var dnt=s($j);gBo=r(dnt,"SqueezeBertForTokenClassification"),dnt.forEach(t),hBo=r(aye," (SqueezeBERT model)"),aye.forEach(t),pBo=i(D),u5=n(D,"LI",{});var nye=s(u5);Ude=n(nye,"STRONG",{});var cnt=s(Ude);_Bo=r(cnt,"xlm"),cnt.forEach(t),uBo=r(nye," \u2014 "),Ij=n(nye,"A",{href:!0});var fnt=s(Ij);bBo=r(fnt,"XLMForTokenClassification"),fnt.forEach(t),FBo=r(nye," (XLM model)"),nye.forEach(t),vBo=i(D),b5=n(D,"LI",{});var sye=s(b5);Jde=n(sye,"STRONG",{});var mnt=s(Jde);TBo=r(mnt,"xlm-roberta"),mnt.forEach(t),MBo=r(sye," \u2014 "),qj=n(sye,"A",{href:!0});var gnt=s(qj);EBo=r(gnt,"XLMRobertaForTokenClassification"),gnt.forEach(t),CBo=r(sye," (XLM-RoBERTa model)"),sye.forEach(t),wBo=i(D),F5=n(D,"LI",{});var lye=s(F5);Yde=n(lye,"STRONG",{});var hnt=s(Yde);ABo=r(hnt,"xlm-roberta-xl"),hnt.forEach(t),yBo=r(lye," \u2014 "),Nj=n(lye,"A",{href:!0});var pnt=s(Nj);LBo=r(pnt,"XLMRobertaXLForTokenClassification"),pnt.forEach(t),xBo=r(lye," (XLM-RoBERTa-XL model)"),lye.forEach(t),kBo=i(D),v5=n(D,"LI",{});var iye=s(v5);Kde=n(iye,"STRONG",{});var _nt=s(Kde);SBo=r(_nt,"xlnet"),_nt.forEach(t),RBo=r(iye," \u2014 "),jj=n(iye,"A",{href:!0});var unt=s(jj);BBo=r(unt,"XLNetForTokenClassification"),unt.forEach(t),PBo=r(iye," (XLNet model)"),iye.forEach(t),$Bo=i(D),T5=n(D,"LI",{});var dye=s(T5);Zde=n(dye,"STRONG",{});var bnt=s(Zde);IBo=r(bnt,"yoso"),bnt.forEach(t),qBo=r(dye," \u2014 "),Dj=n(dye,"A",{href:!0});var Fnt=s(Dj);NBo=r(Fnt,"YosoForTokenClassification"),Fnt.forEach(t),jBo=r(dye," (YOSO model)"),dye.forEach(t),D.forEach(t),DBo=i(Ht),M5=n(Ht,"P",{});var cye=s(M5);GBo=r(cye,"The model is set in evaluation mode by default using "),ece=n(cye,"CODE",{});var vnt=s(ece);OBo=r(vnt,"model.eval()"),vnt.forEach(t),VBo=r(cye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),oce=n(cye,"CODE",{});var Tnt=s(oce);XBo=r(Tnt,"model.train()"),Tnt.forEach(t),cye.forEach(t),zBo=i(Ht),rce=n(Ht,"P",{});var Mnt=s(rce);QBo=r(Mnt,"Examples:"),Mnt.forEach(t),WBo=i(Ht),m(pw.$$.fragment,Ht),Ht.forEach(t),dl.forEach(t),iBe=i(c),Ed=n(c,"H2",{class:!0});var u$e=s(Ed);E5=n(u$e,"A",{id:!0,class:!0,href:!0});var Ent=s(E5);tce=n(Ent,"SPAN",{});var Cnt=s(tce);m(_w.$$.fragment,Cnt),Cnt.forEach(t),Ent.forEach(t),HBo=i(u$e),ace=n(u$e,"SPAN",{});var wnt=s(ace);UBo=r(wnt,"AutoModelForQuestionAnswering"),wnt.forEach(t),u$e.forEach(t),dBe=i(c),nr=n(c,"DIV",{class:!0});var fl=s(nr);m(uw.$$.fragment,fl),JBo=i(fl),Cd=n(fl,"P",{});var xU=s(Cd);YBo=r(xU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Gj=n(xU,"A",{href:!0});var Ant=s(Gj);KBo=r(Ant,"from_pretrained()"),Ant.forEach(t),ZBo=r(xU," class method or the "),Oj=n(xU,"A",{href:!0});var ynt=s(Oj);ePo=r(ynt,"from_config()"),ynt.forEach(t),oPo=r(xU,` class
method.`),xU.forEach(t),rPo=i(fl),bw=n(fl,"P",{});var b$e=s(bw);tPo=r(b$e,"This class cannot be instantiated directly using "),nce=n(b$e,"CODE",{});var Lnt=s(nce);aPo=r(Lnt,"__init__()"),Lnt.forEach(t),nPo=r(b$e," (throws an error)."),b$e.forEach(t),sPo=i(fl),Zr=n(fl,"DIV",{class:!0});var ml=s(Zr);m(Fw.$$.fragment,ml),lPo=i(ml),sce=n(ml,"P",{});var xnt=s(sce);iPo=r(xnt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),xnt.forEach(t),dPo=i(ml),wd=n(ml,"P",{});var kU=s(wd);cPo=r(kU,`Note:
Loading a model from its configuration file does `),lce=n(kU,"STRONG",{});var knt=s(lce);fPo=r(knt,"not"),knt.forEach(t),mPo=r(kU,` load the model weights. It only affects the
model\u2019s configuration. Use `),Vj=n(kU,"A",{href:!0});var Snt=s(Vj);gPo=r(Snt,"from_pretrained()"),Snt.forEach(t),hPo=r(kU," to load the model weights."),kU.forEach(t),pPo=i(ml),ice=n(ml,"P",{});var Rnt=s(ice);_Po=r(Rnt,"Examples:"),Rnt.forEach(t),uPo=i(ml),m(vw.$$.fragment,ml),ml.forEach(t),bPo=i(fl),Qe=n(fl,"DIV",{class:!0});var Ut=s(Qe);m(Tw.$$.fragment,Ut),FPo=i(Ut),dce=n(Ut,"P",{});var Bnt=s(dce);vPo=r(Bnt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Bnt.forEach(t),TPo=i(Ut),Za=n(Ut,"P",{});var DE=s(Za);MPo=r(DE,"The model class to instantiate is selected based on the "),cce=n(DE,"CODE",{});var Pnt=s(cce);EPo=r(Pnt,"model_type"),Pnt.forEach(t),CPo=r(DE,` property of the config object (either
passed as an argument or loaded from `),fce=n(DE,"CODE",{});var $nt=s(fce);wPo=r($nt,"pretrained_model_name_or_path"),$nt.forEach(t),APo=r(DE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mce=n(DE,"CODE",{});var Int=s(mce);yPo=r(Int,"pretrained_model_name_or_path"),Int.forEach(t),LPo=r(DE,":"),DE.forEach(t),xPo=i(Ut),S=n(Ut,"UL",{});var B=s(S);C5=n(B,"LI",{});var fye=s(C5);gce=n(fye,"STRONG",{});var qnt=s(gce);kPo=r(qnt,"albert"),qnt.forEach(t),SPo=r(fye," \u2014 "),Xj=n(fye,"A",{href:!0});var Nnt=s(Xj);RPo=r(Nnt,"AlbertForQuestionAnswering"),Nnt.forEach(t),BPo=r(fye," (ALBERT model)"),fye.forEach(t),PPo=i(B),w5=n(B,"LI",{});var mye=s(w5);hce=n(mye,"STRONG",{});var jnt=s(hce);$Po=r(jnt,"bart"),jnt.forEach(t),IPo=r(mye," \u2014 "),zj=n(mye,"A",{href:!0});var Dnt=s(zj);qPo=r(Dnt,"BartForQuestionAnswering"),Dnt.forEach(t),NPo=r(mye," (BART model)"),mye.forEach(t),jPo=i(B),A5=n(B,"LI",{});var gye=s(A5);pce=n(gye,"STRONG",{});var Gnt=s(pce);DPo=r(Gnt,"bert"),Gnt.forEach(t),GPo=r(gye," \u2014 "),Qj=n(gye,"A",{href:!0});var Ont=s(Qj);OPo=r(Ont,"BertForQuestionAnswering"),Ont.forEach(t),VPo=r(gye," (BERT model)"),gye.forEach(t),XPo=i(B),y5=n(B,"LI",{});var hye=s(y5);_ce=n(hye,"STRONG",{});var Vnt=s(_ce);zPo=r(Vnt,"big_bird"),Vnt.forEach(t),QPo=r(hye," \u2014 "),Wj=n(hye,"A",{href:!0});var Xnt=s(Wj);WPo=r(Xnt,"BigBirdForQuestionAnswering"),Xnt.forEach(t),HPo=r(hye," (BigBird model)"),hye.forEach(t),UPo=i(B),L5=n(B,"LI",{});var pye=s(L5);uce=n(pye,"STRONG",{});var znt=s(uce);JPo=r(znt,"bigbird_pegasus"),znt.forEach(t),YPo=r(pye," \u2014 "),Hj=n(pye,"A",{href:!0});var Qnt=s(Hj);KPo=r(Qnt,"BigBirdPegasusForQuestionAnswering"),Qnt.forEach(t),ZPo=r(pye," (BigBirdPegasus model)"),pye.forEach(t),e$o=i(B),x5=n(B,"LI",{});var _ye=s(x5);bce=n(_ye,"STRONG",{});var Wnt=s(bce);o$o=r(Wnt,"camembert"),Wnt.forEach(t),r$o=r(_ye," \u2014 "),Uj=n(_ye,"A",{href:!0});var Hnt=s(Uj);t$o=r(Hnt,"CamembertForQuestionAnswering"),Hnt.forEach(t),a$o=r(_ye," (CamemBERT model)"),_ye.forEach(t),n$o=i(B),k5=n(B,"LI",{});var uye=s(k5);Fce=n(uye,"STRONG",{});var Unt=s(Fce);s$o=r(Unt,"canine"),Unt.forEach(t),l$o=r(uye," \u2014 "),Jj=n(uye,"A",{href:!0});var Jnt=s(Jj);i$o=r(Jnt,"CanineForQuestionAnswering"),Jnt.forEach(t),d$o=r(uye," (Canine model)"),uye.forEach(t),c$o=i(B),S5=n(B,"LI",{});var bye=s(S5);vce=n(bye,"STRONG",{});var Ynt=s(vce);f$o=r(Ynt,"convbert"),Ynt.forEach(t),m$o=r(bye," \u2014 "),Yj=n(bye,"A",{href:!0});var Knt=s(Yj);g$o=r(Knt,"ConvBertForQuestionAnswering"),Knt.forEach(t),h$o=r(bye," (ConvBERT model)"),bye.forEach(t),p$o=i(B),R5=n(B,"LI",{});var Fye=s(R5);Tce=n(Fye,"STRONG",{});var Znt=s(Tce);_$o=r(Znt,"data2vec-text"),Znt.forEach(t),u$o=r(Fye," \u2014 "),Kj=n(Fye,"A",{href:!0});var est=s(Kj);b$o=r(est,"Data2VecTextForQuestionAnswering"),est.forEach(t),F$o=r(Fye," (Data2VecText model)"),Fye.forEach(t),v$o=i(B),B5=n(B,"LI",{});var vye=s(B5);Mce=n(vye,"STRONG",{});var ost=s(Mce);T$o=r(ost,"deberta"),ost.forEach(t),M$o=r(vye," \u2014 "),Zj=n(vye,"A",{href:!0});var rst=s(Zj);E$o=r(rst,"DebertaForQuestionAnswering"),rst.forEach(t),C$o=r(vye," (DeBERTa model)"),vye.forEach(t),w$o=i(B),P5=n(B,"LI",{});var Tye=s(P5);Ece=n(Tye,"STRONG",{});var tst=s(Ece);A$o=r(tst,"deberta-v2"),tst.forEach(t),y$o=r(Tye," \u2014 "),eD=n(Tye,"A",{href:!0});var ast=s(eD);L$o=r(ast,"DebertaV2ForQuestionAnswering"),ast.forEach(t),x$o=r(Tye," (DeBERTa-v2 model)"),Tye.forEach(t),k$o=i(B),$5=n(B,"LI",{});var Mye=s($5);Cce=n(Mye,"STRONG",{});var nst=s(Cce);S$o=r(nst,"distilbert"),nst.forEach(t),R$o=r(Mye," \u2014 "),oD=n(Mye,"A",{href:!0});var sst=s(oD);B$o=r(sst,"DistilBertForQuestionAnswering"),sst.forEach(t),P$o=r(Mye," (DistilBERT model)"),Mye.forEach(t),$$o=i(B),I5=n(B,"LI",{});var Eye=s(I5);wce=n(Eye,"STRONG",{});var lst=s(wce);I$o=r(lst,"electra"),lst.forEach(t),q$o=r(Eye," \u2014 "),rD=n(Eye,"A",{href:!0});var ist=s(rD);N$o=r(ist,"ElectraForQuestionAnswering"),ist.forEach(t),j$o=r(Eye," (ELECTRA model)"),Eye.forEach(t),D$o=i(B),q5=n(B,"LI",{});var Cye=s(q5);Ace=n(Cye,"STRONG",{});var dst=s(Ace);G$o=r(dst,"flaubert"),dst.forEach(t),O$o=r(Cye," \u2014 "),tD=n(Cye,"A",{href:!0});var cst=s(tD);V$o=r(cst,"FlaubertForQuestionAnsweringSimple"),cst.forEach(t),X$o=r(Cye," (FlauBERT model)"),Cye.forEach(t),z$o=i(B),N5=n(B,"LI",{});var wye=s(N5);yce=n(wye,"STRONG",{});var fst=s(yce);Q$o=r(fst,"fnet"),fst.forEach(t),W$o=r(wye," \u2014 "),aD=n(wye,"A",{href:!0});var mst=s(aD);H$o=r(mst,"FNetForQuestionAnswering"),mst.forEach(t),U$o=r(wye," (FNet model)"),wye.forEach(t),J$o=i(B),j5=n(B,"LI",{});var Aye=s(j5);Lce=n(Aye,"STRONG",{});var gst=s(Lce);Y$o=r(gst,"funnel"),gst.forEach(t),K$o=r(Aye," \u2014 "),nD=n(Aye,"A",{href:!0});var hst=s(nD);Z$o=r(hst,"FunnelForQuestionAnswering"),hst.forEach(t),eIo=r(Aye," (Funnel Transformer model)"),Aye.forEach(t),oIo=i(B),D5=n(B,"LI",{});var yye=s(D5);xce=n(yye,"STRONG",{});var pst=s(xce);rIo=r(pst,"gpt_neox"),pst.forEach(t),tIo=r(yye," \u2014 "),kce=n(yye,"CODE",{});var _st=s(kce);aIo=r(_st,"GPTNeoXForQuestionAnswering"),_st.forEach(t),nIo=r(yye," (GPTNeoX model)"),yye.forEach(t),sIo=i(B),G5=n(B,"LI",{});var Lye=s(G5);Sce=n(Lye,"STRONG",{});var ust=s(Sce);lIo=r(ust,"gptj"),ust.forEach(t),iIo=r(Lye," \u2014 "),sD=n(Lye,"A",{href:!0});var bst=s(sD);dIo=r(bst,"GPTJForQuestionAnswering"),bst.forEach(t),cIo=r(Lye," (GPT-J model)"),Lye.forEach(t),fIo=i(B),O5=n(B,"LI",{});var xye=s(O5);Rce=n(xye,"STRONG",{});var Fst=s(Rce);mIo=r(Fst,"ibert"),Fst.forEach(t),gIo=r(xye," \u2014 "),lD=n(xye,"A",{href:!0});var vst=s(lD);hIo=r(vst,"IBertForQuestionAnswering"),vst.forEach(t),pIo=r(xye," (I-BERT model)"),xye.forEach(t),_Io=i(B),V5=n(B,"LI",{});var kye=s(V5);Bce=n(kye,"STRONG",{});var Tst=s(Bce);uIo=r(Tst,"layoutlmv2"),Tst.forEach(t),bIo=r(kye," \u2014 "),iD=n(kye,"A",{href:!0});var Mst=s(iD);FIo=r(Mst,"LayoutLMv2ForQuestionAnswering"),Mst.forEach(t),vIo=r(kye," (LayoutLMv2 model)"),kye.forEach(t),TIo=i(B),X5=n(B,"LI",{});var Sye=s(X5);Pce=n(Sye,"STRONG",{});var Est=s(Pce);MIo=r(Est,"led"),Est.forEach(t),EIo=r(Sye," \u2014 "),dD=n(Sye,"A",{href:!0});var Cst=s(dD);CIo=r(Cst,"LEDForQuestionAnswering"),Cst.forEach(t),wIo=r(Sye," (LED model)"),Sye.forEach(t),AIo=i(B),z5=n(B,"LI",{});var Rye=s(z5);$ce=n(Rye,"STRONG",{});var wst=s($ce);yIo=r(wst,"longformer"),wst.forEach(t),LIo=r(Rye," \u2014 "),cD=n(Rye,"A",{href:!0});var Ast=s(cD);xIo=r(Ast,"LongformerForQuestionAnswering"),Ast.forEach(t),kIo=r(Rye," (Longformer model)"),Rye.forEach(t),SIo=i(B),Q5=n(B,"LI",{});var Bye=s(Q5);Ice=n(Bye,"STRONG",{});var yst=s(Ice);RIo=r(yst,"lxmert"),yst.forEach(t),BIo=r(Bye," \u2014 "),fD=n(Bye,"A",{href:!0});var Lst=s(fD);PIo=r(Lst,"LxmertForQuestionAnswering"),Lst.forEach(t),$Io=r(Bye," (LXMERT model)"),Bye.forEach(t),IIo=i(B),W5=n(B,"LI",{});var Pye=s(W5);qce=n(Pye,"STRONG",{});var xst=s(qce);qIo=r(xst,"mbart"),xst.forEach(t),NIo=r(Pye," \u2014 "),mD=n(Pye,"A",{href:!0});var kst=s(mD);jIo=r(kst,"MBartForQuestionAnswering"),kst.forEach(t),DIo=r(Pye," (mBART model)"),Pye.forEach(t),GIo=i(B),H5=n(B,"LI",{});var $ye=s(H5);Nce=n($ye,"STRONG",{});var Sst=s(Nce);OIo=r(Sst,"megatron-bert"),Sst.forEach(t),VIo=r($ye," \u2014 "),gD=n($ye,"A",{href:!0});var Rst=s(gD);XIo=r(Rst,"MegatronBertForQuestionAnswering"),Rst.forEach(t),zIo=r($ye," (MegatronBert model)"),$ye.forEach(t),QIo=i(B),U5=n(B,"LI",{});var Iye=s(U5);jce=n(Iye,"STRONG",{});var Bst=s(jce);WIo=r(Bst,"mobilebert"),Bst.forEach(t),HIo=r(Iye," \u2014 "),hD=n(Iye,"A",{href:!0});var Pst=s(hD);UIo=r(Pst,"MobileBertForQuestionAnswering"),Pst.forEach(t),JIo=r(Iye," (MobileBERT model)"),Iye.forEach(t),YIo=i(B),J5=n(B,"LI",{});var qye=s(J5);Dce=n(qye,"STRONG",{});var $st=s(Dce);KIo=r($st,"mpnet"),$st.forEach(t),ZIo=r(qye," \u2014 "),pD=n(qye,"A",{href:!0});var Ist=s(pD);eqo=r(Ist,"MPNetForQuestionAnswering"),Ist.forEach(t),oqo=r(qye," (MPNet model)"),qye.forEach(t),rqo=i(B),Y5=n(B,"LI",{});var Nye=s(Y5);Gce=n(Nye,"STRONG",{});var qst=s(Gce);tqo=r(qst,"nystromformer"),qst.forEach(t),aqo=r(Nye," \u2014 "),_D=n(Nye,"A",{href:!0});var Nst=s(_D);nqo=r(Nst,"NystromformerForQuestionAnswering"),Nst.forEach(t),sqo=r(Nye," (Nystromformer model)"),Nye.forEach(t),lqo=i(B),K5=n(B,"LI",{});var jye=s(K5);Oce=n(jye,"STRONG",{});var jst=s(Oce);iqo=r(jst,"qdqbert"),jst.forEach(t),dqo=r(jye," \u2014 "),uD=n(jye,"A",{href:!0});var Dst=s(uD);cqo=r(Dst,"QDQBertForQuestionAnswering"),Dst.forEach(t),fqo=r(jye," (QDQBert model)"),jye.forEach(t),mqo=i(B),Z5=n(B,"LI",{});var Dye=s(Z5);Vce=n(Dye,"STRONG",{});var Gst=s(Vce);gqo=r(Gst,"reformer"),Gst.forEach(t),hqo=r(Dye," \u2014 "),bD=n(Dye,"A",{href:!0});var Ost=s(bD);pqo=r(Ost,"ReformerForQuestionAnswering"),Ost.forEach(t),_qo=r(Dye," (Reformer model)"),Dye.forEach(t),uqo=i(B),e2=n(B,"LI",{});var Gye=s(e2);Xce=n(Gye,"STRONG",{});var Vst=s(Xce);bqo=r(Vst,"rembert"),Vst.forEach(t),Fqo=r(Gye," \u2014 "),FD=n(Gye,"A",{href:!0});var Xst=s(FD);vqo=r(Xst,"RemBertForQuestionAnswering"),Xst.forEach(t),Tqo=r(Gye," (RemBERT model)"),Gye.forEach(t),Mqo=i(B),o2=n(B,"LI",{});var Oye=s(o2);zce=n(Oye,"STRONG",{});var zst=s(zce);Eqo=r(zst,"roberta"),zst.forEach(t),Cqo=r(Oye," \u2014 "),vD=n(Oye,"A",{href:!0});var Qst=s(vD);wqo=r(Qst,"RobertaForQuestionAnswering"),Qst.forEach(t),Aqo=r(Oye," (RoBERTa model)"),Oye.forEach(t),yqo=i(B),r2=n(B,"LI",{});var Vye=s(r2);Qce=n(Vye,"STRONG",{});var Wst=s(Qce);Lqo=r(Wst,"roformer"),Wst.forEach(t),xqo=r(Vye," \u2014 "),TD=n(Vye,"A",{href:!0});var Hst=s(TD);kqo=r(Hst,"RoFormerForQuestionAnswering"),Hst.forEach(t),Sqo=r(Vye," (RoFormer model)"),Vye.forEach(t),Rqo=i(B),t2=n(B,"LI",{});var Xye=s(t2);Wce=n(Xye,"STRONG",{});var Ust=s(Wce);Bqo=r(Ust,"splinter"),Ust.forEach(t),Pqo=r(Xye," \u2014 "),MD=n(Xye,"A",{href:!0});var Jst=s(MD);$qo=r(Jst,"SplinterForQuestionAnswering"),Jst.forEach(t),Iqo=r(Xye," (Splinter model)"),Xye.forEach(t),qqo=i(B),a2=n(B,"LI",{});var zye=s(a2);Hce=n(zye,"STRONG",{});var Yst=s(Hce);Nqo=r(Yst,"squeezebert"),Yst.forEach(t),jqo=r(zye," \u2014 "),ED=n(zye,"A",{href:!0});var Kst=s(ED);Dqo=r(Kst,"SqueezeBertForQuestionAnswering"),Kst.forEach(t),Gqo=r(zye," (SqueezeBERT model)"),zye.forEach(t),Oqo=i(B),n2=n(B,"LI",{});var Qye=s(n2);Uce=n(Qye,"STRONG",{});var Zst=s(Uce);Vqo=r(Zst,"xlm"),Zst.forEach(t),Xqo=r(Qye," \u2014 "),CD=n(Qye,"A",{href:!0});var elt=s(CD);zqo=r(elt,"XLMForQuestionAnsweringSimple"),elt.forEach(t),Qqo=r(Qye," (XLM model)"),Qye.forEach(t),Wqo=i(B),s2=n(B,"LI",{});var Wye=s(s2);Jce=n(Wye,"STRONG",{});var olt=s(Jce);Hqo=r(olt,"xlm-roberta"),olt.forEach(t),Uqo=r(Wye," \u2014 "),wD=n(Wye,"A",{href:!0});var rlt=s(wD);Jqo=r(rlt,"XLMRobertaForQuestionAnswering"),rlt.forEach(t),Yqo=r(Wye," (XLM-RoBERTa model)"),Wye.forEach(t),Kqo=i(B),l2=n(B,"LI",{});var Hye=s(l2);Yce=n(Hye,"STRONG",{});var tlt=s(Yce);Zqo=r(tlt,"xlm-roberta-xl"),tlt.forEach(t),eNo=r(Hye," \u2014 "),AD=n(Hye,"A",{href:!0});var alt=s(AD);oNo=r(alt,"XLMRobertaXLForQuestionAnswering"),alt.forEach(t),rNo=r(Hye," (XLM-RoBERTa-XL model)"),Hye.forEach(t),tNo=i(B),i2=n(B,"LI",{});var Uye=s(i2);Kce=n(Uye,"STRONG",{});var nlt=s(Kce);aNo=r(nlt,"xlnet"),nlt.forEach(t),nNo=r(Uye," \u2014 "),yD=n(Uye,"A",{href:!0});var slt=s(yD);sNo=r(slt,"XLNetForQuestionAnsweringSimple"),slt.forEach(t),lNo=r(Uye," (XLNet model)"),Uye.forEach(t),iNo=i(B),d2=n(B,"LI",{});var Jye=s(d2);Zce=n(Jye,"STRONG",{});var llt=s(Zce);dNo=r(llt,"yoso"),llt.forEach(t),cNo=r(Jye," \u2014 "),LD=n(Jye,"A",{href:!0});var ilt=s(LD);fNo=r(ilt,"YosoForQuestionAnswering"),ilt.forEach(t),mNo=r(Jye," (YOSO model)"),Jye.forEach(t),B.forEach(t),gNo=i(Ut),c2=n(Ut,"P",{});var Yye=s(c2);hNo=r(Yye,"The model is set in evaluation mode by default using "),efe=n(Yye,"CODE",{});var dlt=s(efe);pNo=r(dlt,"model.eval()"),dlt.forEach(t),_No=r(Yye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ofe=n(Yye,"CODE",{});var clt=s(ofe);uNo=r(clt,"model.train()"),clt.forEach(t),Yye.forEach(t),bNo=i(Ut),rfe=n(Ut,"P",{});var flt=s(rfe);FNo=r(flt,"Examples:"),flt.forEach(t),vNo=i(Ut),m(Mw.$$.fragment,Ut),Ut.forEach(t),fl.forEach(t),cBe=i(c),Ad=n(c,"H2",{class:!0});var F$e=s(Ad);f2=n(F$e,"A",{id:!0,class:!0,href:!0});var mlt=s(f2);tfe=n(mlt,"SPAN",{});var glt=s(tfe);m(Ew.$$.fragment,glt),glt.forEach(t),mlt.forEach(t),TNo=i(F$e),afe=n(F$e,"SPAN",{});var hlt=s(afe);MNo=r(hlt,"AutoModelForTableQuestionAnswering"),hlt.forEach(t),F$e.forEach(t),fBe=i(c),sr=n(c,"DIV",{class:!0});var gl=s(sr);m(Cw.$$.fragment,gl),ENo=i(gl),yd=n(gl,"P",{});var SU=s(yd);CNo=r(SU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),xD=n(SU,"A",{href:!0});var plt=s(xD);wNo=r(plt,"from_pretrained()"),plt.forEach(t),ANo=r(SU," class method or the "),kD=n(SU,"A",{href:!0});var _lt=s(kD);yNo=r(_lt,"from_config()"),_lt.forEach(t),LNo=r(SU,` class
method.`),SU.forEach(t),xNo=i(gl),ww=n(gl,"P",{});var v$e=s(ww);kNo=r(v$e,"This class cannot be instantiated directly using "),nfe=n(v$e,"CODE",{});var ult=s(nfe);SNo=r(ult,"__init__()"),ult.forEach(t),RNo=r(v$e," (throws an error)."),v$e.forEach(t),BNo=i(gl),et=n(gl,"DIV",{class:!0});var hl=s(et);m(Aw.$$.fragment,hl),PNo=i(hl),sfe=n(hl,"P",{});var blt=s(sfe);$No=r(blt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),blt.forEach(t),INo=i(hl),Ld=n(hl,"P",{});var RU=s(Ld);qNo=r(RU,`Note:
Loading a model from its configuration file does `),lfe=n(RU,"STRONG",{});var Flt=s(lfe);NNo=r(Flt,"not"),Flt.forEach(t),jNo=r(RU,` load the model weights. It only affects the
model\u2019s configuration. Use `),SD=n(RU,"A",{href:!0});var vlt=s(SD);DNo=r(vlt,"from_pretrained()"),vlt.forEach(t),GNo=r(RU," to load the model weights."),RU.forEach(t),ONo=i(hl),ife=n(hl,"P",{});var Tlt=s(ife);VNo=r(Tlt,"Examples:"),Tlt.forEach(t),XNo=i(hl),m(yw.$$.fragment,hl),hl.forEach(t),zNo=i(gl),We=n(gl,"DIV",{class:!0});var Jt=s(We);m(Lw.$$.fragment,Jt),QNo=i(Jt),dfe=n(Jt,"P",{});var Mlt=s(dfe);WNo=r(Mlt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Mlt.forEach(t),HNo=i(Jt),en=n(Jt,"P",{});var GE=s(en);UNo=r(GE,"The model class to instantiate is selected based on the "),cfe=n(GE,"CODE",{});var Elt=s(cfe);JNo=r(Elt,"model_type"),Elt.forEach(t),YNo=r(GE,` property of the config object (either
passed as an argument or loaded from `),ffe=n(GE,"CODE",{});var Clt=s(ffe);KNo=r(Clt,"pretrained_model_name_or_path"),Clt.forEach(t),ZNo=r(GE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mfe=n(GE,"CODE",{});var wlt=s(mfe);ejo=r(wlt,"pretrained_model_name_or_path"),wlt.forEach(t),ojo=r(GE,":"),GE.forEach(t),rjo=i(Jt),gfe=n(Jt,"UL",{});var Alt=s(gfe);m2=n(Alt,"LI",{});var Kye=s(m2);hfe=n(Kye,"STRONG",{});var ylt=s(hfe);tjo=r(ylt,"tapas"),ylt.forEach(t),ajo=r(Kye," \u2014 "),RD=n(Kye,"A",{href:!0});var Llt=s(RD);njo=r(Llt,"TapasForQuestionAnswering"),Llt.forEach(t),sjo=r(Kye," (TAPAS model)"),Kye.forEach(t),Alt.forEach(t),ljo=i(Jt),g2=n(Jt,"P",{});var Zye=s(g2);ijo=r(Zye,"The model is set in evaluation mode by default using "),pfe=n(Zye,"CODE",{});var xlt=s(pfe);djo=r(xlt,"model.eval()"),xlt.forEach(t),cjo=r(Zye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_fe=n(Zye,"CODE",{});var klt=s(_fe);fjo=r(klt,"model.train()"),klt.forEach(t),Zye.forEach(t),mjo=i(Jt),ufe=n(Jt,"P",{});var Slt=s(ufe);gjo=r(Slt,"Examples:"),Slt.forEach(t),hjo=i(Jt),m(xw.$$.fragment,Jt),Jt.forEach(t),gl.forEach(t),mBe=i(c),xd=n(c,"H2",{class:!0});var T$e=s(xd);h2=n(T$e,"A",{id:!0,class:!0,href:!0});var Rlt=s(h2);bfe=n(Rlt,"SPAN",{});var Blt=s(bfe);m(kw.$$.fragment,Blt),Blt.forEach(t),Rlt.forEach(t),pjo=i(T$e),Ffe=n(T$e,"SPAN",{});var Plt=s(Ffe);_jo=r(Plt,"AutoModelForImageClassification"),Plt.forEach(t),T$e.forEach(t),gBe=i(c),lr=n(c,"DIV",{class:!0});var pl=s(lr);m(Sw.$$.fragment,pl),ujo=i(pl),kd=n(pl,"P",{});var BU=s(kd);bjo=r(BU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),BD=n(BU,"A",{href:!0});var $lt=s(BD);Fjo=r($lt,"from_pretrained()"),$lt.forEach(t),vjo=r(BU," class method or the "),PD=n(BU,"A",{href:!0});var Ilt=s(PD);Tjo=r(Ilt,"from_config()"),Ilt.forEach(t),Mjo=r(BU,` class
method.`),BU.forEach(t),Ejo=i(pl),Rw=n(pl,"P",{});var M$e=s(Rw);Cjo=r(M$e,"This class cannot be instantiated directly using "),vfe=n(M$e,"CODE",{});var qlt=s(vfe);wjo=r(qlt,"__init__()"),qlt.forEach(t),Ajo=r(M$e," (throws an error)."),M$e.forEach(t),yjo=i(pl),ot=n(pl,"DIV",{class:!0});var _l=s(ot);m(Bw.$$.fragment,_l),Ljo=i(_l),Tfe=n(_l,"P",{});var Nlt=s(Tfe);xjo=r(Nlt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Nlt.forEach(t),kjo=i(_l),Sd=n(_l,"P",{});var PU=s(Sd);Sjo=r(PU,`Note:
Loading a model from its configuration file does `),Mfe=n(PU,"STRONG",{});var jlt=s(Mfe);Rjo=r(jlt,"not"),jlt.forEach(t),Bjo=r(PU,` load the model weights. It only affects the
model\u2019s configuration. Use `),$D=n(PU,"A",{href:!0});var Dlt=s($D);Pjo=r(Dlt,"from_pretrained()"),Dlt.forEach(t),$jo=r(PU," to load the model weights."),PU.forEach(t),Ijo=i(_l),Efe=n(_l,"P",{});var Glt=s(Efe);qjo=r(Glt,"Examples:"),Glt.forEach(t),Njo=i(_l),m(Pw.$$.fragment,_l),_l.forEach(t),jjo=i(pl),He=n(pl,"DIV",{class:!0});var Yt=s(He);m($w.$$.fragment,Yt),Djo=i(Yt),Cfe=n(Yt,"P",{});var Olt=s(Cfe);Gjo=r(Olt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Olt.forEach(t),Ojo=i(Yt),on=n(Yt,"P",{});var OE=s(on);Vjo=r(OE,"The model class to instantiate is selected based on the "),wfe=n(OE,"CODE",{});var Vlt=s(wfe);Xjo=r(Vlt,"model_type"),Vlt.forEach(t),zjo=r(OE,` property of the config object (either
passed as an argument or loaded from `),Afe=n(OE,"CODE",{});var Xlt=s(Afe);Qjo=r(Xlt,"pretrained_model_name_or_path"),Xlt.forEach(t),Wjo=r(OE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yfe=n(OE,"CODE",{});var zlt=s(yfe);Hjo=r(zlt,"pretrained_model_name_or_path"),zlt.forEach(t),Ujo=r(OE,":"),OE.forEach(t),Jjo=i(Yt),ce=n(Yt,"UL",{});var he=s(ce);p2=n(he,"LI",{});var eLe=s(p2);Lfe=n(eLe,"STRONG",{});var Qlt=s(Lfe);Yjo=r(Qlt,"beit"),Qlt.forEach(t),Kjo=r(eLe," \u2014 "),ID=n(eLe,"A",{href:!0});var Wlt=s(ID);Zjo=r(Wlt,"BeitForImageClassification"),Wlt.forEach(t),eDo=r(eLe," (BEiT model)"),eLe.forEach(t),oDo=i(he),_2=n(he,"LI",{});var oLe=s(_2);xfe=n(oLe,"STRONG",{});var Hlt=s(xfe);rDo=r(Hlt,"convnext"),Hlt.forEach(t),tDo=r(oLe," \u2014 "),qD=n(oLe,"A",{href:!0});var Ult=s(qD);aDo=r(Ult,"ConvNextForImageClassification"),Ult.forEach(t),nDo=r(oLe," (ConvNext model)"),oLe.forEach(t),sDo=i(he),Ds=n(he,"LI",{});var u7=s(Ds);kfe=n(u7,"STRONG",{});var Jlt=s(kfe);lDo=r(Jlt,"deit"),Jlt.forEach(t),iDo=r(u7," \u2014 "),ND=n(u7,"A",{href:!0});var Ylt=s(ND);dDo=r(Ylt,"DeiTForImageClassification"),Ylt.forEach(t),cDo=r(u7," or "),jD=n(u7,"A",{href:!0});var Klt=s(jD);fDo=r(Klt,"DeiTForImageClassificationWithTeacher"),Klt.forEach(t),mDo=r(u7," (DeiT model)"),u7.forEach(t),gDo=i(he),u2=n(he,"LI",{});var rLe=s(u2);Sfe=n(rLe,"STRONG",{});var Zlt=s(Sfe);hDo=r(Zlt,"imagegpt"),Zlt.forEach(t),pDo=r(rLe," \u2014 "),DD=n(rLe,"A",{href:!0});var eit=s(DD);_Do=r(eit,"ImageGPTForImageClassification"),eit.forEach(t),uDo=r(rLe," (ImageGPT model)"),rLe.forEach(t),bDo=i(he),ma=n(he,"LI",{});var $f=s(ma);Rfe=n($f,"STRONG",{});var oit=s(Rfe);FDo=r(oit,"perceiver"),oit.forEach(t),vDo=r($f," \u2014 "),GD=n($f,"A",{href:!0});var rit=s(GD);TDo=r(rit,"PerceiverForImageClassificationLearned"),rit.forEach(t),MDo=r($f," or "),OD=n($f,"A",{href:!0});var tit=s(OD);EDo=r(tit,"PerceiverForImageClassificationFourier"),tit.forEach(t),CDo=r($f," or "),VD=n($f,"A",{href:!0});var ait=s(VD);wDo=r(ait,"PerceiverForImageClassificationConvProcessing"),ait.forEach(t),ADo=r($f," (Perceiver model)"),$f.forEach(t),yDo=i(he),b2=n(he,"LI",{});var tLe=s(b2);Bfe=n(tLe,"STRONG",{});var nit=s(Bfe);LDo=r(nit,"poolformer"),nit.forEach(t),xDo=r(tLe," \u2014 "),XD=n(tLe,"A",{href:!0});var sit=s(XD);kDo=r(sit,"PoolFormerForImageClassification"),sit.forEach(t),SDo=r(tLe," (PoolFormer model)"),tLe.forEach(t),RDo=i(he),F2=n(he,"LI",{});var aLe=s(F2);Pfe=n(aLe,"STRONG",{});var lit=s(Pfe);BDo=r(lit,"regnet"),lit.forEach(t),PDo=r(aLe," \u2014 "),zD=n(aLe,"A",{href:!0});var iit=s(zD);$Do=r(iit,"RegNetForImageClassification"),iit.forEach(t),IDo=r(aLe," (RegNet model)"),aLe.forEach(t),qDo=i(he),v2=n(he,"LI",{});var nLe=s(v2);$fe=n(nLe,"STRONG",{});var dit=s($fe);NDo=r(dit,"resnet"),dit.forEach(t),jDo=r(nLe," \u2014 "),QD=n(nLe,"A",{href:!0});var cit=s(QD);DDo=r(cit,"ResNetForImageClassification"),cit.forEach(t),GDo=r(nLe," (ResNet model)"),nLe.forEach(t),ODo=i(he),T2=n(he,"LI",{});var sLe=s(T2);Ife=n(sLe,"STRONG",{});var fit=s(Ife);VDo=r(fit,"segformer"),fit.forEach(t),XDo=r(sLe," \u2014 "),WD=n(sLe,"A",{href:!0});var mit=s(WD);zDo=r(mit,"SegformerForImageClassification"),mit.forEach(t),QDo=r(sLe," (SegFormer model)"),sLe.forEach(t),WDo=i(he),M2=n(he,"LI",{});var lLe=s(M2);qfe=n(lLe,"STRONG",{});var git=s(qfe);HDo=r(git,"swin"),git.forEach(t),UDo=r(lLe," \u2014 "),HD=n(lLe,"A",{href:!0});var hit=s(HD);JDo=r(hit,"SwinForImageClassification"),hit.forEach(t),YDo=r(lLe," (Swin model)"),lLe.forEach(t),KDo=i(he),E2=n(he,"LI",{});var iLe=s(E2);Nfe=n(iLe,"STRONG",{});var pit=s(Nfe);ZDo=r(pit,"van"),pit.forEach(t),eGo=r(iLe," \u2014 "),UD=n(iLe,"A",{href:!0});var _it=s(UD);oGo=r(_it,"VanForImageClassification"),_it.forEach(t),rGo=r(iLe," (VAN model)"),iLe.forEach(t),tGo=i(he),C2=n(he,"LI",{});var dLe=s(C2);jfe=n(dLe,"STRONG",{});var uit=s(jfe);aGo=r(uit,"vit"),uit.forEach(t),nGo=r(dLe," \u2014 "),JD=n(dLe,"A",{href:!0});var bit=s(JD);sGo=r(bit,"ViTForImageClassification"),bit.forEach(t),lGo=r(dLe," (ViT model)"),dLe.forEach(t),he.forEach(t),iGo=i(Yt),w2=n(Yt,"P",{});var cLe=s(w2);dGo=r(cLe,"The model is set in evaluation mode by default using "),Dfe=n(cLe,"CODE",{});var Fit=s(Dfe);cGo=r(Fit,"model.eval()"),Fit.forEach(t),fGo=r(cLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Gfe=n(cLe,"CODE",{});var vit=s(Gfe);mGo=r(vit,"model.train()"),vit.forEach(t),cLe.forEach(t),gGo=i(Yt),Ofe=n(Yt,"P",{});var Tit=s(Ofe);hGo=r(Tit,"Examples:"),Tit.forEach(t),pGo=i(Yt),m(Iw.$$.fragment,Yt),Yt.forEach(t),pl.forEach(t),hBe=i(c),Rd=n(c,"H2",{class:!0});var E$e=s(Rd);A2=n(E$e,"A",{id:!0,class:!0,href:!0});var Mit=s(A2);Vfe=n(Mit,"SPAN",{});var Eit=s(Vfe);m(qw.$$.fragment,Eit),Eit.forEach(t),Mit.forEach(t),_Go=i(E$e),Xfe=n(E$e,"SPAN",{});var Cit=s(Xfe);uGo=r(Cit,"AutoModelForVision2Seq"),Cit.forEach(t),E$e.forEach(t),pBe=i(c),ir=n(c,"DIV",{class:!0});var ul=s(ir);m(Nw.$$.fragment,ul),bGo=i(ul),Bd=n(ul,"P",{});var $U=s(Bd);FGo=r($U,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),YD=n($U,"A",{href:!0});var wit=s(YD);vGo=r(wit,"from_pretrained()"),wit.forEach(t),TGo=r($U," class method or the "),KD=n($U,"A",{href:!0});var Ait=s(KD);MGo=r(Ait,"from_config()"),Ait.forEach(t),EGo=r($U,` class
method.`),$U.forEach(t),CGo=i(ul),jw=n(ul,"P",{});var C$e=s(jw);wGo=r(C$e,"This class cannot be instantiated directly using "),zfe=n(C$e,"CODE",{});var yit=s(zfe);AGo=r(yit,"__init__()"),yit.forEach(t),yGo=r(C$e," (throws an error)."),C$e.forEach(t),LGo=i(ul),rt=n(ul,"DIV",{class:!0});var bl=s(rt);m(Dw.$$.fragment,bl),xGo=i(bl),Qfe=n(bl,"P",{});var Lit=s(Qfe);kGo=r(Lit,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Lit.forEach(t),SGo=i(bl),Pd=n(bl,"P",{});var IU=s(Pd);RGo=r(IU,`Note:
Loading a model from its configuration file does `),Wfe=n(IU,"STRONG",{});var xit=s(Wfe);BGo=r(xit,"not"),xit.forEach(t),PGo=r(IU,` load the model weights. It only affects the
model\u2019s configuration. Use `),ZD=n(IU,"A",{href:!0});var kit=s(ZD);$Go=r(kit,"from_pretrained()"),kit.forEach(t),IGo=r(IU," to load the model weights."),IU.forEach(t),qGo=i(bl),Hfe=n(bl,"P",{});var Sit=s(Hfe);NGo=r(Sit,"Examples:"),Sit.forEach(t),jGo=i(bl),m(Gw.$$.fragment,bl),bl.forEach(t),DGo=i(ul),Ue=n(ul,"DIV",{class:!0});var Kt=s(Ue);m(Ow.$$.fragment,Kt),GGo=i(Kt),Ufe=n(Kt,"P",{});var Rit=s(Ufe);OGo=r(Rit,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Rit.forEach(t),VGo=i(Kt),rn=n(Kt,"P",{});var VE=s(rn);XGo=r(VE,"The model class to instantiate is selected based on the "),Jfe=n(VE,"CODE",{});var Bit=s(Jfe);zGo=r(Bit,"model_type"),Bit.forEach(t),QGo=r(VE,` property of the config object (either
passed as an argument or loaded from `),Yfe=n(VE,"CODE",{});var Pit=s(Yfe);WGo=r(Pit,"pretrained_model_name_or_path"),Pit.forEach(t),HGo=r(VE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kfe=n(VE,"CODE",{});var $it=s(Kfe);UGo=r($it,"pretrained_model_name_or_path"),$it.forEach(t),JGo=r(VE,":"),VE.forEach(t),YGo=i(Kt),Zfe=n(Kt,"UL",{});var Iit=s(Zfe);y2=n(Iit,"LI",{});var fLe=s(y2);eme=n(fLe,"STRONG",{});var qit=s(eme);KGo=r(qit,"vision-encoder-decoder"),qit.forEach(t),ZGo=r(fLe," \u2014 "),eG=n(fLe,"A",{href:!0});var Nit=s(eG);eOo=r(Nit,"VisionEncoderDecoderModel"),Nit.forEach(t),oOo=r(fLe," (Vision Encoder decoder model)"),fLe.forEach(t),Iit.forEach(t),rOo=i(Kt),L2=n(Kt,"P",{});var mLe=s(L2);tOo=r(mLe,"The model is set in evaluation mode by default using "),ome=n(mLe,"CODE",{});var jit=s(ome);aOo=r(jit,"model.eval()"),jit.forEach(t),nOo=r(mLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),rme=n(mLe,"CODE",{});var Dit=s(rme);sOo=r(Dit,"model.train()"),Dit.forEach(t),mLe.forEach(t),lOo=i(Kt),tme=n(Kt,"P",{});var Git=s(tme);iOo=r(Git,"Examples:"),Git.forEach(t),dOo=i(Kt),m(Vw.$$.fragment,Kt),Kt.forEach(t),ul.forEach(t),_Be=i(c),$d=n(c,"H2",{class:!0});var w$e=s($d);x2=n(w$e,"A",{id:!0,class:!0,href:!0});var Oit=s(x2);ame=n(Oit,"SPAN",{});var Vit=s(ame);m(Xw.$$.fragment,Vit),Vit.forEach(t),Oit.forEach(t),cOo=i(w$e),nme=n(w$e,"SPAN",{});var Xit=s(nme);fOo=r(Xit,"AutoModelForAudioClassification"),Xit.forEach(t),w$e.forEach(t),uBe=i(c),dr=n(c,"DIV",{class:!0});var Fl=s(dr);m(zw.$$.fragment,Fl),mOo=i(Fl),Id=n(Fl,"P",{});var qU=s(Id);gOo=r(qU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),oG=n(qU,"A",{href:!0});var zit=s(oG);hOo=r(zit,"from_pretrained()"),zit.forEach(t),pOo=r(qU," class method or the "),rG=n(qU,"A",{href:!0});var Qit=s(rG);_Oo=r(Qit,"from_config()"),Qit.forEach(t),uOo=r(qU,` class
method.`),qU.forEach(t),bOo=i(Fl),Qw=n(Fl,"P",{});var A$e=s(Qw);FOo=r(A$e,"This class cannot be instantiated directly using "),sme=n(A$e,"CODE",{});var Wit=s(sme);vOo=r(Wit,"__init__()"),Wit.forEach(t),TOo=r(A$e," (throws an error)."),A$e.forEach(t),MOo=i(Fl),tt=n(Fl,"DIV",{class:!0});var vl=s(tt);m(Ww.$$.fragment,vl),EOo=i(vl),lme=n(vl,"P",{});var Hit=s(lme);COo=r(Hit,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),Hit.forEach(t),wOo=i(vl),qd=n(vl,"P",{});var NU=s(qd);AOo=r(NU,`Note:
Loading a model from its configuration file does `),ime=n(NU,"STRONG",{});var Uit=s(ime);yOo=r(Uit,"not"),Uit.forEach(t),LOo=r(NU,` load the model weights. It only affects the
model\u2019s configuration. Use `),tG=n(NU,"A",{href:!0});var Jit=s(tG);xOo=r(Jit,"from_pretrained()"),Jit.forEach(t),kOo=r(NU," to load the model weights."),NU.forEach(t),SOo=i(vl),dme=n(vl,"P",{});var Yit=s(dme);ROo=r(Yit,"Examples:"),Yit.forEach(t),BOo=i(vl),m(Hw.$$.fragment,vl),vl.forEach(t),POo=i(Fl),Je=n(Fl,"DIV",{class:!0});var Zt=s(Je);m(Uw.$$.fragment,Zt),$Oo=i(Zt),cme=n(Zt,"P",{});var Kit=s(cme);IOo=r(Kit,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),Kit.forEach(t),qOo=i(Zt),tn=n(Zt,"P",{});var XE=s(tn);NOo=r(XE,"The model class to instantiate is selected based on the "),fme=n(XE,"CODE",{});var Zit=s(fme);jOo=r(Zit,"model_type"),Zit.forEach(t),DOo=r(XE,` property of the config object (either
passed as an argument or loaded from `),mme=n(XE,"CODE",{});var edt=s(mme);GOo=r(edt,"pretrained_model_name_or_path"),edt.forEach(t),OOo=r(XE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gme=n(XE,"CODE",{});var odt=s(gme);VOo=r(odt,"pretrained_model_name_or_path"),odt.forEach(t),XOo=r(XE,":"),XE.forEach(t),zOo=i(Zt),Se=n(Zt,"UL",{});var Do=s(Se);k2=n(Do,"LI",{});var gLe=s(k2);hme=n(gLe,"STRONG",{});var rdt=s(hme);QOo=r(rdt,"data2vec-audio"),rdt.forEach(t),WOo=r(gLe," \u2014 "),aG=n(gLe,"A",{href:!0});var tdt=s(aG);HOo=r(tdt,"Data2VecAudioForSequenceClassification"),tdt.forEach(t),UOo=r(gLe," (Data2VecAudio model)"),gLe.forEach(t),JOo=i(Do),S2=n(Do,"LI",{});var hLe=s(S2);pme=n(hLe,"STRONG",{});var adt=s(pme);YOo=r(adt,"hubert"),adt.forEach(t),KOo=r(hLe," \u2014 "),nG=n(hLe,"A",{href:!0});var ndt=s(nG);ZOo=r(ndt,"HubertForSequenceClassification"),ndt.forEach(t),eVo=r(hLe," (Hubert model)"),hLe.forEach(t),oVo=i(Do),R2=n(Do,"LI",{});var pLe=s(R2);_me=n(pLe,"STRONG",{});var sdt=s(_me);rVo=r(sdt,"sew"),sdt.forEach(t),tVo=r(pLe," \u2014 "),sG=n(pLe,"A",{href:!0});var ldt=s(sG);aVo=r(ldt,"SEWForSequenceClassification"),ldt.forEach(t),nVo=r(pLe," (SEW model)"),pLe.forEach(t),sVo=i(Do),B2=n(Do,"LI",{});var _Le=s(B2);ume=n(_Le,"STRONG",{});var idt=s(ume);lVo=r(idt,"sew-d"),idt.forEach(t),iVo=r(_Le," \u2014 "),lG=n(_Le,"A",{href:!0});var ddt=s(lG);dVo=r(ddt,"SEWDForSequenceClassification"),ddt.forEach(t),cVo=r(_Le," (SEW-D model)"),_Le.forEach(t),fVo=i(Do),P2=n(Do,"LI",{});var uLe=s(P2);bme=n(uLe,"STRONG",{});var cdt=s(bme);mVo=r(cdt,"unispeech"),cdt.forEach(t),gVo=r(uLe," \u2014 "),iG=n(uLe,"A",{href:!0});var fdt=s(iG);hVo=r(fdt,"UniSpeechForSequenceClassification"),fdt.forEach(t),pVo=r(uLe," (UniSpeech model)"),uLe.forEach(t),_Vo=i(Do),$2=n(Do,"LI",{});var bLe=s($2);Fme=n(bLe,"STRONG",{});var mdt=s(Fme);uVo=r(mdt,"unispeech-sat"),mdt.forEach(t),bVo=r(bLe," \u2014 "),dG=n(bLe,"A",{href:!0});var gdt=s(dG);FVo=r(gdt,"UniSpeechSatForSequenceClassification"),gdt.forEach(t),vVo=r(bLe," (UniSpeechSat model)"),bLe.forEach(t),TVo=i(Do),I2=n(Do,"LI",{});var FLe=s(I2);vme=n(FLe,"STRONG",{});var hdt=s(vme);MVo=r(hdt,"wav2vec2"),hdt.forEach(t),EVo=r(FLe," \u2014 "),cG=n(FLe,"A",{href:!0});var pdt=s(cG);CVo=r(pdt,"Wav2Vec2ForSequenceClassification"),pdt.forEach(t),wVo=r(FLe," (Wav2Vec2 model)"),FLe.forEach(t),AVo=i(Do),q2=n(Do,"LI",{});var vLe=s(q2);Tme=n(vLe,"STRONG",{});var _dt=s(Tme);yVo=r(_dt,"wavlm"),_dt.forEach(t),LVo=r(vLe," \u2014 "),fG=n(vLe,"A",{href:!0});var udt=s(fG);xVo=r(udt,"WavLMForSequenceClassification"),udt.forEach(t),kVo=r(vLe," (WavLM model)"),vLe.forEach(t),Do.forEach(t),SVo=i(Zt),N2=n(Zt,"P",{});var TLe=s(N2);RVo=r(TLe,"The model is set in evaluation mode by default using "),Mme=n(TLe,"CODE",{});var bdt=s(Mme);BVo=r(bdt,"model.eval()"),bdt.forEach(t),PVo=r(TLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Eme=n(TLe,"CODE",{});var Fdt=s(Eme);$Vo=r(Fdt,"model.train()"),Fdt.forEach(t),TLe.forEach(t),IVo=i(Zt),Cme=n(Zt,"P",{});var vdt=s(Cme);qVo=r(vdt,"Examples:"),vdt.forEach(t),NVo=i(Zt),m(Jw.$$.fragment,Zt),Zt.forEach(t),Fl.forEach(t),bBe=i(c),Nd=n(c,"H2",{class:!0});var y$e=s(Nd);j2=n(y$e,"A",{id:!0,class:!0,href:!0});var Tdt=s(j2);wme=n(Tdt,"SPAN",{});var Mdt=s(wme);m(Yw.$$.fragment,Mdt),Mdt.forEach(t),Tdt.forEach(t),jVo=i(y$e),Ame=n(y$e,"SPAN",{});var Edt=s(Ame);DVo=r(Edt,"AutoModelForAudioFrameClassification"),Edt.forEach(t),y$e.forEach(t),FBe=i(c),cr=n(c,"DIV",{class:!0});var Tl=s(cr);m(Kw.$$.fragment,Tl),GVo=i(Tl),jd=n(Tl,"P",{});var jU=s(jd);OVo=r(jU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),mG=n(jU,"A",{href:!0});var Cdt=s(mG);VVo=r(Cdt,"from_pretrained()"),Cdt.forEach(t),XVo=r(jU," class method or the "),gG=n(jU,"A",{href:!0});var wdt=s(gG);zVo=r(wdt,"from_config()"),wdt.forEach(t),QVo=r(jU,` class
method.`),jU.forEach(t),WVo=i(Tl),Zw=n(Tl,"P",{});var L$e=s(Zw);HVo=r(L$e,"This class cannot be instantiated directly using "),yme=n(L$e,"CODE",{});var Adt=s(yme);UVo=r(Adt,"__init__()"),Adt.forEach(t),JVo=r(L$e," (throws an error)."),L$e.forEach(t),YVo=i(Tl),at=n(Tl,"DIV",{class:!0});var Ml=s(at);m(eA.$$.fragment,Ml),KVo=i(Ml),Lme=n(Ml,"P",{});var ydt=s(Lme);ZVo=r(ydt,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),ydt.forEach(t),eXo=i(Ml),Dd=n(Ml,"P",{});var DU=s(Dd);oXo=r(DU,`Note:
Loading a model from its configuration file does `),xme=n(DU,"STRONG",{});var Ldt=s(xme);rXo=r(Ldt,"not"),Ldt.forEach(t),tXo=r(DU,` load the model weights. It only affects the
model\u2019s configuration. Use `),hG=n(DU,"A",{href:!0});var xdt=s(hG);aXo=r(xdt,"from_pretrained()"),xdt.forEach(t),nXo=r(DU," to load the model weights."),DU.forEach(t),sXo=i(Ml),kme=n(Ml,"P",{});var kdt=s(kme);lXo=r(kdt,"Examples:"),kdt.forEach(t),iXo=i(Ml),m(oA.$$.fragment,Ml),Ml.forEach(t),dXo=i(Tl),Ye=n(Tl,"DIV",{class:!0});var ea=s(Ye);m(rA.$$.fragment,ea),cXo=i(ea),Sme=n(ea,"P",{});var Sdt=s(Sme);fXo=r(Sdt,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),Sdt.forEach(t),mXo=i(ea),an=n(ea,"P",{});var zE=s(an);gXo=r(zE,"The model class to instantiate is selected based on the "),Rme=n(zE,"CODE",{});var Rdt=s(Rme);hXo=r(Rdt,"model_type"),Rdt.forEach(t),pXo=r(zE,` property of the config object (either
passed as an argument or loaded from `),Bme=n(zE,"CODE",{});var Bdt=s(Bme);_Xo=r(Bdt,"pretrained_model_name_or_path"),Bdt.forEach(t),uXo=r(zE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Pme=n(zE,"CODE",{});var Pdt=s(Pme);bXo=r(Pdt,"pretrained_model_name_or_path"),Pdt.forEach(t),FXo=r(zE,":"),zE.forEach(t),vXo=i(ea),nn=n(ea,"UL",{});var QE=s(nn);D2=n(QE,"LI",{});var MLe=s(D2);$me=n(MLe,"STRONG",{});var $dt=s($me);TXo=r($dt,"data2vec-audio"),$dt.forEach(t),MXo=r(MLe," \u2014 "),pG=n(MLe,"A",{href:!0});var Idt=s(pG);EXo=r(Idt,"Data2VecAudioForAudioFrameClassification"),Idt.forEach(t),CXo=r(MLe," (Data2VecAudio model)"),MLe.forEach(t),wXo=i(QE),G2=n(QE,"LI",{});var ELe=s(G2);Ime=n(ELe,"STRONG",{});var qdt=s(Ime);AXo=r(qdt,"unispeech-sat"),qdt.forEach(t),yXo=r(ELe," \u2014 "),_G=n(ELe,"A",{href:!0});var Ndt=s(_G);LXo=r(Ndt,"UniSpeechSatForAudioFrameClassification"),Ndt.forEach(t),xXo=r(ELe," (UniSpeechSat model)"),ELe.forEach(t),kXo=i(QE),O2=n(QE,"LI",{});var CLe=s(O2);qme=n(CLe,"STRONG",{});var jdt=s(qme);SXo=r(jdt,"wav2vec2"),jdt.forEach(t),RXo=r(CLe," \u2014 "),uG=n(CLe,"A",{href:!0});var Ddt=s(uG);BXo=r(Ddt,"Wav2Vec2ForAudioFrameClassification"),Ddt.forEach(t),PXo=r(CLe," (Wav2Vec2 model)"),CLe.forEach(t),$Xo=i(QE),V2=n(QE,"LI",{});var wLe=s(V2);Nme=n(wLe,"STRONG",{});var Gdt=s(Nme);IXo=r(Gdt,"wavlm"),Gdt.forEach(t),qXo=r(wLe," \u2014 "),bG=n(wLe,"A",{href:!0});var Odt=s(bG);NXo=r(Odt,"WavLMForAudioFrameClassification"),Odt.forEach(t),jXo=r(wLe," (WavLM model)"),wLe.forEach(t),QE.forEach(t),DXo=i(ea),X2=n(ea,"P",{});var ALe=s(X2);GXo=r(ALe,"The model is set in evaluation mode by default using "),jme=n(ALe,"CODE",{});var Vdt=s(jme);OXo=r(Vdt,"model.eval()"),Vdt.forEach(t),VXo=r(ALe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Dme=n(ALe,"CODE",{});var Xdt=s(Dme);XXo=r(Xdt,"model.train()"),Xdt.forEach(t),ALe.forEach(t),zXo=i(ea),Gme=n(ea,"P",{});var zdt=s(Gme);QXo=r(zdt,"Examples:"),zdt.forEach(t),WXo=i(ea),m(tA.$$.fragment,ea),ea.forEach(t),Tl.forEach(t),vBe=i(c),Gd=n(c,"H2",{class:!0});var x$e=s(Gd);z2=n(x$e,"A",{id:!0,class:!0,href:!0});var Qdt=s(z2);Ome=n(Qdt,"SPAN",{});var Wdt=s(Ome);m(aA.$$.fragment,Wdt),Wdt.forEach(t),Qdt.forEach(t),HXo=i(x$e),Vme=n(x$e,"SPAN",{});var Hdt=s(Vme);UXo=r(Hdt,"AutoModelForCTC"),Hdt.forEach(t),x$e.forEach(t),TBe=i(c),fr=n(c,"DIV",{class:!0});var El=s(fr);m(nA.$$.fragment,El),JXo=i(El),Od=n(El,"P",{});var GU=s(Od);YXo=r(GU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),FG=n(GU,"A",{href:!0});var Udt=s(FG);KXo=r(Udt,"from_pretrained()"),Udt.forEach(t),ZXo=r(GU," class method or the "),vG=n(GU,"A",{href:!0});var Jdt=s(vG);ezo=r(Jdt,"from_config()"),Jdt.forEach(t),ozo=r(GU,` class
method.`),GU.forEach(t),rzo=i(El),sA=n(El,"P",{});var k$e=s(sA);tzo=r(k$e,"This class cannot be instantiated directly using "),Xme=n(k$e,"CODE",{});var Ydt=s(Xme);azo=r(Ydt,"__init__()"),Ydt.forEach(t),nzo=r(k$e," (throws an error)."),k$e.forEach(t),szo=i(El),nt=n(El,"DIV",{class:!0});var Cl=s(nt);m(lA.$$.fragment,Cl),lzo=i(Cl),zme=n(Cl,"P",{});var Kdt=s(zme);izo=r(Kdt,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),Kdt.forEach(t),dzo=i(Cl),Vd=n(Cl,"P",{});var OU=s(Vd);czo=r(OU,`Note:
Loading a model from its configuration file does `),Qme=n(OU,"STRONG",{});var Zdt=s(Qme);fzo=r(Zdt,"not"),Zdt.forEach(t),mzo=r(OU,` load the model weights. It only affects the
model\u2019s configuration. Use `),TG=n(OU,"A",{href:!0});var ect=s(TG);gzo=r(ect,"from_pretrained()"),ect.forEach(t),hzo=r(OU," to load the model weights."),OU.forEach(t),pzo=i(Cl),Wme=n(Cl,"P",{});var oct=s(Wme);_zo=r(oct,"Examples:"),oct.forEach(t),uzo=i(Cl),m(iA.$$.fragment,Cl),Cl.forEach(t),bzo=i(El),Ke=n(El,"DIV",{class:!0});var oa=s(Ke);m(dA.$$.fragment,oa),Fzo=i(oa),Hme=n(oa,"P",{});var rct=s(Hme);vzo=r(rct,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),rct.forEach(t),Tzo=i(oa),sn=n(oa,"P",{});var WE=s(sn);Mzo=r(WE,"The model class to instantiate is selected based on the "),Ume=n(WE,"CODE",{});var tct=s(Ume);Ezo=r(tct,"model_type"),tct.forEach(t),Czo=r(WE,` property of the config object (either
passed as an argument or loaded from `),Jme=n(WE,"CODE",{});var act=s(Jme);wzo=r(act,"pretrained_model_name_or_path"),act.forEach(t),Azo=r(WE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yme=n(WE,"CODE",{});var nct=s(Yme);yzo=r(nct,"pretrained_model_name_or_path"),nct.forEach(t),Lzo=r(WE,":"),WE.forEach(t),xzo=i(oa),Re=n(oa,"UL",{});var Go=s(Re);Q2=n(Go,"LI",{});var yLe=s(Q2);Kme=n(yLe,"STRONG",{});var sct=s(Kme);kzo=r(sct,"data2vec-audio"),sct.forEach(t),Szo=r(yLe," \u2014 "),MG=n(yLe,"A",{href:!0});var lct=s(MG);Rzo=r(lct,"Data2VecAudioForCTC"),lct.forEach(t),Bzo=r(yLe," (Data2VecAudio model)"),yLe.forEach(t),Pzo=i(Go),W2=n(Go,"LI",{});var LLe=s(W2);Zme=n(LLe,"STRONG",{});var ict=s(Zme);$zo=r(ict,"hubert"),ict.forEach(t),Izo=r(LLe," \u2014 "),EG=n(LLe,"A",{href:!0});var dct=s(EG);qzo=r(dct,"HubertForCTC"),dct.forEach(t),Nzo=r(LLe," (Hubert model)"),LLe.forEach(t),jzo=i(Go),H2=n(Go,"LI",{});var xLe=s(H2);ege=n(xLe,"STRONG",{});var cct=s(ege);Dzo=r(cct,"sew"),cct.forEach(t),Gzo=r(xLe," \u2014 "),CG=n(xLe,"A",{href:!0});var fct=s(CG);Ozo=r(fct,"SEWForCTC"),fct.forEach(t),Vzo=r(xLe," (SEW model)"),xLe.forEach(t),Xzo=i(Go),U2=n(Go,"LI",{});var kLe=s(U2);oge=n(kLe,"STRONG",{});var mct=s(oge);zzo=r(mct,"sew-d"),mct.forEach(t),Qzo=r(kLe," \u2014 "),wG=n(kLe,"A",{href:!0});var gct=s(wG);Wzo=r(gct,"SEWDForCTC"),gct.forEach(t),Hzo=r(kLe," (SEW-D model)"),kLe.forEach(t),Uzo=i(Go),J2=n(Go,"LI",{});var SLe=s(J2);rge=n(SLe,"STRONG",{});var hct=s(rge);Jzo=r(hct,"unispeech"),hct.forEach(t),Yzo=r(SLe," \u2014 "),AG=n(SLe,"A",{href:!0});var pct=s(AG);Kzo=r(pct,"UniSpeechForCTC"),pct.forEach(t),Zzo=r(SLe," (UniSpeech model)"),SLe.forEach(t),eQo=i(Go),Y2=n(Go,"LI",{});var RLe=s(Y2);tge=n(RLe,"STRONG",{});var _ct=s(tge);oQo=r(_ct,"unispeech-sat"),_ct.forEach(t),rQo=r(RLe," \u2014 "),yG=n(RLe,"A",{href:!0});var uct=s(yG);tQo=r(uct,"UniSpeechSatForCTC"),uct.forEach(t),aQo=r(RLe," (UniSpeechSat model)"),RLe.forEach(t),nQo=i(Go),K2=n(Go,"LI",{});var BLe=s(K2);age=n(BLe,"STRONG",{});var bct=s(age);sQo=r(bct,"wav2vec2"),bct.forEach(t),lQo=r(BLe," \u2014 "),LG=n(BLe,"A",{href:!0});var Fct=s(LG);iQo=r(Fct,"Wav2Vec2ForCTC"),Fct.forEach(t),dQo=r(BLe," (Wav2Vec2 model)"),BLe.forEach(t),cQo=i(Go),Z2=n(Go,"LI",{});var PLe=s(Z2);nge=n(PLe,"STRONG",{});var vct=s(nge);fQo=r(vct,"wavlm"),vct.forEach(t),mQo=r(PLe," \u2014 "),xG=n(PLe,"A",{href:!0});var Tct=s(xG);gQo=r(Tct,"WavLMForCTC"),Tct.forEach(t),hQo=r(PLe," (WavLM model)"),PLe.forEach(t),Go.forEach(t),pQo=i(oa),eF=n(oa,"P",{});var $Le=s(eF);_Qo=r($Le,"The model is set in evaluation mode by default using "),sge=n($Le,"CODE",{});var Mct=s(sge);uQo=r(Mct,"model.eval()"),Mct.forEach(t),bQo=r($Le,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),lge=n($Le,"CODE",{});var Ect=s(lge);FQo=r(Ect,"model.train()"),Ect.forEach(t),$Le.forEach(t),vQo=i(oa),ige=n(oa,"P",{});var Cct=s(ige);TQo=r(Cct,"Examples:"),Cct.forEach(t),MQo=i(oa),m(cA.$$.fragment,oa),oa.forEach(t),El.forEach(t),MBe=i(c),Xd=n(c,"H2",{class:!0});var S$e=s(Xd);oF=n(S$e,"A",{id:!0,class:!0,href:!0});var wct=s(oF);dge=n(wct,"SPAN",{});var Act=s(dge);m(fA.$$.fragment,Act),Act.forEach(t),wct.forEach(t),EQo=i(S$e),cge=n(S$e,"SPAN",{});var yct=s(cge);CQo=r(yct,"AutoModelForSpeechSeq2Seq"),yct.forEach(t),S$e.forEach(t),EBe=i(c),mr=n(c,"DIV",{class:!0});var wl=s(mr);m(mA.$$.fragment,wl),wQo=i(wl),zd=n(wl,"P",{});var VU=s(zd);AQo=r(VU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),kG=n(VU,"A",{href:!0});var Lct=s(kG);yQo=r(Lct,"from_pretrained()"),Lct.forEach(t),LQo=r(VU," class method or the "),SG=n(VU,"A",{href:!0});var xct=s(SG);xQo=r(xct,"from_config()"),xct.forEach(t),kQo=r(VU,` class
method.`),VU.forEach(t),SQo=i(wl),gA=n(wl,"P",{});var R$e=s(gA);RQo=r(R$e,"This class cannot be instantiated directly using "),fge=n(R$e,"CODE",{});var kct=s(fge);BQo=r(kct,"__init__()"),kct.forEach(t),PQo=r(R$e," (throws an error)."),R$e.forEach(t),$Qo=i(wl),st=n(wl,"DIV",{class:!0});var Al=s(st);m(hA.$$.fragment,Al),IQo=i(Al),mge=n(Al,"P",{});var Sct=s(mge);qQo=r(Sct,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Sct.forEach(t),NQo=i(Al),Qd=n(Al,"P",{});var XU=s(Qd);jQo=r(XU,`Note:
Loading a model from its configuration file does `),gge=n(XU,"STRONG",{});var Rct=s(gge);DQo=r(Rct,"not"),Rct.forEach(t),GQo=r(XU,` load the model weights. It only affects the
model\u2019s configuration. Use `),RG=n(XU,"A",{href:!0});var Bct=s(RG);OQo=r(Bct,"from_pretrained()"),Bct.forEach(t),VQo=r(XU," to load the model weights."),XU.forEach(t),XQo=i(Al),hge=n(Al,"P",{});var Pct=s(hge);zQo=r(Pct,"Examples:"),Pct.forEach(t),QQo=i(Al),m(pA.$$.fragment,Al),Al.forEach(t),WQo=i(wl),Ze=n(wl,"DIV",{class:!0});var ra=s(Ze);m(_A.$$.fragment,ra),HQo=i(ra),pge=n(ra,"P",{});var $ct=s(pge);UQo=r($ct,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),$ct.forEach(t),JQo=i(ra),ln=n(ra,"P",{});var HE=s(ln);YQo=r(HE,"The model class to instantiate is selected based on the "),_ge=n(HE,"CODE",{});var Ict=s(_ge);KQo=r(Ict,"model_type"),Ict.forEach(t),ZQo=r(HE,` property of the config object (either
passed as an argument or loaded from `),uge=n(HE,"CODE",{});var qct=s(uge);eWo=r(qct,"pretrained_model_name_or_path"),qct.forEach(t),oWo=r(HE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bge=n(HE,"CODE",{});var Nct=s(bge);rWo=r(Nct,"pretrained_model_name_or_path"),Nct.forEach(t),tWo=r(HE,":"),HE.forEach(t),aWo=i(ra),uA=n(ra,"UL",{});var B$e=s(uA);rF=n(B$e,"LI",{});var ILe=s(rF);Fge=n(ILe,"STRONG",{});var jct=s(Fge);nWo=r(jct,"speech-encoder-decoder"),jct.forEach(t),sWo=r(ILe," \u2014 "),BG=n(ILe,"A",{href:!0});var Dct=s(BG);lWo=r(Dct,"SpeechEncoderDecoderModel"),Dct.forEach(t),iWo=r(ILe," (Speech Encoder decoder model)"),ILe.forEach(t),dWo=i(B$e),tF=n(B$e,"LI",{});var qLe=s(tF);vge=n(qLe,"STRONG",{});var Gct=s(vge);cWo=r(Gct,"speech_to_text"),Gct.forEach(t),fWo=r(qLe," \u2014 "),PG=n(qLe,"A",{href:!0});var Oct=s(PG);mWo=r(Oct,"Speech2TextForConditionalGeneration"),Oct.forEach(t),gWo=r(qLe," (Speech2Text model)"),qLe.forEach(t),B$e.forEach(t),hWo=i(ra),aF=n(ra,"P",{});var NLe=s(aF);pWo=r(NLe,"The model is set in evaluation mode by default using "),Tge=n(NLe,"CODE",{});var Vct=s(Tge);_Wo=r(Vct,"model.eval()"),Vct.forEach(t),uWo=r(NLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Mge=n(NLe,"CODE",{});var Xct=s(Mge);bWo=r(Xct,"model.train()"),Xct.forEach(t),NLe.forEach(t),FWo=i(ra),Ege=n(ra,"P",{});var zct=s(Ege);vWo=r(zct,"Examples:"),zct.forEach(t),TWo=i(ra),m(bA.$$.fragment,ra),ra.forEach(t),wl.forEach(t),CBe=i(c),Wd=n(c,"H2",{class:!0});var P$e=s(Wd);nF=n(P$e,"A",{id:!0,class:!0,href:!0});var Qct=s(nF);Cge=n(Qct,"SPAN",{});var Wct=s(Cge);m(FA.$$.fragment,Wct),Wct.forEach(t),Qct.forEach(t),MWo=i(P$e),wge=n(P$e,"SPAN",{});var Hct=s(wge);EWo=r(Hct,"AutoModelForAudioXVector"),Hct.forEach(t),P$e.forEach(t),wBe=i(c),gr=n(c,"DIV",{class:!0});var yl=s(gr);m(vA.$$.fragment,yl),CWo=i(yl),Hd=n(yl,"P",{});var zU=s(Hd);wWo=r(zU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),$G=n(zU,"A",{href:!0});var Uct=s($G);AWo=r(Uct,"from_pretrained()"),Uct.forEach(t),yWo=r(zU," class method or the "),IG=n(zU,"A",{href:!0});var Jct=s(IG);LWo=r(Jct,"from_config()"),Jct.forEach(t),xWo=r(zU,` class
method.`),zU.forEach(t),kWo=i(yl),TA=n(yl,"P",{});var $$e=s(TA);SWo=r($$e,"This class cannot be instantiated directly using "),Age=n($$e,"CODE",{});var Yct=s(Age);RWo=r(Yct,"__init__()"),Yct.forEach(t),BWo=r($$e," (throws an error)."),$$e.forEach(t),PWo=i(yl),lt=n(yl,"DIV",{class:!0});var Ll=s(lt);m(MA.$$.fragment,Ll),$Wo=i(Ll),yge=n(Ll,"P",{});var Kct=s(yge);IWo=r(Kct,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),Kct.forEach(t),qWo=i(Ll),Ud=n(Ll,"P",{});var QU=s(Ud);NWo=r(QU,`Note:
Loading a model from its configuration file does `),Lge=n(QU,"STRONG",{});var Zct=s(Lge);jWo=r(Zct,"not"),Zct.forEach(t),DWo=r(QU,` load the model weights. It only affects the
model\u2019s configuration. Use `),qG=n(QU,"A",{href:!0});var eft=s(qG);GWo=r(eft,"from_pretrained()"),eft.forEach(t),OWo=r(QU," to load the model weights."),QU.forEach(t),VWo=i(Ll),xge=n(Ll,"P",{});var oft=s(xge);XWo=r(oft,"Examples:"),oft.forEach(t),zWo=i(Ll),m(EA.$$.fragment,Ll),Ll.forEach(t),QWo=i(yl),eo=n(yl,"DIV",{class:!0});var ta=s(eo);m(CA.$$.fragment,ta),WWo=i(ta),kge=n(ta,"P",{});var rft=s(kge);HWo=r(rft,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),rft.forEach(t),UWo=i(ta),dn=n(ta,"P",{});var UE=s(dn);JWo=r(UE,"The model class to instantiate is selected based on the "),Sge=n(UE,"CODE",{});var tft=s(Sge);YWo=r(tft,"model_type"),tft.forEach(t),KWo=r(UE,` property of the config object (either
passed as an argument or loaded from `),Rge=n(UE,"CODE",{});var aft=s(Rge);ZWo=r(aft,"pretrained_model_name_or_path"),aft.forEach(t),eHo=r(UE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bge=n(UE,"CODE",{});var nft=s(Bge);oHo=r(nft,"pretrained_model_name_or_path"),nft.forEach(t),rHo=r(UE,":"),UE.forEach(t),tHo=i(ta),cn=n(ta,"UL",{});var JE=s(cn);sF=n(JE,"LI",{});var jLe=s(sF);Pge=n(jLe,"STRONG",{});var sft=s(Pge);aHo=r(sft,"data2vec-audio"),sft.forEach(t),nHo=r(jLe," \u2014 "),NG=n(jLe,"A",{href:!0});var lft=s(NG);sHo=r(lft,"Data2VecAudioForXVector"),lft.forEach(t),lHo=r(jLe," (Data2VecAudio model)"),jLe.forEach(t),iHo=i(JE),lF=n(JE,"LI",{});var DLe=s(lF);$ge=n(DLe,"STRONG",{});var ift=s($ge);dHo=r(ift,"unispeech-sat"),ift.forEach(t),cHo=r(DLe," \u2014 "),jG=n(DLe,"A",{href:!0});var dft=s(jG);fHo=r(dft,"UniSpeechSatForXVector"),dft.forEach(t),mHo=r(DLe," (UniSpeechSat model)"),DLe.forEach(t),gHo=i(JE),iF=n(JE,"LI",{});var GLe=s(iF);Ige=n(GLe,"STRONG",{});var cft=s(Ige);hHo=r(cft,"wav2vec2"),cft.forEach(t),pHo=r(GLe," \u2014 "),DG=n(GLe,"A",{href:!0});var fft=s(DG);_Ho=r(fft,"Wav2Vec2ForXVector"),fft.forEach(t),uHo=r(GLe," (Wav2Vec2 model)"),GLe.forEach(t),bHo=i(JE),dF=n(JE,"LI",{});var OLe=s(dF);qge=n(OLe,"STRONG",{});var mft=s(qge);FHo=r(mft,"wavlm"),mft.forEach(t),vHo=r(OLe," \u2014 "),GG=n(OLe,"A",{href:!0});var gft=s(GG);THo=r(gft,"WavLMForXVector"),gft.forEach(t),MHo=r(OLe," (WavLM model)"),OLe.forEach(t),JE.forEach(t),EHo=i(ta),cF=n(ta,"P",{});var VLe=s(cF);CHo=r(VLe,"The model is set in evaluation mode by default using "),Nge=n(VLe,"CODE",{});var hft=s(Nge);wHo=r(hft,"model.eval()"),hft.forEach(t),AHo=r(VLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),jge=n(VLe,"CODE",{});var pft=s(jge);yHo=r(pft,"model.train()"),pft.forEach(t),VLe.forEach(t),LHo=i(ta),Dge=n(ta,"P",{});var _ft=s(Dge);xHo=r(_ft,"Examples:"),_ft.forEach(t),kHo=i(ta),m(wA.$$.fragment,ta),ta.forEach(t),yl.forEach(t),ABe=i(c),Jd=n(c,"H2",{class:!0});var I$e=s(Jd);fF=n(I$e,"A",{id:!0,class:!0,href:!0});var uft=s(fF);Gge=n(uft,"SPAN",{});var bft=s(Gge);m(AA.$$.fragment,bft),bft.forEach(t),uft.forEach(t),SHo=i(I$e),Oge=n(I$e,"SPAN",{});var Fft=s(Oge);RHo=r(Fft,"AutoModelForMaskedImageModeling"),Fft.forEach(t),I$e.forEach(t),yBe=i(c),hr=n(c,"DIV",{class:!0});var xl=s(hr);m(yA.$$.fragment,xl),BHo=i(xl),Yd=n(xl,"P",{});var WU=s(Yd);PHo=r(WU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),OG=n(WU,"A",{href:!0});var vft=s(OG);$Ho=r(vft,"from_pretrained()"),vft.forEach(t),IHo=r(WU," class method or the "),VG=n(WU,"A",{href:!0});var Tft=s(VG);qHo=r(Tft,"from_config()"),Tft.forEach(t),NHo=r(WU,` class
method.`),WU.forEach(t),jHo=i(xl),LA=n(xl,"P",{});var q$e=s(LA);DHo=r(q$e,"This class cannot be instantiated directly using "),Vge=n(q$e,"CODE",{});var Mft=s(Vge);GHo=r(Mft,"__init__()"),Mft.forEach(t),OHo=r(q$e," (throws an error)."),q$e.forEach(t),VHo=i(xl),it=n(xl,"DIV",{class:!0});var kl=s(it);m(xA.$$.fragment,kl),XHo=i(kl),Xge=n(kl,"P",{});var Eft=s(Xge);zHo=r(Eft,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),Eft.forEach(t),QHo=i(kl),Kd=n(kl,"P",{});var HU=s(Kd);WHo=r(HU,`Note:
Loading a model from its configuration file does `),zge=n(HU,"STRONG",{});var Cft=s(zge);HHo=r(Cft,"not"),Cft.forEach(t),UHo=r(HU,` load the model weights. It only affects the
model\u2019s configuration. Use `),XG=n(HU,"A",{href:!0});var wft=s(XG);JHo=r(wft,"from_pretrained()"),wft.forEach(t),YHo=r(HU," to load the model weights."),HU.forEach(t),KHo=i(kl),Qge=n(kl,"P",{});var Aft=s(Qge);ZHo=r(Aft,"Examples:"),Aft.forEach(t),eUo=i(kl),m(kA.$$.fragment,kl),kl.forEach(t),oUo=i(xl),oo=n(xl,"DIV",{class:!0});var aa=s(oo);m(SA.$$.fragment,aa),rUo=i(aa),Wge=n(aa,"P",{});var yft=s(Wge);tUo=r(yft,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),yft.forEach(t),aUo=i(aa),fn=n(aa,"P",{});var YE=s(fn);nUo=r(YE,"The model class to instantiate is selected based on the "),Hge=n(YE,"CODE",{});var Lft=s(Hge);sUo=r(Lft,"model_type"),Lft.forEach(t),lUo=r(YE,` property of the config object (either
passed as an argument or loaded from `),Uge=n(YE,"CODE",{});var xft=s(Uge);iUo=r(xft,"pretrained_model_name_or_path"),xft.forEach(t),dUo=r(YE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jge=n(YE,"CODE",{});var kft=s(Jge);cUo=r(kft,"pretrained_model_name_or_path"),kft.forEach(t),fUo=r(YE,":"),YE.forEach(t),mUo=i(aa),Zd=n(aa,"UL",{});var UU=s(Zd);mF=n(UU,"LI",{});var XLe=s(mF);Yge=n(XLe,"STRONG",{});var Sft=s(Yge);gUo=r(Sft,"deit"),Sft.forEach(t),hUo=r(XLe," \u2014 "),zG=n(XLe,"A",{href:!0});var Rft=s(zG);pUo=r(Rft,"DeiTForMaskedImageModeling"),Rft.forEach(t),_Uo=r(XLe," (DeiT model)"),XLe.forEach(t),uUo=i(UU),gF=n(UU,"LI",{});var zLe=s(gF);Kge=n(zLe,"STRONG",{});var Bft=s(Kge);bUo=r(Bft,"swin"),Bft.forEach(t),FUo=r(zLe," \u2014 "),QG=n(zLe,"A",{href:!0});var Pft=s(QG);vUo=r(Pft,"SwinForMaskedImageModeling"),Pft.forEach(t),TUo=r(zLe," (Swin model)"),zLe.forEach(t),MUo=i(UU),hF=n(UU,"LI",{});var QLe=s(hF);Zge=n(QLe,"STRONG",{});var $ft=s(Zge);EUo=r($ft,"vit"),$ft.forEach(t),CUo=r(QLe," \u2014 "),WG=n(QLe,"A",{href:!0});var Ift=s(WG);wUo=r(Ift,"ViTForMaskedImageModeling"),Ift.forEach(t),AUo=r(QLe," (ViT model)"),QLe.forEach(t),UU.forEach(t),yUo=i(aa),pF=n(aa,"P",{});var WLe=s(pF);LUo=r(WLe,"The model is set in evaluation mode by default using "),ehe=n(WLe,"CODE",{});var qft=s(ehe);xUo=r(qft,"model.eval()"),qft.forEach(t),kUo=r(WLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ohe=n(WLe,"CODE",{});var Nft=s(ohe);SUo=r(Nft,"model.train()"),Nft.forEach(t),WLe.forEach(t),RUo=i(aa),rhe=n(aa,"P",{});var jft=s(rhe);BUo=r(jft,"Examples:"),jft.forEach(t),PUo=i(aa),m(RA.$$.fragment,aa),aa.forEach(t),xl.forEach(t),LBe=i(c),ec=n(c,"H2",{class:!0});var N$e=s(ec);_F=n(N$e,"A",{id:!0,class:!0,href:!0});var Dft=s(_F);the=n(Dft,"SPAN",{});var Gft=s(the);m(BA.$$.fragment,Gft),Gft.forEach(t),Dft.forEach(t),$Uo=i(N$e),ahe=n(N$e,"SPAN",{});var Oft=s(ahe);IUo=r(Oft,"AutoModelForObjectDetection"),Oft.forEach(t),N$e.forEach(t),xBe=i(c),pr=n(c,"DIV",{class:!0});var Sl=s(pr);m(PA.$$.fragment,Sl),qUo=i(Sl),oc=n(Sl,"P",{});var JU=s(oc);NUo=r(JU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),HG=n(JU,"A",{href:!0});var Vft=s(HG);jUo=r(Vft,"from_pretrained()"),Vft.forEach(t),DUo=r(JU," class method or the "),UG=n(JU,"A",{href:!0});var Xft=s(UG);GUo=r(Xft,"from_config()"),Xft.forEach(t),OUo=r(JU,` class
method.`),JU.forEach(t),VUo=i(Sl),$A=n(Sl,"P",{});var j$e=s($A);XUo=r(j$e,"This class cannot be instantiated directly using "),nhe=n(j$e,"CODE",{});var zft=s(nhe);zUo=r(zft,"__init__()"),zft.forEach(t),QUo=r(j$e," (throws an error)."),j$e.forEach(t),WUo=i(Sl),dt=n(Sl,"DIV",{class:!0});var Rl=s(dt);m(IA.$$.fragment,Rl),HUo=i(Rl),she=n(Rl,"P",{});var Qft=s(she);UUo=r(Qft,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),Qft.forEach(t),JUo=i(Rl),rc=n(Rl,"P",{});var YU=s(rc);YUo=r(YU,`Note:
Loading a model from its configuration file does `),lhe=n(YU,"STRONG",{});var Wft=s(lhe);KUo=r(Wft,"not"),Wft.forEach(t),ZUo=r(YU,` load the model weights. It only affects the
model\u2019s configuration. Use `),JG=n(YU,"A",{href:!0});var Hft=s(JG);eJo=r(Hft,"from_pretrained()"),Hft.forEach(t),oJo=r(YU," to load the model weights."),YU.forEach(t),rJo=i(Rl),ihe=n(Rl,"P",{});var Uft=s(ihe);tJo=r(Uft,"Examples:"),Uft.forEach(t),aJo=i(Rl),m(qA.$$.fragment,Rl),Rl.forEach(t),nJo=i(Sl),ro=n(Sl,"DIV",{class:!0});var na=s(ro);m(NA.$$.fragment,na),sJo=i(na),dhe=n(na,"P",{});var Jft=s(dhe);lJo=r(Jft,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),Jft.forEach(t),iJo=i(na),mn=n(na,"P",{});var KE=s(mn);dJo=r(KE,"The model class to instantiate is selected based on the "),che=n(KE,"CODE",{});var Yft=s(che);cJo=r(Yft,"model_type"),Yft.forEach(t),fJo=r(KE,` property of the config object (either
passed as an argument or loaded from `),fhe=n(KE,"CODE",{});var Kft=s(fhe);mJo=r(Kft,"pretrained_model_name_or_path"),Kft.forEach(t),gJo=r(KE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mhe=n(KE,"CODE",{});var Zft=s(mhe);hJo=r(Zft,"pretrained_model_name_or_path"),Zft.forEach(t),pJo=r(KE,":"),KE.forEach(t),_Jo=i(na),ghe=n(na,"UL",{});var emt=s(ghe);uF=n(emt,"LI",{});var HLe=s(uF);hhe=n(HLe,"STRONG",{});var omt=s(hhe);uJo=r(omt,"detr"),omt.forEach(t),bJo=r(HLe," \u2014 "),YG=n(HLe,"A",{href:!0});var rmt=s(YG);FJo=r(rmt,"DetrForObjectDetection"),rmt.forEach(t),vJo=r(HLe," (DETR model)"),HLe.forEach(t),emt.forEach(t),TJo=i(na),bF=n(na,"P",{});var ULe=s(bF);MJo=r(ULe,"The model is set in evaluation mode by default using "),phe=n(ULe,"CODE",{});var tmt=s(phe);EJo=r(tmt,"model.eval()"),tmt.forEach(t),CJo=r(ULe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_he=n(ULe,"CODE",{});var amt=s(_he);wJo=r(amt,"model.train()"),amt.forEach(t),ULe.forEach(t),AJo=i(na),uhe=n(na,"P",{});var nmt=s(uhe);yJo=r(nmt,"Examples:"),nmt.forEach(t),LJo=i(na),m(jA.$$.fragment,na),na.forEach(t),Sl.forEach(t),kBe=i(c),tc=n(c,"H2",{class:!0});var D$e=s(tc);FF=n(D$e,"A",{id:!0,class:!0,href:!0});var smt=s(FF);bhe=n(smt,"SPAN",{});var lmt=s(bhe);m(DA.$$.fragment,lmt),lmt.forEach(t),smt.forEach(t),xJo=i(D$e),Fhe=n(D$e,"SPAN",{});var imt=s(Fhe);kJo=r(imt,"AutoModelForImageSegmentation"),imt.forEach(t),D$e.forEach(t),SBe=i(c),_r=n(c,"DIV",{class:!0});var Bl=s(_r);m(GA.$$.fragment,Bl),SJo=i(Bl),ac=n(Bl,"P",{});var KU=s(ac);RJo=r(KU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),KG=n(KU,"A",{href:!0});var dmt=s(KG);BJo=r(dmt,"from_pretrained()"),dmt.forEach(t),PJo=r(KU," class method or the "),ZG=n(KU,"A",{href:!0});var cmt=s(ZG);$Jo=r(cmt,"from_config()"),cmt.forEach(t),IJo=r(KU,` class
method.`),KU.forEach(t),qJo=i(Bl),OA=n(Bl,"P",{});var G$e=s(OA);NJo=r(G$e,"This class cannot be instantiated directly using "),vhe=n(G$e,"CODE",{});var fmt=s(vhe);jJo=r(fmt,"__init__()"),fmt.forEach(t),DJo=r(G$e," (throws an error)."),G$e.forEach(t),GJo=i(Bl),ct=n(Bl,"DIV",{class:!0});var Pl=s(ct);m(VA.$$.fragment,Pl),OJo=i(Pl),The=n(Pl,"P",{});var mmt=s(The);VJo=r(mmt,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),mmt.forEach(t),XJo=i(Pl),nc=n(Pl,"P",{});var ZU=s(nc);zJo=r(ZU,`Note:
Loading a model from its configuration file does `),Mhe=n(ZU,"STRONG",{});var gmt=s(Mhe);QJo=r(gmt,"not"),gmt.forEach(t),WJo=r(ZU,` load the model weights. It only affects the
model\u2019s configuration. Use `),eO=n(ZU,"A",{href:!0});var hmt=s(eO);HJo=r(hmt,"from_pretrained()"),hmt.forEach(t),UJo=r(ZU," to load the model weights."),ZU.forEach(t),JJo=i(Pl),Ehe=n(Pl,"P",{});var pmt=s(Ehe);YJo=r(pmt,"Examples:"),pmt.forEach(t),KJo=i(Pl),m(XA.$$.fragment,Pl),Pl.forEach(t),ZJo=i(Bl),to=n(Bl,"DIV",{class:!0});var sa=s(to);m(zA.$$.fragment,sa),eYo=i(sa),Che=n(sa,"P",{});var _mt=s(Che);oYo=r(_mt,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),_mt.forEach(t),rYo=i(sa),gn=n(sa,"P",{});var ZE=s(gn);tYo=r(ZE,"The model class to instantiate is selected based on the "),whe=n(ZE,"CODE",{});var umt=s(whe);aYo=r(umt,"model_type"),umt.forEach(t),nYo=r(ZE,` property of the config object (either
passed as an argument or loaded from `),Ahe=n(ZE,"CODE",{});var bmt=s(Ahe);sYo=r(bmt,"pretrained_model_name_or_path"),bmt.forEach(t),lYo=r(ZE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yhe=n(ZE,"CODE",{});var Fmt=s(yhe);iYo=r(Fmt,"pretrained_model_name_or_path"),Fmt.forEach(t),dYo=r(ZE,":"),ZE.forEach(t),cYo=i(sa),Lhe=n(sa,"UL",{});var vmt=s(Lhe);vF=n(vmt,"LI",{});var JLe=s(vF);xhe=n(JLe,"STRONG",{});var Tmt=s(xhe);fYo=r(Tmt,"detr"),Tmt.forEach(t),mYo=r(JLe," \u2014 "),oO=n(JLe,"A",{href:!0});var Mmt=s(oO);gYo=r(Mmt,"DetrForSegmentation"),Mmt.forEach(t),hYo=r(JLe," (DETR model)"),JLe.forEach(t),vmt.forEach(t),pYo=i(sa),TF=n(sa,"P",{});var YLe=s(TF);_Yo=r(YLe,"The model is set in evaluation mode by default using "),khe=n(YLe,"CODE",{});var Emt=s(khe);uYo=r(Emt,"model.eval()"),Emt.forEach(t),bYo=r(YLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),She=n(YLe,"CODE",{});var Cmt=s(She);FYo=r(Cmt,"model.train()"),Cmt.forEach(t),YLe.forEach(t),vYo=i(sa),Rhe=n(sa,"P",{});var wmt=s(Rhe);TYo=r(wmt,"Examples:"),wmt.forEach(t),MYo=i(sa),m(QA.$$.fragment,sa),sa.forEach(t),Bl.forEach(t),RBe=i(c),sc=n(c,"H2",{class:!0});var O$e=s(sc);MF=n(O$e,"A",{id:!0,class:!0,href:!0});var Amt=s(MF);Bhe=n(Amt,"SPAN",{});var ymt=s(Bhe);m(WA.$$.fragment,ymt),ymt.forEach(t),Amt.forEach(t),EYo=i(O$e),Phe=n(O$e,"SPAN",{});var Lmt=s(Phe);CYo=r(Lmt,"AutoModelForSemanticSegmentation"),Lmt.forEach(t),O$e.forEach(t),BBe=i(c),ur=n(c,"DIV",{class:!0});var $l=s(ur);m(HA.$$.fragment,$l),wYo=i($l),lc=n($l,"P",{});var eJ=s(lc);AYo=r(eJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),rO=n(eJ,"A",{href:!0});var xmt=s(rO);yYo=r(xmt,"from_pretrained()"),xmt.forEach(t),LYo=r(eJ," class method or the "),tO=n(eJ,"A",{href:!0});var kmt=s(tO);xYo=r(kmt,"from_config()"),kmt.forEach(t),kYo=r(eJ,` class
method.`),eJ.forEach(t),SYo=i($l),UA=n($l,"P",{});var V$e=s(UA);RYo=r(V$e,"This class cannot be instantiated directly using "),$he=n(V$e,"CODE",{});var Smt=s($he);BYo=r(Smt,"__init__()"),Smt.forEach(t),PYo=r(V$e," (throws an error)."),V$e.forEach(t),$Yo=i($l),ft=n($l,"DIV",{class:!0});var Il=s(ft);m(JA.$$.fragment,Il),IYo=i(Il),Ihe=n(Il,"P",{});var Rmt=s(Ihe);qYo=r(Rmt,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),Rmt.forEach(t),NYo=i(Il),ic=n(Il,"P",{});var oJ=s(ic);jYo=r(oJ,`Note:
Loading a model from its configuration file does `),qhe=n(oJ,"STRONG",{});var Bmt=s(qhe);DYo=r(Bmt,"not"),Bmt.forEach(t),GYo=r(oJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),aO=n(oJ,"A",{href:!0});var Pmt=s(aO);OYo=r(Pmt,"from_pretrained()"),Pmt.forEach(t),VYo=r(oJ," to load the model weights."),oJ.forEach(t),XYo=i(Il),Nhe=n(Il,"P",{});var $mt=s(Nhe);zYo=r($mt,"Examples:"),$mt.forEach(t),QYo=i(Il),m(YA.$$.fragment,Il),Il.forEach(t),WYo=i($l),ao=n($l,"DIV",{class:!0});var la=s(ao);m(KA.$$.fragment,la),HYo=i(la),jhe=n(la,"P",{});var Imt=s(jhe);UYo=r(Imt,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),Imt.forEach(t),JYo=i(la),hn=n(la,"P",{});var eC=s(hn);YYo=r(eC,"The model class to instantiate is selected based on the "),Dhe=n(eC,"CODE",{});var qmt=s(Dhe);KYo=r(qmt,"model_type"),qmt.forEach(t),ZYo=r(eC,` property of the config object (either
passed as an argument or loaded from `),Ghe=n(eC,"CODE",{});var Nmt=s(Ghe);eKo=r(Nmt,"pretrained_model_name_or_path"),Nmt.forEach(t),oKo=r(eC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ohe=n(eC,"CODE",{});var jmt=s(Ohe);rKo=r(jmt,"pretrained_model_name_or_path"),jmt.forEach(t),tKo=r(eC,":"),eC.forEach(t),aKo=i(la),dc=n(la,"UL",{});var rJ=s(dc);EF=n(rJ,"LI",{});var KLe=s(EF);Vhe=n(KLe,"STRONG",{});var Dmt=s(Vhe);nKo=r(Dmt,"beit"),Dmt.forEach(t),sKo=r(KLe," \u2014 "),nO=n(KLe,"A",{href:!0});var Gmt=s(nO);lKo=r(Gmt,"BeitForSemanticSegmentation"),Gmt.forEach(t),iKo=r(KLe," (BEiT model)"),KLe.forEach(t),dKo=i(rJ),CF=n(rJ,"LI",{});var ZLe=s(CF);Xhe=n(ZLe,"STRONG",{});var Omt=s(Xhe);cKo=r(Omt,"dpt"),Omt.forEach(t),fKo=r(ZLe," \u2014 "),sO=n(ZLe,"A",{href:!0});var Vmt=s(sO);mKo=r(Vmt,"DPTForSemanticSegmentation"),Vmt.forEach(t),gKo=r(ZLe," (DPT model)"),ZLe.forEach(t),hKo=i(rJ),wF=n(rJ,"LI",{});var e8e=s(wF);zhe=n(e8e,"STRONG",{});var Xmt=s(zhe);pKo=r(Xmt,"segformer"),Xmt.forEach(t),_Ko=r(e8e," \u2014 "),lO=n(e8e,"A",{href:!0});var zmt=s(lO);uKo=r(zmt,"SegformerForSemanticSegmentation"),zmt.forEach(t),bKo=r(e8e," (SegFormer model)"),e8e.forEach(t),rJ.forEach(t),FKo=i(la),AF=n(la,"P",{});var o8e=s(AF);vKo=r(o8e,"The model is set in evaluation mode by default using "),Qhe=n(o8e,"CODE",{});var Qmt=s(Qhe);TKo=r(Qmt,"model.eval()"),Qmt.forEach(t),MKo=r(o8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Whe=n(o8e,"CODE",{});var Wmt=s(Whe);EKo=r(Wmt,"model.train()"),Wmt.forEach(t),o8e.forEach(t),CKo=i(la),Hhe=n(la,"P",{});var Hmt=s(Hhe);wKo=r(Hmt,"Examples:"),Hmt.forEach(t),AKo=i(la),m(ZA.$$.fragment,la),la.forEach(t),$l.forEach(t),PBe=i(c),cc=n(c,"H2",{class:!0});var X$e=s(cc);yF=n(X$e,"A",{id:!0,class:!0,href:!0});var Umt=s(yF);Uhe=n(Umt,"SPAN",{});var Jmt=s(Uhe);m(e0.$$.fragment,Jmt),Jmt.forEach(t),Umt.forEach(t),yKo=i(X$e),Jhe=n(X$e,"SPAN",{});var Ymt=s(Jhe);LKo=r(Ymt,"AutoModelForInstanceSegmentation"),Ymt.forEach(t),X$e.forEach(t),$Be=i(c),br=n(c,"DIV",{class:!0});var ql=s(br);m(o0.$$.fragment,ql),xKo=i(ql),fc=n(ql,"P",{});var tJ=s(fc);kKo=r(tJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),iO=n(tJ,"A",{href:!0});var Kmt=s(iO);SKo=r(Kmt,"from_pretrained()"),Kmt.forEach(t),RKo=r(tJ," class method or the "),dO=n(tJ,"A",{href:!0});var Zmt=s(dO);BKo=r(Zmt,"from_config()"),Zmt.forEach(t),PKo=r(tJ,` class
method.`),tJ.forEach(t),$Ko=i(ql),r0=n(ql,"P",{});var z$e=s(r0);IKo=r(z$e,"This class cannot be instantiated directly using "),Yhe=n(z$e,"CODE",{});var egt=s(Yhe);qKo=r(egt,"__init__()"),egt.forEach(t),NKo=r(z$e," (throws an error)."),z$e.forEach(t),jKo=i(ql),mt=n(ql,"DIV",{class:!0});var Nl=s(mt);m(t0.$$.fragment,Nl),DKo=i(Nl),Khe=n(Nl,"P",{});var ogt=s(Khe);GKo=r(ogt,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),ogt.forEach(t),OKo=i(Nl),mc=n(Nl,"P",{});var aJ=s(mc);VKo=r(aJ,`Note:
Loading a model from its configuration file does `),Zhe=n(aJ,"STRONG",{});var rgt=s(Zhe);XKo=r(rgt,"not"),rgt.forEach(t),zKo=r(aJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),cO=n(aJ,"A",{href:!0});var tgt=s(cO);QKo=r(tgt,"from_pretrained()"),tgt.forEach(t),WKo=r(aJ," to load the model weights."),aJ.forEach(t),HKo=i(Nl),epe=n(Nl,"P",{});var agt=s(epe);UKo=r(agt,"Examples:"),agt.forEach(t),JKo=i(Nl),m(a0.$$.fragment,Nl),Nl.forEach(t),YKo=i(ql),no=n(ql,"DIV",{class:!0});var ia=s(no);m(n0.$$.fragment,ia),KKo=i(ia),ope=n(ia,"P",{});var ngt=s(ope);ZKo=r(ngt,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),ngt.forEach(t),eZo=i(ia),pn=n(ia,"P",{});var oC=s(pn);oZo=r(oC,"The model class to instantiate is selected based on the "),rpe=n(oC,"CODE",{});var sgt=s(rpe);rZo=r(sgt,"model_type"),sgt.forEach(t),tZo=r(oC,` property of the config object (either
passed as an argument or loaded from `),tpe=n(oC,"CODE",{});var lgt=s(tpe);aZo=r(lgt,"pretrained_model_name_or_path"),lgt.forEach(t),nZo=r(oC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ape=n(oC,"CODE",{});var igt=s(ape);sZo=r(igt,"pretrained_model_name_or_path"),igt.forEach(t),lZo=r(oC,":"),oC.forEach(t),iZo=i(ia),npe=n(ia,"UL",{});var dgt=s(npe);LF=n(dgt,"LI",{});var r8e=s(LF);spe=n(r8e,"STRONG",{});var cgt=s(spe);dZo=r(cgt,"maskformer"),cgt.forEach(t),cZo=r(r8e," \u2014 "),fO=n(r8e,"A",{href:!0});var fgt=s(fO);fZo=r(fgt,"MaskFormerForInstanceSegmentation"),fgt.forEach(t),mZo=r(r8e," (MaskFormer model)"),r8e.forEach(t),dgt.forEach(t),gZo=i(ia),xF=n(ia,"P",{});var t8e=s(xF);hZo=r(t8e,"The model is set in evaluation mode by default using "),lpe=n(t8e,"CODE",{});var mgt=s(lpe);pZo=r(mgt,"model.eval()"),mgt.forEach(t),_Zo=r(t8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ipe=n(t8e,"CODE",{});var ggt=s(ipe);uZo=r(ggt,"model.train()"),ggt.forEach(t),t8e.forEach(t),bZo=i(ia),dpe=n(ia,"P",{});var hgt=s(dpe);FZo=r(hgt,"Examples:"),hgt.forEach(t),vZo=i(ia),m(s0.$$.fragment,ia),ia.forEach(t),ql.forEach(t),IBe=i(c),gc=n(c,"H2",{class:!0});var Q$e=s(gc);kF=n(Q$e,"A",{id:!0,class:!0,href:!0});var pgt=s(kF);cpe=n(pgt,"SPAN",{});var _gt=s(cpe);m(l0.$$.fragment,_gt),_gt.forEach(t),pgt.forEach(t),TZo=i(Q$e),fpe=n(Q$e,"SPAN",{});var ugt=s(fpe);MZo=r(ugt,"TFAutoModel"),ugt.forEach(t),Q$e.forEach(t),qBe=i(c),Fr=n(c,"DIV",{class:!0});var jl=s(Fr);m(i0.$$.fragment,jl),EZo=i(jl),hc=n(jl,"P",{});var nJ=s(hc);CZo=r(nJ,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),mO=n(nJ,"A",{href:!0});var bgt=s(mO);wZo=r(bgt,"from_pretrained()"),bgt.forEach(t),AZo=r(nJ," class method or the "),gO=n(nJ,"A",{href:!0});var Fgt=s(gO);yZo=r(Fgt,"from_config()"),Fgt.forEach(t),LZo=r(nJ,` class
method.`),nJ.forEach(t),xZo=i(jl),d0=n(jl,"P",{});var W$e=s(d0);kZo=r(W$e,"This class cannot be instantiated directly using "),mpe=n(W$e,"CODE",{});var vgt=s(mpe);SZo=r(vgt,"__init__()"),vgt.forEach(t),RZo=r(W$e," (throws an error)."),W$e.forEach(t),BZo=i(jl),gt=n(jl,"DIV",{class:!0});var Dl=s(gt);m(c0.$$.fragment,Dl),PZo=i(Dl),gpe=n(Dl,"P",{});var Tgt=s(gpe);$Zo=r(Tgt,"Instantiates one of the base model classes of the library from a configuration."),Tgt.forEach(t),IZo=i(Dl),pc=n(Dl,"P",{});var sJ=s(pc);qZo=r(sJ,`Note:
Loading a model from its configuration file does `),hpe=n(sJ,"STRONG",{});var Mgt=s(hpe);NZo=r(Mgt,"not"),Mgt.forEach(t),jZo=r(sJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),hO=n(sJ,"A",{href:!0});var Egt=s(hO);DZo=r(Egt,"from_pretrained()"),Egt.forEach(t),GZo=r(sJ," to load the model weights."),sJ.forEach(t),OZo=i(Dl),ppe=n(Dl,"P",{});var Cgt=s(ppe);VZo=r(Cgt,"Examples:"),Cgt.forEach(t),XZo=i(Dl),m(f0.$$.fragment,Dl),Dl.forEach(t),zZo=i(jl),ho=n(jl,"DIV",{class:!0});var pa=s(ho);m(m0.$$.fragment,pa),QZo=i(pa),_pe=n(pa,"P",{});var wgt=s(_pe);WZo=r(wgt,"Instantiate one of the base model classes of the library from a pretrained model."),wgt.forEach(t),HZo=i(pa),_n=n(pa,"P",{});var rC=s(_n);UZo=r(rC,"The model class to instantiate is selected based on the "),upe=n(rC,"CODE",{});var Agt=s(upe);JZo=r(Agt,"model_type"),Agt.forEach(t),YZo=r(rC,` property of the config object (either
passed as an argument or loaded from `),bpe=n(rC,"CODE",{});var ygt=s(bpe);KZo=r(ygt,"pretrained_model_name_or_path"),ygt.forEach(t),ZZo=r(rC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fpe=n(rC,"CODE",{});var Lgt=s(Fpe);eer=r(Lgt,"pretrained_model_name_or_path"),Lgt.forEach(t),oer=r(rC,":"),rC.forEach(t),rer=i(pa),x=n(pa,"UL",{});var k=s(x);SF=n(k,"LI",{});var a8e=s(SF);vpe=n(a8e,"STRONG",{});var xgt=s(vpe);ter=r(xgt,"albert"),xgt.forEach(t),aer=r(a8e," \u2014 "),pO=n(a8e,"A",{href:!0});var kgt=s(pO);ner=r(kgt,"TFAlbertModel"),kgt.forEach(t),ser=r(a8e," (ALBERT model)"),a8e.forEach(t),ler=i(k),RF=n(k,"LI",{});var n8e=s(RF);Tpe=n(n8e,"STRONG",{});var Sgt=s(Tpe);ier=r(Sgt,"bart"),Sgt.forEach(t),der=r(n8e," \u2014 "),_O=n(n8e,"A",{href:!0});var Rgt=s(_O);cer=r(Rgt,"TFBartModel"),Rgt.forEach(t),fer=r(n8e," (BART model)"),n8e.forEach(t),mer=i(k),BF=n(k,"LI",{});var s8e=s(BF);Mpe=n(s8e,"STRONG",{});var Bgt=s(Mpe);ger=r(Bgt,"bert"),Bgt.forEach(t),her=r(s8e," \u2014 "),uO=n(s8e,"A",{href:!0});var Pgt=s(uO);per=r(Pgt,"TFBertModel"),Pgt.forEach(t),_er=r(s8e," (BERT model)"),s8e.forEach(t),uer=i(k),PF=n(k,"LI",{});var l8e=s(PF);Epe=n(l8e,"STRONG",{});var $gt=s(Epe);ber=r($gt,"blenderbot"),$gt.forEach(t),Fer=r(l8e," \u2014 "),bO=n(l8e,"A",{href:!0});var Igt=s(bO);ver=r(Igt,"TFBlenderbotModel"),Igt.forEach(t),Ter=r(l8e," (Blenderbot model)"),l8e.forEach(t),Mer=i(k),$F=n(k,"LI",{});var i8e=s($F);Cpe=n(i8e,"STRONG",{});var qgt=s(Cpe);Eer=r(qgt,"blenderbot-small"),qgt.forEach(t),Cer=r(i8e," \u2014 "),FO=n(i8e,"A",{href:!0});var Ngt=s(FO);wer=r(Ngt,"TFBlenderbotSmallModel"),Ngt.forEach(t),Aer=r(i8e," (BlenderbotSmall model)"),i8e.forEach(t),yer=i(k),IF=n(k,"LI",{});var d8e=s(IF);wpe=n(d8e,"STRONG",{});var jgt=s(wpe);Ler=r(jgt,"camembert"),jgt.forEach(t),xer=r(d8e," \u2014 "),vO=n(d8e,"A",{href:!0});var Dgt=s(vO);ker=r(Dgt,"TFCamembertModel"),Dgt.forEach(t),Ser=r(d8e," (CamemBERT model)"),d8e.forEach(t),Rer=i(k),qF=n(k,"LI",{});var c8e=s(qF);Ape=n(c8e,"STRONG",{});var Ggt=s(Ape);Ber=r(Ggt,"clip"),Ggt.forEach(t),Per=r(c8e," \u2014 "),TO=n(c8e,"A",{href:!0});var Ogt=s(TO);$er=r(Ogt,"TFCLIPModel"),Ogt.forEach(t),Ier=r(c8e," (CLIP model)"),c8e.forEach(t),qer=i(k),NF=n(k,"LI",{});var f8e=s(NF);ype=n(f8e,"STRONG",{});var Vgt=s(ype);Ner=r(Vgt,"convbert"),Vgt.forEach(t),jer=r(f8e," \u2014 "),MO=n(f8e,"A",{href:!0});var Xgt=s(MO);Der=r(Xgt,"TFConvBertModel"),Xgt.forEach(t),Ger=r(f8e," (ConvBERT model)"),f8e.forEach(t),Oer=i(k),jF=n(k,"LI",{});var m8e=s(jF);Lpe=n(m8e,"STRONG",{});var zgt=s(Lpe);Ver=r(zgt,"convnext"),zgt.forEach(t),Xer=r(m8e," \u2014 "),EO=n(m8e,"A",{href:!0});var Qgt=s(EO);zer=r(Qgt,"TFConvNextModel"),Qgt.forEach(t),Qer=r(m8e," (ConvNext model)"),m8e.forEach(t),Wer=i(k),DF=n(k,"LI",{});var g8e=s(DF);xpe=n(g8e,"STRONG",{});var Wgt=s(xpe);Her=r(Wgt,"ctrl"),Wgt.forEach(t),Uer=r(g8e," \u2014 "),CO=n(g8e,"A",{href:!0});var Hgt=s(CO);Jer=r(Hgt,"TFCTRLModel"),Hgt.forEach(t),Yer=r(g8e," (CTRL model)"),g8e.forEach(t),Ker=i(k),GF=n(k,"LI",{});var h8e=s(GF);kpe=n(h8e,"STRONG",{});var Ugt=s(kpe);Zer=r(Ugt,"deberta"),Ugt.forEach(t),eor=r(h8e," \u2014 "),wO=n(h8e,"A",{href:!0});var Jgt=s(wO);oor=r(Jgt,"TFDebertaModel"),Jgt.forEach(t),ror=r(h8e," (DeBERTa model)"),h8e.forEach(t),tor=i(k),OF=n(k,"LI",{});var p8e=s(OF);Spe=n(p8e,"STRONG",{});var Ygt=s(Spe);aor=r(Ygt,"deberta-v2"),Ygt.forEach(t),nor=r(p8e," \u2014 "),AO=n(p8e,"A",{href:!0});var Kgt=s(AO);sor=r(Kgt,"TFDebertaV2Model"),Kgt.forEach(t),lor=r(p8e," (DeBERTa-v2 model)"),p8e.forEach(t),ior=i(k),VF=n(k,"LI",{});var _8e=s(VF);Rpe=n(_8e,"STRONG",{});var Zgt=s(Rpe);dor=r(Zgt,"distilbert"),Zgt.forEach(t),cor=r(_8e," \u2014 "),yO=n(_8e,"A",{href:!0});var eht=s(yO);mor=r(eht,"TFDistilBertModel"),eht.forEach(t),gor=r(_8e," (DistilBERT model)"),_8e.forEach(t),hor=i(k),XF=n(k,"LI",{});var u8e=s(XF);Bpe=n(u8e,"STRONG",{});var oht=s(Bpe);por=r(oht,"dpr"),oht.forEach(t),_or=r(u8e," \u2014 "),LO=n(u8e,"A",{href:!0});var rht=s(LO);uor=r(rht,"TFDPRQuestionEncoder"),rht.forEach(t),bor=r(u8e," (DPR model)"),u8e.forEach(t),For=i(k),zF=n(k,"LI",{});var b8e=s(zF);Ppe=n(b8e,"STRONG",{});var tht=s(Ppe);vor=r(tht,"electra"),tht.forEach(t),Tor=r(b8e," \u2014 "),xO=n(b8e,"A",{href:!0});var aht=s(xO);Mor=r(aht,"TFElectraModel"),aht.forEach(t),Eor=r(b8e," (ELECTRA model)"),b8e.forEach(t),Cor=i(k),QF=n(k,"LI",{});var F8e=s(QF);$pe=n(F8e,"STRONG",{});var nht=s($pe);wor=r(nht,"flaubert"),nht.forEach(t),Aor=r(F8e," \u2014 "),kO=n(F8e,"A",{href:!0});var sht=s(kO);yor=r(sht,"TFFlaubertModel"),sht.forEach(t),Lor=r(F8e," (FlauBERT model)"),F8e.forEach(t),xor=i(k),Gs=n(k,"LI",{});var b7=s(Gs);Ipe=n(b7,"STRONG",{});var lht=s(Ipe);kor=r(lht,"funnel"),lht.forEach(t),Sor=r(b7," \u2014 "),SO=n(b7,"A",{href:!0});var iht=s(SO);Ror=r(iht,"TFFunnelModel"),iht.forEach(t),Bor=r(b7," or "),RO=n(b7,"A",{href:!0});var dht=s(RO);Por=r(dht,"TFFunnelBaseModel"),dht.forEach(t),$or=r(b7," (Funnel Transformer model)"),b7.forEach(t),Ior=i(k),WF=n(k,"LI",{});var v8e=s(WF);qpe=n(v8e,"STRONG",{});var cht=s(qpe);qor=r(cht,"gpt2"),cht.forEach(t),Nor=r(v8e," \u2014 "),BO=n(v8e,"A",{href:!0});var fht=s(BO);jor=r(fht,"TFGPT2Model"),fht.forEach(t),Dor=r(v8e," (OpenAI GPT-2 model)"),v8e.forEach(t),Gor=i(k),HF=n(k,"LI",{});var T8e=s(HF);Npe=n(T8e,"STRONG",{});var mht=s(Npe);Oor=r(mht,"gptj"),mht.forEach(t),Vor=r(T8e," \u2014 "),PO=n(T8e,"A",{href:!0});var ght=s(PO);Xor=r(ght,"TFGPTJModel"),ght.forEach(t),zor=r(T8e," (GPT-J model)"),T8e.forEach(t),Qor=i(k),UF=n(k,"LI",{});var M8e=s(UF);jpe=n(M8e,"STRONG",{});var hht=s(jpe);Wor=r(hht,"hubert"),hht.forEach(t),Hor=r(M8e," \u2014 "),$O=n(M8e,"A",{href:!0});var pht=s($O);Uor=r(pht,"TFHubertModel"),pht.forEach(t),Jor=r(M8e," (Hubert model)"),M8e.forEach(t),Yor=i(k),JF=n(k,"LI",{});var E8e=s(JF);Dpe=n(E8e,"STRONG",{});var _ht=s(Dpe);Kor=r(_ht,"layoutlm"),_ht.forEach(t),Zor=r(E8e," \u2014 "),IO=n(E8e,"A",{href:!0});var uht=s(IO);err=r(uht,"TFLayoutLMModel"),uht.forEach(t),orr=r(E8e," (LayoutLM model)"),E8e.forEach(t),rrr=i(k),YF=n(k,"LI",{});var C8e=s(YF);Gpe=n(C8e,"STRONG",{});var bht=s(Gpe);trr=r(bht,"led"),bht.forEach(t),arr=r(C8e," \u2014 "),qO=n(C8e,"A",{href:!0});var Fht=s(qO);nrr=r(Fht,"TFLEDModel"),Fht.forEach(t),srr=r(C8e," (LED model)"),C8e.forEach(t),lrr=i(k),KF=n(k,"LI",{});var w8e=s(KF);Ope=n(w8e,"STRONG",{});var vht=s(Ope);irr=r(vht,"longformer"),vht.forEach(t),drr=r(w8e," \u2014 "),NO=n(w8e,"A",{href:!0});var Tht=s(NO);crr=r(Tht,"TFLongformerModel"),Tht.forEach(t),frr=r(w8e," (Longformer model)"),w8e.forEach(t),mrr=i(k),ZF=n(k,"LI",{});var A8e=s(ZF);Vpe=n(A8e,"STRONG",{});var Mht=s(Vpe);grr=r(Mht,"lxmert"),Mht.forEach(t),hrr=r(A8e," \u2014 "),jO=n(A8e,"A",{href:!0});var Eht=s(jO);prr=r(Eht,"TFLxmertModel"),Eht.forEach(t),_rr=r(A8e," (LXMERT model)"),A8e.forEach(t),urr=i(k),ev=n(k,"LI",{});var y8e=s(ev);Xpe=n(y8e,"STRONG",{});var Cht=s(Xpe);brr=r(Cht,"marian"),Cht.forEach(t),Frr=r(y8e," \u2014 "),DO=n(y8e,"A",{href:!0});var wht=s(DO);vrr=r(wht,"TFMarianModel"),wht.forEach(t),Trr=r(y8e," (Marian model)"),y8e.forEach(t),Mrr=i(k),ov=n(k,"LI",{});var L8e=s(ov);zpe=n(L8e,"STRONG",{});var Aht=s(zpe);Err=r(Aht,"mbart"),Aht.forEach(t),Crr=r(L8e," \u2014 "),GO=n(L8e,"A",{href:!0});var yht=s(GO);wrr=r(yht,"TFMBartModel"),yht.forEach(t),Arr=r(L8e," (mBART model)"),L8e.forEach(t),yrr=i(k),rv=n(k,"LI",{});var x8e=s(rv);Qpe=n(x8e,"STRONG",{});var Lht=s(Qpe);Lrr=r(Lht,"mobilebert"),Lht.forEach(t),xrr=r(x8e," \u2014 "),OO=n(x8e,"A",{href:!0});var xht=s(OO);krr=r(xht,"TFMobileBertModel"),xht.forEach(t),Srr=r(x8e," (MobileBERT model)"),x8e.forEach(t),Rrr=i(k),tv=n(k,"LI",{});var k8e=s(tv);Wpe=n(k8e,"STRONG",{});var kht=s(Wpe);Brr=r(kht,"mpnet"),kht.forEach(t),Prr=r(k8e," \u2014 "),VO=n(k8e,"A",{href:!0});var Sht=s(VO);$rr=r(Sht,"TFMPNetModel"),Sht.forEach(t),Irr=r(k8e," (MPNet model)"),k8e.forEach(t),qrr=i(k),av=n(k,"LI",{});var S8e=s(av);Hpe=n(S8e,"STRONG",{});var Rht=s(Hpe);Nrr=r(Rht,"mt5"),Rht.forEach(t),jrr=r(S8e," \u2014 "),XO=n(S8e,"A",{href:!0});var Bht=s(XO);Drr=r(Bht,"TFMT5Model"),Bht.forEach(t),Grr=r(S8e," (mT5 model)"),S8e.forEach(t),Orr=i(k),nv=n(k,"LI",{});var R8e=s(nv);Upe=n(R8e,"STRONG",{});var Pht=s(Upe);Vrr=r(Pht,"openai-gpt"),Pht.forEach(t),Xrr=r(R8e," \u2014 "),zO=n(R8e,"A",{href:!0});var $ht=s(zO);zrr=r($ht,"TFOpenAIGPTModel"),$ht.forEach(t),Qrr=r(R8e," (OpenAI GPT model)"),R8e.forEach(t),Wrr=i(k),sv=n(k,"LI",{});var B8e=s(sv);Jpe=n(B8e,"STRONG",{});var Iht=s(Jpe);Hrr=r(Iht,"pegasus"),Iht.forEach(t),Urr=r(B8e," \u2014 "),QO=n(B8e,"A",{href:!0});var qht=s(QO);Jrr=r(qht,"TFPegasusModel"),qht.forEach(t),Yrr=r(B8e," (Pegasus model)"),B8e.forEach(t),Krr=i(k),lv=n(k,"LI",{});var P8e=s(lv);Ype=n(P8e,"STRONG",{});var Nht=s(Ype);Zrr=r(Nht,"rembert"),Nht.forEach(t),etr=r(P8e," \u2014 "),WO=n(P8e,"A",{href:!0});var jht=s(WO);otr=r(jht,"TFRemBertModel"),jht.forEach(t),rtr=r(P8e," (RemBERT model)"),P8e.forEach(t),ttr=i(k),iv=n(k,"LI",{});var $8e=s(iv);Kpe=n($8e,"STRONG",{});var Dht=s(Kpe);atr=r(Dht,"roberta"),Dht.forEach(t),ntr=r($8e," \u2014 "),HO=n($8e,"A",{href:!0});var Ght=s(HO);str=r(Ght,"TFRobertaModel"),Ght.forEach(t),ltr=r($8e," (RoBERTa model)"),$8e.forEach(t),itr=i(k),dv=n(k,"LI",{});var I8e=s(dv);Zpe=n(I8e,"STRONG",{});var Oht=s(Zpe);dtr=r(Oht,"roformer"),Oht.forEach(t),ctr=r(I8e," \u2014 "),UO=n(I8e,"A",{href:!0});var Vht=s(UO);ftr=r(Vht,"TFRoFormerModel"),Vht.forEach(t),mtr=r(I8e," (RoFormer model)"),I8e.forEach(t),gtr=i(k),cv=n(k,"LI",{});var q8e=s(cv);e_e=n(q8e,"STRONG",{});var Xht=s(e_e);htr=r(Xht,"speech_to_text"),Xht.forEach(t),ptr=r(q8e," \u2014 "),JO=n(q8e,"A",{href:!0});var zht=s(JO);_tr=r(zht,"TFSpeech2TextModel"),zht.forEach(t),utr=r(q8e," (Speech2Text model)"),q8e.forEach(t),btr=i(k),fv=n(k,"LI",{});var N8e=s(fv);o_e=n(N8e,"STRONG",{});var Qht=s(o_e);Ftr=r(Qht,"t5"),Qht.forEach(t),vtr=r(N8e," \u2014 "),YO=n(N8e,"A",{href:!0});var Wht=s(YO);Ttr=r(Wht,"TFT5Model"),Wht.forEach(t),Mtr=r(N8e," (T5 model)"),N8e.forEach(t),Etr=i(k),mv=n(k,"LI",{});var j8e=s(mv);r_e=n(j8e,"STRONG",{});var Hht=s(r_e);Ctr=r(Hht,"tapas"),Hht.forEach(t),wtr=r(j8e," \u2014 "),KO=n(j8e,"A",{href:!0});var Uht=s(KO);Atr=r(Uht,"TFTapasModel"),Uht.forEach(t),ytr=r(j8e," (TAPAS model)"),j8e.forEach(t),Ltr=i(k),gv=n(k,"LI",{});var D8e=s(gv);t_e=n(D8e,"STRONG",{});var Jht=s(t_e);xtr=r(Jht,"transfo-xl"),Jht.forEach(t),ktr=r(D8e," \u2014 "),ZO=n(D8e,"A",{href:!0});var Yht=s(ZO);Str=r(Yht,"TFTransfoXLModel"),Yht.forEach(t),Rtr=r(D8e," (Transformer-XL model)"),D8e.forEach(t),Btr=i(k),hv=n(k,"LI",{});var G8e=s(hv);a_e=n(G8e,"STRONG",{});var Kht=s(a_e);Ptr=r(Kht,"vit"),Kht.forEach(t),$tr=r(G8e," \u2014 "),eV=n(G8e,"A",{href:!0});var Zht=s(eV);Itr=r(Zht,"TFViTModel"),Zht.forEach(t),qtr=r(G8e," (ViT model)"),G8e.forEach(t),Ntr=i(k),pv=n(k,"LI",{});var O8e=s(pv);n_e=n(O8e,"STRONG",{});var ept=s(n_e);jtr=r(ept,"vit_mae"),ept.forEach(t),Dtr=r(O8e," \u2014 "),oV=n(O8e,"A",{href:!0});var opt=s(oV);Gtr=r(opt,"TFViTMAEModel"),opt.forEach(t),Otr=r(O8e," (ViTMAE model)"),O8e.forEach(t),Vtr=i(k),_v=n(k,"LI",{});var V8e=s(_v);s_e=n(V8e,"STRONG",{});var rpt=s(s_e);Xtr=r(rpt,"wav2vec2"),rpt.forEach(t),ztr=r(V8e," \u2014 "),rV=n(V8e,"A",{href:!0});var tpt=s(rV);Qtr=r(tpt,"TFWav2Vec2Model"),tpt.forEach(t),Wtr=r(V8e," (Wav2Vec2 model)"),V8e.forEach(t),Htr=i(k),uv=n(k,"LI",{});var X8e=s(uv);l_e=n(X8e,"STRONG",{});var apt=s(l_e);Utr=r(apt,"xlm"),apt.forEach(t),Jtr=r(X8e," \u2014 "),tV=n(X8e,"A",{href:!0});var npt=s(tV);Ytr=r(npt,"TFXLMModel"),npt.forEach(t),Ktr=r(X8e," (XLM model)"),X8e.forEach(t),Ztr=i(k),bv=n(k,"LI",{});var z8e=s(bv);i_e=n(z8e,"STRONG",{});var spt=s(i_e);ear=r(spt,"xlm-roberta"),spt.forEach(t),oar=r(z8e," \u2014 "),aV=n(z8e,"A",{href:!0});var lpt=s(aV);rar=r(lpt,"TFXLMRobertaModel"),lpt.forEach(t),tar=r(z8e," (XLM-RoBERTa model)"),z8e.forEach(t),aar=i(k),Fv=n(k,"LI",{});var Q8e=s(Fv);d_e=n(Q8e,"STRONG",{});var ipt=s(d_e);nar=r(ipt,"xlnet"),ipt.forEach(t),sar=r(Q8e," \u2014 "),nV=n(Q8e,"A",{href:!0});var dpt=s(nV);lar=r(dpt,"TFXLNetModel"),dpt.forEach(t),iar=r(Q8e," (XLNet model)"),Q8e.forEach(t),k.forEach(t),dar=i(pa),c_e=n(pa,"P",{});var cpt=s(c_e);car=r(cpt,"Examples:"),cpt.forEach(t),far=i(pa),m(g0.$$.fragment,pa),pa.forEach(t),jl.forEach(t),NBe=i(c),_c=n(c,"H2",{class:!0});var H$e=s(_c);vv=n(H$e,"A",{id:!0,class:!0,href:!0});var fpt=s(vv);f_e=n(fpt,"SPAN",{});var mpt=s(f_e);m(h0.$$.fragment,mpt),mpt.forEach(t),fpt.forEach(t),mar=i(H$e),m_e=n(H$e,"SPAN",{});var gpt=s(m_e);gar=r(gpt,"TFAutoModelForPreTraining"),gpt.forEach(t),H$e.forEach(t),jBe=i(c),vr=n(c,"DIV",{class:!0});var Gl=s(vr);m(p0.$$.fragment,Gl),har=i(Gl),uc=n(Gl,"P",{});var lJ=s(uc);par=r(lJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),sV=n(lJ,"A",{href:!0});var hpt=s(sV);_ar=r(hpt,"from_pretrained()"),hpt.forEach(t),uar=r(lJ," class method or the "),lV=n(lJ,"A",{href:!0});var ppt=s(lV);bar=r(ppt,"from_config()"),ppt.forEach(t),Far=r(lJ,` class
method.`),lJ.forEach(t),Tar=i(Gl),_0=n(Gl,"P",{});var U$e=s(_0);Mar=r(U$e,"This class cannot be instantiated directly using "),g_e=n(U$e,"CODE",{});var _pt=s(g_e);Ear=r(_pt,"__init__()"),_pt.forEach(t),Car=r(U$e," (throws an error)."),U$e.forEach(t),war=i(Gl),ht=n(Gl,"DIV",{class:!0});var Ol=s(ht);m(u0.$$.fragment,Ol),Aar=i(Ol),h_e=n(Ol,"P",{});var upt=s(h_e);yar=r(upt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),upt.forEach(t),Lar=i(Ol),bc=n(Ol,"P",{});var iJ=s(bc);xar=r(iJ,`Note:
Loading a model from its configuration file does `),p_e=n(iJ,"STRONG",{});var bpt=s(p_e);kar=r(bpt,"not"),bpt.forEach(t),Sar=r(iJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),iV=n(iJ,"A",{href:!0});var Fpt=s(iV);Rar=r(Fpt,"from_pretrained()"),Fpt.forEach(t),Bar=r(iJ," to load the model weights."),iJ.forEach(t),Par=i(Ol),__e=n(Ol,"P",{});var vpt=s(__e);$ar=r(vpt,"Examples:"),vpt.forEach(t),Iar=i(Ol),m(b0.$$.fragment,Ol),Ol.forEach(t),qar=i(Gl),po=n(Gl,"DIV",{class:!0});var _a=s(po);m(F0.$$.fragment,_a),Nar=i(_a),u_e=n(_a,"P",{});var Tpt=s(u_e);jar=r(Tpt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Tpt.forEach(t),Dar=i(_a),un=n(_a,"P",{});var tC=s(un);Gar=r(tC,"The model class to instantiate is selected based on the "),b_e=n(tC,"CODE",{});var Mpt=s(b_e);Oar=r(Mpt,"model_type"),Mpt.forEach(t),Var=r(tC,` property of the config object (either
passed as an argument or loaded from `),F_e=n(tC,"CODE",{});var Ept=s(F_e);Xar=r(Ept,"pretrained_model_name_or_path"),Ept.forEach(t),zar=r(tC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),v_e=n(tC,"CODE",{});var Cpt=s(v_e);Qar=r(Cpt,"pretrained_model_name_or_path"),Cpt.forEach(t),War=r(tC,":"),tC.forEach(t),Har=i(_a),H=n(_a,"UL",{});var U=s(H);Tv=n(U,"LI",{});var W8e=s(Tv);T_e=n(W8e,"STRONG",{});var wpt=s(T_e);Uar=r(wpt,"albert"),wpt.forEach(t),Jar=r(W8e," \u2014 "),dV=n(W8e,"A",{href:!0});var Apt=s(dV);Yar=r(Apt,"TFAlbertForPreTraining"),Apt.forEach(t),Kar=r(W8e," (ALBERT model)"),W8e.forEach(t),Zar=i(U),Mv=n(U,"LI",{});var H8e=s(Mv);M_e=n(H8e,"STRONG",{});var ypt=s(M_e);enr=r(ypt,"bart"),ypt.forEach(t),onr=r(H8e," \u2014 "),cV=n(H8e,"A",{href:!0});var Lpt=s(cV);rnr=r(Lpt,"TFBartForConditionalGeneration"),Lpt.forEach(t),tnr=r(H8e," (BART model)"),H8e.forEach(t),anr=i(U),Ev=n(U,"LI",{});var U8e=s(Ev);E_e=n(U8e,"STRONG",{});var xpt=s(E_e);nnr=r(xpt,"bert"),xpt.forEach(t),snr=r(U8e," \u2014 "),fV=n(U8e,"A",{href:!0});var kpt=s(fV);lnr=r(kpt,"TFBertForPreTraining"),kpt.forEach(t),inr=r(U8e," (BERT model)"),U8e.forEach(t),dnr=i(U),Cv=n(U,"LI",{});var J8e=s(Cv);C_e=n(J8e,"STRONG",{});var Spt=s(C_e);cnr=r(Spt,"camembert"),Spt.forEach(t),fnr=r(J8e," \u2014 "),mV=n(J8e,"A",{href:!0});var Rpt=s(mV);mnr=r(Rpt,"TFCamembertForMaskedLM"),Rpt.forEach(t),gnr=r(J8e," (CamemBERT model)"),J8e.forEach(t),hnr=i(U),wv=n(U,"LI",{});var Y8e=s(wv);w_e=n(Y8e,"STRONG",{});var Bpt=s(w_e);pnr=r(Bpt,"ctrl"),Bpt.forEach(t),_nr=r(Y8e," \u2014 "),gV=n(Y8e,"A",{href:!0});var Ppt=s(gV);unr=r(Ppt,"TFCTRLLMHeadModel"),Ppt.forEach(t),bnr=r(Y8e," (CTRL model)"),Y8e.forEach(t),Fnr=i(U),Av=n(U,"LI",{});var K8e=s(Av);A_e=n(K8e,"STRONG",{});var $pt=s(A_e);vnr=r($pt,"distilbert"),$pt.forEach(t),Tnr=r(K8e," \u2014 "),hV=n(K8e,"A",{href:!0});var Ipt=s(hV);Mnr=r(Ipt,"TFDistilBertForMaskedLM"),Ipt.forEach(t),Enr=r(K8e," (DistilBERT model)"),K8e.forEach(t),Cnr=i(U),yv=n(U,"LI",{});var Z8e=s(yv);y_e=n(Z8e,"STRONG",{});var qpt=s(y_e);wnr=r(qpt,"electra"),qpt.forEach(t),Anr=r(Z8e," \u2014 "),pV=n(Z8e,"A",{href:!0});var Npt=s(pV);ynr=r(Npt,"TFElectraForPreTraining"),Npt.forEach(t),Lnr=r(Z8e," (ELECTRA model)"),Z8e.forEach(t),xnr=i(U),Lv=n(U,"LI",{});var e7e=s(Lv);L_e=n(e7e,"STRONG",{});var jpt=s(L_e);knr=r(jpt,"flaubert"),jpt.forEach(t),Snr=r(e7e," \u2014 "),_V=n(e7e,"A",{href:!0});var Dpt=s(_V);Rnr=r(Dpt,"TFFlaubertWithLMHeadModel"),Dpt.forEach(t),Bnr=r(e7e," (FlauBERT model)"),e7e.forEach(t),Pnr=i(U),xv=n(U,"LI",{});var o7e=s(xv);x_e=n(o7e,"STRONG",{});var Gpt=s(x_e);$nr=r(Gpt,"funnel"),Gpt.forEach(t),Inr=r(o7e," \u2014 "),uV=n(o7e,"A",{href:!0});var Opt=s(uV);qnr=r(Opt,"TFFunnelForPreTraining"),Opt.forEach(t),Nnr=r(o7e," (Funnel Transformer model)"),o7e.forEach(t),jnr=i(U),kv=n(U,"LI",{});var r7e=s(kv);k_e=n(r7e,"STRONG",{});var Vpt=s(k_e);Dnr=r(Vpt,"gpt2"),Vpt.forEach(t),Gnr=r(r7e," \u2014 "),bV=n(r7e,"A",{href:!0});var Xpt=s(bV);Onr=r(Xpt,"TFGPT2LMHeadModel"),Xpt.forEach(t),Vnr=r(r7e," (OpenAI GPT-2 model)"),r7e.forEach(t),Xnr=i(U),Sv=n(U,"LI",{});var t7e=s(Sv);S_e=n(t7e,"STRONG",{});var zpt=s(S_e);znr=r(zpt,"layoutlm"),zpt.forEach(t),Qnr=r(t7e," \u2014 "),FV=n(t7e,"A",{href:!0});var Qpt=s(FV);Wnr=r(Qpt,"TFLayoutLMForMaskedLM"),Qpt.forEach(t),Hnr=r(t7e," (LayoutLM model)"),t7e.forEach(t),Unr=i(U),Rv=n(U,"LI",{});var a7e=s(Rv);R_e=n(a7e,"STRONG",{});var Wpt=s(R_e);Jnr=r(Wpt,"lxmert"),Wpt.forEach(t),Ynr=r(a7e," \u2014 "),vV=n(a7e,"A",{href:!0});var Hpt=s(vV);Knr=r(Hpt,"TFLxmertForPreTraining"),Hpt.forEach(t),Znr=r(a7e," (LXMERT model)"),a7e.forEach(t),esr=i(U),Bv=n(U,"LI",{});var n7e=s(Bv);B_e=n(n7e,"STRONG",{});var Upt=s(B_e);osr=r(Upt,"mobilebert"),Upt.forEach(t),rsr=r(n7e," \u2014 "),TV=n(n7e,"A",{href:!0});var Jpt=s(TV);tsr=r(Jpt,"TFMobileBertForPreTraining"),Jpt.forEach(t),asr=r(n7e," (MobileBERT model)"),n7e.forEach(t),nsr=i(U),Pv=n(U,"LI",{});var s7e=s(Pv);P_e=n(s7e,"STRONG",{});var Ypt=s(P_e);ssr=r(Ypt,"mpnet"),Ypt.forEach(t),lsr=r(s7e," \u2014 "),MV=n(s7e,"A",{href:!0});var Kpt=s(MV);isr=r(Kpt,"TFMPNetForMaskedLM"),Kpt.forEach(t),dsr=r(s7e," (MPNet model)"),s7e.forEach(t),csr=i(U),$v=n(U,"LI",{});var l7e=s($v);$_e=n(l7e,"STRONG",{});var Zpt=s($_e);fsr=r(Zpt,"openai-gpt"),Zpt.forEach(t),msr=r(l7e," \u2014 "),EV=n(l7e,"A",{href:!0});var e_t=s(EV);gsr=r(e_t,"TFOpenAIGPTLMHeadModel"),e_t.forEach(t),hsr=r(l7e," (OpenAI GPT model)"),l7e.forEach(t),psr=i(U),Iv=n(U,"LI",{});var i7e=s(Iv);I_e=n(i7e,"STRONG",{});var o_t=s(I_e);_sr=r(o_t,"roberta"),o_t.forEach(t),usr=r(i7e," \u2014 "),CV=n(i7e,"A",{href:!0});var r_t=s(CV);bsr=r(r_t,"TFRobertaForMaskedLM"),r_t.forEach(t),Fsr=r(i7e," (RoBERTa model)"),i7e.forEach(t),vsr=i(U),qv=n(U,"LI",{});var d7e=s(qv);q_e=n(d7e,"STRONG",{});var t_t=s(q_e);Tsr=r(t_t,"t5"),t_t.forEach(t),Msr=r(d7e," \u2014 "),wV=n(d7e,"A",{href:!0});var a_t=s(wV);Esr=r(a_t,"TFT5ForConditionalGeneration"),a_t.forEach(t),Csr=r(d7e," (T5 model)"),d7e.forEach(t),wsr=i(U),Nv=n(U,"LI",{});var c7e=s(Nv);N_e=n(c7e,"STRONG",{});var n_t=s(N_e);Asr=r(n_t,"tapas"),n_t.forEach(t),ysr=r(c7e," \u2014 "),AV=n(c7e,"A",{href:!0});var s_t=s(AV);Lsr=r(s_t,"TFTapasForMaskedLM"),s_t.forEach(t),xsr=r(c7e," (TAPAS model)"),c7e.forEach(t),ksr=i(U),jv=n(U,"LI",{});var f7e=s(jv);j_e=n(f7e,"STRONG",{});var l_t=s(j_e);Ssr=r(l_t,"transfo-xl"),l_t.forEach(t),Rsr=r(f7e," \u2014 "),yV=n(f7e,"A",{href:!0});var i_t=s(yV);Bsr=r(i_t,"TFTransfoXLLMHeadModel"),i_t.forEach(t),Psr=r(f7e," (Transformer-XL model)"),f7e.forEach(t),$sr=i(U),Dv=n(U,"LI",{});var m7e=s(Dv);D_e=n(m7e,"STRONG",{});var d_t=s(D_e);Isr=r(d_t,"vit_mae"),d_t.forEach(t),qsr=r(m7e," \u2014 "),LV=n(m7e,"A",{href:!0});var c_t=s(LV);Nsr=r(c_t,"TFViTMAEForPreTraining"),c_t.forEach(t),jsr=r(m7e," (ViTMAE model)"),m7e.forEach(t),Dsr=i(U),Gv=n(U,"LI",{});var g7e=s(Gv);G_e=n(g7e,"STRONG",{});var f_t=s(G_e);Gsr=r(f_t,"xlm"),f_t.forEach(t),Osr=r(g7e," \u2014 "),xV=n(g7e,"A",{href:!0});var m_t=s(xV);Vsr=r(m_t,"TFXLMWithLMHeadModel"),m_t.forEach(t),Xsr=r(g7e," (XLM model)"),g7e.forEach(t),zsr=i(U),Ov=n(U,"LI",{});var h7e=s(Ov);O_e=n(h7e,"STRONG",{});var g_t=s(O_e);Qsr=r(g_t,"xlm-roberta"),g_t.forEach(t),Wsr=r(h7e," \u2014 "),kV=n(h7e,"A",{href:!0});var h_t=s(kV);Hsr=r(h_t,"TFXLMRobertaForMaskedLM"),h_t.forEach(t),Usr=r(h7e," (XLM-RoBERTa model)"),h7e.forEach(t),Jsr=i(U),Vv=n(U,"LI",{});var p7e=s(Vv);V_e=n(p7e,"STRONG",{});var p_t=s(V_e);Ysr=r(p_t,"xlnet"),p_t.forEach(t),Ksr=r(p7e," \u2014 "),SV=n(p7e,"A",{href:!0});var __t=s(SV);Zsr=r(__t,"TFXLNetLMHeadModel"),__t.forEach(t),elr=r(p7e," (XLNet model)"),p7e.forEach(t),U.forEach(t),olr=i(_a),X_e=n(_a,"P",{});var u_t=s(X_e);rlr=r(u_t,"Examples:"),u_t.forEach(t),tlr=i(_a),m(v0.$$.fragment,_a),_a.forEach(t),Gl.forEach(t),DBe=i(c),Fc=n(c,"H2",{class:!0});var J$e=s(Fc);Xv=n(J$e,"A",{id:!0,class:!0,href:!0});var b_t=s(Xv);z_e=n(b_t,"SPAN",{});var F_t=s(z_e);m(T0.$$.fragment,F_t),F_t.forEach(t),b_t.forEach(t),alr=i(J$e),Q_e=n(J$e,"SPAN",{});var v_t=s(Q_e);nlr=r(v_t,"TFAutoModelForCausalLM"),v_t.forEach(t),J$e.forEach(t),GBe=i(c),Tr=n(c,"DIV",{class:!0});var Vl=s(Tr);m(M0.$$.fragment,Vl),slr=i(Vl),vc=n(Vl,"P",{});var dJ=s(vc);llr=r(dJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),RV=n(dJ,"A",{href:!0});var T_t=s(RV);ilr=r(T_t,"from_pretrained()"),T_t.forEach(t),dlr=r(dJ," class method or the "),BV=n(dJ,"A",{href:!0});var M_t=s(BV);clr=r(M_t,"from_config()"),M_t.forEach(t),flr=r(dJ,` class
method.`),dJ.forEach(t),mlr=i(Vl),E0=n(Vl,"P",{});var Y$e=s(E0);glr=r(Y$e,"This class cannot be instantiated directly using "),W_e=n(Y$e,"CODE",{});var E_t=s(W_e);hlr=r(E_t,"__init__()"),E_t.forEach(t),plr=r(Y$e," (throws an error)."),Y$e.forEach(t),_lr=i(Vl),pt=n(Vl,"DIV",{class:!0});var Xl=s(pt);m(C0.$$.fragment,Xl),ulr=i(Xl),H_e=n(Xl,"P",{});var C_t=s(H_e);blr=r(C_t,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),C_t.forEach(t),Flr=i(Xl),Tc=n(Xl,"P",{});var cJ=s(Tc);vlr=r(cJ,`Note:
Loading a model from its configuration file does `),U_e=n(cJ,"STRONG",{});var w_t=s(U_e);Tlr=r(w_t,"not"),w_t.forEach(t),Mlr=r(cJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),PV=n(cJ,"A",{href:!0});var A_t=s(PV);Elr=r(A_t,"from_pretrained()"),A_t.forEach(t),Clr=r(cJ," to load the model weights."),cJ.forEach(t),wlr=i(Xl),J_e=n(Xl,"P",{});var y_t=s(J_e);Alr=r(y_t,"Examples:"),y_t.forEach(t),ylr=i(Xl),m(w0.$$.fragment,Xl),Xl.forEach(t),Llr=i(Vl),_o=n(Vl,"DIV",{class:!0});var ua=s(_o);m(A0.$$.fragment,ua),xlr=i(ua),Y_e=n(ua,"P",{});var L_t=s(Y_e);klr=r(L_t,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),L_t.forEach(t),Slr=i(ua),bn=n(ua,"P",{});var aC=s(bn);Rlr=r(aC,"The model class to instantiate is selected based on the "),K_e=n(aC,"CODE",{});var x_t=s(K_e);Blr=r(x_t,"model_type"),x_t.forEach(t),Plr=r(aC,` property of the config object (either
passed as an argument or loaded from `),Z_e=n(aC,"CODE",{});var k_t=s(Z_e);$lr=r(k_t,"pretrained_model_name_or_path"),k_t.forEach(t),Ilr=r(aC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),eue=n(aC,"CODE",{});var S_t=s(eue);qlr=r(S_t,"pretrained_model_name_or_path"),S_t.forEach(t),Nlr=r(aC,":"),aC.forEach(t),jlr=i(ua),fe=n(ua,"UL",{});var pe=s(fe);zv=n(pe,"LI",{});var _7e=s(zv);oue=n(_7e,"STRONG",{});var R_t=s(oue);Dlr=r(R_t,"bert"),R_t.forEach(t),Glr=r(_7e," \u2014 "),$V=n(_7e,"A",{href:!0});var B_t=s($V);Olr=r(B_t,"TFBertLMHeadModel"),B_t.forEach(t),Vlr=r(_7e," (BERT model)"),_7e.forEach(t),Xlr=i(pe),Qv=n(pe,"LI",{});var u7e=s(Qv);rue=n(u7e,"STRONG",{});var P_t=s(rue);zlr=r(P_t,"camembert"),P_t.forEach(t),Qlr=r(u7e," \u2014 "),IV=n(u7e,"A",{href:!0});var $_t=s(IV);Wlr=r($_t,"TFCamembertForCausalLM"),$_t.forEach(t),Hlr=r(u7e," (CamemBERT model)"),u7e.forEach(t),Ulr=i(pe),Wv=n(pe,"LI",{});var b7e=s(Wv);tue=n(b7e,"STRONG",{});var I_t=s(tue);Jlr=r(I_t,"ctrl"),I_t.forEach(t),Ylr=r(b7e," \u2014 "),qV=n(b7e,"A",{href:!0});var q_t=s(qV);Klr=r(q_t,"TFCTRLLMHeadModel"),q_t.forEach(t),Zlr=r(b7e," (CTRL model)"),b7e.forEach(t),eir=i(pe),Hv=n(pe,"LI",{});var F7e=s(Hv);aue=n(F7e,"STRONG",{});var N_t=s(aue);oir=r(N_t,"gpt2"),N_t.forEach(t),rir=r(F7e," \u2014 "),NV=n(F7e,"A",{href:!0});var j_t=s(NV);tir=r(j_t,"TFGPT2LMHeadModel"),j_t.forEach(t),air=r(F7e," (OpenAI GPT-2 model)"),F7e.forEach(t),nir=i(pe),Uv=n(pe,"LI",{});var v7e=s(Uv);nue=n(v7e,"STRONG",{});var D_t=s(nue);sir=r(D_t,"gptj"),D_t.forEach(t),lir=r(v7e," \u2014 "),jV=n(v7e,"A",{href:!0});var G_t=s(jV);iir=r(G_t,"TFGPTJForCausalLM"),G_t.forEach(t),dir=r(v7e," (GPT-J model)"),v7e.forEach(t),cir=i(pe),Jv=n(pe,"LI",{});var T7e=s(Jv);sue=n(T7e,"STRONG",{});var O_t=s(sue);fir=r(O_t,"openai-gpt"),O_t.forEach(t),mir=r(T7e," \u2014 "),DV=n(T7e,"A",{href:!0});var V_t=s(DV);gir=r(V_t,"TFOpenAIGPTLMHeadModel"),V_t.forEach(t),hir=r(T7e," (OpenAI GPT model)"),T7e.forEach(t),pir=i(pe),Yv=n(pe,"LI",{});var M7e=s(Yv);lue=n(M7e,"STRONG",{});var X_t=s(lue);_ir=r(X_t,"rembert"),X_t.forEach(t),uir=r(M7e," \u2014 "),GV=n(M7e,"A",{href:!0});var z_t=s(GV);bir=r(z_t,"TFRemBertForCausalLM"),z_t.forEach(t),Fir=r(M7e," (RemBERT model)"),M7e.forEach(t),vir=i(pe),Kv=n(pe,"LI",{});var E7e=s(Kv);iue=n(E7e,"STRONG",{});var Q_t=s(iue);Tir=r(Q_t,"roberta"),Q_t.forEach(t),Mir=r(E7e," \u2014 "),OV=n(E7e,"A",{href:!0});var W_t=s(OV);Eir=r(W_t,"TFRobertaForCausalLM"),W_t.forEach(t),Cir=r(E7e," (RoBERTa model)"),E7e.forEach(t),wir=i(pe),Zv=n(pe,"LI",{});var C7e=s(Zv);due=n(C7e,"STRONG",{});var H_t=s(due);Air=r(H_t,"roformer"),H_t.forEach(t),yir=r(C7e," \u2014 "),VV=n(C7e,"A",{href:!0});var U_t=s(VV);Lir=r(U_t,"TFRoFormerForCausalLM"),U_t.forEach(t),xir=r(C7e," (RoFormer model)"),C7e.forEach(t),kir=i(pe),eT=n(pe,"LI",{});var w7e=s(eT);cue=n(w7e,"STRONG",{});var J_t=s(cue);Sir=r(J_t,"transfo-xl"),J_t.forEach(t),Rir=r(w7e," \u2014 "),XV=n(w7e,"A",{href:!0});var Y_t=s(XV);Bir=r(Y_t,"TFTransfoXLLMHeadModel"),Y_t.forEach(t),Pir=r(w7e," (Transformer-XL model)"),w7e.forEach(t),$ir=i(pe),oT=n(pe,"LI",{});var A7e=s(oT);fue=n(A7e,"STRONG",{});var K_t=s(fue);Iir=r(K_t,"xlm"),K_t.forEach(t),qir=r(A7e," \u2014 "),zV=n(A7e,"A",{href:!0});var Z_t=s(zV);Nir=r(Z_t,"TFXLMWithLMHeadModel"),Z_t.forEach(t),jir=r(A7e," (XLM model)"),A7e.forEach(t),Dir=i(pe),rT=n(pe,"LI",{});var y7e=s(rT);mue=n(y7e,"STRONG",{});var eut=s(mue);Gir=r(eut,"xlnet"),eut.forEach(t),Oir=r(y7e," \u2014 "),QV=n(y7e,"A",{href:!0});var out=s(QV);Vir=r(out,"TFXLNetLMHeadModel"),out.forEach(t),Xir=r(y7e," (XLNet model)"),y7e.forEach(t),pe.forEach(t),zir=i(ua),gue=n(ua,"P",{});var rut=s(gue);Qir=r(rut,"Examples:"),rut.forEach(t),Wir=i(ua),m(y0.$$.fragment,ua),ua.forEach(t),Vl.forEach(t),OBe=i(c),Mc=n(c,"H2",{class:!0});var K$e=s(Mc);tT=n(K$e,"A",{id:!0,class:!0,href:!0});var tut=s(tT);hue=n(tut,"SPAN",{});var aut=s(hue);m(L0.$$.fragment,aut),aut.forEach(t),tut.forEach(t),Hir=i(K$e),pue=n(K$e,"SPAN",{});var nut=s(pue);Uir=r(nut,"TFAutoModelForImageClassification"),nut.forEach(t),K$e.forEach(t),VBe=i(c),Mr=n(c,"DIV",{class:!0});var zl=s(Mr);m(x0.$$.fragment,zl),Jir=i(zl),Ec=n(zl,"P",{});var fJ=s(Ec);Yir=r(fJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),WV=n(fJ,"A",{href:!0});var sut=s(WV);Kir=r(sut,"from_pretrained()"),sut.forEach(t),Zir=r(fJ," class method or the "),HV=n(fJ,"A",{href:!0});var lut=s(HV);edr=r(lut,"from_config()"),lut.forEach(t),odr=r(fJ,` class
method.`),fJ.forEach(t),rdr=i(zl),k0=n(zl,"P",{});var Z$e=s(k0);tdr=r(Z$e,"This class cannot be instantiated directly using "),_ue=n(Z$e,"CODE",{});var iut=s(_ue);adr=r(iut,"__init__()"),iut.forEach(t),ndr=r(Z$e," (throws an error)."),Z$e.forEach(t),sdr=i(zl),_t=n(zl,"DIV",{class:!0});var Ql=s(_t);m(S0.$$.fragment,Ql),ldr=i(Ql),uue=n(Ql,"P",{});var dut=s(uue);idr=r(dut,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),dut.forEach(t),ddr=i(Ql),Cc=n(Ql,"P",{});var mJ=s(Cc);cdr=r(mJ,`Note:
Loading a model from its configuration file does `),bue=n(mJ,"STRONG",{});var cut=s(bue);fdr=r(cut,"not"),cut.forEach(t),mdr=r(mJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),UV=n(mJ,"A",{href:!0});var fut=s(UV);gdr=r(fut,"from_pretrained()"),fut.forEach(t),hdr=r(mJ," to load the model weights."),mJ.forEach(t),pdr=i(Ql),Fue=n(Ql,"P",{});var mut=s(Fue);_dr=r(mut,"Examples:"),mut.forEach(t),udr=i(Ql),m(R0.$$.fragment,Ql),Ql.forEach(t),bdr=i(zl),uo=n(zl,"DIV",{class:!0});var ba=s(uo);m(B0.$$.fragment,ba),Fdr=i(ba),vue=n(ba,"P",{});var gut=s(vue);vdr=r(gut,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),gut.forEach(t),Tdr=i(ba),Fn=n(ba,"P",{});var nC=s(Fn);Mdr=r(nC,"The model class to instantiate is selected based on the "),Tue=n(nC,"CODE",{});var hut=s(Tue);Edr=r(hut,"model_type"),hut.forEach(t),Cdr=r(nC,` property of the config object (either
passed as an argument or loaded from `),Mue=n(nC,"CODE",{});var put=s(Mue);wdr=r(put,"pretrained_model_name_or_path"),put.forEach(t),Adr=r(nC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Eue=n(nC,"CODE",{});var _ut=s(Eue);ydr=r(_ut,"pretrained_model_name_or_path"),_ut.forEach(t),Ldr=r(nC,":"),nC.forEach(t),xdr=i(ba),P0=n(ba,"UL",{});var eIe=s(P0);aT=n(eIe,"LI",{});var L7e=s(aT);Cue=n(L7e,"STRONG",{});var uut=s(Cue);kdr=r(uut,"convnext"),uut.forEach(t),Sdr=r(L7e," \u2014 "),JV=n(L7e,"A",{href:!0});var but=s(JV);Rdr=r(but,"TFConvNextForImageClassification"),but.forEach(t),Bdr=r(L7e," (ConvNext model)"),L7e.forEach(t),Pdr=i(eIe),nT=n(eIe,"LI",{});var x7e=s(nT);wue=n(x7e,"STRONG",{});var Fut=s(wue);$dr=r(Fut,"vit"),Fut.forEach(t),Idr=r(x7e," \u2014 "),YV=n(x7e,"A",{href:!0});var vut=s(YV);qdr=r(vut,"TFViTForImageClassification"),vut.forEach(t),Ndr=r(x7e," (ViT model)"),x7e.forEach(t),eIe.forEach(t),jdr=i(ba),Aue=n(ba,"P",{});var Tut=s(Aue);Ddr=r(Tut,"Examples:"),Tut.forEach(t),Gdr=i(ba),m($0.$$.fragment,ba),ba.forEach(t),zl.forEach(t),XBe=i(c),wc=n(c,"H2",{class:!0});var oIe=s(wc);sT=n(oIe,"A",{id:!0,class:!0,href:!0});var Mut=s(sT);yue=n(Mut,"SPAN",{});var Eut=s(yue);m(I0.$$.fragment,Eut),Eut.forEach(t),Mut.forEach(t),Odr=i(oIe),Lue=n(oIe,"SPAN",{});var Cut=s(Lue);Vdr=r(Cut,"TFAutoModelForMaskedLM"),Cut.forEach(t),oIe.forEach(t),zBe=i(c),Er=n(c,"DIV",{class:!0});var Wl=s(Er);m(q0.$$.fragment,Wl),Xdr=i(Wl),Ac=n(Wl,"P",{});var gJ=s(Ac);zdr=r(gJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),KV=n(gJ,"A",{href:!0});var wut=s(KV);Qdr=r(wut,"from_pretrained()"),wut.forEach(t),Wdr=r(gJ," class method or the "),ZV=n(gJ,"A",{href:!0});var Aut=s(ZV);Hdr=r(Aut,"from_config()"),Aut.forEach(t),Udr=r(gJ,` class
method.`),gJ.forEach(t),Jdr=i(Wl),N0=n(Wl,"P",{});var rIe=s(N0);Ydr=r(rIe,"This class cannot be instantiated directly using "),xue=n(rIe,"CODE",{});var yut=s(xue);Kdr=r(yut,"__init__()"),yut.forEach(t),Zdr=r(rIe," (throws an error)."),rIe.forEach(t),ecr=i(Wl),ut=n(Wl,"DIV",{class:!0});var Hl=s(ut);m(j0.$$.fragment,Hl),ocr=i(Hl),kue=n(Hl,"P",{});var Lut=s(kue);rcr=r(Lut,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Lut.forEach(t),tcr=i(Hl),yc=n(Hl,"P",{});var hJ=s(yc);acr=r(hJ,`Note:
Loading a model from its configuration file does `),Sue=n(hJ,"STRONG",{});var xut=s(Sue);ncr=r(xut,"not"),xut.forEach(t),scr=r(hJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),eX=n(hJ,"A",{href:!0});var kut=s(eX);lcr=r(kut,"from_pretrained()"),kut.forEach(t),icr=r(hJ," to load the model weights."),hJ.forEach(t),dcr=i(Hl),Rue=n(Hl,"P",{});var Sut=s(Rue);ccr=r(Sut,"Examples:"),Sut.forEach(t),fcr=i(Hl),m(D0.$$.fragment,Hl),Hl.forEach(t),mcr=i(Wl),bo=n(Wl,"DIV",{class:!0});var Fa=s(bo);m(G0.$$.fragment,Fa),gcr=i(Fa),Bue=n(Fa,"P",{});var Rut=s(Bue);hcr=r(Rut,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Rut.forEach(t),pcr=i(Fa),vn=n(Fa,"P",{});var sC=s(vn);_cr=r(sC,"The model class to instantiate is selected based on the "),Pue=n(sC,"CODE",{});var But=s(Pue);ucr=r(But,"model_type"),But.forEach(t),bcr=r(sC,` property of the config object (either
passed as an argument or loaded from `),$ue=n(sC,"CODE",{});var Put=s($ue);Fcr=r(Put,"pretrained_model_name_or_path"),Put.forEach(t),vcr=r(sC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Iue=n(sC,"CODE",{});var $ut=s(Iue);Tcr=r($ut,"pretrained_model_name_or_path"),$ut.forEach(t),Mcr=r(sC,":"),sC.forEach(t),Ecr=i(Fa),J=n(Fa,"UL",{});var oe=s(J);lT=n(oe,"LI",{});var k7e=s(lT);que=n(k7e,"STRONG",{});var Iut=s(que);Ccr=r(Iut,"albert"),Iut.forEach(t),wcr=r(k7e," \u2014 "),oX=n(k7e,"A",{href:!0});var qut=s(oX);Acr=r(qut,"TFAlbertForMaskedLM"),qut.forEach(t),ycr=r(k7e," (ALBERT model)"),k7e.forEach(t),Lcr=i(oe),iT=n(oe,"LI",{});var S7e=s(iT);Nue=n(S7e,"STRONG",{});var Nut=s(Nue);xcr=r(Nut,"bert"),Nut.forEach(t),kcr=r(S7e," \u2014 "),rX=n(S7e,"A",{href:!0});var jut=s(rX);Scr=r(jut,"TFBertForMaskedLM"),jut.forEach(t),Rcr=r(S7e," (BERT model)"),S7e.forEach(t),Bcr=i(oe),dT=n(oe,"LI",{});var R7e=s(dT);jue=n(R7e,"STRONG",{});var Dut=s(jue);Pcr=r(Dut,"camembert"),Dut.forEach(t),$cr=r(R7e," \u2014 "),tX=n(R7e,"A",{href:!0});var Gut=s(tX);Icr=r(Gut,"TFCamembertForMaskedLM"),Gut.forEach(t),qcr=r(R7e," (CamemBERT model)"),R7e.forEach(t),Ncr=i(oe),cT=n(oe,"LI",{});var B7e=s(cT);Due=n(B7e,"STRONG",{});var Out=s(Due);jcr=r(Out,"convbert"),Out.forEach(t),Dcr=r(B7e," \u2014 "),aX=n(B7e,"A",{href:!0});var Vut=s(aX);Gcr=r(Vut,"TFConvBertForMaskedLM"),Vut.forEach(t),Ocr=r(B7e," (ConvBERT model)"),B7e.forEach(t),Vcr=i(oe),fT=n(oe,"LI",{});var P7e=s(fT);Gue=n(P7e,"STRONG",{});var Xut=s(Gue);Xcr=r(Xut,"deberta"),Xut.forEach(t),zcr=r(P7e," \u2014 "),nX=n(P7e,"A",{href:!0});var zut=s(nX);Qcr=r(zut,"TFDebertaForMaskedLM"),zut.forEach(t),Wcr=r(P7e," (DeBERTa model)"),P7e.forEach(t),Hcr=i(oe),mT=n(oe,"LI",{});var $7e=s(mT);Oue=n($7e,"STRONG",{});var Qut=s(Oue);Ucr=r(Qut,"deberta-v2"),Qut.forEach(t),Jcr=r($7e," \u2014 "),sX=n($7e,"A",{href:!0});var Wut=s(sX);Ycr=r(Wut,"TFDebertaV2ForMaskedLM"),Wut.forEach(t),Kcr=r($7e," (DeBERTa-v2 model)"),$7e.forEach(t),Zcr=i(oe),gT=n(oe,"LI",{});var I7e=s(gT);Vue=n(I7e,"STRONG",{});var Hut=s(Vue);efr=r(Hut,"distilbert"),Hut.forEach(t),ofr=r(I7e," \u2014 "),lX=n(I7e,"A",{href:!0});var Uut=s(lX);rfr=r(Uut,"TFDistilBertForMaskedLM"),Uut.forEach(t),tfr=r(I7e," (DistilBERT model)"),I7e.forEach(t),afr=i(oe),hT=n(oe,"LI",{});var q7e=s(hT);Xue=n(q7e,"STRONG",{});var Jut=s(Xue);nfr=r(Jut,"electra"),Jut.forEach(t),sfr=r(q7e," \u2014 "),iX=n(q7e,"A",{href:!0});var Yut=s(iX);lfr=r(Yut,"TFElectraForMaskedLM"),Yut.forEach(t),ifr=r(q7e," (ELECTRA model)"),q7e.forEach(t),dfr=i(oe),pT=n(oe,"LI",{});var N7e=s(pT);zue=n(N7e,"STRONG",{});var Kut=s(zue);cfr=r(Kut,"flaubert"),Kut.forEach(t),ffr=r(N7e," \u2014 "),dX=n(N7e,"A",{href:!0});var Zut=s(dX);mfr=r(Zut,"TFFlaubertWithLMHeadModel"),Zut.forEach(t),gfr=r(N7e," (FlauBERT model)"),N7e.forEach(t),hfr=i(oe),_T=n(oe,"LI",{});var j7e=s(_T);Que=n(j7e,"STRONG",{});var e6t=s(Que);pfr=r(e6t,"funnel"),e6t.forEach(t),_fr=r(j7e," \u2014 "),cX=n(j7e,"A",{href:!0});var o6t=s(cX);ufr=r(o6t,"TFFunnelForMaskedLM"),o6t.forEach(t),bfr=r(j7e," (Funnel Transformer model)"),j7e.forEach(t),Ffr=i(oe),uT=n(oe,"LI",{});var D7e=s(uT);Wue=n(D7e,"STRONG",{});var r6t=s(Wue);vfr=r(r6t,"layoutlm"),r6t.forEach(t),Tfr=r(D7e," \u2014 "),fX=n(D7e,"A",{href:!0});var t6t=s(fX);Mfr=r(t6t,"TFLayoutLMForMaskedLM"),t6t.forEach(t),Efr=r(D7e," (LayoutLM model)"),D7e.forEach(t),Cfr=i(oe),bT=n(oe,"LI",{});var G7e=s(bT);Hue=n(G7e,"STRONG",{});var a6t=s(Hue);wfr=r(a6t,"longformer"),a6t.forEach(t),Afr=r(G7e," \u2014 "),mX=n(G7e,"A",{href:!0});var n6t=s(mX);yfr=r(n6t,"TFLongformerForMaskedLM"),n6t.forEach(t),Lfr=r(G7e," (Longformer model)"),G7e.forEach(t),xfr=i(oe),FT=n(oe,"LI",{});var O7e=s(FT);Uue=n(O7e,"STRONG",{});var s6t=s(Uue);kfr=r(s6t,"mobilebert"),s6t.forEach(t),Sfr=r(O7e," \u2014 "),gX=n(O7e,"A",{href:!0});var l6t=s(gX);Rfr=r(l6t,"TFMobileBertForMaskedLM"),l6t.forEach(t),Bfr=r(O7e," (MobileBERT model)"),O7e.forEach(t),Pfr=i(oe),vT=n(oe,"LI",{});var V7e=s(vT);Jue=n(V7e,"STRONG",{});var i6t=s(Jue);$fr=r(i6t,"mpnet"),i6t.forEach(t),Ifr=r(V7e," \u2014 "),hX=n(V7e,"A",{href:!0});var d6t=s(hX);qfr=r(d6t,"TFMPNetForMaskedLM"),d6t.forEach(t),Nfr=r(V7e," (MPNet model)"),V7e.forEach(t),jfr=i(oe),TT=n(oe,"LI",{});var X7e=s(TT);Yue=n(X7e,"STRONG",{});var c6t=s(Yue);Dfr=r(c6t,"rembert"),c6t.forEach(t),Gfr=r(X7e," \u2014 "),pX=n(X7e,"A",{href:!0});var f6t=s(pX);Ofr=r(f6t,"TFRemBertForMaskedLM"),f6t.forEach(t),Vfr=r(X7e," (RemBERT model)"),X7e.forEach(t),Xfr=i(oe),MT=n(oe,"LI",{});var z7e=s(MT);Kue=n(z7e,"STRONG",{});var m6t=s(Kue);zfr=r(m6t,"roberta"),m6t.forEach(t),Qfr=r(z7e," \u2014 "),_X=n(z7e,"A",{href:!0});var g6t=s(_X);Wfr=r(g6t,"TFRobertaForMaskedLM"),g6t.forEach(t),Hfr=r(z7e," (RoBERTa model)"),z7e.forEach(t),Ufr=i(oe),ET=n(oe,"LI",{});var Q7e=s(ET);Zue=n(Q7e,"STRONG",{});var h6t=s(Zue);Jfr=r(h6t,"roformer"),h6t.forEach(t),Yfr=r(Q7e," \u2014 "),uX=n(Q7e,"A",{href:!0});var p6t=s(uX);Kfr=r(p6t,"TFRoFormerForMaskedLM"),p6t.forEach(t),Zfr=r(Q7e," (RoFormer model)"),Q7e.forEach(t),emr=i(oe),CT=n(oe,"LI",{});var W7e=s(CT);e6e=n(W7e,"STRONG",{});var _6t=s(e6e);omr=r(_6t,"tapas"),_6t.forEach(t),rmr=r(W7e," \u2014 "),bX=n(W7e,"A",{href:!0});var u6t=s(bX);tmr=r(u6t,"TFTapasForMaskedLM"),u6t.forEach(t),amr=r(W7e," (TAPAS model)"),W7e.forEach(t),nmr=i(oe),wT=n(oe,"LI",{});var H7e=s(wT);o6e=n(H7e,"STRONG",{});var b6t=s(o6e);smr=r(b6t,"xlm"),b6t.forEach(t),lmr=r(H7e," \u2014 "),FX=n(H7e,"A",{href:!0});var F6t=s(FX);imr=r(F6t,"TFXLMWithLMHeadModel"),F6t.forEach(t),dmr=r(H7e," (XLM model)"),H7e.forEach(t),cmr=i(oe),AT=n(oe,"LI",{});var U7e=s(AT);r6e=n(U7e,"STRONG",{});var v6t=s(r6e);fmr=r(v6t,"xlm-roberta"),v6t.forEach(t),mmr=r(U7e," \u2014 "),vX=n(U7e,"A",{href:!0});var T6t=s(vX);gmr=r(T6t,"TFXLMRobertaForMaskedLM"),T6t.forEach(t),hmr=r(U7e," (XLM-RoBERTa model)"),U7e.forEach(t),oe.forEach(t),pmr=i(Fa),t6e=n(Fa,"P",{});var M6t=s(t6e);_mr=r(M6t,"Examples:"),M6t.forEach(t),umr=i(Fa),m(O0.$$.fragment,Fa),Fa.forEach(t),Wl.forEach(t),QBe=i(c),Lc=n(c,"H2",{class:!0});var tIe=s(Lc);yT=n(tIe,"A",{id:!0,class:!0,href:!0});var E6t=s(yT);a6e=n(E6t,"SPAN",{});var C6t=s(a6e);m(V0.$$.fragment,C6t),C6t.forEach(t),E6t.forEach(t),bmr=i(tIe),n6e=n(tIe,"SPAN",{});var w6t=s(n6e);Fmr=r(w6t,"TFAutoModelForSeq2SeqLM"),w6t.forEach(t),tIe.forEach(t),WBe=i(c),Cr=n(c,"DIV",{class:!0});var Ul=s(Cr);m(X0.$$.fragment,Ul),vmr=i(Ul),xc=n(Ul,"P",{});var pJ=s(xc);Tmr=r(pJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),TX=n(pJ,"A",{href:!0});var A6t=s(TX);Mmr=r(A6t,"from_pretrained()"),A6t.forEach(t),Emr=r(pJ," class method or the "),MX=n(pJ,"A",{href:!0});var y6t=s(MX);Cmr=r(y6t,"from_config()"),y6t.forEach(t),wmr=r(pJ,` class
method.`),pJ.forEach(t),Amr=i(Ul),z0=n(Ul,"P",{});var aIe=s(z0);ymr=r(aIe,"This class cannot be instantiated directly using "),s6e=n(aIe,"CODE",{});var L6t=s(s6e);Lmr=r(L6t,"__init__()"),L6t.forEach(t),xmr=r(aIe," (throws an error)."),aIe.forEach(t),kmr=i(Ul),bt=n(Ul,"DIV",{class:!0});var Jl=s(bt);m(Q0.$$.fragment,Jl),Smr=i(Jl),l6e=n(Jl,"P",{});var x6t=s(l6e);Rmr=r(x6t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),x6t.forEach(t),Bmr=i(Jl),kc=n(Jl,"P",{});var _J=s(kc);Pmr=r(_J,`Note:
Loading a model from its configuration file does `),i6e=n(_J,"STRONG",{});var k6t=s(i6e);$mr=r(k6t,"not"),k6t.forEach(t),Imr=r(_J,` load the model weights. It only affects the
model\u2019s configuration. Use `),EX=n(_J,"A",{href:!0});var S6t=s(EX);qmr=r(S6t,"from_pretrained()"),S6t.forEach(t),Nmr=r(_J," to load the model weights."),_J.forEach(t),jmr=i(Jl),d6e=n(Jl,"P",{});var R6t=s(d6e);Dmr=r(R6t,"Examples:"),R6t.forEach(t),Gmr=i(Jl),m(W0.$$.fragment,Jl),Jl.forEach(t),Omr=i(Ul),Fo=n(Ul,"DIV",{class:!0});var va=s(Fo);m(H0.$$.fragment,va),Vmr=i(va),c6e=n(va,"P",{});var B6t=s(c6e);Xmr=r(B6t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),B6t.forEach(t),zmr=i(va),Tn=n(va,"P",{});var lC=s(Tn);Qmr=r(lC,"The model class to instantiate is selected based on the "),f6e=n(lC,"CODE",{});var P6t=s(f6e);Wmr=r(P6t,"model_type"),P6t.forEach(t),Hmr=r(lC,` property of the config object (either
passed as an argument or loaded from `),m6e=n(lC,"CODE",{});var $6t=s(m6e);Umr=r($6t,"pretrained_model_name_or_path"),$6t.forEach(t),Jmr=r(lC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),g6e=n(lC,"CODE",{});var I6t=s(g6e);Ymr=r(I6t,"pretrained_model_name_or_path"),I6t.forEach(t),Kmr=r(lC,":"),lC.forEach(t),Zmr=i(va),be=n(va,"UL",{});var we=s(be);LT=n(we,"LI",{});var J7e=s(LT);h6e=n(J7e,"STRONG",{});var q6t=s(h6e);egr=r(q6t,"bart"),q6t.forEach(t),ogr=r(J7e," \u2014 "),CX=n(J7e,"A",{href:!0});var N6t=s(CX);rgr=r(N6t,"TFBartForConditionalGeneration"),N6t.forEach(t),tgr=r(J7e," (BART model)"),J7e.forEach(t),agr=i(we),xT=n(we,"LI",{});var Y7e=s(xT);p6e=n(Y7e,"STRONG",{});var j6t=s(p6e);ngr=r(j6t,"blenderbot"),j6t.forEach(t),sgr=r(Y7e," \u2014 "),wX=n(Y7e,"A",{href:!0});var D6t=s(wX);lgr=r(D6t,"TFBlenderbotForConditionalGeneration"),D6t.forEach(t),igr=r(Y7e," (Blenderbot model)"),Y7e.forEach(t),dgr=i(we),kT=n(we,"LI",{});var K7e=s(kT);_6e=n(K7e,"STRONG",{});var G6t=s(_6e);cgr=r(G6t,"blenderbot-small"),G6t.forEach(t),fgr=r(K7e," \u2014 "),AX=n(K7e,"A",{href:!0});var O6t=s(AX);mgr=r(O6t,"TFBlenderbotSmallForConditionalGeneration"),O6t.forEach(t),ggr=r(K7e," (BlenderbotSmall model)"),K7e.forEach(t),hgr=i(we),ST=n(we,"LI",{});var Z7e=s(ST);u6e=n(Z7e,"STRONG",{});var V6t=s(u6e);pgr=r(V6t,"encoder-decoder"),V6t.forEach(t),_gr=r(Z7e," \u2014 "),yX=n(Z7e,"A",{href:!0});var X6t=s(yX);ugr=r(X6t,"TFEncoderDecoderModel"),X6t.forEach(t),bgr=r(Z7e," (Encoder decoder model)"),Z7e.forEach(t),Fgr=i(we),RT=n(we,"LI",{});var exe=s(RT);b6e=n(exe,"STRONG",{});var z6t=s(b6e);vgr=r(z6t,"led"),z6t.forEach(t),Tgr=r(exe," \u2014 "),LX=n(exe,"A",{href:!0});var Q6t=s(LX);Mgr=r(Q6t,"TFLEDForConditionalGeneration"),Q6t.forEach(t),Egr=r(exe," (LED model)"),exe.forEach(t),Cgr=i(we),BT=n(we,"LI",{});var oxe=s(BT);F6e=n(oxe,"STRONG",{});var W6t=s(F6e);wgr=r(W6t,"marian"),W6t.forEach(t),Agr=r(oxe," \u2014 "),xX=n(oxe,"A",{href:!0});var H6t=s(xX);ygr=r(H6t,"TFMarianMTModel"),H6t.forEach(t),Lgr=r(oxe," (Marian model)"),oxe.forEach(t),xgr=i(we),PT=n(we,"LI",{});var rxe=s(PT);v6e=n(rxe,"STRONG",{});var U6t=s(v6e);kgr=r(U6t,"mbart"),U6t.forEach(t),Sgr=r(rxe," \u2014 "),kX=n(rxe,"A",{href:!0});var J6t=s(kX);Rgr=r(J6t,"TFMBartForConditionalGeneration"),J6t.forEach(t),Bgr=r(rxe," (mBART model)"),rxe.forEach(t),Pgr=i(we),$T=n(we,"LI",{});var txe=s($T);T6e=n(txe,"STRONG",{});var Y6t=s(T6e);$gr=r(Y6t,"mt5"),Y6t.forEach(t),Igr=r(txe," \u2014 "),SX=n(txe,"A",{href:!0});var K6t=s(SX);qgr=r(K6t,"TFMT5ForConditionalGeneration"),K6t.forEach(t),Ngr=r(txe," (mT5 model)"),txe.forEach(t),jgr=i(we),IT=n(we,"LI",{});var axe=s(IT);M6e=n(axe,"STRONG",{});var Z6t=s(M6e);Dgr=r(Z6t,"pegasus"),Z6t.forEach(t),Ggr=r(axe," \u2014 "),RX=n(axe,"A",{href:!0});var e1t=s(RX);Ogr=r(e1t,"TFPegasusForConditionalGeneration"),e1t.forEach(t),Vgr=r(axe," (Pegasus model)"),axe.forEach(t),Xgr=i(we),qT=n(we,"LI",{});var nxe=s(qT);E6e=n(nxe,"STRONG",{});var o1t=s(E6e);zgr=r(o1t,"t5"),o1t.forEach(t),Qgr=r(nxe," \u2014 "),BX=n(nxe,"A",{href:!0});var r1t=s(BX);Wgr=r(r1t,"TFT5ForConditionalGeneration"),r1t.forEach(t),Hgr=r(nxe," (T5 model)"),nxe.forEach(t),we.forEach(t),Ugr=i(va),C6e=n(va,"P",{});var t1t=s(C6e);Jgr=r(t1t,"Examples:"),t1t.forEach(t),Ygr=i(va),m(U0.$$.fragment,va),va.forEach(t),Ul.forEach(t),HBe=i(c),Sc=n(c,"H2",{class:!0});var nIe=s(Sc);NT=n(nIe,"A",{id:!0,class:!0,href:!0});var a1t=s(NT);w6e=n(a1t,"SPAN",{});var n1t=s(w6e);m(J0.$$.fragment,n1t),n1t.forEach(t),a1t.forEach(t),Kgr=i(nIe),A6e=n(nIe,"SPAN",{});var s1t=s(A6e);Zgr=r(s1t,"TFAutoModelForSequenceClassification"),s1t.forEach(t),nIe.forEach(t),UBe=i(c),wr=n(c,"DIV",{class:!0});var Yl=s(wr);m(Y0.$$.fragment,Yl),ehr=i(Yl),Rc=n(Yl,"P",{});var uJ=s(Rc);ohr=r(uJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),PX=n(uJ,"A",{href:!0});var l1t=s(PX);rhr=r(l1t,"from_pretrained()"),l1t.forEach(t),thr=r(uJ," class method or the "),$X=n(uJ,"A",{href:!0});var i1t=s($X);ahr=r(i1t,"from_config()"),i1t.forEach(t),nhr=r(uJ,` class
method.`),uJ.forEach(t),shr=i(Yl),K0=n(Yl,"P",{});var sIe=s(K0);lhr=r(sIe,"This class cannot be instantiated directly using "),y6e=n(sIe,"CODE",{});var d1t=s(y6e);ihr=r(d1t,"__init__()"),d1t.forEach(t),dhr=r(sIe," (throws an error)."),sIe.forEach(t),chr=i(Yl),Ft=n(Yl,"DIV",{class:!0});var Kl=s(Ft);m(Z0.$$.fragment,Kl),fhr=i(Kl),L6e=n(Kl,"P",{});var c1t=s(L6e);mhr=r(c1t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),c1t.forEach(t),ghr=i(Kl),Bc=n(Kl,"P",{});var bJ=s(Bc);hhr=r(bJ,`Note:
Loading a model from its configuration file does `),x6e=n(bJ,"STRONG",{});var f1t=s(x6e);phr=r(f1t,"not"),f1t.forEach(t),_hr=r(bJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),IX=n(bJ,"A",{href:!0});var m1t=s(IX);uhr=r(m1t,"from_pretrained()"),m1t.forEach(t),bhr=r(bJ," to load the model weights."),bJ.forEach(t),Fhr=i(Kl),k6e=n(Kl,"P",{});var g1t=s(k6e);vhr=r(g1t,"Examples:"),g1t.forEach(t),Thr=i(Kl),m(ey.$$.fragment,Kl),Kl.forEach(t),Mhr=i(Yl),vo=n(Yl,"DIV",{class:!0});var Ta=s(vo);m(oy.$$.fragment,Ta),Ehr=i(Ta),S6e=n(Ta,"P",{});var h1t=s(S6e);Chr=r(h1t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),h1t.forEach(t),whr=i(Ta),Mn=n(Ta,"P",{});var iC=s(Mn);Ahr=r(iC,"The model class to instantiate is selected based on the "),R6e=n(iC,"CODE",{});var p1t=s(R6e);yhr=r(p1t,"model_type"),p1t.forEach(t),Lhr=r(iC,` property of the config object (either
passed as an argument or loaded from `),B6e=n(iC,"CODE",{});var _1t=s(B6e);xhr=r(_1t,"pretrained_model_name_or_path"),_1t.forEach(t),khr=r(iC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),P6e=n(iC,"CODE",{});var u1t=s(P6e);Shr=r(u1t,"pretrained_model_name_or_path"),u1t.forEach(t),Rhr=r(iC,":"),iC.forEach(t),Bhr=i(Ta),V=n(Ta,"UL",{});var Q=s(V);jT=n(Q,"LI",{});var sxe=s(jT);$6e=n(sxe,"STRONG",{});var b1t=s($6e);Phr=r(b1t,"albert"),b1t.forEach(t),$hr=r(sxe," \u2014 "),qX=n(sxe,"A",{href:!0});var F1t=s(qX);Ihr=r(F1t,"TFAlbertForSequenceClassification"),F1t.forEach(t),qhr=r(sxe," (ALBERT model)"),sxe.forEach(t),Nhr=i(Q),DT=n(Q,"LI",{});var lxe=s(DT);I6e=n(lxe,"STRONG",{});var v1t=s(I6e);jhr=r(v1t,"bert"),v1t.forEach(t),Dhr=r(lxe," \u2014 "),NX=n(lxe,"A",{href:!0});var T1t=s(NX);Ghr=r(T1t,"TFBertForSequenceClassification"),T1t.forEach(t),Ohr=r(lxe," (BERT model)"),lxe.forEach(t),Vhr=i(Q),GT=n(Q,"LI",{});var ixe=s(GT);q6e=n(ixe,"STRONG",{});var M1t=s(q6e);Xhr=r(M1t,"camembert"),M1t.forEach(t),zhr=r(ixe," \u2014 "),jX=n(ixe,"A",{href:!0});var E1t=s(jX);Qhr=r(E1t,"TFCamembertForSequenceClassification"),E1t.forEach(t),Whr=r(ixe," (CamemBERT model)"),ixe.forEach(t),Hhr=i(Q),OT=n(Q,"LI",{});var dxe=s(OT);N6e=n(dxe,"STRONG",{});var C1t=s(N6e);Uhr=r(C1t,"convbert"),C1t.forEach(t),Jhr=r(dxe," \u2014 "),DX=n(dxe,"A",{href:!0});var w1t=s(DX);Yhr=r(w1t,"TFConvBertForSequenceClassification"),w1t.forEach(t),Khr=r(dxe," (ConvBERT model)"),dxe.forEach(t),Zhr=i(Q),VT=n(Q,"LI",{});var cxe=s(VT);j6e=n(cxe,"STRONG",{});var A1t=s(j6e);epr=r(A1t,"ctrl"),A1t.forEach(t),opr=r(cxe," \u2014 "),GX=n(cxe,"A",{href:!0});var y1t=s(GX);rpr=r(y1t,"TFCTRLForSequenceClassification"),y1t.forEach(t),tpr=r(cxe," (CTRL model)"),cxe.forEach(t),apr=i(Q),XT=n(Q,"LI",{});var fxe=s(XT);D6e=n(fxe,"STRONG",{});var L1t=s(D6e);npr=r(L1t,"deberta"),L1t.forEach(t),spr=r(fxe," \u2014 "),OX=n(fxe,"A",{href:!0});var x1t=s(OX);lpr=r(x1t,"TFDebertaForSequenceClassification"),x1t.forEach(t),ipr=r(fxe," (DeBERTa model)"),fxe.forEach(t),dpr=i(Q),zT=n(Q,"LI",{});var mxe=s(zT);G6e=n(mxe,"STRONG",{});var k1t=s(G6e);cpr=r(k1t,"deberta-v2"),k1t.forEach(t),fpr=r(mxe," \u2014 "),VX=n(mxe,"A",{href:!0});var S1t=s(VX);mpr=r(S1t,"TFDebertaV2ForSequenceClassification"),S1t.forEach(t),gpr=r(mxe," (DeBERTa-v2 model)"),mxe.forEach(t),hpr=i(Q),QT=n(Q,"LI",{});var gxe=s(QT);O6e=n(gxe,"STRONG",{});var R1t=s(O6e);ppr=r(R1t,"distilbert"),R1t.forEach(t),_pr=r(gxe," \u2014 "),XX=n(gxe,"A",{href:!0});var B1t=s(XX);upr=r(B1t,"TFDistilBertForSequenceClassification"),B1t.forEach(t),bpr=r(gxe," (DistilBERT model)"),gxe.forEach(t),Fpr=i(Q),WT=n(Q,"LI",{});var hxe=s(WT);V6e=n(hxe,"STRONG",{});var P1t=s(V6e);vpr=r(P1t,"electra"),P1t.forEach(t),Tpr=r(hxe," \u2014 "),zX=n(hxe,"A",{href:!0});var $1t=s(zX);Mpr=r($1t,"TFElectraForSequenceClassification"),$1t.forEach(t),Epr=r(hxe," (ELECTRA model)"),hxe.forEach(t),Cpr=i(Q),HT=n(Q,"LI",{});var pxe=s(HT);X6e=n(pxe,"STRONG",{});var I1t=s(X6e);wpr=r(I1t,"flaubert"),I1t.forEach(t),Apr=r(pxe," \u2014 "),QX=n(pxe,"A",{href:!0});var q1t=s(QX);ypr=r(q1t,"TFFlaubertForSequenceClassification"),q1t.forEach(t),Lpr=r(pxe," (FlauBERT model)"),pxe.forEach(t),xpr=i(Q),UT=n(Q,"LI",{});var _xe=s(UT);z6e=n(_xe,"STRONG",{});var N1t=s(z6e);kpr=r(N1t,"funnel"),N1t.forEach(t),Spr=r(_xe," \u2014 "),WX=n(_xe,"A",{href:!0});var j1t=s(WX);Rpr=r(j1t,"TFFunnelForSequenceClassification"),j1t.forEach(t),Bpr=r(_xe," (Funnel Transformer model)"),_xe.forEach(t),Ppr=i(Q),JT=n(Q,"LI",{});var uxe=s(JT);Q6e=n(uxe,"STRONG",{});var D1t=s(Q6e);$pr=r(D1t,"gpt2"),D1t.forEach(t),Ipr=r(uxe," \u2014 "),HX=n(uxe,"A",{href:!0});var G1t=s(HX);qpr=r(G1t,"TFGPT2ForSequenceClassification"),G1t.forEach(t),Npr=r(uxe," (OpenAI GPT-2 model)"),uxe.forEach(t),jpr=i(Q),YT=n(Q,"LI",{});var bxe=s(YT);W6e=n(bxe,"STRONG",{});var O1t=s(W6e);Dpr=r(O1t,"gptj"),O1t.forEach(t),Gpr=r(bxe," \u2014 "),UX=n(bxe,"A",{href:!0});var V1t=s(UX);Opr=r(V1t,"TFGPTJForSequenceClassification"),V1t.forEach(t),Vpr=r(bxe," (GPT-J model)"),bxe.forEach(t),Xpr=i(Q),KT=n(Q,"LI",{});var Fxe=s(KT);H6e=n(Fxe,"STRONG",{});var X1t=s(H6e);zpr=r(X1t,"layoutlm"),X1t.forEach(t),Qpr=r(Fxe," \u2014 "),JX=n(Fxe,"A",{href:!0});var z1t=s(JX);Wpr=r(z1t,"TFLayoutLMForSequenceClassification"),z1t.forEach(t),Hpr=r(Fxe," (LayoutLM model)"),Fxe.forEach(t),Upr=i(Q),ZT=n(Q,"LI",{});var vxe=s(ZT);U6e=n(vxe,"STRONG",{});var Q1t=s(U6e);Jpr=r(Q1t,"longformer"),Q1t.forEach(t),Ypr=r(vxe," \u2014 "),YX=n(vxe,"A",{href:!0});var W1t=s(YX);Kpr=r(W1t,"TFLongformerForSequenceClassification"),W1t.forEach(t),Zpr=r(vxe," (Longformer model)"),vxe.forEach(t),e_r=i(Q),e9=n(Q,"LI",{});var Txe=s(e9);J6e=n(Txe,"STRONG",{});var H1t=s(J6e);o_r=r(H1t,"mobilebert"),H1t.forEach(t),r_r=r(Txe," \u2014 "),KX=n(Txe,"A",{href:!0});var U1t=s(KX);t_r=r(U1t,"TFMobileBertForSequenceClassification"),U1t.forEach(t),a_r=r(Txe," (MobileBERT model)"),Txe.forEach(t),n_r=i(Q),o9=n(Q,"LI",{});var Mxe=s(o9);Y6e=n(Mxe,"STRONG",{});var J1t=s(Y6e);s_r=r(J1t,"mpnet"),J1t.forEach(t),l_r=r(Mxe," \u2014 "),ZX=n(Mxe,"A",{href:!0});var Y1t=s(ZX);i_r=r(Y1t,"TFMPNetForSequenceClassification"),Y1t.forEach(t),d_r=r(Mxe," (MPNet model)"),Mxe.forEach(t),c_r=i(Q),r9=n(Q,"LI",{});var Exe=s(r9);K6e=n(Exe,"STRONG",{});var K1t=s(K6e);f_r=r(K1t,"openai-gpt"),K1t.forEach(t),m_r=r(Exe," \u2014 "),ez=n(Exe,"A",{href:!0});var Z1t=s(ez);g_r=r(Z1t,"TFOpenAIGPTForSequenceClassification"),Z1t.forEach(t),h_r=r(Exe," (OpenAI GPT model)"),Exe.forEach(t),p_r=i(Q),t9=n(Q,"LI",{});var Cxe=s(t9);Z6e=n(Cxe,"STRONG",{});var ebt=s(Z6e);__r=r(ebt,"rembert"),ebt.forEach(t),u_r=r(Cxe," \u2014 "),oz=n(Cxe,"A",{href:!0});var obt=s(oz);b_r=r(obt,"TFRemBertForSequenceClassification"),obt.forEach(t),F_r=r(Cxe," (RemBERT model)"),Cxe.forEach(t),v_r=i(Q),a9=n(Q,"LI",{});var wxe=s(a9);e1e=n(wxe,"STRONG",{});var rbt=s(e1e);T_r=r(rbt,"roberta"),rbt.forEach(t),M_r=r(wxe," \u2014 "),rz=n(wxe,"A",{href:!0});var tbt=s(rz);E_r=r(tbt,"TFRobertaForSequenceClassification"),tbt.forEach(t),C_r=r(wxe," (RoBERTa model)"),wxe.forEach(t),w_r=i(Q),n9=n(Q,"LI",{});var Axe=s(n9);o1e=n(Axe,"STRONG",{});var abt=s(o1e);A_r=r(abt,"roformer"),abt.forEach(t),y_r=r(Axe," \u2014 "),tz=n(Axe,"A",{href:!0});var nbt=s(tz);L_r=r(nbt,"TFRoFormerForSequenceClassification"),nbt.forEach(t),x_r=r(Axe," (RoFormer model)"),Axe.forEach(t),k_r=i(Q),s9=n(Q,"LI",{});var yxe=s(s9);r1e=n(yxe,"STRONG",{});var sbt=s(r1e);S_r=r(sbt,"tapas"),sbt.forEach(t),R_r=r(yxe," \u2014 "),az=n(yxe,"A",{href:!0});var lbt=s(az);B_r=r(lbt,"TFTapasForSequenceClassification"),lbt.forEach(t),P_r=r(yxe," (TAPAS model)"),yxe.forEach(t),$_r=i(Q),l9=n(Q,"LI",{});var Lxe=s(l9);t1e=n(Lxe,"STRONG",{});var ibt=s(t1e);I_r=r(ibt,"transfo-xl"),ibt.forEach(t),q_r=r(Lxe," \u2014 "),nz=n(Lxe,"A",{href:!0});var dbt=s(nz);N_r=r(dbt,"TFTransfoXLForSequenceClassification"),dbt.forEach(t),j_r=r(Lxe," (Transformer-XL model)"),Lxe.forEach(t),D_r=i(Q),i9=n(Q,"LI",{});var xxe=s(i9);a1e=n(xxe,"STRONG",{});var cbt=s(a1e);G_r=r(cbt,"xlm"),cbt.forEach(t),O_r=r(xxe," \u2014 "),sz=n(xxe,"A",{href:!0});var fbt=s(sz);V_r=r(fbt,"TFXLMForSequenceClassification"),fbt.forEach(t),X_r=r(xxe," (XLM model)"),xxe.forEach(t),z_r=i(Q),d9=n(Q,"LI",{});var kxe=s(d9);n1e=n(kxe,"STRONG",{});var mbt=s(n1e);Q_r=r(mbt,"xlm-roberta"),mbt.forEach(t),W_r=r(kxe," \u2014 "),lz=n(kxe,"A",{href:!0});var gbt=s(lz);H_r=r(gbt,"TFXLMRobertaForSequenceClassification"),gbt.forEach(t),U_r=r(kxe," (XLM-RoBERTa model)"),kxe.forEach(t),J_r=i(Q),c9=n(Q,"LI",{});var Sxe=s(c9);s1e=n(Sxe,"STRONG",{});var hbt=s(s1e);Y_r=r(hbt,"xlnet"),hbt.forEach(t),K_r=r(Sxe," \u2014 "),iz=n(Sxe,"A",{href:!0});var pbt=s(iz);Z_r=r(pbt,"TFXLNetForSequenceClassification"),pbt.forEach(t),eur=r(Sxe," (XLNet model)"),Sxe.forEach(t),Q.forEach(t),our=i(Ta),l1e=n(Ta,"P",{});var _bt=s(l1e);rur=r(_bt,"Examples:"),_bt.forEach(t),tur=i(Ta),m(ry.$$.fragment,Ta),Ta.forEach(t),Yl.forEach(t),JBe=i(c),Pc=n(c,"H2",{class:!0});var lIe=s(Pc);f9=n(lIe,"A",{id:!0,class:!0,href:!0});var ubt=s(f9);i1e=n(ubt,"SPAN",{});var bbt=s(i1e);m(ty.$$.fragment,bbt),bbt.forEach(t),ubt.forEach(t),aur=i(lIe),d1e=n(lIe,"SPAN",{});var Fbt=s(d1e);nur=r(Fbt,"TFAutoModelForMultipleChoice"),Fbt.forEach(t),lIe.forEach(t),YBe=i(c),Ar=n(c,"DIV",{class:!0});var Zl=s(Ar);m(ay.$$.fragment,Zl),sur=i(Zl),$c=n(Zl,"P",{});var FJ=s($c);lur=r(FJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),dz=n(FJ,"A",{href:!0});var vbt=s(dz);iur=r(vbt,"from_pretrained()"),vbt.forEach(t),dur=r(FJ," class method or the "),cz=n(FJ,"A",{href:!0});var Tbt=s(cz);cur=r(Tbt,"from_config()"),Tbt.forEach(t),fur=r(FJ,` class
method.`),FJ.forEach(t),mur=i(Zl),ny=n(Zl,"P",{});var iIe=s(ny);gur=r(iIe,"This class cannot be instantiated directly using "),c1e=n(iIe,"CODE",{});var Mbt=s(c1e);hur=r(Mbt,"__init__()"),Mbt.forEach(t),pur=r(iIe," (throws an error)."),iIe.forEach(t),_ur=i(Zl),vt=n(Zl,"DIV",{class:!0});var ei=s(vt);m(sy.$$.fragment,ei),uur=i(ei),f1e=n(ei,"P",{});var Ebt=s(f1e);bur=r(Ebt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Ebt.forEach(t),Fur=i(ei),Ic=n(ei,"P",{});var vJ=s(Ic);vur=r(vJ,`Note:
Loading a model from its configuration file does `),m1e=n(vJ,"STRONG",{});var Cbt=s(m1e);Tur=r(Cbt,"not"),Cbt.forEach(t),Mur=r(vJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),fz=n(vJ,"A",{href:!0});var wbt=s(fz);Eur=r(wbt,"from_pretrained()"),wbt.forEach(t),Cur=r(vJ," to load the model weights."),vJ.forEach(t),wur=i(ei),g1e=n(ei,"P",{});var Abt=s(g1e);Aur=r(Abt,"Examples:"),Abt.forEach(t),yur=i(ei),m(ly.$$.fragment,ei),ei.forEach(t),Lur=i(Zl),To=n(Zl,"DIV",{class:!0});var Ma=s(To);m(iy.$$.fragment,Ma),xur=i(Ma),h1e=n(Ma,"P",{});var ybt=s(h1e);kur=r(ybt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),ybt.forEach(t),Sur=i(Ma),En=n(Ma,"P",{});var dC=s(En);Rur=r(dC,"The model class to instantiate is selected based on the "),p1e=n(dC,"CODE",{});var Lbt=s(p1e);Bur=r(Lbt,"model_type"),Lbt.forEach(t),Pur=r(dC,` property of the config object (either
passed as an argument or loaded from `),_1e=n(dC,"CODE",{});var xbt=s(_1e);$ur=r(xbt,"pretrained_model_name_or_path"),xbt.forEach(t),Iur=r(dC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),u1e=n(dC,"CODE",{});var kbt=s(u1e);qur=r(kbt,"pretrained_model_name_or_path"),kbt.forEach(t),Nur=r(dC,":"),dC.forEach(t),jur=i(Ma),ne=n(Ma,"UL",{});var le=s(ne);m9=n(le,"LI",{});var Rxe=s(m9);b1e=n(Rxe,"STRONG",{});var Sbt=s(b1e);Dur=r(Sbt,"albert"),Sbt.forEach(t),Gur=r(Rxe," \u2014 "),mz=n(Rxe,"A",{href:!0});var Rbt=s(mz);Our=r(Rbt,"TFAlbertForMultipleChoice"),Rbt.forEach(t),Vur=r(Rxe," (ALBERT model)"),Rxe.forEach(t),Xur=i(le),g9=n(le,"LI",{});var Bxe=s(g9);F1e=n(Bxe,"STRONG",{});var Bbt=s(F1e);zur=r(Bbt,"bert"),Bbt.forEach(t),Qur=r(Bxe," \u2014 "),gz=n(Bxe,"A",{href:!0});var Pbt=s(gz);Wur=r(Pbt,"TFBertForMultipleChoice"),Pbt.forEach(t),Hur=r(Bxe," (BERT model)"),Bxe.forEach(t),Uur=i(le),h9=n(le,"LI",{});var Pxe=s(h9);v1e=n(Pxe,"STRONG",{});var $bt=s(v1e);Jur=r($bt,"camembert"),$bt.forEach(t),Yur=r(Pxe," \u2014 "),hz=n(Pxe,"A",{href:!0});var Ibt=s(hz);Kur=r(Ibt,"TFCamembertForMultipleChoice"),Ibt.forEach(t),Zur=r(Pxe," (CamemBERT model)"),Pxe.forEach(t),e6r=i(le),p9=n(le,"LI",{});var $xe=s(p9);T1e=n($xe,"STRONG",{});var qbt=s(T1e);o6r=r(qbt,"convbert"),qbt.forEach(t),r6r=r($xe," \u2014 "),pz=n($xe,"A",{href:!0});var Nbt=s(pz);t6r=r(Nbt,"TFConvBertForMultipleChoice"),Nbt.forEach(t),a6r=r($xe," (ConvBERT model)"),$xe.forEach(t),n6r=i(le),_9=n(le,"LI",{});var Ixe=s(_9);M1e=n(Ixe,"STRONG",{});var jbt=s(M1e);s6r=r(jbt,"distilbert"),jbt.forEach(t),l6r=r(Ixe," \u2014 "),_z=n(Ixe,"A",{href:!0});var Dbt=s(_z);i6r=r(Dbt,"TFDistilBertForMultipleChoice"),Dbt.forEach(t),d6r=r(Ixe," (DistilBERT model)"),Ixe.forEach(t),c6r=i(le),u9=n(le,"LI",{});var qxe=s(u9);E1e=n(qxe,"STRONG",{});var Gbt=s(E1e);f6r=r(Gbt,"electra"),Gbt.forEach(t),m6r=r(qxe," \u2014 "),uz=n(qxe,"A",{href:!0});var Obt=s(uz);g6r=r(Obt,"TFElectraForMultipleChoice"),Obt.forEach(t),h6r=r(qxe," (ELECTRA model)"),qxe.forEach(t),p6r=i(le),b9=n(le,"LI",{});var Nxe=s(b9);C1e=n(Nxe,"STRONG",{});var Vbt=s(C1e);_6r=r(Vbt,"flaubert"),Vbt.forEach(t),u6r=r(Nxe," \u2014 "),bz=n(Nxe,"A",{href:!0});var Xbt=s(bz);b6r=r(Xbt,"TFFlaubertForMultipleChoice"),Xbt.forEach(t),F6r=r(Nxe," (FlauBERT model)"),Nxe.forEach(t),v6r=i(le),F9=n(le,"LI",{});var jxe=s(F9);w1e=n(jxe,"STRONG",{});var zbt=s(w1e);T6r=r(zbt,"funnel"),zbt.forEach(t),M6r=r(jxe," \u2014 "),Fz=n(jxe,"A",{href:!0});var Qbt=s(Fz);E6r=r(Qbt,"TFFunnelForMultipleChoice"),Qbt.forEach(t),C6r=r(jxe," (Funnel Transformer model)"),jxe.forEach(t),w6r=i(le),v9=n(le,"LI",{});var Dxe=s(v9);A1e=n(Dxe,"STRONG",{});var Wbt=s(A1e);A6r=r(Wbt,"longformer"),Wbt.forEach(t),y6r=r(Dxe," \u2014 "),vz=n(Dxe,"A",{href:!0});var Hbt=s(vz);L6r=r(Hbt,"TFLongformerForMultipleChoice"),Hbt.forEach(t),x6r=r(Dxe," (Longformer model)"),Dxe.forEach(t),k6r=i(le),T9=n(le,"LI",{});var Gxe=s(T9);y1e=n(Gxe,"STRONG",{});var Ubt=s(y1e);S6r=r(Ubt,"mobilebert"),Ubt.forEach(t),R6r=r(Gxe," \u2014 "),Tz=n(Gxe,"A",{href:!0});var Jbt=s(Tz);B6r=r(Jbt,"TFMobileBertForMultipleChoice"),Jbt.forEach(t),P6r=r(Gxe," (MobileBERT model)"),Gxe.forEach(t),$6r=i(le),M9=n(le,"LI",{});var Oxe=s(M9);L1e=n(Oxe,"STRONG",{});var Ybt=s(L1e);I6r=r(Ybt,"mpnet"),Ybt.forEach(t),q6r=r(Oxe," \u2014 "),Mz=n(Oxe,"A",{href:!0});var Kbt=s(Mz);N6r=r(Kbt,"TFMPNetForMultipleChoice"),Kbt.forEach(t),j6r=r(Oxe," (MPNet model)"),Oxe.forEach(t),D6r=i(le),E9=n(le,"LI",{});var Vxe=s(E9);x1e=n(Vxe,"STRONG",{});var Zbt=s(x1e);G6r=r(Zbt,"rembert"),Zbt.forEach(t),O6r=r(Vxe," \u2014 "),Ez=n(Vxe,"A",{href:!0});var e5t=s(Ez);V6r=r(e5t,"TFRemBertForMultipleChoice"),e5t.forEach(t),X6r=r(Vxe," (RemBERT model)"),Vxe.forEach(t),z6r=i(le),C9=n(le,"LI",{});var Xxe=s(C9);k1e=n(Xxe,"STRONG",{});var o5t=s(k1e);Q6r=r(o5t,"roberta"),o5t.forEach(t),W6r=r(Xxe," \u2014 "),Cz=n(Xxe,"A",{href:!0});var r5t=s(Cz);H6r=r(r5t,"TFRobertaForMultipleChoice"),r5t.forEach(t),U6r=r(Xxe," (RoBERTa model)"),Xxe.forEach(t),J6r=i(le),w9=n(le,"LI",{});var zxe=s(w9);S1e=n(zxe,"STRONG",{});var t5t=s(S1e);Y6r=r(t5t,"roformer"),t5t.forEach(t),K6r=r(zxe," \u2014 "),wz=n(zxe,"A",{href:!0});var a5t=s(wz);Z6r=r(a5t,"TFRoFormerForMultipleChoice"),a5t.forEach(t),e1r=r(zxe," (RoFormer model)"),zxe.forEach(t),o1r=i(le),A9=n(le,"LI",{});var Qxe=s(A9);R1e=n(Qxe,"STRONG",{});var n5t=s(R1e);r1r=r(n5t,"xlm"),n5t.forEach(t),t1r=r(Qxe," \u2014 "),Az=n(Qxe,"A",{href:!0});var s5t=s(Az);a1r=r(s5t,"TFXLMForMultipleChoice"),s5t.forEach(t),n1r=r(Qxe," (XLM model)"),Qxe.forEach(t),s1r=i(le),y9=n(le,"LI",{});var Wxe=s(y9);B1e=n(Wxe,"STRONG",{});var l5t=s(B1e);l1r=r(l5t,"xlm-roberta"),l5t.forEach(t),i1r=r(Wxe," \u2014 "),yz=n(Wxe,"A",{href:!0});var i5t=s(yz);d1r=r(i5t,"TFXLMRobertaForMultipleChoice"),i5t.forEach(t),c1r=r(Wxe," (XLM-RoBERTa model)"),Wxe.forEach(t),f1r=i(le),L9=n(le,"LI",{});var Hxe=s(L9);P1e=n(Hxe,"STRONG",{});var d5t=s(P1e);m1r=r(d5t,"xlnet"),d5t.forEach(t),g1r=r(Hxe," \u2014 "),Lz=n(Hxe,"A",{href:!0});var c5t=s(Lz);h1r=r(c5t,"TFXLNetForMultipleChoice"),c5t.forEach(t),p1r=r(Hxe," (XLNet model)"),Hxe.forEach(t),le.forEach(t),_1r=i(Ma),$1e=n(Ma,"P",{});var f5t=s($1e);u1r=r(f5t,"Examples:"),f5t.forEach(t),b1r=i(Ma),m(dy.$$.fragment,Ma),Ma.forEach(t),Zl.forEach(t),KBe=i(c),qc=n(c,"H2",{class:!0});var dIe=s(qc);x9=n(dIe,"A",{id:!0,class:!0,href:!0});var m5t=s(x9);I1e=n(m5t,"SPAN",{});var g5t=s(I1e);m(cy.$$.fragment,g5t),g5t.forEach(t),m5t.forEach(t),F1r=i(dIe),q1e=n(dIe,"SPAN",{});var h5t=s(q1e);v1r=r(h5t,"TFAutoModelForTableQuestionAnswering"),h5t.forEach(t),dIe.forEach(t),ZBe=i(c),yr=n(c,"DIV",{class:!0});var oi=s(yr);m(fy.$$.fragment,oi),T1r=i(oi),Nc=n(oi,"P",{});var TJ=s(Nc);M1r=r(TJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),xz=n(TJ,"A",{href:!0});var p5t=s(xz);E1r=r(p5t,"from_pretrained()"),p5t.forEach(t),C1r=r(TJ," class method or the "),kz=n(TJ,"A",{href:!0});var _5t=s(kz);w1r=r(_5t,"from_config()"),_5t.forEach(t),A1r=r(TJ,` class
method.`),TJ.forEach(t),y1r=i(oi),my=n(oi,"P",{});var cIe=s(my);L1r=r(cIe,"This class cannot be instantiated directly using "),N1e=n(cIe,"CODE",{});var u5t=s(N1e);x1r=r(u5t,"__init__()"),u5t.forEach(t),k1r=r(cIe," (throws an error)."),cIe.forEach(t),S1r=i(oi),Tt=n(oi,"DIV",{class:!0});var ri=s(Tt);m(gy.$$.fragment,ri),R1r=i(ri),j1e=n(ri,"P",{});var b5t=s(j1e);B1r=r(b5t,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),b5t.forEach(t),P1r=i(ri),jc=n(ri,"P",{});var MJ=s(jc);$1r=r(MJ,`Note:
Loading a model from its configuration file does `),D1e=n(MJ,"STRONG",{});var F5t=s(D1e);I1r=r(F5t,"not"),F5t.forEach(t),q1r=r(MJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Sz=n(MJ,"A",{href:!0});var v5t=s(Sz);N1r=r(v5t,"from_pretrained()"),v5t.forEach(t),j1r=r(MJ," to load the model weights."),MJ.forEach(t),D1r=i(ri),G1e=n(ri,"P",{});var T5t=s(G1e);G1r=r(T5t,"Examples:"),T5t.forEach(t),O1r=i(ri),m(hy.$$.fragment,ri),ri.forEach(t),V1r=i(oi),Mo=n(oi,"DIV",{class:!0});var Ea=s(Mo);m(py.$$.fragment,Ea),X1r=i(Ea),O1e=n(Ea,"P",{});var M5t=s(O1e);z1r=r(M5t,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),M5t.forEach(t),Q1r=i(Ea),Cn=n(Ea,"P",{});var cC=s(Cn);W1r=r(cC,"The model class to instantiate is selected based on the "),V1e=n(cC,"CODE",{});var E5t=s(V1e);H1r=r(E5t,"model_type"),E5t.forEach(t),U1r=r(cC,` property of the config object (either
passed as an argument or loaded from `),X1e=n(cC,"CODE",{});var C5t=s(X1e);J1r=r(C5t,"pretrained_model_name_or_path"),C5t.forEach(t),Y1r=r(cC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),z1e=n(cC,"CODE",{});var w5t=s(z1e);K1r=r(w5t,"pretrained_model_name_or_path"),w5t.forEach(t),Z1r=r(cC,":"),cC.forEach(t),ebr=i(Ea),Q1e=n(Ea,"UL",{});var A5t=s(Q1e);k9=n(A5t,"LI",{});var Uxe=s(k9);W1e=n(Uxe,"STRONG",{});var y5t=s(W1e);obr=r(y5t,"tapas"),y5t.forEach(t),rbr=r(Uxe," \u2014 "),Rz=n(Uxe,"A",{href:!0});var L5t=s(Rz);tbr=r(L5t,"TFTapasForQuestionAnswering"),L5t.forEach(t),abr=r(Uxe," (TAPAS model)"),Uxe.forEach(t),A5t.forEach(t),nbr=i(Ea),H1e=n(Ea,"P",{});var x5t=s(H1e);sbr=r(x5t,"Examples:"),x5t.forEach(t),lbr=i(Ea),m(_y.$$.fragment,Ea),Ea.forEach(t),oi.forEach(t),ePe=i(c),Dc=n(c,"H2",{class:!0});var fIe=s(Dc);S9=n(fIe,"A",{id:!0,class:!0,href:!0});var k5t=s(S9);U1e=n(k5t,"SPAN",{});var S5t=s(U1e);m(uy.$$.fragment,S5t),S5t.forEach(t),k5t.forEach(t),ibr=i(fIe),J1e=n(fIe,"SPAN",{});var R5t=s(J1e);dbr=r(R5t,"TFAutoModelForTokenClassification"),R5t.forEach(t),fIe.forEach(t),oPe=i(c),Lr=n(c,"DIV",{class:!0});var ti=s(Lr);m(by.$$.fragment,ti),cbr=i(ti),Gc=n(ti,"P",{});var EJ=s(Gc);fbr=r(EJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Bz=n(EJ,"A",{href:!0});var B5t=s(Bz);mbr=r(B5t,"from_pretrained()"),B5t.forEach(t),gbr=r(EJ," class method or the "),Pz=n(EJ,"A",{href:!0});var P5t=s(Pz);hbr=r(P5t,"from_config()"),P5t.forEach(t),pbr=r(EJ,` class
method.`),EJ.forEach(t),_br=i(ti),Fy=n(ti,"P",{});var mIe=s(Fy);ubr=r(mIe,"This class cannot be instantiated directly using "),Y1e=n(mIe,"CODE",{});var $5t=s(Y1e);bbr=r($5t,"__init__()"),$5t.forEach(t),Fbr=r(mIe," (throws an error)."),mIe.forEach(t),vbr=i(ti),Mt=n(ti,"DIV",{class:!0});var ai=s(Mt);m(vy.$$.fragment,ai),Tbr=i(ai),K1e=n(ai,"P",{});var I5t=s(K1e);Mbr=r(I5t,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),I5t.forEach(t),Ebr=i(ai),Oc=n(ai,"P",{});var CJ=s(Oc);Cbr=r(CJ,`Note:
Loading a model from its configuration file does `),Z1e=n(CJ,"STRONG",{});var q5t=s(Z1e);wbr=r(q5t,"not"),q5t.forEach(t),Abr=r(CJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),$z=n(CJ,"A",{href:!0});var N5t=s($z);ybr=r(N5t,"from_pretrained()"),N5t.forEach(t),Lbr=r(CJ," to load the model weights."),CJ.forEach(t),xbr=i(ai),ebe=n(ai,"P",{});var j5t=s(ebe);kbr=r(j5t,"Examples:"),j5t.forEach(t),Sbr=i(ai),m(Ty.$$.fragment,ai),ai.forEach(t),Rbr=i(ti),Eo=n(ti,"DIV",{class:!0});var Ca=s(Eo);m(My.$$.fragment,Ca),Bbr=i(Ca),obe=n(Ca,"P",{});var D5t=s(obe);Pbr=r(D5t,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),D5t.forEach(t),$br=i(Ca),wn=n(Ca,"P",{});var fC=s(wn);Ibr=r(fC,"The model class to instantiate is selected based on the "),rbe=n(fC,"CODE",{});var G5t=s(rbe);qbr=r(G5t,"model_type"),G5t.forEach(t),Nbr=r(fC,` property of the config object (either
passed as an argument or loaded from `),tbe=n(fC,"CODE",{});var O5t=s(tbe);jbr=r(O5t,"pretrained_model_name_or_path"),O5t.forEach(t),Dbr=r(fC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),abe=n(fC,"CODE",{});var V5t=s(abe);Gbr=r(V5t,"pretrained_model_name_or_path"),V5t.forEach(t),Obr=r(fC,":"),fC.forEach(t),Vbr=i(Ca),Y=n(Ca,"UL",{});var re=s(Y);R9=n(re,"LI",{});var Jxe=s(R9);nbe=n(Jxe,"STRONG",{});var X5t=s(nbe);Xbr=r(X5t,"albert"),X5t.forEach(t),zbr=r(Jxe," \u2014 "),Iz=n(Jxe,"A",{href:!0});var z5t=s(Iz);Qbr=r(z5t,"TFAlbertForTokenClassification"),z5t.forEach(t),Wbr=r(Jxe," (ALBERT model)"),Jxe.forEach(t),Hbr=i(re),B9=n(re,"LI",{});var Yxe=s(B9);sbe=n(Yxe,"STRONG",{});var Q5t=s(sbe);Ubr=r(Q5t,"bert"),Q5t.forEach(t),Jbr=r(Yxe," \u2014 "),qz=n(Yxe,"A",{href:!0});var W5t=s(qz);Ybr=r(W5t,"TFBertForTokenClassification"),W5t.forEach(t),Kbr=r(Yxe," (BERT model)"),Yxe.forEach(t),Zbr=i(re),P9=n(re,"LI",{});var Kxe=s(P9);lbe=n(Kxe,"STRONG",{});var H5t=s(lbe);e5r=r(H5t,"camembert"),H5t.forEach(t),o5r=r(Kxe," \u2014 "),Nz=n(Kxe,"A",{href:!0});var U5t=s(Nz);r5r=r(U5t,"TFCamembertForTokenClassification"),U5t.forEach(t),t5r=r(Kxe," (CamemBERT model)"),Kxe.forEach(t),a5r=i(re),$9=n(re,"LI",{});var Zxe=s($9);ibe=n(Zxe,"STRONG",{});var J5t=s(ibe);n5r=r(J5t,"convbert"),J5t.forEach(t),s5r=r(Zxe," \u2014 "),jz=n(Zxe,"A",{href:!0});var Y5t=s(jz);l5r=r(Y5t,"TFConvBertForTokenClassification"),Y5t.forEach(t),i5r=r(Zxe," (ConvBERT model)"),Zxe.forEach(t),d5r=i(re),I9=n(re,"LI",{});var eke=s(I9);dbe=n(eke,"STRONG",{});var K5t=s(dbe);c5r=r(K5t,"deberta"),K5t.forEach(t),f5r=r(eke," \u2014 "),Dz=n(eke,"A",{href:!0});var Z5t=s(Dz);m5r=r(Z5t,"TFDebertaForTokenClassification"),Z5t.forEach(t),g5r=r(eke," (DeBERTa model)"),eke.forEach(t),h5r=i(re),q9=n(re,"LI",{});var oke=s(q9);cbe=n(oke,"STRONG",{});var e2t=s(cbe);p5r=r(e2t,"deberta-v2"),e2t.forEach(t),_5r=r(oke," \u2014 "),Gz=n(oke,"A",{href:!0});var o2t=s(Gz);u5r=r(o2t,"TFDebertaV2ForTokenClassification"),o2t.forEach(t),b5r=r(oke," (DeBERTa-v2 model)"),oke.forEach(t),F5r=i(re),N9=n(re,"LI",{});var rke=s(N9);fbe=n(rke,"STRONG",{});var r2t=s(fbe);v5r=r(r2t,"distilbert"),r2t.forEach(t),T5r=r(rke," \u2014 "),Oz=n(rke,"A",{href:!0});var t2t=s(Oz);M5r=r(t2t,"TFDistilBertForTokenClassification"),t2t.forEach(t),E5r=r(rke," (DistilBERT model)"),rke.forEach(t),C5r=i(re),j9=n(re,"LI",{});var tke=s(j9);mbe=n(tke,"STRONG",{});var a2t=s(mbe);w5r=r(a2t,"electra"),a2t.forEach(t),A5r=r(tke," \u2014 "),Vz=n(tke,"A",{href:!0});var n2t=s(Vz);y5r=r(n2t,"TFElectraForTokenClassification"),n2t.forEach(t),L5r=r(tke," (ELECTRA model)"),tke.forEach(t),x5r=i(re),D9=n(re,"LI",{});var ake=s(D9);gbe=n(ake,"STRONG",{});var s2t=s(gbe);k5r=r(s2t,"flaubert"),s2t.forEach(t),S5r=r(ake," \u2014 "),Xz=n(ake,"A",{href:!0});var l2t=s(Xz);R5r=r(l2t,"TFFlaubertForTokenClassification"),l2t.forEach(t),B5r=r(ake," (FlauBERT model)"),ake.forEach(t),P5r=i(re),G9=n(re,"LI",{});var nke=s(G9);hbe=n(nke,"STRONG",{});var i2t=s(hbe);$5r=r(i2t,"funnel"),i2t.forEach(t),I5r=r(nke," \u2014 "),zz=n(nke,"A",{href:!0});var d2t=s(zz);q5r=r(d2t,"TFFunnelForTokenClassification"),d2t.forEach(t),N5r=r(nke," (Funnel Transformer model)"),nke.forEach(t),j5r=i(re),O9=n(re,"LI",{});var ske=s(O9);pbe=n(ske,"STRONG",{});var c2t=s(pbe);D5r=r(c2t,"layoutlm"),c2t.forEach(t),G5r=r(ske," \u2014 "),Qz=n(ske,"A",{href:!0});var f2t=s(Qz);O5r=r(f2t,"TFLayoutLMForTokenClassification"),f2t.forEach(t),V5r=r(ske," (LayoutLM model)"),ske.forEach(t),X5r=i(re),V9=n(re,"LI",{});var lke=s(V9);_be=n(lke,"STRONG",{});var m2t=s(_be);z5r=r(m2t,"longformer"),m2t.forEach(t),Q5r=r(lke," \u2014 "),Wz=n(lke,"A",{href:!0});var g2t=s(Wz);W5r=r(g2t,"TFLongformerForTokenClassification"),g2t.forEach(t),H5r=r(lke," (Longformer model)"),lke.forEach(t),U5r=i(re),X9=n(re,"LI",{});var ike=s(X9);ube=n(ike,"STRONG",{});var h2t=s(ube);J5r=r(h2t,"mobilebert"),h2t.forEach(t),Y5r=r(ike," \u2014 "),Hz=n(ike,"A",{href:!0});var p2t=s(Hz);K5r=r(p2t,"TFMobileBertForTokenClassification"),p2t.forEach(t),Z5r=r(ike," (MobileBERT model)"),ike.forEach(t),e2r=i(re),z9=n(re,"LI",{});var dke=s(z9);bbe=n(dke,"STRONG",{});var _2t=s(bbe);o2r=r(_2t,"mpnet"),_2t.forEach(t),r2r=r(dke," \u2014 "),Uz=n(dke,"A",{href:!0});var u2t=s(Uz);t2r=r(u2t,"TFMPNetForTokenClassification"),u2t.forEach(t),a2r=r(dke," (MPNet model)"),dke.forEach(t),n2r=i(re),Q9=n(re,"LI",{});var cke=s(Q9);Fbe=n(cke,"STRONG",{});var b2t=s(Fbe);s2r=r(b2t,"rembert"),b2t.forEach(t),l2r=r(cke," \u2014 "),Jz=n(cke,"A",{href:!0});var F2t=s(Jz);i2r=r(F2t,"TFRemBertForTokenClassification"),F2t.forEach(t),d2r=r(cke," (RemBERT model)"),cke.forEach(t),c2r=i(re),W9=n(re,"LI",{});var fke=s(W9);vbe=n(fke,"STRONG",{});var v2t=s(vbe);f2r=r(v2t,"roberta"),v2t.forEach(t),m2r=r(fke," \u2014 "),Yz=n(fke,"A",{href:!0});var T2t=s(Yz);g2r=r(T2t,"TFRobertaForTokenClassification"),T2t.forEach(t),h2r=r(fke," (RoBERTa model)"),fke.forEach(t),p2r=i(re),H9=n(re,"LI",{});var mke=s(H9);Tbe=n(mke,"STRONG",{});var M2t=s(Tbe);_2r=r(M2t,"roformer"),M2t.forEach(t),u2r=r(mke," \u2014 "),Kz=n(mke,"A",{href:!0});var E2t=s(Kz);b2r=r(E2t,"TFRoFormerForTokenClassification"),E2t.forEach(t),F2r=r(mke," (RoFormer model)"),mke.forEach(t),v2r=i(re),U9=n(re,"LI",{});var gke=s(U9);Mbe=n(gke,"STRONG",{});var C2t=s(Mbe);T2r=r(C2t,"xlm"),C2t.forEach(t),M2r=r(gke," \u2014 "),Zz=n(gke,"A",{href:!0});var w2t=s(Zz);E2r=r(w2t,"TFXLMForTokenClassification"),w2t.forEach(t),C2r=r(gke," (XLM model)"),gke.forEach(t),w2r=i(re),J9=n(re,"LI",{});var hke=s(J9);Ebe=n(hke,"STRONG",{});var A2t=s(Ebe);A2r=r(A2t,"xlm-roberta"),A2t.forEach(t),y2r=r(hke," \u2014 "),eQ=n(hke,"A",{href:!0});var y2t=s(eQ);L2r=r(y2t,"TFXLMRobertaForTokenClassification"),y2t.forEach(t),x2r=r(hke," (XLM-RoBERTa model)"),hke.forEach(t),k2r=i(re),Y9=n(re,"LI",{});var pke=s(Y9);Cbe=n(pke,"STRONG",{});var L2t=s(Cbe);S2r=r(L2t,"xlnet"),L2t.forEach(t),R2r=r(pke," \u2014 "),oQ=n(pke,"A",{href:!0});var x2t=s(oQ);B2r=r(x2t,"TFXLNetForTokenClassification"),x2t.forEach(t),P2r=r(pke," (XLNet model)"),pke.forEach(t),re.forEach(t),$2r=i(Ca),wbe=n(Ca,"P",{});var k2t=s(wbe);I2r=r(k2t,"Examples:"),k2t.forEach(t),q2r=i(Ca),m(Ey.$$.fragment,Ca),Ca.forEach(t),ti.forEach(t),rPe=i(c),Vc=n(c,"H2",{class:!0});var gIe=s(Vc);K9=n(gIe,"A",{id:!0,class:!0,href:!0});var S2t=s(K9);Abe=n(S2t,"SPAN",{});var R2t=s(Abe);m(Cy.$$.fragment,R2t),R2t.forEach(t),S2t.forEach(t),N2r=i(gIe),ybe=n(gIe,"SPAN",{});var B2t=s(ybe);j2r=r(B2t,"TFAutoModelForQuestionAnswering"),B2t.forEach(t),gIe.forEach(t),tPe=i(c),xr=n(c,"DIV",{class:!0});var ni=s(xr);m(wy.$$.fragment,ni),D2r=i(ni),Xc=n(ni,"P",{});var wJ=s(Xc);G2r=r(wJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),rQ=n(wJ,"A",{href:!0});var P2t=s(rQ);O2r=r(P2t,"from_pretrained()"),P2t.forEach(t),V2r=r(wJ," class method or the "),tQ=n(wJ,"A",{href:!0});var $2t=s(tQ);X2r=r($2t,"from_config()"),$2t.forEach(t),z2r=r(wJ,` class
method.`),wJ.forEach(t),Q2r=i(ni),Ay=n(ni,"P",{});var hIe=s(Ay);W2r=r(hIe,"This class cannot be instantiated directly using "),Lbe=n(hIe,"CODE",{});var I2t=s(Lbe);H2r=r(I2t,"__init__()"),I2t.forEach(t),U2r=r(hIe," (throws an error)."),hIe.forEach(t),J2r=i(ni),Et=n(ni,"DIV",{class:!0});var si=s(Et);m(yy.$$.fragment,si),Y2r=i(si),xbe=n(si,"P",{});var q2t=s(xbe);K2r=r(q2t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),q2t.forEach(t),Z2r=i(si),zc=n(si,"P",{});var AJ=s(zc);eFr=r(AJ,`Note:
Loading a model from its configuration file does `),kbe=n(AJ,"STRONG",{});var N2t=s(kbe);oFr=r(N2t,"not"),N2t.forEach(t),rFr=r(AJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),aQ=n(AJ,"A",{href:!0});var j2t=s(aQ);tFr=r(j2t,"from_pretrained()"),j2t.forEach(t),aFr=r(AJ," to load the model weights."),AJ.forEach(t),nFr=i(si),Sbe=n(si,"P",{});var D2t=s(Sbe);sFr=r(D2t,"Examples:"),D2t.forEach(t),lFr=i(si),m(Ly.$$.fragment,si),si.forEach(t),iFr=i(ni),Co=n(ni,"DIV",{class:!0});var wa=s(Co);m(xy.$$.fragment,wa),dFr=i(wa),Rbe=n(wa,"P",{});var G2t=s(Rbe);cFr=r(G2t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),G2t.forEach(t),fFr=i(wa),An=n(wa,"P",{});var mC=s(An);mFr=r(mC,"The model class to instantiate is selected based on the "),Bbe=n(mC,"CODE",{});var O2t=s(Bbe);gFr=r(O2t,"model_type"),O2t.forEach(t),hFr=r(mC,` property of the config object (either
passed as an argument or loaded from `),Pbe=n(mC,"CODE",{});var V2t=s(Pbe);pFr=r(V2t,"pretrained_model_name_or_path"),V2t.forEach(t),_Fr=r(mC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$be=n(mC,"CODE",{});var X2t=s($be);uFr=r(X2t,"pretrained_model_name_or_path"),X2t.forEach(t),bFr=r(mC,":"),mC.forEach(t),FFr=i(wa),K=n(wa,"UL",{});var te=s(K);Z9=n(te,"LI",{});var _ke=s(Z9);Ibe=n(_ke,"STRONG",{});var z2t=s(Ibe);vFr=r(z2t,"albert"),z2t.forEach(t),TFr=r(_ke," \u2014 "),nQ=n(_ke,"A",{href:!0});var Q2t=s(nQ);MFr=r(Q2t,"TFAlbertForQuestionAnswering"),Q2t.forEach(t),EFr=r(_ke," (ALBERT model)"),_ke.forEach(t),CFr=i(te),eM=n(te,"LI",{});var uke=s(eM);qbe=n(uke,"STRONG",{});var W2t=s(qbe);wFr=r(W2t,"bert"),W2t.forEach(t),AFr=r(uke," \u2014 "),sQ=n(uke,"A",{href:!0});var H2t=s(sQ);yFr=r(H2t,"TFBertForQuestionAnswering"),H2t.forEach(t),LFr=r(uke," (BERT model)"),uke.forEach(t),xFr=i(te),oM=n(te,"LI",{});var bke=s(oM);Nbe=n(bke,"STRONG",{});var U2t=s(Nbe);kFr=r(U2t,"camembert"),U2t.forEach(t),SFr=r(bke," \u2014 "),lQ=n(bke,"A",{href:!0});var J2t=s(lQ);RFr=r(J2t,"TFCamembertForQuestionAnswering"),J2t.forEach(t),BFr=r(bke," (CamemBERT model)"),bke.forEach(t),PFr=i(te),rM=n(te,"LI",{});var Fke=s(rM);jbe=n(Fke,"STRONG",{});var Y2t=s(jbe);$Fr=r(Y2t,"convbert"),Y2t.forEach(t),IFr=r(Fke," \u2014 "),iQ=n(Fke,"A",{href:!0});var K2t=s(iQ);qFr=r(K2t,"TFConvBertForQuestionAnswering"),K2t.forEach(t),NFr=r(Fke," (ConvBERT model)"),Fke.forEach(t),jFr=i(te),tM=n(te,"LI",{});var vke=s(tM);Dbe=n(vke,"STRONG",{});var Z2t=s(Dbe);DFr=r(Z2t,"deberta"),Z2t.forEach(t),GFr=r(vke," \u2014 "),dQ=n(vke,"A",{href:!0});var eFt=s(dQ);OFr=r(eFt,"TFDebertaForQuestionAnswering"),eFt.forEach(t),VFr=r(vke," (DeBERTa model)"),vke.forEach(t),XFr=i(te),aM=n(te,"LI",{});var Tke=s(aM);Gbe=n(Tke,"STRONG",{});var oFt=s(Gbe);zFr=r(oFt,"deberta-v2"),oFt.forEach(t),QFr=r(Tke," \u2014 "),cQ=n(Tke,"A",{href:!0});var rFt=s(cQ);WFr=r(rFt,"TFDebertaV2ForQuestionAnswering"),rFt.forEach(t),HFr=r(Tke," (DeBERTa-v2 model)"),Tke.forEach(t),UFr=i(te),nM=n(te,"LI",{});var Mke=s(nM);Obe=n(Mke,"STRONG",{});var tFt=s(Obe);JFr=r(tFt,"distilbert"),tFt.forEach(t),YFr=r(Mke," \u2014 "),fQ=n(Mke,"A",{href:!0});var aFt=s(fQ);KFr=r(aFt,"TFDistilBertForQuestionAnswering"),aFt.forEach(t),ZFr=r(Mke," (DistilBERT model)"),Mke.forEach(t),evr=i(te),sM=n(te,"LI",{});var Eke=s(sM);Vbe=n(Eke,"STRONG",{});var nFt=s(Vbe);ovr=r(nFt,"electra"),nFt.forEach(t),rvr=r(Eke," \u2014 "),mQ=n(Eke,"A",{href:!0});var sFt=s(mQ);tvr=r(sFt,"TFElectraForQuestionAnswering"),sFt.forEach(t),avr=r(Eke," (ELECTRA model)"),Eke.forEach(t),nvr=i(te),lM=n(te,"LI",{});var Cke=s(lM);Xbe=n(Cke,"STRONG",{});var lFt=s(Xbe);svr=r(lFt,"flaubert"),lFt.forEach(t),lvr=r(Cke," \u2014 "),gQ=n(Cke,"A",{href:!0});var iFt=s(gQ);ivr=r(iFt,"TFFlaubertForQuestionAnsweringSimple"),iFt.forEach(t),dvr=r(Cke," (FlauBERT model)"),Cke.forEach(t),cvr=i(te),iM=n(te,"LI",{});var wke=s(iM);zbe=n(wke,"STRONG",{});var dFt=s(zbe);fvr=r(dFt,"funnel"),dFt.forEach(t),mvr=r(wke," \u2014 "),hQ=n(wke,"A",{href:!0});var cFt=s(hQ);gvr=r(cFt,"TFFunnelForQuestionAnswering"),cFt.forEach(t),hvr=r(wke," (Funnel Transformer model)"),wke.forEach(t),pvr=i(te),dM=n(te,"LI",{});var Ake=s(dM);Qbe=n(Ake,"STRONG",{});var fFt=s(Qbe);_vr=r(fFt,"gptj"),fFt.forEach(t),uvr=r(Ake," \u2014 "),pQ=n(Ake,"A",{href:!0});var mFt=s(pQ);bvr=r(mFt,"TFGPTJForQuestionAnswering"),mFt.forEach(t),Fvr=r(Ake," (GPT-J model)"),Ake.forEach(t),vvr=i(te),cM=n(te,"LI",{});var yke=s(cM);Wbe=n(yke,"STRONG",{});var gFt=s(Wbe);Tvr=r(gFt,"longformer"),gFt.forEach(t),Mvr=r(yke," \u2014 "),_Q=n(yke,"A",{href:!0});var hFt=s(_Q);Evr=r(hFt,"TFLongformerForQuestionAnswering"),hFt.forEach(t),Cvr=r(yke," (Longformer model)"),yke.forEach(t),wvr=i(te),fM=n(te,"LI",{});var Lke=s(fM);Hbe=n(Lke,"STRONG",{});var pFt=s(Hbe);Avr=r(pFt,"mobilebert"),pFt.forEach(t),yvr=r(Lke," \u2014 "),uQ=n(Lke,"A",{href:!0});var _Ft=s(uQ);Lvr=r(_Ft,"TFMobileBertForQuestionAnswering"),_Ft.forEach(t),xvr=r(Lke," (MobileBERT model)"),Lke.forEach(t),kvr=i(te),mM=n(te,"LI",{});var xke=s(mM);Ube=n(xke,"STRONG",{});var uFt=s(Ube);Svr=r(uFt,"mpnet"),uFt.forEach(t),Rvr=r(xke," \u2014 "),bQ=n(xke,"A",{href:!0});var bFt=s(bQ);Bvr=r(bFt,"TFMPNetForQuestionAnswering"),bFt.forEach(t),Pvr=r(xke," (MPNet model)"),xke.forEach(t),$vr=i(te),gM=n(te,"LI",{});var kke=s(gM);Jbe=n(kke,"STRONG",{});var FFt=s(Jbe);Ivr=r(FFt,"rembert"),FFt.forEach(t),qvr=r(kke," \u2014 "),FQ=n(kke,"A",{href:!0});var vFt=s(FQ);Nvr=r(vFt,"TFRemBertForQuestionAnswering"),vFt.forEach(t),jvr=r(kke," (RemBERT model)"),kke.forEach(t),Dvr=i(te),hM=n(te,"LI",{});var Ske=s(hM);Ybe=n(Ske,"STRONG",{});var TFt=s(Ybe);Gvr=r(TFt,"roberta"),TFt.forEach(t),Ovr=r(Ske," \u2014 "),vQ=n(Ske,"A",{href:!0});var MFt=s(vQ);Vvr=r(MFt,"TFRobertaForQuestionAnswering"),MFt.forEach(t),Xvr=r(Ske," (RoBERTa model)"),Ske.forEach(t),zvr=i(te),pM=n(te,"LI",{});var Rke=s(pM);Kbe=n(Rke,"STRONG",{});var EFt=s(Kbe);Qvr=r(EFt,"roformer"),EFt.forEach(t),Wvr=r(Rke," \u2014 "),TQ=n(Rke,"A",{href:!0});var CFt=s(TQ);Hvr=r(CFt,"TFRoFormerForQuestionAnswering"),CFt.forEach(t),Uvr=r(Rke," (RoFormer model)"),Rke.forEach(t),Jvr=i(te),_M=n(te,"LI",{});var Bke=s(_M);Zbe=n(Bke,"STRONG",{});var wFt=s(Zbe);Yvr=r(wFt,"xlm"),wFt.forEach(t),Kvr=r(Bke," \u2014 "),MQ=n(Bke,"A",{href:!0});var AFt=s(MQ);Zvr=r(AFt,"TFXLMForQuestionAnsweringSimple"),AFt.forEach(t),eTr=r(Bke," (XLM model)"),Bke.forEach(t),oTr=i(te),uM=n(te,"LI",{});var Pke=s(uM);e5e=n(Pke,"STRONG",{});var yFt=s(e5e);rTr=r(yFt,"xlm-roberta"),yFt.forEach(t),tTr=r(Pke," \u2014 "),EQ=n(Pke,"A",{href:!0});var LFt=s(EQ);aTr=r(LFt,"TFXLMRobertaForQuestionAnswering"),LFt.forEach(t),nTr=r(Pke," (XLM-RoBERTa model)"),Pke.forEach(t),sTr=i(te),bM=n(te,"LI",{});var $ke=s(bM);o5e=n($ke,"STRONG",{});var xFt=s(o5e);lTr=r(xFt,"xlnet"),xFt.forEach(t),iTr=r($ke," \u2014 "),CQ=n($ke,"A",{href:!0});var kFt=s(CQ);dTr=r(kFt,"TFXLNetForQuestionAnsweringSimple"),kFt.forEach(t),cTr=r($ke," (XLNet model)"),$ke.forEach(t),te.forEach(t),fTr=i(wa),r5e=n(wa,"P",{});var SFt=s(r5e);mTr=r(SFt,"Examples:"),SFt.forEach(t),gTr=i(wa),m(ky.$$.fragment,wa),wa.forEach(t),ni.forEach(t),aPe=i(c),Qc=n(c,"H2",{class:!0});var pIe=s(Qc);FM=n(pIe,"A",{id:!0,class:!0,href:!0});var RFt=s(FM);t5e=n(RFt,"SPAN",{});var BFt=s(t5e);m(Sy.$$.fragment,BFt),BFt.forEach(t),RFt.forEach(t),hTr=i(pIe),a5e=n(pIe,"SPAN",{});var PFt=s(a5e);pTr=r(PFt,"TFAutoModelForVision2Seq"),PFt.forEach(t),pIe.forEach(t),nPe=i(c),kr=n(c,"DIV",{class:!0});var li=s(kr);m(Ry.$$.fragment,li),_Tr=i(li),Wc=n(li,"P",{});var yJ=s(Wc);uTr=r(yJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),wQ=n(yJ,"A",{href:!0});var $Ft=s(wQ);bTr=r($Ft,"from_pretrained()"),$Ft.forEach(t),FTr=r(yJ," class method or the "),AQ=n(yJ,"A",{href:!0});var IFt=s(AQ);vTr=r(IFt,"from_config()"),IFt.forEach(t),TTr=r(yJ,` class
method.`),yJ.forEach(t),MTr=i(li),By=n(li,"P",{});var _Ie=s(By);ETr=r(_Ie,"This class cannot be instantiated directly using "),n5e=n(_Ie,"CODE",{});var qFt=s(n5e);CTr=r(qFt,"__init__()"),qFt.forEach(t),wTr=r(_Ie," (throws an error)."),_Ie.forEach(t),ATr=i(li),Ct=n(li,"DIV",{class:!0});var ii=s(Ct);m(Py.$$.fragment,ii),yTr=i(ii),s5e=n(ii,"P",{});var NFt=s(s5e);LTr=r(NFt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),NFt.forEach(t),xTr=i(ii),Hc=n(ii,"P",{});var LJ=s(Hc);kTr=r(LJ,`Note:
Loading a model from its configuration file does `),l5e=n(LJ,"STRONG",{});var jFt=s(l5e);STr=r(jFt,"not"),jFt.forEach(t),RTr=r(LJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),yQ=n(LJ,"A",{href:!0});var DFt=s(yQ);BTr=r(DFt,"from_pretrained()"),DFt.forEach(t),PTr=r(LJ," to load the model weights."),LJ.forEach(t),$Tr=i(ii),i5e=n(ii,"P",{});var GFt=s(i5e);ITr=r(GFt,"Examples:"),GFt.forEach(t),qTr=i(ii),m($y.$$.fragment,ii),ii.forEach(t),NTr=i(li),wo=n(li,"DIV",{class:!0});var Aa=s(wo);m(Iy.$$.fragment,Aa),jTr=i(Aa),d5e=n(Aa,"P",{});var OFt=s(d5e);DTr=r(OFt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),OFt.forEach(t),GTr=i(Aa),yn=n(Aa,"P",{});var gC=s(yn);OTr=r(gC,"The model class to instantiate is selected based on the "),c5e=n(gC,"CODE",{});var VFt=s(c5e);VTr=r(VFt,"model_type"),VFt.forEach(t),XTr=r(gC,` property of the config object (either
passed as an argument or loaded from `),f5e=n(gC,"CODE",{});var XFt=s(f5e);zTr=r(XFt,"pretrained_model_name_or_path"),XFt.forEach(t),QTr=r(gC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),m5e=n(gC,"CODE",{});var zFt=s(m5e);WTr=r(zFt,"pretrained_model_name_or_path"),zFt.forEach(t),HTr=r(gC,":"),gC.forEach(t),UTr=i(Aa),g5e=n(Aa,"UL",{});var QFt=s(g5e);vM=n(QFt,"LI",{});var Ike=s(vM);h5e=n(Ike,"STRONG",{});var WFt=s(h5e);JTr=r(WFt,"vision-encoder-decoder"),WFt.forEach(t),YTr=r(Ike," \u2014 "),LQ=n(Ike,"A",{href:!0});var HFt=s(LQ);KTr=r(HFt,"TFVisionEncoderDecoderModel"),HFt.forEach(t),ZTr=r(Ike," (Vision Encoder decoder model)"),Ike.forEach(t),QFt.forEach(t),e9r=i(Aa),p5e=n(Aa,"P",{});var UFt=s(p5e);o9r=r(UFt,"Examples:"),UFt.forEach(t),r9r=i(Aa),m(qy.$$.fragment,Aa),Aa.forEach(t),li.forEach(t),sPe=i(c),Uc=n(c,"H2",{class:!0});var uIe=s(Uc);TM=n(uIe,"A",{id:!0,class:!0,href:!0});var JFt=s(TM);_5e=n(JFt,"SPAN",{});var YFt=s(_5e);m(Ny.$$.fragment,YFt),YFt.forEach(t),JFt.forEach(t),t9r=i(uIe),u5e=n(uIe,"SPAN",{});var KFt=s(u5e);a9r=r(KFt,"TFAutoModelForSpeechSeq2Seq"),KFt.forEach(t),uIe.forEach(t),lPe=i(c),Sr=n(c,"DIV",{class:!0});var di=s(Sr);m(jy.$$.fragment,di),n9r=i(di),Jc=n(di,"P",{});var xJ=s(Jc);s9r=r(xJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),xQ=n(xJ,"A",{href:!0});var ZFt=s(xQ);l9r=r(ZFt,"from_pretrained()"),ZFt.forEach(t),i9r=r(xJ," class method or the "),kQ=n(xJ,"A",{href:!0});var evt=s(kQ);d9r=r(evt,"from_config()"),evt.forEach(t),c9r=r(xJ,` class
method.`),xJ.forEach(t),f9r=i(di),Dy=n(di,"P",{});var bIe=s(Dy);m9r=r(bIe,"This class cannot be instantiated directly using "),b5e=n(bIe,"CODE",{});var ovt=s(b5e);g9r=r(ovt,"__init__()"),ovt.forEach(t),h9r=r(bIe," (throws an error)."),bIe.forEach(t),p9r=i(di),wt=n(di,"DIV",{class:!0});var ci=s(wt);m(Gy.$$.fragment,ci),_9r=i(ci),F5e=n(ci,"P",{});var rvt=s(F5e);u9r=r(rvt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),rvt.forEach(t),b9r=i(ci),Yc=n(ci,"P",{});var kJ=s(Yc);F9r=r(kJ,`Note:
Loading a model from its configuration file does `),v5e=n(kJ,"STRONG",{});var tvt=s(v5e);v9r=r(tvt,"not"),tvt.forEach(t),T9r=r(kJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),SQ=n(kJ,"A",{href:!0});var avt=s(SQ);M9r=r(avt,"from_pretrained()"),avt.forEach(t),E9r=r(kJ," to load the model weights."),kJ.forEach(t),C9r=i(ci),T5e=n(ci,"P",{});var nvt=s(T5e);w9r=r(nvt,"Examples:"),nvt.forEach(t),A9r=i(ci),m(Oy.$$.fragment,ci),ci.forEach(t),y9r=i(di),Ao=n(di,"DIV",{class:!0});var ya=s(Ao);m(Vy.$$.fragment,ya),L9r=i(ya),M5e=n(ya,"P",{});var svt=s(M5e);x9r=r(svt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),svt.forEach(t),k9r=i(ya),Ln=n(ya,"P",{});var hC=s(Ln);S9r=r(hC,"The model class to instantiate is selected based on the "),E5e=n(hC,"CODE",{});var lvt=s(E5e);R9r=r(lvt,"model_type"),lvt.forEach(t),B9r=r(hC,` property of the config object (either
passed as an argument or loaded from `),C5e=n(hC,"CODE",{});var ivt=s(C5e);P9r=r(ivt,"pretrained_model_name_or_path"),ivt.forEach(t),$9r=r(hC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),w5e=n(hC,"CODE",{});var dvt=s(w5e);I9r=r(dvt,"pretrained_model_name_or_path"),dvt.forEach(t),q9r=r(hC,":"),hC.forEach(t),N9r=i(ya),A5e=n(ya,"UL",{});var cvt=s(A5e);MM=n(cvt,"LI",{});var qke=s(MM);y5e=n(qke,"STRONG",{});var fvt=s(y5e);j9r=r(fvt,"speech_to_text"),fvt.forEach(t),D9r=r(qke," \u2014 "),RQ=n(qke,"A",{href:!0});var mvt=s(RQ);G9r=r(mvt,"TFSpeech2TextForConditionalGeneration"),mvt.forEach(t),O9r=r(qke," (Speech2Text model)"),qke.forEach(t),cvt.forEach(t),V9r=i(ya),L5e=n(ya,"P",{});var gvt=s(L5e);X9r=r(gvt,"Examples:"),gvt.forEach(t),z9r=i(ya),m(Xy.$$.fragment,ya),ya.forEach(t),di.forEach(t),iPe=i(c),Kc=n(c,"H2",{class:!0});var FIe=s(Kc);EM=n(FIe,"A",{id:!0,class:!0,href:!0});var hvt=s(EM);x5e=n(hvt,"SPAN",{});var pvt=s(x5e);m(zy.$$.fragment,pvt),pvt.forEach(t),hvt.forEach(t),Q9r=i(FIe),k5e=n(FIe,"SPAN",{});var _vt=s(k5e);W9r=r(_vt,"FlaxAutoModel"),_vt.forEach(t),FIe.forEach(t),dPe=i(c),Rr=n(c,"DIV",{class:!0});var fi=s(Rr);m(Qy.$$.fragment,fi),H9r=i(fi),Zc=n(fi,"P",{});var SJ=s(Zc);U9r=r(SJ,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),BQ=n(SJ,"A",{href:!0});var uvt=s(BQ);J9r=r(uvt,"from_pretrained()"),uvt.forEach(t),Y9r=r(SJ," class method or the "),PQ=n(SJ,"A",{href:!0});var bvt=s(PQ);K9r=r(bvt,"from_config()"),bvt.forEach(t),Z9r=r(SJ,` class
method.`),SJ.forEach(t),eMr=i(fi),Wy=n(fi,"P",{});var vIe=s(Wy);oMr=r(vIe,"This class cannot be instantiated directly using "),S5e=n(vIe,"CODE",{});var Fvt=s(S5e);rMr=r(Fvt,"__init__()"),Fvt.forEach(t),tMr=r(vIe," (throws an error)."),vIe.forEach(t),aMr=i(fi),At=n(fi,"DIV",{class:!0});var mi=s(At);m(Hy.$$.fragment,mi),nMr=i(mi),R5e=n(mi,"P",{});var vvt=s(R5e);sMr=r(vvt,"Instantiates one of the base model classes of the library from a configuration."),vvt.forEach(t),lMr=i(mi),ef=n(mi,"P",{});var RJ=s(ef);iMr=r(RJ,`Note:
Loading a model from its configuration file does `),B5e=n(RJ,"STRONG",{});var Tvt=s(B5e);dMr=r(Tvt,"not"),Tvt.forEach(t),cMr=r(RJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),$Q=n(RJ,"A",{href:!0});var Mvt=s($Q);fMr=r(Mvt,"from_pretrained()"),Mvt.forEach(t),mMr=r(RJ," to load the model weights."),RJ.forEach(t),gMr=i(mi),P5e=n(mi,"P",{});var Evt=s(P5e);hMr=r(Evt,"Examples:"),Evt.forEach(t),pMr=i(mi),m(Uy.$$.fragment,mi),mi.forEach(t),_Mr=i(fi),yo=n(fi,"DIV",{class:!0});var La=s(yo);m(Jy.$$.fragment,La),uMr=i(La),$5e=n(La,"P",{});var Cvt=s($5e);bMr=r(Cvt,"Instantiate one of the base model classes of the library from a pretrained model."),Cvt.forEach(t),FMr=i(La),xn=n(La,"P",{});var pC=s(xn);vMr=r(pC,"The model class to instantiate is selected based on the "),I5e=n(pC,"CODE",{});var wvt=s(I5e);TMr=r(wvt,"model_type"),wvt.forEach(t),MMr=r(pC,` property of the config object (either
passed as an argument or loaded from `),q5e=n(pC,"CODE",{});var Avt=s(q5e);EMr=r(Avt,"pretrained_model_name_or_path"),Avt.forEach(t),CMr=r(pC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),N5e=n(pC,"CODE",{});var yvt=s(N5e);wMr=r(yvt,"pretrained_model_name_or_path"),yvt.forEach(t),AMr=r(pC,":"),pC.forEach(t),yMr=i(La),z=n(La,"UL",{});var W=s(z);CM=n(W,"LI",{});var Nke=s(CM);j5e=n(Nke,"STRONG",{});var Lvt=s(j5e);LMr=r(Lvt,"albert"),Lvt.forEach(t),xMr=r(Nke," \u2014 "),IQ=n(Nke,"A",{href:!0});var xvt=s(IQ);kMr=r(xvt,"FlaxAlbertModel"),xvt.forEach(t),SMr=r(Nke," (ALBERT model)"),Nke.forEach(t),RMr=i(W),wM=n(W,"LI",{});var jke=s(wM);D5e=n(jke,"STRONG",{});var kvt=s(D5e);BMr=r(kvt,"bart"),kvt.forEach(t),PMr=r(jke," \u2014 "),qQ=n(jke,"A",{href:!0});var Svt=s(qQ);$Mr=r(Svt,"FlaxBartModel"),Svt.forEach(t),IMr=r(jke," (BART model)"),jke.forEach(t),qMr=i(W),AM=n(W,"LI",{});var Dke=s(AM);G5e=n(Dke,"STRONG",{});var Rvt=s(G5e);NMr=r(Rvt,"beit"),Rvt.forEach(t),jMr=r(Dke," \u2014 "),NQ=n(Dke,"A",{href:!0});var Bvt=s(NQ);DMr=r(Bvt,"FlaxBeitModel"),Bvt.forEach(t),GMr=r(Dke," (BEiT model)"),Dke.forEach(t),OMr=i(W),yM=n(W,"LI",{});var Gke=s(yM);O5e=n(Gke,"STRONG",{});var Pvt=s(O5e);VMr=r(Pvt,"bert"),Pvt.forEach(t),XMr=r(Gke," \u2014 "),jQ=n(Gke,"A",{href:!0});var $vt=s(jQ);zMr=r($vt,"FlaxBertModel"),$vt.forEach(t),QMr=r(Gke," (BERT model)"),Gke.forEach(t),WMr=i(W),LM=n(W,"LI",{});var Oke=s(LM);V5e=n(Oke,"STRONG",{});var Ivt=s(V5e);HMr=r(Ivt,"big_bird"),Ivt.forEach(t),UMr=r(Oke," \u2014 "),DQ=n(Oke,"A",{href:!0});var qvt=s(DQ);JMr=r(qvt,"FlaxBigBirdModel"),qvt.forEach(t),YMr=r(Oke," (BigBird model)"),Oke.forEach(t),KMr=i(W),xM=n(W,"LI",{});var Vke=s(xM);X5e=n(Vke,"STRONG",{});var Nvt=s(X5e);ZMr=r(Nvt,"blenderbot"),Nvt.forEach(t),e4r=r(Vke," \u2014 "),GQ=n(Vke,"A",{href:!0});var jvt=s(GQ);o4r=r(jvt,"FlaxBlenderbotModel"),jvt.forEach(t),r4r=r(Vke," (Blenderbot model)"),Vke.forEach(t),t4r=i(W),kM=n(W,"LI",{});var Xke=s(kM);z5e=n(Xke,"STRONG",{});var Dvt=s(z5e);a4r=r(Dvt,"blenderbot-small"),Dvt.forEach(t),n4r=r(Xke," \u2014 "),OQ=n(Xke,"A",{href:!0});var Gvt=s(OQ);s4r=r(Gvt,"FlaxBlenderbotSmallModel"),Gvt.forEach(t),l4r=r(Xke," (BlenderbotSmall model)"),Xke.forEach(t),i4r=i(W),SM=n(W,"LI",{});var zke=s(SM);Q5e=n(zke,"STRONG",{});var Ovt=s(Q5e);d4r=r(Ovt,"clip"),Ovt.forEach(t),c4r=r(zke," \u2014 "),VQ=n(zke,"A",{href:!0});var Vvt=s(VQ);f4r=r(Vvt,"FlaxCLIPModel"),Vvt.forEach(t),m4r=r(zke," (CLIP model)"),zke.forEach(t),g4r=i(W),RM=n(W,"LI",{});var Qke=s(RM);W5e=n(Qke,"STRONG",{});var Xvt=s(W5e);h4r=r(Xvt,"distilbert"),Xvt.forEach(t),p4r=r(Qke," \u2014 "),XQ=n(Qke,"A",{href:!0});var zvt=s(XQ);_4r=r(zvt,"FlaxDistilBertModel"),zvt.forEach(t),u4r=r(Qke," (DistilBERT model)"),Qke.forEach(t),b4r=i(W),BM=n(W,"LI",{});var Wke=s(BM);H5e=n(Wke,"STRONG",{});var Qvt=s(H5e);F4r=r(Qvt,"electra"),Qvt.forEach(t),v4r=r(Wke," \u2014 "),zQ=n(Wke,"A",{href:!0});var Wvt=s(zQ);T4r=r(Wvt,"FlaxElectraModel"),Wvt.forEach(t),M4r=r(Wke," (ELECTRA model)"),Wke.forEach(t),E4r=i(W),PM=n(W,"LI",{});var Hke=s(PM);U5e=n(Hke,"STRONG",{});var Hvt=s(U5e);C4r=r(Hvt,"gpt2"),Hvt.forEach(t),w4r=r(Hke," \u2014 "),QQ=n(Hke,"A",{href:!0});var Uvt=s(QQ);A4r=r(Uvt,"FlaxGPT2Model"),Uvt.forEach(t),y4r=r(Hke," (OpenAI GPT-2 model)"),Hke.forEach(t),L4r=i(W),$M=n(W,"LI",{});var Uke=s($M);J5e=n(Uke,"STRONG",{});var Jvt=s(J5e);x4r=r(Jvt,"gpt_neo"),Jvt.forEach(t),k4r=r(Uke," \u2014 "),WQ=n(Uke,"A",{href:!0});var Yvt=s(WQ);S4r=r(Yvt,"FlaxGPTNeoModel"),Yvt.forEach(t),R4r=r(Uke," (GPT Neo model)"),Uke.forEach(t),B4r=i(W),IM=n(W,"LI",{});var Jke=s(IM);Y5e=n(Jke,"STRONG",{});var Kvt=s(Y5e);P4r=r(Kvt,"gptj"),Kvt.forEach(t),$4r=r(Jke," \u2014 "),HQ=n(Jke,"A",{href:!0});var Zvt=s(HQ);I4r=r(Zvt,"FlaxGPTJModel"),Zvt.forEach(t),q4r=r(Jke," (GPT-J model)"),Jke.forEach(t),N4r=i(W),qM=n(W,"LI",{});var Yke=s(qM);K5e=n(Yke,"STRONG",{});var eTt=s(K5e);j4r=r(eTt,"marian"),eTt.forEach(t),D4r=r(Yke," \u2014 "),UQ=n(Yke,"A",{href:!0});var oTt=s(UQ);G4r=r(oTt,"FlaxMarianModel"),oTt.forEach(t),O4r=r(Yke," (Marian model)"),Yke.forEach(t),V4r=i(W),NM=n(W,"LI",{});var Kke=s(NM);Z5e=n(Kke,"STRONG",{});var rTt=s(Z5e);X4r=r(rTt,"mbart"),rTt.forEach(t),z4r=r(Kke," \u2014 "),JQ=n(Kke,"A",{href:!0});var tTt=s(JQ);Q4r=r(tTt,"FlaxMBartModel"),tTt.forEach(t),W4r=r(Kke," (mBART model)"),Kke.forEach(t),H4r=i(W),jM=n(W,"LI",{});var Zke=s(jM);e2e=n(Zke,"STRONG",{});var aTt=s(e2e);U4r=r(aTt,"mt5"),aTt.forEach(t),J4r=r(Zke," \u2014 "),YQ=n(Zke,"A",{href:!0});var nTt=s(YQ);Y4r=r(nTt,"FlaxMT5Model"),nTt.forEach(t),K4r=r(Zke," (mT5 model)"),Zke.forEach(t),Z4r=i(W),DM=n(W,"LI",{});var eSe=s(DM);o2e=n(eSe,"STRONG",{});var sTt=s(o2e);eEr=r(sTt,"pegasus"),sTt.forEach(t),oEr=r(eSe," \u2014 "),KQ=n(eSe,"A",{href:!0});var lTt=s(KQ);rEr=r(lTt,"FlaxPegasusModel"),lTt.forEach(t),tEr=r(eSe," (Pegasus model)"),eSe.forEach(t),aEr=i(W),GM=n(W,"LI",{});var oSe=s(GM);r2e=n(oSe,"STRONG",{});var iTt=s(r2e);nEr=r(iTt,"roberta"),iTt.forEach(t),sEr=r(oSe," \u2014 "),ZQ=n(oSe,"A",{href:!0});var dTt=s(ZQ);lEr=r(dTt,"FlaxRobertaModel"),dTt.forEach(t),iEr=r(oSe," (RoBERTa model)"),oSe.forEach(t),dEr=i(W),OM=n(W,"LI",{});var rSe=s(OM);t2e=n(rSe,"STRONG",{});var cTt=s(t2e);cEr=r(cTt,"roformer"),cTt.forEach(t),fEr=r(rSe," \u2014 "),eW=n(rSe,"A",{href:!0});var fTt=s(eW);mEr=r(fTt,"FlaxRoFormerModel"),fTt.forEach(t),gEr=r(rSe," (RoFormer model)"),rSe.forEach(t),hEr=i(W),VM=n(W,"LI",{});var tSe=s(VM);a2e=n(tSe,"STRONG",{});var mTt=s(a2e);pEr=r(mTt,"t5"),mTt.forEach(t),_Er=r(tSe," \u2014 "),oW=n(tSe,"A",{href:!0});var gTt=s(oW);uEr=r(gTt,"FlaxT5Model"),gTt.forEach(t),bEr=r(tSe," (T5 model)"),tSe.forEach(t),FEr=i(W),XM=n(W,"LI",{});var aSe=s(XM);n2e=n(aSe,"STRONG",{});var hTt=s(n2e);vEr=r(hTt,"vision-text-dual-encoder"),hTt.forEach(t),TEr=r(aSe," \u2014 "),rW=n(aSe,"A",{href:!0});var pTt=s(rW);MEr=r(pTt,"FlaxVisionTextDualEncoderModel"),pTt.forEach(t),EEr=r(aSe," (VisionTextDualEncoder model)"),aSe.forEach(t),CEr=i(W),zM=n(W,"LI",{});var nSe=s(zM);s2e=n(nSe,"STRONG",{});var _Tt=s(s2e);wEr=r(_Tt,"vit"),_Tt.forEach(t),AEr=r(nSe," \u2014 "),tW=n(nSe,"A",{href:!0});var uTt=s(tW);yEr=r(uTt,"FlaxViTModel"),uTt.forEach(t),LEr=r(nSe," (ViT model)"),nSe.forEach(t),xEr=i(W),QM=n(W,"LI",{});var sSe=s(QM);l2e=n(sSe,"STRONG",{});var bTt=s(l2e);kEr=r(bTt,"wav2vec2"),bTt.forEach(t),SEr=r(sSe," \u2014 "),aW=n(sSe,"A",{href:!0});var FTt=s(aW);REr=r(FTt,"FlaxWav2Vec2Model"),FTt.forEach(t),BEr=r(sSe," (Wav2Vec2 model)"),sSe.forEach(t),PEr=i(W),WM=n(W,"LI",{});var lSe=s(WM);i2e=n(lSe,"STRONG",{});var vTt=s(i2e);$Er=r(vTt,"xglm"),vTt.forEach(t),IEr=r(lSe," \u2014 "),nW=n(lSe,"A",{href:!0});var TTt=s(nW);qEr=r(TTt,"FlaxXGLMModel"),TTt.forEach(t),NEr=r(lSe," (XGLM model)"),lSe.forEach(t),jEr=i(W),HM=n(W,"LI",{});var iSe=s(HM);d2e=n(iSe,"STRONG",{});var MTt=s(d2e);DEr=r(MTt,"xlm-roberta"),MTt.forEach(t),GEr=r(iSe," \u2014 "),sW=n(iSe,"A",{href:!0});var ETt=s(sW);OEr=r(ETt,"FlaxXLMRobertaModel"),ETt.forEach(t),VEr=r(iSe," (XLM-RoBERTa model)"),iSe.forEach(t),W.forEach(t),XEr=i(La),c2e=n(La,"P",{});var CTt=s(c2e);zEr=r(CTt,"Examples:"),CTt.forEach(t),QEr=i(La),m(Yy.$$.fragment,La),La.forEach(t),fi.forEach(t),cPe=i(c),of=n(c,"H2",{class:!0});var TIe=s(of);UM=n(TIe,"A",{id:!0,class:!0,href:!0});var wTt=s(UM);f2e=n(wTt,"SPAN",{});var ATt=s(f2e);m(Ky.$$.fragment,ATt),ATt.forEach(t),wTt.forEach(t),WEr=i(TIe),m2e=n(TIe,"SPAN",{});var yTt=s(m2e);HEr=r(yTt,"FlaxAutoModelForCausalLM"),yTt.forEach(t),TIe.forEach(t),fPe=i(c),Br=n(c,"DIV",{class:!0});var gi=s(Br);m(Zy.$$.fragment,gi),UEr=i(gi),rf=n(gi,"P",{});var BJ=s(rf);JEr=r(BJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),lW=n(BJ,"A",{href:!0});var LTt=s(lW);YEr=r(LTt,"from_pretrained()"),LTt.forEach(t),KEr=r(BJ," class method or the "),iW=n(BJ,"A",{href:!0});var xTt=s(iW);ZEr=r(xTt,"from_config()"),xTt.forEach(t),eCr=r(BJ,` class
method.`),BJ.forEach(t),oCr=i(gi),eL=n(gi,"P",{});var MIe=s(eL);rCr=r(MIe,"This class cannot be instantiated directly using "),g2e=n(MIe,"CODE",{});var kTt=s(g2e);tCr=r(kTt,"__init__()"),kTt.forEach(t),aCr=r(MIe," (throws an error)."),MIe.forEach(t),nCr=i(gi),yt=n(gi,"DIV",{class:!0});var hi=s(yt);m(oL.$$.fragment,hi),sCr=i(hi),h2e=n(hi,"P",{});var STt=s(h2e);lCr=r(STt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),STt.forEach(t),iCr=i(hi),tf=n(hi,"P",{});var PJ=s(tf);dCr=r(PJ,`Note:
Loading a model from its configuration file does `),p2e=n(PJ,"STRONG",{});var RTt=s(p2e);cCr=r(RTt,"not"),RTt.forEach(t),fCr=r(PJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),dW=n(PJ,"A",{href:!0});var BTt=s(dW);mCr=r(BTt,"from_pretrained()"),BTt.forEach(t),gCr=r(PJ," to load the model weights."),PJ.forEach(t),hCr=i(hi),_2e=n(hi,"P",{});var PTt=s(_2e);pCr=r(PTt,"Examples:"),PTt.forEach(t),_Cr=i(hi),m(rL.$$.fragment,hi),hi.forEach(t),uCr=i(gi),Lo=n(gi,"DIV",{class:!0});var xa=s(Lo);m(tL.$$.fragment,xa),bCr=i(xa),u2e=n(xa,"P",{});var $Tt=s(u2e);FCr=r($Tt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),$Tt.forEach(t),vCr=i(xa),kn=n(xa,"P",{});var _C=s(kn);TCr=r(_C,"The model class to instantiate is selected based on the "),b2e=n(_C,"CODE",{});var ITt=s(b2e);MCr=r(ITt,"model_type"),ITt.forEach(t),ECr=r(_C,` property of the config object (either
passed as an argument or loaded from `),F2e=n(_C,"CODE",{});var qTt=s(F2e);CCr=r(qTt,"pretrained_model_name_or_path"),qTt.forEach(t),wCr=r(_C,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),v2e=n(_C,"CODE",{});var NTt=s(v2e);ACr=r(NTt,"pretrained_model_name_or_path"),NTt.forEach(t),yCr=r(_C,":"),_C.forEach(t),LCr=i(xa),ca=n(xa,"UL",{});var pi=s(ca);JM=n(pi,"LI",{});var dSe=s(JM);T2e=n(dSe,"STRONG",{});var jTt=s(T2e);xCr=r(jTt,"bart"),jTt.forEach(t),kCr=r(dSe," \u2014 "),cW=n(dSe,"A",{href:!0});var DTt=s(cW);SCr=r(DTt,"FlaxBartForCausalLM"),DTt.forEach(t),RCr=r(dSe," (BART model)"),dSe.forEach(t),BCr=i(pi),YM=n(pi,"LI",{});var cSe=s(YM);M2e=n(cSe,"STRONG",{});var GTt=s(M2e);PCr=r(GTt,"gpt2"),GTt.forEach(t),$Cr=r(cSe," \u2014 "),fW=n(cSe,"A",{href:!0});var OTt=s(fW);ICr=r(OTt,"FlaxGPT2LMHeadModel"),OTt.forEach(t),qCr=r(cSe," (OpenAI GPT-2 model)"),cSe.forEach(t),NCr=i(pi),KM=n(pi,"LI",{});var fSe=s(KM);E2e=n(fSe,"STRONG",{});var VTt=s(E2e);jCr=r(VTt,"gpt_neo"),VTt.forEach(t),DCr=r(fSe," \u2014 "),mW=n(fSe,"A",{href:!0});var XTt=s(mW);GCr=r(XTt,"FlaxGPTNeoForCausalLM"),XTt.forEach(t),OCr=r(fSe," (GPT Neo model)"),fSe.forEach(t),VCr=i(pi),ZM=n(pi,"LI",{});var mSe=s(ZM);C2e=n(mSe,"STRONG",{});var zTt=s(C2e);XCr=r(zTt,"gptj"),zTt.forEach(t),zCr=r(mSe," \u2014 "),gW=n(mSe,"A",{href:!0});var QTt=s(gW);QCr=r(QTt,"FlaxGPTJForCausalLM"),QTt.forEach(t),WCr=r(mSe," (GPT-J model)"),mSe.forEach(t),HCr=i(pi),e4=n(pi,"LI",{});var gSe=s(e4);w2e=n(gSe,"STRONG",{});var WTt=s(w2e);UCr=r(WTt,"xglm"),WTt.forEach(t),JCr=r(gSe," \u2014 "),hW=n(gSe,"A",{href:!0});var HTt=s(hW);YCr=r(HTt,"FlaxXGLMForCausalLM"),HTt.forEach(t),KCr=r(gSe," (XGLM model)"),gSe.forEach(t),pi.forEach(t),ZCr=i(xa),A2e=n(xa,"P",{});var UTt=s(A2e);e3r=r(UTt,"Examples:"),UTt.forEach(t),o3r=i(xa),m(aL.$$.fragment,xa),xa.forEach(t),gi.forEach(t),mPe=i(c),af=n(c,"H2",{class:!0});var EIe=s(af);o4=n(EIe,"A",{id:!0,class:!0,href:!0});var JTt=s(o4);y2e=n(JTt,"SPAN",{});var YTt=s(y2e);m(nL.$$.fragment,YTt),YTt.forEach(t),JTt.forEach(t),r3r=i(EIe),L2e=n(EIe,"SPAN",{});var KTt=s(L2e);t3r=r(KTt,"FlaxAutoModelForPreTraining"),KTt.forEach(t),EIe.forEach(t),gPe=i(c),Pr=n(c,"DIV",{class:!0});var _i=s(Pr);m(sL.$$.fragment,_i),a3r=i(_i),nf=n(_i,"P",{});var $J=s(nf);n3r=r($J,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),pW=n($J,"A",{href:!0});var ZTt=s(pW);s3r=r(ZTt,"from_pretrained()"),ZTt.forEach(t),l3r=r($J," class method or the "),_W=n($J,"A",{href:!0});var e9t=s(_W);i3r=r(e9t,"from_config()"),e9t.forEach(t),d3r=r($J,` class
method.`),$J.forEach(t),c3r=i(_i),lL=n(_i,"P",{});var CIe=s(lL);f3r=r(CIe,"This class cannot be instantiated directly using "),x2e=n(CIe,"CODE",{});var o9t=s(x2e);m3r=r(o9t,"__init__()"),o9t.forEach(t),g3r=r(CIe," (throws an error)."),CIe.forEach(t),h3r=i(_i),Lt=n(_i,"DIV",{class:!0});var ui=s(Lt);m(iL.$$.fragment,ui),p3r=i(ui),k2e=n(ui,"P",{});var r9t=s(k2e);_3r=r(r9t,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),r9t.forEach(t),u3r=i(ui),sf=n(ui,"P",{});var IJ=s(sf);b3r=r(IJ,`Note:
Loading a model from its configuration file does `),S2e=n(IJ,"STRONG",{});var t9t=s(S2e);F3r=r(t9t,"not"),t9t.forEach(t),v3r=r(IJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),uW=n(IJ,"A",{href:!0});var a9t=s(uW);T3r=r(a9t,"from_pretrained()"),a9t.forEach(t),M3r=r(IJ," to load the model weights."),IJ.forEach(t),E3r=i(ui),R2e=n(ui,"P",{});var n9t=s(R2e);C3r=r(n9t,"Examples:"),n9t.forEach(t),w3r=i(ui),m(dL.$$.fragment,ui),ui.forEach(t),A3r=i(_i),xo=n(_i,"DIV",{class:!0});var ka=s(xo);m(cL.$$.fragment,ka),y3r=i(ka),B2e=n(ka,"P",{});var s9t=s(B2e);L3r=r(s9t,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),s9t.forEach(t),x3r=i(ka),Sn=n(ka,"P",{});var uC=s(Sn);k3r=r(uC,"The model class to instantiate is selected based on the "),P2e=n(uC,"CODE",{});var l9t=s(P2e);S3r=r(l9t,"model_type"),l9t.forEach(t),R3r=r(uC,` property of the config object (either
passed as an argument or loaded from `),$2e=n(uC,"CODE",{});var i9t=s($2e);B3r=r(i9t,"pretrained_model_name_or_path"),i9t.forEach(t),P3r=r(uC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),I2e=n(uC,"CODE",{});var d9t=s(I2e);$3r=r(d9t,"pretrained_model_name_or_path"),d9t.forEach(t),I3r=r(uC,":"),uC.forEach(t),q3r=i(ka),me=n(ka,"UL",{});var _e=s(me);r4=n(_e,"LI",{});var hSe=s(r4);q2e=n(hSe,"STRONG",{});var c9t=s(q2e);N3r=r(c9t,"albert"),c9t.forEach(t),j3r=r(hSe," \u2014 "),bW=n(hSe,"A",{href:!0});var f9t=s(bW);D3r=r(f9t,"FlaxAlbertForPreTraining"),f9t.forEach(t),G3r=r(hSe," (ALBERT model)"),hSe.forEach(t),O3r=i(_e),t4=n(_e,"LI",{});var pSe=s(t4);N2e=n(pSe,"STRONG",{});var m9t=s(N2e);V3r=r(m9t,"bart"),m9t.forEach(t),X3r=r(pSe," \u2014 "),FW=n(pSe,"A",{href:!0});var g9t=s(FW);z3r=r(g9t,"FlaxBartForConditionalGeneration"),g9t.forEach(t),Q3r=r(pSe," (BART model)"),pSe.forEach(t),W3r=i(_e),a4=n(_e,"LI",{});var _Se=s(a4);j2e=n(_Se,"STRONG",{});var h9t=s(j2e);H3r=r(h9t,"bert"),h9t.forEach(t),U3r=r(_Se," \u2014 "),vW=n(_Se,"A",{href:!0});var p9t=s(vW);J3r=r(p9t,"FlaxBertForPreTraining"),p9t.forEach(t),Y3r=r(_Se," (BERT model)"),_Se.forEach(t),K3r=i(_e),n4=n(_e,"LI",{});var uSe=s(n4);D2e=n(uSe,"STRONG",{});var _9t=s(D2e);Z3r=r(_9t,"big_bird"),_9t.forEach(t),ewr=r(uSe," \u2014 "),TW=n(uSe,"A",{href:!0});var u9t=s(TW);owr=r(u9t,"FlaxBigBirdForPreTraining"),u9t.forEach(t),rwr=r(uSe," (BigBird model)"),uSe.forEach(t),twr=i(_e),s4=n(_e,"LI",{});var bSe=s(s4);G2e=n(bSe,"STRONG",{});var b9t=s(G2e);awr=r(b9t,"electra"),b9t.forEach(t),nwr=r(bSe," \u2014 "),MW=n(bSe,"A",{href:!0});var F9t=s(MW);swr=r(F9t,"FlaxElectraForPreTraining"),F9t.forEach(t),lwr=r(bSe," (ELECTRA model)"),bSe.forEach(t),iwr=i(_e),l4=n(_e,"LI",{});var FSe=s(l4);O2e=n(FSe,"STRONG",{});var v9t=s(O2e);dwr=r(v9t,"mbart"),v9t.forEach(t),cwr=r(FSe," \u2014 "),EW=n(FSe,"A",{href:!0});var T9t=s(EW);fwr=r(T9t,"FlaxMBartForConditionalGeneration"),T9t.forEach(t),mwr=r(FSe," (mBART model)"),FSe.forEach(t),gwr=i(_e),i4=n(_e,"LI",{});var vSe=s(i4);V2e=n(vSe,"STRONG",{});var M9t=s(V2e);hwr=r(M9t,"mt5"),M9t.forEach(t),pwr=r(vSe," \u2014 "),CW=n(vSe,"A",{href:!0});var E9t=s(CW);_wr=r(E9t,"FlaxMT5ForConditionalGeneration"),E9t.forEach(t),uwr=r(vSe," (mT5 model)"),vSe.forEach(t),bwr=i(_e),d4=n(_e,"LI",{});var TSe=s(d4);X2e=n(TSe,"STRONG",{});var C9t=s(X2e);Fwr=r(C9t,"roberta"),C9t.forEach(t),vwr=r(TSe," \u2014 "),wW=n(TSe,"A",{href:!0});var w9t=s(wW);Twr=r(w9t,"FlaxRobertaForMaskedLM"),w9t.forEach(t),Mwr=r(TSe," (RoBERTa model)"),TSe.forEach(t),Ewr=i(_e),c4=n(_e,"LI",{});var MSe=s(c4);z2e=n(MSe,"STRONG",{});var A9t=s(z2e);Cwr=r(A9t,"roformer"),A9t.forEach(t),wwr=r(MSe," \u2014 "),AW=n(MSe,"A",{href:!0});var y9t=s(AW);Awr=r(y9t,"FlaxRoFormerForMaskedLM"),y9t.forEach(t),ywr=r(MSe," (RoFormer model)"),MSe.forEach(t),Lwr=i(_e),f4=n(_e,"LI",{});var ESe=s(f4);Q2e=n(ESe,"STRONG",{});var L9t=s(Q2e);xwr=r(L9t,"t5"),L9t.forEach(t),kwr=r(ESe," \u2014 "),yW=n(ESe,"A",{href:!0});var x9t=s(yW);Swr=r(x9t,"FlaxT5ForConditionalGeneration"),x9t.forEach(t),Rwr=r(ESe," (T5 model)"),ESe.forEach(t),Bwr=i(_e),m4=n(_e,"LI",{});var CSe=s(m4);W2e=n(CSe,"STRONG",{});var k9t=s(W2e);Pwr=r(k9t,"wav2vec2"),k9t.forEach(t),$wr=r(CSe," \u2014 "),LW=n(CSe,"A",{href:!0});var S9t=s(LW);Iwr=r(S9t,"FlaxWav2Vec2ForPreTraining"),S9t.forEach(t),qwr=r(CSe," (Wav2Vec2 model)"),CSe.forEach(t),Nwr=i(_e),g4=n(_e,"LI",{});var wSe=s(g4);H2e=n(wSe,"STRONG",{});var R9t=s(H2e);jwr=r(R9t,"xlm-roberta"),R9t.forEach(t),Dwr=r(wSe," \u2014 "),xW=n(wSe,"A",{href:!0});var B9t=s(xW);Gwr=r(B9t,"FlaxXLMRobertaForMaskedLM"),B9t.forEach(t),Owr=r(wSe," (XLM-RoBERTa model)"),wSe.forEach(t),_e.forEach(t),Vwr=i(ka),U2e=n(ka,"P",{});var P9t=s(U2e);Xwr=r(P9t,"Examples:"),P9t.forEach(t),zwr=i(ka),m(fL.$$.fragment,ka),ka.forEach(t),_i.forEach(t),hPe=i(c),lf=n(c,"H2",{class:!0});var wIe=s(lf);h4=n(wIe,"A",{id:!0,class:!0,href:!0});var $9t=s(h4);J2e=n($9t,"SPAN",{});var I9t=s(J2e);m(mL.$$.fragment,I9t),I9t.forEach(t),$9t.forEach(t),Qwr=i(wIe),Y2e=n(wIe,"SPAN",{});var q9t=s(Y2e);Wwr=r(q9t,"FlaxAutoModelForMaskedLM"),q9t.forEach(t),wIe.forEach(t),pPe=i(c),$r=n(c,"DIV",{class:!0});var bi=s($r);m(gL.$$.fragment,bi),Hwr=i(bi),df=n(bi,"P",{});var qJ=s(df);Uwr=r(qJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),kW=n(qJ,"A",{href:!0});var N9t=s(kW);Jwr=r(N9t,"from_pretrained()"),N9t.forEach(t),Ywr=r(qJ," class method or the "),SW=n(qJ,"A",{href:!0});var j9t=s(SW);Kwr=r(j9t,"from_config()"),j9t.forEach(t),Zwr=r(qJ,` class
method.`),qJ.forEach(t),eAr=i(bi),hL=n(bi,"P",{});var AIe=s(hL);oAr=r(AIe,"This class cannot be instantiated directly using "),K2e=n(AIe,"CODE",{});var D9t=s(K2e);rAr=r(D9t,"__init__()"),D9t.forEach(t),tAr=r(AIe," (throws an error)."),AIe.forEach(t),aAr=i(bi),xt=n(bi,"DIV",{class:!0});var Fi=s(xt);m(pL.$$.fragment,Fi),nAr=i(Fi),Z2e=n(Fi,"P",{});var G9t=s(Z2e);sAr=r(G9t,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),G9t.forEach(t),lAr=i(Fi),cf=n(Fi,"P",{});var NJ=s(cf);iAr=r(NJ,`Note:
Loading a model from its configuration file does `),eFe=n(NJ,"STRONG",{});var O9t=s(eFe);dAr=r(O9t,"not"),O9t.forEach(t),cAr=r(NJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),RW=n(NJ,"A",{href:!0});var V9t=s(RW);fAr=r(V9t,"from_pretrained()"),V9t.forEach(t),mAr=r(NJ," to load the model weights."),NJ.forEach(t),gAr=i(Fi),oFe=n(Fi,"P",{});var X9t=s(oFe);hAr=r(X9t,"Examples:"),X9t.forEach(t),pAr=i(Fi),m(_L.$$.fragment,Fi),Fi.forEach(t),_Ar=i(bi),ko=n(bi,"DIV",{class:!0});var Sa=s(ko);m(uL.$$.fragment,Sa),uAr=i(Sa),rFe=n(Sa,"P",{});var z9t=s(rFe);bAr=r(z9t,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),z9t.forEach(t),FAr=i(Sa),Rn=n(Sa,"P",{});var bC=s(Rn);vAr=r(bC,"The model class to instantiate is selected based on the "),tFe=n(bC,"CODE",{});var Q9t=s(tFe);TAr=r(Q9t,"model_type"),Q9t.forEach(t),MAr=r(bC,` property of the config object (either
passed as an argument or loaded from `),aFe=n(bC,"CODE",{});var W9t=s(aFe);EAr=r(W9t,"pretrained_model_name_or_path"),W9t.forEach(t),CAr=r(bC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nFe=n(bC,"CODE",{});var H9t=s(nFe);wAr=r(H9t,"pretrained_model_name_or_path"),H9t.forEach(t),AAr=r(bC,":"),bC.forEach(t),yAr=i(Sa),Fe=n(Sa,"UL",{});var Ae=s(Fe);p4=n(Ae,"LI",{});var ASe=s(p4);sFe=n(ASe,"STRONG",{});var U9t=s(sFe);LAr=r(U9t,"albert"),U9t.forEach(t),xAr=r(ASe," \u2014 "),BW=n(ASe,"A",{href:!0});var J9t=s(BW);kAr=r(J9t,"FlaxAlbertForMaskedLM"),J9t.forEach(t),SAr=r(ASe," (ALBERT model)"),ASe.forEach(t),RAr=i(Ae),_4=n(Ae,"LI",{});var ySe=s(_4);lFe=n(ySe,"STRONG",{});var Y9t=s(lFe);BAr=r(Y9t,"bart"),Y9t.forEach(t),PAr=r(ySe," \u2014 "),PW=n(ySe,"A",{href:!0});var K9t=s(PW);$Ar=r(K9t,"FlaxBartForConditionalGeneration"),K9t.forEach(t),IAr=r(ySe," (BART model)"),ySe.forEach(t),qAr=i(Ae),u4=n(Ae,"LI",{});var LSe=s(u4);iFe=n(LSe,"STRONG",{});var Z9t=s(iFe);NAr=r(Z9t,"bert"),Z9t.forEach(t),jAr=r(LSe," \u2014 "),$W=n(LSe,"A",{href:!0});var eMt=s($W);DAr=r(eMt,"FlaxBertForMaskedLM"),eMt.forEach(t),GAr=r(LSe," (BERT model)"),LSe.forEach(t),OAr=i(Ae),b4=n(Ae,"LI",{});var xSe=s(b4);dFe=n(xSe,"STRONG",{});var oMt=s(dFe);VAr=r(oMt,"big_bird"),oMt.forEach(t),XAr=r(xSe," \u2014 "),IW=n(xSe,"A",{href:!0});var rMt=s(IW);zAr=r(rMt,"FlaxBigBirdForMaskedLM"),rMt.forEach(t),QAr=r(xSe," (BigBird model)"),xSe.forEach(t),WAr=i(Ae),F4=n(Ae,"LI",{});var kSe=s(F4);cFe=n(kSe,"STRONG",{});var tMt=s(cFe);HAr=r(tMt,"distilbert"),tMt.forEach(t),UAr=r(kSe," \u2014 "),qW=n(kSe,"A",{href:!0});var aMt=s(qW);JAr=r(aMt,"FlaxDistilBertForMaskedLM"),aMt.forEach(t),YAr=r(kSe," (DistilBERT model)"),kSe.forEach(t),KAr=i(Ae),v4=n(Ae,"LI",{});var SSe=s(v4);fFe=n(SSe,"STRONG",{});var nMt=s(fFe);ZAr=r(nMt,"electra"),nMt.forEach(t),e0r=r(SSe," \u2014 "),NW=n(SSe,"A",{href:!0});var sMt=s(NW);o0r=r(sMt,"FlaxElectraForMaskedLM"),sMt.forEach(t),r0r=r(SSe," (ELECTRA model)"),SSe.forEach(t),t0r=i(Ae),T4=n(Ae,"LI",{});var RSe=s(T4);mFe=n(RSe,"STRONG",{});var lMt=s(mFe);a0r=r(lMt,"mbart"),lMt.forEach(t),n0r=r(RSe," \u2014 "),jW=n(RSe,"A",{href:!0});var iMt=s(jW);s0r=r(iMt,"FlaxMBartForConditionalGeneration"),iMt.forEach(t),l0r=r(RSe," (mBART model)"),RSe.forEach(t),i0r=i(Ae),M4=n(Ae,"LI",{});var BSe=s(M4);gFe=n(BSe,"STRONG",{});var dMt=s(gFe);d0r=r(dMt,"roberta"),dMt.forEach(t),c0r=r(BSe," \u2014 "),DW=n(BSe,"A",{href:!0});var cMt=s(DW);f0r=r(cMt,"FlaxRobertaForMaskedLM"),cMt.forEach(t),m0r=r(BSe," (RoBERTa model)"),BSe.forEach(t),g0r=i(Ae),E4=n(Ae,"LI",{});var PSe=s(E4);hFe=n(PSe,"STRONG",{});var fMt=s(hFe);h0r=r(fMt,"roformer"),fMt.forEach(t),p0r=r(PSe," \u2014 "),GW=n(PSe,"A",{href:!0});var mMt=s(GW);_0r=r(mMt,"FlaxRoFormerForMaskedLM"),mMt.forEach(t),u0r=r(PSe," (RoFormer model)"),PSe.forEach(t),b0r=i(Ae),C4=n(Ae,"LI",{});var $Se=s(C4);pFe=n($Se,"STRONG",{});var gMt=s(pFe);F0r=r(gMt,"xlm-roberta"),gMt.forEach(t),v0r=r($Se," \u2014 "),OW=n($Se,"A",{href:!0});var hMt=s(OW);T0r=r(hMt,"FlaxXLMRobertaForMaskedLM"),hMt.forEach(t),M0r=r($Se," (XLM-RoBERTa model)"),$Se.forEach(t),Ae.forEach(t),E0r=i(Sa),_Fe=n(Sa,"P",{});var pMt=s(_Fe);C0r=r(pMt,"Examples:"),pMt.forEach(t),w0r=i(Sa),m(bL.$$.fragment,Sa),Sa.forEach(t),bi.forEach(t),_Pe=i(c),ff=n(c,"H2",{class:!0});var yIe=s(ff);w4=n(yIe,"A",{id:!0,class:!0,href:!0});var _Mt=s(w4);uFe=n(_Mt,"SPAN",{});var uMt=s(uFe);m(FL.$$.fragment,uMt),uMt.forEach(t),_Mt.forEach(t),A0r=i(yIe),bFe=n(yIe,"SPAN",{});var bMt=s(bFe);y0r=r(bMt,"FlaxAutoModelForSeq2SeqLM"),bMt.forEach(t),yIe.forEach(t),uPe=i(c),Ir=n(c,"DIV",{class:!0});var vi=s(Ir);m(vL.$$.fragment,vi),L0r=i(vi),mf=n(vi,"P",{});var jJ=s(mf);x0r=r(jJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),VW=n(jJ,"A",{href:!0});var FMt=s(VW);k0r=r(FMt,"from_pretrained()"),FMt.forEach(t),S0r=r(jJ," class method or the "),XW=n(jJ,"A",{href:!0});var vMt=s(XW);R0r=r(vMt,"from_config()"),vMt.forEach(t),B0r=r(jJ,` class
method.`),jJ.forEach(t),P0r=i(vi),TL=n(vi,"P",{});var LIe=s(TL);$0r=r(LIe,"This class cannot be instantiated directly using "),FFe=n(LIe,"CODE",{});var TMt=s(FFe);I0r=r(TMt,"__init__()"),TMt.forEach(t),q0r=r(LIe," (throws an error)."),LIe.forEach(t),N0r=i(vi),kt=n(vi,"DIV",{class:!0});var Ti=s(kt);m(ML.$$.fragment,Ti),j0r=i(Ti),vFe=n(Ti,"P",{});var MMt=s(vFe);D0r=r(MMt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),MMt.forEach(t),G0r=i(Ti),gf=n(Ti,"P",{});var DJ=s(gf);O0r=r(DJ,`Note:
Loading a model from its configuration file does `),TFe=n(DJ,"STRONG",{});var EMt=s(TFe);V0r=r(EMt,"not"),EMt.forEach(t),X0r=r(DJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),zW=n(DJ,"A",{href:!0});var CMt=s(zW);z0r=r(CMt,"from_pretrained()"),CMt.forEach(t),Q0r=r(DJ," to load the model weights."),DJ.forEach(t),W0r=i(Ti),MFe=n(Ti,"P",{});var wMt=s(MFe);H0r=r(wMt,"Examples:"),wMt.forEach(t),U0r=i(Ti),m(EL.$$.fragment,Ti),Ti.forEach(t),J0r=i(vi),So=n(vi,"DIV",{class:!0});var Ra=s(So);m(CL.$$.fragment,Ra),Y0r=i(Ra),EFe=n(Ra,"P",{});var AMt=s(EFe);K0r=r(AMt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),AMt.forEach(t),Z0r=i(Ra),Bn=n(Ra,"P",{});var FC=s(Bn);eyr=r(FC,"The model class to instantiate is selected based on the "),CFe=n(FC,"CODE",{});var yMt=s(CFe);oyr=r(yMt,"model_type"),yMt.forEach(t),ryr=r(FC,` property of the config object (either
passed as an argument or loaded from `),wFe=n(FC,"CODE",{});var LMt=s(wFe);tyr=r(LMt,"pretrained_model_name_or_path"),LMt.forEach(t),ayr=r(FC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),AFe=n(FC,"CODE",{});var xMt=s(AFe);nyr=r(xMt,"pretrained_model_name_or_path"),xMt.forEach(t),syr=r(FC,":"),FC.forEach(t),lyr=i(Ra),Ee=n(Ra,"UL",{});var so=s(Ee);A4=n(so,"LI",{});var ISe=s(A4);yFe=n(ISe,"STRONG",{});var kMt=s(yFe);iyr=r(kMt,"bart"),kMt.forEach(t),dyr=r(ISe," \u2014 "),QW=n(ISe,"A",{href:!0});var SMt=s(QW);cyr=r(SMt,"FlaxBartForConditionalGeneration"),SMt.forEach(t),fyr=r(ISe," (BART model)"),ISe.forEach(t),myr=i(so),y4=n(so,"LI",{});var qSe=s(y4);LFe=n(qSe,"STRONG",{});var RMt=s(LFe);gyr=r(RMt,"blenderbot"),RMt.forEach(t),hyr=r(qSe," \u2014 "),WW=n(qSe,"A",{href:!0});var BMt=s(WW);pyr=r(BMt,"FlaxBlenderbotForConditionalGeneration"),BMt.forEach(t),_yr=r(qSe," (Blenderbot model)"),qSe.forEach(t),uyr=i(so),L4=n(so,"LI",{});var NSe=s(L4);xFe=n(NSe,"STRONG",{});var PMt=s(xFe);byr=r(PMt,"blenderbot-small"),PMt.forEach(t),Fyr=r(NSe," \u2014 "),HW=n(NSe,"A",{href:!0});var $Mt=s(HW);vyr=r($Mt,"FlaxBlenderbotSmallForConditionalGeneration"),$Mt.forEach(t),Tyr=r(NSe," (BlenderbotSmall model)"),NSe.forEach(t),Myr=i(so),x4=n(so,"LI",{});var jSe=s(x4);kFe=n(jSe,"STRONG",{});var IMt=s(kFe);Eyr=r(IMt,"encoder-decoder"),IMt.forEach(t),Cyr=r(jSe," \u2014 "),UW=n(jSe,"A",{href:!0});var qMt=s(UW);wyr=r(qMt,"FlaxEncoderDecoderModel"),qMt.forEach(t),Ayr=r(jSe," (Encoder decoder model)"),jSe.forEach(t),yyr=i(so),k4=n(so,"LI",{});var DSe=s(k4);SFe=n(DSe,"STRONG",{});var NMt=s(SFe);Lyr=r(NMt,"marian"),NMt.forEach(t),xyr=r(DSe," \u2014 "),JW=n(DSe,"A",{href:!0});var jMt=s(JW);kyr=r(jMt,"FlaxMarianMTModel"),jMt.forEach(t),Syr=r(DSe," (Marian model)"),DSe.forEach(t),Ryr=i(so),S4=n(so,"LI",{});var GSe=s(S4);RFe=n(GSe,"STRONG",{});var DMt=s(RFe);Byr=r(DMt,"mbart"),DMt.forEach(t),Pyr=r(GSe," \u2014 "),YW=n(GSe,"A",{href:!0});var GMt=s(YW);$yr=r(GMt,"FlaxMBartForConditionalGeneration"),GMt.forEach(t),Iyr=r(GSe," (mBART model)"),GSe.forEach(t),qyr=i(so),R4=n(so,"LI",{});var OSe=s(R4);BFe=n(OSe,"STRONG",{});var OMt=s(BFe);Nyr=r(OMt,"mt5"),OMt.forEach(t),jyr=r(OSe," \u2014 "),KW=n(OSe,"A",{href:!0});var VMt=s(KW);Dyr=r(VMt,"FlaxMT5ForConditionalGeneration"),VMt.forEach(t),Gyr=r(OSe," (mT5 model)"),OSe.forEach(t),Oyr=i(so),B4=n(so,"LI",{});var VSe=s(B4);PFe=n(VSe,"STRONG",{});var XMt=s(PFe);Vyr=r(XMt,"pegasus"),XMt.forEach(t),Xyr=r(VSe," \u2014 "),ZW=n(VSe,"A",{href:!0});var zMt=s(ZW);zyr=r(zMt,"FlaxPegasusForConditionalGeneration"),zMt.forEach(t),Qyr=r(VSe," (Pegasus model)"),VSe.forEach(t),Wyr=i(so),P4=n(so,"LI",{});var XSe=s(P4);$Fe=n(XSe,"STRONG",{});var QMt=s($Fe);Hyr=r(QMt,"t5"),QMt.forEach(t),Uyr=r(XSe," \u2014 "),eH=n(XSe,"A",{href:!0});var WMt=s(eH);Jyr=r(WMt,"FlaxT5ForConditionalGeneration"),WMt.forEach(t),Yyr=r(XSe," (T5 model)"),XSe.forEach(t),so.forEach(t),Kyr=i(Ra),IFe=n(Ra,"P",{});var HMt=s(IFe);Zyr=r(HMt,"Examples:"),HMt.forEach(t),eLr=i(Ra),m(wL.$$.fragment,Ra),Ra.forEach(t),vi.forEach(t),bPe=i(c),hf=n(c,"H2",{class:!0});var xIe=s(hf);$4=n(xIe,"A",{id:!0,class:!0,href:!0});var UMt=s($4);qFe=n(UMt,"SPAN",{});var JMt=s(qFe);m(AL.$$.fragment,JMt),JMt.forEach(t),UMt.forEach(t),oLr=i(xIe),NFe=n(xIe,"SPAN",{});var YMt=s(NFe);rLr=r(YMt,"FlaxAutoModelForSequenceClassification"),YMt.forEach(t),xIe.forEach(t),FPe=i(c),qr=n(c,"DIV",{class:!0});var Mi=s(qr);m(yL.$$.fragment,Mi),tLr=i(Mi),pf=n(Mi,"P",{});var GJ=s(pf);aLr=r(GJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),oH=n(GJ,"A",{href:!0});var KMt=s(oH);nLr=r(KMt,"from_pretrained()"),KMt.forEach(t),sLr=r(GJ," class method or the "),rH=n(GJ,"A",{href:!0});var ZMt=s(rH);lLr=r(ZMt,"from_config()"),ZMt.forEach(t),iLr=r(GJ,` class
method.`),GJ.forEach(t),dLr=i(Mi),LL=n(Mi,"P",{});var kIe=s(LL);cLr=r(kIe,"This class cannot be instantiated directly using "),jFe=n(kIe,"CODE",{});var e4t=s(jFe);fLr=r(e4t,"__init__()"),e4t.forEach(t),mLr=r(kIe," (throws an error)."),kIe.forEach(t),gLr=i(Mi),St=n(Mi,"DIV",{class:!0});var Ei=s(St);m(xL.$$.fragment,Ei),hLr=i(Ei),DFe=n(Ei,"P",{});var o4t=s(DFe);pLr=r(o4t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),o4t.forEach(t),_Lr=i(Ei),_f=n(Ei,"P",{});var OJ=s(_f);uLr=r(OJ,`Note:
Loading a model from its configuration file does `),GFe=n(OJ,"STRONG",{});var r4t=s(GFe);bLr=r(r4t,"not"),r4t.forEach(t),FLr=r(OJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),tH=n(OJ,"A",{href:!0});var t4t=s(tH);vLr=r(t4t,"from_pretrained()"),t4t.forEach(t),TLr=r(OJ," to load the model weights."),OJ.forEach(t),MLr=i(Ei),OFe=n(Ei,"P",{});var a4t=s(OFe);ELr=r(a4t,"Examples:"),a4t.forEach(t),CLr=i(Ei),m(kL.$$.fragment,Ei),Ei.forEach(t),wLr=i(Mi),Ro=n(Mi,"DIV",{class:!0});var Ba=s(Ro);m(SL.$$.fragment,Ba),ALr=i(Ba),VFe=n(Ba,"P",{});var n4t=s(VFe);yLr=r(n4t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),n4t.forEach(t),LLr=i(Ba),Pn=n(Ba,"P",{});var vC=s(Pn);xLr=r(vC,"The model class to instantiate is selected based on the "),XFe=n(vC,"CODE",{});var s4t=s(XFe);kLr=r(s4t,"model_type"),s4t.forEach(t),SLr=r(vC,` property of the config object (either
passed as an argument or loaded from `),zFe=n(vC,"CODE",{});var l4t=s(zFe);RLr=r(l4t,"pretrained_model_name_or_path"),l4t.forEach(t),BLr=r(vC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),QFe=n(vC,"CODE",{});var i4t=s(QFe);PLr=r(i4t,"pretrained_model_name_or_path"),i4t.forEach(t),$Lr=r(vC,":"),vC.forEach(t),ILr=i(Ba),ve=n(Ba,"UL",{});var ye=s(ve);I4=n(ye,"LI",{});var zSe=s(I4);WFe=n(zSe,"STRONG",{});var d4t=s(WFe);qLr=r(d4t,"albert"),d4t.forEach(t),NLr=r(zSe," \u2014 "),aH=n(zSe,"A",{href:!0});var c4t=s(aH);jLr=r(c4t,"FlaxAlbertForSequenceClassification"),c4t.forEach(t),DLr=r(zSe," (ALBERT model)"),zSe.forEach(t),GLr=i(ye),q4=n(ye,"LI",{});var QSe=s(q4);HFe=n(QSe,"STRONG",{});var f4t=s(HFe);OLr=r(f4t,"bart"),f4t.forEach(t),VLr=r(QSe," \u2014 "),nH=n(QSe,"A",{href:!0});var m4t=s(nH);XLr=r(m4t,"FlaxBartForSequenceClassification"),m4t.forEach(t),zLr=r(QSe," (BART model)"),QSe.forEach(t),QLr=i(ye),N4=n(ye,"LI",{});var WSe=s(N4);UFe=n(WSe,"STRONG",{});var g4t=s(UFe);WLr=r(g4t,"bert"),g4t.forEach(t),HLr=r(WSe," \u2014 "),sH=n(WSe,"A",{href:!0});var h4t=s(sH);ULr=r(h4t,"FlaxBertForSequenceClassification"),h4t.forEach(t),JLr=r(WSe," (BERT model)"),WSe.forEach(t),YLr=i(ye),j4=n(ye,"LI",{});var HSe=s(j4);JFe=n(HSe,"STRONG",{});var p4t=s(JFe);KLr=r(p4t,"big_bird"),p4t.forEach(t),ZLr=r(HSe," \u2014 "),lH=n(HSe,"A",{href:!0});var _4t=s(lH);e8r=r(_4t,"FlaxBigBirdForSequenceClassification"),_4t.forEach(t),o8r=r(HSe," (BigBird model)"),HSe.forEach(t),r8r=i(ye),D4=n(ye,"LI",{});var USe=s(D4);YFe=n(USe,"STRONG",{});var u4t=s(YFe);t8r=r(u4t,"distilbert"),u4t.forEach(t),a8r=r(USe," \u2014 "),iH=n(USe,"A",{href:!0});var b4t=s(iH);n8r=r(b4t,"FlaxDistilBertForSequenceClassification"),b4t.forEach(t),s8r=r(USe," (DistilBERT model)"),USe.forEach(t),l8r=i(ye),G4=n(ye,"LI",{});var JSe=s(G4);KFe=n(JSe,"STRONG",{});var F4t=s(KFe);i8r=r(F4t,"electra"),F4t.forEach(t),d8r=r(JSe," \u2014 "),dH=n(JSe,"A",{href:!0});var v4t=s(dH);c8r=r(v4t,"FlaxElectraForSequenceClassification"),v4t.forEach(t),f8r=r(JSe," (ELECTRA model)"),JSe.forEach(t),m8r=i(ye),O4=n(ye,"LI",{});var YSe=s(O4);ZFe=n(YSe,"STRONG",{});var T4t=s(ZFe);g8r=r(T4t,"mbart"),T4t.forEach(t),h8r=r(YSe," \u2014 "),cH=n(YSe,"A",{href:!0});var M4t=s(cH);p8r=r(M4t,"FlaxMBartForSequenceClassification"),M4t.forEach(t),_8r=r(YSe," (mBART model)"),YSe.forEach(t),u8r=i(ye),V4=n(ye,"LI",{});var KSe=s(V4);eve=n(KSe,"STRONG",{});var E4t=s(eve);b8r=r(E4t,"roberta"),E4t.forEach(t),F8r=r(KSe," \u2014 "),fH=n(KSe,"A",{href:!0});var C4t=s(fH);v8r=r(C4t,"FlaxRobertaForSequenceClassification"),C4t.forEach(t),T8r=r(KSe," (RoBERTa model)"),KSe.forEach(t),M8r=i(ye),X4=n(ye,"LI",{});var ZSe=s(X4);ove=n(ZSe,"STRONG",{});var w4t=s(ove);E8r=r(w4t,"roformer"),w4t.forEach(t),C8r=r(ZSe," \u2014 "),mH=n(ZSe,"A",{href:!0});var A4t=s(mH);w8r=r(A4t,"FlaxRoFormerForSequenceClassification"),A4t.forEach(t),A8r=r(ZSe," (RoFormer model)"),ZSe.forEach(t),y8r=i(ye),z4=n(ye,"LI",{});var eRe=s(z4);rve=n(eRe,"STRONG",{});var y4t=s(rve);L8r=r(y4t,"xlm-roberta"),y4t.forEach(t),x8r=r(eRe," \u2014 "),gH=n(eRe,"A",{href:!0});var L4t=s(gH);k8r=r(L4t,"FlaxXLMRobertaForSequenceClassification"),L4t.forEach(t),S8r=r(eRe," (XLM-RoBERTa model)"),eRe.forEach(t),ye.forEach(t),R8r=i(Ba),tve=n(Ba,"P",{});var x4t=s(tve);B8r=r(x4t,"Examples:"),x4t.forEach(t),P8r=i(Ba),m(RL.$$.fragment,Ba),Ba.forEach(t),Mi.forEach(t),vPe=i(c),uf=n(c,"H2",{class:!0});var SIe=s(uf);Q4=n(SIe,"A",{id:!0,class:!0,href:!0});var k4t=s(Q4);ave=n(k4t,"SPAN",{});var S4t=s(ave);m(BL.$$.fragment,S4t),S4t.forEach(t),k4t.forEach(t),$8r=i(SIe),nve=n(SIe,"SPAN",{});var R4t=s(nve);I8r=r(R4t,"FlaxAutoModelForQuestionAnswering"),R4t.forEach(t),SIe.forEach(t),TPe=i(c),Nr=n(c,"DIV",{class:!0});var Ci=s(Nr);m(PL.$$.fragment,Ci),q8r=i(Ci),bf=n(Ci,"P",{});var VJ=s(bf);N8r=r(VJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),hH=n(VJ,"A",{href:!0});var B4t=s(hH);j8r=r(B4t,"from_pretrained()"),B4t.forEach(t),D8r=r(VJ," class method or the "),pH=n(VJ,"A",{href:!0});var P4t=s(pH);G8r=r(P4t,"from_config()"),P4t.forEach(t),O8r=r(VJ,` class
method.`),VJ.forEach(t),V8r=i(Ci),$L=n(Ci,"P",{});var RIe=s($L);X8r=r(RIe,"This class cannot be instantiated directly using "),sve=n(RIe,"CODE",{});var $4t=s(sve);z8r=r($4t,"__init__()"),$4t.forEach(t),Q8r=r(RIe," (throws an error)."),RIe.forEach(t),W8r=i(Ci),Rt=n(Ci,"DIV",{class:!0});var wi=s(Rt);m(IL.$$.fragment,wi),H8r=i(wi),lve=n(wi,"P",{});var I4t=s(lve);U8r=r(I4t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),I4t.forEach(t),J8r=i(wi),Ff=n(wi,"P",{});var XJ=s(Ff);Y8r=r(XJ,`Note:
Loading a model from its configuration file does `),ive=n(XJ,"STRONG",{});var q4t=s(ive);K8r=r(q4t,"not"),q4t.forEach(t),Z8r=r(XJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),_H=n(XJ,"A",{href:!0});var N4t=s(_H);e7r=r(N4t,"from_pretrained()"),N4t.forEach(t),o7r=r(XJ," to load the model weights."),XJ.forEach(t),r7r=i(wi),dve=n(wi,"P",{});var j4t=s(dve);t7r=r(j4t,"Examples:"),j4t.forEach(t),a7r=i(wi),m(qL.$$.fragment,wi),wi.forEach(t),n7r=i(Ci),Bo=n(Ci,"DIV",{class:!0});var Pa=s(Bo);m(NL.$$.fragment,Pa),s7r=i(Pa),cve=n(Pa,"P",{});var D4t=s(cve);l7r=r(D4t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),D4t.forEach(t),i7r=i(Pa),$n=n(Pa,"P",{});var TC=s($n);d7r=r(TC,"The model class to instantiate is selected based on the "),fve=n(TC,"CODE",{});var G4t=s(fve);c7r=r(G4t,"model_type"),G4t.forEach(t),f7r=r(TC,` property of the config object (either
passed as an argument or loaded from `),mve=n(TC,"CODE",{});var O4t=s(mve);m7r=r(O4t,"pretrained_model_name_or_path"),O4t.forEach(t),g7r=r(TC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gve=n(TC,"CODE",{});var V4t=s(gve);h7r=r(V4t,"pretrained_model_name_or_path"),V4t.forEach(t),p7r=r(TC,":"),TC.forEach(t),_7r=i(Pa),Te=n(Pa,"UL",{});var Le=s(Te);W4=n(Le,"LI",{});var oRe=s(W4);hve=n(oRe,"STRONG",{});var X4t=s(hve);u7r=r(X4t,"albert"),X4t.forEach(t),b7r=r(oRe," \u2014 "),uH=n(oRe,"A",{href:!0});var z4t=s(uH);F7r=r(z4t,"FlaxAlbertForQuestionAnswering"),z4t.forEach(t),v7r=r(oRe," (ALBERT model)"),oRe.forEach(t),T7r=i(Le),H4=n(Le,"LI",{});var rRe=s(H4);pve=n(rRe,"STRONG",{});var Q4t=s(pve);M7r=r(Q4t,"bart"),Q4t.forEach(t),E7r=r(rRe," \u2014 "),bH=n(rRe,"A",{href:!0});var W4t=s(bH);C7r=r(W4t,"FlaxBartForQuestionAnswering"),W4t.forEach(t),w7r=r(rRe," (BART model)"),rRe.forEach(t),A7r=i(Le),U4=n(Le,"LI",{});var tRe=s(U4);_ve=n(tRe,"STRONG",{});var H4t=s(_ve);y7r=r(H4t,"bert"),H4t.forEach(t),L7r=r(tRe," \u2014 "),FH=n(tRe,"A",{href:!0});var U4t=s(FH);x7r=r(U4t,"FlaxBertForQuestionAnswering"),U4t.forEach(t),k7r=r(tRe," (BERT model)"),tRe.forEach(t),S7r=i(Le),J4=n(Le,"LI",{});var aRe=s(J4);uve=n(aRe,"STRONG",{});var J4t=s(uve);R7r=r(J4t,"big_bird"),J4t.forEach(t),B7r=r(aRe," \u2014 "),vH=n(aRe,"A",{href:!0});var Y4t=s(vH);P7r=r(Y4t,"FlaxBigBirdForQuestionAnswering"),Y4t.forEach(t),$7r=r(aRe," (BigBird model)"),aRe.forEach(t),I7r=i(Le),Y4=n(Le,"LI",{});var nRe=s(Y4);bve=n(nRe,"STRONG",{});var K4t=s(bve);q7r=r(K4t,"distilbert"),K4t.forEach(t),N7r=r(nRe," \u2014 "),TH=n(nRe,"A",{href:!0});var Z4t=s(TH);j7r=r(Z4t,"FlaxDistilBertForQuestionAnswering"),Z4t.forEach(t),D7r=r(nRe," (DistilBERT model)"),nRe.forEach(t),G7r=i(Le),K4=n(Le,"LI",{});var sRe=s(K4);Fve=n(sRe,"STRONG",{});var eEt=s(Fve);O7r=r(eEt,"electra"),eEt.forEach(t),V7r=r(sRe," \u2014 "),MH=n(sRe,"A",{href:!0});var oEt=s(MH);X7r=r(oEt,"FlaxElectraForQuestionAnswering"),oEt.forEach(t),z7r=r(sRe," (ELECTRA model)"),sRe.forEach(t),Q7r=i(Le),Z4=n(Le,"LI",{});var lRe=s(Z4);vve=n(lRe,"STRONG",{});var rEt=s(vve);W7r=r(rEt,"mbart"),rEt.forEach(t),H7r=r(lRe," \u2014 "),EH=n(lRe,"A",{href:!0});var tEt=s(EH);U7r=r(tEt,"FlaxMBartForQuestionAnswering"),tEt.forEach(t),J7r=r(lRe," (mBART model)"),lRe.forEach(t),Y7r=i(Le),eE=n(Le,"LI",{});var iRe=s(eE);Tve=n(iRe,"STRONG",{});var aEt=s(Tve);K7r=r(aEt,"roberta"),aEt.forEach(t),Z7r=r(iRe," \u2014 "),CH=n(iRe,"A",{href:!0});var nEt=s(CH);exr=r(nEt,"FlaxRobertaForQuestionAnswering"),nEt.forEach(t),oxr=r(iRe," (RoBERTa model)"),iRe.forEach(t),rxr=i(Le),oE=n(Le,"LI",{});var dRe=s(oE);Mve=n(dRe,"STRONG",{});var sEt=s(Mve);txr=r(sEt,"roformer"),sEt.forEach(t),axr=r(dRe," \u2014 "),wH=n(dRe,"A",{href:!0});var lEt=s(wH);nxr=r(lEt,"FlaxRoFormerForQuestionAnswering"),lEt.forEach(t),sxr=r(dRe," (RoFormer model)"),dRe.forEach(t),lxr=i(Le),rE=n(Le,"LI",{});var cRe=s(rE);Eve=n(cRe,"STRONG",{});var iEt=s(Eve);ixr=r(iEt,"xlm-roberta"),iEt.forEach(t),dxr=r(cRe," \u2014 "),AH=n(cRe,"A",{href:!0});var dEt=s(AH);cxr=r(dEt,"FlaxXLMRobertaForQuestionAnswering"),dEt.forEach(t),fxr=r(cRe," (XLM-RoBERTa model)"),cRe.forEach(t),Le.forEach(t),mxr=i(Pa),Cve=n(Pa,"P",{});var cEt=s(Cve);gxr=r(cEt,"Examples:"),cEt.forEach(t),hxr=i(Pa),m(jL.$$.fragment,Pa),Pa.forEach(t),Ci.forEach(t),MPe=i(c),vf=n(c,"H2",{class:!0});var BIe=s(vf);tE=n(BIe,"A",{id:!0,class:!0,href:!0});var fEt=s(tE);wve=n(fEt,"SPAN",{});var mEt=s(wve);m(DL.$$.fragment,mEt),mEt.forEach(t),fEt.forEach(t),pxr=i(BIe),Ave=n(BIe,"SPAN",{});var gEt=s(Ave);_xr=r(gEt,"FlaxAutoModelForTokenClassification"),gEt.forEach(t),BIe.forEach(t),EPe=i(c),jr=n(c,"DIV",{class:!0});var Ai=s(jr);m(GL.$$.fragment,Ai),uxr=i(Ai),Tf=n(Ai,"P",{});var zJ=s(Tf);bxr=r(zJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),yH=n(zJ,"A",{href:!0});var hEt=s(yH);Fxr=r(hEt,"from_pretrained()"),hEt.forEach(t),vxr=r(zJ," class method or the "),LH=n(zJ,"A",{href:!0});var pEt=s(LH);Txr=r(pEt,"from_config()"),pEt.forEach(t),Mxr=r(zJ,` class
method.`),zJ.forEach(t),Exr=i(Ai),OL=n(Ai,"P",{});var PIe=s(OL);Cxr=r(PIe,"This class cannot be instantiated directly using "),yve=n(PIe,"CODE",{});var _Et=s(yve);wxr=r(_Et,"__init__()"),_Et.forEach(t),Axr=r(PIe," (throws an error)."),PIe.forEach(t),yxr=i(Ai),Bt=n(Ai,"DIV",{class:!0});var yi=s(Bt);m(VL.$$.fragment,yi),Lxr=i(yi),Lve=n(yi,"P",{});var uEt=s(Lve);xxr=r(uEt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),uEt.forEach(t),kxr=i(yi),Mf=n(yi,"P",{});var QJ=s(Mf);Sxr=r(QJ,`Note:
Loading a model from its configuration file does `),xve=n(QJ,"STRONG",{});var bEt=s(xve);Rxr=r(bEt,"not"),bEt.forEach(t),Bxr=r(QJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),xH=n(QJ,"A",{href:!0});var FEt=s(xH);Pxr=r(FEt,"from_pretrained()"),FEt.forEach(t),$xr=r(QJ," to load the model weights."),QJ.forEach(t),Ixr=i(yi),kve=n(yi,"P",{});var vEt=s(kve);qxr=r(vEt,"Examples:"),vEt.forEach(t),Nxr=i(yi),m(XL.$$.fragment,yi),yi.forEach(t),jxr=i(Ai),Po=n(Ai,"DIV",{class:!0});var $a=s(Po);m(zL.$$.fragment,$a),Dxr=i($a),Sve=n($a,"P",{});var TEt=s(Sve);Gxr=r(TEt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),TEt.forEach(t),Oxr=i($a),In=n($a,"P",{});var MC=s(In);Vxr=r(MC,"The model class to instantiate is selected based on the "),Rve=n(MC,"CODE",{});var MEt=s(Rve);Xxr=r(MEt,"model_type"),MEt.forEach(t),zxr=r(MC,` property of the config object (either
passed as an argument or loaded from `),Bve=n(MC,"CODE",{});var EEt=s(Bve);Qxr=r(EEt,"pretrained_model_name_or_path"),EEt.forEach(t),Wxr=r(MC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Pve=n(MC,"CODE",{});var CEt=s(Pve);Hxr=r(CEt,"pretrained_model_name_or_path"),CEt.forEach(t),Uxr=r(MC,":"),MC.forEach(t),Jxr=i($a),Be=n($a,"UL",{});var Oo=s(Be);aE=n(Oo,"LI",{});var fRe=s(aE);$ve=n(fRe,"STRONG",{});var wEt=s($ve);Yxr=r(wEt,"albert"),wEt.forEach(t),Kxr=r(fRe," \u2014 "),kH=n(fRe,"A",{href:!0});var AEt=s(kH);Zxr=r(AEt,"FlaxAlbertForTokenClassification"),AEt.forEach(t),ekr=r(fRe," (ALBERT model)"),fRe.forEach(t),okr=i(Oo),nE=n(Oo,"LI",{});var mRe=s(nE);Ive=n(mRe,"STRONG",{});var yEt=s(Ive);rkr=r(yEt,"bert"),yEt.forEach(t),tkr=r(mRe," \u2014 "),SH=n(mRe,"A",{href:!0});var LEt=s(SH);akr=r(LEt,"FlaxBertForTokenClassification"),LEt.forEach(t),nkr=r(mRe," (BERT model)"),mRe.forEach(t),skr=i(Oo),sE=n(Oo,"LI",{});var gRe=s(sE);qve=n(gRe,"STRONG",{});var xEt=s(qve);lkr=r(xEt,"big_bird"),xEt.forEach(t),ikr=r(gRe," \u2014 "),RH=n(gRe,"A",{href:!0});var kEt=s(RH);dkr=r(kEt,"FlaxBigBirdForTokenClassification"),kEt.forEach(t),ckr=r(gRe," (BigBird model)"),gRe.forEach(t),fkr=i(Oo),lE=n(Oo,"LI",{});var hRe=s(lE);Nve=n(hRe,"STRONG",{});var SEt=s(Nve);mkr=r(SEt,"distilbert"),SEt.forEach(t),gkr=r(hRe," \u2014 "),BH=n(hRe,"A",{href:!0});var REt=s(BH);hkr=r(REt,"FlaxDistilBertForTokenClassification"),REt.forEach(t),pkr=r(hRe," (DistilBERT model)"),hRe.forEach(t),_kr=i(Oo),iE=n(Oo,"LI",{});var pRe=s(iE);jve=n(pRe,"STRONG",{});var BEt=s(jve);ukr=r(BEt,"electra"),BEt.forEach(t),bkr=r(pRe," \u2014 "),PH=n(pRe,"A",{href:!0});var PEt=s(PH);Fkr=r(PEt,"FlaxElectraForTokenClassification"),PEt.forEach(t),vkr=r(pRe," (ELECTRA model)"),pRe.forEach(t),Tkr=i(Oo),dE=n(Oo,"LI",{});var _Re=s(dE);Dve=n(_Re,"STRONG",{});var $Et=s(Dve);Mkr=r($Et,"roberta"),$Et.forEach(t),Ekr=r(_Re," \u2014 "),$H=n(_Re,"A",{href:!0});var IEt=s($H);Ckr=r(IEt,"FlaxRobertaForTokenClassification"),IEt.forEach(t),wkr=r(_Re," (RoBERTa model)"),_Re.forEach(t),Akr=i(Oo),cE=n(Oo,"LI",{});var uRe=s(cE);Gve=n(uRe,"STRONG",{});var qEt=s(Gve);ykr=r(qEt,"roformer"),qEt.forEach(t),Lkr=r(uRe," \u2014 "),IH=n(uRe,"A",{href:!0});var NEt=s(IH);xkr=r(NEt,"FlaxRoFormerForTokenClassification"),NEt.forEach(t),kkr=r(uRe," (RoFormer model)"),uRe.forEach(t),Skr=i(Oo),fE=n(Oo,"LI",{});var bRe=s(fE);Ove=n(bRe,"STRONG",{});var jEt=s(Ove);Rkr=r(jEt,"xlm-roberta"),jEt.forEach(t),Bkr=r(bRe," \u2014 "),qH=n(bRe,"A",{href:!0});var DEt=s(qH);Pkr=r(DEt,"FlaxXLMRobertaForTokenClassification"),DEt.forEach(t),$kr=r(bRe," (XLM-RoBERTa model)"),bRe.forEach(t),Oo.forEach(t),Ikr=i($a),Vve=n($a,"P",{});var GEt=s(Vve);qkr=r(GEt,"Examples:"),GEt.forEach(t),Nkr=i($a),m(QL.$$.fragment,$a),$a.forEach(t),Ai.forEach(t),CPe=i(c),Ef=n(c,"H2",{class:!0});var $Ie=s(Ef);mE=n($Ie,"A",{id:!0,class:!0,href:!0});var OEt=s(mE);Xve=n(OEt,"SPAN",{});var VEt=s(Xve);m(WL.$$.fragment,VEt),VEt.forEach(t),OEt.forEach(t),jkr=i($Ie),zve=n($Ie,"SPAN",{});var XEt=s(zve);Dkr=r(XEt,"FlaxAutoModelForMultipleChoice"),XEt.forEach(t),$Ie.forEach(t),wPe=i(c),Dr=n(c,"DIV",{class:!0});var Li=s(Dr);m(HL.$$.fragment,Li),Gkr=i(Li),Cf=n(Li,"P",{});var WJ=s(Cf);Okr=r(WJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),NH=n(WJ,"A",{href:!0});var zEt=s(NH);Vkr=r(zEt,"from_pretrained()"),zEt.forEach(t),Xkr=r(WJ," class method or the "),jH=n(WJ,"A",{href:!0});var QEt=s(jH);zkr=r(QEt,"from_config()"),QEt.forEach(t),Qkr=r(WJ,` class
method.`),WJ.forEach(t),Wkr=i(Li),UL=n(Li,"P",{});var IIe=s(UL);Hkr=r(IIe,"This class cannot be instantiated directly using "),Qve=n(IIe,"CODE",{});var WEt=s(Qve);Ukr=r(WEt,"__init__()"),WEt.forEach(t),Jkr=r(IIe," (throws an error)."),IIe.forEach(t),Ykr=i(Li),Pt=n(Li,"DIV",{class:!0});var xi=s(Pt);m(JL.$$.fragment,xi),Kkr=i(xi),Wve=n(xi,"P",{});var HEt=s(Wve);Zkr=r(HEt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),HEt.forEach(t),eSr=i(xi),wf=n(xi,"P",{});var HJ=s(wf);oSr=r(HJ,`Note:
Loading a model from its configuration file does `),Hve=n(HJ,"STRONG",{});var UEt=s(Hve);rSr=r(UEt,"not"),UEt.forEach(t),tSr=r(HJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),DH=n(HJ,"A",{href:!0});var JEt=s(DH);aSr=r(JEt,"from_pretrained()"),JEt.forEach(t),nSr=r(HJ," to load the model weights."),HJ.forEach(t),sSr=i(xi),Uve=n(xi,"P",{});var YEt=s(Uve);lSr=r(YEt,"Examples:"),YEt.forEach(t),iSr=i(xi),m(YL.$$.fragment,xi),xi.forEach(t),dSr=i(Li),$o=n(Li,"DIV",{class:!0});var Ia=s($o);m(KL.$$.fragment,Ia),cSr=i(Ia),Jve=n(Ia,"P",{});var KEt=s(Jve);fSr=r(KEt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),KEt.forEach(t),mSr=i(Ia),qn=n(Ia,"P",{});var EC=s(qn);gSr=r(EC,"The model class to instantiate is selected based on the "),Yve=n(EC,"CODE",{});var ZEt=s(Yve);hSr=r(ZEt,"model_type"),ZEt.forEach(t),pSr=r(EC,` property of the config object (either
passed as an argument or loaded from `),Kve=n(EC,"CODE",{});var eCt=s(Kve);_Sr=r(eCt,"pretrained_model_name_or_path"),eCt.forEach(t),uSr=r(EC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zve=n(EC,"CODE",{});var oCt=s(Zve);bSr=r(oCt,"pretrained_model_name_or_path"),oCt.forEach(t),FSr=r(EC,":"),EC.forEach(t),vSr=i(Ia),Pe=n(Ia,"UL",{});var Vo=s(Pe);gE=n(Vo,"LI",{});var FRe=s(gE);eTe=n(FRe,"STRONG",{});var rCt=s(eTe);TSr=r(rCt,"albert"),rCt.forEach(t),MSr=r(FRe," \u2014 "),GH=n(FRe,"A",{href:!0});var tCt=s(GH);ESr=r(tCt,"FlaxAlbertForMultipleChoice"),tCt.forEach(t),CSr=r(FRe," (ALBERT model)"),FRe.forEach(t),wSr=i(Vo),hE=n(Vo,"LI",{});var vRe=s(hE);oTe=n(vRe,"STRONG",{});var aCt=s(oTe);ASr=r(aCt,"bert"),aCt.forEach(t),ySr=r(vRe," \u2014 "),OH=n(vRe,"A",{href:!0});var nCt=s(OH);LSr=r(nCt,"FlaxBertForMultipleChoice"),nCt.forEach(t),xSr=r(vRe," (BERT model)"),vRe.forEach(t),kSr=i(Vo),pE=n(Vo,"LI",{});var TRe=s(pE);rTe=n(TRe,"STRONG",{});var sCt=s(rTe);SSr=r(sCt,"big_bird"),sCt.forEach(t),RSr=r(TRe," \u2014 "),VH=n(TRe,"A",{href:!0});var lCt=s(VH);BSr=r(lCt,"FlaxBigBirdForMultipleChoice"),lCt.forEach(t),PSr=r(TRe," (BigBird model)"),TRe.forEach(t),$Sr=i(Vo),_E=n(Vo,"LI",{});var MRe=s(_E);tTe=n(MRe,"STRONG",{});var iCt=s(tTe);ISr=r(iCt,"distilbert"),iCt.forEach(t),qSr=r(MRe," \u2014 "),XH=n(MRe,"A",{href:!0});var dCt=s(XH);NSr=r(dCt,"FlaxDistilBertForMultipleChoice"),dCt.forEach(t),jSr=r(MRe," (DistilBERT model)"),MRe.forEach(t),DSr=i(Vo),uE=n(Vo,"LI",{});var ERe=s(uE);aTe=n(ERe,"STRONG",{});var cCt=s(aTe);GSr=r(cCt,"electra"),cCt.forEach(t),OSr=r(ERe," \u2014 "),zH=n(ERe,"A",{href:!0});var fCt=s(zH);VSr=r(fCt,"FlaxElectraForMultipleChoice"),fCt.forEach(t),XSr=r(ERe," (ELECTRA model)"),ERe.forEach(t),zSr=i(Vo),bE=n(Vo,"LI",{});var CRe=s(bE);nTe=n(CRe,"STRONG",{});var mCt=s(nTe);QSr=r(mCt,"roberta"),mCt.forEach(t),WSr=r(CRe," \u2014 "),QH=n(CRe,"A",{href:!0});var gCt=s(QH);HSr=r(gCt,"FlaxRobertaForMultipleChoice"),gCt.forEach(t),USr=r(CRe," (RoBERTa model)"),CRe.forEach(t),JSr=i(Vo),FE=n(Vo,"LI",{});var wRe=s(FE);sTe=n(wRe,"STRONG",{});var hCt=s(sTe);YSr=r(hCt,"roformer"),hCt.forEach(t),KSr=r(wRe," \u2014 "),WH=n(wRe,"A",{href:!0});var pCt=s(WH);ZSr=r(pCt,"FlaxRoFormerForMultipleChoice"),pCt.forEach(t),eRr=r(wRe," (RoFormer model)"),wRe.forEach(t),oRr=i(Vo),vE=n(Vo,"LI",{});var ARe=s(vE);lTe=n(ARe,"STRONG",{});var _Ct=s(lTe);rRr=r(_Ct,"xlm-roberta"),_Ct.forEach(t),tRr=r(ARe," \u2014 "),HH=n(ARe,"A",{href:!0});var uCt=s(HH);aRr=r(uCt,"FlaxXLMRobertaForMultipleChoice"),uCt.forEach(t),nRr=r(ARe," (XLM-RoBERTa model)"),ARe.forEach(t),Vo.forEach(t),sRr=i(Ia),iTe=n(Ia,"P",{});var bCt=s(iTe);lRr=r(bCt,"Examples:"),bCt.forEach(t),iRr=i(Ia),m(ZL.$$.fragment,Ia),Ia.forEach(t),Li.forEach(t),APe=i(c),Af=n(c,"H2",{class:!0});var qIe=s(Af);TE=n(qIe,"A",{id:!0,class:!0,href:!0});var FCt=s(TE);dTe=n(FCt,"SPAN",{});var vCt=s(dTe);m(e8.$$.fragment,vCt),vCt.forEach(t),FCt.forEach(t),dRr=i(qIe),cTe=n(qIe,"SPAN",{});var TCt=s(cTe);cRr=r(TCt,"FlaxAutoModelForNextSentencePrediction"),TCt.forEach(t),qIe.forEach(t),yPe=i(c),Gr=n(c,"DIV",{class:!0});var ki=s(Gr);m(o8.$$.fragment,ki),fRr=i(ki),yf=n(ki,"P",{});var UJ=s(yf);mRr=r(UJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),UH=n(UJ,"A",{href:!0});var MCt=s(UH);gRr=r(MCt,"from_pretrained()"),MCt.forEach(t),hRr=r(UJ," class method or the "),JH=n(UJ,"A",{href:!0});var ECt=s(JH);pRr=r(ECt,"from_config()"),ECt.forEach(t),_Rr=r(UJ,` class
method.`),UJ.forEach(t),uRr=i(ki),r8=n(ki,"P",{});var NIe=s(r8);bRr=r(NIe,"This class cannot be instantiated directly using "),fTe=n(NIe,"CODE",{});var CCt=s(fTe);FRr=r(CCt,"__init__()"),CCt.forEach(t),vRr=r(NIe," (throws an error)."),NIe.forEach(t),TRr=i(ki),$t=n(ki,"DIV",{class:!0});var Si=s($t);m(t8.$$.fragment,Si),MRr=i(Si),mTe=n(Si,"P",{});var wCt=s(mTe);ERr=r(wCt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),wCt.forEach(t),CRr=i(Si),Lf=n(Si,"P",{});var JJ=s(Lf);wRr=r(JJ,`Note:
Loading a model from its configuration file does `),gTe=n(JJ,"STRONG",{});var ACt=s(gTe);ARr=r(ACt,"not"),ACt.forEach(t),yRr=r(JJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),YH=n(JJ,"A",{href:!0});var yCt=s(YH);LRr=r(yCt,"from_pretrained()"),yCt.forEach(t),xRr=r(JJ," to load the model weights."),JJ.forEach(t),kRr=i(Si),hTe=n(Si,"P",{});var LCt=s(hTe);SRr=r(LCt,"Examples:"),LCt.forEach(t),RRr=i(Si),m(a8.$$.fragment,Si),Si.forEach(t),BRr=i(ki),Io=n(ki,"DIV",{class:!0});var qa=s(Io);m(n8.$$.fragment,qa),PRr=i(qa),pTe=n(qa,"P",{});var xCt=s(pTe);$Rr=r(xCt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),xCt.forEach(t),IRr=i(qa),Nn=n(qa,"P",{});var CC=s(Nn);qRr=r(CC,"The model class to instantiate is selected based on the "),_Te=n(CC,"CODE",{});var kCt=s(_Te);NRr=r(kCt,"model_type"),kCt.forEach(t),jRr=r(CC,` property of the config object (either
passed as an argument or loaded from `),uTe=n(CC,"CODE",{});var SCt=s(uTe);DRr=r(SCt,"pretrained_model_name_or_path"),SCt.forEach(t),GRr=r(CC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bTe=n(CC,"CODE",{});var RCt=s(bTe);ORr=r(RCt,"pretrained_model_name_or_path"),RCt.forEach(t),VRr=r(CC,":"),CC.forEach(t),XRr=i(qa),FTe=n(qa,"UL",{});var BCt=s(FTe);ME=n(BCt,"LI",{});var yRe=s(ME);vTe=n(yRe,"STRONG",{});var PCt=s(vTe);zRr=r(PCt,"bert"),PCt.forEach(t),QRr=r(yRe," \u2014 "),KH=n(yRe,"A",{href:!0});var $Ct=s(KH);WRr=r($Ct,"FlaxBertForNextSentencePrediction"),$Ct.forEach(t),HRr=r(yRe," (BERT model)"),yRe.forEach(t),BCt.forEach(t),URr=i(qa),TTe=n(qa,"P",{});var ICt=s(TTe);JRr=r(ICt,"Examples:"),ICt.forEach(t),YRr=i(qa),m(s8.$$.fragment,qa),qa.forEach(t),ki.forEach(t),LPe=i(c),xf=n(c,"H2",{class:!0});var jIe=s(xf);EE=n(jIe,"A",{id:!0,class:!0,href:!0});var qCt=s(EE);MTe=n(qCt,"SPAN",{});var NCt=s(MTe);m(l8.$$.fragment,NCt),NCt.forEach(t),qCt.forEach(t),KRr=i(jIe),ETe=n(jIe,"SPAN",{});var jCt=s(ETe);ZRr=r(jCt,"FlaxAutoModelForImageClassification"),jCt.forEach(t),jIe.forEach(t),xPe=i(c),Or=n(c,"DIV",{class:!0});var Ri=s(Or);m(i8.$$.fragment,Ri),eBr=i(Ri),kf=n(Ri,"P",{});var YJ=s(kf);oBr=r(YJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),ZH=n(YJ,"A",{href:!0});var DCt=s(ZH);rBr=r(DCt,"from_pretrained()"),DCt.forEach(t),tBr=r(YJ," class method or the "),eU=n(YJ,"A",{href:!0});var GCt=s(eU);aBr=r(GCt,"from_config()"),GCt.forEach(t),nBr=r(YJ,` class
method.`),YJ.forEach(t),sBr=i(Ri),d8=n(Ri,"P",{});var DIe=s(d8);lBr=r(DIe,"This class cannot be instantiated directly using "),CTe=n(DIe,"CODE",{});var OCt=s(CTe);iBr=r(OCt,"__init__()"),OCt.forEach(t),dBr=r(DIe," (throws an error)."),DIe.forEach(t),cBr=i(Ri),It=n(Ri,"DIV",{class:!0});var Bi=s(It);m(c8.$$.fragment,Bi),fBr=i(Bi),wTe=n(Bi,"P",{});var VCt=s(wTe);mBr=r(VCt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),VCt.forEach(t),gBr=i(Bi),Sf=n(Bi,"P",{});var KJ=s(Sf);hBr=r(KJ,`Note:
Loading a model from its configuration file does `),ATe=n(KJ,"STRONG",{});var XCt=s(ATe);pBr=r(XCt,"not"),XCt.forEach(t),_Br=r(KJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),oU=n(KJ,"A",{href:!0});var zCt=s(oU);uBr=r(zCt,"from_pretrained()"),zCt.forEach(t),bBr=r(KJ," to load the model weights."),KJ.forEach(t),FBr=i(Bi),yTe=n(Bi,"P",{});var QCt=s(yTe);vBr=r(QCt,"Examples:"),QCt.forEach(t),TBr=i(Bi),m(f8.$$.fragment,Bi),Bi.forEach(t),MBr=i(Ri),qo=n(Ri,"DIV",{class:!0});var Na=s(qo);m(m8.$$.fragment,Na),EBr=i(Na),LTe=n(Na,"P",{});var WCt=s(LTe);CBr=r(WCt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),WCt.forEach(t),wBr=i(Na),jn=n(Na,"P",{});var wC=s(jn);ABr=r(wC,"The model class to instantiate is selected based on the "),xTe=n(wC,"CODE",{});var HCt=s(xTe);yBr=r(HCt,"model_type"),HCt.forEach(t),LBr=r(wC,` property of the config object (either
passed as an argument or loaded from `),kTe=n(wC,"CODE",{});var UCt=s(kTe);xBr=r(UCt,"pretrained_model_name_or_path"),UCt.forEach(t),kBr=r(wC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),STe=n(wC,"CODE",{});var JCt=s(STe);SBr=r(JCt,"pretrained_model_name_or_path"),JCt.forEach(t),RBr=r(wC,":"),wC.forEach(t),BBr=i(Na),g8=n(Na,"UL",{});var GIe=s(g8);CE=n(GIe,"LI",{});var LRe=s(CE);RTe=n(LRe,"STRONG",{});var YCt=s(RTe);PBr=r(YCt,"beit"),YCt.forEach(t),$Br=r(LRe," \u2014 "),rU=n(LRe,"A",{href:!0});var KCt=s(rU);IBr=r(KCt,"FlaxBeitForImageClassification"),KCt.forEach(t),qBr=r(LRe," (BEiT model)"),LRe.forEach(t),NBr=i(GIe),wE=n(GIe,"LI",{});var xRe=s(wE);BTe=n(xRe,"STRONG",{});var ZCt=s(BTe);jBr=r(ZCt,"vit"),ZCt.forEach(t),DBr=r(xRe," \u2014 "),tU=n(xRe,"A",{href:!0});var e3t=s(tU);GBr=r(e3t,"FlaxViTForImageClassification"),e3t.forEach(t),OBr=r(xRe," (ViT model)"),xRe.forEach(t),GIe.forEach(t),VBr=i(Na),PTe=n(Na,"P",{});var o3t=s(PTe);XBr=r(o3t,"Examples:"),o3t.forEach(t),zBr=i(Na),m(h8.$$.fragment,Na),Na.forEach(t),Ri.forEach(t),kPe=i(c),Rf=n(c,"H2",{class:!0});var OIe=s(Rf);AE=n(OIe,"A",{id:!0,class:!0,href:!0});var r3t=s(AE);$Te=n(r3t,"SPAN",{});var t3t=s($Te);m(p8.$$.fragment,t3t),t3t.forEach(t),r3t.forEach(t),QBr=i(OIe),ITe=n(OIe,"SPAN",{});var a3t=s(ITe);WBr=r(a3t,"FlaxAutoModelForVision2Seq"),a3t.forEach(t),OIe.forEach(t),SPe=i(c),Vr=n(c,"DIV",{class:!0});var Pi=s(Vr);m(_8.$$.fragment,Pi),HBr=i(Pi),Bf=n(Pi,"P",{});var ZJ=s(Bf);UBr=r(ZJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),aU=n(ZJ,"A",{href:!0});var n3t=s(aU);JBr=r(n3t,"from_pretrained()"),n3t.forEach(t),YBr=r(ZJ," class method or the "),nU=n(ZJ,"A",{href:!0});var s3t=s(nU);KBr=r(s3t,"from_config()"),s3t.forEach(t),ZBr=r(ZJ,` class
method.`),ZJ.forEach(t),ePr=i(Pi),u8=n(Pi,"P",{});var VIe=s(u8);oPr=r(VIe,"This class cannot be instantiated directly using "),qTe=n(VIe,"CODE",{});var l3t=s(qTe);rPr=r(l3t,"__init__()"),l3t.forEach(t),tPr=r(VIe," (throws an error)."),VIe.forEach(t),aPr=i(Pi),qt=n(Pi,"DIV",{class:!0});var $i=s(qt);m(b8.$$.fragment,$i),nPr=i($i),NTe=n($i,"P",{});var i3t=s(NTe);sPr=r(i3t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),i3t.forEach(t),lPr=i($i),Pf=n($i,"P",{});var eY=s(Pf);iPr=r(eY,`Note:
Loading a model from its configuration file does `),jTe=n(eY,"STRONG",{});var d3t=s(jTe);dPr=r(d3t,"not"),d3t.forEach(t),cPr=r(eY,` load the model weights. It only affects the
model\u2019s configuration. Use `),sU=n(eY,"A",{href:!0});var c3t=s(sU);fPr=r(c3t,"from_pretrained()"),c3t.forEach(t),mPr=r(eY," to load the model weights."),eY.forEach(t),gPr=i($i),DTe=n($i,"P",{});var f3t=s(DTe);hPr=r(f3t,"Examples:"),f3t.forEach(t),pPr=i($i),m(F8.$$.fragment,$i),$i.forEach(t),_Pr=i(Pi),No=n(Pi,"DIV",{class:!0});var ja=s(No);m(v8.$$.fragment,ja),uPr=i(ja),GTe=n(ja,"P",{});var m3t=s(GTe);bPr=r(m3t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),m3t.forEach(t),FPr=i(ja),Dn=n(ja,"P",{});var AC=s(Dn);vPr=r(AC,"The model class to instantiate is selected based on the "),OTe=n(AC,"CODE",{});var g3t=s(OTe);TPr=r(g3t,"model_type"),g3t.forEach(t),MPr=r(AC,` property of the config object (either
passed as an argument or loaded from `),VTe=n(AC,"CODE",{});var h3t=s(VTe);EPr=r(h3t,"pretrained_model_name_or_path"),h3t.forEach(t),CPr=r(AC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),XTe=n(AC,"CODE",{});var p3t=s(XTe);wPr=r(p3t,"pretrained_model_name_or_path"),p3t.forEach(t),APr=r(AC,":"),AC.forEach(t),yPr=i(ja),zTe=n(ja,"UL",{});var _3t=s(zTe);yE=n(_3t,"LI",{});var kRe=s(yE);QTe=n(kRe,"STRONG",{});var u3t=s(QTe);LPr=r(u3t,"vision-encoder-decoder"),u3t.forEach(t),xPr=r(kRe," \u2014 "),lU=n(kRe,"A",{href:!0});var b3t=s(lU);kPr=r(b3t,"FlaxVisionEncoderDecoderModel"),b3t.forEach(t),SPr=r(kRe," (Vision Encoder decoder model)"),kRe.forEach(t),_3t.forEach(t),RPr=i(ja),WTe=n(ja,"P",{});var F3t=s(WTe);BPr=r(F3t,"Examples:"),F3t.forEach(t),PPr=i(ja),m(T8.$$.fragment,ja),ja.forEach(t),Pi.forEach(t),this.h()},h(){d(Z,"name","hf:doc:metadata"),d(Z,"content",JSON.stringify(x3t)),d(Ce,"id","auto-classes"),d(Ce,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Ce,"href","#auto-classes"),d(de,"class","relative group"),d(Gn,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.AutoConfig"),d(Vn,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.AutoModel"),d(Xn,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.AutoTokenizer"),d(Oi,"href","/docs/transformers/pr_16659/en/model_doc/bert#transformers.BertModel"),d(Gf,"id","extending-the-auto-classes"),d(Gf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Gf,"href","#extending-the-auto-classes"),d(Vi,"class","relative group"),d(Vf,"id","transformers.AutoConfig"),d(Vf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Vf,"href","#transformers.AutoConfig"),d(Xi,"class","relative group"),d(w7,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),d(A7,"href","/docs/transformers/pr_16659/en/model_doc/albert#transformers.AlbertConfig"),d(y7,"href","/docs/transformers/pr_16659/en/model_doc/bart#transformers.BartConfig"),d(L7,"href","/docs/transformers/pr_16659/en/model_doc/beit#transformers.BeitConfig"),d(x7,"href","/docs/transformers/pr_16659/en/model_doc/bert#transformers.BertConfig"),d(k7,"href","/docs/transformers/pr_16659/en/model_doc/bert-generation#transformers.BertGenerationConfig"),d(S7,"href","/docs/transformers/pr_16659/en/model_doc/big_bird#transformers.BigBirdConfig"),d(R7,"href","/docs/transformers/pr_16659/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),d(B7,"href","/docs/transformers/pr_16659/en/model_doc/blenderbot#transformers.BlenderbotConfig"),d(P7,"href","/docs/transformers/pr_16659/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),d($7,"href","/docs/transformers/pr_16659/en/model_doc/camembert#transformers.CamembertConfig"),d(I7,"href","/docs/transformers/pr_16659/en/model_doc/canine#transformers.CanineConfig"),d(q7,"href","/docs/transformers/pr_16659/en/model_doc/clip#transformers.CLIPConfig"),d(N7,"href","/docs/transformers/pr_16659/en/model_doc/convbert#transformers.ConvBertConfig"),d(j7,"href","/docs/transformers/pr_16659/en/model_doc/convnext#transformers.ConvNextConfig"),d(D7,"href","/docs/transformers/pr_16659/en/model_doc/ctrl#transformers.CTRLConfig"),d(G7,"href","/docs/transformers/pr_16659/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),d(O7,"href","/docs/transformers/pr_16659/en/model_doc/data2vec#transformers.Data2VecTextConfig"),d(V7,"href","/docs/transformers/pr_16659/en/model_doc/deberta#transformers.DebertaConfig"),d(X7,"href","/docs/transformers/pr_16659/en/model_doc/deberta-v2#transformers.DebertaV2Config"),d(z7,"href","/docs/transformers/pr_16659/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),d(Q7,"href","/docs/transformers/pr_16659/en/model_doc/deit#transformers.DeiTConfig"),d(W7,"href","/docs/transformers/pr_16659/en/model_doc/detr#transformers.DetrConfig"),d(H7,"href","/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.DistilBertConfig"),d(U7,"href","/docs/transformers/pr_16659/en/model_doc/dpr#transformers.DPRConfig"),d(J7,"href","/docs/transformers/pr_16659/en/model_doc/dpt#transformers.DPTConfig"),d(Y7,"href","/docs/transformers/pr_16659/en/model_doc/electra#transformers.ElectraConfig"),d(K7,"href","/docs/transformers/pr_16659/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),d(Z7,"href","/docs/transformers/pr_16659/en/model_doc/flaubert#transformers.FlaubertConfig"),d(ex,"href","/docs/transformers/pr_16659/en/model_doc/fnet#transformers.FNetConfig"),d(ox,"href","/docs/transformers/pr_16659/en/model_doc/fsmt#transformers.FSMTConfig"),d(rx,"href","/docs/transformers/pr_16659/en/model_doc/funnel#transformers.FunnelConfig"),d(tx,"href","/docs/transformers/pr_16659/en/model_doc/glpn#transformers.GLPNConfig"),d(ax,"href","/docs/transformers/pr_16659/en/model_doc/gpt2#transformers.GPT2Config"),d(nx,"href","/docs/transformers/pr_16659/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),d(sx,"href","/docs/transformers/pr_16659/en/model_doc/gptj#transformers.GPTJConfig"),d(lx,"href","/docs/transformers/pr_16659/en/model_doc/hubert#transformers.HubertConfig"),d(ix,"href","/docs/transformers/pr_16659/en/model_doc/ibert#transformers.IBertConfig"),d(dx,"href","/docs/transformers/pr_16659/en/model_doc/imagegpt#transformers.ImageGPTConfig"),d(cx,"href","/docs/transformers/pr_16659/en/model_doc/layoutlm#transformers.LayoutLMConfig"),d(fx,"href","/docs/transformers/pr_16659/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),d(mx,"href","/docs/transformers/pr_16659/en/model_doc/led#transformers.LEDConfig"),d(gx,"href","/docs/transformers/pr_16659/en/model_doc/longformer#transformers.LongformerConfig"),d(hx,"href","/docs/transformers/pr_16659/en/model_doc/luke#transformers.LukeConfig"),d(px,"href","/docs/transformers/pr_16659/en/model_doc/lxmert#transformers.LxmertConfig"),d(_x,"href","/docs/transformers/pr_16659/en/model_doc/m2m_100#transformers.M2M100Config"),d(ux,"href","/docs/transformers/pr_16659/en/model_doc/marian#transformers.MarianConfig"),d(bx,"href","/docs/transformers/pr_16659/en/model_doc/maskformer#transformers.MaskFormerConfig"),d(Fx,"href","/docs/transformers/pr_16659/en/model_doc/mbart#transformers.MBartConfig"),d(vx,"href","/docs/transformers/pr_16659/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),d(Tx,"href","/docs/transformers/pr_16659/en/model_doc/mobilebert#transformers.MobileBertConfig"),d(Mx,"href","/docs/transformers/pr_16659/en/model_doc/mpnet#transformers.MPNetConfig"),d(Ex,"href","/docs/transformers/pr_16659/en/model_doc/mt5#transformers.MT5Config"),d(Cx,"href","/docs/transformers/pr_16659/en/model_doc/nystromformer#transformers.NystromformerConfig"),d(wx,"href","/docs/transformers/pr_16659/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),d(Ax,"href","/docs/transformers/pr_16659/en/model_doc/pegasus#transformers.PegasusConfig"),d(yx,"href","/docs/transformers/pr_16659/en/model_doc/perceiver#transformers.PerceiverConfig"),d(Lx,"href","/docs/transformers/pr_16659/en/model_doc/plbart#transformers.PLBartConfig"),d(xx,"href","/docs/transformers/pr_16659/en/model_doc/poolformer#transformers.PoolFormerConfig"),d(kx,"href","/docs/transformers/pr_16659/en/model_doc/prophetnet#transformers.ProphetNetConfig"),d(Sx,"href","/docs/transformers/pr_16659/en/model_doc/qdqbert#transformers.QDQBertConfig"),d(Rx,"href","/docs/transformers/pr_16659/en/model_doc/rag#transformers.RagConfig"),d(Bx,"href","/docs/transformers/pr_16659/en/model_doc/realm#transformers.RealmConfig"),d(Px,"href","/docs/transformers/pr_16659/en/model_doc/reformer#transformers.ReformerConfig"),d($x,"href","/docs/transformers/pr_16659/en/model_doc/regnet#transformers.RegNetConfig"),d(Ix,"href","/docs/transformers/pr_16659/en/model_doc/rembert#transformers.RemBertConfig"),d(qx,"href","/docs/transformers/pr_16659/en/model_doc/resnet#transformers.ResNetConfig"),d(Nx,"href","/docs/transformers/pr_16659/en/model_doc/retribert#transformers.RetriBertConfig"),d(jx,"href","/docs/transformers/pr_16659/en/model_doc/roberta#transformers.RobertaConfig"),d(Dx,"href","/docs/transformers/pr_16659/en/model_doc/roformer#transformers.RoFormerConfig"),d(Gx,"href","/docs/transformers/pr_16659/en/model_doc/segformer#transformers.SegformerConfig"),d(Ox,"href","/docs/transformers/pr_16659/en/model_doc/sew#transformers.SEWConfig"),d(Vx,"href","/docs/transformers/pr_16659/en/model_doc/sew-d#transformers.SEWDConfig"),d(Xx,"href","/docs/transformers/pr_16659/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),d(zx,"href","/docs/transformers/pr_16659/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),d(Qx,"href","/docs/transformers/pr_16659/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),d(Wx,"href","/docs/transformers/pr_16659/en/model_doc/splinter#transformers.SplinterConfig"),d(Hx,"href","/docs/transformers/pr_16659/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),d(Ux,"href","/docs/transformers/pr_16659/en/model_doc/swin#transformers.SwinConfig"),d(Jx,"href","/docs/transformers/pr_16659/en/model_doc/t5#transformers.T5Config"),d(Yx,"href","/docs/transformers/pr_16659/en/model_doc/tapas#transformers.TapasConfig"),d(Kx,"href","/docs/transformers/pr_16659/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),d(Zx,"href","/docs/transformers/pr_16659/en/model_doc/trocr#transformers.TrOCRConfig"),d(ek,"href","/docs/transformers/pr_16659/en/model_doc/unispeech#transformers.UniSpeechConfig"),d(ok,"href","/docs/transformers/pr_16659/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),d(rk,"href","/docs/transformers/pr_16659/en/model_doc/van#transformers.VanConfig"),d(tk,"href","/docs/transformers/pr_16659/en/model_doc/vilt#transformers.ViltConfig"),d(ak,"href","/docs/transformers/pr_16659/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),d(nk,"href","/docs/transformers/pr_16659/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),d(sk,"href","/docs/transformers/pr_16659/en/model_doc/visual_bert#transformers.VisualBertConfig"),d(lk,"href","/docs/transformers/pr_16659/en/model_doc/vit#transformers.ViTConfig"),d(ik,"href","/docs/transformers/pr_16659/en/model_doc/vit_mae#transformers.ViTMAEConfig"),d(dk,"href","/docs/transformers/pr_16659/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),d(ck,"href","/docs/transformers/pr_16659/en/model_doc/wavlm#transformers.WavLMConfig"),d(fk,"href","/docs/transformers/pr_16659/en/model_doc/xglm#transformers.XGLMConfig"),d(mk,"href","/docs/transformers/pr_16659/en/model_doc/xlm#transformers.XLMConfig"),d(gk,"href","/docs/transformers/pr_16659/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),d(hk,"href","/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),d(pk,"href","/docs/transformers/pr_16659/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),d(_k,"href","/docs/transformers/pr_16659/en/model_doc/xlnet#transformers.XLNetConfig"),d(uk,"href","/docs/transformers/pr_16659/en/model_doc/yoso#transformers.YosoConfig"),d(mo,"class","docstring"),d(qg,"class","docstring"),d(Qo,"class","docstring"),d(Ng,"id","transformers.AutoTokenizer"),d(Ng,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Ng,"href","#transformers.AutoTokenizer"),d(Qi,"class","relative group"),d(bk,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),d(Fk,"href","/docs/transformers/pr_16659/en/model_doc/albert#transformers.AlbertTokenizer"),d(vk,"href","/docs/transformers/pr_16659/en/model_doc/albert#transformers.AlbertTokenizerFast"),d(Tk,"href","/docs/transformers/pr_16659/en/model_doc/bart#transformers.BartTokenizer"),d(Mk,"href","/docs/transformers/pr_16659/en/model_doc/bart#transformers.BartTokenizerFast"),d(Ek,"href","/docs/transformers/pr_16659/en/model_doc/barthez#transformers.BarthezTokenizer"),d(Ck,"href","/docs/transformers/pr_16659/en/model_doc/barthez#transformers.BarthezTokenizerFast"),d(wk,"href","/docs/transformers/pr_16659/en/model_doc/bartpho#transformers.BartphoTokenizer"),d(Ak,"href","/docs/transformers/pr_16659/en/model_doc/bert#transformers.BertTokenizer"),d(yk,"href","/docs/transformers/pr_16659/en/model_doc/bert#transformers.BertTokenizerFast"),d(Lk,"href","/docs/transformers/pr_16659/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),d(xk,"href","/docs/transformers/pr_16659/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),d(kk,"href","/docs/transformers/pr_16659/en/model_doc/bertweet#transformers.BertweetTokenizer"),d(Sk,"href","/docs/transformers/pr_16659/en/model_doc/big_bird#transformers.BigBirdTokenizer"),d(Rk,"href","/docs/transformers/pr_16659/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),d(Bk,"href","/docs/transformers/pr_16659/en/model_doc/pegasus#transformers.PegasusTokenizer"),d(Pk,"href","/docs/transformers/pr_16659/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),d($k,"href","/docs/transformers/pr_16659/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),d(Ik,"href","/docs/transformers/pr_16659/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),d(qk,"href","/docs/transformers/pr_16659/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),d(Nk,"href","/docs/transformers/pr_16659/en/model_doc/byt5#transformers.ByT5Tokenizer"),d(jk,"href","/docs/transformers/pr_16659/en/model_doc/camembert#transformers.CamembertTokenizer"),d(Dk,"href","/docs/transformers/pr_16659/en/model_doc/camembert#transformers.CamembertTokenizerFast"),d(Gk,"href","/docs/transformers/pr_16659/en/model_doc/canine#transformers.CanineTokenizer"),d(Ok,"href","/docs/transformers/pr_16659/en/model_doc/clip#transformers.CLIPTokenizer"),d(Vk,"href","/docs/transformers/pr_16659/en/model_doc/clip#transformers.CLIPTokenizerFast"),d(Xk,"href","/docs/transformers/pr_16659/en/model_doc/convbert#transformers.ConvBertTokenizer"),d(zk,"href","/docs/transformers/pr_16659/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),d(Qk,"href","/docs/transformers/pr_16659/en/model_doc/cpm#transformers.CpmTokenizer"),d(Wk,"href","/docs/transformers/pr_16659/en/model_doc/ctrl#transformers.CTRLTokenizer"),d(Hk,"href","/docs/transformers/pr_16659/en/model_doc/deberta#transformers.DebertaTokenizer"),d(Uk,"href","/docs/transformers/pr_16659/en/model_doc/deberta#transformers.DebertaTokenizerFast"),d(Jk,"href","/docs/transformers/pr_16659/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),d(Yk,"href","/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.DistilBertTokenizer"),d(Kk,"href","/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),d(Zk,"href","/docs/transformers/pr_16659/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),d(eS,"href","/docs/transformers/pr_16659/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),d(oS,"href","/docs/transformers/pr_16659/en/model_doc/electra#transformers.ElectraTokenizer"),d(rS,"href","/docs/transformers/pr_16659/en/model_doc/electra#transformers.ElectraTokenizerFast"),d(tS,"href","/docs/transformers/pr_16659/en/model_doc/flaubert#transformers.FlaubertTokenizer"),d(aS,"href","/docs/transformers/pr_16659/en/model_doc/fnet#transformers.FNetTokenizer"),d(nS,"href","/docs/transformers/pr_16659/en/model_doc/fnet#transformers.FNetTokenizerFast"),d(sS,"href","/docs/transformers/pr_16659/en/model_doc/fsmt#transformers.FSMTTokenizer"),d(lS,"href","/docs/transformers/pr_16659/en/model_doc/funnel#transformers.FunnelTokenizer"),d(iS,"href","/docs/transformers/pr_16659/en/model_doc/funnel#transformers.FunnelTokenizerFast"),d(dS,"href","/docs/transformers/pr_16659/en/model_doc/gpt2#transformers.GPT2Tokenizer"),d(cS,"href","/docs/transformers/pr_16659/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),d(fS,"href","/docs/transformers/pr_16659/en/model_doc/gpt2#transformers.GPT2Tokenizer"),d(mS,"href","/docs/transformers/pr_16659/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),d(gS,"href","/docs/transformers/pr_16659/en/model_doc/herbert#transformers.HerbertTokenizer"),d(hS,"href","/docs/transformers/pr_16659/en/model_doc/herbert#transformers.HerbertTokenizerFast"),d(pS,"href","/docs/transformers/pr_16659/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),d(_S,"href","/docs/transformers/pr_16659/en/model_doc/roberta#transformers.RobertaTokenizer"),d(uS,"href","/docs/transformers/pr_16659/en/model_doc/roberta#transformers.RobertaTokenizerFast"),d(bS,"href","/docs/transformers/pr_16659/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),d(FS,"href","/docs/transformers/pr_16659/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),d(vS,"href","/docs/transformers/pr_16659/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),d(TS,"href","/docs/transformers/pr_16659/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),d(MS,"href","/docs/transformers/pr_16659/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),d(ES,"href","/docs/transformers/pr_16659/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),d(CS,"href","/docs/transformers/pr_16659/en/model_doc/led#transformers.LEDTokenizer"),d(wS,"href","/docs/transformers/pr_16659/en/model_doc/led#transformers.LEDTokenizerFast"),d(AS,"href","/docs/transformers/pr_16659/en/model_doc/longformer#transformers.LongformerTokenizer"),d(yS,"href","/docs/transformers/pr_16659/en/model_doc/longformer#transformers.LongformerTokenizerFast"),d(LS,"href","/docs/transformers/pr_16659/en/model_doc/luke#transformers.LukeTokenizer"),d(xS,"href","/docs/transformers/pr_16659/en/model_doc/lxmert#transformers.LxmertTokenizer"),d(kS,"href","/docs/transformers/pr_16659/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),d(SS,"href","/docs/transformers/pr_16659/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),d(RS,"href","/docs/transformers/pr_16659/en/model_doc/marian#transformers.MarianTokenizer"),d(BS,"href","/docs/transformers/pr_16659/en/model_doc/mbart#transformers.MBartTokenizer"),d(PS,"href","/docs/transformers/pr_16659/en/model_doc/mbart#transformers.MBartTokenizerFast"),d($S,"href","/docs/transformers/pr_16659/en/model_doc/mbart#transformers.MBart50Tokenizer"),d(IS,"href","/docs/transformers/pr_16659/en/model_doc/mbart#transformers.MBart50TokenizerFast"),d(qS,"href","/docs/transformers/pr_16659/en/model_doc/mluke#transformers.MLukeTokenizer"),d(NS,"href","/docs/transformers/pr_16659/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),d(jS,"href","/docs/transformers/pr_16659/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),d(DS,"href","/docs/transformers/pr_16659/en/model_doc/mpnet#transformers.MPNetTokenizer"),d(GS,"href","/docs/transformers/pr_16659/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),d(OS,"href","/docs/transformers/pr_16659/en/model_doc/mt5#transformers.T5Tokenizer"),d(VS,"href","/docs/transformers/pr_16659/en/model_doc/mt5#transformers.T5TokenizerFast"),d(XS,"href","/docs/transformers/pr_16659/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),d(zS,"href","/docs/transformers/pr_16659/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),d(QS,"href","/docs/transformers/pr_16659/en/model_doc/pegasus#transformers.PegasusTokenizer"),d(WS,"href","/docs/transformers/pr_16659/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),d(HS,"href","/docs/transformers/pr_16659/en/model_doc/perceiver#transformers.PerceiverTokenizer"),d(US,"href","/docs/transformers/pr_16659/en/model_doc/phobert#transformers.PhobertTokenizer"),d(JS,"href","/docs/transformers/pr_16659/en/model_doc/plbart#transformers.PLBartTokenizer"),d(YS,"href","/docs/transformers/pr_16659/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),d(KS,"href","/docs/transformers/pr_16659/en/model_doc/bert#transformers.BertTokenizer"),d(ZS,"href","/docs/transformers/pr_16659/en/model_doc/bert#transformers.BertTokenizerFast"),d(eR,"href","/docs/transformers/pr_16659/en/model_doc/rag#transformers.RagTokenizer"),d(oR,"href","/docs/transformers/pr_16659/en/model_doc/realm#transformers.RealmTokenizer"),d(rR,"href","/docs/transformers/pr_16659/en/model_doc/realm#transformers.RealmTokenizerFast"),d(tR,"href","/docs/transformers/pr_16659/en/model_doc/reformer#transformers.ReformerTokenizer"),d(aR,"href","/docs/transformers/pr_16659/en/model_doc/reformer#transformers.ReformerTokenizerFast"),d(nR,"href","/docs/transformers/pr_16659/en/model_doc/rembert#transformers.RemBertTokenizer"),d(sR,"href","/docs/transformers/pr_16659/en/model_doc/rembert#transformers.RemBertTokenizerFast"),d(lR,"href","/docs/transformers/pr_16659/en/model_doc/retribert#transformers.RetriBertTokenizer"),d(iR,"href","/docs/transformers/pr_16659/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),d(dR,"href","/docs/transformers/pr_16659/en/model_doc/roberta#transformers.RobertaTokenizer"),d(cR,"href","/docs/transformers/pr_16659/en/model_doc/roberta#transformers.RobertaTokenizerFast"),d(fR,"href","/docs/transformers/pr_16659/en/model_doc/roformer#transformers.RoFormerTokenizer"),d(mR,"href","/docs/transformers/pr_16659/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),d(gR,"href","/docs/transformers/pr_16659/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),d(hR,"href","/docs/transformers/pr_16659/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),d(pR,"href","/docs/transformers/pr_16659/en/model_doc/splinter#transformers.SplinterTokenizer"),d(_R,"href","/docs/transformers/pr_16659/en/model_doc/splinter#transformers.SplinterTokenizerFast"),d(uR,"href","/docs/transformers/pr_16659/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),d(bR,"href","/docs/transformers/pr_16659/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),d(FR,"href","/docs/transformers/pr_16659/en/model_doc/mt5#transformers.T5Tokenizer"),d(vR,"href","/docs/transformers/pr_16659/en/model_doc/mt5#transformers.T5TokenizerFast"),d(TR,"href","/docs/transformers/pr_16659/en/model_doc/tapas#transformers.TapasTokenizer"),d(MR,"href","/docs/transformers/pr_16659/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),d(ER,"href","/docs/transformers/pr_16659/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),d(CR,"href","/docs/transformers/pr_16659/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),d(wR,"href","/docs/transformers/pr_16659/en/model_doc/xglm#transformers.XGLMTokenizer"),d(AR,"href","/docs/transformers/pr_16659/en/model_doc/xglm#transformers.XGLMTokenizerFast"),d(yR,"href","/docs/transformers/pr_16659/en/model_doc/xlm#transformers.XLMTokenizer"),d(LR,"href","/docs/transformers/pr_16659/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),d(xR,"href","/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),d(kR,"href","/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),d(SR,"href","/docs/transformers/pr_16659/en/model_doc/xlnet#transformers.XLNetTokenizer"),d(RR,"href","/docs/transformers/pr_16659/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),d(go,"class","docstring"),d(hh,"class","docstring"),d(Wo,"class","docstring"),d(ph,"id","transformers.AutoFeatureExtractor"),d(ph,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(ph,"href","#transformers.AutoFeatureExtractor"),d(Wi,"class","relative group"),d(BR,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),d(PR,"href","/docs/transformers/pr_16659/en/model_doc/beit#transformers.BeitFeatureExtractor"),d($R,"href","/docs/transformers/pr_16659/en/model_doc/clip#transformers.CLIPFeatureExtractor"),d(IR,"href","/docs/transformers/pr_16659/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(qR,"href","/docs/transformers/pr_16659/en/model_doc/deit#transformers.DeiTFeatureExtractor"),d(NR,"href","/docs/transformers/pr_16659/en/model_doc/detr#transformers.DetrFeatureExtractor"),d(jR,"href","/docs/transformers/pr_16659/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),d(DR,"href","/docs/transformers/pr_16659/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),d(GR,"href","/docs/transformers/pr_16659/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),d(OR,"href","/docs/transformers/pr_16659/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),d(VR,"href","/docs/transformers/pr_16659/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),d(XR,"href","/docs/transformers/pr_16659/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(zR,"href","/docs/transformers/pr_16659/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(QR,"href","/docs/transformers/pr_16659/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),d(WR,"href","/docs/transformers/pr_16659/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),d(HR,"href","/docs/transformers/pr_16659/en/model_doc/vit#transformers.ViTFeatureExtractor"),d(UR,"href","/docs/transformers/pr_16659/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(JR,"href","/docs/transformers/pr_16659/en/model_doc/vit#transformers.ViTFeatureExtractor"),d(YR,"href","/docs/transformers/pr_16659/en/model_doc/vit#transformers.ViTFeatureExtractor"),d(KR,"href","/docs/transformers/pr_16659/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),d($e,"class","docstring"),d(Ih,"class","docstring"),d(Ho,"class","docstring"),d(qh,"id","transformers.AutoProcessor"),d(qh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(qh,"href","#transformers.AutoProcessor"),d(Hi,"class","relative group"),d(ZR,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),d(eB,"href","/docs/transformers/pr_16659/en/model_doc/clip#transformers.CLIPProcessor"),d(oB,"href","/docs/transformers/pr_16659/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),d(rB,"href","/docs/transformers/pr_16659/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),d(tB,"href","/docs/transformers/pr_16659/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),d(aB,"href","/docs/transformers/pr_16659/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),d(nB,"href","/docs/transformers/pr_16659/en/model_doc/trocr#transformers.TrOCRProcessor"),d(sB,"href","/docs/transformers/pr_16659/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),d(lB,"href","/docs/transformers/pr_16659/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),d(Ie,"class","docstring"),d(Wh,"class","docstring"),d(Uo,"class","docstring"),d(Hh,"id","transformers.AutoModel"),d(Hh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Hh,"href","#transformers.AutoModel"),d(Ji,"class","relative group"),d(iB,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(dB,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(cB,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Xr,"class","docstring"),d(fB,"href","/docs/transformers/pr_16659/en/model_doc/albert#transformers.AlbertModel"),d(mB,"href","/docs/transformers/pr_16659/en/model_doc/bart#transformers.BartModel"),d(gB,"href","/docs/transformers/pr_16659/en/model_doc/beit#transformers.BeitModel"),d(hB,"href","/docs/transformers/pr_16659/en/model_doc/bert#transformers.BertModel"),d(pB,"href","/docs/transformers/pr_16659/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),d(_B,"href","/docs/transformers/pr_16659/en/model_doc/big_bird#transformers.BigBirdModel"),d(uB,"href","/docs/transformers/pr_16659/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),d(bB,"href","/docs/transformers/pr_16659/en/model_doc/blenderbot#transformers.BlenderbotModel"),d(FB,"href","/docs/transformers/pr_16659/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),d(vB,"href","/docs/transformers/pr_16659/en/model_doc/camembert#transformers.CamembertModel"),d(TB,"href","/docs/transformers/pr_16659/en/model_doc/canine#transformers.CanineModel"),d(MB,"href","/docs/transformers/pr_16659/en/model_doc/clip#transformers.CLIPModel"),d(EB,"href","/docs/transformers/pr_16659/en/model_doc/convbert#transformers.ConvBertModel"),d(CB,"href","/docs/transformers/pr_16659/en/model_doc/convnext#transformers.ConvNextModel"),d(wB,"href","/docs/transformers/pr_16659/en/model_doc/ctrl#transformers.CTRLModel"),d(AB,"href","/docs/transformers/pr_16659/en/model_doc/data2vec#transformers.Data2VecAudioModel"),d(yB,"href","/docs/transformers/pr_16659/en/model_doc/data2vec#transformers.Data2VecTextModel"),d(LB,"href","/docs/transformers/pr_16659/en/model_doc/deberta#transformers.DebertaModel"),d(xB,"href","/docs/transformers/pr_16659/en/model_doc/deberta-v2#transformers.DebertaV2Model"),d(kB,"href","/docs/transformers/pr_16659/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),d(SB,"href","/docs/transformers/pr_16659/en/model_doc/deit#transformers.DeiTModel"),d(RB,"href","/docs/transformers/pr_16659/en/model_doc/detr#transformers.DetrModel"),d(BB,"href","/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.DistilBertModel"),d(PB,"href","/docs/transformers/pr_16659/en/model_doc/dpr#transformers.DPRQuestionEncoder"),d($B,"href","/docs/transformers/pr_16659/en/model_doc/dpt#transformers.DPTModel"),d(IB,"href","/docs/transformers/pr_16659/en/model_doc/electra#transformers.ElectraModel"),d(qB,"href","/docs/transformers/pr_16659/en/model_doc/flaubert#transformers.FlaubertModel"),d(NB,"href","/docs/transformers/pr_16659/en/model_doc/fnet#transformers.FNetModel"),d(jB,"href","/docs/transformers/pr_16659/en/model_doc/fsmt#transformers.FSMTModel"),d(DB,"href","/docs/transformers/pr_16659/en/model_doc/funnel#transformers.FunnelModel"),d(GB,"href","/docs/transformers/pr_16659/en/model_doc/funnel#transformers.FunnelBaseModel"),d(OB,"href","/docs/transformers/pr_16659/en/model_doc/glpn#transformers.GLPNModel"),d(VB,"href","/docs/transformers/pr_16659/en/model_doc/gpt2#transformers.GPT2Model"),d(XB,"href","/docs/transformers/pr_16659/en/model_doc/gpt_neo#transformers.GPTNeoModel"),d(zB,"href","/docs/transformers/pr_16659/en/model_doc/gptj#transformers.GPTJModel"),d(QB,"href","/docs/transformers/pr_16659/en/model_doc/hubert#transformers.HubertModel"),d(WB,"href","/docs/transformers/pr_16659/en/model_doc/ibert#transformers.IBertModel"),d(HB,"href","/docs/transformers/pr_16659/en/model_doc/imagegpt#transformers.ImageGPTModel"),d(UB,"href","/docs/transformers/pr_16659/en/model_doc/layoutlm#transformers.LayoutLMModel"),d(JB,"href","/docs/transformers/pr_16659/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),d(YB,"href","/docs/transformers/pr_16659/en/model_doc/led#transformers.LEDModel"),d(KB,"href","/docs/transformers/pr_16659/en/model_doc/longformer#transformers.LongformerModel"),d(ZB,"href","/docs/transformers/pr_16659/en/model_doc/luke#transformers.LukeModel"),d(eP,"href","/docs/transformers/pr_16659/en/model_doc/lxmert#transformers.LxmertModel"),d(oP,"href","/docs/transformers/pr_16659/en/model_doc/m2m_100#transformers.M2M100Model"),d(rP,"href","/docs/transformers/pr_16659/en/model_doc/marian#transformers.MarianModel"),d(tP,"href","/docs/transformers/pr_16659/en/model_doc/maskformer#transformers.MaskFormerModel"),d(aP,"href","/docs/transformers/pr_16659/en/model_doc/mbart#transformers.MBartModel"),d(nP,"href","/docs/transformers/pr_16659/en/model_doc/megatron-bert#transformers.MegatronBertModel"),d(sP,"href","/docs/transformers/pr_16659/en/model_doc/mobilebert#transformers.MobileBertModel"),d(lP,"href","/docs/transformers/pr_16659/en/model_doc/mpnet#transformers.MPNetModel"),d(iP,"href","/docs/transformers/pr_16659/en/model_doc/mt5#transformers.MT5Model"),d(dP,"href","/docs/transformers/pr_16659/en/model_doc/nystromformer#transformers.NystromformerModel"),d(cP,"href","/docs/transformers/pr_16659/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),d(fP,"href","/docs/transformers/pr_16659/en/model_doc/pegasus#transformers.PegasusModel"),d(mP,"href","/docs/transformers/pr_16659/en/model_doc/perceiver#transformers.PerceiverModel"),d(gP,"href","/docs/transformers/pr_16659/en/model_doc/plbart#transformers.PLBartModel"),d(hP,"href","/docs/transformers/pr_16659/en/model_doc/poolformer#transformers.PoolFormerModel"),d(pP,"href","/docs/transformers/pr_16659/en/model_doc/prophetnet#transformers.ProphetNetModel"),d(_P,"href","/docs/transformers/pr_16659/en/model_doc/qdqbert#transformers.QDQBertModel"),d(uP,"href","/docs/transformers/pr_16659/en/model_doc/reformer#transformers.ReformerModel"),d(bP,"href","/docs/transformers/pr_16659/en/model_doc/regnet#transformers.RegNetModel"),d(FP,"href","/docs/transformers/pr_16659/en/model_doc/rembert#transformers.RemBertModel"),d(vP,"href","/docs/transformers/pr_16659/en/model_doc/resnet#transformers.ResNetModel"),d(TP,"href","/docs/transformers/pr_16659/en/model_doc/retribert#transformers.RetriBertModel"),d(MP,"href","/docs/transformers/pr_16659/en/model_doc/roberta#transformers.RobertaModel"),d(EP,"href","/docs/transformers/pr_16659/en/model_doc/roformer#transformers.RoFormerModel"),d(CP,"href","/docs/transformers/pr_16659/en/model_doc/segformer#transformers.SegformerModel"),d(wP,"href","/docs/transformers/pr_16659/en/model_doc/sew#transformers.SEWModel"),d(AP,"href","/docs/transformers/pr_16659/en/model_doc/sew-d#transformers.SEWDModel"),d(yP,"href","/docs/transformers/pr_16659/en/model_doc/speech_to_text#transformers.Speech2TextModel"),d(LP,"href","/docs/transformers/pr_16659/en/model_doc/splinter#transformers.SplinterModel"),d(xP,"href","/docs/transformers/pr_16659/en/model_doc/squeezebert#transformers.SqueezeBertModel"),d(kP,"href","/docs/transformers/pr_16659/en/model_doc/swin#transformers.SwinModel"),d(SP,"href","/docs/transformers/pr_16659/en/model_doc/t5#transformers.T5Model"),d(RP,"href","/docs/transformers/pr_16659/en/model_doc/tapas#transformers.TapasModel"),d(BP,"href","/docs/transformers/pr_16659/en/model_doc/transfo-xl#transformers.TransfoXLModel"),d(PP,"href","/docs/transformers/pr_16659/en/model_doc/unispeech#transformers.UniSpeechModel"),d($P,"href","/docs/transformers/pr_16659/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),d(IP,"href","/docs/transformers/pr_16659/en/model_doc/van#transformers.VanModel"),d(qP,"href","/docs/transformers/pr_16659/en/model_doc/vilt#transformers.ViltModel"),d(NP,"href","/docs/transformers/pr_16659/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),d(jP,"href","/docs/transformers/pr_16659/en/model_doc/visual_bert#transformers.VisualBertModel"),d(DP,"href","/docs/transformers/pr_16659/en/model_doc/vit#transformers.ViTModel"),d(GP,"href","/docs/transformers/pr_16659/en/model_doc/vit_mae#transformers.ViTMAEModel"),d(OP,"href","/docs/transformers/pr_16659/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),d(VP,"href","/docs/transformers/pr_16659/en/model_doc/wavlm#transformers.WavLMModel"),d(XP,"href","/docs/transformers/pr_16659/en/model_doc/xglm#transformers.XGLMModel"),d(zP,"href","/docs/transformers/pr_16659/en/model_doc/xlm#transformers.XLMModel"),d(QP,"href","/docs/transformers/pr_16659/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),d(WP,"href","/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),d(HP,"href","/docs/transformers/pr_16659/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),d(UP,"href","/docs/transformers/pr_16659/en/model_doc/xlnet#transformers.XLNetModel"),d(JP,"href","/docs/transformers/pr_16659/en/model_doc/yoso#transformers.YosoModel"),d(qe,"class","docstring"),d(Jo,"class","docstring"),d($_,"id","transformers.AutoModelForPreTraining"),d($_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d($_,"href","#transformers.AutoModelForPreTraining"),d(Zi,"class","relative group"),d(YP,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(KP,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(ZP,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(zr,"class","docstring"),d(e$,"href","/docs/transformers/pr_16659/en/model_doc/albert#transformers.AlbertForPreTraining"),d(o$,"href","/docs/transformers/pr_16659/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(r$,"href","/docs/transformers/pr_16659/en/model_doc/bert#transformers.BertForPreTraining"),d(t$,"href","/docs/transformers/pr_16659/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),d(a$,"href","/docs/transformers/pr_16659/en/model_doc/camembert#transformers.CamembertForMaskedLM"),d(n$,"href","/docs/transformers/pr_16659/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),d(s$,"href","/docs/transformers/pr_16659/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),d(l$,"href","/docs/transformers/pr_16659/en/model_doc/deberta#transformers.DebertaForMaskedLM"),d(i$,"href","/docs/transformers/pr_16659/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),d(d$,"href","/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),d(c$,"href","/docs/transformers/pr_16659/en/model_doc/electra#transformers.ElectraForPreTraining"),d(f$,"href","/docs/transformers/pr_16659/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),d(m$,"href","/docs/transformers/pr_16659/en/model_doc/fnet#transformers.FNetForPreTraining"),d(g$,"href","/docs/transformers/pr_16659/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),d(h$,"href","/docs/transformers/pr_16659/en/model_doc/funnel#transformers.FunnelForPreTraining"),d(p$,"href","/docs/transformers/pr_16659/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),d(_$,"href","/docs/transformers/pr_16659/en/model_doc/ibert#transformers.IBertForMaskedLM"),d(u$,"href","/docs/transformers/pr_16659/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),d(b$,"href","/docs/transformers/pr_16659/en/model_doc/longformer#transformers.LongformerForMaskedLM"),d(F$,"href","/docs/transformers/pr_16659/en/model_doc/lxmert#transformers.LxmertForPreTraining"),d(v$,"href","/docs/transformers/pr_16659/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),d(T$,"href","/docs/transformers/pr_16659/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),d(M$,"href","/docs/transformers/pr_16659/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),d(E$,"href","/docs/transformers/pr_16659/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),d(C$,"href","/docs/transformers/pr_16659/en/model_doc/retribert#transformers.RetriBertModel"),d(w$,"href","/docs/transformers/pr_16659/en/model_doc/roberta#transformers.RobertaForMaskedLM"),d(A$,"href","/docs/transformers/pr_16659/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),d(y$,"href","/docs/transformers/pr_16659/en/model_doc/t5#transformers.T5ForConditionalGeneration"),d(L$,"href","/docs/transformers/pr_16659/en/model_doc/tapas#transformers.TapasForMaskedLM"),d(x$,"href","/docs/transformers/pr_16659/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),d(k$,"href","/docs/transformers/pr_16659/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),d(S$,"href","/docs/transformers/pr_16659/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),d(R$,"href","/docs/transformers/pr_16659/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),d(B$,"href","/docs/transformers/pr_16659/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),d(P$,"href","/docs/transformers/pr_16659/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),d($$,"href","/docs/transformers/pr_16659/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),d(I$,"href","/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),d(q$,"href","/docs/transformers/pr_16659/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),d(N$,"href","/docs/transformers/pr_16659/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),d(Ne,"class","docstring"),d(Yo,"class","docstring"),d(Mu,"id","transformers.AutoModelForCausalLM"),d(Mu,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Mu,"href","#transformers.AutoModelForCausalLM"),d(rd,"class","relative group"),d(j$,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(D$,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(G$,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Qr,"class","docstring"),d(O$,"href","/docs/transformers/pr_16659/en/model_doc/bart#transformers.BartForCausalLM"),d(V$,"href","/docs/transformers/pr_16659/en/model_doc/bert#transformers.BertLMHeadModel"),d(X$,"href","/docs/transformers/pr_16659/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),d(z$,"href","/docs/transformers/pr_16659/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),d(Q$,"href","/docs/transformers/pr_16659/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),d(W$,"href","/docs/transformers/pr_16659/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),d(H$,"href","/docs/transformers/pr_16659/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),d(U$,"href","/docs/transformers/pr_16659/en/model_doc/camembert#transformers.CamembertForCausalLM"),d(J$,"href","/docs/transformers/pr_16659/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),d(Y$,"href","/docs/transformers/pr_16659/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),d(K$,"href","/docs/transformers/pr_16659/en/model_doc/electra#transformers.ElectraForCausalLM"),d(Z$,"href","/docs/transformers/pr_16659/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),d(eI,"href","/docs/transformers/pr_16659/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),d(oI,"href","/docs/transformers/pr_16659/en/model_doc/gptj#transformers.GPTJForCausalLM"),d(rI,"href","/docs/transformers/pr_16659/en/model_doc/marian#transformers.MarianForCausalLM"),d(tI,"href","/docs/transformers/pr_16659/en/model_doc/mbart#transformers.MBartForCausalLM"),d(aI,"href","/docs/transformers/pr_16659/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),d(nI,"href","/docs/transformers/pr_16659/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),d(sI,"href","/docs/transformers/pr_16659/en/model_doc/pegasus#transformers.PegasusForCausalLM"),d(lI,"href","/docs/transformers/pr_16659/en/model_doc/plbart#transformers.PLBartForCausalLM"),d(iI,"href","/docs/transformers/pr_16659/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),d(dI,"href","/docs/transformers/pr_16659/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),d(cI,"href","/docs/transformers/pr_16659/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),d(fI,"href","/docs/transformers/pr_16659/en/model_doc/rembert#transformers.RemBertForCausalLM"),d(mI,"href","/docs/transformers/pr_16659/en/model_doc/roberta#transformers.RobertaForCausalLM"),d(gI,"href","/docs/transformers/pr_16659/en/model_doc/roformer#transformers.RoFormerForCausalLM"),d(hI,"href","/docs/transformers/pr_16659/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),d(pI,"href","/docs/transformers/pr_16659/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),d(_I,"href","/docs/transformers/pr_16659/en/model_doc/trocr#transformers.TrOCRForCausalLM"),d(uI,"href","/docs/transformers/pr_16659/en/model_doc/xglm#transformers.XGLMForCausalLM"),d(bI,"href","/docs/transformers/pr_16659/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),d(FI,"href","/docs/transformers/pr_16659/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),d(vI,"href","/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),d(TI,"href","/docs/transformers/pr_16659/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),d(MI,"href","/docs/transformers/pr_16659/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),d(je,"class","docstring"),d(Ko,"class","docstring"),d(s6,"id","transformers.AutoModelForMaskedLM"),d(s6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(s6,"href","#transformers.AutoModelForMaskedLM"),d(nd,"class","relative group"),d(EI,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(CI,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(wI,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Wr,"class","docstring"),d(AI,"href","/docs/transformers/pr_16659/en/model_doc/albert#transformers.AlbertForMaskedLM"),d(yI,"href","/docs/transformers/pr_16659/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(LI,"href","/docs/transformers/pr_16659/en/model_doc/bert#transformers.BertForMaskedLM"),d(xI,"href","/docs/transformers/pr_16659/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),d(kI,"href","/docs/transformers/pr_16659/en/model_doc/camembert#transformers.CamembertForMaskedLM"),d(SI,"href","/docs/transformers/pr_16659/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),d(RI,"href","/docs/transformers/pr_16659/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),d(BI,"href","/docs/transformers/pr_16659/en/model_doc/deberta#transformers.DebertaForMaskedLM"),d(PI,"href","/docs/transformers/pr_16659/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),d($I,"href","/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),d(II,"href","/docs/transformers/pr_16659/en/model_doc/electra#transformers.ElectraForMaskedLM"),d(qI,"href","/docs/transformers/pr_16659/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),d(NI,"href","/docs/transformers/pr_16659/en/model_doc/fnet#transformers.FNetForMaskedLM"),d(jI,"href","/docs/transformers/pr_16659/en/model_doc/funnel#transformers.FunnelForMaskedLM"),d(DI,"href","/docs/transformers/pr_16659/en/model_doc/ibert#transformers.IBertForMaskedLM"),d(GI,"href","/docs/transformers/pr_16659/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),d(OI,"href","/docs/transformers/pr_16659/en/model_doc/longformer#transformers.LongformerForMaskedLM"),d(VI,"href","/docs/transformers/pr_16659/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),d(XI,"href","/docs/transformers/pr_16659/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),d(zI,"href","/docs/transformers/pr_16659/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),d(QI,"href","/docs/transformers/pr_16659/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),d(WI,"href","/docs/transformers/pr_16659/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),d(HI,"href","/docs/transformers/pr_16659/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),d(UI,"href","/docs/transformers/pr_16659/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),d(JI,"href","/docs/transformers/pr_16659/en/model_doc/reformer#transformers.ReformerForMaskedLM"),d(YI,"href","/docs/transformers/pr_16659/en/model_doc/rembert#transformers.RemBertForMaskedLM"),d(KI,"href","/docs/transformers/pr_16659/en/model_doc/roberta#transformers.RobertaForMaskedLM"),d(ZI,"href","/docs/transformers/pr_16659/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),d(eq,"href","/docs/transformers/pr_16659/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),d(oq,"href","/docs/transformers/pr_16659/en/model_doc/tapas#transformers.TapasForMaskedLM"),d(rq,"href","/docs/transformers/pr_16659/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),d(tq,"href","/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),d(aq,"href","/docs/transformers/pr_16659/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),d(nq,"href","/docs/transformers/pr_16659/en/model_doc/yoso#transformers.YosoForMaskedLM"),d(De,"class","docstring"),d(Zo,"class","docstring"),d(X6,"id","transformers.AutoModelForSeq2SeqLM"),d(X6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(X6,"href","#transformers.AutoModelForSeq2SeqLM"),d(id,"class","relative group"),d(sq,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(lq,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(iq,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Hr,"class","docstring"),d(dq,"href","/docs/transformers/pr_16659/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(cq,"href","/docs/transformers/pr_16659/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),d(fq,"href","/docs/transformers/pr_16659/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),d(mq,"href","/docs/transformers/pr_16659/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),d(gq,"href","/docs/transformers/pr_16659/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),d(hq,"href","/docs/transformers/pr_16659/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),d(pq,"href","/docs/transformers/pr_16659/en/model_doc/led#transformers.LEDForConditionalGeneration"),d(_q,"href","/docs/transformers/pr_16659/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),d(uq,"href","/docs/transformers/pr_16659/en/model_doc/marian#transformers.MarianMTModel"),d(bq,"href","/docs/transformers/pr_16659/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),d(Fq,"href","/docs/transformers/pr_16659/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),d(vq,"href","/docs/transformers/pr_16659/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),d(Tq,"href","/docs/transformers/pr_16659/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),d(Mq,"href","/docs/transformers/pr_16659/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),d(Eq,"href","/docs/transformers/pr_16659/en/model_doc/t5#transformers.T5ForConditionalGeneration"),d(Cq,"href","/docs/transformers/pr_16659/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),d(Ge,"class","docstring"),d(er,"class","docstring"),d(i1,"id","transformers.AutoModelForSequenceClassification"),d(i1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(i1,"href","#transformers.AutoModelForSequenceClassification"),d(fd,"class","relative group"),d(wq,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Aq,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(yq,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Ur,"class","docstring"),d(Lq,"href","/docs/transformers/pr_16659/en/model_doc/albert#transformers.AlbertForSequenceClassification"),d(xq,"href","/docs/transformers/pr_16659/en/model_doc/bart#transformers.BartForSequenceClassification"),d(kq,"href","/docs/transformers/pr_16659/en/model_doc/bert#transformers.BertForSequenceClassification"),d(Sq,"href","/docs/transformers/pr_16659/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),d(Rq,"href","/docs/transformers/pr_16659/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),d(Bq,"href","/docs/transformers/pr_16659/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),d(Pq,"href","/docs/transformers/pr_16659/en/model_doc/canine#transformers.CanineForSequenceClassification"),d($q,"href","/docs/transformers/pr_16659/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),d(Iq,"href","/docs/transformers/pr_16659/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),d(qq,"href","/docs/transformers/pr_16659/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),d(Nq,"href","/docs/transformers/pr_16659/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),d(jq,"href","/docs/transformers/pr_16659/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),d(Dq,"href","/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),d(Gq,"href","/docs/transformers/pr_16659/en/model_doc/electra#transformers.ElectraForSequenceClassification"),d(Oq,"href","/docs/transformers/pr_16659/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),d(Vq,"href","/docs/transformers/pr_16659/en/model_doc/fnet#transformers.FNetForSequenceClassification"),d(Xq,"href","/docs/transformers/pr_16659/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),d(zq,"href","/docs/transformers/pr_16659/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),d(Qq,"href","/docs/transformers/pr_16659/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),d(Wq,"href","/docs/transformers/pr_16659/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),d(Hq,"href","/docs/transformers/pr_16659/en/model_doc/ibert#transformers.IBertForSequenceClassification"),d(Uq,"href","/docs/transformers/pr_16659/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),d(Jq,"href","/docs/transformers/pr_16659/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),d(Yq,"href","/docs/transformers/pr_16659/en/model_doc/led#transformers.LEDForSequenceClassification"),d(Kq,"href","/docs/transformers/pr_16659/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),d(Zq,"href","/docs/transformers/pr_16659/en/model_doc/mbart#transformers.MBartForSequenceClassification"),d(eN,"href","/docs/transformers/pr_16659/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),d(oN,"href","/docs/transformers/pr_16659/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),d(rN,"href","/docs/transformers/pr_16659/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),d(tN,"href","/docs/transformers/pr_16659/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),d(aN,"href","/docs/transformers/pr_16659/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),d(nN,"href","/docs/transformers/pr_16659/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),d(sN,"href","/docs/transformers/pr_16659/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),d(lN,"href","/docs/transformers/pr_16659/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),d(iN,"href","/docs/transformers/pr_16659/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),d(dN,"href","/docs/transformers/pr_16659/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),d(cN,"href","/docs/transformers/pr_16659/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),d(fN,"href","/docs/transformers/pr_16659/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),d(mN,"href","/docs/transformers/pr_16659/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),d(gN,"href","/docs/transformers/pr_16659/en/model_doc/tapas#transformers.TapasForSequenceClassification"),d(hN,"href","/docs/transformers/pr_16659/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),d(pN,"href","/docs/transformers/pr_16659/en/model_doc/xlm#transformers.XLMForSequenceClassification"),d(_N,"href","/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),d(uN,"href","/docs/transformers/pr_16659/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),d(bN,"href","/docs/transformers/pr_16659/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),d(FN,"href","/docs/transformers/pr_16659/en/model_doc/yoso#transformers.YosoForSequenceClassification"),d(Oe,"class","docstring"),d(or,"class","docstring"),d(tb,"id","transformers.AutoModelForMultipleChoice"),d(tb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(tb,"href","#transformers.AutoModelForMultipleChoice"),d(hd,"class","relative group"),d(vN,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(TN,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(MN,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Jr,"class","docstring"),d(EN,"href","/docs/transformers/pr_16659/en/model_doc/albert#transformers.AlbertForMultipleChoice"),d(CN,"href","/docs/transformers/pr_16659/en/model_doc/bert#transformers.BertForMultipleChoice"),d(wN,"href","/docs/transformers/pr_16659/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),d(AN,"href","/docs/transformers/pr_16659/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),d(yN,"href","/docs/transformers/pr_16659/en/model_doc/canine#transformers.CanineForMultipleChoice"),d(LN,"href","/docs/transformers/pr_16659/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),d(xN,"href","/docs/transformers/pr_16659/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),d(kN,"href","/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),d(SN,"href","/docs/transformers/pr_16659/en/model_doc/electra#transformers.ElectraForMultipleChoice"),d(RN,"href","/docs/transformers/pr_16659/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),d(BN,"href","/docs/transformers/pr_16659/en/model_doc/fnet#transformers.FNetForMultipleChoice"),d(PN,"href","/docs/transformers/pr_16659/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),d($N,"href","/docs/transformers/pr_16659/en/model_doc/ibert#transformers.IBertForMultipleChoice"),d(IN,"href","/docs/transformers/pr_16659/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),d(qN,"href","/docs/transformers/pr_16659/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),d(NN,"href","/docs/transformers/pr_16659/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),d(jN,"href","/docs/transformers/pr_16659/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),d(DN,"href","/docs/transformers/pr_16659/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),d(GN,"href","/docs/transformers/pr_16659/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),d(ON,"href","/docs/transformers/pr_16659/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),d(VN,"href","/docs/transformers/pr_16659/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),d(XN,"href","/docs/transformers/pr_16659/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),d(zN,"href","/docs/transformers/pr_16659/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),d(QN,"href","/docs/transformers/pr_16659/en/model_doc/xlm#transformers.XLMForMultipleChoice"),d(WN,"href","/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),d(HN,"href","/docs/transformers/pr_16659/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),d(UN,"href","/docs/transformers/pr_16659/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),d(JN,"href","/docs/transformers/pr_16659/en/model_doc/yoso#transformers.YosoForMultipleChoice"),d(Ve,"class","docstring"),d(rr,"class","docstring"),d(Pb,"id","transformers.AutoModelForNextSentencePrediction"),d(Pb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Pb,"href","#transformers.AutoModelForNextSentencePrediction"),d(ud,"class","relative group"),d(YN,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(KN,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(ZN,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Yr,"class","docstring"),d(ej,"href","/docs/transformers/pr_16659/en/model_doc/bert#transformers.BertForNextSentencePrediction"),d(oj,"href","/docs/transformers/pr_16659/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),d(rj,"href","/docs/transformers/pr_16659/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),d(tj,"href","/docs/transformers/pr_16659/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),d(aj,"href","/docs/transformers/pr_16659/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),d(Xe,"class","docstring"),d(tr,"class","docstring"),d(Gb,"id","transformers.AutoModelForTokenClassification"),d(Gb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Gb,"href","#transformers.AutoModelForTokenClassification"),d(vd,"class","relative group"),d(nj,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(sj,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(lj,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Kr,"class","docstring"),d(ij,"href","/docs/transformers/pr_16659/en/model_doc/albert#transformers.AlbertForTokenClassification"),d(dj,"href","/docs/transformers/pr_16659/en/model_doc/bert#transformers.BertForTokenClassification"),d(cj,"href","/docs/transformers/pr_16659/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),d(fj,"href","/docs/transformers/pr_16659/en/model_doc/camembert#transformers.CamembertForTokenClassification"),d(mj,"href","/docs/transformers/pr_16659/en/model_doc/canine#transformers.CanineForTokenClassification"),d(gj,"href","/docs/transformers/pr_16659/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),d(hj,"href","/docs/transformers/pr_16659/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),d(pj,"href","/docs/transformers/pr_16659/en/model_doc/deberta#transformers.DebertaForTokenClassification"),d(_j,"href","/docs/transformers/pr_16659/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),d(uj,"href","/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),d(bj,"href","/docs/transformers/pr_16659/en/model_doc/electra#transformers.ElectraForTokenClassification"),d(Fj,"href","/docs/transformers/pr_16659/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),d(vj,"href","/docs/transformers/pr_16659/en/model_doc/fnet#transformers.FNetForTokenClassification"),d(Tj,"href","/docs/transformers/pr_16659/en/model_doc/funnel#transformers.FunnelForTokenClassification"),d(Mj,"href","/docs/transformers/pr_16659/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),d(Ej,"href","/docs/transformers/pr_16659/en/model_doc/ibert#transformers.IBertForTokenClassification"),d(Cj,"href","/docs/transformers/pr_16659/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),d(wj,"href","/docs/transformers/pr_16659/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),d(Aj,"href","/docs/transformers/pr_16659/en/model_doc/longformer#transformers.LongformerForTokenClassification"),d(yj,"href","/docs/transformers/pr_16659/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),d(Lj,"href","/docs/transformers/pr_16659/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),d(xj,"href","/docs/transformers/pr_16659/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),d(kj,"href","/docs/transformers/pr_16659/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),d(Sj,"href","/docs/transformers/pr_16659/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),d(Rj,"href","/docs/transformers/pr_16659/en/model_doc/rembert#transformers.RemBertForTokenClassification"),d(Bj,"href","/docs/transformers/pr_16659/en/model_doc/roberta#transformers.RobertaForTokenClassification"),d(Pj,"href","/docs/transformers/pr_16659/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),d($j,"href","/docs/transformers/pr_16659/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),d(Ij,"href","/docs/transformers/pr_16659/en/model_doc/xlm#transformers.XLMForTokenClassification"),d(qj,"href","/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),d(Nj,"href","/docs/transformers/pr_16659/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),d(jj,"href","/docs/transformers/pr_16659/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),d(Dj,"href","/docs/transformers/pr_16659/en/model_doc/yoso#transformers.YosoForTokenClassification"),d(ze,"class","docstring"),d(ar,"class","docstring"),d(E5,"id","transformers.AutoModelForQuestionAnswering"),d(E5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(E5,"href","#transformers.AutoModelForQuestionAnswering"),d(Ed,"class","relative group"),d(Gj,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Oj,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(Vj,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Zr,"class","docstring"),d(Xj,"href","/docs/transformers/pr_16659/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),d(zj,"href","/docs/transformers/pr_16659/en/model_doc/bart#transformers.BartForQuestionAnswering"),d(Qj,"href","/docs/transformers/pr_16659/en/model_doc/bert#transformers.BertForQuestionAnswering"),d(Wj,"href","/docs/transformers/pr_16659/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),d(Hj,"href","/docs/transformers/pr_16659/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),d(Uj,"href","/docs/transformers/pr_16659/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),d(Jj,"href","/docs/transformers/pr_16659/en/model_doc/canine#transformers.CanineForQuestionAnswering"),d(Yj,"href","/docs/transformers/pr_16659/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),d(Kj,"href","/docs/transformers/pr_16659/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),d(Zj,"href","/docs/transformers/pr_16659/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),d(eD,"href","/docs/transformers/pr_16659/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),d(oD,"href","/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),d(rD,"href","/docs/transformers/pr_16659/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),d(tD,"href","/docs/transformers/pr_16659/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),d(aD,"href","/docs/transformers/pr_16659/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),d(nD,"href","/docs/transformers/pr_16659/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),d(sD,"href","/docs/transformers/pr_16659/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),d(lD,"href","/docs/transformers/pr_16659/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),d(iD,"href","/docs/transformers/pr_16659/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),d(dD,"href","/docs/transformers/pr_16659/en/model_doc/led#transformers.LEDForQuestionAnswering"),d(cD,"href","/docs/transformers/pr_16659/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),d(fD,"href","/docs/transformers/pr_16659/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),d(mD,"href","/docs/transformers/pr_16659/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),d(gD,"href","/docs/transformers/pr_16659/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),d(hD,"href","/docs/transformers/pr_16659/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),d(pD,"href","/docs/transformers/pr_16659/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),d(_D,"href","/docs/transformers/pr_16659/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),d(uD,"href","/docs/transformers/pr_16659/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),d(bD,"href","/docs/transformers/pr_16659/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),d(FD,"href","/docs/transformers/pr_16659/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),d(vD,"href","/docs/transformers/pr_16659/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),d(TD,"href","/docs/transformers/pr_16659/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),d(MD,"href","/docs/transformers/pr_16659/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),d(ED,"href","/docs/transformers/pr_16659/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),d(CD,"href","/docs/transformers/pr_16659/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),d(wD,"href","/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),d(AD,"href","/docs/transformers/pr_16659/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),d(yD,"href","/docs/transformers/pr_16659/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),d(LD,"href","/docs/transformers/pr_16659/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),d(Qe,"class","docstring"),d(nr,"class","docstring"),d(f2,"id","transformers.AutoModelForTableQuestionAnswering"),d(f2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(f2,"href","#transformers.AutoModelForTableQuestionAnswering"),d(Ad,"class","relative group"),d(xD,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(kD,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(SD,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(et,"class","docstring"),d(RD,"href","/docs/transformers/pr_16659/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),d(We,"class","docstring"),d(sr,"class","docstring"),d(h2,"id","transformers.AutoModelForImageClassification"),d(h2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(h2,"href","#transformers.AutoModelForImageClassification"),d(xd,"class","relative group"),d(BD,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(PD,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d($D,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ot,"class","docstring"),d(ID,"href","/docs/transformers/pr_16659/en/model_doc/beit#transformers.BeitForImageClassification"),d(qD,"href","/docs/transformers/pr_16659/en/model_doc/convnext#transformers.ConvNextForImageClassification"),d(ND,"href","/docs/transformers/pr_16659/en/model_doc/deit#transformers.DeiTForImageClassification"),d(jD,"href","/docs/transformers/pr_16659/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),d(DD,"href","/docs/transformers/pr_16659/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),d(GD,"href","/docs/transformers/pr_16659/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),d(OD,"href","/docs/transformers/pr_16659/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),d(VD,"href","/docs/transformers/pr_16659/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),d(XD,"href","/docs/transformers/pr_16659/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),d(zD,"href","/docs/transformers/pr_16659/en/model_doc/regnet#transformers.RegNetForImageClassification"),d(QD,"href","/docs/transformers/pr_16659/en/model_doc/resnet#transformers.ResNetForImageClassification"),d(WD,"href","/docs/transformers/pr_16659/en/model_doc/segformer#transformers.SegformerForImageClassification"),d(HD,"href","/docs/transformers/pr_16659/en/model_doc/swin#transformers.SwinForImageClassification"),d(UD,"href","/docs/transformers/pr_16659/en/model_doc/van#transformers.VanForImageClassification"),d(JD,"href","/docs/transformers/pr_16659/en/model_doc/vit#transformers.ViTForImageClassification"),d(He,"class","docstring"),d(lr,"class","docstring"),d(A2,"id","transformers.AutoModelForVision2Seq"),d(A2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(A2,"href","#transformers.AutoModelForVision2Seq"),d(Rd,"class","relative group"),d(YD,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(KD,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(ZD,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(rt,"class","docstring"),d(eG,"href","/docs/transformers/pr_16659/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),d(Ue,"class","docstring"),d(ir,"class","docstring"),d(x2,"id","transformers.AutoModelForAudioClassification"),d(x2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(x2,"href","#transformers.AutoModelForAudioClassification"),d($d,"class","relative group"),d(oG,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(rG,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(tG,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(tt,"class","docstring"),d(aG,"href","/docs/transformers/pr_16659/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),d(nG,"href","/docs/transformers/pr_16659/en/model_doc/hubert#transformers.HubertForSequenceClassification"),d(sG,"href","/docs/transformers/pr_16659/en/model_doc/sew#transformers.SEWForSequenceClassification"),d(lG,"href","/docs/transformers/pr_16659/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),d(iG,"href","/docs/transformers/pr_16659/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),d(dG,"href","/docs/transformers/pr_16659/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),d(cG,"href","/docs/transformers/pr_16659/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),d(fG,"href","/docs/transformers/pr_16659/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),d(Je,"class","docstring"),d(dr,"class","docstring"),d(j2,"id","transformers.AutoModelForAudioFrameClassification"),d(j2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(j2,"href","#transformers.AutoModelForAudioFrameClassification"),d(Nd,"class","relative group"),d(mG,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(gG,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(hG,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(at,"class","docstring"),d(pG,"href","/docs/transformers/pr_16659/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),d(_G,"href","/docs/transformers/pr_16659/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),d(uG,"href","/docs/transformers/pr_16659/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),d(bG,"href","/docs/transformers/pr_16659/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),d(Ye,"class","docstring"),d(cr,"class","docstring"),d(z2,"id","transformers.AutoModelForCTC"),d(z2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(z2,"href","#transformers.AutoModelForCTC"),d(Gd,"class","relative group"),d(FG,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(vG,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(TG,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(nt,"class","docstring"),d(MG,"href","/docs/transformers/pr_16659/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),d(EG,"href","/docs/transformers/pr_16659/en/model_doc/hubert#transformers.HubertForCTC"),d(CG,"href","/docs/transformers/pr_16659/en/model_doc/sew#transformers.SEWForCTC"),d(wG,"href","/docs/transformers/pr_16659/en/model_doc/sew-d#transformers.SEWDForCTC"),d(AG,"href","/docs/transformers/pr_16659/en/model_doc/unispeech#transformers.UniSpeechForCTC"),d(yG,"href","/docs/transformers/pr_16659/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),d(LG,"href","/docs/transformers/pr_16659/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),d(xG,"href","/docs/transformers/pr_16659/en/model_doc/wavlm#transformers.WavLMForCTC"),d(Ke,"class","docstring"),d(fr,"class","docstring"),d(oF,"id","transformers.AutoModelForSpeechSeq2Seq"),d(oF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(oF,"href","#transformers.AutoModelForSpeechSeq2Seq"),d(Xd,"class","relative group"),d(kG,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(SG,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(RG,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(st,"class","docstring"),d(BG,"href","/docs/transformers/pr_16659/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),d(PG,"href","/docs/transformers/pr_16659/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),d(Ze,"class","docstring"),d(mr,"class","docstring"),d(nF,"id","transformers.AutoModelForAudioXVector"),d(nF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(nF,"href","#transformers.AutoModelForAudioXVector"),d(Wd,"class","relative group"),d($G,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(IG,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(qG,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(lt,"class","docstring"),d(NG,"href","/docs/transformers/pr_16659/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),d(jG,"href","/docs/transformers/pr_16659/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),d(DG,"href","/docs/transformers/pr_16659/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),d(GG,"href","/docs/transformers/pr_16659/en/model_doc/wavlm#transformers.WavLMForXVector"),d(eo,"class","docstring"),d(gr,"class","docstring"),d(fF,"id","transformers.AutoModelForMaskedImageModeling"),d(fF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(fF,"href","#transformers.AutoModelForMaskedImageModeling"),d(Jd,"class","relative group"),d(OG,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(VG,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(XG,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(it,"class","docstring"),d(zG,"href","/docs/transformers/pr_16659/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),d(QG,"href","/docs/transformers/pr_16659/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),d(WG,"href","/docs/transformers/pr_16659/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),d(oo,"class","docstring"),d(hr,"class","docstring"),d(_F,"id","transformers.AutoModelForObjectDetection"),d(_F,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(_F,"href","#transformers.AutoModelForObjectDetection"),d(ec,"class","relative group"),d(HG,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(UG,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(JG,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(dt,"class","docstring"),d(YG,"href","/docs/transformers/pr_16659/en/model_doc/detr#transformers.DetrForObjectDetection"),d(ro,"class","docstring"),d(pr,"class","docstring"),d(FF,"id","transformers.AutoModelForImageSegmentation"),d(FF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(FF,"href","#transformers.AutoModelForImageSegmentation"),d(tc,"class","relative group"),d(KG,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ZG,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(eO,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ct,"class","docstring"),d(oO,"href","/docs/transformers/pr_16659/en/model_doc/detr#transformers.DetrForSegmentation"),d(to,"class","docstring"),d(_r,"class","docstring"),d(MF,"id","transformers.AutoModelForSemanticSegmentation"),d(MF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(MF,"href","#transformers.AutoModelForSemanticSegmentation"),d(sc,"class","relative group"),d(rO,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(tO,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(aO,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ft,"class","docstring"),d(nO,"href","/docs/transformers/pr_16659/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),d(sO,"href","/docs/transformers/pr_16659/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),d(lO,"href","/docs/transformers/pr_16659/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),d(ao,"class","docstring"),d(ur,"class","docstring"),d(yF,"id","transformers.AutoModelForInstanceSegmentation"),d(yF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(yF,"href","#transformers.AutoModelForInstanceSegmentation"),d(cc,"class","relative group"),d(iO,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(dO,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(cO,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(mt,"class","docstring"),d(fO,"href","/docs/transformers/pr_16659/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),d(no,"class","docstring"),d(br,"class","docstring"),d(kF,"id","transformers.TFAutoModel"),d(kF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(kF,"href","#transformers.TFAutoModel"),d(gc,"class","relative group"),d(mO,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(gO,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(hO,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(gt,"class","docstring"),d(pO,"href","/docs/transformers/pr_16659/en/model_doc/albert#transformers.TFAlbertModel"),d(_O,"href","/docs/transformers/pr_16659/en/model_doc/bart#transformers.TFBartModel"),d(uO,"href","/docs/transformers/pr_16659/en/model_doc/bert#transformers.TFBertModel"),d(bO,"href","/docs/transformers/pr_16659/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),d(FO,"href","/docs/transformers/pr_16659/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),d(vO,"href","/docs/transformers/pr_16659/en/model_doc/camembert#transformers.TFCamembertModel"),d(TO,"href","/docs/transformers/pr_16659/en/model_doc/clip#transformers.TFCLIPModel"),d(MO,"href","/docs/transformers/pr_16659/en/model_doc/convbert#transformers.TFConvBertModel"),d(EO,"href","/docs/transformers/pr_16659/en/model_doc/convnext#transformers.TFConvNextModel"),d(CO,"href","/docs/transformers/pr_16659/en/model_doc/ctrl#transformers.TFCTRLModel"),d(wO,"href","/docs/transformers/pr_16659/en/model_doc/deberta#transformers.TFDebertaModel"),d(AO,"href","/docs/transformers/pr_16659/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),d(yO,"href","/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.TFDistilBertModel"),d(LO,"href","/docs/transformers/pr_16659/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),d(xO,"href","/docs/transformers/pr_16659/en/model_doc/electra#transformers.TFElectraModel"),d(kO,"href","/docs/transformers/pr_16659/en/model_doc/flaubert#transformers.TFFlaubertModel"),d(SO,"href","/docs/transformers/pr_16659/en/model_doc/funnel#transformers.TFFunnelModel"),d(RO,"href","/docs/transformers/pr_16659/en/model_doc/funnel#transformers.TFFunnelBaseModel"),d(BO,"href","/docs/transformers/pr_16659/en/model_doc/gpt2#transformers.TFGPT2Model"),d(PO,"href","/docs/transformers/pr_16659/en/model_doc/gptj#transformers.TFGPTJModel"),d($O,"href","/docs/transformers/pr_16659/en/model_doc/hubert#transformers.TFHubertModel"),d(IO,"href","/docs/transformers/pr_16659/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),d(qO,"href","/docs/transformers/pr_16659/en/model_doc/led#transformers.TFLEDModel"),d(NO,"href","/docs/transformers/pr_16659/en/model_doc/longformer#transformers.TFLongformerModel"),d(jO,"href","/docs/transformers/pr_16659/en/model_doc/lxmert#transformers.TFLxmertModel"),d(DO,"href","/docs/transformers/pr_16659/en/model_doc/marian#transformers.TFMarianModel"),d(GO,"href","/docs/transformers/pr_16659/en/model_doc/mbart#transformers.TFMBartModel"),d(OO,"href","/docs/transformers/pr_16659/en/model_doc/mobilebert#transformers.TFMobileBertModel"),d(VO,"href","/docs/transformers/pr_16659/en/model_doc/mpnet#transformers.TFMPNetModel"),d(XO,"href","/docs/transformers/pr_16659/en/model_doc/mt5#transformers.TFMT5Model"),d(zO,"href","/docs/transformers/pr_16659/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),d(QO,"href","/docs/transformers/pr_16659/en/model_doc/pegasus#transformers.TFPegasusModel"),d(WO,"href","/docs/transformers/pr_16659/en/model_doc/rembert#transformers.TFRemBertModel"),d(HO,"href","/docs/transformers/pr_16659/en/model_doc/roberta#transformers.TFRobertaModel"),d(UO,"href","/docs/transformers/pr_16659/en/model_doc/roformer#transformers.TFRoFormerModel"),d(JO,"href","/docs/transformers/pr_16659/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),d(YO,"href","/docs/transformers/pr_16659/en/model_doc/t5#transformers.TFT5Model"),d(KO,"href","/docs/transformers/pr_16659/en/model_doc/tapas#transformers.TFTapasModel"),d(ZO,"href","/docs/transformers/pr_16659/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),d(eV,"href","/docs/transformers/pr_16659/en/model_doc/vit#transformers.TFViTModel"),d(oV,"href","/docs/transformers/pr_16659/en/model_doc/vit_mae#transformers.TFViTMAEModel"),d(rV,"href","/docs/transformers/pr_16659/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),d(tV,"href","/docs/transformers/pr_16659/en/model_doc/xlm#transformers.TFXLMModel"),d(aV,"href","/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),d(nV,"href","/docs/transformers/pr_16659/en/model_doc/xlnet#transformers.TFXLNetModel"),d(ho,"class","docstring"),d(Fr,"class","docstring"),d(vv,"id","transformers.TFAutoModelForPreTraining"),d(vv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(vv,"href","#transformers.TFAutoModelForPreTraining"),d(_c,"class","relative group"),d(sV,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(lV,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(iV,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ht,"class","docstring"),d(dV,"href","/docs/transformers/pr_16659/en/model_doc/albert#transformers.TFAlbertForPreTraining"),d(cV,"href","/docs/transformers/pr_16659/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),d(fV,"href","/docs/transformers/pr_16659/en/model_doc/bert#transformers.TFBertForPreTraining"),d(mV,"href","/docs/transformers/pr_16659/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),d(gV,"href","/docs/transformers/pr_16659/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),d(hV,"href","/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),d(pV,"href","/docs/transformers/pr_16659/en/model_doc/electra#transformers.TFElectraForPreTraining"),d(_V,"href","/docs/transformers/pr_16659/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),d(uV,"href","/docs/transformers/pr_16659/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),d(bV,"href","/docs/transformers/pr_16659/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),d(FV,"href","/docs/transformers/pr_16659/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),d(vV,"href","/docs/transformers/pr_16659/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),d(TV,"href","/docs/transformers/pr_16659/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),d(MV,"href","/docs/transformers/pr_16659/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),d(EV,"href","/docs/transformers/pr_16659/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),d(CV,"href","/docs/transformers/pr_16659/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),d(wV,"href","/docs/transformers/pr_16659/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),d(AV,"href","/docs/transformers/pr_16659/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),d(yV,"href","/docs/transformers/pr_16659/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),d(LV,"href","/docs/transformers/pr_16659/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),d(xV,"href","/docs/transformers/pr_16659/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),d(kV,"href","/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),d(SV,"href","/docs/transformers/pr_16659/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),d(po,"class","docstring"),d(vr,"class","docstring"),d(Xv,"id","transformers.TFAutoModelForCausalLM"),d(Xv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Xv,"href","#transformers.TFAutoModelForCausalLM"),d(Fc,"class","relative group"),d(RV,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(BV,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(PV,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(pt,"class","docstring"),d($V,"href","/docs/transformers/pr_16659/en/model_doc/bert#transformers.TFBertLMHeadModel"),d(IV,"href","/docs/transformers/pr_16659/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),d(qV,"href","/docs/transformers/pr_16659/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),d(NV,"href","/docs/transformers/pr_16659/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),d(jV,"href","/docs/transformers/pr_16659/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),d(DV,"href","/docs/transformers/pr_16659/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),d(GV,"href","/docs/transformers/pr_16659/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),d(OV,"href","/docs/transformers/pr_16659/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),d(VV,"href","/docs/transformers/pr_16659/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),d(XV,"href","/docs/transformers/pr_16659/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),d(zV,"href","/docs/transformers/pr_16659/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),d(QV,"href","/docs/transformers/pr_16659/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),d(_o,"class","docstring"),d(Tr,"class","docstring"),d(tT,"id","transformers.TFAutoModelForImageClassification"),d(tT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(tT,"href","#transformers.TFAutoModelForImageClassification"),d(Mc,"class","relative group"),d(WV,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(HV,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(UV,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(_t,"class","docstring"),d(JV,"href","/docs/transformers/pr_16659/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),d(YV,"href","/docs/transformers/pr_16659/en/model_doc/vit#transformers.TFViTForImageClassification"),d(uo,"class","docstring"),d(Mr,"class","docstring"),d(sT,"id","transformers.TFAutoModelForMaskedLM"),d(sT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(sT,"href","#transformers.TFAutoModelForMaskedLM"),d(wc,"class","relative group"),d(KV,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ZV,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(eX,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ut,"class","docstring"),d(oX,"href","/docs/transformers/pr_16659/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),d(rX,"href","/docs/transformers/pr_16659/en/model_doc/bert#transformers.TFBertForMaskedLM"),d(tX,"href","/docs/transformers/pr_16659/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),d(aX,"href","/docs/transformers/pr_16659/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),d(nX,"href","/docs/transformers/pr_16659/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),d(sX,"href","/docs/transformers/pr_16659/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),d(lX,"href","/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),d(iX,"href","/docs/transformers/pr_16659/en/model_doc/electra#transformers.TFElectraForMaskedLM"),d(dX,"href","/docs/transformers/pr_16659/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),d(cX,"href","/docs/transformers/pr_16659/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),d(fX,"href","/docs/transformers/pr_16659/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),d(mX,"href","/docs/transformers/pr_16659/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),d(gX,"href","/docs/transformers/pr_16659/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),d(hX,"href","/docs/transformers/pr_16659/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),d(pX,"href","/docs/transformers/pr_16659/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),d(_X,"href","/docs/transformers/pr_16659/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),d(uX,"href","/docs/transformers/pr_16659/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),d(bX,"href","/docs/transformers/pr_16659/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),d(FX,"href","/docs/transformers/pr_16659/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),d(vX,"href","/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),d(bo,"class","docstring"),d(Er,"class","docstring"),d(yT,"id","transformers.TFAutoModelForSeq2SeqLM"),d(yT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(yT,"href","#transformers.TFAutoModelForSeq2SeqLM"),d(Lc,"class","relative group"),d(TX,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(MX,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(EX,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(bt,"class","docstring"),d(CX,"href","/docs/transformers/pr_16659/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),d(wX,"href","/docs/transformers/pr_16659/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),d(AX,"href","/docs/transformers/pr_16659/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),d(yX,"href","/docs/transformers/pr_16659/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),d(LX,"href","/docs/transformers/pr_16659/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),d(xX,"href","/docs/transformers/pr_16659/en/model_doc/marian#transformers.TFMarianMTModel"),d(kX,"href","/docs/transformers/pr_16659/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),d(SX,"href","/docs/transformers/pr_16659/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),d(RX,"href","/docs/transformers/pr_16659/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),d(BX,"href","/docs/transformers/pr_16659/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),d(Fo,"class","docstring"),d(Cr,"class","docstring"),d(NT,"id","transformers.TFAutoModelForSequenceClassification"),d(NT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(NT,"href","#transformers.TFAutoModelForSequenceClassification"),d(Sc,"class","relative group"),d(PX,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d($X,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(IX,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Ft,"class","docstring"),d(qX,"href","/docs/transformers/pr_16659/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),d(NX,"href","/docs/transformers/pr_16659/en/model_doc/bert#transformers.TFBertForSequenceClassification"),d(jX,"href","/docs/transformers/pr_16659/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),d(DX,"href","/docs/transformers/pr_16659/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),d(GX,"href","/docs/transformers/pr_16659/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),d(OX,"href","/docs/transformers/pr_16659/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),d(VX,"href","/docs/transformers/pr_16659/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),d(XX,"href","/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),d(zX,"href","/docs/transformers/pr_16659/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),d(QX,"href","/docs/transformers/pr_16659/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),d(WX,"href","/docs/transformers/pr_16659/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),d(HX,"href","/docs/transformers/pr_16659/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),d(UX,"href","/docs/transformers/pr_16659/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),d(JX,"href","/docs/transformers/pr_16659/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),d(YX,"href","/docs/transformers/pr_16659/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),d(KX,"href","/docs/transformers/pr_16659/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),d(ZX,"href","/docs/transformers/pr_16659/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),d(ez,"href","/docs/transformers/pr_16659/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),d(oz,"href","/docs/transformers/pr_16659/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),d(rz,"href","/docs/transformers/pr_16659/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),d(tz,"href","/docs/transformers/pr_16659/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),d(az,"href","/docs/transformers/pr_16659/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),d(nz,"href","/docs/transformers/pr_16659/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),d(sz,"href","/docs/transformers/pr_16659/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),d(lz,"href","/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),d(iz,"href","/docs/transformers/pr_16659/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),d(vo,"class","docstring"),d(wr,"class","docstring"),d(f9,"id","transformers.TFAutoModelForMultipleChoice"),d(f9,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(f9,"href","#transformers.TFAutoModelForMultipleChoice"),d(Pc,"class","relative group"),d(dz,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(cz,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(fz,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(vt,"class","docstring"),d(mz,"href","/docs/transformers/pr_16659/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),d(gz,"href","/docs/transformers/pr_16659/en/model_doc/bert#transformers.TFBertForMultipleChoice"),d(hz,"href","/docs/transformers/pr_16659/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),d(pz,"href","/docs/transformers/pr_16659/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),d(_z,"href","/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),d(uz,"href","/docs/transformers/pr_16659/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),d(bz,"href","/docs/transformers/pr_16659/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),d(Fz,"href","/docs/transformers/pr_16659/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),d(vz,"href","/docs/transformers/pr_16659/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),d(Tz,"href","/docs/transformers/pr_16659/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),d(Mz,"href","/docs/transformers/pr_16659/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),d(Ez,"href","/docs/transformers/pr_16659/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),d(Cz,"href","/docs/transformers/pr_16659/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),d(wz,"href","/docs/transformers/pr_16659/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),d(Az,"href","/docs/transformers/pr_16659/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),d(yz,"href","/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),d(Lz,"href","/docs/transformers/pr_16659/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),d(To,"class","docstring"),d(Ar,"class","docstring"),d(x9,"id","transformers.TFAutoModelForTableQuestionAnswering"),d(x9,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(x9,"href","#transformers.TFAutoModelForTableQuestionAnswering"),d(qc,"class","relative group"),d(xz,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(kz,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(Sz,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Tt,"class","docstring"),d(Rz,"href","/docs/transformers/pr_16659/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),d(Mo,"class","docstring"),d(yr,"class","docstring"),d(S9,"id","transformers.TFAutoModelForTokenClassification"),d(S9,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(S9,"href","#transformers.TFAutoModelForTokenClassification"),d(Dc,"class","relative group"),d(Bz,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Pz,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d($z,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Mt,"class","docstring"),d(Iz,"href","/docs/transformers/pr_16659/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),d(qz,"href","/docs/transformers/pr_16659/en/model_doc/bert#transformers.TFBertForTokenClassification"),d(Nz,"href","/docs/transformers/pr_16659/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),d(jz,"href","/docs/transformers/pr_16659/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),d(Dz,"href","/docs/transformers/pr_16659/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),d(Gz,"href","/docs/transformers/pr_16659/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),d(Oz,"href","/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),d(Vz,"href","/docs/transformers/pr_16659/en/model_doc/electra#transformers.TFElectraForTokenClassification"),d(Xz,"href","/docs/transformers/pr_16659/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),d(zz,"href","/docs/transformers/pr_16659/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),d(Qz,"href","/docs/transformers/pr_16659/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),d(Wz,"href","/docs/transformers/pr_16659/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),d(Hz,"href","/docs/transformers/pr_16659/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),d(Uz,"href","/docs/transformers/pr_16659/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),d(Jz,"href","/docs/transformers/pr_16659/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),d(Yz,"href","/docs/transformers/pr_16659/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),d(Kz,"href","/docs/transformers/pr_16659/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),d(Zz,"href","/docs/transformers/pr_16659/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),d(eQ,"href","/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),d(oQ,"href","/docs/transformers/pr_16659/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),d(Eo,"class","docstring"),d(Lr,"class","docstring"),d(K9,"id","transformers.TFAutoModelForQuestionAnswering"),d(K9,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(K9,"href","#transformers.TFAutoModelForQuestionAnswering"),d(Vc,"class","relative group"),d(rQ,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(tQ,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(aQ,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Et,"class","docstring"),d(nQ,"href","/docs/transformers/pr_16659/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),d(sQ,"href","/docs/transformers/pr_16659/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),d(lQ,"href","/docs/transformers/pr_16659/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),d(iQ,"href","/docs/transformers/pr_16659/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),d(dQ,"href","/docs/transformers/pr_16659/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),d(cQ,"href","/docs/transformers/pr_16659/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),d(fQ,"href","/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),d(mQ,"href","/docs/transformers/pr_16659/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),d(gQ,"href","/docs/transformers/pr_16659/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),d(hQ,"href","/docs/transformers/pr_16659/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),d(pQ,"href","/docs/transformers/pr_16659/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),d(_Q,"href","/docs/transformers/pr_16659/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),d(uQ,"href","/docs/transformers/pr_16659/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),d(bQ,"href","/docs/transformers/pr_16659/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),d(FQ,"href","/docs/transformers/pr_16659/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),d(vQ,"href","/docs/transformers/pr_16659/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),d(TQ,"href","/docs/transformers/pr_16659/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),d(MQ,"href","/docs/transformers/pr_16659/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),d(EQ,"href","/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),d(CQ,"href","/docs/transformers/pr_16659/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),d(Co,"class","docstring"),d(xr,"class","docstring"),d(FM,"id","transformers.TFAutoModelForVision2Seq"),d(FM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(FM,"href","#transformers.TFAutoModelForVision2Seq"),d(Qc,"class","relative group"),d(wQ,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(AQ,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(yQ,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Ct,"class","docstring"),d(LQ,"href","/docs/transformers/pr_16659/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),d(wo,"class","docstring"),d(kr,"class","docstring"),d(TM,"id","transformers.TFAutoModelForSpeechSeq2Seq"),d(TM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(TM,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),d(Uc,"class","relative group"),d(xQ,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(kQ,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(SQ,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(wt,"class","docstring"),d(RQ,"href","/docs/transformers/pr_16659/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),d(Ao,"class","docstring"),d(Sr,"class","docstring"),d(EM,"id","transformers.FlaxAutoModel"),d(EM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(EM,"href","#transformers.FlaxAutoModel"),d(Kc,"class","relative group"),d(BQ,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(PQ,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d($Q,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(At,"class","docstring"),d(IQ,"href","/docs/transformers/pr_16659/en/model_doc/albert#transformers.FlaxAlbertModel"),d(qQ,"href","/docs/transformers/pr_16659/en/model_doc/bart#transformers.FlaxBartModel"),d(NQ,"href","/docs/transformers/pr_16659/en/model_doc/beit#transformers.FlaxBeitModel"),d(jQ,"href","/docs/transformers/pr_16659/en/model_doc/bert#transformers.FlaxBertModel"),d(DQ,"href","/docs/transformers/pr_16659/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),d(GQ,"href","/docs/transformers/pr_16659/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),d(OQ,"href","/docs/transformers/pr_16659/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),d(VQ,"href","/docs/transformers/pr_16659/en/model_doc/clip#transformers.FlaxCLIPModel"),d(XQ,"href","/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),d(zQ,"href","/docs/transformers/pr_16659/en/model_doc/electra#transformers.FlaxElectraModel"),d(QQ,"href","/docs/transformers/pr_16659/en/model_doc/gpt2#transformers.FlaxGPT2Model"),d(WQ,"href","/docs/transformers/pr_16659/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),d(HQ,"href","/docs/transformers/pr_16659/en/model_doc/gptj#transformers.FlaxGPTJModel"),d(UQ,"href","/docs/transformers/pr_16659/en/model_doc/marian#transformers.FlaxMarianModel"),d(JQ,"href","/docs/transformers/pr_16659/en/model_doc/mbart#transformers.FlaxMBartModel"),d(YQ,"href","/docs/transformers/pr_16659/en/model_doc/mt5#transformers.FlaxMT5Model"),d(KQ,"href","/docs/transformers/pr_16659/en/model_doc/pegasus#transformers.FlaxPegasusModel"),d(ZQ,"href","/docs/transformers/pr_16659/en/model_doc/roberta#transformers.FlaxRobertaModel"),d(eW,"href","/docs/transformers/pr_16659/en/model_doc/roformer#transformers.FlaxRoFormerModel"),d(oW,"href","/docs/transformers/pr_16659/en/model_doc/t5#transformers.FlaxT5Model"),d(rW,"href","/docs/transformers/pr_16659/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),d(tW,"href","/docs/transformers/pr_16659/en/model_doc/vit#transformers.FlaxViTModel"),d(aW,"href","/docs/transformers/pr_16659/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),d(nW,"href","/docs/transformers/pr_16659/en/model_doc/xglm#transformers.FlaxXGLMModel"),d(sW,"href","/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),d(yo,"class","docstring"),d(Rr,"class","docstring"),d(UM,"id","transformers.FlaxAutoModelForCausalLM"),d(UM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(UM,"href","#transformers.FlaxAutoModelForCausalLM"),d(of,"class","relative group"),d(lW,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(iW,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(dW,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(yt,"class","docstring"),d(cW,"href","/docs/transformers/pr_16659/en/model_doc/bart#transformers.FlaxBartForCausalLM"),d(fW,"href","/docs/transformers/pr_16659/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),d(mW,"href","/docs/transformers/pr_16659/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),d(gW,"href","/docs/transformers/pr_16659/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),d(hW,"href","/docs/transformers/pr_16659/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),d(Lo,"class","docstring"),d(Br,"class","docstring"),d(o4,"id","transformers.FlaxAutoModelForPreTraining"),d(o4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(o4,"href","#transformers.FlaxAutoModelForPreTraining"),d(af,"class","relative group"),d(pW,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(_W,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(uW,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Lt,"class","docstring"),d(bW,"href","/docs/transformers/pr_16659/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),d(FW,"href","/docs/transformers/pr_16659/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),d(vW,"href","/docs/transformers/pr_16659/en/model_doc/bert#transformers.FlaxBertForPreTraining"),d(TW,"href","/docs/transformers/pr_16659/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),d(MW,"href","/docs/transformers/pr_16659/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),d(EW,"href","/docs/transformers/pr_16659/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),d(CW,"href","/docs/transformers/pr_16659/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),d(wW,"href","/docs/transformers/pr_16659/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),d(AW,"href","/docs/transformers/pr_16659/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),d(yW,"href","/docs/transformers/pr_16659/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),d(LW,"href","/docs/transformers/pr_16659/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),d(xW,"href","/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),d(xo,"class","docstring"),d(Pr,"class","docstring"),d(h4,"id","transformers.FlaxAutoModelForMaskedLM"),d(h4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(h4,"href","#transformers.FlaxAutoModelForMaskedLM"),d(lf,"class","relative group"),d(kW,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(SW,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(RW,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(xt,"class","docstring"),d(BW,"href","/docs/transformers/pr_16659/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),d(PW,"href","/docs/transformers/pr_16659/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),d($W,"href","/docs/transformers/pr_16659/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),d(IW,"href","/docs/transformers/pr_16659/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),d(qW,"href","/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),d(NW,"href","/docs/transformers/pr_16659/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),d(jW,"href","/docs/transformers/pr_16659/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),d(DW,"href","/docs/transformers/pr_16659/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),d(GW,"href","/docs/transformers/pr_16659/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),d(OW,"href","/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),d(ko,"class","docstring"),d($r,"class","docstring"),d(w4,"id","transformers.FlaxAutoModelForSeq2SeqLM"),d(w4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(w4,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),d(ff,"class","relative group"),d(VW,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(XW,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(zW,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(kt,"class","docstring"),d(QW,"href","/docs/transformers/pr_16659/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),d(WW,"href","/docs/transformers/pr_16659/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),d(HW,"href","/docs/transformers/pr_16659/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),d(UW,"href","/docs/transformers/pr_16659/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),d(JW,"href","/docs/transformers/pr_16659/en/model_doc/marian#transformers.FlaxMarianMTModel"),d(YW,"href","/docs/transformers/pr_16659/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),d(KW,"href","/docs/transformers/pr_16659/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),d(ZW,"href","/docs/transformers/pr_16659/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),d(eH,"href","/docs/transformers/pr_16659/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),d(So,"class","docstring"),d(Ir,"class","docstring"),d($4,"id","transformers.FlaxAutoModelForSequenceClassification"),d($4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d($4,"href","#transformers.FlaxAutoModelForSequenceClassification"),d(hf,"class","relative group"),d(oH,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(rH,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(tH,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(St,"class","docstring"),d(aH,"href","/docs/transformers/pr_16659/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),d(nH,"href","/docs/transformers/pr_16659/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),d(sH,"href","/docs/transformers/pr_16659/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),d(lH,"href","/docs/transformers/pr_16659/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),d(iH,"href","/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),d(dH,"href","/docs/transformers/pr_16659/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),d(cH,"href","/docs/transformers/pr_16659/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),d(fH,"href","/docs/transformers/pr_16659/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),d(mH,"href","/docs/transformers/pr_16659/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),d(gH,"href","/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),d(Ro,"class","docstring"),d(qr,"class","docstring"),d(Q4,"id","transformers.FlaxAutoModelForQuestionAnswering"),d(Q4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Q4,"href","#transformers.FlaxAutoModelForQuestionAnswering"),d(uf,"class","relative group"),d(hH,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(pH,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(_H,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Rt,"class","docstring"),d(uH,"href","/docs/transformers/pr_16659/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),d(bH,"href","/docs/transformers/pr_16659/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),d(FH,"href","/docs/transformers/pr_16659/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),d(vH,"href","/docs/transformers/pr_16659/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),d(TH,"href","/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),d(MH,"href","/docs/transformers/pr_16659/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),d(EH,"href","/docs/transformers/pr_16659/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),d(CH,"href","/docs/transformers/pr_16659/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),d(wH,"href","/docs/transformers/pr_16659/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),d(AH,"href","/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),d(Bo,"class","docstring"),d(Nr,"class","docstring"),d(tE,"id","transformers.FlaxAutoModelForTokenClassification"),d(tE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(tE,"href","#transformers.FlaxAutoModelForTokenClassification"),d(vf,"class","relative group"),d(yH,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(LH,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(xH,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Bt,"class","docstring"),d(kH,"href","/docs/transformers/pr_16659/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),d(SH,"href","/docs/transformers/pr_16659/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),d(RH,"href","/docs/transformers/pr_16659/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),d(BH,"href","/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),d(PH,"href","/docs/transformers/pr_16659/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),d($H,"href","/docs/transformers/pr_16659/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),d(IH,"href","/docs/transformers/pr_16659/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),d(qH,"href","/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),d(Po,"class","docstring"),d(jr,"class","docstring"),d(mE,"id","transformers.FlaxAutoModelForMultipleChoice"),d(mE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(mE,"href","#transformers.FlaxAutoModelForMultipleChoice"),d(Ef,"class","relative group"),d(NH,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(jH,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(DH,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Pt,"class","docstring"),d(GH,"href","/docs/transformers/pr_16659/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),d(OH,"href","/docs/transformers/pr_16659/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),d(VH,"href","/docs/transformers/pr_16659/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),d(XH,"href","/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),d(zH,"href","/docs/transformers/pr_16659/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),d(QH,"href","/docs/transformers/pr_16659/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),d(WH,"href","/docs/transformers/pr_16659/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),d(HH,"href","/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),d($o,"class","docstring"),d(Dr,"class","docstring"),d(TE,"id","transformers.FlaxAutoModelForNextSentencePrediction"),d(TE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(TE,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),d(Af,"class","relative group"),d(UH,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(JH,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(YH,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d($t,"class","docstring"),d(KH,"href","/docs/transformers/pr_16659/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),d(Io,"class","docstring"),d(Gr,"class","docstring"),d(EE,"id","transformers.FlaxAutoModelForImageClassification"),d(EE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(EE,"href","#transformers.FlaxAutoModelForImageClassification"),d(xf,"class","relative group"),d(ZH,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(eU,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(oU,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(It,"class","docstring"),d(rU,"href","/docs/transformers/pr_16659/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),d(tU,"href","/docs/transformers/pr_16659/en/model_doc/vit#transformers.FlaxViTForImageClassification"),d(qo,"class","docstring"),d(Or,"class","docstring"),d(AE,"id","transformers.FlaxAutoModelForVision2Seq"),d(AE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(AE,"href","#transformers.FlaxAutoModelForVision2Seq"),d(Rf,"class","relative group"),d(aU,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(nU,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(sU,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(qt,"class","docstring"),d(lU,"href","/docs/transformers/pr_16659/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),d(No,"class","docstring"),d(Vr,"class","docstring")},m(c,u){e(document.head,Z),b(c,io,u),b(c,de,u),e(de,Ce),e(Ce,lo),g(ge,lo,null),e(de,Me),e(de,Xo),e(Xo,Ii),b(c,qf,u),b(c,fa,u),e(fa,qi),e(fa,Ni),e(Ni,yC),e(fa,Nf),b(c,xe,u),b(c,co,u),e(co,ji),e(co,Gn),e(Gn,LC),e(co,On),e(co,Vn),e(Vn,xC),e(co,Di),e(co,Xn),e(Xn,kC),e(co,Gi),b(c,jf,u),g(Da,c,u),b(c,fo,u),b(c,ue,u),e(ue,F7),e(ue,Oi),e(Oi,v7),e(ue,T7),b(c,zo,u),b(c,Ga,u),e(Ga,M7),e(Ga,Df),e(Df,E7),e(Ga,XIe),b(c,SRe,u),b(c,Vi,u),e(Vi,Gf),e(Gf,oY),g(SC,oY,null),e(Vi,zIe),e(Vi,rY),e(rY,QIe),b(c,RRe,u),b(c,zn,u),e(zn,WIe),e(zn,tY),e(tY,HIe),e(zn,UIe),e(zn,aY),e(aY,JIe),e(zn,YIe),b(c,BRe,u),g(RC,c,u),b(c,PRe,u),b(c,C7,u),e(C7,KIe),b(c,$Re,u),g(Of,c,u),b(c,IRe,u),b(c,Xi,u),e(Xi,Vf),e(Vf,nY),g(BC,nY,null),e(Xi,ZIe),e(Xi,sY),e(sY,eqe),b(c,qRe,u),b(c,Qo,u),g(PC,Qo,null),e(Qo,oqe),e(Qo,$C),e($C,rqe),e($C,w7),e(w7,tqe),e($C,aqe),e(Qo,nqe),e(Qo,IC),e(IC,sqe),e(IC,lY),e(lY,lqe),e(IC,iqe),e(Qo,dqe),e(Qo,mo),g(qC,mo,null),e(mo,cqe),e(mo,iY),e(iY,fqe),e(mo,mqe),e(mo,zi),e(zi,gqe),e(zi,dY),e(dY,hqe),e(zi,pqe),e(zi,cY),e(cY,_qe),e(zi,uqe),e(mo,bqe),e(mo,F),e(F,Xf),e(Xf,fY),e(fY,Fqe),e(Xf,vqe),e(Xf,A7),e(A7,Tqe),e(Xf,Mqe),e(F,Eqe),e(F,zf),e(zf,mY),e(mY,Cqe),e(zf,wqe),e(zf,y7),e(y7,Aqe),e(zf,yqe),e(F,Lqe),e(F,Qf),e(Qf,gY),e(gY,xqe),e(Qf,kqe),e(Qf,L7),e(L7,Sqe),e(Qf,Rqe),e(F,Bqe),e(F,Wf),e(Wf,hY),e(hY,Pqe),e(Wf,$qe),e(Wf,x7),e(x7,Iqe),e(Wf,qqe),e(F,Nqe),e(F,Hf),e(Hf,pY),e(pY,jqe),e(Hf,Dqe),e(Hf,k7),e(k7,Gqe),e(Hf,Oqe),e(F,Vqe),e(F,Uf),e(Uf,_Y),e(_Y,Xqe),e(Uf,zqe),e(Uf,S7),e(S7,Qqe),e(Uf,Wqe),e(F,Hqe),e(F,Jf),e(Jf,uY),e(uY,Uqe),e(Jf,Jqe),e(Jf,R7),e(R7,Yqe),e(Jf,Kqe),e(F,Zqe),e(F,Yf),e(Yf,bY),e(bY,eNe),e(Yf,oNe),e(Yf,B7),e(B7,rNe),e(Yf,tNe),e(F,aNe),e(F,Kf),e(Kf,FY),e(FY,nNe),e(Kf,sNe),e(Kf,P7),e(P7,lNe),e(Kf,iNe),e(F,dNe),e(F,Zf),e(Zf,vY),e(vY,cNe),e(Zf,fNe),e(Zf,$7),e($7,mNe),e(Zf,gNe),e(F,hNe),e(F,em),e(em,TY),e(TY,pNe),e(em,_Ne),e(em,I7),e(I7,uNe),e(em,bNe),e(F,FNe),e(F,om),e(om,MY),e(MY,vNe),e(om,TNe),e(om,q7),e(q7,MNe),e(om,ENe),e(F,CNe),e(F,rm),e(rm,EY),e(EY,wNe),e(rm,ANe),e(rm,N7),e(N7,yNe),e(rm,LNe),e(F,xNe),e(F,tm),e(tm,CY),e(CY,kNe),e(tm,SNe),e(tm,j7),e(j7,RNe),e(tm,BNe),e(F,PNe),e(F,am),e(am,wY),e(wY,$Ne),e(am,INe),e(am,D7),e(D7,qNe),e(am,NNe),e(F,jNe),e(F,nm),e(nm,AY),e(AY,DNe),e(nm,GNe),e(nm,G7),e(G7,ONe),e(nm,VNe),e(F,XNe),e(F,sm),e(sm,yY),e(yY,zNe),e(sm,QNe),e(sm,O7),e(O7,WNe),e(sm,HNe),e(F,UNe),e(F,lm),e(lm,LY),e(LY,JNe),e(lm,YNe),e(lm,V7),e(V7,KNe),e(lm,ZNe),e(F,eje),e(F,im),e(im,xY),e(xY,oje),e(im,rje),e(im,X7),e(X7,tje),e(im,aje),e(F,nje),e(F,dm),e(dm,kY),e(kY,sje),e(dm,lje),e(dm,z7),e(z7,ije),e(dm,dje),e(F,cje),e(F,cm),e(cm,SY),e(SY,fje),e(cm,mje),e(cm,Q7),e(Q7,gje),e(cm,hje),e(F,pje),e(F,fm),e(fm,RY),e(RY,_je),e(fm,uje),e(fm,W7),e(W7,bje),e(fm,Fje),e(F,vje),e(F,mm),e(mm,BY),e(BY,Tje),e(mm,Mje),e(mm,H7),e(H7,Eje),e(mm,Cje),e(F,wje),e(F,gm),e(gm,PY),e(PY,Aje),e(gm,yje),e(gm,U7),e(U7,Lje),e(gm,xje),e(F,kje),e(F,hm),e(hm,$Y),e($Y,Sje),e(hm,Rje),e(hm,J7),e(J7,Bje),e(hm,Pje),e(F,$je),e(F,pm),e(pm,IY),e(IY,Ije),e(pm,qje),e(pm,Y7),e(Y7,Nje),e(pm,jje),e(F,Dje),e(F,_m),e(_m,qY),e(qY,Gje),e(_m,Oje),e(_m,K7),e(K7,Vje),e(_m,Xje),e(F,zje),e(F,um),e(um,NY),e(NY,Qje),e(um,Wje),e(um,Z7),e(Z7,Hje),e(um,Uje),e(F,Jje),e(F,bm),e(bm,jY),e(jY,Yje),e(bm,Kje),e(bm,ex),e(ex,Zje),e(bm,eDe),e(F,oDe),e(F,Fm),e(Fm,DY),e(DY,rDe),e(Fm,tDe),e(Fm,ox),e(ox,aDe),e(Fm,nDe),e(F,sDe),e(F,vm),e(vm,GY),e(GY,lDe),e(vm,iDe),e(vm,rx),e(rx,dDe),e(vm,cDe),e(F,fDe),e(F,Tm),e(Tm,OY),e(OY,mDe),e(Tm,gDe),e(Tm,tx),e(tx,hDe),e(Tm,pDe),e(F,_De),e(F,Mm),e(Mm,VY),e(VY,uDe),e(Mm,bDe),e(Mm,ax),e(ax,FDe),e(Mm,vDe),e(F,TDe),e(F,Em),e(Em,XY),e(XY,MDe),e(Em,EDe),e(Em,nx),e(nx,CDe),e(Em,wDe),e(F,ADe),e(F,Cm),e(Cm,zY),e(zY,yDe),e(Cm,LDe),e(Cm,QY),e(QY,xDe),e(Cm,kDe),e(F,SDe),e(F,wm),e(wm,WY),e(WY,RDe),e(wm,BDe),e(wm,sx),e(sx,PDe),e(wm,$De),e(F,IDe),e(F,Am),e(Am,HY),e(HY,qDe),e(Am,NDe),e(Am,lx),e(lx,jDe),e(Am,DDe),e(F,GDe),e(F,ym),e(ym,UY),e(UY,ODe),e(ym,VDe),e(ym,ix),e(ix,XDe),e(ym,zDe),e(F,QDe),e(F,Lm),e(Lm,JY),e(JY,WDe),e(Lm,HDe),e(Lm,dx),e(dx,UDe),e(Lm,JDe),e(F,YDe),e(F,xm),e(xm,YY),e(YY,KDe),e(xm,ZDe),e(xm,cx),e(cx,eGe),e(xm,oGe),e(F,rGe),e(F,km),e(km,KY),e(KY,tGe),e(km,aGe),e(km,fx),e(fx,nGe),e(km,sGe),e(F,lGe),e(F,Sm),e(Sm,ZY),e(ZY,iGe),e(Sm,dGe),e(Sm,mx),e(mx,cGe),e(Sm,fGe),e(F,mGe),e(F,Rm),e(Rm,eK),e(eK,gGe),e(Rm,hGe),e(Rm,gx),e(gx,pGe),e(Rm,_Ge),e(F,uGe),e(F,Bm),e(Bm,oK),e(oK,bGe),e(Bm,FGe),e(Bm,hx),e(hx,vGe),e(Bm,TGe),e(F,MGe),e(F,Pm),e(Pm,rK),e(rK,EGe),e(Pm,CGe),e(Pm,px),e(px,wGe),e(Pm,AGe),e(F,yGe),e(F,$m),e($m,tK),e(tK,LGe),e($m,xGe),e($m,_x),e(_x,kGe),e($m,SGe),e(F,RGe),e(F,Im),e(Im,aK),e(aK,BGe),e(Im,PGe),e(Im,ux),e(ux,$Ge),e(Im,IGe),e(F,qGe),e(F,qm),e(qm,nK),e(nK,NGe),e(qm,jGe),e(qm,bx),e(bx,DGe),e(qm,GGe),e(F,OGe),e(F,Nm),e(Nm,sK),e(sK,VGe),e(Nm,XGe),e(Nm,Fx),e(Fx,zGe),e(Nm,QGe),e(F,WGe),e(F,jm),e(jm,lK),e(lK,HGe),e(jm,UGe),e(jm,vx),e(vx,JGe),e(jm,YGe),e(F,KGe),e(F,Dm),e(Dm,iK),e(iK,ZGe),e(Dm,eOe),e(Dm,Tx),e(Tx,oOe),e(Dm,rOe),e(F,tOe),e(F,Gm),e(Gm,dK),e(dK,aOe),e(Gm,nOe),e(Gm,Mx),e(Mx,sOe),e(Gm,lOe),e(F,iOe),e(F,Om),e(Om,cK),e(cK,dOe),e(Om,cOe),e(Om,Ex),e(Ex,fOe),e(Om,mOe),e(F,gOe),e(F,Vm),e(Vm,fK),e(fK,hOe),e(Vm,pOe),e(Vm,Cx),e(Cx,_Oe),e(Vm,uOe),e(F,bOe),e(F,Xm),e(Xm,mK),e(mK,FOe),e(Xm,vOe),e(Xm,wx),e(wx,TOe),e(Xm,MOe),e(F,EOe),e(F,zm),e(zm,gK),e(gK,COe),e(zm,wOe),e(zm,Ax),e(Ax,AOe),e(zm,yOe),e(F,LOe),e(F,Qm),e(Qm,hK),e(hK,xOe),e(Qm,kOe),e(Qm,yx),e(yx,SOe),e(Qm,ROe),e(F,BOe),e(F,Wm),e(Wm,pK),e(pK,POe),e(Wm,$Oe),e(Wm,Lx),e(Lx,IOe),e(Wm,qOe),e(F,NOe),e(F,Hm),e(Hm,_K),e(_K,jOe),e(Hm,DOe),e(Hm,xx),e(xx,GOe),e(Hm,OOe),e(F,VOe),e(F,Um),e(Um,uK),e(uK,XOe),e(Um,zOe),e(Um,kx),e(kx,QOe),e(Um,WOe),e(F,HOe),e(F,Jm),e(Jm,bK),e(bK,UOe),e(Jm,JOe),e(Jm,Sx),e(Sx,YOe),e(Jm,KOe),e(F,ZOe),e(F,Ym),e(Ym,FK),e(FK,eVe),e(Ym,oVe),e(Ym,Rx),e(Rx,rVe),e(Ym,tVe),e(F,aVe),e(F,Km),e(Km,vK),e(vK,nVe),e(Km,sVe),e(Km,Bx),e(Bx,lVe),e(Km,iVe),e(F,dVe),e(F,Zm),e(Zm,TK),e(TK,cVe),e(Zm,fVe),e(Zm,Px),e(Px,mVe),e(Zm,gVe),e(F,hVe),e(F,eg),e(eg,MK),e(MK,pVe),e(eg,_Ve),e(eg,$x),e($x,uVe),e(eg,bVe),e(F,FVe),e(F,og),e(og,EK),e(EK,vVe),e(og,TVe),e(og,Ix),e(Ix,MVe),e(og,EVe),e(F,CVe),e(F,rg),e(rg,CK),e(CK,wVe),e(rg,AVe),e(rg,qx),e(qx,yVe),e(rg,LVe),e(F,xVe),e(F,tg),e(tg,wK),e(wK,kVe),e(tg,SVe),e(tg,Nx),e(Nx,RVe),e(tg,BVe),e(F,PVe),e(F,ag),e(ag,AK),e(AK,$Ve),e(ag,IVe),e(ag,jx),e(jx,qVe),e(ag,NVe),e(F,jVe),e(F,ng),e(ng,yK),e(yK,DVe),e(ng,GVe),e(ng,Dx),e(Dx,OVe),e(ng,VVe),e(F,XVe),e(F,sg),e(sg,LK),e(LK,zVe),e(sg,QVe),e(sg,Gx),e(Gx,WVe),e(sg,HVe),e(F,UVe),e(F,lg),e(lg,xK),e(xK,JVe),e(lg,YVe),e(lg,Ox),e(Ox,KVe),e(lg,ZVe),e(F,eXe),e(F,ig),e(ig,kK),e(kK,oXe),e(ig,rXe),e(ig,Vx),e(Vx,tXe),e(ig,aXe),e(F,nXe),e(F,dg),e(dg,SK),e(SK,sXe),e(dg,lXe),e(dg,Xx),e(Xx,iXe),e(dg,dXe),e(F,cXe),e(F,cg),e(cg,RK),e(RK,fXe),e(cg,mXe),e(cg,zx),e(zx,gXe),e(cg,hXe),e(F,pXe),e(F,fg),e(fg,BK),e(BK,_Xe),e(fg,uXe),e(fg,Qx),e(Qx,bXe),e(fg,FXe),e(F,vXe),e(F,mg),e(mg,PK),e(PK,TXe),e(mg,MXe),e(mg,Wx),e(Wx,EXe),e(mg,CXe),e(F,wXe),e(F,gg),e(gg,$K),e($K,AXe),e(gg,yXe),e(gg,Hx),e(Hx,LXe),e(gg,xXe),e(F,kXe),e(F,hg),e(hg,IK),e(IK,SXe),e(hg,RXe),e(hg,Ux),e(Ux,BXe),e(hg,PXe),e(F,$Xe),e(F,pg),e(pg,qK),e(qK,IXe),e(pg,qXe),e(pg,Jx),e(Jx,NXe),e(pg,jXe),e(F,DXe),e(F,_g),e(_g,NK),e(NK,GXe),e(_g,OXe),e(_g,Yx),e(Yx,VXe),e(_g,XXe),e(F,zXe),e(F,ug),e(ug,jK),e(jK,QXe),e(ug,WXe),e(ug,Kx),e(Kx,HXe),e(ug,UXe),e(F,JXe),e(F,bg),e(bg,DK),e(DK,YXe),e(bg,KXe),e(bg,Zx),e(Zx,ZXe),e(bg,eze),e(F,oze),e(F,Fg),e(Fg,GK),e(GK,rze),e(Fg,tze),e(Fg,ek),e(ek,aze),e(Fg,nze),e(F,sze),e(F,vg),e(vg,OK),e(OK,lze),e(vg,ize),e(vg,ok),e(ok,dze),e(vg,cze),e(F,fze),e(F,Tg),e(Tg,VK),e(VK,mze),e(Tg,gze),e(Tg,rk),e(rk,hze),e(Tg,pze),e(F,_ze),e(F,Mg),e(Mg,XK),e(XK,uze),e(Mg,bze),e(Mg,tk),e(tk,Fze),e(Mg,vze),e(F,Tze),e(F,Eg),e(Eg,zK),e(zK,Mze),e(Eg,Eze),e(Eg,ak),e(ak,Cze),e(Eg,wze),e(F,Aze),e(F,Cg),e(Cg,QK),e(QK,yze),e(Cg,Lze),e(Cg,nk),e(nk,xze),e(Cg,kze),e(F,Sze),e(F,wg),e(wg,WK),e(WK,Rze),e(wg,Bze),e(wg,sk),e(sk,Pze),e(wg,$ze),e(F,Ize),e(F,Ag),e(Ag,HK),e(HK,qze),e(Ag,Nze),e(Ag,lk),e(lk,jze),e(Ag,Dze),e(F,Gze),e(F,yg),e(yg,UK),e(UK,Oze),e(yg,Vze),e(yg,ik),e(ik,Xze),e(yg,zze),e(F,Qze),e(F,Lg),e(Lg,JK),e(JK,Wze),e(Lg,Hze),e(Lg,dk),e(dk,Uze),e(Lg,Jze),e(F,Yze),e(F,xg),e(xg,YK),e(YK,Kze),e(xg,Zze),e(xg,ck),e(ck,eQe),e(xg,oQe),e(F,rQe),e(F,kg),e(kg,KK),e(KK,tQe),e(kg,aQe),e(kg,fk),e(fk,nQe),e(kg,sQe),e(F,lQe),e(F,Sg),e(Sg,ZK),e(ZK,iQe),e(Sg,dQe),e(Sg,mk),e(mk,cQe),e(Sg,fQe),e(F,mQe),e(F,Rg),e(Rg,eZ),e(eZ,gQe),e(Rg,hQe),e(Rg,gk),e(gk,pQe),e(Rg,_Qe),e(F,uQe),e(F,Bg),e(Bg,oZ),e(oZ,bQe),e(Bg,FQe),e(Bg,hk),e(hk,vQe),e(Bg,TQe),e(F,MQe),e(F,Pg),e(Pg,rZ),e(rZ,EQe),e(Pg,CQe),e(Pg,pk),e(pk,wQe),e(Pg,AQe),e(F,yQe),e(F,$g),e($g,tZ),e(tZ,LQe),e($g,xQe),e($g,_k),e(_k,kQe),e($g,SQe),e(F,RQe),e(F,Ig),e(Ig,aZ),e(aZ,BQe),e(Ig,PQe),e(Ig,uk),e(uk,$Qe),e(Ig,IQe),e(mo,qQe),e(mo,nZ),e(nZ,NQe),e(mo,jQe),g(NC,mo,null),e(Qo,DQe),e(Qo,qg),g(jC,qg,null),e(qg,GQe),e(qg,sZ),e(sZ,OQe),b(c,NRe,u),b(c,Qi,u),e(Qi,Ng),e(Ng,lZ),g(DC,lZ,null),e(Qi,VQe),e(Qi,iZ),e(iZ,XQe),b(c,jRe,u),b(c,Wo,u),g(GC,Wo,null),e(Wo,zQe),e(Wo,OC),e(OC,QQe),e(OC,bk),e(bk,WQe),e(OC,HQe),e(Wo,UQe),e(Wo,VC),e(VC,JQe),e(VC,dZ),e(dZ,YQe),e(VC,KQe),e(Wo,ZQe),e(Wo,go),g(XC,go,null),e(go,eWe),e(go,cZ),e(cZ,oWe),e(go,rWe),e(go,Oa),e(Oa,tWe),e(Oa,fZ),e(fZ,aWe),e(Oa,nWe),e(Oa,mZ),e(mZ,sWe),e(Oa,lWe),e(Oa,gZ),e(gZ,iWe),e(Oa,dWe),e(go,cWe),e(go,C),e(C,Qn),e(Qn,hZ),e(hZ,fWe),e(Qn,mWe),e(Qn,Fk),e(Fk,gWe),e(Qn,hWe),e(Qn,vk),e(vk,pWe),e(Qn,_We),e(C,uWe),e(C,Wn),e(Wn,pZ),e(pZ,bWe),e(Wn,FWe),e(Wn,Tk),e(Tk,vWe),e(Wn,TWe),e(Wn,Mk),e(Mk,MWe),e(Wn,EWe),e(C,CWe),e(C,Hn),e(Hn,_Z),e(_Z,wWe),e(Hn,AWe),e(Hn,Ek),e(Ek,yWe),e(Hn,LWe),e(Hn,Ck),e(Ck,xWe),e(Hn,kWe),e(C,SWe),e(C,jg),e(jg,uZ),e(uZ,RWe),e(jg,BWe),e(jg,wk),e(wk,PWe),e(jg,$We),e(C,IWe),e(C,Un),e(Un,bZ),e(bZ,qWe),e(Un,NWe),e(Un,Ak),e(Ak,jWe),e(Un,DWe),e(Un,yk),e(yk,GWe),e(Un,OWe),e(C,VWe),e(C,Dg),e(Dg,FZ),e(FZ,XWe),e(Dg,zWe),e(Dg,Lk),e(Lk,QWe),e(Dg,WWe),e(C,HWe),e(C,Gg),e(Gg,vZ),e(vZ,UWe),e(Gg,JWe),e(Gg,xk),e(xk,YWe),e(Gg,KWe),e(C,ZWe),e(C,Og),e(Og,TZ),e(TZ,eHe),e(Og,oHe),e(Og,kk),e(kk,rHe),e(Og,tHe),e(C,aHe),e(C,Jn),e(Jn,MZ),e(MZ,nHe),e(Jn,sHe),e(Jn,Sk),e(Sk,lHe),e(Jn,iHe),e(Jn,Rk),e(Rk,dHe),e(Jn,cHe),e(C,fHe),e(C,Yn),e(Yn,EZ),e(EZ,mHe),e(Yn,gHe),e(Yn,Bk),e(Bk,hHe),e(Yn,pHe),e(Yn,Pk),e(Pk,_He),e(Yn,uHe),e(C,bHe),e(C,Kn),e(Kn,CZ),e(CZ,FHe),e(Kn,vHe),e(Kn,$k),e($k,THe),e(Kn,MHe),e(Kn,Ik),e(Ik,EHe),e(Kn,CHe),e(C,wHe),e(C,Vg),e(Vg,wZ),e(wZ,AHe),e(Vg,yHe),e(Vg,qk),e(qk,LHe),e(Vg,xHe),e(C,kHe),e(C,Xg),e(Xg,AZ),e(AZ,SHe),e(Xg,RHe),e(Xg,Nk),e(Nk,BHe),e(Xg,PHe),e(C,$He),e(C,Zn),e(Zn,yZ),e(yZ,IHe),e(Zn,qHe),e(Zn,jk),e(jk,NHe),e(Zn,jHe),e(Zn,Dk),e(Dk,DHe),e(Zn,GHe),e(C,OHe),e(C,zg),e(zg,LZ),e(LZ,VHe),e(zg,XHe),e(zg,Gk),e(Gk,zHe),e(zg,QHe),e(C,WHe),e(C,es),e(es,xZ),e(xZ,HHe),e(es,UHe),e(es,Ok),e(Ok,JHe),e(es,YHe),e(es,Vk),e(Vk,KHe),e(es,ZHe),e(C,eUe),e(C,os),e(os,kZ),e(kZ,oUe),e(os,rUe),e(os,Xk),e(Xk,tUe),e(os,aUe),e(os,zk),e(zk,nUe),e(os,sUe),e(C,lUe),e(C,rs),e(rs,SZ),e(SZ,iUe),e(rs,dUe),e(rs,Qk),e(Qk,cUe),e(rs,fUe),e(rs,RZ),e(RZ,mUe),e(rs,gUe),e(C,hUe),e(C,Qg),e(Qg,BZ),e(BZ,pUe),e(Qg,_Ue),e(Qg,Wk),e(Wk,uUe),e(Qg,bUe),e(C,FUe),e(C,ts),e(ts,PZ),e(PZ,vUe),e(ts,TUe),e(ts,Hk),e(Hk,MUe),e(ts,EUe),e(ts,Uk),e(Uk,CUe),e(ts,wUe),e(C,AUe),e(C,Wg),e(Wg,$Z),e($Z,yUe),e(Wg,LUe),e(Wg,Jk),e(Jk,xUe),e(Wg,kUe),e(C,SUe),e(C,as),e(as,IZ),e(IZ,RUe),e(as,BUe),e(as,Yk),e(Yk,PUe),e(as,$Ue),e(as,Kk),e(Kk,IUe),e(as,qUe),e(C,NUe),e(C,ns),e(ns,qZ),e(qZ,jUe),e(ns,DUe),e(ns,Zk),e(Zk,GUe),e(ns,OUe),e(ns,eS),e(eS,VUe),e(ns,XUe),e(C,zUe),e(C,ss),e(ss,NZ),e(NZ,QUe),e(ss,WUe),e(ss,oS),e(oS,HUe),e(ss,UUe),e(ss,rS),e(rS,JUe),e(ss,YUe),e(C,KUe),e(C,Hg),e(Hg,jZ),e(jZ,ZUe),e(Hg,eJe),e(Hg,tS),e(tS,oJe),e(Hg,rJe),e(C,tJe),e(C,ls),e(ls,DZ),e(DZ,aJe),e(ls,nJe),e(ls,aS),e(aS,sJe),e(ls,lJe),e(ls,nS),e(nS,iJe),e(ls,dJe),e(C,cJe),e(C,Ug),e(Ug,GZ),e(GZ,fJe),e(Ug,mJe),e(Ug,sS),e(sS,gJe),e(Ug,hJe),e(C,pJe),e(C,is),e(is,OZ),e(OZ,_Je),e(is,uJe),e(is,lS),e(lS,bJe),e(is,FJe),e(is,iS),e(iS,vJe),e(is,TJe),e(C,MJe),e(C,ds),e(ds,VZ),e(VZ,EJe),e(ds,CJe),e(ds,dS),e(dS,wJe),e(ds,AJe),e(ds,cS),e(cS,yJe),e(ds,LJe),e(C,xJe),e(C,cs),e(cs,XZ),e(XZ,kJe),e(cs,SJe),e(cs,fS),e(fS,RJe),e(cs,BJe),e(cs,mS),e(mS,PJe),e(cs,$Je),e(C,IJe),e(C,fs),e(fs,zZ),e(zZ,qJe),e(fs,NJe),e(fs,gS),e(gS,jJe),e(fs,DJe),e(fs,hS),e(hS,GJe),e(fs,OJe),e(C,VJe),e(C,Jg),e(Jg,QZ),e(QZ,XJe),e(Jg,zJe),e(Jg,pS),e(pS,QJe),e(Jg,WJe),e(C,HJe),e(C,ms),e(ms,WZ),e(WZ,UJe),e(ms,JJe),e(ms,_S),e(_S,YJe),e(ms,KJe),e(ms,uS),e(uS,ZJe),e(ms,eYe),e(C,oYe),e(C,gs),e(gs,HZ),e(HZ,rYe),e(gs,tYe),e(gs,bS),e(bS,aYe),e(gs,nYe),e(gs,FS),e(FS,sYe),e(gs,lYe),e(C,iYe),e(C,hs),e(hs,UZ),e(UZ,dYe),e(hs,cYe),e(hs,vS),e(vS,fYe),e(hs,mYe),e(hs,TS),e(TS,gYe),e(hs,hYe),e(C,pYe),e(C,ps),e(ps,JZ),e(JZ,_Ye),e(ps,uYe),e(ps,MS),e(MS,bYe),e(ps,FYe),e(ps,ES),e(ES,vYe),e(ps,TYe),e(C,MYe),e(C,_s),e(_s,YZ),e(YZ,EYe),e(_s,CYe),e(_s,CS),e(CS,wYe),e(_s,AYe),e(_s,wS),e(wS,yYe),e(_s,LYe),e(C,xYe),e(C,us),e(us,KZ),e(KZ,kYe),e(us,SYe),e(us,AS),e(AS,RYe),e(us,BYe),e(us,yS),e(yS,PYe),e(us,$Ye),e(C,IYe),e(C,Yg),e(Yg,ZZ),e(ZZ,qYe),e(Yg,NYe),e(Yg,LS),e(LS,jYe),e(Yg,DYe),e(C,GYe),e(C,bs),e(bs,eee),e(eee,OYe),e(bs,VYe),e(bs,xS),e(xS,XYe),e(bs,zYe),e(bs,kS),e(kS,QYe),e(bs,WYe),e(C,HYe),e(C,Kg),e(Kg,oee),e(oee,UYe),e(Kg,JYe),e(Kg,SS),e(SS,YYe),e(Kg,KYe),e(C,ZYe),e(C,Zg),e(Zg,ree),e(ree,eKe),e(Zg,oKe),e(Zg,RS),e(RS,rKe),e(Zg,tKe),e(C,aKe),e(C,Fs),e(Fs,tee),e(tee,nKe),e(Fs,sKe),e(Fs,BS),e(BS,lKe),e(Fs,iKe),e(Fs,PS),e(PS,dKe),e(Fs,cKe),e(C,fKe),e(C,vs),e(vs,aee),e(aee,mKe),e(vs,gKe),e(vs,$S),e($S,hKe),e(vs,pKe),e(vs,IS),e(IS,_Ke),e(vs,uKe),e(C,bKe),e(C,eh),e(eh,nee),e(nee,FKe),e(eh,vKe),e(eh,qS),e(qS,TKe),e(eh,MKe),e(C,EKe),e(C,Ts),e(Ts,see),e(see,CKe),e(Ts,wKe),e(Ts,NS),e(NS,AKe),e(Ts,yKe),e(Ts,jS),e(jS,LKe),e(Ts,xKe),e(C,kKe),e(C,Ms),e(Ms,lee),e(lee,SKe),e(Ms,RKe),e(Ms,DS),e(DS,BKe),e(Ms,PKe),e(Ms,GS),e(GS,$Ke),e(Ms,IKe),e(C,qKe),e(C,Es),e(Es,iee),e(iee,NKe),e(Es,jKe),e(Es,OS),e(OS,DKe),e(Es,GKe),e(Es,VS),e(VS,OKe),e(Es,VKe),e(C,XKe),e(C,Cs),e(Cs,dee),e(dee,zKe),e(Cs,QKe),e(Cs,XS),e(XS,WKe),e(Cs,HKe),e(Cs,zS),e(zS,UKe),e(Cs,JKe),e(C,YKe),e(C,ws),e(ws,cee),e(cee,KKe),e(ws,ZKe),e(ws,QS),e(QS,eZe),e(ws,oZe),e(ws,WS),e(WS,rZe),e(ws,tZe),e(C,aZe),e(C,oh),e(oh,fee),e(fee,nZe),e(oh,sZe),e(oh,HS),e(HS,lZe),e(oh,iZe),e(C,dZe),e(C,rh),e(rh,mee),e(mee,cZe),e(rh,fZe),e(rh,US),e(US,mZe),e(rh,gZe),e(C,hZe),e(C,th),e(th,gee),e(gee,pZe),e(th,_Ze),e(th,JS),e(JS,uZe),e(th,bZe),e(C,FZe),e(C,ah),e(ah,hee),e(hee,vZe),e(ah,TZe),e(ah,YS),e(YS,MZe),e(ah,EZe),e(C,CZe),e(C,As),e(As,pee),e(pee,wZe),e(As,AZe),e(As,KS),e(KS,yZe),e(As,LZe),e(As,ZS),e(ZS,xZe),e(As,kZe),e(C,SZe),e(C,nh),e(nh,_ee),e(_ee,RZe),e(nh,BZe),e(nh,eR),e(eR,PZe),e(nh,$Ze),e(C,IZe),e(C,ys),e(ys,uee),e(uee,qZe),e(ys,NZe),e(ys,oR),e(oR,jZe),e(ys,DZe),e(ys,rR),e(rR,GZe),e(ys,OZe),e(C,VZe),e(C,Ls),e(Ls,bee),e(bee,XZe),e(Ls,zZe),e(Ls,tR),e(tR,QZe),e(Ls,WZe),e(Ls,aR),e(aR,HZe),e(Ls,UZe),e(C,JZe),e(C,xs),e(xs,Fee),e(Fee,YZe),e(xs,KZe),e(xs,nR),e(nR,ZZe),e(xs,eeo),e(xs,sR),e(sR,oeo),e(xs,reo),e(C,teo),e(C,ks),e(ks,vee),e(vee,aeo),e(ks,neo),e(ks,lR),e(lR,seo),e(ks,leo),e(ks,iR),e(iR,ieo),e(ks,deo),e(C,ceo),e(C,Ss),e(Ss,Tee),e(Tee,feo),e(Ss,meo),e(Ss,dR),e(dR,geo),e(Ss,heo),e(Ss,cR),e(cR,peo),e(Ss,_eo),e(C,ueo),e(C,Rs),e(Rs,Mee),e(Mee,beo),e(Rs,Feo),e(Rs,fR),e(fR,veo),e(Rs,Teo),e(Rs,mR),e(mR,Meo),e(Rs,Eeo),e(C,Ceo),e(C,sh),e(sh,Eee),e(Eee,weo),e(sh,Aeo),e(sh,gR),e(gR,yeo),e(sh,Leo),e(C,xeo),e(C,lh),e(lh,Cee),e(Cee,keo),e(lh,Seo),e(lh,hR),e(hR,Reo),e(lh,Beo),e(C,Peo),e(C,Bs),e(Bs,wee),e(wee,$eo),e(Bs,Ieo),e(Bs,pR),e(pR,qeo),e(Bs,Neo),e(Bs,_R),e(_R,jeo),e(Bs,Deo),e(C,Geo),e(C,Ps),e(Ps,Aee),e(Aee,Oeo),e(Ps,Veo),e(Ps,uR),e(uR,Xeo),e(Ps,zeo),e(Ps,bR),e(bR,Qeo),e(Ps,Weo),e(C,Heo),e(C,$s),e($s,yee),e(yee,Ueo),e($s,Jeo),e($s,FR),e(FR,Yeo),e($s,Keo),e($s,vR),e(vR,Zeo),e($s,eoo),e(C,ooo),e(C,ih),e(ih,Lee),e(Lee,roo),e(ih,too),e(ih,TR),e(TR,aoo),e(ih,noo),e(C,soo),e(C,dh),e(dh,xee),e(xee,loo),e(dh,ioo),e(dh,MR),e(MR,doo),e(dh,coo),e(C,foo),e(C,ch),e(ch,kee),e(kee,moo),e(ch,goo),e(ch,ER),e(ER,hoo),e(ch,poo),e(C,_oo),e(C,fh),e(fh,See),e(See,uoo),e(fh,boo),e(fh,CR),e(CR,Foo),e(fh,voo),e(C,Too),e(C,Is),e(Is,Ree),e(Ree,Moo),e(Is,Eoo),e(Is,wR),e(wR,Coo),e(Is,woo),e(Is,AR),e(AR,Aoo),e(Is,yoo),e(C,Loo),e(C,mh),e(mh,Bee),e(Bee,xoo),e(mh,koo),e(mh,yR),e(yR,Soo),e(mh,Roo),e(C,Boo),e(C,gh),e(gh,Pee),e(Pee,Poo),e(gh,$oo),e(gh,LR),e(LR,Ioo),e(gh,qoo),e(C,Noo),e(C,qs),e(qs,$ee),e($ee,joo),e(qs,Doo),e(qs,xR),e(xR,Goo),e(qs,Ooo),e(qs,kR),e(kR,Voo),e(qs,Xoo),e(C,zoo),e(C,Ns),e(Ns,Iee),e(Iee,Qoo),e(Ns,Woo),e(Ns,SR),e(SR,Hoo),e(Ns,Uoo),e(Ns,RR),e(RR,Joo),e(Ns,Yoo),e(go,Koo),e(go,qee),e(qee,Zoo),e(go,ero),g(zC,go,null),e(Wo,oro),e(Wo,hh),g(QC,hh,null),e(hh,rro),e(hh,Nee),e(Nee,tro),b(c,DRe,u),b(c,Wi,u),e(Wi,ph),e(ph,jee),g(WC,jee,null),e(Wi,aro),e(Wi,Dee),e(Dee,nro),b(c,GRe,u),b(c,Ho,u),g(HC,Ho,null),e(Ho,sro),e(Ho,UC),e(UC,lro),e(UC,BR),e(BR,iro),e(UC,dro),e(Ho,cro),e(Ho,JC),e(JC,fro),e(JC,Gee),e(Gee,mro),e(JC,gro),e(Ho,hro),e(Ho,$e),g(YC,$e,null),e($e,pro),e($e,Oee),e(Oee,_ro),e($e,uro),e($e,Va),e(Va,bro),e(Va,Vee),e(Vee,Fro),e(Va,vro),e(Va,Xee),e(Xee,Tro),e(Va,Mro),e(Va,zee),e(zee,Ero),e(Va,Cro),e($e,wro),e($e,ee),e(ee,_h),e(_h,Qee),e(Qee,Aro),e(_h,yro),e(_h,PR),e(PR,Lro),e(_h,xro),e(ee,kro),e(ee,uh),e(uh,Wee),e(Wee,Sro),e(uh,Rro),e(uh,$R),e($R,Bro),e(uh,Pro),e(ee,$ro),e(ee,bh),e(bh,Hee),e(Hee,Iro),e(bh,qro),e(bh,IR),e(IR,Nro),e(bh,jro),e(ee,Dro),e(ee,Fh),e(Fh,Uee),e(Uee,Gro),e(Fh,Oro),e(Fh,qR),e(qR,Vro),e(Fh,Xro),e(ee,zro),e(ee,vh),e(vh,Jee),e(Jee,Qro),e(vh,Wro),e(vh,NR),e(NR,Hro),e(vh,Uro),e(ee,Jro),e(ee,Th),e(Th,Yee),e(Yee,Yro),e(Th,Kro),e(Th,jR),e(jR,Zro),e(Th,eto),e(ee,oto),e(ee,Mh),e(Mh,Kee),e(Kee,rto),e(Mh,tto),e(Mh,DR),e(DR,ato),e(Mh,nto),e(ee,sto),e(ee,Eh),e(Eh,Zee),e(Zee,lto),e(Eh,ito),e(Eh,GR),e(GR,dto),e(Eh,cto),e(ee,fto),e(ee,Ch),e(Ch,eoe),e(eoe,mto),e(Ch,gto),e(Ch,OR),e(OR,hto),e(Ch,pto),e(ee,_to),e(ee,wh),e(wh,ooe),e(ooe,uto),e(wh,bto),e(wh,VR),e(VR,Fto),e(wh,vto),e(ee,Tto),e(ee,Ah),e(Ah,roe),e(roe,Mto),e(Ah,Eto),e(Ah,XR),e(XR,Cto),e(Ah,wto),e(ee,Ato),e(ee,yh),e(yh,toe),e(toe,yto),e(yh,Lto),e(yh,zR),e(zR,xto),e(yh,kto),e(ee,Sto),e(ee,Lh),e(Lh,aoe),e(aoe,Rto),e(Lh,Bto),e(Lh,QR),e(QR,Pto),e(Lh,$to),e(ee,Ito),e(ee,xh),e(xh,noe),e(noe,qto),e(xh,Nto),e(xh,WR),e(WR,jto),e(xh,Dto),e(ee,Gto),e(ee,kh),e(kh,soe),e(soe,Oto),e(kh,Vto),e(kh,HR),e(HR,Xto),e(kh,zto),e(ee,Qto),e(ee,Sh),e(Sh,loe),e(loe,Wto),e(Sh,Hto),e(Sh,UR),e(UR,Uto),e(Sh,Jto),e(ee,Yto),e(ee,Rh),e(Rh,ioe),e(ioe,Kto),e(Rh,Zto),e(Rh,JR),e(JR,eao),e(Rh,oao),e(ee,rao),e(ee,Bh),e(Bh,doe),e(doe,tao),e(Bh,aao),e(Bh,YR),e(YR,nao),e(Bh,sao),e(ee,lao),e(ee,Ph),e(Ph,coe),e(coe,iao),e(Ph,dao),e(Ph,KR),e(KR,cao),e(Ph,fao),e($e,mao),g($h,$e,null),e($e,gao),e($e,foe),e(foe,hao),e($e,pao),g(KC,$e,null),e(Ho,_ao),e(Ho,Ih),g(ZC,Ih,null),e(Ih,uao),e(Ih,moe),e(moe,bao),b(c,ORe,u),b(c,Hi,u),e(Hi,qh),e(qh,goe),g(e3,goe,null),e(Hi,Fao),e(Hi,hoe),e(hoe,vao),b(c,VRe,u),b(c,Uo,u),g(o3,Uo,null),e(Uo,Tao),e(Uo,r3),e(r3,Mao),e(r3,ZR),e(ZR,Eao),e(r3,Cao),e(Uo,wao),e(Uo,t3),e(t3,Aao),e(t3,poe),e(poe,yao),e(t3,Lao),e(Uo,xao),e(Uo,Ie),g(a3,Ie,null),e(Ie,kao),e(Ie,_oe),e(_oe,Sao),e(Ie,Rao),e(Ie,Ui),e(Ui,Bao),e(Ui,uoe),e(uoe,Pao),e(Ui,$ao),e(Ui,boe),e(boe,Iao),e(Ui,qao),e(Ie,Nao),e(Ie,ke),e(ke,Nh),e(Nh,Foe),e(Foe,jao),e(Nh,Dao),e(Nh,eB),e(eB,Gao),e(Nh,Oao),e(ke,Vao),e(ke,jh),e(jh,voe),e(voe,Xao),e(jh,zao),e(jh,oB),e(oB,Qao),e(jh,Wao),e(ke,Hao),e(ke,Dh),e(Dh,Toe),e(Toe,Uao),e(Dh,Jao),e(Dh,rB),e(rB,Yao),e(Dh,Kao),e(ke,Zao),e(ke,Gh),e(Gh,Moe),e(Moe,eno),e(Gh,ono),e(Gh,tB),e(tB,rno),e(Gh,tno),e(ke,ano),e(ke,Oh),e(Oh,Eoe),e(Eoe,nno),e(Oh,sno),e(Oh,aB),e(aB,lno),e(Oh,ino),e(ke,dno),e(ke,Vh),e(Vh,Coe),e(Coe,cno),e(Vh,fno),e(Vh,nB),e(nB,mno),e(Vh,gno),e(ke,hno),e(ke,Xh),e(Xh,woe),e(woe,pno),e(Xh,_no),e(Xh,sB),e(sB,uno),e(Xh,bno),e(ke,Fno),e(ke,zh),e(zh,Aoe),e(Aoe,vno),e(zh,Tno),e(zh,lB),e(lB,Mno),e(zh,Eno),e(Ie,Cno),g(Qh,Ie,null),e(Ie,wno),e(Ie,yoe),e(yoe,Ano),e(Ie,yno),g(n3,Ie,null),e(Uo,Lno),e(Uo,Wh),g(s3,Wh,null),e(Wh,xno),e(Wh,Loe),e(Loe,kno),b(c,XRe,u),b(c,Ji,u),e(Ji,Hh),e(Hh,xoe),g(l3,xoe,null),e(Ji,Sno),e(Ji,koe),e(koe,Rno),b(c,zRe,u),b(c,Jo,u),g(i3,Jo,null),e(Jo,Bno),e(Jo,Yi),e(Yi,Pno),e(Yi,iB),e(iB,$no),e(Yi,Ino),e(Yi,dB),e(dB,qno),e(Yi,Nno),e(Jo,jno),e(Jo,d3),e(d3,Dno),e(d3,Soe),e(Soe,Gno),e(d3,Ono),e(Jo,Vno),e(Jo,Xr),g(c3,Xr,null),e(Xr,Xno),e(Xr,Roe),e(Roe,zno),e(Xr,Qno),e(Xr,Ki),e(Ki,Wno),e(Ki,Boe),e(Boe,Hno),e(Ki,Uno),e(Ki,cB),e(cB,Jno),e(Ki,Yno),e(Xr,Kno),e(Xr,Poe),e(Poe,Zno),e(Xr,eso),g(f3,Xr,null),e(Jo,oso),e(Jo,qe),g(m3,qe,null),e(qe,rso),e(qe,$oe),e($oe,tso),e(qe,aso),e(qe,Xa),e(Xa,nso),e(Xa,Ioe),e(Ioe,sso),e(Xa,lso),e(Xa,qoe),e(qoe,iso),e(Xa,dso),e(Xa,Noe),e(Noe,cso),e(Xa,fso),e(qe,mso),e(qe,T),e(T,Uh),e(Uh,joe),e(joe,gso),e(Uh,hso),e(Uh,fB),e(fB,pso),e(Uh,_so),e(T,uso),e(T,Jh),e(Jh,Doe),e(Doe,bso),e(Jh,Fso),e(Jh,mB),e(mB,vso),e(Jh,Tso),e(T,Mso),e(T,Yh),e(Yh,Goe),e(Goe,Eso),e(Yh,Cso),e(Yh,gB),e(gB,wso),e(Yh,Aso),e(T,yso),e(T,Kh),e(Kh,Ooe),e(Ooe,Lso),e(Kh,xso),e(Kh,hB),e(hB,kso),e(Kh,Sso),e(T,Rso),e(T,Zh),e(Zh,Voe),e(Voe,Bso),e(Zh,Pso),e(Zh,pB),e(pB,$so),e(Zh,Iso),e(T,qso),e(T,ep),e(ep,Xoe),e(Xoe,Nso),e(ep,jso),e(ep,_B),e(_B,Dso),e(ep,Gso),e(T,Oso),e(T,op),e(op,zoe),e(zoe,Vso),e(op,Xso),e(op,uB),e(uB,zso),e(op,Qso),e(T,Wso),e(T,rp),e(rp,Qoe),e(Qoe,Hso),e(rp,Uso),e(rp,bB),e(bB,Jso),e(rp,Yso),e(T,Kso),e(T,tp),e(tp,Woe),e(Woe,Zso),e(tp,elo),e(tp,FB),e(FB,olo),e(tp,rlo),e(T,tlo),e(T,ap),e(ap,Hoe),e(Hoe,alo),e(ap,nlo),e(ap,vB),e(vB,slo),e(ap,llo),e(T,ilo),e(T,np),e(np,Uoe),e(Uoe,dlo),e(np,clo),e(np,TB),e(TB,flo),e(np,mlo),e(T,glo),e(T,sp),e(sp,Joe),e(Joe,hlo),e(sp,plo),e(sp,MB),e(MB,_lo),e(sp,ulo),e(T,blo),e(T,lp),e(lp,Yoe),e(Yoe,Flo),e(lp,vlo),e(lp,EB),e(EB,Tlo),e(lp,Mlo),e(T,Elo),e(T,ip),e(ip,Koe),e(Koe,Clo),e(ip,wlo),e(ip,CB),e(CB,Alo),e(ip,ylo),e(T,Llo),e(T,dp),e(dp,Zoe),e(Zoe,xlo),e(dp,klo),e(dp,wB),e(wB,Slo),e(dp,Rlo),e(T,Blo),e(T,cp),e(cp,ere),e(ere,Plo),e(cp,$lo),e(cp,AB),e(AB,Ilo),e(cp,qlo),e(T,Nlo),e(T,fp),e(fp,ore),e(ore,jlo),e(fp,Dlo),e(fp,yB),e(yB,Glo),e(fp,Olo),e(T,Vlo),e(T,mp),e(mp,rre),e(rre,Xlo),e(mp,zlo),e(mp,LB),e(LB,Qlo),e(mp,Wlo),e(T,Hlo),e(T,gp),e(gp,tre),e(tre,Ulo),e(gp,Jlo),e(gp,xB),e(xB,Ylo),e(gp,Klo),e(T,Zlo),e(T,hp),e(hp,are),e(are,eio),e(hp,oio),e(hp,kB),e(kB,rio),e(hp,tio),e(T,aio),e(T,pp),e(pp,nre),e(nre,nio),e(pp,sio),e(pp,SB),e(SB,lio),e(pp,iio),e(T,dio),e(T,_p),e(_p,sre),e(sre,cio),e(_p,fio),e(_p,RB),e(RB,mio),e(_p,gio),e(T,hio),e(T,up),e(up,lre),e(lre,pio),e(up,_io),e(up,BB),e(BB,uio),e(up,bio),e(T,Fio),e(T,bp),e(bp,ire),e(ire,vio),e(bp,Tio),e(bp,PB),e(PB,Mio),e(bp,Eio),e(T,Cio),e(T,Fp),e(Fp,dre),e(dre,wio),e(Fp,Aio),e(Fp,$B),e($B,yio),e(Fp,Lio),e(T,xio),e(T,vp),e(vp,cre),e(cre,kio),e(vp,Sio),e(vp,IB),e(IB,Rio),e(vp,Bio),e(T,Pio),e(T,Tp),e(Tp,fre),e(fre,$io),e(Tp,Iio),e(Tp,qB),e(qB,qio),e(Tp,Nio),e(T,jio),e(T,Mp),e(Mp,mre),e(mre,Dio),e(Mp,Gio),e(Mp,NB),e(NB,Oio),e(Mp,Vio),e(T,Xio),e(T,Ep),e(Ep,gre),e(gre,zio),e(Ep,Qio),e(Ep,jB),e(jB,Wio),e(Ep,Hio),e(T,Uio),e(T,js),e(js,hre),e(hre,Jio),e(js,Yio),e(js,DB),e(DB,Kio),e(js,Zio),e(js,GB),e(GB,edo),e(js,odo),e(T,rdo),e(T,Cp),e(Cp,pre),e(pre,tdo),e(Cp,ado),e(Cp,OB),e(OB,ndo),e(Cp,sdo),e(T,ldo),e(T,wp),e(wp,_re),e(_re,ido),e(wp,ddo),e(wp,VB),e(VB,cdo),e(wp,fdo),e(T,mdo),e(T,Ap),e(Ap,ure),e(ure,gdo),e(Ap,hdo),e(Ap,XB),e(XB,pdo),e(Ap,_do),e(T,udo),e(T,yp),e(yp,bre),e(bre,bdo),e(yp,Fdo),e(yp,Fre),e(Fre,vdo),e(yp,Tdo),e(T,Mdo),e(T,Lp),e(Lp,vre),e(vre,Edo),e(Lp,Cdo),e(Lp,zB),e(zB,wdo),e(Lp,Ado),e(T,ydo),e(T,xp),e(xp,Tre),e(Tre,Ldo),e(xp,xdo),e(xp,QB),e(QB,kdo),e(xp,Sdo),e(T,Rdo),e(T,kp),e(kp,Mre),e(Mre,Bdo),e(kp,Pdo),e(kp,WB),e(WB,$do),e(kp,Ido),e(T,qdo),e(T,Sp),e(Sp,Ere),e(Ere,Ndo),e(Sp,jdo),e(Sp,HB),e(HB,Ddo),e(Sp,Gdo),e(T,Odo),e(T,Rp),e(Rp,Cre),e(Cre,Vdo),e(Rp,Xdo),e(Rp,UB),e(UB,zdo),e(Rp,Qdo),e(T,Wdo),e(T,Bp),e(Bp,wre),e(wre,Hdo),e(Bp,Udo),e(Bp,JB),e(JB,Jdo),e(Bp,Ydo),e(T,Kdo),e(T,Pp),e(Pp,Are),e(Are,Zdo),e(Pp,eco),e(Pp,YB),e(YB,oco),e(Pp,rco),e(T,tco),e(T,$p),e($p,yre),e(yre,aco),e($p,nco),e($p,KB),e(KB,sco),e($p,lco),e(T,ico),e(T,Ip),e(Ip,Lre),e(Lre,dco),e(Ip,cco),e(Ip,ZB),e(ZB,fco),e(Ip,mco),e(T,gco),e(T,qp),e(qp,xre),e(xre,hco),e(qp,pco),e(qp,eP),e(eP,_co),e(qp,uco),e(T,bco),e(T,Np),e(Np,kre),e(kre,Fco),e(Np,vco),e(Np,oP),e(oP,Tco),e(Np,Mco),e(T,Eco),e(T,jp),e(jp,Sre),e(Sre,Cco),e(jp,wco),e(jp,rP),e(rP,Aco),e(jp,yco),e(T,Lco),e(T,Dp),e(Dp,Rre),e(Rre,xco),e(Dp,kco),e(Dp,tP),e(tP,Sco),e(Dp,Rco),e(T,Bco),e(T,Gp),e(Gp,Bre),e(Bre,Pco),e(Gp,$co),e(Gp,aP),e(aP,Ico),e(Gp,qco),e(T,Nco),e(T,Op),e(Op,Pre),e(Pre,jco),e(Op,Dco),e(Op,nP),e(nP,Gco),e(Op,Oco),e(T,Vco),e(T,Vp),e(Vp,$re),e($re,Xco),e(Vp,zco),e(Vp,sP),e(sP,Qco),e(Vp,Wco),e(T,Hco),e(T,Xp),e(Xp,Ire),e(Ire,Uco),e(Xp,Jco),e(Xp,lP),e(lP,Yco),e(Xp,Kco),e(T,Zco),e(T,zp),e(zp,qre),e(qre,efo),e(zp,ofo),e(zp,iP),e(iP,rfo),e(zp,tfo),e(T,afo),e(T,Qp),e(Qp,Nre),e(Nre,nfo),e(Qp,sfo),e(Qp,dP),e(dP,lfo),e(Qp,ifo),e(T,dfo),e(T,Wp),e(Wp,jre),e(jre,cfo),e(Wp,ffo),e(Wp,cP),e(cP,mfo),e(Wp,gfo),e(T,hfo),e(T,Hp),e(Hp,Dre),e(Dre,pfo),e(Hp,_fo),e(Hp,fP),e(fP,ufo),e(Hp,bfo),e(T,Ffo),e(T,Up),e(Up,Gre),e(Gre,vfo),e(Up,Tfo),e(Up,mP),e(mP,Mfo),e(Up,Efo),e(T,Cfo),e(T,Jp),e(Jp,Ore),e(Ore,wfo),e(Jp,Afo),e(Jp,gP),e(gP,yfo),e(Jp,Lfo),e(T,xfo),e(T,Yp),e(Yp,Vre),e(Vre,kfo),e(Yp,Sfo),e(Yp,hP),e(hP,Rfo),e(Yp,Bfo),e(T,Pfo),e(T,Kp),e(Kp,Xre),e(Xre,$fo),e(Kp,Ifo),e(Kp,pP),e(pP,qfo),e(Kp,Nfo),e(T,jfo),e(T,Zp),e(Zp,zre),e(zre,Dfo),e(Zp,Gfo),e(Zp,_P),e(_P,Ofo),e(Zp,Vfo),e(T,Xfo),e(T,e_),e(e_,Qre),e(Qre,zfo),e(e_,Qfo),e(e_,uP),e(uP,Wfo),e(e_,Hfo),e(T,Ufo),e(T,o_),e(o_,Wre),e(Wre,Jfo),e(o_,Yfo),e(o_,bP),e(bP,Kfo),e(o_,Zfo),e(T,emo),e(T,r_),e(r_,Hre),e(Hre,omo),e(r_,rmo),e(r_,FP),e(FP,tmo),e(r_,amo),e(T,nmo),e(T,t_),e(t_,Ure),e(Ure,smo),e(t_,lmo),e(t_,vP),e(vP,imo),e(t_,dmo),e(T,cmo),e(T,a_),e(a_,Jre),e(Jre,fmo),e(a_,mmo),e(a_,TP),e(TP,gmo),e(a_,hmo),e(T,pmo),e(T,n_),e(n_,Yre),e(Yre,_mo),e(n_,umo),e(n_,MP),e(MP,bmo),e(n_,Fmo),e(T,vmo),e(T,s_),e(s_,Kre),e(Kre,Tmo),e(s_,Mmo),e(s_,EP),e(EP,Emo),e(s_,Cmo),e(T,wmo),e(T,l_),e(l_,Zre),e(Zre,Amo),e(l_,ymo),e(l_,CP),e(CP,Lmo),e(l_,xmo),e(T,kmo),e(T,i_),e(i_,ete),e(ete,Smo),e(i_,Rmo),e(i_,wP),e(wP,Bmo),e(i_,Pmo),e(T,$mo),e(T,d_),e(d_,ote),e(ote,Imo),e(d_,qmo),e(d_,AP),e(AP,Nmo),e(d_,jmo),e(T,Dmo),e(T,c_),e(c_,rte),e(rte,Gmo),e(c_,Omo),e(c_,yP),e(yP,Vmo),e(c_,Xmo),e(T,zmo),e(T,f_),e(f_,tte),e(tte,Qmo),e(f_,Wmo),e(f_,LP),e(LP,Hmo),e(f_,Umo),e(T,Jmo),e(T,m_),e(m_,ate),e(ate,Ymo),e(m_,Kmo),e(m_,xP),e(xP,Zmo),e(m_,ego),e(T,ogo),e(T,g_),e(g_,nte),e(nte,rgo),e(g_,tgo),e(g_,kP),e(kP,ago),e(g_,ngo),e(T,sgo),e(T,h_),e(h_,ste),e(ste,lgo),e(h_,igo),e(h_,SP),e(SP,dgo),e(h_,cgo),e(T,fgo),e(T,p_),e(p_,lte),e(lte,mgo),e(p_,ggo),e(p_,RP),e(RP,hgo),e(p_,pgo),e(T,_go),e(T,__),e(__,ite),e(ite,ugo),e(__,bgo),e(__,BP),e(BP,Fgo),e(__,vgo),e(T,Tgo),e(T,u_),e(u_,dte),e(dte,Mgo),e(u_,Ego),e(u_,PP),e(PP,Cgo),e(u_,wgo),e(T,Ago),e(T,b_),e(b_,cte),e(cte,ygo),e(b_,Lgo),e(b_,$P),e($P,xgo),e(b_,kgo),e(T,Sgo),e(T,F_),e(F_,fte),e(fte,Rgo),e(F_,Bgo),e(F_,IP),e(IP,Pgo),e(F_,$go),e(T,Igo),e(T,v_),e(v_,mte),e(mte,qgo),e(v_,Ngo),e(v_,qP),e(qP,jgo),e(v_,Dgo),e(T,Ggo),e(T,T_),e(T_,gte),e(gte,Ogo),e(T_,Vgo),e(T_,NP),e(NP,Xgo),e(T_,zgo),e(T,Qgo),e(T,M_),e(M_,hte),e(hte,Wgo),e(M_,Hgo),e(M_,jP),e(jP,Ugo),e(M_,Jgo),e(T,Ygo),e(T,E_),e(E_,pte),e(pte,Kgo),e(E_,Zgo),e(E_,DP),e(DP,eho),e(E_,oho),e(T,rho),e(T,C_),e(C_,_te),e(_te,tho),e(C_,aho),e(C_,GP),e(GP,nho),e(C_,sho),e(T,lho),e(T,w_),e(w_,ute),e(ute,iho),e(w_,dho),e(w_,OP),e(OP,cho),e(w_,fho),e(T,mho),e(T,A_),e(A_,bte),e(bte,gho),e(A_,hho),e(A_,VP),e(VP,pho),e(A_,_ho),e(T,uho),e(T,y_),e(y_,Fte),e(Fte,bho),e(y_,Fho),e(y_,XP),e(XP,vho),e(y_,Tho),e(T,Mho),e(T,L_),e(L_,vte),e(vte,Eho),e(L_,Cho),e(L_,zP),e(zP,who),e(L_,Aho),e(T,yho),e(T,x_),e(x_,Tte),e(Tte,Lho),e(x_,xho),e(x_,QP),e(QP,kho),e(x_,Sho),e(T,Rho),e(T,k_),e(k_,Mte),e(Mte,Bho),e(k_,Pho),e(k_,WP),e(WP,$ho),e(k_,Iho),e(T,qho),e(T,S_),e(S_,Ete),e(Ete,Nho),e(S_,jho),e(S_,HP),e(HP,Dho),e(S_,Gho),e(T,Oho),e(T,R_),e(R_,Cte),e(Cte,Vho),e(R_,Xho),e(R_,UP),e(UP,zho),e(R_,Qho),e(T,Who),e(T,B_),e(B_,wte),e(wte,Hho),e(B_,Uho),e(B_,JP),e(JP,Jho),e(B_,Yho),e(qe,Kho),e(qe,P_),e(P_,Zho),e(P_,Ate),e(Ate,epo),e(P_,opo),e(P_,yte),e(yte,rpo),e(qe,tpo),e(qe,Lte),e(Lte,apo),e(qe,npo),g(g3,qe,null),b(c,QRe,u),b(c,Zi,u),e(Zi,$_),e($_,xte),g(h3,xte,null),e(Zi,spo),e(Zi,kte),e(kte,lpo),b(c,WRe,u),b(c,Yo,u),g(p3,Yo,null),e(Yo,ipo),e(Yo,ed),e(ed,dpo),e(ed,YP),e(YP,cpo),e(ed,fpo),e(ed,KP),e(KP,mpo),e(ed,gpo),e(Yo,hpo),e(Yo,_3),e(_3,ppo),e(_3,Ste),e(Ste,_po),e(_3,upo),e(Yo,bpo),e(Yo,zr),g(u3,zr,null),e(zr,Fpo),e(zr,Rte),e(Rte,vpo),e(zr,Tpo),e(zr,od),e(od,Mpo),e(od,Bte),e(Bte,Epo),e(od,Cpo),e(od,ZP),e(ZP,wpo),e(od,Apo),e(zr,ypo),e(zr,Pte),e(Pte,Lpo),e(zr,xpo),g(b3,zr,null),e(Yo,kpo),e(Yo,Ne),g(F3,Ne,null),e(Ne,Spo),e(Ne,$te),e($te,Rpo),e(Ne,Bpo),e(Ne,za),e(za,Ppo),e(za,Ite),e(Ite,$po),e(za,Ipo),e(za,qte),e(qte,qpo),e(za,Npo),e(za,Nte),e(Nte,jpo),e(za,Dpo),e(Ne,Gpo),e(Ne,R),e(R,I_),e(I_,jte),e(jte,Opo),e(I_,Vpo),e(I_,e$),e(e$,Xpo),e(I_,zpo),e(R,Qpo),e(R,q_),e(q_,Dte),e(Dte,Wpo),e(q_,Hpo),e(q_,o$),e(o$,Upo),e(q_,Jpo),e(R,Ypo),e(R,N_),e(N_,Gte),e(Gte,Kpo),e(N_,Zpo),e(N_,r$),e(r$,e_o),e(N_,o_o),e(R,r_o),e(R,j_),e(j_,Ote),e(Ote,t_o),e(j_,a_o),e(j_,t$),e(t$,n_o),e(j_,s_o),e(R,l_o),e(R,D_),e(D_,Vte),e(Vte,i_o),e(D_,d_o),e(D_,a$),e(a$,c_o),e(D_,f_o),e(R,m_o),e(R,G_),e(G_,Xte),e(Xte,g_o),e(G_,h_o),e(G_,n$),e(n$,p_o),e(G_,__o),e(R,u_o),e(R,O_),e(O_,zte),e(zte,b_o),e(O_,F_o),e(O_,s$),e(s$,v_o),e(O_,T_o),e(R,M_o),e(R,V_),e(V_,Qte),e(Qte,E_o),e(V_,C_o),e(V_,l$),e(l$,w_o),e(V_,A_o),e(R,y_o),e(R,X_),e(X_,Wte),e(Wte,L_o),e(X_,x_o),e(X_,i$),e(i$,k_o),e(X_,S_o),e(R,R_o),e(R,z_),e(z_,Hte),e(Hte,B_o),e(z_,P_o),e(z_,d$),e(d$,$_o),e(z_,I_o),e(R,q_o),e(R,Q_),e(Q_,Ute),e(Ute,N_o),e(Q_,j_o),e(Q_,c$),e(c$,D_o),e(Q_,G_o),e(R,O_o),e(R,W_),e(W_,Jte),e(Jte,V_o),e(W_,X_o),e(W_,f$),e(f$,z_o),e(W_,Q_o),e(R,W_o),e(R,H_),e(H_,Yte),e(Yte,H_o),e(H_,U_o),e(H_,m$),e(m$,J_o),e(H_,Y_o),e(R,K_o),e(R,U_),e(U_,Kte),e(Kte,Z_o),e(U_,euo),e(U_,g$),e(g$,ouo),e(U_,ruo),e(R,tuo),e(R,J_),e(J_,Zte),e(Zte,auo),e(J_,nuo),e(J_,h$),e(h$,suo),e(J_,luo),e(R,iuo),e(R,Y_),e(Y_,eae),e(eae,duo),e(Y_,cuo),e(Y_,p$),e(p$,fuo),e(Y_,muo),e(R,guo),e(R,K_),e(K_,oae),e(oae,huo),e(K_,puo),e(K_,_$),e(_$,_uo),e(K_,uuo),e(R,buo),e(R,Z_),e(Z_,rae),e(rae,Fuo),e(Z_,vuo),e(Z_,u$),e(u$,Tuo),e(Z_,Muo),e(R,Euo),e(R,eu),e(eu,tae),e(tae,Cuo),e(eu,wuo),e(eu,b$),e(b$,Auo),e(eu,yuo),e(R,Luo),e(R,ou),e(ou,aae),e(aae,xuo),e(ou,kuo),e(ou,F$),e(F$,Suo),e(ou,Ruo),e(R,Buo),e(R,ru),e(ru,nae),e(nae,Puo),e(ru,$uo),e(ru,v$),e(v$,Iuo),e(ru,quo),e(R,Nuo),e(R,tu),e(tu,sae),e(sae,juo),e(tu,Duo),e(tu,T$),e(T$,Guo),e(tu,Ouo),e(R,Vuo),e(R,au),e(au,lae),e(lae,Xuo),e(au,zuo),e(au,M$),e(M$,Quo),e(au,Wuo),e(R,Huo),e(R,nu),e(nu,iae),e(iae,Uuo),e(nu,Juo),e(nu,E$),e(E$,Yuo),e(nu,Kuo),e(R,Zuo),e(R,su),e(su,dae),e(dae,e6o),e(su,o6o),e(su,C$),e(C$,r6o),e(su,t6o),e(R,a6o),e(R,lu),e(lu,cae),e(cae,n6o),e(lu,s6o),e(lu,w$),e(w$,l6o),e(lu,i6o),e(R,d6o),e(R,iu),e(iu,fae),e(fae,c6o),e(iu,f6o),e(iu,A$),e(A$,m6o),e(iu,g6o),e(R,h6o),e(R,du),e(du,mae),e(mae,p6o),e(du,_6o),e(du,y$),e(y$,u6o),e(du,b6o),e(R,F6o),e(R,cu),e(cu,gae),e(gae,v6o),e(cu,T6o),e(cu,L$),e(L$,M6o),e(cu,E6o),e(R,C6o),e(R,fu),e(fu,hae),e(hae,w6o),e(fu,A6o),e(fu,x$),e(x$,y6o),e(fu,L6o),e(R,x6o),e(R,mu),e(mu,pae),e(pae,k6o),e(mu,S6o),e(mu,k$),e(k$,R6o),e(mu,B6o),e(R,P6o),e(R,gu),e(gu,_ae),e(_ae,$6o),e(gu,I6o),e(gu,S$),e(S$,q6o),e(gu,N6o),e(R,j6o),e(R,hu),e(hu,uae),e(uae,D6o),e(hu,G6o),e(hu,R$),e(R$,O6o),e(hu,V6o),e(R,X6o),e(R,pu),e(pu,bae),e(bae,z6o),e(pu,Q6o),e(pu,B$),e(B$,W6o),e(pu,H6o),e(R,U6o),e(R,_u),e(_u,Fae),e(Fae,J6o),e(_u,Y6o),e(_u,P$),e(P$,K6o),e(_u,Z6o),e(R,e1o),e(R,uu),e(uu,vae),e(vae,o1o),e(uu,r1o),e(uu,$$),e($$,t1o),e(uu,a1o),e(R,n1o),e(R,bu),e(bu,Tae),e(Tae,s1o),e(bu,l1o),e(bu,I$),e(I$,i1o),e(bu,d1o),e(R,c1o),e(R,Fu),e(Fu,Mae),e(Mae,f1o),e(Fu,m1o),e(Fu,q$),e(q$,g1o),e(Fu,h1o),e(R,p1o),e(R,vu),e(vu,Eae),e(Eae,_1o),e(vu,u1o),e(vu,N$),e(N$,b1o),e(vu,F1o),e(Ne,v1o),e(Ne,Tu),e(Tu,T1o),e(Tu,Cae),e(Cae,M1o),e(Tu,E1o),e(Tu,wae),e(wae,C1o),e(Ne,w1o),e(Ne,Aae),e(Aae,A1o),e(Ne,y1o),g(v3,Ne,null),b(c,HRe,u),b(c,rd,u),e(rd,Mu),e(Mu,yae),g(T3,yae,null),e(rd,L1o),e(rd,Lae),e(Lae,x1o),b(c,URe,u),b(c,Ko,u),g(M3,Ko,null),e(Ko,k1o),e(Ko,td),e(td,S1o),e(td,j$),e(j$,R1o),e(td,B1o),e(td,D$),e(D$,P1o),e(td,$1o),e(Ko,I1o),e(Ko,E3),e(E3,q1o),e(E3,xae),e(xae,N1o),e(E3,j1o),e(Ko,D1o),e(Ko,Qr),g(C3,Qr,null),e(Qr,G1o),e(Qr,kae),e(kae,O1o),e(Qr,V1o),e(Qr,ad),e(ad,X1o),e(ad,Sae),e(Sae,z1o),e(ad,Q1o),e(ad,G$),e(G$,W1o),e(ad,H1o),e(Qr,U1o),e(Qr,Rae),e(Rae,J1o),e(Qr,Y1o),g(w3,Qr,null),e(Ko,K1o),e(Ko,je),g(A3,je,null),e(je,Z1o),e(je,Bae),e(Bae,ebo),e(je,obo),e(je,Qa),e(Qa,rbo),e(Qa,Pae),e(Pae,tbo),e(Qa,abo),e(Qa,$ae),e($ae,nbo),e(Qa,sbo),e(Qa,Iae),e(Iae,lbo),e(Qa,ibo),e(je,dbo),e(je,$),e($,Eu),e(Eu,qae),e(qae,cbo),e(Eu,fbo),e(Eu,O$),e(O$,mbo),e(Eu,gbo),e($,hbo),e($,Cu),e(Cu,Nae),e(Nae,pbo),e(Cu,_bo),e(Cu,V$),e(V$,ubo),e(Cu,bbo),e($,Fbo),e($,wu),e(wu,jae),e(jae,vbo),e(wu,Tbo),e(wu,X$),e(X$,Mbo),e(wu,Ebo),e($,Cbo),e($,Au),e(Au,Dae),e(Dae,wbo),e(Au,Abo),e(Au,z$),e(z$,ybo),e(Au,Lbo),e($,xbo),e($,yu),e(yu,Gae),e(Gae,kbo),e(yu,Sbo),e(yu,Q$),e(Q$,Rbo),e(yu,Bbo),e($,Pbo),e($,Lu),e(Lu,Oae),e(Oae,$bo),e(Lu,Ibo),e(Lu,W$),e(W$,qbo),e(Lu,Nbo),e($,jbo),e($,xu),e(xu,Vae),e(Vae,Dbo),e(xu,Gbo),e(xu,H$),e(H$,Obo),e(xu,Vbo),e($,Xbo),e($,ku),e(ku,Xae),e(Xae,zbo),e(ku,Qbo),e(ku,U$),e(U$,Wbo),e(ku,Hbo),e($,Ubo),e($,Su),e(Su,zae),e(zae,Jbo),e(Su,Ybo),e(Su,J$),e(J$,Kbo),e(Su,Zbo),e($,e5o),e($,Ru),e(Ru,Qae),e(Qae,o5o),e(Ru,r5o),e(Ru,Y$),e(Y$,t5o),e(Ru,a5o),e($,n5o),e($,Bu),e(Bu,Wae),e(Wae,s5o),e(Bu,l5o),e(Bu,K$),e(K$,i5o),e(Bu,d5o),e($,c5o),e($,Pu),e(Pu,Hae),e(Hae,f5o),e(Pu,m5o),e(Pu,Z$),e(Z$,g5o),e(Pu,h5o),e($,p5o),e($,$u),e($u,Uae),e(Uae,_5o),e($u,u5o),e($u,eI),e(eI,b5o),e($u,F5o),e($,v5o),e($,Iu),e(Iu,Jae),e(Jae,T5o),e(Iu,M5o),e(Iu,Yae),e(Yae,E5o),e(Iu,C5o),e($,w5o),e($,qu),e(qu,Kae),e(Kae,A5o),e(qu,y5o),e(qu,oI),e(oI,L5o),e(qu,x5o),e($,k5o),e($,Nu),e(Nu,Zae),e(Zae,S5o),e(Nu,R5o),e(Nu,rI),e(rI,B5o),e(Nu,P5o),e($,$5o),e($,ju),e(ju,ene),e(ene,I5o),e(ju,q5o),e(ju,tI),e(tI,N5o),e(ju,j5o),e($,D5o),e($,Du),e(Du,one),e(one,G5o),e(Du,O5o),e(Du,aI),e(aI,V5o),e(Du,X5o),e($,z5o),e($,Gu),e(Gu,rne),e(rne,Q5o),e(Gu,W5o),e(Gu,nI),e(nI,H5o),e(Gu,U5o),e($,J5o),e($,Ou),e(Ou,tne),e(tne,Y5o),e(Ou,K5o),e(Ou,sI),e(sI,Z5o),e(Ou,e2o),e($,o2o),e($,Vu),e(Vu,ane),e(ane,r2o),e(Vu,t2o),e(Vu,lI),e(lI,a2o),e(Vu,n2o),e($,s2o),e($,Xu),e(Xu,nne),e(nne,l2o),e(Xu,i2o),e(Xu,iI),e(iI,d2o),e(Xu,c2o),e($,f2o),e($,zu),e(zu,sne),e(sne,m2o),e(zu,g2o),e(zu,dI),e(dI,h2o),e(zu,p2o),e($,_2o),e($,Qu),e(Qu,lne),e(lne,u2o),e(Qu,b2o),e(Qu,cI),e(cI,F2o),e(Qu,v2o),e($,T2o),e($,Wu),e(Wu,ine),e(ine,M2o),e(Wu,E2o),e(Wu,fI),e(fI,C2o),e(Wu,w2o),e($,A2o),e($,Hu),e(Hu,dne),e(dne,y2o),e(Hu,L2o),e(Hu,mI),e(mI,x2o),e(Hu,k2o),e($,S2o),e($,Uu),e(Uu,cne),e(cne,R2o),e(Uu,B2o),e(Uu,gI),e(gI,P2o),e(Uu,$2o),e($,I2o),e($,Ju),e(Ju,fne),e(fne,q2o),e(Ju,N2o),e(Ju,hI),e(hI,j2o),e(Ju,D2o),e($,G2o),e($,Yu),e(Yu,mne),e(mne,O2o),e(Yu,V2o),e(Yu,pI),e(pI,X2o),e(Yu,z2o),e($,Q2o),e($,Ku),e(Ku,gne),e(gne,W2o),e(Ku,H2o),e(Ku,_I),e(_I,U2o),e(Ku,J2o),e($,Y2o),e($,Zu),e(Zu,hne),e(hne,K2o),e(Zu,Z2o),e(Zu,uI),e(uI,eFo),e(Zu,oFo),e($,rFo),e($,e6),e(e6,pne),e(pne,tFo),e(e6,aFo),e(e6,bI),e(bI,nFo),e(e6,sFo),e($,lFo),e($,o6),e(o6,_ne),e(_ne,iFo),e(o6,dFo),e(o6,FI),e(FI,cFo),e(o6,fFo),e($,mFo),e($,r6),e(r6,une),e(une,gFo),e(r6,hFo),e(r6,vI),e(vI,pFo),e(r6,_Fo),e($,uFo),e($,t6),e(t6,bne),e(bne,bFo),e(t6,FFo),e(t6,TI),e(TI,vFo),e(t6,TFo),e($,MFo),e($,a6),e(a6,Fne),e(Fne,EFo),e(a6,CFo),e(a6,MI),e(MI,wFo),e(a6,AFo),e(je,yFo),e(je,n6),e(n6,LFo),e(n6,vne),e(vne,xFo),e(n6,kFo),e(n6,Tne),e(Tne,SFo),e(je,RFo),e(je,Mne),e(Mne,BFo),e(je,PFo),g(y3,je,null),b(c,JRe,u),b(c,nd,u),e(nd,s6),e(s6,Ene),g(L3,Ene,null),e(nd,$Fo),e(nd,Cne),e(Cne,IFo),b(c,YRe,u),b(c,Zo,u),g(x3,Zo,null),e(Zo,qFo),e(Zo,sd),e(sd,NFo),e(sd,EI),e(EI,jFo),e(sd,DFo),e(sd,CI),e(CI,GFo),e(sd,OFo),e(Zo,VFo),e(Zo,k3),e(k3,XFo),e(k3,wne),e(wne,zFo),e(k3,QFo),e(Zo,WFo),e(Zo,Wr),g(S3,Wr,null),e(Wr,HFo),e(Wr,Ane),e(Ane,UFo),e(Wr,JFo),e(Wr,ld),e(ld,YFo),e(ld,yne),e(yne,KFo),e(ld,ZFo),e(ld,wI),e(wI,evo),e(ld,ovo),e(Wr,rvo),e(Wr,Lne),e(Lne,tvo),e(Wr,avo),g(R3,Wr,null),e(Zo,nvo),e(Zo,De),g(B3,De,null),e(De,svo),e(De,xne),e(xne,lvo),e(De,ivo),e(De,Wa),e(Wa,dvo),e(Wa,kne),e(kne,cvo),e(Wa,fvo),e(Wa,Sne),e(Sne,mvo),e(Wa,gvo),e(Wa,Rne),e(Rne,hvo),e(Wa,pvo),e(De,_vo),e(De,I),e(I,l6),e(l6,Bne),e(Bne,uvo),e(l6,bvo),e(l6,AI),e(AI,Fvo),e(l6,vvo),e(I,Tvo),e(I,i6),e(i6,Pne),e(Pne,Mvo),e(i6,Evo),e(i6,yI),e(yI,Cvo),e(i6,wvo),e(I,Avo),e(I,d6),e(d6,$ne),e($ne,yvo),e(d6,Lvo),e(d6,LI),e(LI,xvo),e(d6,kvo),e(I,Svo),e(I,c6),e(c6,Ine),e(Ine,Rvo),e(c6,Bvo),e(c6,xI),e(xI,Pvo),e(c6,$vo),e(I,Ivo),e(I,f6),e(f6,qne),e(qne,qvo),e(f6,Nvo),e(f6,kI),e(kI,jvo),e(f6,Dvo),e(I,Gvo),e(I,m6),e(m6,Nne),e(Nne,Ovo),e(m6,Vvo),e(m6,SI),e(SI,Xvo),e(m6,zvo),e(I,Qvo),e(I,g6),e(g6,jne),e(jne,Wvo),e(g6,Hvo),e(g6,RI),e(RI,Uvo),e(g6,Jvo),e(I,Yvo),e(I,h6),e(h6,Dne),e(Dne,Kvo),e(h6,Zvo),e(h6,BI),e(BI,eTo),e(h6,oTo),e(I,rTo),e(I,p6),e(p6,Gne),e(Gne,tTo),e(p6,aTo),e(p6,PI),e(PI,nTo),e(p6,sTo),e(I,lTo),e(I,_6),e(_6,One),e(One,iTo),e(_6,dTo),e(_6,$I),e($I,cTo),e(_6,fTo),e(I,mTo),e(I,u6),e(u6,Vne),e(Vne,gTo),e(u6,hTo),e(u6,II),e(II,pTo),e(u6,_To),e(I,uTo),e(I,b6),e(b6,Xne),e(Xne,bTo),e(b6,FTo),e(b6,qI),e(qI,vTo),e(b6,TTo),e(I,MTo),e(I,F6),e(F6,zne),e(zne,ETo),e(F6,CTo),e(F6,NI),e(NI,wTo),e(F6,ATo),e(I,yTo),e(I,v6),e(v6,Qne),e(Qne,LTo),e(v6,xTo),e(v6,jI),e(jI,kTo),e(v6,STo),e(I,RTo),e(I,T6),e(T6,Wne),e(Wne,BTo),e(T6,PTo),e(T6,Hne),e(Hne,$To),e(T6,ITo),e(I,qTo),e(I,M6),e(M6,Une),e(Une,NTo),e(M6,jTo),e(M6,DI),e(DI,DTo),e(M6,GTo),e(I,OTo),e(I,E6),e(E6,Jne),e(Jne,VTo),e(E6,XTo),e(E6,GI),e(GI,zTo),e(E6,QTo),e(I,WTo),e(I,C6),e(C6,Yne),e(Yne,HTo),e(C6,UTo),e(C6,OI),e(OI,JTo),e(C6,YTo),e(I,KTo),e(I,w6),e(w6,Kne),e(Kne,ZTo),e(w6,e9o),e(w6,VI),e(VI,o9o),e(w6,r9o),e(I,t9o),e(I,A6),e(A6,Zne),e(Zne,a9o),e(A6,n9o),e(A6,XI),e(XI,s9o),e(A6,l9o),e(I,i9o),e(I,y6),e(y6,ese),e(ese,d9o),e(y6,c9o),e(y6,zI),e(zI,f9o),e(y6,m9o),e(I,g9o),e(I,L6),e(L6,ose),e(ose,h9o),e(L6,p9o),e(L6,QI),e(QI,_9o),e(L6,u9o),e(I,b9o),e(I,x6),e(x6,rse),e(rse,F9o),e(x6,v9o),e(x6,WI),e(WI,T9o),e(x6,M9o),e(I,E9o),e(I,k6),e(k6,tse),e(tse,C9o),e(k6,w9o),e(k6,HI),e(HI,A9o),e(k6,y9o),e(I,L9o),e(I,S6),e(S6,ase),e(ase,x9o),e(S6,k9o),e(S6,UI),e(UI,S9o),e(S6,R9o),e(I,B9o),e(I,R6),e(R6,nse),e(nse,P9o),e(R6,$9o),e(R6,JI),e(JI,I9o),e(R6,q9o),e(I,N9o),e(I,B6),e(B6,sse),e(sse,j9o),e(B6,D9o),e(B6,YI),e(YI,G9o),e(B6,O9o),e(I,V9o),e(I,P6),e(P6,lse),e(lse,X9o),e(P6,z9o),e(P6,KI),e(KI,Q9o),e(P6,W9o),e(I,H9o),e(I,$6),e($6,ise),e(ise,U9o),e($6,J9o),e($6,ZI),e(ZI,Y9o),e($6,K9o),e(I,Z9o),e(I,I6),e(I6,dse),e(dse,eMo),e(I6,oMo),e(I6,eq),e(eq,rMo),e(I6,tMo),e(I,aMo),e(I,q6),e(q6,cse),e(cse,nMo),e(q6,sMo),e(q6,oq),e(oq,lMo),e(q6,iMo),e(I,dMo),e(I,N6),e(N6,fse),e(fse,cMo),e(N6,fMo),e(N6,mse),e(mse,mMo),e(N6,gMo),e(I,hMo),e(I,j6),e(j6,gse),e(gse,pMo),e(j6,_Mo),e(j6,rq),e(rq,uMo),e(j6,bMo),e(I,FMo),e(I,D6),e(D6,hse),e(hse,vMo),e(D6,TMo),e(D6,tq),e(tq,MMo),e(D6,EMo),e(I,CMo),e(I,G6),e(G6,pse),e(pse,wMo),e(G6,AMo),e(G6,aq),e(aq,yMo),e(G6,LMo),e(I,xMo),e(I,O6),e(O6,_se),e(_se,kMo),e(O6,SMo),e(O6,nq),e(nq,RMo),e(O6,BMo),e(De,PMo),e(De,V6),e(V6,$Mo),e(V6,use),e(use,IMo),e(V6,qMo),e(V6,bse),e(bse,NMo),e(De,jMo),e(De,Fse),e(Fse,DMo),e(De,GMo),g(P3,De,null),b(c,KRe,u),b(c,id,u),e(id,X6),e(X6,vse),g($3,vse,null),e(id,OMo),e(id,Tse),e(Tse,VMo),b(c,ZRe,u),b(c,er,u),g(I3,er,null),e(er,XMo),e(er,dd),e(dd,zMo),e(dd,sq),e(sq,QMo),e(dd,WMo),e(dd,lq),e(lq,HMo),e(dd,UMo),e(er,JMo),e(er,q3),e(q3,YMo),e(q3,Mse),e(Mse,KMo),e(q3,ZMo),e(er,e4o),e(er,Hr),g(N3,Hr,null),e(Hr,o4o),e(Hr,Ese),e(Ese,r4o),e(Hr,t4o),e(Hr,cd),e(cd,a4o),e(cd,Cse),e(Cse,n4o),e(cd,s4o),e(cd,iq),e(iq,l4o),e(cd,i4o),e(Hr,d4o),e(Hr,wse),e(wse,c4o),e(Hr,f4o),g(j3,Hr,null),e(er,m4o),e(er,Ge),g(D3,Ge,null),e(Ge,g4o),e(Ge,Ase),e(Ase,h4o),e(Ge,p4o),e(Ge,Ha),e(Ha,_4o),e(Ha,yse),e(yse,u4o),e(Ha,b4o),e(Ha,Lse),e(Lse,F4o),e(Ha,v4o),e(Ha,xse),e(xse,T4o),e(Ha,M4o),e(Ge,E4o),e(Ge,se),e(se,z6),e(z6,kse),e(kse,C4o),e(z6,w4o),e(z6,dq),e(dq,A4o),e(z6,y4o),e(se,L4o),e(se,Q6),e(Q6,Sse),e(Sse,x4o),e(Q6,k4o),e(Q6,cq),e(cq,S4o),e(Q6,R4o),e(se,B4o),e(se,W6),e(W6,Rse),e(Rse,P4o),e(W6,$4o),e(W6,fq),e(fq,I4o),e(W6,q4o),e(se,N4o),e(se,H6),e(H6,Bse),e(Bse,j4o),e(H6,D4o),e(H6,mq),e(mq,G4o),e(H6,O4o),e(se,V4o),e(se,U6),e(U6,Pse),e(Pse,X4o),e(U6,z4o),e(U6,gq),e(gq,Q4o),e(U6,W4o),e(se,H4o),e(se,J6),e(J6,$se),e($se,U4o),e(J6,J4o),e(J6,hq),e(hq,Y4o),e(J6,K4o),e(se,Z4o),e(se,Y6),e(Y6,Ise),e(Ise,eEo),e(Y6,oEo),e(Y6,pq),e(pq,rEo),e(Y6,tEo),e(se,aEo),e(se,K6),e(K6,qse),e(qse,nEo),e(K6,sEo),e(K6,_q),e(_q,lEo),e(K6,iEo),e(se,dEo),e(se,Z6),e(Z6,Nse),e(Nse,cEo),e(Z6,fEo),e(Z6,uq),e(uq,mEo),e(Z6,gEo),e(se,hEo),e(se,e1),e(e1,jse),e(jse,pEo),e(e1,_Eo),e(e1,bq),e(bq,uEo),e(e1,bEo),e(se,FEo),e(se,o1),e(o1,Dse),e(Dse,vEo),e(o1,TEo),e(o1,Fq),e(Fq,MEo),e(o1,EEo),e(se,CEo),e(se,r1),e(r1,Gse),e(Gse,wEo),e(r1,AEo),e(r1,vq),e(vq,yEo),e(r1,LEo),e(se,xEo),e(se,t1),e(t1,Ose),e(Ose,kEo),e(t1,SEo),e(t1,Tq),e(Tq,REo),e(t1,BEo),e(se,PEo),e(se,a1),e(a1,Vse),e(Vse,$Eo),e(a1,IEo),e(a1,Mq),e(Mq,qEo),e(a1,NEo),e(se,jEo),e(se,n1),e(n1,Xse),e(Xse,DEo),e(n1,GEo),e(n1,Eq),e(Eq,OEo),e(n1,VEo),e(se,XEo),e(se,s1),e(s1,zse),e(zse,zEo),e(s1,QEo),e(s1,Cq),e(Cq,WEo),e(s1,HEo),e(Ge,UEo),e(Ge,l1),e(l1,JEo),e(l1,Qse),e(Qse,YEo),e(l1,KEo),e(l1,Wse),e(Wse,ZEo),e(Ge,eCo),e(Ge,Hse),e(Hse,oCo),e(Ge,rCo),g(G3,Ge,null),b(c,eBe,u),b(c,fd,u),e(fd,i1),e(i1,Use),g(O3,Use,null),e(fd,tCo),e(fd,Jse),e(Jse,aCo),b(c,oBe,u),b(c,or,u),g(V3,or,null),e(or,nCo),e(or,md),e(md,sCo),e(md,wq),e(wq,lCo),e(md,iCo),e(md,Aq),e(Aq,dCo),e(md,cCo),e(or,fCo),e(or,X3),e(X3,mCo),e(X3,Yse),e(Yse,gCo),e(X3,hCo),e(or,pCo),e(or,Ur),g(z3,Ur,null),e(Ur,_Co),e(Ur,Kse),e(Kse,uCo),e(Ur,bCo),e(Ur,gd),e(gd,FCo),e(gd,Zse),e(Zse,vCo),e(gd,TCo),e(gd,yq),e(yq,MCo),e(gd,ECo),e(Ur,CCo),e(Ur,ele),e(ele,wCo),e(Ur,ACo),g(Q3,Ur,null),e(or,yCo),e(or,Oe),g(W3,Oe,null),e(Oe,LCo),e(Oe,ole),e(ole,xCo),e(Oe,kCo),e(Oe,Ua),e(Ua,SCo),e(Ua,rle),e(rle,RCo),e(Ua,BCo),e(Ua,tle),e(tle,PCo),e(Ua,$Co),e(Ua,ale),e(ale,ICo),e(Ua,qCo),e(Oe,NCo),e(Oe,y),e(y,d1),e(d1,nle),e(nle,jCo),e(d1,DCo),e(d1,Lq),e(Lq,GCo),e(d1,OCo),e(y,VCo),e(y,c1),e(c1,sle),e(sle,XCo),e(c1,zCo),e(c1,xq),e(xq,QCo),e(c1,WCo),e(y,HCo),e(y,f1),e(f1,lle),e(lle,UCo),e(f1,JCo),e(f1,kq),e(kq,YCo),e(f1,KCo),e(y,ZCo),e(y,m1),e(m1,ile),e(ile,e3o),e(m1,o3o),e(m1,Sq),e(Sq,r3o),e(m1,t3o),e(y,a3o),e(y,g1),e(g1,dle),e(dle,n3o),e(g1,s3o),e(g1,Rq),e(Rq,l3o),e(g1,i3o),e(y,d3o),e(y,h1),e(h1,cle),e(cle,c3o),e(h1,f3o),e(h1,Bq),e(Bq,m3o),e(h1,g3o),e(y,h3o),e(y,p1),e(p1,fle),e(fle,p3o),e(p1,_3o),e(p1,Pq),e(Pq,u3o),e(p1,b3o),e(y,F3o),e(y,_1),e(_1,mle),e(mle,v3o),e(_1,T3o),e(_1,$q),e($q,M3o),e(_1,E3o),e(y,C3o),e(y,u1),e(u1,gle),e(gle,w3o),e(u1,A3o),e(u1,Iq),e(Iq,y3o),e(u1,L3o),e(y,x3o),e(y,b1),e(b1,hle),e(hle,k3o),e(b1,S3o),e(b1,qq),e(qq,R3o),e(b1,B3o),e(y,P3o),e(y,F1),e(F1,ple),e(ple,$3o),e(F1,I3o),e(F1,Nq),e(Nq,q3o),e(F1,N3o),e(y,j3o),e(y,v1),e(v1,_le),e(_le,D3o),e(v1,G3o),e(v1,jq),e(jq,O3o),e(v1,V3o),e(y,X3o),e(y,T1),e(T1,ule),e(ule,z3o),e(T1,Q3o),e(T1,Dq),e(Dq,W3o),e(T1,H3o),e(y,U3o),e(y,M1),e(M1,ble),e(ble,J3o),e(M1,Y3o),e(M1,Gq),e(Gq,K3o),e(M1,Z3o),e(y,ewo),e(y,E1),e(E1,Fle),e(Fle,owo),e(E1,rwo),e(E1,Oq),e(Oq,two),e(E1,awo),e(y,nwo),e(y,C1),e(C1,vle),e(vle,swo),e(C1,lwo),e(C1,Vq),e(Vq,iwo),e(C1,dwo),e(y,cwo),e(y,w1),e(w1,Tle),e(Tle,fwo),e(w1,mwo),e(w1,Xq),e(Xq,gwo),e(w1,hwo),e(y,pwo),e(y,A1),e(A1,Mle),e(Mle,_wo),e(A1,uwo),e(A1,zq),e(zq,bwo),e(A1,Fwo),e(y,vwo),e(y,y1),e(y1,Ele),e(Ele,Two),e(y1,Mwo),e(y1,Qq),e(Qq,Ewo),e(y1,Cwo),e(y,wwo),e(y,L1),e(L1,Cle),e(Cle,Awo),e(L1,ywo),e(L1,wle),e(wle,Lwo),e(L1,xwo),e(y,kwo),e(y,x1),e(x1,Ale),e(Ale,Swo),e(x1,Rwo),e(x1,Wq),e(Wq,Bwo),e(x1,Pwo),e(y,$wo),e(y,k1),e(k1,yle),e(yle,Iwo),e(k1,qwo),e(k1,Hq),e(Hq,Nwo),e(k1,jwo),e(y,Dwo),e(y,S1),e(S1,Lle),e(Lle,Gwo),e(S1,Owo),e(S1,Uq),e(Uq,Vwo),e(S1,Xwo),e(y,zwo),e(y,R1),e(R1,xle),e(xle,Qwo),e(R1,Wwo),e(R1,Jq),e(Jq,Hwo),e(R1,Uwo),e(y,Jwo),e(y,B1),e(B1,kle),e(kle,Ywo),e(B1,Kwo),e(B1,Yq),e(Yq,Zwo),e(B1,eAo),e(y,oAo),e(y,P1),e(P1,Sle),e(Sle,rAo),e(P1,tAo),e(P1,Kq),e(Kq,aAo),e(P1,nAo),e(y,sAo),e(y,$1),e($1,Rle),e(Rle,lAo),e($1,iAo),e($1,Zq),e(Zq,dAo),e($1,cAo),e(y,fAo),e(y,I1),e(I1,Ble),e(Ble,mAo),e(I1,gAo),e(I1,eN),e(eN,hAo),e(I1,pAo),e(y,_Ao),e(y,q1),e(q1,Ple),e(Ple,uAo),e(q1,bAo),e(q1,oN),e(oN,FAo),e(q1,vAo),e(y,TAo),e(y,N1),e(N1,$le),e($le,MAo),e(N1,EAo),e(N1,rN),e(rN,CAo),e(N1,wAo),e(y,AAo),e(y,j1),e(j1,Ile),e(Ile,yAo),e(j1,LAo),e(j1,tN),e(tN,xAo),e(j1,kAo),e(y,SAo),e(y,D1),e(D1,qle),e(qle,RAo),e(D1,BAo),e(D1,aN),e(aN,PAo),e(D1,$Ao),e(y,IAo),e(y,G1),e(G1,Nle),e(Nle,qAo),e(G1,NAo),e(G1,nN),e(nN,jAo),e(G1,DAo),e(y,GAo),e(y,O1),e(O1,jle),e(jle,OAo),e(O1,VAo),e(O1,sN),e(sN,XAo),e(O1,zAo),e(y,QAo),e(y,V1),e(V1,Dle),e(Dle,WAo),e(V1,HAo),e(V1,lN),e(lN,UAo),e(V1,JAo),e(y,YAo),e(y,X1),e(X1,Gle),e(Gle,KAo),e(X1,ZAo),e(X1,iN),e(iN,e0o),e(X1,o0o),e(y,r0o),e(y,z1),e(z1,Ole),e(Ole,t0o),e(z1,a0o),e(z1,dN),e(dN,n0o),e(z1,s0o),e(y,l0o),e(y,Q1),e(Q1,Vle),e(Vle,i0o),e(Q1,d0o),e(Q1,cN),e(cN,c0o),e(Q1,f0o),e(y,m0o),e(y,W1),e(W1,Xle),e(Xle,g0o),e(W1,h0o),e(W1,fN),e(fN,p0o),e(W1,_0o),e(y,u0o),e(y,H1),e(H1,zle),e(zle,b0o),e(H1,F0o),e(H1,mN),e(mN,v0o),e(H1,T0o),e(y,M0o),e(y,U1),e(U1,Qle),e(Qle,E0o),e(U1,C0o),e(U1,gN),e(gN,w0o),e(U1,A0o),e(y,y0o),e(y,J1),e(J1,Wle),e(Wle,L0o),e(J1,x0o),e(J1,hN),e(hN,k0o),e(J1,S0o),e(y,R0o),e(y,Y1),e(Y1,Hle),e(Hle,B0o),e(Y1,P0o),e(Y1,pN),e(pN,$0o),e(Y1,I0o),e(y,q0o),e(y,K1),e(K1,Ule),e(Ule,N0o),e(K1,j0o),e(K1,_N),e(_N,D0o),e(K1,G0o),e(y,O0o),e(y,Z1),e(Z1,Jle),e(Jle,V0o),e(Z1,X0o),e(Z1,uN),e(uN,z0o),e(Z1,Q0o),e(y,W0o),e(y,eb),e(eb,Yle),e(Yle,H0o),e(eb,U0o),e(eb,bN),e(bN,J0o),e(eb,Y0o),e(y,K0o),e(y,ob),e(ob,Kle),e(Kle,Z0o),e(ob,eyo),e(ob,FN),e(FN,oyo),e(ob,ryo),e(Oe,tyo),e(Oe,rb),e(rb,ayo),e(rb,Zle),e(Zle,nyo),e(rb,syo),e(rb,eie),e(eie,lyo),e(Oe,iyo),e(Oe,oie),e(oie,dyo),e(Oe,cyo),g(H3,Oe,null),b(c,rBe,u),b(c,hd,u),e(hd,tb),e(tb,rie),g(U3,rie,null),e(hd,fyo),e(hd,tie),e(tie,myo),b(c,tBe,u),b(c,rr,u),g(J3,rr,null),e(rr,gyo),e(rr,pd),e(pd,hyo),e(pd,vN),e(vN,pyo),e(pd,_yo),e(pd,TN),e(TN,uyo),e(pd,byo),e(rr,Fyo),e(rr,Y3),e(Y3,vyo),e(Y3,aie),e(aie,Tyo),e(Y3,Myo),e(rr,Eyo),e(rr,Jr),g(K3,Jr,null),e(Jr,Cyo),e(Jr,nie),e(nie,wyo),e(Jr,Ayo),e(Jr,_d),e(_d,yyo),e(_d,sie),e(sie,Lyo),e(_d,xyo),e(_d,MN),e(MN,kyo),e(_d,Syo),e(Jr,Ryo),e(Jr,lie),e(lie,Byo),e(Jr,Pyo),g(Z3,Jr,null),e(rr,$yo),e(rr,Ve),g(ew,Ve,null),e(Ve,Iyo),e(Ve,iie),e(iie,qyo),e(Ve,Nyo),e(Ve,Ja),e(Ja,jyo),e(Ja,die),e(die,Dyo),e(Ja,Gyo),e(Ja,cie),e(cie,Oyo),e(Ja,Vyo),e(Ja,fie),e(fie,Xyo),e(Ja,zyo),e(Ve,Qyo),e(Ve,G),e(G,ab),e(ab,mie),e(mie,Wyo),e(ab,Hyo),e(ab,EN),e(EN,Uyo),e(ab,Jyo),e(G,Yyo),e(G,nb),e(nb,gie),e(gie,Kyo),e(nb,Zyo),e(nb,CN),e(CN,eLo),e(nb,oLo),e(G,rLo),e(G,sb),e(sb,hie),e(hie,tLo),e(sb,aLo),e(sb,wN),e(wN,nLo),e(sb,sLo),e(G,lLo),e(G,lb),e(lb,pie),e(pie,iLo),e(lb,dLo),e(lb,AN),e(AN,cLo),e(lb,fLo),e(G,mLo),e(G,ib),e(ib,_ie),e(_ie,gLo),e(ib,hLo),e(ib,yN),e(yN,pLo),e(ib,_Lo),e(G,uLo),e(G,db),e(db,uie),e(uie,bLo),e(db,FLo),e(db,LN),e(LN,vLo),e(db,TLo),e(G,MLo),e(G,cb),e(cb,bie),e(bie,ELo),e(cb,CLo),e(cb,xN),e(xN,wLo),e(cb,ALo),e(G,yLo),e(G,fb),e(fb,Fie),e(Fie,LLo),e(fb,xLo),e(fb,kN),e(kN,kLo),e(fb,SLo),e(G,RLo),e(G,mb),e(mb,vie),e(vie,BLo),e(mb,PLo),e(mb,SN),e(SN,$Lo),e(mb,ILo),e(G,qLo),e(G,gb),e(gb,Tie),e(Tie,NLo),e(gb,jLo),e(gb,RN),e(RN,DLo),e(gb,GLo),e(G,OLo),e(G,hb),e(hb,Mie),e(Mie,VLo),e(hb,XLo),e(hb,BN),e(BN,zLo),e(hb,QLo),e(G,WLo),e(G,pb),e(pb,Eie),e(Eie,HLo),e(pb,ULo),e(pb,PN),e(PN,JLo),e(pb,YLo),e(G,KLo),e(G,_b),e(_b,Cie),e(Cie,ZLo),e(_b,e8o),e(_b,wie),e(wie,o8o),e(_b,r8o),e(G,t8o),e(G,ub),e(ub,Aie),e(Aie,a8o),e(ub,n8o),e(ub,$N),e($N,s8o),e(ub,l8o),e(G,i8o),e(G,bb),e(bb,yie),e(yie,d8o),e(bb,c8o),e(bb,IN),e(IN,f8o),e(bb,m8o),e(G,g8o),e(G,Fb),e(Fb,Lie),e(Lie,h8o),e(Fb,p8o),e(Fb,qN),e(qN,_8o),e(Fb,u8o),e(G,b8o),e(G,vb),e(vb,xie),e(xie,F8o),e(vb,v8o),e(vb,NN),e(NN,T8o),e(vb,M8o),e(G,E8o),e(G,Tb),e(Tb,kie),e(kie,C8o),e(Tb,w8o),e(Tb,jN),e(jN,A8o),e(Tb,y8o),e(G,L8o),e(G,Mb),e(Mb,Sie),e(Sie,x8o),e(Mb,k8o),e(Mb,DN),e(DN,S8o),e(Mb,R8o),e(G,B8o),e(G,Eb),e(Eb,Rie),e(Rie,P8o),e(Eb,$8o),e(Eb,GN),e(GN,I8o),e(Eb,q8o),e(G,N8o),e(G,Cb),e(Cb,Bie),e(Bie,j8o),e(Cb,D8o),e(Cb,ON),e(ON,G8o),e(Cb,O8o),e(G,V8o),e(G,wb),e(wb,Pie),e(Pie,X8o),e(wb,z8o),e(wb,VN),e(VN,Q8o),e(wb,W8o),e(G,H8o),e(G,Ab),e(Ab,$ie),e($ie,U8o),e(Ab,J8o),e(Ab,XN),e(XN,Y8o),e(Ab,K8o),e(G,Z8o),e(G,yb),e(yb,Iie),e(Iie,e7o),e(yb,o7o),e(yb,zN),e(zN,r7o),e(yb,t7o),e(G,a7o),e(G,Lb),e(Lb,qie),e(qie,n7o),e(Lb,s7o),e(Lb,QN),e(QN,l7o),e(Lb,i7o),e(G,d7o),e(G,xb),e(xb,Nie),e(Nie,c7o),e(xb,f7o),e(xb,WN),e(WN,m7o),e(xb,g7o),e(G,h7o),e(G,kb),e(kb,jie),e(jie,p7o),e(kb,_7o),e(kb,HN),e(HN,u7o),e(kb,b7o),e(G,F7o),e(G,Sb),e(Sb,Die),e(Die,v7o),e(Sb,T7o),e(Sb,UN),e(UN,M7o),e(Sb,E7o),e(G,C7o),e(G,Rb),e(Rb,Gie),e(Gie,w7o),e(Rb,A7o),e(Rb,JN),e(JN,y7o),e(Rb,L7o),e(Ve,x7o),e(Ve,Bb),e(Bb,k7o),e(Bb,Oie),e(Oie,S7o),e(Bb,R7o),e(Bb,Vie),e(Vie,B7o),e(Ve,P7o),e(Ve,Xie),e(Xie,$7o),e(Ve,I7o),g(ow,Ve,null),b(c,aBe,u),b(c,ud,u),e(ud,Pb),e(Pb,zie),g(rw,zie,null),e(ud,q7o),e(ud,Qie),e(Qie,N7o),b(c,nBe,u),b(c,tr,u),g(tw,tr,null),e(tr,j7o),e(tr,bd),e(bd,D7o),e(bd,YN),e(YN,G7o),e(bd,O7o),e(bd,KN),e(KN,V7o),e(bd,X7o),e(tr,z7o),e(tr,aw),e(aw,Q7o),e(aw,Wie),e(Wie,W7o),e(aw,H7o),e(tr,U7o),e(tr,Yr),g(nw,Yr,null),e(Yr,J7o),e(Yr,Hie),e(Hie,Y7o),e(Yr,K7o),e(Yr,Fd),e(Fd,Z7o),e(Fd,Uie),e(Uie,exo),e(Fd,oxo),e(Fd,ZN),e(ZN,rxo),e(Fd,txo),e(Yr,axo),e(Yr,Jie),e(Jie,nxo),e(Yr,sxo),g(sw,Yr,null),e(tr,lxo),e(tr,Xe),g(lw,Xe,null),e(Xe,ixo),e(Xe,Yie),e(Yie,dxo),e(Xe,cxo),e(Xe,Ya),e(Ya,fxo),e(Ya,Kie),e(Kie,mxo),e(Ya,gxo),e(Ya,Zie),e(Zie,hxo),e(Ya,pxo),e(Ya,ede),e(ede,_xo),e(Ya,uxo),e(Xe,bxo),e(Xe,da),e(da,$b),e($b,ode),e(ode,Fxo),e($b,vxo),e($b,ej),e(ej,Txo),e($b,Mxo),e(da,Exo),e(da,Ib),e(Ib,rde),e(rde,Cxo),e(Ib,wxo),e(Ib,oj),e(oj,Axo),e(Ib,yxo),e(da,Lxo),e(da,qb),e(qb,tde),e(tde,xxo),e(qb,kxo),e(qb,rj),e(rj,Sxo),e(qb,Rxo),e(da,Bxo),e(da,Nb),e(Nb,ade),e(ade,Pxo),e(Nb,$xo),e(Nb,tj),e(tj,Ixo),e(Nb,qxo),e(da,Nxo),e(da,jb),e(jb,nde),e(nde,jxo),e(jb,Dxo),e(jb,aj),e(aj,Gxo),e(jb,Oxo),e(Xe,Vxo),e(Xe,Db),e(Db,Xxo),e(Db,sde),e(sde,zxo),e(Db,Qxo),e(Db,lde),e(lde,Wxo),e(Xe,Hxo),e(Xe,ide),e(ide,Uxo),e(Xe,Jxo),g(iw,Xe,null),b(c,sBe,u),b(c,vd,u),e(vd,Gb),e(Gb,dde),g(dw,dde,null),e(vd,Yxo),e(vd,cde),e(cde,Kxo),b(c,lBe,u),b(c,ar,u),g(cw,ar,null),e(ar,Zxo),e(ar,Td),e(Td,eko),e(Td,nj),e(nj,oko),e(Td,rko),e(Td,sj),e(sj,tko),e(Td,ako),e(ar,nko),e(ar,fw),e(fw,sko),e(fw,fde),e(fde,lko),e(fw,iko),e(ar,dko),e(ar,Kr),g(mw,Kr,null),e(Kr,cko),e(Kr,mde),e(mde,fko),e(Kr,mko),e(Kr,Md),e(Md,gko),e(Md,gde),e(gde,hko),e(Md,pko),e(Md,lj),e(lj,_ko),e(Md,uko),e(Kr,bko),e(Kr,hde),e(hde,Fko),e(Kr,vko),g(gw,Kr,null),e(ar,Tko),e(ar,ze),g(hw,ze,null),e(ze,Mko),e(ze,pde),e(pde,Eko),e(ze,Cko),e(ze,Ka),e(Ka,wko),e(Ka,_de),e(_de,Ako),e(Ka,yko),e(Ka,ude),e(ude,Lko),e(Ka,xko),e(Ka,bde),e(bde,kko),e(Ka,Sko),e(ze,Rko),e(ze,j),e(j,Ob),e(Ob,Fde),e(Fde,Bko),e(Ob,Pko),e(Ob,ij),e(ij,$ko),e(Ob,Iko),e(j,qko),e(j,Vb),e(Vb,vde),e(vde,Nko),e(Vb,jko),e(Vb,dj),e(dj,Dko),e(Vb,Gko),e(j,Oko),e(j,Xb),e(Xb,Tde),e(Tde,Vko),e(Xb,Xko),e(Xb,cj),e(cj,zko),e(Xb,Qko),e(j,Wko),e(j,zb),e(zb,Mde),e(Mde,Hko),e(zb,Uko),e(zb,fj),e(fj,Jko),e(zb,Yko),e(j,Kko),e(j,Qb),e(Qb,Ede),e(Ede,Zko),e(Qb,eSo),e(Qb,mj),e(mj,oSo),e(Qb,rSo),e(j,tSo),e(j,Wb),e(Wb,Cde),e(Cde,aSo),e(Wb,nSo),e(Wb,gj),e(gj,sSo),e(Wb,lSo),e(j,iSo),e(j,Hb),e(Hb,wde),e(wde,dSo),e(Hb,cSo),e(Hb,hj),e(hj,fSo),e(Hb,mSo),e(j,gSo),e(j,Ub),e(Ub,Ade),e(Ade,hSo),e(Ub,pSo),e(Ub,pj),e(pj,_So),e(Ub,uSo),e(j,bSo),e(j,Jb),e(Jb,yde),e(yde,FSo),e(Jb,vSo),e(Jb,_j),e(_j,TSo),e(Jb,MSo),e(j,ESo),e(j,Yb),e(Yb,Lde),e(Lde,CSo),e(Yb,wSo),e(Yb,uj),e(uj,ASo),e(Yb,ySo),e(j,LSo),e(j,Kb),e(Kb,xde),e(xde,xSo),e(Kb,kSo),e(Kb,bj),e(bj,SSo),e(Kb,RSo),e(j,BSo),e(j,Zb),e(Zb,kde),e(kde,PSo),e(Zb,$So),e(Zb,Fj),e(Fj,ISo),e(Zb,qSo),e(j,NSo),e(j,e5),e(e5,Sde),e(Sde,jSo),e(e5,DSo),e(e5,vj),e(vj,GSo),e(e5,OSo),e(j,VSo),e(j,o5),e(o5,Rde),e(Rde,XSo),e(o5,zSo),e(o5,Tj),e(Tj,QSo),e(o5,WSo),e(j,HSo),e(j,r5),e(r5,Bde),e(Bde,USo),e(r5,JSo),e(r5,Mj),e(Mj,YSo),e(r5,KSo),e(j,ZSo),e(j,t5),e(t5,Pde),e(Pde,eRo),e(t5,oRo),e(t5,$de),e($de,rRo),e(t5,tRo),e(j,aRo),e(j,a5),e(a5,Ide),e(Ide,nRo),e(a5,sRo),e(a5,Ej),e(Ej,lRo),e(a5,iRo),e(j,dRo),e(j,n5),e(n5,qde),e(qde,cRo),e(n5,fRo),e(n5,Cj),e(Cj,mRo),e(n5,gRo),e(j,hRo),e(j,s5),e(s5,Nde),e(Nde,pRo),e(s5,_Ro),e(s5,wj),e(wj,uRo),e(s5,bRo),e(j,FRo),e(j,l5),e(l5,jde),e(jde,vRo),e(l5,TRo),e(l5,Aj),e(Aj,MRo),e(l5,ERo),e(j,CRo),e(j,i5),e(i5,Dde),e(Dde,wRo),e(i5,ARo),e(i5,yj),e(yj,yRo),e(i5,LRo),e(j,xRo),e(j,d5),e(d5,Gde),e(Gde,kRo),e(d5,SRo),e(d5,Lj),e(Lj,RRo),e(d5,BRo),e(j,PRo),e(j,c5),e(c5,Ode),e(Ode,$Ro),e(c5,IRo),e(c5,xj),e(xj,qRo),e(c5,NRo),e(j,jRo),e(j,f5),e(f5,Vde),e(Vde,DRo),e(f5,GRo),e(f5,kj),e(kj,ORo),e(f5,VRo),e(j,XRo),e(j,m5),e(m5,Xde),e(Xde,zRo),e(m5,QRo),e(m5,Sj),e(Sj,WRo),e(m5,HRo),e(j,URo),e(j,g5),e(g5,zde),e(zde,JRo),e(g5,YRo),e(g5,Rj),e(Rj,KRo),e(g5,ZRo),e(j,eBo),e(j,h5),e(h5,Qde),e(Qde,oBo),e(h5,rBo),e(h5,Bj),e(Bj,tBo),e(h5,aBo),e(j,nBo),e(j,p5),e(p5,Wde),e(Wde,sBo),e(p5,lBo),e(p5,Pj),e(Pj,iBo),e(p5,dBo),e(j,cBo),e(j,_5),e(_5,Hde),e(Hde,fBo),e(_5,mBo),e(_5,$j),e($j,gBo),e(_5,hBo),e(j,pBo),e(j,u5),e(u5,Ude),e(Ude,_Bo),e(u5,uBo),e(u5,Ij),e(Ij,bBo),e(u5,FBo),e(j,vBo),e(j,b5),e(b5,Jde),e(Jde,TBo),e(b5,MBo),e(b5,qj),e(qj,EBo),e(b5,CBo),e(j,wBo),e(j,F5),e(F5,Yde),e(Yde,ABo),e(F5,yBo),e(F5,Nj),e(Nj,LBo),e(F5,xBo),e(j,kBo),e(j,v5),e(v5,Kde),e(Kde,SBo),e(v5,RBo),e(v5,jj),e(jj,BBo),e(v5,PBo),e(j,$Bo),e(j,T5),e(T5,Zde),e(Zde,IBo),e(T5,qBo),e(T5,Dj),e(Dj,NBo),e(T5,jBo),e(ze,DBo),e(ze,M5),e(M5,GBo),e(M5,ece),e(ece,OBo),e(M5,VBo),e(M5,oce),e(oce,XBo),e(ze,zBo),e(ze,rce),e(rce,QBo),e(ze,WBo),g(pw,ze,null),b(c,iBe,u),b(c,Ed,u),e(Ed,E5),e(E5,tce),g(_w,tce,null),e(Ed,HBo),e(Ed,ace),e(ace,UBo),b(c,dBe,u),b(c,nr,u),g(uw,nr,null),e(nr,JBo),e(nr,Cd),e(Cd,YBo),e(Cd,Gj),e(Gj,KBo),e(Cd,ZBo),e(Cd,Oj),e(Oj,ePo),e(Cd,oPo),e(nr,rPo),e(nr,bw),e(bw,tPo),e(bw,nce),e(nce,aPo),e(bw,nPo),e(nr,sPo),e(nr,Zr),g(Fw,Zr,null),e(Zr,lPo),e(Zr,sce),e(sce,iPo),e(Zr,dPo),e(Zr,wd),e(wd,cPo),e(wd,lce),e(lce,fPo),e(wd,mPo),e(wd,Vj),e(Vj,gPo),e(wd,hPo),e(Zr,pPo),e(Zr,ice),e(ice,_Po),e(Zr,uPo),g(vw,Zr,null),e(nr,bPo),e(nr,Qe),g(Tw,Qe,null),e(Qe,FPo),e(Qe,dce),e(dce,vPo),e(Qe,TPo),e(Qe,Za),e(Za,MPo),e(Za,cce),e(cce,EPo),e(Za,CPo),e(Za,fce),e(fce,wPo),e(Za,APo),e(Za,mce),e(mce,yPo),e(Za,LPo),e(Qe,xPo),e(Qe,S),e(S,C5),e(C5,gce),e(gce,kPo),e(C5,SPo),e(C5,Xj),e(Xj,RPo),e(C5,BPo),e(S,PPo),e(S,w5),e(w5,hce),e(hce,$Po),e(w5,IPo),e(w5,zj),e(zj,qPo),e(w5,NPo),e(S,jPo),e(S,A5),e(A5,pce),e(pce,DPo),e(A5,GPo),e(A5,Qj),e(Qj,OPo),e(A5,VPo),e(S,XPo),e(S,y5),e(y5,_ce),e(_ce,zPo),e(y5,QPo),e(y5,Wj),e(Wj,WPo),e(y5,HPo),e(S,UPo),e(S,L5),e(L5,uce),e(uce,JPo),e(L5,YPo),e(L5,Hj),e(Hj,KPo),e(L5,ZPo),e(S,e$o),e(S,x5),e(x5,bce),e(bce,o$o),e(x5,r$o),e(x5,Uj),e(Uj,t$o),e(x5,a$o),e(S,n$o),e(S,k5),e(k5,Fce),e(Fce,s$o),e(k5,l$o),e(k5,Jj),e(Jj,i$o),e(k5,d$o),e(S,c$o),e(S,S5),e(S5,vce),e(vce,f$o),e(S5,m$o),e(S5,Yj),e(Yj,g$o),e(S5,h$o),e(S,p$o),e(S,R5),e(R5,Tce),e(Tce,_$o),e(R5,u$o),e(R5,Kj),e(Kj,b$o),e(R5,F$o),e(S,v$o),e(S,B5),e(B5,Mce),e(Mce,T$o),e(B5,M$o),e(B5,Zj),e(Zj,E$o),e(B5,C$o),e(S,w$o),e(S,P5),e(P5,Ece),e(Ece,A$o),e(P5,y$o),e(P5,eD),e(eD,L$o),e(P5,x$o),e(S,k$o),e(S,$5),e($5,Cce),e(Cce,S$o),e($5,R$o),e($5,oD),e(oD,B$o),e($5,P$o),e(S,$$o),e(S,I5),e(I5,wce),e(wce,I$o),e(I5,q$o),e(I5,rD),e(rD,N$o),e(I5,j$o),e(S,D$o),e(S,q5),e(q5,Ace),e(Ace,G$o),e(q5,O$o),e(q5,tD),e(tD,V$o),e(q5,X$o),e(S,z$o),e(S,N5),e(N5,yce),e(yce,Q$o),e(N5,W$o),e(N5,aD),e(aD,H$o),e(N5,U$o),e(S,J$o),e(S,j5),e(j5,Lce),e(Lce,Y$o),e(j5,K$o),e(j5,nD),e(nD,Z$o),e(j5,eIo),e(S,oIo),e(S,D5),e(D5,xce),e(xce,rIo),e(D5,tIo),e(D5,kce),e(kce,aIo),e(D5,nIo),e(S,sIo),e(S,G5),e(G5,Sce),e(Sce,lIo),e(G5,iIo),e(G5,sD),e(sD,dIo),e(G5,cIo),e(S,fIo),e(S,O5),e(O5,Rce),e(Rce,mIo),e(O5,gIo),e(O5,lD),e(lD,hIo),e(O5,pIo),e(S,_Io),e(S,V5),e(V5,Bce),e(Bce,uIo),e(V5,bIo),e(V5,iD),e(iD,FIo),e(V5,vIo),e(S,TIo),e(S,X5),e(X5,Pce),e(Pce,MIo),e(X5,EIo),e(X5,dD),e(dD,CIo),e(X5,wIo),e(S,AIo),e(S,z5),e(z5,$ce),e($ce,yIo),e(z5,LIo),e(z5,cD),e(cD,xIo),e(z5,kIo),e(S,SIo),e(S,Q5),e(Q5,Ice),e(Ice,RIo),e(Q5,BIo),e(Q5,fD),e(fD,PIo),e(Q5,$Io),e(S,IIo),e(S,W5),e(W5,qce),e(qce,qIo),e(W5,NIo),e(W5,mD),e(mD,jIo),e(W5,DIo),e(S,GIo),e(S,H5),e(H5,Nce),e(Nce,OIo),e(H5,VIo),e(H5,gD),e(gD,XIo),e(H5,zIo),e(S,QIo),e(S,U5),e(U5,jce),e(jce,WIo),e(U5,HIo),e(U5,hD),e(hD,UIo),e(U5,JIo),e(S,YIo),e(S,J5),e(J5,Dce),e(Dce,KIo),e(J5,ZIo),e(J5,pD),e(pD,eqo),e(J5,oqo),e(S,rqo),e(S,Y5),e(Y5,Gce),e(Gce,tqo),e(Y5,aqo),e(Y5,_D),e(_D,nqo),e(Y5,sqo),e(S,lqo),e(S,K5),e(K5,Oce),e(Oce,iqo),e(K5,dqo),e(K5,uD),e(uD,cqo),e(K5,fqo),e(S,mqo),e(S,Z5),e(Z5,Vce),e(Vce,gqo),e(Z5,hqo),e(Z5,bD),e(bD,pqo),e(Z5,_qo),e(S,uqo),e(S,e2),e(e2,Xce),e(Xce,bqo),e(e2,Fqo),e(e2,FD),e(FD,vqo),e(e2,Tqo),e(S,Mqo),e(S,o2),e(o2,zce),e(zce,Eqo),e(o2,Cqo),e(o2,vD),e(vD,wqo),e(o2,Aqo),e(S,yqo),e(S,r2),e(r2,Qce),e(Qce,Lqo),e(r2,xqo),e(r2,TD),e(TD,kqo),e(r2,Sqo),e(S,Rqo),e(S,t2),e(t2,Wce),e(Wce,Bqo),e(t2,Pqo),e(t2,MD),e(MD,$qo),e(t2,Iqo),e(S,qqo),e(S,a2),e(a2,Hce),e(Hce,Nqo),e(a2,jqo),e(a2,ED),e(ED,Dqo),e(a2,Gqo),e(S,Oqo),e(S,n2),e(n2,Uce),e(Uce,Vqo),e(n2,Xqo),e(n2,CD),e(CD,zqo),e(n2,Qqo),e(S,Wqo),e(S,s2),e(s2,Jce),e(Jce,Hqo),e(s2,Uqo),e(s2,wD),e(wD,Jqo),e(s2,Yqo),e(S,Kqo),e(S,l2),e(l2,Yce),e(Yce,Zqo),e(l2,eNo),e(l2,AD),e(AD,oNo),e(l2,rNo),e(S,tNo),e(S,i2),e(i2,Kce),e(Kce,aNo),e(i2,nNo),e(i2,yD),e(yD,sNo),e(i2,lNo),e(S,iNo),e(S,d2),e(d2,Zce),e(Zce,dNo),e(d2,cNo),e(d2,LD),e(LD,fNo),e(d2,mNo),e(Qe,gNo),e(Qe,c2),e(c2,hNo),e(c2,efe),e(efe,pNo),e(c2,_No),e(c2,ofe),e(ofe,uNo),e(Qe,bNo),e(Qe,rfe),e(rfe,FNo),e(Qe,vNo),g(Mw,Qe,null),b(c,cBe,u),b(c,Ad,u),e(Ad,f2),e(f2,tfe),g(Ew,tfe,null),e(Ad,TNo),e(Ad,afe),e(afe,MNo),b(c,fBe,u),b(c,sr,u),g(Cw,sr,null),e(sr,ENo),e(sr,yd),e(yd,CNo),e(yd,xD),e(xD,wNo),e(yd,ANo),e(yd,kD),e(kD,yNo),e(yd,LNo),e(sr,xNo),e(sr,ww),e(ww,kNo),e(ww,nfe),e(nfe,SNo),e(ww,RNo),e(sr,BNo),e(sr,et),g(Aw,et,null),e(et,PNo),e(et,sfe),e(sfe,$No),e(et,INo),e(et,Ld),e(Ld,qNo),e(Ld,lfe),e(lfe,NNo),e(Ld,jNo),e(Ld,SD),e(SD,DNo),e(Ld,GNo),e(et,ONo),e(et,ife),e(ife,VNo),e(et,XNo),g(yw,et,null),e(sr,zNo),e(sr,We),g(Lw,We,null),e(We,QNo),e(We,dfe),e(dfe,WNo),e(We,HNo),e(We,en),e(en,UNo),e(en,cfe),e(cfe,JNo),e(en,YNo),e(en,ffe),e(ffe,KNo),e(en,ZNo),e(en,mfe),e(mfe,ejo),e(en,ojo),e(We,rjo),e(We,gfe),e(gfe,m2),e(m2,hfe),e(hfe,tjo),e(m2,ajo),e(m2,RD),e(RD,njo),e(m2,sjo),e(We,ljo),e(We,g2),e(g2,ijo),e(g2,pfe),e(pfe,djo),e(g2,cjo),e(g2,_fe),e(_fe,fjo),e(We,mjo),e(We,ufe),e(ufe,gjo),e(We,hjo),g(xw,We,null),b(c,mBe,u),b(c,xd,u),e(xd,h2),e(h2,bfe),g(kw,bfe,null),e(xd,pjo),e(xd,Ffe),e(Ffe,_jo),b(c,gBe,u),b(c,lr,u),g(Sw,lr,null),e(lr,ujo),e(lr,kd),e(kd,bjo),e(kd,BD),e(BD,Fjo),e(kd,vjo),e(kd,PD),e(PD,Tjo),e(kd,Mjo),e(lr,Ejo),e(lr,Rw),e(Rw,Cjo),e(Rw,vfe),e(vfe,wjo),e(Rw,Ajo),e(lr,yjo),e(lr,ot),g(Bw,ot,null),e(ot,Ljo),e(ot,Tfe),e(Tfe,xjo),e(ot,kjo),e(ot,Sd),e(Sd,Sjo),e(Sd,Mfe),e(Mfe,Rjo),e(Sd,Bjo),e(Sd,$D),e($D,Pjo),e(Sd,$jo),e(ot,Ijo),e(ot,Efe),e(Efe,qjo),e(ot,Njo),g(Pw,ot,null),e(lr,jjo),e(lr,He),g($w,He,null),e(He,Djo),e(He,Cfe),e(Cfe,Gjo),e(He,Ojo),e(He,on),e(on,Vjo),e(on,wfe),e(wfe,Xjo),e(on,zjo),e(on,Afe),e(Afe,Qjo),e(on,Wjo),e(on,yfe),e(yfe,Hjo),e(on,Ujo),e(He,Jjo),e(He,ce),e(ce,p2),e(p2,Lfe),e(Lfe,Yjo),e(p2,Kjo),e(p2,ID),e(ID,Zjo),e(p2,eDo),e(ce,oDo),e(ce,_2),e(_2,xfe),e(xfe,rDo),e(_2,tDo),e(_2,qD),e(qD,aDo),e(_2,nDo),e(ce,sDo),e(ce,Ds),e(Ds,kfe),e(kfe,lDo),e(Ds,iDo),e(Ds,ND),e(ND,dDo),e(Ds,cDo),e(Ds,jD),e(jD,fDo),e(Ds,mDo),e(ce,gDo),e(ce,u2),e(u2,Sfe),e(Sfe,hDo),e(u2,pDo),e(u2,DD),e(DD,_Do),e(u2,uDo),e(ce,bDo),e(ce,ma),e(ma,Rfe),e(Rfe,FDo),e(ma,vDo),e(ma,GD),e(GD,TDo),e(ma,MDo),e(ma,OD),e(OD,EDo),e(ma,CDo),e(ma,VD),e(VD,wDo),e(ma,ADo),e(ce,yDo),e(ce,b2),e(b2,Bfe),e(Bfe,LDo),e(b2,xDo),e(b2,XD),e(XD,kDo),e(b2,SDo),e(ce,RDo),e(ce,F2),e(F2,Pfe),e(Pfe,BDo),e(F2,PDo),e(F2,zD),e(zD,$Do),e(F2,IDo),e(ce,qDo),e(ce,v2),e(v2,$fe),e($fe,NDo),e(v2,jDo),e(v2,QD),e(QD,DDo),e(v2,GDo),e(ce,ODo),e(ce,T2),e(T2,Ife),e(Ife,VDo),e(T2,XDo),e(T2,WD),e(WD,zDo),e(T2,QDo),e(ce,WDo),e(ce,M2),e(M2,qfe),e(qfe,HDo),e(M2,UDo),e(M2,HD),e(HD,JDo),e(M2,YDo),e(ce,KDo),e(ce,E2),e(E2,Nfe),e(Nfe,ZDo),e(E2,eGo),e(E2,UD),e(UD,oGo),e(E2,rGo),e(ce,tGo),e(ce,C2),e(C2,jfe),e(jfe,aGo),e(C2,nGo),e(C2,JD),e(JD,sGo),e(C2,lGo),e(He,iGo),e(He,w2),e(w2,dGo),e(w2,Dfe),e(Dfe,cGo),e(w2,fGo),e(w2,Gfe),e(Gfe,mGo),e(He,gGo),e(He,Ofe),e(Ofe,hGo),e(He,pGo),g(Iw,He,null),b(c,hBe,u),b(c,Rd,u),e(Rd,A2),e(A2,Vfe),g(qw,Vfe,null),e(Rd,_Go),e(Rd,Xfe),e(Xfe,uGo),b(c,pBe,u),b(c,ir,u),g(Nw,ir,null),e(ir,bGo),e(ir,Bd),e(Bd,FGo),e(Bd,YD),e(YD,vGo),e(Bd,TGo),e(Bd,KD),e(KD,MGo),e(Bd,EGo),e(ir,CGo),e(ir,jw),e(jw,wGo),e(jw,zfe),e(zfe,AGo),e(jw,yGo),e(ir,LGo),e(ir,rt),g(Dw,rt,null),e(rt,xGo),e(rt,Qfe),e(Qfe,kGo),e(rt,SGo),e(rt,Pd),e(Pd,RGo),e(Pd,Wfe),e(Wfe,BGo),e(Pd,PGo),e(Pd,ZD),e(ZD,$Go),e(Pd,IGo),e(rt,qGo),e(rt,Hfe),e(Hfe,NGo),e(rt,jGo),g(Gw,rt,null),e(ir,DGo),e(ir,Ue),g(Ow,Ue,null),e(Ue,GGo),e(Ue,Ufe),e(Ufe,OGo),e(Ue,VGo),e(Ue,rn),e(rn,XGo),e(rn,Jfe),e(Jfe,zGo),e(rn,QGo),e(rn,Yfe),e(Yfe,WGo),e(rn,HGo),e(rn,Kfe),e(Kfe,UGo),e(rn,JGo),e(Ue,YGo),e(Ue,Zfe),e(Zfe,y2),e(y2,eme),e(eme,KGo),e(y2,ZGo),e(y2,eG),e(eG,eOo),e(y2,oOo),e(Ue,rOo),e(Ue,L2),e(L2,tOo),e(L2,ome),e(ome,aOo),e(L2,nOo),e(L2,rme),e(rme,sOo),e(Ue,lOo),e(Ue,tme),e(tme,iOo),e(Ue,dOo),g(Vw,Ue,null),b(c,_Be,u),b(c,$d,u),e($d,x2),e(x2,ame),g(Xw,ame,null),e($d,cOo),e($d,nme),e(nme,fOo),b(c,uBe,u),b(c,dr,u),g(zw,dr,null),e(dr,mOo),e(dr,Id),e(Id,gOo),e(Id,oG),e(oG,hOo),e(Id,pOo),e(Id,rG),e(rG,_Oo),e(Id,uOo),e(dr,bOo),e(dr,Qw),e(Qw,FOo),e(Qw,sme),e(sme,vOo),e(Qw,TOo),e(dr,MOo),e(dr,tt),g(Ww,tt,null),e(tt,EOo),e(tt,lme),e(lme,COo),e(tt,wOo),e(tt,qd),e(qd,AOo),e(qd,ime),e(ime,yOo),e(qd,LOo),e(qd,tG),e(tG,xOo),e(qd,kOo),e(tt,SOo),e(tt,dme),e(dme,ROo),e(tt,BOo),g(Hw,tt,null),e(dr,POo),e(dr,Je),g(Uw,Je,null),e(Je,$Oo),e(Je,cme),e(cme,IOo),e(Je,qOo),e(Je,tn),e(tn,NOo),e(tn,fme),e(fme,jOo),e(tn,DOo),e(tn,mme),e(mme,GOo),e(tn,OOo),e(tn,gme),e(gme,VOo),e(tn,XOo),e(Je,zOo),e(Je,Se),e(Se,k2),e(k2,hme),e(hme,QOo),e(k2,WOo),e(k2,aG),e(aG,HOo),e(k2,UOo),e(Se,JOo),e(Se,S2),e(S2,pme),e(pme,YOo),e(S2,KOo),e(S2,nG),e(nG,ZOo),e(S2,eVo),e(Se,oVo),e(Se,R2),e(R2,_me),e(_me,rVo),e(R2,tVo),e(R2,sG),e(sG,aVo),e(R2,nVo),e(Se,sVo),e(Se,B2),e(B2,ume),e(ume,lVo),e(B2,iVo),e(B2,lG),e(lG,dVo),e(B2,cVo),e(Se,fVo),e(Se,P2),e(P2,bme),e(bme,mVo),e(P2,gVo),e(P2,iG),e(iG,hVo),e(P2,pVo),e(Se,_Vo),e(Se,$2),e($2,Fme),e(Fme,uVo),e($2,bVo),e($2,dG),e(dG,FVo),e($2,vVo),e(Se,TVo),e(Se,I2),e(I2,vme),e(vme,MVo),e(I2,EVo),e(I2,cG),e(cG,CVo),e(I2,wVo),e(Se,AVo),e(Se,q2),e(q2,Tme),e(Tme,yVo),e(q2,LVo),e(q2,fG),e(fG,xVo),e(q2,kVo),e(Je,SVo),e(Je,N2),e(N2,RVo),e(N2,Mme),e(Mme,BVo),e(N2,PVo),e(N2,Eme),e(Eme,$Vo),e(Je,IVo),e(Je,Cme),e(Cme,qVo),e(Je,NVo),g(Jw,Je,null),b(c,bBe,u),b(c,Nd,u),e(Nd,j2),e(j2,wme),g(Yw,wme,null),e(Nd,jVo),e(Nd,Ame),e(Ame,DVo),b(c,FBe,u),b(c,cr,u),g(Kw,cr,null),e(cr,GVo),e(cr,jd),e(jd,OVo),e(jd,mG),e(mG,VVo),e(jd,XVo),e(jd,gG),e(gG,zVo),e(jd,QVo),e(cr,WVo),e(cr,Zw),e(Zw,HVo),e(Zw,yme),e(yme,UVo),e(Zw,JVo),e(cr,YVo),e(cr,at),g(eA,at,null),e(at,KVo),e(at,Lme),e(Lme,ZVo),e(at,eXo),e(at,Dd),e(Dd,oXo),e(Dd,xme),e(xme,rXo),e(Dd,tXo),e(Dd,hG),e(hG,aXo),e(Dd,nXo),e(at,sXo),e(at,kme),e(kme,lXo),e(at,iXo),g(oA,at,null),e(cr,dXo),e(cr,Ye),g(rA,Ye,null),e(Ye,cXo),e(Ye,Sme),e(Sme,fXo),e(Ye,mXo),e(Ye,an),e(an,gXo),e(an,Rme),e(Rme,hXo),e(an,pXo),e(an,Bme),e(Bme,_Xo),e(an,uXo),e(an,Pme),e(Pme,bXo),e(an,FXo),e(Ye,vXo),e(Ye,nn),e(nn,D2),e(D2,$me),e($me,TXo),e(D2,MXo),e(D2,pG),e(pG,EXo),e(D2,CXo),e(nn,wXo),e(nn,G2),e(G2,Ime),e(Ime,AXo),e(G2,yXo),e(G2,_G),e(_G,LXo),e(G2,xXo),e(nn,kXo),e(nn,O2),e(O2,qme),e(qme,SXo),e(O2,RXo),e(O2,uG),e(uG,BXo),e(O2,PXo),e(nn,$Xo),e(nn,V2),e(V2,Nme),e(Nme,IXo),e(V2,qXo),e(V2,bG),e(bG,NXo),e(V2,jXo),e(Ye,DXo),e(Ye,X2),e(X2,GXo),e(X2,jme),e(jme,OXo),e(X2,VXo),e(X2,Dme),e(Dme,XXo),e(Ye,zXo),e(Ye,Gme),e(Gme,QXo),e(Ye,WXo),g(tA,Ye,null),b(c,vBe,u),b(c,Gd,u),e(Gd,z2),e(z2,Ome),g(aA,Ome,null),e(Gd,HXo),e(Gd,Vme),e(Vme,UXo),b(c,TBe,u),b(c,fr,u),g(nA,fr,null),e(fr,JXo),e(fr,Od),e(Od,YXo),e(Od,FG),e(FG,KXo),e(Od,ZXo),e(Od,vG),e(vG,ezo),e(Od,ozo),e(fr,rzo),e(fr,sA),e(sA,tzo),e(sA,Xme),e(Xme,azo),e(sA,nzo),e(fr,szo),e(fr,nt),g(lA,nt,null),e(nt,lzo),e(nt,zme),e(zme,izo),e(nt,dzo),e(nt,Vd),e(Vd,czo),e(Vd,Qme),e(Qme,fzo),e(Vd,mzo),e(Vd,TG),e(TG,gzo),e(Vd,hzo),e(nt,pzo),e(nt,Wme),e(Wme,_zo),e(nt,uzo),g(iA,nt,null),e(fr,bzo),e(fr,Ke),g(dA,Ke,null),e(Ke,Fzo),e(Ke,Hme),e(Hme,vzo),e(Ke,Tzo),e(Ke,sn),e(sn,Mzo),e(sn,Ume),e(Ume,Ezo),e(sn,Czo),e(sn,Jme),e(Jme,wzo),e(sn,Azo),e(sn,Yme),e(Yme,yzo),e(sn,Lzo),e(Ke,xzo),e(Ke,Re),e(Re,Q2),e(Q2,Kme),e(Kme,kzo),e(Q2,Szo),e(Q2,MG),e(MG,Rzo),e(Q2,Bzo),e(Re,Pzo),e(Re,W2),e(W2,Zme),e(Zme,$zo),e(W2,Izo),e(W2,EG),e(EG,qzo),e(W2,Nzo),e(Re,jzo),e(Re,H2),e(H2,ege),e(ege,Dzo),e(H2,Gzo),e(H2,CG),e(CG,Ozo),e(H2,Vzo),e(Re,Xzo),e(Re,U2),e(U2,oge),e(oge,zzo),e(U2,Qzo),e(U2,wG),e(wG,Wzo),e(U2,Hzo),e(Re,Uzo),e(Re,J2),e(J2,rge),e(rge,Jzo),e(J2,Yzo),e(J2,AG),e(AG,Kzo),e(J2,Zzo),e(Re,eQo),e(Re,Y2),e(Y2,tge),e(tge,oQo),e(Y2,rQo),e(Y2,yG),e(yG,tQo),e(Y2,aQo),e(Re,nQo),e(Re,K2),e(K2,age),e(age,sQo),e(K2,lQo),e(K2,LG),e(LG,iQo),e(K2,dQo),e(Re,cQo),e(Re,Z2),e(Z2,nge),e(nge,fQo),e(Z2,mQo),e(Z2,xG),e(xG,gQo),e(Z2,hQo),e(Ke,pQo),e(Ke,eF),e(eF,_Qo),e(eF,sge),e(sge,uQo),e(eF,bQo),e(eF,lge),e(lge,FQo),e(Ke,vQo),e(Ke,ige),e(ige,TQo),e(Ke,MQo),g(cA,Ke,null),b(c,MBe,u),b(c,Xd,u),e(Xd,oF),e(oF,dge),g(fA,dge,null),e(Xd,EQo),e(Xd,cge),e(cge,CQo),b(c,EBe,u),b(c,mr,u),g(mA,mr,null),e(mr,wQo),e(mr,zd),e(zd,AQo),e(zd,kG),e(kG,yQo),e(zd,LQo),e(zd,SG),e(SG,xQo),e(zd,kQo),e(mr,SQo),e(mr,gA),e(gA,RQo),e(gA,fge),e(fge,BQo),e(gA,PQo),e(mr,$Qo),e(mr,st),g(hA,st,null),e(st,IQo),e(st,mge),e(mge,qQo),e(st,NQo),e(st,Qd),e(Qd,jQo),e(Qd,gge),e(gge,DQo),e(Qd,GQo),e(Qd,RG),e(RG,OQo),e(Qd,VQo),e(st,XQo),e(st,hge),e(hge,zQo),e(st,QQo),g(pA,st,null),e(mr,WQo),e(mr,Ze),g(_A,Ze,null),e(Ze,HQo),e(Ze,pge),e(pge,UQo),e(Ze,JQo),e(Ze,ln),e(ln,YQo),e(ln,_ge),e(_ge,KQo),e(ln,ZQo),e(ln,uge),e(uge,eWo),e(ln,oWo),e(ln,bge),e(bge,rWo),e(ln,tWo),e(Ze,aWo),e(Ze,uA),e(uA,rF),e(rF,Fge),e(Fge,nWo),e(rF,sWo),e(rF,BG),e(BG,lWo),e(rF,iWo),e(uA,dWo),e(uA,tF),e(tF,vge),e(vge,cWo),e(tF,fWo),e(tF,PG),e(PG,mWo),e(tF,gWo),e(Ze,hWo),e(Ze,aF),e(aF,pWo),e(aF,Tge),e(Tge,_Wo),e(aF,uWo),e(aF,Mge),e(Mge,bWo),e(Ze,FWo),e(Ze,Ege),e(Ege,vWo),e(Ze,TWo),g(bA,Ze,null),b(c,CBe,u),b(c,Wd,u),e(Wd,nF),e(nF,Cge),g(FA,Cge,null),e(Wd,MWo),e(Wd,wge),e(wge,EWo),b(c,wBe,u),b(c,gr,u),g(vA,gr,null),e(gr,CWo),e(gr,Hd),e(Hd,wWo),e(Hd,$G),e($G,AWo),e(Hd,yWo),e(Hd,IG),e(IG,LWo),e(Hd,xWo),e(gr,kWo),e(gr,TA),e(TA,SWo),e(TA,Age),e(Age,RWo),e(TA,BWo),e(gr,PWo),e(gr,lt),g(MA,lt,null),e(lt,$Wo),e(lt,yge),e(yge,IWo),e(lt,qWo),e(lt,Ud),e(Ud,NWo),e(Ud,Lge),e(Lge,jWo),e(Ud,DWo),e(Ud,qG),e(qG,GWo),e(Ud,OWo),e(lt,VWo),e(lt,xge),e(xge,XWo),e(lt,zWo),g(EA,lt,null),e(gr,QWo),e(gr,eo),g(CA,eo,null),e(eo,WWo),e(eo,kge),e(kge,HWo),e(eo,UWo),e(eo,dn),e(dn,JWo),e(dn,Sge),e(Sge,YWo),e(dn,KWo),e(dn,Rge),e(Rge,ZWo),e(dn,eHo),e(dn,Bge),e(Bge,oHo),e(dn,rHo),e(eo,tHo),e(eo,cn),e(cn,sF),e(sF,Pge),e(Pge,aHo),e(sF,nHo),e(sF,NG),e(NG,sHo),e(sF,lHo),e(cn,iHo),e(cn,lF),e(lF,$ge),e($ge,dHo),e(lF,cHo),e(lF,jG),e(jG,fHo),e(lF,mHo),e(cn,gHo),e(cn,iF),e(iF,Ige),e(Ige,hHo),e(iF,pHo),e(iF,DG),e(DG,_Ho),e(iF,uHo),e(cn,bHo),e(cn,dF),e(dF,qge),e(qge,FHo),e(dF,vHo),e(dF,GG),e(GG,THo),e(dF,MHo),e(eo,EHo),e(eo,cF),e(cF,CHo),e(cF,Nge),e(Nge,wHo),e(cF,AHo),e(cF,jge),e(jge,yHo),e(eo,LHo),e(eo,Dge),e(Dge,xHo),e(eo,kHo),g(wA,eo,null),b(c,ABe,u),b(c,Jd,u),e(Jd,fF),e(fF,Gge),g(AA,Gge,null),e(Jd,SHo),e(Jd,Oge),e(Oge,RHo),b(c,yBe,u),b(c,hr,u),g(yA,hr,null),e(hr,BHo),e(hr,Yd),e(Yd,PHo),e(Yd,OG),e(OG,$Ho),e(Yd,IHo),e(Yd,VG),e(VG,qHo),e(Yd,NHo),e(hr,jHo),e(hr,LA),e(LA,DHo),e(LA,Vge),e(Vge,GHo),e(LA,OHo),e(hr,VHo),e(hr,it),g(xA,it,null),e(it,XHo),e(it,Xge),e(Xge,zHo),e(it,QHo),e(it,Kd),e(Kd,WHo),e(Kd,zge),e(zge,HHo),e(Kd,UHo),e(Kd,XG),e(XG,JHo),e(Kd,YHo),e(it,KHo),e(it,Qge),e(Qge,ZHo),e(it,eUo),g(kA,it,null),e(hr,oUo),e(hr,oo),g(SA,oo,null),e(oo,rUo),e(oo,Wge),e(Wge,tUo),e(oo,aUo),e(oo,fn),e(fn,nUo),e(fn,Hge),e(Hge,sUo),e(fn,lUo),e(fn,Uge),e(Uge,iUo),e(fn,dUo),e(fn,Jge),e(Jge,cUo),e(fn,fUo),e(oo,mUo),e(oo,Zd),e(Zd,mF),e(mF,Yge),e(Yge,gUo),e(mF,hUo),e(mF,zG),e(zG,pUo),e(mF,_Uo),e(Zd,uUo),e(Zd,gF),e(gF,Kge),e(Kge,bUo),e(gF,FUo),e(gF,QG),e(QG,vUo),e(gF,TUo),e(Zd,MUo),e(Zd,hF),e(hF,Zge),e(Zge,EUo),e(hF,CUo),e(hF,WG),e(WG,wUo),e(hF,AUo),e(oo,yUo),e(oo,pF),e(pF,LUo),e(pF,ehe),e(ehe,xUo),e(pF,kUo),e(pF,ohe),e(ohe,SUo),e(oo,RUo),e(oo,rhe),e(rhe,BUo),e(oo,PUo),g(RA,oo,null),b(c,LBe,u),b(c,ec,u),e(ec,_F),e(_F,the),g(BA,the,null),e(ec,$Uo),e(ec,ahe),e(ahe,IUo),b(c,xBe,u),b(c,pr,u),g(PA,pr,null),e(pr,qUo),e(pr,oc),e(oc,NUo),e(oc,HG),e(HG,jUo),e(oc,DUo),e(oc,UG),e(UG,GUo),e(oc,OUo),e(pr,VUo),e(pr,$A),e($A,XUo),e($A,nhe),e(nhe,zUo),e($A,QUo),e(pr,WUo),e(pr,dt),g(IA,dt,null),e(dt,HUo),e(dt,she),e(she,UUo),e(dt,JUo),e(dt,rc),e(rc,YUo),e(rc,lhe),e(lhe,KUo),e(rc,ZUo),e(rc,JG),e(JG,eJo),e(rc,oJo),e(dt,rJo),e(dt,ihe),e(ihe,tJo),e(dt,aJo),g(qA,dt,null),e(pr,nJo),e(pr,ro),g(NA,ro,null),e(ro,sJo),e(ro,dhe),e(dhe,lJo),e(ro,iJo),e(ro,mn),e(mn,dJo),e(mn,che),e(che,cJo),e(mn,fJo),e(mn,fhe),e(fhe,mJo),e(mn,gJo),e(mn,mhe),e(mhe,hJo),e(mn,pJo),e(ro,_Jo),e(ro,ghe),e(ghe,uF),e(uF,hhe),e(hhe,uJo),e(uF,bJo),e(uF,YG),e(YG,FJo),e(uF,vJo),e(ro,TJo),e(ro,bF),e(bF,MJo),e(bF,phe),e(phe,EJo),e(bF,CJo),e(bF,_he),e(_he,wJo),e(ro,AJo),e(ro,uhe),e(uhe,yJo),e(ro,LJo),g(jA,ro,null),b(c,kBe,u),b(c,tc,u),e(tc,FF),e(FF,bhe),g(DA,bhe,null),e(tc,xJo),e(tc,Fhe),e(Fhe,kJo),b(c,SBe,u),b(c,_r,u),g(GA,_r,null),e(_r,SJo),e(_r,ac),e(ac,RJo),e(ac,KG),e(KG,BJo),e(ac,PJo),e(ac,ZG),e(ZG,$Jo),e(ac,IJo),e(_r,qJo),e(_r,OA),e(OA,NJo),e(OA,vhe),e(vhe,jJo),e(OA,DJo),e(_r,GJo),e(_r,ct),g(VA,ct,null),e(ct,OJo),e(ct,The),e(The,VJo),e(ct,XJo),e(ct,nc),e(nc,zJo),e(nc,Mhe),e(Mhe,QJo),e(nc,WJo),e(nc,eO),e(eO,HJo),e(nc,UJo),e(ct,JJo),e(ct,Ehe),e(Ehe,YJo),e(ct,KJo),g(XA,ct,null),e(_r,ZJo),e(_r,to),g(zA,to,null),e(to,eYo),e(to,Che),e(Che,oYo),e(to,rYo),e(to,gn),e(gn,tYo),e(gn,whe),e(whe,aYo),e(gn,nYo),e(gn,Ahe),e(Ahe,sYo),e(gn,lYo),e(gn,yhe),e(yhe,iYo),e(gn,dYo),e(to,cYo),e(to,Lhe),e(Lhe,vF),e(vF,xhe),e(xhe,fYo),e(vF,mYo),e(vF,oO),e(oO,gYo),e(vF,hYo),e(to,pYo),e(to,TF),e(TF,_Yo),e(TF,khe),e(khe,uYo),e(TF,bYo),e(TF,She),e(She,FYo),e(to,vYo),e(to,Rhe),e(Rhe,TYo),e(to,MYo),g(QA,to,null),b(c,RBe,u),b(c,sc,u),e(sc,MF),e(MF,Bhe),g(WA,Bhe,null),e(sc,EYo),e(sc,Phe),e(Phe,CYo),b(c,BBe,u),b(c,ur,u),g(HA,ur,null),e(ur,wYo),e(ur,lc),e(lc,AYo),e(lc,rO),e(rO,yYo),e(lc,LYo),e(lc,tO),e(tO,xYo),e(lc,kYo),e(ur,SYo),e(ur,UA),e(UA,RYo),e(UA,$he),e($he,BYo),e(UA,PYo),e(ur,$Yo),e(ur,ft),g(JA,ft,null),e(ft,IYo),e(ft,Ihe),e(Ihe,qYo),e(ft,NYo),e(ft,ic),e(ic,jYo),e(ic,qhe),e(qhe,DYo),e(ic,GYo),e(ic,aO),e(aO,OYo),e(ic,VYo),e(ft,XYo),e(ft,Nhe),e(Nhe,zYo),e(ft,QYo),g(YA,ft,null),e(ur,WYo),e(ur,ao),g(KA,ao,null),e(ao,HYo),e(ao,jhe),e(jhe,UYo),e(ao,JYo),e(ao,hn),e(hn,YYo),e(hn,Dhe),e(Dhe,KYo),e(hn,ZYo),e(hn,Ghe),e(Ghe,eKo),e(hn,oKo),e(hn,Ohe),e(Ohe,rKo),e(hn,tKo),e(ao,aKo),e(ao,dc),e(dc,EF),e(EF,Vhe),e(Vhe,nKo),e(EF,sKo),e(EF,nO),e(nO,lKo),e(EF,iKo),e(dc,dKo),e(dc,CF),e(CF,Xhe),e(Xhe,cKo),e(CF,fKo),e(CF,sO),e(sO,mKo),e(CF,gKo),e(dc,hKo),e(dc,wF),e(wF,zhe),e(zhe,pKo),e(wF,_Ko),e(wF,lO),e(lO,uKo),e(wF,bKo),e(ao,FKo),e(ao,AF),e(AF,vKo),e(AF,Qhe),e(Qhe,TKo),e(AF,MKo),e(AF,Whe),e(Whe,EKo),e(ao,CKo),e(ao,Hhe),e(Hhe,wKo),e(ao,AKo),g(ZA,ao,null),b(c,PBe,u),b(c,cc,u),e(cc,yF),e(yF,Uhe),g(e0,Uhe,null),e(cc,yKo),e(cc,Jhe),e(Jhe,LKo),b(c,$Be,u),b(c,br,u),g(o0,br,null),e(br,xKo),e(br,fc),e(fc,kKo),e(fc,iO),e(iO,SKo),e(fc,RKo),e(fc,dO),e(dO,BKo),e(fc,PKo),e(br,$Ko),e(br,r0),e(r0,IKo),e(r0,Yhe),e(Yhe,qKo),e(r0,NKo),e(br,jKo),e(br,mt),g(t0,mt,null),e(mt,DKo),e(mt,Khe),e(Khe,GKo),e(mt,OKo),e(mt,mc),e(mc,VKo),e(mc,Zhe),e(Zhe,XKo),e(mc,zKo),e(mc,cO),e(cO,QKo),e(mc,WKo),e(mt,HKo),e(mt,epe),e(epe,UKo),e(mt,JKo),g(a0,mt,null),e(br,YKo),e(br,no),g(n0,no,null),e(no,KKo),e(no,ope),e(ope,ZKo),e(no,eZo),e(no,pn),e(pn,oZo),e(pn,rpe),e(rpe,rZo),e(pn,tZo),e(pn,tpe),e(tpe,aZo),e(pn,nZo),e(pn,ape),e(ape,sZo),e(pn,lZo),e(no,iZo),e(no,npe),e(npe,LF),e(LF,spe),e(spe,dZo),e(LF,cZo),e(LF,fO),e(fO,fZo),e(LF,mZo),e(no,gZo),e(no,xF),e(xF,hZo),e(xF,lpe),e(lpe,pZo),e(xF,_Zo),e(xF,ipe),e(ipe,uZo),e(no,bZo),e(no,dpe),e(dpe,FZo),e(no,vZo),g(s0,no,null),b(c,IBe,u),b(c,gc,u),e(gc,kF),e(kF,cpe),g(l0,cpe,null),e(gc,TZo),e(gc,fpe),e(fpe,MZo),b(c,qBe,u),b(c,Fr,u),g(i0,Fr,null),e(Fr,EZo),e(Fr,hc),e(hc,CZo),e(hc,mO),e(mO,wZo),e(hc,AZo),e(hc,gO),e(gO,yZo),e(hc,LZo),e(Fr,xZo),e(Fr,d0),e(d0,kZo),e(d0,mpe),e(mpe,SZo),e(d0,RZo),e(Fr,BZo),e(Fr,gt),g(c0,gt,null),e(gt,PZo),e(gt,gpe),e(gpe,$Zo),e(gt,IZo),e(gt,pc),e(pc,qZo),e(pc,hpe),e(hpe,NZo),e(pc,jZo),e(pc,hO),e(hO,DZo),e(pc,GZo),e(gt,OZo),e(gt,ppe),e(ppe,VZo),e(gt,XZo),g(f0,gt,null),e(Fr,zZo),e(Fr,ho),g(m0,ho,null),e(ho,QZo),e(ho,_pe),e(_pe,WZo),e(ho,HZo),e(ho,_n),e(_n,UZo),e(_n,upe),e(upe,JZo),e(_n,YZo),e(_n,bpe),e(bpe,KZo),e(_n,ZZo),e(_n,Fpe),e(Fpe,eer),e(_n,oer),e(ho,rer),e(ho,x),e(x,SF),e(SF,vpe),e(vpe,ter),e(SF,aer),e(SF,pO),e(pO,ner),e(SF,ser),e(x,ler),e(x,RF),e(RF,Tpe),e(Tpe,ier),e(RF,der),e(RF,_O),e(_O,cer),e(RF,fer),e(x,mer),e(x,BF),e(BF,Mpe),e(Mpe,ger),e(BF,her),e(BF,uO),e(uO,per),e(BF,_er),e(x,uer),e(x,PF),e(PF,Epe),e(Epe,ber),e(PF,Fer),e(PF,bO),e(bO,ver),e(PF,Ter),e(x,Mer),e(x,$F),e($F,Cpe),e(Cpe,Eer),e($F,Cer),e($F,FO),e(FO,wer),e($F,Aer),e(x,yer),e(x,IF),e(IF,wpe),e(wpe,Ler),e(IF,xer),e(IF,vO),e(vO,ker),e(IF,Ser),e(x,Rer),e(x,qF),e(qF,Ape),e(Ape,Ber),e(qF,Per),e(qF,TO),e(TO,$er),e(qF,Ier),e(x,qer),e(x,NF),e(NF,ype),e(ype,Ner),e(NF,jer),e(NF,MO),e(MO,Der),e(NF,Ger),e(x,Oer),e(x,jF),e(jF,Lpe),e(Lpe,Ver),e(jF,Xer),e(jF,EO),e(EO,zer),e(jF,Qer),e(x,Wer),e(x,DF),e(DF,xpe),e(xpe,Her),e(DF,Uer),e(DF,CO),e(CO,Jer),e(DF,Yer),e(x,Ker),e(x,GF),e(GF,kpe),e(kpe,Zer),e(GF,eor),e(GF,wO),e(wO,oor),e(GF,ror),e(x,tor),e(x,OF),e(OF,Spe),e(Spe,aor),e(OF,nor),e(OF,AO),e(AO,sor),e(OF,lor),e(x,ior),e(x,VF),e(VF,Rpe),e(Rpe,dor),e(VF,cor),e(VF,yO),e(yO,mor),e(VF,gor),e(x,hor),e(x,XF),e(XF,Bpe),e(Bpe,por),e(XF,_or),e(XF,LO),e(LO,uor),e(XF,bor),e(x,For),e(x,zF),e(zF,Ppe),e(Ppe,vor),e(zF,Tor),e(zF,xO),e(xO,Mor),e(zF,Eor),e(x,Cor),e(x,QF),e(QF,$pe),e($pe,wor),e(QF,Aor),e(QF,kO),e(kO,yor),e(QF,Lor),e(x,xor),e(x,Gs),e(Gs,Ipe),e(Ipe,kor),e(Gs,Sor),e(Gs,SO),e(SO,Ror),e(Gs,Bor),e(Gs,RO),e(RO,Por),e(Gs,$or),e(x,Ior),e(x,WF),e(WF,qpe),e(qpe,qor),e(WF,Nor),e(WF,BO),e(BO,jor),e(WF,Dor),e(x,Gor),e(x,HF),e(HF,Npe),e(Npe,Oor),e(HF,Vor),e(HF,PO),e(PO,Xor),e(HF,zor),e(x,Qor),e(x,UF),e(UF,jpe),e(jpe,Wor),e(UF,Hor),e(UF,$O),e($O,Uor),e(UF,Jor),e(x,Yor),e(x,JF),e(JF,Dpe),e(Dpe,Kor),e(JF,Zor),e(JF,IO),e(IO,err),e(JF,orr),e(x,rrr),e(x,YF),e(YF,Gpe),e(Gpe,trr),e(YF,arr),e(YF,qO),e(qO,nrr),e(YF,srr),e(x,lrr),e(x,KF),e(KF,Ope),e(Ope,irr),e(KF,drr),e(KF,NO),e(NO,crr),e(KF,frr),e(x,mrr),e(x,ZF),e(ZF,Vpe),e(Vpe,grr),e(ZF,hrr),e(ZF,jO),e(jO,prr),e(ZF,_rr),e(x,urr),e(x,ev),e(ev,Xpe),e(Xpe,brr),e(ev,Frr),e(ev,DO),e(DO,vrr),e(ev,Trr),e(x,Mrr),e(x,ov),e(ov,zpe),e(zpe,Err),e(ov,Crr),e(ov,GO),e(GO,wrr),e(ov,Arr),e(x,yrr),e(x,rv),e(rv,Qpe),e(Qpe,Lrr),e(rv,xrr),e(rv,OO),e(OO,krr),e(rv,Srr),e(x,Rrr),e(x,tv),e(tv,Wpe),e(Wpe,Brr),e(tv,Prr),e(tv,VO),e(VO,$rr),e(tv,Irr),e(x,qrr),e(x,av),e(av,Hpe),e(Hpe,Nrr),e(av,jrr),e(av,XO),e(XO,Drr),e(av,Grr),e(x,Orr),e(x,nv),e(nv,Upe),e(Upe,Vrr),e(nv,Xrr),e(nv,zO),e(zO,zrr),e(nv,Qrr),e(x,Wrr),e(x,sv),e(sv,Jpe),e(Jpe,Hrr),e(sv,Urr),e(sv,QO),e(QO,Jrr),e(sv,Yrr),e(x,Krr),e(x,lv),e(lv,Ype),e(Ype,Zrr),e(lv,etr),e(lv,WO),e(WO,otr),e(lv,rtr),e(x,ttr),e(x,iv),e(iv,Kpe),e(Kpe,atr),e(iv,ntr),e(iv,HO),e(HO,str),e(iv,ltr),e(x,itr),e(x,dv),e(dv,Zpe),e(Zpe,dtr),e(dv,ctr),e(dv,UO),e(UO,ftr),e(dv,mtr),e(x,gtr),e(x,cv),e(cv,e_e),e(e_e,htr),e(cv,ptr),e(cv,JO),e(JO,_tr),e(cv,utr),e(x,btr),e(x,fv),e(fv,o_e),e(o_e,Ftr),e(fv,vtr),e(fv,YO),e(YO,Ttr),e(fv,Mtr),e(x,Etr),e(x,mv),e(mv,r_e),e(r_e,Ctr),e(mv,wtr),e(mv,KO),e(KO,Atr),e(mv,ytr),e(x,Ltr),e(x,gv),e(gv,t_e),e(t_e,xtr),e(gv,ktr),e(gv,ZO),e(ZO,Str),e(gv,Rtr),e(x,Btr),e(x,hv),e(hv,a_e),e(a_e,Ptr),e(hv,$tr),e(hv,eV),e(eV,Itr),e(hv,qtr),e(x,Ntr),e(x,pv),e(pv,n_e),e(n_e,jtr),e(pv,Dtr),e(pv,oV),e(oV,Gtr),e(pv,Otr),e(x,Vtr),e(x,_v),e(_v,s_e),e(s_e,Xtr),e(_v,ztr),e(_v,rV),e(rV,Qtr),e(_v,Wtr),e(x,Htr),e(x,uv),e(uv,l_e),e(l_e,Utr),e(uv,Jtr),e(uv,tV),e(tV,Ytr),e(uv,Ktr),e(x,Ztr),e(x,bv),e(bv,i_e),e(i_e,ear),e(bv,oar),e(bv,aV),e(aV,rar),e(bv,tar),e(x,aar),e(x,Fv),e(Fv,d_e),e(d_e,nar),e(Fv,sar),e(Fv,nV),e(nV,lar),e(Fv,iar),e(ho,dar),e(ho,c_e),e(c_e,car),e(ho,far),g(g0,ho,null),b(c,NBe,u),b(c,_c,u),e(_c,vv),e(vv,f_e),g(h0,f_e,null),e(_c,mar),e(_c,m_e),e(m_e,gar),b(c,jBe,u),b(c,vr,u),g(p0,vr,null),e(vr,har),e(vr,uc),e(uc,par),e(uc,sV),e(sV,_ar),e(uc,uar),e(uc,lV),e(lV,bar),e(uc,Far),e(vr,Tar),e(vr,_0),e(_0,Mar),e(_0,g_e),e(g_e,Ear),e(_0,Car),e(vr,war),e(vr,ht),g(u0,ht,null),e(ht,Aar),e(ht,h_e),e(h_e,yar),e(ht,Lar),e(ht,bc),e(bc,xar),e(bc,p_e),e(p_e,kar),e(bc,Sar),e(bc,iV),e(iV,Rar),e(bc,Bar),e(ht,Par),e(ht,__e),e(__e,$ar),e(ht,Iar),g(b0,ht,null),e(vr,qar),e(vr,po),g(F0,po,null),e(po,Nar),e(po,u_e),e(u_e,jar),e(po,Dar),e(po,un),e(un,Gar),e(un,b_e),e(b_e,Oar),e(un,Var),e(un,F_e),e(F_e,Xar),e(un,zar),e(un,v_e),e(v_e,Qar),e(un,War),e(po,Har),e(po,H),e(H,Tv),e(Tv,T_e),e(T_e,Uar),e(Tv,Jar),e(Tv,dV),e(dV,Yar),e(Tv,Kar),e(H,Zar),e(H,Mv),e(Mv,M_e),e(M_e,enr),e(Mv,onr),e(Mv,cV),e(cV,rnr),e(Mv,tnr),e(H,anr),e(H,Ev),e(Ev,E_e),e(E_e,nnr),e(Ev,snr),e(Ev,fV),e(fV,lnr),e(Ev,inr),e(H,dnr),e(H,Cv),e(Cv,C_e),e(C_e,cnr),e(Cv,fnr),e(Cv,mV),e(mV,mnr),e(Cv,gnr),e(H,hnr),e(H,wv),e(wv,w_e),e(w_e,pnr),e(wv,_nr),e(wv,gV),e(gV,unr),e(wv,bnr),e(H,Fnr),e(H,Av),e(Av,A_e),e(A_e,vnr),e(Av,Tnr),e(Av,hV),e(hV,Mnr),e(Av,Enr),e(H,Cnr),e(H,yv),e(yv,y_e),e(y_e,wnr),e(yv,Anr),e(yv,pV),e(pV,ynr),e(yv,Lnr),e(H,xnr),e(H,Lv),e(Lv,L_e),e(L_e,knr),e(Lv,Snr),e(Lv,_V),e(_V,Rnr),e(Lv,Bnr),e(H,Pnr),e(H,xv),e(xv,x_e),e(x_e,$nr),e(xv,Inr),e(xv,uV),e(uV,qnr),e(xv,Nnr),e(H,jnr),e(H,kv),e(kv,k_e),e(k_e,Dnr),e(kv,Gnr),e(kv,bV),e(bV,Onr),e(kv,Vnr),e(H,Xnr),e(H,Sv),e(Sv,S_e),e(S_e,znr),e(Sv,Qnr),e(Sv,FV),e(FV,Wnr),e(Sv,Hnr),e(H,Unr),e(H,Rv),e(Rv,R_e),e(R_e,Jnr),e(Rv,Ynr),e(Rv,vV),e(vV,Knr),e(Rv,Znr),e(H,esr),e(H,Bv),e(Bv,B_e),e(B_e,osr),e(Bv,rsr),e(Bv,TV),e(TV,tsr),e(Bv,asr),e(H,nsr),e(H,Pv),e(Pv,P_e),e(P_e,ssr),e(Pv,lsr),e(Pv,MV),e(MV,isr),e(Pv,dsr),e(H,csr),e(H,$v),e($v,$_e),e($_e,fsr),e($v,msr),e($v,EV),e(EV,gsr),e($v,hsr),e(H,psr),e(H,Iv),e(Iv,I_e),e(I_e,_sr),e(Iv,usr),e(Iv,CV),e(CV,bsr),e(Iv,Fsr),e(H,vsr),e(H,qv),e(qv,q_e),e(q_e,Tsr),e(qv,Msr),e(qv,wV),e(wV,Esr),e(qv,Csr),e(H,wsr),e(H,Nv),e(Nv,N_e),e(N_e,Asr),e(Nv,ysr),e(Nv,AV),e(AV,Lsr),e(Nv,xsr),e(H,ksr),e(H,jv),e(jv,j_e),e(j_e,Ssr),e(jv,Rsr),e(jv,yV),e(yV,Bsr),e(jv,Psr),e(H,$sr),e(H,Dv),e(Dv,D_e),e(D_e,Isr),e(Dv,qsr),e(Dv,LV),e(LV,Nsr),e(Dv,jsr),e(H,Dsr),e(H,Gv),e(Gv,G_e),e(G_e,Gsr),e(Gv,Osr),e(Gv,xV),e(xV,Vsr),e(Gv,Xsr),e(H,zsr),e(H,Ov),e(Ov,O_e),e(O_e,Qsr),e(Ov,Wsr),e(Ov,kV),e(kV,Hsr),e(Ov,Usr),e(H,Jsr),e(H,Vv),e(Vv,V_e),e(V_e,Ysr),e(Vv,Ksr),e(Vv,SV),e(SV,Zsr),e(Vv,elr),e(po,olr),e(po,X_e),e(X_e,rlr),e(po,tlr),g(v0,po,null),b(c,DBe,u),b(c,Fc,u),e(Fc,Xv),e(Xv,z_e),g(T0,z_e,null),e(Fc,alr),e(Fc,Q_e),e(Q_e,nlr),b(c,GBe,u),b(c,Tr,u),g(M0,Tr,null),e(Tr,slr),e(Tr,vc),e(vc,llr),e(vc,RV),e(RV,ilr),e(vc,dlr),e(vc,BV),e(BV,clr),e(vc,flr),e(Tr,mlr),e(Tr,E0),e(E0,glr),e(E0,W_e),e(W_e,hlr),e(E0,plr),e(Tr,_lr),e(Tr,pt),g(C0,pt,null),e(pt,ulr),e(pt,H_e),e(H_e,blr),e(pt,Flr),e(pt,Tc),e(Tc,vlr),e(Tc,U_e),e(U_e,Tlr),e(Tc,Mlr),e(Tc,PV),e(PV,Elr),e(Tc,Clr),e(pt,wlr),e(pt,J_e),e(J_e,Alr),e(pt,ylr),g(w0,pt,null),e(Tr,Llr),e(Tr,_o),g(A0,_o,null),e(_o,xlr),e(_o,Y_e),e(Y_e,klr),e(_o,Slr),e(_o,bn),e(bn,Rlr),e(bn,K_e),e(K_e,Blr),e(bn,Plr),e(bn,Z_e),e(Z_e,$lr),e(bn,Ilr),e(bn,eue),e(eue,qlr),e(bn,Nlr),e(_o,jlr),e(_o,fe),e(fe,zv),e(zv,oue),e(oue,Dlr),e(zv,Glr),e(zv,$V),e($V,Olr),e(zv,Vlr),e(fe,Xlr),e(fe,Qv),e(Qv,rue),e(rue,zlr),e(Qv,Qlr),e(Qv,IV),e(IV,Wlr),e(Qv,Hlr),e(fe,Ulr),e(fe,Wv),e(Wv,tue),e(tue,Jlr),e(Wv,Ylr),e(Wv,qV),e(qV,Klr),e(Wv,Zlr),e(fe,eir),e(fe,Hv),e(Hv,aue),e(aue,oir),e(Hv,rir),e(Hv,NV),e(NV,tir),e(Hv,air),e(fe,nir),e(fe,Uv),e(Uv,nue),e(nue,sir),e(Uv,lir),e(Uv,jV),e(jV,iir),e(Uv,dir),e(fe,cir),e(fe,Jv),e(Jv,sue),e(sue,fir),e(Jv,mir),e(Jv,DV),e(DV,gir),e(Jv,hir),e(fe,pir),e(fe,Yv),e(Yv,lue),e(lue,_ir),e(Yv,uir),e(Yv,GV),e(GV,bir),e(Yv,Fir),e(fe,vir),e(fe,Kv),e(Kv,iue),e(iue,Tir),e(Kv,Mir),e(Kv,OV),e(OV,Eir),e(Kv,Cir),e(fe,wir),e(fe,Zv),e(Zv,due),e(due,Air),e(Zv,yir),e(Zv,VV),e(VV,Lir),e(Zv,xir),e(fe,kir),e(fe,eT),e(eT,cue),e(cue,Sir),e(eT,Rir),e(eT,XV),e(XV,Bir),e(eT,Pir),e(fe,$ir),e(fe,oT),e(oT,fue),e(fue,Iir),e(oT,qir),e(oT,zV),e(zV,Nir),e(oT,jir),e(fe,Dir),e(fe,rT),e(rT,mue),e(mue,Gir),e(rT,Oir),e(rT,QV),e(QV,Vir),e(rT,Xir),e(_o,zir),e(_o,gue),e(gue,Qir),e(_o,Wir),g(y0,_o,null),b(c,OBe,u),b(c,Mc,u),e(Mc,tT),e(tT,hue),g(L0,hue,null),e(Mc,Hir),e(Mc,pue),e(pue,Uir),b(c,VBe,u),b(c,Mr,u),g(x0,Mr,null),e(Mr,Jir),e(Mr,Ec),e(Ec,Yir),e(Ec,WV),e(WV,Kir),e(Ec,Zir),e(Ec,HV),e(HV,edr),e(Ec,odr),e(Mr,rdr),e(Mr,k0),e(k0,tdr),e(k0,_ue),e(_ue,adr),e(k0,ndr),e(Mr,sdr),e(Mr,_t),g(S0,_t,null),e(_t,ldr),e(_t,uue),e(uue,idr),e(_t,ddr),e(_t,Cc),e(Cc,cdr),e(Cc,bue),e(bue,fdr),e(Cc,mdr),e(Cc,UV),e(UV,gdr),e(Cc,hdr),e(_t,pdr),e(_t,Fue),e(Fue,_dr),e(_t,udr),g(R0,_t,null),e(Mr,bdr),e(Mr,uo),g(B0,uo,null),e(uo,Fdr),e(uo,vue),e(vue,vdr),e(uo,Tdr),e(uo,Fn),e(Fn,Mdr),e(Fn,Tue),e(Tue,Edr),e(Fn,Cdr),e(Fn,Mue),e(Mue,wdr),e(Fn,Adr),e(Fn,Eue),e(Eue,ydr),e(Fn,Ldr),e(uo,xdr),e(uo,P0),e(P0,aT),e(aT,Cue),e(Cue,kdr),e(aT,Sdr),e(aT,JV),e(JV,Rdr),e(aT,Bdr),e(P0,Pdr),e(P0,nT),e(nT,wue),e(wue,$dr),e(nT,Idr),e(nT,YV),e(YV,qdr),e(nT,Ndr),e(uo,jdr),e(uo,Aue),e(Aue,Ddr),e(uo,Gdr),g($0,uo,null),b(c,XBe,u),b(c,wc,u),e(wc,sT),e(sT,yue),g(I0,yue,null),e(wc,Odr),e(wc,Lue),e(Lue,Vdr),b(c,zBe,u),b(c,Er,u),g(q0,Er,null),e(Er,Xdr),e(Er,Ac),e(Ac,zdr),e(Ac,KV),e(KV,Qdr),e(Ac,Wdr),e(Ac,ZV),e(ZV,Hdr),e(Ac,Udr),e(Er,Jdr),e(Er,N0),e(N0,Ydr),e(N0,xue),e(xue,Kdr),e(N0,Zdr),e(Er,ecr),e(Er,ut),g(j0,ut,null),e(ut,ocr),e(ut,kue),e(kue,rcr),e(ut,tcr),e(ut,yc),e(yc,acr),e(yc,Sue),e(Sue,ncr),e(yc,scr),e(yc,eX),e(eX,lcr),e(yc,icr),e(ut,dcr),e(ut,Rue),e(Rue,ccr),e(ut,fcr),g(D0,ut,null),e(Er,mcr),e(Er,bo),g(G0,bo,null),e(bo,gcr),e(bo,Bue),e(Bue,hcr),e(bo,pcr),e(bo,vn),e(vn,_cr),e(vn,Pue),e(Pue,ucr),e(vn,bcr),e(vn,$ue),e($ue,Fcr),e(vn,vcr),e(vn,Iue),e(Iue,Tcr),e(vn,Mcr),e(bo,Ecr),e(bo,J),e(J,lT),e(lT,que),e(que,Ccr),e(lT,wcr),e(lT,oX),e(oX,Acr),e(lT,ycr),e(J,Lcr),e(J,iT),e(iT,Nue),e(Nue,xcr),e(iT,kcr),e(iT,rX),e(rX,Scr),e(iT,Rcr),e(J,Bcr),e(J,dT),e(dT,jue),e(jue,Pcr),e(dT,$cr),e(dT,tX),e(tX,Icr),e(dT,qcr),e(J,Ncr),e(J,cT),e(cT,Due),e(Due,jcr),e(cT,Dcr),e(cT,aX),e(aX,Gcr),e(cT,Ocr),e(J,Vcr),e(J,fT),e(fT,Gue),e(Gue,Xcr),e(fT,zcr),e(fT,nX),e(nX,Qcr),e(fT,Wcr),e(J,Hcr),e(J,mT),e(mT,Oue),e(Oue,Ucr),e(mT,Jcr),e(mT,sX),e(sX,Ycr),e(mT,Kcr),e(J,Zcr),e(J,gT),e(gT,Vue),e(Vue,efr),e(gT,ofr),e(gT,lX),e(lX,rfr),e(gT,tfr),e(J,afr),e(J,hT),e(hT,Xue),e(Xue,nfr),e(hT,sfr),e(hT,iX),e(iX,lfr),e(hT,ifr),e(J,dfr),e(J,pT),e(pT,zue),e(zue,cfr),e(pT,ffr),e(pT,dX),e(dX,mfr),e(pT,gfr),e(J,hfr),e(J,_T),e(_T,Que),e(Que,pfr),e(_T,_fr),e(_T,cX),e(cX,ufr),e(_T,bfr),e(J,Ffr),e(J,uT),e(uT,Wue),e(Wue,vfr),e(uT,Tfr),e(uT,fX),e(fX,Mfr),e(uT,Efr),e(J,Cfr),e(J,bT),e(bT,Hue),e(Hue,wfr),e(bT,Afr),e(bT,mX),e(mX,yfr),e(bT,Lfr),e(J,xfr),e(J,FT),e(FT,Uue),e(Uue,kfr),e(FT,Sfr),e(FT,gX),e(gX,Rfr),e(FT,Bfr),e(J,Pfr),e(J,vT),e(vT,Jue),e(Jue,$fr),e(vT,Ifr),e(vT,hX),e(hX,qfr),e(vT,Nfr),e(J,jfr),e(J,TT),e(TT,Yue),e(Yue,Dfr),e(TT,Gfr),e(TT,pX),e(pX,Ofr),e(TT,Vfr),e(J,Xfr),e(J,MT),e(MT,Kue),e(Kue,zfr),e(MT,Qfr),e(MT,_X),e(_X,Wfr),e(MT,Hfr),e(J,Ufr),e(J,ET),e(ET,Zue),e(Zue,Jfr),e(ET,Yfr),e(ET,uX),e(uX,Kfr),e(ET,Zfr),e(J,emr),e(J,CT),e(CT,e6e),e(e6e,omr),e(CT,rmr),e(CT,bX),e(bX,tmr),e(CT,amr),e(J,nmr),e(J,wT),e(wT,o6e),e(o6e,smr),e(wT,lmr),e(wT,FX),e(FX,imr),e(wT,dmr),e(J,cmr),e(J,AT),e(AT,r6e),e(r6e,fmr),e(AT,mmr),e(AT,vX),e(vX,gmr),e(AT,hmr),e(bo,pmr),e(bo,t6e),e(t6e,_mr),e(bo,umr),g(O0,bo,null),b(c,QBe,u),b(c,Lc,u),e(Lc,yT),e(yT,a6e),g(V0,a6e,null),e(Lc,bmr),e(Lc,n6e),e(n6e,Fmr),b(c,WBe,u),b(c,Cr,u),g(X0,Cr,null),e(Cr,vmr),e(Cr,xc),e(xc,Tmr),e(xc,TX),e(TX,Mmr),e(xc,Emr),e(xc,MX),e(MX,Cmr),e(xc,wmr),e(Cr,Amr),e(Cr,z0),e(z0,ymr),e(z0,s6e),e(s6e,Lmr),e(z0,xmr),e(Cr,kmr),e(Cr,bt),g(Q0,bt,null),e(bt,Smr),e(bt,l6e),e(l6e,Rmr),e(bt,Bmr),e(bt,kc),e(kc,Pmr),e(kc,i6e),e(i6e,$mr),e(kc,Imr),e(kc,EX),e(EX,qmr),e(kc,Nmr),e(bt,jmr),e(bt,d6e),e(d6e,Dmr),e(bt,Gmr),g(W0,bt,null),e(Cr,Omr),e(Cr,Fo),g(H0,Fo,null),e(Fo,Vmr),e(Fo,c6e),e(c6e,Xmr),e(Fo,zmr),e(Fo,Tn),e(Tn,Qmr),e(Tn,f6e),e(f6e,Wmr),e(Tn,Hmr),e(Tn,m6e),e(m6e,Umr),e(Tn,Jmr),e(Tn,g6e),e(g6e,Ymr),e(Tn,Kmr),e(Fo,Zmr),e(Fo,be),e(be,LT),e(LT,h6e),e(h6e,egr),e(LT,ogr),e(LT,CX),e(CX,rgr),e(LT,tgr),e(be,agr),e(be,xT),e(xT,p6e),e(p6e,ngr),e(xT,sgr),e(xT,wX),e(wX,lgr),e(xT,igr),e(be,dgr),e(be,kT),e(kT,_6e),e(_6e,cgr),e(kT,fgr),e(kT,AX),e(AX,mgr),e(kT,ggr),e(be,hgr),e(be,ST),e(ST,u6e),e(u6e,pgr),e(ST,_gr),e(ST,yX),e(yX,ugr),e(ST,bgr),e(be,Fgr),e(be,RT),e(RT,b6e),e(b6e,vgr),e(RT,Tgr),e(RT,LX),e(LX,Mgr),e(RT,Egr),e(be,Cgr),e(be,BT),e(BT,F6e),e(F6e,wgr),e(BT,Agr),e(BT,xX),e(xX,ygr),e(BT,Lgr),e(be,xgr),e(be,PT),e(PT,v6e),e(v6e,kgr),e(PT,Sgr),e(PT,kX),e(kX,Rgr),e(PT,Bgr),e(be,Pgr),e(be,$T),e($T,T6e),e(T6e,$gr),e($T,Igr),e($T,SX),e(SX,qgr),e($T,Ngr),e(be,jgr),e(be,IT),e(IT,M6e),e(M6e,Dgr),e(IT,Ggr),e(IT,RX),e(RX,Ogr),e(IT,Vgr),e(be,Xgr),e(be,qT),e(qT,E6e),e(E6e,zgr),e(qT,Qgr),e(qT,BX),e(BX,Wgr),e(qT,Hgr),e(Fo,Ugr),e(Fo,C6e),e(C6e,Jgr),e(Fo,Ygr),g(U0,Fo,null),b(c,HBe,u),b(c,Sc,u),e(Sc,NT),e(NT,w6e),g(J0,w6e,null),e(Sc,Kgr),e(Sc,A6e),e(A6e,Zgr),b(c,UBe,u),b(c,wr,u),g(Y0,wr,null),e(wr,ehr),e(wr,Rc),e(Rc,ohr),e(Rc,PX),e(PX,rhr),e(Rc,thr),e(Rc,$X),e($X,ahr),e(Rc,nhr),e(wr,shr),e(wr,K0),e(K0,lhr),e(K0,y6e),e(y6e,ihr),e(K0,dhr),e(wr,chr),e(wr,Ft),g(Z0,Ft,null),e(Ft,fhr),e(Ft,L6e),e(L6e,mhr),e(Ft,ghr),e(Ft,Bc),e(Bc,hhr),e(Bc,x6e),e(x6e,phr),e(Bc,_hr),e(Bc,IX),e(IX,uhr),e(Bc,bhr),e(Ft,Fhr),e(Ft,k6e),e(k6e,vhr),e(Ft,Thr),g(ey,Ft,null),e(wr,Mhr),e(wr,vo),g(oy,vo,null),e(vo,Ehr),e(vo,S6e),e(S6e,Chr),e(vo,whr),e(vo,Mn),e(Mn,Ahr),e(Mn,R6e),e(R6e,yhr),e(Mn,Lhr),e(Mn,B6e),e(B6e,xhr),e(Mn,khr),e(Mn,P6e),e(P6e,Shr),e(Mn,Rhr),e(vo,Bhr),e(vo,V),e(V,jT),e(jT,$6e),e($6e,Phr),e(jT,$hr),e(jT,qX),e(qX,Ihr),e(jT,qhr),e(V,Nhr),e(V,DT),e(DT,I6e),e(I6e,jhr),e(DT,Dhr),e(DT,NX),e(NX,Ghr),e(DT,Ohr),e(V,Vhr),e(V,GT),e(GT,q6e),e(q6e,Xhr),e(GT,zhr),e(GT,jX),e(jX,Qhr),e(GT,Whr),e(V,Hhr),e(V,OT),e(OT,N6e),e(N6e,Uhr),e(OT,Jhr),e(OT,DX),e(DX,Yhr),e(OT,Khr),e(V,Zhr),e(V,VT),e(VT,j6e),e(j6e,epr),e(VT,opr),e(VT,GX),e(GX,rpr),e(VT,tpr),e(V,apr),e(V,XT),e(XT,D6e),e(D6e,npr),e(XT,spr),e(XT,OX),e(OX,lpr),e(XT,ipr),e(V,dpr),e(V,zT),e(zT,G6e),e(G6e,cpr),e(zT,fpr),e(zT,VX),e(VX,mpr),e(zT,gpr),e(V,hpr),e(V,QT),e(QT,O6e),e(O6e,ppr),e(QT,_pr),e(QT,XX),e(XX,upr),e(QT,bpr),e(V,Fpr),e(V,WT),e(WT,V6e),e(V6e,vpr),e(WT,Tpr),e(WT,zX),e(zX,Mpr),e(WT,Epr),e(V,Cpr),e(V,HT),e(HT,X6e),e(X6e,wpr),e(HT,Apr),e(HT,QX),e(QX,ypr),e(HT,Lpr),e(V,xpr),e(V,UT),e(UT,z6e),e(z6e,kpr),e(UT,Spr),e(UT,WX),e(WX,Rpr),e(UT,Bpr),e(V,Ppr),e(V,JT),e(JT,Q6e),e(Q6e,$pr),e(JT,Ipr),e(JT,HX),e(HX,qpr),e(JT,Npr),e(V,jpr),e(V,YT),e(YT,W6e),e(W6e,Dpr),e(YT,Gpr),e(YT,UX),e(UX,Opr),e(YT,Vpr),e(V,Xpr),e(V,KT),e(KT,H6e),e(H6e,zpr),e(KT,Qpr),e(KT,JX),e(JX,Wpr),e(KT,Hpr),e(V,Upr),e(V,ZT),e(ZT,U6e),e(U6e,Jpr),e(ZT,Ypr),e(ZT,YX),e(YX,Kpr),e(ZT,Zpr),e(V,e_r),e(V,e9),e(e9,J6e),e(J6e,o_r),e(e9,r_r),e(e9,KX),e(KX,t_r),e(e9,a_r),e(V,n_r),e(V,o9),e(o9,Y6e),e(Y6e,s_r),e(o9,l_r),e(o9,ZX),e(ZX,i_r),e(o9,d_r),e(V,c_r),e(V,r9),e(r9,K6e),e(K6e,f_r),e(r9,m_r),e(r9,ez),e(ez,g_r),e(r9,h_r),e(V,p_r),e(V,t9),e(t9,Z6e),e(Z6e,__r),e(t9,u_r),e(t9,oz),e(oz,b_r),e(t9,F_r),e(V,v_r),e(V,a9),e(a9,e1e),e(e1e,T_r),e(a9,M_r),e(a9,rz),e(rz,E_r),e(a9,C_r),e(V,w_r),e(V,n9),e(n9,o1e),e(o1e,A_r),e(n9,y_r),e(n9,tz),e(tz,L_r),e(n9,x_r),e(V,k_r),e(V,s9),e(s9,r1e),e(r1e,S_r),e(s9,R_r),e(s9,az),e(az,B_r),e(s9,P_r),e(V,$_r),e(V,l9),e(l9,t1e),e(t1e,I_r),e(l9,q_r),e(l9,nz),e(nz,N_r),e(l9,j_r),e(V,D_r),e(V,i9),e(i9,a1e),e(a1e,G_r),e(i9,O_r),e(i9,sz),e(sz,V_r),e(i9,X_r),e(V,z_r),e(V,d9),e(d9,n1e),e(n1e,Q_r),e(d9,W_r),e(d9,lz),e(lz,H_r),e(d9,U_r),e(V,J_r),e(V,c9),e(c9,s1e),e(s1e,Y_r),e(c9,K_r),e(c9,iz),e(iz,Z_r),e(c9,eur),e(vo,our),e(vo,l1e),e(l1e,rur),e(vo,tur),g(ry,vo,null),b(c,JBe,u),b(c,Pc,u),e(Pc,f9),e(f9,i1e),g(ty,i1e,null),e(Pc,aur),e(Pc,d1e),e(d1e,nur),b(c,YBe,u),b(c,Ar,u),g(ay,Ar,null),e(Ar,sur),e(Ar,$c),e($c,lur),e($c,dz),e(dz,iur),e($c,dur),e($c,cz),e(cz,cur),e($c,fur),e(Ar,mur),e(Ar,ny),e(ny,gur),e(ny,c1e),e(c1e,hur),e(ny,pur),e(Ar,_ur),e(Ar,vt),g(sy,vt,null),e(vt,uur),e(vt,f1e),e(f1e,bur),e(vt,Fur),e(vt,Ic),e(Ic,vur),e(Ic,m1e),e(m1e,Tur),e(Ic,Mur),e(Ic,fz),e(fz,Eur),e(Ic,Cur),e(vt,wur),e(vt,g1e),e(g1e,Aur),e(vt,yur),g(ly,vt,null),e(Ar,Lur),e(Ar,To),g(iy,To,null),e(To,xur),e(To,h1e),e(h1e,kur),e(To,Sur),e(To,En),e(En,Rur),e(En,p1e),e(p1e,Bur),e(En,Pur),e(En,_1e),e(_1e,$ur),e(En,Iur),e(En,u1e),e(u1e,qur),e(En,Nur),e(To,jur),e(To,ne),e(ne,m9),e(m9,b1e),e(b1e,Dur),e(m9,Gur),e(m9,mz),e(mz,Our),e(m9,Vur),e(ne,Xur),e(ne,g9),e(g9,F1e),e(F1e,zur),e(g9,Qur),e(g9,gz),e(gz,Wur),e(g9,Hur),e(ne,Uur),e(ne,h9),e(h9,v1e),e(v1e,Jur),e(h9,Yur),e(h9,hz),e(hz,Kur),e(h9,Zur),e(ne,e6r),e(ne,p9),e(p9,T1e),e(T1e,o6r),e(p9,r6r),e(p9,pz),e(pz,t6r),e(p9,a6r),e(ne,n6r),e(ne,_9),e(_9,M1e),e(M1e,s6r),e(_9,l6r),e(_9,_z),e(_z,i6r),e(_9,d6r),e(ne,c6r),e(ne,u9),e(u9,E1e),e(E1e,f6r),e(u9,m6r),e(u9,uz),e(uz,g6r),e(u9,h6r),e(ne,p6r),e(ne,b9),e(b9,C1e),e(C1e,_6r),e(b9,u6r),e(b9,bz),e(bz,b6r),e(b9,F6r),e(ne,v6r),e(ne,F9),e(F9,w1e),e(w1e,T6r),e(F9,M6r),e(F9,Fz),e(Fz,E6r),e(F9,C6r),e(ne,w6r),e(ne,v9),e(v9,A1e),e(A1e,A6r),e(v9,y6r),e(v9,vz),e(vz,L6r),e(v9,x6r),e(ne,k6r),e(ne,T9),e(T9,y1e),e(y1e,S6r),e(T9,R6r),e(T9,Tz),e(Tz,B6r),e(T9,P6r),e(ne,$6r),e(ne,M9),e(M9,L1e),e(L1e,I6r),e(M9,q6r),e(M9,Mz),e(Mz,N6r),e(M9,j6r),e(ne,D6r),e(ne,E9),e(E9,x1e),e(x1e,G6r),e(E9,O6r),e(E9,Ez),e(Ez,V6r),e(E9,X6r),e(ne,z6r),e(ne,C9),e(C9,k1e),e(k1e,Q6r),e(C9,W6r),e(C9,Cz),e(Cz,H6r),e(C9,U6r),e(ne,J6r),e(ne,w9),e(w9,S1e),e(S1e,Y6r),e(w9,K6r),e(w9,wz),e(wz,Z6r),e(w9,e1r),e(ne,o1r),e(ne,A9),e(A9,R1e),e(R1e,r1r),e(A9,t1r),e(A9,Az),e(Az,a1r),e(A9,n1r),e(ne,s1r),e(ne,y9),e(y9,B1e),e(B1e,l1r),e(y9,i1r),e(y9,yz),e(yz,d1r),e(y9,c1r),e(ne,f1r),e(ne,L9),e(L9,P1e),e(P1e,m1r),e(L9,g1r),e(L9,Lz),e(Lz,h1r),e(L9,p1r),e(To,_1r),e(To,$1e),e($1e,u1r),e(To,b1r),g(dy,To,null),b(c,KBe,u),b(c,qc,u),e(qc,x9),e(x9,I1e),g(cy,I1e,null),e(qc,F1r),e(qc,q1e),e(q1e,v1r),b(c,ZBe,u),b(c,yr,u),g(fy,yr,null),e(yr,T1r),e(yr,Nc),e(Nc,M1r),e(Nc,xz),e(xz,E1r),e(Nc,C1r),e(Nc,kz),e(kz,w1r),e(Nc,A1r),e(yr,y1r),e(yr,my),e(my,L1r),e(my,N1e),e(N1e,x1r),e(my,k1r),e(yr,S1r),e(yr,Tt),g(gy,Tt,null),e(Tt,R1r),e(Tt,j1e),e(j1e,B1r),e(Tt,P1r),e(Tt,jc),e(jc,$1r),e(jc,D1e),e(D1e,I1r),e(jc,q1r),e(jc,Sz),e(Sz,N1r),e(jc,j1r),e(Tt,D1r),e(Tt,G1e),e(G1e,G1r),e(Tt,O1r),g(hy,Tt,null),e(yr,V1r),e(yr,Mo),g(py,Mo,null),e(Mo,X1r),e(Mo,O1e),e(O1e,z1r),e(Mo,Q1r),e(Mo,Cn),e(Cn,W1r),e(Cn,V1e),e(V1e,H1r),e(Cn,U1r),e(Cn,X1e),e(X1e,J1r),e(Cn,Y1r),e(Cn,z1e),e(z1e,K1r),e(Cn,Z1r),e(Mo,ebr),e(Mo,Q1e),e(Q1e,k9),e(k9,W1e),e(W1e,obr),e(k9,rbr),e(k9,Rz),e(Rz,tbr),e(k9,abr),e(Mo,nbr),e(Mo,H1e),e(H1e,sbr),e(Mo,lbr),g(_y,Mo,null),b(c,ePe,u),b(c,Dc,u),e(Dc,S9),e(S9,U1e),g(uy,U1e,null),e(Dc,ibr),e(Dc,J1e),e(J1e,dbr),b(c,oPe,u),b(c,Lr,u),g(by,Lr,null),e(Lr,cbr),e(Lr,Gc),e(Gc,fbr),e(Gc,Bz),e(Bz,mbr),e(Gc,gbr),e(Gc,Pz),e(Pz,hbr),e(Gc,pbr),e(Lr,_br),e(Lr,Fy),e(Fy,ubr),e(Fy,Y1e),e(Y1e,bbr),e(Fy,Fbr),e(Lr,vbr),e(Lr,Mt),g(vy,Mt,null),e(Mt,Tbr),e(Mt,K1e),e(K1e,Mbr),e(Mt,Ebr),e(Mt,Oc),e(Oc,Cbr),e(Oc,Z1e),e(Z1e,wbr),e(Oc,Abr),e(Oc,$z),e($z,ybr),e(Oc,Lbr),e(Mt,xbr),e(Mt,ebe),e(ebe,kbr),e(Mt,Sbr),g(Ty,Mt,null),e(Lr,Rbr),e(Lr,Eo),g(My,Eo,null),e(Eo,Bbr),e(Eo,obe),e(obe,Pbr),e(Eo,$br),e(Eo,wn),e(wn,Ibr),e(wn,rbe),e(rbe,qbr),e(wn,Nbr),e(wn,tbe),e(tbe,jbr),e(wn,Dbr),e(wn,abe),e(abe,Gbr),e(wn,Obr),e(Eo,Vbr),e(Eo,Y),e(Y,R9),e(R9,nbe),e(nbe,Xbr),e(R9,zbr),e(R9,Iz),e(Iz,Qbr),e(R9,Wbr),e(Y,Hbr),e(Y,B9),e(B9,sbe),e(sbe,Ubr),e(B9,Jbr),e(B9,qz),e(qz,Ybr),e(B9,Kbr),e(Y,Zbr),e(Y,P9),e(P9,lbe),e(lbe,e5r),e(P9,o5r),e(P9,Nz),e(Nz,r5r),e(P9,t5r),e(Y,a5r),e(Y,$9),e($9,ibe),e(ibe,n5r),e($9,s5r),e($9,jz),e(jz,l5r),e($9,i5r),e(Y,d5r),e(Y,I9),e(I9,dbe),e(dbe,c5r),e(I9,f5r),e(I9,Dz),e(Dz,m5r),e(I9,g5r),e(Y,h5r),e(Y,q9),e(q9,cbe),e(cbe,p5r),e(q9,_5r),e(q9,Gz),e(Gz,u5r),e(q9,b5r),e(Y,F5r),e(Y,N9),e(N9,fbe),e(fbe,v5r),e(N9,T5r),e(N9,Oz),e(Oz,M5r),e(N9,E5r),e(Y,C5r),e(Y,j9),e(j9,mbe),e(mbe,w5r),e(j9,A5r),e(j9,Vz),e(Vz,y5r),e(j9,L5r),e(Y,x5r),e(Y,D9),e(D9,gbe),e(gbe,k5r),e(D9,S5r),e(D9,Xz),e(Xz,R5r),e(D9,B5r),e(Y,P5r),e(Y,G9),e(G9,hbe),e(hbe,$5r),e(G9,I5r),e(G9,zz),e(zz,q5r),e(G9,N5r),e(Y,j5r),e(Y,O9),e(O9,pbe),e(pbe,D5r),e(O9,G5r),e(O9,Qz),e(Qz,O5r),e(O9,V5r),e(Y,X5r),e(Y,V9),e(V9,_be),e(_be,z5r),e(V9,Q5r),e(V9,Wz),e(Wz,W5r),e(V9,H5r),e(Y,U5r),e(Y,X9),e(X9,ube),e(ube,J5r),e(X9,Y5r),e(X9,Hz),e(Hz,K5r),e(X9,Z5r),e(Y,e2r),e(Y,z9),e(z9,bbe),e(bbe,o2r),e(z9,r2r),e(z9,Uz),e(Uz,t2r),e(z9,a2r),e(Y,n2r),e(Y,Q9),e(Q9,Fbe),e(Fbe,s2r),e(Q9,l2r),e(Q9,Jz),e(Jz,i2r),e(Q9,d2r),e(Y,c2r),e(Y,W9),e(W9,vbe),e(vbe,f2r),e(W9,m2r),e(W9,Yz),e(Yz,g2r),e(W9,h2r),e(Y,p2r),e(Y,H9),e(H9,Tbe),e(Tbe,_2r),e(H9,u2r),e(H9,Kz),e(Kz,b2r),e(H9,F2r),e(Y,v2r),e(Y,U9),e(U9,Mbe),e(Mbe,T2r),e(U9,M2r),e(U9,Zz),e(Zz,E2r),e(U9,C2r),e(Y,w2r),e(Y,J9),e(J9,Ebe),e(Ebe,A2r),e(J9,y2r),e(J9,eQ),e(eQ,L2r),e(J9,x2r),e(Y,k2r),e(Y,Y9),e(Y9,Cbe),e(Cbe,S2r),e(Y9,R2r),e(Y9,oQ),e(oQ,B2r),e(Y9,P2r),e(Eo,$2r),e(Eo,wbe),e(wbe,I2r),e(Eo,q2r),g(Ey,Eo,null),b(c,rPe,u),b(c,Vc,u),e(Vc,K9),e(K9,Abe),g(Cy,Abe,null),e(Vc,N2r),e(Vc,ybe),e(ybe,j2r),b(c,tPe,u),b(c,xr,u),g(wy,xr,null),e(xr,D2r),e(xr,Xc),e(Xc,G2r),e(Xc,rQ),e(rQ,O2r),e(Xc,V2r),e(Xc,tQ),e(tQ,X2r),e(Xc,z2r),e(xr,Q2r),e(xr,Ay),e(Ay,W2r),e(Ay,Lbe),e(Lbe,H2r),e(Ay,U2r),e(xr,J2r),e(xr,Et),g(yy,Et,null),e(Et,Y2r),e(Et,xbe),e(xbe,K2r),e(Et,Z2r),e(Et,zc),e(zc,eFr),e(zc,kbe),e(kbe,oFr),e(zc,rFr),e(zc,aQ),e(aQ,tFr),e(zc,aFr),e(Et,nFr),e(Et,Sbe),e(Sbe,sFr),e(Et,lFr),g(Ly,Et,null),e(xr,iFr),e(xr,Co),g(xy,Co,null),e(Co,dFr),e(Co,Rbe),e(Rbe,cFr),e(Co,fFr),e(Co,An),e(An,mFr),e(An,Bbe),e(Bbe,gFr),e(An,hFr),e(An,Pbe),e(Pbe,pFr),e(An,_Fr),e(An,$be),e($be,uFr),e(An,bFr),e(Co,FFr),e(Co,K),e(K,Z9),e(Z9,Ibe),e(Ibe,vFr),e(Z9,TFr),e(Z9,nQ),e(nQ,MFr),e(Z9,EFr),e(K,CFr),e(K,eM),e(eM,qbe),e(qbe,wFr),e(eM,AFr),e(eM,sQ),e(sQ,yFr),e(eM,LFr),e(K,xFr),e(K,oM),e(oM,Nbe),e(Nbe,kFr),e(oM,SFr),e(oM,lQ),e(lQ,RFr),e(oM,BFr),e(K,PFr),e(K,rM),e(rM,jbe),e(jbe,$Fr),e(rM,IFr),e(rM,iQ),e(iQ,qFr),e(rM,NFr),e(K,jFr),e(K,tM),e(tM,Dbe),e(Dbe,DFr),e(tM,GFr),e(tM,dQ),e(dQ,OFr),e(tM,VFr),e(K,XFr),e(K,aM),e(aM,Gbe),e(Gbe,zFr),e(aM,QFr),e(aM,cQ),e(cQ,WFr),e(aM,HFr),e(K,UFr),e(K,nM),e(nM,Obe),e(Obe,JFr),e(nM,YFr),e(nM,fQ),e(fQ,KFr),e(nM,ZFr),e(K,evr),e(K,sM),e(sM,Vbe),e(Vbe,ovr),e(sM,rvr),e(sM,mQ),e(mQ,tvr),e(sM,avr),e(K,nvr),e(K,lM),e(lM,Xbe),e(Xbe,svr),e(lM,lvr),e(lM,gQ),e(gQ,ivr),e(lM,dvr),e(K,cvr),e(K,iM),e(iM,zbe),e(zbe,fvr),e(iM,mvr),e(iM,hQ),e(hQ,gvr),e(iM,hvr),e(K,pvr),e(K,dM),e(dM,Qbe),e(Qbe,_vr),e(dM,uvr),e(dM,pQ),e(pQ,bvr),e(dM,Fvr),e(K,vvr),e(K,cM),e(cM,Wbe),e(Wbe,Tvr),e(cM,Mvr),e(cM,_Q),e(_Q,Evr),e(cM,Cvr),e(K,wvr),e(K,fM),e(fM,Hbe),e(Hbe,Avr),e(fM,yvr),e(fM,uQ),e(uQ,Lvr),e(fM,xvr),e(K,kvr),e(K,mM),e(mM,Ube),e(Ube,Svr),e(mM,Rvr),e(mM,bQ),e(bQ,Bvr),e(mM,Pvr),e(K,$vr),e(K,gM),e(gM,Jbe),e(Jbe,Ivr),e(gM,qvr),e(gM,FQ),e(FQ,Nvr),e(gM,jvr),e(K,Dvr),e(K,hM),e(hM,Ybe),e(Ybe,Gvr),e(hM,Ovr),e(hM,vQ),e(vQ,Vvr),e(hM,Xvr),e(K,zvr),e(K,pM),e(pM,Kbe),e(Kbe,Qvr),e(pM,Wvr),e(pM,TQ),e(TQ,Hvr),e(pM,Uvr),e(K,Jvr),e(K,_M),e(_M,Zbe),e(Zbe,Yvr),e(_M,Kvr),e(_M,MQ),e(MQ,Zvr),e(_M,eTr),e(K,oTr),e(K,uM),e(uM,e5e),e(e5e,rTr),e(uM,tTr),e(uM,EQ),e(EQ,aTr),e(uM,nTr),e(K,sTr),e(K,bM),e(bM,o5e),e(o5e,lTr),e(bM,iTr),e(bM,CQ),e(CQ,dTr),e(bM,cTr),e(Co,fTr),e(Co,r5e),e(r5e,mTr),e(Co,gTr),g(ky,Co,null),b(c,aPe,u),b(c,Qc,u),e(Qc,FM),e(FM,t5e),g(Sy,t5e,null),e(Qc,hTr),e(Qc,a5e),e(a5e,pTr),b(c,nPe,u),b(c,kr,u),g(Ry,kr,null),e(kr,_Tr),e(kr,Wc),e(Wc,uTr),e(Wc,wQ),e(wQ,bTr),e(Wc,FTr),e(Wc,AQ),e(AQ,vTr),e(Wc,TTr),e(kr,MTr),e(kr,By),e(By,ETr),e(By,n5e),e(n5e,CTr),e(By,wTr),e(kr,ATr),e(kr,Ct),g(Py,Ct,null),e(Ct,yTr),e(Ct,s5e),e(s5e,LTr),e(Ct,xTr),e(Ct,Hc),e(Hc,kTr),e(Hc,l5e),e(l5e,STr),e(Hc,RTr),e(Hc,yQ),e(yQ,BTr),e(Hc,PTr),e(Ct,$Tr),e(Ct,i5e),e(i5e,ITr),e(Ct,qTr),g($y,Ct,null),e(kr,NTr),e(kr,wo),g(Iy,wo,null),e(wo,jTr),e(wo,d5e),e(d5e,DTr),e(wo,GTr),e(wo,yn),e(yn,OTr),e(yn,c5e),e(c5e,VTr),e(yn,XTr),e(yn,f5e),e(f5e,zTr),e(yn,QTr),e(yn,m5e),e(m5e,WTr),e(yn,HTr),e(wo,UTr),e(wo,g5e),e(g5e,vM),e(vM,h5e),e(h5e,JTr),e(vM,YTr),e(vM,LQ),e(LQ,KTr),e(vM,ZTr),e(wo,e9r),e(wo,p5e),e(p5e,o9r),e(wo,r9r),g(qy,wo,null),b(c,sPe,u),b(c,Uc,u),e(Uc,TM),e(TM,_5e),g(Ny,_5e,null),e(Uc,t9r),e(Uc,u5e),e(u5e,a9r),b(c,lPe,u),b(c,Sr,u),g(jy,Sr,null),e(Sr,n9r),e(Sr,Jc),e(Jc,s9r),e(Jc,xQ),e(xQ,l9r),e(Jc,i9r),e(Jc,kQ),e(kQ,d9r),e(Jc,c9r),e(Sr,f9r),e(Sr,Dy),e(Dy,m9r),e(Dy,b5e),e(b5e,g9r),e(Dy,h9r),e(Sr,p9r),e(Sr,wt),g(Gy,wt,null),e(wt,_9r),e(wt,F5e),e(F5e,u9r),e(wt,b9r),e(wt,Yc),e(Yc,F9r),e(Yc,v5e),e(v5e,v9r),e(Yc,T9r),e(Yc,SQ),e(SQ,M9r),e(Yc,E9r),e(wt,C9r),e(wt,T5e),e(T5e,w9r),e(wt,A9r),g(Oy,wt,null),e(Sr,y9r),e(Sr,Ao),g(Vy,Ao,null),e(Ao,L9r),e(Ao,M5e),e(M5e,x9r),e(Ao,k9r),e(Ao,Ln),e(Ln,S9r),e(Ln,E5e),e(E5e,R9r),e(Ln,B9r),e(Ln,C5e),e(C5e,P9r),e(Ln,$9r),e(Ln,w5e),e(w5e,I9r),e(Ln,q9r),e(Ao,N9r),e(Ao,A5e),e(A5e,MM),e(MM,y5e),e(y5e,j9r),e(MM,D9r),e(MM,RQ),e(RQ,G9r),e(MM,O9r),e(Ao,V9r),e(Ao,L5e),e(L5e,X9r),e(Ao,z9r),g(Xy,Ao,null),b(c,iPe,u),b(c,Kc,u),e(Kc,EM),e(EM,x5e),g(zy,x5e,null),e(Kc,Q9r),e(Kc,k5e),e(k5e,W9r),b(c,dPe,u),b(c,Rr,u),g(Qy,Rr,null),e(Rr,H9r),e(Rr,Zc),e(Zc,U9r),e(Zc,BQ),e(BQ,J9r),e(Zc,Y9r),e(Zc,PQ),e(PQ,K9r),e(Zc,Z9r),e(Rr,eMr),e(Rr,Wy),e(Wy,oMr),e(Wy,S5e),e(S5e,rMr),e(Wy,tMr),e(Rr,aMr),e(Rr,At),g(Hy,At,null),e(At,nMr),e(At,R5e),e(R5e,sMr),e(At,lMr),e(At,ef),e(ef,iMr),e(ef,B5e),e(B5e,dMr),e(ef,cMr),e(ef,$Q),e($Q,fMr),e(ef,mMr),e(At,gMr),e(At,P5e),e(P5e,hMr),e(At,pMr),g(Uy,At,null),e(Rr,_Mr),e(Rr,yo),g(Jy,yo,null),e(yo,uMr),e(yo,$5e),e($5e,bMr),e(yo,FMr),e(yo,xn),e(xn,vMr),e(xn,I5e),e(I5e,TMr),e(xn,MMr),e(xn,q5e),e(q5e,EMr),e(xn,CMr),e(xn,N5e),e(N5e,wMr),e(xn,AMr),e(yo,yMr),e(yo,z),e(z,CM),e(CM,j5e),e(j5e,LMr),e(CM,xMr),e(CM,IQ),e(IQ,kMr),e(CM,SMr),e(z,RMr),e(z,wM),e(wM,D5e),e(D5e,BMr),e(wM,PMr),e(wM,qQ),e(qQ,$Mr),e(wM,IMr),e(z,qMr),e(z,AM),e(AM,G5e),e(G5e,NMr),e(AM,jMr),e(AM,NQ),e(NQ,DMr),e(AM,GMr),e(z,OMr),e(z,yM),e(yM,O5e),e(O5e,VMr),e(yM,XMr),e(yM,jQ),e(jQ,zMr),e(yM,QMr),e(z,WMr),e(z,LM),e(LM,V5e),e(V5e,HMr),e(LM,UMr),e(LM,DQ),e(DQ,JMr),e(LM,YMr),e(z,KMr),e(z,xM),e(xM,X5e),e(X5e,ZMr),e(xM,e4r),e(xM,GQ),e(GQ,o4r),e(xM,r4r),e(z,t4r),e(z,kM),e(kM,z5e),e(z5e,a4r),e(kM,n4r),e(kM,OQ),e(OQ,s4r),e(kM,l4r),e(z,i4r),e(z,SM),e(SM,Q5e),e(Q5e,d4r),e(SM,c4r),e(SM,VQ),e(VQ,f4r),e(SM,m4r),e(z,g4r),e(z,RM),e(RM,W5e),e(W5e,h4r),e(RM,p4r),e(RM,XQ),e(XQ,_4r),e(RM,u4r),e(z,b4r),e(z,BM),e(BM,H5e),e(H5e,F4r),e(BM,v4r),e(BM,zQ),e(zQ,T4r),e(BM,M4r),e(z,E4r),e(z,PM),e(PM,U5e),e(U5e,C4r),e(PM,w4r),e(PM,QQ),e(QQ,A4r),e(PM,y4r),e(z,L4r),e(z,$M),e($M,J5e),e(J5e,x4r),e($M,k4r),e($M,WQ),e(WQ,S4r),e($M,R4r),e(z,B4r),e(z,IM),e(IM,Y5e),e(Y5e,P4r),e(IM,$4r),e(IM,HQ),e(HQ,I4r),e(IM,q4r),e(z,N4r),e(z,qM),e(qM,K5e),e(K5e,j4r),e(qM,D4r),e(qM,UQ),e(UQ,G4r),e(qM,O4r),e(z,V4r),e(z,NM),e(NM,Z5e),e(Z5e,X4r),e(NM,z4r),e(NM,JQ),e(JQ,Q4r),e(NM,W4r),e(z,H4r),e(z,jM),e(jM,e2e),e(e2e,U4r),e(jM,J4r),e(jM,YQ),e(YQ,Y4r),e(jM,K4r),e(z,Z4r),e(z,DM),e(DM,o2e),e(o2e,eEr),e(DM,oEr),e(DM,KQ),e(KQ,rEr),e(DM,tEr),e(z,aEr),e(z,GM),e(GM,r2e),e(r2e,nEr),e(GM,sEr),e(GM,ZQ),e(ZQ,lEr),e(GM,iEr),e(z,dEr),e(z,OM),e(OM,t2e),e(t2e,cEr),e(OM,fEr),e(OM,eW),e(eW,mEr),e(OM,gEr),e(z,hEr),e(z,VM),e(VM,a2e),e(a2e,pEr),e(VM,_Er),e(VM,oW),e(oW,uEr),e(VM,bEr),e(z,FEr),e(z,XM),e(XM,n2e),e(n2e,vEr),e(XM,TEr),e(XM,rW),e(rW,MEr),e(XM,EEr),e(z,CEr),e(z,zM),e(zM,s2e),e(s2e,wEr),e(zM,AEr),e(zM,tW),e(tW,yEr),e(zM,LEr),e(z,xEr),e(z,QM),e(QM,l2e),e(l2e,kEr),e(QM,SEr),e(QM,aW),e(aW,REr),e(QM,BEr),e(z,PEr),e(z,WM),e(WM,i2e),e(i2e,$Er),e(WM,IEr),e(WM,nW),e(nW,qEr),e(WM,NEr),e(z,jEr),e(z,HM),e(HM,d2e),e(d2e,DEr),e(HM,GEr),e(HM,sW),e(sW,OEr),e(HM,VEr),e(yo,XEr),e(yo,c2e),e(c2e,zEr),e(yo,QEr),g(Yy,yo,null),b(c,cPe,u),b(c,of,u),e(of,UM),e(UM,f2e),g(Ky,f2e,null),e(of,WEr),e(of,m2e),e(m2e,HEr),b(c,fPe,u),b(c,Br,u),g(Zy,Br,null),e(Br,UEr),e(Br,rf),e(rf,JEr),e(rf,lW),e(lW,YEr),e(rf,KEr),e(rf,iW),e(iW,ZEr),e(rf,eCr),e(Br,oCr),e(Br,eL),e(eL,rCr),e(eL,g2e),e(g2e,tCr),e(eL,aCr),e(Br,nCr),e(Br,yt),g(oL,yt,null),e(yt,sCr),e(yt,h2e),e(h2e,lCr),e(yt,iCr),e(yt,tf),e(tf,dCr),e(tf,p2e),e(p2e,cCr),e(tf,fCr),e(tf,dW),e(dW,mCr),e(tf,gCr),e(yt,hCr),e(yt,_2e),e(_2e,pCr),e(yt,_Cr),g(rL,yt,null),e(Br,uCr),e(Br,Lo),g(tL,Lo,null),e(Lo,bCr),e(Lo,u2e),e(u2e,FCr),e(Lo,vCr),e(Lo,kn),e(kn,TCr),e(kn,b2e),e(b2e,MCr),e(kn,ECr),e(kn,F2e),e(F2e,CCr),e(kn,wCr),e(kn,v2e),e(v2e,ACr),e(kn,yCr),e(Lo,LCr),e(Lo,ca),e(ca,JM),e(JM,T2e),e(T2e,xCr),e(JM,kCr),e(JM,cW),e(cW,SCr),e(JM,RCr),e(ca,BCr),e(ca,YM),e(YM,M2e),e(M2e,PCr),e(YM,$Cr),e(YM,fW),e(fW,ICr),e(YM,qCr),e(ca,NCr),e(ca,KM),e(KM,E2e),e(E2e,jCr),e(KM,DCr),e(KM,mW),e(mW,GCr),e(KM,OCr),e(ca,VCr),e(ca,ZM),e(ZM,C2e),e(C2e,XCr),e(ZM,zCr),e(ZM,gW),e(gW,QCr),e(ZM,WCr),e(ca,HCr),e(ca,e4),e(e4,w2e),e(w2e,UCr),e(e4,JCr),e(e4,hW),e(hW,YCr),e(e4,KCr),e(Lo,ZCr),e(Lo,A2e),e(A2e,e3r),e(Lo,o3r),g(aL,Lo,null),b(c,mPe,u),b(c,af,u),e(af,o4),e(o4,y2e),g(nL,y2e,null),e(af,r3r),e(af,L2e),e(L2e,t3r),b(c,gPe,u),b(c,Pr,u),g(sL,Pr,null),e(Pr,a3r),e(Pr,nf),e(nf,n3r),e(nf,pW),e(pW,s3r),e(nf,l3r),e(nf,_W),e(_W,i3r),e(nf,d3r),e(Pr,c3r),e(Pr,lL),e(lL,f3r),e(lL,x2e),e(x2e,m3r),e(lL,g3r),e(Pr,h3r),e(Pr,Lt),g(iL,Lt,null),e(Lt,p3r),e(Lt,k2e),e(k2e,_3r),e(Lt,u3r),e(Lt,sf),e(sf,b3r),e(sf,S2e),e(S2e,F3r),e(sf,v3r),e(sf,uW),e(uW,T3r),e(sf,M3r),e(Lt,E3r),e(Lt,R2e),e(R2e,C3r),e(Lt,w3r),g(dL,Lt,null),e(Pr,A3r),e(Pr,xo),g(cL,xo,null),e(xo,y3r),e(xo,B2e),e(B2e,L3r),e(xo,x3r),e(xo,Sn),e(Sn,k3r),e(Sn,P2e),e(P2e,S3r),e(Sn,R3r),e(Sn,$2e),e($2e,B3r),e(Sn,P3r),e(Sn,I2e),e(I2e,$3r),e(Sn,I3r),e(xo,q3r),e(xo,me),e(me,r4),e(r4,q2e),e(q2e,N3r),e(r4,j3r),e(r4,bW),e(bW,D3r),e(r4,G3r),e(me,O3r),e(me,t4),e(t4,N2e),e(N2e,V3r),e(t4,X3r),e(t4,FW),e(FW,z3r),e(t4,Q3r),e(me,W3r),e(me,a4),e(a4,j2e),e(j2e,H3r),e(a4,U3r),e(a4,vW),e(vW,J3r),e(a4,Y3r),e(me,K3r),e(me,n4),e(n4,D2e),e(D2e,Z3r),e(n4,ewr),e(n4,TW),e(TW,owr),e(n4,rwr),e(me,twr),e(me,s4),e(s4,G2e),e(G2e,awr),e(s4,nwr),e(s4,MW),e(MW,swr),e(s4,lwr),e(me,iwr),e(me,l4),e(l4,O2e),e(O2e,dwr),e(l4,cwr),e(l4,EW),e(EW,fwr),e(l4,mwr),e(me,gwr),e(me,i4),e(i4,V2e),e(V2e,hwr),e(i4,pwr),e(i4,CW),e(CW,_wr),e(i4,uwr),e(me,bwr),e(me,d4),e(d4,X2e),e(X2e,Fwr),e(d4,vwr),e(d4,wW),e(wW,Twr),e(d4,Mwr),e(me,Ewr),e(me,c4),e(c4,z2e),e(z2e,Cwr),e(c4,wwr),e(c4,AW),e(AW,Awr),e(c4,ywr),e(me,Lwr),e(me,f4),e(f4,Q2e),e(Q2e,xwr),e(f4,kwr),e(f4,yW),e(yW,Swr),e(f4,Rwr),e(me,Bwr),e(me,m4),e(m4,W2e),e(W2e,Pwr),e(m4,$wr),e(m4,LW),e(LW,Iwr),e(m4,qwr),e(me,Nwr),e(me,g4),e(g4,H2e),e(H2e,jwr),e(g4,Dwr),e(g4,xW),e(xW,Gwr),e(g4,Owr),e(xo,Vwr),e(xo,U2e),e(U2e,Xwr),e(xo,zwr),g(fL,xo,null),b(c,hPe,u),b(c,lf,u),e(lf,h4),e(h4,J2e),g(mL,J2e,null),e(lf,Qwr),e(lf,Y2e),e(Y2e,Wwr),b(c,pPe,u),b(c,$r,u),g(gL,$r,null),e($r,Hwr),e($r,df),e(df,Uwr),e(df,kW),e(kW,Jwr),e(df,Ywr),e(df,SW),e(SW,Kwr),e(df,Zwr),e($r,eAr),e($r,hL),e(hL,oAr),e(hL,K2e),e(K2e,rAr),e(hL,tAr),e($r,aAr),e($r,xt),g(pL,xt,null),e(xt,nAr),e(xt,Z2e),e(Z2e,sAr),e(xt,lAr),e(xt,cf),e(cf,iAr),e(cf,eFe),e(eFe,dAr),e(cf,cAr),e(cf,RW),e(RW,fAr),e(cf,mAr),e(xt,gAr),e(xt,oFe),e(oFe,hAr),e(xt,pAr),g(_L,xt,null),e($r,_Ar),e($r,ko),g(uL,ko,null),e(ko,uAr),e(ko,rFe),e(rFe,bAr),e(ko,FAr),e(ko,Rn),e(Rn,vAr),e(Rn,tFe),e(tFe,TAr),e(Rn,MAr),e(Rn,aFe),e(aFe,EAr),e(Rn,CAr),e(Rn,nFe),e(nFe,wAr),e(Rn,AAr),e(ko,yAr),e(ko,Fe),e(Fe,p4),e(p4,sFe),e(sFe,LAr),e(p4,xAr),e(p4,BW),e(BW,kAr),e(p4,SAr),e(Fe,RAr),e(Fe,_4),e(_4,lFe),e(lFe,BAr),e(_4,PAr),e(_4,PW),e(PW,$Ar),e(_4,IAr),e(Fe,qAr),e(Fe,u4),e(u4,iFe),e(iFe,NAr),e(u4,jAr),e(u4,$W),e($W,DAr),e(u4,GAr),e(Fe,OAr),e(Fe,b4),e(b4,dFe),e(dFe,VAr),e(b4,XAr),e(b4,IW),e(IW,zAr),e(b4,QAr),e(Fe,WAr),e(Fe,F4),e(F4,cFe),e(cFe,HAr),e(F4,UAr),e(F4,qW),e(qW,JAr),e(F4,YAr),e(Fe,KAr),e(Fe,v4),e(v4,fFe),e(fFe,ZAr),e(v4,e0r),e(v4,NW),e(NW,o0r),e(v4,r0r),e(Fe,t0r),e(Fe,T4),e(T4,mFe),e(mFe,a0r),e(T4,n0r),e(T4,jW),e(jW,s0r),e(T4,l0r),e(Fe,i0r),e(Fe,M4),e(M4,gFe),e(gFe,d0r),e(M4,c0r),e(M4,DW),e(DW,f0r),e(M4,m0r),e(Fe,g0r),e(Fe,E4),e(E4,hFe),e(hFe,h0r),e(E4,p0r),e(E4,GW),e(GW,_0r),e(E4,u0r),e(Fe,b0r),e(Fe,C4),e(C4,pFe),e(pFe,F0r),e(C4,v0r),e(C4,OW),e(OW,T0r),e(C4,M0r),e(ko,E0r),e(ko,_Fe),e(_Fe,C0r),e(ko,w0r),g(bL,ko,null),b(c,_Pe,u),b(c,ff,u),e(ff,w4),e(w4,uFe),g(FL,uFe,null),e(ff,A0r),e(ff,bFe),e(bFe,y0r),b(c,uPe,u),b(c,Ir,u),g(vL,Ir,null),e(Ir,L0r),e(Ir,mf),e(mf,x0r),e(mf,VW),e(VW,k0r),e(mf,S0r),e(mf,XW),e(XW,R0r),e(mf,B0r),e(Ir,P0r),e(Ir,TL),e(TL,$0r),e(TL,FFe),e(FFe,I0r),e(TL,q0r),e(Ir,N0r),e(Ir,kt),g(ML,kt,null),e(kt,j0r),e(kt,vFe),e(vFe,D0r),e(kt,G0r),e(kt,gf),e(gf,O0r),e(gf,TFe),e(TFe,V0r),e(gf,X0r),e(gf,zW),e(zW,z0r),e(gf,Q0r),e(kt,W0r),e(kt,MFe),e(MFe,H0r),e(kt,U0r),g(EL,kt,null),e(Ir,J0r),e(Ir,So),g(CL,So,null),e(So,Y0r),e(So,EFe),e(EFe,K0r),e(So,Z0r),e(So,Bn),e(Bn,eyr),e(Bn,CFe),e(CFe,oyr),e(Bn,ryr),e(Bn,wFe),e(wFe,tyr),e(Bn,ayr),e(Bn,AFe),e(AFe,nyr),e(Bn,syr),e(So,lyr),e(So,Ee),e(Ee,A4),e(A4,yFe),e(yFe,iyr),e(A4,dyr),e(A4,QW),e(QW,cyr),e(A4,fyr),e(Ee,myr),e(Ee,y4),e(y4,LFe),e(LFe,gyr),e(y4,hyr),e(y4,WW),e(WW,pyr),e(y4,_yr),e(Ee,uyr),e(Ee,L4),e(L4,xFe),e(xFe,byr),e(L4,Fyr),e(L4,HW),e(HW,vyr),e(L4,Tyr),e(Ee,Myr),e(Ee,x4),e(x4,kFe),e(kFe,Eyr),e(x4,Cyr),e(x4,UW),e(UW,wyr),e(x4,Ayr),e(Ee,yyr),e(Ee,k4),e(k4,SFe),e(SFe,Lyr),e(k4,xyr),e(k4,JW),e(JW,kyr),e(k4,Syr),e(Ee,Ryr),e(Ee,S4),e(S4,RFe),e(RFe,Byr),e(S4,Pyr),e(S4,YW),e(YW,$yr),e(S4,Iyr),e(Ee,qyr),e(Ee,R4),e(R4,BFe),e(BFe,Nyr),e(R4,jyr),e(R4,KW),e(KW,Dyr),e(R4,Gyr),e(Ee,Oyr),e(Ee,B4),e(B4,PFe),e(PFe,Vyr),e(B4,Xyr),e(B4,ZW),e(ZW,zyr),e(B4,Qyr),e(Ee,Wyr),e(Ee,P4),e(P4,$Fe),e($Fe,Hyr),e(P4,Uyr),e(P4,eH),e(eH,Jyr),e(P4,Yyr),e(So,Kyr),e(So,IFe),e(IFe,Zyr),e(So,eLr),g(wL,So,null),b(c,bPe,u),b(c,hf,u),e(hf,$4),e($4,qFe),g(AL,qFe,null),e(hf,oLr),e(hf,NFe),e(NFe,rLr),b(c,FPe,u),b(c,qr,u),g(yL,qr,null),e(qr,tLr),e(qr,pf),e(pf,aLr),e(pf,oH),e(oH,nLr),e(pf,sLr),e(pf,rH),e(rH,lLr),e(pf,iLr),e(qr,dLr),e(qr,LL),e(LL,cLr),e(LL,jFe),e(jFe,fLr),e(LL,mLr),e(qr,gLr),e(qr,St),g(xL,St,null),e(St,hLr),e(St,DFe),e(DFe,pLr),e(St,_Lr),e(St,_f),e(_f,uLr),e(_f,GFe),e(GFe,bLr),e(_f,FLr),e(_f,tH),e(tH,vLr),e(_f,TLr),e(St,MLr),e(St,OFe),e(OFe,ELr),e(St,CLr),g(kL,St,null),e(qr,wLr),e(qr,Ro),g(SL,Ro,null),e(Ro,ALr),e(Ro,VFe),e(VFe,yLr),e(Ro,LLr),e(Ro,Pn),e(Pn,xLr),e(Pn,XFe),e(XFe,kLr),e(Pn,SLr),e(Pn,zFe),e(zFe,RLr),e(Pn,BLr),e(Pn,QFe),e(QFe,PLr),e(Pn,$Lr),e(Ro,ILr),e(Ro,ve),e(ve,I4),e(I4,WFe),e(WFe,qLr),e(I4,NLr),e(I4,aH),e(aH,jLr),e(I4,DLr),e(ve,GLr),e(ve,q4),e(q4,HFe),e(HFe,OLr),e(q4,VLr),e(q4,nH),e(nH,XLr),e(q4,zLr),e(ve,QLr),e(ve,N4),e(N4,UFe),e(UFe,WLr),e(N4,HLr),e(N4,sH),e(sH,ULr),e(N4,JLr),e(ve,YLr),e(ve,j4),e(j4,JFe),e(JFe,KLr),e(j4,ZLr),e(j4,lH),e(lH,e8r),e(j4,o8r),e(ve,r8r),e(ve,D4),e(D4,YFe),e(YFe,t8r),e(D4,a8r),e(D4,iH),e(iH,n8r),e(D4,s8r),e(ve,l8r),e(ve,G4),e(G4,KFe),e(KFe,i8r),e(G4,d8r),e(G4,dH),e(dH,c8r),e(G4,f8r),e(ve,m8r),e(ve,O4),e(O4,ZFe),e(ZFe,g8r),e(O4,h8r),e(O4,cH),e(cH,p8r),e(O4,_8r),e(ve,u8r),e(ve,V4),e(V4,eve),e(eve,b8r),e(V4,F8r),e(V4,fH),e(fH,v8r),e(V4,T8r),e(ve,M8r),e(ve,X4),e(X4,ove),e(ove,E8r),e(X4,C8r),e(X4,mH),e(mH,w8r),e(X4,A8r),e(ve,y8r),e(ve,z4),e(z4,rve),e(rve,L8r),e(z4,x8r),e(z4,gH),e(gH,k8r),e(z4,S8r),e(Ro,R8r),e(Ro,tve),e(tve,B8r),e(Ro,P8r),g(RL,Ro,null),b(c,vPe,u),b(c,uf,u),e(uf,Q4),e(Q4,ave),g(BL,ave,null),e(uf,$8r),e(uf,nve),e(nve,I8r),b(c,TPe,u),b(c,Nr,u),g(PL,Nr,null),e(Nr,q8r),e(Nr,bf),e(bf,N8r),e(bf,hH),e(hH,j8r),e(bf,D8r),e(bf,pH),e(pH,G8r),e(bf,O8r),e(Nr,V8r),e(Nr,$L),e($L,X8r),e($L,sve),e(sve,z8r),e($L,Q8r),e(Nr,W8r),e(Nr,Rt),g(IL,Rt,null),e(Rt,H8r),e(Rt,lve),e(lve,U8r),e(Rt,J8r),e(Rt,Ff),e(Ff,Y8r),e(Ff,ive),e(ive,K8r),e(Ff,Z8r),e(Ff,_H),e(_H,e7r),e(Ff,o7r),e(Rt,r7r),e(Rt,dve),e(dve,t7r),e(Rt,a7r),g(qL,Rt,null),e(Nr,n7r),e(Nr,Bo),g(NL,Bo,null),e(Bo,s7r),e(Bo,cve),e(cve,l7r),e(Bo,i7r),e(Bo,$n),e($n,d7r),e($n,fve),e(fve,c7r),e($n,f7r),e($n,mve),e(mve,m7r),e($n,g7r),e($n,gve),e(gve,h7r),e($n,p7r),e(Bo,_7r),e(Bo,Te),e(Te,W4),e(W4,hve),e(hve,u7r),e(W4,b7r),e(W4,uH),e(uH,F7r),e(W4,v7r),e(Te,T7r),e(Te,H4),e(H4,pve),e(pve,M7r),e(H4,E7r),e(H4,bH),e(bH,C7r),e(H4,w7r),e(Te,A7r),e(Te,U4),e(U4,_ve),e(_ve,y7r),e(U4,L7r),e(U4,FH),e(FH,x7r),e(U4,k7r),e(Te,S7r),e(Te,J4),e(J4,uve),e(uve,R7r),e(J4,B7r),e(J4,vH),e(vH,P7r),e(J4,$7r),e(Te,I7r),e(Te,Y4),e(Y4,bve),e(bve,q7r),e(Y4,N7r),e(Y4,TH),e(TH,j7r),e(Y4,D7r),e(Te,G7r),e(Te,K4),e(K4,Fve),e(Fve,O7r),e(K4,V7r),e(K4,MH),e(MH,X7r),e(K4,z7r),e(Te,Q7r),e(Te,Z4),e(Z4,vve),e(vve,W7r),e(Z4,H7r),e(Z4,EH),e(EH,U7r),e(Z4,J7r),e(Te,Y7r),e(Te,eE),e(eE,Tve),e(Tve,K7r),e(eE,Z7r),e(eE,CH),e(CH,exr),e(eE,oxr),e(Te,rxr),e(Te,oE),e(oE,Mve),e(Mve,txr),e(oE,axr),e(oE,wH),e(wH,nxr),e(oE,sxr),e(Te,lxr),e(Te,rE),e(rE,Eve),e(Eve,ixr),e(rE,dxr),e(rE,AH),e(AH,cxr),e(rE,fxr),e(Bo,mxr),e(Bo,Cve),e(Cve,gxr),e(Bo,hxr),g(jL,Bo,null),b(c,MPe,u),b(c,vf,u),e(vf,tE),e(tE,wve),g(DL,wve,null),e(vf,pxr),e(vf,Ave),e(Ave,_xr),b(c,EPe,u),b(c,jr,u),g(GL,jr,null),e(jr,uxr),e(jr,Tf),e(Tf,bxr),e(Tf,yH),e(yH,Fxr),e(Tf,vxr),e(Tf,LH),e(LH,Txr),e(Tf,Mxr),e(jr,Exr),e(jr,OL),e(OL,Cxr),e(OL,yve),e(yve,wxr),e(OL,Axr),e(jr,yxr),e(jr,Bt),g(VL,Bt,null),e(Bt,Lxr),e(Bt,Lve),e(Lve,xxr),e(Bt,kxr),e(Bt,Mf),e(Mf,Sxr),e(Mf,xve),e(xve,Rxr),e(Mf,Bxr),e(Mf,xH),e(xH,Pxr),e(Mf,$xr),e(Bt,Ixr),e(Bt,kve),e(kve,qxr),e(Bt,Nxr),g(XL,Bt,null),e(jr,jxr),e(jr,Po),g(zL,Po,null),e(Po,Dxr),e(Po,Sve),e(Sve,Gxr),e(Po,Oxr),e(Po,In),e(In,Vxr),e(In,Rve),e(Rve,Xxr),e(In,zxr),e(In,Bve),e(Bve,Qxr),e(In,Wxr),e(In,Pve),e(Pve,Hxr),e(In,Uxr),e(Po,Jxr),e(Po,Be),e(Be,aE),e(aE,$ve),e($ve,Yxr),e(aE,Kxr),e(aE,kH),e(kH,Zxr),e(aE,ekr),e(Be,okr),e(Be,nE),e(nE,Ive),e(Ive,rkr),e(nE,tkr),e(nE,SH),e(SH,akr),e(nE,nkr),e(Be,skr),e(Be,sE),e(sE,qve),e(qve,lkr),e(sE,ikr),e(sE,RH),e(RH,dkr),e(sE,ckr),e(Be,fkr),e(Be,lE),e(lE,Nve),e(Nve,mkr),e(lE,gkr),e(lE,BH),e(BH,hkr),e(lE,pkr),e(Be,_kr),e(Be,iE),e(iE,jve),e(jve,ukr),e(iE,bkr),e(iE,PH),e(PH,Fkr),e(iE,vkr),e(Be,Tkr),e(Be,dE),e(dE,Dve),e(Dve,Mkr),e(dE,Ekr),e(dE,$H),e($H,Ckr),e(dE,wkr),e(Be,Akr),e(Be,cE),e(cE,Gve),e(Gve,ykr),e(cE,Lkr),e(cE,IH),e(IH,xkr),e(cE,kkr),e(Be,Skr),e(Be,fE),e(fE,Ove),e(Ove,Rkr),e(fE,Bkr),e(fE,qH),e(qH,Pkr),e(fE,$kr),e(Po,Ikr),e(Po,Vve),e(Vve,qkr),e(Po,Nkr),g(QL,Po,null),b(c,CPe,u),b(c,Ef,u),e(Ef,mE),e(mE,Xve),g(WL,Xve,null),e(Ef,jkr),e(Ef,zve),e(zve,Dkr),b(c,wPe,u),b(c,Dr,u),g(HL,Dr,null),e(Dr,Gkr),e(Dr,Cf),e(Cf,Okr),e(Cf,NH),e(NH,Vkr),e(Cf,Xkr),e(Cf,jH),e(jH,zkr),e(Cf,Qkr),e(Dr,Wkr),e(Dr,UL),e(UL,Hkr),e(UL,Qve),e(Qve,Ukr),e(UL,Jkr),e(Dr,Ykr),e(Dr,Pt),g(JL,Pt,null),e(Pt,Kkr),e(Pt,Wve),e(Wve,Zkr),e(Pt,eSr),e(Pt,wf),e(wf,oSr),e(wf,Hve),e(Hve,rSr),e(wf,tSr),e(wf,DH),e(DH,aSr),e(wf,nSr),e(Pt,sSr),e(Pt,Uve),e(Uve,lSr),e(Pt,iSr),g(YL,Pt,null),e(Dr,dSr),e(Dr,$o),g(KL,$o,null),e($o,cSr),e($o,Jve),e(Jve,fSr),e($o,mSr),e($o,qn),e(qn,gSr),e(qn,Yve),e(Yve,hSr),e(qn,pSr),e(qn,Kve),e(Kve,_Sr),e(qn,uSr),e(qn,Zve),e(Zve,bSr),e(qn,FSr),e($o,vSr),e($o,Pe),e(Pe,gE),e(gE,eTe),e(eTe,TSr),e(gE,MSr),e(gE,GH),e(GH,ESr),e(gE,CSr),e(Pe,wSr),e(Pe,hE),e(hE,oTe),e(oTe,ASr),e(hE,ySr),e(hE,OH),e(OH,LSr),e(hE,xSr),e(Pe,kSr),e(Pe,pE),e(pE,rTe),e(rTe,SSr),e(pE,RSr),e(pE,VH),e(VH,BSr),e(pE,PSr),e(Pe,$Sr),e(Pe,_E),e(_E,tTe),e(tTe,ISr),e(_E,qSr),e(_E,XH),e(XH,NSr),e(_E,jSr),e(Pe,DSr),e(Pe,uE),e(uE,aTe),e(aTe,GSr),e(uE,OSr),e(uE,zH),e(zH,VSr),e(uE,XSr),e(Pe,zSr),e(Pe,bE),e(bE,nTe),e(nTe,QSr),e(bE,WSr),e(bE,QH),e(QH,HSr),e(bE,USr),e(Pe,JSr),e(Pe,FE),e(FE,sTe),e(sTe,YSr),e(FE,KSr),e(FE,WH),e(WH,ZSr),e(FE,eRr),e(Pe,oRr),e(Pe,vE),e(vE,lTe),e(lTe,rRr),e(vE,tRr),e(vE,HH),e(HH,aRr),e(vE,nRr),e($o,sRr),e($o,iTe),e(iTe,lRr),e($o,iRr),g(ZL,$o,null),b(c,APe,u),b(c,Af,u),e(Af,TE),e(TE,dTe),g(e8,dTe,null),e(Af,dRr),e(Af,cTe),e(cTe,cRr),b(c,yPe,u),b(c,Gr,u),g(o8,Gr,null),e(Gr,fRr),e(Gr,yf),e(yf,mRr),e(yf,UH),e(UH,gRr),e(yf,hRr),e(yf,JH),e(JH,pRr),e(yf,_Rr),e(Gr,uRr),e(Gr,r8),e(r8,bRr),e(r8,fTe),e(fTe,FRr),e(r8,vRr),e(Gr,TRr),e(Gr,$t),g(t8,$t,null),e($t,MRr),e($t,mTe),e(mTe,ERr),e($t,CRr),e($t,Lf),e(Lf,wRr),e(Lf,gTe),e(gTe,ARr),e(Lf,yRr),e(Lf,YH),e(YH,LRr),e(Lf,xRr),e($t,kRr),e($t,hTe),e(hTe,SRr),e($t,RRr),g(a8,$t,null),e(Gr,BRr),e(Gr,Io),g(n8,Io,null),e(Io,PRr),e(Io,pTe),e(pTe,$Rr),e(Io,IRr),e(Io,Nn),e(Nn,qRr),e(Nn,_Te),e(_Te,NRr),e(Nn,jRr),e(Nn,uTe),e(uTe,DRr),e(Nn,GRr),e(Nn,bTe),e(bTe,ORr),e(Nn,VRr),e(Io,XRr),e(Io,FTe),e(FTe,ME),e(ME,vTe),e(vTe,zRr),e(ME,QRr),e(ME,KH),e(KH,WRr),e(ME,HRr),e(Io,URr),e(Io,TTe),e(TTe,JRr),e(Io,YRr),g(s8,Io,null),b(c,LPe,u),b(c,xf,u),e(xf,EE),e(EE,MTe),g(l8,MTe,null),e(xf,KRr),e(xf,ETe),e(ETe,ZRr),b(c,xPe,u),b(c,Or,u),g(i8,Or,null),e(Or,eBr),e(Or,kf),e(kf,oBr),e(kf,ZH),e(ZH,rBr),e(kf,tBr),e(kf,eU),e(eU,aBr),e(kf,nBr),e(Or,sBr),e(Or,d8),e(d8,lBr),e(d8,CTe),e(CTe,iBr),e(d8,dBr),e(Or,cBr),e(Or,It),g(c8,It,null),e(It,fBr),e(It,wTe),e(wTe,mBr),e(It,gBr),e(It,Sf),e(Sf,hBr),e(Sf,ATe),e(ATe,pBr),e(Sf,_Br),e(Sf,oU),e(oU,uBr),e(Sf,bBr),e(It,FBr),e(It,yTe),e(yTe,vBr),e(It,TBr),g(f8,It,null),e(Or,MBr),e(Or,qo),g(m8,qo,null),e(qo,EBr),e(qo,LTe),e(LTe,CBr),e(qo,wBr),e(qo,jn),e(jn,ABr),e(jn,xTe),e(xTe,yBr),e(jn,LBr),e(jn,kTe),e(kTe,xBr),e(jn,kBr),e(jn,STe),e(STe,SBr),e(jn,RBr),e(qo,BBr),e(qo,g8),e(g8,CE),e(CE,RTe),e(RTe,PBr),e(CE,$Br),e(CE,rU),e(rU,IBr),e(CE,qBr),e(g8,NBr),e(g8,wE),e(wE,BTe),e(BTe,jBr),e(wE,DBr),e(wE,tU),e(tU,GBr),e(wE,OBr),e(qo,VBr),e(qo,PTe),e(PTe,XBr),e(qo,zBr),g(h8,qo,null),b(c,kPe,u),b(c,Rf,u),e(Rf,AE),e(AE,$Te),g(p8,$Te,null),e(Rf,QBr),e(Rf,ITe),e(ITe,WBr),b(c,SPe,u),b(c,Vr,u),g(_8,Vr,null),e(Vr,HBr),e(Vr,Bf),e(Bf,UBr),e(Bf,aU),e(aU,JBr),e(Bf,YBr),e(Bf,nU),e(nU,KBr),e(Bf,ZBr),e(Vr,ePr),e(Vr,u8),e(u8,oPr),e(u8,qTe),e(qTe,rPr),e(u8,tPr),e(Vr,aPr),e(Vr,qt),g(b8,qt,null),e(qt,nPr),e(qt,NTe),e(NTe,sPr),e(qt,lPr),e(qt,Pf),e(Pf,iPr),e(Pf,jTe),e(jTe,dPr),e(Pf,cPr),e(Pf,sU),e(sU,fPr),e(Pf,mPr),e(qt,gPr),e(qt,DTe),e(DTe,hPr),e(qt,pPr),g(F8,qt,null),e(Vr,_Pr),e(Vr,No),g(v8,No,null),e(No,uPr),e(No,GTe),e(GTe,bPr),e(No,FPr),e(No,Dn),e(Dn,vPr),e(Dn,OTe),e(OTe,TPr),e(Dn,MPr),e(Dn,VTe),e(VTe,EPr),e(Dn,CPr),e(Dn,XTe),e(XTe,wPr),e(Dn,APr),e(No,yPr),e(No,zTe),e(zTe,yE),e(yE,QTe),e(QTe,LPr),e(yE,xPr),e(yE,lU),e(lU,kPr),e(yE,SPr),e(No,RPr),e(No,WTe),e(WTe,BPr),e(No,PPr),g(T8,No,null),RPe=!0},p(c,[u]){const M8={};u&2&&(M8.$$scope={dirty:u,ctx:c}),Of.$set(M8);const HTe={};u&2&&(HTe.$$scope={dirty:u,ctx:c}),$h.$set(HTe);const UTe={};u&2&&(UTe.$$scope={dirty:u,ctx:c}),Qh.$set(UTe)},i(c){RPe||(h(ge.$$.fragment,c),h(Da.$$.fragment,c),h(SC.$$.fragment,c),h(RC.$$.fragment,c),h(Of.$$.fragment,c),h(BC.$$.fragment,c),h(PC.$$.fragment,c),h(qC.$$.fragment,c),h(NC.$$.fragment,c),h(jC.$$.fragment,c),h(DC.$$.fragment,c),h(GC.$$.fragment,c),h(XC.$$.fragment,c),h(zC.$$.fragment,c),h(QC.$$.fragment,c),h(WC.$$.fragment,c),h(HC.$$.fragment,c),h(YC.$$.fragment,c),h($h.$$.fragment,c),h(KC.$$.fragment,c),h(ZC.$$.fragment,c),h(e3.$$.fragment,c),h(o3.$$.fragment,c),h(a3.$$.fragment,c),h(Qh.$$.fragment,c),h(n3.$$.fragment,c),h(s3.$$.fragment,c),h(l3.$$.fragment,c),h(i3.$$.fragment,c),h(c3.$$.fragment,c),h(f3.$$.fragment,c),h(m3.$$.fragment,c),h(g3.$$.fragment,c),h(h3.$$.fragment,c),h(p3.$$.fragment,c),h(u3.$$.fragment,c),h(b3.$$.fragment,c),h(F3.$$.fragment,c),h(v3.$$.fragment,c),h(T3.$$.fragment,c),h(M3.$$.fragment,c),h(C3.$$.fragment,c),h(w3.$$.fragment,c),h(A3.$$.fragment,c),h(y3.$$.fragment,c),h(L3.$$.fragment,c),h(x3.$$.fragment,c),h(S3.$$.fragment,c),h(R3.$$.fragment,c),h(B3.$$.fragment,c),h(P3.$$.fragment,c),h($3.$$.fragment,c),h(I3.$$.fragment,c),h(N3.$$.fragment,c),h(j3.$$.fragment,c),h(D3.$$.fragment,c),h(G3.$$.fragment,c),h(O3.$$.fragment,c),h(V3.$$.fragment,c),h(z3.$$.fragment,c),h(Q3.$$.fragment,c),h(W3.$$.fragment,c),h(H3.$$.fragment,c),h(U3.$$.fragment,c),h(J3.$$.fragment,c),h(K3.$$.fragment,c),h(Z3.$$.fragment,c),h(ew.$$.fragment,c),h(ow.$$.fragment,c),h(rw.$$.fragment,c),h(tw.$$.fragment,c),h(nw.$$.fragment,c),h(sw.$$.fragment,c),h(lw.$$.fragment,c),h(iw.$$.fragment,c),h(dw.$$.fragment,c),h(cw.$$.fragment,c),h(mw.$$.fragment,c),h(gw.$$.fragment,c),h(hw.$$.fragment,c),h(pw.$$.fragment,c),h(_w.$$.fragment,c),h(uw.$$.fragment,c),h(Fw.$$.fragment,c),h(vw.$$.fragment,c),h(Tw.$$.fragment,c),h(Mw.$$.fragment,c),h(Ew.$$.fragment,c),h(Cw.$$.fragment,c),h(Aw.$$.fragment,c),h(yw.$$.fragment,c),h(Lw.$$.fragment,c),h(xw.$$.fragment,c),h(kw.$$.fragment,c),h(Sw.$$.fragment,c),h(Bw.$$.fragment,c),h(Pw.$$.fragment,c),h($w.$$.fragment,c),h(Iw.$$.fragment,c),h(qw.$$.fragment,c),h(Nw.$$.fragment,c),h(Dw.$$.fragment,c),h(Gw.$$.fragment,c),h(Ow.$$.fragment,c),h(Vw.$$.fragment,c),h(Xw.$$.fragment,c),h(zw.$$.fragment,c),h(Ww.$$.fragment,c),h(Hw.$$.fragment,c),h(Uw.$$.fragment,c),h(Jw.$$.fragment,c),h(Yw.$$.fragment,c),h(Kw.$$.fragment,c),h(eA.$$.fragment,c),h(oA.$$.fragment,c),h(rA.$$.fragment,c),h(tA.$$.fragment,c),h(aA.$$.fragment,c),h(nA.$$.fragment,c),h(lA.$$.fragment,c),h(iA.$$.fragment,c),h(dA.$$.fragment,c),h(cA.$$.fragment,c),h(fA.$$.fragment,c),h(mA.$$.fragment,c),h(hA.$$.fragment,c),h(pA.$$.fragment,c),h(_A.$$.fragment,c),h(bA.$$.fragment,c),h(FA.$$.fragment,c),h(vA.$$.fragment,c),h(MA.$$.fragment,c),h(EA.$$.fragment,c),h(CA.$$.fragment,c),h(wA.$$.fragment,c),h(AA.$$.fragment,c),h(yA.$$.fragment,c),h(xA.$$.fragment,c),h(kA.$$.fragment,c),h(SA.$$.fragment,c),h(RA.$$.fragment,c),h(BA.$$.fragment,c),h(PA.$$.fragment,c),h(IA.$$.fragment,c),h(qA.$$.fragment,c),h(NA.$$.fragment,c),h(jA.$$.fragment,c),h(DA.$$.fragment,c),h(GA.$$.fragment,c),h(VA.$$.fragment,c),h(XA.$$.fragment,c),h(zA.$$.fragment,c),h(QA.$$.fragment,c),h(WA.$$.fragment,c),h(HA.$$.fragment,c),h(JA.$$.fragment,c),h(YA.$$.fragment,c),h(KA.$$.fragment,c),h(ZA.$$.fragment,c),h(e0.$$.fragment,c),h(o0.$$.fragment,c),h(t0.$$.fragment,c),h(a0.$$.fragment,c),h(n0.$$.fragment,c),h(s0.$$.fragment,c),h(l0.$$.fragment,c),h(i0.$$.fragment,c),h(c0.$$.fragment,c),h(f0.$$.fragment,c),h(m0.$$.fragment,c),h(g0.$$.fragment,c),h(h0.$$.fragment,c),h(p0.$$.fragment,c),h(u0.$$.fragment,c),h(b0.$$.fragment,c),h(F0.$$.fragment,c),h(v0.$$.fragment,c),h(T0.$$.fragment,c),h(M0.$$.fragment,c),h(C0.$$.fragment,c),h(w0.$$.fragment,c),h(A0.$$.fragment,c),h(y0.$$.fragment,c),h(L0.$$.fragment,c),h(x0.$$.fragment,c),h(S0.$$.fragment,c),h(R0.$$.fragment,c),h(B0.$$.fragment,c),h($0.$$.fragment,c),h(I0.$$.fragment,c),h(q0.$$.fragment,c),h(j0.$$.fragment,c),h(D0.$$.fragment,c),h(G0.$$.fragment,c),h(O0.$$.fragment,c),h(V0.$$.fragment,c),h(X0.$$.fragment,c),h(Q0.$$.fragment,c),h(W0.$$.fragment,c),h(H0.$$.fragment,c),h(U0.$$.fragment,c),h(J0.$$.fragment,c),h(Y0.$$.fragment,c),h(Z0.$$.fragment,c),h(ey.$$.fragment,c),h(oy.$$.fragment,c),h(ry.$$.fragment,c),h(ty.$$.fragment,c),h(ay.$$.fragment,c),h(sy.$$.fragment,c),h(ly.$$.fragment,c),h(iy.$$.fragment,c),h(dy.$$.fragment,c),h(cy.$$.fragment,c),h(fy.$$.fragment,c),h(gy.$$.fragment,c),h(hy.$$.fragment,c),h(py.$$.fragment,c),h(_y.$$.fragment,c),h(uy.$$.fragment,c),h(by.$$.fragment,c),h(vy.$$.fragment,c),h(Ty.$$.fragment,c),h(My.$$.fragment,c),h(Ey.$$.fragment,c),h(Cy.$$.fragment,c),h(wy.$$.fragment,c),h(yy.$$.fragment,c),h(Ly.$$.fragment,c),h(xy.$$.fragment,c),h(ky.$$.fragment,c),h(Sy.$$.fragment,c),h(Ry.$$.fragment,c),h(Py.$$.fragment,c),h($y.$$.fragment,c),h(Iy.$$.fragment,c),h(qy.$$.fragment,c),h(Ny.$$.fragment,c),h(jy.$$.fragment,c),h(Gy.$$.fragment,c),h(Oy.$$.fragment,c),h(Vy.$$.fragment,c),h(Xy.$$.fragment,c),h(zy.$$.fragment,c),h(Qy.$$.fragment,c),h(Hy.$$.fragment,c),h(Uy.$$.fragment,c),h(Jy.$$.fragment,c),h(Yy.$$.fragment,c),h(Ky.$$.fragment,c),h(Zy.$$.fragment,c),h(oL.$$.fragment,c),h(rL.$$.fragment,c),h(tL.$$.fragment,c),h(aL.$$.fragment,c),h(nL.$$.fragment,c),h(sL.$$.fragment,c),h(iL.$$.fragment,c),h(dL.$$.fragment,c),h(cL.$$.fragment,c),h(fL.$$.fragment,c),h(mL.$$.fragment,c),h(gL.$$.fragment,c),h(pL.$$.fragment,c),h(_L.$$.fragment,c),h(uL.$$.fragment,c),h(bL.$$.fragment,c),h(FL.$$.fragment,c),h(vL.$$.fragment,c),h(ML.$$.fragment,c),h(EL.$$.fragment,c),h(CL.$$.fragment,c),h(wL.$$.fragment,c),h(AL.$$.fragment,c),h(yL.$$.fragment,c),h(xL.$$.fragment,c),h(kL.$$.fragment,c),h(SL.$$.fragment,c),h(RL.$$.fragment,c),h(BL.$$.fragment,c),h(PL.$$.fragment,c),h(IL.$$.fragment,c),h(qL.$$.fragment,c),h(NL.$$.fragment,c),h(jL.$$.fragment,c),h(DL.$$.fragment,c),h(GL.$$.fragment,c),h(VL.$$.fragment,c),h(XL.$$.fragment,c),h(zL.$$.fragment,c),h(QL.$$.fragment,c),h(WL.$$.fragment,c),h(HL.$$.fragment,c),h(JL.$$.fragment,c),h(YL.$$.fragment,c),h(KL.$$.fragment,c),h(ZL.$$.fragment,c),h(e8.$$.fragment,c),h(o8.$$.fragment,c),h(t8.$$.fragment,c),h(a8.$$.fragment,c),h(n8.$$.fragment,c),h(s8.$$.fragment,c),h(l8.$$.fragment,c),h(i8.$$.fragment,c),h(c8.$$.fragment,c),h(f8.$$.fragment,c),h(m8.$$.fragment,c),h(h8.$$.fragment,c),h(p8.$$.fragment,c),h(_8.$$.fragment,c),h(b8.$$.fragment,c),h(F8.$$.fragment,c),h(v8.$$.fragment,c),h(T8.$$.fragment,c),RPe=!0)},o(c){p(ge.$$.fragment,c),p(Da.$$.fragment,c),p(SC.$$.fragment,c),p(RC.$$.fragment,c),p(Of.$$.fragment,c),p(BC.$$.fragment,c),p(PC.$$.fragment,c),p(qC.$$.fragment,c),p(NC.$$.fragment,c),p(jC.$$.fragment,c),p(DC.$$.fragment,c),p(GC.$$.fragment,c),p(XC.$$.fragment,c),p(zC.$$.fragment,c),p(QC.$$.fragment,c),p(WC.$$.fragment,c),p(HC.$$.fragment,c),p(YC.$$.fragment,c),p($h.$$.fragment,c),p(KC.$$.fragment,c),p(ZC.$$.fragment,c),p(e3.$$.fragment,c),p(o3.$$.fragment,c),p(a3.$$.fragment,c),p(Qh.$$.fragment,c),p(n3.$$.fragment,c),p(s3.$$.fragment,c),p(l3.$$.fragment,c),p(i3.$$.fragment,c),p(c3.$$.fragment,c),p(f3.$$.fragment,c),p(m3.$$.fragment,c),p(g3.$$.fragment,c),p(h3.$$.fragment,c),p(p3.$$.fragment,c),p(u3.$$.fragment,c),p(b3.$$.fragment,c),p(F3.$$.fragment,c),p(v3.$$.fragment,c),p(T3.$$.fragment,c),p(M3.$$.fragment,c),p(C3.$$.fragment,c),p(w3.$$.fragment,c),p(A3.$$.fragment,c),p(y3.$$.fragment,c),p(L3.$$.fragment,c),p(x3.$$.fragment,c),p(S3.$$.fragment,c),p(R3.$$.fragment,c),p(B3.$$.fragment,c),p(P3.$$.fragment,c),p($3.$$.fragment,c),p(I3.$$.fragment,c),p(N3.$$.fragment,c),p(j3.$$.fragment,c),p(D3.$$.fragment,c),p(G3.$$.fragment,c),p(O3.$$.fragment,c),p(V3.$$.fragment,c),p(z3.$$.fragment,c),p(Q3.$$.fragment,c),p(W3.$$.fragment,c),p(H3.$$.fragment,c),p(U3.$$.fragment,c),p(J3.$$.fragment,c),p(K3.$$.fragment,c),p(Z3.$$.fragment,c),p(ew.$$.fragment,c),p(ow.$$.fragment,c),p(rw.$$.fragment,c),p(tw.$$.fragment,c),p(nw.$$.fragment,c),p(sw.$$.fragment,c),p(lw.$$.fragment,c),p(iw.$$.fragment,c),p(dw.$$.fragment,c),p(cw.$$.fragment,c),p(mw.$$.fragment,c),p(gw.$$.fragment,c),p(hw.$$.fragment,c),p(pw.$$.fragment,c),p(_w.$$.fragment,c),p(uw.$$.fragment,c),p(Fw.$$.fragment,c),p(vw.$$.fragment,c),p(Tw.$$.fragment,c),p(Mw.$$.fragment,c),p(Ew.$$.fragment,c),p(Cw.$$.fragment,c),p(Aw.$$.fragment,c),p(yw.$$.fragment,c),p(Lw.$$.fragment,c),p(xw.$$.fragment,c),p(kw.$$.fragment,c),p(Sw.$$.fragment,c),p(Bw.$$.fragment,c),p(Pw.$$.fragment,c),p($w.$$.fragment,c),p(Iw.$$.fragment,c),p(qw.$$.fragment,c),p(Nw.$$.fragment,c),p(Dw.$$.fragment,c),p(Gw.$$.fragment,c),p(Ow.$$.fragment,c),p(Vw.$$.fragment,c),p(Xw.$$.fragment,c),p(zw.$$.fragment,c),p(Ww.$$.fragment,c),p(Hw.$$.fragment,c),p(Uw.$$.fragment,c),p(Jw.$$.fragment,c),p(Yw.$$.fragment,c),p(Kw.$$.fragment,c),p(eA.$$.fragment,c),p(oA.$$.fragment,c),p(rA.$$.fragment,c),p(tA.$$.fragment,c),p(aA.$$.fragment,c),p(nA.$$.fragment,c),p(lA.$$.fragment,c),p(iA.$$.fragment,c),p(dA.$$.fragment,c),p(cA.$$.fragment,c),p(fA.$$.fragment,c),p(mA.$$.fragment,c),p(hA.$$.fragment,c),p(pA.$$.fragment,c),p(_A.$$.fragment,c),p(bA.$$.fragment,c),p(FA.$$.fragment,c),p(vA.$$.fragment,c),p(MA.$$.fragment,c),p(EA.$$.fragment,c),p(CA.$$.fragment,c),p(wA.$$.fragment,c),p(AA.$$.fragment,c),p(yA.$$.fragment,c),p(xA.$$.fragment,c),p(kA.$$.fragment,c),p(SA.$$.fragment,c),p(RA.$$.fragment,c),p(BA.$$.fragment,c),p(PA.$$.fragment,c),p(IA.$$.fragment,c),p(qA.$$.fragment,c),p(NA.$$.fragment,c),p(jA.$$.fragment,c),p(DA.$$.fragment,c),p(GA.$$.fragment,c),p(VA.$$.fragment,c),p(XA.$$.fragment,c),p(zA.$$.fragment,c),p(QA.$$.fragment,c),p(WA.$$.fragment,c),p(HA.$$.fragment,c),p(JA.$$.fragment,c),p(YA.$$.fragment,c),p(KA.$$.fragment,c),p(ZA.$$.fragment,c),p(e0.$$.fragment,c),p(o0.$$.fragment,c),p(t0.$$.fragment,c),p(a0.$$.fragment,c),p(n0.$$.fragment,c),p(s0.$$.fragment,c),p(l0.$$.fragment,c),p(i0.$$.fragment,c),p(c0.$$.fragment,c),p(f0.$$.fragment,c),p(m0.$$.fragment,c),p(g0.$$.fragment,c),p(h0.$$.fragment,c),p(p0.$$.fragment,c),p(u0.$$.fragment,c),p(b0.$$.fragment,c),p(F0.$$.fragment,c),p(v0.$$.fragment,c),p(T0.$$.fragment,c),p(M0.$$.fragment,c),p(C0.$$.fragment,c),p(w0.$$.fragment,c),p(A0.$$.fragment,c),p(y0.$$.fragment,c),p(L0.$$.fragment,c),p(x0.$$.fragment,c),p(S0.$$.fragment,c),p(R0.$$.fragment,c),p(B0.$$.fragment,c),p($0.$$.fragment,c),p(I0.$$.fragment,c),p(q0.$$.fragment,c),p(j0.$$.fragment,c),p(D0.$$.fragment,c),p(G0.$$.fragment,c),p(O0.$$.fragment,c),p(V0.$$.fragment,c),p(X0.$$.fragment,c),p(Q0.$$.fragment,c),p(W0.$$.fragment,c),p(H0.$$.fragment,c),p(U0.$$.fragment,c),p(J0.$$.fragment,c),p(Y0.$$.fragment,c),p(Z0.$$.fragment,c),p(ey.$$.fragment,c),p(oy.$$.fragment,c),p(ry.$$.fragment,c),p(ty.$$.fragment,c),p(ay.$$.fragment,c),p(sy.$$.fragment,c),p(ly.$$.fragment,c),p(iy.$$.fragment,c),p(dy.$$.fragment,c),p(cy.$$.fragment,c),p(fy.$$.fragment,c),p(gy.$$.fragment,c),p(hy.$$.fragment,c),p(py.$$.fragment,c),p(_y.$$.fragment,c),p(uy.$$.fragment,c),p(by.$$.fragment,c),p(vy.$$.fragment,c),p(Ty.$$.fragment,c),p(My.$$.fragment,c),p(Ey.$$.fragment,c),p(Cy.$$.fragment,c),p(wy.$$.fragment,c),p(yy.$$.fragment,c),p(Ly.$$.fragment,c),p(xy.$$.fragment,c),p(ky.$$.fragment,c),p(Sy.$$.fragment,c),p(Ry.$$.fragment,c),p(Py.$$.fragment,c),p($y.$$.fragment,c),p(Iy.$$.fragment,c),p(qy.$$.fragment,c),p(Ny.$$.fragment,c),p(jy.$$.fragment,c),p(Gy.$$.fragment,c),p(Oy.$$.fragment,c),p(Vy.$$.fragment,c),p(Xy.$$.fragment,c),p(zy.$$.fragment,c),p(Qy.$$.fragment,c),p(Hy.$$.fragment,c),p(Uy.$$.fragment,c),p(Jy.$$.fragment,c),p(Yy.$$.fragment,c),p(Ky.$$.fragment,c),p(Zy.$$.fragment,c),p(oL.$$.fragment,c),p(rL.$$.fragment,c),p(tL.$$.fragment,c),p(aL.$$.fragment,c),p(nL.$$.fragment,c),p(sL.$$.fragment,c),p(iL.$$.fragment,c),p(dL.$$.fragment,c),p(cL.$$.fragment,c),p(fL.$$.fragment,c),p(mL.$$.fragment,c),p(gL.$$.fragment,c),p(pL.$$.fragment,c),p(_L.$$.fragment,c),p(uL.$$.fragment,c),p(bL.$$.fragment,c),p(FL.$$.fragment,c),p(vL.$$.fragment,c),p(ML.$$.fragment,c),p(EL.$$.fragment,c),p(CL.$$.fragment,c),p(wL.$$.fragment,c),p(AL.$$.fragment,c),p(yL.$$.fragment,c),p(xL.$$.fragment,c),p(kL.$$.fragment,c),p(SL.$$.fragment,c),p(RL.$$.fragment,c),p(BL.$$.fragment,c),p(PL.$$.fragment,c),p(IL.$$.fragment,c),p(qL.$$.fragment,c),p(NL.$$.fragment,c),p(jL.$$.fragment,c),p(DL.$$.fragment,c),p(GL.$$.fragment,c),p(VL.$$.fragment,c),p(XL.$$.fragment,c),p(zL.$$.fragment,c),p(QL.$$.fragment,c),p(WL.$$.fragment,c),p(HL.$$.fragment,c),p(JL.$$.fragment,c),p(YL.$$.fragment,c),p(KL.$$.fragment,c),p(ZL.$$.fragment,c),p(e8.$$.fragment,c),p(o8.$$.fragment,c),p(t8.$$.fragment,c),p(a8.$$.fragment,c),p(n8.$$.fragment,c),p(s8.$$.fragment,c),p(l8.$$.fragment,c),p(i8.$$.fragment,c),p(c8.$$.fragment,c),p(f8.$$.fragment,c),p(m8.$$.fragment,c),p(h8.$$.fragment,c),p(p8.$$.fragment,c),p(_8.$$.fragment,c),p(b8.$$.fragment,c),p(F8.$$.fragment,c),p(v8.$$.fragment,c),p(T8.$$.fragment,c),RPe=!1},d(c){t(Z),c&&t(io),c&&t(de),_(ge),c&&t(qf),c&&t(fa),c&&t(xe),c&&t(co),c&&t(jf),_(Da,c),c&&t(fo),c&&t(ue),c&&t(zo),c&&t(Ga),c&&t(SRe),c&&t(Vi),_(SC),c&&t(RRe),c&&t(zn),c&&t(BRe),_(RC,c),c&&t(PRe),c&&t(C7),c&&t($Re),_(Of,c),c&&t(IRe),c&&t(Xi),_(BC),c&&t(qRe),c&&t(Qo),_(PC),_(qC),_(NC),_(jC),c&&t(NRe),c&&t(Qi),_(DC),c&&t(jRe),c&&t(Wo),_(GC),_(XC),_(zC),_(QC),c&&t(DRe),c&&t(Wi),_(WC),c&&t(GRe),c&&t(Ho),_(HC),_(YC),_($h),_(KC),_(ZC),c&&t(ORe),c&&t(Hi),_(e3),c&&t(VRe),c&&t(Uo),_(o3),_(a3),_(Qh),_(n3),_(s3),c&&t(XRe),c&&t(Ji),_(l3),c&&t(zRe),c&&t(Jo),_(i3),_(c3),_(f3),_(m3),_(g3),c&&t(QRe),c&&t(Zi),_(h3),c&&t(WRe),c&&t(Yo),_(p3),_(u3),_(b3),_(F3),_(v3),c&&t(HRe),c&&t(rd),_(T3),c&&t(URe),c&&t(Ko),_(M3),_(C3),_(w3),_(A3),_(y3),c&&t(JRe),c&&t(nd),_(L3),c&&t(YRe),c&&t(Zo),_(x3),_(S3),_(R3),_(B3),_(P3),c&&t(KRe),c&&t(id),_($3),c&&t(ZRe),c&&t(er),_(I3),_(N3),_(j3),_(D3),_(G3),c&&t(eBe),c&&t(fd),_(O3),c&&t(oBe),c&&t(or),_(V3),_(z3),_(Q3),_(W3),_(H3),c&&t(rBe),c&&t(hd),_(U3),c&&t(tBe),c&&t(rr),_(J3),_(K3),_(Z3),_(ew),_(ow),c&&t(aBe),c&&t(ud),_(rw),c&&t(nBe),c&&t(tr),_(tw),_(nw),_(sw),_(lw),_(iw),c&&t(sBe),c&&t(vd),_(dw),c&&t(lBe),c&&t(ar),_(cw),_(mw),_(gw),_(hw),_(pw),c&&t(iBe),c&&t(Ed),_(_w),c&&t(dBe),c&&t(nr),_(uw),_(Fw),_(vw),_(Tw),_(Mw),c&&t(cBe),c&&t(Ad),_(Ew),c&&t(fBe),c&&t(sr),_(Cw),_(Aw),_(yw),_(Lw),_(xw),c&&t(mBe),c&&t(xd),_(kw),c&&t(gBe),c&&t(lr),_(Sw),_(Bw),_(Pw),_($w),_(Iw),c&&t(hBe),c&&t(Rd),_(qw),c&&t(pBe),c&&t(ir),_(Nw),_(Dw),_(Gw),_(Ow),_(Vw),c&&t(_Be),c&&t($d),_(Xw),c&&t(uBe),c&&t(dr),_(zw),_(Ww),_(Hw),_(Uw),_(Jw),c&&t(bBe),c&&t(Nd),_(Yw),c&&t(FBe),c&&t(cr),_(Kw),_(eA),_(oA),_(rA),_(tA),c&&t(vBe),c&&t(Gd),_(aA),c&&t(TBe),c&&t(fr),_(nA),_(lA),_(iA),_(dA),_(cA),c&&t(MBe),c&&t(Xd),_(fA),c&&t(EBe),c&&t(mr),_(mA),_(hA),_(pA),_(_A),_(bA),c&&t(CBe),c&&t(Wd),_(FA),c&&t(wBe),c&&t(gr),_(vA),_(MA),_(EA),_(CA),_(wA),c&&t(ABe),c&&t(Jd),_(AA),c&&t(yBe),c&&t(hr),_(yA),_(xA),_(kA),_(SA),_(RA),c&&t(LBe),c&&t(ec),_(BA),c&&t(xBe),c&&t(pr),_(PA),_(IA),_(qA),_(NA),_(jA),c&&t(kBe),c&&t(tc),_(DA),c&&t(SBe),c&&t(_r),_(GA),_(VA),_(XA),_(zA),_(QA),c&&t(RBe),c&&t(sc),_(WA),c&&t(BBe),c&&t(ur),_(HA),_(JA),_(YA),_(KA),_(ZA),c&&t(PBe),c&&t(cc),_(e0),c&&t($Be),c&&t(br),_(o0),_(t0),_(a0),_(n0),_(s0),c&&t(IBe),c&&t(gc),_(l0),c&&t(qBe),c&&t(Fr),_(i0),_(c0),_(f0),_(m0),_(g0),c&&t(NBe),c&&t(_c),_(h0),c&&t(jBe),c&&t(vr),_(p0),_(u0),_(b0),_(F0),_(v0),c&&t(DBe),c&&t(Fc),_(T0),c&&t(GBe),c&&t(Tr),_(M0),_(C0),_(w0),_(A0),_(y0),c&&t(OBe),c&&t(Mc),_(L0),c&&t(VBe),c&&t(Mr),_(x0),_(S0),_(R0),_(B0),_($0),c&&t(XBe),c&&t(wc),_(I0),c&&t(zBe),c&&t(Er),_(q0),_(j0),_(D0),_(G0),_(O0),c&&t(QBe),c&&t(Lc),_(V0),c&&t(WBe),c&&t(Cr),_(X0),_(Q0),_(W0),_(H0),_(U0),c&&t(HBe),c&&t(Sc),_(J0),c&&t(UBe),c&&t(wr),_(Y0),_(Z0),_(ey),_(oy),_(ry),c&&t(JBe),c&&t(Pc),_(ty),c&&t(YBe),c&&t(Ar),_(ay),_(sy),_(ly),_(iy),_(dy),c&&t(KBe),c&&t(qc),_(cy),c&&t(ZBe),c&&t(yr),_(fy),_(gy),_(hy),_(py),_(_y),c&&t(ePe),c&&t(Dc),_(uy),c&&t(oPe),c&&t(Lr),_(by),_(vy),_(Ty),_(My),_(Ey),c&&t(rPe),c&&t(Vc),_(Cy),c&&t(tPe),c&&t(xr),_(wy),_(yy),_(Ly),_(xy),_(ky),c&&t(aPe),c&&t(Qc),_(Sy),c&&t(nPe),c&&t(kr),_(Ry),_(Py),_($y),_(Iy),_(qy),c&&t(sPe),c&&t(Uc),_(Ny),c&&t(lPe),c&&t(Sr),_(jy),_(Gy),_(Oy),_(Vy),_(Xy),c&&t(iPe),c&&t(Kc),_(zy),c&&t(dPe),c&&t(Rr),_(Qy),_(Hy),_(Uy),_(Jy),_(Yy),c&&t(cPe),c&&t(of),_(Ky),c&&t(fPe),c&&t(Br),_(Zy),_(oL),_(rL),_(tL),_(aL),c&&t(mPe),c&&t(af),_(nL),c&&t(gPe),c&&t(Pr),_(sL),_(iL),_(dL),_(cL),_(fL),c&&t(hPe),c&&t(lf),_(mL),c&&t(pPe),c&&t($r),_(gL),_(pL),_(_L),_(uL),_(bL),c&&t(_Pe),c&&t(ff),_(FL),c&&t(uPe),c&&t(Ir),_(vL),_(ML),_(EL),_(CL),_(wL),c&&t(bPe),c&&t(hf),_(AL),c&&t(FPe),c&&t(qr),_(yL),_(xL),_(kL),_(SL),_(RL),c&&t(vPe),c&&t(uf),_(BL),c&&t(TPe),c&&t(Nr),_(PL),_(IL),_(qL),_(NL),_(jL),c&&t(MPe),c&&t(vf),_(DL),c&&t(EPe),c&&t(jr),_(GL),_(VL),_(XL),_(zL),_(QL),c&&t(CPe),c&&t(Ef),_(WL),c&&t(wPe),c&&t(Dr),_(HL),_(JL),_(YL),_(KL),_(ZL),c&&t(APe),c&&t(Af),_(e8),c&&t(yPe),c&&t(Gr),_(o8),_(t8),_(a8),_(n8),_(s8),c&&t(LPe),c&&t(xf),_(l8),c&&t(xPe),c&&t(Or),_(i8),_(c8),_(f8),_(m8),_(h8),c&&t(kPe),c&&t(Rf),_(p8),c&&t(SPe),c&&t(Vr),_(_8),_(b8),_(F8),_(v8),_(T8)}}}const x3t={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function k3t(If){return C3t(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class I3t extends v3t{constructor(Z){super();T3t(this,Z,k3t,L3t,M3t,{})}}export{I3t as default,x3t as metadata};
